TITLE: Configuring NextAuth.js API Route Handler
DESCRIPTION: Sets up the main NextAuth.js configuration file with GitHub provider authentication. Creates a dynamic route handler that manages all authentication-related requests.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import GithubProvider from "next-auth/providers/github"

export default NextAuth({
  // Configure one or more authentication providers
  providers: [
    GithubProvider({
      clientId: process.env.GITHUB_ID,
      clientSecret: process.env.GITHUB_SECRET,
    }),
    // ...add more providers here
  ],
})

----------------------------------------

TITLE: Implementing Session Callback in NextAuth.js
DESCRIPTION: Callback for customizing session data that gets passed to the client. Allows exposing specific token data to the client session.

LANGUAGE: javascript
CODE:
callbacks: {
  async session(session, token) {
    session.accessToken = token.accessToken
    return session
  }
}

----------------------------------------

TITLE: Configuring NextAuth.js API Route in Next.js
DESCRIPTION: Sets up the NextAuth.js authentication API route with GitHub provider configuration. This file handles all authentication-related requests and can be extended with additional providers and database configuration.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import Providers from "next-auth/providers"

export default NextAuth({
  // Configure one or more authentication providers
  providers: [
    Providers.GitHub({
      clientId: process.env.GITHUB_ID,
      clientSecret: process.env.GITHUB_SECRET,
    }),
    // ...add more providers here
  ],

  // A database is optional, but required to persist accounts in a database
  database: process.env.DATABASE_URL,
})

----------------------------------------

TITLE: Implementing NextAuth.js Callbacks
DESCRIPTION: Shows how to use JWT and session callbacks to pass additional data from authentication flow to the client side.

LANGUAGE: javascript
CODE:
callbacks: {
  async jwt({ token, account }) {
    // Persist the OAuth access_token to the token right after signin
    if (account) {
      token.accessToken = account.access_token
    }
    return token
  },
  async session({ session, token, user }) {
    // Send properties to the client, like an access_token from a provider.
    session.accessToken = token.accessToken
    return session
  }
}

----------------------------------------

TITLE: Implementing Session Callback in NextAuth.js
DESCRIPTION: Callback for customizing session data that gets passed to the client. Allows exposing specific token data to the client session.

LANGUAGE: javascript
CODE:
callbacks: {
  async session(session, token) {
    session.accessToken = token.accessToken
    return session
  }
}

----------------------------------------

TITLE: Accessing Session Data with useSession in React
DESCRIPTION: Demonstrates how to use the useSession hook to check if a user is signed in and access session data in a React component.

LANGUAGE: jsx
CODE:
import { useSession } from "next-auth/client"

export default function Component() {
  const [session, loading] = useSession()

  if (session) {
    return <p>Signed in as {session.user.email}</p>
  }

  return <a href="/api/auth/signin">Sign in</a>
}

----------------------------------------

TITLE: Simple NextAuth.js Initialization in Next.js
DESCRIPTION: This snippet demonstrates the basic initialization of NextAuth.js in a Next.js project. It requires creating a catch-all API route file and passing options to the NextAuth function.

LANGUAGE: typescript
CODE:
import NextAuth from "next-auth"

export default NextAuth({
  ...
})

----------------------------------------

TITLE: Implementing Basic NextAuth.js Callbacks
DESCRIPTION: Example showing the basic structure of all available NextAuth.js callbacks including signIn, redirect, session, and JWT handlers.

LANGUAGE: javascript
CODE:
callbacks: {
  async signIn({ user, account, profile, email, credentials }) {
    return true
  },
  async redirect({ url, baseUrl }) {
    return baseUrl
  },
  async session({ session, user, token }) {
    return session
  },
  async jwt({ token, user, account, profile, isNewUser }) {
    return token
  }
}

----------------------------------------

TITLE: Accessing Custom Session Data
DESCRIPTION: Example of accessing custom session data (access token) in a React component using useSession hook.

LANGUAGE: javascript
CODE:
import { useSession, signIn, signOut } from "next-auth/react"

export default function Component() {
  const { data } = useSession()
  const { accessToken } = data

  return <div>Access Token: {accessToken}</div>
}

----------------------------------------

TITLE: Example Session Object Structure in TypeScript
DESCRIPTION: Demonstrates the structure of a typical NextAuth.js session object containing user information and expiration date.

LANGUAGE: typescript
CODE:
{
  user: {
    name: string
    email: string
    image: string
  },
  expires: Date // This is the expiry of the session, not any of the tokens within the session
}

----------------------------------------

TITLE: Implementing SignIn Callback in NextAuth.js
DESCRIPTION: Implementation of the signIn callback to control user access. Returns boolean or URL string to allow/deny access or redirect to specific pages.

LANGUAGE: javascript
CODE:
callbacks: {
  async signIn(user, account, profile) {
    const isAllowedToSignIn = true
    if (isAllowedToSignIn) {
      return true
    } else {
      return false
      // Or return '/unauthorized'
    }
  }
}

----------------------------------------

TITLE: Implementing SessionProvider in Next.js App
DESCRIPTION: Configures the SessionProvider component at the application root to enable shared session state across components.

LANGUAGE: javascript
CODE:
// pages/_app.js
import { SessionProvider } from "next-auth/react"

export default function App({
  Component,
  pageProps: { session, ...pageProps },
}) {
  return (
    <SessionProvider session={session}>
      <Component {...pageProps} />
    </SessionProvider>
  )
}

----------------------------------------

TITLE: SignIn Callback Implementation
DESCRIPTION: Example of implementing the signIn callback to control user authentication access with custom logic and redirect options.

LANGUAGE: javascript
CODE:
callbacks: {
  async signIn({ user, account, profile, email, credentials }) {
    const isAllowedToSignIn = true
    if (isAllowedToSignIn) {
      return true
    } else {
      // Return false to display a default error message
      return false
      // Or you can return a URL to redirect to:
      // return '/unauthorized'
    }
  }
}

----------------------------------------

TITLE: Session Callback with Custom Data
DESCRIPTION: Implementation of the session callback showing how to pass custom data from the token to the client session.

LANGUAGE: javascript
CODE:
callbacks: {
  async session({ session, token, user }) {
    // Send properties to the client, like an access_token from a provider.
    session.accessToken = token.accessToken
    return session
  }
}

----------------------------------------

TITLE: Configuring Custom Authentication Pages in NextAuth.js
DESCRIPTION: This snippet shows how to configure custom pages for sign-in, sign-out, error handling, and new user registration in the NextAuth.js configuration file.

LANGUAGE: javascript
CODE:
...
  pages: {
    signIn: '/auth/signin',
    signOut: '/auth/signout',
    error: '/auth/error', // Error code passed in query string as ?error=
    verifyRequest: '/auth/verify-request', // (used for check email message)
    newUser: '/auth/new-user' // New users will be directed here on first sign in (leave the property out if not of interest)
  }
...

----------------------------------------

TITLE: Configuring Custom Authentication Pages in NextAuth.js
DESCRIPTION: This snippet shows how to configure custom pages for sign-in, sign-out, error handling, and new user registration in the NextAuth.js configuration file.

LANGUAGE: javascript
CODE:
...
  pages: {
    signIn: '/auth/signin',
    signOut: '/auth/signout',
    error: '/auth/error', // Error code passed in query string as ?error=
    verifyRequest: '/auth/verify-request', // (used for check email message)
    newUser: '/auth/new-user' // New users will be directed here on first sign in (leave the property out if not of interest)
  }
...

----------------------------------------

TITLE: Creating Authentication UI Component
DESCRIPTION: Implements a React component using useSession hook to display different content based on authentication status and handle sign-in/sign-out actions.

LANGUAGE: javascript
CODE:
import { useSession, signIn, signOut } from "next-auth/react"

export default function Component() {
  const { data: session } = useSession()
  if (session) {
    return (
      <>
        Signed in as {session.user.email} <br />
        <button onClick={() => signOut()}>Sign out</button>
      </>
    )
  }
  return (
    <>
      Not signed in <br />
      <button onClick={() => signIn()}>Sign in</button>
    </>
  )
}

----------------------------------------

TITLE: Initializing NextAuth.js Callbacks Overview
DESCRIPTION: Basic structure showing all available callback functions in NextAuth.js configuration. These callbacks control sign-in flow, redirects, session handling, and JWT token management.

LANGUAGE: javascript
CODE:
callbacks: {
  async signIn(user, account, profile) {
    return true
  },
  async redirect(url, baseUrl) {
    return baseUrl
  },
  async session(session, user) {
    return session
  },
  async jwt(token, user, account, profile, isNewUser) {
    return token
  }
}

----------------------------------------

TITLE: Setting NextAuth Environment Variables
DESCRIPTION: Configuration of essential NextAuth.js environment variables including NEXTAUTH_URL and NEXTAUTH_SECRET for production deployment.

LANGUAGE: plaintext
CODE:
NEXTAUTH_URL=https://example.com

----------------------------------------

TITLE: Configuring NextAuth.js with Google OAuth and Refresh Token Rotation
DESCRIPTION: This snippet demonstrates how to set up NextAuth.js with Google OAuth provider, including custom authorization URL and callbacks for JWT and session handling. It also implements a function to refresh access tokens when they expire.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import Providers from "next-auth/providers"

const GOOGLE_AUTHORIZATION_URL =
  "https://accounts.google.com/o/oauth2/v2/auth?" +
  new URLSearchParams({
    prompt: "consent",
    access_type: "offline",
    response_type: "code",
  })

/**
 * Takes a token, and returns a new token with updated
 * `accessToken` and `accessTokenExpires`. If an error occurs,
 * returns the old token and an error property
 */
async function refreshAccessToken(token) {
  try {
    const url =
      "https://oauth2.googleapis.com/token?" +
      new URLSearchParams({
        client_id: process.env.GOOGLE_CLIENT_ID,
        client_secret: process.env.GOOGLE_CLIENT_SECRET,
        grant_type: "refresh_token",
        refresh_token: token.refreshToken,
      })

    const response = await fetch(url, {
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      method: "POST",
    })

    const refreshedTokens = await response.json()

    if (!response.ok) {
      throw refreshedTokens
    }

    return {
      ...token,
      accessToken: refreshedTokens.access_token,
      accessTokenExpires: Date.now() + refreshedTokens.expires_in * 1000,
      refreshToken: refreshedTokens.refresh_token ?? token.refreshToken, // Fall back to old refresh token
    }
  } catch (error) {
    console.log(error)

    return {
      ...token,
      error: "RefreshAccessTokenError",
    }
  }
}

export default NextAuth({
  providers: [
    Providers.Google({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      authorizationUrl: GOOGLE_AUTHORIZATION_URL,
    }),
  ],
  callbacks: {
    async jwt(token, user, account) {
      // Initial sign in
      if (account && user) {
        return {
          accessToken: account.accessToken,
          accessTokenExpires: Date.now() + account.expires_in * 1000,
          refreshToken: account.refresh_token,
          user,
        }
      }

      // Return previous token if the access token has not expired yet
      if (Date.now() < token.accessTokenExpires) {
        return token
      }

      // Access token has expired, try to update it
      return refreshAccessToken(token)
    },
    async session(session, token) {
      if (token) {
        session.user = token.user
        session.accessToken = token.accessToken
        session.error = token.error
      }

      return session
    },
  },
})

----------------------------------------

TITLE: Implementing Custom Adapter in TypeScript for NextAuth.js
DESCRIPTION: Example of how to implement a custom adapter for NextAuth.js using TypeScript. This ensures type safety and adherence to the expected adapter interface.

LANGUAGE: typescript
CODE:
import type { Adapter } from "next-auth/adapters"

function MyAdapter(): Adapter {
  return {
    // your adapter methods here
  }
}

----------------------------------------

TITLE: Configuring Role-Based Access with NextAuth.js Middleware
DESCRIPTION: Shows how to implement role-based access control using NextAuth.js middleware. This example restricts access to the /admin route to users with the 'admin' role.

LANGUAGE: javascript
CODE:
import { withAuth } from "next-auth/middleware"

export default withAuth({
  callbacks: {
    authorized: ({ token }) => token?.role === "admin"
  }
})

----------------------------------------

TITLE: Configuring NextAuth with TypeScript in Next.js API Route
DESCRIPTION: Example of setting up NextAuth in a Next.js API route using TypeScript, showcasing type-safe session callback implementation.

LANGUAGE: typescript
CODE:
import NextAuth from "next-auth"

export default NextAuth({
  callbacks: {
    session({ session, token, user }) {
      return session // The return type will match the one returned in `useSession()`
    },
  },
})

----------------------------------------

TITLE: Securing Client-Side Pages with useSession Hook in Next.js
DESCRIPTION: This snippet demonstrates how to use the useSession hook from NextAuth.js to protect client-side rendered pages. It checks the session status and renders content accordingly.

LANGUAGE: javascript
CODE:
import { useSession, getSession } from "next-auth/client"

export default function Page() {
  const [session, loading] = useSession()

  if (loading) return null

  if (!loading && !session) return <p>Access Denied</p>

  return (
    <>
      <h1>Protected Page</h1>
      <p>You can view this page because you are signed in.</p>
    </>
  )
}

----------------------------------------

TITLE: Protecting API Routes with Session Validation
DESCRIPTION: Demonstrates how to secure API routes by checking session status using getSession method.

LANGUAGE: javascript
CODE:
import { getSession } from "next-auth/react"

export default async (req, res) => {
  const session = await getSession({ req })

  if (session) {
    res.send({
      content:
        "This is protected content. You can access this content because you are signed in.",
    })
  } else {
    res.send({
      error: "You must be sign in to view the protected content on this page.",
    })
  }
}

----------------------------------------

TITLE: Securing Client-Side Pages with useSession Hook in Next.js
DESCRIPTION: This snippet demonstrates how to protect a client-side rendered page using the useSession hook from NextAuth.js. It checks the session status and renders content accordingly.

LANGUAGE: javascript
CODE:
import { useSession, getSession } from "next-auth/react"

export default function Page() {
  const { data: session, status } = useSession()

  if (status === "loading") {
    return <p>Loading...</p>
  }

  if (status === "unauthenticated") {
    return <p>Access Denied</p>
  }

  return (
    <>
      <h1>Protected Page</h1>
      <p>You can view this page because you are signed in.</p>
    </>
  )
}

----------------------------------------

TITLE: Configuring LDAP Authentication Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up a custom Credential provider for LDAP authentication in NextAuth.js. It includes the provider configuration, LDAP client creation, authentication logic, and JWT/session callbacks.

LANGUAGE: javascript
CODE:
const ldap = require("ldapjs")
import NextAuth from "next-auth"
import Providers from "next-auth/providers"

export default NextAuth({
  providers: [
    Providers.Credentials({
      name: "LDAP",
      credentials: {
        username: { label: "DN", type: "text", placeholder: "" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials, req) {
        // You might want to pull this call out so we're not making a new LDAP client on every login attemp
        const client = ldap.createClient({
          url: process.env.LDAP_URI,
        })

        // Essentially promisify the LDAPJS client.bind function
        return new Promise((resolve, reject) => {
          client.bind(credentials.username, credentials.password, (error) => {
            if (error) {
              console.error("Failed")
              reject()
            } else {
              console.log("Logged in")
              resolve({
                username: credentials.username,
                password: credentials.password,
              })
            }
          })
        })
      },
    }),
  ],
  callbacks: {
    async jwt(token, user, account, profile, isNewUser) {
      const isSignIn = user ? true : false
      if (isSignIn) {
        token.username = user.username
        token.password = user.password
      }
      return token
    },
    async session(session, user) {
      return { ...session, user: { username: user.username } }
    },
  },
  secret: process.env.NEXTAUTH_SECRET,
  jwt: {
    secret: process.env.NEXTAUTH_SECRET,
    encryption: true, // Very important to encrypt the JWT, otherwise you're leaking username+password into the browser
  },
})

----------------------------------------

TITLE: Implementing Custom Database Adapter in TypeScript for NextAuth.js
DESCRIPTION: This code snippet demonstrates the structure of a custom database adapter for NextAuth.js. It includes all required methods for sign-in flows, as well as methods for email/passwordless sign-in and future implementations. Each method is async and returns a Promise.

LANGUAGE: typescript
CODE:
/** @return { import("next-auth/adapters").Adapter } */
export default function MyAdapter(client, options = {}) {
  return {
    async createUser(user) {
      return
    },
    async getUser(id) {
      return
    },
    async getUserByEmail(email) {
      return
    },
    async getUserByAccount({providerAccountId, provider}) {
      return
    },
    async updateUser(user) {
      return
    },
    async deleteUser(userId) {
      return
    },
    async linkAccount(account) {
      return
    },
    async unlinkAccount({ providerAccountId, provider}) {
      return
    },
    async createSession({ sessionToken, userId, expires }) {
      return
    },
    async getSessionAndUser(sessionToken) {
      return
    },
    async updateSession({ sessionToken }) {
      return
    },
    async deleteSession(sessionToken) {
      return
    },
    async createVerificationToken({ identifier, expires, token }) {
      return
    },
    async useVerificationToken({ identifier, token }) {
      return
    },
  }
}

----------------------------------------

TITLE: Advanced NextAuth.js Initialization in Next.js
DESCRIPTION: This snippet shows how to initialize NextAuth.js with more control over the request handling. It allows for custom logic before passing the request to NextAuth, such as logging, adding headers, or reading query parameters.

LANGUAGE: typescript
CODE:
import type { NextApiRequest, NextApiResponse } from "next"
import NextAuth from "next-auth"

export default async function auth(req: NextApiRequest, res: NextApiResponse) {
  // Do whatever you want here, before the request is passed down to `NextAuth`
  return await NextAuth(req, res, {
    ...
  })
}

----------------------------------------

TITLE: Defining Prisma Schema for NextAuth.js
DESCRIPTION: Prisma schema definition for NextAuth.js, including models for Account, Session, User, and VerificationToken. This schema is required for the Prisma Adapter to function correctly.

LANGUAGE: json
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

----------------------------------------

TITLE: JWT Callback with OAuth Token Persistence
DESCRIPTION: Example showing how to persist OAuth access tokens in the JWT callback after user sign-in.

LANGUAGE: javascript
CODE:
callbacks: {
  async jwt({ token, account }) {
    // Persist the OAuth access_token to the token right after signin
    if (account) {
      token.accessToken = account.access_token
    }
    return token
  }
}

----------------------------------------

TITLE: OAuth Provider Interface Definition
DESCRIPTION: TypeScript interface defining all available options for configuring OAuth providers.

LANGUAGE: typescript
CODE:
interface OAuthConfig {
  wellKnown?: string
  authorization: EndpointHandler<AuthorizationParameters>
  token: EndpointHandler<
    UrlParams,
    {
      params: CallbackParamsType
      checks: OAuthChecks
    },
    { tokens: TokenSet }
  >
  userinfo?: EndpointHandler<UrlParams, { tokens: TokenSet }, Profile>
  type: "oauth"
  id: string
  version: string
  profile(profile: P, tokens: TokenSet): Awaitable<User & { id: string }>
  checks?: ChecksType | ChecksType[]
  clientId: string
  clientSecret: string
  idToken?: boolean
  region?: string
  issuer?: string
  client?: Partial<ClientMetadata>
}

----------------------------------------

TITLE: Configuring NextAuth.js Credentials Provider
DESCRIPTION: Implementation of the Credentials provider in NextAuth.js that demonstrates how to set up custom authentication with username and password. The code shows configuration of credentials fields and authorization logic including API call handling.

LANGUAGE: javascript
CODE:
import CredentialsProvider from "next-auth/providers/credentials"
...
providers: [
  CredentialsProvider({
    // The name to display on the sign in form (e.g. 'Sign in with...')
    name: 'Credentials',
    // The credentials is used to generate a suitable form on the sign in page.
    // You can specify whatever fields you are expecting to be submitted.
    // e.g. domain, username, password, 2FA token, etc.
    // You can pass any HTML attribute to the <input> tag through the object.
    credentials: {
      username: { label: "Username", type: "text", placeholder: "jsmith" },
      password: {  label: "Password", type: "password" }
    },
    async authorize(credentials, req) {
      // You need to provide your own logic here that takes the credentials
      // submitted and returns either a object representing a user or value
      // that is false/null if the credentials are invalid.
      // e.g. return { id: 1, name: 'J Smith', email: 'jsmith@example.com' }
      // You can also use the `req` object to obtain additional parameters
      // (i.e., the request IP address)
      const res = await fetch("/your/endpoint", {
        method: 'POST',
        body: JSON.stringify(credentials),
        headers: { "Content-Type": "application/json" }
      })
      const user = await res.json()

      // If no error and we have user data, return it
      if (res.ok && user) {
        return user
      }
      // Return null if user data could not be retrieved
      return null
    }
  })
]
...

----------------------------------------

TITLE: Creating OAuth Sign-in Page with NextAuth.js
DESCRIPTION: This example demonstrates how to create a custom OAuth sign-in page using NextAuth.js. It fetches available providers and renders buttons for each provider.

LANGUAGE: jsx
CODE:
import { getProviders, signIn } from "next-auth/react"

export default function SignIn({ providers }) {
  return (
    <>
      {Object.values(providers).map((provider) => (
        <div key={provider.name}>
          <button onClick={() => signIn(provider.id)}>
            Sign in with {provider.name}
          </button>
        </div>
      ))}
    </>
  )
}

// This is the recommended way for Next.js 9.3 or newer
export async function getServerSideProps(context) {
  const providers = await getProviders()
  return {
    props: { providers },
  }
}

/*
// If older than Next.js 9.3
SignIn.getInitialProps = async () => {
  return {
    providers: await getProviders()
  }
}
*/

----------------------------------------

TITLE: Retrieving Session Data with getSession on Client and Server Side
DESCRIPTION: Shows how to use the getSession function to retrieve session data on both client and server side in NextAuth.js.

LANGUAGE: javascript
CODE:
// Client Side Example
async function myFunction() {
  const session = await getSession()
  /* ... */
}

// Server Side Example
import { getSession } from "next-auth/client"

export default async (req, res) => {
  const session = await getSession({ req })
  /* ... */
  res.end()
}

----------------------------------------

TITLE: Extending JWT Interface for NextAuth.js using TypeScript
DESCRIPTION: Example of extending the JWT interface from the next-auth/jwt submodule using TypeScript module augmentation, adding a custom property for an OpenID ID Token.

LANGUAGE: typescript
CODE:
import { JWT } from "next-auth/jwt"

declare module "next-auth/jwt" {
  /** Returned by the `jwt` callback and `getToken`, when using JWT sessions */
  interface JWT {
    /** OpenID ID Token */
    idToken?: string
  }
}

----------------------------------------

TITLE: Setting up NextAuth.js Provider in _app.js
DESCRIPTION: Configures the NextAuth.js Provider component in the app wrapper to enable shared session state across pages, improving performance and reducing network requests.

LANGUAGE: jsx
CODE:
import { Provider } from "next-auth/client"

export default function App({ Component, pageProps }) {
  return (
    <Provider session={pageProps.session}>
      <Component {...pageProps} />
    </Provider>
  )
}

----------------------------------------

TITLE: Implementing Server-Side Token Rotation with NextAuth.js
DESCRIPTION: Server-side implementation of refresh token rotation using NextAuth.js JWT and session callbacks. Includes token refresh logic for Google OAuth provider with error handling and token persistence.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import GoogleProvider from "next-auth/providers/google"

const GOOGLE_AUTHORIZATION_URL =
  "https://accounts.google.com/o/oauth2/v2/auth?" +
  new URLSearchParams({
    prompt: "consent",
    access_type: "offline",
    response_type: "code",
  })

async function refreshAccessToken(token) {
  try {
    const url =
      "https://oauth2.googleapis.com/token?" +
      new URLSearchParams({
        client_id: process.env.GOOGLE_CLIENT_ID,
        client_secret: process.env.GOOGLE_CLIENT_SECRET,
        grant_type: "refresh_token",
        refresh_token: token.refreshToken,
      })

    const response = await fetch(url, {
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      method: "POST",
    })

    const refreshedTokens = await response.json()

    if (!response.ok) {
      throw refreshedTokens
    }

    return {
      ...token,
      accessToken: refreshedTokens.access_token,
      accessTokenExpires: Date.now() + refreshedTokens.expires_in * 1000,
      refreshToken: refreshedTokens.refresh_token ?? token.refreshToken,
    }
  } catch (error) {
    console.log(error)

    return {
      ...token,
      error: "RefreshAccessTokenError",
    }
  }
}

export default NextAuth({
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      authorization: GOOGLE_AUTHORIZATION_URL,
    }),
  ],
  callbacks: {
    async jwt({ token, user, account }) {
      if (account && user) {
        return {
          accessToken: account.access_token,
          accessTokenExpires: Date.now() + account.expires_in * 1000,
          refreshToken: account.refresh_token,
          user,
        }
      }
      if (Date.now() < token.accessTokenExpires) {
        return token
      }
      return refreshAccessToken(token)
    },
    async session({ session, token }) {
      session.user = token.user
      session.accessToken = token.accessToken
      session.error = token.error
      return session
    },
  },
})

----------------------------------------

TITLE: Extending Session Interface while Preserving Default Properties in NextAuth.js
DESCRIPTION: Demonstrates how to extend the Session interface in NextAuth.js while keeping the default user properties, using TypeScript module augmentation.

LANGUAGE: typescript
CODE:
import NextAuth, { DefaultSession } from "next-auth";

declare module "next-auth" {
  /**
   * Returned by `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context
   */
  interface Session {
    user: {
      /** The user's postal address. */
      address: string
    } & DefaultSession["user"]
  }
}

----------------------------------------

TITLE: Configuring Email Provider in NextAuth.js
DESCRIPTION: Configuration setup for the Email Provider in NextAuth.js. This code demonstrates how to initialize the email provider with server settings, custom email sender, and optional maxAge parameter for link expiration.

LANGUAGE: javascript
CODE:
import EmailProvider from `next-auth/providers/email`
...
providers: [
  EmailProvider({
    server: process.env.EMAIL_SERVER,
    from: process.env.EMAIL_FROM,
    // maxAge: 24 * 60 * 60, // How long email links are valid for (default 24h)
  }),
],
...

----------------------------------------

TITLE: Custom Session Provider Implementation
DESCRIPTION: Shows how to implement a custom SessionProvider wrapper in _app.jsx with authentication handling.

LANGUAGE: jsx
CODE:
export default function App({
  Component,
  pageProps: { session, ...pageProps },
}) {
  return (
    <SessionProvider session={session}>
      {Component.auth ? (
        <Auth>
          <Component {...pageProps} />
        </Auth>
      ) : (
        <Component {...pageProps} />
      )}
    </SessionProvider>
  )
}

function Auth({ children }) {
  const { data: session, status } = useSession({required: true})
  const isUser = !!session?.user

  if (isUser) {
    return children
  }

  return <div>Loading...</div>
}

----------------------------------------

TITLE: Wrapping NextAuth.js Middleware with Custom Logic in TypeScript
DESCRIPTION: Demonstrates how to wrap NextAuth.js middleware with custom logic using TypeScript. This example logs the user's token and enforces admin-only access.

LANGUAGE: typescript
CODE:
import type { NextRequest } from "next/server"
import type { JWT } from "next-auth"

import { withAuth } from "next-auth/middleware"

export default withAuth(function middleware(req: NextRequest & { nextauth: { token: JWT } }) {
  console.log(req.nextauth.token)
}, {
  callbacks: {
    authorized: ({ token }) => token?.role === "admin"
  }
})

----------------------------------------

TITLE: Configuring Provider in _app.js for NextAuth.js
DESCRIPTION: This snippet shows how to configure the _app.js file to wrap the application with NextAuth.js Provider, ensuring the session is available throughout the app.

LANGUAGE: javascript
CODE:
import { Provider } from "next-auth/client"

export default ({ Component, pageProps }) => {
  return (
    <Provider session={pageProps.session}>
      <Component {...pageProps} />
    </Provider>
  )
}

----------------------------------------

TITLE: Configuring Credentials Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up a Credentials provider in NextAuth.js, including defining credentials fields and implementing the authorize function for user authentication.

LANGUAGE: javascript
CODE:
import CredentialsProvider from "next-auth/providers/credentials";
...
providers: [
  CredentialsProvider({
    // The name to display on the sign in form (e.g. "Sign in with...")
    name: "Credentials",
    // The credentials is used to generate a suitable form on the sign in page.
    // You can specify whatever fields you are expecting to be submitted.
    // e.g. domain, username, password, 2FA token, etc.
    // You can pass any HTML attribute to the <input> tag through the object.
    credentials: {
      username: { label: "Username", type: "text", placeholder: "jsmith" },
      password: {  label: "Password", type: "password" }
    },
    async authorize(credentials, req) {
      // Add logic here to look up the user from the credentials supplied
      const user = { id: 1, name: "J Smith", email: "jsmith@example.com" }

      if (user) {
        // Any object returned will be saved in `user` property of the JWT
        return user
      } else {
        // If you return null then an error will be displayed advising the user to check their details.
        return null
        
        // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter        
      }
    }
  })
]
...

----------------------------------------

TITLE: Using JSDoc for Custom Adapter in JavaScript for NextAuth.js
DESCRIPTION: Demonstrates how to use JSDoc comments to provide TypeScript hints for a custom adapter implementation in plain JavaScript, enabling editor auto-completion and type checking.

LANGUAGE: javascript
CODE:
/** @return { import("next-auth/adapters").Adapter } */
function MyAdapter() {
  return {
    // your adapter methods here
  }
}

----------------------------------------

TITLE: Using useSession Hook in React Component
DESCRIPTION: Shows how to implement authentication state checking in a React component using the useSession hook.

LANGUAGE: jsx
CODE:
import { useSession } from "next-auth/react"

export default function Component() {
  const { data: session, status } = useSession()

  if (status === "authenticated") {
    return <p>Signed in as {session.user.email}</p>
  }

  return <a href="/api/auth/signin">Sign in</a>
}

----------------------------------------

TITLE: Securing API Routes with getSession in Next.js
DESCRIPTION: This snippet demonstrates how to protect API routes using the getSession method from NextAuth.js. It checks for a valid session and responds accordingly.

LANGUAGE: javascript
CODE:
import { getSession } from "next-auth/client"

export default async (req, res) => {
  const session = await getSession({ req })
  if (session) {
    // Signed in
    console.log("Session", JSON.stringify(session, null, 2))
  } else {
    // Not Signed in
    res.status(401)
  }
  res.end()
}

----------------------------------------

TITLE: Configuring SessionProvider in Next.js _app.js
DESCRIPTION: This snippet shows how to set up the SessionProvider in the _app.js file of a Next.js application. It wraps the entire app with the SessionProvider and passes the session prop to eliminate loading states.

LANGUAGE: javascript
CODE:
import { SessionProvider } from "next-auth/react"

export default function App({
  Component,
  pageProps: { session, ...pageProps },
}) {
  return (
    <SessionProvider session={session}>
      <Component {...pageProps} />
    </SessionProvider>
  )
}

----------------------------------------

TITLE: Creating Email Sign-in Form with NextAuth.js
DESCRIPTION: This example shows how to create a custom email sign-in form using NextAuth.js. It includes handling CSRF token and submitting the form to the appropriate endpoint.

LANGUAGE: jsx
CODE:
import { getCsrfToken } from "next-auth/react"

export default function SignIn({ csrfToken }) {
  return (
    <form method="post" action="/api/auth/signin/email">
      <input name="csrfToken" type="hidden" defaultValue={csrfToken} />
      <label>
        Email address
        <input type="email" id="email" name="email" />
      </label>
      <button type="submit">Sign in with Email</button>
    </form>
  )
}

// This is the recommended way for Next.js 9.3 or newer
export async function getServerSideProps(context) {
  const csrfToken = await getCsrfToken(context)
  return {
    props: { csrfToken },
  }
}

/*
// If older than Next.js 9.3
SignIn.getInitialProps = async (context) => {
  return {
    csrfToken: await getCsrfToken(context)
  }
}
*/

----------------------------------------

TITLE: Creating a Custom Adapter with JSDoc in JavaScript
DESCRIPTION: This snippet demonstrates how to create a custom adapter for NextAuth.js using plain JavaScript with JSDoc for editor hints and auto-completion. It provides a template for implementing adapter methods.

LANGUAGE: javascript
CODE:
/** @return { import("next-auth/adapters").Adapter } */
function MyAdapter() {
  return {
    // your adapter methods here
  }
}

----------------------------------------

TITLE: Securing Server-Side Pages with getSession in Next.js
DESCRIPTION: This snippet shows how to protect server-side rendered pages using the getSession method from NextAuth.js. It uses getServerSideProps to fetch the session on the server and passes it to the component.

LANGUAGE: javascript
CODE:
import { useSession, getSession } from "next-auth/client"

export default function Page() {
  const [session, loading] = useSession()

  if (typeof window !== "undefined" && loading) return null

  if (session) {
    return (
      <>
        <h1>Protected Page</h1>
        <p>You can view this page because you are signed in.</p>
      </>
    )
  }
  return <p>Access Denied</p>
}

export async function getServerSideProps(context) {
  const session = await getSession(context)
  return {
    props: { session },
  }
}

----------------------------------------

TITLE: Securing API Routes with getToken in Next.js
DESCRIPTION: This snippet shows how to protect an API route using the getToken helper function from NextAuth.js. It's specifically for use with JSON Web Tokens and can only be used server-side.

LANGUAGE: javascript
CODE:
import { getToken } from "next-auth/jwt"

const secret = process.env.SECRET

export default async (req, res) => {
  const token = await getToken({ req, secret })
  if (token) {
    // Signed in
    console.log("JSON Web Token", JSON.stringify(token, null, 2))
  } else {
    // Not Signed in
    res.status(401)
  }
  res.end()
}

----------------------------------------

TITLE: Redirect Callback Implementation
DESCRIPTION: Default implementation of the redirect callback that handles URL validation and relative callback URLs.

LANGUAGE: javascript
CODE:
callbacks: {
  redirect({ url, baseUrl }) {
    if (url.startsWith(baseUrl)) return url
    // Allows relative callback URLs
    else if (url.startsWith("/")) return new URL(url, baseUrl).toString()
    return baseUrl
  }
}

----------------------------------------

TITLE: Configuring GitHub Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the GitHub provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import GitHubProvider from "next-auth/providers/github";
...
providers: [
  GitHubProvider({
    clientId: process.env.GITHUB_CLIENT_ID,
    clientSecret: process.env.GITHUB_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Conditional Provider Display in NextAuth.js Initialization
DESCRIPTION: This snippet shows how to conditionally display authentication providers based on the request type. It hides the Google provider on the default sign-in page while still allowing sign-in with it.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import CredentialsProvider from "next-auth/providers/credentials"
import GoogleProvider from "next-auth/providers/google"

export default async function auth(req, res) {
  const providers = [
    CredentialsProvider(...),
    GoogleProvider(...),
  ]

  const isDefaultSigninPage = req.method === "GET" && req.query.nextauth.includes("signin")

  // Will hide the `GoogleProvider` when you visit `/api/auth/signin`
  if (isDefaultSigninPage) providers.pop()

  return await NextAuth(req, res, {
    providers,
    ...
  })
}

----------------------------------------

TITLE: Configuring GitHub Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the GitHub provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import GitHubProvider from "next-auth/providers/github";
...
providers: [
  GitHubProvider({
    clientId: process.env.GITHUB_CLIENT_ID,
    clientSecret: process.env.GITHUB_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Implementing JWT Callback in NextAuth.js
DESCRIPTION: Callback for customizing JWT token creation and updates. Allows adding custom claims to the token such as access tokens.

LANGUAGE: javascript
CODE:
callbacks: {
  async jwt(token, user, account, profile, isNewUser) {
    if (account?.accessToken) {
      token.accessToken = account.accessToken
    }
    return token
  }
}

----------------------------------------

TITLE: Configuring NextAuth.js Middleware Callbacks
DESCRIPTION: Demonstrates the default configuration for the authorized callback in NextAuth.js middleware. This callback controls whether a user is allowed access based on their authentication token.

LANGUAGE: javascript
CODE:
callbacks: {
   authorized({ req , token }) {
     if(token) return true // If there is a token, the user is authenticated
   }
 }

----------------------------------------

TITLE: Configuring Discord Provider in NextAuth.js
DESCRIPTION: Example of setting up Discord authentication provider in NextAuth.js using environment variables for client credentials. The provider requires Discord client ID and client secret which should be obtained from Discord Developer Portal.

LANGUAGE: javascript
CODE:
import DiscordProvider from "next-auth/providers/discord";
...
providers: [
  DiscordProvider({
    clientId: process.env.DISCORD_CLIENT_ID,
    clientSecret: process.env.DISCORD_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Custom Callback Handling in NextAuth.js Initialization
DESCRIPTION: This example demonstrates how to handle custom callbacks and access request data during NextAuth.js initialization. It shows logging callback requests and accessing custom cookie values.

LANGUAGE: typescript
CODE:
import type { NextApiRequest, NextApiResponse } from "next"
import NextAuth from "next-auth"

export default async function auth(req: NextApiRequest, res: NextApiResponse) {

  if(req.query.nextauth.includes("callback") && req.method === "POST") {
    console.log(
      "Handling callback request from my Identity Provider",
      req.body
    )
  }

  // Get a custom cookie value from the request
  const someCookie = req.cookies["some-custom-cookie"]

  return await NextAuth(req, res, {
    ...
    callbacks: {
      session({ session, token }) {
        // Return a cookie value as part of the session
        // This is read when `req.query.nextauth.includes("session") && req.method === "GET"`
        session.someCookie = someCookie
        return session
      }
    }
  })
}

----------------------------------------

TITLE: JWT Configuration Options in NextAuth.js
DESCRIPTION: Detailed JWT configuration including signing keys, encryption options, and custom encode/decode functions.

LANGUAGE: javascript
CODE:
jwt: {
  // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw',
  // signingKey: {"kty":"oct","kid":"Dl893BEV-iVE-x9EC52TDmlJUgGm9oZ99_ZL025Hc5Q","alg":"HS512","k":"K7QqRmJOKRK2qcCKV_pi9PSBv3XP0fpTu30TP8xn4w01xR3ZMZM38yL2DnTVPVw6e4yhdh0jtoah-i4c_pZagA"},
  // verificationOptions: {
  //    algorithms: ['HS256']
  // },
  // encryption: true,
  // encryptionKey: "",
  // decryptionKey = encryptionKey,
  // decryptionOptions = {
  //    algorithms: ['A256GCM']
  // },
}

----------------------------------------

TITLE: Basic Google Provider Setup in NextAuth.js
DESCRIPTION: Basic configuration for implementing Google OAuth provider with NextAuth.js using environment variables for client credentials.

LANGUAGE: javascript
CODE:
import GoogleProvider from "next-auth/providers/google";
...
providers: [
  GoogleProvider({
    clientId: process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: JWT Token Verification Helper
DESCRIPTION: Example implementation of JWT token verification using the built-in getToken helper method.

LANGUAGE: javascript
CODE:
import { getToken } from "next-auth/jwt"

const secret = process.env.NEXTAUTH_SECRET

export default async function handler(req, res) {
  const token = await getToken({ req, secret })
  console.log("JSON Web Token", token)
  res.end()
}

----------------------------------------

TITLE: Basic Google Provider Setup in NextAuth.js
DESCRIPTION: Basic configuration for implementing Google OAuth provider with NextAuth.js using environment variables for client credentials.

LANGUAGE: javascript
CODE:
import GoogleProvider from "next-auth/providers/google";
...
providers: [
  GoogleProvider({
    clientId: process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Securing Server-Side Pages with getSession in Next.js
DESCRIPTION: This example shows how to protect a server-side rendered page using the getSession method from NextAuth.js. It fetches the session on the server and passes it as a prop to the component.

LANGUAGE: javascript
CODE:
import { useSession, getSession } from "next-auth/react"

export default function Page() {
  const { data: session } = useSession()

  if (typeof window !== "undefined") return null

  if (session) {
    return (
      <>
        <h1>Protected Page</h1>
        <p>You can view this page because you are signed in.</p>
      </>
    )
  }
  return <p>Access Denied</p>
}

export async function getServerSideProps(context) {
  return {
    props: {
      session: await getSession(context),
    },
  }
}

----------------------------------------

TITLE: Extending NextAuth.js JWT Type with TypeScript Module Augmentation
DESCRIPTION: Demonstrates how to extend the JWT interface from the next-auth/jwt submodule using TypeScript module augmentation. This allows for adding custom properties to the JWT object.

LANGUAGE: typescript
CODE:
declare module "next-auth/jwt" {
  /** Returned by the `jwt` callback and `getToken`, when using JWT sessions */
  interface JWT {
    /** OpenID ID Token */
    idToken?: string
  }
}

----------------------------------------

TITLE: Configuring NextAuth.js with Conditional Providers in JavaScript
DESCRIPTION: This code snippet demonstrates how to set up NextAuth.js with conditional providers based on the deployment environment. It includes a Google OAuth provider and a Credentials provider for preview deployments.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import GoogleProvider from "next-auth/providers/google"
import CredentialsProvider from "next-auth/providers/credentials"

const previewLogin = CredentialsProvider({
  name: "Credentials",
  credentials: {
    username: { label: "Username", type: "text", placeholder: "jsmith" },
    password: { label: "Password", type: "password" },
  },
  async authorize() {
    const user = () => {
      return {
        id: 1,
        name: "J Smith",
        email: "jsmith@example.com",
        image: "https://i.pravatar.cc/150?u=jsmith@example.com",
      }
    }
    return user()
  },
})

const options = {
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_ID,
      clientSecret: process.env.GOOGLE_SECRET,
    }),
    process.env.VERCEL_ENV === "preview" && previewLogin,
  ],
  ...
}

export default (req, res) => NextAuth(req, res, options)

----------------------------------------

TITLE: NextAuth.js Callback Functions Configuration
DESCRIPTION: Implementation of callback functions for sign in, redirect, session, and JWT token handling.

LANGUAGE: javascript
CODE:
callbacks: {
  async signIn(user, account, profile) {
    return true
  },
  async redirect(url, baseUrl) {
    return baseUrl
  },
  async session(session, user) {
    return session
  },
  async jwt(token, user, account, profile, isNewUser) {
    return token
  }
}

----------------------------------------

TITLE: Securing API Routes with getSession in Next.js
DESCRIPTION: This example demonstrates how to protect an API route using the getSession method from NextAuth.js. It checks for a valid session and responds accordingly.

LANGUAGE: javascript
CODE:
import { getSession } from "next-auth/react"

export default async (req, res) => {
  const session = await getSession({ req })
  if (session) {
    // Signed in
    console.log("Session", JSON.stringify(session, null, 2))
  } else {
    // Not Signed in
    res.status(401)
  }
  res.end()
}

----------------------------------------

TITLE: Updating Client Import in NextAuth.js v4
DESCRIPTION: Changes to the client-side import source from next-auth/client to next-auth/react

LANGUAGE: diff
CODE:
- import { useSession } from "next-auth/client"
+ import { useSession } from "next-auth/react"

----------------------------------------

TITLE: JWT Token Helper Implementation
DESCRIPTION: Example of using the built-in getToken() helper method to verify and decrypt JWT tokens.

LANGUAGE: javascript
CODE:
import jwt from "next-auth/jwt"

const secret = process.env.JWT_SECRET

export default async (req, res) => {
  const token = await jwt.getToken({ req, secret })
  console.log("JSON Web Token", token)
  res.end()
}

----------------------------------------

TITLE: Configuring Custom Pages in NextAuth.js Middleware
DESCRIPTION: Shows how to specify custom URLs for sign-in and error pages in NextAuth.js middleware configuration. These custom pages will override the built-in pages.

LANGUAGE: javascript
CODE:
pages: {
  signIn: '/auth/signin',
  error: '/auth/error',
}

----------------------------------------

TITLE: Email Verification Check with Google Provider
DESCRIPTION: Implementation of a sign-in callback to verify email domains and email verification status for Google OAuth users.

LANGUAGE: javascript
CODE:
const options = {
  ...
  callbacks: {
    async signIn({ account, profile }) {
      if (account.provider === "google") {
        return profile.email_verified && profile.email.endsWith("@example.com")
      }
      return true // Do different verification for other providers that don't have `email_verified`
    },
  }
  ...
}

----------------------------------------

TITLE: Configuring Email Provider with Configuration Object in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Email Provider using a configuration object in the NextAuth.js configuration file.

LANGUAGE: javascript
CODE:
import EmailProvider from "next-auth/providers/email";
...
providers: [
  EmailProvider({
    server: {
      host: process.env.EMAIL_SERVER_HOST,
      port: process.env.EMAIL_SERVER_PORT,
      auth: {
        user: process.env.EMAIL_SERVER_USER,
        pass: process.env.EMAIL_SERVER_PASSWORD
      }
    },
    from: process.env.EMAIL_FROM
  }),
],

----------------------------------------

TITLE: Configuring NextAuth.js with Prisma Adapter
DESCRIPTION: JavaScript code snippet for setting up NextAuth.js to use the Prisma Adapter, including Google provider configuration.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import GoogleProvider from "next-auth/providers/google"
import { PrismaAdapter } from "@next-auth/prisma-adapter"
import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

export default NextAuth({
  adapter: PrismaAdapter(prisma),
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
  ],
})

----------------------------------------

TITLE: Customizing Verification Email in NextAuth.js Email Provider
DESCRIPTION: This code snippet shows how to customize the verification email sent by the Email Provider in NextAuth.js, including HTML and plain text versions.

LANGUAGE: javascript
CODE:
import nodemailer from "nodemailer"

async function sendVerificationRequest({
  identifier: email,
  url,
  provider: { server, from },
}) {
  const { host } = new URL(url)
  const transport = nodemailer.createTransport(server)
  await transport.sendMail({
    to: email,
    from,
    subject: `Sign in to ${host}`,
    text: text({ url, host }),
    html: html({ url, host, email }),
  })
}

// Email HTML body
function html({ url, host, email }: Record<"url" | "host" | "email", string>) {
  // Insert invisible space into domains and email address to prevent both the
  // email address and the domain from being turned into a hyperlink by email
  // clients like Outlook and Apple mail, as this is confusing because it seems
  // like they are supposed to click on their email address to sign in.
  const escapedEmail = `${email.replace(/\./g, "&#8203;")}`
  const escapedHost = `${host.replace(/\./g, "&#8203;")}`

  // Some simple styling options
  const backgroundColor = "#f9f9f9"
  const textColor = "#444444"
  const mainBackgroundColor = "#ffffff"
  const buttonBackgroundColor = "#346df1"
  const buttonBorderColor = "#346df1"
  const buttonTextColor = "#ffffff"

  return `
<body style="background: ${backgroundColor};">
  <table width="100%" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td align="center" style="padding: 10px 0px 20px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};">
        <strong>${escapedHost}</strong>
      </td>
    </tr>
  </table>
  <table width="100%" border="0" cellspacing="20" cellpadding="0" style="background: ${mainBackgroundColor}; max-width: 600px; margin: auto; border-radius: 10px;">
    <tr>
      <td align="center" style="padding: 10px 0px 0px 0px; font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};">
        Sign in as <strong>${escapedEmail}</strong>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 20px 0;">
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td align="center" style="border-radius: 5px;" bgcolor="${buttonBackgroundColor}"><a href="${url}" target="_blank" style="font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${buttonTextColor}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${buttonBorderColor}; display: inline-block; font-weight: bold;">Sign in</a></td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};">
        If you did not request this email you can safely ignore it.
      </td>
    </tr>
  </table>
</body>
`
}

// Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)
function text({ url, host }: Record<"url" | "host", string>) {
  return `Sign in to ${host}\n${url}\n\n`
}

----------------------------------------

TITLE: Google Provider Setup with Forced Refresh Token
DESCRIPTION: Configuration example that forces Google to always provide a refresh token by including specific authorization parameters. This requires users to confirm access on each sign-in.

LANGUAGE: javascript
CODE:
const options = {
  ...
  providers: [
    Providers.Google({
      clientId: process.env.GOOGLE_ID,
      clientSecret: process.env.GOOGLE_SECRET,
      authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',
    })
  ],
  ...
}

----------------------------------------

TITLE: Force Refresh Token Configuration for Google Provider
DESCRIPTION: Configuration to force Google to always provide a refresh token during sign-in by setting specific authorization parameters.

LANGUAGE: javascript
CODE:
const options = {
  ...
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_ID,
      clientSecret: process.env.GOOGLE_SECRET,
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code"
        }
      }
    })
  ],
  ...
}

----------------------------------------

TITLE: Configuring MongoDB Client Connection
DESCRIPTION: Setup for MongoDB client connection handling with environment-specific configurations and connection promise export. Includes development and production mode handling with HMR support.

LANGUAGE: javascript
CODE:
// This approach is taken from https://github.com/vercel/next.js/tree/canary/examples/with-mongodb
import { MongoClient } from "mongodb"

const uri = process.env.MONGODB_URI
const options = {
  useUnifiedTopology: true,
  useNewUrlParser: true,
}

let client
let clientPromise

if (!process.env.MONGODB_URI) {
  throw new Error("Please add your Mongo URI to .env.local")
}

if (process.env.NODE_ENV === "development") {
  // In development mode, use a global variable so that the value
  // is preserved across module reloads caused by HMR (Hot Module Replacement).
  if (!global._mongoClientPromise) {
    client = new MongoClient(uri, options)
    global._mongoClientPromise = client.connect()
  }
  clientPromise = global._mongoClientPromise
} else {
  // In production mode, it's best to not use a global variable.
  client = new MongoClient(uri, options)
  clientPromise = client.connect()
}

// Export a module-scoped MongoClient promise. By doing this in a
// separate module, the client can be shared across functions.
export default clientPromise

----------------------------------------

TITLE: Including Default Entities in MikroORM Configuration
DESCRIPTION: Example of how to include the default NextAuth.js entities in the MikroORM configuration. This is useful for including these entities in database migrations and other ORM operations.

LANGUAGE: typescript
CODE:
import { Options } from "@mikro-orm/core";
import { defaultEntities } from "@next-auth/mikro-orm-adapter"

const config: Options = {
  ...
  entities: [VeryImportantEntity, ...Object.values(defaultEntities)],
};

export default config;

----------------------------------------

TITLE: Configuring Email Provider with Connection String in NextAuth.js
DESCRIPTION: This snippet shows how to configure the Email Provider using a connection string in the NextAuth.js configuration file.

LANGUAGE: javascript
CODE:
import EmailProvider from "next-auth/providers/email";
...
providers: [
  EmailProvider({
    server: process.env.EMAIL_SERVER,
    from: process.env.EMAIL_FROM
  }),
],

----------------------------------------

TITLE: Implementing Default NextAuth.js Middleware
DESCRIPTION: Demonstrates how to implement default NextAuth.js middleware with a single line of code. This will require users to be logged in to access any page.

LANGUAGE: javascript
CODE:
export { default } from "next-auth/middleware"

----------------------------------------

TITLE: Customizing Verification Email in NextAuth.js Email Provider
DESCRIPTION: This snippet demonstrates how to customize the verification email sent by the Email provider in NextAuth.js. It includes a complete implementation of the sendVerificationRequest function with HTML and text email templates.

LANGUAGE: javascript
CODE:
import nodemailer from "nodemailer"

const sendVerificationRequest = ({
  identifier: email,
  url,
  token,
  baseUrl,
  provider,
}) => {
  return new Promise((resolve, reject) => {
    const { server, from } = provider
    // Strip protocol from URL and use domain as site name
    const site = baseUrl.replace(/^https?:\/\//, "")

    nodemailer.createTransport(server).sendMail(
      {
        to: email,
        from,
        subject: `Sign in to ${site}`,
        text: text({ url, site, email }),
        html: html({ url, site, email }),
      },
      (error) => {
        if (error) {
          logger.error("SEND_VERIFICATION_EMAIL_ERROR", email, error)
          return reject(new Error("SEND_VERIFICATION_EMAIL_ERROR", error))
        }
        return resolve()
      }
    )
  })
}

// Email HTML body
const html = ({ url, site, email }) => {
  // Insert invisible space into domains and email address to prevent both the
  // email address and the domain from being turned into a hyperlink by email
  // clients like Outlook and Apple mail, as this is confusing because it seems
  // like they are supposed to click on their email address to sign in.
  const escapedEmail = `${email.replace(/\./g, "&#8203;.")}`
  const escapedSite = `${site.replace(/\./g, "&#8203;.")}`

  // Some simple styling options
  const backgroundColor = "#f9f9f9"
  const textColor = "#444444"
  const mainBackgroundColor = "#ffffff"
  const buttonBackgroundColor = "#346df1"
  const buttonBorderColor = "#346df1"
  const buttonTextColor = "#ffffff"

  // Uses tables for layout and inline CSS due to email client limitations
  return `
<body style="background: ${backgroundColor};">
  <table width="100%" border="0" cellspacing="0" cellpadding="0">
    <tr>
      <td align="center" style="padding: 10px 0px 20px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};">
        <strong>${escapedSite}</strong>
      </td>
    </tr>
  </table>
  <table width="100%" border="0" cellspacing="20" cellpadding="0" style="background: ${mainBackgroundColor}; max-width: 600px; margin: auto; border-radius: 10px;">
    <tr>
      <td align="center" style="padding: 10px 0px 0px 0px; font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};">
        Sign in as <strong>${escapedEmail}</strong>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 20px 0;">
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td align="center" style="border-radius: 5px;" bgcolor="${buttonBackgroundColor}"><a href="${url}" target="_blank" style="font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${buttonTextColor}; text-decoration: none; text-decoration: none;border-radius: 5px; padding: 10px 20px; border: 1px solid ${buttonBorderColor}; display: inline-block; font-weight: bold;">Sign in</a></td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};">
        If you did not request this email you can safely ignore it.
      </td>
    </tr>
  </table>
</body>
`
}

// Email text body – fallback for email clients that don't render HTML
const text = ({ url, site }) => `Sign in to ${site}\n${url}\n\n`

----------------------------------------

TITLE: Configuring Reddit Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Reddit authentication provider in NextAuth.js using environment variables for client ID and secret.

LANGUAGE: javascript
CODE:
import RedditProvider from "next-auth/providers/reddit";
...
providers: [
  RedditProvider({
    clientId: process.env.REDDIT_CLIENT_ID,
    clientSecret: process.env.REDDIT_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Apple Provider with Dynamic Secret in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Apple provider in NextAuth.js using a dynamically generated secret. It requires environment variables for the Apple ID, team ID, private key, and key ID.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Apple({
    clientId: process.env.APPLE_ID,
    clientSecret: {
      teamId: process.env.APPLE_TEAM_ID,
      privateKey: process.env.APPLE_PRIVATE_KEY,
      keyId: process.env.APPLE_KEY_ID,
    }
  })
]
...

----------------------------------------

TITLE: Customizing Verification Token Generation in NextAuth.js Email Provider
DESCRIPTION: This snippet shows how to override the default verification token generation in the Email Provider of NextAuth.js.

LANGUAGE: javascript
CODE:
providers: [
  EmailProvider({
    async generateVerificationToken() {
      return "ABC123"
    }
  })
],

----------------------------------------

TITLE: Customizing Verification Token Generation in NextAuth.js Email Provider
DESCRIPTION: This snippet shows how to override the default verification token generation in the NextAuth.js Email provider. It allows for custom token generation logic to be implemented.

LANGUAGE: javascript
CODE:
providers: [
  Providers.Email({
    async generateVerificationToken() {
      return "ABC123"
    }
  })
],

----------------------------------------

TITLE: Configuring Demo IdentityServer4 in NextAuth.js
DESCRIPTION: This snippet shows how to configure NextAuth.js to use the public demo IdentityServer at demo.identityserver.io. It includes specific scopes and credentials for testing purposes.

LANGUAGE: javascript
CODE:
import IdentityServer4Provider from `next-auth/providers/identity-server4`
...
providers: [
  IdentityServer4Provider({
    id: "demo-identity-server",
    name: "Demo IdentityServer4",
    authorization: { params: { scope: "openid profile email api offline_access" } },
    issuer:  "https://demo.identityserver.io/",
    clientId: "interactive.confidential",
    clientSecret: "secret",
  })
}
...

----------------------------------------

TITLE: Configuring Multiple Credentials Providers in NextAuth.js
DESCRIPTION: This example shows how to configure multiple Credentials providers with unique IDs and different authentication methods, such as domain login and two-factor authentication.

LANGUAGE: javascript
CODE:
providers: [
  Providers.Credentials({
    id: "domain-login",
    name: "Domain Account",
    async authorize(credentials, req) {
      const user = {
        /* add function to get user */
      }
      return user
    },
    credentials: {
      domain: {
        label: "Domain",
        type: "text ",
        placeholder: "CORPNET",
        value: "CORPNET",
      },
      username: { label: "Username", type: "text ", placeholder: "jsmith" },
      password: { label: "Password", type: "password" },
    },
  }),
  Providers.Credentials({
    id: "intranet-credentials",
    name: "Two Factor Auth",
    async authorize(credentials, req) {
      const user = {
        /* add function to get user */
      }
      return user
    },
    credentials: {
      email: { label: "Username", type: "text ", placeholder: "jsmith" },
      "2fa-key": { label: "2FA Key" },
    },
  }),
  /* ... additional providers ... /*/
]

----------------------------------------

TITLE: Implementing Custom TypeORM Entities
DESCRIPTION: Extended TypeORM entity definitions with custom fields like 'role' for user management

LANGUAGE: typescript
CODE:
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  OneToMany,
  ValueTransformer,
} from "typeorm"

const transformer: Record<"date" | "bigint", ValueTransformer> = {
  date: {
    from: (date: string | null) => date && new Date(parseInt(date, 10)),
    to: (date?: Date) => date?.valueOf().toString(),
  },
  bigint: {
    from: (bigInt: string | null) => bigInt && parseInt(bigInt, 10),
    to: (bigInt?: number) => bigInt?.toString(),
  },
}

@Entity({ name: "users" })
export class UserEntity {
  @PrimaryGeneratedColumn("uuid")
  id!: string

  @Column({ type: "varchar", nullable: true })
  name!: string | null

  @Column({ type: "varchar", nullable: true, unique: true })
  email!: string | null

  @Column({ type: "varchar", nullable: true, transformer: transformer.date })
  emailVerified!: string | null

  @Column({ type: "varchar", nullable: true })
  image!: string | null

  @Column({ type: "varchar", nullable: true })
  role!: string | null

  @OneToMany(() => SessionEntity, (session) => session.userId)
  sessions!: SessionEntity[]

  @OneToMany(() => AccountEntity, (account) => account.userId)
  accounts!: AccountEntity[]
}

----------------------------------------

TITLE: Installing Dependencies for NextAuth.js Documentation
DESCRIPTION: Command to install the necessary dependencies for the NextAuth.js documentation site using npm.

LANGUAGE: bash
CODE:
$ npm install

----------------------------------------

TITLE: Configuring IdentityServer4 Provider in NextAuth.js
DESCRIPTION: Basic configuration example for setting up IdentityServer4 authentication. Demonstrates how to configure the provider with custom domain, client credentials and scopes.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.IdentityServer4({
    id: "identity-server4",
    name: "IdentityServer4",
    scope: "openid profile email api offline_access", // Allowed Scopes
    domain:  process.env.IdentityServer4_Domain,
    clientId: process.env.IdentityServer4_CLIENT_ID,
    clientSecret: process.env.IdentityServer4_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Cypress Base Settings
DESCRIPTION: Primary Cypress configuration defining the base URL and chrome web security settings for cross-origin testing.

LANGUAGE: json
CODE:
{
  "baseUrl": "http://localhost:3000",
  "chromeWebSecurity": false
}

----------------------------------------

TITLE: Handling Refresh Token Errors in Client-Side NextAuth.js
DESCRIPTION: This snippet shows how to handle refresh token errors on the client side using NextAuth.js. It uses the useSession hook to detect errors and forces a sign-in if a RefreshAccessTokenError is encountered.

LANGUAGE: javascript
CODE:
import { signIn, useSession } from "next-auth/client";
import { useEffect } from "react";

const HomePage() {
  const [session] = useSession();

  useEffect(() => {
    if (session?.error === "RefreshAccessTokenError") {
      signIn(); // Force sign in to hopefully resolve error
    }
  }, [session]);

return (...)
}

----------------------------------------

TITLE: Installing NextAuth with FaunaDB Adapter
DESCRIPTION: Command to install the required packages for using NextAuth.js with FaunaDB adapter

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/fauna-adapter faunadb

----------------------------------------

TITLE: Configuring Email Provider with Connection String in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Email provider using a connection string in the NextAuth.js configuration file. It requires setting environment variables for the SMTP server and sender email address.

LANGUAGE: javascript
CODE:
providers: [
  Providers.Email({
    server: process.env.EMAIL_SERVER,
    from: process.env.EMAIL_FROM
  }),
],

----------------------------------------

TITLE: Configuring WorkOS Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the WorkOS provider in NextAuth.js configuration. It includes the basic provider setup with client ID and API key.

LANGUAGE: javascript
CODE:
import WorkOSProvider from "next-auth/providers/workos";
...
providers: [
  WorkOSProvider({
    clientId: process.env.WORKOS_CLIENT_ID,
    clientSecret: process.env.WORKOS_API_KEY,
  }),
],
...

----------------------------------------

TITLE: Extending Session Interface for NextAuth.js using TypeScript
DESCRIPTION: Shows how to extend the Session interface from NextAuth.js using TypeScript module augmentation, adding custom properties to the user object.

LANGUAGE: typescript
CODE:
import NextAuth from "next-auth"

declare module "next-auth" {
  /**
   * Returned by `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context
   */
  interface Session {
    user: {
      /** The user's postal address. */
      address: string
    }
  }
}

----------------------------------------

TITLE: Installing LDAP dependency for NextAuth.js
DESCRIPTION: Command to install the ldapjs package, which is required for LDAP authentication in NextAuth.js.

LANGUAGE: bash
CODE:
npm install ldapjs

----------------------------------------

TITLE: Configuring Dropbox Provider in NextAuth.js
DESCRIPTION: Example of how to set up the Dropbox authentication provider in NextAuth.js using environment variables for client credentials. This configuration enables Dropbox OAuth authentication in a Next.js application.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Dropbox({
    clientId: process.env.DROPBOX_CLIENT_ID,
    clientSecret: process.env.DROPBOX_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Implementing Custom Sign-In Page for WorkOS Authentication
DESCRIPTION: This React component creates a custom sign-in page that handles WorkOS authentication. It includes an email input to determine the SSO domain and conditionally renders sign-in buttons for different providers.

LANGUAGE: jsx
CODE:
import { getProviders, signIn } from "next-auth/client"

export default function SignIn({ providers }) {
  const [email, setEmail] = useState("")

  return (
    <>
      {Object.values(providers).map((provider) => {
        if (provider.id === "workos") {
          return (
            <div key={provider.id}>
              <input
                type="email"
                value={email}
                placeholder="Email"
                onChange={(event) => setEmail(event.target.value)}
              />
              <button
                onClick={() =>
                  signIn(provider.id, undefined, {
                    domain: email.split("@")[1],
                  })
                }
              >
                Sign in with SSO
              </button>
            </div>
          )
        }

        return (
          <div key={provider.id}>
            <button onClick={() => signIn(provider.id)}>
              Sign in with {provider.name}
            </button>
          </div>
        )
      })}
    </>
  )
}

// This is the recommended way for Next.js 9.3 or newer
export async function getServerSideProps(context) {
  const providers = await getProviders()
  return {
    props: { providers },
  }
}

/*
// If older than Next.js 9.3
SignIn.getInitialProps = async () => {
  return {
    providers: await getProviders()
  }
}
*/

----------------------------------------

TITLE: Updating JWT Import in NextAuth.js v4
DESCRIPTION: Changes to the JWT import statement, removing default export in favor of named import

LANGUAGE: diff
CODE:
- import jwt from "next-auth/jwt"
+ import { getToken } from "next-auth/jwt"

----------------------------------------

TITLE: Installing Prisma Dependencies
DESCRIPTION: Commands for installing the required Prisma packages including the client, CLI, and adapter

LANGUAGE: bash
CODE:
npm install @prisma/client @next-auth/prisma-adapter@canary
npm install prisma --save-dev

----------------------------------------

TITLE: Configuring Okta Provider in NextAuth.js
DESCRIPTION: Demonstrates how to set up the Okta authentication provider in NextAuth.js using environment variables for client credentials and issuer URL. Required parameters include OKTA_CLIENT_ID, OKTA_CLIENT_SECRET, and OKTA_ISSUER.

LANGUAGE: javascript
CODE:
import OktaProvider from "next-auth/providers/okta";
...
providers: [
  OktaProvider({
    clientId: process.env.OKTA_CLIENT_ID,
    clientSecret: process.env.OKTA_CLIENT_SECRET,
    issuer: process.env.OKTA_ISSUER
  })
]
...

----------------------------------------

TITLE: Advanced Reddit Provider Configuration with Refresh Token
DESCRIPTION: Extended Reddit provider configuration that includes refresh token support, custom scopes, and profile data handling. Implements permanent token duration and additional API permissions.

LANGUAGE: javascript
CODE:
providers: [
  {
    id: "reddit",
    name: "Reddit",
    clientId: process.env.REDDIT_CLIENT_ID,
    clientSecret: process.env.REDDIT_CLIENT_SECRET,
    scope: "identity mysubreddits read", //Check Reddit API Documentation for more. The identity scope is required.
    type: "oauth",
    version: "2.0",
    params: { grant_type: "authorization_code" },
    accessTokenUrl: " https://www.reddit.com/api/v1/access_token",
    authorizationUrl:
      "https://www.reddit.com/api/v1/authorize?response_type=code&duration=permanent",
    profileUrl: "https://oauth.reddit.com/api/v1/me",
    profile: (profile) => {
      return {
        id: profile.id,
        name: profile.name,
        email: null,
      }
    },
  },
]

----------------------------------------

TITLE: Defining DynamoDB Table with AWS CDK
DESCRIPTION: JavaScript code for creating a DynamoDB table using AWS CDK, including the required schema for NextAuth.

LANGUAGE: javascript
CODE:
new dynamodb.Table(this, `NextAuthTable`, {
  tableName: 'next-auth',
  partitionKey: { name: 'pk', type: dynamodb.AttributeType.STRING },
  sortKey: { name: 'sk', type: dynamodb.AttributeType.STRING },
  timeToLiveAttribute: 'expires',
}).addGlobalSecondaryIndex({
  indexName: 'GSI1',
  partitionKey: { name: 'GSI1PK', type: dynamodb.AttributeType.STRING },
  sortKey: { name: 'GSI1SK', type: dynamodb.AttributeType.STRING },
})

----------------------------------------

TITLE: Creating FaunaDB Schema
DESCRIPTION: FaunaDB shell commands to create necessary collections and indexes for NextAuth.js functionality. Includes collections for accounts, sessions, users, and verification tokens.

LANGUAGE: javascript
CODE:
CreateCollection({ name: "accounts" })
CreateCollection({ name: "sessions" })
CreateCollection({ name: "users" })
CreateCollection({ name: "verification_tokens" })
CreateIndex({
  name: "account_by_provider_and_provider_account_id",
  source: Collection("accounts"),
  unique: true,
  terms: [
    { field: ["data", "provider"] },
    { field: ["data", "providerAccountId"] },
  ],
})
CreateIndex({
  name: "session_by_session_token",
  source: Collection("sessions"),
  unique: true,
  terms: [{ field: ["data", "sessionToken"] }],
})
CreateIndex({
  name: "user_by_email",
  source: Collection("users"),
  unique: true,
  terms: [{ field: ["data", "email"] }],
})
CreateIndex({
  name: "verification_token_by_identifier_and_token",
  source: Collection("verification_tokens"),
  unique: true,
  terms: [{ field: ["data", "identifier"] }, { field: ["data", "token"] }],
})

----------------------------------------

TITLE: Installing NextAuth.js and Prisma Dependencies
DESCRIPTION: Command to install NextAuth.js, Prisma Client, Prisma CLI, and the Prisma Adapter for NextAuth.js using npm.

LANGUAGE: bash
CODE:
npm install next-auth @prisma/client @next-auth/prisma-adapter
npm install prisma --save-dev

----------------------------------------

TITLE: Creating Custom NextAuth.js Adapter with JSDoc Type Hints
DESCRIPTION: Example of how to create a custom NextAuth.js adapter using JavaScript with JSDoc type annotations for better IDE support and TypeScript integration. The adapter template shows the basic structure required for implementing a custom database adapter.

LANGUAGE: javascript
CODE:
/** @type { import("next-auth/adapters").Adapter } */
const MyAdapter = () => {
  return {
    async getAdapter() {
      return {
        // your adapter methods here
      }
    },
  }
}

----------------------------------------

TITLE: Configuring LDAP Authentication Provider in NextAuth.js
DESCRIPTION: Sets up the CredentialsProvider for LDAP authentication, including the authorize function that binds to the LDAP server. It also configures JWT and session callbacks to store and retrieve LDAP credentials.

LANGUAGE: javascript
CODE:
const ldap = require("ldapjs")
import NextAuth from "next-auth"
import CredentialsProvider from "next-auth/providers/credentials"

export default NextAuth({
  providers: [
    CredentialsProvider({
      name: "LDAP",
      credentials: {
        username: { label: "DN", type: "text", placeholder: "" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials, req) {
        // You might want to pull this call out so we're not making a new LDAP client on every login attemp
        const client = ldap.createClient({
          url: process.env.LDAP_URI,
        })

        // Essentially promisify the LDAPJS client.bind function
        return new Promise((resolve, reject) => {
          client.bind(credentials.username, credentials.password, (error) => {
            if (error) {
              console.error("Failed")
              reject()
            } else {
              console.log("Logged in")
              resolve({
                username: credentials.username,
                password: credentials.password,
              })
            }
          })
        })
      },
    }),
  ],
  callbacks: {
    async jwt({ token, user }) {
      const isSignIn = user ? true : false
      if (isSignIn) {
        token.username = user.username
        token.password = user.password
      }
      return token
    },
    async session({ session, token }) {
      return { ...session, user: { username: token.username } }
    },
  },
  secret: process.env.NEXTAUTH_SECRET,
  jwt: {
    secret: process.env.JWT_SECRET,
  },
})

----------------------------------------

TITLE: Implementing SessionProvider in NextAuth.js v4
DESCRIPTION: Example of wrapping app with SessionProvider in _app.jsx with new configuration options

LANGUAGE: jsx
CODE:
import { SessionProvider } from "next-auth/react"

export default function App({
  Component,
  pageProps: { session, ...pageProps },
}) {
  return (
    <SessionProvider session={session} refetchInterval={5 * 60}>
      <Component {...pageProps} />
    </SessionProvider>
  )
}

----------------------------------------

TITLE: Configuring NextAuth with DynamoDB Adapter
DESCRIPTION: Example configuration for NextAuth using the DynamoDB Adapter. It demonstrates how to set up AWS credentials, configure providers, and initialize the adapter.

LANGUAGE: javascript
CODE:
import AWS from "aws-sdk";
import NextAuth from "next-auth";
import Providers from "next-auth/providers";
import { DynamoDBAdapter } from "@next-auth/dynamodb-adapter"

AWS.config.update({
  accessKeyId: process.env.NEXT_AUTH_AWS_ACCESS_KEY,
  secretAccessKey: process.env.NEXT_AUTH_AWS_SECRET_KEY,
  region: process.env.NEXT_AUTH_AWS_REGION,
});

export default NextAuth({
  // Configure one or more authentication providers
  providers: [
    Providers.GitHub({
      clientId: process.env.GITHUB_ID,
      clientSecret: process.env.GITHUB_SECRET,
    }),
    Providers.Email({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
    }),
    // ...add more providers here
  ],
  adapter: DynamoDBAdapter(
    new AWS.DynamoDB.DocumentClient()
  ),
  ...
});

----------------------------------------

TITLE: Configuring LDAP Authentication Provider in NextAuth.js
DESCRIPTION: Sets up the CredentialsProvider for LDAP authentication, including the authorize function that binds to the LDAP server. It also configures JWT and session callbacks to store and retrieve LDAP credentials.

LANGUAGE: javascript
CODE:
const ldap = require("ldapjs")
import NextAuth from "next-auth"
import CredentialsProvider from "next-auth/providers/credentials"

export default NextAuth({
  providers: [
    CredentialsProvider({
      name: "LDAP",
      credentials: {
        username: { label: "DN", type: "text", placeholder: "" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials, req) {
        // You might want to pull this call out so we're not making a new LDAP client on every login attemp
        const client = ldap.createClient({
          url: process.env.LDAP_URI,
        })

        // Essentially promisify the LDAPJS client.bind function
        return new Promise((resolve, reject) => {
          client.bind(credentials.username, credentials.password, (error) => {
            if (error) {
              console.error("Failed")
              reject()
            } else {
              console.log("Logged in")
              resolve({
                username: credentials.username,
                password: credentials.password,
              })
            }
          })
        })
      },
    }),
  ],
  callbacks: {
    async jwt({ token, user }) {
      const isSignIn = user ? true : false
      if (isSignIn) {
        token.username = user.username
        token.password = user.password
      }
      return token
    },
    async session({ session, token }) {
      return { ...session, user: { username: token.username } }
    },
  },
  secret: process.env.NEXTAUTH_SECRET,
  jwt: {
    secret: process.env.JWT_SECRET,
  },
})

----------------------------------------

TITLE: CSRF Token Retrieval
DESCRIPTION: GET endpoint that returns CSRF token object. Uses double submit cookie method with signed HttpOnly host-only cookie for protection.

LANGUAGE: http
CODE:
GET /api/auth/csrf

----------------------------------------

TITLE: Customizing Base Key Prefix for Multiple Apps
DESCRIPTION: This code snippet demonstrates how to customize the base key prefix when using the Upstash Redis Adapter with multiple apps sharing a single Redis instance.

LANGUAGE: javascript
CODE:
export default NextAuth({
  ...
  adapter: UpstashRedisAdapter(redis, {baseKeyPrefix: "app2:"})
  ...
})

----------------------------------------

TITLE: Configuring NextAuth.js with MikroORM Adapter
DESCRIPTION: Basic configuration for NextAuth.js to use the MikroORM adapter. This setup includes database options for SQLite and enables debug mode based on an environment variable.

LANGUAGE: typescript
CODE:
import NextAuth from "next-auth"
import { MikroOrmAdapter } from "@next-auth/mikro-orm-adapter"


export default NextAuth({
  adapter: MikroOrmAdapter({
    // MikroORM options object. Ref: https://mikro-orm.io/docs/next/configuration#driver
    dbName: "./db.sqlite",
    type: "sqlite",
    debug: process.env.DEBUG === "true" || process.env.DEBUG?.includes("db"),
  }),
  providers: [],
})

----------------------------------------

TITLE: SSL Certificate Generation for Linux/macOS
DESCRIPTION: OpenSSL command to generate local SSL certificate files for HTTPS development on Linux/macOS.

LANGUAGE: bash
CODE:
openssl req -x509 -out localhost.crt -keyout localhost.key \
  -newkey rsa:2048 -nodes -sha256 \
  -subj "/CN=localhost" -extensions EXT -config <( \
   printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")

----------------------------------------

TITLE: OAuth Providers Information
DESCRIPTION: GET endpoint that returns list of configured OAuth services with their details including signin and callback URLs.

LANGUAGE: http
CODE:
GET /api/auth/providers

----------------------------------------

TITLE: Setting up NextAuth.js Local Development Environment
DESCRIPTION: Commands for cloning the NextAuth.js documentation repository and setting up the local development environment. Includes steps for repository cloning, dependency installation, and starting the development server.

LANGUAGE: bash
CODE:
$ git clone https://github.com/nextauthjs/docs.git

LANGUAGE: bash
CODE:
$ npm install

LANGUAGE: bash
CODE:
$ npm start

----------------------------------------

TITLE: Implementing Google Social Login Test
DESCRIPTION: Complete Cypress test implementation for testing Google social login with NextAuth.js, including cookie handling and session management.

LANGUAGE: javascript
CODE:
describe("Login page", () => {
  before(() => {
    cy.log(`Visiting https://company.tld`)
    cy.visit("/")
  })
  it("Login with Google", () => {
    const username = Cypress.env("GOOGLE_USER")
    const password = Cypress.env("GOOGLE_PW")
    const loginUrl = Cypress.env("SITE_NAME")
    const cookieName = Cypress.env("COOKIE_NAME")
    const socialLoginOptions = {
      username,
      password,
      loginUrl,
      headless: true,
      logs: false,
      isPopup: true,
      loginSelector: `a[href="${Cypress.env("SITE_NAME")}/api/auth/signin/google"]`,
      postLoginSelector: ".unread-count",
    }

    return cy
      .task("GoogleSocialLogin", socialLoginOptions)
      .then(({ cookies }) => {
        cy.clearCookies()

        const cookie = cookies
          .filter((cookie) => cookie.name === cookieName)
          .pop()
        if (cookie) {
          cy.setCookie(cookie.name, cookie.value, {
            domain: cookie.domain,
            expiry: cookie.expires,
            httpOnly: cookie.httpOnly,
            path: cookie.path,
            secure: cookie.secure,
          })

          Cypress.Cookies.defaults({
            preserve: cookieName,
          })

          cy.visit("/api/auth/signout")
          cy.get("form").submit()
        }
      })
  })
})

----------------------------------------

TITLE: Initializing Slack Provider in NextAuth.js
DESCRIPTION: Example configuration for setting up Slack authentication provider in NextAuth.js. Requires Slack client ID and client secret environment variables. Note that Slack requires HTTPS for redirect URLs, even in development.

LANGUAGE: javascript
CODE:
import SlackProvider from "next-auth/providers/slack";
...
providers: [
  SlackProvider({
    clientId: process.env.SLACK_CLIENT_ID,
    clientSecret: process.env.SLACK_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Implementing Azure AD Provider in NextAuth.js
DESCRIPTION: JavaScript configuration for setting up the Azure AD provider in NextAuth.js, including necessary imports and provider configuration with environment variables.

LANGUAGE: javascript
CODE:
import AzureADProvider from "next-auth/providers/azure-ad";

...
providers: [
  AzureADProvider({
    clientId: process.env.AZURE_AD_CLIENT_ID,
    clientSecret: process.env.AZURE_AD_CLIENT_SECRET,
    tenantId: process.env.AZURE_AD_TENANT_ID,
  }),
]
...

----------------------------------------

TITLE: Generating Secret Key Using OpenSSL
DESCRIPTION: Command to generate a secure random string for use as NextAuth.js secret key.

LANGUAGE: bash
CODE:
$ openssl rand -base64 32

----------------------------------------

TITLE: Installing Upstash Redis Adapter for NextAuth.js
DESCRIPTION: This command installs the required packages for using Upstash Redis Adapter with NextAuth.js.

LANGUAGE: bash
CODE:
npm install @upstash/redis @next-auth/upstash-redis-adapter

----------------------------------------

TITLE: Configuring NextAuth with DynamoDB Adapter
DESCRIPTION: JavaScript code snippet showing how to set up NextAuth with DynamoDB adapter, including AWS configuration and provider setup.

LANGUAGE: javascript
CODE:
import { DynamoDB } from "@aws-sdk/client-dynamodb"
import { DynamoDBDocument } from "@aws-sdk/lib-dynamodb"
import NextAuth from "next-auth";
import Providers from "next-auth/providers";
import { DynamoDBAdapter } from "@next-auth/dynamodb-adapter"

const config: DynamoDBClientConfig = {
  credentials: {
    accessKeyId: process.env.NEXT_AUTH_AWS_ACCESS_KEY as string,
    secretAccessKey: process.env.NEXT_AUTH_AWS_SECRET_KEY as string,
  },
  region: process.env.NEXT_AUTH_AWS_REGION,
};

const client = DynamoDBDocument.from(new DynamoDB(config), {
  marshallOptions: {
    convertEmptyValues: true,
    removeUndefinedValues: true,
    convertClassInstanceToMap: true,
  },
})

export default NextAuth({
  // Configure one or more authentication providers
  providers: [
    Providers.GitHub({
      clientId: process.env.GITHUB_ID,
      clientSecret: process.env.GITHUB_SECRET,
    }),
    Providers.Email({
      server: process.env.EMAIL_SERVER,
      from: process.env.EMAIL_FROM,
    }),
    // ...add more providers here
  ],
  adapter: DynamoDBAdapter(
    client
  ),
  ...
});

----------------------------------------

TITLE: Configuring Apple Provider in NextAuth.js
DESCRIPTION: Implementation of Apple authentication provider configuration using environment variables for client ID and secret.

LANGUAGE: javascript
CODE:
import AppleProvider from "next-auth/providers/apple";
...
providers: [
  AppleProvider({
    clientId: process.env.APPLE_ID,
    clientSecret: process.env.APPLE_SECRET
  })
]
...

----------------------------------------

TITLE: Retrieving LDAP Credentials from JWT in API Route
DESCRIPTION: Demonstrates how to retrieve the LDAP username and password from the JWT token in an API route. This allows for performing LDAP operations using the authenticated user's credentials.

LANGUAGE: javascript
CODE:
token = await jwt.getToken({
  req,
  secret: process.env.NEXTAUTH_SECRET,
})
const { username, password } = token

----------------------------------------

TITLE: Handling Token Refresh Errors on Client Side
DESCRIPTION: Client-side implementation to handle refresh token errors in NextAuth.js. Uses useSession hook to detect refresh token errors and redirects users to sign in when necessary.

LANGUAGE: javascript
CODE:
import { signIn, useSession } from "next-auth/react";
import { useEffect } from "react";

const HomePage() {
  const { data: session } = useSession();

  useEffect(() => {
    if (session?.error === "RefreshAccessTokenError") {
      signIn();
    }
  }, [session]);

return (...)
}

----------------------------------------

TITLE: Generating HS512 Key for JWT Session in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to generate an HS512 key using the 'jose' library. This key is used for JWT session handling in NextAuth.js when encountering the JWT_SESSION_ERROR.

LANGUAGE: bash
CODE:
jose newkey -s 512 -t oct -a HS512

----------------------------------------

TITLE: Configuring Spotify Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Spotify provider in NextAuth.js. It uses environment variables for the client ID and client secret, which should be obtained from the Spotify Developer Dashboard.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Spotify({
    clientId: process.env.SPOTIFY_CLIENT_ID,
    clientSecret: process.env.SPOTIFY_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Osso Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Osso Provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID, client secret, and issuer domain.

LANGUAGE: javascript
CODE:
import OssoProvider from "next-auth/providers/osso";
...
providers: [
  OssoProvider({
    clientId: process.env.OSSO_CLIENT_ID,
    clientSecret: process.env.OSSO_CLIENT_SECRET,
    issuer: process.env.OSSO_ISSUER
  })
}
...

----------------------------------------

TITLE: Configuring PostgreSQL Database in NextAuth.js
DESCRIPTION: Example of configuring a PostgreSQL database connection in NextAuth.js using a connection string.

LANGUAGE: javascript
CODE:
database: "postgres://username:password@127.0.0.1:5432/database_name"

----------------------------------------

TITLE: Configuring Extended Reddit Provider in NextAuth.js
DESCRIPTION: This snippet shows an advanced configuration of the Reddit provider with custom scopes, token URL, and profile handling. It includes settings for obtaining a refresh token and additional API access.

LANGUAGE: javascript
CODE:
providers: [
  {
    id: "reddit",
    name: "Reddit",
    clientId: process.env.REDDIT_CLIENT_ID,
    clientSecret: process.env.REDDIT_CLIENT_SECRET,
    scope: "identity mysubreddits read", //Check Reddit API Documentation for more. The identity scope is required.
    type: "oauth",
    version: "2.0",
    params: { grant_type: "authorization_code" },
    accessTokenUrl: " https://www.reddit.com/api/v1/access_token",
    authorizationUrl:
      "https://www.reddit.com/api/v1/authorize?response_type=code&duration=permanent",
    profileUrl: "https://oauth.reddit.com/api/v1/me",
    profile: (profile) => {
      return {
        id: profile.id,
        name: profile.name,
        email: null,
      }
    },
  },
]

----------------------------------------

TITLE: Configuring Amazon Cognito Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Amazon Cognito provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID, client secret, and issuer URL.

LANGUAGE: javascript
CODE:
import CognitoProvider from "next-auth/providers/cognito";
...
providers: [
  CognitoProvider({
    clientId: process.env.COGNITO_CLIENT_ID,
    clientSecret: process.env.COGNITO_CLIENT_SECRET,
    issuer: process.env.COGNITO_ISSUER,
  })
]
...

----------------------------------------

TITLE: OAuth Callback Handler
DESCRIPTION: GET endpoint that handles OAuth service callbacks during sign in process. Validates state parameter against CSRF token for OAuth 2.0 providers.

LANGUAGE: http
CODE:
GET /api/auth/callback/:provider

----------------------------------------

TITLE: Configuring MariaDB Database in NextAuth.js
DESCRIPTION: Example of configuring a MariaDB database connection in NextAuth.js using a connection string.

LANGUAGE: javascript
CODE:
database: "mariadb://username:password@127.0.0.1:3306/database_name"

----------------------------------------

TITLE: Configuring Authentik Provider in NextAuth.js
DESCRIPTION: Example implementation of Authentik authentication provider in NextAuth.js. Requires clientId, clientSecret, and issuer environment variables. The issuer URL must include the application slug.

LANGUAGE: javascript
CODE:
import AuthentikProvider from "next-auth/providers/authentik";
...
providers: [
  AuthentikProvider({
    clientId: process.env.AUTHENTIK_ID,
    clientSecret: process.env.AUTHENTIK_SECRET,
    issuer: process.env.AUTHENTIK_ISSUER,
  })
]
...

----------------------------------------

TITLE: Configuring Atlassian Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to configure the Atlassian provider in NextAuth.js. It includes setting the clientId, clientSecret, and specifying the required scopes for Jira and user access.

LANGUAGE: javascript
CODE:
import AtlassianProvider from "next-auth/providers/atlassian";
...
providers: [
  AtlassianProvider({
    clientId: process.env.ATLASSIAN_CLIENT_ID,
    clientSecret: process.env.ATLASSIAN_CLIENT_SECRET,
    scope: "write:jira-work read:jira-work read:jira-user offline_access read:me"
  })
]
...

----------------------------------------

TITLE: Configuring FusionAuth Provider in NextAuth.js
DESCRIPTION: Example configuration for setting up FusionAuth provider in NextAuth.js. Demonstrates how to initialize the provider with required parameters including issuer, clientId, clientSecret, and optional tenantId for multi-tenancy support.

LANGUAGE: javascript
CODE:
import FusionAuthProvider from "next-auth/providers/fusionauth";
...
providers: [
  FusionAuthProvider({
    id: "fusionauth",
    name: "FusionAuth",
    issuer:  process.env.FUSIONAUTH_ISSUER,
    clientId: process.env.FUSIONAUTH_CLIENT_ID,
    clientSecret: process.env.FUSIONAUTH_SECRET,
    tenantId: process.env.FUSIONAUTH_TENANT_ID // Only required if you're using multi-tenancy
  }),
]
...

----------------------------------------

TITLE: Enabling Database Synchronization in NextAuth.js Configuration Object
DESCRIPTION: Shows how to enable automatic database configuration using the synchronize option in a database configuration object.

LANGUAGE: javascript
CODE:
database: {
  type: 'mysql',
  host: '127.0.0.1',
  port: 3306,
  username: 'nextauth',
  password: 'password',
  database: 'database_name',
  synchronize: true
}

----------------------------------------

TITLE: Configuring Salesforce Provider in NextAuth.js
DESCRIPTION: Example showing how to initialize and configure the Salesforce authentication provider with NextAuth.js. Uses environment variables for client credentials and demonstrates basic provider setup.

LANGUAGE: javascript
CODE:
import SalesforceProvider from "next-auth/providers/salesforce";
...
providers: [
  SalesforceProvider({
    clientId: process.env.SALESFORCE_CLIENT_ID,
    clientSecret: process.env.SALESFORCE_CLIENT_SECRET,
  })
]
...

----------------------------------------

TITLE: Configuring Battle.net Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Battle.net provider in NextAuth.js. It imports the BattleNetProvider and configures it with client ID, client secret, and region, which are expected to be set as environment variables.

LANGUAGE: javascript
CODE:
import BattleNetProvider from "next-auth/providers/battlenet";
...
providers: [
  BattleNetProvider({
    clientId: process.env.BATTLENET_CLIENT_ID,
    clientSecret: process.env.BATTLENET_CLIENT_SECRET,
    region: process.env.BATTLENET_REGION
  })
]
...

----------------------------------------

TITLE: Configuring FACEIT Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the FACEIT authentication provider in a NextAuth.js project. It shows the basic configuration using environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import FaceItProvider from "next-auth/providers/faceit";
...
providers: [
  FaceItProvider({
    clientId: process.env.FACEIT_CLIENT_ID,
    clientSecret: process.env.FACEIT_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Setting Entity Prefix in NextAuth.js Database Configuration Object
DESCRIPTION: Shows how to set a prefix for all table names using the entityPrefix option in a database configuration object.

LANGUAGE: javascript
CODE:
database: {
  type: 'mysql',
  host: '127.0.0.1',
  port: 3306,
  username: 'nextauth',
  password: 'password',
  database: 'database_name',
  entityPrefix: 'nextauth_'
}

----------------------------------------

TITLE: Configuring LinkedIn Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the LinkedIn provider in a NextAuth.js configuration. It shows the import statement and the provider configuration object, which includes the client ID and client secret obtained from the LinkedIn Developers portal.

LANGUAGE: javascript
CODE:
import LinkedInProvider from "next-auth/providers/linkedin";
...
providers: [
  LinkedInProvider({
    clientId: process.env.LINKEDIN_CLIENT_ID,
    clientSecret: process.env.LINKEDIN_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Salesforce Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Salesforce provider in NextAuth.js. It uses environment variables for the client ID and client secret, which should be securely stored and accessed.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Salesforce({
    clientId: process.env.SALESFORCE_CLIENT_ID,
    clientSecret: process.env.SALESFORCE_CLIENT_SECRET,
  })
]
...

----------------------------------------

TITLE: Installing NextAuth and Firebase Adapter
DESCRIPTION: Command to install NextAuth and the Firebase Adapter using npm.

LANGUAGE: javascript
CODE:
npm install next-auth @next-auth/firebase-adapter@canary

----------------------------------------

TITLE: Configuring Database Object in NextAuth.js
DESCRIPTION: Shows how to specify database credentials using a TypeORM configuration object in NextAuth.js.

LANGUAGE: javascript
CODE:
database: {
  type: 'mysql',
  host: '127.0.0.1',
  port: 3306,
  username: 'nextauth',
  password: 'password',
  database: 'database_name'
}

----------------------------------------

TITLE: Configuring NextAuth with Dgraph Adapter
DESCRIPTION: Basic setup of NextAuth configuration with Dgraph adapter including endpoint and authentication settings

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import { DgraphAdapter } from "@next-auth/dgraph-adapter"

export default NextAuth({
  providers: [],
  adapter: DgraphAdapter({
    endpoint: process.env.DGRAPH_GRAPHQL_ENDPOINT,
    authToken: process.env.DGRAPH_GRAPHQL_KEY,

    // you can omit the following properties if you are running an unsecure schema
    authHeader: process.env.AUTH_HEADER, // default: "Authorization",
    jwtSecret: process.env.SECRET,
  }),
})

----------------------------------------

TITLE: Configuring Osso Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Osso provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID, client secret, and domain.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Osso({
    clientId: process.env.OSSO_CLIENT_ID,
    clientSecret: process.env.OSSO_CLIENT_SECRET,
    domain: process.env.OSSO_DOMAIN
  })
}
...

----------------------------------------

TITLE: Configuring Database Connection String in NextAuth.js
DESCRIPTION: Demonstrates how to specify database credentials using a connection string in NextAuth.js configuration.

LANGUAGE: javascript
CODE:
database: "mysql://nextauth:password@127.0.0.1:3306/database_name"

----------------------------------------

TITLE: Basic VK Provider Configuration in NextAuth.js
DESCRIPTION: Basic setup example for integrating VK authentication provider using environment variables for credentials.

LANGUAGE: javascript
CODE:
import VkProvider from "next-auth/providers/vk";
...
providers: [
  VkProvider({
    clientId: process.env.VK_CLIENT_ID,
    clientSecret: process.env.VK_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Box Provider in NextAuth.js
DESCRIPTION: This code snippet shows how to set up the Box Provider in a NextAuth.js project. It imports the BoxProvider and configures it with client ID and client secret environment variables.

LANGUAGE: javascript
CODE:
import BoxProvider from "next-auth/providers/box";
...
providers: [
  BoxProvider({
    clientId: process.env.BOX_CLIENT_ID,
    clientSecret: process.env.BOX_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Credentials Provider in NextAuth.js
DESCRIPTION: Example of setting up a Credentials provider in NextAuth.js. This snippet demonstrates how to configure the provider with custom credentials and an authorization function.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Credentials({
    name: 'Credentials',
    credentials: {
      username: { label: "Username", type: "text", placeholder: "jsmith" },
      password: {  label: "Password", type: "password" }
    },
    async authorize(credentials, req) {
      const res = await fetch("/your/endpoint", {
        method: 'POST',
        body: JSON.stringify(credentials),
        headers: { "Content-Type": "application/json" }
      })
      const user = await res.json()
      if (res.ok && user) {
        return user
      }
      return null
    }
  })
]
...

----------------------------------------

TITLE: Implementing Snake Case Naming Convention
DESCRIPTION: Configuration for using snake_case naming convention with TypeORM adapter

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import { TypeORMLegacyAdapter } from "@next-auth/typeorm-legacy-adapter"
import { SnakeNamingStrategy } from 'typeorm-naming-strategies'
import { ConnectionOptions } from "typeorm"

const connection: ConnectionOptions = {
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    namingStrategy: new SnakeNamingStrategy()
}

export default NextAuth({
  adapter: TypeORMLegacyAdapter(connection),
  ...
})

----------------------------------------

TITLE: Configuring Line Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Line authentication provider in a NextAuth.js project. It shows the basic configuration using environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import LineProvider from "next-auth/providers/line";
...
providers: [
  LineProvider({
    clientId: process.env.LINE_CLIENT_ID,
    clientSecret: process.env.LINE_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Basic VK Provider Configuration in NextAuth.js
DESCRIPTION: Basic setup for VK authentication provider using environment variables for client credentials.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.VK({
    clientId: process.env.VK_CLIENT_ID,
    clientSecret: process.env.VK_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Implementing Custom Adapter in TypeScript for NextAuth.js
DESCRIPTION: Demonstrates how to create a custom adapter for NextAuth.js using TypeScript. This snippet shows the basic structure of an adapter implementation with proper type annotations.

LANGUAGE: typescript
CODE:
import type { Adapter } from "next-auth/adapters"

const MyAdapter: Adapter = () => {
  return {
    async getAdapter() {
      return {
        // your adapter methods here
      }
    },
  }
}

----------------------------------------

TITLE: Configuring Neo4j Adapter
DESCRIPTION: Configuration setup for Neo4j adapter in next-auth, including driver initialization and basic authentication

LANGUAGE: javascript
CODE:
import neo4j from "neo4j-driver"
import { Neo4jAdapter } from "@next-auth/neo4j-adapter"

const driver = neo4j.driver(
  "bolt://localhost",
  neo4j.auth.basic("neo4j", "password")
)

const neo4jSession = driver.session()

// For more information on each option (and a full list of options) go to
// https://next-auth.js.org/configuration/options
export default NextAuth({
  // https://next-auth.js.org/configuration/providers
  providers: [],
  adapter: Neo4jAdapter(neo4jSession),
  ...
})

----------------------------------------

TITLE: Configuring Basic Basecamp Authentication in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up basic Basecamp authentication in NextAuth.js, allowing retrieval of basic profile information such as account ID, email, and name.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Basecamp({
    clientId: process.env.BASECAMP_CLIENT_ID,
    clientSecret: process.env.BASECAMP_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring SQLite in NextAuth.js
DESCRIPTION: Example of configuring an in-memory SQLite database connection in NextAuth.js using a connection string.

LANGUAGE: javascript
CODE:
database: "sqlite://localhost/:memory:"

----------------------------------------

TITLE: Installing Neo4j Dependencies
DESCRIPTION: Command to install required packages for Neo4j adapter implementation with next-auth

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/neo4j-adapter neo4j-driver

----------------------------------------

TITLE: Email Sign-in Form Implementation in Next.js
DESCRIPTION: Custom email sign-in form implementation showing how to handle CSRF token and email submission for email-based authentication.

LANGUAGE: jsx
CODE:
import { getCsrfToken } from "next-auth/client"

export default function SignIn({ csrfToken }) {
  return (
    <form method="post" action="/api/auth/signin/email">
      <input name="csrfToken" type="hidden" defaultValue={csrfToken} />
      <label>
        Email address
        <input type="email" id="email" name="email" />
      </label>
      <button type="submit">Sign in with Email</button>
    </form>
  )
}

// This is the recommended way for Next.js 9.3 or newer
export async function getServerSideProps(context) {
  const csrfToken = await getCsrfToken(context)
  return {
    props: { csrfToken },
  }
}

----------------------------------------

TITLE: Configuring Zoho Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Zoho Provider in NextAuth.js. It imports the ZohoProvider and configures it with client ID and secret from environment variables.

LANGUAGE: javascript
CODE:
import ZohoProvider from "next-auth/providers/zoho";
...
providers: [
  ZohoProvider({
    clientId: process.env.ZOHO_CLIENT_ID,
    clientSecret: process.env.ZOHO_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring MongoDB in NextAuth.js
DESCRIPTION: Example of configuring a MongoDB database connection in NextAuth.js using a connection string.

LANGUAGE: javascript
CODE:
database: "mongodb://username:password@127.0.0.1:3306/database_name"

----------------------------------------

TITLE: Session Configuration in NextAuth
DESCRIPTION: Default session configuration options including strategy selection and timing parameters.

LANGUAGE: javascript
CODE:
session: {
  strategy: "database",
  maxAge: 30 * 24 * 60 * 60, // 30 days
  updateAge: 24 * 60 * 60, // 24 hours
}

----------------------------------------

TITLE: Configuring Custom Auth Pages in NextAuth.js
DESCRIPTION: Configuration for custom authentication pages including sign-in, sign-out, error, and verification request pages using the pages option in NextAuth.js setup.

LANGUAGE: javascript
CODE:
pages: {
    signIn: '/auth/signin',
    signOut: '/auth/signout',
    error: '/auth/error', // Error code passed in query string as ?error=
    verifyRequest: '/auth/verify-request', // (used for check email message)
    newUser: null // If set, new users will be directed here on first sign in
  }

----------------------------------------

TITLE: Deprecated SignIn Callback Redirect in NextAuth.js
DESCRIPTION: Examples showing the deprecated and recommended ways to handle sign-in redirects in the signIn callback function.

LANGUAGE: javascript
CODE:
return Promise.reject("/some/url")

LANGUAGE: javascript
CODE:
throw "/some/url"

LANGUAGE: javascript
CODE:
return "/some/url"

----------------------------------------

TITLE: Configuring NextAuth.js with PouchDB Adapter
DESCRIPTION: Example configuration for NextAuth.js using the PouchDB adapter. It sets up PouchDB with necessary plugins and configures NextAuth with Google provider and PouchDB adapter.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import GoogleProvider from "next-auth/providers/google"
import { PouchDBAdapter } from "@next-auth/pouchdb-adapter"
import PouchDB from "pouchdb"

// Setup your PouchDB instance and database
PouchDB.plugin(require("pouchdb-adapter-leveldb")) // Any other adapter
  .plugin(require("pouchdb-find")) // Don't forget the `pouchdb-find` plugin

const pouchdb = new PouchDB("auth_db", { adapter: "leveldb" })

// For more information on each option (and a full list of options) go to
// https://next-auth.js.org/configuration/options
export default NextAuth({
  // https://next-auth.js.org/providers/overview
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_ID,
      clientSecret: process.env.GOOGLE_SECRET,
    }),
  ],
  adapter: PouchDBAdapter(pouchdb),
  // ...
})

----------------------------------------

TITLE: Configuring Multiple Credentials Providers in NextAuth.js
DESCRIPTION: This example shows how to configure multiple Credentials providers in NextAuth.js, each with unique IDs and different authentication methods such as domain login and two-factor authentication.

LANGUAGE: javascript
CODE:
providers: [
  CredentialsProvider({
    id: "domain-login",
    name: "Domain Account",
    async authorize(credentials, req) {
      const user = {
        /* add function to get user */
      }
      return user
    },
    credentials: {
      domain: {
        label: "Domain",
        type: "text ",
        placeholder: "CORPNET",
        value: "CORPNET",
      },
      username: { label: "Username", type: "text ", placeholder: "jsmith" },
      password: { label: "Password", type: "password" },
    },
  }),
  CredentialsProvider({
    id: "intranet-credentials",
    name: "Two Factor Auth",
    async authorize(credentials, req) {
      const user = {
        /* add function to get user */
      }
      return user
    },
    credentials: {
      email: { label: "Username", type: "text ", placeholder: "jsmith" },
      "2fa-key": { label: "2FA Key" },
    },
  }),
  /* ... additional providers ... /*/
]

----------------------------------------

TITLE: Configuring Facebook Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Facebook authentication provider in NextAuth.js. It uses environment variables for the client ID and secret, which should be securely stored and not exposed in the code.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Facebook({
    clientId: process.env.FACEBOOK_CLIENT_ID,
    clientSecret: process.env.FACEBOOK_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Explicitly Configuring TypeORM Adapter with SQLite in NextAuth.js
DESCRIPTION: This snippet shows how to explicitly configure the TypeORM Adapter with a SQLite database in NextAuth.js. It uses the Adapters.TypeORM.Adapter method to set up an in-memory SQLite database with synchronization enabled.

LANGUAGE: javascript
CODE:
adapter: Adapters.TypeORM.Adapter({
  type: "sqlite",
  database: ":memory:",
  synchronize: true,
})

----------------------------------------

TITLE: Configuring 42 School Provider in NextAuth.js
DESCRIPTION: Example code showing how to initialize the 42 School authentication provider with NextAuth.js using environment variables for client credentials.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.FortyTwo({
    clientId: process.env.FORTY_TWO_CLIENT_ID,
    clientSecret: process.env.FORTY_TWO_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Customizing JWT Session with EVE Online Character ID
DESCRIPTION: Example showing how to include the EVE Online Character ID in the JWT token and session using callback functions.

LANGUAGE: javascript
CODE:
...
options: {
  jwt: {
    secret: process.env.JWT_SECRET,
  },
  callbacks: {
    session: async ({ session, token }) => {
      session.user.id = token.id;
      return session;
    }
  }
}
...

----------------------------------------

TITLE: Using NextAuth.js Session in React Component with TypeScript
DESCRIPTION: Illustrates how to use the NextAuth.js session in a React component with TypeScript. This snippet demonstrates the usage of the useSession hook with proper typing.

LANGUAGE: typescript
CODE:
import { useSession } from "next-auth/client"

export default function IndexPage() {
  // `session` should match `callbacks.session()` in `NextAuth()`
  const [session] = useSession()

  return (
    // Your component
  )
}

----------------------------------------

TITLE: Configuring MySQL Database in NextAuth.js
DESCRIPTION: Example of configuring a MySQL database connection in NextAuth.js using a connection string.

LANGUAGE: javascript
CODE:
database: "mysql://username:password@127.0.0.1:3306/database_name"

----------------------------------------

TITLE: Converting Apple Key to Single Line on Windows
DESCRIPTION: This PowerShell command converts an Apple authentication key file to a single line, suitable for use as an environment variable on Windows systems.

LANGUAGE: powershell
CODE:
 $k8file = "AuthKey_ID.k8"
(Get-Content "C:\Users\$env:UserName\Downloads\${k8file}") -join "\n"

----------------------------------------

TITLE: Configuring IdentityServer4 Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the IdentityServer4 provider in NextAuth.js. It includes the provider configuration with essential parameters such as issuer, clientId, and clientSecret.

LANGUAGE: javascript
CODE:
import IdentityServer4Provider from "next-auth/providers/identity-server4";
...
providers: [
  IdentityServer4Provider({
    id: "identity-server4",
    name: "IdentityServer4",
    issuer:  process.env.IdentityServer4_Issuer,
    clientId: process.env.IdentityServer4_CLIENT_ID,
    clientSecret: process.env.IdentityServer4_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Email Provider in NextAuth.js
DESCRIPTION: Example of setting up an Email provider in NextAuth.js. This snippet shows how to configure the provider with server and from email settings.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Email({
    server: process.env.EMAIL_SERVER,
    from: process.env.EMAIL_FROM,
    // maxAge: 24 * 60 * 60, // How long email links are valid for (default 24h)
  }),
],
...

----------------------------------------

TITLE: Enabling Database Synchronization in NextAuth.js Connection String
DESCRIPTION: Demonstrates how to enable automatic database configuration using the synchronize option in a connection string.

LANGUAGE: javascript
CODE:
database: "mysql://nextauth:password@127.0.0.1:3306/database_name?synchronize=true"

----------------------------------------

TITLE: Environment Variables Configuration in NextAuth.js
DESCRIPTION: Configuration for NEXTAUTH_URL and NEXTAUTH_URL_INTERNAL environment variables used in production deployments.

LANGUAGE: plaintext
CODE:
NEXTAUTH_URL=https://example.com

NEXTAUTH_URL_INTERNAL=http://10.240.8.16

----------------------------------------

TITLE: Configuring Keycloak Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Keycloak Provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID, client secret, and issuer URL.

LANGUAGE: javascript
CODE:
import KeycloakProvider from "next-auth/providers/keycloak";
...
providers: [
  KeycloakProvider({
    clientId: process.env.KEYCLOAK_ID,
    clientSecret: process.env.KEYCLOAK_SECRET,
    issuer: process.env.KEYCLOAK_ISSUER,
  })
]
...

----------------------------------------

TITLE: Configuring Strava Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to add the Strava provider to the NextAuth.js configuration. It uses environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import Providers from 'next-auth/providers'
...
providers: [
  Providers.Strava({
    clientId: process.env.STRAVA_CLIENT_ID,
    clientSecret: process.env.STRAVA_CLIENT_SECRET,
  })
]
...

----------------------------------------

TITLE: Setting Environment Variables for Cypress NextAuth.js Tests
DESCRIPTION: Environment variables configuration for Cypress, including login credentials, cookie name, and site URL.

LANGUAGE: json
CODE:
{
  "GOOGLE_USER": "username@company.com",
  "GOOGLE_PW": "password",
  "COOKIE_NAME": "next-auth.session-token",
  "SITE_NAME": "http://localhost:3000"
}

----------------------------------------

TITLE: Setting up Cypress Environment Variables
DESCRIPTION: Environment configuration for Cypress containing sensitive credentials and session settings for NextAuth.js testing.

LANGUAGE: json
CODE:
{
  "GOOGLE_USER": "username@company.com",
  "GOOGLE_PW": "password",
  "COOKIE_NAME": "next-auth.session-token",
  "SITE_NAME": "http://localhost:3000"
}

----------------------------------------

TITLE: Configuring Netlify Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Netlify provider in NextAuth.js. It imports the NetlifyProvider and configures it with client ID and secret environment variables.

LANGUAGE: javascript
CODE:
import NetlifyProvider from "next-auth/providers/netlify";
...
providers: [
  NetlifyProvider({
    clientId: process.env.NETLIFY_CLIENT_ID,
    clientSecret: process.env.NETLIFY_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Implementing Slack Provider in NextAuth.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to configure the Slack provider in NextAuth.js. It imports the Providers object from next-auth/providers and sets up the Slack provider with client ID and client secret environment variables.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Slack({
    clientId: process.env.SLACK_CLIENT_ID,
    clientSecret: process.env.SLACK_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Cypress Plugins for Social Login
DESCRIPTION: Plugin configuration for Cypress to enable Google social login functionality using cypress-social-logins.

LANGUAGE: javascript
CODE:
const { GoogleSocialLogin } = require("cypress-social-logins").plugins

module.exports = (on, config) => {
  on("task", {
    GoogleSocialLogin: GoogleSocialLogin,
  })
}

----------------------------------------

TITLE: Configuring Spotify Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to configure the Spotify Provider in NextAuth.js. It imports the SpotifyProvider and sets it up with the client ID and client secret obtained from the Spotify Developer Dashboard.

LANGUAGE: javascript
CODE:
import SpotifyProvider from "next-auth/providers/spotify";
...
providers: [
  SpotifyProvider({
    clientId: process.env.SPOTIFY_CLIENT_ID,
    clientSecret: process.env.SPOTIFY_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Twitch Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to import and configure the Twitch provider in a NextAuth.js setup. It shows the basic structure for adding the provider to the providers array, including the necessary client ID and secret from environment variables.

LANGUAGE: javascript
CODE:
import TwitchProvider from "next-auth/providers/twitch";
...
providers: [
  TwitchProvider({
    clientId: process.env.TWITCH_CLIENT_ID,
    clientSecret: process.env.TWITCH_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Creating HTTPS Server for Local NextAuth.js Development
DESCRIPTION: This code sets up an HTTPS server for local development of a Next.js application with NextAuth.js. It uses self-signed certificates and creates a server that listens on port 3000.

LANGUAGE: javascript
CODE:
const { createServer } = require("https")
const { parse } = require("url")
const next = require("next")
const fs = require("fs")

const dev = process.env.NODE_ENV !== "production"
const app = next({ dev })
const handle = app.getRequestHandler()

const httpsOptions = {
  key: fs.readFileSync("./certificates/localhost.key"),
  cert: fs.readFileSync("./certificates/localhost.crt"),
}

app.prepare().then(() => {
  createServer(httpsOptions, (req, res) => {
    const parsedUrl = parse(req.url, true)
    handle(req, res, parsedUrl)
  }).listen(3000, (err) => {
    if (err) throw err
    console.log("> Ready on https://localhost:3000")
  })
})

----------------------------------------

TITLE: Configuring NextAuth with Firebase Adapter
DESCRIPTION: Example configuration for NextAuth using the Firebase Adapter in a Next.js API route. It demonstrates how to initialize Firebase and set up the adapter.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import Providers from "next-auth/providers"
import { FirebaseAdapter } from "@next-auth/firebase-adapter"

import firebase from "firebase/app"
import "firebase/firestore"

const firestore = (
  firebase.apps[0] ?? firebase.initializeApp(/* your config */)
).firestore()

// For more information on each option (and a full list of options) go to
// https://next-auth.js.org/configuration/options
export default NextAuth({
  // https://next-auth.js.org/configuration/providers
  providers: [
    Providers.Google({
      clientId: process.env.GOOGLE_ID,
      clientSecret: process.env.GOOGLE_SECRET,
    }),
  ],
  adapter: FirebaseAdapter(firestore),
  ...
})

----------------------------------------

TITLE: Custom API Version Configuration for VK Provider
DESCRIPTION: Extended configuration example showing how to specify a custom VK API version and customize endpoint URLs.

LANGUAGE: javascript
CODE:
// pages/api/auth/[...nextauth].js

const apiVersion = "5.126"
...
providers: [
  VkProvider({
    accessTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,
    requestTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,
    authorizationUrl:
      `https://oauth.vk.com/authorize?response_type=code&v=${apiVersion}`,
    profileUrl: `https://api.vk.com/method/users.get?fields=photo_100&v=${apiVersion}`,
  })
]
...

----------------------------------------

TITLE: SSL Certificate Generation for Windows
DESCRIPTION: OpenSSL command to generate local SSL certificate files for HTTPS development on Windows.

LANGUAGE: cmd
CODE:
 req -x509 -out localhost.crt -keyout localhost.key \
  -newkey rsa:2048 -nodes -sha256 \
  -subj "/CN=localhost"

----------------------------------------

TITLE: Configuring 42 School Provider in NextAuth.js
DESCRIPTION: Example configuration for integrating 42 School OAuth provider in NextAuth.js. Requires client ID and client secret from 42 School's OAuth application settings.

LANGUAGE: javascript
CODE:
import FortyTwoProvider from "next-auth/providers/42";
...
providers: [
  FortyTwoProvider({
    clientId: process.env.FORTY_TWO_CLIENT_ID,
    clientSecret: process.env.FORTY_TWO_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Implementing WordPress.com Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to configure the WordPress.com provider in NextAuth.js. It imports the WordpressProvider and sets up the provider with clientId and clientSecret obtained from environment variables.

LANGUAGE: javascript
CODE:
import WordpressProvider from "next-auth/providers/wordpress";
...
providers: [
  WordpressProvider({
    clientId: process.env.WORDPRESS_CLIENT_ID,
    clientSecret: process.env.WORDPRESS_CLIENT_SECRET
  })
}
...

----------------------------------------

TITLE: Windows-specific SSL Certificate Generation
DESCRIPTION: Alternative command for Windows users to generate a self-signed SSL certificate using OpenSSL distributed with Git for Windows.

LANGUAGE: bash
CODE:
 req -x509 -out localhost.crt -keyout localhost.key \
  -newkey rsa:2048 -nodes -sha256 \
  -subj '/CN=localhost'

----------------------------------------

TITLE: Implementing NextAuth with MongoDB Adapter
DESCRIPTION: Configuration for integrating MongoDB adapter into NextAuth.js setup using the client promise from the previous setup

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import { MongoDBAdapter } from "@next-auth/mongodb-adapter"
import clientPromise from "lib/mongodb"

// For more information on each option (and a full list of options) go to
// https://next-auth.js.org/configuration/options
export default NextAuth({
  adapter: MongoDBAdapter(clientPromise),
  ...
})

----------------------------------------

TITLE: Installing NextAuth.js and PouchDB Adapter
DESCRIPTION: Command to install the required packages for using PouchDB adapter with NextAuth.js.

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/pouchdb-adapter

----------------------------------------

TITLE: Environment Variables Configuration for Azure AD B2C
DESCRIPTION: Environment variable configuration for Azure AD B2C authentication, including client ID, client secret, and tenant ID.

LANGUAGE: plaintext
CODE:
AZURE_CLIENT_ID=<copy Application (client) ID here>
AZURE_CLIENT_SECRET=<copy generated secret value here>
AZURE_TENANT_ID=<copy the tenant id here>

----------------------------------------

TITLE: Adding Local Domain to Windows Hosts File
DESCRIPTION: This PowerShell command adds a local domain entry to the Windows hosts file, mapping 'dev.example.com' to the localhost IP address.

LANGUAGE: powershell
CODE:
Add-Content -Path C:\Windows\System32\drivers\etc\hosts -Value "127.0.0.1`tdev.example.com" -Force

----------------------------------------

TITLE: Configuring NextAuth with FaunaDB Adapter
DESCRIPTION: Configuration setup for NextAuth.js using FaunaDB adapter in the API route file. Includes client initialization and adapter setup.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import { Client as FaunaClient } from "faunadb"
import { FaunaAdapter } from "@next-auth/fauna-adapter"

const client = new FaunaClient({
  secret: "secret",
  scheme: "http",
  domain: "localhost",
  port: 8443,
})

// For more information on each option (and a full list of options) go to
// https://next-auth.js.org/configuration/options
export default NextAuth({
  // https://next-auth.js.org/providers/overview
  providers: [],
  adapter: FaunaAdapter(client)
  ...
})

----------------------------------------

TITLE: Protected Page with Required Authentication
DESCRIPTION: Demonstrates how to create a protected page that requires authentication using useSession hook with required flag.

LANGUAGE: jsx
CODE:
import { useSession } from "next-auth/react"

export default function Admin() {
  const { status } = useSession({
    required: true,
    onUnauthenticated() {
      // The user is not authenticated, handle it here.
    }
  })

  if (status === "loading") {
    return "Loading or not authenticated..."
  }

  return "User is logged in"
}

----------------------------------------

TITLE: Configuring Team-Specific Basecamp Authentication in NextAuth.js
DESCRIPTION: This snippet shows how to configure Basecamp authentication for retrieving profile information related to a specific team. It includes a custom profile URL and a function to handle team-specific profile data.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Basecamp({
    clientId: process.env.BASECAMP_CLIENT_ID,
    clientSecret: process.env.BASECAMP_CLIENT_SECRET,
    profileUrl: `https://3.basecampapi.com/${process.env.BASECAMP_TEAM_ID}/my/profile.json`,
    profile: (profile) => {
      return {
        id: profile.id,
        name: profile.name,
        email: profile.email_address,
        image: profile.avatar_url,
        admin: profile.admin,
        owner: profile.owner
      }
    }
  })
]
...

----------------------------------------

TITLE: Converting Apple Key to Single Line on Mac
DESCRIPTION: This bash command converts an Apple authentication key file to a single line, suitable for use as an environment variable on macOS systems.

LANGUAGE: bash
CODE:
awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}'  AuthKey_ID.k8

----------------------------------------

TITLE: Installing NextAuth with Sequelize Adapter
DESCRIPTION: Command to install required packages including next-auth, the Sequelize adapter, and Sequelize ORM.

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/sequelize-adapter sequelize

----------------------------------------

TITLE: Initiating Sign-In Process with signIn Function
DESCRIPTION: Illustrates different ways to use the signIn function for various authentication flows, including OAuth and email sign-in.

LANGUAGE: jsx
CODE:
import { signIn } from "next-auth/client"

// Redirect to sign-in page
export default () => <button onClick={() => signIn()}>Sign in</button>

// Start Google OAuth sign-in
export default () => (
  <button onClick={() => signIn("google")}>Sign in with Google</button>
)

// Start Email sign-in
export default ({ email }) => (
  <button onClick={() => signIn("email", { email })}>Sign in with Email</button>
)

----------------------------------------

TITLE: Configuring Battle.net Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Battle.net provider in NextAuth.js. It shows the usage of environment variables for client ID, client secret, and region configuration.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.BattleNet({
    clientId: process.env.BATTLENET_CLIENT_ID,
    clientSecret: process.env.BATTLENET_CLIENT_SECRET,
    region: process.env.BATTLENET_REGION
  })
]
...

----------------------------------------

TITLE: Configuring Next-Auth with FaunaDB Adapter
DESCRIPTION: Example configuration for next-auth using the FaunaDB adapter in a Next.js API route. It sets up Google as an authentication provider and configures the FaunaDB client.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import Providers from "next-auth/providers"
import * as Fauna from "faunadb"
import { FaunaAdapter } from "@next-auth/fauna-adapter"

const client = new Fauna.Client({
  secret: "secret",
  scheme: "http",
  domain: "localhost",
  port: 8443,
})

// For more information on each option (and a full list of options) go to
// https://next-auth.js.org/configuration/options
export default NextAuth({
  // https://next-auth.js.org/configuration/providers
  providers: [
    Providers.Google({
      clientId: process.env.GOOGLE_ID,
      clientSecret: process.env.GOOGLE_SECRET,
    }),
  ],
  adapter: FaunaAdapter({ faunaClient: client})
  ...
})

----------------------------------------

TITLE: Configuring NextAuth with Sequelize Adapter
DESCRIPTION: Basic setup of NextAuth.js with Sequelize adapter, including database connection initialization.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import SequelizeAdapter from "@next-auth/sequelize-adapter"
import { Sequelize } from "sequelize"

const sequelize = new Sequelize("yourconnectionstring")

export default NextAuth({
  providers: [],
  adapter: SequelizeAdapter(sequelize),
})

----------------------------------------

TITLE: Configuring Strava Provider in NextAuth.js
DESCRIPTION: Example code showing how to initialize and configure the Strava authentication provider in NextAuth.js. Requires Strava API client credentials stored in environment variables.

LANGUAGE: javascript
CODE:
import StravaProvider from "next-auth/providers/strava";
...
providers: [
  StravaProvider({
    clientId: process.env.STRAVA_CLIENT_ID,
    clientSecret: process.env.STRAVA_CLIENT_SECRET,
  })
]
...

----------------------------------------

TITLE: Configuring Box Provider in NextAuth.js
DESCRIPTION: Example code showing how to configure the Box authentication provider in NextAuth.js. Requires Box client ID and client secret environment variables to be set.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Box({
    clientId: process.env.BOX_CLIENT_ID,
    clientSecret: process.env.BOX_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Coinbase Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Coinbase provider in a NextAuth.js project. It imports the Providers object from next-auth/providers and configures the Coinbase provider with client ID and secret from environment variables.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Coinbase({
    clientId: process.env.COINBASE_CLIENT_ID,
    clientSecret: process.env.COINBASE_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Database Schema Synchronization Setup
DESCRIPTION: Example showing how to enable automatic schema synchronization for development environments using sequelize.sync().

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import SequelizeAdapter from "@next-auth/sequelize-adapter"
import Sequelize from 'sequelize'

const sequelize = new Sequelize("sqlite::memory:")
const adapter = SequelizeAdapter(sequelize)

// Calling sync() is not recommended in production
sequelize.sync()

export default NextAuth({
  ...
  adapter
  ...
})

----------------------------------------

TITLE: JWT Configuration for Dgraph Authentication
DESCRIPTION: Custom JWT encoding and decoding configuration for NextAuth to work with Dgraph's HS256 algorithm requirement

LANGUAGE: javascript
CODE:
import * as jwt from "jsonwebtoken";
export default NextAuth({
  session: {
    jwt: true
  },
  jwt: {
    secret: process.env.SECRET,
    encode: async ({ secret, token }) => {
      return jwt.sign({...token, userId: token.id}, secret, {
        algorithm: "HS256",
        expiresIn: 30 * 24 * 60 * 60; // 30 days
      });;
    },
    decode: async ({ secret, token }) => {
      return jwt.verify(token, secret, { algorithms: ["HS256"] });
    }
  },
})

----------------------------------------

TITLE: Setting Up Local HTTPS Server for NextAuth.js
DESCRIPTION: Node.js script to create an HTTPS server for local development, necessary for Bungie OAuth integration. This server uses the generated SSL certificates and handles Next.js routing.

LANGUAGE: javascript
CODE:
const { createServer } = require("https")
const { parse } = require("url")
const next = require("next")
const fs = require("fs")

const dev = process.env.NODE_ENV !== "production"
const app = next({ dev })
const handle = app.getRequestHandler()

const httpsOptions = {
  key: fs.readFileSync("./certificates/localhost.key"),
  cert: fs.readFileSync("./certificates/localhost.crt"),
}

app.prepare().then(() => {
  createServer(httpsOptions, (req, res) => {
    const parsedUrl = parse(req.url, true)
    handle(req, res, parsedUrl)
  }).listen(3000, (err) => {
    if (err) throw err
    console.log("> Ready on https://localhost:3000")
  })
})

----------------------------------------

TITLE: Configuring Netlify Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to configure the Netlify provider in NextAuth.js. It shows the usage of the Providers.Netlify() function with clientId and clientSecret options, which should be set using environment variables.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Netlify({
    clientId: process.env.NETLIFY_CLIENT_ID,
    clientSecret: process.env.NETLIFY_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Installing NextAuth and DynamoDB Adapter
DESCRIPTION: Command to install the required packages for using NextAuth with DynamoDB adapter.

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/dynamodb-adapter

----------------------------------------

TITLE: Configuring Twitter Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Twitter provider in NextAuth.js. It includes the basic configuration using environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import TwitterProvider from "next-auth/providers/twitter";
...
providers: [
  TwitterProvider({
    clientId: process.env.TWITTER_CLIENT_ID,
    clientSecret: process.env.TWITTER_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Modifying Windows Hosts File for Local Development
DESCRIPTION: PowerShell command to add a custom domain entry to the Windows hosts file, allowing the use of a custom domain for local development instead of localhost.

LANGUAGE: powershell
CODE:
Add-Content -Path C:\Windows\System32\drivers\etc\hosts -Value "127.0.0.1`tdev.example.com" -Force

----------------------------------------

TITLE: Configuring LINE Provider in NextAuth.js
DESCRIPTION: Example configuration for integrating LINE authentication provider in NextAuth.js. Requires LINE client ID and client secret from the LINE Developers Console.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.LINE({
    clientId: process.env.LINE_CLIENT_ID,
    clientSecret: process.env.LINE_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Creating Enterprise Edition Specific Constraints
DESCRIPTION: Cypher queries for creating composite node key constraints and indexes specific to Neo4j Enterprise Edition

LANGUAGE: cypher
CODE:
CREATE CONSTRAINT account_provider_composite_constraint IF NOT EXISTS 
ON (a:Account) ASSERT (a.provider, a.providerAccountId) IS NODE KEY;

CREATE INDEX account_provider_composite_index IF NOT EXISTS
FOR (a:Account) ON (a.provider, a.providerAccountId);

CREATE CONSTRAINT verification_token_composite_constraint IF NOT EXISTS 
ON (v:VerificationToken) ASSERT (v.identifier, v.token) IS NODE KEY;

CREATE INDEX verification_token_composite_index IF NOT EXISTS
FOR (v:VerificationToken) ON (v.identifier, v.token);

----------------------------------------

TITLE: Configuring Basic TypeORM Adapter
DESCRIPTION: Basic setup of TypeORM adapter in NextAuth.js configuration file

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import { TypeORMLegacyAdapter } from "@next-auth/typeorm-legacy-adapter"

export default NextAuth({
  adapter: TypeORMLegacyAdapter("yourconnectionstring"),
  ...
})

----------------------------------------

TITLE: Configuring Amazon Cognito Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Amazon Cognito provider in NextAuth.js. It shows the usage of environment variables for client ID, client secret, and domain configuration.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Cognito({
    clientId: process.env.COGNITO_CLIENT_ID,
    clientSecret: process.env.COGNITO_CLIENT_SECRET,
    domain: process.env.COGNITO_DOMAIN,
  })
]
...

----------------------------------------

TITLE: Configuring Twitter Provider in NextAuth.js
DESCRIPTION: Example showing how to configure the Twitter authentication provider in NextAuth.js using environment variables for client credentials. Requires TWITTER_CLIENT_ID and TWITTER_CLIENT_SECRET to be set in environment variables.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Twitter({
    clientId: process.env.TWITTER_CLIENT_ID,
    clientSecret: process.env.TWITTER_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Twitter Provider in NextAuth.js
DESCRIPTION: Example showing how to configure the Twitter authentication provider in NextAuth.js using environment variables for client credentials. Requires TWITTER_CLIENT_ID and TWITTER_CLIENT_SECRET to be set in environment variables.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Twitter({
    clientId: process.env.TWITTER_CLIENT_ID,
    clientSecret: process.env.TWITTER_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Installing NextAuth.js v4
DESCRIPTION: Command to upgrade to NextAuth.js version 4

LANGUAGE: bash
CODE:
npm install next-auth

----------------------------------------

TITLE: Configuring Zoom Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to configure the Zoom Provider in NextAuth.js. It imports the ZoomProvider and sets it up with the client ID and client secret from environment variables.

LANGUAGE: javascript
CODE:
import ZoomProvider from "next-auth/providers/zoom"
...
providers: [
  ZoomProvider({
    clientId: process.env.ZOOM_CLIENT_ID,
    clientSecret: process.env.ZOOM_CLIENT_SECRET
  })
}
...

----------------------------------------

TITLE: Configuring Discord Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Discord authentication provider in a NextAuth.js project. It uses environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Discord({
    clientId: process.env.DISCORD_CLIENT_ID,
    clientSecret: process.env.DISCORD_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring WordPress.com Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the WordPress.com provider in NextAuth.js. It uses environment variables for the client ID and client secret, which should be obtained from the WordPress.com developer portal.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.WordPress({
    clientId: process.env.WORDPRESS_CLIENT_ID,
    clientSecret: process.env.WORDPRESS_CLIENT_SECRET
  })
}
...

----------------------------------------

TITLE: Installing NextAuth Firebase Adapter Dependencies
DESCRIPTION: Command to install the NextAuth.js core package and experimental Firebase adapter using npm or yarn

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/firebase-adapter@experimental

----------------------------------------

TITLE: Setting Up NextAuth.js Provider in Next.js App
DESCRIPTION: Demonstrates how to set up the NextAuth.js Provider component in a Next.js application's _app.js file for efficient session management.

LANGUAGE: jsx
CODE:
import { Provider } from "next-auth/client"

export default function App({ Component, pageProps }) {
  return (
    <Provider session={pageProps.session}>
      <Component {...pageProps} />
    </Provider>
  )
}

----------------------------------------

TITLE: Initializing EVE Online Provider in NextAuth.js
DESCRIPTION: Basic configuration for setting up EVE Online authentication provider using environment variables for client credentials.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.EVEOnline({
    clientId: process.env.EVE_CLIENT_ID,
    clientSecret: process.env.EVE_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Implementing JWT Callbacks for EVE Online Character ID
DESCRIPTION: Example showing how to add the EVE Online Character ID to JWT tokens and sessions using NextAuth.js callbacks.

LANGUAGE: javascript
CODE:
...
options: {
  jwt: {
    secret: process.env.JWT_SECRET,
  },
  callbacks: {
    jwt: async (token, user, account, profile, isNewUser) => {
      if (profile) {
        token = {
          ...token,
          id: profile.CharacterID,
        }
      }
      return token;
    },
    session: async (session, token) => {
      if (token) {
        session.user.id = token.id;
      }
      return session;
    }
  }
}
...

----------------------------------------

TITLE: Firebase Configuration Object Example
DESCRIPTION: Sample Firebase configuration object containing required project credentials and settings for initialization

LANGUAGE: javascript
CODE:
const firebaseConfig = {
  apiKey: "AIzaSyDOCAbC123dEf456GhI789jKl01-MnO",
  authDomain: "myapp-project-123.firebaseapp.com",
  databaseURL: "https://myapp-project-123.firebaseio.com",
  projectId: "myapp-project-123",
  storageBucket: "myapp-project-123.appspot.com",
  messagingSenderId: "65211879809",
  appId: "1:65211879909:web:3ae38ef1cdcb2e01fe5f0c",
  measurementId: "G-8GSGZQ44ST",
}

----------------------------------------

TITLE: Implementing Custom Sign-in Page for WorkOS in Next.js
DESCRIPTION: This snippet provides a complete implementation of a custom sign-in page for WorkOS in Next.js. It includes email input, domain extraction, and handling of multiple providers.

LANGUAGE: jsx
CODE:
import { useState } from "react"
import { getProviders, signIn } from "next-auth/react"

export default function SignIn({ providers }) {
  const [email, setEmail] = useState("")

  return (
    <>
      {Object.values(providers).map((provider) => {
        if (provider.id === "workos") {
          return (
            <div key={provider.id}>
              <input
                type="email"
                value={email}
                placeholder="Email"
                onChange={(event) => setEmail(event.target.value)}
              />
              <button
                onClick={() =>
                  signIn(provider.id, undefined, {
                    domain: email.split("@")[1],
                  })
                }
              >
                Sign in with SSO
              </button>
            </div>
          )
        }

        return (
          <div key={provider.id}>
            <button onClick={() => signIn(provider.id)}>
              Sign in with {provider.name}
            </button>
          </div>
        )
      })}
    </>
  )
}

// This is the recommended way for Next.js 9.3 or newer
export async function getServerSideProps(context) {
  const providers = await getProviders()
  return {
    props: { providers },
  }
}

/*
// If older than Next.js 9.3
SignIn.getInitialProps = async () => {
  return {
    providers: await getProviders()
  }
}
*/

----------------------------------------

TITLE: Configuring FACEIT Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to configure the FACEIT authentication provider in NextAuth.js. It shows the basic setup using environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.FACEIT({
    clientId: process.env.FACEIT_CLIENT_ID,
    clientSecret: process.env.FACEIT_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Implementing NextAuth.js Database Adapter in JavaScript
DESCRIPTION: Complete example of a NextAuth.js database adapter implementation showing all required and optional methods. The adapter includes functions for user management, session handling, and verification requests. Each method returns null as a placeholder for actual database operations.

LANGUAGE: javascript
CODE:
export default function YourAdapter (config, options = {}) {
  return {
    async getAdapter (appOptions) {
      async createUser (profile) {
        return null
      },
      async getUser (id) {
        return null
      },
      async getUserByEmail (email) {
        return null
      },
      async getUserByProviderAccountId (
        providerId,
        providerAccountId
      ) {
        return null
      },
      async updateUser (user) {
        return null
      },
      async deleteUser (userId) {
        return null
      },
      async linkAccount (
        userId,
        providerId,
        providerType,
        providerAccountId,
        refreshToken,
        accessToken,
        accessTokenExpires
      ) {
        return null
      },
      async unlinkAccount (
        userId,
        providerId,
        providerAccountId
      ) {
        return null
      },
      async createSession (user) {
        return null
      },
      async getSession (sessionToken) {
        return null
      },
      async updateSession (
        session,
        force
      ) {
        return null
      },
      async deleteSession (sessionToken) {
        return null
      },
      async createVerificationRequest (
        identifier,
        url,
        token,
        secret,
        provider
      ) {
        return null
      },
      async getVerificationRequest (
        identifier,
        token,
        secret,
        provider
      ) {
        return null
      },
      async deleteVerificationRequest (
        identifier,
        token,
        secret,
        provider
      ) {
        return null
      }
    }
  }
}

----------------------------------------

TITLE: Importing NextAuth.js Middleware in JavaScript
DESCRIPTION: Shows how to import the withAuth middleware function from next-auth/middleware as either a default or named import.

LANGUAGE: javascript
CODE:
import withAuth from "next-auth/middleware"
// or
import { withAuth } from "next-auth/middleware"

----------------------------------------

TITLE: Basic Google Provider Setup in NextAuth.js
DESCRIPTION: Basic configuration example for setting up Google OAuth provider in NextAuth.js using environment variables for client credentials.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Google({
    clientId: process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Foursquare Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Foursquare authentication provider in NextAuth.js. It includes the necessary parameters such as clientId, clientSecret, and apiVersion. The apiVersion is a required parameter in 'YYYYMMDD' format to indicate readiness for API changes up to that date.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Foursquare({
    clientId: process.env.FOURSQUARE_CLIENT_ID,
    clientSecret: process.env.FOURSQUARE_CLIENT_SECRET,
    apiVersion: 'YYYYMMDD'
  })
]
...

----------------------------------------

TITLE: Custom VK API Version Configuration in NextAuth.js
DESCRIPTION: Advanced configuration for VK provider with custom API version specification for all endpoints. Demonstrates how to override default API version (5.126) with custom version settings.

LANGUAGE: javascript
CODE:
// pages/api/auth/[...nextauth].js

const apiVersion = "5.126"
...
providers: [
  Providers.VK({
    accessTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,
    requestTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,
    authorizationUrl:
      `https://oauth.vk.com/authorize?response_type=code&v=${apiVersion}`,
    profileUrl: `https://api.vk.com/method/users.get?fields=photo_100&v=${apiVersion}`,
  })
]
...

----------------------------------------

TITLE: Installing TypeORM Dependencies with NPM/Yarn
DESCRIPTION: Command to install required packages for using TypeORM adapter with NextAuth.js

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/typeorm-legacy-adapter typeorm

----------------------------------------

TITLE: Configuring Naver Provider in NextAuth.js
DESCRIPTION: Example code showing how to set up the Naver authentication provider in NextAuth.js configuration. Uses environment variables for client credentials and requires NaverProvider import from next-auth/providers.

LANGUAGE: javascript
CODE:
import NaverProvider from "next-auth/providers/naver";
...
providers: [
  NaverProvider({
    clientId: process.env.NAVER_CLIENT_ID,
    clientSecret: process.env.NAVER_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring FusionAuth Provider in NextAuth.js
DESCRIPTION: Example configuration for setting up FusionAuth authentication provider in NextAuth.js. Demonstrates how to initialize the provider with required parameters including domain, client credentials, and optional tenant ID for multi-tenancy support.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.FusionAuth({
    id: "fusionauth",
    name: "FusionAuth",
    domain:  process.env.FUSIONAUTH_DOMAIN,
    clientId: process.env.FUSIONAUTH_CLIENT_ID,
    clientSecret: process.env.FUSIONAUTH_SECRET,
    tenantId: process.env.FUSIONAUTH_TENANT_ID // Only required if you're using multi-tenancy
  }),
]
...

----------------------------------------

TITLE: Initializing Zoom Provider in NextAuth.js
DESCRIPTION: Example configuration for setting up Zoom OAuth provider in NextAuth.js using environment variables for client credentials. This code should be placed in the NextAuth configuration file.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Zoom({
    clientId: process.env.ZOOM_CLIENT_ID,
    clientSecret: process.env.ZOOM_CLIENT_SECRET
  })
}
...

----------------------------------------

TITLE: Customizing MikroORM Entities for NextAuth.js
DESCRIPTION: Example of how to create a custom User entity that implements the default NextAuth.js User interface. This snippet demonstrates the use of MikroORM decorators and relationships with Account and Session entities.

LANGUAGE: typescript
CODE:
import config from "config/mikro-orm.ts"
import {
  Cascade,
  Collection,
  Entity,
  OneToMany,
  PrimaryKey,
  Property,
  Unique,
} from "@mikro-orm/core"
import { defaultEntities } from "@next-auth/mikro-orm-adapter"

const { Account, Session } = defaultEntities

@Entity()
export class User implements defaultEntities.User {
  @PrimaryKey()
  id: string = randomUUID()

  @Property({ nullable: true })
  name?: string

  @Property({ nullable: true })
  @Unique()
  email?: string

  @Property({ type: "Date", nullable: true })
  emailVerified: Date | null = null

  @Property({ nullable: true })
  image?: string

  @OneToMany({
    entity: () => Session,
    mappedBy: (session) => session.user,
    hidden: true,
    orphanRemoval: true,
    cascade: [Cascade.ALL],
  })
  sessions = new Collection<Session>(this)

  @OneToMany({
    entity: () => Account,
    mappedBy: (account) => account.user,
    hidden: true,
    orphanRemoval: true,
    cascade: [Cascade.ALL],
  })
  accounts = new Collection<Account>(this)

  @Enum({ hidden: true })
  role = "ADMIN"
}

export default NextAuth({
  adapter: MikroOrmAdapter(config, { entities: { User } })
})

----------------------------------------

TITLE: Configuring Credentials Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Credentials provider in NextAuth.js. It includes options for custom credentials fields and an authorize function for user validation.

LANGUAGE: javascript
CODE:
import CredentialsProvider from 'next-auth/providers/credentials';
...
providers: [
  CredentialsProvider({
    // The name to display on the sign in form (e.g. 'Sign in with...')
    name: 'Credentials',
    // The credentials is used to generate a suitable form on the sign in page.
    // You can specify whatever fields you are expecting to be submitted.
    // e.g. domain, username, password, 2FA token, etc.
    credentials: {
      username: { label: "Username", type: "text", placeholder: "jsmith" },
      password: {  label: "Password", type: "password" }
    },
    async authorize(credentials, req) {
      // Add logic here to look up the user from the credentials supplied
      const user = { id: 1, name: 'J Smith', email: 'jsmith@example.com' }

      if (user) {
        // Any object returned will be saved in `user` property of the JWT
        return user
      } else {
        // If you return null or false then the credentials will be rejected
        return null
        // You can also Reject this callback with an Error or with a URL:
        // throw new Error('error message') // Redirect to error page
        // throw '/path/to/redirect'        // Redirect to a URL
      }
    }
  })
]
...

----------------------------------------

TITLE: Configuring Kakao Provider in NextAuth.js
DESCRIPTION: Example configuration for integrating Kakao OAuth provider with NextAuth.js. Requires environment variables for client ID and secret obtained from the Kakao Developer Console.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Kakao({
    clientId: process.env.KAKAO_CLIENT_ID,
    clientSecret: process.env.KAKAO_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Setting Custom Sign-In Page in NextAuth.js Configuration
DESCRIPTION: This code shows how to specify a custom sign-in page in the NextAuth.js configuration. It's necessary for implementing WorkOS-specific login functionality.

LANGUAGE: javascript
CODE:
...
  pages: {
    signIn: '/auth/signin',
  }

----------------------------------------

TITLE: Configuring Azure AD Environment Variables
DESCRIPTION: Environment variable configuration for Azure AD authentication including client ID, client secret, and tenant ID settings.

LANGUAGE: plaintext
CODE:
AZURE_AD_CLIENT_ID=<copy Application (client) ID here>
AZURE_AD_CLIENT_SECRET=<copy generated client secret value here>
AZURE_AD_TENANT_ID=<copy the tenant id here>

----------------------------------------

TITLE: Configuring GitLab Provider in NextAuth.js
DESCRIPTION: Implementation example showing how to configure the GitLab authentication provider in NextAuth.js using environment variables for client credentials. Requires setting up GitLab OAuth application and enabling read_user scope for email access.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.GitLab({
    clientId: process.env.GITLAB_CLIENT_ID,
    clientSecret: process.env.GITLAB_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring LinkedIn Provider in NextAuth.js
DESCRIPTION: Example code showing how to configure the LinkedIn authentication provider in NextAuth.js. Requires LinkedIn client ID and client secret from the LinkedIn Developer Console.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.LinkedIn({
    clientId: process.env.LINKEDIN_CLIENT_ID,
    clientSecret: process.env.LINKEDIN_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Implementing Custom Client Session Handling in Next.js
DESCRIPTION: Provides an alternative approach to client-side session handling in Next.js, allowing for protected routes with custom loading and unauthorized states.

LANGUAGE: jsx
CODE:
export default function App({ Component, pageProps }) {
  return (
    <Provider session={pageProps.session}>
      {Component.auth ? (
        <Auth>
          <Component {...pageProps} />
        </Auth>
      ) : (
        <Component {...pageProps} />
      )}
    </Provider>
  )
}

function Auth({ children }) {
  const [session, loading] = useSession()
  const isUser = !!session?.user
  React.useEffect(() => {
    if (loading) return // Do nothing while loading
    if (!isUser) signIn() // If not authenticated, force log in
  }, [isUser, loading])

  if (isUser) {
    return children
  }

  // Session is being fetched, or no user.
  // If no user, useEffect() will redirect.
  return <div>Loading...</div>
}

----------------------------------------

TITLE: Host File Configuration for Linux/macOS
DESCRIPTION: Command to add local domain mapping to hosts file on Linux/macOS systems.

LANGUAGE: bash
CODE:
sudo echo '127.0.0.1 dev.example.com' >> /etc/hosts

----------------------------------------

TITLE: Configuring Environment Variables for Azure AD B2C
DESCRIPTION: Environment variable configuration for Azure AD B2C authentication setup including tenant name, client ID, client secret, and user flow.

LANGUAGE: plaintext
CODE:
AZURE_AD_B2C_TENANT_NAME=<copy the B2C tenant name here from Step 1>
AZURE_AD_B2C_CLIENT_ID=<copy Application (client) ID here from Step 2>
AZURE_AD_B2C_CLIENT_SECRET=<copy generated secret value here from Step 2>
AZURE_AD_B2C_PRIMARY_USER_FLOW=<copy the name of the signin user flow you created from Step 3>

----------------------------------------

TITLE: Configuring Mailchimp Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to configure the Mailchimp provider in NextAuth.js. It shows the setup within the providers array, using environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Mailchimp({
    clientId: process.env.MAILCHIMP_CLIENT_ID,
    clientSecret: process.env.MAILCHIMP_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Creating Self-Signed SSL Certificate for Local Development
DESCRIPTION: This bash command generates a self-signed SSL certificate for localhost, which is required for testing Apple Sign-In locally.

LANGUAGE: bash
CODE:
openssl req -x509 -out localhost.crt -keyout localhost.key \
  -newkey rsa:2048 -nodes -sha256 \
  -subj '/CN=localhost' -extensions EXT -config <( \
   printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")

----------------------------------------

TITLE: Configuring Bungie Provider in NextAuth.js
DESCRIPTION: Example of how to set up the Bungie provider in NextAuth.js, including client ID, secret, and custom headers. This snippet demonstrates the basic configuration needed to integrate Bungie authentication.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Bungie({
    clientId: process.env.BUNGIE_CLIENT_ID,
    clientSecret: process.env.BUNGIE_SECRET,
    headers: {
      'X-API-Key': provess.env.BUNGIE_API_KEY
    }
  }),
]
...

----------------------------------------

TITLE: Configuring Medium Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Medium provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Medium({
    clientId: process.env.MEDIUM_CLIENT_ID,
    clientSecret: process.env.MEDIUM_CLIENT_SECRET
  })
}
...

----------------------------------------

TITLE: Generating JWT for Apple Sign-In Pre-generated Secret
DESCRIPTION: This Node.js script generates a JSON Web Token (JWT) for use as a pre-generated secret in Apple Sign-In configuration. It requires the Apple ID, key ID, team ID, and private key file.

LANGUAGE: javascript
CODE:
const jwt = require("jsonwebtoken")
const fs = require("fs")

const appleId = "myapp.example.com"
const keyId = ""
const teamId = ""
const privateKey = fs.readFileSync("path/to/key")

const secret = jwt.sign(
  {
    iss: teamId,
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + 86400 * 180, // 6 months
    aud: "https://appleid.apple.com",
    sub: appleId,
  },
  privateKey,
  {
    algorithm: "ES256",
    keyid: keyId,
  }
)

console.log(secret)

----------------------------------------

TITLE: Configuring Yandex Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Yandex authentication provider in NextAuth.js. It shows the import statement and the configuration object within the providers array, using environment variables for the client ID and secret.

LANGUAGE: javascript
CODE:
import YandexProvider from "next-auth/providers/yandex";
...
providers: [
  YandexProvider({
    clientId: process.env.YANDEX_CLIENT_ID,
    clientSecret: process.env.YANDEX_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Naver Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Naver authentication provider in a NextAuth.js project. It shows the basic configuration using environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Naver({
    clientId: process.env.NAVER_CLIENT_ID,
    clientSecret: process.env.NAVER_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Prisma Schema Definition
DESCRIPTION: Complete Prisma schema configuration defining the database structure for authentication, including Account, Session, User, and VerificationRequest models

LANGUAGE: json
CODE:
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

----------------------------------------

TITLE: HTTPS Development Server Setup
DESCRIPTION: Node.js server configuration for local HTTPS development with Next.js using generated SSL certificates.

LANGUAGE: javascript
CODE:
const { createServer } = require("https")
const { parse } = require("url")
const next = require("next")
const fs = require("fs")

const dev = process.env.NODE_ENV !== "production"
const app = next({ dev })
const handle = app.getRequestHandler()

const httpsOptions = {
  key: fs.readFileSync("./certificates/localhost.key"),
  cert: fs.readFileSync("./certificates/localhost.crt"),
}

app.prepare().then(() => {
  createServer(httpsOptions, (req, res) => {
    const parsedUrl = parse(req.url, true)
    handle(req, res, parsedUrl)
  }).listen(3000, (err) => {
    if (err) throw err
    console.log("> Ready on https://localhost:3000")
  })
})

----------------------------------------

TITLE: Configuring WorkOS Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the WorkOS provider in the NextAuth.js configuration. It includes the necessary environment variables for client ID and API key.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.WorkOS({
    clientId: process.env.WORKOS_CLIENT_ID,
    clientSecret: process.env.WORKOS_API_KEY,
  }),
],
...

----------------------------------------

TITLE: Configuring Twitch Provider in NextAuth.js
DESCRIPTION: Example code showing how to set up the Twitch authentication provider in NextAuth.js using environment variables for client credentials.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Twitch({
    clientId: process.env.TWITCH_CLIENT_ID,
    clientSecret: process.env.TWITCH_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Installing NextAuth MongoDB Dependencies
DESCRIPTION: Command to install required packages including next-auth, MongoDB adapter, and MongoDB client

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/mongodb-adapter mongodb

----------------------------------------

TITLE: Configuring Zoho Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Zoho Provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID and client secret.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Zoho({
    clientId: process.env.ZOHO_CLIENT_ID,
    clientSecret: process.env.ZOHO_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Implementing NextAuth.js Session Render Prop for React Class Components
DESCRIPTION: This snippet demonstrates how to use a render prop pattern to provide NextAuth.js session information to class components. It creates a UseSession component that exposes session and loading state to its children.

LANGUAGE: javascript
CODE:
import { useSession } from "next-auth/client"

const UseSession = ({ children }) => {
  const [session, loading] = useSession()
  return children({ session, loading })
}

// Usage
class ClassComponent extends React.Component {
  render() {
    return (
      <UseSession>
        {({ session, loading }) => (
          <pre>{JSON.stringify(session, null, 2)}</pre>
        )}
      </UseSession>
    )
  }
}

----------------------------------------

TITLE: Customizing Sequelize Models
DESCRIPTION: Example demonstrating how to extend default NextAuth.js models with custom fields using Sequelize model definitions.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import SequelizeAdapter, { models } from "@next-auth/sequelize-adapter"
import Sequelize, { DataTypes } from "sequelize"

const sequelize = new Sequelize("sqlite::memory:")

export default NextAuth({
  providers: [],
  adapter: SequelizeAdapter(sequelize, {
    models: {
      User: sequelize.define("user", {
        ...models.User,
        phoneNumber: DataTypes.STRING,
      }),
    },
  }),
})

----------------------------------------

TITLE: Installing NextAuth and DynamoDB Adapter
DESCRIPTION: Command to install the required packages for using NextAuth with the DynamoDB Adapter.

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/dynamodb-adapter@canary

----------------------------------------

TITLE: Configuring Okta Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Okta provider in NextAuth.js. It uses environment variables for the client ID, client secret, and domain to configure the Okta provider securely.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Okta({
    clientId: process.env.OKTA_CLIENT_ID,
    clientSecret: process.env.OKTA_CLIENT_SECRET,
    domain: process.env.OKTA_DOMAIN
  })
]
...

----------------------------------------

TITLE: Basic Azure AD B2C Provider Configuration
DESCRIPTION: Basic NextAuth.js configuration for Azure AD B2C provider with minimal scope requirements for ID Token authentication.

LANGUAGE: javascript
CODE:
import AzureADB2CProvider from "next-auth/providers/azure-ad-b2c";
...
providers: [
  AzureADB2CProvider({
    tenantId: process.env.AZURE_AD_B2C_TENANT_NAME,
    clientId: process.env.AZURE_AD_B2C_CLIENT_ID,
    clientSecret: process.env.AZURE_AD_B2C_CLIENT_SECRET,
    primaryUserFlow: process.env.AZURE_AD_B2C_PRIMARY_USER_FLOW,
    authorization: { params: { scope: "offline_access openid" } },
  }),
]
...

----------------------------------------

TITLE: Installing Next-Auth and FaunaDB Adapter
DESCRIPTION: Command to install next-auth and the FaunaDB adapter using npm.

LANGUAGE: javascript
CODE:
npm install next-auth @next-auth/fauna-adapter@canary

----------------------------------------

TITLE: Signout Action Handler
DESCRIPTION: POST endpoint that processes the sign out action. Requires CSRF token from /api/auth/csrf endpoint for security.

LANGUAGE: http
CODE:
POST /api/auth/signout

----------------------------------------

TITLE: Configuring Mail.ru Provider in NextAuth.js
DESCRIPTION: Example code showing how to set up and configure the Mail.ru authentication provider in NextAuth.js using environment variables for client credentials.

LANGUAGE: javascript
CODE:
import MailRuProvider from "next-auth/providers/mailru";
...
providers: [
  MailRuProvider({
    clientId: process.env.MAILRU_CLIENT_ID,
    clientSecret: process.env.MAILRU_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Creating FaunaDB Schema for Next-Auth
DESCRIPTION: FaunaDB schema creation commands for setting up the necessary collections and indexes required by the next-auth FaunaDB adapter.

LANGUAGE: javascript
CODE:
CreateCollection({ name: "accounts" })
CreateCollection({ name: "sessions" })
CreateCollection({ name: "users" })
CreateCollection({ name: "verification_requests" })
CreateIndex({
  name: "account_by_provider_account_id",
  source: Collection("accounts"),
  unique: true,
  terms: [
    { field: ["data", "providerId"] },
    { field: ["data", "providerAccountId"] },
  ],
})
CreateIndex({
  name: "session_by_token",
  source: Collection("sessions"),
  unique: true,
  terms: [{ field: ["data", "sessionToken"] }],
})
CreateIndex({
  name: "user_by_email",
  source: Collection("users"),
  unique: true,
  terms: [{ field: ["data", "email"] }],
})
CreateIndex({
  name: "verification_request_by_token",
  source: Collection("verification_requests"),
  unique: true,
  terms: [{ field: ["data", "token"] }, { field: ["data", "identifier"] }],
})

----------------------------------------

TITLE: Session Information Retrieval
DESCRIPTION: GET endpoint that returns the current session object or empty object if no session exists. Session content is configurable via callback.

LANGUAGE: http
CODE:
GET /api/auth/session

----------------------------------------

TITLE: Configuring Osu Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Osu Provider in NextAuth.js. It shows the import statement and the provider configuration object, which includes the client ID and client secret obtained from the Osu! OAuth application settings.

LANGUAGE: javascript
CODE:
import OsuProvider from "next-auth/providers/osu";
...
providers: [
  OsuProvider({
    clientId: process.env.OSU_CLIENT_ID,
    clientSecret: process.env.OSU_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Custom Model Mapping Configuration
DESCRIPTION: Configuration for custom model names in Prisma adapter

LANGUAGE: javascript
CODE:
adapter: Adapters.Prisma.Adapter({
  prisma,
  modelMapping: {
    User: 'user',
    Account: 'account',
    Session: 'session',
    VerificationRequest: 'verificationRequest'
  }
})

----------------------------------------

TITLE: Signout Page Display
DESCRIPTION: GET endpoint that displays the sign out page interface.

LANGUAGE: http
CODE:
GET /api/auth/signout

----------------------------------------

TITLE: Using TypeScript with useSession Hook in Next.js Component
DESCRIPTION: Demonstrates how to use the useSession hook from NextAuth.js in a Next.js component with TypeScript, ensuring type safety for the session object.

LANGUAGE: typescript
CODE:
import { useSession } from "next-auth/react"

export default function IndexPage() {
  // `session` will match the returned value of `callbacks.session()` from `NextAuth()`
  const { data: session } = useSession()

  return (
    // Your component
  )
}

----------------------------------------

TITLE: Creating NextAuth.js MySQL Schema
DESCRIPTION: SQL schema for setting up the required tables and indexes for NextAuth.js authentication system. Creates tables for accounts, sessions, users, and verification requests with UTC timestamp handling and 6-digit precision. Includes creation of necessary unique and non-unique indexes for optimal query performance.

LANGUAGE: sql
CODE:
CREATE TABLE accounts
  (
    id                   INT NOT NULL AUTO_INCREMENT,
    compound_id          VARCHAR(255) NOT NULL,
    user_id              INTEGER NOT NULL,
    provider_type        VARCHAR(255) NOT NULL,
    provider_id          VARCHAR(255) NOT NULL,
    provider_account_id  VARCHAR(255) NOT NULL,
    refresh_token        TEXT,
    access_token         TEXT,
    access_token_expires TIMESTAMP(6),
    created_at           TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at           TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    PRIMARY KEY (id)
  );

CREATE TABLE sessions
  (
    id            INT NOT NULL AUTO_INCREMENT,
    user_id       INTEGER NOT NULL,
    expires       TIMESTAMP(6) NOT NULL,
    session_token VARCHAR(255) NOT NULL,
    access_token  VARCHAR(255) NOT NULL,
    created_at    TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at    TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    PRIMARY KEY (id)
  );

CREATE TABLE users
  (
    id             INT NOT NULL AUTO_INCREMENT,
    name           VARCHAR(255),
    email          VARCHAR(255),
    email_verified TIMESTAMP(6),
    image          VARCHAR(255),
    created_at     TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at     TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    PRIMARY KEY (id)
  );

CREATE TABLE verification_requests
  (
    id         INT NOT NULL AUTO_INCREMENT,
    identifier VARCHAR(255) NOT NULL,
    token      VARCHAR(255) NOT NULL,
    expires    TIMESTAMP(6) NOT NULL,
    created_at TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    updated_at TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
    PRIMARY KEY (id)
  );

CREATE UNIQUE INDEX compound_id
  ON accounts(compound_id);

CREATE INDEX provider_account_id
  ON accounts(provider_account_id);

CREATE INDEX provider_id
  ON accounts(provider_id);

CREATE INDEX user_id
  ON accounts(user_id);

CREATE UNIQUE INDEX session_token
  ON sessions(session_token);

CREATE UNIQUE INDEX access_token
  ON sessions(access_token);

CREATE UNIQUE INDEX email
  ON users(email);

CREATE UNIQUE INDEX token
  ON verification_requests(token);

----------------------------------------

TITLE: Configuring Default Adapter with SQLite in NextAuth.js
DESCRIPTION: This snippet demonstrates how to explicitly configure the default adapter (which is TypeORM) with a SQLite database in NextAuth.js. It uses the Adapters.Default method to set up an in-memory SQLite database with synchronization enabled.

LANGUAGE: javascript
CODE:
adapter: Adapters.Default({
  type: "sqlite",
  database: ":memory:",
  synchronize: true,
})

----------------------------------------

TITLE: Configuring OneLogin Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the OneLogin Provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID, client secret, and issuer.

LANGUAGE: javascript
CODE:
import OneLoginProvider from "next-auth/providers/onelogin";
...
providers: [
  OneLoginProvider({
    clientId: process.env.ONELOGIN_CLIENT_ID,
    clientSecret: process.env.ONELOGIN_CLIENT_SECRET,
    issuer: process.env.ONELOGIN_ISSUER
  })
]
...

----------------------------------------

TITLE: Configuring Default SQLite Database in NextAuth.js
DESCRIPTION: This snippet shows the default configuration for a SQLite database in NextAuth.js using the TypeORM Adapter. It sets up an in-memory SQLite database with synchronization enabled.

LANGUAGE: javascript
CODE:
database: {
  type: 'sqlite',
  database: ':memory:',
  synchronize: true
}

----------------------------------------

TITLE: Configuring Next-Auth with PouchDB Adapter
DESCRIPTION: Example configuration for setting up Next-Auth with PouchDB Adapter in a Next.js application. This includes setting up PouchDB with plugins, initializing the database, and configuring NextAuth with Google provider and PouchDB adapter.

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import Providers from "next-auth/providers"
import { PouchDBAdapter } from "@next-auth/pouchdb-adapter"
import PouchDB from "pouchdb"

// Setup your PouchDB instance and database
PouchDB.plugin(require("pouchdb-adapter-leveldb")) // Any other adapter
  .plugin(require("pouchdb-find")) // Don't forget the `pouchdb-find` plugin

const pouchdb = new PouchDB("auth_db", { adapter: "leveldb" })

// For more information on each option (and a full list of options) go to
// https://next-auth.js.org/configuration/options
export default NextAuth({
  // https://next-auth.js.org/configuration/providers
  providers: [
    Providers.Google({
      clientId: process.env.GOOGLE_ID,
      clientSecret: process.env.GOOGLE_SECRET,
    }),
  ],
  adapter: PouchDBAdapter(pouchdb),
  // ...
})

----------------------------------------

TITLE: Configuring Bungie Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Bungie authentication provider in NextAuth.js. It includes the necessary configuration options such as clientId, clientSecret, and custom headers.

LANGUAGE: javascript
CODE:
import BungieProvider from "next-auth/providers/bungie";
...
providers: [
  BungieProvider({
    clientId: process.env.BUNGIE_CLIENT_ID,
    clientSecret: process.env.BUNGIE_SECRET,
    headers: {
      "X-API-Key": provess.env.BUNGIE_API_KEY
    }
  }),
]
...

----------------------------------------

TITLE: Default Key Prefix Options for Upstash Redis Adapter
DESCRIPTION: This code snippet shows the default values for key prefixes used by the Upstash Redis Adapter. These can be customized when using multiple apps with a single Upstash Redis instance.

LANGUAGE: javascript
CODE:
const defaultOptions = {
  baseKeyPrefix: "",
  accountKeyPrefix: "user:account:",
  accountByUserIdPrefix: "user:account:by-user-id:",
  emailKeyPrefix: "user:email:",
  sessionKeyPrefix: "user:session:",
  sessionByUserIdKeyPrefix: "user:session:by-user-id:",
  userKeyPrefix: "user:",
  verificationTokenKeyPrefix: "user:token:",
}

----------------------------------------

TITLE: Implementing Redirect Callback in NextAuth.js
DESCRIPTION: Callback for handling URL redirections during authentication flows. Validates and controls allowed redirect URLs.

LANGUAGE: javascript
CODE:
callbacks: {
  async redirect(url, baseUrl) {
    return url.startsWith(baseUrl)
      ? url
      : baseUrl
  }
}

----------------------------------------

TITLE: Installing NextAuth with Dgraph Adapter
DESCRIPTION: Command to install the required NextAuth and Dgraph adapter packages

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/dgraph-adapter

----------------------------------------

TITLE: Creating Credentials Sign-in Form with NextAuth.js
DESCRIPTION: This example demonstrates how to create a custom credentials-based sign-in form using NextAuth.js. It includes handling CSRF token and submitting the form to the appropriate callback endpoint.

LANGUAGE: jsx
CODE:
import { getCsrfToken } from "next-auth/react"

export default function SignIn({ csrfToken }) {
  return (
    <form method="post" action="/api/auth/callback/credentials">
      <input name="csrfToken" type="hidden" defaultValue={csrfToken} />
      <label>
        Username
        <input name="username" type="text" />
      </label>
      <label>
        Password
        <input name="password" type="password" />
      </label>
      <button type="submit">Sign in</button>
    </form>
  )
}

// This is the recommended way for Next.js 9.3 or newer
export async function getServerSideProps(context) {
  return {
    props: {
      csrfToken: await getCsrfToken(context),
    },
  }
}

/*
// If older than Next.js 9.3
SignIn.getInitialProps = async (context) => {
  return {
    csrfToken: await getCsrfToken(context)
  }
}
*/

----------------------------------------

TITLE: Creating NextAuth.js Tables and Indexes in PostgreSQL
DESCRIPTION: SQL schema that creates the core tables and indexes required for NextAuth.js authentication. All timestamp fields are stored as TIMESTAMPTZ in UTC. The schema includes tables for managing user accounts, sessions, user profiles, and verification requests, with appropriate indexes for optimal query performance.

LANGUAGE: sql
CODE:
CREATE TABLE accounts
  (
    id                   SERIAL,
    compound_id          VARCHAR(255) NOT NULL,
    user_id              INTEGER NOT NULL,
    provider_type        VARCHAR(255) NOT NULL,
    provider_id          VARCHAR(255) NOT NULL,
    provider_account_id  VARCHAR(255) NOT NULL,
    refresh_token        TEXT,
    access_token         TEXT,
    access_token_expires TIMESTAMPTZ,
    created_at           TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at           TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
  );

CREATE TABLE sessions
  (
    id            SERIAL,
    user_id       INTEGER NOT NULL,
    expires       TIMESTAMPTZ NOT NULL,
    session_token VARCHAR(255) NOT NULL,
    access_token  VARCHAR(255) NOT NULL,
    created_at    TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at    TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
  );

CREATE TABLE users
  (
    id             SERIAL,
    name           VARCHAR(255),
    email          VARCHAR(255),
    email_verified TIMESTAMPTZ,
    image          TEXT,
    created_at     TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at     TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
  );

CREATE TABLE verification_requests
  (
    id         SERIAL,
    identifier VARCHAR(255) NOT NULL,
    token      VARCHAR(255) NOT NULL,
    expires    TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
  );

CREATE UNIQUE INDEX compound_id
  ON accounts(compound_id);

CREATE INDEX provider_account_id
  ON accounts(provider_account_id);

CREATE INDEX provider_id
  ON accounts(provider_id);

CREATE INDEX user_id
  ON accounts(user_id);

CREATE UNIQUE INDEX session_token
  ON sessions(session_token);

CREATE UNIQUE INDEX access_token
  ON sessions(access_token);

CREATE UNIQUE INDEX email
  ON users(email);

CREATE UNIQUE INDEX token
  ON verification_requests(token);

----------------------------------------

TITLE: Configuring Custom Sign-in Page in NextAuth.js
DESCRIPTION: This snippet shows how to configure a custom sign-in page in NextAuth.js API route. It sets the path for the custom sign-in page.

LANGUAGE: javascript
CODE:
...
  pages: {
    signIn: "/auth/signin",
  }

----------------------------------------

TITLE: Configuring OAuth Callback URL Format
DESCRIPTION: Shows the standard format for OAuth callback/redirect URLs in NextAuth.js applications.

LANGUAGE: plaintext
CODE:
[origin]/api/auth/callback/[provider]

----------------------------------------

TITLE: Configuring Cypress for NextAuth.js Testing
DESCRIPTION: Basic Cypress configuration file specifying the base URL and disabling Chrome web security for external domain access.

LANGUAGE: json
CODE:
{
  "baseUrl": "http://localhost:3000",
  "chromeWebSecurity": false
}

----------------------------------------

TITLE: Configuring NextAuth.js with TypeScript in API Route
DESCRIPTION: Demonstrates how to set up NextAuth.js in a TypeScript environment within an API route. This snippet shows the usage of callbacks and session handling with proper typing.

LANGUAGE: typescript
CODE:
import NextAuth from "next-auth"

export default NextAuth({
  callbacks: {
    session(session, token) {
      return session // The type here should match the one returned in `useSession()`
    },
  },
})

----------------------------------------

TITLE: Environment Variables Setup for OAuth Provider
DESCRIPTION: Example of setting up environment variables for Twitter OAuth credentials.

LANGUAGE: plaintext
CODE:
TWITTER_ID=YOUR_TWITTER_CLIENT_ID
TWITTER_SECRET=YOUR_TWITTER_CLIENT_SECRET

----------------------------------------

TITLE: Creating SSL Certificate for Local HTTPS Development
DESCRIPTION: Command to generate a self-signed SSL certificate for local development. This is necessary because Bungie requires HTTPS, even for development environments.

LANGUAGE: bash
CODE:
openssl req -x509 -out localhost.crt -keyout localhost.key \
  -newkey rsa:2048 -nodes -sha256 \
  -subj '/CN=localhost' -extensions EXT -config <( \
   printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")

----------------------------------------

TITLE: Extending NextAuth.js Session Type with TypeScript Module Augmentation
DESCRIPTION: Shows how to extend the Session interface from NextAuth.js using TypeScript module augmentation. This allows for adding custom properties to the session object across the application.

LANGUAGE: typescript
CODE:
import NextAuth from "next-auth"

declare module "next-auth" {
  /**
   * Returned by `useSession`, `getSession` and received as a prop on the `Provider` React Context
   */
  interface Session {
    user: {
      /** The user's postal address. */
      address: string
    }
  }
}

----------------------------------------

TITLE: Configuring Freshbooks Provider in NextAuth.js
DESCRIPTION: Example of how to initialize and configure the Freshbooks authentication provider in NextAuth.js. Requires clientId and clientSecret from Freshbooks developer portal.

LANGUAGE: javascript
CODE:
import FreshbooksProvider from "next-auth/providers/freshbooks";
...
providers: [
  FreshbooksProvider({
    clientId: process.env.FRESHBOOKS_CLIENT_ID,
    clientSecret: process.env.FRESHBOOKS_CLIENT_SECRET,
  })
]
...

----------------------------------------

TITLE: Securing API Routes with getToken for JWT in Next.js
DESCRIPTION: This snippet shows how to use the getToken helper function to access and verify JSON Web Tokens in API routes. It requires setting up the SECRET environment variable.

LANGUAGE: javascript
CODE:
import jwt from "next-auth/jwt"

const secret = process.env.SECRET

export default async (req, res) => {
  const token = await jwt.getToken({ req, secret })
  if (token) {
    // Signed in
    console.log("JSON Web Token", JSON.stringify(token, null, 2))
  } else {
    // Not Signed in
    res.status(401)
  }
  res.end()
}

----------------------------------------

TITLE: Configuring Facebook Provider in NextAuth.js
DESCRIPTION: Example setup of Facebook authentication provider in NextAuth.js configuration. Demonstrates how to initialize the provider with client credentials stored in environment variables.

LANGUAGE: javascript
CODE:
import FacebookProvider from "next-auth/providers/facebook";
...
providers: [
  FacebookProvider({
    clientId: process.env.FACEBOOK_CLIENT_ID,
    clientSecret: process.env.FACEBOOK_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Kakao Provider in NextAuth.js
DESCRIPTION: Example showing how to set up the Kakao authentication provider in NextAuth.js using environment variables for client credentials. Requires KAKAO_CLIENT_ID and KAKAO_CLIENT_SECRET to be set in environment variables.

LANGUAGE: javascript
CODE:
import KakaoProvider from "next-auth/providers/kakao";
...
providers: [
  KakaoProvider({
    clientId: process.env.KAKAO_CLIENT_ID,
    clientSecret: process.env.KAKAO_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring CockroachDB Database in NextAuth.js
DESCRIPTION: Example of configuring a CockroachDB database connection in NextAuth.js using a connection string.

LANGUAGE: javascript
CODE:
database: "postgres://username:password@127.0.0.1:26257/database_name"

----------------------------------------

TITLE: Configuring Auth0 Provider in NextAuth.js
DESCRIPTION: This snippet demonstrates how to set up the Auth0 provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID, client secret, and issuer URL.

LANGUAGE: javascript
CODE:
import Auth0Provider from "next-auth/providers/auth0";
...
providers: [
  Auth0Provider({
    clientId: process.env.AUTH0_CLIENT_ID,
    clientSecret: process.env.AUTH0_CLIENT_SECRET,
    issuer: process.env.AUTH0_ISSUER
  })
]
...

----------------------------------------

TITLE: Configuring Medium Provider in NextAuth.js
DESCRIPTION: Example code showing how to initialize and configure the Medium authentication provider in NextAuth.js. Requires Medium client ID and secret from the Medium applications dashboard.

LANGUAGE: javascript
CODE:
import MediumProvider from "next-auth/providers/medium";
...
providers: [
  MediumProvider({
    clientId: process.env.MEDIUM_CLIENT_ID,
    clientSecret: process.env.MEDIUM_CLIENT_SECRET
  })
}
...

----------------------------------------

TITLE: Configuring CockroachDB with Self-Signed Certificate in NextAuth.js
DESCRIPTION: Demonstrates how to configure a CockroachDB connection with a self-signed certificate in NextAuth.js.

LANGUAGE: javascript
CODE:
database: {
    type: "cockroachdb",
    host: process.env.DATABASE_HOST,
    port: 26257,
    username: process.env.DATABASE_USER,
    password: process.env.DATABASE_PASSWORD,
    database: process.env.DATABASE_NAME,
    ssl: {
      rejectUnauthorized: false,
      ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString()
    },
  },

----------------------------------------

TITLE: Configuring Pipedrive Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Pipedrive authentication provider in NextAuth.js. It imports the PipedriveProvider and configures it with client ID and client secret environment variables.

LANGUAGE: javascript
CODE:
import PipedriveProvider from "next-auth/providers/pipedrive";
...
providers: [
  PipedriveProvider({
    clientId: process.env.PIPEDRIVE_CLIENT_ID,
    clientSecret: process.env.PIPEDRIVE_CLIENT_SECRET,
  })
]
...

----------------------------------------

TITLE: Starting the NextAuth.js Documentation Development Server
DESCRIPTION: Command to start the local development server for the NextAuth.js documentation site.

LANGUAGE: bash
CODE:
$ npm start

----------------------------------------

TITLE: Configuring Custom DynamoDB Schema for NextAuth
DESCRIPTION: JavaScript code snippet demonstrating how to configure a custom DynamoDB table schema for use with NextAuth.

LANGUAGE: javascript
CODE:
const adapter = DynamoDBAdapter(client, {
  tableName: "custom-table-name",
  partitionKey: "custom-pk",
  sortKey: "custom-sk",
  indexName: "custom-index-name",
  indexPartitionKey: "custom-index-pk",
  indexSortKey: "custom-index-sk",
})

----------------------------------------

TITLE: Enabling OAuth 2.0 for Twitter Provider in NextAuth.js
DESCRIPTION: This code snippet shows how to opt-in to Twitter's OAuth 2.0 support in NextAuth.js. It adds the 'version' parameter to the TwitterProvider configuration.

LANGUAGE: javascript
CODE:
TwitterProvider({
  clientId: process.env.TWITTER_ID,
  clientSecret: process.env.TWITTER_SECRET,
  version: "2.0", // opt-in to Twitter OAuth 2.0
})

----------------------------------------

TITLE: Cloning the NextAuth.js Documentation Repository
DESCRIPTION: Command to clone the NextAuth.js documentation repository from GitHub.

LANGUAGE: bash
CODE:
$ git clone https://github.com/nextauthjs/docs.git

----------------------------------------

TITLE: Configuring Auth0 Provider in NextAuth.js
DESCRIPTION: Example showing how to set up the Auth0 provider in NextAuth.js using environment variables for client ID, secret, and domain. The provider should be configured as a Regular Web Application in Auth0 dashboard.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Auth0({
    clientId: process.env.AUTH0_CLIENT_ID,
    clientSecret: process.env.AUTH0_CLIENT_SECRET,
    domain: process.env.AUTH0_DOMAIN
  })
]
...

----------------------------------------

TITLE: Installing Cypress Dependencies
DESCRIPTION: Command to install required Cypress packages including cypress-social-logins for social authentication testing and testing-library/cypress for DOM testing utilities.

LANGUAGE: bash
CODE:
npm install --save-dev cypress cypress-social-logins @testing-library/cypress

----------------------------------------

TITLE: Configuring Custom Entities with TypeORM Adapter
DESCRIPTION: Implementation of custom entities in NextAuth.js configuration

LANGUAGE: javascript
CODE:
import NextAuth from "next-auth"
import { TypeORMLegacyAdapter } from "@next-auth/typeorm-legacy-adapter"
import * as entities from "lib/entities"

export default NextAuth({
  adapter: TypeORMLegacyAdapter("yourconnectionstring", { entities }),
  ...
})

----------------------------------------

TITLE: Configuring Atlassian Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Atlassian provider in NextAuth.js. It includes the clientId, clientSecret, and scope options for authentication.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Atlassian({
    clientId: process.env.ATLASSIAN_CLIENT_ID,
    clientSecret: process.env.ATLASSIAN_CLIENT_SECRET,
    scope: 'write:jira-work read:jira-work read:jira-user offline_access read:me'
  })
]
...

----------------------------------------

TITLE: Configuring Cypress Social Login Plugin
DESCRIPTION: Plugin configuration for cypress-social-logins to enable Google authentication testing.

LANGUAGE: javascript
CODE:
const { GoogleSocialLogin } = require("cypress-social-logins").plugins

module.exports = (on, config) => {
  on("task", {
    GoogleSocialLogin: GoogleSocialLogin,
  })
}

----------------------------------------

TITLE: Creating Community Edition Specific Indexes
DESCRIPTION: Cypher queries for creating single-property indexes specific to Neo4j Community Edition

LANGUAGE: cypher
CODE:
CREATE INDEX account_provider_index IF NOT EXISTS
FOR (a:Account) ON (a.provider);

CREATE INDEX account_provider_account_id_index IF NOT EXISTS
FOR (a:Account) ON (a.providerAccountId);

CREATE INDEX verification_token_identifier_index IF NOT EXISTS
FOR (v:VerificationToken) ON (v.identifier);

CREATE INDEX verification_token_token_index IF NOT EXISTS
FOR (v:VerificationToken) ON (v.token);

----------------------------------------

TITLE: Configuring Microsoft SQL Server in NextAuth.js
DESCRIPTION: Example of configuring a Microsoft SQL Server database connection in NextAuth.js using a connection string.

LANGUAGE: javascript
CODE:
database: "mssql://sa:password@localhost:1433/database_name"

----------------------------------------

TITLE: OAuth Sign-in Implementation in Next.js
DESCRIPTION: Example implementation of OAuth sign-in page showing how to retrieve and display available authentication providers using getProviders() and handle sign-in functionality.

LANGUAGE: jsx
CODE:
import { getProviders, signIn } from "next-auth/client"

export default function SignIn({ providers }) {
  return (
    <>
      {Object.values(providers).map((provider) => (
        <div key={provider.name}>
          <button onClick={() => signIn(provider.id)}>
            Sign in with {provider.name}
          </button>
        </div>
      ))}
    </>
  )
}

// This is the recommended way for Next.js 9.3 or newer
export async function getServerSideProps(context) {
  const providers = await getProviders()
  return {
    props: { providers },
  }
}

----------------------------------------

TITLE: Creating Basic Neo4j Constraints and Indexes
DESCRIPTION: Cypher queries for creating essential constraints and indexes for both Community and Enterprise editions

LANGUAGE: cypher
CODE:
CREATE CONSTRAINT user_id_constraint IF NOT EXISTS
ON (u:User) ASSERT u.id IS UNIQUE;

CREATE INDEX user_id_index IF NOT EXISTS
FOR (u:User) ON (u.id);

CREATE INDEX user_email_index IF NOT EXISTS
FOR (u:User) ON (u.email);

CREATE CONSTRAINT session_session_token_constraint IF NOT EXISTS
ON (s:Session) ASSERT s.sessionToken IS UNIQUE;

CREATE INDEX session_session_token_index IF NOT EXISTS
FOR (s:Session) ON (s.sessionToken);

----------------------------------------

TITLE: Installing Next-Auth and PouchDB Adapter
DESCRIPTION: Command to install the required packages for using PouchDB with Next-Auth.

LANGUAGE: javascript
CODE:
npm install next-auth @next-auth/pouchdb-adapter@canary

----------------------------------------

TITLE: Credentials Sign-in Form Implementation in Next.js
DESCRIPTION: Example of credentials-based authentication form showing username/password fields and CSRF token handling.

LANGUAGE: jsx
CODE:
import { getCsrfToken } from "next-auth/client"

export default function SignIn({ csrfToken }) {
  return (
    <form method="post" action="/api/auth/callback/credentials">
      <input name="csrfToken" type="hidden" defaultValue={csrfToken} />
      <label>
        Username
        <input name="username" type="text" />
      </label>
      <label>
        Password
        <input name="password" type="password" />
      </label>
      <button type="submit">Sign in</button>
    </form>
  )
}

// This is the recommended way for Next.js 9.3 or newer
export async function getServerSideProps(context) {
  return {
    props: {
      csrfToken: await getCsrfToken(context),
    },
  }
}

----------------------------------------

TITLE: Defining DynamoDB Table with CloudFormation
DESCRIPTION: YAML CloudFormation template for creating a DynamoDB table with the required schema for NextAuth.

LANGUAGE: yaml
CODE:
NextAuthTable:
  Type: "AWS::DynamoDB::Table"
  Properties:
    TableName: next-auth
    AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
      - AttributeName: GSI1PK
        AttributeType: S
      - AttributeName: GSI1SK
        AttributeType: S
    KeySchema:
      - AttributeName: pk
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
    GlobalSecondaryIndexes:
      - IndexName: GSI1
        KeySchema:
          - AttributeName: GSI1PK
            KeyType: HASH
          - AttributeName: GSI1SK
            KeyType: RANGE
    TimeToLiveSpecification:
      AttributeName: expires
      Enabled: true

----------------------------------------

TITLE: OAuth Provider Signin Initiation
DESCRIPTION: POST endpoint that initiates OAuth signin flow for a specific provider. Requires CSRF token from /api/auth/csrf endpoint.

LANGUAGE: http
CODE:
POST /api/auth/signin/:provider

----------------------------------------

TITLE: Configuring OAuth Provider in NextAuth.js
DESCRIPTION: Example of setting up a Twitter OAuth provider in NextAuth.js. This snippet demonstrates how to configure the provider with client ID and secret from environment variables.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.Twitter({
    clientId: process.env.TWITTER_ID,
    clientSecret: process.env.TWITTER_SECRET
  })
],
...

----------------------------------------

TITLE: Unsecure Dgraph Schema Definition
DESCRIPTION: Basic GraphQL schema for Dgraph without security measures, defining Account, Session, User, and VerificationToken types

LANGUAGE: graphql
CODE:
type Account {
  id: ID
  type: String
  provider: String @search(by: [hash])
  providerAccountId: String @search(by: [hash])
  refreshToken: String
  expires_at: Int64
  accessToken: String
  token_type: String
  refresh_token: String
  access_token: String
  scope: String
  id_token: String
  session_state: String
  user: User @hasInverse(field: "accounts")
}

----------------------------------------

TITLE: Google Sign-in Callback with Email Domain Verification
DESCRIPTION: Implementation of a sign-in callback that restricts access to users with verified email addresses from a specific domain.

LANGUAGE: javascript
CODE:
const options = {
  ...
  callbacks: {
    async signIn(user, account, profile) {
      if (account.provider === 'google' &&
          profile.verified_email === true &&
          profile.email.endsWith('@example.com')) {
        return true
      } else {
        return false
      }
    },
  }
  ...
}

----------------------------------------

TITLE: Configuring Email Provider with Object in NextAuth.js
DESCRIPTION: This example shows how to configure the Email provider using a configuration object in NextAuth.js. It uses individual environment variables for SMTP server settings and sender email address.

LANGUAGE: javascript
CODE:
providers: [
  Providers.Email({
    server: {
      host: process.env.EMAIL_SERVER_HOST,
      port: process.env.EMAIL_SERVER_PORT,
      auth: {
        user: process.env.EMAIL_SERVER_USER,
        pass: process.env.EMAIL_SERVER_PASSWORD
      }
    },
    from: process.env.EMAIL_FROM
  }),
],

----------------------------------------

TITLE: Installing NextAuth.js with MikroORM Adapter
DESCRIPTION: Command to install NextAuth.js, the MikroORM adapter, and required dependencies. The [YOUR DRIVER] placeholder should be replaced with the specific database driver needed.

LANGUAGE: bash
CODE:
npm install next-auth @next-auth/mikro-orm-adapter @mikro-orm/core@next @mikro-orm/[YOUR DRIVER]@next

----------------------------------------

TITLE: Configuring Patreon Provider in NextAuth.js
DESCRIPTION: Example configuration for integrating Patreon OAuth authentication into NextAuth.js. Requires clientId and clientSecret from the Patreon Platform developer portal.

LANGUAGE: javascript
CODE:
import PatreonProvider from "next-auth/providers/patreon";
...
providers: [
    PatreonProvider({
      clientId: process.env.PATREON_ID,
      clientSecret: process.env.PATREON_SECRET,
    }))
]
...

----------------------------------------

TITLE: Demo IdentityServer4 Configuration
DESCRIPTION: Example configuration for connecting to the demo IdentityServer at demo.identityserver.io. Includes PKCE protection and predefined credentials for testing purposes.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.IdentityServer4({
    id: "demo-identity-server",
    name: "Demo IdentityServer4",
    scope: "openid profile email api offline_access",
    domain:  "demo.identityserver.io",
    clientId: "interactive.confidential",
    clientSecret: "secret",
    protection: "pkce"
  })
}
...

----------------------------------------

TITLE: Configuring TypeORM Adapter in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to configure the TypeORM adapter in NextAuth.js, specifically showing how to disable the synchronization warning by setting 'synchronize: false' in the TypeORM config.

LANGUAGE: javascript
CODE:
adapter: TypeORMLegacyAdapter({
  type: 'mysql',
  username: process.env.DATABASE_USERNAME,
  password: process.env.DATABASE_PASSWORD,
  host: process.env.DATABASE_HOST,
  database: process.env.DATABASE_DB,
  synchronize: false
}),

----------------------------------------

TITLE: Authentication Signin Endpoint
DESCRIPTION: GET endpoint that displays the sign in page for user authentication.

LANGUAGE: http
CODE:
GET /api/auth/signin

----------------------------------------

TITLE: Advanced Azure AD B2C Provider Configuration
DESCRIPTION: Extended NextAuth.js configuration for Azure AD B2C provider with additional API scopes for authorization token support.

LANGUAGE: javascript
CODE:
import AzureADB2CProvider from "next-auth/providers/azure-ad-b2c";
...
providers: [
  AzureADB2CProvider({
    tenantId: process.env.AZURE_AD_B2C_TENANT_NAME,
    clientId: process.env.AZURE_AD_B2C_CLIENT_ID,
    clientSecret: process.env.AZURE_AD_B2C_CLIENT_SECRET,
    primaryUserFlow: process.env.AZURE_AD_B2C_PRIMARY_USER_FLOW,
    authorization: { params: { scope: `https://${process.env.AZURE_AD_B2C_TENANT_NAME}.onmicrosoft.com/api/demo.read https://${process.env.AZURE_AD_B2C_TENANT_NAME}.onmicrosoft.com/api/demo.write offline_access openid` } },
  }),
]
...

----------------------------------------

TITLE: Configuring EVE Online Provider in NextAuth.js
DESCRIPTION: Basic setup for EVE Online authentication provider using environment variables for client credentials.

LANGUAGE: javascript
CODE:
import EVEOnlineProvider from "next-auth/providers/eveonline";
...
providers: [
  EVEOnlineProvider({
    clientId: process.env.EVE_CLIENT_ID,
    clientSecret: process.env.EVE_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Writing Cypress Test for NextAuth.js Google Login
DESCRIPTION: Cypress test script for performing Google login with NextAuth.js, including setting up cookies and verifying successful login.

LANGUAGE: javascript
CODE:
describe("Login page", () => {
  before(() => {
    cy.log(`Visiting https://company.tld`)
    cy.visit("/")
  })
  it("Login with Google", () => {
    const username = Cypress.env("GOOGLE_USER")
    const password = Cypress.env("GOOGLE_PW")
    const loginUrl = Cypress.env("SITE_NAME")
    const cookieName = Cypress.env("COOKIE_NAME")
    const socialLoginOptions = {
      username,
      password,
      loginUrl,
      headless: true,
      logs: false,
      isPopup: true,
      loginSelector: `a[href="${Cypress.env(
        "SITE_NAME"
      )}/api/auth/signin/google"]`,
      postLoginSelector: ".unread-count",
    }

    return cy
      .task("GoogleSocialLogin", socialLoginOptions)
      .then(({ cookies }) => {
        cy.clearCookies()

        const cookie = cookies
          .filter((cookie) => cookie.name === cookieName)
          .pop()
        if (cookie) {
          cy.setCookie(cookie.name, cookie.value, {
            domain: cookie.domain,
            expiry: cookie.expires,
            httpOnly: cookie.httpOnly,
            path: cookie.path,
            secure: cookie.secure,
          })

          Cypress.Cookies.defaults({
            preserve: cookieName,
          })

          // remove the two lines below if you need to stay logged in
          // for your remaining tests
          cy.visit("/api/auth/signout")
          cy.get("form").submit()
        }
      })
  })
})

----------------------------------------

TITLE: Initializing Mailchimp Provider in NextAuth.js
DESCRIPTION: Example code showing how to configure the Mailchimp authentication provider in NextAuth.js using environment variables for client credentials. Requires MAILCHIMP_CLIENT_ID and MAILCHIMP_CLIENT_SECRET to be set in environment variables.

LANGUAGE: javascript
CODE:
import MailchimpProvider from "next-auth/providers/mailchimp";
...
providers: [
  MailchimpProvider({
    clientId: process.env.MAILCHIMP_CLIENT_ID,
    clientSecret: process.env.MAILCHIMP_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Instagram Provider in NextAuth.js
DESCRIPTION: Example showing how to configure the Instagram authentication provider in NextAuth.js and implement a sign-in button. Requires Instagram client ID and secret from Facebook Developers Console. Note that Instagram API does not return email addresses and requires HTTPS for callback URLs.

LANGUAGE: jsx
CODE:
// pages/api/auth/[...nextauth].js
import InstagramProvider from "next-auth/providers/instagram";
...
providers: [
  InstagramProvider({
    clientId: process.env.INSTAGRAM_CLIENT_ID,
    clientSecret: process.env.INSTAGRAM_CLIENT_SECRET
  })
]
...
// pages/index.jsx
import { signIn } from "next-auth/react"
...
<button onClick={() => signIn("instagram")}>
  Sign in
</button>
...

----------------------------------------

TITLE: Configuring JWT Signing Keys in NextAuth.js
DESCRIPTION: Shows how to configure custom JWT signing and verification keys to resolve the JWT_AUTO_GENERATED_SIGNING_KEY warning. Demonstrates setting up private/public key pairs and custom verification options.

LANGUAGE: javascript
CODE:
jwt: {
  signingKey: process.env.JWT_SIGNING_PRIVATE_KEY,

  // You can also specify a public key for verification if using public/private key (but private only is fine)
  // verificationKey: process.env.JWT_SIGNING_PUBLIC_KEY,

  // If you want to use some key format other than HS512 you can specify custom options to use
  // when verifying (note: verificationOptions should include a value for maxTokenAge as well).
  // verificationOptions = {
  //   maxTokenAge: `${maxAge}s`, // e.g. `${30 * 24 * 60 * 60}s` = 30 days
  //   algorithms: ['HS512']
  // },
}

----------------------------------------

TITLE: Configuring Foursquare Provider in NextAuth.js
DESCRIPTION: Example code showing how to set up the Foursquare authentication provider in NextAuth.js. Requires client ID, client secret, and API version in YYYYMMDD format. The API version parameter is mandatory and indicates compatibility with Foursquare API changes up to that date.

LANGUAGE: javascript
CODE:
import FourSquareProvider from "next-auth/providers/foursquare";
...
providers: [
  FourSquareProvider({
    clientId: process.env.FOURSQUARE_CLIENT_ID,
    clientSecret: process.env.FOURSQUARE_CLIENT_SECRET,
    apiVersion: "YYYYMMDD"
  })
]
...

----------------------------------------

TITLE: Prisma Schema Definition
DESCRIPTION: Complete Prisma schema definition including Account, Session, User, and VerificationRequest models with appropriate mappings and indexes

LANGUAGE: json
CODE:
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

----------------------------------------

TITLE: Updating Provider Imports in NextAuth.js v4
DESCRIPTION: Changes to provider imports, requiring individual imports for each provider

LANGUAGE: diff
CODE:
- import Provider from "next-auth/providers"
- Providers.Auth0({...})
- Providers.Google({...})
+ import Auth0Provider from "next-auth/providers/auth0"
+ import GoogleProvider from "next-auth/providers/google"
+ Auth0Provider({...})
+ GoogleProvider({...})

----------------------------------------

TITLE: Host File Configuration for Windows
DESCRIPTION: PowerShell command to add local domain mapping to hosts file on Windows systems.

LANGUAGE: powershell
CODE:
Add-Content -Path C:\Windows\System32\drivers\etc\hosts -Value "127.0.0.1 dev.example.com" -Force

----------------------------------------

TITLE: Session Configuration in NextAuth.js
DESCRIPTION: Default session configuration options including JWT settings, session duration, and database update frequency.

LANGUAGE: javascript
CODE:
session: {
  jwt: false,
  maxAge: 30 * 24 * 60 * 60, // 30 days
  updateAge: 24 * 60 * 60, // 24 hours
}

----------------------------------------

TITLE: Creating Authentication Tables Schema in Microsoft SQL Server
DESCRIPTION: Defines the core database schema required for NextAuth.js authentication system. Creates tables for accounts, sessions, users, and verification requests with appropriate columns and indexes. Includes automatic timestamp handling and default values using getdate().

LANGUAGE: sql
CODE:
CREATE TABLE accounts
  (
    id                    int IDENTITY(1,1) NOT NULL,
    compound_id           varchar(255) NOT NULL,
    user_id               int NOT NULL,
    provider_type         varchar(255) NOT NULL,
    provider_id           varchar(255) NOT NULL,
    provider_account_id   varchar(255) NOT NULL,
    refresh_token         text NULL,
    access_token          text NULL,
    access_token_expires  datetime NULL,
    created_at            datetime NOT NULL DEFAULT getdate(),
    updated_at            datetime NOT NULL DEFAULT getdate()
  );

CREATE TABLE sessions
  (
    id            int IDENTITY(1,1) NOT NULL,
    user_id       int NOT NULL,
    expires       datetime NOT NULL,
    session_token varchar(255) NOT NULL,
    access_token  varchar(255) NOT NULL,
    created_at    datetime NOT NULL DEFAULT getdate(),
    updated_at    datetime NOT NULL DEFAULT getdate()
  );

CREATE TABLE users
  (
    id              int IDENTITY(1,1) NOT NULL,
    name            varchar(255) NULL,
    email           varchar(255) NULL,
    email_verified  datetime NULL,
    image           varchar(255) NULL,
    created_at      datetime NOT NULL DEFAULT getdate(),
    updated_at      datetime NOT NULL DEFAULT getdate()
  );

CREATE TABLE verification_requests
  (
    id          int IDENTITY(1,1) NOT NULL,
    identifier  varchar(255) NOT NULL,
    token       varchar(255) NOT NULL,
    expires     datetime NOT NULL,
    created_at  datetime NOT NULL DEFAULT getdate(),
    updated_at  datetime NOT NULL DEFAULT getdate()
  );

CREATE UNIQUE INDEX compound_id
  ON accounts(compound_id);

CREATE INDEX provider_account_id
  ON accounts(provider_account_id);

CREATE INDEX provider_id
  ON accounts(provider_id);

CREATE INDEX user_id
  ON accounts(user_id);

CREATE UNIQUE INDEX session_token
  ON sessions(session_token);

CREATE UNIQUE INDEX access_token
  ON sessions(access_token);

CREATE UNIQUE INDEX email
  ON users(email);

CREATE UNIQUE INDEX token
  ON verification_requests(token);

----------------------------------------

TITLE: Setting Entity Prefix in NextAuth.js Database Connection String
DESCRIPTION: Demonstrates how to set a prefix for all table names using the entityPrefix option in a connection string.

LANGUAGE: javascript
CODE:
"mysql://nextauth:password@127.0.0.1:3306/database_name?entityPrefix=nextauth_"

----------------------------------------

TITLE: Configuring Mail.ru Provider in NextAuth.js
DESCRIPTION: This code snippet demonstrates how to set up the Mail.ru authentication provider in NextAuth.js. It uses environment variables for the client ID and client secret, which should be obtained from the Mail.ru OAuth application settings.

LANGUAGE: javascript
CODE:
import Providers from `next-auth/providers`
...
providers: [
  Providers.MailRu({
    clientId: process.env.MAILRU_CLIENT_ID,
    clientSecret: process.env.MAILRU_CLIENT_SECRET
  })
]
...

----------------------------------------

TITLE: Configuring Trakt Provider in NextAuth.js
DESCRIPTION: Example configuration for initializing the Trakt authentication provider in NextAuth.js. Requires TRAKT_ID and TRAKT_SECRET environment variables to be set. Note that Trakt does not provide email addresses or allow hotlinking of profile images.

LANGUAGE: javascript
CODE:
providers: [
  TraktProvider({
    clientId: process.env.TRAKT_ID,
    clientSecret: process.env.TRAKT_SECRET,
  }),
]