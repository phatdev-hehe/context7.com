TITLE: Refactoring Root Layout to Use Remix Layout Export Pattern
DESCRIPTION: A guide for updating the root component to use Remix's Layout Export pattern, eliminating the use of useLoaderData in the root component. The diff shows changes to component structure, imports, and how to handle data loading.

LANGUAGE: diff
CODE:
import {
  Outlet,
-  useLoaderData,
+  useRouteLoaderData,
} from '@remix-run/react';
-import {Layout} from '~/components/Layout';
+import {PageLayout} from '~/components/PageLayout';

-export default function App() {
+export function Layout({children}: {children?: React.ReactNode}) {
  const nonce = useNonce();
-  const data = useLoaderData<typeof loader>();
+  const data = useRouteLoaderData<typeof loader>('root');

  return (
    <html>
    ...
      <body>
-        <Layout {...data}>
-          <Outlet />
-        </Layout>
+        {data? (
+          <PageLayout {...data}>{children}</PageLayout>
+         ) : (
+          children
+        )}
      </body>
    </html>
  );
}

+export default function App() {
+  return <Outlet />;
+}

export function ErrorBoundary() {
- const rootData = useLoaderData<typeof loader>();

  return (
-    <html>
-    ...
-      <body>
-        <Layout {...rootData}>
-          <div className="route-error">
-            <h1>Error</h1>
-            ...
-          </div>
-        </Layout>
-      </body>
-    </html>
+    <div className="route-error">
+      <h1>Error</h1>
+      ...
+    </div>
  );
}

----------------------------------------

TITLE: Querying GraphQL Data with Type Safety in Hydrogen
DESCRIPTION: Example of how to use GraphQL queries with the Hydrogen client. The client supports TypeScript interfaces that are extended in the generated d.ts file, providing type safety with zero runtime overhead.

LANGUAGE: typescript
CODE:
const {shop} = await client.query(`#graphql
  query {
    shop {
     name
    }
  }
`);

----------------------------------------

TITLE: Deferring Non-Critical Data Loading with Suspense and Await
DESCRIPTION: Implementation of deferred data loading using Remix defer and Suspense. This pattern allows prioritizing critical product data while loading reviews asynchronously for better user experience.

LANGUAGE: ts
CODE:
import {defer, useLoaderData, type LoaderArgs} from '@shopify/remix-oxygen';

export async function loader({params, context: {storefront}}: LoaderArgs) {
  const productQuery = storefront.query(
    `#graphql
      query Product($handle: String!) {
        product(handle: $handle) {
          id
          title
        }
      }
    `,
    {
      variables: {
        handle: params.handle,
      },
    },
  );

  const reviewsQuery = storefront.query(
    `#graphql
      query ProductReviews($handle: String!) {
        productReviews(handle: $handle) {
          nodes {
            description
          }
        }
      }
    `,
    {
      variables: {
        handle: params.handle,
      },
    },
  );

  return defer({
    product: await productQuery,
    reviews: reviewsQuery,
  });
}

export default PageComponent() {
  const {product, reviews} = useLoaderData<typeof loader>();

  return (
    <div>
      <Product value={product} />
      <Suspense fallback={<Spinner />}>
        <Await resolve={reviews}>
          {({productReviews}) => <ProductReviews value={productReviews.nodes}>}
        </Await>
      </Suspense>
    </div>
  );
}

----------------------------------------

TITLE: Implementing ProductPrice Component with Selling Plan Support in TypeScript
DESCRIPTION: This component renders different pricing displays based on whether a selling plan is selected. It includes specialized components for calculating subscription prices based on various adjustment types (fixed amount, fixed price, or percentage) and displaying regular product pricing.

LANGUAGE: typescript
CODE:
function ProductPrice({
  selectedVariant,
  selectedSellingPlan,
}: {
  selectedVariant: ProductVariantFragment;
  selectedSellingPlan: SellingPlanFragment | null;
}) {
  return (
    <div className="product-price">
      {selectedSellingPlan ? (
        <SellingPlanPrice
          selectedSellingPlan={selectedSellingPlan}
          selectedVariant={selectedVariant}
        />
      ) : (
        <ProductVariantPrice selectedVariant={selectedVariant} />
      )}
    </div>
  );
}

type SellingPlanPrice = {
  amount: number;
  currencyCode: CurrencyCode;
};

/*
  Render the selected selling plan price is available
*/
function SellingPlanPrice({
  selectedSellingPlan,
  selectedVariant,
}: {
  selectedSellingPlan: SellingPlanFragment;
  selectedVariant: ProductVariantFragment;
}) {
  const sellingPlanPriceAdjustments = selectedSellingPlan?.priceAdjustments;

  if (!sellingPlanPriceAdjustments?.length) {
    return <Money data={selectedVariant.price} />;
  }

  const selectedVariantPrice: SellingPlanPrice = {
    amount: parseFloat(selectedVariant.price.amount),
    currencyCode: selectedVariant.price.currencyCode,
  };

  const sellingPlanPrice: SellingPlanPrice = sellingPlanPriceAdjustments.reduce(
    (acc, adjustment) => {
      switch (adjustment.adjustmentValue.__typename) {
        case 'SellingPlanFixedAmountPriceAdjustment':
          return {
            amount:
              acc.amount +
              parseFloat(adjustment.adjustmentValue.adjustmentAmount.amount),
            currencyCode: acc.currencyCode,
          };
        case 'SellingPlanFixedPriceAdjustment':
          return {
            amount: parseFloat(adjustment.adjustmentValue.price.amount),
            currencyCode: acc.currencyCode,
          };
        case 'SellingPlanPercentagePriceAdjustment':
          return {
            amount:
              acc.amount *
              (1 - adjustment.adjustmentValue.adjustmentPercentage),
            currencyCode: acc.currencyCode,
          };
        default:
          return acc;
      }
    },
    selectedVariantPrice,
  );

  return (
    <div className="selling-plan-price">
      <Money
        data={{
          amount: `${sellingPlanPrice.amount}`,
          currencyCode: sellingPlanPrice.currencyCode,
        }}
      />
    </div>
  );
}

/**
  Render the price of a product that does not have selling plans
**/
function ProductVariantPrice({
  selectedVariant,
}: {
  selectedVariant: ProductVariantFragment;
}) {
  return selectedVariant?.compareAtPrice ? (
    <>
      <p>Sale</p>
      <br />
      <div className="product-price-on-sale">
        {selectedVariant ? <Money data={selectedVariant.price} /> : null}
        <s>
          <Money data={selectedVariant.compareAtPrice} />
        </s>
      </div>
    </>
  ) : (
    selectedVariant?.price && <Money data={selectedVariant?.price} />
  );
}

----------------------------------------

TITLE: Implementing ProductForm Component with Subscription Support in TypeScript
DESCRIPTION: This component renders a product form with subscription options using SellingPlanSelector and SellingPlanGroup components. It also updates the AddToCartButton to handle subscription-based purchases by including the selected selling plan ID.

LANGUAGE: typescript
CODE:
function ProductForm({
  selectedSellingPlan,
  selectedVariant,
  sellingPlanGroups,
}: {
  selectedSellingPlan: SellingPlanFragment | null;
  selectedVariant: ProductVariantFragment;
  sellingPlanGroups: ProductFragment['sellingPlanGroups'];
}) {
  return (
    <div className="product-form">
      {/* 4. Add the SellingPlanSelector component inside the ProductForm */}
      <SellingPlanSelector
        sellingPlanGroups={sellingPlanGroups}
        selectedSellingPlan={selectedSellingPlan}
      >
        {({sellingPlanGroup}) => (
          /* 5. Render the SellingPlanGroup component inside the SellingPlanSelector */
          <SellingPlanGroup
            key={sellingPlanGroup.name}
            sellingPlanGroup={sellingPlanGroup}
          />
        )}
      </SellingPlanSelector>
      <br />

      {/* 6. Update the AddToCart button text and pass in the sellingPlanId */}
      <AddToCartButton
        disabled={
          !selectedVariant ||
          !selectedVariant.availableForSale ||
          !selectedSellingPlan
        }
        onClick={() => {
          window.location.href = window.location.href + '#cart-aside';
        }}
        lines={
          selectedVariant
            ? [
                {
                  merchandiseId: selectedVariant?.id,
                  sellingPlanId: selectedSellingPlan?.id,
                  quantity: 1,
                },
              ]
            : []
        }
      >
        {sellingPlanGroups.nodes
          ? selectedSellingPlan
            ? 'Subscribe'
            : 'Select a subscription'
          : selectedVariant?.availableForSale
          ? 'Add to cart'
          : 'Sold out'}
      </AddToCartButton>
    </div>
  );
}

----------------------------------------

TITLE: Creating Optimistic UI for Cart Operations
DESCRIPTION: This code demonstrates how to implement optimistic UI for add-to-cart actions. It uses a unique event ID to track specific form submissions and provides immediate feedback to users while the cart request is processing.

LANGUAGE: jsx
CODE:
function AddToCartButton({lines}) {
  const fetcher = useFetcher();

  // Create an unique id for our form
  const eventId = useId();
  const eventIdFetchers = useEventIdFetchers(eventId);
  const isAdding = !!eventIdFetchers.length;

  return (
    <fetcher.Form action="/cart" method="post">
      <input type="hidden" name="cartAction" value="ADD_TO_CART" />
      <input type="hidden" name="eventId" value={eventId} />
      <input type="hidden" name="lines" value={JSON.stringify(lines)} />
      <button type="submit" disabled={isAdding}>
        {isAdding ? 'Adding ...' : 'Add to Bag'}
      </button>
    </fetcher.Form>
  );
}

----------------------------------------

TITLE: Implementing Different Caching Strategies for Queries
DESCRIPTION: Example of using different caching strategies for GraphQL queries. This demonstrates how to configure long-term caching for relatively static product data and short-term caching for more frequently updated review data.

LANGUAGE: tsx
CODE:
import {defer, type LoaderArgs} from '@shopify/remix-oxygen';

export async function loader({params, context: {storefront}}: LoaderArgs) {
  const productQuery = storefront.query(
    `#graphql
      query Product($handle: String!) {
        product(handle: $handle) {
          id
          title
        }
      }
    `,
    {
      variables: {
        handle: params.handle,
      },
      cache: storefront.CacheLong(),
    },
  );

  const reviewsQuery = storefront.query(
    `#graphql
      query ProductReviews($handle: String!) {
        productReviews(handle: $handle) {
          nodes {
            description
          }
        }
      }
    `,
    {
      variables: {
        handle: params.handle,
      },
      cache: storefront.CacheShort(),
    },
  );

  return defer({
    product: await productQuery,
    reviews: reviewsQuery,
  });
}

----------------------------------------

TITLE: Complete Pagination Component with Navigation UI in Hydrogen
DESCRIPTION: A full implementation of the Pagination component with render props that create Previous/Next navigation links and handle product listings. Includes state-based caching and scroll position maintenance.

LANGUAGE: tsx
CODE:
export default function Products() {
  const {products} = useLoaderData<typeof loader>();

  return (
    <>
      <Pagination connection={products} autoLoadOnScroll>
        {({
          endCursor,
          hasNextPage,
          hasPreviousPage,
          nextPageUrl,
          nodes,
          prevPageUrl,
          startCursor,
          nextLinkRef,
          isLoading,
        }) => {
          const itemsMarkup = nodes.map((product, i) => (
            <Link to={`/products/${product.handle}`} key={product.id}>
              {product.title}
            </Link>
          ));

          return (
            <>
              {hasPreviousPage && (
                <Link
                  preventScrollReset={true}
                  to={prevPageUrl}
                  prefetch="intent"
                  state={{
                    pageInfo: {
                      endCursor,
                      hasNextPage,
                      startCursor,
                      hasPreviousPage: undefined,
                    },
                    nodes,
                  }}
                >
                  {isLoading ? 'Loading...' : 'Previous'}
                </Link>
              )}
              {itemsMarkup}
              {hasNextPage && (
                <Link
                  preventScrollReset={true}
                  ref={nextLinkRef}
                  to={nextPageUrl}
                  prefetch="intent"
                  state={{
                    pageInfo: {
                      endCursor,
                      hasPreviousPage,
                      hasNextPage: undefined,
                      startCursor,
                    },
                    nodes,
                  }}
                >
                  {isLoading ? 'Loading...' : 'Next'}
                </Link>
              )}
            </>
          );
        }}
      </Pagination>
    </>
  );
}

----------------------------------------

TITLE: Configuring Hydrogen Codegen for Multiple GraphQL APIs
DESCRIPTION: Example configuration for the Hydrogen Codegen plugin to generate TypeScript types for multiple GraphQL APIs including Shopify Storefront API, Customer Account API, and a custom CMS. The configuration uses the preset, pluckConfig, and getSchema utilities from the package.

LANGUAGE: typescript
CODE:
// <root>/codegen.ts

import type {CodegenConfig} from '@graphql-codegen/cli';
import {pluckConfig, preset, getSchema} from '@shopify/hydrogen-codegen';

export default {
  overwrite: true,
  pluckConfig,
  generates: {
    'storefrontapi.generated.d.ts': {
      preset,
      schema: getSchema('storefront'),
      documents: [
        './*.{ts,tsx,js,jsx}',
        './app/**/*.{ts,tsx,js,jsx}',
        '!./app/graphql/customer-account/*.{ts,tsx,js,jsx}',
        '!./app/graphql/my-cms/*.{ts,tsx,js,jsx}',
      ],
    },
    'customeraccountapi.generated.d.ts': {
      preset,
      schema: getSchema('customer-account'),
      documents: ['./app/graphql/customer-account/*.{ts,tsx,js,jsx}'],
    },
    'mycms.generated.d.ts': {
      preset,
      schema: './my-cms.json',
      documents: ['./app/graphql/my-cms/*.{ts,tsx,js,jsx}'],
    },
  },
} as CodegenConfig;

----------------------------------------

TITLE: Implementing Root Loader with Cart Data in React
DESCRIPTION: An example of a root loader function that retrieves cart data from the context and makes it available to components, serving as the foundation for cart functionality.

LANGUAGE: tsx
CODE:
// Root loader returns the cart data
export async function loader({context}: LoaderFunctionArgs) {
  return defer({
    cart: context.cart.get(),
  });
}

----------------------------------------

TITLE: Defining Predictive Search GraphQL Queries and Fragments for Shopify Storefront API
DESCRIPTION: This snippet defines the GraphQL fragments and main query for predictive search functionality. It includes fragments for articles, collections, pages, products, and search query suggestions that will be used with the Shopify Storefront API.

LANGUAGE: typescript
CODE:
/**
 * Predictive search query and fragments
 * (adjust as needed)
 */
const PREDICTIVE_SEARCH_ARTICLE_FRAGMENT = `#graphql
  fragment PredictiveArticle on Article {
    __typename
    id
    title
    handle
    blog {
      handle
    }
    image {
      url
      altText
      width
      height
    }
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_COLLECTION_FRAGMENT = `#graphql
  fragment PredictiveCollection on Collection {
    __typename
    id
    title
    handle
    image {
      url
      altText
      width
      height
    }
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_PAGE_FRAGMENT = `#graphql
  fragment PredictivePage on Page {
    __typename
    id
    title
    handle
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_PRODUCT_FRAGMENT = `#graphql
  fragment PredictiveProduct on Product {
    __typename
    id
    title
    handle
    trackingParameters
    selectedOrFirstAvailableVariant(
      selectedOptions: []
      ignoreUnknownOptions: true
      caseInsensitiveMatch: true
    ) {
      id
      image {
        url
        altText
        width
        height
      }
      price {
        amount
        currencyCode
      }
    }
  }
` as const;

const PREDICTIVE_SEARCH_QUERY_FRAGMENT = `#graphql
  fragment PredictiveQuery on SearchQuerySuggestion {
    __typename
    text
    styledText
    trackingParameters
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/predictiveSearch
const PREDICTIVE_SEARCH_QUERY = `#graphql
  query predictiveSearch(
    $country: CountryCode
    $language: LanguageCode
    $limit: Int!
    $limitScope: PredictiveSearchLimitScope!
    $term: String!
    $types: [PredictiveSearchType!]
  ) @inContext(country: $country, language: $language) {
    predictiveSearch(
      limit: $limit,
      limitScope: $limitScope,
      query: $term,
      types: $types,
    ) {
      articles {
        ...PredictiveArticle
      }
      collections {
        ...PredictiveCollection
      }
      pages {
        ...PredictivePage
      }
      products {
        ...PredictiveProduct
      }
      queries {
        ...PredictiveQuery
      }
    }
  }
  ${PREDICTIVE_SEARCH_ARTICLE_FRAGMENT}
  ${PREDICTIVE_SEARCH_COLLECTION_FRAGMENT}
  ${PREDICTIVE_SEARCH_PAGE_FRAGMENT}
  ${PREDICTIVE_SEARCH_PRODUCT_FRAGMENT}
  ${PREDICTIVE_SEARCH_QUERY_FRAGMENT}
` as const;

----------------------------------------

TITLE: Updating Server Configuration to Use Centralized Context
DESCRIPTION: This diff shows how to refactor the server.ts file to use the centralized app context created with createAppLoadContext. It replaces individual client initializations with a single context that's passed to the Remix request handler.

LANGUAGE: diff
CODE:
// in server.ts

- import {
-   createCartHandler,
-   createStorefrontClient,
-   createCustomerAccountClient,
- } from '@shopify/hydrogen';
+ import {createAppLoadContext} from '~/lib/context';

export default {
  async fetch(
    request: Request,
    env: Env,
    executionContext: ExecutionContext,
  ): Promise<Response> {

-   const {storefront} = createStorefrontClient(
-     ...
-   );

-   const customerAccount = createCustomerAccountClient(
-     ...
-   );

-   const cart = createCartHandler(
-     ...
-   );

+   const appLoadContext = await createAppLoadContext(
+      request,
+      env,
+      executionContext,
+   );

    /**
      * Create a Remix request handler and pass
      * Hydrogen's Storefront client to the loader context.
      */
    const handleRequest = createRequestHandler({
      build: remixBuild,
      mode: process.env.NODE_ENV,
-      getLoadContext: (): AppLoadContext => ({
-        session,
-        storefront,
-        customerAccount,
-        cart,
-        env,
-        waitUntil,
-      }),
+      getLoadContext: () => appLoadContext,
    });
  }


----------------------------------------

TITLE: Implementing Event ID Fetchers for Tracking Specific Form Submissions
DESCRIPTION: This utility hook helps track specific form submissions by their event ID. It's used to implement optimistic UI by identifying which specific forms are currently processing, allowing for targeted UI updates.

LANGUAGE: jsx
CODE:
export function useEventIdFetchers(eventId) {
  const fetchers = useFetchers();
  const cartFetchers = [];

  for (const fetcher of fetchers) {
    const formData = fetcher.submission?.formData;
    if (formData && formData.get('eventId') === eventId) {
      cartFetchers.push(fetcher);
    }
  }
  return cartFetchers;
}

----------------------------------------

TITLE: Creating and Injecting the Storefront Client in Remix
DESCRIPTION: Initialize a Hydrogen storefront client within the Remix request handler context. This sets up the connection to the Shopify Storefront API with appropriate authentication and caching.

LANGUAGE: ts
CODE:
import {createStorefrontClient} from '@shopify/hydrogen';
import {createRequestHandler} from '@shopify/remix-oxygen';

export default {
  async fetch(request: Request, env: Env, executionContext: ExecutionContext) {
    const cache = await caches.open('hydrogen');

    const handleRequest = createRequestHandler({
      build: remixBuild,
      mode: process.env.NODE_ENV,
      getLoadContext() {
        const {storefront} = createStorefrontClient({
          cache,
          waitUntil: (p: Promise) => executionContext.waitUntil(p),
          publicStorefrontToken: env.SHOPIFY_STOREFRONT_API_PUBLIC_TOKEN,
          storefrontApiVersion: env.SHOPIFY_STOREFRONT_API_VERSION,
          storeDomain: env.SHOPIFY_STORE_DOMAIN,
        });

        return {storefront};
      },
    });

    return handleRequest(request);
  },
};

----------------------------------------

TITLE: Implementing Predictive Search Fetcher Function for Hydrogen
DESCRIPTION: This function processes form data from search requests, extracts the search term and limit, then queries the Shopify Storefront API using the predictive search query. It returns formatted search results or throws appropriate errors.

LANGUAGE: typescript
CODE:
/**
 * Predictive search fetcher
 */
async function predictiveSearch({
  request,
  context,
}: Pick<ActionFunctionArgs, 'request' | 'context'>) {
  const {storefront} = context;
  const formData = await request.formData();
  const term = String(formData.get('q') || '');

  const limit = Number(formData.get('limit') || 10);

  // Predictively search articles, collections, pages, products, and queries (suggestions)
  const {predictiveSearch: items, errors} = await storefront.query(
    PREDICTIVE_SEARCH_QUERY,
    {
      variables: {
        // customize search options as needed
        limit,
        limitScope: 'EACH',
        term,
      },
    },
  );

  if (errors) {
    throw new Error(
      `Shopify API errors: ${errors.map(({message}) => message).join(', ')}`,
    );
  }

  if (!items) {
    throw new Error('No predictive search data returned');
  }

  const total = Object.values(items).reduce((acc, {length}) => acc + length, 0);

  return {term, result: {items, total}, error: null};
}

----------------------------------------

TITLE: Implementing Optimistic Cart Updates with useOptimisticCart in React
DESCRIPTION: An enhanced cart component implementation using the useOptimisticCart hook to apply local optimistic updates for cart actions, improving the perceived performance of the application.

LANGUAGE: tsx
CODE:
export function Cart({cart}) {
  const optimisticCart = useOptimisticCart(cart);

  if (!optimisticCart?.lines?.nodes?.length) return <p>Nothing in cart</p>;

  return optimisticCart.lines.nodes.map((line) => (
    <div key={line.id}>
      <Link to={`/products${line.merchandise.product.handle}`}>
        {line.merchandise.product.title}
      </Link>
    </div>
  ));
}

----------------------------------------

TITLE: Rendering Conditional Product Option Links in React for Shopify Hydrogen
DESCRIPTION: This snippet handles conditional rendering of product option variants as either a Link or button component based on whether the variant represents a different product or just a parameter change. It includes SEO considerations for rendering variants appropriately.

LANGUAGE: jsx
CODE:
if (isDifferentProduct) {
  // SEO
  // When the variant is a combined listing child product
  // that leads to a different url, we need to render it
  // as an anchor tag
  return (
    <Link
      className="product-options-item"
      key={option.name + name}
      prefetch="intent"
      preventScrollReset
      replace
      to={`/products/${handle}?${variantUriQuery}`}
      style={{
        border: selected
          ? "1px solid black"
          : "1px solid transparent",
        opacity: available ? 1 : 0.3,
      }}
    >
      <ProductOptionSwatch swatch={swatch} name={name} />
    </Link>
  );
} else {
  // SEO
  // When the variant is an update to the search param,
  // render it as a button with javascript navigating to
  // the variant so that SEO bots do not index these as
  // duplicated links
  return (
    <button
      type="button"
      className={`product-options-item${
        exists && !selected ? " link" : ""
      }`}
      key={option.name + name}
      style={{
        border: selected
          ? "1px solid black"
          : "1px solid transparent",
        opacity: available ? 1 : 0.3,
      }}
      disabled={!exists}
      onClick={() => {
        if (!selected) {
          navigate(`?${variantUriQuery}`, {
            replace: true,
          });
        }
      }}
    >
      <ProductOptionSwatch swatch={swatch} name={name} />
    </button>
  );
}

----------------------------------------

TITLE: Creating Updated ProductForm Component with TypeScript
DESCRIPTION: Provides the updated ProductForm component implementation that uses the new productOptions data structure and selectedVariant. This component handles product options, variant selection, and the Add to Cart functionality.

LANGUAGE: tsx
CODE:
import { Link, useNavigate } from "@remix-run/react";
import { type MappedProductOptions } from "@shopify/hydrogen";
import type {
  Maybe,
  ProductOptionValueSwatch,
} from "@shopify/hydrogen/storefront-api-types";
import { AddToCartButton } from "./AddToCartButton";
import { useAside } from "./Aside";
import type { ProductFragment } from "storefrontapi.generated";

export function ProductForm({
  productOptions,
  selectedVariant,
}: {
  productOptions: MappedProductOptions[];
  selectedVariant: ProductFragment["selectedOrFirstAvailableVariant"];
}) {
  const navigate = useNavigate();
  const { open } = useAside();
  return (
    <div className="product-form">
      {productOptions.map((option) => (
        <div className="product-options" key={option.name}>
          <h5>{option.name}</h5>
          <div className="product-options-grid">
            {option.optionValues.map((value) => {
              const {
                name,
                handle,
                variantUriQuery,
                selected,
                available,
                exists,
                isDifferentProduct,
                swatch,
              } = value;


----------------------------------------

TITLE: Implementing Session Management with isPending Flag in TypeScript
DESCRIPTION: A refactoring guide for session management that adds an isPending flag to the session class and updates the server to handle cookie setting. This approach removes the need to manually set cookies in route handlers.

LANGUAGE: diff
CODE:
// in app/lib/session.ts
export class AppSession implements HydrogenSession {
+  public isPending = false;

  get unset() {
+    this.isPending = true;
    return this.#session.unset;
  }

  get set() {
+    this.isPending = true;
    return this.#session.set;
  }

  commit() {
+    this.isPending = false;
    return this.#sessionStorage.commitSession(this.#session);
  }
}

LANGUAGE: diff
CODE:
// in server.ts
export default {
  async fetch(request: Request): Promise<Response> {
    try {
      const response = await handleRequest(request);

+      if (session.isPending) {
+        response.headers.set('Set-Cookie', await session.commit());
+      }

      return response;
    } catch (error) {
      ...
    }
  },
};

LANGUAGE: diff
CODE:
// in route files
export async function loader({context}: LoaderFunctionArgs) {
  return json({},
-    {
-      headers: {
-        'Set-Cookie': await context.session.commit(),
-      },
    },
  );
}

----------------------------------------

TITLE: Attaching Analytics Events to Remix Loaders and Actions
DESCRIPTION: Implementation of analytics events in Remix route components by attaching event data to loaders and actions. Defines TypeScript types for analytics events, allowing structured event tracking for product views and cart interactions.

LANGUAGE: jsx
CODE:
// routes/products/$productHandle.jsx

export const loader() {
  return json({
    analytics: [{  // type of AnalyticsEvents
      eventName: 'PRODUCT_VIEW'
    }]
  })
}

export const action() {
  return json({
    analytics: [{  // type of AnalyticsEvents
      eventName: 'ADD_TO_CART',
      payload: {
        variantId: '123'
      }
    }]
  })
}

type AnalyticsEvent = {
  eventName: string;
  payload?: {
    products?: string[],
    [string]: any
  }
}

type AnalyticsEvents = AnalyticsEvent[];

----------------------------------------

TITLE: Implementing Cart Routes and GraphQL Mutations in Remix
DESCRIPTION: This code defines the cart route handler with GraphQL mutations for cart management. It implements the action function to handle cart operations like adding items, with supporting functions for cart creation and modification.

LANGUAGE: jsx
CODE:
// app/routes/cart.jsx
import invariant from 'tiny-invariant';
import {json} from '@shopify/remix-oxygen';

export async function action({request, context}) {
  const {session, storefront} = context;
  const headers = new Headers();

  const [formData, storedCartId] = await Promise.all([
    request.formData(),
    session.get('cartId'),
  ]);

  let cartId = storedCartId;

  const cartAction = formData.get('cartAction');
  invariant(cartAction, 'No cartAction defined');

  let status = 200;
  let result = {};

  switch (cartAction) {
    case 'ADD_TO_CART':
      // Business logic for adding an item to cart

      // Validate form data
      const lines = formData.get('lines')
        ? JSON.parse(String(formData.get('lines')))
        : [];
      invariant(lines.length, 'No lines to add');

      // No previous cart, create and add line(s)
      if (!cartId) {
        result = await cartCreate({
          input: {lines},
          storefront,
        });
      } else {
        // Add line(s) to existing cart
        result = await cartAdd({
          cartId,
          lines,
          storefront,
        });
      }

      cartId = result.cart.id;

      break;
    default:
      invariant(false, `${cartAction} cart action is not defined`);
  }

  const redirectTo = formData.get('redirectTo') ?? null;
  if (typeof redirectTo === 'string' && isLocalPath(redirectTo)) {
    status = 303;
    headers.set('Location', redirectTo);
  }

  // The Cart ID may change after each mutation. We need to update it each time in the session.
  session.set('cartId', cartId);

  const {cart, errors} = result;
  return data({cart, errors}, {status, headers});
}

const USER_ERROR_FRAGMENT = `#graphql
  fragment ErrorFragment on CartUserError {
    message
    field
    code
  }
`;

const LINES_CART_FRAGMENT = `#graphql
  fragment CartLinesFragment on Cart {
    id
    totalQuantity
  }
`;

const CREATE_CART_MUTATION = `#graphql
  mutation ($input: CartInput!) {
    cartCreate(input: $input) {
      cart {
        ...CartLinesFragment
      }
      errors: userErrors {
        ...ErrorFragment
      }
    }
  }
  ${LINES_CART_FRAGMENT}
  ${USER_ERROR_FRAGMENT}
`;

export async function cartCreate({input, storefront}) {
  const {cartCreate} = await storefront.mutate(CREATE_CART_MUTATION, {
    variables: {input},
  });

  invariant(cartCreate, 'No data returned from cartCreate mutation');

  return cartCreate;
}

const ADD_LINES_MUTATION = `#graphql
  mutation ($cartId: ID!, $lines: [CartLineInput!]!) {
    cartLinesAdd(cartId: $cartId, lines: $lines) {
      cart {
        ...CartLinesFragment
      }
      errors: userErrors {
        ...ErrorFragment
      }
    }
  }
  ${LINES_CART_FRAGMENT}
  ${USER_ERROR_FRAGMENT}
`;

export async function cartAdd({cartId, lines, storefront}) {
  const {cartLinesAdd} = await storefront.mutate(ADD_LINES_MUTATION, {
    variables: {cartId, lines},
  });

  invariant(cartLinesAdd, 'No data returned from cartLinesAdd mutation');

  return cartLinesAdd;
}

----------------------------------------

TITLE: Migrating to the New Image Component in Hydrogen
DESCRIPTION: Demonstrates how to migrate from the old Image component implementation to the new responsive Image component. The new version requires less configuration and automatically handles image sizing.

LANGUAGE: jsx
CODE:
<Image
  data={image}
  widths={[400, 800, 1200]}
  width="100px"
  sizes="90vw"
  loaderOptions={{
    scale: 2,
    crop: 'left',
  }}
/>

LANGUAGE: jsx
CODE:
<Image data={image} sizes="90vw" crop="left" aspectRatio="3/2" />

----------------------------------------

TITLE: Implementing Analytics Event Collection Component in Hydrogen
DESCRIPTION: The Analytics component that collects events from Remix loaders and fetchers. It processes analytics events, sends them to the server endpoint, and pushes formatted data to client-side analytics frameworks like Google Tag Manager.

LANGUAGE: jsx
CODE:
export const Analytics() {
  const dataLoaders = useMatches();
  const fetchers = useFetchers();

  // Gather all data that have a `analytics` payload
  const events = [
    // merge of events to fire
    'PAGE_VIEW',
    'PRODUCT_VIEW'
  ];

  // Fire to server endpoint - most likely put this in a convenient function
  const data = fetch('/events', {
    method: 'post',
    body: JSON.stringify(events)
  })

  // Fire to client side analytics frameworks (or pass to a function callback)
  window.dataLayer.push(data.gtm)
}

----------------------------------------

TITLE: Recommended Ordering of Remix Route APIs in TypeScript
DESCRIPTION: Shows the preferred ordering and formatting of Remix route API functions, following a top-down order of concerns from HTTP headers to error handling. Includes proper TypeScript type usage for route functions.

LANGUAGE: tsx
CODE:
/* module imports... */
import type {
  LoaderFunctionArgs,
  ActionFunctionArgs,
} from '@shopify/remix-oxygen';

/* local type defintions */

export async function handle() {}

export async function shouldRevalidate() {}

export async function headers() {}

export async function meta() {}

export async function links() {}

export async function loader({}: LoaderFunctionArgs) {}

export async function action({}: ActionFunctionArgs) {}

export default function Component() {}

export function ErrorBoundary() {}

/* storefront Queries/Mutations, see more specific recommendations below  */

----------------------------------------

TITLE: Implementing a Complete Section Component in React
DESCRIPTION: Full implementation of a section component that parses metaobject data and renders the appropriate UI. This includes handling background images, heading, and subheading from the metaobject fields.

LANGUAGE: typescript
CODE:
export function SectionExample(props: SectionExampleFragment) {
  const section = parseSection<
    SectionHeroFragment,
    {
      heading?: ParsedMetafields['single_line_text_field'];
      subheading?: ParsedMetafields['single_line_text_field'];
    }
  >(props);

  const {image, heading, subheading, link} = section;

  const backgroundImage = image?.image?.url
    ? `url("${image.image.url}")`
    : undefined;

  return (
    <section
      className="section-hero"
      style={{
        backgroundImage,
        height: '50%',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        backgroundSize: 'cover',
        position: 'relative',
        minHeight: '500px',
      }}
    >
      <div
        style={{
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          paddingLeft: '2rem',
          position: 'absolute',
          top: 0,
          right: 0,
          left: 0,
          bottom: 0,
        }}
      >
        {heading && <h1 style={{marginBottom: 0}}>{heading.parsedValue}</h1>}
        {subheading && <p>{subheading.value}</p>}
      </div>
    </section>
  );
}

----------------------------------------

TITLE: Adding Localization to RequestHandler in server.ts
DESCRIPTION: Integration of the localization utility with the requestHandler's storefront object. This ensures every worker request has language and country definitions available.

LANGUAGE: jsx
CODE:
// server.ts
export default {
  async fetch(
    request: Request,
    env: Env,
    context: ExecutionContext,
  ): Promise<Response> {
    try {
      return await requestHandler(request, {
        env,
        context,
        storefront: {
          publicStorefrontToken: '3b580e70970c4528da70c98e097c2fa0',
          storeDomain: 'https://hydrogen-preview.myshopify.com',
          storefrontApiVersion: '2022-10',
          i18n: getLocaleFromRequest(request),
        },
      });

----------------------------------------

TITLE: Updated GraphQL Query with Pagination Variables and Fragment
DESCRIPTION: Enhances the GraphQL products query with pagination variables and the PAGINATION_PAGE_INFO_FRAGMENT. Adds support for cursor-based pagination with first/last and before/after parameters.

LANGUAGE: tsx
CODE:
const PRODUCTS_QUERY = `#graphql
+ ${PAGINATION_PAGE_INFO_FRAGMENT}
  query (
    $country: CountryCode
    $language: LanguageCode
+   $first: Int
+   $last: Int
+   $startCursor: String
+   $endCursor: String
  ) @inContext(country: $country, language: $language) {
    products(
+     first: $first,
+     last: $last,
+     before: $startCursor,
+     after: $endCursor
    ) {
      nodes {
        id
        title
        publishedAt
        handle
        variants(first: 1) {
          nodes {
            id
            image {
              url
              altText
              width
              height
            }
          }
        }
      }
+     pageInfo {
+       ...PaginationPageInfoFragment
+     }
    }
  }
`;

----------------------------------------

TITLE: Adding GraphQL Fragments for Selling Plans
DESCRIPTION: GraphQL fragments for selling plans that query necessary subscription data including pricing options, delivery schedules, and checkout charge information.

LANGUAGE: typescript
CODE:
const SELLING_PLAN_FRAGMENT = `#graphql
fragment SellingPlanMoney on MoneyV2 {
  amount
  currencyCode
}

fragment SellingPlan on SellingPlan {
  id
  options {
    name
    value
  }
 priceAdjustments {
   adjustmentValue {
     ... on SellingPlanFixedAmountPriceAdjustment {
       __typename
       adjustmentAmount {
         ... on MoneyV2 {
            ...SellingPlanMoney
         }
       }
     }
     ... on SellingPlanFixedPriceAdjustment {
       __typename
       price {
         ... on MoneyV2 {
           ...SellingPlanMoney
         }
       }
     }
     ... on SellingPlanPercentagePriceAdjustment {
       __typename
       adjustmentPercentage
     }
   }
   orderCount
 }
 recurringDeliveries
 checkoutCharge {
   type
   value {
     ... on MoneyV2 {
       ...SellingPlanMoney
     }
     ... on SellingPlanCheckoutChargePercentageValue {
       percentage
     }
   }
 }
}
` as const;

const SELLING_PLAN_GROUP_FRAGMENT = `#graphql
  ${SELLING_PLAN_FRAGMENT}
  fragment SellingPlanGroup on SellingPlanGroup {
    name
    options {
      name
      values
    }
    sellingPlans(first:10) {
      nodes {
        ...SellingPlan
      }
    }
  }
` as const;

----------------------------------------

TITLE: Implementing Error Handling in Remix Routes with TypeScript
DESCRIPTION: Demonstrates proper error handling patterns in Remix routes, including using ErrorBoundary for loader errors, errorElement prop with Await components, and try/catch blocks in appropriate contexts.

LANGUAGE: tsx
CODE:
export async function loader() {
  /* failed Storefront API requests will throw to the ErrorBoundary */
  const data = storefront.query()


  /* If no page data is returned purposely throw to the CatchBoundary */
  if (!data?.page) {
    throw new Response('Page not found', { status: 404 })
  }

  //...
  return data
}

export function meta() {
  try {
    //
  catch(error) {
    //
  }
}

export function ErrorBoundary({error}) {
  return (<div>{error.message}</div>)
}

export default function TheUIComponents() {
  return (
    <Await resolve={} errorElement={<div>An error occurred</div>}>
      //
    </Await>
  )
}

----------------------------------------

TITLE: Server-Side Analytics Event Processing Route Implementation
DESCRIPTION: Implementation of the server-side /events route that processes analytics requests. It queries additional data, formats it for different analytics frameworks, and handles data privacy requirements based on buyer consent status.

LANGUAGE: jsx
CODE:
export const action = async ({request, context, params}) => {
  // Most likely can determine the url template type with routing manifest as well

  // Make query to SFAPI for the required data
  // These data can be cache for a very long time (default to max-age: 12 hrs swr: 12 hrs)
  //
  // We can make intelligent data fetches like
  // * Cache each product query results individually so it can be easily reused by other event requests
  const data = queryForAnalyticsData(request, context, {...options})

  // Send to Shopify analytics or any analytics frameworks that supports server side analytics
  shapeForShopifyAnalytics(data);

  return json({
    gtm: shapeForGTMAnalytics(data),  // Format data to the analytics framework requirement
    fb: shapeForFBAnalytics(data)
  })
}

----------------------------------------

TITLE: Migrating from SEO Component to Remix Meta Exports
DESCRIPTION: Migration steps to replace the deprecated <Seo /> component with Remix meta route exports using getSeoMeta helper function. Shows how to remove the component, add meta exports, merge metadata, and override meta properties.

LANGUAGE: typescript
CODE:
export default function App() {
  const nonce = useNonce();
  const data = useLoaderData<typeof loader>();

  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
-        <Seo />
        <Meta />
        <Links />
      </head>
      <body>
        <Layout {...data}>
          <Outlet />
        </Layout>
        <ScrollRestoration nonce={nonce} />
        <Scripts nonce={nonce} />
        <LiveReload nonce={nonce} />
      </body>
    </html>
  );
}

LANGUAGE: typescript
CODE:
+import {getSeoMeta} from '@shopify/hydrogen';

export async function loader({context}) {
  const {shop} = await context.storefront.query(`
    query layout {
      shop {
        name
        description
      }
    }
  `);

  return {
    seo: {
      title: shop.title,
      description: shop.description,
    },
  };
}

+export const meta = ({data}) => {
+   return getSeoMeta(data.seo);
+};

LANGUAGE: typescript
CODE:
export const meta = ({data, matches}) => {
  return getSeoMeta(
    matches[0].data.seo,
    // the current route seo data overrides the root route data
    data.seo,
  );
};

LANGUAGE: typescript
CODE:
export const meta = ({data, matches}) => {
  return getSeoMeta(...matches.map((match) => match.data.seo));
};

LANGUAGE: typescript
CODE:
export const meta = ({data, location}) => {
  return getSeoMeta(data.seo).map((meta) => {
    if (meta.rel === 'canonical') {
      return {
        ...meta,
        href: meta.href + location.search,
      };
    }

    return meta;
  });
};

----------------------------------------

TITLE: Creating GraphQL Fragments for Metaobject Sections
DESCRIPTION: GraphQL fragments for querying metaobject section data. Includes a fragment for media images and another for the section itself, defining all fields that need to be retrieved from the backend.

LANGUAGE: typescript
CODE:
const EXAMPLE_MEDIA_IMAGE_FRAGMENT = '#graphql
  fragment MediaImage on MediaImage {
    image {
      altText
      url
      width
      height
    }
  }
';

export const SECTION_HERO_FRAGMENT = '#graphql
  fragment SectionExample on Metaobject {
    type
    heading: field(key: "heading") {
      key
      value
    }
    subheading: field(key: "subheading") {
      key
      value
    }
    # other fields ...
  }
  ${EXAMPLE_MEDIA_IMAGE_FRAGMENT}
';

----------------------------------------

TITLE: Updating SFAPI Product Fragment Query for Enhanced Variant Handling
DESCRIPTION: Updates the GraphQL query fragment for products to include new fields for variant existence, availability, and adjacent variants. Removes unnecessary variant queries and adds support for firstSelectableVariant and swatch data.

LANGUAGE: diff
CODE:
const PRODUCT_FRAGMENT = `#graphql
  fragment Product on Product {
    id
    title
    vendor
    handle
    descriptionHtml
    description
+    encodedVariantExistence
+    encodedVariantAvailability
    options {
      name
      optionValues {
        name
+        firstSelectableVariant {
+          ...ProductVariant
+        }
+        swatch {
+          color
+          image {
+            previewImage {
+              url
+            }
+          }
+        }
      }
    }
-    selectedVariant: selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {
+    selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {
+      ...ProductVariant
+    }
+    adjacentVariants (selectedOptions: $selectedOptions) {
+      ...ProductVariant
+    }
-    variants(first: 1) {
-      nodes {
-        ...ProductVariant
-      }
-    }
    seo {
      description
      title
    }
  }
  ${PRODUCT_VARIANT_FRAGMENT}
` as const;

----------------------------------------

TITLE: Rendering Country Selector Component in JSX
DESCRIPTION: Creates a dropdown component that displays available countries, fetches country data from the API endpoint, and renders a form for each country option to enable switching.

LANGUAGE: jsx
CODE:
import {Form, useMatches, useLocation} from '@remix-run/react';
...
export function CountrySelector() {
  const [root] = useMatches();
  const selectedLocale = root.data.selectedLocale;
  const {pathname, search} = useLocation();

  const [countries, setCountries] = useState({});

   // Get available countries list
   const fetcher = useFetcher();
   useEffect(() => {
     if (!fetcher.data) {
       fetcher.load('/api/countries');
       return;
     }
     setCountries(fetcher.data);
   }, [countries, fetcher.data]);

  const strippedPathname = pathname.replace(selectedLocale.pathPrefix, '');

  return (
    <details>
      <summary>
        {selectedLocale.label}
      </summary>
      <div className="overflow-auto border-t py-2 bg-contrast w-full max-h-36">
        {countries && Object.keys(countries).map((countryKey) => {
          const locale = countries[countryKey];
          const hreflang = `${locale.language}-${locale.country}`;

          return (
            <Form method="post" action="/locale" key={hreflang}>
              <input
                type="hidden"
                name="language"
                value={locale.language}
              />
              <input type="hidden" name="country" value={locale.country} />
              <input
                type="hidden"
                name="path"
                value={`${strippedPathname}${search}`}
              />
              <Button
                type="submit"
                variant="primary"
              >
                {locale.label}
              </Button>
            </Form>
          );
        })}
      </div>
    </details>
  );

----------------------------------------

TITLE: Updating Product Component to Use New Variant Data Fields
DESCRIPTION: Updates the Product component to use the optimized variant handling with adjacent variants instead of loading all variants. This utilizes the new hydrogen utilities for variant selection.

LANGUAGE: diff
CODE:
import {
  getSelectedProductOptions,
  Analytics,
  useOptimisticVariant,
+  getAdjacentAndFirstAvailableVariants,
} from '@shopify/hydrogen';

export default function Product() {
+  const {product} = useLoaderData<typeof loader>();
-  const {product, variants} = useLoaderData<typeof loader>();

+  // Optimistically selects a variant with given available variant information
+  const selectedVariant = useOptimisticVariant(
+    product.selectedOrFirstAvailableVariant,
+    getAdjacentAndFirstAvailableVariants(product),
+  );
-  const selectedVariant = useOptimisticVariant(
-    product.selectedVariant,
-    variants,
-  );

----------------------------------------

TITLE: Implementing Locale Change Handler in JSX
DESCRIPTION: Creates a route handler that processes locale change requests, updates the cart buyer identity with the new country code, and redirects to the appropriate domain and path.

LANGUAGE: jsx
CODE:
import {
  CountryCode,
  LanguageCode,
} from '@shopify/hydrogen/storefront-api-types';
import {redirect, type AppLoadContext, type ActionFunction} from '@shopify/remix-oxygen';
import invariant from 'tiny-invariant';
import {updateCartBuyerIdentity} from '~/data';
import {countries} from '~/data/countries';

export const action: ActionFunction = async ({request, context}) => {
  const {session} = context;
  const formData = await request.formData();

  // Make sure the form request is valid
  const languageCode = formData.get('language') as LanguageCode;
  invariant(languageCode, 'Missing language');

  const countryCode = formData.get('country') as CountryCode;
  invariant(countryCode, 'Missing country');

  // determine where to redirect to relative to where user navigated from
  // ie. hydrogen.shop/collections -> ca.hydrogen.shop/collections
  const path = formData.get('path');
  const toLocale = countries[`${languageCode}-${countryCode}`.toLowerCase()];

  const cartId = await session.get('cartId');

  // Update cart buyer's country code if we have a cart id
  if (cartId) {
    await updateCartBuyerIdentity(context, {
      cartId,
      buyerIdentity: {
        countryCode,
      },
    });
  }

  return redirect(`https://${toLocale.host}${toLocale.pathPrefix || ''}${path}`, 302);
};

function updateCartBuyerIdentity(
  {storefront}: AppLoadContext,
  {
    cartId,
    buyerIdentity,
  }: {
    cartId: string;
    buyerIdentity: CartBuyerIdentityInput;
  },
) {
  const data = await storefront.mutate<{
    cartBuyerIdentityUpdate: {cart: Cart};
  }>(UPDATE_CART_BUYER_COUNTRY, {
    variables: {
      cartId,
      buyerIdentity,
    },
  });

  invariant(data, 'No data returned from Shopify API');

  return data.cartBuyerIdentityUpdate.cart;
}

----------------------------------------

TITLE: Defining SEO Information in Route Module Handle Export
DESCRIPTION: This snippet shows how to define SEO information in a route module using the handle export. The seo object within the handle export should conform to the SeoDescriptor interface.

LANGUAGE: ts
CODE:
export const handle = {
  seo: {
    //... Add SEO information here
  },
};

----------------------------------------

TITLE: Creating a Locale Action Route in Hydrogen
DESCRIPTION: Implementation of an action route handler that processes locale change requests, updates the cart buyer identity if needed, and redirects to the localized URL path.

LANGUAGE: jsx
CODE:
import {
  CountryCode,
  LanguageCode,
} from '@shopify/hydrogen/storefront-api-types';
import {redirect, type ActionFunction} from '@shopify/remix-oxygen';
import invariant from 'tiny-invariant';
import {updateCartBuyerIdentity} from '~/data';
import {getSession} from '~/lib/session.server';

export const action: ActionFunction = async ({request, context}) => {
  const [session, formData] = await Promise.all([
    getSession(request, context),
    new URLSearchParams(await request.text()),
  ]);

  const languageCode = formData.get('language') as LanguageCode;
  invariant(languageCode, 'Missing language');

  const countryCode = formData.get('country') as CountryCode;
  invariant(countryCode, 'Missing country');

  let newPrefixPath = '';
  const path = formData.get('path');
  const hreflang = `${languageCode}-${countryCode}`;

  if (hreflang !== 'EN-US') newPrefixPath = `/${hreflang.toLowerCase()}`;

  const cartId = await session.get('cartId');

  // Update cart buyer's country code if we have a cart id
  if (cartId) {
    await updateCartBuyerIdentity(context, {
      cartId,
      buyerIdentity: {
        countryCode,
      },
    });
  }

  return redirect(newPrefixPath + path, 302);
};

----------------------------------------

TITLE: Generating Localized Route Files with Remix Config in Hydrogen
DESCRIPTION: Custom configuration for Remix that automatically generates localized route files based on the main route files. This enables path-based localization without manually duplicating route files.

LANGUAGE: javascript
CODE:
/** @type {import('@remix-run/dev').AppConfig} */

const fs = require('fs');
const path = require('path');
const esbuild = require('esbuild');
const recursive = require('recursive-readdir');

module.exports = {
  ignoredRouteFiles: ['**/.*'],
  async routes() {
    /**
     * Generates the re-export route files under $lang for url path localization
     * Note: This is temporary until we can assign multiple routes to a single route
     */
    const appDir = path.resolve(__dirname, 'app');
    const routesDir = path.resolve(appDir, 'routes');
    const langDir = path.resolve(routesDir, '$lang');

    const files = await recursive(routesDir, [
      (file) => {
        return file.replace(/\\/g, '/').match(/routes\/\$lang\//);
      },
    ]);

    // eslint-disable-next-line no-console
    console.log(`Duplicating ${files.length} route(s) for translations`);

    for (let file of files) {
      let bundle = await esbuild.build({
        entryPoints: {entry: file},
        bundle: false,
        metafile: true,
        write: false,
      });

      const moduleExports = bundle.metafile.outputs['entry.js'].exports;

      const moduleId =
        '~/' +
        path
          .relative(appDir, file)
          .replace(/\\/g, '/')
          .slice(0, -path.extname(file).length);

      const outFile = path.resolve(langDir, path.relative(routesDir, file));

      fs.mkdirSync(path.dirname(outFile), {recursive: true});
      fs.writeFileSync(
        outFile,
        `export {${moduleExports.join(', ')}} from ${JSON.stringify(
          moduleId,
        )};\n`,
      );
    }

    return {};
  },
};

----------------------------------------

TITLE: Opening Cart Drawer in Response to Add to Cart Actions
DESCRIPTION: This code shows how to use the cart fetchers hook in a layout component to automatically open a cart drawer when an add-to-cart action is detected. It demonstrates a pattern for responding to cart operations across the application.

LANGUAGE: jsx
CODE:
// app/components/Layout.jsx

function Header({title, menu}) {
  const {
    isOpen: isCartOpen,
    openDrawer: openCart,
    closeDrawer: closeCart,
  } = useDrawer();

  // Detect any add to cart form request
  const addToCartFetchers = useCartFetchers('ADD_TO_CART');

  // toggle cart drawer when adding to cart
  useEffect(() => {
    if (isCartOpen || !addToCartFetchers.length) return;
    openCart();
  }, [addToCartFetchers, isCartOpen, openCart]);

----------------------------------------

TITLE: Implementing VariantSelector with Custom Product Paths
DESCRIPTION: Example showing how to use the VariantSelector component with custom product paths, where 'handle' specifies the product handle and 'productPath' defines a custom path for the product pages.

LANGUAGE: tsx
CODE:
<VariantSelector handle="snowboard" productPath="shop" options={options}>
  {/* ... */}
</VariantSelector>

----------------------------------------

TITLE: Optimizing Collections GraphQL Query by Removing Variant Fetching
DESCRIPTION: GraphQL fragment update that removes the need to query for product variants in collection pages. This optimization lets the product route efficiently obtain the first available variants instead.

LANGUAGE: diff
CODE:
const PRODUCT_ITEM_FRAGMENT = `#graphql
  fragment MoneyProductItem on MoneyV2 {
    amount
    currencyCode
  }
  fragment ProductItem on Product {
    id
    handle
    title
    featuredImage {
      id
      altText
      url
      width
      height
    }
    priceRange {
      minVariantPrice {
        ...MoneyProductItem
      }
      maxVariantPrice {
        ...MoneyProductItem
      }
    }
-    variants(first: 1) {
-      nodes {
-        selectedOptions {
-          name
-          value
-        }
-      }
-    }
  }
` as const;

----------------------------------------

TITLE: Creating a Mini Oxygen Instance with Workers Configuration
DESCRIPTION: JavaScript code to import and create a new MiniOxygen instance with Workerd-based runtime. This example defines a simple worker that fetches content from the Hydrogen documentation site.

LANGUAGE: javascript
CODE:
import {createMiniOxygen} from '@shopify/mini-oxygen';

const miniOxygen = createMiniOxygen({
  workers: [
    {
      name: 'main',
      modules: true,
      script: `export default {
        async fetch() {
          const response = await fetch("https://hydrogen.shopify.dev");
          return response;
        }
      }`,
    },
  ],
});

----------------------------------------

TITLE: Implementing Cart Fetchers Hook for Action Detection
DESCRIPTION: This utility function creates a hook that monitors active fetchers to detect specific cart actions. It's used to respond to cart operations from anywhere in the application without direct component coupling.

LANGUAGE: jsx
CODE:
import {useFetchers} from '@remix-run/react';

export function useCartFetchers(actionName) {
  const fetchers = useFetchers();
  const cartFetchers = [];

  for (const fetcher of fetchers) {
    const formData = fetcher.submission?.formData;
    if (formData && formData.get('cartAction') === actionName) {
      cartFetchers.push(fetcher);
    }
  }
  return cartFetchers;
}

----------------------------------------

TITLE: Implementing Loader Function for Product with Selling Plans
DESCRIPTION: Loader function for the product route that handles selling plan selection. It detects and processes the selected selling plan from URL parameters and provides default selection if needed.

LANGUAGE: typescript
CODE:
export async function loader({params, request, context}: LoaderFunctionArgs) {
  const {handle} = params;
  const {storefront} = context;

  // 2. Get the selected selling plan id from the request url
  const selectedSellingPlanId =
    new URL(request.url).searchParams.get('selling_plan') ?? null;

  if (!handle) {
    throw new Error('Expected product handle to be defined');
  }

  const {product} = await storefront.query(PRODUCT_QUERY, {
    variables: {handle},
  });

  if (!product?.id) {
    throw new Response(null, {status: 404});
  }

  // 3. Get the selected selling plan from the product
  const selectedSellingPlan =
    product.sellingPlanGroups.nodes?.[0]?.sellingPlans.nodes?.find(
      (sellingPlan) => sellingPlan.id === selectedSellingPlanId,
    ) ?? null;

  /**
    4. If the product includes selling plans but no selling plan is selected, we
    redirect to the first selling plan, so that's is selected by default
  **/
  if (product.sellingPlanGroups.nodes?.length && !selectedSellingPlan) {
    const firstSellingPlanId =
      product.sellingPlanGroups.nodes[0].sellingPlans.nodes[0].id;
    return redirect(
      `/products/${product.handle}?selling_plan=${firstSellingPlanId}`,
    );
  }

  const selectedVariant = product.variants.nodes[0];

  // 5. Pass the selectedSellingPlan to the client
  return {product, selectedVariant, selectedSellingPlan};
}

----------------------------------------

TITLE: Building Hydrogen Project for Production
DESCRIPTION: Command to build the Hydrogen project for production deployment. This compiles the application and optimizes it for production environments.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Implementing Request-Based Locale Detection in Hydrogen
DESCRIPTION: A utility function to detect the user's locale preference from request headers, cookies, or URL paths. This enhances user experience but should not be the only means of locale selection.

LANGUAGE: jsx
CODE:
import {countries} from '~/data/countries';

export function getLocaleFromRequest(request: Request) {
  const url = new URL(request.url);
  const firstPathPart =
    '/' + url.pathname.substring(1).split('/')[0].toLowerCase();

  const acceptLang = request.headers.get('accept-language');
  // do something with acceptLang

  const cookies = request.headers.get('cookie');
  // extract the cookie that contains user lang preference and do something with it

  return countries[firstPathPart]
    ? {
        ...countries[firstPathPart],
        pathPrefix: firstPathPart,
      }
    : {
        ...countries[''],
        pathPrefix: '',
      };
}

----------------------------------------

TITLE: Implementing Search Fetcher Function in TypeScript
DESCRIPTION: A function that processes search requests, extracts the search term from URL parameters, and queries the Shopify Storefront API. It handles errors and formats the response with the search term and results.

LANGUAGE: typescript
CODE:
/**
 * Regular search fetcher
 */
async function search({
  request,
  context,
}: Pick<LoaderFunctionArgs, 'request' | 'context'>) {
  const {storefront} = context;
  const url = new URL(request.url);
  const searchParams = new URLSearchParams(url.search);
  const variables = getPaginationVariables(request, {pageBy: 8});
  const term = String(searchParams.get('q') || '');

  // Search articles, pages, and products for the `q` term
  const {errors, ...items} = await storefront.query(SEARCH_QUERY, {
    variables: {...variables, term},
  });

  if (!items) {
    throw new Error('No search data returned from Shopify API');
  }

  if (errors) {
    throw new Error(errors[0].message);
  }

  const total = Object.values(items).reduce((acc, {nodes}) => {
    return acc + nodes.length;
  }, 0);

  return {term, result: {total, items}};
}

----------------------------------------

TITLE: Basic Usage of the New Image Component
DESCRIPTION: Shows the simplest implementation of the new Image component which uses default props, and an alternative version using explicit src and alt properties instead of data.

LANGUAGE: jsx
CODE:
<Image data={data} />

LANGUAGE: jsx
CODE:
<Image
  data={data}
  crop="center"
  decoding="async"
  loading="lazy"
  width="100%"
  sizes="100vw"
  srcSetOptions={{
    interval: 15,
    startingWidth: 200,
    incrementSize: 200,
    placeholderWidth: 100,
  }}
/>

LANGUAGE: jsx
CODE:
<Image
  src={data.url}
  alt={data.altText}
  aspectRatio={`${data.width}/${data.height}`}
/>

----------------------------------------

TITLE: Updating GraphQL Configuration to Modern Projects Structure
DESCRIPTION: Updates the GraphQL configuration in .graphqlrc.yml to use the modern 'projects' structure, allowing for additional project schemas and more flexible document path configuration.

LANGUAGE: diff
CODE:
-schema: node_modules/@shopify/hydrogen/storefront.schema.json
+projects:
+ default:
+    schema: 'node_modules/@shopify/hydrogen/storefront.schema.json'

----------------------------------------

TITLE: Example of Rendering a Recipe with npm
DESCRIPTION: Demonstrates how to use npm to run the cookbook script with the render command to convert a recipe to GitHub-flavored Markdown.

LANGUAGE: sh
CODE:
npm run cookbook -- render --recipe my-recipe --format github

----------------------------------------

TITLE: Implementing Country Selector Component with Form Submission in Hydrogen
DESCRIPTION: A React component that displays a list of countries/locales as form buttons. When clicked, each button submits a form to change the locale and redirect to the appropriate localized path.

LANGUAGE: jsx
CODE:
import {Form, useMatches, useParams, useLocation} from '@remix-run/react';
...
export function CountrySelector() {
  const matches = useMatches();
  const rootData = matches.find((match) => match.pathname === '/');

  const countries = rootData?.countries;
  const selectedLocale = rootData?.selectedLocale;

  const {pathname, search} = useLocation();

  if (!countries || !selectedLocale) return null;

  const strippedPathname = pathname.replace(selectedLocale.pathPrefix, '');

  return (
    <div>
      {Object.keys(countries).map((countryKey) => {
        const locale = countries[countryKey];
        return (
          <Form method="post" action="/locale" key={hreflang}>
            <input type="hidden" name="language" value={locale.language} />
            <input type="hidden" name="country" value={locale.country} />
            <input type="hidden" name="path" value={`${strippedPathname}${search}`} />
            <Button
              type="submit"
            >
              {locale.label}
            </Button>
          </Form>
        );
      })}
    </div>
  );
}

----------------------------------------

TITLE: Defining Search GraphQL Fragments and Query in TypeScript
DESCRIPTION: GraphQL fragments and query for searching products, pages, and articles using the Shopify Storefront API. The query includes pagination support and returns structured data for different content types.

LANGUAGE: typescript
CODE:
/**
 * Regular search query and fragments
 * (adjust as needed)
 */
const SEARCH_PRODUCT_FRAGMENT = `#graphql
  fragment SearchProduct on Product {
    __typename
    handle
    id
    publishedAt
    title
    trackingParameters
    vendor
    selectedOrFirstAvailableVariant(
      selectedOptions: []
      ignoreUnknownOptions: true
      caseInsensitiveMatch: true
    ) {
      id
      image {
        url
        altText
        width
        height
      }
      price {
        amount
        currencyCode
      }
      compareAtPrice {
        amount
        currencyCode
      }
      selectedOptions {
        name
        value
      }
      product {
        handle
        title
      }
    }
  }
` as const;

const SEARCH_PAGE_FRAGMENT = `#graphql
  fragment SearchPage on Page {
     __typename
     handle
    id
    title
    trackingParameters
  }
` as const;

const SEARCH_ARTICLE_FRAGMENT = `#graphql
  fragment SearchArticle on Article {
    __typename
    handle
    id
    title
    trackingParameters
  }
` as const;

const PAGE_INFO_FRAGMENT = `#graphql
  fragment PageInfoFragment on PageInfo {
    hasNextPage
    hasPreviousPage
    startCursor
    endCursor
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/search
export const SEARCH_QUERY = `#graphql
  query Search(
    $country: CountryCode
    $endCursor: String
    $first: Int
    $language: LanguageCode
    $last: Int
    $term: String!
    $startCursor: String
  ) @inContext(country: $country, language: $language) {
    articles: search(
      query: $term,
      types: [ARTICLE],
      first: $first,
    ) {
      nodes {
        ...on Article {
          ...SearchArticle
        }
      }
    }
    pages: search(
      query: $term,
      types: [PAGE],
      first: $first,
    ) {
      nodes {
        ...on Page {
          ...SearchPage
        }
      }
    }
    products: search(
      after: $endCursor,
      before: $startCursor,
      first: $first,
      last: $last,
      query: $term,
      sortKey: RELEVANCE,
      types: [PRODUCT],
      unavailableProducts: HIDE,
    ) {
      nodes {
        ...on Product {
          ...SearchProduct
        }
      }
      pageInfo {
        ...PageInfoFragment
      }
    }
  }
  ${SEARCH_PRODUCT_FRAGMENT}
  ${SEARCH_PAGE_FRAGMENT}
  ${SEARCH_ARTICLE_FRAGMENT}
  ${PAGE_INFO_FRAGMENT}
` as const;

----------------------------------------

TITLE: Basic Pagination Component Implementation in Hydrogen
DESCRIPTION: The simplest implementation of the Pagination component, showing how to pass the products connection and enable infinite scrolling with the autoLoadOnScroll prop.

LANGUAGE: tsx
CODE:
export default function Products() {
  const {products} = useLoaderData<typeof loader>();

  return (
    <>
      <Pagination connection={products} autoLoadOnScroll />
    </>
  );
}

----------------------------------------

TITLE: Return Value Patterns for Remix Loaders
DESCRIPTION: Demonstrates various return patterns for Remix loader functions, including raw JSON objects, redirects, and responses with custom headers.

LANGUAGE: tsx
CODE:
export async function loader() {
  return {foo: 'bar'};
}

LANGUAGE: tsx
CODE:
import {redirect} from ''@shopify/remix-oxygen';';
export async function loader() {
  return redirect('/');
}

LANGUAGE: tsx
CODE:
export async function loader() {
  return data(
    {foo: 'bar'},
    {
      headers: {
        'Cache-Control': 'none',
      },
    },
  );
}

----------------------------------------

TITLE: Removing Redirect Logic from loadCriticalData Function
DESCRIPTION: Updates the loadCriticalData function by removing the redirect logic and the firstVariant detection. This simplifies the code and eliminates the need for redirecting to the first variant's URL.

LANGUAGE: diff
CODE:
async function loadCriticalData({
  context,
  params,
  request,
}: LoaderFunctionArgs) {
  const {handle} = params;
  const {storefront} = context;
  if (!handle) {
    throw new Error('Expected product handle to be defined');
  }
  const [{product}] = await Promise.all([
    storefront.query(PRODUCT_QUERY, {
      variables: {handle, selectedOptions: getSelectedProductOptions(request)},
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  if (!product?.id) {
    throw new Response(null, {status: 404});
  }

-  const firstVariant = product.variants.nodes[0];
-  const firstVariantIsDefault = Boolean(
-    firstVariant.selectedOptions.find(
-      (option: SelectedOption) =>
-        option.name === 'Title' && option.value === 'Default Title',
-    ),
-  );

-  if (firstVariantIsDefault) {
-    product.selectedVariant = firstVariant;
-  } else {
-    // if no selected variant was returned from the selected options,
-    // we redirect to the first variant's url with it's selected options applied
-    if (!product.selectedVariant) {
-      throw redirectToFirstVariant({product, request});
-    }
-  }

  return {
    product,
  };
}

...

-  function redirectToFirstVariant({
-    product,
-    request,
-  }: {
-    product: ProductFragment;
-    request: Request;
-  }) {
-    ...
-  }

----------------------------------------

TITLE: Updating Storefront Query Usage for GraphQL Codegen
DESCRIPTION: Illustrates the difference in how to pass queries to the Storefront client before and after implementing GraphQL Codegen, removing the need to specify generic type values.

LANGUAGE: typescript
CODE:
-import type {Shop} from '@shopify/hydrogen/storefront-api-types';
// ...
-const result = await storefront.query<{shop: Shop}>(UNIQUE_NAME_SHOP_QUERY);
+const result = await storefront.query(UNIQUE_NAME_SHOP_QUERY);

----------------------------------------

TITLE: Updating ProductItem Component to Use Simplified Variant URL
DESCRIPTION: Updates the ProductItem component to use the modified variant URL utility without requiring variant information, which is now handled by the product route.

LANGUAGE: diff
CODE:
function ProductItem({
  product,
  loading,
}: {
  product: ProductItemFragment;
  loading?: 'eager' | 'lazy';
}) {
-  const variant = product.variants.nodes[0];
-  const variantUrl = useVariantUrl(product.handle, variant.selectedOptions);
+  const variantUrl = useVariantUrl(product.handle);
  return (

----------------------------------------

TITLE: GraphQL Query with inContext Directive for Localization
DESCRIPTION: Enhances a GraphQL query with @inContext directive and variables for country and language to support internationalization. This allows the query to return localized content.

LANGUAGE: jsx
CODE:
const FEATURED_COLLECTIONS_QUERY = `#graphql
  query homepage($country: CountryCode, $language: LanguageCode)
  @inContext(country: $country, language: $language) {
    collections(first: 3, sortKey: UPDATED_AT) {
      nodes {
        id
        title
        handle
        image {
          altText
          width
          height
          url
        }
      }
    }
  }
`;

----------------------------------------

TITLE: Updating Storefront Client with getStorefrontHeaders
DESCRIPTION: Example showing how to update the createStorefrontClient implementation to use getStorefrontHeaders instead of the deprecated buyerIp and requestGroupId props. This change supports Live View cart session events.

LANGUAGE: diff
CODE:
+ import {getStorefrontHeaders} from '@shopify/remix-oxygen';
import {createStorefrontClient, storefrontRedirect} from '@shopify/hydrogen';

export default {
  async fetch(
    request: Request,
    env: Env,
    executionContext: ExecutionContext,
  ): Promise<Response> {

    const {storefront} = createStorefrontClient({
      cache,
      waitUntil,
-     buyerIp: getBuyerIp(request),
      i18n: {language: 'EN', country: 'US'},
      publicStorefrontToken: env.PUBLIC_STOREFRONT_API_TOKEN,
      privateStorefrontToken: env.PRIVATE_STOREFRONT_API_TOKEN,
      storeDomain: `https://${env.PUBLIC_STORE_DOMAIN}`,
      storefrontApiVersion: env.PUBLIC_STOREFRONT_API_VERSION || '2023-01',
      storefrontId: env.PUBLIC_STOREFRONT_ID,
-     requestGroupId: request.headers.get('request-id'),
+     storefrontHeaders: getStorefrontHeaders(request),
    });

----------------------------------------

TITLE: Updating Variant URL Utilities for Optional Parameters
DESCRIPTION: TypeScript diff updating the useVariantUrl and getVariantUrl utility functions to make the selectedOptions parameter optional. This provides more flexibility for URL generation for product variants.

LANGUAGE: diff
CODE:
export function useVariantUrl(
  handle: string,
-  selectedOptions: SelectedOption[],
+  selectedOptions?: SelectedOption[],
) {
  const {pathname} = useLocation();

  return useMemo(() => {
    return getVariantUrl({
      handle,
      pathname,
      searchParams: new URLSearchParams(),
      selectedOptions,
    });
  }, [handle, selectedOptions, pathname]);
}
export function getVariantUrl({
  handle,
  pathname,
  searchParams,
  selectedOptions,
}: {
  handle: string;
  pathname: string;
  searchParams: URLSearchParams;
-  selectedOptions: SelectedOption[];
+  selectedOptions?: SelectedOption[],
}) {
  const match = /(/[a-zA-Z]{2}-[a-zA-Z]{2}/)/g.exec(pathname);
  const isLocalePathname = match && match.length > 0;
  const path = isLocalePathname
    ? `${match![0]}products/${handle}`
    : `/products/${handle}`;

-  selectedOptions.forEach((option) => {
+  selectedOptions?.forEach((option) => {
    searchParams.set(option.name, option.value);
  });

----------------------------------------

TITLE: Basic GraphQL Products Query for Storefront API
DESCRIPTION: A GraphQL query that fetches products from the Storefront API. This query returns basic product information and the first variant's image details.

LANGUAGE: tsx
CODE:
const PRODUCTS_QUERY = `#graphql
  query (
    $country: CountryCode
    $language: LanguageCode
  ) @inContext(country: $country, language: $language) {
    products() {
      nodes {
        id
        title
        publishedAt
        handle
        variants(first: 1) {
          nodes {
            id
            image {
              url
              altText
              width
              height
            }
          }
        }
      }
    }
  }
`;

----------------------------------------

TITLE: Creating a 404 Handler for Non-Matching Routes in Remix
DESCRIPTION: A splat route handler that returns a 404 response for any routes that don't match the application's defined routes. Essential for handling invalid or non-existent language prefixes in the URL.

LANGUAGE: jsx
CODE:
export async function loader() {
  throw new Response('Not found', {status: 404});
}

export default function Component() {
  return null;
}

----------------------------------------

TITLE: Creating a Utility Function to Determine Locale from Request
DESCRIPTION: Implements a utility function that extracts locale information based on the domain or subdomain of the incoming request. Maps different domains to specific language and country combinations.

LANGUAGE: jsx
CODE:
export function getLocaleFromRequest(request: Request): Locale {
  const url = new URL(request.url);

  switch (url.host) {
    case 'ca.hydrogen.shop':
      return {
        language: 'EN',
        country: 'CA',
      };
      break;
    case 'hydrogen.au':
      return {
        language: 'EN',
        country: 'AU',
      };
      break;
    default:
      return {
        language: 'EN',
        country: 'US',
      };
  }
}

----------------------------------------

TITLE: Adding Pagination Variables to Hydrogen Loader
DESCRIPTION: Modifies the loader function to incorporate pagination variables using the getPaginationVariables helper. These variables are spread into the GraphQL query to enable cursor-based pagination.

LANGUAGE: tsx
CODE:
+  import {getPaginationVariables, PAGINATION_PAGE_INFO_FRAGMENT} from '~/components';

export async function loader({context, request}: LoaderArgs) {
  const variables = getPaginationVariables(request, 4);
  const {products} = await context.storefront.query<{
    products: ProductConnection;
  }>(PRODUCTS_QUERY, {
    variables: {
+     ...variables,
      country: context.storefront.i18n?.country,
      language: context.storefront.i18n?.language,
    },
  });

  if (!products) {
    throw new Response(null, {status: 404});
  }

  return {products};
}

----------------------------------------

TITLE: Creating Hydrogen Context in app/lib/context
DESCRIPTION: This code demonstrates how to create a centralized app context using the createHydrogenContext utility. This approach creates a reusable context configuration for the Hydrogen app, which can be imported and used in the server.

LANGUAGE: ts
CODE:
// in app/lib/context

import {createHydrogenContext} from '@shopify/hydrogen';

export async function createAppLoadContext(
  request: Request,
  env: Env,
  executionContext: ExecutionContext,
) {
    const hydrogenContext = createHydrogenContext({
      env,
      request,
      cache,
      waitUntil,
      session,
      i18n: {language: 'EN', country: 'US'},
      cart: {
        queryFragment: CART_QUERY_FRAGMENT,
      },
      // ensure to overwrite any options that is not using the default values from your server.ts
    });

  return {
    ...hydrogenContext,
    // declare additional Remix loader context
  };
}

----------------------------------------

TITLE: Updating Search GraphQL Query to Use selectedOrFirstAvailableVariant
DESCRIPTION: Updates the search product fragment to use Shopify's selectedOrFirstAvailableVariant API instead of fetching the first variant, which is more efficient and provides better performance.

LANGUAGE: diff
CODE:
const SEARCH_PRODUCT_FRAGMENT = `#graphql
  fragment SearchProduct on Product {
    __typename
    handle
    id
    publishedAt
    title
    trackingParameters
    vendor
-    variants(first: 1) {
-      nodes {
+    selectedOrFirstAvailableVariant(
+      selectedOptions: []
+      ignoreUnknownOptions: true
+      caseInsensitiveMatch: true
+    ) {
        id
        image {
          url
          altText
          width
          height
        }
        price {
          amount
          currencyCode
        }
        compareAtPrice {
          amount
          currencyCode
        }
        selectedOptions {
          name
          value
        }
        product {
          handle
          title
        }
     }
-    }
  }
` as const;

----------------------------------------

TITLE: Creating Root Data Hook in Separate File
DESCRIPTION: Moves the useRootLoaderData function from app/root.tsx to a separate file to avoid circular imports and improve HMR in Vite.

LANGUAGE: tsx
CODE:
// app/lib/root-data.ts
import { useMatches } from "@remix-run/react";
import type { SerializeFrom } from "@shopify/remix-oxygen";
import type { loader } from "~/root";

/**
 * Access the result of the root loader from a React component.
 */
export const useRootLoaderData = () => {
  const [root] = useMatches();
  return root?.data as SerializeFrom<typeof loader>;
};

----------------------------------------

TITLE: Using Storefront API with useShop Utilities
DESCRIPTION: Shows how to use the getStorefrontApiUrl and getPublicTokenHeaders functions from useShop to make fetch requests to the Storefront API.

LANGUAGE: typescript
CODE:
const {storefrontId, getPublicTokenHeaders, getStorefrontApiUrl} = useShop();

fetch(getStorefrontApiUrl(), {
  headers: getPublicTokenHeaders({contentType: 'json'})
  body: {...}
})

----------------------------------------

TITLE: Importing and Using MiniOxygen with workerd Runtime
DESCRIPTION: Example showing how to create and use a MiniOxygen instance with the default workerd-based runtime introduced in version 3.0.0. This code demonstrates creating a worker, dispatching a fetch request to it, and properly disposing of the instance.

LANGUAGE: javascript
CODE:
import {createMiniOxygen} from '@shopify/mini-oxygen';

const miniOxygen = createMiniOxygen({
  workers: [
    {
      name: 'main',
      modules: true,
      script: `export default {
        async fetch() {
          const response = await fetch("https://hydrogen.shopify.dev");
          return response;
        }
      }`
    },
  ],
});

const response = await miniOxygen.dispatchFetch('http://placeholder');
console.log(await response.text());

await miniOxygen.dispose();

----------------------------------------

TITLE: Running the Docs Previewer from Package Directories
DESCRIPTION: Command to run the documentation preview server from either the hydrogen or hydrogen-react package directories. The command points to the docs preview directory and requires a generated_docs_data.json file in the docs/generated directory.

LANGUAGE: bash
CODE:
npm run dev --prefix ../../docs/preview

----------------------------------------

TITLE: Creating API Endpoint for Countries Data in JSX
DESCRIPTION: Implements a Remix API route that serves the countries configuration data with appropriate caching headers to improve performance.

LANGUAGE: jsx
CODE:
// routes/api/countries
import {json} from '@remix-run/server-runtime';
import {CacheLong, generateCacheControlHeader} from '@shopify/hydrogen';
import {countries} from '~/data/countries';

export async function loader() {
  return json(
    {
      ...countries,
    },
    {
      headers: {
        'cache-control': generateCacheControlHeader(CacheLong()),
      },
    },
  );
}

// no-op
export default function CountriesApiRoute() {
  return null;
}

----------------------------------------

TITLE: Implementing SEO Debugger in Hydrogen React Application Root Component
DESCRIPTION: This snippet demonstrates how to integrate the SEO Debugger component into a Hydrogen application's root component. The Debugger component should be rendered just before the closing body tag to help identify SEO-related issues during development.

LANGUAGE: tsx
CODE:
// app/root.tsx
import {Seo, Debugger} from `@hydrogen/seo`; // hypothetical package name

export default function App() {
  return (
    <html lang="en">
      <head>
        <Seo />
        <Meta />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
        <Debugger />  // <- Render before the closing `body` tag
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Running Hydrogen Project in Development Mode
DESCRIPTION: Command to start the local development server for the Hydrogen project. This enables hot reloading and other development features for efficient local development.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Defining Country Data Structure in JSX
DESCRIPTION: Creates a static JSON object containing country configuration data including language, country code, display label, host, and optional path prefix for localization.

LANGUAGE: jsx
CODE:
export const countries = {
  default: {
    language: 'EN',
    country: 'US',
    label: 'United States (USD $)',
    host: 'hydrogen.shop',
  },
  'en-ca': {
    language: 'EN',
    country: 'CA',
    label: 'Canada (CAD $)',
    host: 'ca.hydrogen.shop',
  },
  'fr-ca': {
    language: 'EN',
    country: 'CA',
    label: 'Canada (Français) (CAD $)',
    host: 'ca.hydrogen.shop',
    pathPrefix: '/fr',
  },
  'en-au': {
    language: 'EN',
    country: 'AU',
    label: 'Australia (AUD $)',
    host: 'hydrogen.au',
  },
};

----------------------------------------

TITLE: Adding v3_singleFetch Flag to Vite Configuration in TypeScript
DESCRIPTION: Updates the vite.config.ts file to add the v3_singleFetch future flag for Remix, enabling the single fetch optimization feature.

LANGUAGE: diff
CODE:
+  declare module "@remix-run/server-runtime" {
+    interface Future {
+     v3_singleFetch: true;
+    }
+  }

  export default defineConfig({
    plugins: [
      hydrogen(),
      oxygen(),
      remix({
        presets: [hydrogen.preset()],
        future: {
          v3_fetcherPersist: true,
          v3_relativeSplatPath: true,
          v3_throwAbortReason: true,
          v3_lazyRouteDiscovery: true,
+         v3_singleFetch: true,
        },
      }),
      tsconfigPaths(),
    ],

----------------------------------------

TITLE: Using the Locale Utility in server.ts
DESCRIPTION: Updates the requestHandler to use the getLocaleFromRequest utility function for determining i18n settings dynamically based on the incoming request.

LANGUAGE: jsx
CODE:
return await requestHandler(
  request,
  {
    env,
    context,
    storefront: {
      ...
      storefrontApiVersion: '2022-10',
      i18n: getLocaleFromRequest(request),
    },
  },
  {
    session,
  },
);

----------------------------------------

TITLE: Updating Header Component to Fix Mobile Menu Links in Hydrogen
DESCRIPTION: This diff shows changes to the HeaderMenu component to fix an issue where menu links in the side panel weren't working properly on mobile devices. The implementation replaces a custom closeAside function with the close method from useAside hook.

LANGUAGE: diff
CODE:
// /app/components/Header.tsx

export function HeaderMenu({
  menu,
  primaryDomainUrl,
  viewport,
  publicStoreDomain,
}: {
  menu: HeaderProps['header']['menu'];
  primaryDomainUrl: HeaderProps['header']['shop']['primaryDomain']['url'];
  viewport: Viewport;
  publicStoreDomain: HeaderProps['publicStoreDomain'];
}) {
  const className = `header-menu-${viewport}`;
+  const {close} = useAside();

-  function closeAside(event: React.MouseEvent<HTMLAnchorElement>) {
-    if (viewport === 'mobile') {
-      event.preventDefault();
-      window.location.href = event.currentTarget.href;
-    }
-  }

  return (
    <nav className={className} role="navigation">
      {viewport === 'mobile' && (
        <NavLink
          end
-          onClick={closeAside}
+          onClick={close}
          prefetch="intent"
          style={activeLinkStyle}
          to="/"
        >
          Home
        </NavLink>
      )}
      {(menu || FALLBACK_HEADER_MENU).items.map((item) => {
        if (!item.url) return null;

        // if the url is internal, we strip the domain
        const url =
          item.url.includes('myshopify.com') ||
          item.url.includes(publicStoreDomain) ||
          item.url.includes(primaryDomainUrl)
            ? new URL(item.url).pathname
            : item.url;
        return (
          <NavLink
            className="header-menu-item"
            end
            key={item.id}
-            onClick={closeAside}
+            onClick={close}
            prefetch="intent"
            style={activeLinkStyle}
            to={url}
          >
            {item.title}
          </NavLink>
        );
      })}
    </nav>
  );
}

----------------------------------------

TITLE: Updating withCache for Debug Network Integration in Worker Runtime
DESCRIPTION: Code diff showing how to update the createWithCache function to include the request parameter, which enables withCache calls to be displayed in the /debug-network tool when using the Worker runtime.

LANGUAGE: diff
CODE:
  export default {
    fetch(request, env, executionContext) {
      // ...
      const withCache = createWithCache({
        cache,
        waitUntil,
  +     request,
      });
      // ...
    },
  }

----------------------------------------

TITLE: Creating a Utility for Path Localization in Hydrogen
DESCRIPTION: A utility function that prefixes a path with the current locale path prefix. It retrieves the selected locale from Remix's match data and prepends the locale path prefix to any provided path.

LANGUAGE: jsx
CODE:
export function usePrefixPathWithLocale(path: string) {
  const [root] = useMatches();
  const selectedLocale = root.data.selectedLocale;

  return selectedLocale
    ? `${selectedLocale.pathPrefix}${
        path.startsWith('/') ? path : '/' + path
      }`
    : path;
}

----------------------------------------

TITLE: JSON Structure for Image Data Object
DESCRIPTION: Shows the expected JSON structure for the data object when used with the Image component, including url, altText, width, and height properties.

LANGUAGE: json
CODE:
{
  "url": "https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg",
  "altText": "alt text",
  "width": "4000",
  "height": "4000"
}

----------------------------------------

TITLE: Using the Legacy Node.js Sandbox Runtime
DESCRIPTION: JavaScript code showing how to use the deprecated Node.js sandbox runtime from the @shopify/mini-oxygen/node export. This method is not recommended for new projects but is provided for backward compatibility.

LANGUAGE: javascript
CODE:
import {createMiniOxygen} from '@shopify/mini-oxygen/node';

const miniOxygen = createMiniOxygen({
  script: `export default {
  async fetch() {
     const response = await fetch("https://hydrogen.shopify.dev");
     return response;
  }
 }`,
});

const response = await miniOxygen.dispatchFetch('http://placeholder');

console.log(await response.text());

await miniOxygen.dispose();

----------------------------------------

TITLE: Using Localized Query with Automatic Context
DESCRIPTION: Demonstrates how to use storefront.query with a localized GraphQL query, where country and language variables are automatically injected based on the i18n context from the request.

LANGUAGE: jsx
CODE:
export async function loader({
  context: {storefront},
}: LoaderArgs) {
  return json({
    featureCollections: await storefront.query<{
      collections: CollectionConnection;
    }>(FEATURED_COLLECTIONS_QUERY),
  });
}

----------------------------------------

TITLE: Adding Required npm Dependencies for v3_routeConfig Support
DESCRIPTION: Instructions for adding the necessary npm package dependencies required to support the Remix future flag v3_routeConfig, including @remix-run/fs-routes and @remix-run/route-config.

LANGUAGE: diff
CODE:
  "devDependencies": {
    "@remix-run/dev": "^2.16.1",
+    "@remix-run/fs-routes": "^2.16.1",
+    "@remix-run/route-config": "^2.16.1",

----------------------------------------

TITLE: Mutating Data with GraphQL Mutations in Remix Actions
DESCRIPTION: Example of using the storefront.mutate function to update cart data in a Remix action. This demonstrates how to submit form data to modify the shopping cart through the Storefront API.

LANGUAGE: ts
CODE:
export async function action({request, context: {storefront}}) {
  const formData = await request.formData();

  const cartMutation = storefront.mutate(
    `#graphql
      mutation lineItemUpdate($lineId: ID!, $input: CartLineUpdateInput!) {
          lineItemUpdate(lineId: $lineId, input: $input) {
            quantity
          }
      }
    `,
    {
      /**
       * Pass variables related to the query.
       */
      variables: {
        lineId: formData.get('lineId'),
        input: formData.get('input'),
      },
      /**
       * Mutations are NEVER cached by default.
       */
    },
  );

  return json({
    status: 'ok',
  });
}

----------------------------------------

TITLE: Image Component with Non-Fixed Aspect Ratio
DESCRIPTION: Example of using the Image component with a specified width but respecting the original aspect ratio from the query data, which avoids adding height and crop parameters to the generated URLs.

LANGUAGE: jsx
CODE:
<Image data={data} width="5rem" />

----------------------------------------

TITLE: Disabling Lockfile Check Flag in CLI Command
DESCRIPTION: Command line flag to disable the lockfile check when running the build command, useful in monorepos or setups where the lockfile is not in the project directory.

LANGUAGE: bash
CODE:
--no-lockfile-check

----------------------------------------

TITLE: Implementing SellingPlanGroup Component for Rendering Subscription Options
DESCRIPTION: A component that renders selling plan options (subscriptions) for a product, allowing users to select different subscription options with visual feedback for the selected option.

LANGUAGE: typescript
CODE:
function SellingPlanGroup({
  sellingPlanGroup,
}: {
  sellingPlanGroup: SellingPlanGroup;
}) {
  return (
    <div key={sellingPlanGroup.name}>
      <p className="mb-2">
        <strong>{sellingPlanGroup.name}:</strong>
      </p>
      {sellingPlanGroup.sellingPlans.nodes.map((sellingPlan) => {
        return (
          <Link
            key={sellingPlan.id}
            prefetch="intent"
            to={sellingPlan.url}
            className={`border inline-block p-4 mr-2 leading-none py-1 border-b-[1.5px] hover:no-underline cursor-pointer transition-all duration-200
                  ${
                    sellingPlan.isSelected
                      ? 'border-gray-500'
                      : 'border-neutral-50'
                  }`}
            preventScrollReset
            replace
          >
            <p>
              {sellingPlan.options.map(
                (option) => `${option.name} ${option.value}`,
              )}
            </p>
          </Link>
        );
      })}
    </div>
  );
}

----------------------------------------

TITLE: Adding Required NPM Dev Dependencies for Remix v3_routeConfig Future Flag
DESCRIPTION: This snippet shows the package.json changes needed to add the required dev dependencies for supporting the Remix v3_routeConfig future flag.

LANGUAGE: diff
CODE:
  "devDependencies": {
    "@remix-run/dev": "^2.16.1",
+    "@remix-run/fs-routes": "^2.16.1",
+    "@remix-run/route-config": "^2.16.1",

----------------------------------------

TITLE: Supplying Locale Data in Root Loader Function
DESCRIPTION: Adding locale information to the root loader function to make it available throughout the application. This supplies both the selected locale and available countries data.

LANGUAGE: jsx
CODE:
import { countries } from '~/data/countries';
export const loader: LoaderFunction = async function loader() {
  ...
  return defer({
    ...,
    selectedLocale: await getLocaleFromRequest(request),
    countries,
  });
};

----------------------------------------

TITLE: Implementing No-JavaScript Analytics with HTML Iframe Pixel
DESCRIPTION: Example of a no-JavaScript analytics implementation using an iframe pixel in a noscript tag. This approach allows basic analytics tracking even when JavaScript is disabled in the browser.

LANGUAGE: html
CODE:
<noscript>
  <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-123456" height="0" width="0" style="display:none;visibility:hidden"></iframe>
</noscript>

----------------------------------------

TITLE: Creating a Layout Component for Remix v3_routeConfig
DESCRIPTION: This snippet demonstrates how to extract a Layout component into a separate file for compatibility with the Remix v3_routeConfig future flag.

LANGUAGE: ts
CODE:
// /app/layout.tsx
export default function Layout() {
  const nonce = useNonce();
  const data = useRouteLoaderData<RootLoader>('root');

  return (
    <html lang="en">
    ...
  );
}

----------------------------------------

TITLE: Generate Command Syntax for Creating Recipes
DESCRIPTION: Shows the syntax for the 'generate' command which creates a new recipe based on changes made to the skeleton template.

LANGUAGE: plain
CODE:
cookbook.ts generate

Generate a recipe from the skeleton's changes

Options:
  --version          Show version number                   [boolean]
  --help             Show help                             [boolean]
  --recipe           The name of the recipe to generate
                                                 [string] [required]
  --onlyFiles        Only generate the files for the recipe, not the
                     recipe.yaml file.                     [boolean]
  --referenceBranch  The reference branch to use for the recipe
                                   [string] [default: "origin/main"]

----------------------------------------

TITLE: Using Scalar Types with Storefront API TypeScript Updates
DESCRIPTION: Shows how to adjust TypeScript code to use the updated Scalar types that now require accessing 'input' or 'output' properties.

LANGUAGE: diff
CODE:
```diff
 import type {Scalars} from '@shopify/hydrogen/storefront-api-types';

 type Props = {
-  id: Scalars['ID']; // This was a string
+  id: Scalars['ID']['input']; // Need to access 'input' or 'output' to get the string
 };
```

----------------------------------------

TITLE: Updating Vite Config for Remix v3_routeConfig
DESCRIPTION: This diff shows the necessary changes to the vite.config.ts file to update from hydrogen.preset() to hydrogen.v3preset() for compatibility with the v3_routeConfig future flag.

LANGUAGE: diff
CODE:
export default defineConfig({
  plugins: [
    hydrogen(),
    oxygen(),
    remix({
-      presets: [hydrogen.preset()],
+      presets: [hydrogen.v3preset()],

----------------------------------------

TITLE: Creating a GoogleTagManager Component in React
DESCRIPTION: React component that subscribes to Hydrogen analytics events and pushes them to Google Tag Manager's dataLayer. This example demonstrates listening for the 'product_viewed' event.

LANGUAGE: tsx
CODE:
import {useAnalytics} from '@shopify/hydrogen';
import {useEffect} from 'react';

declare global {
  interface Window {
    dataLayer: any[];
  }
}

export function GoogleTagManager() {
  const {subscribe, register} = useAnalytics();
  const {ready} = register('Google Tag Manager');

  useEffect(() => {
    subscribe('product_viewed', () => {
      // Triggering a custom event in GTM when a product is viewed
      window.dataLayer.push({event: 'viewed-product'});
    });

    ready();
  }, []);

  return null;
}

----------------------------------------

TITLE: Product Component with useOptimisticVariant Example
DESCRIPTION: Example showing how to use the useOptimisticVariant hook to render product variant changes instantaneously without waiting for page transitions.

LANGUAGE: tsx
CODE:
function Product() {
  const {product, variants} = useLoaderData<typeof loader>();

  // The selectedVariant optimistically changes during page
  // transitions with one of the preloaded product variants
  const selectedVariant = useOptimisticVariant(
    product.selectedVariant,
    variants,
  );

  return <ProductMain selectedVariant={selectedVariant} />;
}

----------------------------------------

TITLE: Image Component Migration - Before and After Example
DESCRIPTION: Comparison of the deprecated Image component implementation with the new responsive approach. The new implementation automatically calculates image widths and uses aspectRatio instead of manual width settings.

LANGUAGE: jsx
CODE:
<Image
  data={image}
  widths={[400, 800, 1200]}
  width="100px"
  sizes="90vw"
  loaderOptions={{
    scale: 2,
    crop: 'left',
  }}
/>

LANGUAGE: jsx
CODE:
<Image data={image} sizes="90vw" crop="left" aspectRatio="3/2" />

----------------------------------------

TITLE: Starting Hydrogen Development Server
DESCRIPTION: Command to start the Remix development asset server and Express server in development mode. This enables hot reloading by purging the server require cache when Remix rebuilds assets.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Updating Caching Strategy for Storefront Queries
DESCRIPTION: Example showing how to override the default caching strategy with the old caching values using storefront.CacheShort() when querying products.

LANGUAGE: diff
CODE:
```diff
 const {product} = await storefront.query(
   `#graphql
     query Product($handle: String!) {
       product(handle: $handle) { id title }
     }
   `,
   {
     variables: {handle: params.productHandle},
+    /**
+     * Override the default caching strategy with the old caching values
+     */
+    cache: storefront.CacheShort(),
   },
 );
```

----------------------------------------

TITLE: Accessing Localization Parameter in Hydrogen Routes
DESCRIPTION: Shows how to access the language parameter from the route path using the useParams hook in Hydrogen.

LANGUAGE: jsx
CODE:
const {lang} = useParams();

----------------------------------------

TITLE: Defining a Section Component Type in TypeScript
DESCRIPTION: TypeScript function definition for a Section component that will render a metaobject section. This establishes the props interface using a fragment type for the component.

LANGUAGE: typescript
CODE:
export function SectionExample(props: SectionExampleFragment) {}

----------------------------------------

TITLE: Updating AppLoadContext Type in env.d.ts
DESCRIPTION: This diff shows how to update the AppLoadContext interface in env.d.ts to extend the type returned by createAppLoadContext. This provides better type inference and eliminates the need to manually maintain the interface.

LANGUAGE: diff
CODE:
// in env.d.ts

+ import type {createAppLoadContext} from '~/lib/context';

+ interface AppLoadContext extends Awaited<ReturnType<typeof createAppLoadContext>> {
- interface AppLoadContext {
-  env: Env;
-  cart: HydrogenCart;
-  storefront: Storefront;
-  customerAccount: CustomerAccount;
-  session: AppSession;
-  waitUntil: ExecutionContext['waitUntil'];
}

----------------------------------------

TITLE: Running formatting and linting commands for Hydrogen development
DESCRIPTION: Commands for checking TypeScript validity, linting code with ESLint, and formatting code with Prettier. These ensure code quality and consistency across the Hydrogen project.

LANGUAGE: bash
CODE:
npm run typecheck

LANGUAGE: bash
CODE:
npm run lint

LANGUAGE: bash
CODE:
npm run format

----------------------------------------

TITLE: Updating Cart Custom Methods from Unstable to Stable
DESCRIPTION: Shows how to migrate custom cart methods from the unstable API to the stable version by removing the __unstable suffix.

LANGUAGE: diff
CODE:
```diff
 const cart = createCartHandler({
   storefront,
   getCartId,
   setCartId: cartSetIdDefault(),
-  customMethods__unstable: {
+  customMethods: {
     addLines: async (lines, optionalParams) => {
      // ...
     },
   },
 });
```

----------------------------------------

TITLE: Removing defer Helper Usage for Loaders
DESCRIPTION: Shows how to remove the 'defer' helper and directly return objects with promises, which is supported by the v3_singleFetch feature.

LANGUAGE: diff
CODE:
- import {defer} from "@shopify/remix-oxygen";

  export async function loader({}: LoaderFunctionArgs) {
    let lazyStuff = fetchLazyStuff();
    let tasks = await fetchTasks();
-   return defer({ tasks, lazyStuff });
+   return { tasks, lazyStuff };
  }

----------------------------------------

TITLE: Setting up the Hydrogen development environment with Git and npm
DESCRIPTION: Commands for cloning the Hydrogen repository and setting up the development environment using npm. These commands get the codebase onto your local machine and prepare it for development work.

LANGUAGE: bash
CODE:
git clone git@github.com:Shopify/hydrogen.git

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Migrating from CartLinePrice to Money Component in React
DESCRIPTION: Shows how to replace the deprecated CartLinePrice component with the Money component from @shopify/hydrogen-react. The Money component provides more flexibility for price display.

LANGUAGE: diff
CODE:
- import {CartLinePrice} from '@shopify/hydrogen-react';
+ import {Money} from '@shopify/hydrogen-react';

LANGUAGE: diff
CODE:
- <CartLinePrice line={line} />
+ <Money data={line.priceV2} />

----------------------------------------

TITLE: Using withCache.fetch for Simple Fetch Requests
DESCRIPTION: TypeScript example showing how to use the new withCache.fetch method for caching simple fetch requests, including specifying conditions for when to cache a response.

LANGUAGE: ts
CODE:
const withCache = createWithCache({cache, waitUntil, request});

const {data, response} = await withCache.fetch<{data: T; error: string}>(
  'my-cms.com/api',
  {
    method: 'POST',
    headers: {'Content-type': 'application/json'},
    body,
  },
  {
    cacheStrategy: CacheLong(),
    // Cache if there are no data errors or a specific data that make this result not suited for caching
    shouldCacheResponse: (result) => !result?.error,
    cacheKey: ['my-cms', body],
    displayName: 'My CMS query',
  },
);

----------------------------------------

TITLE: Using String Interpolation with GraphQL Fragments
DESCRIPTION: Shows how to use string interpolation in query variables for reusing fragments, requiring the use of 'as const' after each interpolated template literal to help TypeScript infer types properly.

LANGUAGE: typescript
CODE:
const UNIQUE_NAME_SHOP_FRAGMENT = `#graphql
  fragment unique_name_shop_fields on Shop { id name }
`;

const UNIQUE_NAME_SHOP_QUERY = `#graphql
  query unique_name_shop { shop { ...unique_name_shop_fields } }
  ${UNIQUE_NAME_SHOP_FRAGMENT}
` as const;

----------------------------------------

TITLE: Fixing TypeScript Configuration in tsconfig.json
DESCRIPTION: Updates the types array in tsconfig.json to replace '@remix-run/node' with '@remix-run/server-runtime' to fix TypeScript compilation issues.

LANGUAGE: diff
CODE:
    "types": [
      "@shopify/oxygen-workers-types",
-      "@remix-run/node",
+      "@remix-run/server-runtime",
      "vite/client"
    ],

----------------------------------------

TITLE: Example of Updating a Recipe with npm
DESCRIPTION: Demonstrates how to use npm to run the cookbook script with the update command to refresh a specific recipe against the main branch.

LANGUAGE: sh
CODE:
npm run cookbook -- update --recipe my-recipe

----------------------------------------

TITLE: Alternative Image Component Usage with Direct Properties
DESCRIPTION: Shows how to use the Image component without the data prop, instead directly providing src, alt, and aspectRatio. This is useful when working with image data that doesn't match the standard Shopify structure.

LANGUAGE: jsx
CODE:
<Image
  src={data.url}
  alt={data.altText}
  aspectRatio={`${data.width}/${data.height}`}
/>

----------------------------------------

TITLE: Updating ProductMain Component to Support Subscriptions
DESCRIPTION: This diff shows how to modify the ProductMain component to handle selectedSellingPlan as a prop and pass it to the ProductPrice and ProductForm components, enabling subscription-based pricing and selection.

LANGUAGE: diff
CODE:
function ProductMain({
  selectedVariant,
+ selectedSellingPlan,
  product,
}: {
  product: ProductFragment;
  selectedVariant: ProductFragment['variants']['nodes'][0];
+ selectedSellingPlan: SellingPlanFragment | null;
}) {
  const {title, descriptionHtml, sellingPlanGroups} = product;

  return (
    <div className="product-main">
      <h1>{title}</h1>
      <ProductPrice
        selectedVariant={selectedVariant}
+       selectedSellingPlan={selectedSellingPlan}
      />
      <br />
      <ProductForm
        selectedVariant={selectedVariant}
+       selectedSellingPlan={selectedSellingPlan}
        sellingPlanGroups={sellingPlanGroups}
      />
      <br />
      <p>
        <strong>Description</strong>
      </p>
      <br />
      <div dangerouslySetInnerHTML={{__html: descriptionHtml}} />
      <br />
    </div>
  );
}

----------------------------------------

TITLE: Updating Content Security Policy for Google Tag Manager
DESCRIPTION: diff showing how to update the Content Security Policy to allow scripts from Google Tag Manager by adding 'www.googletagmanager.com' to the scriptSrc directive in entry.server.tsx.

LANGUAGE: diff
CODE:
//...other code

export default async function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext,
) {
- const {nonce, header, NonceProvider} = createContentSecurityPolicy();
+  const {nonce, header, NonceProvider} = createContentSecurityPolicy({
+    scriptSrc: ["'self'", 'cdn.shopify.com', 'www.googletagmanager.com'],
+ });

  //...other code

  responseHeaders.set('Content-Security-Policy', header);

  return new Response(body, {
    headers: responseHeaders,
    status: responseStatusCode,
  });
}

----------------------------------------

TITLE: Using ParsedMetafield Type with parseMetafield for Type Safety
DESCRIPTION: Demonstrates how to use the ParsedMetafield TypeScript type to ensure type safety when parsing metafields with specific types. This example shows how to work with boolean metafields.

LANGUAGE: typescript
CODE:
const metafield =
  parseMetafield<ParsedMetafield['boolean']>(rawMetafield);

// parsedValue is a boolean
if (metafield.parsedValue === true) {
}

----------------------------------------

TITLE: Setting up Route File Structure for Path Localization in Hydrogen
DESCRIPTION: Example of how to organize route files to support path-based localization in Hydrogen projects, showing a folder structure that supports both default and localized paths.

LANGUAGE: plaintext
CODE:
routes/
  index.tsx
  products
    $productHandle.tsx

LANGUAGE: plaintext
CODE:
routes/
  index.tsx
  products
    $productHandle.tsx
  $lang
    index.tsx
    products
      $productHandle.tsx

----------------------------------------

TITLE: Adding Google Tag Manager Scripts to Head and Body
DESCRIPTION: Import Script component and add GTM initialization script to the head section and noscript iframe to the body section of the root layout file.

LANGUAGE: diff
CODE:
import {
  Analytics,
  useNonce,
  getShopAnalytics,
+  Script,
} from '@shopify/hydrogen';

...

export function Layout({children}: {children?: React.ReactNode}) {
  const nonce = useNonce();
  const data = useRouteLoaderData<RootLoader>('root');

  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <Meta />
        <Links />
+        <Script dangerouslySetInnerHTML={{
+          __html: `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
+            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
+            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
+            'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
+            })(window,document,'script','dataLayer','GTM-<YOUR_GTM_ID>');`,
+        }}></Script>
      <body>
+        <noscript>
+          <iframe
+            src="https://www.googletagmanager.com/ns.html?id=GTM-<YOUR_GTM_ID>"
+            height="0"
+            width="0"
+            style={{
+              display: 'none',
+              visibility: 'hidden'
+            }}
+          ></iframe>
+        </noscript>
        <Analytics.Provider

----------------------------------------

TITLE: Fixed-size Image Component Implementation in React
DESCRIPTION: Shows how to create a fixed-size image using the new Image component by specifying exact width and height. This approach is useful for UI elements like thumbnails in a cart.

LANGUAGE: jsx
CODE:
<Image data={data} width={80} height={80} />

----------------------------------------

TITLE: Copying Partytown Library Files
DESCRIPTION: Command to run the Partytown script that copies the library files to the /public directory, making them available for the application.

LANGUAGE: bash
CODE:
npm run partytown

----------------------------------------

TITLE: Using getShopifyDomain with createStorefrontClient
DESCRIPTION: Shows how to use the getShopifyDomain utility helper to get the myshopify domain for the site using the createStorefrontClient.

LANGUAGE: typescript
CODE:
const client = createStorefrontClient(...);
client.getShopifyDomain() === `https://testing.myshopify.com`;

----------------------------------------

TITLE: Setting Up a New Hydrogen Project with Custom Cart Method Template
DESCRIPTION: Command to create a new Hydrogen project using the custom-cart-method template. This sets up all the necessary files for implementing the custom cart method functionality.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest -- --template custom-cart-method

----------------------------------------

TITLE: Example of Regenerating a Recipe with npm
DESCRIPTION: Demonstrates how to use npm to run the cookbook script with the regenerate command to refresh a specific recipe with GitHub formatting.

LANGUAGE: sh
CODE:
npm run cookbook -- regenerate --recipe my-recipe --format github

----------------------------------------

TITLE: Updating Content Security Policy for Google Tag Manager
DESCRIPTION: Modifications to the entry.server.tsx file to add necessary content security policies for Google Tag Manager, including script sources, image sources, and connection sources.

LANGUAGE: diff
CODE:
//...other code

export default async function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext,
+  context: AppLoadContext,
) {
  const {nonce, header, NonceProvider} = createContentSecurityPolicy({
    shop: {
      checkoutDomain: context.env.PUBLIC_CHECKOUT_DOMAIN,
      storeDomain: context.env.PUBLIC_STORE_DOMAIN,
    }
+    scriptSrc: [
+      "'self'",
+      'https://cdn.shopify.com',
+      'https://*.googletagmanager.com'
+    ],
+    imgSrc: [
+      "'self'",
+      'https://cdn.shopify.com',
+      'https://*.google-analytics.com',
+      'https://*.googletagmanager.com'
+    ],
+    connectSrc: [
+      "'self'",
+      'https://*.google-analytics.com',
+      'https://*.analytics.google.com',
+      'https://*.googletagmanager.com',
+    ],
    shop: {
      checkoutDomain: context.env.PUBLIC_CHECKOUT_DOMAIN,
      storeDomain: context.env.PUBLIC_STORE_DOMAIN,
    }
  });

  //...other code
}

----------------------------------------

TITLE: Refactoring Product Variant Access in Search Results Component
DESCRIPTION: Updates a search results component to use the selectedOrFirstAvailableVariant property instead of direct array access with variants.nodes[0]. This change improves code robustness by adding proper null checks and using a more reliable property access pattern.

LANGUAGE: diff
CODE:
+            const price = product?.selectedOrFirstAvailableVariant?.price;
+            const image = product?.selectedOrFirstAvailableVariant?.image;

              return (
                <div className="search-results-item" key={product.id}>
                  <Link prefetch="intent" to={productUrl}>
-                  {product.variants.nodes[0].image && (
+                  {image && (
                      <Image
-                      data={product.variants.nodes[0].image}
+                      data={image}
                        alt={product.title}
                        width={50}
                      />
                    )}
                    <div>
                      <p>{product.title}</p>
                      <small>
-                      <Money data={product.variants.nodes[0].price} />
+                      {price &&
+                        <Money data={price} />
+                      }
                      </small>
                    </div>
                  </Link>
                </div>
              );
            });

----------------------------------------

TITLE: GraphQL Query Definition Conventions
DESCRIPTION: Illustrates the recommended naming conventions for GraphQL queries and mutations, using SCREAMING_SNAKE_CASE for variable names and unique query names based on filename and content.

LANGUAGE: tsx
CODE:
// in '/product.tsx'
const QUERY_SHOP = `#graphql
  query product_shop {
    shop {
      ...
    }
  }
`;

LANGUAGE: tsx
CODE:
// in '/collection.tsx'
const MUTATION_ADD_TO_CART = `#graphql
  mutation collection_add_to_cart {
    ...
  }
`;

----------------------------------------

TITLE: Updating Cart Query Fragment to Include Selling Plan Data
DESCRIPTION: A diff showing how to modify the CART_QUERY_FRAGMENT to include selling plan allocation data, which is needed to display subscription information in the cart.

LANGUAGE: diff
CODE:
const CART_QUERY_FRAGMENT = `#graphql
  # ...other code

  fragment CartLine on CartLine {
    id
    quantity
    attributes {
      key
      value
    }
    cost {
      totalAmount {
        ...Money
      }
      amountPerQuantity {
        ...Money
      }
      compareAtAmountPerQuantity {
        ...Money
      }
    }
+   sellingPlanAllocation {
+     sellingPlan {
+        name
+     }
+    }
  }
  fragment CartApiQuery on Cart {
    lines(first: $numCartLines) {
      nodes {
        ...CartLine
      }
    }
    # ...other code
  }
` as const;

----------------------------------------

TITLE: Installing Hydrogen B2B Template with npm
DESCRIPTION: Command to create a new Hydrogen project using the B2B template. This sets up all necessary files and configurations for a B2B storefront implementation.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest -- --template b2b

----------------------------------------

TITLE: Overriding Auto-Injected Locale Variables in GraphQL Query
DESCRIPTION: An example showing how to override the auto-injected country and language variables by explicitly passing them in the query variables.

LANGUAGE: jsx
CODE:
const {shop, hero} = await storefront.query<{
  hero: CollectionHero;
  shop: HomeSeoData;
}>(HOMEPAGE_SEO_QUERY, {
  variables: {
    handle: 'freestyle',
    country: 'US',     // Always query back in US currency
    language: 'EN',    // Always query back in EN language
  },
});

----------------------------------------

TITLE: Adding withPrivacyBanner Flag for Customer Privacy
DESCRIPTION: Adds the withPrivacyBanner configuration option to enable Shopify's cookie banner for handling user consent. Without this flag, the cookie banner will not appear by default.

LANGUAGE: diff
CODE:
  return defer({
    ...
    consent: {
      checkoutDomain: env.PUBLIC_CHECKOUT_DOMAIN,
      storefrontAccessToken: env.PUBLIC_STOREFRONT_API_TOKEN,
+      withPrivacyBanner: true,
      // localize the privacy banner
      country: args.context.storefront.i18n.country,
      language: args.context.storefront.i18n.language,
    },
  });

----------------------------------------

TITLE: Returning Store Domain from Root Layout
DESCRIPTION: TypeScript code for configuring the root layout loader to return the public store domain. This enables the Edit Route button functionality for metaobject management.

LANGUAGE: typescript
CODE:
import {data, type LoaderFunctionArgs} from '@shopify/remix-oxygen';

export async function loader({context}: LoaderFunctionArgs) {
  // other code ...
  const publicStoreDomain = context.env.PUBLIC_STORE_DOMAIN;

  return data(
    {
      // other code ...
      publicStoreSubdomain: context.env.PUBLIC_SHOPIFY_STORE_DOMAIN,
    },
    {headers},
  );
}

----------------------------------------

TITLE: Basic Storefront API Loader for Products in Hydrogen
DESCRIPTION: A typical loader function that queries for products from the Storefront API without pagination. This shows the baseline implementation before adding pagination functionality.

LANGUAGE: tsx
CODE:
export async function loader({context, request}: LoaderArgs) {
  const {products} = await context.storefront.query<{
    products: ProductConnection;
  }>(PRODUCTS_QUERY, {
    variables: {
      country: context.storefront.i18n?.country,
      language: context.storefront.i18n?.language,
    },
  });

  if (!products) {
    throw new Response(null, {status: 404});
  }

  return {products};
}

----------------------------------------

TITLE: Implementing createWithCache_unstable Utility in server.ts
DESCRIPTION: Demonstrates how to set up the experimental createWithCache_unstable utility in server.ts to query third-party APIs with custom cache options, similar to useQuery from Hydrogen v1.

LANGUAGE: javascript
CODE:
import {
  createStorefrontClient,
  createWithCache_unstable,
  CacheLong,
} from '@shopify/hydrogen';

// ...

  const cache = await caches.open('hydrogen');
  const withCache = createWithCache_unstable({cache, waitUntil});

  // Create custom utilities to query third-party APIs:
  const fetchMyCMS = (query) => {
    // Prefix the cache key and make it unique based on arguments.
    return withCache(['my-cms', query], CacheLong(), () => {
      const cmsData = await (await fetch('my-cms.com/api', {
        method: 'POST',
        body: query
      })).json();

      const nextPage = (await fetch('my-cms.com/api', {
        method: 'POST',
        body: cmsData1.nextPageQuery,
      })).json();

      return {...cmsData, nextPage}
    });
  };

  const handleRequest = createRequestHandler({
    build: remixBuild,
    mode: process.env.NODE_ENV,
    getLoadContext: () => ({
      session,
      waitUntil,
      storefront,
      env,
      fetchMyCMS,
    }),
  });

----------------------------------------

TITLE: Running Hydrogen with GraphQL Codegen
DESCRIPTION: Shows commands to run the development server with the --codegen-unstable flag, or use the standalone codegen-unstable command for generating types without a dev-server.

LANGUAGE: bash
CODE:
npx shopify hydrogen dev --codegen-unstable # Dev server + codegen watcher
npx shopify hydrogen codegen-unstable # One-off codegen
npx shopify hydrogen codegen-unstable --watch # Standalone codegen watcher

----------------------------------------

TITLE: Creating a Layout Component File
DESCRIPTION: Creates a separate layout.tsx file by moving the Layout component from root.tsx. Includes the Outlet component to define where route content should be rendered.

LANGUAGE: ts
CODE:
// /app/layout.tsx
import {Outlet} from '@remix-run/react';

export default function Layout() {
  const nonce = useNonce();
  const data = useRouteLoaderData<RootLoader>('root');

  return (
    <html lang="en">
      ...
      <Outlet />
      ...
    </html>
  );
}

// Remember to remove the Layout export from your root.tsx

----------------------------------------

TITLE: Using parseGid() Helper Function with Shopify GIDs
DESCRIPTION: Demonstrates how to use the parseGid() helper function to extract resource and ID information from a Shopify Global ID (GID).

LANGUAGE: js
CODE:
import {parseGid} from '@shopify/hydrogen-react';

const {id, resource} = parseGid('gid://shopify/Order/123');

console.log(id); // 123
console.log(resource); // Order

----------------------------------------

TITLE: Adding Headers Export for Account Registration
DESCRIPTION: Adds the headers export for the account registration route to properly handle action headers with single fetch.

LANGUAGE: diff
CODE:
+ export const headers: HeadersFunction = ({actionHeaders}) => actionHeaders;

----------------------------------------

TITLE: Migrating from Unstable B2B Methods to Stable APIs
DESCRIPTION: This diff shows how to update code from using unstable B2B methods (UNSTABLE_getBuyer and UNSTABLE_setBuyer) to the now stable versions (getBuyer and setBuyer).

LANGUAGE: diff
CODE:
- customerAccount.UNSTABLE_getBuyer();
+ customerAccount.getBuyer()

- customerAccount.UNSTABLE_setBuyer({
+ customerAccount.setBuyer({
    companyLocationId,
  });

----------------------------------------

TITLE: Enabling Remix v2 Dev Server in Configuration
DESCRIPTION: Configuration update to enable Remix Hot Module Replacement (HMR) and Hot Data Revalidation (HDR) by turning on the v2_dev feature flag.

LANGUAGE: diff
CODE:
// ...
future: {
+ v2_dev: true,
  v2_meta: true,
  v2_headers: true,
  // ...
}

----------------------------------------

TITLE: Updating Multipass Login Route for Single Fetch
DESCRIPTION: Updates the multipass login route to export headers and change from 'json' to 'remixData' for compatibility with single fetch.

LANGUAGE: diff
CODE:
+ export const headers: HeadersFunction = ({actionHeaders}) => actionHeaders;

import {
- json,
+ data as remixData,
} from '@shopify/remix-oxygen';

-  return json(
+  return remixData(
    ...
  );

----------------------------------------

TITLE: Installing Hydrogen with Template from External Repository
DESCRIPTION: Commands for scaffolding Hydrogen projects using templates from external GitHub repositories. This feature allows developers to initialize projects based on reference implementations.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen -- --template shopify/hydrogen-demo-store
npm create @shopify/hydrogen -- --template github.com/shopify/hydrogen-demo-store
npm create @shopify/hydrogen -- --template https://github.com/shopify/hydrogen-demo-store

----------------------------------------

TITLE: Rendering Cart Component in React
DESCRIPTION: A basic cart component implementation that displays cart line items by mapping through the cart data provided by the loader, with links to product pages.

LANGUAGE: tsx
CODE:
// The cart component renders each line item in the cart.
export function Cart({cart}) {
  if (!cart?.lines?.nodes?.length) return <p>Nothing in cart</p>;

  return cart.lines.nodes.map((line) => (
    <div key={line.id}>
      <Link to={`/products${line.merchandise.product.handle}`}>
        {line.merchandise.product.title}
      </Link>
    </div>
  ));
}

----------------------------------------

TITLE: Checking for Development Environment in Hydrogen React
DESCRIPTION: Shows how to use the global variable __HYDROGEN_DEV__ to handle errors differently in development versus production environments. In development mode, errors are thrown directly, while in production they're logged to console.

LANGUAGE: typescript
CODE:
if (__HYDROGEN_DEV__) {
  throw new Error('Error message');
} else {
  console.error('Error message');
}

----------------------------------------

TITLE: Example of Generating a Recipe with npm
DESCRIPTION: Demonstrates how to use npm to run the cookbook script with the generate command to create a new recipe.

LANGUAGE: sh
CODE:
npm run cookbook -- generate --recipe my-recipe

----------------------------------------

TITLE: Enabling v3_lazyRouteDiscovery Future Flag in Vite Configuration
DESCRIPTION: This code snippet shows how to enable the 'v3_lazyRouteDiscovery' future flag in the Remix configuration within vite.config.ts. This flag enables lazy route discovery which is part of the Remix v3 features.

LANGUAGE: diff
CODE:
export default defineConfig({
  plugins: [
    hydrogen(),
    oxygen(),
    remix({
      presets: [hydrogen.preset()],
      future: {
        v3_fetcherPersist: true,
        v3_relativeSplatPath: true,
        v3_throwAbortReason: true,
+        v3_lazyRouteDiscovery: true,
      },
    }),
    tsconfigPaths(),
  ],

----------------------------------------

TITLE: Removing json Helper Usage for Loaders
DESCRIPTION: Demonstrates how to remove the 'json' helper from loaders and return raw objects or data directly, which is supported by the v3_singleFetch feature.

LANGUAGE: diff
CODE:
- import {json} from "@shopify/remix-oxygen";

  export async function loader({}: LoaderFunctionArgs) {
    let tasks = await fetchTasks();
-   return json(tasks);
+   return tasks;
  }

----------------------------------------

TITLE: Updating createWithCache Initialization with Request Parameter
DESCRIPTION: Code diff showing the updated initialization of createWithCache which now requires the request parameter to be passed explicitly for better caching control.

LANGUAGE: diff
CODE:
// server.ts
export default {
  async fetch(
    request: Request,
    env: Env,
    executionContext: ExecutionContext,
  ): Promise<Response> {
    try {
      // ...
-     const withCache = createWithCache({cache, waitUntil});
+     const withCache = createWithCache({cache, waitUntil, request});

----------------------------------------

TITLE: Updating Product Options GraphQL Query in Hydrogen
DESCRIPTION: Updates the product GraphQL query to use the new optionValues field instead of the deprecated values field for product options. This change affects how product options are accessed.

LANGUAGE: diff
CODE:
  const PRODUCT_FRAGMENT = `#graphql
    fragment Product on Product {
      id
      title
      options {
        name
-        values
+        optionValues {
+          name
+        }
      }

----------------------------------------

TITLE: Using getShopifyDomain from useShop Hook
DESCRIPTION: Shows how to use the getShopifyDomain function from the useShop hook to get a fully-qualified domain URL for your Shopify backend.

LANGUAGE: typescript
CODE:
const {getShopifyDomain} = useShop();
console.log(getShopifyDomain());
// 'https://test.myshopify.com'

----------------------------------------

TITLE: Updating createStorefrontClient Implementation
DESCRIPTION: Code diff showing the migration from using deprecated buyerIp and requestGroupId to using the new getStorefrontHeaders function when creating a storefront client.

LANGUAGE: diff
CODE:
+ import {getStorefrontHeaders} from '@shopify/remix-oxygen';
import {createStorefrontClient, storefrontRedirect} from '@shopify/hydrogen';

export default {
  async fetch(
    request: Request,
    env: Env,
    executionContext: ExecutionContext,
  ): Promise<Response> {

    const {storefront} = createStorefrontClient({
      cache,
      waitUntil,
-     buyerIp: getBuyerIp(request),
      i18n: {language: 'EN', country: 'US'},
      publicStorefrontToken: env.PUBLIC_STOREFRONT_API_TOKEN,
      privateStorefrontToken: env.PRIVATE_STOREFRONT_API_TOKEN,
      storeDomain: `https://${env.PUBLIC_STORE_DOMAIN}`,
      storefrontApiVersion: env.PUBLIC_STOREFRONT_API_VERSION || '2023-01',
      storefrontId: env.PUBLIC_STOREFRONT_ID,
-     requestGroupId: request.headers.get('request-id'),
+     storefrontHeaders: getStorefrontHeaders(request),
    });

----------------------------------------

TITLE: Setting up Shopify.dev documentation environment with Spin
DESCRIPTION: Commands for spinning up a development environment for Shopify.dev using Spin and opening the editor. This allows Shopify staff to preview and update Hydrogen documentation on the developer platform.

LANGUAGE: bash
CODE:
spin up shopify-dev:minimal

LANGUAGE: bash
CODE:
spin code

LANGUAGE: bash
CODE:
spin open

----------------------------------------

TITLE: Installing Hydrogen Codegen with Node Patch
DESCRIPTION: Example showing how to apply the necessary patches when using graphql-codegen CLI directly, by either using a Node loader or importing the patch in your codegen configuration file.

LANGUAGE: javascript
CODE:
import '@shopify/hydrogen-codegen/patch';
import {preset, schema, pluckConfig} from '@shopify/hydrogen-codegen';

export default {
  overwrite: true,
  pluckConfig,
  generates: {
    'storefrontapi.generated.d.ts': {
      preset,
      schema,
      documents: ['...'],
    },
  },
};

----------------------------------------

TITLE: Migrating from CartLinePrice to Money Component
DESCRIPTION: Example demonstrating how to migrate from the deprecated CartLinePrice component to the Money component. The updated approach uses the appropriate price property from the cartLine object based on the priceType.

LANGUAGE: jsx
CODE:
// before
<CartLinePrice data={cartLine} priceType="regular" />
// after
<Money data={cartLine.cost.totalAmount} />

----------------------------------------

TITLE: Updating Remix Dependencies Diff in Package.json
DESCRIPTION: Shows version updates for Remix and associated packages to version 2.8.0 in package.json, including both dependencies and devDependencies sections.

LANGUAGE: diff
CODE:
"dependencies": {
-  "@remix-run/react": "^2.6.0",
-  "@remix-run/server-runtime": "^2.6.0",
+  "@remix-run/react": "^2.8.0",
+  "@remix-run/server-runtime": "^2.8.0",
    //...
  },
  "devDependencies": {
-   "@remix-run/dev": "^2.6.0",
-   "@remix-run/eslint-config": "^2.6.0",
+  "@remix-run/dev": "^2.8.0",
+  "@remix-run/eslint-config": "^2.8.0",
    //...
  },

----------------------------------------

TITLE: ShopifyProvider Configuration Example
DESCRIPTION: Demonstrates different ways to configure the ShopifyProvider component with the storeDomain property, showing both the preferred approach and the deprecated approach.

LANGUAGE: tsx
CODE:
// preferred
<ShopifyProvider shopifyConfig={{storeDomain: 'shop'}}></ShopifyProvider>

// still works, but will be removed in the future
<ShopifyProvider shopifyConfig={{storeDomain: 'shop.myshopify.com'}}></ShopifyProvider>

----------------------------------------

TITLE: Running Hydrogen in Production Mode
DESCRIPTION: Command to start the Hydrogen application in production mode after building. This runs the optimized production version of the application.

LANGUAGE: sh
CODE:
npm start

----------------------------------------

TITLE: Integrating MultipassCheckoutButton in Cart Component
DESCRIPTION: Code showing how to update the Cart component to use the MultipassCheckoutButton. This wraps the standard checkout button to pass the customer session to checkout using Multipass.

LANGUAGE: tsx
CODE:
// app/components/Cart.tsx

import {MultipassCheckoutButton} from '~/components';

// ...

function CartCheckoutActions({checkoutUrl}: {checkoutUrl: string}) {
  if (!checkoutUrl) return null;

  return (
    <div>
      <MultipassCheckoutButton checkoutUrl={checkoutUrl}>
        <Button>Continue to Checkout</Button>
      </MultipassCheckoutButton>
    </div>
  );
}

// ...

----------------------------------------

TITLE: Extending HydrogenSession Type in TypeScript
DESCRIPTION: Shows how to update the implementation of HydrogenSession by implementing the provided interface type rather than extending the class directly.

LANGUAGE: diff
CODE:
```diff
import {
+ type HydrogenSession,
} from '@shopify/hydrogen';
- class HydrogenSession {
+ class AppSession implements HydrogenSession {
    ...
}
```

----------------------------------------

TITLE: Updating Storefront Client Configuration with getStorefrontHeaders
DESCRIPTION: Code showing how to migrate from using buyerIp and requestGroupId props to using the new getStorefrontHeaders function in createStorefrontClient. This update is part of fixing active cart session events in Live View.

LANGUAGE: diff
CODE:
+ import {getStorefrontHeaders} from '@shopify/remix-oxygen';
import {createStorefrontClient, storefrontRedirect} from '@shopify/hydrogen';

export default {
  async fetch(
    request: Request,
    env: Env,
    executionContext: ExecutionContext,
  ): Promise<Response> {

    const {storefront} = createStorefrontClient({
      cache,
      waitUntil,
-     buyerIp: getBuyerIp(request),
      i18n: {language: 'EN', country: 'US'},
      publicStorefrontToken: env.PUBLIC_STOREFRONT_API_TOKEN,
      privateStorefrontToken: env.PRIVATE_STOREFRONT_API_TOKEN,
      storeDomain: `https://${env.PUBLIC_STORE_DOMAIN}`,
      storefrontApiVersion: env.PUBLIC_STOREFRONT_API_VERSION || '2023-01',
      storefrontId: env.PUBLIC_STOREFRONT_ID,
-     requestGroupId: request.headers.get('request-id'),
+     storefrontHeaders: getStorefrontHeaders(request),
    });

----------------------------------------

TITLE: Updating VariantSelector Component Filter in React
DESCRIPTION: A breaking change to the VariantSelector component that now requires manual filtering of options that have only one value. The diff shows how to maintain the previous filtering behavior by adding a filter condition to the options prop.

LANGUAGE: diff
CODE:
 <VariantSelector
   handle={product.handle}
+  options={product.options.filter((option) => option.values.length > 1)}
-  options={product.options}
   variants={variants}>
 </VariantSelector>

----------------------------------------

TITLE: Updating Environment Type Definitions for Hydrogen
DESCRIPTION: This diff shows how to update the env.d.ts file to use the pre-defined HydrogenEnv type from @shopify/hydrogen instead of manually defining environment variables. This simplifies type definitions and ensures consistency.

LANGUAGE: diff
CODE:
// in env.d.ts

+ import type {HydrogenEnv} from '@shopify/hydrogen';

+ interface Env extends HydrogenEnv {}
- interface Env {
-   SESSION_SECRET: string;
-  PUBLIC_STOREFRONT_API_TOKEN: string;
-  PRIVATE_STOREFRONT_API_TOKEN: string;
-  PUBLIC_STORE_DOMAIN: string;
-  PUBLIC_STOREFRONT_ID: string;
-  PUBLIC_CUSTOMER_ACCOUNT_API_CLIENT_ID: string;
-  PUBLIC_CUSTOMER_ACCOUNT_API_URL: string;
-  PUBLIC_CHECKOUT_DOMAIN: string;
- }

----------------------------------------

TITLE: Rendering Product Layout with Add to Cart Button in React
DESCRIPTION: This code shows the end of a product options rendering component and the implementation of an AddToCartButton that handles adding the selected variant to the cart. It manages product availability states and cart interactions.

LANGUAGE: jsx
CODE:
            </div>
            <br />
          </div>
        ))}
        <AddToCartButton
          disabled={!selectedVariant || !selectedVariant.availableForSale}
          onClick={() => {
            open("cart");
          }}
          lines={
            selectedVariant
              ? [
                  {
                    merchandiseId: selectedVariant.id,
                    quantity: 1,
                    selectedVariant,
                  },
                ]
              : []
          }
        >
          {selectedVariant?.availableForSale ? "Add to cart" : "Sold out"}
        </AddToCartButton>
      </div>
    );
  }

----------------------------------------

TITLE: Rendering Product Layout with Add to Cart Button in React
DESCRIPTION: This code shows the end of a product options rendering component and the implementation of an AddToCartButton that handles adding the selected variant to the cart. It manages product availability states and cart interactions.

LANGUAGE: jsx
CODE:
            </div>
            <br />
          </div>
        ))}
        <AddToCartButton
          disabled={!selectedVariant || !selectedVariant.availableForSale}
          onClick={() => {
            open("cart");
          }}
          lines={
            selectedVariant
              ? [
                  {
                    merchandiseId: selectedVariant.id,
                    quantity: 1,
                    selectedVariant,
                  },
                ]
              : []
          }
        >
          {selectedVariant?.availableForSale ? "Add to cart" : "Sold out"}
        </AddToCartButton>
      </div>
    );
  }

----------------------------------------

TITLE: Updating CLI Dependencies in package.json
DESCRIPTION: Updates to the project dependencies showing how to remove @shopify/cli-hydrogen as it's now bundled with @shopify/cli. The change simplifies the dependency structure.

LANGUAGE: diff
CODE:
    "@shopify/cli": "3.64.0",
-   "@shopify/cli-hydrogen": "^8.1.1",
    "@shopify/hydrogen": "2024.7.0",

----------------------------------------

TITLE: Using parseMetafield with TypeScript in Hydrogen React
DESCRIPTION: Shows how to use the parseMetafield function to access the parsedValue property of a metafield, which is part of the breaking changes in the 2023-01 update.

LANGUAGE: typescript
CODE:
const metafield = parseMetafield(rawMetafield);

console.log(metafield.parsedValue);

----------------------------------------

TITLE: Adding URL Parameter Handling for Selected Product Options
DESCRIPTION: Adds code to handle missing search query parameters in URL when selecting a first variant. Uses the useSelectedOptionInUrlParam hook to set the search parameters without navigation.

LANGUAGE: diff
CODE:
import {
  getSelectedProductOptions,
  Analytics,
  useOptimisticVariant,
  getAdjacentAndFirstAvailableVariants,
+  useSelectedOptionInUrlParam,
} from '@shopify/hydrogen';

export default function Product() {
  const {product} = useLoaderData<typeof loader>();

  // Optimistically selects a variant with given available variant information
  const selectedVariant = useOptimisticVariant(
    product.selectedOrFirstAvailableVariant,
    getAdjacentAndFirstAvailableVariants(product),
  );

+  // Sets the search param to the selected variant without navigation
+  // only when no search params are set in the url
+  useSelectedOptionInUrlParam(selectedVariant.selectedOptions);

----------------------------------------

TITLE: Updating getSitemap Import in Hydrogen
DESCRIPTION: Updates the import statement for getSitemap from an unstable to stable API in the sitemap route file. This is part of the stabilization of sitemap functionality in Hydrogen.

LANGUAGE: diff
CODE:
- import {unstable__getSitemap as getSitemap} from '@shopify/hydrogen';
+ import {getSitemap} from '@shopify/hydrogen';

----------------------------------------

TITLE: Using Auto-Injected Locale Variables in GraphQL Query
DESCRIPTION: An example of a GraphQL query that utilizes auto-injected country and language variables. When these variables are detected in the query but not explicitly passed, they're automatically populated from the locale context.

LANGUAGE: jsx
CODE:
const {shop, hero} = await storefront.query<{
  hero: CollectionHero;
  shop: HomeSeoData;
}>(HOMEPAGE_SEO_QUERY, {
  variables: {
    handle: 'freestyle',
  },
});

const HOMEPAGE_SEO_QUERY = `#graphql
  ${COLLECTION_CONTENT_FRAGMENT}
  query collectionContent(
    $handle: String,
    $country: CountryCode,
    $language: LanguageCode
  )
  @inContext(country: $country, language: $language) {
    hero: collection(handle: $handle) {
      ...CollectionContent
    }
    shop {
      name
      description
    }
  }
`;

----------------------------------------

TITLE: Updating Shopify CLI Dependency Diff in Package.json
DESCRIPTION: Shows the version update for the @shopify/cli dependency from 3.52.0 to 3.56.3 in package.json.

LANGUAGE: diff
CODE:
- "@shopify/cli": "3.52.0",
+ "@shopify/cli": "3.56.3",

----------------------------------------

TITLE: Product Card with Optimistic Cart Addition in React
DESCRIPTION: A product card component with a CartForm configured for optimistic updates, including the selectedVariant property needed for the useOptimisticCart hook to work with LinesAdd action.

LANGUAGE: tsx
CODE:
export function ProductCard({product}) {
  return (
    <div>
      <h2>{product.title}</h2>
      <CartForm
        route="/cart"
        action={CartForm.ACTIONS.LinesAdd}
        inputs={{
          lines: [
            {
              merchandiseId: product.selectedVariant.id,
              quantity: 1,
              // The whole selected variant is not needed on the server, used in
              // the client to render the product until the server action resolves
              selectedVariant: product.selectedVariant,
            },
          ],
        }}
      >
        <button type="submit">Add to cart</button>
      </CartForm>
    </div>
  );
}

----------------------------------------

TITLE: Configuring the Loader Function with Partytown in root.tsx
DESCRIPTION: TypeScript code showing the loader function in root.tsx that passes the GTM container ID to the client and enables Partytown's atomic mode for improved performance.

LANGUAGE: typescript
CODE:
export async function loader({context}: LoaderFunctionArgs) {
  const layout = await context.storefront.query<{shop: Shop}>(LAYOUT_QUERY);
  return data(
    {
      layout,
      // 1. Pass the GTM container ID to the client
      gtmContainerId: context.env.GTM_CONTAINER_ID,
    },
    {
      // 2. Enable atomic mode
      headers: partytownAtomicHeaders(),
    },
  );
}

----------------------------------------

TITLE: Updating Storefront API Parameters for Product Variant Selection in GraphQL
DESCRIPTION: Updates query parameters in the GraphQL call to use new parameters introduced in Storefront API v2024-01, improving redirection to product default variants when there are unknown query parameters in the URL.

LANGUAGE: diff
CODE:
-   selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {
+   selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {
        ...ProductVariant
      }

----------------------------------------

TITLE: Updating TypeScript Version in package.json
DESCRIPTION: Package.json diff showing the recommended update to TypeScript v5 for Hydrogen compatibility.

LANGUAGE: diff
CODE:
  "devDependencies": {
    ...
-   "typescript": "^4.9.5",
+   "typescript": "^5.2.2",
  },

----------------------------------------

TITLE: Using Node Environment Variables for TLS Certification in Hydrogen Worker
DESCRIPTION: Example commands for using Node's environment variables to disable certificate validation or provide additional CA certificates when making HTTPS requests from the Hydrogen worker environment.

LANGUAGE: bash
CODE:
# Disable certificate validation
NODE_TLS_REJECT_UNAUTHORIZED=0 npm run dev

# Provide additional CA certificates
NODE_EXTRA_CA_CERTS=/usr/.../ca-certificates/my-file.crt npm run dev

----------------------------------------

TITLE: Updating Loader with Headers Using data API
DESCRIPTION: Demonstrates how to maintain custom headers when migrating from 'json' to 'data' API, including the necessary headers export function to merge loader headers.

LANGUAGE: diff
CODE:
-  import {json} from "@shopify/remix-oxygen";
+  import {data, type HeadersFunction} from "@shopify/remix-oxygen";

+  /**
+   * If your loader or action is returning a response with headers,
+   * make sure to export a headers function that merges your headers
+   * on your route. Otherwise, your headers may be lost.
+   * Remix doc: https://remix.run/docs/en/main/route/headers
+   **/
+  export const headers: HeadersFunction = ({loaderHeaders}) => loaderHeaders;

  export async function loader({}: LoaderFunctionArgs) {
    let tasks = await fetchTasks();
-    return json(tasks, {
+    return data(tasks, {
      headers: {
        "Cache-Control": "public, max-age=604800"
      }
    });
  }

----------------------------------------

TITLE: Basic Usage of New Image Component in React
DESCRIPTION: Shows the simplest implementation of the new Image component and its expanded version with all default props explicitly declared. The component handles responsive image generation automatically.

LANGUAGE: jsx
CODE:
<Image data={data} />

LANGUAGE: jsx
CODE:
<Image
  data={data}
  crop="center"
  decoding="async"
  loading="lazy"
  width="100%"
  sizes="100vw"
  srcSetOptions={{
    interval: 15,
    startingWidth: 200,
    incrementSize: 200,
    placeholderWidth: 100,
  }}
/>

----------------------------------------

TITLE: Basic Usage of New Image Component in React
DESCRIPTION: Shows the simplest implementation of the new Image component and its expanded version with all default props explicitly declared. The component handles responsive image generation automatically.

LANGUAGE: jsx
CODE:
<Image data={data} />

LANGUAGE: jsx
CODE:
<Image
  data={data}
  crop="center"
  decoding="async"
  loading="lazy"
  width="100%"
  sizes="100vw"
  srcSetOptions={{
    interval: 15,
    startingWidth: 200,
    incrementSize: 200,
    placeholderWidth: 100,
  }}
/>

----------------------------------------

TITLE: Configuring GraphQL Document Paths with Exclusions
DESCRIPTION: Example configuration for GraphQL document paths that excludes certain files from being used for codegen or other GraphQL utilities, useful for large codebases.

LANGUAGE: yaml
CODE:
projects:
  default:
    schema: "node_modules/@shopify/hydrogen/storefront.schema.json"
    documents:
      - "!*.d.ts"
      - "*.{ts,tsx,js,jsx}"
      - "app/**/*.{ts,tsx,js,jsx}"

----------------------------------------

TITLE: Building Documentation for Hydrogen React
DESCRIPTION: Commands for generating documentation from TypeScript source files using Shopify's documentation generation system. This must be run after adding or updating component documentation.

LANGUAGE: bash
CODE:
cd packages/hydrogen-react
npm run build-docs

----------------------------------------

TITLE: Updating Shopify CLI Dependency Version
DESCRIPTION: Updates the @shopify/cli dependency in package.json to version 3.52.0 from 3.51.0.

LANGUAGE: diff
CODE:
-   "@shopify/cli": "3.51.0",
+   "@shopify/cli": "3.52.0",

----------------------------------------

TITLE: Product Data Structure for Google Analytics 4 in JSON
DESCRIPTION: Sample JSON structure showing product data that can be sent to Google Analytics 4. Includes comprehensive product details such as ID, name, price, category hierarchy, and other metadata required for e-commerce analytics.

LANGUAGE: json
CODE:
items: [
  {
    item_id: "SKU_12345",
    item_name: "Stan and Friends Tee",
    affiliation: "Google Merchandise Store",
    currency: "USD",
    item_brand: "Google",
    item_category: "Apparel",
    item_category2: "Adult",
    item_category3: "Shirts",
    item_category4: "Crew",
    item_category5: "Short sleeve",
    item_variant: "green",
    price: 9.99,
  }
]

----------------------------------------

TITLE: Adding LiveReload Component to Root Template
DESCRIPTION: React component update to add Remix's LiveReload component to both the main App and ErrorBoundary components in the root file for enabling hot reloading.

LANGUAGE: diff
CODE:
import {
  Outlet,
  Scripts,
+ LiveReload,
  ScrollRestoration,
} from '@remix-run/react';

// ...

export default function App() {
  // ...

  return (
    <html>
      <head>
       {/* ...  */}
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
+       <LiveReload />
      </body>
    </html>
  );
}

export function ErrorBoundary() {
  // ...

  return (
    <html>
      <head>
        {/* ... */}
      </head>
      <body>
        Error!
        <Scripts />
+       <LiveReload />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Updating Vite Plugin Imports
DESCRIPTION: Updates how Vite plugins are imported and how their options are passed to Remix.

LANGUAGE: diff
CODE:
-import {hydrogen, oxygen} from '@shopify/cli-hydrogen/experimental-vite';
+import {hydrogen} from '@shopify/hydrogen/vite';
+import {oxygen} from '@shopify/mini-oxygen/vite';
import {vitePlugin as remix} from '@remix-run/dev';

export default defineConfig({
    hydrogen(),
    oxygen(),
    remix({
-     buildDirectory: 'dist',
+     presets: [hydrogen.preset()],
      future: {

----------------------------------------

TITLE: Running GraphQL Query with Type Safety in Remix Loader
DESCRIPTION: Example of running a typed GraphQL query in a Remix loader function. This demonstrates how to fetch product data from the Shopify storefront with caching and typed response handling.

LANGUAGE: ts
CODE:
import type {ProductType} from '@shopify/hydrogen/storefront-api-types';
import {json, useLoaderData, type LoaderArgs} from '@shopify/remix-oxygen';

export async function loader({params, context: {storefront}}: LoaderArgs) {
  const productQuery = storefront.query<ProductType>(
    `#graphql
      query Product($handle: String!) {
        product(handle: $handle) {
          id
          title
        }
      }
    `,
    {
      /**
       * Pass variables related to the query.
       */
      variables: {
        handle: params.handle,
      },
      /**
       * Cache your server-side query with a built-in best practice default (SWR).
       */
      cache: storefront.CacheShort(),
    },
  );

  return json({
    product: await productQuery,
  });
}

export default function Product() {
  const {product} = useLoaderData<typeof loader>();

  // ...
}

----------------------------------------

TITLE: Running GraphQL Query with Type Safety in Remix Loader
DESCRIPTION: Example of running a typed GraphQL query in a Remix loader function. This demonstrates how to fetch product data from the Shopify storefront with caching and typed response handling.

LANGUAGE: ts
CODE:
import type {ProductType} from '@shopify/hydrogen/storefront-api-types';
import {json, useLoaderData, type LoaderArgs} from '@shopify/remix-oxygen';

export async function loader({params, context: {storefront}}: LoaderArgs) {
  const productQuery = storefront.query<ProductType>(
    `#graphql
      query Product($handle: String!) {
        product(handle: $handle) {
          id
          title
        }
      }
    `,
    {
      /**
       * Pass variables related to the query.
       */
      variables: {
        handle: params.handle,
      },
      /**
       * Cache your server-side query with a built-in best practice default (SWR).
       */
      cache: storefront.CacheShort(),
    },
  );

  return json({
    product: await productQuery,
  });
}

export default function Product() {
  const {product} = useLoaderData<typeof loader>();

  // ...
}

----------------------------------------

TITLE: Overview of Cookbook Commands using CLI
DESCRIPTION: Displays the available commands for managing recipes in the Hydrogen Cookbook through the cookbook.ts script.

LANGUAGE: plain
CODE:
cookbook.ts <command>

Commands:
  cookbook.ts generate    Generate a recipe from the skeleton's changes
  cookbook.ts render      Render a recipe to a given format
  cookbook.ts apply       Apply a recipe to the current project
  cookbook.ts validate    Validate a recipe
  cookbook.ts regenerate  Regenerate a recipe
  cookbook.ts update      Update a recipe

Options:
  --version  Show version number                                       [boolean]
  --help     Show help                                                 [boolean]

----------------------------------------

TITLE: Using GraphQL Codegen in Hydrogen with Unique Query Names
DESCRIPTION: Demonstrates how to write queries/mutations in TypeScript files with unique names using the #graphql comment inside strings, which is necessary for the GraphQL Codegen feature.

LANGUAGE: typescript
CODE:
const UNIQUE_NAME_SHOP_QUERY = `#graphql
  query unique_name_shop { shop { id } }
`;

----------------------------------------

TITLE: Generated HTML Output for the Image Component
DESCRIPTION: Shows the HTML output generated by the Image component with default props, including srcset, src, alt, sizes, loading, decoding, and aspect-ratio styling.

LANGUAGE: html
CODE:
<img
  srcset="https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=300&height=300&crop=center 300w, … *13 additional sizes* … https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=3000&height=3000&crop=center 3000w"
  src="https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=100&height=100&crop=center"
  alt="alt text"
  sizes="100vw"
  loading="lazy"
  decoding="async"
  width="100px"
  height="100px"
  style="aspect-ratio: 4000 / 4000;"
/>

----------------------------------------

TITLE: Validate Command Syntax for Recipe Validation
DESCRIPTION: Shows the syntax for the 'validate' command which verifies that a recipe is valid by checking its structure and applying it to ensure it works.

LANGUAGE: plain
CODE:
cookbook.ts validate

Validate a recipe

Options:
  --version  Show version number                           [boolean]
  --help     Show help                                     [boolean]
  --recipe   The name of the recipe to validate. If not provided,
             all recipes will be validated.                 [string]

----------------------------------------

TITLE: CSS Updates for Product Option Styling
DESCRIPTION: CSS diff adding styling for non-anchor links, product option items, and product option swatches. Includes styles for hover states, disabled states, and swatch image display.

LANGUAGE: diff
CODE:
+  /*
+  * --------------------------------------------------
+  * Non anchor links
+  * --------------------------------------------------
+  */
+  .link:hover {
+    text-decoration: underline;
+    cursor: pointer;
+  }

...

-  .product-options-item {
+  .product-options-item,
+  .product-options-item:disabled {
+    padding: 0.25rem 0.5rem;
+    background-color: transparent;
+    font-size: 1rem;
+    font-family: inherit;
+  }

+  .product-option-label-swatch {
+    width: 1.25rem;
+    height: 1.25rem;
+    margin: 0.25rem 0;
+  }

+  .product-option-label-swatch img {
+    width: 100%;
+  }

----------------------------------------

TITLE: Importing SellingPlanSelector Component in Product Route
DESCRIPTION: Diff showing how to import the SellingPlanSelector component and its type into the product route file, which is necessary for implementing subscription functionality.

LANGUAGE: diff
CODE:
+ import { SellingPlanSelector, type SellingPlanGroup } from '~/components/SellingPlanSelector';

----------------------------------------

TITLE: Adding Google Web Cache Hydration Check in entry.server.jsx
DESCRIPTION: This diff adds a check in the entry.server.jsx file to prevent hydration when viewing a cached version of a Hydrogen site through Google's web cache. This prevents an infinite redirect loop that can occur in those circumstances.

LANGUAGE: diff
CODE:
+ if (!window.location.origin.includes("webcache.googleusercontent.com")) {
   startTransition(() => {
     hydrateRoot(
       document,
       <StrictMode>
         <RemixBrowser />
       </StrictMode>
     );
   });
+ }

----------------------------------------

TITLE: Updating React Dependency in package.json
DESCRIPTION: Pins React dependency to version 18.2.0 to avoid version mismatches in the project.

LANGUAGE: diff
CODE:
"dependencies": {
  ...
-   "@shopify/cli": "3.58.0",
+   "@shopify/cli": "3.59.2",
  ...
}

----------------------------------------

TITLE: Regenerate Command Syntax for Recipe Refresh
DESCRIPTION: Shows the syntax for the 'regenerate' command which applies, generates, and renders a recipe in sequence, useful for refreshing recipes after cookbook script changes.

LANGUAGE: plain
CODE:
cookbook.ts regenerate

Regenerate a recipe

Options:
  --version          Show version number                               [boolean]
  --help             Show help                                         [boolean]
  --recipe           The name of the recipe to regenerate. If not provided, all
                     recipes will be regenerated.                       [string]
  --onlyFiles        Only generate the files for the recipe, not the recipe.yaml
                     file.                                             [boolean]
  --format           The format to render the recipe in
                          [string] [required] [choices: "github", "shopify.dev"]
  --referenceBranch  The reference branch to use for the recipe
                                               [string] [default: "origin/main"]

----------------------------------------

TITLE: Updating SearchResultsPredictive Component with Improved Variant Access
DESCRIPTION: Refactors the SearchResultsPredictiveProducts component to use selectedOrFirstAvailableVariant property instead of variants.nodes array access. This change improves null checking and makes the component more resilient to data structure changes.

LANGUAGE: diff
CODE:
function SearchResultsPredictiveProducts({
  term,
  products,
  closeSearch,
}: PartialPredictiveSearchResult<'products'>) {
  if (!products.length) return null;

  return (
    <div className="predictive-search-result" key="products">
      <h5>Products</h5>
      <ul>
        {products.map((product) => {
          const productUrl = urlWithTrackingParams({
            baseUrl: `/products/${product.handle}`,
            trackingParams: product.trackingParameters,
            term: term.current,
          });

+          const price = product?.selectedOrFirstAvailableVariant?.price;
-          const image = product?.variants?.nodes?.[0].image;
+          const image = product?.selectedOrFirstAvailableVariant?.image;
          return (
            <li className="predictive-search-result-item" key={product.id}>
              <Link to={productUrl} onClick={closeSearch}>
                {image && (
                  <Image
                    alt={image.altText ?? ''}
                    src={image.url}
                    width={50}
                    height={50}
                  />
                )}
                <div>
                  <p>{product.title}</p>
                  <small>
-                    {product?.variants?.nodes?.[0].price && (
+                    {price && (
-                      <Money data={product.variants.nodes[0].price} />
+                      <Money data={price} />
                    )}
                  </small>
                </div>
              </Link>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

----------------------------------------

TITLE: Installing Hydrogen Project with Partytown Template
DESCRIPTION: Command for creating a new Hydrogen project using the Partytown template, which sets up the necessary files and configurations for integrating Partytown with Google Tag Manager.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest -- --template partytown

----------------------------------------

TITLE: Schema Command Syntax for JSON Schema Generation
DESCRIPTION: Shows the syntax for the 'schema' command which regenerates the JSON schema for recipe manifest files from the Zod schema definition.

LANGUAGE: plain
CODE:
cookbook.ts schema

Render the recipe JSON schema out of the Recipe type.

Options:
  --version  Show version number                                       [boolean]
  --help     Show help                                                 [boolean]

----------------------------------------

TITLE: Updating Footer Component to Accept Shop Prop in Hydrogen
DESCRIPTION: Updates the Footer component to accept a shop prop, which is necessary to pass the primaryDomainUrl to the FooterMenu component. This change is part of the adaptation to the Storefront API 2023-10 update.

LANGUAGE: diff
CODE:
export function Footer({
  menu,
+ shop,
}: FooterQuery & {shop: HeaderQuery['shop']}) {
  return (
    <footer className="footer">
-      <FooterMenu menu={menu} />
+      <FooterMenu menu={menu} primaryDomainUrl={shop.primaryDomain.url} />
    </footer>
  );
}

----------------------------------------

TITLE: Adding Google Web Cache Hydration Check
DESCRIPTION: Update to prevent infinite redirects when viewing cached versions of Hydrogen sites on Google by adding a conditional check before hydration in entry.server.jsx.

LANGUAGE: diff
CODE:
+ if (!window.location.origin.includes("webcache.googleusercontent.com")) {
   startTransition(() => {
     hydrateRoot(
       document,
       <StrictMode>
         <RemixBrowser />
       </StrictMode>
     );
   });
+ }

----------------------------------------

TITLE: Adding Images and Prices to Predictive Search Results in React TSX
DESCRIPTION: This code snippet shows how to enhance the SearchResultsPredictive.Products component by adding product images and prices to each result item. The diff demonstrates adding the image component and price display using the Money component for each product in the search results list.

LANGUAGE: diff
CODE:
SearchResultsPredictive.Products = function ({
  products,
  closeSearch,
  term,
}: SearchResultsPredictiveProductsProps) {
  if (!products.length) return null;

  return (
    <div className="predictive-search-result" key="products">
      <h5>Products</h5>
      <ul>
        {products.map((product) => {
          const productUrl = urlWithTrackingParams({
            baseUrl: `/products/${product.handle}`,
            trackingParams: product.trackingParameters,
            term: term.current,
          });
+         const price = product?.selectedOrFirstAvailableVariant?.price;
+         const image = product?.selectedOrFirstAvailableVariant?.image;
          return (
            <li className="predictive-search-result-item" key={product.id}>
              <Link to={productUrl} onClick={closeSearch}>
+               {image && (
+                 <Image
+                   alt={image.altText ?? ''}
+                   src={image.url}
+                   width={50}
+                   height={50}
+                 />
+               )}
                <div>
                  <p>{product.title}</p>
                  <small>
+                 {price && (
+                   <Money
+                     data={price}
+                   />
+                 )}
                  </small>
                </div>
              </Link>
            </li>
          );
        })}
      </ul>
    </div>
  )
};

----------------------------------------

TITLE: Running Hydrogen Project in Development Mode
DESCRIPTION: Command to start the Hydrogen project in local development mode. This launches a development server with hot module replacement for iterative development.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Creating a New Hydrogen Project with Classic Remix Template
DESCRIPTION: Command to initialize a new Hydrogen project using the Classic Remix template. Requires Node.js version 18.0.0 or higher to run.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest -- --template classic-remix

----------------------------------------

TITLE: Updating FooterMenu Component for primaryDomainUrl Support in Hydrogen
DESCRIPTION: Updates the FooterMenu component to accept a primaryDomainUrl prop and includes it in the internal URL check, similar to the HeaderMenu component. This ensures consistency in how internal URLs are handled across the application.

LANGUAGE: diff
CODE:
// app/components/Footer.tsx

- import type {FooterQuery} from 'storefrontapi.generated';
+ import type {FooterQuery, HeaderQuery} from 'storefrontapi.generated';

function FooterMenu({
  menu,
+  primaryDomainUrl,
}: {
  menu: FooterQuery['menu'];
+  primaryDomainUrl: HeaderQuery['shop']['primaryDomain']['url'];
}) {
  // code...

  // if the url is internal, we strip the domain
  const url =
    item.url.includes('myshopify.com') ||
    item.url.includes(publicStoreDomain) ||
+   item.url.includes(primaryDomainUrl)
      ? new URL(item.url).pathname
      : item.url;

   // ...code

  );
}

----------------------------------------

TITLE: Handling Optimistic Line Items in Cart with Visual Feedback
DESCRIPTION: An enhanced cart component that visually distinguishes optimistic line items and disables remove buttons for items that are still being processed, providing better user feedback during cart operations.

LANGUAGE: tsx
CODE:
export function Cart({cart}) {
  const optimisticCart = useOptimisticCart(cart);

  if (!cart?.lines?.nodes?.length) return <p>Nothing in cart</p>;

  return optimisticCart.lines.nodes.map((line) => (
    <div key={line.id} style={{opacity: line.isOptimistic ? 0.8 : 1}}>
      <Link to={`/products${line.merchandise.product.handle}`}>
        {line.merchandise.product.title}
      </Link>
      <CartForm
        route="/cart"
        action={CartForm.ACTIONS.LinesRemove}
        inputs={{lineIds}}
        disabled={line.isOptimistic}
      >
        <button type="submit">Remove</button>
      </CartForm>
    </div>
  ));
}

----------------------------------------

TITLE: Handling Optimistic Line Items in Cart with Visual Feedback
DESCRIPTION: An enhanced cart component that visually distinguishes optimistic line items and disables remove buttons for items that are still being processed, providing better user feedback during cart operations.

LANGUAGE: tsx
CODE:
export function Cart({cart}) {
  const optimisticCart = useOptimisticCart(cart);

  if (!cart?.lines?.nodes?.length) return <p>Nothing in cart</p>;

  return optimisticCart.lines.nodes.map((line) => (
    <div key={line.id} style={{opacity: line.isOptimistic ? 0.8 : 1}}>
      <Link to={`/products${line.merchandise.product.handle}`}>
        {line.merchandise.product.title}
      </Link>
      <CartForm
        route="/cart"
        action={CartForm.ACTIONS.LinesRemove}
        inputs={{lineIds}}
        disabled={line.isOptimistic}
      >
        <button type="submit">Remove</button>
      </CartForm>
    </div>
  ));
}

----------------------------------------

TITLE: Creating a new Hydrogen project with Google Tag Manager template
DESCRIPTION: Command to initialize a new Hydrogen project with the Google Tag Manager template using npm create.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest -- --template gtm

----------------------------------------

TITLE: Implementing a Custom Image Loader with the Image Component
DESCRIPTION: Example of creating a custom loader function for the Image component to work with third-party CDNs. The loader transforms the standard parameters into the format expected by the target CDN.

LANGUAGE: jsx
CODE:
const customLoader = ({src, width, height, crop}) => {
  return `${src}?w=${width}&h=${height}&gravity=${crop}`;
};

export default function CustomImage(props) {
  <Image loader={customLoader} {...props} />;
}

// In Use:

<CustomImage data={customCDNImageData} />;

----------------------------------------

TITLE: Updating TypeScript Declaration for App Load Context
DESCRIPTION: TypeScript declaration update for remix.env.d.ts to support the additional environment and waitUntil context properties needed for server-side network debugging.

LANGUAGE: diff
CODE:
  declare module '@shopify/remix-oxygen' {
    export interface AppLoadContext {
+     env: Env;
      cart: HydrogenCart;
      storefront: Storefront;
      session: HydrogenSession;
+      waitUntil: ExecutionContext['waitUntil'];
    }
  }

----------------------------------------

TITLE: Sample Image Data Structure in JSON
DESCRIPTION: Example of the expected data structure for the Image component, containing URL, alt text, and dimensions used to calculate the aspect ratio automatically.

LANGUAGE: json
CODE:
{
  "url": "https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg",
  "altText": "alt text",
  "width": "4000",
  "height": "4000"
}

----------------------------------------

TITLE: Updating TypeScript Version for Hydrogen Compatibility in package.json
DESCRIPTION: Shows how to update the TypeScript version in package.json to make it compatible with Hydrogen's support for TypeScript v5.

LANGUAGE: diff
CODE:
"devDependencies": {
  ...
-   "typescript": "^4.9.5",
+   "typescript": "^5.2.2",
},

----------------------------------------

TITLE: Installing Legacy Customer Account Flow Template in Hydrogen
DESCRIPTION: Command to create a new Hydrogen project using the legacy customer account flow template. This creates a reference implementation of the deprecated authentication approach.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest -- --template legacy-customer-account-flow

----------------------------------------

TITLE: Configuring Remix Routes for Localization with esbuild
DESCRIPTION: A custom Remix configuration that automatically generates duplicate routes for localization. It scans the routes directory and creates matching routes under a $lang directory, allowing the application to handle URLs with language prefixes.

LANGUAGE: jsx
CODE:
const fs = require('fs');
const path = require('path');
const esbuild = require('esbuild');
const recursive = require('recursive-readdir');

module.exports = {
  ignoredRouteFiles: ['**/.*'],
  async routes() {
    const appDir = path.resolve(__dirname, 'app');
    const routesDir = path.resolve(appDir, 'routes');
    const langDir = path.resolve(routesDir, '$lang');

    const files = await recursive(routesDir, [
      (file) => {
        return file.replace(/\\/g, '/').match(/routes\/\$lang\//); 
      },
    ]);

    // eslint-disable-next-line no-console
    console.log(`Duplicating ${files.length} route(s) for translations`);

    for (let file of files) {
      let bundle = await esbuild.build({
        entryPoints: {entry: file},
        bundle: false,
        metafile: true,
        write: false,
      });

      const moduleExports = bundle.metafile.outputs['entry.js'].exports;

      const moduleId =
        '~/' +
        path
          .relative(appDir, file)
          .replace(/\\/g, '/')
          .slice(0, -path.extname(file).length);

      const outFile = path.resolve(langDir, path.relative(routesDir, file));

      fs.mkdirSync(path.dirname(outFile), {recursive: true});
      fs.writeFileSync(
        outFile,
        `export {${moduleExports.join(', ')}} from ${JSON.stringify(
          moduleId,
        )};\n`,
      );
    }

    return {};
  },
};

----------------------------------------

TITLE: Integrating New Sections into the Sections Container Component
DESCRIPTION: Code showing how to register new section types in the main Sections component that renders all section types. This includes importing section components, adding them to the switch statement, and including their fragments in the GraphQL query.

LANGUAGE: typescript
CODE:
// other imported sections ...
import {SECTION_EXAMPLE_FRAGMENT, SectionExample} from '~/sections/SectionExample';

import type {SectionsFragment} from 'storefrontapi.generated';

export function Sections({sections}: {sections: SectionsFragment}) {
  return (
    <div className="sections">
      {sections?.references?.nodes.map((section) => {
        switch (section.type) {
          // other sections....
          case 'section_example':
             return <SectionExample />;
          default:
            // eslint-disable-next-line no-console
            console.log(`Unsupported section type: ${section.type}`);
            return null;
        }
      })}
    </div>
  );
}

export const SECTIONS_FRAGMENT = `#graphql
  fragment Sections on MetaobjectField {
    ... on MetaobjectField {
      references(first: 10) {
        nodes {
          ... on Metaobject {
            id
            type
            ...SectionHero
            ...SectionFeaturedProducts
            ...SectionFeaturedCollections
            ...SectionRichText
            ...SectionStores
            ...SectionStoreProfile
          }
        }
      }
    }
  }
  # All section fragments
  # other section fragments ...
  ${SECTION_EXAMPLE_FRAGMENT}
`;

----------------------------------------

TITLE: Installing Required Dependencies for Multipass
DESCRIPTION: Commands for installing the necessary npm packages for Multipass functionality, including snake-case key conversion and cryptography libraries with TypeScript support.

LANGUAGE: bash
CODE:
# JavaScript
npm i @snakecase-keys crypto-js

# TypeScript
npm i @snakecase-keys crypto-js
npm i --save-dev @types/crypto-js

----------------------------------------

TITLE: Dispatching Requests to Mini Oxygen
DESCRIPTION: JavaScript code demonstrating how to dispatch fetch requests to a MiniOxygen instance, process the response, and properly dispose of the instance when finished.

LANGUAGE: javascript
CODE:
const response = await miniOxygen.dispatchFetch('http://placeholder');
// Or with the following code via network request:
// const {workerUrl} = await miniOxygen.ready;
// const response = await fetch(workerUrl);

console.log(await response.text());

await miniOxygen.dispose();

----------------------------------------

TITLE: Removing unstableB2b Option from createHydrogenContext
DESCRIPTION: This diff demonstrates how to update the createHydrogenContext function call by removing the now unnecessary unstableB2b option as B2B methods are now stable.

LANGUAGE: diff
CODE:
  const hydrogenContext = createHydrogenContext({
    env,
    request,
    cache,
    waitUntil,
    session,
    i18n: {language: 'EN', country: 'US'},
-    customerAccount: {
-      unstableB2b: true,
-    },
    cart: {
      queryFragment: CART_QUERY_FRAGMENT,
    },
  });

----------------------------------------

TITLE: Parsing Metaobject Data in Section Components
DESCRIPTION: Using the parseSection utility to transform raw metaobject data into a more usable structure. This defines the expected types for the section's fields like heading and subheading.

LANGUAGE: typescript
CODE:
export function SectionExample(props: SectionExampleFragment) {
  const section = parseSection<
    SectionHeroFragment,
    {
      heading?: ParsedMetafields['single_line_text_field'];
      subheading?: ParsedMetafields['single_line_text_field'];
    }
  >(props);
}

----------------------------------------

TITLE: Validating Language Parameters in Route Loader
DESCRIPTION: A loader function for the index route that validates the language parameter in the URL. It checks if the language parameter matches the store's configured language and returns a 404 response for invalid language parameters.

LANGUAGE: jsx
CODE:
export async function loader({
  request,
  params,
  context: {storefront},
}: LoaderArgs) {
  const {language} = storefront.i18n;

  if (
    params.lang &&
    params.lang.toLowerCase() !== language.toLowerCase()
  ) {
    // If the lang URL param is defined, and it didn't match a valid localization,
    // then the lang param must be invalid, send to the 404 page
    throw new Response('Not found', {status: 404});
  }

  ...
}

----------------------------------------

TITLE: Using RichText Component for Metafields in React
DESCRIPTION: Example demonstrating how to use the RichText component to render rich_text_field metafields with custom styling for paragraph elements.

LANGUAGE: tsx
CODE:
import {RichText} from '@shopify/hydrogen-react';

export function MainRichText({metaFieldData}: {metaFieldData: string}) {
  return (
    <RichText
      data={metaFieldData}
      components={{
        paragraph({node}) {
          return <p className="customClass">{node.children}</p>;
        },
      }}
    />
  );
}

----------------------------------------

TITLE: Updating Server Request Handler Context in TypeScript
DESCRIPTION: Diff showing how to update the server.ts file to pass waitUntil and env to the request handler context, which is required for the server-side network request debug feature.

LANGUAGE: diff
CODE:
  const handleRequest = createRequestHandler({
    build: remixBuild,
    mode: process.env.NODE_ENV,
+    getLoadContext: () => ({session, storefront, env, waitUntil}),
  });

----------------------------------------

TITLE: Rendering Predictive Search UI Components in Hydrogen
DESCRIPTION: This code demonstrates how to implement the search UI by composing SearchFormPredictive and SearchResultsPredictive components. It includes input handling, search state management, and rendering of different result types (products, collections, pages, articles, and query suggestions).

LANGUAGE: typescript
CODE:
import { SearchFormPredictive } from '~/components/SearchFormPredictive';
import { SearchResultsPredictive } from '~/components/SearchResultsPredictive';

function SearchAside() {
  return (
    <Aside type="search" heading="SEARCH">
      <div className="predictive-search">
        <br />
        <SearchFormPredictive>
          {({ fetchResults, goToSearch, inputRef }) => (
            <>
              <input
                name="q"
                onChange={fetchResults}
                onFocus={fetchResults}
                placeholder="Search"
                ref={inputRef}
                type="search"
              />
              &nbsp;
              <button onClick={goToSearch}>
                Search
              </button>
            </>
          )}
        </SearchFormPredictive>

        <SearchResultsPredictive>
          {({ items, total, term, state, inputRef, closeSearch }) => {
            const { articles, collections, pages, products, queries } = items;

            if (state === 'loading' && term.current) {
              return <div>Loading...</div>;
            }

            if (!total) {
              return <SearchResultsPredictive.Empty term={term} />;
            }

            return (
              <>
                <SearchResultsPredictive.Queries
                   queries={queries}
                   term={term}
                   inputRef={inputRef}
                />
                <SearchResultsPredictive.Products
                   products={products}
                   closeSearch={closeSearch}
                   term={term}
                />
                <SearchResultsPredictive.Collections
                   collections={collections}
                   closeSearch={closeSearch}
                   term={term}
                />
                <SearchResultsPredictive.Pages
                   pages={pages}
                   closeSearch={closeSearch}
                   term={term}
                />
                <SearchResultsPredictive.Articles
                   articles={articles}
                   closeSearch={closeSearch}
                   term={term}
                />
                {term.current && total && (
                  <Link onClick={closeSearch} to={`/search?q=${term.current}`}>
                    <p>
                      View all results for <q>{term.current}</q> →
                    </p>
                  </Link>
                )}
              </>
            );
          }}
        </SearchResultsPredictive>
      </div>
    </Aside>
  );
}

----------------------------------------

TITLE: Migrating from CartLinePrice to Money Component in React
DESCRIPTION: Shows how to migrate from the deprecated CartLinePrice component to the Money component in @shopify/hydrogen-react. The Money component is now recommended for displaying cart line prices.

LANGUAGE: diff
CODE:
- import {CartLinePrice} from '@shopify/hydrogen-react';
+ import {Money} from '@shopify/hydrogen-react';

LANGUAGE: diff
CODE:
- <CartLinePrice line={line} />
+ <Money data={line.priceV2} />

----------------------------------------

TITLE: Installing Hydrogen Express Template
DESCRIPTION: Command to create a new Hydrogen project using the Express template. This uses npm create to initialize a new project based on the Express template.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest -- --template express

----------------------------------------

TITLE: Using the Hydrogen CLI Shortcut
DESCRIPTION: Shows examples of using the 'h2' shortcut alias for common Hydrogen CLI commands with abbreviated syntax.

LANGUAGE: bash
CODE:
$> h2 generate route home
$> h2 g r home # Same as the above
$> h2 check routes

----------------------------------------

TITLE: Default srcSetOptions Configuration for Image Component
DESCRIPTION: Default configuration options for the srcSetOptions prop that controls how the Image component generates the sizes in the srcset attribute, including intervals, width ranges, and placeholder dimensions.

LANGUAGE: js
CODE:
srcSetOptions = {
  intervals: 15, // The number of sizes to generate
  startingWidth: 200, // The smalles image size
  incrementSize: 200, // The increment by to increase for each size, in pixesl
  placeholderWidth: 100, // The size used for placeholder fallback images
};

----------------------------------------

TITLE: Configuring GraphQL Codegen in Hydrogen
DESCRIPTION: Shows how to create a custom codegen configuration file to tune the GraphQL Codegen feature, allowing for customization of schema and document file paths.

LANGUAGE: typescript
CODE:
import type {CodegenConfig} from '@graphql-codegen/cli';
import {preset, pluckConfig, schema} from '@shopify/hydrogen-codegen';

export default <CodegenConfig>{
  overwrite: true,
  pluckConfig,
  generates: {
    ['storefrontapi.generated.d.ts']: {
      preset,
      schema,
      documents: ['*.{ts,tsx}', 'app/**/*.{ts,tsx}'],
    },
  },
};

----------------------------------------

TITLE: Generated HTML for Fixed-size Images
DESCRIPTION: Shows the HTML output for fixed-size images, which includes a simplified srcset with only three variations for different pixel densities (1x, 2x, and 3x).

LANGUAGE: html
CODE:
<img
  srcset="
    https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=80&height=80&crop=center   1x,
    https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=160&height=160&crop=center 2x,
    https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=240&height=240&crop=center 3x
  "
  src="https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=80&height=80"
  alt="alt text"
  loading="lazy"
  width="80px"
  height="80px"
  style="aspect-ratio: 80 / 80;"
/>

----------------------------------------

TITLE: Updating Cart Route for Single Fetch Migration
DESCRIPTION: Updates the cart.tsx route file to add a headers export and change from 'json' to 'data' imports and usage for compatibility with the single fetch pattern.

LANGUAGE: diff
CODE:
  import {
-  json,
+  data,
    type LoaderFunctionArgs,
    type ActionFunctionArgs,
    type HeadersFunction
  } from '@shopify/remix-oxygen';
+ export const headers: HeadersFunction = ({actionHeaders}) => actionHeaders;

  export async function action({request, context}: ActionFunctionArgs) {
    ...
-   return json(
+   return data(
      {
        cart: cartResult,
        errors,
        warnings,
        analytics: {
          cartId,
        },
      },
      {status, headers},
    );
  }

  export async function loader({context}: LoaderFunctionArgs) {
    const {cart} = context;
-    return json(await cart.get());
+    return await cart.get();
  }

----------------------------------------

TITLE: GraphQL Query for Cart Buyer Identity Update
DESCRIPTION: Defines a GraphQL mutation for updating the cart buyer identity with the new country code, ensuring that the cart is properly localized.

LANGUAGE: graphql
CODE:
const UPDATE_CART_BUYER_COUNTRY = `#graphql
  mutation CartBuyerIdentityUpdate(
    $cartId: ID!
    $buyerIdentity: CartBuyerIdentityInput!
    $country: CountryCode = ZZ
  ) @inContext(country: $country) {
    cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) {
      cart {
        id
      }
    }
  }
`;

----------------------------------------

TITLE: Custom Image Loaders for Non-Shopify CDNs
DESCRIPTION: Shows how to implement a custom loader function for the Image component to work with non-Shopify CDNs that support URL-based transformations.

LANGUAGE: jsx
CODE:
const customLoader = ({src, width, height, crop}) => {
  return `${src}?w=${width}&h=${height}&gravity=${crop}`;
};

export default function CustomImage(props) {
  <Image loader={customLoader} {...props} />;
}

// In Use:

<CustomImage data={customCDNImageData} />;

----------------------------------------

TITLE: Installing Hydrogen Skeleton Template with npm
DESCRIPTION: Command to create a new Hydrogen project using Shopify's CLI tool. This initializes a new project with the minimal Hydrogen skeleton template for headless commerce.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest

----------------------------------------

TITLE: Creating a Global Hydrogen CLI Shortcut
DESCRIPTION: Demonstrates how to create a global 'h2' alias for the Hydrogen CLI and examples of using the shortcut for various commands.

LANGUAGE: bash
CODE:
$> npx shopify hydrogen shortcut

----------------------------------------

TITLE: Disabling Asset Inlining in Vite Config
DESCRIPTION: Updates the Vite configuration to stop inlining the favicon in base64 format to avoid issues with Content-Security-Policy.

LANGUAGE: diff
CODE:
export default defineConfig({
  plugins: [
    ...
  ],
+ build: {
+   assetsInlineLimit: 0,
+ },
});

----------------------------------------

TITLE: Render Command Syntax for Recipe Formatting
DESCRIPTION: Shows the syntax for the 'render' command which converts a recipe into a readable Markdown format, either GitHub-flavored or Shopify.dev-specific.

LANGUAGE: plain
CODE:
cookbook.ts render

Render a recipe to a given format

Options:
  --version  Show version number                                       [boolean]
  --help     Show help                                                 [boolean]
  --recipe   The name of the recipe to render                [string] [required]
  --format   The format to render the recipe in
                        [string] [required] [choices: "github", "shopify.dev"]

----------------------------------------

TITLE: srcSetOptions Configuration Object
DESCRIPTION: Shows the default configuration for srcSetOptions that controls how the Image component generates srcset URLs, including intervals, starting width, increment size, and placeholder width.

LANGUAGE: js
CODE:
srcSetOptions = {
  intervals: 15, // The number of sizes to generate
  startingWidth: 200, // The smalles image size
  incrementSize: 200, // The increment by to increase for each size, in pixesl
  placeholderWidth: 100, // The size used for placeholder fallback images
};

----------------------------------------

TITLE: Sending Custom Analytics Events with Fetch API in Hydrogen
DESCRIPTION: Code showing how to trigger custom analytics events by sending POST requests to the /events endpoint. This example demonstrates tracking promo list clicks with product handles and interaction metadata.

LANGUAGE: jsx
CODE:
return (
  <Button onClick={() => {
    fetch('/events', {
      method: 'post',
      body: JSON.stringify([{  // type of AnalyticsEvents
        eventName: 'PROMO_LIST_CLICK',
        payload: {
          products: ['abc'],  // List of product handles to fetch for
          promoName: 'Recently Viewed',
          index: '2',
        }
      }])
    })
  }}>
    <p>Product Name</p>
  </Button>
)

----------------------------------------

TITLE: Creating ProductOptionSwatch Component for Visual Option Display
DESCRIPTION: This component renders a visual representation of product options like colors or images. It accepts swatch data and displays either a colored background or an image, falling back to text display when neither is available.

LANGUAGE: tsx
CODE:
function ProductOptionSwatch({
  swatch,
  name,
}: {
  swatch?: Maybe<ProductOptionValueSwatch> | undefined;
  name: string;
}) {
  const image = swatch?.image?.previewImage?.url;
  const color = swatch?.color;

  if (!image && !color) return name;

  return (
    <div
      aria-label={name}
      className="product-option-label-swatch"
      style={{
        backgroundColor: color || "transparent",
      }}
    >
      {!!image && <img src={image} alt={name} />}
    </div>
  );
}

----------------------------------------

TITLE: Creating ProductOptionSwatch Component for Visual Option Display
DESCRIPTION: This component renders a visual representation of product options like colors or images. It accepts swatch data and displays either a colored background or an image, falling back to text display when neither is available.

LANGUAGE: tsx
CODE:
function ProductOptionSwatch({
  swatch,
  name,
}: {
  swatch?: Maybe<ProductOptionValueSwatch> | undefined;
  name: string;
}) {
  const image = swatch?.image?.previewImage?.url;
  const color = swatch?.color;

  if (!image && !color) return name;

  return (
    <div
      aria-label={name}
      className="product-option-label-swatch"
      style={{
        backgroundColor: color || "transparent",
      }}
    >
      {!!image && <img src={image} alt={name} />}
    </div>
  );
}

----------------------------------------

TITLE: Running Isolated Component Development in Hydrogen React
DESCRIPTION: Command for developing Hydrogen React components in isolation using Ladle, a lightweight alternative to Storybook for component visualization and testing.

LANGUAGE: bash
CODE:
npm run dev:story

----------------------------------------

TITLE: Installing Hydrogen React with npm
DESCRIPTION: Command to install the Hydrogen React package using npm package manager. This adds the @shopify/hydrogen-react dependency to your project.

LANGUAGE: bash
CODE:
npm i --save @shopify/hydrogen-react

----------------------------------------

TITLE: Installing Hydrogen Example Project via CLI
DESCRIPTION: Command to create a new Hydrogen project using a specific example template. This command uses npm to initialize a new project with the custom-cart-method template.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest -- --template custom-cart-method

----------------------------------------

TITLE: Moving Root Layout to Dedicated File for v3_routeConfig
DESCRIPTION: Example of moving the Layout component from root.tsx to its own file (layout.tsx) to support the Remix v3_routeConfig future flag implementation.

LANGUAGE: typescript
CODE:
// /app/layout.tsx
export default function Layout() {
  const nonce = useNonce();
  const data = useRouteLoaderData<RootLoader>('root');

  return (
    <html lang="en">
    ...
  );
}

----------------------------------------

TITLE: Supplying Selected Locale in Root Loader Function in JSX
DESCRIPTION: Adds the selected locale to the loader function's deferred response, making it available throughout the application.

LANGUAGE: jsx
CODE:
import {countries} from '~/data/countries';

export const loader: LoaderFunction = async function loader() {
  ...
  return defer({
    ...,
    selectedLocale: await getLocaleFromRequest(request),
  });
};

----------------------------------------

TITLE: Running Full App Development Environment for Hydrogen React
DESCRIPTION: Command for developing Hydrogen React components within a demo application context to test ecosystem support and component integration.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Hydrogen Preset Configuration Interface
DESCRIPTION: TypeScript interface showing configuration options for the Hydrogen preset, including options to modify namespace imports, type imports, and interface extensions.

LANGUAGE: typescript
CODE:
type HydrogenPresetConfig = {
  namespacedImportName?: string;
  importTypesFrom?: string;
  importTypes?: boolean;
  skipTypenameInOperations?: boolean;
  interfaceExtension?: (options) => string;
};

----------------------------------------

TITLE: Enhanced Locale Detection with Headers and Cookies
DESCRIPTION: An extended version of the locale detection function that considers additional factors like the Accept-Language header and cookies. While URL paths remain the primary localization method, this function provides better user experience by respecting their browser preferences.

LANGUAGE: jsx
CODE:
export function getLocaleFromRequest(request: Request): Locale {
  const url = new URL(request.url);
  const acceptLang = request.headers.get('accept-language');
  // do something with acceptLang

  const cookies = request.headers.get('cookie');
  // extract the cookie that contains user lang preference and do something with it

  switch (url.host) {
    case 'ca.hydrogen.shop':
      if (/^\/fr($|\/)/.test(url.pathname)) {
        return {
          language: 'FR',
          country: 'CA',
        };
      } else {
        return {
          language: 'EN',
          country: 'CA',
        };
      }
      break;
    case 'hydrogen.au':
      return {
        language: 'EN',
        country: 'AU',
      };
      break;
    default:
      return {
        language: 'EN',
        country: 'US',
      };
  }
}

----------------------------------------

TITLE: Running CI Checks for Hydrogen React Locally
DESCRIPTION: Command for running the same CI checks locally that would be run in the continuous integration pipeline, ensuring code meets all required standards before submitting a PR.

LANGUAGE: bash
CODE:
npm run ci:checks

----------------------------------------

TITLE: Using the useProduct Hook to Access Raw Product Data
DESCRIPTION: Demonstrates how to use the useProduct hook to access the raw product data returned from the Storefront API and display product title and description.

LANGUAGE: tsx
CODE:
function SomeComponent() {
  const {product} = useProduct();

  return (
    <div>
      <h2>{product.title}</h2>
      <h3>{product.description}</h3>
    </div>
  );
}

----------------------------------------

TITLE: Updating createWithCache Implementation in Hydrogen
DESCRIPTION: Updates the createWithCache initialization to require the request parameter, making it harder to accidentally cache undesired results. This is a breaking change that modifies how caching is implemented.

LANGUAGE: diff
CODE:
// server.ts
export default {
  async fetch(
    request: Request,
    env: Env,
    executionContext: ExecutionContext,
  ): Promise<Response> {
    try {
      // ...
-     const withCache = createWithCache({cache, waitUntil});
+     const withCache = createWithCache({cache, waitUntil, request});

----------------------------------------

TITLE: Simplifying loadDeferredData Function by Removing Variant Query
DESCRIPTION: Refactors the loadDeferredData function to remove the unnecessary variants query. This optimization is part of the new approach that no longer needs to load all variants upfront.

LANGUAGE: diff
CODE:
function loadDeferredData({context, params}: LoaderFunctionArgs) {
+  // Put any API calls that is not critical to be available on first page render
+  // For example: product reviews, product recommendations, social feeds.
-  // In order to show which variants are available in the UI, we need to query
-  // all of them. But there might be a *lot*, so instead separate the variants
-  // into it's own separate query that is deferred. So there's a brief moment
-  // where variant options might show as available when they're not, but after
-  // this deferred query resolves, the UI will update.
-  const variants = context.storefront
-    .query(VARIANTS_QUERY, {
-      variables: {handle: params.handle!},
-    })
-    .catch((error) => {
-      // Log query errors, but don't throw them so the page can still render
-      console.error(error);
-      return null;
-    });

+  return {}
-  return {
-    variants,
-  };
}

----------------------------------------

TITLE: GraphQL CodeGen Configuration with Storefront API Custom Scalars
DESCRIPTION: Shows how to configure GraphQL CodeGen to use custom scalar definitions provided by hydrogen-react for improved type safety with the Storefront API.

LANGUAGE: typescript
CODE:
import {storefrontApiCustomScalars} from '@shopify/hydrogen-react';

const config: CodegenConfig = {
  // Use the schema that's bundled with @shopify/hydrogen-react
  schema: './node_modules/@shopify/hydrogen-react/storefront.schema.json',
  generates: {
    './gql/': {
      preset: 'client',
      plugins: [],
      config: {
        // Use the custom scalar definitions that @shopify/hydrogen-react provides to improve the custom scalar types
        scalars: storefrontApiCustomScalars,
      },
    },
  },
};

----------------------------------------

TITLE: Installing Hydrogen React with Yarn
DESCRIPTION: Command to install the Hydrogen React package using Yarn package manager. This adds the @shopify/hydrogen-react dependency to your project.

LANGUAGE: bash
CODE:
yarn add @shopify/hydrogen-react

----------------------------------------

TITLE: GitHub Actions workflow step for debugging tests with tmate
DESCRIPTION: YAML configuration for adding a tmate debugging step to GitHub Actions workflows. This allows developers to SSH into the CI container to debug test failures that only occur in CI environments.

LANGUAGE: yaml
CODE:
- name: Setup tmate session
  uses: mxschmitt/action-tmate@v3

----------------------------------------

TITLE: Enabling Shopify's Cookie Banner for Customer Privacy
DESCRIPTION: Code diff demonstrating how to set up Customer Privacy with Shopify's cookie banner by adding the withPrivacyBanner parameter to the consent configuration object.

LANGUAGE: diff
CODE:
  return defer({
    ...
    consent: {
      checkoutDomain: env.PUBLIC_CHECKOUT_DOMAIN,
      storefrontAccessToken: env.PUBLIC_STOREFRONT_API_TOKEN,
+      withPrivacyBanner: true,
      // localize the privacy banner
      country: args.context.storefront.i18n.country,
      language: args.context.storefront.i18n.language,
    },
  });

----------------------------------------

TITLE: Fixing TypeScript Compilation Configuration in tsconfig.json
DESCRIPTION: A configuration change to fix TypeScript compilation by replacing @remix-run/node with @remix-run/server-runtime in the types array of tsconfig.json.

LANGUAGE: diff
CODE:
    "types": [
      "@shopify/oxygen-workers-types",
-      "@remix-run/node",
+      "@remix-run/server-runtime",
      "vite/client"
    ],

----------------------------------------

TITLE: Adding Additional Form Data to Cart Operations
DESCRIPTION: This snippet shows how to enhance the cart action and form to handle additional data such as cart notes. It demonstrates updating both the server-side action handler and the client-side form component.

LANGUAGE: jsx
CODE:
// app/routes/cart.jsx
switch (cartAction) {
  case 'ADD_TO_CART':
    ...

    const note = formData.get('cartNote') || null;

    if (!cartId) {
      result = await cartCreate({
        input: {lines, note},
        storefront,
      });

LANGUAGE: jsx
CODE:
// Add to cart form
<fetcher.Form action="/cart" method="post">
  <input type="hidden" name="cartAction" value="ADD_TO_CART" />
  <input type="hidden" name="lines" value={JSON.stringify(lines)} />
  <input type="hidden" name="cartNote" value={cartNotes} />
  <button type="submit">Add to Bag</button>
</fetcher.Form>

----------------------------------------

TITLE: Migrating from withCache Callback to withCache.run
DESCRIPTION: Code diff showing how to migrate from the original withCache callback function to the new withCache.run method, which requires specifying a shouldCacheResult property.

LANGUAGE: diff
CODE:
  const withCache = createWithCache({cache, waitUntil, request});

  const fetchMyCMS = (query) => {
-    return withCache(['my-cms', query], CacheLong(), async (params) => {
+    return withCache.run({
+      cacheKey: ['my-cms', query],
+      cacheStrategy: CacheLong(),
+      // Cache if there are no data errors or a specific data that make this result not suited for caching
+      shouldCacheResult: (result) => !result?.errors,
+    }, async(params) => {
      const response = await fetch('my-cms.com/api', {
        method: 'POST',
        body: query,
      });
      if (!response.ok) throw new Error(response.statusText);
      const {data, error} = await response.json();
      if (error || !data) throw new Error(error ?? 'Missing data');
      params.addDebugData({displayName: 'My CMS query', response});
      return data;
    });
  };

----------------------------------------

TITLE: Creating Add to Cart Components with Remix Fetcher API
DESCRIPTION: This snippet shows how to create a ProductCard component with an AddToCartButton that uses Remix's fetcher for form submissions. It demonstrates how to send product data to the cart endpoint for adding products.

LANGUAGE: jsx
CODE:
import {useFetcher} from '@remix-run/react';
import {flattenConnection} from '@shopify/hydrogen-react';

export function ProductCard({product}) {
  const firstVariant = flattenConnection(product?.variants)[0];

  return (
    <div>
      <h2>{product.title}</h2>
      <AddToCartButton
        lines={[
          {
            quantity: 1,
            merchandiseId: firstVariant.id,
          },
        ]}
      />
    </div>
  );
}

function AddToCartButton({lines}) {
  const fetcher = useFetcher();

  return (
    <fetcher.Form action="/cart" method="post">
      <input type="hidden" name="cartAction" value="ADD_TO_CART" />
      <input type="hidden" name="lines" value={JSON.stringify(lines)} />
      <button type="submit">Add to Bag</button>
    </fetcher.Form>
  );
}

----------------------------------------

TITLE: Updating Product GraphQL Query to Use optionValues
DESCRIPTION: Code diff showing how to update a product GraphQL query to use the new optionValues field instead of the deprecated values field for product options.

LANGUAGE: diff
CODE:
  const PRODUCT_FRAGMENT = `#graphql
    fragment Product on Product {
      id
      title
      options {
        name
-        values
+        optionValues {
+          name
+        }
      }

----------------------------------------

TITLE: Installing Partytown Dependency
DESCRIPTION: Command to install the Partytown package, which helps relocate resource-intensive scripts off the main thread into a web worker for performance optimization.

LANGUAGE: bash
CODE:
npm i @builder.io/partytown

----------------------------------------

TITLE: Updating package.json for Remix Route Config Support
DESCRIPTION: Adds the new Remix packages '@remix-run/fs-routes' and '@remix-run/route-config' to the devDependencies, ensuring they match the Remix version 2.16.1 or above.

LANGUAGE: diff
CODE:
  "devDependencies": {
    "@remix-run/dev": "^2.16.1",
+    "@remix-run/fs-routes": "^2.16.1",
+    "@remix-run/route-config": "^2.16.1",

----------------------------------------

TITLE: Updating VariantSelector Component to Use optionValues
DESCRIPTION: Code diff showing how to update a VariantSelector component to use the new optionValues field instead of the deprecated values field for filtering product options.

LANGUAGE: diff
CODE:
  <VariantSelector
    handle={product.handle}
-    options={product.options.filter((option) => option.values.length > 1)}
+    options={product.options.filter((option) => option.optionValues.length > 1)}
    variants={variants}
  >

----------------------------------------

TITLE: Example of Generating Schema with npm
DESCRIPTION: Demonstrates how to use npm to run the cookbook script with the schema command to regenerate the JSON schema.

LANGUAGE: sh
CODE:
npm run cookbook -- schema

----------------------------------------

TITLE: Using Cart Handler After Cart Creation in TypeScript
DESCRIPTION: Demonstrates how to use the cart handler's get() method immediately after creating a new cart, addressing a bug fix where cart could be null even after creation.

LANGUAGE: typescript
CODE:
import {
  createCartHandler,
  cartGetIdDefault,
  cartSetIdDefault,
} from '@shopify/hydrogen';

const cartHandler = createCartHandler({
  storefront,
  getCartId: cartGetIdDefault(request.headers),
  setCartId: cartSetIdDefault(),
  cartQueryFragment: CART_QUERY_FRAGMENT,
  cartMutateFragment: CART_MUTATE_FRAGMENT,
});

await cartHandler.addLines([{merchandiseId: '...'}]);
// .get() now returns the cart as expected
const cart = await cartHandler.get();

----------------------------------------

TITLE: Building and Testing Shopify CLI Hydrogen Extension Locally
DESCRIPTION: Instructions for building and testing changes to the Shopify CLI Hydrogen extension locally. This includes steps for building the package, running commands, and modifying template files.

LANGUAGE: bash
CODE:
npm run build

LANGUAGE: bash
CODE:
npx shopify hydrogen

LANGUAGE: bash
CODE:
npx shopify hydrogen init

----------------------------------------

TITLE: Running tests in the Hydrogen project
DESCRIPTION: Commands for running tests using vitest. These commands allow developers to run tests once or in watch mode to automatically re-run when files change.

LANGUAGE: bash
CODE:
npm run test

LANGUAGE: bash
CODE:
npm run test:watch

----------------------------------------

TITLE: Generated HTML Output from Image Component
DESCRIPTION: Shows the HTML output generated by the Image component, including the srcset attribute with multiple image sizes, loading behavior, and styling for aspect ratio. The component generates 15 sizes by default.

LANGUAGE: html
CODE:
<img
  srcset="https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=300&height=300&crop=center 300w, … *13 additional sizes* … https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=3000&height=3000&crop=center 3000w"
  src="https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=100&height=100&crop=center"
  alt="alt text"
  sizes="100vw"
  loading="lazy"
  decoding="async"
  width="100px"
  height="100px"
  style="aspect-ratio: 4000 / 4000;"
/>

----------------------------------------

TITLE: Updating VariantSelector Component in Hydrogen
DESCRIPTION: Updates the VariantSelector component to use the new optionValues field instead of values for product options. This modification adapts the component to work with the updated product option structure.

LANGUAGE: diff
CODE:
  <VariantSelector
    handle={product.handle}
-    options={product.options.filter((option) => option.values.length > 1)}
+    options={product.options.filter((option) => option.optionValues.length > 1)}
    variants={variants}
  >

----------------------------------------

TITLE: HTML Output for Fixed-size Image Component
DESCRIPTION: Shows the HTML generated for fixed-size images, which produces a smaller srcset with just 3 sizes for different pixel densities (1x, 2x, 3x) rather than the full responsive range.

LANGUAGE: html
CODE:
<img
  srcset="
    https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=80&height=80&crop=center   1x,
    https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=160&height=160&crop=center 2x,
    https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=240&height=240&crop=center 3x
  "
  src="https://cdn.shopify.com/s/files/1/0551/4566/0472/products/Main.jpg?width=80&height=80"
  alt="alt text"
  loading="lazy"
  width="80px"
  height="80px"
  style="aspect-ratio: 80 / 80;"
/>

----------------------------------------

TITLE: Installing Hydrogen with Multipass Template
DESCRIPTION: Command to create a new Hydrogen project using the Multipass template. This is the quickest way to get started with a pre-configured setup.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest -- --template multipass

----------------------------------------

TITLE: Adding Nonce to RemixServer Component in Entry Server File
DESCRIPTION: Updates the entry.server.tsx file to add the 'nonce' prop to the RemixServer component, which is required for the v3_singleFetch feature.

LANGUAGE: diff
CODE:
const body = await renderToReadableStream(
  <NonceProvider>
    <RemixServer
      context={remixContext}
      url={request.url}
+     nonce={nonce}
    />
  </NonceProvider>,

----------------------------------------

TITLE: Custom Loader Type Definition for Image Component in TypeScript
DESCRIPTION: Type definition for the custom loader function that can be used with the Image component, allowing integration with non-Shopify CDNs that support URL-based image transformations.

LANGUAGE: ts
CODE:
type LoaderParams = {
  /** The base URL of the image */
  src?: ImageType['url'];
  /** The URL param that controls width */
  width?: number;
  /** The URL param that controls height */
  height?: number;
  /** The URL param that controls the cropping region */
  crop?: Crop;
};

----------------------------------------

TITLE: Example of Validating a Recipe with npm
DESCRIPTION: Demonstrates how to use npm to run the cookbook script with the validate command to check a specific recipe.

LANGUAGE: sh
CODE:
npm run cookbook -- validate --recipe my-recipe

----------------------------------------

TITLE: Disabling Powered-By Header Configuration
DESCRIPTION: Code example showing how to disable the default Powered-By header when creating a request handler in the server configuration.

LANGUAGE: typescript
CODE:
import {createRequestHandler} from '@shopify/remix-oxygen';

export default {
  async fetch(request) {
    // ...
    const handleRequest = createRequestHandler({
      // ... other properties included
      poweredByHeader: false,
    });
    // ...
  },
};

----------------------------------------

TITLE: Adding Headers Export for Customer Account Flow
DESCRIPTION: Shows the necessary headers export required for root.tsx and account.tsx routes when using legacy customer account or multipass features.

LANGUAGE: diff
CODE:
+ export const headers: HeadersFunction = ({loaderHeaders}) => loaderHeaders;

----------------------------------------

TITLE: Updating Lang Attribute in root.tsx Components
DESCRIPTION: Sets the lang attribute in HTML elements for App, CatchBoundary, and ErrorBoundary components to match your locale preference. This ensures proper language identification for accessibility and SEO.

LANGUAGE: jsx
CODE:
export default function App() {
  return (
    <html lang="EN">
      ...
    </html>
  );
}

export function CatchBoundary() {
  return (
    <html lang="EN">
      ...
    </html>
  );
}

export ErrorBoundary({error}: {error: Error}) {
  return (
    <html lang="EN">
      ...
    </html>
  );
}

----------------------------------------

TITLE: Configuring i18n Settings in server.ts for Hydrogen
DESCRIPTION: Updates the requestHandler in server.ts to specify language and country preferences for internationalization. This sets the default locale for the Shopify storefront API.

LANGUAGE: jsx
CODE:
return await requestHandler(
  request,
  {
    env,
    context,
    storefront: {
      ...
      storefrontApiVersion: '2022-10',
      i18n: {
        language: 'EN',
        country: 'CA',
      },
    },
  },
  {
    session,
  },
);

----------------------------------------

TITLE: Implementing SEO Component in Remix Root Component
DESCRIPTION: This snippet demonstrates how to render the Seo component in the app's root component. The component should be placed in the head section before the Meta and Links components.

LANGUAGE: tsx
CODE:
// app/root.tsx
import {Seo} from `@hydrogen/seo`; // hypothetical package name

export default function App() {
  return (
    <html lang="en">
      <head>
        <Seo /> // <- Render inside the header before the Meta and Links components
        <Meta />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Implementing SEO Component in Remix Root Component
DESCRIPTION: This snippet demonstrates how to render the Seo component in the app's root component. The component should be placed in the head section before the Meta and Links components.

LANGUAGE: tsx
CODE:
// app/root.tsx
import {Seo} from `@hydrogen/seo`; // hypothetical package name

export default function App() {
  return (
    <html lang="en">
      <head>
        <Seo /> // <- Render inside the header before the Meta and Links components
        <Meta />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Overriding Locale Settings in GraphQL Query
DESCRIPTION: Shows how to override the automatic locale context by explicitly providing country and language variables to a GraphQL query. This allows forcing specific localization regardless of the request context.

LANGUAGE: jsx
CODE:
export async function loader({
  context: {storefront},
}: LoaderArgs) {
  return json({
    featureCollection: await storefront.query<{
      collections: CollectionConnection;
    }>(FEATURED_COLLECTIONS_QUERY, {
      variables: {
        country: 'CA',    // Always query back in CA currency
        language: 'FR',   // Always query back in FR language
      }
    }),
  });
}

----------------------------------------

TITLE: Updating Sitemap Generation Import from Hydrogen
DESCRIPTION: Code diff showing how to update the import statement for the getSitemap function in a sitemap route file, as the function is now stable and no longer in the unstable namespace.

LANGUAGE: diff
CODE:
- import {unstable__getSitemap as getSitemap} from '@shopify/hydrogen';
+ import {getSitemap} from '@shopify/hydrogen';

----------------------------------------

TITLE: Using UILocales with Customer Account Login Method
DESCRIPTION: This snippet shows how to explicitly set UILocales in the login method, which will override any language settings from the context or constructor.

LANGUAGE: ts
CODE:
export async function loader({request, context}: LoaderFunctionArgs) {
  return context.customerAccount.login({
    uiLocales: 'FR', // will be used instead of the one coming from the context
  });
}

----------------------------------------

TITLE: Detecting Locale from Request URL in Hydrogen
DESCRIPTION: A utility function that determines the user's locale based on the URL host and path. It handles different domains (ca.hydrogen.shop, hydrogen.au) and language path prefixes (/fr/) to return the appropriate language and country combination.

LANGUAGE: jsx
CODE:
export function getLocaleFromRequest(request: Request): Locale {
  const url = new URL(request.url);

  switch (url.host) {
    case 'ca.hydrogen.shop':
      if (/^\/fr($|\/)/.test(url.pathname)) {
        return {
          language: 'FR',
          country: 'CA',
        };
      } else {
        return {
          language: 'EN',
          country: 'CA',
        };
      }
      break;
    case 'hydrogen.au':
      return {
        language: 'EN',
        country: 'AU',
      };
      break;
    default:
      return {
        language: 'EN',
        country: 'US',
      };
  }
}

----------------------------------------

TITLE: Building a Country Selector Component in JSX
DESCRIPTION: A React component that renders a country selector based on the available countries data. It uses useMatches hook to access the root data and renders links for each available country.

LANGUAGE: jsx
CODE:
import {Link, useMatches} from '@remix-run/react';
...
export function CountrySelector() {
  const matches = useMatches();
  const rootData = matches.find((match) => match.pathname === '/');
  if (!rootData) return null;
  const countries = rootData?.countries;
  if (!countries) return null;
  return (
    <div>
      {Object.keys(countries).map((countryKey) => {
        const locale = countries[countryKey];
        return (
          <a href={countryKey}>{locale.label}</a>
        );
      })}
    </div>
  );
}

----------------------------------------

TITLE: Utility Function for Locale Detection from Request in JSX
DESCRIPTION: Determines the appropriate locale based on the request URL by examining the host and pathname, then returns the corresponding country configuration.

LANGUAGE: jsx
CODE:
import {countries} from '~/data/countries';

export function getLocaleFromRequest(request: Request): Locale {
  const url = new URL(request.url);

  switch (url.host) {
    case 'ca.hydrogen.shop':
      if (/^\/fr($|\/)/.test(url.pathname)) {
        return countries['fr-ca'];
      } else {
        return countries['en-ca'];
      }
      break;
    case 'hydrogen.au':
      return countries['en-au'];
      break;
    default:
      return countries['default'];
  }
}

----------------------------------------

TITLE: Routes and Markets Flags for Project Creation
DESCRIPTION: Command line flags for creating new Hydrogen projects with specific routes and markets configurations.

LANGUAGE: bash
CODE:
--routes --markets

----------------------------------------

TITLE: Updating TypeScript definitions in remix.env.d.ts
DESCRIPTION: This diff shows how to update the TypeScript interface definitions in remix.env.d.ts to include env and waitUntil properties in the AppLoadContext interface.

LANGUAGE: diff
CODE:
  declare module '@shopify/remix-oxygen' {
    export interface AppLoadContext {
+     env: Env;
      cart: HydrogenCart;
      storefront: Storefront;
      session: HydrogenSession;
+      waitUntil: ExecutionContext['waitUntil'];
    }
  }

----------------------------------------

TITLE: Providing Component Keys for Localization in JSX
DESCRIPTION: Demonstrates how to properly key React components affected by localization to ensure they re-render when the locale changes, using the hreflang value as a key.

LANGUAGE: jsx
CODE:
export default function App() {
  const data = useLoaderData<typeof loader>();
  const locale = data.selectedLocale;

  return (
    <html lang={locale.language}>
      <head>
        <Seo />
        <Meta />
        <Links />
      </head>
      <body>
        <Layout
          layout={data.layout as LayoutData}
          key={`${locale.language}-${locale.country}`} . // key by hreflang
        >
          <Outlet />
        </Layout>
        <Debugger />
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Configuring SEO Robots Settings in Route Handling
DESCRIPTION: Shows how to configure the robots option in SEO config for granular control over the robots meta tag. This can be set globally or per-page using the handle.seo property.

LANGUAGE: typescript
CODE:
export handle = {
  seo: {
    robots: {
      noIndex: false,
      noFollow: false,
    }
  }
}

----------------------------------------

TITLE: Creating Static Localization Mapping in JSX
DESCRIPTION: A static JSON object that maps URL paths to country and language settings. This provides instant data availability for determining storefront API context and generating SEO links.

LANGUAGE: jsx
CODE:
export const countries = {
  '': {
    label: 'United States (USD $)',
    language: 'EN',
    country: 'US',
  },
  '/en-ca': {
    label: 'Canada (CAD $)',
    language: 'EN',
    country: 'CA',
  },
  '/en-au': {
    label: 'Australia (AUD $)',
    language: 'EN',
    country: 'AU',
  },
  ...
};

----------------------------------------

TITLE: Building Hydrogen Project for Production
DESCRIPTION: Command to build the Hydrogen project for production deployment. This creates optimized assets ready for deployment to Oxygen or other hosting platforms.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Creating Routes Configuration for v3_routeConfig
DESCRIPTION: Instructions for creating a routes.ts file that implements the Remix v3_routeConfig pattern using flatRoutes and the hydrogen route configuration.

LANGUAGE: typescript
CODE:
import {flatRoutes} from '@remix-run/fs-routes';
import {layout, type RouteConfig} from '@remix-run/route-config';
import {hydrogenRoutes} from '@shopify/hydrogen';

export default hydrogenRoutes([
  // Your entire app reading from routes folder using Layout from layout.tsx
  layout('./layout.tsx', await flatRoutes()),
]) satisfies RouteConfig;

----------------------------------------

TITLE: Creating Locale Detection Utility Function in JSX
DESCRIPTION: A utility function that extracts locale information from the request URL. It determines the language and country based on the URL path and returns the corresponding locale settings.

LANGUAGE: jsx
CODE:
import {countries, type CountryData} from '~/data/countries';
export function getLocaleFromRequest(request: Request) {
  const url = new URL(request.url);
  const firstPathPart =
    '/' + url.pathname.substring(1).split('/')[0].toLowerCase();

  return countries[firstPathPart]
    ? {
        ...countries[firstPathPart],
        pathPrefix: firstPathPart,
      }
    : {
        ...countries[''],
        pathPrefix: '',
      };
}

----------------------------------------

TITLE: Importing GoogleTagManager Component in root.tsx
DESCRIPTION: Add import statement for the GoogleTagManager component in the root layout file.

LANGUAGE: diff
CODE:
+ import {GoogleTagManager} from '~/components/GoogleTagManager'

----------------------------------------

TITLE: Creating a Products Route in Hydrogen
DESCRIPTION: Creates a new file for the products route in a Hydrogen project. This is the first step in setting up a paginated product listing page.

LANGUAGE: bash
CODE:
touch routes/products.tsx

----------------------------------------

TITLE: Using Locale Detection in Loader Function
DESCRIPTION: An example of how to use the getLocaleFromRequest utility function within a loader function to obtain language and country settings for a specific request.

LANGUAGE: jsx
CODE:
export const loader: LoaderFunction = async function loader({
  request,
}) {
  const {langrage, country} = getLocaleFromRequest(request);
  ...
};

----------------------------------------

TITLE: Using metafieldParser with List Collection Type
DESCRIPTION: Shows how to use the metafieldParser function with a list of collections metafield type, demonstrating TypeScript's awareness of the resulting array type.

LANGUAGE: typescript
CODE:
const parsed = metafieldParser<ParsedMetafield['list.collection']>(
  listCollectionMetafield,
);

// type of `parsedValue` is `Array<Collection> | null`
parsed.parsedValue?.map((collection) => {
  console.log(collection?.name);
});

----------------------------------------

TITLE: Fixing 'insertBefore' DOM Error by Moving Stylesheets to Layout Component
DESCRIPTION: This diff shows a workaround for a React HMR bug that causes 'failed to execute insertBefore on Node' errors. The fix moves stylesheet links from the root.tsx links function to the Layout component to prevent issues during development hot module replacement.

LANGUAGE: diff
CODE:
// root.tsx

/**
 * The main and reset stylesheets are added in the Layout component
 * to prevent a bug in development HMR updates.
 *
 * This avoids the "failed to execute 'insertBefore' on 'Node'" error
 * that occurs after editing and navigating to another page.
 *
 * It's a temporary fix until the issue is resolved.
 * https://github.com/remix-run/remix/issues/9242
 */
export function links() {
  return [
-    {rel: 'stylesheet', href: resetStyles},
-    {rel: 'stylesheet', href: appStyles},
    {
      rel: 'preconnect',
      href: 'https://cdn.shopify.com',
    },
    {
      rel: 'preconnect',
      href: 'https://shop.app',
    },
    {rel: 'icon', type: 'image/svg+xml', href: favicon},
  ];
}

...

export function Layout({children}: {children?: React.ReactNode}) {
  const nonce = useNonce();
  const data = useRouteLoaderData<RootLoader>('root');

  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
+        <link rel="stylesheet" href={resetStyles}></link>
+        <link rel="stylesheet" href={appStyles}></link>

----------------------------------------

TITLE: Modifying Homepage Route for Metaobjects Content
DESCRIPTION: TypeScript implementation showing how to modify the homepage route to query and render metaobject content. Includes importing the RouteContent component, adjusting the loader function, and rendering the route's content sections.

LANGUAGE: typescript
CODE:
import {ROUTE_CONTENT_QUERY, RouteContent} from '~/sections/RouteContent';

LANGUAGE: typescript
CODE:
export async function loader({context}: LoaderFunctionArgs) {
  const {storefront} = context;

  const {route} = await storefront.query(ROUTE_CONTENT_QUERY, {
    variables: {handle: 'route-home'},
    cache: storefront.CacheNone(),
  });

  return {route};
}

LANGUAGE: typescript
CODE:
export default function Homepage() {
  const {route} = useLoaderData<typeof loader>();

  return (
    <div className="home">
      <RouteContent route={route} />
    </div>
  );
}

----------------------------------------

TITLE: Adding Product Options Handling with getProductOptions
DESCRIPTION: Adds code to use the getProductOptions utility to generate the product options array for the ProductForm component. This simplifies the management of product options and variants.

LANGUAGE: diff
CODE:
import {
  getSelectedProductOptions,
  Analytics,
  useOptimisticVariant,
+  getProductOptions,
  getAdjacentAndFirstAvailableVariants,
  useSelectedOptionInUrlParam,
} from '@shopify/hydrogen';

export default function Product() {
  const {product} = useLoaderData<typeof loader>();

  // Optimistically selects a variant with given available variant information
  const selectedVariant = useOptimisticVariant(
    product.selectedOrFirstAvailableVariant,
    getAdjacentAndFirstAvailableVariants(product),
  );

  // Sets the search param to the selected variant without navigation
  // only when no search params are set in the url
  useSelectedOptionInUrlParam(selectedVariant.selectedOptions);

+  // Get the product options array
+  const productOptions = getProductOptions({
+    ...product,
+    selectedOrFirstAvailableVariant: selectedVariant,
+  });

----------------------------------------

TITLE: Adding Codegen Dependencies
DESCRIPTION: Explicitly lists codegen dependencies in package.json which were previously implicit.

LANGUAGE: diff
CODE:
{
  "devDependencies": {
+   "@graphql-codegen/cli": "5.0.2",
    "@remix-run/dev": "^2.8.0",
    "@remix-run/eslint-config": "^2.8.0",
+   "@shopify/hydrogen-codegen": "^0.3.0",
    "@shopify/mini-oxygen": "^2.2.5",
    "@shopify/oxygen-workers-types": "^4.0.0",
    ...
  }
}

----------------------------------------

TITLE: Updating TypeScript Declarations for AppLoadContext
DESCRIPTION: Code diff showing how to update the remix.env.d.ts file to add environment and waitUntil types to the AppLoadContext interface for TypeScript support.

LANGUAGE: diff
CODE:
  declare module '@shopify/remix-oxygen' {
    export interface AppLoadContext {
+     env: Env;
      cart: HydrogenCart;
      storefront: Storefront;
      session: HydrogenSession;
+      waitUntil: ExecutionContext['waitUntil'];
    }
  }

----------------------------------------

TITLE: Removing Suspense and Await from ProductForm Component
DESCRIPTION: Simplifies the ProductForm integration by removing the Suspense and Await components. The new implementation no longer requires waiting for variant data to load.

LANGUAGE: diff
CODE:
export default function Product() {

  ...

  return (
    ...
+        <ProductForm
+          productOptions={productOptions}
+          selectedVariant={selectedVariant}
+        />
-        <Suspense
-          fallback={
-            <ProductForm
-              product={product}
-              selectedVariant={selectedVariant}
-              variants={[]}
-            />
-          }
-        >
-          <Await
-            errorElement="There was a problem loading product variants"
-            resolve={variants}
-          >
-            {(data) => (
-              <ProductForm
-                product={product}
-                selectedVariant={selectedVariant}
-                variants={data?.product?.variants.nodes || []}
-              />
-            )}
-          </Await>
-        </Suspense>

----------------------------------------

TITLE: Creating a Localized Link Component for Hydrogen Navigation
DESCRIPTION: A custom Link component that wraps Remix's Link and NavLink components to automatically add locale path prefixes to all navigation links. This ensures consistent localization throughout the application without requiring manual locale path handling.

LANGUAGE: jsx
CODE:
import {
  Link as RemixLink,
  NavLink as RemixNavLink,
  useMatches,
} from '@remix-run/react';
import {usePrefixPathWithLocale} from '~/lib/utils';

export function Link(props) {
  const {to, className, ...resOfProps} = props;
  const [root] = useMatches();
  const selectedLocale = root.data.selectedLocale;

  let toWithLocale = to;

  if (typeof to === 'string') {
    toWithLocale = selectedLocale ? `${selectedLocale.pathPrefix}${to}` : to;
  }

  if (typeof className === 'function') {
    return (
      <RemixNavLink
        to={toWithLocale}
        className={className}
        {...resOfProps}
      />
    );
  }

  return (
    <RemixLink to={toWithLocale} className={className} {...resOfProps} />
  );
}

----------------------------------------

TITLE: Updating getSitemapIndex Import in Hydrogen
DESCRIPTION: Updates the import statement for getSitemapIndex from an unstable to stable API in the sitemap.xml route file. This change is part of stabilizing the sitemap functionality in Hydrogen.

LANGUAGE: diff
CODE:
- import {unstable__getSitemapIndex as getSitemapIndex} from '@shopify/hydrogen';
+ import {getSitemapIndex} from '@shopify/hydrogen';

----------------------------------------

TITLE: Adding HydrogenSessionData Types
DESCRIPTION: Fixes types returned by the session object by adding HydrogenSessionData to TypeScript definitions.

LANGUAGE: diff
CODE:
import type {
  // ...
  HydrogenCart,
+ HydrogenSessionData,
} from '@shopify/hydrogen';

// ...

declare module '@shopify/remix-oxygen' {
  // ...

+ interface SessionData extends HydrogenSessionData {}
}

----------------------------------------

TITLE: Adding GoogleTagManager Component to Layout
DESCRIPTION: Insert the GoogleTagManager component into the Layout component to enable event listening and tracking.

LANGUAGE: diff
CODE:
export function Layout({children}: {children?: React.ReactNode}) {
  const nonce = useNonce();
  const data = useLoaderData<typeof loader>();

  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body>
        <Analytics.Provider
          cart={data.cart}
          shop={data.shop}
          consent={data.consent}
        >
          <PageLayout {...data}>{children}</PageLayout>
+         <GoogleTagManager />
        </Analytics.Provider>
        <ScrollRestoration nonce={nonce} />
        <Scripts nonce={nonce} />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Adding mini-oxygen as Dev Dependency
DESCRIPTION: Adds @shopify/mini-oxygen as a dev dependency for local development.

LANGUAGE: diff
CODE:
"devDependencies": {
  "@remix-run/dev": "^2.8.0",
  "@remix-run/eslint-config": "^2.8.0",
+   "@shopify/mini-oxygen": "^3.0.0",
  "@shopify/oxygen-workers-types": "^4.0.0",
  ...
},

----------------------------------------

TITLE: Updating shouldRevalidate Function in Root Component
DESCRIPTION: Modifies the shouldRevalidate function in root.tsx to optimize performance by defaulting to no revalidation for root loader data, with a note about potential UI/server sync issues.

LANGUAGE: diff
CODE:
export const shouldRevalidate: ShouldRevalidateFunction = ({
  formMethod,
  currentUrl,
  nextUrl,
-  defaultShouldRevalidate,
}) => {
  // revalidate when a mutation is performed e.g add to cart, login...
  if (formMethod && formMethod !== 'GET') return true;

  // revalidate when manually revalidating via useRevalidator
  if (currentUrl.toString() === nextUrl.toString()) return true;

-  return defaultShouldRevalidate;
+  return false;
};

----------------------------------------

TITLE: Updating Layout Component to Pass Shop Prop in Hydrogen
DESCRIPTION: Updates the Layout component to pass the shop prop to the Footer component. This ensures that the shop information, including the primaryDomainUrl, is available to all necessary components for proper URL handling.

LANGUAGE: diff
CODE:
export function Layout({
  cart,
  children = null,
  footer,
  header,
  isLoggedIn,
}: LayoutProps) {
  return (
    <>
      <CartAside cart={cart} />
      <SearchAside />
      <MobileMenuAside menu={header.menu} shop={header.shop} />
      <Header header={header} cart={cart} isLoggedIn={isLoggedIn} />
      <main>{children}</main>
      <Suspense>
        <Await resolve={footer}>
-          {(footer) => <Footer menu={footer.menu}  />}
+          {(footer) => <Footer menu={footer.menu} shop={header.shop} />}
        </Await>
      </Suspense>
    </>
  );
}

----------------------------------------

TITLE: Updating server.ts for server-side network request debugging
DESCRIPTION: This diff shows how to update the server.ts file to pass waitUntil and env parameters to the request handler, enabling server-side network request debugging.

LANGUAGE: diff
CODE:
  const handleRequest = createRequestHandler({
    build: remixBuild,
    mode: process.env.NODE_ENV,
+    getLoadContext: () => ({session, storefront, env, waitUntil}),
  });

----------------------------------------

TITLE: Installing Hydrogen with NPM Create Command
DESCRIPTION: Command to install the latest version of Hydrogen using npm's create command. This is the first step in setting up a new Hydrogen project.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest

----------------------------------------

TITLE: Using TypeScript with Storefront API Types
DESCRIPTION: Shows how to properly use TypeScript with the Storefront API types from the Hydrogen package, including type utilities like Pick and Omit to format the types as needed.

LANGUAGE: ts
CODE:
import type {Product} from '@shopify/hydrogen/storefront-api-types';
type MyCustomProduct = Pick<Product, 'name' | 'description'>;

----------------------------------------

TITLE: Updating Vite Configuration for Remix v3_routeConfig Support
DESCRIPTION: Modifies the vite.config.ts file to use hydrogen.v3preset() instead of hydrogen.preset() and adds the v3_routeConfig future flag to support new routing features in Remix.

LANGUAGE: diff
CODE:
export default defineConfig({
  plugins: [
    hydrogen(),
    oxygen(),
    remix({
-      presets: [hydrogen.preset()],
+      presets: [hydrogen.v3preset()],
      future: {
        v3_fetcherPersist: true,
        v3_relativeSplatPath: true,
        v3_throwAbortReason: true,
        v3_lazyRouteDiscovery: true,
        v3_singleFetch: true,
+      v3_routeConfig: true,
      },
    }),
    tsconfigPaths(),
  ],

----------------------------------------

TITLE: Updating Vite Configuration for Remix v3_routeConfig Support
DESCRIPTION: Modifies the vite.config.ts file to use hydrogen.v3preset() instead of hydrogen.preset() and adds the v3_routeConfig future flag to support new routing features in Remix.

LANGUAGE: diff
CODE:
export default defineConfig({
  plugins: [
    hydrogen(),
    oxygen(),
    remix({
-      presets: [hydrogen.preset()],
+      presets: [hydrogen.v3preset()],
      future: {
        v3_fetcherPersist: true,
        v3_relativeSplatPath: true,
        v3_throwAbortReason: true,
        v3_lazyRouteDiscovery: true,
        v3_singleFetch: true,
+      v3_routeConfig: true,
      },
    }),
    tsconfigPaths(),
  ],

----------------------------------------

TITLE: Comment Style Guidelines for Hydrogen and Remix
DESCRIPTION: Shows recommended comment styles for single-line and multi-line comments in Hydrogen and Remix projects, including header section formats for additional context.

LANGUAGE: tsx
CODE:
// this is fine for single lines
function test() {}

/**
 * If you're providing substantial context, links, example code and other stuff,
 * then you should switch to something that really visually differentiates.
 */
function thing() {}

/**
 * myStuff
 * -----------------
 * Renders a login page for customer accounts.
 * And does other really cool stuff
 */
function myStuff() {}

----------------------------------------

TITLE: Creating a New Hydrogen Project with Subscriptions Template
DESCRIPTION: Command to set up a new Hydrogen project using the subscriptions template. This creates a starting point for implementing subscription functionality.

LANGUAGE: bash
CODE:
npm create @shopify/hydrogen@latest -- --template subscriptions

----------------------------------------

TITLE: Updating Sitemap Index Import from Hydrogen
DESCRIPTION: Code diff showing how to update the import statement for the getSitemapIndex function in a [sitemap.xml].tsx route file, as the function is now stable and no longer in the unstable namespace.

LANGUAGE: diff
CODE:
- import {unstable__getSitemapIndex as getSitemapIndex} from '@shopify/hydrogen';
+ import {getSitemapIndex} from '@shopify/hydrogen';

----------------------------------------

TITLE: Setting Up and Running a Hydrogen Development Server
DESCRIPTION: Commands to install dependencies and start the local development server for a Hydrogen app. This is run after creating a new Hydrogen project.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Flexible Width Image with CSS Unit
DESCRIPTION: Demonstrates using the Image component with a CSS unit for width (rem) instead of a fixed pixel value, which respects the original aspect ratio from the data.

LANGUAGE: jsx
CODE:
<Image data={data} width="5rem" />

----------------------------------------

TITLE: Modifying NPM Scripts for Partytown in package.json
DESCRIPTION: diff showing the addition of the 'partytown' script to copy library files and the modification of the build script to run the partytown script before building.

LANGUAGE: diff
CODE:
  "scripts": {
+    "partytown": "partytown copylib public/~partytown"
  },

LANGUAGE: diff
CODE:
  "scripts": {
-    "build": "shopify hydrogen build",
+    "build": "npm run partytown && shopify hydrogen build",
  },

----------------------------------------

TITLE: Providing Language Data to Customer Account Client
DESCRIPTION: This snippet demonstrates how to provide language data to the createCustomerAccountClient constructor which will be used for the uilocales property in Customer Account API requests.

LANGUAGE: ts
CODE:
// Optional: provide language data to the constructor
const customerAccount = createCustomerAccountClient({
  // ...
  language,
});

----------------------------------------

TITLE: Fixing Menu Links in Side Panel for Mobile Devices
DESCRIPTION: Code update to fix menu links in side panel not working on mobile devices by replacing the closeAside function with the close method from useAside hook.

LANGUAGE: diff
CODE:
// /app/components/Header.tsx

export function HeaderMenu({
  menu,
  primaryDomainUrl,
  viewport,
  publicStoreDomain,
}: {
  menu: HeaderProps['header']['menu'];
  primaryDomainUrl: HeaderProps['header']['shop']['primaryDomain']['url'];
  viewport: Viewport;
  publicStoreDomain: HeaderProps['publicStoreDomain'];
}) {
  const className = `header-menu-${viewport}`;
+  const {close} = useAside();

-  function closeAside(event: React.MouseEvent<HTMLAnchorElement>) {
-    if (viewport === 'mobile') {
-      event.preventDefault();
-      window.location.href = event.currentTarget.href;
-    }
-  }

  return (
    <nav className={className} role="navigation">
      {viewport === 'mobile' && (
        <NavLink
          end
-          onClick={closeAside}
+          onClick={close}
          prefetch="intent"
          style={activeLinkStyle}
          to="/"
        >
          Home
        </NavLink>
      )}
      {(menu || FALLBACK_HEADER_MENU).items.map((item) => {
        if (!item.url) return null;

        // if the url is internal, we strip the domain
        const url =
          item.url.includes('myshopify.com') ||
          item.url.includes(publicStoreDomain) ||
          item.url.includes(primaryDomainUrl)
            ? new URL(item.url).pathname
            : item.url;
        return (
          <NavLink
            className="header-menu-item"
            end
            key={item.id}
-            onClick={closeAside}
+            onClick={close}
            prefetch="intent"
            style={activeLinkStyle}
            to={url}
          >
            {item.title}
          </NavLink>
        );
      })}
    </nav>
  );
}

----------------------------------------

TITLE: Implementing Partytown with Google Tag Manager in the App Component
DESCRIPTION: TypeScript code showing the App component implementation that initializes the GTM dataLayer container, includes the GTM component, and initializes Partytown with proper configuration.

LANGUAGE: typescript
CODE:
export default function App() {
  // 1. Retrieve the GTM container ID
  const {gtmContainerId} = useLoaderData<typeof loader>();
  const nonce = useNonce();

  return (
    <html lang="en">
      <head>
        <Meta />
        <Links />
      </head>

      <body>
        <Outlet />
        <ScrollRestoration nonce={nonce} />
        <Scripts nonce={nonce} />

        {/* 2. Initialize the GTM dataLayer container */}
        <Script
          type="text/partytown"
          dangerouslySetInnerHTML={{
            __html: `
              dataLayer = window.dataLayer || [];

              window.gtag = function () {
                dataLayer.push(arguments);
              };

              window.gtag('js', new Date());
              window.gtag('config', "${gtmContainerId}");
            `,
          }}
        />

        {/* 3. Include the GTM component */}
        <PartytownGoogleTagManager gtmContainerId={gtmContainerId} />

        {/* 4. Initialize PartyTown */}
        <Partytown
          nonce={nonce}
          forward={['dataLayer.push', 'gtag']}
          resolveUrl={maybeProxyRequest}
        />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Adding GTM Environment Variable Type Definition
DESCRIPTION: diff showing how to update the remix.d.ts file to add the GTM_CONTAINER_ID environment variable to the Env interface type definition for TypeScript support.

LANGUAGE: diff
CODE:
// ...other code

declare global {
  /**
   * A global `process` object is only available during build to access NODE_ENV.
   */
  const process: {env: {NODE_ENV: 'production' | 'development'}};

  /**
   * Declare expected Env parameter in fetch handler.
   */
  interface Env extends HydrogenEnv {
+   GTM_CONTAINER_ID: `GTM-${string}`;
  }
}

// ...other code

----------------------------------------

TITLE: Locale Type Definition for TypeScript
DESCRIPTION: TypeScript type definition for the Locale object used in the i18n integration. It defines the expected shape with language and country properties.

LANGUAGE: jsx
CODE:
import {
  CountryCode,
  LanguageCode,
} from '@shopify/hydrogen/storefront-api-types';

export type Locale = {
  language: LanguageCode,
  country: CountryCode,
};

----------------------------------------

TITLE: Updating Product Fragment to Include Selling Plan Groups
DESCRIPTION: Diff showing how to modify the PRODUCT_FRAGMENT to include selling plan groups, which is necessary for fetching subscription options for a product.

LANGUAGE: diff
CODE:
const PRODUCT_FRAGMENT = `#graphql
  ${PRODUCT_VARIANT_FRAGMENT}
+  ${SELLING_PLAN_GROUP_FRAGMENT}

  fragment Product on Product {
    # ...other code
+   sellingPlanGroups(first:10) {
+     nodes {
+       ...SellingPlanGroup
+     }
+   }
  }
` as const;

----------------------------------------

TITLE: Updating Vite Config for v3_routeConfig
DESCRIPTION: Diff showing how to update the vite.config.ts file to use the new hydrogen.v3preset() instead of the standard hydrogen.preset() to support v3_routeConfig.

LANGUAGE: diff
CODE:
export default defineConfig({
  plugins: [
    hydrogen(),
    oxygen(),
    remix({
-      presets: [hydrogen.preset()],
+      presets: [hydrogen.v3preset()],

----------------------------------------

TITLE: Implementing 404 Route Fix for Path-based i18n Projects in TypeScript
DESCRIPTION: This code snippet shows a loader function implementation for fixing a bug with 404 routes in path-based i18n projects. It checks if the locale parameter is valid and throws a 404 response if not.

LANGUAGE: typescript
CODE:
import { type LoaderFunctionArgs } from "@remix-run/server-runtime";

export async function loader({ params, context }: LoaderFunctionArgs) {
  const { language, country } = context.storefront.i18n;

  if (
    params.locale &&
    params.locale.toLowerCase() !== `${language}-${country}`.toLowerCase()
  ) {
    // If the locale URL param is defined, yet we still are still at the default locale
    // then the the locale param must be invalid, send to the 404 page
    throw new Response(null, { status: 404 });
  }

  return null;
}

----------------------------------------

TITLE: Installing Mini Oxygen as a Dev Dependency
DESCRIPTION: Command to install @shopify/mini-oxygen as a development dependency in your application using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @shopify/mini-oxygen

----------------------------------------

TITLE: Including Analytics Component in Root Layout for Hydrogen
DESCRIPTION: Adding the Analytics component to the root layout of a Hydrogen Remix application. This ensures that analytics tracking is available throughout the entire application.

LANGUAGE: jsx
CODE:
// root.tsx

export default function App() {
  return (
    <html>
      ...
      <Analytics />
      </body>
    </html>
  );
 }

----------------------------------------

TITLE: Apply Command Syntax for Applying Recipes
DESCRIPTION: Shows the syntax for the 'apply' command which applies a specified recipe to the current project.

LANGUAGE: plain
CODE:
cookbook.ts apply

Apply a recipe to the current project

Options:
  --version  Show version number                                       [boolean]
  --help     Show help                                                 [boolean]
  --recipe   The name of the recipe to apply                 [string] [required]

----------------------------------------

TITLE: Creating Search Route Loader Function in TypeScript
DESCRIPTION: A loader function for the search route that processes GET requests from the SearchForm component. It determines if the request is for regular or predictive search and handles errors appropriately.

LANGUAGE: typescript
CODE:
/**
 * Handles regular search GET requests
 * requested by the SearchForm component and /search route visits
 */
export async function loader({request, context}: LoaderFunctionArgs) {
  const url = new URL(request.url);
  const isRegular = !url.searchParams.has('predictive');

  if (!isRegular) {
    return {}
  }

  const searchPromise = regularSearch({request, context});

  searchPromise.catch((error: Error) => {
    console.error(error);
    return {term: '', result: null, error: error.message};
  });

  return await searchPromise;
}

----------------------------------------

TITLE: Worker Unstable Flag for Development Commands
DESCRIPTION: Command line flag for h2 dev and h2 preview commands that enables the experimental worker runtime for local development, which more closely resembles Oxygen production environment.

LANGUAGE: bash
CODE:
--worker-unstable

----------------------------------------

TITLE: Updating server.ts Context with waitUntil and env
DESCRIPTION: Code diff showing how to update the server.ts file to pass waitUntil and env to the request handler context for enabling debug-network features.

LANGUAGE: diff
CODE:
  const handleRequest = createRequestHandler({
    build: remixBuild,
    mode: process.env.NODE_ENV,
+    getLoadContext: () => ({session, storefront, env, waitUntil}),
  });