TITLE: Creating a Simple Hello World Server with Javalin 5.0
DESCRIPTION: Demonstrates how to create a basic Javalin application that responds with 'Hello World' on the root path. Shows the simplicity of setting up a server in both Java and Kotlin.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    var app = Javalin.create(/*config*/)
        .get("/", ctx -> ctx.result("Hello World"))
        .start(7070);
}

LANGUAGE: kotlin
CODE:
fun main() {
    val app = Javalin.create(/*config*/)
        .get("/") { ctx -> ctx.result("Hello World") }
        .start(7070)
}

----------------------------------------

TITLE: Java Hello World Server with Javalin
DESCRIPTION: Creates a basic Javalin web server in Java that responds with 'Hello World' on the root path. The server runs on port 7070 and demonstrates the minimal setup required for a Javalin application.

LANGUAGE: java
CODE:
import io.javalin.Javalin;

public class HelloWorld {
    public static void main(String[] args) {
        var app = Javalin.create(/*config*/)
            .get("/", ctx -> ctx.result("Hello World"))
            .start(7070);
    }
}

----------------------------------------

TITLE: Hello World Example in Java/Kotlin
DESCRIPTION: Basic Hello World web server implementation showing Javalin's minimal setup requirements. Creates a server on port 7000 with a single GET endpoint returning 'Hello World'.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    var app = Javalin.create().start(7000);
    app.get("/", ctx -> ctx.result("Hello World"));
}

LANGUAGE: kotlin
CODE:
fun main() {
    val app = Javalin.create().start(7000)
    app.get("/") { it.result("Hello World") }
}

----------------------------------------

TITLE: Kotlin Hello World Server with Javalin
DESCRIPTION: Implements a basic Javalin web server in Kotlin that serves 'Hello World' on the root path. The server listens on port 7070 and shows the idiomatic Kotlin approach to creating a Javalin application.

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin

fun main() {
    val app = Javalin.create(/*config*/)
        .get("/") { ctx -> ctx.result("Hello World") }
        .start(7070)
}

----------------------------------------

TITLE: Basic Javalin Hello World Example
DESCRIPTION: A simple Hello World example showing how to create a Javalin app and define a route.

LANGUAGE: java
CODE:
import io.javalin.Javalin;

public class HelloWorld {
    public static void main(String[] args) {
        Javalin app = Javalin.create().start(7070);
        app.get("/", ctx -> ctx.result("Hello World"));
    }
}

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin

fun main() {
    val app = Javalin.create().start(7070)
    app.get("/") { ctx -> ctx.result("Hello World") }
}

----------------------------------------

TITLE: Initializing Javalin Hello World Application in Java and Kotlin
DESCRIPTION: Demonstrates how to create a basic Javalin application that responds with 'Hello World' on the root path. Shows examples in both Java and Kotlin.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    Javalin app = Javalin.start(7000);
    app.get("/", ctx -> ctx.result("Hello World"));
}

LANGUAGE: kotlin
CODE:
fun main(args: Array<String>) {
    val app = Javalin.start(7000)
    app.get("/") { ctx -> ctx.result("Hello World") }
}

----------------------------------------

TITLE: Configuring Javalin Instance in Kotlin
DESCRIPTION: Comprehensive configuration of a Javalin instance including HTTP, router, and Jetty settings in Kotlin

LANGUAGE: Kotlin
CODE:
Javalin.create { config ->
    config.http.generateEtags = booleanValue        // if javalin should generate etags for dynamic responses (not static files)
    config.http.prefer405over404 = booleanValue     // return 405 instead of 404 if path is mapped to different HTTP method
    config.http.maxRequestSize = longValue          // the max size of request body that can be accessed without using using an InputStream
    config.http.defaultContentType = stringValue    // the default content type
    config.http.asyncTimeout = longValue            // timeout in milliseconds for async requests (0 means no timeout)
    config.http.strictContentTypes = booleanValue   // throw exception if e.g content-type is missing/incorrect when attempting to parse JSON

    config.http.customCompression(strategy)         // set a custom compression strategy
    config.http.brotliAndGzipCompression(lvl, lvl)  // enable brotli and gzip compression with the specified levels
    config.http.gzipOnlyCompression(lvl)            // enable gzip compression with the specified level
    config.http.brotliOnlyCompression(lvl)          // enable brotli compression with the specified level
    config.http.disableCompression()                // disable compression
}

----------------------------------------

TITLE: Initializing Javalin Application in Java
DESCRIPTION: Basic setup of a Javalin application with a simple GET route

LANGUAGE: Java
CODE:
Javalin app = Javalin.create()
    .get("/", ctx -> ctx.result("Hello World"))
    .start(7070);

----------------------------------------

TITLE: Configuring Javalin Instance in Java
DESCRIPTION: Comprehensive configuration of a Javalin instance including HTTP, router, and Jetty settings

LANGUAGE: Java
CODE:
Javalin.create(config -> {
    config.http.generateEtags = booleanValue;       // if javalin should generate etags for dynamic responses (not static files)
    config.http.prefer405over404 = booleanValue;    // return 405 instead of 404 if path is mapped to different HTTP method
    config.http.maxRequestSize = longValue;         // the max size of request body that can be accessed without using using an InputStream
    config.http.defaultContentType = stringValue;   // the default content type
    config.http.asyncTimeout = longValue;           // timeout in milliseconds for async requests (0 means no timeout)
    config.http.strictContentTypes = booleanValue;  // throw exception if e.g content-type is missing/incorrect when attempting to parse JSON
    
    config.http.customCompression(strategy);        // set a custom compression strategy
    config.http.brotliAndGzipCompression(lvl, lvl); // enable brotli and gzip compression with the specified levels
    config.http.gzipOnlyCompression(lvl);           // enable gzip compression with the specified level
    config.http.brotliOnlyCompression(lvl);         // enable brotli compression with the specified level
    config.http.disableCompression();               // disable compression
});

----------------------------------------

TITLE: Defining Basic HTTP Handlers in Javalin
DESCRIPTION: Shows how to define GET and POST endpoint handlers with path parameters and response handling

LANGUAGE: java
CODE:
app.get("/output", ctx -> {
    // some code
    ctx.json(object);
});

app.post("/input", ctx -> {
    // some code 
    ctx.status(201);
});

LANGUAGE: kotlin
CODE:
app.get("/output") { ctx ->
    // some code
    ctx.json(object)
}

app.post("/input") { ctx ->
    // some code
    ctx.status(201)
}

----------------------------------------

TITLE: Configuring Javalin
DESCRIPTION: Examples of configuring various aspects of Javalin.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.http.generateEtags = booleanValue;     // if javalin should generate etags for dynamic responses (not static files)
    config.http.prefer405over404 = booleanValue;  // return 405 instead of 404 if path is mapped to different HTTP method
    config.http.maxRequestSize = longValue;       // the max size of request body that can be accessed without using using an InputStream
    config.http.defaultContentType = stringValue; // the default content type
    config.http.asyncTimeout = longValue;         // timeout in milliseconds for async requests (0 means no timeout)
});

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.http.generateEtags = booleanValue     // if javalin should generate etags for dynamic responses (not static files)
    config.http.prefer405over404 = booleanValue  // return 405 instead of 404 if path is mapped to different HTTP method
    config.http.maxRequestSize = longValue       // the max size of request body that can be accessed without using using an InputStream
    config.http.defaultContentType = stringValue //  the default content type
    config.http.asyncTimeout = longValue         // timeout in milliseconds for async requests (0 means no timeout)
}

----------------------------------------

TITLE: Creating a Hello World Server with Javalin in Java
DESCRIPTION: This snippet demonstrates how to create a simple 'Hello World' web server using Javalin. It shows the minimal setup required to start a server on port 7000 and add a root endpoint that returns 'Hello World'.

LANGUAGE: java
CODE:
import io.javalin.Javalin;

public class HelloWorld {
    public static void main(String[] args) {
        Javalin app = Javalin.create().start(7000); // create and launch server
        app.get("/", ctx -> ctx.result("Hello World")); // add root endpoint
    }
}

----------------------------------------

TITLE: Configuring Javalin 5.0 Application Settings
DESCRIPTION: Shows how to configure various Javalin settings using the JavalinConfig object. Demonstrates setting HTTP options, routing behavior, and static file serving.

LANGUAGE: java
CODE:
var app = Javalin.create(config -> {
    config.http.generateEtags = true;
    config.http.asyncTimeout = 10_000L;
    config.routing.ignoreTrailingSlashes = true;
    config.staticFiles.add("/public", Location.CLASSPATH);
});

LANGUAGE: kotlin
CODE:
val app = Javalin.create { config ->
    config.http.generateEtags = true
    config.http.asyncTimeout = 10_000L
    config.routing.ignoreTrailingSlashes = true
    config.staticFiles.add("/public", Location.CLASSPATH)
};

----------------------------------------

TITLE: Handling Client Input and Validation in Javalin 5.0
DESCRIPTION: Shows methods for extracting and validating client data in Javalin, including form parameters, query parameters, file uploads, and JSON deserialization. Demonstrates Javalin's built-in validation capabilities.

LANGUAGE: java
CODE:
ctx.body();                     // get the request body as a string (caches the body)
ctx.formParam("name");          // get a form parameter
ctx.queryParam("name");         // get a query parameter
ctx.uploadedFile("name");       // get an uploaded file

// JSON methods
ctx.bodyAsClass(Clazz);         // deserialize ctx.body() to class
ctx.bodyStreamAsClass(Clazz);   // consume input stream from request body and deserialize to class

// validation
var age = ctx.queryParamAsClass("age", Integer.class)  // wraps parameter in Validator
    .check(age -> age > 18, "NOT_OLD_ENOUGH") // adds check with error message
    .get(); // gets the validated value, or throws ValidationException
var bananaBox = ctx.bodyValidator(BananaBox.class)
    .check(box -> box.weight < 5, ValidationError("WEIGHT_TOO_HIGH", Map.of("MAX_WEIGHT", 5)))
    .check(box -> box.bananas.length > 20, ValidationError("NOT_ENOUGH_BANANAS", Map.of("MIN_BANANAS", 20)))
    .getOrDefault(defaultBananaBox) // uses default if body is null, runs validation rules otherwise

LANGUAGE: kotlin
CODE:
ctx.body()                      // get the request body as a string (caches the body)
ctx.formParam("name")           // get a form parameter
ctx.queryParam("name")          // get a query parameter
ctx.uploadedFile("name")        // get an uploaded file

// JSON methods
ctx.bodyAsClass<Clazz>()        // deserialize ctx.body() to class
ctx.bodyStreamAsClass<Clazz>()  // consume input stream from request body and deserialize to class

// validation
val age = ctx.queryParamAsClass<Int>("age")  // wraps parameter in Validator
    .check({ it > 18 }, "NOT_OLD_ENOUGH") // adds check with error message
    .get() // gets the validated value, or throws ValidationException
val bananaBox = ctx.bodyValidator<BananaBox>()
    .check({ it.weight < 5 }, ValidationError("WEIGHT_TOO_HIGH", mapOf("MAX_WEIGHT" to 5)))
    .check({ it.bananas.length > 20 }, ValidationError("NOT_ENOUGH_BANANAS", mapOf("MIN_BANANAS" to 20)))
    .getOrDefault(defaultBananaBox) // uses default if body is null, runs validation rules otherwise

----------------------------------------

TITLE: Configuring Jetty in Javalin 5.0
DESCRIPTION: Illustrates how to configure the underlying Jetty server in Javalin, including setting up custom Server, SessionHandler, and other Jetty-specific configurations.

LANGUAGE: java
CODE:
var app = Javalin.create(config -> {
    config.jetty.server(() -> Server());                 // set the Jetty Server
    config.jetty.sessionHandler(() -> SessionHandler()); // set the Jetty SessionHandler
    config.jetty.contextHandlerConfig(handler -> {});    // configure the Jetty ServletContextHandler
    config.jetty.wsFactoryConfig((factory) -> {});       // configure the Jetty WebSocketServletFactory
});

LANGUAGE: kotlin
CODE:
val app = Javalin.create { config ->
    config.jetty.server { Server() }                 // set the Jetty Server
    config.jetty.sessionHandler { SessionHandler() } // set the Jetty SessionHandler
    config.jetty.contextHandlerConfig { handler -> } // configure the Jetty ServletContextHandler
    config.jetty.wsFactoryConfig { factory -> }      // configure the Jetty WebSocketServletFactory
}

----------------------------------------

TITLE: Initializing Hello World Server in Javalin
DESCRIPTION: Basic example showing how to create and start a Javalin server that responds with 'Hello World' on the root path.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    var app = Javalin.create().start(7000);
    app.get("/", ctx -> ctx.result("Hello World"));
}

LANGUAGE: kotlin
CODE:
fun main() {
    val app = Javalin.create().start(7000)
    app.get("/") { it.result("Hello World") }
}

----------------------------------------

TITLE: Defining HTTP Handlers in Javalin
DESCRIPTION: Examples of defining different types of HTTP handlers in Javalin.

LANGUAGE: java
CODE:
app.before(ctx -> {
    // runs before all requests
});
app.before("/path/*", ctx -> {
    // runs before request to /path/*
});

app.get("/output", ctx -> {
    // some code
    ctx.json(object);
});

app.post("/input", ctx -> {
    // some code
    ctx.status(201);
});

app.after(ctx -> {
    // run after all requests
});
app.after("/path/*", ctx -> {
    // runs after request to /path/*
});

LANGUAGE: kotlin
CODE:
app.before { ctx ->
    // runs before all requests
}
app.before("/path/*") { ctx ->
    // runs before request to /path/*
}

app.get("/output") { ctx ->
    // some code
    ctx.json(object)
}

app.post("/input") { ctx ->
    // some code
    ctx.status(201)
}

app.after { ctx ->
    // run after all requests
}
app.after("/path/*") { ctx ->
    // runs after request to /path/*
}

----------------------------------------

TITLE: Implementing Authentication Handler
DESCRIPTION: Authentication handler that validates user roles and permissions for each request.

LANGUAGE: java
CODE:
public static void handleAccess(Context ctx) {
    var permittedRoles = ctx.routeRoles();
    if (permittedRoles.contains(Role.ANYONE)) {
        return; // anyone can access
    }
    if (userRoles(ctx).stream().anyMatch(permittedRoles::contains)) {
        return; // user has role required to access
    }
    ctx.header(Header.WWW_AUTHENTICATE, "Basic");
    throw new UnauthorizedResponse();
}

----------------------------------------

TITLE: Sending Responses to Clients in Javalin 5.0
DESCRIPTION: Illustrates various methods for sending data to clients in Javalin, including plain text, JSON, streams, and asynchronous responses. Demonstrates the flexibility of Javalin's response handling.

LANGUAGE: java
CODE:
ctx.result(stringOrStream);           // writes string or input stream to client (`text/plain` by default)
ctx.json(myJson);                     // serializes object to JSON string and writes to client (as `application/json`)
ctx.jsonStream(myJson);               // serializes JSON directly to client (nothing buffered in memory)
ctx.writeSeekableStream(myMediaFile); // stream audio and video to client (supports seeking/skipping)
ctx.future(myFutureSupplier);         // instructs Javalin to handle request asynchronously
ctx.render("/file.ext", model);       // render template or markdown file (as `text/html`)

LANGUAGE: kotlin
CODE:
ctx.result(stringOrStream)            // writes string or input stream to client (`text/plain` by default)
ctx.json(myJson)                      // serializes object to JSON string and writes to client (as `application/json`)
ctx.jsonStream(myJson)                // serializes JSON directly to client (nothing buffered in memory)
ctx.writeSeekableStream(myMediaFile)  // stream audio and video to client (supports seeking/skipping)
ctx.future(myFutureSupplier)          // instructs Javalin to handle request asynchronously
ctx.render("/file.ext", model)        // render template or markdown file (as `text/html`)

----------------------------------------

TITLE: Configuring Static Files in Java
DESCRIPTION: Shows how to configure static file handling in Javalin 4 using the new StaticFileConfig class and its options.

LANGUAGE: java
CODE:
config.addStaticFiles(staticFiles -> {
    staticFiles.aliasCheck = ContextHandler.AliasCheck((path, resource) -> !path.endsWith(".txt"));
    staticFiles.directory = "src/test/external/";
    staticFiles.location = Location.EXTERNAL;
});

----------------------------------------

TITLE: Defining Endpoint Handlers in Java
DESCRIPTION: Creating GET and POST endpoint handlers with different response types

LANGUAGE: Java
CODE:
app.get("/output", ctx -> {
    // some code
    ctx.json(object);
});

app.post("/input", ctx -> {
    // some code
    ctx.status(201);
});

----------------------------------------

TITLE: Defining Endpoint Handlers in Kotlin
DESCRIPTION: Creating GET and POST endpoint handlers with different response types in Kotlin

LANGUAGE: Kotlin
CODE:
app.get("/output") { ctx ->
    // some code
    ctx.json(object)
}

app.post("/input") { ctx ->
    // some code
    ctx.status(201)
}

----------------------------------------

TITLE: WebSocket Implementation
DESCRIPTION: Shows WebSocket endpoint setup with connection, message, close, and error handlers. Includes JSON object conversion for messages.

LANGUAGE: java
CODE:
app.ws("/websocket/:path", ws -> {
    ws.onConnect(ctx -> System.out.println("Connected"));
    ws.onMessage(ctx -> {
        var user = ctx.message(User.class); // convert from json string to object
        ctx.send(user); // convert to json string and send back
    });
    ws.onClose(ctx -> System.out.println("Closed"));
    ws.onError(ctx -> System.out.println("Errored"));
});

LANGUAGE: kotlin
CODE:
app.ws("/websocket/:path") { ws ->
    ws.onConnect { ctx -> println("Connected") }
    ws.onMessage { ctx ->
        val user = ctx.message<User>(); // convert from json string to object
        ctx.send(user); // convert to json string and send back
    }
    ws.onClose { ctx -> println("Closed") }
    ws.onError { ctx -> println("Errored") }
}

----------------------------------------

TITLE: Configuring WebSocket Handlers in Javalin
DESCRIPTION: Demonstrates setting up a WebSocket endpoint with connect, message, error and close handlers

LANGUAGE: java
CODE:
app.ws("/websocket/{path}", ws -> {
    ws.onConnect(ctx -> System.out.println("Connected"));
    ws.onMessage(ctx -> {
        User user = ctx.messageAsClass(User.class); // convert from json
        ctx.send(user); // convert to json and send back
    });
    ws.onBinaryMessage(ctx -> System.out.println("Message"))
    ws.onClose(ctx -> System.out.println("Closed"));
    ws.onError(ctx -> System.out.println("Errored"));
});

LANGUAGE: kotlin
CODE:
app.ws("/websocket/{path}") { ws ->
    ws.onConnect { ctx -> println("Connected") }
    ws.onMessage { ctx ->
        val user = ctx.messageAsClass<User>(); // convert from json
        ctx.send(user); // convert to json and send back
    }
    ws.onBinaryMessage { ctx -> println("Message") }
    ws.onClose { ctx -> println("Closed") }
    ws.onError { ctx -> println("Errored") }
}

----------------------------------------

TITLE: Initializing Javalin Application in Kotlin
DESCRIPTION: Basic setup of a Javalin application with a simple GET route in Kotlin

LANGUAGE: Kotlin
CODE:
val app = Javalin.create()
    .get("/") { ctx -> ctx.result("Hello World") }
    .start(7070)

----------------------------------------

TITLE: Setting up Secured API Routes
DESCRIPTION: Main application setup with route definitions and role-based access control integration.

LANGUAGE: java
CODE:
public class Main {
    public static void main(String[] args) {
        Javalin app = Javalin.create(config -> {
            config.router.mount(router -> {
                router.beforeMatched(Auth::handleAccess);
            }).apiBuilder(() -> {
                get("/", ctx -> ctx.redirect("/users"), Role.ANYONE);
                path("users", () -> {
                    get(UserController::getAllUserIds, Role.ANYONE);
                    post(UserController::createUser, Role.USER_WRITE);
                    path("{userId}", () -> {
                        get(UserController::getUser, Role.USER_READ);
                        patch(UserController::updateUser, Role.USER_WRITE);
                        delete(UserController::deleteUser, Role.USER_WRITE);
                    });
                });
            });
        }).start(7070);
    }
}

----------------------------------------

TITLE: Configuring Before Handlers in Kotlin
DESCRIPTION: Setting up before handlers to run before all requests or specific paths in Kotlin

LANGUAGE: Kotlin
CODE:
app.before { ctx ->
    // runs before all requests
}
app.before("/path/*") { ctx ->
    // runs before request to /path/*
}

----------------------------------------

TITLE: Implementing Real-time Collaboration Server in Java with Javalin
DESCRIPTION: Java implementation of a Javalin server for real-time document collaboration. It sets up WebSocket handlers for connecting, messaging, and disconnecting clients, and manages shared documents.

LANGUAGE: java
CODE:
import io.javalin.Javalin;
import io.javalin.http.staticfiles.Location;
import io.javalin.websocket.WsContext;

import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class JavalinRealtimeCollaborationExampleApp {

    private static final Map<String, Collab> collabs = new ConcurrentHashMap<>();

    public static void main(String[] args) {

        Javalin.create(config -> {
            config.staticFiles.add("/public", Location.CLASSPATH);
            config.router.mount(router -> {
                router.ws("/docs/{doc-id}", ws -> {
                    ws.onConnect(ctx -> {
                        if (getCollab(ctx) == null) {
                            createCollab(ctx);
                        }
                        getCollab(ctx).clients.add(ctx);
                        ctx.send(getCollab(ctx).doc);
                    });
                    ws.onMessage(ctx -> {
                        getCollab(ctx).doc = ctx.message();
                        getCollab(ctx).clients.stream().filter(c -> c.session.isOpen()).forEach(s -> {
                            s.send(getCollab(ctx).doc);
                        });
                    });
                    ws.onClose(ctx -> {
                        getCollab(ctx).clients.remove(ctx);
                    });
                });
            });
        }).start(7070);

    }

    private static Collab getCollab(WsContext ctx) {
        return collabs.get(ctx.pathParam("doc-id"));
    }

    private static void createCollab(WsContext ctx) {
        collabs.put(ctx.pathParam("doc-id"), new Collab());
    }

    static public class Collab {
        public String doc;
        public Set<WsContext> clients;

        public Collab() {
            this.doc = "";
            this.clients = ConcurrentHashMap.newKeySet();
        }
    }

}

----------------------------------------

TITLE: Route Grouping in Javalin
DESCRIPTION: Shows how to group related routes together using the routes() and path() methods for better organization of endpoints.

LANGUAGE: java
CODE:
app.routes(() -> {
    path("users", () -> {
        get(UserController::getAllUsers);
        post(UserController::createUser);
        path(":id", () -> {
            get(UserController::getUser);
            patch(UserController::updateUser);
            delete(UserController::deleteUser);
        });
    });
});

LANGUAGE: kotlin
CODE:
app.routes {
    path("users") {
        get(userController::getAllUsers)
        post(userController::createUser)
        path(":id") {
            get(userController::getUser)
            patch(userController::updateUser)
            delete(userController::deleteUser)
        }
    }
}

----------------------------------------

TITLE: Configuring CORS in Javalin 5 (Java)
DESCRIPTION: This code snippet shows how to configure Cross-Origin Resource Sharing (CORS) in Javalin 5 using Java. It demonstrates the new flexible CORS configuration options.

LANGUAGE: java
CODE:
Javalin.create(config -> {
config.plugins.enableCors(cors -> {
    cors.add(corsConfig -> {
        // replacement for enableCorsForOrigin(@NotNull String... origins)
        corsConfig.allowHost(/* add your origins here */);
        //replacement for enableCorsForAllOrigins()
        corsConfig.anyHost();
    });
});

}).start();

----------------------------------------

TITLE: Implementing WebSockets and Server-Sent Events in Javalin 5.0
DESCRIPTION: Demonstrates how to set up WebSocket and Server-Sent Events handlers in Javalin. Shows the event-based approach for WebSockets and the streaming nature of SSE.

LANGUAGE: java
CODE:
app.ws("/websocket/{path}", ws -> {
    ws.onConnect(ctx -> System.out.println("Connected"));
    ws.onMessage(ctx -> {
        User user = ctx.messageAsClass(User.class); // convert from json
        ctx.send(user); // convert to json and send back
    });
    ws.onBinaryMessage(ctx -> System.out.println("Message"))
    ws.onClose(ctx -> System.out.println("Closed"));
    ws.onError(ctx -> System.out.println("Errored"));
});

app.sse("/sse", client ->
    client.sendEvent("connected", "Hello, SSE");  // can also send an object, which will be serialized
    client.onClose(() -> System.out.println("Client disconnected"));
);

LANGUAGE: kotlin
CODE:
app.ws("/websocket/{path}") { ws ->
    ws.onConnect { ctx -> println("Connected") }
    ws.onMessage { ctx ->
        val user = ctx.messageAsClass<User>(); // convert from json
        ctx.send(user); // convert to json and send back
    }
    ws.onBinaryMessage { ctx -> println("Message") }
    ws.onClose { ctx -> println("Closed") }
    ws.onError { ctx -> println("Errored") }
}

app.sse("/sse") { client ->
    client.sendEvent("connected", "Hello, SSE") // can also send an object, which will be serialized
    client.onClose { println("Client disconnected") }
}

----------------------------------------

TITLE: Basic CORS Configuration in Javalin
DESCRIPTION: Basic setup of CORS plugin in Javalin allowing specific hosts. Demonstrates how to enable CORS and allow specific origins.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.bundledPlugins.enableCors(cors -> {
        cors.addRule(it -> {
            it.allowHost("example.com", "javalin.io");
        });
    });
});

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.bundledPlugins.enableCors { cors ->
        cors.addRule {
            it.allowHost("example.com", "javalin.io")
        }
    }
}

----------------------------------------

TITLE: Configuring API Routes and Server Settings
DESCRIPTION: Shows how to configure server settings like CORS and static files, and how to structure REST API routes using path grouping.

LANGUAGE: java
CODE:
Javalin app = Javalin.create()
    .enableCorsForAllOrigins()
    .enableStaticFiles("/public")
    .enableStaticFiles("uploads", Location.EXTERNAL)
    .start(port);

app.routes(() -> {
    path("users", () -> {
        get(UserController::getAll);
        post(UserController::create);
        path(":user-id"(() -> {
            get(UserController::getOne);
            patch(UserController::update);
            delete(UserController::delete);
        });
    });
});

LANGUAGE: kotlin
CODE:
val app = Javalin.create().apply {
    enableCorsForAllOrigins()
    enableStaticFiles("/public")
    enableStaticFiles("uploads", Location.EXTERNAL)
}.start(port)

app.routes {
    path("users") {
        get(UserController::getAll)
        post(UserController::create)
        path(":user-id") {
            get(UserController::getOne)
            patch(UserController::update)
            delete(UserController::delete)
        }
    }
}

----------------------------------------

TITLE: Configuring Javalin Server
DESCRIPTION: Demonstrates various configuration options available when creating a Javalin server instance.

LANGUAGE: java
CODE:
Javalin.create() // create has to be called first
    .contextPath("/context-path") // set a context path (default is "/")
    .dontIgnoreTrailingSlashes() // treat '/test' and '/test/' as different URLs
    .defaultContentType(string) // set a default content-type for responses
    .defaultCharacterEncoding(string) // set a default character-encoding for responses
    .disableStartupBanner() // remove the javalin startup banner from logs
    .embeddedServer( ... ) // see section below
    .enableCorsForOrigin("origin") // enables cors for the specified origin(s)
    .enableDynamicGzip() // gzip response (if client accepts gzip and response is more than 1500 bytes)
    .enableRouteOverview("/path") // render a HTML page showing all mapped routes
    .enableStandardRequestLogging() // does requestLogLevel(LogLevel.STANDARD)
    .enableStaticFiles("/public") // enable static files (opt. second param Location.CLASSPATH/Location.EXTERNAL)
    .maxBodySizeForRequestCache(long) // set max body size for request cache
    .port(port) // set the port
    .start(); // start has to be called last

LANGUAGE: kotlin
CODE:
Javalin.create().apply { // create has to be called first
    contextPath("/context-path") // set a context path (default is "/")
    dontIgnoreTrailingSlashes() // treat '/test' and '/test/' as different URLs
    defaultContentType(string) // set a default content-type for responses
    defaultCharacterEncoding(string) // set a default character-encoding for responses
    disableStartupBanner() // remove the javalin startup banner from logs
    embeddedServer( ... ) // see section below
    enableCorsForOrigin("origin") // enables cors for the specified origin(s)
    enableRouteOverview("/path") // render a HTML page showing all mapped routes
    enableDynamicGzip() // gzip response (if client accepts gzip and response is more than 1500 bytes)
    enableStandardRequestLogging() // does requestLogLevel(LogLevel.STANDARD)
    enableStaticFiles("/public") // enable static files (opt. second param Location.CLASSPATH/Location.EXTERNAL)
    maxBodySizeForRequestCache(long) // set max body size for request cache
    port(port) // set the port
}.start() // start has to be called last

----------------------------------------

TITLE: Server Configuration and API Structure
DESCRIPTION: Demonstrates comprehensive server configuration including content type, ETag generation, static files, and RESTful route structure with nested paths and WebSocket endpoints.

LANGUAGE: java
CODE:
var app = Javalin.create(config -> {
    config.defaultContentType = "application/json";
    config.autogenerateEtags = true;
    config.addStaticFiles("/public");
    config.asyncRequestTimeout = 10_000L;
    config.dynamicGzip = true;
    config.enforceSsl = true;
}).routes(() -> {
    path("users", () -> {
        get(UserController::getAll);
        post(UserController::create);
        path(":user-id"(() -> {
            get(UserController::getOne);
            patch(UserController::update);
            delete(UserController::delete);
        });
        ws("events", userController::webSocketEvents);
    });
}).start(port);

LANGUAGE: kotlin
CODE:
val app = Javalin.create { config ->
    config.defaultContentType = "application/json"
    config.autogenerateEtags = true
    config.addStaticFiles("/public")
    config.asyncRequestTimeout = 10_000L
    config.dynamicGzip = true
    config.enforceSsl = true
}.routes {
    path("users") {
        get(UserController::getAll)
        post(UserController::create)
        path(":user-id") {
            get(UserController::getOne)
            patch(UserController::update)
            delete(UserController::delete)
        }
        ws("events", userController::webSocketEvents)
    }
}.start(port)

----------------------------------------

TITLE: Configuring Maven Dependencies for Javalin
DESCRIPTION: Maven dependency configuration required for setting up a Javalin project.

LANGUAGE: markup
CODE:
<dependencies>
    <dependency>
        <groupId>io.javalin</groupId>
        <artifactId>javalin-bundle</artifactId>
        <version>{{site.javalinversion}}</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Configuring Javalin 3 Server Settings
DESCRIPTION: Shows the new configuration setup in Javalin 3 using JavalinConfig class inside Javalin.create(). Demonstrates various configuration options like static files, ETag generation, GZIP compression, SSL enforcement, and custom handlers.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.addStaticFiles(directory)
    config.autogenerateEtags = true/false
    config.dynamicGzip = true/false
    config.enableDevLogging()
    config.enforceSsl = true/false
    config.requestCacheSize = sizeInBytes
    config.sessionHandler { ... }
    config.server { ... }
    config.accessManager { ... }
}).start()

----------------------------------------

TITLE: Basic Javalin Handler Usage
DESCRIPTION: Examples of basic HTTP handlers in Javalin including before, endpoint and after handlers.

LANGUAGE: java
CODE:
app.before(ctx -> {
    // runs before all requests
});
app.before("/path/*", ctx -> {
    // runs before request to /path/*
});

LANGUAGE: kotlin
CODE:
app.before { ctx ->
    // runs before all requests
}
app.before("/path/*") { ctx ->
    // runs before request to /path/*
}

----------------------------------------

TITLE: Implementing User Controller for CRUD Operations
DESCRIPTION: Controller class that handles user management operations including create, read, update, and delete functionality with in-memory storage.

LANGUAGE: java
CODE:
public class UserController {
    public record User(String name, String email) {}

    private static final Map<String, User> users;

    static {
        var tempMap = Map.of(
            randomId(), new User("Alice", "alice@alice.kt"),
            randomId(), new User("Bob", "bob@bob.kt"),
            randomId(), new User("Carol", "carol@carol.kt"),
            randomId(), new User("Dave", "dave@dave.kt")
        );
        users = new HashMap<>(tempMap);
    }

    public static void getAllUserIds(Context ctx) {
        ctx.json(users.keySet());
    }

    public static void createUser(Context ctx) {
        users.put(randomId(), ctx.bodyAsClass(User.class));
    }

    public static void getUser(Context ctx) {
        ctx.json(users.get(ctx.pathParam("userId")));
    }

    public static void updateUser(Context ctx) {
        users.put(ctx.pathParam("userId"), ctx.bodyAsClass(User.class));
    }

    public static void deleteUser(Context ctx) {
        users.remove(ctx.pathParam("userId"));
    }

    private static String randomId() {
        return UUID.randomUUID().toString();
    }
}

----------------------------------------

TITLE: Implementing Advanced JWT Handlers in Javalin
DESCRIPTION: Shows advanced JWT token generation and validation handlers with role-based access control in a Javalin application.

LANGUAGE: java
CODE:
Handler generateHandler = context -> {
    MockUser mockUser = new MockUser("Mocky McMockface", "user");
    String token = provider.generateToken(mockUser);
    context.json(new JWTResponse(token));
};

Handler validateHandler = context -> {
    DecodedJWT decodedJWT = JavalinJWT.getDecodedFromContext(context);
    context.result("Hi " + decodedJWT.getClaim("name").asString());
};

app.get("/generate",  generateHandler, roles(Roles.ANYONE));
app.get("/validate", validateHandler, roles(Roles.USER, Roles.ADMIN));
app.get("/adminslounge", validateHandler, roles(Roles.ADMIN));

----------------------------------------

TITLE: Multiple Path-Specific CORS Configurations
DESCRIPTION: Example showing how to configure different CORS rules for different paths in the application.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.bundledPlugins.enableCors(cors -> {
        cors.addRule(it -> {
            it.path = "images*";
            it.allowHost("https://images.local");
        });
        cors.addRule(it -> {
            it.path = "videos*";
            it.allowHost("https://videos.local");
        });
        cors.addRule(it -> {
            it.path = "music*";
            it.allowHost("https://music.local");
        });
    });
});

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.bundledPlugins.enableCors { cors ->
        cors.addRule {
            it.path = "images*"
            it.allowHost("https://images.local")
        }
        cors.addRule {
            it.path = "videos*"
            it.allowHost("https://videos.local")
        }
        cors.addRule {
            it.path = "music*"
            it.allowHost("https://music.local")
        }
    }
}

----------------------------------------

TITLE: WebSocket Implementation in Javalin
DESCRIPTION: Shows how to implement WebSocket functionality including connection handling, message handling, and error handling.

LANGUAGE: java
CODE:
app.ws("/websocket/:path", ws -> {
    ws.onConnect(session -> System.out.println("Connected"));
    ws.onMessage((session, message) -> {
        System.out.println("Received: " + message);
        session.getRemote().sendString("Echo: " + message);
    });
    ws.onClose((session, statusCode, reason) -> System.out.println("Closed"));
    ws.onError((session, throwable) -> System.out.println("Errored"));
});

LANGUAGE: kotlin
CODE:
app.ws("/websocket/:path") { ws ->
    ws.onConnect { session -> println("Connected") }
    ws.onMessage { session, message ->
        println("Received: " + message)
        session.remote.sendString("Echo: " + message)
    }
    ws.onClose { session, statusCode, reason -> println("Closed") }
    ws.onError { session, throwable -> println("Errored") }
}

----------------------------------------

TITLE: Configuring Gradle Build for Javalin Project
DESCRIPTION: Basic Gradle configuration file for a Javalin project. Specifies Java 11 compatibility, adds Maven Central repository, and includes the Javalin dependency.

LANGUAGE: gradle
CODE:
group 'io.javalin' // your group id
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.javalin:javalin:{{site.javalinversion}}'
}

----------------------------------------

TITLE: Configuring WebSocket Handlers in Java
DESCRIPTION: Setting up WebSocket handlers for different events

LANGUAGE: Java
CODE:
app.ws("/websocket/{path}", ws -> {
    ws.onConnect(ctx -> System.out.println("Connected"));
    ws.onMessage(ctx -> {
        User user = ctx.messageAsClass(User.class); // convert from json
        ctx.send(user); // convert to json and send back
    });
    ws.onBinaryMessage(ctx -> System.out.println("Message"));
    ws.onClose(ctx -> System.out.println("Closed"));
    ws.onError(ctx -> System.out.println("Errored"));
});

----------------------------------------

TITLE: Configuring Trust for Client Certificates
DESCRIPTION: Demonstrates how to configure trust for client certificates, enabling features like mTLS.

LANGUAGE: java
CODE:
new SslPlugin(ssl->{
    // Load our identity data
    ssl.pemFromPath("/path/to/cert.pem","/path/to/key.pem"); 

    // Load the client/CA certificate(s)
    ssl.withTrustConfig(trust->{
        trust.certificateFromPath("/path/to/clientCert.pem");
        trust.certificateFromClasspath("rootCA.pem");
    });
});

----------------------------------------

TITLE: Defining Javalin Handlers
DESCRIPTION: Shows how to define before, endpoint, and after handlers in Javalin using both Java and Kotlin syntax.

LANGUAGE: java
CODE:
app.before("/some-path/*", ctx -> {
    // runs before all request to /some-path/*
});
app.before(ctx -> {
    // calls before("/*", handler)
});

app.get("/", ctx -> {
    // some code
    ctx.json(object)
});

app.post("/", ctx -> {
    // some code
    ctx.status(201)
});

app.after("/some-path/*", ctx -> {
    // runs after all request to /some-path/* (excluding static files)
});

app.after(ctx -> {
    // run after every request (excluding static files)
});

LANGUAGE: kotlin
CODE:
app.before("/some-path/*") { ctx ->
    // runs before all request to /some-path/*
}
app.before { ctx ->
    // calls before("/*", handler)
}

app.get("/") { ctx ->
    // some code
    ctx.json(object)
}

app.post("/") { ctx ->
    // some code
    ctx.status(201)
}

app.after("/some-path/*") { ctx ->
    // runs after all request to /some-path/* (excluding static files)
}

app.after { ctx ->
    // run after every request (excluding static files)
}

----------------------------------------

TITLE: Loading PKCS#12/JKS Keystores
DESCRIPTION: Shows methods to load PKCS#12 or JKS keystores from various sources.

LANGUAGE: java
CODE:
keystoreFromPath("/path/to/keystore.jks", "keystorePassword");
keystoreFromClasspath("keyStoreName.p12", "keystorePassword");
keystoreFromInputStream(keystoreInputStream, "keystorePassword");

----------------------------------------

TITLE: OpenAPI Endpoint Documentation Example
DESCRIPTION: Example of OpenAPI annotations for documenting REST endpoints, showing parameter definitions, response types, and documentation metadata.

LANGUAGE: java
CODE:
@OpenApi(
    summary = "Update user by ID",
    operationId = "updateUserById",
    path = "/users/:userId",
    methods = HttpMethod.PATCH,
    pathParams = {@OpenApiParam(name = "userId", type = Integer.class, description = "The user ID")},
    tags = {"User"},
    requestBody = @OpenApiRequestBody(content = {@OpenApiContent(from = NewUserRequest.class)}),
    responses = {
        @OpenApiResponse(status = "204"),
        @OpenApiResponse(status = "400", content = {@OpenApiContent(from = ErrorResponse.class)}),
        @OpenApiResponse(status = "404", content = {@OpenApiContent(from = ErrorResponse.class)})
    }
)

----------------------------------------

TITLE: Hot Reloading SSL Certificates
DESCRIPTION: Shows how to implement hot reloading of SSL certificates without restarting the server.

LANGUAGE: java
CODE:
// Create the plugin outside the Javalin config to hold a reference to reload it
SslPlugin sslPlugin = new SslPlugin(ssl->{
    ssl.pemFromPath("/path/to/cert.pem","/path/to/key.pem");
    ssl.insecurePort = 8080; // any other config you want to change
});

Javalin.create(config->{
    ...  // your Javalin config here
    config.plugins.register(sslPlugin);
});

// later on, when you want to replace the certificate
sslPlugin.reload(ssl->{
    // any options other than loading certificates/keys will be ignored.
    ssl.pemFromPath("/path/to/new/cert.pem","/path/to/new/key.pem");
    
    // you can also reload the trust configuration
    ssl.withTrustConfig(trust->{
        trust.certificateFromPath("/path/to/new/cert.pem");
    });
});

----------------------------------------

TITLE: Handling Different Response Types in Javalin
DESCRIPTION: Examples of different response types supported by Javalin including JSON, streams, and template rendering.

LANGUAGE: java
CODE:
ctx.json(myJson));
ctx.jsonStream(myJson));
ctx.seekableStream(myMediaFile));
ctx.future(myFuture));
ctx.render("/file.ext", model));

----------------------------------------

TITLE: Configuring SSL Plugin in Kotlin
DESCRIPTION: Shows how to create and configure an SSL plugin instance in Kotlin, then register it with Javalin.

LANGUAGE: kotlin
CODE:
val plugin = SslPlugin { conf ->
    conf.pemFromPath("/path/to/cert.pem", "/path/to/key.pem")
}

Javalin.create { javalinConfig ->
    javalinConfig.plugins.register(plugin)
}.start()

----------------------------------------

TITLE: Configuring Javalin API Structure and Server in Java and Kotlin
DESCRIPTION: Shows how to configure a Javalin application with static file handling, request logging, and defining API routes. Includes examples in both Java and Kotlin.

LANGUAGE: java
CODE:
Javalin app = Javalin.create()
    .enableStaticFiles("/public")
    .enableStandardRequestLogging()
    .port(port)
    .start();

app.routes(() -> {
    path("users", () -> {
        get(UserController::getAllUserIds);
        post(UserController::createUser);
        path(":user-id"(() -> {
            get(UserController::getUser);
            patch(UserController::updateUser);
            delete(UserController::deleteUser);
        });
    });
});

LANGUAGE: kotlin
CODE:
val app = Javalin.create().apply {
    enableStaticFiles("/public")
    enableStandardRequestLogging()
    port(port)
}.start()

app.routes {
    path("users") {
        get(UserController::getAllUserIds)
        post(UserController::createUser)
        path(":user-id") {
            get(UserController::getUser)
            patch(UserController::updateUser)
            delete(UserController::deleteUser)
        }
    }
}

----------------------------------------

TITLE: Implementing JavaScript Client for Real-time Collaboration
DESCRIPTION: JavaScript code for the client-side of the real-time collaboration tool. It handles WebSocket connections, synchronizes document content, and manages the text cursor position during collaborative editing.

LANGUAGE: javascript
CODE:
window.onload = setupWebSocket;
window.onhashchange = setupWebSocket;

if (!window.location.hash) { // document-id not present in url
    const newDocumentId = Date.now().toString(36); // this should be more random
    window.history.pushState(null, null, "#" + newDocumentId);
}

function setupWebSocket() {
    const textArea = document.querySelector("textarea");
    const ws = new WebSocket(`ws://localhost:7070/docs/${window.location.hash.substr(1)}`);
    textArea.onkeyup = () => ws.send(textArea.value);
    ws.onmessage = msg => { // place the caret in the correct position
        const offset = msg.data.length - textArea.value.length;
        const selection = {start: textArea.selectionStart, end: textArea.selectionEnd};
        const startsSame = msg.data.startsWith(textArea.value.substring(0, selection.end));
        const endsSame = msg.data.endsWith(textArea.value.substring(selection.start));
        textArea.value = msg.data;
        if (startsSame && !endsSame) {
            textArea.setSelectionRange(selection.start, selection.end);
        } else if (!startsSame && endsSame) {
            textArea.setSelectionRange(selection.start + offset, selection.end + offset);
        } else { // this is what google docs does...
            textArea.setSelectionRange(selection.start, selection.end + offset);
        }
    };
    ws.onclose = setupWebSocket; // should reconnect if connection is closed
}

----------------------------------------

TITLE: Adding GraphQL Maven Dependency for Javalin
DESCRIPTION: Maven dependency configuration required to add Javalin GraphQL support to your project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin-graphql</artifactId>
    <version>{{site.javalinversion}}</version>
</dependency>

----------------------------------------

TITLE: Registering JavalinMustache Template Engine in Kotlin
DESCRIPTION: Kotlin code snippet showing how to register the JavalinMustache template engine in the Javalin configuration.

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.fileRenderer(JavalinMustache())
}

----------------------------------------

TITLE: Configuring Gradle for Javalin and Hibernate (Kotlin DSL)
DESCRIPTION: Sets up the Gradle build file using Kotlin DSL, including dependencies for Javalin, Hibernate, PostgreSQL, and JUnit.

LANGUAGE: kotlin
CODE:
plugins {
    id("java")
}

group = "com.brucemelo.app"

repositories {
    mavenCentral()
}

val javalinVersion = "6.3.0"
val lpmbokVersion = "1.18.34"
val postgresqlVersion = "42.7.3"
val hibernateVersion = "7.0.0.Beta1"
val junitVersion = "5.10.3"

dependencies {
    implementation("io.javalin:javalin-bundle:$javalinVersion")
    compileOnly("org.projectlombok:lombok:$lpmbokVersion")
    annotationProcessor("org.projectlombok:lombok:$lpmbokVersion")
    implementation("org.postgresql:postgresql:$postgresqlVersion")
    implementation("org.hibernate.orm:hibernate-core:$hibernateVersion")
    annotationProcessor("org.hibernate.orm:hibernate-jpamodelgen:$hibernateVersion")
    testImplementation(platform("org.junit:junit-bom:$junitVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

tasks.test {
    useJUnitPlatform()
}

----------------------------------------

TITLE: Implementing HTTP Range Requests with Seekable Streams in Javalin
DESCRIPTION: Demonstrates how to stream large files like audio/video using seekable streams that support range requests. This enables features like seeking in media players and resuming downloads.

LANGUAGE: java
CODE:
app.get("/file", ctx -> {
    File file = new File("/my-file.mp3");
    ctx.seekableStream(new FileInputStream(file), "audio/mpeg");
});

LANGUAGE: kotlin
CODE:
app.get("/file") { ctx ->
    val file = File("/my-file.mp3")
    ctx.seekableStream(file.inputStream(), "audio/mpeg")
}

----------------------------------------

TITLE: Creating GraphQL Context Class in Kotlin
DESCRIPTION: Implementation of a context class for sharing global environment variables in GraphQL operations.

LANGUAGE: kotlin
CODE:
class ContextExample {
    val globalEnvironment = "globalEnvironment"
}

----------------------------------------

TITLE: Configuring SSL Plugin in Java
DESCRIPTION: Demonstrates how to create and configure an SSL plugin instance in Java, then register it with Javalin.

LANGUAGE: java
CODE:
SslPlugin plugin = new SslPlugin(conf -> {
    conf.pemFromPath("certs/cert.pem", "certs/key.pem");
});

Javalin.create(javalinConfig -> {
    javalinConfig.plugins.register(plugin);
}).start();

----------------------------------------

TITLE: Configuring Hibernate
DESCRIPTION: Sets up Hibernate configuration including database connection properties and entity mapping.

LANGUAGE: java
CODE:
class AppHibernateConfig {

    static Configuration configuration() {
        var configuration = new Configuration();
        var settings = new Properties();
        settings.put(AvailableSettings.JAKARTA_JDBC_DRIVER, "org.postgresql.Driver");
        settings.put(AvailableSettings.JAKARTA_JDBC_URL, "jdbc:postgresql://localhost:5432/mydatabase");
        settings.put(AvailableSettings.JAKARTA_JDBC_USER, "sa");
        settings.put(AvailableSettings.JAKARTA_JDBC_PASSWORD, "sa");
        settings.put(AvailableSettings.HIGHLIGHT_SQL, true);
        settings.put(AvailableSettings.HBM2DDL_AUTO, Action.ACTION_CREATE);

        configuration.setProperties(settings);
        configuration.addAnnotatedClass(Course.class);
        return configuration;
    }

}

----------------------------------------

TITLE: Configuring WebSocketServletFactory in Javalin
DESCRIPTION: Demonstrates how to configure WebSocket settings in Javalin using wsFactoryConfig(). Allows customization of message size limits, idle timeout, and extension registration through the WebSocketServletFactory object.

LANGUAGE: kotlin
CODE:
app.wsFactoryConfig { wsFactory ->
    wsFactory.policy.maxTextMessageSize = 1234;
    wsFactory.policy.idleTimeout = 1234;
    wsFactory.extensionFactory.register(...)
    wsFactory.register(...)
}

----------------------------------------

TITLE: Implementing WebSocket Handlers in Javalin for Java and Kotlin
DESCRIPTION: Shows how to set up WebSocket handlers for connect, message, close, and error events in Javalin. Includes examples for both Java and Kotlin.

LANGUAGE: java
CODE:
app.ws("/websocket", ws -> {
    ws.onConnect(session -> System.out.println("Connected"));
    ws.onMessage((session, message) -> {
        System.out.println("Received: " + message);
        session.getRemote().sendString("Echo: " + message);
    });
    ws.onClose((session, statusCode, reason) -> System.out.println("Closed"));
    ws.onError((session, throwable) -> System.out.println("Errored"));
});

LANGUAGE: kotlin
CODE:
app.ws("/websocket") { ws ->
    ws.onConnect { session -> println("Connected") }
    ws.onMessage { session, message ->
        println("Received: " + message)
        session.remote.sendString("Echo: " + message)
    }
    ws.onClose { session, statusCode, reason -> println("Closed") }
    ws.onError { session, throwable -> println("Errored") }
}

----------------------------------------

TITLE: Configuring RouteOverview Plugin in Java
DESCRIPTION: Demonstrates different ways to enable and configure the RouteOverview plugin in a Javalin application using Java. Shows options for basic route overview and route overview with authentication roles.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.plugins.enableRouteOverview(path);                      // show all routes on specified path
    config.plugins.enableRouteOverview(path, roles);               // show all routes on specified path (with auth)
    config.plugins.register(new RouteOverviewPlugin(path));        // show all routes on specified path
    config.plugins.register(new RouteOverviewPlugin(path, roles)); // show all routes on specified path (with auth)
});

----------------------------------------

TITLE: Basic Rate Limiting Plugin Implementation
DESCRIPTION: Example of a simple rate limiting plugin implementation without configuration or context extension.

LANGUAGE: kotlin
CODE:
class Ratey : Plugin<Void>() {
    var counter = 0

    override fun onInitialize(config: JavalinConfig) {
        config.router.mount { router ->
            router.before { ctx ->
                if (counter++ > 100) {
                    throw TooManyRequestsResponse()
                }
            }
        }
    }
}

LANGUAGE: java
CODE:
class Ratey extends Plugin<Void> {
    int counter;
    @Override
    public void onInitialize(JavalinConfig config) {
        config.router.mount(router -> {
            router.before(ctx -> {
                if (counter++ > 100) {
                    throw new TooManyRequestsResponse();
                }
            });
        });
    }
}

----------------------------------------

TITLE: Implementing Hibernate StatelessSession Wrapper
DESCRIPTION: Creates a wrapper class for Hibernate StatelessSession to simplify transaction management.

LANGUAGE: java
CODE:
public class AppHibernate {

    public static void inTransaction(Consumer<StatelessSession> consumer) {
        AppHibernateConfig.getSessionFactory().inStatelessTransaction(consumer);
    }

    public static <R> R fromTransaction(Function<StatelessSession, R> function) {
        return AppHibernateConfig.getSessionFactory().fromStatelessTransaction(function);
    }

}

----------------------------------------

TITLE: Handling WebSockets
DESCRIPTION: Shows how to set up WebSocket handlers in Javalin, including connect, message, close, and error events.

LANGUAGE: java
CODE:
app.ws("/websocket/:path", ws -> {
    ws.onConnect(session -> System.out.println("Connected"));
    ws.onMessage((session, message) -> {
        System.out.println("Received: " + message);
        session.getRemote().sendString("Echo: " + message);
    });
    ws.onClose((session, statusCode, reason) -> System.out.println("Closed"));
    ws.onError((session, throwable) -> System.out.println("Errored"));
});

LANGUAGE: kotlin
CODE:
app.ws("/websocket/:path") { ws ->
    ws.onConnect { session -> println("Connected") }
    ws.onMessage { session, message ->
        println("Received: " + message)
        session.remote.sendString("Echo: " + message)
    }
    ws.onClose { session, statusCode, reason -> println("Closed") }
    ws.onError { session, throwable -> println("Errored") }
}

----------------------------------------

TITLE: Configuring Case Insensitive Path Matching Plugin
DESCRIPTION: Shows how to register the RedirectToLowercasePathPlugin which redirects uppercase/mixcase paths to lowercase paths while preserving path-params and query-params casing.

LANGUAGE: kotlin
CODE:
config.registerPlugin(RedirectToLowercasePathPlugin())

----------------------------------------

TITLE: Implementing Access Management in Javalin 5
DESCRIPTION: Shows how to implement access management using the AccessManager interface in Javalin 5, which wraps endpoint handlers in a lambda to control access.

LANGUAGE: java
CODE:
config.accessManager((handler, ctx, routeRoles) -> {
    var userRole = getUserRole(ctx); // some user defined function that returns a user role
    if (routeRoles.contains(userRole)) { // routeRoles are provided through the AccessManager interface
        handler.handle(ctx); // if handler.handle(ctx) is not called, the endpoint handler is not called
    }
});

LANGUAGE: kotlin
CODE:
config.accessManager { handler, ctx, routeRoles ->
    val userRole = getUserRole(ctx) // some user defined function that returns a user role
    if (routeRoles.contains(userRole)) { // routeRoles are provided through the AccessManager interface
        handler.handle(ctx) // if handler.handle(ctx) is not called, the endpoint handler is not called
    }
}

----------------------------------------

TITLE: Configurable Rate Limiting Plugin
DESCRIPTION: Enhanced version of the rate limiting plugin that includes configuration options.

LANGUAGE: kotlin
CODE:
class Ratey(userConfig: Consumer<Config>) : Plugin<Ratey.Config>(userConfig, Config()) {
    var counter = 0
    class Config {
        var limit = 1
    }

    override fun onInitialize(config: JavalinConfig) {
        config.router.mount { router ->
            router.before { ctx ->
                if (counter++ > pluginConfig.limit) {
                    throw TooManyRequestsResponse()
                }
            }
        }
    }
}

LANGUAGE: java
CODE:
class Ratey extends Plugin<Ratey.Config> {
    int counter;
    public Ratey(Consumer<Config> userConfig) {
        super(userConfig, new Config());
    }
    public static class Config {
        public int limit = 1;
    }
    @Override
    public void onInitialize(JavalinConfig config) {
        config.router.mount(router -> {
            router.before(ctx -> {
                if (counter++ > pluginConfig.limit) {
                    throw new TooManyRequestsResponse();
                }
            });
        });
    }
}

----------------------------------------

TITLE: Configuring Javalin App and Main Class
DESCRIPTION: Sets up the Javalin application configuration and creates the main class to start the server.

LANGUAGE: java
CODE:
public class JavalinApp {

    public static Javalin create() {
        return Javalin.create((var config) -> config.router.apiBuilder(() -> {
            path("/", () -> get(ctx -> ctx.json("Ok")));
            path("/courses", () -> {
                get(CourseHandler.listAll);
                post(CourseHandler.save);
            });
        }));
    }

}

public class Main {

    public static void main(String[] args) {
        JavalinApp.create().start(8080);
    }

}

----------------------------------------

TITLE: Working with Sessions in Javalin
DESCRIPTION: Demonstrates various operations with sessions in Javalin, including writing and reading session attributes, invalidating sessions, and changing session IDs for security purposes.

LANGUAGE: java
CODE:
app.get("/write", ctx -> {
    // values written to the session will be available on all your instances if you use a session db
    ctx.sessionAttribute("my-key", "My value");
});

app.get("/read", ctx -> {
    // values on the session will be available on all your instances if you use a session db
    String myValue = ctx.sessionAttribute("my-key");
});

app.get("/invalidate", ctx -> {
    // if you want to invalidate a session, jetty will clean everything up for you
    ctx.req().getSession().invalidate();
});

app.get("/change-id", ctx -> {
    // it could be wise to change the session id on login, to protect against session fixation attacks
    ctx.req().changeSessionId();
});

LANGUAGE: kotlin
CODE:
app.get("/write") { ctx ->
    // values written to the session will be available on all your instances if you use a session db
    ctx.sessionAttribute("my-key", "My value")
}

app.get("/read") { ctx ->
    // values on the session will be available on all your instances if you use a session db
    val myValue = ctx.sessionAttribute<String>("my-key")
}

app.get("/invalidate") { ctx ->
    // if you want to invalidate a session, jetty will clean everything up for you
    ctx.req().session.invalidate()
}

app.get("/change-id") { ctx ->
    // it could be wise to change the session id on login, to protect against session fixation attacks
    ctx.req().changeSessionId()
}

----------------------------------------

TITLE: Configuring Javalin with Custom Jetty Handler in Kotlin
DESCRIPTION: Shows how to set up a Javalin instance with a custom StatisticsHandler for the embedded Jetty server in Kotlin. This configuration enables additional features like statistics gathering.

LANGUAGE: kotlin
CODE:
val statisticsHandler = StatisticsHandler()

Javalin.create().apply {
    embeddedServer(EmbeddedJettyFactory({
        Server(queuedThreadPool).apply {
            handler = statisticsHandler
        }
    }))
}.start();

----------------------------------------

TITLE: Implementing Access Management in Javalin 6
DESCRIPTION: Demonstrates the new approach to access management in Javalin 6 using beforeMatched handlers, which are called for all requests.

LANGUAGE: java
CODE:
app.beforeMatched(ctx -> {
    if (ctx.routeRoles().isEmpty()) { // route roles can only be attached to endpoint handlers
        return; // if there are no route roles, we don't need to check anything
    }
    var userRole = getUserRole(ctx);
    if (!ctx.routeRoles().contains(userRole)) {
        throw new UnauthorizedResponse();
    }
});

LANGUAGE: kotlin
CODE:
app.beforeMatched { ctx ->
    if (ctx.routeRoles().isEmpty()) { // route roles can only be attached to endpoint handlers
        return // if there are no route roles, we don't need to check anything
    }
    val userRole = getUserRole(ctx)
    if (!ctx.routeRoles().contains(userRole)) {
        throw UnauthorizedResponse()
    }
}

----------------------------------------

TITLE: Adding javalin-rendering Dependency in Gradle
DESCRIPTION: Gradle configuration for adding the javalin-rendering dependency. It includes a comment for adding a specific template engine dependency.

LANGUAGE: java
CODE:
implementation("io.javalin:javalin-rendering:{{site.javalinversion}}")
// template engine dependency

----------------------------------------

TITLE: Configuring RouteOverview Plugin in Kotlin
DESCRIPTION: Demonstrates different ways to enable and configure the RouteOverview plugin in a Javalin application using Kotlin. Shows options for basic route overview and route overview with authentication roles.

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.plugins.enableRouteOverview(path)                      // show all routes on specified path
    config.plugins.enableRouteOverview(path, roles)               // show all routes on specified path (with auth)
    config.plugins.register(RouteOverviewPlugin(path))            // show all routes on specified path
    config.plugins.register(RouteOverviewPlugin(path, roles))     // show all routes on specified path (with auth)
}}

----------------------------------------

TITLE: Implementing Javalin WebSocket Chat Server in Kotlin
DESCRIPTION: This Kotlin code implements the Javalin WebSocket server for the chat application, handling connections, messages, and broadcasting to all users.

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin
import io.javalin.http.staticfiles.Location
import io.javalin.websocket.WsContext
import j2html.TagCreator.*
import java.text.SimpleDateFormat
import java.util.*
import java.util.concurrent.ConcurrentHashMap

private val userUsernameMap = ConcurrentHashMap<WsContext, String>()
private var nextUserNumber = 1 // Assign to username for next connecting user

fun main() {
    Javalin.create {
        it.staticFiles.add("/public", Location.CLASSPATH)
        it.router.mount {
            it.ws("/chat") { ws ->
                ws.onConnect { ctx ->
                    val username = "User" + nextUserNumber++
                    userUsernameMap[ctx] = username
                    broadcastMessage("Server", "$username joined the chat")
                }
                ws.onClose { ctx ->
                    val username = userUsernameMap[ctx]
                    userUsernameMap.remove(ctx)
                    broadcastMessage("Server", "$username left the chat")
                }
                ws.onMessage { ctx ->
                    broadcastMessage(userUsernameMap[ctx]!!, ctx.message())
                }
            }
        }
    }.start(7070)
}

// Sends a message from one user to all users, along with a list of current usernames
fun broadcastMessage(sender: String, message: String) {
    userUsernameMap.keys.filter { it.session.isOpen }.forEach { session ->
        session.send(
            mapOf(
                "userMessage" to createHtmlMessageFromSender(sender, message),
                "userlist" to userUsernameMap.values
            )
        )
    }
}

// Builds a HTML element with a sender-name, a message, and a timestamp,
private fun createHtmlMessageFromSender(sender: String, message: String): String {
    return article(
        b("$sender says:"),
        span(attrs(".timestamp"), SimpleDateFormat("HH:mm:ss").format(Date())),
        p(message)
    ).render()
}

----------------------------------------

TITLE: Configuring Multiple Static File Locations in Javalin
DESCRIPTION: Demonstrates how to configure multiple static file locations in Javalin using enableStaticFiles method. Supports both public and external file locations, with handlers executing in declaration order.

LANGUAGE: kotlin
CODE:
val app = Javalin.create().apply {
    enableStaticFiles("/public/a")
    enableStaticFiles("/public/b")
    enableStaticFiles("src/test/external/", Location.EXTERNAL)
}.start()

----------------------------------------

TITLE: Adding Mockito Dependency for Java
DESCRIPTION: XML configuration for adding the Mockito mocking library to a Maven project for Java. This is used for creating mock objects in unit tests.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>4.6.1</version>
    <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Plugin Card Template Usage
DESCRIPTION: Example of using the plugin card template with various parameters including title, description, bundled status, author, documentation URL, and rating issue number

LANGUAGE: html
CODE:
{% include plugins/pluginCard.html
    title="OpenAPI Annotation Processor"
    description="
        This OpenAPI plugin replaces the old DSL + annotation setup that was
        available before Javalin 5.
        Features:
        <ul>
            <li>Reflection free, does not perform any extra operations at runtime</li>
            <li>Uses @OpenApi to simplify migration from bundled OpenApi implementation</li>
            <li>Provides better projection of OpenAPI specification</li>
            <li>Schema validation through Swagger core module</li>
        </ul>
    "
    bundled="false"
    author="dzikoysk"
    docsUrl="https://github.com/javalin/javalin-openapi#readme"
    ratingIssueNr="133"
%}

----------------------------------------

TITLE: Implementing WebSocket Handler Using Lambda Approach in Java
DESCRIPTION: Demonstrates how to set up WebSocket endpoints using lambda functions in Java. Handles connection, message reception, closure, and error events. Includes echo functionality for received messages.

LANGUAGE: java
CODE:
app.ws("/websocket", ws -> {
    ws.onConnect(session -> System.out.println("Connected"));
    ws.onMessage((session, message) -> {
        System.out.println("Received: " + message);
        session.getRemote().sendString("Echo: " + message);
    });
    ws.onClose((session, statusCode, reason) -> System.out.println("Closed"));
    ws.onError((session, throwable) -> System.out.println("Errored"));
});

----------------------------------------

TITLE: WebSocket Event Handling
DESCRIPTION: Demonstrates how to handle WebSocket events in Javalin including connect, message, close and error events.

LANGUAGE: java
CODE:
app.ws("/websocket/:path", ws -> {
    ws.onConnect(ctx -> System.out.println("Connected"));
});

LANGUAGE: kotlin
CODE:
app.ws("/websocket/:path") { ws ->
    ws.onConnect { ctx -> println("Connected") }
}

----------------------------------------

TITLE: Configuring CORS in Javalin 5 (Kotlin)
DESCRIPTION: This code snippet shows how to configure Cross-Origin Resource Sharing (CORS) in Javalin 5 using Kotlin. It demonstrates the new flexible CORS configuration options.

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
config.plugins.enableCors { cors ->
    cors.add { corsConfig ->
        //replacement for enableCorsForOrigin(@NotNull String... origins)
        corsConfig.allowHost(/* add your origins here */)
        //replacement for enableCorsForAllOrigins()
        corsConfig.anyHost()
    }
}
}.start()

----------------------------------------

TITLE: Adding MockK Dependency for Kotlin
DESCRIPTION: XML configuration for adding the MockK mocking library to a Maven project for Kotlin. This is used for creating mock objects in unit tests.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.mockk</groupId>
    <artifactId>mockk</artifactId>
    <version>1.12.5</version>
    <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Adding Javalin Dependency with Maven
DESCRIPTION: Maven dependency configuration for including Javalin in a project. Uses groupId 'io.javalin' and artifactId 'javalin'.

LANGUAGE: markup
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin</artifactId>
    <version>{{javalinVersion | default: site.javalinversion}}</version>
</dependency>

----------------------------------------

TITLE: Querying Nullable Values with Validation in Kotlin
DESCRIPTION: Demonstrates how to use the new .getOrNull() method for handling optional query parameters in Javalin 3.1.0. This allows for nullable results in validation.

LANGUAGE: kotlin
CODE:
val optionalInstant = ctx.queryParam<Instant>("instant").getOrNull()

----------------------------------------

TITLE: Configuring Javalin SSL Plugin for mTLS in Java
DESCRIPTION: Java code snippet demonstrating how to configure the Javalin SSL plugin for mutual TLS authentication, including setting up server certificates and trust configuration.

LANGUAGE: java
CODE:
SslPlugin plugin = new SslPlugin(conf -> {
    conf.insecure = false; // Disable HTTP

    // Server certificate and private key
    conf.pemFromPath("/etc/ssl/server.crt", "/etc/ssl/server.key"); 

    conf.withTrustConfig(trustConfig -> {
        // CA certificate
        trustConfig.certificateFromPath("/etc/ssl/ca.crt"); 
    });
});

Javalin.create(javalinConfig -> {
    javalinConfig.plugins.register(plugin);
}).start();

----------------------------------------

TITLE: Handling File Uploads
DESCRIPTION: Demonstrates how to handle file uploads in Javalin using the uploadedFiles method.

LANGUAGE: java
CODE:
app.post("/upload", ctx -> {
    ctx.uploadedFiles("files").forEach(file -> {
        FileUtil.streamToFile(file.getContent(), "upload/" + file.getName())
    });
});

LANGUAGE: kotlin
CODE:
app.post("/upload") { ctx ->
    ctx.uploadedFiles("files").forEach { (contentType, content, name, extension) ->
        FileUtil.streamToFile(content, "upload/$name")
    }
}

----------------------------------------

TITLE: Initializing Javalin Server with Vue Configuration
DESCRIPTION: Kotlin code to set up a Javalin server with Vue configuration and static file handling.

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin

fun main() {
    val app = Javalin.create { config ->
        config.staticFiles.enableWebjars()
        config.vue.vueInstanceNameInJs = "app" // only required for Vue 3, is defined in layout.html
    }.start(7070)
}

----------------------------------------

TITLE: Adding Javalin Dependency
DESCRIPTION: How to add the Javalin dependency to your project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin</artifactId>
    <version>{{site.javalinFiveVersion}}</version>
</dependency>

----------------------------------------

TITLE: Implementing Javalin WebSocket Chat Server in Java
DESCRIPTION: This Java code implements the Javalin WebSocket server for the chat application, handling connections, messages, and broadcasting to all users.

LANGUAGE: java
CODE:
import io.javalin.Javalin;
import io.javalin.http.staticfiles.Location;
import io.javalin.websocket.WsContext;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import static j2html.TagCreator.*;

public class JavalinWebsocketExampleApp {

    private static final Map<WsContext, String> userUsernameMap = new ConcurrentHashMap<>();
    private static int nextUserNumber = 1; // Assign to username for next connecting user

    public static void main(String[] args) {
        Javalin app = Javalin.create(config -> {
            config.staticFiles.add("/public", Location.CLASSPATH);
            config.router.mount(router -> {
                router.ws("/chat", ws -> {
                    ws.onConnect(ctx -> {
                        String username = "User" + nextUserNumber++;
                        userUsernameMap.put(ctx, username);
                        broadcastMessage("Server", (username + " joined the chat"));
                    });
                    ws.onClose(ctx -> {
                        String username = userUsernameMap.get(ctx);
                        userUsernameMap.remove(ctx);
                        broadcastMessage("Server", (username + " left the chat"));
                    });
                    ws.onMessage(ctx -> {
                        broadcastMessage(userUsernameMap.get(ctx), ctx.message());
                    });
                });
            });
        }).start(7070);
    }

    // Sends a message from one user to all users, along with a list of current usernames
    private static void broadcastMessage(String sender, String message) {
        userUsernameMap.keySet().stream().filter(ctx -> ctx.session.isOpen()).forEach(session -> {
            session.send(
                Map.of(
                    "userMessage", createHtmlMessageFromSender(sender, message),
                    "userlist", userUsernameMap.values()
                )
            );
        });
    }

    // Builds a HTML element with a sender-name, a message, and a timestamp
    private static String createHtmlMessageFromSender(String sender, String message) {
        return article(
            b(sender + " says:"),
            span(attrs(".timestamp"), new SimpleDateFormat("HH:mm:ss").format(new Date())),
            p(message)
        ).render();
    }

}

----------------------------------------

TITLE: Functional Testing Javalin Applications in Kotlin
DESCRIPTION: Kotlin code demonstrating how to write functional tests for Javalin applications using JavalinTest. It shows how to test HTTP endpoints and verify responses.

LANGUAGE: kotlin
CODE:
import io.javalin.plugin.json.JavalinJackson
import io.javalin.testtools.JavalinTest
import org.assertj.core.api.Assertions.assertThat
import org.junit.Test

class FunctionalTest {

    private val app = JavalinTestingExampleApp("someDependency").app // inject any dependencies you might have
    private val usersJson = JavalinJackson().toJsonString(UserController.users)

    @Test
    fun `GET to fetch users returns list of users`() = JavalinTest.test(app) { server, client ->
        assertThat(client.get("/users").code).isEqualTo(200)
        assertThat(client.get("/users").body?.string()).isEqualTo(usersJson)
    }

}

----------------------------------------

TITLE: Adding Javalin and Vue Dependencies in Maven
DESCRIPTION: Maven dependency configuration to add Javalin and Vue to the project.

LANGUAGE: markup
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin-bundle</artifactId>
    <version>{{site.javalinversion}}</version>
</dependency>
<dependency>
    <groupId>org.webjars.npm</groupId>
    <artifactId>vue</artifactId>
    <version>3.2.37</version>
</dependency>

----------------------------------------

TITLE: Implementing OpenAPI Support in Javalin 5.0
DESCRIPTION: Demonstrates how to use Javalin's OpenAPI plugin to document API endpoints. Shows annotation-based OpenAPI specification for a user registration endpoint.

LANGUAGE: kotlin
CODE:
@OpenApi(
    path = "/api/v1/users",
    methods = [HttpMethod.POST],
    summary = "Register a user",
    tags = ["Users"],
    requestBody = OpenApiRequestBody(
        content = [OpenApiContent(RegistrationRequest::class)],
        required = true,
        description = "Data about the user"
    ),
    responses = [
        OpenApiResponse(status = "200", ...),
        OpenApiResponse(status = "401", ...),
    ]
)
fun register(context: Context) {
    // handler code goes here
}

----------------------------------------

TITLE: Defining CRUD API in Javalin
DESCRIPTION: Demonstrates Javalin's approach to defining a CRUD API using static-like methods within a lambda, operating on an instance.

LANGUAGE: java
CODE:
import io.javalin.Javalin;
import static io.javalin.apibuilder.ApiBuilder.*;

Javalin.create(config -> {
    config.enableCorsForAllOrigins();
}).routes(() -> {
    path("users", () -> {
        get(UserController::getAll);
        post(UserController::create);
        path(":user-id", () -> {
            get(UserController::getOne);
            patch(UserController::update);
            delete(UserController::delete);
        });
    });
}).start(port);

----------------------------------------

TITLE: Defining Role-based Access Control
DESCRIPTION: Enum implementation of RouteRole interface to define different access levels for the API.

LANGUAGE: java
CODE:
import io.javalin.security.RouteRole;

enum Role implements RouteRole { ANYONE, USER_READ, USER_WRITE }

----------------------------------------

TITLE: Implementing Base Plugin Class in Kotlin
DESCRIPTION: Definition of the core Plugin abstract class in Kotlin, showing all available methods that can be overridden when creating a Javalin plugin.

LANGUAGE: kotlin
CODE:
abstract class Plugin<CONFIG>(userConfig: Consumer<CONFIG>? = null, defaultConfig: CONFIG? = null) {
    open fun onInitialize(config: JavalinConfig) {}
    open fun onStart(config: JavalinConfig) {}
    open fun repeatable(): Boolean = false
    open fun priority(): PluginPriority = PluginPriority.NORMAL
    open fun name(): String = this.javaClass.simpleName
    @JvmField
    protected var pluginConfig: CONFIG = defaultConfig?.also { userConfig?.accept(it) } as CONFIG
}

----------------------------------------

TITLE: Creating a General Extension Class in Javalin
DESCRIPTION: Demonstrates how to create a general extension class in Javalin that holds multiple extensions. This approach allows for centralized management of various custom functionalities.

LANGUAGE: java
CODE:
VelocityEngine velocityEngine = new VelocityEngine();
Gson gson = new GsonBuilder().create();

app.before(ctx -> ctx.register(Ext.class, new Ext(ctx, gson, velocityEngine)));

----------------------------------------

TITLE: Defining Routes with Javalin Instance
DESCRIPTION: An example of defining routes using a Javalin instance, demonstrating the verbosity and potential naming conflicts.

LANGUAGE: java
CODE:
Javalin server = Javalin.create();
server.path("/api", () -> {
    server.get("/users", UserController::getAll);
    server.post("/users", UserController::create);
    server.path("/users", () -> {
        server.get("/:user-id", UserController::getOne);
        server.patch("/:user-id", UserController::update);
        server.delete("/:user-id", UserController::delete);
    });
});

----------------------------------------

TITLE: Configuring Access Management and Routes in Javalin
DESCRIPTION: Kotlin code setting up role-based access control, authentication, and route configuration for both frontend and API endpoints.

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin
import io.javalin.apibuilder.ApiBuilder.get
import io.javalin.security.RouteRole
import io.javalin.http.Header
import io.javalin.http.Context
import io.javalin.http.HttpStatus
import io.javalin.http.UnauthorizedResponse
import io.javalin.vue.VueComponent

enum class Role : RouteRole { ANYONE, LOGGED_IN }

fun main() {

    val app = Javalin.create { config ->
        config.staticFiles.enableWebjars()
        config.vue.apply {
            stateFunction = { ctx -> mapOf("currentUser" to ctx.currentUser()) }
            vueInstanceNameInJs = "app"
        }
        config.router.mount {
            it.beforeMatched { ctx ->
                if (Role.LOGGED_IN in ctx.routeRoles() && ctx.currentUser() == null) {
                    ctx.header(Header.WWW_AUTHENTICATE, "Basic")
                    throw UnauthorizedResponse()
                }
            }
        }.apiBuilder { // frontend routes
            get("/", VueComponent("hello-world"), Role.ANYONE)
            get("/users", VueComponent("user-overview"), Role.ANYONE)
            get("/users/{user-id}", VueComponent("user-profile"), Role.LOGGED_IN)
        }.apiBuilder { // api routes
            get("/api/users", UserController::getAll, Role.ANYONE)
            get("/api/users/{user-id}", UserController::getOne, Role.LOGGED_IN)
        }
    }.apply {
        error(HttpStatus.NOT_FOUND, "html", VueComponent("not-found"))
    }.start(7070)

}

private fun Context.currentUser() = this.basicAuthCredentials()?.username

----------------------------------------

TITLE: Registering GraphQL Plugin in Javalin
DESCRIPTION: Configuration code to register and initialize the GraphQL plugin with Javalin, including package scanning and component registration.

LANGUAGE: kotlin
CODE:
val app = Javalin.create {
    val graphQLOption = GraphQLOptions("/graphql", ContextExample())
            .addPackage("io.javalin.examples")
            .register(QueryExample(message))
            .register(MutationExample(message))
            .register(SubscriptionExample())
            .context()
    it.registerPlugin(GraphQLPlugin(graphQLOption))
}

app.start()

----------------------------------------

TITLE: Defining Nullable Context Attributes in Kotlin
DESCRIPTION: Updated function signatures in the Context class to properly mark attribute-related methods as nullable. These changes improve type safety for Kotlin users by correctly indicating that attribute values may be null.

LANGUAGE: kotlin
CODE:
fun <T> attribute(attribute: String): T?
fun <T> attributeMap(): Map<String, T?>
fun <T> sessionAttribute(attribute: String): T?
fun <T> sessionAttributeMap(): Map<String, T?>

----------------------------------------

TITLE: Optimizing Dependencies in JavalinVue
DESCRIPTION: Configuration option to optimize dependency loading in JavalinVue. When enabled, only the dependencies required for the current route component are loaded.

LANGUAGE: java
CODE:
JavalinVue.optimizeDependencies = true;

----------------------------------------

TITLE: Alternative Route Definition with Varargs in Java
DESCRIPTION: An alternative approach to defining routes in Javalin using varargs, which reduces nesting but may impact Kotlin interoperability.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.enableCorsForAllOrigins();
}).routes(
    path("users",
        get(UserController::getAll),
        post(UserController::create),
        path(":user-id",
            get(UserController::getOne),
            patch(UserController::update),
            delete(UserController::delete)
        )
    )
).start(port);

----------------------------------------

TITLE: Implementing an Access Manager
DESCRIPTION: Demonstrates how to implement per-endpoint authentication and authorization using Javalin's AccessManager interface.

LANGUAGE: java
CODE:
// Set the access-manager that Javalin should use
app.accessManager((handler, ctx, permittedRoles) -> {
    MyRole userRole = getUserRole(ctx);
    if (permittedRoles.contains(userRole)) {
        handler.handle(ctx);
    } else {
        ctx.status(401).result("Unauthorized");
    }
});

Role getUserRole(Context ctx) {
    // determine user role based on request
    // typically done by inspecting headers
}

enum MyRole implements Role {
    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE;
}

app.routes(() -> {
    get("/un-secured",   ctx -> ctx.result("Hello"),   roles(ANYONE));
    get("/secured",      ctx -> ctx.result("Hello"),   roles(ROLE_ONE));
});

LANGUAGE: kotlin
CODE:
// Set the access-manager that Javalin should use
app.accessManager { handler, ctx, permittedRoles ->
    val userRole = getUserRole(ctx) // determine user role based on request
    if (permittedRoles.contains(userRole)) {
        handler.handle(ctx)
    } else {
        ctx.status(401).result("Unauthorized")
    }
}

fun getUserRole(ctx: Context) : Role {
    // determine user role based on request
    // typically done by inspecting headers
}

internal enum class MyRole : Role {
    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE
}

app.routes {
    get("/un-secured",   { ctx -> ctx.result("Hello")},   roles(MyRole.ANYONE));
    get("/secured",      { ctx -> ctx.result("Hello")},   roles(MyRole.ROLE_ONE));
}

----------------------------------------

TITLE: Adding javalin-rendering Dependency in Maven
DESCRIPTION: XML snippet for adding the javalin-rendering dependency to a Maven project. It also includes a placeholder for adding a specific template engine dependency.

LANGUAGE: markup
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin-rendering</artifactId>
    <version>{{site.javalinversion}}</version>
</dependency>
<dependency>
    <groupId><!-- template engine group --></groupId>
    <artifactId><!-- template engine artifact --></artifactId>
    <version><!-- template engine version --></version>
</dependency>

----------------------------------------

TITLE: Configuring File Upload Options in Javalin 5.3.0
DESCRIPTION: Demonstrates how to configure file upload settings in Javalin 5.3.0, including cache directory, maximum file size, in-memory file size, and total request size.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.fileUpload.cacheDirectory("c:/temp"); //where to write files that exceed the in memory limit
    config.fileUpload.maxFileSize(100, SizeUnit.MB); //the maximum individual file size allowed
    config.fileUpload.maxInMemoryFileSize(10, SizeUnit.MB); //the maximum file size to handle in memory
    config.fileUpload.maxTotalRequestSize(1, SizeUnit.GB); //the maximum size of the entire multipart request
});

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.fileUpload.cacheDirectory("c:/temp") //where to write files that exceed the in memory limit
    config.fileUpload.maxFileSize(100, SizeUnit.MB) //the maximum individual file size allowed
    config.fileUpload.maxInMemoryFileSize(10, SizeUnit.MB) //the maximum file size to handle in memory
    config.fileUpload.maxTotalRequestSize(1, SizeUnit.GB) //the maximum size of the entire multipart request
}

----------------------------------------

TITLE: Implementing Rate Limiting in Javalin Handlers
DESCRIPTION: Demonstrates how to use the new RateLimit utility class to limit requests per time unit for specific endpoints. The rate limiter works independently for each IP and Handler combination.

LANGUAGE: kotlin
CODE:
app.get("/") { ctx ->
    RateLimit(ctx).requestPerTimeUnit(5, TimeUnit.MINUTES) // throws if rate limit is exceeded
    ctx.status("Hello, rate-limited World!")
}

----------------------------------------

TITLE: Adding Javalin Dependency with Gradle
DESCRIPTION: Gradle dependency configuration for including Javalin using the implementation configuration.

LANGUAGE: java
CODE:
implementation("io.javalin:javalin:{{javalinVersion | default: site.javalinversion }}")

----------------------------------------

TITLE: Implementing GraphQL Query in Kotlin
DESCRIPTION: Example of creating a GraphQL query class with annotated methods and descriptions.

LANGUAGE: kotlin
CODE:
@GraphQLDescription("Query Example")
class QueryExample : QueryGraphql {
    fun hello(): String = "Hello world"

    fun demoData(@GraphQLDescription("awesome input") data: DemoData): DemoData = data
}

----------------------------------------

TITLE: Creating Not Found Vue Component
DESCRIPTION: Simple Vue component for displaying a 404 error page.

LANGUAGE: html
CODE:
<template id="not-found">
  <h1>Page not found (error 404)</h1>
</template>
<script>
  app.component("not-found", {template: "#not-found"});
</script>

----------------------------------------

TITLE: Demonstrating New Validation Syntax in Java
DESCRIPTION: This snippet illustrates the new, more concise syntax for validation introduced in Javalin 2.8.0. It shows how to validate query parameters with different types and custom checks using Java.

LANGUAGE: java
CODE:
var myQpStr = ctx.queryParam("my-qp");
var myQpInt = ctx.queryParam("my-qp", Integer.class).get();
var myQpInt = ctx.queryParam("my-qp", Integer.class).check(i -> i > 4).get();
var instant = ctx.queryParam("my-qp", Instant.class).get();

----------------------------------------

TITLE: Adding Javalin Dependency with Grape
DESCRIPTION: Grape dependency configuration for including Javalin using the @Grab annotation.

LANGUAGE: java
CODE:
@Grab(group='io.javalin', module='javalin', version='{{javalinVersion | default: site.javalinversion }}')

----------------------------------------

TITLE: Using GraphQL Context in Queries
DESCRIPTION: Example of accessing the GraphQL context within a query using the @GraphQLContext annotation.

LANGUAGE: kotlin
CODE:
class QueryExample() : QueryGraphql {
    fun context(@GraphQLContext context: ContextExample): ContextExample {
        return context
    }
}

----------------------------------------

TITLE: Implementing Async Request Handling in Javalin using Kotlin
DESCRIPTION: Demonstrates how to implement async request handling in Javalin using CompletableFuture. The example shows a simple server setup that returns a delayed 'Hello World!' response using a scheduled executor.

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin

fun main(args: Array<String>) {
    val app = Javalin.start(7000)
    app.get("/") { ctx -> ctx.result(getFuture()) }
}

// hopefully your future is less pointless than this:
private fun getFuture() = CompletableFuture<String>().apply {
    Executors.newSingleThreadScheduledExecutor().schedule({ this.complete("Hello World!") }, 1, TimeUnit.SECONDS)
}

----------------------------------------

TITLE: Configuring JSON Mapper in Javalin 4
DESCRIPTION: Shows how to configure a custom JSON mapper in Javalin 4. This replaces the static JavalinJson configuration from previous versions.

LANGUAGE: kotlin
CODE:
config.jsonMapper(jsonMapper)

----------------------------------------

TITLE: Registering App Extensions in Javalin
DESCRIPTION: Demonstrates how to register app extensions using lambda functions or classes implementing the Extension interface. This allows for modular additions to Javalin applications.

LANGUAGE: java
CODE:
Javalin.create()
    .register(app -> { ... }) // register lambda
    .register(new ExtensionClass(...)); // ExtensionClass must implement Extension

----------------------------------------

TITLE: Adding Javalin Dependency with Buildr
DESCRIPTION: Buildr dependency configuration for including Javalin.

LANGUAGE: java
CODE:
'io.javalin:javalin:jar:{{javalinVersion | default: site.javalinversion }}'

----------------------------------------

TITLE: Frontend CORS Credential Configuration
DESCRIPTION: Examples of how to configure frontend requests to include credentials when making CORS requests.

LANGUAGE: javascript
CODE:
const data = {};
fetch("https://example.com", {
  method: "POST",
  credentials: "include",
  headers: {
    "Content-Type": "application/json"
  },
  body: JSON.stringify(data)
});

LANGUAGE: javascript
CODE:
import axios from "axios";

const data = {};
axios.post("https://example.com", data, {
  withCredentials: true
});

----------------------------------------

TITLE: Validation in Javalin
DESCRIPTION: Examples of using Javalin's validation features.

LANGUAGE: java
CODE:
// VALIDATE A SINGLE QUERY PARAMETER WITH A DEFAULT VALUE /////////////////////////////////////////////
Integer myValue = ctx.queryParamAsClass("value", Integer.class).getOrDefault(788) // validate value
ctx.result(value) // return validated value to the client
// GET ?value=a would yield HTTP 400 - {"my-qp":[{"message":"TYPE_CONVERSION_FAILED","args":{},"value":"a"}]}
// GET ?value=1 would yield HTTP 200 - 1 (the validated value)
// GET ?        would yield HTTP 200 - 788 (the default value)


// VALIDATE TWO DEPENDENT QUERY PARAMETERS ////////////////////////////////////////////////////////////
Instant fromDate = ctx.queryParamAsClass("from", Instant.class).get();
Instant toDate = ctx.queryParamAsClass("to", Instant.class)
    .check(it -> it.isAfter(fromDate), "'to' has to be after 'from'")
    .get();


// VALIDATE A JSON BODY ///////////////////////////////////////////////////////////////////////////////
MyObject myObject = ctx.bodyValidator(MyObject.class)
    .check(obj -> obj.myObjectProperty == someValue, "THINGS_MUST_BE_EQUAL")
    .get();

// VALIDATE WITH CUSTOM VALIDATIONERROR ///////////////////////////////////////////////////////////////
ctx.queryParamAsClass("param", Integer.class)
    .check({ it > 5 }, new ValidationError("OVER_LIMIT", Map.of("limit", 5)))
    .get();
// GET ?param=10 would yield HTTP 400 - {"param":[{"message":"OVER_LIMIT","args":{"limit":5},"value":10}]}

LANGUAGE: kotlin
CODE:
// VALIDATE A SINGLE QUERY PARAMETER WITH A DEFAULT VALUE /////////////////////////////////////////////
val myValue = ctx.queryParamAsClass<Int>("value").getOrDefault(788) // validate value
ctx.result(value) // return validated value to the client
// GET ?value=a would yield HTTP 400 - {"my-qp":[{"message":"TYPE_CONVERSION_FAILED","args":{},"value":"a"}]}
// GET ?value=1 would yield HTTP 200 - 1 (the validated value)
// GET ?        would yield HTTP 200 - 788 (the default value)


// VALIDATE TWO DEPENDENT QUERY PARAMETERS ////////////////////////////////////////////////////////////
val fromDate = ctx.queryParamAsClass<Instant>("from").get()
val toDate = ctx.queryParamAsClass<Instant>("to")
    .check({ it.isAfter(fromDate) }, "'to' has to be after 'from'")
    .get()


// VALIDATE A JSON BODY ///////////////////////////////////////////////////////////////////////////////
val myObject = ctx.bodyValidator<MyObject>()
    .check({ it.myObjectProperty == someValue }, "THINGS_MUST_BE_EQUAL")
    .get()

// VALIDATE WITH CUSTOM VALIDATIONERROR ///////////////////////////////////////////////////////////////
ctx.queryParamAsClass<Int>("param")
    .check({ it > 5 }, ValidationError("OVER_LIMIT", args = mapOf("limit" to 5)))
    .get()
// GET ?param=10 would yield HTTP 400 - {"param":[{"message":"OVER_LIMIT","args":{"limit":5},"value":10}]}

----------------------------------------

TITLE: Implementing App Frame Vue Component
DESCRIPTION: Vue component providing a consistent layout frame for the application, including header and content slot.

LANGUAGE: html
CODE:
<template id="app-frame">
  <div class="app-frame">
    <header>
      <span>JavalinVue demo app</span>
    </header>
    <slot></slot>
  </div>
</template>
<script>
  app.component("app-frame", {template: "#app-frame"});
</script>
<style>
  .app-frame > header {
    padding: 20px;
    background: #b6e2ff;
    font-size: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
</style>

----------------------------------------

TITLE: JSON Future Implementation in Kotlin
DESCRIPTION: Shows the implementation of the json(future) method for handling CompletableFuture objects and converting them to JSON responses.

LANGUAGE: kotlin
CODE:
fun json(future: CompletableFuture<*>): Context {
    val mappingFuture = future.thenApply { obj -> JavalinJson.toJsonMapper.map(obj) }
    return contentType("application/json").result(mappingFuture)
}

----------------------------------------

TITLE: Adding Javalin Dependency to Maven POM
DESCRIPTION: Maven dependency configuration specifically for including Javalin in the project.

LANGUAGE: markup
CODE:
<dependencies>
    <dependency>
        <groupId>io.javalin</groupId>
        <artifactId>javalin</artifactId>
        <version>{{site.javalinversion}}</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Validating and Casting Headers in Javalin 3.5.0
DESCRIPTION: Demonstrates the new feature for validating and casting headers in Javalin 3.5.0. This allows for type-safe header access, converting header values to specified types.

LANGUAGE: java
CODE:
ctx.header<Int>("my-header")

----------------------------------------

TITLE: Loading PEM Certificates and Keys
DESCRIPTION: Demonstrates various methods to load PEM certificates and keys from different sources.

LANGUAGE: java
CODE:
pemFromPath("/path/to/cert.pem", "/path/to/key.pem");
pemFromPath("/path/to/cert.pem", "/path/to/key.pem", "keyPassword");
pemFromClasspath("certName.pem", "keyName.pem");
pemFromClasspath("certName.pem", "keyName.pem", "keyPassword");
pemFromInputStream(certInputStream, keyInputStream);
pemFromInputStream(certInputStream, keyInputStream, "keyPassword");
pemFromString(certString, keyString);
pemFromString(certString, keyString, "keyPassword");

----------------------------------------

TITLE: Defining Nested Routes in Sparkjava
DESCRIPTION: An example of declaring nested routes in Sparkjava using the static 'path' method and lambda expressions.

LANGUAGE: java
CODE:
path("/api", () -> {
    get("/users", UserController::getAll);
    post("/users", UserController::create);
    path("/users", () -> {
        get("/:user-id", UserController::getOne);
        patch("/:user-id", UserController::update);
        delete("/:user-id", UserController::delete);
    });
});

----------------------------------------

TITLE: Custom Type Validation Registration in Kotlin
DESCRIPTION: Demonstrates how to register custom type converters for validation, specifically showing an Instant class converter example.

LANGUAGE: kotlin
CODE:
JavalinValidation.register(Instant::class.java) { Instant.ofEpochMilli(it.toLong()) }

----------------------------------------

TITLE: Setting Java 10 Compiler Properties in Maven
DESCRIPTION: XML configuration to set Java 10 as the source and target version for the Maven compiler.

LANGUAGE: xml
CODE:
<properties>
    <maven.compiler.source>10</maven.compiler.source>
    <maven.compiler.target>10</maven.compiler.target>
</properties>

----------------------------------------

TITLE: New Path Parameter Syntax in Javalin 4
DESCRIPTION: Illustrates the new syntax for defining path parameters in Javalin 4 routes. This includes support for parameters with slashes and more complex path structures.

LANGUAGE: kotlin
CODE:
/{param}
<param>
/{p1}AND{p2}
/{filename}.{extension}

----------------------------------------

TITLE: Testing GET request to simulated API (Kotlin)
DESCRIPTION: Example of testing a GET request to a simulated API using Javalin, following the Arrange-Act-Assert pattern.

LANGUAGE: kotlin
CODE:
@Test
fun `gets a user profile by id`() {
    fakeProfile = Javalin.create().get("profile/abc") {
        it.json(mapOf("id" to "abc", "email" to "x123@gmail.com"))
    }.start(1234)
    val profileGateway = ProfileGateway(apiUrl = "http://localhost:1234")

    val result = profileGateway.fetchProfile("abc")

    assertEquals(Profile(id = "abc", email = "x123@gmail.com".toEmail()), result)
}

----------------------------------------

TITLE: Initializing Basic Javalin Server - Hello World Example
DESCRIPTION: Demonstrates how to create and start a basic Javalin server that responds with 'Hello World' on the root path. Shows implementation in both Java and Kotlin.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    Javalin app = Javalin.create().start(7000);
    app.get("/", ctx -> ctx.result("Hello World"));
}

LANGUAGE: kotlin
CODE:
fun main(args: Array<String>) {
    val app = Javalin.create().start(7000)
    app.get("/") { ctx -> ctx.result("Hello World") }
}

----------------------------------------

TITLE: Configuring Javalin Routes with Google Guice
DESCRIPTION: Java class for setting up Javalin routes using Google Guice for dependency injection.

LANGUAGE: java
CODE:
package io.kidbank.user;

import io.alzuma.Routing;
import io.javalin.Javalin;

import javax.inject.Inject;
import javax.inject.Singleton;

import static io.javalin.apibuilder.ApiBuilder.get;
import static io.javalin.apibuilder.ApiBuilder.path;

@Singleton
class UserRouting extends Routing<UserController> {
    private Javalin javalin;
    @Inject
    public UserRouting(Javalin javalin) {
        this.javalin = javalin;
    }

    @Override
    public void bindRoutes() {
        javalin.routes(() -> {
            path("api/kidbank/users", () -> {
                get(ctx -> getController().index(ctx));
            });
        });
    }
}

----------------------------------------

TITLE: Accessing WebSocket Session Attributes in Javalin
DESCRIPTION: Shows how to access session attributes in WebSocket handlers after the architecture change to use a single ServletContextHandler. This enables authentication and session management for WebSocket connections.

LANGUAGE: java
CODE:
app.ws("/", ws -> {
    ws.onConnect(ctx -> {
        ctx.sessionAttribute("current-user");
    });
});

LANGUAGE: kotlin
CODE:
app.ws("/") { ws ->
    ws.onConnect { ctx ->
        ctx.sessionAttribute<String>("current-user")
    }
}

----------------------------------------

TITLE: Adding Additional Metrics to Prometheus Registry in Javalin
DESCRIPTION: Java code demonstrating how to add various system and JVM metrics to the Prometheus registry, and configure the Micrometer plugin with these additional metrics.

LANGUAGE: java
CODE:
import io.micrometer.core.instrument.binder.jvm.*;
import io.micrometer.core.instrument.binder.system.*;


PrometheusMeterRegistry prometheusMeterRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);


// add a tag to all reported values to simplify filtering in large installations:
registry.config().commonTags("application", "My-Application");

new ClassLoaderMetrics().bindTo(registry);
new JvmMemoryMetrics().bindTo(registry);
new JvmGcMetrics().bindTo(registry);
new JvmThreadMetrics().bindTo(registry);
new UptimeMetrics().bindTo(registry);
new ProcessorMetrics().bindTo(registry);
new DiskSpaceMetrics(new File(System.getProperty("user.dir"))).bindTo(registry);

MicrometerPlugin micrometerPlugin = new MicrometerPlugin(micrometerPluginConfig -> micrometerPluginConfig.registry = prometheusMeterRegistry);

Javalin app = Javalin.create(config -> config.registerPlugin(micrometerPlugin)).start(8080);

String contentType = "text/plain; version=0.0.4; charset=utf-8";
app.get("/prometheus", ctx -> ctx.contentType(contentType).result(prometheusMeterRegistry.scrape()));

----------------------------------------

TITLE: Adding SSL Plugin Maven Dependency
DESCRIPTION: Maven dependency configuration for including the Javalin SSL plugin in the project

LANGUAGE: markup
CODE:
<dependency>
    <groupId>io.javalin.community.ssl</groupId>
    <artifactId>ssl-plugin</artifactId>
    <version>{{site.javalinversion}}</version>
</dependency>

----------------------------------------

TITLE: Implementing WebSocket with Dynamic Paths in Kotlin
DESCRIPTION: Demonstrates how to use dynamic paths with WebSockets in Javalin 1.5.0. The example shows a chat application where the channel is specified as a path parameter.

LANGUAGE: kotlin
CODE:
ws("/chat/:channel") { ws ->
    ws.onMessage { session, message ->
        val channel = session.param("channel")
        broadcastMessage(channel, message)
    }
}

----------------------------------------

TITLE: Creating Google Guice Module for User-related Dependencies
DESCRIPTION: Java class defining a Google Guice module for binding user-related dependencies and routes.

LANGUAGE: java
CODE:
package io.kidbank.user;

import com.google.inject.AbstractModule;
import com.google.inject.multibindings.Multibinder;
import io.alzuma.Routing;
import io.kidbank.user.repositories.UserRepositoryModule;
import io.kidbank.user.services.UserServiceModule;

public class UserModule extends AbstractModule {
    @Override
    protected void configure() {
        bind(UserController.class);
        install(new UserServiceModule());
        install(new UserRepositoryModule());
        Multibinder.newSetBinder(binder(), Routing.class).addBinding().to(UserRouting.class);
    }
}

----------------------------------------

TITLE: Defining RESTful Routes with ApiBuilder in Java
DESCRIPTION: This snippet demonstrates how to define RESTful routes using Javalin's ApiBuilder in Java. It shows the new syntax where paths are not required for verb methods, resulting in a more readable and concise API definition.

LANGUAGE: java
CODE:
app.routes(() -> {
    path("users", () -> {
        get(UserController::getAllUsers);
        post(UserController::createUser);
        path(":id", () -> {
            get(UserController::getUser);
            patch(UserController::updateUser);
            delete(UserController::deleteUser);
        });
    });
});

----------------------------------------

TITLE: Javalin Backend Implementation
DESCRIPTION: Main application class implementing reservation endpoints and static file serving in both Java and Kotlin. Handles form submissions and reservation management.

LANGUAGE: java
CODE:
import io.javalin.Javalin;
import io.javalin.http.staticfiles.Location;
import io.javalin.util.FileUtil;
import java.util.HashMap;
import java.util.Map;

public class JavalinHtmlFormsExampleApp {

    private static final Map<String, String> reservations = new HashMap<>() {{
        put("saturday", "No reservation");
        put("sunday", "No reservation");
    }};

    public static void main(String[] args) {

        Javalin app = Javalin.create(config -> {
            config.staticFiles.add("/public", Location.CLASSPATH);
        });

        app.post("/make-reservation", ctx -> {
            reservations.put(ctx.formParam("day"), ctx.formParam("time"));
            ctx.html("Your reservation has been saved");
        });

        app.get("/check-reservation", ctx -> {
            ctx.html(reservations.get(ctx.queryParam("day")));
        });

        app.start();

    }

}

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin
import io.javalin.http.staticfiles.Location
import io.javalin.util.FileUtil

private val reservations = mutableMapOf<String?, String?>(
"saturday" to "No reservation",
"sunday" to "No reservation"
)

fun main() {

    val app = Javalin.create {
        it.staticFiles.add("/public", Location.CLASSPATH)
    }

    app.post("/make-reservation") { ctx ->
        reservations[ctx.formParam("day")] = ctx.formParam("time")
        ctx.html("Your reservation has been saved")
    }

    app.get("/check-reservation") { ctx ->
        ctx.html(reservations[ctx.queryParam("day")]!!)
    }

    app.start(7070)

}

----------------------------------------

TITLE: Configure Default Future Callback
DESCRIPTION: Configuration method for setting the default future callback behavior using ContextResolver

LANGUAGE: java
CODE:
ContextResolver#defaultFutureCallback

----------------------------------------

TITLE: Updating Kotlin Version
DESCRIPTION: Updates the Kotlin version to 1.2.10. This update does not introduce any breaking changes.

LANGUAGE: kotlin
CODE:
"1.2.10"

----------------------------------------

TITLE: Implementing WebEntrypoint for Javalin Server Initialization
DESCRIPTION: Java class for initializing and starting the Javalin server with injected routes.

LANGUAGE: java
CODE:
package io.kidbank;

import com.google.inject.Inject;
import io.alzuma.AppEntrypoint;
import io.alzuma.Routing;
import io.javalin.Javalin;

import javax.inject.Singleton;
import java.util.Collections;
import java.util.Set;

@Singleton
class WebEntrypoint implements AppEntrypoint {
    private Javalin app;

    @Inject(optional = true)
    private Set<Routing> routes = Collections.emptySet();

    @Inject
    public WebEntrypoint(Javalin app) {
        this.app = app;
    }

    @Override
    public void boot(String[] args) {
        bindRoutes();
        app.port(7000);
        app.start();
    }

    private void bindRoutes() {
        routes.forEach(r -> r.bindRoutes());
    }
}

----------------------------------------

TITLE: Defining RESTful Routes with ApiBuilder in Kotlin
DESCRIPTION: This snippet shows how to define RESTful routes using Javalin's ApiBuilder in Kotlin. It demonstrates the new syntax where paths are not required for verb methods, resulting in a more concise and readable API definition.

LANGUAGE: kotlin
CODE:
app.routes {
    path("users") {
        get(userController::getAllUsers);
        post(userController::createUser);
        path(":id") {
            get(userController::getUser);
            patch(userController::updateUser);
            delete(userController::deleteUser);
        }
    }
}

----------------------------------------

TITLE: Rendering a Template with Model in Kotlin
DESCRIPTION: Kotlin code example for rendering a template file with a model using the ctx.render() method.

LANGUAGE: kotlin
CODE:
ctx.render("/templateFile.ext", mapOf("firstName" to "John", "lastName" to "Doe"))

----------------------------------------

TITLE: Configuring Gradle repositories for BungeeCord/Waterfall
DESCRIPTION: Adds necessary Maven repositories for BungeeCord API and Maven Central to the Gradle build file.

LANGUAGE: java
CODE:
repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

----------------------------------------

TITLE: Configuring Javalin with Custom Jetty Handler in Java
DESCRIPTION: Demonstrates how to create a Javalin instance with a custom StatisticsHandler for the embedded Jetty server. This allows for additional functionality like statistics collection.

LANGUAGE: java
CODE:
StatisticsHandler statisticsHandler = new StatisticsHandler();

Javalin.create()
    .embeddedServer(new EmbeddedJettyFactory(() -> {
        Server server = new Server();
        server.setHandler(statisticsHandler);
        return server;
    }))
    .start();

----------------------------------------

TITLE: Configuring WebModule for Javalin and Entrypoint Binding
DESCRIPTION: Java class for setting up a Google Guice module to bind Javalin and the web entrypoint.

LANGUAGE: java
CODE:
package io.kidbank;

import com.google.inject.AbstractModule;
import com.google.inject.multibindings.MapBinder;
import io.alzuma.AppEntrypoint;
import io.alzuma.EntrypointType;
import io.javalin.Javalin;
import org.jetbrains.annotations.NotNull;

class WebModule extends AbstractModule {
    private Javalin app;

    private WebModule(Javalin app) {
        this.app = app;
    }

    @NotNull
    public static WebModule create() {
        return new WebModule(Javalin.create());
    }

    @Override
    protected void configure() {
        bind(Javalin.class).toInstance(app);
        MapBinder.newMapBinder(binder(), EntrypointType.class, AppEntrypoint.class).addBinding(EntrypointType.REST).to(WebEntrypoint.class);
    }
}

----------------------------------------

TITLE: Enabling Pre-compression of Static Files in Javalin
DESCRIPTION: Shows how to enable pre-compression of static files in Javalin. This feature stores compressible static files as highly compressed byte arrays in memory, ensuring that content-length is always set.

LANGUAGE: java
CODE:
config.precompressStaticFiles = true

----------------------------------------

TITLE: Configuring Static File Symlinks in Java
DESCRIPTION: Demonstrates how to configure alias checking for resolving symlinks for static files using ContextHandler.AliasCheck.

LANGUAGE: java
CODE:
config.aliasCheckForStaticFiles = ContextHandler.AliasCheck { path, resource ->
    /* Your predicate here */
}

----------------------------------------

TITLE: Enabling Dynamic GZIP Compression in Javalin
DESCRIPTION: Configures automatic GZIP compression for responses exceeding 1500 bytes.

LANGUAGE: java
CODE:
enableDynamicGzip()

----------------------------------------

TITLE: Creating Main Application Module
DESCRIPTION: Java class for the main application module that installs all necessary dependencies.

LANGUAGE: java
CODE:
import com.google.inject.AbstractModule;
import io.kidbank.KidBankModule;

public class AppModule extends AbstractModule {
    protected void configure() {
        bind(Startup.class);
        install(new KidBankModule());
    }
}

----------------------------------------

TITLE: Checking for Null Query Parameters in Java with Javalin
DESCRIPTION: Shows how to use ctx.anyQueryParamNull() method in Java to check if any of the specified query parameters are null. This is useful for Java developers who can't use the mapQueryParams() method.

LANGUAGE: java
CODE:
app.post("/new-user", ctx ->
    if (ctx.anyQueryParamNull("name", "email")) {
        throw new MissingQueryParamException();
    }
});

----------------------------------------

TITLE: Implementing UserController.create in Java
DESCRIPTION: Java implementation of the UserController.create method, which is being tested in the unit tests. It demonstrates handling of user creation based on username validity.

LANGUAGE: java
CODE:
public static void create(Context ctx) {
    String username = ctx.queryParam("username");
    if (username == null || username.length() < 5) {
        throw new BadRequestResponse();
    } else {
        users.add(username);
        ctx.status(201);
    }
}

----------------------------------------

TITLE: Configuring Javalin Routes for Mithril Components
DESCRIPTION: Java code snippet demonstrating how to set up Javalin routes for different Mithril components and API endpoints.

LANGUAGE: java
CODE:
app.get("/", new MithrilComponent("io.javalin.mithril.demo.HelloWorld"));
app.get("/users", new MithrilComponent("io.javalin.mithril.demo.UserOverview"));
app.get("/users/:user-id", new MithrilComponent("io.javalin.mithril.demo.UserProfile"));
app.error(404, "html", new MithrilComponent("io.javalin.mithril.demo.NotFound");
app.get("/api/users", UserController::getAll);
app.get("/api/users/:user-id", UserController::getOne);

----------------------------------------

TITLE: Using ctx.matchedPath() in Java
DESCRIPTION: Demonstrates the usage of the new ctx.matchedPath() function, which returns the current matched path from the Javalin router.

LANGUAGE: java
CODE:
app.get("/matched/:param", ...); // ctx.matchedPath() = "/matched/:param"

----------------------------------------

TITLE: Cloning the Javalin Student Application Repository
DESCRIPTION: Command to clone the example Javalin application repository from GitHub.

LANGUAGE: shell
CODE:
git clone https://github.com/aravindputrevu/javalin-student.git

----------------------------------------

TITLE: Mapping Query Parameters in Kotlin with Javalin
DESCRIPTION: Demonstrates the use of ctx.mapQueryParams() method in Kotlin to efficiently extract and validate query parameters. This method allows for destructuring and null-checking in a single line.

LANGUAGE: kotlin
CODE:
app.post("/new-user") { ctx ->
    val (name, email) = ctx.mapQueryParams("name", "email") ?: throw MissingQueryParamException()
}

----------------------------------------

TITLE: Implementing TODO MVC Backend with Kotlin and Javalin
DESCRIPTION: This Kotlin code snippet demonstrates the main class for the TODO MVC application. It sets up a Javalin server, defines a Todo data class, and implements endpoints for getting and updating todos. The server also serves static files for the frontend.

LANGUAGE: kotlin
CODE:
import io.javalin.http.staticfiles.Location
import io.javalin.http.bodyAsClass

data class Todo(val id: Long, val title: String, val completed: Boolean)

fun main() {

    var todos = arrayOf(Todo(123123123, "My very first todo", false))

    val app = Javalin.create {
        it.staticFiles.add("/public", Location.CLASSPATH)
        it.router.mount {
            it.get("/todos") { ctx ->
                ctx.json(todos)
            }
            it.put("/todos") { ctx ->
                todos = ctx.bodyAsClass<Array<Todo>>()
                ctx.status(204)
            }
        }
    }.start(7070)

}

----------------------------------------

TITLE: Cookie Store Usage Example in Kotlin
DESCRIPTION: Example showing how to store and retrieve different data types using cookieStore across different server instances. Demonstrates cross-server data sharing capability using cookies.

LANGUAGE: kotlin
CODE:
serverOneApp.post("/cookie-storer") { ctx ->
    ctx.cookieStore("string", "Hello world!")
    ctx.cookieStore("i", 42)
    ctx.cookieStore("list", listOf("One", "Two", "Three"))
}

serverTwoApp.get("/cookie-reader") { ctx -> // runs on a different server than serverOneApp
    val string = ctx.cookieStore<String>("string")
    val i = ctx.cookieStore<Int>("i")
    val list = ctx.cookieStore<List<String>>("list")
}

----------------------------------------

TITLE: Extensive Request Logging Output in Bash
DESCRIPTION: Displays the improved request logging output for LogLevel.EXTENSIVE, including matching endpoint-handlers for a request to '/matched/p1'.

LANGUAGE: bash
CODE:
[qtp319977154-18] INFO io.javalin.core.JavalinServlet - JAVALIN EXTENSIVE REQUEST LOG (this clones the response, which is an expensive operation):
Request: GET [/matched/p1]
    Matching endpoint-handlers: [BEFORE=*, GET=/matched/:param, AFTER=*]
    Headers: {User-Agent=unirest-java/1.3.11, Connection=keep-alive, Host=localhost:7777, Accept-Encoding=gzip}
    Cookies: {}
    Body:
    QueryString: null
    QueryParams: {}
    FormParams: {=[]}
Response: [200], execution took 1.65 ms
    Headers: {Server=Javalin, Date=Sun, 22 Oct 2017 09:56:27 GMT, Content-Type=text/plain;charset=utf-8}
    Body: (starts on next line)
/matched/:param

----------------------------------------

TITLE: Reading Student Records via cURL
DESCRIPTION: Shell commands to retrieve student records using cURL GET requests to the Javalin application.

LANGUAGE: shell
CODE:
curl -X GET http://localhost:8080/students
curl -X GET http://localhost:8080/students/003

----------------------------------------

TITLE: Accessing Session Attributes in Kotlin
DESCRIPTION: Demonstrates how to set, get, and retrieve all session attributes using new convenience functions in Javalin 0.5.4.

LANGUAGE: kotlin
CODE:
ctx.sessionAttribute("foo", "bar") // set session-attribute "foo" to "bar"
val foo = ctx.sessionAttribute<String>("foo") // get session-attribute "foo" as string
val sessionAttributeMap = ctx.sessionAttributeMap<Any>() // {foo=bar}

----------------------------------------

TITLE: Configuring Maven Dependencies for Javalin WebSocket Project
DESCRIPTION: XML configuration for adding Javalin dependencies to a Maven project. This snippet specifies the required Javalin bundle for implementing WebSocket functionality.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>io.javalin</groupId>
        <artifactId>javalin-bundle</artifactId>
        <version>{{site.javalinversion}}</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Maven Dependency Configuration for Mockito
DESCRIPTION: XML configuration to add Mockito core dependency to the project

LANGUAGE: xml
CODE:
<!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>3.1.0</version>
    <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Configuring Context Path in Javalin (Java)
DESCRIPTION: Demonstrates how to set up a Javalin application with a custom context path, enable static files, set the port, and define a route. The context path is set to '/my-path'.

LANGUAGE: java
CODE:
Javalin app = Javalin.create()
    .contextPath("/my-path")
    .enabledStaticFiles("public")
    .port(1234)
    .start()

app.get("/", ctx -> ctx.result("Hello, World"));

----------------------------------------

TITLE: Updating Student Records via cURL
DESCRIPTION: Shell command to update a student record using a cURL PATCH request to the Javalin application.

LANGUAGE: shell
CODE:
curl -X PATCH -H "Content-Type: application/json" http://localhost:8080/students -d '{ "id": "001","name": "Quarkus","age": 32}'

----------------------------------------

TITLE: Updating Jetty Dependency in Kotlin
DESCRIPTION: Updates the Jetty dependency to version 9.4.8.v20171121. This update does not introduce any breaking changes.

LANGUAGE: kotlin
CODE:
"9.4.8.v20171121"

----------------------------------------

TITLE: Adding jte Dependencies in Maven
DESCRIPTION: Required Maven dependencies for using jte with Javalin, including the core jte library and Javalin rendering extension.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>gg.jte</groupId>
    <artifactId>jte</artifactId>
    <version>2.2.1</version>
</dependency>

----------------------------------------

TITLE: WebSocket Implementation Using WebSocket Object in Java
DESCRIPTION: Demonstrates WebSocket implementation using a custom WebSocket object that implements Jetty's WebSocketListener interface or uses annotations.

LANGUAGE: java
CODE:
app.ws("/websocket", new WebSocketObject());

----------------------------------------

TITLE: Deleting data from API using curl
DESCRIPTION: Illustrates how to send a DELETE request to remove a specific StringData object from the API using curl.

LANGUAGE: bash
CODE:
curl --request DELETE your.raspberry.pi.ipaddress:8080/strings/1

----------------------------------------

TITLE: Accessing WebSocket Session Information in Kotlin
DESCRIPTION: Shows new convenience methods for extracting information from the WebSocket upgrade request, including parameters, headers, and host.

LANGUAGE: kotlin
CODE:
session.paramMap() // get all param key/values as map
session.header("key") // get a header
session.headerMap() // get all header key/values as map
session.host() // get request host

----------------------------------------

TITLE: WebRTC Peer Connection Logic
DESCRIPTION: JavaScript implementation of WebRTC peer connection handling, including SDP exchange and ICE candidate processing.

LANGUAGE: javascript
CODE:
{% include_relative snippets/main/resources/public/js/peer-connection.js %}

----------------------------------------

TITLE: Unit Testing Javalin Handlers in Kotlin
DESCRIPTION: Kotlin code demonstrating how to write unit tests for Javalin handlers using MockK for mocking the Context object. It includes tests for both successful and error scenarios.

LANGUAGE: kotlin
CODE:
import io.javalin.http.BadRequestResponse
import io.javalin.http.Context
import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import org.junit.Test

class UnitTest {

    private val ctx = mockk<Context>(relaxed = true)

    @Test
    fun `POST to create users gives 201 for valid username`() {
        every { ctx.queryParam("username") } returns "Roland"
        UserController.create(ctx) // the handler we're testing
        verify { ctx.status(201) }
    }

    @Test(expected = BadRequestResponse::class)
    fun `POST to create users throws for invalid username`() {
        every { ctx.queryParam("username") } returns null
        UserController.create(ctx) // the handler we're testing
    }

}

----------------------------------------

TITLE: Unit Testing Javalin Handlers in Kotlin
DESCRIPTION: Kotlin code demonstrating how to write unit tests for Javalin handlers using MockK for mocking the Context object. It includes tests for both successful and error scenarios.

LANGUAGE: kotlin
CODE:
import io.javalin.http.BadRequestResponse
import io.javalin.http.Context
import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import org.junit.Test

class UnitTest {

    private val ctx = mockk<Context>(relaxed = true)

    @Test
    fun `POST to create users gives 201 for valid username`() {
        every { ctx.queryParam("username") } returns "Roland"
        UserController.create(ctx) // the handler we're testing
        verify { ctx.status(201) }
    }

    @Test(expected = BadRequestResponse::class)
    fun `POST to create users throws for invalid username`() {
        every { ctx.queryParam("username") } returns null
        UserController.create(ctx) // the handler we're testing
    }

}

----------------------------------------

TITLE: WebSocket Implementation Using Annotated Class in Java
DESCRIPTION: Shows how to implement WebSocket functionality using an annotated class approach. References Jetty's annotation API documentation.

LANGUAGE: java
CODE:
app.ws("/websocket", WebSocketClass.class);

----------------------------------------

TITLE: Configuring Gradle repositories for Javalin
DESCRIPTION: Adds jcenter repository to the Gradle build file for resolving Javalin dependencies.

LANGUAGE: groovy
CODE:
repositories {
    mavenCentral()
    jcenter()
}

----------------------------------------

TITLE: Using Context Extensions in Javalin for Object Serialization
DESCRIPTION: Illustrates how to use context extensions in Javalin to simplify object serialization. This approach allows for more readable and maintainable code by extending the Context object.

LANGUAGE: java
CODE:
app.get("/", ctx -> ctx.use(MyMapper.class).serialize(object)); // use MyMapper to serialize object

----------------------------------------

TITLE: Configuring Javalin Routes for Vue Components
DESCRIPTION: Kotlin code to set up Javalin routes that map to Vue components and API endpoints.

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin
import io.javalin.vue.VueComponent

fun main() {

    val app = Javalin.create { config ->
        config.staticFiles.enableWebjars()
        config.vue.vueInstanceNameInJs = "app"
    }.start(7070)

    app.get("/", VueComponent("hello-world"))
}

----------------------------------------

TITLE: Using Future in Javalin 4 Context
DESCRIPTION: Demonstrates the new method for handling futures in Javalin 4. This replaces the previous result(Future) and json(Future) methods, providing more flexibility with an optional consumer.

LANGUAGE: kotlin
CODE:
Context#future(Future)
Context#future(Future, Consumer)

----------------------------------------

TITLE: Implementing WebSocket Handler Using Lambda Approach in Kotlin
DESCRIPTION: Shows how to implement WebSocket endpoints using Kotlin syntax with lambda functions. Handles the same events as Java version but with Kotlin-specific syntax.

LANGUAGE: kotlin
CODE:
app.ws("/websocket") { ws ->
    ws.onConnect { session -> println("Connected") }
    ws.onMessage { session, message ->
        println("Received: " + message)
        session.remote.sendString("Echo: " + message)
    }
    ws.onClose { session, statusCode, reason -> println("Closed") }
    ws.onError { session, throwable -> println("Errored") }
}

----------------------------------------

TITLE: Implementing REST API endpoints with Javalin in Kotlin
DESCRIPTION: Sets up GET, POST, and DELETE endpoints for the REST API using Javalin's routing DSL, handling CRUD operations for StringData objects.

LANGUAGE: kotlin
CODE:
fun main() {
    val stringDao = StringDao()

    val ipAddress = "0.0.0.0" // change this to your Raspberry Pi's IP address
    val app = Javalin.create().apply {
        exception(Exception::class.java) { e, _ -> e.printStackTrace() }
    }.start(ipAddress, 8080)

    app.routes {
        get("/strings") { context ->
            context.json(data.strings)
        }

        post("/strings") { context ->
            val stringData = context.body<StringData>()
            stringDao.addStringData(stringData)
            context.status(201)
        }

        delete("/strings/:stringId") { context ->
            stringDao.removeStringData(context.pathParam("stringId").toLongOrNull() ?: -1).let {
                if (it)
                    context.status(204)
                else
                    context.status(400)
            }
        }
    }
}

----------------------------------------

TITLE: Configuring GSON as Custom JSON Mapper in Javalin
DESCRIPTION: Demonstrates how to set up GSON as a custom JSON mapper for Javalin, replacing the default Jackson implementation. This allows for flexible JSON serialization and deserialization.

LANGUAGE: java
CODE:
Gson gson = new GsonBuilder().create();
JavalinJsonPlugin.setJsonToObjectMapper(gson::fromJson);
JavalinJsonPlugin.setObjectToJsonMapper(gson::toJson);

----------------------------------------

TITLE: Implementing Main Application Entry Point
DESCRIPTION: Java class with the main method to start the Javalin application using Google Guice.

LANGUAGE: java
CODE:
public class App {
    public static void main(String[] args) {
        var injector = Guice.createInjector(new AppModule());
        injector.getInstance(Startup.class).boot(EntrypointType.REST, args);
    }
}

----------------------------------------

TITLE: Updating Kotlin Dependency in Javalin 1.4.1
DESCRIPTION: The Kotlin dependency for Javalin has been updated to version 1.2.30. This update is part of the 1.4.1 release, which also includes bugfixes for redirects and request body handling.

LANGUAGE: kotlin
CODE:
* Kotlin has been bumped to 1.2.30

----------------------------------------

TITLE: Using Cookie Store in Java
DESCRIPTION: Demonstrates the usage of the new cookieStore API for storing and retrieving typed values in cookies. The cookieStore provides a convenient way to share data between handlers, requests and servers.

LANGUAGE: java
CODE:
ctx.cookieStore(key, value) // store any type of value
ctx.cookieStore(key) // read any type of value
ctx.clearCookieStore() // clear the cookie-store

----------------------------------------

TITLE: Setting up Docker Compose for PostgreSQL
DESCRIPTION: Configures a Docker Compose file to run PostgreSQL locally for development purposes.

LANGUAGE: yaml
CODE:
version: '3.8'

services:
  postgres:
    container_name: postgres1
    image: postgres:15.7
    environment:
      POSTGRES_USER: sa
      POSTGRES_PASSWORD: sa
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    restart: unless-stopped

----------------------------------------

TITLE: Input Validation Examples in Java/Kotlin
DESCRIPTION: Demonstrates how to validate query parameters and JSON body input using Javalin's Validator class. Shows validation of dependent date parameters and object properties with custom checks.

LANGUAGE: java
CODE:
// validate two dependent query parameters:
Instant fromDate = ctx.validatedQueryParam("from").asClass(Instant.class).getOrThrow();
Instant toDate = ctx.validatedQueryParam("to").asClass(Instant.class)
        .check(it -> it.isAfter(fromDate), "'to' has to be after 'from'")
        .getOrThrow();

// validate a json body:
MyObject myObject = ctx.validatedBodyAsClass(MyObject.class)
        .check(obj -> obj.myObjectProperty == someValue)
        .getOrThrow();

LANGUAGE: kotlin
CODE:
// validate two dependent query parameters:
val fromDate = ctx.validatedQueryParam("from").asClass<Instant>().getOrThrow()
val toDate = ctx.validatedQueryParam("to").asClass<Instant>()
        .check({ it.isAfter(fromDate) }, "'to' has to be after 'from'")
        .getOrThrow()

// validate a json body:
val myObject = ctx.validatedBody<MyObject>()
        .check({ it.myObjectProperty == someValue })
        .getOrThrow()

----------------------------------------

TITLE: Enabling Route Overview in Javalin with Kotlin
DESCRIPTION: Demonstrates how to enable and configure the new route overview feature in Javalin 1.5.0, which generates a summary of all mapped paths in the application.

LANGUAGE: kotlin
CODE:
val app = Javalin.create().apply {
    enableRouteOverview("route-overview")
}

----------------------------------------

TITLE: Mapping Form Parameters in Kotlin with Javalin
DESCRIPTION: Shows how to use Javalin's form parameter mapping feature in Kotlin, demonstrating destructuring of parameters. It maps 'name' and 'email' form parameters.

LANGUAGE: kotlin
CODE:
app.post("/new-user") { ctx ->
    val (name, email) = ctx.mapFormParams("name", "email") ?: throw MissingFormParamException()
}

----------------------------------------

TITLE: Creating Hibernate SessionFactory
DESCRIPTION: Implements a singleton pattern for creating and managing Hibernate SessionFactory.

LANGUAGE: java
CODE:
class AppHibernateSessionFactory {

    private static final Logger logger = LoggerFactory.getLogger(AppHibernateSessionFactory.class);

    private static SessionFactory sessionFactory;

    static SessionFactory getSessionFactory() {
        if (Objects.isNull(sessionFactory)) {
            try {
                var configuration = AppHibernateConfig.configuration();
                var serviceRegistry = new StandardServiceRegistryBuilder()
                        .applySettings(configuration.getProperties())
                        .build();
                sessionFactory = configuration.buildSessionFactory(serviceRegistry);
            } catch (Throwable ex) {
                logger.error("Failed to create session factory", ex);
            }
        }
        return sessionFactory;
    }

}

----------------------------------------

TITLE: Registering and Accessing App Attributes in Javalin
DESCRIPTION: Demonstrates how to register a ConnectionPool as an app attribute and access it within a handler. This allows sharing resources across the application.

LANGUAGE: java
CODE:
Javalin app = Javalin.create()
    .attribute(ConnectionPool.class, new ConnectionPool());
    .get("/some-path", SomeOtherClass::controller)
    .start(7070);

class SomeOtherClass {
    static void controller(Context ctx) {
        Connection c = ctx.appAttribute(ConnectionPool.class).getConnection()
    }
}

----------------------------------------

TITLE: Basic Javalin Hello World Application
DESCRIPTION: Simple Javalin application that creates a REST endpoint returning JSON response.

LANGUAGE: java
CODE:
public class Main {
    public static void main(String[] args) {
        Test t = new Test();
        t.setSomeValue("Hello World!");
        Javalin app = Javalin.create().start(7000);
        app.get("/", ctx -> ctx.json(t));
    }
}

----------------------------------------

TITLE: Implementing DAO for data management in Kotlin
DESCRIPTION: Defines a Data Access Object (DAO) to manage the in-memory storage and manipulation of StringData objects.

LANGUAGE: kotlin
CODE:
class StringDao {

    val strings: MutableList<StringData> = mutableListOf() // Server starts with empty list

    fun addStringData(data: StringData) {
        strings.add(data)
    }

    fun removeStringData(stringId: Long): Boolean = strings.removeIf { it.id == stringId }
}

----------------------------------------

TITLE: Implementing File Upload in Java with Javalin
DESCRIPTION: Demonstrates how to handle file uploads using Javalin's simple file-upload API. The code processes uploaded files and saves them to a directory.

LANGUAGE: java
CODE:
app.post("/upload") { ctx ->
    ctx.uploadedFiles("files").forEach { (contentType, content, name, extension) ->
        FileUtils.copyInputStreamToFile(content, File("upload/" + name))
    }
}

----------------------------------------

TITLE: Writing JUnit 5 Test for Course Operations
DESCRIPTION: Implements a JUnit 5 test case to verify the functionality of saving and listing courses using Javalin and Hibernate.

LANGUAGE: java
CODE:
class CoursesTest {

    Javalin app = JavalinApp.create();
    JavalinJackson javalinJackson = new JavalinJackson();

    @Test
    @DisplayName("Should save and list courses")
    void test1() {
        JavalinTest.test(app, (server, client) -> {
            var newCourse = new NewCourse("Course1");
            var postResponse = client.post("/courses", newCourse);
            assertEquals(postResponse.code(), HttpStatus.CREATED.getCode());
            var response = client.get("/courses");
            assertEquals(response.code(), HttpStatus.OK.getCode());
            assertNotNull(response.body());
            ResultCourse result = javalinJackson.fromJsonString(response.body().string(), ResultCourse.class);
            assertNotNull(result.courses());
            var firstCourse = result.courses().stream().findFirst();
            assertTrue(firstCourse.isPresent());
            assertEquals(firstCourse.get().getName(), newCourse.name());
        });
    }

}

----------------------------------------

TITLE: Creating an EventSource client in JavaScript for Server-sent events
DESCRIPTION: Shows how to create a JavaScript client that connects to the Server-sent events endpoint and listens for events. It uses the EventSource API to establish a connection and handle incoming events.

LANGUAGE: javascript
CODE:
const eventSource = new EventSource("http://localhost:7000/sse");
eventSource.addEventListener("connected", msg => console.log(msg);

----------------------------------------

TITLE: Gradle Dependencies Configuration
DESCRIPTION: Gradle dependency configuration that includes Javalin while excluding Jetty-related dependencies.

LANGUAGE: kotlin
CODE:
dependencies {
    compile(kotlin("stdlib-jdk8"))
    compile("io.javalin:javalin:{{site.javalinThreeVersion}}") {
        exclude(mapOf("group" to "org.eclipse.jetty"))
        exclude(mapOf("group" to "org.eclipse.jetty.websocket"))
    }
    compile("org.slf4j:slf4j-simple:1.7.30")
}

----------------------------------------

TITLE: Building and Running Docker Container
DESCRIPTION: Commands for building and running the Docker container with port mapping.

LANGUAGE: bash
CODE:
mvn clean package

LANGUAGE: bash
CODE:
docker build -t javalin-app .

LANGUAGE: bash
CODE:
docker run -p 7000:7000 javalin-app

----------------------------------------

TITLE: Configuring Trailing Slashes in Javalin
DESCRIPTION: Method to disable automatic trailing slash handling in Javalin routes.

LANGUAGE: java
CODE:
app.dontIgnoreTrailingSlashes()

----------------------------------------

TITLE: Logger Implementation in Java and Kotlin
DESCRIPTION: Example showing how to implement logging in both Java and Kotlin using SLF4J.

LANGUAGE: java
CODE:
package org.example;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class App {

    private static final Logger LOG = LoggerFactory.getLogger(App.class);    

    public App(){
        LOG.info("hello {}","world");
    }

    public static void main(String ...args) {
        new App(); 
    }
    
}

LANGUAGE: kotlin
CODE:
package org.example

import org.slf4j.LoggerFactory

class App() {

    val log by lazy { LoggerFactory.getLogger(App::class.java) }

    constructor() {
        log.info("hello {}!", "world")
    }

}

fun main(){
    App()
}

----------------------------------------

TITLE: Demonstrating New Validation Syntax in Kotlin
DESCRIPTION: This snippet shows the new, more concise syntax for validation introduced in Javalin 2.8.0. It demonstrates how to validate query parameters with different types and custom checks using Kotlin.

LANGUAGE: kotlin
CODE:
val myQpStr = ctx.queryParam("my-qp")
val myQpInt = ctx.queryParam<Int>("my-qp").get()
val myQpInt = ctx.queryParam<Int>("my-qp").check{ it > 4 }.get()
val instant = ctx.queryParam<Instant>("my-qp").get()

----------------------------------------

TITLE: Cloning and Running the Example Project
DESCRIPTION: Commands to clone the example repository and run the application using Gradle Gretty plugin.

LANGUAGE: bash
CODE:
git clone https://github.com/tipsy/javalin-tomcat-embed-example
cd javalin-tomcat-embed-example
./gradlew clean appRun

----------------------------------------

TITLE: Configuring Gradle dependencies for Bukkit/Spigot/Paper
DESCRIPTION: Adds required dependencies including Spigot API, Javalin, SLF4J, and Jackson Databind to the Gradle build file.

LANGUAGE: java
CODE:
dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'

    implementation 'io.javalin:javalin:{{site.javalinversion}}'
    implementation 'org.slf4j:slf4j-simple:{{site.slf4jversion}}'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2'
}

----------------------------------------

TITLE: Opening Javalin Application in Browser
DESCRIPTION: Command to open the Javalin application in the default web browser

LANGUAGE: bash
CODE:
open http://localhost:7070

----------------------------------------

TITLE: Configuring Javalin SSL Plugin for mTLS in Kotlin
DESCRIPTION: Kotlin code snippet showing the configuration of the Javalin SSL plugin for mutual TLS authentication, including server certificate setup and trust configuration.

LANGUAGE: kotlin
CODE:
val plugin = SslPlugin { conf ->
    conf.insecure = false // Disable HTTP

    // Server certificate and private key
    conf.pemFromPath("/etc/ssl/certificate.pem", "/etc/ssl/privateKey.pem") 

    conf.withTrustConfig { trustConfig ->
        // CA certificate
        trustConfig.certificateFromPath("/etc/ssl/ca.crt")
    }
}

Javalin.create { javalinConfig ->
    javalinConfig.plugins.register(plugin)
}.start()

----------------------------------------

TITLE: Maven Dependency Configuration for Javalin 4.0.0.RC0
DESCRIPTION: Maven dependency configuration snippet showing how to include Javalin 4.0.0.RC0 in a project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin</artifactId>
    <version>4.0.0.RC0</version>
</dependency>

----------------------------------------

TITLE: Initializing Hello World Application in Javalin 6
DESCRIPTION: Basic Hello World example showing how to create and start a Javalin application that responds with 'Hello World' on the root path.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    var app = Javalin.create(/*config*/)
        .get("/", ctx -> ctx.result("Hello World"))
        .start(7070);
}

LANGUAGE: kotlin
CODE:
fun main() {
    val app = Javalin.create(/*config*/)
        .get("/") { ctx -> ctx.result("Hello World") }
        .start(7070)
}

----------------------------------------

TITLE: Creating Dockerfile for Javalin Application
DESCRIPTION: Docker configuration file that specifies how to build the container image. Uses Eclipse Temurin JDK 11 as the base image and configures the application to run on port 7000.

LANGUAGE: dockerfile
CODE:
FROM eclipse-temurin:11-alpine
COPY target/app.jar /app.jar
EXPOSE 7000
ENTRYPOINT ["java", "-jar", "/app.jar"]

----------------------------------------

TITLE: Installing OpenSSL on Ubuntu
DESCRIPTION: Command to install OpenSSL package on Ubuntu systems for certificate generation

LANGUAGE: bash
CODE:
sudo apt install openssl

----------------------------------------

TITLE: Configuring ReDoc Options in Kotlin
DESCRIPTION: Shows how to configure ReDoc options for OpenAPI documentation with typed API, including theme customization and display options.

LANGUAGE: kotlin
CODE:
.reDoc(ReDocOptions("/redoc", RedocOptionsObject(
    hideDownloadButton = true,
    theme = RedocOptionsTheme(
        spacingUnit = 10,
        isTypographyOptimizeSpeed = true
    )
)))

----------------------------------------

TITLE: Configuring Maven Dependencies for Javalin, Guice, and Jackson
DESCRIPTION: XML configuration for Maven dependencies including Javalin, SLF4J, Google Guice, and Jackson for JSON processing.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>io.javalin</groupId>
        <artifactId>javalin</artifactId>
        <version>2.8.0</version>
    </dependency>
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>{{site.slf4jversion}}</version>
    </dependency>
    <dependency>
        <groupId>com.google.inject</groupId>
        <artifactId>guice</artifactId>
        <version>4.2.0</version>
    </dependency>
    <dependency>
        <groupId>com.google.inject.extensions</groupId>
        <artifactId>guice-multibindings</artifactId>
        <version>4.2.0</version>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.9.5</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Expected Browser Output
DESCRIPTION: The expected HTML output when accessing the Javalin application in a web browser

LANGUAGE: html
CODE:
Hello World

----------------------------------------

TITLE: End-to-End Testing Javalin Applications in Kotlin
DESCRIPTION: Kotlin code demonstrating how to write end-to-end tests for Javalin applications using Selenium WebDriver. It shows how to set up a headless Chrome browser and perform basic UI testing.

LANGUAGE: kotlin
CODE:
import io.github.bonigarcia.wdm.WebDriverManager
import io.javalin.testtools.JavalinTest
import org.assertj.core.api.Assertions.assertThat
import org.junit.Test
import org.openqa.selenium.WebDriver
import org.openqa.selenium.chrome.ChromeDriver
import org.openqa.selenium.chrome.ChromeOptions

class EndToEndTest {

    private val app = JavalinTestingExampleApp("someDependency").app // inject any dependencies you might have

    @Test
    fun `UI contains correct heading`() = JavalinTest.test(app) { server, client ->
        WebDriverManager.chromedriver().setup()
        val driver: WebDriver = ChromeDriver(ChromeOptions().apply {
            addArguments("--headless")
            addArguments("--disable-gpu")
        })
        driver.get("${client.origin}/ui")
        assertThat(driver.pageSource).contains("<h1>User UI</h1>")
        driver.quit()

    }

}

----------------------------------------

TITLE: Generating Self-Signed Certificate with OpenSSL
DESCRIPTION: Command to generate a self-signed certificate and private key using OpenSSL with RSA 4096 encryption for 365 days validity

LANGUAGE: bash
CODE:
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365

----------------------------------------

TITLE: Setting Cookies in Javalin 4
DESCRIPTION: Shows how to set a cookie in Javalin 4. The new behavior replaces any existing cookie with the same name, unlike the previous version which could result in multiple cookies with the same name.

LANGUAGE: kotlin
CODE:
cookie(name, value)

----------------------------------------

TITLE: Multi-stage Dockerfile for Native Image Build
DESCRIPTION: Dockerfile using multi-stage builds to compile the application with GraalVM and create a minimal container with just the native binary.

LANGUAGE: text
CODE:
FROM birdy/graalvm:latest
WORKDIR /tmp/build
ENV GRADLE_USER_HOME /tmp/build/.gradle

ADD . /tmp/build
RUN ./gradlew build fatJar
RUN native-image -jar /tmp/build/build/libs/graal-javalin-all-1.0-SNAPSHOT.jar -H:ReflectionConfigurationFiles=reflection.json -H:+JNI \
  -H:Name=graal-javalin --static --delay-class-initialization-to-runtime=io.javalin.json.JavalinJson

FROM scratch
COPY --from=0 /tmp/build/graal-javalin /
ENTRYPOINT ["/graal-javalin"]

----------------------------------------

TITLE: Implementing Login Controller in Javalin
DESCRIPTION: Login controller implementation showing authentication handling, session management, and page rendering. Includes handlers for serving login page, processing login/logout requests, and protecting book routes.

LANGUAGE: java
CODE:
public static Handler serveLoginPage = ctx -> {
    Map<String, Object> model = ViewUtil.baseModel(ctx);
    model.put("loggedOut", removeSessionAttrLoggedOut(ctx));
    model.put("loginRedirect", removeSessionAttrLoginRedirect(ctx));
    ctx.render(Path.Template.LOGIN, model);
};

public static Handler handleLoginPost = ctx -> {
    Map<String, Object> model = ViewUtil.baseModel(ctx);
    if (!UserController.authenticate(getQueryUsername(ctx), getQueryPassword(ctx))) {
        model.put("authenticationFailed", true);
        ctx.render(Path.Template.LOGIN, model);
    } else {
        ctx.sessionAttribute("currentUser", getQueryUsername(ctx));
        model.put("authenticationSucceeded", true);
        model.put("currentUser", getQueryUsername(ctx));
        if (getQueryLoginRedirect(req) != null) {
            ctx.redirect(getQueryLoginRedirect(ctx));
        }
        ctx.render(Path.Template.LOGIN, model);
    }
};

public static Handler handleLogoutPost = ctx -> {
    ctx.sessionAttribute("currentUser", null);
    ctx.sessionAttribute("loggedOut", "true");
    ctx.redirect(Path.Web.LOGIN);
};

public static Handler ensureLoginBeforeViewingBooks = ctx -> {
    if (!ctx.path().startsWith("/books")) {
        return;
    }
    if (ctx.sessionAttribute"currentUser") == null) {
        ctx.sessionAttribute("loginRedirect", ctx.path());
        ctx.redirect(Path.Web.LOGIN);
    }
};

----------------------------------------

TITLE: End-to-End Testing Javalin Applications in Java
DESCRIPTION: Java code demonstrating how to write end-to-end tests for Javalin applications using Selenium WebDriver. It shows how to set up a headless Chrome browser and perform basic UI testing.

LANGUAGE: java
CODE:
import io.github.bonigarcia.wdm.WebDriverManager;
import io.javalin.Javalin;
import io.javalin.testtools.JavalinTest;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import static org.assertj.core.api.Assertions.assertThat;

public class EndToEndTest {

    Javalin app = new JavalinTestingExampleApp("someDependency").javalinApp(); // inject any dependencies you might have

    @Test
    public void UI_contains_correct_heading() {
        JavalinTest.test(app, (server, client) -> {
            WebDriverManager.chromedriver().setup();
            ChromeOptions options = new ChromeOptions();
            options.addArguments("--headless");
            options.addArguments("--disable-gpu");
            WebDriver driver = new ChromeDriver(options);
            driver.get(client.getOrigin() + "/ui");
            assertThat(driver.getPageSource()).contains("<h1>User UI</h1>");
            driver.quit();
        });
    }

}

----------------------------------------

TITLE: Configuring Maven Dependencies for Javalin and Mithril
DESCRIPTION: XML configuration for adding Javalin, JavalinMithril, Mithril.js WebJar, and Jackson dependencies to a Maven project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin</artifactId>
    <version>{{site.javalinThreeVersion}}</version>
    <type>jar</type>
</dependency>
<dependency>
    <groupId>io.github.javalin</groupId>
    <artifactId>javalinmithril</artifactId>
    <version>0.1.0</version>
    <type>jar</type>
</dependency>
<dependency>
    <groupId>org.webjars.npm</groupId>
    <artifactId>mithril</artifactId>
    <version>2.0.4</version>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.10.3</version>
</dependency>

----------------------------------------

TITLE: Configuring FileRenderer per Instance in Javalin 5.3.0
DESCRIPTION: Shows how to configure the FileRenderer for each Javalin instance, allowing custom rendering of templates.

LANGUAGE: java
CODE:
config.fileRenderer((filePath, model, context) -> "Rendered template");

LANGUAGE: kotlin
CODE:
config.fileRenderer { filePath, model, context -> "Rendered template" }

----------------------------------------

TITLE: Implementing Javalin Filters and Mappers in Java and Kotlin
DESCRIPTION: Demonstrates how to add before and after filters, exception handling, and error handling in Javalin. Provides examples in both Java and Kotlin.

LANGUAGE: java
CODE:
app.before("/some-path/*", ctx -> { ... }); // runs before requests to /some-path/*
app.before(ctx -> { ... }); // runs before all requests
app.after(ctx -> { ... }); // runs after all requests
app.exception(Exception.class, (e, ctx) -> { ... }); // runs if uncaught Exception
app.error(404, ctx -> { ... }); // runs if status is 404 (after all other handlers)

LANGUAGE: kotlin
CODE:
app.before("/some-path/*") { ctx ->  ... } // runs before requests to /some-path/*
app.before { ctx -> ... } // runs before all requests
app.after { ctx -> ... } // runs after all requests
app.exception(Exception.class) { e, ctx -> ... } // runs if uncaught Exception
app.error(404) { ctx -> ... } // runs if status is 404 (after all other handlers)

----------------------------------------

TITLE: WebRTC Chat Implementation
DESCRIPTION: JavaScript code for handling chat functionality in the WebRTC application.

LANGUAGE: javascript
CODE:
{% include_relative snippets/main/resources/public/js/chat.js %}

----------------------------------------

TITLE: WebRTC Chat Implementation
DESCRIPTION: JavaScript code for handling chat functionality in the WebRTC application.

LANGUAGE: javascript
CODE:
{% include_relative snippets/main/resources/public/js/chat.js %}

----------------------------------------

TITLE: Adding Selenium and WebDriverManager Dependencies
DESCRIPTION: XML configuration for adding Selenium and WebDriverManager dependencies to a Maven project. These are required for running end-to-end tests with browser automation.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-chrome-driver</artifactId>
    <version>4.3.0</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>io.github.bonigarcia</groupId>
    <artifactId>webdrivermanager</artifactId>
    <version>5.2.3</version>
    <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Gradle Dependencies Configuration
DESCRIPTION: Required Gradle dependencies for Javalin application including Jackson, SLF4J and GraalVM SDK.

LANGUAGE: java
CODE:
compile group: 'io.javalin', name: 'javalin', version: '2.2.0'
compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
compile group: 'org.graalvm', name: 'graal-sdk', version: '1.0.0-rc6'

----------------------------------------

TITLE: Updating Package Imports in Java for Javalin 5
DESCRIPTION: This snippet demonstrates the changes in package imports required when migrating from Javalin 4 to Javalin 5. It shows the old and new import statements for various Javalin components.

LANGUAGE: java
CODE:
// core package
import io.javalin.core.compression -> import io.javalin.compression
import io.javalin.core.config -> import io.javalin.config
import io.javalin.core.event -> import io.javalin.event
import io.javalin.core.security -> import io.javalin.security
import io.javalin.core.util -> import io.javalin.util
import io.javalin.core.util.Header -> import io.javalin.http.Header

// plugin package
import io.javalin.plugin.rendering.vue -> import io.javalin.vue
import io.javalin.plugin.json -> import io.javalin.json

----------------------------------------

TITLE: Counting Student Records via cURL
DESCRIPTION: Shell command to count the number of student records using a cURL GET request to the Javalin application.

LANGUAGE: shell
CODE:
curl -X GET http://locahost:8080/school/_count

----------------------------------------

TITLE: Unit Testing Javalin Handlers in Java
DESCRIPTION: Java code demonstrating how to write unit tests for Javalin handlers using Mockito for mocking the Context object. It includes tests for both successful and error scenarios.

LANGUAGE: java
CODE:
import io.javalin.http.BadRequestResponse;
import io.javalin.http.Context;
import org.junit.Test;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;

public class UnitTest {

    private final Context ctx = mock(Context.class);

    @Test
    public void POST_to_create_users_gives_201_for_valid_username() {
        when(ctx.queryParam("username")).thenReturn("Roland");
        UserController.create(ctx); // the handler we're testing
        verify(ctx).status(201);
    }

    @Test(expected = BadRequestResponse.class)
    public void POST_to_create_users_throws_for_invalid_username() {
        when(ctx.queryParam("username")).thenReturn(null);
        UserController.create(ctx); // the handler we're testing
    }

}

----------------------------------------

TITLE: Configuring Pre-Upload Function in MultipartUtil
DESCRIPTION: Allows customization of the function that runs before file uploads in MultipartUtil. This enables specifying a custom MultipartConfigElement for file uploads.

LANGUAGE: java
CODE:
MultipartUtil.preUploadFunction = /* custom function */;

----------------------------------------

TITLE: Implementing Future Handling in Javalin 5 (Java)
DESCRIPTION: This code snippet illustrates how to implement future handling in Javalin 5 using Java. It demonstrates the use of CompletableFuture and the new ctx.future() method.

LANGUAGE: java
CODE:
app.get("/", ctx ->
    ctx.future(() -> myFuture
        .thenAccept(result -> ctx.result(result))
        .exceptionally(error -> ctx.result("Error: " + error))
    );
);

----------------------------------------

TITLE: Configuring JavalinVelocity with Custom Engine in Java
DESCRIPTION: Java code snippet demonstrating how to configure JavalinVelocity with a custom Velocity engine in the Javalin configuration.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.fileRenderer(new JavalinVelocity(myVelocityEngine));
});

----------------------------------------

TITLE: Implementing Javalin API with ServiceLoader in JPMS
DESCRIPTION: Main API class using Javalin and ServiceLoader to create a RESTful endpoint in a modular Java application.

LANGUAGE: java
CODE:
package org.example.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.javalin.Javalin;
import org.example.services.api.PersonReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ServiceLoader;

public class MyAPI {
    private static Logger logger = LoggerFactory.getLogger(MyAPI.class);
    private static short port = 7312;

    public static void main(String[] args) {
        var personReader = ServiceLoader.load(PersonReader.class).findFirst().get();
        var objMapper = new ObjectMapper();
        var result = objMapper.valueToTree(personReader.getAll());

        logger.info("API: found {} people.", personReader.getAll().size());

        var app = Javalin.create().start(port);
        app.get("/ping", ctx -> ctx.result("pong"));
        app.get("/persons", ctx -> ctx.json(result));

        logger.info("API's alive for real :-)))");
    }
}

----------------------------------------

TITLE: Adding Javalin and AssertJ Dependencies in Maven
DESCRIPTION: XML configuration for adding Javalin and AssertJ dependencies to a Maven project. These are required for running Javalin applications and writing assertions in tests.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin-bundle</artifactId>
    <version>{{site.javalinversion}}</version>
</dependency>
<dependency>
    <groupId>org.assertj</groupId>
    <artifactId>assertj-core</artifactId>
    <version>3.11.1</version>
    <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Setting Custom Development Environment Detection in JavalinVue
DESCRIPTION: Allows setting a custom function to determine if the application is running in a development environment. This replaces the default behavior of checking if the request is on localhost.

LANGUAGE: java
CODE:
JavalinVue.isDevFunction = /* custom function */;

----------------------------------------

TITLE: Event Handling Configuration in Javalin 3
DESCRIPTION: Demonstrates the transition from enum-based event handling to a configuration object approach in Javalin 3. Shows both the old and new syntax for handling server lifecycle events.

LANGUAGE: java
CODE:
// BEFORE
Javalin app = Javalin.create()
    .event(JavalinEvent.SERVER_STARTING, () -> { ... })
    .event(JavalinEvent.SERVER_STARTED, () -> { ... })
    .event(JavalinEvent.SERVER_START_FAILED, () -> { ... })
// AFTER
Javalin app = Javalin.create().events(event -> {
    event.serverStarting(() -> { ... });
    event.serverStarted(() -> { ... });
    event.serverStartFailed(() -> { ... });
});

----------------------------------------

TITLE: Vue Layout Template Structure
DESCRIPTION: Basic layout template showing Vue 2 and Vue 3 initialization patterns with component registration and routing macros.

LANGUAGE: html
CODE:
<head>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.min.js"></script>
    @componentRegistration
</head>
<body>
<main id="main-vue" v-cloak>
    @routeComponent
</main>
<script>
    new Vue({el: "#main-vue"});
</script>
</body>

----------------------------------------

TITLE: Configuring Javalin Application Settings in Kotlin
DESCRIPTION: Demonstrates how to configure various Javalin application settings including default content type, character encoding, request cache size, and cache disabling. These configuration options are applied during application creation using the create() method.

LANGUAGE: kotlin
CODE:
val app = Javalin.create().apply {
    defaultContentType(string) // set a default content-type for responses
    defaultCharacterEncoding(string) // set a default character-encoding for responses
    maxBodySizeForRequestCache(long) // set max body size for request cache
    disableRequestCache() // disable request caching
}

----------------------------------------

TITLE: Initializing Prometheus Monitoring in Javalin
DESCRIPTION: Configuration of Javalin server with StatisticsHandler and QueuedThreadPool for Prometheus monitoring. Includes server initialization and Prometheus collector setup.

LANGUAGE: java
CODE:
public static void main(String[] args) throws Exception {

    StatisticsHandler statisticsHandler = new StatisticsHandler();
    QueuedThreadPool queuedThreadPool = new QueuedThreadPool(200, 8, 60_000);

    Javalin app = Javalin.create(config -> {
        config.jetty.threadPool = queuedThreadPool;
        config.jetty.modifyServer(server -> {
            server.setHandler(statisticsHandler);
        });
    }).start(7070);
    initializePrometheus(statisticsHandler, queuedThreadPool);
}

private static void initializePrometheus(StatisticsHandler statisticsHandler, QueuedThreadPool queuedThreadPool) throws IOException {
    StatisticsHandlerCollector.initialize(statisticsHandler);
    QueuedThreadPoolCollector.initialize(queuedThreadPool);
    HTTPServer prometheusServer = new HTTPServer(7080);
    LoggerFactory.getLogger("JavalinPrometheusExampleApp").info("Prometheus is listening on: http://localhost:7080");
}

LANGUAGE: kotlin
CODE:
fun main() {

    val statisticsHandler = StatisticsHandler()
    val queuedThreadPool = QueuedThreadPool(200, 8, 60_000)

    val app = Javalin.create {
        it.jetty.threadPool = queuedThreadPool
        it.jetty.modifyServer { 
            it.handler = statisticsHandler 
        }
    }.start(7070)
    initializePrometheus(statisticsHandler, queuedThreadPool)
}

private fun initializePrometheus(statisticsHandler: StatisticsHandler, queuedThreadPool: QueuedThreadPool) {
    StatisticsHandlerCollector.initialize(statisticsHandler)
    QueuedThreadPoolCollector.initialize(queuedThreadPool)
    val prometheusServer = HTTPServer(7080)
    LoggerFactory.getLogger("JavalinPrometheusExampleApp").info("Prometheus is listening on: http://localhost:7080")
}

----------------------------------------

TITLE: Configuring Static File Serving with Path Prefix in Javalin
DESCRIPTION: Demonstrates how to add static files with a custom path prefix using Javalin's configuration. This allows serving static files from a specific directory under a custom URL path.

LANGUAGE: java
CODE:
config.addStaticFiles("/hosted-path", "/directory")

----------------------------------------

TITLE: Configuring Maven for Javalin Heroku Deployment
DESCRIPTION: Maven configuration to create a jar file containing the Javalin application and all its dependencies for Heroku deployment. It includes compiler and assembly plugin configurations.

LANGUAGE: markup
CODE:
<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.10.1</version>
            <configuration>
                <source>11</source>
                <target>11</target>
            </configuration>
        </plugin>
        <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <executions>
                <execution>
                    <phase>package</phase>
                    <goals>
                        <goal>single</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <descriptorRefs>
                    <!-- This tells Maven to include all dependencies -->
                    <descriptorRef>jar-with-dependencies</descriptorRef>
                </descriptorRefs>
                <archive>
                    <manifest>
                        <!-- package+name of your main class -->
                        <mainClass>JavalinHerokuExampleApp</mainClass>
                    </manifest>
                </archive>
            </configuration>
        </plugin>
    </plugins>
</build>

----------------------------------------

TITLE: Implementing Routes Method in Javalin
DESCRIPTION: Shows the implementation of the 'routes' method in Javalin, which enables the static-like API by temporarily setting a static Javalin instance.

LANGUAGE: java
CODE:
public Javalin routes(@NotNull EndpointGroup endpointGroup) {
    ApiBuilder.setStaticJavalin(this);
    endpointGroup.addEndpoints();
    ApiBuilder.clearStaticJavalin();
    return this;
}

----------------------------------------

TITLE: Implementing Future Handling in Javalin 5 (Kotlin)
DESCRIPTION: This code snippet shows how to implement future handling in Javalin 5 using Kotlin. It demonstrates the use of CompletableFuture and the new ctx.future() method.

LANGUAGE: kotlin
CODE:
app.get("/") { ctx ->
    ctx.future {
        myFuture.thenAccept { ctx.result(it) }
        myFuture.exceptionally { ctx.result("Error: " + it) }
    }
}

----------------------------------------

TITLE: Implementing Future Handling in Javalin 5 (Kotlin)
DESCRIPTION: This code snippet shows how to implement future handling in Javalin 5 using Kotlin. It demonstrates the use of CompletableFuture and the new ctx.future() method.

LANGUAGE: kotlin
CODE:
app.get("/") { ctx ->
    ctx.future {
        myFuture.thenAccept { ctx.result(it) }
        myFuture.exceptionally { ctx.result("Error: " + it) }
    }
}

----------------------------------------

TITLE: Maven Dependencies Setup for Javalin Prometheus Integration
DESCRIPTION: Maven dependencies configuration including Javalin, Prometheus client, and Unirest for traffic simulation.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>io.javalin</groupId>
        <artifactId>javalin-bundle</artifactId>
        <version>{{site.javalinversion}}</version>
    </dependency>
    <dependency>
        <groupId>io.prometheus</groupId>
        <artifactId>simpleclient_httpserver</artifactId>
        <version>0.16.0</version>
    </dependency>
    <dependency>
        <groupId>com.konghq</groupId>
        <artifactId>unirest-java</artifactId>
        <version>3.13.10</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Using VueComponent with Tag Shorthand in JavalinVue
DESCRIPTION: Shows the new shorthand syntax for creating VueComponents in JavalinVue. This simplifies component declaration by allowing the use of just the tag name instead of the full HTML tag.

LANGUAGE: java
CODE:
VueComponent("my-tag")

----------------------------------------

TITLE: Implementing Javalin in a Bukkit/BungeeCord plugin main class
DESCRIPTION: Demonstrates how to initialize Javalin within a Minecraft plugin by temporarily switching class loaders to avoid loading issues.

LANGUAGE: java
CODE:
public class JavalinPlugin extends JavaPlugin {
    @Override
    public void onEnable() {
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(this.getClassLoader());
        Javalin app = Javalin.create().start(8080);
        Thread.currentThread().setContextClassLoader(classLoader);
        app.get("/", ctx -> ctx.result("Hello World!"));
        getLogger().info("JavalinPlugin is enabled");
    }

    @Override
    public void onDisable() {
        getLogger().info("JavalinPlugin is disabled");
    }
}

----------------------------------------

TITLE: HTML Structure for Video Chat Interface
DESCRIPTION: HTML layout defining the video elements, control buttons, and chat interface for the application.

LANGUAGE: html
CODE:
{% include_relative snippets/main/resources/public/index.html %}

----------------------------------------

TITLE: Configuring Maven Dependencies for Javalin WebSocket Chat App
DESCRIPTION: This XML snippet defines the Maven dependencies required for the Javalin WebSocket chat application, including Javalin and J2HTML.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>io.javalin</groupId>
        <artifactId>javalin-bundle</artifactId>
        <version>{{site.javalinversion}}</version>
    </dependency>
    <dependency>
        <groupId>com.j2html</groupId>
        <artifactId>j2html</artifactId>
        <version>1.6.0</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Configuring Error Handling with Content-Type in Javalin (Kotlin)
DESCRIPTION: Demonstrates how to set up a custom error handler for a specific HTTP status code and content type in Javalin. This new feature allows for easier HTML error page rendering.

LANGUAGE: kotlin
CODE:
app.error(404, "html", my404PageHandler)

----------------------------------------

TITLE: Configuring Gradle dependencies for BungeeCord/Waterfall
DESCRIPTION: Adds required dependencies including BungeeCord API, Javalin, SLF4J, and Jackson Databind to the Gradle build file.

LANGUAGE: java
CODE:
dependencies {
    compileOnly 'net.md-5:bungeecord-api:1.16-R0.5-SNAPSHOT'

    implementation 'io.javalin:javalin:{{site.javalinversion}}'
    implementation 'org.slf4j:slf4j-simple:{{site.slf4jversion}}'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2'
}

----------------------------------------

TITLE: Generating Javalin Version Changes List using Liquid Template
DESCRIPTION: This Liquid template generates an unordered list of changes for a specific Javalin minor version. It filters news posts, extracts the minor version number, and displays the version and summary for matching posts.

LANGUAGE: Liquid
CODE:
## Other changes introduced from {{ include.from }}.0 to {{ include.to }}.0
{% assign newsposts = (site.posts | where: "category" , "news") | sort: 'date' %}

<ul>
    {% for post in newsposts %}
        {% assign minorVersion = post.version | slice: 0, 3 %}
        {% if minorVersion == include.from %}
            <li><code>{{ post.version }}</code> {{ post.summary }}</li>
        {% endif %}
    {% endfor %}
</ul>

----------------------------------------

TITLE: Testing the REST Endpoint
DESCRIPTION: Command to test the REST endpoint using curl.

LANGUAGE: bash
CODE:
curl localhost:8080/rest/

----------------------------------------

TITLE: Implementing Contact Form and Email Sending in Kotlin with Javalin
DESCRIPTION: Kotlin implementation of a Javalin application that creates a contact form, handles form submission, and sends emails using Gmail SMTP. It includes endpoints for displaying the form, processing submissions, and showing a success message.

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin
import io.javalin.apibuilder.ApiBuilder.get
import io.javalin.apibuilder.ApiBuilder.post
import org.apache.commons.mail.DefaultAuthenticator
import org.apache.commons.mail.SimpleEmail

fun main() {

    Javalin.create { config ->
        config.router.apiBuilder {
            get("/") { ctx ->
                ctx.html(
                    """
                        <form action="/contact-us" method="post">
                            <input name="subject" placeholder="Subject">
                            <br>
                            <textarea name="message" placeholder="Your message ..."></textarea>
                            <br>
                            <button>Submit</button>
                        </form>
                    """.trimIndent()
                )
            }
            post("/contact-us") { ctx ->
                SimpleEmail().apply {
                    setHostName("smtp.googlemail.com")
                    setSmtpPort(465)
                    setAuthenticator(DefaultAuthenticator("YOUR_EMAIL", "YOUR_PASSWORD"))
                    setSSLOnConnect(true)
                    setFrom("YOUR_EMAIL")
                    setSubject(ctx.formParam("subject"))
                    setMsg(ctx.formParam("message"))
                    addTo("RECEIVING_EMAIL")
                }.send() // will throw email-exception if something is wrong
                ctx.redirect("/contact-us/success")
            }
            get("/contact-us/success") { ctx -> ctx.html("Your message was sent") }
        }
    }.start(7070)

}

----------------------------------------

TITLE: Configuring Compression Strategy in Javalin 3.2.0
DESCRIPTION: This snippet demonstrates how to configure compression strategies in Javalin 3.2.0, including the new Brotli compression and the existing GZIP compression. It shows the deprecated 'dynamicGzip' setting and the new 'compressionStrategy' method.

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.dynamicGzip = true // deprecated
    config.compressionStrategy(Brotli(4), Gzip(6))
}

----------------------------------------

TITLE: Configuring Gradle Subprojects for Javalin JPMS Application
DESCRIPTION: Gradle configuration files for setting up subprojects in a modular Javalin application.

LANGUAGE: groovy
CODE:
// settings.gradle
rootProject.name = 'javalin-with-jpms-and-gradle'
include 'models'
include 'services'
include 'api'

// build.gradle
subprojects {
    repositories {
        mavenCentral()
    }
}

// api/build.gradle
plugins {
    id 'application'
}

application {
    mainClass = "org.example.api.MyAPI"
}

----------------------------------------

TITLE: Creating User Overview Component in Mithril
DESCRIPTION: JavaScript code for a Mithril component that displays a list of users fetched from the server.

LANGUAGE: javascript
CODE:
/*
 @package io.javalin.mithril.demo;
 @import io.javalin.mithril.demo.AppFrame;
 @import io.javalin.mithril.demo.UserModel;
 */

class UserOverview {
    constructor(vnode) {
    }
    oninit(vnode) {
        return UserModel.fetch();
    }

    view(vnode) {
        return m(AppFrame, {content:
            m("ul.user-overview-list",
                UserModel.list.map(function (user) {
                    return m("li",
                        m("a", {href: `/users/${user.id}`}, `${user.name} (${user.email})`))
                    }
                )
             )
        })
    }
}

----------------------------------------

TITLE: Adding Javalin Dependency with Ivy
DESCRIPTION: Ivy dependency configuration for including Javalin using dependency tags.

LANGUAGE: markup
CODE:
<dependency org="io.javalin" name="javalin" rev="{{javalinVersion | default: site.javalinversion }}" />

----------------------------------------

TITLE: File Upload Implementation
DESCRIPTION: Implementation of file upload functionality in both Java and Kotlin, with corresponding HTML form.

LANGUAGE: java
CODE:
app.post("/upload-example", ctx -> {
    ctx.uploadedFiles("files").forEach(file -> {
        FileUtil.streamToFile(file.content(), "upload/" + file.filename());
    });
    ctx.html("Upload successful");
});

LANGUAGE: kotlin
CODE:
app.post("/upload-example") { ctx ->
    ctx.uploadedFiles("files").forEach {
        FileUtil.streamToFile(it.content, "upload/${it.filename}")
    }
    ctx.html("Upload successful")
}

LANGUAGE: markup
CODE:
<h1>Upload example</h1>
<form method="post" action="/upload-example" enctype="multipart/form-data">
    <input type="file" name="files" multiple>
    <button>Submit</button>
</form>

----------------------------------------

TITLE: Demonstrating Old Validation Syntax in Kotlin
DESCRIPTION: This snippet shows the previous, more verbose syntax for validation in Javalin prior to version 2.8.0. It includes examples of validating query parameters as different types and with custom checks.

LANGUAGE: kotlin
CODE:
val myQpStr = ctx.queryParam("my-qp")
val myQpInt = ctx.validatedQueryParam("my-qp").asInt().getOrThrow()
val myQpInt = ctx.validatedQueryParam("my-qp").asInt().check{ it  > 4 }.getOrThrow()
val instant = ctx.validatedQueryParam("my-qp").asClass<Instant>().getOrThrow()

----------------------------------------

TITLE: Creating HTML Layout for Vue Application
DESCRIPTION: HTML layout file that loads Vue and sets up the main application structure.

LANGUAGE: markup
CODE:
<html>
  <head>
    <meta charset="utf8">
    <script src="/webjars/vue/3.2.37/dist/vue.global.prod.js"></script>
    <script>
      const app = Vue.createApp({});
    </script>
    @componentRegistration
  </head>
  <body>
  <main id="main-vue" v-cloak>
    @routeComponent
  </main>
  <script>
    app.mount("#main-vue");
  </script>
  </body>
</html>

----------------------------------------

TITLE: Standalone Validation Examples in Kotlin
DESCRIPTION: Shows how to use the Validator class independently of the Context object, with custom message prefixes for validation errors.

LANGUAGE: kotlin
CODE:
JavalinValidation.validate(jsonProp, "jsonProp").notNullOrEmpty().getOrThrow()
// -> jsonProp cannot be null or empty

JavalinValidation.validate(jsonProp).notNullOrEmpty().getOrThrow()
// -> Value cannot be null or empty

----------------------------------------

TITLE: Standard Request Logging Output in Javalin
DESCRIPTION: Displays the output format for standard request logging in Javalin. This log level includes additional details such as the endpoint path and content type.

LANGUAGE: markdown
CODE:
INFO - POST /endpoint-path -> 200 [text/plain;charset=utf-8] (took 0.15 ms)

----------------------------------------

TITLE: Defining Todo Data Class in Kotlin
DESCRIPTION: This snippet shows the definition of the Todo data class used in the application. It represents a single todo item with an id, title, and completion status.

LANGUAGE: kotlin
CODE:
data class Todo(val id: Long = -1, val title: String = "", val completed: Boolean = false)

----------------------------------------

TITLE: Implementing Server-sent events in Kotlin with Javalin
DESCRIPTION: Demonstrates how to set up Server-sent events (SSE) using Javalin in Kotlin. It shows creating an SSE endpoint, managing client connections, and sending events to connected clients.

LANGUAGE: kotlin
CODE:
val clients = ConcurrentLinkedQueue<SseClient>()

app.sse("/sse") { client ->
    clients.add(client)
    client.sendEvent("connected", "Hello, SSE")
    client.onClose { clients.remove(client) }
}

while (true) {
    for (client in clients) {
        client.sendEvent("PING")
    }
    Thread.sleep(1000)
}

----------------------------------------

TITLE: Creating a Hello World Vue Component
DESCRIPTION: Vue component file with HTML template, script for component registration, and CSS styling.

LANGUAGE: html
CODE:
<template id="hello-world">
  <h1 class="hello-world">Hello, World!</h1>
</template>
<script>
  app.component("hello-world", {template: "#hello-world"});
</script>
<style>
  .hello-world {
    color: goldenrod;
  }
</style>

----------------------------------------

TITLE: Configuring Trailing Slash Behavior in Javalin
DESCRIPTION: Sets the Javalin configuration to not ignore trailing slashes in URL paths. This restores functionality that was present in Javalin 2 but removed in Javalin 3.

LANGUAGE: java
CODE:
config.ignoreTrailingSlashes = false;

----------------------------------------

TITLE: Complete REST API Implementation
DESCRIPTION: Full REST API implementation using Javalin with CRUD endpoints and error handling.

LANGUAGE: kotlin
CODE:
import app.user.User
import app.user.UserDao
import io.javalin.apibuilder.ApiBuilder.*
import io.javalin.Javalin
import io.javalin.http.HttpStatus
import io.javalin.http.NotFoundResponse
import io.javalin.http.bodyAsClass
import io.javalin.http.pathParamAsClass

fun main() {

    val userDao = UserDao()

    val app = Javalin.create {
        it.router.apiBuilder {

            get("/") { it.redirect("/users") }

            get("/users") { ctx ->
                ctx.json(userDao.users)
            }

            get("/users/{user-id}") { ctx ->
                val userId = ctx.pathParamAsClass<Int>("user-id").get()
                val user = userDao.findById(userId) ?: throw NotFoundResponse()
                ctx.json(user)
            }

            get("/users/email/{email}") { ctx ->
                val email = ctx.pathParam("email")
                val user = userDao.findByEmail(email) ?: throw NotFoundResponse()
                ctx.json(user)
            }

            post("/users") { ctx ->
                val user = ctx.bodyAsClass<User>()
                userDao.save(name = user.name, email = user.email)
                ctx.status(201)
            }

            patch("/users/{user-id}") { ctx ->
                val userId = ctx.pathParamAsClass<Int>("user-id").get()
                val user = ctx.bodyAsClass<User>()
                userDao.update(id = userId, user = user)
                ctx.status(204)
            }

            delete("/users/{user-id}") { ctx ->
                val userId = ctx.pathParamAsClass<Int>("user-id").get()
                userDao.delete(userId)
                ctx.status(204)
            }
        }
    }.apply {
        exception(Exception::class.java) { e, ctx -> e.printStackTrace() }
        error(HttpStatus.NOT_FOUND) { ctx -> ctx.json("not found") }
    }.start(7070)

}

----------------------------------------

TITLE: Object Mapping with JSON
DESCRIPTION: Shows how to handle JSON mapping for request and response bodies using Javalin's built-in JSON functionality.

LANGUAGE: java
CODE:
Todo[] todos = ...
app.get("/todos", ctx -> { // map array of Todos to json-string
    ctx.json(todos);
});
app.put("/todos", ctx -> { // map request-body (json) to array of Todos
    todos = ctx.bodyAsClass(Todo[].class);
    ctx.status(204);
});

LANGUAGE: kotlin
CODE:
var todos = arrayOf(...)
app.get("/todos") { ctx -> // map array of Todos to json-string
    ctx.json(todos)
}
app.put("/todos") { ctx -> // map request-body (json) to array of Todos
    todos = ctx.body<Array<Todo>>()
    ctx.status(204)
}

----------------------------------------

TITLE: Vue Component Definition
DESCRIPTION: Example of creating a Vue component with template and registration for both Vue 2 and Vue 3.

LANGUAGE: html
CODE:
<template id="my-component">
    <div>
        <!-- Component code goes here -->
    </div>
</template>
<script>
    Vue.component("my-component", {
        template: "#my-component"
    });
</script>

----------------------------------------

TITLE: Updating Path Parameter Syntax in Java
DESCRIPTION: Demonstrates the new path parameter syntax in Javalin 4, including support for multiple parameters and slash-accepting parameters.

LANGUAGE: java
CODE:
get("/{param}", ...); // new

get("/{param}-suffix", ...); // new

get("/files/{filename}.{extension}", ...); // new

get("/root/<subpaths>/leaf") // new (will match /root/1/2/3/leaf)

----------------------------------------

TITLE: Configuring Elastic APM Properties
DESCRIPTION: Contents of the elasticapm.properties file for configuring the Elastic APM Java agent.

LANGUAGE: properties
CODE:
service_name=javalin
application_packages=com.example
server_urls=
secret_token=

----------------------------------------

TITLE: Javalin Hello World in Kotlin
DESCRIPTION: Basic Javalin web server setup with a simple Hello World endpoint.

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin

fun main() {
    val app = Javalin.create().start(7070)
    app.get("/") { ctx -> ctx.result("Hello World") }
}

----------------------------------------

TITLE: WebSocket Session Methods in Javalin
DESCRIPTION: New WebSocket session methods for sending data and accessing query parameters.

LANGUAGE: java
CODE:
session.send()
session.queryParam()

----------------------------------------

TITLE: Implementing UserController.create in Kotlin
DESCRIPTION: Kotlin implementation of the UserController.create method, which is being tested in the unit tests. It demonstrates handling of user creation based on username validity.

LANGUAGE: kotlin
CODE:
fun create(ctx: Context) {
    val username = ctx.queryParam("username")
    if (username == null || username.length < 5) {
        throw BadRequestResponse()
    } else {
        users.add(username)
        ctx.status(201)
    }
}

----------------------------------------

TITLE: Template Rendering in Javalin and SparkJava
DESCRIPTION: Demonstrates how to render templates in Javalin and SparkJava. Javalin offers a more concise syntax, while SparkJava requires creating a ModelAndView object and specifying a TemplateEngine.

LANGUAGE: java
CODE:
javalin.get("/", ctx -> ctx.render("path", model));

LANGUAGE: java
CODE:
Spark.get("/", (req, res) -> new ModelAndView(model, "path"), new TemplateEngine());

----------------------------------------

TITLE: Initializing Javalin Application with JavalinMithril Configuration
DESCRIPTION: Java code snippet showing how to initialize a Javalin application and configure JavalinMithril plugin with development mode and state function.

LANGUAGE: java
CODE:
private Javalin app;

public void start(){
    app = Javalin.create();
    app.config.enableWebjars();
    JavalinMithril.configure(config -> {
            config.isDev(true)
                    .stateFunction((ctx) -> singletonMap("currentUser", currentUser(ctx)));
    });
    ...
    app.start(7000);
}

----------------------------------------

TITLE: Creating Javalin Handler for Course Operations
DESCRIPTION: Implements a Javalin handler for managing HTTP requests related to courses, utilizing the AppHibernate wrapper for database interactions.

LANGUAGE: java
CODE:
public class CourseHandler {

    public static Handler listAll = (context) -> {
        var result = AppHibernate.fromTransaction(CourseQueries_::getAllCourses);
        context.json(new ResultCourse(result));
    };

    public static Handler save = (context) -> {
        var newCourse = context.bodyAsClass(NewCourse.class);
        var result = AppHibernate.fromTransaction(session -> {
            var insertedId = session.insert(Course.newCourse(newCourse.name()));
            return session.get(Course.class, insertedId);
        });
        context.json(result).status(HttpStatus.CREATED);
    };

}

----------------------------------------

TITLE: Multipart Request Checking in Javalin
DESCRIPTION: Updated method to check for any type of multipart request, not just multipart/form-data.

LANGUAGE: java
CODE:
isMultipart()

----------------------------------------

TITLE: Testing POST request to simulated API (Kotlin)
DESCRIPTION: Example of testing a POST request to a simulated API using Javalin, asserting the posted data and HTTP details.

LANGUAGE: kotlin
CODE:
@Test
fun `posts a user profile`() {
    var postedBody: String? = null
    var contentType: String? = null
    fakeProfileApi = Javalin.create().post("profile") {
        postedBody = it.body()
        contentType = it.contentType()
        it.status(201)
    }.start(1234)
    val profileGateway = ProfileGateway(apiUrl = "http://localhost:1234")

    profileGateway.saveProfile(
        Profile(id = "abc", email = "john.doe@gmail.com".toEmail())
    )

    JSONAssert.assertEquals(
        """ { "id": "abc", "email": "johndoe@gmail.com" } """,
        postedBody, true
    )
    assertEquals("application/json", contentType)
}

----------------------------------------

TITLE: Configuring CORS in Javalin
DESCRIPTION: Methods for enabling CORS (Cross-Origin Resource Sharing) with wildcard origin or for all origins.

LANGUAGE: java
CODE:
enableCorsForOrigin("*")
enableCorsForAllOrigins()

----------------------------------------

TITLE: Server Configuration Changes in Javalin v1 to v2
DESCRIPTION: Demonstrates the change in server configuration syntax between Javalin v1 and v2. Shows how the embedded server factory configuration has been simplified in v2.

LANGUAGE: java
CODE:
app.embeddedServer(new EmbeddedJettyFactory(() -> new Server())) // v1
app.server(() -> new Server()) // v2

----------------------------------------

TITLE: Defining Hibernate Entity for Course
DESCRIPTION: Creates a Java class representing a Course entity with Hibernate annotations for ORM mapping.

LANGUAGE: java
CODE:
@Setter @Getter
@Entity
@Table
public class Course {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String name;

    public static Course newCourse(String name) {
        var course = new Course();
        course.setName(name);
        return course;
    }

}

----------------------------------------

TITLE: Listing Bugfixes and Changes in Javalin 1.0.1
DESCRIPTION: Details three bugfixes and changes made in Javalin 1.0.1: SERVER_STARTED event timing, port() method behavior, and async implementation change.

LANGUAGE: markdown
CODE:
## Bugfixes

* The `SERVER_STARTED` event is now fired **after** the `started` flag is set to true
* `port()` now returns the port even if the server is not started (used to return -1)
* Changed to `CompletionStage` for `async`, and marked `async` as experimental

----------------------------------------

TITLE: Setting up Javalin test boilerplate (Kotlin)
DESCRIPTION: Basic setup for Javalin in a test class, ensuring proper cleanup after each test.

LANGUAGE: kotlin
CODE:
class ProfileGatewayTest {

    private lateinit var fakeProfileApi: Javalin

    @AfterEach
    fun `after each`() {
        fakeProfileApi.stop()
    }
}

----------------------------------------

TITLE: Adding Javalin SSL Plugin Dependency in Maven
DESCRIPTION: XML snippet for adding the Javalin SSL plugin dependency to a Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.javalin.community.ssl</groupId>
    <artifactId>ssl-plugin</artifactId>
    <version>{{site.javalinversion}}</version>
</dependency>

----------------------------------------

TITLE: Logback XML Configuration
DESCRIPTION: Advanced Logback configuration with console and file appenders, including pattern layouts and rolling file policies.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <import class="ch.qos.logback.core.ConsoleAppender"/>
    <import class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"/>
    <import class="ch.qos.logback.core.rolling.RollingFileAppender"/>
    <import class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"/>

    <appender name="Console" class="ConsoleAppender">
        <encoder class="PatternLayoutEncoder">
            <pattern>%cyan(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%c{20}): %msg%n%throwable</pattern>
        </encoder>
    </appender>

    <appender name="File" class="RollingFileAppender">
        <rollingPolicy class="SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>sample-app.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <maxFileSize>1MB</maxFileSize>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{ISO8601} %-5level [%t] %C{20}: %msg%n%throwable</pattern>
        </encoder>
    </appender>

    <root level="info">
        <appender-ref ref="Console"/>
        <appender-ref ref="File"/>
    </root>
</configuration>

----------------------------------------

TITLE: Minimal Request Logging Output in Javalin
DESCRIPTION: Shows the output format for minimal request logging in Javalin. This log level provides basic information about the HTTP method, status code, and request duration.

LANGUAGE: markdown
CODE:
INFO - POST -> 200 (0.16 ms)

----------------------------------------

TITLE: Error Example: NullPointerException When Mocking Context
DESCRIPTION: Demonstrates the error that occurs when trying to mock Javalin Context without enabling InlineMockMaker

LANGUAGE: java
CODE:
java.lang.NullPointerException
	at io.javalin.http.Context.status(Context.kt:386)
	at com.shareplaylearn.httphandlers.TeapotRequestHandler.handleBrewCoffee(TeapotRequestHandler.java:47)
	at TeapotRequestHandlerTest.handleBrewCoffee(TeapotRequestHandlerTest.java:21)

----------------------------------------

TITLE: Tutorial Tab Interface Implementation
DESCRIPTION: HTML structure for the tabbed interface that separates official and community tutorials, including notification messages and dynamic content loading.

LANGUAGE: html
CODE:
<div class="all-tutorials">
    <div class="tutorial-tabs">
        <div class="tutorial-tab" data-tutorial-tab="official">Official tutorials</div>
        <div class="tutorial-tab" data-tutorial-tab="community">Community tutorials</div>
    </div>
    <div class="tutorial-content">
        <div data-tutorial-content="official">
            {% include macros/tutorialPost.html tutorials=officialTuts %}
        </div>
        <div data-tutorial-content="community">
            <div class="notification">
                These community tutorials are written by Javalin users and posted at their request and/or
                with their permission. If you have have a tutorial you want to submit,
                please create a pull request on <a href="https://github.com/javalin/website">GitHub</a>.
            </div>
            {% include macros/tutorialPost.html tutorials=communityTuts %}
        </div>
    </div>
</div>

----------------------------------------

TITLE: Implementing WebSocket Handlers
DESCRIPTION: Demonstrates WebSocket implementation with connect, message, close, and error handlers.

LANGUAGE: java
CODE:
app.ws("/websocket", ws -> {
    ws.onConnect(session -> System.out.println("Connected"));
    ws.onMessage((session, message) -> {
        System.out.println("Received: " + message);
        session.send("Echo: " + message);
    });
    ws.onClose((session, statusCode, reason) -> System.out.println("Closed"));
    ws.onError((session, throwable) -> System.out.println("Errored"));
});

LANGUAGE: kotlin
CODE:
app.ws("/websocket") { ws ->
    ws.onConnect { session -> println("Connected") }
    ws.onMessage { session, message ->
        println("Received: " + message)
        session.send("Echo: " + message)
    }
    ws.onClose { session, statusCode, reason -> println("Closed") }
    ws.onError { session, throwable -> println("Errored") }
}

----------------------------------------

TITLE: Configuring SSL in Javalin Application
DESCRIPTION: Code implementation for configuring SSL plugin in Javalin application using PEM certificate files

LANGUAGE: java
CODE:
SslPlugin plugin = new SslPlugin(conf -> {
    conf.pemFromPath("/etc/ssl/certificate.pem", "/etc/ssl/privateKey.pem");
});

Javalin.create(javalinConfig -> {
    javalinConfig.plugins.register(plugin);
}).start();

LANGUAGE: kotlin
CODE:
val plugin = SslPlugin { conf ->
    conf.pemFromPath("/etc/ssl/certificate.pem", "/etc/ssl/privateKey.pem")
}

Javalin.create { javalinConfig ->
    javalinConfig.plugins.register(plugin)
}.start()

----------------------------------------

TITLE: Retrieving Form Parameters in Kotlin with Javalin
DESCRIPTION: Demonstrates new functions for handling form parameters in Javalin 0.4.1. These functions allow retrieving single or multiple form parameters, with default values, and as a map.

LANGUAGE: kotlin
CODE:
formParam("key") // get one form-params
formParamOrDefault("key", "default") // get one form-params (or default if null)
formParams("key") // get multiple form-paramss
formParamMap() // get map of all form-params key/values

----------------------------------------

TITLE: Creating Student Records via cURL
DESCRIPTION: Shell commands to create student records using cURL POST requests to the Javalin application.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" http://localhost:8080/students -d '{ "id": "003","name": "Javalin","age": 15}'
curl -X POST -H "Content-Type: application/json" http://localhost:8080/students -d '{ "id": "005","name": "Micronaut","age": 12}'
curl -X POST -H "Content-Type: application/json" http://localhost:8080/students -d '{ "id": "001","name": "Quarkus","age": 16}'

----------------------------------------

TITLE: Including Plugin Card Styles
DESCRIPTION: Includes the CSS file for plugin card styling

LANGUAGE: html
CODE:
<style>{% include plugins/pluginCard.css %}</style>

----------------------------------------

TITLE: Registering Custom JavalinRenderer with Multiple Engines in Java
DESCRIPTION: Java code example showing how to register a custom JavalinRenderer with multiple template engines in the Javalin configuration.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.fileRenderer(
        new JavalinRenderer()
            .register("mustache", new JavalinMustache())
            .register("jte", new JavalinJte())
    );
});

----------------------------------------

TITLE: Creating Java Module Descriptors for Javalin JPMS Application
DESCRIPTION: Module descriptor files for each subproject in the Javalin JPMS application.

LANGUAGE: java
CODE:
// models/src/main/java/module-info.java
module org.example.models {
    exports org.example.models;
}

// services/src/main/java/module-info.java
module org.example.services {
    exports org.example.services.api;
    requires org.example.models;
    provides PersonReader with InMemoryPersonReader;
}

// api/src/main/java/module-info.java
module org.example.api {
    requires io.javalin;
    requires com.fasterxml.jackson.databind;
    requires org.slf4j;
    requires kotlin.stdlib;
    requires org.example.services;
    uses org.example.services.api.PersonReader;
}

----------------------------------------

TITLE: Form Parameter Handling Methods in Javalin
DESCRIPTION: New utility methods for handling form parameters: mapFormParams() for mapping form parameters and anyFormParamNull() for checking null parameters.

LANGUAGE: java
CODE:
mapFormParams()
anyFormParamNull()

----------------------------------------

TITLE: Starting Javalin Application with Elastic APM Java Agent
DESCRIPTION: Command to start the Javalin application with the Elastic APM Java agent for tracing.

LANGUAGE: shell
CODE:
java -javaagent:elastic-apm-agent-1.22.0.jar -jar target/javalin-student-1.0-SNAPSHOT.jar

----------------------------------------

TITLE: Redirecting to Javalin OpenAPI GitHub Repository
DESCRIPTION: JavaScript code snippet that performs client-side redirection to the new location of the Javalin OpenAPI plugin documentation.

LANGUAGE: javascript
CODE:
<script>
location.href = "https://github.com/javalin/javalin-openapi";
</script>

----------------------------------------

TITLE: Configuring RouteOverviewPlugin in Javalin
DESCRIPTION: Demonstrates how to register the RouteOverviewPlugin with Javalin configuration. The plugin can be configured either with just a path parameter or with both path and roles for authentication.

LANGUAGE: java
CODE:
Javalin.create(config ->
    config.registerPlugin(new RouteOverviewPlugin(path));        // show all routes on specified path
    config.registerPlugin(new RouteOverviewPlugin(path, roles)); // show all routes on specified path (with auth)
)

----------------------------------------

TITLE: Initializing Gradle Project for Javalin with JPMS
DESCRIPTION: Commands to create and set up a new Gradle project with subprojects for a modular Javalin application.

LANGUAGE: bash
CODE:
mkdir javalin-with-jpms-and-gradle
cd javalin-with-jpms-and-gradle
gradle init --type basic --dsl groovy --project-name javalin-with-jpms-and-gradle

mkdir -p models/src/main/java/org/example/models
mkdir -p services/src/main/java/org/example/services
mkdir -p api/src/main/java/org/example/api

----------------------------------------

TITLE: Handling File Uploads in Javalin (Kotlin)
DESCRIPTION: This snippet shows how to handle file uploads in a Javalin application using Kotlin. It sets up a POST route for '/upload' and processes uploaded files using the ctx.uploadedFiles() method. Each file is then copied to an 'upload' directory.

LANGUAGE: kotlin
CODE:
app.post("/upload") { ctx ->
    ctx.uploadedFiles("files").forEach { (contentType, content, name, extension) ->
        FileUtils.copyInputStreamToFile(content, File("upload/" + name))
    }
}

----------------------------------------

TITLE: Random Request Generator Implementation
DESCRIPTION: Implementation of a request generator that simulates random traffic patterns to the test endpoints.

LANGUAGE: java
CODE:
private static void spawnRandomRequests() throws InterruptedException {
    new Thread(() -> {
        for (int i = 0; i < new Random().nextInt(50); i++) {
            Unirest.get("http://localhost:7070/1").asString();
            Unirest.get("http://localhost:7070/" + (1 + new Random().nextInt(5))).asString();
        }
    }).start();
    Thread.sleep((int) (Math.random() * 250));
}

LANGUAGE: kotlin
CODE:
private fun spawnRandomRequests() {
    Thread {
        for (i in 0 until (0..50).shuffled()[0]) {
            Unirest.get("http://localhost:7070/1").asString()
            Unirest.get("http://localhost:7070/" + (1..5).shuffled()[0]).asString()
        }
    }.start()
    Thread.sleep((Math.random() * 250).toLong())
}

----------------------------------------

TITLE: Configuring Request Filters and Error Handlers
DESCRIPTION: Shows how to implement before/after filters, exception handlers, and error handlers in Javalin.

LANGUAGE: java
CODE:
app.before("/some-path/*", ctx -> { ... }); // runs before requests to /some-path/*
app.before(ctx -> { ... }); // runs before all requests
app.after(ctx -> { ... }); // runs after all requests
app.exception(Exception.class, (e, ctx) -> { ... }); // runs if uncaught Exception
app.error(404, ctx -> { ... }); // runs if status is 404 (after all other handlers)

LANGUAGE: kotlin
CODE:
app.before("/some-path/*") { ctx ->  ... } // runs before requests to /some-path/*
app.before { ctx -> ... } // runs before all requests
app.after { ctx -> ... } // runs after all requests
app.exception(Exception.class) { e, ctx -> ... } // runs if uncaught Exception
app.error(404) { ctx -> ... } // runs if status is 404 (after all other handlers)

----------------------------------------

TITLE: Configuring plugin dependencies in plugin.yml for Spigot/Paper
DESCRIPTION: Specifies required libraries in the plugin.yml file for Spigot/Paper plugins version 1.17 and higher, using the plugin dependency manager.

LANGUAGE: yaml
CODE:
libraries:
  - "io.javalin:javalin:{{site.javalinversion}}"
  - "org.slf4j:slf4j-simple:{{site.slf4jversion}}"
  - "com.fasterxml.jackson.core:jackson-databind:2.13.2"

----------------------------------------

TITLE: Handling File Uploads in Javalin (Java)
DESCRIPTION: This snippet demonstrates how to handle file uploads in a Javalin application using Java. It sets up a POST route for '/upload' and processes uploaded files using the ctx.uploadedFiles() method. Each file is then copied to an 'upload' directory.

LANGUAGE: java
CODE:
app.post("/upload", ctx -> {
    ctx.uploadedFiles("files").forEach(file -> {
        FileUtils.copyInputStreamToFile(file.getContent(), new File("upload/" + file.getName()));
    });
});

----------------------------------------

TITLE: Configuring Gradle task for fat JAR creation
DESCRIPTION: Defines a custom Gradle task to build a fat JAR containing all necessary dependencies for running the application independently.

LANGUAGE: groovy
CODE:
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.org.example.MainKt' // Make sure this includes Kt at the end of your main class
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

----------------------------------------

TITLE: Registering Context Extensions in Javalin
DESCRIPTION: Shows how to register context extensions in Javalin, typically done in the first 'before' filter of the application. This setup allows for using custom extensions throughout the application.

LANGUAGE: java
CODE:
app.before(ctx -> ctx.register(MyMapper.class, new MyMapper(ctx, otherDependency));

----------------------------------------

TITLE: Basic Javalin jte Application Setup
DESCRIPTION: Basic setup for a Javalin application with jte templating, showing initialization and route handling with template rendering.

LANGUAGE: java
CODE:
public class App {
    public static void main(String[] args) {
        JavalinJte.init();
        Javalin app = Javalin.create().start(7000);

        app.get("/", ctx -> ctx.render("hello.jte"));
    }
}

----------------------------------------

TITLE: Configuring Gradle Shadow plugin for dependency packaging
DESCRIPTION: Sets up the Gradle Shadow plugin to package Javalin and its dependencies into the plugin JAR, including relocation to prevent conflicts.

LANGUAGE: groovy
CODE:
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

shadowJar {
    relocate 'io.javalin:javalin:{{site.javalinversion}}', 'shadow.io.javalin'
    relocate 'org.slf4j:slf4j-simple:{{site.slf4jversion}}', 'shadow.org.slf4j'
    relocate 'com.fasterxml.jackson.core:jackson-databind:2.13.2', 'shadow.com.fasterxml.jackson.core'
}

----------------------------------------

TITLE: Configuring External Static Files in Javalin
DESCRIPTION: Demonstrates how to enable serving of static files from an external folder location in Javalin. Uses the enableStaticFiles method with Location.EXTERNAL parameter to specify external file serving.

LANGUAGE: java
CODE:
app.enableStaticFiles("/folder", Location.EXTERNAL)

----------------------------------------

TITLE: Querying API data using curl
DESCRIPTION: Shows how to retrieve all StringData objects from the API using a GET request with curl.

LANGUAGE: bash
CODE:
curl your.raspberry.pi.ipaddress:8080/strings

----------------------------------------

TITLE: Configuring MongoDB Session Storage in Kotlin with Javalin
DESCRIPTION: Implements a Jetty SessionHandler using MongoSessionDataStore for persisting sessions to MongoDB. Configures connection string, database name, and collection name for session storage.

LANGUAGE: kotlin
CODE:
fun mongoSessionHandler() = SessionHandler().apply {
    httpOnly = true
    sessionCache = DefaultSessionCache(this).apply {
        sessionDataStore = MongoSessionDataStoreFactory().apply {
            connectionString = "mongodb://<user>:<pass>@<adr>:<port>/session_db"
            dbName = "session_db"
            collectionName = "sessions"
        }.getSessionDataStore(sessionHandler)
    }
}

----------------------------------------

TITLE: Implementing Parameter Extraction with Context Extensions in Javalin
DESCRIPTION: Shows how to use context extensions for parameter extraction in Javalin. This example includes methods for form username validation and user locale retrieval, demonstrating the power and flexibility of extensions.

LANGUAGE: java
CODE:
public class Ext {
    private Context ctx;
    public Ext(Context ctx) {
        this.ctx = ctx;
    }
    public String formUsername() {
        String username = ctx.formParam("username");
        if (userName == null) {
            throw new InvalidFormException();
        }
        return username;
    }
    public String userLocale() {
        return ctx.queryParam("locale");
    }
}

app.post(ctx -> {
    String username = ctx.use(Ext.class).formUsername();
    String locale = ctx.use(Ext.class).userLocale();
});

----------------------------------------

TITLE: Configuring Gradle repositories for Bukkit/Spigot/Paper
DESCRIPTION: Adds necessary Maven repositories for Spigot API and Maven Central to the Gradle build file.

LANGUAGE: java
CODE:
repositories {
    mavenCentral()
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
}

----------------------------------------

TITLE: Comparing Old and New Syntax for GET Requests in Javalin
DESCRIPTION: This snippet demonstrates the difference between the old request/response syntax and the new context-based syntax for handling GET requests in Javalin 0.3.0. It shows examples in both Java and Kotlin.

LANGUAGE: java
CODE:
app.get("/", ctx -> ctx.result("Hello World")); // new syntax
app.get("/", (req, res) -> res.body("Hello World")); // old syntax

LANGUAGE: kotlin
CODE:
app.get("/") { ctx -> ctx.result("Hello World") } // new syntax
app.get("/") { req, res -> res.body("Hello World") } // old syntax

----------------------------------------

TITLE: GraalVM Reflection Configuration
DESCRIPTION: JSON configuration specifying classes that need reflection support in the native image.

LANGUAGE: javascript
CODE:
[
  {
    "name": "[Lorg.eclipse.jetty.servlet.ServletMapping;",
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true
  },
  {
    "name": "org.slf4j.impl.StaticLoggerBinder",
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true
  },
  {
    "name": "com.fasterxml.jackson.databind.ObjectMapper",
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true
  },
  {
    "name": "de.nerden.samples.graal.Test",
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true
  }
]

----------------------------------------

TITLE: Implementing User Profile Vue Component
DESCRIPTION: Vue component for displaying detailed user information, including data fetching based on route parameters.

LANGUAGE: html
CODE:
<template id="user-profile">
  <div>
    <dl v-if="user">
      <dt>User ID</dt>
      <dd>{{user.id}}</dd>
      <dt>Name</dt>
      <dd>{{user.name}}</dd>
      <dt>Email</dt>
      <dd>{{user.email}}</dd>
      <dt>Birthday</dt>
      <dd>{{user.userDetails.dateOfBirth}}</dd>
      <dt>Salary</dt>
      <dd>{{user.userDetails.salary}}</dd>
    </ul>
  </div>
</template>
<script>
  app.component("user-profile", {
    template: "#user-profile",
    data: () => ({
      user: null,
    }),
    created() {
      const userId = this.$javalin.pathParams["user-id"];
      fetch(`/api/users/${userId}`)
        .then(res => res.json())
        .then(res => this.user = res)
        .catch(() => alert("Error while fetching user"));
    }
  });
</script>

----------------------------------------

TITLE: Defining Maven Dependencies for Javalin Application
DESCRIPTION: XML snippet showing the required Maven dependencies for the Javalin application, including Javalin, SLF4J, and Jackson.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>io.javalin</groupId>
        <artifactId>javalin</artifactId>
        <version>{{site.javalinThreeVersion}}</version>
    </dependency>
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>1.7.30</version>
    </dependency>
     <dependency>
         <groupId>com.fasterxml.jackson.core</groupId>
         <artifactId>jackson-databind</artifactId>
         <version>2.11.2</version>
     </dependency>
</dependencies>

----------------------------------------

TITLE: Defining Sensor Data POJO
DESCRIPTION: Java class representing sensor data with standard getters and setters implementing Serializable interface

LANGUAGE: java
CODE:
package app.model.objects;

import java.sql.Timestamp;
import java.util.List;

public class SensorData implements Serializable {
    private String makeAndModel;
    private int destinationYear;
    private List<Double> fluxCapacitorReadings;
    private Timestamp lastCheckIn;
    private boolean safetyBeltsOn;

    public String getMakeAndModel() { return makeAndModel; }
    public void setMakeAndModel(String makeAndModel) { this.makeAndModel = makeAndModel; }

    public List<Double> getFluxCapacitorReadings() { return fluxCapacitorReadings; }
    public void setFluxCapacitorReadings(List<Double> fluxCapacitorReadings) { this.fluxCapacitorReadings = fluxCapacitorReadings; }

    public int getDestinationYear() { return destinationYear; }
    public void setDestinationYear(int destinationYear) { this.destinationYear = destinationYear; }

    public Timestamp getLastCheckIn() { return lastCheckIn; }
    public void setLastCheckIn(Timestamp lastCheckIn) { this.lastCheckIn = lastCheckIn; }

    public boolean isSafetyBeltsOn() { return safetyBeltsOn; }
    public void setSafetyBeltsOn(boolean safetyBeltsOn) { this.safetyBeltsOn = safetyBeltsOn; }
}

----------------------------------------

TITLE: Initializing Javalin Server with OpenAPI Configuration
DESCRIPTION: Main application setup showing Javalin server initialization with OpenAPI, Swagger and ReDoc plugin configurations. Includes CRUD endpoint routing setup.

LANGUAGE: java
CODE:
public class Main {
    public static void main(String[] args) {
        Javalin.create(config -> {
            config.registerPlugin(new OpenApiPlugin(pluginConfig -> {
                pluginConfig.withDefinitionConfiguration((version, definition) -> {
                    definition.withOpenApiInfo(info -> info.setTitle("Javalin OpenAPI example"));
                });
            }));
            config.registerPlugin(new SwaggerPlugin());
            config.registerPlugin(new ReDocPlugin());
            config.router.apiBuilder(() -> {
                path("users", () -> {
                    get(UserController::getAll);
                    post(UserController::create);
                    path("{userId}", () -> {
                        get(UserController::getOne);
                        patch(UserController::update);
                        delete(UserController::delete);
                    });
                });
            });
        }).start(7002);
    }
}

----------------------------------------

TITLE: Running Javalin Server with Bazel
DESCRIPTION: Command to build and run the Javalin server using Bazel build system

LANGUAGE: bash
CODE:
bazel run //:server

----------------------------------------

TITLE: Configuring WebSocket Handlers in Kotlin
DESCRIPTION: Setting up WebSocket handlers for different events in Kotlin

LANGUAGE: Kotlin
CODE:
app.ws("/websocket/{path}") { ws ->
    ws.onConnect { ctx -> println("Connected") }
    ws.onMessage { ctx ->
        val user = ctx.messageAsClass<User>(); // convert from json
        ctx.send(user); // convert to json and send back
    }
    ws.onBinaryMessage { ctx -> println("Message") }
    ws.onClose { ctx -> println("Closed") }
    ws.onError { ctx -> println("Errored") }
}

----------------------------------------

TITLE: Implementing Hello World Component in Mithril
DESCRIPTION: JavaScript code for a simple Mithril component that displays 'Hello World' and a link to user overview.

LANGUAGE: javascript
CODE:
/*
 @package io.javalin.mithril.demo;
 */
class HelloWorld {
    constructor() {

    }

    view(vnode) {
        return m("div",[
                m("h1.hello-world", "Hello World !"),
                m("a", {href: "/users"}, "View user Overview"),
            ]
        )
    }
}

----------------------------------------

TITLE: Implementing User Controller in Kotlin
DESCRIPTION: Kotlin code defining User data classes and a controller for handling user-related API requests.

LANGUAGE: kotlin
CODE:
import io.javalin.http.Context
import io.javalin.http.NotFoundResponse

data class User(val id: String, val name: String, val email: String, val userDetails: UserDetails?)
data class UserDetails(val dateOfBirth: String, val salary: String)

val users = setOf(
    User(id = "1", name = "John", email = "john@fake.co", userDetails = UserDetails("21.02.1964", "2773 JB")),
    User(id = "2", name = "Mary", email = "mary@fake.co", userDetails = UserDetails("12.05.1994", "1222 JB")),
    User(id = "3", name = "Dave", email = "dave@fake.co", userDetails = UserDetails("01.05.1984", "1833 JB")),
    User(id = "4", name = "Jane", email = "jane@fake.co", userDetails = UserDetails("30.12.1989", "1532 JB")),
    User(id = "5", name = "Eric", email = "eric@fake.co", userDetails = UserDetails("14.09.1973", "2131 JB")),
    User(id = "6", name = "Gina", email = "gina@fake.co", userDetails = UserDetails("16.08.1977", "1982 JB")),
    User(id = "7", name = "Ryan", email = "ryan@fake.co", userDetails = UserDetails("07.11.1988", "1638 JB")),
    User(id = "8", name = "Judy", email = "judy@fake.co", userDetails = UserDetails("05.01.1959", "2983 JB"))
)

object UserController {

    fun getAll(ctx: Context) {
        ctx.json(users.map { it.copy(userDetails = null) }) // remove sensitive information
    }

    fun getOne(ctx: Context) {
        val user = users.find { it.id == ctx.pathParam("user-id") } ?: throw NotFoundResponse()
        ctx.json(user)
    }

}

----------------------------------------

TITLE: Cloning Javalin Bazel Template
DESCRIPTION: Commands to clone the template project repository and navigate to the project directory

LANGUAGE: bash
CODE:
git clone git@github.com:javalin/kotlin-javalin-bazel-starter my-javalin-app
cd my-javalin-app

----------------------------------------

TITLE: Handling Path Parameters and Wildcards
DESCRIPTION: Demonstrates how to use path parameters and wildcard matching in Javalin route handlers.

LANGUAGE: java
CODE:
get("/hello/:name", ctx -> {
    ctx.result("Hello: " + ctx.param("name"));
});

get("/hello/*/and/*", ctx -> {
    ctx.result("Hello: " + ctx.splat(0) + " and " + ctx.splat(1));
});

LANGUAGE: kotlin
CODE:
get("/hello/:name") { ctx ->
    ctx.result("Hello: " + ctx.param("name"))
}

get("/hello/*/and/*") { ctx ->
    ctx.result("Hello: " + ctx.splat(0) + " and " + ctx.splat(1))
}

----------------------------------------

TITLE: Sending POST request to API using curl
DESCRIPTION: Demonstrates how to send a POST request to create a new StringData object using curl from the command line.

LANGUAGE: bash
CODE:
curl --header "Content-Type: application/json" --request POST --data '{ "id": "1", "string": "First String"}' your.raspberry.pi.ipaddress:8080/strings

----------------------------------------

TITLE: Deleting Student Records via cURL
DESCRIPTION: Shell command to delete a student record using a cURL DELETE request to the Javalin application.

LANGUAGE: shell
CODE:
curl -X DELETE http://localhost:8080/students/001

----------------------------------------

TITLE: Creating User Overview Vue Component
DESCRIPTION: Vue component for displaying a list of users with HTML template, script for data fetching, and CSS styling.

LANGUAGE: html
CODE:
<template id="user-overview">
  <div>
    <ul class="user-overview-list">
      <li v-for="user in users">
        <a :href="`/users/${user.id}`">{{user.name}} ({{user.email}})</a>
      </li>
    </ul>
  </div>
</template>
<script>
  app.component("user-overview", {
    template: "#user-overview",
    data: () => ({
      users: [],
    }),
    created() {
      fetch("/api/users")
        .then(res => res.json())
        .then(res => this.users = res)
        .catch(() => alert("Error while fetching users"));
    }
  });
</script>
<style>
  ul.user-overview-list {
    padding: 0;
    list-style: none;
  }
  ul.user-overview-list a {
    display: block;
    padding: 16px;
    border-bottom: 1px solid #ddd;
  }
  ul.user-overview-list a:hover {
    background: #00000010;
  }
</style>

----------------------------------------

TITLE: Creating a jte Template
DESCRIPTION: Simple jte template example showing basic syntax and dynamic content rendering.

LANGUAGE: html
CODE:
Hello jte!
The current timestamp is ${System.currentTimeMillis()}.

----------------------------------------

TITLE: Implementing Object Mapping in Javalin for Java and Kotlin
DESCRIPTION: Demonstrates how to use Javalin's object mapping capabilities for JSON serialization and deserialization. Shows examples in both Java and Kotlin.

LANGUAGE: java
CODE:
Todo[] todos = ...
app.get("/todos", ctx -> { // map array of Todos to json-string
    ctx.json(todos);
});
app.put("/todos", ctx -> { // map request-body (json) to array of Todos
    todos = ctx.bodyAsClass(Todo[].class);
    ctx.status(204);
});

LANGUAGE: kotlin
CODE:
var todos = arrayOf(...)
app.get("/todos") { ctx -> // map array of Todos to json-string
    ctx.json(todos)
}
app.put("/todos") { ctx -> // map request-body (json) to array of Todos
    todos = ctx.bodyAsClass(Array<Todo>::class.java)
    ctx.status(204)
}

----------------------------------------

TITLE: Enabling DevLoggingPlugin in Javalin Configuration
DESCRIPTION: Code snippet demonstrating how to enable the DevLoggingPlugin through Javalin's configuration. This is done using the bundledPlugins.enableDevLogging() method in the Javalin.create() configuration.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.bundledPlugins.enableDevLogging();
});

----------------------------------------

TITLE: Defining data class for API in Kotlin
DESCRIPTION: Creates a simple data class to represent the structure of data handled by the API.

LANGUAGE: kotlin
CODE:
data class StringData(val id: Long, val data: String)

----------------------------------------

TITLE: HTML Structure for WebSocket Chat Client
DESCRIPTION: This HTML code defines the structure of the chat client interface, including input field, send button, user list, and chat display area.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>WebsSockets</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="chatControls">
        <input id="message" placeholder="Type your message">
        <button id="send">Send</button>
    </div>
    <ul id="userlist"> <!-- Built by JS --> </ul>
    <div id="chat">    <!-- Built by JS --> </div>
    <script src="websocketDemo.js"></script>
</body>
</html>

----------------------------------------

TITLE: Protobuf Schema Definition
DESCRIPTION: Protocol Buffer schema defining the structure of sensor data messages with field types and numbering

LANGUAGE: protobuf
CODE:
syntax = "proto3";
package protos;

import "google/protobuf/timestamp.proto";

message SensorData {
    optional string make_and_model = 1;
    int32 destination_year = 2;
    repeated double flux_capacitor_readings = 3;
    optional google.protobuf.Timestamp last_check_in = 4;
    bool safety_belts_on = 5;
}

----------------------------------------

TITLE: Configuring Context Path in Javalin (Kotlin)
DESCRIPTION: Shows how to configure a Javalin application in Kotlin with a custom context path, enable static files, set the port, and define a route. The context path is set to '/my-path'.

LANGUAGE: kotlin
CODE:
val app = Javalin.create().apply {
    contextPath("/my-path")
    enabledStaticFiles("public")
    port(1234)
}.start()

app.get("/") { ctx -> ctx.result("Hello, World") }

----------------------------------------

TITLE: Creating HTML Structure for Real-time Collaboration Client
DESCRIPTION: Simple HTML markup for the client-side interface of the real-time collaboration tool. It includes a heading and a textarea for document editing.

LANGUAGE: markup
CODE:
<body>
    <h1>Open the URL in another tab to start collaborating</h1>
    <textarea placeholder="Type something ..."></textarea>
</body>

----------------------------------------

TITLE: Initializing Javalin app in Kotlin
DESCRIPTION: Creates and configures a Javalin application instance, setting up exception handling and specifying the IP address and port to listen on.

LANGUAGE: kotlin
CODE:
fun main() {
    val ipAddress = "0.0.0.0" // change this to your Raspberry Pi's IP address
    val app = Javalin.create().apply {
        exception(Exception::class.java) { e, _ -> e.printStackTrace() }
    }.start(ipAddress, 8080)
}

----------------------------------------

TITLE: Configuring Maven Dependencies for Javalin Email Project
DESCRIPTION: XML configuration for Maven dependencies required for the Javalin email project, including Javalin, Apache Commons Email, and J2HTML.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>io.javalin</groupId>
        <artifactId>javalin-bundle</artifactId> <!-- For handling http-requests -->
        <version>{{site.javalinversion}}</version>
    </dependency>
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-email</artifactId> <!-- For sending emails -->
        <version>1.5</version>
    </dependency>
    <dependency>
        <groupId>com.j2html</groupId>
        <artifactId>j2html</artifactId> <!-- For creating HTML form -->
        <version>1.6.0</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Configuring Maven Dependencies for Javalin
DESCRIPTION: Maven dependency configuration to include the Javalin bundle which contains Javalin, Jetty, Jackson, and Logback.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin-bundle</artifactId>
    <version>{{site.javalinversion}}</version>
</dependency>

----------------------------------------

TITLE: Configuring SSE Clients in Javalin 5 (Kotlin)
DESCRIPTION: This snippet demonstrates how to configure Server-Sent Events (SSE) clients in Javalin 5 using Kotlin. It shows how to keep clients alive and manage them in a list.

LANGUAGE: kotlin
CODE:
val clients = mutableListOf<SseClient>()

app.sse("/sse") { client ->
    client.keepAlive()
    client.onClose { clients.remove(client) }
    clients.add(client)
}

----------------------------------------

TITLE: Adding Javalin dependencies to Gradle
DESCRIPTION: Specifies the required dependencies for Javalin, Jackson (for JSON serialization), and SLF4J (for logging) in the Gradle build file.

LANGUAGE: groovy
CODE:
compile 'io.javalin:javalin:{{site.javalinThreeVersion}}'
compile 'com.fasterxml.jackson.core:jackson-databind:2.10.3'
compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.10.3'
compile 'org.slf4j:slf4j-simple:1.7.30'

----------------------------------------

TITLE: Maven Dependencies Configuration for Javalin
DESCRIPTION: Maven dependency configuration required to set up a Javalin project.

LANGUAGE: markup
CODE:
<dependencies>
    <dependency>
        <groupId>io.javalin</groupId>
        <artifactId>javalin-bundle</artifactId>
        <version>{{site.javalinversion}}</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Implementing Real-time Collaboration Server in Kotlin with Javalin
DESCRIPTION: Kotlin implementation of a Javalin server for real-time document collaboration. It sets up WebSocket handlers for connecting, messaging, and disconnecting clients, and manages shared documents using a more concise syntax.

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin
import io.javalin.http.staticfiles.Location
import io.javalin.websocket.WsContext
import java.util.concurrent.ConcurrentHashMap

data class Collaboration(var doc: String = "", val clients: MutableSet<WsContext> = ConcurrentHashMap.newKeySet())

fun main() {

    val collaborations = ConcurrentHashMap<String, Collaboration>()

    Javalin.create {
        it.staticFiles.add("/public", Location.CLASSPATH)
        it.router.mount {
            it.ws("/docs/{doc-id}") { ws ->
                ws.onConnect { ctx ->
                    if (collaborations[ctx.docId] == null) {
                        collaborations[ctx.docId] = Collaboration()
                    }
                    collaborations[ctx.docId]!!.clients.add(ctx)
                    ctx.send(collaborations[ctx.docId]!!.doc)
                }
                ws.onMessage { ctx ->
                    collaborations[ctx.docId]!!.doc = ctx.message()
                    collaborations[ctx.docId]!!.clients.filter { it.session.isOpen }.forEach {
                        it.send(collaborations[ctx.docId]!!.doc)
                    }
                }
                ws.onClose { ctx ->
                    collaborations[ctx.docId]!!.clients.remove(ctx)
                }
            }
        }
    }.start(7070)

}

val WsContext.docId: String get() = this.pathParam("doc-id")

----------------------------------------

TITLE: Defining Route Roles in Java
DESCRIPTION: Illustrates the new way of specifying roles for routes in Javalin 4 using varargs instead of a Set.

LANGUAGE: java
CODE:
get("/path", controller::method, Role.ROLENAME) // new

----------------------------------------

TITLE: Javalin Route Binding
DESCRIPTION: Examples of binding Vue components to Javalin routes in both Java and Kotlin.

LANGUAGE: java
CODE:
app.get("/my-path", new VueComponent("my-component"));

LANGUAGE: kotlin
CODE:
app.get("/my-path", VueComponent("my-component"))

----------------------------------------

TITLE: Initializing Kotlin main function
DESCRIPTION: Defines the main entry point for the Kotlin application without command-line arguments.

LANGUAGE: kotlin
CODE:
fun main() {

}

----------------------------------------

TITLE: Kotlin Data Class Definition
DESCRIPTION: Example of Kotlin data class implementation with immutable properties.

LANGUAGE: kotlin
CODE:
data class User(val name: String, val email: String, val id: Int)

----------------------------------------

TITLE: JavaScript Client for WebSocket Chat Application
DESCRIPTION: This JavaScript code implements the client-side functionality for the WebSocket chat application, handling WebSocket connections, sending messages, and updating the UI.

LANGUAGE: javascript
CODE:
// small helper function for selecting element by id
let id = id => document.getElementById(id);

//Establish the WebSocket connection and set up event handlers
let ws = new WebSocket("ws://" + location.hostname + ":" + location.port + "/chat");
ws.onmessage = msg => updateChat(msg);
ws.onclose = () => alert("WebSocket connection closed");

// Add event listeners to button and input field
id("send").addEventListener("click", () => sendAndClear(id("message").value));
id("message").addEventListener("keypress", function (e) {
    if (e.keyCode === 13) { // Send message if enter is pressed in input field
        sendAndClear(e.target.value);
    }
});

function sendAndClear(message) {
    if (message !== "") {
        ws.send(message);
        id("message").value = "";
    }
}

function updateChat(msg) { // Update chat-panel and list of connected users
    let data = JSON.parse(msg.data);
    id("chat").insertAdjacentHTML("afterbegin", data.userMessage);
    id("userlist").innerHTML = data.userlist.map(user => "<li>" + user + "</li>").join("");
}

----------------------------------------

TITLE: JavaScript Client for WebSocket Chat Application
DESCRIPTION: This JavaScript code implements the client-side functionality for the WebSocket chat application, handling WebSocket connections, sending messages, and updating the UI.

LANGUAGE: javascript
CODE:
// small helper function for selecting element by id
let id = id => document.getElementById(id);

//Establish the WebSocket connection and set up event handlers
let ws = new WebSocket("ws://" + location.hostname + ":" + location.port + "/chat");
ws.onmessage = msg => updateChat(msg);
ws.onclose = () => alert("WebSocket connection closed");

// Add event listeners to button and input field
id("send").addEventListener("click", () => sendAndClear(id("message").value));
id("message").addEventListener("keypress", function (e) {
    if (e.keyCode === 13) { // Send message if enter is pressed in input field
        sendAndClear(e.target.value);
    }
});

function sendAndClear(message) {
    if (message !== "") {
        ws.send(message);
        id("message").value = "";
    }
}

function updateChat(msg) { // Update chat-panel and list of connected users
    let data = JSON.parse(msg.data);
    id("chat").insertAdjacentHTML("afterbegin", data.userMessage);
    id("userlist").innerHTML = data.userlist.map(user => "<li>" + user + "</li>").join("");
}

----------------------------------------

TITLE: Implementing GraphQL Command in Kotlin
DESCRIPTION: Example of creating a GraphQL command class with methods and descriptions.

LANGUAGE: kotlin
CODE:
@GraphQLDescription("Command Example")
class CommandExample : CommandGraphql {
    fun hello(): String = "Hello world"

    fun demoData(@GraphQLDescription("awesome input") data: DemoData): DemoData = data
}

----------------------------------------

TITLE: Functional Testing Javalin Applications in Java
DESCRIPTION: Java code demonstrating how to write functional tests for Javalin applications using JavalinTest. It shows how to test HTTP endpoints and verify responses.

LANGUAGE: java
CODE:
import io.javalin.Javalin;
import io.javalin.plugin.json.JavalinJackson;
import io.javalin.testtools.JavalinTest;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class FunctionalTest {

    Javalin app = new JavalinTestingExampleApp("someDependency").javalinApp(); // inject any dependencies you might have
    private final String usersJson = new JavalinJackson().toJsonString(UserController.users);

    @Test
    public void GET_to_fetch_users_returns_list_of_users() {
        JavalinTest.test(app, (server, client) -> {
            assertThat(client.get("/users").code()).isEqualTo(200);
            assertThat(client.get("/users").body().string()).isEqualTo(usersJson);
        });
    }

}

----------------------------------------

TITLE: Functional Testing Javalin Applications in Java
DESCRIPTION: Java code demonstrating how to write functional tests for Javalin applications using JavalinTest. It shows how to test HTTP endpoints and verify responses.

LANGUAGE: java
CODE:
import io.javalin.Javalin;
import io.javalin.plugin.json.JavalinJackson;
import io.javalin.testtools.JavalinTest;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class FunctionalTest {

    Javalin app = new JavalinTestingExampleApp("someDependency").javalinApp(); // inject any dependencies you might have
    private final String usersJson = new JavalinJackson().toJsonString(UserController.users);

    @Test
    public void GET_to_fetch_users_returns_list_of_users() {
        JavalinTest.test(app, (server, client) -> {
            assertThat(client.get("/users").code()).isEqualTo(200);
            assertThat(client.get("/users").body().string()).isEqualTo(usersJson);
        });
    }

}

----------------------------------------

TITLE: Template Precompilation Configuration
DESCRIPTION: Maven plugin configuration for precompiling jte templates during the build process.

LANGUAGE: xml
CODE:
<plugin>
    <groupId>gg.jte</groupId>
    <artifactId>jte-maven-plugin</artifactId>
    <version>1.0.0</version>
    <configuration>
        <sourceDirectory>${basedir}/src/main/jte</sourceDirectory>
        <targetDirectory>${basedir}/jte-classes</targetDirectory>
        <contentType>Html</contentType>
    </configuration>
    <executions>
        <execution>
            <phase>process-classes</phase>
            <goals>
                <goal>precompile</goal>
            </goals>
        </execution>
    </executions>
</plugin>

----------------------------------------

TITLE: Kotlin Data Class Usage Example
DESCRIPTION: Demonstrates data class features including object copying and destructuring declarations.

LANGUAGE: kotlin
CODE:
val alice = User(name = "Alice", email = "alice@alice.kt", id = 0)
val aliceNewEmail = alice.copy(email = "alice@bob.kt")

val (name, email) = aliceNewEmail
println("$name's new email is $email")

----------------------------------------

TITLE: Registering Custom JavalinRenderer with Multiple Engines in Kotlin
DESCRIPTION: Kotlin code example demonstrating how to register a custom JavalinRenderer with multiple template engines in the Javalin configuration.

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.fileRenderer(
        JavalinRenderer()
            .register("mustache", JavalinMustache())
            .register("jte", JavalinJte())
    )
}

----------------------------------------

TITLE: Implementing GraphQL Subscription in Kotlin
DESCRIPTION: Example of creating a GraphQL subscription class that implements reactive streaming.

LANGUAGE: kotlin
CODE:
@GraphQLDescription("Subscription Example")
class SubscriptionExample: SubscriptionGraphql {
    fun counter(): Flux<Int> = Flux.interval(Duration.ofMillis(100)).map { 1 }
}

----------------------------------------

TITLE: Configuring Basic Maven POM for Javalin Project
DESCRIPTION: Minimal Maven POM configuration example that sets up a Javalin project with basic project coordinates and dependencies.

LANGUAGE: markup
CODE:
<project>
    <!-- model version - always 4.0.0 for Maven 2.x POMs -->
    <modelVersion>4.0.0</modelVersion>

    <!-- project coordinates - values which uniquely identify this project -->
    <groupId>com.mygroup</groupId>
    <artifactId>my-javalin-project</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <!-- library dependencies -->
    <dependencies>
        <dependency>
            <groupId>io.javalin</groupId>
            <artifactId>javalin</artifactId>
            <version>{{site.javalinversion}}</version>
        </dependency>
    </dependencies>
</project>

----------------------------------------

TITLE: Implementing Localization Support
DESCRIPTION: Implementation of the LocalizationSupport interface for handling internationalized content in jte templates.

LANGUAGE: java
CODE:
public class Localizer implements LocalizationSupport {
    private final ResourceBundle bundle;

    public Localizer(Locale locale) {
        bundle = ResourceBundle.getBundle("localization", locale);
    }

    @Override
    public String lookup(String key) {
        return bundle.getString(key);
    }
}

----------------------------------------

TITLE: Deploying Javalin Application to Heroku
DESCRIPTION: Maven command to deploy the Javalin application to Heroku using the Heroku Maven plugin.

LANGUAGE: bash
CODE:
mvn heroku:deploy

----------------------------------------

TITLE: Rendering a Template with Model in Java
DESCRIPTION: Java code example for rendering a template file with a model using the ctx.render() method.

LANGUAGE: java
CODE:
ctx.render("/templateFile.ext", model("firstName", "John", "lastName", "Doe"));

----------------------------------------

TITLE: Generating News Post List with Jekyll and Liquid
DESCRIPTION: This snippet uses Jekyll and Liquid templating to generate a list of news posts about Javalin releases. It filters posts by category, sorts them by date, and displays key information for each post.

LANGUAGE: html
CODE:
{% assign newsposts = site.posts | where: "category" , "news" | sort: 'date' | reverse %}

<div class="posts-overview">
    <ul class="post-list">
        {% for post in newsposts %}
            <li class="post-summary">
                <a href="{{ post.url }}">
                    <h2>Javalin {{ post.version }} - {{ post.title }}</h2>
                    <span class="date">
                        <time datetime="{{ post.date | date_to_xmlschema }}" itemprop="datePublished">{{ post.date | date: "%b %-d, %Y" }}</time>
                    </span>
                    <p>{{ post.summary }}</p>
                </a>
            </li>
        {% endfor %}
    </ul>
</div>

----------------------------------------

TITLE: Example Test Using Mocked Context
DESCRIPTION: Complete test example showing how to mock and verify Javalin Context behavior

LANGUAGE: java
CODE:
@Test
public void handleBrewCoffee() {
    Context context = mock(Context.class);
    this.teapotRequestHandler.handleBrewCoffee(context);
    verify(context).status(418);
    verify(context).result("I'm a teapot!");
}

----------------------------------------

TITLE: Configuring Heroku Maven Plugin
DESCRIPTION: Maven plugin configuration for Heroku deployment. It specifies the JDK version, app name, and launch command for the Javalin application on Heroku.

LANGUAGE: markup
CODE:
<plugin>
    <groupId>com.heroku.sdk</groupId>
    <artifactId>heroku-maven-plugin</artifactId>
    <version>3.0.3</version>
    <configuration>
        <jdkVersion>11</jdkVersion>
        <appName>javalin-heroku-example</appName>
        <processTypes>
            <!-- Tell Heroku how to launch your application -->
            <web>java -jar ./target/javalin-heroku-example-1.0-jar-with-dependencies.jar</web>
        </processTypes>
    </configuration>
</plugin>

----------------------------------------

TITLE: Creating a JWT Provider in Java
DESCRIPTION: Sets up a JWT provider with an algorithm, generator, and verifier using the Auth0 Java JWT library.

LANGUAGE: java
CODE:
Algorithm algorithm = Algorithm.HMAC256("very_secret");

JWTGenerator<MockUser> generator = (user, alg) -> {
            JWTCreator.Builder token = JWT.create()
                    .withClaim("name", user.name)
                    .withClaim("level", user.level);
            return token.sign(alg);
        };

JWTVerifier verifier = JWT.require(algorithm).build();

JWTProvider provider = JWTProvider(algorithm, generator, verifier);

----------------------------------------

TITLE: HTML Reservation Forms
DESCRIPTION: HTML forms for making and checking reservations, demonstrating both POST and GET methods.

LANGUAGE: markup
CODE:
<h2>Make reservation:</h2>
<form method="post" action="/make-reservation">
    Choose day
    <select name="day">
        <option value="saturday">Saturday</option>
        <option value="sunday">Sunday</option>
    </select>
    <br>
    Choose time
    <select name="time">
        <option value="8:00 PM">8:00 PM</option>
        <option value="9:00 PM">9:00 PM</option>
    </select>
    <br>
    <button>Submit</button>
</form>

LANGUAGE: markup
CODE:
<h2>Check your reservation:</h2>
<form method="get" action="/check-reservation">
    Choose day
    <select name="day">
        <option value="saturday">Saturday</option>
        <option value="sunday">Sunday</option>
    </select>
    <br>
    <button>Submit</button>
</form>

----------------------------------------

TITLE: Configuring Maven Shade Plugin for Javalin
DESCRIPTION: Maven configuration to create a shaded JAR containing all application dependencies. Uses Maven Shade Plugin to package the application and its dependencies into a single executable JAR file.

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-shade-plugin</artifactId>
    <version>3.4.1</version>
    <configuration>
        <transformers>
            <transformer
                implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                <mainClass>app.Main</mainClass>
            </transformer>
        </transformers>
        <filters>
            <filter>
                <artifact>*:*</artifact>
                <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                </excludes>
            </filter>
        </filters>
    </configuration>
    <executions>
        <execution>
            <phase>package</phase>
            <goals>
                <goal>shade</goal>
            </goals>
        </execution>
    </executions>
</plugin>

----------------------------------------

TITLE: Failed Context Mocking Example
DESCRIPTION: Shows the code that leads to mock failure due to final class restrictions

LANGUAGE: java
CODE:
Context context = mock(Context.class);

----------------------------------------

TITLE: Listing Changes in Javalin 4.6.1 Release Notes
DESCRIPTION: Markdown list detailing the changes and improvements in Javalin 4.6.1, including SSE connection handling, JavalinVue updates, dependency version bumps, exception logging changes, and a new plugin introduction.

LANGUAGE: markdown
CODE:
## Changes
* The closing of SSE connections is now more consistent.
  The close-callback is now called every time the connection is closed,
  including when it is closed manually by the user.
* The `LoadableData` JavaScript class in the `JavalinVue` plugin
  now has more options for reloading itself
* Bump Jackson (optional), Logback (bundle) and GSON (test) to latest versions
* Jetty `EofException` and `TimeoutException` are no longer logged for async handlers
* A new plugin, `HttpAllowedMethodsOnRoutesUtil` has been added

----------------------------------------

TITLE: Implementing Redirects in Javalin and SparkJava
DESCRIPTION: Shows how to perform redirects in Javalin and SparkJava. Javalin's approach is more straightforward, while SparkJava requires an empty return statement to avoid a 404 error.

LANGUAGE: java
CODE:
javalin.get("/", ctx -> ctx.redirect("/new-path"));

LANGUAGE: java
CODE:
Spark.get("/", (req, res) -> {
    res.redirect("/new-path"); // can't return here, the redirect method is void
    return ""; // if you return null here you get a 404
});

----------------------------------------

TITLE: Registering JavalinMustache Template Engine in Java
DESCRIPTION: Java code snippet demonstrating how to register the JavalinMustache template engine in the Javalin configuration.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.fileRenderer(new JavalinMustache());
});

----------------------------------------

TITLE: Using the reusable test utility for GET and POST tests (Kotlin)
DESCRIPTION: Examples of using the testProfileGateway utility function to simplify GET and POST request tests.

LANGUAGE: kotlin
CODE:
@Test
fun `gets a user profile by id`() = testProfileGateway { server, gatewayClient ->
    server.get("profile/abc") {
        it.json(mapOf("id" to "abc", "email" to "x123@gmail.com"))
    }

    val result = gatewayClient.fetchProfile("abc")

    assertEquals(Profile(id = "abc", email = "x123@gmail.com".toEmail()), result)
}

@Test
fun `posts a user profile`() = testProfileGateway { server, profileGateway ->
    var postedBody: String? = null
    var contentType: String? = null
    server.post("profile") {
        postedBody = it.body()
        contentType = it.contentType()
        it.status(201)
    }

    profileGateway.saveProfile(Profile(id = "abc", email = "x123@gmail.com".toEmail()))

    JSONAssert.assertEquals(
        """ { "id": "abc", "email": "x123@gmail.com"}  """,
        postedBody, true
    )
    assertEquals("application/json", contentType)
}

----------------------------------------

TITLE: Javalin Servlet Implementation
DESCRIPTION: Implementation of a Servlet that uses Javalin's standalone mode to handle REST requests. Uses @WebServlet annotation for auto-discovery and demonstrates proper initialization without Jetty dependencies.

LANGUAGE: kotlin
CODE:
@WebServlet(urlPatterns = ["/rest/*"], name = "MyRestServlet", asyncSupported = false)
class MyRestServlet : HttpServlet() {
    val javalin: JavalinServlet = Javalin.createStandalone()
            .get("/rest") { ctx -> ctx.result("Hello!") }
            .servlet()

    override fun service(req: HttpServletRequest, resp: HttpServletResponse) {
        javalin.service(req, resp)
    }
}

----------------------------------------

TITLE: Context Future Usage in Javalin
DESCRIPTION: Example demonstrating the usage of Context#future in handler methods. This functionality is now available in all handler types including before, after, exception, and error handlers.

LANGUAGE: java
CODE:
ctx.future("My String")

----------------------------------------

TITLE: JSON Mapping in Javalin and SparkJava
DESCRIPTION: Illustrates how to return JSON responses in Javalin and SparkJava. Javalin provides a simpler syntax, while SparkJava requires a separate JsonTransformer.

LANGUAGE: java
CODE:
javalin.get("/", ctx -> ctx.json(object));

LANGUAGE: java
CODE:
Spark.get("/", (req, res) -> object, new JsonTransformer());

----------------------------------------

TITLE: Creating a Custom Gauge Metric in Micrometer for Javalin
DESCRIPTION: Java code showing how to create a custom Gauge metric that reports a random number, demonstrating the flexibility of custom metrics in Micrometer.

LANGUAGE: java
CODE:
import io.micrometer.core.instrument.Gauge;

Gauge
  .builder("myapp_random", () -> (int) (Math.random() * 1000))
  .description("Random number from My-Application.")
  .strongReference(true)
  .register(registry);

----------------------------------------

TITLE: WebSocket Handling in Javalin
DESCRIPTION: How to handle WebSocket connections and events in Javalin.

LANGUAGE: java
CODE:
app.ws("/websocket/{path}", ws -> {
    ws.onConnect(ctx -> System.out.println("Connected"));
    ws.onMessage(ctx -> {
        User user = ctx.messageAsClass(User.class); // convert from json
        ctx.send(user); // convert to json and send back
    });
    ws.onBinaryMessage(ctx -> System.out.println("Message"))
    ws.onClose(ctx -> System.out.println("Closed"));
    ws.onError(ctx -> System.out.println("Errored"));
});

LANGUAGE: kotlin
CODE:
app.ws("/websocket/{path}") { ws ->
    ws.onConnect { ctx -> println("Connected") }
    ws.onMessage { ctx ->
        val user = ctx.messageAsClass<User>(); // convert from json
        ctx.send(user); // convert to json and send back
    }
    ws.onBinaryMessage { ctx -> println("Message") }
    ws.onClose { ctx -> println("Closed") }
    ws.onError { ctx -> println("Errored") }
}

----------------------------------------

TITLE: Setting Up Advanced JWT Handling in Javalin
DESCRIPTION: Configures a decode handler and access manager for more advanced JWT handling in a Javalin application.

LANGUAGE: java
CODE:
Handler decodeHandler = JavalinJWT.createHeaderDecodeHandler(provider);
app.before(decodeHandler);

enum Roles implements Role {
    ANYONE,
    USER,
    ADMIN
}

Map<String, Role> rolesMapping = new HashMap<String, Role>() {{
    put("user", Roles.USER);
    put("admin", Roles.ADMIN);
}};

JWTAccessManager accessManager = new JWTAccessManager("level", rolesMapping, Roles.ANYONE);
app.accessManager(accessManager);

----------------------------------------

TITLE: Maven Dependency Configuration for Javalin 4.0.0.RC1
DESCRIPTION: Maven dependency configuration snippet showing how to include Javalin 4.0.0.RC1 in a project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin</artifactId>
    <version>4.0.0.RC1</version>
</dependency>

----------------------------------------

TITLE: Adding Javalin Dependency with Leiningen
DESCRIPTION: Leiningen dependency configuration for including Javalin in a Clojure project.

LANGUAGE: java
CODE:
[io.javalin/javalin "{{javalinVersion | default: site.javalinversion }}"]

----------------------------------------

TITLE: Creating HTML Layout for Mithril Application
DESCRIPTION: HTML template for initializing Mithril application with JavalinMithril specific placeholders for component registration and routing.

LANGUAGE: markup
CODE:
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf8"/>
        <script src="@cdnWebjar/mithril/2.0.4/mithril.min.js"></script>
        <style>
            <!-- Your style here -->
        </style>
        @componentRegistration
    </head>
    <body>

    </body>
    <script>
        m.mount(document.body, {view:()=>@routeComponent})
    </script>
</html>

----------------------------------------

TITLE: Implementing Basic JWT Handlers in Javalin
DESCRIPTION: Demonstrates basic JWT token generation and validation handlers in a Javalin application.

LANGUAGE: java
CODE:
Handler generateHandler = context -> {
    MockUser mockUser = new MockUser("Mocky McMockface", "user");
    String token = provider.generateToken(mockUser);
    context.json(new JWTResponse(token));
};

Handler validateHandler = context -> {
    Optional<DecodedJWT> decodedJWT = JavalinJWT.getTokenFromHeader(context)
                                                  .flatMap(provider::validateToken);

    if (!decodedJWT.isPresent()) {
        context.status(401).result("Missing or invalid token");
    }
    else {
        context.result("Hi " + decodedJWT.get().getClaim("name").asString());
    }
};

app.get("/generate", generateHandler);
app.get("/validate", validateHandler);

----------------------------------------

TITLE: SSL Plugin Configuration Options
DESCRIPTION: Lists the available configuration options for the SSL plugin, including connection settings and TLS configuration.

LANGUAGE: java
CODE:
host = null;                           // Host to bind to, by default it will bind to all interfaces.
insecure = true;                       // Toggle the default http (insecure) connector.
secure = true;                         // Toggle the default https (secure) connector.
http2 = true;                          //   HTTP/2 Support

insecurePort = 80;                     // Port to use on the http (insecure) connector.
securePort = 443;                      // Port to use on the SSL (secure) connector.
redirect = false;                      // Redirect all http requests to https.

sniHostCheck = true;                   // Enable SNI hostname verification.
tlsConfig = TLSConfig.INTERMEDIATE;    // Set the TLS configuration.

----------------------------------------

TITLE: Adding Javalin Dependency with SBT
DESCRIPTION: SBT dependency configuration for including Javalin in a Scala project.

LANGUAGE: java
CODE:
libraryDependencies += "io.javalin" % "javalin" % "{{javalinVersion | default: site.javalinversion }}"

----------------------------------------

TITLE: Implementing Custom JavalinRenderer in Kotlin
DESCRIPTION: Kotlin implementation of a custom JavalinRenderer class that can render templates based on file extensions.

LANGUAGE: kotlin
CODE:
class JavalinRenderer : FileRenderer {
    private val renderers = HashMap<String, FileRenderer>()
    fun register(extension: String, renderer: FileRenderer): JavalinRenderer {
        renderers[extension] = renderer
        return this
    }


    override fun render(filePath: String, model: Map<String, Any?>, context: Context): String {
        val extension = filePath.substring(filePath.lastIndexOf(".") + 1)
        return renderers[extension]!!.render(filePath, model, context)
    }
}

----------------------------------------

TITLE: Configuring Simple Logger Properties
DESCRIPTION: Basic configuration for SLF4J simple logger showing how to set log levels, date format, and specific package logging levels.

LANGUAGE: properties
CODE:
# simplelogger.properties
# see https://www.slf4j.org/apidocs/org/slf4j/simple/SimpleLogger.html
org.slf4j.simpleLogger.defaultLogLevel=DEBUG
org.slf4j.simpleLogger.showDateTime=true
org.slf4j.simpleLogger.dateTimeFormat=YYYY-MM-dd HH:mm:ss.SSS
# less jetty noise
org.slf4j.simpleLogger.log.org.eclipse.jetty=INFO
# more javalin noise
org.slf4j.simpleLogger.log.io.javalin=TRACE

----------------------------------------

TITLE: Defining a Mock User Class in Java
DESCRIPTION: Defines a simple MockUser class with name and level attributes for demonstration purposes in the JWT examples.

LANGUAGE: java
CODE:
class MockUser {
    String name;
    String level;

    MockUser(String name, String level) {
        this.name = name;
        this.level = level;
    }
}

----------------------------------------

TITLE: Configuring Micrometer Plugin with Prometheus Registry in Javalin
DESCRIPTION: Java code to set up a Prometheus meter registry, register the Micrometer plugin with Javalin, and create an endpoint for scraping metrics.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    PrometheusMeterRegistry prometheusMeterRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);

    MicrometerPlugin micrometerPlugin = new MicrometerPlugin(micrometerPluginConfig -> micrometerPluginConfig.registry = prometheusMeterRegistry);
    Javalin app = Javalin.create(config -> config.registerPlugin(micrometerPlugin)).start(8080);

    String contentType = "text/plain; version=0.0.4; charset=utf-8";
    app.get("/prometheus", ctx -> ctx.contentType(contentType).result(prometheusMeterRegistry.scrape()));
}

----------------------------------------

TITLE: Configuring Micrometer Plugin with Prometheus Registry in Javalin
DESCRIPTION: Java code to set up a Prometheus meter registry, register the Micrometer plugin with Javalin, and create an endpoint for scraping metrics.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    PrometheusMeterRegistry prometheusMeterRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);

    MicrometerPlugin micrometerPlugin = new MicrometerPlugin(micrometerPluginConfig -> micrometerPluginConfig.registry = prometheusMeterRegistry);
    Javalin app = Javalin.create(config -> config.registerPlugin(micrometerPlugin)).start(8080);

    String contentType = "text/plain; version=0.0.4; charset=utf-8";
    app.get("/prometheus", ctx -> ctx.contentType(contentType).result(prometheusMeterRegistry.scrape()));
}

----------------------------------------

TITLE: User Database Initialization
DESCRIPTION: Initializes a mock user database using Kotlin's map creation syntax.

LANGUAGE: kotlin
CODE:
val users = mapOf(
    0 to User(name = "Alice", email = "alice@alice.kt", id = 0),
    1 to User(name = "Bob", email = "bob@bob.kt", id = 1),
    2 to User(name = "Carol", email = "carol@carol.kt", id = 2),
    3 to User(name = "Dave", email = "dave@dave.kt", id = 3)
)

----------------------------------------

TITLE: Updating JavalinJackson Mapper in Javalin 5.3.0
DESCRIPTION: Demonstrates how to update the JavalinJackson mapper configuration, specifically setting serialization inclusion to non-null values.

LANGUAGE: java
CODE:
config.jsonMapper(new JavalinJackson().updateMapper(mapper -> {
    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
});

LANGUAGE: kotlin
CODE:
config.jsonMapper(JavalinJackson().updateMapper { mapper ->
    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL)
})

----------------------------------------

TITLE: Initializing Javalin Servlet without Jetty in Kotlin
DESCRIPTION: Demonstrates how to use Javalin with an application server or servlet container like Tomcat or WebLogic, without Jetty. It uses EmbeddedJavalin to create a servlet that can be used in a standard HttpServlet implementation.

LANGUAGE: kotlin
CODE:
@WebServlet(urlPatterns = ["/rest/*"], name = "MyServlet")
class MyServlet : HttpServlet() {
    val javalin = EmbeddedJavalin()
        .get("/rest") { ctx -> ctx.result("Hello!") }
        .createServlet()

    override fun service(req: HttpServletRequest, resp: HttpServletResponse) {
        javalin.service(req, resp)
    }
}

----------------------------------------

TITLE: Implementing UserController with Dependency Injection
DESCRIPTION: Java class for UserController using Google Guice for dependency injection and Javalin for request handling.

LANGUAGE: java
CODE:
package io.kidbank.user;

import io.javalin.Context;
import io.kidbank.user.services.UserService;

import javax.inject.Inject;
import javax.inject.Singleton;

@Singleton
class UserController {
    private UserService userService;

    @Inject
    public UserController(UserService userService) {
        this.userService = userService;
    }

    public void index(Context ctx) {
        ctx.json(userService.getAllUsersUppercase());
    }
}

----------------------------------------

TITLE: WebSocket Event Logging Output in Javalin DevLoggingPlugin
DESCRIPTION: Example of the log output generated by the DevLoggingPlugin for WebSocket events. It shows logging for both onConnect and onClose events, including session details, path parameters, and query parameters.

LANGUAGE: plaintext
CODE:
[JettyServerThreadPool-75] INFO io.javalin.Javalin - JAVALIN WEBSOCKET DEBUG LOG
WebSocket Event: onConnect
Session Id: ca762465-a30d-4f9d-97a3-ce24e9515135
Host: localhost
Matched Path: /path/{param}
PathParams: {param=1}
QueryParams: {test=[banana], hi=[1, 2]}

[JettyServerThreadPool-80] INFO io.javalin.Javalin - JAVALIN WEBSOCKET DEBUG LOG
WebSocket Event: onClose
Session Id: ca762465-a30d-4f9d-97a3-ce24e9515135
Host: localhost
Matched Path: /path/{param}
PathParams: {param=1}
QueryParams: {test=[banana], hi=[1, 2]}
StatusCode: 1000
Reason: No reason was provided

----------------------------------------

TITLE: Defining Routes in Kotlin with Javalin (Extended)
DESCRIPTION: Shows how Javalin's API can be used in Kotlin to create a clean and readable route structure.

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.enableCorsForAllOrigins()
}.routes {
    path("users") {
        get(UserController::getAll)
        post(UserController::create)
        path(":user-id") {
            get(UserController::getOne)
            patch(UserController::update)
            delete(UserController::delete)
        }
    }
}.start(port)

----------------------------------------

TITLE: Adding Maven Dependencies for Javalin Micrometer Plugin
DESCRIPTION: XML configuration for adding Javalin Micrometer plugin and Prometheus registry dependencies to a Maven project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.javalin</groupId>
    <artifactId>javalin-micrometer</artifactId>
    <version>{{site.javalinversion}}</version>
</dependency>
<dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-registry-prometheus</artifactId>
    <version>${io.micrometer.version}</version>
</dependency>

----------------------------------------

TITLE: Implementing StatisticsService for InfluxDB Operations
DESCRIPTION: This snippet shows the StatisticsService class, which handles the business logic for creating and retrieving metrics from InfluxDB. It includes methods for inserting data points and querying aggregated statistics within a 60-second time frame.

LANGUAGE: kotlin
CODE:
private val timeFrameInMillis = 60000

private val aggregateQuery = """
    SELECT  count(s_count) as count,
            sum(s_count) as sum,
            min(s_count) as min,
            max(s_count) as max
    FROM uploads
    where time > now() - 60s
    """

init {
    influxDB.createDatabase(dbName)
}

fun create(statistic: Statistic): StatisticResult {
    val now = Date().time
    if ((statistic.timestamp + timeFrameInMillis) >= now) {
        influxDB.write(dbName, "", Point.measurement("uploads")
                .time(statistic.timestamp, TimeUnit.MILLISECONDS)
                .addField("s_count", statistic.count)
                .addField("s_timestamp", statistic.timestamp)
                .build())
        return StatisticResult.OK
    }
    return StatisticResult.OLD
}

fun aggregated(): Total {
    val query = Query(
            aggregateQuery,
            dbName
    )
    val results = influxDB.query(query)
            .results
    if (results.first().series == null) {
        return Total(0.0, 0.0, 0.0, 0.0)
    }
    return results.first().series.first().values
            .map { mutableList ->
                Total(mutableList[1].toString().toDouble(),
                        mutableList[2].toString().toDouble(),
                        mutableList[3].toString().toDouble(),
                        mutableList[4].toString().toDouble()
                )
            }[0]
}

----------------------------------------

TITLE: HTTP Request Logging Output in Javalin DevLoggingPlugin
DESCRIPTION: Example of the log output generated by the DevLoggingPlugin for an HTTP GET request. It includes details about the request, headers, cookies, body, query parameters, and the response.

LANGUAGE: plaintext
CODE:
[JettyServerThreadPool-81] INFO io.javalin.Javalin - JAVALIN REQUEST DEBUG LOG:
Request: GET [/hello-world]
    Matching endpoint-handlers: [GET=/hello-world]
    Headers: {User-Agent=unirest-java/3.1.00, Accept-Encoding=gzip, ... }
    Cookies: {}
    Body:
    QueryString: null
    QueryParams: {}
    FormParams: {}
Response: [200 OK], execution took 0.19 ms
    Headers: {Date=Fri, 19 Aug 2022 16:28:16 GMT, Content-Type=text/plain}
    Body is 12 bytes (starts on next line):
    Hello World!

----------------------------------------

TITLE: Defining Routes in Kotlin with Javalin
DESCRIPTION: Demonstrates how Javalin's API can be used in Kotlin, showcasing the language's ability to create DSL-like structures.

LANGUAGE: kotlin
CODE:
val server = Javalin.create()
with(server) {
    path("users") {
        get(UserController::getAll)
            ...
        }
    }
}

----------------------------------------

TITLE: Configuring a custom server in Javalin
DESCRIPTION: This snippet demonstrates how to configure a custom server in Javalin using the create method and a configuration lambda, showcasing the centralized configuration approach.

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.server { ... }
}

----------------------------------------

TITLE: Allow Any Host CORS Configuration
DESCRIPTION: Configuration to allow any host using anyHost() method, which adds the '*' origin to CORS configuration.

LANGUAGE: java
CODE:
Javalin.create(config -> {
    config.bundledPlugins.enableCors(cors -> {
        cors.addRule(it -> {
            it.anyHost();
        });
    });
});

LANGUAGE: kotlin
CODE:
Javalin.create { config ->
    config.bundledPlugins.enableCors { cors ->
        cors.addRule {
            it.anyHost()
        }
    }
}

----------------------------------------

TITLE: Implementing Custom JavalinRenderer in Java
DESCRIPTION: Java implementation of a custom JavalinRenderer class that can render templates based on file extensions.

LANGUAGE: java
CODE:
class JavalinRenderer implements FileRenderer {
    private Map<String, FileRenderer> renderers = new HashMap<>();
    public JavalinRenderer register(String extension, FileRenderer renderer) {
        renderers.put(extension, renderer);
        return this;
    }

    @Override
    public String render(String filePath, Map<String, ? extends Object> model, Context context) {
        String extension = filePath.substring(filePath.lastIndexOf(".") + 1);
        return renderers.get(extension).render(filePath, model, context);
    }
}

----------------------------------------

TITLE: Creating a JSON endpoint with Javalin
DESCRIPTION: This snippet shows how to create a JSON endpoint using Javalin, demonstrating the simplicity of the setup with just one import and a concise server configuration.

LANGUAGE: kotlin
CODE:
import io.javalin.Javalin

val someData = setOf<String>()

fun main() {
    Javalin.create() // create server
        .get("/") { ctx -> ctx.json(someData) } // attach endpoint that serves json
        .start(7000) // start server
}

----------------------------------------

TITLE: Including Plugin Card JavaScript
DESCRIPTION: Includes the JavaScript file for plugin card functionality

LANGUAGE: html
CODE:
<script>{% include plugins/pluginCard.js %}</script>

----------------------------------------

TITLE: CSS Styling for Video Chat Interface
DESCRIPTION: CSS styles defining the layout and appearance of the video chat application interface.

LANGUAGE: css
CODE:
{% include_relative snippets/main/resources/public/styles.css %}

----------------------------------------

TITLE: Configuring Travis CI for Java Project
DESCRIPTION: This snippet shows a basic Travis CI configuration for a Java project, specifying the language and multiple JDK versions to test against.

LANGUAGE: bash
CODE:
language: java
jdk:
- openjdk8
- openjdk9
- openjdk10
- openjdk11
- openjdk12

----------------------------------------

TITLE: Configuring JSON Mapping in Java
DESCRIPTION: Shows how to implement and configure a custom JsonMapper in Javalin 4 to replace the old JavalinJson functionality.

LANGUAGE: java
CODE:
config.jsonMapper(myJsonMapper);

----------------------------------------

TITLE: Setting Maven Build Final Name
DESCRIPTION: Maven configuration to set a consistent output JAR filename.

LANGUAGE: xml
CODE:
<finalName>app</finalName>

----------------------------------------

TITLE: Styling Bar Charts with CSS
DESCRIPTION: CSS styles for creating responsive bar charts to display survey results. Includes flex layout, mobile responsiveness, and styled bars with percentage indicators.

LANGUAGE: css
CODE:
.chart-flex {
    user-select: none;
    margin-top: 16px;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}
.chart-flex > * {
    width: calc(50% - 12px);
}
@media (max-width: 700px) {
    .chart-flex > * {
        width: 100%
    }
}
.bar-chart {
    border: 1px solid #ddd;
    border-radius: 5px;
    background: #fff;
    padding: 10px 60px 10px 10px;
    font-family: arial, sans-serif;
    position: relative;
}

.bar-chart > div {
    height: 28px;
    line-height: 28px;
    padding: 0 10px;
    background: #c7e6f5;
    font-size: 15px;
    border-radius: 3px;
    white-space: nowrap;
}

.bar-chart > div + div {
    margin-top: 10px;
}

.bar-chart > div::before {
    content: " ";
    position: absolute;
    width: calc(100% - 70px);
    background: rgba(0, 0, 0, 0.08);
    height: 28px;
    border-radius: 3px;
    left: 10px;
}

.bar-chart > div::after {
    content: attr(data-value);
    position: absolute;
    right: 15px;
    color: #008cbb;
}

----------------------------------------

TITLE: Styling Contributors Section in CSS
DESCRIPTION: CSS styles for the contributors section, including responsive grid layout, avatar styling, and text formatting for contributor information.

LANGUAGE: css
CODE:
.total-contributors {
    font-weight: 400;
    color: rgba(0, 0, 0, 0.3);
}

.contributors {
    width: 100%;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}

.contributors .contributor {
    display: flex;
    align-items: center;
    width: calc(33% - 16px);
    padding: 16px;
    background: #fff;
    box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    margin-bottom: 16px;
    color: rgba(0, 0, 0, 0.75);
}

.contributors .contributor img {
    display: block;
    max-width: 40px;
    border-radius: 40px;
    margin-right: 16px;
}

.contributors .contributor h4 {
    font-weight: 500;
    margin: 0;
}

.contributors .contributor .name-and-commit {
    width: calc(100% - 56px);
}

.contributors .contributor h4,
.contributors .contributor .commits {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@media (max-width: 600px) {
    .contributors .contributor {
        width: 100%;
    }
}

----------------------------------------

TITLE: Styling Bar Charts with CSS
DESCRIPTION: CSS styles for creating responsive bar charts to display survey data. Includes flexbox layout, mobile responsiveness, and styling for chart bars with labels and percentages.

LANGUAGE: CSS
CODE:
.chart-flex {
    user-select: none;
    margin-top: 16px;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}
.chart-flex > * {
    width: calc(50% - 12px);
}
@media (max-width: 700px) {
    .chart-flex > * {
        width: 100%
    }
}
.bar-chart {
    border: 1px solid #ddd;
    border-radius: 5px;
    background: #fff;
    padding: 10px 60px 10px 10px;
    font-family: arial, sans-serif;
    position: relative;
}

.bar-chart > div {
    height: 28px;
    line-height: 28px;
    padding: 0 10px;
    background: #c7e6f5;
    font-size: 15px;
    border-radius: 3px;
    white-space: nowrap;
}

.bar-chart > div + div {
    margin-top: 10px;
}

.bar-chart > div::before {
    content: " ";
    position: absolute;
    width: calc(100% - 70px);
    background: rgba(0, 0, 0, 0.08);
    height: 28px;
    border-radius: 3px;
    left: 10px;
}

.bar-chart > div::after {
    content: attr(data-value);
    position: absolute;
    right: 15px;
    color: #008cbb;
}

----------------------------------------

TITLE: Styling Community Boxes in CSS
DESCRIPTION: CSS styles for formatting community information boxes, defining their appearance including shadows, padding, colors, and typography.

LANGUAGE: css
CODE:
.community-box {
    position: relative;
    color: #444;
    display: block;
    padding: 20px;
    background: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
    margin-top: 20px;
}

.community-box h2 {
    font-size: 22px;
    margin-top: 0;
}

.community-box p {
    font-size: 14px;
}

----------------------------------------

TITLE: HTML Header Element
DESCRIPTION: HTML markup for the main page heading with a custom CSS class.

LANGUAGE: html
CODE:
<h1 class="no-margin-top">About Javalin</h1>

----------------------------------------

TITLE: Implementing User Model in Mithril
DESCRIPTION: JavaScript code for a Mithril user model with methods to fetch user data from the server.

LANGUAGE: javascript
CODE:
/*
 @package io.javalin.mithril.demo;
 */

class UserModel {

}

UserModel.list = [];
UserModel.current = null;
UserModel.fetch = function () {
    m.request("/api/users").then(function (result) {
        UserModel.list = result;
    })
};

UserModel.fetchOne = function (id) {
    m.request(`/api/users/${id}`).then(function (result) {
        UserModel.current = result;
    })
};

----------------------------------------

TITLE: Handling GET Requests in Javalin and SparkJava
DESCRIPTION: Demonstrates how to handle GET requests and set response bodies in both Javalin and SparkJava. Javalin uses a Context object, while SparkJava separates Request and Response objects.

LANGUAGE: java
CODE:
javalin.get("/path", ctx -> ctx.result("Hello, World!"));
javalin.after("/path", ctx -> ctx.result("Actually, nevermind..."));

LANGUAGE: java
CODE:
Spark.get("/path", (req, res) -> "Hello, World!");
Spark.after("/path", (req, res) -> res.body("Actually, nevermind..."));

----------------------------------------

TITLE: Configuring GitHub Actions for Java Project
DESCRIPTION: This snippet demonstrates the GitHub Actions configuration for a Java project, including matrix builds for multiple operating systems and Java versions, and steps for building with Maven.

LANGUAGE: bash
CODE:
name: Java CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java_version: [1.8, 9, 10, 11, 12, 13]
        os: [windows-latest, macOS-latest, ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java_version }}
      - name: Make Maven Wrapper executable
        if: contains(matrix.os, 'win') == false
        run: chmod +x ./mvnw
      - name: Build with Maven
        run: ./mvnw package --file pom.xml

----------------------------------------

TITLE: Styling 404 Page Layout with CSS
DESCRIPTION: CSS styles for the 404 error page layout. It uses flexbox to center content vertically and horizontally, and sets responsive image sizing.

LANGUAGE: CSS
CODE:
.not-found {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
}

.not-found img {
    width: 360px;
    max-width: calc(100% - 80px);
    display: block;
    margin: 32px 0;
}

.not-found p {
    margin: 16px 0;
}

----------------------------------------

TITLE: Javalin Application Implementation
DESCRIPTION: Main application class setting up Javalin server with endpoints for both Protocol Buffer and JSON responses

LANGUAGE: java
CODE:
package app;

import app.model.dao.FakeDao;
import app.model.objects.SensorData;
import io.javalin.Javalin;
import io.javalin.core.JavalinConfig;
import io.javalin.http.Handler;

import static app.model.mappers.RouteMapper.getSensorDataResponse;

public class MyJavalinRunner {
    public static void main(String[] args) {
        Javalin app = Javalin.create(JavalinConfig::enableCorsForAllOrigins).start();

        app.get("/pbuf", handleServeProtobuf);
        app.get("/json", handleServeJSON);

        app.exception(Exception.class, (e, ctx) -> {
            e.printStackTrace();
            ctx.status(500);
        });
    }

    public static Handler handleServeProtobuf = ctx -> {
        FakeDao dao = new FakeDao();
        SensorData sData = dao.getSensorDataFromVehicleDB();

        ctx.status(200);
        ctx.contentType("application/x-protobuf");
        ctx.result(getSensorDataResponse(sData));
    };

    public static Handler handleServeJSON = ctx -> {
        FakeDao dao = new FakeDao();
        SensorData sData = dao.getSensorDataFromVehicleDB();

        ctx.status(200);
        ctx.json(sData);
    };
}

----------------------------------------

TITLE: Tutorial Page Structure with Jekyll/Liquid
DESCRIPTION: Main template structure for the tutorials page that includes front matter configuration, notification banner, and dynamic tutorial filtering logic using Liquid templating.

LANGUAGE: html
CODE:
---
layout: default
title: Tutorials
permalink: /tutorials/
---

{% include notificationBanner.html %}

<h1 class="no-margin-top">Tutorials</h1>

{% assign tutorials = site.posts | where: "layout" , "tutorial" | sort: 'date' | reverse %}
{% assign communityTuts = tutorials | where: "official", false %}
{% assign officialTuts = tutorials | where: "official", true %}

----------------------------------------

TITLE: Configuring Gradle Dependencies
DESCRIPTION: Basic Gradle dependencies required for the project including Javalin, SLF4J, Jackson, and Protocol Buffers

LANGUAGE: groovy
CODE:
dependencies {
    implementation 'org.slf4j:slf4j-simple:1.8.0-beta4'
    implementation 'io.javalin:javalin:{{site.javalinversion}}'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2'
    implementation 'com.google.protobuf:protobuf-java:3.19.6'
}

----------------------------------------

TITLE: Implementing Startup Class for Application Initialization
DESCRIPTION: Java class for managing application startup and entrypoint selection.

LANGUAGE: java
CODE:
import com.google.inject.Inject;
import io.alzuma.AppEntrypoint;
import io.alzuma.EntrypointType;

import javax.inject.Singleton;
import java.util.Collections;
import java.util.Map;
import java.util.Optional;

@Singleton
public class Startup {
    @Inject(optional = true)
    private Map<EntrypointType, AppEntrypoint> entrypoints = Collections.emptyMap();

    public void boot(EntrypointType entrypointType, String[] args) {
        var entryPoint = Optional.ofNullable(entrypoints.get(entrypointType));
        entryPoint.orElseThrow(() -> new RuntimeException("Entrypoint not defined")).boot(args);
    }
}

----------------------------------------

TITLE: Creating a reusable test utility for ProfileGateway (Kotlin)
DESCRIPTION: A generic function to simplify setup and teardown of Javalin server for ProfileGateway tests.

LANGUAGE: kotlin
CODE:
fun testProfileGateway(testBody: (Javalin, ProfileGateway) -> Unit) {
    val server = Javalin.create().start(0)
    val gatewayClient = ProfileGateway(apiUrl = "http://localhost:${server.port()}")
    testBody(server, gatewayClient)
    server.stop()
}

----------------------------------------

TITLE: Declaring Routes without Paths in Java with Javalin
DESCRIPTION: Illustrates how to declare routes without explicit paths in Javalin, using the path() method to structure routes. It sets up CRUD operations for a user resource.

LANGUAGE: java
CODE:
app.routes {
    path("users") {
        get(userController::getAllUsers);
        post(userController::createUser);
        path(":id") {
            get(userController::getUser);
            patch(userController::updateUser);
            delete(userController::deleteUser);
        }
    }
}

----------------------------------------

TITLE: Implementing Javalin Endpoints and Controller for Real-Time Statistics
DESCRIPTION: This snippet demonstrates the main application setup, including data classes, InfluxDB connection, Javalin routes, and a controller for handling HTTP requests. It sets up endpoints for uploading statistics and retrieving aggregated data.

LANGUAGE: kotlin
CODE:
data class Statistic(val count: Int = 0, val timestamp: Long = Date().time)

data class Total(val count: Double, val sum: Double, val min: Double, val max: Double)

val influxHost = System.getenv().getOrDefault("influx.host", "influxdb")!!

val influxDB: InfluxDB by lazy { InfluxDBFactory.connect("http://$influxHost:8086", "root", "root") }

fun main(args: Array<String>) {
    val app = Javalin.create().start(7000)
    val statisticService = StatisticsService(influxDB)
    val controller = Controller(statisticService)

    app.routes {
        get("/statistics", { ctx ->
            controller.get(ctx)
        })
        post("/upload", { ctx ->
            controller.post(ctx)
        })
    }

}

class Controller(private val statisticService: StatisticsService) {
    private val asStatusCode = fun StatisticResult.(): Int {
        return if (this == StatisticResult.OK) {
            201
        } else {
            204
        }
    }

    fun post(ctx: Context) {
        val statistic = ctx.bodyAsClass(Statistic::class.java)
        val result = statisticService.create(statistic)
        ctx.status(result.asStatusCode())
    }

    fun get(ctx: Context) {
        ctx.json(statisticService.aggregated())
    }
}

----------------------------------------

TITLE: Landing Page Jekyll Structure
DESCRIPTION: The main structure of the Javalin landing page using Jekyll front matter and includes. Contains sections for framework introduction, features, sponsors, API examples, and community information.

LANGUAGE: html
CODE:
---
layout: default
splash: true
permalink: /
---

<style>{% include landing.css %}</style>

{% include landing/section-1-title-and-get-started.html
    title="<h1>A simple web framework<br>for Java and Kotlin</h1>"
    docs="View documentation"
%}

{% include landing/section-2-small-used-by.html %}

{% include landing/section-3-why-javalin.html
    title="<h1 id='why-javalin'>Why Javalin?</h1>"
    reasonRow1="..."
    reasonRow2="..."
%}

{% include landing/section-sponsors.html
    title="<h1 id='our-sponsors'>Our<br>sponsors</h1>"
    cta="Your logo here?"
%}

{% include landing/section-4-server-and-api.html
    title="<h1>Declare your server and API<br> in the same file</h1>"
    tutorials="Show me tutorials"
    docs="Show me the docs"
    brag="Creating a REST API has never been easier"
%}

{% include landing/section-5-community.html
    title="<h1 id='an-active-community'>An active community</h1>"
    paragraph="..."
%}

{% include landing/section-6-whos-using-javalin.html
    title="<h1 id='whos-using-javalin'>Who's using Javalin?</h1>"
    paragraph="Are you using Javalin? <a href='https://github.com/javalin/javalin/issues/1676'>Let us know</a>!"
%}

----------------------------------------

TITLE: Initializing Javalin Application with Routes
DESCRIPTION: Main application class that sets up Javalin instance with routes, filters, and dependencies. Demonstrates core application structure including static file handling, route definitions, and error handling.

LANGUAGE: java
CODE:
public class Application {

    // Declare dependencies
    public static BookDao bookDao;
    public static UserDao userDao;

    public static void main(String[] args) {

        // Instantiate your dependencies
        bookDao = new BookDao();
        userDao = new UserDao();

        Javalin app = Javalin.create()
            .enableStaticFiles("/public", Location.CLASSPATH)
            .start(7000);

        app.routes(() -> {
            before(Filters.stripTrailingSlashes);
            before(Filters.handleLocaleChange);
            before(LoginController.ensureLoginBeforeViewingBooks);
            get(Path.Web.INDEX, IndexController.serveIndexPage);
            get(Path.Web.BOOKS, BookController.fetchAllBooks);
            get(Path.Web.ONE_BOOK, BookController.fetchOneBook);
            get(Path.Web.LOGIN, LoginController.serveLoginPage);
            post(Path.Web.LOGIN, LoginController.handleLoginPost);
            post(Path.Web.LOGOUT, LoginController.handleLogoutPost);
        });

        app.error(404, ViewUtil.notFound);
    }
}

----------------------------------------

TITLE: Styling Bar Chart for Survey Results in HTML/CSS
DESCRIPTION: This code snippet defines the CSS styles for creating a bar chart to visualize survey results. It includes styling for the chart container, individual bars, and data labels.

LANGUAGE: html
CODE:
<style>
    .bar-chart {
        margin-top: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background: #fff;
        padding: 10px 60px 10px 10px;
        font-family: arial, sans-serif;
        position: relative;
    }

    .bar-chart > div {
        height: 28px;
        line-height: 28px;
        padding: 0 10px;
        background: #c7e6f5;
        font-size: 15px;
        border-radius: 3px;
        white-space: nowrap;
    }

    .bar-chart > div + div {
        margin-top: 10px;
    }

    .bar-chart > div::before {
        content: " ";
        position: absolute;
        width: calc(100% - 70px); /* padding x 60 x 10 */
        background: rgba(0, 0, 0, 0.08);
        height: 28px;
        border-radius: 3px;
        left: 10px;
    }

    .bar-chart > div::after {
        content: attr(data-value);
        position: absolute;
        right: 15px;
        color: #008cbb;
    }
</style>

----------------------------------------

TITLE: Setting up a Ktor server with JSON serialization
DESCRIPTION: This snippet demonstrates how to create a Ktor server with JSON serialization capability, showcasing the multiple imports required and the server setup process.

LANGUAGE: kotlin
CODE:
import com.ryanharter.ktor.moshi.moshi
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.features.ContentNegotiation
import io.ktor.response.respond
import io.ktor.routing.get
import io.ktor.routing.routing
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty

val someData = setOf<String>()

fun main(args: Array<String>) {
  val server = embeddedServer(Netty, 8080) { // create server
    install(ContentNegotiation) {
      moshi
    }
    routing { // attach endpoint
      get("/data") { // attach endpoint
        call.respond(someData) // send json
      }
    }
  }
  server.start(wait = true) // start server
}