TITLE: JCC Command Line Example - Generating Lucene Wrappers
DESCRIPTION: Example showing JCC command line usage to generate wrappers for Lucene classes, demonstrating jar inclusion, package specification, and wrapper configuration options.

LANGUAGE: bash
CODE:
python -m jcc --jar lucene.jar --jar analyzers.jar --jar snowball.jar --jar highlighter.jar --jar regex.jar --jar queries.jar --jar extensions.jar --package java.lang --package java.util --package java.io java.lang.System java.lang.Runtime java.lang.Boolean --python lucene --version 2.4.0 --files 2 --build --install

----------------------------------------

TITLE: Java vs Python Hit Iteration Comparison
DESCRIPTION: Demonstrates the difference between Java and Python syntax for iterating over search hits in Lucene.

LANGUAGE: java
CODE:
for (int i = 0; i < hits.length(); i++) {
    Document doc = hits.doc(i);
    System.out.println(hits.score(i) + " : " + doc.get("title"));
}

LANGUAGE: python
CODE:
for hit in hits:
    hit = Hit.cast_(hit)
    print hit.getScore(), ':', hit.getDocument['title']

----------------------------------------

TITLE: Java Command Line Parameter - Vector Optimization
DESCRIPTION: JVM command line parameter required to enable vectorization for KNN distance computation optimization in Java 20 or 21

LANGUAGE: Java
CODE:
--add-modules jdk.incubator.vector

----------------------------------------

TITLE: Java Class Extension in Python
DESCRIPTION: Example showing how to implement a Java class extension in Python using JCC, including both Java and Python implementation.

LANGUAGE: java
CODE:
package org.apache.pylucene.analysis;

public class PythonAnalyzer extends Analyzer {
    private long pythonObject;
    
    public void pythonExtension(long pythonObject) {
        this.pythonObject = pythonObject;
    }
}

LANGUAGE: python
CODE:
class _analyzer(PythonAnalyzer):
  def tokenStream(_self, fieldName, reader):
      class _tokenStream(PythonTokenStream):
          def __init__(self_):
              super(_tokenStream, self_).__init__()
              self_.TOKENS = ["1", "2", "3", "4", "5"]

----------------------------------------

TITLE: Java Method Reference - IndexWriter Update Documents
DESCRIPTION: New method signature introduced in Lucene 9.7.0 that allows updating multiple documents matching a query simultaneously

LANGUAGE: Java
CODE:
IndexWriter#updateDocuments(Query, Iterable)

----------------------------------------

TITLE: Handling Java Arrays in PyLucene
DESCRIPTION: Demonstrates how to work with Java arrays in PyLucene using JArray wrapper for accessing termDocs. Shows array initialization and element access.

LANGUAGE: python
CODE:
termDocs = reader.termDocs(Term("isbn", isbn))
docs = JArray('int')(1)   # allocate an int[1] array
freq = JArray('int')(1)   # allocate an int[1] array
if termDocs.read(docs, freq) == 1:
    bits.set(docs[0])     # access the array's first element

----------------------------------------

TITLE: Cloning Lucene Git Repository
DESCRIPTION: Command to clone the latest main branch of the Lucene Git repository. This allows developers to access the most recent source code for Lucene.

LANGUAGE: bash
CODE:
git clone https://github.com/apache/lucene.git

----------------------------------------

TITLE: Creating Java Arrays from Python Lists
DESCRIPTION: Shows how to create Java arrays from Python sequences using JArray constructor.

LANGUAGE: python
CODE:
# creating a Java array of double from the [1.5, 2.5] list
JArray('double')([1.5, 2.5])

----------------------------------------

TITLE: Python Array Handling with JCC
DESCRIPTION: Examples of creating and working with Java arrays from Python using JCC's JArray functionality.

LANGUAGE: python
CODE:
>>> array = JArray('int')(size)
>>> array = JArray('int')(sequence)
>>> JArray('int').cast_(obj)
>>> JArray('object').cast_(obj, Document)

----------------------------------------

TITLE: Configuring XML Query Parser Remapping in Solr
DESCRIPTION: XML configuration snippet to remap the XML Query Parser to the Extended DisMax (edismax) parser as a security measure to mitigate XXE vulnerability.

LANGUAGE: xml
CODE:
<queryParser name="xmlparser" class="solr.ExtendedDismaxQParserPlugin"/>

----------------------------------------

TITLE: Installing Temurin Java on Debian
DESCRIPTION: Commands to install Temurin Java 17 on Debian 11 systems

LANGUAGE: bash
CODE:
sudo -s
apt install wget apt-transport-https gnupg
wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | apt-key add -
echo "deb https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
apt update
apt install temurin-17-jdk

----------------------------------------

TITLE: Building and Installing JCC with Python
DESCRIPTION: Commands to build and install JCC using Python's setup tools

LANGUAGE: bash
CODE:
python setup.py build
sudo python setup.py install

----------------------------------------

TITLE: Checking out PyLucene Trunk from SVN
DESCRIPTION: Command to checkout the latest trunk version of PyLucene source code using Subversion (SVN). This will create a local copy of the repository in a directory named 'pylucene_trunk'.

LANGUAGE: shell
CODE:
svn checkout https://svn.apache.org/repos/asf/lucene/pylucene/trunk/ pylucene_trunk

----------------------------------------

TITLE: Setting up Python Virtual Environment
DESCRIPTION: Creates and activates a Python virtual environment for isolated package installation.

LANGUAGE: sh
CODE:
python3 -m venv env
source env/bin/activate
pip install -r requirements.txt

----------------------------------------

TITLE: Running Pelican Build Commands
DESCRIPTION: Basic commands for building the site with Pelican and enabling auto-reload with local server.

LANGUAGE: sh
CODE:
pelican
pelican --autoreload --listen

----------------------------------------

TITLE: Quick Build Script Usage
DESCRIPTION: Shows usage instructions for the build.sh helper script that simplifies local development.

LANGUAGE: sh
CODE:
# Usage: ./build.sh [-l] [<other pelican arguments>]
#        -l     Live build and reload source changes on localhost:8000
#        --help Show full help for options that Pelican accepts
./build.sh -l

----------------------------------------

TITLE: Installing Build Tools on Debian
DESCRIPTION: Commands to install required build tools and compilers on Debian

LANGUAGE: bash
CODE:
sudo apt install gcc-x86-64-linux-gnu g++-x86-64-linux-gnu make

----------------------------------------

TITLE: Installing Python Dependencies on Debian
DESCRIPTION: Command to install Python development packages and required tools

LANGUAGE: bash
CODE:
sudo apt install python3.9-dev python3-venv python3-setuptools

----------------------------------------

TITLE: Defining Python Package Dependencies for Pelican Project
DESCRIPTION: This snippet lists the required Python packages and their versions for a Pelican-based project. It includes core dependencies, Pelican plugins, and development tools.

LANGUAGE: plaintext
CODE:
pelican==4.5.4
Markdown==3.3.3
checksumdir>=1.2.0

# Pelican plugins
mdx-include==1.4.1
beautifulsoup4>=4.9.3

# Dev tools
invoke>=1.5.0
livereload>=2.6.3

----------------------------------------

TITLE: Installing Pelican Dependencies with pip
DESCRIPTION: Installs required Python packages for building the Lucene website using pip package manager.

LANGUAGE: sh
CODE:
pip3 install -r requirements.txt

----------------------------------------

TITLE: Checking out JCC Source Code from SVN
DESCRIPTION: Command to retrieve JCC source code from Apache SVN repository

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/lucene/pylucene/trunk/jcc jcc

----------------------------------------

TITLE: JCC File Generation Command
DESCRIPTION: Command line examples for configuring JCC file generation behavior to work around compiler limitations.

LANGUAGE: shell
CODE:
--files 2
--files 10
--files separate

----------------------------------------

TITLE: Solaris Sun Studio Build Command
DESCRIPTION: Shell command for building PyLucene on Solaris using Sun Studio C++ compiler.

LANGUAGE: shell
CODE:
$ CC=CC gmake

----------------------------------------

TITLE: Solaris Build Configuration for PyLucene Makefile
DESCRIPTION: Makefile configuration block for building PyLucene on Solaris 11.1 with Python 2.6 and Java 1.7. Specifies Python path, Ant location, and JCC parameters.

LANGUAGE: makefile
CODE:
# Solaris   (Solaris 11.1, Python 2.6, 32-bit, Java 1.7)
PREFIX_PYTHON=/usr
ANT=/usr/bin/ant
PYTHON=$(PREFIX_PYTHON)/bin/python
JCC=$(PYTHON) -m jcc.__main__ --reserved DEFAULT_TYPE
NUM_FILES=4

----------------------------------------

TITLE: Configuring Lucene Homepage Template
DESCRIPTION: Basic configuration settings for the Apache Lucene project homepage, specifying the template location and URL structure.

LANGUAGE: plaintext
CODE:
Title: Welcome to Apache Lucene
URL: index.html
save_as: index.html
Template: lucene/tlp/index