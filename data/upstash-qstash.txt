TITLE: Publishing JSON Message with Custom Header using Python
DESCRIPTION: This Python code snippet demonstrates how to use the QStash client to publish a JSON message with a custom header. It initializes the client with a token and publishes a message to a specified URL.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    headers={
        "my-header": "my-value",
    },
)

----------------------------------------

TITLE: Publishing Messages to RequestCatcher with QStash
DESCRIPTION: Specific example of sending a message to RequestCatcher demo endpoint using QStash and cURL. Shows how to test QStash functionality with a public webhook testing service.

LANGUAGE: bash
CODE:
curl -XPOST \
    -H 'Authorization: Bearer <QSTASH_TOKEN>' \
    -H "Content-type: application/json" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://firstqstashmessage.requestcatcher.com/test'

----------------------------------------

TITLE: Implementing Server-Side Background Job Initiation with QStash in Next.js
DESCRIPTION: This code snippet shows how to create a server-side route handler in Next.js that initiates a background job using QStash. It receives user data from the client, constructs the API URL for the background job, and uses QStash to publish the job.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const qstashClient = new Client({
  token: "YOUR_TOKEN",
});

export async function POST(request: Request) {
  const body = await request.json();
  const users: string[] = body.users;
  // If you know the public URL of the email API, you can use it directly
  const rootDomain = request.url.split('/').slice(0, 3).join('/');
  const emailAPIURL = `${rootDomain}/api/send-email`; // ie: https://yourapp.com/api/send-email

  // Tell QStash to start the background job.
  // For proper error handling, refer to the quick start.
  await qstashClient.publishJSON({
    url: emailAPIURL,
    body: {
      users
    }
  });

  return new Response("Job started", { status: 200 });
}

----------------------------------------

TITLE: Publishing Messages with cURL in QStash
DESCRIPTION: Example of sending a JSON message to QStash using cURL. Demonstrates how to authenticate with a QStash token and publish a message to a specified endpoint.

LANGUAGE: bash
CODE:
curl -XPOST \
    -H 'Authorization: Bearer <QSTASH_TOKEN>' \
    -H "Content-type: application/json" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://<your-api-url>'

----------------------------------------

TITLE: Implementing Background Job Logic in Next.js API Route
DESCRIPTION: This code snippet demonstrates how to create a Next.js API route that contains the actual logic for the background job. In this case, it's a function that sends emails to a list of users. This endpoint is designed to be invoked by QStash as part of the background job process.

LANGUAGE: typescript
CODE:
// This is a public API endpoint that will be invoked by QStash.
// It contains the logic for the background job and may take a long time to execute.
import { sendEmail } from "your-email-library";

export async function POST(request: Request) {
  const body = await request.json();
  const users: string[] = body.users;

  // Send emails to the users
  for (const user of users) {
    await sendEmail(user);
  }

  return new Response("Job started", { status: 200 });
}

----------------------------------------

TITLE: Publishing a Message with cURL
DESCRIPTION: This snippet demonstrates how to publish a message to QStash using cURL. It includes headers for authorization, content type, and custom QStash parameters like delay and retries.

LANGUAGE: sh
CODE:
curl -X POST "https://qstash.upstash.io/v2/publish/https://www.example.com" \
  -H "Authorization: Bearer <token>" \
  -H "Content-Type: application/json" \
  -H "Upstash-Method: POST" \
  -H "Upstash-Delay: 10s" \
  -H "Upstash-Retries: 3" \
  -H "Upstash-Forward-Custom-Header: custom-value" \
  -d '{"message":"Hello, World!"}'

----------------------------------------

TITLE: JWT Payload Structure for QStash Signature
DESCRIPTION: Details the complete payload structure of the JWT used in request signing, including issuer, subject, expiration, and other security-related claims.

LANGUAGE: json
CODE:
{
  "iss": "Upstash",
  "sub": "https://qstash-remote.requestcatcher.com/test",
  "exp": 1656580612,
  "nbf": 1656580312,
  "iat": 1656580312,
  "jti": "jwt_67kxXD6UBAk7DqU6hzuHMDdXFXfP",
  "body": "qK78N0k3pNKI8zN62Fq2Gm-_LtWkJk1z9ykio3zZvY4="
}

----------------------------------------

TITLE: Publishing a Message to an Endpoint with QStash
DESCRIPTION: Demonstrates how to publish a simple JSON message to an endpoint using QStash. The example shows how to set the authorization token and content type.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://example.com'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.publishJSON({
  url: "https://example.com",
  body: {
    hello: "world",
  },
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://example.com",
    body={
        "hello": "world",
    },
)
# Async version is also available

----------------------------------------

TITLE: Implementing Client-Side Background Job Trigger in Next.js
DESCRIPTION: This code snippet demonstrates how to create a client-side component in Next.js that triggers a background job when a button is clicked. It sends a POST request to a server endpoint to initiate the job.

LANGUAGE: tsx
CODE:
"use client"

export default function Home() {
  async function handleClick() {
    // Send a request to our server to start the background job.
    // For proper error handling, refer to the quick start.
    // Note: This can also be a server action instead of a route handler
    await fetch("/api/start-email-job", {
      method: "POST",
      body: JSON.stringify({
        users: ["a@gmail.com", "b@gmail.com", "c.gmail.com"]
      }),
    })

  }

  return (
    <main>
      <button onClick={handleClick}>Run background job</button>
    </main>
  );
}

----------------------------------------

TITLE: Processing QStash Messages in Next.js with Signature Verification
DESCRIPTION: Implements a secure endpoint for processing QStash messages with signature verification. Shows how to handle incoming messages and process them safely.

LANGUAGE: typescript
CODE:
import { verifySignatureAppRouter } from "@upstash/qstash/nextjs"

export const POST = verifySignatureAppRouter(async (req: Request) => {
  const body = await req.json()
  const { imageId } = body as { imageId: string }

  // Image processing logic, i.e. using sharp

  return new Response(`Image with id "${imageId}" processed successfully.`)
})

----------------------------------------

TITLE: Publishing JSON to URL Group with Delay and Headers in Python
DESCRIPTION: This snippet shows how to publish a JSON message to a URL group using QStash, with a 3-second delay and custom headers. It also demonstrates how to handle the response when publishing to a URL group.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
res = client.message.publish_json(
    url_group="my-url-group",
    body={
        "hello": "world",
    },
    headers={
        "test-header": "test-value",
    },
    delay="3s",
)

# When publishing to a URL group, the response is an array of messages for each URL in the group
print(res[0].message_id)

----------------------------------------

TITLE: JWT Header Structure for QStash Signature
DESCRIPTION: Shows the structure of the JWT header used in the Upstash-Signature for request verification. Specifies the algorithm as HS256 and type as JWT.

LANGUAGE: json
CODE:
{
  "alg": "HS256",
  "typ": "JWT"
}

----------------------------------------

TITLE: Initializing QStash Client
DESCRIPTION: Basic setup of the QStash client with authentication token

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({
  token: "<QSTASH_TOKEN>",
});

----------------------------------------

TITLE: Initializing and Using Synchronous QStash Client in Python
DESCRIPTION: This code demonstrates how to create and use a synchronous QStash client in Python. It initializes the client with a QStash token and publishes a JSON message.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(...)

----------------------------------------

TITLE: QStash Receiver Implementation
DESCRIPTION: Complete TypeScript implementation of a Cloudflare Worker that receives and verifies QStash webhooks.

LANGUAGE: typescript
CODE:
import { Receiver } from "@upstash/qstash";
export interface Env {
  QSTASH_CURRENT_SIGNING_KEY: string;
  QSTASH_NEXT_SIGNING_KEY: string;
}

export default {
  async fetch(
    request: Request,
    env: Env,
    ctx: ExecutionContext
  ): Promise<Response> {
    const c = new Receiver({
      currentSigningKey: env.QSTASH_CURRENT_SIGNING_KEY,
      nextSigningKey: env.QSTASH_NEXT_SIGNING_KEY,
    });

    const body = await request.text();

    const isValid = await c
      .verify({
        signature: request.headers.get("Upstash-Signature")!,
        body,
      })
      .catch((err) => {
        console.error(err);
        return false;
      });
    if (!isValid) {
      return new Response("Invalid signature", { status: 401 });
    }
    console.log("The signature was valid");

    // do work here

    return new Response("Hello World!");
  },
};

----------------------------------------

TITLE: Importing @upstash/qstash SDK in TypeScript
DESCRIPTION: This snippet demonstrates how to import the @upstash/qstash SDK in a TypeScript project. The SDK provides access to QStash API functionality.

LANGUAGE: TypeScript
CODE:
@upstash/qstash

----------------------------------------

TITLE: Authorization Header Format for QStash API
DESCRIPTION: Demonstrates the format for including the QStash authorization token in the request header for API authentication.

LANGUAGE: text
CODE:
"Authorization": "Bearer <QSTASH_TOKEN>"

----------------------------------------

TITLE: Implementing JWT Verification for QStash Webhooks in Go
DESCRIPTION: Go function to verify the JWT token received with QStash webhooks, including checks for issuer, expiration, and body hash.

LANGUAGE: go
CODE:
func verify(body []byte, tokenString, signingKey string) error {
	token, err := jwt.Parse(
		tokenString,
		func(token *jwt.Token) (interface{}, error) {
			if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
				return nil, fmt.Errorf("Unexpected signing method: %v", token.Header["alg"])
			}
			return []byte(signingKey), nil
		})

	if err != nil {
		return err
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok || !token.Valid {
		return fmt.Errorf("Invalid token")
	}

	if !claims.VerifyIssuer("Upstash", true) {
		return fmt.Errorf("invalid issuer")
	}
	if !claims.VerifyExpiresAt(time.Now().Unix(), true) {
		return fmt.Errorf("token has expired")
	}
	if !claims.VerifyNotBefore(time.Now().Unix(), true) {
		return fmt.Errorf("token is not valid yet")
	}

	bodyHash := sha256.Sum256(body)
	if claims["body"] != base64.URLEncoding.EncodeToString(bodyHash[:]) {
		return fmt.Errorf("body hash does not match")
	}

	return nil
}

----------------------------------------

TITLE: Configuring QStash Retry Policy
DESCRIPTION: Example of customizing the retry policy for QStash client with custom retry attempts and backoff function. Sets 3 retries with exponential backoff calculation.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({
  token: "<QSTASH_TOKEN>",
  retry: {
    retries: 3,
    backoff: retry_count => 2 ** retry_count * 20,
  },
});

----------------------------------------

TITLE: QStash Signature Verification in TypeScript
DESCRIPTION: Implementation of QStash signature verification using the official TypeScript SDK. Creates a Receiver instance with signing keys and verifies request signatures.

LANGUAGE: typescript
CODE:
import { Receiver } from "@upstash/qstash";

const receiver = new Receiver({
  currentSigningKey: "YOUR_CURRENT_SIGNING_KEY",
  nextSigningKey: "YOUR_NEXT_SIGNING_KEY",
});

// ... in your request handler

const signature = req.headers["Upstash-Signature"];
const body = req.body;

const isValid = receiver.verify({
  body,
  signature,
  url: "YOUR-SITE-URL",
});

----------------------------------------

TITLE: QStash Signature Verification in Python
DESCRIPTION: Implementation of QStash signature verification using the official Python SDK. Initializes a Receiver object and verifies request signatures with provided keys.

LANGUAGE: python
CODE:
from qstash import Receiver

receiver = Receiver(
    current_signing_key="YOUR_CURRENT_SIGNING_KEY",
    next_signing_key="YOUR_NEXT_SIGNING_KEY",
)

# ... in your request handler

signature, body = req.headers["Upstash-Signature"], req.body

receiver.verify(
    body=body,
    signature=signature,
    url="YOUR-SITE-URL",
)

----------------------------------------

TITLE: Setting Custom Retry Count in QStash Requests
DESCRIPTION: Examples of how to set a custom retry count using the Upstash-Retries header in cURL, TypeScript, and Python. This allows limiting the number of retry attempts for a specific request.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Retries: 2" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://my-api...'

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  retries: 2,
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    retries=2,
)

----------------------------------------

TITLE: Scheduling to a Queue in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to create a schedule that adds an item to a specified queue in QStash at a scheduled time.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.create({
  destination: "https://example.com",
  cron: "* * * * *",
  queueName: "yourQueueName",
});

----------------------------------------

TITLE: Initializing and Using QStash Receiver in TypeScript
DESCRIPTION: This snippet shows how to initialize a QStash Receiver and use it to verify the signature of incoming messages. It requires the @upstash/qstash package and the signing keys from your QStash configuration. The verify method checks the signature against the message body and URL.

LANGUAGE: typescript
CODE:
import { Receiver } from "@upstash/qstash";

const receiver = new Receiver({
  currentSigningKey: "YOUR_CURRENT_SIGNING_KEY",
  nextSigningKey: "YOUR_NEXT_SIGNING_KEY",
});

// ... in your request handler

const signature = req.headers["Upstash-Signature"];
const body = req.body;

const isValid = receiver.verify({
  body,
  signature,
  url: "YOUR-SITE-URL",
});

----------------------------------------

TITLE: Publishing Message with Deduplication ID in QStash
DESCRIPTION: This snippet demonstrates how to publish a message to QStash with a custom deduplication ID using cURL, TypeScript, and Python. The deduplication ID is specified using the 'Upstash-Deduplication-Id' header or a corresponding parameter in the client libraries.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Deduplication-Id: abcdef" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://my-api...'

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  deduplicationId: "abcdef",
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    deduplication_id="abcdef",
)

----------------------------------------

TITLE: Publishing Messages to a FIFO Queue with QStash
DESCRIPTION: Shows how to enqueue messages in FIFO (First-In-First-Out) order using QStash queues. This ensures messages are processed in the order they were received.

LANGUAGE: shell
CODE:
curl -XPOST -H 'Authorization: Bearer XXX' \
            -H "Content-type: application/json" \
            'https://qstash.upstash.io/v2/enqueue/my-queue/https://example.com' \
            -d '{"message":"Hello, World!"}'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });

const queue = client.queue({
  queueName: "my-queue"
})

await queue.enqueueJSON({
  url: "https://example.com",
  body: {
    "Hello": "World"
  }
})

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.enqueue_json(
    queue="my-queue",
    url="https://example.com",
    body={
        "Hello": "World",
    },
)
# Async version is also available

----------------------------------------

TITLE: Retrieving a QStash Schedule by ID in Python
DESCRIPTION: This code demonstrates how to retrieve a specific QStash schedule using its ID. It initializes a QStash client and uses the get method to fetch schedule details.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
schedule = client.schedule.get("<schedule-id>")

print(schedule.cron)

----------------------------------------

TITLE: Batching Messages with Destinations
DESCRIPTION: Examples of sending multiple messages to different destinations simultaneously using QStash's batch endpoint. Demonstrates how to send messages to multiple unique endpoints in a single request.

LANGUAGE: shell
CODE:
curl -XPOST https://qstash.upstash.io/v2/batch \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -d '
     [
      {
        "destination": "https://example.com/destination1"
      },
      {
        "destination": "https://example.com/destination2"
      }
     ]'

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

// Each message is the same as the one you would send with the publish endpoint
const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.batchJSON([
  {
    url: "https://example.com/destination1",
  },
  {
    url: "https://example.com/destination2",
  },
]);

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.message.batch_json(
    [
        {"url": "https://example.com/destination1"},
        {"url": "https://example.com/destination2"},
    ]
)

----------------------------------------

TITLE: Implementing Relative Delay with QStash
DESCRIPTION: Examples of sending delayed messages using relative time durations through QStash. The delay is specified using the Upstash-Delay header or delay parameter in different client libraries.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Delay: 1m" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://my-api...'

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  delay: 60,
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    headers={
        "test-header": "test-value",
    },
    delay="60s",
)

----------------------------------------

TITLE: Batch Publishing Messages with QStash
DESCRIPTION: Demonstrates how to publish multiple messages in a single request using QStash's batch feature. This is useful for efficiently sending multiple messages at once.

LANGUAGE: shell
CODE:
curl -XPOST https://qstash.upstash.io/v2/batch \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -d '
     [
      {
        "destination": "https://example.com/destination1"
      },
      {
        "destination": "https://example.com/destination2"
      }
     ]'

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.batchJSON([
  {
    url: "https://example.com/destination1",
  },
  {
    url: "https://example.com/destination2",
  },
]);

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.batch_json(
    [
        {
            "url": "https://example.com/destination1",
        },
        {
            "url": "https://example.com/destination2",
        },
    ]
)
# Async version is also available

----------------------------------------

TITLE: Retrieving URL Group Details in QStash
DESCRIPTION: Shows how to fetch details of a specific URL group by its name. Returns the group name and associated endpoints.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
url_group = client.url_group.get("my-url-group")

print(url_group.name, url_group.endpoints)

----------------------------------------

TITLE: Enqueueing Messages in QStash Queue
DESCRIPTION: Examples of adding messages to a QStash queue using different programming languages. The queue ensures FIFO (First-In-First-Out) message delivery with automatic retry handling.

LANGUAGE: bash
CODE:
curl -XPOST -H 'Authorization: Bearer XXX' \
            -H "Content-type: application/json" \
  'https://qstash.upstash.io/v2/enqueue/my-queue/https://example.com' -d '{"message":"Hello, World!"}'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });

const queue = client.queue({
  queueName: "my-queue"
})

await queue.enqueueJSON({
  url: "https://example.com",
  body: {
    "Hello": "World"
  }
})

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.enqueue_json(
    queue="my-queue",
    url="https://example.com",
    body={
        "Hello": "World",
    },
)

----------------------------------------

TITLE: Setting RatePerSecond Limit in QStash with TypeScript
DESCRIPTION: This snippet demonstrates how to set a rate limit of 10 calls per second using the QStash client in TypeScript. It uses the publishJSON method with flowControl options.

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });

await client.publishJSON({
    url: "https://example.com",
    body: { hello: "world" },
    flowControl: { key: "USER_GIVEN_KEY", ratePerSecond: 10 },
});

----------------------------------------

TITLE: Handling Callback in Next.js
DESCRIPTION: This snippet shows how to handle a QStash callback in a Next.js API route. It includes signature verification and decoding of the base64-encoded response body.

LANGUAGE: javascript
CODE:
// pages/api/callback.js

import { verifySignature } from "@upstash/qstash/nextjs";

function handler(req, res) {
  // responses from qstash are base64-encoded
  const decoded = atob(req.body.body);
  console.log(decoded);

  return res.status(200).end();
}

export default verifySignature(handler);

export const config = {
  api: {
    bodyParser: false,
  },
};

----------------------------------------

TITLE: Pausing and Resuming a Queue in QStash using Python
DESCRIPTION: This snippet illustrates how to pause and resume a queue using the QStash Python client. It creates a queue, pauses it, checks its status, and then resumes it. Note that resuming or creating a queue may take up to a minute.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")

queue_name = "upstash-queue"
client.queue.upsert(queue_name, parallelism=1)

client.queue.pause(queue_name)

queue = client.queue.get(queue_name)
print(queue.paused) # prints True

client.queue.resume(queue_name)

----------------------------------------

TITLE: Creating a QStash Schedule in TypeScript
DESCRIPTION: This snippet demonstrates how to create a schedule in QStash using TypeScript. It creates a client instance and sets up a schedule to publish a message every minute to a specified URL.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.create({
  destination: "https://example.com",
  cron: "* * * * *",
});

----------------------------------------

TITLE: Creating a QStash Schedule in Python
DESCRIPTION: This snippet shows how to create a schedule in QStash using Python. It initializes a QStash client and creates a schedule to publish a message every minute to a specified URL.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.schedule.create(
    destination="https://example.com",
    cron="* * * * *",
)

----------------------------------------

TITLE: Using Retry-After Headers in QStash
DESCRIPTION: Examples of how to use Retry-After headers to specify custom retry timing in QStash. This allows for fine-grained control over retry scheduling, useful for rate-limited APIs.

LANGUAGE: plaintext
CODE:
Retry-After: 0                             // Next retry will be scheduled immediately without any delay.
Retry-After: 10                            // Next retry will be scheduled after a 10-second delay.
Retry-After: 6m5s                          // Next retry will be scheduled after 6 minutes 5 seconds delay.
Retry-After: Sun, 27 Jun 2024 12:16:24 GMT // Next retry will be scheduled for the specified date, within the allowable limits.

----------------------------------------

TITLE: Queue Retrieval API Response
DESCRIPTION: This snippet shows the expected JSON response when retrieving a queue. It includes creation time, update time, queue name, parallelism, and lag information.

LANGUAGE: json
CODE:
{
 
  "createdAt": 1623345678001,
  "updatedAt": 1623345678001,
  "name": "my-queue",
  "parallelism" : 5, 
  "lag" : 100
}

----------------------------------------

TITLE: Publishing a Message with Callback using cURL
DESCRIPTION: This snippet demonstrates how to publish a message to QStash with a callback URL using cURL. It includes setting the necessary headers and sending JSON data.

LANGUAGE: bash
CODE:
curl -X POST \
  https://qstash.upstash.io/v2/publish/https://my-api... \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer <QSTASH_TOKEN>' \
  -H 'Upstash-Callback: <CALLBACK_URL>' \
  -d '{ "hello": "world" }'

----------------------------------------

TITLE: Publishing a Message with Callback using TypeScript
DESCRIPTION: This snippet shows how to use the QStash client in TypeScript to publish a JSON message with a callback URL. It requires the @upstash/qstash package.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  callback: "https://my-callback...",
});

----------------------------------------

TITLE: Configuring Queue Parallelism
DESCRIPTION: Examples showing how to set up and configure parallelism for QStash queues. This allows controlling the number of concurrent message deliveries.

LANGUAGE: bash
CODE:
curl -XPOST https://qstash.upstash.io/v2/queues/ \
  -H "Authorization: Bearer <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "queueName": "my-queue", 
    "parallelism": 5,
  }'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });

const queue = client.queue({
  queueName: "my-queue"
})

await queue.upsert({
  parallelism: 1,
})

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.queue.upsert("my-queue", parallelism=5)

----------------------------------------

TITLE: Retrieving Messages with Python
DESCRIPTION: HTTP GET request to retrieve a message by ID using Python requests library. Requires Bearer token authentication.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.get(
  'https://qstash.upstash.io/v2/messages/msg_123',
  headers=headers
)

----------------------------------------

TITLE: Publishing JSON with Delay and Headers
DESCRIPTION: Demonstrates how to publish a JSON message to a URL with a 3-second delay and custom headers using the QStash client.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  headers: { "test-header": "test-value" },
  delay: "3s",
});

----------------------------------------

TITLE: Publishing JSON to URL with Delay and Headers in Python
DESCRIPTION: This snippet demonstrates how to publish a JSON message to a specific URL using QStash, with a 3-second delay and custom headers.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
res = client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    headers={
        "test-header": "test-value",
    },
    delay="3s",
)

print(res.message_id)

----------------------------------------

TITLE: Initializing and Using Asynchronous QStash Client in Python
DESCRIPTION: This snippet illustrates how to create and use an asynchronous QStash client in Python. It sets up an async function to initialize the client and publish a JSON message.

LANGUAGE: python
CODE:
import asyncio

from qstash import AsyncQStash


async def main():
    client = AsyncQStash("<QSTASH_TOKEN>")
    await client.message.publish_json(...)


asyncio.run(main())

----------------------------------------

TITLE: Cancelling a QStash Message using Python
DESCRIPTION: This snippet demonstrates how to cancel a QStash message using Python. It utilizes the requests library to send a DELETE request to the QStash API endpoint with the message ID and authorization token.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.delete(
  'https://qstash.upstash.io/v2/messages/msg_123', 
  headers=headers
)

----------------------------------------

TITLE: Publishing with Content-Based Deduplication
DESCRIPTION: Shows how to enable content-based deduplication when publishing messages to prevent duplicate processing.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  contentBasedDeduplication: true,
});

----------------------------------------

TITLE: Publishing to URL Groups
DESCRIPTION: Shows how to publish a message to a URL group with delay and headers. URL groups allow sending the same message to multiple endpoints simultaneously.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  urlGroup: "my-url-group",
  body: { hello: "world" },
  headers: { "test-header": "test-value" },
  delay: "3s",
});

// When publishing to a URL Group, the response is an array of messages for each URL in the URL Group
console.log(res[0].messageId);

----------------------------------------

TITLE: Creating a QStash Schedule with 5-Minute Interval in Python
DESCRIPTION: This snippet demonstrates how to create a QStash schedule that runs every 5 minutes. It initializes a QStash client with a token and creates a schedule with a specified destination URL and cron expression.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
schedule_id = client.schedule.create(
    destination="https://my-api...",
    cron="*/5 * * * *",
)

print(schedule_id)

----------------------------------------

TITLE: Sending Batch Messages with cURL in Shell
DESCRIPTION: This snippet demonstrates how to send multiple messages in a single request to the Upstash QStash batch API endpoint using cURL. It includes examples of sending to different destinations, setting headers, and specifying message bodies.

LANGUAGE: shell
CODE:
curl -XPOST https://qstash.upstash.io/v2/batch   -H "Authorization: Bearer XXX" \
    -H "Content-Type: application/json" \
    -d '
    [
      {
          "destination": "myUrlGroup",
          "headers":{
            "Upstash-Delay":"5s",
            "Upstash-Forward-Hello":"123456"
          },
          "body": "Hello World"
      },
      {
          "queue": "test",
          "destination": "https://example.com/destination",
          "headers":{
            "Upstash-Forward-Hello":"789"
          }
      },
      {
          "destination": "https://example.com/destination1",
          "headers":{
            "Upstash-Delay":"7s",
            "Upstash-Forward-Hello":"789"
          }
      },
      {
          "destination": "https://example.com/destination2",
          "headers":{
            "Upstash-Delay":"9s",
            "Upstash-Forward-Hello":"again"
          }
      }
    ]'

----------------------------------------

TITLE: Publishing HTML Content
DESCRIPTION: Demonstrates how to publish HTML content instead of JSON using the QStash client with appropriate content-type header.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publish({
  url: "https://my-api...",
  body: "<html><body><h1>Hello World</h1></body></html>",
  headers: {
    "Content-Type": "text/html",
  },
});

----------------------------------------

TITLE: Batching Messages with URL Groups
DESCRIPTION: Examples showing how to batch messages using URL Groups in QStash. Demonstrates mixing URL Group destinations with regular URL destinations in batch requests.

LANGUAGE: shell
CODE:
curl -XPOST https://qstash.upstash.io/v2/batch \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -d '
     [
      {
        "destination": "myUrlGroup"
      },
      {
        "destination": "https://example.com/destination2"
      }
     ]'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });

// Each message is the same as the one you would send with the publish endpoint
const res = await client.batchJSON([
  {
    urlGroup: "myUrlGroup",
  },
  {
    url: "https://example.com/destination2",
  },
]);

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.message.batch_json(
    [
        {"url_group": "my-url-group"},
        {"url": "https://example.com/destination2"},
    ]
)

----------------------------------------

TITLE: Publishing a Message with Failure Callback using Python
DESCRIPTION: This snippet demonstrates how to use the QStash client in Python to publish a JSON message with a failure callback URL. It requires the qstash package.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    failure_callback="https://my-callback...",
)

----------------------------------------

TITLE: Paginated DLQ Query with Cursor
DESCRIPTION: cURL command demonstrating how to paginate through DLQ messages using a cursor parameter.

LANGUAGE: sh
CODE:
curl https://qstash.upstash.io/v2/dlq?cursor=xxx \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Handling Daily Rate Limit Error in TypeScript
DESCRIPTION: This snippet demonstrates how to catch and handle a daily rate limit error when making a publish request using the QStash client. It uses the QstashDailyRatelimitError to identify the specific error type and provides access to the reset time.

LANGUAGE: typescript
CODE:
import { QstashDailyRatelimitError } from "@upstash/qstash";

try {
  // Example of a publish request that could hit the daily rate limit
  const result = await client.publishJSON({
    url: "https://my-api...",
    // or urlGroup: "the name or id of a url group"
    body: {
      hello: "world",
    },
  });
} catch (error) {
  if (error instanceof QstashDailyRatelimitError) {
    console.log("Daily rate limit exceeded. Retry after:", error.reset);
    // Implement retry logic or notify the user
  } else {
    console.error("An unexpected error occurred:", error);
  }
}

----------------------------------------

TITLE: Retrieving Queue Information
DESCRIPTION: Examples demonstrating how to retrieve queue configuration and status information using the QStash API.

LANGUAGE: bash
CODE:
curl https://qstash.upstash.io/v2/queues/my-queue \
  -H "Authorization: Bearer <token>"

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });

const queue = client.queue({
  queueName: "my-queue"
})

const res = await queue.get()

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.queue.get("my-queue")

----------------------------------------

TITLE: Publishing Messages with Failure Callbacks - Python
DESCRIPTION: Example of publishing a JSON message to QStash with a failure callback URL using the Python client. Uses the qstash Python library.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    failure_callback="https://my-callback...",
)

----------------------------------------

TITLE: Deleting Multiple DLQ Messages using cURL
DESCRIPTION: Example cURL command to delete multiple messages from the DLQ. It sends a DELETE request with authentication token and a JSON payload containing the list of DLQ message IDs to remove.

LANGUAGE: sh
CODE:
curl -XDELETE https://qstash.upstash.io/v2/dlq \
  -H "Authorization: Bearer <token>" \
  -H "Content-Type: application/json" \
  -d '{
     "dlqIds": ["11111-0", "22222-0", "33333-0"]
    }'

----------------------------------------

TITLE: Creating URL Groups and Endpoints with QStash Client in TypeScript
DESCRIPTION: This TypeScript code snippet uses the QStash Client to create a URL Group and add endpoints to it. It initializes the client with a token and uses the urlGroups.addEndpoints method to add multiple endpoints to a specified URL Group.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const urlGroups = client.urlGroups;
await urlGroups.addEndpoints({
  name: "urlGroupName",
  endpoints: [
    { name: "endpoint1", url: "https://example.com" },
    { name: "endpoint2", url: "https://somewhere-else.com" },
  ],
});

----------------------------------------

TITLE: Scheduling to a URL Group in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to create a schedule for a URL group in QStash. It uses either the URL group name or its ID as the destination.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.create({
  destination: "urlGroupName",
  cron: "* * * * *",
});

----------------------------------------

TITLE: Canceling Multiple Messages in Bulk in QStash with TypeScript
DESCRIPTION: This snippet illustrates how to cancel multiple messages at once or cancel all messages in QStash. It uses the @upstash/qstash client library and requires a valid QStash token. The code demonstrates both deleting specific messages and deleting all messages.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });

// deleting two messages at once
await client.messages.deleteMany([
  "message-id-1",
  "message-id-2",
])


// deleting all messages
await client.messages.deleteAll()

----------------------------------------

TITLE: Handling Burst Rate Limit Error in TypeScript
DESCRIPTION: This code example shows how to handle a burst rate limit error when making a publish request using the QStash client. It uses the QstashRatelimitError to identify the specific error type and provides access to the reset time for implementing backoff strategies.

LANGUAGE: typescript
CODE:
import { QstashRatelimitError } from "@upstash/qstash";

try {
  // Example of a request that could hit the burst rate limit
  const result = await client.publishJSON({
    url: "https://my-api...",
    // or urlGroup: "the name or id of a url group"
    body: {
      hello: "world",
    },
  });
} catch (error) {
  if (error instanceof QstashRatelimitError) {
    console.log("Burst rate limit exceeded. Retry after:", error.reset);
    // Implement exponential backoff or delay before retrying
  } else {
    console.error("An unexpected error occurred:", error);
  }
}

----------------------------------------

TITLE: Creating URL Groups and Endpoints with QStash REST API using cURL
DESCRIPTION: This cURL command demonstrates how to create a URL Group and add endpoints to it using the QStash REST API. It sends a POST request to the QStash API endpoint with the URL Group name and endpoint details in the request body.

LANGUAGE: bash
CODE:
curl -XPOST https://qstash.upstash.io/v2/topics/:urlGroupName/endpoints \
  -H "Authorization: Bearer <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "endpoints": [
      {
        "name": "endpoint1",
        "url": "https://example.com"
      },
      {
        "name": "endpoint2",
        "url": "https://somewhere-else.com"
      }
    ]
  }'

----------------------------------------

TITLE: Publishing with Callback URLs
DESCRIPTION: Demonstrates publishing a message with callback URLs for success and failure scenarios, using GET method instead of default POST.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  callback: "https://my-callback...",
  failureCallback: "https://my-failure-callback...",
  method: "GET",
});

----------------------------------------

TITLE: Retrieving Paginated Logs with Cursor in TypeScript using QStash
DESCRIPTION: This snippet demonstrates how to retrieve all logs using pagination with a cursor. It iterates through the results, accumulating logs until there are no more pages.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const logs = [];
let cursor = null;
while (true) {
  const res = await client.logs({ cursor });
  logs.push(...res.logs);
  cursor = res.cursor;
  if (!cursor) {
    break;
  }
}

----------------------------------------

TITLE: QStash Events API Response Example
DESCRIPTION: Example JSON response from the QStash events API showing event details including message ID, state, and content

LANGUAGE: json
CODE:
{
  "cursor": "1686652644442-12",
  "events":[
    {
      "time": "1686652644442",
      "messageId": "msg_123",
      "state": "delivered",
      "url": "https://example.com",
      "header": { "Content-Type": [ "application/x-www-form-urlencoded" ] },
      "body": "bWVyaGFiYSBiZW5pbSBhZGltIHNhbmNhcg=="
    }
  ] 
}

----------------------------------------

TITLE: Creating 5-Minute Interval Schedule with QStash
DESCRIPTION: Demonstrates how to create a schedule that runs every 5 minutes using the QStash client. Requires a QStash token for authentication.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.create({
  destination: "https://my-api...",
  cron: "*/5 * * * *",
});

----------------------------------------

TITLE: Configuring Retries
DESCRIPTION: Shows how to configure the number of retry attempts for a message. The maximum retries depend on the QStash plan.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  retries: 1,
});

----------------------------------------

TITLE: Retrieving All DLQ Messages with Pagination in TypeScript
DESCRIPTION: This snippet shows how to retrieve all messages from the QStash Dead Letter Queue using pagination with a cursor. It iterates through the pages until all messages are fetched.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client("<QSTASH_TOKEN>");
const dlq = client.dlq;
const all_messages = [];
let cursor = null;
while (true) {
  const res = await dlq.listMessages({ cursor });
  all_messages.push(...res.messages);
  cursor = res.cursor;
  if (!cursor) {
    break;
  }
}

----------------------------------------

TITLE: Publishing Chat Completion Request with QStash and OpenAI
DESCRIPTION: Example showing how to publish a single chat completion request to OpenAI through QStash. Demonstrates setting up the client and making an asynchronous request with callback URL.

LANGUAGE: javascript
CODE:
import { Client, upstash } from "@upstash/qstash";

const client = new Client({
    token: "<QSTASH_TOKEN>",
});

const result = await client.publishJSON({
    api: { name: "llm", provider: openai({ token: "_OPEN_AI_TOKEN_"}) },
    body: {
        model: "gpt-3.5-turbo",
        messages: [
            {
            role: "user",
            content: "Write a hello world program in Rust.",
            },
        ],
    },
    callback: "https://abc.requestcatcher.com/",
});

console.log(result);

LANGUAGE: python
CODE:
from qstash import QStash
from qstash.chat import upstash

q = QStash("<QSTASH_TOKEN>")

result = q.message.publish_json(
    api={"name": "llm", "provider": openai("<OPENAI_API_KEY>")},
    body={
        "model": "gpt-3.5-turbo",
        "messages": [
            {
                "role": "user",
                "content": "Write a hello world program in Rust.",
            }
        ],
    },
    callback="https://abc.requestcatcher.com/",
)

print(result)

----------------------------------------

TITLE: Creating Hourly Schedule with Callbacks
DESCRIPTION: Shows how to create an hourly schedule with success and failure callback URLs. The schedule will notify the specified endpoints about the execution result.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.create({
  destination: "https://my-api...",
  cron: "0 * * * *",
  callback: "https://my-callback...",
  failureCallback: "https://my-failure-callback...",
});

----------------------------------------

TITLE: Publishing with Timeout
DESCRIPTION: Demonstrates setting a timeout value for URL calls. The timeout is specified in seconds and controls how long QStash waits for a response.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  timeout: "30s" // 30 seconds timeout
});

----------------------------------------

TITLE: Understanding the Upstash-Retried Header in QStash
DESCRIPTION: Explanation of the Upstash-Retried header added by QStash to requests. This header indicates the number of retry attempts for a given request.

LANGUAGE: plaintext
CODE:
Upstash-Retried: 0 // This is the first attempt
Upstash-Retried: 1 // This request has been sent once before and now is the second attempt
Upstash-Retried: 2 // This request has been sent twice before and now is the third attempt

----------------------------------------

TITLE: URL Groups Mermaid Diagram
DESCRIPTION: A Mermaid diagram illustrating the flow of messages from URL Groups to multiple endpoints, showing how messages are fanned out to subscribed endpoints with individual task queues.

LANGUAGE: mermaid
CODE:
[![](https://mermaid.ink/img/pako:eNp1kl1rgzAUhv9KyOWoddXNtrkYVNdf0F0U5ijRHDVMjctHoRT_-2KtaztUQeS8j28e8JxxKhhggpWmGt45zSWtnKMX13GN7PX59IUc5w19iIanBDUmKbkq-qwfXuKdSVQqeQLssK1ZI3itVQ9dekdzdO6Ja9ntKKq-DxtEoP4xYGCIr-OOGCoOG4IYlPwIcqBu0V0XQRK0PE0w9lyCvP1-iB1n1CgcNwofjcJpo_Cua8ooHDWadIrGnaJHp2jaKbrrmnKK_jl1d9s98AxXICvKmd2fy8-MsS6gghgT-5oJCUrH2NKWNA2zi7BlXAuJSUZLBTNMjRa7U51ioqWBAbpu4R9VCsrAfnTG-tR0u5pzpW1lKuqM593cyNKOC60bRVy3i-c514VJ5qmoXMVZQaUujuvADbxgRT0fgqVPX32fpclivcq8l0XGls8Lj-K2bX8Bx2nzPg)](https://mermaid.live/edit#pako:eNp1kl1rgzAUhv9KyOWoddXNtrkYVNdf0F0U5ijRHDVMjctHoRT_-2KtaztUQeS8j28e8JxxKhhggpWmGt45zSWtnKMX13GN7PX59IUc5w19iIanBDUmKbkq-qwfXuKdSVQqeQLssK1ZI3itVQ9dekdzdO6Ja9ntKKq-DxtEoP4xYGCIr-OOGCoOG4IYlPwIcqBu0V0XQRK0PE0w9lyCvP1-iB1n1CgcNwofjcJpo_Cua8ooHDWadIrGnaJHp2jaKbrrmnKK_jl1d9s98AxXICvKmd2fy8-MsS6gghgT-5oJCUrH2NKWNA2zi7BlXAuJSUZLBTNMjRa7U51ioqWBAbpu4R9VCsrAfnTG-tR0u5pzpW1lKuqM593cyNKOC60bRVy3i-c514VJ5qmoXMVZQaUujuvADbxgRT0fgqVPX32fpclivcq8l0XGls8Lj-K2bX8Bx2nzPg)

----------------------------------------

TITLE: Retrieving Schedule Details
DESCRIPTION: Shows how to fetch details of a specific schedule using its ID.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });

const res = await client.schedules.get("scheduleId");
console.log(res.cron);

----------------------------------------

TITLE: Publishing Message with Timeout in Python
DESCRIPTION: This example shows how to set a timeout value when publishing a message using QStash. The timeout is specified using the 'Upstash-Timeout' header.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    timeout="30s",
)

----------------------------------------

TITLE: Adding Helicone Analytics to Anthropic Requests
DESCRIPTION: Example of incorporating Helicone analytics into Anthropic LLM requests for usage monitoring and tracking.

LANGUAGE: typescript
CODE:
await client.publishJSON({
  api: {
    name: "llm",
    provider: anthropic({ token: "<ANTHROPIC_TOKEN>" }),
    analytics: { name: "helicone", token: process.env.HELICONE_API_KEY! },
  },
  body: { model: "claude-3-5-sonnet-20241022", messages: [{ role: "user", content: "Hello!" }] },
  callback: "https://example.com/callback",
});

----------------------------------------

TITLE: Creating a Queue with Parallelism in QStash using Python
DESCRIPTION: This snippet demonstrates how to create a queue with a specified parallelism using the QStash Python client. It initializes the client, sets up a queue name, and creates or updates the queue with a parallelism of 2.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")

queue_name = "upstash-queue"
client.queue.upsert(queue_name, parallelism=2)

print(client.queue.get(queue_name))

----------------------------------------

TITLE: Listing All Schedules
DESCRIPTION: Demonstrates how to retrieve a list of all configured schedules.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const allSchedules = await client.schedules.list();
console.log(allSchedules);

----------------------------------------

TITLE: Batching Messages with Queues
DESCRIPTION: Examples of batch publishing messages to different queues in QStash. Shows how to specify queue names and destinations for multiple messages in a single batch request.

LANGUAGE: shell
CODE:
curl -XPOST https://qstash.upstash.io/v2/batch \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -d '
     [
      {
        "queue": "my-queue",
        "destination": "https://example.com/destination1"
      },
      {
        "queue": "my-second-queue",
        "destination": "https://example.com/destination2"
      }
     ]'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });

const res = await client.batchJSON([
  {
    queueName: "my-queue",
    url: "https://example.com/destination1",
  },
  {
    queueName: "my-second-queue",
    url: "https://example.com/destination2",
  },
]);

LANGUAGE: python
CODE:
from upstash_qstash import QStash
from upstash_qstash.message import BatchRequest

qstash = QStash("<QSTASH_TOKEN>")

messages = [
    BatchRequest(
        queue="my-queue",
        url="https://httpstat.us/200",
        body=f"hi 1",
        retries=0
    ),
    BatchRequest(
        queue="my-second-queue",
        url="https://httpstat.us/200",
        body=f"hi 2",
        retries=0
    ),
]

qstash.message.batch(messages)

----------------------------------------

TITLE: Creating URL Group Schedule
DESCRIPTION: Example of creating a schedule that runs every minute for a URL group instead of a single destination.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.create({
  destination: "my-url-group",
  cron: "* * * * *",
});

----------------------------------------

TITLE: Deleting a Queue in QStash using Python
DESCRIPTION: This code snippet shows how to delete a queue using the QStash Python client. It initializes the client with a token and uses the delete method to remove a specified queue.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")

queue_name = "upstash-queue"
client.queue.delete(queue_name)

----------------------------------------

TITLE: Creating a QStash Schedule with Callback URLs in Python
DESCRIPTION: This code creates a QStash schedule that runs every hour and includes callback URLs for success and failure cases. It demonstrates how to set up more advanced scheduling configurations.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.schedule.create(
    destination="https://my-api...",
    cron="0 * * * *",
    callback="https://my-callback...",
    failure_callback="https://my-failure-callback...",
)

----------------------------------------

TITLE: Setting RatePerSecond Limit in QStash with cURL
DESCRIPTION: This cURL command sets a rate limit of 10 calls per second using HTTP headers. It demonstrates how to use the Upstash-Flow-Control-Key and Upstash-Flow-Control-Value headers to implement flow control.

LANGUAGE: bash
CODE:
curl -XPOST -H 'Authorization: Bearer XXX' \
            -H "Content-type: application/json" \
            -H "Upstash-Flow-Control-Key:USER_GIVEN_KEY"  \
            -H "Upstash-Flow-Control-Value:Rate=10" \
           'https://qstash.upstash.io/v2/publish/https://example.com' \ 
            -d '{"message":"Hello, World!"}'

----------------------------------------

TITLE: Creating Schedule with Custom ID
DESCRIPTION: Shows how to create or overwrite a schedule with a user-defined schedule ID. Existing schedules with the same ID will be replaced.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.create({
  destination: "https://example.com",
  scheduleId: "USER_PROVIDED_SCHEDULE_ID",
  cron: "* * * * *",
});

----------------------------------------

TITLE: Deleting URL Group in QStash
DESCRIPTION: Demonstrates how to delete an entire URL group by its name. This operation removes the group and all associated endpoints.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.url_group.delete("my-url-group")

----------------------------------------

TITLE: Creating a QStash Schedule for a URL Group in Python
DESCRIPTION: This snippet shows how to create a QStash schedule that targets a URL group instead of a single URL. It sets up a schedule to run every hour on a specified URL group.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.schedule.create(
    destination="my-url-group",
    cron="0 * * * *",
)

----------------------------------------

TITLE: Setting Parallelism Limit in QStash with TypeScript
DESCRIPTION: This TypeScript snippet shows how to set a parallelism limit of 10 concurrent calls using the QStash client. It uses the publishJSON method with flowControl options specifying the parallelism parameter.

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });

await client.publishJSON({
    url: "https://example.com",
    body: { hello: "world" },
    flowControl: { key: "USER_GIVEN_KEY", parallelism: 10 },
});

----------------------------------------

TITLE: Creating a QStash Schedule with cURL
DESCRIPTION: This cURL command creates a schedule in QStash. It sets the necessary headers including authorization, content type, and the cron expression. The command is configured to publish a message every minute to the specified URL.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Cron: * * * * *" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/schedules/https://example.com'

----------------------------------------

TITLE: Bulk Cancel Messages using cURL
DESCRIPTION: Example of cancelling multiple messages using cURL with message IDs

LANGUAGE: sh
CODE:
curl -XDELETE https://qstash.upstash.io/v2/messages/ \
   -H "Content-Type: application/json" \
  -H "Authorization: Bearer <token>" \
  -d '{"messageIds": ["msg_id_1", "msg_id_2", "msg_id_3"]}'

----------------------------------------

TITLE: Deleting a QStash Schedule in Python
DESCRIPTION: This code demonstrates how to delete a specific QStash schedule using its ID. It initializes a QStash client and uses the delete method to remove the schedule.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.schedule.delete("<schedule-id>")

----------------------------------------

TITLE: Setting Parallelism Limit in QStash with cURL
DESCRIPTION: This cURL command sets a parallelism limit of 10 concurrent calls using HTTP headers. It demonstrates how to use the Upstash-Flow-Control-Key and Upstash-Flow-Control-Value headers to implement parallelism control.

LANGUAGE: bash
CODE:
curl -XPOST -H 'Authorization: Bearer XXX' \
            -H "Content-type: application/json" \
            -H "Upstash-Flow-Control-Key:USER_GIVEN_KEY"  \
            -H "Upstash-Flow-Control-Value:Parallelism=10" \
           'https://qstash.upstash.io/v2/publish/https://example.com' \ 
            -d '{"message":"Hello, World!"}'

----------------------------------------

TITLE: Listing URL Groups with Node.js
DESCRIPTION: This snippet shows how to list URL Groups using Node.js. It uses the fetch API to send a GET request to the QStash API endpoint with an authorization header.

LANGUAGE: javascript
CODE:
const response = await fetch("https://qstash.upstash.io/v2/topics", {
  headers: {
    Authorization: "Bearer <token>",
  },
});

----------------------------------------

TITLE: Retrieving Flow Control Information using cURL in Shell
DESCRIPTION: This cURL command demonstrates how to make a GET request to the QStash API to retrieve flow control information. It requires a bearer token for authentication and the flow control key as a path parameter.

LANGUAGE: sh
CODE:
curl -X GET https://qstash.upstash.io/v2/flowControl/YOUR_FLOW_CONTROL_KEY  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Pausing and Resuming a QStash Schedule in Python
DESCRIPTION: This code demonstrates how to pause and resume a QStash schedule. It shows the process of pausing a schedule, checking its status, and then resuming it using the schedule ID.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
schedule_id = "scd_1234"

client.schedule.pause(schedule_id)

schedule = client.schedule.get(schedule_id)
print(schedule.paused) # prints True

client.schedule.resume(schedule_id)

----------------------------------------

TITLE: Combining RatePerSecond and Parallelism in QStash with TypeScript
DESCRIPTION: This TypeScript example demonstrates how to combine both rate and parallelism limits in QStash. It sets a rate of 20 calls per second and a parallelism of 10 concurrent calls using the flowControl options in the publishJSON method.

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });

await client.publishJSON({
    url: "https://example.com",
    body: { hello: "world" },
    flowControl: { key: "USER_GIVEN_KEY", ratePerSecond: 20, parallelism: 10 },
});

----------------------------------------

TITLE: Retrieving URL Group with Go
DESCRIPTION: This snippet shows how to retrieve a URL Group using Go. It creates a new HTTP GET request with the QStash API endpoint, sets the authorization header, and sends the request using the default HTTP client.

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/topics/my-url-group", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Retrieving a Queue with Go
DESCRIPTION: This snippet shows how to retrieve a queue using Go. It creates a new HTTP request with an authorization header and sends it using the default HTTP client.

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/queue/my-queue", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Pausing and Resuming QStash Queue in TypeScript
DESCRIPTION: This snippet illustrates how to pause and resume a QStash queue using the Upstash QStash client. It creates a queue, pauses it, checks its status, and then resumes it.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";
const client = new Client({ token: "<QSTASH_TOKEN>" });

const name = "upstash-pause-resume-queue";
const queue = client.queue({ queueName: name });
await queue.upsert({ parallelism: 1 });

// pause queue
await queue.pause();

const queueInfo = await queue.get();
console.log(queueInfo.paused); // prints true

// resume queue
await queue.resume();

----------------------------------------

TITLE: Combining RatePerSecond and Parallelism in QStash with cURL
DESCRIPTION: This cURL command shows how to set both rate and parallelism limits simultaneously using HTTP headers. It sets a rate of 20 calls per second and a parallelism of 10 concurrent calls using the Upstash-Flow-Control-Value header.

LANGUAGE: bash
CODE:
curl -XPOST -H 'Authorization: Bearer XXX' \
            -H "Content-type: application/json" \
            -H "Upstash-Flow-Control-Key:USER_GIVEN_KEY"  \
            -H "Upstash-Flow-Control-Value:Rate=20,Parallelism=10" \
           'https://qstash.upstash.io/v2/publish/https://example.com' \ 
            -d '{"message":"Hello, World!"}'

----------------------------------------

TITLE: Retrieving URL Group with Node.js
DESCRIPTION: This snippet shows how to retrieve a URL Group using Node.js. It uses the fetch API to send a GET request to the QStash API endpoint, including the authorization token in the headers.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/topics/my-url-group', {
  headers: {
    'Authorization': 'Bearer <token>'
  }
});

----------------------------------------

TITLE: Pausing Queue with Python
DESCRIPTION: Implements queue pausing using the QStash Python client. Requires QStash token for authentication.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")

client.queue.pause("<QUEUE_NAME>")

----------------------------------------

TITLE: Canceling/Deleting a Message in QStash with TypeScript
DESCRIPTION: This code shows how to cancel or delete a specific message from QStash using its message ID. It uses the @upstash/qstash client library and requires a valid QStash token.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const messages = client.messages
const msg = await messages.delete("msgId");

----------------------------------------

TITLE: Implementing Absolute Delay with QStash
DESCRIPTION: Examples of sending messages with absolute time-based delays using unix timestamps through QStash. The delay is specified using the Upstash-Not-Before header or notBefore parameter.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Not-Before: 1657104947" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://my-api...'

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  notBefore: 1657104947,
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    headers={
        "test-header": "test-value",
    },
    not_before=1657104947,
)

----------------------------------------

TITLE: Retrieving URL Group with Python
DESCRIPTION: This snippet demonstrates how to retrieve a URL Group using Python. It uses the requests library to send a GET request to the QStash API endpoint, including the authorization token in the headers.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.get(
  'https://qstash.upstash.io/v2/topics/my-url-group',
   headers=headers
)

----------------------------------------

TITLE: Pausing Queue with Go
DESCRIPTION: Uses the QStash Go client to pause a queue. Requires QStash token for authentication and implements basic error handling.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/qstash-go"
)

func main() {
	client := qstash.NewClient("<QSTASH_TOKEN>")

	// error checking is omitted for brevity
	err := client.Queues().Pause("<QUEUE_NAME>")
}

----------------------------------------

TITLE: Canceling Multiple QStash Messages in Python
DESCRIPTION: This snippet illustrates how to cancel multiple messages at once or cancel all messages in QStash. It provides examples for canceling specific messages by their IDs and canceling all messages.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")

# cancel more than one message
client.message.cancel_many(["<msg-id-0>", "<msg-id-1>"])

# cancel all messages
client.message.cancel_all()

----------------------------------------

TITLE: Publishing Message with Content-Based Deduplication in QStash
DESCRIPTION: This snippet shows how to enable content-based deduplication when publishing a message to QStash using cURL, TypeScript, and Python. Content-based deduplication is activated by setting the 'Upstash-Content-Based-Deduplication' header to 'true' or using a corresponding parameter in the client libraries.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Content-Based-Deduplication: true" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/...'

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  contentBasedDeduplication: true,
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    content_based_deduplication=True,
)

----------------------------------------

TITLE: Listing All URL Groups in QStash
DESCRIPTION: Demonstrates how to retrieve and iterate through all URL groups in the QStash system. Lists each group's name and endpoints.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const allUrlGroups = await client.urlGroups.list();
for (const urlGroup of allUrlGroups) {
  console.log(urlGroup.name, urlGroup.endpoints);
}

----------------------------------------

TITLE: Resume Queue using Python Client
DESCRIPTION: Using the official QStash Python client to resume a queue. Requires the qstash package and a QStash token.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")

client.queue.resume("<QUEUE_NAME>")

----------------------------------------

TITLE: Retrieving a Single DLQ Message in Python using Upstash QStash
DESCRIPTION: This code snippet shows how to retrieve a single message from the Dead Letter Queue (DLQ) using its ID. It requires the QStash client to be initialized with a valid token.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
msg = client.dlq.get("<dlq-id>")

----------------------------------------

TITLE: QStash Backoff Algorithm for Retry Delays
DESCRIPTION: The backoff algorithm used by QStash to calculate retry delays. It uses an exponential formula capped at 1 day maximum delay.

LANGUAGE: plaintext
CODE:
n = how many times this request has been retried
delay =  min(86400, e ** (2.5*n)) // in seconds

----------------------------------------

TITLE: QStash Signing Keys API Response Format
DESCRIPTION: Example JSON response from the signing keys endpoint showing the structure with current and next signing keys.

LANGUAGE: json
CODE:
{ "current": "sig_123", "next": "sig_456" }

----------------------------------------

TITLE: Resume Queue using Go Client
DESCRIPTION: Using the official QStash Go client to resume a queue. Requires the qstash-go package and a QStash token.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/qstash-go"
)

func main() {
	client := qstash.NewClient("<QSTASH_TOKEN>")

	// error checking is omitted for brevity
	err := client.Queues().Resume("<QUEUE_NAME>")
}

----------------------------------------

TITLE: Deleting a DLQ Message in Python using Upstash QStash
DESCRIPTION: This snippet demonstrates how to delete a specific message from the Dead Letter Queue (DLQ) using its ID. It requires the QStash client to be initialized with a valid token.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.dlq.delete("<dlq-id>")

----------------------------------------

TITLE: Publishing a Message with Failure Callback using cURL
DESCRIPTION: This snippet demonstrates how to publish a message to QStash with a failure callback URL using cURL. It includes setting the necessary headers and sending JSON data.

LANGUAGE: bash
CODE:
curl -X POST \
  https://qstash.upstash.io/v2/publish/<DESTINATION_URL> \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer <QSTASH_TOKEN>' \
  -H 'Upstash-Failure-Callback: <CALLBACK_URL>' \
  -d '{ "hello": "world" }'

----------------------------------------

TITLE: Fetching QStash Signing Keys with Node.js
DESCRIPTION: Demonstrates how to fetch signing keys using Node.js fetch API. Requires bearer token authorization header.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/keys', {
  headers: {
    'Authorization': 'Bearer <token>'
  }
});

----------------------------------------

TITLE: Bulk Cancel Messages using Go
DESCRIPTION: Example of cancelling multiple messages using Go http client

LANGUAGE: go
CODE:
var data = strings.NewReader(`{
  "messageIds": [
    "msg_id_1",
    "msg_id_2",
    "msg_id_3"
  ]
}`)
req, err := http.NewRequest("DELETE", "https://qstash.upstash.io/v2/messages", data)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
req.Header.Set("Content-Type", "application/json")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Creating QStash Queue using cURL
DESCRIPTION: Makes a POST request to create or update a queue with specified name and parallelism using cURL. Requires authentication token and returns 200 on success or 412 if queue limit is exceeded.

LANGUAGE: shell
CODE:
curl -XPOST https://qstash.upstash.io/v2/queues/ \
  -H "Authorization: Bearer <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "queueName": "my-queue" , 
    "parallelism" : 5,
  }'

----------------------------------------

TITLE: Publishing a Message with Failure Callback using TypeScript
DESCRIPTION: This snippet shows how to use the QStash client in TypeScript to publish a JSON message with a failure callback URL. It requires the @upstash/qstash package.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  failureCallback: "https://my-callback...",
});

----------------------------------------

TITLE: Deleting QStash Queue in TypeScript
DESCRIPTION: This snippet shows how to delete a QStash queue using the Upstash QStash client. It initializes the client and then deletes the specified queue.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";
const client = new Client({ token: "<QSTASH_TOKEN>" });

const queueName = "upstash-queue";
await client.queue({ queueName: queueName }).delete();

----------------------------------------

TITLE: Node.js QStash Logs Request
DESCRIPTION: JavaScript implementation using fetch to retrieve logs from QStash API.

LANGUAGE: javascript
CODE:
const response = await fetch("https://qstash.upstash.io/v2/logs", {
  headers: {
    Authorization: "Bearer <token>",
  },
});

----------------------------------------

TITLE: Creating QStash Queue using Node.js
DESCRIPTION: Makes a POST request to create or update a queue using Node.js fetch API. Requires authentication token and returns response object.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/queues/', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer <token>',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    "queueName": "my-queue" , 
    "parallelism" : 5,
  })
});

----------------------------------------

TITLE: Scheduling to a URL Group in Python
DESCRIPTION: This Python code snippet shows how to create a schedule for a URL group in QStash. It uses the URL group name as the destination.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.schedule.create(
    destination="url-group-name",
    cron="* * * * *",
)

----------------------------------------

TITLE: Rotating QStash Signing Keys in Python
DESCRIPTION: Executes signing key rotation using the requests library in Python. Requires bearer token authentication.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}
response = requests.get(
  'https://qstash.upstash.io/v2/keys/rotate', 
  headers=headers
)

----------------------------------------

TITLE: Success Response Example
DESCRIPTION: Example of a successful response with HTTP 202 status code

LANGUAGE: json
CODE:
{
  "cancelled": 10
}

----------------------------------------

TITLE: Creating QStash Queue using Python
DESCRIPTION: Makes a POST request to create or update a queue using Python requests library. Requires authentication token and returns response object.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
    'Content-Type': 'application/json',
}

json_data = {
    "queueName": "my-queue" , 
    "parallelism" : 5,
  }

response = requests.post(
  'https://qstash.upstash.io/v2/queues/',
  headers=headers, 
  json=json_data
)

----------------------------------------

TITLE: Overwriting an Existing Schedule in TypeScript
DESCRIPTION: This TypeScript snippet shows how to overwrite an existing schedule or create a new one with a specific schedule ID in QStash.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.create({
  destination: "https://example.com",
  scheduleId: "existingScheduleId",
  cron: "* * * * *",
});

----------------------------------------

TITLE: QStash Signing Key Rotation Response Format
DESCRIPTION: Example JSON response showing the format of successful key rotation containing current and next signing keys.

LANGUAGE: json
CODE:
{ "current": "sig_123", "next": "sig_456" }

----------------------------------------

TITLE: Publishing LLM Request with Anthropic and QStash
DESCRIPTION: Example of publishing a single LLM request to Anthropic through QStash with callback handling. Demonstrates basic setup and request configuration.

LANGUAGE: typescript
CODE:
import { anthropic, Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.publishJSON({
  api: { name: "llm", provider: anthropic({ token: "<ANTHROPIC_TOKEN>" }) },
  body: {
    model: "claude-3-5-sonnet-20241022",
    messages: [{ role: "user", content: "Summarize recent tech trends." }],
  },
  callback: "https://example.com/callback",
});

----------------------------------------

TITLE: Creating QStash Queue using Go
DESCRIPTION: Makes a POST request to create or update a queue using Go's http package. Requires authentication token and handles response with error checking.

LANGUAGE: go
CODE:
var data = strings.NewReader(`{
    "queueName": "my-queue" , 
    "parallelism" : 5,
  }`)
req, err := http.NewRequest("POST", "https://qstash.upstash.io/v2/queues/", data)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
req.Header.Set("Content-Type", "application/json")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Overwriting an Existing Schedule with cURL
DESCRIPTION: This cURL command demonstrates how to overwrite an existing schedule or create a new one with a specific schedule ID in QStash. It includes the schedule ID in the Upstash-Schedule-Id header.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Cron: * * * * *" \
    -H "Upstash-Schedule-Id: existingScheduleId" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/schedules/https://example.com'

----------------------------------------

TITLE: Deleting a Message from QStash DLQ in TypeScript
DESCRIPTION: This snippet demonstrates how to delete a specific message from the QStash Dead Letter Queue using its ID. It initializes the QStash client and uses the DLQ delete method.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const dlq = client.dlq;
await dlq.delete("dlqId");

----------------------------------------

TITLE: Next.js UI Component with QStash Integration
DESCRIPTION: Client-side React component implementation for triggering background jobs through QStash, including loading states and error handling.

LANGUAGE: typescript
CODE:
"use client"
import { startBackgroundJob } from "@/app/actions";
import { useState } from "react";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [msg, setMsg] = useState("");

  async function handleClick() {
    setLoading(true);
    const messageId = await startBackgroundJob();
    if (messageId) {
      setMsg(`Started job with ID ${messageId}`);
    } else {
      setMsg("Failed to start background job");
    }
    setLoading(false);
  }

  return (
    <main className="flex flex-col h-lvh items-center justify-center">
      <button onClick={handleClick} disabled={loading} className="btn btn-primary w-1/2 h-56 bg-green-500 text-xl sm:text-3xl rounded-lg hover:bg-green-600 disabled:bg-gray-500">
        Start Background Job
      </button>

      {loading && <div className="text-2xl mt-8">Loading...</div>}
      {msg && <p className="text-center text-lg">{msg}</p>}
    </main>
  );
}

----------------------------------------

TITLE: Removing Queue with cURL
DESCRIPTION: Example of removing a queue using cURL command with bearer token authentication.

LANGUAGE: shell
CODE:
curl https://qstash.upstash.io/v2/queues/my-queue \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Deleting a Schedule
DESCRIPTION: Demonstrates how to remove a schedule using its ID.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.delete("scheduleId");

----------------------------------------

TITLE: Sending GET Request to List Schedules API in cURL
DESCRIPTION: This snippet demonstrates how to send a GET request to the List Schedules API endpoint using cURL. It includes the necessary authorization header.

LANGUAGE: sh
CODE:
curl https://qstash.upstash.io/v2/schedules \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Using QStash SDK for Scheduling
DESCRIPTION: Python code example showing how to programmatically create scheduled jobs using the QStash SDK.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.schedule.create(
    destination="https://YOUR_URL.vercel.app/api",
    cron="0 12 * * *",
)

----------------------------------------

TITLE: Removing Queue with Node.js
DESCRIPTION: Example of removing a queue using Node.js fetch API with bearer token authentication.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/queue/my-queue', {
  method: "DELETE",
  headers: {
    'Authorization': 'Bearer <token>'
  }
});

----------------------------------------

TITLE: Creating Schedule with Timeout
DESCRIPTION: Shows how to create a schedule with a custom timeout value in seconds for URL calls.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.create({
  url: "https://my-api...",
  cron: "* * * * *",
  timeout: "30" // 30 seconds timeout
});

----------------------------------------

TITLE: Delete Schedule using Python
DESCRIPTION: Remove a schedule using Python requests library with bearer token authentication.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.delete(
  'https://qstash.upstash.io/v2/schedules/scd_123', 
  headers=headers
)

----------------------------------------

TITLE: Publishing Test Message to QStash Webhook
DESCRIPTION: cURL command to publish a test message to the QStash webhook endpoint, targeting the AWS Lambda function URL.

LANGUAGE: bash
CODE:
curl --request POST "https://qstash.upstash.io/v2/publish/https://urzdbfn4et56vzeasu3fpcynym0zerme.lambda-url.eu-west-1.on.aws" \
     -H "Authorization: Bearer <QSTASH_TOKEN>" \
     -H "Content-Type: application/json" \
     -d "{ \"hello\": \"world\"}"

----------------------------------------

TITLE: Removing Queue with Python
DESCRIPTION: Example of removing a queue using Python requests library with bearer token authentication.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.delete(
  'https://qstash.upstash.io/v2/queue/my-queue',
   headers=headers
)

----------------------------------------

TITLE: Pausing and Resuming Schedules
DESCRIPTION: Demonstrates how to pause, check pause status, and resume a schedule using its ID.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";
const client = new Client({ token: "<QSTASH_TOKEN>" });
const scheduleId = "my-schedule"

// pause schedule
await client.schedules.pause({ schedule: scheduleId });

// check if paused
const result = await client.schedules.get(scheduleId);
console.log(getResult.isPaused) // prints true

// resume schedule
await client.schedules.resume({ schedule: scheduleId });

----------------------------------------

TITLE: Removing URL Group using cURL
DESCRIPTION: This snippet demonstrates how to remove a URL group using a cURL command. It sends a DELETE request to the QStash API endpoint with the necessary authorization header.

LANGUAGE: sh
CODE:
curl -XDELETE https://qstash.upstash.io/v2/topics/my-url-group \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Creating Makefile for AWS Lambda Deployment
DESCRIPTION: Makefile script to bundle and zip the Python code for deployment to AWS Lambda, including installation of required dependencies.

LANGUAGE: yaml
CODE:
zip:
    rm -rf dist
	pip3 install --target ./dist pyjwt
	cp lambda_function.py ./dist/lambda_function.py
	cd dist && zip -r lambda.zip .
	mv ./dist/lambda.zip ./

----------------------------------------

TITLE: Removing Queue with Go
DESCRIPTION: Example of removing a queue using Go's http package with bearer token authentication.

LANGUAGE: go
CODE:
req, err := http.NewRequest("DELETE", "https://qstash.upstash.io/v2/queue/my-queue", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Listing All QStash Schedules in Python
DESCRIPTION: This snippet shows how to retrieve a list of all QStash schedules associated with the account. It uses the list method of the schedule object to fetch all schedules.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
all_schedules = client.schedule.list()

print(all_schedules)

----------------------------------------

TITLE: Basic QStash SDK Import Reference
DESCRIPTION: Shows the basic module name for importing the QStash SDK in Python applications. This SDK provides access to QStash's messaging and scheduling features.

LANGUAGE: python
CODE:
qstash

----------------------------------------

TITLE: Implementing QStash Webhook Signature Verification Function
DESCRIPTION: Python function to verify the JWT signature of incoming QStash webhooks, including checks for issuer, subject, expiration, and body hash.

LANGUAGE: python
CODE:
def verify(jwt_token, signing_key, body, url):
    split = jwt_token.split(".")
    if len(split) != 3:
        raise Exception("Invalid JWT.")

    header, payload, signature = split

    message = header + '.' + payload
    generated_signature = base64.urlsafe_b64encode(hmac.new(bytes(signing_key, 'utf-8'), bytes(message, 'utf-8'), digestmod=hashlib.sha256).digest()).decode()

    if generated_signature != signature and signature + "=" != generated_signature :
        raise Exception("Invalid JWT signature.")

    decoded = jwt.decode(jwt_token, options={"verify_signature": False})
    sub = decoded['sub']
    iss = decoded['iss']
    exp = decoded['exp']
    nbf = decoded['nbf']
    decoded_body = decoded['body']

    if iss != "Upstash":
        raise Exception("Invalid issuer: {}".format(iss))

    if sub.rstrip("/") != url.rstrip("/"):
        raise Exception("Invalid subject: {}".format(sub))

    now = time.time()
    if now > exp:
        raise Exception("Token has expired.")

    if now < nbf:
        raise Exception("Token is not yet valid.")


    if body != None:
        while decoded_body[-1] == "=":
            decoded_body = decoded_body[:-1]

        m = hashlib.sha256()
        m.update(bytes(body, 'utf-8'))
        m = m.digest()
        generated_hash = base64.urlsafe_b64encode(m).decode()

        if generated_hash != decoded_body and generated_hash != decoded_body + "=" :
                raise Exception("Body hash doesn't match.")

----------------------------------------

TITLE: Resume Queue using cURL
DESCRIPTION: HTTP POST request to resume a paused queue using cURL command line tool. Requires authentication token in the Authorization header.

LANGUAGE: shell
CODE:
curl -X POST https://qstash.upstash.io/v2/queues/queue_1234/resume \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Creating a QStash Schedule with Timeout in Python
DESCRIPTION: This snippet shows how to create a QStash schedule with a specified timeout value. It sets up a schedule to run every 5 minutes with a 30-second timeout for the destination URL.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
schedule_id = client.schedule.create(
    destination="https://my-api...",
    cron="*/5 * * * *",
    timeout="30s",
)

print(schedule_id)

----------------------------------------

TITLE: Installing QStash Library
DESCRIPTION: Command to install the Upstash QStash library as a dependency.

LANGUAGE: bash
CODE:
npm install @upstash/qstash

----------------------------------------

TITLE: Implementing Main Function for QStash Webhook Reception in Go
DESCRIPTION: Go code for the main function that sets up an HTTP server to receive QStash webhooks, extract necessary information, and verify the webhook signature.

LANGUAGE: go
CODE:
func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		defer r.Body.Close()

		currentSigningKey := os.Getenv("QSTASH_CURRENT_SIGNING_KEY")
		nextSigningKey := os.Getenv("QSTASH_NEXT_SIGNING_KEY")
		tokenString := r.Header.Get("Upstash-Signature")

		body, err := io.ReadAll(r.Body)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		err = verify(body, tokenString, currentSigningKey)
		if err != nil {
			fmt.Printf("Unable to verify signature with current signing key: %v", err)
			err = verify(body, tokenString, nextSigningKey)
		}

		if err != nil {
			http.Error(w, err.Error(), http.StatusUnauthorized)
			return
		}

		// handle your business logic here

		w.WriteHeader(http.StatusOK)

	})

	fmt.Println("listening on", port)
	err := http.ListenAndServe(":"+port, nil)
	if err != nil {
		panic(err)
	}
}

----------------------------------------

TITLE: Getting QStash Queues with Go
DESCRIPTION: Illustrates queue listing implementation using Go's HTTP client with bearer token authentication and error handling.

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/queues", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Retrieving URL Group by Name in QStash
DESCRIPTION: Shows how to fetch a specific URL group by its name and display its details. Returns the group name and associated endpoints.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const urlGroups = client.urlGroups;
const urlGroup = await urlGroups.get("urlGroupName");
console.log(urlGroup.name, urlGroup.endpoints);

----------------------------------------

TITLE: AWS CDK Stack Configuration
DESCRIPTION: Configuration for AWS CDK stack that sets up Lambda function with API Gateway integration.

LANGUAGE: typescript
CODE:
import * as cdk from "aws-cdk-lib";
import * as lambda from "aws-cdk-lib/aws-lambda";
import { NodejsFunction } from "aws-cdk-lib/aws-lambda-nodejs";
import { Construct } from "constructs";
import path from "path";
import * as apigateway from 'aws-cdk-lib/aws-apigateway';

export class VideoProcessingStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props)

    const videoProcessingLambda = new NodejsFunction(this, 'VideoProcessingLambda', {
      runtime: lambda.Runtime.NODEJS_20_X,
      handler: 'handler',
      entry: path.join(__dirname, '../lambda/index.ts'),
    });

    const api = new apigateway.RestApi(this, 'VideoProcessingApi', {
      restApiName: 'Video Processing Service',
      description: 'This service handles video processing.',
      defaultMethodOptions: {
        authorizationType: apigateway.AuthorizationType.NONE,
      },
    });

    api.root.addMethod('POST', new apigateway.LambdaIntegration(videoProcessingLambda));
  }
}

----------------------------------------

TITLE: Installing Vercel CLI
DESCRIPTION: Command to install the Vercel CLI tool for deployment.

LANGUAGE: bash
CODE:
npm install -g vercel

LANGUAGE: bash
CODE:
vercel

----------------------------------------

TITLE: QStash Queue List Response Format
DESCRIPTION: Example JSON response showing queue details including creation time, update time, name, parallelism, and lag information.

LANGUAGE: json
CODE:
[
  {
    "createdAt": 1623345678001,
    "updatedAt": 1623345678001,
    "name": "my-queue",
    "parallelism" : 5, 
    "lag" : 100
  }
]

----------------------------------------

TITLE: Deleting URL Group in QStash
DESCRIPTION: Demonstrates how to completely delete a URL group by its name. This operation removes the group and all its associated endpoints.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const urlGroups = client.urlGroups;
await urlGroups.delete("urlGroupName");

----------------------------------------

TITLE: Installing QStash Python SDK via pip
DESCRIPTION: This snippet shows how to install the QStash Python SDK using pip, the Python package installer.

LANGUAGE: bash
CODE:
pip install qstash

----------------------------------------

TITLE: Creating Project Directory
DESCRIPTION: Commands to create and navigate to the project directory, and install the required Redis package.

LANGUAGE: bash
CODE:
mkdir clean-db-cron

LANGUAGE: bash
CODE:
cd clean-db-cron

LANGUAGE: bash
CODE:
pip install upstash-redis

----------------------------------------

TITLE: Deleting Multiple DLQ Messages Response in JSON
DESCRIPTION: Example JSON response for successfully deleting multiple messages from the DLQ. The response includes the number of deleted messages.

LANGUAGE: json
CODE:
{
  "deleted": 3
}

----------------------------------------

TITLE: Creating URL Group with Multiple Endpoints in QStash
DESCRIPTION: Demonstrates how to create a URL group and add multiple endpoints using the QStash client. Requires a QStash token for authentication and accepts an array of endpoint URLs.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.url_group.upsert_endpoints(
    url_group="my-url-group",
    endpoints=[
        {"url": "https://my-endpoint-1"},
        {"url": "https://my-endpoint-2"},
    ],
)

----------------------------------------

TITLE: Running QStash CLI from Binary
DESCRIPTION: Command to run the QStash CLI executable after downloading it from the artifact repository.

LANGUAGE: javascript
CODE:
$ ./qstash dev

----------------------------------------

TITLE: Deleting Multiple DLQ Messages using Python
DESCRIPTION: Example Python code to delete multiple messages from the DLQ. It uses the requests library to send a DELETE request with authentication token and a JSON payload containing the list of DLQ message IDs to remove.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
    'Content-Type': 'application/json',
}

data = {
  "dlqIds": [
    "11111-0",
    "22222-0",
    "33333-0"
  ]
}

response = requests.delete(
  'https://qstash.upstash.io/v2/dlq',
  headers=headers,
  data=data
)

----------------------------------------

TITLE: Removing Endpoints from URL Group in QStash
DESCRIPTION: Shows how to remove specific endpoints from an existing URL group. Requires the group name and an array of endpoint URLs to remove.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.url_group.remove_endpoints(
    url_group="my-url-group",
    endpoints=[
        {"url": "https://my-endpoint-1"},
    ],
)

----------------------------------------

TITLE: Running QStash CLI via Docker
DESCRIPTION: Commands to pull and run the QStash CLI Docker image from the public AWS ECR repository.

LANGUAGE: javascript
CODE:
// Pull the image
docker pull public.ecr.aws/upstash/qstash:latest

// Run the image
docker run -p 8080:8080 public.ecr.aws/upstash/qstash:latest qstash dev

----------------------------------------

TITLE: Deleting Multiple DLQ Messages using Go
DESCRIPTION: Example Go code to delete multiple messages from the DLQ. It creates a new HTTP DELETE request with authentication token and a JSON payload containing the list of DLQ message IDs to remove.

LANGUAGE: go
CODE:
var data = strings.NewReader(`{
  "dlqIds": [
    "11111-0",
    "22222-0",
    "33333-0"
  ]
}`)
req, err := http.NewRequest("DELETE", "https://qstash.upstash.io/v2/dlq", data)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
req.Header.Set("Content-Type", "application/json")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Retrieving a Message in QStash with TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve a specific message from QStash using its message ID. It requires the @upstash/qstash client library and a valid QStash token.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const messages = client.messages
const msg = await messages.get("msgId");

----------------------------------------

TITLE: Configuring ngrok Authentication Token
DESCRIPTION: This command adds the ngrok authentication token to your configuration. Replace 'XXX' with your actual ngrok authentication token obtained from the ngrok dashboard.

LANGUAGE: bash
CODE:
ngrok config add-authtoken XXX

----------------------------------------

TITLE: Retrieving DLQ Message with curl in Bash
DESCRIPTION: This curl command demonstrates how to make a GET request to retrieve a specific message from the Dead Letter Queue (DLQ) using the QStash API. It requires the DLQ ID and an authorization token.

LANGUAGE: sh
CODE:
curl -X GET https://qstash.upstash.io/v2/dlq/my-dlq-id \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Creating QStash Queue with Parallelism in TypeScript
DESCRIPTION: This snippet demonstrates how to create a QStash queue with a parallelism of 2 using the Upstash QStash client. It initializes the client, creates or updates a queue, and then retrieves the queue details.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";
const client = new Client({ token: "<QSTASH_TOKEN>" });

const queueName = "upstash-queue";
await client.queue({ queueName }).upsert({ parallelism: 2 });

const queueDetails = await client.queue({ queueName }).get();

----------------------------------------

TITLE: Running localtunnel for QStash Local Development
DESCRIPTION: This command starts a localtunnel on port 3000, creating a public URL for your local QStash development environment. Replace 3000 with your application's port number.

LANGUAGE: bash
CODE:
npx localtunnel --port 3000

----------------------------------------

TITLE: Querying DLQ Messages with cURL
DESCRIPTION: Basic cURL command to fetch messages from the QStash DLQ using bearer token authentication.

LANGUAGE: sh
CODE:
curl https://qstash.upstash.io/v2/dlq \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Retrieving All DLQ Messages with Pagination in Python using Upstash QStash
DESCRIPTION: This snippet demonstrates how to retrieve all messages from the Dead Letter Queue (DLQ) using pagination with a cursor. It iterates through the results until all messages are collected.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")

all_messages = []
cursor = None
while True:
    res = client.dlq.list(cursor=cursor)
    all_messages.extend(res.messages)
    cursor = res.cursor
    if cursor is None:
        break

----------------------------------------

TITLE: Configuring URL Group Headers with cURL
DESCRIPTION: Demonstrates how to set default headers for a URL Group using the QStash API. This configuration enables header forwarding and sets retry attempts for all requests to the group.

LANGUAGE: curl
CODE:
curl -X PATCH https://qstash.upstash.io/v2/topics/<URL_GROUP_NAME> \
    -H "Authorizarion: Bearer <QSTASH_TOKEN>"
    -d '{
        "headers": {
            "Upstash-Header-Forward": ["true"],
            "Upstash-Retries": "3"
        }
    }'

----------------------------------------

TITLE: DLQ Message Response Structure
DESCRIPTION: Example JSON response showing the structure of DLQ messages, including message ID, topic ID, URL, method, headers, body, creation timestamp, and state.

LANGUAGE: json
CODE:
{ 
  "messages": [
    {
      "messageId": "msg_123",
      "topicId": "tpc_123",
      "url":"https://example.com",
      "method": "POST",
      "header": {
        "My-Header": ["my-value"]
      },
      "body": "{\"foo\":\"bar\"}",
      "createdAt": 1620000000000,
      "state": "failed"
    }
  ]
}

----------------------------------------

TITLE: Initializing QStash Receiver and Verifying Message Signature in Python
DESCRIPTION: This code snippet demonstrates how to initialize the QStash Receiver and verify the signature of an incoming message. It uses the Receiver class from the qstash module, requiring current and next signing keys. The verify method is then used to authenticate the received message.

LANGUAGE: python
CODE:
from qstash import Receiver

receiver = Receiver(
    current_signing_key="YOUR_CURRENT_SIGNING_KEY",
    next_signing_key="YOUR_NEXT_SIGNING_KEY",
)

# ... in your request handler

signature, body = req.headers["Upstash-Signature"], req.body

receiver.verify(
    body=body,
    signature=signature,
    url="YOUR-SITE-URL",
)

----------------------------------------

TITLE: Publishing Message to Kafka Topic using QStash API
DESCRIPTION: cURL command to publish a message to a Kafka topic using QStash's REST API. Requires Kafka webhook URL, topic name, user credentials, and QStash authentication token. The example demonstrates sending a simple 'hello world' message to a specified Kafka topic.

LANGUAGE: bash
CODE:
curl -XPOST 'https://qstash.upstash.io/v2/publish/<KAFKA_URL>/webhook?topic=<TOPICNAME>&user=<USER>&pass=<PASS>' \
    -H 'Authorization: Bearer <QSTASH_TOKEN>' \
    -d 'hello world'

----------------------------------------

TITLE: Retrieving Schedule Details using Node.js
DESCRIPTION: Fetches schedule details using Node.js fetch API with bearer token authentication.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/schedules/scd_1234', {
  headers: {
    'Authorization': 'Bearer <token>'
  }
});

----------------------------------------

TITLE: Implementing Image Upload with QStash Queue in Next.js
DESCRIPTION: Creates an endpoint to handle image uploads and queue processing tasks using QStash client. Demonstrates how to publish JSON messages to QStash for asynchronous processing.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash"
import { NextResponse } from "next/server"

const client = new Client({ token: process.env.QSTASH_TOKEN! })

export const POST = async (req: Request) => {
  // Image uploading logic

  // 👇 Once uploading is done, queue an image processing task
  const result = await client.publishJSON({
    url: "https://your-api-endpoint.com/process-image",
    body: { imageId: "123" },
  })

  return NextResponse.json({
    message: "Image queued for processing!",
    qstashMessageId: result.messageId,
  })
}

----------------------------------------

TITLE: Sending Single Email with Resend using QStash in TypeScript
DESCRIPTION: This snippet shows how to send a single email using the qstash-js SDK with Resend as the email provider. It demonstrates setting up the client, specifying the API and provider, and defining the email content.

LANGUAGE: typescript
CODE:
import { Client, resend } from "@upstash/qstash";
const client = new Client({ token: "<QSTASH_TOKEN>" });

await client.publishJSON({
  api: {
    name: "email",
    provider: resend({ token: "<RESEND_TOKEN>" }),
  },
  body: {
    from: "Acme <onboarding@resend.dev>",
    to: ["delivered@resend.dev"],
    subject: "Hello World",
    html: "<p>It works!</p>",
  },
});

----------------------------------------

TITLE: Pausing QStash Schedule using Python
DESCRIPTION: This snippet demonstrates how to pause a QStash schedule using the Python client library. It initializes the QStash client with an API token and calls the pause method with the schedule ID.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")

client.schedule.pause("<SCHEDULE_ID>")

----------------------------------------

TITLE: Creating HTTP Endpoint Handler
DESCRIPTION: Python implementation of an HTTP server that exposes the cleanup functionality as a POST endpoint, compatible with Vercel's Python runtime.

LANGUAGE: python
CODE:
from http.server import BaseHTTPRequestHandler
from upstash_redis import Redis

redis = Redis(url="https://YOUR_REDIS_URL", token="YOUR_TOKEN")

def delete_all_entries():
  keys = redis.keys("*") # Match all keys
  redis.delete(*keys)


class handler(BaseHTTPRequestHandler):
  def do_POST(self):
    delete_all_entries()
    self.send_response(200)
    self.end_headers()

----------------------------------------

TITLE: Responding to QStash HTTP Request in Pipedream
DESCRIPTION: Example code for returning an HTTP response to QStash using Pipedream's $.respond helper. This is used to indicate successful processing of a QStash message.

LANGUAGE: javascript
CODE:
$.respond({
  status: 200,
  body: {
    success: true
  }
})

----------------------------------------

TITLE: Pausing QStash Schedule using Go
DESCRIPTION: This snippet shows how to pause a QStash schedule using the Go client library. It initializes the QStash client with an API token and calls the Pause method on the Schedules object with the schedule ID.

LANGUAGE: go
CODE:
package main

import "github.com/upstash/qstash-go"

func main() {

	client := qstash.NewClient("<QSTASH_TOKEN>")

	// error checking is omitted for brevity
	err := client.Schedules().Pause("<SCHEDULE_ID>")
}

----------------------------------------

TITLE: Implementing QStash Webhook Receiver in Deno Deploy
DESCRIPTION: This code snippet demonstrates how to create a Deno server that receives webhooks from QStash, verifies their signatures, and processes the incoming requests. It uses the Deno standard library for HTTP serving and the Upstash QStash library for signature verification.

LANGUAGE: typescript
CODE:
import { serve } from "https://deno.land/std@0.142.0/http/server.ts";
import { Receiver } from "https://deno.land/x/upstash_qstash@v0.1.4/mod.ts";

serve(async (req: Request) => {
  const r = new Receiver({
    currentSigningKey: Deno.env.get("QSTASH_CURRENT_SIGNING_KEY")!,
    nextSigningKey: Deno.env.get("QSTASH_NEXT_SIGNING_KEY")!,
  });

  const isValid = await r
    .verify({
      signature: req.headers.get("Upstash-Signature")!,
      body: await req.text(),
    })
    .catch((err: Error) => {
      console.error(err);
      return false;
    });

  if (!isValid) {
    return new Response("Invalid signature", { status: 401 });
  }

  console.log("The signature was valid");

  // do work

  return new Response("OK", { status: 200 });
});

----------------------------------------

TITLE: Retrieving QStash Signing Keys in Python
DESCRIPTION: This snippet demonstrates how to retrieve the current and next signing keys using the QStash client library. It requires a valid QStash token for authentication.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
signing_key = client.signing_key.get()

print(signing_key.current, signing_key.next)

----------------------------------------

TITLE: Delete Schedule using Go
DESCRIPTION: Remove a schedule using Go's http package with bearer token authentication. Includes error handling and response cleanup.

LANGUAGE: go
CODE:
req, err := http.NewRequest("DELETE", "https://qstash.upstash.io/v2/schedules/scd_123", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Initializing AWS Lambda Project with CDK
DESCRIPTION: Setup commands to create a new AWS Lambda project using CDK with TypeScript support and required dependencies.

LANGUAGE: bash
CODE:
mkdir my-app
cd my-app
cdk init app -l typescript
npm i esbuild @upstash/qstash
mkdir lambda
touch lambda/index.ts

----------------------------------------

TITLE: Canceling a QStash Message in Python
DESCRIPTION: This code shows how to cancel or delete a specific message in QStash using its message ID. It requires the QStash token for authentication.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.message.cancel("<msg-id>")

----------------------------------------

TITLE: Creating a QStash Schedule with Go
DESCRIPTION: This Go code snippet illustrates how to create a QStash schedule. It uses the http package to send a POST request to the QStash API with the required headers for setting up a periodic message delivery schedule.

LANGUAGE: go
CODE:
req, err := http.NewRequest("POST", "https://qstash.upstash.io/v2/schedules/https://www.example.com/endpoint", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
req.Header.Set("Upstash-Cron", "*/5 * * * *")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: QStash SDK-based Webhook Verification Lambda Handler
DESCRIPTION: Implementation of AWS Lambda handler using QStash SDK for webhook verification, processing incoming requests with signature validation.

LANGUAGE: typescript
CODE:
import { Receiver } from "@upstash/qstash"
import type { APIGatewayProxyEvent, APIGatewayProxyResult } from "aws-lambda"

const receiver = new Receiver({
  currentSigningKey: process.env.QSTASH_CURRENT_SIGNING_KEY ?? "",
  nextSigningKey: process.env.QSTASH_NEXT_SIGNING_KEY ?? "",
})

export const handler = async (
  event: APIGatewayProxyEvent
): Promise<APIGatewayProxyResult> => {
  const signature = event.headers["upstash-signature"]
  const lambdaFunctionUrl = `https://${event.requestContext.domainName}`

  if (!signature) {
    return {
      statusCode: 401,
      body: JSON.stringify({ message: "Missing signature" }),
    }
  }

  try {
    await receiver.verify({
      signature: signature,
      body: event.body ?? "",
      url: lambdaFunctionUrl,
    })
  } catch (err) {
    return {
      statusCode: 401,
      body: JSON.stringify({ message: "Invalid signature" }),
    }
  }

  return {
    statusCode: 200,
    body: JSON.stringify({ message: "Request processed successfully" }),
  }
}

----------------------------------------

TITLE: Retrieving a QStash Message in Python
DESCRIPTION: This snippet demonstrates how to retrieve a specific message from QStash using its message ID. It requires the QStash token for authentication.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
msg = client.message.get("<msg-id>")

----------------------------------------

TITLE: Retrieving Messages with cURL
DESCRIPTION: HTTP GET request to retrieve a message by ID using cURL. Requires Bearer token authentication.

LANGUAGE: shell
CODE:
curl https://qstash.upstash.io/v2/messages/msg_123 \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Retrieving Messages with cURL
DESCRIPTION: HTTP GET request to retrieve a message by ID using cURL. Requires Bearer token authentication.

LANGUAGE: shell
CODE:
curl https://qstash.upstash.io/v2/messages/msg_123 \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Creating Project Structure for AWS Lambda Python Function
DESCRIPTION: Commands to create a new project folder and initialize the main Lambda function file.

LANGUAGE: bash
CODE:
mkdir aws-lambda
cd aws-lambda
touch lambda_function.py

----------------------------------------

TITLE: Pausing Queue with Node.js
DESCRIPTION: Uses the @upstash/qstash Node.js client to pause a queue. Requires QStash token for authentication and may need fetch polyfill for Node versions before 18.

LANGUAGE: javascript
CODE:
import { Client } from "@upstash/qstash";
/**
 * Import a fetch polyfill only if you are using node prior to v18.
 * This is not necessary for nextjs, deno or cloudflare workers.
 */
import "isomorphic-fetch";

const c = new Client({
  token: "<QSTASH_TOKEN>",
});

c.queue({ queueName: "<QUEUE_NAME>" }).pause()

----------------------------------------

TITLE: Retrieving Messages with Go
DESCRIPTION: HTTP GET request to retrieve a message by ID using Go's HTTP client. Requires Bearer token authentication.

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/messages/msg_123", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Implementing AWS Lambda Handler for QStash Webhook Verification
DESCRIPTION: Python function to handle incoming QStash webhooks, verify signatures, and process the request in AWS Lambda.

LANGUAGE: python
CODE:
def lambda_handler(event, context):

    # parse the inputs
    current_signing_key = os.environ['QSTASH_CURRENT_SIGNING_KEY']
    next_signing_key = os.environ['QSTASH_NEXT_SIGNING_KEY']

    headers = event['headers']
    signature = headers['upstash-signature']
    url = "https://{}{}".format(event["requestContext"]["domainName"], event["rawPath"])
    body = None
    if 'body' in event:
        body = event['body']


    # check verification now
    try:
        verify(signature, current_signing_key, body, url)
    except Exception as e:
        print("Failed to verify signature with current signing key:", e)
        try:
            verify(signature, next_signing_key, body, url)
        except Exception as e2:
            return {
                "statusCode": 400,
                "body": json.dumps({
                    "error": str(e2),
                }),
            }


    # Your logic here...

    return {
        "statusCode": 200,
        "body": json.dumps({
            "message": "ok",
        }),
    }

----------------------------------------

TITLE: Pausing Queue with Curl
DESCRIPTION: Makes a POST request to pause a queue using curl command line tool. Requires authorization token for authentication.

LANGUAGE: shell
CODE:
curl -X POST https://qstash.upstash.io/v2/queues/queue_1234/pause \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: QStash Message Response Format
DESCRIPTION: Example JSON response showing the message structure returned by the API. Includes message ID, topic name, URL, method, headers, body, and creation timestamp.

LANGUAGE: json
CODE:
{
  "messageId": "msg_123",
  "topicName": "myTopic",
  "url":"https://example.com",
  "method": "POST",
  "header": {
    "My-Header": ["my-value"]
  },
  "body": "{\"foo\":\"bar\"}",
  "createdAt": 1620000000000
}

----------------------------------------

TITLE: Initializing Go Project for QStash Webhook Reception
DESCRIPTION: Commands to create a new Go project directory and initialize the module for receiving QStash webhooks.

LANGUAGE: bash
CODE:
mkdir flyio-go
cd flyio-go
go mod init flyio-go

----------------------------------------

TITLE: Retrieving QStash Queues with Python
DESCRIPTION: Shows how to get all queues using Python requests library with bearer token authentication.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.get(
  'https://qstash.upstash.io/v2/queues',
  headers=headers
)

----------------------------------------

TITLE: Cancelling a QStash Message using cURL
DESCRIPTION: This snippet demonstrates how to cancel a QStash message using a cURL command. It sends a DELETE request to the QStash API endpoint with the message ID and authorization token.

LANGUAGE: sh
CODE:
curl -XDELETE https://qstash.upstash.io/v2/messages/msg_123 \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Importing Required Packages for QStash Webhook Handling in Go
DESCRIPTION: Go code snippet showing the necessary package imports for handling QStash webhooks, including crypto, encoding, and JWT libraries.

LANGUAGE: go
CODE:
package main

import (
	"crypto/sha256"
	"encoding/base64"
	"fmt"
	"github.com/golang-jwt/jwt/v4"
	"io"
	"net/http"
	"os"
	"time"
)

----------------------------------------

TITLE: Fetching QStash Queues with Node.js
DESCRIPTION: Demonstrates how to fetch all queues using Node.js fetch API with bearer token authentication.

LANGUAGE: javascript
CODE:
const response = await fetch("https://qstash.upstash.io/v2/queues", {
  headers: {
    Authorization: "Bearer <token>",
  },
});

----------------------------------------

TITLE: Cancelling a QStash Message using Node.js
DESCRIPTION: This snippet shows how to cancel a QStash message using Node.js. It uses the fetch API to send a DELETE request to the QStash endpoint with the message ID and authorization token.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/messages/msg_123', {
  method: 'DELETE',
  headers: {
    'Authorization': 'Bearer <token>'
  }
});

----------------------------------------

TITLE: Wrangler Configuration
DESCRIPTION: Configuration for wrangler.toml file to set up QStash credentials manually.

LANGUAGE: yaml
CODE:
[vars]
QSTASH_URL="REPLACE_HERE"
QSTASH_TOKEN="REPLACE_HERE"
QSTASH_CURRENT_SIGNING_KEY="REPLACE_HERE"
QSTASH_NEXT_SIGNING_KEY="REPLACE_HERE"

----------------------------------------

TITLE: Querying QStash Queues with cURL
DESCRIPTION: Makes an HTTP GET request to list all queues using cURL with bearer token authentication.

LANGUAGE: sh
CODE:
curl https://qstash.upstash.io/v2/queues \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Bulk Cancel Messages using Node.js
DESCRIPTION: Example of cancelling multiple messages using Node.js fetch API

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/messages', {
  method: 'DELETE',
  headers: {
    'Authorization': 'Bearer <token>',
    'Content-Type': 'application/json',
    body: {
        messageIds: [
            "msg_id_1",
            "msg_id_2",
            "msg_id_3",
        ],
    },
  }
});

----------------------------------------

TITLE: Enqueueing Chat Completion Request with Anthropic
DESCRIPTION: Shows how to enqueue an LLM request for asynchronous processing using QStash's queue feature with Anthropic as the provider.

LANGUAGE: typescript
CODE:
import { anthropic, Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });

const result = await client.queue({ queueName: "your-queue-name" }).enqueueJSON({
  api: { name: "llm", provider: anthropic({ token: "<ANTHROPIC_TOKEN>" }) },
  body: {
    model: "claude-3-5-sonnet-20241022",
    messages: [
      {
        role: "user",
        content: "Generate ideas for a marketing campaign.",
      },
    ],
  },
  callback: "https://example.com/callback",
});

console.log(result);

----------------------------------------

TITLE: Retrieving Schedule Details using cURL
DESCRIPTION: Makes a GET request to fetch schedule details using cURL with bearer token authentication.

LANGUAGE: shell
CODE:
curl https://qstash.upstash.io/v2/schedules/scd_1234 \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Curl Request for QStash Logs
DESCRIPTION: Basic curl command to fetch logs from QStash API using bearer token authentication.

LANGUAGE: shell
CODE:
curl https://qstash.upstash.io/v2/logs \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Batch Processing LLM Requests with Anthropic
DESCRIPTION: Demonstrates how to send multiple LLM requests in a batch using QStash's batchJSON feature. Each request includes its own callback URL.

LANGUAGE: typescript
CODE:
import { anthropic, Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });

const result = await client.batchJSON([
  {
    api: { name: "llm", provider: anthropic({ token: "<ANTHROPIC_TOKEN>" }) },
    body: {
      model: "claude-3-5-sonnet-20241022",
      messages: [
        {
          role: "user",
          content: "Describe the latest in AI research.",
        },
      ],
    },
    callback: "https://example.com/callback1",
  },
  {
    api: { name: "llm", provider: anthropic({ token: "<ANTHROPIC_TOKEN>" }) },
    body: {
      model: "claude-3-5-sonnet-20241022",
      messages: [
        {
          role: "user",
          content: "Outline the future of remote work.",
        },
      ],
    },
    callback: "https://example.com/callback2",
  },
]);

console.log(result);

----------------------------------------

TITLE: Retrieving a Queue with Node.js
DESCRIPTION: This snippet shows how to retrieve a queue using Node.js. It uses the fetch API to send a GET request with an authorization header.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/queue/my-queue', {
  headers: {
    'Authorization': 'Bearer <token>'
  }
});

----------------------------------------

TITLE: Go QStash Logs Request
DESCRIPTION: Go implementation using net/http to retrieve logs from QStash API.

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/logs", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Publishing Message to URL Group using cURL
DESCRIPTION: This cURL command demonstrates how to publish a message to a URL group in QStash. It sends a POST request to the QStash publish endpoint, specifying the URL group name instead of a single URL.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/my-url-group'

----------------------------------------

TITLE: Retrieving a Queue with cURL
DESCRIPTION: This snippet demonstrates how to retrieve a queue using cURL. It sends a GET request to the QStash API with an authorization token.

LANGUAGE: sh
CODE:
curl https://qstash.upstash.io/v2/queues/my-queue \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Chat Completion Regular Response Example
DESCRIPTION: Shows the JSON structure of a successful chat completion response when 'stream' is false or not set. Includes details like completion ID, choices, and usage statistics.

LANGUAGE: json
CODE:
{
  "id": "cmpl-abefcf66fae945b384e334e36c7fdc97",
  "object": "chat.completion",
  "created": 1717483987,
  "model": "meta-llama/Meta-Llama-3-8B-Instruct",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "The capital of Turkey is Ankara."
      },
      "logprobs": null,
      "finish_reason": "stop",
      "stop_reason": null
    }
  ],
  "usage": {
    "prompt_tokens": 18,
    "total_tokens": 26,
    "completion_tokens": 8
  }
}

----------------------------------------

TITLE: QStash Signature Verification in Go
DESCRIPTION: Implementation of QStash signature verification using the official Go SDK. Creates a new receiver instance and verifies request signatures with provided options.

LANGUAGE: go
CODE:
import "github.com/qstash/qstash-go"

receiver := qstash.NewReceiver("<CURRENT_SIGNING_KEY>", "NEXT_SIGNING_KEY")

// ... in your request handler

signature := req.Header.Get("Upstash-Signature")
body, err := io.ReadAll(req.Body)
// handle err

err := receiver.Verify(qstash.VerifyOptions{
    Signature: signature,
    Body:      string(body),
    Url:       "YOUR-SITE-URL", // optional
})
// handle err

----------------------------------------

TITLE: Publishing a Message with Node.js
DESCRIPTION: This snippet shows how to publish a message to QStash using Node.js fetch API. It sets up the request with appropriate headers and body content.

LANGUAGE: javascript
CODE:
const response = await fetch(
  "https://qstash.upstash.io/v2/publish/https://www.example.com",
  {
    method: "POST",
    headers: {
      Authorization: "Bearer <token>",
      "Content-Type": "application/json",
      "Upstash-Method": "POST",
      "Upstash-Delay": "10s",
      "Upstash-Retries": "3",
      "Upstash-Forward-Custom-Header": "custom-value",
    },
    body: JSON.stringify({
      message: "Hello, World!",
    }),
  }
);

----------------------------------------

TITLE: Chat Completion Streaming Response Example
DESCRIPTION: Illustrates the format of a streaming chat completion response when 'stream' is set to true. Shows multiple data chunks and the final [DONE] message.

LANGUAGE: json
CODE:
data: {"id":"cmpl-dfc1ad80d0254c2aaf3e7775d1830c9d","object":"chat.completion.chunk","created":1717484084,"model":"meta-llama/Meta-Llama-3-8B-Instruct","choices":[{"index":0,"delta":{"role":"assistant"},"logprobs":null,"finish_reason":null}]}

data: {"id":"cmpl-dfc1ad80d0254c2aaf3e7775d1830c9d","object":"chat.completion.chunk","created":1717484084,"model":"meta-llama/Meta-Llama-3-8B-Instruct","choices":[{"index":0,"delta":{"content":"The"},"logprobs":null,"finish_reason":null}]}

data: {"id":"cmpl-dfc1ad80d0254c2aaf3e7775d1830c9d","object":"chat.completion.chunk","created":1717484084,"model":"meta-llama/Meta-Llama-3-8B-Instruct","choices":[{"index":0,"delta":{"content":" capital"},"logprobs":null,"finish_reason":null}]}

data: {"id":"cmpl-dfc1ad80d0254c2aaf3e7775d1830c9d","object":"chat.completion.chunk","created":1717484084,"model":"meta-llama/Meta-Llama-3-8B-Instruct","choices":[{"index":0,"delta":{"content":" of"},"logprobs":null,"finish_reason":null}]}

data: {"id":"cmpl-dfc1ad80d0254c2aaf3e7775d1830c9d","object":"chat.completion.chunk","created":1717484084,"model":"meta-llama/Meta-Llama-3-8B-Instruct","choices":[{"index":0,"delta":{"content":" Turkey"},"logprobs":null,"finish_reason":null}]}

data: {"id":"cmpl-dfc1ad80d0254c2aaf3e7775d1830c9d","object":"chat.completion.chunk","created":1717484084,"model":"meta-llama/Meta-Llama-3-8B-Instruct","choices":[{"index":0,"delta":{"content":" is"},"logprobs":null,"finish_reason":null}]}

data: {"id":"cmpl-dfc1ad80d0254c2aaf3e7775d1830c9d","object":"chat.completion.chunk","created":1717484084,"model":"meta-llama/Meta-Llama-3-8B-Instruct","choices":[{"index":0,"delta":{"content":" Ankara"},"logprobs":null,"finish_reason":null}]}

data: {"id":"cmpl-dfc1ad80d0254c2aaf3e7775d1830c9d","object":"chat.completion.chunk","created":1717484084,"model":"meta-llama/Meta-Llama-3-8B-Instruct","choices":[{"index":0,"delta":{"content":"."},"logprobs":null,"finish_reason":null}]}

data: {"id":"cmpl-dfc1ad80d0254c2aaf3e7775d1830c9d","object":"chat.completion.chunk","created":1717484084,"model":"meta-llama/Meta-Llama-3-8B-Instruct","choices":[{"index":0,"delta":{"content":""},"finish_reason":"stop"}],"usage":{"prompt_tokens":18,"total_tokens":26,"completion_tokens":8}}

data: [DONE]

----------------------------------------

TITLE: Updating Signing Keys in Upstash QStash
DESCRIPTION: This snippet demonstrates the logic for rolling signing keys in Upstash QStash. It shows how the current key is replaced by the next key, and a new next key is generated.

LANGUAGE: plaintext
CODE:
currentKey = nextKey
nextKey = generateNewKey()

----------------------------------------

TITLE: Retrieving Messages with Node.js
DESCRIPTION: Fetch API request to retrieve a message by ID using Node.js. Requires Bearer token authentication.

LANGUAGE: javascript
CODE:
const response = await fetch("https://qstash.upstash.io/v2/messages/msg_123", {
  headers: {
    Authorization: "Bearer <token>",
  },
});

----------------------------------------

TITLE: Query QStash Events with cURL
DESCRIPTION: Demonstrates how to make a GET request to the QStash events API using cURL with bearer token authentication

LANGUAGE: shell
CODE:
curl https://qstash.upstash.io/v2/events \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Starting ngrok HTTP Tunnel for QStash Development
DESCRIPTION: This command starts an ngrok HTTP tunnel on port 3000, creating a public URL for your local QStash development environment. The output includes the forwarding URL to use in QStash.

LANGUAGE: bash
CODE:
ngrok http 3000

----------------------------------------

TITLE: Sending Chat Completion Request with cURL
DESCRIPTION: Demonstrates how to send a POST request to create a chat completion using cURL. The request includes the model name and a user message.

LANGUAGE: curl
CODE:
curl "https://qstash.upstash.io/llm/v1/chat/completions" \
    -X POST \
    -H "Authorization: Bearer QSTASH_TOKEN" \
    -H "Content-Type: application/json" \
    -d '{
        "model": "meta-llama/Meta-Llama-3-8B-Instruct",
        "messages": [
            {
                "role": "user",
                "content": "What is the capital of Turkey?"
            }
        ]
    }'

----------------------------------------

TITLE: Query QStash Events with Python
DESCRIPTION: Example of querying the QStash events API using Python requests library with bearer token authentication

LANGUAGE: python
CODE:
import requests
headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.get(
  'https://qstash.upstash.io/v2/events',
   headers=headers
)

----------------------------------------

TITLE: Publishing a Message to QStash via ngrok Tunnel
DESCRIPTION: This curl command demonstrates how to publish a message to QStash using the ngrok forwarding URL. Replace 'XXX' with your QStash API key and update the ngrok URL and API path as needed.

LANGUAGE: bash
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://e02f-2a02-810d-af40-5284-b139-58cc-89df-b740.eu.ngrok.io/api/webhooks'

----------------------------------------

TITLE: Query QStash Events with Node.js
DESCRIPTION: Shows how to fetch events from the QStash API using Node.js fetch API with bearer token authentication

LANGUAGE: javascript
CODE:
const response = await fetch("https://qstash.upstash.io/v2/events", {
  headers: {
    Authorization: "Bearer <token>",
  },
});

----------------------------------------

TITLE: Query QStash Events with Go
DESCRIPTION: Demonstrates how to query the QStash events API using Go's http client with bearer token authentication

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/events", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Installing and Running QStash CLI via NPX
DESCRIPTION: Commands to install and run the QStash CLI using NPX (Node Package Executable). Includes an option to start the server on a different port.

LANGUAGE: javascript
CODE:
npx @upstash/qstash-cli dev

// Start on a different port
npx @upstash/qstash-cli dev -port=8081

----------------------------------------

TITLE: Enqueuing Message with Python
DESCRIPTION: Example of enqueuing a message to QStash queue using Python requests library with custom headers and JSON payload

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
    'Content-Type': 'application/json',
    'Upstash-Method': 'POST',
    'Upstash-Retries': '3',
    'Upstash-Forward-Custom-Header': 'custom-value',
}

json_data = {
    'message': 'Hello, World!',
}

response = requests.post(
  'https://qstash.upstash.io/v2/enqueue/myQueue/https://www.example.com',
   headers=headers,
   json=json_data
)

----------------------------------------

TITLE: Enqueuing Message with cURL
DESCRIPTION: Example of enqueuing a message to QStash queue using cURL with custom headers and JSON payload

LANGUAGE: shell
CODE:
curl -X POST "https://qstash.upstash.io/v2/enqueue/myQueue/https://www.example.com" \
  -H "Authorization: Bearer <token>" \
  -H "Content-Type: application/json" \
  -H "Upstash-Method: POST" \
  -H "Upstash-Retries: 3" \
  -H "Upstash-Forward-Custom-Header: custom-value" \
  -d '{"message":"Hello, World!"}'

----------------------------------------

TITLE: QStash CLI Help Command
DESCRIPTION: Usage information for the QStash CLI 'dev' command, showing available options and their descriptions.

LANGUAGE: javascript
CODE:
$ ./qstash dev --help
Usage of dev:
  -port int
        The port to start HTTP server at [env QSTASH_DEV_PORT] (default 8080)
  -quota string
        The quota of users [env QSTASH_DEV_QUOTA] (default "payg")

----------------------------------------

TITLE: Deleting Multiple DLQ Messages using Node.js
DESCRIPTION: Example Node.js code to delete multiple messages from the DLQ. It uses the fetch API to send a DELETE request with authentication token and a JSON payload containing the list of DLQ message IDs to remove.

LANGUAGE: javascript
CODE:
const response = await fetch("https://qstash.upstash.io/v2/dlq", {
  method: "DELETE",
  headers: {
    Authorization: "Bearer <token>",
    "Content-Type": "application/json",
  },
  body: {
    dlqIds: [
      "11111-0",
      "22222-0",
      "33333-0",
    ],
  },
});

----------------------------------------

TITLE: Enqueuing Message with Node.js
DESCRIPTION: Example of enqueuing a message to QStash queue using Node.js fetch API with custom headers and JSON payload

LANGUAGE: javascript
CODE:
const response = await fetch(
  "https://qstash.upstash.io/v2/enqueue/myQueue/https://www.example.com",
  {
    method: "POST",
    headers: {
      Authorization: "Bearer <token>",
      "Content-Type": "application/json",
      "Upstash-Method": "POST",
      "Upstash-Retries": "3",
      "Upstash-Forward-Custom-Header": "custom-value",
    },
    body: JSON.stringify({
      message: "Hello, World!",
    }),
  }
);

----------------------------------------

TITLE: Publishing Messages with Failure Callbacks - cURL
DESCRIPTION: Example of publishing a message to QStash with a failure callback URL using cURL. Demonstrates setting headers for authorization and failure callback configuration.

LANGUAGE: bash
CODE:
curl -X POST \
  https://qstash.upstash.io/v2/publish/<DESTINATION_URL> \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer <QSTASH_TOKEN>' \
  -H 'Upstash-Failure-Callback: <CALLBACK_URL>' \
  -d '{ "hello": "world" }'

----------------------------------------

TITLE: Listing All Schedules in QStash
DESCRIPTION: Demonstrates how to retrieve a list of all scheduled tasks in QStash. This is useful for managing and reviewing your scheduled operations.

LANGUAGE: shell
CODE:
curl https://qstash.upstash.io/v2/schedules \
    -H "Authorization: Bearer XXX"

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });
const scheds = await client.schedules.list();

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.schedule.list()
# Async version is also available

----------------------------------------

TITLE: Enqueuing Message with Go
DESCRIPTION: Example of enqueuing a message to QStash queue using Go's http client with custom headers and JSON payload

LANGUAGE: go
CODE:
var data = strings.NewReader(`{"message":"Hello, World!"}`)
req, err := http.NewRequest("POST", "https://qstash.upstash.io/v2/enqueue/myQueue/https://www.example.com", data)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
req.Header.Set("Content-Type", "application/json")
req.Header.Set("Upstash-Method", "POST")
req.Header.Set("Upstash-Retries", "3")
req.Header.Set("Upstash-Forward-Custom-Header", "custom-value")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Adding Endpoints to URL Group using cURL
DESCRIPTION: Demonstrates how to add multiple endpoints to a URL group using a cURL POST request. Requires authentication via Bearer token and accepts JSON payload with endpoint details.

LANGUAGE: sh
CODE:
curl -XPOST https://qstash.upstash.io/v2/topics/:urlGroupName/endpoints \
  -H "Authorization: Bearer <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "endpoints": [
      {
        "name": "endpoint1",
        "url": "https://example.com"
      },
      {
        "name": "endpoint2",
        "url": "https://somewhere-else.com"
      }
    ]
  }'

----------------------------------------

TITLE: Setting Callback URLs for QStash Messages
DESCRIPTION: Demonstrates how to set callback URLs for success and failure scenarios when publishing messages with QStash. This allows you to receive notifications about the message delivery status.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Callback: https://example.com/callback" \
    -H "Upstash-Failure-Callback: https://example.com/failure" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://example.com'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.publishJSON({
  url: "https://example.com",
  body: {
    hello: "world",
  },
  callback: "https://example.com/callback",
  failureCallback: "https://example.com/failure",
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://example.com",
    body={
        "hello": "world",
    },
    callback="https://example.com/callback",
    failure_callback="https://example.com/failure",
)
# Async version is also available

----------------------------------------

TITLE: QStash API Response Examples
DESCRIPTION: Example JSON responses from the QStash API showing both single message and message group responses

LANGUAGE: json
CODE:
{
  "messageId": "msd_1234",
  "url": "https://www.example.com"
}

LANGUAGE: json
CODE:
[
  {
    "messageId": "msd_1234",
    "url": "https://www.example.com"
  },
  {
    "messageId": "msd_5678",
    "url": "https://www.somewhere-else.com",
    "deduplicated": true
  }
]

----------------------------------------

TITLE: Adding Endpoints to URL Group using Python
DESCRIPTION: Demonstrates adding multiple endpoints to a URL group using Python requests library. Shows proper request configuration including headers and JSON payload formatting.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
    'Content-Type': 'application/json',
}

json_data = {
    'endpoints': [
        {
            'name': 'endpoint1',
            'url': 'https://example.com',
        },
        {
            'name': 'endpoint2',
            'url': 'https://somewhere-else.com',
        },
    ],
}

response = requests.post(
  'https://qstash.upstash.io/v2/topics/:urlGroupName/endpoints',
  headers=headers, 
  json=json_data
)

----------------------------------------

TITLE: Scheduling Daily Tasks with QStash
DESCRIPTION: Demonstrates how to schedule a task to run once a day using QStash. This uses the cron syntax to specify the schedule.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Upstash-Cron: 0 0 * * *" \
    -H "Content-type: application/json" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/schedules/https://example.com'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.schedules.create({
  destination: "https://example.com",
  cron: "0 0 * * *",
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.schedule.create(
    destination="https://example.com",
    cron="0 0 * * *",
)
# Async version is also available

----------------------------------------

TITLE: Removing Endpoints from URL Group using Python
DESCRIPTION: This snippet demonstrates how to remove endpoints from a URL Group using Python. It utilizes the requests library to send a DELETE request to the QStash API with the necessary headers and JSON data.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
    'Content-Type': 'application/json',
}

data = {
   "endpoints": [
      {
        "name": "endpoint1",
      },
      {
        "url": "https://somewhere-else.com"
      }
    ]
}

response = requests.delete(
  'https://qstash.upstash.io/v2/topics/:urlGroupName/endpoints',
  headers=headers,
  data=data
)

----------------------------------------

TITLE: Adding Endpoints to URL Group using Go
DESCRIPTION: Shows how to add multiple endpoints to a URL group using Go's HTTP client. Includes error handling and proper request setup with headers and JSON payload.

LANGUAGE: go
CODE:
var data = strings.NewReader(`{
  "endpoints": [
    {
      "name": "endpoint1",
      "url": "https://example.com"
    },
    {
      "name": "endpoint2",
      "url": "https://somewhere-else.com"
    }
  ]
}`)
req, err := http.NewRequest("POST", "https://qstash.upstash.io/v2/topics/:urlGroupName/endpoints", data)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
req.Header.Set("Content-Type", "application/json")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Adding Custom Headers to QStash Messages
DESCRIPTION: Shows how to add custom headers to messages published through QStash. These headers will be forwarded to the destination endpoint.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H 'Upstash-Forward-My-Header: my-value' \
    -H "Content-type: application/json" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://example.com'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.publishJSON({
  url: "https://example.com",
  body: {
    hello: "world",
  },
  headers: {
    "My-Header": "my-value",
  },
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://example.com",
    body={
        "hello": "world",
    },
    headers={
        "My-Header": "my-value",
    },
)
# Async version is also available

----------------------------------------

TITLE: Removing Endpoints from URL Group using Go
DESCRIPTION: This snippet shows how to remove endpoints from a URL Group using Go. It creates a DELETE request with the required headers and JSON payload, then sends it to the QStash API using the default HTTP client.

LANGUAGE: go
CODE:
var data = strings.NewReader(`{
  "endpoints": [
    {
      "name": "endpoint1",
    },
    {
      "url": "https://somewhere-else.com"
    }
  ]
}`)
req, err := http.NewRequest("DELETE", "https://qstash.upstash.io/v2/topics/:urlGroupName/endpoints", data)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
req.Header.Set("Content-Type", "application/json")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Retrieving URL Group with cURL
DESCRIPTION: This snippet demonstrates how to retrieve a URL Group using cURL. It sends a GET request to the QStash API endpoint with the URL Group name and includes an authorization token in the header.

LANGUAGE: sh
CODE:
curl https://qstash.upstash.io/v2/topics/my-url-group \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Publishing a Delayed Message with QStash
DESCRIPTION: Demonstrates how to add a delay to a message before it's published. QStash will wait for the specified time (5 minutes in this example) before sending the message to the endpoint.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Delay: 5m" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/https://example.com'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.publishJSON({
  url: "https://example.com",
  body: {
    hello: "world",
  },
  delay: 300,
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://example.com",
    body={
        "hello": "world",
    },
    delay="5m",
)
# Async version is also available

----------------------------------------

TITLE: Listing URL Groups with cURL
DESCRIPTION: This snippet demonstrates how to list URL Groups using a cURL command. It sends a GET request to the QStash API endpoint with an authorization bearer token.

LANGUAGE: sh
CODE:
curl https://qstash.upstash.io/v2/topics \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: URL Group API Response Example
DESCRIPTION: This snippet provides an example of the JSON response returned by the QStash API when retrieving a URL Group. It includes the creation and update timestamps, the group name, and an array of endpoints associated with the group.

LANGUAGE: json
CODE:
{
 
  "createdAt": 1623345678001,
  "updatedAt": 1623345678001,
  "name": "my-url-group",
  "endpoints": [
    {
      "name": "my-endpoint",
      "url": "https://my-endpoint.com"
    }
  ]
}

----------------------------------------

TITLE: Publishing a Message to a URL Group with QStash
DESCRIPTION: Shows how to publish a message to multiple endpoints using a URL Group in QStash. This demonstrates the fan-out pattern for message distribution.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/publish/myUrlGroup'

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });
await client.publishJSON({
  urlGroup: "myUrlGroup",
  body: {
    hello: "world",
  },
});

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url_group="my-url-group",
    body={
        "hello": "world",
    },
)
# Async version is also available

----------------------------------------

TITLE: Listing URL Groups with Python
DESCRIPTION: This snippet demonstrates how to list URL Groups using Python. It uses the requests library to send a GET request to the QStash API endpoint with an authorization header.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.get(
  'https://qstash.upstash.io/v2/topics',
  headers=headers
)

----------------------------------------

TITLE: Listing URL Groups with Go
DESCRIPTION: This snippet shows how to list URL Groups using Go. It creates a new HTTP request with the GET method and sets the authorization header before sending the request to the QStash API endpoint.

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/topics", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Creating URL Group with Multiple Endpoints in QStash
DESCRIPTION: Demonstrates how to create a URL group and add multiple endpoints using the QStash client. Requires QStash token for authentication.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const urlGroups = client.urlGroups;
await urlGroups.addEndpoints({
  name: "url_group_name",
  endpoints: [
    { url: "https://my-endpoint-1" },
    { url: "https://my-endpoint-2" },
  ],
});

----------------------------------------

TITLE: Retrieving QStash Signing Keys with cURL
DESCRIPTION: Makes a GET request to fetch signing keys using cURL. Requires bearer token authentication in the request header.

LANGUAGE: sh
CODE:
curl https://qstash.upstash.io/v2/keys \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Removing URL Group using Node.js
DESCRIPTION: This snippet shows how to remove a URL group using Node.js. It uses the fetch API to send a DELETE request to the QStash API endpoint with the required authorization header.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/topics/my-url-group', {
  method: 'DELETE',
  headers: {
    'Authorization': 'Bearer <token>'
  }
});

----------------------------------------

TITLE: Publishing HTML Content with QStash in Python
DESCRIPTION: This example shows how to publish HTML content instead of JSON using QStash. It sets the content type to 'text/html'.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.message.publish(
    url="https://my-api...",
    body="<html><body><h1>Hello World</h1></body></html>",
    content_type="text/html",
)

----------------------------------------

TITLE: Authenticating QStash API Requests with Bearer Token in Bash
DESCRIPTION: This snippet demonstrates how to authenticate a request to the QStash API using a Bearer Token in the request header. The QSTASH_TOKEN should be obtained from the Upstash console.

LANGUAGE: bash
CODE:
curl https://qstash.upstash.io/v2/publish/... \
  -H "Authorization: Bearer <QSTASH_TOKEN>"

----------------------------------------

TITLE: Removing URL Group using Python
DESCRIPTION: This snippet demonstrates how to remove a URL group using Python. It utilizes the requests library to send a DELETE request to the QStash API endpoint with the necessary authorization header.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.delete(
  'https://qstash.upstash.io/v2/topics/my-url-group', 
  headers=headers
)

----------------------------------------

TITLE: Configuring Retries for QStash Message in Python
DESCRIPTION: This snippet demonstrates how to configure the number of retries for a QStash message. The maximum number of retries depends on the QStash plan.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    retries=1,
)

----------------------------------------

TITLE: Authenticating QStash API Requests with Query Parameter in Bash
DESCRIPTION: This snippet shows how to authenticate a request to the QStash API using the qstash_token query parameter. This method is useful in environments where setting the header is not possible.

LANGUAGE: bash
CODE:
curl https://qstash.upstash.io/v2/publish/...?qstash_token=<QSTASH_TOKEN>

----------------------------------------

TITLE: Removing URL Group using Go
DESCRIPTION: This snippet shows how to remove a URL group using Go. It creates a new DELETE request to the QStash API endpoint, sets the required authorization header, and sends the request using the default HTTP client.

LANGUAGE: go
CODE:
req, err := http.NewRequest("DELETE", "https://qstash.upstash.io/v2/topics/my-url-group", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Publishing Message with Callback URL and Custom Method in Python
DESCRIPTION: This example illustrates how to publish a message with a callback URL for long-running functions. It also shows how to change the HTTP method to GET for the QStash request.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    callback="https://my-callback...",
    failure_callback="https://my-failure-callback...",
    method="GET",
)

----------------------------------------

TITLE: Publishing a Message with Python
DESCRIPTION: This snippet demonstrates how to publish a message to QStash using Python's requests library. It sets up the headers and JSON data for the POST request.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
    'Content-Type': 'application/json',
    'Upstash-Method': 'POST',
    'Upstash-Delay': '10s',
    'Upstash-Retries': '3',
    'Upstash-Forward-Custom-Header': 'custom-value',
}

json_data = {
    'message': 'Hello, World!',
}

response = requests.post(
  'https://qstash.upstash.io/v2/publish/https://www.example.com',
   headers=headers,
   json=json_data
)

----------------------------------------

TITLE: Removing Endpoints from URL Group using cURL
DESCRIPTION: This snippet demonstrates how to remove endpoints from a URL Group using a cURL command. It sends a DELETE request to the QStash API with the necessary headers and JSON payload.

LANGUAGE: sh
CODE:
curl -XDELETE https://qstash.upstash.io/v2/topics/:urlGroupName/endpoints \
  -H "Authorization: Bearer <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "endpoints": [
      {
        "name": "endpoint1",
      },
      {
        "url": "https://somewhere-else.com"
      }
    ]
  }'

----------------------------------------

TITLE: Importing Required Python Modules for QStash Webhook Handling
DESCRIPTION: Python import statements for necessary modules to handle QStash webhooks in AWS Lambda.

LANGUAGE: python
CODE:
import json
import os
import hmac
import hashlib
import base64
import time
import jwt

----------------------------------------

TITLE: Publishing a Message with Go
DESCRIPTION: This snippet shows how to publish a message to QStash using Go's http package. It creates a new request with the necessary headers and sends it using the default HTTP client.

LANGUAGE: go
CODE:
var data = strings.NewReader(`{"message":"Hello, World!"}`)
req, err := http.NewRequest("POST", "https://qstash.upstash.io/v2/publish/https://www.example.com", data)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
req.Header.Set("Content-Type", "application/json")
req.Header.Set("Upstash-Method", "POST")
req.Header.Set("Upstash-Delay", "10s")
req.Header.Set("Upstash-Retries", "3")
req.Header.Set("Upstash-Forward-Custom-Header", "custom-value")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Removing Endpoints from URL Group using Node.js
DESCRIPTION: This snippet shows how to remove endpoints from a URL Group using Node.js. It uses the fetch API to send a DELETE request to the QStash API with the required headers and JSON body.

LANGUAGE: javascript
CODE:
const response = await fetch("https://qstash.upstash.io/v2/topics/:urlGroupName/endpoints", {
  method: "DELETE",
  headers: {
    Authorization: "Bearer <token>",
    "Content-Type": "application/json",
  },
  body: {
    endpoints: [
      {
        name: "endpoint1",
      },
      {
        url: "https://somewhere-else.com",
      },
    ],
  },
});

----------------------------------------

TITLE: Helicone Analytics Integration with QStash
DESCRIPTION: Demonstrates how to integrate Helicone analytics with QStash for LLM usage monitoring. Shows configuration for custom models with analytics integration.

LANGUAGE: typescript
CODE:
import { Client, custom } from "@upstash/qstash";

const client = new Client({
  token: "<QSTASH_TOKEN>",
});

await client.publishJSON({
  api: {
    name: "llm",
    provider: custom({
      token: "XXX",
      baseUrl: "https://api.together.xyz",
    }),
    analytics: { name: "helicone", token: process.env.HELICONE_API_KEY! },
  },
  body: {
    model: "meta-llama/Llama-3-8b-chat-hf",
    messages: [
      {
        role: "user",
        content: "hello",
      },
    ],
  },
  callback: "https://oz.requestcatcher.com/",
});

----------------------------------------

TITLE: Retrieving Message Logs from QStash
DESCRIPTION: Shows how to retrieve logs for all messages that have been published through QStash. This can be useful for monitoring and debugging purposes.

LANGUAGE: shell
CODE:
curl https://qstash.upstash.io/v2/logs \
    -H "Authorization: Bearer XXX"

LANGUAGE: typescript
CODE:
const client = new Client({ token: "<QSTASH_TOKEN>" });
const logs = await client.logs()

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.event.list()
# Async version is also available

----------------------------------------

TITLE: Getting QStash Signing Keys with Python
DESCRIPTION: Shows how to retrieve signing keys using Python requests library. Includes bearer token authentication.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.get(
  'https://qstash.upstash.io/v2/keys',
   headers=headers
)

----------------------------------------

TITLE: Enqueueing Chat Completion Request with QStash
DESCRIPTION: Shows how to enqueue a chat completion request to a specific queue in QStash for processing. Includes configuration for both JavaScript and Python implementations.

LANGUAGE: javascript
CODE:
import { Client, upstash } from "@upstash/qstash";

const client = new Client({
    token: "<QSTASH_TOKEN>",
});

const result = await client.queue({ queueName: "queue-name" }).enqueueJSON({
    api: { name: "llm", provider: openai({ token: "_OPEN_AI_TOKEN_"}) },
    body: {
        "model": "gpt-3.5-turbo",
        messages: [
            {
                role: "user",
                content: "Write a hello world program in Rust.",
            },
        ],
    },
    callback: "https://abc.requestcatcher.com",
});

console.log(result);

LANGUAGE: python
CODE:
from qstash import QStash
from qstash.chat import upstash

q = QStash("<QSTASH_TOKEN>")

result = q.message.enqueue_json(
    queue="queue-name",
    api={"name": "llm", "provider": openai("<OPENAI_API_KEY>")},
    body={
        "model": "gpt-3.5-turbo",
        "messages": [
            {
                "role": "user",
                "content": "Write a hello world program in Rust.",
            }
        ],
    },
    callback="https://abc.requestcatcher.com",
)

print(result)

----------------------------------------

TITLE: Installing QStash Client via NPM
DESCRIPTION: Command to install the QStash client library using NPM package manager

LANGUAGE: bash
CODE:
npm install @upstash/qstash

----------------------------------------

TITLE: Retrieving QStash Signing Keys with Go
DESCRIPTION: Demonstrates fetching signing keys using Go's HTTP client. Includes error handling and bearer token authentication.

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/keys", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Publishing JSON Message to URL Group using TypeScript
DESCRIPTION: This TypeScript code snippet shows how to use the Upstash QStash client to publish a JSON message to a URL group. It initializes the client with a token and sends a message to the specified URL group.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  urlGroup: "my-url-group",
  body: { "hello": "world" },
});

----------------------------------------

TITLE: Configuring Retry Policy for QStash Client in Python
DESCRIPTION: This code shows how to configure the retry policy for the QStash client. It sets the number of retries to 3 and defines a custom backoff function. This configuration applies to sending requests to QStash, not QStash's internal retry policy.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash(
    "<QSTASH_TOKEN>",
    retry={
        "retries": 3,
        "backoff": lambda retry_count: (2**retry_count) * 20,
    },
)

----------------------------------------

TITLE: Rotating QStash Signing Keys via Shell
DESCRIPTION: Makes a POST request to rotate signing keys using curl. Requires bearer token authentication.

LANGUAGE: shell
CODE:
curl https://qstash.upstash.io/v2/keys/rotate \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Publishing JSON Message with Custom Header using TypeScript
DESCRIPTION: This TypeScript code snippet shows how to use the Upstash QStash client to publish a JSON message with a custom header. It initializes the client with a token and sends a message to a specified URL.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://example.com",
  body: { "hello": "world" },
  headers: { "my-header": "my-value" },
});

----------------------------------------

TITLE: Listing All URL Groups in QStash
DESCRIPTION: Demonstrates how to retrieve and iterate through all URL groups in the QStash account. Displays the name and endpoints for each group.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
all_url_groups = client.url_group.list()

for url_group in all_url_groups:
    print(url_group.name, url_group.endpoints)

----------------------------------------

TITLE: Rotating QStash Signing Keys in Node.js
DESCRIPTION: Performs signing key rotation using the Fetch API in Node.js. Requires bearer token authentication.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/keys/rotate', {
  headers: {
    'Authorization': 'Bearer <token>'
  }
});

----------------------------------------

TITLE: Removing Endpoint from URL Group in QStash
DESCRIPTION: Shows how to remove a specific endpoint from an existing URL group. Requires the group name and endpoint URL to be removed.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const urlGroups = client.urlGroups;
await urlGroups.removeEndpoints({
  name: "urlGroupName",
  endpoints: [{ url: "https://my-endpoint-1" }],
});

----------------------------------------

TITLE: Rotating QStash Signing Keys in Go
DESCRIPTION: Implements signing key rotation using the net/http package in Go. Requires bearer token authentication and includes error handling.

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/keys/rotate", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Creating a QStash Schedule with Python
DESCRIPTION: This Python code demonstrates how to create a QStash schedule using the requests library. It sends a POST request to the QStash API with the necessary headers to set up a schedule for periodic message delivery.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
    'Upstash-Cron': '*/5 * * * *'
}

response = requests.post(
  'https://qstash.upstash.io/v2/schedules/https://www.example.com/endpoint',
   headers=headers
)

----------------------------------------

TITLE: Rotating QStash Signing Keys in Python
DESCRIPTION: This snippet shows how to rotate the signing keys using the QStash client library. It generates a new signing key pair and returns the updated current and next keys. A valid QStash token is required for authentication.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")
new_signing_key = client.signing_key.rotate()

print(new_signing_key.current, new_signing_key.next)

----------------------------------------

TITLE: Retrieving Schedule Details using Python
DESCRIPTION: Makes a GET request to fetch schedule details using Python requests library with bearer token authentication.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.get(
  'https://qstash.upstash.io/v2/schedules/scd_1234', 
  headers=headers
)

----------------------------------------

TITLE: Creating a QStash Schedule with Node.js
DESCRIPTION: This code snippet shows how to create a QStash schedule using Node.js. It uses the fetch API to send a POST request to the QStash API with the required headers for setting up a periodic message delivery schedule.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/schedules/https://www.example.com/endpoint', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer <token>',
    'Upstash-Cron': '*/5 * * * *'
  }
});

----------------------------------------

TITLE: Retrieving Paginated Events with QStash in Python
DESCRIPTION: This code snippet demonstrates how to retrieve all events from QStash using pagination with a cursor. It uses the QStash client to list events, continuously fetching and accumulating them until there are no more pages available.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH-TOKEN>")

all_events = []
cursor = None
while True:
    res = client.event.list(cursor=cursor)
    all_events.extend(res.events)
    cursor = res.cursor
    if cursor is None:
        break

----------------------------------------

TITLE: Retrieving Schedule Details using Go
DESCRIPTION: Performs a GET request to fetch schedule details using Go's http package with bearer token authentication.

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/schedules/scd_1234", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Creating a QStash Schedule with cURL
DESCRIPTION: This snippet demonstrates how to create a QStash schedule using a cURL command. It sends a POST request to the QStash API with the necessary headers to set up a schedule for periodic message delivery.

LANGUAGE: sh
CODE:
curl -XPOST https://qstash.upstash.io/v2/schedules/https://www.example.com/endpoint \
  -H "Authorization: Bearer <token>" \
  -H "Upstash-Cron: */5 * * * *"

----------------------------------------

TITLE: Implementing Database Cleanup Logic
DESCRIPTION: Python script that connects to Redis and implements the cleanup functionality by deleting all keys from the database.

LANGUAGE: python
CODE:
from upstash_redis import Redis

redis = Redis(url="https://YOUR_REDIS_URL", token="YOUR_TOKEN")

def delete_all_entries():
  keys = redis.keys("*") # Match all keys
  redis.delete(*keys)


delete_all_entries()

----------------------------------------

TITLE: Example Schedule Response Format
DESCRIPTION: Sample JSON response showing the structure of a schedule object including ID, creation time, cron expression, and delivery settings.

LANGUAGE: json
CODE:
{
  "scheduleId": "scd_1234",
  "createdAt": 1623345678001,
  "cron": "0 0 1 * *",
  "destination": "https://example.com",
  "method": "POST",
  "header": {
    "Content-Type": ["application/json"]
  },
  "body": "{\"message\":\"hello\"}",
  "retries": 3
}

----------------------------------------

TITLE: Resume Queue using Node.js Client
DESCRIPTION: Using the official QStash Node.js client to resume a queue. Requires @upstash/qstash package and a QStash token. For Node versions prior to 18, isomorphic-fetch polyfill is needed.

LANGUAGE: javascript
CODE:
import { Client } from "@upstash/qstash";
/**
 * Import a fetch polyfill only if you are using node prior to v18.
 * This is not necessary for nextjs, deno or cloudflare workers.
 */
import "isomorphic-fetch";

const c = new Client({
  token: "<QSTASH_TOKEN>",
});

c.queue({ queueName: "<QUEUE_NAME>" }).resume()

----------------------------------------

TITLE: Setting Environment Variables for QStash on Fly.io
DESCRIPTION: Commands to set the QStash signing keys as environment variables in the Fly.io deployment.

LANGUAGE: bash
CODE:
flyctl secrets set QSTASH_CURRENT_SIGNING_KEY=...
flyctl secrets set QSTASH_NEXT_SIGNING_KEY=...

----------------------------------------

TITLE: Fetching Schedules using JavaScript and Fetch API
DESCRIPTION: This code snippet shows how to make a GET request to the List Schedules API endpoint using JavaScript's Fetch API. It includes the required authorization header.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/schedules', {
  headers: {
    'Authorization': 'Bearer <token>'
  }
});

----------------------------------------

TITLE: Bulk Cancel Messages using Python
DESCRIPTION: Example of cancelling multiple messages using Python requests library

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
    'Content-Type': 'application/json',
}

data = {
  "messageIds": [
    "msg_id_1",
    "msg_id_2",
    "msg_id_3"
  ]
}

response = requests.delete(
  'https://qstash.upstash.io/v2/messages',
  headers=headers,
  data=data
)

----------------------------------------

TITLE: Publishing a Test Message to QStash Webhook
DESCRIPTION: cURL command to publish a test message to the QStash webhook endpoint, targeting the deployed Fly.io application.

LANGUAGE: bash
CODE:
curl --request POST "https://qstash.upstash.io/v2/publish/https://winter-cherry-9545.fly.dev" \
     -H "Authorization: Bearer <QSTASH_TOKEN>" \
     -H "Content-Type: application/json" \
     -d "{ \"hello\": \"world\"}"

----------------------------------------

TITLE: Retrieving Schedules with Python Requests Library
DESCRIPTION: This Python code demonstrates how to use the Requests library to send a GET request to the List Schedules API endpoint. It includes the necessary authorization header.

LANGUAGE: python
CODE:
import requests

headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.get(
  'https://qstash.upstash.io/v2/schedules', 
  headers=headers
)

----------------------------------------

TITLE: Response Format for Bulk Cancel Messages
DESCRIPTION: JSON response schema showing the number of messages cancelled

LANGUAGE: json
CODE:
{
  "cancelled": number
}

----------------------------------------

TITLE: Environment Configuration for QStash
DESCRIPTION: Required environment variables for QStash integration including token and signing keys.

LANGUAGE: bash
CODE:
# Copy all three from your QStash dashboard
QSTASH_TOKEN=
QSTASH_CURRENT_SIGNING_KEY=
QSTASH_NEXT_SIGNING_KEY=

----------------------------------------

TITLE: Querying Schedules API using Go's HTTP Client
DESCRIPTION: This Go code snippet illustrates how to create and send a GET request to the List Schedules API endpoint using Go's built-in HTTP client. It includes error handling and the required authorization header.

LANGUAGE: go
CODE:
req, err := http.NewRequest("GET", "https://qstash.upstash.io/v2/schedules", nil)
if err != nil {
  log.Fatal(err)
}
req.Header.Set("Authorization", "Bearer <token>")
resp, err := http.DefaultClient.Do(req)
if err != nil {
  log.Fatal(err)
}
defer resp.Body.Close()

----------------------------------------

TITLE: Batch Messages API Response Structure in JSON
DESCRIPTION: This snippet shows the structure of the response returned by the Upstash QStash batch API. It includes message IDs and URLs for each message in the batch, with nested arrays for URL group destinations.

LANGUAGE: json
CODE:
[
  [
    {
      "messageId": "msg_...",
      "url": "https://myUrlGroup-endpoint1.com"
    },
    {
      "messageId": "msg_...",
      "url": "https://myUrlGroup-endpoint2.com"
    }
  ],
  {
    "messageId": "msg_...",
  },
  {
    "messageId": "msg_..."
  },
  {
    "messageId": "msg_..."
  }
]

----------------------------------------

TITLE: Publishing Test Message
DESCRIPTION: cURL command to test the webhook by publishing a message to QStash.

LANGUAGE: bash
CODE:
curl --request POST "https://qstash.upstash.io/v2/publish/https://cloudflare-workers.upstash.workers.dev" \
     -H "Authorization: Bearer <QSTASH_TOKEN>" \
     -H "Content-Type: application/json" \
     -d "{ \"hello\": \"world\"}"

----------------------------------------

TITLE: Pausing QStash Schedule using cURL
DESCRIPTION: This snippet demonstrates how to pause a QStash schedule using a cURL command. It sends a POST request to the QStash API endpoint with the schedule ID and authorization token.

LANGUAGE: sh
CODE:
curl -X POST https://qstash.upstash.io/v2/schedules/scd_1234/pause \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: QStash Logs API Response
DESCRIPTION: Example JSON response from the QStash logs API showing the cursor and events structure.

LANGUAGE: json
CODE:
{
  "cursor": "1686652644442-12",
  "events":[
    {
      "time": "1686652644442",
      "messageId": "msg_123",
      "state": "delivered",
      "url": "https://example.com",
      "header": { "Content-Type": [ "application/x-www-form-urlencoded" ] },
      "body": "bWVyaGFiYSBiZW5pbSBhZGltIHNhbmNhcg=="
    }
  ] 
}

----------------------------------------

TITLE: Build Script Configuration
DESCRIPTION: Package.json script configuration for building and packaging Lambda function code.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build": "rm -rf ./dist; esbuild index.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=dist/index.js && cd dist && zip -r index.zip index.js*"
  }
}

----------------------------------------

TITLE: Pausing QStash Schedule using Node.js
DESCRIPTION: This snippet shows how to pause a QStash schedule using the Node.js client library. It initializes the QStash client with an API token and calls the pause method with the schedule ID.

LANGUAGE: javascript
CODE:
import { Client } from "@upstash/qstash";
/**
 * Import a fetch polyfill only if you are using node prior to v18.
 * This is not necessary for nextjs, deno or cloudflare workers.
 */
import "isomorphic-fetch";

const c = new Client({
  token: "<QSTASH_TOKEN>",
});

c.schedules.pause({
  schedule: "<SCHEDULE_ID>"
});

----------------------------------------

TITLE: Scheduling to a Queue with cURL
DESCRIPTION: This cURL command creates a schedule that adds an item to a specified queue in QStash at a scheduled time. It includes the queue name in the Upstash-Queue-Name header.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Cron: * * * * *" \
    -H "Upstash-Queue-Name: yourQueueName" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/schedules/https://example.com'

----------------------------------------

TITLE: QStash Test User Credentials
DESCRIPTION: Environment variables for four test users, including QStash URL, token, and signing keys for local development.

LANGUAGE: javascript
CODE:
QSTASH_URL=http://localhost:8080
QSTASH_TOKEN=eyJVc2VySUQiOiJkZWZhdWx0VXNlciIsIlBhc3N3b3JkIjoiZGVmYXVsdFBhc3N3b3JkIn0=
QSTASH_CURRENT_SIGNING_KEY=sig_7kYjw48mhY7kAjqNGcy6cr29RJ6r
QSTASH_NEXT_SIGNING_KEY=sig_5ZB6DVzB1wjE8S6rZ7eenA8Pdnhs

----------------------------------------

TITLE: Delete Schedule using curl
DESCRIPTION: Remove a schedule using curl command line with bearer token authentication.

LANGUAGE: sh
CODE:
curl -XDELETE https://qstash.upstash.io/v2/schedules/scd_123 \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Scheduling to a URL Group with cURL
DESCRIPTION: This cURL command creates a schedule for a URL group in QStash. It uses either the URL group ID or name in the URL path.

LANGUAGE: shell
CODE:
curl -XPOST \
    -H 'Authorization: Bearer XXX' \
    -H "Content-type: application/json" \
    -H "Upstash-Cron: * * * * *" \
    -d '{ "hello": "world" }' \
    'https://qstash.upstash.io/v2/schedules/<URL_GROUP_ID_OR_NAME>'

----------------------------------------

TITLE: Publishing Messages with Failure Callbacks - TypeScript
DESCRIPTION: Example of publishing a JSON message to QStash with a failure callback URL using the TypeScript client. Uses @upstash/qstash client library.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const res = await client.publishJSON({
  url: "https://my-api...",
  body: { hello: "world" },
  failureCallback: "https://my-callback...",
});

----------------------------------------

TITLE: Delete Schedule using Node.js
DESCRIPTION: Remove a schedule using Node.js fetch API with bearer token authentication.

LANGUAGE: javascript
CODE:
const response = await fetch('https://qstash.upstash.io/v2/schedules/scd_123', {
  method: 'DELETE',
  headers: {
    'Authorization': 'Bearer <token>'
  }
});

----------------------------------------

TITLE: Handling Chat-based Rate Limit Error in TypeScript
DESCRIPTION: This snippet illustrates how to handle a chat-based rate limit error when making a chat-related request using the QStash client. It uses the QstashChatRatelimitError to identify the specific error type and provides access to the resetRequests time for implementing appropriate retry or queueing strategies.

LANGUAGE: typescript
CODE:
import { QstashChatRatelimitError, Client, openai } from "@upstash/qstash";

try {
  // Example of a chat-related request that could hit the chat rate limit
  const client = new Client({
    token: "<QSTASH_TOKEN>",
  });

  const result = await client.publishJSON({
    api: {
      name: "llm",
      provider: openai({ token: process.env.OPENAI_API_KEY! }),
    },
    body: {
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "user",
          content: "Where is the capital of Turkey?",
        },
      ],
    },
    callback: "https://oz.requestcatcher.com/",
  });
} catch (error) {
  if (error instanceof QstashChatRatelimitError) {
    console.log("Chat rate limit exceeded. Retry after:", error.resetRequests);
    // Handle chat-specific rate limiting, perhaps by queueing requests
  } else {
    console.error("An unexpected error occurred:", error);
  }
}

----------------------------------------

TITLE: Publishing JSON Message to URL Group using Python
DESCRIPTION: This Python code snippet demonstrates how to use the QStash client to publish a JSON message to a URL group. It initializes the client with a token and publishes a message to the specified URL group.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url_group="my-url-group",
    body={
        "hello": "world",
    },
)

----------------------------------------

TITLE: Resuming Schedule with cURL
DESCRIPTION: HTTP POST request to resume a paused schedule using cURL. Requires an authorization token and schedule ID.

LANGUAGE: sh
CODE:
curl -X POST https://qstash.upstash.io/v2/schedules/scd_1234/resume \
  -H "Authorization: Bearer <token>"

----------------------------------------

TITLE: Installing Cloudflare CLI
DESCRIPTION: Commands to create a new Cloudflare Workers project using the create-cloudflare CLI tool.

LANGUAGE: shell
CODE:
npm create cloudflare@latest

LANGUAGE: shell
CODE:
yarn create cloudflare@latest

----------------------------------------

TITLE: Listing QStash Schedules
DESCRIPTION: Retrieves a list of all existing schedules. This is useful when you need to find the ID of a specific schedule for management operations.

LANGUAGE: shell
CODE:
curl \
    -H 'Authorization: Bearer XXX' \
    'https://qstash.upstash.io/v2/schedules'

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const client = new Client({ token: "<QSTASH_TOKEN>" });
const allSchedules = await client.schedules.list();

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.schedule.list()

----------------------------------------

TITLE: Resuming Schedule with Node.js
DESCRIPTION: Using the QStash Node.js client to resume a paused schedule. Requires the @upstash/qstash package and a QStash token.

LANGUAGE: javascript
CODE:
import { Client } from "@upstash/qstash";
/**
 * Import a fetch polyfill only if you are using node prior to v18.
 * This is not necessary for nextjs, deno or cloudflare workers.
 */
import "isomorphic-fetch";

const c = new Client({
  token: "<QSTASH_TOKEN>",
});

c.schedules.resume({
  schedule: "<SCHEDULE_ID>"
});

----------------------------------------

TITLE: Sending Batch Emails with Resend using QStash in TypeScript
DESCRIPTION: This snippet demonstrates how to send multiple emails in a batch using the qstash-js SDK with Resend. It shows how to enable batch sending and structure the email configurations as an array of objects.

LANGUAGE: typescript
CODE:
await client.publishJSON({
  api: {
    name: "email",
    provider: resend({ token: "<RESEND_TOKEN>", batch: true }),
  },
  body: [
    {
      from: "Acme <onboarding@resend.dev>",
      to: ["foo@gmail.com"],
      subject: "Hello World",
      html: "<h1>It works!</h1>",
    },
    {
      from: "Acme <onboarding@resend.dev>",
      to: ["bar@outlook.com"],
      subject: "World Hello",
      html: "<p>It works!</p>",
    },
  ],
});

----------------------------------------

TITLE: Resuming Schedule with Python
DESCRIPTION: Using the QStash Python client to resume a paused schedule. Requires the qstash package and a QStash token.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")

client.schedule.resume("<SCHEDULE_ID>")

----------------------------------------

TITLE: Publishing a Message with Callback using Python
DESCRIPTION: This snippet demonstrates how to use the QStash client in Python to publish a JSON message with a callback URL. It requires the qstash package.

LANGUAGE: python
CODE:
from qstash import QStash

client = QStash("<QSTASH_TOKEN>")
client.message.publish_json(
    url="https://my-api...",
    body={
        "hello": "world",
    },
    callback="https://my-callback...",
)

----------------------------------------

TITLE: Resuming Schedule with Go
DESCRIPTION: Using the QStash Go client to resume a paused schedule. Requires the qstash-go package and a QStash token.

LANGUAGE: go
CODE:
package main

import "github.com/upstash/qstash-go"

func main() {

	client := qstash.NewClient("<QSTASH_TOKEN>")

	// error checking is omitted for brevity
	err := client.Schedules().Resume("<SCHEDULE_ID>")
}

----------------------------------------

TITLE: Python QStash Logs Request
DESCRIPTION: Python implementation using requests library to fetch logs from QStash API.

LANGUAGE: python
CODE:
import requests
headers = {
    'Authorization': 'Bearer <token>',
}

response = requests.get(
  'https://qstash.upstash.io/v2/logs',
   headers=headers
)

----------------------------------------

TITLE: Deleting DLQ Message Using cURL
DESCRIPTION: Example of using cURL to delete a message from the QStash Dead Letter Queue. Requires an authorization token and the DLQ message ID. Returns 200 on success or 404 if message not found.

LANGUAGE: sh
CODE:
curl -X DELETE https://qstash.upstash.io/v2/dlq/my-dlq-id \
  -H "Authorization: Bearer <token>"