TITLE: Initializing Sentry SDK in Angular Standalone App
DESCRIPTION: This snippet shows how to initialize Sentry SDK in a standalone Angular application. It configures error tracking, performance monitoring, and session replay features.

LANGUAGE: typescript
CODE:
import { bootstrapApplication } from "@angular/platform-browser";
import { appConfig } from "./app/app.config";
import { AppComponent } from "./app/app.component";

import * as Sentry from "@sentry/angular";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Registers and configures the Tracing integration,
    // which automatically instruments your application to monitor its
    // performance, including custom Angular routing instrumentation
    Sentry.browserTracingIntegration(),
    // Registers the Replay integration,
    // which automatically captures Session Replays
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

bootstrapApplication(AppComponent, appConfig).catch((err) =>
  console.error(err)
);

----------------------------------------

TITLE: Initializing Sentry SDK in JavaScript
DESCRIPTION: This code initializes the Sentry SDK for error tracking. It uses the Sentry.init() method, which takes an object with configuration options. The most important option is the 'dsn' (Data Source Name), which is a unique identifier for your Sentry project.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___"
});

----------------------------------------

TITLE: Initializing Sentry Transaction with Custom Parameters in Python
DESCRIPTION: This code snippet demonstrates how to start a new transaction using the Sentry SDK. It includes setting the transaction name, operation type, and custom data. It also shows how to use custom_sampling_context for data that should not be recorded.

LANGUAGE: python
CODE:
sentry_sdk.start_transaction(
    # kwargs passed to Transaction constructor - will be recorded on transaction
    name="GET /search",
    op="search",
    data={
      "query_params": {
        "animal": "dog",
        "type": "very good"
      }
    },
    # `custom_sampling_context` - won't be recorded
    custom_sampling_context={
        # PII
        "user_id": "12312012",
        # too big to send
        "search_results": { ... }
    }
);

----------------------------------------

TITLE: Integrating Sentry with React Router v6 using Routes Component
DESCRIPTION: This code snippet shows how to integrate Sentry with React Router v6 using the Routes component. It includes initializing Sentry, setting up the necessary integrations, and wrapping the Routes component with Sentry's higher-order component.

LANGUAGE: javascript
CODE:
import React from "react";
import ReactDOM from "react-dom";
import {
  Routes,
  Route,
  BrowserRouter,
  useLocation,
  useNavigationType,
  createRoutesFromChildren,
  matchRoutes,
} from "react-router-dom";

import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactRouterV6BrowserTracingIntegration({
      useEffect: React.useEffect,
      useLocation,
      useNavigationType,
      createRoutesFromChildren,
      matchRoutes,
    }),
  ],
  tracesSampleRate: 1.0,
});

const SentryRoutes = Sentry.withSentryReactRouterV6Routing(Routes);

ReactDOM.render(
  <BrowserRouter>
    <SentryRoutes>
      <Route path="/" element={<div>Home</div>} />
    </SentryRoutes>
  </BrowserRouter>
);

----------------------------------------

TITLE: Installing Sentry SDK with Sanic Support
DESCRIPTION: Commands to install the Sentry SDK with Sanic integration and additional dependency for Python 3.6

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk[sanic]

LANGUAGE: bash
CODE:
pip install --upgrade aiocontextvars

----------------------------------------

TITLE: Initializing Sentry SDK using Loader Script in HTML
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK using a Loader Script in HTML. It includes a script tag to load the Sentry SDK and a JavaScript code block to configure it with error tracking, performance monitoring, and session replay settings.

LANGUAGE: html
CODE:
<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

<script>
  window.sentryOnLoad = function () {
    Sentry.init({
      dsn: "___PUBLIC_DSN___",

      // Alternatively, use `process.env.npm_package_version` for a dynamic release version
      // if your build tool supports it.
      release: "my-project-name@2.3.12",
      integrations: [
        Sentry.browserTracingIntegration(),
        Sentry.replayIntegration(),
      ],

      // Set tracesSampleRate to 1.0 to capture 100%
      // of transactions for tracing.
      // We recommend adjusting this value in production
      // Learn more at
      // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
      tracesSampleRate: 1.0,

      // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
      tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

      // Capture Replay for 10% of all sessions,
      // plus for 100% of sessions with an error
      // Learn more at
     // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
      replaysSessionSampleRate: 0.1,
      replaysOnErrorSampleRate: 1.0,
    });
  };
</script>

----------------------------------------

TITLE: Installing Sentry React SDK via Package Managers
DESCRIPTION: Commands for installing the Sentry React SDK using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/react --save

LANGUAGE: bash
CODE:
yarn add @sentry/react

LANGUAGE: bash
CODE:
pnpm add @sentry/react

----------------------------------------

TITLE: Installing Sentry React SDK via Package Managers
DESCRIPTION: Commands for installing the Sentry React SDK using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/react --save

LANGUAGE: bash
CODE:
yarn add @sentry/react

LANGUAGE: bash
CODE:
pnpm add @sentry/react

----------------------------------------

TITLE: Installing Sentry React SDK via Package Managers
DESCRIPTION: Commands for installing the Sentry React SDK using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/react --save

LANGUAGE: bash
CODE:
yarn add @sentry/react

LANGUAGE: bash
CODE:
pnpm add @sentry/react

----------------------------------------

TITLE: Installing Sentry SDK for Node.js
DESCRIPTION: Use npm to install the Sentry SDK for Node.js applications. This command installs the core Sentry package for Node.js.

LANGUAGE: bash
CODE:
npm install --save @sentry/node

----------------------------------------

TITLE: Enabling Local Variables Capture in Sentry SDK Configuration (JavaScript)
DESCRIPTION: This snippet demonstrates how to enable the capture of local variables in the Sentry SDK configuration. Set 'includeLocalVariables' to true to activate this feature.

LANGUAGE: javascript
CODE:
Sentry.init({
  includeLocalVariables: true,
});

----------------------------------------

TITLE: Integrating Sentry with Koa in Node.js
DESCRIPTION: This snippet illustrates how to set up Sentry error tracking in a Koa application. It shows the configuration of Raven and how to capture exceptions using the 'error' event.

LANGUAGE: javascript
CODE:
var koa = require("koa");
var Raven = require("raven");

var app = koa();
Raven.config("___PUBLIC_DSN___").install();

app.on("error", function (err) {
  Raven.captureException(err, function (err, eventId) {
    console.log("Reported error " + eventId);
  });
});

app.listen(3000);

----------------------------------------

TITLE: Demonstrating transaction naming in FastAPI with Sentry
DESCRIPTION: Example of how transaction naming works in FastAPI with Sentry integration. The transaction name depends on the 'transaction_style' option set during SDK initialization.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.starlette import StarletteIntegration
from sentry_sdk.integrations.fastapi import FastApiIntegration

sentry_sdk.init(
    # ...
    integrations=[
        StarletteIntegration(
            transaction_style="endpoint",
        ),
        FastApiIntegration(
            transaction_style="endpoint",
        ),
    ],
)

app = FastAPI()

@app.get("/catalog/product/{product_id}")
async def product_detail(product_id):
    return {...}

----------------------------------------

TITLE: Configuring Sentry SDK with ASGI Middleware in Python
DESCRIPTION: Initialize Sentry SDK with ASGI middleware, including options for error monitoring, performance tracing, and profiling. This setup wraps the ASGI app with SentryAsgiMiddleware.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.asgi import SentryAsgiMiddleware

from my_asgi_app import app

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

app = SentryAsgiMiddleware(app)

----------------------------------------

TITLE: Initializing Sentry Client-Side SDK
DESCRIPTION: Initializes Sentry SDK for client-side usage in Next.js, including performance monitoring and session replay.

LANGUAGE: JavaScript
CODE:
import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Replay may only be enabled for the client-side
  integrations: [Sentry.replayIntegration()],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,

  // Note: if you want to override the automatic release value, do not set a
  // `release` value here - use the environment variable `SENTRY_RELEASE`, so
  // that it will also get attached to your source maps
});

----------------------------------------

TITLE: Installing Sentry SvelteKit SDK using NPX
DESCRIPTION: Command to run the Sentry installation wizard for SvelteKit projects. This wizard automates the SDK setup process.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i sveltekit

----------------------------------------

TITLE: Configuring Sentry Trace Sampling in PowerShell
DESCRIPTION: Sets up trace sampling configuration for Sentry SDK. Provides two approaches: a uniform sample rate and a context-based sampling using TracesSampler. The context-based approach determines sampling rates based on HTTP paths with different rates for payment (50%), search (1%), health checks (0%), and other routes (10%).

LANGUAGE: powershell
CODE:
Start-Sentry {
    // Add this to the SDK initialization callback
    // To set a uniform sample rate
    $_.TracesSampleRate = 1.0

    // OR: Determine traces sample rate based on the sampling context
    $_.TracesSampler = [System.Func[Sentry.TransactionSamplingContext, System.Nullable`1[System.Double]]] {
        param([Sentry.TransactionSamplingContext]$context)

        # If this is the continuation of a trace, just use that decision (rate controlled by the caller)
        if ($null -ne $context.TransactionContext.IsParentSampled)
        {
            if ($context.TransactionContext.IsParentSampled.Value)
            {
                return 1.0
            }
            else
            {
                return 0.0
            }
        }

        # Otherwise, sample based on a custom sampling context you set with your transactions.
        switch ( $context.CustomSamplingContext['__HttpPath'] )
        {
            # These are important - take a big sample
            '/payment' { 0.5 }

            # Search is less important and happen much more frequently - only take 1%
            '/search' { 0.01 }

            # The health check endpoint is just noise - drop all transactions
            '/health' { 0.0 }

            # Default sample rate
            default { 0.1 }

            # Or return null to fallback to options.TracesSampleRate (1.0 in this case)
            # default { $null }
        }
    }
}

----------------------------------------

TITLE: Emitting a Timer Metric in Java and Kotlin
DESCRIPTION: This snippet demonstrates how to emit a timer metric in Java and Kotlin. It shows how to measure the execution time of a specific block of code.

LANGUAGE: Java
CODE:
Sentry.metrics().timing("load_user_profile", () -> {
    // db.load() ...
});

LANGUAGE: Kotlin
CODE:
Sentry.metrics().timing("load_user_profile") {
    // db.load() ...
}

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Node.js
DESCRIPTION: Example showing how to capture exceptions using Sentry's captureException() method within a try-catch block. While the method accepts Error objects for best results with stack traces, it can also handle non-Error objects and strings, though these may result in events with missing stack traces.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

try {
  aFunctionThatMightFail();
} catch (e) {
  Sentry.captureException(e);
}

----------------------------------------

TITLE: Setting Sentry Auth Token for Source Maps Upload in Astro
DESCRIPTION: This snippet shows how to set the SENTRY_AUTH_TOKEN environment variable in a .env file for Astro builds with Sentry integration.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Java
DESCRIPTION: This snippet demonstrates how to catch and report exceptions to Sentry in a Java application. It uses a try-catch block to handle potential exceptions and the Sentry.captureException() method to send the caught exception to Sentry for monitoring and analysis.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

try {
  aMethodThatMightFail();
} catch(Exception e) {
  Sentry.captureException(e);
}

----------------------------------------

TITLE: Configuring React 19 Error Handlers with Sentry
DESCRIPTION: Implementation of error handling hooks for React 19 using Sentry's reactErrorHandler.

LANGUAGE: javascript
CODE:
import { createRoot } from "react-dom/client";

const container = document.getElementById("app");
const root = createRoot(container, {
  onUncaughtError: Sentry.reactErrorHandler((error, errorInfo) => {
    console.warn('Uncaught error', error, errorInfo.componentStack);
  }),
  onCaughtError: Sentry.reactErrorHandler(),
  onRecoverableError: Sentry.reactErrorHandler(),
});
root.render();

----------------------------------------

TITLE: Configuring Sentry ErrorBoundary in React
DESCRIPTION: This snippet demonstrates how to import and use the Sentry ErrorBoundary component in a React application. It wraps a component and provides a fallback UI in case of errors.

LANGUAGE: javascript
CODE:
import React from "react";
import * as Sentry from "@sentry/react";

<Sentry.ErrorBoundary fallback={<p>An error has occurred</p>}>
  <Example />
</Sentry.ErrorBoundary>;

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Java
DESCRIPTION: This snippet demonstrates how to catch and report exceptions to Sentry in a Java application. It uses a try-catch block to handle potential exceptions and the Sentry.captureException() method to send the caught exception to Sentry for monitoring and analysis.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

try {
  aMethodThatMightFail();
} catch(Exception e) {
  Sentry.captureException(e);
}

----------------------------------------

TITLE: Configuring Gatsby Plugin
DESCRIPTION: Configuration code to register the Sentry Gatsby plugin in gatsby-config.js file.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: [
    {
      resolve: "@sentry/gatsby",
    },
  ],
};

----------------------------------------

TITLE: Wrapping React Native App with Sentry
DESCRIPTION: Demonstrates how to wrap the main App component with Sentry for automatic touch event tracking and tracing instrumentation

LANGUAGE: javascript
CODE:
export default Sentry.wrap(App);

----------------------------------------

TITLE: Installing Sentry SDK for Nuxt via NPX
DESCRIPTION: Run the Sentry wizard to automatically set up the SDK in a Nuxt project. This command should be executed in the project's root directory.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i nuxt

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: Defines the page metadata including title, description, and sidebar ordering for the Sentry SDK documentation.

LANGUAGE: markdown
CODE:
---
title: Configuration
description: "Additional configuration options for the SDK."
sidebar_order: 5
---

----------------------------------------

TITLE: Installing Sentry React Native SDK using NPM
DESCRIPTION: Command to run Sentry Wizard for automated React Native project setup and configuration

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i reactNative

----------------------------------------

TITLE: Implementing Request-Isolated Breadcrumbs in Express with Sentry
DESCRIPTION: Example showing how Sentry automatically isolates breadcrumbs across different Express routes. Each request maintains its own separate breadcrumb trail without interfering with other requests.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

app.get("/my-route", function () {
  Sentry.addBreadcrumb({
    message: "This breadcrumb should only be attached to this request",
  });
  // do something
});

app.get("/my-route-2", function () {
  Sentry.addBreadcrumb({
    message: "This breadcrumb should only be attached to this request",
  });
  // do something
});

----------------------------------------

TITLE: Initializing Sentry with React Router Integration in JavaScript
DESCRIPTION: This snippet initializes Sentry with automatic instrumentation and React Router v6 integration. It configures the DSN, tracing integrations, sample rate, and trace propagation targets.

LANGUAGE: javascript
CODE:
import { createBrowserRouter } from "react-router-dom";
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This enables automatic instrumentation (highly recommended)
  // If you only want to use custom instrumentation:
  // * Remove the `BrowserTracing` integration
  // * add `Sentry.addTracingExtensions()` above your Sentry.init() call
  integrations: [
    Sentry.browserTracingIntegration(),
    // Or, if you are using react router, use the appropriate integration
    // See docs for support for different versions of react router
    // https://docs.sentry.io/platforms/javascript/guides/react/configuration/integrations/react-router/
    Sentry.reactRouterV6BrowserTracingIntegration({
      useEffect: React.useEffect,
      useLocation,
      useNavigationType,
      createRoutesFromChildren,
      matchRoutes,
    }),
  ],

  // For finer control of sent transactions you can adjust this value, or
  // use tracesSampler
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
});

----------------------------------------

TITLE: Configuring Sentry Browser Tracing Integration
DESCRIPTION: This snippet shows how to configure the Sentry browser tracing integration with additional options. It demonstrates setting the routeLabel option to customize the label used for route transactions.

LANGUAGE: javascript
CODE:
Sentry.browserTracingIntegration({
  router,
  routeLabel: "path",
});

----------------------------------------

TITLE: Configuring Sentry Traces Sampler in Ruby
DESCRIPTION: Implements a custom sampling strategy for Sentry transactions. The sampler uses context-aware logic to apply different sampling rates based on the transaction type, path, and operation. It handles HTTP requests, queue operations, and health checks with configurable sampling rates.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  #...
  config.traces_sampler = lambda do |sampling_context|
    # if this is the continuation of a trace, just use that decision (rate controlled by the caller)
    unless sampling_context[:parent_sampled].nil?
      next sampling_context[:parent_sampled]
    end

    # the sampling context also has the full rack environment if you want to check the path directly
    rack_env = sampling_context[:env]
    return 0.0 if rack_env && rack_env['PATH_INFO'] =~ /health_check/

    # transaction_context is the transaction object in hash form
    # keep in mind that sampling happens right after the transaction is initialized
    # for example, at the beginning of the request
    transaction_context = sampling_context[:transaction_context]

    # transaction_context helps you sample transactions with more sophistication
    # for example, you can provide different sample rates based on the operation or name
    op = transaction_context[:op]
    transaction_name = transaction_context[:name]

    case op
    when /http/
      # for Rails applications, transaction_name would be the request's path (env["PATH_INFO"]) instead of "Controller#action"
      case transaction_name
      when /health_check/
        0.0
      when /payment/
        0.5
      when /api/
        0.2
      else
        0.1
      end
    when /queue/
      0.01 # you may want to set a lower rate for background jobs if the number is large
    else
      0.0 # ignore all other transactions
    end
  end
end

----------------------------------------

TITLE: Configuring Sentry Traces Sampler in Kotlin
DESCRIPTION: This snippet demonstrates how to initialize Sentry and set up a custom traces sampler callback in Kotlin. It shows decision-making logic for sampling rates based on parent sampling, context-based conditions, and fallback rates.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.TracesSamplerCallback

Sentry.init { options ->
  options.tracesSampler = TracesSamplerCallback { context ->
    // If this is the continuation of a trace, just use that decision (rate controlled by the caller).
    val parentSampled = context.transactionContext.parentSampled
    if (parentSampled != null) {
      return@TracesSamplerCallback if (parentSampled) 1.0 else 0.0
    }
    if (/* make a decision based on `samplingContext` */) {
      // Drop this transaction, by setting its sample rate to 0%
      return@TracesSamplerCallback 0.0
    } else if (/* ... */) {
      // Override sample rate for other cases (replaces `options.TracesSampleRate`)
      return@TracesSamplerCallback 0.1
    }
    // Can return `null` to fallback to the rate configured by `options.tracesSampleRate`
    return@TracesSamplerCallback null
  }
}

----------------------------------------

TITLE: Configuring Sentry Performance V2 in Android Manifest
DESCRIPTION: XML configuration to enable Performance V2 features through the Android manifest file. Alternative method for enabling the feature via metadata.

LANGUAGE: xml
CODE:
<manifest>
    <application>
        <meta-data android:name="io.sentry.performance-v2.enable" android:value="true" />
    </application>
</manifest>

----------------------------------------

TITLE: Retrieving and Working with Transactions in Sentry SDK (Python)
DESCRIPTION: This snippet demonstrates how to retrieve an ongoing Transaction using Sentry SDK in Python. It checks if a transaction exists, creates a new one if not, and shows how to attach spans to existing transactions.

LANGUAGE: python
CODE:
import sentry_sdk

transaction = sentry_sdk.Hub.current.scope.transaction

if transaction is None:
    with sentry_sdk.start_transaction(name="task"):
        do_task()
else:
    transaction.name = "new name"
    with transaction.start_child(op="task"):  # equivalent to `sentry_sdk.start_span`
        do_task()

----------------------------------------

TITLE: Configuring Network Detail Capture in Sentry Replay Integration
DESCRIPTION: This snippet demonstrates how to configure network detail capture for specific URLs in the Sentry Replay integration. It shows how to set allowed URLs and specify additional request and response headers to capture.

LANGUAGE: javascript
CODE:
replayIntegration({
  networkDetailAllowUrls: [
    window.location.origin,
    "api.example.com",
    /^https:\/\/api\.example\.com/,
  ],
  networkRequestHeaders: ["Cache-Control"],
  networkResponseHeaders: ["Referrer-Policy"],
});

----------------------------------------

TITLE: Implementing Before-Send Hook in Sentry Native SDK
DESCRIPTION: Shows how to implement a before-send callback function that inspects exception data and sets custom fingerprints. The code demonstrates accessing event values, comparing exception types, and initializing Sentry with custom options. Uses the sentry.h library for event handling and manipulation.

LANGUAGE: c
CODE:
#include <string.h>
#include <sentry.h>

sentry_value_t before_send(sentry_value_t event, void *hint) {
  /* sentry_value_t functions handle NULL automatically */
  sentry_value_t exceptions = sentry_value_get_by_key(event, "exception");
  sentry_value_t values = sentry_value_get_by_key(exceptions, "values");
  sentry_value_t exception = sentry_value_get_by_index(values, 0);
  sentry_value_t type = sentry_value_get_by_key(exception, "type");
  const char *type_str = sentry_value_as_string(type);

  /* use the data passed during initialization */
  const char *custom_error = (const char *)hint;

  if (type_str && strcmp(type_str, custom_error) == 0) {
    sentry_value_t fingerprint = sentry_value_new_list();
    sentry_value_append(fingerprint, sentry_value_new_string("custom-error"));
    sentry_value_set_by_key(event, "fingerprint", fingerprint);
  }

  return event;
}

int main(void) {
  sentry_options_t *options = sentry_options_new();
  sentry_options_set_before_send(options, before_send, (void *)"CustomError");
  sentry_init(options);

  /* ... */
}

----------------------------------------

TITLE: Removing Default Integration in Sentry SDK
DESCRIPTION: This snippet shows how to remove a specific default integration from Sentry SDK. It demonstrates filtering out the 'Breadcrumbs' integration, which is enabled by default, using the integrations function in Sentry.init().

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  integrations: function (integrations) {
    // integrations will be all default integrations
    return integrations.filter(function (integration) {
      return integration.name !== "Breadcrumbs";
    });
  },
});

----------------------------------------

TITLE: Initializing Sentry SDK Configuration in Ruby
DESCRIPTION: Sets up the Sentry SDK with configuration options including DSN, breadcrumb logging, PII data collection, performance tracing, and profiling. The code is meant to be placed in the Rails initializer file and configures core monitoring features.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  config.dsn = '___PUBLIC_DSN___'

  # get breadcrumbs from logs
  config.breadcrumbs_logger = [:active_support_logger, :http_logger]

  # Add data like request headers and IP for users, if applicable;
  # see https://docs.sentry.io/platforms/ruby/data-management/data-collected/ for more info
  config.send_default_pii = true

  # enable tracing
  # we recommend adjusting this value in production
  config.traces_sample_rate = 1.0

  # enable profiling
  # this is relative to traces_sample_rate
  config.profiles_sample_rate = 1.0
end

----------------------------------------

TITLE: Initializing Sentry SDK in Django Settings
DESCRIPTION: Basic configuration for initializing the Sentry SDK in a Django application's settings.py file. Requires replacing the DSN placeholder with actual project DSN.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="YOUR_DSN",  # replace with your DSN
    ...
)

----------------------------------------

TITLE: Implementing Priority-Based Sampling in JavaScript
DESCRIPTION: This snippet demonstrates how to configure a tracesSampler function to apply different sampling rates based on transaction types, prioritizing critical user flows like checkout and login.

LANGUAGE: javascript
CODE:
tracesSampler: (samplingContext) => {
  const { name, attributes } = samplingContext;
  
  // Sample all checkout transactions
  if (name.includes('/checkout') || attributes?.flow === 'checkout') {
    return 1.0;
  }
  
  // Sample 50% of login transactions
  if (name.includes('/login') || attributes?.flow === 'login') {
    return 0.5;
  }
  
  // Sample 10% of everything else
  return 0.1;
}

----------------------------------------

TITLE: Adding Custom Sampling Context Data in Sentry Transaction
DESCRIPTION: Shows how to add custom data to the sampling context when creating a transaction, allowing the sampler to access this information for decision-making.

LANGUAGE: javascript
CODE:
const transaction = Sentry.startTransaction(
  {
    name: "Search from navbar",
    op: "search",
  },
  // optional second argument
  { queryType: "username", queryTerm: "janesmith" }
);

----------------------------------------

TITLE: Initializing Sentry SDK with Configuration Options in Python
DESCRIPTION: Example of initializing Sentry SDK with common configuration options including DSN, breadcrumbs limit, debug mode, tracing settings, and PII handling. The code shows how to configure the SDK using the init() function with various optional parameters to customize Sentry's behavior.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    max_breadcrumbs=50,
    debug=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Add request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,

    # By default the SDK will try to use the SENTRY_RELEASE
    # environment variable, or infer a git commit
    # SHA as release, however you may want to set
    # something more human-readable.
    # release="myapp@1.0.0",
)

----------------------------------------

TITLE: Initializing Sentry SDK with Configuration Options in C#
DESCRIPTION: This code snippet shows how to initialize the Sentry SDK using SentrySdk.Init in a C# application. It includes setting the DSN, enabling debug mode, configuring auto session tracking, global mode, and setting the trace sample rate.

LANGUAGE: csharp
CODE:
SentrySdk.Init(options =>
{
    // A Sentry Data Source Name (DSN) is required.
    // See https://docs.sentry.io/concepts/key-terms/dsn-explainer/
    // You can set it in the SENTRY_DSN environment variable, or you can set it in code here.
    options.Dsn = "___PUBLIC_DSN___";

    // When debug is enabled, the Sentry client will emit detailed debugging information to the console.
    // This might be helpful, or might interfere with the normal operation of your application.
    // We enable it here for demonstration purposes when first trying Sentry.
    // You shouldn't do this in your applications unless you're troubleshooting issues with Sentry.
    options.Debug = true;

    // This option is recommended. It enables Sentry's "Release Health" feature.
    options.AutoSessionTracking = true;

    // Enabling this option is recommended for client applications only. It ensures all threads use the same global scope.
    options.IsGlobalModeEnabled = false;

    // Example sample rate for your transactions: captures 10% of transactions
    options.TracesSampleRate = 0.1;
});

----------------------------------------

TITLE: Configuring Sentry SDK in C#
DESCRIPTION: Basic configuration of Sentry SDK including DSN setup, debug mode, trace sampling, and profiling options. Sets up error monitoring with performance tracking and profiling capabilities.

LANGUAGE: csharp
CODE:
SentrySdk.Init(options =>
{
    options.Dsn = "https://eb18e953812b41c3aeb042e666fd3b5c@o447951.ingest.us.sentry.io/5428537";
    options.Debug = true;
    // A fixed sample rate of 1.0 - 100% of all transactions are getting sent
    options.TracesSampleRate = 1.0f;
    // A sample rate for profiling - this is relative to TracesSampleRate
    options.ProfilesSampleRate = 1.0f;
});

----------------------------------------

TITLE: Adding Sentry to ASP.NET Core 3.0 in C#
DESCRIPTION: This code snippet shows how to integrate Sentry into an ASP.NET Core 3.0 application using C#. It modifies the CreateHostBuilder method to include the UseSentry extension method within the ConfigureWebHostDefaults call.

LANGUAGE: csharp
CODE:
public static IHostBuilder CreateHostBuilder(string[] args) =>
    Host.CreateDefaultBuilder(args)
        .ConfigureWebHostDefaults(webBuilder =>
        {
            // Add the following line:
            webBuilder.UseSentry("___PUBLIC_DSN___");
        });

----------------------------------------

TITLE: Capturing Exceptions with Sentry in JavaScript
DESCRIPTION: Shows how to wrap potentially failing code in a try-catch block and report the caught exception to Sentry for error monitoring. This is the basic pattern for error handling with Sentry's SDK.

LANGUAGE: javascript
CODE:
try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Using Sentry ErrorBoundary as a Higher Order Component
DESCRIPTION: This example shows how to use the Sentry ErrorBoundary as a higher order component, wrapping an Example component and providing a fallback UI.

LANGUAGE: javascript
CODE:
import React from "react";
import * as Sentry from "@sentry/react";

Sentry.withErrorBoundary(Example, { fallback: <p>an error has occurred</p> });

----------------------------------------

TITLE: Installing Sentry Angular SDK using Package Managers
DESCRIPTION: Commands for installing the Sentry Angular SDK using different package managers (npm, yarn, pnpm). The SDK enables error monitoring and other Sentry features in Angular applications.

LANGUAGE: bash
CODE:
npm install @sentry/angular --save

LANGUAGE: bash
CODE:
yarn add @sentry/angular

LANGUAGE: bash
CODE:
pnpm add @sentry/angular

----------------------------------------

TITLE: Granular Error Grouping for RPC/API Calls in Sentry SDK
DESCRIPTION: Shows how to create more granular error groups for RPC or API calls by including specific error attributes in the fingerprint.

LANGUAGE: javascript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['{{ default }}', String(error.name), error.message]);
  Sentry.captureException(error);
});

LANGUAGE: python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.fingerprint = ['{{ default }}', str(error.name), error.message]
    sentry_sdk.capture_exception(error)

LANGUAGE: ruby
CODE:
Sentry.with_scope do |scope|
  scope.set_fingerprint(['{{ default }}', error.name.to_s, error.message])
  Sentry.capture_exception(error)
end

----------------------------------------

TITLE: Integrating OpenFeature with Sentry for Tracking All Evaluations in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the OpenFeature integration, set up an OpenFeature provider, and add hooks for tracking all feature flag evaluations. It includes an example of evaluating a boolean flag and capturing an exception.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/sveltekit';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
OpenFeature.addHooks(new Sentry.OpenFeatureIntegrationHook());

const client = OpenFeature.getClient();
const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Configuring Sentry with OpenTelemetry SDK
DESCRIPTION: Demonstrates the complete setup process for integrating Sentry with OpenTelemetry, including initialization of both SDKs, configuration of propagators, processors, and context managers. This setup replaces Sentry's native instrumentation with OpenTelemetry.

LANGUAGE: javascript
CODE:
// Sentry dependencies
const Sentry = require("@sentry/node");
const {
  getClient,
  setupGlobalHub,
  SentryPropagator,
  SentrySampler,
  SentrySpanProcessor,
  setupEventContextTrace,
  wrapContextManagerClass,
  setOpenTelemetryContextAsyncContextStrategy,
} = require("@sentry/opentelemetry");

// OpenTelemetry dependencies
const opentelemetry = require("@opentelemetry/sdk-node");
const otelApi = require("@opentelemetry/api");
const {
  getNodeAutoInstrumentations,
} = require("@opentelemetry/auto-instrumentations-node");
const {
  OTLPTraceExporter,
} = require("@opentelemetry/exporter-trace-otlp-grpc");
const {
  AsyncLocalStorageContextManager,
} = require("@opentelemetry/context-async-hooks");

function setupSentry() {
  setupGlobalHub();

  // Make sure to call `Sentry.init` BEFORE initializing the OpenTelemetry SDK
  const client = Sentry.init({
    dsn: "___PUBLIC_DSN___",
    tracesSampleRate: 1.0,
    // set the instrumenter to use OpenTelemetry instead of Sentry
    instrumenter: "otel",
    // ...
  });

  setupEventContextTrace(client);

  // You can wrap whatever local storage context manager you want to use
  const SentryContextManager = wrapContextManagerClass(
    AsyncLocalStorageContextManager
  );

  const sdk = new opentelemetry.NodeSDK({
    // Existing config
    traceExporter: new OTLPTraceExporter(),
    instrumentations: [getNodeAutoInstrumentations()],

    // Sentry config
    spanProcessor: new SentrySpanProcessor(),
    textMapPropagator: new SentryPropagator(),
    contextManager: new SentryContextManager(),
    sampler: new SentrySampler(client),
  });

  // Ensure OpenTelemetry Context & Sentry Hub/Scope is synced
  setOpenTelemetryContextAsyncContextStrategy();

  sdk.start();
}

setupSentry();

----------------------------------------

TITLE: Capturing Exceptions with Sentry in JavaScript
DESCRIPTION: Shows how to use Sentry's captureException() method within a try-catch block to capture errors. The example demonstrates importing the Sentry package from @sentry/cloudflare and handling potential errors from a function call. This method can handle both Error objects and non-Error objects, though non-Error objects may result in events missing stack traces.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/cloudflare";

try {
  aFunctionThatMightFail();
} catch (e) {
  Sentry.captureException(e);
}

----------------------------------------

TITLE: Implementing Automatic Trace Propagation with HTML Meta Tags
DESCRIPTION: This HTML snippet shows how to set up automatic trace propagation using meta tags. It includes the sentry-trace and baggage meta tags which contain trace information that the BrowserTracing integration will automatically continue.

LANGUAGE: html
CODE:
<html>
  <head>
    <meta name="sentry-trace" content="12345678901234567890123456789012-1234567890123456-1" />
    <meta name="baggage" content="sentry-trace_id=12345678901234567890123456789012,sentry-sample_rate=0.2,sentry-sampled=true,..." />
  </head>
</html>

----------------------------------------

TITLE: Initializing Sentry SDK via NPM in JavaScript
DESCRIPTION: This snippet shows how to initialize the Sentry SDK using NPM. It includes configuration for error tracking, performance monitoring, and session replay. The code sets up the DSN, release version, integrations, and sampling rates for various features.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Alternatively, use `process.env.npm_package_version` for a dynamic release version
  // if your build tool supports it.
  release: "my-project-name@2.3.12",
  integrations: [
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Aggressive Error Grouping for Generic Errors in Sentry SDK
DESCRIPTION: Illustrates how to group generic errors more aggressively by omitting the default grouping and using specific error attributes.

LANGUAGE: javascript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['database-connection-error', error.message]);
  Sentry.captureException(error);
});

LANGUAGE: python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.fingerprint = ['database-connection-error', error.message]
    sentry_sdk.capture_exception(error)

LANGUAGE: ruby
CODE:
Sentry.with_scope do |scope|
  scope.set_fingerprint(['database-connection-error', error.message])
  Sentry.capture_exception(error)
end

----------------------------------------

TITLE: Configuring Sentry Instrumentation in Node.js (CommonJS)
DESCRIPTION: This code snippet demonstrates the proper setup for Sentry instrumentation in a Node.js application using CommonJS modules. It requires the instrumentation module first, followed by other necessary modules, to ensure proper monitoring and error tracking.

LANGUAGE: javascript
CODE:
// Require this first!
require("./instrument");

// Now require other modules
const http = require("http");

// Your application code goes here

----------------------------------------

TITLE: Initializing Sentry SDK in React
DESCRIPTION: JavaScript code to import and initialize the Sentry SDK with performance monitoring and session replay configuration. Sets up error tracking, performance monitoring, and session replay features.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "<your_DSN_key>",
  integrations: [Sentry.browserTracingIntegration(), Sentry.replayIntegration()],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Configuring Sentry in Solid Application
DESCRIPTION: Initial setup and configuration of Sentry SDK in a Solid application's entry point, including performance monitoring and session replay integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/solid";
import { solidRouterBrowserTracingIntegration } from "@sentry/solid/solidrouter";
import { render } from "solid-js/web";
import { DEV } from "solid-js";
import App from "./app";

// this will only initialize your Sentry client in production builds.
if (!DEV) {
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    integrations: [
      solidRouterBrowserTracingIntegration(),
      Sentry.replayIntegration(),
    ],

    // Set tracesSampleRate to 1.0 to capture 100%
    // of transactions for tracing.
    // We recommend adjusting this value in production
    tracesSampleRate: 1.0,

    // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
    tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

    // Capture Replay for 10% of all sessions,
    // plus 100% of sessions with an error
    replaysSessionSampleRate: 0.1,
    replaysOnErrorSampleRate: 1.0,
  });
}

const app = document.getElementById("app");

if (!app) throw new Error("No #app element found in the DOM.");

render(() => <App />, app);

----------------------------------------

TITLE: Configuring Sentry BeforeSend Callback in Kotlin
DESCRIPTION: Shows how to initialize Sentry with a BeforeSend callback using Kotlin syntax. The callback filters events based on hint type using Kotlin's type checking, allowing for event modification or filtering.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.BeforeSendCallback

Sentry.init { options ->
  options.beforeSend = BeforeSendCallback { event, hint ->
    if (hint is MyHint) {
      null
    } else {
      event
    }
  }
}

----------------------------------------

TITLE: Configuring Sentry SDK in Python
DESCRIPTION: Initialize the Sentry SDK with your project's DSN, enable sending PII, set trace sampling rate, and configure profiling. This should be done as early as possible in your application's lifecycle.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

----------------------------------------

TITLE: Integrating Sentry with React Router v6 using useRoutes Hook
DESCRIPTION: This snippet demonstrates how to integrate Sentry with React Router v6 using the useRoutes hook. It includes initializing Sentry, setting up the necessary integrations, and wrapping the useRoutes hook with Sentry's wrapper function.

LANGUAGE: javascript
CODE:
import React from "react";
import {
  createRoutesFromChildren,
  matchRoutes,
  useLocation,
  useNavigationType,
  useRoutes,
} from "react-router-dom";

import { wrapUseRoutes } from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactRouterV6BrowserTracingIntegration({
      useEffect: React.useEffect,
      useLocation,
      useNavigationType,
      createRoutesFromChildren,
      matchRoutes,
    }),
  ],
  tracesSampleRate: 1.0,
});

const useSentryRoutes = wrapUseRoutesV6(useRoutes);

function App() {
  return useSentryRoutes([
    // your routes...
  ]);
}

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById("root")
);

----------------------------------------

TITLE: Initializing Sentry with Start-Sentry in PowerShell
DESCRIPTION: This snippet shows how to initialize Sentry in a PowerShell script using the Start-Sentry command. It demonstrates setting the DSN, enabling debug mode, configuring auto session tracking, and setting the traces sample rate. The DSN is required and can be set via an environment variable or directly in the code.

LANGUAGE: powershell
CODE:
Start-Sentry {
    # A Sentry Data Source Name (DSN) is required.
    # See https://docs.sentry.io/concepts/key-terms/dsn-explainer/
    # You can set it in the SENTRY_DSN environment variable, or you can set it in code here.
    $_.Dsn = '___PUBLIC_DSN___'

    # When debug is enabled, the Sentry client will emit detailed debugging information to the console.
    # This might be helpful, or might interfere with the normal operation of your application.
    # We enable it here for demonstration purposes when first trying Sentry.
    # You shouldn't do this in your applications unless you're troubleshooting issues with Sentry.
    # Alternatively, you can pass `-Debug` to the `Start-Sentry` command.
    $_.Debug = $true

    # This option is recommended. It enables Sentry's "Release Health" feature.
    $_.AutoSessionTracking = $true

    # This option will enable Sentry's tracing features. You still need to start transactions and spans.
    # Example sample rate for your transactions: captures 10% of transactions
    $_.TracesSampleRate = 0.1
}

----------------------------------------

TITLE: Installing Sentry SDK with SQLAlchemy Integration
DESCRIPTION: Command to install the Sentry SDK package with SQLAlchemy integration support using pip package manager.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[sqlalchemy]'

----------------------------------------

TITLE: Instrumenting Client-Side LLM Interaction in JavaScript
DESCRIPTION: Tracks the client-side interaction with an LLM, including input metrics, streaming response handling, and UI rendering performance. Uses Sentry's startSpan to capture detailed metrics throughout the LLM interaction process.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'LLM Client Interaction',
    op: 'ai.client',
    attributes: {
      // Initial metrics available at request time
      'input.char_count': 280,
      'input.language': 'en',
      'input.type': 'question'
    }
  },
  async () => {
    const span = Sentry.getActiveSpan();
    const startTime = performance.now();
    
    // Begin streaming response from LLM API
    const stream = await llmClient.createCompletion({
      prompt: userInput,
      stream: true
    });
    
    // Record time to first token when received
    let firstTokenReceived = false;
    let tokensReceived = 0;
    
    for await (const chunk of stream) {
      tokensReceived++;
      
      // Record time to first token
      if (!firstTokenReceived && chunk.content) {
        firstTokenReceived = true;
        const timeToFirstToken = performance.now() - startTime;
        
        if (span) {
          span.setAttribute('ui.time_to_first_token_ms', timeToFirstToken);
        }
      }
      
      // Process and render the chunk
      renderChunkToUI(chunk);
    }
    
    // Record final metrics after stream completes
    const totalRequestTime = performance.now() - startTime;
    
    if (span) {
      span.setAttribute('ui.total_request_time_ms', totalRequestTime);
      span.setAttribute('stream.rendering_mode', 'markdown');
      span.setAttribute('stream.tokens_received', tokensReceived);
    }
  }
);

----------------------------------------

TITLE: Configuring Sentry Initialization with Custom Sampling Rules
DESCRIPTION: Demonstrates initialization of Sentry SDK with a custom tracesSampler function that applies different sampling rates based on transaction names. Includes logic for completely skipping health checks, fully capturing auth transactions, minimal sampling of comments, and default sampling for other transactions.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampler: (samplingContext) => {
    // Access transaction details from the sampling context
    const { name, attributes, inheritOrSampleWith } = samplingContext;
    
    // Skip health checks entirely
    if (name.includes('healthcheck')) {
      return 0;
    }
    
    // Capture all auth-related transactions
    if (name.includes('auth')) {
      return 1;
    }
    
    // Sample only 1% of comment-related transactions
    if (name.includes('comment')) {
      return 0.01;
    }
    
    // For everything else, inherit parent sampling decision or use 0.5
    return inheritOrSampleWith(0.5);
  }
});

----------------------------------------

TITLE: Initializing Sentry ANR Integration in Node.js
DESCRIPTION: Demonstrates how to initialize Sentry with the ANR integration enabled. The integration captures event loop stalls and creates corresponding error events in Sentry. The captureStackTrace option is enabled to provide detailed stack traces for debugging.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.anrIntegration({ captureStackTrace: true })],
});

----------------------------------------

TITLE: Using Temporary Scope for Exception Capture in JavaScript
DESCRIPTION: This snippet shows how to use a temporary scope to set user context for a specific exception capture in Sentry.

LANGUAGE: javascript
CODE:
Sentry.withScope(function (scope) {
  scope.setUser(someUser);
  Sentry.captureException(error);
});

----------------------------------------

TITLE: Testing Sentry Error Capture
DESCRIPTION: Adds a test button to trigger a frontend error for verifying Sentry's error capturing functionality.

LANGUAGE: JavaScript
CODE:
<button
  type="button"
  onClick={() => {
    throw new Error("Sentry Test Error");
  }}
>
  Break the world
</button>

----------------------------------------

TITLE: Adding Custom Measurements in Kotlin with Sentry SDK
DESCRIPTION: Shows how to implement custom measurements for memory usage, profile loading time, and screen load counts using Sentry's SDK in Kotlin. Utilizes Kotlin's null-safe operator and the same measurement units as the Java implementation.

LANGUAGE: kotlin
CODE:
import io.sentry.MeasurementUnit
import io.sentry.Sentry

val span = Sentry.getSpan()

// Record amount of memory used
span?.setMeasurement("memory_used", 64, MeasurementUnit.Information.MEGABYTE)

// Record time it took to load user profile
span?.setMeasurement("user_profile_loading_time", 1.3, MeasurementUnit.Duration.SECOND)

// Record number of times the screen was loaded
span?.setMeasurement("screen_load_count", 4)

----------------------------------------

TITLE: Integrating Sentry with React Router v4/v5 using SentryRoute
DESCRIPTION: This snippet demonstrates how to create a custom SentryRoute component using the withSentryRouting higher-order component. It also shows how to initialize Sentry with the appropriate React Router integration and set up routes using the custom SentryRoute component.

LANGUAGE: javascript
CODE:
import {Route, Router, Switch } from 'react-router-dom';
import { createBrowserHistory } from 'history';

import * as Sentry from '@sentry/react';

// Create Custom Sentry Route component
const SentryRoute = Sentry.withSentryRouting(Route);

const history = createBrowserHistory();

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactRouterV5BrowserTracingIntegration({ history }),
    // OR
    Sentry.reactRouterV4BrowserTracingIntegration({ history }),
  ],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

render() {
  return (
    <Router history={history}>
      <Switch>
        <SentryRoute path="/users/:userid" component={() => <div>UserId</div>} />
        <SentryRoute path="/users" component={() => <div>Users</div>} />
        <SentryRoute path="/" component={() => <div>Home</div>} />
      </Switch>
    </Router>
  );
}

----------------------------------------

TITLE: Implementing Custom Traces Sampler Callback in Java
DESCRIPTION: This Java code snippet demonstrates how to create a custom TracesSamplerCallback bean to dynamically determine the sampling rate for Sentry transactions. It allows for context-based sampling decisions using information from the HTTP request.

LANGUAGE: java
CODE:
import io.sentry.SentryOptions.TracesSamplerCallback;
import io.sentry.SamplingContext;
import org.springframework.stereotype.Component;

@Component
class CustomTracesSamplerCallback implements TracesSamplerCallback {
  @Override
  public Double sample(SamplingContext context) {
    CustomSamplingContext customSamplingContext = context.getCustomSamplingContext();
    if (customSamplingContext != null) {
      HttpServletRequest request = (HttpServletRequest) customSamplingContext.get("request");
      // return a number between 0 and 1 or null (to fallback to configured value)
    } else {
      // return a number between 0 and 1 or null (to fallback to configured value)
    }
  }
}

----------------------------------------

TITLE: Using beforeSend Callback in JavaScript Sentry SDK
DESCRIPTION: Implement a beforeSend callback to filter or modify error events before they are sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event) {
    if (event.exception) {
      console.log(event);
    }
    return event;
  },
});

----------------------------------------

TITLE: Linking Errors with Spans in Swift
DESCRIPTION: This snippet demonstrates how to start a transaction, process an item, and capture any errors that occur during the process. The transaction is bound to the scope, which automatically links any errors to the transaction.

LANGUAGE: swift
CODE:
import Sentry

let transaction = SentrySDK.startTransaction(name: "Transaction Name", operation: "operation", bindToScope: true)

do {
  try processItem()
  transaction.finish()
} catch {
  SentrySDK.capture(error: error)
  transaction.finish(status: .internalError)
}

----------------------------------------

TITLE: Configuring Sentry ErrorHandler in Angular App Config
DESCRIPTION: Demonstrates how to register Sentry's ErrorHandler in the Angular application's providers using app.config.ts configuration approach.

LANGUAGE: typescript
CODE:
import { ApplicationConfig, ErrorHandler } from "@angular/core";

import * as Sentry from "@sentry/angular";

export const appConfig: ApplicationConfig = {
  providers: [
    // ...
    {
      provide: ErrorHandler,
      useValue: Sentry.createErrorHandler(),
    },
  ],
};
export class AppModule {}

----------------------------------------

TITLE: Initializing Sentry SDK in Ember.js Application
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in an Ember.js application, including configuration for error monitoring, performance tracing, and session replay. It sets up the DSN, integrations, tracing sample rate, and replay settings.

LANGUAGE: javascript
CODE:
import Application from "@ember/application";
import Resolver from "ember-resolver";
import loadInitializers from "ember-load-initializers";
import config from "./config/environment";

import * as Sentry from "@sentry/ember";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.replayIntegration()],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

export default class App extends Application {
  modulePrefix = config.modulePrefix;
  podModulePrefix = config.podModulePrefix;
  Resolver = Resolver;
}

----------------------------------------

TITLE: Initializing Statsig with Sentry Integration in JavaScript
DESCRIPTION: Sets up Sentry error monitoring with Statsig feature flag integration. This code initializes both the Statsig client and Sentry, configures the integration between them, and demonstrates checking a feature flag while capturing an error.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solid';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Initializing Sentry with Node.js Profiling (CommonJS)
DESCRIPTION: Sets up Sentry monitoring with profiling integration using CommonJS module system. Configures both tracing and profiling sample rates to 100% and enables the Node.js profiling integration.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");
const { nodeProfilingIntegration } = require("@sentry/profiling-node");

// Ensure to call this before requiring any other modules!
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add our Profiling integration
    nodeProfilingIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/guides/node/configuration/options/#tracesSampleRate
  tracesSampleRate: 1.0,

  // Set profilesSampleRate to 1.0 to profile 100%
  // of sampled transactions.
  // This is relative to tracesSampleRate
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/guides/node/configuration/options/#profilesSampleRate
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Including Sentry JavaScript Loader Script
DESCRIPTION: Add this script tag as the first script on your page to enable Sentry error monitoring. It automatically keeps the SDK up-to-date and enables Tracing and Session Replay by default.

LANGUAGE: html
CODE:
<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Initializing Sentry in JavaScript
DESCRIPTION: This snippet initializes Sentry with the environment set to production. It's typically used at the entry point of a JavaScript application to set up error tracking and monitoring.

LANGUAGE: javascript
CODE:
Sentry.init({
  environment: "production",
});

----------------------------------------

TITLE: Initializing Sentry with Child Process Integration in Node.js
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the Child Process Integration. The integration captures breadcrumbs and events for child_process and worker_threads errors, as well as child_process non-zero exit codes.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.childProcessIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry Breadcrumbs Integration in JavaScript
DESCRIPTION: Example showing how to initialize Sentry with custom breadcrumb integration options. This configuration allows enabling/disabling breadcrumb capture for console, DOM events, fetch requests, browser history, and XHR calls.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [
    Sentry.breadcrumbsIntegration({
      console: true,
      dom: true,
      fetch: true,
      history: true,
      xhr: true,
    }),
  ],
});

----------------------------------------

TITLE: Configuring ExtraErrorData Integration in Sentry
DESCRIPTION: Example configuration options for the ExtraErrorData integration showing how to set the depth of object serialization and whether to capture error causes. The integration extracts non-native attributes from error objects and includes them as extra data in Sentry events.

LANGUAGE: typescript
CODE:
Sentry.init({
  integrations: [new Sentry.Integrations.ExtraErrorData({
    depth: 3,
    captureErrorCause: true
  })]
});

----------------------------------------

TITLE: Initializing Sentry Replay Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the Session Replay integration. It uses the replayIntegration() function as part of the integrations array in the Sentry.init() call.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  integrations: [Sentry.replayIntegration()],
});

----------------------------------------

TITLE: Implementing Custom Traces Sampler Callback in Kotlin for Sentry
DESCRIPTION: This Kotlin code implements a custom TracesSamplerCallback for Sentry. It determines the sampling rate for transactions based on the parent sampling decision and custom sampling context. The callback can drop transactions, override sample rates, or fallback to the default rate.

LANGUAGE: kotlin
CODE:
import io.sentry.SamplingContext
import io.sentry.SentryOptions.TracesSamplerCallback
import org.springframework.stereotype.Component

@Component
class CustomTracesSamplerCallback : TracesSamplerCallback {

  override fun sample(context: SamplingContext): Double? {
    // If this is the continuation of a trace, just use that decision (rate controlled by the caller).
    val parentSampled = context.transactionContext.parentSampled
    if (parentSampled != null) {
      return if (parentSampled) 1.0 else 0.0
    }
    val ctx = context.customSamplingContext
    if (ctx != null) {
      if (/* make a decision based on `samplingContext` */) {
        // Drop this transaction, by setting its sample rate to 0%
        return 0.0
      } else if (/* ... */) {
        // Override sample rate for other cases (replaces `options.TracesSampleRate`)
        return 0.1
      }
      // Can return `null` to fallback to the rate configured by `options.tracesSampleRate`
      return null
    } else {
      return null
    }
  }
}

----------------------------------------

TITLE: Installing Sentry SDK with pip
DESCRIPTION: Use pip to install or upgrade the Sentry SDK for Python. This command installs the latest version of the SDK.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk

----------------------------------------

TITLE: Configuring Sentry SDK in Svelte Application
DESCRIPTION: Main configuration setup for Sentry SDK in a Svelte application's entry point, including performance monitoring and session replay integration with sampling rates.

LANGUAGE: javascript
CODE:
import "./app.css";
import App from "./App.svelte";

import * as Sentry from "@sentry/svelte";

// Initialize the Sentry SDK here
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Capture Replay for 10% of all sessions,
  // plus 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

const app = new App({
  target: document.getElementById("app"),
});

export default app;

----------------------------------------

TITLE: Initializing Sentry SDK with BeforeSend Callback in Java
DESCRIPTION: Demonstrates how to initialize Sentry Android SDK in Java with a beforeSend callback that filters out events from TEST environment. The callback allows modifying or discarding events before they are sent to Sentry.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  // Add a callback that will be used before the event is sent to Sentry.
  // With this callback, you can modify the event or, when returning null, also discard the event.
  options.setBeforeSend((event, hint) -> {
    String environment = event.getEnvironment();
    if (environment == null || environment.equals("TEST")) {
      return null;
    } else {
      return event;
    }
  });
});

----------------------------------------

TITLE: Setting Custom Measurements with Sentry SpanDataExtensions in PowerShell
DESCRIPTION: Shows three different examples of setting custom measurements on a Sentry transaction: memory usage in megabytes, duration in seconds, and a simple count metric. Uses the SpanDataExtensions class to record measurements with appropriate measurement units.

LANGUAGE: powershell
CODE:
# Record amount of memory used
[Sentry.SpanDataExtensions]::SetMeasurement($transaction, 'memory_used', 64, [Sentry.MeasurementUnit+Information]::Megabyte)

# Record time it took to load user profile
[Sentry.SpanDataExtensions]::SetMeasurement($transaction, 'user_profile_loading_time', 1.3, [Sentry.MeasurementUnit+Duration]::Second)

# Record number of times the screen was loaded
[Sentry.SpanDataExtensions]::SetMeasurement($transaction, 'screen_load_count', 4)

----------------------------------------

TITLE: Configuring Sentry SDK for Azure Functions in JavaScript
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK in an Azure Function, including setup for error monitoring, performance tracing, and profiling. It also shows how to capture exceptions and ensure they are sent to Sentry.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");
const { nodeProfilingIntegration } = require("@sentry/profiling-node");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    nodeProfilingIntegration(),
  ],

  // Add Performance Monitoring by setting tracesSampleRate
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
});

module.exports = async function (context, req) {
  try {
    await notExistFunction();
  } catch (e) {
    Sentry.withScope((scope) => {
      scope.setSDKProcessingMetadata({ request: req });
      Sentry.captureException(e);
    });
    await Sentry.flush(2000);
  }

  context.res = {
    status: 200,
    body: "Hello from Azure Cloud Function!",
  };
};

----------------------------------------

TITLE: Configuring Sentry SDK in Svelte Application
DESCRIPTION: Main configuration setup for Sentry SDK in a Svelte application's entry point, including performance monitoring and session replay integration with sampling rates.

LANGUAGE: javascript
CODE:
import "./app.css";
import App from "./App.svelte";

import * as Sentry from "@sentry/svelte";

// Initialize the Sentry SDK here
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Capture Replay for 10% of all sessions,
  // plus 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

const app = new App({
  target: document.getElementById("app"),
});

export default app;

----------------------------------------

TITLE: Initializing Sentry with GoogleCloudGrpc Integration in JavaScript
DESCRIPTION: This code snippet demonstrates how to initialize Sentry with the GoogleCloudGrpc integration. The integration adds instrumentation for GRPC APIs on Google Cloud to automatically create spans.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.googleCloudGrpcIntegration()],
});

----------------------------------------

TITLE: Creating and Adding Sentry Breadcrumbs in C
DESCRIPTION: This snippet demonstrates how to create breadcrumbs using the Sentry SDK in C. It shows two examples: a simple authentication breadcrumb and a more complex HTTP request breadcrumb with additional data. The code uses various Sentry functions to create and set values for the breadcrumbs.

LANGUAGE: c
CODE:
#include <sentry.h>

sentry_value_t crumb = sentry_value_new_breadcrumb("default", "Authenticated user");
sentry_value_set_by_key(crumb, "category", sentry_value_new_string("auth"));
sentry_value_set_by_key(crumb, "level", sentry_value_new_string("info"));
sentry_add_breadcrumb(crumb);

// to add `data` to a breadcrumb you must create a wrapping `object` which maps
// to the expected dictionary structure:
sentry_value_t http_data = sentry_value_new_object();
sentry_value_set_by_key(http_data, "url", sentry_value_new_string("https://example.com/api/1.0/users"));
sentry_value_set_by_key(http_data, "method", sentry_value_new_string("GET"));
sentry_value_set_by_key(http_data, "status_code", sentry_value_new_int32(200));
sentry_value_set_by_key(http_data, "reason", sentry_value_new_string("OK"));

sentry_value_t http_crumb = sentry_value_new_breadcrumb("http", NULL);
sentry_value_set_by_key(http_crumb, "category", sentry_value_new_string("xhr"));
sentry_value_set_by_key(http_crumb, "data", http_data);
sentry_add_breadcrumb(http_crumb);

----------------------------------------

TITLE: Configuring Sentry Traces Sampler in Java
DESCRIPTION: This snippet shows how to initialize Sentry and set up a custom traces sampler callback in Java. It demonstrates decision-making logic for sampling rates based on parent sampling, context-based conditions, and fallback rates.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setTracesSampler(context -> {
    // If this is the continuation of a trace, just use that decision (rate controlled by the caller).
    Boolean parentSampled = context.getTransactionContext().getParentSampled();
    if (parentSampled != null) {
      return parentSampled ? 1.0 : 0.0;
    }
    if (/* make a decision based on `samplingContext` */) {
      // Drop this transaction, by setting its sample rate to 0%
      return 0.0;
    } else if (/* ... */) {
      // Override sample rate for other cases (replaces `options.TracesSampleRate`)
      return 0.1;
    }
    // Can return `null` to fallback to the rate configured by `options.tracesSampleRate`
    return null;
  });
});

----------------------------------------

TITLE: Configuring Sentry SDK with Dramatiq Integration
DESCRIPTION: Initialize Sentry SDK with Dramatiq integration, including DSN configuration and optional PII data collection settings.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.dramatiq import DramatiqIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    integrations=[
        DramatiqIntegration(),
    ],
)

----------------------------------------

TITLE: Filtering Transactions with ignoreTransactions in JavaScript Sentry SDK
DESCRIPTION: Configure the SDK to ignore specific transaction patterns using strings or regular expressions.

LANGUAGE: javascript
CODE:
Sentry.init({
  ignoreTransactions: ["health_check", /^/health/],
});

----------------------------------------

TITLE: Inefficient Sequential Object Creation
DESCRIPTION: Example of inefficient object creation in a loop that results in N+1 queries.

LANGUAGE: python
CODE:
for i in range(1, 11):
    Book.objects.create(title: f"Book {i}")

----------------------------------------

TITLE: Configuring Sentry with Custom Fingerprinting in Java
DESCRIPTION: Initializes Sentry with a beforeSend callback that adds a custom fingerprint for SQLException events. This helps group related database connection errors together in the Sentry dashboard.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import java.sql.SQLException;
import java.util.Arrays;

Sentry.init(options -> {
  options.setBeforeSend((event, hint) -> {
    if (event.getThrowable() instanceof SQLException) {
      event.setFingerprints(Arrays.asList("database-connection-error"));
    }
    return event;
  });
});

----------------------------------------

TITLE: Verifying AsyncPG Integration with Sentry SDK
DESCRIPTION: This Python code demonstrates how to initialize Sentry SDK, create a transaction, and perform database operations using AsyncPG. It creates spans for connect and SELECT operations.

LANGUAGE: python
CODE:
import asyncpg

async def main():
    sentry_sdk.init(...)  # same as above

    with sentry_sdk.start_transaction(name="testing_sentry"):
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.fetch("SELECT * FROM pg_catalog.pg_tables;")
        await conn.close()

asyncio.run(main())

----------------------------------------

TITLE: Configuring Default PII Capture in Properties
DESCRIPTION: Enables the capture of user's IP address and Principal name through properties configuration

LANGUAGE: properties
CODE:
sentry.send-default-pii=true

----------------------------------------

TITLE: Configuring Sentry SDK with AWS Lambda Integration
DESCRIPTION: Python code demonstrating the setup of Sentry SDK with AWS Lambda integration, including error monitoring, performance tracing, and profiling configuration. Includes options for PIIs, trace sampling, and profile sampling.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.aws_lambda import AwsLambdaIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
    integrations=[
        AwsLambdaIntegration(),
    ],
)

def lambda_handler(event, context):
    # ...

----------------------------------------

TITLE: Manual Sentry SDK Initialization
DESCRIPTION: Code for manually initializing Sentry SDK with custom configuration including tracing and profiling options.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/aws-serverless";
import { nodeProfilingIntegration } from "@sentry/profiling-node";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [nodeProfilingIntegration()],
  tracesSampleRate: 1.0,
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Configuring Sentry SDK in PHP
DESCRIPTION: Initialize Sentry with configuration options including DSN, trace sampling rate, and profiling sample rate. Should be placed early in application startup.

LANGUAGE: php
CODE:
\Sentry\init([
  'dsn' => '___PUBLIC_DSN___',
  // Specify a fixed sample rate
  'traces_sample_rate' => 1.0,
  // Set a sampling rate for profiling - this is relative to traces_sample_rate
  'profiles_sample_rate' => 1.0,
]);

----------------------------------------

TITLE: Initializing React App with Sentry
DESCRIPTION: Example of importing Sentry initialization file as the first import in a React application entry point.

LANGUAGE: javascript
CODE:
import "./instrument";
import App from "./App";
import { createRoot } from "react-dom/client";

const container = document.getElementById("app");
const root = createRoot(container);
root.render(<App />);

----------------------------------------

TITLE: Configuring Automatic Session Tracking for Sentry SDK
DESCRIPTION: This code block shows how to configure automatic session tracking in the Sentry SDK. Session data is used to monitor release health, including user adoption, usage, and crash rates.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="configuration/auto-session-tracking" />

----------------------------------------

TITLE: Installing Sentry Wizard for Next.js
DESCRIPTION: Run this command in your project directory to install Sentry using the installation wizard. The wizard guides you through the setup process and allows you to enable additional Sentry features.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i nextjs

----------------------------------------

TITLE: Installing Sentry Svelte SDK using Package Managers
DESCRIPTION: Commands for installing the Sentry Svelte SDK using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/svelte --save

LANGUAGE: bash
CODE:
yarn add @sentry/svelte

LANGUAGE: bash
CODE:
pnpm add @sentry/svelte

----------------------------------------

TITLE: Configuring WebClient for Sentry Instrumentation
DESCRIPTION: This snippet shows how to configure a WebClient bean using WebClient.Builder to enable Sentry instrumentation for outgoing HTTP requests in reactive applications.

LANGUAGE: java
CODE:
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Bean;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
class AppConfig {
  @Bean
  WebClient webClient(WebClient.Builder builder) {
    return builder.build();
  }
}

LANGUAGE: kotlin
CODE:
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Bean
import org.springframework.web.reactive.function.client.WebClient

@Configuration
class AppConfig {
  @Bean
  fun webClient(builder: WebClient.Builder) = builder.build()
}

----------------------------------------

TITLE: Initializing Sentry with Async AWS Lambda Handler
DESCRIPTION: This snippet shows how to initialize Sentry with performance monitoring and profiling for an async AWS Lambda handler. It sets up the Sentry SDK, configures sampling rates, and wraps the Lambda handler function.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/aws-serverless");
const { nodeProfilingIntegration } = require("@sentry/profiling-node");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    nodeProfilingIntegration(),
  ],

  // Add Performance Monitoring by setting tracesSampleRate
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
});

exports.handler = Sentry.wrapHandler(async (event, context) => {
  // Your handler code
});

----------------------------------------

TITLE: Initializing Sentry in Non-Rackup Ruby Application
DESCRIPTION: Setup for Sentry in a non-Rackup environment, specifically for Sinatra applications. Demonstrates the crucial ordering where Sentry must be initialized before requiring Sinatra. Includes a sample route that raises an error for testing.

LANGUAGE: ruby
CODE:
require 'sentry-ruby'

Sentry.init do |config|
  config.dsn = '___PUBLIC_DSN___'

  # get breadcrumbs from logs
  config.breadcrumbs_logger = [:sentry_logger, :http_logger]

  # Add data like request headers and IP for users, if applicable;
  # see https://docs.sentry.io/platforms/ruby/data-management/data-collected/ for more info
  config.send_default_pii = true

  # enable tracing
  # we recommend adjusting this value in production
  config.traces_sample_rate = 1.0

  # enable profiling
  # this is relative to traces_sample_rate
  config.profiles_sample_rate = 1.0
end

# in a non-rackup environment you must initialize the Sentry SDK before requiring sinatra
require 'sinatra'
use Sentry::Rack::CaptureExceptions

get "/" do
  raise "foo"
end

----------------------------------------

TITLE: Configuring Sentry SDK in Swift
DESCRIPTION: Swift implementation showing how to initialize and configure the Sentry SDK with performance monitoring and profiling options in an iOS application.

LANGUAGE: swift
CODE:
import Sentry

func application(_ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {

    SentrySDK.start { options in
        options.dsn = "___PUBLIC_DSN___"
        options.debug = true // Enabled debug when first installing is always helpful

        // Adds IP for users.
        // For more information, visit: https://docs.sentry.io/platforms/apple/data-management/data-collected/
        options.sendDefaultPii = true

        // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.
        // We recommend adjusting this value in production.
        options.tracesSampleRate = 1.0
    }

    // Manually call startProfiler and stopProfiler to profile any code that runs in between.
    SentrySDK.startProfiler()

    //
    // ...anything here will be profiled...
    //

    // Calls to stopProfiler are optional - if you don't stop the profiler, it will keep profiling
    // your application until the process exits, the app goes to the background, or stopProfiling is called.
    SentrySDK.stopProfiler()

    return true
}

----------------------------------------

TITLE: Configuring Sentry in Vue 3
DESCRIPTION: Configuration code for initializing Sentry in a Vue 3 application, including performance monitoring and session replay setup.

LANGUAGE: javascript
CODE:
import { createApp } from "vue";
import { createRouter } from "vue-router";
import * as Sentry from "@sentry/vue";

const app = createApp({
  // ...
});
const router = createRouter({
  // ...
});

Sentry.init({
  app,
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.browserTracingIntegration({ router }),
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

app.use(router);
app.mount("#app");

----------------------------------------

TITLE: Updating Root Span Name During Active Span in Sentry JavaScript SDK
DESCRIPTION: This snippet demonstrates how to update the root span name while the span is active, useful when the final name can't be determined at span start.

LANGUAGE: javascript
CODE:
const activeSpan = Sentry.getActiveSpan();
const rootSpan = activeSpan && Sentry.getRootSpan(activeSpan);

Sentry.updateSpanName(rootSpan, "UserListView");

----------------------------------------

TITLE: Initializing Sentry SDK with BeforeSend Callback in Java
DESCRIPTION: This snippet shows how to initialize the Sentry SDK in Java and set up a BeforeSend callback to modify events before they are sent. In this example, the server name is set to null for all events.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setBeforeSend((event, hint) -> {
    // Modify the event here:
    event.setServerName(null); // Don't send server names.
    return event;
  });
});

----------------------------------------

TITLE: Implementing Basic Component Tracking in React with Sentry
DESCRIPTION: Example showing how to wrap a React component with Sentry's withProfiler HOC to enable performance monitoring. Demonstrates basic implementation with nested components.

LANGUAGE: javascript
CODE:
import React from "react";
import * as Sentry from "@sentry/react";

class App extends React.Component {
  render() {
    return (
      <FancyComponent>
        <NestedComponent someProp={2} />
        <AnotherComponent />
      </FancyComponent>
    );
  }
}

export default Sentry.withProfiler(App);

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Configuration in JavaScript
DESCRIPTION: This code initializes the Sentry SDK with a custom configuration. It sets the DSN (Data Source Name) and specifies errors to be ignored using both string and regular expression patterns.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  ignoreErrors: ["fb_xd_fragment", /^Exact Match Message$/],
});

----------------------------------------

TITLE: Initializing Sentry SDK with Configuration Options in Dart
DESCRIPTION: Demonstrates how to initialize the Sentry SDK using the init method with basic configuration options. Sets up error tracking with a DSN (Data Source Name), specifies the release version, and defines the environment as staging.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Future<void> main() async {
  await Sentry.init((options) => options
    ..dsn = '___PUBLIC_DSN___'
    ..release = 'my-project-name@2.3.12'
    ..environment = 'staging');
}

----------------------------------------

TITLE: Setting Sentry Scope Tags and User Data in JavaScript
DESCRIPTION: Demonstrates how to access the current Sentry scope and set custom tags and user information. The code shows setting a custom tag with a key-value pair and configuring user details with an ID and email address.

LANGUAGE: javascript
CODE:
const scope = Sentry.getCurrentScope();
scope.setTag("my-tag", "my value");
scope.setUser({
  id: 42,
  email: "john.doe@example.com",
});

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Options in Rust
DESCRIPTION: Shows how to initialize Sentry with a DSN and custom ClientOptions including release name, breadcrumb limits, and debug mode. The release_name macro automatically generates the release version from cargo metadata.

LANGUAGE: rust
CODE:
let _guard = sentry::init(("___PUBLIC_DSN___", sentry::ClientOptions {
    release: sentry::release_name!(),
    max_breadcrumbs: 50,
    debug: true, // <- this should only be used during development
    ..Default::default()
}));

----------------------------------------

TITLE: Configuring Sampling Function in Sentry.init() for JavaScript
DESCRIPTION: This snippet demonstrates how to set up a custom sampling function in Sentry.init(). The function takes a sampling context object and returns a sample rate between 0 and 1, or a boolean value. This determines whether a transaction will be sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  ...
  tracesSampler: samplingContext => {
    // Examine provided context data to decide sampling rate
    if (someCondition(samplingContext)) {
      // Drop this transaction, by setting its sample rate to 0%
      return 0;
    } else if (anotherCondition(samplingContext)) {
      // Sample this transaction at 10% rate
      return 0.1;
    } else {
      // Default sample rate
      return 0.5;
    }
  },
});

----------------------------------------

TITLE: Setting Transaction Sampling Rate in Sentry Rust SDK
DESCRIPTION: Demonstrates how to configure the traces-sample-rate option in sentry::init() to control transaction sampling. A value of 0.2 means approximately 20% of transactions will be recorded and sent to Sentry.

LANGUAGE: rust
CODE:
sentry::init((
    "https://examplePublicKey@o0.ingest.sentry.io/0",
    sentry::ClientOptions {
        traces_sample_rate: 0.2,
        ..Default::default()
    },
))

----------------------------------------

TITLE: Configuring Sentry Trace Sampling in Kotlin
DESCRIPTION: Shows how to initialize Sentry with performance monitoring enabled in Kotlin. Includes both uniform sample rate configuration and custom sampling logic using a traces sampler callback.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.TracesSamplerCallback

Sentry.init { options ->
    options.dsn = "___PUBLIC_DSN___"

    // To set a uniform sample rate
    options.tracesSampleRate = 1.0

    // OR if you prefer, determine traces sample rate based on the sampling context
    options.tracesSampler = TracesSamplerCallback {
      // return a number between 0 and 1 or null (to fallback to configured value)
    }
}

----------------------------------------

TITLE: Configuring Sentry in AndroidManifest.xml
DESCRIPTION: Complete AndroidManifest.xml configuration for Sentry SDK including DSN setup, performance monitoring, profiling, session replay settings, and various tracking options.

LANGUAGE: xml
CODE:
<application>
  <!-- Required: set your sentry.io project identifier (DSN) -->
  <meta-data android:name="io.sentry.dsn" android:value="___PUBLIC_DSN___" />

  <!-- Add data like request headers, user ip address and device name, see https://docs.sentry.io/platforms/android/data-management/data-collected/ for more info -->
  <meta-data android:name="io.sentry.send-default-pii" android:value="true" />

  <!-- enable automatic breadcrumbs for user interactions (clicks, swipes, scrolls) -->
  <meta-data android:name="io.sentry.traces.user-interaction.enable" android:value="true" />
  <!-- enable screenshot for crashes -->
  <meta-data android:name="io.sentry.attach-screenshot" android:value="true" />
  <!-- enable view hierarchy for crashes -->
  <meta-data android:name="io.sentry.attach-view-hierarchy" android:value="true" />

  <!-- enable the performance API by setting a sample-rate, adjust in production env -->
  <meta-data android:name="io.sentry.traces.sample-rate" android:value="1.0" />

  <!-- enable profiling when starting transactions, adjust in production env -->
  <meta-data android:name="io.sentry.traces.profiling.sample-rate" android:value="1.0" />
  <!-- enable app start profiling -->
  <meta-data android:name="io.sentry.traces.profiling.enable-app-start" android:value="true" />

  <!-- record session replays for 100% of errors and 10% of sessions -->
  <meta-data android:name="io.sentry.session-replay.on-error-sample-rate" android:value="1.0" />
  <meta-data android:name="io.sentry.session-replay.session-sample-rate" android:value="0.1" />
</application>

----------------------------------------

TITLE: Configuring Sentry SDK in Ruby
DESCRIPTION: Initializes Sentry SDK with configuration options including DSN, maximum breadcrumbs, debug mode, PII data collection, and tracing sample rate. The configuration is done using a block syntax where various options are set on the config object.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  config.dsn = '___PUBLIC_DSN___'
  config.max_breadcrumbs = 5
  config.debug = true

  # Add data like request headers and IP for users, if applicable;
  # see https://docs.sentry.io/platforms/ruby/data-management/data-collected/ for more info
  config.send_default_pii = true

  # enable tracing
  # we recommend adjusting this value in production
  config.traces_sample_rate = 1.0
end

----------------------------------------

TITLE: Initializing Sentry SDK with Cloudflare Integration
DESCRIPTION: Sets up Sentry error monitoring in a Cloudflare environment with deduplication enabled. Uses the Sentry Cloudflare SDK and requires a valid DSN configuration string. The dedupeIntegration helps prevent duplicate error reports.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/cloudflare";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.dedupeIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry SDK with Litestar Integration
DESCRIPTION: Initialize Sentry SDK with Litestar integration, including performance monitoring and profiling configuration options.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.litestar import LitestarIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
    integrations=[
        LitestarIntegration(),
    ],
)

----------------------------------------

TITLE: Initializing Sentry SDK with Sample Rate in Dart
DESCRIPTION: Initializes the Sentry SDK with a sample rate of 25% to control what portion of events are captured and reported. The initialization is performed asynchronously using await.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  // Capture only 25% of events
  options.sampleRate = 0.25;
});

----------------------------------------

TITLE: Initializing Sentry with Feature Flags in Next.js (TypeScript)
DESCRIPTION: This snippet initializes Sentry with a public DSN and feature flags integration. It then attempts to add a feature flag and captures an exception. The code demonstrates error tracking and feature flag management using Sentry in a Next.js application.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/nextjs';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Injecting Tracing Information into Outgoing Requests with JavaScript
DESCRIPTION: This snippet demonstrates how to collect and inject Sentry tracing information into outgoing HTTP requests using the fetch API. It extracts the 'sentry-trace' and 'baggage' headers from the current trace data and adds them to the request headers.

LANGUAGE: javascript
CODE:
const traceData = Sentry.getTraceData();
const sentryTraceHeader = traceData["sentry-trace"];
const sentryBaggageHeader = traceData["baggage"];

// Make outgoing request
fetch("https://example.com", {
  method: "GET",
  headers: {
    baggage: sentryBaggageHeader,
    "sentry-trace": sentryTraceHeader,
  },
}).then((response) => {
  // ...
});

----------------------------------------

TITLE: Initializing Sentry SDK in C
DESCRIPTION: Shows how to initialize and configure the Sentry SDK with basic options including DSN, database path, release version, and debug mode. Demonstrates proper cleanup with sentry_close(). DSN can also be configured via SENTRY_DSN environment variable.

LANGUAGE: c
CODE:
#include <sentry.h>

int main(void) {
  sentry_options_t *options = sentry_options_new();
  sentry_options_set_dsn(options, "___PUBLIC_DSN___");
  // This is also the default-path. For further information and recommendations:
  // https://docs.sentry.io/platforms/native/configuration/options/#database-path
  sentry_options_set_database_path(options, ".sentry-native");
  sentry_options_set_release(options, "my-project-name@2.3.12");
  sentry_options_set_debug(options, 1);
  sentry_init(options);

  /* ... */

  // make sure everything flushes
  sentry_close();
}

----------------------------------------

TITLE: Implementing Custom Traces Sampler for Sentry SDK in Python
DESCRIPTION: This code defines a custom traces_sampler function that determines the sampling rate for different transaction types. It then initializes the Sentry SDK with this custom sampler. The function examines the sampling context and returns different sampling rates based on the importance of the transaction.

LANGUAGE: python
CODE:
def traces_sampler(sampling_context):
    # Examine provided context data (including parent decision, if any)
    # along with anything in the global namespace to compute the sample rate
    # or sampling decision for this transaction

    if "...":
        # These are important - take a big sample
        return 0.5
    elif "...":
        # These are less important or happen much more frequently - only take 1%
        return 0.01
    elif "...":
        # These aren't something worth tracking - drop all transactions like this
        return 0
    else:
        # Default sample rate
        return 0.1

sentry_sdk.init(
    # ...

    traces_sampler=traces_sampler,
)

----------------------------------------

TITLE: Instrumenting Client-Side Checkout Process in JavaScript
DESCRIPTION: Tracks the client-side checkout process for an e-commerce application, including cart interactions, user interface metrics, and client performance. Uses Sentry's startSpan to capture detailed metrics throughout the checkout flow.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Checkout UI Flow',
    op: 'commerce.checkout.client',
    attributes: {
      // Cart interaction metrics
      'cart.items_added': 3,
      'cart.items_removed': 0,
      'cart.update_count': 2,
      
      // User interaction tracking
      'ui.form_completion_time_ms': 45000,
      'ui.payment_method_changes': 1,
      'ui.address_validation_retries': 0,
      
      // Client performance
      'client.page_load_time_ms': 850,
      'client.payment_widget_load_ms': 650,
      'client.total_interaction_time_ms': 120000
    }
  },
  async () => {
    // Client-side checkout implementation
  }
);

----------------------------------------

TITLE: Initializing Sentry BrowserTracing Integration
DESCRIPTION: Sets up the BrowserTracing integration in Sentry for automatic performance monitoring in browser environments. This integration enables capturing of transactions and spans to measure application performance metrics.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.browserTracingIntegration()],
});

----------------------------------------

TITLE: Initializing Sentry with Knex Integration
DESCRIPTION: Demonstrates how to initialize Sentry with the Knex integration to capture spans using @opentelemetry/instrumentation-knex. This setup enables monitoring of Knex database operations.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.knexIntegration()],
});

----------------------------------------

TITLE: Initializing Sentry Session Replay in JavaScript
DESCRIPTION: Configures Sentry with Session Replay integration including sampling rates and privacy settings. Key features include session sampling rate, error sampling rate, and text/media masking options for privacy protection.

LANGUAGE: javascript
CODE:
// import Sentry from your framework SDK (e.g. @sentry/react) instead of @sentry/browser
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This sets the sample rate to be 10%. You may want this to be 100% while
  // in development and sample at a lower rate in production
  replaysSessionSampleRate: 0.1,

  // If the entire session is not sampled, use the below sample rate to sample
  // sessions when an error occurs.
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    Sentry.replayIntegration({
      // Additional SDK configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry SDK in Node.js
DESCRIPTION: Code to import and initialize the Sentry SDK in a Node.js application. This should be placed in a file named 'instrument.(js|mjs)' in the project's root directory.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="getting-started-config" />

----------------------------------------

TITLE: Installing Sentry Wizard for Next.js
DESCRIPTION: Run this command in your project directory to install Sentry using the installation wizard. The wizard guides you through the setup process and allows you to enable additional Sentry features.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i nextjs

----------------------------------------

TITLE: Configuring Environment-Specific Sampling Rates in JavaScript
DESCRIPTION: This example shows how to set different sampling rates based on the application environment, allowing for more comprehensive tracing in development and reduced sampling in production.

LANGUAGE: javascript
CODE:
tracesSampler: (samplingContext) => {
  // Sample all transactions in development
  if (process.env.NODE_ENV === 'development') {
    return 1.0;
  }
  
  // Sample 5% in production
  if (process.env.NODE_ENV === 'production') {
    return 0.05;
  }
  
  // Sample 20% in staging
  return 0.2;
}

----------------------------------------

TITLE: Creating Nested Spans in Transactions with Java
DESCRIPTION: This snippet demonstrates how to create a transaction, add nested spans, and handle exceptions in Java using Sentry. It shows the process of starting a transaction, passing it to a method, creating child spans, and properly finishing both spans and transactions.

LANGUAGE: java
CODE:
import java.io.FileNotFoundException;

import io.sentry.ISpan;
import io.sentry.ITransaction;
import io.sentry.Sentry;
import io.sentry.SpanStatus;

// A good name for the transaction is key, to help identify what this is about
ITransaction transaction = Sentry.startTransaction("processOrderBatch()", "task");
try {
  processOrderBatch(transaction);
} catch (Exception e) {
  transaction.setThrowable(e);
  transaction.setStatus(SpanStatus.INTERNAL_ERROR);
  throw e;
} finally {
  transaction.finish();
}

void processOrderBatch(ISpan span) {
  if (span == null) {
    span = Sentry.startTransaction("processOrderBatch()", "task");
  }
  // span operation: task, span description: operation
  ISpan innerSpan = span.startChild("task", "operation");
  try {
    // omitted code
  } catch (FileNotFoundException e) {
    innerSpan.setThrowable(e);
    innerSpan.setStatus(SpanStatus.NOT_FOUND);
    throw e;
  } finally {
    innerSpan.finish();
  }
}

----------------------------------------

TITLE: Implementing Source Map URL Normalization
DESCRIPTION: Configuration of Raven's dataCallback to normalize file paths for proper source map resolution. This example handles single-file bundled applications.

LANGUAGE: javascript
CODE:
var path = require('path');

Raven.config('your-dsn', {
    // the rest of configuration

  dataCallback: function (data) {
    var stacktrace = data.exception && data.exception[0].stacktrace;

    if (stacktrace && stacktrace.frames) {
      stacktrace.frames.forEach(function(frame) {
        if (frame.filename.startsWith('/')) {
          frame.filename = 'app:///' + path.basename(frame.filename);
        }
      });
    }

    return data;
  }
).install();

----------------------------------------

TITLE: Initializing Sentry with Custom Sampling Rules in JavaScript
DESCRIPTION: This code snippet initializes Sentry with a custom DSN and configures a tracesSampler function to control sampling rates for different types of transactions. It sets specific sampling rules for health checks, authentication-related transactions, and comment-related transactions.

LANGUAGE: javascript
CODE:
// entry.client.tsx
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracesSampler: (samplingContext) => {
    // Access transaction details from the sampling context
    const { name, attributes, inheritOrSampleWith } = samplingContext;
    
    // Skip health checks entirely
    if (name.includes('healthcheck')) {
      return 0;
    }
    
    // Capture all auth-related transactions
    if (name.includes('auth')) {
      return 1;
    }
    
    // Sample only 1% of comment-related transactions
    if (name.includes('comment')) {
      return 0.01;
    }
    
    // For everything else, inherit parent sampling decision or use 0.5
    return inheritOrSampleWith(0.5);
  }
});

----------------------------------------

TITLE: Initializing Sentry with Node.js Profiling (ESM)
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the Node.js Profiling integration using ES modules. It configures the DSN, adds the profiling integration, and sets sample rates for tracing and profiling.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/nestjs";
import { nodeProfilingIntegration } from '@sentry/profiling-node';

// Ensure to call this before importing any other modules!
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add our Profiling integration
    nodeProfilingIntegration(),
  ],

  // Add Tracing by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,

  // Set sampling rate for profiling
  // This is relative to tracesSampleRate
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Installing Sentry SDK Requirements
DESCRIPTION: Specifies the required Sentry SDK version to be added to the requirements.txt file for Google Cloud Functions integration.

LANGUAGE: text
CODE:
sentry-sdk>=0.17.1

----------------------------------------

TITLE: Configuring RestClient for Sentry Instrumentation
DESCRIPTION: This snippet demonstrates how to configure a RestClient bean using RestClient.Builder to enable Sentry instrumentation for outgoing HTTP requests.

LANGUAGE: java
CODE:
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestClient;

@Configuration
class AppConfig {
  @Bean
  RestClient restClient(RestClient.Builder builder) {
    return builder.build();
  }
}

LANGUAGE: kotlin
CODE:
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Bean
import org.springframework.web.client.RestClient

@Configuration
class AppConfig {
  @Bean
  fun restClient(builder: RestClient.Builder) = builder.build()
}

----------------------------------------

TITLE: Installing Sentry esbuild Plugin
DESCRIPTION: Commands to install the Sentry esbuild plugin using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/esbuild-plugin --save-dev

LANGUAGE: bash
CODE:
yarn add @sentry/esbuild-plugin --dev

LANGUAGE: bash
CODE:
pnpm add @sentry/esbuild-plugin --save-dev

----------------------------------------

TITLE: Configuring React Native Navigation Instrumentation Options
DESCRIPTION: This snippet shows how to configure the React Native Navigation instrumentation with various options. It includes settings for route change timeout, tabs instrumentation, and handling of empty back navigation transactions.

LANGUAGE: javascript
CODE:
Sentry.reactNativeNavigationIntegration({
  navigation: Navigation, // Navigation from `react-native-navigation`
  routeChangeTimeoutMs: 1_000, // default: 1_000
  enableTabsInstrumentation: true, // default: false
  ignoreEmptyBackNavigationTransactions: true, // default: true
});

----------------------------------------

TITLE: Capturing Errors with Sentry in Node.js
DESCRIPTION: Demonstrate how to capture and send an error to Sentry in a Node.js application. This example shows both synchronous and asynchronous error capture methods.

LANGUAGE: javascript
CODE:
const transaction = Sentry.startTransaction({
  op: "test",
  name: "My First Test Transaction",
});

setTimeout(() => {
  try {
    foo();
  } catch (e) {
    Sentry.captureException(e);
  } finally {
    transaction.finish();
  }
}, 99);

// or if you prefer async/await
try {
  const result = await doSomethingAsync();
} catch (e) {
  Sentry.captureException(e);
}

----------------------------------------

TITLE: Initializing Sentry SDK and Customizing Events in Swift
DESCRIPTION: This snippet demonstrates how to start the Sentry SDK in Swift, set the DSN, and implement a beforeSend callback to modify event fingerprints. It specifically targets database connection error messages.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.beforeSend = { event in
        if (event.message.formatted == "database unavailable") {
            event.fingerprint = ["database-connection-error"]
        }
        return event
    }
}

----------------------------------------

TITLE: Recording Breadcrumbs
DESCRIPTION: Illustrates how to record breadcrumbs for tracking user actions and debug information in both SDK versions.

LANGUAGE: python
CODE:
from raven import breadcrumbs

breadcrumbs.record(
    message='Item added to shopping cart',
    category='action',
    data={
        'isbn': '978-1617290541',
        'cartSize': '3'
    }
)

LANGUAGE: python
CODE:
sentry_sdk.add_breadcrumb(
  message='Item added to shopping cart',
  category='action',
  data={
    'isbn': '978-1617290541',
    'cartSize': '3'
  }
)

----------------------------------------

TITLE: Installing Sentry Laravel Package via Composer
DESCRIPTION: Use Composer to install the sentry/sentry-laravel package in your Laravel project.

LANGUAGE: bash
CODE:
composer require sentry/sentry-laravel

----------------------------------------

TITLE: Installing Sentry Laravel Package via Composer
DESCRIPTION: Use Composer to install the sentry/sentry-laravel package in your Laravel project.

LANGUAGE: bash
CODE:
composer require sentry/sentry-laravel

----------------------------------------

TITLE: Adding Sentry to ASP.NET Core 2.x in C#
DESCRIPTION: This snippet shows how to integrate Sentry into an ASP.NET Core 2.x application using C#. It modifies the BuildWebHost method to include the UseSentry extension method with the public DSN.

LANGUAGE: csharp
CODE:
public static IWebHost BuildWebHost(string[] args) =>
    WebHost.CreateDefaultBuilder(args)
        // Add the following line:
        .UseSentry("___PUBLIC_DSN___");

----------------------------------------

TITLE: Configuring Manual Sentry Integration for Vue Applications
DESCRIPTION: Demonstrates how to manually configure Sentry integration for Vue applications that are defined after initial setup. This includes filtering out the default Vue integration and adding a custom integration later with a specific Vue app instance.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/vue';

Sentry.init({
  dsn: '...',
  // Filter out default `Vue` integration
  integrations: integrations => integrations.filter(integration => integration.name !== 'Vue'),
});

// Sometimes later
const app = createApp({
  template: '<div>hello</div>',
});

Sentry.addIntegration(Sentry.vueIntegration({ app }));

----------------------------------------

TITLE: Implementing Sentry ErrorBoundary with Render Props
DESCRIPTION: This example shows how to use the Sentry ErrorBoundary with render props. It includes a fallback function that displays error details and provides a reset mechanism.

LANGUAGE: javascript
CODE:
import React from "react";
import * as Sentry from "@sentry/react";

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: "This is my app",
    };
  }

  render() {
    return (
      <Sentry.ErrorBoundary
        fallback={({ error, componentStack, resetError }) => (
          <React.Fragment>
            <div>You have encountered an error</div>
            <div>{error.toString()}</div>
            <div>{componentStack}</div>
            <button
              onClick={() => {
                this.setState({ message: "This is my app" });
                {
                  /* When resetError() is called it will remove the Fallback component */
                }
                {
                  /* and render the Sentry ErrorBoundary's children in their initial state */
                }
                resetError();
              }}
            >
              Click here to reset!
            </button>
          </React.Fragment>
        )}
      >
        <div>{this.state.message}</div>
        {/* on click, this button sets an Object as a message, not a string. */}
        {/* which will cause an error to occur in the component tree */}
        <button
          onClick={() => this.setState({ message: { text: "Hello World" } })}
        >
          Click here to change message!
        </button>
      </Sentry.ErrorBoundary>
    );
  }
}

export default App;

----------------------------------------

TITLE: Configuring Sentry SDK in WPF Application
DESCRIPTION: Demonstrates how to initialize the Sentry SDK in a WPF application's constructor and set up unhandled exception handling. Includes configuration for error monitoring and performance tracking with TracesSampleRate setting.

LANGUAGE: csharp
CODE:
using System.Windows;

public partial class App : Application
{
    public App()
    {
        SentrySdk.Init(options =>
        {
            // Tells which project in Sentry to send events to:
            options.Dsn = "___PUBLIC_DSN___";

            // When configuring for the first time, to see what the SDK is doing:
            options.Debug = true;

            // Set traces_sample_rate to 1.0 to capture 100% of transactions for tracing.
            // We recommend adjusting this value in production.
            options.TracesSampleRate = 1.0;

            // Enable Global Mode since this is a client app
            options.IsGlobalModeEnabled = true;

            //TODO: any other options you need go here
        });
        DispatcherUnhandledException += App_DispatcherUnhandledException;
    }

    void App_DispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
    {
        SentrySdk.CaptureException(e.Exception);

        // If you want to avoid the application from crashing:
        e.Handled = true;
    }
}

----------------------------------------

TITLE: Continuing Trace from Upstream Service in C using Sentry SDK
DESCRIPTION: Shows how to create a transaction that continues a trace from an upstream service by updating the transaction context with a sentry-trace header. The example demonstrates the use of sentry_transaction_context_update_from_header().

LANGUAGE: c
CODE:
	sentry_transaction_context_t *tx_ctx = sentry_transaction_context_new(
        "honk",
        NULL
    );
    sentry_transaction_context_update_from_header(
        tx_ctx,
        "sentry-trace",
        "41c74c2ea9f2bfb184f86939de5b97aa-399b3e5cc8b83494-1"
    );


----------------------------------------

TITLE: Creating Child Spans with Parent Reference
DESCRIPTION: Example of creating spans with explicit parent-child relationships using the parentSpan option.

LANGUAGE: javascript
CODE:
const parentSpan = Sentry.startInactiveSpan({ name: "Parent Span" });
const childSpan = Sentry.startInactiveSpan({ name: "Child Span", parentSpan });

childSpan.end();
parentSpan.end();

----------------------------------------

TITLE: Retrieving and Creating Child Spans in Current Transaction
DESCRIPTION: Shows how to get the current transaction from Sentry hub and create child spans within it. The code demonstrates span creation with context and proper span completion.

LANGUAGE: php
CODE:
$transaction = \Sentry\SentrySdk::getCurrentHub()->getTransaction();

if ($transaction !== null) {
    $context = \Sentry\Tracing\SpanContext::make()
        ->setOp('some_operation');
    $span = $transaction->startChild($context);

    // ...

    $span->finish();
}

----------------------------------------

TITLE: Initializing Sentry with Custom Sampling Rules in JavaScript
DESCRIPTION: Sets up Sentry with a custom tracesSampler function that implements different sampling rates based on transaction names. Includes special handling for health checks, authentication events, and comment-related transactions.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampler: (samplingContext) => {
    // Access transaction details from the sampling context
    const { name, attributes, inheritOrSampleWith } = samplingContext;
    
    // Skip health checks entirely
    if (name.includes('healthcheck')) {
      return 0;
    }
    
    // Capture all auth-related transactions
    if (name.includes('auth')) {
      return 1;
    }
    
    // Sample only 1% of comment-related transactions
    if (name.includes('comment')) {
      return 0.01;
    }
    
    // For everything else, inherit parent sampling decision or use 0.5
    return inheritOrSampleWith(0.5);
  }
});

----------------------------------------

TITLE: Throwing a Test Error in Remix Action
DESCRIPTION: TypeScript code for creating an action function that throws an error to test Sentry's server-side error capture.

LANGUAGE: typescript
CODE:
export const action: ActionFunction = async ({ request }) => {
  throw new Error("Sentry Error");
};

----------------------------------------

TITLE: Adding Sentry to ASP.NET Core 2.x in C#
DESCRIPTION: This snippet shows how to integrate Sentry into an ASP.NET Core 2.x application using C#. It modifies the BuildWebHost method to include the UseSentry extension method with the public DSN.

LANGUAGE: csharp
CODE:
public static IWebHost BuildWebHost(string[] args) =>
    WebHost.CreateDefaultBuilder(args)
        // Add the following line:
        .UseSentry("___PUBLIC_DSN___");

----------------------------------------

TITLE: Setting Tags and User Data on Isolation Scope
DESCRIPTION: Example showing how to set tags and user data on both current and isolation scopes using direct scope access and global methods.

LANGUAGE: javascript
CODE:
const scope = Sentry.getCurrentScope();
scope.setTag("my-tag", "my value");
scope.setUser({
  id: 42,
  email: "john.doe@example.com"
});

// Or use the global methods (which will set data on the isolation scope):
Sentry.setTag("my-tag", "my value");
Sentry.setUser({
  id: 42,
  email: "john.doe@example.com"
});

----------------------------------------

TITLE: Initializing Sentry and Lazy Loading Replay Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry without the Replay integration, and then dynamically import and add the Replay integration later. This approach allows for lazy loading of the Replay feature, potentially improving initial load times.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Note, Replay is NOT instantiated below:
  integrations: [],
});

// Sometime later
import("@sentry/ember").then(lazyLoadedSentry => {
  Sentry.addIntegration(lazyLoadedSentry.replayIntegration());
});

----------------------------------------

TITLE: Configuring BrowserApiErrors Integration in Sentry (JavaScript)
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the BrowserApiErrors integration, specifying which APIs to instrument. It shows how to enable wrapping for setTimeout, setInterval, requestAnimationFrame, XMLHttpRequest, and eventTarget APIs.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  integrations: [
    Sentry.browserApiErrorsIntegration({
      setTimeout: true,
      setInterval: true,
      requestAnimationFrame: true,
      XMLHttpRequest: true,
      eventTarget: true,
    }),
  ],
});

----------------------------------------

TITLE: Setting Up Sentry for a Mobile App with Backend Services
DESCRIPTION: This configuration shows how to initialize Sentry for a mobile app with multiple backend services. It sets up trace propagation for the main API server, media server, and local API endpoints, allowing for comprehensive tracking of user actions across different components of the app ecosystem.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracePropagationTargets: [
    "https://api.myapp.com",
    "https://media.myapp.com",
    /^\/local-api\//
  ],
});

----------------------------------------

TITLE: Configuring Sentry in application.yml
DESCRIPTION: Sets up basic Sentry configuration using YAML file format. Configures the same parameters as the properties version but in YAML structure.

LANGUAGE: yaml
CODE:
sentry:
    dsn: ___PUBLIC_DSN___
    release: "io.sentry.samples.console@3.0.0+1"

----------------------------------------

TITLE: Configuring Sentry Profiler Options in React
DESCRIPTION: Example demonstrating how to pass custom options to the withProfiler HOC, including component name customization. Shows the configuration syntax for Sentry profiler options.

LANGUAGE: javascript
CODE:
export default Sentry.withProfiler(App, { name: "CustomAppName" });

----------------------------------------

TITLE: Initializing Sentry with Custom Sampling in JavaScript
DESCRIPTION: This snippet initializes Sentry with a custom tracesSampler function. It sets up browser tracing integration and defines sampling rules based on transaction names. Different sampling rates are applied for health checks, auth-related transactions, and comment-related transactions.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracesSampler: (samplingContext) => {
    // Access transaction details from the sampling context
    const { name, attributes, inheritOrSampleWith } = samplingContext;
    
    // Skip health checks entirely
    if (name.includes('healthcheck')) {
      return 0;
    }
    
    // Capture all auth-related transactions
    if (name.includes('auth')) {
      return 1;
    }
    
    // Sample only 1% of comment-related transactions
    if (name.includes('comment')) {
      return 0.01;
    }
    
    // For everything else, inherit parent sampling decision or use 0.5
    return inheritOrSampleWith(0.5);
  }
});

----------------------------------------

TITLE: Configuring Source Map Uploads
DESCRIPTION: Updates Next.js configuration to enable source map uploads for better error stack traces.

LANGUAGE: JavaScript
CODE:
export default withSentryConfig(nextConfig, {
  org: "___ORG_SLUG___",
  project: "___PROJECT_SLUG___",

  // Pass the auth token
  authToken: process.env.SENTRY_AUTH_TOKEN,
  // Upload a larger set of source maps for prettier stack traces (increases build time)
  widenClientFileUpload: true,
});

----------------------------------------

TITLE: Configuring Trace Propagation for Microservices E-commerce Platform in JavaScript
DESCRIPTION: This example demonstrates how to set up trace propagation for a microservices e-commerce platform. It configures Sentry to track user journeys across multiple services including the main API server, authentication server, and internal API calls.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  // Capture 100% of spans. This is useful for development and debugging. Consider reducing in production or using traceSampler
  tracesSampleRate: 1.0,
  tracePropagationTargets: [
    "https://api.myecommerce.com",
    "https://auth.myecommerce.com",
    /^\/internal-api\//
  ],
});

----------------------------------------

TITLE: Configuring Tunneling for Ad Blocker Avoidance
DESCRIPTION: Updates Next.js configuration to enable tunneling, which helps avoid ad blockers from blocking Sentry events.

LANGUAGE: JavaScript
CODE:
export default withSentryConfig(nextConfig, {
  // Route browser requests to Sentry through a Next.js rewrite to circumvent ad-blockers.
  // This can increase your server load as well as your hosting bill.
  // Note: Check that the configured route will not match with your Next.js middleware, otherwise reporting of client-side errors will fail.
  tunnelRoute: "/monitoring",
});

----------------------------------------

TITLE: Configuring Sentry in Vue 2
DESCRIPTION: Configuration code for initializing Sentry in a Vue 2 application, including performance monitoring and session replay setup.

LANGUAGE: javascript
CODE:
import Vue from "vue";
import Router from "vue-router";
import * as Sentry from "@sentry/vue";

Vue.use(Router);

const router = new Router({
  // ...
});

Sentry.init({
  Vue,
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.browserTracingIntegration({ router }),
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

// ...

new Vue({
  router,
  render: (h) => h(App),
}).$mount("#app");

----------------------------------------

TITLE: Initializing Sentry SDK in React
DESCRIPTION: JavaScript code to import and initialize the Sentry SDK with configuration for error monitoring, tracing, and session replay features.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "your_DSN_key",
  integrations: [
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration(),
  ],
  // Tracing
  tracesSampleRate: 1.0, //  Capture 100% of the transactions
  // Set 'tracePropagationTargets' to control for which URLs distributed tracing should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
  // Session Replay
  replaysSessionSampleRate: 0.1, // This sets the sample rate at 10%. You may want to change it to 100% while in development and then sample at a lower rate in production.
  replaysOnErrorSampleRate: 1.0, // If you're not already sampling the entire session, change the sample rate to 100% when sampling sessions where errors occur.
});

----------------------------------------

TITLE: Configuring Sentry SDK with Transaction Sampling in Swift
DESCRIPTION: Initializes Sentry SDK with DSN and configures transaction sampling. Shows both uniform sampling rate (100%) and dynamic sampling using a sampler function that applies different rates for VIP users (100%) versus regular users (25%).

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"

    // Example uniform sample rate: capture 100% of transactions
    // In Production you will probably want a smaller number such as 0.5 for 50%
    options.tracesSampleRate = 1.0

    // OR if you prefer, determine traces sample rate based on the
    // sampling context
    options.tracesSampler = { context in
        // Don't miss any transactions for VIP users
        if context?["vip"] as? Bool == true {
            return 1.0
        } else {
            return 0.25 // 25% for everything else
        }
    }
}

----------------------------------------

TITLE: Configuring Sentry SDK with gRPC Integration for Server
DESCRIPTION: Initialize Sentry SDK with GRPCIntegration for server-side instrumentation. This configuration enables error monitoring, performance tracing, and profiling.

LANGUAGE: python
CODE:
import grpc

import sentry_sdk
from sentry_sdk.integrations.grpc import GRPCIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
    integrations=[
        GRPCIntegration(),
    ],
)

...

# this works with synchronous servers:
server = grpc.server(thread_pool=...)

# ... and asynchronous servers:
server = grpc.aio.server()

----------------------------------------

TITLE: Implementing Custom Trace Sampler in Java
DESCRIPTION: Java implementation of TracesSamplerCallback that provides custom sampling logic for Sentry transactions. Handles parent sampling decisions and allows for custom sampling rates based on context.

LANGUAGE: java
CODE:
import io.sentry.SamplingContext;
import io.sentry.SentryOptions.TracesSamplerCallback;
import org.springframework.stereotype.Component;

@Component
class CustomTracesSamplerCallback implements TracesSamplerCallback {
  @Override
  public Double sample(SamplingContext context) {
    // If this is the continuation of a trace, just use that decision (rate controlled by the caller).
    Boolean parentSampled = context.getTransactionContext().getParentSampled();
    if (parentSampled != null) {
      return parentSampled ? 1.0 : 0.0;
    }
    CustomSamplingContext ctx = context.getCustomSamplingContext();
    if (ctx != null) {
      if (/* make a decision based on `samplingContext` */) {
        // Drop this transaction, by setting its sample rate to 0%
        return 0.0;
      } else if (/* ... */) {
        // Override sample rate for other cases (replaces `options.TracesSampleRate`)
        return 0.1;
      }
      // Can return `null` to fallback to the rate configured by `options.tracesSampleRate`
      return null;
    } else {
      return null;
    }
  }
}

----------------------------------------

TITLE: Setting Maximum Attachment Size in JavaScript
DESCRIPTION: Shows how to set the maximum size for each attachment using SentryOptions.maxAttachmentSize.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="enriching-events/attachment-max-size" />

----------------------------------------

TITLE: Setting Custom Context in Sentry SDK with Python
DESCRIPTION: This code snippet demonstrates how to use the Sentry SDK to set custom context information. It adds character details including name, age, and attack type to the Sentry context, which can be useful for providing additional data during error reporting and analysis.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.set_context("character", {
    "name": "Mighty Fighter",
    "age": 19,
    "attack_type": "melee"
})

----------------------------------------

TITLE: Implementing BeforeSendTransactionCallback in Kotlin for Sentry
DESCRIPTION: This snippet demonstrates how to create a Spring bean that implements the BeforeSendTransactionCallback interface in Kotlin. It shows how to modify or drop transactions based on specific conditions before they are sent to Sentry.

LANGUAGE: kotlin
CODE:
import io.sentry.SentryTransaction
import io.sentry.SentryOptions
import io.sentry.Hint
import org.springframework.stereotype.Component

@Component
class CustomBeforeSendTransactionCallback : SentryOptions.BeforeSendTransactionCallback {
  override fun execute(transaction: SentryTransaction, hint: Hint): SentryTransaction? {
    // Modify or drop the transaction here:
    return if ("/unimportant/route" == transaction.transaction) {
      // Don't send the transaction to Sentry
      null
    } else {
      transaction
    }
  }
}

----------------------------------------

TITLE: Creating Tracer Provider for ASP.NET Applications in C#
DESCRIPTION: This snippet shows how to create a tracer provider for an ASP.NET application. It uses Sdk.CreateTracerProviderBuilder() and adds ASP.NET instrumentation.

LANGUAGE: csharp
CODE:
var builder = Sdk.CreateTracerProviderBuilder()
    .AddAspNetInstrumentation(); // <-- Adds ASP.NET telemetry sources

----------------------------------------

TITLE: Basic Error Capturing with Sentry in Next.js
DESCRIPTION: Demonstrates basic error handling using try-catch block with Sentry's captureException method. Shows how to capture errors in a standard JavaScript context.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/nextjs";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Installing Sentry Browser SDK with yarn
DESCRIPTION: This command installs the Sentry Browser SDK using yarn package manager.

LANGUAGE: bash
CODE:
yarn add @sentry/browser

----------------------------------------

TITLE: Installing Sentry Browser SDK with yarn
DESCRIPTION: This command installs the Sentry Browser SDK using yarn package manager.

LANGUAGE: bash
CODE:
yarn add @sentry/browser

----------------------------------------

TITLE: Configuring Sentry SDK Options in GDScript
DESCRIPTION: Demonstrates how to create a custom configuration script by extending SentryConfiguration class. Shows implementation of environment-specific settings, release versioning, and event processing with filtering and data sanitization capabilities.

LANGUAGE: gdscript
CODE:
extends SentryConfiguration

func _configure(options: SentryOptions):
	if OS.is_debug_build():
		options.environment = "debug"
		options.debug = true
	options.release = "mygame@1.0.0"
	options.before_send = _process_event
	options.on_crash = _process_event

func _process_event(event: SentryEvent) -> SentryEvent:
	if event.environment == "debug":
		# Discard event if running in a debug build.
		return null
	if event.message.contains("Bruno"):
		# Remove sensitive information from the event.
		event.message = event.message.replace("Bruno", "REDACTED")
	return event

----------------------------------------

TITLE: Initializing Sentry SDK with PowerShell
DESCRIPTION: Demonstrates how to import the Sentry module and initialize the SDK with a public DSN. The code shows the basic setup required to start capturing errors with Sentry in a PowerShell environment.

LANGUAGE: powershell
CODE:
# You may need to import the module if you've just installed it.
Import-Module Sentry

# Start the Sentry SDK with the default options.
Start-Sentry '___PUBLIC_DSN___'

----------------------------------------

TITLE: Configuring Webpack for Sentry
DESCRIPTION: Standard webpack configuration for enabling source map generation and setting up the Sentry webpack plugin with organization and project details.

LANGUAGE: javascript
CODE:
const { sentryWebpackPlugin } = require("@sentry/webpack-plugin");

module.exports = {
  // ... other config above ...

  devtool: "source-map", // Source map generation must be turned on
  plugins: [
    sentryWebpackPlugin({
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",
      authToken: process.env.SENTRY_AUTH_TOKEN,
    }),
  ],
};

----------------------------------------

TITLE: Importing Sentry Browser Tracing for Next.js
DESCRIPTION: The @sentry/nextjs package includes a BrowserTracing integration for automatic performance monitoring in browser applications. It's enabled by default when tracing is set up in the app.

LANGUAGE: JavaScript
CODE:
@sentry/nextjs

----------------------------------------

TITLE: Implementing BeforeSendCallback in Java
DESCRIPTION: Java implementation of a custom Sentry BeforeSendCallback that sets a specific fingerprint for SQL exceptions. The component modifies SentryEvents before they are sent to identify database connection errors distinctly.

LANGUAGE: java
CODE:
import io.sentry.SentryEvent;
import io.sentry.SentryOptions;
import io.sentry.Hint
import org.springframework.stereotype.Component;

@Component
public class CustomBeforeSendCallback implements SentryOptions.BeforeSendCallback {
  @Override
  public SentryEvent execute(SentryEvent event, Hint hint) {
    if (event.getThrowable() instanceof SQLException) {
      event.setFingerprints(Arrays.asList("database-connection-error"));
    }
    return event;
  }
}

----------------------------------------

TITLE: Adding In-Memory Attachment to Sentry Scope in C#
DESCRIPTION: This snippet demonstrates how to add an in-memory attachment to the current Sentry scope using C#. It uses the SentrySdk.ConfigureScope method and the scope.AddAttachment function to attach a byte array as a file named 'file.log'.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    // Add an in-memory attachment to the current scope
    scope.AddAttachment(bytes, "file.log");
});

----------------------------------------

TITLE: Configuring Sentry Traces Sampler in TypeScript
DESCRIPTION: Defines the sampling context interface and implements a custom tracesSampler function for Sentry initialization. The sampler excludes healthcheck spans, respects parent sampling decisions, and applies a default 50% sampling rate for new traces.

LANGUAGE: typescript
CODE:
// The shape of samplingContext that is passed to the tracesSampler function
interface SamplingContext {
  // Name of the span
  name: string;
  // Initial attributes of the span
  attributes: SpanAttributes | undefined;
  // If the parent span was sampled - undefined if there is no parent span
  parentSampled: boolean | undefined;
}

Sentry.init({
  // ...

  tracesSampler: ({ name, attributes, parentSampled }) => {
    // Do not sample health checks ever
    if (name.includes("healthcheck")) {
      // Drop this transaction, by setting its sample rate to 0%
      return 0;
    }

    // Continue trace decision, if there is any parentSampled information
    if (typeof parentSampled === "boolean") {
      return parentSampled;
    }

    // Else, use default sample rate (replacing tracesSampleRate)
    return 0.5;
  },
});

----------------------------------------

TITLE: Initializing Sentry with Custom Sample Rate in Kotlin
DESCRIPTION: This Kotlin code snippet shows how to manually initialize Sentry in an Android application and set the sample rate to 0.25 programmatically. It uses the SentryAndroid.init() function with a lambda to configure options.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid

SentryAndroid.init(this) { options ->
  options.sampleRate = 0.25
}

----------------------------------------

TITLE: Initializing Sentry with DSN in Java/Kotlin
DESCRIPTION: Configure Sentry DSN programmatically in Java or Kotlin code using the init method.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setDsn("___PUBLIC_DSN___");
});

LANGUAGE: kotlin
CODE:
import io.Sentry.Sentry

Sentry.init { options ->
  options.dsn = "___PUBLIC_DSN___"
}

----------------------------------------

TITLE: Verifying Sentry SDK Installation in Spring Boot
DESCRIPTION: This code snippet demonstrates how to manually capture an error in a Spring Boot application to verify that Sentry SDK is correctly installed and configured. It intentionally throws an exception to test error reporting.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

try {
  throw new Exception("This is a test.");
} catch (Exception e) {
  Sentry.captureException(e);
}

----------------------------------------

TITLE: Creating and Adding a Custom Integration in Sentry SDK (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a custom integration with a setup hook and add it to the Sentry SDK during initialization. The integration must conform to the Integration interface and include at least a name property.

LANGUAGE: javascript
CODE:
function myAwesomeIntegration() {
  return {
    name: "MyAwesomeIntegration",
    setup(client) {
      // Do something when the SDK is initialized
      // The client that is being setup is passed to the hook
    },
  };
}

Sentry.init({
  // ...
  integrations: [myAwesomeIntegration()],
});

----------------------------------------

TITLE: Sentry Spans Data Structure Example
DESCRIPTION: Example JSON payload showing the structure of Sentry spans, including both an HTTP request span and a Vue component update span. Each span contains timing information, identifiers, operation type, and contextual data.

LANGUAGE: json
CODE:
{
  "spans": [
    {
      "start_timestamp": 1588601261.481961,
      "description": "GET /sockjs-node/info",
      "tags": {
        "http.status_code": "200"
      },
      "timestamp": 1588601261.488901,
      "parent_span_id": "b0e6f15b45c36b12",
      "trace_id": "1e57b752bc6e4544bbaa246cd1d05dee",
      "op": "http",
      "data": {
        "url": "http://localhost:8080/sockjs-node/info?t=1588601703755",
        "status_code": 200,
        "type": "xhr",
        "method": "GET"
      },
      "span_id": "b01b9f6349558cd1"
    },
    {
      "start_timestamp": 1588601261.535386,
      "description": "Vue <App>",
      "timestamp": 1588601261.544196,
      "parent_span_id": "9312d0d18bf51736",
      "trace_id": "1e57b752bc6e4544bbaa246cd1d05dee",
      "op": "update",
      "span_id": "b980d4dec78d7344"
    }
  ]
}

----------------------------------------

TITLE: Configuring Basic Sentry Debug Logging in C#
DESCRIPTION: Demonstrates how to enable debug mode and set diagnostic logging level in Sentry SDK initialization. The DSN is configured and debug mode is enabled with diagnostic level set to Debug.

LANGUAGE: csharp
CODE:
options =>
{
    options.Dsn = "___PUBLIC_DSN___";

    // Enable debug mode to write diagnostic messages
    options.Debug = true;

    // By default it's already the most verbose level: Debug
    // You can use this make this less noisy by changing it to
    // a less verbose level such as `Information` or `Warning`.
    options.DiagnosticLevel = SentryLevel.Debug;
});

----------------------------------------

TITLE: Configuring Sentry SDK in React Native
DESCRIPTION: Initializes Sentry SDK with error monitoring, performance tracking, and profiling capabilities. Includes configuration for data collection, tracing sample rate, and profile sampling.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Adds more context data to events (IP address, cookies, user, etc.)
  // For more information, visit: https://docs.sentry.io/platforms/react-native/data-management/data-collected/
  sendDefaultPii: true,
  // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.
  // We recommend adjusting this value in production.
  // Learn more at
  // https://docs.sentry.io/platforms/react-native/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
  // profilesSampleRate is relative to tracesSampleRate.
  // Here, we'll capture profiles for 100% of transactions.
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Setting Global Tags in Sentry
DESCRIPTION: Shows how to set global tags for error tracking context in both SDK versions.

LANGUAGE: python
CODE:
client.tags_context({'key': 'value'})

LANGUAGE: python
CODE:
sentry_sdk.set_tag('key', 'value')

----------------------------------------

TITLE: Verifying Sentry Integration with Error-Triggering Function in Python
DESCRIPTION: This snippet shows how to wrap a function with the serverless_function decorator that intentionally triggers an error to verify the Sentry integration is working correctly.

LANGUAGE: python
CODE:
@serverless_function
def my_function(...):
    1 / 0  # raises an error

----------------------------------------

TITLE: Configuring Replay Quality in Android Sentry SDK
DESCRIPTION: This code snippet demonstrates how to lower the quality of captured screenshots and videos in the Sentry Replay SDK to reduce CPU, memory, and network bandwidth usage. It sets the replay quality to LOW, which reduces screenshot compression to 10 and bitrate to 50kbps.

LANGUAGE: kotlin
CODE:
SentryAndroid.init(context) { options ->
  // this will reduce screenshot compression to 10 and bitrate to 50kbps
  options.sessionReplay.quality = SentryReplayQuality.LOW // defaults to MEDIUM
}

----------------------------------------

TITLE: Initializing Sentry with Session Replay in NextJS
DESCRIPTION: This code snippet demonstrates how to initialize Sentry with Session Replay integration in a NextJS client-side application. It sets up replay session sampling rates and configures privacy settings for text masking and media blocking.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This sets the sample rate to be 10%. You may want this to be 100% while
  // in development and sample at a lower rate in production
  replaysSessionSampleRate: 0.1,

  // If the entire session is not sampled, use the below sample rate to sample
  // sessions when an error occurs.
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    Sentry.replayIntegration({
      // Additional SDK configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

----------------------------------------

TITLE: Configuring Next.js Server Route Exclusions
DESCRIPTION: This code snippet demonstrates how to exclude specific server-side API routes or pages from automatic Sentry instrumentation during build time. It shows various ways to specify routes using strings and regular expressions.

LANGUAGE: javascript
CODE:
excludeServerRoutes: [
  "/some/excluded/route",
  "/excluded/route/with/[parameter]",
  /^\/route\/beginning\/with\/some\/prefix/,
  /\/routeContainingASpecificPathSegment\/?/,
];

----------------------------------------

TITLE: Initializing Sentry with Custom Sampling in Dart
DESCRIPTION: This snippet shows how to initialize Sentry and configure a custom tracesSampler function. The sampler determines the sampling rate based on the URL path and existing trace context, allowing for fine-grained control over which transactions are captured and at what frequency.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  // Determine traces sample rate based on the sampling context
  options.tracesSampler = (samplingContext) {
    final ctx = samplingContext.customSamplingContext;
      // If this is the continuation of a trace, just use that decision (rate controlled by the caller).
    final parentSampled =
        samplingContext.transactionContext.parentSampled;
    if (parentSampled != null) {
      return parentSampled ? 1.0 : 0.0;
    }

    if ('/payment' == ctx['url']) {
      // These are important - take a big sample
      return 0.5;
    } else if ('/search' == ctx['url']) {
      // Search is less important and happen much more frequently - only take 1%
      return 0.01;
    } else if ('/health' == ctx['url']) {
      // The health check endpoint is just noise - drop all transactions
      return 0.0;
    } else {
      // Default sample rate
      return 0.1;
    }
  };
});

----------------------------------------

TITLE: Initializing Sentry PHP SDK
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry PHP SDK using the init() function. It requires the Sentry DSN (Data Source Name) as a configuration parameter. Early initialization is recommended to capture all errors, including those during application startup.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
]);

----------------------------------------

TITLE: Initializing Sentry SDK in React Native Expo App
DESCRIPTION: Import the @sentry/react-native package and initialize the SDK with your DSN. This snippet also configures performance monitoring and profiling.

LANGUAGE: javascript
CODE:
import { Text, View } from "react-native";
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  sendDefaultPii: true,
  tracesSampleRate: 1.0,
  profilesSampleRate: 1.0,
});

function App() {
  return (
    <View>
      <Text>Expo Example!</Text>
    </View>
  );
}

export default Sentry.wrap(App);

----------------------------------------

TITLE: Uploading Debug Symbols to Sentry in Xcode Build Phase
DESCRIPTION: Shows the Xcode build phase script for uploading debug symbols to Sentry, including an option to include native sources.

LANGUAGE: bash
CODE:
export SENTRY_PROPERTIES=sentry.properties

[[ $SENTRY_INCLUDE_NATIVE_SOURCES == "true" ]] && INCLUDE_SOURCES_FLAG="--include-sources" || INCLUDE_SOURCES_FLAG=""
SENTRY_CLI="../node_modules/@sentry/cli/bin/sentry-cli"
$SENTRY_CLI debug-files upload "$INCLUDE_SOURCES_FLAG" "$DWARF_DSYM_FOLDER_PATH"

----------------------------------------

TITLE: Applying Sentry to Redux Store in React Native
DESCRIPTION: This snippet demonstrates how to use Sentry.createReduxEnhancer to integrate Sentry with a Redux store in a React Native application. It requires @sentry/react-native package version 1.8.0 or higher.

LANGUAGE: javascript
CODE:
Sentry.createReduxEnhancer

----------------------------------------

TITLE: Initializing Sentry SDK with Transaction Sampling
DESCRIPTION: Configures the Sentry SDK with a public DSN and sets up transaction sampling at 25% rate. This setup enables basic error tracking and performance monitoring in a web application.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Capture 25% of all transactions
  tracesSampleRate: 0.25
});

----------------------------------------

TITLE: Initializing Sentry Browser Profiling Integration in JavaScript
DESCRIPTION: Configuration code to set up the BrowserProfiling integration in Sentry. This enables automatic performance profiling for frontend applications using the JS Self-Profiling API. Requires the BrowserTracing integration to be enabled.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.browserProfilingIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry SDK for UWP Application
DESCRIPTION: Demonstrates the complete setup of Sentry SDK in a UWP application, including initialization, exception handling, and application suspension handling. The code shows how to configure the SDK with options like DSN, debug mode, and tracing, while also setting up proper exception handlers.

LANGUAGE: csharp
CODE:
using Sentry.Protocol;
using UnhandledExceptionEventArgs = Windows.UI.Xaml.UnhandledExceptionEventArgs;

sealed partial class App : Application
{
    public App()
    {
        // Initialize Sentry in the App constructor before any other code, to ensure you capture all possible exceptions.
        SentrySdk.Init(options =>
        {
            // Tells which project in Sentry to send events to:
            options.Dsn = "___PUBLIC_DSN___";

            // When configuring for the first time, to see what the SDK is doing:
            options.Debug = true;

            // Set traces_sample_rate to 1.0 to capture 100% of transactions for tracing.
            // We recommend adjusting this value in production.
            options.TracesSampleRate = 1.0;

            // Enable Global Mode since this is a client app.
            options.IsGlobalModeEnabled = true;

            // TODO:Any other Sentry options you need go here.
        });

        // Hook the UWP UnhandledException event before initializing the app component.
        this.UnhandledException += OnUnhandledException;

        // Initialize the app component, and hook the Suspending event.
        this.InitializeComponent();
        this.Suspending += OnSuspending;

        // Add any other code you may need last.
    }

    // Update your OnSuspending handler as shown

    private async void OnSuspending(object sender, SuspendingEventArgs e)
    {
        var deferral = e.SuspendingOperation.GetDeferral();

        // Flush Sentry events when suspending
        await SentrySdk.FlushAsync(TimeSpan.FromSeconds(2));

        // TODO: Save any other application state and stop any background activity.

        deferral.Complete();
    }

    // Add this OnUnhandledException handler.

    // Use these attributes to ensure all types of exceptions are handled.
    [SecurityCritical]
    [HandleProcessCorruptedStateExceptions]
    private void OnUnhandledException(object sender, UnhandledExceptionEventArgs e)
    {
        // Get a reference to the exception, because the Exception property is cleared when accessed.
        var exception = e.Exception;
        if (exception != null)
        {
            // Tell Sentry this was an unhandled exception
            exception.Data[Mechanism.HandledKey] = false;
            exception.Data[Mechanism.MechanismKey] = "Application.UnhandledException";

            // Capture the exception
            SentrySdk.CaptureException(exception);

            // Flush the event immediately
            SentrySdk.FlushAsync(TimeSpan.FromSeconds(2)).GetAwaiter().GetResult();
        }
    }
}

----------------------------------------

TITLE: Initializing Sentry SDK in Kotlin
DESCRIPTION: Shows how to initialize Sentry SDK in Kotlin with configuration for DSN, PII data collection, and trace sampling rate. The configuration enables collecting user data like request headers and IP addresses, and sets up performance monitoring with 100% transaction sampling.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.init { options ->
  options.dsn = "___PUBLIC_DSN___"

  // Add data like request headers and IP for users,
  // see https://docs.sentry.io/platforms/java/data-management/data-collected/ for more info
  options.isSendDefaultPii = true

  // Set traces_sample_rate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production.
  options.tracesSampleRate = 1.0
}

----------------------------------------

TITLE: Adding Extra Data in Raven Configuration for Node.js
DESCRIPTION: This example demonstrates how to add extra arbitrary data to the Raven configuration.

LANGUAGE: javascript
CODE:
{
  extra: {
    planet: {
      name: "Earth";
    }
  }
}

----------------------------------------

TITLE: Setting Release Version in Raven Configuration for Node.js
DESCRIPTION: This example demonstrates how to set the release version in the Raven configuration.

LANGUAGE: javascript
CODE:
{
  release: "721e41770371db95eee98ca2707686226b993eda";
}

----------------------------------------

TITLE: Installing Raven Python SDK
DESCRIPTION: Basic pip installation command for the Raven SDK

LANGUAGE: bash
CODE:
pip install raven --upgrade

----------------------------------------

TITLE: Setting Sentry Auth Token
DESCRIPTION: Set the Sentry authentication token as an environment variable for use during release builds.

LANGUAGE: bash
CODE:
export SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Configuring Sentry SDK in Swift for iOS
DESCRIPTION: This code snippet demonstrates how to initialize and configure the Sentry SDK in Swift. It sets up the DSN, enables debug mode, and configures the traces sample rate for performance monitoring.

LANGUAGE: swift
CODE:
import Sentry // Make sure you import Sentry

// ....

func application(_ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {

    SentrySDK.start { options in
        options.dsn = "___PUBLIC_DSN___"
        options.debug = true // Enabled debug when first installing is always helpful

        // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.
        // We recommend adjusting this value in production.
        options.tracesSampleRate = 1.0
    }

    return true
}

----------------------------------------

TITLE: Implementing Custom Integration for Sentry in JavaScript
DESCRIPTION: This code snippet defines a custom integration class 'MyAwesomeIntegration' and demonstrates how to initialize Sentry with this custom integration. The class includes a static 'id', a 'name' property, and a 'setupOnce' method for initialization logic.

LANGUAGE: javascript
CODE:
class MyAwesomeIntegrations {
  static id = "MyAwesomeIntegration";
  name = "MyAwesomeIntegration";

  setupOnce() {
    // Do something when the integration is initialized
  }
}

Sentry.init({
  // ...
  integrations: [new MyAwesomeIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry in Lambda Handler
DESCRIPTION: JavaScript code showing how to initialize Sentry SDK outside the Lambda handler and wrap the handler function. Includes configuration for error monitoring, performance tracing, and profiling with customizable sample rates.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/aws-serverless");
const { nodeProfilingIntegration } = require("@sentry/profiling-node");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [nodeProfilingIntegration()],
  // Add Tracing by setting tracesSampleRate and adding integration
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
});

exports.handler = Sentry.wrapHandler(async (event, context) => {
  // Your handler code
});

----------------------------------------

TITLE: Verifying Redis Integration with Standard Redis
DESCRIPTION: Example code to verify the Redis integration using the standard Redis client. It initializes Sentry SDK, creates a Redis connection, and performs set and get operations within a transaction.

LANGUAGE: python
CODE:
import redis

def main():
    sentry_sdk.init(...)  # same as above
    r = redis.Redis(host='localhost', port=6379, decode_responses=True)

    with sentry_sdk.start_transaction(name="testing_sentry"):
        r.set("foo", "bar")
        r.get("foo")

main()

----------------------------------------

TITLE: Initializing Sentry SDK with Transaction Filtering
DESCRIPTION: Demonstrates how to initialize Sentry with a custom beforeSendTransaction hook that filters out specific transaction routes. The code configures Sentry with a DSN and implements logic to drop transactions for unimportant routes while allowing others to be sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Called for transaction events
  beforeSendTransaction(event) {
    // Modify or drop the event here
    if (event.transaction === "/unimportant/route") {
      // Don't send the event to Sentry
      return null;
    }
    return event;
  },
});

----------------------------------------

TITLE: Implementing Screenshot Functionality in Sentry Feedback Widget
DESCRIPTION: Example of implementing custom screenshot handling using the onAddScreenshot callback.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/react-native';
import { getImage } from 'custom-image-picker';

const handleChooseImage = (addScreenshot: (uri: string) => void): void => {
  const { uri, error, canceled } = getImage();
  if (canceled) {
  	console.log('User canceled image choice.');
  } else if (error) {
    console.log('Error during image loading', error);
  } else {
    addScreenshot(uri);
  }
};

Sentry.feedbackIntegration({
    onAddScreenshot={handleChooseImage}
});

----------------------------------------

TITLE: Creating HTTP Request Transaction with Sentry in Go
DESCRIPTION: Shows how to create a Sentry transaction for monitoring HTTP requests. The code demonstrates setting up a transaction with proper context handling, span options configuration, and request-based transaction naming. It includes hub management and proper cleanup with deferred transaction completion.

LANGUAGE: go
CODE:
http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	hub := sentry.GetHubFromContext(ctx)
	if hub == nil {
		// Check the concurrency guide for more details: https://docs.sentry.io/platforms/go/concurrency/
		hub = sentry.CurrentHub().Clone()
		ctx = sentry.SetHubOnContext(ctx, hub)
	}

	options := []sentry.SpanOption{
		// Set the OP based on values from https://develop.sentry.dev/sdk/performance/span-operations/
		sentry.WithOpName("http.server"),
		sentry.ContinueFromRequest(r),
		sentry.WithTransactionSource(sentry.SourceURL),
	}

	transaction := sentry.StartTransaction(ctx,
		fmt.Sprintf("%s %s", r.Method, r.URL.Path),
		options...,
	)
	defer transaction.Finish()

	doWork(transaction.Context());
})

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Options in C
DESCRIPTION: Demonstrates how to create and configure Sentry options for SDK initialization. Shows setting essential parameters like DSN, release version, and debug mode before initializing the SDK.

LANGUAGE: c
CODE:
#include <sentry.h>

int main(void) {
  sentry_options_t *options = sentry_options_new();
  sentry_options_set_dsn(options, "___PUBLIC_DSN___");
  sentry_options_set_release(options, "my-project-name@2.3.12");
  sentry_options_set_debug(options, 1);
  sentry_init(options);

  /* ... */
}

----------------------------------------

TITLE: Using Mask and Unmask Components in React Native
DESCRIPTION: Example of using Sentry's Mask and Unmask components to selectively mask or unmask specific UI elements. Requires Sentry React Native SDK version 6.4.0-beta.1 or higher.

LANGUAGE: jsx
CODE:
import * as Sentry from '@sentry/react-native';

const Example = () => {
  return (
    <View>
      <Sentry.Unmask>
        <Text>This will be unmasked</Text>
      </Sentry.Unmask>
      <Sentry.Mask>
        <Text>This will be masked</Text>
      </Sentry.Mask>
    </View>
  );
}

----------------------------------------

TITLE: Initializing Sentry with Custom Trace Sampling in Kotlin
DESCRIPTION: This snippet demonstrates Sentry initialization in Kotlin, including setting the DSN and configuring a custom trace sampler. The sampler applies different sampling rates based on the request URL, allowing for targeted tracing of specific endpoints.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.TracesSamplerCallback

Sentry.init { options ->
  options.dsn = "___PUBLIC_DSN___"
  // To set a uniform sample rate
  options.tracesSampleRate = 1.0
  // OR: Determine traces sample rate based on the sampling context
  options.tracesSampler = TracesSamplerCallback { context ->
    val ctx = context.customSamplingContext
    if (ctx != null) {
      when (ctx["url"]) {
        "/payment" -> {
          // These are important - take a big sample
          0.5
        }
        "/search" -> {
          // Search is less important and happen much more frequently - only take 1%
          0.01
        }
        "/health" -> {
          // The health check endpoint is just noise - drop all transactions
          0.0
        }
        else -> {
          // Default sample rate
          null
        }
      }
    } else {
      null
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry with Session Replay in SvelteKit
DESCRIPTION: This code snippet demonstrates how to initialize Sentry with Session Replay integration in a SvelteKit application. It includes configuration for sampling rates and additional replay options.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This sets the sample rate to be 10%. You may want this to be 100% while
  // in development and sample at a lower rate in production
  replaysSessionSampleRate: 0.1,

  // If the entire session is not sampled, use the below sample rate to sample
  // sessions when an error occurs.
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    Sentry.replayIntegration({
      // Additional SDK configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

----------------------------------------

TITLE: Initializing SentryFlutter SDK in Dart
DESCRIPTION: This code initializes the SentryFlutter SDK with custom options. It sets the DSN, release version, and environment. The initialization is done asynchronously in the main function before running the Flutter app.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) => options
      ..dsn = '___PUBLIC_DSN___'
      ..release = 'my-project-name@2.3.12'
      ..environment = 'staging',
    appRunner: () => runApp(MyApp()),
  );
}

----------------------------------------

TITLE: Initializing Sentry with Session Replay in SvelteKit
DESCRIPTION: This code snippet demonstrates how to initialize Sentry with Session Replay integration in a SvelteKit application. It includes configuration for sampling rates and additional replay options.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This sets the sample rate to be 10%. You may want this to be 100% while
  // in development and sample at a lower rate in production
  replaysSessionSampleRate: 0.1,

  // If the entire session is not sampled, use the below sample rate to sample
  // sessions when an error occurs.
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    Sentry.replayIntegration({
      // Additional SDK configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry with Browser Tracing in JavaScript
DESCRIPTION: This snippet initializes Sentry with a public DSN, enables browser tracing integration, and sets a custom sample rate for performance monitoring. It configures Sentry to capture 25% of all transactions.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  // Capture 25% of all transactions
  tracesSampleRate: 0.25
});

----------------------------------------

TITLE: React Component Include
DESCRIPTION: Includes a PageGrid component that likely renders a grid layout of configuration options.

LANGUAGE: jsx
CODE:
<PageGrid />

----------------------------------------

TITLE: Initializing Sentry SDK in Node.js
DESCRIPTION: Demonstrates how to initialize the Sentry SDK with a DSN (Data Source Name) and enable console capture integration. The DSN is used to authenticate and route error reports to the correct Sentry project.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  integrations: [Sentry.captureConsoleIntegration()],
});

----------------------------------------

TITLE: Setting Custom Performance Measurements in Sentry
DESCRIPTION: This code snippet demonstrates how to set custom performance measurements using Sentry's SDK. It shows examples of recording memory usage, component render time, and localStorage read count with different units.

LANGUAGE: javascript
CODE:
// Record amount of memory used
Sentry.setMeasurement("memoryUsed", 123, "byte");

// Record time when Footer component renders on page
Sentry.setMeasurement("ui.footerComponent.render", 1.3, "second");

// Record amount of times localStorage was read
Sentry.setMeasurement("localStorageRead", 4);

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command to build the Angular application and trigger source maps upload.

LANGUAGE: bash
CODE:
ng build # add --prod for Angular versions below 13

----------------------------------------

TITLE: Adding Sentry Performance Tracing with Error Capture
DESCRIPTION: Enhanced version that combines performance tracing with error capture. Creates a performance span named 'My First Test Transaction' to measure execution time while maintaining the error capture functionality.

LANGUAGE: javascript
CODE:
Sentry.startSpan({
  op: "test",
  name: "My First Test Transaction",
}, () => {
  setTimeout(() => {
    try {
      foo();
    } catch (e) {
      Sentry.captureException(e);
    }
  }, 99);
});

----------------------------------------

TITLE: Initializing Sentry SDK with Metrics in JavaScript
DESCRIPTION: This snippet shows how to initialize the Sentry SDK with automatic metrics tracking. It requires setting the DSN (Data Source Name) for your Sentry project. For SDK versions prior to 8.0.0, an additional experiment flag was needed to enable the metrics aggregator.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  dsn: '___PUBLIC_DSN___',
  // Only needed for SDK versions < 8.0.0
  // _experiments: {
  //   metricsAggregator: true,
  // },
});

----------------------------------------

TITLE: Initializing Sentry with Prisma v6 Integration
DESCRIPTION: Configuration for adding Prisma integration to Sentry initialization for Prisma version 6. Sets up tracing with a sample rate of 100%.

LANGUAGE: javascript
CODE:
Sentry.init({
  tracesSampleRate: 1.0,
  integrations: [Sentry.prismaIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry NLog Target using XML in NLog.config
DESCRIPTION: This XML configuration sets up the Sentry NLog target with various options including DSN, layout, breadcrumb layout, minimum levels for breadcrumbs and events, and custom tags. It demonstrates how to add the Sentry.NLog assembly and configure logging rules.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
>
  <extensions>
    <add assembly="Sentry.NLog" />
  </extensions>

  <targets>
    <target
        xsi:type="Sentry"
        name="sentry"
        dsn="___PUBLIC_DSN___"
        layout="${message}"
        breadcrumbLayout="${logger}: ${message}"
        minimumBreadcrumbLevel="Debug"
        minimumEventLevel="Error">
      <!-- All Sentry Options are accessible here. -->
      <!-- For example, you can send the logger name as a tag on each event. -->
      <tag name="logger" layout="${logger}" />

    </target>
  </targets>

  <rules>
    <logger name="*" writeTo="sentry" />
  </rules>
</nlog>

----------------------------------------

TITLE: Initializing Sentry with Metrics Aggregation in JavaScript
DESCRIPTION: This snippet initializes Sentry with a public DSN and integrates the metrics aggregator. It sets up error tracking and performance monitoring for a JavaScript application.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [
    Sentry.metrics.metricsAggregatorIntegration(),
  ],
});

----------------------------------------

TITLE: Initializing Sentry with Session Replay for Gatsby
DESCRIPTION: This snippet initializes Sentry with Session Replay integration for a Gatsby project. It sets up sampling rates for session replays and error replays, and configures privacy settings for the replay integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/gatsby";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This sets the sample rate to be 10%. You may want this to be 100% while
  // in development and sample at a lower rate in production
  replaysSessionSampleRate: 0.1,

  // If the entire session is not sampled, use the below sample rate to sample
  // sessions when an error occurs.
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    Sentry.replayIntegration({
      // Additional SDK configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Options in Java
DESCRIPTION: Shows how to initialize Sentry with custom configuration options including DSN setting, release version specification, and event filtering using beforeSend callback. The code demonstrates dropping events based on tag conditions.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

public class MyClass {
  public static void main(String... args) {
    Sentry.init(options -> {
      // your Sentry project/dashboard
      options.setDsn("___PUBLIC_DSN___");
      options.setRelease("io.sentry.samples.console@3.0.0+1");
      options.setBeforeSend((event, hint) -> {
        // Drop an event altogether:
        if (event.getTag("SomeTag") != null) {
          return null;
        }
        return event;
      });
    });
  }
}

----------------------------------------

TITLE: Testing Sentry Tracing
DESCRIPTION: Creates a test API route and updates the test button to call this route, demonstrating Sentry's tracing capabilities.

LANGUAGE: JavaScript
CODE:
import { NextResponse } from "next/server";
export const dynamic = "force-dynamic";

// A faulty API route to test Sentry's error monitoring
export function GET() {
  throw new Error("Sentry Example API Route Error");
  return NextResponse.json({ data: "Testing Sentry Error..." });
}

LANGUAGE: JavaScript
CODE:
<button
  type="button"
  onClick={async () => {
	await Sentry.startSpan({
	  name: 'Example Frontend Span',
	  op: 'test'
	}, async () => {
	  const res = await fetch("/api/sentry-example-api");
	  if (!res.ok) {
		throw new Error("Sentry Example Frontend Error");
	  }
	});
  }
  }
  >
  Break the world
</button>;

----------------------------------------

TITLE: Configuring Sentry SDK with Transaction Sampling in Objective-C
DESCRIPTION: Initializes Sentry SDK with DSN and configures transaction sampling in Objective-C. Implements both uniform sampling rate (100%) and context-based sampling logic that differentiates between VIP users (100%) and regular users (25%).

LANGUAGE: objective-c
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions * options) {
    options.Dsn = @"___PUBLIC_DSN___";

    // Example uniform sample rate: capture 100% of transactions
    // In Production you will probably want a smaller number such as 0.5 for 50%
    options.tracesSampleRate = @1.0;

    // OR if you prefer, determine traces sample rate based on the sampling context
    options.tracesSampler = ^NSNumber * (SentrySamplingContext * samplingContext) {
        // Don't miss any transactions for VIP users
        if ([samplingContext[@"vip"] boolValue] == YES) {
            return @1.0;
        } else {
            return @0.25; // 25% for everything else
        }
    };
}];

----------------------------------------

TITLE: Initializing Sentry and Lazy Loading Replay Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with specific replay sample rates and then lazily load the replay integration. It sets up Sentry without initially including the replay integration, but configures the replay sample rates. Later, it uses lazy loading to add the replay integration.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Note, replayIntegration is NOT instantiated below:
  integrations: [],

  // Replay sample rates still have to be set in `Sentry.init`:
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

// Sometime later
Sentry.lazyLoadIntegration("replayIntegration").then((replayIntegration) => {
  Sentry.addIntegration(replayIntegration());
});

----------------------------------------

TITLE: Initializing Sentry SDK and Customizing Events in Objective-C
DESCRIPTION: This snippet shows how to start the Sentry SDK in Objective-C, set the DSN, and implement a beforeSend callback to modify event fingerprints. It handles the same database connection error scenario as the Swift version.

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.beforeSend = ^SentryEvent * _Nullable(SentryEvent * _Nonnull event) {
        if ([event.message.formatted isEqualToString:@"database unavailable"]) {
            event.fingerprint = @[@"database-connection-error"];
        }
        return event;
    };
}];

----------------------------------------

TITLE: Integrating Sentry with React Navigation using Functional Components
DESCRIPTION: This snippet shows how to set up Sentry with React Navigation in a functional component. It initializes Sentry with a custom navigation integration and configures the NavigationContainer component with a ref and onReady callback to register the navigation container.

LANGUAGE: jsx
CODE:
import * as Sentry from "@sentry/react-native";
import { NavigationContainer } from "@react-navigation/native";

const navigationIntegration = Sentry.reactNavigationIntegration({
  enableTimeToInitialDisplay: true,
});

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [navigationIntegration],
})

function App = () => {
  const containerRef = React.useRef();

  return (
    <NavigationContainer
      ref={containerRef}
      onReady={() => {
        navigationIntegration.registerNavigationContainer(containerRef);
      }}>
    </NavigationContainer>
  );
};

----------------------------------------

TITLE: Setting Transaction Sample Rate in Sentry C SDK
DESCRIPTION: Initializes Sentry options and sets a uniform sample rate of 20% for transactions. Shows basic setup with sentry.h header inclusion, options creation, sample rate configuration, and SDK initialization.

LANGUAGE: c
CODE:
#include <sentry.h>

sentry_options_t *options = sentry_options_new();

// Example Uniform sample rate: capture 20% of transactions
sentry_options_set_traces_sample_rate(options, 0.2);

sentry_init(options);

----------------------------------------

TITLE: Configuring Server-Side Tracing with Sentry in Remix
DESCRIPTION: This snippet shows how to initialize Sentry for server-side tracing in a Remix application. It captures transactions for loaders, actions, and request handlers, with the ability to extend to database operations.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/remix";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Manually Recording Breadcrumbs in Sentry
DESCRIPTION: This snippet demonstrates how to manually record a breadcrumb in Sentry. It includes examples for different programming languages, showing how to add a breadcrumb with a message, category, and additional data.

LANGUAGE: javascript
CODE:
Sentry.addBreadcrumb({
  category: "auth",
  message: "Authenticated user",
  level: "info",
});

LANGUAGE: python
CODE:
sentry_sdk.add_breadcrumb(
    category="auth",
    message="Authenticated user",
    level="info",
)

LANGUAGE: java
CODE:
Sentry.addBreadcrumb(
    new Breadcrumb() {
        {
            setCategory("auth");
            setMessage("Authenticated user");
            setLevel(SentryLevel.INFO);
        }
    }
);

LANGUAGE: ruby
CODE:
Sentry.add_breadcrumb(
  category: "auth",
  message: "Authenticated user",
  level: "info"
)

LANGUAGE: php
CODE:
\Sentry\addBreadcrumb(
    new \Sentry\Breadcrumb(
        \Sentry\Breadcrumb::LEVEL_INFO,
        \Sentry\Breadcrumb::TYPE_DEFAULT,
        'auth',                  // category
        'Authenticated user'     // message
    )
);

LANGUAGE: go
CODE:
sentry.AddBreadcrumb(&sentry.Breadcrumb{
	Category: "auth",
	Message:  "Authenticated user",
	Level:    sentry.LevelInfo,
})

LANGUAGE: rust
CODE:
sentry::add_breadcrumb(|| sentry::Breadcrumb {
    category: Some("auth".into()),
    message: Some("Authenticated user".into()),
    level: sentry::Level::Info,
    ..Default::default()
});

LANGUAGE: kotlin
CODE:
Sentry.addBreadcrumb(Breadcrumb().apply {
    category = "auth"
    message = "Authenticated user"
    level = SentryLevel.INFO
})

LANGUAGE: swift
CODE:
SentrySDK.addBreadcrumb(Breadcrumb(
    level: SentryLevel.info,
    category: "auth",
    message: "Authenticated user"
))

----------------------------------------

TITLE: Integrating Sentry with OpenFeature - Global Hook Implementation
DESCRIPTION: Shows how to initialize Sentry with OpenFeature integration and set up global hooks to track all feature flag evaluations. This approach will track evaluations across all OpenFeature clients in the application.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/gatsby';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
OpenFeature.addHooks(new Sentry.OpenFeatureIntegrationHook());

const client = OpenFeature.getClient();
const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Options in JavaScript
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK with custom options, including setting initial scope data using both an object and a callback function.

LANGUAGE: javascript
CODE:
// Using an object
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  initialScope: {
    tags: { "my-tag": "my value" },
    user: { id: 42, email: "john.doe@example.com" },
  },
});

// Using a callback function
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  initialScope: (scope) => {
    scope.setTags({ a: "b" });
    return scope;
  },
});

----------------------------------------

TITLE: Configuring Sentry Maven Plugin in pom.xml
DESCRIPTION: This snippet demonstrates how to configure the Sentry Maven Plugin in your project's pom.xml file. It includes various configuration options such as debug output, skipping the plugin, disabling source bundle, and auto-installation settings. It also shows how to set up the 'uploadSourceBundle' goal for enabling source context in Sentry.

LANGUAGE: xml
CODE:
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>io.sentry</groupId>
        <artifactId>sentry-maven-plugin</artifactId>
        <version>{{@inject packages.version('sentry.java.maven-plugin', '0.0.2') }}</version>
        <!-- Required to allow auto-install of Sentry SDK and Integrations -->
        <extensions>true</extensions>
        <configuration>
          <!-- for showing output of sentry-cli -->
          <debugSentryCli>true</debugSentryCli>

          <!--  Disable the plugin -->
          <skip>false</skip>

          <!--  Disable source-context -->
          <skipSourceBundle>false</skipSourceBundle>

          <!--  Disable auto-install of SDK and Integrations -->
          <skipAutoInstall>false</skipAutoInstall>
        </configuration>
        <executions>
          <execution>
            <goals>
              <!--  Generates a source bundle and uploads it to Sentry. -->
              <!--  This enables source context, allowing you to see your source -->
              <!--  code as part of your stack traces in Sentry. -->
              <goal>uploadSourceBundle</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  ...
</project>

----------------------------------------

TITLE: Instrumenting Queue Consumer with Sentry in JavaScript
DESCRIPTION: This snippet shows how to instrument a queue consumer using Sentry.startSpan and Sentry.continueTrace. It sets the required attributes, continues the trace from the producer, and marks the trace status.

LANGUAGE: javascript
CODE:
const message = JSON.parse(await redisClient.lPop(QUEUE_KEY));
const latency = Date.now() - message.timestamp;

Sentry.continueTrace(
    { sentryTrace: message.sentryTrace, baggage: message.sentryBaggage },
    () => {
        Sentry.startSpan({
                name: 'queue_consumer_transaction',
            },
            (parent) => {
                Sentry.startSpan({
                    name: 'queue_consumer',
                    op: 'queue.process',
                    attributes: {
                        'messaging.message.id': message.messageId,
                        'messaging.destination.name': 'messages',
                        'messaging.message.body.size': message.messageBodySize,
                        'messaging.message.receive.latency': latency,
                        'messaging.message.retry.count': 0,
                    }
                }, (span) => {
                    ... // Continue message processing
                    parent.setStatus({code: 1, message: 'ok'});
                });
            },
        ),
    },
)

----------------------------------------

TITLE: Implementing Sentry tRPC Middleware in Node.js
DESCRIPTION: Shows how to set up Sentry's tRPC middleware to create spans and capture errors in tRPC handlers. The middleware can be configured to attach RPC input data to error events through the attachRpcInput option.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";
import { initTRPC } from "@trpc/server";

const t = initTRPC.context().create();

const sentryMiddleware = t.middleware(
  Sentry.trpcMiddleware({
    attachRpcInput: true,
  })
);

const sentrifiedProcedure = t.procedure.use(sentryMiddleware);

----------------------------------------

TITLE: Initializing Sentry SDK in Async Python Applications
DESCRIPTION: For async applications, initialize the Sentry SDK inside an async function to ensure proper instrumentation of async code. This example demonstrates how to do this at the beginning of the first async function called.

LANGUAGE: python
CODE:
import asyncio
import sentry_sdk

async def main():
    sentry_sdk.init(
        ...  # same as above
    )

asyncio.run(main())

----------------------------------------

TITLE: Configuring Sentry Trace Sampling in C#
DESCRIPTION: Sets up custom trace sampling logic in Sentry SDK initialization. Implements conditional sampling rates based on parent sampling decisions and URL patterns. Handles different endpoints with varying sampling rates - 50% for payment routes, 1% for search, dropping health checks, and 10% default rate.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
// To set a uniform sample rate
options.TracesSampleRate = 1.0;

// OR: Determine traces sample rate based on the sampling context
options.TracesSampler = context =>
{
    // If this is the continuation of a trace, just use that decision (rate controlled by the caller)
    if (context.TransactionContext.IsParentSampled is not null)
    {
        return context.TransactionContext.IsParentSampled.Value
            ? 1.0
            : 0.0;
    }

    // Otherwise, sample based on URL (exposed through custom sampling context)
    return context.CustomSamplingContext.GetValueOrDefault("url") switch
    {
        // These are important - take a big sample
        "/payment" => 0.5,

        // Search is less important and happen much more frequently - only take 1%
        "/search" => 0.01,

        // The health check endpoint is just noise - drop all transactions
        "/health" => 0.0,

        // Default sample rate
        _ => 0.1

        // Or return null to fallback to options.TracesSampleRate (1.0 in this case)
        // _ => null
    };
};

----------------------------------------

TITLE: Capturing React Render Errors (App Router)
DESCRIPTION: Creates a custom Next.js GlobalError component for the App Router to capture React render errors.

LANGUAGE: TypeScript
CODE:
"use client";

import * as Sentry from "@sentry/nextjs";
import NextError from "next/error";
import { useEffect } from "react";

export default function GlobalError({
  error,
}: {
  error: Error & { digest?: string };
}) {
  useEffect(() => {
    Sentry.captureException(error);
  }, [error]);

  return (
    <html>
      <body>
        {/* `NextError` is the default Next.js error page component. Its type
        definition requires a `statusCode` prop. However, since the App Router
        does not expose status codes for errors, we simply pass 0 to render a
        generic error message. */}
        <NextError statusCode={0} />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Initializing Sentry in Node.js
DESCRIPTION: Configure Sentry in your Node.js application by importing the SDK and calling the init function with your DSN. This sets up Sentry to capture errors in your application.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Implementing Remix ErrorBoundary with Sentry
DESCRIPTION: TypeScript code to create a custom ErrorBoundary component that captures errors using Sentry in a Remix application.

LANGUAGE: typescript
CODE:
import { captureRemixErrorBoundaryError } from "@sentry/remix";

export const ErrorBoundary: V2_ErrorBoundaryComponent = () => {
  const error = useRouteError();

  captureRemixErrorBoundaryError(error);

  return <div> ... </div>;
};

----------------------------------------

TITLE: Creating Sentry Redux Enhancer in JavaScript
DESCRIPTION: This snippet demonstrates how to use Sentry.createReduxEnhancer to capture Redux state data. It should be placed where you initialize your Redux store.

LANGUAGE: javascript
CODE:
Sentry.createReduxEnhancer

----------------------------------------

TITLE: Implementing User and Transaction Property-Based Sampling in JavaScript
DESCRIPTION: This code snippet illustrates how to control sampling based on user tiers, recent error occurrences, and specific transaction paths, demonstrating fine-grained control over tracing.

LANGUAGE: javascript
CODE:
tracesSampler: (samplingContext) => {
  const { attributes, inheritOrSampleWith } = samplingContext;
  
  // Always sample for premium users
  if (attributes?.userTier === 'premium') {
    return 1.0;
  }
  
  // Sample more transactions for users experiencing errors
  if (attributes?.hasRecentErrors === true) {
    return 0.8;
  }
  
  // Sample less for high-volume, low-value paths
  if (attributes?.path?.includes('/api/metrics')) {
    return 0.01;
  }
  
  // Default sampling rate
  return inheritOrSampleWith(0.2);
}

----------------------------------------

TITLE: Initializing Sentry with Custom Sampling in JavaScript
DESCRIPTION: This snippet initializes Sentry with a custom tracesSampler function to control sampling rates for different types of transactions. It sets specific sampling rates for health checks, auth-related transactions, and comment-related transactions.

LANGUAGE: javascript
CODE:
// hooks.client.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracesSampler: (samplingContext) => {
    // Access transaction details from the sampling context
    const { name, attributes, inheritOrSampleWith } = samplingContext;
    
    // Skip health checks entirely
    if (name.includes('healthcheck')) {
      return 0;
    }
    
    // Capture all auth-related transactions
    if (name.includes('auth')) {
      return 1;
    }
    
    // Sample only 1% of comment-related transactions
    if (name.includes('comment')) {
      return 0.01;
    }
    
    // For everything else, inherit parent sampling decision or use 0.5
    return inheritOrSampleWith(0.5);
  }
});

----------------------------------------

TITLE: Configuring Logback with Sentry Appender in XML
DESCRIPTION: This XML configuration sets up a ConsoleAppender and a SentryAppender for Logback. It configures logging thresholds and Sentry options including DSN and PII settings.

LANGUAGE: xml
CODE:
<configuration>
    <!-- Configure the Console appender -->
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- Configure the Sentry appender, overriding the logging threshold to the WARN level -->
    <appender name="Sentry" class="io.sentry.logback.SentryAppender">
        <options>
            <!-- NOTE: Replace the test DSN below with YOUR OWN DSN to see the events from this app in your Sentry project/dashboard -->
            <dsn>___PUBLIC_DSN___</dsn>
            <!-- Add data like request headers and IP for users, see https://docs.sentry.io/platforms/java/guides/logback/data-management/data-collected/ for more info -->
            <sendDefaultPii>true</sendDefaultPii>
        </options>
    </appender>

    <!-- Enable the Console and Sentry appenders, Console is provided as an example
 of a non-Sentry logger that is set to a different logging threshold -->
    <root level="INFO">
        <appender-ref ref="Console" />
        <appender-ref ref="Sentry" />
    </root>
</configuration>

----------------------------------------

TITLE: Initializing Sentry with Hapi Server using CommonJS
DESCRIPTION: Sets up a Hapi server with Sentry error handling integration using CommonJS require statements. Creates a server on localhost:3030 and configures Sentry's error handler before starting the server.

LANGUAGE: javascript
CODE:
// Require this first!
require("./instrument");

// Now require other modules
const Sentry = require("@sentry/node");
const Hapi = require('@hapi/hapi');

const init = async () => {
  const server = Hapi.server({
    port: 3030,
    host: 'localhost',
  });

  // All your routes etc.

  await Sentry.setupHapiErrorHandler(server);

  await server.start();
  console.log('Server running on %s', server.info.uri);
};

init();

----------------------------------------

TITLE: Updating Hub Cloning in Python
DESCRIPTION: Demonstrates how to replace hub cloning with isolation scope forking in Sentry SDK 2.0.

LANGUAGE: python
CODE:
- import sentry_sdk

- my_cloned_hub = sentry_sdk.Hub(my_hub)
+ my_cloned_isolation_scope = my_isolation_scope.fork()

----------------------------------------

TITLE: Defining Spring MVC Controller for Automatic Transaction Capture
DESCRIPTION: This snippet demonstrates how to define a Spring MVC controller that will automatically generate transactions for incoming HTTP requests. The transaction name follows the pattern '<HTTP method> <Spring MVC route>'.

LANGUAGE: java
CODE:
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@RestController
class HelloController {

  @GetMapping("/person/{id}")
  Person person(@PathVariable Long id) {
    ...
  }
}

LANGUAGE: kotlin
CODE:
import org.springframework.web.bind.annotation.RestController
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable

@RestController
class HelloController {

  @GetMapping("/person/{id}")
  fun person(@PathVariable id: Long) {
    ...
  }
}

----------------------------------------

TITLE: Accessing WSGI Environ Object in Falcon Integration Sampling Context
DESCRIPTION: This snippet demonstrates the structure of the additional sampling context provided by the Falcon integration. It includes the WSGI request environ object, which contains parsed URL data and can be useful for transactions that start before URL resolution.

LANGUAGE: python
CODE:
{
  # This can be useful for cases in which the transaction starts before the URL
  # is resolved into a route (meaning the transaction's name won't help much),
  # as it contains parsed URL data
  "wsgi_environ": <dict>
}

----------------------------------------

TITLE: Configuring Sentry SDK in Django Settings
DESCRIPTION: Basic configuration of Sentry SDK in Django settings.py file with support for error monitoring, performance tracing, and profiling

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

----------------------------------------

TITLE: Disabling ESM Import Hooks
DESCRIPTION: Configuration to disable import-in-the-middle wrapper when encountering compatibility issues, though this will disable tracing instrumentation.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  registerEsmLoaderHooks: false,
});

----------------------------------------

TITLE: Configuring InboundFilters in Sentry JavaScript SDK
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the InboundFilters integration, specifically configuring it to ignore a particular error. The ignoreErrors option is passed directly to Sentry.init().

LANGUAGE: javascript
CODE:
Sentry.init({
  ignoreErrors: ["ignore-this-error"],
});

----------------------------------------

TITLE: Enabling Profiling Configuration in Android Manifest
DESCRIPTION: Complete configuration for enabling both tracing and profiling features including app start profiling in AndroidManifest.xml. Requires SDK version 6.16.0+ and API level 22+.

LANGUAGE: xml
CODE:
<application>
  <meta-data android:name="io.sentry.dsn" android:value="___PUBLIC_DSN___" />
  <meta-data android:name="io.sentry.traces.sample-rate" android:value="1.0" />
  <meta-data android:name="io.sentry.traces.profiling.sample-rate" android:value="1.0" />
  <meta-data android:name="io.sentry.traces.profiling.enable-app-start" android:value="true" />
</application>

----------------------------------------

TITLE: Implementing Custom Fallback UI with Sentry ErrorBoundary
DESCRIPTION: Demonstrates a more complex implementation of Sentry.ErrorBoundary with a custom fallback component and user feedback dialog. It shows how to structure the error boundary within a React component.

LANGUAGE: javascript
CODE:
import React from "react";
import * as Sentry from "@sentry/react-native";

import { Example } from "../example";

function FallbackComponent() {
  return <div>An error has occurred</div>;
}

const myFallback = <FallbackComponent />;
// Alternatively:
// const myFallback = () => <FallbackComponent />;

class App extends React.Component {
  render() {
    return (
      <Sentry.ErrorBoundary fallback={myFallback} showDialog>
        <Example />
      </Sentry.ErrorBoundary>
    );
  }
}

export default App;

----------------------------------------

TITLE: Installing Sentry Gatsby SDK
DESCRIPTION: Commands to install the @sentry/gatsby package using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/gatsby --save

LANGUAGE: bash
CODE:
yarn add @sentry/gatsby

LANGUAGE: bash
CODE:
pnpm add @sentry/gatsby

----------------------------------------

TITLE: Sampling Context Structure for Google Cloud Functions in Python
DESCRIPTION: This snippet shows the structure of the sampling context provided by the Google Cloud Functions integration. It includes two dictionaries: 'gcp_env' for environment information and 'gcp_event' for incoming event details.

LANGUAGE: python
CODE:
{
  "gcp_env": <dict>,
  "gcp_event": <dict>,
}

----------------------------------------

TITLE: Initializing Sentry in Ionic App Module
DESCRIPTION: Basic Sentry initialization code that should be added to app.module.ts to setup error tracking.

LANGUAGE: javascript
CODE:
import * as Sentry from "sentry-cordova";

Sentry.init({ dsn: "___PUBLIC_DSN___" });

----------------------------------------

TITLE: Implementing Manual Task Monitoring with Sentry in Python
DESCRIPTION: This code snippet shows how to manually monitor a Celery task using Sentry's decorator. It demonstrates the correct placement of the '@sentry_sdk.monitor' decorator in relation to Celery's '@app.task' decorator.

LANGUAGE: python
CODE:
# tasks.py
from celery import Celery, signals

import sentry_sdk
from sentry_sdk.integrations.celery import CeleryIntegration

app = Celery('tasks', broker='...')

@signals.celeryd_init.connect
def init_sentry(**kwargs):
    sentry_sdk.init(
        # same as above
    )

@app.task
@sentry_sdk.monitor(monitor_slug='<monitor-slug>')
def tell_the_world(msg):
    print(msg)

----------------------------------------

TITLE: Initializing Sentry Server-Side SDK
DESCRIPTION: Initializes Sentry SDK for server-side usage in Next.js, including performance monitoring.

LANGUAGE: JavaScript
CODE:
import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // ...

  // Note: if you want to override the automatic release value, do not set a
  // `release` value here - use the environment variable `SENTRY_RELEASE`, so
  // that it will also get attached to your source maps
});

----------------------------------------

TITLE: Using Scope Instance for Exception Capture
DESCRIPTION: Shows how to create and use a Scope instance to pass data when capturing an exception.

LANGUAGE: javascript
CODE:
const scope = new Sentry.Scope();
scope.setTag("section", "articles");
Sentry.captureException(new Error("something went wrong"), scope);

----------------------------------------

TITLE: Implementing BeforeSendTransactionCallback in Java for Sentry
DESCRIPTION: This code snippet shows how to create a Spring bean that implements the BeforeSendTransactionCallback interface in Java. It demonstrates how to modify or drop transactions based on specific conditions before they are sent to Sentry.

LANGUAGE: java
CODE:
import io.sentry.SentryTransaction;
import io.sentry.SentryOptions;
import io.sentry.Hint
import org.springframework.stereotype.Component;

@Component
public class CustomBeforeSendTransactionCallback implements SentryOptions.BeforeSendTransactionCallback {
  @Override
  public SentryTransaction execute(SentryTransaction transaction, Hint hint) {
    // Modify or drop the transaction here:
    if ("/unimportant/route".equals(transaction.getTransaction())) {
      // Don't send the transaction to Sentry
      return null;
    } else {
      return transaction;
    }
  }
}

----------------------------------------

TITLE: Configuring Sentry CLI Environment Variables
DESCRIPTION: Environment variables needed to configure Sentry CLI for your project, including organization slug, project slug, and authentication token.

LANGUAGE: bash
CODE:
SENTRY_ORG=___ORG_SLUG___
SENTRY_PROJECT=___PROJECT_SLUG___
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Initializing Sentry with OpenTelemetry Instrumentation in Python
DESCRIPTION: This snippet initializes Sentry SDK with OpenTelemetry as the instrumenter. It sets the DSN and traces sample rate, while disabling Sentry's native instrumentation in favor of OpenTelemetry tracers.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,

    # Set the instrumenter to use OpenTelemetry instead of Sentry
    instrumenter="otel",
)

----------------------------------------

TITLE: Initializing Sentry Configuration in Ruby
DESCRIPTION: This snippet sets up Sentry configuration for a Ruby application. It includes setting the DSN, enabling breadcrumbs logging, configuring PII data sending, and enabling tracing and profiling with sample rates.

LANGUAGE: ruby
CODE:
require 'sentry-ruby'

Sentry.init do |config|
  config.dsn = '___PUBLIC_DSN___'

  # get breadcrumbs from logs
  config.breadcrumbs_logger = [:sentry_logger, :http_logger]

  # Add data like request headers and IP for users, if applicable;
  # see https://docs.sentry.io/platforms/ruby/data-management/data-collected/ for more info
  config.send_default_pii = true

  # enable tracing
  # we recommend adjusting this value in production
  config.traces_sample_rate = 1.0

  # enable profiling
  # this is relative to traces_sample_rate
  config.profiles_sample_rate = 1.0
end

----------------------------------------

TITLE: Initializing Sentry with Canvas Recording in JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry for a SvelteKit application, enabling session replay and canvas recording. It sets up the DSN, configures replay sampling rates, and adds the necessary integrations including the canvas recording integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    // Keep the Replay integration as before
    Sentry.replayIntegration(),

    // The following is all you need to enable canvas recording with Replay
    Sentry.replayCanvasIntegration(),
  ],
});

----------------------------------------

TITLE: Implementing Event Debouncing in Unity with Sentry SDK
DESCRIPTION: Demonstrates how to initialize Sentry with event debouncing enabled and shows the behavior of different log types when debouncing is active. Each log type (Log, Warning, Error) has a one-second debounce window where subsequent events of the same type are ignored.

LANGUAGE: csharp
CODE:
using UnityEngine;

public class DebouncerTestMonoBehaviour : MonoBehaviour
{
    void Start()
    {
        SentryUnity.Init(o =>
        {
            o.Dsn = "___PUBLIC_DSN___";
            o.EnableLogDebouncing = true;
        });

        // The time between debug calls of the same type is less than 1s
        // Every following call of the same type gets ignored until 1s has passed

        Debug.Log("Log");              // recorded
        Debug.Log("Log 2");            // not recorded
        Debug.LogWarning("Warning");   // recorded
        Debug.LogWarning("Warning 2"); // not recorded
        Debug.LogError("Error");       // recorded
        Debug.LogError("Error 2");     // not recorded
    }
}

----------------------------------------

TITLE: Creating Nested Spans in Sentry JavaScript
DESCRIPTION: Shows how to create nested transaction spans in Sentry for code instrumentation. The example demonstrates creating a root span with a nested child span, allowing for detailed performance tracking of specific code regions. Works with all JavaScript Sentry SDKs and is independent of Express, Http, and BrowserTracing integrations.

LANGUAGE: javascript
CODE:
Sentry.startSpan({ name: "test-transaction" }, (rootSpan) => {
    Sentry.startSpan({ name: "child-span", op: "functionX" }, (childSpan) => {
       // do something in here
       // childSpan will be nested inside of rootSpan
    });
});

----------------------------------------

TITLE: Creating and Managing Sentry Transactions in Objective-C
DESCRIPTION: This snippet shows how to create a Sentry transaction, add child spans, and finish both spans and transactions in Objective-C. It covers importing the Sentry framework, starting a transaction with a name and operation, creating child spans, and properly finishing spans and transactions.

LANGUAGE: Objective-C
CODE:
@import Sentry;

// Transaction can be started by providing, at minimum, the name and the operation
id<SentrySpan> transaction = [SentrySDK startTransactionWithName:@"transaction-name"
                                                 operation:@"transaction-operation"];

// Transactions can have child spans (and those spans can have child spans as well)
id<SentrySpan> span = [transaction startChildWithOperation:@"child-operation"];

// ...
// (Perform the operation represented by the span/transaction)
// ...

[span finish]; // Remember that only finished spans will be sent with the transaction
[transaction finish]; // Finishing the transaction will send it to Sentry

----------------------------------------

TITLE: Initializing LaunchDarkly with Sentry Integration in JavaScript
DESCRIPTION: Demonstrates how to initialize both Sentry and LaunchDarkly SDKs with integration between them. Includes setting up Sentry with LaunchDarkly integration, initializing the LaunchDarkly client with flag usage tracking, and showing basic flag evaluation and error capture.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nuxt';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Implementing Custom Trace Sampling in Sentry Android
DESCRIPTION: Example of setting up a custom sampling function that determines which transactions to capture based on the sampling context. The function returns a value between 0 and 1 to control sampling rate, can return parent sampling decision, or null to defer to default SDK behavior.

LANGUAGE: java
CODE:
SentryAndroid.init(this, options -> {
    options.setTracesSampler(context -> {
        // If there's a parent sampling decision, return it
        if (context.getParentSampled() != null) {
            return context.getParentSampled() ? 1.0 : 0.0;
        }
        
        // Sample all transactions where op is "http.server"
        if ("http.server".equals(context.getTransactionContext().getOp())) {
            return 1.0;
        }
        
        // Otherwise sample 10% of transactions
        return 0.1;
    });
});

----------------------------------------

TITLE: Using Sentry.ErrorBoundary Component in React Native
DESCRIPTION: Demonstrates how to wrap a React component with Sentry.ErrorBoundary to catch and report errors. It includes a simple fallback UI to display when an error occurs.

LANGUAGE: javascript
CODE:
import React from "react";
import * as Sentry from "@sentry/react-native";

<Sentry.ErrorBoundary fallback={<p>An error has occurred</p>}>
  <Example />
</Sentry.ErrorBoundary>;

----------------------------------------

TITLE: Initializing Sentry SDK with BeforeSend Callback in Kotlin
DESCRIPTION: Shows how to initialize Sentry Android SDK in Kotlin with a beforeSend callback that filters out events from TEST environment. Uses Kotlin's more concise syntax while providing the same functionality as the Java version.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.BeforeSendCallback

SentryAndroid.init(this) { options ->
  // Add a callback that will be used before the event is sent to Sentry.
  // With this callback, you can modify the event or, when returning null, also discard the event.
  options.beforeSend = BeforeSendCallback { event, hint ->
    val environment = event.environment
    if (environment == null || environment == "TEST") {
      null
    } else {
      event
    }
  }
}

----------------------------------------

TITLE: Configuring Exception Handling in Laravel
DESCRIPTION: Modify the App/Exceptions/Handler.php file to enable capturing of unhandled exceptions and reporting them to Sentry.

LANGUAGE: php
CODE:
use Sentry\Laravel\Integration;

public function register(): void
{
    $this->reportable(function (Throwable $e) {
        Integration::captureUnhandledException($e);
    });
}

----------------------------------------

TITLE: Instrumenting Queue Producer with Sentry in JavaScript
DESCRIPTION: This snippet demonstrates how to instrument a queue producer using Sentry.startSpan. It includes setting the required attributes and adding trace headers to the message for consumer tracing.

LANGUAGE: javascript
CODE:
app.post("/publish", async (req, res) => {
  // Route handler automatically instruments a parent span
  await Sentry.startSpan(
    {
      name: "queue_producer",
      op: "queue.publish",
      attributes: {
        "messaging.message.id": messageId,
        "messaging.destination.name": "messages",
        "messaging.message.body.size": messageBodySize,
      },
    },
    async () => {
      const { "sentry-trace": sentryTrace, baggage: sentryBaggage } =
        Sentry.getTraceData();
      await redisClient.lPush(
        "messages",
        JSON.stringify({
          sentryTrace,
          sentryBaggage,
          timestamp: Date.now(),
          messageId,
        })
      );
    }
  );
});

----------------------------------------

TITLE: Using Sentry with React Router v7 Routes Component
DESCRIPTION: This snippet shows how to use Sentry with the React Router v7 Routes component by wrapping it with withSentryReactRouterV7Routing.

LANGUAGE: javascript
CODE:
import React from "react";
import ReactDOM from "react-dom";
import {
  Routes,
  Route,
  BrowserRouter,
  useLocation,
  useNavigationType,
  createRoutesFromChildren,
  matchRoutes,
} from "react-router";

import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactRouterV7BrowserTracingIntegration({
      useEffect: React.useEffect,
      useLocation,
      useNavigationType,
      createRoutesFromChildren,
      matchRoutes,
    }),
  ],
  tracesSampleRate: 1.0,
});

const SentryRoutes = Sentry.withSentryReactRouterV7Routing(Routes);

ReactDOM.render(
  <BrowserRouter>
    <SentryRoutes>
      <Route path="/" element={<div>Home</div>} />
    </SentryRoutes>
  </BrowserRouter>
);

----------------------------------------

TITLE: Creating and Managing Sentry Transactions in Rust
DESCRIPTION: Shows how to create a transaction context, start a transaction, add child spans, and properly finish both spans and transactions. The code demonstrates the hierarchical nature of Sentry's instrumentation where transactions can contain child spans for more granular performance monitoring.

LANGUAGE: rust
CODE:
// Transaction can be started by providing the name and the operation
let tx_ctx = sentry::TransactionContext::new(
    "transaction name",
    "transaction operation",
);
let transaction = sentry::start_transaction(tx_ctx);

// Transactions can have child spans, and those spans can have child spans as well.
let span = transaction.start_child("span operation", "span description");

// ...
// Perform your operations
// ...

span.finish(); // Remember that only finished spans will be sent with the transaction
transaction.finish(); // Finishing the transaction will send it to Sentry

----------------------------------------

TITLE: Basic Bottle Application with Sentry Integration
DESCRIPTION: Example of a basic Bottle application with Sentry SDK initialization and error handling demonstration

LANGUAGE: python
CODE:
from bottle import Bottle, run

sentry_sdk.init(...)  # same as above

app = Bottle()

@app.route('/')
def hello():
    1 / 0
    return "Hello World!"

run(app, host='localhost', port=8000)

----------------------------------------

TITLE: Initializing MySQL2 Integration in Sentry
DESCRIPTION: Demonstrates how to explicitly initialize the MySQL2 integration in Sentry configuration. This integration uses @opentelemetry/instrumentation-mysql2 to capture database operation spans.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.mysql2Integration()],
});

----------------------------------------

TITLE: Creating and Managing Sentry Transactions and Spans in C++
DESCRIPTION: This snippet demonstrates how to create a transaction, start a child span, and properly finish both in Sentry using C++. It utilizes the USentrySubsystem to start a transaction and shows how to create nested spans for more detailed performance tracking.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

// Transactions can be started by providing the name and the operation
USentryTransaction* transaction = SentrySubsystem->StartTransaction(
    TEXT("transaction name"),
    TEXT("transaction operation")
);

// Transactions can have child spans (and those spans can have child spans as well)
USentrySpan* span = transaction->StartChild(
    TEXT("span name"),
    TEXT("span description")
);

// ...
// (Perform the operation represented by the span/transaction)
// ...

span->Finish();
transaction->Finish();

----------------------------------------

TITLE: Configuring Sentry SDK with custom options for FastAPI
DESCRIPTION: Initialize Sentry SDK with custom options for FastAPI and Starlette integrations. This example sets transaction naming style and specifies which HTTP status codes and methods to capture.

LANGUAGE: python
CODE:
from sentry_sdk.integrations.starlette import StarletteIntegration
from sentry_sdk.integrations.fastapi import FastApiIntegration

sentry_sdk.init(
    # same as above
    integrations=[
        StarletteIntegration(
            transaction_style="endpoint",
            failed_request_status_codes={403, *range(500, 599)},
            http_methods_to_capture=("GET",),
        ),
        FastApiIntegration(
            transaction_style="endpoint",
            failed_request_status_codes={403, *range(500, 599)},
            http_methods_to_capture=("GET",),
        ),
    ]
)

----------------------------------------

TITLE: Installing Sentry Rollup Plugin with Package Managers
DESCRIPTION: Commands for installing the Sentry Rollup plugin using npm, yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
npm install @sentry/rollup-plugin --save-dev

LANGUAGE: bash
CODE:
yarn add @sentry/rollup-plugin --dev

LANGUAGE: bash
CODE:
pnpm add @sentry/rollup-plugin --save-dev

----------------------------------------

TITLE: Configuring Canvas Recording in Sentry Session Replay
DESCRIPTION: This snippet demonstrates how to enable canvas recording in Sentry's Session Replay feature. It includes the ReplayCanvas integration in the Sentry configuration.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "YOUR_DSN",
  integrations: [
    new Sentry.BrowserTracing(),
    new Sentry.Replay(),
    Sentry.replayCanvasIntegration(),
  ],
});

----------------------------------------

TITLE: Creating Sentry Release and Notifying of Deployment in CircleCI YAML Configuration
DESCRIPTION: This YAML snippet defines a CircleCI job that creates a Sentry release, uploads source maps, and notifies Sentry of a deployment. It uses environment variables for Sentry configuration and the Sentry CLI for release management operations.

LANGUAGE: yaml
CODE:
notify-sentry-deploy:
  executor:
  # Specify executor for running deploy job
  environment:
    SENTRY_ORG: sample-organization-slug
    SENTRY_PROJECT: sample-project-slug
    SENTRY_ENVIRONMENT: production
  steps:
    - checkout
    # ...
    - run:
        name: Create release and notify Sentry of deploy
        command: |
          curl -sL https://sentry.io/get-cli/ | bash
          export SENTRY_RELEASE=$(sentry-cli releases propose-version)
          sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
          sentry-cli releases set-commits $SENTRY_RELEASE --auto
          sentry-cli sourcemaps upload --release $SENTRY_RELEASE path-to-sourcemaps-if-applicable
          sentry-cli releases finalize $SENTRY_RELEASE
          sentry-cli deploys new -e $SENTRY_ENVIRONMENT

----------------------------------------

TITLE: Displaying HTML Selector vs React Component Name
DESCRIPTION: Compares the display of a typical HTML selector with the more readable React component name that Sentry can provide.

LANGUAGE: html
CODE:
button.en302zp1.app-191aavw.e16hd6vm2[role="button"][data-test-id="common-options"]

LANGUAGE: html
CODE:
CommonOptions

----------------------------------------

TITLE: Initializing Sentry SDK in Java
DESCRIPTION: Shows how to initialize Sentry SDK in Java with configuration for DSN, PII data collection, and trace sampling rate. The configuration enables collecting user data like request headers and IP addresses, and sets up performance monitoring with 100% transaction sampling.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setDsn("___PUBLIC_DSN___");

  // Add data like request headers and IP for users,
  // see https://docs.sentry.io/platforms/java/data-management/data-collected/ for more info
  options.setSendDefaultPii(true);

  // Set traces_sample_rate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production.
  options.setTracesSampleRate(1.0);
});

----------------------------------------

TITLE: Initializing Sentry with MySQL Integration in JavaScript
DESCRIPTION: This code snippet demonstrates how to initialize Sentry with the MySQL integration. It uses the mysqlIntegration() function to add MySQL instrumentation to the Sentry configuration.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.mysqlIntegration()],
});

----------------------------------------

TITLE: Installing Sentry Capacitor SDK
DESCRIPTION: Package installation commands for Sentry Capacitor SDK with framework-specific dependencies for Angular, React, and Vue

LANGUAGE: bash
CODE:
# npm
npm install @sentry/capacitor @sentry/angular --save

# yarn
yarn add @sentry/capacitor @sentry/angular

# pnpm
pnpm add @sentry/capacitor @sentry/angular

----------------------------------------

TITLE: Using Multiple Error Boundaries with Custom Tags in React Native
DESCRIPTION: Demonstrates how to use multiple error boundaries in a single component, each with custom tags set using the beforeCapture option. This allows for more granular error tracking and analysis.

LANGUAGE: javascript
CODE:
import React from "react";
import { View, Text } from "react-native"
import * as Sentry from "@sentry/react-native";

function MyComponent({ props }) {
  return (
    <React.Fragment>
      <Sentry.ErrorBoundary
        beforeCapture={(scope) => {
          scope.setTag("location", "first");
          scope.setTag("anotherTag", "anotherValue");
        }}
      >
        <View><Text>First</Text></View>
      </Sentry.ErrorBoundary>
      <Sentry.ErrorBoundary
        beforeCapture={(scope) => {
          scope.setTag("location", "second");
        }}
      >
        <View><Text>Second</Text></View>
      </Sentry.ErrorBoundary>
    </React.Fragment>
  );
}

export default MyComponent;

----------------------------------------

TITLE: Configuring Tracing in Python Sentry SDK
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK with tracing enabled. It sets the DSN, enables sending default PII, and configures the traces_sample_rate to 1.0 for 100% trace sampling.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # We recommend adjusting this value in production
    traces_sample_rate=1.0,
)

----------------------------------------

TITLE: Initializing Sentry Session Replay in Remix
DESCRIPTION: This snippet demonstrates how to initialize Sentry with Session Replay integration in a Remix application. It includes configuration for sampling rates and privacy settings.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/remix";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This sets the sample rate to be 10%. You may want this to be 100% while
  // in development and sample at a lower rate in production
  replaysSessionSampleRate: 0.1,

  // If the entire session is not sampled, use the below sample rate to sample
  // sessions when an error occurs.
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    Sentry.replayIntegration({
      // Additional SDK configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry with LaunchDarkly Integration in Vue.js
DESCRIPTION: This snippet demonstrates how to initialize Sentry with LaunchDarkly integration, set up the LaunchDarkly client, evaluate a feature flag, and capture an exception. It requires the '@sentry/vue' and 'launchdarkly-js-client-sdk' packages to be installed.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/vue';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Configuring ElectronNet Integration Options Interface in TypeScript
DESCRIPTION: TypeScript interface defining configuration options for the ElectronNet integration. Includes options for controlling breadcrumb capture, transaction spans, and sentry-trace headers.

LANGUAGE: typescript
CODE:
interface NetOptions {
  /**
   * Whether breadcrumbs should be captured for net requests
   *
   * Defaults to: true
   */
  breadcrumbs: boolean;
  /**
   * Whether to capture transaction spans for net requests
   *
   * Defaults to: true
   */
  tracing: boolean | (method: string, url: string) => boolean;
  /**
   * Whether to add 'sentry-trace' headers to outgoing requests
   *
   * Defaults to: true
   */
  tracingOrigins: boolean | (method: string, url: string) => boolean;
}

----------------------------------------

TITLE: Initializing Sentry SDK in Cordova DeviceReady
DESCRIPTION: Implementation of Sentry SDK initialization within the deviceReady callback function. This ensures native integrations are properly initialized after the device is ready.

LANGUAGE: javascript
CODE:
onDeviceReady: function() {
  var Sentry = cordova.require("sentry-cordova.Sentry");
  Sentry.init({ dsn: '___PUBLIC_DSN___' });
}

----------------------------------------

TITLE: Initializing Sentry for Client-Side Monitoring in JavaScript
DESCRIPTION: This code snippet initializes Sentry for client-side error tracking and performance monitoring. It sets the DSN, adds browser tracing integration, and configures a 25% sampling rate for transactions.

LANGUAGE: javascript
CODE:
// entry.client.tsx
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  // Capture 25% of all transactions
  tracesSampleRate: 0.25
});

----------------------------------------

TITLE: Instrumenting Server-Side LLM Processing in JavaScript
DESCRIPTION: Tracks the server-side processing of LLM requests, including model configuration, rate limiting, token usage, and cost calculation. Uses Sentry's startSpan to capture detailed metrics throughout the LLM API interaction.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'LLM API Processing',
    op: 'ai.server',
    attributes: {
      // Model configuration - known at start
      'llm.model': 'claude-3-5-sonnet-20241022',
      'llm.temperature': 0.5,
      'llm.max_tokens': 4096
    }
  },
  async () => {
    const span = Sentry.getActiveSpan();
    const startTime = Date.now();
    
    try {
      // Check rate limits before processing
      const rateLimits = await getRateLimits();
      if (span) {
        span.setAttribute('llm.rate_limit_remaining', rateLimits.remaining);
      }
      
      // Make the actual API call to the LLM provider
      const response = await llmProvider.generateCompletion({
        model: 'claude-3-5-sonnet-20241022',
        prompt: preparedPrompt,
        temperature: 0.5,
        max_tokens: 4096
      });
      
      // Record token usage and performance metrics
      if (span) {
        span.setAttribute('llm.prompt_tokens', response.usage.prompt_tokens);
        span.setAttribute('llm.completion_tokens', response.usage.completion_tokens);
        span.setAttribute('llm.total_tokens', response.usage.total_tokens);
        span.setAttribute('llm.api_latency_ms', Date.now() - startTime);
        
        // Calculate and record cost based on token usage
        const cost = calculateCost(
          response.usage.prompt_tokens, 
          response.usage.completion_tokens,
          'claude-3-5-sonnet-20241022'
        );
        span.setAttribute('llm.cost_usd', cost);
      }
      
      return response;
    } catch (error) {
      // Record error details
      if (span) {
        span.setAttribute('error', true);
        span.setAttribute('error.type', error.name);
        span.setAttribute('error.message', error.message);
        span.setAttribute('error.is_rate_limit', error.code === 'rate_limit_exceeded');
        span.setStatus({ code: 'ERROR' });
      }
      throw error;
    }
  }
);

----------------------------------------

TITLE: Initializing Sentry with Browser Tracing and Profiling in TypeScript
DESCRIPTION: This snippet shows how to initialize Sentry with browser tracing and profiling integrations. It sets up the DSN, configures sampling rates for traces and profiles, and defines trace propagation targets.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/angular";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.browserTracingIntegration(),
    // Add browser profiling integration to the list of integrations
    Sentry.browserProfilingIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Set profilesSampleRate to 1.0 to profile every transaction.
  // Since profilesSampleRate is relative to tracesSampleRate,
  // the final profiling rate can be computed as tracesSampleRate * profilesSampleRate
  // For example, a tracesSampleRate of 0.5 and profilesSampleRate of 0.5 would
  // result in 25% of transactions being profiled (0.5*0.5=0.25)
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Verifying Sentry Integration in Ruby
DESCRIPTION: This snippet includes an intentional error to verify that Sentry is correctly set up and capturing errors in the Ruby application. It demonstrates how to manually capture an exception.

LANGUAGE: ruby
CODE:
begin
  1 / 0
rescue ZeroDivisionError => exception
  Sentry.capture_exception(exception)
end

----------------------------------------

TITLE: Updating Scripts for Server-Side Instrumentation
DESCRIPTION: Modify the start and dev scripts in package.json to include the server-side instrumentation file.

LANGUAGE: json
CODE:
"scripts": {
  "dev": "NODE_OPTIONS='--import ./instrument.server.mjs' react-router dev",
  "start": "NODE_OPTIONS='--import ./instrument.server.mjs' react-router-serve ./build/server/index.js",
}

----------------------------------------

TITLE: Initializing Sentry SDK in Python
DESCRIPTION: This snippet shows how to initialize the Sentry SDK with a DSN (Data Source Name). The DSN is a unique identifier for your Sentry project.

LANGUAGE: python
CODE:
sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
)

----------------------------------------

TITLE: Implementing SentryFeedbackWidget in Flutter
DESCRIPTION: Example showing how to initialize and implement the SentryFeedbackWidget in a Flutter application. The code demonstrates setting up a beforeSend callback to capture screenshots and display the feedback widget when specific events occur.

LANGUAGE: dart
CODE:
// The example uses the `NavigatorState` to present the widget. Adapt as needed to your navigation stack.
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

...

await SentryFlutter.init((options) {
  options.beforeSend = (event, hint) async {
    // Filter here what kind of events you want users to give you feedback.
    
    final screenshot = await SentryFlutter.captureScreenshot();

    final context = navigatorKey.currentContext;
    if (context == null) return;
    if (context.mounted) {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => SentryFeedbackWidget(
            associatedEventId: event.eventId,
            screenshot: screenshot,
          ),
          fullscreenDialog: true,
        ),
      );
    }
  };
});

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration in Next.js (Current)
DESCRIPTION: This snippet shows how to initialize Sentry with Unleash integration using the current recommended approach. It sets up Sentry error tracking, configures the Unleash client for feature flags, and demonstrates basic usage.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nextjs';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Installing Sentry Apollo 3 Integration with Gradle
DESCRIPTION: Add the Sentry Apollo 3 integration dependency to your Gradle build file.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-apollo-3:{{@inject packages.version('sentry.java.apollo-3', '6.1.4') }}'

----------------------------------------

TITLE: Instrumenting Queue Consumer with Sentry in Python
DESCRIPTION: This snippet shows how to instrument a queue consumer using Sentry's SDK. It continues the trace from the producer, creates a span for processing, sets queue-related data, and handles success or failure status.

LANGUAGE: python
CODE:
from datetime import datetime, timezone

import sentry_sdk
import my_custom_queue

# Initialize Sentry
sentry_sdk.init(...)

connection = my_custom_queue.connect()

# Pick up message from queues
queue = "messages"
message = connection.consume(queue=queue)

# Calculate latency (optional, but valuable)
now = datetime.now(timezone.utc)
message_time = datetime.fromtimestamp(message["timestamp"], timezone.utc)
latency = now - message_time

# Continue the trace started in the producer
# If you are using a web framework, the framework integration
# will create this for you and you can omit this.
transaction = sentry_sdk.continue_trace(
    message["headers"],
    op="function",
    name="queue_consumer_transaction",
)
with sentry_sdk.start_transaction(transaction):
    # Create the span
    with sentry_sdk.start_span(
        op="queue.process",
        name="queue_consumer",
    ) as span:
        # Set span data
        span.set_data("messaging.message.id", message["message_id"])
        span.set_data("messaging.destination.name", queue)
        span.set_data("messaging.message.body.size", message["body"])
        span.set_data("messaging.message.receive.latency", latency)
        span.set_data("messaging.message.retry.count", 0)

        try:
            # Process the message
            process_message(message)
        except Exception:
            # In case of an error set the status to "internal_error"
            span.set_status("internal_error")

----------------------------------------

TITLE: Configuring Sentry Options in appsettings.json
DESCRIPTION: This JSON snippet demonstrates how to configure Sentry options using the appsettings.json file. It includes settings for DSN, MaxRequestBodySize, SendDefaultPii, and Debug mode.

LANGUAGE: json
CODE:
  "Sentry": {
    "Dsn": "___PUBLIC_DSN___",
    "MaxRequestBodySize": "Always",
    "SendDefaultPii": true,
    "Debug": true
  }

----------------------------------------

TITLE: Initializing Sentry with Express.js using ESM
DESCRIPTION: Sets up Sentry error tracking in an Express.js application using ES Modules format. Requires instrumenting before other modules and configures the error handler after routes but before other error middleware.

LANGUAGE: javascript
CODE:
// Ensure to import this before importing any other modules!
import './instrument.js'

import express from "express";
import * as Sentry from "@sentry/node";
const app = express();

// Add your routes, etc.

// Add this after all routes,
// but before any and other error-handling middlewares are defined
Sentry.setupExpressErrorHandler(app);

app.listen(3000);

----------------------------------------

TITLE: Configuring Tracing Options in Sentry SDK for C#
DESCRIPTION: This code demonstrates how to set up tracing options during Sentry SDK initialization. It shows two methods: setting a uniform sample rate and implementing a custom sampling function based on transaction context and URL paths.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
// To set a uniform sample rate
options.TracesSampleRate = 1.0;

// OR: Determine traces sample rate based on the sampling context
options.TracesSampler = context =>
{
    // If this is the continuation of a trace, just use that decision (rate controlled by the caller)
    if (context.TransactionContext.IsParentSampled is not null)
    {
        return context.TransactionContext.IsParentSampled.Value
            ? 1.0
            : 0.0;
    }

    // Otherwise, sample based on URL (exposed through custom sampling context)
    return context.CustomSamplingContext.GetValueOrDefault("__HttpPath") switch
    {
        // These are important - take a big sample
        "/payment" => 0.5,

        // Search is less important and happen much more frequently - only take 1%
        "/search" => 0.01,

        // The health check endpoint is just noise - drop all transactions
        "/health" => 0.0,

        // Default sample rate
        _ => 0.1

        // Or return null to fallback to options.TracesSampleRate (1.0 in this case)
        // _ => null
    };
};

----------------------------------------

TITLE: Configuring Sentry Options Programmatically in C#
DESCRIPTION: This C# snippet shows how to configure Sentry options programmatically by creating a custom FunctionsStartup class. It demonstrates setting various Sentry options such as DSN, MaxBreadcrumbs, Debug mode, SendDefaultPii, and MaxRequestBodySize.

LANGUAGE: csharp
CODE:
using Google.Cloud.Functions.Hosting;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Sentry.AspNetCore;
using Sentry.Extensibility;

[assembly: FunctionsStartup(typeof(CustomOptions))]

public class CustomOptions : FunctionsStartup
{
    public override void ConfigureServices(WebHostBuilderContext context, IServiceCollection services)
    {
        base.ConfigureServices(context, services);
        services.Configure<SentryAspNetCoreOptions>(options =>
        {
            options.Dsn = "___PUBLIC_DSN___";
            options.MaxBreadcrumbs = 50;
            options.Debug = true;
            options.SendDefaultPii = true;
            options.MaxRequestBodySize = RequestSize.Always;
        });
    }
}

----------------------------------------

TITLE: Using SentryFileInputStream and SentryFileOutputStream in Kotlin
DESCRIPTION: This snippet shows how to use Sentry's instrumented versions of FileInputStream and FileOutputStream in Kotlin. It replaces the standard classes with SentryFileInputStream and SentryFileOutputStream for improved monitoring and error tracking.

LANGUAGE: kotlin
CODE:
import io.sentry.instrumentation.file.SentryFileInputStream
import io.sentry.instrumentation.file.SentryFileOutputStream
import java.io.File

val file1 = File("file1.txt")
val file2 = File("file2.txt")
SentryFileInputStream(file1).use { SentryFileOutputStream(file2).write(it.readBytes()) }

----------------------------------------

TITLE: Using startSpanManual() API in JavaScript
DESCRIPTION: This example shows how to use the startSpanManual() API, which requires manual ending of the span. It's useful when automatic span ending doesn't suit the use case.

LANGUAGE: javascript
CODE:
Sentry.startSpanManual(
  {
    name: "my-span",
  },
  (span) => {
    // do something that you want to measure

    // Now manually end the span ourselves
    span.end();
  }
);

----------------------------------------

TITLE: Clearing Module Cache in C++
DESCRIPTION: This snippet demonstrates how to clear the existing module cache in C++ when modules are loaded dynamically to avoid unsymbolicated stack traces.

LANGUAGE: cpp
CODE:
// load a new module
sentry_clear_modulecache();

----------------------------------------

TITLE: Starting Sentry Transaction in Java
DESCRIPTION: This snippet initializes a Sentry transaction with a sampling decision and transaction context. It sets up performance monitoring for a 'GET /search' operation with the 'http.server' operation name.

LANGUAGE: java
CODE:
import io.sentry.ITransaction;
import io.sentry.Sentry;
import io.sentry.TransactionContext;
import io.sentry.TracesSamplingDecision;

TracesSamplingDecision samplingDecision = new TracesSamplingDecision(true);
TransactionContext transactionContext = new TransactionContext("GET /search", "http.server", samplingDecision);
ITransaction transaction = Sentry.startTransaction(transactionContext);

----------------------------------------

TITLE: Implementing Custom Navigation Integration for Sentry in React Native
DESCRIPTION: This code snippet demonstrates how to create a custom navigation integration for Sentry in React Native. It uses the startIdleNavigationSpan function to track route changes and initializes Sentry with the custom integration.

LANGUAGE: javascript
CODE:
import Sentry from '@sentry/react-native';

const customNavigationIntegration = ({navigator}) => {
  navigator.registerRouteChangeListener((newRoute) => {
    Sentry.startIdleNavigationSpan({
      name: newRoute.name,
      op: 'navigation'
    })
  });

  return {
    name: "CustomNavigation",
  };
};

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.
  // We recommend adjusting this value in production.
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
  integrations: [customNavigationIntegration({navigator})],
});

----------------------------------------

TITLE: Initializing Sentry with TanStack Router Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the TanStack Router integration. It creates a router instance and configures Sentry with the necessary integration and sample rate for performance data collection.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react";
import { createRouter } from "@tanstack/react-router";

const router = createRouter({
  // Your router options...
});

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.tanstackRouterBrowserTracingIntegration(router)],

  // Setting a sample rate is required for sending performance data.
  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control.
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing Sentry Vue Integration with Component Tracking
DESCRIPTION: This snippet demonstrates how to set up Sentry's Vue integration with component tracking enabled. It shows how to track all child components or specify individual components to track.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/vue";

Sentry.init({
  integrations: [
    Sentry.vueIntegration({
      tracingOptions: {
        trackComponents: true,
        // OR
        trackComponents: [
          "App",
          "RwvHeader",
          "RwvFooter",
          "RwvArticleList",
          "Pagination",
        ],
      },
    }),
  ],
});

----------------------------------------

TITLE: Setting Tags with Hashed Sensitive Data in Sentry
DESCRIPTION: This snippet demonstrates how to set a tag with hashed sensitive information instead of sending it in plaintext. This allows for correlation within internal systems while keeping the data confidential from Sentry.

LANGUAGE: javascript
CODE:
Sentry.setTag("email", "{{ hash(user.email) }}")

----------------------------------------

TITLE: Creating Parallel Spans in Sentry
DESCRIPTION: Example of creating multiple spans that run in parallel, demonstrating the flat hierarchy approach in Sentry.

LANGUAGE: javascript
CODE:
Sentry.startSpan({ name: "span 1" }, async () => {
  await fetch("https://example.com/1");
  await fetch("https://example.com/2");
  await fetch("https://example.com/3");
});

Sentry.startSpan({ name: "span 2" }, async () => {
  await fetch("https://example.com/4");
  await fetch("https://example.com/5");
  await fetch("https://example.com/6");
});

----------------------------------------

TITLE: Initializing Sentry with Custom Sampling in JavaScript
DESCRIPTION: This snippet initializes Sentry with a custom tracesSampler function. It sets up different sampling rates for various types of transactions, such as health checks, authentication, and comments.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracesSampler: (samplingContext) => {
    // Access transaction details from the sampling context
    const { name, attributes, inheritOrSampleWith } = samplingContext;
    
    // Skip health checks entirely
    if (name.includes('healthcheck')) {
      return 0;
    }
    
    // Capture all auth-related transactions
    if (name.includes('auth')) {
      return 1;
    }
    
    // Sample only 1% of comment-related transactions
    if (name.includes('comment')) {
      return 0.01;
    }
    
    // For everything else, inherit parent sampling decision or use 0.5
    return inheritOrSampleWith(0.5);
  }
});

----------------------------------------

TITLE: Configuring Sentry SDK Options
DESCRIPTION: Examples of initializing and configuring the Sentry SDK with various options like DSN, release tracking, event callbacks, shutdown timeout and debug settings.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

public class MyClass {
  public static void main(String... args) {
    Sentry.init(options -> {
      options.setDsn("___PUBLIC_DSN___");
      options.setRelease("io.sentry.samples.console@4.2.0+1");
      options.setBeforeSend((event, hint) -> {
        if (event.getTag("SomeTag") != null) {
          return null;
        }
        return event;
      });
      options.setBeforeBreadcrumb((breadcrumb, hint) -> {
        if (breadcrumb.getMessage() != null
            && breadcrumb.getMessage().contains("bad breadcrumb")) {
          return null;
        }
        return breadcrumb;
      });
      options.setShutdownTimeout(5000);
      options.setDebug(true);
      options.setDiagnosticLevel(SentryLevel.ERROR);
      options.addInAppExclude("org.jboss");
    });
  }
}

LANGUAGE: kotlin
CODE:
import io.sentry.SentryOptions.BeforeBreadcrumbCallback
import io.sentry.SentryOptions.BeforeSendCallback
import io.sentry.Hint

fun main() {
  Sentry.init { options ->
    options.dsn = "___PUBLIC_DSN___"
    options.release = "io.sentry.samples.console@4.2.0+1"
    options.beforeSend = BeforeSendCallback { event: SentryEvent, hint: Hint ->
      if (event.getTag("SomeTag") != null) {
        null
      } else {
        event
      }
    }
    options.beforeBreadcrumb = BeforeBreadcrumbCallback { breadcrumb: Breadcrumb, hint: Hint ->
      val message = breadcrumb.message
      if (message?.contains("bad breadcrumb") == true) {
        null
      } else {
        breadcrumb
      }
    }
    options.shutdownTimeout = 5000
    options.setDebug(true)
    options.setDiagnosticLevel(SentryLevel.ERROR)
    options.addInAppExclude("org.jboss")
  }
}

----------------------------------------

TITLE: Initializing Sentry with Prisma Integration for Version 6
DESCRIPTION: This snippet demonstrates how to initialize Sentry with Prisma integration for Prisma version 6. It requires installing the @prisma/instrumentation package and passing a PrismaInstrumentation instance to the prismaIntegration.

LANGUAGE: javascript
CODE:
import { PrismaInstrumentation } from "@prisma/instrumentation";

Sentry.init({
  tracesSampleRate: 1.0,
  integrations: [
    Sentry.prismaIntegration({
      // Override the default instrumentation that Sentry uses
      prismaInstrumentation: new PrismaInstrumentation(),
    }),
  ],
});

----------------------------------------

TITLE: Implementing BeforeSendTransactionCallback in Kotlin for Sentry
DESCRIPTION: This code snippet demonstrates how to create a Spring bean that implements the BeforeSendTransactionCallback interface in Kotlin. It shows how to modify or drop transactions based on specific conditions before they are sent to Sentry.

LANGUAGE: kotlin
CODE:
import io.sentry.SentryTransaction
import io.sentry.SentryOptions
import io.sentry.Hint
import org.springframework.stereotype.Component

@Component
class CustomBeforeSendTransactionCallback : SentryOptions.BeforeSendTransactionCallback {
  override fun execute(transaction: SentryTransaction, hint: Hint): SentryTransaction? {
    // Modify or drop the transaction here:
    return if ("/unimportant/route" == transaction.transaction) {
      // Don't send the transaction to Sentry
      null
    } else {
      transaction
    }
  }
}

----------------------------------------

TITLE: Configuring React Component Names for Session Replay in React Native
DESCRIPTION: JavaScript configuration for metro.config.js to enable React component name annotation in Session Replay for React Native applications.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require("@react-native/metro-config");
const { withSentryConfig } = require("@sentry/react-native/metro");
module.exports = withSentryConfig(getDefaultConfig(__dirname), {
  annotateReactComponents: true,
});

----------------------------------------

TITLE: Manually Capturing Canvas Snapshots in Sentry Session Replay
DESCRIPTION: This snippet demonstrates how to manually capture canvas snapshots in Sentry's Session Replay. It should be called inside the application's paint loop for WebGL canvases.

LANGUAGE: javascript
CODE:
function paint() {
  const canvasRef = document.querySelector("#my-canvas");
  Sentry.getClient().getIntegrationByName("ReplayCanvas").snapshot(canvasRef);
}

----------------------------------------

TITLE: Initializing Sentry with ANR Integration in Node.js
DESCRIPTION: This snippet demonstrates how to enable ANR detection by adding the Anr integration to the Sentry initialization. It includes setting the DSN and enabling stack trace capture for ANR events.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.anrIntegration({ captureStackTrace: true })],
});

----------------------------------------

TITLE: Initializing Statsig with Sentry Integration in JavaScript
DESCRIPTION: Sets up Sentry error tracking with Statsig feature flag integration. Creates a Statsig client instance, initializes Sentry with the Statsig integration, and demonstrates checking a feature gate while capturing errors.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/ember';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Configuring SentryTracingFilter for Spring 5 in Kotlin
DESCRIPTION: This snippet illustrates how to configure SentryTracingFilter for automatic trace sending in a Spring 5 application using Kotlin. It extends AbstractAnnotationConfigDispatcherServletInitializer and overrides the getServletFilters function to return an array containing SentryTracingFilter.

LANGUAGE: kotlin
CODE:
import io.sentry.spring.tracing.SentryTracingFilter
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer

class AppInitializer : AbstractAnnotationConfigDispatcherServletInitializer() {
  // ...
  override fun getServletFilters() = arrayOf(SentryTracingFilter())
}

----------------------------------------

TITLE: Configuring RewriteFrames Integration in Sentry
DESCRIPTION: Examples of configuring the RewriteFrames integration with different options to modify stack trace frame paths.

LANGUAGE: javascript
CODE:
rewriteFramesIntegration()

LANGUAGE: javascript
CODE:
rewriteFramesIntegration({prefix: 'foo/'})

LANGUAGE: javascript
CODE:
rewriteFramesIntegration({root: '/www'})

----------------------------------------

TITLE: Manually Activating DiagnosticSource Integration in Sentry SDK
DESCRIPTION: This code snippet demonstrates how to manually activate the DiagnosticSource integration during SDK initialization. It requires the Sentry.DiagnosticSource NuGet package and is useful for projects that don't meet the automatic activation conditions.

LANGUAGE: csharp
CODE:
// Requires NuGet package: Sentry.DiagnosticSource
options.AddDiagnosticSourceIntegration();

----------------------------------------

TITLE: Initializing Sentry with Solid Router Integration in JSX
DESCRIPTION: This snippet demonstrates how to initialize Sentry with Solid Router integration, including setting up the router wrapping for performance tracing. It imports necessary components, sets up Sentry with the solidRouterBrowserTracingIntegration, and wraps the Solid Router with Sentry's higher-order component.

LANGUAGE: jsx
CODE:
import * as Sentry from "@sentry/solid";
import { solidRouterBrowserTracingIntegration, withSentryRouterRouting } from '@sentry/solid/solidrouter';
import { Route, Router } from "@solidjs/router";
import { render } from "solid-js/web";
import App from "./app";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [solidRouterBrowserTracingIntegration()],
  tracesSampleRate: 1.0, //  Capture 100% of the transactions
});

// Wrap Solid Router to collect meaningful performance data on route changes
const SentryRouter = withSentryRouterRouting(Router);

render(
  () => (
    <SentryRouter>
      <Route path="/" component={App} />
      ...
    </SentryRouter>
  ),
  document.getElementById("root"),
);

----------------------------------------

TITLE: Basic Error Capture with Sentry in Kotlin
DESCRIPTION: Kotlin implementation showing initialization and basic error capture using both static and instance-based Sentry APIs. Includes context management, breadcrumb recording, and exception handling.

LANGUAGE: kotlin
CODE:
import io.sentry.context.Context
import io.sentry.event.BreadcrumbBuilder
import io.sentry.event.UserBuilder

class MyClass {
  fun unsafeMethod() {
    throw UnsupportedOperationException("You shouldn't call this!")
  }

  fun logWithStaticAPI() {
    Sentry.getContext().recordBreadcrumb(
      BreadcrumbBuilder().setMessage("User made an action").build()
    )

    Sentry.getContext().setUser(
      UserBuilder().setEmail("hello@sentry.io").build()
    )

    Sentry.getContext().addExtra("extra", "thing")
    Sentry.getContext().addTag("tagName", "tagValue")
    Sentry.capture("This is a test")

    try {
      unsafeMethod()
    } catch (e: Exception) {
      Sentry.capture(e)
    }
  }

  fun logWithInstanceAPI() {
    val context: Context = sentry.getContext()
    context.recordBreadcrumb(BreadcrumbBuilder().setMessage("User made an action").build())
    context.setUser(UserBuilder().setEmail("hello@sentry.io").build())
    sentry.sendMessage("This is a test")

    try {
      unsafeMethod()
    } catch (e: Exception) {
      sentry.sendException(e)
    }
  }

  companion object {
    private var sentry: SentryClient? = null

    @JvmStatic
    fun main(args: Array<String>) {
      Sentry.init()
      sentry = SentryClientFactory.sentryClient()
      val myClass = MyClass()
      myClass.logWithStaticAPI()
      myClass.logWithInstanceAPI()
    }
  }
}

----------------------------------------

TITLE: Adding Sentry Breadcrumb in Dart
DESCRIPTION: Demonstrates how to add a breadcrumb to track application events using the Sentry SDK. The code creates a new breadcrumb with an authentication message and adds it to Sentry's tracking system.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Sentry.addBreadcrumb(Breadcrumb(message: 'Authenticated user'));

----------------------------------------

TITLE: Starting a Transaction with Sentry SDK in Python
DESCRIPTION: This code initializes a new transaction using the Sentry SDK. It sets the transaction name to 'GET /search' and enables sampling. This is useful for monitoring performance and errors in web applications.

LANGUAGE: python
CODE:
sentry_sdk.start_transaction(
  name="GET /search",
  sampled=True
);

----------------------------------------

TITLE: Integrating Sentry with Express in Node.js
DESCRIPTION: This code demonstrates how to integrate Sentry into an Express application. It shows the configuration of Raven, addition of request and error handler middleware, and setup of a custom error handler.

LANGUAGE: javascript
CODE:
var app = require("express")();
var Raven = require("raven");

// Must configure Raven before doing anything else with it
Raven.config("___DSN___").install();

// The Sentry request handler middleware must be added before any other handlers
app.use(Raven.requestHandler());

app.get("/", function mainHandler(req, res) {
  throw new Error("Broke!");
});

// The Sentry error handler middleware must be registered before any other error middleware
app.use(Raven.errorHandler());

// Optional fallthrough error handler
app.use(function onError(err, req, res, next) {
  // The ID of error events captured by the Sentry error middleware is attached to `res.sentry`.
  // You can use this ID for debugging, or to correlate requests with errors in Sentry.
  res.statusCode = 500;
  res.end(res.sentry + "\n");
});

app.listen(3000);

----------------------------------------

TITLE: Configuring Sentry Service Provider and Facade in Laravel
DESCRIPTION: Add the Sentry service provider and facade to the Laravel configuration file config/app.php.

LANGUAGE: php
CODE:
'providers' => array(
    // ...
    'Sentry\SentryLaravel\SentryLaravelServiceProvider',
),
'aliases' => array(
    // ...
    'Sentry' => 'Sentry\SentryLaravel\SentryFacade',
)

----------------------------------------

TITLE: Using Decorator for Span Creation in Python
DESCRIPTION: Shows how to use the @sentry_sdk.trace decorator to create spans automatically around function executions.

LANGUAGE: python
CODE:
import sentry_sdk

@sentry_sdk.trace
def eat_slice(slice):
    ...

def eat_pizza(pizza):
    with sentry_sdk.start_transaction(op="task", name="Eat Pizza"):
        while pizza.slices > 0:
            eat_slice(pizza.slices.pop())

----------------------------------------

TITLE: Adding Data Attributes to Transactions in Java
DESCRIPTION: Demonstrates how to add string, number, boolean, and array data attributes to a Sentry transaction using Java. Shows usage of transaction.setData() method with different data types.

LANGUAGE: java
CODE:
ITransaction transaction = Sentry.startTransaction("processOrderBatch()", "task");
transaction.setData("my-data-attribute-1", "value1");
transaction.setData("my-data-attribute-2", 42);
transaction.setData("my-data-attribute-3", true);

transaction.setData("my-data-attribute-4", Arrays.asList("value1", "value2", "value3"));
transaction.setData("my-data-attribute-5", Arrays.asList(42, 43, 44));
transaction.setData("my-data-attribute-6", Arrays.asList(true, false, true));

----------------------------------------

TITLE: Initializing Sentry with LRU Memoizer Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the LRU Memoizer integration. It adds instrumentation for the lru-memoizer library to capture spans using @opentelemetry/instrumentation-lru-memoizer.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [new Sentry.lruMemoizerIntegration()],
});

----------------------------------------

TITLE: Verifying Sentry-Langchain Integration
DESCRIPTION: Example code demonstrating how to verify the Sentry integration by creating an intentional error using an invalid API key with Langchain.

LANGUAGE: python
CODE:
from langchain_openai import ChatOpenAI
import sentry_sdk

sentry_sdk.init(...)  # same as above

llm = ChatOpenAI(model="gpt-3.5-turbo-0125", temperature=0, api_key="bad API key")
with sentry_sdk.start_transaction(op="ai-inference", name="The result of the AI inference"):
    response = llm.invoke([("system", "What is the capital of paris?")])
    print(response)

----------------------------------------

TITLE: Installing Sentry Android Gradle Plugin (Kotlin)
DESCRIPTION: Configuration for adding Sentry Android Gradle plugin to app/build.gradle.kts using Kotlin DSL syntax. This adds the Sentry Android SDK to the project.

LANGUAGE: kotlin
CODE:
plugins {
  id("com.android.application")
  id("io.sentry.android.gradle") version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

----------------------------------------

TITLE: Initializing Sentry in ESM Module
DESCRIPTION: Creates an instrument.mjs file to initialize Sentry with basic configuration including tracing. This must be executed before importing any other modules.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

// Ensure to call this before importing any other modules!
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Add Tracing by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Enabling Tracing in Flutter Sentry SDK
DESCRIPTION: Configures the Sentry SDK to enable transaction tracing with a sample rate of 1.0. This is a prerequisite for profiling functionality.

LANGUAGE: dart
CODE:
SentryFlutter.init(
  (options) => {
    options.dsn = '___PUBLIC_DSN___';
    // We recommend adjusting this value in production:
    options.tracesSampleRate = 1.0;
  },
  appRunner: () => runApp(MyApp()),
);

----------------------------------------

TITLE: Disabling Automatic Capture of GraphQL Client Errors
DESCRIPTION: Configure the Apollo client to disable automatic capture of GraphQL client errors.

LANGUAGE: kotlin
CODE:
import com.apollographql.apollo3.ApolloClient
import io.sentry.apollo3.sentryTracing

val apollo = ApolloClient.builder()
    .serverUrl("https://your-api-host/")
    .sentryTracing(captureFailedRequests = false)
    .build()

----------------------------------------

TITLE: Configuring Sentry SDK in ASP.NET MVC Global.asax.cs
DESCRIPTION: This code snippet demonstrates how to integrate Sentry SDK into an ASP.NET MVC application's Global.asax.cs file. It initializes the SDK, sets up error capturing, and manages transactions for performance monitoring. The DSN is retrieved from the Web.config file.

LANGUAGE: csharp
CODE:
using System;
using System.Configuration;
using System.Web.Mvc;
using System.Web.Routing;
using Sentry.AspNet;

namespace AspNetMvc
{
    public class MvcApplication : System.Web.HttpApplication
    {
        private IDisposable _sentry;

        protected void Application_Start()
        {
            // Set up the Sentry SDK
            _sentry = SentrySdk.Init(o =>
            {
                // We store the DSN inside Web.config; make sure to use your own DSN!
                o.Dsn = ConfigurationManager.AppSettings["SentryDsn"];

                // Get ASP.NET integration
                o.AddAspNet();

                // Example sample rate for your transactions: captures 10% of transactions
                o.TracesSampleRate = 0.1;
            });
        }

        // Global error catcher
        protected void Application_Error() => Server.CaptureLastError();


        protected void Application_End()
        {
            // Close the Sentry SDK (flushes queued events to Sentry)
            _sentry?.Dispose();
        }

        protected void Application_BeginRequest()
        {
            // Start a transaction that encompasses the current request
            Context.StartSentryTransaction();
        }

        protected void Application_EndRequest()
        {
            Context.FinishSentryTransaction();
        }
    }
}

----------------------------------------

TITLE: Enabling Default PII Sending for Sentry
DESCRIPTION: Configure Sentry to include headers and cookies in error events.

LANGUAGE: kotlin
CODE:
Sentry.init { options ->
  options.isSendDefaultPii = true
}

----------------------------------------

TITLE: Using OpenTelemetry Tracer with Sentry
DESCRIPTION: Demonstrates how to access and use the OpenTelemetry tracer through Sentry's client. Shows creating spans using native OpenTelemetry APIs.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

const tracer = Sentry.getClient()?.tracer;
// Now you can use native APIs on the tracer:
tracer.startActiveSpan("span name", () => {
  // measure something
});

----------------------------------------

TITLE: Initializing Sentry in Qt Application (C++)
DESCRIPTION: This code snippet demonstrates how to set up Sentry error tracking in a Qt application. It configures Sentry options, initializes the SDK, and creates a basic Qt widget. The code also ensures proper cleanup by calling sentry_close() before the application exits.

LANGUAGE: cpp
CODE:
#include <QtWidgets>
#include <sentry.h>

int main(int argc, char *argv[])
{
    sentry_options_t *options = sentry_options_new();
    sentry_options_set_dsn(options, "___PUBLIC_DSN___");
    // This is also the default-path. For further information and recommendations:
    // https://docs.sentry.io/platforms/native/configuration/options/#database-path
    sentry_options_set_database_path(options, ".sentry-native");
    sentry_options_set_release(options, "my-project-name@2.3.12");
    sentry_options_set_debug(options, 1);
    sentry_init(options);

    // Make sure everything flushes
    auto sentryClose = qScopeGuard([] { sentry_close(); });

    QApplication app(argc, argv);
    QWidget widget;
    widget.show();

    return app.exec();
}

----------------------------------------

TITLE: Configuring Raven.js for React Native
DESCRIPTION: Basic configuration of Raven.js for a React Native application.

LANGUAGE: javascript
CODE:
Raven.config("___PUBLIC_DSN___", { release: RELEASE_ID }).install();

----------------------------------------

TITLE: Initializing Sentry SDK with Guard Pattern in Rust
DESCRIPTION: Initializes the Sentry SDK with a public DSN and client options, returning a guard that ensures events are sent before process exit. The guard pattern prevents premature termination while events are being processed, using a timeout mechanism.

LANGUAGE: rust
CODE:
let _guard = sentry::init(("___PUBLIC_DSN___", sentry::ClientOptions {
    release: sentry::release_name!(),
    ..Default::default()
}));

----------------------------------------

TITLE: Configuring OpenTelemetry with Sentry Components in Ruby
DESCRIPTION: This snippet sets up OpenTelemetry by adding Sentry's span processor and propagator. It uses the OpenTelemetry SDK configuration to integrate Sentry components for tracing.

LANGUAGE: ruby
CODE:
OpenTelemetry::SDK.configure do |c|
  c.use_all
  c.add_span_processor(Sentry::OpenTelemetry::SpanProcessor.instance)
end

OpenTelemetry.propagation = Sentry::OpenTelemetry::Propagator.new

----------------------------------------

TITLE: Configuring Sentry for Server-Side React Router
DESCRIPTION: Create an instrument.server.mjs file to initialize Sentry SDK for server-side operations, including performance monitoring and profiling.

LANGUAGE: js
CODE:
import * as Sentry from "@sentry/react-router";
import { nodeProfilingIntegration } from '@sentry/profiling-node';

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [nodeProfilingIntegration()],
  tracesSampleRate: 1.0, // Capture 100% of the transactions
  profilesSampleRate: 1.0, // profile every transaction
});

----------------------------------------

TITLE: Enabling PII Data in Error Events
DESCRIPTION: Configure the Android manifest to include PII data like headers and cookies in HTTP error events.

LANGUAGE: xml
CODE:
<application>
  <meta-data android:name="io.sentry.send-default-pii" android:value="true" />
</application>

----------------------------------------

TITLE: Implementing Custom Error Handling with Sentry.runZonedGuarded in Dart
DESCRIPTION: This snippet demonstrates how to use Sentry.runZonedGuarded to wrap the application initialization and provide automatic error reporting and breadcrumb tracking. It includes SentryFlutter initialization and custom error handling.

LANGUAGE: dart
CODE:
Sentry.runZonedGuarded(() async {
  WidgetsBinding.ensureInitialized();

  // Errors before init will not be handled by Sentry

  await SentryFlutter.init(
    (options) {
    ...
    },
    appRunner: () => runApp(MyApp()),
  );
} (error, stackTrace) {
  // Automatically sends errors to Sentry, no need to do any
  // captureException calls on your part.
  // On top of that, you can do your own custom stuff in this callback.
});

----------------------------------------

TITLE: Initializing Sentry with Custom Event Modification in Dart
DESCRIPTION: This code snippet demonstrates how to initialize Sentry in a Dart application with a custom beforeSend option. The beforeSend function is used to modify the event before it's sent to Sentry, specifically removing the server name from the event.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.beforeSend = (event, hint) {
    return event.copyWith(serverName: ""); // Don't send server names.
  };
});

----------------------------------------

TITLE: Configuring Redux Store with Sentry Enhancer
DESCRIPTION: Shows how to set up a Redux store with Sentry monitoring integration using Redux enhancers. Includes examples for both the modern configureStore API and legacy createStore API. The Sentry enhancer allows tracking Redux state changes and actions in Sentry's monitoring platform.

LANGUAGE: javascript
CODE:
import { configureStore, createStore, compose } from "redux";
import * as Sentry from "@sentry/react-native";

// ...

const sentryReduxEnhancer = Sentry.createReduxEnhancer({
  // Optionally pass options listed below
});

// If you are using the `configureStore` API, pass the enhancer as follows:
const store = configureStore({
  reducer,
  enhancers: (getDefaultEnhancers) => {
    return getDefaultEnhancers().concat(sentryReduxEnhancer);
  },
});

// If you are using the deprecated `createStore` API, pass the enhancer as follows:
const store = createStore(reducer, sentryReduxEnhancer);

----------------------------------------

TITLE: Creating a Performance Span with Sentry in JavaScript
DESCRIPTION: This snippet demonstrates how to use Sentry.startSpan() to measure the performance of an HTTP client operation. It creates a span named 'GET /users' with the operation type 'http.client' and executes the fetchUsers() function within the span.

LANGUAGE: JavaScript
CODE:
const result = Sentry.startSpan({ name: 'GET /users', op: 'http.client' }, () => {
  return fetchUsers();
})

----------------------------------------

TITLE: Initializing Sentry with Prisma v5 Integration
DESCRIPTION: Configuration for adding Prisma integration to Sentry initialization for Prisma version 5, including explicit instrumentation setup using @prisma/instrumentation.

LANGUAGE: javascript
CODE:
import { PrismaInstrumentation } from "@prisma/instrumentation";

Sentry.init({
  tracesSampleRate: 1.0,
  integrations: [
    Sentry.prismaIntegration({
      // Override the default instrumentation that Sentry uses
      prismaInstrumentation: new PrismaInstrumentation(),
    }),
  ],
});

----------------------------------------

TITLE: Sample Sentry Event Payload Structure
DESCRIPTION: JSON example showing the structure of a Sentry event payload, including the 'logentry' and 'exceptions' fields.

LANGUAGE: json
CODE:
{
  "logentry": {
    "formatted": "Failed to roll out the dinglebop"
  },
  "exceptions": {
    "values": [
      {
        "type": "ZeroDivisionError",
        "value": "integer division or modulo by zero"
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Sentry with @EnableSentry in Spring 5 (Kotlin)
DESCRIPTION: This snippet demonstrates how to use the @EnableSentry annotation to configure Sentry in a Spring 5 application using Kotlin. It includes setting the DSN and enabling sendDefaultPii for additional data collection.

LANGUAGE: kotlin
CODE:
import io.sentry.spring.EnableSentry
// NOTE: Replace the test DSN below with YOUR OWN DSN to see the events from this app in your Sentry
// project/dashboard
@EnableSentry(
  dsn = "___PUBLIC_DSN___",
  // Add data like request headers and IP for users,
  // see https://docs.sentry.io/platforms/java/guides/spring/data-management/data-collected/ for more info
  sendDefaultPii = true
)
@Configuration
class SentryConfiguration

----------------------------------------

TITLE: Throwing Test Error in SvelteKit API Route
DESCRIPTION: Example of throwing an error in a SvelteKit API route to test Sentry error capturing on the server side.

LANGUAGE: javascript
CODE:
export const GET = () => {
  throw new Error("Sentry API Error");
};

----------------------------------------

TITLE: Implementing Custom Error Boundary with Sentry in React Router v7
DESCRIPTION: This snippet shows how to implement a custom error boundary with Sentry in React Router v7, using captureException to send errors to Sentry.

LANGUAGE: jsx
CODE:
// router setup
const sentryCreateBrowserRouter = wrapCreateBrowserRouterV7(createBrowserRouter);
const router = sentryCreateBrowserRouter([
  {
    path: "/",
    element: <YourLayout />,
    children: [
      {
        path: "",
        element: <Outlet />,
        errorElement: <YourCustomRootErrorBoundary />,
        children: [
          // other routes ...
        ],
      },
    ],
  },
]);

// error boundary
import { useRouteError } from "react-router-dom";
import * as Sentry from "@sentry/react";

export function YourCustomRootErrorBoundary() {
  const error = useRouteError() as Error;

  React.useEffect(() => {
    Sentry.captureException(error);
  }, [error]);

  return (
    <div>
      <h1>Ouch!</h1>
    </div>
  );
}

----------------------------------------

TITLE: Implementing Sentry Report Dialog in PHP Template
DESCRIPTION: This code snippet demonstrates how to implement a Sentry report dialog in a PHP template. It checks for the last event ID and initializes Sentry with a public DSN if an event is available.

LANGUAGE: html
CODE:
<?php if (\Sentry\SentrySdk::getCurrentHub()->getLastEventId()) { ?>
<script>
  Sentry.init({ dsn: "___PUBLIC_DSN___" });
  Sentry.showReportDialog({
    eventId:
      "<?php echo \Sentry\SentrySdk::getCurrentHub()->getLastEventId(); ?>",
  });
</script>
<?php } ?>

----------------------------------------

TITLE: Configuring Blocking in Session Replay
DESCRIPTION: Shows how to set up blocking rules for DOM elements using CSS selectors. Blocked elements are replaced with placeholders of the same dimensions.

LANGUAGE: javascript
CODE:
replayIntegration({
  block: [".block-me"],
  unblock: [".unblock-me"],
})

----------------------------------------

TITLE: Creating Custom Sentry Performance Spans with Sampling
DESCRIPTION: Shows how to start a custom performance span with attributes and implement a sampling function that can selectively sample spans based on their properties. The example creates a search-related span and demonstrates selective sampling based on the span name.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Search from navbar',
    op: 'search',
    attributes: {
      testGroup: 'A3',
      treatmentName: 'eager load',
    },
  },
);

// Will result in `tracesSampler` receiving:
function tracesSampler(samplingContext) {
  /*
  samplingContext = { 
    name: "Search from navbar", 
    attributes: {
      testGroup: 'A3',
      treatmentName: 'eager load',
    },
  }
  */
 
  // Do not sample this specific span
  return name !== 'Search from navbar';
}

----------------------------------------

TITLE: Integrating Sentry with Connect.js using ESM
DESCRIPTION: This snippet demonstrates how to set up Sentry error handling in a Connect.js application using ESM import statements. It imports the required modules, creates a Connect app, and configures Sentry error handling.

LANGUAGE: javascript
CODE:
// Ensure to import this before importing any other modules!
import './instrument.js'

import connect from 'connect';
import * as Sentry from "@sentry/node";
const app = connect();

Sentry.setupConnectErrorHandler(app);

// Add your routes, etc.

app.listen(3030);

----------------------------------------

TITLE: Initializing Sentry with Trace Sampling in Java
DESCRIPTION: This Java code demonstrates how to initialize Sentry Android SDK with a uniform sample rate or a custom sampling function. It sets the DSN and configures trace sampling options.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  options.setDsn("___PUBLIC_DSN___");
  // To set a uniform sample rate
  options.setTracesSampleRate(1.0);
  // OR if you prefer, determine traces sample rate based on the sampling context
  options.setTracesSampler(
      context -> {
        // return a number between 0 and 1 or null (to fallback to configured value)
      });
});

----------------------------------------

TITLE: Initializing Sentry HTTP Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the HTTP integration. The integration captures breadcrumbs for HTTP requests and spans for outgoing HTTP requests.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  integrations: [Sentry.httpIntegration()],
});

----------------------------------------

TITLE: Setting up Sentry via CDN in HTML
DESCRIPTION: This snippet shows how to include Sentry via CDN and initialize it. It includes the Sentry script with integrity and crossorigin attributes, and sets up the Sentry.init() function with DSN and integrations.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    integrations: [Sentry.moduleMetadataIntegration()],
  });
</script>

----------------------------------------

TITLE: Setting Sentry Scope Tag in F#
DESCRIPTION: Configures a Sentry scope to add a custom tag for page locale using F# function syntax. Sets the 'page.locale' tag to 'de-at' value.

LANGUAGE: fsharp
CODE:
SentrySdk.ConfigureScope(fun scope ->
    scope.SetTag("page.locale", "de-at")
    )

----------------------------------------

TITLE: Configuring Offline Caching Options in JavaScript for Sentry
DESCRIPTION: This code snippet demonstrates the optional properties that can be added to the transportOptions object when configuring offline caching for Sentry in a JavaScript application. It includes options for specifying the database name, store name, maximum queue size, startup flushing, and a custom storage decision function.

LANGUAGE: javascript
CODE:
transportOptions:{
  /**
   * Name of IndexedDb database to store events
   * Default: 'sentry-offline'
   */
  dbName: string;
  /**
   * Name of IndexedDb object store to store events
   * Default: 'queue'
   */
  storeName: string;
  /**
   * Maximum number of events to store
   * Default: 30
   */
  maxQueueSize: number;
  /**
   * Flush the store shortly after startup.
   * Default: false
   */
  flushAtStartup: boolean;
  /**
   * Called before an event is stored.
   * Return false to drop the envelope rather than store it.
   *
   * @param envelope The envelope that failed to send.
   * @param error The error that occurred.
   * @param retryDelay The current retry delay in milliseconds.
   */
  shouldStore: (envelope: Envelope, error: Error, retryDelay: number) => boolean | Promise<boolean>;
}

----------------------------------------

TITLE: Implementing Sentry Integration in Actix Web Application
DESCRIPTION: This Rust code demonstrates how to set up an Actix Web application with Sentry integration. It initializes Sentry, creates a failing endpoint, and configures the Sentry middleware for error capturing. The example includes error handling and server setup.

LANGUAGE: rust
CODE:
use std::io;

use actix_web::{get, App, Error, HttpRequest, HttpServer};

#[get("/")]
async fn failing(_req: HttpRequest) -> Result<String, Error> {
    Err(io::Error::new(io::ErrorKind::Other, "An error happens here").into())
}

fn main() -> io::Result<()> {
    let _guard = sentry::init((
        "___PUBLIC_DSN___",
        sentry::ClientOptions {
            release: sentry::release_name!(),
            ..Default::default()
        },
    ));
    std::env::set_var("RUST_BACKTRACE", "1");

    actix_web::rt::System::new().block_on(async {
        HttpServer::new(|| {
            App::new()
                .wrap(sentry_actix::Sentry::new())
                .service(failing)
        })
        .bind("127.0.0.1:3001")?
        .run()
        .await
    })?;

    Ok(())
}

----------------------------------------

TITLE: Configuring Sentry Event Processing for Database Exceptions
DESCRIPTION: Initializes Sentry SDK with a custom beforeSend hook that adds specific fingerprinting for database connection errors. This helps group related database exceptions together in the Sentry dashboard for better error tracking.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.beforeSend = (event, hint) {
    if (event.throwable is DatabaseException) {
      event = event.copyWith(fingerprint: ['database-connection-error']);
    }
    return event;
  };
});

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration (Current)
DESCRIPTION: Sets up Sentry error monitoring with Unleash feature flag integration using the current featureFlagClientClass configuration. Demonstrates client initialization, feature flag evaluation, and error capturing.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solid';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Initializing LaunchDarkly with Sentry Integration in JavaScript
DESCRIPTION: Sets up Sentry monitoring with LaunchDarkly integration, initializes the LaunchDarkly client with Sentry flag tracking, and demonstrates flag evaluation and error capture. Requires @sentry/react and launchdarkly-js-client-sdk packages to be installed.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/react';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Configuring Sentry in Blazor WebAssembly
DESCRIPTION: Code to initialize and configure Sentry in a Blazor WebAssembly application. Sets up DSN, trace sampling, and logging integration with customizable debug options.

LANGUAGE: csharp
CODE:
var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.UseSentry(options =>
{
    options.Dsn = "___PUBLIC_DSN___";
    options.TracesSampleRate = 0.1;
    // When configuring for the first time, to see what the SDK is doing:
    // options.Debug = true;
});

// Captures logError and higher as events
builder.Logging.AddSentry(o => o.InitializeSdk = false);

await builder.Build().RunAsync();

----------------------------------------

TITLE: Adding Data Attributes to Existing Transactions and Spans in PHP
DESCRIPTION: This code snippet shows how to add data attributes to existing transactions and spans using Sentry's PHP SDK. It retrieves the current transaction or span and sets new data attributes.

LANGUAGE: php
CODE:
$transaction = \Sentry\SentrySdk::getCurrentHub()->getTransaction();
if ($transaction !== null) {
    $transaction->setData([
        'data_attribute_1' => 42,
        'data_attribute_2' => true,
    ]);
}

$span = \Sentry\SentrySdk::getCurrentHub()->getSpan();
if ($span !== null) {
    $span->setData([
        'data_attribute_1' => 42,
        'data_attribute_2' => true,
    ]);
}

----------------------------------------

TITLE: Capturing Exceptions with Sentry in TypeScript for Remix
DESCRIPTION: This code snippet demonstrates how to use Sentry's captureException() function to capture and report errors in a Remix application. It imports Sentry, wraps potentially failing code in a try-catch block, and captures any thrown exceptions.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/remix";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: HTTP Client Instrumentation in Dart
DESCRIPTION: The SentryHttpClient creates spans for HTTP requests with operation type 'http.client'. It tracks request execution, sets appropriate span status based on HTTP response codes, and links exceptions to spans.



----------------------------------------

TITLE: Initializing Sentry SDK in Xamarin Application
DESCRIPTION: Demonstrates how to initialize the Sentry SDK in a Xamarin application with performance monitoring. The code shows configuration of DSN, debug mode, and traces sample rate. Should be called early in the application lifecycle - in OnCreate for Android or FinishedLaunching for iOS.

LANGUAGE: csharp
CODE:
SentryXamarin.Init(options =>
{
    options.AddXamarinFormsIntegration();
    // Tells which project in Sentry to send events to:
    options.Dsn = "___PUBLIC_DSN___";
    // When configuring for the first time, to see what the SDK is doing:
    options.Debug = true;
    // Set TracesSampleRate to 1.0 to capture 100%
    // of transactions for tracing.
    // We recommend adjusting this value in production
    options.TracesSampleRate = 1.0;
});
// App code

----------------------------------------

TITLE: Installing Sentry Node.js SDK with Profiling
DESCRIPTION: Commands to install Sentry Node.js SDK with additional profiling support package using different package managers. Includes both the core SDK and profiling extension.

LANGUAGE: bash
CODE:
npm install @sentry/node @sentry/profiling-node --save

LANGUAGE: bash
CODE:
yarn add @sentry/node @sentry/profiling-node

LANGUAGE: bash
CODE:
pnpm add @sentry/node @sentry/profiling-node

----------------------------------------

TITLE: Configuring Sentry Error Report Dialog in HTML Template
DESCRIPTION: This HTML template snippet initializes Sentry and shows the error report dialog if a Sentry event ID is present. It requires the Sentry JavaScript SDK to be included in the page.

LANGUAGE: html
CODE:
{% if sentry_event_id %}
<script>
  Sentry.init({ dsn: "___PUBLIC_DSN___" });
  Sentry.showReportDialog({ eventId: "{{ sentry_event_id }}" });
</script>
{% endif %}

----------------------------------------

TITLE: Configuring Sentry for HTTP Functions in Google Cloud
DESCRIPTION: Implementation of Sentry error monitoring and performance tracing for HTTP functions in Google Cloud. Uses wrapHttpFunction to capture errors and includes tracing configuration with a sample rate of 100%.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/google-cloud-serverless");

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Add Tracing by setting tracesSampleRate and adding integration
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
});

exports.helloHttp = Sentry.wrapHttpFunction((req, res) => {
  throw new Error("oh, hello there!");
});

----------------------------------------

TITLE: Capturing Local Variables in Try-Catch Block for ESM Compatibility (JavaScript)
DESCRIPTION: This code shows a workaround for capturing local variables in ESM environments where unhandled errors cannot be automatically captured. It uses a try-catch block and manually calls Sentry.captureException().

LANGUAGE: javascript
CODE:
try {
  // Your code here
} catch (error) {
  Sentry.captureException(error);
}

----------------------------------------

TITLE: Configuring Sentry Scope and Capturing Exceptions in Java
DESCRIPTION: This snippet demonstrates how to use Sentry's withScope method to set custom tags and log levels when capturing exceptions in Java. It shows the difference between capturing exceptions within and outside the scope.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.SentryLevel;

Sentry.withScope(scope -> {
  scope.setTag("my-tag", "my value");
  scope.setLevel(SentryLevel.WARNING);

  // will be tagged with my-tag="my value"
  Sentry.captureException(new Exception("my error"));
});

// will not be tagged with my-tag
Sentry.captureException(new Exception("my error"));

----------------------------------------

TITLE: Using startSpan() API in JavaScript
DESCRIPTION: This example demonstrates how to use the startSpan() API to create a new span and automatically end it when the callback ends. It shows both synchronous and asynchronous usage.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: "my-span",
    attributes: {
      attr1: "my-attribute",
      attr2: 123,
    },
  },
  (span) => {
    // do something that you want to measure
    // once this is done, the span is automatically ended
  }
);

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: "my-span",
    attributes: {},
  },
  async (span) => {
    // do something that you want to measure
    await waitOnSomething();
    // once this is done, the span is automatically ended
  }
);

----------------------------------------

TITLE: Capturing User Feedback with Sentry SDK in Objective-C
DESCRIPTION: This snippet illustrates how to capture a message and user feedback using the Sentry SDK in Objective-C. It demonstrates the creation of a SentryUserFeedback object, setting user information, and sending it to Sentry.

LANGUAGE: Objective-C
CODE:
@import Sentry;

SentryId *eventId = [SentrySDK captureMessage:@"My message"];

SentryUserFeedback *userFeedback = [[SentryUserFeedback alloc] initWithEventId:eventId];
userFeedback.comments = @"It broke.";
userFeedback.email = @"john.doe@example.com";
userFeedback.name = @"John Doe";
[SentrySDK captureUserFeedback:userFeedback];

----------------------------------------

TITLE: Using FeedbackWidget Component in React Native
DESCRIPTION: Shows how to manually integrate the FeedbackWidget component into a React Native application.

LANGUAGE: javascript
CODE:
import { FeedbackWidget } from "@sentry/react-native";

<FeedbackWidget/>

----------------------------------------

TITLE: Initializing Sentry Browser SDK with Tracing Configuration
DESCRIPTION: Sets up Sentry SDK with browser tracing integration, including DSN configuration, automatic instrumentation, and trace propagation settings. The configuration enables performance monitoring with a 100% sample rate and specific URL patterns for trace propagation.

LANGUAGE: javascript
CODE:
// If you're using one of our framework SDK packages, like `@sentry/react`,
// substitute its name for `@sentry/browser` here
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This enables automatic instrumentation (highly recommended),
  // but is not necessary for purely manual usage
  // If you only want to use custom instrumentation:
  // * Remove the `BrowserTracing` integration
  // * add `Sentry.addTracingExtensions()` above your Sentry.init() call
  integrations: [Sentry.browserTracingIntegration()],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
});

----------------------------------------

TITLE: Adding Authentication Breadcrumb in Sentry with JavaScript
DESCRIPTION: This snippet demonstrates how to add a custom breadcrumb to Sentry for tracking user authentication events. It uses the Sentry.addBreadcrumb() method to log information about the authenticated user.

LANGUAGE: javascript
CODE:
Sentry.addBreadcrumb({
  category: "auth",
  message: "Authenticated user " + user.email,
  level: "info",
});

----------------------------------------

TITLE: Initializing Sentry with CJS Preload Command
DESCRIPTION: Command to preload Sentry modules in a CommonJS application using the --require flag.

LANGUAGE: bash
CODE:
node --require @sentry/node/preload app.js

----------------------------------------

TITLE: Configuring Sentry SDK with GCP Integration
DESCRIPTION: Demonstrates the complete setup of Sentry SDK with Google Cloud Functions integration, including performance monitoring and profiling configuration. Includes options for sending PII data, setting trace sampling rates, and profile sampling rates.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.gcp import GcpIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
    integrations=[
        GcpIntegration(),
    ],
)

def http_function_entrypoint(request):
    # ...

----------------------------------------

TITLE: Clearing User Information in Sentry SDK
DESCRIPTION: This snippet shows how to clear the currently set user information in the Sentry SDK.

LANGUAGE: javascript
CODE:
Sentry.setUser(null);

----------------------------------------

TITLE: Adding Spans with Context Manager in Python
DESCRIPTION: Demonstrates how to add child spans to a transaction using a context manager for more detailed performance monitoring.

LANGUAGE: python
CODE:
import sentry_sdk

def eat_slice(slice):
    ...

def eat_pizza(pizza):
    with sentry_sdk.start_transaction(op="task", name="Eat Pizza"):
        while pizza.slices > 0:
            with sentry_sdk.start_span(name="Eat Slice"):
                eat_slice(pizza.slices.pop())

----------------------------------------

TITLE: Advanced Sentry Configuration with Custom Zone
DESCRIPTION: Implements Sentry initialization using a custom error zone for better error handling and compatibility with WidgetsBinding initialization. Includes additional configuration for performance monitoring and profiling.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  // The SDK creates it's own custom zone on web for automatic error and breadcrumb tracking on web.
  // This could lead to zone mismatch errors if you needed to call `WidgetsBinding.ensureInitialized()` before Sentry in a cusom zone.
  // With `Sentry.runZonedGuarded` you still get convenient auto error and breadcrumb tracking and can also call `WidgetsBinding.ensureInitialized()` before Sentry.
  Sentry.runZonedGuarded(() async {
    WidgetsBinding.ensureInitialized();

    // Errors before init will not be handled by Sentry

    await SentryFlutter.init(
      (options) {
        options.dsn = '___PUBLIC_DSN___';
        // Adds request headers and IP for users,
        // visit: https://docs.sentry.io/platforms/dart/guides//data-management/data-collected/ for more info
        options.sendDefaultPii = true;
        // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.
        // We recommend adjusting this value in production.
        options.tracesSampleRate = 1.0;
        // The sampling rate for profiling is relative to tracesSampleRate
        // Setting to 1.0 will profile 100% of sampled transactions:
        // Note: Profiling alpha is available for iOS and macOS since SDK version 7.12.0
        options.profilesSampleRate = 1.0;
      },
      appRunner: () => runApp(
        SentryWidget(
          child: MyApp(),
        ),
      ),
    );
  } (error, stackTrace) {
    // Automatically sends errors to Sentry, no need to do any
    // captureException calls on your part.
    // On top of that, you can do your own custom stuff in this callback.
  });

  // you can also configure SENTRY_DSN, SENTRY_RELEASE, SENTRY_DIST, and
  // SENTRY_ENVIRONMENT via Dart environment variable (--dart-define)
}

----------------------------------------

TITLE: Extracting Incoming Trace Information with Sentry in Java
DESCRIPTION: Demonstrates how to extract and store incoming tracing information from HTTP requests using Sentry's continueTrace() function. Handles both sentry-trace and baggage headers for distributed tracing.

LANGUAGE: java
CODE:
import io.sentry.BaggageHeader;
import io.sentry.ITransaction;
import io.sentry.Sentry;
import io.sentry.SentryTraceHeader;
import io.sentry.TransactionContext;

final String sentryTraceHeader = httpRequest.getHeader(SentryTraceHeader.SENTRY_TRACE_HEADER);
final List<String> baggageHeader = Collections.list(httpRequest.getHeaders(BaggageHeader.BAGGAGE_HEADER));

final TransactionContext transactionContext = Sentry.continueTrace(sentryTraceHeader, baggageHeader);
if (transactionContext != null) {
    final ITransaction transaction = Sentry.startTransaction(transactionContext);
}

----------------------------------------

TITLE: Configuring Raven.js Ember plugin
DESCRIPTION: Example of including and configuring Raven.js with the Ember plugin via CDN.

LANGUAGE: html
CODE:
<script src="http://builds.emberjs.com/tags/v2.3.1/ember.prod.js"></script>
<script
  src="https://cdn.ravenjs.com/3.26.4/ember/raven.min.js"
  crossorigin="anonymous"
></script>
<script>
  Raven.config("___PUBLIC_DSN___").install();
</script>

----------------------------------------

TITLE: Initializing Sentry with Console Capture using CDN
DESCRIPTION: This snippet demonstrates how to set up Sentry with console capture integration using CDN scripts. It includes the Sentry bundle and capture console scripts, then initializes Sentry with a DSN and the console capture integration.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/captureconsole.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'captureconsole.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    integrations: [Sentry.captureConsoleIntegration()],
  });
</script>

----------------------------------------

TITLE: Sentry Integrations Feature Matrix
DESCRIPTION: Markdown table documenting Sentry integration features. Shows which integrations are auto-enabled and their support for errors, tracing, cron jobs, and additional context.

LANGUAGE: markdown
CODE:
|                                                      | **Auto Enabled** | **Errors** | **Tracing** | **Cron** | **Additional Context** |
| ---------------------------------------------------- | :--------------: | :--------: | :---------: | :------: | :--------------------: |
| [`dedupeIntegration`](./dedupe)                      |        ✓         |     ✓      |             |          |                        |
| [`fetchIntegration`](./fetchIntegration)             |        ✓         |     ✓      |      ✓      |          |                        |
| [`functionToStringIntegration`](./functiontostring)  |        ✓         |            |             |          |                        |
| [`inboundFiltersIntegration`](./inboundfilters)      |        ✓         |     ✓      |             |          |                        |
| [`linkedErrorsIntegration`](./linkederrors)          |        ✓         |     ✓      |             |          |                        |
| [`requestDataIntegration`](./requestDataIntegration) |        ✓         |            |             |          |           ✓            |
| [`captureConsoleIntegration`](./captureconsole)      |                  |            |             |          |           ✓            |
| [`extraErrorDataIntegration`](./extraerrordata)      |                  |            |             |          |           ✓            |
| [`rewriteFramesIntegration`](./rewriteframes)        |                  |     ✓      |             |          |                        |

----------------------------------------

TITLE: Manual Sentry Component Tracking in Svelte
DESCRIPTION: Illustrates how to manually track a Svelte component using Sentry's trackComponent function. This method allows for per-component control over tracking options without using the automatic build-time instrumentation.

LANGUAGE: javascript
CODE:
<script>
  import * as Sentry from "@sentry/svelte";
  Sentry.trackComponent({
    trackInit: true,
    trackUpdates: false,
    componentName: 'MyAwesomeComponent'
  })
  // rest of your code
</script>

----------------------------------------

TITLE: Configuring ContextLines Integration in Sentry JavaScript SDK
DESCRIPTION: This snippet demonstrates how to import and configure the ContextLines integration in Sentry's JavaScript SDK. It allows you to set the number of context lines to be collected around each stack frame.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";
import { contextLinesIntegration } from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    contextLinesIntegration({
      // Collect 10 lines before and after each stack frame
      frameContextLines: 10,
    }),
  ],
});

----------------------------------------

TITLE: Capturing Errors with Sentry SDK in JavaScript
DESCRIPTION: This snippet demonstrates how to use Sentry's SDK to capture and report errors. It shows the basic usage of the captureException method to send error data to Sentry for analysis.

LANGUAGE: javascript
CODE:
try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Clearing User Information in Sentry SDK
DESCRIPTION: This snippet shows how to clear the currently set user information in the Sentry SDK.

LANGUAGE: javascript
CODE:
Sentry.setUser(null);

----------------------------------------

TITLE: Initializing Sentry with Tracing Configuration in Ember
DESCRIPTION: This snippet demonstrates how to initialize Sentry in an Ember application with tracing enabled. It sets the DSN, tracesSampleRate, and browserTracingOptions for configuring the default tracing integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/ember";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,

  // Configuration for Ember's default tracing integration.
  browserTracingOptions: {
    tracePropagationTargets: ["localhost", "my-site-url.com", /^//],
  },
});

----------------------------------------

TITLE: Integrating Sentry with Hono Application
DESCRIPTION: TypeScript implementation showing how to initialize Sentry in a Hono application with performance tracking enabled.

LANGUAGE: typescript
CODE:
import { Hono } from "hono";
import * as Sentry from "@sentry/cloudflare";

const app = new Hono();

// Your routes...
app.get("/", () => {
  // ...
});

export default Sentry.withSentry(
  (env) => ({
    dsn: "___PUBLIC_DSN___",

    // Set tracesSampleRate to 1.0 to capture 100% of spans for tracing.
    // Learn more at
    // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
    tracesSampleRate: 1.0,
  }),
  app
);

----------------------------------------

TITLE: Configuring Sentry Gradle Plugin
DESCRIPTION: Demonstrates the available configuration options for the Sentry Gradle plugin, including debug mode, source context settings, dependencies reporting, and auto-installation features.

LANGUAGE: groovy
CODE:
sentry {
    debug = true
    includeSourceContext = true
    additionalSourceDirsForSourceContext = ["mysrc/java", "other-source-dir/main/kotlin"]
    includeDependenciesReport = true
    autoInstallation {
        enabled = true
    }
}

LANGUAGE: kotlin
CODE:
sentry {
    debug.set(true)
    includeSourceContext.set(true)
    additionalSourceDirsForSourceContext.set(setOf("mysrc/java", "other-source-dir/main/kotlin"))
    includeDependenciesReport.set(true)
    autoInstallation {
        enabled.set(true)
    }
}

----------------------------------------

TITLE: Wrapping Solid ErrorBoundary with Sentry in JSX
DESCRIPTION: This snippet shows how to import Sentry and Solid's ErrorBoundary, wrap the ErrorBoundary with Sentry's withSentryErrorBoundary function, and use the resulting component in a Solid application. It captures exceptions automatically and renders a fallback component.

LANGUAGE: jsx
CODE:
import * as Sentry from "@sentry/solidstart";
import { ErrorBoundary } from "solid-js";

// Wrap Solid"s ErrorBoundary to automatically capture exceptions
const SentryErrorBoundary = Sentry.withSentryErrorBoundary(ErrorBoundary);

export default function SomeComponent() {
  return (
    <SentryErrorBoundary fallback={err => <div>Error: {err.message}</div>}>
      <div>Some Component</div>
    </SentryErrorBoundary>
  );
}

----------------------------------------

TITLE: Implementing Sentry Scope Management in Kotlin
DESCRIPTION: Kotlin implementation of Sentry scope configuration showing how to set user information, record breadcrumbs, and add context data. Uses Kotlin-specific syntax while maintaining the same functionality as the Java version.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.protocol.User

class MyClass {
  fun example() {
    // Note that all fields set on the scope are optional. Scope data is copied onto
    // all future events in the current scope.

    // Set the current user in the scope.
    Sentry.configureScope { scope ->
      scope.user = User().apply {
        username = "user1"
      }
    }

    // Record a breadcrumb in the scope.
    Sentry.addBreadcrumb("User did something specific again!")

    // Add extra data to future events in this scope.
    Sentry.configureScope { scope -> scope.setExtra("extra", "thing") }

    // Add an additional tag to future events in this scope.
    Sentry.configureScope { scope -> scope.setTag("tagName", "tagValue") }

    // Send an event with the scope data attached.
    Sentry.captureMessage("New event message")
  }
}

----------------------------------------

TITLE: Configuring Sentry Initialization with Tracing Options in Dart
DESCRIPTION: This code initializes Sentry with options for tracing. It demonstrates how to set a uniform sample rate or use a custom sampler function based on the sampling context.

LANGUAGE: dart
CODE:
Sentry.init((options) {
   // To set a uniform sample rate
   options.tracesSampleRate = 1.0;

   // OR if you prefer, determine traces sample rate
   // based on the sampling context
   options.tracesSampler = (samplingContext) {
     // return a number between 0 and 1 or null (to fallback
     // to configured value)
   };
});

----------------------------------------

TITLE: Configuring ContextLines Integration in Sentry JavaScript SDK
DESCRIPTION: This snippet demonstrates how to import and configure the ContextLines integration in Sentry's JavaScript SDK. It allows you to set the number of context lines to be collected around each stack frame.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";
import { contextLinesIntegration } from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    contextLinesIntegration({
      // Collect 10 lines before and after each stack frame
      frameContextLines: 10,
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration (Current)
DESCRIPTION: Sets up Sentry error tracking with Unleash feature flag integration using the current featureFlagClientClass configuration. Demonstrates client initialization, feature flag evaluation, and error capture.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/svelte';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Client-Side gRPC Propagation with Sentry in JavaScript
DESCRIPTION: This snippet shows how to implement client-side gRPC propagation with Sentry in JavaScript. It creates a gRPC client with an interceptor that adds Sentry trace headers to the metadata of outgoing calls.

LANGUAGE: javascript
CODE:
function createGrpcClient() {
  // Create client with interceptor
  return new MyServiceClient(address, grpc.credentials.createInsecure(), {
    interceptors: [(options, nextCall) => {
      // Create metadata for the call
      const metadata = new grpc.Metadata();
      
      // Get current trace information
      const traceData = Sentry.getTraceData();
      
      // Add trace headers to metadata
      if (traceData) {
        metadata.set('sentry-trace', traceData['sentry-trace']);
        metadata.set('baggage', traceData['baggage']);
      }
      
      // Add metadata to the call
      return new grpc.InterceptingCall(nextCall(options), {
        start: (metadata_, listener, next) => {
          next(metadata, listener);
        }
      });
    }]
  });
}

----------------------------------------

TITLE: Initializing Sentry with Custom Event Processing in PHP
DESCRIPTION: This code initializes Sentry with a 'before_send_check_in' function that filters events based on the check-in environment. It discards events from non-production environments and passes through events from the production environment.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'before_send_check_in' => function (\Sentry\Event $event): ?\Sentry\Event {
        $checkIn = $event->getCheckIn();
        $checkInEnvironment = $checkIn->getEnvironment();

        if ($checkInEnvironment !== 'production') {
            return null;
        }

        return $event;
    },
]);

----------------------------------------

TITLE: Installing Sentry Vite Plugin with Package Managers
DESCRIPTION: Commands for installing the Sentry Vite plugin using npm, yarn, or pnpm package managers. This plugin is required for automatic source map uploading.

LANGUAGE: bash
CODE:
npm install @sentry/vite-plugin --save-dev

LANGUAGE: bash
CODE:
yarn add @sentry/vite-plugin --dev

LANGUAGE: bash
CODE:
pnpm add @sentry/vite-plugin --save-dev

----------------------------------------

TITLE: Initializing Sentry with Breadcrumb Filtering in Kotlin
DESCRIPTION: Shows how to initialize Sentry SDK with a custom breadcrumb filter that excludes logs from a specific category. The code filters out breadcrumbs from 'a.spammy.Logger' while allowing all other breadcrumbs to pass through.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry

Sentry.init { options ->
  options.beforeBreadcrumb = { breadcrumb ->
    if ("a.spammy.Logger" == breadcrumb.category) {
      null
    } else {
      breadcrumb
    }
  }
}

----------------------------------------

TITLE: Configuring Raven Context in Node.js
DESCRIPTION: Shows how to set up Raven configuration and wrap code in a context for automatic error reporting. Essential setup for using Raven in a Node.js application.

LANGUAGE: javascript
CODE:
var Raven = require("raven");

Raven.config("___PUBLIC_DSN___").install();
Raven.context(function () {
  // all your stuff goes here
});

----------------------------------------

TITLE: Customizing Sentry Error Handling for RPC Exceptions in Java
DESCRIPTION: This snippet defines a custom MyRpcException class and configures Sentry to handle these exceptions with custom fingerprints. It uses the Sentry.init() method to set up a beforeSend callback that modifies the event fingerprints for MyRpcException instances.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import java.util.Arrays;
import java.lang.Exception;

class MyRpcException extends Exception {
  private final String function;
  private final int httpStatusCode;

  public MyRpcException(String function, int httpStatusCode) {
    this.function = function;
    this.httpStatusCode = httpStatusCode;
  }

  public String getFunction() {
    return function;
  }

  public int getHttpStatusCode() {
    return httpStatusCode;
  }
}

Sentry.init(options -> {
  options.setBeforeSend((event, hint) -> {
    if (event.getThrowable() instanceof MyRpcException) {
      MyRpcException exception = (MyRpcException) event.getThrowable();
      event.setFingerprints(
          Arrays.asList(
              "{{ default }}",
              exception.getFunction(),
              String.valueOf(exception.getHttpStatusCode())
          ));
    }
    return event;
  });
});

----------------------------------------

TITLE: Initializing Sentry with React Native Navigation Instrumentation
DESCRIPTION: This snippet demonstrates how to initialize Sentry SDK with React Native Navigation instrumentation. It imports necessary modules and sets up the integration with basic configuration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";
import { Navigation } from 'react-native-navigation';

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactNativeNavigationIntegration({
      navigation: Navigation,
    }),
  ],
})

----------------------------------------

TITLE: Configuring Sentry in ASP.NET Core 3.0
DESCRIPTION: Shows the configuration of Sentry options in ASP.NET Core 3.0 using the Generic Host builder pattern. Configures the same options as 2.x but with updated hosting model.

LANGUAGE: csharp
CODE:
public static IHostBuilder CreateHostBuilder(string[] args) =>
    Host.CreateDefaultBuilder(args)
        .ConfigureWebHostDefaults(webBuilder =>
        {
            // Add the following line:
            webBuilder.UseSentry(o =>
            {
                o.Dsn = "___PUBLIC_DSN___";
                o.MaxBreadcrumbs = 50;
                o.Debug = true;
            });
        });

----------------------------------------

TITLE: Verifying Sentry Integration with Test Error
DESCRIPTION: Example code that creates an intentional divide-by-zero error to verify Sentry is capturing errors correctly

LANGUAGE: python
CODE:
from django.urls import path

def trigger_error(request):
    division_by_zero = 1 / 0

urlpatterns = [
    path('sentry-debug/', trigger_error),
    # ...
]

----------------------------------------

TITLE: Android Gradle Sentry Configuration
DESCRIPTION: Gradle configuration for enabling Sentry integration in Android projects with customizable options.

LANGUAGE: groovy
CODE:
project.ext.sentryCli = [
    logLevel: "debug",
    sentryProperties: "path/to/sentry.properties",
    flavorAware: false,
    modulesPaths: [
      "node_modules",
      "../node_modules",
    ],
    skipCollectModules: false,
    collectModulesScript: "path/to/node_modules/@sentry/react-native/dist/js/tools/collectModules.js",
    copyDebugIdScript: "path/to/node_modules/@sentry/react-native/scripts/copy-debugid.js",
    hasSourceMapDebugIdScript: "path/to/node_modules/@sentry/react-native/scripts/has-sourcemap-debugid.js",
]

apply from: "../../node_modules/@sentry/react-native/sentry.gradle"

----------------------------------------

TITLE: Example of Absolute Source Map URL in JavaScript
DESCRIPTION: This example shows a source map directive using a fully qualified URL. This approach allows specifying an exact location for the source map.

LANGUAGE: javascript
CODE:
//# sourceMappingURL=http://example.org/js/app.js.map

----------------------------------------

TITLE: Implementing on_crash Callback in Sentry C SDK
DESCRIPTION: Demonstrates implementation of the on_crash callback for handling crash events specifically. This callback provides access to crash context and allows for crash-specific processing before sending events to Sentry.

LANGUAGE: c
CODE:
#include <sentry.h>

static sentry_value_t
crash_cleanup(
    const sentry_ucontext_t *uctx, // provides the user-space context of the crash
    sentry_value_t event,          // used the same way as in `before_send`
    void *closure                  // user-data that you can provide at configuration time
)
{
    // Do contextual clean-up before the crash is sent to sentry's backend infrastructure

    /* ... */

    // tell the backend to retain the event (+ dump)
    // or to discard it, you could free the event and return a `null`:
    //       sentry_value_decref(event);
    //       return sentry_value_new_null();
    return event;
}

int main(void) {
  sentry_options_t *options = sentry_options_new();
  sentry_options_set_on_crash(options, crash_cleanup, NULL);
  sentry_init(options);

  /* ... */
}

----------------------------------------

TITLE: Initializing Sentry with Session Replay in React Native
DESCRIPTION: JavaScript code to initialize Sentry with Session Replay integration in a React Native application. It sets up sample rates for session and error replays.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
  integrations: [Sentry.mobileReplayIntegration()],
});

----------------------------------------

TITLE: Creating AI Pipeline with Automatic Span Creation in Python
DESCRIPTION: This snippet demonstrates how to create an AI pipeline using Sentry's ai_track decorator and OpenAI's chat completions. It shows the automatic creation of spans for both the pipeline and its AI operations.

LANGUAGE: python
CODE:
from sentry_sdk.ai.monitoring import ai_track
from openai import OpenAI

sentry.init(...)

openai = OpenAI()

@ai_track("My AI pipeline")
def invoke_pipeline():
    result = openai.chat.completions.create(
        model="some-model", messages=[{"role": "system", "content": "hello"}]
    ).choices[0].message.content

    return openai.chat.completions.create(
        model="some-model", messages=[{"role": "system", "content": result}]
    ).choices[0].message.content

----------------------------------------

TITLE: Initializing Sentry SDK Configuration in Ruby
DESCRIPTION: Sets up the Sentry SDK with performance monitoring, breadcrumb logging, and profiling enabled. Configures the DSN, sampling rates, and PII data collection settings.

LANGUAGE: ruby
CODE:
require 'sentry-ruby'

Sentry.init do |config|
  config.dsn = '___PUBLIC_DSN___'

  # get breadcrumbs from logs
  config.breadcrumbs_logger = [:sentry_logger, :http_logger]

  # Add data like request headers and IP for users, if applicable;
  # see https://docs.sentry.io/platforms/ruby/data-management/data-collected/ for more info
  config.send_default_pii = true

  # enable tracing
  # we recommend adjusting this value in production
  config.traces_sample_rate = 1.0

  # enable profiling
  # this is relative to traces_sample_rate
  config.profiles_sample_rate = 1.0
end

----------------------------------------

TITLE: Initializing Sentry with HTTP Client via NPM
DESCRIPTION: Sets up Sentry monitoring with HTTP client integration using NPM package. Enables capturing of headers and cookies through sendDefaultPii option.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.httpClientIntegration()]

  // This option is required for capturing headers and cookies.
  sendDefaultPii: true,
});

----------------------------------------

TITLE: Excluding Sentry Android NDK Dependency in Gradle (Groovy)
DESCRIPTION: This snippet demonstrates how to exclude the sentry-android-ndk dependency from app configurations in the app/build.gradle file using Groovy syntax.

LANGUAGE: groovy
CODE:
configurations.configureEach {
  exclude group: "io.sentry", module: "sentry-android-ndk"
}

----------------------------------------

TITLE: Implementing Custom Traces Sampler Callback in Kotlin
DESCRIPTION: This Kotlin code snippet shows how to create a custom TracesSamplerCallback component to dynamically determine the sampling rate for Sentry transactions. It allows for context-based sampling decisions using information from the HTTP request.

LANGUAGE: kotlin
CODE:
import io.sentry.SentryOptions.TracesSamplerCallback
import io.sentry.SamplingContext
import org.springframework.stereotype.Component

@Component
class CustomTracesSamplerCallback : TracesSamplerCallback {
  override fun sample(context: SamplingContext): Double? {
    val customSamplingContext = context.customSamplingContext
    if (customSamplingContext != null) {
      val request = customSamplingContext["request"] as HttpServletRequest
      // return a number between 0 and 1 or null (to fallback to configured value)
    } else {
      // return a number between 0 and 1 or null (to fallback to configured value)
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry with OpenFeature SDK - Track All Evaluations
DESCRIPTION: Sets up Sentry with OpenFeature SDK to track feature flag evaluations across all clients. Demonstrates initialization of both services, provider setup, and hook registration at the global level.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solid';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
OpenFeature.addHooks(new Sentry.OpenFeatureIntegrationHook());

const client = OpenFeature.getClient();
const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Customizing Error Events with BeforeSendCallback
DESCRIPTION: Implement a BeforeSendCallback to customize or drop error events before they are sent to Sentry.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.BeforeSendCallback
import io.sentry.TypeCheckHint.OKHTTP_REQUEST
import io.sentry.TypeCheckHint.OKHTTP_RESPONSE
import okhttp3.Request
import okhttp3.Response

SentryAndroid.init(this) { options ->
  options.beforeSend = BeforeSendCallback { event, hint ->
    val request = hint.getAs(OKHTTP_REQUEST, Request::class.java)
    val response = hint.getAs(OKHTTP_RESPONSE, Response::class.java)

    // customize or drop the event
    event
  }
}

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;
import io.sentry.TypeCheckHint.OKHTTP_REQUEST;
import io.sentry.TypeCheckHint.OKHTTP_RESPONSE;
import okhttp3.Request;
import okhttp3.Response;

SentryAndroid.init(this, (options) -> {
  options.setBeforeSend((event, hint) -> {
    Request request = hint.getAs(OKHTTP_REQUEST, Request.class);
    Response response = hint.getAs(OKHTTP_RESPONSE, Response.class);

    // customize or drop the event
    return event;
  });
});

----------------------------------------

TITLE: Initializing Sentry with Custom Event Processing in Dart for Flutter
DESCRIPTION: This snippet shows how to initialize SentryFlutter with a custom beforeSend callback. It specifically handles DatabaseException errors by assigning a custom fingerprint to the event.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.beforeSend = (event, hint) {
    if (event.throwable is DatabaseException) {
      event = event.copyWith(fingerprint: ['database-connection-error']);
    }
    return event;
  };
});

----------------------------------------

TITLE: Initializing Sentry with Deferred Replay Integration in Electron
DESCRIPTION: First initializes Sentry with empty integrations, then dynamically imports and adds the Replay integration from @sentry/electron/renderer. This pattern is useful for optimizing initial load time and managing Electron-specific functionality.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Note, Replay is NOT instantiated below:
  integrations: [],
});

// Sometime later
import("@sentry/electron/renderer").then(lazyLoadedSentry => {
  Sentry.addIntegration(lazyLoadedSentry.replayIntegration());
});

----------------------------------------

TITLE: Installing Sentry SDK Package with OpenTelemetry Integration
DESCRIPTION: Command to install or upgrade Sentry SDK with OpenTelemetry support using pip. Requires opentelemetry-distro version 0.350b0 or higher as a prerequisite.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[opentelemetry]'

----------------------------------------

TITLE: Configuring esbuild with Sentry Plugin
DESCRIPTION: Example configuration for esbuild with the Sentry plugin, including source map generation and plugin options.

LANGUAGE: javascript
CODE:
const { sentryEsbuildPlugin } = require("@sentry/esbuild-plugin");

require("esbuild").build({
  sourcemap: true, // Source map generation must be turned on
  plugins: [
    // Put the Sentry esbuild plugin after all other plugins
    sentryEsbuildPlugin({
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",
      authToken: process.env.SENTRY_AUTH_TOKEN,
    }),
  ],
});

----------------------------------------

TITLE: Enabling Sentry Android Gradle Plugin in Expo Configuration
DESCRIPTION: Basic configuration to enable the Sentry Android Gradle Plugin in an Expo project's app configuration file. Requires specifying the Sentry URL, project, organization, and enabling the Android Gradle Plugin feature.

LANGUAGE: javascript
CODE:
{
  "expo": {
    "plugins": [
      [
        "@sentry/react-native/expo",
        {
          "url": "https://sentry.io/",
          "project": "___PROJECT_SLUG___",
          "organization": "___ORG_SLUG___"
          "experimental_android": {
            "enableAndroidGradlePlugin": true,
          }
        }
      ],
  }
}

----------------------------------------

TITLE: Setting User Information in Sentry SDK
DESCRIPTION: This snippet demonstrates how to set user information in the Sentry SDK. It includes the user's email and other arbitrary key/value pairs.

LANGUAGE: javascript
CODE:
Sentry.setUser({"email": "jane.doe@example.com"});

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter defining the page title and sidebar order for the custom instrumentation documentation.

LANGUAGE: markdown
CODE:
---
title: Custom Instrumentation
sidebar_order: 40
---

----------------------------------------

TITLE: Implementing Sentry Transaction Monitoring in C
DESCRIPTION: Shows how to initialize Sentry with tracing enabled, create transactions for code instrumentation, and manage child spans. Demonstrates setting sample rate, creating transaction contexts, and proper span/transaction lifecycle management.

LANGUAGE: c
CODE:
// Enable tracing by setting a sample rate above 0
sentry_options_t *options = sentry_options_new();
sentry_options_set_traces_sample_rate(options, 0.2);
// ...
// (Configure tracing unrelated options as you see fit)
// ...
sentry_init(options);

// Transactions can be started by providing the name and the operation
sentry_transaction_context_t *tx_ctx = sentry_transaction_context_new(
    "transaction name",
    "transaction operation"
);
sentry_transaction_t *tx = sentry_transaction_start(tx_ctx, sentry_value_new_null());

// Transactions can have child spans (and those spans can have child spans as well)
sentry_span_t *span = sentry_transaction_start_child(
    tx,
    "child operation",
    "child description"
);

// ...
// (Perform the operation represented by the span/transaction)
// ...

sentry_span_finish(span); // Mark the span as finished
sentry_transaction_finish(tx); // Mark the transaction as finished and send it to Sentry

----------------------------------------

TITLE: Filtering Breadcrumbs in Kotlin
DESCRIPTION: Kotlin implementation of Sentry initialization with breadcrumb filtering, showing how to exclude specific logger categories from breadcrumb collection.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.BeforeBreadcrumbCallback

SentryAndroid.init(this) { options ->
  options.beforeBreadcrumb = BeforeBreadcrumbCallback { breadcrumb, hint ->
    if ("a.spammy.Logger" == breadcrumb.category) {
      null
    } else {
      breadcrumb
    }
  }
}

----------------------------------------

TITLE: Creating Isolation Scope in Python
DESCRIPTION: This snippet demonstrates how to create a new isolation scope in Python using Sentry SDK. It's useful for managing concurrency and ensuring that scope data doesn't leak between requests.

LANGUAGE: python
CODE:
with sentry_sdk.isolation_scope() as scope:
# In this block scope refers to a new fork of the original isolation scope,
# with the same client and the same initial scope data.

----------------------------------------

TITLE: Initializing Sentry in Node.js
DESCRIPTION: This code snippet initializes Sentry for a Node.js application. It imports the Sentry package, sets up the DSN (Data Source Name) for the project, and adds the contextLinesIntegration for enhanced error reporting.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.contextLinesIntegration()],
});

----------------------------------------

TITLE: Linking Errors to Sentry Transactions in Go
DESCRIPTION: Shows how to properly link errors to transactions by passing OpenTelemetry context through EventHint when capturing exceptions. This enables error-to-transaction correlation in the Sentry UI.

LANGUAGE: go
CODE:
hub := sentry.CurrentHub()
//// or:
// hub := sentry.GetHubFromContext(ctx)
client, scope := hub.Client(), hub.Scope()
client.CaptureException(
	errors.New("new error"),
	&sentry.EventHint{Context: ctx},
	scope,
)

----------------------------------------

TITLE: Using Multiple Sentry ErrorBoundaries with Tags
DESCRIPTION: This snippet demonstrates how to use multiple Sentry ErrorBoundaries in a React application. It uses the beforeCapture option to set tags for each ErrorBoundary, allowing for better error tracking.

LANGUAGE: javascript
CODE:
import React from "react";
import * as Sentry from "@sentry/react";

function App({ props }) {
  return (
    <React.Fragment>
      <Sentry.ErrorBoundary
        beforeCapture={(scope) => {
          scope.setTag("location", "first");
          scope.setTag("anotherTag", "anotherValue");
        }}
      >
        <Route to="path/to/first" component={First} />
      </Sentry.ErrorBoundary>
      <Sentry.ErrorBoundary
        beforeCapture={(scope) => {
          scope.setTag("location", "second");
        }}
      >
        <Route to="path/to/second" component={Second} />
      </Sentry.ErrorBoundary>
    </React.Fragment>
  );
}

export default App;

----------------------------------------

TITLE: Initializing Statsig with Sentry Integration in JavaScript
DESCRIPTION: Demonstrates how to set up Sentry with Statsig integration to track feature flags in error reporting. Includes initialization of both Statsig client and Sentry with proper configuration for feature flag tracking.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nuxt';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Installing Sentry Webpack Plugin
DESCRIPTION: Commands to install the Sentry webpack plugin using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/webpack-plugin --save-dev

LANGUAGE: bash
CODE:
yarn add @sentry/webpack-plugin --dev

LANGUAGE: bash
CODE:
pnpm add @sentry/webpack-plugin --save-dev

----------------------------------------

TITLE: Initializing Sentry with React Router v6 and createBrowserRouter
DESCRIPTION: This snippet demonstrates how to initialize Sentry with React Router v6 using createBrowserRouter. It includes setting up the necessary integrations and wrapping the router creation function.

LANGUAGE: javascript
CODE:
import React from "react";
import {
  createBrowserRouter,
  createRoutesFromChildren,
  matchRoutes,
  useLocation,
  useNavigationType,
} from "react-router-dom";

import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactRouterV6BrowserTracingIntegration({
      useEffect: React.useEffect,
      useLocation,
      useNavigationType,
      createRoutesFromChildren,
      matchRoutes,
    }),
  ],
  tracesSampleRate: 1.0,
});

const sentryCreateBrowserRouter =
  Sentry.wrapCreateBrowserRouterV6(createBrowserRouter);

const router = sentryCreateBrowserRouter([
  // your routes...
]);

----------------------------------------

TITLE: Initializing Sentry with OpenTelemetry for Console Applications in C#
DESCRIPTION: This code initializes Sentry and enables OpenTelemetry integration for a console application. It sets the traces sample rate and configures Sentry to use OpenTelemetry trace information.

LANGUAGE: csharp
CODE:
SentrySdk.Init(options =>
{
    // options.Dsn = "... Your DSN ...";
    options.TracesSampleRate = 1.0;
    options.UseOpenTelemetry(); // <-- Configure Sentry to use OpenTelemetry trace information
});

----------------------------------------

TITLE: Initializing Sentry with OpenFeature Integration (Track All Evals)
DESCRIPTION: This snippet shows how to initialize Sentry with the OpenFeature integration, set up the OpenFeature provider, and add hooks to track all feature flag evaluations. It also demonstrates how to use the OpenFeature client to evaluate a boolean feature flag.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/browser';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
OpenFeature.addHooks(new Sentry.OpenFeatureIntegrationHook());

const client = OpenFeature.getClient();
const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Configuring Vite with Sentry Plugin
DESCRIPTION: Example configuration for vite.config.js to enable source map generation and integrate the Sentry Vite plugin. Includes setting organization and project details, and using the auth token from environment variables.

LANGUAGE: javascript
CODE:
import { defineConfig } from "vite";
import { sentryVitePlugin } from "@sentry/vite-plugin";

export default defineConfig({
  build: {
    sourcemap: true, // Source map generation must be turned on
  },
  plugins: [
    // Put the Sentry vite plugin after all other plugins
    sentryVitePlugin({
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",
      authToken: process.env.SENTRY_AUTH_TOKEN,
    }),
  ],
});

----------------------------------------

TITLE: Tree Shaking Default Integrations with Custom Client
DESCRIPTION: Example of creating a custom BrowserClient to enable tree shaking of unused default integrations in the Sentry SDK.

LANGUAGE: javascript
CODE:
import {
  BrowserClient,
  breadcrumbsIntegration,
  dedupeIntegration,
  defaultStackParser,
  getCurrentScope,
  globalHandlersIntegration,
  makeFetchTransport,
  linkedErrorsIntegration,
} from "@sentry/browser";

const client = new BrowserClient({
  // all options you normally pass to Sentry.init
  dsn: "your DSN",
  // ...
  transport: makeFetchTransport,
  stackParser: defaultStackParser,
  // Only the integrations listed here will be used
  integrations: [
    breadcrumbsIntegration(),
    globalHandlersIntegration(),
    linkedErrorsIntegration(),
    dedupeIntegration(),
  ],
});

getCurrentScope().setClient(client);
client.init();

----------------------------------------

TITLE: Initializing Sentry with Feature Flags in TypeScript
DESCRIPTION: This snippet initializes Sentry with a public DSN and feature flag integration. It then attempts to add a feature flag and captures an exception. The code demonstrates error handling if the integration fails.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/remix';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Options in Kotlin
DESCRIPTION: Kotlin implementation of Sentry initialization with custom configuration including DSN setting, release version specification, and event filtering using beforeSend callback. Demonstrates functional programming approach to event filtering.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.BeforeSendCallback
import io.sentry.Hint

fun main() {
  Sentry.init { options ->
    // your Sentry project/dashboard
    options.dsn = "___PUBLIC_DSN___"
    options.release = "io.sentry.samples.console@3.0.0+1"
    options.beforeSend = BeforeSendCallback { event: SentryEvent, hint: Hint ->
      // Drop an event altogether:
      if (event.getTag("SomeTag") != null) {
        null
      } else {
        event
      }
    }
  }
}

----------------------------------------

TITLE: Setting Custom Page Locale Tag in Sentry Ruby
DESCRIPTION: Sets a custom tag for page locale in Sentry using the set_tags method. The tag 'page.locale' is set to 'de-at' which represents the German (Austria) locale. This helps in categorizing and filtering errors based on locale in the Sentry dashboard.

LANGUAGE: ruby
CODE:
Sentry.set_tags('page.locale': 'de-at')

----------------------------------------

TITLE: Using FileReader and FileWriter in Java
DESCRIPTION: This snippet demonstrates the standard way of reading from one file and writing to another using FileReader and FileWriter in Java. It reads the content in chunks using a character buffer.

LANGUAGE: java
CODE:
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;

File file1 = new File("file1.txt");
File file2 = new File("file2.txt");
try (FileReader reader = new FileReader(file1)) {
  char[] buffer = new char[1024];
  try (FileWriter writer = new FileWriter(file2, true)) {
    int read;
    while (true) {
      read = reader.read(buffer, 0, buffer.length);
      if (read == -1) {
        break;
      }
      writer.write(buffer, 0, buffer.length);
    }
    writer.flush();
  }
}

----------------------------------------

TITLE: Implementing TraceClass Decorator in Angular Component
DESCRIPTION: This code snippet demonstrates how to use the TraceClass decorator in an Angular component. The TraceClass decorator tracks the duration between OnInit and AfterViewInit lifecycle hooks, creating ui.angular.init spans for all instances of the component.

LANGUAGE: typescript
CODE:
import { Component } from "@angular/core";
import * as Sentry from "@sentry/angular";

@Component({
  selector: "app-header",
  templateUrl: "./header.component.html",
})
@Sentry.TraceClass({ name: "Header" })
export class HeaderComponent {
  // ...
}

----------------------------------------

TITLE: Initializing Sentry and Configuring Echo with Sentry Middleware
DESCRIPTION: This snippet demonstrates how to initialize Sentry, create an Echo app, and attach the Sentry middleware. It includes error monitoring and performance tracing configuration.

LANGUAGE: go
CODE:
import (
	"fmt"
	"net/http"

	"github.com/getsentry/sentry-go"
	sentryecho "github.com/getsentry/sentry-go/echo"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

// To initialize Sentry's handler, you need to initialize Sentry itself beforehand
if err := sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	// Set TracesSampleRate to 1.0 to capture 100%
	// of transactions for tracing.
	// We recommend adjusting this value in production,
	TracesSampleRate: 1.0,
}); err != nil {
	fmt.Printf("Sentry initialization failed: %v\n", err)
}

// Then create your app
app := echo.New()

app.Use(middleware.Logger())
app.Use(middleware.Recover())

// Once it's done, you can attach the handler as one of your middleware
app.Use(sentryecho.New(sentryecho.Options{}))

// Set up routes
app.GET("/", func(ctx echo.Context) error {
	return ctx.String(http.StatusOK, "Hello, World!")
})

// And run it
app.Logger.Fatal(app.Start(":3000"))

----------------------------------------

TITLE: Initializing Sentry with RewriteFrames Integration in JavaScript
DESCRIPTION: This snippet initializes Sentry with a public DSN and configures the rewriteFramesIntegration. It allows customization of stack trace frames by specifying root paths, prefixes, and custom iteratee functions.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/bun";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.rewriteFramesIntegration(
    {
      // root path that will be stripped from the current frame's filename by the default iteratee if the filename is an absolute path
      root: string;

      // a custom prefix that will be used by the default iteratee (default: `app://`)
      prefix: string;

      // function that takes the frame, applies a transformation, and returns it
      iteratee: (frame) => frame;
    }
  )],
});

----------------------------------------

TITLE: Configuring Mobile App Backend Tracing
DESCRIPTION: Setup for tracing requests across mobile app backend services, including main API server, media server, and local API endpoints.

LANGUAGE: javascript
CODE:
// sentry.client.config.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracePropagationTargets: [
    "https://api.myapp.com",
    "https://media.myapp.com",
    /^\/local-api\//
  ],
});

----------------------------------------

TITLE: Installing Sentry SDK for Next.js
DESCRIPTION: Commands to install the Sentry SDK using npm, yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
npm install @sentry/nextjs --save

LANGUAGE: bash
CODE:
yarn add @sentry/nextjs

LANGUAGE: bash
CODE:
pnpm add @sentry/nextjs

----------------------------------------

TITLE: Manually Starting Replay Session in JavaScript
DESCRIPTION: This snippet shows how to manually start a Replay session, either in 'session' or 'buffer' mode, regardless of sample rates.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "...",
  // This initializes Replay without starting any session
  replaysSessionSampleRate: 0,
  replaysOnErrorSampleRate: 0,
  integrations: [Sentry.replayIntegration()],
});

// You can access the active replay instance from anywhere in your code like this:
const replay = Sentry.getReplay();

// This starts in `session` mode, regardless of sample rates
replay.start();

// OR

// This starts in `buffer` mode, regardless of sample rates
replay.startBuffering();

----------------------------------------

TITLE: Installing Sentry Android Gradle Plugin and SDK in Groovy
DESCRIPTION: Add the Sentry Android Gradle plugin and Sentry Android SDK to your project's build.gradle file using Groovy syntax.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.android.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

dependencies {
  implementation 'io.sentry:sentry-android:{{@inject packages.version('sentry.java.android', '5.0.0') }}'
}

----------------------------------------

TITLE: Custom Fetch Transport Implementation
DESCRIPTION: Example implementation of a custom transport using the Fetch API. Demonstrates how to create a transport using the createTransport utility from @sentry/core and configure it in Sentry initialization.

LANGUAGE: javascript
CODE:
import { createTransport } from '@sentry/core';
import * from '@sentry/browser';

function makeFetchTransport(
  options
): Transport {
  function makeRequest(request) {
    const requestOptions: RequestInit = {
      body: request.body,
      method: 'POST',
      referrerPolicy: 'origin',
      headers: options.headers,
      ...options.fetchOptions,
    };

    return fetch(options.url, requestOptions).then(response => {
      return {
        statusCode: response.status,
        headers: {
          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),
          'retry-after': response.headers.get('Retry-After'),
        },
      };
    });
  }

  return createTransport(options, makeRequest);
}

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  transport: makeFetchTransport
});

----------------------------------------

TITLE: Initializing Sentry with Sync AWS Lambda Handler
DESCRIPTION: This snippet demonstrates how to initialize Sentry with performance monitoring and profiling for a synchronous AWS Lambda handler. It sets up the Sentry SDK, configures sampling rates, and wraps the Lambda handler function.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/aws-serverless");
const { nodeProfilingIntegration } = require("@sentry/profiling-node");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    nodeProfilingIntegration(),
  ],

  // Add Performance Monitoring by setting tracesSampleRate
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
});

exports.handler = Sentry.wrapHandler((event, context, callback) => {
  // Your handler code
});

----------------------------------------

TITLE: Adding HTTP Request Span to Sentry Transaction in Python
DESCRIPTION: This code snippet demonstrates how to add a span for an HTTP request to an existing Sentry transaction. It uses the 'start_span' context manager to create a span, sets tags and data on the span, and automatically finishes it when the context block ends.

LANGUAGE: python
CODE:
import sentry_sdk

def process_item(item):
    # omitted code...
    with sentry_sdk.start_span(op="http", name="GET /") as span:
        response = my_custom_http_library.request("GET", "/")
        span.set_tag("http.status_code", response.status_code)
        span.set_data("http.foobarsessionid", get_foobar_sessionid())

----------------------------------------

TITLE: Setting User Data in Sentry SDK
DESCRIPTION: This code snippet demonstrates how to set user data in the Sentry SDK. It includes various user attributes such as id, username, email, and IP address.

LANGUAGE: javascript
CODE:
Sentry.setUser({"id": "12345",
  "email": "jane.doe@example.com",
  "username": "Jane",
  "ip_address": "{{auto}}", // Let Sentry infer the IP address
  "subscription": "basic"});

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Error Handling in Java
DESCRIPTION: This snippet shows how to initialize the Sentry SDK in a Java Android application. It sets up a custom BeforeSend callback to handle SQLiteExceptions by assigning a specific fingerprint.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;
import android.database.sqlite.SQLiteException;
import java.util.Arrays;

SentryAndroid.init(this, options -> {
  options.setBeforeSend((event, hint) -> {
    if (event.getThrowable() instanceof SQLiteException) {
      event.setFingerprints(Arrays.asList("database-connection-error"));
    }
    return event;
  });
});

----------------------------------------

TITLE: Basic Error Capturing with Sentry in React
DESCRIPTION: Demonstrates the basic pattern for capturing exceptions using Sentry's captureException method within a try-catch block. This approach is used for synchronous error handling.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Implementing Component Tracking with withProfiler in React Native
DESCRIPTION: This snippet demonstrates how to use the withProfiler higher-order component from Sentry to instrument a React Native app component. It wraps the main App component with withProfiler to enable performance monitoring.

LANGUAGE: javascript
CODE:
import React from "react";
import * as Sentry from "@sentry/react-native";

class App extends React.Component {
  render() {
    return (
      <FancyComponent>
        <NestedComponent someProp={2} />
        <AnotherComponent />
      </FancyComponent>
    );
  }
}

export default Sentry.withProfiler(App);

----------------------------------------

TITLE: Initializing Sentry with NodeFetch Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the NodeFetch integration. It captures spans and breadcrumbs for fetch requests in Node.js and Bun environments.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  integrations: [Sentry.nativeNodeFetchIntegration()],
});

----------------------------------------

TITLE: Implementing Custom Event Processor in C#
DESCRIPTION: This snippet shows how to create a custom event processor by implementing the ISentryEventProcessor interface. The Process method allows modification or filtering of Sentry events before they are sent.

LANGUAGE: csharp
CODE:
using Sentry.Extensibility;

public class CustomEventProcessor : ISentryEventProcessor
{
    public SentryEvent? Process(SentryEvent @event)
    {
        // Add anything to the event here
        // returning `null` will drop the event
        return @event;
    }
}

----------------------------------------

TITLE: Initializing Sentry Configuration in Ruby
DESCRIPTION: This code initializes Sentry with a custom configuration. It sets the DSN (Data Source Name) and configures trace propagation targets using both strings and regular expressions. This setup allows for selective tracing across different domains or services.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  config.dsn = '___PUBLIC_DSN___'

  # takes strings and regexes
  config.trace_propagation_targets = ['myproject.org', /.*\.otherservice.org\/.*/]

  # ...
end

----------------------------------------

TITLE: Setting Custom Context in Sentry Scope - Kotlin Multiplatform
DESCRIPTION: Configures Sentry scope by adding custom context fields for character attributes including name, age, and attack type. Uses the configureScope DSL to set multiple context values that will be included with any error reports.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry

Sentry.configureScope { scope ->
  scope.setContext("name", "Mighty Fighter")
  scope.setContext("age", 19)
  scope.setContext("attack_type", "melee")
}

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration in JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry with Unleash integration for feature flag management. It sets up Sentry with a DSN and configures the Unleash client for feature flag evaluation.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/gatsby';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Custom Sentry SDK Configuration
DESCRIPTION: Define a window.sentryOnLoad function before adding the Loader Script to customize the SDK initialization. This allows you to add custom configuration options.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({
      // add custom config here
    });
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Initializing Sentry with OnUnhandledRejection Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to explicitly initialize Sentry with the OnUnhandledRejection integration. This integration is enabled by default, so this code is only necessary if you're modifying the default integrations.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.onUnhandledRejectionIntegration()],
});

----------------------------------------

TITLE: Filtering Breadcrumbs in C# Sentry SDK
DESCRIPTION: Implementation of breadcrumb filtering using C# lambda expression to ignore breadcrumbs from 'Spammy.Logger' category during SDK initialization. Returns null for filtered breadcrumbs and passes through others unchanged.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.SetBeforeBreadcrumb(breadcrumb
    // Ignore breadcrumbs from Spammy logger
    => breadcrumb.Category == "Spammy.Logger"
        ? null
        : breadcrumb);

----------------------------------------

TITLE: Before Send Hook Configuration in Sentry
DESCRIPTION: Shows the implementation of the beforeSend hook to filter sensitive data before events are sent to Sentry.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="configuration/before-send/" />

----------------------------------------

TITLE: Capturing Exceptions with Sentry in SolidStart
DESCRIPTION: Shows how to import Sentry and use try-catch block to capture exceptions. The captureException() method can handle Error objects as well as non-Error objects and strings, though the latter may result in events without stack traces.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/solidstart";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Configuring SentryTracingFilter for Spring 5 in Java
DESCRIPTION: This snippet shows how to configure SentryTracingFilter for automatic trace sending in a Spring 5 application using Java. It extends AbstractAnnotationConfigDispatcherServletInitializer and overrides the getServletFilters method to include SentryTracingFilter.

LANGUAGE: java
CODE:
import io.sentry.spring.tracing.SentryTracingFilter;
import javax.servlet.Filter;
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

public class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {
  // ...
  @Override
  protected Filter[] getServletFilters() {
    return new Filter[] {new SentryTracingFilter()};
  }
}

----------------------------------------

TITLE: Disabling Source Context in Sentry Python SDK
DESCRIPTION: Configuration to disable sending source code context around error locations to Sentry.

LANGUAGE: python
CODE:
sentry_sdk.init(include_source_context=False)

----------------------------------------

TITLE: Configuring SentryQueryExecutor for Drift Database in Dart
DESCRIPTION: Inject SentryQueryExecutor into a Drift database instance to enable Sentry instrumentation. This setup allows tracking of database query performance.

LANGUAGE: dart
CODE:
import 'package:drift/native.dart';
import 'package:sentry_drift/sentry_drift.dart';

final executor = SentryQueryExecutor(
  () => NativeDatabase.memory(), // You can also provide your own database opener
  databaseName: 'my_db_name',
);
final database = AppDatabase(executor); // AppDatabase is an example of the auto-generated database class by Drift.

----------------------------------------

TITLE: Initializing Sentry SDK for WinUI Without Trimming
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK in a WinUI application without trimming enabled. It configures options such as DSN, debug mode, tracing, and global mode.

LANGUAGE: csharp
CODE:
using Sentry.Protocol;

sealed partial class App : Application
{
    public App()
    {
        // Initialize Sentry in the App constructor before any other code, to ensure you capture all possible exceptions.
        SentrySdk.Init(options =>
        {
            // Tells which project in Sentry to send events to:
            options.Dsn = "___PUBLIC_DSN___";

            // When configuring for the first time, to see what the SDK is doing:
            options.Debug = true;

            // Set TracesSampleRate to 1.0 to capture 100% of transactions for tracing.
            // We recommend adjusting this value in production.
            options.TracesSampleRate = 1.0;

            // Enable Global Mode since this is a client app.
            options.IsGlobalModeEnabled = true;

            // TODO:Any other Sentry options you need go here.
        });

        // Initialize the app component, and hook the Suspending event.
        this.InitializeComponent();

        // Add any other code you may need last.
    }
}

----------------------------------------

TITLE: Enabling Continuous Profiling in Sentry SDK for Python
DESCRIPTION: This code shows how to enable continuous profiling in the Sentry SDK. It sets up the SDK with a profile session sample rate and demonstrates starting and stopping the profiler manually.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    send_default_pii=True,
    traces_sample_rate=1.0,

    # To collect profiles for all profile sessions, set `profile_session_sample_rate` to 1.0.
    profile_session_sample_rate=1.0,
)

sentry_sdk.profiler.start_profiler()

# run some code here

sentry_sdk.profiler.stop_profiler()

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Svelte TypeScript
DESCRIPTION: Demonstrates how to catch and report errors to Sentry using the captureException() method. This example shows a try-catch block that captures any errors thrown by aFunctionThatMightFail() and reports them to Sentry for monitoring. The code accepts both Error objects and other types, though Error objects provide more complete stack traces.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/svelte";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Initializing Sentry Subsystem
DESCRIPTION: Retrieves the Sentry subsystem from the engine and initializes it with the configured settings delegate.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->InitializeWithSettings(SettingsDelegate);

----------------------------------------

TITLE: Capturing Exceptions with Sentry in SvelteKit JavaScript
DESCRIPTION: This code snippet demonstrates how to import Sentry and use its captureException() function to capture errors within a try-catch block. It's designed to work with SvelteKit projects.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Configuring Sentry Vite Plugin for React Component Annotation
DESCRIPTION: Shows how to configure the Sentry Vite plugin to enable React component name capturing and ignore specific components.

LANGUAGE: javascript
CODE:
sentryVitePlugin({
  // ... other options above
    reactComponentAnnotation: {
      enabled: true,
      // you can ignore components from being annotated with this option
      ignoredComponents: ["MyComponentThatShouldNotBeAnnotated"]
    }
}),

----------------------------------------

TITLE: Installing Sentry SDK with Chalice Support
DESCRIPTION: Command to install sentry-sdk package with Chalice integration support using pip

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk[chalice]

----------------------------------------

TITLE: Configuring Sentry Before Send Callback in Symfony YAML
DESCRIPTION: YAML configuration for registering a before_send callback service in Symfony. Defines the service and its factory method for event modification.

LANGUAGE: yaml
CODE:
sentry:
    options:
        before_send: 'sentry.callback.before_send'

services:
    sentry.callback.before_send:
        class: 'App\Service\Sentry'
        factory: [ '@App\Service\Sentry', 'getBeforeSend' ]

----------------------------------------

TITLE: Setting Custom Measurements with Sentry JavaScript SDK
DESCRIPTION: Demonstrates how to record different types of measurements using Sentry's setMeasurement method. Shows examples for tracking memory usage in bytes, UI component render time in seconds, and counting localStorage reads. Requires Sentry JavaScript SDK version 7.0.0 or higher.

LANGUAGE: javascript
CODE:
// Record amount of memory used
Sentry.setMeasurement("memoryUsed", 123, "byte");

// Record time when Footer component renders on page
Sentry.setMeasurement("ui.footerComponent.render", 1.3, "second");

// Record amount of times localStorage was read
Sentry.setMeasurement("localStorageRead", 4);

----------------------------------------

TITLE: Creating Custom Transaction in Sentry for Java
DESCRIPTION: This snippet demonstrates how to create a custom transaction in Sentry for Java. It captures an expensive operation, handles exceptions, sets transaction status, and ensures the transaction is finished.

LANGUAGE: java
CODE:
import io.sentry.ITransaction;
import io.sentry.Sentry;
import io.sentry.SpanStatus;

// A good name for the transaction is key, to help identify what this is about
ITransaction transaction = Sentry.startTransaction("processOrderBatch()", "task");
try {
  processOrderBatch();
} catch (Exception e) {
  transaction.setThrowable(e);
  transaction.setStatus(SpanStatus.INTERNAL_ERROR);
  throw e;
} finally {
  transaction.finish();
}

----------------------------------------

TITLE: Configuring NGINX Reverse Proxy for Sentry
DESCRIPTION: NGINX configuration for Sentry with SSL/TLS termination, HTTP to HTTPS redirection, and proxy buffering settings. Includes modern SSL configuration based on Mozilla guidelines.

LANGUAGE: nginx
CODE:
error_log /var/log/nginx/error.log warn;

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_certificate /etc/letsencrypt/live/sentry.yourcompany.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/sentry.yourcompany.com/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_session_tickets off;

    ssl_dhparam /etc/letsencrypt/ffdhe2048.txt;

    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers off;

    proxy_buffering on;
    proxy_buffer_size    128k;
    proxy_buffers        4 256k;

    location / {
        include proxy_params;
        proxy_pass http://your-sentry-ip:9000;
    }
}

server {
    server_name sentry.yourcompany.com;
    listen 80;
    listen [::]:80;

    root /var/www/html;
    location /.well-known/ {
        try_files $uri =404;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}

----------------------------------------

TITLE: Installing Sentry AWS Lambda SDK with Profiling
DESCRIPTION: Commands for installing @sentry/aws-serverless SDK with profiling support using different package managers.

LANGUAGE: bash
CODE:
npm install @sentry/aws-serverless @sentry/profiling-node

LANGUAGE: bash
CODE:
yarn add @sentry/aws-serverless @sentry/profiling-node

LANGUAGE: bash
CODE:
pnpm add @sentry/aws-serverless @sentry/profiling-node

----------------------------------------

TITLE: Initializing Sentry SDK for WinUI With Trimming
DESCRIPTION: This code snippet shows how to initialize the Sentry SDK in a WinUI application with trimming enabled. It includes SDK initialization, configuration of options, and setting up an UnhandledException handler.

LANGUAGE: csharp
CODE:
// Add these to your existing using statements.
using Sentry.Protocol;
using UnhandledExceptionEventArgs = Microsoft.UI.Xaml.UnhandledExceptionEventArgs;

sealed partial class App : Application
{
    public App()
    {
        // Initialize Sentry in the App constructor before any other code, to ensure you capture all possible exceptions.
        SentrySdk.Init(o =>
        {
            // Tells which project in Sentry to send events to:
            o.Dsn = "___PUBLIC_DSN___";

            // When configuring for the first time, to see what the SDK is doing:
            o.Debug = true;

            // Set TracesSampleRate to 1.0 to capture 100% of transactions for tracing.
            // We recommend adjusting this value in production.
            o.TracesSampleRate = 1.0;

            // Enable Global Mode since this is a client app.
            o.IsGlobalModeEnabled = true;

            // Disable Sentry's built in UnhandledException handler as this won't work with AOT compilation
            o.DisableWinUiUnhandledExceptionIntegration();

            // TODO:Any other Sentry options you need go here.
        });

        // Hook up the WinUI UnhandledException event before initializing the app component.
        this.UnhandledException += OnUnhandledException;

        // Initialize the app component, and hook the Suspending event.
        this.InitializeComponent();

        // Add any other code you may need last.
    }

    // Add this OnUnhandledException handler.

    // Use this attribute to ensure all types of exceptions are handled.
    [SecurityCritical]
    private void OnUnhandledException(object sender, UnhandledExceptionEventArgs e)
    {
        // Get a reference to the exception, because the Exception property is cleared when accessed.
        var exception = e.Exception;
        if (exception != null)
        {
            // Tell Sentry this was an unhandled exception
            exception.Data[Mechanism.HandledKey] = false;
            exception.Data[Mechanism.MechanismKey] = "Application.UnhandledException";

            // Capture the exception
            SentrySdk.CaptureException(exception);

            // Flush the event immediately
            SentrySdk.FlushAsync(TimeSpan.FromSeconds(2)).GetAwaiter().GetResult();
        }
    }
}

----------------------------------------

TITLE: Initializing Sentry with Statsig Integration in JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry with the Statsig integration for feature flag tracking. It includes creating a Statsig client, configuring Sentry with the integration, and checking a feature gate. The code also demonstrates capturing an exception with Sentry.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/react';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Implementing Fallback Function with Reset Capability in React Native
DESCRIPTION: Shows how to use a fallback function with render props to create a more interactive error UI. It includes a reset button that allows users to attempt recovery from the error state.

LANGUAGE: javascript
CODE:
import React from "react";
import { Button, Text } from "react-native"
import * as Sentry from "@sentry/react-native";

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: "This is my app",
    };
  }

  render() {
    return (
      <Sentry.ErrorBoundary
        fallback={({ error, componentStack, resetError }) => (
          <React.Fragment>
            <Text>You have encountered an error</Text>
            <Text>{error.toString()}</Text>
            <Text>{componentStack}</Text>
            <Button
              title="Click here to reset!"
              onPress={() => {
                this.setState({ message: "This is my app" });
                // When resetError() is called it will
                // remove the Fallback component and render
                // the Sentry ErrorBoundary's children
                // in their initial state
                resetError();
              }}
            />
          </React.Fragment>
        )}
      >
        <Text>{this.state.message}</Text>
        {/* on click, this button sets an Object */}
        {/* as a message, not a string. Which will cause */}
        {/* an error to occur in the component tree */}
        <Button
          title="Click here to change message!"
          onPress={() => this.setState({ message: { text: "Hello World" } })}
        />
      </Sentry.ErrorBoundary>
    );
  }
}

export default MyComponent;

----------------------------------------

TITLE: Verifying Sentry Dart SDK Integration with Test Error
DESCRIPTION: This snippet demonstrates how to verify the Sentry Dart SDK integration by intentionally throwing an error and capturing it. It shows the process of catching an exception and sending it to Sentry.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

try {
  throw StateError('Sentry Test Error');
} catch (exception, stackTrace) {
  await Sentry.captureException(
    exception,
    stackTrace: stackTrace,
  );
}

----------------------------------------

TITLE: Initializing Sentry with Custom Trace Sampling in Java
DESCRIPTION: This snippet shows how to initialize Sentry in Java, set the DSN, and configure a custom trace sampler. The sampler applies different sampling rates based on the request URL and context, allowing for fine-grained control over which transactions are traced.

LANGUAGE: java
CODE:
import io.sentry.CustomSamplingContext;
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setDsn("___PUBLIC_DSN___");
  // To set a uniform sample rate
  options.setTracesSampleRate(1.0);
  // OR: Determine traces sample rate based on the sampling context
  options.setTracesSampler(context -> {
    CustomSamplingContext ctx = context.getCustomSamplingContext();
    if (ctx != null) {
      // If this is the continuation of a trace, just use that decision (rate controlled by the caller).
      Boolean parentSampled = context.getTransactionContext().getParentSampled();
      if (parentSampled != null) {
        return parentSampled ? 1.0 : 0.0;
      }
      if ("/payment".equals(ctx.get("url"))) {
        // These are important - take a big sample
        return 0.5;
      } else if ("/search".equals(ctx.get("url"))) {
        // Search is less important and happen much more frequently - only take 1%
        return 0.01;
      } else if ("/health".equals(ctx.get("url"))) {
        // The health check endpoint is just noise - drop all transactions
        return 0.0;
      } else {
        // Default sample rate
        return null;
      }
    } else {
      return null;
    }
  });
});

----------------------------------------

TITLE: Initializing Sentry with Custom Error Fingerprinting in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with a custom beforeSend function. It checks for a specific error message related to database unavailability and assigns a custom fingerprint to the event if found.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  beforeSend(event, hint) {
    const error = hint.originalException;
    if (
      error &&
      error.message &&
      error.message.match(/database unavailable/i)
    ) {
      event.fingerprint = ["database-unavailable"];
    }
    return event;
  },
});

----------------------------------------

TITLE: Installing Sentry Android SQLite Integration Manually
DESCRIPTION: Add the Sentry Android SDK and SQLite integration dependencies to your project's build.gradle file for manual installation.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-android:{{@inject packages.version('sentry.java.android', '6.21.0') }}'
implementation 'io.sentry:sentry-android-sqlite:{{@inject packages.version('sentry.java.android.sqlite', '6.21.0') }}'

----------------------------------------

TITLE: Enabling Auto-Session Tracking in Android Manifest
DESCRIPTION: Enables automatic session tracking using a meta-data tag in the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<application>
  <meta-data android:name="io.sentry.auto-session-tracking.enable" android:value="true" />
</application>

----------------------------------------

TITLE: Setting Custom Sampling Context in Sentry Transaction
DESCRIPTION: Demonstrates how to add custom data to the sampling context when creating a transaction, useful for including data that shouldn't be attached as tags or is sensitive.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="performance/custom-sampling-context" />

----------------------------------------

TITLE: Setting User Information in Sentry SDK - Objective-C
DESCRIPTION: Shows how to create and configure a user object with email information using the Sentry SDK in Objective-C. The SDK must be initialized before setting the user information.

LANGUAGE: objective-c
CODE:
@import Sentry;

SentryUser *user = [[SentryUser alloc] init];
user.email = @"john.doe@example.com";
// Start the SDK before setting the user, otherwise it will be ignored.
[SentrySDK setUser:user];

----------------------------------------

TITLE: Adding Breadcrumb to Sentry in Swift
DESCRIPTION: This snippet demonstrates how to create and add a breadcrumb to Sentry using Swift. It sets the level, category, and message for the breadcrumb, including dynamic content from a user object.

LANGUAGE: Swift
CODE:
import Sentry

let crumb = Breadcrumb()
crumb.level = SentryLevel.info
crumb.category = "auth"
crumb.message = "Authenticated user \(user.email)"
SentrySDK.addBreadcrumb(crumb: crumb)

----------------------------------------

TITLE: Configuring Specific Lifecycle Hooks for Vue Component Tracking
DESCRIPTION: This code shows how to configure Sentry to track specific lifecycle hooks for Vue components. It allows tracking of 'mount', 'update', and 'unmount' hooks.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/vue";

Sentry.init({
  integrations: [
    Sentry.vueIntegration({
      tracingOptions: {
        trackComponents: true
        hooks: ["mount", "update", "unmount"],
      },
    }),
  ],
});

----------------------------------------

TITLE: Including Sentry Scripts via CDN in HTML
DESCRIPTION: This HTML snippet demonstrates how to include the necessary Sentry script tags for bundle with replay, error, tracing, and the new canvas replay integration via CDN. It includes integrity checks and crossorigin attributes for security.

LANGUAGE: html
CODE:
<!-- Existing script tag for bundle with replay, error, and tracing -->
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.replay.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.replay.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<!-- New script tag for the canvas replay integration -->
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/replay-canvas.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'replay-canvas.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Configuring CORS Headers for Sentry in Backend Response
DESCRIPTION: Example of how to set the Access-Control-Allow-Headers in the backend response to allow Sentry's performance monitoring headers. This configuration is crucial when the frontend and backend are on different domains.

LANGUAGE: http
CODE:
"Access-Control-Allow-Headers: sentry-trace, baggage"

----------------------------------------

TITLE: Verifying Sentry SDK Initialization in Celery
DESCRIPTION: Provides a code snippet to verify that the Sentry SDK is properly initialized in Celery worker processes. Includes an intentional error to test error capturing.

LANGUAGE: python
CODE:
from celery import Celery, signals
import sentry_sdk

app = Celery("tasks", broker="...")

@signals.celeryd_init.connect
def init_sentry(**_kwargs):
    sentry_sdk.init(...)  # same as above

@app.task
def debug_sentry():
    1/0

----------------------------------------

TITLE: Configuring Sentry Service in Symfony YAML
DESCRIPTION: YAML configuration that sets up the before_send callback service for Sentry error handling in Symfony. Defines the service class and factory method for preprocessing events.

LANGUAGE: yaml
CODE:
sentry:
    options:
        before_send: 'sentry.callback.before_send'

services:
    sentry.callback.before_send:
        class: 'App\Service\Sentry'
        factory: [ '@App\Service\Sentry', 'getBeforeSend' ]

----------------------------------------

TITLE: Installing Sentry AWS Serverless with Profiling Support
DESCRIPTION: Commands to install both @sentry/aws-serverless and @sentry/profiling-node packages for enhanced profiling capabilities using different Node.js package managers.

LANGUAGE: bash
CODE:
npm install @sentry/aws-serverless @sentry/profiling-node --save

LANGUAGE: bash
CODE:
yarn add @sentry/aws-serverless @sentry/profiling-node

LANGUAGE: bash
CODE:
pnpm add @sentry/aws-serverless @sentry/profiling-node

----------------------------------------

TITLE: Implementing BeforeSendTransactionCallback in Java for Sentry
DESCRIPTION: This snippet shows how to create a Spring bean that implements the BeforeSendTransactionCallback interface in Java. It demonstrates how to modify or drop transactions based on specific conditions before they are sent to Sentry.

LANGUAGE: java
CODE:
import io.sentry.SentryTransaction;
import io.sentry.SentryOptions;
import io.sentry.Hint
import org.springframework.stereotype.Component;

@Component
public class CustomBeforeSendTransactionCallback implements SentryOptions.BeforeSendTransactionCallback {
  @Override
  public SentryTransaction execute(SentryTransaction transaction, Hint hint) {
    // Modify or drop the transaction here:
    if ("/unimportant/route".equals(transaction.getTransaction())) {
      // Don't send the transaction to Sentry
      return null;
    } else {
      return transaction;
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry with Negroni Middleware
DESCRIPTION: Basic setup of Sentry with Negroni including performance monitoring configuration. Demonstrates initialization of Sentry client and integration with Negroni middleware.

LANGUAGE: go
CODE:
import (
	"fmt"
	"net/http"

	"github.com/getsentry/sentry-go"
	sentrynegroni "github.com/getsentry/sentry-go/negroni"
	"github.com/urfave/negroni"
)

// To initialize Sentry's handler, you need to initialize Sentry itself beforehand
if err := sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	EnableTracing: true,
	// Set TracesSampleRate to 1.0 to capture 100%
	// of transactions for tracing.
	// We recommend adjusting this value in production,
	TracesSampleRate: 1.0,
}); err != nil {
	fmt.Printf("Sentry initialization failed: %v\n", err)
}

// Then create your app
app := negroni.Classic()

// Once it's done, you can attach the handler as one of your middleware
app.Use(sentrynegroni.New(sentrynegroni.Options{}))

// Set up routes
mux := http.NewServeMux()

mux.HandleFunc("/", func(rw http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello world!")
})

app.UseHandler(mux)

// And run it
http.ListenAndServe(":3000", app)

----------------------------------------

TITLE: Configuring Sentry OpenTelemetry Integration in Go
DESCRIPTION: Demonstrates how to initialize Sentry with OpenTelemetry by registering the SentrySpanProcessor and SentryPropagator. Sets up trace provider configuration and enables tracing with sample rate.

LANGUAGE: go
CODE:
import (
	"go.opentelemetry.io/otel"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"

	"github.com/getsentry/sentry-go"
	sentryotel "github.com/getsentry/sentry-go/otel"
	// ...
)

sentry.Init(sentry.ClientOptions{
	Dsn:              "___PUBLIC_DSN___",
	EnableTracing:    true,
	TracesSampleRate: 1.0,
	Debug:            true,
})

tp := sdktrace.NewTracerProvider(
	sdktrace.WithSpanProcessor(sentryotel.NewSentrySpanProcessor()),
)
otel.SetTracerProvider(tp)
otel.SetTextMapPropagator(sentryotel.NewSentryPropagator())

----------------------------------------

TITLE: Setting Character Context in Sentry
DESCRIPTION: Sets additional context information in Sentry by adding character details including name, age, and attack type. This helps with error tracking by providing relevant game character state during error reporting.

LANGUAGE: javascript
CODE:
Sentry.setContext("character", {
  name: "Mighty Fighter",
  age: 19,
  attack_type: "melee",
});

----------------------------------------

TITLE: Creating Nested Spans in Transactions with Kotlin
DESCRIPTION: This snippet shows how to create a transaction, add nested spans, and handle exceptions in Kotlin using Sentry. It demonstrates starting a transaction, passing it to a function, creating child spans, and properly finishing both spans and transactions.

LANGUAGE: kotlin
CODE:
import java.io.FileNotFoundException

import io.sentry.Sentry
import io.sentry.SpanStatus

val transaction = Sentry.startTransaction("processOrderBatch()", "task")
try {
  processOrderBatch(transaction)
} catch (e: Exception) {
  transaction.throwable = e
  transaction.status = SpanStatus.INTERNAL_ERROR
  throw e
} finally {
  transaction.finish()
}

fun processOrderBatch(span: ISpan) {
  // span operation: task, span description: operation
  val innerSpan = it.startChild("task", "operation")

  try {
    // omitted code
  } catch (e: FileNotFoundException) {
    innerSpan.throwable = e
    innerSpan.status = SpanStatus.NOT_FOUND
    throw e
  } finally {
    innerSpan.finish()
  }
}

----------------------------------------

TITLE: Setting Custom Context in Sentry Scope - Ruby
DESCRIPTION: Shows how to add custom contextual data to a Sentry scope using the configure_scope method. The example sets character-related information including name, age, and attack type which will be included with any error reports sent to Sentry.

LANGUAGE: ruby
CODE:
Sentry.configure_scope do |scope|
  scope.set_context(
    'character',
    {
      name: 'Mighty Fighter',
      age: 19,
      attack_type: 'melee'
    }
  )
end

----------------------------------------

TITLE: Creating a Test Button for Error Monitoring
DESCRIPTION: Adds a button to trigger a test error for verifying Sentry's error capture functionality.

LANGUAGE: TypeScript
CODE:
<button
  type="button"
  onClick={() => {
    throw new Error("Sentry Test Error");
  }}
>
  Break the world
</button>

----------------------------------------

TITLE: Configuring Sentry Redux Store Enhancement
DESCRIPTION: Shows how to create and apply a Sentry Redux enhancer to monitor state changes and actions. Includes examples for both modern configureStore and legacy createStore Redux APIs. The enhancer allows Sentry to track Redux state changes for error monitoring.

LANGUAGE: javascript
CODE:
import { configureStore, createStore, compose } from "redux";
import * as Sentry from "@sentry/react";

// ...

const sentryReduxEnhancer = Sentry.createReduxEnhancer({
  // Optionally pass options listed below
});

// If you are using the `configureStore` API, pass the enhancer as follows:
const store = configureStore({
  reducer,
  enhancers: (getDefaultEnhancers) => {
    return getDefaultEnhancers().concat(sentryReduxEnhancer);
  },
});

// If you are using the deprecated `createStore` API, pass the enhancer as follows:
const store = createStore(reducer, sentryReduxEnhancer);

----------------------------------------

TITLE: Instrumenting Next.js Server Actions
DESCRIPTION: Demonstrates how to wrap Next.js Server Actions with Sentry instrumentation.

LANGUAGE: TypeScript
CODE:
import * as Sentry from "@sentry/nextjs";
import { headers } from "next/headers";

export default function ServerComponent() {
  async function myServerAction(formData: FormData) {
    "use server";
    return await Sentry.withServerActionInstrumentation(
      "myServerAction", // The name you want to associate this Server Action with in Sentry
      {
        formData, // Optionally pass in the form data
        headers: headers(), // Optionally pass in headers
        recordResponse: true, // Optionally record the server action response
      },
      async () => {
        // ... Your Server Action code

        return { name: "John Doe" };
      }
    );
  }

  return (
    <form action={myServerAction}>
      <input type="text" name="some-input-value" />
      <button type="submit">Run Action</button>
    </form>
  );
}

----------------------------------------

TITLE: Initializing Sentry SDK in Python with Performance and Profiling
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in Python, enabling error monitoring, performance tracking, and profiling. It includes options for sending default PII data and setting sample rates for traces and profiles.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

----------------------------------------

TITLE: Initializing Sentry SDK in Python with Performance and Profiling
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in Python, enabling error monitoring, performance tracking, and profiling. It includes options for sending default PII data and setting sample rates for traces and profiles.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

----------------------------------------

TITLE: Configuring Logger in Ruby Sentry SDK
DESCRIPTION: This snippet demonstrates how to configure the logger used by Sentry, setting it to output to STDOUT and changing the log level to DEBUG.

LANGUAGE: ruby
CODE:
config.logger = Sentry::Logger.new(STDOUT)
config.logger.level = ::Logger::DEBUG # defaults to INFO

----------------------------------------

TITLE: Initializing Sentry with Amqplib Integration
DESCRIPTION: Demonstrates how to initialize Sentry with the Amqplib integration. This integration enables automatic instrumentation of amqplib operations for performance monitoring. Requires Sentry SDK version 8.32.0 or higher and works with amqplib versions >=0.5.5 <1.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [new Sentry.amqplibIntegration()],
});

----------------------------------------

TITLE: Initializing Sentry with Panic Capture in Rust
DESCRIPTION: Sets up Sentry error tracking in a Rust application and demonstrates error capture by triggering a panic. The code initializes Sentry with a public DSN and creates a panic that will be automatically captured by Sentry's error monitoring system.

LANGUAGE: rust
CODE:
fn main() {
    let _guard = sentry::init("___PUBLIC_DSN___");

    // Sentry will capture this
    panic!("Everything is on fire!");
}

----------------------------------------

TITLE: Configuring Sentry SDK for Serverless Functions in Python
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK for use in serverless functions, including options for performance monitoring and profiling. It also shows how to apply the serverless_function decorator to functions that might throw errors.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.serverless import serverless_function

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

@serverless_function
def my_function(...): ...

----------------------------------------

TITLE: Disabling Automatic Unhandled Exception Capture in C# and F#
DESCRIPTION: This code snippet demonstrates how to disable the automatic capture of unhandled exceptions in Sentry SDK initialization for both C# and F#. It uses the DisableAppDomainUnhandledExceptionCapture() method.

LANGUAGE: csharp
CODE:
// Add it to your Sentry SDK initialization block:
options.DisableAppDomainUnhandledExceptionCapture()

LANGUAGE: fsharp
CODE:
// Add it to your Sentry SDK initialization block:
options.DisableAppDomainUnhandledExceptionCapture()

----------------------------------------

TITLE: Customizing Sentry Error Handler
DESCRIPTION: Example of customizing the Sentry error handler middleware with custom error filtering logic.

LANGUAGE: javascript
CODE:
app.use(
  Sentry.Handlers.errorHandler({
    shouldHandleError(error) {
      // Capture all 404 and 500 errors
      if (error.status === 404 || error.status === 500) {
        return true;
      }
      return false;
    },
  })
);

----------------------------------------

TITLE: Configuring Metrics Settings
DESCRIPTION: This section covers how to configure basic metric settings in your JavaScript application.



----------------------------------------

TITLE: Removing OpenTelemetry Instrumentation from Sentry Server Configuration
DESCRIPTION: This code shows how to remove the OpenTelemetry instrumentation configuration from the Sentry server initialization in Next.js. The 'instrumenter: 'otel'' option is no longer required and should be removed.

LANGUAGE: JavaScript
CODE:
import * as Sentry from '@sentry/nextjs';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
-  instrumenter: 'otel',
});


----------------------------------------

TITLE: Configuring Monolog with Sentry PHP SDK
DESCRIPTION: This code shows how to set up Monolog with Sentry integration using both BreadcrumbHandler and Handler classes. It includes initialization of the Sentry SDK, creation of a Monolog logger instance, and configuration of handlers for different logging levels. The example also demonstrates logging errors and exceptions.

LANGUAGE: php
CODE:
<?php

use Monolog\Level;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;

// Setup the Sentry SDK, this can also be done elsewhere in your application
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___'
]);

// Create a Monolog channel with a breadcrumb handler and a Sentry handler
$log = new Logger('sentry');
$log->pushHandler(new \Sentry\Monolog\BreadcrumbHandler(
    hub: \Sentry\SentrySdk::getCurrentHub(),
    level: Level::Info, // Take note of the level here, messages with that level or higher will be attached to future Sentry events as breadcrumbs
));
$log->pushHandler(new \Sentry\Monolog\Handler(
    hub: \Sentry\SentrySdk::getCurrentHub(),
    level: Level::Error, // Take note of the level here, messages with that level or higher will be sent to Sentry
    bubble: true,
    fillExtraContext: false, // Will add a `monolog.context` & `monolog.extra`, key to the event with the Monolog `context` & `extra` values
));

// Log an error:
$log->error('Something bad happened');

// To log an exception you can use the following code:
try {
    throw new RuntimeException('Some exception');
} catch (RuntimeException $exception) {
    $log->error('Some exception happened', ['exception' => $exception]);
}

----------------------------------------

TITLE: Initializing Sentry with React Router v7 Browser Tracing Integration
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the React Router v7 browser tracing integration and wrap the createBrowserRouter function for instrumentation.

LANGUAGE: javascript
CODE:
import React from "react";
import {
  createBrowserRouter,
  createRoutesFromChildren,
  matchRoutes,
  useLocation,
  useNavigationType,
} from "react-router";

import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactRouterV7BrowserTracingIntegration({
      useEffect: React.useEffect,
      useLocation,
      useNavigationType,
      createRoutesFromChildren,
      matchRoutes,
    }),
  ],
  tracesSampleRate: 1.0,
});

const sentryCreateBrowserRouter =
  Sentry.wrapCreateBrowserRouterV7(createBrowserRouter);

const router = sentryCreateBrowserRouter([
  // your routes...
]);

----------------------------------------

TITLE: Initializing Sentry SDK in Objective-C
DESCRIPTION: This snippet shows how to initialize the Sentry SDK in Objective-C. It sets the DSN and configures a beforeSend callback to modify or discard events before they are sent.

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.beforeSend = ^SentryEvent * _Nullable(SentryEvent * _Nonnull event) {
        // modify event here or return nil to discard the event
        return event;
    }
}];

----------------------------------------

TITLE: Disabling UIViewController Tracing in Swift
DESCRIPTION: Configure the Sentry SDK to disable automatic UIViewController tracing functionality.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.enableUIViewControllerTracing = false

    // Before 8.0.0
    options.enableUIViewControllerTracking = false
}

----------------------------------------

TITLE: Updating BrowserTracing Integration in CDN Environment
DESCRIPTION: This snippet illustrates how to update the BrowserTracing integration when using Sentry via CDN. It replaces the class-based integration with a function-based integration in the Sentry.init call.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
+  integrations: [new Sentry.BrowserTracing()],
+  integrations: [Sentry.browserTracingIntegration()],
});

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Event Processing in Python
DESCRIPTION: This code demonstrates how to initialize the Sentry SDK with a custom before_send function. The function modifies the event fingerprint for DatabaseUnavailable exceptions, allowing for better grouping of these errors in Sentry.

LANGUAGE: python
CODE:
import sentry_sdk

def before_send(event, hint):
    if 'exc_info' in hint:
        exc_type, exc_value, tb = hint['exc_info']
        if isinstance(exc_value, DatabaseUnavailable):
            event['fingerprint'] = ['database-unavailable']
    return event

sentry_sdk.init(
    # ...

    before_send=before_send,
)

----------------------------------------

TITLE: Verifying Sentry SDK Integration in Spring
DESCRIPTION: This code snippet demonstrates how to manually capture an error in a Spring application to verify that Sentry SDK is properly configured and working. It intentionally throws an exception to test error reporting.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

try {
  throw new Exception("This is a test.");
} catch (Exception e) {
  Sentry.captureException(e);
}

----------------------------------------

TITLE: Initializing Sentry Client with Event Modification
DESCRIPTION: Initializes Sentry client with a custom before_send callback that removes server name from events before they are sent. Uses Arc for thread-safe closure handling and demonstrates event modification capabilities.

LANGUAGE: rust
CODE:
sentry::init(sentry::ClientOptions {
    before_send: Some(Arc::new(|mut event| {
        // Modify event here
        event.server_name = None;  // Don't send server name
        Some(event)
    })),
    ..Default::default()
});

----------------------------------------

TITLE: Capturing Zero Division Exception with Sentry in Ruby
DESCRIPTION: Example of using a begin-rescue block to catch a ZeroDivisionError and report it to Sentry. This code intentionally triggers a division by zero error and captures it using Sentry's exception reporting functionality.

LANGUAGE: ruby
CODE:
begin
  1 / 0
rescue ZeroDivisionError => exception
  Sentry.capture_exception(exception)
end

----------------------------------------

TITLE: Implementing Trace Headers in HTML
DESCRIPTION: HTML template showing how to include Sentry trace headers as meta tags for connecting backend and frontend transactions during pageload.

LANGUAGE: html
CODE:
<html>
  <head>
    <meta name="sentry-trace" content="{{ span.toTraceparent() }}" />
    <meta name="baggage" content="{{ serializeBaggage(span.getBaggage()) }}" />
    <!-- ... -->
  </head>
</html>

----------------------------------------

TITLE: Initializing Sentry for Google Cloud HTTP Functions in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry for Google Cloud HTTP functions. It includes setting up performance monitoring and profiling, and wrapping the HTTP function with Sentry error tracking.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/google-cloud-serverless");
const { nodeProfilingIntegration } = require("@sentry/profiling-node");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    nodeProfilingIntegration(),
  ],

  // Add Performance Monitoring by setting tracesSampleRate
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
});

exports.helloHttp = Sentry.wrapHttpFunction((req, res) => {
  throw new Error("oh, hello there!");
});

----------------------------------------

TITLE: Capturing Error Message with Sentry in F#
DESCRIPTION: Sends a simple error message to Sentry using the F# SDK. Uses the CaptureMessage method to log a string message for monitoring and debugging purposes.

LANGUAGE: fsharp
CODE:
SentrySdk.CaptureMessage("Something went wrong")

----------------------------------------

TITLE: Initializing Sentry with Custom Fingerprinting in Java
DESCRIPTION: Sets up Sentry error tracking in a Java Android application with custom fingerprinting for SQLiteException errors. Uses the beforeSend callback to modify event fingerprints when database connection errors occur.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;
import android.database.sqlite.SQLiteException;
import java.util.Arrays;

SentryAndroid.init(this, options -> {
  options.setBeforeSend((event, hint) -> {
    if (event.getThrowable() instanceof SQLiteException) {
      event.setFingerprints(Arrays.asList("database-connection-error"));
    }
    return event;
  });
});

----------------------------------------

TITLE: Configuring SentryExceptionResolver Order
DESCRIPTION: Demonstrates how to configure the exception resolver order to maintain previous behavior for error handling in Spring applications.

LANGUAGE: java
CODE:
@EnableSentry(exceptionResolverOrder = -2147483648)
class CustomConfiguration {
  ...
}

----------------------------------------

TITLE: Linking Sentry Errors with Transaction Spans in Rust
DESCRIPTION: Demonstrates how to create a transaction, bind it to the scope, and capture an error that will be automatically linked to the transaction. The example shows the creation of a transaction context, starting a transaction, configuring the scope, and capturing an error.

LANGUAGE: rust
CODE:
let tx_ctx = sentry::TransactionContext::new(
    "checkout",
    "perform-checkout",
);
let transaction = sentry::start_transaction(tx_ctx);

// Bind the transaction / span to the scope:
sentry::configure_scope(|scope| scope.set_span(Some(transaction.into())));

// The error is linked to the transaction / span:
let err = "NaN".parse::<usize>().unwrap_err();
sentry::capture_error(&err);

transaction.finish();

----------------------------------------

TITLE: Configuring Sentry Environment in Properties File
DESCRIPTION: This snippet shows how to set the Sentry environment to 'production' in a .properties file. It uses the key-value pair format typical of .properties files.

LANGUAGE: properties
CODE:
sentry.environment=production

----------------------------------------

TITLE: Configuring Sentry with Custom Fingerprinting in Kotlin
DESCRIPTION: Initializes Sentry using Kotlin syntax with a beforeSend callback that adds a custom fingerprint for SQLException events. Provides the same functionality as the Java version but with Kotlin-specific syntax.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.BeforeSendCallback

Sentry.init { options ->
  options.beforeSend = BeforeSendCallback { event, hint ->
    if (event.throwable is SQLException) {
      event.fingerprints = listOf("database-connection-error")
    }
    event
  }
}

----------------------------------------

TITLE: Stripping Debug Information in ELF Files
DESCRIPTION: Commands for separating debug information from an ELF binary into a separate debug file while maintaining debug link information.

LANGUAGE: bash
CODE:
# There is an executable called "binary" in the CWD
objcopy --only-keep-debug binary binary.debug
objcopy --strip-debug --strip-unneeded binary
objcopy --add-gnu-debuglink=binary.debug binary

----------------------------------------

TITLE: Combining Multiple Sentry Tracing Methods in Angular Component
DESCRIPTION: This code demonstrates how to combine TraceClass and TraceMethod decorators in an Angular component. It allows tracking of component initialization durations and specific lifecycle events like changes and destruction.

LANGUAGE: typescript
CODE:
import { Component, OnInit } from "@angular/core";
import * as Sentry from "@sentry/angular";

@Component({
  selector: "app-user-card",
  templateUrl: "./user-card.component.html",
})
@Sentry.TraceClass()
export class UserCardComponent implements OnChanges, OnDestroy {
  @Sentry.TraceMethod()
  ngOnChanges(changes: SimpleChanges) {}

  @Sentry.TraceMethod()
  ngOnDestroy() {}
}

----------------------------------------

TITLE: Configuring Sentry Error Fingerprinting for Database Errors
DESCRIPTION: Initializes Sentry with a beforeSend hook that assigns a custom fingerprint to database unavailability errors. This helps group similar database errors together in the Sentry dashboard for better error tracking and analysis.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  beforeSend(event, hint) {
    const error = hint.originalException;
    if (
      error &&
      error.message &&
      error.message.match(/database unavailable/i)
    ) {
      event.fingerprint = ["database-unavailable"];
    }
    return event;
  },
});

----------------------------------------

TITLE: Using Sentry Isolation Scope for Error Tracking in JavaScript
DESCRIPTION: Demonstrates how to use Sentry's withIsolationScope to isolate user context and tags when capturing errors. Shows the difference between errors captured inside and outside the isolation scope.

LANGUAGE: javascript
CODE:
Sentry.withIsolationScope(function () {
  // This user & tag is set inside of this callback
  Sentry.setUser({ id: "123" });
  Sentry.setTag("my-tag", "my value");

  // will be tagged with my-tag="my value" & user
  Sentry.captureException(new Error("my error"));
});

// will not be tagged with my-tag & user
Sentry.captureException(new Error("my other error"));

----------------------------------------

TITLE: Configuring Sentry with Unleash Integration (Current)
DESCRIPTION: Sets up Sentry error tracking with Unleash feature flags using the current recommended configuration. Initializes both Sentry and Unleash clients, enables feature flag evaluation, and demonstrates error capturing.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/react';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Emitting a Counter Metric in Python with Sentry
DESCRIPTION: Demonstrates how to increment a counter metric for tracking button clicks. The example includes tagging the metric with browser and app version information.

LANGUAGE: python
CODE:
# Increment a counter by one for each button click.
sentry_sdk.metrics.incr(
	key="button_click",
	value=1,
	tags={
		"browser": "Firefox",
		"app_version": "1.0.0"
	}
)

----------------------------------------

TITLE: Initializing BrowserWindowSession Integration in Sentry for Electron
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the BrowserWindowSession integration in an Electron application. It captures sessions linked to BrowserWindow focus, enabling release health statistics.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserWindowSessionIntegration()],
});

----------------------------------------

TITLE: Retrieving and Creating Transactions and Spans in Sentry C#
DESCRIPTION: This snippet demonstrates how to retrieve an existing span or transaction using SentrySdk.GetSpan(). If no span exists, it creates a new transaction. If a span is found, it creates a child span. This allows for flexible transaction and span management in Sentry.

LANGUAGE: csharp
CODE:
var span = SentrySdk.GetSpan();

if (span == null)
{
    span = SentrySdk.StartTransaction("task", "op");
}
else
{
    span = span.StartChild("subtask");
}

----------------------------------------

TITLE: Configuring HTTP Status Code Range for Error Capture
DESCRIPTION: Demonstrates how to customize which HTTP status codes are captured as error events by setting the failedRequestStatusCodes option with a specific range.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    let httpStatusCodeRange = HttpStatusCodeRange(min: 400, max: 599)
    options.failedRequestStatusCodes = [ httpStatusCodeRange ]
}

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    SentryHttpStatusCodeRange *httpStatusCodeRange =
            [[SentryHttpStatusCodeRange alloc] initWithMin:400 max:599];
    options.failedRequestStatusCodes = @[ httpStatusCodeRange ];
}];

----------------------------------------

TITLE: Configuring Sentry in Electron Main Process
DESCRIPTION: Basic initialization of Sentry SDK in the Electron main process with DSN configuration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
});

----------------------------------------

TITLE: Configuring Custom Sessions for Sentry PreloadInjection in Electron
DESCRIPTION: This code snippet demonstrates how to initialize Sentry in an Electron application with custom session configurations. It uses the `getSessions` option to specify multiple sessions for preload script injection, including the default session and a custom persistent session.

LANGUAGE: javascript
CODE:
import { session } from "electron";
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  getSessions: () => [
    session.defaultSession,
    session.fromPartition("persist:my-session"),
  ],
});

----------------------------------------

TITLE: Configuring Sentry Replay Integration with Loader Script
DESCRIPTION: HTML snippet demonstrating how to configure Sentry Replay integration using the loader script. It includes setting custom sample rates and masking all text.

LANGUAGE: html
CODE:
<!--
Enable Replay under:
Settings -> Projects -> Client Keys (DSN)
And then press the Configure button.

This will initialize Replay with the default config:
* replaysSessionSampleRate: 0.1,
* replaysOnErrorSampleRate: 1
You can change it with:
-->
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({
      replaysSessionSampleRate: 0.5,
      integrations: [
        Sentry.replayIntegration({
          maskAllText: true,
        }),
      ],
    });
  };
</script>

----------------------------------------

TITLE: Initializing Sentry with Fastify (CommonJS)
DESCRIPTION: Sets up a Fastify server with Sentry error handling using CommonJS require syntax. Requires instrument module first, then initializes Fastify and configures Sentry error handler before starting the server on port 3030.

LANGUAGE: javascript
CODE:
// Require this first!
require("./instrument");

// Now require other modules
const Fastify = require("fastify");
const Sentry = require("@sentry/node");

const app = Fastify();

Sentry.setupFastifyErrorHandler(app);

// Add your routes, etc.

app.listen({ port: 3030 });

----------------------------------------

TITLE: Emitting a Set Metric in Flutter with Sentry
DESCRIPTION: This snippet demonstrates how to emit a set metric using Sentry in a Flutter application. It tracks unique user views on a specific page.

LANGUAGE: dart
CODE:
Sentry.metrics().set(
    'user_view', // key
    stringValue: 'jane',
    unit: CustomSentryMeasurementUnit('username'),
    tags: {'page': 'home'},
);

----------------------------------------

TITLE: Configuring Sentry Loader v7 with Reporting Observer
DESCRIPTION: Implements Sentry initialization using the v7 loader script with Reporting Observer integration. Uses a separate script load for the observer integration.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});

   if (Sentry.reportingObserverIntegration) {
      Sentry.addIntegration(Sentry.reportingObserverIntegration());
    }
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/reportingobserver.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'reportingobserver.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Setting Sentry Page Locale Tag
DESCRIPTION: Sets a custom tag in Sentry to track the page locale, which helps in error monitoring and filtering. This example sets the locale to Austrian German (de-at).

LANGUAGE: javascript
CODE:
Sentry.setTag("page_locale", "de-at");

----------------------------------------

TITLE: Initializing Sentry with Replay and Canvas Recording in JavaScript
DESCRIPTION: This snippet initializes Sentry with Replay and Canvas recording integrations. It sets the DSN, configures replay sampling rates, and adds the Replay and Canvas recording integrations. The Canvas recording integration is highlighted as a new addition.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/ember";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    // Keep the Replay integration as before
    Sentry.replayIntegration(),

    // The following is all you need to enable canvas recording with Replay
    Sentry.replayCanvasIntegration(),
  ],
});

----------------------------------------

TITLE: Capturing Sentry Event with User Feedback in C++
DESCRIPTION: Demonstrates creating a Sentry message event and capturing user feedback associated with that event. The code first creates an event with a message, captures it to get an event ID, then creates and submits user feedback linked to that event.

LANGUAGE: cpp
CODE:
#include <sentry.h>

sentry_value_t event = sentry_value_new_message_event(
    SENTRY_LEVEL_INFO, "my-logger", "Hello user feedback!");
sentry_uuid_t event_id = sentry_capture_event(event);

sentry_value_t user_feedback = sentry_value_new_user_feedback(
    &event_id, "Jane", "jane.doe@example.com", "Feedback message");
sentry_capture_user_feedback(user_feedback);

----------------------------------------

TITLE: Installing Sentry .NET SDK via .NET Core CLI
DESCRIPTION: Commands to install the basic Sentry package for error monitoring using the .NET Core CLI.

LANGUAGE: shell
CODE:
dotnet add package Sentry -v {{@inject packages.version('sentry.dotnet') }}

----------------------------------------

TITLE: Migrating Sentry Client-Side Integrations
DESCRIPTION: Lists the client-side integrations that have been moved from @sentry/integrations to @sentry/nextjs. These integrations are now implemented as functions rather than classes.

LANGUAGE: javascript
CODE:
import { httpClientIntegration, contextLinesIntegration, reportingObserverIntegration } from '@sentry/nextjs'

----------------------------------------

TITLE: Installing sentry-cli via Homebrew
DESCRIPTION: This command installs sentry-cli using Homebrew package manager on macOS.

LANGUAGE: bash
CODE:
brew install getsentry/tools/sentry-cli

----------------------------------------

TITLE: Initializing Sentry SDK in Remix (JavaScript)
DESCRIPTION: This code snippet demonstrates how to import and initialize the Sentry SDK in a client-side Remix application. It includes setting up the DSN and configuring the feedback integration with a system color scheme.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/remix";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.feedbackIntegration({
      // Additional SDK configuration goes in here, for example:
      colorScheme: "system",
    }),
  ],
});

----------------------------------------

TITLE: Package Dependencies Configuration for Nuxt
DESCRIPTION: Configuration overrides needed for Nuxt versions before 3.14.0 to ensure SDK compatibility.

LANGUAGE: json
CODE:
{
  "overrides": {
    "ofetch": "^1.4.0",
    "@vercel/nft": "^0.27.4"
  }
}

----------------------------------------

TITLE: Demonstrating View Hierarchy Mapping for React Native on Android
DESCRIPTION: This snippet illustrates how React Native components correspond to native Android components in the view hierarchy.

LANGUAGE: javascript
CODE:
                                 // com.android.internal.policy.DecorView
                                 // android.widget.LinearLayout
                                 // ...
                                 // com.facebook.react.ReactRootView
function MyComponent() {
  return (
    <View>                       // com.facebook.react.views.view.ReactViewGroup
      <Text>Hello World!</Text>  // com.facebook.react.views.text.ReactTextView
    </View>
  );
}
                                 // android.view.View - navigationBarBackground
                                 // android.view.View - statusBarBackground

----------------------------------------

TITLE: Initializing Sentry with Production Environment in PowerShell
DESCRIPTION: This snippet shows how to start Sentry and set its environment to 'production' using PowerShell. It utilizes the Start-Sentry cmdlet and sets the Environment property within a script block.

LANGUAGE: powershell
CODE:
Start-Sentry {
    $_.Environment = "production"
}

----------------------------------------

TITLE: Configuring Sentry Sample Rate in YAML
DESCRIPTION: This YAML snippet sets the Sentry configuration options, specifically defining the sample rate for error tracking. The sample rate is set to 0.25, meaning 25% of errors will be sampled and sent to Sentry.

LANGUAGE: yaml
CODE:
sentry:
    options:
        sample_rate: 0.25

----------------------------------------

TITLE: Disabling Session Tracking in Electron SDK for Sentry
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK for Electron while disabling the default MainProcessSession integration to prevent sending sessions. It filters out the MainProcessSession from the default integrations.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: (defaults) => defaults.filter((i) => i.name !== "MainProcessSession"),
});

----------------------------------------

TITLE: File I/O Instrumentation in Dart
DESCRIPTION: Sentry implementation for file operations that creates spans for various file I/O operations like copy, write, delete, open, read, and rename. It includes additional data like file size, path, and async status in the span data payload.



----------------------------------------

TITLE: Setting Extra Context Data in Sentry Scope
DESCRIPTION: Demonstrates how to add custom contextual data to Sentry's scope using SetExtra method. This example adds a character name as extra information that will be attached to any error events captured within this scope.

LANGUAGE: go
CODE:
sentry.ConfigureScope(func(scope *sentry.Scope) {
	scope.SetExtra("character.name", "Mighty Fighter")
})

----------------------------------------

TITLE: Emitting a Distribution Metric in Sentry
DESCRIPTION: This snippet shows how to emit a distribution metric. It records the duration of an image download with a custom unit and tag.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.metrics
    .distribution(key: "image_download_duration",
               value: 150.0,
               unit: MeasurementUnitDuration.millisecond,
               tags: ["screen": "login"]
    )

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK.metrics
    distributionWithKey: @"image_download_duration"
    value: 150.0
    unit: SentryMeasurementUnitDuration.millisecond
    tags: @{ @"screen" : @"login" }
];

----------------------------------------

TITLE: Configuring Metro for Sentry React Native
DESCRIPTION: Sets up the Metro bundler configuration to work with Sentry by adding the Sentry React Native Metro plugin to metro.config.js.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require("@react-native/metro-config");
const { withSentryConfig } = require('@sentry/react-native/metro');

const config = getDefaultConfig(__dirname);
module.exports = withSentryConfig(config);

----------------------------------------

TITLE: Initializing Sentry with Unleash Feature Flags (Current)
DESCRIPTION: Demonstrates how to initialize Sentry with Unleash feature flag integration using the current approach. Shows configuration of Unleash client, starting the client, and evaluating feature flags while capturing exceptions.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/browser';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Native Library Configuration for Android
DESCRIPTION: AndroidManifest.xml and gradle.properties configuration for native library extraction and pointer tagging.

LANGUAGE: xml
CODE:
<application
    android:allowNativeHeapPointerTagging="false"
    android:extractNativeLibs="true">
</application>

LANGUAGE: properties
CODE:
android.bundle.enableUncompressedNativeLibs=false

----------------------------------------

TITLE: Initializing Statsig with Sentry Integration in JavaScript
DESCRIPTION: Sets up Sentry error tracking with Statsig feature flag integration. Demonstrates initialization of both clients, checking a feature gate, and capturing an exception that will include feature flag data.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/gatsby';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Using tracesSampler for Transaction Filtering in JavaScript Sentry SDK
DESCRIPTION: Implement a tracesSampler function to filter out certain transactions or apply different sampling rates.

LANGUAGE: javascript
CODE:
Sentry.init({
  tracesSampler: (samplingContext) => {
    if (samplingContext.transactionContext.name === "health_check") {
      return 0;
    }
    return 0.1;
  },
});

----------------------------------------

TITLE: Setting Custom Sampling Context in Transaction Creation
DESCRIPTION: Shows how to add custom data to the sampling context when creating a transaction, useful for including additional information that shouldn't be attached as tags or transaction data.

LANGUAGE: javascript
CODE:
Sentry.startTransaction({
  name: "Example Transaction",
  op: "test"
}, // transaction properties
{ // custom sampling context
  item_id: "12345",
  item_quantity: 42,
  customer_id: "12345"
});

----------------------------------------

TITLE: Initializing Sentry Fastify Integration in Node.js
DESCRIPTION: Demonstrates how to initialize Sentry with the Fastify integration for performance monitoring. The integration uses @opentelemetry/instrumentation-fastify to capture spans and is enabled by default when performance monitoring is active.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [new Sentry.fastifyIntegration()],
});

----------------------------------------

TITLE: Declaring Sentry Dependencies in Maven Without Versions
DESCRIPTION: This snippet demonstrates how to declare Sentry dependencies in a Maven pom.xml file without specifying versions, relying on the BOM for version management.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry</artifactId>
</dependency>
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-logback</artifactId>
</dependency>

----------------------------------------

TITLE: URL Scrubbing in Session Replay
DESCRIPTION: Demonstrates how to implement URL scrubbing for both recording and replay events using event processors.

LANGUAGE: javascript
CODE:
Sentry.addEventProcessor((event) => {
  // Ensure that we specifically look at replay events
  if (event.type !== "replay_event") {
    // Return the event, otherwise the event will be dropped
    return event;
  }

  // Your URL scrubbing function
  function urlScrubber(url) {
    return url.replace(/([a-z0-9]{3}\.[a-z]{5}\.[a-z]{7})/, "[Filtered]");
  }

  // Scrub all URLs with your scrubbing function
  event.urls = event.urls && event.urls.map(urlScrubber);

  return event;
})

----------------------------------------

TITLE: Filtering Errors with ignoreErrors in JavaScript Sentry SDK
DESCRIPTION: Configure the SDK to ignore specific error patterns using strings or regular expressions.

LANGUAGE: javascript
CODE:
Sentry.init({
  ignoreErrors: [
    "top.GLOBALS",
    /^Script error\.?$/,
    /^Javascript error: Script error\.? on line 0$/,
  ],
});

----------------------------------------

TITLE: Configuring Room with Sentry in Java
DESCRIPTION: Configure a Room database to use SentrySupportSQLiteOpenHelper for instrumentation in Java.

LANGUAGE: java
CODE:
import androidx.room.Room;
import io.sentry.android.sqlite.SentrySupportSQLiteOpenHelper;

final MyDatabase database = Room.databaseBuilder(context, MyDatabase.class, "dbName")
    .openHelperFactory (configuration ->
        SentrySupportSQLiteOpenHelper.create(new FrameworkSQLiteOpenHelperFactory().create(configuration))
    )
    .build();

----------------------------------------

TITLE: Customizing Sentry Breadcrumbs with Before-Breadcrumb Hook
DESCRIPTION: Demonstrates how to use the beforeBreadcrumb hook to modify or filter breadcrumbs before they're recorded. The hook can modify the breadcrumb properties or return null to drop the breadcrumb entirely.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeBreadcrumb(breadcrumb, hint) {
    if (breadcrumb.category === "ui.click") {
      return null;
    }
    return breadcrumb;
  },
});

----------------------------------------

TITLE: Verifying Sentry Timber Integration in Java
DESCRIPTION: Test the Sentry Timber integration by capturing an intentional error in a Java Android activity.

LANGUAGE: java
CODE:
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import java.lang.Exception;
import timber.log.Timber;

public class MyActivity extends AppCompatActivity {
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    try {
      throw new Exception("This is a test.");
    } catch (Exception e) {
      Timber.e(e);
    }
  }
}

----------------------------------------

TITLE: Configuring Sentry SDK Exception Filter in Ruby
DESCRIPTION: Demonstrates how to initialize Sentry with a before_send lambda that filters out ZeroDivisionError exceptions. The callback checks the exception type and returns nil to skip reporting or the event object to allow reporting.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  # ...
  config.before_send = lambda do |event, hint|
    # skip ZeroDivisionError exceptions
    # note: hint[:exception] would be a String if you use async callback
    if hint[:exception].is_a?(ZeroDivisionError)
      nil
    else
      event
    end
  end
end

----------------------------------------

TITLE: Initializing Sentry with Custom Sample Rate in Ruby
DESCRIPTION: This code snippet initializes Sentry with a custom configuration. It sets the sample rate to 0.25, meaning that 25% of errors will be tracked and reported to Sentry.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  # ...
  config.sample_rate = 0.25
end

----------------------------------------

TITLE: Adding Custom Event Processor to Sentry Options in C#
DESCRIPTION: This code demonstrates how to add a custom event processor to the Sentry options. This ensures the processor runs on every event after initialization.

LANGUAGE: csharp
CODE:
options.AddEventProcessor(new CustomEventProcessor());

----------------------------------------

TITLE: Initializing Sentry in Cordova JavaScript
DESCRIPTION: This code initializes Sentry within the onDeviceReady function of a Cordova application. It requires the sentry-cordova plugin and uses a public DSN for configuration.

LANGUAGE: javascript
CODE:
onDeviceReady: function() {
  var Sentry = cordova.require("sentry-cordova.Sentry");
  Sentry.init({ dsn: '___PUBLIC_DSN___' });
}

----------------------------------------

TITLE: Configuring Sentry SDK for Client-side in SvelteKit
DESCRIPTION: Initializes the Sentry SDK on the client-side, sets up error handling, and configures Session Replay integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,

  // Optional: Initialize Session Replay:
  integrations: [Sentry.replayIntegration()],
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

const myErrorHandler = ({ error, event }) => {
  console.error("An error occurred on the client side:", error, event);
};

export const handleError = Sentry.handleErrorWithSentry(myErrorHandler);

// or alternatively, if you don't have a custom error handler:
// export const handleError = handleErrorWithSentry();

----------------------------------------

TITLE: Creating Shopping Cart Transaction with Sentry
DESCRIPTION: Example showing how to create a Sentry transaction for a shopping cart checkout process. Creates a parent span for the checkout operation and a child span for processing the cart results.

LANGUAGE: javascript
CODE:
function shopCheckout() {
  return Sentry.startSpan({ name: "shopCheckout" }, () => {
    // Assume this function makes a fetch call
    const result = validateShoppingCartOnServer();

    return Sentry.startSpan(
      {
        name: "processing shopping cart result",
        op: "task",
        attributes: {
          // you can add additional attributes, if needed
        },
      },
      () => {
        // `startSpan` will automatically mark the span as errored, if an exception is thrown
        // it will end the span when the callback is finished.
        return processAndValidateShoppingCart(result);
      }
    );
  });
}

----------------------------------------

TITLE: Emitting a Timer Metric in Flutter with Sentry
DESCRIPTION: This snippet demonstrates how to emit a timer metric using Sentry in a Flutter application. It measures the execution time of a specific block of code.

LANGUAGE: dart
CODE:
Sentry.metrics().timing('load_user_profile', function: () {
  //db.load(); ...
});

----------------------------------------

TITLE: Creating and Managing Sentry Transaction in Ruby
DESCRIPTION: Shows how to create a transaction, set it on the current scope, execute an operation, and finish the transaction. This pattern is useful for monitoring performance of expensive operations and sending the results to Sentry for analysis.

LANGUAGE: ruby
CODE:
# start a transaction
transaction = Sentry.start_transaction(op: "process_item")

# set the transaction on the scope so children span are attached to this transaction
Sentry.get_current_scope.set_span(transaction)

# perform the operation
process_item(args)


# finish the transaction, which will send it to Sentry automatically
transaction.finish

----------------------------------------

TITLE: Configuring Sentry with Entity Framework in ASP.NET Application
DESCRIPTION: Example configuration for integrating Sentry with Entity Framework in an ASP.NET application using global.asax. It initializes the Sentry SDK, adds Entity Framework support, and sets up error handling and transaction tracking.

LANGUAGE: csharp
CODE:
using System;
using System.Configuration;
using Sentry.AspNet;

public class MvcApplication : System.Web.HttpApplication
{
    private IDisposable _sentrySdk;

    protected void Application_Start()
    {
        _sentrySdk = SentrySdk.Init(options =>
        {
            // We store the DSN inside Web.config
            options.Dsn = ConfigurationManager.AppSettings["SentryDsn"];
            // Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
            // We recommend adjusting this value in production.
            options.TracesSampleRate = 1.0;
            // Add the EntityFramework integration
            options.AddEntityFramework();
        });
    }

    // Global error catcher
    protected void Application_Error() => Server.CaptureLastError();

    protected void Application_BeginRequest()
    {
        Context.StartSentryTransaction();
    }

    protected void Application_EndRequest()
    {
        Context.FinishSentryTransaction();
    }

    public override void Dispose()
    {
        _sentrySdk.Dispose();
        base.Dispose();
    }
}

----------------------------------------

TITLE: Initializing Sentry with Feature Flags Integration
DESCRIPTION: Shows how to initialize Sentry with feature flags integration, add a test flag, and capture an exception. Includes error handling for integration verification and demonstrates core Sentry functionality for error tracking.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/solid';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Managing Sentry Error Scope in JavaScript
DESCRIPTION: Shows how to use Sentry.withScope to create a temporary scope for error tracking. Demonstrates setting tags and error levels that apply only within the scope, and contrasts with unscoped error capture.

LANGUAGE: javascript
CODE:
Sentry.withScope(function (scope) {
  scope.setTag("my-tag", "my value");
  scope.setLevel("warning");
  // will be tagged with my-tag="my value"
  Sentry.captureException(new Error("my error"));
});

// will not be tagged with my-tag
Sentry.captureException(new Error("my other error"));

----------------------------------------

TITLE: Initializing Sentry SDK with Breadcrumb Filtering in Kotlin
DESCRIPTION: Shows how to initialize the Sentry Android SDK and configure a breadcrumb callback filter using Kotlin syntax. The callback uses Kotlin's type checking to filter breadcrumbs based on the hint type, returning null for MyHint instances and allowing other breadcrumbs.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.BeforeBreadcrumb

SentryAndroid.init(this) { options ->
  options.beforeBreadcrumb = BeforeBreadcrumbCallback { breadcrumb, hint ->
    if (hint is MyHint) {
      null
    } else {
      breadcrumb
    }
  }
}

----------------------------------------

TITLE: Configuring Sentry SDK with Profiling
DESCRIPTION: Configuration code for initializing Sentry SDK with profiling enabled. Sets up trace sampling rate and profile sampling rate, and adds the profiling integration with optional timeout settings.

LANGUAGE: csharp
CODE:
SentrySdk.Init(options =>
{
    // ... usual setup options omitted for clarity (see Getting Started) ...

    // Sample rate for your transactions, e.g. value 0.1 means we want to report 10% of transactions.
    // Setting 1.0 means all transactions are profiled.
    // We recommend adjusting this value in production.
    options.TracesSampleRate = 1.0;

    // Sample rate for profiling, applied on top of othe TracesSampleRate,
    // e.g. 0.2 means we want to profile 20 % of the captured transactions.
    // We recommend adjusting this value in production.
    options.ProfilesSampleRate = 1.0;

    // Attach the profiling integration.
    options.AddProfilingIntegration();

    // On Windows, Linux, and macOS, the profiler is initialized asynchronously by default.
    // Alternatively, you can switch to synchronous initialization by adding a timeout argument.
    // The SDK waits up to the specified timeout for the .NET runtime profiler to start up before continuing.
    // e.g. options.AddProfilingIntegration(TimeSpan.FromMilliseconds(500));
    // Note: the timeout has no effect on iOS and MacCatalyst, which use native profiling and always start synchronously.
});

----------------------------------------

TITLE: Configuring Docker Proxy Settings for Containers
DESCRIPTION: This JSON configuration sets up proxy settings for Docker containers, allowing them to access the internet through a corporate proxy while excluding internal services from proxying.

LANGUAGE: json
CODE:
{
  "proxies": {
    "httpProxy": "http://proxy:3128",
    "httpsProxy": "http://proxy:3128",
    "noProxy": "smtp,memcached,redis,postgres,kafka,clickhouse,snuba-api,symbolicator,web,worker,nginx,relay,vroom,172.17.0.0/16,127.0.0.0/8"
  }
}

----------------------------------------

TITLE: Initializing Sentry in VB.NET WinForms Application (Option 2)
DESCRIPTION: Alternative approach for initializing Sentry SDK in Visual Basic Windows Forms application using ApplicationEvents.vb. Maintains application framework functionality and handles application lifecycle events.

LANGUAGE: vb
CODE:
Imports Microsoft.VisualBasic.ApplicationServices
Imports Sentry
Imports Sentry.Protocol

Namespace My
    Partial Friend Class MyApplication

        Private _sentry As IDisposable

        Private Sub MyApplication_Startup(sender As Object, e As StartupEventArgs) Handles Me.Startup

            ' Configure the options for Sentry
            Dim sentryOptions = New SentryOptions With
            {
                .Dsn = "___PUBLIC_DSN___",

                ' Enable Global Mode since this is a client app
                .IsGlobalModeEnabled = True,

                ' any other options you need go here
            }

            ' Initialize Sentry
            _sentry = SentrySdk.Init(sentryOptions)

        End Sub

        Private Sub MyApplication_Shutdown(sender As Object, e As EventArgs) Handles Me.Shutdown

            ' Dispose the Sentry SDK to ensure events are flushed and sent to Sentry
            _sentry.Dispose()

        End Sub

        Private Sub MyApplication_UnhandledException(sender As Object, e As UnhandledExceptionEventArgs) Handles Me.UnhandledException

            ' Set some additional data on the exception for Sentry to recognize this exception as unhandled
            Dim ex = e.Exception
            ex.Data(Mechanism.HandledKey) = False
            ex.Data(Mechanism.MechanismKey) = "WindowsFormsApplicationBase.UnhandledException"

            ' Capture the exception with Sentry
            SentrySdk.CaptureException(ex)

        End Sub

    End Class
End Namespace

----------------------------------------

TITLE: Creating and Adding Sentry Breadcrumb in Java
DESCRIPTION: This snippet demonstrates how to create a Sentry breadcrumb, set its properties, and add it to the current scope in Java. It includes setting the category, message, and level of the breadcrumb.

LANGUAGE: java
CODE:
import io.sentry.Breadcrumb;
import io.sentry.Sentry;
import io.sentry.SentryLevel;

Breadcrumb breadcrumb = new Breadcrumb();
breadcrumb.setCategory("auth");
breadcrumb.setMessage("Authenticated user " + user.getEmail());
breadcrumb.setLevel(SentryLevel.INFO);
Sentry.addBreadcrumb(breadcrumb);

----------------------------------------

TITLE: Flushing Sentry Event Queue
DESCRIPTION: Demonstrates how to flush the Sentry event queue to ensure events are sent before proceeding.

LANGUAGE: csharp
CODE:
SentrySdk.CaptureException(...);
// Only proceed once exception is captured. Waiting up to 2 seconds for it.
await SentrySdk.FlushAsync(TimeSpan.FromSeconds(2));

----------------------------------------

TITLE: Configuring Source Maps Upload for Sentry in SvelteKit
DESCRIPTION: Sets up environment variables and Vite configuration for uploading source maps to Sentry during the build process.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

LANGUAGE: javascript
CODE:
import { sveltekit } from "@sveltejs/kit/vite";
import { sentrySvelteKit } from "@sentry/sveltekit";

export default {
  plugins: [
    sentrySvelteKit({
      sourceMapsUploadOptions: {
        org: "___ORG_SLUG___",
        project: "___PROJECT_SLUG___",
        authToken: process.env.SENTRY_AUTH_TOKEN,
        sourcemaps: {
          assets: ["./build/*/**/*"],
          ignore: ["**/build/client/**/*"],
          filesToDeleteAfterUpload: ["./build/**/*.map"],
        },
      },
    }),
    sveltekit(),
  ],
  // ... rest of your Vite config
};

----------------------------------------

TITLE: Filtering Errors with ignoreErrors in JavaScript Sentry SDK
DESCRIPTION: Configure the SDK to ignore specific error patterns using strings or regular expressions.

LANGUAGE: javascript
CODE:
Sentry.init({
  ignoreErrors: [
    "top.GLOBALS",
    /^Script error\.?$/,
    /^Javascript error: Script error\.? on line 0$/,
  ],
});

----------------------------------------

TITLE: Attaching ANR Thread Dump in Java
DESCRIPTION: This code shows how to enable attaching the ANR thread dump as an attachment using the setAttachAnrThreadDump method in Java.

LANGUAGE: java
CODE:
SentryAndroid.init(context) { options ->
  options.setAttachAnrThreadDump(true)
}

----------------------------------------

TITLE: Setting traces-sample-rate in Sentry (JavaScript)
DESCRIPTION: This code snippet demonstrates how to configure the traces-sample-rate option in Sentry. It sets the sampling rate to 0.2, which means approximately 20% of transactions will be recorded and sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  integrations: [new Sentry.BrowserTracing()],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  tracesSampleRate: 0.2
});

----------------------------------------

TITLE: Initializing Sentry SDK in PHP
DESCRIPTION: This code initializes the Sentry SDK with a public DSN and a specific release version. The DSN is used to authenticate and route error reports to the correct Sentry project. The release version helps in identifying which version of the application is generating the errors.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'release' => 'my-project-name@2.3.12',
]);

----------------------------------------

TITLE: Handling Failed Job Check-Ins with Sentry
DESCRIPTION: Shows how to notify Sentry when a job fails during execution using the error status.

LANGUAGE: php
CODE:
// 🔴 Notify Sentry your job has failed:
\Sentry\captureCheckIn(
    slug: '<monitor-slug>',
    status: CheckInStatus::error(),
    checkInId: $checkInId,
);

----------------------------------------

TITLE: Adding Sentry OpenTelemetry Agent to Application Server (Environment Variable)
DESCRIPTION: This command adds the Sentry OpenTelemetry Agent to the JAVA_OPTS environment variable for use with an application server.

LANGUAGE: bash
CODE:
JAVA_OPTS="${JAVA_OPTS} JAVA_TOOL_OPTIONS="-javaagent:sentry-opentelemetry-agent-{{@inject packages.version('sentry.java.opentelemetry-agent') }}.jar"

----------------------------------------

TITLE: Configuring Breadcrumbs in Laravel for Sentry
DESCRIPTION: This snippet shows how to configure breadcrumb capture settings in the Laravel Sentry integration. It includes options for logging, cache events, Livewire components, SQL queries, queue jobs, commands, HTTP client requests, and notifications.

LANGUAGE: php
CODE:
"breadcrumbs" => [
    // Capture Laravel logs as breadcrumbs
    "logs" => env("SENTRY_BREADCRUMBS_LOGS_ENABLED", true),

    // Capture Laravel cache events (hits, writes etc.) as breadcrumbs
    "cache" => env("SENTRY_BREADCRUMBS_CACHE_ENABLED", true),

    // Capture Livewire components like routes as breadcrumbs
    "livewire" => env("SENTRY_BREADCRUMBS_LIVEWIRE_ENABLED", true),

    // Capture SQL queries as breadcrumbs
    "sql_queries" => env("SENTRY_BREADCRUMBS_SQL_QUERIES_ENABLED", true),

    // Capture SQL query bindings (parameters) in SQL query breadcrumbs
    "sql_bindings" => env("SENTRY_BREADCRUMBS_SQL_BINDINGS_ENABLED", false),

    // Capture queue job information as breadcrumbs
    "queue_info" => env("SENTRY_BREADCRUMBS_QUEUE_INFO_ENABLED", true),

    // Capture command information as breadcrumbs
    "command_info" => env("SENTRY_BREADCRUMBS_COMMAND_JOBS_ENABLED", true),

    // Capture HTTP client request information as breadcrumbs
    "http_client_requests" => env("SENTRY_BREADCRUMBS_HTTP_CLIENT_REQUESTS_ENABLED", true),

    // Capture send notifications as breadcrumbs
    "notifications" => env("SENTRY_BREADCRUMBS_NOTIFICATIONS_ENABLED", true),
],

----------------------------------------

TITLE: Manually Initializing Sentry SDK in Java
DESCRIPTION: This Java code snippet shows how to manually initialize the Sentry SDK in an Android Application class. It demonstrates setting the DSN and adding a beforeSend callback to modify or discard events.

LANGUAGE: java
CODE:
import io.sentry.SentryLevel;
import io.sentry.android.core.SentryAndroid;
import android.app.Application;

public class MyApplication extends Application {
  public void onCreate() {
    super.onCreate();

    SentryAndroid.init(this, options -> {
      options.setDsn("___PUBLIC_DSN___");
      // Add a callback that will be used before the event is sent to Sentry.
      // With this callback, you can modify the event or, when returning null, also discard the event.
      options.setBeforeSend((event, hint) -> {
        if (SentryLevel.DEBUG.equals(event.getLevel()))
          return null;
        else
          return event;
      });
    });
  }
}

----------------------------------------

TITLE: Configuring Sentry Android Gradle Plugin in Groovy
DESCRIPTION: Configure the Sentry Android Gradle Plugin options in your app/build.gradle file using Groovy syntax.

LANGUAGE: groovy
CODE:
import io.sentry.android.gradle.extensions.InstrumentationFeature
import io.sentry.android.gradle.instrumentation.logcat.LogcatLevel

sentry {
    debug = false
    org = "___ORG_SLUG___"
    projectName = "___PROJECT_SLUG___"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
    url = null
    includeProguardMapping = true
    autoUploadProguardMapping = true
    dexguardEnabled = false
    uploadNativeSymbols = false
    autoUploadNativeSymbols = true
    includeNativeSources = false
    includeSourceContext = false
    additionalSourceDirsForSourceContext = []
    tracingInstrumentation {
      enabled = true
      features = [InstrumentationFeature.DATABASE, InstrumentationFeature.FILE_IO, InstrumentationFeature.OKHTTP, InstrumentationFeature.COMPOSE]
      logcat {
        enabled = true
        minLevel = LogcatLevel.WARNING
      }
      excludes = []
    }
    autoInstallation {
      enabled = true
      sentryVersion = '{{@inject packages.version('sentry.java.android', '5.0.0') }}'
    }
    includeDependenciesReport = true
    telemetry = true
}

----------------------------------------

TITLE: Defining PlayerCharacter Class and Configuring Sentry Scope in C#
DESCRIPTION: This snippet defines a PlayerCharacter class with properties for Name, Age, and AttackType. It then demonstrates how to use SentrySdk.ConfigureScope to add an instance of PlayerCharacter as custom context information for error tracking in Sentry.

LANGUAGE: csharp
CODE:
class PlayerCharacter
{
    public string Name { get; set; }
    public int Age { get; set; }
    public string AttackType { get; set; }
}

SentrySdk.ConfigureScope(scope =>
{
    scope.Contexts["character"] = new PlayerCharacter
    {
        Name = "Mighty Fighter",
        Age = 19,
        AttackType = "melee"
    };
});

----------------------------------------

TITLE: Using RecoveryHandler with net/http
DESCRIPTION: Go code snippet demonstrating how to wrap an HTTP handler with Raven's RecoveryHandler for automatic panic handling.

LANGUAGE: go
CODE:
func raisesError(w http.ResponseWriter, r *http.Request) {
	panic("My first Sentry error!")
}

http.HandleFunc("/debug-sentry", raven.RecoveryHandler(raisesError))

----------------------------------------

TITLE: Emitting a Distribution Metric in Laravel with Sentry
DESCRIPTION: This code shows how to emit a distribution metric in Laravel using Sentry. It includes an example of tracking page load time with a specific unit (milliseconds) and tags.

LANGUAGE: php
CODE:
\Sentry\metrics()->distribution(
    key: 'page_load',
    value: 15.0,
    unit: \Sentry\Metrics\MetricsUnit::millisecond(),
    tags: [
        'page' => '/home',
    ],
)

----------------------------------------

TITLE: Capturing Exception with Tags in JavaScript
DESCRIPTION: Shows how to capture an exception with custom tags attached to the event.

LANGUAGE: javascript
CODE:
Sentry.captureException(new Error("something went wrong"), {
  tags: {
    section: "articles",
  },
});

----------------------------------------

TITLE: Installing Sentry Apollo 4 Integration with Gradle
DESCRIPTION: Add the Sentry Apollo 4 integration dependency to your Gradle project.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-apollo-4:{{@inject packages.version('sentry.java.apollo-4', '8.3.0') }}'

----------------------------------------

TITLE: Initializing Sentry with LaunchDarkly Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with LaunchDarkly integration, set up the LaunchDarkly client, and use feature flags. It requires the '@sentry/astro' and 'launchdarkly-js-client-sdk' packages. The code sets up Sentry with a DSN and LaunchDarkly integration, initializes the LaunchDarkly client with a user context, evaluates a feature flag, and captures an exception in Sentry.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/astro';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Configuring Sentry Breadcrumb Customization in Python
DESCRIPTION: Implements a before_breadcrumb callback function that enriches breadcrumb data with thread information from log records. The function is registered during Sentry SDK initialization to process breadcrumbs before they are sent to Sentry.

LANGUAGE: python
CODE:
import sentry_sdk

def before_breadcrumb(crumb, hint):
    if 'log_record' in hint:
        crumb['data']['thread'] = hint['log_record'].threadName
    return crumb

sentry_sdk.init(
    # ...

    before_breadcrumb=before_breadcrumb,
)

----------------------------------------

TITLE: Implementing Custom SentryUserProvider in Spring
DESCRIPTION: Demonstrates how to implement a custom SentryUserProvider to record custom user information in Spring 5 and Spring 6 configurations.

LANGUAGE: Java
CODE:
import org.springframework.stereotype.Component;
import io.sentry.protocol.User;
import io.sentry.spring.SentryUserProvider;

@Component
class CustomSentryUserProvider implements SentryUserProvider {
  public User provideUser() {
    User user = User();
    // ... set user information
    return user
  }
}

LANGUAGE: Java
CODE:
import org.springframework.stereotype.Component;
import io.sentry.protocol.User;
import io.sentry.spring.jakarta.SentryUserProvider;

@Component
class CustomSentryUserProvider implements SentryUserProvider {
  public User provideUser() {
    User user = User();
    // ... set user information
    return user
  }
}

LANGUAGE: Kotlin
CODE:
import org.springframework.stereotype.Component
import io.sentry.protocol.User
import io.sentry.spring.SentryUserProvider

@Component
class CustomSentryUserProvider : SentryUserProvider {
  override fun provideUser(): User? {
    val user = User()
    // ... set user information
    return user
  }
}

LANGUAGE: Kotlin
CODE:
import org.springframework.stereotype.Component
import io.sentry.protocol.User
import io.sentry.spring.jakarta.SentryUserProvider

@Component
class CustomSentryUserProvider : SentryUserProvider {
  override fun provideUser(): User? {
    val user = User()
    // ... set user information
    return user
  }
}

----------------------------------------

TITLE: Configuring Sentry SDK Scope and User Context
DESCRIPTION: Illustrates two approaches for setting Sentry tags and user context: using scope object directly or through global SDK methods. Also shows how to clear scope data.

LANGUAGE: python
CODE:
import sentry_sdk

scope = sentry_sdk.get_current_scope()
scope.set_tag("my-tag", "my value")
scope.user = {"id": 42, "email": "john.doe@example.com"}

# reset all scope data
scope.clear()

# Or:

sentry_sdk.set_tag("my-tag", "my value")
sentry_sdk.set_user({"id": 42, "email": "john.doe@example.com"})

----------------------------------------

TITLE: Setting Custom Measurements in Sentry Transactions for Dart/Flutter
DESCRIPTION: This code snippet demonstrates how to add custom measurements to a Sentry transaction using the Dart/Flutter SDK. It shows examples of recording memory usage, UI rendering time, and localStorage read count. The setMeasurement method is used with different units of measurement.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

final transaction = Sentry.getSpan();

// Record amount of memory used
transaction?.setMeasurement('memoryUsed', 123,
    unit: SentryMeasurementUnit.byte);

// Record time when Footer component renders on page
transaction?.setMeasurement('ui.footerComponent.render', 1.3,
    unit: SentryMeasurementUnit.second);

// Record amount of times localStorage was read
transaction?.setMeasurement('localStorageRead', 4);

----------------------------------------

TITLE: Configuring Sentry SDK User Scope in Objective-C
DESCRIPTION: This snippet shows how to configure the Sentry SDK scope with user information in Objective-C. It creates a SentryUser object and sets either the userId or username, then assigns it to the scope.

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK configureScope:^(SentryScope * _Nonnull scope) {
    SentryUser *user = [[SentryUser alloc] init];

    // User Id:
    user.userId = clientUser.id;
    // Or Username:
    user.username = clientUser.username;
    scope.setUser(user);
}];

----------------------------------------

TITLE: Configuring Sentry SDK with Database Integrations in JavaScript
DESCRIPTION: Example of initializing Sentry SDK with various database integrations for automatic instrumentation. Demonstrates how to enable tracing for MySQL, PostgreSQL, GraphQL, MongoDB, Mongoose, and Redis databases using their respective integration methods.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/aws-serverless");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 1.0,
  integrations: [
    Sentry.mysqlIntegration(),
    Sentry.mysql2Integration(),
    Sentry.pgIntegration(),
    Sentry.graphqlIntegration(),
    Sentry.mongoIntegration(),
    Sentry.mongooseIntegration(),
    Sentry.ioredisIntegration(),
  ],
});

----------------------------------------

TITLE: Configuring Sentry to Show Report Dialog on Exception in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry and configure it to show a report dialog when an exception occurs. It uses the beforeSend callback to check for exceptions and trigger the dialog.

LANGUAGE: html
CODE:
<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    beforeSend(event, hint) {
      // Check if it is an exception, and if so, show the report dialog
      if (event.exception && event.event_id) {
        Sentry.showReportDialog({ eventId: event.event_id });
      }
      return event;
    },
  });
</script>

----------------------------------------

TITLE: Initializing Sentry with CommonJS in Node.js
DESCRIPTION: This snippet shows how to initialize Sentry using CommonJS import style. It sets up the DSN and configures tracing with a sample rate. An alternative method for dynamic sampling control is also commented.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Add Tracing by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,

  // Alternatively, to control sampling dynamically
  // tracesSampler: samplingContext => { /* ... */ }
});

----------------------------------------

TITLE: Bower Installation Command
DESCRIPTION: Command to install Raven.js via Bower package manager.

LANGUAGE: shell
CODE:
bower install raven-js --save

----------------------------------------

TITLE: Initializing Sentry for Client-Side JavaScript in React
DESCRIPTION: This snippet shows how to initialize Sentry in a client-side React application. It includes the DSN configuration and a commented-out section for metrics aggregator integration in older SDK versions.

LANGUAGE: javascript
CODE:
// entry.client.tsx
Sentry.init({
  dsn: '___PUBLIC_DSN___',
  // Only needed for SDK versions < 8.0.0
  // integrations: [
  //   Sentry.metrics.metricsAggregatorIntegration(),
  // ],
});

----------------------------------------

TITLE: Initializing Sentry with Options in C
DESCRIPTION: This snippet demonstrates how to create Sentry options, set the environment to 'production', and initialize Sentry with these options. It's typically used at the start of a C application to set up error tracking.

LANGUAGE: c
CODE:
sentry_options_t *options = sentry_options_new();
sentry_options_set_environment(options, "production");
sentry_init(options);

----------------------------------------

TITLE: Implementing Sentry via CDN with Extra Error Data
DESCRIPTION: Implements Sentry using CDN links with both tracing and extra error data integration. Includes integrity checks and cross-origin settings.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/extraerrordata.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'extraerrordata.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    integrations: [Sentry.extraErrorDataIntegration()],
  });
</script>

----------------------------------------

TITLE: Configuring Sentry with Express.js using CommonJS
DESCRIPTION: Sets up Sentry error handling in an Express.js application using CommonJS require statements. Shows the correct order of module initialization and middleware setup.

LANGUAGE: javascript
CODE:
// Require this first!
require("./instrument");

// Now require other modules
const express = require("express");
const Sentry = require("@sentry/node");

const app = express();

// Add your routes, etc.

// Add this after all routes,
// but before any and other error-handling middlewares are defined
Sentry.setupExpressErrorHandler(app);

app.listen(3000);

----------------------------------------

TITLE: Enabling Tracing Configuration in Android Manifest
DESCRIPTION: Basic configuration to enable tracing in Android app by setting the Sentry DSN and trace sampling rate in AndroidManifest.xml

LANGUAGE: xml
CODE:
<application>
  <meta-data android:name="io.sentry.dsn" android:value="___PUBLIC_DSN___" />
  <meta-data android:name="io.sentry.traces.sample-rate" android:value="1.0" />
</application>

----------------------------------------

TITLE: Accessing OpenTelemetry Tracer in JavaScript
DESCRIPTION: Demonstrates how to access and use the OpenTelemetry tracer instance for creating custom spans in Sentry.

LANGUAGE: javascript
CODE:
const tracer = Sentry.getClient().tracer;

const span1 = tracer.startSpan('work-1');
// Do some work
span1.end();

----------------------------------------

TITLE: Verifying Sentry Client-Side Integration in Nuxt
DESCRIPTION: Vue component that demonstrates client-side error triggering and Sentry span creation for performance monitoring in a Nuxt application.

LANGUAGE: html
CODE:
<script setup>
  import * as Sentry from '@sentry/nuxt';

  function triggerClientError() {
    throw new Error("Nuxt Button Error");
  };

  function getSentryData() {
    Sentry.startSpan(
      {
        name: 'Example Frontend Span',
        op: 'test'
      },
      async () => {
        await $fetch('/api/sentry-example');
      }
    )
  }
</script>

<template>
  <button id="errorBtn" @click="triggerClientError">
    Throw Client Error
  </button>
  <button type="button" @click="getSentryData">
    Throw Server Error
  </button>
</template>

----------------------------------------

TITLE: Capturing Basic Exception with Sentry in C++
DESCRIPTION: This snippet demonstrates how to create a Sentry event with a basic exception. It includes creating an event, adding an exception with a type and message, and capturing the event.

LANGUAGE: cpp
CODE:
#include <sentry.h>

sentry_value_t event = sentry_value_new_event();

sentry_value_t exc = sentry_value_new_exception("Exception", "Error message.");
sentry_event_add_exception(event, exc);

sentry_capture_event(event);

----------------------------------------

TITLE: Enabling Source Context in Kotlin
DESCRIPTION: Enable source context uploading in your app/build.gradle file using Kotlin syntax.

LANGUAGE: kotlin
CODE:
sentry {
    includeSourceContext.set(true)
}

----------------------------------------

TITLE: Updating Browser Tracing Integration in Sentry SvelteKit
DESCRIPTION: This snippet demonstrates how to update the browser tracing integration when migrating from Sentry SDK v7 to v8 in a SvelteKit application. It replaces the class-based 'BrowserTracing' integration with the new function-based 'browserTracingIntegration'.

LANGUAGE: JavaScript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
-  integrations: [new Sentry.BrowserTracing()],
+  integrations: [Sentry.browserTracingIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry Dart Plugin in pubspec.yaml
DESCRIPTION: Basic configuration for the Sentry Dart Plugin in the pubspec.yaml file. Includes project slug, organization slug, auth token, and options for uploading debug symbols, source context, and source maps.

LANGUAGE: yaml
CODE:
sentry:
  project: ___PROJECT_SLUG___
  org: ___ORG_SLUG___
  auth_token: ___ORG_AUTH_TOKEN___
  # Disable automatic upload of debug symbols
  # upload_debug_symbols: false
  # Enable source context
  upload_source_context: true
  # Enable source maps
  upload_source_maps: true

----------------------------------------

TITLE: Configuring User Feedback API in Sentry
DESCRIPTION: Example showing how to use the User Feedback API to collect user feedback programmatically using the SDK's built-in capabilities.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="user-feedback/sdk-api-example/" />

----------------------------------------

TITLE: Removing Sentry ContentProviders from AndroidManifest.xml
DESCRIPTION: This XML snippet demonstrates how to completely remove the merging of Sentry's ContentProviders in the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<application>
    <provider
        android:name="io.sentry.android.core.SentryInitProvider"
        android:authorities="${applicationId}.SentryInitProvider"
        tools:node="remove" />

    <provider
        android:name="io.sentry.android.core.SentryPerformanceProvider"
        android:authorities="${applicationId}.SentryPerformanceProvider"
        tools:node="remove" />
</application>

----------------------------------------

TITLE: Installing Sentry SDK for Unity
DESCRIPTION: Instructions for installing the Sentry SDK in a Unity project. The specific installation steps are not provided in the given content.



----------------------------------------

TITLE: Installing Sentry SDK for Unity
DESCRIPTION: Instructions for installing the Sentry SDK in a Unity project. The specific installation steps are not provided in the given content.



----------------------------------------

TITLE: Compiling Godot Release Export Template
DESCRIPTION: SCons commands to compile the Godot release export template with debug symbols for Windows/Linux and macOS platforms.

LANGUAGE: bash
CODE:
scons target=template_release production=yes debug_symbols=yes separate_debug_symbols=yes

LANGUAGE: bash
CODE:
scons target=template_release arch=x86_64 production=yes debug_symbols=yes separate_debug_symbols=yes platform=macos
scons target=template_release arch=arm64 generate_bundle=yes production=yes debug_symbols=yes separate_debug_symbols=yes platform=macos

----------------------------------------

TITLE: Configuring Cron Monitors in Python with Sentry SDK
DESCRIPTION: This snippet demonstrates how to create or update a monitor programmatically using the Sentry SDK. It includes setting up a monitor configuration with various parameters such as schedule, timezone, and thresholds.

LANGUAGE: python
CODE:
# All keys except `schedule` are optional
monitor_config = {
    "schedule": {"type": "crontab", "value": "0 0 * * *"},
    "timezone": "Europe/Vienna",
    # If an expected check-in doesn't come in `checkin_margin`
    # minutes, it'll be considered missed
    "checkin_margin": 10,
    # The check-in is allowed to run for `max_runtime` minutes
    # before it's considered failed
    "max_runtime": 10,
    # It'll take `failure_issue_threshold` consecutive failed
    # check-ins to create an issue
    "failure_issue_threshold": 5,
    # It'll take `recovery_threshold` OK check-ins to resolve
    # an issue
    "recovery_threshold": 5,
}

@monitor(monitor_slug='<monitor-slug>', monitor_config=monitor_config)
def tell_the_world():
    print('My scheduled task...')

----------------------------------------

TITLE: Configuring Sentry SDK Tracing Options
DESCRIPTION: Example of how to set up tracing options in the Sentry SDK, including sample rate and custom sampling function.

LANGUAGE: javascript
CODE:
Sentry.init({
  tracesSampleRate: 0.2,
  tracesSampler: (samplingContext) => {
    // Custom sampling logic
    return 0.5;
  }
});

----------------------------------------

TITLE: Initializing Sentry SDK in Swift
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in Swift. It sets the DSN and configures a beforeSend callback to modify or discard events before they are sent.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.beforeSend = { event in
        // modify event here or return nil to discard the event
        return event
    }
}

----------------------------------------

TITLE: Configuring Sentry User Data in C++ for Unreal Engine
DESCRIPTION: This snippet demonstrates how to set up user information for Sentry crash reporting in Unreal Engine using C++. It shows how to create a USentryUser object, set various user attributes, and add it to the SentrySubsystem.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

TMap<FString, FString> AdditionalData;
AdditionalData.Add("DogName", "Spot");

USentryUser* User = NewObject<USentryUser>();
User->SetEmail("user@sentry.io");
User->SetId("123");
User->SetUsername("AwesomeUser99");
User->SetIpAddress("127.0.0.1");
User->SetData(AdditionalData);

SentrySubsystem->SetUser(User);

----------------------------------------

TITLE: Initializing Metrics in Unity with Sentry SDK
DESCRIPTION: This snippet shows how to enable metrics by opting in to the metrics feature in the Sentry Unity SDK. It initializes ExperimentalMetricsOptions to enable Sentry Metrics.

LANGUAGE: csharp
CODE:
public class SentryRuntimeConfiguration : SentryRuntimeOptionsConfiguration
{
    public override void Configure(SentryUnityOptions options)
    {
        // Initialize some (non null) ExperimentalMetricsOptions to enable Sentry Metrics,
        options.ExperimentalMetrics = new ExperimentalMetricsOptions { EnableCodeLocations = true };
    }
}

----------------------------------------

TITLE: Capturing Exceptions with Custom Scope in Python using Sentry SDK
DESCRIPTION: This code demonstrates how to use Sentry SDK to capture exceptions with custom tags and error levels. It uses the push_scope context manager to set a custom tag and error level for a specific exception, while leaving the global scope unaffected for subsequent exception captures.

LANGUAGE: python
CODE:
from sentry_sdk import push_scope, capture_exception

with push_scope() as scope:
    scope.set_tag("my-tag", "my value")
    scope.level = 'warning'
    # will be tagged with my-tag="my value"
    capture_exception(Exception("my error"))

# will not be tagged with my-tag
capture_exception(Exception("my other error"))

----------------------------------------

TITLE: Using thirdPartyErrorFilterIntegration in JavaScript Sentry SDK
DESCRIPTION: Configure the SDK to filter out errors from third-party sources using application keys and custom behavior.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [
    Sentry.thirdPartyErrorFilterIntegration({
      filterKeys: ["your-custom-application-key"],
      behaviour: "drop-error-if-contains-third-party-frames",
    }),
  ],
});

----------------------------------------

TITLE: Grouping RPC Errors with Greater Granularity in Sentry SDK
DESCRIPTION: Shows how to create more granular error grouping for RPC or API calls by including specific error attributes in the fingerprint.

LANGUAGE: javascript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['{{ default }}', String(error.name), String(error.message)]);
  Sentry.captureException(error);
});

LANGUAGE: python
CODE:
with sentry_sdk.configure_scope() as scope:
    scope.fingerprint = ['{{ default }}', str(error.name), str(error.message)]

LANGUAGE: php
CODE:
\Sentry\configureScope(function (\Sentry\State\Scope $scope) use ($exception): void {
    $scope->setFingerprint(['{{ default }}', $exception->getName(), $exception->getMessage()]);
});

----------------------------------------

TITLE: Configuring Sentry Transaction Attributes in Kotlin
DESCRIPTION: Kotlin implementation of Sentry initialization with transaction attribute configuration. Sets custom attributes on the root span and child spans using more concise Kotlin syntax.

LANGUAGE: kotlin
CODE:
Sentry.init { options ->
    options.setBeforeSendTransaction { transaction, hint ->
    
        // set the attribute on the root span
        if (transaction.contexts.trace == null) {
            transaction.contexts.setTrace(SpanContext("op"))
        }
        transaction.contexts.trace?.setData("myAttribute", "myValue")

        // and on all child spans
        transaction.spans.forEach { span ->
            if (span.data == null) {
                span.data = HashMap()
            }
            span.data?.set("myAttribute", "myValue")
        }

        transaction
    }
}

----------------------------------------

TITLE: Configuring Sentry Client Options in Go
DESCRIPTION: Defines the ClientOptions struct that configures the Sentry SDK Client, including DSN, debug mode, sampling rates, error handling, and various other configuration parameters.

LANGUAGE: go
CODE:
// ClientOptions that configures a SDK Client
type ClientOptions struct {
	Dsn string
	Debug bool
	AttachStacktrace bool
	SampleRate float64
	EnableTracing bool
	TracesSampleRate float64
	TracesSampler TracesSampler
	ProfilesSampleRate float64
	IgnoreErrors []string
	IgnoreTransactions []string
	SendDefaultPII bool
	BeforeSend func(event *Event, hint *EventHint) *Event
	BeforeSendTransaction func(event *Event, hint *EventHint) *Event
	BeforeBreadcrumb func(breadcrumb *Breadcrumb, hint *BreadcrumbHint) *Breadcrumb
	Integrations func([]Integration) []Integration
	DebugWriter io.Writer
	Transport Transport
	ServerName string
	Release string
	Dist string
	Environment string
	MaxBreadcrumbs int
	MaxSpans int
	HTTPClient *http.Client
	HTTPTransport http.RoundTripper
	HTTPProxy string
	HTTPSProxy string
	CaCerts *x509.CertPool
	MaxErrorDepth int
}

----------------------------------------

TITLE: Creating Child Spans from Automatic Transactions in ASP.NET Core
DESCRIPTION: This code demonstrates how to create child spans from automatically created transactions in an ASP.NET Core controller. It uses dependency injection to get the Sentry Hub and creates a child span to measure additional work.

LANGUAGE: csharp
CODE:
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

public class HomeController : Controller
{
    private readonly IHub _sentryHub;

    public HomeController(IHub sentryHub) => _sentryHub = sentryHub;

    [HttpGet("/person/{id}")]
    public IActionResult Person(string id)
    {
        var childSpan = _sentryHub.GetSpan()?.StartChild("additional-work");
        try
        {
            // Do the work that gets measured.

            childSpan?.Finish(SpanStatus.Ok);
        }
        catch (Exception e)
        {
            childSpan?.Finish(SpanStatus.InternalError);
            throw;
        }
    }
}

----------------------------------------

TITLE: Java BeforeSendCallback Implementation
DESCRIPTION: Java implementation of SentryOptions.BeforeSendCallback that filters events based on a hint value. Returns null to discard events when a specific hint key is present, otherwise returns the original event.

LANGUAGE: java
CODE:
import io.sentry.SentryEvent;
import io.sentry.SentryOptions;
import io.sentry.Hint
import org.springframework.stereotype.Component;

@Component
public class CustomBeforeSendCallback implements SentryOptions.BeforeSendCallback {
  @Override
  public SentryEvent execute(SentryEvent event, Hint hint) {
    if (hint.get("my-hint-key") != null) {
      return null;
    } else {
      return event;
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry with BeforeSend Callback in Java
DESCRIPTION: This snippet shows how to initialize Sentry for Android using Java, setting up a BeforeSend callback to filter events based on a custom hint type. The callback returns null to discard events with a specific hint, otherwise returning the original event.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  options.setBeforeSend((event, hint) -> {
    if (hint instanceof MyHint) {
      return null;
    } else {
      return event;
    }
  });
});

----------------------------------------

TITLE: Enabling User Interaction Tracing in React Native with Sentry
DESCRIPTION: This snippet demonstrates how to enable user interaction tracing in a React Native application using Sentry. It includes initializing Sentry with the necessary options and wrapping the root component.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

const navigationIntegration = Sentry.reactNavigationIntegration(); // Or any other navigation integration

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  enableUserInteractionTracing: true,
  tracesSampleRate: 1.0,
  integrations: [navigationIntegration],
});

const App = () => <View>Your App</View>;

export default Sentry.wrap(App);

----------------------------------------

TITLE: Installing Sentry Reactor Integration with Maven
DESCRIPTION: Add the Sentry Reactor dependency to your Maven POM file. This XML snippet demonstrates how to include the Sentry Reactor integration in your project using Maven.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-reactor</artifactId>
    <version>{{@inject packages.version('sentry.java.reactor', '8.3.0') }}</version>
</dependency>

----------------------------------------

TITLE: Configuring Sentry via appsettings.json
DESCRIPTION: Configure Sentry options using the ASP.NET Core configuration system in appsettings.json.

LANGUAGE: json
CODE:
  "Sentry": {
    "Dsn": "___PUBLIC_DSN___",
    "SendDefaultPii": true,
    "MaxRequestBodySize": "Always",
    "MinimumBreadcrumbLevel": "Debug",
    "MinimumEventLevel": "Warning",
    "AttachStackTrace": true,
    "Debug": true,
    "DiagnosticLevel": "Error",
    "TracesSampleRate": 1.0
  },

----------------------------------------

TITLE: Using Isolated Scope for Exception Capture
DESCRIPTION: Demonstrates using a Scope instance to pass data while ignoring global scope attributes.

LANGUAGE: javascript
CODE:
const scope = new Sentry.Scope();
scope.setTag("section", "articles");
Sentry.captureException(new Error("something went wrong"), () => scope);

----------------------------------------

TITLE: Initializing Sentry with Shared Configuration
DESCRIPTION: Shared initialization code for Sentry in a Kotlin Multiplatform project, using common configuration options for all platforms.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry
import io.sentry.kotlin.multiplatform.SentryOptions

// Application context is only needed for Android targets
fun initializeSentry() {
  val configuration: (SentryOptions) -> Unit = {
    it.dsn = "___PUBLIC_DSN___"
    // Add common configuration here
  }
  Sentry.init(configuration)
}

----------------------------------------

TITLE: Configuring Sentry with Custom Application Key in Nuxt
DESCRIPTION: This snippet shows how to configure Sentry within a Nuxt project's configuration file. It sets a custom application key for Sentry using the 'unstable_sentryBundlerPluginOptions' property.

LANGUAGE: javascript
CODE:
export default defineNuxtConfig({
  sentry: {
    unstable_sentryBundlerPluginOptions: {
      applicationKey: "your-custom-application-key",
    },
  },
});

----------------------------------------

TITLE: Disabling DiagnosticSource Integration in Sentry SDK
DESCRIPTION: This code snippet shows how to disable the DiagnosticSource integration on SentryOptions. It's useful when you don't want the automatic integration with Entity Framework Core and SQLClient.

LANGUAGE: csharp
CODE:
options.DisableDiagnosticSourceIntegration();

----------------------------------------

TITLE: Configuring Sentry User Scope in Kotlin
DESCRIPTION: Implements Sentry scope configuration with user tracking and custom tag using Kotlin. Demonstrates more concise syntax using Kotlin's apply function for setting user properties.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.protocol.User

Sentry.configureScope { scope ->
  scope.setTag("my-tag", "my value")
  scope.user = User().apply {
    id = "42"
    email = "john.doe@example.com"
  }
}

----------------------------------------

TITLE: Registering Sentry Providers in Angular NGModule Config
DESCRIPTION: This snippet shows how to register Sentry providers in an NGModule-based Angular application using app.module.ts. It sets up error handling and tracing services.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, ErrorHandler, NgModule } from "@angular/core";
import { Router } from "@angular/router";

import * as Sentry from "@sentry/angular";

@NgModule({
  // ...
  providers: [
    {
      provide: ErrorHandler,
      useValue: Sentry.createErrorHandler(),
    },
    {
      provide: Sentry.TraceService,
      deps: [Router],
    },
    {
      provide: APP_INITIALIZER,
      useFactory: () => () => {},
      deps: [Sentry.TraceService],
      multi: true,
    },
  ],
  // ...
})
export class AppModule {}

----------------------------------------

TITLE: Implementing Sentry LLM Monitoring with Python Decorators
DESCRIPTION: Example demonstrating how to use Sentry's @ai_track decorator and record_token_usage helper function to monitor AI pipelines and LLM calls. Shows implementation for custom workloads, unsupported LLM providers, and complete AI pipelines with OpenAI integration.

LANGUAGE: python
CODE:
import time
from sentry_sdk.ai.monitoring import ai_track, record_token_usage
import sentry_sdk
import requests

@ai_track("AI tool")
def some_workload_function(**kwargs):
    """
    This function is an example of calling arbitrary code with @ai_track so that it shows up in the Sentry trace
    """
    time.sleep(5)

@ai_track("LLM")
def some_llm_call():
    """
    This function is an example of calling an LLM provider that isn't officially supported by Sentry.
    """
    with sentry_sdk.start_span(op="ai.chat_completions.create.examplecom", name="Example.com LLM") as span:
        result = requests.get('https://example.com/api/llm-chat?question=say+hello').json()
        # this annotates the tokens used by the LLM so that they show up in the graphs in the dashboard
        record_token_usage(span, total_tokens=result["usage"]["total_tokens"])
        return result["text"]

@ai_track("My AI pipeline")
def some_pipeline():
    """
    The topmost level function with @ai_track gets the operation "ai.pipeline", which makes it show up
    in the table of AI pipelines in the Sentry LLM Monitoring dashboard.
    """
    client = OpenAI()
    # Data can be passed to the @ai_track annotation to include metadata
    some_workload_function(sentry_tags={"username": "my_user"}, sentry_data={"data": "some longer data that provides context"})
    some_llm_call()
    response = (
        client.chat.completions.create(
            model="some-model", messages=[{"role": "system", "content": "say hello"}]
        )
        .choices[0]
        .message.content
    )
    print(response)

with sentry_sdk.start_transaction(op="ai-inference", name="The result of the AI inference"):
    some_pipeline()

----------------------------------------

TITLE: Capturing Exceptions with Sentry in C#
DESCRIPTION: Demonstrates basic exception handling and reporting to Sentry using C#'s try-catch block. The example deliberately throws a null exception and captures it using SentrySdk.

LANGUAGE: csharp
CODE:
try
{
    throw null;
}
catch (Exception ex)
{
    SentrySdk.CaptureException(ex);
}

----------------------------------------

TITLE: Clearing User Information in Sentry SDK
DESCRIPTION: This code snippet shows how to clear the currently set user information in the Sentry SDK.

LANGUAGE: javascript
CODE:
Sentry.setUser(null);

----------------------------------------

TITLE: Configuring Tree Shaking with Sentry Bundler Plugin
DESCRIPTION: Example of using the @sentry/webpack-plugin to configure bundle size optimizations for tree shaking optional code in the Sentry SDK.

LANGUAGE: javascript
CODE:
sentryPlugin({
  // other config
  bundleSizeOptimizations: {
    excludeDebugStatements: true,
    // Only relevant if you added `browserTracingIntegration`
    excludePerformanceMonitoring: true,
    // Only relevant if you added `replayIntegration`
    excludeReplayIframe: true,
    excludeReplayShadowDom: true,
    excludeReplayWorker: true,
  },
});

----------------------------------------

TITLE: Initializing Sentry with Transaction Ignore Patterns
DESCRIPTION: Demonstrates how to configure Sentry SDK to ignore specific transactions using exact match and regex patterns. The code sets up ignore patterns for a specific transaction name 'my-transaction' and any transaction starting with 'transaction-' using regex.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.ignoreTransactions = ["my-transaction", "^transaction-.*\$" ];
});

----------------------------------------

TITLE: Initializing Sentry for Android with Custom Trace Sampling in Java
DESCRIPTION: This snippet shows how to initialize Sentry for Android using Java, set the DSN, and configure custom trace sampling rates based on different app activities. It demonstrates setting uniform sample rates and using a custom sampler for more granular control.

LANGUAGE: java
CODE:
import io.sentry.CustomSamplingContext;
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  options.setDsn("___PUBLIC_DSN___");
  // To set a uniform sample rate
  options.setTracesSampleRate(1.0);
  // OR: Determine traces sample rate based on the sampling context
  options.setTracesSampler(context -> {
    if (context.getTransactionContext().isForNextAppStart()) {
      // These refer to app start (if app start profiling is enabled), and are important - take a big sample
      return 0.7;
    }
    CustomSamplingContext ctx = context.getCustomSamplingContext();
    if (ctx != null) {
      if ("LoginActivity".equals(ctx.get("ActivityName"))) {
        // These are important - take a big sample
        return 0.5;
      } else if ("SearchActivity".equals(ctx.get("ActivityName"))) {
        // Search is less important and happen much more frequently - only take 1%
        return 0.01;
      } else if ("HealthCheckActivity".equals(ctx.get("ActivityName"))) {
        // The health check is just noise - drop all transactions
        return 0.0;
      } else {
        // Default sample rate
        return null;
      }
    } else {
      return null;
    }
  });
});

----------------------------------------

TITLE: Initializing Sentry in React Native
DESCRIPTION: This snippet demonstrates how to import and initialize Sentry in a React Native application. It sets up error tracking and performance monitoring with a 100% trace sample rate.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

// Unlike Sentry on other platforms, you do not need to import anything to use tracing on React Native

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Configuring Before Send Hook in Sentry PHP
DESCRIPTION: Implements a before_send callback that modifies the event fingerprint when encountering database unavailability errors. This helps group related database errors together in Sentry's interface.

LANGUAGE: php
CODE:
'before_send' => function (\Sentry\Event $event, ?\Sentry\EventHint $hint): ?\Sentry\Event {
    if ($hint !== null && $hint->exception !== null && str_contains($hint->exception->getMessage(), 'database unavailable')) {
        $event->setFingerprint(['database-unavailable']);
    }

    return $event;
},

----------------------------------------

TITLE: Setting Up Sentry Tunneling
DESCRIPTION: Example showing how to configure the tunnel option to proxy events through your own server to avoid ad blockers

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tunnel: "/tunnel"
});

----------------------------------------

TITLE: Initializing OpenTelemetry with AutoConfiguredOpenTelemetrySdk in Java
DESCRIPTION: This snippet demonstrates how to initialize OpenTelemetry using AutoConfiguredOpenTelemetrySdk in Java. It sets the SDK as global and disables log, metric, and trace exporters.

LANGUAGE: java
CODE:
import io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdk;

AutoConfiguredOpenTelemetrySdk.builder()
  .setResultAsGlobal()
  .addPropertiesSupplier(() -> {
    final Map<String, String> properties = new HashMap<>();
    properties.put("otel.logs.exporter", "none");
    properties.put("otel.metrics.exporter", "none");
    properties.put("otel.traces.exporter", "none");
    return properties;
  })
  .build();

----------------------------------------

TITLE: Implementing Sentry Middleware in SolidJS
DESCRIPTION: Sets up Sentry middleware in a SolidJS application by creating a middleware configuration that enables distributed tracing. The middleware should be placed before other response handlers to ensure proper trace collection.

LANGUAGE: typescript
CODE:
import { sentryBeforeResponseMiddleware } from '@sentry/solidstart/middleware';
import { createMiddleware } from '@solidjs/start/middleware';

export default createMiddleware({
  onBeforeResponse: [
    sentryBeforeResponseMiddleware(),
    // Add your other middleware handlers after `sentryBeforeResponseMiddleware`
  ],
});

----------------------------------------

TITLE: Implementing Check-In Monitoring for Custom Jobs in Elixir
DESCRIPTION: This code demonstrates how to manually instrument job monitoring using Sentry's check-in system. It shows the process of starting a check-in, executing the job, and completing the check-in with a success or error status.

LANGUAGE: elixir
CODE:
{:ok, check_in_id} = Sentry.capture_check_in(status: :in_progress, monitor_slug: "<monitor-slug>")

# Execute your scheduled task here
my_scheduled_job()

Sentry.capture_check_in(check_in_id: check_in_id, status: :ok, monitor_slug: "<monitor-slug>")

LANGUAGE: elixir
CODE:
Sentry.capture_check_in(check_in_id: check_in_id, status: :error, monitor_slug: "<monitor-slug>")

----------------------------------------

TITLE: Implementing Heartbeat Monitoring
DESCRIPTION: Example of implementing simple heartbeat monitoring for job status tracking.

LANGUAGE: ruby
CODE:
Sentry.capture_check_in('<monitor-slug>', :ok)

# For error handling:
Sentry.capture_check_in('<monitor-slug>', :error)

----------------------------------------

TITLE: Declaring AndroidNativeBundle Plugin Dependency in Gradle
DESCRIPTION: This snippet shows how to declare the AndroidNativeBundle Gradle plugin dependency in the project's build.gradle file. This plugin is used to copy native libraries from the Sentry NDK.

LANGUAGE: groovy
CODE:
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        // Add the line below, the plugin that copies the binaries
        // https://github.com/howardpang/androidNativeBundle/releases
        classpath 'io.github.howardpang:androidNativeBundle:{version}'
    }
}

----------------------------------------

TITLE: Setting Up Sentry Middleware
DESCRIPTION: Implementation of Sentry middleware for enhanced server-side tracking and distributed tracing.

LANGUAGE: typescript
CODE:
import { sentryBeforeResponseMiddleware } from '@sentry/solidstart';
import { createMiddleware } from '@solidjs/start/middleware';

export default createMiddleware({
  onBeforeResponse: [
    sentryBeforeResponseMiddleware(),
    // Add your other middleware handlers after `sentryBeforeResponseMiddleware`
  ],
});

----------------------------------------

TITLE: Example React Component Before Sentry Processing
DESCRIPTION: Shows a simple React component before Sentry's Babel plugin processes it.

LANGUAGE: javascript
CODE:
function MyAwesomeComponent() {
  return <div>This is a really cool and awesome component!</div>
}

----------------------------------------

TITLE: Implementing Sentry before_send Function in Elixir
DESCRIPTION: This snippet defines a before_send function in the MyApp.Sentry module. It removes the user's email address from the event data before sending it to Sentry, enhancing privacy protection.

LANGUAGE: elixir
CODE:
defmodule MyApp.Sentry do
  def before_send(%{user: user} = event) do
    # Don't send user's email address
    user = user && Map.delete(user, :email)
    %{event | user: user}
  end
end

----------------------------------------

TITLE: Instrumenting HTTP Requests with Custom Spans in Ruby
DESCRIPTION: This snippet demonstrates how to wrap HTTP requests in a custom span using Sentry's Ruby SDK. It shows how to set various span attributes including HTTP method, URL, server details, and response information.

LANGUAGE: ruby
CODE:
require 'uri'

def make_request(method, url)
  Sentry.with_child_span(op: 'http.client', description: "#{method} #{url}") do |span|
    span.set_data('http.request.method', method)

    parsed_url = URI.parse(url)
    span.set_data('url', url)
    span.set_data('server.address', parsed_url.hostname)
    span.set_data('server.port', parsed_url.port)

    # make your custom HTTP request
    response = do_request(method: method, url: url)

    span.set_data('http.response.status_code', response.status_code)
    span.set_data('http.response_content_length', response.headers['content-length'])

    response
  end
end

----------------------------------------

TITLE: Implementing Setup Hook in Sentry Custom Integration (JavaScript)
DESCRIPTION: This snippet shows how to implement the setup hook in a custom Sentry integration. The setup hook is called when the SDK is initialized and receives the client instance as an argument. It's useful for running code on initialization.

LANGUAGE: javascript
CODE:
const integration = {
  name: "MyAwesomeIntegration",
  setup(client) {
    setupCustomSentryListener(client);
  },
};

----------------------------------------

TITLE: Initializing Raven with Sentry DSN in Node.js
DESCRIPTION: This snippet shows how to configure Raven with a Sentry DSN and install it to capture uncaught exceptions.

LANGUAGE: javascript
CODE:
var Raven = require("raven");
Raven.config("___PUBLIC_DSN___").install();

----------------------------------------

TITLE: Configuring Processor Options in Sentry PHP Client
DESCRIPTION: Demonstrates how to configure options for data processors in the Sentry client. This example shows how to customize the SanitizeDataProcessor.

LANGUAGE: php
CODE:
'processorOptions' => array(
    'Raven_Processor_SanitizeDataProcessor' => array(
                'fields_re' => '/(user_password|user_token|user_secret)/i',
                'values_re' => '/^(?:\d[ -]*?){15,16}$/'
            )
)

----------------------------------------

TITLE: Implementing SentryIonicErrorHandler for Ionic v3
DESCRIPTION: Custom error handler implementation for Ionic v3 that extends IonicErrorHandler to capture errors in Sentry.

LANGUAGE: javascript
CODE:
import { IonicErrorHandler } from "ionic-angular";

import * as Sentry from "sentry-cordova";

export class SentryIonicErrorHandler extends IonicErrorHandler {
  handleError(error) {
    super.handleError(error);
    try {
      Sentry.captureException(error.originalError || error);
    } catch (e) {
      console.error(e);
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration (Deprecated)
DESCRIPTION: Shows the deprecated method of initializing Sentry with Unleash feature flags using unleashClientClass. Includes the same functionality as the current version but uses the older integration syntax.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/ember';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({unleashClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Verifying Sentry Setup with Intentional Error in Deno
DESCRIPTION: This JavaScript snippet creates an intentional error after a timeout to verify that Sentry is correctly set up and capturing errors in the Deno environment.

LANGUAGE: javascript
CODE:
setTimeout(() => {
  throw new Error();
});

----------------------------------------

TITLE: Configuring Sentry Integration in Astro Config
DESCRIPTION: This snippet shows how to set up the Sentry integration in the Astro configuration file. It includes setting the DSN and tracesSampleRate.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config";
import sentryAstro from "@sentry/astro";

export default defineConfig({
  integrations: [
    sentryAstro({
      dsn: "___PUBLIC_DSN___",
      tracesSampleRate: 1.0,
    }),
  ],
});

----------------------------------------

TITLE: Installing Sentry Maven Plugin in pom.xml
DESCRIPTION: This snippet shows how to add the Sentry Maven Plugin to your project's pom.xml file. It includes the plugin configuration with the necessary groupId, artifactId, and version, as well as the 'extensions' flag set to true for auto-installation of the Sentry SDK and integrations.

LANGUAGE: xml
CODE:
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>io.sentry</groupId>
        <artifactId>sentry-maven-plugin</artifactId>
        <version>{{@inject packages.version('sentry.java.maven-plugin', '0.0.2') }}</version>
        <!-- Required to allow auto-install of Sentry SDK and Integrations -->
        <extensions>true</extensions>
      </plugin>
      ...
    </plugins>
    ...
  </build>
...
</project>

----------------------------------------

TITLE: Using @SentryTransaction Annotation in Spring 5 (Kotlin)
DESCRIPTION: Example of using @SentryTransaction annotation to create a transaction for a scheduled job in Spring 5 Kotlin application.

LANGUAGE: kotlin
CODE:
import org.springframework.stereotype.Component
import org.springframework.scheduling.annotation.Scheduled
import io.sentry.spring.tracing.SentryTransaction

@Component
class ScheduledJob {

  @Scheduled(...)
  @SentryTransaction(operation = "task")
  fun execute() {
    ...
  }
}

----------------------------------------

TITLE: Wrapping Root Component for Interaction Breadcrumbs in React Native
DESCRIPTION: To capture interaction breadcrumbs, wrap your root component using the Sentry.wrap method. This enables automatic instrumentation for user interactions.

LANGUAGE: javascript
CODE:
Sentry.wrap(RootComponent)

----------------------------------------

TITLE: Cleaning and Repacking Nodestore Table in Postgres (Shell)
DESCRIPTION: This script cleans up the nodestore data, keeping only the last 7 days, and then repacks the table using pg-repack. It's designed to be run in a Docker Compose environment.

LANGUAGE: shell
CODE:
# Only keep the last 7 days of nodestore data. We heavily use performance monitoring.
docker compose run --rm -T web cleanup --days 7 -m nodestore -l debug
# This ensures pg-repack exists before running as the container gets recreated on upgrades
docker compose run --rm -T postgres bash -c "apt update && apt install -y --no-install-recommends postgresql-14-repack && su postgres -c 'pg_repack -E info -t nodestore_node'"

----------------------------------------

TITLE: Adding Sentry BOM to Maven Dependencies
DESCRIPTION: This snippet shows how to add the Sentry BOM to the dependencyManagement section in a Maven pom.xml file. It allows for version-less declaration of Sentry dependencies.

LANGUAGE: xml
CODE:
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>io.sentry</groupId>
            <artifactId>sentry-bom</artifactId>
            <version>{{@inject packages.version('sentry.java.bom', '5.1.0') }}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

----------------------------------------

TITLE: Adding Multiple Spans to Sentry Transaction in Go
DESCRIPTION: Implementation of a function that creates multiple spans within a Sentry transaction. Shows how to start spans, set descriptions, and properly finish them. Each span represents a suboperation within the transaction and must be manually finished to appear in the transaction.

LANGUAGE: go
CODE:
func doWork(ctx context.Context) {
	// Set the OP based on values from https://develop.sentry.dev/sdk/performance/span-operations/
	span := sentry.StartSpan(ctx, "function")
	span.Description = "suboperation1"
	// omitted code ...
	span.Finish()

	// Set the OP based on values from https://develop.sentry.dev/sdk/performance/span-operations/
	span := sentry.StartSpan(ctx, "function")
	span.Description = "suboperation2"
	// omitted code ...
	span.Finish()
}

----------------------------------------

TITLE: Adding Sentry Spring Boot 3 Dependency (Maven)
DESCRIPTION: Adds the Sentry Spring Boot 3 starter dependency with Jakarta support using Maven build configuration.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-spring-boot-starter-jakarta</artifactId>
    <version>{{@inject packages.version('sentry.java.spring-boot.jakarta', '6.7.0') }}</version>
</dependency>

----------------------------------------

TITLE: Configuring Sentry in Angular 14+
DESCRIPTION: TypeScript configuration for Sentry initialization in Angular 14+ applications, including error handling, performance monitoring, and session replay setup

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/capacitor";
import * as SentryAngular from "@sentry/angular";

Sentry.init(
  {
    dsn: "___PUBLIC_DSN___",
    release: "my-project-name@<release-name>",
    dist: "<dist>",
    integrations: [
      Sentry.browserTracingIntegration(),
      Sentry.replayIntegration(),
    ],
    tracesSampleRate: 1.0,
    tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
    replaysSessionSampleRate: 0.1,
    replaysOnErrorSampleRate: 1.0,
  },
  SentryAngular.init
);

----------------------------------------

TITLE: Spring Boot 2 Span Annotation (Kotlin)
DESCRIPTION: Example of using @SentrySpan annotation to create spans around method executions in Spring Boot 2 with Kotlin

LANGUAGE: kotlin
CODE:
import org.springframework.stereotype.Component
import io.sentry.spring.tracing.SentrySpan

@Component
class PersonService {

  @SentrySpan(operation = "task")
  fun findById(id: Long): Person {
    ...
  }
}

----------------------------------------

TITLE: Installing Sentry Android Gradle Plugin in Groovy
DESCRIPTION: Add the Sentry Android Gradle Plugin to your app/build.gradle file using Groovy syntax.

LANGUAGE: groovy
CODE:
plugins {
    id "com.android.application"
    id "io.sentry.android.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

----------------------------------------

TITLE: Configuring Sentry StdOut Logger in PHP
DESCRIPTION: Initializes Sentry with a stdout logger that writes messages to standard output. Uses the DebugStdOutLogger class for console-based logging.

LANGUAGE: php
CODE:
Sentry\init([
    'logger' => new \Sentry\Logger\DebugStdOutLogger(),
]);

----------------------------------------

TITLE: Configuring Cloudflare Worker Compatibility
DESCRIPTION: Configuration for enabling Node.js compatibility flags in Cloudflare Workers, required for Sentry SDK functionality.

LANGUAGE: toml
CODE:
compatibility_flags = ["nodejs_compat"]

LANGUAGE: json
CODE:
{
  "compatibility_flags": [
    "nodejs_compat"
    // "nodejs_als"
  ]
}

----------------------------------------

TITLE: Registering Sentry Server-Side SDK Initialization
DESCRIPTION: Creates a Next.js Instrumentation file to import server and edge Sentry configurations.

LANGUAGE: JavaScript
CODE:
export async function register() {
  if (process.env.NEXT_RUNTIME === "nodejs") {
    await import("./sentry.server.config");
  }

  if (process.env.NEXT_RUNTIME === "edge") {
    await import("./sentry.edge.config");
  }
}

----------------------------------------

TITLE: Initializing Sentry with ESM in Node.js
DESCRIPTION: This snippet demonstrates Sentry initialization using ESM import style. It configures the DSN and sets up tracing with a sample rate. A commented alternative for dynamic sampling control is also provided.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Add Tracing by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,

  // Alternatively, to control sampling dynamically
  // tracesSampler: samplingContext => { /* ... */ }
});

----------------------------------------

TITLE: Configuring Sentry with Loader Script (v8) in HTML
DESCRIPTION: This snippet shows how to set up Sentry using the Loader script for version 8. It configures the sentryOnLoad function to initialize Sentry and lazily load the deduplication integration. It includes the script tag for loading the Sentry SDK.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});
    Sentry.lazyLoadIntegration("dedupeIntegration").then((integration) => {
      Sentry.addIntegration(integration());
    });
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Breadcrumb Filter in JavaScript
DESCRIPTION: This snippet shows how to initialize the Sentry SDK with a custom beforeBreadcrumb hook. The hook filters out breadcrumbs with the category 'ui.click', effectively preventing these events from being sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  beforeBreadcrumb(breadcrumb, hint) {
    return breadcrumb.category === "ui.click" ? null : breadcrumb;
  },
});

----------------------------------------

TITLE: Setting User Context in Sentry JavaScript
DESCRIPTION: Demonstrates how to set user identification information in Sentry using the setUser method. This allows user-specific error tracking and helps associate errors with particular users in the Sentry dashboard.

LANGUAGE: javascript
CODE:
Sentry.setUser({ email: "john.doe@example.com" });

----------------------------------------

TITLE: Initializing Sentry with Breadcrumb Filtering
DESCRIPTION: Sets up Sentry SDK with a custom BeforeBreadcrumb function that filters out breadcrumbs in the 'auth' category. The function inspects each breadcrumb before it's added and returns null for auth breadcrumbs to prevent them from being recorded.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	// ...
	BeforeBreadcrumb: func(breadcrumb *sentry.Breadcrumb, hint *sentry.BreadcrumbHint) *sentry.Breadcrumb {
		if breadcrumb.Category == "auth" {
			return nil
		}
		return breadcrumb
	},
})

----------------------------------------

TITLE: Using withScope for Local Scope in Sentry SDK
DESCRIPTION: This example demonstrates how to use the withScope function to attach a level and a tag to a specific error event without affecting the global scope.

LANGUAGE: java
CODE:
Sentry.withScope(scope -> {
    scope.setLevel(SentryLevel.FATAL);
    scope.setTag("my-tag", "my value");
    Sentry.captureException(new Exception("my error"));
});

----------------------------------------

TITLE: Installing Sentry CLI with Package Managers
DESCRIPTION: Commands to install Sentry CLI as a dev dependency using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/cli --save-dev

LANGUAGE: bash
CODE:
yarn add @sentry/cli --dev

LANGUAGE: bash
CODE:
pnpm add @sentry/cli --save-dev

----------------------------------------

TITLE: Initializing Sentry SDK with Spark Integration in Python
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK with the Spark Integration for the driver. It includes configuration for error monitoring, performance tracing, and profiling.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.spark import SparkIntegration

if __name__ == "__main__":
    sentry_sdk.init(
        dsn="___PUBLIC_DSN___",
        # Add data like request headers and IP for users, if applicable;
        # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
        send_default_pii=True,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=1.0,
        integrations=[
            SparkIntegration(),
        ],
    )

    spark = SparkSession\
        .builder\
        .appName("ExampleApp")\
        .getOrCreate()
    ...

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration in JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry with Unleash integration, set up an Unleash client, and use feature flags. It uses the latest Sentry configuration with the 'featureFlagClientClass' option.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/sveltekit';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Initializing Sentry with Console Capture in Bun
DESCRIPTION: Sets up Sentry error tracking with console capture integration. Requires the @sentry/bun package and a valid DSN. The configuration enables automatic capture of console messages as part of error tracking.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/bun";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.captureConsoleIntegration()],
});

----------------------------------------

TITLE: Configuring P6SpyDriver in application.yml
DESCRIPTION: Configure the DataSource to use P6SpyDriver as the JDBC driver in a Spring Boot application's application.yml file.

LANGUAGE: yaml
CODE:
spring.datasource.driver-class-name: com.p6spy.engine.spy.P6SpyDriver

----------------------------------------

TITLE: Initializing Statsig with Sentry Integration in JavaScript
DESCRIPTION: Sets up Sentry error tracking with Statsig feature flag integration. This code initializes both the Statsig client and Sentry with the necessary configuration to track feature flags in error reports. Requires Statsig SDK key and Sentry DSN.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/browser';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Initializing Sentry for Hangfire Monitoring in .NET
DESCRIPTION: This snippet demonstrates how to set up Sentry integration with Hangfire using the GlobalConfiguration approach. It enables automatic job monitoring and check-ins.

LANGUAGE: csharp
CODE:
using Hangfire;
using Sentry.Hangfire;

GlobalConfiguration.Configuration.UseSentry();

----------------------------------------

TITLE: Verifying Wasm error capture in JavaScript
DESCRIPTION: JavaScript example demonstrating how to instantiate and execute a WebAssembly module. This code shows how errors from the Wasm module will be captured by Sentry.

LANGUAGE: javascript
CODE:
function executeInternalWasmStuff() {
  throw new Error("whoops");
}

const { instance } = await WebAssembly.instantiateStreaming(
  fetch("very-complex-module.wasm"), {
    env: {
      external_func: executeInternalWasmStuff,
    }
  }
);

instance.exports.internal_func();

----------------------------------------

TITLE: Manual Sentry SDK Initialization in Lambda Handler
DESCRIPTION: JavaScript code showing manual initialization of Sentry SDK in Lambda function code. Demonstrates proper setup with error handling and performance monitoring, including handler wrapping for automatic instrumentation.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/serverless");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Add Tracing by setting tracesSampleRate and adding integration
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
});

exports.handler = Sentry.wrapHandler(async (event, context) => {
  // Your handler code
});

----------------------------------------

TITLE: Initializing Sentry with OpenFeature - Track Single Client
DESCRIPTION: Implements Sentry with OpenFeature integration for tracking feature flag evaluations on a specific client instance. Shows Sentry setup, OpenFeature client configuration, and feature flag usage with error handling.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nuxt';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Modifying Laravel Exception Handler for Sentry Integration
DESCRIPTION: This PHP snippet shows how to modify the Laravel exception handler to integrate Sentry for error reporting. It includes methods for reporting exceptions to Sentry and rendering 500 errors correctly for Laravel versions 5 to 5.4.

LANGUAGE: php
CODE:
<?php

use Symfony\Component\HttpKernel\Exception\HttpException;

class Handler extends ExceptionHandler
{
    public function report(Exception $exception)
    {
        if (app()->bound('sentry') && $this->shouldReport($exception)) {
            app('sentry')->captureException($exception);
        }

        parent::report($exception);
    }

    // This method is ONLY needed for Laravel 5 up to 5.4.
    // You can skip this method if you are using Laravel 5.5+.
    public function render($request, Exception $exception)
    {
        // Convert all non-http exceptions to a proper 500 http exception
        // if we don't do this exceptions are shown as a default template
        // instead of our own view in resources/views/errors/500.blade.php
        if ($this->shouldReport($exception) && !$this->isHttpException($exception) && !config('app.debug')) {
            $exception = new HttpException(500, 'Whoops!');
        }

        return parent::render($request, $exception);
    }
}

----------------------------------------

TITLE: Configuring Sentry Integrations for Node.js Runtime in Nuxt
DESCRIPTION: Add Node.js-specific integrations to the Sentry.init function in the public/instrument.server.mjs file. This configuration applies to the Node.js runtime.

LANGUAGE: javascript
CODE:
// public/instrument.server.mjs
Sentry.init({
  // other configuration options
  integrations: [
    new Sentry.Integrations.RequestData(),
    // Add other Node.js-specific integrations here
  ],
});

----------------------------------------

TITLE: Setting Custom Tag for Page Locale in Sentry with Python
DESCRIPTION: This code sets a custom tag in Sentry to track the page locale. It uses the set_tag function from sentry_sdk to associate the key 'page.locale' with the value 'de-at', representing the German (Austria) locale.

LANGUAGE: python
CODE:
from sentry_sdk import set_tag

set_tag("page.locale", "de-at")

----------------------------------------

TITLE: Configuring Sentry Integration with React Router v3
DESCRIPTION: This snippet demonstrates how to initialize Sentry with React Router v3 integration. It shows the setup of routes and the configuration of Sentry.init() with the reactRouterV3BrowserTracingIntegration. This integration is supported for React Router versions >= 3.2.0 and < 4.0.0.

LANGUAGE: javascript
CODE:
import * as Router from "react-router";

import * as Sentry from "@sentry/react";

// Routes looks like this:
const routes = (
  <Route path="/">
    <Route path="organizations/">
      <Route path=":orgid" component={() => <div>OrgId</div>} />
      <Route path=":orgid/v1/:teamid" component={() => <div>Team</div>} />
    </Route>
  </Route>
);

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactRouterV3BrowserTracingIntegration({
      history: Router.browserHistory,
      // Must be Plain Routes.
      routes: Router.createRoutes(routes),
      match: Router.match,
    }),
  ],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Error Handling in Swift
DESCRIPTION: This snippet demonstrates how to start the Sentry SDK in Swift, with a custom beforeSend option that modifies the event fingerprint for NSURLErrorDomain errors. It extracts the failing URL and error code to create a unique fingerprint.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.beforeSend = { event in
        if let error = event.error as NSError?, error.domain == NSURLErrorDomain {
            if let failingUrl = error.userInfo[NSURLErrorFailingURLErrorKey] as? String {
                event.fingerprint = [
                    "{{ default }}",
                    failingUrl,
                    String(error.code),
                ]
            }
        }
        return event
    }
}

----------------------------------------

TITLE: Configuring Before-Send Hook in Sentry SDK
DESCRIPTION: This code snippet illustrates how to use the before-send hook provided by Sentry SDKs. This hook is invoked before an error or message event is sent and can be used to modify event data to remove sensitive information.

LANGUAGE: placeholder
CODE:
<PlatformContent includePath="configuration/before-send/" />

----------------------------------------

TITLE: Initializing Sentry SDK with Browser Tracing in Electron Renderer
DESCRIPTION: This snippet shows how to configure the Sentry SDK in an Electron renderer process with browser tracing enabled. It includes setting the DSN, integrating browser tracing, configuring the trace sample rate, and setting trace propagation targets.

LANGUAGE: javascript
CODE:
// BrowserTracing should only be configured in Electron renderer processes
import * as Sentry from "@sentry/electron/renderer";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [Sentry.browserTracingIntegration()],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
});

----------------------------------------

TITLE: Emitting a Distribution Metric in Flutter with Sentry
DESCRIPTION: This snippet shows how to emit a distribution metric using Sentry in a Flutter app. It measures the duration of an image download in milliseconds.

LANGUAGE: dart
CODE:
Sentry.metrics().distribution(
    'image_download_duration', // key
    value: 150,
    unit: DurationSentryMeasurementUnit.milliSecond,
    tags: {'type': 'thumbnail'},
);

----------------------------------------

TITLE: Initializing Sentry Performance Monitoring in Android (Kotlin)
DESCRIPTION: Configuration for enabling Performance-V2 and App Start Profiling features in Android using Kotlin. Sets up performance monitoring with Sentry Android SDK.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid

SentryAndroid.init(this) { options ->
  options.enablePerformanceV2 = true
  options.enableAppStartProfiling = true;
}

----------------------------------------

TITLE: Configuring Lifecycle Hook Tracking in Sentry
DESCRIPTION: Configuration for specifying which Vue component lifecycle hooks to track. Demonstrates how to customize hook tracking for monitoring specific component lifecycle events.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/nuxt";

Sentry.init({
  integrations: [
    Sentry.vueIntegration({
      tracingOptions: {
        trackComponents: true,
        hooks: ["mount", "update", "unmount"],
      },
    }),
  ],
});

----------------------------------------

TITLE: Configuring Sentry YAML Settings in Symfony
DESCRIPTION: Comprehensive YAML configuration for Sentry integration in Symfony applications, including DSN, error handling, tracing, and messenger settings. This configuration file should be placed in config/packages/sentry.yaml.

LANGUAGE: yaml
CODE:
sentry:
    dsn: "___PUBLIC_DSN___"
    register_error_listener: true
    register_error_handler: true
    options:
        integrations:
            - "sentry.integration.my_custom_integration"
        prefixes:
            - "/local_dir/"
        sample_rate: 1
        traces_sample_rate: 1
        traces_sampler: "sentry.callback.traces_sampler"
        profiles_sample_rate: 1
        attach_stacktrace: true
        attach_metric_code_locations: true
        context_lines: 5
        environment: "%kernel.environment%"
        logger: "php"
        spotlight: true
        spotlight_url: "http://localhost:8969"
        release: "5.0.x-dev"
        server_name: "localhost"
        ignore_exceptions:
            - "Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException"
        ignore_transactions:
            - "GET /helath"
        before_send: "sentry.callback.before_send"
        before_send_transaction: "sentry.callback.before_send_transaction"
        trace_propagation_targets:
          - 'example.com'
        tags:
            tag1: "value1"
            tag2: "value2"
        error_types: "E_ALL & ~E_NOTICE"
        max_breadcrumbs: 50
        before_breadcrumb: "sentry.callback.before_breadcrumb"
        in_app_exclude:
            - '%kernel.cache_dir%'
        in_app_include:
            - '%kernel.project_dir%'
        send_default_pii: true
        max_value_length: 1024
        transport: "sentry.transport"
        transport: "sentry.http_client"
        http_proxy: "proxy.example.com:8080"
        http_proxy_authentication: "user:password"
        http_connect_timeout: 15
        http_timeout: 10
        http_ssl_verify_peer: true
        http_compression: true
        capture_silenced_errors: true
        max_request_body_size: "medium"
        class_serializers:
            App\User: "App\\Sentry\\Serializer\\UserSerializer"
    messenger:
        enabled: true
        capture_soft_fails: false

    tracing:
        enabled: true
        dbal:
            enabled: true
            connections:
                - default
        twig:
            enabled: true
        cache:
            enabled: true
        http_client:
            enabled: true
        console:
            excluded_commands:
                - app:command

----------------------------------------

TITLE: Tracking Feature Flag Evaluations with Sentry Python SDK
DESCRIPTION: Demonstrates how to manually track feature flag evaluations using Sentry's generic API. This code records a feature flag evaluation and sends it to Sentry along with any captured exceptions. Currently only supports boolean flag evaluations.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.feature_flags import add_feature_flag

add_feature_flag('test-flag', False)  # Records an evaluation and its result.

sentry_sdk.capture_exception(Exception("Something went wrong!"))

----------------------------------------

TITLE: Customizing or Dropping Error Events (C#)
DESCRIPTION: Use the SetBeforeSend callback to customize or drop captured error events based on specific conditions. This example drops errors for 'fakeMutation' operations.

LANGUAGE: csharp
CODE:
options.SetBeforeSend((@event, hint) =>
{
    return @event.Breadcrumbs.Any(b => b.Type == "graphql" && b?.Data?["operation_name"] == "fakeMutation")
        ? null  // Ignore errors for fakeMutations
        : @event;
});

----------------------------------------

TITLE: Clearing Sentry User Data - Kotlin Implementation
DESCRIPTION: Shows how to remove user data from the Sentry scope using Kotlin. Uses the configureScope function with a lambda to set the user property to null.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.configureScope { scope ->
  scope.user = null
}

----------------------------------------

TITLE: Sending Metric with Tags and Units
DESCRIPTION: Demonstrates sending an increment metric with custom units and tags using the Sentry CLI.

LANGUAGE: bash
CODE:
sentry-cli send-metric increment -n "MyMetric" -u "MyUnit" -t "tag1:val1","tag2:val2"

----------------------------------------

TITLE: Creating a Test Error in SvelteKit Frontend Component
DESCRIPTION: Example of adding a button to a SvelteKit component that throws an intentional error for testing Sentry integration.

LANGUAGE: javascript
CODE:
<button
  on:click={() => {
    throw new Error("Sentry Frontend Error");
  }}
>
  Throw error
</button>

----------------------------------------

TITLE: Creating Top-Level Span Using Current Transaction in Ruby Rails Controller
DESCRIPTION: This snippet shows how to manually access the current Sentry transaction and create a top-level child span within a Rails controller action. It demonstrates setting span attributes and handling order item processing.

LANGUAGE: ruby
CODE:
class OrdersController < ApplicationController
  def create
    order = Order.new
    transaction = Sentry.get_current_scope.get_transaction

    transaction.with_child_span(op: :process_items, description: 'processing items') do |span|
      span.set_data(:key, 'value')
      order.process_items(params)
    end # the child span ends with the block
  end
end

----------------------------------------

TITLE: Optimizing Database Queries with Promise.all() in Node.js
DESCRIPTION: Improved version of the database queries using Promise.all() to execute queries in parallel, significantly reducing transaction duration. This approach executes both the user selection and count queries simultaneously.

LANGUAGE: javascript
CODE:
const [result, count] = await Promise.all([
  db.query("SELECT * FROM USERS"),
  db.query("SELECT COUNT(*) FROM USERS"),
]);
processMyData({ result, count });

----------------------------------------

TITLE: Applying Scope Data to Events in Java and Kotlin
DESCRIPTION: Demonstrates how scope data from global, isolation, and current scopes is applied to events in Java and Kotlin.

LANGUAGE: java
CODE:
Sentry.configureScope(ScopeType.GLOBAL, scope -> {
  scope.setExtra("shared", "global");
  scope.setExtra("global", "data");
});

Sentry.configureScope(ScopeType.ISOLATION, scope -> {
  scope.setExtra("shared", "isolation");
  scope.setExtra("isolation", "data");
});

Sentry.configureScope(ScopeType.CURRENT, scope -> {
  scope.setExtra("shared", "current");
  scope.setExtra("current", "data");
});

Sentry.captureException(new Exception("my error"));
// --> Will have the following extra:
// { shared: 'current', global: 'data', isolation: 'data', current: 'data' }

LANGUAGE: kotlin
CODE:
Sentry.configureScope(ScopeType.GLOBAL) { scope ->
  scope.setExtra("shared", "global")
  scope.setExtra("global", "data")
}

Sentry.configureScope(ScopeType.ISOLATION) { scope ->
  scope.setExtra("shared", "isolation")
  scope.setExtra("isolation", "data")
}

Sentry.configureScope(ScopeType.CURRENT) { scope ->
  scope.setExtra("shared", "current")
  scope.setExtra("current", "data")
}

Sentry.captureException(Exception("my error"))
// --> Will have the following extra:
// { shared: 'current', global: 'data', isolation: 'data', current: 'data' }

----------------------------------------

TITLE: Basic Sentry Flutter SDK Configuration
DESCRIPTION: Initializes the Sentry SDK with basic configuration including DSN, performance monitoring, and profiling settings. Demonstrates the standard setup pattern using SentryFlutter.init().

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) {
      options.dsn = '___PUBLIC_DSN___';
      // Adds request headers and IP for users,
      // visit: https://docs.sentry.io/platforms/dart/guides/flutter/data-management/data-collected/ for more info
      options.sendDefaultPii = true;
      // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.
      // We recommend adjusting this value in production.
      options.tracesSampleRate = 1.0;
      // The sampling rate for profiling is relative to tracesSampleRate
      // Setting to 1.0 will profile 100% of sampled transactions:
      // Note: Profiling alpha is available for iOS and macOS since SDK version 7.12.0
      options.profilesSampleRate = 1.0;
    },
    appRunner: () => runApp(
      SentryWidget(
        child: MyApp(),
      ),
    ),
  );

  // you can also configure SENTRY_DSN, SENTRY_RELEASE, SENTRY_DIST, and
  // SENTRY_ENVIRONMENT via Dart environment variable (--dart-define)
}

----------------------------------------

TITLE: Basic Sentry Flutter SDK Configuration
DESCRIPTION: Initializes the Sentry SDK with basic configuration including DSN, performance monitoring, and profiling settings. Demonstrates the standard setup pattern using SentryFlutter.init().

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) {
      options.dsn = '___PUBLIC_DSN___';
      // Adds request headers and IP for users,
      // visit: https://docs.sentry.io/platforms/dart/guides/flutter/data-management/data-collected/ for more info
      options.sendDefaultPii = true;
      // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.
      // We recommend adjusting this value in production.
      options.tracesSampleRate = 1.0;
      // The sampling rate for profiling is relative to tracesSampleRate
      // Setting to 1.0 will profile 100% of sampled transactions:
      // Note: Profiling alpha is available for iOS and macOS since SDK version 7.12.0
      options.profilesSampleRate = 1.0;
    },
    appRunner: () => runApp(
      SentryWidget(
        child: MyApp(),
      ),
    ),
  );

  // you can also configure SENTRY_DSN, SENTRY_RELEASE, SENTRY_DIST, and
  // SENTRY_ENVIRONMENT via Dart environment variable (--dart-define)
}

----------------------------------------

TITLE: Implementing SentrySpanProcessor in TypeScript
DESCRIPTION: This code snippet shows how to implement a custom SpanProcessor that transforms OpenTelemetry spans to Sentry spans. It handles span creation, updating, and finishing, as well as error generation from OpenTelemetry exception events.

LANGUAGE: typescript
CODE:
import { SpanProcessor } from '@opentelemetry/sdk-trace-base';
import { Span as OpenTelemetrySpan, trace } from '@opentelemetry/api';
import { Span as SentrySpan } from '@sentry/tracing';

const MAP = Map<SentrySpan['spanId'], SentrySpan> = new Map<SentrySpan['spanId'], SentrySpan>();

class SentrySpanProcessor implements SpanProcessor {
  constructor() {
    Sentry.addGlobalEventProcessor(event => {
      const otelSpan = trace.getActiveSpan();
      if (!otelSpan) {
        return event;
      }

      // If event has already set `trace` context, use that one.
      event.contexts = {
        trace: {
          trace_id: otelSpan.spanContext().traceId,
          span_id: otelSpan.spanContext().spanId,
        },
        ...event.contexts
      };
      return event;
    });
  }

  onStart(otelSpan: OpenTelemetrySpan): void {
    const hub = Sentry.getCurrentHub();
    if (!hub) return;

    const otelSpanId = otelSpan.spanContext().spanId;
    const otelParentSpanId = otelSpan.parentSpanId;

    // Otel supports having multiple non-nested spans at the same time
    // so we cannot use hub.getSpan(), as we cannot rely on this being on the current span
    const sentryParentSpan = otelParentSpanId && MAP.get(otelParentSpanId);

    if (sentryParentSpan) {
      const sentryChildSpan = sentryParentSpan.startChild({
        description: otelSpan.name,
        instrumenter: 'otel',
        startTimestamp: convertOtelTimeToSeconds(otelSpan.startTime),
        spanId: otelSpanId,
      });

      MAP.set(otelSpanId, sentryChildSpan);
    } else {
      const traceCtx = getTraceData(otelSpan);
      const transaction = hub.startTransaction({
        name: otelSpan.name,
        ...traceCtx,
        instrumenter: 'otel',
        startTimestamp: convertOtelTimeToSeconds(otelSpan.startTime),
        spanId: otelSpanId,
      });

      MAP.set(otelSpanId, transaction);
    }
  }

  onEnd(otelSpan: OpenTelemetrySpan): void {
    const otelSpanId = otelSpan.spanContext().spanId;
    const sentrySpan = MAP.get(otelSpanId);

     // Func definition is explained in Step 2
    if isSentryRequest(otelSpanId) {
      // This is a request to Sentry, so we don't want to finish the transaction/span (so it isn't sent to Sentry)
      MAP.delete(otelSpanId);
      return;
    }

    generateSentryErrorsFromOtelSpan(otelSpan);

    if (sentrySpan instanceof Transaction) {
      updateTransactionWithOtelData(sentrySpan, otelSpan);
      finishTransactionWithContextFromOtelData(sentrySpan, otelSpan);
    } else {
      updateSpanWithOtelData(sentrySpan, otelSpan);
      sentrySpan.finish(convertOtelTimeToSeconds(otelSpan.endTime));
    }

    MAP.delete(otelSpanId);
  }
}

----------------------------------------

TITLE: Adding Sentry Dependency to Cargo.toml for Rust Projects
DESCRIPTION: This code snippet shows how to add the Sentry dependency to a Rust project's Cargo.toml file. It specifies the sentry package with a version placeholder that would be replaced with the actual version number.

LANGUAGE: toml
CODE:
[dependencies]
sentry = "{{@inject packages.version('sentry.rust') }}"

----------------------------------------

TITLE: Implementing Nested Sentry Spans
DESCRIPTION: Demonstrates how to create nested performance monitoring spans using Sentry.startSpan(). Shows parent-child span relationship for detailed performance tracking of complex operations.

LANGUAGE: javascript
CODE:
const result = await Sentry.startSpan(
  {
    name: "Important Function",
  },
  async () => {
    const res = await Sentry.startSpan({ name: "Child Span" }, () => {
      return expensiveAsyncFunction();
    });

    return updateRes(res);
  }
);

----------------------------------------

TITLE: Uploading Attachment to Sentry Scope in C#
DESCRIPTION: Add an attachment to the Sentry scope, either globally or locally, to be sent with events.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.AddAttachment("path/to/file.log");
});

----------------------------------------

TITLE: Implementing Time To Initial Display in React Native with Sentry
DESCRIPTION: This snippet shows how to use the Sentry.TimeToInitialDisplay component to manually record Time To Initial Display in a React Native application. The component is placed within a View and the 'record' prop is set to true to enable measurement.

LANGUAGE: jsx
CODE:
import * as Sentry from "@sentry/react-native";
import * as React from "react";
import { View } from "react-native";

function MyComponent() {
  return (
    <View>
      <Sentry.TimeToInitialDisplay record={true} />
    </View>
  );
}

----------------------------------------

TITLE: Initializing Sentry with OpenFeature Single Client Tracking
DESCRIPTION: Sets up Sentry monitoring with OpenFeature SDK to track feature flag evaluations for a specific client instance. Shows SDK initialization and adding the integration hook to a single OpenFeature client.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/vue';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Initializing Sentry with HTTP Client via Loader v7
DESCRIPTION: Implements Sentry with HTTP client integration using the v7 Loader script. Configures monitoring through window.sentryOnLoad callback and loads required scripts with integrity checks.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({
      // This option is required for capturing headers and cookies.
      sendDefaultPii: true,
    });

    if (Sentry.httpClientIntegration) {
      Sentry.addIntegration(Sentry.httpClientIntegration());
    }
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/7.118.0/httpclient.min.js"
  integrity="sha384-8MAyqW/E9fuqd5JmBqR/UN56Anxd7O06nt+PUTE5G6rRCLsApJc9qoc1cZl9tiQU"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Initializing Sentry with Breadcrumb Filtering in Kotlin
DESCRIPTION: This snippet shows how to initialize Sentry in Kotlin and set up a custom breadcrumb filter. It uses a lambda function to check if the hint is of type MyHint and discards the breadcrumb if true, otherwise returning the original breadcrumb.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.BeforeBreadcrumb

Sentry.init { options ->
  options.beforeBreadcrumb = BeforeBreadcrumbCallback { breadcrumb, hint ->
    if (hint is MyHint) {
      null
    } else {
      breadcrumb
    }
  }
}

----------------------------------------

TITLE: Verifying Socket Integration Implementation
DESCRIPTION: Example code demonstrating how to verify the Socket integration by creating a transaction and performing socket operations that will be tracked as spans.

LANGUAGE: python
CODE:
import socket

def main():
    sentry_init(...)  # same as above
    with sentry_sdk.start_transaction(name="testing_sentry"):
        timeout = 10
        socket.getaddrinfo("sentry.io", 443)
        socket.create_connection(("sentry.io", 443), timeout, None)
main()

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Release in Python
DESCRIPTION: This code initializes the Sentry SDK with a custom release version. It demonstrates how to set a human-readable release identifier instead of relying on the default SENTRY_RELEASE environment variable or inferred git commit SHA.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    # ...

    # By default the SDK will try to use the SENTRY_RELEASE
    # environment variable, or infer a git commit
    # SHA as release, however you may want to set
    # something more human-readable.
    release="myapp@1.0.0",
)

----------------------------------------

TITLE: Customizing Error Events for GraphQL Client Errors
DESCRIPTION: Use a BeforeSendCallback to customize or drop error events for GraphQL client errors.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.BeforeSendCallback
import com.apollographql.apollo3.api.http.HttpRequest
import com.apollographql.apollo3.api.http.HttpResponse
import io.sentry.TypeCheckHint.APOLLO_REQUEST
import io.sentry.TypeCheckHint.APOLLO_RESPONSE

Sentry.init { options ->
  // Add a callback that will be used before the event is sent to Sentry.
  // With this callback, you can modify the event or, when returning null, also discard the event.
  options.beforeSend = BeforeSendCallback { event, hint ->
    val request = hint.getAs(APOLLO_REQUEST, HttpRequest::class.java)
    val response = hint.getAs(APOLLO_RESPONSE, HttpResponse::class.java)

    // customize or drop the event
    event
  }
}

----------------------------------------

TITLE: Configuring Duplicate Event Detection in Sentry C# SDK
DESCRIPTION: Example showing how to configure specific duplicate event detection modes during Sentry SDK initialization. Sets DeduplicateMode to handle only SameEvent and SameExceptionInstance cases.

LANGUAGE: csharp
CODE:
SentrySdk.Init(options => {
  // ... configure other options here
  options.DeduplicateMode = DeduplicateMode.SameEvent | DeduplicateMode.SameExceptionInstance;
})

----------------------------------------

TITLE: Implementing Check-In Monitoring with Sentry in JavaScript
DESCRIPTION: This snippet demonstrates how to implement check-in monitoring using Sentry. It shows the two-step process of notifying Sentry when a job starts and when it completes successfully. The code uses the captureCheckIn method with different status values.

LANGUAGE: javascript
CODE:
// 🟡 Notify Sentry your job is running:
const checkInId = Sentry.captureCheckIn({
  monitorSlug: "<monitor-slug>",
  status: "in_progress",
});

// Execute your scheduled task here...

// 🟢 Notify Sentry your job has completed successfully:
Sentry.captureCheckIn({
  // Make sure this variable is named `checkInId`
  checkInId,
  monitorSlug: "<monitor-slug>",
  status: "ok",
});

----------------------------------------

TITLE: Logging with ThreadContext in Java and Kotlin
DESCRIPTION: Demonstrates how to use ThreadContext to add extra information to log events sent to Sentry. This includes setting environment and OS information as context data.

LANGUAGE: java
CODE:
import org.apache.logging.log4j.ThreadContext;

void logWithExtras() {
  // ThreadContext ("MDC") extras
  ThreadContext.put("Environment", "Development");
  ThreadContext.put("OS", "Linux");

  // This sends an event where the Environment and OS ThreadContext values are set as Context Data entries
  logger.error("This is a test");
}

LANGUAGE: kotlin
CODE:
import org.apache.logging.log4j.ThreadContext

fun logWithExtras() {
  // ThreadContext ("MDC") extras
  ThreadContext.put("Environment", "Development")
  ThreadContext.put("OS", "Linux")

  // This sends an event where the Environment and OS ThreadContext values are set as Context Data entries
  logger.error("This is a test")
}

----------------------------------------

TITLE: Importing ContextLines Integration in Sentry (JavaScript)
DESCRIPTION: Shows how to import the ContextLines integration in Sentry. This integration adds source code to stack frames, enhancing error visibility in the Sentry UI.

LANGUAGE: javascript
CODE:
Sentry.contextLinesIntegration

----------------------------------------

TITLE: Initializing Sentry SDK with Deduplication
DESCRIPTION: Sets up Sentry error tracking by importing the Node SDK and initializing it with a DSN and deduplication integration. The DSN placeholder needs to be replaced with an actual project DSN from Sentry dashboard.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.dedupeIntegration()],
});

----------------------------------------

TITLE: Initializing Sentry with Delayed Replay Integration
DESCRIPTION: Shows a two-step process for Sentry setup where the main SDK is initialized first with empty integrations, followed by dynamically adding the replay integration through lazy loading from the @sentry/astro package.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Note, Replay is NOT instantiated below:
  integrations: [],
});

// Sometime later
import("@sentry/astro").then(lazyLoadedSentry => {
  Sentry.addIntegration(lazyLoadedSentry.replayIntegration());
});

----------------------------------------

TITLE: Configuring Sentry with Timber Integration in Kotlin
DESCRIPTION: Initialize Sentry Android SDK with Timber integration, setting event and breadcrumb levels. This should be done early in the application lifecycle.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.android.timber.SentryTimberIntegration
import timber.log.Timber
// import BuildConfig

SentryAndroid.init(this) { options ->
  if (!BuildConfig.DEBUG) {

    // default values:
    // minEventLevel = ERROR
    // minBreadcrumbLevel = INFO
    options.addIntegration(
      SentryTimberIntegration(
        minEventLevel = SentryLevel.ERROR,
        minBreadcrumbLevel = SentryLevel.INFO
      )
    )
  } else {
    Timber.plant(Timber.DebugTree())
  }
}

----------------------------------------

TITLE: Initializing Sentry for Node.js with npm
DESCRIPTION: This snippet demonstrates how to import and initialize Sentry for a Node.js application. It sets up the DSN and includes the request data integration for capturing additional context in error reports.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.requestDataIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry SDK with gRPC Integration for Client
DESCRIPTION: Initialize Sentry SDK with GRPCIntegration for client-side instrumentation. This setup enables performance tracing and profiling for outgoing gRPC requests.

LANGUAGE: python
CODE:
import grpc

import sentry_sdk
from sentry_sdk.integrations.grpc import GRPCIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
    integrations=[
        GRPCIntegration(),
    ],
)

...

# this works with synchronous clients:
with grpc.insecure_channel("example.com:12345") as channel:
    ...

# ... and asynchronous clients:
async with grpc.aio.insecure_channel("example.com:12345") as channel:
    ...

----------------------------------------

TITLE: Initializing Sentry PHP SDK with Event Filtering
DESCRIPTION: Sets up Sentry error tracking with custom event filtering logic. The before_send callback is configured to ignore events where the original exception is an instance of MyException. Requires the Sentry PHP SDK to be installed and MyException class to be defined.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'before_send' => function (\Sentry\Event $event, ?\Sentry\EventHint $hint): ?\Sentry\Event {
        // Ignore the event if the original exception is an instance of MyException
        if ($hint !== null && $hint->exception instanceof MyException) {
          return null;
        }

        return $event;
    },
]);

----------------------------------------

TITLE: Configuring Automatic Session Tracking in Sentry SDK
DESCRIPTION: This snippet shows how to configure automatic session tracking for release health monitoring. The specific implementation details will depend on the platform being used.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="configuration/auto-session-tracking" />

----------------------------------------

TITLE: Installing Sentry SDK for Ruby
DESCRIPTION: This snippet demonstrates how to install the Sentry SDK for Ruby using Bundler. It includes the Sentry gem in the Gemfile and specifies the version to use.

LANGUAGE: ruby
CODE:
gem "sentry-ruby"

----------------------------------------

TITLE: Configuring OkHttpClient with Sentry Integration
DESCRIPTION: Configuration of OkHttpClient with SentryOkHttpInterceptor and SentryOkHttpEventListener for request tracking.

LANGUAGE: kotlin
CODE:
private val client = OkHttpClient.Builder()
  .addInterceptor(SentryOkHttpInterceptor())
  .eventListener(SentryOkHttpEventListener())
  .build()

LANGUAGE: java
CODE:
private final OkHttpClient client = new OkHttpClient.Builder()
  .addInterceptor(new SentryOkHttpInterceptor())
  .eventListener(new SentryOkHttpEventListener())
  .build();

----------------------------------------

TITLE: Initializing Sentry with LaunchDarkly Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with LaunchDarkly integration, set up the LaunchDarkly client, evaluate a feature flag, and capture an exception. It requires the '@sentry/solidstart' and 'launchdarkly-js-client-sdk' packages.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solidstart';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Manually Creating and Capturing a Complex Sentry Event in C
DESCRIPTION: This example shows how to create a more complex event manually. It demonstrates creating an event, setting custom attributes like message and screen size, and capturing the event. This approach allows for more detailed and customized event data.

LANGUAGE: c
CODE:
sentry_value_t event = sentry_value_new_event();
sentry_value_set_by_key(event, "message", sentry_value_new_string("Hello!"));

sentry_value_t screen = sentry_value_new_object();
sentry_value_set_by_key(screen, "width", sentry_value_new_int32(1920));
sentry_value_set_by_key(screen, "height", sentry_value_new_int32(1080));

sentry_value_t contexts = sentry_value_new_object();
sentry_value_set_by_key(contexts, "screen_size", screen);

sentry_value_set_by_key(event, "contexts", contexts);
sentry_capture_event(event);

----------------------------------------

TITLE: Registering Sentry Error Handlers in PHP
DESCRIPTION: PHP code to set up automatic error and exception capturing. This registers exception, error, and shutdown function handlers using the Sentry client.

LANGUAGE: php
CODE:
$error_handler = new Raven_ErrorHandler($client);
$error_handler->registerExceptionHandler();
$error_handler->registerErrorHandler();
$error_handler->registerShutdownFunction();

----------------------------------------

TITLE: Initializing Sentry with NDK Scope Synchronization in React Native
DESCRIPTION: This snippet demonstrates how to initialize Sentry in a React Native application with NDK scope synchronization enabled. It imports Sentry from the react-native package, sets the DSN, and enables the enableNdkScopeSync option for synchronizing JS and native scopes.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  enableNdkScopeSync: true,
});

----------------------------------------

TITLE: Initializing Sentry Reporter via NPM
DESCRIPTION: Setup of Sentry Reporting Observer integration using NPM package import. Initializes Sentry with empty integrations and adds the reporting observer integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  integrations: [],
});

Sentry.addIntegration(Sentry.reportingObserverIntegration());

----------------------------------------

TITLE: Integrating Sentry with Unleash Feature Flags in Vue.js (Deprecated)
DESCRIPTION: This snippet demonstrates the deprecated method of integrating Sentry with Unleash feature flags. It initializes Sentry and Unleash, and shows how to use feature flags and capture exceptions.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/vue';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({unleashClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Adding Atlas Session ID to Sentry Events in JavaScript
DESCRIPTION: This code snippet shows how to add the Atlas session ID as a tag to Sentry events using the Sentry JavaScript SDK. It uses an event processor to modify the event before sending it to Sentry.

LANGUAGE: javascript
CODE:
Sentry.addEventProcessor((event) => {
  event.tags = {
    ...(event.tags || {}),
    ["atlasSupport.sessionId"]: window.Atlas?.recording?.getSessionId(),
  };
  return event;
});

----------------------------------------

TITLE: Implementing Sentry Before Send Check-In Service in PHP
DESCRIPTION: This PHP class implements the service for the 'before_send_check_in' option. It defines a method that returns a callable function to process Sentry events, discarding them if the check-in environment is not 'production'.

LANGUAGE: php
CODE:
<?php

namespace App\Service;

class Sentry
{
    public function getBeforeSendCheckIn(): callable
    {
        return function (\Sentry\Event $event): ?\Sentry\Event {
            $checkIn = $event->getCheckIn();
            $checkInEnvironment = $checkIn->getEnvironment();

            if ($checkInEnvironment !== 'production') {
                return null;
            }

            return $event;
        }
    }
}

----------------------------------------

TITLE: Setting Sentry Environment Variable
DESCRIPTION: Environment variable configuration for Sentry DSN in .env file.

LANGUAGE: shell
CODE:
SENTRY_LARAVEL_DSN=___PUBLIC_DSN___

----------------------------------------

TITLE: Initializing Sentry Performance V2 in Kotlin
DESCRIPTION: Configuration code to enable Performance V2 features in Sentry Android SDK using Kotlin. Requires SDK version 7.4.0 or above.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid

SentryAndroid.init(this) { options ->
  options.enablePerformanceV2 = true
}

----------------------------------------

TITLE: Configuring User Feedback Widget in Swift using Sentry SDK
DESCRIPTION: Demonstrates how to configure the User Feedback widget by setting up success and error handlers in SentryOptions. This configuration is done during SDK initialization and enables the feedback widget in the application.

LANGUAGE: swift
CODE:
SentrySDK.start { options in
    options.configureUserFeedback = { config in
         config.onSubmitSuccess = { data in
              print("Feedback submitted successfully: \(data)")
         }
         config.onSubmitError = { error in
              print("Failed to submit feedback: \(error)")
         }
    }
}

----------------------------------------

TITLE: Capturing Breadcrumbs
DESCRIPTION: Shows how to capture breadcrumbs for tracking application state and events leading to errors.

LANGUAGE: javascript
CODE:
Raven.context(function () {
  Raven.captureBreadcrumb({
    message: "Received payment confirmation",
    category: "payment",
    data: {
      amount: 312
    }
  });
  // errors thrown here will have breadcrumb attached
});

----------------------------------------

TITLE: Creating Sentry Attachment in Objective-C
DESCRIPTION: This snippet shows how to create a Sentry Attachment object in Objective-C using a file path. It requires the Sentry SDK to be imported and properly set up in the project.

LANGUAGE: objc
CODE:
@import Sentry;

SentryAttachment *attachment =
  [[SentryAttachment alloc] initPath:@"your/path/file.log"];

----------------------------------------

TITLE: Setting Hashed Tag Value in Sentry
DESCRIPTION: Sets a custom tag in Sentry using setTag() method while hashing sensitive data (birthday) before storing it. This helps maintain privacy while still allowing for data correlation.

LANGUAGE: javascript
CODE:
Sentry.setTag("birthday", checksumOrHash("08/12/1990"));

----------------------------------------

TITLE: Filtering Events with before-send in JavaScript
DESCRIPTION: This snippet demonstrates how to use the before-send callback to filter events based on custom logic. It checks if the event is related to a specific error type and modifies the event fingerprint accordingly.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event, hint) {
    const error = hint.originalException;
    if (error && error.name === "TypeError") {
      event.fingerprint = ["TypeError", error.message];
    }
    return event;
  },
});

----------------------------------------

TITLE: Installing Sentry Gradle Plugin
DESCRIPTION: Shows how to add the Sentry Gradle plugin to a project's build.gradle file in both Groovy and Kotlin DSL formats.

LANGUAGE: groovy
CODE:
plugins {
    id "io.sentry.jvm.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.9.0') }}"
}

LANGUAGE: kotlin
CODE:
plugins {
    id("io.sentry.jvm.gradle") version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.9.0') }}"
}

----------------------------------------

TITLE: Installing Sentry SDK for React with Capacitor
DESCRIPTION: Commands to install Sentry Capacitor SDK with React integration using npm, yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
# npm
npm install @sentry/capacitor @sentry/react --save

# yarn
yarn add @sentry/capacitor @sentry/react

# pnpm
pnpm add @sentry/capacitor @sentry/react

----------------------------------------

TITLE: Implementing Custom Trace Sampler Class in C++
DESCRIPTION: Defines a custom trace sampler class that implements different sampling rates based on game modes. Handles ranked matches at 50%, quick matches at 20%, training matches at 0%, and other modes at 10% sampling rate.

LANGUAGE: cpp
CODE:
UCLASS()
class USomeTraceSampler : public USentryTraceSampler
{
	GENERATED_BODY()

public:
	virtual bool Sample_Implementation(USentrySamplingContext* samplingContext, float& samplingValue) override
    {
        const FString& gameMode =
            *samplingContext->GetCustomSamplingContext().Find("GameMode");

        if (gameMode.Equals(TEXT("ranked")))
        {
            // Ranked matches are important - take a big sample
            samplingValue = 0.5;
        }
        else if (gameMode.Equals(TEXT("quick_match")))
        {
            // Quick matches less important and happen more frequently - only take 20%
            samplingValue = 0.2;
        }
        else if (gameMode.Equals(TEXT("training")))
        {
            // Training matches are just noise - drop all transactions
            samplingValue = 0.0;
        }
        else
        {
            // Default sample rate for other game modes
            samplingValue = 0.1;
        }

	    return true;

        // Or return false to fallback to options.TracesSampleRate (1.0 in this case)
    }
};

----------------------------------------

TITLE: Instrumenting Queue Producer in C#
DESCRIPTION: Demonstrates how to instrument a queue producer using Sentry's SDK. Creates a transaction and span for queue publishing, sets required span data attributes, and includes trace headers for consumer correlation.

LANGUAGE: csharp
CODE:
var connection = MyCustomQueue.Connect();

// The message you want to send to the queue
var queue = "messages";
var message = "Hello World!";
var messageId = "abc123";
var sentryTrace = SentrySdk.getTraceHeader()?.ToString();
var baggage = SentrySdk.getBaggage()?.ToString();

// Create transaction
var transaction = SentrySdk.StartTransaction(
    "queue_producer_transaction",
    "function"
);

// Create the span
var span = transaction.StartChild(
    "queue.publish",
    "queue_producer"
);

// Set span data
span.SetExtra("messaging.message.id", messageId);
span.SetExtra("messaging.destination.name", queue);
span.SetExtra("messaging.message.body.size", Encoding.UTF8.GetByteCount(message));

// Publish the message to the queue (including current time stamp)
var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
connection.Publish(
    queue,
    message,
    now,
    sentryTrace,
    baggage
);

span.Finish();
transaction.Finish();

----------------------------------------

TITLE: Configuring Sentry Plugin for SvelteKit with Vite in JavaScript
DESCRIPTION: This snippet demonstrates how to configure the Sentry plugin for a SvelteKit project using Vite. It includes options for source map uploads and specifies a custom application key.

LANGUAGE: javascript
CODE:
export default defineConfig({
  plugins: [
    sentrySvelteKit({
      sourceMapsUploadOptions: {
        unstable_sentryVitePluginOptions: {
          applicationKey: "your-custom-application-key",
        },
      },
    })
  ]
});

----------------------------------------

TITLE: Uploading Debug Files with Sentry CLI
DESCRIPTION: Command to upload debug files to Sentry with wait flag to ensure files are processed before sending crash reports. The wait flag makes the command block until the upload is complete.

LANGUAGE: shell
CODE:
sentry-cli debug-files upload --wait

----------------------------------------

TITLE: Setting Sentry User Data in Node.js Route Handler
DESCRIPTION: This snippet illustrates how to set user data for Sentry error tracking within a Node.js route handler. It requires the Sentry Node.js SDK and assumes access to user information through the request object.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

// Your route handler, for example:
app.get("/my-route", (req, res) => {
  // Get the user from somewhere
  const user = req.user;

  // Set the user data for this request only
  Sentry.setUser({
    id: user.id,
    email: user.email,
    username: user.username,
  });

  res.send("Hello World");
});

----------------------------------------

TITLE: Initializing Sentry SDK with Crash Handling in Objective-C
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in Objective-C with a configuration for handling crashes from the last run. It sets the DSN and defines a block for the onCrashedLastRun option.

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.onCrashedLastRun = ^void(SentryEvent * _Nonnull event) {
        // capture user feedback
    };
}];

----------------------------------------

TITLE: Verifying Sentry Integration with Quart Application
DESCRIPTION: Demonstrates how to set up a basic Quart application with Sentry integration. This example includes error generation to verify Sentry's error reporting and transaction creation.

LANGUAGE: python
CODE:
from quart import Quart

sentry_sdk.init(...)  # same as above

app = Quart(__name__)

@app.route("/")
async def hello():
    1/0  # raises an error
    return {"hello": "world"}

app.run()

----------------------------------------

TITLE: Web Worker With Sentry Initialization
DESCRIPTION: Example of a Web Worker with Sentry initialization, enabling both manual error capturing and automatic error tracking.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
});

self.onmessage = (message) => {
  // This message will be captured
  Sentry.captureMessage("Message received");

  // This error will also be captured.
  throw new Error();
};

----------------------------------------

TITLE: Enabling ANR Detection for Electron Renderer Processes
DESCRIPTION: This code shows how to initialize Sentry with ANR detection for Electron renderer processes. It uses the anrDetection option with stack trace capture enabled.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/renderer";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  anrDetection: { captureStackTrace: true },
});

----------------------------------------

TITLE: Configuring Sentry Trace Sampling in Go
DESCRIPTION: Demonstrates how to initialize Sentry with a custom trace sampling function that conditionally enables or disables tracing based on a condition. The sampler returns 0.0 to disable tracing or 1.0 to enable full tracing.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	// ...
	TracesSampler: sentry.TracesSampler(func(ctx sentry.SamplingContext) float64 {
		if condition {
			return 0.0
		}
		return 1.0
	}),
})

----------------------------------------

TITLE: Setting Document-Policy Headers in Next.js (CommonJS)
DESCRIPTION: Configures document response headers using CommonJS syntax in next.config.js. Sets up a Document-Policy header for JavaScript profiling on all routes.

LANGUAGE: javascript
CODE:
module.exports = withSentryConfig({
  async headers() {
    return [
      {
        source: "/:path*",
        headers: [
          {
            key: "Document-Policy",
            value: "js-profiling",
          },
        ],
      },
    ];
  },

  // ... other Next.js config options
});

----------------------------------------

TITLE: Capturing Error Message with Sentry SDK in Python
DESCRIPTION: Demonstrates how to capture and send a simple error message to Sentry using the capture_message function. This is useful for manual error reporting and custom notifications in your application monitoring.

LANGUAGE: python
CODE:
from sentry_sdk import capture_message

capture_message('Something went wrong')

----------------------------------------

TITLE: Initializing Sentry with Custom Error Handling in Go
DESCRIPTION: This snippet shows how to initialize Sentry with a custom BeforeSend function. The function checks for MyRPCError instances and customizes the event fingerprint using the error code and function name.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	// ...
	BeforeSend: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
		if ex, ok := hint.OriginalException.(MyRPCError); ok {
			event.Fingerprint = []string{"{{ default }}", ex.ErrorCode(), ex.FunctionName()}
		}

		return event
	},
})

----------------------------------------

TITLE: Setting Atlas Session ID as a Tag in Sentry Python SDK
DESCRIPTION: This code snippet demonstrates how to set the Atlas session ID as a tag using the Sentry Python SDK. It uses the set_tag method to add the session ID to Sentry events.

LANGUAGE: python
CODE:
sentry_sdk.set_tag("atlasSupport.sessionId", atlas_session_id)

----------------------------------------

TITLE: Uploading Multiple Attachments to Sentry using cURL
DESCRIPTION: Example of sending multiple file attachments to Sentry using a multipart form POST request. The request demonstrates uploading a minidump file along with additional attachments, with a total size limit of 20MB. Files will appear in the Event Attachments section of the Issue Details page.

LANGUAGE: bash
CODE:
curl -X POST \
  '___MINIDUMP_URL___' \
  -F upload_file_minidump=@mini.dmp \
  -F some_file=@some_file.txt \
  -F db_log=@db.log

----------------------------------------

TITLE: Manual Configuration with Custom Network Transport
DESCRIPTION: Demonstrates manual configuration of Sentry interceptors with custom NetworkTransport implementation.

LANGUAGE: java
CODE:
import com.apollographql.ApolloClient;
import com.apollographql.network.http.HttpNetworkTransport;
import io.sentry.apollo4.SentryApollo4HttpInterceptor;
import io.sentry.apollo4.SentryApollo4Interceptor;

ApolloClient apollo = new ApolloClient.Builder()
        .networkTransport(
            new HttpNetworkTransport.Builder()
                .serverUrl("https://your-api-host/")
                .addInterceptor(new SentryApollo4HttpInterceptor())
                .build())
        .addInterceptor(new SentryApollo4Interceptor())
        .build();

LANGUAGE: kotlin
CODE:
import com.apollographql.ApolloClient
import io.sentry.apollo4.SentryApollo4HttpInterceptor
import io.sentry.apollo4.SentryApollo4Interceptor
import com.apollographql.network.http.HttpNetworkTransport

val apollo = ApolloClient.builder()
    .networkTransport(
        HttpNetworkTransport.Builder()
            .serverUrl("https://apollo-fullstack-tutorial.herokuapp.com/graphql")
            .addInterceptor(SentryApollo4HttpInterceptor())
            .build()
    )
    .addInterceptor(SentryApollo4Interceptor())
    .build()

----------------------------------------

TITLE: Updated withSentryConfig Usage
DESCRIPTION: Example showing the migration from the old three-argument withSentryConfig pattern to the new two-argument pattern where Webpack plugin options and SDK options are combined.

LANGUAGE: javascript
CODE:
const nextConfig = {
  // Your Next.js options...
};

module.exports = withSentryConfig(nextConfig, {
  // Your Sentry Webpack Plugin Options...
  // AND your Sentry SDK options...
});

----------------------------------------

TITLE: Installing Sentry SDK for Django
DESCRIPTION: Command to install sentry-sdk package with Django integration support using pip

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[django]'

----------------------------------------

TITLE: Inefficient Django Query with N+1 Problem
DESCRIPTION: Example showing inefficient querying of books and authors that results in N+1 queries. Each book requires an additional query to fetch its author information.

LANGUAGE: python
CODE:
from django.http import HttpResponse

def books(request):
    books = Book.objects.all()[:10]
    book_list = [book.title + " by " + book.author.name for book in books]
    return HttpResponse((", ").join(book_list))

----------------------------------------

TITLE: Adding Attachments in EventProcessor for Java and Kotlin
DESCRIPTION: Shows how to manipulate attachments in an EventProcessor. The code defines a custom EventProcessor class that adds an attachment to the hint and demonstrates how to use it.

LANGUAGE: java
CODE:
import io.sentry.Attachment;
import io.sentry.EventProcessor;
import io.sentry.Hint;
import io.sentry.Sentry;
import io.sentry.SentryEvent;

class AttachmentManipulationEventProcessor implements EventProcessor {
  @Override
  public SentryEvent process(SentryEvent event, Hint hint) {
    hint.addAttachment(new Attachment("/path/to/file.txt"))
    return event;
  }
}

// Register the AttachmentManipulationEventProcessor using SentryOptions#addEventProcessor or Scope#addEventProcessor

// Send an event to Sentry. During construction of the event
// the attachment will be added by the event processor.
Sentry.captureMessage("Hello, world!");

LANGUAGE: kotlin
CODE:
import io.sentry.Attachment;
import io.sentry.EventProcessor;
import io.sentry.Hint;
import io.sentry.Sentry
import io.sentry.SentryEvent;
import io.sentry.protocol.Message

class AttachmentManipulationEventProcessor: EventProcessor {
  override fun process(event: SentryEvent, hint: Hint): SentryEvent? {
    hint.addAttachment(Attachment("/path/to/file.txt"))
    return event
  }
}

// Register the AttachmentManipulationEventProcessor using SentryOptions#addEventProcessor or Scope#addEventProcessor

// Send an event to Sentry. During construction of the event
// the attachment will be added by the event processor.
Sentry.captureMessage("Hello, world!")

----------------------------------------

TITLE: Triggering Test Error in JavaScript React App
DESCRIPTION: Example of introducing a deliberate error by calling an undefined function in a React component. This code is used to demonstrate Sentry's error tracking capabilities.

LANGUAGE: javascript
CODE:
this.myCodeIsPerfect();

----------------------------------------

TITLE: Sentry Client Configuration
DESCRIPTION: Client-side initialization and configuration of Sentry SDK with trace sampling.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nuxt';

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 1.0
});

----------------------------------------

TITLE: Filtering Network Requests in Session Replay
DESCRIPTION: Example of filtering network requests to only capture specific HTTP status codes using beforeAddRecordingEvent callback.

LANGUAGE: javascript
CODE:
Sentry.replayIntegration({
  beforeAddRecordingEvent: (event) => {
    // Do not capture fetch/xhr requests, unless the response code is 500
    if (
      event.data.tag === "performanceSpan" &&
      (event.data.payload.op === "resource.fetch" ||
        event.data.payload.op === "resource.xhr") &&
      event.data.payload.data.statusCode !== 500
    ) {
      return null;
    }

    return event;
  },
})

----------------------------------------

TITLE: Implementing Custom Sampling Function for Sentry Transactions (JavaScript)
DESCRIPTION: Demonstrates how to implement a custom sampling function for transaction events in Sentry. This function allows for dynamic sampling rates based on the transaction name and other context data.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  tracesSampler: samplingContext => {
    if (samplingContext.transactionContext.name === "important_operation") {
      // These are important - sample all of them
      return 1.0;
    } else if (samplingContext.parentSampled) {
      // If the parent transaction is sampled, we'll always sample the child
      return 1.0;
    } else {
      // Default sample rate
      return 0.1;
    }
  },
});

----------------------------------------

TITLE: Enabling Screenshot Attachment Programmatically in Unreal Engine with Sentry
DESCRIPTION: This code snippet demonstrates how to programmatically enable screenshot attachment for Sentry in an Unreal Engine project. It accesses the Sentry settings and sets the AttachScreenshot property to true.

LANGUAGE: cpp
CODE:
USentrySettings* Settings = FSentryModule::Get().GetSettings();
Settings->AttachScreenshot = true;

----------------------------------------

TITLE: Verifying Sentry Integration with Test Error
DESCRIPTION: This code creates a test transaction and intentionally triggers an error to verify that Sentry is properly integrated and capturing both performance data and errors in a Bun application.

LANGUAGE: javascript
CODE:
Sentry.startSpan({
  op: "test",
  name: "My First Test Transaction",
}, () => {
  setTimeout(() => {
    try {
      foo();
    } catch (e) {
      Sentry.captureException(e);
    }
  }, 99);
});

----------------------------------------

TITLE: Generating Test Error for Sentry in JavaScript
DESCRIPTION: This code defines a route handler using a decorator syntax, likely in a framework like NestJS. When the '/debug-sentry' endpoint is accessed, it throws a new Error with a custom message, which can be used to test Sentry's error capturing and reporting capabilities.

LANGUAGE: javascript
CODE:
@Get("/debug-sentry")
getError() {
  throw new Error("My first Sentry error!");
}

----------------------------------------

TITLE: Using Promise Polyfills with Sentry in React Native
DESCRIPTION: Demonstrates how to use promise polyfills like 'promise.allsettled' or 'core-js' after initializing Sentry to ensure proper functionality.

LANGUAGE: javascript
CODE:
import allSettled from "promise.allsettled";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
});
// Any Promise polyfilling must occur AFTER Sentry.init
// This step globally patches Promise.
allSettled.shim();

// Separate core-js example
import "core-js/stable/promise/all-settled";

----------------------------------------

TITLE: Production Deployment Direct CLI Configuration
DESCRIPTION: Command for configuring Sentry initialization in production environments using direct CLI flag approach.

LANGUAGE: bash
CODE:
node --import ./.output/server/instrument.server.mjs your-server-entry.mjs

----------------------------------------

TITLE: Configuring EmbedAllSources in .NET Project
DESCRIPTION: Configuration property for embedding source code directly into .NET Portable PDB files. This allows source code to be automatically extracted when PDBs are uploaded to Sentry.

LANGUAGE: xml
CODE:
<PropertyGroup>\n  <EmbedAllSources>true</EmbedAllSources>\n</PropertyGroup>

----------------------------------------

TITLE: Manual Check-Ins for Cron Monitoring in Python with Sentry SDK
DESCRIPTION: This code snippet shows how to implement manual check-ins for cron monitoring using the Sentry SDK. It demonstrates capturing check-ins at the start and end of a job to track its progress and status.

LANGUAGE: python
CODE:
from sentry_sdk.crons import capture_checkin
from sentry_sdk.crons.consts import MonitorStatus

check_in_id = capture_checkin(
    monitor_slug='<monitor-slug>',
    status=MonitorStatus.IN_PROGRESS,
)

# Execute your task here...

capture_checkin(
    monitor_slug='<monitor-slug>',
    check_in_id=check_in_id,
    status=MonitorStatus.OK,
)

----------------------------------------

TITLE: Initializing Sentry with Fixed Profile Sampling Rate in React
DESCRIPTION: This snippet shows how to initialize Sentry with browser tracing and profiling integrations. It sets up error tracking, transaction tracing, and profiling with fixed sample rates.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add browser profiling integration to the list of integrations
    Sentry.browserTracingIntegration(),
    Sentry.browserProfilingIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Set profilesSampleRate to 1.0 to profile every transaction.
  // Since profilesSampleRate is relative to tracesSampleRate,
  // the final profiling rate can be computed as tracesSampleRate * profilesSampleRate
  // For example, a tracesSampleRate of 0.5 and profilesSampleRate of 0.5 would
  // result in 25% of transactions being profiled (0.5*0.5=0.25)
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing Sentry and Lazy Loading Svelte Replay Integration in JavaScript
DESCRIPTION: This snippet initializes Sentry without any integrations and then lazily loads the Svelte Replay integration. It demonstrates how to add integrations dynamically after the initial Sentry setup.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Note, Replay is NOT instantiated below:
  integrations: [],
});

// Sometime later
import("@sentry/svelte").then(lazyLoadedSentry => {
  Sentry.addIntegration(lazyLoadedSentry.replayIntegration());
});

----------------------------------------

TITLE: Initializing Sentry with Replay and Canvas Integration
DESCRIPTION: Sets up Sentry SDK with session replay functionality and canvas recording. Configures sampling rates for general replays and error-triggered replays. Integrates both standard replay and canvas recording capabilities.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    // Keep the Replay integration as before
    Sentry.replayIntegration(),

    // The following is all you need to enable canvas recording with Replay
    Sentry.replayCanvasIntegration(),
  ],
});

----------------------------------------

TITLE: Configuring Sentry SDK with Strawberry Integration
DESCRIPTION: Initialize Sentry SDK with the Strawberry integration, including options for performance tracing and profiling. The configuration includes setting the DSN, enabling PII sending, and configuring sample rates for traces and profiles.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.strawberry import StrawberryIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
    integrations=[
        StrawberryIntegration(
            # Set async_execution to True if you have
            # at least one async resolver
            async_execution=True,
        ),
    ],
)

----------------------------------------

TITLE: Adding File Attachments with Sentry SDK in Objective-C
DESCRIPTION: This snippet shows how to create a file attachment, add it to global and local scopes, and clear attachments using Sentry SDK in Objective-C. It demonstrates the usage of SentrySDK configureScope and captureMessage methods.

LANGUAGE: Objective-C
CODE:
@import Sentry;

SentryAttachment *fileAttachment =
  [[SentryAttachment alloc] initPath:@"your/path/file.log"];

// Global Scope
[SentrySDK configureScope:^(SentryScope *_Nonnull scope) {
    [scope addAttachment:fileAttachment];
}];

// Local Scope
[SentrySDK captureMessage:@"my message" withScopeBlock:^(SentryScope * _Nonnull scope) {
    [scope addAttachment:fileAttachment];
}];

// Clear all attachments in the global Scope
[SentrySDK configureScope:^(SentryScope *_Nonnull scope) {
    [scope clearAttachments];
}];

----------------------------------------

TITLE: Configuring Sentry Traces Sampling in Dart
DESCRIPTION: Implementation of a custom tracesSampler function for Sentry that sets different sampling rates based on URL patterns. Handles parent sampling context and provides specific rates for payment (50%), search (1%), health (0%), and other routes (10%).

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  // Determine traces sample rate based on the sampling context
  options.tracesSampler = (samplingContext) {
    final ctx = samplingContext.customSamplingContext;
    // If this is the continuation of a trace, just use that decision (rate controlled by the caller).
    final parentSampled =
        samplingContext.transactionContext.parentSampled;
    if (parentSampled != null) {
      return parentSampled ? 1.0 : 0.0;
    }

    if ('/payment' == ctx['url']) {
      // These are important - take a big sample
      return 0.5;
    } else if ('/search' == ctx['url']) {
      // Search is less important and happen much more frequently - only take 1%
      return 0.01;
    } else if ('/health' == ctx['url']) {
      // The health check endpoint is just noise - drop all transactions
      return 0.0;
    } else {
      // Default sample rate
      return 0.1;
    }
  };
});

----------------------------------------

TITLE: Implementing Error Verification in Vue
DESCRIPTION: Example code showing how to add a button that throws an intentional error to verify Sentry's error capturing functionality.

LANGUAGE: javascript
CODE:
// ...
<button @click="throwError">Throw error</button>
// ...

export default {
  // ...
  methods: {
    throwError() {
      throw new Error('Sentry Error');
    }
  }
};

----------------------------------------

TITLE: Configuring Browser Span Hierarchy
DESCRIPTION: Configuration to opt-out of default flat span hierarchy in browser environments.

LANGUAGE: javascript
CODE:
Sentry.init({
  parentSpanIsAlwaysRootSpan: false,
});

----------------------------------------

TITLE: Tracking Single Client Feature Flag Evaluations with Sentry in JavaScript
DESCRIPTION: Configures Sentry with OpenFeature integration to track feature flag evaluations for a specific client instance. Initializes Sentry, sets up the provider, and adds hooks to a specific OpenFeature client for targeted evaluation tracking.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/svelte';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Configuring Session Tracking in Sentry Ruby SDK
DESCRIPTION: Demonstrates how to disable automatic session tracking in Sentry by setting the auto_session_tracking configuration flag to false. This code should be placed in your Sentry initialization block.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  # ...
  config.auto_session_tracking = false
end

----------------------------------------

TITLE: Wrapping App with TouchEventBoundary in React Native
DESCRIPTION: Demonstrates how to wrap the root app component with Sentry.TouchEventBoundary to enable touch event tracking. This should be done in the main app file, typically App.js.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

const App = () => {
  return (
    <Sentry.TouchEventBoundary>
      <RestOfTheApp />
    </Sentry.TouchEventBoundary>
  );
};

export default AppRegistry.registerComponent("Your Amazing App", () => App);

----------------------------------------

TITLE: Scope Data Application Example
DESCRIPTION: Demonstrates how data from different scopes (global, isolation, and current) is applied to events, showing precedence order.

LANGUAGE: javascript
CODE:
Sentry.getGlobalScope().setExtras({
  shared: "global",
  global: "data",
});
Sentry.getIsolationScope().setExtras({
  shared: "isolation",
  isolation: "data",
});
Sentry.getCurrentScope().setExtras({
  shared: "current",
  current: "data",
});

Sentry.captureException(new Error("my error"));

----------------------------------------

TITLE: Initializing Sentry PHP SDK with Exception Filtering
DESCRIPTION: Configures Sentry SDK to ignore specific exception types during error tracking. In this case, it's set to ignore UnauthenticatedException class from being reported to Sentry.

LANGUAGE: php
CODE:
\Sentry\init([
    'ignore_exceptions' => [
        UnauthenticatedException::class,
    ],
]);

----------------------------------------

TITLE: ANR Detection Configuration Options Interface
DESCRIPTION: This TypeScript interface defines the configuration options available for ANR detection in both main and renderer processes. It includes options for poll interval, ANR threshold, and stack trace capture.

LANGUAGE: typescript
CODE:
interface Options {
  /**
   * Interval to send heartbeat messages to the child process.
   *
   * Main process: Defaults to 50ms.
   * Renderer process: Defaults to 1000ms.
   */
  pollInterval: number;
  /**
   * Threshold in milliseconds to trigger an ANR event.
   *
   * Defaults to 5000ms.
   */
  anrThreshold: number;
  /**
   * Whether to capture a stack trace when the ANR event is triggered.
   *
   * Defaults to `false`.
   */
  captureStackTrace: boolean;
}

----------------------------------------

TITLE: Initializing Sentry SDK via CDN in HTML
DESCRIPTION: This snippet shows how to initialize the Sentry SDK using a CDN in HTML. It includes a script tag to load the Sentry SDK from a CDN and a JavaScript code block to configure it with error tracking, performance monitoring, and session replay settings.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",

    // Alternatively, use `process.env.npm_package_version` for a dynamic release version
    // if your build tool supports it.
    release: "my-project-name@2.3.12",
    integrations: [
      Sentry.browserTracingIntegration(),
      Sentry.replayIntegration(),
    ],

    // Set tracesSampleRate to 1.0 to capture 100%
    // of transactions for tracing.
    // We recommend adjusting this value in production
    // Learn more at
    // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
    tracesSampleRate: 1.0,

    // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
    tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

    // Capture Replay for 10% of all sessions,
    // plus for 100% of sessions with an error
    // Learn more at
    // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
    replaysSessionSampleRate: 0.1,
    replaysOnErrorSampleRate: 1.0,
  });
</script>

----------------------------------------

TITLE: Initializing Sentry SDK with Bun
DESCRIPTION: Sets up Sentry error monitoring by importing the Bun-specific package and initializing it with a DSN and context lines integration. The DSN placeholder needs to be replaced with an actual Sentry project DSN.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/bun";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.contextLinesIntegration()],
});

----------------------------------------

TITLE: Configuring Multiple Scope Types in Java
DESCRIPTION: Demonstrates how to configure global, isolation, and current scopes in Java using Sentry SDK. Shows how different scope data is merged when capturing exceptions.

LANGUAGE: java
CODE:
Sentry.configureScope(ScopeType.GLOBAL, scope -> {
  scope.setExtra("shared", "global");
  scope.setExtra("global", "data");
});

Sentry.configureScope(ScopeType.ISOLATION, scope -> {
  scope.setExtra("shared", "isolation");
  scope.setExtra("isolation", "data");
});

Sentry.configureScope(ScopeType.CURRENT, scope -> {
  scope.setExtra("shared", "current");
  scope.setExtra("current", "data");
});

Sentry.captureException(new Exception("my error"));
// --> Will have the following extra:
// { shared: 'current', global: 'data', isolation: 'data', current: 'data' }

----------------------------------------

TITLE: Setting Release Version in Sentry SDK
DESCRIPTION: This code snippet demonstrates how to set the release version when initializing the Sentry SDK. The actual implementation varies by platform, as indicated by the PlatformContent component.

LANGUAGE: markup
CODE:
<PlatformContent includePath="set-release" notateUnsupported />

----------------------------------------

TITLE: Flushing Sentry Events in Go Main Function
DESCRIPTION: This snippet demonstrates how to properly initialize Sentry and use defer to flush events before program termination. It sets a timeout of 2 seconds for the flush operation and captures a message.

LANGUAGE: go
CODE:
func main() {
	// err := sentry.Init(...)
	defer sentry.Flush(2 * time.Second)

	sentry.CaptureMessage("my message")
}

----------------------------------------

TITLE: Setting Sentry DSN in Android Manifest
DESCRIPTION: Shows how to configure the Sentry DSN value in the AndroidManifest.xml file using meta-data tags. This is the preferred method for setting up Sentry integration in Android applications.

LANGUAGE: xml
CODE:
<meta-data android:name="io.sentry.dsn" android:value="___PUBLIC_DSN___" />

----------------------------------------

TITLE: Initializing Sentry SDK with Browser Tracing for Vue
DESCRIPTION: This snippet shows how to initialize the Sentry SDK with browser tracing integration for a Vue application. It includes setting up the DSN, integrations, and trace sample rate. The code allows for optional router configuration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/vue";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.browserTracingIntegration(),
    // alternatively, you can pass a router to the tracing integration
    Sentry.browserTracingIntegration({ router }),
  ],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Configuring Sentry SDK with RustTracingIntegration in Python
DESCRIPTION: Python code to initialize the Sentry SDK with RustTracingIntegration. It sets up error monitoring, performance tracking, and profiling.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.rust_tracing import RustTracingIntegration

import my_rust_extension

async def main():
    sentry_sdk.init(
        dsn="___PUBLIC_DSN___",
        # Add data like request headers and IP for users, if applicable;
        # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
        send_default_pii=True,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=1.0,
        integrations=[
            RustTracingIntegration(
                "my_rust_extension",
                my_rust_extension.initialize_tracing,
                include_tracing_fields=True,
            ),
        ],
    )

    # your code goes here.
    ...

asyncio.run(main())

----------------------------------------

TITLE: Implementing Custom 500 Error Handler in Flask with Sentry Integration
DESCRIPTION: This snippet defines a custom error handler for 500 server errors in a Flask application. It renders a '500.html' template and includes the Sentry event ID for error tracking.

LANGUAGE: python
CODE:
from flask import render_template
from sentry_sdk import last_event_id

@app.errorhandler(500)
def server_error_handler(error):
    return render_template("500.html", sentry_event_id=last_event_id()), 500

----------------------------------------

TITLE: Setting Error Transaction Name in beforeSend Hook for Sentry JavaScript SDK
DESCRIPTION: This code shows how to use the beforeSend hook to set the transaction name on the event before it's sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event) {
    event.transaction = "UserListView";
    return event;
  },
});

----------------------------------------

TITLE: Configuring Sentry with Custom Error Handling for Database Connections in JavaScript
DESCRIPTION: This snippet initializes Sentry with a custom beforeSend function that sets a specific fingerprint for DatabaseConnectionError instances. This allows for better grouping and tracking of database connection errors in Sentry.

LANGUAGE: javascript
CODE:
class DatabaseConnectionError extends Error {}

Sentry.init({
  // ...
  beforeSend: function (event, hint) {
    const exception = hint.originalException;

    if (exception instanceof DatabaseConnectionError) {
      event.fingerprint = ["database-connection-error"];
    }

    return event;
  },
});

----------------------------------------

TITLE: Creating a Typer CLI Application with Sentry Integration
DESCRIPTION: This example demonstrates a small Typer CLI application with Sentry integration. It intentionally raises a ZeroDivisionError to verify that Sentry captures the exception.

LANGUAGE: python
CODE:
import typer
import sentry_sdk
from sentry_sdk.integrations.typer import TyperIntegration

sentry_sdk.init(...)  # see above

def main():
    1 / 0

if __name__ == "__main__":
    typer.run(main)

----------------------------------------

TITLE: Modifying Default Integrations in Sentry SDK
DESCRIPTION: This snippet demonstrates how to override default integration settings in Sentry.init(). It shows how to disable browser capturing console calls by providing a new instance of linkedErrorsIntegration with custom config.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.linkedErrorsIntegration({
      limit: 7,
    }),
  ],
});

----------------------------------------

TITLE: Enabling Tracing in Sentry SDK
DESCRIPTION: Demonstrates how to initialize the Sentry SDK with tracing enabled. Sets up basic configuration with DSN and trace sampling rate.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.tracesSampleRate = 1.0
}

LANGUAGE: objective-c
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.tracesSampleRate = @1.0;
}];

----------------------------------------

TITLE: Configuring Sentry via CDN for AngularJS
DESCRIPTION: HTML implementation for adding Sentry via CDN, including both the main Sentry bundle and the Angular integration script. Shows how to initialize Sentry with proper integrity checks and cross-origin settings.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/6.19.7/bundle.min.js"
  integrity="sha384-KXjn4K+AYjp1cparCXazrB+5HKdi69IUYz8glD3ySH3fnDgMX3Wg6VTMvXUGr4KB"
  crossorigin="anonymous"
></script>

<!-- If you include the integration it will be available under Sentry.Integrations.Angular -->
<script
  src="https://browser.sentry-cdn.com/6.19.7/angular.min.js"
  crossorigin="anonymous"
></script>

<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    integrations: [new Sentry.Integrations.Angular()],
  });
</script>

----------------------------------------

TITLE: Configuring Before Send Event in Laravel Sentry
DESCRIPTION: This snippet demonstrates how to set up the 'before_send' option in the Sentry Laravel configuration. It uses a closure that takes a Sentry\Event object as input and can return a modified event, a new event, or null to discard the event.

LANGUAGE: php
CODE:
'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
    return $event;
},

----------------------------------------

TITLE: Initializing Sentry with Iris in Go
DESCRIPTION: This snippet demonstrates how to initialize Sentry, create an Iris app, and attach the Sentry handler as middleware. It includes error monitoring and performance tracing setup.

LANGUAGE: go
CODE:
import (
	"fmt"

	"github.com/getsentry/sentry-go"
	sentryiris "github.com/getsentry/sentry-go/iris"
	"github.com/kataras/iris/v12"
)

// To initialize Sentry's handler, you need to initialize Sentry itself beforehand
if err := sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	EnableTracing: true,
	// Set TracesSampleRate to 1.0 to capture 100%
	// of transactions for tracing.
	// We recommend adjusting this value in production,
	TracesSampleRate: 1.0,
}); err != nil {
	fmt.Printf("Sentry initialization failed: %v\n", err)
}

// Then create your app
app := iris.Default()

// Once it's done, you can attach the handler as one of your middleware
app.Use(sentryiris.New(sentryiris.Options{}))

// Set up routes
app.Get("/", func(ctx iris.Context) {
	ctx.Writef("Hello world!")
})

// And run it
app.Run(iris.Addr(":3000"))

----------------------------------------

TITLE: Configuring Sentry Scope with Character Context in Go
DESCRIPTION: Sets up a Sentry scope with custom character context data including name, age and attack type. This context information will be attached to any error events captured within this scope, providing additional debugging context.

LANGUAGE: go
CODE:
sentry.ConfigureScope(func(scope *sentry.Scope) {
	scope.SetContext("character", map[string]interface{}{
		"name":        "Mighty Fighter",
		"age":         19,
		"attack_type": "melee",
	})
})

----------------------------------------

TITLE: Kotlin BeforeSendCallback Implementation
DESCRIPTION: Kotlin implementation of SentryOptions.BeforeSendCallback that provides the same filtering functionality as the Java version. Uses Kotlin's more concise syntax and null safety features.

LANGUAGE: kotlin
CODE:
import io.sentry.SentryEvent
import io.sentry.SentryOptions
import io.sentry.Hint
import org.springframework.stereotype.Component

@Component
class CustomBeforeSendCallback : SentryOptions.BeforeSendCallback {
  override fun execute(event: SentryEvent, hint: Hnt): SentryEvent? {
    if (hint["my-hint-key"] != null) {
      null
    } else {
      event
    }
  }
}

----------------------------------------

TITLE: Verifying AIOHTTP Integration with Sentry
DESCRIPTION: This Python script demonstrates how to use the AIOHTTP integration with Sentry. It creates a transaction and performs GET and POST requests, which will be captured as spans.

LANGUAGE: python
CODE:
import asyncio
import aiohttp

async def main():
    sentry_sdk.init(...)  # same as above

    with sentry_sdk.start_transaction(name="testing_sentry"):
        async with aiohttp.ClientSession() as session:
            async with session.get("https://sentry.io/") as response:
                print("Status:", response.status)
            async with session.post("http://httpbin.org/post") as response:
                print("Status:", response.status)

asyncio.run(main())

----------------------------------------

TITLE: Implementing Sentry Feedback Widget Toggle Button in React with Remix
DESCRIPTION: This React component creates a button to toggle Sentry's feedback widget. It uses useState and useEffect hooks to manage the widget's state and avoid hydration errors during server rendering. The component allows users to create or remove the widget on button click.

LANGUAGE: jsx
CODE:
function ToggleFeedbackButton() {
  const [feedback, setFeedback] = useState();
  // Read `getFeedback` on the client only, to avoid hydration errors during server rendering
  useEffect(() => {
    setFeedback(Sentry.getFeedback());
  }, []);

  const [widget, setWidget] = useState();
  return (
    <button
      type="button"
      onClick={async () => {
        if (widget) {
          widget.removeFromDom();
          setWidget(null);
        } else {
          setWidget(feedback.createWidget());
        }
      }}
    >
      {widget ? "Remove Widget" : "Create Widget"}
    </button>
  );
}

----------------------------------------

TITLE: Setting up Sentry for Cloudflare Workers
DESCRIPTION: Implementation of Sentry wrapper for Cloudflare Workers with performance monitoring and error tracking.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/cloudflare";

export default Sentry.withSentry(
  env => ({
    dsn: "___PUBLIC_DSN___",
    // Set tracesSampleRate to 1.0 to capture 100% of spans for tracing.
    // Learn more at
    // https://docs.sentry.io/platforms/javascript/guides/cloudflare/configuration/options/#tracesSampleRate
    tracesSampleRate: 1.0,
  }),
  {
    async fetch(request, env, ctx) {
      return new Response("Hello World!");
    },
  } satisfies ExportedHandler<Env>,
);

----------------------------------------

TITLE: Installing Sentry Astro SDK using npx
DESCRIPTION: This command uses npx to add the Sentry Astro SDK to an existing Astro project. It automatically installs the necessary dependencies and configures the SDK.

LANGUAGE: bash
CODE:
npx astro add @sentry/astro

----------------------------------------

TITLE: Configuring Sentry Scope and Capturing Exceptions in PHP
DESCRIPTION: This code demonstrates how to use Sentry's withScope function to set custom tags and severity levels for error capturing. It shows how to capture an exception within a custom scope and another exception outside of that scope.

LANGUAGE: php
CODE:
\Sentry\withScope(function (\Sentry\State\Scope $scope): void {
    $scope->setTag('my-tag', 'my value');
    $scope->setLevel(\Sentry\Severity::warning());

    // will be tagged with my-tag="my value"
    \Sentry\captureException(new \Throwable('my error'))
});

// will not be tagged with my-tag
\Sentry\captureException(new \Throwable('my other error'));

----------------------------------------

TITLE: Enabling App Hangs V2 Feature
DESCRIPTION: Examples showing how to enable the experimental AppHangsV2 feature which provides enhanced app hang detection capabilities.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.enableAppHangTrackingV2 = true
}

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.enableAppHangTrackingV2 = YES;
}];

----------------------------------------

TITLE: Verifying Sentry SDK Setup in Node.js
DESCRIPTION: Code snippet to test and verify the Sentry SDK setup in a Node.js application. The actual code is not provided but referenced to be included from an external source.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="getting-started-verify" />

----------------------------------------

TITLE: Manual HTTP Request Span Instrumentation in PHP
DESCRIPTION: Demonstrates manual creation and configuration of a Sentry span for HTTP request monitoring. Includes setting span context, HTTP-specific data, and proper span lifecycle management.

LANGUAGE: php
CODE:
$parentSpan = \Sentry\SentrySdk::getCurrentHub()->getSpan();

if ($parentSpan !== null) {
    $context = \Sentry\Tracing\SpanContext::make()
        ->setOp('http.client');
    $span = $parentSpan->startChild($context);

    // Set the span we just started as the current span
    \Sentry\SentrySdk::getCurrentHub()->setSpan($span);
    
    $client = new \Cake\Http\Client();
    $response = $client->get('https://example.com/');
    
    $span
        ->setDescription('GET https://example.com/')
        ->setStatus(\Sentry\Tracing\SpanStatus::createFromHttpStatusCode($response->getStatusCode()))
        ->setData([
            'http.request.method' => 'GET',
            'http.response.body.size' => $response->getBody()->getSize(),
            'http.response.status_code' => $response->getStatusCode(),
        ])
        ->finish();

    // Restore the span back to the parent span
    \Sentry\SentrySdk::getCurrentHub()->setSpan($parentSpan);
}

----------------------------------------

TITLE: Injecting Tracing Information into FastAPI/Starlette HTML Template
DESCRIPTION: This HTML snippet shows how to include tracing information in a FastAPI or Starlette HTML template using the sentry_trace_meta variable provided by Sentry to the Jinja2 template context.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    {{ sentry_trace_meta }}
  </head>
  <body>
    <p>This is a website.</p>
  </body>
</html>

----------------------------------------

TITLE: Comprehensive Sentry Logging Examples in Kotlin
DESCRIPTION: Provides a set of methods demonstrating various Sentry logging techniques in Kotlin, including simple logging, breadcrumbs, extras, and exception handling.

LANGUAGE: kotlin
CODE:
import io.sentry.core.Sentry
import org.apache.logging.log4j.LogManager
import org.apache.logging.log4j.ThreadContext

class MyClass {
  companion object {
    private val logger = LogManager.getLogger(MyClass::class.java)
  }

  fun logSimpleMessage() {
    // This sends a simple event to Sentry
    logger.error("This is a test")
  }

  fun logWithBreadcrumbs() {
    // Record a breadcrumb that will be sent with the next event(s),
    // by default the last 100 breadcrumbs are kept.
    Sentry.addBreadcrumb("User made an action")

    // Log entries below `minimumEventLevel` and above or equal to `minimumBreadcrumbLevel`
    // are recorded as breadcrumbs
    logger.info("User made another action")

    // This sends a simple event to Sentry
    logger.error("This is a test")
  }

  fun logWithExtras() {
    // MDC extras
    ThreadContext.put("extra_key", "extra_value")
    // NDC extras are sent under 'log4j2-NDC'
    ThreadContext.push("Extra_details")
    // This sends an event with extra data to Sentry
    logger.error("This is a test")
  }

  fun logException() {
    try {
      unsafeMethod()
    } catch (e: Exception) {
      // This sends an exception event to Sentry
      logger.error("Exception caught", e)
    }
  }

  fun unsafeMethod() {
    throw UnsupportedOperationException("You shouldn't call this!")
  }
}

----------------------------------------

TITLE: Initializing Sentry SDK in Objective-C
DESCRIPTION: Shows how to initialize the Sentry SDK using Objective-C with a beforeBreadcrumb callback configuration. The callback is defined as a block that receives and returns a nullable SentryBreadcrumb object.

LANGUAGE: objective-c
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.beforeBreadcrumb = ^SentryBreadcrumb * _Nullable(SentryBreadcrumb * _Nonnull crumb) {
        return crumb;
    };
}];

----------------------------------------

TITLE: Git Commands for Commit and Push
DESCRIPTION: Git commands to commit and push changes to the repository.

LANGUAGE: bash
CODE:
git commit -am 'Added a new error and some other stuff'
git push

----------------------------------------

TITLE: Initializing Sentry Session Replay in Electron
DESCRIPTION: Sets up Sentry Session Replay with configurable sampling rates and privacy settings. Includes configuration for replay sampling on regular sessions and error sessions, along with text masking and media blocking options.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/renderer";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This sets the sample rate to be 10%. You may want this to be 100% while
  // in development and sample at a lower rate in production
  replaysSessionSampleRate: 0.1,

  // If the entire session is not sampled, use the below sample rate to sample
  // sessions when an error occurs.
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    Sentry.replayIntegration({
      // Additional SDK configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry with Custom Sample Rate in Java
DESCRIPTION: This Java code snippet demonstrates how to manually initialize Sentry in an Android application and set the sample rate to 0.25 programmatically. It uses the SentryAndroid.init() method with a lambda to configure options.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  options.setSampleRate(0.25);
});

----------------------------------------

TITLE: Installing Sentry Webpack Plugin
DESCRIPTION: Command to install the Sentry webpack plugin as a development dependency.

LANGUAGE: bash
CODE:
npm install @sentry/webpack-plugin --save-dev

----------------------------------------

TITLE: Creating and Managing Transactions in Swift with Sentry SDK
DESCRIPTION: This snippet demonstrates how to start a transaction bound to the current scope, process a batch of orders, and create child spans. It shows the usage of SentrySDK.startTransaction and SentrySDK.span methods.

LANGUAGE: swift
CODE:
import Sentry

let transaction = SentrySDK.startTransaction(
    name: "processOrderBatch",
    operation: "task",
    bindToScope: true
)
processOrderBatch()
transaction.finish()

func processOrderBatch() {
    var span = SentrySDK.span

    if span == nil {
        span = SentrySDK.startTransaction(name: "processOrderBatch", operation: "task")
    }

    var innerSpan = span.startChild(operation: "subtask")
    // omitted code
    innerSpan.finish()
}

----------------------------------------

TITLE: Implementing BeforeSendCallback in Kotlin for Sentry Spring
DESCRIPTION: This snippet demonstrates the implementation of a custom BeforeSendCallback as a Spring component in Kotlin. It shows how to modify a SentryEvent by setting the server name to null before the event is sent.

LANGUAGE: kotlin
CODE:
import io.sentry.SentryEvent
import io.sentry.SentryOptions
import io.sentry.Hint
import org.springframework.stereotype.Component

@Component
class CustomBeforeSendCallback : SentryOptions.BeforeSendCallback {
  override fun execute(event: SentryEvent, hint: Hint): SentryEvent? {
    // Example: Never send server name in events
    event.serverName = null
    return event
  }
}

----------------------------------------

TITLE: Disabling Pinia State Attachment
DESCRIPTION: Configuration to disable Pinia state attachment to Sentry events.

LANGUAGE: javascript
CODE:
createSentryPiniaPlugin({
  attachPiniaState: false,
});

----------------------------------------

TITLE: Creating and Setting Sentry Context in C
DESCRIPTION: This code creates a Sentry value object representing a character with various attributes, and sets it as context for error tracking. It demonstrates the use of Sentry SDK functions to create and manipulate structured data.

LANGUAGE: c
CODE:
#include <sentry.h>

sentry_value_t character = sentry_value_new_object();
sentry_value_set_by_key(character, "name", sentry_value_new_string("Mighty Fighter"));
sentry_value_set_by_key(character, "age", sentry_value_new_int32(19));
sentry_value_set_by_key(character, "attack_type", sentry_value_new_string("melee"));
sentry_set_context("character", character);

----------------------------------------

TITLE: Verifying Ray Integration with Error Testing
DESCRIPTION: Example code that demonstrates error capture and performance monitoring by intentionally triggering a division by zero error in a Ray task.

LANGUAGE: python
CODE:
def init_sentry():
    sentry_sdk.init(...)  # same as above

init_sentry()

ray.init(
    runtime_env={"worker_process_setup_hook": init_sentry},
)

@ray.remote
def divide(a, b):
    return a/b

with sentry_sdk.start_transaction(name="ray-test"):
    futures = [
        divide.remote(10, 5),
        divide.remote(10, 0),
    ]
    print(ray.get(futures))

----------------------------------------

TITLE: Comprehensive HOME Variable Scrubbing
DESCRIPTION: Rule for scrubbing HOME environment variable from both stack memory and binary data locations.

LANGUAGE: regex
CODE:
[Remove] [HOME=[^\u0000+]\u0000] from [stack_memory || $binary]

----------------------------------------

TITLE: Initializing SentryFlutter with Custom Trace Sampling in Dart
DESCRIPTION: This snippet initializes SentryFlutter and configures a custom tracesSampler function. The sampler determines the trace sampling rate based on the sampling context, considering factors such as parent sampling decisions and custom conditions.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  // Determine traces sample rate based on the sampling context
  options.tracesSampler = (samplingContext) {
    final ctx = samplingContext.customSamplingContext;
    // If this is the continuation of a trace, just use that decision (rate controlled by the caller).
    final parentSampled =
        samplingContext.transactionContext.parentSampled;
    if (parentSampled != null) {
      return parentSampled ? 1.0 : 0.0;
    }

    if (/* make a decision based on `samplingContext` */) {
      // Drop this transaction, by setting its sample rate to 0%
      return 0.0;
    } else if (/* ... */) {
      // Override sample rate for other cases (replaces `options.TracesSampleRate`)
      return 0.1;
    }
    // Can return `null` to fallback to the rate configured by `options.tracesSampleRate`
    return null;
  };
});

----------------------------------------

TITLE: Setting Sentry Auth Token in Environment File
DESCRIPTION: Example of setting the Sentry authentication token in a .env file for the build process.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Implementing BeforeSendCallback in Kotlin
DESCRIPTION: Kotlin implementation of a custom Sentry BeforeSendCallback that sets a specific fingerprint for SQL exceptions. Uses Kotlin's type checking syntax and list creation functions for a more idiomatic implementation.

LANGUAGE: kotlin
CODE:
import io.sentry.SentryEvent
import io.sentry.SentryOptions
import io.sentry.Hint
import org.springframework.stereotype.Component

@Component
class CustomBeforeSendCallback : SentryOptions.BeforeSendCallback {
  override fun execute(event: SentryEvent, hint: Hint): SentryEvent? {
    if (event.throwable is SQLException) {
      event.fingerprints = listOf("database-connection-error")
    }
    event
  }
}

----------------------------------------

TITLE: Setting Sentry Tags via C++ in Unreal Engine
DESCRIPTION: Shows how to set custom tags using the Sentry subsystem in C++. This code retrieves the Sentry subsystem instance and sets a key-value pair tag that will be included with crash reports.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->SetTag("tag1", "value1");

----------------------------------------

TITLE: Setting Tags in Sentry Scope using PowerShell
DESCRIPTION: Demonstrates how to use Edit-SentryScope cmdlet to set a custom tag named 'birthday' with a birthday hash value. This allows for better error tracking and filtering in Sentry dashboards.

LANGUAGE: powershell
CODE:
Edit-SentryScope {
    $_.SetTag("birthday", $BirthdayHash)
}

----------------------------------------

TITLE: Initializing Sentry and Setting Release Name in Flutter
DESCRIPTION: This code snippet shows how to initialize Sentry in a Flutter application and set a custom release name. It uses the SentryFlutter.init method to configure Sentry options, specifically setting the release name for the project.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.release = 'my-project-name@2.3.12+12';
});

// or define SENTRY_RELEASE via Dart environment variable (--dart-define) if you are using Flutter Web.

----------------------------------------

TITLE: Configuring File I/O Instrumentation
DESCRIPTION: Configuration options to enable/disable file I/O instrumentation features in the Sentry Gradle plugin.

LANGUAGE: groovy
CODE:
import io.sentry.android.gradle.extensions.InstrumentationFeature

sentry {
  tracingInstrumentation {
    enabled = true
    features = EnumSet.allOf(InstrumentationFeature) - InstrumentationFeature.FILE_IO
  }
}

LANGUAGE: kotlin
CODE:
import java.util.EnumSet
import io.sentry.android.gradle.extensions.InstrumentationFeature

sentry {
  tracingInstrumentation {
    enabled.set(true)
    features.set(EnumSet.allOf(InstrumentationFeature::class.java) - InstrumentationFeature.FILE_IO)
  }
}

----------------------------------------

TITLE: Implementing HTTP Request Tracing
DESCRIPTION: Complete example of implementing HTTP request tracing with Sentry Dio integration including error handling and span management.

LANGUAGE: dart
CODE:
import 'package:sentry_dio/sentry_dio.dart';

Future<void> makeWebRequestWithDio() async {
  final dio = Dio();
  dio.addSentry();

  // If there is no active transaction, start one
  final transaction = Sentry.startTransaction(
    'dio-web-request',
    'request',
    bindToScope: true,
  );
  final span = transaction.startChild(
    'dio',
    description: 'desc',
  );
  Response<String>? response;
  try {
    response = await dio.get<String>(exampleUrl);
      span.status = const SpanStatus.ok();
    } catch (exception, stackTrace) {
      span.throwable = exception;
      span.status = const SpanStatus.internalError();
      await Sentry.captureException(exception, stackTrace: stackTrace);
    } finally {
      await span.finish();
    }
}

----------------------------------------

TITLE: Configuring Additional OpenTelemetry Instrumentation in Sentry
DESCRIPTION: Example showing how to add OpenTelemetry instrumentation to Sentry initialization. Uses GenericPoolInstrumentation as an example and configures trace sampling.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");
const {
  GenericPoolInstrumentation,
} = require("@opentelemetry/instrumentation-generic-pool");

Sentry.init({
  dsn: "___DSN___",

  // The SentrySampler will use this to determine which traces to sample
  tracesSampleRate: 1.0,

  // Add additional OpenTelemetry instrumentation:
  openTelemetryInstrumentations: [new GenericPoolInstrumentation()],
});

----------------------------------------

TITLE: Initializing Sentry in Deno
DESCRIPTION: This code snippet imports the Sentry library from npm and initializes it with a configuration object. The configuration includes a DSN (Data Source Name) and integrations, specifically the dedupe integration to avoid duplicate error reports.

LANGUAGE: javascript
CODE:
import * as Sentry from "npm:@sentry/deno";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.dedupeIntegration()],
});

----------------------------------------

TITLE: Installing Sentry Migration Tool
DESCRIPTION: Command to run the @sentry/migr8 codemod tool which automatically updates SDK usage to handle 7.x deprecations. Requires Node.js version 18 or higher.

LANGUAGE: bash
CODE:
npx @sentry/migr8@latest

----------------------------------------

TITLE: Initializing Sentry SDK in Python
DESCRIPTION: This code initializes the Sentry SDK with a specific DSN and configures trace propagation targets. It sets up error tracking and distributed tracing for the application.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    trace_propagation_targets=[
        "https://myproject.org",
        "https://.*\.otherservice.org/.*",
    ],
    # ...
)

----------------------------------------

TITLE: Creating Debug Route for Sentry Error Testing in Express.js
DESCRIPTION: Defines an Express route handler that intentionally throws an error to verify Sentry error tracking functionality. The route is accessed at '/debug-sentry' and throws a basic Error object with a test message.

LANGUAGE: javascript
CODE:
app.get("/debug-sentry", function mainHandler(req, res) {
  throw new Error("My first Sentry error!");
});

----------------------------------------

TITLE: Configuring Sentry Flutter SDK with Custom Zone
DESCRIPTION: Advanced configuration setup using custom zone for automatic error and breadcrumb tracking, particularly useful when WidgetsBinding initialization is needed before Sentry.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  Sentry.runZonedGuarded(() async {
    WidgetsBinding.ensureInitialized();

    await SentryFlutter.init(
      (options) {
        options.dsn = '___PUBLIC_DSN___';
        options.sendDefaultPii = true;
        options.tracesSampleRate = 1.0;
        options.profilesSampleRate = 1.0;
      },
      appRunner: () => runApp(
        SentryWidget(
          child: MyApp(),
        ),
      ),
    );
  } (error, stackTrace) {
  });
}

----------------------------------------

TITLE: Initializing Redux Store with Sentry Enhancer
DESCRIPTION: This snippet demonstrates how to create a Redux store using the deprecated createStore API, incorporating Sentry's Redux enhancer along with other middleware like thunk.

LANGUAGE: javascript
CODE:
const store = createStore(
  rootReducer,
  compose(applyMiddleware(thunk), sentryReduxEnhancer)
);

----------------------------------------

TITLE: Configuring Sentry Integrations for Browser Runtime in Nuxt
DESCRIPTION: Add browser-specific integrations to the Sentry.init function in the sentry.client.config.(js|ts) file. This configuration applies to the browser runtime.

LANGUAGE: javascript
CODE:
// sentry.client.config.(js|ts)
Sentry.init({
  // other configuration options
  integrations: [
    new Sentry.BrowserTracing(),
    // Add other browser-specific integrations here
  ],
});

----------------------------------------

TITLE: Adding Sentry Monitoring to Scheduled Tasks in Laravel 12.x & 11.x
DESCRIPTION: This snippet demonstrates how to add Sentry monitoring to a scheduled task in Laravel 12.x and 11.x using the sentryMonitor() macro. It shows the addition to a command scheduled to run every hour.

LANGUAGE: php
CODE:
Schedule::command(SendEmailsCommand::class)
    ->everyHour()
    ->sentryMonitor(); // add this line

----------------------------------------

TITLE: Lazy Loading Sentry Replay Integration in SvelteKit
DESCRIPTION: This code demonstrates a two-step process for integrating Sentry with SvelteKit. First, Sentry is initialized without any integrations, then the Replay integration is dynamically imported and added later. This approach enables more efficient initial loading by deferring the replay functionality.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Note, Replay is NOT instantiated below:
  integrations: [],
});

// Sometime later
import("@sentry/sveltekit").then(lazyLoadedSentry => {
  Sentry.addIntegration(lazyLoadedSentry.replayIntegration());
});

----------------------------------------

TITLE: Creating a New Team in Sentry
DESCRIPTION: Makes a POST request to create a new team in the Sentry organization with a specified name.

LANGUAGE: bash
CODE:
curl -d "name=tutorial-team" -X POST "https://sentry.io/api/0/organizations/$SENTRY_ORG_ID/teams/" \
    -H 'Authorization: Bearer $SENTRY_AUTH_TOKEN'

----------------------------------------

TITLE: Manually Closing Sentry Client in Python
DESCRIPTION: Demonstrates how to manually drain and close the Sentry client using the close() method. This code retrieves the current Hub's client and closes it with a specified timeout. After closing, the client cannot be used again.

LANGUAGE: python
CODE:
from sentry_sdk import Hub

client = Hub.current.client
if client is not None:
    client.close(timeout=2.0)

----------------------------------------

TITLE: Configuring Python Test Runner with Pytest
DESCRIPTION: Configuration settings for running Sentry unit tests using pytest in PyCharm. Specifies the target and additional arguments needed for test execution.

LANGUAGE: plaintext
CODE:
Target: Custom
Additional Arguments: tests/sentry

----------------------------------------

TITLE: Project Configuration with PII Rules in Relay
DESCRIPTION: Complete project configuration example showing how to implement custom PII rules, including pattern matching for device IDs and hash redaction method.

LANGUAGE: json
CODE:
{
  "publicKeys": [
    {
      "publicKey": "___PUBLIC_KEY___",
      "isEnabled": true
    }
  ],
  "config": {
    "allowedDomains": ["*"],
    "piiConfig": {
      "rules": {
        "device_id": {
          "type": "pattern",
          "pattern": "d/[a-f0-9]{12}",
          "redaction": {
            "method": "hash"
          }
        }
      },
      "applications": {
        "freeform": ["device_id"]
      }
    }
  }
}

----------------------------------------

TITLE: Representing Request Headers as JSON Object in Sentry
DESCRIPTION: This snippet demonstrates how to represent HTTP request headers as a JSON object in Sentry's Request interface. It shows a simple key-value structure for content-type and accept headers.

LANGUAGE: json
CODE:
{
  "content-type": "application/json",
  "accept": "application/json, application/xml"
}

----------------------------------------

TITLE: Configuring Sentry Exception Handling in Spring 6 (Java)
DESCRIPTION: This snippet shows how to configure Sentry's exception handling behavior in a Spring 6 application using Java. It sets the exceptionResolverOrder to LOWEST_PRECEDENCE to capture all exceptions.

LANGUAGE: java
CODE:
import io.sentry.spring.jakarta.EnableSentry;
import org.springframework.core.Ordered;
// NOTE: Replace the test DSN below with YOUR OWN DSN to see the events from this app in your Sentry
// project/dashboard
@EnableSentry(
  dsn = "___PUBLIC_DSN___",
  // Add data like request headers and IP for users,
  // see https://docs.sentry.io/platforms/java/guides/spring/data-management/data-collected/ for more info
  sendDefaultPii = true,
  exceptionResolverOrder = Ordered.LOWEST_PRECEDENCE
)
class SentryConfiguration {
}

----------------------------------------

TITLE: Specifying Scope Binding Behavior for UI Event Transactions in Gherkin
DESCRIPTION: This Gherkin code defines the behavior for binding UI event transactions to the scope, including handling different UI elements, finished transactions, and manually created transactions. It also covers interactions with screen load/navigation transactions.

LANGUAGE: Gherkin
CODE:
Scenario: Same UI element with different event
    Given an ongoing UI event transaction
    When the user triggers the same UI element with a different event
    Or the user triggers a different UI element
    Then the SDK finishes the ongoing transaction
    And sets the status to OK
    And waits for the children to finish
    And cancels the idle timeout
    And removes the ongoing transaction from the scope
    And starts a new transaction
    And puts the new transaction on the scope

Scenario: UI event triggered but transaction ended
    Given an auto-generated transaction from any UI event
    And the transaction is already finished
    When the user triggers the same UI event
    Then the SDK starts a new UI event transaction

Scenario: Manually created transaction bound to the scope
    Given an ongoing manually created transaction by the user bound to the
        scope
    When the user triggers a UI event
    Then the SDK doesn't start a UI event transaction

Scenario: Ongoing UI event transaction
    Given an ongoing UI event transaction
    When the SDK creates a new screen load transaction
    Then the SDK finishes the ongoing UI event transaction
    And removes it from the scope
    And sets the status to canceled
    And waits for its children to finish

Scenario: Ongoing screen load/navigation transaction
    Given an ongoing screen load/navigation transaction
    When the user triggers a UI event
    Then the SDK doesn't start a UI event transaction

----------------------------------------

TITLE: Capturing Messages with Sentry SDK in JavaScript
DESCRIPTION: Shows how to use Sentry's SDK to capture and send custom messages. This snippet illustrates the use of the captureMessage method to manually report textual information to Sentry.

LANGUAGE: javascript
CODE:
Sentry.captureMessage("Something went wrong");

----------------------------------------

TITLE: Adding Custom Event and Exception Processors
DESCRIPTION: Register custom event and exception processors using ASP.NET Core dependency injection.

LANGUAGE: csharp
CODE:
public void ConfigureServices(IServiceCollection services)
{
    services.AddTransient<ISentryEventProcessor, MyEventProcessor>();
    services.AddScoped<ISentryEventExceptionProcessor, MyExceptionProcessor>();
}

LANGUAGE: fsharp
CODE:
member this.ConfigureServices(services: IServiceCollection) =
    services.AddTransient<ISentryEventProcessor, MyEventProcessor>() |> ignore
    services.AddScoped<ISentryEventExceptionProcessor, MyExceptionProcessor>() |> ignore

----------------------------------------

TITLE: Enabling Screenshot Attachments in Sentry SDK Configuration
DESCRIPTION: This code snippet demonstrates how to enable automatic screenshot capturing when errors occur in a Sentry-instrumented application. It uses the 'attachScreenshot' option in the Sentry SDK configuration.

LANGUAGE: jsx
CODE:
<PlatformContent includePath="enriching-events/attach-screenshots" />

----------------------------------------

TITLE: Removing Error and Log Messages from Sentry Event
DESCRIPTION: Example of using PII selectors to remove both the exception value and log message from a Sentry event.

LANGUAGE: plaintext
CODE:
[Remove] [Anything] from [exception.value]
[Remove] [Anything] from [logentry.formatted]

----------------------------------------

TITLE: Adding File Attachment in C#
DESCRIPTION: Demonstrates how to add a file attachment to the current Sentry scope using C#. Uses the ConfigureScope method with a lambda expression to modify the scope and attach a file.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    // Add a file attachment to the current scope
    scope.AddAttachment("your/path/file.log");
});

----------------------------------------

TITLE: Initializing Sentry with Fastify (ESM)
DESCRIPTION: Sets up a Fastify server with Sentry error handling using ESM import syntax. Imports instrument module first, then initializes Fastify and configures Sentry error handler before starting the server on port 3030.

LANGUAGE: javascript
CODE:
// Import this first!
import "./instrument";

// Now import other modules
import Fastify from "fastify";
import * as Sentry from "@sentry/node";

const app = Fastify();

Sentry.setupFastifyErrorHandler(app);

// Add your routes, etc.

app.listen({ port: 3030 });

----------------------------------------

TITLE: Customizing Transaction Names in ASP.NET SDK
DESCRIPTION: Shows how to override the automatic transaction naming by accessing the active transaction and setting a custom name. This approach prevents unwanted grouping of transactions with similar patterns.

LANGUAGE: csharp
CODE:
if (SentrySdk.GetSpan()?.GetTransaction() is TransactionTracer transactionTracer)
{
    transactionTracer.NameSource = TransactionNameSource.Custom;
    transactionTracer.Name = "GET /users/{id}";
}

----------------------------------------

TITLE: Configuring Sentry Tracing and Sampling in Go
DESCRIPTION: This snippet demonstrates how to initialize Sentry with tracing enabled and custom sampling options. It shows setting a fixed sample rate and implementing a custom sampling function that excludes specific transactions based on their name.

LANGUAGE: go
CODE:
func main() {
    err := sentry.Init(sentry.ClientOptions{
        // ...

        EnableTracing: true,

        // Specify a fixed sample rate:
        // We recommend adjusting this value in production
        TracesSampleRate: 1.0,

        // Or provide a custom sample rate:
        TracesSampler: sentry.TracesSampler(func(ctx sentry.SamplingContext) float64 {
            // As an example, this does not send some
            // transactions to Sentry based on their name.
            if ctx.Span.Name == "GET /health" {
                return 0.0
            }
            return 1.0
        }),
    })
}

----------------------------------------

TITLE: Grouping Transactions with Global Event Processor in Sentry SDK
DESCRIPTION: This snippet demonstrates how to use a global event processor to customize transaction names when initializing the Sentry SDK. It allows for better control over how transactions are grouped and named.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="performance/group-transaction-example" />

----------------------------------------

TITLE: Configuring Server Name for Sentry SDK in Elixir
DESCRIPTION: Supplies a server name to be sent with events. In many integrations, this corresponds to the device hostname. Most SDKs attempt to auto-discover this value.

LANGUAGE: elixir
CODE:
config :sentry,
  server_name: "web1.example.com"

----------------------------------------

TITLE: Masking and Unmasking View Classes in Kotlin for Session Replay
DESCRIPTION: This code shows how to mask a custom view and unmask a specific TextView subclass in Session Replay using Kotlin.

LANGUAGE: kotlin
CODE:
options.sessionReplay.addMaskViewClass("com.example.MyCustomView")
options.sessionReplay.addUnmaskViewClass("com.example.MyCustomTextView")

----------------------------------------

TITLE: Initializing Sentry in Kotlin Multiplatform Common Module
DESCRIPTION: This snippet shows how to initialize Sentry in the common module of a Kotlin Multiplatform project. It sets up the Sentry SDK with a DSN (Data Source Name) for error tracking.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry

fun initializeSentry() {
  Sentry.init { options ->
    options.dsn = "___PUBLIC_DSN___"
  }
}

----------------------------------------

TITLE: Verifying ClickHouse Driver Integration with Sentry
DESCRIPTION: This Python script demonstrates how to use the ClickHouse driver with Sentry integration. It creates a transaction, performs database operations, and generates spans for monitoring.

LANGUAGE: python
CODE:
from clickhouse_driver import Client

def main():
    sentry_init(...)  # same as above

    with sentry_sdk.start_transaction(name="testing_sentry"):
        client = Client(host=DATABASE_HOST)
        client.execute("DROP TABLE IF EXISTS sentry_test")
        client.execute("CREATE TABLE sentry_test (x Int32) ENGINE = Memory")
        client.execute("INSERT INTO sentry_test (x) VALUES", [{"x": 100}])

main()

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Attachment Size in Swift
DESCRIPTION: This snippet demonstrates how to start the Sentry SDK in Swift and set the maximum attachment size to 5 MiB. It imports the Sentry module and uses the SentrySDK.start method with a closure to configure options.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.maxAttachmentSize = 5 * 1024 * 1024 // 5 MiB
}

----------------------------------------

TITLE: Importing TraceModule in NGModule-based Angular Configuration
DESCRIPTION: This code demonstrates how to import the TraceModule in an NGModule-based Angular application configuration. This setup is required to use the trace directive in component templates.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/angular";

@NgModule({
  imports: [Sentry.TraceModule],
  // ...
})
export class AppModule {}

----------------------------------------

TITLE: Installing Sentry SDK via pip
DESCRIPTION: Command to install or upgrade the Sentry SDK using pip package manager.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk'

----------------------------------------

TITLE: Initializing Sentry Client with Production Environment in Go
DESCRIPTION: This code snippet initializes the Sentry client with specific options. It sets the environment to 'production', which is crucial for proper error tracking and reporting in a production setting.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	// ...
	Environment: "production",
})

----------------------------------------

TITLE: Uploading Debug Files via sentry-cli
DESCRIPTION: Command to upload debug files to Sentry using sentry-cli. The command recursively scans a folder and uploads debug files to the specified Sentry project. Adding --wait flag allows for manual testing before sending crash reports.

LANGUAGE: shell
CODE:
sentry-cli debug-files upload

LANGUAGE: shell
CODE:
sentry-cli debug-files upload --wait

----------------------------------------

TITLE: Initializing Sentry Performance V2 in Java
DESCRIPTION: Configuration code to enable Performance V2 features in Sentry Android SDK using Java. Requires SDK version 7.4.0 or above.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  options.setEnablePerformanceV2(true);
});

----------------------------------------

TITLE: Initializing Sentry with Statsig Integration in Angular
DESCRIPTION: This code snippet demonstrates how to set up Sentry with Statsig integration in an Angular application. It includes initializing the Statsig client, configuring Sentry with the Statsig integration, and checking a feature gate. The Statsig client requires a SDK key and user ID for initialization.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/angular';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Setting Hackney Options for Sentry SDK in Elixir
DESCRIPTION: Configures options to be passed to Hackney. Only applied if the client is set to Sentry.HackneyClient. This allows for fine-tuning of the HTTP client behavior.

LANGUAGE: elixir
CODE:
config :sentry,
  hackney_opts: [pool: :my_custom_pool]

----------------------------------------

TITLE: Implementing Custom RPC Exception Handling in C# with Sentry
DESCRIPTION: Demonstrates the creation of a custom RPC exception class and configuration of Sentry SDK's BeforeSend callback to set custom fingerprints. The implementation allows for grouping similar RPC errors based on the function name and HTTP status code.

LANGUAGE: csharp
CODE:
public class MyRpcException : Exception
{
    // The name of the RPC function that was called (e.g. "getAllBlogArticles")
    public string Function { get; set; }

    // For example a HTTP status code returned by the server.
    public HttpStatusCode Code { get; set; }
}

// Add this to the SDK initialization callback
options.SetBeforeSend(@event =>
{
    if (@event.Exception is MyRpcException ex)
    {
        @event.SetFingerprint(
            new []
            {
                "{{ default }}",
                ex.Function,
                ex.Code.ToString(),
            }
        );
    }

    return @event;
});

----------------------------------------

TITLE: Configuring Prisma Schema for Tracing in Version 5
DESCRIPTION: This snippet shows how to add the tracing feature flag to the generator block in the Prisma schema file for version 5. This enables tracing functionality for Prisma queries.

LANGUAGE: txt
CODE:
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

----------------------------------------

TITLE: Initializing Sentry in Android App
DESCRIPTION: This snippet shows how to initialize Sentry in an Android app by calling the initializeSentry() function from the shared Kotlin module in the Application class.

LANGUAGE: kotlin
CODE:
import your.kmp.app.initializeSentry

class YourApplication : Application() {
  override fun onCreate() {
    super.onCreate()
      initializeSentry()
   }
}

----------------------------------------

TITLE: Installing Sentry Dependencies for AngularJS
DESCRIPTION: Commands to install required Sentry packages (@sentry/browser and @sentry/integrations) using different package managers. Version 6.x is specifically required for AngularJS 1.x compatibility.

LANGUAGE: bash
CODE:
npm install @sentry/browser@6 @sentry/integrations@6 --save

LANGUAGE: bash
CODE:
yarn add @sentry/browser@6 @sentry/integrations@6

LANGUAGE: bash
CODE:
pnpm add @sentry/browser@6 @sentry/integrations@6

----------------------------------------

TITLE: Initializing Sentry SDK with Feedback Integration
DESCRIPTION: Sets up Sentry error tracking with custom feedback integration configuration. Demonstrates how to initialize Sentry with a DSN and configure the feedback widget with system color scheme.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/angular";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.feedbackIntegration({
      // Additional SDK configuration goes in here, for example:
      colorScheme: "system",
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry with AngularJS Module
DESCRIPTION: JavaScript configuration to initialize Sentry with AngularJS integration. Demonstrates how to import required dependencies, initialize Sentry with a DSN, and add ngSentry as a module dependency.

LANGUAGE: javascript
CODE:
import angular from "angular";
import * as Sentry from "@sentry/browser";
import { Angular as AngularIntegration } from "@sentry/integrations";

// Make sure to call Sentry.init after importing AngularJS.
// You can also pass {angular: AngularInstance} to the Integrations.Angular() constructor.
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [new AngularIntegration()],
});

// Finally require ngSentry as a dependency in your application module.
angular.module("yourApplicationModule", ["ngSentry"]);

----------------------------------------

TITLE: Sentry Raven Configuration with Stack Frame Rewriting
DESCRIPTION: Configuration for Sentry's Raven client that includes stack trace frame modification for proper source mapping.

LANGUAGE: javascript
CODE:
import * as path from "path";
const root = global.__rootdir__;

Raven.config("your-dsn", {
  // the rest of configuration

  dataCallback: function (data) {
    var stacktrace = data.exception && data.exception[0].stacktrace;

    if (stacktrace && stacktrace.frames) {
      stacktrace.frames.forEach(function (frame) {
        if (frame.filename.startsWith("/")) {
          frame.filename = "app:///" + path.relative(root, frame.filename);
        }
      });
    }

    return data;
  },
}).install();

----------------------------------------

TITLE: Adding Attachments within Sentry Scope Configuration in Ruby
DESCRIPTION: This snippet shows how to add attachments to Sentry events within a configured scope using the Sentry.configure_scope method. It demonstrates adding attachments from both a file path and as bytes.

LANGUAGE: ruby
CODE:
Sentry.configure_scope do |scope|
  scope.add_attachment(path: '/path/to/attachment/file.txt')
  scope.add_attachment(filename: 'payload.json', bytes: '{"value": 42}'))
end

----------------------------------------

TITLE: Setting Error Sample Rate in Sentry SDK Configuration
DESCRIPTION: Configure the SDK to send a representative sample of errors to Sentry by setting the sample rate option. This example sets a 25% sample rate for errors.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // Set sampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  sampleRate: 0.25
});

----------------------------------------

TITLE: Using Sentry Testkit in JavaScript Tests
DESCRIPTION: Demonstrates how to use Sentry Testkit in JavaScript tests. It shows initialization of Sentry with the testkit's transport and examples of testing error and performance event collection.

LANGUAGE: javascript
CODE:
import sentryTestkit from "sentry-testkit";

const { testkit, sentryTransport } = sentryTestkit();

// initialize your Sentry instance with sentryTransport
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  transport: sentryTransport,
  //... other configurations
});

test("collect error events", function () {
  // run any scenario that eventually calls Sentry.captureException(...)
  expect(testkit.reports()).toHaveLength(1);
  const report = testkit.reports()[0];
  expect(report).toHaveProperty(/*...*/);
});

// Similarly for performance events
test("collect performance events", function () {
  // run any scenario that eventually calls Sentry.startTransaction(...)
  expect(testkit.transactions()).toHaveLength(1);
});

----------------------------------------

TITLE: Configuring Hackney Pool for Sentry SDK in Elixir
DESCRIPTION: Sets the maximum number of connections to keep in the Hackney pool and the maximum wait time for a connection. These options are only applied if using Sentry.HackneyClient.

LANGUAGE: elixir
CODE:
config :sentry,
  hackney_pool_max_connections: 100,
  hackney_pool_timeout: 10000

----------------------------------------

TITLE: Initializing Crashpad Handler in C++
DESCRIPTION: This snippet demonstrates how to initialize the Crashpad handler during program startup. It sets up the necessary parameters for the handler, including the database path, handler executable path, minidump URL, and optional annotations and arguments.

LANGUAGE: cpp
CODE:
#include <map>
#include <string>
#include <vector>

#include "client/crashpad_client.h"
#include "client/settings.h"

using namespace crashpad;

bool startCrashpad() {
  // Cache directory that will store crashpad information and minidumps
  base::FilePath database("path/to/crashpad/db");
  // Path to the out-of-process handler executable
  base::FilePath handler("path/to/crashpad_handler");
  // URL used to submit minidumps to
  std::string minidump_url("___MINIDUMP_URL___");
  // PROXY used for the url
  std::string http_proxy("");
  // Optional annotations passed via --annotations to the handler
  std::map<std::string, std::string> annotations;
  // Optional arguments to pass to the handler
  std::vector<std::string> arguments;

  CrashpadClient client;
  bool success = client.StartHandler(
    handler,
    database,
    database,
    minidump_url,
    http_proxy,
    annotations,
    arguments,
    /* restartable */ true,
    /* asynchronous_start */ false
  );

  return success;
}

----------------------------------------

TITLE: Configuring Transaction Sampling in Sentry PowerShell SDK
DESCRIPTION: Sets up a custom transaction sampling function that determines whether to sample specific transactions and at what rate. The function accepts a TransactionSamplingContext parameter and returns either a sampling rate (0.0-1.0) or null to fall back to the default rate.

LANGUAGE: powershell
CODE:
Start-Sentry {
    $_.TracesSampler = [System.Func[Sentry.TransactionSamplingContext, System.Nullable`1[System.Double]]] {
        param([Sentry.TransactionSamplingContext]$context)

    if (/* make a decision based on `samplingContext` */) {
      # Drop this transaction, by setting its sample rate to 0%
      return 0
    } else if (/* ... */) {
      # Override sample rate for other cases (replaces `options.TracesSampleRate`)
      return 0.1
    }

    # Can return `null` to fallback to the rate configured by `options.TracesSampleRate`
    return $null
    }
}

----------------------------------------

TITLE: Configuring Sentry SDK for Remix Client-side
DESCRIPTION: TypeScript code to initialize Sentry SDK on the client-side of a Remix application, including performance monitoring and session replay integration.

LANGUAGE: typescript
CODE:
import { useLocation, useMatches } from "@remix-run/react";
import * as Sentry from "@sentry/remix";
import { useEffect } from "react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.browserTracingIntegration({
      useEffect,
      useLocation,
      useMatches,
    }),
    // Replay is only available in the client
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs distributed tracing should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Extracting Incoming Trace Headers with RabbitMQ in C#
DESCRIPTION: Demonstrates how to extract Sentry trace and baggage headers from incoming RabbitMQ messages and continue the trace using SentrySdk.ContinueTrace(). This code shows the setup of a RabbitMQ consumer that processes incoming message headers for distributed tracing.

LANGUAGE: csharp
CODE:
using System.Text;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;

var factory = new ConnectionFactory()
{
    HostName = "localhost",
    UserName = "guest",
    Password = "guest"
};

using var connection = factory.CreateConnection();
using var channel = connection.CreateModel();

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (model, ea) =>
{
    // Extract headers from the incoming message
    var headers = ea.BasicProperties.Headers;
    if (headers != null)
    {
        var sentryTraceHeader = string.Empty;
        var sentryBaggageHeader = string.Empty;

        if (headers.TryGetValue("sentry-trace", out var traceHeader))
        {
            sentryTraceHeader = Encoding.UTF8.GetString((byte[])traceHeader);
        }

        if (headers.TryGetValue("baggage", out var baggageHeader))
        {
            sentryBaggageHeader = Encoding.UTF8.GetString((byte[])baggageHeader);
        }

        var transactionContext = SentrySdk.ContinueTrace(sentryTraceHeader, sentryBaggageHeader);
        var transaction = SentrySdk.StartTransaction(transactionContext);
    }
};

----------------------------------------

TITLE: Migrating Overlapping Job Check-Ins in Shell
DESCRIPTION: Demonstrates the changes in handling overlapping job check-ins, emphasizing the need to generate Check-In UUIDs client-side in the new API.

LANGUAGE: shell
CODE:
# ❌ Legacy Check-In with ID
curl -X POST \
    'https://sentry.io/api/0/organizations/___ORG_SLUG___/monitors/<monitor_slug>/checkins/' \
    --header 'Authorization: DSN ___PUBLIC_DSN___' \
    --header 'Content-Type: application/json' \
    --data-raw '{"status": "in_progress"}'
# Response { "id": "2bc1a871-a1b7-4577-82fc-fa6d2468aabc" }

# ✅ New style upsert monitor with a check-in
CHECK_IN_ID="$(uuidgen)"
# 👉 Note that you now need to generate the Check-In UUID

SENTRY_INGEST="https://___ORG_INGEST_DOMAIN___"
SENTRY_CRONS="${SENTRY_INGEST}/api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/"

curl "${SENTRY_CRONS}?check_in_id=${CHECK_IN_ID}&status=in_progress"
# 👉 Note that no Check-In ID is returned

----------------------------------------

TITLE: Configuring Additional Web Server Options in Python
DESCRIPTION: Sets additional configuration options for the Sentry web server using uwsgi.

LANGUAGE: python
CODE:
SENTRY_WEB_OPTIONS = {
    'workers': 10,
    'buffer-size': 32768,
}

----------------------------------------

TITLE: Adding Manual Breadcrumb in C++ for Unreal Engine with Sentry
DESCRIPTION: Demonstrates how to manually add a breadcrumb using the Sentry subsystem in Unreal Engine C++. This snippet shows creating additional data and adding a breadcrumb with a message, category, type, and log level.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

TMap<FString, FString> AdditionalData;
AdditionalData.Add("SomeKey", "SomeValue");

SentrySubsystem->AddBreadcrumb("Message", "Category", "Type", AdditionalData, ESentryLevel::Info);

----------------------------------------

TITLE: AWS Lambda Integration
DESCRIPTION: Setup for using Raven with AWS Lambda functions

LANGUAGE: python
CODE:
from raven.contrib.awslambda import LambdaClient

client = LambdaClient()

@client.capture_exceptions
def handler(event, context):
    ...
    raise Exception('I will be sent to sentry!')

----------------------------------------

TITLE: Initializing Sentry SDK in UIKit-based iOS App (Swift)
DESCRIPTION: This snippet shows how to initialize the Sentry SDK in a UIKit-based iOS application using Swift. It demonstrates setting up the SDK in the AppDelegate's application(_:didFinishLaunchingWithOptions:) method, configuring the DSN, enabling debug mode, and setting the traces sample rate.

LANGUAGE: swift
CODE:
import Sentry // Make sure you import Sentry

// ....

func application(_ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {

    SentrySDK.start { options in
        options.dsn = "___PUBLIC_DSN___"
        options.debug = true // Enabled debug when first installing is always helpful

        // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.
        // We recommend adjusting this value in production.
        options.tracesSampleRate = 1.0
    }

    return true
}

----------------------------------------

TITLE: Importing Platform-Specific Content in JSX
DESCRIPTION: React/JSX component that imports platform-specific content from a defined path related to performance sampling context documentation.

LANGUAGE: jsx
CODE:
<PlatformContent includePath="performance/default-sampling-context-platform" />

----------------------------------------

TITLE: Registering Feature Flag in Sentry
DESCRIPTION: Shows how to declare a new feature flag in the Sentry codebase using the OPTIONS strategy. This should be added to either temporary.py or permanent.py files.

LANGUAGE: python
CODE:
manager.add("organizations:your-new-flag", OrganizationFeature, FeatureHandlerStrategy.OPTIONS)

----------------------------------------

TITLE: Masking Specific View Instances in Kotlin for Session Replay
DESCRIPTION: This Kotlin code demonstrates how to mask or unmask a specific view instance using tags programmatically for Session Replay.

LANGUAGE: kotlin
CODE:
view.tag = "sentry-mask|sentry-unmask"

----------------------------------------

TITLE: Ensuring Request Isolation (CommonJS)
DESCRIPTION: Example of how to ensure request isolation in non-HTTP scenarios using Sentry.withIsolationScope() in CommonJS syntax. This replaces the previous Sentry.runWithAsyncContext method.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

function myScheduledJob() {
  return Sentry.withIsolationScope(async () => {
    await doSomething();
    await doSomethingElse();
    return { status: "DONE" };
  });
}

----------------------------------------

TITLE: Forcing Sampling Decision in Sentry Transaction (Python)
DESCRIPTION: Show how to force a sampling decision when starting a transaction by passing it directly to the constructor.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.start_transaction(
    name="checkout",
    sampled=True,
)

----------------------------------------

TITLE: Setting Sentry Environment in F#
DESCRIPTION: F# code snippet showing how to set the Sentry environment during SDK initialization.

LANGUAGE: fsharp
CODE:
// Add this to the SDK initialization callback
options.Environment <- "production"

----------------------------------------

TITLE: Setting Sentry User Context in Elixir
DESCRIPTION: These snippets demonstrate how to set user context in Sentry using Elixir. The first example sets the context using a user ID, while the second uses a username. This allows for better tracking and identification of users in error reports.

LANGUAGE: elixir
CODE:
Sentry.Context.set_user_context(%{id: user.id})

# Or:
Sentry.Context.set_user_context(%{username: user.username})

----------------------------------------

TITLE: CORS Script Configuration
DESCRIPTION: Shows how to configure scripts for cross-origin error reporting

LANGUAGE: html
CODE:
<script src="//cdn.example.com/script.js" crossorigin="anonymous"></script>

----------------------------------------

TITLE: Setting Sentry Scope Tag in C#
DESCRIPTION: Configures a Sentry scope to add a custom tag for page locale using C# lambda syntax. Sets the 'page.locale' tag to 'de-at' value.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.SetTag("page.locale", "de-at");
});

----------------------------------------

TITLE: Generating ProGuard UUID in Python
DESCRIPTION: This Python code snippet demonstrates how to generate a UUID for ProGuard files in Sentry. It uses a custom namespace based on 'guardsquare.com' and calculates a SHA1 UUID based on the file's content.

LANGUAGE: python
CODE:
import uuid

NAMESPACE = uuid.uuid5(uuid.NAMESPACE_DNS, "guardsquare.com")

def get_proguard_uuid(filename):
    with open(filename, 'rb') as f:
        return uuid.uuid5(NAMESPACE, f.read())

----------------------------------------

TITLE: Initializing Sentry SDK with Breadcrumb Filtering in Java
DESCRIPTION: Demonstrates how to initialize the Sentry Android SDK and configure a breadcrumb callback filter in Java. The callback checks if the hint is of type MyHint and filters out those breadcrumbs by returning null, otherwise allows the breadcrumb to be recorded.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  options.setBeforeBreadcrumb((breadcrumb, hint) -> {
    if (hint instanceof MyHint) {
      return null;
    } else {
      return breadcrumb;
    }
  });
});

----------------------------------------

TITLE: Initializing Sentry with Feature Flags and Capturing Exception in TypeScript
DESCRIPTION: This snippet initializes Sentry with a DSN and feature flags integration. It then attempts to add a feature flag and captures an exception. The code demonstrates error handling if the integration is not properly initialized.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/react';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Filtering Transactions with tracesSampler in JavaScript
DESCRIPTION: Demonstrates how to use the tracesSampler function to filter out specific transactions based on their name.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  tracesSampler: samplingContext => {
    if (samplingContext.transactionContext.name === 'health_check') {
      // Drop this transaction completely
      return 0;
    }
    // Sample all other transactions normally
    return 0.1;
  },
});

----------------------------------------

TITLE: Implementing Job Isolation with Sentry.withIsolationScope in JavaScript
DESCRIPTION: This snippet demonstrates how to use Sentry.withIsolationScope() to create an isolated scope for a specific job run. It sets a tag with the job ID, which will only be attached to events captured within this isolated scope.

LANGUAGE: javascript
CODE:
async function job(jobId) {
  return Sentry.withIsolationScope(async () => {
    // Only valid for events in this callback
    Sentry.setTag("jobId", jobId);
    await doSomething();
  });
}

----------------------------------------

TITLE: Initializing Sentry with Custom Exception Fingerprinting in Java
DESCRIPTION: Sets up Sentry error tracking with custom fingerprinting for SQLiteException errors. Uses the beforeSend callback to modify event fingerprints when database connection errors occur.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;
import android.database.sqlite.SQLiteException;
import java.util.Arrays;

SentryAndroid.init(this, options -> {
  options.setBeforeSend((event, hint) -> {
    if (event.getThrowable() instanceof SQLiteException) {
      event.setFingerprints(Arrays.asList("database-connection-error"));
    }
    return event;
  });
});

----------------------------------------

TITLE: Initializing Sentry with Session Replay Integration in JavaScript
DESCRIPTION: This snippet initializes Sentry with Session Replay integration. It sets up sampling rates for session replays and error replays, and configures privacy settings for text masking and media blocking.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This sets the sample rate to be 10%. You may want this to be 100% while
  // in development and sample at a lower rate in production
  replaysSessionSampleRate: 0.1,

  // If the entire session is not sampled, use the below sample rate to sample
  // sessions when an error occurs.
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    Sentry.replayIntegration({
      // Additional SDK configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

----------------------------------------

TITLE: Adding Sentry and Timber Dependencies in Gradle
DESCRIPTION: Add the Sentry Android and Sentry Android Timber dependencies to the project using Gradle for manual installation.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-android:{{@inject packages.version('sentry.java.android', '4.2.0') }}'
implementation 'io.sentry:sentry-android-timber:{{@inject packages.version('sentry.java.android.timber', '4.2.0') }}'

----------------------------------------

TITLE: Capturing Events with Raven Python Client
DESCRIPTION: Example of using the low-level capture method to report events to Sentry with custom request and logger data.

LANGUAGE: python
CODE:
capture('raven.events.Message', message='foo', data={
    'request': {
        'url': '...',
        'data': {},
        'query_string': '...',
        'method': 'POST',
    },
    'logger': 'logger.name',
}, extra={
    'key': 'value',
})

----------------------------------------

TITLE: Configuring Session Timeout Duration in Sentry Flutter
DESCRIPTION: Sets a custom session timeout duration for tracking user sessions in Sentry. This code modifies the default 30-second background timeout to 60 seconds using the autoSessionTrackingInterval option.

LANGUAGE: dart
CODE:
SentryFlutter.init((options) {
  options.autoSessionTrackingInterval = const Duration(seconds: 60)
});

----------------------------------------

TITLE: Adding Sentry Gems to Ruby Gemfile
DESCRIPTION: This snippet shows how to add the sentry-ruby and sentry-sidekiq gems to a Ruby project's Gemfile. These gems are required for integrating Sentry error tracking and monitoring with a Ruby application using Sidekiq.

LANGUAGE: ruby
CODE:
gem "sentry-ruby"
gem "sentry-sidekiq"

----------------------------------------

TITLE: Implementing Sentry Feedback Widget Toggle in React
DESCRIPTION: This React component creates a button that toggles the display of a Sentry feedback widget. It uses useState and useEffect hooks to manage the widget state and handle client-side initialization. The component interacts with Sentry's API to create and remove the widget from the DOM.

LANGUAGE: jsx
CODE:
function ToggleFeedbackButton() {
  const [feedback, setFeedback] = useState();
  // Read `getFeedback` on the client only, to avoid hydration errors during server rendering
  useEffect(() => {
    setFeedback(Sentry.getFeedback());
  }, []);

  const [widget, setWidget] = useState();
  return (
    <button
      type="button"
      onClick={async () => {
        if (widget) {
          widget.removeFromDom();
          setWidget(null);
        } else {
          setWidget(feedback.createWidget());
        }
      }}
    >
      {widget ? "Remove Widget" : "Create Widget"}
    </button>
  );
}

----------------------------------------

TITLE: Injecting Tracing Information into Rendered HTML using ERB
DESCRIPTION: Demonstrates how to inject tracing information as HTML meta tags in a Rails layout using Sentry's get_trace_propagation_meta function. This allows propagation of tracing information to JavaScript running in the rendered HTML.

LANGUAGE: erb
CODE:
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <%= Sentry.get_trace_propagation_meta.html_safe %>
  </head>
  <body>
    <p>This is a website.</p>
  </body>
</html>

----------------------------------------

TITLE: Adding Data Attributes to Transactions in Sentry with Ruby
DESCRIPTION: This code snippet demonstrates how to add various types of data attributes to a transaction in Sentry using Ruby. It shows how to set string, number, boolean, and array attributes.

LANGUAGE: ruby
CODE:
Sentry.start_transaction(name: "my-transaction") do |transaction|
  transaction.set_data("my-data-attribute-1", "value1")
  transaction.set_data("my-data-attribute-2", 42)
  transaction.set_data("my-data-attribute-3", true)

  transaction.set_data("my-data-attribute-4", ["value1", "value2", "value3"])
  transaction.set_data("my-data-attribute-5", [42, 43, 44])
  transaction.set_data("my-data-attribute-6", [true, false, true])
end

----------------------------------------

TITLE: Configuring Ember-Specific Sentry Options
DESCRIPTION: Setting Ember-specific configuration options for the Sentry addon using the ENV configuration object.

LANGUAGE: javascript
CODE:
ENV["@sentry/ember"] = {
  // Ember specific options
};

----------------------------------------

TITLE: Installing Sentry Android Gradle Plugin
DESCRIPTION: Adding the Sentry Android Gradle plugin to the app's build.gradle file for Session Replay functionality.

LANGUAGE: groovy
CODE:
plugins {
  id "com.android.application"
  id "io.sentry.android.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '4.10.0') }}"
}

LANGUAGE: kotlin
CODE:
plugins {
  id("com.android.application")
  id("io.sentry.android.gradle") version "{{@inject packages.version('sentry.java.android.gradle-plugin', '4.10.0') }}"
}

----------------------------------------

TITLE: Adding Sentry SDK Dependency in Gradle (Groovy)
DESCRIPTION: This snippet shows how to add the Sentry Android SDK dependency to your app's build.gradle file using Groovy syntax.

LANGUAGE: groovy
CODE:
dependencies {
    implementation 'io.sentry:sentry-android:{{@inject packages.version('sentry.java.android', '4.2.0') }}'
}

----------------------------------------

TITLE: Importing Platform-Specific Content for Default Sampling Context in React
DESCRIPTION: This snippet uses a custom React component to import platform-specific content for default sampling context in Sentry's performance monitoring. The component likely renders different content based on the current platform or environment.

LANGUAGE: jsx
CODE:
<PlatformContent includePath="performance/default-sampling-context-platform" />

----------------------------------------

TITLE: Configuring Organization Feature Flag in YAML
DESCRIPTION: Example configuration for a feature named 'organizations:is_sentry' that enables functionality for an organization with the slug 'sentry'. Demonstrates segment conditions and rollout settings.

LANGUAGE: yaml
CODE:
options:
  'feature.organizations:is_sentry':
    created_at: '2024-06-01T00:00:00.000000'
    enabled: false
    owner: hybrid-cloud
    segments:
    - conditions:
      - operator: in
        value:
          - sentry
        property: organization_slug
      name: is_sentry
      rollout: 100

----------------------------------------

TITLE: Mocking Specific Subscription Plan
DESCRIPTION: Command to mock a specific subscription plan for an organization in Getsentry.

LANGUAGE: shell
CODE:
./bin/mock-subscription <org_slug> --plan mm2_a_500k

----------------------------------------

TITLE: Configuring Sentry Navigation Observer for Jetpack Compose
DESCRIPTION: Set up Sentry to observe navigation events in Jetpack Compose.

LANGUAGE: kotlin
CODE:
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.rememberNavController
import io.sentry.compose.withSentryObservableEffect

val navController = rememberNavController().withSentryObservableEffect(
  enableNavigationBreadcrumbs = true, // enabled by default
  enableNavigationTracing = true  // enabled by default
)
NavHost(
  navController = navController
) {
  ...
}

----------------------------------------

TITLE: Creating Custom Transaction in Sentry for Kotlin
DESCRIPTION: This snippet shows how to create a custom transaction in Sentry for Kotlin. It captures an expensive operation, handles exceptions, sets transaction status, and ensures the transaction is finished.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SpanStatus

// A good name for the transaction is key, to help identify what this is about
val transaction = Sentry.startTransaction("processOrderBatch()", "task")
try {
  processOrderBatch()
} catch (e: Exception) {
  transaction.throwable = e
  transaction.status = SpanStatus.INTERNAL_ERROR
  throw e
} finally {
  transaction.finish();
}

----------------------------------------

TITLE: Configuring RedisSnuba Backend for Sentry TSDB
DESCRIPTION: This snippet shows how to configure the RedisSnuba backend, which is the recommended and fully functional option for Sentry's time-series data storage. It uses Snuba for event ingestion metrics and Redis for other data.

LANGUAGE: python
CODE:
SENTRY_TSDB = 'sentry.tsdb.redissnuba.RedisSnubaTSDB'

LANGUAGE: python
CODE:
SENTRY_TSDB_OPTIONS = {
    'redis': ... # options dict for RedisTSDB here
}

----------------------------------------

TITLE: Spring Boot 2 Transaction Annotation (Java)
DESCRIPTION: Example of using @SentryTransaction annotation to instrument a scheduled job execution in Spring Boot 2

LANGUAGE: java
CODE:
import org.springframework.stereotype.Component;
import org.springframework.scheduling.annotation.Scheduled;
import io.sentry.spring.tracing.SentryTransaction;

@Component
class ScheduledJob {

  @Scheduled(...)
  @SentryTransaction(operation = "task")
  void execute() {
    ...
  }
}

----------------------------------------

TITLE: Initializing Sentry in ASP.NET Core
DESCRIPTION: Use the UseSentry extension method to initialize Sentry in different ASP.NET Core application types.

LANGUAGE: csharp
CODE:
var builder = WebApplication.CreateBuilder(args);
builder.WebHost.UseSentry(); // Initialize Sentry

LANGUAGE: csharp
CODE:
public static IHostBuilder CreateHostBuilder(string[] args) =>
    Host.CreateDefaultBuilder(args)
        .ConfigureWebHostDefaults(webBuilder =>
        {
            // Add the following line:
            webBuilder.UseSentry();
        });

LANGUAGE: csharp
CODE:
public static IWebHost BuildWebHost(string[] args) =>
    WebHost.CreateDefaultBuilder(args)
        // Add the following line:
        .UseSentry()

----------------------------------------

TITLE: Verifying Sentry Integration
DESCRIPTION: Sample code to verify the Sentry integration by creating a test endpoint that generates an error

LANGUAGE: python
CODE:
from sanic import Sanic
from sanic.response import text
import sentry_sdk
from sentry_sdk.integrations.asyncio import AsyncioIntegration

app = Sanic(__name__)

@app.listener("before_server_start")
async def init_sentry(_):
    sentry_sdk.init(...)  # same as above

@app.get("/")
async def hello_world(request):
    1 / 0  # raises an error
    return text("Hello, world.")

----------------------------------------

TITLE: Applying Multiple Scopes to an Event in JavaScript
DESCRIPTION: Illustrates how data from global, isolation, and current scopes is applied to an event, with current scope taking precedence.

LANGUAGE: javascript
CODE:
Sentry.getGlobalScope().setExtras({
  shared: "global",
  global: "data",
});
Sentry.getIsolationScope().setExtras({
  shared: "isolation",
  isolation: "data",
});
Sentry.getCurrentScope().setExtras({
  shared: "current",
  current: "data",
});

Sentry.captureException(new Error("my error"));
// --> Will have the following extra:
// { shared: 'current', global: 'data', isolation: 'data', current: 'data' }

----------------------------------------

TITLE: Thread Metadata Structure in JSON
DESCRIPTION: Demonstrates the structure of the thread_metadata object, containing information about threads detected during runtime.

LANGUAGE: json
CODE:
{
  "thread_metadata": {
    "259": {
      "name": "com.apple.main-thread",
      "priority": 31
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry SDK in Version 8.x
DESCRIPTION: Shows how to initialize the Sentry SDK using the recommended configuration pattern in version 8.x with DSN setup.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    // ...
}

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    // ...
}];

----------------------------------------

TITLE: Initializing Sentry with Hapi.js Server (CommonJS)
DESCRIPTION: Sets up a Hapi.js server with Sentry error handling using CommonJS require statements. Creates a server instance on localhost:3030 and configures Sentry's error handler before starting the server.

LANGUAGE: javascript
CODE:
// Require this first!
require("./instrument");

// Now require other modules
const Sentry = require("@sentry/node");
const Hapi = require('@hapi/hapi');

const init = async () => {
  const server = Hapi.server({
    port: 3030,
    host: 'localhost',
  });

  // All your routes etc.

  await Sentry.setupHapiErrorHandler(server);

  await server.start();
  console.log('Server running on %s', server.info.uri);
};

init();

----------------------------------------

TITLE: Using SentryFileReader and SentryFileWriter in Kotlin
DESCRIPTION: This snippet shows how to use Sentry's instrumented versions of FileReader and FileWriter in Kotlin. It replaces the standard classes with SentryFileReader and SentryFileWriter for improved monitoring and error tracking.

LANGUAGE: kotlin
CODE:
import io.sentry.instrumentation.file.SentryFileReader
import io.sentry.instrumentation.file.SentryFileWriter
import java.io.File

val file1 = File("file1.txt")
val file2 = File("file2.txt")
SentryFileReader(file1).use { SentryFileWriter(file2).write(it.readText()) }

----------------------------------------

TITLE: Disabling Specific Sentry Integrations in Python
DESCRIPTION: Demonstrates how to disable specific integrations using the disabled_integrations configuration option.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.flask import FlaskIntegration

sentry_sdk.init(
    # Do not use the Flask integration even if Flask is installed.
    disabled_integrations=[
        FlaskIntegration(),
    ],
)

----------------------------------------

TITLE: Implementing Before Send Hook for Sentry SDK in Elixir
DESCRIPTION: Defines a function to be called before sending an event. This can be used for manual PII stripping or event modification. The function receives an event object and can return a modified event or null to skip reporting.

LANGUAGE: elixir
CODE:
config :sentry,
  before_send: fn(event) ->
    # Modify or filter event
    event
  end

----------------------------------------

TITLE: Adding Attachments in beforeSend for Java and Kotlin
DESCRIPTION: Illustrates how to add attachments using the beforeSend callback. The code demonstrates setting up the beforeSend option to add an attachment to the hint.

LANGUAGE: java
CODE:
import io.sentry.Attachment;
import io.sentry.Hint;
import io.sentry.Sentry;

options.setBeforeSend((event, hint) -> {
  hint.addAttachment(new Attachment("/path/to/file.txt"))
  return event;
});

LANGUAGE: kotlin
CODE:
import io.sentry.Attachment;
import io.sentry.Hint;
import io.sentry.Sentry;
import io.sentry.SentryOptions.BeforeSendCallback

options.beforeSend = BeforeSendCallback { event, hint ->
  hint.addAttachment(Attachment("/path/to/file.txt"))
  event
}

----------------------------------------

TITLE: Configuring Persistent Scope in Sentry PHP
DESCRIPTION: Uses configureScope helper to set up persistent context information for all Sentry events. Sets character context with name, age, and attack type that will be included in all captured events.

LANGUAGE: php
CODE:
\Sentry\configureScope(function (\Sentry\State\Scope $scope): void {
    $scope->setContext('character', [
        'name' => 'Mighty Fighter',
        'age' => 19,
        'attack_type' => 'melee'
    ]);
});

----------------------------------------

TITLE: Initializing Sentry with Environment Configuration in Dart
DESCRIPTION: This code initializes Sentry and sets the environment to 'staging'. It uses the await keyword, indicating it's part of an asynchronous function.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.environment = 'staging';
});

----------------------------------------

TITLE: Setting Sentry Transaction Name in C#
DESCRIPTION: This code configures the Sentry SDK scope by setting the transaction name to 'UserListViewModel'. This helps in organizing and identifying errors or performance issues related to the user list view model in the Sentry dashboard.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope => scope.TransactionName = "UserListViewModel");

----------------------------------------

TITLE: Initializing Sentry with Replay and Canvas Integrations in JavaScript
DESCRIPTION: This snippet initializes Sentry for an Astro project, configuring the DSN, session replay rates, and integrating both standard replay and canvas recording functionalities. It demonstrates how to set up Sentry with advanced features for comprehensive error tracking and user session analysis.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/astro";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    // Keep the Replay integration as before
    Sentry.replayIntegration(),

    // The following is all you need to enable canvas recording with Replay
    Sentry.replayCanvasIntegration(),
  ],
});

----------------------------------------

TITLE: Installing Sentry SDK with pip
DESCRIPTION: This command installs or upgrades the Sentry SDK package using pip, the Python package installer.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk'

----------------------------------------

TITLE: Creating Transactions and Spans with Sentry SDK in Objective-C
DESCRIPTION: This snippet shows how to create a transaction and child spans using Sentry SDK in Objective-C. It measures the performance of a checkout process, including validation and processing steps.

LANGUAGE: objc
CODE:
// Let's say this method is called in a background thread when a user clicks on the checkout button of your shop
-(void) performCheckout
{
  // This will create a new Transaction for you

  id<SentrySpan> transaction = [SentrySDK startTransactionWithName:@"checkout",
                                                   operation:@"perform-checkout"
  );

  // Validate the cart
  id<SentrySpan> validationSpan = [transaction startChildWithOperation:@"validation",
                                                     description:@"validating shopping cart"];

  [self validateShoppingCart]; //Some long process, maybe a sync http request.

  [validationSpan finish];

  // Process the order
  id<SentrySpan> processSpan = [transaction startChildWithOperation:@"process",
                                                  description:@"processing shopping cart"];

  [self processShoppingCart]; //Another time consuming process.

  [processSpan finish];

  [transaction finish];
}

----------------------------------------

TITLE: Configuring Sentry OpenTelemetry YAML
DESCRIPTION: Configuration settings in YAML format to enable Sentry propagator for OpenTelemetry. Sets the DSN, trace sampling rate, and enables the Sentry propagator.

LANGUAGE: yaml
CODE:
sentry:
    dsn: ___PUBLIC_DSN___
    traces-sample-rate: 1.0
otel:
    propagators:
        - sentry

----------------------------------------

TITLE: Flask Raven Integration
DESCRIPTION: Initialize Raven with a Flask application

LANGUAGE: python
CODE:
from raven.contrib.flask import Sentry
sentry = Sentry(app, dsn='___DSN___')

----------------------------------------

TITLE: Including Performance Sampling Context Documentation
DESCRIPTION: React component using PlatformContent to include platform-specific documentation for performance sampling context. The component references content from the 'performance/default-sampling-context-platform' path.

LANGUAGE: jsx
CODE:
<PlatformContent includePath="performance/default-sampling-context-platform" />

----------------------------------------

TITLE: Configuring Sentry User Context in Dart
DESCRIPTION: Sets up user identification in Sentry by configuring the scope with user details including ID and username. This helps in associating errors and events with specific users in the Sentry dashboard.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Sentry.configureScope((scope) => scope.setUser(SentryUser(
      id: clientUser.id,
      username: clientUser.username,
    )));

----------------------------------------

TITLE: Configuring Sentry BeforeSend Callback in Java
DESCRIPTION: Demonstrates how to initialize Sentry with a BeforeSend callback that filters events based on hint type. The callback can modify events, discard them by returning null, or pass them through unchanged.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setBeforeSend((event, hint) -> {
    if (hint instanceof MyHint) {
      return null;
    } else {
      return event;
    }
  });
});

----------------------------------------

TITLE: Implementing Counter Metrics
DESCRIPTION: Example of implementing a counter metric to track event occurrences with optional tags.

LANGUAGE: Kotlin
CODE:
Sentry.metrics()
    .increment(
        "button_login_click", // key
        1.0,                  // value
        null,                 // unit
        mapOf(                // tags
            "provider" to "e-mail"
        )
    )

LANGUAGE: Java
CODE:
final Map<String, String> tags = new HashMap<>();
tags.put("provider", "e-mail");

Sentry.metrics().increment(
    "button_login_click", // key
    1.0,                  // value
    null,                 // unit
    tags                  // tags
);

----------------------------------------

TITLE: Initializing Sentry Browser SDK with Tracing
DESCRIPTION: Configures the Sentry client SDK with error tracking and performance monitoring capabilities. Sets up browser tracing integration and configures a 25% sampling rate for performance transactions.

LANGUAGE: javascript
CODE:
// sentry.client.config.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  // Capture 25% of all transactions
  tracesSampleRate: 0.25
});

----------------------------------------

TITLE: Detailed JSON Stack Trace Frame Representation
DESCRIPTION: This JSON snippet demonstrates a fully populated top frame of a stack trace, including source context, line numbers, and local variables. It provides a comprehensive example of the information that can be included in a stack trace frame.

LANGUAGE: json
CODE:
{
  "frames": [
    {
      "in_app": true,
      "function": "myfunction",
      "abs_path": "/real/file/name.py",
      "filename": "file/name.py",
      "lineno": 3,
      "vars": {
        "my_var": "'value'"
      },
      "pre_context": ["def foo():", "  my_var = 'foo'"],
      "context_line": "  raise ValueError()",
      "post_context": ["", "def main():"]
    }
  ]
}

----------------------------------------

TITLE: Starting Sentry Transaction in Kotlin
DESCRIPTION: This snippet demonstrates how to start a Sentry transaction in Kotlin. It creates a sampling decision and transaction context for a 'GET /search' operation with the 'http.server' operation name.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.TransactionContext
import io.sentry.TracesSamplingDecision

val samplingDecision = TracesSamplingDecision(true)
val transactionContext = TransactionContext("GET /search", "http.server", samplingDecision)
val transaction = Sentry.startTransaction(transactionContext)

----------------------------------------

TITLE: Adding Sentry Dependency for Spring 5 (SBT)
DESCRIPTION: This snippet shows how to add the Sentry dependency for Spring 5 using SBT build tool.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-spring" % "{{@inject packages.version('sentry.java.spring', '4.2.0') }}"

----------------------------------------

TITLE: Setting Maximum Breadcrumbs for Sentry SDK in Elixir
DESCRIPTION: Controls the total number of breadcrumbs that should be captured. The default is 100. Be aware of Sentry's maximum payload size to avoid event dropping.

LANGUAGE: elixir
CODE:
config :sentry,
  max_breadcrumbs: 50

----------------------------------------

TITLE: Initializing Sentry Middleware Span Tracker in JavaScript
DESCRIPTION: Creates a middleware function that initializes a Sentry span to track request duration. The span monitors request lifecycle and captures HTTP status code upon completion. Uses Sentry's manual span creation and closure to ensure accurate timing.

LANGUAGE: javascript
CODE:
// Start a span that tracks the duration of middleware
function middleware(_req, res, next) {
  return Sentry.startSpanManual({ name: "middleware" }, (span) => {
    res.once("finish", () => {
      span.setHttpStatus(res.status);
      // manually tell the span when to end
      span.end();
    });
    return next();
  });
}

----------------------------------------

TITLE: Configuring HTTPSyncTransport in Go Sentry SDK
DESCRIPTION: Example showing how to initialize Sentry with a custom HTTPSyncTransport configuration. Sets up a blocking transport with a 3-second timeout.

LANGUAGE: go
CODE:
package main

import (
	"time"

	"github.com/getsentry/sentry-go"
)

func main() {
	sentrySyncTransport := sentry.NewHTTPSyncTransport()
	sentrySyncTransport.Timeout = time.Second * 3

	sentry.Init(sentry.ClientOptions{
		Dsn: "___PUBLIC_DSN___",
		Transport: sentrySyncTransport,
	})
}

----------------------------------------

TITLE: Importing Sentry SDK in Bun
DESCRIPTION: Imports all exports from the @sentry/bun package using ES modules syntax. This is the entry point for integrating Sentry error tracking and monitoring in a Bun application.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/bun";

----------------------------------------

TITLE: Configuring AIOHTTP Integration Options in Sentry SDK
DESCRIPTION: Example of how to explicitly add the AioHttpIntegration to Sentry SDK initialization with custom options. This allows setting the transaction naming style and configuring which HTTP status codes should be reported as errors.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.aiohttp import AioHttpIntegration

sentry_sdk.init(
    # same as above
    integrations=[
        AioHttpIntegration(
            transaction_style="...",  # type: str
            failed_request_status_codes={...}  # type: collections.abc.Set[int]
        ),
    ],
)

----------------------------------------

TITLE: Initializing Sentry with Tracing Integration in Rust
DESCRIPTION: This snippet demonstrates how to set up Sentry with the tracing integration in a Rust application. It initializes the tracing subscriber with Sentry's tracing layer and configures Sentry client options.

LANGUAGE: rust
CODE:
fn main() {
    tracing_subscriber::Registry::default()
        .with(sentry::integrations::tracing::layer())
        .init();

    let _sentry = sentry::init(sentry::ClientOptions {
        release: sentry::release_name!(),
        traces_sample_rate: 1.0,
        ..Default::default()
    });

    main_span1();
}

#[tracing::instrument]
fn main_span1() {
    thread::sleep(Duration::from_millis(50));

    main_span2()
}

#[tracing::instrument]
fn main_span2() {
    thread::sleep(Duration::from_millis(200));
}

----------------------------------------

TITLE: Advanced Sentry Client Configuration
DESCRIPTION: Extended client configuration including application paths and version tracking.

LANGUAGE: python
CODE:
import os
import raven

client = raven.Client(
    dsn='___DSN___',

    # inform the client which parts of code are yours
    # include_paths=['my.app']
    include_paths=[__name__.split('.', 1)[0]],

    # pass along the version of your application
    # release='my-project-name@2.3.12'
    # release=raven.fetch_package_version('my-app')
    release=raven.fetch_git_sha(os.path.dirname(__file__)),
)

----------------------------------------

TITLE: Clearing User Information in Sentry SDK
DESCRIPTION: This code snippet shows how to clear the currently set user information in the Sentry SDK.

LANGUAGE: javascript
CODE:
Sentry.setUser(null);

----------------------------------------

TITLE: Verifying Redis Integration with Redis Cluster
DESCRIPTION: Example code to verify the Redis integration using Redis Cluster. It initializes Sentry SDK, creates a RedisCluster connection, and performs set and get operations within a transaction.

LANGUAGE: python
CODE:
from redis.cluster import RedisCluster

def main():
    sentry_sdk.init(...)  # same as above
    rc = RedisCluster(host='localhost', port=16379)

    with sentry_sdk.start_transaction(name="testing_sentry"):
        rc.set("foo", "bar")
        rc.get("foo")

main()

----------------------------------------

TITLE: Initializing Sentry Node SDK with Distributed Tracing
DESCRIPTION: This snippet shows how to initialize the Sentry Node SDK with distributed tracing enabled. It sets the DSN and configures the tracesSampleRate to capture all traces.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 1,
});

----------------------------------------

TITLE: Initializing Sentry with Koa.js using CommonJS
DESCRIPTION: Sets up a basic Koa.js application with Sentry error handling integration using CommonJS module syntax. Requires instrument.js to be loaded first for proper instrumentation setup.

LANGUAGE: javascript
CODE:
// Ensure to require this before requiring any other modules!
require('./instrument.js')

const Koa = require('koa');
const Router = require('@koa/router');
const Sentry = require("@sentry/node");

const router = new Router();
const app = new Koa();

Sentry.setupKoaErrorHandler(app);

// Add your routes, etc.

app.listen(3030);

----------------------------------------

TITLE: Initializing Sentry Hapi Integration in JavaScript
DESCRIPTION: Example showing how to initialize Sentry with the Hapi integration. This integration uses @opentelemetry/instrumentation-hapi to capture performance spans and is enabled by default when performance monitoring is enabled.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [new Sentry.hapiIntegration()],
});

----------------------------------------

TITLE: Async/Await Sentry Span Creation
DESCRIPTION: Shows how to create a Sentry span using async/await syntax for HTTP requests. Demonstrates setting span tags and attributes in an async context.

LANGUAGE: javascript
CODE:
function processItem(item) {
  return Sentry.startSpan(
    {
      op: "http",
      name: "GET /items/:item-id",
    },
    async (span) => {
      const response = await fetch("/items/${item.id}");
      const json = await response.json();

      span.setTag("http.status_code", response.statusCode);
      span.setAttribute("http.foobarsessionid", getFoobarSessionid(response));
    }
  );
}

----------------------------------------

TITLE: Enabling Sentry Debug Mode
DESCRIPTION: Command to enable debug logging for Sentry preload process.

LANGUAGE: bash
CODE:
SENTRY_DEBUG=1 node --require @sentry/node/preload app.js

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration (Current)
DESCRIPTION: Shows how to initialize Sentry with Unleash feature flags using the current recommended approach with featureFlagClientClass. Demonstrates client setup, flag evaluation, and error capture.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/ember';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Adding Child Span Using Sentry.with_child_span in Ruby Rails Controller
DESCRIPTION: This snippet demonstrates how to add a child span to a Sentry transaction using Sentry.with_child_span within a Rails controller action. It creates a new span for processing order items and sets custom data on the span.

LANGUAGE: ruby
CODE:
class OrdersController < ApplicationController
  def create
    order = Order.new

    Sentry.with_child_span(op: :process_items, description: 'processing items') do |span|
      span.set_data(:key, 'value')

      order.process_items(params)
    end
  end # the child span ends with the block
end

----------------------------------------

TITLE: Sequence Diagram: Integration Credential Proxy Flow
DESCRIPTION: Mermaid sequence diagram illustrating the flow of an issue alert through the Integration Credential Proxy, including token refresh and error handling.

LANGUAGE: mermaid
CODE:
sequenceDiagram
  actor RegionSilo
  actor ControlSilo
  actor MsTeams

  RegionSilo ->> RegionSilo: send issue alert
  RegionSilo ->> ControlSilo : send issue alert to msteams
  ControlSilo ->> ControlSilo : load integration metadata
  ControlSilo ->> ControlSilo : add integration credentials to request
  ControlSilo ->> MsTeams : send notification request with credentials
  MsTeams -->> ControlSilo : token expired!
  ControlSilo ->> MsTeams : refresh token
  MsTeams -->> ControlSilo : response
  ControlSilo ->> ControlSilo : update stored token
  ControlSilo ->> MsTeams : send notification with new token
  MsTeams -->> ControlSilo : response
  ControlSilo -->> RegionSilo : response

----------------------------------------

TITLE: Integrating Sentry Crash-Report Modal in JavaScript
DESCRIPTION: This snippet demonstrates how to integrate the Sentry Crash-Report modal into a web application. It shows the initialization of the Sentry SDK and the creation of a feedback dialog using the provided Event ID.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [new Sentry.BrowserTracing()],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
  Sentry.showReportDialog({ eventId: sentryEventId });
}

----------------------------------------

TITLE: Capturing Custom Measurements in Sentry Python SDK
DESCRIPTION: This code demonstrates how to set custom measurements using the Sentry Python SDK. It shows examples of recording memory usage, job start time, and cache read count.

LANGUAGE: python
CODE:
from sentry_sdk import set_measurement

# Record amount of memory used
set_measurement('memory_used', 123, 'byte')

# Record time when job was started
set_measurement('job_start_time', 1.3, 'second')

# Record amount of times cache was read
set_measurement('cache_read_count', 4)

----------------------------------------

TITLE: Configuring Sentry Appender in app.config
DESCRIPTION: XML configuration for setting up the Sentry appender in app.config or web.config. Includes DSN configuration, identity sending settings, and threshold level configuration.

LANGUAGE: xml
CODE:
  <appender name="SentryAppender" type="Sentry.Log4Net.SentryAppender, Sentry.Log4Net">
    <Dsn value="___PUBLIC_DSN___"/>
    <!--Sends the log event Identity value as the user-->
    <SendIdentity value="true" />
    <threshold value="INFO" />
  </appender>

----------------------------------------

TITLE: Configuring Sentry with @EnableSentry in Spring 6 (Kotlin)
DESCRIPTION: This snippet shows how to use the @EnableSentry annotation to configure Sentry in a Spring 6 application using Kotlin. It includes setting the DSN and enabling sendDefaultPii for additional data collection.

LANGUAGE: kotlin
CODE:
import io.sentry.spring.jakarta.EnableSentry
// NOTE: Replace the test DSN below with YOUR OWN DSN to see the events from this app in your Sentry
// project/dashboard
@EnableSentry(
  dsn = "___PUBLIC_DSN___",
  // Add data like request headers and IP for users,
  // see https://docs.sentry.io/platforms/java/guides/spring/data-management/data-collected/ for more info
  sendDefaultPii = true
)
@Configuration
class SentryConfiguration

----------------------------------------

TITLE: Initializing LaunchDarkly with Sentry Integration in JavaScript
DESCRIPTION: Sets up Sentry with LaunchDarkly integration, configures the LaunchDarkly client with Sentry's flag usage handler, and demonstrates flag evaluation. Requires @sentry/browser and launchdarkly-js-client-sdk packages to be installed.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/browser';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Setting Transaction Sample Rate in Sentry
DESCRIPTION: Configuration options for controlling transaction sampling using either a uniform sample rate or a sampling function. These settings help manage the volume of performance data sent to Sentry.



----------------------------------------

TITLE: Implementing Set Metrics
DESCRIPTION: Example of implementing set metrics for tracking unique occurrences.

LANGUAGE: Kotlin
CODE:
Sentry.metrics().set(
    "user_view",
    "jane",
    MeasurementUnit.Custom("username"),
    mapOf(
        "page" to "home"
    )
)

LANGUAGE: Java
CODE:
final Map<String, String> tags = new HashMap<>();
tags.put("page", "home");

Sentry.metrics().set(
    "user_view",
    "jane",
    new MeasurementUnit.Custom("username"),
    tags);

----------------------------------------

TITLE: Dio HTTP Library Instrumentation in Dart
DESCRIPTION: Instrumentation for Dio HTTP library that creates spans for HTTP requests. It tracks request execution with operation type 'http.client', manages span status based on response codes, and associates exceptions with spans.



----------------------------------------

TITLE: Configuring SentryUserFilter in Spring WebApplicationInitializer
DESCRIPTION: Demonstrates how to configure SentryUserFilter using DelegatingFilterProxy in a Spring WebApplicationInitializer for both Spring 5 and Spring 6.

LANGUAGE: Java
CODE:
import javax.servlet.Filter;
import org.springframework.web.filter.DelegatingFilterProxy;
import org.springframework.web.filter.RequestContextFilter;
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

public class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {

  // ...

  @Override
  protected Filter[] getServletFilters() {
    // filter required by Spring Security
    DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy();
    springSecurityFilterChain.setTargetBeanName("springSecurityFilterChain");

    // sets request on RequestContextHolder
    // alternatively configure RequestContextListener
    RequestContextFilter requestContextFilter = new RequestContextFilter();

    // sets Sentry user on the scope
    DelegatingFilterProxy sentryUserFilterProxy = new DelegatingFilterProxy();
    sentryUserFilterProxy.setTargetBeanName("sentryUserFilter");

    return new Filter[] {
      springSecurityFilterChain, requestContextFilter, sentryUserFilterProxy
    };
  }
}

LANGUAGE: Java
CODE:
import jakarta.servlet.Filter;
import org.springframework.web.filter.DelegatingFilterProxy;
import org.springframework.web.filter.RequestContextFilter;
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

public class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {

  // ...

  @Override
  protected Filter[] getServletFilters() {
    // filter required by Spring Security
    DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy();
    springSecurityFilterChain.setTargetBeanName("springSecurityFilterChain");

    // sets request on RequestContextHolder
    // alternatively configure RequestContextListener
    RequestContextFilter requestContextFilter = new RequestContextFilter();

    // sets Sentry user on the scope
    DelegatingFilterProxy sentryUserFilterProxy = new DelegatingFilterProxy();
    sentryUserFilterProxy.setTargetBeanName("sentryUserFilter");

    return new Filter[] {
      springSecurityFilterChain, requestContextFilter, sentryUserFilterProxy
    };
  }
}

LANGUAGE: Kotlin
CODE:
import org.springframework.web.filter.DelegatingFilterProxy
import org.springframework.web.filter.RequestContextFilter
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer
import javax.servlet.Filter

class AppInitializer : AbstractAnnotationConfigDispatcherServletInitializer() {

    // ...

    override fun getServletFilters(): Array<Filter> {
        // filter required by Spring Security
        val springSecurityFilterChain = DelegatingFilterProxy()
        springSecurityFilterChain.setTargetBeanName("springSecurityFilterChain")

        // sets request on RequestContextHolder
        // alternatively configure RequestContextListener
        val requestContextFilter = RequestContextFilter()

        // sets Sentry user on the scope
        val sentryUserFilterProxy = DelegatingFilterProxy()
        sentryUserFilterProxy.setTargetBeanName("sentryUserFilter")
        return arrayOf(
            springSecurityFilterChain, requestContextFilter, sentryUserFilterProxy
        )
    }
}

LANGUAGE: Kotlin
CODE:
import org.springframework.web.filter.DelegatingFilterProxy
import org.springframework.web.filter.RequestContextFilter
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer
import jakarta.servlet.Filter

class AppInitializer : AbstractAnnotationConfigDispatcherServletInitializer() {

    // ...

    override fun getServletFilters(): Array<Filter> {
        // filter required by Spring Security
        val springSecurityFilterChain = DelegatingFilterProxy()
        springSecurityFilterChain.setTargetBeanName("springSecurityFilterChain")

        // sets request on RequestContextHolder
        // alternatively configure RequestContextListener
        val requestContextFilter = RequestContextFilter()

        // sets Sentry user on the scope
        val sentryUserFilterProxy = DelegatingFilterProxy()
        sentryUserFilterProxy.setTargetBeanName("sentryUserFilter")
        return arrayOf(
            springSecurityFilterChain, requestContextFilter, sentryUserFilterProxy
        )
    }
}

----------------------------------------

TITLE: Configuring Sentry Source Maps in Vite
DESCRIPTION: Shows how to configure Sentry source map upload options in a Vite configuration file. Uses the withSentry wrapper function to add Sentry-specific configuration including a custom application key for source map uploads.

LANGUAGE: javascript
CODE:
export default defineConfig(
  withSentry(
    {
      /* Your SolidStart config */
    },
    {
      sourceMapsUploadOptions: {
        unstable_sentryVitePluginOptions: {
          applicationKey: "your-custom-application-key",
        },
      },
    },
  ),
);

----------------------------------------

TITLE: Creating and Adding Sentry Breadcrumb in Ruby
DESCRIPTION: This code creates a new Sentry breadcrumb for user authentication and adds it to the current scope. It uses the Sentry::Breadcrumb class to create a breadcrumb with a category, message, and level, then adds it using Sentry.add_breadcrumb().

LANGUAGE: ruby
CODE:
crumb = Sentry::Breadcrumb.new(
  category: "auth",
  message: "Authenticated user #{user.email}",
  level: "info"
)
Sentry.add_breadcrumb(crumb)

----------------------------------------

TITLE: Configuring Webpack for Source Map Generation
DESCRIPTION: Webpack configuration to enable source map generation for Node.js applications. Sets up the build target, source map devtool, entry point, and output configuration.

LANGUAGE: javascript
CODE:
const path = require("path");

module.exports = {
  // ... other config above ...
  target: "node",
  devtool: "source-map",
  entry: {
    app: "./src/app.js",
  },
  output: {
    path: path.join(__dirname, "dist"),
    filename: "[name].js",
  },
};

----------------------------------------

TITLE: Spring Boot 2 Span Annotation (Java)
DESCRIPTION: Example of using @SentrySpan annotation to create spans around method executions in Spring Boot 2

LANGUAGE: java
CODE:
import org.springframework.stereotype.Component;
import io.sentry.spring.tracing.SentrySpan;

@Component
class PersonService {

  @SentrySpan
  Person findById(Long id) {
    ...
  }
}

----------------------------------------

TITLE: Initializing Sentry OpenFeature Integration with Global Tracking
DESCRIPTION: Sets up Sentry with OpenFeature SDK to track all feature flag evaluations globally. Configures Sentry initialization, OpenFeature provider setup, and adds hooks for tracking feature flag evaluations across all clients.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nextjs';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
OpenFeature.addHooks(new Sentry.OpenFeatureIntegrationHook());

const client = OpenFeature.getClient();
const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Implementing Downsampling in Python for Sentry SDK
DESCRIPTION: This snippet shows how to implement downsampling in the Sentry Python SDK. It uses a downsample factor to adjust the sampling decision for transactions during high load.

LANGUAGE: python
CODE:
# See the Python implementation as a reference:
# https://github.com/getsentry/sentry-python/blob/d9d87998029fb0ef2bfe933cea0b69bfee60ed51/sentry_sdk/tracing.py#L888-L889

----------------------------------------

TITLE: Initializing Sentry SDK in SwiftUI-based iOS App (Swift)
DESCRIPTION: This snippet illustrates how to initialize the Sentry SDK in a SwiftUI-based iOS application that doesn't implement an app delegate. It shows the setup process within the App conformer's initializer, including setting the DSN, enabling debug mode, and configuring the traces sample rate.

LANGUAGE: swift
CODE:
import Sentry

@main
struct SwiftUIApp: App {
    init() {
        SentrySDK.start { options in
            options.dsn = "___PUBLIC_DSN___"
            options.debug = true // Enabled debug when first installing is always helpful

            // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.
            // We recommend adjusting this value in production.
            options.tracesSampleRate = 1.0
        }
    }
}

----------------------------------------

TITLE: Initiating and Completing Sentry Transaction in PowerShell
DESCRIPTION: Demonstrates how to create a new Sentry transaction by specifying a name and operation, then marking it as complete. This allows for tracking specific code regions and sending performance data to Sentry.

LANGUAGE: powershell
CODE:
# Transaction can be started by providing, at minimum, the name and the operation
$transaction = Start-SentryTransaction 'test-transaction-name' 'test-transaction-operation'

# ...
# (Perform the operation represented by the span/transaction)
# ...

$transaction.Finish() # Mark the transaction as finished and send it to Sentry

----------------------------------------

TITLE: Defining Test Groups for Sentry Python SDK CI
DESCRIPTION: This code snippet shows where the test groups are defined in the split-tox-gh-actions.py script. These groups determine how integration tests are organized and executed in the CI pipeline.

LANGUAGE: Python
CODE:
scripts/split-tox-gh-actions/split-tox-gh-actions.py#L57

----------------------------------------

TITLE: Demonstrating Tag Value Truncation in Sentry
DESCRIPTION: This example shows how a long URL tag gets truncated to 200 characters in Sentry, potentially losing important information. It illustrates the need to split long data across multiple tags.

LANGUAGE: plaintext
CODE:
https://empowerplant.io/api/0/projects/ep/setup_form/?user_id=314159265358979323846264338327&tracking_id=EasyAsABC123OrSimpleAsDoReMi&product_name=PlantToHumanTranslator&product_id=161803398874989484820458683436563811772030917980576

LANGUAGE: plaintext
CODE:
https://empowerplant.io/api/0/projects/ep/setup_form/?user_id=314159265358979323846264338327&tracking_id=EasyAsABC123OrSimpleAsDoReMi&product_name=PlantToHumanTranslator&product_id=1618033988749894848

----------------------------------------

TITLE: Attaching User to Sentry Events in Laravel
DESCRIPTION: This snippet demonstrates how to listen to Laravel's Authenticated event to attach user information to Sentry events. It requires the Sentry SDK to be properly installed and configured in your Laravel application.

LANGUAGE: php
CODE:
<PlatformContent includePath="enriching-events/set-user" />

----------------------------------------

TITLE: Initializing Sentry with OpenFeature Global Tracking
DESCRIPTION: Sets up Sentry monitoring with OpenFeature SDK to track all feature flag evaluations globally. Demonstrates initialization of both SDKs, setting up the integration hook globally, and evaluating a feature flag.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/vue';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
OpenFeature.addHooks(new Sentry.OpenFeatureIntegrationHook());

const client = OpenFeature.getClient();
const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Adding Event Processor for Transaction Name Sanitization
DESCRIPTION: Shows how to add an event processor that sanitizes transaction names for events of type 'transaction' using the Sentry browser SDK.

LANGUAGE: javascript
CODE:
// All JavaScript-based SDKs include this function, so it's safe to replace `@sentry/browser`
// with your particular SDK
import { addEventProcessor } from "@sentry/browser";

addEventProcessor((event) => {
  if (event.type === "transaction") {
    event.transaction = sanitizeTransactionName(event.transaction);
  }
  return event;
});

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the documentation page defining title, description and sidebar ordering.

LANGUAGE: markdown
CODE:
---
title: Python SDK
description: Information specific to developing the Python SDK.
sidebar_order: 8
---

----------------------------------------

TITLE: Installing Sentry Reactor Integration with SBT
DESCRIPTION: Add the Sentry Reactor dependency to your SBT build file. This Scala snippet shows how to include the Sentry Reactor integration in your project using SBT.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-reactor" % "{{@inject packages.version('sentry.java.reactor', '8.3.0') }}"

----------------------------------------

TITLE: Implementing Custom Sampling for Sentry SDK in Python
DESCRIPTION: This code defines a custom traces_sampler function that determines the sampling rate for transactions. It sets a 0% sampling rate for certain conditions and a 10% rate for others. The function is then used in the Sentry SDK initialization.

LANGUAGE: python
CODE:
def traces_sampler(sampling_context):
    if "...":
        # Drop this transaction, by setting its sample rate to 0%
        return 0
    else:
        # Default sample rate for all others (replaces traces_sample_rate)
        return 0.1

sentry_sdk.init(
    # ...

    traces_sampler=traces_sampler,
)

----------------------------------------

TITLE: Disabling Sentry ImplicitUsings in .NET Project
DESCRIPTION: Demonstrates how to opt out of automatically adding the Sentry namespace to global usings when ImplicitUsings is enabled.

LANGUAGE: xml
CODE:
<PropertyGroup>
  <SentryImplicitUsings>false</SentryImplicitUsings>
</PropertyGroup>

----------------------------------------

TITLE: Configuring Sentry Settings and Initializing Subsystem in Unreal Engine C++
DESCRIPTION: This snippet demonstrates how to configure Sentry settings using a delegate and initialize the Sentry subsystem in an Unreal Engine project. It sets the TracesSampleRate and uses the engine subsystem to initialize Sentry with the configured settings.

LANGUAGE: cpp
CODE:
#include "SentrySettings.h"

FConfigureSettingsDelegate SettingsDelegate;
SettingsDelegate.BindDynamic(this, &USomeClass::ConfigureSettingsDelegate);

void USomeClass::ConfigureSettingsDelegate(USentrySettings* Settings)
{
    Settings->TracesSampleRate = 0.2f;
}

...

USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->InitializeWithSettings(SettingsDelegate);

----------------------------------------

TITLE: Initializing Raven Client in Python
DESCRIPTION: Code snippet demonstrating how to initialize the Raven client with a Sentry DSN. This creates a client instance for reporting errors to Sentry.

LANGUAGE: python
CODE:
from raven import Client
client = Client('___DSN___')

----------------------------------------

TITLE: Configuring Request Data Integration in Sentry Astro SDK
DESCRIPTION: This snippet demonstrates how to disable header capturing in the Sentry Astro SDK 8.x using the requestDataIntegration options. It shows the initialization of Sentry with a specific integration configuration.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  integrations: [
    Sentry.requestDataIntegration({
      include: {
        headers: false,
      },
    }),
  ],
});

----------------------------------------

TITLE: Forcing Transaction Sampling Decision
DESCRIPTION: Demonstrates how to force a sampling decision by passing it directly to the transaction constructor, bypassing sample rate and sampler configurations.

LANGUAGE: javascript
CODE:
Sentry.startTransaction({
  name: "test-transaction",
  sampled: true // or false
});

----------------------------------------

TITLE: Setting User Information in Sentry SDK
DESCRIPTION: This snippet demonstrates how to set user information in the Sentry SDK. It includes examples of setting various user attributes such as id, username, email, and IP address.

LANGUAGE: javascript
CODE:
Sentry.setUser({"email": "jane.doe@example.com"});

LANGUAGE: python
CODE:
sentry_sdk.set_user({"email": "jane.doe@example.com"})

LANGUAGE: ruby
CODE:
Sentry.set_user(email: 'jane.doe@example.com')

LANGUAGE: php
CODE:
\Sentry\configureScope(function (\Sentry\State\Scope $scope): void {
    $scope->setUser(['email' => 'jane.doe@example.com']);
});

LANGUAGE: go
CODE:
sentry.ConfigureScope(func(scope *sentry.Scope) {
	scope.SetUser(sentry.User{Email: "jane.doe@example.com"})
})

LANGUAGE: rust
CODE:
sentry::configure_scope(|scope| {
    scope.set_user(Some(sentry::User {
        email: Some("jane.doe@example.com".to_string()),
        ..Default::default()
    }));
});

LANGUAGE: java
CODE:
Sentry.setUser(new User("jane.doe@example.com"));

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.User = new User
    {
        Email = "jane.doe@example.com"
    };
});

LANGUAGE: android
CODE:
Sentry.setUser(new User("jane.doe@example.com"));

LANGUAGE: dart
CODE:
Sentry.configureScope(
  (scope) => scope.setUser(SentryUser(email: 'jane.doe@example.com')),
);

LANGUAGE: flutter
CODE:
Sentry.configureScope(
  (scope) => scope.setUser(SentryUser(email: 'jane.doe@example.com')),
);

LANGUAGE: react-native
CODE:
Sentry.setUser({email: 'jane.doe@example.com'});

LANGUAGE: unity
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.User = new User
    {
        Email = "jane.doe@example.com"
    };
});

LANGUAGE: dotnet
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.User = new User
    {
        Email = "jane.doe@example.com"
    };
});

LANGUAGE: swift
CODE:
SentrySDK.setUser(User(email: "jane.doe@example.com"))

LANGUAGE: kotlin
CODE:
Sentry.setUser(User().apply {
    email = "jane.doe@example.com"
})

----------------------------------------

TITLE: Configuring Sentry SDK in SwiftUI for iOS
DESCRIPTION: This code snippet demonstrates how to initialize and configure the Sentry SDK in a SwiftUI application without an app delegate. It sets up the DSN, enables debug mode, and configures the traces sample rate for performance monitoring.

LANGUAGE: swift
CODE:
import Sentry

@main
struct SwiftUIApp: App {
    init() {
        SentrySDK.start { options in
            options.dsn = "___PUBLIC_DSN___"
            options.debug = true // Enabled debug when first installing is always helpful

            // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.
            // We recommend adjusting this value in production.
            options.tracesSampleRate = 1.0
        }
    }
}

----------------------------------------

TITLE: Installing Sentry SDK with CocoaPods for iOS
DESCRIPTION: This code snippet shows how to integrate Sentry into an Xcode project using CocoaPods. It specifies the minimum iOS version, enables use of frameworks, and adds the Sentry pod to the target application.

LANGUAGE: ruby
CODE:
platform :ios, '11.0'
use_frameworks! # This is important

target 'YourApp' do
  pod 'Sentry', :git => 'https://github.com/getsentry/sentry-cocoa.git', :tag => '{{@inject packages.version('sentry.cocoa') }}'
end

----------------------------------------

TITLE: Extracting Incoming Tracing Information with Sentry SDK in Python
DESCRIPTION: This snippet demonstrates how to extract and store incoming tracing information using the continue_trace() function from the Sentry SDK. It assumes a function get_incoming_headers_as_dict() that returns a dictionary containing tracing information from various sources.

LANGUAGE: python
CODE:
import sentry_sdk
from my_project import get_incoming_headers_as_dict

headers = get_incoming_headers_as_dict()

transaction = sentry_sdk.continue_trace(headers)
with sentry_sdk.start_transaction(transaction):
    ...

----------------------------------------

TITLE: Demonstrating Glob Pattern Matching in Bash
DESCRIPTION: Example showing how glob pattern matching works in bash, which closely resembles Sentry's glob pattern matching behavior for inbound filters. The example demonstrates using wildcards and negation patterns.

LANGUAGE: bash
CODE:
touch 1.2.3
touch 1.2.4
echo 1.2.*
echo 1.2.[!3]

----------------------------------------

TITLE: Initializing and Managing Sentry Feedback Widget in JavaScript
DESCRIPTION: Shows how to create a custom Sentry feedback widget implementation with manual control. The code disables automatic widget injection, manually creates the widget, and includes cleanup functionality to remove it from the DOM when needed.

LANGUAGE: javascript
CODE:
const feedback = feedbackIntegration({
  // Disable the injection of the default widget
  autoInject: false,
});

// Create and render the button
const widget = feedback.createWidget();

// Later, when it's time to clean up:
widget.removeFromDom();

----------------------------------------

TITLE: Disabling Auto Session Tracking in Sentry Python SDK
DESCRIPTION: Code example showing how to initialize Sentry SDK with automatic session tracking disabled. Sets the auto_session_tracking flag to False during SDK initialization.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    # ...

    auto_session_tracking=False,
)

----------------------------------------

TITLE: Using Sentry's Isolation Scope in Java
DESCRIPTION: This snippet demonstrates how to use Sentry's withIsolationScope method in Java. It shows setting a tag, adjusting the log level, and capturing an exception within the isolated scope. It also includes an example of capturing an exception outside the scope for comparison.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.SentryLevel;

Sentry.withIsolationScope(scope -> {
  Sentry.setTag("my-tag", "my value");
  scope.setLevel(SentryLevel.WARNING);

  // will be tagged with my-tag="my value"
  Sentry.captureException(new Exception("my error"));
});

// will not be tagged with my-tag
Sentry.captureException(new Exception("my other error"));

----------------------------------------

TITLE: Wrapping Errors with Extra Context in Go
DESCRIPTION: Demonstrates how to wrap errors with additional key/value pairs for enhanced error reporting.

LANGUAGE: go
CODE:
path := "filename.ext"
f, err := os.Open(path)
if err != nil {
    err = raven.WrapWithExtra(err, map[string]string{"path": path, "cwd": os.Getwd()})
    raven.CaptureErrorAndWait(err, nil)
    log.Panic(err)
}

----------------------------------------

TITLE: Initializing Sentry SDK for Cloudflare
DESCRIPTION: Demonstrates the basic setup of Sentry error tracking using the Cloudflare SDK. Includes importing the Sentry package and initializing it with a DSN and extra error data integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/cloudflare";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.extraErrorDataIntegration()],
});

----------------------------------------

TITLE: Filtering Sentry Breadcrumbs in Dart Flutter
DESCRIPTION: Initializes the Sentry Flutter SDK with a beforeBreadcrumb callback that filters out breadcrumbs from a specific logger category. The callback returns null for breadcrumbs from 'a.spammy.Logger' to exclude them from being sent to Sentry, while preserving all other breadcrumbs.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.beforeBreadcrumb = (breadcrumb, hint) {
    return 'a.spammy.Logger' == breadcrumb.category ? null : breadcrumb;
  };
});

----------------------------------------

TITLE: Installing Sentry GraphQL Integration with SBT
DESCRIPTION: Instructions for installing the Sentry GraphQL integration using SBT dependency management.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-graphql" % "{{@inject packages.version('sentry.java.graphql', '6.28.0') }}"

----------------------------------------

TITLE: Initializing Sentry in SvelteKit 8.x
DESCRIPTION: Shows how to initialize the Sentry SDK in hooks.server.js|ts. The initialization must occur before any other code runs.

LANGUAGE: JavaScript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 1.0,
});

// rest of your code and imports

----------------------------------------

TITLE: Configuring Metro for Sentry React Native
DESCRIPTION: This snippet shows how to set up the Sentry React Native Metro Plugin in the metro.config.js file. It imports the necessary modules and applies the Sentry configuration to the default Metro config.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require("@react-native/metro-config");
const { withSentryConfig } = require('@sentry/react-native/metro');

const config = getDefaultConfig(__dirname);
module.exports = withSentryConfig(config);

----------------------------------------

TITLE: Adding Data Attributes to Sentry Spans in Dart
DESCRIPTION: Example showing how to create a span and set various data attributes including strings, integers, booleans, and arrays. The data attributes are visible in the Sentry trace explorer.

LANGUAGE: dart
CODE:
final span = parent.startChild('http.client');
span.setData('data_attribute_1', 'value1');
span.setData('data_attribute_2', 42);
span.setData('data_attribute_3', true);

span.setData('data_attribute_4', ['value1', 'value2']);
span.setData('data_attribute_5', [42, 43]);
span.setData('data_attribute_6', [true, false]);

----------------------------------------

TITLE: Data Propagation and Scope Management Example
DESCRIPTION: Shows complexity of managing scope, breadcrumbs, and tags across different execution contexts with nested traces.

LANGUAGE: javascript
CODE:
function a() {
  trace((span, scope) => {
    scope.setTag('func', 'a');
    scope.setTag('id', '123');
    scope.addBreadcrumb('was in a');
    try {
      b();
    } catch(e) {
      // How to report the SpanID from the span in b?
    } finally {
      captureMessage('hello from a');
      // tags: {func: 'a', id: '123'}
      // breadcrumbs: ['was in a', 'was in b']
    }
  })
}

function b() {
  trace((span, scope) => {
    const fail = Math.random() > 0.5;
    scope.setTag('func', 'b');
    scope.setTag('fail', fail.toString());
    scope.addBreadcrumb('was in b');
    captureMessage('hello from b');
    // tags: {func: 'b', id: '123', fail: ?}
    // breadcrumbs: ['was in a', 'was in b']
    if (fail) {
      throw Error('b failed');
    }
  });
}

----------------------------------------

TITLE: Configuring Sentry Auto-Init Provider in Android Manifest
DESCRIPTION: XML configuration to enable automatic Sentry SDK initialization in non-main Android processes. This provider configuration should be added to AndroidManifest.xml to enable auto-initialization in specified processes.

LANGUAGE: xml
CODE:
<provider
    android:name="io.sentry.android.core.SentryInitProvider"
    android:authorities="${applicationId}.SentryInitProvider"
    android:exported="false"
    android:process="YOUR_PROCESS_HERE"
    tools:node="merge" />

----------------------------------------

TITLE: Uploading Debug Files Using sentry-cli
DESCRIPTION: Command for uploading debug information files to Sentry using sentry-cli. The command recursively scans a specified folder and uploads all debug files found. For testing purposes, the --wait flag can be used to ensure files are uploaded before sending crash reports.

LANGUAGE: bash
CODE:
sentry-cli debug-files upload --wait

----------------------------------------

TITLE: Adding Data Attributes to Sentry Spans - Kotlin
DESCRIPTION: Shows how to add data attributes to Sentry spans in Kotlin. Demonstrates adding various data types including strings, numbers, booleans, and arrays using Kotlin's listOf() function.

LANGUAGE: kotlin
CODE:
ISpan span = parent.startChild("task", "operation");
span.setData("my-data-attribute-1", "value1")
span.setData("my-data-attribute-2", 42)
span.setData("my-data-attribute-3", true)

span.setData("my-data-attribute-4", listOf("value1", "value2", "value3"))
span.setData("my-data-attribute-5", listOf(42, 43, 44))
span.setData("my-data-attribute-6", listOf(true, false, true))

----------------------------------------

TITLE: Configuring Sentry with Wasm integration in JavaScript
DESCRIPTION: JavaScript code to initialize Sentry with the Wasm integration. This setup enables enhanced error reporting for WebAssembly modules.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";
import { wasmIntegration } from "@sentry/wasm";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    wasmIntegration()
  ],
});

----------------------------------------

TITLE: Late Initialization Implementation in ESM
DESCRIPTION: Example of late Sentry initialization in an ESM application after fetching DSN.

LANGUAGE: javascript
CODE:
import startApp from "./app";
import fetchDsn from "./utils/fetchDsn";
import * as Sentry from "@sentry/node";

startApp();

const dsn = fetchDsn();
Sentry.init({
  dsn,

  // Add Tracing by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Generating React Native Bundle and Source Maps for iOS
DESCRIPTION: This bash command generates the React Native Packager (Metro) bundle and source maps for iOS. It specifies various options such as platform, entry file, and output locations.

LANGUAGE: bash
CODE:
npx react-native bundle \
  --dev false \
  --minify true \
  --platform ios \
  --entry-file index.js \
  --reset-cache \
  --bundle-output main.jsbundle \
  --sourcemap-output main.jsbundle.map

----------------------------------------

TITLE: Accessing Sentry Shell in Bash
DESCRIPTION: Shows the command to access the Sentry shell for managing options.

LANGUAGE: bash
CODE:
sentry shell

----------------------------------------

TITLE: Disabling Browser Session Tracking in Sentry
DESCRIPTION: Demonstrates how to disable the BrowserSession integration to prevent automatic session tracking in browser environments. This configuration filters out the BrowserSession integration from the default integrations list.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: (defaultIntegrations) => {
    return defaultIntegrations.filter(
      (integration) => integration.name !== "BrowserSession"
    );
  },
});

----------------------------------------

TITLE: Tagging Exceptions with Sentry in Kotlin
DESCRIPTION: This snippet shows how to use Sentry.withScope to add a custom tag and set the log level for a captured exception in Kotlin. It also includes an example of capturing an exception without custom tagging for comparison.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryLevel

Sentry.withScope { scope ->
  scope.setTag("my-tag", "my value")
  scope.level = SentryLevel.WARNING

  // will be tagged with my-tag="my value"
  Sentry.captureException(Exception("my error"))
}

// will not be tagged with my-tag
Sentry.captureException(Exception("my error"))

----------------------------------------

TITLE: Verifying Sentry Server-Side Integration in Nuxt
DESCRIPTION: This code snippet creates a server-side API route that intentionally throws an error to test Sentry's error capturing functionality.

LANGUAGE: javascript
CODE:
export default defineEventHandler(event => {
  throw new Error("Sentry Example API Route Error");
});

----------------------------------------

TITLE: Manual Breadcrumb Recording in Sentry
DESCRIPTION: Shows how to manually record breadcrumbs with Sentry, including setting type, category, message, level, timestamp, and additional data. The breadcrumb can be recorded with different log levels: fatal, critical, error, warning, log, info, and debug.

LANGUAGE: javascript
CODE:
Sentry.addBreadcrumb({
  category: "auth",
  message: "Authenticated user",
  level: "info"
});

----------------------------------------

TITLE: Using Sentry NDK API in C Code
DESCRIPTION: This snippet demonstrates how to use the Sentry NDK API in C code by including the sentry.h header and capturing an event.

LANGUAGE: c
CODE:
#include <jni.h>
#include <android/log.h>
#include <sentry.h>

#define TAG "sentry-android-demo"
extern "C" JNIEXPORT jstring JNICALL

Java_io_sentry_demo_NativeDemo_crash(JNIEnv *env, jclass cls) {
    __android_log_print(ANDROID_LOG_WARN, "", "Capture a message.");
    sentry_value_t event = sentry_value_new_message_event(
            /*   level */ SENTRY_LEVEL_INFO,
            /*  logger */ "custom",
            /* message */ "Sample message!"
    );
    sentry_capture_event(event);
}

----------------------------------------

TITLE: Configuring Node.js Server Start Command with Sentry Import
DESCRIPTION: Basic command to start a Node.js server with Sentry instrumentation using the --import flag. This command loads the Sentry server instrumentation file before starting the application server.

LANGUAGE: bash
CODE:
node --import ./.output/server/instrument.server.mjs .output/server/index.mjs

----------------------------------------

TITLE: Sentry SDK Runtime Configuration
DESCRIPTION: Instructions for configuring Sentry SDK integrations in different runtime environments. Browser integrations should be added to entry.client.tsx while Node.js integrations should be configured in entry.server.tsx.

LANGUAGE: typescript
CODE:
// entry.client.tsx - Browser runtime configuration
Sentry.init({
  integrations: [
    // Add browser-specific integrations here
  ]
});

// entry.server.tsx - Node.js runtime configuration
Sentry.init({
  integrations: [
    // Add Node.js-specific integrations here
  ]
});

----------------------------------------

TITLE: Initializing Sentry with Browser Profiling in Remix (Fixed Sample Rate)
DESCRIPTION: This snippet initializes Sentry in a Remix application, enabling browser tracing and profiling integrations. It sets up trace propagation targets and configures fixed sample rates for tracing and profiling.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/remix";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add browser profiling integration to the list of integrations
    Sentry.browserTracingIntegration(),
    Sentry.browserProfilingIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Set profilesSampleRate to 1.0 to profile every transaction.
  // Since profilesSampleRate is relative to tracesSampleRate,
  // the final profiling rate can be computed as tracesSampleRate * profilesSampleRate
  // For example, a tracesSampleRate of 0.5 and profilesSampleRate of 0.5 would
  // result in 25% of transactions being profiled (0.5*0.5=0.25)
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: VSCode Settings for Rust Development
DESCRIPTION: Provides recommended VSCode settings for Rust development, including Rust Analyzer configurations for features and import rules.

LANGUAGE: json
CODE:
{
  "rust-analyzer.cargo.features": "all",
  "editor.inlayHints.enabled": "offUnlessPressed",
  "rust-analyzer.imports.granularity.group": "module",
  "rust-analyzer.imports.prefix": "crate"
}

----------------------------------------

TITLE: Configuring UIViewController Exclusions in Swift
DESCRIPTION: Configure specific UIViewController classes to be excluded from automatic tracing.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.swizzleClassNameExcludes = [
      "MyUIViewController",
    ]
}

----------------------------------------

TITLE: Setting Sentry Scope Tag in Java
DESCRIPTION: This snippet shows how to configure the Sentry scope and set a tag using Java. It imports the Sentry class and uses the configureScope method to set a 'page.locale' tag with a value of 'de-at'.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.configureScope(scope -> {
  scope.setTag("page.locale", "de-at");
});

----------------------------------------

TITLE: Initializing Sentry with BeforeSend Callback in Kotlin
DESCRIPTION: This snippet demonstrates how to initialize Sentry for Android using Kotlin, implementing a BeforeSend callback to filter events based on a custom hint type. The callback returns null for events with a specific hint, otherwise returning the original event.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.BeforeSendCallback

SentryAndroid.init(this) { options ->
  options.beforeSend = BeforeSendCallback { event, hint ->
    if (hint is MyHint) {
      null
    } else {
      event
    }
  }
}

----------------------------------------

TITLE: Configuring Cloudflare Compatibility Flags in Wrangler
DESCRIPTION: Set either 'nodejs_compat' or 'nodejs_als' compatibility flag in wrangler.toml to enable AsyncLocalStorage API access.

LANGUAGE: toml
CODE:
compatibility_flags = ["nodejs_compat"]
# compatibility_flags = ["nodejs_als"]

----------------------------------------

TITLE: Customizing Sentry Component Tracking in Svelte
DESCRIPTION: Shows how to customize component tracking by passing additional options to withSentryConfig. This includes specifying which components to track and controlling the tracking of initialization and update events.

LANGUAGE: javascript
CODE:
import { withSentryConfig } from "@sentry/svelte";

const config = {
  // Your svelte config
  compilerOptions: {...},
};

const sentryOptions = {
  componentTracking: {
    trackComponents: ["Navbar", "PrimaryButton", "LoginForm"],
    trackInit: true,
    trackUpdates: false,
  },
};

export default withSentryConfig(config, sentryOptions);

----------------------------------------

TITLE: Configuring Sentry SDK with Cohere for AI Pipeline Tracking
DESCRIPTION: This Python code demonstrates how to initialize Sentry SDK, create a Cohere client, and set up an AI pipeline with tracking.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.ai.monitoring import ai_track
from cohere import Client

sentry_sdk.init(...)  # same as above

client = Client(api_key="(your Cohere API key)")

@ai_track("My AI pipeline")
def my_pipeline():
    with sentry_sdk.start_transaction(op="ai-inference", name="The result of the AI inference"):
      print(
          client.chat(
              model="command", message="say hello"
          )
      )

----------------------------------------

TITLE: Setting Errors Only Profile in Sentry Environment
DESCRIPTION: Configuration setting in .env file to enable the lightweight Errors Only deployment mode of self-hosted Sentry.

LANGUAGE: bash
CODE:
COMPOSE_PROFILES=errors-only

----------------------------------------

TITLE: Configuring Sentry WSGI Middleware
DESCRIPTION: Configuration of Sentry SDK with WSGI middleware, including performance monitoring and profiling settings. Demonstrates initialization with DSN, PII settings, traces sampling, and profiles sampling.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.wsgi import SentryWsgiMiddleware

from my_wsgi_app import app

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

app = SentryWsgiMiddleware(app)

----------------------------------------

TITLE: Using Event Hints in JavaScript Sentry SDK
DESCRIPTION: Utilize event hints to access additional information and modify event data in the beforeSend callback.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event, hint) {
    if (hint.originalException) {
      console.log(hint.originalException);
    }
    return event;
  },
});

----------------------------------------

TITLE: Capturing React Render Errors (Pages Router)
DESCRIPTION: Creates a custom Next.js error page for the Pages Router to capture React render errors.

LANGUAGE: TypeScript
CODE:
import * as Sentry from "@sentry/nextjs";
import type { NextPage } from "next";
import type { ErrorProps } from "next/error";
import Error from "next/error";

const CustomErrorComponent: NextPage<ErrorProps> = (props) => {
  return <Error statusCode={props.statusCode} />;
};

CustomErrorComponent.getInitialProps = async (contextData) => {
  // In case this is running in a serverless function, await this in order to give Sentry
  // time to send the error before the lambda exits
  await Sentry.captureUnderscoreErrorException(contextData);

  // This will contain the status code of the response
  return Error.getInitialProps(contextData);
};

export default CustomErrorComponent;

----------------------------------------

TITLE: Starting Starlite Development Server
DESCRIPTION: Command to start the uvicorn development server with the Starlite application.

LANGUAGE: bash
CODE:
uvicorn app:app

----------------------------------------

TITLE: Configuring Tree Shaking for Sentry Bundler Plugin
DESCRIPTION: This snippet shows how to configure tree shaking in the Sentry Bundler Plugin to exclude the default replay worker script, reducing bundle size when using a custom worker.

LANGUAGE: javascript
CODE:
sentryPlugin({
  // other config
  bundleSizeOptimizations: {
    excludeReplayWorker: true,
  },
});

----------------------------------------

TITLE: Manual Source Bundle Creation and Upload Commands
DESCRIPTION: CLI commands for manually creating and uploading source bundles to Sentry without using build tool plugins.

LANGUAGE: bash
CODE:
sentry-cli debug-files bundle-jvm --output path/to/store/bundle --debug-id A_VALID_UUID path/to/source-code

LANGUAGE: bash
CODE:
sentry-cli debug-files upload --type jvm path/to/bundle

----------------------------------------

TITLE: Public Keys Configuration
DESCRIPTION: Configuration for project's public keys (DSN keys) and their enabled status.

LANGUAGE: json
CODE:
{
  "publicKeys": [
    {
      "publicKey": "12345abcdb1e4c123490ecec89c1f199",
      "isEnabled": true
    }
  ]
}

----------------------------------------

TITLE: Initializing Sentry SDK with Browser Tracing
DESCRIPTION: Configures Sentry error monitoring with browser tracing integration and custom trace propagation targets. Sets up DSN for project identification and defines which URLs should propagate tracing headers using both exact matches and regex patterns.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracePropagationTargets: ["https://myproject.org", /^/api//],
});

----------------------------------------

TITLE: Configuring Initial Scope in Objective-C
DESCRIPTION: Example showing how to configure the initial scope when starting the Sentry SDK in Objective-C. Sets a custom tag with a key-value pair.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.initialScope = ^(SentryScope *scope) {
        [scope setTagValue:@"my value" forKey:@"my-tag"];
        return scope;
    };
}];

----------------------------------------

TITLE: Integrating Sentry with RewriteFrames using CDN
DESCRIPTION: This HTML snippet demonstrates how to integrate Sentry with the RewriteFrames integration using CDN scripts. It includes the Sentry bundle and RewriteFrames scripts, then initializes Sentry with a DSN and the RewriteFrames integration.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/rewriteframes.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'rewriteframes.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    integrations: [Sentry.rewriteFramesIntegration()],
  });
</script>

----------------------------------------

TITLE: Initializing OpenFeature with Sentry - Track Single Client
DESCRIPTION: Configures Sentry with OpenFeature integration to track feature flag evaluations for a specific client instance. Shows how to initialize Sentry and add hooks to an individual OpenFeature client.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/angular';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Capturing Exceptions with Sentry JavaScript SDK
DESCRIPTION: Shows how to capture and report errors using Sentry's captureException() method within a try-catch block. The code imports the Sentry SDK from @sentry/solid and demonstrates proper error handling. Note that while Error objects provide the most detailed reports, the method can also handle non-Error objects and strings, though these may result in events without stack traces.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/solid";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Initializing Sentry with Prisma Integration for Version 5
DESCRIPTION: This code snippet demonstrates how to initialize Sentry with Prisma integration for Prisma version 5. It adds the prismaIntegration to the list of integrations in the Sentry.init() call.

LANGUAGE: javascript
CODE:
Sentry.init({
  tracesSampleRate: 1.0,
  integrations: [Sentry.prismaIntegration()],
});

----------------------------------------

TITLE: Retrieving Sentry Event IDs and Capturing Feedback in Dart
DESCRIPTION: Shows three different methods for obtaining a Sentry event ID: using beforeSend callback, direct capture method, and lastEventId property. Also demonstrates how to create and submit user feedback associated with an event ID.

LANGUAGE: dart
CODE:
// Option 1: Retrieving SentryId from beforeSend
SentryId sentryId = SentryId.empty();

await SentryFlutter.init((options) {
  options.beforeSend = (event, hint) {
    sentryId = event.eventId;
    return event;
  };
});

// Option 2: Retrieving SentryId from the method capturing the event
SentryId sentryId = Sentry.captureMessage("My message");

// Option 3: Retrieving SentryId from the beforeSend callback
SentryId sentryId = Sentry.lastEventId;

final feedback = SentryFeedback(
    message: 'Hello World!',
    contactEmail: 'foo@bar.org',
    name: 'John Doe',
    associatedEventId: sentryId,
);

Sentry.captureFeedback(feedback);

----------------------------------------

TITLE: Configuring Sentry Scope Level in Kotlin Multiplatform
DESCRIPTION: Sets up Sentry scope configuration by importing necessary Sentry modules and setting the logging level to WARNING. This configuration affects how Sentry will handle error reporting and logging.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry
import io.sentry.kotlin.multiplatform.SentryLevel

Sentry.configureScope { scope ->
  scope.level = SentryLevel.WARNING
}

----------------------------------------

TITLE: Configuring Sentry Options for Iris in Go
DESCRIPTION: This code snippet shows the available options for configuring the Sentry handler in Iris. It includes options for repanicking, waiting for delivery, and setting a timeout.

LANGUAGE: go
CODE:
// Whether Sentry should repanic after recovery, in most cases it should be set to true,
// as iris.Default includes its own Recovery middleware what handles http responses.
Repanic bool
// Whether you want to block the request before moving forward with the response.
// Because Iris's default `Recovery` handler doesn't restart the application,
// it's safe to either skip this option or set it to `false`.
WaitForDelivery bool
// Timeout for the event delivery requests.
Timeout time.Duration

----------------------------------------

TITLE: Basic Sentry Feedback Capture
DESCRIPTION: Demonstrates capturing basic user feedback with name, email, and message fields. Only the message field is required.

LANGUAGE: javascript
CODE:
// All feedback fields are optional, except `message`.
const userFeedback = {
  name: "John Doe",
  email: "john@doe.com",
  message: "I really like your App, thanks!",
};
Sentry.captureFeedback(userFeedback);

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration in Nuxt.js
DESCRIPTION: This snippet demonstrates how to set up Sentry with Unleash integration in a Nuxt.js application. It initializes Sentry with a DSN and configures the Unleash client for feature flag management.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nuxt';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Adding Sentry Exception Reporting to Laravel Handler
DESCRIPTION: Modify the report method in the Laravel exception handler to capture exceptions with Sentry. This ensures that all reportable exceptions are sent to Sentry for monitoring.

LANGUAGE: php
CODE:
public function report(Exception $exception)
{
    if ($this->shouldReport($exception) && app()->bound('sentry')) {
        app('sentry')->captureException($exception);
    }

    parent::report($exception);
}

----------------------------------------

TITLE: Initializing Sentry with Custom Event Processing in PHP
DESCRIPTION: Configures Sentry error tracking with a custom before_send callback that sets a specific fingerprint for database unavailability errors. Uses the PHP SDK to modify event handling based on exception message content.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'before_send' => function (\Sentry\Event $event, ?\Sentry\EventHint $hint): ?\Sentry\Event {
        if ($hint !== null && $hint->exception !== null && str_contains($hint->exception->getMessage(), 'database unavailable')) {
            $event->setFingerprint(['database-unavailable']);
        }

        return $event;
    },
]);

----------------------------------------

TITLE: Using Scoped Tokens in Java with Sentry SDK 8.0
DESCRIPTION: Demonstrates how to use the new scoped tokens introduced in Sentry SDK 8.0 for managing scope lifecycles. This replaces the deprecated Sentry.popScope() method.

LANGUAGE: java
CODE:
try (final @NotNull ISentryLifecycleToken ignored = Sentry.pushScope()) {
  // this block has its separate current scope
}

LANGUAGE: java
CODE:
try (final @NotNull ISentryLifecycleToken ignored = Sentry.pushIsolationScope()) {
  // this block has its separate isolation scope
}

----------------------------------------

TITLE: Installing Sentry React SDK with npm
DESCRIPTION: This command installs the Sentry React SDK package using npm. The --save flag adds it to the project's dependencies.

LANGUAGE: bash
CODE:
npm install @sentry/react --save

----------------------------------------

TITLE: Sphinx Error Example - Circular Import
DESCRIPTION: Example of a typical Sphinx error message showing a circular import issue when attempting to document API functions.

LANGUAGE: python
CODE:
sphinx.errors.SphinxWarning: autodoc: failed to import function 'api.capture_event' from module 'sentry_sdk'; the following exception was raised:\ncannot import name 'logger' from partially initialized module 'sentry_sdk.utils' (most likely due to a circular import) (/home/runner/work/sentry-python/sentry-python/sentry_sdk/utils.py)

----------------------------------------

TITLE: Customizing Breadcrumbs in Sentry
DESCRIPTION: This snippet shows how to customize breadcrumbs in Sentry using the beforeBreadcrumb hook. It demonstrates filtering out sensitive data from breadcrumbs before they are recorded.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  beforeBreadcrumb(breadcrumb, hint) {
    if (breadcrumb.category === "auth") {
      // Don't add breadcrumbs with auth category
      return null;
    }
    return breadcrumb;
  },
});

LANGUAGE: python
CODE:
def before_breadcrumb(crumb, hint):
    if crumb.get('category', None) == 'auth':
        # Don't add breadcrumbs with auth category
        return None
    return crumb

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    before_breadcrumb=before_breadcrumb
)

LANGUAGE: java
CODE:
import io.sentry.Breadcrumb;
import io.sentry.Hint;
import io.sentry.SentryOptions;

SentryOptions options = new SentryOptions();
options.setDsn("___PUBLIC_DSN___");
options.setBeforeBreadcrumb((breadcrumb, hint) -> {
  if ("auth".equals(breadcrumb.getCategory())) {
    // Don't add breadcrumbs with auth category
    return null;
  }
  return breadcrumb;
});
Sentry.init(options);

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  config.dsn = '___PUBLIC_DSN___'
  config.before_breadcrumb = lambda do |breadcrumb, hint|
    if breadcrumb.category == 'auth'
      # Don't add breadcrumbs with auth category
      nil
    else
      breadcrumb
    end
  end
end

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'before_breadcrumb' => function (\Sentry\Breadcrumb $breadcrumb): ?\Sentry\Breadcrumb {
        if ($breadcrumb->getCategory() === 'auth') {
            // Don't add breadcrumbs with auth category
            return null;
        }
        return $breadcrumb;
    },
]);

LANGUAGE: go
CODE:
err := sentry.Init(sentry.ClientOptions{
    Dsn: "___PUBLIC_DSN___",
    BeforeBreadcrumb: func(breadcrumb *sentry.Breadcrumb, hint *sentry.BreadcrumbHint) *sentry.Breadcrumb {
        if breadcrumb.Category == "auth" {
            // Don't add breadcrumbs with auth category
            return nil
        }
        return breadcrumb
    },
})

LANGUAGE: rust
CODE:
let _guard = sentry::init(sentry::ClientOptions {
    dsn: "___PUBLIC_DSN___".parse().unwrap(),
    before_breadcrumb: Some(Arc::new(|breadcrumb| {
        if breadcrumb.category == Some("auth".into()) {
            // Don't add breadcrumbs with auth category
            None
        } else {
            Some(breadcrumb)
        }
    })),
    ..Default::default()
});

LANGUAGE: kotlin
CODE:
import io.sentry.Breadcrumb
import io.sentry.SentryOptions
import io.sentry.Hint

Sentry.init { options ->
    options.dsn = "___PUBLIC_DSN___"
    options.beforeBreadcrumb = SentryOptions.BeforeBreadcrumbCallback { breadcrumb, hint ->
        if (breadcrumb.category == "auth") {
            // Don't add breadcrumbs with auth category
            null
        } else {
            breadcrumb
        }
    }
}

LANGUAGE: swift
CODE:
SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.beforeBreadcrumb = { breadcrumb in
        if breadcrumb.category == "auth" {
            // Don't add breadcrumbs with auth category
            return nil
        }
        return breadcrumb
    }
}

----------------------------------------

TITLE: Initializing Sentry with Custom Fingerprinting in Kotlin
DESCRIPTION: Configures Sentry error tracking in a Kotlin Android application with custom fingerprinting for SQLiteException errors. Implements the beforeSend callback using Kotlin-specific syntax for handling database connection errors.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.BeforeSendCallback
import android.database.sqlite.SQLiteException

SentryAndroid.init(this) { options ->
  options.beforeSend = BeforeSendCallback { event, hint ->
    if (event.throwable is SQLiteException) {
      event.fingerprints = listOf("database-connection-error")
    }
    event
  }
}

----------------------------------------

TITLE: Throwing Test Error in AWS Lambda Handler (ESM)
DESCRIPTION: This code snippet shows how to throw a sample error in an AWS Lambda function handler using ECMAScript Modules (ESM) syntax. It's used to verify that Sentry is correctly reporting errors from the Lambda function.

LANGUAGE: javascript
CODE:
export const handler = async (event, context) => {
  throw new Error("This is a test error");
};

----------------------------------------

TITLE: Configuring View Hierarchy Capture in Flutter Sentry
DESCRIPTION: Example showing how to customize view hierarchy capture behavior in Flutter using the beforeCaptureViewHierarchy option. This code demonstrates how to conditionally capture view hierarchies based on event severity level.

LANGUAGE: flutter
CODE:
await SentryFlutter.init((options) {
  options.beforeCaptureViewHierarchy = (event, hint, debounce) async {
    // If debounce is active, skip capturing
    if (debounce) {
      return false;
    }
    // Capture if it's a fatal event
    return event.level == SentryLevel.fatal;
  };
});

----------------------------------------

TITLE: Configuring Custom Trigger for Heap Dumps in Sentry .NET SDK
DESCRIPTION: This snippet shows how to use a custom trigger function for heap dumps. It captures a heap dump when the process uses more than 10MB of memory, sets a debouncer, and specifies the event level.

LANGUAGE: csharp
CODE:
options => {
    // All your other options like DSN etc.
    ...
    options.EnableHeapDumps(
        // Triggers if the process uses more than 10MB of memory
        (usedMemory, totalMemory) => usedMemory > 10_000_000,
        // Limit heap dumps to 3 per day with at least 2 hours between each event
        Debouncer.PerDay(3, TimeSpan.FromHours(2)),
        // Set the level for heap dump events to Warning
        SentryLevel.Warning
        );
}

----------------------------------------

TITLE: Filtering Events with before_send in Python Sentry SDK
DESCRIPTION: Example showing how to filter out ZeroDivisionError events and add custom data to all other events using the before_send callback.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.types import Event, Hint

def my_before_send(event: Event, hint: Hint) -> Event | None:
    # Filter out all ZeroDivisionError events.
    # Note that the exception type is available in the hint,
    # but we should handle the case where the exception info
    # is missing.
    if hint.get("exc_info", [None])[0] == ZeroDivisionError:
        return None

    # We can set extra data on the event's "extra" field.
    event["extra"]["foo"] = "bar"

    # We have modified the event as desired, so return the event.
    # The SDK will then send the returned event to Sentry.
    return event

sentry_sdk.init(
    # ...

    before_send=my_before_send,
)

----------------------------------------

TITLE: Setting Sentry Scope Level in Java
DESCRIPTION: This snippet configures the Sentry scope level to WARNING using Java. It imports the necessary Sentry classes and uses the configureScope method to set the level.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.SentryLevel;

Sentry.configureScope(scope -> scope.setLevel(SentryLevel.WARNING));

----------------------------------------

TITLE: Extracting Trace Information from HTML Meta Tags
DESCRIPTION: Implementation showing how to extract tracing information from HTML meta tags and create a new connected transaction using Sentry's propagation context.

LANGUAGE: javascript
CODE:
import { propagationContextFromHeaders } from "@sentry/core"; // Before version 8.40.0, import from "@sentry/utils"
import * as Sentry from "@sentry/browser";

// Read meta tag values
const sentryTrace = document.querySelector("meta[name=sentry-trace]")?.content;
const baggage = document.querySelector("meta[name=baggage]")?.content;

// Generate a propagation context from the meta tags
const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);
Sentry.getCurrentScope().setPropagationContext(propagationContext);

Sentry.startSpan(
  {
    name: `Pageload: ${window.location.pathname}`,
    op: "pageload",
  },
  () => {
    // do something
  }
);

----------------------------------------

TITLE: Setting Request Context in Sentry PHP Client
DESCRIPTION: Shows how to set various types of context (user, tags, extra) for the Sentry client. This provides additional information for events.

LANGUAGE: php
CODE:
// bind the logged in user
$client->user_context(array('email' => 'foo@example.com'));

// tag the request with something interesting
$client->tags_context(array('interesting' => 'yes'));

// provide a bit of additional context
$client->extra_context(array('happiness' => 'very'));

----------------------------------------

TITLE: Customizing View Hierarchy Capture Settings in Sentry Unity SDK
DESCRIPTION: This code snippet demonstrates how to customize the view hierarchy capture settings in the Sentry Unity SDK. It sets limits on the depth, number of root objects, and child count for the view hierarchy capture.

LANGUAGE: csharp
CODE:
options.MaxViewHierarchyDepth = 10;
options.MaxViewHierarchyRootObjects = 100;
options.MaxViewHierarchyObjectChildCount = 20;

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Kotlin
DESCRIPTION: This snippet shows how to catch and report exceptions to Sentry in a Kotlin application. It uses a try-catch expression to handle potential exceptions and the Sentry.captureException() function to send the caught exception to Sentry for monitoring and analysis.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

try {
  aMethodThatMightFail()
} catch (e: Exception) {
  Sentry.captureException(e)
}

----------------------------------------

TITLE: Initializing Sentry with Mongoose Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the Mongoose integration. It uses the mongooseIntegration() function to add instrumentation for the Mongoose library, capturing spans for performance monitoring.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.mongooseIntegration()],
});

----------------------------------------

TITLE: Uploading Source Maps without Expo Plugin
DESCRIPTION: Command to upload source maps in bare workflow mode with manual configuration of Sentry parameters.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___ \
SENTRY_PROJECT=___PROJECT_SLUG___ \
SENTRY_ORG=___ORG_SLUG___ \
SENTRY_URL=https://sentry.io/ \
npx sentry-expo-upload-sourcemaps dist

----------------------------------------

TITLE: Rendering PageGrid Component in Sentry Documentation
DESCRIPTION: A React component used to display a grid layout for the Application Domains documentation page.

LANGUAGE: jsx
CODE:
<PageGrid />

----------------------------------------

TITLE: Initializing DenoCron Integration in Sentry
DESCRIPTION: Demonstrates how to initialize the Sentry DenoCron integration to enable automatic monitoring of Deno.cron jobs. This setup allows Sentry to capture check-ins and monitor the uptime and performance of scheduled jobs.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.denoCronIntegration()],
});

----------------------------------------

TITLE: Uploading Minidump with Flattened Sentry Attributes using cURL
DESCRIPTION: This example shows how to upload a Minidump file to Sentry with additional Sentry-specific attributes using flattened syntax. It demonstrates setting the release and adding a tag using bracket notation in the form fields.

LANGUAGE: bash
CODE:
curl -X POST \
  '___MINIDUMP_URL___' \
  -F upload_file_minidump=@mini.dmp \
  -F 'sentry[release]=my-project-name@2.3.12' \
  -F 'sentry[tags][mytag]=value'

----------------------------------------

TITLE: Initializing Sentry and Configuring Fiber Middleware in Go
DESCRIPTION: This snippet demonstrates how to initialize Sentry, create a Fiber app, and set up the Sentry middleware. It includes error handling, custom event enhancement, and route definitions.

LANGUAGE: go
CODE:
import (
	"fmt"
	"net/http"

	"github.com/getsentry/sentry-go"
	sentryfiber "github.com/getsentry/sentry-go/fiber"
)

// To initialize Sentry's handler, you need to initialize Sentry itself beforehand
if err := sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	EnableTracing: true,
	// Set TracesSampleRate to 1.0 to capture 100%
	// of transactions for performance monitoring.
	// We recommend adjusting this value in production,
	TracesSampleRate: 1.0,
}); err != nil {
	fmt.Printf("Sentry initialization failed: %v\n", err)
}

    // Later in the code
	sentryHandler := sentryfiber.New(sentryfiber.Options{
		Repanic:         true,
		WaitForDelivery: true,
	})

	enhanceSentryEvent := func(ctx *fiber.Ctx) error {
		if hub := sentryfiber.GetHubFromContext(ctx); hub != nil {
			hub.Scope().SetTag("someRandomTag", "maybeYouNeedIt")
		}
		return ctx.Next()
	}

	app := fiber.New()

	app.Use(sentryHandler)

	app.All("/foo", enhanceSentryEvent, func(c *fiber.Ctx) error {
		panic("y tho")
	})

	app.All("/", func(ctx *fiber.Ctx) error {
		if hub := sentryfiber.GetHubFromContext(ctx); hub != nil {
			hub.WithScope(func(scope *sentry.Scope) {
				scope.SetExtra("unwantedQuery", "someQueryDataMaybe")
				hub.CaptureMessage("User provided unwanted query string, but we recovered just fine")
			})
		}
		return ctx.SendStatus(fiber.StatusOK)
	})

	if err := app.Listen(":3000"); err != nil {
		panic(err)
	}

----------------------------------------

TITLE: Implementing BeforeSendTransactionCallback in Java for Sentry
DESCRIPTION: This Java class implements the BeforeSendTransactionCallback interface for Sentry. It sets a custom attribute 'myAttribute' on the root span and all child spans of a SentryTransaction before it's sent.

LANGUAGE: java
CODE:
import io.sentry.protocol.SentryTransaction;
import io.sentry.SentryOptions;
import io.sentry.Hint;
import org.springframework.stereotype.Component;

@Component
public class CustomBeforeSendTransactionCallback implements SentryOptions.BeforeSendTransactionCallback {
    @Override
    public SentryTransaction execute(SentryTransaction transaction, Hint hint) {

        // set the attribute on the root span
        if (transaction.getContexts().getTrace() == null) {
            SpanContext spanContext = new SpanContext("op");
            transaction.getContexts().setTrace(spanContext);
        }
        transaction.getContexts().getTrace().setData("myAttribute", "myValue");

        // and on all child spans
        transaction.getSpans().forEach(span -> {
            if (span.getData() == null) {
                span.setData(new HashMap<>());
            }
            span.getData().put("myAttribute", "myValue");
        });

        return transaction;
    }
}

----------------------------------------

TITLE: Configuring Sentry Scope in C#
DESCRIPTION: Sets extra context data in the Sentry scope using C# lambda syntax. This example adds a character name as custom data that will be included with any error reports.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.SetExtra("character.name", "Mighty Fighter");
});

----------------------------------------

TITLE: Configuring HTTP Client Error Capture
DESCRIPTION: Enable and configure automatic capture of HTTP client errors as Sentry events.

LANGUAGE: kotlin
CODE:
import okhttp3.OkHttpClient
import io.sentry.okhttp.SentryOkHttpEventListener
import io.sentry.okhttp.SentryOkHttpInterceptor
import io.sentry.HttpStatusCodeRange

private val client = OkHttpClient.Builder()
  .eventListener(SentryOkHttpEventListener())
  .addInterceptor(SentryOkHttpInterceptor(
    captureFailedRequests = true,
    failedRequestStatusCodes = listOf(HttpStatusCodeRange(400, 599))))
  .build()

LANGUAGE: java
CODE:
import okhttp3.OkHttpClient;
import io.sentry.HttpStatusCodeRange;
import io.sentry.Sentry;
import io.sentry.okhttp.SentryOkHttpEventListener;
import io.sentry.okhttp.SentryOkHttpInterceptor;
import java.util.Collections;

private final List<HttpStatusCodeRange> codeRanges = Collections.singletonList(new HttpStatusCodeRange(400, 599));
private final List<String> failedRequestTargets = Collections.singletonList(".*");
private final OkHttpClient client = new OkHttpClient.Builder()
  .eventListener(new SentryOkHttpEventListener())
  .addInterceptor(new SentryOkHttpInterceptor(
    Sentry.getCurrentHub(),
    null,
    true,
    codeRanges,
    failedRequestTargets
  ))
  .build();

----------------------------------------

TITLE: Configuring Sentry Reporter with Loader v8
DESCRIPTION: Implementation using Sentry Loader v8 with lazy loading support. Demonstrates the new lazy loading pattern for integrations using promises.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({
      integrations: [],
    });
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

<script>
  // Later in your application
  // By calling this inside of `Sentry.onLoad()`, we can be sure the SDK has been initialized at this point.
  window.Sentry &&
    Sentry.onLoad(function () {
      Sentry.lazyLoadIntegration("reportingObserverIntegration").then(
        (integration) => {
          Sentry.addIntegration(integration());
        }
      );
    });
</script>

----------------------------------------

TITLE: Configuring Sentry Sample Rate in Properties Format
DESCRIPTION: Sets the Sentry sample rate to 0.25 (25%) in a properties file. This configuration determines the percentage of events that will be sent to Sentry for monitoring.

LANGUAGE: properties
CODE:
sentry.sample-rate=0.25

----------------------------------------

TITLE: Configuring View Hierarchy with Privacy Settings in Swift
DESCRIPTION: Shows how to enable view hierarchy attachments while disabling accessibility identifier reporting for privacy concerns

LANGUAGE: swift
CODE:
import Sentry
SentrySDK.start { options in
  options.attachViewHierarchy = true
  options.reportAccessibilityIdentifier = false
}

----------------------------------------

TITLE: Using startInactiveSpan() API in JavaScript
DESCRIPTION: This example demonstrates the use of startInactiveSpan() API, which creates spans without making them active. It's useful for creating loose spans without children.

LANGUAGE: javascript
CODE:
Sentry.startSpan({ name: "outer" }, () => {
  const inner1 = Sentry.startInactiveSpan({ name: "inner1" });
  const inner2 = Sentry.startInactiveSpan({ name: "inner2" });

  // do something

  // manually end the spans
  inner1.end();
  inner2.end();
});

----------------------------------------

TITLE: Uploading Android Bundle and Source Map to Sentry
DESCRIPTION: This bash command uses sentry-cli to upload the Android bundle and source map to Sentry. It specifies the strip prefix and the paths to the bundle and source map files.

LANGUAGE: bash
CODE:
node_modules/@sentry/cli/bin/sentry-cli sourcemaps upload \
  --strip-prefix /path/to/project/root \
  index.android.bundle index.android.bundle.map

----------------------------------------

TITLE: Accessing AIOHTTP Request Object in Sentry Sampling Context
DESCRIPTION: Shows the structure of sampling context data added by the AIOHTTP integration, which includes the incoming request object of type aiohttp.web_request.Request.

LANGUAGE: python
CODE:
{
  "aiohttp_request": <aiohttp.web_request.Request>
}

----------------------------------------

TITLE: Setting Custom Tag in Sentry Scope using PHP
DESCRIPTION: This code configures the Sentry scope by setting a custom tag 'page.locale' with the value 'de-at'. It uses the configureScope function and a closure to modify the scope.

LANGUAGE: PHP
CODE:
\Sentry\configureScope(function (\Sentry\State\Scope $scope): void {
    $scope->setTag('page.locale', 'de-at');
});

----------------------------------------

TITLE: Configuring Sentry Scope in Java
DESCRIPTION: This snippet demonstrates how to configure the Sentry scope in Java. It sets a custom tag and user information including user ID and email.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.protocol.User;

Sentry.configureScope(scope -> {
  scope.setTag("my-tag", "my value");
  User user = new User();
  user.setId("42");
  user.setEmail("john.doe@example.com");
  scope.setUser(user);
});

----------------------------------------

TITLE: Configuring whitelistUrls in Raven.js
DESCRIPTION: This snippet demonstrates how to set up whitelistUrls in Raven.js configuration to limit exceptions to specific domains.

LANGUAGE: javascript
CODE:
whitelistUrls: [/https?:\/\/((cdn|www)\.)?example\.com/];

----------------------------------------

TITLE: Setting User Information in Sentry Scope in Go
DESCRIPTION: This code configures the Sentry scope by setting user information. It uses the ConfigureScope function to add an email address to the user context, which will be included in error reports sent to Sentry.

LANGUAGE: go
CODE:
sentry.ConfigureScope(func(scope *sentry.Scope) {
	scope.SetUser(sentry.User{Email: "jane.doe@example.com"})
})

----------------------------------------

TITLE: Extracting and Continuing Sentry Trace
DESCRIPTION: Shows how to extract trace data from incoming request headers and create a new span that continues the upstream trace using @sentry/node.

LANGUAGE: javascript
CODE:
import { extractTraceparentData } from "@sentry/node";

// The request headers sent by your upstream service to your backend.
const traceparentData = extractTraceparentData(request.headers["sentry-trace"]);

Sentry.startSpan({
  op: "transaction_op",
  name: "transaction_name",
  ...traceparentData,
}, () => {
  // do something
});

----------------------------------------

TITLE: Implementing Timeout for Cross-Origin AJAX Calls
DESCRIPTION: This JavaScript code shows a workaround for handling errors in cross-origin AJAX calls by adding a timeout.

LANGUAGE: javascript
CODE:
$.ajax({
    url: 'http://mysite/leaflet.js',
    success: function() { ... },
    error: function() { ... },
    timeout: 2000, // 2 seconds timeout before error function will be called
    dataType: 'script',
    crossDomain: true
});

----------------------------------------

TITLE: Enabling Profiling in Sentry Configuration
DESCRIPTION: Initialize Sentry with both tracing and profiling enabled, setting sample rates for each.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'traces_sample_rate' => 1.0,
    // Set a sampling rate for profiling - this is relative to traces_sample_rate
    'profiles_sample_rate' => 1.0,
]);

----------------------------------------

TITLE: Adding Span for Retrieving Data from Cache with Sentry in Go
DESCRIPTION: This snippet shows how to create a span for retrieving data from a cache using Sentry in Go. It includes fetching the cached value, wrapping the operation in a span, and setting relevant data including whether the cache hit was successful.

LANGUAGE: go
CODE:
key := "cache_key"
var value string

parentSpan := sentry.StartSpan(context.Background(), "parent_span")

if parentSpan != nil {
    span := parentSpan.StartChild("cache.get")
    defer span.Finish()

    // Perform the cache operation
    value, err := cache.Get(key)

    span.SetData("network.peer.address", "127.0.0.1")
    span.SetData("network.peer.port", 9000)
    span.SetData("cache.key", key)

    if err == nil && value != "" {
        span.SetData("cache.hit", true)
        span.SetData("cache.item_size", len(value))
    } else {
        span.SetData("cache.hit", false)
    }
}

----------------------------------------

TITLE: Disabling Sentry Auto-Initialization in AndroidManifest.xml
DESCRIPTION: This XML snippet shows how to disable Sentry's auto-initialization by adding a meta-data tag to the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<application>
    <meta-data android:name="io.sentry.auto-init" android:value="false" />
</application>

----------------------------------------

TITLE: Setting Custom Tag in Sentry Scope using PHP
DESCRIPTION: This code configures the Sentry scope by setting a custom tag 'page.locale' with the value 'de-at'. It uses the configureScope function and a closure to modify the scope.

LANGUAGE: PHP
CODE:
\Sentry\configureScope(function (\Sentry\State\Scope $scope): void {
    $scope->setTag('page.locale', 'de-at');
});

----------------------------------------

TITLE: Implementing Debug Route with Sentry Error
DESCRIPTION: Creates an Express route handler that throws a test error to verify Sentry error monitoring integration. The route '/debug-sentry' will trigger a deliberate error when accessed, which should be captured by Sentry for monitoring and debugging purposes.

LANGUAGE: javascript
CODE:
app.get("/debug-sentry", function mainHandler(req, res) {
  throw new Error("My first Sentry error!");
});

----------------------------------------

TITLE: Problematic Type Import Example
DESCRIPTION: Example of code that can cause circular imports when using direct type imports in function annotations.

LANGUAGE: python
CODE:
from sentry_sdk.integrations import Integration

def foo(integration):
    # type: (Integration) -> None
    pass

----------------------------------------

TITLE: Initializing Sentry SDK with Bun Runtime
DESCRIPTION: Demonstrates the basic setup for Sentry error tracking in a Bun environment. Imports the Sentry SDK and initializes it with a DSN configuration and error data integration. The DSN placeholder needs to be replaced with an actual Sentry project DSN.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/bun";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.extraErrorDataIntegration()],
});

----------------------------------------

TITLE: Setting Custom Context in Sentry
DESCRIPTION: This snippet demonstrates how to set a custom context in Sentry using the setContext method. It allows attaching arbitrary data to an event, which can be viewed on the issue page.

LANGUAGE: javascript
CODE:
Sentry.setContext("character", {
  name: "Mighty Fighter",
  age: 19,
  attack_type: "melee"
});

----------------------------------------

TITLE: Custom SentryClientFactory Implementation
DESCRIPTION: Create a custom SentryClientFactory to extend default SDK functionality with custom event processing.

LANGUAGE: java
CODE:
public class MySentryClientFactory extends DefaultSentryClientFactory {
  @Override
  public SentryClient createSentryClient(Dsn dsn) {
    SentryClient sentryClient = new SentryClient(createConnection(dsn), getContextManager(dsn));

    /*
     Create and use the ForwardedAddressResolver, which will use the
     X-FORWARDED-FOR header for the remote address if it exists.
     */
    ForwardedAddressResolver forwardedAddressResolver = new ForwardedAddressResolver();
    sentryClient.addBuilderHelper(new HttpEventBuilderHelper(forwardedAddressResolver));

    sentryClient.addBuilderHelper(new ContextBuilderHelper(sentryClient));
    return configureSentryClient(sentryClient, dsn);
  }
}

LANGUAGE: kotlin
CODE:
class MySentryClientFactory : DefaultSentryClientFactory() {
  override fun createSentryClient(dsn: Dsn): SentryClient {
    val sentryClient = SentryClient(createConnection(dsn), getContextManager(dsn))

    /*
     Create and use the ForwardedAddressResolver, which will use the
     X-FORWARDED-FOR header for the remote address if it exists.
     */
    val forwardedAddressResolver = ForwardedAddressResolver()
    sentryClient.addBuilderHelper(HttpEventBuilderHelper(forwardedAddressResolver))
    sentryClient.addBuilderHelper(ContextBuilderHelper(sentryClient))
    return configureSentryClient(sentryClient, dsn)
  }
}

----------------------------------------

TITLE: Using Raven Test Kit in Tests
DESCRIPTION: This JavaScript snippet demonstrates how to use the Raven Test Kit to validate Sentry reports in a testing environment.

LANGUAGE: javascript
CODE:
import testKitInitializer from "raven-testkit";

const testKit = testKitInitializer(Raven);

// any scenario that should call Raven.catchException(...)

expect(testKit.reports()).to.have.lengthOf(1);
const report = testKit.reports()[0];
expect(report).to.have.property("release").to.equal("test");

----------------------------------------

TITLE: Accessing OpenTelemetry TracerProvider in Sentry
DESCRIPTION: Shows how to access the default OpenTelemetry TracerProvider configured by Sentry.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

const provider = Sentry.getClient()?.traceProvider;

----------------------------------------

TITLE: Implementing Heartbeat Monitoring for Jobs in Elixir
DESCRIPTION: This snippet illustrates how to use Sentry's heartbeat monitoring for jobs. It shows a single check-in to notify Sentry about the job's status, useful for detecting missed job starts.

LANGUAGE: elixir
CODE:
Sentry.capture_check_in(status: :ok, monitor_slug: "<monitor-slug>")

LANGUAGE: elixir
CODE:
Sentry.capture_check_in(status: :error, monitor_slug: "<monitor-slug>")

----------------------------------------

TITLE: Enabling MetricKit Raw Payload in Sentry for Swift
DESCRIPTION: This code snippet demonstrates how to enable both MetricKit integration and raw payload viewing when initializing the Sentry SDK in Swift. It sets the DSN, enables MetricKit, and enables raw payload viewing.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.enableMetricKit = true
    options.enableMetricKitRawPayload = true
}

----------------------------------------

TITLE: Configuring Sentry Settings with Delegate Pattern in C++
DESCRIPTION: Demonstrates setting up a delegate for Sentry configuration and initializing the SDK with custom settings. The code shows how to bind a delegate function that configures the sample rate and initializes Sentry through an engine subsystem.

LANGUAGE: cpp
CODE:
#include "SentrySettings.h"

FConfigureSettingsDelegate SettingsDelegate;
SettingsDelegate.BindDynamic(this, &USomeClass::ConfigureSettingsDelegate);

void USomeClass::ConfigureSettingsDelegate(USentrySettings* Settings)
{
    Settings->SampleRate = 0.25f;
}

...

USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->InitializeWithSettings(SettingsDelegate);

----------------------------------------

TITLE: Setting App UserData Directory
DESCRIPTION: Example showing how to configure the userData directory before initializing Sentry.

LANGUAGE: javascript
CODE:
import { app } from "electron";
import * as Sentry from "@sentry/electron/main";

app.setPath("userData", "~/.config/my-app");
Sentry.init({ dsn: "___PUBLIC_DSN___" });

----------------------------------------

TITLE: Configuring TypeScript Compiler for TSLib Usage
DESCRIPTION: This configuration in tsconfig.json enables the use of tslib for TypeScript runtime dependencies instead of injecting them directly. It helps in correctly mapping source maps for all stack trace frames, including internal TypeScript compiler code snippets.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "noEmitHelpers": true,
    "importHelpers": true
  }
}

----------------------------------------

TITLE: Capturing Exceptions in Sentry
DESCRIPTION: Demonstrates how to capture and handle exceptions using Sentry's capture methods in JavaScript and Python, returning a result ID for reference.

LANGUAGE: javascript
CODE:
var resultId = Sentry.captureException(myException);

LANGUAGE: python
CODE:
result_id = sentry_sdk.capture_exception(my_exception);

----------------------------------------

TITLE: Referencing Images in Markdown
DESCRIPTION: Demonstrates how to reference images stored in the /public/ folder within markdown content.

LANGUAGE: markdown
CODE:
![Image alt text](product/alerts/issue-alert.png)

----------------------------------------

TITLE: Verifying Huey Integration with Sentry SDK in Python
DESCRIPTION: This snippet demonstrates how to use the huey integration with Sentry SDK. It initializes Sentry, creates a Huey task, and starts a transaction for monitoring.

LANGUAGE: python
CODE:
from huey import SqliteHuey

sentry_sdk.init(...)  # same as above

huey = SqliteHuey(filename='demo.db')

@huey.task()
def add(a, b):
    return a + b

with sentry_sdk.start_transaction(name="testing_huey"):
    result = add(1, 2)

----------------------------------------

TITLE: Enabling Excimer Extension
DESCRIPTION: Commands to enable the Excimer extension for FPM or Apache2

LANGUAGE: bash
CODE:
phpenmod -s fpm excimer
# or
phpenmod -s apache2 excimer

----------------------------------------

TITLE: Implementing Sentry Before Send Callback in PHP
DESCRIPTION: PHP implementation of the Sentry service class that provides the before_send callback. Returns a callable that can modify or filter Sentry events before they are sent to the server.

LANGUAGE: php
CODE:
<?php

namespace App\Service;

class Sentry
{
    public function getBeforeSend(): callable
    {
        return function (\Sentry\Event $event): ?\Sentry\Event {
            return $event;
        };
    }
}

----------------------------------------

TITLE: Initializing LaunchDarkly and Sentry Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with LaunchDarkly integration, set up the LaunchDarkly client with Sentry's flag usage handler, evaluate a feature flag, and capture an exception in Sentry. It requires the '@sentry/ember' and 'launchdarkly-js-client-sdk' packages to be installed.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/ember';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Using sentry-cli Docker Image
DESCRIPTION: These commands pull the sentry-cli Docker image and run it, mounting the current directory as a volume.

LANGUAGE: bash
CODE:
docker pull getsentry/sentry-cli
docker run --rm -v $(pwd):/work getsentry/sentry-cli --help

----------------------------------------

TITLE: Using Sentry with Kotlin Coroutines
DESCRIPTION: Example of using Sentry context with Kotlin coroutines for Apollo queries.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.SentryContext
import com.apollographql.apollo.exception.ApolloException
import kotlinx.coroutines.launch

launch(SentryContext()) {
  val response = try {
    apollo.query(..).toDeferred().await()
  } catch (e: ApolloException) {
    // handle protocol errors
    return@launch
  }
}

----------------------------------------

TITLE: Clearing User Information in Sentry SDK
DESCRIPTION: This snippet shows how to clear the currently set user information in the Sentry SDK. This is useful when a user logs out or when you want to stop associating events with a particular user.

LANGUAGE: javascript
CODE:
Sentry.setUser(null);

----------------------------------------

TITLE: Initializing LaunchDarkly and Sentry Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with LaunchDarkly integration, set up the LaunchDarkly client with Sentry's flag usage handler, evaluate a feature flag, and capture an exception in Sentry. It requires the '@sentry/ember' and 'launchdarkly-js-client-sdk' packages to be installed.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/ember';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Integrating Sentry with Vue Router
DESCRIPTION: This snippet demonstrates how to set up Sentry with Vue Router. It imports necessary dependencies, creates a router instance, and initializes Sentry with the Vue application and router configuration.

LANGUAGE: javascript
CODE:
import Vue from "vue";
import App from "./App";
import * as Sentry from "@sentry/vue";
import Router from "vue-router";
import HelloWorld from "@/components/HelloWorld";
import Foo from "@/components/Foo";
import Bar from "@/components/Bar";

Vue.use(Router);

const router = new Router({
  // your router configuration
});

Sentry.init({
  Vue,
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 1.0,
  integrations: [
    Sentry.browserTracingIntegration({ router }),
  ],
});

new Vue({
  el: "#app",
  router,
  components: { App },
  template: "<App/>",
});

----------------------------------------

TITLE: Configuring ChildProcess Integration in JavaScript
DESCRIPTION: Demonstrates how to initialize Sentry with the ChildProcess integration in an Electron main process. This example disables breadcrumb capture and only captures events for Out-Of-Memory (OOM) crashes.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.childProcessIntegration({
      breadcrumbs: [],
      events: ["oom"],
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry BrowserClient for Shared Environments in JavaScript
DESCRIPTION: This snippet demonstrates how to set up a Sentry BrowserClient manually for shared environments. It filters out integrations that use global state, initializes the client with custom options, and shows how to capture exceptions manually.

LANGUAGE: javascript
CODE:
import {
  BrowserClient,
  defaultStackParser,
  getDefaultIntegrations,
  makeFetchTransport,
  Scope,
} from "@sentry/browser";

// filter integrations that use the global variable
const integrations = getDefaultIntegrations({}).filter((defaultIntegration) => {
  return !["BrowserApiErrors", "Breadcrumbs", "GlobalHandlers"].includes(
    defaultIntegration.name
  );
});

const client = new BrowserClient({
  dsn: "___PUBLIC_DSN___",
  transport: makeFetchTransport,
  stackParser: defaultStackParser,
  integrations: integrations,
});

const scope = new Scope();
scope.setClient(client);

client.init(); // initializing has to be done after setting the client on the scope

// You can capture exceptions manually for this client like this:
scope.captureException(new Error("example"));

----------------------------------------

TITLE: Configuring Sentry Oban Integration in Elixir
DESCRIPTION: Basic configuration for enabling Sentry monitoring of Oban jobs, including error capture and cron monitoring settings.

LANGUAGE: elixir
CODE:
config :sentry,
  # ...,
  integrations: [
    oban: [
      # Capture errors:
      capture_errors: true,
      # Monitor cron jobs:
      cron: [enabled: true]
    ]
  ]

----------------------------------------

TITLE: Installing Sentry SDK with pip
DESCRIPTION: Command to install or upgrade the Sentry SDK using pip package manager.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk

----------------------------------------

TITLE: Starting Java Application with Logging Configuration
DESCRIPTION: Command to launch Java application with the logging.properties file specified via system property.

LANGUAGE: bash
CODE:
java -Djava.util.logging.config.file=/path/to/app.properties MyClass

----------------------------------------

TITLE: Installing sentry-appengine Dependency with SBT
DESCRIPTION: This Scala SBT snippet shows how to add the sentry-appengine dependency to an SBT project's build.sbt file. It uses the libraryDependencies setting to include the library.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-appengine" % "1.7.30"

----------------------------------------

TITLE: Configuring Sentry Loader v8 with Reporting Observer
DESCRIPTION: Implements Sentry initialization using the v8 loader script with lazy loading of the Reporting Observer integration.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});
    Sentry.lazyLoadIntegration("reportingObserverIntegration").then(
      (integration) => {
        Sentry.addIntegration(integration());
      }
    );
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Implementing Basic Check-in Monitoring with cURL
DESCRIPTION: Example of basic check-in monitoring implementation using cURL commands to notify Sentry about job status at start and completion.

LANGUAGE: bash
CODE:
SENTRY_INGEST="https://___ORG_INGEST_DOMAIN___"
SENTRY_CRONS="${SENTRY_INGEST}/api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/"

# 🟡 Notify Sentry your job is running:
curl "${SENTRY_CRONS}?status=in_progress"

# Execute your scheduled task here...

# 🟢 Notify Sentry your job has completed successfully:
curl "${SENTRY_CRONS}?status=ok"

----------------------------------------

TITLE: Installing StackProf Dependencies in Ruby Gemfile
DESCRIPTION: Adds required gems for StackProf profiling, ensuring stackprof is loaded before sentry-ruby.

LANGUAGE: ruby
CODE:
# Gemfile

gem 'stackprof'
gem 'sentry-ruby'

----------------------------------------

TITLE: Adding Attachments to Sentry Events in JavaScript
DESCRIPTION: This code shows how to add attachments to Sentry events. The specific implementation details are platform-dependent and are included dynamically.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="enriching-events/add-attachment" />

----------------------------------------

TITLE: Installing Sentry Dependency in Rust
DESCRIPTION: Adds the Sentry SDK as a dependency in the Cargo.toml file for a Rust project.

LANGUAGE: toml
CODE:
[dependencies]
sentry = "{{@inject packages.version('sentry.rust') }}"

----------------------------------------

TITLE: Configuring Sentry User Feedback Dialog in Nuxt Plugin
DESCRIPTION: Sets up a Nuxt plugin to show Sentry's user feedback dialog when Vue errors occur on the client side. The plugin hooks into Vue's error handling system to trigger the feedback collection dialog.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin((nuxtApp) => {
  nuxtApp.hook('vue:error', (error, instance, info) => {
    Sentry.showReportDialog({ /* optional options */});
  })
})

----------------------------------------

TITLE: Injecting Tracing Information into Flask HTML Template
DESCRIPTION: This HTML snippet demonstrates how to include tracing information in a Flask HTML template using the sentry_trace_meta variable provided by Sentry to the template context.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    {{ sentry_trace_meta }}
  </head>
  <body>
    <p>This is a website.</p>
  </body>
</html>

----------------------------------------

TITLE: Configuring Metro for React Native Component Name Capturing
DESCRIPTION: This snippet shows how to add the @sentry/react-native/metro plugin to your Metro configuration and enable the reactComponentAnnotation option for React Native projects.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require("@react-native/metro-config");
const { withSentryConfig } = require('@sentry/react-native/metro');

const config = getDefaultConfig(__dirname);
module.exports = withSentryConfig(config, { annotateReactComponents: true });

----------------------------------------

TITLE: Initializing Sentry with Custom Profiling Sampler in SvelteKit (JavaScript)
DESCRIPTION: This snippet demonstrates an alternative approach to initializing Sentry in a SvelteKit application. It uses a custom profilesSampler function instead of a fixed profilesSampleRate, allowing for more fine-grained control over which spans are profiled. The configuration includes both browser tracing and profiling integrations.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add browser profiling integration to the list of integrations
    Sentry.browserTracingIntegration(),
    Sentry.browserProfilingIntegration(),
  ],
  tracesSampleRate: 1.0,

  // This function will be called for every sampled span
  // to determine if it should be profiled
  profilesSampler: (samplingContext) => {
    return 1.0;
  },
});

----------------------------------------

TITLE: Adding Data Attributes to Sentry Spans - Java
DESCRIPTION: Shows how to add data attributes to Sentry spans in Java. Demonstrates adding various data types including strings, numbers, booleans, and arrays using the setData() method.

LANGUAGE: java
CODE:
ISpan span = parent.startChild("task", "operation");
span.setData("my-data-attribute-1", "value1");
span.setData("my-data-attribute-2", 42);
span.setData("my-data-attribute-3", true);

span.setData("my-data-attribute-4", Arrays.asList("value1", "value2", "value3"));
span.setData("my-data-attribute-5", Arrays.asList(42, 43, 44));
span.setData("my-data-attribute-6", Arrays.asList(true, false, true));

----------------------------------------

TITLE: Capturing Basic User Feedback in TypeScript with Sentry
DESCRIPTION: Demonstrates how to capture a message and submit user feedback using Sentry's React Native SDK. Shows type-safe implementation using SendFeedbackParams interface for structured feedback data.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/react-native";
import { SendFeedbackParams } from "@sentry/react-native";

const sentryId = Sentry.captureMessage("My Message");
// OR: const sentryId = Sentry.lastEventId();

const userFeedback: SendFeedbackParams = {
  name: "John Doe",
  email: "john@doe.com",
  message: "Hello World!",
  associatedEventId: eventId, // Optional
};

Sentry.captureFeedback(userFeedback);

----------------------------------------

TITLE: Customizing Sentry Spans for OpenFeign
DESCRIPTION: Examples of modifying or dropping spans for HTTP requests using BeforeSpanCallback.

LANGUAGE: java
CODE:
import feign.Feign;
import io.sentry.openfeign.SentryCapability;

YourApi api = Feign.builder()
    .addCapability(
        new SentryCapability(
            (span, request, response) -> {
              // modify span or return `null` to drop
              if (request.url().endsWith("/todos")) {
                span.setTag("tag-name", "tag-value");
              }
              return span;
            }))
    ...
    .target(YourApi.class, "https://your-api-host/");

LANGUAGE: kotlin
CODE:
import feign.Feign
import feign.Request
import feign.Response
import io.sentry.ISpan
import io.sentry.openfeign.SentryCapability
import io.sentry.openfeign.SentryFeignClient.BeforeSpanCallback

val api = Feign.builder()
    .addCapability(
        SentryCapability(
            BeforeSpanCallback { span: ISpan, request: Request, response: Response? ->
                // modify span or return `null` to drop
                if (request.url().endsWith("/todos")) {
                    span.setTag("tag-name", "tag-value")
                }
                span
            }))
    .target(YourApi::class.java, "https://your-api-host/")

----------------------------------------

TITLE: Configuring Sentry HTTP Integration with Custom Instrumentation in TypeScript
DESCRIPTION: This example shows how to configure the Sentry HTTP integration with custom instrumentation hooks. It allows for custom handling of request and response events, as well as applying custom attributes to spans.

LANGUAGE: TypeScript
CODE:
httpIntegration({
  instrumentation?: {
    requestHook?: (span: Span, req: ClientRequest | HTTPModuleRequestIncomingMessage) => void;
    responseHook?: (span: Span, response: HTTPModuleRequestIncomingMessage | ServerResponse) => void;
    applyCustomAttributesOnSpan?: (
      span: Span,
      request: ClientRequest | HTTPModuleRequestIncomingMessage,
      response: HTTPModuleRequestIncomingMessage | ServerResponse,
    ) => void;
});

----------------------------------------

TITLE: Configuring Sentry Source Maps Upload in Astro Config
DESCRIPTION: This JavaScript code configures the Sentry integration in the Astro config file, including the project slug and authentication token for source maps upload.

LANGUAGE: javascript
CODE:
export default defineConfig({
  integrations: [
    sentry({
      // Other Sentry options
      sourceMapsUploadOptions: {
        project: "___PROJECT_SLUG___",
        authToken: process.env.SENTRY_AUTH_TOKEN,
      },
    }),
  ],
});

----------------------------------------

TITLE: Configuring Sentry Source Maps Upload in Astro Config
DESCRIPTION: This JavaScript code configures the Sentry integration in the Astro config file, including the project slug and authentication token for source maps upload.

LANGUAGE: javascript
CODE:
export default defineConfig({
  integrations: [
    sentry({
      // Other Sentry options
      sourceMapsUploadOptions: {
        project: "___PROJECT_SLUG___",
        authToken: process.env.SENTRY_AUTH_TOKEN,
      },
    }),
  ],
});

----------------------------------------

TITLE: Initializing LaunchDarkly with Sentry Integration in JavaScript
DESCRIPTION: Shows how to initialize both Sentry and LaunchDarkly SDKs with proper integration setup. Includes configuration of Sentry's DSN, LaunchDarkly client initialization with user context, and feature flag evaluation example.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/gatsby';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Installing Sentry Testkit with Package Managers
DESCRIPTION: Commands for installing Sentry Testkit using npm, yarn, or pnpm package managers. The testkit is installed as a development dependency.

LANGUAGE: bash
CODE:
npm install sentry-testkit --save-dev

LANGUAGE: bash
CODE:
yarn add sentry-testkit --dev

LANGUAGE: bash
CODE:
pnpm add sentry-testkit --save-dev

----------------------------------------

TITLE: Configuring Sentry Integration in Laravel bootstrap/app.php
DESCRIPTION: Enable capturing unhandled exceptions to report to Sentry by modifying the bootstrap/app.php file. This integrates Sentry with Laravel's exception handling system.

LANGUAGE: php
CODE:
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;
use Sentry\Laravel\Integration;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        //
    })
    ->withExceptions(function (Exceptions $exceptions) {
        Integration::handles($exceptions);
    })
    ->create();

----------------------------------------

TITLE: Updating Query Data in React Query with TypeScript
DESCRIPTION: Shows how to update query data in the cache after creating a new project. It uses setApiQueryData to ensure proper handling of the full API response data.

LANGUAGE: tsx
CODE:
import {setQueryData, useQueryClient} from 'utils/queryClient'

const queryClient = useQueryClient();

function handleCreateProject() {
  const newProject = await createProject();
  setApiQueryData<ProjectsResponse>(queryClient, makeFetchProjectsQueryKey(...), data => {
    return data ? [...data, newProject] : data;
  });
}

----------------------------------------

TITLE: Setting User Context in Go
DESCRIPTION: Shows how to set user context information including ID, username, email, and IP address.

LANGUAGE: go
CODE:
u := &raven.User{
    ID: "1337",
    Username: "kamilogorek",
    Email: "kamil@sentry.io",
    IP: "127.0.0.1",
}
raven.SetUserContext(u)

----------------------------------------

TITLE: Web Worker Without Sentry Initialization
DESCRIPTION: Example of a Web Worker without Sentry initialization, where only unhandled errors are captured but manual capture methods won't work.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

self.onmessage = (message) => {
  // This will fail silently.
  Sentry.captureMessage("Message received");

  // This error will be captured.
  throw new Error();
};

----------------------------------------

TITLE: Initializing Sentry for Deno
DESCRIPTION: This code initializes Sentry for error tracking in a Deno environment. It imports the Sentry module from the npm registry, sets up the client with a public DSN, and enables console capture integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "npm:@sentry/deno";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.captureConsoleIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry Browser Tracing Request Filter
DESCRIPTION: Shows how to initialize Sentry with custom browser tracing options that filter out specific URL patterns from span creation. This example specifically excludes health check endpoints matching '/health/' from being traced.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  browserTracingOptions: {
    shouldCreateSpanForRequest: (url) => {
      // Do not create spans for outgoing requests to a `/health/` endpoint
      return !url.match(/\/health\/?$/);
    },
  },
});

----------------------------------------

TITLE: Sentry Environment Variables Configuration
DESCRIPTION: Required environment variables for configuring Sentry SDK in AWS Lambda.

LANGUAGE: bash
CODE:
NODE_OPTIONS="--import @sentry/aws-serverless/awslambda-auto"
SENTRY_DSN="___PUBLIC_DSN___"
SENTRY_TRACES_SAMPLE_RATE="1.0"

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Kotlin
DESCRIPTION: Shows how to catch and report exceptions to Sentry using Kotlin. The code imports the Sentry SDK, throws a test exception, and captures it using Sentry.captureException().

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

try {
  throw Exception("This is a test.")
} catch (e: Exception) {
  Sentry.captureException(e)
}

----------------------------------------

TITLE: Creating Product-to-Platform Link in Markdown
DESCRIPTION: Demonstrates how to create a link from product guides to platform content, allowing users to specify their platform if not already set.

LANGUAGE: markdown
CODE:
Releases also offer significant additional features when you fully [configure your SDK](/platform-redirect/?next=/configuration/releases/).

----------------------------------------

TITLE: Verifying Redis Integration with Async Redis Client
DESCRIPTION: Example code to verify the Redis integration using the async Redis client. It initializes Sentry SDK, creates an async Redis connection, and performs set and get operations asynchronously within a transaction.

LANGUAGE: python
CODE:
import asyncio
import redis.asyncio as redis

async def main():
    sentry_sdk.init(...)  # same as above
    r = redis.Redis(host='localhost', port=6379)

    with sentry_sdk.start_transaction(name="testing_sentry"):
        await r.set("foo", "bar")
        await r.get("foo")

asyncio.run(main())

----------------------------------------

TITLE: Rendering Book Component with N+1 API Call in React
DESCRIPTION: This code snippet demonstrates a React component that fetches book information individually for each book, potentially causing an N+1 API Call issue when rendering multiple books.

LANGUAGE: jsx
CODE:
const Book({ id }) => {
  { book, isLoading } = useFetch(`/books?id=${id}`);

  if (isLoading) {
    return <span>LOADING...</span>
  }

  return (
    <div>
      <span>{book.title}</span>
    </div>
  );
};

----------------------------------------

TITLE: Initializing Statsig with Sentry Integration in Vue.js
DESCRIPTION: Shows how to set up Statsig feature flag client and integrate it with Sentry error tracking. The code initializes both services, connects them via the statsigIntegration, and demonstrates checking a feature flag before capturing an error.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/vue';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Java Division Error Logging with Timber
DESCRIPTION: A Java method that performs division while logging the operation details and catching arithmetic exceptions using Timber. The logs are automatically forwarded to Sentry for error tracking.

LANGUAGE: java
CODE:
int division(int x, int y) {
  Timber.i("x = " + x + ", y = " + y)

  try {
    return x / y
  } catch (ArithmeticException e) {
    Timber.e(e, "Division error")
  }
  return 0
}

----------------------------------------

TITLE: Sending JSON Data to Sentry API in Bash
DESCRIPTION: This example demonstrates how to send JSON data in the request body when making a POST request to the Sentry API using curl. It includes setting the Content-Type header.

LANGUAGE: bash
CODE:
curl -i https://sentry.io/api/0/organizations/acme/projects/1/groups/ \
    -d '{"status": "resolved"}' \
    -H 'Content-Type: application/json'

----------------------------------------

TITLE: Adding Span for Putting Data into Cache with Sentry in Go
DESCRIPTION: This snippet demonstrates how to create a span for putting data into a cache using Sentry in Go. It includes setting the cache value, wrapping the operation in a span, and setting relevant data and tags.

LANGUAGE: go
CODE:
key := "cache_key"
value := "cache_value"

parentSpan := sentry.StartSpan(context.Background(), "parent_span")

if parentSpan != nil {
    span := parentSpan.StartChild("cache.put")
    defer span.Finish()

    // Perform the cache operation
    err := cache.Put(key, value)

    span.SetData("network.peer.address", "127.0.0.1")
    span.SetData("network.peer.port", 9000)
    span.SetData("cache.key", key)
    span.SetData("cache.item_size", len(value))

    if err != nil {
        span.SetTag("error", err.Error())
    }
}

----------------------------------------

TITLE: Configuring Sentry Profiling
DESCRIPTION: YAML configuration to enable both tracing and profiling in Sentry with full sampling rates.

LANGUAGE: yaml
CODE:
sentry:
    options:
        traces_sample_rate: 1.0
        # Set a sampling rate for profiling - this is relative to traces_sample_rate
        profiles_sample_rate: 1.0

----------------------------------------

TITLE: Initializing Sentry with Feature Flags in TypeScript
DESCRIPTION: Shows how to initialize Sentry with feature flags integration, add a feature flag, and capture exceptions. Uses the @sentry/nuxt package and requires a valid Sentry DSN to be configured.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/nuxt';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Adding Custom Sampling Context Data in Sentry Transaction
DESCRIPTION: Add custom data to the sampling context when manually creating a transaction. This can be used to provide additional information to the sampling function without attaching it to the transaction itself.

LANGUAGE: javascript
CODE:
const transaction = Sentry.startTransaction(
  {
    name: "test-transaction",
    op: "test",
  },
  // optional second argument
  { data: { region: "us-west-2" } }
);

----------------------------------------

TITLE: Testing Sentry Error Capture
DESCRIPTION: HTML button implementation to test Sentry error capturing functionality.

LANGUAGE: html
CODE:
<button onclick="throw new Error('This is a test error')">
  Throw test error
</button>

----------------------------------------

TITLE: Implementing Custom BeforeSend Handler in UE C++
DESCRIPTION: Creates a custom BeforeSend handler class that inherits from USentryBeforeSendHandler. This handler intercepts and processes Sentry events before they are sent, with a simple logging implementation.

LANGUAGE: cpp
CODE:
UCLASS()
class USomeBeforeSendHandler : public USentryBeforeSendHandler
{
	GENERATED_BODY()

public:
	virtual USentryEvent* HandleBeforeSend_Implementation(USentryEvent* Event, USentryHint* Hint) override
    {
        UE_LOG(LogTemp, Log, TEXT("Hello from CPP beforeSend handler"));
	    return Super::HandleBeforeSend_Implementation(Event, Hint);
    }
};

----------------------------------------

TITLE: Creating Debug Route for Sentry
DESCRIPTION: Route definition to test Sentry error capturing by throwing a test exception.

LANGUAGE: php
CODE:
Route::get('/debug-sentry', function () {
    throw new Exception('My first Sentry error!');
});

----------------------------------------

TITLE: Installing Sentry Android SDK Dependencies
DESCRIPTION: Adding Sentry Android SDK dependency to the app's build.gradle file for direct installation without the Gradle plugin.

LANGUAGE: groovy
CODE:
dependencies {
    implementation 'io.sentry:sentry-android:{{@inject packages.version('sentry.java.android', '7.12.0') }}'
}

LANGUAGE: kotlin
CODE:
dependencies {
    implementation("io.sentry:sentry-android:{{@inject packages.version('sentry.java.android', '7.12.0') }}")
}

----------------------------------------

TITLE: Defining State Context in Sentry SDK
DESCRIPTION: Example JSON structure for State context, which describes the state of the application (e.g., Redux store object).

LANGUAGE: json
CODE:
{
  "contexts": {
    "state": {
      "state": {
        "type": "MobX",
        "value": {
          "flights": [],
          "airports": [],
          "showModal": false
        }
      }
    }
  }
}

----------------------------------------

TITLE: Customizing Oban Job Check-In Information
DESCRIPTION: Example of implementing custom check-in information for Oban jobs using the Sentry.Integrations.Oban.Cron behaviour.

LANGUAGE: elixir
CODE:
defmodule MyApp.MyWorker do
  use Oban.Worker

  @behaviour Sentry.Integrations.Oban.Cron

  @impl Oban.Worker
  def perform(args) do
    # ...
  end

  @impl Sentry.Integrations.Oban.Cron
  def sentry_check_in_configuration(job) do
    [monitor_slug: "custom-slug-#{job.id}"]
  end
end

----------------------------------------

TITLE: Configuring Sentry SDK with Custom Cohere Integration Options
DESCRIPTION: This Python code shows how to initialize Sentry SDK with custom options for the Cohere integration, including PII handling settings.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.cohere import CohereIntegration

sentry_sdk.init(
    # ...
    send_default_pii=True,
    integrations = [
        CohereIntegration(
            include_prompts=False, # LLM/tokenizer inputs/outputs will be not sent to Sentry, despite send_default_pii=True
        ),
    ],
)

----------------------------------------

TITLE: Implementing Custom Repr Function for Sentry SDK in Python
DESCRIPTION: This code snippet shows how to implement a custom repr function for the Sentry SDK. It defines a custom representation for a specific class and falls back to the default behavior for other objects.

LANGUAGE: python
CODE:
def custom_repr(obj):
    if isinstance(obj, MyCustomClass):
        return "<MyCustomClass>"
    else
        return None

sentry_sdk.init(custom_repr=custom_repr)

----------------------------------------

TITLE: Configuring Runloop Performance Monitoring
DESCRIPTION: Setting the minimum duration threshold for runloop queue performance monitoring.

LANGUAGE: javascript
CODE:
ENV["@sentry/ember"] = {
  minimumRunloopQueueDuration: 0, // Setting this to zero will capture all runloop queue durations
};

----------------------------------------

TITLE: Initializing Sentry with HTTP Handler in Go
DESCRIPTION: Initialize Sentry, create a Sentry HTTP handler, and set up routes with error handling and performance tracing. This snippet demonstrates how to integrate Sentry into a Go HTTP server.

LANGUAGE: go
CODE:
import (
	"fmt"
	"net/http"

	"github.com/getsentry/sentry-go"
	sentryhttp "github.com/getsentry/sentry-go/http"
)

// To initialize Sentry's handler, you need to initialize Sentry itself beforehand
if err := sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	EnableTracing: true,
	// Set TracesSampleRate to 1.0 to capture 100%
	// of transactions for tracing.
	// We recommend adjusting this value in production,
	TracesSampleRate: 1.0,
}); err != nil {
	fmt.Printf("Sentry initialization failed: %v\n", err)
}

// Create an instance of sentryhttp
sentryHandler := sentryhttp.New(sentryhttp.Options{})

// Once it's done, you can set up routes and attach the handler as one of your middleware
http.Handle("/", sentryHandler.Handle(&handler{}))
http.HandleFunc("/foo", sentryHandler.HandleFunc(func(rw http.ResponseWriter, r *http.Request) {
	panic("y tho")
}))

fmt.Println("Listening and serving HTTP on :3000")

// And run it
if err := http.ListenAndServe(":3000", nil); err != nil {
	panic(err)
}

----------------------------------------

TITLE: Setting Sentry Transaction Name
DESCRIPTION: Configures a named transaction in Sentry using the Ruby SDK. This code requires the sentry-ruby gem and sets up a transaction name within a scope configuration block.

LANGUAGE: ruby
CODE:
require "sentry-ruby"

Sentry.configure_scope do |scope|
  scope.set_transaction_name("transaction")
end

----------------------------------------

TITLE: Installing Sentry SDK via pip
DESCRIPTION: Command to install or upgrade the Sentry SDK package using pip package manager.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk'

----------------------------------------

TITLE: Instrumenting Queue Producer with Sentry in Python
DESCRIPTION: This snippet demonstrates how to instrument a queue producer using Sentry's SDK. It creates a transaction and span, sets queue-related data, and includes trace headers in the message for consumer tracing.

LANGUAGE: python
CODE:
from datetime import datetime, timezone

import sentry_sdk
import my_custom_queue

# Initialize Sentry
sentry_sdk.init(...)

connection = my_custom_queue.connect()

# The message you want to send to the queue
queue = "messages"
message = "Hello World!"
message_id = "abc123"

# Create transaction
# If you are using a web framework, the framework integration
# will create this for you and you can omit this.
with sentry_sdk.start_transaction(
    op="function",
    name="queue_producer_transaction",
):
    # Create the span
    with sentry_sdk.start_span(
        op="queue.publish",
        name="queue_producer",
    ) as span:
        # Set span data
        span.set_data("messaging.message.id", message_id)
        span.set_data("messaging.destination.name", queue)
        span.set_data("messaging.message.body.size", len(message.encode("utf-8")))

        # Publish the message to the queue (including trace information and current time stamp)
        now = int(datetime.now(timezone.utc).timestamp())
        connection.publish(
            queue=queue,
            body=message,
            timestamp=now,
            headers={
                "sentry-trace": sentry_sdk.get_traceparent(),
                "baggage": sentry_sdk.get_baggage(),
            },
        )

----------------------------------------

TITLE: Enabling Manual Canvas Snapshotting in Sentry Session Replay
DESCRIPTION: This code shows how to enable manual snapshotting for canvas recording in Sentry's Session Replay. It's useful for 3D and WebGL canvases to avoid performance issues.

LANGUAGE: javascript
CODE:
Sentry.replayCanvasIntegration({
  // Enabling the following will ensure your canvas elements are not forced
  // into `preserveDrawingBuffer`.
  enableManualSnapshot: true,
});

----------------------------------------

TITLE: Capturing Messages with Sentry SDK in JavaScript
DESCRIPTION: This snippet shows how to manually capture and send a message to Sentry using the SDK. It utilizes the captureMessage method to report textual information that doesn't necessarily represent an error.

LANGUAGE: javascript
CODE:
Sentry.captureMessage("Something went wrong");

----------------------------------------

TITLE: Installing Raven.js via CDN
DESCRIPTION: Includes the Raven.js library from Sentry's CDN. The script should be loaded after other libraries but before the main application code.

LANGUAGE: html
CODE:
<script\n  src="https://cdn.ravenjs.com/3.26.4/raven.min.js"\n  crossorigin="anonymous"\n></script>

----------------------------------------

TITLE: Modifying or Dropping Spans in Sentry GraphQL Java 22
DESCRIPTION: Example of how to modify or drop spans created around requests using SentryInstrumentation.BeforeSpanCallback.

LANGUAGE: java
CODE:
import io.sentry.graphql22.SentryInstrumentation;

import graphql.GraphQL;

GraphQL graphQL = GraphQL.newGraphQL()
    // ...
    .instrumentation(new SentryInstrumentation((span, environment, result) -> {
      if ("/shows".equals(environment.getExecutionStepInfo().getPath().segmentToString())) {
        span.setTag("tag-name", "tag-value");
      }
      return span;
    }, new SentrySpringSubscriptionHandler(), true))
    .build();

LANGUAGE: kotlin
CODE:
import io.sentry.graphql22.SentryInstrumentation

import graphql.GraphQL

val graphql = GraphQL.newGraphQL()
  // ...
  .instrumentation(SentryInstrumentation({ span: ISpan, env: DataFetchingEnvironment, result: Any? ->
    if ("/shows" == env.executionStepInfo.path.segmentToString()) {
      span.setTag("tag-name", "tag-value")
    }
    span
  }, SentrySpringSubscriptionHandler(), true))
  .build()

----------------------------------------

TITLE: Implementing Sentry Before Send Callback in PHP
DESCRIPTION: This PHP class implements the Sentry service with a 'getBeforeSend' method. The method returns a callable that filters events before sending to Sentry, specifically ignoring events where the original exception is an instance of MyException.

LANGUAGE: php
CODE:
<?php

namespace App\Service;

class Sentry
{
    public function getBeforeSend(): callable
    {
        return function (\Sentry\Event $event, ?\Sentry\EventHint $hint): ?\Sentry\Event {
            // Ignore the event if the original exception is an instance of MyException
            if ($hint !== null && $hint->exception instanceof MyException) {
              return null;
            }

            return $event;
        };
    }
}

----------------------------------------

TITLE: Requiring Sentry Instrumentation in Main Application
DESCRIPTION: Shows how to properly require the instrument.js file at the entry point of the application, ensuring Sentry is initialized before any other modules are loaded.

LANGUAGE: javascript
CODE:
// index.js or app.js
require('./instrument');

// Rest of your application code
const express = require('express');
const app = express();

----------------------------------------

TITLE: Initializing Sentry for Google Cloud Background Functions in JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry for Google Cloud Background functions. It includes performance monitoring and profiling setup, and wraps the event function with Sentry error tracking.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/google-cloud-serverless");
const { nodeProfilingIntegration } = require("@sentry/profiling-node");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    nodeProfilingIntegration(),
  ],

  // Add Performance Monitoring by setting tracesSampleRate
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
});

exports.helloEvents = Sentry.wrapEventFunction(
  (data, context, callback) => {
    throw new Error("oh, hello there!");
  }
);

----------------------------------------

TITLE: Capturing Exceptions with Raven in Python
DESCRIPTION: Example of using Raven to capture and report a ZeroDivisionError exception to Sentry. This shows basic error capturing functionality.

LANGUAGE: python
CODE:
from raven import Client

client = Client('___DSN___')

try:
    1 / 0
except ZeroDivisionError:
    client.captureException()

----------------------------------------

TITLE: Installing Raven.js via CDN
DESCRIPTION: Includes the Raven.js library from Sentry's CDN. The script should be loaded after other libraries but before the main application code.

LANGUAGE: html
CODE:
<script\n  src="https://cdn.ravenjs.com/3.26.4/raven.min.js"\n  crossorigin="anonymous"\n></script>

----------------------------------------

TITLE: Generating Source Maps with UglifyJS
DESCRIPTION: Command to generate source maps using UglifyJS. The command outputs a minified JavaScript file along with its corresponding source map, including the original source files in the map.

LANGUAGE: bash
CODE:
uglifyjs app.js \
  -o app.min.js.map \
  --source-map url=app.min.js.map,includeSources

----------------------------------------

TITLE: Limiting ESM Instrumentation to Sentry Modules
DESCRIPTION: Configuration to restrict import-in-the-middle wrapping to only packages that Sentry specifically instruments, reducing potential conflicts.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  registerEsmLoaderHooks: {
    onlyIncludeInstrumentedModules: true,
  },
});

----------------------------------------

TITLE: Configuring Isolation Scope in Java and Kotlin
DESCRIPTION: Demonstrates how to set a tag on the isolation scope using both the direct method and the configureScope method in Java and Kotlin.

LANGUAGE: java
CODE:
Sentry.setTag("my-tag", "my value");
// Is identical to:
Sentry.configureScope(ScopeType.ISOLATION, scope -> {
  scope.setTag("my-tag", "my value");
});

LANGUAGE: kotlin
CODE:
Sentry.setTag("my-tag", "my value")
// Is identical to:
Sentry.configureScope(ScopeType.ISOLATION) { scope ->
  scope.setTag("my-tag", "my value")
}

----------------------------------------

TITLE: Configuring A/B Test Experiment in TypeScript for Sentry
DESCRIPTION: This TypeScript code defines the configuration for an A/B test experiment in Sentry's frontend. It specifies the experiment key, type, parameter, and possible assignments.

LANGUAGE: typescript
CODE:
export const experimentList = [
  {
    key: 'ShowPluginsExperiment',
    type: ExperimentType.Organization,
    parameter: 'exposed',
    assignments: [0, 1],
  },
] as const;

----------------------------------------

TITLE: Configuring NgModule Providers with SentryIonicErrorHandler
DESCRIPTION: Angular module configuration to use the custom Sentry error handler in the application.

LANGUAGE: javascript
CODE:
@NgModule({
    ...
    providers: [
        StatusBar,
        SplashScreen,
        {provide: ErrorHandler, useClass: SentryIonicErrorHandler}
    ]
})

----------------------------------------

TITLE: Initializing Sentry SDK with Trace Sampling
DESCRIPTION: Sets up the Sentry SDK by creating a new options object, configuring the traces sample rate to 20%, and initializing the SDK. This enables performance monitoring and error tracking functionality.

LANGUAGE: c
CODE:
sentry_options_t *options = sentry_options_new();
sentry_options_set_traces_sample_rate(options, 0.2);
// ...
sentry_init(options);

----------------------------------------

TITLE: Advanced Django Integration Configuration
DESCRIPTION: Detailed configuration example showing all available options for DjangoIntegration including transaction styling, middleware spans, and signal tracking

LANGUAGE: python
CODE:
import django.db.models.signals

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

sentry_sdk.init(
    # ...
    integrations=[
        DjangoIntegration(
            transaction_style='url',
            middleware_spans=True,
            signals_spans=True,
            signals_denylist=[
                django.db.models.signals.pre_init,
                django.db.models.signals.post_init,
            ],
            cache_spans=False,
            http_methods_to_capture=("GET",),
        ),
    ],
)

----------------------------------------

TITLE: Implementing Sentry-Monitored Hangfire Job in .NET
DESCRIPTION: This snippet illustrates how to create a Hangfire job with Sentry monitoring. It uses the SentryMonitorSlug attribute to specify the monitor slug for the job, enabling automatic check-ins and status updates.

LANGUAGE: csharp
CODE:
using Hangfire;
using Sentry.Hangfire;

GlobalConfiguration.Configuration.UseSentry();
BackgroundJob.Enqueue<PricingUpdateWorker>(job => job.Execute());

public class PricingUpdateWorker
{
    [SentryMonitorSlug("update-pricing")]
    public void Execute()
    {
        // Do your work to update the price
    }
}

----------------------------------------

TITLE: Using Sentry CLI for Source Map Verification
DESCRIPTION: This command uses the Sentry CLI to explain issues with source maps for a specific event ID.

LANGUAGE: shell
CODE:
sentry-cli sourcemaps explain c2ad049fd9e448ada7849df94575e019

----------------------------------------

TITLE: Sending Tags with Sentry CLI
DESCRIPTION: Demonstrates how to add tags to an event using the -t parameter with key-value pairs.

LANGUAGE: bash
CODE:
sentry-cli send-event -m "a failure" -t task:create-user

----------------------------------------

TITLE: Initializing Sentry SDK with Environment Configuration
DESCRIPTION: Initializes the Sentry SDK for error tracking and sets the environment to production. Uses the Kotlin Multiplatform Sentry client to configure basic monitoring settings.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry

Sentry.init {
  it.environment = "production"
}

----------------------------------------

TITLE: Manual Scope Isolation for Background Jobs using Sentry
DESCRIPTION: Demonstrates how to manually isolate scope and breadcrumbs for background jobs using Sentry's withIsolationScope method. This ensures that background job operations maintain their own isolated context.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

async function backgroundJob() {
  return await Sentry.withIsolationScope(async () => {
    // Everything inside of this will be isolated
    await doSomething();
  });
}

----------------------------------------

TITLE: Running Sentry Migration Codemod
DESCRIPTION: Command to run the @sentry/migr8 codemod tool which automatically updates SDK usage patterns from 7.x to 8.x. Requires Node 18+ to run.

LANGUAGE: bash
CODE:
npx @sentry/migr8@latest

----------------------------------------

TITLE: Installing Sentry SDK with FastAPI support
DESCRIPTION: Install the Sentry SDK from PyPI with FastAPI integration support using pip.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[fastapi]'

----------------------------------------

TITLE: Initializing Sentry Client with Feedback Integration
DESCRIPTION: Sets up Sentry error tracking with a public DSN and configures the feedback integration widget. The configuration includes system-based color scheme and allows for additional SDK customization.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/astro";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.feedbackIntegration({
      // Additional SDK configuration goes in here, for example:
      colorScheme: "system",
    }),
  ],
});

----------------------------------------

TITLE: Implementing Telemetry in Sentry Wizard with TypeScript
DESCRIPTION: Example of using the withTelemetry wrapper function to implement telemetry in a Sentry wizard. This sets up basic telemetry collection and error reporting.

LANGUAGE: typescript
CODE:
export async function runSourcemapsWizard(
  options: WizardOptions,
): Promise<void> {
  return withTelemetry(
    {
      enabled: options.telemetryEnabled, // this can be controlled by users
      integration: 'sourcemaps', // the name of the wizard (the -i argument)
    },
    () => runSourcemapsWizardWithTelemetry(options),
  );
}

----------------------------------------

TITLE: Configuring Sentry SDK for Remix Client
DESCRIPTION: TypeScript code to initialize Sentry SDK on the client-side in a Remix project. It includes configuration for error monitoring, performance tracing, and session replay.

LANGUAGE: typescript
CODE:
import { useLocation, useMatches } from "@remix-run/react";
import * as Sentry from "@sentry/remix";
import { useEffect } from "react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.browserTracingIntegration({
      useEffect,
      useLocation,
      useMatches,
    }),
    // Replay is only available in the client
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs distributed tracing should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Health Check Detection - Python Constants
DESCRIPTION: Python list defining glob patterns used to identify health check endpoints for deprioritized sampling. These patterns match common health check endpoint naming patterns.

LANGUAGE: python
CODE:
HEALTH_CHECK_GLOBS = [
    "*healthcheck*",
    "*healthy*",
    "*live*",
    "*ready*",
    "*heartbeat*",
    "*/health",
    "*/healthz",
    # ...
]

----------------------------------------

TITLE: Initializing Sentry with OpenFeature - Track All Evaluations
DESCRIPTION: Sets up Sentry with OpenFeature integration to track all feature flag evaluations across the application. Configures Sentry initialization, OpenFeature provider setup, and demonstrates feature flag evaluation with error capturing.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nuxt';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
OpenFeature.addHooks(new Sentry.OpenFeatureIntegrationHook());

const client = OpenFeature.getClient();
const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Installing Sentry OpenFeign Dependencies
DESCRIPTION: Package dependency configurations for different build systems to add Sentry OpenFeign integration.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-openfeign</artifactId>
    <version>{{@inject packages.version('sentry.java.openfeign', '5.1.0') }}</version>
</dependency>

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-openfeign:{{@inject packages.version('sentry.java.openfeign', '5.1.0') }}'

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-openfeign" % "{{@inject packages.version('sentry.java.openfeign', '5.1.0') }}"

----------------------------------------

TITLE: Initializing Sentry SDK with Multiple Vue 3 Apps
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK with multiple Vue 3 apps created at the same time. It uses the 'app' option in Sentry.init to pass an array of Vue app instances.

LANGUAGE: javascript
CODE:
const appOne = Vue.createApp(App);
const appTwo = Vue.createApp(App);
const appThree = Vue.createApp(App);

Sentry.init({
  app: [appOne, appTwo, appThree],
});

----------------------------------------

TITLE: Setting Environment Variables for Sentry CLI
DESCRIPTION: Sets up necessary environment variables for Sentry CLI to upload source maps.

LANGUAGE: bash
CODE:
export SENTRY_ORG=___ORG_SLUG___
export SENTRY_PROJECT=___PROJECT_SLUG___
export SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Initializing Sentry with Express.js using CommonJS
DESCRIPTION: Sets up Sentry error tracking in an Express.js application using CommonJS module format. Requires instrumenting before other modules and configures the error handler after routes but before other error middleware.

LANGUAGE: javascript
CODE:
// Ensure to require this before requiring any other modules!
require('./instrument.js')

const express = require("express");
const Sentry = require("@sentry/node");
const app = express();

// Add your routes, etc.

// Add this after all routes,
// but before any and other error-handling middlewares are defined
Sentry.setupExpressErrorHandler(app);

app.listen(3000);

----------------------------------------

TITLE: Installing Self-Hosted Sentry Using Git and Docker
DESCRIPTION: This bash script clones the latest release of the Sentry self-hosted repository, checks out the latest version, runs the installation script, and starts Sentry using Docker Compose.

LANGUAGE: bash
CODE:
VERSION=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/getsentry/self-hosted/releases/latest)
VERSION=${VERSION##*/}
git clone https://github.com/getsentry/self-hosted.git
cd self-hosted
git checkout ${VERSION}
./install.sh
# After installation, run the following to start Sentry:
docker compose up --wait

----------------------------------------

TITLE: Installing Sentry SDK with AsyncPG Integration
DESCRIPTION: This command installs or upgrades the Sentry SDK with AsyncPG integration using pip.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk[asyncpg]

----------------------------------------

TITLE: Disabling Swizzling in Sentry SDK Initialization (Swift)
DESCRIPTION: This code snippet demonstrates how to disable swizzling when initializing the Sentry SDK using Swift. It sets the 'enableSwizzling' option to false, which disables all swizzling-dependent features.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.enableSwizzling = false
}

----------------------------------------

TITLE: Integrating Sentry with RewriteFrames using Loader (v8)
DESCRIPTION: This HTML snippet shows how to integrate Sentry with the RewriteFrames integration using the Loader script (version 8). It sets up a sentryOnLoad function to initialize Sentry and lazy load the RewriteFrames integration.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});
    Sentry.lazyLoadIntegration("rewriteFramesIntegration").then(
      (integration) => {
        Sentry.addIntegration(integration());
      }
    );
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Configuring Sentry SDK with TyperIntegration
DESCRIPTION: Initialize Sentry SDK with TyperIntegration to capture exceptions in Typer CLI applications. This snippet shows how to set up the SDK with a DSN and enable sending default PII data.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.typer import TyperIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    integrations=[TyperIntegration()],
)

----------------------------------------

TITLE: Setting Up User Feedback Widget
DESCRIPTION: Demonstrates the installation and setup of the User Feedback widget, which allows collecting feedback from anywhere in the application.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="user-feedback/setup" />

----------------------------------------

TITLE: Configuring Standard Splunk Cloud Instance URL Format
DESCRIPTION: Shows the URL format for standard Splunk Cloud plans using the http-inputs prefix. This format is used for all non-self-service Splunk Cloud installations.

LANGUAGE: plaintext
CODE:
https://http-inputs-<host>:8088

----------------------------------------

TITLE: Capturing Errors with Sentry SDK
DESCRIPTION: Basic implementation of error capturing using try-catch blocks in Swift and Objective-C. Shows how to capture errors using SentrySDK.capture() method.

LANGUAGE: swift
CODE:
import Sentry

do {
    try aMethodThatMightFail()
} catch {
    SentrySDK.capture(error: error)
}

LANGUAGE: objc
CODE:
@import Sentry;

NSError *error = nil;
[self aMethodThatMightFail:&error]

if (error) {
    [SentrySDK captureError:error];
}

----------------------------------------

TITLE: Running Node.js with ESM Import
DESCRIPTION: Command line instruction for running a Node.js application with the --import parameter to load Sentry initialization file. Requires Node.js v18.19.0 or later.

LANGUAGE: bash
CODE:
node --import ./instrument.mjs app.mjs

----------------------------------------

TITLE: Throwing Exception for Sentry Error Tracking in PHP
DESCRIPTION: This code snippet shows how to intentionally throw an exception in PHP to verify Sentry error tracking setup. It creates a basic exception with a custom error message that will be captured and reported by Sentry.

LANGUAGE: php
CODE:
throw new Exception("My first Sentry error!");

----------------------------------------

TITLE: Configuring Mailgun Route for Sentry Inbound Email
DESCRIPTION: Configuration settings for creating a Mailgun route to handle inbound email processing for Sentry. Defines priority, filter expression, and forward action to Sentry's webhook endpoint.

LANGUAGE: text
CODE:
Priority:
  0
Filter Expression:
  catch_all()
Actions:
  forward("https://sentry.example.com/api/hooks/mailgun/inbound/")
Description:
  Sentry inbound handler

----------------------------------------

TITLE: Verifying Sentry-Unleash Integration
DESCRIPTION: Demonstrates how to test the integration by evaluating a feature flag using the Unleash SDK before capturing an exception with Sentry. This helps verify that the feature flag evaluation is recorded in the error event.

LANGUAGE: python
CODE:
import sentry_sdk
from UnleashClient import UnleashClient

unleash = UnleashClient(...)  # See Unleash quickstart.
unleash.initialize_client()

test_flag_enabled = unleash.is_enabled("test-flag")
sentry_sdk.capture_exception(Exception("Something went wrong!"))

----------------------------------------

TITLE: Configuring Sentry Instrumentation for All Filesystem Disks in Laravel
DESCRIPTION: This snippet demonstrates how to enable Sentry instrumentation for all filesystem disks in a Laravel application. It wraps the disk configuration with Sentry's Integration::configureDisks() method to enable spans and breadcrumbs for filesystem operations.

LANGUAGE: php
CODE:
'disks' => Sentry\Laravel\Features\Storage\Integration::configureDisks([
    'local' => [
        'driver' => 'local',
        'root' => storage_path('app'),
        'throw' => false,
    ],

    // ...
], /* enableSpans: */ true, /* enableBreadcrumbs: */ true),

----------------------------------------

TITLE: Excluding Resources from Android APK/AAB
DESCRIPTION: Configuration to exclude unnecessary resources from the Sentry Android SDK to reduce final APK size.

LANGUAGE: kotlin
CODE:
android {
  packagingOptions {
    resources {
      excludes += "META-INF/native-image/io.sentry/sentry/native-image.properties"
    }
  }
}

----------------------------------------

TITLE: Retrieving and Managing Transactions with Sentry SDK in Objective-C
DESCRIPTION: This code snippet shows how to retrieve an ongoing transaction or span using Sentry.span in Objective-C. If no transaction exists, it creates a new one. If a transaction or span is already running, it starts a child span.

LANGUAGE: Objective-C
CODE:
@import Sentry;

id<SentrySpan> span = SentrySDK.span;

if (span == nil) {
    span = [SentrySDK startTransactionWithName:@"task" operation:@"op"];
} else {
    span = [span startChildWithOperation: @"subtask"];
}

----------------------------------------

TITLE: Installing Sentry Servlet via Gradle
DESCRIPTION: Gradle dependency declaration for adding Sentry servlet integration to a Java web application.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-servlet:{{@inject packages.version('sentry.java.servlet', '4.1.0') }}'

----------------------------------------

TITLE: Setting Custom Context Data with set_extra
DESCRIPTION: Uses sentry_sdk.set_extra() to add a custom field 'character.name' with value 'Mighty Fighter' to Sentry events. This additional context helps in debugging by providing more information about the application state when errors occur.

LANGUAGE: python
CODE:
from sentry_sdk import set_extra

set_extra("character.name", "Mighty Fighter")

----------------------------------------

TITLE: Installing Sentry Logrus Integration in Go
DESCRIPTION: This command installs the Sentry Logrus integration package using the go get command.

LANGUAGE: bash
CODE:
go get github.com/getsentry/sentry-go/logrus

----------------------------------------

TITLE: Defining API Examples in Python
DESCRIPTION: Illustrates how to create example responses for API documentation using OpenApiExample.

LANGUAGE: python
CODE:
from drf_spectacular.types import OpenApiExample

class TeamExamples:
    CREATE_TEAM = [
        OpenApiExample(
            "Create a new team",
            value={"slug": "my-team", "name": "My Team"},
            status_codes=["201"],
            response_only=True,
        )
    ]

----------------------------------------

TITLE: Creating Manual HTTP Span with OpenTelemetry in Java
DESCRIPTION: Demonstrates how to manually create an OpenTelemetry span for HTTP requests with required SpanKind and HTTP method attributes for proper Sentry processing

LANGUAGE: java
CODE:
Span span = tracer.spanBuilder("myspan")
  .setAttribute(HTTP_REQUEST_METHOD, "GET")
  .setSpanKind(SpanKind.SERVER)
  .startSpan();

----------------------------------------

TITLE: Initializing Sentry with BeforeSend Callback in Kotlin
DESCRIPTION: This snippet demonstrates how to initialize Sentry in Kotlin and set up a BeforeSend callback to customize event fingerprints for SQLException instances. It uses the Sentry SDK and java.sql.SQLException.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.BeforeSendCallback
import java.sql.SQLException

Sentry.init { options ->
  options.beforeSend = BeforeSendCallback { event, hint ->
    if (event.throwable is SQLException) {
      event.fingerprints = listOf("database-connection-error")
    }
    event
  }
}

----------------------------------------

TITLE: Implementing Minidump Upload to Sentry in C++
DESCRIPTION: Implements the upload functionality for sending minidump files to Sentry using Breakpad's HttpUpload class. The function handles file upload with additional parameters and error handling capabilities.

LANGUAGE: cpp
CODE:
#include <string>
#include "common/linux/http_upload.h"

bool UploadMinidump(std::string &path) {
  // Add additional arguments for Sentry
  std::map<string, string> parameters;

  std::map<string, string> files;
  files["upload_file_minidump"] = path;

  return HTTPUpload::SendRequest(
    "___MINIDUMP_URL___",
    parameters,
    files,
    /* proxy */ "",
    /* proxy password */ "",
    /* certificate */ "",
    /* response body */ nullptr,
    /* response code */ nullptr,
    /* error */ nullptr
  );
}

----------------------------------------

TITLE: Sending Gauge Metric
DESCRIPTION: Demonstrates sending a gauge metric with a specific value and unit using the Sentry CLI.

LANGUAGE: bash
CODE:
sentry-cli send-metric gauge -n "bundle_size" -v 384 -u "byte"

----------------------------------------

TITLE: Configuring Sentry via CDN with Reporting Observer
DESCRIPTION: Sets up Sentry using CDN scripts with both tracing and Reporting Observer integrations. Includes integrity checks for security.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/reportingobserver.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'reportingobserver.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    integrations: [Sentry.reportingObserverIntegration()],
  });
</script>

----------------------------------------

TITLE: Unmounting Sentry Toolbar
DESCRIPTION: JavaScript code demonstrating how to unmount the Sentry Toolbar. This is useful when you need to remove the toolbar from the page manually.

LANGUAGE: javascript
CODE:
const unmountToolbar = window.SentryToolbar.init({ ... });

// sometime later...
unmountToolbar();

----------------------------------------

TITLE: Configuring Sentry Transaction Filtering in Ruby
DESCRIPTION: Demonstrates how to configure Sentry to filter out specific transactions and sensitive database information. Uses before_send_transaction hook to skip unimportant health check routes and mask SQL query descriptions in database spans.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  # ...
  config.before_send_transaction = lambda do |event, _hint|
    # skip unimportant transactions
    if event.transaction == "/unimportant/healthcheck/route"
      # don't send the event to Sentry
      nil
    else
      # filter out SQL queries from spans with sensitive data
      event.spans.each do |span|
        span[:description] = '<FILTERED>' if span[:op].start_with?('db')
      end

      event
    end
  end
end

----------------------------------------

TITLE: Capturing Exception with Stack Trace in Sentry C++
DESCRIPTION: This snippet shows how to create a Sentry event with an exception that includes a stack trace. It demonstrates creating an event, adding an exception with a type and message, setting an empty stack trace, and capturing the event.

LANGUAGE: cpp
CODE:
#include <sentry.h>

sentry_value_t event = sentry_value_new_event();

sentry_value_t exc = sentry_value_new_exception("Exception", "Error message.");
sentry_value_set_stacktrace(exc, NULL, 0);
sentry_event_add_exception(event, exc);

sentry_capture_event(event);

----------------------------------------

TITLE: Initializing HTTP Client with SentryHttpMessageHandler in C#
DESCRIPTION: Creates an instrumented HTTP client using SentryHttpMessageHandler to automatically propagate traces and create spans for outgoing requests.

LANGUAGE: csharp
CODE:
var httpHandler = new SentryHttpMessageHandler();
var httpClient = new HttpClient(httpHandler);

var response = await httpClient.GetStringAsync("https://example.com");

----------------------------------------

TITLE: Using Exclusion in Sentry Search
DESCRIPTION: Demonstrates the use of the negation operator (!) to exclude certain results from a Sentry search query. This example excludes issues affecting a specific user email.

LANGUAGE: plaintext
CODE:
is:unresolved !user.email:example@customer.com

----------------------------------------

TITLE: Installing Sentry SDK for Ember CLI
DESCRIPTION: This command installs the Sentry SDK package for Ember CLI projects. It uses the ember-cli package manager to add @sentry/ember as a dependency to the project.

LANGUAGE: bash
CODE:
ember install @sentry/ember

----------------------------------------

TITLE: Adding Span Attributes
DESCRIPTION: Examples of adding attributes to spans both during creation and after initialization.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    attributes: {
      attr1: "value1",
      attr2: 42,
      attr3: true,
    },
  },
  () => {
    // Do something
  }
);

const span = Sentry.getActiveSpan();
if (span) {
  span.setAttribute("attr1", "value1");
  // Or set multiple attributes at once:
  span.setAttributes({
    attr2: 42,
    attr3: true,
  });
}

----------------------------------------

TITLE: Customizing Sentry Client Builder in Laravel
DESCRIPTION: Example of how to customize the Sentry PHP SDK client builder in Laravel by modifying the serializer options. This code should be placed in the register method of a service provider.

LANGUAGE: php
CODE:
use Sentry\Serializer\Serializer;
use Sentry\ClientBuilderInterface;

$this->app->extend(ClientBuilderInterface::class, function (ClientBuilderInterface $clientBuilder) {
    $clientBuilder->setSerializer(new Serializer($clientBuilder->getOptions(), 5));

    return $clientBuilder;
});

----------------------------------------

TITLE: Late Initialization Implementation in CJS
DESCRIPTION: Example of late Sentry initialization in a CommonJS application after fetching DSN.

LANGUAGE: javascript
CODE:
const startApp = require("./app");
const fetchDsn = require("./utils/fetchDsn");
const Sentry = require("@sentry/node");

startApp();

const dsn = fetchDsn();
Sentry.init({
  dsn,

  // Add Tracing by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Configuring Sentry User Feedback Integration
DESCRIPTION: Demonstrates how to configure the user feedback widget with custom styles and placeholders during Sentry initialization.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.feedbackIntegration({
        styles:{
            submitButton: {
                backgroundColor: '#6a1b9a',
            },
        },
        namePlaceholder: 'Fullname',
    }),
  ],
});

----------------------------------------

TITLE: Handling jQuery AJAX Errors with Raven.js
DESCRIPTION: This code demonstrates how to globally handle AJAX errors in jQuery and report them to Sentry using Raven.js.

LANGUAGE: javascript
CODE:
$(document).ajaxError(function (event, jqXHR, ajaxSettings, thrownError) {
  Raven.captureMessage(thrownError || jqXHR.statusText, {
    extra: {
      type: ajaxSettings.type,
      url: ajaxSettings.url,
      data: ajaxSettings.data,
      status: jqXHR.status,
      error: thrownError || jqXHR.statusText,
      response: jqXHR.responseText.substring(0, 100),
    },
  });
});

----------------------------------------

TITLE: Configuring Tracing Sample Rate in JavaScript
DESCRIPTION: Set the sample rate for transactions in Sentry SDK configuration. This determines the percentage of transactions that will be sent to Sentry for performance monitoring.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...

  // To set a uniform sample rate
  tracesSampleRate: 0.2,

  // OR: Determine traces sample rate based on the sampling context
  tracesSampler: (samplingContext) => {
    // Return a number between 0 and 1 or a boolean
  },
});

----------------------------------------

TITLE: Adding crossorigin Attribute to Script Tags
DESCRIPTION: This HTML snippet demonstrates how to add the crossorigin attribute to script tags for better error handling in cross-origin requests.

LANGUAGE: html
CODE:
<script src="http://sub.domain.com/script.js" crossorigin="anonymous"></script>

----------------------------------------

TITLE: Configuring Sentry with Custom before_send Function in Elixir
DESCRIPTION: This snippet configures Sentry to use the custom before_send function defined in the MyApp.Sentry module. It's typically placed in the config/config.exs file of an Elixir project.

LANGUAGE: elixir
CODE:
config :sentry,
  before_send: {MyApp.Sentry, :before_send},
  # ...

----------------------------------------

TITLE: Initializing Sentry with Native Platform Options (Common)
DESCRIPTION: Common code for initializing Sentry using native platform options in a Kotlin Multiplatform project.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry
import io.sentry.kotlin.multiplatform.PlatformOptionsConfiguration

fun initializeSentry() {
  Sentry.initWithPlatformOptions(platformOptionsConfiguration())
}

expect fun platformOptionsConfiguration(): PlatformOptionsConfiguration

----------------------------------------

TITLE: Determining Version from Git
DESCRIPTION: Uses sentry-cli to propose a version number based on git repository information.

LANGUAGE: bash
CODE:
#!/bin/sh
VERSION=`sentry-cli releases propose-version`

----------------------------------------

TITLE: Setting Gauge Metric in Sentry
DESCRIPTION: Shows how to set a gauge metric in Sentry for CPU usage monitoring. The example includes custom tags for the operating system and specifies the measurement unit as a percentage.

LANGUAGE: JavaScript
CODE:
// Add 2 to a gauge tracking CPU usage.
Sentry.metrics.gauge("cpu_usage", 34, {
  tags: { os: "MacOS" },
  unit: "percent",
});

----------------------------------------

TITLE: Configuring Sentry with Netflix DGS in Kotlin
DESCRIPTION: Kotlin code snippet demonstrating how to configure Sentry GraphQL integration with Netflix DGS framework.

LANGUAGE: kotlin
CODE:
import com.netflix.graphql.dgs.exceptions.DefaultDataFetcherExceptionHandler
import io.sentry.graphql.SentryGenericDataFetcherExceptionHandler
import io.sentry.graphql.SentryInstrumentation
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration

@Configuration
class SentryConfiguration {

  @Bean
  fun sentryInstrumentation() = SentryInstrumentation(SentryDgsSubscriptionHandler(), true)

  @Bean
  fun sentryDataFetcherExceptionHandler() = SentryGenericDataFetcherExceptionHandler(DefaultDataFetcherExceptionHandler())
}

----------------------------------------

TITLE: Capturing Exceptions with Sentry Browser SDK in JavaScript
DESCRIPTION: Example shows how to capture and report errors using Sentry's captureException() method within a try-catch block. While the method accepts Error objects for best results with complete stack traces, it can also handle non-Error objects and strings, though these may result in events with missing stack traces.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Installing Sentry Vue SDK
DESCRIPTION: Commands for installing the Sentry Vue SDK using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/vue --save

LANGUAGE: bash
CODE:
yarn add @sentry/vue

LANGUAGE: bash
CODE:
pnpm add @sentry/vue

----------------------------------------

TITLE: Configuring SSL Settings in Python
DESCRIPTION: Sets up SSL-related configurations for Sentry when using HTTPS.

LANGUAGE: python
CODE:
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

----------------------------------------

TITLE: Configuring Sentry Client-Side Integration
DESCRIPTION: Client-side initialization of Sentry including browser tracing and replay integrations with sampling configuration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/astro";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration(),
  ],

  tracesSampleRate: 1.0,

  replaysSessionSampleRate: 0.1,

  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Installing Excimer with PECL
DESCRIPTION: Use PECL to install the Excimer extension for PHP.

LANGUAGE: bash
CODE:
pecl install excimer

----------------------------------------

TITLE: Manual Transaction Finish in Kotlin
DESCRIPTION: Code example showing how to manually finish a running transaction using Sentry's Kotlin API.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

val span = Sentry.getSpan()
span?.finish()

----------------------------------------

TITLE: Verifying RustTracingIntegration Setup in Python
DESCRIPTION: Python code to verify the RustTracingIntegration setup by customizing event type mapping and span filtering. It prints metadata for debugging purposes.

LANGUAGE: python
CODE:
from sentry_sdk.integrations.rust_tracing import (
    default_event_type_mapping,
    default_span_filter,
    EventTypeMapping,
    RustTracingIntegration,
)

import my_rust_extension

def custom_event_type_mapping(metadata: dict) -> EventTypeMapping:
    print(metadata)
    return default_event_type_mapping(metadata)

def custom_span_filter(metadata: dict) -> bool:
    print(metadata)
    return default_span_filter(metadata)

sentry_sdk.init(
    # ...
    integrations=[
        RustTracingIntegration(
            "my_rust_extension",
            my_rust_extension.initialize_tracing,
            event_type_mapping=custom_event_type_mapping,
            span_filter=custom_span_filter,
        ),
    ],
)

----------------------------------------

TITLE: Adding Custom Context to Sentry Scope in PowerShell
DESCRIPTION: This code snippet uses the Edit-SentryScope cmdlet to add custom context information to the Sentry scope. It creates a 'character' context with properties like Name, Age, and AttackType.

LANGUAGE: powershell
CODE:
Edit-SentryScope {
    $_.Contexts['character'] = @{
        Name       = 'Mighty Fighter'
        Age        = 19
        AttackType = 'melee'
    };
}

----------------------------------------

TITLE: Filtering Screenshots in Sentry Flutter
DESCRIPTION: This snippet illustrates how to filter screenshots before they are attached to events using the beforeScreenshot callback. It shows an example of attaching screenshots only for specific exception types.

LANGUAGE: dart
CODE:
await SentryFlutter.init(
  (options) {
    options.attachScreenshot = true;
    options.beforeScreenshot = (event, {hint}) {
    // Based on some condition you can decide to attach the screenshot or drop it
    if (event.throwable is MyImportantException) {
      return true;
    }
      return false;
    };
  },
  appRunner: () => runApp(
    SentryWidget(
      child: MyApp(),
    ),
  ),
);

----------------------------------------

TITLE: Configuring Global Scope in Sentry SDK - Swift
DESCRIPTION: This snippet demonstrates how to use SentrySDK.configureScope to set global context data in Swift. It shows setting a tag and user information that will be attached to all future events.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.configureScope { scope in
    scope.setTag(value: "my-tag", key: "my value")
    let user = User()
    user.email = "john.doe@example.com"
    scope.setUser(user)
}

----------------------------------------

TITLE: Advanced Configuration Options
DESCRIPTION: Comparison of configuration options between the two SDKs including debug, environment, release and sampling settings.

LANGUAGE: go
CODE:
SetDSN()
SetDefaultLoggerName()
SetDebug()
SetEnvironment()
SetRelease()
SetSampleRate()
SetIgnoreErrors()
SetIncludePaths()

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	DebugWriter: os.Stderr,
	Debug: true,
	Environment: "environment",
	Release: "my-project-name@1.0.0",
	SampleRate: 0.5,
	// IgnoreErrors: TBD,
	// IncludePaths: TBD
})

----------------------------------------

TITLE: Configuring Sentry in Electron Renderer Process
DESCRIPTION: Configuration of Sentry SDK in Electron renderer process with performance monitoring and session replay features.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/renderer";

Sentry.init({
  integrations: [
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Capturing User Feedback with .NET SDK
DESCRIPTION: Demonstrates how to capture user feedback using the Sentry .NET SDK. The code first captures a message event and then associates user feedback with that event using email, feedback message, and user name.

LANGUAGE: csharp
CODE:
var eventId = SentrySdk.CaptureMessage("An event that will receive user feedback.");

SentrySdk.CaptureUserFeedback(eventId, "user@example.com", "It broke.", "The User");

----------------------------------------

TITLE: Handling Server-side Errors with Sentry in Remix
DESCRIPTION: TypeScript code to wrap the handleError function with Sentry for capturing server-side errors in a Remix application.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/remix";

export const handleError = Sentry.wrapHandleErrorWithSentry(
  (error, { request }) => {
    // Custom handleError implementation
  }
);

// Alternative: Use the Sentry utility function if you don't need to wrap a custom function
export const handleError = Sentry.sentryHandleError;

----------------------------------------

TITLE: Setting Document-Policy Header in ASP.NET Core
DESCRIPTION: This snippet demonstrates how to set the Document-Policy header in an ASP.NET Core application. It uses middleware to append the header to the response, ensuring it's set for all requests.

LANGUAGE: csharp
CODE:
// ASP.NET Core
app.Use(async (context, next) => {
    context.Response.OnStarting(() => {
        context.Response.Headers.Append("Document-Policy", "js-profiling");
        return Task.CompletedTask;
    });
    await next();
});

----------------------------------------

TITLE: HTTP Context Updates in Raven Python
DESCRIPTION: Example of updating HTTP request context data using context.merge().

LANGUAGE: python
CODE:
client.context.merge({'request': data})

----------------------------------------

TITLE: Setting Up Trace Propagation for Mobile App with Backend Services in JavaScript
DESCRIPTION: This configuration shows how to set up trace propagation for a mobile app with backend services. It allows tracking of user actions across the main API server, media server, and local API endpoints within the app.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracePropagationTargets: [
    "https://api.myapp.com",
    "https://media.myapp.com",
    /^\/local-api\//
  ],
});

----------------------------------------

TITLE: Installing Sentry Go SDK for Iris
DESCRIPTION: This command installs the Sentry Go SDK for Iris using the go get command.

LANGUAGE: bash
CODE:
go get github.com/getsentry/sentry-go/iris

----------------------------------------

TITLE: Configuring Sentry Instrumentation for GraphQL Client (C#)
DESCRIPTION: Configure the GraphQLHttpClient to use SentryGraphQLHttpMessageHandler for error capturing. This setup allows Sentry to intercept and report GraphQL over HTTP errors.

LANGUAGE: csharp
CODE:
var graphClient = new GraphQLHttpClient(
    options =>
    {
        options.EndPoint = new Uri("http://your.app.server/graphql");
        options.HttpMessageHandler = new SentryGraphQLHttpMessageHandler(); // <-- Configure GraphQL use Sentry Message Handler
    },
    new SystemTextJsonSerializer()
    );

----------------------------------------

TITLE: Markdown Frontmatter Configuration for Sentry Documentation
DESCRIPTION: YAML frontmatter configuration for a Sentry documentation page defining the title, description and sidebar ordering.

LANGUAGE: markdown
CODE:
---
title: Instrumentation
description: "Learn how to instrument tracing in your app."
sidebar_order: 20
---

----------------------------------------

TITLE: Configuring Sentry Session Replay in Astro Config
DESCRIPTION: This snippet demonstrates how to customize Replay sample rates in the Astro configuration file. It sets the session sample rate to 0.2 and the on-error sample rate to 1.0.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config";
import sentry from "@sentry/astro";

export default defineConfig({
  integrations: [
    sentry({
      dsn: "___PUBLIC_DSN___",
      replaysSessionSampleRate: 0.2, // defaults to 0.1
      replaysOnErrorSampleRate: 1.0, // defaults to 1.0
    }),
  ],
});

----------------------------------------

TITLE: Configuring Ignored Errors in Sentry Properties File
DESCRIPTION: This snippet defines a list of errors to be ignored by Sentry. It uses exact match for 'Some error' and a regular expression pattern for errors starting with 'Another'.

LANGUAGE: properties
CODE:
ignored-errors=Some error,Another .*

----------------------------------------

TITLE: Setting Extra Context in Sentry Using Elixir
DESCRIPTION: Demonstrates setting additional context information for Sentry error tracking using the set_extra_context function. This allows adding custom key-value pairs to error reports for better debugging and analysis.

LANGUAGE: elixir
CODE:
Sentry.Context.set_extra_context(%{message: "Oh no"})

----------------------------------------

TITLE: Configuring Error Sampling Rate in Sentry SDK
DESCRIPTION: Sets the sample rate for error events in Sentry SDK configuration. This example demonstrates setting a 25% sampling rate for errors.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  sampleRate: 0.25,
});

----------------------------------------

TITLE: Environment Variables Configuration for Sentry SDK
DESCRIPTION: Environment variables setup for initializing Sentry SDK with performance monitoring enabled. Includes NODE_OPTIONS for auto-instrumentation, SENTRY_DSN for project identification, and sampling rate configuration.

LANGUAGE: bash
CODE:
NODE_OPTIONS="-r @sentry/serverless/dist/awslambda-auto"
SENTRY_DSN="___PUBLIC_DSN___"
SENTRY_TRACES_SAMPLE_RATE="1.0"

----------------------------------------

TITLE: Configuring Sentry SDK Transport Options
DESCRIPTION: Example of how to configure transport options for the Sentry SDK, including custom headers and fetch options.

LANGUAGE: javascript
CODE:
Sentry.init({
  transportOptions: {
    headers: {
      "Custom-Header": "Value"
    },
    fetchOptions: {
      credentials: "include"
    }
  }
});

----------------------------------------

TITLE: Masking Specific View Instances in XML for Session Replay
DESCRIPTION: This XML snippet shows how to mask or unmask a specific view instance using tags in the layout file for Session Replay.

LANGUAGE: xml
CODE:
<View
  android:id="@+id/my_view"
  android:layout_width="wrap_content"
  android:layout_height="wrap_content"
  android:tag="sentry-mask|sentry-unmask"
/>

----------------------------------------

TITLE: Adding Sentry Exception Reporting in Laravel
DESCRIPTION: PHP code to add Sentry exception reporting to the App/Exceptions/Handler.php file in Laravel.

LANGUAGE: php
CODE:
public function report(Exception $exception)
{
    if (app()->bound('sentry') && $this->shouldReport($exception)) {
        app('sentry')->captureException($exception);
    }

    parent::report($exception);
}

----------------------------------------

TITLE: Implementing Error Throwing Method in Angular Component
DESCRIPTION: This snippet demonstrates how to implement a method in an Angular component's TypeScript file that throws a new Error for Sentry testing purposes.

LANGUAGE: javascript
CODE:
public throwTestError(): void {
  throw new Error("Sentry Test Error");
}

----------------------------------------

TITLE: Wrapping Root Route Creation with Sentry
DESCRIPTION: Applies Sentry tracing to Server-Side Rendering (SSR) by wrapping the createRootRoute function.

LANGUAGE: TypeScript
CODE:
import type { ReactNode } from "react";
import { createRootRoute } from "@tanstack/react-router";

// (Wrap `createRootRoute`, not its return value!)
export const Route = wrapCreateRootRouteWithSentry(createRootRoute)({
  // ...
});

----------------------------------------

TITLE: Filtering Oban Perform Errors in Sentry Event Callback
DESCRIPTION: Implementation of a before_send callback to filter Oban.PerformError events based on specific conditions.

LANGUAGE: elixir
CODE:
def before_send(event) do
  case event.original_exception do
    %Oban.PerformError{reason: {:error, reason}} -> event
    %Oban.PerformError{} -> nil
    _other -> event
  end
end

----------------------------------------

TITLE: Configuring Tracing Options in SentryFlutter for Dart
DESCRIPTION: This code demonstrates how to initialize SentryFlutter with tracing options. It shows two approaches: setting a uniform tracesSampleRate and implementing a custom tracesSampler function. The tracesSampleRate is set to 1.0 for 100% sampling, while the tracesSampler allows for dynamic sampling based on context.

LANGUAGE: dart
CODE:
SentryFlutter.init((options) {
  // To set a uniform sample rate
  options.tracesSampleRate = 1.0;

  // OR if you prefer, determine traces sample rate
  // based on the sampling context
  options.tracesSampler = (samplingContext) {
    // return a number between 0 and 1 or null (to fallback
    // to configured value)
  };
});

----------------------------------------

TITLE: Testing Sentry Configuration
DESCRIPTION: Artisan command to test Sentry configuration.

LANGUAGE: shell
CODE:
php artisan sentry:test

----------------------------------------

TITLE: Integrating Feature Flags with Sentry Toolbar (React)
DESCRIPTION: TypeScript code showing how to integrate feature flags with the Sentry Toolbar in a React application using the OpenFeatureAdapter.

LANGUAGE: typescript
CODE:
import {OpenFeature} from '@openfeature/web-sdk';
import {FlagdWebProvider} from '@openfeature/flagd-web-provider';

// Define your provider
const provider = new FlagdWebProvider({...});

// Set the provider into the OpenFeature SDK
OpenFeature.setProvider(provider);

window.SentryToolbar.init({
  ...
  // Set the provider into the OpenFeatureAdapter
  featureFlags: window.SentryToolbar.OpenFeatureAdapter({provider})
});

----------------------------------------

TITLE: Relay Credentials Format
DESCRIPTION: Example JSON structure of Relay credentials file containing secret key, public key and ID.

LANGUAGE: json
CODE:
{
  "secret_key": "5gkTAfwOrJ0lMy9aOAOmHKO1k6gd8ApYkAInmg5VfWk",
  "public_key": "nDJI79SbEYH9-8NEJAI7ezrgYfoIPW3Bnkg00k1z0fA",
  "id": "cde0d72e-0c4e-4550-a934-c1867d8a177c"
}

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Attachment Size in Objective-C
DESCRIPTION: This snippet shows how to start the Sentry SDK in Objective-C and set the maximum attachment size to 5 MiB. It imports the Sentry module and uses the SentrySDK startWithConfigureOptions method with a block to configure options.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.maxAttachmentSize = 5 * 1024 * 1024; // 5 MiB
}];

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration in Nuxt.js (Deprecated)
DESCRIPTION: This snippet shows the deprecated method of setting up Sentry with Unleash integration in a Nuxt.js application. It uses the 'unleashClientClass' option instead of 'featureFlagClientClass'.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nuxt';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({unleashClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Configuring ContextLines Integration in Sentry
DESCRIPTION: The contextLinesIntegration adds source code context to stack frames in Sentry error reports. It allows customization of how many lines of code are displayed around each stack frame through the frameContextLines option.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/browser';

Sentry.init({
  integrations: [
    new Sentry.contextLinesIntegration({
      frameContextLines: 7 // default value
    })
  ]
});

----------------------------------------

TITLE: Stripping and Separating Debug Information in ELF Files
DESCRIPTION: Series of commands to separate debug information from an ELF binary into a separate debug file while maintaining debug link information.

LANGUAGE: bash
CODE:
# There is an executable called "binary" in the CWD
objcopy --only-keep-debug binary binary.debug
objcopy --strip-debug --strip-unneeded binary
objcopy --add-gnu-debuglink=binary.debug binary

----------------------------------------

TITLE: Configuring Sentry in Electron Renderer Process
DESCRIPTION: Configuration of Sentry SDK in Electron renderer process with performance monitoring and session replay features.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/renderer";

Sentry.init({
  integrations: [
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing Sentry with Custom Error Handling in Ruby
DESCRIPTION: This code initializes Sentry and sets up a custom before_send handler to modify the fingerprint for database connection errors. It specifically targets ActiveRecord::ConnectionNotEstablished exceptions to group them under a common fingerprint.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  # ...
  config.before_send = lambda do |event, hint|
    if hint[:exception].is_a?(ActiveRecord::ConnectionNotEstablished)
      event.fingerprint = ["database-unavailable"]
    end

    event
  end
end

----------------------------------------

TITLE: Configuring In-app Frame Rules for Sentry Stack Traces
DESCRIPTION: Server-side rule configuration to identify in-app frames in stack traces for obfuscated builds. This rule marks any stack frame with a module path starting with 'com.mycompany.' as an application frame.

LANGUAGE: bash
CODE:
stack.module:com.mycompany.** +app

----------------------------------------

TITLE: Initializing Sentry FileSystem Integration in JavaScript
DESCRIPTION: Demonstrates how to initialize Sentry with the FileSystem integration. This integration creates spans for fs API operations and uses the @opentelemetry/instrumentation-fs package.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.fsIntegration()],
});

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Vue.js
DESCRIPTION: Demonstrates how to use Sentry's captureException() method within a try-catch block to capture errors. The code shows proper error handling with Sentry integration, allowing both Error objects and other types to be captured, though Error objects provide more complete stack traces.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/vue";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration (Current)
DESCRIPTION: Sets up Sentry error tracking with Unleash feature flags using the current featureFlagClientClass configuration. Demonstrates initialization, feature flag checking, and error capturing.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solidstart';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Directory Structure Example - Markdown
DESCRIPTION: Example directory paths showing where to store different code samples for enriching events documentation.

LANGUAGE: markdown
CODE:
/src/platform-includes/enriching-events/set-context/
/src/platform-includes/enriching-events/set-user/
/src/platform-includes/enriching-events/unset-user/
/src/platform-includes/enriching-events/set-transaction-name/
/src/platform-includes/enriching-events/set-tag/
/src/platform-includes/enriching-events/add-attachment/
/src/platform-includes/enriching-events/breadcrumbs/breadcrumbs-example/
/src/platform-includes/enriching-events/breadcrumbs/before-breadcrumb/
/src/platform-includes/user-feedback/sdk-api-example/
/src/platform-includes/user-feedback/user-feedback-example-widget/
/src/platform-includes/enriching-events/scopes/configure-scope/
/src/platform-includes/enriching-events/scopes/with-scope/

----------------------------------------

TITLE: Configuring Sentry SDK Dependency in Kotlin Multiplatform
DESCRIPTION: Updates the dependency configuration to expose the Sentry SDK through the api configuration block in the shared module's Gradle file.

LANGUAGE: kotlin
CODE:
val commonMain by getting {
  dependencies {
    api("io.sentry:sentry-kotlin-multiplatform:{{@inject packages.version('sentry.kotlin.kmp', '0.0.1-alpha.2') }}")
  }
}

----------------------------------------

TITLE: Initializing Sentry Client with Custom Sample Rate
DESCRIPTION: Initializes the Sentry client with a 100% sample rate (1.0) while using default values for all other configuration options. The client initialization is stored in a variable prefixed with underscore to indicate it's intentionally unused.

LANGUAGE: rust
CODE:
let _sentry = sentry::init(sentry::ClientOptions {
    sample_rate: 1.0,
    ..Default::default()
});

----------------------------------------

TITLE: Setting Up Sentry GraphQL Integration in Kotlin
DESCRIPTION: Kotlin code snippet demonstrating how to set up Sentry GraphQL integration when building a GraphQL instance.

LANGUAGE: kotlin
CODE:
import graphql.GraphQL
import graphql.execution.SimpleDataFetcherExceptionHandler
import io.sentry.graphql.SentryGenericDataFetcherExceptionHandler
import io.sentry.graphql.SentryInstrumentation

val defaultExceptionHandler = SimpleDataFetcherExceptionHandler()
val sentryExceptionHandler = SentryGenericDataFetcherExceptionHandler(defaultExceptionHandler)

val graphql = GraphQL.newGraphQL()
  .defaultDataFetcherExceptionHandler(sentryExceptionHandler)
	.instrumentation(SentryInstrumentation(
    // If you're not using our Spring integration, please provide NoOpSubscriptionHandler.getInstance() instead.
    SentrySpringSubscriptionHandler(),
    // Set this to false when using Spring WebMVC
    true
  ))
  .build()

----------------------------------------

TITLE: Throwing Test Error for Sentry in JavaScript
DESCRIPTION: This code snippet uses setTimeout to asynchronously throw a new Error with the message 'Sentry Test Error'. This is useful for testing Sentry error capturing functionality in a JavaScript application.

LANGUAGE: javascript
CODE:
setTimeout(() => {
  throw new Error("Sentry Test Error");
});

----------------------------------------

TITLE: Installing @sentry/sveltekit with pnpm
DESCRIPTION: This command installs the Sentry SDK for SvelteKit using pnpm (Performant npm) package manager. It adds the package as a project dependency and updates the pnpm-lock.yaml file.

LANGUAGE: bash
CODE:
pnpm add @sentry/sveltekit

----------------------------------------

TITLE: Initializing Sentry Client with Custom Sample Rate
DESCRIPTION: Initializes the Sentry client with a 100% sample rate (1.0) while using default values for all other configuration options. The client initialization is stored in a variable prefixed with underscore to indicate it's intentionally unused.

LANGUAGE: rust
CODE:
let _sentry = sentry::init(sentry::ClientOptions {
    sample_rate: 1.0,
    ..Default::default()
});

----------------------------------------

TITLE: Creating a Custom Hook in React
DESCRIPTION: Example of creating a custom hook named useTheme to share reusable logic.

LANGUAGE: javascript
CODE:
function useTheme() {
  // Hook implementation
}

----------------------------------------

TITLE: Using wasm-split CLI Tool
DESCRIPTION: Command to split WebAssembly file into debug information file and stripped WASM file using wasm-split tool.

LANGUAGE: shell
CODE:
wasm-split /path/to/file.wasm -d /path/to/file.debug.wasm --strip

----------------------------------------

TITLE: Implementing Anthropic AI Pipeline with Sentry Monitoring
DESCRIPTION: Example of creating an AI pipeline using Anthropic client with Sentry monitoring. Shows how to initialize Sentry SDK, create an Anthropic client, and track AI operations using decorators and transactions.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.ai.monitoring import ai_track
from anthropic import Anthropic


sentry_sdk.init(...)  # same as above

client = Anthropic(api_key="(your Anthropic API key)")

@ai_track("My AI pipeline")
def my_pipeline():
    with sentry_sdk.start_transaction(op="ai-inference", name="The result of the AI inference"):
        print(
            client.messages.create(
                max_tokens=42,
                model="some-model",
                messages=[{"role": "system", "content": "Hello, Anthropic!"}]
            )
        )

----------------------------------------

TITLE: Instrumenting Queue Producer in Java with Sentry
DESCRIPTION: This snippet demonstrates how to instrument a queue producer using Sentry in Java. It creates a transaction, starts a child span for queue publishing, sets span data, and includes trace headers in the message.

LANGUAGE: java
CODE:
MyCustomQueue connection = MyCustomQueue.connect();

// The message you want to send to the queue
String queue = "messages";
String message = "Hello World!";
String messageId = "abc123";

// Create transaction
ITransaction transaction = Sentry.startTransaction("queue_producer_transaction", "function");

try {
    final SentryTraceHeader traceparent = Sentry.getTraceparent();
    final BaggageHeader baggage = Sentry.getBaggage();

    ISpan span = transaction.startChild("queue.publish", "queue_producer");
    try {
        // Set span data
        span.setData("messaging.message.id", messageId);
        span.setData("messaging.destination.name", queue);
        span.setData("messaging.message.body.size", message.getBytes(StandardCharsets.UTF_8).length);

        // Publish the message to the queue (including current time stamp)
        long now = Instant.now().getEpochSecond();

        connection.publish(queue, message, now, traceparent, baggage);
    } catch (Exception e) {
        span.setThrowable(e);
        span.setStatus(SpanStatus.INTERNAL_ERROR);
        throw e;
    } finally {
        span.finish();
    }
} catch (Exception e) {
    transaction.setThrowable(e);
    transaction.setStatus(SpanStatus.INTERNAL_ERROR);
    throw e;
} finally {
    transaction.finish();
}

----------------------------------------

TITLE: Adding Simple and Complex Breadcrumbs to Sentry in PowerShell
DESCRIPTION: This snippet demonstrates two ways to add breadcrumbs in Sentry using PowerShell. It shows a simple method with just a message and a more complex method with additional parameters such as category, type, level, and custom data.

LANGUAGE: powershell
CODE:
# Simple breadcrumb with just a message
'hello there' | Add-SentryBreadcrumb

# More complext breadcrumb
Add-SentryBreadcrumb -Message 'hello there' -Category 'cat' -Type 'foo' -Level Warning -Data @{ 'key' = 'value' }

----------------------------------------

TITLE: Configuring Global Hub Mode for Java
DESCRIPTION: Java configuration for enabling Global Hub Mode in Sentry.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  ..
}, true)

----------------------------------------

TITLE: Commit Metadata JSON Structure for API
DESCRIPTION: JSON structure showing the required format for sending commit metadata to the Sentry API, including patch sets, author information, and commit details.

LANGUAGE: json
CODE:
{
  "commits": [
    {
      "patch_set": [
        { "path": "path/to/added-file.html", "type": "A" },
        { "path": "path/to/modified-file.html", "type": "M" },
        { "path": "path/to/deleted-file.html", "type": "D" }
      ],
      "repository": "owner-name/repo-name",
      "author_name": "Author Name",
      "author_email": "author_email@example.com",
      "timestamp": "2018-09-20T11:50:22+03:00",
      "message": "This is the commit message.",
      "id": "8371445ab8a9facd271df17038ff295a48accae7"
    }
  ]
}

----------------------------------------

TITLE: Emitting a Distribution in PHP with Sentry Metrics
DESCRIPTION: This code shows how to emit a distribution metric for tracking page load times. It uses the Sentry metrics API to add a value to a distribution with a specified key, unit, and tags.

LANGUAGE: php
CODE:
\Sentry\metrics()->distribution(
    key: 'page_load',
    value: 15.0,
    unit: \Sentry\Metrics\MetricsUnit::millisecond(),
    tags: [
        'page' => '/home',
    ],
);

----------------------------------------

TITLE: Configuring Bottle Integration Options
DESCRIPTION: Example showing how to initialize Sentry SDK with custom Bottle integration options including transaction style and error status codes

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.bottle import BottleIntegration

sentry_sdk.init(
    # same as above
    integrations=[
        BottleIntegration(
            transaction_style="endpoint",
            failed_request_status_codes={*range(500, 600)},
        ),
    ],
)

----------------------------------------

TITLE: Importing Sentry SDK for Astro
DESCRIPTION: Imports all exports from the @sentry/astro package using the namespace alias 'Sentry'. This import enables error monitoring and performance tracking functionality in Astro applications.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/astro";

----------------------------------------

TITLE: Verifying Sentry SDK gRPC Integration for Client
DESCRIPTION: Example of how to verify the gRPC integration on the client-side by creating a transaction and making a gRPC call. This demonstrates how Sentry captures performance data for gRPC requests.

LANGUAGE: python
CODE:
import grpc

sentry_sdk.init(...)  # same as above

...

with sentry_sdk.start_transaction(op="function", name="testing_sentry"):
    with grpc.insecure_channel("example.com:12345") as channel:
        stub = helloworld_pb2_grpc.GreeterStub(channel)
        response = stub.SayHello(helloworld_pb2.HelloRequest(name="you"))

----------------------------------------

TITLE: Implementing Data Callback in Raven Configuration for Node.js
DESCRIPTION: This example demonstrates how to implement a data callback function to modify the payload before sending to Sentry.

LANGUAGE: javascript
CODE:
{
    dataCallback: function(data) {
        // add a user context
        data.user = {
            id: 1337,
            name: 'janedoe',
            email: 'janedoe@example.com'
        };
        return data;
    }
}

----------------------------------------

TITLE: Configuring Custom Error Handler for Tryton
DESCRIPTION: Implements a custom error handler for Tryton 5.4+ that returns user-friendly error messages with Sentry event IDs instead of tracebacks.

LANGUAGE: python
CODE:
# wsgi.py
# ...

from trytond.exceptions import TrytonException, UserError

@application.error_handler
def _(app, request, e):
    if isinstance(e, TrytonException):
        return
    else:
        event_id = sentry_sdk.last_event_id()
        data = UserError('Custom message', f'{event_id}\n{e}')
        return app.make_response(request, data)

----------------------------------------

TITLE: Frontend Gauge Metrics in JavaScript
DESCRIPTION: Examples of implementing gauge metrics for tracking current values in frontend applications using Sentry's JavaScript SDK.

LANGUAGE: JavaScript
CODE:
Sentry.metrics.gauge("concurrent_users", 10, {
   tags: { browser: "Firefox" }
});

LANGUAGE: JavaScript
CODE:
Sentry.metrics.gauge("shopping_cart_item_count", itemCount, {
   tags: { platform: "web" }
});

----------------------------------------

TITLE: Creating Child Spans with withActiveSpan in JavaScript
DESCRIPTION: This example shows how to use the withActiveSpan helper to create a span as a child of a specific parent span.

LANGUAGE: javascript
CODE:
Sentry.withActiveSpan(parentSpan, () => {
  Sentry.startSpan({ name: "my-span" }, (span) => {
    // span will be a direct child of parentSpan
  });
});

----------------------------------------

TITLE: Initializing SentryFlutter with Breadcrumb Filter in Dart
DESCRIPTION: Sets up SentryFlutter initialization with a custom beforeBreadcrumb callback that filters out breadcrumbs when the hint is of type MyHint. The callback returns null to drop the breadcrumb when the condition is met, otherwise returns the original crumb.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.beforeBreadcrumb = (breadcrumb, hint) {
    return hint is MyHint ? null : crumb;
  };
});

----------------------------------------

TITLE: Adding Type-Specific Exception Filter in C#
DESCRIPTION: Demonstrates how to configure Sentry to filter out specific exception types automatically.

LANGUAGE: csharp
CODE:
options.AddExceptionFilterForType<MyCustomException>();

----------------------------------------

TITLE: Setting Tags with Hashed Sensitive Data in Sentry
DESCRIPTION: This snippet demonstrates how to set a tag with hashed sensitive information instead of sending it in plaintext. This allows for correlation within internal systems while keeping the data confidential from Sentry.

LANGUAGE: javascript
CODE:
Sentry.setTag("email", hash(user.email));

----------------------------------------

TITLE: Emitting a Gauge Metric in Java and Kotlin
DESCRIPTION: This snippet shows how to emit a gauge metric in Java and Kotlin. It includes setting a key, value, measurement unit, and tags for the metric.

LANGUAGE: Java
CODE:
final Map<String, String> tags = new HashMap<>();
tags.put("page", "/home");

Sentry.metrics().gauge(
    "page_load",
    15.0,
    MeasurementUnit.Duration.MILLISECOND,
    tags);

LANGUAGE: Kotlin
CODE:
Sentry.metrics().gauge(
    "page_load",
    15.0,
    MeasurementUnit.Duration.MILLISECOND,
    mapOf(
        "page" to "/home"
    )
)

----------------------------------------

TITLE: Debug Level Configuration
DESCRIPTION: Available diagnostic logging levels for SDK: debug, info, warning, error, and fatal.

LANGUAGE: plaintext
CODE:
debug: Most verbose mode
info: Informational messages
warning: Warning messages
error: SDK internal errors
fatal: Critical errors only

----------------------------------------

TITLE: Configuring View Hierarchy with Privacy Settings in Objective-C
DESCRIPTION: Demonstrates enabling view hierarchy attachments and disabling accessibility identifier reporting in Objective-C

LANGUAGE: objective-c
CODE:
@import Sentry;
[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
   options.attachViewHierarchy = YES;
   options.reportAccessibilityIdentifier = NO;
}];

----------------------------------------

TITLE: Forcing Transaction Creation in JavaScript
DESCRIPTION: This example demonstrates how to force the creation of a transaction by setting the forceTransaction option to true when starting a span.

LANGUAGE: javascript
CODE:
const transaction = Sentry.startInactiveSpan({
  name: "transaction",
  forceTransaction: true,
});

----------------------------------------

TITLE: Installing Sentry SDK with Starlite Support
DESCRIPTION: Command to install sentry-sdk with Starlite integration and uvicorn server dependencies using pip.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[starlite]' uvicorn

----------------------------------------

TITLE: Configuring iOS React Native Bundle Script
DESCRIPTION: Modified iOS build phase script to enable Sentry source map upload functionality.

LANGUAGE: bash
CODE:
set -e

WITH_ENVIRONMENT="../node_modules/react-native/scripts/xcode/with-environment.sh"
REACT_NATIVE_XCODE="../node_modules/react-native/scripts/react-native-xcode.sh"
SENTRY_XCODE="../node_modules/@sentry/react-native/scripts/sentry-xcode.sh"
BUNDLE_REACT_NATIVE="/bin/sh $SENTRY_XCODE $REACT_NATIVE_XCODE"

# RN 0.69+
/bin/sh -c "$WITH_ENVIRONMENT \"$BUNDLE_REACT_NATIVE\""

----------------------------------------

TITLE: Skipping ActiveJob Reporting for Specific Adapters in Sentry
DESCRIPTION: This configuration allows you to specify ActiveJob adapters for which Sentry should skip event reporting. It uses the 'rails.skippable_job_adapters' option to list the adapters to be skipped.

LANGUAGE: ruby
CODE:
config.rails.skippable_job_adapters = ["ActiveJob::QueueAdapters::MyAdapter"]

----------------------------------------

TITLE: Verifying Sentry Setup with Test Error
DESCRIPTION: Test code snippet to verify Sentry error capturing functionality.

LANGUAGE: javascript
CODE:
setTimeout(() => {
  throw new Error();
});

----------------------------------------

TITLE: Setting Include Paths in Sentry Go SDK
DESCRIPTION: Specifies a list of string prefixes of module names that belong to the app. This helps the SDK determine whether to mark a frame as user code or external code.

LANGUAGE: go
CODE:
raven.SetIncludePaths([]string{"/some/path", "other/path"})

----------------------------------------

TITLE: Setting Release Version in Unity SDK
DESCRIPTION: Configure the Sentry SDK to include release version information when initializing. This allows for tracking issues across different releases and environments.

LANGUAGE: csharp
CODE:
<PlatformContent includePath="set-release" notateUnsupported />

----------------------------------------

TITLE: CDN Installation
DESCRIPTION: Standalone CDN installation snippet for Raven.js without plugins.

LANGUAGE: html
CODE:
<script
  src="https://cdn.ravenjs.com/3.26.4/raven.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Setting Uniform Transaction Sample Rate in Sentry SDK (JavaScript)
DESCRIPTION: Shows how to set a uniform sample rate for transaction events in the Sentry SDK. This example sets the rate to 0.2, meaning 20% of transactions will be sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // To set a uniform sample rate
  tracesSampleRate: 0.2,
});

----------------------------------------

TITLE: Configuring Tree Shaking with Rollup
DESCRIPTION: Example of using Rollup's replace plugin to tree shake Sentry debug code in Rollup bundles.

LANGUAGE: javascript
CODE:
import replace from "@rollup/plugin-replace";
import { terser } from "rollup-plugin-terser";

export default {
  // ... other options
  treeshake: "smallest", // recommended for best tree shaking results
  plugins: [
    replace({
      __SENTRY_DEBUG__: false,
      __SENTRY_TRACING__: false,
      __RRWEB_EXCLUDE_IFRAME__: true,
      __RRWEB_EXCLUDE_SHADOW_DOM__: true,
      __SENTRY_EXCLUDE_REPLAY_WORKER__: true,
    }),
    // ... other plugins (best placed after)
  ],
};

----------------------------------------

TITLE: Configuring StatsD Metrics for Relay
DESCRIPTION: YAML configuration for enabling StatsD metrics reporting in Relay, Sentry's data ingestion service.

LANGUAGE: yaml
CODE:
metrics:
  statsd: "100.100.123.123:8125"
  # prefix: "sentry.relay"
  # sample_rate: 1.0
  # periodic_secs: 5

----------------------------------------

TITLE: Adding Sentry Dependency for Spring 5 (Maven)
DESCRIPTION: This snippet shows how to add the Sentry dependency for Spring 5 using Maven build tool.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-spring</artifactId>
    <version>{{@inject packages.version('sentry.java.spring', '4.2.0') }}</version>
</dependency>

----------------------------------------

TITLE: Defining generateSentryErrorsFromOtelSpan Function in TypeScript
DESCRIPTION: This function generates Sentry errors from OpenTelemetry span exception events, capturing the error details and attaching relevant context.

LANGUAGE: typescript
CODE:
function generateSentryErrorsFromOtelSpan(otelSpan) {
  otelSpan.events.forEach(event => {
    // Only convert exception events to Sentry errors.
    if (event.name !=== 'exception') {
      return;
    }

    const attributes = event.attributes;

    const message = attributes[SemanticAttributes.EXCEPTION_MESSAGE];
    const syntheticError = new Error(message);
    syntheticError.stack = attributes[SemanticAttributes.EXCEPTION_STACKTRACE];
    syntheticError.name = attributes[SemanticAttributes.EXCEPTION_TYPE];

    Sentry.captureException(syntheticError, {
      contexts: {
        otel: {
          attributes: otelSpan.attributes,
          resource: otelSpan.resource.attributes,
        },
        trace: {
          trace_id: otelSpan.spanContext().traceId,
          span_id: otelSpan.spanContext().spanId,
          parent_span_id: otelSpan.parentSpanId,
        },
      },
    });
  });
}

----------------------------------------

TITLE: Emitting a Set Metric in Sentry
DESCRIPTION: This snippet demonstrates how to emit a set metric. It records a unique user view with a custom unit and tag.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.metrics
    .set(key: "user_view",
          value: "jane",
          unit: MeasurementUnit(unit: "username"),
          tags: ["screen": "login"]
    )

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK.metrics
    setWithKey :@"user_view"
    value: @"jane"
    unit: [[SentryMeasurementUnit alloc] initWithUnit:@"username"]
    tags: @{ @"screen" : @"login" }
];

----------------------------------------

TITLE: Basic Raven.js Integration with CDN
DESCRIPTION: Example showing the basic integration of Raven.js using CDN, demonstrating proper script loading order with jQuery dependency.

LANGUAGE: html
CODE:
<script src="jquery.js"></script>
<script
  src="https://cdn.ravenjs.com/3.26.4/raven.min.js"
  crossorigin="anonymous"
></script>
<script>
  Raven.config("___PUBLIC_DSN___").install();
</script>
<script src="app.js"></script>

----------------------------------------

TITLE: Importing Breadcrumbs Integration in Sentry for Deno
DESCRIPTION: Shows how to import the breadcrumbs integration in Sentry for Deno. This integration is enabled by default and can be customized.

LANGUAGE: javascript
CODE:
Sentry.breadcrumbsIntegration

----------------------------------------

TITLE: Frontend Distribution Metrics in JavaScript
DESCRIPTION: Implementation examples of distribution metrics for measuring timing and payload sizes in frontend applications using Sentry's JavaScript SDK.

LANGUAGE: JavaScript
CODE:
Sentry.metrics.distribution("login.time_to_finish_form", 14.3, {
   tags: { subpage: "signup" },
   unit: "second"
});

LANGUAGE: JavaScript
CODE:
Sentry.metrics.distribution("component_load_time", 15.0, {
   tags: { type: "important" },
   unit: "millisecond"
});

LANGUAGE: JavaScript
CODE:
Sentry.metrics.distribution("api_request_payload", 136.3, {
    tags: { api_name: "maps_provider", subpage: "signup" },
    unit: "kilobyte"
});

----------------------------------------

TITLE: Configuring Sentry Loggers in PHP
DESCRIPTION: This snippet demonstrates two ways to configure the logger for Sentry in a PHP application. It shows how to set up logging to a file and to stdout using Sentry's built-in logger classes.

LANGUAGE: PHP
CODE:
// This logs messages to the provided file path
'logger' => new \Sentry\Logger\DebugFileLogger(filePath: storage_path('logs/sentry.log')),

// This logs messages to stdout
'logger' => new \Sentry\Logger\DebugStdOutLogger(),

----------------------------------------

TITLE: Implementing BeforeSendCallback in Java
DESCRIPTION: Java implementation of BeforeSendCallback interface that filters Sentry events based on a hint value. The callback returns null to discard events when a specific hint key is present, otherwise passes the event through unchanged.

LANGUAGE: java
CODE:
import io.sentry.SentryEvent;
import io.sentry.SentryOptions;
import io.sentry.Hint
import org.springframework.stereotype.Component;

@Component
public class CustomBeforeSendCallback implements SentryOptions.BeforeSendCallback {
  @Override
  public SentryEvent execute(SentryEvent event, Hint hint) {
    if (hint.get("my-hint-key") != null) {
      return null;
    } else {
      return event;
    }
  }
}

----------------------------------------

TITLE: Verifying Sentry WSGI Integration
DESCRIPTION: Example WSGI application that demonstrates error tracking and transaction creation. Includes a deliberate error to verify Sentry's error capturing functionality.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.wsgi import SentryWsgiMiddleware

sentry_sdk.init(...)  # same as above

def app(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/plain')])
    response_body = 'Hello World'
    1 / 0  # this raises an error
    return [response_body.encode()]

app = SentryWsgiMiddleware(app)

# Run the application in a mini WSGI server.
from wsgiref.simple_server import make_server
make_server('', 8000, app).serve_forever()

----------------------------------------

TITLE: Installing Sentry React Native SDK
DESCRIPTION: Commands to install the Sentry React Native SDK package using different package managers.

LANGUAGE: bash
CODE:
npm install @sentry/react-native --save

LANGUAGE: bash
CODE:
yarn add @sentry/react-native

LANGUAGE: bash
CODE:
pnpm add @sentry/react-native

----------------------------------------

TITLE: Configuring HttpClient Integration Options in JavaScript
DESCRIPTION: Demonstrates the available options for configuring the HttpClient integration, including failedRequestStatusCodes, failedRequestTargets, and sendDefaultPii.

LANGUAGE: javascript
CODE:
{
  failedRequestStatusCodes: [[500, 599]],
  failedRequestTargets: [/.*/],
  sendDefaultPii: true // Note: This option is set in the root Sentry.init({})
}

----------------------------------------

TITLE: Configuring Sentry Provider and Alias in Laravel
DESCRIPTION: PHP code to add Sentry service provider and alias to the Laravel config/app.php file for versions 5.4 and earlier.

LANGUAGE: php
CODE:
'providers' => array(
    // ...
    Sentry\SentryLaravel\SentryLaravelServiceProvider::class,
)

'aliases' => array(
    // ...
    'Sentry' => Sentry\SentryLaravel\SentryFacade::class,
)

----------------------------------------

TITLE: Configuring Sentry Scope with User Email in Rust
DESCRIPTION: This code configures the Sentry scope by setting user information. It specifically sets the user's email address while leaving other user fields as default. This is useful for associating errors or events with specific users in Sentry.

LANGUAGE: rust
CODE:
sentry::configure_scope(|scope| {
    scope.set_user(Some(sentry::User {
        email: Some("jane.doe@example.com".to_owned()),
        ..Default::default()
    }));
});

----------------------------------------

TITLE: Installing Sentry Browser SDK via Package Managers
DESCRIPTION: Commands for installing the Sentry Browser SDK using different package managers (npm, yarn, pnpm). This allows integration of Sentry into projects using modern JavaScript build tools.

LANGUAGE: bash
CODE:
npm install @sentry/browser --save

LANGUAGE: bash
CODE:
yarn add @sentry/browser

LANGUAGE: bash
CODE:
pnpm add @sentry/browser

----------------------------------------

TITLE: Capturing Errors and Messages in Android SDK
DESCRIPTION: These methods are used to manually capture events in Sentry's Android SDK. They perform complex operations like capturing stack trace information and should be used judiciously to avoid performance impact.

LANGUAGE: java
CODE:
captureError

LANGUAGE: java
CODE:
captureMessage

----------------------------------------

TITLE: Adding an Integration to Sentry SDK After Initialization in React Native
DESCRIPTION: This snippet shows how to add an integration (dedupeIntegration) after the Sentry SDK has been initialized. This method is useful for conditionally adding integrations or loading them later in the application lifecycle.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.init({
  integrations: [],
});

Sentry.addIntegration(Sentry.dedupeIntegration());

----------------------------------------

TITLE: Sending Raw Stored Event with Sentry CLI
DESCRIPTION: Shows how to send a stored event JSON file without validation using the --raw flag.

LANGUAGE: bash
CODE:
sentry-cli send-event --raw ./events/20211029150006.json

----------------------------------------

TITLE: Linking Errors with Transactions and Spans in Sentry Native SDK (C)
DESCRIPTION: This code snippet demonstrates how to create a transaction, bind it to the scope, capture an error, and link it to the transaction using the Sentry Native SDK. It shows the process of creating a transaction context, starting a transaction, setting the span, capturing an error event, and finishing the transaction.

LANGUAGE: c
CODE:
sentry_transaction_context_t *tx_ctx = sentry_transaction_context_new(
    "checkout",
    "perform-checkout"
);
sentry_transaction_t *tx = sentry_transaction_start(tx_ctx, sentry_value_new_null());

// Bind the transaction / span to the scope:
sentry_set_span(tx);

// Errors captured after the line above will be linked to the transaction
sentry_value_t exc = sentry_value_new_exception(
    "ParseIntError",
    "invalid digit found in string"
);

sentry_value_t event = sentry_value_new_event();
sentry_event_add_exception(event, exc);
sentry_capture_event(event);

sentry_transaction_finish(tx);

----------------------------------------

TITLE: Installing Sentry Dart SDK via pubspec.yaml
DESCRIPTION: This snippet shows how to add the Sentry Dart SDK as a dependency in the pubspec.yaml file. It specifies the version of the SDK to be used.

LANGUAGE: yaml
CODE:
dependencies:
  sentry: ^{{@inject packages.version('sentry.dart') }}

----------------------------------------

TITLE: Configuring Node.js Session Tracking in Sentry
DESCRIPTION: Shows how to disable automatic session tracking for incoming requests in Node.js environments by setting trackIncomingRequestsAsSessions to false in the httpIntegration configuration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  integrations: [httpIntegration({ trackIncomingRequestsAsSessions: false })],
});

----------------------------------------

TITLE: Starting Sentry Transaction for HTTP Request Monitoring
DESCRIPTION: Creates a new Sentry transaction for monitoring an HTTP GET request to the /search endpoint. Uses the Start-SentryTransaction cmdlet with forced sampling enabled to ensure the transaction is recorded.

LANGUAGE: powershell
CODE:
Start-SentryTransaction "GET /search" "http" -ForceSampled

----------------------------------------

TITLE: Updating Scriptable Object Base Classes for Sentry Unity Configuration
DESCRIPTION: Update the base classes for Scriptable Objects used in programmatic configuration of the Sentry Unity SDK.

LANGUAGE: csharp
CODE:
// Old:
// Sentry.Unity.ScriptableOptionsConfiguration
// Sentry.Unity.Editor.ScriptableOptionsConfiguration

// New:
SentryRuntimeOptionsConfiguration
SentryBuildtimeOptionsConfiguration

----------------------------------------

TITLE: Enabling Screenshot Capture in Sentry Unity SDK
DESCRIPTION: This code snippet demonstrates how to programmatically enable screenshot capture in the Sentry Unity SDK. It sets the AttachScreenshot option to true, which will cause Sentry to capture and attach a screenshot when an error occurs.

LANGUAGE: csharp
CODE:
options.AttachScreenshot = true;

----------------------------------------

TITLE: Configuring TouchEventBoundary in Sentry 5.x
DESCRIPTION: Example showing how to configure TouchEventBoundary with accessibilityLabel in Sentry.wrap

LANGUAGE: javascript
CODE:
Sentry.wrap(App, {
  touchEventBoundaryProps: { labelName: "accessibilityLabel" },
});

----------------------------------------

TITLE: React Component Inclusion
DESCRIPTION: Inclusion of a PageGrid component that likely handles the layout of configuration options.

LANGUAGE: jsx
CODE:
<PageGrid />

----------------------------------------

TITLE: Configuring SentryApolloInterceptor in Kotlin
DESCRIPTION: This code shows how to add the SentryApolloInterceptor to the Apollo client builder in Kotlin.

LANGUAGE: kotlin
CODE:
import com.apollographql.apollo.ApolloClient
import io.sentry.apollo.SentryApolloInterceptor

val apollo = ApolloClient.builder()
    .serverUrl("https://your-api-host/")
    .addApplicationInterceptor(SentryApolloInterceptor())
    .build()

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Sample Rate in Dart
DESCRIPTION: This snippet shows how to initialize the Sentry SDK for Flutter and set a custom sample rate. It captures only 25% of events by setting the sampleRate option to 0.25.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  // Capture only 25% of events
  options.sampleRate = 0.25;
});

----------------------------------------

TITLE: Retrieving Sentry Transaction from HTTP Context in Go
DESCRIPTION: Shows how to retrieve the current Sentry transaction from an HTTP request context and set a tag using cookie data. Uses sentry.TransactionFromContext to access the root span of the current transaction, which returns nil if no transaction is active.

LANGUAGE: go
CODE:
http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
    ctx := r.Context()
    transaction := sentry.TransactionFromContext(ctx)
    cookie, _ := r.Cookie("secret")
    transaction.SetTag("secret-cookie", cookie.Value)
    // ...
})

----------------------------------------

TITLE: Implementing Check-In Monitoring with Spring Boot 2
DESCRIPTION: Shows how to implement two-step check-in monitoring for job tracking in Spring Boot 2. Uses the @SentryCheckIn annotation to monitor job execution and detect missed or failed jobs.

LANGUAGE: java
CODE:
import io.sentry.spring.checkin.SentryCheckIn;

@Component
public class CustomJob {

  @Scheduled(fixedRate = 3 * 60 * 1000L)
  @SentryCheckIn("<monitor-slug>") // 👈
  void execute() throws InterruptedException {
    // your task code
  }
}

----------------------------------------

TITLE: JSON Representation of Asset Span
DESCRIPTION: An example JSON object representing the span created for a script asset. It includes the required and recommended data properties for asset spans, such as content length, transfer size, and render blocking status.

LANGUAGE: json
CODE:
{
  "description": "https://cdn.com/main.hash123.js",
  "op": "resource.script",
  "data": {
    "http.decoded_response_content_length": 123,
    "http.response_content_length": 123,
    "http.response_transfer_size": 123,
    "resource.render_blocking_status": "blocking",
    "server.address": "cdn.com",
    ... other span properties
  }
}

----------------------------------------

TITLE: Configuring Sentry Logger Handler in Elixir Configuration
DESCRIPTION: Sets up the Sentry logger handler with metadata and rate limiting configuration in the application's production configuration file.

LANGUAGE: elixir
CODE:
config :my_app, :logger, [
  {:handler, :my_sentry_handler, Sentry.LoggerHandler, %{
    config: %{
      metadata: [:file, :line],
      rate_limiting: [max_events: 10, interval: _1_second = 1_000],
      capture_log_messages: true
    }
  }}
]

----------------------------------------

TITLE: Using Sentry Hub in Fiber Middleware and Handlers in Go
DESCRIPTION: This example demonstrates how to use the Sentry Hub within Fiber middleware and route handlers, including setting tags, capturing messages, and handling panics.

LANGUAGE: go
CODE:
func enhanceSentryEvent := func(ctx *fiber.Ctx) error {
	if hub := sentryfiber.GetHubFromContext(ctx); hub != nil {
		hub.Scope().SetTag("someRandomTag", "maybeYouNeedIt")
	}
	return ctx.Next()
}

// Later in the code
sentryHandler := sentryfiber.New(sentryfiber.Options{
	Repanic:         true,
	WaitForDelivery: true,
})

defaultHandler := func(ctx *fiber.Ctx) error {
	if hub := sentryfiber.GetHubFromContext(ctx); hub != nil {
		hub.WithScope(func(scope *sentry.Scope) {
			scope.SetExtra("unwantedQuery", "someQueryDataMaybe")
			hub.CaptureMessage("User provided unwanted query string, but we recovered just fine")
		})
	}
	return ctx.SendStatus(fiber.StatusOK)
}

fooHandler := enhanceSentryEvent(func(ctx *fiber.Ctx) {
	panic("y tho")
})

app.All("/foo", fooHandler)
app.All("/", defaultHandler)

if err := app.Listen(":3000"); err != nil {
	panic(err)
}

fmt.Println("Listening and serving HTTP on :3000")

----------------------------------------

TITLE: Implementing Custom User Factory for Sentry in Google Cloud Function
DESCRIPTION: C# code showing how to implement and register a custom IUserFactory to customize user data capture in Sentry events.

LANGUAGE: csharp
CODE:
using Google.Cloud.Functions.Hosting;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Sentry.AspNetCore;

[assembly: FunctionsStartup(typeof(UserFactoryStartup))]

public class UserFactoryStartup : FunctionsStartup
{
    public override void ConfigureServices(WebHostBuilderContext context, IServiceCollection services)
    {
        base.ConfigureServices(context, services);
        services.AddSingleton<IUserFactory, MyUserFactory>();
    }
}

----------------------------------------

TITLE: Configuring RestTemplate for Sentry Instrumentation
DESCRIPTION: This snippet shows how to configure a RestTemplate bean using RestTemplateBuilder to enable Sentry instrumentation for outgoing HTTP requests.

LANGUAGE: java
CODE:
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Bean;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.web.client.RestTemplate;

@Configuration
class AppConfig {
  @Bean
  RestTemplate restTemplate(RestTemplateBuilder builder) {
    return builder.build();
  }
}

LANGUAGE: kotlin
CODE:
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Bean
import org.springframework.boot.web.client.RestTemplateBuilder
import org.springframework.web.client.RestTemplate

@Configuration
class AppConfig {
  @Bean
  fun restTemplate(builder: RestTemplateBuilder) = builder.build()
}

----------------------------------------

TITLE: Manual Commit Association Using Sentry CLI
DESCRIPTION: Shows how to manually specify repository and commit range when associating commits with a release.

LANGUAGE: bash
CODE:
sentry-cli releases set-commits --commit "my-repo@from..to" $VERSION

----------------------------------------

TITLE: Implementing Sentry Exception Handling in Kotlin
DESCRIPTION: Kotlin implementation of custom RPC exception handling with Sentry. Provides a more concise MyRpcException class definition and Sentry initialization with custom fingerprinting using Kotlin-specific syntax.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.BeforeSendCallback

class MyRpcException(
  val function: String,
  val httpStatusCode: Int
) : Exception()

SentryAndroid.init(this) { options ->
  options.beforeSend = BeforeSendCallback { event, hint ->
    if (event.throwable is MyRpcException) {
      val exception = event.throwable as MyRpcException
      event.fingerprints = listOf(
        "{{ default }}",
        exception.function,
        exception.httpStatusCode.toString()
      )
    }
    event
  }
}

----------------------------------------

TITLE: Example Room and Sentry Usage in Kotlin
DESCRIPTION: Demonstrates how to use Room with Sentry instrumentation in a Kotlin Android activity, including creating a transaction and performing a database insert operation.

LANGUAGE: kotlin
CODE:
import android.os.Bundle
import android.widget.Button
import androidx.activity.ComponentActivity
import androidx.room.Database
import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.RoomDatabase
import io.sentry.Sentry
import io.sentry.SpanStatus
import kotlinx.coroutines.withContext

@Dao
abstract class TracksDao {
  @Insert(onConflict = OnConflictStrategy.REPLACE)
  abstract suspend fun insert(track: Track): Long
}

@Database(
  entities = [Track::class],
  version = 1,
  exportSchema = false
)
abstract class TracksDatabase : RoomDatabase() {
    abstract fun tracksDao(): TracksDao
}

class EditActivity : ComponentActivity() {
  private lateinit var database: TracksDatabase

  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    database = TODO("initialize database...")

    findViewById<Button>(R.id.editTrack).setOnClickListener {
      val transaction = Sentry.startTransaction(
        name = "Track Interaction",
        operation = "ui.action.edit",
        bindToScope = true
      )

      val newTrack = Track(/* fill in track values */)

      withContext(Dispatchers.IO) {
        database.tracksDao().insert(newTrack)
        transaction.finish(SpanStatus.OK)
      }
    }
  }
}

----------------------------------------

TITLE: Installing Sentry SDK with ARQ Support in Python
DESCRIPTION: This command installs the Sentry SDK from PyPI with the ARQ extra, enabling support for the ARQ job queue system.

LANGUAGE: bash
CODE:
pip install --upgrade "sentry-sdk[arq]"

----------------------------------------

TITLE: Implementing Sampling Function for Sentry Performance Monitoring in Go
DESCRIPTION: This code snippet demonstrates how to configure the traces-sampler option in Sentry's Init function. It shows how to define a sampling function that accepts a sampling context and returns a sampling decision.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
    // ...
    TracesSampler: func(ctx sentry.SamplingContext) float64 {
        // Examine provided context data and return a sample rate between 0 and 1
        if ctx.Span.Name == "healthcheck" {
            return 0.0
        }
        if ctx.Span.Name == "payment" {
            return 1.0
        }
        return 0.5
    },
})

----------------------------------------

TITLE: Implementing Counter Metrics
DESCRIPTION: Shows how to emit counter metrics to track event occurrences.



----------------------------------------

TITLE: Capturing Error Message with Sentry Ruby SDK
DESCRIPTION: Sends a custom error message to Sentry for monitoring and tracking. Uses the capture_message method to log a simple error string that can be tracked in the Sentry dashboard.

LANGUAGE: ruby
CODE:
Sentry.capture_message 'Something went wrong'

----------------------------------------

TITLE: Initializing Statsig with Sentry Integration in Remix
DESCRIPTION: Sets up Sentry error tracking with Statsig feature flag integration in a Remix application. Includes initialization of the Statsig client, configuring Sentry with the Statsig integration, and demonstrating feature flag checking. Requires Statsig SDK key and Sentry DSN.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/remix';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Automatic Installation of sentry-cli using curl
DESCRIPTION: This snippet shows how to automatically download and install the latest version of sentry-cli using curl. It also demonstrates how to pin a specific version for reproducible builds.

LANGUAGE: bash
CODE:
curl -sL https://sentry.io/get-cli/ | sh

LANGUAGE: bash
CODE:
curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION="{{@inject apps.version('sentry-cli') }}" sh

----------------------------------------

TITLE: Configuring Sentry Android Gradle Plugin in Kotlin
DESCRIPTION: Configure the Sentry Android Gradle Plugin options in your app/build.gradle file using Kotlin syntax.

LANGUAGE: kotlin
CODE:
import io.sentry.android.gradle.extensions.InstrumentationFeature

sentry {
    debug.set(false)
    org.set("___ORG_SLUG___")
    projectName.set("___PROJECT_SLUG___")
    authToken.set(System.getenv("SENTRY_AUTH_TOKEN"))
    url = null
    includeProguardMapping.set(true)
    autoUploadProguardMapping.set(true)
    dexguardEnabled.set(false)
    uploadNativeSymbols.set(false)
    autoUploadNativeSymbols.set(true)
    includeNativeSources.set(false)
    includeSourceContext.set(false)
    additionalSourceDirsForSourceContext.set(emptySet())
    tracingInstrumentation {
      enabled.set(true)
      features.set(setOf(InstrumentationFeature.DATABASE, InstrumentationFeature.FILE_IO, InstrumentationFeature.OKHTTP, InstrumentationFeature.COMPOSE))
      logcat {
        enabled.set(true)
        minLevel.set(LogcatLevel.WARNING)
      }
      excludes.set(emptySet())
    }
    autoInstallation {
      enabled.set(true)
      sentryVersion.set("{{@inject packages.version('sentry.java.android', '5.0.0') }}")
    }
    includeDependenciesReport.set(true)
    telemetry.set(true)
}

----------------------------------------

TITLE: Setting Error Sample Rate in Sentry SDK Configuration (Python)
DESCRIPTION: Configure the Sentry SDK to sample 25% of errors by setting the sample_rate option to 0.25.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    # ...

    # Set sample rate to 25%
    sample_rate=0.25,
)

----------------------------------------

TITLE: Adding Sentry Logback Dependency in Gradle
DESCRIPTION: Gradle dependency configuration for including Sentry Logback integration.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-logback:{{@inject packages.version('sentry.java.logback', '4.2.0') }}'

----------------------------------------

TITLE: Initializing Sentry with Pinia Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the Pinia integration. It uses the piniaIntegration function and passes the result of usePinia() to capture Pinia state data.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.piniaIntegration(usePinia())],
});

----------------------------------------

TITLE: Enabling Debug Output for OpenTelemetry in Java Command
DESCRIPTION: Adds a JVM argument to enable debug output for OpenTelemetry when running a Java application.

LANGUAGE: shell
CODE:
-Dotel.javaagent.debug=true

----------------------------------------

TITLE: Secure Source Map Request with X-Sentry-Token
DESCRIPTION: This bash snippet illustrates the HTTP GET request format when accessing source maps with the Security Token option enabled. It includes the X-Sentry-Token header for authentication.

LANGUAGE: bash
CODE:
GET /assets/bundle.min.js
X-Sentry-Token: {token}

----------------------------------------

TITLE: Initializing Sentry with Custom Error Ignoring in Dart
DESCRIPTION: This code initializes Sentry with options to ignore specific errors. It sets up a list of error patterns to be ignored during error reporting, including an exact match and a regex pattern.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.ignoreErrors = ["my-error", "^error-.*\$"];
});

----------------------------------------

TITLE: Configuring Tracing Options in Laravel for Sentry
DESCRIPTION: This snippet provides detailed configuration options for tracing in the Laravel Sentry integration. It includes settings for queue jobs, SQL queries, views, Livewire components, HTTP client requests, cache events, Redis operations, notifications, and more.

LANGUAGE: php
CODE:
"tracing" => [
    // Trace queue jobs as their own transactions (this enables tracing for queue jobs)
    "queue_job_transactions" => env("SENTRY_TRACE_QUEUE_ENABLED", true),

    // Capture queue jobs as spans when executed on the sync driver
    "queue_jobs" => env("SENTRY_TRACE_QUEUE_JOBS_ENABLED", true),

    // Capture SQL queries as spans
    "sql_queries" => env("SENTRY_TRACE_SQL_QUERIES_ENABLED", true),

    // Capture SQL query bindings (parameters) in SQL query spans
    "sql_bindings" => env("SENTRY_TRACE_SQL_BINDINGS_ENABLED", false),

    // Capture where the SQL query originated from on the SQL query spans
    "sql_origin" => env("SENTRY_TRACE_SQL_ORIGIN_ENABLED", true),

    // Define a threshold in milliseconds for SQL queries to resolve their origin
    "sql_origin_threshold_ms" => env("SENTRY_TRACE_SQL_ORIGIN_THRESHOLD_MS", 100),

    // Capture views rendered as spans
    "views" => env("SENTRY_TRACE_VIEWS_ENABLED", true),

    // Capture Livewire components as spans
    "livewire" => env("SENTRY_TRACE_LIVEWIRE_ENABLED", true),

    // Capture HTTP client requests as spans
    "http_client_requests" => env("SENTRY_TRACE_HTTP_CLIENT_REQUESTS_ENABLED", true),

    // Capture Laravel cache events (hits, writes etc.) as spans
    "cache" => env("SENTRY_TRACE_CACHE_ENABLED", true),

    // Capture Redis operations as spans (this enables Redis events in Laravel)
    "redis_commands" => env("SENTRY_TRACE_REDIS_COMMANDS", false),

    // Capture where the Redis command originated from on the Redis command spans
    "redis_origin" => env("SENTRY_TRACE_REDIS_ORIGIN_ENABLED", true),

    // Capture send notifications as spans
    "notifications" => env("SENTRY_TRACE_NOTIFICATIONS_ENABLED", true),

    // Enable tracing for requests without a matching route (404's)
    "missing_routes" => env("SENTRY_TRACE_MISSING_ROUTES_ENABLED", false),

    // Configures if the performance trace should continue after the response has been sent to the user until the application terminates
    // This is required to capture any spans that are created after the response has been sent like queue jobs dispatched using `dispatch(...)->afterResponse()` for example
    "continue_after_response" => env("SENTRY_TRACE_CONTINUE_AFTER_RESPONSE", true),

    // Enable the tracing integrations supplied by Sentry (recommended)
    "default_integrations" => env("SENTRY_TRACE_DEFAULT_INTEGRATIONS_ENABLED", true),
],

----------------------------------------

TITLE: Installing Sentry Remix SDK
DESCRIPTION: Commands to install the Sentry Remix SDK using npm, yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
npm install @sentry/remix --save

LANGUAGE: bash
CODE:
yarn add @sentry/remix

LANGUAGE: bash
CODE:
pnpm add @sentry/remix

----------------------------------------

TITLE: Configuring Sentry Properties
DESCRIPTION: Configuration file containing Sentry organization and project details for authentication.

LANGUAGE: properties
CODE:
defaults.url=https://sentry.io/
defaults.org=___ORG_SLUG___
defaults.project=___PROJECT_SLUG___
auth.token=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Adding User Context to Sentry in PHP
DESCRIPTION: PHP code demonstrating how to add user context to Sentry events. This example adds the user's email to the context data.

LANGUAGE: php
CODE:
$client->user_context(array(
    'email' => $USER->getEmail()
));

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration (Deprecated)
DESCRIPTION: Sets up Sentry error tracking with Unleash feature flag integration using the deprecated unleashClientClass configuration. Shows the older implementation pattern that should be updated.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/svelte';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({unleashClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Capturing Errors with Sentry SDK in JavaScript
DESCRIPTION: Demonstrates how to use the Sentry SDK to capture and report errors. This snippet shows the basic usage of the captureException method.

LANGUAGE: javascript
CODE:
try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Configuring Custom HTTP Status Sampling
DESCRIPTION: Example of custom configuration for the Sanic integration to control transaction sampling based on HTTP status codes

LANGUAGE: python
CODE:
from sanic import Sanic
import sentry_sdk
from sentry_sdk.integrations.asyncio import AsyncioIntegration
from sentry_sdk.integrations.sanic import SanicIntegration

@app.listener("before_server_start")
async def init_sentry(_):
    sentry_sdk.init(
        # ...
        integrations=[
            AsyncioIntegration(),
            SanicIntegration(
                unsampled_statuses=None,
            ),
        ],
    )

----------------------------------------

TITLE: Implementing Data Sampling in Raven.js
DESCRIPTION: This snippet shows how to implement data sampling in Raven.js using the shouldSendCallback setting to only send a percentage of errors.

LANGUAGE: javascript
CODE:
shouldSendCallback: function(data) {
    // only send 10% of errors
    var sampleRate = 10;
    return (Math.random() * 100 <= sampleRate);
}

----------------------------------------

TITLE: Installing Sentry PHP SDK via Composer
DESCRIPTION: Command to install the Sentry PHP SDK using Composer package manager. This is the recommended installation method.

LANGUAGE: bash
CODE:
composer require sentry/sentry "^1.0"

----------------------------------------

TITLE: Configuring and Managing Sentry SDK Shutdown in .NET
DESCRIPTION: The Sentry SDK provides multiple methods for handling shutdown and flushing events. It can wait up to ShutdownTimeout seconds to ensure all captured events are processed. This can happen automatically during normal exit, unhandled exceptions, or when using dependency injection, or manually through explicit disposal or flush calls.

LANGUAGE: csharp
CODE:
// Automatic shutdown via dependency injection
app.UseSentry();
services.AddSentry();

// Manual shutdown options
var sdk = SentrySdk.Init();
sdk.Dispose(); // Optional manual disposal

// Manual flush
SentrySdk.Flush();
SentrySdk.FlushAsync();

----------------------------------------

TITLE: Configuring In-Application Stack Frames in Sentry Java SDK
DESCRIPTION: Shows how to configure in-application stack frames in Sentry using properties files. The new format uses 'in-app-includes' and 'in-app-excludes' instead of 'stacktrace.app.packages'.

LANGUAGE: properties
CODE:
stacktrace.app.packages=com.mycompany,com.other.name

LANGUAGE: properties
CODE:
in-app-includes=com.mycompany,com.other.name

LANGUAGE: properties
CODE:
in-app-excludes=com.packages.to.exclude

----------------------------------------

TITLE: Configuring S3 Backend for Vroom in Docker Compose
DESCRIPTION: Docker Compose configuration to set up S3 or S3-compatible storage for Vroom service, including bucket specification and AWS credentials.

LANGUAGE: yaml
CODE:
services:
  vroom:
    environment:
      # The rest of the environment variables
      SENTRY_BUCKET_PROFILES: "s3://my-bucket?awssdk=v1&region=us-west-1&endpoint=amazonaws.com"
      # For other S3-compatible APIs
      SENTRY_BUCKET_PROFILES: "s3://my-bucket?awssdk=v1&region=any-region&endpoint=minio.yourcompany.com&s3ForcePathStyle=true&disableSSL"
      AWS_ACCESS_KEY: "foobar"
      AWS_SECRET_KEY: "foobar"
      AWS_SESSION_TOKEN: "foobar" # (optional)

----------------------------------------

TITLE: Implementing Check-In Monitoring with Spring Boot 3
DESCRIPTION: Shows how to implement two-step check-in monitoring for job tracking in Spring Boot 3. Uses the @SentryCheckIn annotation to monitor job execution and detect missed or failed jobs.

LANGUAGE: java
CODE:
import io.sentry.spring.jakarta.checkin.SentryCheckIn;

@Component
public class CustomJob {

  @Scheduled(fixedRate = 3 * 60 * 1000L)
  @SentryCheckIn("<monitor-slug>") // 👈
  void execute() throws InterruptedException {
    // your task code
  }
}

----------------------------------------

TITLE: Adding Sentry Dependency for Spring 6 (Gradle)
DESCRIPTION: This snippet demonstrates how to add the Sentry dependency for Spring 6 using Gradle build tool.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-spring-jakarta:{{@inject packages.version('sentry.java.spring.jakarta', '6.7.0') }}'

----------------------------------------

TITLE: Span API Options Interface Definition
DESCRIPTION: Definition of the startSpan function and its options interface for initializing spans with links.

LANGUAGE: typescript
CODE:
function startSpan(options: StartSpanOptions);

interface StartSpanOptions: {
  //... other options (name, attributes, etc)
  links?: Link[];
}

----------------------------------------

TITLE: Installing Sentry.Serilog Package Using Package Manager
DESCRIPTION: Command to install the Sentry.Serilog NuGet package using Package Manager Console.

LANGUAGE: powershell
CODE:
Install-Package Sentry.Serilog -Version {{@inject packages.version('sentry.dotnet.serilog') }}

----------------------------------------

TITLE: Error Object Usage Example
DESCRIPTION: Shows correct and incorrect ways to throw errors in JavaScript

LANGUAGE: javascript
CODE:
throw new Error("broken"); // good
throw "broken"; // bad

----------------------------------------

TITLE: Customizing Recorded Spans
DESCRIPTION: Implement a BeforeSpanCallback to customize or drop recorded spans based on specific conditions.

LANGUAGE: kotlin
CODE:
import io.sentry.ISpan
import io.sentry.okhttp.SentryOkHttpInterceptor
import okhttp3.Request
import okhttp3.Response

class CustomBeforeSpanCallback : SentryOkHttpInterceptor.BeforeSpanCallback {
  override fun execute(span: ISpan, request: Request, response: Response?): ISpan? {
    return if (request.url.toUri().toString().contains("/admin")) {
      null
    } else {
      span
    }
  }
}

LANGUAGE: java
CODE:
import io.sentry.ISpan;
import io.sentry.okhttp.SentryOkHttpInterceptor;
import okhttp3.Request;
import okhttp3.Response;

class CustomBeforeSpanCallback implements SentryOkHttpInterceptor.BeforeSpanCallback {
  public ISpan execute(ISpan span, Request request, Response response) {
    if (request.getUrl().toUri().toString().contains("/admin")) {
      return null;
    } else {
      return span;
    }
  }
}

----------------------------------------

TITLE: Configuring Sentry SDK via F# Code
DESCRIPTION: Demonstrates how to configure the Sentry SDK programmatically in F#. Shows the same configuration options as the C# version but with F#-specific syntax.

LANGUAGE: fsharp
CODE:
LogManager.Configuration.AddSentry(
  fun o ->
    o.Layout <- "${message}"
    o.BreadcrumbLayout <- "${logger}: ${message}"
    o.MinimumBreadcrumbLevel <- LogLevel.Debug
    o.MinimumEventLevel <- LogLevel.Error
    o.Dsn <- DsnSample
    o.AttachStacktrace <- true
    o.SendDefaultPii <- true
    o.IncludeEventDataOnBreadcrumbs <- true
    o.ShutdownTimeoutSeconds <- 5
    o.User <-
      SentryNLogUser(
        Id = "${mdlc:item=id}",
        Username = "${mdlc:item=username}",
        Email = "${mdlc:item=email}",
        IpAddress = "${mdlc:item=ipAddress}",
        Other = [ TargetPropertyWithContext("mood", "joyous") ]
      )
    o.AddTag("logger", "${logger}")
)

----------------------------------------

TITLE: Configuring Sentry in Ruby
DESCRIPTION: This snippet compares the old and new ways of configuring Sentry in Ruby applications.

LANGUAGE: ruby
CODE:
# Old
Raven.configure do |config|
  config.dsn = "DSN"
end

# New
Sentry.init do |config|
  config.dsn = "DSN"

  # Add data like request headers and IP for users, if applicable;
  # see https://docs.sentry.io/platforms/ruby/data-management/data-collected/ for more info
  config.send_default_pii = true
end

----------------------------------------

TITLE: Configuring Sentry Gradle Plugin for Java
DESCRIPTION: This snippet shows how to add the Sentry Gradle plugin to a Java project. The plugin enables auto-installation of the Sentry SDK and integrations.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.jvm.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.12.0') }}"
}

----------------------------------------

TITLE: Configuring Sentry Scope Fingerprint in Dart
DESCRIPTION: This snippet demonstrates how to import the Sentry package and configure the Sentry scope with a custom fingerprint. The fingerprint is set to 'auth-error', which will be used for grouping related errors in the Sentry dashboard.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Sentry.configureScope((scope) => scope.fingerprint = ['auth-error']);

----------------------------------------

TITLE: Implementing BeforeSend Callback
DESCRIPTION: Custom callback implementation to modify Sentry events before they are sent to the server. Only one bean of this type can be registered.

LANGUAGE: java
CODE:
@Component
public class CustomBeforeSendCallback implements SentryOptions.BeforeSendCallback {
  @Override
  public SentryEvent execute(SentryEvent event, Hint hint) {
    // Example: Never send server name in events
    event.setServerName(null);
    return event;
  }
}

LANGUAGE: kotlin
CODE:
@Component
class CustomBeforeSendCallback : SentryOptions.BeforeSendCallback {
  override fun execute(event: SentryEvent, hint: Hint): SentryEvent? {
    // Example: Never send server name in events
    event.serverName = null
    return event
  }
}

----------------------------------------

TITLE: Configuring StatsD Metrics for Snuba in Docker Compose
DESCRIPTION: Docker Compose configuration for enabling StatsD metrics reporting in Snuba, Sentry's time-series storage service.

LANGUAGE: yaml
CODE:
x-snuba-defaults: &snuba_defaults
  <<: *restart_policy
  depends_on:
    clickhouse:
      <<: *depends_on-healthy
    kafka:
      <<: *depends_on-healthy
    redis:
      <<: *depends_on-healthy
  image: "$SNUBA_IMAGE"
  environment:
    SNUBA_SETTINGS: self_hosted
    CLICKHOUSE_HOST: clickhouse
    DEFAULT_BROKERS: "kafka:9092"
    REDIS_HOST: redis
    UWSGI_MAX_REQUESTS: "10000"
    UWSGI_DISABLE_LOGGING: "true"
    SENTRY_EVENT_RETENTION_DAYS:
    SNUBA_STATSD_HOST: "100.100.123.123"
    SNUBA_STATSD_PORT: 8125

----------------------------------------

TITLE: Manual Installation of Sentry Android Fragment Dependency
DESCRIPTION: Add the sentry-android-fragment dependency to your project using Gradle. This is necessary for manual initialization of the SDK.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-android:{{@inject packages.version('sentry.java.android', '5.1.0') }}'
implementation 'io.sentry:sentry-android-fragment:{{@inject packages.version('sentry.java.android.fragment', '5.1.0') }}'

----------------------------------------

TITLE: Using Raven Context with Context Manager in Python
DESCRIPTION: Shows how to use the Raven context as a context manager using the 'with' statement. This approach automatically handles activation and deactivation of the context.

LANGUAGE: python
CODE:
def handle_request(request):
    with client.context:
        client.context.merge({'user': {
            'email': request.user.email
        }})
        try:
            ...
        finally:
            client.context.clear()

----------------------------------------

TITLE: Installing Sentry Reactor Integration with Gradle
DESCRIPTION: Add the Sentry Reactor dependency to your Gradle build file. This snippet shows how to include the Sentry Reactor integration in your project using Gradle.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-reactor:{{@inject packages.version('sentry.java.reactor', '8.3.0') }}'

----------------------------------------

TITLE: Creating Analytics Events in Python
DESCRIPTION: Demonstrates how to create and register analytics event classes in Python for backend tracking. The events include attributes for tracking specific data points.

LANGUAGE: python
CODE:
from __future__ import absolute_import, print_function

from sentry import analytics

class ExampleTutorialCreatedEvent(analytics.Event):
  type = 'example_tutorial.created'

   attributes = (
      analytics.Attribute('id'),
      analytics.Attribute('user_id'),
  )

class ExampleTutorialDeletedEvent(analytics.Event):
  type = 'example_tutorial.deleted'

   attributes = (
      analytics.Attribute('id'),
      analytics.Attribute('user_id'),
  )

analytics.register(ExampleTutorialCreatedEvent)
analytics.register(ExampleTutorialDeletedEvent)

----------------------------------------

TITLE: Installing Sentry Browser SDK
DESCRIPTION: Package installation commands for @sentry/browser using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/browser --save

LANGUAGE: bash
CODE:
yarn add @sentry/browser

LANGUAGE: bash
CODE:
pnpm add @sentry/browser

----------------------------------------

TITLE: Configuring Exception Reporting in Rails for Sentry
DESCRIPTION: This snippet shows how to disable reporting of exceptions rescued by Rails middlewares. It sets the 'rails.report_rescued_exceptions' configuration option to false.

LANGUAGE: ruby
CODE:
config.rails.report_rescued_exceptions

----------------------------------------

TITLE: Disabling Automatic Breadcrumbs via Android Manifest
DESCRIPTION: XML configuration showing how to disable various automatic breadcrumb collection features through Android manifest meta-data entries.

LANGUAGE: xml
CODE:
<application>
    <!-- To disable the activity lifecycle breadcrumbs integration -->
    <meta-data android:name="io.sentry.breadcrumbs.activity-lifecycle" android:value="false" />

    <!-- To disable the app lifecycle breadcrumbs integration -->
    <meta-data android:name="io.sentry.breadcrumbs.app-lifecycle" android:value="false" />

    <!-- To disable the system events breadcrumbs integration -->
    <meta-data android:name="io.sentry.breadcrumbs.system-events" android:value="false" />

    <!-- To disable the app components breadcrumbs integration -->
    <meta-data android:name="io.sentry.breadcrumbs.app-components" android:value="false" />

    <!-- To disable the user interaction breadcrumbs integration -->
    <meta-data android:name="io.sentry.breadcrumbs.user-interaction" android:value="false" />
</application>

----------------------------------------

TITLE: Configuring Asynchronous Sentry Scope in F#
DESCRIPTION: F# implementation of asynchronous Sentry scope configuration using TaskBuilder.fs. Shows how to load user information asynchronously from a database context.

LANGUAGE: fsharp
CODE:
// Uses TaskBuilder.fs (https://www.nuget.org/packages/TaskBuilder.fs)
SentrySdk.ConfigureScopeAsync (
  fun scope ->
    task {
        let! user = ctx.Users.FindAsync(id)
        scope.User <- user
    })

----------------------------------------

TITLE: Filtering Transactions with tracesSampler in JavaScript
DESCRIPTION: Demonstrates how to use the tracesSampler option to filter out certain transactions based on their name or other properties.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  tracesSampler: samplingContext => {
    if (samplingContext.transactionContext.name === "health_check") {
      // Drop this transaction, by setting its sample rate to 0%
      return 0;
    }
    // Default sample rate for all other transactions (replaces tracesSampleRate)
    return 0.1;
  },
});

----------------------------------------

TITLE: Implementing Sentry Error Report Dialog in Rails
DESCRIPTION: Template code for initializing Sentry and displaying the error report dialog when a Sentry event ID is present in the request environment.

LANGUAGE: ERB
CODE:
<% sentry_id = request.env["sentry.error_event_id"] %>
<% if sentry_id.present? %>
<script>
  Sentry.init({ dsn: "___PUBLIC_DSN___" });
  Sentry.showReportDialog({ eventId: "<%= sentry_id %>" });
</script>
<% end %>

----------------------------------------

TITLE: Initialize Sentry SDK in Java
DESCRIPTION: Configures Sentry SDK initialization in Java with a sample rate of 25%. Uses lambda expression to set sampling configuration options.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setSampleRate(0.25);
});

----------------------------------------

TITLE: Setting Scoped Tags in Sentry Ruby SDK
DESCRIPTION: Demonstrates how to use Sentry's scope management to temporarily set tags for captured messages. The scope block allows adding contextual information that will only be included in captures within that block.

LANGUAGE: ruby
CODE:
Sentry.with_scope do |scope|
  scope.set_tags(my_tag: "my value")
  Sentry.capture_message("test") # will be tagged with `my_tag: "my value"`
end

Sentry.capture_message("test 2") # will not be tagged

----------------------------------------

TITLE: Basic Sentry Client Configuration
DESCRIPTION: Basic initialization of the Sentry client with DSN configuration options.

LANGUAGE: python
CODE:
from raven import Client

# Read configuration from the ``SENTRY_DSN`` environment variable
client = Client()

# Manually specify a DSN
client = Client('___DSN___')

----------------------------------------

TITLE: Configuring Sentry Session Replay
DESCRIPTION: Initial setup for Sentry SDK with Session Replay configuration including sample rates and experimental view renderer.

LANGUAGE: swift
CODE:
SentrySDK.start(configureOptions: { options in
  options.dsn = "___PUBLIC_DSN___"
  options.debug = true

  options.sessionReplay.onErrorSampleRate = 1.0
  options.sessionReplay.sessionSampleRate = 0.1

  // We recommend the ~5x more performant experimental view renderer
  options.sessionReplay.enableExperimentalViewRenderer = true
})

----------------------------------------

TITLE: Emitting a Set Metric in Laravel with Sentry
DESCRIPTION: This snippet illustrates how to emit a set metric in Laravel with Sentry. It demonstrates tracking unique user views on a page with a custom unit and tags.

LANGUAGE: php
CODE:
\Sentry\metrics()->set(
    key: 'user_view',
    value: 'jane',
    unit: \Sentry\Metrics\MetricsUnit::custom('username'),
    tags: [
        'page' => '/home',
    ],
)

----------------------------------------

TITLE: Configuring Sentry File Logger in PHP
DESCRIPTION: Initializes Sentry with a file-based logger that writes messages to a specified file path. Uses the DebugFileLogger class with a file path constructed from the ROOT constant.

LANGUAGE: php
CODE:
Sentry\init([
    'logger' => new \Sentry\Logger\DebugFileLogger(filePath: ROOT . DS . 'sentry.log'),
]);

----------------------------------------

TITLE: Disabling ANR Detection in Android Manifest
DESCRIPTION: This snippet shows how to disable ANR detection by setting a meta-data flag in the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<application>
    <meta-data android:name="io.sentry.anr.enable" android:value="false" />
</application>

----------------------------------------

TITLE: Installing Sentry Flutter SDK via NPX
DESCRIPTION: Command to install Sentry Wizard using NPX for Flutter integration.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i flutter

----------------------------------------

TITLE: Creating Sentry File Attachment from Path in Dart
DESCRIPTION: Shows how to create a Sentry attachment by specifying a file path using IoSentryAttachment. Note that this functionality is not available on web platforms and requires the sentry_io.dart package.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry_io.dart';

final attachment = IoSentryAttachment.fromPath("your/path/file.log");

----------------------------------------

TITLE: Adding Sentry BOM and Dependencies in Gradle
DESCRIPTION: This snippet shows how to add the Sentry BOM and declare dependencies without versions in a Gradle build.gradle file. It's applicable for Gradle 5.0 or higher.

LANGUAGE: groovy
CODE:
implementation platform('io.sentry:sentry-bom:{{@inject packages.version('sentry.java.bom', '5.1.0') }}') //import bom
implementation('io.sentry:sentry') //no version specified
implementation('io.sentry:sentry-logback') //no version specified

----------------------------------------

TITLE: Injecting Tracing Information into Outgoing HTTP Requests in Python
DESCRIPTION: This code snippet shows how to manually generate and add tracing information to outgoing HTTP requests using the Sentry SDK's get_traceparent() and get_baggage() functions. This is useful when not using supported HTTP libraries that automatically add this information.

LANGUAGE: python
CODE:
import sentry_sdk
from my_project import make_an_outgoing_request

headers = {}
headers["sentry-trace"] = sentry_sdk.get_traceparent()
headers["baggage"] = sentry_sdk.get_baggage()

make_an_outgoing_request(to="https://example.com", headers=headers)

----------------------------------------

TITLE: Project Slug Configuration
DESCRIPTION: Configuration for setting the project's short name as displayed in Sentry.

LANGUAGE: json
CODE:
{
  "slug": "my-project"
}

----------------------------------------

TITLE: Configuring Anthropic Integration Options in Sentry
DESCRIPTION: Example showing how to configure the AnthropicIntegration with custom options, specifically demonstrating how to exclude prompts from being sent to Sentry even when send_default_pii is enabled.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.anthropic import AnthropicIntegration

sentry_sdk.init(
    # same options as above
    send_default_pii=True,
    integrations=[
        AnthropicIntegration(
            include_prompts=False, # Exclude prompts from being sent to Sentry, despite send_default_pii=True
        ),
    ],
)

----------------------------------------

TITLE: Running the GraphQL Server with Uvicorn
DESCRIPTION: Start the GraphQL web server using Uvicorn, which will serve the application on localhost:8000.

LANGUAGE: bash
CODE:
uvicorn app:app

----------------------------------------

TITLE: Emitting a Gauge Metric in Flutter with Sentry
DESCRIPTION: This snippet shows how to emit a gauge metric using Sentry in a Flutter app. It measures the load time of a page in milliseconds.

LANGUAGE: dart
CODE:
Sentry.metrics().gauge(
    'page_load', // key
    value: 15,
    unit: DurationSentryMeasurementUnit.milliSecond,
    tags: {'page': '/home'},
);

----------------------------------------

TITLE: Initializing Sentry SDK in Objective-C
DESCRIPTION: This snippet shows how to initialize the Sentry SDK in an Objective-C iOS application. It imports the Sentry module and starts the SDK using a configuration block, setting the tracesSampleRate to 0.2 for performance monitoring.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions * options) {
    options.tracesSampleRate = @0.2;
}];

----------------------------------------

TITLE: Setting Uniform Transaction Sample Rate in Sentry SDK
DESCRIPTION: Configure the SDK to send a representative sample of transactions to Sentry by setting the traces-sample-rate option. This example sets a 20% sample rate for transactions.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // To set a uniform sample rate
  tracesSampleRate: 0.2
});

----------------------------------------

TITLE: Basic MDC Logging in Kotlin
DESCRIPTION: Kotlin implementation showing how to add extra context data to Sentry events using MDC. Demonstrates setting Environment and OS values that will appear under the MDC tab.

LANGUAGE: kotlin
CODE:
import org.slf4j.MDC

fun logWithExtras() {
  // MDC extras
  MDC.put("Environment", "Development")
  MDC.put("OS", "Linux")

  // This sends an event where the Environment and OS MDC values are set as MDC entries
  logger.error("This is a test")
}

----------------------------------------

TITLE: Adding Exception Filter in C# for Sentry SDK Initialization
DESCRIPTION: This code snippet shows how to add an exception filter for OperationCanceledException during Sentry SDK initialization in C#. It will also filter out derived exceptions like TaskCanceledException.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.AddExceptionFilterForType<OperationCanceledException>();

----------------------------------------

TITLE: Initializing Sentry with Offline Transport in JavaScript
DESCRIPTION: This snippet initializes Sentry for browser-based error tracking with offline support. It imports Sentry, sets the DSN, and configures a browser offline transport using makeFetchTransport.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  transport: Sentry.makeBrowserOfflineTransport(Sentry.makeFetchTransport)
  transportOptions: {
    // see below
  }
})

----------------------------------------

TITLE: Using SentryFileReader and SentryFileWriter in Java
DESCRIPTION: This snippet demonstrates how to use Sentry's instrumented versions of FileReader and FileWriter in Java. It replaces the standard classes with SentryFileReader and SentryFileWriter for improved monitoring and error tracking.

LANGUAGE: java
CODE:
import io.sentry.instrumentation.file.SentryFileReader;
import io.sentry.instrumentation.file.SentryFileWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;

File file1 = new File("file1.txt");
File file2 = new File("file2.txt");
try (FileReader reader = new SentryFileReader(file1)) {
  char[] buffer = new char[1024];
  try (FileWriter writer = new SentryFileWriter(file2, true)) {
    int read;
    while (true) {
      read = reader.read(buffer, 0, buffer.length);
      if (read == -1) {
        break;
      }
      writer.write(buffer, 0, buffer.length);
    }
    writer.flush();
  }
}

----------------------------------------

TITLE: Configuring Specific Integration Preloading
DESCRIPTION: Command showing how to preload specific Sentry integrations using environment variables.

LANGUAGE: bash
CODE:
SENTRY_PRELOAD_INTEGRATIONS="Http,Express" node --require @sentry/node/preload app.js

----------------------------------------

TITLE: Making a GET Request to Sentry API in Bash
DESCRIPTION: This snippet demonstrates how to make a simple GET request to the Sentry API root endpoint using curl. It shows the basic structure of a Sentry API request.

LANGUAGE: bash
CODE:
curl -i https://sentry.io/api/0/

----------------------------------------

TITLE: Importing Sentry SDK for SvelteKit
DESCRIPTION: Imports all exports from the @sentry/sveltekit package using the namespace import syntax. This import allows access to Sentry's error tracking and monitoring functionality specifically optimized for SvelteKit applications.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

----------------------------------------

TITLE: Downloading Sentry OpenTelemetry Agent JAR
DESCRIPTION: This command downloads the latest version of the Sentry OpenTelemetry Agent JAR file from MavenCentral. The version number is dynamically injected into the URL and output filename.

LANGUAGE: bash
CODE:
curl https://repo1.maven.org/maven2/io/sentry/sentry-opentelemetry-agent/{{@inject packages.version('sentry.java.opentelemetry-agent') }}/sentry-opentelemetry-agent-{{@inject packages.version('sentry.java.opentelemetry-agent') }}.jar -o sentry-opentelemetry-agent-{{@inject packages.version('sentry.java.opentelemetry-agent') }}.jar

----------------------------------------

TITLE: Setting Sentry Scope Extra Data in Kotlin
DESCRIPTION: Configures the Sentry scope to add extra context data using key-value pairs in Kotlin. Uses a more concise Kotlin syntax with lambda expression to modify the scope.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.configureScope { scope ->
  scope.setExtra("key", "value")
}

----------------------------------------

TITLE: Setting Feature Complete Profile in Sentry Environment
DESCRIPTION: Configuration setting in .env file to enable the full-featured deployment mode of self-hosted Sentry.

LANGUAGE: bash
CODE:
COMPOSE_PROFILES=feature-complete

----------------------------------------

TITLE: Configuring Sentry Scope with User Information in Dart
DESCRIPTION: This code configures the Sentry scope by setting user information. It uses the Sentry.configureScope method to add a SentryUser object with an ID and email address to the current scope. This allows Sentry to associate subsequent events with this user.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Sentry.configureScope(
  (scope) => scope.setUser(SentryUser(id: '1234', email: 'jane.doe@example.com')),
);

----------------------------------------

TITLE: Sending JSON Data with Query Parameters to Sentry API in Bash
DESCRIPTION: This snippet shows how to send both JSON data in the request body and additional parameters in the query string when making a request to the Sentry API using curl.

LANGUAGE: bash
CODE:
curl -i https://sentry.io/api/0/organizations/acme/projects/1/groups/?status=unresolved \
    -d '{"status": "resolved"}' \
    -H 'Content-Type: application/json'

----------------------------------------

TITLE: Installing Sentry.Log4Net Package with Package Manager
DESCRIPTION: Command to install the Sentry.Log4Net NuGet package using Package Manager Console.

LANGUAGE: powershell
CODE:
Install-Package Sentry.Log4Net -Version {{@inject packages.version('sentry.dotnet.log4net') }}

----------------------------------------

TITLE: Configuring Raven.js Vue plugin
DESCRIPTION: Example of importing and configuring Raven.js with the Vue plugin using ES6 modules.

LANGUAGE: javascript
CODE:
import Vue from "vue";
import Raven from "raven-js";
import RavenVue from "raven-js/plugins/vue";

Raven.config("___PUBLIC_DSN___").addPlugin(RavenVue, Vue).install();

----------------------------------------

TITLE: Manually Instrumenting Server Routes with Sentry in SvelteKit
DESCRIPTION: Wraps a server route (API endpoint) with Sentry instrumentation for tracing and error capturing.

LANGUAGE: javascript
CODE:
import { wrapServerRouteWithSentry } from "@sentry/sveltekit";

export const GET = wrapServerRouteWithSentry(async () => {
  // your endpoint logic
  return new Response("Hello World");
});

----------------------------------------

TITLE: Configuring Raven with Optional Settings in Node.js
DESCRIPTION: This snippet shows how to configure Raven with additional options, such as specifying a release version.

LANGUAGE: javascript
CODE:
Raven.config("___PUBLIC_DSN___", {
  release: "1.3.0",
}).install();

----------------------------------------

TITLE: Enabling Sentry Debug Logging via Environment Variable
DESCRIPTION: Sets the environment variable to enable debug logging for Sentry monitoring

LANGUAGE: shell
CODE:
SENTRY_DEBUG=true

----------------------------------------

TITLE: Using withScope for Temporary Scope Modification in JavaScript
DESCRIPTION: Shows how to use the withScope method to temporarily modify the scope for a specific error capture.

LANGUAGE: javascript
CODE:
Sentry.withScope((scope) => {
  // scope is the current scope inside of this callback!
  scope.setTag("my-tag", "my value");
  // this tag will only be applied to events captured inside of this callback
  // the following event will have the tag:
  Sentry.captureException(new Error("my error"));
});
// this event will not have the tag:
Sentry.captureException(new Error("my other error"));

----------------------------------------

TITLE: Disabling loadStructuredData Feature in Flutter Sentry
DESCRIPTION: Configuration code showing how to disable the loadStructuredData tracing feature in SentryAssetBundle.

LANGUAGE: dart
CODE:
import 'package:sentry_flutter/sentry_flutter.dart';

SentryAssetBundle(enableStructuredDataTracing: false)

----------------------------------------

TITLE: Configuring Cron Monitors in Go with Sentry
DESCRIPTION: Shows how to programmatically create and configure Sentry monitors using either crontab or interval scheduling, including monitor configuration options.

LANGUAGE: go
CODE:
// Create a crontab schedule object (every 10 minutes)
monitorSchedule := sentry.CrontabSchedule("*/10 * * * *")

// Or create an interval schedule object (every 10 minutes)
monitorSchedule := sentry.IntervalSchedule(10, sentry.MonitorScheduleUnitMinute)

// Create a monitor config object
monitorConfig := &sentry.MonitorConfig{
	Schedule:      monitorSchedule,
	MaxRuntime:    2,
	CheckInMargin: 1,
	FailureIssueThreshold: 2,
}

// 🟡 Notify Sentry your job is running:
checkinId := sentry.CaptureCheckIn(
	&sentry.CheckIn{
		MonitorSlug: "<monitor-slug>",
		Status:      sentry.CheckInStatusInProgress,
	},
	monitorConfig,
)

// Execute your scheduled task here...

// 🟢 Notify Sentry your job has completed successfully:
sentry.CaptureCheckIn(
	&sentry.CheckIn{
		MonitorSlug: "<monitor-slug>",
		Status:      sentry.CheckInStatusOK,
	},
	monitorConfig,
)

----------------------------------------

TITLE: Basic SDK Fingerprinting Example
DESCRIPTION: Demonstrates the most basic case of setting custom fingerprints by passing values directly through the SDK.



----------------------------------------

TITLE: Setting User Context with Internal ID
DESCRIPTION: Example demonstrating how to set user context using internal identifiers instead of sensitive information like email addresses.

LANGUAGE: javascript
CODE:
Sentry.setUser({
  id: user.id
});

----------------------------------------

TITLE: Configuring Automatic Session Tracking in Sentry SDK
DESCRIPTION: This snippet shows how to configure automatic session tracking for release health monitoring. The specific configuration depends on the platform and is represented by a placeholder.

LANGUAGE: markup
CODE:
<PlatformContent includePath="configuration/auto-session-tracking" />

----------------------------------------

TITLE: Tags Context Updates in Raven Python
DESCRIPTION: Example of updating tags context data using context.merge().

LANGUAGE: python
CODE:
client.context.merge({'tags': data})

----------------------------------------

TITLE: Installing SCons Build Tool
DESCRIPTION: Commands for installing the SCons build tool on various platforms, including Windows, macOS, Linux, and using Python.

LANGUAGE: PowerShell
CODE:
# If you have `scoop` installed:
scoop install scons

LANGUAGE: bash
CODE:
# If you have Homebrew installed:
brew install scons

LANGUAGE: bash
CODE:
pacman -S scons

LANGUAGE: bash
CODE:
sudo apt install scons

LANGUAGE: bash
CODE:
# Install with existing Python installation:
python -m pip install scons

# Upgrade:
python -m pip install --upgrade scons

----------------------------------------

TITLE: Initializing Sentry and Dynamically Adding Replay Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry without the Replay integration, and then dynamically import and add the Replay integration at a later time. This approach allows for lazy-loading of the Replay feature, potentially improving initial load performance.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Note, Replay is NOT instantiated below:
  integrations: [],
});

// Sometime later
import("@sentry/remix").then(lazyLoadedSentry => {
  Sentry.addIntegration(lazyLoadedSentry.replayIntegration());
});

----------------------------------------

TITLE: Setting Sentry SDK Scope Level in Objective-C
DESCRIPTION: This snippet shows how to configure the Sentry SDK scope in Objective-C. It sets the scope level to 'warning' using the [SentrySDK configureScope:] method.

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK configureScope:^(SentryScope * _Nonnull scope) {
    [scope setLevel:kSentryLevelWarning];
}];

----------------------------------------

TITLE: Initializing Sentry with Session Replay in Nuxt (TypeScript)
DESCRIPTION: This snippet demonstrates how to initialize Sentry with Session Replay integration in a Nuxt application. It sets up sampling rates for replays and includes configuration options for privacy protection.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/nuxt";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This sets the sample rate to be 10%. You may want this to be 100% while
  // in development and sample at a lower rate in production
  replaysSessionSampleRate: 0.1,

  // If the entire session is not sampled, use the below sample rate to sample
  // sessions when an error occurs.
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    Sentry.replayIntegration({
      // Additional SDK configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

----------------------------------------

TITLE: Configuring HTTP Instrumentation with Sentry and Tower in Rust
DESCRIPTION: This snippet shows how to set up HTTP instrumentation using Sentry and the tower ecosystem in Rust. It demonstrates the correct order of applying the Sentry Hub layer and HTTP layer using tower::ServiceBuilder.

LANGUAGE: rust
CODE:
use sentry_tower::{NewSentryLayer, SentryHttpLayer};
use tower::ServiceBuilder;

let layer = ServiceBuilder::new()
    .layer(NewSentryLayer::new_from_top())
    .layer(SentryHttpLayer::with_transaction());

----------------------------------------

TITLE: Implementing Sentry Trace Headers in Remix v2
DESCRIPTION: Enhanced configuration for Remix v2 using typed SentryMetaArgs to handle trace and baggage data with proper type safety.

LANGUAGE: typescript
CODE:
import type { SentryMetaArgs } from "@sentry/remix";

export const meta = ({ data }: SentryMetaArgs<MetaFunction<typeof loader>>) => {
  return [
    {
      name: "sentry-trace",
      content: data.sentryTrace,
    },
    {
      name: "baggage",
      content: data.sentryBaggage,
    },
  ];
};

----------------------------------------

TITLE: Configuring Tree Shaking with Webpack DefinePlugin
DESCRIPTION: Example of using Webpack's DefinePlugin to tree shake Sentry debug code in webpack bundles.

LANGUAGE: javascript
CODE:
const webpack = require("webpack");

module.exports = {
// ... other options
plugins: [
new webpack.DefinePlugin({
__SENTRY_DEBUG__: false,
__SENTRY_TRACING__: false,
__RRWEB_EXCLUDE_IFRAME__: true,
__RRWEB_EXCLUDE_SHADOW_DOM__: true,
__SENTRY_EXCLUDE_REPLAY_WORKER__: true,
}),
// ... other plugins
],
};

----------------------------------------

TITLE: Creating a Sample Ariadne GraphQL Application in Python
DESCRIPTION: This code snippet demonstrates how to set up a basic Ariadne GraphQL application with Sentry integration. It includes a simple schema definition and a resolver that intentionally raises an error for testing purposes.

LANGUAGE: python
CODE:
from ariadne import QueryType, gql, make_executable_schema
from ariadne.asgi import GraphQL

sentry_sdk.init(...)  # same as above

type_defs = gql(
    """
    type Query {
        hello: String!
    }
"""
)

query = QueryType()

@query.field("hello")
def resolve_hello(*_):
    1 / 0
    return "Hello!"

schema = make_executable_schema(type_defs, query)
app = GraphQL(schema, debug=True)

----------------------------------------

TITLE: Configuring Sentry Backend in CMake
DESCRIPTION: The SENTRY_BACKEND CMake option allows selecting the crash reporting backend during build time. Options include crashpad (default for Windows/macOS/Linux), breakpad (in-process), inproc (default for Android), and none (no crash handling).

LANGUAGE: cmake
CODE:
SENTRY_BACKEND

----------------------------------------

TITLE: Configuring Session Replay Privacy Options in React Native
DESCRIPTION: JavaScript code to configure privacy options for Session Replay, disabling default text and image masking. This should not be used for applications with sensitive data.

LANGUAGE: javascript
CODE:
integrations: [
  Sentry.mobileReplayIntegration({
    maskAllText: false,
    maskAllImages: false,
    maskAllVectors: false,
  }),
]

----------------------------------------

TITLE: Initializing Sentry in ASP.NET
DESCRIPTION: Demonstrates how to initialize Sentry in an ASP.NET application using the AddAspNet() method.

LANGUAGE: csharp
CODE:
using Sentry.AspNet;

SentrySdk.Init(options =>
{
    options.Dsn = "___PUBLIC_DSN___";

    options.AddAspNet();
});

----------------------------------------

TITLE: Configuring Serverless Framework with Sentry for Python Lambda
DESCRIPTION: YAML configuration for setting up Sentry monitoring in a Python Lambda function using Serverless Framework. Includes environment variables, layer configuration, and function setup with Python-specific handler.

LANGUAGE: yaml
CODE:
# other configuration

provider:
  # more configuration
  region: <AWS_REGION>
  environment:
    SENTRY_TRACES_SAMPLE_RATE: "1.0"
    SENTRY_DSN: "<SENTRY_DSN>"

custom:
  layers:
    - arn:aws:lambda:${self:provider.region}:943013980633:layer:SentryPythonServerlessSDK:6
#    - arn:aws:lambda:${self:provider.region:943013980633:layer:SentryPythonServerlessSDK:latest

functions:
  <yourFunctionName>:
    handler: sentry_sdk.integrations.init_serverless_sdk.sentry_lambda_handler
    environment:
      SENTRY_INITIAL_HANDLER: "<yourLambdaHandlerFunctionPath>"
    layers: ${self:custom.layers}

----------------------------------------

TITLE: Initializing Sentry with Feature Flags in Svelte (TypeScript)
DESCRIPTION: This snippet initializes Sentry with a public DSN and feature flag integration. It then attempts to add a feature flag and captures an exception. The code demonstrates error handling if the integration is not properly set up.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/svelte';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Migrating Sentry JavaScript SDK Integrations from v7 to v8
DESCRIPTION: This table shows the mapping between old class-based integration instantiations in Sentry JavaScript SDK v7 and their corresponding function-based integration calls in v8. Developers should replace the old syntax with the new one when upgrading to v8.

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new InboundFilters()

// New v8 syntax:
inboundFiltersIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new FunctionToString()

// New v8 syntax:
functionToStringIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new LinkedErrors()

// New v8 syntax:
linkedErrorsIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new RequestData()

// New v8 syntax:
requestDataIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new CaptureConsole()

// New v8 syntax:
captureConsoleIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new Debug()

// New v8 syntax:
debugIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new Dedupe()

// New v8 syntax:
dedupeIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new ExtraErrorData()

// New v8 syntax:
extraErrorDataIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new RewriteFrames()

// New v8 syntax:
rewriteFramesIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new SessionTiming()

// New v8 syntax:
sessionTimingIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new Console()

// New v8 syntax:
consoleIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new Context()

// New v8 syntax:
nodeContextIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new Modules()

// New v8 syntax:
modulesIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new OnUncaughtException()

// New v8 syntax:
onUncaughtExceptionIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new OnUnhandledRejection()

// New v8 syntax:
onUnhandledRejectionIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new ContextLines()

// New v8 syntax:
contextLinesIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new Spotlight()

// New v8 syntax:
spotlightIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new Anr()

// New v8 syntax:
anrIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new Hapi()

// New v8 syntax:
hapiIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new Undici()

// New v8 syntax:
nativeNodeFetchIntegration()

LANGUAGE: javascript
CODE:
// Old v7 syntax:
new Http()

// New v8 syntax:
httpIntegration()

----------------------------------------

TITLE: Adding Custom Event Processor to Sentry Scope in C#
DESCRIPTION: This snippet shows how to add a custom event processor to the current and following Sentry scopes using ConfigureScope.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope => scope.AddEventProcessor(new CustomEventProcessor()));

----------------------------------------

TITLE: Initializing Relay Config with Docker
DESCRIPTION: Docker commands to set up permissions and generate initial Relay configuration in a mounted volume.

LANGUAGE: shell
CODE:
docker run --rm -it                  \
  -v $(pwd)/config/:/work/.relay/:z  \
  --entrypoint bash                  \
  getsentry/relay                    \
  -c 'chown -R relay:relay /work/.relay'

docker run --rm -it                  \
  -v $(pwd)/config/:/work/.relay/:z  \
  getsentry/relay                    \
  config init

----------------------------------------

TITLE: Defining UI Component Schema in JSON
DESCRIPTION: Base schema structure for defining UI components in Sentry integrations. The schema is specified in the integration details and contains an elements array where individual component schemas are defined.

LANGUAGE: json
CODE:
{
  "elements": [
    // Component schemas to be used by the integration
    // e.g. { "type": "alert-rule-action", ... }
  ]
}

----------------------------------------

TITLE: Specifying Middleware in SolidStart Configuration
DESCRIPTION: This snippet demonstrates how to specify the middleware file in the SolidStart configuration. It uses the defineConfig function to set the middleware path.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@solidjs/start/config';

export default defineConfig({
  // ...
  middleware: './src/middleware.ts',
});

----------------------------------------

TITLE: Configuring Mobile App Backend Services Tracing
DESCRIPTION: Setup for tracing mobile app interactions across main API, media servers, and local endpoints with 100% span capture for debugging.

LANGUAGE: javascript
CODE:
// sentry.client.config.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  // Capture 100% of spans. This is useful for development and debugging. Consider reducing in production or using traceSampler
  tracesSampleRate: 1.0,
  tracePropagationTargets: [
    "https://api.myapp.com",
    "https://media.myapp.com",
    /^\/local-api\//
  ],
});

----------------------------------------

TITLE: Nginx Source Map Access Configuration
DESCRIPTION: Nginx server configuration to allow access to source maps from specific Sentry IP addresses.

LANGUAGE: nginx
CODE:
location ~ ^/static/dist/(.+)\.map$ {
    alias /your/path/site/static/dist/$1.map;

    allow 35.184.238.160/32;
    allow 104.155.159.182/32;
    allow 104.155.149.19/32;
    allow 130.211.230.102/32;
    deny all;
}

----------------------------------------

TITLE: Retrieving or Creating Sentry Transactions in PowerShell
DESCRIPTION: This snippet demonstrates how to retrieve an existing Sentry transaction or span using SentrySdk.GetSpan(). If no transaction exists, it creates a new one using Start-SentryTransaction. If a transaction exists, it creates a child span.

LANGUAGE: powershell
CODE:
$span = [Sentry.SentrySdk]::GetSpan()

if ($null -eq $span)
{
    $span = Start-SentryTransaction 'task' 'op'
}
else
{
    $span = $span.StartChild('subtask')
}

----------------------------------------

TITLE: Setting Sentry Auth Token in Environment
DESCRIPTION: Exports the Sentry authentication token as an environment variable for use during build process.

LANGUAGE: bash
CODE:
export SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Disabling SDK Initialization in Sentry Configuration
DESCRIPTION: Example of disabling automatic SDK initialization when configuring Sentry integration.

LANGUAGE: csharp
CODE:
using (var loggerFactory = new LoggerFactory()
            .AddSentry(o => o.InitializeSdk = false))
{ }

----------------------------------------

TITLE: Implementing Pagination in Sentry API - Python
DESCRIPTION: Example implementation of pagination in a Sentry API endpoint using the self.paginate method with OffsetPaginator.

LANGUAGE: python
CODE:
def get(self, request: Request) -> Response:
    queryset = ApiApplication.objects.filter(
        owner_id=request.user.id, status=ApiApplicationStatus.active
    )

    return self.paginate(
        request=request,
        queryset=queryset,
        order_by="name",
        paginator_cls=OffsetPaginator,
        on_results=lambda x: serialize(x, request.user),
    )

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Dart
DESCRIPTION: This snippet demonstrates how to capture exceptions using Sentry in Dart, including setting custom tags and scope. It shows two methods: one with additional context and another without.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Sentry.captureException(
    exception,
    withScope: (scope) {
        // will be tagged with my-tag="my value"
        scope.setTag('my-tag', 'my value');
        scope.level = SentryLevel.warning;
    },
);

// will not be tagged with my-tag
Sentry.captureException(exception);

----------------------------------------

TITLE: Clearing User Data from Sentry Scope in Kotlin
DESCRIPTION: This snippet shows how to configure the Sentry scope to clear user information using Kotlin. It utilizes the Sentry SDK's configureScope function with a lambda to set the user property to null, removing any previously set user data.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.configureScope { scope ->
  scope.user = null
}

----------------------------------------

TITLE: Implementing custom transaction sampling in ASP.NET Core with Sentry
DESCRIPTION: This snippet demonstrates how to use Sentry's TracesSampler option to implement custom sampling logic based on the requested HTTP path. It samples 80% of checkout transactions and 5% of all other transactions.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.TracesSampler = context =>
{
    var requestPath = context.TryGetHttpPath();

    // We're interested in the checkout page more than others
    if (string.Equals(requestPath, "/checkout", StringComparison.OrdinalIgnoreCase))
    {
        return 0.8; // Sample 80% of checkout transactions
    }

    // Sample only 5% of the everything else
    return 0.05;
};

----------------------------------------

TITLE: Implementing Tornado Web Application with Sentry
DESCRIPTION: Example of a Tornado web application setup with Sentry integration, including error handling and async operation. Creates a simple web server that demonstrates error tracking and performance monitoring.

LANGUAGE: python
CODE:
import asyncio
import tornado

sentry_sdk.init(...)  # same as above

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        1 / 0  # raises an error
        self.write("Hello, world")

def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
    ])

async def main():
    app = make_app()
    app.listen(8888)
    await asyncio.Event().wait()

asyncio.run(main())

----------------------------------------

TITLE: Generating React Native Bundle and Source Maps for Android
DESCRIPTION: This bash command generates the React Native Packager (Metro) bundle and source maps for Android. It specifies various options such as platform, entry file, and output locations.

LANGUAGE: bash
CODE:
npx react-native bundle \
  --dev false \
  --minify true \
  --platform android \
  --entry-file index.js \
  --reset-cache \
  --bundle-output index.android.bundle \
  --sourcemap-output index.android.bundle.map

----------------------------------------

TITLE: Configuring Sentry OpenFeign Integration
DESCRIPTION: Basic configuration to add SentryCapability to Feign builder for tracing HTTP requests.

LANGUAGE: java
CODE:
import feign.Feign;
import io.sentry.openfeign.SentryCapability;

YourApi api = Feign.builder()
    .addCapability(new SentryCapability())
    ...
    .target(YourApi.class, "https://your-api-host/");

LANGUAGE: kotlin
CODE:
import feign.Feign
import io.sentry.openfeign.SentryCapability

val api = Feign.builder()
    .addCapability(SentryCapability())
    ...
    .target(YourApi::class.java, "https://your-api-host/")

----------------------------------------

TITLE: Raising NullReferenceException in C# for Sentry Testing
DESCRIPTION: Simple code snippet that generates a NullReferenceException by throwing a null value. This can be used to verify that Sentry is properly configured to capture unhandled exceptions in your application.

LANGUAGE: csharp
CODE:
throw null;

----------------------------------------

TITLE: Customizing Breadcrumbs with before-breadcrumb Hook in JavaScript
DESCRIPTION: This code snippet demonstrates how to use the before-breadcrumb hook to customize breadcrumbs in Sentry. It allows modifying or discarding breadcrumbs based on certain conditions.

LANGUAGE: javascript
CODE:
Sentry.init({
  //...

  beforeBreadcrumb(breadcrumb, hint) {
    if (breadcrumb.category === "ui.click") {
      return null;
    }
    return breadcrumb;
  },
});

----------------------------------------

TITLE: Verifying Sentry Timber Integration in Kotlin
DESCRIPTION: Test the Sentry Timber integration by capturing an intentional error in a Kotlin Android activity.

LANGUAGE: kotlin
CODE:
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import java.lang.Exception
import timber.log.Timber

class MyActivity : AppCompatActivity() {
  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    try {
      throw Exception("This is a test.")
    } catch (e: Exception) {
      Timber.e(e);
    }
  }
}

----------------------------------------

TITLE: Session Replay Performance Metrics Table
DESCRIPTION: Benchmark comparison table showing performance metrics for web applications with and without Sentry's Session Replay SDK, including LCP, CLS, FID, TBT, memory usage, and network metrics.

LANGUAGE: markdown
CODE:
| Metric                           | Without Sentry | Sentry SDK only | Sentry + Replay SDK |
| -------------------------------- | -------------- | --------------- | ------------------- |
| Largest Contentful Paint (LCP)* | 1599.19 ms     | 1546.07 ms      | 1529.11 ms          |
| Cumulative Layout Shift (CLS)    | 0.40 ms        | 0.40 ms         | 0.40 ms             |
| First Input Delay (FID)          | 1.26 ms        | 1.30 ms         | 1.50 ms             |
| Total Blocking Time (TBT)        | 2621.67 ms     | 2663.35 ms      | 3036.80 ms          |
| Average Memory                   | 119.26 MB      | 125.12 MB       | 124.84 MB           |
| Max Memory                       | 320.66 MB      | 359.21 MB       | 339.03 MB           |
| Network Upload                   | 21 B           | 3.84 KB         | 272.51 KB           |
| Network Download                 | 8.06 MB        | 8.09 MB         | 8.07 MB             |

----------------------------------------

TITLE: Installing Raven Python from GitHub
DESCRIPTION: Commands to clone and install the latest version of Raven Python SDK from GitHub repository.

LANGUAGE: bash
CODE:
git clone https://github.com/getsentry/raven-python
pip install raven-python

----------------------------------------

TITLE: Implementing Cache Storage Span in Python with Sentry
DESCRIPTION: Demonstrates how to create a span for tracking cache storage operations using Sentry SDK. The code shows setting cache values, adding span data for network peer details, cache keys, and item sizes.

LANGUAGE: python
CODE:
import my_caching
import sentry_sdk

key = "myCacheKey123"
value = "The value I want to cache."

with sentry_sdk.start_span(op="cache.put") as span:
    # Set a key in your caching using your custom caching solution
    my_caching.set(key, value)

    # Describe the cache server you are accessing
    span.set_data("network.peer.address", "cache.example.com/supercache")
    span.set_data("network.peer.port", 9000)

    # Add the key(s) you want to set
    span.set_data("cache.key", [key])

    # Add the size of the value you stored in the cache
    span.set_data("cache.item_size", len(value))  # Warning: if value is very big this could use lots of memory

----------------------------------------

TITLE: Configuring Masked and Unmasked View Classes in Swift
DESCRIPTION: This snippet demonstrates how to set masking options for specific view classes in Sentry's Session Replay SDK. It shows how to mask a custom view and unmask a UILabel subclass.

LANGUAGE: swift
CODE:
options.sessionReplay.maskedViewClasses = [MyCustomView.self]
options.sessionReplay.unmaskedViewClasses = [MyCustomLabel.self]

----------------------------------------

TITLE: Configuring Sentry Metrics in Android
DESCRIPTION: Initialize Sentry SDK with metrics enabled. This can be done programmatically in Kotlin/Java or via AndroidManifest.xml.

LANGUAGE: Kotlin
CODE:
import io.sentry.android.core.SentryAndroid

SentryAndroid.init(this) { options ->
  options.isEnableMetrics = true
}

LANGUAGE: Java
CODE:
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  options.setEnableMetrics(true);
});

LANGUAGE: XML
CODE:
<manifest>
    <application>
        <meta-data android:name="io.sentry.enable-metrics" android:value="true" />
    </application>
</manifest>

----------------------------------------

TITLE: Configuring Traces Sampler in Ruby Sentry SDK
DESCRIPTION: Implements a sampling decision lambda that checks for parent sampling context. The function first checks if there's an existing parent_sampled value and returns it if present, otherwise falls back to additional sampling logic.

LANGUAGE: ruby
CODE:
config.traces_sampler = lambda do |sampling_context|
  parent_sampled = sampling_context[:parent_sampled]

  if !parent_sampled.nil?
    parent_sampled
  else
    # the rest of sampling logic
  end
end

----------------------------------------

TITLE: Context-Aware Panic Recovery with BeforeSend Hook
DESCRIPTION: Advanced implementation using RecoverWithContext to handle panics with context awareness. Demonstrates setting up Sentry with a sync transport and BeforeSend hook to access context information during panic handling.

LANGUAGE: go
CODE:
type contextKey int
const SomeContextKey = contextKey(1)

func main() {
	sentrySyncTransport := sentry.NewHTTPSyncTransport()
	sentrySyncTransport.Timeout = time.Second * 3

	sentry.Init(sentry.ClientOptions{
		Dsn: "___PUBLIC_DSN___",
		Transport: sentrySyncTransport,
		BeforeSend: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
			if hint.Context != nil {
				// hint.Context.Value(SomeContextKey) would give you stored string that now can be attached to the event
			}
			return event
		},
	})

	ctx := context.WithValue(context.Background(), SomeContextKey, "some details about your panic")

	func() {
		defer sentry.RecoverWithContext(ctx)
		// do all of the scary things here
	}()
}

----------------------------------------

TITLE: Example of Auth Token Usage in Sentry API (Bash)
DESCRIPTION: This snippet provides a concrete example of using an authentication token in a Sentry API call, replacing placeholders with actual values for the token and organization slug.

LANGUAGE: bash
CODE:
curl -H 'Authorization: Bearer 1a2b3c' https://sentry.io/api/0/organizations/acme/projects/

----------------------------------------

TITLE: ProGuard Rules for Sentry SDK Multi-Dex Support
DESCRIPTION: This snippet provides the necessary ProGuard rules to keep essential Sentry SDK classes in the main dex file. These rules are crucial for preventing 'Could not find class' errors on devices running the Dalvik VM.

LANGUAGE: proguard
CODE:
-keep class io.sentry.android.core.SentryAndroidOptions
-keep class io.sentry.android.ndk.SentryNdk

----------------------------------------

TITLE: Example of Measurements Object in JSON
DESCRIPTION: This snippet demonstrates how to structure the 'measurements' object in a Sentry event, including both standard and custom measurements with their values and units.

LANGUAGE: json
CODE:
{
  "measurements": {
    "lcp": { "value": 100 },
    "fp": { "value": 123 },
    "my.custom.metric": { "value": 456, "unit": "millisecond" }
  }
}

----------------------------------------

TITLE: Creating a Debug Route for Sentry in Laravel
DESCRIPTION: Add a route to intentionally throw an exception, allowing you to verify that Sentry is capturing errors in your Laravel application.

LANGUAGE: php
CODE:
Route::get('/debug-sentry', function () {
    throw new Exception('My first Sentry error!');
});

----------------------------------------

TITLE: Initializing Sentry Client with Custom Sample Rate in Go
DESCRIPTION: This code initializes the Sentry client with custom options. It sets the SampleRate to 0.25, meaning that 25% of errors will be sampled and sent to Sentry. This is useful for controlling the volume of data sent to Sentry in high-traffic applications.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
  // ...
  SampleRate: 0.25,
})

----------------------------------------

TITLE: Setting Tags in Sentry
DESCRIPTION: This snippet demonstrates how to define a tag in Sentry. Tags are bound to the isolation scope, ensuring all future events within scope contain the same tags.

LANGUAGE: javascript
CODE:
Sentry.setTag("page_locale", "de-at");

----------------------------------------

TITLE: Customizing Failed Request Status Codes in Sentry SDK (.NET)
DESCRIPTION: This code demonstrates how to modify the range of HTTP status codes that Sentry considers as failed requests for both C# and F#.

LANGUAGE: csharp
CODE:
options.FailedRequestStatusCodes.Add((400, 499));

LANGUAGE: fsharp
CODE:
options.FailedRequestStatusCodes.Add(HttpStatusCodeRange(400, 599))

----------------------------------------

TITLE: Capturing Error Message with Sentry in Kotlin
DESCRIPTION: This snippet demonstrates how to use the Sentry SDK to capture an error message in a Kotlin application. It imports the Sentry class and uses the captureMessage method to log a custom error message.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.captureMessage("Something went wrong")

----------------------------------------

TITLE: Initializing Sentry Client with Custom Options in Rust
DESCRIPTION: This code initializes the Sentry client with custom options. It sets the environment to 'production' while using default values for other options. This setup is crucial for error tracking and monitoring in a production Rust application.

LANGUAGE: rust
CODE:
sentry::init(sentry::ClientOptions {
    environment: Some("production".into()),
    ..Default::default()
});

----------------------------------------

TITLE: Configuring Custom Angular Builder in angular.json
DESCRIPTION: JSON configuration to replace the default Angular builder with custom webpack builder in angular.json file.

LANGUAGE: javascript
CODE:
{
  "projects": {
    "my-project": {
      "architect": {
        "build": {
          "builder": "@angular-builders/custom-webpack:browser",
          "options": {
            "customWebpackConfig": {
              "path": "./webpack.config.js"
            },
            // ... other options
          },
          // ... other options
        },
        // ... other options
      },
      // ... other options
    }
  }
}

----------------------------------------

TITLE: Using IRavenClient in Nancy Modules in C#
DESCRIPTION: Inject and use IRavenClient in Nancy modules for sending events to Sentry.

LANGUAGE: csharp
CODE:
public class LoggingModule : NancyModule
{
    private readonly IRavenClient ravenClient;

    public LoggingModule(IRavenClient ravenClient)
    {
        this.ravenClient = ravenClient;
    }
}

----------------------------------------

TITLE: Configuring Console Capture Levels in Sentry
DESCRIPTION: Configuration options for the CaptureConsole integration showing the levels array property that determines which console methods to capture. Default levels include log, info, warn, error, debug, and assert.

LANGUAGE: typescript
CODE:
levels: ['log', 'info', 'warn', 'error', 'debug', 'assert']

----------------------------------------

TITLE: Configuring Sentry SDK Scope Level in C#
DESCRIPTION: This snippet demonstrates how to configure the Sentry SDK scope in C#. It sets the scope level to 'Warning' using the ConfigureScope method of SentrySdk.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.Level = SentryLevel.Warning;
});

----------------------------------------

TITLE: Setting Release in Sentry Go SDK
DESCRIPTION: Sets the release version for the Sentry Go SDK. This helps in tracking errors across different releases of your application.

LANGUAGE: go
CODE:
raven.SetRelease("my-project-name@1.0.0")

----------------------------------------

TITLE: Implementing Basic Custom Integration in Sentry
DESCRIPTION: Demonstrates how to create and initialize a basic custom integration with Sentry SDK. The integration implements a basic setup hook that runs during SDK initialization.

LANGUAGE: javascript
CODE:
function myAwesomeIntegration() {
  return {
    name: "MyAwesomeIntegration",
    setup(client) {
      // Do something when the SDK is initialized
      // The client that is being setup is passed to the hook
    },
  };
}

Sentry.init({
  // ...
  integrations: [myAwesomeIntegration()],
});

----------------------------------------

TITLE: Verifying Source Maps Locally with Node.js
DESCRIPTION: This Node.js script reads a source map file and tests a mapping to verify source maps are functioning correctly locally.

LANGUAGE: javascript
CODE:
var fs = require("fs"),
  path = require("path"),
  sourceMap = require("source-map");

// Path to file that is generated by your build tool (webpack, tsc, ...)
var GENERATED_FILE = path.join(".", "app.min.js.map");

// Line and column located in your generated file (for example, the source
// of the error from your minified file)
var GENERATED_LINE_AND_COLUMN = { line: 1, column: 1000 };

var rawSourceMap = fs.readFileSync(GENERATED_FILE).toString();
new sourceMap.SourceMapConsumer(rawSourceMap).then(function (smc) {
  var pos = smc.originalPositionFor(GENERATED_LINE_AND_COLUMN);

  // You should see something like:
  // { source: 'original.js', line: 57, column: 9, name: 'myfunc' }
  console.log(pos);
});

----------------------------------------

TITLE: Implementing Monitor Check-ins with ActiveJob
DESCRIPTION: Example of integrating Sentry monitor check-ins with an ActiveJob class using the MonitorCheckIns mixin.

LANGUAGE: ruby
CODE:
class ExampleJob < ApplicationJob
  include Sentry::Cron::MonitorCheckIns

  sentry_monitor_check_ins

  def perform(*args)
    # do stuff
  end
end

----------------------------------------

TITLE: Configuring Default PII Capture in YAML
DESCRIPTION: Enables the capture of user's IP address and Principal name through YAML configuration

LANGUAGE: yaml
CODE:
sentry:
  send-default-pii: true

----------------------------------------

TITLE: Grouping Errors with Greater Granularity in Sentry SDK
DESCRIPTION: Shows how to create more granular error grouping by including the default fingerprint and additional attributes from the error object. This is useful for RPC or API service errors with similar stack traces.

LANGUAGE: JavaScript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['{{ default }}', String(error.name), String(error.message)]);
  Sentry.captureException(error);
});

LANGUAGE: Python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.fingerprint = ['{{ default }}', str(error.name), str(error.message)]
    sentry_sdk.capture_exception(error)

LANGUAGE: Java
CODE:
Sentry.withScope(scope -> {
    scope.setFingerprint(Arrays.asList("{{ default }}", error.getName(), error.getMessage()));
    Sentry.captureException(error);
});

LANGUAGE: Ruby
CODE:
Sentry.with_scope do |scope|
  scope.set_fingerprint(['{{ default }}', error.name.to_s, error.message.to_s])
  Sentry.capture_exception(error)
end

LANGUAGE: PHP
CODE:
\Sentry\withScope(function (\Sentry\State\Scope $scope) use ($error): void {
    $scope->setFingerprint(['{{ default }}', (string)$error->getName(), (string)$error->getMessage()]);
    \Sentry\captureException($error);
});

LANGUAGE: C#
CODE:
using (SentrySdk.PushScope())
{
    SentrySdk.ConfigureScope(scope =>
    {
        scope.SetFingerprint(new [] { "{{ default }}", error.Name.ToString(), error.Message });
    });
    SentrySdk.CaptureException(error);
}

----------------------------------------

TITLE: Applying Sentry Instrumentation in CommonJS
DESCRIPTION: Code snippet to require the Sentry instrumentation file before any other modules in a CommonJS environment.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="getting-started-use" />

----------------------------------------

TITLE: Configuring Sentry DSN in sentry.properties
DESCRIPTION: Sets up the Sentry DSN and enables collection of additional data like request headers and IP addresses.

LANGUAGE: properties
CODE:
dsn=___PUBLIC_DSN___
# Add data like request headers and IP for users,
# see https://docs.sentry.io/platforms/java/guides/jul/data-management/data-collected/ for more info
send-default-pii=true

----------------------------------------

TITLE: Emitting a Set Metric in Python with Sentry
DESCRIPTION: Illustrates how to emit a set metric for tracking unique users viewing a page. The example includes adding a username to the set and tagging with page information.

LANGUAGE: python
CODE:
# Add 'jane' to a set used for tracking the number of users that viewed a page.
sentry_sdk.metrics.set(
	key="user_view",
	value="jane",
	unit="username",
	tags={
		"page": "/home"
	}
)

----------------------------------------

TITLE: Setting Sentry Tracing Sample Rate in AndroidManifest.xml
DESCRIPTION: This snippet shows how to set the Sentry tracing sample rate to 20% using a meta-data tag in the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<application>
  <meta-data android:name="io.sentry.traces.sample-rate" android:value="0.2" />
</application>

----------------------------------------

TITLE: Updating Sentry initialization in entry.client.tsx for Remix
DESCRIPTION: This code diff illustrates the changes required in the client-side entry point of a Remix application when migrating to Sentry SDK 8.x. It shows the replacement of BrowserTracing with browserTracingIntegration.

LANGUAGE: JavaScript
CODE:
import { useLocation, useMatches } from "@remix-run/react";
import * as Sentry from "@sentry/remix";
import { useEffect } from "react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
-    new Sentry.BrowserTracing({
-      routingInstrumentation: Sentry.remixRouterInstrumentation(
-        useEffect,
-        useLocation,
-        useMatches
-      ),
-    }),
+     Sentry.browserTracingIntegration({
+      useEffect,
+      useLocation,
+      useMatches,
+    }),
  ],
});

----------------------------------------

TITLE: Configuring Sentry SDK Scope Level in F#
DESCRIPTION: This snippet shows how to configure the Sentry SDK scope in F#. It sets the scope level to 'Warning' using the ConfigureScope method of SentrySdk, demonstrating F#'s syntax for lambda functions.

LANGUAGE: fsharp
CODE:
SentrySdk.ConfigureScope(
  fun scope ->
    scope.Level <- SentryLevel.Warning
  )

----------------------------------------

TITLE: Configuring Sentry with Personal Information Flag in Spring
DESCRIPTION: Demonstrates how to enable Sentry and set the personal information flag to true in Spring 5 and Spring 6 configurations.

LANGUAGE: Java
CODE:
import org.springframework.context.annotation.Configuration;
import io.sentry.spring.EnableSentry;

@EnableSentry(dsn = "___PUBLIC_DSN___", sendDefaultPii = true)
@Configuration
class SentryConfiguration {
}

LANGUAGE: Java
CODE:
import org.springframework.context.annotation.Configuration;
import io.sentry.spring.jakarta.EnableSentry;

@EnableSentry(dsn = "___PUBLIC_DSN___", sendDefaultPii = true)
@Configuration
class SentryConfiguration {
}

LANGUAGE: Kotlin
CODE:
import org.springframework.context.annotation.Configuration
import io.sentry.spring.EnableSentry

@EnableSentry(dsn = "...", sendDefaultPii = true)
@Configuration
class SentryConfiguration

LANGUAGE: Kotlin
CODE:
import org.springframework.context.annotation.Configuration
import io.sentry.spring.jakarta.EnableSentry

@EnableSentry(dsn = "...", sendDefaultPii = true)
@Configuration
class SentryConfiguration

----------------------------------------

TITLE: Removing Deprecated Sentry Unity Lite Initialization
DESCRIPTION: Remove the old initialization code when migrating from Sentry Unity Lite to the full Sentry Unity SDK.

LANGUAGE: csharp
CODE:
// Remove this line:
gameObject.AddComponent<SentrySdk>().Dsn = "___PUBLIC_DSN___";

----------------------------------------

TITLE: Configuring Span Filtering with Integration Options in Sentry
DESCRIPTION: Shows how to filter spans using integration-specific configuration options. This example uses the fs integration to control file system operation spans through both pattern matching and boolean flags.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [
    fsIntegration: {
      ignoreSpans: [
        'fs.read',
      ],
      readSpans: true,
      writeSpans: false,
    }
  ]
})

----------------------------------------

TITLE: Disabling Out of Memory Tracking in Objective-C for Sentry SDK
DESCRIPTION: This code snippet shows how to initialize the Sentry SDK in Objective-C while turning off the Out of Memory tracking feature. It configures the DSN and sets the enableOutOfMemoryTracking option to NO.

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.enableOutOfMemoryTracking = NO;
}];

----------------------------------------

TITLE: Excluding Celery Beat Tasks from Auto-Discovery in Python
DESCRIPTION: This snippet demonstrates how to exclude specific Celery Beat tasks from being auto-instrumented by Sentry. It uses the 'exclude_beat_tasks' option in the CeleryIntegration configuration.

LANGUAGE: python
CODE:
    sentry_sdk.init(
        # ...
        integrations=[
            CeleryIntegration(
                monitor_beat_tasks=True,
                exclude_beat_tasks=[
                    "some-task-a",
                    "payment-check-.*",
                ]
            ),
        ],
    )

----------------------------------------

TITLE: Configuring Sentry SDK with Custom Celery Integration Options
DESCRIPTION: Shows how to initialize the Sentry SDK with custom options for the Celery integration, including monitoring beat tasks and excluding specific tasks from monitoring.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.celery import CeleryIntegration

sentry_sdk.init(
    # same as above
    integrations=[
        CeleryIntegration(
            monitor_beat_tasks=True,
            exclude_beat_tasks=[
                "unimportant-task",
                "payment-check-.*"
            ],
        ),
    ],
)

----------------------------------------

TITLE: Installing Sentry SDK with Boto3 Support using pip
DESCRIPTION: This command installs or upgrades the Sentry SDK package, which includes Boto3 integration support.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk'

----------------------------------------

TITLE: Initializing Sentry with Reporting Observer via CDN
DESCRIPTION: Sets up Sentry using CDN links with both tracing bundle and Reporting Observer integration. Includes integrity checks and cross-origin settings.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/reportingobserver.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'reportingobserver.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    integrations: [Sentry.reportingObserverIntegration()],
  });
</script>

----------------------------------------

TITLE: Configuring Sentry Android Gradle Plugin
DESCRIPTION: Configuration in app/build.gradle to disable autoInstallation when using the Sentry Android Gradle Plugin alongside Sentry Flutter.

LANGUAGE: groovy
CODE:
sentry {
    autoInstallation {
      enabled = false
    }
}

----------------------------------------

TITLE: Integrating Sentry with React Router v7 useRoutes Hook
DESCRIPTION: This snippet demonstrates how to integrate Sentry with the React Router v7 useRoutes hook by wrapping it with wrapUseRoutesV7.

LANGUAGE: javascript
CODE:
import React from "react";
import {
  createRoutesFromChildren,
  matchRoutes,
  useLocation,
  useNavigationType,
  useRoutes,
} from "react-router";

import { wrapUseRoutes } from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactRouterV7BrowserTracingIntegration({
      useEffect: React.useEffect,
      useLocation,
      useNavigationType,
      createRoutesFromChildren,
      matchRoutes,
    }),
  ],
  tracesSampleRate: 1.0,
});

const useSentryRoutes = wrapUseRoutesV7(useRoutes);

function App() {
  return useSentryRoutes([
    // your routes...
  ]);
}

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById("root")
);

----------------------------------------

TITLE: Event Ingestion IP Configuration
DESCRIPTION: IP addresses for Sentry's event ingestion services across different domains and regions.

LANGUAGE: plaintext
CODE:
34.120.195.249/32

----------------------------------------

TITLE: Defining Transaction Measurements
DESCRIPTION: Shows how to include standard and custom measurements with their values and optional units.

LANGUAGE: json
CODE:
{
  "measurements": {
    "lcp": { "value": 100 },
    "fp": { "value": 123 },
    "my.custom.metric": { "value": 456, "unit": "millisecond" }
  }
}

----------------------------------------

TITLE: Basic Monitor Run Command
DESCRIPTION: Generic command structure for running a monitored job using Sentry CLI.

LANGUAGE: bash
CODE:
sentry-cli monitors run <monitor_slug> -- <command> <args>

----------------------------------------

TITLE: Removing Specific Fields in Sentry Event JSON
DESCRIPTION: Examples of data scrubbing rules to remove specific fields from the Sentry event JSON, including exception messages and log entries.

LANGUAGE: plaintext
CODE:
[Remove] [Anything] from [exception.values.*.value]
[Remove] [Anything] from [logentry.formatted]

----------------------------------------

TITLE: Configuring Sentry Scope with User Tag in PHP
DESCRIPTION: This snippet demonstrates how to use Sentry's configureScope function to set a custom tag with a hashed or checksummed version of the user's birthday. It uses a closure to modify the Sentry scope, ensuring user privacy by not sending raw personal data.

LANGUAGE: php
CODE:
\Sentry\configureScope(function (\Sentry\State\Scope $scope) use ($user): void {
    $scope->setTag('birthday', checksum_or_hash($user->birthday));
});

----------------------------------------

TITLE: Structuring Generic Unhandled Crash in JSON
DESCRIPTION: Shows how to represent a generic unhandled crash in the Sentry event payload JSON format, with a simple mechanism.

LANGUAGE: json
CODE:
{
  "exception": {
    "values": [
      {
        "type": "Error",
        "value": "An error occurred",
        "mechanism": {
          "type": "generic",
          "handled": false
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Uploading Android Source Maps to Sentry
DESCRIPTION: Command to upload Android bundle and source maps to Sentry using sentry-cli. This includes debug ID reference and strip prefix options.

LANGUAGE: bash
CODE:
npx sentry-cli sourcemaps upload \
  --debug-id-reference \
  --strip-prefix /path/to/project/root \
  index.android.bundle index.android.bundle.map

----------------------------------------

TITLE: Using SentryContext with Kotlin Coroutines
DESCRIPTION: Shows how to use SentryContext to ensure coroutines have access to the correct Sentry context in Kotlin.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.SentryContext
import io.sentry.Sentry

launch(SentryContext()) {
  // tag set in parent coroutine is visible to child coroutine
  Sentry.setTag("parent-tag", "value")
  launch() {
    // tag set in child coroutine is not visible in parent coroutine
    Sentry.setTag("child-tag", "value")
  }
}

----------------------------------------

TITLE: Creating Dedicated Metric Spans in JavaScript
DESCRIPTION: Shows how to create custom dedicated spans for tracking specific metrics and attributes, providing better discoverability and precise span configurations.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Database Query Metrics',
    op: 'db.metrics',
    attributes: {
      'db.query_type': 'SELECT',
      'db.table': 'users',
      'db.execution_time_ms': 45,
      'db.rows_returned': 100,
      'db.connection_pool_size': 5
    }
  },
  () => {
    // Your database operation here
  }
);

----------------------------------------

TITLE: Debug ID Injection Example in Minified JavaScript
DESCRIPTION: Example showing how Debug ID comments appear in minified source files after injection.

LANGUAGE: javascript
CODE:
...
//# debugId=<debug_id>
//# sourceMappingURL=<sourcemap_url>

----------------------------------------

TITLE: Deleting Option in Python Shell
DESCRIPTION: Demonstrates how to remove an option from the database using the Sentry shell.

LANGUAGE: python
CODE:
from sentry import options
options.delete("performance.some-feature-rate")

----------------------------------------

TITLE: Adding Additional Data to Exceptions in C#
DESCRIPTION: Add extra data to exceptions using the Exception.Data property before throwing.

LANGUAGE: csharp
CODE:
try
{
    // ...
}
catch (Exception exception)
{
    exception.Data.Add("SomeKey", "SomeValue");
    throw;
}

----------------------------------------

TITLE: Function and Package Matcher Examples
DESCRIPTION: Shows how to match specific functions and packages in stack traces.

LANGUAGE: bash
CODE:
stack.function:myproject_* +app
stack.function:malloc      -group

LANGUAGE: bash
CODE:
stack.package:**/libcurl.dylib -group

----------------------------------------

TITLE: Initializing Sentry with Replay and Canvas Integration in Angular
DESCRIPTION: This code initializes Sentry in an Angular application, configuring Replay and Canvas recording integrations. It sets the DSN, sample rates for replays, and adds the necessary integrations for session replay and canvas recording.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/angular";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    // Keep the Replay integration as before
    Sentry.replayIntegration(),

    // The following is all you need to enable canvas recording with Replay
    Sentry.replayCanvasIntegration(),
  ],
});

----------------------------------------

TITLE: Setting Sentry Scope Level in Kotlin
DESCRIPTION: This snippet configures the Sentry scope level to WARNING using Kotlin. It imports the required Sentry classes and uses a more concise lambda syntax to set the level.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryLevel

Sentry.configureScope { scope -> scope.level = SentryLevel.WARNING }

----------------------------------------

TITLE: Installing Sentry Solid SDK
DESCRIPTION: Commands to install the Sentry SDK for Solid using different package managers.

LANGUAGE: bash
CODE:
npm install @sentry/solid --save

LANGUAGE: bash
CODE:
yarn add @sentry/solid

LANGUAGE: bash
CODE:
pnpm add @sentry/solid

----------------------------------------

TITLE: Configuring Sentry Before Send Check-In Option in Symfony YAML
DESCRIPTION: This YAML configuration sets up the 'before_send_check_in' option for Sentry in a Symfony application. It defines a service that will be used to process events before they are sent to Sentry.

LANGUAGE: yaml
CODE:
sentry:
    options:
        before_send_check_in: 'sentry.callback.before_send_check_in'

services:
    sentry.callback.before_send_check_in:
        class: 'App\Service\Sentry'
        factory: [ '@App\Service\Sentry', 'getBeforeSendCheckIn' ]

----------------------------------------

TITLE: Adding Global Tags to Sentry Events in Java
DESCRIPTION: Demonstrates how to add global tags to all Sentry events by modifying the LoggerContext in Java.

LANGUAGE: java
CODE:
LoggerContext context = (LoggerContext)LoggerFactory.getILoggerFactory();
context.putProperty("global", "value");

----------------------------------------

TITLE: Common Stack Trace Rule Examples
DESCRIPTION: Shows practical examples of stack trace rules for marking functions, handling node modules, and generated code.

LANGUAGE: bash
CODE:
# mark all functions in the std namespace to be outside the app
family:native stack.function:std::*       -app

# mark all code in node modules not to be in app
stack.abs_path:**/node_modules/**         -app

# remove all generated javascript code from all grouping
stack.abs_path:**/generated/**.js         -group

----------------------------------------

TITLE: Accessing Request in Sentry BeforeSend Callback
DESCRIPTION: This snippet shows how to access the original HTTP request in Sentry's BeforeSend callback function, allowing for custom event modification based on request data.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	BeforeSend: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
		if hint.Context != nil {
			if req, ok := hint.Context.Value(sentry.RequestContextKey).(*http.Request); ok {
				// You have access to the original Request here
			}
		}

		return event
	},
})

----------------------------------------

TITLE: Setting Sentry SDK Scope Level in Swift
DESCRIPTION: This snippet demonstrates how to configure the Sentry SDK scope in Swift. It sets the scope level to 'warning' using the SentrySDK.configureScope method.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.configureScope { scope in
    scope.setLevel(.warning)
}

----------------------------------------

TITLE: Configuring Sentry Event Processing in GDScript
DESCRIPTION: Implements Sentry configuration with custom event processing logic. Includes environment-based filtering to discard debug events and sensitive information redaction. Extends SentryConfiguration and sets up before_send and on_crash handlers.

LANGUAGE: gdscript
CODE:
extends SentryConfiguration
## Tip: Assign configuration script in the Project Settings.

func _configure(options: SentryOptions):
	options.before_send = _process_event
	options.on_crash = _process_event

func _process_event(event: SentryEvent) -> SentryEvent:
	if event.environment == "debug":
		# Discard event if running in a debug build.
		return null
	if event.message.contains("Bruno"):
		# Remove sensitive information from the event.
		event.message = event.message.replace("Bruno", "REDACTED")
	return event

----------------------------------------

TITLE: Adding Sentry Logback Dependency in Maven
DESCRIPTION: Maven dependency configuration for including Sentry Logback integration in a Java project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-logback</artifactId>
    <version>{{@inject packages.version('sentry.java.logback', '4.2.0') }}</version>
</dependency>

----------------------------------------

TITLE: Including Sentry JavaScript SDK in HTML
DESCRIPTION: This snippet shows how to include the Sentry JavaScript SDK in an HTML file. It uses a script tag with integrity and crossorigin attributes for security.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Installing Sentry SDK with LaunchDarkly Support in Python
DESCRIPTION: Install the Sentry SDK with LaunchDarkly integration using pip. This command installs the latest version of sentry-sdk with the LaunchDarkly extra.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[launchdarkly]'

----------------------------------------

TITLE: Adding Span for Putting Data into Cache with Sentry in Ruby
DESCRIPTION: This snippet demonstrates how to create a span when putting data into the cache using Sentry. It includes setting the operation, cache key, item size, and network peer information.

LANGUAGE: ruby
CODE:
key = 'myCacheKey123'
value = 'The value I want to cache.'

Sentry.with_child_span(op: 'cache.put') do |span|
  # Set a key in your cache using your custom caching solution
  my_cache.set(key, value)

  # Describe the cache server you are accessing
  span.set_data('network.peer.address', 'cache.example.com/supercache')
  span.set_data('network.peer.port', 9000)

  # Add the key(s) you want to set
  span.set_data('cache.key', [key])

  # Add the size of the value you stored in the cache
  span.set_data('cache.item_size', value.size)  # Warning: if value is very big this could use lots of memory
end

----------------------------------------

TITLE: Recording Basic Breadcrumb in Python
DESCRIPTION: Demonstrates how to manually record a basic breadcrumb with message, category and level using the raven breadcrumbs module.

LANGUAGE: python
CODE:
from raven import breadcrumbs

breadcrumbs.record(message='This is an important message',
                   category='my_module', level='warning')

----------------------------------------

TITLE: Implementing Sentry Scope Management in Go
DESCRIPTION: Demonstrates how to use Sentry's scope functionality to add tags and set error levels before capturing exceptions. Shows both scoped error capture with custom tags and unscoped error capture for comparison.

LANGUAGE: go
CODE:
sentry.WithScope(func(scope *sentry.Scope) {
	scope.SetTag("my-tag", "my value");
	scope.SetLevel(sentry.LevelWarning);
	// will be tagged with my-tag="my value"
	sentry.CaptureException(errors.New("my error"))
})

// will not be tagged with my-tag
sentry.CaptureException(errors.New("my error"))

----------------------------------------

TITLE: Loading Sentry Instrumentation in Node.js
DESCRIPTION: Shows how to load Sentry instrumentation files in Node.js using either --require flag for CommonJS or --import flag for ES Modules. The ES Modules approach requires Node.js version 18.19.0 or higher.

LANGUAGE: bash
CODE:
# If you are using CommonJS (CJS)
node --require ./instrument.js app.js

# If you are using ECMAScript Modules (ESM)
# Note: This is only available for Node v18.19.0 onwards.
node --import ./instrument.mjs app.mjs

----------------------------------------

TITLE: Installing Sentry JDBC Dependency with Maven
DESCRIPTION: Add the Sentry JDBC dependency to your Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-jdbc</artifactId>
    <version>{{@inject packages.version('sentry.java.openfeign', '5.3.0') }}</version>
</dependency>

----------------------------------------

TITLE: Manually Setting Sentry Release Version in JavaScript
DESCRIPTION: Demonstrates how to manually override the release version when initializing Sentry in an Electron application. By default, the SDK uses appName@version, but this can be customized using the release option in the init configuration.

LANGUAGE: javascript
CODE:
Sentry.init({
  release: "my-project-name@2.3.12",
});

----------------------------------------

TITLE: Logging with Additional Data in Java
DESCRIPTION: This Java example demonstrates how to add extra data to log events using ThreadContext.

LANGUAGE: java
CODE:
void logWithExtras() {
  // ThreadContext ("MDC") extras
  ThreadContext.put("Environment", "Development");
  ThreadContext.put("OS", "Linux");

  // This sends an event where the Environment and OS MDC values are set as additional data
  logger.error("This is a test");
}

----------------------------------------

TITLE: Importing Sentry Instrumentation in Custom Express Server
DESCRIPTION: TypeScript code showing how to import Sentry instrumentation in a custom Express server for Remix applications.

LANGUAGE: typescript
CODE:
// import the Sentry instrumentation file before anything else.
import "./instrument.server.mjs";
// alternatively `require('./instrument.server.cjs')`

// ...

const app = express();

// ...

----------------------------------------

TITLE: Configuring Sentry Component Tracking in Svelte
DESCRIPTION: Demonstrates how to wrap the Svelte config with Sentry's withSentryConfig function to enable component tracking. This setup inserts Sentry's component tracking preprocessor into the Svelte configuration.

LANGUAGE: javascript
CODE:
import { withSentryConfig } from "@sentry/svelte";

const config = {
  // Your svelte config
  compilerOptions: {...},
};

export default withSentryConfig(config);

----------------------------------------

TITLE: Adding Sentry Tag to Composable for User Interaction Tracking
DESCRIPTION: Apply a Sentry tag to a Composable to enable user interaction tracking for that element.

LANGUAGE: kotlin
CODE:
import io.sentry.compose.sentryTag

@Composable
fun LoginScreen() {
  Column {
    // ...
    Button(
        modifier = Modifier.sentryTag("button_login"),
        onClick = { TODO() }) {
        Text(text = "Login")
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry SDK with Crash Handling in Swift
DESCRIPTION: This snippet shows how to initialize the Sentry SDK in Swift with a configuration for handling crashes from the last run. It sets up the DSN and defines a callback function for the onCrashedLastRun option.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.onCrashedLastRun = { event in
        // capture user feedback
    }
}

----------------------------------------

TITLE: Initializing Sentry with ElectronMinidump Integration
DESCRIPTION: Demonstrates how to initialize Sentry with the ElectronMinidump integration in an Electron main process. This configuration automatically removes the SentryMinidump integration to prevent duplicate crash reports.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.electronMinidumpIntegration()],
});

----------------------------------------

TITLE: Rendered Mermaid Flowchart
DESCRIPTION: The actual Mermaid flowchart implementation showing a simple flow diagram with Start and Stop nodes connected by an arrow.

LANGUAGE: mermaid
CODE:
flowchart TD
    Start --> Stop

----------------------------------------

TITLE: Setting User Information in Sentry Scope using C#
DESCRIPTION: This C# code snippet demonstrates how to configure the Sentry scope to include user information. It sets the user's email address using the SentrySdk.ConfigureScope method.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.User = new User
    {
        Email = "john.doe@example.com"
    };
});

----------------------------------------

TITLE: Initializing Sentry with RewriteFrames Integration using npm
DESCRIPTION: This snippet shows how to initialize Sentry with the RewriteFrames integration using npm. It imports Sentry from '@sentry/browser' and sets up the initialization with a DSN and the RewriteFrames integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.rewriteFramesIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry SDK with LaunchDarkly Integration in Python
DESCRIPTION: Initialize the Sentry SDK with LaunchDarkly integration. This code sets up Sentry with the LaunchDarkly integration and enables sending default PII data.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.launchdarkly import LaunchDarklyIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    integrations=[
        LaunchDarklyIntegration(),
    ],
)

----------------------------------------

TITLE: Configuring Trace Sampling Rate
DESCRIPTION: PHP configuration for enabling tracing with full sampling rate

LANGUAGE: php
CODE:
'traces_sample_rate' => 1.0,

----------------------------------------

TITLE: Creating Sentry Attachment in Kotlin
DESCRIPTION: This snippet demonstrates how to create a Sentry attachment using the Kotlin Multiplatform SDK. It imports the required Sentry classes and initializes an Attachment object with a file path.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry
import io.sentry.kotlin.multiplatform.Attachment

val attachment = Attachment("your/path/file.log")

----------------------------------------

TITLE: Implementing Custom Trace Sampling in Sentry Java SDK
DESCRIPTION: Example showing how to implement a custom sampling function that accepts a sampling context and returns a sampling decision between 0 and 1. The function should respect parent sampling decisions and can return null to defer to SDK defaults.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setTracesSampler(context -> {
    // If there's a parent sampling decision, respect it
    if (context.getParentSampled() != null) {
      return context.getParentSampled() ? 1.0 : 0.0;
    }
    
    // Otherwise sample based on URL
    String url = context.getTransactionContext().getName();
    
    // These are important - sample 100% of the time
    if (url.contains("/payment")) {
      return 1.0;
    }
    
    // These are less important - only sample 10% of the time
    if (url.contains("/search")) {
      return 0.1;
    }

    // Default sample rate
    return 0.5;
  });
});

----------------------------------------

TITLE: Including Sentry User Feedback via CDN in HTML
DESCRIPTION: This HTML snippet shows how to include Sentry's User Feedback functionality using CDN bundles. It provides two options: a comprehensive bundle including feedback, replay, error, and tracing, and a smaller bundle for feedback and error monitoring only.

LANGUAGE: html
CODE:
<!-- Recommended: Use this bundle for feedback, replay, error, and tracing -->
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.replay.feedback.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.replay.feedback.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<!-- Alternatively, you can use this bundle for feedback and error monitoring only -->
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.feedback.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.feedback.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Configuring Sentry SDK with Socket Integration
DESCRIPTION: Initialize Sentry SDK with Socket Integration, including configuration for performance monitoring and profiling. Includes settings for traces and profiles sampling rates.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.socket import SocketIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
    integrations=[
        SocketIntegration(),
    ],
)

----------------------------------------

TITLE: Using Comparison Operators in Sentry Search
DESCRIPTION: Examples of using comparison operators (>, <, >=, <=) in Sentry search queries. These are typically used with numerical or duration properties to find matches within a range.

LANGUAGE: plaintext
CODE:
event.timestamp:>2023-09-28T00:00:00-07:00
count_dead_clicks:<=10
transaction.duration:>5s

----------------------------------------

TITLE: Disabling NDK Integration in AndroidManifest.xml
DESCRIPTION: This snippet shows how to disable the NDK integration by adding a meta-data entry to the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<application>
    <meta-data android:name="io.sentry.ndk.enable" android:value="false" />
</application>

----------------------------------------

TITLE: Verifying Dramatiq Integration with Test Error
DESCRIPTION: Example code that triggers a ZeroDivisionError in a Dramatiq actor to verify the integration is working correctly.

LANGUAGE: python
CODE:
import dramatiq

import sentry_sdk
sentry_sdk.init(...)  # same as above

@dramatiq.actor(max_retries=0)
def dummy_actor(x, y):
    return x / y

dummy_actor.send(5, 0)

----------------------------------------

TITLE: Initializing Sentry with Reporting Observer via NPM
DESCRIPTION: Sets up Sentry using NPM package with the Reporting Observer integration. Requires @sentry/browser package to be installed.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.reportingObserverIntegration()],
});

----------------------------------------

TITLE: Installing Sentry.Extensions.Logging Package via .NET Core CLI
DESCRIPTION: Command to install the Sentry.Extensions.Logging NuGet package using the .NET Core CLI.

LANGUAGE: shell
CODE:
dotnet add package Sentry.Extensions.Logging -v {{@inject packages.version('sentry.dotnet.extensions.logging') }}

----------------------------------------

TITLE: Setting Sentry BeforeSend Callback in F#
DESCRIPTION: F# implementation of Sentry SDK configuration for custom exception fingerprinting. Uses pattern matching to identify SQL connection exceptions and set a custom fingerprint for better error grouping.

LANGUAGE: fsharp
CODE:
options.SetBeforeSend(fun event ->
    match event.Exception with
    | :? SqlConnectionException -> event.SetFingerprint(["database-connection-error"])
    | _ -> ()

    event
    )

----------------------------------------

TITLE: Initializing Sentry and LaunchDarkly Integration in Solid.js
DESCRIPTION: This snippet initializes Sentry with LaunchDarkly integration, sets up the LaunchDarkly client, and demonstrates flag evaluation and error capturing. It requires the Sentry and LaunchDarkly SDKs as dependencies.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solid';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Configuring Function ID for Telemetry
DESCRIPTION: Example of generating text with AI SDK while providing a functionId for telemetry identification and tracking.

LANGUAGE: javascript
CODE:
const result = await generateText({
  model: openai("gpt-4-turbo"),
  experimental_telemetry: { functionId: "my-awesome-function" },
});

----------------------------------------

TITLE: Configuring Option Support in MDX
DESCRIPTION: Example of how to mark configuration options as supported or not supported for specific SDKs using ConfigKey component.

LANGUAGE: mdx
CODE:
<ConfigKey name="debug" notSupported={["javascript.react"]}>

LANGUAGE: mdx
CODE:
<ConfigKey name="send-default-pii" supported={["javascript.electron", "javascript.ember"]}>

LANGUAGE: mdx
CODE:
<PlatformSection supported={["javascript.react"]}>

----------------------------------------

TITLE: Setting CMD for Sentry Handler in Dockerfile for AWS Lambda
DESCRIPTION: This snippet demonstrates how to set the CMD value in a Dockerfile to use the Sentry Lambda Handler for an AWS Lambda Container Image.

LANGUAGE: docker
CODE:
CMD ["sentry_sdk.integrations.init_serverless_sdk.sentry_lambda_handler"]

----------------------------------------

TITLE: Adding Sentry Kotlin Multiplatform SDK Plugin to build.gradle.kts
DESCRIPTION: This code snippet shows how to add the Sentry Kotlin Multiplatform SDK plugin to the build.gradle.kts file in the shared module. The plugin installs the Sentry KMP dependency and, if using the Cocoapods plugin, it also installs the Sentry Cocoa dependency.

LANGUAGE: kotlin
CODE:
plugins {
  id("io.sentry.kotlin.multiplatform.gradle") version "{{@inject packages.version('sentry.kotlin.kmp', '0.9.0') }}"
}

----------------------------------------

TITLE: Debug ID Format in Minified JavaScript
DESCRIPTION: Example of how Debug IDs appear in minified source files as comments.

LANGUAGE: javascript
CODE:
...
//# debugId=<debug_id>
//# sourceMappingURL=<sourcemap_url>

----------------------------------------

TITLE: Device Classification Table - Android
DESCRIPTION: Markdown table showing device class classifications for Android devices based on processor and memory specifications.

LANGUAGE: markdown
CODE:
| `device.class` for Android | `processor_count` | `processor_frequency` | `memory_size` |
| -------------------------- | ----------------- | --------------------- | ------------- |
| high                       | >= 8              | >= 2500 MHz           | >= 6 GiB      |
| medium                     | >= 8              | >= 2000 MHz           | >= 4 GiB      |
| low                        | < 8               | < 2000 MHz            | < 4 GiB       |

----------------------------------------

TITLE: Configuring Sentry Scope with Tags and User Data in PHP
DESCRIPTION: Sets up Sentry scope configuration by adding a custom tag and user information. Uses the configureScope method to set tag 'my-tag' and user details including ID and email.

LANGUAGE: php
CODE:
\Sentry\configureScope(function (\Sentry\State\Scope $scope): void {
    $scope->setTag('my-tag', 'my value');
    $scope->setUser([
        'id' => '42',
        'email' => 'john.doe@example.com',
    ]);
});

----------------------------------------

TITLE: Setting Extra Context Data with Sentry C SDK
DESCRIPTION: Creates a new string value and sets it as extra context data in Sentry. This allows adding custom key-value pairs to error reports for additional debugging context.

LANGUAGE: c
CODE:
#include <sentry.h>

sentry_value_t extra_value = sentry_value_new_string("Mighty Fighter");
sentry_set_extra("character.name", screen);

----------------------------------------

TITLE: Installing Sentry SDK in Kotlin Multiplatform Project
DESCRIPTION: This snippet demonstrates how to add the Sentry SDK dependency to a Kotlin Multiplatform project using Gradle. It includes configuration for Android and iOS targets, as well as Cocoapods setup for iOS.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("multiplatform")
    kotlin("native.cocoapods")
    // .. your other plugins
}

kotlin {
  android()
  iosX64()
  iosArm64()
  iosSimulatorArm64()

  sourceSets {
    val commonMain by getting {
      dependencies {
        implementation("io.sentry:sentry-kotlin-multiplatform:{{@inject packages.version('sentry.kotlin.kmp', '0.0.1-alpha.2') }}")
      }
    }

    // Android target
    val androidMain by getting {
      dependsOn(commonMain)
    }

    // Apple targets:
    val iosMain by getting {
      dependsOn(commonMain)
    }
  }

  cocoapods {
    // rest of configuration
    summary = "Some description for the Shared Module"
    homepage = "Link to the Shared Module homepage"
    ios.deploymentTarget = "14.1"
    podfile = project.file("../iosApp/Podfile")
    // Make sure you use the proper version according to our Cocoa SDK Version Compatibility Table.
    // TODO: link to table in sentry-kotlin-multiplatform gh repo
    pod("Sentry") {
      // Check the version compatibility table for the correct version
      version = "8.36.0"
      linkOnly = true
      extraOpts += listOf("-compiler-option", "-fmodules")
    }
  }
}

----------------------------------------

TITLE: Configuring Sentry Maven Plugin
DESCRIPTION: Maven plugin configuration for Sentry integration, including source bundle upload capabilities and authentication setup. Enables source context for stack traces in Sentry dashboard.

LANGUAGE: xml
CODE:
<plugin>
  <groupId>io.sentry</groupId>
  <artifactId>sentry-maven-plugin</artifactId>
  <version>{{@inject packages.version('sentry.java.maven-plugin', '0.0.2') }}</version>
  <extensions>true</extensions>
  <configuration>
    <org>___SENTRY_ORG_SLUG___</org>
    <project>___SENTRY_PROJECT_SLUG___</project>
    <authToken>___SENTRY_AUTH_TOKEN___</authToken>
    <debugSentryCli>true</debugSentryCli>
   </configuration>
   <executions>
    <execution>
      <goals>
        <goal>uploadSourceBundle</goal>
      </goals>
    </execution>
  </executions>
</plugin>

----------------------------------------

TITLE: Building Excimer from Source
DESCRIPTION: Commands to clone and build the Excimer PHP extension from source code.

LANGUAGE: bash
CODE:
git clone https://github.com/wikimedia/mediawiki-php-excimer.git

cd excimer/
phpize && ./configure && make && sudo make install

----------------------------------------

TITLE: Adding Custom Sampling Context Data in Sentry Transaction (Python)
DESCRIPTION: Demonstrate how to add custom data to the sampling context when starting a transaction.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.start_transaction(
    name="checkout",
    sampling_context={"user_id": "12312012", "cart_value": 435.99},
)

----------------------------------------

TITLE: Configuring Sentry Exception Handling in Spring 6 (Kotlin)
DESCRIPTION: This snippet shows how to configure Sentry's exception handling behavior in a Spring 6 application using Kotlin. It sets the exceptionResolverOrder to LOWEST_PRECEDENCE to capture all exceptions.

LANGUAGE: kotlin
CODE:
import io.sentry.spring.jakarta.EnableSentry
import org.springframework.core.Ordered
// NOTE: Replace the test DSN below with YOUR OWN DSN to see the events from this app in your Sentry
// project/dashboard
@EnableSentry(
  dsn = "___PUBLIC_DSN___",
  // Add data like request headers and IP for users,
  // see https://docs.sentry.io/platforms/java/guides/spring/data-management/data-collected/ for more info
  sendDefaultPii = true,
  exceptionResolverOrder = Ordered.LOWEST_PRECEDENCE
)
class SentryConfiguration

----------------------------------------

TITLE: Initializing Sentry SDK in Lambda Handler Code
DESCRIPTION: Manual initialization of Sentry SDK in Lambda function code, including performance monitoring configuration and handler wrapping. Demonstrates how to set up error tracking and performance monitoring programmatically.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/aws-serverless");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Add Tracing by setting tracesSampleRate and adding integration
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
});

exports.handler = Sentry.wrapHandler(async (event, context) => {
  // Your handler code
});

----------------------------------------

TITLE: Recording Breadcrumbs in Kotlin
DESCRIPTION: Example of how to record breadcrumbs before sending an event in the new sentry-java library using Kotlin.

LANGUAGE: kotlin
CODE:
Sentry.getContext().recordBreadcrumb(
  BreadcrumbBuilder().setMessage("Made a call to the database.").build()
)

----------------------------------------

TITLE: Publishing Sentry Configuration in Laravel
DESCRIPTION: Artisan command to publish the Sentry configuration file in Laravel.

LANGUAGE: bash
CODE:
php artisan vendor:publish --provider="Sentry\SentryLaravel\SentryLaravelServiceProvider"

----------------------------------------

TITLE: Configuring Custom Session Timeout in Sentry React Native
DESCRIPTION: Demonstrates how to initialize Sentry with custom session tracking settings, including setting a custom timeout interval for background sessions. This example sets the session to close after 10 seconds in the background.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  enableAutoSessionTracking: true,
  // Sessions close after app is 10 seconds in the background.
  sessionTrackingIntervalMillis: 10000,
});

----------------------------------------

TITLE: Allowing User Registration in YAML
DESCRIPTION: Configures whether Sentry should allow users to create new accounts via public registration.

LANGUAGE: yaml
CODE:
auth.allow-registration: true

----------------------------------------

TITLE: Setting User Context in Sentry Node.js
DESCRIPTION: Initializes Sentry Node.js client and sets user information for error tracking. This allows Sentry to associate errors with specific users when monitoring application issues.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

Sentry.setUser({ email: "john.doe@example.com" });

----------------------------------------

TITLE: Linking Errors with Spans in Objective-C
DESCRIPTION: This snippet shows how to start a transaction, process an item, and capture any errors in Objective-C. The transaction is bound to the scope, which automatically links any errors to the transaction.

LANGUAGE: objc
CODE:
@import Sentry;

id<SentrySpan> transaction = [SentrySDK startTransactionWithName:@"Transaction Name" operation:@"operation" bindToScope:YES];
NSError * error;

if (processItem(error: &error)) {
  [transaction finish];
} else {
  [SentrySDK captureError:error];
  [transaction finishWithStatus:kSentrySpanStatusInternalError];
}

----------------------------------------

TITLE: Initializing Sentry Environment in Java
DESCRIPTION: Programmatically initializes Sentry SDK and sets the environment using Java. Uses SentryAndroid.init() with options configuration to set the environment to 'production'.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  options.setEnvironment("production");
});

----------------------------------------

TITLE: Including Sentry JavaScript SDK in HTML
DESCRIPTION: This snippet shows how to include the Sentry JavaScript SDK in an HTML file using a script tag. It uses a specific version and integrity hash for security.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Initializing Sentry Transaction with Sampling Context in C#
DESCRIPTION: Creates a new Sentry transaction with custom sampling context including user_id and search_results. Demonstrates setting up the sampling context dictionary and configuring transaction properties like operation and description after initialization.

LANGUAGE: csharp
CODE:
// The following data will take part in the sampling decision
var samplingContext = new Dictionary<string, object?>
{
    ["user_id"] = 12312012,
    ["search_results"] = searchResults
};

var transaction = SentrySdk.StartTransaction(
  new TransactionContext("GET /search", "http")
  samplingContext
);

// The following is set on transaction, so does not take part in
// the sampling decision
transaction.Operation = "http";
transaction.Description = "search results";

----------------------------------------

TITLE: Performing Heartbeat Monitoring via HTTP
DESCRIPTION: This snippet shows how to perform heartbeat monitoring using HTTP GET requests for successful completion and failure scenarios.

LANGUAGE: http
CODE:
GET /api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/?status=ok HTTP/1.1
Host: ___ORG_INGEST_DOMAIN___

GET /api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/?status=error HTTP/1.1
Host: ___ORG_INGEST_DOMAIN___

----------------------------------------

TITLE: Configuring Local Variables Handling in PHP
DESCRIPTION: PHP.ini configuration settings to control whether local variables are included in error reports sent to Sentry

LANGUAGE: php
CODE:
zend.exception_ignore_args=1

----------------------------------------

TITLE: Configuring SOCKS5 Proxy in Sentry Native SDK
DESCRIPTION: Demonstrates SOCKS5 proxy configuration for the Sentry Native SDK. This functionality is available on Linux and macOS platforms.

LANGUAGE: c
CODE:
sentry_options_t *options = sentry_options_new();
sentry_options_set_proxy(options, "socks5://my.proxy:1080");
sentry_init(options);

/* ... */

----------------------------------------

TITLE: Installing Sentry SDK via pip in Python
DESCRIPTION: This snippet shows how to install the Sentry SDK using pip, the Python package installer.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk'

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Elixir
DESCRIPTION: Demonstrates error handling pattern using try-rescue block to capture exceptions and report them to Sentry. The code includes capturing the exception along with its stacktrace using Sentry's capture_exception function.

LANGUAGE: elixir
CODE:
try do
  raise "This is a test!"
rescue
  exception ->
    Sentry.capture_exception(exception, stacktrace: __STACKTRACE__)
end

----------------------------------------

TITLE: Configuring Sentry HTTP Integration Session Tracking
DESCRIPTION: Demonstrates how to initialize Sentry SDK with HTTP integration configuration to disable automatic session tracking for incoming requests. The trackIncomingRequestsAsSessions option controls whether HTTP requests are tracked as sessions.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.httpIntegration({
    trackIncomingRequestsAsSessions: false, // default: true
  })]
});

----------------------------------------

TITLE: Building Flutter Application with Obfuscation
DESCRIPTION: Commands for building Flutter applications for various platforms with obfuscation and debug symbol generation.

LANGUAGE: bash
CODE:
flutter build apk --obfuscate --split-debug-info=<output-directory>
flutter build ios --obfuscate --split-debug-info=<output-directory>
flutter build macos --obfuscate --split-debug-info=<output-directory>
flutter build windows --obfuscate --split-debug-info=<output-directory>
flutter build linux --obfuscate --split-debug-info=<output-directory>

----------------------------------------

TITLE: Configuring Sentry Scope in Kotlin
DESCRIPTION: This snippet shows how to configure the Sentry scope in Kotlin. It performs the same operations as the Java version, setting a custom tag and user information within the Sentry scope.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.protocol.User

Sentry.configureScope { scope ->
  scope.setTag("my-tag", "my value")
  scope.user = User().apply {
    id = "42"
    email = "john.doe@example.com"
  }
}

----------------------------------------

TITLE: Adding Sentry Error Reporting to Laravel Lumen Exception Handler
DESCRIPTION: Modify the report method in app/Exceptions/Handler.php to capture exceptions with Sentry if it's bound to the application container.

LANGUAGE: php
CODE:
public function report(Throwable $exception)
{
    if (app()->bound('sentry') && $this->shouldReport($exception)) {
        app('sentry')->captureException($exception);
    }

    parent::report($exception);
}

----------------------------------------

TITLE: Initializing Sentry SDK in Swift for iOS
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK in a Swift iOS application. It configures the SDK with a DSN and enables debug mode in the application's didFinishLaunchingWithOptions method.

LANGUAGE: swift
CODE:
import Sentry // Make sure you import Sentry

// ....

func application(_ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {

    SentrySDK.start { options in
        options.dsn = "___PUBLIC_DSN___"
        options.debug = true // Enabled debug when first installing is always helpful
    }

    return true
}

----------------------------------------

TITLE: Configuring Dead Click Ignore Selectors in JavaScript
DESCRIPTION: Example of how to configure the Sentry SDK to ignore dead and rage clicks for specific selectors like download links using the slowClickIgnoreSelectors option.

LANGUAGE: javascript
CODE:
Sentry.replayIntegration({
  slowClickIgnoreSelectors: [
    ".download",
    // Any link with a label including "download" (case-insensitive)
    'a[label*="download" i]',
  ],
});

----------------------------------------

TITLE: Adding Local Scope Event Processor in Sentry JavaScript
DESCRIPTION: This example demonstrates how to add an event processor within a local scope using withScope. The processor only applies to events captured inside that scope.

LANGUAGE: javascript
CODE:
Sentry.withScope(function (scope) {
  scope.addEventProcessor(function (event, hint) {
    // Add anything to the event here
    // returning `null` will drop the event
    return event;
  });
  // The event processor will apply to this event
  Sentry.captureMessage("Test");
});

// The event processor will NOT apply to this event
Sentry.captureMessage("Test2");

----------------------------------------

TITLE: Initializing Sentry with Console Capture using Loader (v7)
DESCRIPTION: This snippet shows how to set up Sentry with console capture integration using the Sentry Loader script (version 7). It configures the sentryOnLoad function to initialize Sentry and add the console capture integration if available.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});

    if (Sentry.captureConsoleIntegration) {
      Sentry.addIntegration(Sentry.captureConsoleIntegration());
    }
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/7.118.0/captureconsole.min.js"
  integrity="sha384-VFallslCjDR2cuAcmExABGThuV4+sfW+06c+UaqO4Fe6unI7ZD1CofpFWEwO2rQK"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Setting Sentry Environment Configuration in Laravel
DESCRIPTION: Configuration setting that defines the environment for Sentry error tracking. When not specified, it defaults to the Laravel environment value.

LANGUAGE: php
CODE:
// When left empty or `null` the Laravel environment will be used
'environment' => 'production',

----------------------------------------

TITLE: Generating Metro Bundle and Source Maps for Android
DESCRIPTION: Command to generate the React Native Packager (Metro) bundle and source maps for Android platform using react-native CLI.

LANGUAGE: bash
CODE:
npx react-native bundle \
  --dev false \
  --minify false \
  --platform android \
  --entry-file index.js \
  --reset-cache \
  --bundle-output index.android.bundle \
  --sourcemap-output index.android.bundle.map

----------------------------------------

TITLE: Setting Document-Policy Header for JS Profiling
DESCRIPTION: Configuration required in the document response header to enable JavaScript browser profiling. The header must include 'Document-Policy: js-profiling' for the profiler to function.

LANGUAGE: http
CODE:
Document-Policy: js-profiling

----------------------------------------

TITLE: Searching Multiple Values for the Same Key in Sentry
DESCRIPTION: Demonstrates how to search for multiple values associated with the same key in Sentry. This approach uses a list syntax and is equivalent to using OR between individual key:value pairs.

LANGUAGE: plaintext
CODE:
release:[12.0, 13.0]

----------------------------------------

TITLE: Setting Sentry Auth Token in Environment
DESCRIPTION: Sets the Sentry auth token as an environment variable for source map uploading.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Installing Sentry GraphQL Java 22 Integration
DESCRIPTION: Instructions for installing the Sentry GraphQL Java 22 integration using different dependency management systems.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.jvm.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.12.0') }}"
}

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-graphql-22:{{@inject packages.version('sentry.java.graphql-22', '8.0.0') }}'

LANGUAGE: xml
CODE:
<plugin>
  <groupId>io.sentry</groupId>
  <artifactId>sentry-maven-plugin</artifactId>
  <version>{{@inject packages.version('sentry.java.maven-plugin', '0.0.2') }}</version>
  <!-- Required to allow auto-install of Sentry SDK and Integrations -->
  <extensions>true</extensions>
</plugin>

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-graphql-22</artifactId>
    <version>{{@inject packages.version('sentry.java.graphql-22', '8.0.0') }}</version>
</dependency>

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-graphql-22" % "{{@inject packages.version('sentry.java.graphql-22', '8.0.0') }}"

----------------------------------------

TITLE: Initializing Sentry SDK in JavaScript
DESCRIPTION: This snippet initializes the Sentry SDK with a custom configuration. It sets the DSN (Data Source Name) for the Sentry project and defines trace propagation targets for performance monitoring. The trace propagation targets include a specific domain and a regular expression for API routes.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracePropagationTargets: ["https://myproject.org", /^\/api\//],
});

----------------------------------------

TITLE: Implementing Sentry Breadcrumb Service in PHP
DESCRIPTION: PHP service class that implements the before_breadcrumb callback functionality. Returns a callable function that processes Sentry breadcrumbs.

LANGUAGE: php
CODE:
<?php

namespace App\Service;

class Sentry
{
    public function getBeforeBreadcrumb(): callable
    {
        return function(\Sentry\Breadcrumb $breadcrumb): ?\Sentry\Breadcrumb {
            return $breadcrumb;
        };
    }
}

----------------------------------------

TITLE: Configuring Sentry Appender in XML (New Version)
DESCRIPTION: Example of how to configure the Sentry appender in the new sentry-java library using XML. This shows only the appender configuration, with Sentry-specific settings moved to a separate properties file.

LANGUAGE: xml
CODE:
<appender name="Sentry" class="io.sentry.logback.SentryAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
        <level>WARN</level>
    </filter>
</appender>

----------------------------------------

TITLE: Installing Sentry Dependencies
DESCRIPTION: Maven, Gradle and SBT dependency configurations for adding Sentry to a Java project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry</artifactId>
    <version>1.7.30</version>
</dependency>

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry:1.7.30'

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry" % "1.7.30"

----------------------------------------

TITLE: Initializing Sentry for Server-Side JavaScript in React
DESCRIPTION: This snippet demonstrates Sentry initialization for a server-side React application. It includes the DSN configuration and a commented-out section for enabling metrics aggregator in older SDK versions.

LANGUAGE: javascript
CODE:
// entry.server.tsx
Sentry.init({
  dsn: '___PUBLIC_DSN___',
  // Only needed for SDK versions < 8.0.0
  // _experiments: {
  //   metricsAggregator: true,
  // },
});

----------------------------------------

TITLE: Grouping Errors More Aggressively in Sentry SDK
DESCRIPTION: Demonstrates how to completely overwrite Sentry's default grouping by omitting '{{ default }}' from the fingerprint array. This is useful for generic errors like database connection errors with many different stack traces.

LANGUAGE: JavaScript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['database-connection-error']);
  Sentry.captureException(error);
});

LANGUAGE: Python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.fingerprint = ['database-connection-error']
    sentry_sdk.capture_exception(error)

LANGUAGE: Java
CODE:
Sentry.withScope(scope -> {
    scope.setFingerprint(Arrays.asList("database-connection-error"));
    Sentry.captureException(error);
});

LANGUAGE: Ruby
CODE:
Sentry.with_scope do |scope|
  scope.set_fingerprint(['database-connection-error'])
  Sentry.capture_exception(error)
end

LANGUAGE: PHP
CODE:
\Sentry\withScope(function (\Sentry\State\Scope $scope) use ($error): void {
    $scope->setFingerprint(['database-connection-error']);
    \Sentry\captureException($error);
});

LANGUAGE: C#
CODE:
using (SentrySdk.PushScope())
{
    SentrySdk.ConfigureScope(scope =>
    {
        scope.SetFingerprint(new [] { "database-connection-error" });
    });
    SentrySdk.CaptureException(error);
}

----------------------------------------

TITLE: Legacy Gatsby SDK Initialization
DESCRIPTION: Previous method of initializing Sentry Gatsby SDK using plugin options in gatsby-config.js file.

LANGUAGE: javascript
CODE:
module.exports = {
  // ...
  plugins: [
    {
      resolve: '@sentry/gatsby',
      options: {
        dsn: process.env.SENTRY_DSN,
      },
    },
    // ...
  ],
};

----------------------------------------

TITLE: Creating and Updating Sentry Monitor with JavaScript
DESCRIPTION: This snippet demonstrates how to create or update a Sentry Monitor using the Sentry.withMonitor() function. It includes the monitor configuration and a placeholder for the scheduled task execution.

LANGUAGE: javascript
CODE:
const monitorConfig = {
  schedule: {
    type: "crontab",
    value: "* * * * *",
  },
  checkinMargin: 2, // In minutes. Optional.
  maxRuntime: 10, // In minutes. Optional.
  timezone: "America/Los_Angeles", // Optional.
};

Sentry.withMonitor(
  "<monitor-slug>",
  () => {
    // Execute your scheduled task here...
  },
  monitorConfig
);

----------------------------------------

TITLE: Configuring Sentry Appender in XML (New Version)
DESCRIPTION: Example of how to configure the Sentry appender in the new sentry-java library using XML. This shows only the appender configuration, with Sentry-specific settings moved to a separate properties file.

LANGUAGE: xml
CODE:
<appender name="Sentry" class="io.sentry.logback.SentryAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
        <level>WARN</level>
    </filter>
</appender>

----------------------------------------

TITLE: Disabling Component Instrumentation
DESCRIPTION: Configuration to disable component performance instrumentation in the Sentry Ember addon.

LANGUAGE: javascript
CODE:
ENV["@sentry/ember"] = {
  disableInstrumentComponents: true,
};

----------------------------------------

TITLE: Initializing Sentry SDK in Xamarin C#
DESCRIPTION: Demonstrates the basic initialization of the Sentry SDK in a Xamarin application. The SDK automatically handles shutdown after the specified ShutdownTimeout and manages cleanup during unhandled exceptions.

LANGUAGE: csharp
CODE:
SentryXamarin.Init(...));
// App code

----------------------------------------

TITLE: Using Event Hints for Custom Fingerprinting in JavaScript
DESCRIPTION: This example shows how to use event hints in the beforeSend callback to modify the event fingerprint based on the type of exception.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event, hint) {
    if (hint.originalException instanceof DatabaseUnavailable) {
      event.fingerprint = ['database-unavailable'];
    }
    return event;
  },
});

----------------------------------------

TITLE: Configuring Cloudflare Compatibility Flags in TOML
DESCRIPTION: Set the 'nodejs_compat' or 'nodejs_als' compatibility flag in the wrangler.toml file to enable AsyncLocalStorage API access for the Sentry SDK.

LANGUAGE: toml
CODE:
compatibility_flags = ["nodejs_compat"]
# compatibility_flags = ["nodejs_als"]

----------------------------------------

TITLE: Forcing Sampling Decision in Sentry Transaction Creation
DESCRIPTION: Directly specify the sampling decision when creating a transaction to bypass the normal sampling logic. This ensures the transaction is either always or never sent to Sentry.

LANGUAGE: javascript
CODE:
const transaction = Sentry.startTransaction({
  name: "test-transaction",
  sampled: true, // or false
});

----------------------------------------

TITLE: Setting Sentry Sample Rate via XML Metadata in Android
DESCRIPTION: This snippet shows how to set the Sentry sample rate to 0.25 using XML metadata in an Android project. This method is typically used in the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<meta-data android:name="io.sentry.sample-rate" android:value="0.25" />

----------------------------------------

TITLE: Implementing SentryCron Decorator in NestJS Service
DESCRIPTION: Demonstrates how to use the @SentryCron decorator in conjunction with NestJS's @Cron decorator to monitor cron jobs. The decorator accepts a monitor slug and configuration options including schedule type, checkin margin, maximum runtime, and timezone settings.

LANGUAGE: typescript
CODE:
import { Cron } from '@nestjs/schedule';
import { SentryCron } from '@sentry/nestjs';

export class MyCronService {
  @Cron('* * * * *')
  @SentryCron('my-monitor-slug', {
    schedule: {
      type: "crontab",
      value: "* * * * *",
    },
    checkinMargin: 2, // In minutes. Optional.
    maxRuntime: 10, // In minutes. Optional.
    timezone: "America/Los_Angeles", // Optional.
  })
  handleCron() {
    // Your cron job logic here
  }
}

----------------------------------------

TITLE: Customizing Django Error Views for Sentry Reporting
DESCRIPTION: This code snippet demonstrates how to create a custom view for handling 404 Not Found errors and reporting them to Sentry. It includes modifications to urls.py and views.py files.

LANGUAGE: python
CODE:
# urls.py

handler404 = 'mysite.views.my_custom_page_not_found_view'

# views.py

from django.http import HttpResponseNotFound
from sentry_sdk import capture_message


def my_custom_page_not_found_view(*args, **kwargs):
    capture_message("Page not found!", level="error")

    # return any response here, e.g.:
    return HttpResponseNotFound("Not found")

----------------------------------------

TITLE: Initializing Sentry with Renderer Profiling in Electron Main Process
DESCRIPTION: Demonstrates how to initialize Sentry in an Electron main process with renderer profiling enabled. This configuration allows for header injection to support profiling functionality.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  enableRendererProfiling: true,
});

----------------------------------------

TITLE: Configuring Sentry Instrumentation for GraphQL Client (F#)
DESCRIPTION: Configure the GraphQLHttpClient to use SentryGraphQLHttpMessageHandler for error capturing in F#. This setup allows Sentry to intercept and report GraphQL over HTTP errors.

LANGUAGE: fsharp
CODE:
let graphClient =
    new GraphQLHttpClient(
        fun options ->
            options.EndPoint <- Uri("http://your.app.server/graphql")
            options.HttpMessageHandler <- new SentryGraphQLHttpMessageHandler() // <-- Configure GraphQL use Sentry Message Handler
        ,
        new SystemTextJsonSerializer()
    )

----------------------------------------

TITLE: Java Logging Implementation
DESCRIPTION: Example Java class demonstrating various logging patterns including simple messages, breadcrumbs, and exception handling with Sentry integration.

LANGUAGE: java
CODE:
import java.util.logging.Level;
import java.util.logging.Logger;

public class MyClass {
  private static final Logger logger = Logger.getLogger(MyClass.class.getName());

  void logSimpleMessage() {
    // This sends a simple event to Sentry
    logger.error(Level.INFO, "This is a test");
  }

  void logWithBreadcrumbs() {
    // Record a breadcrumb that will be sent with the next event(s),
    // by default the last 100 breadcrumbs are kept.
    Sentry.record(
        new BreadcrumbBuilder().setMessage("User made an action").build()
    );

    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logException() {
    try {
      unsafeMethod();
    } catch (Exception e) {
      // This sends an exception event to Sentry
      logger.error(Level.SEVERE, "Exception caught", e);
    }
  }

  void unsafeMethod() {
    throw new UnsupportedOperationException("You shouldn't call this!");
  }
}

----------------------------------------

TITLE: Initializing Sentry with Database Integrations in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with various database integrations for automatic performance monitoring. It includes setting the DSN, trace sample rate, and adding supported database integrations.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/google-cloud-serverless");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 1.0,
  integrations: [
    Sentry.mysqlIntegration(),
    Sentry.mysql2Integration(),
    Sentry.pgIntegration(),
    Sentry.graphqlIntegration(),
    Sentry.mongoIntegration(),
    Sentry.mongooseIntegration(),
    Sentry.ioredisIntegration(),
  ],
});

----------------------------------------

TITLE: Capturing Unity Debug Logs and Errors with Sentry in C#
DESCRIPTION: MonoBehaviour implementation that demonstrates different types of Unity debug logging and error capture. Shows automatic breadcrumb collection for logs/warnings and error capture for LogError and unhandled exceptions.

LANGUAGE: csharp
CODE:
using UnityEngine;

public class TestMonoBehaviour : MonoBehaviour
{
    private GameObject testObject = null;

    void Start()
    {
        Debug.Log("Captured Log");              // Breadcrumb
        Debug.LogWarning("Captured Warning");   // Breadcrumb
        Debug.LogError("Captured Error");       // Captured Error

        // This will throw an unhandled Null Reference Exception
        testObject.GetComponent<Transform>();   // Captured error
    }
}

----------------------------------------

TITLE: Ensuring Request Isolation in Non-HTTP Scenarios (ESM)
DESCRIPTION: Example of using Sentry.withIsolationScope() to ensure request isolation in non-HTTP scenarios like websockets or scheduled jobs using ESM.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

function myScheduledJob() {
  return Sentry.withIsolationScope(async () => {
    await doSomething();
    await doSomethingElse();
    return { status: "DONE" };
  });
}

----------------------------------------

TITLE: Implementing Aggressive Error Grouping
DESCRIPTION: Illustrates how to completely override Sentry's default grouping by setting custom fingerprints for generic errors like database connection issues.



----------------------------------------

TITLE: Capturing Exceptions with Sentry in C#
DESCRIPTION: This snippet shows how to capture exceptions using the Sentry SDK in C#. It demonstrates setting tags and levels for the captured exception, as well as capturing an exception without additional context.

LANGUAGE: csharp
CODE:
// will be tagged with my-tag="my value"
SentrySdk.CaptureException(new Exception("my error"), scope =>
{
    scope.SetTag("my-tag", "my value");
    scope.Level = SentryLevel.Warning;
});

// will not be tagged with my-tag
SentrySdk.CaptureException(new Exception("my other error"));

----------------------------------------

TITLE: Initializing Sentry with Browser Profiling in Remix (Custom Sampler Function)
DESCRIPTION: This snippet shows an alternative configuration for Sentry in a Remix application, using a custom profilesSampler function instead of a fixed profilesSampleRate. This allows for more dynamic control over which spans are profiled.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/remix";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add browser profiling integration to the list of integrations
    Sentry.browserTracingIntegration(),
    Sentry.browserProfilingIntegration(),
  ],
  tracesSampleRate: 1.0,

  // This function will be called for every sampled span
  // to determine if it should be profiled
  profilesSampler: (samplingContext) => {
    return 1.0;
  },
});

----------------------------------------

TITLE: Configuring Sentry DSN via Config File
DESCRIPTION: Configures Sentry CLI authorization by adding the DSN to the sentryclirc configuration file.

LANGUAGE: ini
CODE:
[auth]
dsn = ___PUBLIC_DSN___

----------------------------------------

TITLE: Initializing Sentry Release in Java
DESCRIPTION: Programmatically initializes Sentry and sets the release version in Java. Uses the SentryAndroid.init() method with options configuration.

LANGUAGE: java
CODE:
SentryAndroid.init(this, options -> {
  options.setRelease("io.example@1.1.0");
});

----------------------------------------

TITLE: Configuring Raven.js for Backbone
DESCRIPTION: Basic configuration of Raven.js for a Backbone application.

LANGUAGE: javascript
CODE:
Raven.config("___PUBLIC_DSN___").install();

----------------------------------------

TITLE: Session Aggregates JSON Format
DESCRIPTION: Example JSON payload structure for aggregated session data sent to Sentry.

LANGUAGE: json
CODE:
{
  "aggregates": [
    {
      "started": "2020-02-07T14:16:00Z",
      "exited": 123
    },
    {
      "started": "2020-02-07T14:16:00Z",
      "did": "optional distinct user id",
      "exited": 12,
      "errored": 3
    }
  ],
  "attrs": {
    "release": "my-project-name@1.0.0",
    "environment": "development"
  }
}

----------------------------------------

TITLE: Throwing Standard Error with Sentry
DESCRIPTION: Demonstrates how to throw a basic JavaScript Error that will be captured by Sentry for error monitoring. Creates a new Error object with a custom message that will be tracked in the Sentry dashboard.

LANGUAGE: javascript
CODE:
throw new Error("My first Sentry error!");

----------------------------------------

TITLE: Implementing Dynamic Error Sampling with Error Sampler (Python)
DESCRIPTION: Define an error_sampler function to apply different sample rates for different exception types in Sentry SDK configuration.

LANGUAGE: python
CODE:
def error_sampler(event, hint):
    if "exc_info" in hint:
        exc_type, exc_value, tb = hint["exc_info"]
        if isinstance(exc_value, MyException):
            # Sample 50% of MyException errors
            return 0.5
        elif isinstance(exc_value, MyIgnoredException):
            # Ignore all MyIgnoredException errors
            return False
    # Sample all other errors
    return True

sentry_sdk.init(
    # ...
    error_sampler=error_sampler,
)

----------------------------------------

TITLE: Using @SentrySpan Annotation in Spring 5 (Java)
DESCRIPTION: Example of using @SentrySpan annotation to create a span for a method execution in Spring 5 Java application.

LANGUAGE: java
CODE:
import org.springframework.stereotype.Component;
import io.sentry.spring.tracing.SentrySpan;

@Component
class PersonService {

  @SentrySpan
  Person findById(Long id) {
    ...
  }
}

----------------------------------------

TITLE: Overriding Router Context in React Testing Library
DESCRIPTION: Shows how to override the router context when rendering a component for testing. This allows setting custom router properties like location and params.

LANGUAGE: tsx
CODE:
const {organization, router, routerContext} = initializeOrg({
  organization: {features: ['global-views', 'open-membership']},
  router: {
    location: {
      pathname: '/organizations/org-slug/issues/',
      query: {environment: 'prod'},
    },
    params: {},
  },
});

render(<Example />, {context: routerContext, organization});
await userEvent.click(something);
expect(router.push).toHaveBeenCalledTimes(1);

----------------------------------------

TITLE: Initializing Sentry on the Server
DESCRIPTION: Sets up Sentry initialization on the server side with performance monitoring configuration.

LANGUAGE: TypeScript
CODE:
import * as Sentry from "@sentry/tanstackstart-react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Installing Sentry.Serilog Package Using .NET CLI
DESCRIPTION: Command to install the Sentry.Serilog NuGet package using .NET Core CLI.

LANGUAGE: shell
CODE:
dotnet add package Sentry.Serilog -v {{@inject packages.version('sentry.dotnet.serilog') }}

----------------------------------------

TITLE: Installing Sentry Electron SDK with npm
DESCRIPTION: This command installs the @sentry/electron package using npm and saves it as a dependency in the project's package.json file.

LANGUAGE: bash
CODE:
npm install @sentry/electron --save

----------------------------------------

TITLE: Cleaning Up Docker Resources in Shell
DESCRIPTION: A series of shell commands to prune unused Docker containers, builders, images, volumes, and networks. These commands help reclaim disk space without affecting running containers.

LANGUAGE: shell
CODE:
docker container prune
docker builder prune
docker image prune --all
# WARNING: Executing "volume prune" might delete `sentry-vroom` volume as it's not an external volume.
docker volume prune
docker network prune

----------------------------------------

TITLE: Parsing JSON Module Data in Native Symbolication
DESCRIPTION: This JSON snippet demonstrates the structure of a module object in a native symbolication request. It includes information about the module type, code and debug identifiers, file paths, and checksums.

LANGUAGE: json
CODE:
{
    "type": "pe_dotnet",
    "code_id": "efc9a199e000",
    "code_file": "./TimeZoneConverter.dll",
    "debug_id": "4e2ca887-825e-46f3-968f-25b41ae1b5f3-9e6d3fcc",
    "debug_file": "./TimeZoneConverter.pdb",
    "debug_file_checksums": "SHA256:87a82c4e5e82f386968f25b41ae1b5f3cc3f6d9e79cfb4464f8240400fc47dcd"
}

----------------------------------------

TITLE: Installing @sentry/astro with pnpm
DESCRIPTION: Installs the Sentry SDK for Astro projects using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add @sentry/astro

----------------------------------------

TITLE: Adding Sentry Android Gradle Plugin in Groovy
DESCRIPTION: Add the Sentry Android Gradle plugin to the build.gradle file using Groovy syntax. This enables auto-installation of the Timber integration.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.android.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

----------------------------------------

TITLE: Enabling Auto Session Tracking in F#
DESCRIPTION: Configuration code to enable automatic session tracking in Sentry SDK using F#. Sets the AutoSessionTracking flag to true during SDK initialization.

LANGUAGE: fsharp
CODE:
// Add this to the SDK initialization callback
options.AutoSessionTracking <- true // default: false

----------------------------------------

TITLE: Implementing Custom Trace Sampling in Java (Spring 5)
DESCRIPTION: Custom trace sampler implementation for Spring 5 using javax.servlet. Applies different sampling rates based on endpoint importance - 50% for payment, 1% for search, 0% for health checks, and 10% default.

LANGUAGE: java
CODE:
import io.sentry.SamplingContext;
import io.sentry.SentryOptions.TracesSamplerCallback;
import org.springframework.stereotype.Component;
import javax.servlet.http.HttpServletRequest;

@Component
class CustomTracesSamplerCallback implements TracesSamplerCallback {
  @Override
  public Double sample(SamplingContext context) {
    HttpServletRequest request = (HttpServletRequest) context.getCustomSamplingContext().get("request");
    String url = request.getRequestURI();
    if ("/payment".equals(url)) {
      // These are important - take a big sample
      return 0.5;
    } else if ("/search".equals(url)) {
      // Search is less important and happen much more frequently - only take 1%
      return 0.01;
    } else if ("/health".equals(url)) {
      // The health check endpoint is just noise - drop all transactions
      return 0d;
    } else {
      // Default sample rate
      return 0.1;
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry SDK in React Native
DESCRIPTION: Demonstrates how to import and initialize the Sentry SDK in a React Native application. The configuration enables screenshot attachment for error reports and requires a valid DSN value to be provided.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  attachScreenshot: true,
});

----------------------------------------

TITLE: Configuring Synchronous Sentry Scope in C#
DESCRIPTION: Demonstrates setting up Sentry scope with tags and user information synchronously using C#. Shows how to set custom tags and user identification details.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.SetTag("my-tag", "my value");
    scope.User = new User
    {
        Id = "42",
        Email = "john.doe@example.com"
    };
});

----------------------------------------

TITLE: Configuring Metric Code Locations in Laravel Sentry
DESCRIPTION: This code snippet shows how to enable the attachment of code locations to metrics in the Sentry configuration file for Laravel.

LANGUAGE: php
CODE:
'attach_metric_code_locations' => true,

----------------------------------------

TITLE: Adding Expo-specific tags manually in JavaScript
DESCRIPTION: JavaScript code to manually add Expo-specific tags that were previously added by default in sentry-expo.

LANGUAGE: javascript
CODE:
import Constants from "expo-constants";
import * as Device from "expo-device";
import * as Updates from "expo-updates";

import * as Sentry from "@sentry/react-native";

Sentry.setExtras({
  manifest: Updates.manifest,
  deviceYearClass: Device.deviceYearClass,
  linkingUri: Constants.linkingUri,
});

Sentry.setTag("expoReleaseChannel", Updates.manifest.releaseChannel);
Sentry.setTag("appVersion", Updates.manifest.version);
Sentry.setTag("appPublishedTime", Updates.manifest.publishedTime);
Sentry.setTag("expoSdkVersion", Updates.manifest.sdkVersion);
Sentry.setTag("deviceId", Constants.sessionId);
Sentry.setTag("appOwnership", Constants.appOwnership || "N/A");
if (Constants.appOwnership === "expo" && Constants.expoVersion) {
  Sentry.setTag("expoAppVersion", Constants.expoVersion);
}
Sentry.setTag("expoChannel", Updates.channel);

----------------------------------------

TITLE: Implementing Custom Sampling Function for Sentry Transactions
DESCRIPTION: Demonstrates how to implement a custom sampling function (tracesSampler) to dynamically determine the sampling rate for different transactions based on their characteristics.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // To set a uniform sample rate
  tracesSampleRate: 0.2,
  // OR: Determine traces sample rate based on the sampling context
  tracesSampler: (samplingContext) => {
    // Always sample
    if (samplingContext.transactionContext.name === "important-operation") {
      return 1.0;
    }
    // Don't sample
    if (samplingContext.transactionContext.name === "healthcheck") {
      return 0.0;
    }
    // Sample based on custom logic
    if (samplingContext.parentSampled) {
      return 0.5;
    }
    // Default sample rate
    return 0.1;
  },
});

----------------------------------------

TITLE: Promise-based Sentry Span Creation
DESCRIPTION: Demonstrates creating a Sentry span for an async HTTP request using Promises. Shows how to set span tags and attributes based on the response.

LANGUAGE: javascript
CODE:
function processItem(item) {
  return Sentry.startSpan(
    {
      op: "http",
      name: "GET /items/:item-id",
    },
    (span) => {
      return new Promise((resolve, reject) => {
        http.get(`/items/${item.id}`, (response) => {
          response.on("data", () => {});
          response.on("end", () => {
            span.setTag("http.status_code", response.statusCode);
            span.setAttribute(
              "http.foobarsessionid",
              getFoobarSessionid(response)
            );
            resolve(response);
          });
        });
      });
    }
  );
}

----------------------------------------

TITLE: Using Sentry.withErrorBoundary HOC in React Native
DESCRIPTION: Shows how to use the withErrorBoundary higher-order component to wrap a React component with error boundary functionality.

LANGUAGE: javascript
CODE:
import React from "react";
import * as Sentry from "@sentry/react-native";

Sentry.withErrorBoundary(Example, { fallback: <p>an error has occurred</p> });

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration (Deprecated)
DESCRIPTION: Sets up Sentry error tracking with Unleash feature flags using the deprecated configuration pattern. Uses 'unleashClientClass' instead of 'featureFlagClientClass' in the integration configuration.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/remix';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({unleashClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Implementing Custom Transport in Sentry Native SDK
DESCRIPTION: Demonstrates how to create and configure a custom transport by implementing the sentry_transport_t interface. Shows initialization of transport with custom state and setting it in Sentry options.

LANGUAGE: c
CODE:
#include <sentry.h>

void custom_transport(sentry_envelope_t *envelope, void *state) {
  /*
   * Send the event here. If the transport requires state, such as an HTTP
   * client object or request queue, it can be specified in the `state`
   * parameter when configuring the transport. It will be passed as second
   * argument to this function.
   * The transport takes ownership of the `envelope`, and must free it once it
   * is done.
   */
  sentry_envelope_free(envelope);
}

int main(void) {
  void *transport_state = 0;

  sentry_options_t *options = sentry_options_new();
  sentry_transport_t *transport = sentry_transport_new(custom_transport);
  sentry_transport_set_state(transport, transport_state);

  sentry_options_set_transport(options, transport);
  sentry_init(options);

  /* ... */
}

----------------------------------------

TITLE: Configuring Sentry with Netflix DGS for GraphQL Java 22
DESCRIPTION: Configuration for using Sentry GraphQL integration with Netflix DGS, creating necessary beans for exception handling and instrumentation.

LANGUAGE: java
CODE:
import com.netflix.graphql.dgs.exceptions.DefaultDataFetcherExceptionHandler;
import io.sentry.graphql.SentryGenericDataFetcherExceptionHandler;
import io.sentry.graphql22.SentryInstrumentation;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
class SentryConfiguration {

  @Bean
  SentryInstrumentation sentryInstrumentation() {
    return new SentryInstrumentation(new SentryDgsSubscriptionHandler(), true);
  }

  @Bean
  SentryGenericDataFetcherExceptionHandler sentryDataFetcherExceptionHandler() {
    // delegate to default Netflix DGS exception handler
    return new SentryGenericDataFetcherExceptionHandler(new DefaultDataFetcherExceptionHandler());
  }
}

LANGUAGE: kotlin
CODE:
import com.netflix.graphql.dgs.exceptions.DefaultDataFetcherExceptionHandler
import io.sentry.graphql.SentryGenericDataFetcherExceptionHandler
import io.sentry.graphql22.SentryInstrumentation
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration

@Configuration
class SentryConfiguration {

  @Bean
  fun sentryInstrumentation() = SentryInstrumentation(SentryDgsSubscriptionHandler(), true)

  @Bean
  fun sentryDataFetcherExceptionHandler() = SentryGenericDataFetcherExceptionHandler(DefaultDataFetcherExceptionHandler())
}

----------------------------------------

TITLE: Initializing Google Cloud Functions in C#
DESCRIPTION: This snippet shows how to initialize a Google Cloud Functions project using C#. It includes the necessary using statements and defines a basic IHttpFunction class.

LANGUAGE: csharp
CODE:
using System.Threading.Tasks;
using Google.Cloud.Functions.Framework;
using Google.Cloud.Functions.Hosting;
using Microsoft.AspNetCore.Http;

[assembly: FunctionsStartup(typeof(SentryStartup))]

public class Function : IHttpFunction
{
}

----------------------------------------

TITLE: Configuring App Hang Event Filtering in Sentry
DESCRIPTION: Example showing how to filter and modify app hang events using beforeSend callback. Allows inspection and modification of events where exception type is 'App Hanging'.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.beforeSend = { event in
        if (event.exceptions?.first?.type == "App Hanging") {
          // modify event here or return nil to discard the event
        }
        return event
    }
}

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.beforeSend = ^SentryEvent * _Nullable(SentryEvent * _Nonnull event) {
        if ([self.exceptions.count == 1 && event.exceptions.firstObject.type isEqualToString:@"App Hanging"]) {
          // modify event here or return nil to discard the event
        }
        return event;
    }
}];

----------------------------------------

TITLE: Specifying UI Event Transaction Behavior in Gherkin
DESCRIPTION: This Gherkin code defines the behavior for UI event transactions, including starting transactions, handling child spans, and various edge cases. It covers scenarios such as idle timeouts, waiting for children, and interaction with other transaction types.

LANGUAGE: Gherkin
CODE:
Scenario: Starting UI Event transactions
    Given an instrumentable UI event
    Then the SDK starts a UI event transaction
    And schedules to finish the UIEventTransaction with
     the idle timeout of the options

Scenario: Wait for children when starting span
    Given a UI event transaction
    When the SDK starts a child span
    Then the SDK cancels the idle timeout
    And waits for the child to finish

Scenario: Schedule idle timeout when the last span finishes
    Given a UI event transaction
    And the transaction has one or multiple running child spans
    And the transaction is waiting for its children to finish
    When the SDK finishes the last child span
    Then the SDK schedules the idle timeout

Scenario: Discard UI event transactions without child spans
    Given a UI event transaction
    And the transaction has no child spans
    When the idle timeout times out
    Then the SDK discards the transaction

Scenario: Set time to last finished child span
    Given a UI event transaction
    And the transaction has one finished child span
    And the transaction has one running child span
    When the running child span finishes
    Then the SDK schedules the idle timeout
    And the SDK finishes the transaction after the idle timeout
    And trims the end time of the transaction to the one of the last finished
        child span

Scenario: Don't overwrite existing status of UI event transactions
    Given a UI event transaction
    And the UI event transaction has a status
    When the SDK finishes the UI event transaction
    Then it keeps the status
    And doesn't overwrite it

Scenario: Event on same UI element with child spans
    Given an ongoing UI event transaction
    When the user triggers the same UI element with a new event
    Or the user triggers a different UI element
    Then the SDK finishes the ongoing transaction
    And sets the status to OK
    And waits for the children to finish
    And cancels the idle timeout
    And starts a new transaction

Scenario: Event on same UI element without child spans
    Given an ongoing UI event transaction
    When the user triggers the same UI element with a new event
    Or the user triggers a different UI element
    Then the SDK discards the transaction
    And starts a new transaction

----------------------------------------

TITLE: Controlling Data Truncation for Tags in Sentry
DESCRIPTION: This code example shows how to handle data truncation for tags that exceed the 200 character limit in Sentry. It demonstrates splitting long data across multiple tags to retain important information.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="performance/control-data-truncation" />

----------------------------------------

TITLE: Customizing View Hierarchy Capture Behavior
DESCRIPTION: Advanced configuration of Sentry SDK that demonstrates how to customize view hierarchy capture behavior using the beforeCaptureViewHierarchy callback. This allows conditional capture of view hierarchies based on event data.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.beforeCaptureViewHierarchy = { event in
        // Return false to not capture a view hierarchy for the event.
        return false
    }
}

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.beforeCaptureViewHierarchy = ^BOOL(SentryEvent * _Nonnull event) {
        // Return NO to not capture a view hierarchy for the event.
        return NO;
    };
}];

----------------------------------------

TITLE: Configuring Sentry Scope with Tags and User Information in JavaScript
DESCRIPTION: This snippet shows how to use Sentry's configureScope method to set a custom tag and user information. It demonstrates setting a tag with a key-value pair and defining user properties such as id and email.

LANGUAGE: javascript
CODE:
Sentry.configureScope(function (scope) {
  scope.setTag("my-tag", "my value");
  scope.setUser({
    id: 42,
    email: "john.doe@example.com",
  });
});

----------------------------------------

TITLE: Installing Sentry.AspNetCore Package via .NET CLI
DESCRIPTION: Command to install the Sentry.AspNetCore NuGet package using .NET Core CLI.

LANGUAGE: shell
CODE:
dotnet add package Sentry.AspNetCore -v {{@inject packages.version('sentry.dotnet.aspnetcore') }}

----------------------------------------

TITLE: Importing Sentry SDK for Attachment Upload in JavaScript
DESCRIPTION: This snippet demonstrates how to import the Sentry SDK for uploading attachments. The specific import statement varies by platform and is included dynamically.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="enriching-events/import" />

----------------------------------------

TITLE: Enabling ANR Detection for Electron Main Process
DESCRIPTION: This snippet demonstrates how to initialize Sentry with ANR detection enabled for the Electron main process. It uses the anrIntegration with stack trace capture enabled.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.anrIntegration({ captureStackTrace: true })],
});

----------------------------------------

TITLE: Setting Traces Sample Rate in Sentry Initialization (JavaScript)
DESCRIPTION: This snippet demonstrates how to set the traces-sample-rate option when initializing Sentry. The value determines the percentage of transactions that will be recorded and sent to Sentry for performance monitoring.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Monitor Creation with Schedule
DESCRIPTION: Command structure for creating or updating a monitor with a cron schedule.

LANGUAGE: bash
CODE:
sentry-cli monitors run --schedule "<expected schedule>" <monitor-slug> -- <command> <args>

----------------------------------------

TITLE: Error Capture Verification in Objective-C
DESCRIPTION: Example code demonstrating how to capture and send errors to Sentry in Objective-C.

LANGUAGE: objc
CODE:
@import Sentry;

NSError *error = nil;
[self aMethodThatMightFail:&error]

if (error) {
    [SentrySDK captureError:error];
}

----------------------------------------

TITLE: Mobile App Backend Services Tracing Configuration
DESCRIPTION: Sentry configuration for a mobile app environment, enabling tracing across main API server, media server, and local API endpoints to track user interactions and debugging.

LANGUAGE: javascript
CODE:
// hooks.client.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracePropagationTargets: [
    "https://api.myapp.com",
    "https://media.myapp.com",
    /^\/local-api\//
  ],
});

----------------------------------------

TITLE: Configuring Sentry User Scope in Java
DESCRIPTION: Sets up Sentry scope with custom tags and user information using Java. Creates a User object with ID and email, then adds it to the Sentry scope along with a custom tag.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.protocol.User;

Sentry.configureScope(scope -> {
  scope.setTag("my-tag", "my value");
  User user = new User();
  user.setId("42");
  user.setEmail("john.doe@example.com");
  scope.setUser(user);
});

----------------------------------------

TITLE: Adding Sentry Start Script to package.json
DESCRIPTION: JSON configuration in package.json to add a start script that includes the Sentry import flag. This simplifies running the application with Sentry initialized.

LANGUAGE: json
CODE:
{
  "scripts": {
    "start": "node --import ./.output/server/sentry.server.config.mjs .output/server/index.mjs"
  }
}

----------------------------------------

TITLE: Directory Structure Example for Platform Documentation
DESCRIPTION: Shows the standard directory layout for platform documentation, demonstrating the relationship between platform content, common files, and guides.

LANGUAGE: text
CODE:
[platformName]/
  child.mdx
  childTwo/
    index.mdx
  common/
    aSharedPage.mdx
  guides/
    [guideName]/
      uniqueChild.mdx
      childTwo/
        index.mdx

----------------------------------------

TITLE: Initializing OpenFeature with Sentry - Track Single Client
DESCRIPTION: Configures OpenFeature SDK with Sentry integration to track feature flag evaluations for a specific client instance. This setup adds hooks at the client level for more targeted tracking.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/ember';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Addressing Array Indexed Access in TypeScript Loops
DESCRIPTION: Shows various approaches to handle array indexed access when using noUncheckedIndexedAccess. Includes examples of for loops, for..of loops, and functional approaches like forEach.

LANGUAGE: typescript
CODE:
// ❌
for (let i = 0; i < collection.length; i++) {
  const child = collection[i]!;
  // ...
}

LANGUAGE: typescript
CODE:
// ✅
for (const child of collection) {
  // ...
}

LANGUAGE: typescript
CODE:
// ✅
collection.forEach(child => {
 // ...
})

----------------------------------------

TITLE: Debug Server Configuration
DESCRIPTION: Configuration for debugging the web server using the devserver command with special debug flag. Allows attaching debugger and hitting breakpoints.

LANGUAGE: plaintext
CODE:
Parameters: devserver --debug-server --workers

----------------------------------------

TITLE: Implementing Sentry Redux State Transformer
DESCRIPTION: This code shows how to create a Sentry Redux enhancer with a custom state transformer. It removes or modifies sensitive information from the state before sending it to Sentry, and can optionally prevent entire state updates from being sent.

LANGUAGE: javascript
CODE:
const sentryReduxEnhancer = Sentry.createReduxEnhancer({
  stateTransformer: (state) => {
    if (state.topSecret.doNotSend) {
      // Return null to not send this version of the state.
      return null;
    }

    // Transform the state to remove sensitive information
    const transformedState = {
      ...state,
      topSecret: {
        ...state.topSecret,
        // Replace sensitive information with something else
        nuclearLaunchCodes: "I love pizza",
        // or just remove it entirely
        hiddenTreasureLocation: null,
      },
      // You should also remove large data that is irrelevant to debugging to not clutter your Sentry issues
      giganticState: null,
    };

    return transformedState;
  },
});

----------------------------------------

TITLE: Recording Component Load Time Distribution in Sentry
DESCRIPTION: Shows how to track component loading performance using Sentry's distribution metrics. The example records a 15.0 millisecond load time with type tags and unit specification.

LANGUAGE: JavaScript
CODE:
// Add '15.0' to a distribution used for tracking the loading times for component.
Sentry.metrics.distribution("component_load_time", 15.0, {
  tags: { type: "important" },
  unit: "millisecond",
});

----------------------------------------

TITLE: Configuring Sentry Scope with Tags and User Info in PowerShell
DESCRIPTION: Demonstrates the usage of Edit-SentryScope to set a custom tag and user identification details including user ID and email. The scope configuration allows for better organization and tracking of errors in Sentry.

LANGUAGE: powershell
CODE:
Edit-SentryScope {
    $_.SetTag("my-tag", "my value")
    $_.User.Id = '42'
    $_.User.Email = 'john.doe@example.com'
}

----------------------------------------

TITLE: Configuring Sentry for Background Functions in Google Cloud
DESCRIPTION: Implementation of Sentry error monitoring for background functions in Google Cloud. Uses wrapEventFunction to capture errors in event-driven functions with tracing enabled.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/google-cloud-serverless");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 1.0,
});

exports.helloEvents = Sentry.wrapEventFunction(
  (data, context, callback) => {
    throw new Error("oh, hello there!");
  }
);

----------------------------------------

TITLE: Configuring Failed Request Targets in Sentry SDK (.NET)
DESCRIPTION: This snippet shows how to customize which HTTP requests are captured by Sentry based on URL patterns using both substrings and regular expressions in C# and F#.

LANGUAGE: csharp
CODE:
options.FailedRequestTargets.Add("foo");      // substring
options.FailedRequestTargets.Add("foo.*bar"); // regex

LANGUAGE: fsharp
CODE:
options.FailedRequestTargets.Add("foo")      // substring
options.FailedRequestTargets.Add("foo.*bar") // regex

----------------------------------------

TITLE: Installing Sentry JDBC Dependency with Gradle
DESCRIPTION: Add the Sentry JDBC dependency to your Gradle project's build.gradle file.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-jdbc:{{@inject packages.version('sentry.java.jdbc', '5.3.0') }}'

----------------------------------------

TITLE: Uploading JVM Source Bundles with Sentry CLI
DESCRIPTION: Use the 'sentry-cli debug-files upload' command to upload the created JVM source bundle to Sentry. This allows Sentry to attach Source Context to future events.

LANGUAGE: bash
CODE:
sentry-cli debug-files upload \
    --type jvm \
    output/path/of/bundle-jvm/command

----------------------------------------

TITLE: React Error Boundary Component
DESCRIPTION: Example implementation of a React Error Boundary component that reports errors to Sentry.

LANGUAGE: javascript
CODE:
class ExampleBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
  }

  componentDidCatch(error, errorInfo) {
    this.setState({ error });
    Raven.captureException(error, { extra: errorInfo });
  }

  render() {
    if (this.state.error) {
      //render fallback UI
      return (
        <div
          className="snap"
          onClick={() => Raven.lastEventId() && Raven.showReportDialog()}
        >
          <img src={oops} />
          <p>We're sorry — something's gone wrong.</p>
          <p>Our team has been notified, but click here fill out a report.</p>
        </div>
      );
    } else {
      //when there's not an error, render children untouched
      return this.props.children;
    }
  }
}

----------------------------------------

TITLE: Configuring Metric Code Locations in Symfony with Sentry
DESCRIPTION: This YAML configuration enables the attachment of code locations to metrics in Sentry for Symfony.

LANGUAGE: yaml
CODE:
attach_metric_code_locations: true

----------------------------------------

TITLE: Implementing Queue Consumer Instrumentation in Go with Sentry
DESCRIPTION: Demonstrates how to instrument a queue consumer by creating spans and transactions, calculating message latency, setting required queue metrics data, and handling message processing status. Includes error handling and span status setting.

LANGUAGE: go
CODE:
connection := my_custom_queue.Connect()

// Pick up message from queues
queue := "messages"
message := connection.Consume(queue)

// Calculate latency (optional, but valuable)
now := time.Now()
messageTime := time.Unix(message["timestamp"].(int64), 0)
latency := now.Sub(messageTime)

// Create transaction
transaction := sentry.StartTransaction(
    ctx, // Continue the trace from the message
    "queue_consumer_transaction",
    options...,
)
defer transaction.Finish()

// Create the span
span := transaction.StartSpan(ctx, "queue.process")
span.Description = "queue_consumer";
defer span.Finish()

// Set span data
span.SetData("messaging.message.id", message["message_id"])
span.SetData("messaging.destination.name", queue)
span.SetData("messaging.message.body.size", len(message["body"].(string)))
span.SetData("messaging.message.receive.latency", latency)
span.SetData("messaging.message.retry.count", 0)

// Process the message
err = processMessage(message)
if err != nil {
    // In case of an error set the status to "internal_error"
    span.Status = sentry.SpanStatusInternalError
}

----------------------------------------

TITLE: Sentry Error Report Dialog Template
DESCRIPTION: HTML template snippet that conditionally initializes Sentry and displays the error report dialog when a Sentry event ID is present. Configures Sentry with a public DSN and shows the report dialog for the specific error event.

LANGUAGE: html
CODE:
{% if sentry_event_id %}
<script>
  Sentry.init({ dsn: "___PUBLIC_DSN___" });
  Sentry.showReportDialog({ eventId: "{{ sentry_event_id }}" });
</script>
{% endif %}

----------------------------------------

TITLE: Example of Logging Error Message to Sentry
DESCRIPTION: Demonstrates how to log an error message that will be captured and sent to Sentry.

LANGUAGE: elixir
CODE:
Logger.error("This will be reported to Sentry")

----------------------------------------

TITLE: Initializing Sentry in entry.server.tsx for Remix
DESCRIPTION: This snippet shows how to initialize Sentry in the server-side entry point of a Remix application. It demonstrates the new requirement to initialize Sentry before any other imports for proper auto-instrumentation.

LANGUAGE: JavaScript
CODE:
import * as Sentry from '@sentry/remix';

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 1.0,
});

export const handleError = Sentry.wrapRemixHandleError;

// rest of your code and imports

----------------------------------------

TITLE: Configuring Sentry Browser Tracing Integration with Custom Span Attributes
DESCRIPTION: Initializes Sentry SDK with browser tracing integration that adds a 'resultFormat' attribute set to 'legacy' to all spans. The beforeStartSpan hook is used to modify the span context before creation.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  integrations: [
    Sentry.browserTracingIntegration({
      beforeStartSpan: (context) => {
        return {
          ...context,
          attributes: {
            ...context.attributes,
            resultFormat: "legacy",
          },
        };
      },
    }),
  ],
});

----------------------------------------

TITLE: Setting Parent Span ID in Sentry JSON Configuration
DESCRIPTION: This snippet demonstrates how to set the 'parent_span_id' property in a Sentry span configuration. The 'parent_span_id' is used to indicate that this span should be rendered as a child of another span, establishing a hierarchical relationship in the trace.

LANGUAGE: json
CODE:
{
  "parent_span_id": "b0e6f15b45c36b12"
}

----------------------------------------

TITLE: Configuring SentryFlutter Initialization with Event Modification
DESCRIPTION: Initializes SentryFlutter with a beforeSend callback that removes server names from events before they are sent. The beforeSend hook creates a copy of the event with an empty serverName value using the copyWith method.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.beforeSend = (event, hint) {
    return event.copyWith(serverName: ""); // Don't send server names.
  };
});

----------------------------------------

TITLE: Capturing Custom Exceptions in Sentry Java SDK
DESCRIPTION: Shows how to capture custom exceptions in Sentry using both the old (1.x) and new (4.x) API. The new API uses a more specific method name 'captureException' instead of the generic 'capture'.

LANGUAGE: java
CODE:
try {
  int x = 1 / 0;
} catch (Exception e) {
  Sentry.capture(e);
}

LANGUAGE: kotlin
CODE:
try {
  val x = 1 / 0
} catch (e: Exception) {
  Sentry.capture(e)
}

LANGUAGE: java
CODE:
try {
  int x = 1 / 0;
} catch (Exception e) {
  Sentry.captureException(e);
}

LANGUAGE: kotlin
CODE:
try {
  val x = 1 / 0
} catch (e: Exception) {
  Sentry.captureException(e)
}

----------------------------------------

TITLE: Setting Uniform Transaction Sample Rate in Sentry SDK
DESCRIPTION: Configures the SDK to send 20% of transactions to Sentry by setting the tracesSampleRate to 0.2.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // To set a uniform sample rate
  tracesSampleRate: 0.2,
});

----------------------------------------

TITLE: Configuring AngularJS module
DESCRIPTION: Example of declaring the ngRaven module dependency in an AngularJS application.

LANGUAGE: javascript
CODE:
var myApp = angular.module("myApp", [
  "ngRaven",
  "ngRoute",
  "myAppControllers",
  "myAppFilters",
]);

----------------------------------------

TITLE: Configuring Apollo Client with Sentry Tracing (Java)
DESCRIPTION: Set up Apollo Client with Sentry tracing using the provided extension function in Java.

LANGUAGE: java
CODE:
import com.apollographql.apollo3.ApolloClient;
import io.sentry.apollo3.SentryApolloBuilderExtensionsKt;

ApolloClient apollo = SentryApolloBuilderExtensionsKt
    .sentryTracing(new ApolloClient.Builder())
    .serverUrl("https://your-api-host/")
    .build();

----------------------------------------

TITLE: Setting CORS Origin in Python
DESCRIPTION: Configures the Access-Control-Allow-Origin header for Sentry web API responses.

LANGUAGE: python
CODE:
SENTRY_ALLOW_ORIGIN = "http://foo.example"

----------------------------------------

TITLE: Example Code Patterns for AWS Lambda
DESCRIPTION: Demonstrates the two main module syntax patterns used in AWS Lambda functions: CommonJS (require) and ESM (import). This distinction is crucial for determining the appropriate Sentry installation method.

LANGUAGE: javascript
CODE:
// CommonJS syntax
const module = require('module');

LANGUAGE: javascript
CODE:
// ESM syntax
import module from 'module';

----------------------------------------

TITLE: Initializing OpenFeature with Sentry - Track Single Client
DESCRIPTION: Configures Sentry with OpenFeature integration to track feature flag evaluations for a specific client instance. Shows initialization, client-specific hook addition, and feature flag evaluation with error tracking.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/astro';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Configuring Sentry Sample Rate in YAML Format
DESCRIPTION: Sets the Sentry sample rate to 0.25 (25%) in a YAML file. This configuration determines the percentage of events that will be sent to Sentry for monitoring.

LANGUAGE: yaml
CODE:
sentry:
  sample-rate: 0.25

----------------------------------------

TITLE: Emitting a Counter Metric in Laravel with Sentry
DESCRIPTION: This snippet demonstrates how to increment a counter metric using Sentry in a Laravel application. It includes an example of adding tags to the metric for additional context.

LANGUAGE: php
CODE:
\Sentry\metrics()->increment(
    key: 'button_click',
    value: 1,
    tags: [
        'browser' => 'Firefox',
        'app_version' => '1.0.0',
    ],
)

----------------------------------------

TITLE: Injecting Trace Headers into Outgoing HTTP Requests with Sentry Go SDK
DESCRIPTION: Shows how to add tracing information to outgoing HTTP requests using hub.GetTraceparent() and hub.GetBaggage(). Propagates trace context to downstream services.

LANGUAGE: go
CODE:
hub := sentry.CurrentHub()
req, _ := http.NewRequest("GET", "http://exmaple.com", nil)
req.Header.Add(sentry.SentryTraceHeader, hub.GetTraceparent())
req.Header.Add(sentry.SentryBaggageHeader, hub.GetBaggage())

----------------------------------------

TITLE: Setting Sentry Environment for Production in Elixir
DESCRIPTION: This snippet configures the Sentry environment name explicitly for the production environment. It's typically placed in the prod.exs configuration file.

LANGUAGE: elixir
CODE:
config :sentry,
  environment_name: :prod

----------------------------------------

TITLE: Logging Errors with Trap in PowerShell
DESCRIPTION: Demonstrates using a PowerShell trap statement to catch and log errors to Sentry. The trap acts as a global error handler for its scope and is processed before script execution.

LANGUAGE: powershell
CODE:
AFunctionThatMightFail

# The trap will get called even if it is declared after the code that throws.
# It's because traps are processed by PowerShell before the script is executed.
trap 
{
    $_ | Out-Sentry
}

----------------------------------------

TITLE: Manual Span Management in Python
DESCRIPTION: Illustrates manual creation and management of spans, showing explicit start and finish of span operations.

LANGUAGE: python
CODE:
import sentry_sdk

def eat_slice(slice):
    ...

def eat_pizza(pizza):
    with sentry_sdk.start_transaction(op="task", name="Eat Pizza"):
        while pizza.slices > 0:
            span = sentry_sdk.start_span(name="Eat Slice")
            eat_slice(pizza.slices.pop())
            span.finish()

----------------------------------------

TITLE: Setting User Information in Sentry SDK
DESCRIPTION: This code snippet demonstrates how to set user information in the Sentry SDK. It includes examples of setting various user attributes such as id, username, email, and IP address.

LANGUAGE: javascript
CODE:
Sentry.setUser({"id": "unique_id", "email": "john.doe@example.com", "username": "johndoe", "ip_address": "{{auto}}"});

----------------------------------------

TITLE: Instrumenting Server-Side Job Processing in JavaScript
DESCRIPTION: Tracks the server-side job processing pipeline for a distributed job system. Uses Sentry's startSpan to capture queue metrics, worker details, processing stages, resource utilization, and job outcomes.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Job Processing Pipeline',
    op: 'job.server',
    attributes: {
      // Queue metrics
      'queue.name': 'video-processing',
      'queue.provider': 'redis',
      'queue.length_at_enqueue': 23,
      'queue.wait_time_ms': 45000,
      
      // Worker metrics
      'worker.id': 'worker-pod-123',
      'worker.current_load': 0.75,
      'worker.memory_usage_mb': 1024,
      
      // Processing stages
      'processing.stages_completed': ['download', 'transcode', 'thumbnail'],
      'processing.stage_durations_ms': {
        'download': 12000,
        'transcode': 180000,
        'thumbnail': 5000
      },
      
      // Resource utilization
      'resource.cpu_percent': 85,
      'resource.gpu_utilization': 0.92,
      'resource.memory_peak_mb': 2048,
      
      // Job outcome
      'outcome.status': 'completed',
      'outcome.retry_count': 0,
      'outcome.output_size_bytes': 31457280  // 30MB
    }
  },
   async () => {
    // Job processing implementation
   }
 );

----------------------------------------

TITLE: Initializing Express App with Sentry Node SDK 8.x (ESM)
DESCRIPTION: Example of instrumenting an Express application with Sentry Node SDK 8.x using ESM syntax. Shows the updated initialization process and error handler setup for ES modules.

LANGUAGE: javascript
CODE:
import "./instrument";
import express from "express";
import * as Sentry from "@sentry/node";
const app = express();

// Add your routes, etc.

// Add this after all routes,
// but before any and other error-handling middlewares are defined
Sentry.setupExpressErrorHandler(app);

app.listen(3000);

----------------------------------------

TITLE: Testing Components with Network Requests in React Query
DESCRIPTION: Shows how to set up tests for components that make network requests using React Query. It demonstrates mocking API responses and checking if the request was called.

LANGUAGE: tsx
CODE:
import {render, screen} from 'sentry-test/reactTestingLibrary';

describe('useFetchSomeData', () => {
  it('should fetch', () => {
    const request = MockApiClient.addMockResponse(...);

    render(<MyComponentThatFetches />);

    expect(request).toHaveBeenCalled();
  });
});

----------------------------------------

TITLE: Configuring Sentry Scope Level in Dart
DESCRIPTION: This code imports the Sentry package and configures the Sentry scope by setting the level to warning. This configuration affects how Sentry will process and filter events.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Sentry.configureScope((scope) => scope.level = SentryLevel.warning);

----------------------------------------

TITLE: Initializing Sentry SDK in Swift
DESCRIPTION: This snippet demonstrates how to start the Sentry SDK using Swift. It configures the SDK with a DSN and sets the environment to 'production'.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.environment = "production"
}

----------------------------------------

TITLE: Configuring Sentry DSN via Environment Variable
DESCRIPTION: Sets up the Sentry DSN for CLI authorization using an environment variable.

LANGUAGE: bash
CODE:
export SENTRY_DSN=___PUBLIC_DSN___

----------------------------------------

TITLE: Example of Relative Source Map URL in JavaScript
DESCRIPTION: This example demonstrates a source map directive using a relative URL. Sentry will resolve this URL relative to the location of the source file.

LANGUAGE: javascript
CODE:
//# sourceMappingURL=app.js.map

----------------------------------------

TITLE: Setting Server Name in Raven Configuration for Node.js
DESCRIPTION: This snippet shows how to set the server name in the Raven configuration.

LANGUAGE: javascript
CODE:
{
  name: "primary";
}

----------------------------------------

TITLE: Adding Performance Metrics to Database Span in JavaScript
DESCRIPTION: This snippet demonstrates how to add performance metrics to a database span using Sentry's JavaScript SDK. It starts a span for a database query and sets attributes for the number of rows returned and execution time.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Database Query',
    op: 'db.query'
  },
  () => {
    // Get active span to set attributes as data becomes available
    const span = Sentry.getActiveSpan();
    
    // Execute query and add results to span
    const result = executeQuery('SELECT * FROM users WHERE active = true');
    
    // Set attributes with the results data
    if (span) {
      span.setAttribute('db.rows_returned', result.length);
      span.setAttribute('db.execution_time_ms', result.executionTime);
    }
    
    return result;
  }
);

----------------------------------------

TITLE: Rendering Platform-Specific Content for Source Map Troubleshooting in React
DESCRIPTION: This code snippet uses custom React components to conditionally render platform-specific content for source map troubleshooting. It excludes certain JavaScript platforms and includes specific content paths based on the platform.

LANGUAGE: jsx
CODE:
<PlatformSection notSupported={["javascript.capacitor", "javascript.cordova"]}>
  <PlatformContent includePath="sourcemaps/troubleshooting" />
</PlatformSection>

<PlatformSection supported={["javascript.capacitor", "javascript.cordova"]}>
  <PlatformContent includePath="sourcemaps/legacy-troubleshooting" />
</PlatformSection>

----------------------------------------

TITLE: Setting Sentry Release via AndroidManifest
DESCRIPTION: Configures Sentry release information using meta-data in the Android manifest file. Defines the release version using the io.sentry.release metadata tag.

LANGUAGE: xml
CODE:
<application>
  <meta-data android:name="io.sentry.release" android:value="io.example@1.1.0" />
</application>

----------------------------------------

TITLE: Adding and Clearing Attachments with Sentry in Kotlin Multiplatform
DESCRIPTION: This snippet demonstrates how to add a file attachment to Sentry's global scope and how to clear all attachments. It uses the Sentry Kotlin Multiplatform SDK and requires the 'io.sentry.kotlin.multiplatform' package.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry
import io.sentry.kotlin.multiplatform.Attachment

val fileAttachment = Attachment("your/path/file.log")

// Global Scope
Sentry.configureScope { scope ->
  scope.addAttachment(fileAttachment)
}

// Clear all attachments in the global Scope
Sentry.configureScope { scope ->
  scope.clearAttachments()
}

----------------------------------------

TITLE: Incrementing Sentry Counter with Tags
DESCRIPTION: Shows how to increment a metric counter in Sentry for tracking button clicks. The code includes custom tags for browser type and application version for better event categorization and filtering.

LANGUAGE: JavaScript
CODE:
// Increment a counter by one for each button click.
Sentry.metrics.increment("button_click", 1, {
  tags: { browser: "Firefox", app_version: "1.0.0" },
});

----------------------------------------

TITLE: Connecting Replays with Support Software in JavaScript
DESCRIPTION: This example provides a template for connecting Sentry's Session Replay with a support widget, demonstrating how to send a replay to Sentry when users open the support widget.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "...",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 0.5,
  integrations: [Sentry.replayIntegration()],
});

MySupportWidget.on("open", () => {
  const replay = Sentry.getReplay();
  replay.flush();
  const replayId = replay.getReplayId();
  MySupportWidget.setTag("replayId", replayId);
});

----------------------------------------

TITLE: Uploading Sourcemaps for iOS with Sentry Fastlane Plugin
DESCRIPTION: This code snippet shows how to use the Sentry Fastlane Plugin to upload generated sourcemaps for an iOS React Native application. It includes parameters for authentication, project identification, version information, and sourcemap files specific to iOS builds.

LANGUAGE: ruby
CODE:
sentry_upload_sourcemap(
  auth_token: '___ORG_AUTH_TOKEN___',
  org_slug: '___ORG_SLUG___',
  project_slug: '___PROJECT_SLUG___',
  version: '...',
  app_identifier: '...', # bundle_identifer of your app
  build: '...', # optional build number of your app
  dist: '...', # optional distribution of the release usually the buildnumber
  sourcemap: ['main.jsbundle', 'main.jsbundle.map'],
  rewrite: true
)

----------------------------------------

TITLE: Installing Sentry Electron SDK with yarn
DESCRIPTION: This command adds the @sentry/electron package to the project using yarn package manager.

LANGUAGE: bash
CODE:
yarn add @sentry/electron

----------------------------------------

TITLE: Configuring Sentry in JavaScript Expo Config
DESCRIPTION: JavaScript implementation of Sentry configuration using the withSentry wrapper. Defines app name and slug while incorporating Sentry configuration options.

LANGUAGE: javascript
CODE:
const { withSentry } = require("@sentry/react-native/expo");

const config = {
  name: "Expo Example",
  slug: "expo-example",
};

module.exports = withSentry(config, {
  url: "https://sentry.io/",
  // Use SENTRY_AUTH_TOKEN env to authenticate with Sentry.
  project: "___PROJECT_SLUG___",
  organization: "___ORG_SLUG___",
});

----------------------------------------

TITLE: Adding HTTP Breadcrumb in JavaScript
DESCRIPTION: Example of adding an HTTP breadcrumb with proper URL formatting and additional data attributes including query parameters and fragments.

LANGUAGE: javascript
CODE:
Sentry.addBreadcrumb({
  type: "http",
  category: "xhr",
  data: {
    method: "POST",
    url: "https://example.com/api/users/create.php",
    "http.query": "username=ada&password=123&newsletter=0",
    "http.fragment": "#foo",
  },
});

----------------------------------------

TITLE: Publishing Sentry Configuration and Setting DSN
DESCRIPTION: Use the Artisan command to publish Sentry configuration and set the DSN. This command creates the config file and adds the DSN to the .env file.

LANGUAGE: shell
CODE:
php artisan sentry:publish --dsn=___PUBLIC_DSN___

----------------------------------------

TITLE: Disabling Redux State Attachment in Sentry
DESCRIPTION: This code shows how to disable the automatic attachment of Redux state to Sentry error events. By setting attachReduxState to false, the enhancer will not include the state file in error reports.

LANGUAGE: javascript
CODE:
const sentryReduxEnhancer = Sentry.createReduxEnhancer({
  attachReduxState: false,
});

----------------------------------------

TITLE: Manual Configuration of Apollo Client with Sentry Interceptors (Kotlin)
DESCRIPTION: Manually configure Apollo Client with Sentry interceptors for custom NetworkTransport in Kotlin.

LANGUAGE: kotlin
CODE:
import com.apollographql.apollo3.ApolloClient
import io.sentry.apollo3.SentryApollo3HttpInterceptor
import io.sentry.apollo3.SentryApollo3Interceptor
import com.apollographql.apollo3.network.http.HttpNetworkTransport

val apollo = ApolloClient.builder()
    .networkTransport(
        HttpNetworkTransport.Builder()
            .serverUrl("https://apollo-fullstack-tutorial.herokuapp.com/graphql")
            .addInterceptor(SentryApollo3HttpInterceptor())
            .build()
    )
    .addInterceptor(SentryApollo3Interceptor())
    .build()

----------------------------------------

TITLE: Initializing OpenFeature SDK with Sentry Integration (Track All Evals)
DESCRIPTION: This snippet shows how to initialize Sentry with OpenFeature integration, set up the OpenFeature provider, and add hooks to track all feature flag evaluations. It demonstrates evaluating a boolean feature flag and capturing an exception with Sentry.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/remix';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
OpenFeature.addHooks(new Sentry.OpenFeatureIntegrationHook());

const client = OpenFeature.getClient();
const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Configuring Sentry SDK with Sanic
DESCRIPTION: Basic setup for Sentry SDK initialization with Sanic integration, including performance monitoring and profiling configuration

LANGUAGE: python
CODE:
from sanic import Sanic
import sentry_sdk
from sentry_sdk.integrations.asyncio import AsyncioIntegration

app = Sanic(__main__)

@app.listener("before_server_start")
async def init_sentry(_):
    sentry_sdk.init(
        dsn="___PUBLIC_DSN___",
        send_default_pii=True,
        traces_sample_rate=1.0,
        profiles_sample_rate=1.0,
        integrations=[AsyncioIntegration()],
    )

----------------------------------------

TITLE: Verifying Sentry Drift Instrumentation in Dart
DESCRIPTION: Execute a sample code that demonstrates the use of Sentry Drift instrumentation. This code creates a transaction, performs database operations, and finishes the transaction for tracking in Sentry.

LANGUAGE: dart
CODE:
import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:sentry/sentry.dart';
import 'package:sentry_drift/sentry_drift.dart';

import 'your_database.dart';

Future<void> driftTest() async {
  final tr = Sentry.startTransaction(
    'driftTest',
    'op',
    bindToScope: true
  );
  final executor = SentryQueryExecutor(
    () => NativeDatabase.memory(),
    databaseName: 'your_db_name',
  );
  final db = AppDatabase(executor);

  await db.into(db.todoItems).insert(
        TodoItemsCompanion.insert(
          title: 'This is a test title',
          content: 'test',
        ),
      );

  final items = await db.select(db.todoItems).get();

  await db.close();

  await tr.finish(status: const SpanStatus.ok());
}

----------------------------------------

TITLE: Clearing Sentry User Context in Ruby
DESCRIPTION: Sets an empty user context in Sentry, effectively clearing any previously set user data. This is useful when you need to reset user tracking or clear user-specific context data.

LANGUAGE: ruby
CODE:
Sentry.set_user({})

----------------------------------------

TITLE: Adding Sentry Compose Android Runtime Dependency in Gradle (Kotlin DSL)
DESCRIPTION: Demonstrates how to add the required runtime dependency for the Sentry Kotlin Compiler Plugin in the Gradle build file using Kotlin DSL. This is necessary for every relevant module unless using the Sentry Android Gradle Plugin.

LANGUAGE: kotlin
CODE:
implementation("io.sentry:sentry-compose-android:{{@inject packages.version('sentry.java.android', '8.1.0') }}")

----------------------------------------

TITLE: Handling Server-Side Errors with Sentry in Remix
DESCRIPTION: TypeScript code to handle server-side errors in Remix using Sentry's error handling utilities.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/remix";

export const handleError = Sentry.wrapHandleErrorWithSentry(
  (error, { request }) => {
    // Custom handleError implementation
  }
);

// Alternative: Use the Sentry utility function if you don't need to wrap a custom function
export const handleError = Sentry.sentryHandleError;

----------------------------------------

TITLE: Configuring RequestData Integration in JavaScript
DESCRIPTION: Configuration options for the Sentry RequestData integration, including control over what request data gets captured and how transactions are named. The integration allows customization of data capture for cookies, headers, IP, query strings, URLs, and user information.

LANGUAGE: javascript
CODE:
requestDataIntegration({
  // Controls what types of data are added to the event
  include: {
    cookies: boolean  // default: true,
    data: boolean  // default: true,
    headers: boolean  // default: true,
    ip: boolean  // default: false,
    query_string: boolean  // default: true,
    url: boolean  // default: true,
    user: boolean | {
      id: boolean  // default: true,
      username: boolean  // default: true,
      email: boolean  // default: true,
    },
  },
  // Controls how the transaction will be reported. Options are 'path' (`/some/route`),
  // 'methodPath' (`GET /some/route`), and 'handler' (the name of the route handler
  // function, if available)
  transactionNamingScheme: string  // default: 'methodPath',
})

----------------------------------------

TITLE: Compressing Debug Sections in ELF Files
DESCRIPTION: Command to compress debug sections when stripping an executable using objcopy with zlib compression.

LANGUAGE: bash
CODE:
# Note the --compress-debug-sections option
objcopy --only-keep-debug --compress-debug-sections=zlib binary binary.debug

----------------------------------------

TITLE: Sentry Initialization in External File (CommonJS)
DESCRIPTION: Example of moving Sentry initialization to an external file (instrument.js) using CommonJS syntax. This is required for proper auto-instrumentation in SDK 8.x.

LANGUAGE: javascript
CODE:
const Sentry = require('@sentry/node');

Sentry.init({
  // ...
});

----------------------------------------

TITLE: Configuring RequestData Integration in JavaScript
DESCRIPTION: Configuration options for the Sentry RequestData integration, including control over what request data gets captured and how transactions are named. The integration allows customization of data capture for cookies, headers, IP, query strings, URLs, and user information.

LANGUAGE: javascript
CODE:
requestDataIntegration({
  // Controls what types of data are added to the event
  include: {
    cookies: boolean  // default: true,
    data: boolean  // default: true,
    headers: boolean  // default: true,
    ip: boolean  // default: false,
    query_string: boolean  // default: true,
    url: boolean  // default: true,
    user: boolean | {
      id: boolean  // default: true,
      username: boolean  // default: true,
      email: boolean  // default: true,
    },
  },
  // Controls how the transaction will be reported. Options are 'path' (`/some/route`),
  // 'methodPath' (`GET /some/route`), and 'handler' (the name of the route handler
  // function, if available)
  transactionNamingScheme: string  // default: 'methodPath',
})

----------------------------------------

TITLE: Configuring BeforeSendTransaction in PowerShell for Sentry SDK
DESCRIPTION: This snippet shows how to initialize Sentry SDK in PowerShell and set up a BeforeSendTransaction callback. The callback modifies or drops transactions based on their operation type.

LANGUAGE: powershell
CODE:
Start-Sentry {
    $_.Dsn = 'https://key@127.0.0.1/1'

    # Add this to the SDK initialization callback
    $_.SetBeforeSendTransaction([System.Func[Sentry.SentryTransaction, Sentry.SentryTransaction]] {
            param([Sentry.SentryTransaction]$sentryTransaction)

            # Modify the transaction
            if ($sentryTransaction.Operation -eq 'http.server')
            {
                return $null; # Drop the transaction by returning null
            }

            return #sentryTransaction;
        });
}

----------------------------------------

TITLE: Filtering Transactions with tracesSampler in JavaScript
DESCRIPTION: This snippet demonstrates how to use the tracesSampler function to filter out certain transactions based on their name or other properties.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  tracesSampler: samplingContext => {
    if (samplingContext.transactionContext.name === "healthcheck") {
      // Drop this transaction, by setting its sample rate to 0%
      return 0;
    }
    // Default sample rate for all other transactions (replaces tracesSampleRate)
    return 0.1;
  },
});

----------------------------------------

TITLE: Installing Sentry Quartz Integration with Gradle Plugin
DESCRIPTION: Installation of Sentry JVM Gradle plugin for Quartz integration.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.jvm.gradle" version "3.13.0"
}

----------------------------------------

TITLE: Enabling Historical ANR Reporting in Java
DESCRIPTION: This code demonstrates how to enable reporting of historical ANRs using the setReportHistoricalAnrs method in Java.

LANGUAGE: java
CODE:
SentryAndroid.init(context) { options ->
  options.setReportHistoricalAnrs(true)
}

----------------------------------------

TITLE: Uploading Android Bundle and Source Map to Sentry
DESCRIPTION: This command uses the Sentry CLI to upload the generated Android bundle and source map. It specifies the release version, distribution, and strips the project root path from the source map.

LANGUAGE: bash
CODE:
node_modules/@sentry/cli/bin/sentry-cli sourcemaps upload \
    --release <release> \
    --dist <dist> \
    --strip-prefix /path/to/project/root \
    index.android.bundle index.android.bundle.map

----------------------------------------

TITLE: Uploading Minidump to Sentry using cURL
DESCRIPTION: This snippet demonstrates how to upload a Minidump file to Sentry using a cURL POST request. It sends the Minidump file in the 'upload_file_minidump' field to the Minidump Endpoint URL.

LANGUAGE: bash
CODE:
curl -X POST \
  '___MINIDUMP_URL___' \
  -F upload_file_minidump=@mini.dmp

----------------------------------------

TITLE: Adding Tags in Raven Configuration for Node.js
DESCRIPTION: This snippet shows how to add custom tags to the Raven configuration.

LANGUAGE: javascript
CODE:
{
  tags: {
    git_commit: "c0deb10c4";
  }
}

----------------------------------------

TITLE: Configuring Sentry ErrorHandler in Angular NGModule
DESCRIPTION: Shows how to register Sentry's ErrorHandler in the Angular application's providers using the NgModule approach in app.module.ts.

LANGUAGE: typescript
CODE:
import { ErrorHandler, NgModule } from "@angular/core";

import * as Sentry from "@sentry/angular";

@NgModule({
  // ...
  providers: [
    {
      provide: ErrorHandler,
      useValue: Sentry.createErrorHandler(),
    },
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Rate Limit Response Headers
DESCRIPTION: List of HTTP response headers that provide information about current rate limit status and usage. Headers include limits, remaining requests, reset timing, and concurrent request information.

LANGUAGE: http
CODE:
X-Sentry-Rate-Limit-Limit
X-Sentry-Rate-Limit-Remaining
X-Sentry-Rate-Limit-Reset
X-Sentry-Rate-Limit-ConcurrentLimit
X-Sentry-Rate-Limit-ConcurrentRemaining

----------------------------------------

TITLE: Implementing SentryTraced Decorator in NestJS TypeScript
DESCRIPTION: This snippet demonstrates how to import and use the @SentryTraced decorator from @sentry/nestjs to wrap a function for performance monitoring. The decorator creates spans when the decorated method is invoked, enabling more granular insights.

LANGUAGE: typescript
CODE:
import { SentryTraced } from '@sentry/nestjs';

export class MyService {
  @SentryTraced()
  myFunction() {
    // Your function logic here
  }
}

----------------------------------------

TITLE: Installing Sentry HTTP Package in Go
DESCRIPTION: Use the go get command to install the Sentry HTTP package for Go.

LANGUAGE: bash
CODE:
go get github.com/getsentry/sentry-go/http

----------------------------------------

TITLE: Configuring Sentry Transaction Sampling in Ruby
DESCRIPTION: Sets up a custom traces_sampler for Sentry that implements selective transaction sampling. The sampler uses transaction context to determine sampling rates, setting 0% for health checks, 10% for general HTTP requests, and 0% for all other transactions. This helps control the volume of performance data sent to Sentry while maintaining meaningful sampling of important transactions.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  #...
  config.traces_sampler = lambda do |sampling_context|
    # transaction_context is the transaction object in hash form
    # keep in mind that sampling happens right after the transaction is initialized
    # for example, at the beginning of the request
    transaction_context = sampling_context[:transaction_context]

    # transaction_context helps you sample transactions with more sophistication
    # for example, you can provide different sample rates based on the operation or name
    op = transaction_context[:op]
    transaction_name = transaction_context[:name]

    case op
    when /http/
      case transaction_name
      when /health_check/
        0.0 # ignore health_check requests
      else
        0.1
      end
    else
      0.0 # ignore all other transactions
    end
  end
end

----------------------------------------

TITLE: Configuring Sentry DSN via Environment Variable
DESCRIPTION: Sets up the Sentry CLI authorization by exporting the project's DSN as an environment variable.

LANGUAGE: bash
CODE:
export SENTRY_DSN=___PUBLIC_DSN___

----------------------------------------

TITLE: Initializing Sentry with Event Modification in PHP
DESCRIPTION: This snippet demonstrates how to initialize Sentry in PHP with a 'before_send' callback. The closure allows for modifying the event or returning null to discard it. In this example, the event is returned unmodified.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
        return $event;
    },
]);

----------------------------------------

TITLE: Incorrect Usage of Sentry Hub in Goroutines
DESCRIPTION: This snippet illustrates the incorrect way of using Sentry Hub in goroutines. It shows how using global methods can lead to non-deterministic behavior and data leaks between threads, which should be avoided.

LANGUAGE: go
CODE:
go func() {
	sentry.ConfigureScope(func(scope *sentry.Scope) {
		scope.SetTag("secretTag", "go#1")
	})
	sentry.CaptureMessage("Hello from Goroutine! #1")
}()

go func() {
	sentry.ConfigureScope(func(scope *sentry.Scope) {
		scope.SetTag("secretTag", "go#2")
	})
	sentry.CaptureMessage("Hello from Goroutine! #2")
}()

// at this point both events can have either `go#1` tag or `go#2` tag. We'll never know.

----------------------------------------

TITLE: Error Handling in Next.js Error Page (TypeScript)
DESCRIPTION: Implementation of error handling in a Next.js error.tsx file using TypeScript. Shows how to capture errors in client-side error boundary components with proper type definitions.

LANGUAGE: tsx
CODE:
"use client";

import { useEffect } from "react";
import * as Sentry from "@sentry/nextjs";

export default function ErrorPage({
  error,
}: {
  error: Error & { digest?: string };
}) {
  useEffect(() => {
    // Log the error to Sentry
    Sentry.captureException(error);
  }, [error]);

  return (
    <div>
      <h2>Something went wrong!</h2>
    </div>
  );
}

----------------------------------------

TITLE: Registering Custom User Factory in ASP.NET Core DI
DESCRIPTION: Register a custom implementation of ISentryUserFactory for capturing user information in Sentry events.

LANGUAGE: csharp
CODE:
public void ConfigureServices(IServiceCollection services)
{
    services.AddSingleton<ISentryUserFactory, MyUserFactory>();
}

LANGUAGE: fsharp
CODE:
member this.ConfigureServices(services: IServiceCollection) =
    services.AddSingleton<ISentryUserFactory, MyUserFactory>() |> ignore

----------------------------------------

TITLE: Updated Gatsby Plugin Configuration
DESCRIPTION: New method of configuring the Sentry Gatsby plugin without initialization options in gatsby-config.js.

LANGUAGE: javascript
CODE:
module.exports = {
  // ...
  plugins: [
    {
      resolve: '@sentry/gatsby',
    },
    // ...
  ],
};

----------------------------------------

TITLE: Initializing Sentry Transaction Filtering in Java
DESCRIPTION: Demonstrates how to initialize Sentry in a Java Android application with a beforeSendTransaction callback that filters transactions based on route paths. The callback prevents transactions with path '/unimportant/route' from being sent to Sentry.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  options.setBeforeSendTransaction((transaction, hint) -> {
    // Modify or drop the transaction here:
    if ("/unimportant/route".equals(transaction.getTransaction())) {
      // Don't send the transaction to Sentry
      return null;
    } else {
      return transaction;
    }
  });
});

----------------------------------------

TITLE: PHP SDK Config - Core Options
DESCRIPTION: Core configuration options for the Sentry PHP SDK including DSN, logger, release, environment settings and PII handling. These options control basic SDK behavior and event capture settings.

LANGUAGE: php
CODE:
Sentry\init([
    'dsn' => 'your-dsn',
    'environment' => 'production',
    'release' => '1.0.0',
    'max_breadcrumbs' => 100,
    'attach_stacktrace' => false,
    'send_default_pii' => false
]);

----------------------------------------

TITLE: Uploading Minidump with JSON Tags
DESCRIPTION: Shows how to upload a minidump file to Sentry using cURL with tags formatted as a JSON object. The request includes a file upload and metadata in JSON format.

LANGUAGE: bash
CODE:
curl -X POST \
  '___MINIDUMP_URL___' \
  -F upload_file_minidump=@mini.dmp \
  -F 'sentry={"tags":{"mytag":"value"}}'

----------------------------------------

TITLE: Markdown Frontmatter Configuration for Sentry Documentation
DESCRIPTION: YAML frontmatter that configures the documentation page metadata, including title, sidebar ordering, and page description.

LANGUAGE: markdown
CODE:
---
title: Account Settings
sidebar_order: 10
description: "Learn about Sentry's user settings and auth tokens."
---

----------------------------------------

TITLE: Configuring Sentry with Vernier Profiling
DESCRIPTION: Initializes Sentry with Vernier profiling configuration, setting up sample rates and specifying the Vernier profiler class.

LANGUAGE: ruby
CODE:
# config/initializers/sentry.rb

Sentry.init do |config|
  config.dsn = "___PUBLIC_DSN___"
  config.profiles_sample_rate = 1.0
  config.traces_sample_rate = 1.0
  config.profiler_class = Sentry::Vernier::Profiler
end

----------------------------------------

TITLE: Installing Sentry SDK for Cloudflare
DESCRIPTION: Package installation commands for adding Sentry Cloudflare SDK using different package managers.

LANGUAGE: bash
CODE:
npm install @sentry/cloudflare --save

LANGUAGE: bash
CODE:
yarn add @sentry/cloudflare

LANGUAGE: bash
CODE:
pnpm add @sentry/cloudflare

----------------------------------------

TITLE: Initializing Sentry with Custom Breadcrumb Filter in Dart
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK with a custom breadcrumb filter. It uses the 'beforeBreadcrumb' option to exclude breadcrumbs from a specific logger category ('a.spammy.Logger').

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.beforeBreadcrumb = (breadcrumb, hint) {
    return 'a.spammy.Logger' == breadcrumb.category ? null : breadcrumb;
  };
});

----------------------------------------

TITLE: Configuring Sentry Scope Context in Kotlin
DESCRIPTION: Sets custom context values in Sentry scope using Kotlin. Shows how to add string and integer values for name, age and attack type attributes using Kotlin's more concise lambda syntax.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.configureScope { scope ->
  scope.setContexts("name", "Mighty Fighter")
  scope.setContexts("age", 19)
  scope.setContexts("attack_type", "melee")
}

----------------------------------------

TITLE: Managing Sentry Attachments in Java
DESCRIPTION: This snippet demonstrates how to add and clear attachments in Sentry's global and local scopes using Java. It shows creating a file attachment, adding it to scopes, clearing attachments, and capturing a message with an attachment.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.Attachment;

Attachment fileAttachment = new Attachment("your/path/file.log");

// Global Scope
Sentry.configureScope(scope -> {
  scope.addAttachment(fileAttachment);
});

// Clear all attachments in the global Scope
Sentry.configureScope(scope -> {
  scope.clearAttachments();
});

// Local Scope
Sentry.withScope(scope -> {
  scope.addAttachment(fileAttachment);
  Sentry.captureMessage("my message");
});

----------------------------------------

TITLE: Implementing BeforeSendTransactionCallback in Java
DESCRIPTION: Java implementation of a custom BeforeSendTransactionCallback that adds custom attributes to transaction root spans and child spans. The component sets 'myAttribute' with value 'myValue' on both the root span context and all child spans.

LANGUAGE: java
CODE:
import io.sentry.protocol.SentryTransaction;
import io.sentry.SentryOptions;
import io.sentry.Hint;
import org.springframework.stereotype.Component;

@Component
public class CustomBeforeSendTransactionCallback implements SentryOptions.BeforeSendTransactionCallback {
    @Override
    public SentryTransaction execute(SentryTransaction transaction, Hint hint) {

        // set the attribute on the root span
        if (transaction.getContexts().getTrace() == null) {
            SpanContext spanContext = new SpanContext("op");
            transaction.getContexts().setTrace(spanContext);
        }
        transaction.getContexts().getTrace().setData("myAttribute", "myValue");

        // and on all child spans
        transaction.getSpans().forEach(span -> {
            if (span.getData() == null) {
                span.setData(new HashMap<>());
            }
            span.getData().put("myAttribute", "myValue");
        });

        return transaction;
    }
}

----------------------------------------

TITLE: Emitting a Timer Metric in Laravel with Sentry
DESCRIPTION: This snippet demonstrates how to use a timer metric in Laravel with Sentry. It shows how to measure the execution time of a specific function or code block.

LANGUAGE: php
CODE:
\Sentry\metrics()->timing(
    key: 'event_processing_time',
    callback: static fn() => process(),
);

----------------------------------------

TITLE: Initializing Sentry SDK in PHP
DESCRIPTION: This code initializes the Sentry SDK for PHP applications. It sets the DSN (Data Source Name) for identifying the Sentry project and configures the traces sample rate for performance monitoring. The DSN should be replaced with the actual project-specific value.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'traces_sample_rate' => 0.2,
]);

----------------------------------------

TITLE: Integrating Feature Flags with Sentry Toolbar (CDN)
DESCRIPTION: HTML and JavaScript code demonstrating how to integrate feature flags with the Sentry Toolbar using the OpenFeatureAdapter. This is for CDN-based implementations.

LANGUAGE: html
CODE:
<script>
// Define your provider
const provider = new FlagdWebProvider({...});

// Set the provider into the OpenFeature SDK
OpenFeature.setProvider(provider);

window.SentryToolbar.init({
  ...
  // Set the provider into the OpenFeatureAdapter
  featureFlags: window.SentryToolbar.OpenFeatureAdapter({provider})
});
</script>

----------------------------------------

TITLE: Adding SentryModule to NestJS Main Module
DESCRIPTION: This snippet demonstrates how to add the SentryModule as a root module in the main NestJS module. It imports the SentryModule and adds it to the imports array of the module decorator.

LANGUAGE: javascript
CODE:
import { Module } from "@nestjs/common";
import { SentryModule } from "@sentry/nestjs/setup";
import { AppController } from "./app.controller";
import { AppService } from "./app.service";

@Module({
  imports: [
    SentryModule.forRoot(),
    // ...other modules
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

----------------------------------------

TITLE: Initializing Sentry SDK in PHP with Custom Breadcrumb Handling
DESCRIPTION: This code initializes the Sentry SDK for error tracking in a PHP application. It sets the Data Source Name (DSN) and configures a custom breadcrumb handling function. The 'before_breadcrumb' callback allows for modification or filtering of breadcrumbs before they are recorded.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'before_breadcrumb' => function (\Sentry\Breadcrumb $breadcrumb): ?\Sentry\Breadcrumb {
        return $breadcrumb;
    },
]);

----------------------------------------

TITLE: Project Teams List Endpoint - JSON
DESCRIPTION: Separate endpoint response for retrieving teams associated with a project, demonstrating handling of unbounded relationships.

LANGUAGE: json
CODE:
GET /api/0/projects/{project_slug}/teams
[
  {
    "id": 1,
		"name": "Team 1",
		"slug": "team1",
  },
	{
    "id": 2,
		"name": "Team 2",
		"slug": "team2",
  }
]

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Sample Rate
DESCRIPTION: Demonstrates how to initialize the Sentry SDK using the init method with configuration options. Sets the traces sample rate to 20% (0.2) to control the amount of performance data being captured.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.tracesSampleRate = 0.2;
});

----------------------------------------

TITLE: Running Java Application with Sentry OpenTelemetry Agent (Environment Variable)
DESCRIPTION: This command runs a Java application with the Sentry OpenTelemetry Agent using environment variables. It disables auto-initialization and specifies the agent JAR file.

LANGUAGE: bash
CODE:
SENTRY_AUTO_INIT=false JAVA_TOOL_OPTIONS="-javaagent:sentry-opentelemetry-agent-{{@inject packages.version('sentry.java.opentelemetry-agent') }}.jar" java -jar your-application.jar

----------------------------------------

TITLE: Setting Release Version in Sentry SDK
DESCRIPTION: This snippet demonstrates how to set the release version when initializing the Sentry SDK. The actual code varies by platform and is represented by a placeholder.

LANGUAGE: text
CODE:
<PlatformContent includePath="set-release" notateUnsupported />

----------------------------------------

TITLE: Configuring Sentry Server-Side Integration
DESCRIPTION: Server-side initialization of Sentry including profiling integration and trace sampling configuration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/astro";
import { nodeProfilingIntegration } from '@sentry/profiling-node';

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    nodeProfilingIntegration(),
  ],

  tracesSampleRate: 1.0,

  profilesSampleRate: 1.0
});

----------------------------------------

TITLE: Local Testing Feature Configuration in YAML
DESCRIPTION: Example YAML configuration for testing Flagpole features in a local development environment using the GetSentry devserver.

LANGUAGE: yaml
CODE:
options:
  'feature.organizations:is_sentry':
    created_at: '2024-06-01T00:00:00.000000'
    enabled: false
    owner: hybrid-cloud
    segments:
    - conditions:
      - operator: in
        value:
          - sentry
        property: organization_slug
      name: is_sentry
      rollout: 100

----------------------------------------

TITLE: Configuring In-App Frame Inclusion and Exclusion in Swift
DESCRIPTION: This snippet demonstrates how to configure the Sentry SDK in Swift to mark specific frameworks as in-app or not in-app using the inAppInclude and inAppExclude options.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"

    // The SDK marks all frameworks starting with MyBusinessLogic as inApp
    options.add(inAppInclude: "MyBusinessLogic")

    // The SDK marks all frameworks starting with MyFramework as not inApp
    options.add(inAppExclude: "MyFramework")
}

----------------------------------------

TITLE: Configuring SentryAppender in Log4j 2 XML
DESCRIPTION: This XML configuration demonstrates how to set up SentryAppender in a log4j2.xml file for Spring Boot applications using Log4j 2.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<Configuration>

  <Appenders>
    <Console name="CONSOLE" target="SYSTEM_OUT">
      <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
    </Console>
    <Sentry name="SENTRY"/>
  </Appenders>

  <Loggers>
    <Root level="INFO">
      <AppenderRef ref="CONSOLE"/>
      <AppenderRef ref="SENTRY"/>
    </Root>
  </Loggers>

</Configuration>

----------------------------------------

TITLE: Configuring SentryAppender in Log4j 2 XML
DESCRIPTION: This XML configuration demonstrates how to set up SentryAppender in a log4j2.xml file for Spring Boot applications using Log4j 2.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<Configuration>

  <Appenders>
    <Console name="CONSOLE" target="SYSTEM_OUT">
      <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
    </Console>
    <Sentry name="SENTRY"/>
  </Appenders>

  <Loggers>
    <Root level="INFO">
      <AppenderRef ref="CONSOLE"/>
      <AppenderRef ref="SENTRY"/>
    </Root>
  </Loggers>

</Configuration>

----------------------------------------

TITLE: Configuring Cocoapods Framework Export for iOS
DESCRIPTION: Sets up Cocoapods configuration to export the Sentry framework for iOS targets, including deployment settings and Sentry pod dependencies.

LANGUAGE: kotlin
CODE:
cocoapods {
  summary = "Some description for the Shared Module"
  homepage = "Link to the Shared Module homepage"
  ios.deploymentTarget = "14.1"
  podfile = project.file("../iosApp/Podfile")
  pod("Sentry") {
    version = "~> 8.25"
    linkOnly = true
    extraOpts += listOf("-compiler-option", "-fmodules")
  }
  framework {
    baseName = "shared"
    export("io.sentry:sentry-kotlin-multiplatform:{{@inject packages.version('sentry.kotlin.kmp', '0.0.1-alpha.2') }}")
  }
}

----------------------------------------

TITLE: Retrieving the Current Span from Sentry Scope in Ruby
DESCRIPTION: This snippet shows how to retrieve the current span from the Sentry scope. This is useful when you need to access or manipulate the current span in your Ruby application.

LANGUAGE: ruby
CODE:
span = Sentry.get_current_scope.get_span

----------------------------------------

TITLE: Installing Uvicorn for Running the GraphQL Server
DESCRIPTION: Install Uvicorn, an ASGI server, to run the GraphQL application.

LANGUAGE: bash
CODE:
pip install uvicorn

----------------------------------------

TITLE: Installing Sentry Android Gradle Plugin
DESCRIPTION: Adding the Sentry Android Gradle plugin to build.gradle for file I/O monitoring support.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.android.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

LANGUAGE: kotlin
CODE:
plugins {
  id("io.sentry.android.gradle") version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

----------------------------------------

TITLE: Configuring Event Sampling with Raven-Go SDK in Go
DESCRIPTION: This code demonstrates how to set up client-side sampling for Sentry events using the SetSampleRate method. In this example, it's set to capture 25% of events.

LANGUAGE: go
CODE:
raven.SetSampleRate(0.25)

----------------------------------------

TITLE: Uploading Debug Files with Wait Option
DESCRIPTION: This command uploads debug files to Sentry and waits for confirmation. It's useful for manual testing before sending the first native crash or error event.

LANGUAGE: shell
CODE:
sentry-cli debug-files upload --wait

----------------------------------------

TITLE: Configuring Span Filtering with ignoreSpans in Sentry
DESCRIPTION: Demonstrates how to filter spans using glob patterns or strings with the ignoreSpans configuration option. This approach allows filtering out specific HTTP routes and event patterns.

LANGUAGE: javascript
CODE:
Sentry.init({
  ignoreSpans: [
    'GET /about',
    'events.signal *',
  ]
})

----------------------------------------

TITLE: Configuring Vite with Sentry Plugin
DESCRIPTION: Configuration setup for Vite with Sentry plugin integration, including source map generation and project settings.

LANGUAGE: javascript
CODE:
import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";
import { sentryVitePlugin } from "@sentry/vite-plugin";

// https://vitejs.dev/config/
export default defineConfig({
  build: {
    sourcemap: true, // Source map generation must be turned on
  },
  plugins: [
    vue(),

    // Put the Sentry vite plugin after all other plugins
    sentryVitePlugin({
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",
      authToken: process.env.SENTRY_AUTH_TOKEN,
    }),
  ],
});

----------------------------------------

TITLE: Basic IP Address Scrubbing Configuration in JSON
DESCRIPTION: Simple configuration example showing how to replace IP addresses in all string fields using the @ip:replace rule.

LANGUAGE: json
CODE:
{
  "applications": {
    "$string": ["@ip:replace"]
  }
}

----------------------------------------

TITLE: Enabling Historical ANR Reporting in Kotlin
DESCRIPTION: This snippet shows how to enable reporting of historical ANRs using the setReportHistoricalAnrs option in Kotlin.

LANGUAGE: kotlin
CODE:
SentryAndroid.init(context) { options ->
  options.isReportHistoricalAnrs = true
}

----------------------------------------

TITLE: Creating Sentry Attachment from Byte Data in C++
DESCRIPTION: Shows how to create a Sentry attachment using raw byte data. This method requires explicitly specifying a filename.

LANGUAGE: cpp
CODE:
#include "SentryAttachment.h"

const TArray<uint8>& Data = ...

const FString& Filename = "file.log";

USentryAttachment* Attachment = NewObject<USentryAttachment>();
Attachment->InitializeWithData(Data, Filename);

----------------------------------------

TITLE: Configuring Sentry Context Lines with Loader v7
DESCRIPTION: Implements Sentry context lines integration using the v7 loader script method. Includes both the main Sentry loader and the context lines script.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});

    if (Sentry.contextLinesIntegration) {
      Sentry.addIntegration(Sentry.contextLinesIntegration());
    }
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/7.118.0/contextlines.min.js"
  integrity="sha384-gEhhSwfS59ymyyW9I1NMvuFGgYTaNhdU5/fOAlxk3JWx0KMuf7SqsRQ4MiTMWcHU"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Initializing Sentry SDK with Apache Beam Integration in Python
DESCRIPTION: Configuration code for setting up Sentry SDK with Apache Beam integration, including options for error monitoring, performance tracing, and profiling. Requires Beam version 2.12 or later and identical Sentry versions across all worker nodes.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.beam import BeamIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
    integrations=[
        BeamIntegration(),
    ],
)

----------------------------------------

TITLE: Configuring Next.js Instrumentation Hook
DESCRIPTION: Enable the Next.js instrumentation hook by setting experimental.instrumentationHook to true in next.config.js. This configuration is not required for Next.js 15+.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    instrumentationHook: true, // Not required on Next.js 15+
  },
}

----------------------------------------

TITLE: Resolving Stylelint Duplicate Selector Error
DESCRIPTION: Shows how to use comments to assist the stylelint in recognizing styled components as selectors, avoiding the 'No duplicate selectors' error.

LANGUAGE: tsx
CODE:
const ButtonBar = styled("div")`
  ${/* sc-selector */Button) {
     border-radius: 0;
  }
`;

----------------------------------------

TITLE: Source Maps Upload Configuration
DESCRIPTION: Configuration for uploading source maps to Sentry during build process.

LANGUAGE: javascript
CODE:
export default defineNuxtConfig({
  modules: ["@sentry/nuxt/module"],
  sentry: {
    sourceMapsUploadOptions: {
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",
      authToken: "___ORG_AUTH_TOKEN___"
    }
  }
});

----------------------------------------

TITLE: Demonstrating Loguru Logging Behavior
DESCRIPTION: Example showing different logging levels and their effects in Sentry, including breadcrumbs and error events.

LANGUAGE: python
CODE:
from loguru import logger

logger.debug("I am ignored")
logger.info("I am a breadcrumb")
logger.error("I am an event", extra=dict(bar=43))
logger.exception("An exception happened")

----------------------------------------

TITLE: Configuring Sentry Scope with User Data in C++
DESCRIPTION: Demonstrates how to configure a Sentry scope with user information and custom tags using a scope delegate callback function.

LANGUAGE: cpp
CODE:
FConfigureScopeDelegate ScopeDelegate;
ScopeDelegate.BindDynamic(this, &USomeClass::HandleScopeDelegate);

void USomeClass::HandleScopeDelegate(USentryScope* Scope)
{
    USentryUser* SentryUser = NewObject<USentryUser>();
    SentryUser->SetEmail("john.doe@example.com");
    SentryUser->SetId(42);

    Scope->SetUser(SentryUser);
    Scope->SetTagValue("my-tag", "my value");
}

...

USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->ConfigureScope(ScopeDelegate);

----------------------------------------

TITLE: Configuring Auto Session Tracking Interval in Sentry .NET SDK
DESCRIPTION: Sets the interval duration for which Sentry will continue the same session after an application resumes from background. The SDK uses this setting to determine whether to continue an existing session or create a new one when the application regains focus.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.AutoSessionTrackingInterval = TimeSpan.FromSeconds(30);

----------------------------------------

TITLE: Installing Sentry Apollo 3 Integration with SBT
DESCRIPTION: Add the Sentry Apollo 3 integration dependency to your SBT project.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-apollo-3" % "{{@inject packages.version('sentry.java.apollo-3', '5.2.0') }}"

----------------------------------------

TITLE: Configuring Cron Monitors Programmatically in Sentry
DESCRIPTION: Demonstrates how to programmatically create and configure monitors using both crontab and interval schedules with detailed configuration options.

LANGUAGE: php
CODE:
// Create a crontab schedule object (every 10 minutes)
$monitorSchedule = \Sentry\MonitorSchedule::crontab('*/10 * * * *');

// Or create an interval schedule object (every 10 minutes)
$monitorSchedule = \Sentry\MonitorSchedule::interval(10, MonitorScheduleUnit::minute());

// Create a config object
$monitorConfig = new \Sentry\MonitorConfig(
    $monitorSchedule,
    checkinMargin: 5, // Optional check-in margin in minutes
    maxRuntime: 15, // Optional max runtime in minutes
    timezone: 'Europe/Vienna', // Optional timezone
    failureIssueThreshold: 2 //Optional failure issue threshold
    recoveryThreshold: 5 // Optional recovery threshold
);

// 🟡 Notify Sentry your job is running:
$checkInId = \Sentry\captureCheckIn(
    slug: '<monitor-slug>',
    status: CheckInStatus::inProgress(),
    monitorConfig: $monitorConfig,
);

// Execute your scheduled task here...

// 🟢 Notify Sentry your job has completed successfully:
\Sentry\captureCheckIn(
    slug: '<monitor-slug>',
    status: CheckInStatus::ok(),
    checkInId: $checkInId,
);

----------------------------------------

TITLE: Updating BrowserTracing Integration in Sentry Svelte SDK
DESCRIPTION: This snippet demonstrates how to update the BrowserTracing integration when initializing Sentry in a Svelte application. It shows the change from using the class-based 'new Sentry.BrowserTracing()' to the function-based 'Sentry.browserTracingIntegration()'.

LANGUAGE: JavaScript
CODE:
import * as Sentry from "@sentry/svelte";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
-  integrations: [new Sentry.BrowserTracing()],
+  integrations: [Sentry.browserTracingIntegration()],
});

----------------------------------------

TITLE: Disabling Automatic Session Tracking in Sentry Flutter
DESCRIPTION: Disables the automatic session tracking feature in Sentry Flutter SDK by setting enableAutoSessionTracking to false. Note that this will make release health data unavailable.

LANGUAGE: dart
CODE:
SentryFlutter.init((options) {
  options.enableAutoSessionTracking = false;
});

----------------------------------------

TITLE: Setting Sentry URL Denylist in Dart
DESCRIPTION: Initializes Sentry with a list of URL patterns that should be denied from processing. Uses regex patterns to match URLs that should be excluded from Sentry's monitoring, including URLs ending with 'ends-with-this' and exactly matching 'denied-url'.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.denyUrls = ["^.*ends-with-this\$", "denied-url"];
});

----------------------------------------

TITLE: Previewing SwiftUI Masking in Xcode
DESCRIPTION: This example demonstrates how to use the sentryReplayPreviewMask modifier in SwiftUI preview code to visualize masking during the design phase.

LANGUAGE: swift
CODE:
struct ContentView_Previews: PreviewProvider {
  static var previews: some View {
    ContentView()
      .sentryReplayPreviewMask()
  }
}

----------------------------------------

TITLE: Example JSON for Sentry Span/Transaction Status
DESCRIPTION: A simple JSON object demonstrating the use of the 'status' field with an 'ok' value. This represents a successful operation in Sentry's Span/Transaction data.

LANGUAGE: json
CODE:
{
  "status": "ok"
}

----------------------------------------

TITLE: Installing Sentry React SDK
DESCRIPTION: Commands for installing the Sentry React SDK using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/react --save

LANGUAGE: bash
CODE:
yarn add @sentry/react

LANGUAGE: bash
CODE:
pnpm add @sentry/react

----------------------------------------

TITLE: Modifying Spans with SentryApolloInterceptor in Kotlin
DESCRIPTION: This code shows how to modify spans created by SentryApolloInterceptor using a BeforeSpanCallback in Kotlin.

LANGUAGE: kotlin
CODE:
import com.apollographql.apollo.ApolloClient
import com.apollographql.apollo.interceptor.ApolloInterceptor.InterceptorRequest
import com.apollographql.apollo.interceptor.ApolloInterceptor.InterceptorResponse
import io.sentry.ISpan
import io.sentry.apollo.SentryApolloInterceptor
import io.sentry.apollo.SentryApolloInterceptor.BeforeSpanCallback

val apollo = ApolloClient.builder()
    .serverUrl("https://your-api-host/")
    .addApplicationInterceptor(
        SentryApolloInterceptor(object : BeforeSpanCallback {
            override fun execute(span: ISpan, request: InterceptorRequest, response: InterceptorResponse?): ISpan {
                if ("aQuery" == request.operation.name().name()) {
                    span.setTag("tag-key", "tag-value")
                }
                return span
            }
        })
    )
    .build()

----------------------------------------

TITLE: Installing Raven with Flask Integration
DESCRIPTION: Command to install Raven Python SDK with Flask-specific dependencies.

LANGUAGE: bash
CODE:
pip install raven[flask]

----------------------------------------

TITLE: Configuring Vite with Sentry Plugin for Source Map Upload
DESCRIPTION: This code configures Vite to generate source maps and use the Sentry Vite plugin. It includes settings for the organization, project, and authentication token.

LANGUAGE: JavaScript
CODE:
import { defineConfig } from "vite";
import { svelte } from "@sveltejs/vite-plugin-svelte";
import { sentryVitePlugin } from "@sentry/vite-plugin";

export default defineConfig({
  build: {
    sourcemap: true, // Source map generation must be turned on
  },
  plugins: [
    svelte(),

    // Put the Sentry vite plugin after all other plugins
    sentryVitePlugin({
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",
      authToken: process.env.SENTRY_AUTH_TOKEN,
    }),
  ],
});

----------------------------------------

TITLE: Implementing Custom Sampling Callback in Java
DESCRIPTION: Creates a custom sampling callback implementation in Java that allows dynamic control of transaction sampling rates based on context. The callback can access HTTP request information and return sampling rates between 0 and 1.

LANGUAGE: java
CODE:
import io.sentry.SentryOptions.TracesSamplerCallback;
import io.sentry.SamplingContext;
import org.springframework.stereotype.Component;

@Component
class CustomTracesSamplerCallback implements TracesSamplerCallback {
  @Override
  public Double sample(SamplingContext context) {
    CustomSamplingContext customSamplingContext = context.getCustomSamplingContext();
    if (customSamplingContext != null) {
      HttpServletRequest request = (HttpServletRequest) customSamplingContext.get("request");
      // return a number between 0 and 1 or null (to fallback to configured value)
    } else {
      // return a number between 0 and 1 or null (to fallback to configured value)
    }
  }
}

----------------------------------------

TITLE: Importing Sentry SDK for Next.js
DESCRIPTION: Imports all exports from the Sentry Next.js SDK package as a namespace called Sentry. This is the standard way to import the Sentry SDK for use in a Next.js application for error monitoring and performance tracking.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/nextjs";

----------------------------------------

TITLE: Configuring MaxMind GeoIP Account for Sentry
DESCRIPTION: This snippet shows the content of the GeoIP.conf file needed to configure MaxMind credentials for Sentry. It includes the AccountID, LicenseKey, and EditionIDs for the GeoLite2-City database.

LANGUAGE: plaintext
CODE:
AccountID 012345
LicenseKey foobarbazbuz
EditionIDs GeoLite2-City

----------------------------------------

TITLE: JavaScript Root Directory Setup
DESCRIPTION: JavaScript implementation for storing the root directory path globally without TypeScript type declarations.

LANGUAGE: javascript
CODE:
// Insert the following in a file inside your root directory
global.__rootdir__ = __dirname || process.cwd();

----------------------------------------

TITLE: Capturing Exceptions with Sentry in F#
DESCRIPTION: This snippet demonstrates how to capture exceptions using the Sentry SDK in F#. It shows setting tags and levels for the captured exception, as well as capturing an exception without additional context.

LANGUAGE: fsharp
CODE:
open Sentry

// will be tagged with my-tag="my value"
SentrySdk.CaptureException (exn "my error",
  fun scope ->
    scope.SetTag("my-tag", "my value")
    scope.Level <- SentryLevel.Warning
  )

// will not be tagged with my-tag
SentrySdk.CaptureException(exn "my other error")

----------------------------------------

TITLE: Making Sentry Data Public in Python
DESCRIPTION: Configures Sentry to make all data publicly accessible, intended for installations behind company firewalls.

LANGUAGE: python
CODE:
SENTRY_PUBLIC = True

----------------------------------------

TITLE: Configuring Cloudflare Compatibility Flags
DESCRIPTION: Configuration settings for wrangler.toml/json to enable necessary Node.js compatibility flags for Sentry SDK.

LANGUAGE: toml
CODE:
compatibility_flags = ["nodejs_compat"]
# compatibility_flags = ["nodejs_als"]

LANGUAGE: json
CODE:
{
  "compatibility_flags": [
    "nodejs_compat",
    // "nodejs_als"
  ]
}

----------------------------------------

TITLE: Enabling Excimer Extension
DESCRIPTION: Commands to enable the Excimer extension for FPM or Apache2.

LANGUAGE: bash
CODE:
phpenmod -s fpm excimer
# or
phpenmod -s apache2 excimer

----------------------------------------

TITLE: Setting Hashed PII Tag in Java
DESCRIPTION: Configures a Sentry scope to set a tag containing a hashed birthday value using the checksumOrHash utility function. This approach helps protect sensitive PII data while still allowing tracking.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.configureScope(scope -> {
  scope.setTag("birthday", checksumOrHash("08/12/1990"));
});

----------------------------------------

TITLE: Setting Sentry Warning Level in C
DESCRIPTION: Configures the Sentry SDK logging level to WARNING. This determines which events will be captured and sent to Sentry for monitoring and error tracking.

LANGUAGE: c
CODE:
#include <sentry.h>

sentry_set_level(SENTRY_LEVEL_WARNING);

----------------------------------------

TITLE: Configuring Automatic Session Tracking in Sentry SDK
DESCRIPTION: This snippet shows how to configure automatic session tracking for release health monitoring. The specific implementation depends on the platform.

LANGUAGE: text
CODE:
<PlatformContent includePath="configuration/auto-session-tracking" />

----------------------------------------

TITLE: Initializing Sentry in iOS Application Delegate
DESCRIPTION: Example of initializing Sentry in the application(_:didFinishLaunchingWithOptions:) method of an iOS Application Delegate.

LANGUAGE: swift
CODE:
import shared

func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil
) -> Bool {
    SentrySetupKt.initializeSentry()
    return true
}

// OR if you're using SwiftUI:

@main
struct SwiftUIApp: App {
    init() {
        SentrySetupKt.initializeSentry()
    }
}

----------------------------------------

TITLE: Customizing Sentry User Feedback Modal Configuration
DESCRIPTION: Configuration parameters for customizing the Sentry.showReportDialog function. Includes options for setting event ID, DSN, user data, language, UI text elements, and callback functions.

LANGUAGE: javascript
CODE:
Sentry.showReportDialog({
  eventId: "custom-event-id",
  dsn: "your-dsn",
  user: {
    email: "user@example.com",
    name: "User Name"
  },
  lang: "en",
  title: "It looks like we're having issues.",
  subtitle: "Our team has been notified.",
  subtitle2: "If you'd like to help, tell us what happened below.",
  labelName: "Name",
  labelEmail: "Email",
  labelComments: "What happened?",
  labelClose: "Close",
  labelSubmit: "Submit",
  errorGeneric: "An unknown error occurred while submitting your report. Please try again.",
  errorFormEntry: "Some fields were invalid. Please correct the errors and try again.",
  successMessage: "Your feedback has been sent. Thank you!",
  onLoad: () => {
    // Custom logic when widget opens
  },
  onClose: () => {
    // Custom logic when widget closes
  }
})

----------------------------------------

TITLE: Lazy Loading Sentry Replay Integration with Vue
DESCRIPTION: Shows how to initialize Sentry without the Replay integration and then dynamically add it later using dynamic imports. This approach allows for more efficient initial loading while maintaining the ability to add functionality when needed.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Note, Replay is NOT instantiated below:
  integrations: [],
});

// Sometime later
import("@sentry/vue").then(lazyLoadedSentry => {
  Sentry.addIntegration(lazyLoadedSentry.replayIntegration());
});

----------------------------------------

TITLE: Disabling Default Integration in Swift
DESCRIPTION: Example showing how to disable the SentryAutoBreadcrumbTrackingIntegration by filtering it out from the default integrations list when initializing the Sentry SDK.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.integrations = Sentry.Options.defaultIntegrations().filter { name in
        name != "SentryAutoBreadcrumbTrackingIntegration"
    }
}

----------------------------------------

TITLE: Configuring Sentry Logcat Integration
DESCRIPTION: Configuration options for Sentry's Logcat instrumentation, including enabling/disabling the feature and setting minimum log levels.

LANGUAGE: groovy
CODE:
import io.sentry.android.gradle.extensions.InstrumentationFeature
import io.sentry.android.gradle.instrumentation.logcat.LogcatLevel

sentry {
  tracingInstrumentation {
    enabled = true

    logcat {
      enabled = true
      minLevel = LogcatLevel.WARNING
    }
  }
}

LANGUAGE: kotlin
CODE:
import java.util.EnumSet
import io.sentry.android.gradle.extensions.InstrumentationFeature
import io.sentry.android.gradle.instrumentation.logcat.LogcatLevel

sentry {
  tracingInstrumentation {
    enabled.set(true)

    logcat {
      enabled.set(true)
      minLevel.set(LogcatLevel.WARNING)
    }
  }
}

----------------------------------------

TITLE: Configuring Jenkins Freestyle Project for Sentry Deployment
DESCRIPTION: Shell script for Freestyle projects that handles Sentry deployment notifications. Includes installing Sentry CLI, managing releases, handling commits, and managing sourcemaps.

LANGUAGE: bash
CODE:
curl -sL https://sentry.io/get-cli/ | bash || true

export SENTRY_ORG=sample-organization-slug
export SENTRY_PROJECT=sample-project-slug
export SENTRY_ENVIRONMENT=production
export SENTRY_RELEASE=$(sentry-cli releases propose-version)

sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
sentry-cli releases set-commits $SENTRY_RELEASE --auto
sentry-cli sourcemaps upload --release $SENTRY_RELEASE path-to-sourcemaps-if-applicable
sentry-cli releases finalize $SENTRY_RELEASE
sentry-cli deploys new -e $SENTRY_ENVIRONMENT

----------------------------------------

TITLE: Initializing Sentry with Console Capture using Loader (v8)
DESCRIPTION: This snippet illustrates how to initialize Sentry with console capture integration using the Sentry Loader script (version 8). It configures the sentryOnLoad function to initialize Sentry and lazy load the console capture integration.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});

    Sentry.lazyLoadIntegration("captureConsoleIntegration").then(
      (integration) => {
        Sentry.addIntegration(integration());
      }
    );
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Implementing Traces Sampler Function in Sentry Flutter Initialization
DESCRIPTION: This code snippet demonstrates how to set up a custom sampling function in the SentryFlutter.init() method. The function uses a sampling context to determine the sampling rate for different scenarios, allowing for fine-grained control over performance monitoring.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) => options.tracesSampleRate = 1.0,
    appRunner: () => runApp(MyApp()),
  );
}

// Configure a TracesSampler
Future<void> main() async {
  await SentryFlutter.init(
    (options) {
      options.tracesSampler = (samplingContext) {
        // If this is the continuation of a trace, just use that decision (rate controlled by the caller)
        final parentSampled = samplingContext['parentSampled'];
        if (parentSampled != null) {
          return parentSampled ? 1.0 : 0.0;
        }

        // Determine traces sample rate based on the routes
        final route = samplingContext['route'];
        if (route == '/login') {
          // Login 100% of the time
          return 1.0;
        } else if (route == '/search') {
          // Search 50% of the time
          return 0.5;
        }

        // Default sample rate
        return 0.1;
      };
    },
    appRunner: () => runApp(MyApp()),
  );
}

----------------------------------------

TITLE: Accessing FastHTTP Context in Sentry BeforeSend Callback in Go
DESCRIPTION: Shows how to access the original FastHTTP context within the Sentry BeforeSend callback for additional event customization.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	BeforeSend: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
		if hint.Context != nil {
			if ctx, ok := hint.Context.Value(sentry.RequestContextKey).(*fasthttp.RequestCtx); ok {
				// You have access to the original Context if it panicked
				fmt.Println(string(ctx.Request.Host()))
			}
		}
		return event
	},
})

----------------------------------------

TITLE: Uploading Minidump with JSON Sentry Attributes using cURL
DESCRIPTION: This snippet demonstrates uploading a Minidump file to Sentry with additional Sentry-specific attributes in JSON format. It shows how to set the release and add a tag using the 'sentry' field with JSON data.

LANGUAGE: bash
CODE:
curl -X POST \
  '___MINIDUMP_URL___' \
  -F upload_file_minidump=@mini.dmp \
  -F 'sentry={"release":"my-project-name@2.3.12","tags":{"mytag":"value"}}'

----------------------------------------

TITLE: Verifying Sentry Integration
DESCRIPTION: Demonstrates how to test the Sentry integration by intentionally throwing and capturing an exception. This code helps verify that events are being properly sent to Sentry.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

try {
  throw StateError('Sentry Test Exception');
} catch (exception, stackTrace) {
  await Sentry.captureException(
    exception,
    stackTrace: stackTrace,
  );
}

----------------------------------------

TITLE: Implementing Sentry Trace Sampling Logic in PHP
DESCRIPTION: PHP implementation of a custom trace sampling service that provides conditional sampling logic based on parent sampling status and custom conditions

LANGUAGE: php
CODE:
<?php

namespace App\Service;

class Sentry
{
    public function getTracesSampler(): callable
    {
        return function (\Sentry\Tracing\SamplingContext $context): float {
            if ($context->getParentSampled()) {
                // If the parent transaction (for example a JavaScript front-end)
                // is sampled, also sample the current transaction
                return 1.0;
            }

            if (some_condition()) {
                // Drop this transaction, by setting its sample rate to 0
                return 0;
            }

            // Default sample rate for all other transactions (replaces `traces_sample_rate`)
            return 0.25;
        };
    }
}

----------------------------------------

TITLE: Initializing Sentry with Custom DSN and BeforeSend Callback in PowerShell
DESCRIPTION: This snippet configures Sentry with a specific DSN and implements a BeforeSend callback to filter out events containing 'Noisy Exception' in the message. It demonstrates how to selectively process or discard events before they are sent to Sentry.

LANGUAGE: powershell
CODE:
Start-Sentry {
    $_.Dsn = 'https://key@127.0.0.1/1'

    # Capture all events in BeforeSend callback & drop them.
    $_.SetBeforeSend([System.Func[Sentry.SentryEvent, Sentry.SentryEvent]] {
            param([Sentry.SentryEvent]$event_)
            
            if ($null -ne $event_.Exception -and $event_.Exception.Message.Contains("Noisy Exception"))
            {
                return $null # Don't send this event to Sentry
            }
            
            return $event_
        });
}

----------------------------------------

TITLE: Configuring Crash Reporter Endpoint in UE
DESCRIPTION: Configuration settings for the CrashReportClient in DefaultEngine.ini file to specify the Sentry endpoint for crash reporting.

LANGUAGE: ini
CODE:
[CrashReportClient]
CrashReportClientVersion=1.0
DataRouterUrl="___UNREAL_URL___"

----------------------------------------

TITLE: Creating a Test Button for Tracing and API Error
DESCRIPTION: Implements a button that triggers a trace and an API error to test Sentry's tracing and error capture.

LANGUAGE: TypeScript
CODE:
<button
  type="button"
  onClick={async () => {
    await Sentry.startSpan(
      {
        name: "Example Frontend Span",
        op: "test",
      },
      async () => {
        const res = await fetch("/api/sentry-example-api");
        if (!res.ok) {
          throw new Error("Sentry Example Frontend Error");
        }
      }
    );
  }}
>
  Break the world
</button>

----------------------------------------

TITLE: Installing Sentry GraphQL Integration with Maven
DESCRIPTION: Instructions for installing the Sentry GraphQL integration using Maven plugin or dependency.

LANGUAGE: xml
CODE:
<plugin>
  <groupId>io.sentry</groupId>
  <artifactId>sentry-maven-plugin</artifactId>
  <version>{{@inject packages.version('sentry.java.maven-plugin', '0.0.2') }}</version>
  <!-- Required to allow auto-install of Sentry SDK and Integrations -->
  <extensions>true</extensions>
</plugin>

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-graphql</artifactId>
    <version>{{@inject packages.version('sentry.java.graphql', '6.28.0') }}</version>
</dependency>

----------------------------------------

TITLE: Visualizing Sentry's High-Level Architecture with Mermaid
DESCRIPTION: This diagram illustrates the high-level architecture of Sentry, showing the relationships between various components such as the application, load balancer, Relay, Kafka, Redis, and databases.

LANGUAGE: mermaid
CODE:
graph TD
  app[Your Application] --> |SDK| lb{{Load Balancer}}
  lb --> |"sentry.example.com/api/0/envelope/"| relay
  lb --> |"sentry.example.com"| sentry_web["Sentry (web)"]
  symbolicator --> sentry_web
  relay --> kafka
  relay --> redis
  sentry_web --> snuba
  sentry_web --> memcached
  sentry_web --> postgres
  sentry_web --> redis
  snuba --> kafka
  snuba --> redis
  snuba --> clickhouse
  kafka --> zookeeper
  sentry_web --> sentry_worker["Sentry (worker)"]
  sentry_worker --> memcached
  sentry_worker --> redis
  sentry_worker --> postgres
  sentry_worker --> symbolicator

  click snuba "https://github.com/getsentry/snuba" "Snuba Documentation"
  click relay "https://github.com/getsentry/relay" "Relay Documentation"

----------------------------------------

TITLE: Disabling User Interaction Breadcrumbs in Sentry Flutter SDK
DESCRIPTION: This code demonstrates how to disable user interaction breadcrumbs by setting the enableUserInteractionBreadcrumbs option to false during SDK initialization.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) => options.enableUserInteractionBreadcrumbs = false,
    appRunner: () => runApp(SentryWidget(child: MyApp())),
  );
}

----------------------------------------

TITLE: Mobile App Backend Services Tracing Configuration
DESCRIPTION: Sentry configuration for mobile applications with multiple backend services, including media handling capabilities.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracePropagationTargets: [
    "https://api.myapp.com",
    "https://media.myapp.com",
    /^\/local-api\//
  ],
});

----------------------------------------

TITLE: Guarding Sentry SDK Function Calls
DESCRIPTION: Use Sentry.onLoad() to ensure SDK methods are called only after the SDK is fully loaded. This is necessary for methods not automatically guarded by the loader.

LANGUAGE: javascript
CODE:
// Guard against window.Sentry not being available, e.g. due to Ad-blockers
window.Sentry &&
  Sentry.onLoad(function () {
    // Inside of this callback,
    // we guarantee that `Sentry` is fully loaded and all APIs are available
    const client = Sentry.getClient();
    // do something custom here
  });

----------------------------------------

TITLE: Creating Hardcoded Platform Link in Markdown
DESCRIPTION: Illustrates how to create a hardcoded link to platform-specific content when there's only one option or to force a specific source of truth.

LANGUAGE: markdown
CODE:
[NDK integration](/platforms/android/configuration/using-ndk/) is packed with the SDK and requires API level 16, though other levels are supported.

----------------------------------------

TITLE: Configuring Sentry Target in NLog.config
DESCRIPTION: This XML snippet shows how to configure Sentry as a target in NLog.config. It includes adding the Sentry.NLog assembly, setting up the Sentry target with a DSN, and defining a rule to send all logs to Sentry.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
>
  <extensions>
    <add assembly="Sentry.NLog" />
  </extensions>

  <targets>
    <target xsi:type="Sentry" name="sentry" dsn="___PUBLIC_DSN___">
      <tag name="logger" layout="${logger}" />
    </target>
  </targets>

  <rules>
    <logger name="*" writeTo="sentry" />
  </rules>
</nlog>

----------------------------------------

TITLE: Capturing Basic Message Event with Sentry Native SDK
DESCRIPTION: Shows how to capture a simple message event using Sentry's native SDK with specified level, logger, and message content. This is the most basic way to verify Sentry integration in a native application.

LANGUAGE: c
CODE:
sentry_capture_event(sentry_value_new_message_event(
  /*   level */ SENTRY_LEVEL_INFO,
  /*  logger */ "custom",
  /* message */ "It works!"
));

----------------------------------------

TITLE: Initializing Sentry with Google Cloud HTTP Integration in JavaScript
DESCRIPTION: Demonstrates how to enable the Google Cloud HTTP integration in a Sentry configuration. This integration automatically creates spans for RESTful API requests in Google Cloud Platform services.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.googleCloudHttpIntegration()],
});

----------------------------------------

TITLE: Setting Discord Interactions Endpoint URL
DESCRIPTION: URL format for configuring the Discord interactions endpoint in Discord application settings.

LANGUAGE: plaintext
CODE:
Interactions Endpoint URL: {YOUR_DOMAIN}/extensions/discord/interactions/

----------------------------------------

TITLE: Adding Data Attributes to Transactions in Swift
DESCRIPTION: This snippet shows how to start a transaction and add various data attributes to it using Swift. It demonstrates adding string, number, boolean, and array values to the transaction.

LANGUAGE: swift
CODE:
let transaction = SentrySDK.startTransaction(name: "processOrderBatch", operation: "task")
transaction.setData(value: "value1", key: "my-data-attribute-1")
transaction.setData(value: 42, key: "my-data-attribute-2")
transaction.setData(value: true, key: "my-data-attribute-3")

transaction.setData(value: ["value1", "value2", "value3"], key: "my-data-attribute-4")
transaction.setData(value: [42, 43, 44], key: "my-data-attribute-5")
transaction.setData(value: [true, false, true], key: "my-data-attribute-6")

----------------------------------------

TITLE: Configuring Sentry User Scope in C#
DESCRIPTION: Sets up the Sentry scope with user information using C# syntax. Creates a new SentryUser object and assigns an email address to track user-specific events.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.User = new SentryUser
    {
        Email = "john.doe@example.com"
    };
});

----------------------------------------

TITLE: Implementing PyMongo with Sentry SDK Integration
DESCRIPTION: Example implementation showing how to use PyMongo with Sentry SDK, including transaction tracking and database operations. Demonstrates connection setup, database operations, and transaction monitoring.

LANGUAGE: python
CODE:
import pymongo

def main():
    sentry_sdk.init(...)  # same as above
    client = pymongo.MongoClient(DATABASE_HOST, DATABASE_PORT)

    db = client["sentry_test_db"]
    collection = db["sentry_test"]

    with sentry_sdk.start_transaction(name="testing_sentry"):
        collection.insert_one({"test": "sentry"})
        collection.find_one({"test": "sentry"})

main()

----------------------------------------

TITLE: Implementing Distribution Metrics
DESCRIPTION: Demonstrates how to emit distribution metrics for aggregating data with p90, min, max, and avg values.



----------------------------------------

TITLE: Uploading iOS Bundle and Source Map to Sentry
DESCRIPTION: This bash command uses sentry-cli to upload the iOS bundle and source map to Sentry. It specifies the strip prefix and the paths to the bundle and source map files.

LANGUAGE: bash
CODE:
node_modules/@sentry/cli/bin/sentry-cli sourcemaps upload \
  --strip-prefix /path/to/project/root \
  main.jsbundle main.jsbundle.map

----------------------------------------

TITLE: Managing CA Certificates in Sentry Containers
DESCRIPTION: Command used to update CA certificates in Debian-based containers. While this updates the system's root bundle on disk, a container restart is required to ensure the new bundle is loaded into memory.

LANGUAGE: bash
CODE:
update-ca-certificates

----------------------------------------

TITLE: Configuring Sentry Before-Send Hook in PHP
DESCRIPTION: Implements a before_send callback function that filters Sentry events based on exception type. The function prevents MyException instances from being sent to Sentry while allowing all other events to proceed.

LANGUAGE: php
CODE:
'before_send' => function (\Sentry\Event $event, ?\Sentry\EventHint $hint): ?\Sentry\Event {
    // Ignore the event if the original exception is an instance of MyException
    if ($hint !== null && $hint->exception instanceof MyException) {
      return null;
    }

    return $event;
},

----------------------------------------

TITLE: Wrapping SupportSQLiteOpenHelper in Kotlin
DESCRIPTION: Create an instrumented SupportSQLiteOpenHelper instance using SentrySupportSQLiteOpenHelper in Kotlin.

LANGUAGE: kotlin
CODE:
import io.sentry.android.sqlite.SentrySupportSQLiteOpenHelper

private val myOpenHelper = MyOpenHelper()
private val instrumentedOpenHelper = SentrySupportSQLiteOpenHelper.create(myOpenHelper)

----------------------------------------

TITLE: Styling Sentry Feedback Widget Component
DESCRIPTION: Customizing the widget's appearance using styles prop in FeedbackWidget component.

LANGUAGE: javascript
CODE:
import { FeedbackWidget } from "@sentry/react-native";

<FeedbackWidget
  styles={{
    submitButton: {
      backgroundColor: '#6a1b9a',
      borderRadius: 5,
    },
  }}
/>

----------------------------------------

TITLE: Representing a Transaction with Spans in JSON
DESCRIPTION: This JSON structure represents a transaction containing three child spans. It is used to illustrate how different quotas affect the processing of transactions and their contained spans.

LANGUAGE: json
CODE:
{
  "type": "transaction",
  "spans": [
      { .. },
      { .. },
      { .. }
  ],
  // ...
}

----------------------------------------

TITLE: Emitting a Distribution Metric in Symfony with Sentry
DESCRIPTION: This code shows how to emit a distribution metric for tracking page load times. It uses the millisecond unit and includes a tag for the page.

LANGUAGE: php
CODE:
\Sentry\metrics()->distribution(
    key: 'page_load',
    value: 15.0,
    unit: \Sentry\Metrics\MetricsUnit::millisecond(),
    tags: [
        'page' => '/home',
    ],
)

----------------------------------------

TITLE: Configuring Maven Plugin for Sentry
DESCRIPTION: Maven configuration for enabling source context and uploads. Includes settings for organization, project, and authentication.

LANGUAGE: xml
CODE:
<build>
    <plugins>
        <plugin>
            <groupId>io.sentry</groupId>
            <artifactId>sentry-maven-plugin</artifactId>
            <version>0.0.2</version>
            <extensions>true</extensions>
            <configuration>
                <debugSentryCli>true</debugSentryCli>
                <org>___ORG_SLUG___</org>
                <project>___PROJECT_SLUG___</project>
                <authToken>${env.SENTRY_AUTH_TOKEN}</authToken>
            </configuration>
            <executions>
                <execution>
                    <goals>
                        <goal>uploadSourceBundle</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>

----------------------------------------

TITLE: Retrieving and Attaching Spans to Transactions in Sentry with Dart
DESCRIPTION: This snippet demonstrates how to retrieve an ongoing transaction using Sentry#getSpan, start a child span or a new transaction, process a batch of orders, handle exceptions, and finish the span. It uses the Sentry package for Dart to manage performance monitoring and error tracking.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

final span = Sentry.getSpan()?.startChild('task') ??
    Sentry.startTransaction('processOrderBatch()', 'task');

try {
  processOrderBatch();
} catch (exception) {
  span.throwable = exception;
  span.status = SpanStatus.internalError();
} finally {
  await span.finish();
}

----------------------------------------

TITLE: Initializing Sentry and Showing Report Dialog in ASP.NET MVC
DESCRIPTION: This snippet demonstrates how to initialize Sentry and show a report dialog in an ASP.NET MVC application. It checks if there's a last event ID from Sentry, and if so, initializes the SDK and shows the report dialog.

LANGUAGE: cshtml
CODE:
@if (SentrySdk.LastEventId != SentryId.Empty) {
  <script>
    Sentry.init({ dsn: "___PUBLIC_DSN___" });
    Sentry.showReportDialog({ eventId: "@SentrySdk.LastEventId" });
  </script>
}

----------------------------------------

TITLE: Running ESLint Fix
DESCRIPTION: Command to automatically fix ESLint errors in the codebase.

LANGUAGE: bash
CODE:
yarn lint:eslint:fix

----------------------------------------

TITLE: Setting Custom Diagnostic Logger in Sentry C#
DESCRIPTION: Shows how to set a custom diagnostic logger implementation using the DiagnosticLogger option.

LANGUAGE: csharp
CODE:
options.Debug = true;
options.DiagnosticLogger = new ExampleDiagnosticLogger(SentryLevel.Debug);

----------------------------------------

TITLE: Setting Traces Sample Rate in Sentry C# SDK
DESCRIPTION: Sets the TracesSampleRate option to 0.2 (20%) during SDK initialization to control what percentage of transactions are captured for performance monitoring. This setting helps manage the volume of performance data sent to Sentry.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.TracesSampleRate = 0.2;

----------------------------------------

TITLE: Cleaning Up Temporary Files in Go Multipart Form Handling
DESCRIPTION: To avoid temporary file leaks when using Sentry's Go SDK middleware, it's necessary to manually clean up files created by ParseMultipartForm. This is done by calling request.Multipart.RemoveAll() after processing the form.

LANGUAGE: go
CODE:
request.Multipart.RemoveAll()

----------------------------------------

TITLE: Viewing Docker Compose Service Logs
DESCRIPTION: This command allows you to view logs for specific or all Docker Compose services. You can follow logs in real-time and include timestamps.

LANGUAGE: bash
CODE:
docker compose logs <service_name>

----------------------------------------

TITLE: Initialize Sentry SDK in Kotlin
DESCRIPTION: Configures Sentry SDK initialization in Kotlin with a sample rate of 25%. Uses Kotlin lambda syntax for configuration.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.init { options ->
  options.sampleRate = 0.25
}

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration in JavaScript (Deprecated)
DESCRIPTION: This snippet demonstrates the deprecated method of initializing Sentry with Unleash integration. It uses the 'unleashClientClass' option instead of 'featureFlagClientClass' in the Sentry initialization.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/gatsby';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({unleashClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Installing Sentry SDK with Anthropic Support
DESCRIPTION: Command to install the Sentry SDK package with Anthropic integration support using pip.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[anthropic]'

----------------------------------------

TITLE: Setting User Information with Sentry C SDK
DESCRIPTION: This snippet demonstrates how to create a user object, set user properties (IP address and email), and associate it with the current Sentry context. It uses the Sentry C SDK functions to create and manipulate value objects.

LANGUAGE: c
CODE:
#include <sentry.h>

sentry_value_t user = sentry_value_new_object();
sentry_value_set_by_key(user, "ip_address", sentry_value_new_string("{{auto}}"));
sentry_value_set_by_key(user, "email", sentry_value_new_string("jane.doe@example.com"));
sentry_set_user(user);

----------------------------------------

TITLE: Emitting a Counter in PHP with Sentry Metrics
DESCRIPTION: This snippet demonstrates how to increment a counter metric for tracking button clicks. It uses the Sentry metrics API to emit a counter with a key, value, and associated tags.

LANGUAGE: php
CODE:
\Sentry\metrics()->increment(
    key: 'button_click',
    value: 1,
    tags: [
        'browser' => 'Firefox',
        'app_version' => '1.0.0',
    ],
);

----------------------------------------

TITLE: Emitting a Set Metric in Dart with Sentry
DESCRIPTION: This code example demonstrates emitting a set metric in Dart using Sentry. It records a 'user_view' event with a username value and includes a tag for the page.

LANGUAGE: dart
CODE:
Sentry.metrics().set(
    'user_view', // key
    stringValue: 'jane',
    unit: CustomSentryMeasurementUnit('username'),
    tags: {'page': 'home'},
);

----------------------------------------

TITLE: Configuring Discord OAuth2 Redirect URI
DESCRIPTION: URL format for setting up the OAuth2 redirect URI in Discord application settings.

LANGUAGE: plaintext
CODE:
Oauth2 Redirect URI: {YOUR_DOMAIN}/extensions/discord/setup/

----------------------------------------

TITLE: Filtering Breadcrumbs in Java
DESCRIPTION: Demonstrates how to initialize Sentry Android and implement a breadcrumb filter that excludes breadcrumbs from a specific logger category.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;

SentryAndroid.init(this, options -> {
  options.setBeforeBreadcrumb((breadcrumb, hint) -> {
    if ("a.spammy.Logger".equals(breadcrumb.getCategory())) {
      return null;
    } else {
      return breadcrumb;
    }
  });
});

----------------------------------------

TITLE: Custom Server Authentication
DESCRIPTION: Authentication command for connecting to a self-hosted Sentry instance using a custom URL.

LANGUAGE: bash
CODE:
sentry-cli --url https://myserver.invalid/ login

----------------------------------------

TITLE: Debugging iOS Memory Extension
DESCRIPTION: Test code to help debug System.Memory conflicts in iOS projects. This code reveals runtime issues with the AsMemory extension.

LANGUAGE: csharp
CODE:
    _ = new byte[2].AsMemory();

----------------------------------------

TITLE: Installing Sentry SDK on Spark Clusters
DESCRIPTION: This bash script shows how to install the Sentry Python SDK on all Spark clusters using pip. It's recommended to run this as an initialization script.

LANGUAGE: bash
CODE:
easy_install pip
pip install --upgrade sentry-sdk

----------------------------------------

TITLE: Blocking Sentry Uptime Bot Configuration in robots.txt
DESCRIPTION: Configuration snippet for robots.txt file to block Sentry's uptime monitoring bot from automatically detecting and monitoring URLs. This prevents new URLs from being detected for uptime monitoring.

LANGUAGE: txt
CODE:
User-agent: SentryUptimeBot
Disallow: *

----------------------------------------

TITLE: Configuring Sentry User Scope in F#
DESCRIPTION: Sets up the Sentry scope with user information using F# syntax. Creates a new SentryUser object and assigns an email address using F#'s functional programming style.

LANGUAGE: fsharp
CODE:
SentrySdk.ConfigureScope(
  fun scope ->
    scope.User <- SentryUser(Email = "john.doe@example.com")
  )

----------------------------------------

TITLE: Capturing Errors in Route Error Components
DESCRIPTION: Captures errors in TanStack Router's errorComponent using Sentry's captureException.

LANGUAGE: TypeScript
CODE:
import { createRoute } from "@tanstack/react-router";
import * as Sentry from "@sentry/tanstackstart-react";

const route = createRoute({
  errorComponent: ({ error }) => {
    useEffect(() => {
      Sentry.captureException(error)
    }, [error])

    return (
      // ...
    )
  }
})

----------------------------------------

TITLE: Implementing Job Progress Monitoring with Sentry Check-Ins in C#
DESCRIPTION: Shows how to implement a complete job monitoring flow using Sentry check-ins. The code demonstrates capturing initial check-in with InProgress status, followed by a final check-in with either Ok or Error status based on job execution outcome.

LANGUAGE: csharp
CODE:
// 🟡 Notify Sentry your job is running:
var checkInId = SentrySdk.CaptureCheckIn("<monitor-slug>", CheckInStatus.InProgress);

// Execute your scheduled task here...

// 🟢 Notify Sentry your job has completed successfully:
SentrySdk.CaptureCheckIn("<monitor-slug>", CheckInStatus.Ok, checkInId);

LANGUAGE: csharp
CODE:
// 🔴 Notify Sentry your job has failed:
SentrySdk.CaptureCheckIn("<monitor-slug>", CheckInStatus.Error, checkInId);

----------------------------------------

TITLE: Adding Test Error Capture Button in React Native
DESCRIPTION: Add a button to your React Native component to test Sentry error capture functionality.

LANGUAGE: javascript
CODE:
<Button
  title="Try!"
  onPress={() => {
    Sentry.captureException(new Error("First error"));
  }}
/>

----------------------------------------

TITLE: Defining Trace Context in Sentry SDK
DESCRIPTION: Example JSON structure for Trace context, which connects multiple transactions, spans, and/or errors into one trace.

LANGUAGE: json
CODE:
{
  "contexts": {
    "trace": {
      "trace_id": "12312012123120121231201212312012",
      "span_id": "0415201309082013",
      "parent_span_id": null,
      "description": "<OrganizationContext>",
      "op": "http.server",
      "tags": {
        "deviceMemory": "8 GB",
        "effectiveConnectionType": "4g",
        "routing.instrumentation": "react-router-v3"
      },
      "dynamic_sampling_context": {
        "trace_id": "12312012123120121231201212312012",
        "sample_rate": "1.0",
        "public_key": "93D0D1125146288EAEE2A9B3AF4F96CCBE3CB316"
      },
      "origin": "auto.http.http_client_5",
      "data": {
        "route": {
          "name": "HomeRoute"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry with Extra Error Data via NPM
DESCRIPTION: Sets up Sentry with extra error data integration using NPM package. Requires @sentry/browser package and initializes with a DSN configuration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.extraErrorDataIntegration()],
});

----------------------------------------

TITLE: Updating Spotlight Configuration
DESCRIPTION: Shows how to update the Spotlight configuration by replacing enableSpotlight and spotlightSidecarUrl with the new spotlight option.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/react-native';

Sentry.init({
  tracesSampleRate: 1.0,
  spotlight: true // or 'http://localhost:8969/stream',
});

----------------------------------------

TITLE: Initializing Sentry DenoCron Integration in TypeScript
DESCRIPTION: Sets up Sentry monitoring for Deno.cron jobs by initializing the Sentry SDK with the DenoCron integration. This enables automatic monitoring and notifications for scheduled job failures, missed executions, and runtime exceeded scenarios.

LANGUAGE: TypeScript
CODE:
import * as Sentry from "npm:@sentry/deno";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.denoCronIntegration()],
});

----------------------------------------

TITLE: Filtering Transactions with beforeSendTransaction in JavaScript
DESCRIPTION: Shows how to use the beforeSendTransaction callback to filter out transactions based on custom logic.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSendTransaction(event) {
    if (event.transaction === "/unimportant/route") {
      return null;
    }
    return event;
  },
});

----------------------------------------

TITLE: Concurrent Span Management with Fetch Wrapper
DESCRIPTION: Demonstrates issues with concurrent span management in fetch request instrumentation and scope propagation challenges.

LANGUAGE: javascript
CODE:
// SDK code
function fetchWrapper(/* ... */) {
  /*
    ... some code omitted for simplicity ...
  */
  const parent = getCurrentHub().getScope().getSpan(); // <1>
  const span = parent.startChild({
    data: { type: 'fetch' },
    description: `${method} ${url}`,
    op: 'http.client',
  });
  try {
    // ...
    // return fetch(...);
  } finally {
    span.finish();
  }
}
window.fetch = fetchWrapper;

// User code
async function f1() {
  const hub = getCurrentHub();
  let t = hub.startTransaction({ name: 't1' });
  hub.getScope().setSpan(t);
  try {
    await fetch('https://example.com/f1');
  } finally {
    t.finish();
  }
}
async function f2() {
  const hub = getCurrentHub();
  let t = hub.startTransaction({ name: 't2' });
  hub.getScope().setSpan(t);
  try {
    await fetch('https://example.com/f2');
  } finally {
    t.finish();
  }
}
Promise.all([f1(), f2()]); // run f1 and f2 concurrently

----------------------------------------

TITLE: Manually Instrumenting Universal Load Functions with Sentry in SvelteKit
DESCRIPTION: Wraps a universal load function with Sentry instrumentation for error tracking and performance monitoring.

LANGUAGE: javascript
CODE:
import { wrapLoadWithSentry } from "@sentry/sveltekit";

export const load = wrapLoadWithSentry(({ fetch }) => {
  const res = await fetch("/api/data");
  const data = await res.json();
  return { data };
});

----------------------------------------

TITLE: Implementing Async Trait in Rust
DESCRIPTION: Shows how to implement an async trait using the new async trait syntax in Rust 1.75+, including the use of 'Send' to ensure compatibility with multi-threaded runtimes.

LANGUAGE: rust
CODE:
pub trait Database {
    fn get_user(&self) -> impl Future<Output = User> + Send;
}

impl Database for MyDatabase {
    async fn get_user(&self) -> User {
        todo!()
    }
}

----------------------------------------

TITLE: Setting Sample Rate in Raven Configuration for Node.js
DESCRIPTION: This example demonstrates how to set the sample rate for events in the Raven configuration.

LANGUAGE: javascript
CODE:
{
  sampleRate: 0.5; // send 50% of events, drop the other half
}

----------------------------------------

TITLE: Running Sentry Wizard for Source Map Configuration
DESCRIPTION: Command to run the Sentry Wizard for setting up source map integration, which helps in providing readable stack traces in error reports.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i sourcemaps

----------------------------------------

TITLE: Enabling Source Map Generation in Wrangler Config
DESCRIPTION: Configuration setting in wrangler.toml to enable source map generation for Cloudflare Workers. This setting allows Sentry to unminify JavaScript code for better error tracking.

LANGUAGE: toml
CODE:
upload_source_maps = true

----------------------------------------

TITLE: Enqueueing ARQ Jobs with Sentry Transaction in Python
DESCRIPTION: This script demonstrates how to enqueue ARQ jobs while creating a Sentry transaction. It initializes the Sentry SDK, creates a Redis pool, and enqueues a job within a transaction.

LANGUAGE: python
CODE:
import asyncio

from arq import create_pool
from arq.connections import RedisSettings

async def main():
    sentry_sdk.init(...)  # same as above
    redis = await create_pool(RedisSettings())

    with sentry_sdk.start_transaction(name="testing_sentry"):
        r = await redis.enqueue_job("add_numbers", 1, 2)

asyncio.run(main())

----------------------------------------

TITLE: Setting Release Version in Sentry SDK Configuration
DESCRIPTION: This code snippet demonstrates how to set the release version when initializing the Sentry SDK. The actual implementation varies by platform, so a placeholder is used.

LANGUAGE: markup
CODE:
<PlatformContent includePath="set-release" notateUnsupported />

----------------------------------------

TITLE: Disabling Replay for Low-End Devices in Android Sentry SDK
DESCRIPTION: This code snippet shows how to selectively disable the Replay SDK for lower-end devices to prevent performance issues. It sets the error sample rate and session sample rate to 0.0 for low-end devices, effectively disabling replay, while maintaining normal rates for other devices.

LANGUAGE: kotlin
CODE:
SentryAndroid.init(context) { options ->
  options.dsn = "___PUBLIC_DSN___"
  options.isDebug = true

  options.sessionReplay.onErrorSampleRate = if (isLowEnd()) 0.0 else 1.0
  options.sessionReplay.sessionSampleRate = if (isLowEnd()) 0.0 else 0.1
}

----------------------------------------

TITLE: Performing Check-Ins for Job Monitoring via HTTP
DESCRIPTION: This snippet shows how to perform check-ins using HTTP GET requests. It includes requests for job start, successful completion, and failure.

LANGUAGE: http
CODE:
GET /api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/?status=in_progress HTTP/1.1
Host: ___ORG_INGEST_DOMAIN___

GET /api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/?status=ok HTTP/1.1
Host: ___ORG_INGEST_DOMAIN___

GET /api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/?status=error HTTP/1.1
Host: ___ORG_INGEST_DOMAIN___

----------------------------------------

TITLE: Disabling Watchdog Termination Tracking in Swift
DESCRIPTION: This snippet demonstrates how to disable Watchdog Termination tracking when initializing the Sentry SDK in Swift. It sets the 'enableWatchdogTerminationTracking' option to false.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.enableWatchdogTerminationTracking = false
}

----------------------------------------

TITLE: Registering SpringSecuritySentryUserProvider Bean in Spring
DESCRIPTION: Shows how to register the SpringSecuritySentryUserProvider bean to retrieve username from Spring Security context in Spring 5 and Spring 6 configurations.

LANGUAGE: Java
CODE:
import io.sentry.SentryOptions;
import io.sentry.spring.SpringSecuritySentryUserProvider;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
class SecuritySentryConfig {
  @Bean
  public SpringSecuritySentryUserProvider springSecuritySentryUserProvider(
      SentryOptions sentryOptions) {
    return new SpringSecuritySentryUserProvider(sentryOptions);
  }
}

LANGUAGE: Java
CODE:
import io.sentry.SentryOptions;
import io.sentry.spring.jakarta.SpringSecuritySentryUserProvider;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
class SecuritySentryConfig {
  @Bean
  public SpringSecuritySentryUserProvider springSecuritySentryUserProvider(
      SentryOptions sentryOptions) {
    return new SpringSecuritySentryUserProvider(sentryOptions);
  }
}

LANGUAGE: Kotlin
CODE:
import io.sentry.SentryOptions
import io.sentry.spring.SpringSecuritySentryUserProvider
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration

@Configuration
class SecuritySentryConfig {
  @Bean
  fun springSecuritySentryUserProvider(sentryOptions: SentryOptions) = SpringSecuritySentryUserProvider(sentryOptions)
}

LANGUAGE: Kotlin
CODE:
import io.sentry.SentryOptions
import io.sentry.spring.jakarta.SpringSecuritySentryUserProvider
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration

@Configuration
class SecuritySentryConfig {
  @Bean
  fun springSecuritySentryUserProvider(sentryOptions: SentryOptions) = SpringSecuritySentryUserProvider(sentryOptions)
}

----------------------------------------

TITLE: Initializing Sentry with ElectronBreadcrumbs Integration in JavaScript
DESCRIPTION: Demonstrates how to initialize Sentry with the electronBreadcrumbsIntegration configuration. Shows default settings for capturing events from various Electron modules including app, autoUpdater, webContents, browserWindow, screen, and powerMonitor. Each module can be configured with boolean values or filtering functions.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.electronBreadcrumbsIntegration({
      app: (name) => !name.startsWith("remote-"),
      autoUpdater: true,
      webContents: (name) =>
        ["dom-ready", "context-menu", "load-url", "destroyed"].includes(name),
      browserWindow: (name) =>
        [
          "closed",
          "close",
          "unresponsive",
          "responsive",
          "show",
          "blur",
          "focus",
          "hide",
          "maximize",
          "minimize",
          "restore",
          "enter-full-screen",
          "leave-full-screen",
        ].includes(name),
      screen: true,
      powerMonitor: true,
    }),
  ],
});

----------------------------------------

TITLE: Main Script for RQ Job Enqueueing
DESCRIPTION: Python script that initializes Sentry SDK, creates an RQ queue, and enqueues a job with performance monitoring.

LANGUAGE: python
CODE:
# main.py
from redis import Redis
from rq import Queue

from jobs import hello

import sentry_sdk

# Sentry configuration for main.py process
sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

q = Queue(connection=Redis())
with sentry_sdk.start_transaction(name="testing_sentry"):
    result = q.enqueue(hello, "World")

----------------------------------------

TITLE: Granular Error Grouping for RPC/API Calls
DESCRIPTION: Shows how to create more granular error groups by combining default fingerprinting with specific error attributes, particularly useful for RPC and API calls.



----------------------------------------

TITLE: Freezing Python Requirements
DESCRIPTION: This command updates the project's requirements lockfile based on the current dependencies.

LANGUAGE: bash
CODE:
make freeze-requirements

----------------------------------------

TITLE: Hashing Confidential Information in Sentry
DESCRIPTION: Example of how to hash confidential information before sending it to Sentry, allowing correlation within internal systems while keeping it confidential from Sentry.

LANGUAGE: javascript
CODE:
Sentry.setTag("user_email", "{{ hash(user.email) }}")

----------------------------------------

TITLE: Configuring Sentry with StackProf Profiling
DESCRIPTION: Initializes Sentry with profiling and tracing configuration using StackProf. Sets sample rates for both traces and profiles.

LANGUAGE: ruby
CODE:
# config/initializers/sentry.rb

Sentry.init do |config|
  config.dsn = "___PUBLIC_DSN___"
  config.traces_sample_rate = 1.0
  config.profiles_sample_rate = 1.0
end

----------------------------------------

TITLE: Truncating Docker Container Logs in Shell
DESCRIPTION: Provides a shell command to immediately clear all Docker container logs, freeing up disk space. This command should be executed as the root user.

LANGUAGE: shell
CODE:
truncate -s 0 /var/lib/docker/containers/**/*-json.log

----------------------------------------

TITLE: Setting Release Version in C# Sentry SDK
DESCRIPTION: Sets the release version during SDK initialization. The release version helps track which code version an error occurred in. Format used is 'project-name@version-number'.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.Release = "my-project-name@2.3.12";

----------------------------------------

TITLE: Capturing Exceptions in PHP
DESCRIPTION: Demonstrates manual exception reporting with optional additional context data.

LANGUAGE: php
CODE:
// Basic Reporting
$sentryClient->captureException($ex);

// Provide some additional data with an exception
$sentryClient->captureException($ex, array(
    'extra' => array(
        'php_version' => phpversion()
    ),
));

----------------------------------------

TITLE: Initializing BrowserSession Integration in Sentry
DESCRIPTION: Demonstrates how to initialize the BrowserSession integration in Sentry configuration. This integration automatically creates sessions for tracking user adoption and application crash-free rates in browser environments.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.browserSessionIntegration()],
});

----------------------------------------

TITLE: Creating Sentry File Attachment in Java
DESCRIPTION: Creates a new Sentry attachment object from a file path using Java. This allows attaching files like logs to Sentry events for additional context when reporting errors.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.Attachment;

Attachment attachment = new Attachment("your/path/file.log");

----------------------------------------

TITLE: Clearing User Data in Sentry for Laravel
DESCRIPTION: This snippet shows how to clear the currently set user data in Sentry. This might be useful when a user logs out or when you want to stop associating events with a particular user.

LANGUAGE: php
CODE:
<PlatformContent includePath="enriching-events/unset-user" />

----------------------------------------

TITLE: Implementing Sentry Trace Sampling Callback in PHP
DESCRIPTION: A callback function that determines the sampling rate for Sentry transactions. It handles parent transaction sampling, conditional sampling, and default sampling rates. The function returns a float value between 0 and 1 representing the sampling probability.

LANGUAGE: php
CODE:
'traces_sampler' => function (\Sentry\Tracing\SamplingContext $context): float {
    if ($context->getParentSampled()) {
        // If the parent transaction (for example a JavaScript front-end)
        // is sampled, also sample the current transaction
        return 1.0;
    }

    if (some_condition()) {
        // Drop this transaction, by setting its sample rate to 0
        return 0;
    }

    // Default sample rate for all other transactions (replaces `traces_sample_rate`)
    return 0.25;
},

----------------------------------------

TITLE: Configuring Sentry Scope in Kotlin
DESCRIPTION: This snippet shows how to configure the Sentry scope in Kotlin. It sets a custom tag and user information including user ID and email, using Kotlin's apply function for concise object creation.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.protocol.User

Sentry.configureScope { scope ->
  scope.setTag("my-tag", "my value")
  scope.user = User().apply {
    id = "42"
    email = "john.doe@example.com"
  }
}

----------------------------------------

TITLE: Configuring Microservices E-commerce Platform Tracing
DESCRIPTION: Configuration for tracking user journeys across multiple e-commerce microservices including main API, authentication server, and internal APIs.

LANGUAGE: javascript
CODE:
// sentry.client.config.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracePropagationTargets: [
    "https://api.myecommerce.com",
    "https://auth.myecommerce.com",
    /^\/internal-api\//
  ],
});

----------------------------------------

TITLE: Implementing Issue Type with Noise Configuration
DESCRIPTION: Example of registering an issue type with noise configuration to control how many occurrences are needed before creating a new issue within a time window.

LANGUAGE: python
CODE:
@dataclass(frozen=True)
class ProfileFileIOGroupType(GroupType):
    type_id = 2001
    slug = "profile_file_io_main_thread"
    description = "File I/O on Main Thread"
    category = GroupCategory.PROFILE.value
    noise_config = NoiseConfig(5, timedelta(days=2))

----------------------------------------

TITLE: Installing pure_eval Integration with pip
DESCRIPTION: Command to install sentry-sdk with pure_eval integration support via pip package manager

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[pure_eval]'

----------------------------------------

TITLE: Removing Specific Data from Sentry Event Payload
DESCRIPTION: Example of using a PII selector to remove a specific key called 'foo' from the 'extra' field in the Sentry event payload.

LANGUAGE: plaintext
CODE:
[Remove] [Anything] from [extra.foo]

----------------------------------------

TITLE: Initializing Sentry with Context Lines via CDN
DESCRIPTION: Sets up Sentry with context lines integration using CDN links. Includes both the tracing bundle and context lines scripts with integrity checks.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/contextlines.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'contextlines.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    integrations: [Sentry.contextLinesIntegration()],
  });
</script>

----------------------------------------

TITLE: Configuring ContextLines Integration in Sentry
DESCRIPTION: Configuration options for the ContextLines integration which controls how many lines of source code are displayed around each stack frame in error reports. The frameContextLines option determines the number of context lines shown.

LANGUAGE: typescript
CODE:
Sentry.contextLinesIntegration

----------------------------------------

TITLE: Lazy Loading Sentry Integration from CDN
DESCRIPTION: This snippet demonstrates how to lazy-load a Sentry integration from the Sentry CDN using Sentry.lazyLoadIntegration(). It shows loading the httpClientIntegration and handling potential rejection if the load fails due to network issues or ad-blockers.

LANGUAGE: javascript
CODE:
async function loadHttpClient() {
  const httpClientIntegration = await Sentry.lazyLoadIntegration(
    "httpClientIntegration"
  );
  Sentry.addIntegration(httpClientIntegration());
}

----------------------------------------

TITLE: Including Sentry JavaScript SDK in HTML
DESCRIPTION: This snippet shows how to include the Sentry JavaScript SDK in an HTML file using a script tag. It uses a specific version of the SDK and includes integrity and crossorigin attributes for security.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Including Span Data in JSON
DESCRIPTION: Illustrates how to add optional arbitrary data associated with the span, following Sentry's span data conventions.

LANGUAGE: json
CODE:
{
  "data": {
    "url": "http://localhost:8080/sockjs-node/info?t=1588601703755",
    "status_code": 200,
    "type": "xhr",
    "method": "GET"
  }
}

----------------------------------------

TITLE: Configuring Redis Backend for Sentry Digests in Python
DESCRIPTION: This snippet demonstrates how to configure the Redis backend for Sentry digests. The Redis backend uses Redis to store schedule and pending notification data, and is the default for installations created since version 8.

LANGUAGE: python
CODE:
SENTRY_DIGESTS = 'sentry.digests.backends.redis.RedisBackend'

----------------------------------------

TITLE: Implementing Metric Aggregator in Python
DESCRIPTION: Abstract implementation of a metric aggregator class in Python, demonstrating bucket management and metric addition.

LANGUAGE: python
CODE:
class Aggregator:
    def __init__(self):
        self.buckets = {}
    def get_bucket(self, ts):
        return self.buckets.setdefault(ts // 10, {})
    def add(self, type, key, value, unit, tags):
        mri = "%s:%s" % (type, key)

----------------------------------------

TITLE: Setting Custom Transport in Sentry PHP Client
DESCRIPTION: Shows how to set a custom transport function for sending events to Sentry. This allows for custom handling of the HTTP request to Sentry's servers.

LANGUAGE: php
CODE:
'transport' => function($client, $data) {
    $myHttpClient->send(array(
        'url'     => $client->getServerEndpoint(),
        'method'  => 'POST',
        'headers' => array(
            'Content-Encoding' => 'gzip',
            'Content-Type'     => 'application/octet-stream',
            'User-Agent'       => $client->getUserAgent(),
            'X-Sentry-Auth'    => $client->getAuthHeader(),
        ),
        'body'    => gzcompress(jsonEncode($data)),
    ))
},

LANGUAGE: php
CODE:
$client->setTransport(...);

----------------------------------------

TITLE: Recording Client Report for Backpressure in Python for Sentry SDK
DESCRIPTION: This snippet demonstrates how to record a client report with the reason 'backpressure' when a transaction is dropped due to backpressure in the Sentry Python SDK.

LANGUAGE: python
CODE:
# See the Python implementation as a reference:
# https://github.com/getsentry/sentry-python/blob/d9d87998029fb0ef2bfe933cea0b69bfee60ed51/sentry_sdk/tracing.py#L705-L711

----------------------------------------

TITLE: Initializing Sentry Android SDK with Custom Trace Sampling in Kotlin
DESCRIPTION: This snippet demonstrates how to initialize the Sentry Android SDK in Kotlin, implementing a custom traces sampler. It allows for flexible control over transaction sampling rates based on context.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.TracesSamplerCallback

SentryAndroid.init(this, options ->
  options.tracesSampler = TracesSamplerCallback { context ->
    if (/* make a decision based on `samplingContext` */) {
      // Drop this transaction, by setting its sample rate to 0%
      return@TracesSamplerCallback 0.0
    } else if (/* ... */) {
      // Override sample rate for other cases (replaces `options.TracesSampleRate`)
      return@TracesSamplerCallback 0.1
    }
    // Can return `null` to fallback to the rate configured by `options.tracesSampleRate`
    return@TracesSamplerCallback null
  }
})

----------------------------------------

TITLE: Configuring Sentry Domain Access in Cordova
DESCRIPTION: XML configuration to allow access to Sentry's domain in the Cordova application's config.xml file.

LANGUAGE: xml
CODE:
<access origin="sentry.io" />

----------------------------------------

TITLE: Nested Span Structure for Queue Operations with Database Query
DESCRIPTION: Demonstrates a more complex span structure where a database query is nested within a queue publish operation. This example shows how the SDK should handle instrumenting underlying engine operations as child spans.

LANGUAGE: plaintext
CODE:
<span op:"queue.publish" description:"job" ...>
	<span op:"db.sql.query" description:"insert into jobs" ...></span>
</span>

----------------------------------------

TITLE: Capturing Errors with Sentry SDK in Swift
DESCRIPTION: This snippet shows how to create an NSError object and capture it using Sentry SDK in Swift. It also demonstrates setting a custom tag within a scope block, which only affects the current event being sent.

LANGUAGE: swift
CODE:
import Sentry

let userInfo = [NSLocalizedDescriptionKey : "Object does not exist"]
let error = NSError(domain: "YourErrorDomain", code: 0, userInfo: userInfo)
SentrySDK.capture(error: error) { (scope) in
    // Changes in here will only be captured for this event
    // The scope in this callback is a clone of the current scope
    // It contains all data but mutations only influence the event being sent
    scope.setTag(value: "value", key: "myTag")
}

----------------------------------------

TITLE: Configuring Sentry Environment in YAML File
DESCRIPTION: This snippet demonstrates how to set the Sentry environment to 'production' in a .yml file. It uses the YAML syntax with key-value pairs separated by a colon.

LANGUAGE: yaml
CODE:
sentry.environment: production

----------------------------------------

TITLE: Setting Custom Tag in Sentry Scope Using DateTime
DESCRIPTION: Configures Sentry SDK scope by creating a DateTime object and setting it as a custom tag after converting to a hash code string. This allows tracking specific date-based identifiers in Sentry monitoring.

LANGUAGE: csharp
CODE:
var date = new DateTime(1990,12,08);

SentrySdk.ConfigureScope(scope =>
{
    scope.SetTag("birthday", date.GetHashCode().ToString());
});


----------------------------------------

TITLE: Configuring Component Tracking in Sentry Nuxt SDK
DESCRIPTION: Basic setup for enabling component tracking by initializing Sentry with vueIntegration. Shows how to track all components or specify individual components to monitor.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/nuxt";

Sentry.init({
  integrations: [
    Sentry.vueIntegration({
      tracingOptions: {
        trackComponents: true,
        // OR
        trackComponents: [
          "App",
          "RwvHeader",
          "RwvFooter",
          "RwvArticleList",
          "Pagination",
        ],
      },
    }),
  ],
});

----------------------------------------

TITLE: Configuring Sentry CLI in MSBuild Project File
DESCRIPTION: Demonstrates how to disable Sentry CLI in a .NET project file to prevent configuration messages during build.

LANGUAGE: xml
CODE:
<UseSentryCLI>false</UseSentryCLI>

----------------------------------------

TITLE: Updating Sentry Configuration in Svelte Config File
DESCRIPTION: This snippet demonstrates how to migrate from using componentTrackingPreprocessor to withSentryConfig in a Svelte project's configuration file. It removes the import of componentTrackingPreprocessor and adds withSentryConfig to wrap the exported configuration.

LANGUAGE: JavaScript
CODE:
// v7 - svelte.config.js
-import { componentTrackingPreprocessor } from '@sentry/svelte';
+import { withSentryConfig } from "@sentry/svelte";

 const config = {
  preprocess: [
-   componentTrackingPreprocessor(),
     // ...
  ],
   // ...
 };

-export default config;
+export default withSentryConfig(config);

----------------------------------------

TITLE: Initializing Sentry and Configuring Feature Flags in TypeScript
DESCRIPTION: This snippet shows how to initialize Sentry with a public DSN and feature flags integration. It then attempts to add a feature flag and captures an exception. The code requires the @sentry/solidstart package.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/solidstart';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Implementing Gauge Metrics
DESCRIPTION: Example of implementing gauge metrics for basic statistical aggregations without percentiles.

LANGUAGE: Kotlin
CODE:
Sentry.metrics().gauge(
    "page_load",
    15.0,
    MeasurementUnit.Duration.MILLISECOND,
    mapOf(
        "page" to "/home"
    )
)

LANGUAGE: Java
CODE:
final Map<String, String> tags = new HashMap<>();
tags.put("page", "/home");

Sentry.metrics().gauge(
    "page_load",
    15.0,
    MeasurementUnit.Duration.MILLISECOND,
    tags);

----------------------------------------

TITLE: Importing Sentry SDK for Breadcrumbs in Python
DESCRIPTION: This snippet shows how to import the Sentry SDK library to use the add_breadcrumb method for custom breadcrumbs.

LANGUAGE: python
CODE:
import sentry_sdk

----------------------------------------

TITLE: Enabling View Hierarchy Capture in Sentry SDK
DESCRIPTION: Basic initialization of Sentry SDK with view hierarchy attachment enabled. This configuration allows Sentry to capture view hierarchy information during error reporting.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.start { options in
  options.attachViewHierarchy = true
}

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
  options.attachViewHierarchy = YES;
}];

----------------------------------------

TITLE: Disabling Auto Session Tracking in Sentry React Native
DESCRIPTION: Shows how to disable automatic session tracking in the Sentry SDK initialization. This configuration prevents the SDK from automatically sending session data to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  enableAutoSessionTracking: false, // default: true
});

----------------------------------------

TITLE: Updating Server Hooks for Cloudflare Sentry Integration
DESCRIPTION: Modify the hooks.server file to use initCloudflareSentryHandle and remove the Sentry.init call. This sets up Sentry for Cloudflare Pages environment.

LANGUAGE: typescript
CODE:
-import { handleErrorWithSentry, sentryHandle } from "@sentry/sveltekit";
+import { handleErrorWithSentry, sentryHandle, initCloudflareSentryHandle } from "@sentry/sveltekit";
+import { sequence } from "@sveltejs/kit/hooks";
 import * as Sentry from '@sentry/sveltekit';

-Sentry.init({
-  dsn: '___PUBLIC_DSN___',
-  tracesSampleRate: 1.0,
-
-  // uncomment the line below to enable Spotlight (https://spotlightjs.com)
-  // spotlight: import.meta.env.DEV,
-});
-
-export const handle = sentryHandle();
+export const handle = sequence(
+   initCloudflareSentryHandle({
+       dsn: '___PUBLIC_DSN___',
+       tracesSampleRate: 1.0,
+   }),
+   sentryHandle()
+);

 export const handleError = handleErrorWithSentry(myErrorHandler);

----------------------------------------

TITLE: Initializing Raven Client with Synchronous HTTP Transport in Python
DESCRIPTION: Demonstrates how to use the HTTPTransport with Raven Client. This is a synchronous blocking transport.

LANGUAGE: python
CODE:
from raven.transport.http import HTTPTransport

Client('...', transport=HTTPTransport)

----------------------------------------

TITLE: Configuring Sentry Plugin for esbuild
DESCRIPTION: Illustrates the setup of Sentry plugin with esbuild. Configures the build process with error tracking using a custom application key through the Sentry esbuild plugin.

LANGUAGE: javascript
CODE:
// esbuild.config.js
const { sentryEsbuildPlugin } = require("@sentry/esbuild-plugin");

require("esbuild").build({
  plugins: [
    sentryEsbuildPlugin({
      applicationKey: "your-custom-application-key",
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry SDK in Python
DESCRIPTION: Configures Sentry SDK with a DSN and enables sending default PII data.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
)

----------------------------------------

TITLE: Implementing Sentry Trace Headers in Remix v1
DESCRIPTION: Configuration for adding sentry-trace and baggage meta tags in Remix v1 root loader using MetaFunction.

LANGUAGE: typescript
CODE:
export const meta: MetaFunction = ({ data }) => {
  return {
    // ...
    "sentry-trace": data.sentryTrace,
    baggage: data.sentryBaggage,
  };
};

----------------------------------------

TITLE: Installing Sentry SDK with Replay Integration for Next.js
DESCRIPTION: This command runs the Sentry installation wizard to set up the Sentry SDK, including the Replay integration, for a Next.js project. The wizard guides the user through the installation process, ensuring proper configuration.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i nextjs

----------------------------------------

TITLE: Implementing Custom Error Boundary with Sentry in React Router v6
DESCRIPTION: This code snippet shows how to implement a custom error boundary with Sentry in React Router v6. It includes setting up the router with a custom error element and capturing exceptions using Sentry.captureException.

LANGUAGE: jsx
CODE:
// router setup
const sentryCreateBrowserRouter = wrapCreateBrowserRouterV6(createBrowserRouter);
const router = sentryCreateBrowserRouter([
  {
    path: "/",
    element: <YourLayout />,
    children: [
      {
        path: "",
        element: <Outlet />,
        errorElement: <YourCustomRootErrorBoundary />,
        children: [
          // other routes ...
        ],
      },
    ],
  },
]);

// error boundary
import { useRouteError } from "react-router-dom";
import * as Sentry from "@sentry/react";

export function YourCustomRootErrorBoundary() {
  const error = useRouteError() as Error;

  React.useEffect(() => {
    Sentry.captureException(error);
  }, [error]);

  return (
    <div>
      <h1>Ouch!</h1>
    </div>
  );
}

----------------------------------------

TITLE: Adding Sentry OpenTelemetry Dependency with Maven
DESCRIPTION: Maven dependency configuration for adding sentry-opentelemetry-agentless to a Java project. Specifies the groupId, artifactId, and version in Maven's XML format.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-opentelemetry-agentless</artifactId>
    <version>{{@inject packages.version('sentry.java.opentelemetry-agentless', '8.0.0') }}</version>
</dependency>

----------------------------------------

TITLE: Configuring Redis Buffer Backend in Sentry
DESCRIPTION: Configures Sentry to use the Redis buffer backend. This setup is recommended for high-concurrency environments and requires the queue to be enabled for performance gains.

LANGUAGE: python
CODE:
SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Elixir
DESCRIPTION: This snippet demonstrates how to capture exceptions using Sentry in Elixir. It creates a custom fingerprint using the module and function information, and sends the exception details to Sentry along with the stacktrace.

LANGUAGE: elixir
CODE:
try do
  # Some code...
rescue
  exception ->
    fingerprint = [inspect(__MODULE__), inspect(__ENV__.function)]
    Sentry.capture_exception(exception, stacktrace: __STACKTRACE__, fingerprint: fingerprint)
end

----------------------------------------

TITLE: Usage Example for Span Links
DESCRIPTION: Practical example demonstrating how to create and link spans across multiple traces, showing navigation flow linking.

LANGUAGE: typescript
CODE:
const pageloadSpan = startInactiveSpan(...)

const navigation1Span = startInactiveSpan({
  name: '/users',
  links: [{
    context: pageloadSpan.spanContext(),
    attributes: {
      'sentry.link.type': 'previous_trace'
    }
  }]
});

const navigation2Span = startSpan({name: '/users/:id'}, (span) => {
  span.addLink({
    context: navigation1Span.spanContext(),
    attributes: {
      'sentry.link.type': 'previous_trace'
    }
  })
})

----------------------------------------

TITLE: Configuring DogStatsD Backend for Sentry Metrics in Python
DESCRIPTION: Shows how to configure the DogStatsD backend for Sentry metrics in the sentry.conf.py file.

LANGUAGE: python
CODE:
SENTRY_METRICS_BACKEND = 'sentry.metrics.dogstatsd.DogStatsdMetricsBackend'
SENTRY_METRICS_OPTIONS = {
    'statsd_host': 'localhost',
    'statsd_port': 8125,
    'tags': {},
}

----------------------------------------

TITLE: Associating Commits with Release in Makefile
DESCRIPTION: This Makefile command associates commits from the configured repository to the new release using sentry-cli.

LANGUAGE: makefile
CODE:
associate_commits:
    sentry-cli releases -o $(SENTRY_ORG) -p $(SENTRY_PROJECT) \
        set-commits $(VERSION) --auto

----------------------------------------

TITLE: Defining Custom RPC Error Type in Go
DESCRIPTION: This snippet defines a custom error type 'MyRPCError' with fields for message, function name, and error code. It implements the Error() method and additional methods for accessing error details.

LANGUAGE: go
CODE:
type MyRPCError struct {
	message      string
	functionName string
	errorCode    int
}

func (e MyRPCError) Error() string {
	return "MyRPCError: " + e.message
}

func (e MyRPCError) ErrorCode() string {
	return strconv.Itoa(e.errorCode)
}

func (e MyRPCError) FunctionName() string {
	return e.functionName
}

----------------------------------------

TITLE: Starting Sentry Transaction with Required Operation
DESCRIPTION: Demonstrates the new requirement of providing an operation name when starting a transaction in Sentry 4.2.0.

LANGUAGE: java
CODE:
Sentry.startTransaction("transaction-name", "operation-name");

----------------------------------------

TITLE: TypeScript Root Directory Declaration
DESCRIPTION: TypeScript implementation for storing the root directory path globally with type declaration for TypeScript support.

LANGUAGE: typescript
CODE:
// Insert the following in a file inside your root directory
global.__rootdir__ = __dirname || process.cwd();

// This allows TypeScript to detect our global value
declare global {
  var __rootdir__: string;
}

----------------------------------------

TITLE: Customizing Transaction Names with beforeNavigate in Sentry JavaScript SDK
DESCRIPTION: This code snippet demonstrates how to use the beforeNavigate option in Sentry.init() to modify transaction names. It replaces specific patterns in the URL path with generic placeholders, allowing for better grouping of similar transactions.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  browserTracingOptions: {
    beforeNavigate: (context) => {
      return {
        ...context,
        // You could use your UI's routing library to find the matching
        // route template here. We don't have one right now, so do some basic
        // parameter replacements.
        name: location.pathname
          .replace(/\/[a-f0-9]{32}/g, "/<hash>")
          .replace(/\/\d+/g, "/<digits>"),
      };
    },
  },
});

----------------------------------------

TITLE: Creating dSYM Debug Companion File
DESCRIPTION: Command to generate a dSYM debug companion file from a Mach-O executable or dylib using dsymutil

LANGUAGE: bash
CODE:
dsymutil /path/to/output[.dylib]

----------------------------------------

TITLE: Using FileReader and FileWriter in Kotlin
DESCRIPTION: This snippet shows how to read from one file and write to another using FileReader and FileWriter in Kotlin. It utilizes Kotlin's 'use' function for resource management and 'readText()' for simplified reading.

LANGUAGE: kotlin
CODE:
import java.io.File
import java.io.FileReader
import java.io.FileWriter

val file1 = File("file1.txt")
val file2 = File("file2.txt")
FileReader(file1).use { FileWriter(file2).write(it.readText()) }

----------------------------------------

TITLE: Disabling Console Logs in Sentry React Native
DESCRIPTION: This code snippet shows how to disable sending console logs to Sentry by configuring the breadcrumbs integration. This can help prevent potential PII data from being sent through console logs.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [
    new Sentry.BreadcrumbsIntegration({
      console: false
    })
  ]
});

----------------------------------------

TITLE: Depending on Forked Python Packages
DESCRIPTION: This snippet shows how to specify a dependency on a forked GitHub repository in the requirements file. It uses a specific commit SHA to ensure version stability.

LANGUAGE: text
CODE:
library-name @ https://github.com/getsentry/<repo>/archive/<40 char sha>.zip

----------------------------------------

TITLE: Configuring Huggingface Hub Integration Options
DESCRIPTION: Example showing how to configure the Huggingface Hub integration with custom options, including PII handling and prompt inclusion settings.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.huggingface_hub import HuggingfaceHubIntegration

sentry_sdk.init(
    # ...
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    integrations=[
        HuggingfaceHubIntegration(
            include_prompts=False, # LLM/tokenizer inputs/outputs will be not sent to Sentry, despite send_default_pii=True
        ),
    ],
)

----------------------------------------

TITLE: Initializing Sentry with Koa Server (ESM)
DESCRIPTION: This snippet demonstrates how to set up Sentry error tracking with a Koa server using ES modules. It shows the proper order of importing modules and setting up Sentry's Koa error handler in an ESM context.

LANGUAGE: javascript
CODE:
// Import this first!
import "./instrument";

// Now import other modules
import Koa from "koa";
import * as Sentry from "@sentry/node";

const app = new Koa();

Sentry.setupKoaErrorHandler(app);

// Add your routes, etc.

app.listen(3030);

----------------------------------------

TITLE: Using FindBy Instead of WaitFor in React Testing Library
DESCRIPTION: Shows how to use findBy methods instead of waitFor for waiting on element appearance, which provides better error messages and simpler syntax.

LANGUAGE: javascript
CODE:
import {render, screen, waitFor} from "sentry-test/reactTestingLibrary";

// ❌
render(<Example />);
await waitFor(() => {
  expect(screen.getByRole("alert")).toBeInTheDocument();
});

// ✅
render(<Example />);
expect(await screen.findByRole("alert")).toBeInTheDocument();

----------------------------------------

TITLE: Installing Sentry Browser and Wasm packages
DESCRIPTION: Commands to install @sentry/browser and @sentry/wasm using npm, yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
npm install @sentry/browser @sentry/wasm --save

LANGUAGE: bash
CODE:
yarn add @sentry/browser @sentry/wasm

LANGUAGE: bash
CODE:
pnpm add @sentry/browser @sentry/wasm

----------------------------------------

TITLE: Implementing Set Metric in Python
DESCRIPTION: Implementation of a Set metric class in Python, demonstrating unique value tracking and CRC32-based serialization for integers and strings.

LANGUAGE: python
CODE:
class Set:
    def __init__(self, initial):
        self.value = {initial}
    def add(self, value):
        self.value.add(value)
    def serialize(self):
        def _hash(x):
            if isinstance(x, str):
                return crc32(x.encode("utf-8")) & 0xFFFFFFFF
            return int(x)
        return [_hash(value) for value in self.value]

----------------------------------------

TITLE: Emitting a Gauge Metric in Dart with Sentry
DESCRIPTION: This snippet illustrates how to emit a gauge metric in Dart using Sentry. It measures the 'page_load' time with a value of 15 milliseconds and includes a tag for the page URL.

LANGUAGE: dart
CODE:
Sentry.metrics().gauge(
    'page_load', // key
    value: 15,
    unit: DurationSentryMeasurementUnit.milliSecond,
    tags: {'page': '/home'},
);

----------------------------------------

TITLE: Customizing Raven Test Kit with shouldSendCallback
DESCRIPTION: This code shows how to initialize the Raven Test Kit with a custom shouldSendCallback function for more specific testing scenarios.

LANGUAGE: javascript
CODE:
const shouldSendCallback = (data) => {
  return; /* your own logic */
};
const testKit = testKitInitializer(Raven, shouldSendCallback);

----------------------------------------

TITLE: Installing Sentry Android Gradle Plugin (Groovy)
DESCRIPTION: Configuration for adding Sentry Android Gradle plugin to app/build.gradle using Groovy syntax. This adds the Sentry Android SDK to the project.

LANGUAGE: groovy
CODE:
plugins {
  id "com.android.application"
  id "io.sentry.android.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

----------------------------------------

TITLE: Initializing Relay Config with Executable
DESCRIPTION: Direct command to initialize Relay configuration using the executable binary.

LANGUAGE: shell
CODE:
./relay config init

----------------------------------------

TITLE: Adding Business Context to Payment Processing Span in JavaScript
DESCRIPTION: This example shows how to add business context to a payment processing span using Sentry's JavaScript SDK. It sets attributes for payment amount, currency, method, and customer type.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Process Payment',
    op: 'payment.process',
    attributes: {
      'payment.amount': 99.99,
      'payment.currency': 'USD',
      'payment.method': 'credit_card',
      'customer.type': 'returning'
    }
  },
  async () => {
    // Payment processing implementation
  }
);

----------------------------------------

TITLE: Configuring Sentry with Netflix DGS in Java
DESCRIPTION: Java code snippet demonstrating how to configure Sentry GraphQL integration with Netflix DGS framework.

LANGUAGE: java
CODE:
import com.netflix.graphql.dgs.exceptions.DefaultDataFetcherExceptionHandler;
import io.sentry.graphql.SentryGenericDataFetcherExceptionHandler;
import io.sentry.graphql.SentryInstrumentation;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
class SentryConfiguration {

  @Bean
  SentryInstrumentation sentryInstrumentation() {
    return new SentryInstrumentation(new SentryDgsSubscriptionHandler(), true);
  }

  @Bean
  SentryGenericDataFetcherExceptionHandler sentryDataFetcherExceptionHandler() {
    // delegate to default Netflix DGS exception handler
    return new SentryGenericDataFetcherExceptionHandler(new DefaultDataFetcherExceptionHandler());
  }
}

----------------------------------------

TITLE: Initializing Sentry SDK with Keep-Alive Option
DESCRIPTION: This code snippet shows how to initialize the Sentry SDK with the keep-alive option enabled. This can help resolve network issues when sending events to Sentry.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    # your usual options
    keep_alive=True,
)

----------------------------------------

TITLE: Updating BrowserTracing Integration in Loader Environment
DESCRIPTION: This snippet shows how to update the BrowserTracing integration when using the Sentry Loader script. It replaces the class-based integration with a function-based integration within the sentryOnLoad function.

LANGUAGE: JavaScript
CODE:
// Configure sentryOnLoad before adding the Loader Script
window.sentryOnLoad = function () {
  Sentry.init({
    // you only need to add this if you are customizing the SDK setup
-    integrations: [new Sentry.BrowserTracing()],
+    integrations: [Sentry.browserTracingIntegration()],
  });
};

----------------------------------------

TITLE: Importing Sentry SDK for Remix
DESCRIPTION: Imports all exports from the @sentry/remix package using the namespace import syntax. This is typically used at the entry point of a Remix application to initialize Sentry error monitoring.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/remix";

----------------------------------------

TITLE: Initializing Sentry Browser Tracing Integration in Angular
DESCRIPTION: Demonstrates how to initialize Sentry SDK with browser tracing integration enabled. This configuration captures both pageload and navigation transactions with a 100% sampling rate, which should be adjusted in production environments.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/angular";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [Sentry.browserTracingIntegration()],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Filtering Events with beforeSend in JavaScript
DESCRIPTION: Demonstrates how to use the beforeSend callback to filter events based on custom logic. This example drops events with a 'transaction' value of '/health'.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event) {
    if (event.transaction === '/health') {
      return null;
    }
    return event;
  },
});

----------------------------------------

TITLE: Accessing Sentry Features in Python
DESCRIPTION: This snippet shows the import statement for accessing Sentry features in Python code. It demonstrates how to import the SENTRY_FEATURES constant from the sentry.features module.

LANGUAGE: python
CODE:
from sentry.features import SENTRY_FEATURES

----------------------------------------

TITLE: Verifying Sentry SDK Setup in Unreal Engine C++
DESCRIPTION: A C++ code snippet to capture a test message using the Sentry SDK in Unreal Engine, demonstrating how to use the SentrySubsystem for basic error reporting.

LANGUAGE: C++
CODE:
#include "SentrySubsystem.h"

void Verify()
{
    // Capture message
    USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();
    SentrySubsystem->CaptureMessage(TEXT("Capture message"));
}

----------------------------------------

TITLE: Installing Sentry.Maui NuGet Package for .NET MAUI
DESCRIPTION: Commands to add the Sentry.Maui package to a .NET MAUI project using either the .NET Core CLI or Package Manager.

LANGUAGE: shell
CODE:
dotnet add package Sentry.Maui -v {{@inject packages.version('sentry.dotnet.maui') }}

LANGUAGE: powershell
CODE:
Install-Package Sentry.Maui -Version {{@inject packages.version('sentry.dotnet.maui') }}

----------------------------------------

TITLE: Initializing Raven Client with Threaded Requests Transport in Python
DESCRIPTION: Shows how to use the ThreadedRequestsHTTPTransport with Raven Client. This is a threaded version of the Requests transport.

LANGUAGE: python
CODE:
from raven.transport.threaded_requests import ThreadedRequestsHTTPTransport

Client('...', transport=ThreadedRequestsHTTPTransport)

----------------------------------------

TITLE: Initializing Sentry SDK with Sample Rate in Objective-C
DESCRIPTION: Shows how to initialize the Sentry SDK in Objective-C with a 25% sampling rate. The code imports the Sentry module and configures the SDK using a block to set options.

LANGUAGE: objective-c
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.sampleRate = @0.25;
}];

----------------------------------------

TITLE: Configuring Trace Propagation for Microservices E-commerce Platform
DESCRIPTION: This example demonstrates how to set up trace propagation targets for a microservices e-commerce platform. It includes targets for the main API server, authentication server, and internal API calls.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Capture 100% of spans. This is useful for development and debugging. Consider reducing in production or using traceSampler
  tracesSampleRate: 1.0,
  tracePropagationTargets: [
    "https://api.myecommerce.com",
    "https://auth.myecommerce.com",
    /^\/internal-api\//
  ],
});

----------------------------------------

TITLE: Error Handling with Sentry SDK 2.x
DESCRIPTION: Makes an HTTP request and captures any RequestError exceptions using Sentry SDK 2.x. Uses new_scope() to create a custom error grouping based on the HTTP method, path, and status code.

LANGUAGE: python
CODE:
from sentry_sdk import new_scope, capture_exception

def make_request(method, path, options):
    try:
        return session.request(method, path, **options)
    except RequestError as err:
        with new_scope() as scope:
            # group errors together based on their request and response
            scope.fingerprint = [method, path, str(err.status_code)]
            capture_exception(err)

----------------------------------------

TITLE: Configuring BeforeSendTransaction Hook in Sentry Go
DESCRIPTION: Example showing how to implement a BeforeSendTransaction hook that filters out transactions with specific messages and modifies others before sending to Sentry. The hook can either return nil to drop the transaction or return a modified event.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	// ...
	BeforeSendTransaction: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
		if event.Message == "test-transaction" {
			// Don't send the transaction to Sentry
			return nil
		}
		// Update the message for every sent transaction
		event.Message += " [example]"
		return event
	},
})

----------------------------------------

TITLE: Basic Log4j2 XML Configuration with Sentry
DESCRIPTION: Basic XML configuration for Log4j2 with ConsoleAppender and SentryAppender. Sets up logging to both console (INFO level) and Sentry (ERROR level).

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<Configuration>

  <Appenders>
    <Console name="CONSOLE" target="SYSTEM_OUT">
      <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
    </Console>
    <Sentry name="SENTRY" dsn="___PUBLIC_DSN___"/>
  </Appenders>

  <Loggers>
    <Root level="INFO">
      <AppenderRef ref="CONSOLE"/>
      <AppenderRef ref="SENTRY" level="ERROR"/>
    </Root>
  </Loggers>

</Configuration>

----------------------------------------

TITLE: Configuring Trace Sampling Rate in Java
DESCRIPTION: Example of how to configure the tracing sample rate in Java Sentry SDK. The sample rate can be set between 0 and 1, where 0.2 would sample 20% of transactions.



----------------------------------------

TITLE: Initializing Sentry with ESM Preload Command
DESCRIPTION: Command to preload Sentry modules in an ESM application using the --import flag (Node v18.19.0+ required).

LANGUAGE: bash
CODE:
node --import @sentry/node/preload app.js

----------------------------------------

TITLE: Configuring Sentry Scope in Ruby
DESCRIPTION: This code configures the Sentry scope by setting tags and user information. It uses the 'configure_scope' method to define scope-level data that will be attached to all events within this scope.

LANGUAGE: ruby
CODE:
Sentry.configure_scope do |scope|
  scope.set_tags(key: "value")
  scope.set_user(id: 1)
end

----------------------------------------

TITLE: Adding Sentry Gradle Plugin
DESCRIPTION: Gradle plugin configuration for Sentry JVM integration.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.jvm.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.12.0') }}"
}

----------------------------------------

TITLE: Creating a Project Mutation with React Query in TypeScript
DESCRIPTION: Demonstrates how to use useMutation for creating a new project. It includes typing for the response and variables, as well as handling success messages.

LANGUAGE: tsx
CODE:
import {useMutation} from 'sentry/utils/queryClient';

type CreateProjectResponse = {id: string; name: string};
type CreateProjectVariables = {name: string; orgSlug: string};

function Component() {
  const api = useApi();

  const {mutate} = useMutation<
    CreateProjectResponse,
    RequestError,
    CreateProjectVariables
  >({
    ...options,
    mutationFn: ({name, orgSlug}: CreateProjectVariables) =>
      api.requestPromise(`/organizations/${orgSlug}/projects/`, {
        method: 'POST',
        data: {name},
      }),
    onSuccess: response => {
      addSuccessMessage(`Successfully created project ${response.name}`);
    },
  });

  return (
    <button onClick={() => mutate({name: 'My new project', orgSlug: 'my-org'})}>
      Create project
    </button>
  );
}

----------------------------------------

TITLE: Configuring Sentry Scope in Ruby
DESCRIPTION: This code configures the Sentry scope by setting tags and user information. It uses the 'configure_scope' method to define scope-level data that will be attached to all events within this scope.

LANGUAGE: ruby
CODE:
Sentry.configure_scope do |scope|
  scope.set_tags(key: "value")
  scope.set_user(id: 1)
end

----------------------------------------

TITLE: Updating Error Boundary in React Router
DESCRIPTION: Modify the app/root.tsx file to report unhandled errors from the error boundary to Sentry.

LANGUAGE: tsx
CODE:
import * as Sentry from "@sentry/react-router";

export function ErrorBoundary({ error }: Route.ErrorBoundaryProps) {
  let message = "Oops!";
  let details = "An unexpected error occurred.";
  let stack: string | undefined;

  if (isRouteErrorResponse(error)) {
    message = error.status === 404 ? "404" : "Error";
    details =
      error.status === 404
        ? "The requested page could not be found."
        : error.statusText || details;
  } else if (error && error instanceof Error) {
    // you only want to capture non 404-errors that reach the boundary
   Sentry.captureException(error);
    if (import.meta.env.DEV) {
      details = error.message;
      stack = error.stack;
    }
  }

  return (
    <main>
      <h1>{message}</h1>
      <p>{details}</p>
      {stack && (
        <pre>
          <code>{stack}</code>
        </pre>
      )}
    </main>
  );
}
// ...

----------------------------------------

TITLE: Initializing Sentry with Gin
DESCRIPTION: Basic setup of Sentry with Gin including error monitoring and performance tracking. Demonstrates initialization, middleware setup, and basic routing.

LANGUAGE: go
CODE:
import (
	"fmt"
	"net/http"

	sentry "github.com/getsentry/sentry-go"
	sentrygin "github.com/getsentry/sentry-go/gin"
	"github.com/gin-gonic/gin"
)

// To initialize Sentry's handler, you need to initialize Sentry itself beforehand
if err := sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	EnableTracing: true,
	// Set TracesSampleRate to 1.0 to capture 100%
	// of transactions for tracing.
	// We recommend adjusting this value in production,
	TracesSampleRate: 1.0,
}); err != nil {
	fmt.Printf("Sentry initialization failed: %v\n", err)
}

// Then create your app
app := gin.Default()

// Once it's done, you can attach the handler as one of your middleware
app.Use(sentrygin.New(sentrygin.Options{}))

// Set up routes
app.GET("/", func(ctx *gin.Context) {
	ctx.String(http.StatusOK, "Hello world!")
})

// And run it
app.Run(":3000")

----------------------------------------

TITLE: Configuring Feature Flags in Sentry Config
DESCRIPTION: Example of enabling a feature flag in the Sentry configuration file (sentry.conf.py).

LANGUAGE: python
CODE:
SENTRY_FEATURES["organizations:onboarding"] = True

----------------------------------------

TITLE: Monitoring File Processing Operations with Span Attributes in JavaScript
DESCRIPTION: This snippet demonstrates how to monitor file handling operations using Sentry's JavaScript SDK. It creates a span for processing an uploaded image with attributes for file size, type, processing steps, and context data.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Process Uploaded Image',
    op: 'file.process',
    attributes: {
      // Technical metrics
      'file.size_bytes': 2500000,
      'file.type': 'image/jpeg',
      
      // Processing metrics
      'processing.steps_completed': ['virus_scan', 'resize', 'compress'],
      'processing.total_time_ms': 850,
      
      // Context data
      'feature.using_upload': 'user_avatar',
      'subscription.allows_hd': true
    }
  },
  async () => {
    // Image processing implementation
  }
);

----------------------------------------

TITLE: Configuring ApolloClient with Sentry Tracing in Java
DESCRIPTION: Configure the ApolloClient.Builder with Sentry tracing using the provided extension function.

LANGUAGE: java
CODE:
import com.apollographql.apollo3.ApolloClient;
import io.sentry.apollo3.SentryApolloBuilderExtensionsKt;

ApolloClient apollo = SentryApolloBuilderExtensionsKt.sentryTracing(new ApolloClient.Builder())
    .serverUrl("https://your-api-host/")
    .build();

----------------------------------------

TITLE: Using SentryFileInputStream and SentryFileOutputStream in Java
DESCRIPTION: This snippet demonstrates how to use Sentry's instrumented versions of FileInputStream and FileOutputStream in Java. It replaces the standard classes with SentryFileInputStream and SentryFileOutputStream for improved monitoring and error tracking.

LANGUAGE: java
CODE:
import io.sentry.instrumentation.file.SentryFileInputStream;
import io.sentry.instrumentation.file.SentryFileOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

File file1 = new File("file1.txt");
File file2 = new File("file2.txt");
try (FileInputStream fis = new SentryFileInputStream(file1)) {
  byte[] buffer = new byte[1024];
  try (FileOutputStream fos = new SentryFileOutputStream(file2)) {
    int read;
    while (true) {
      read = fis.read(buffer);
      if (read == -1) {
        break;
      }
      fos.write(buffer, 0, read);
    }
  }
}

----------------------------------------

TITLE: Emitting a Distribution Metric in Java and Kotlin
DESCRIPTION: This snippet shows how to emit a distribution metric in Java and Kotlin. It includes setting a key, value, measurement unit, and tags for the metric.

LANGUAGE: Java
CODE:
final Map<String, String> tags = new HashMap<>();
tags.put("type", "thumbnail");

Sentry.metrics().distribution(
    "image_download_duration",
    150.0,
    MeasurementUnit.Duration.MILLISECOND,
    tags);

LANGUAGE: Kotlin
CODE:
Sentry.metrics().distribution(
    "image_download_duration",
    150.0,
    MeasurementUnit.Duration.MILLISECOND,
    mapOf(
        "type" to "thumbnail"
    )
)

----------------------------------------

TITLE: Capturing Messages with Sentry in Unreal Engine (C++)
DESCRIPTION: Demonstrates how to use the CaptureMessage function to send a message to Sentry. It shows basic usage and an advanced example with scope configuration.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->CaptureMessage("Message", ESentryLevel::Info);

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

FConfigureScopeDelegate ScopeDelegate;
ScopeDelegate.BindDynamic(this, &USomeClass::HandleScopeDelegate);

SentrySubsystem->CaptureMessageWithScope("Message", ScopeDelegate, ESentryLevel::Info);

// Put scope configuration logic here
void USomeClass::HandleScopeDelegate(USentryScope* Scope)
{
    Scope->SetTagValue("Module", "Test");
    ...
}

----------------------------------------

TITLE: Syncing Development Environment
DESCRIPTION: This command synchronizes the development environment with the latest dependencies after merging changes.

LANGUAGE: bash
CODE:
devenv sync

----------------------------------------

TITLE: Configuring CMake Build for Crashpad Backend in Sentry Native SDK
DESCRIPTION: This command configures the CMake build to use the Crashpad backend for the Sentry Native SDK. It automatically creates a crashpad_handler executable alongside the sentry library.

LANGUAGE: shell
CODE:
cmake -B build -D SENTRY_BACKEND=crashpad

----------------------------------------

TITLE: Setting Release Information in Sentry PHP Client
DESCRIPTION: Shows how to set the release version for the Sentry client. This helps identify which version of the application an event occurred in.

LANGUAGE: php
CODE:
'release' => MyApp::getReleaseVersion(),

LANGUAGE: php
CODE:
$client->setRelease(MyApp::getReleaseVersion());

----------------------------------------

TITLE: Implementing Gauge Metric in Python
DESCRIPTION: Implementation of a Gauge metric class in Python, showing how to maintain summary statistics and serialize the data.

LANGUAGE: python
CODE:
class Gauge:
    def __init__(self, initial):
        self.last = initial
        self.min = initial
        self.max = initial
        self.sum = initial
        self.count = 1
    def add(self, value):
        self.last = value
        self.min = min(self.min, value)
        self.max = max(self.max, value)
        self.sum += value
        self.count += 1
    def serialize(self):
        return (
            self.last,
            self.min,
            self.max,
            self.sum,
            self.count,
        )

----------------------------------------

TITLE: Setting Minimum Log Levels for Sentry Appender in XML
DESCRIPTION: This XML configuration demonstrates how to set minimum log levels for events and breadcrumbs in the Sentry Appender. It allows fine-tuning of what gets sent to Sentry as events or breadcrumbs.

LANGUAGE: xml
CODE:
<appender name="Sentry" class="io.sentry.logback.SentryAppender">
    <options>
        <!-- NOTE: Replace the test DSN below with YOUR OWN DSN to see the events from this app in your Sentry project/dashboard -->
        <dsn>___PUBLIC_DSN___</dsn>
        <!-- Add data like request headers and IP for users, see https://docs.sentry.io/platforms/java/guides/logback/data-management/data-collected/ for more info -->
        <sendDefaultPii>true</sendDefaultPii>
    </options>
    <!-- Optionally change minimum Event level. Default for Events is ERROR -->
    <minimumEventLevel>WARN</minimumEventLevel>
    <!-- Optionally change minimum Breadcrumbs level. Default for Breadcrumbs is INFO -->
    <minimumBreadcrumbLevel>DEBUG</minimumBreadcrumbLevel>
</appender>

----------------------------------------

TITLE: Initializing Sentry SDK for Client-side in Astro
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK for client-side in a custom configuration file. It sets the DSN and tracesSampleRate.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/astro";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Enabling MetricKit Raw Payload in Sentry for Objective-C
DESCRIPTION: This code snippet shows how to enable both MetricKit integration and raw payload viewing when initializing the Sentry SDK in Objective-C. It sets the DSN, enables MetricKit, and enables raw payload viewing.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.enableMetricKit = YES;
    options.enableMetricKitRawPayload = YES;
}];

----------------------------------------

TITLE: Setting User Data with Sentry SDK in Python
DESCRIPTION: This code sets user information for Sentry error tracking. It uses the set_user function from sentry_sdk to associate an email address with the current user context. This allows Sentry to link errors to specific users in its reports.

LANGUAGE: python
CODE:
from sentry_sdk import set_user

set_user({"email": "jane.doe@example.com"})

----------------------------------------

TITLE: Running Resque Workers with Sentry
DESCRIPTION: Command to run Resque workers with the at_exit hook enabled to ensure proper event flushing before process termination.

LANGUAGE: bash
CODE:
RUN_AT_EXIT_HOOKS=1 rake resque:workers

----------------------------------------

TITLE: Overriding Transaction Name in Sentry (JSX)
DESCRIPTION: This code snippet demonstrates how to override the name of the currently running transaction in Sentry. It uses a JSX-based platform-specific content inclusion mechanism.

LANGUAGE: jsx
CODE:
<PlatformContent includePath="enriching-events/set-transaction-name" />

----------------------------------------

TITLE: Configuring Sentry Transaction Handler in Laravel
DESCRIPTION: Demonstrates how to implement a before_send_transaction closure in Laravel's Sentry configuration. The closure receives a Sentry Event object and can modify, replace, or discard the transaction by returning null.

LANGUAGE: php
CODE:
'before_send_transaction' => function (\Sentry\Event $transaction): ?\Sentry\Event {
    return $transaction;
},

----------------------------------------

TITLE: Building and Running Chartcuterie in Development
DESCRIPTION: Provides shell commands for building the Chartcuterie configuration module, starting the devservice, and validating the service startup. These steps are necessary for running Chartcuterie in a local development environment.

LANGUAGE: shell
CODE:
yarn build-chartcuterie-config
devservices up --mode chartcuterie
docker logs -f sentry_chartcuterie

----------------------------------------

TITLE: Capturing Errors with Sentry SDK in Swift
DESCRIPTION: This snippet demonstrates how to capture errors using the Sentry SDK in Swift. It shows how to set the error level, add tags to the scope, and capture errors with and without custom scopes.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.capture(error: error) { scope in
    scope.setLevel(.warning)
    // will be tagged with my-tag="my value"
    scope.setTag(value: "my value", key: "my-tag")
}

// will not be tagged with my-tag
SentrySDK.capture(error: error)

----------------------------------------

TITLE: Adding Sentry JUL Dependency in SBT
DESCRIPTION: This Scala snippet shows how to add the Sentry Java Util Logging dependency to an SBT project. It uses the libraryDependencies setting with a dynamic version injection.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-jul" % "{{@inject packages.version('sentry.java.jul', '4.1.0') }}"

----------------------------------------

TITLE: Enabling Timeout Warning for GCP Functions
DESCRIPTION: Shows how to enable timeout warnings in the Sentry SDK configuration for Google Cloud Functions. The warning triggers when function execution time approaches the configured timeout limit.

LANGUAGE: python
CODE:
sentry_sdk.init(
    # ...
    integrations=[
        GcpIntegration(
            timeout_warning=True
        ),
    ],
)

----------------------------------------

TITLE: Updating React Frontend Click Handler
DESCRIPTION: Diff showing modification of the onClick event handler in App.js to trigger an error by changing the product ID from 'nonfat-water' to 'debug-sentry'.

LANGUAGE: jsx
CODE:
    <div className="btn-parent">
        <button className="btn" onClick={() => getProduct("clown-shoes")}>
            Clown Shoes
        </button>
    </div>
    <div className="btn-parent">
-      <button className="btn" onClick={() => getProduct("nonfat-water")}>
+      <button className="btn" onClick={() => getProduct("debug-sentry")}>
        Nonfat Water
       </button>
    </div>

----------------------------------------

TITLE: Default Relay Executable Configuration
DESCRIPTION: Default YAML configuration for Relay when running as executable, with localhost binding.

LANGUAGE: yaml
CODE:
relay:
  mode: managed
  # The upstream hostname is taken from any of your DSNs.
  # Go to your Project Settings, and then to "Client Keys (DSN)" to see them.
  upstream: https://___ORG_INGEST_DOMAIN___
  host: 127.0.0.1
  port: 3000

----------------------------------------

TITLE: Verifying Sentry Logging Integration in Python
DESCRIPTION: Demonstrates various logging levels and their effects on Sentry event capture and breadcrumb creation.

LANGUAGE: python
CODE:
import logging

def main():
    sentry_sdk.init(...)  # same as above

    logging.debug("I am ignored")
    logging.info("I am a breadcrumb")
    logging.error("I am an event", extra=dict(bar=43))
    logging.exception("An exception happened")

main()

----------------------------------------

TITLE: Configuring FFI Database Factory
DESCRIPTION: Configuration for instrumenting database operations with FFI factory support.

LANGUAGE: dart
CODE:
import 'package:sentry_sqflite/sentry_sqflite.dart';
import 'package:sqflite/sqflite.dart';

databaseFactory = SentrySqfliteDatabaseFactory(databaseFactory: databaseFactoryFfi);
final database = await openDatabase('path/to/db');

----------------------------------------

TITLE: Generating HTTPS Certificates for Development
DESCRIPTION: Commands to install and use mkcert for creating locally-trusted development certificates.

LANGUAGE: shell
CODE:
brew install mkcert
brew install nss # if you use Firefox
brew install caddy
yarn mkcert-localhost

----------------------------------------

TITLE: Setting Custom Tag with Sentry SDK in GDScript
DESCRIPTION: This snippet demonstrates how to set a custom tag using the Sentry SDK in a Godot project. It sets a 'birthday' tag with a hashed string value, which can be useful for tracking user-specific data without exposing personal information.

LANGUAGE: gdscript
CODE:
SentrySDK.set_tag("birthday", str("08/12/1990".hash()))

----------------------------------------

TITLE: Configuring Sentry Plugin for Rollup
DESCRIPTION: Shows the configuration of Sentry plugin in a Rollup build setup. Implements error tracking functionality using the Sentry Rollup plugin with a custom application key.

LANGUAGE: javascript
CODE:
// rollup.config.mjs
import { sentryRollupPlugin } from "@sentry/rollup-plugin";

export default {
  plugins: [
    sentryRollupPlugin({
      applicationKey: "your-custom-application-key",
    }),
  ],
};

----------------------------------------

TITLE: Using Raven Context Wrapper
DESCRIPTION: Demonstrates wrapping code in Raven context to automatically capture exceptions.

LANGUAGE: javascript
CODE:
Raven.context(function () {
  doSomething(a[0]);
});

----------------------------------------

TITLE: Initializing Sentry with DSN Configuration in JavaScript
DESCRIPTION: Example showing how to initialize Sentry using a DSN string. The DSN follows the format {PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}{PATH}/{PROJECT_ID} and configures where Sentry will send event data.

LANGUAGE: javascript
CODE:
Sentry.init({ dsn: "https://public@sentry.example.com/1" });

----------------------------------------

TITLE: Initializing Sentry with DSN Configuration in JavaScript
DESCRIPTION: Example showing how to initialize Sentry using a DSN string. The DSN follows the format {PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}{PATH}/{PROJECT_ID} and configures where Sentry will send event data.

LANGUAGE: javascript
CODE:
Sentry.init({ dsn: "https://public@sentry.example.com/1" });

----------------------------------------

TITLE: Recording Custom Breadcrumbs
DESCRIPTION: Demonstrates how to record custom breadcrumbs for better error tracking

LANGUAGE: javascript
CODE:
Raven.captureBreadcrumb({
  message: "Item added to shopping cart",
  category: "action",
  data: {
    isbn: "978-1617290541",
    cartSize: "3"
  }
});

----------------------------------------

TITLE: Adding Sentry Gems to Rails Gemfile (Basic Setup)
DESCRIPTION: This snippet shows how to add the necessary Sentry gems to a Rails project's Gemfile for basic error tracking functionality.

LANGUAGE: ruby
CODE:
gem "sentry-ruby"
gem "sentry-rails"

----------------------------------------

TITLE: Initializing Sentry with Custom Fingerprinting in Kotlin
DESCRIPTION: Configures Sentry SDK using Kotlin syntax, implementing a beforeSend callback to set custom fingerprints for SQLException events. Uses Kotlin-specific language features for more concise code.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.BeforeSendCallback
import java.sql.SQLException

Sentry.init { options ->
  options.beforeSend = BeforeSendCallback { event, hint ->
    if (event.throwable is SQLException) {
      event.fingerprints = listOf("database-connection-error")
    }
    event
  }
}

----------------------------------------

TITLE: Initializing Sentry SDK with Default TwP Configuration
DESCRIPTION: Basic Sentry SDK initialization that enables Tracing Without Performance (TwP) mode by default. This configuration continues incoming traces, attaches trace context to events, and propagates trace data.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
});

----------------------------------------

TITLE: Configuring Sentry Normalization Depth
DESCRIPTION: Configuration for adjusting the depth of state context normalization in Sentry initialization.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  normalizeDepth: 10, // Or however deep you want your state context to be.
});

----------------------------------------

TITLE: Installing @sentry/react with npm
DESCRIPTION: This snippet shows how to install the @sentry/react package using npm. The --save flag is used to add the package to the project's dependencies in package.json.

LANGUAGE: bash
CODE:
npm install @sentry/react --save

----------------------------------------

TITLE: Request Isolation with Sentry (ESM)
DESCRIPTION: Example of using Sentry.withIsolationScope for request isolation in non-HTTP scenarios using ES Modules.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

function myScheduledJob() {
  return Sentry.withIsolationScope(async () => {
    await doSomething();
    await doSomethingElse();
    return { status: "DONE" };
  });
}

----------------------------------------

TITLE: Throwing Test Error in SvelteKit Load Function
DESCRIPTION: Example of throwing an error in a SvelteKit load function to test Sentry error capturing.

LANGUAGE: javascript
CODE:
export const load = () => {
  throw new Error("Sentry Load Error");
};

----------------------------------------

TITLE: Creating Manual Resource Spans in JavaScript
DESCRIPTION: Example of manually creating resource spans using the Sentry SDK and Performance Resource Timing API. Demonstrates how to track asset loading performance with custom span attributes.

LANGUAGE: javascript
CODE:
// https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming
const resources = performance.getEntriesByType("resource");
resources.forEach((entry) => {
  const startTime = msToSec(entry.startTime);
  const duration = msToSec(entry.duration);

  const span = Sentry.startInactiveSpan({
    startTimestamp: startTime,
    op: entry.initiatorType
      ? `resource.${entry.initiatorType}`
      : "resource.other",
    description: entry.name,
    data: {
      "http.response_transfer_size": entry.transferSize,
      "http.response_content_length": entry.encodedBodySize,
      "http.decoded_response_content_length": entry.decodedBodySize,
      "resource.render_blocking_status": entry.renderBlockingStatus,
    },
  });

  // override end timestamp to match performance entry
  span.finish(startTime + duration);
});

----------------------------------------

TITLE: Configuring Angular ErrorHandler
DESCRIPTION: Example of configuring Raven.js to catch Angular-specific exceptions using ErrorHandler.

LANGUAGE: javascript
CODE:
import * as Raven from "raven-js";
import { BrowserModule } from "@angular/platform-browser";
import { NgModule, ErrorHandler } from "@angular/core";
import { AppComponent } from "./app.component";

Raven.config("___PUBLIC_DSN___").install();

export class RavenErrorHandler implements ErrorHandler {
  handleError(err: any): void {
    Raven.captureException(err);
  }
}

@NgModule({
  imports: [BrowserModule],
  declarations: [AppComponent],
  bootstrap: [AppComponent],
  providers: [{ provide: ErrorHandler, useClass: RavenErrorHandler }],
})
export class AppModule {}

----------------------------------------

TITLE: Basic Fingerprint Rule Syntax in Sentry
DESCRIPTION: Demonstrates the basic syntax for defining fingerprint rules, including comments and matcher expressions.

LANGUAGE: bash
CODE:
# You can use comments to explain the rules.  Rules themselves follow the
# following syntax:
matcher:expression -> list of values
# The list of values can be hardcoded or substituted values.

----------------------------------------

TITLE: Verifying Sentry Integration with Pyramid
DESCRIPTION: Example Pyramid application that demonstrates Sentry integration by intentionally raising a division by zero error. The code sets up a basic web server that will trigger an error event when accessed.

LANGUAGE: python
CODE:
from wsgiref.simple_server import make_server
from pyramid.config import Configurator
from pyramid.response import Response

sentry_sdk.init(...)  # same as above

def hello_world(request):
    1 / 0  # raises an error
    return Response('Hello World!')

if __name__ == '__main__':
    with Configurator() as config:
        config.add_route('hello', '/')
        config.add_view(hello_world, route_name='hello')
        app = config.make_wsgi_app()

    server = make_server('0.0.0.0', 6543, app)
    server.serve_forever()

----------------------------------------

TITLE: Initializing Sentry with Delayed Replay Integration in JavaScript
DESCRIPTION: Shows how to initialize Sentry first without Replay integration, then dynamically import and add the Replay integration later. This pattern is useful for optimizing initial load performance by deferring non-critical functionality.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Note, Replay is NOT instantiated below:
  integrations: [],
});

// Sometime later
import("@sentry/solid").then(lazyLoadedSentry => {
  Sentry.addIntegration(lazyLoadedSentry.replayIntegration());
});

----------------------------------------

TITLE: Configuring Breadcrumbs Logger in Ruby Sentry SDK
DESCRIPTION: This snippet shows how to enable specific breadcrumbs loggers in the Ruby SDK, such as the active support logger and HTTP logger.

LANGUAGE: ruby
CODE:
config.breadcrumbs_logger = [:active_support_logger]
config.breadcrumbs_logger = [:active_support_logger, :http_logger]

----------------------------------------

TITLE: Passing Attachments to Capture Methods in Java and Kotlin
DESCRIPTION: Demonstrates how to pass attachments to capture methods when capturing an exception. The code shows the usage of Attachment and Hint classes.

LANGUAGE: java
CODE:
import io.sentry.Attachment;
import io.sentry.Hint;
import io.sentry.Sentry;

Attachment attachment = new Attachment("/path/to/file.txt");
Sentry.captureException(new IllegalStateException(), Hint.withAttachment(attachment));

LANGUAGE: kotlin
CODE:
import io.sentry.Attachment;
import io.sentry.Hint;
import io.sentry.Sentry;

val attachment = Attachment("path/to/file.txt")
Sentry.captureException(IllegalStateException(), Hint.withAttachment(attachment))

----------------------------------------

TITLE: Creating Sentry Attachment in Swift
DESCRIPTION: This snippet demonstrates how to create a Sentry Attachment object in Swift using a file path. It requires the Sentry SDK to be imported and properly configured in the project.

LANGUAGE: swift
CODE:
import Sentry

let attachment = Attachment(path: "your/path/file.log")

----------------------------------------

TITLE: Installing Raven with Custom Error Callback in Node.js
DESCRIPTION: This example demonstrates how to install Raven with a custom callback function for handling fatal, non-recoverable errors.

LANGUAGE: javascript
CODE:
Raven.config("___PUBLIC_DSN___").install(function (err, initialErr, eventId) {
  console.error(err);
  process.exit(1);
});

----------------------------------------

TITLE: Generating ProGuard UUID in Python
DESCRIPTION: Python code that generates a UUID for ProGuard files by computing a SHA1 hash based on the file contents. The UUID is generated using a namespace based on guardsquare.com and the file's binary content.

LANGUAGE: python
CODE:
import uuid

NAMESPACE = uuid.uuid5(uuid.NAMESPACE_DNS, "guardsquare.com")

def get_proguard_uuid(filename):
    with open(filename, 'rb') as f:
        return uuid.uuid5(NAMESPACE, f.read())

----------------------------------------

TITLE: Capturing Message with Sentry SDK in Objective-C
DESCRIPTION: This snippet demonstrates how to import the Sentry SDK and capture a simple message in Objective-C. It shows the use of the [SentrySDK captureMessage:] method.

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK captureMessage:@"My first test message"];

----------------------------------------

TITLE: Setting Custom Tag with Sentry SDK in C++
DESCRIPTION: This snippet demonstrates how to set a custom tag using the Sentry SDK. It includes the Sentry header file and sets a 'page.locale' tag with a value of 'de-at'.

LANGUAGE: cpp
CODE:
#include <sentry.h>

sentry_set_tag("page.locale", "de-at");

----------------------------------------

TITLE: Markdown Frontend Configuration Page
DESCRIPTION: Markdown frontmatter and layout components for a configuration documentation page, including title, description and sidebar ordering metadata.

LANGUAGE: markdown
CODE:
---
title: Configuration
description: "Learn about additional configuration options for the JavaScript SDKs."
sidebar_order: 2
---

<PageGrid />

----------------------------------------

TITLE: Installing Sentry SDK for Remix using NPX
DESCRIPTION: Command to run the Sentry wizard for automatic SDK installation and configuration in a Remix project.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i remix

----------------------------------------

TITLE: Installing Sentry SDK for Remix using NPX
DESCRIPTION: Command to run the Sentry wizard for automatic SDK installation and configuration in a Remix project.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i remix

----------------------------------------

TITLE: Installing Sentry.NLog Package
DESCRIPTION: Installation commands for adding the Sentry.NLog package using either Package Manager or .NET Core CLI.

LANGUAGE: powershell
CODE:
Install-Package Sentry.NLog -Version {{@inject packages.version('sentry.dotnet.nlog') }}

LANGUAGE: shell
CODE:
dotnet add package Sentry.NLog -v {{@inject packages.version('sentry.dotnet.nlog') }}

----------------------------------------

TITLE: Optional Chaining and Nullish Coalescing in JavaScript
DESCRIPTION: Demonstrates the usage of optional chaining (?.) for safe property access and nullish coalescing (??) for providing default values in JavaScript.

LANGUAGE: javascript
CODE:
const response = {
  settings: {
    nullValue: null,
    height: 400,
    animationDuration: 0,
    headerText: '',
    showSplashScreen: false
  }
};

const undefinedValue = response.settings.undefinedValue ?? 'some other default'; // result: 'some other default'
const nullValue = response.settings.nullValue ?? 'some other default'; // result: 'some other default'
const headerText = response.settings.headerText ?? 'Hello, world!'; // result: ''
const animationDuration = response.settings.animationDuration ?? 300; // result: 0
const showSplashScreen = response.settings.showSplashScreen ?? true; // result: false

----------------------------------------

TITLE: Rendering PageGrid Component in React
DESCRIPTION: A simple React component inclusion for rendering a grid layout of pages or documentation sections.

LANGUAGE: jsx
CODE:
<PageGrid />

----------------------------------------

TITLE: Using Screen Query Methods in React Testing Library
DESCRIPTION: Illustrates the correct usage of screen query methods, emphasizing the use of getByRole for most scenarios and explaining when to use other query methods.

LANGUAGE: javascript
CODE:
import { render, screen } from "sentry-test/reactTestingLibrary";

// ❌
const { getByRole } = render(<Example />);
const errorMessageNode = getByRole("alert");

// ✅
render(<Example />);
const errorMessageNode = screen.getByRole("alert");

----------------------------------------

TITLE: Configuring Sentry in .NET MAUI Application
DESCRIPTION: C# code snippet demonstrating how to configure Sentry in a .NET MAUI application's MauiProgram.cs file. It shows setting up the DSN, enabling debug mode, and configuring the trace sample rate for performance monitoring.

LANGUAGE: csharp
CODE:
public static MauiApp CreateMauiApp()
{
    var builder = MauiApp.CreateBuilder();
    builder
        .UseMauiApp<App>()

        // Add this section anywhere on the builder:
        .UseSentry(options =>
        {
            // The DSN is the only required setting.
            options.Dsn = "___PUBLIC_DSN___";

            // Use debug mode if you want to see what the SDK is doing.
            // Debug messages are written to stdout with Console.Writeline,
            // and are viewable in your IDE's debug console or with 'adb logcat', etc.
            // This option is not recommended when deploying your application.
            options.Debug = true;

            // Set TracesSampleRate to 1.0 to capture 100% of transactions for tracing.
            // We recommend adjusting this value in production.
            options.TracesSampleRate = 1.0;

            // Other Sentry options can be set here.
        })

        // ... the remainder of your MAUI app setup

    return builder.Build();
}

----------------------------------------

TITLE: Setting Sentry Environment via Android Manifest
DESCRIPTION: Configures the Sentry environment using a meta-data tag in AndroidManifest.xml. Uses build variables to dynamically set the environment value.

LANGUAGE: xml
CODE:
<!-- https://developer.android.com/studio/build/manifest-build-variables -->
<meta-data android:name="io.sentry.environment" android:value="${sentryEnvironment}" />

----------------------------------------

TITLE: Setting Logger Name in Raven Configuration for Node.js
DESCRIPTION: This example demonstrates how to set the logger name in the Raven configuration.

LANGUAGE: javascript
CODE:
{
  logger: "default";
}

----------------------------------------

TITLE: Defining isSentryRequest Function in TypeScript
DESCRIPTION: This code snippet shows how to implement a function that checks if a request is being made to Sentry, to avoid creating Sentry spans for such requests.

LANGUAGE: typescript
CODE:
import {Span as OtelSpan} from '@opentelemetry/sdk-trace-base';
import {SemanticAttributes} from '@opentelemetry/semantic-conventions';
import {getCurrentHub} from '@sentry/core';

export function isSentryRequestSpan(otelSpan: OtelSpan): boolean {
  const {attributes} = otelSpan;

  const httpUrl = attributes[SemanticAttributes.HTTP_URL];

  if (!httpUrl) {
    return false;
  }

  return isSentryRequestUrl(httpUrl.toString());
}

function isSentryRequestUrl(url: string): boolean {
  const dsn = getCurrentHub().getClient()?.getDsn();
  return dsn ? url.includes(dsn.host) : false;
}

----------------------------------------

TITLE: Capturing Info-Level Message with Sentry in Rust
DESCRIPTION: This snippet demonstrates how to capture an informational message using Sentry in a Rust application. It uses the capture_message function from the sentry crate, specifying the message content and log level.

LANGUAGE: rust
CODE:
sentry::capture_message("Something went wrong", sentry::Level::Info);

----------------------------------------

TITLE: Updating Browser Tracing Integration in Next.js
DESCRIPTION: Example of migrating from the class-based BrowserTracing integration to the new function-based browserTracingIntegration in a Next.js application's Sentry configuration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
-  integrations: [new Sentry.BrowserTracing()],
+  integrations: [Sentry.browserTracingIntegration()],
});

----------------------------------------

TITLE: Project Stats Response - JSON
DESCRIPTION: API response showing project statistics with detailed event data over time periods.

LANGUAGE: json
CODE:
GET /api/0/projects/{project_slug}/
{
  "id": 5,
  "name": "foo",
  "stats": {
      "24h": [
          [
              1629064800,
              27
          ],
          [
              1629068400,
              24
          ],
          ...
      ]
  }
}

----------------------------------------

TITLE: Implementing ElectronNet Integration with Custom Configuration
DESCRIPTION: Example of initializing Sentry with ElectronNet integration using custom configuration. Shows how to disable breadcrumbs and configure selective tracing for POST requests.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.electronNetIntegration({
      breadcrumbs: false,
      tracing: (method) => method == "POST",
      tracingOrigins: false,
    }),
  ],
});

----------------------------------------

TITLE: Using getIntegrationByName with TypeScript Generics in Sentry SDK
DESCRIPTION: Demonstrates how to use the new getIntegrationByName() method with TypeScript generics to replace the deprecated getIntegration() and getIntegrationById() methods.

LANGUAGE: TypeScript
CODE:
const replay = getClient().getIntegrationByName<Replay>("Replay");

----------------------------------------

TITLE: Configuring Default Masking Settings in Sentry Mobile Replay
DESCRIPTION: Configuration options to disable default masking behavior for text, images, and vectors in Sentry Session Replay. Requires Sentry React Native SDK version 5.36.0, 6.3.0 or higher.

LANGUAGE: javascript
CODE:
Sentry.mobileReplayIntegration({
  maskAllText: false,
  maskAllImages: false,
  maskAllVectors: false,
}),

----------------------------------------

TITLE: Configuring Git Default Branch Name in Bash
DESCRIPTION: Command to set the default branch name to 'main' for new Git repositories from Git version 2.28 onwards. This configuration helps move away from the legacy 'master' branch naming convention.

LANGUAGE: bash
CODE:
git config --global init.defaultBranch main

----------------------------------------

TITLE: Setting Local Scope Tags in Ruby
DESCRIPTION: This snippet demonstrates how to set tags within a local scope in both the old and new Sentry Ruby SDKs.

LANGUAGE: ruby
CODE:
# Before
Raven.tags_context(foo: "bar") do
  Raven.capture_message("test")
end

# After
Sentry.with_scope do |scope|
  scope.set_tags(foo: "bar")

  Sentry.capture_message("test")
end

----------------------------------------

TITLE: Correct Async Sentry Setup
DESCRIPTION: Proper way to initialize Sentry before starting the async runtime using tokio::runtime::Builder.

LANGUAGE: rust
CODE:
fn main() {
let _guard = sentry::init(("___PUBLIC_DSN___", sentry::ClientOptions {
    release: sentry::release_name!(),
    ..Default::default()
}));

tokio::runtime::Builder::new_multi_thread()
        .enable_all()
        .build()
        .unwrap()
        .block_on(async {
            // implementation of main
        });
}

----------------------------------------

TITLE: Comprehensive Span Example in JSON
DESCRIPTION: Provides a complete example of multiple spans within a transaction, showcasing various attributes and their usage.

LANGUAGE: json
CODE:
{
  "spans": [
    {
      "trace_id": "1e57b752bc6e4544bbaa246cd1d05dee",
      "span_id": "b01b9f6349558cd1",
      "parent_span_id": "b0e6f15b45c36b12",
      "op": "http",
      "description": "GET /sockjs-node/info",
      "status": "ok",
      "start_timestamp": 1588601261.481961,
      "timestamp": 1588601261.488901,
      "tags": {
        "http.status_code": "200"
      },
      "data": {
        "url": "http://localhost:8080/sockjs-node/info?t=1588601703755",
        "status_code": 200,
        "type": "xhr",
        "method": "GET"
      },
      "origin": "auto.http"
    },
    {
      "trace_id": "1e57b752bc6e4544bbaa246cd1d05dee",
      "span_id": "b980d4dec78d7344",
      "parent_span_id": "9312d0d18bf51736",
      "op": "update",
      "description": "Vue <App>",
      "start_timestamp": 1588601261.535386,
      "timestamp": 1588601261.544196
    }
  ]
}

----------------------------------------

TITLE: Configuring Metro Bundler with Sentry for React Native
DESCRIPTION: This snippet sets up the Metro bundler configuration for a React Native project using Sentry. It imports the Sentry-specific configuration function and applies it to the project directory.

LANGUAGE: javascript
CODE:
// const { getDefaultConfig } = require("expo/metro-config");
const { getSentryExpoConfig } = require("@sentry/react-native/metro");

// const config = getDefaultConfig(__dirname);
const config = getSentryExpoConfig(__dirname);

module.exports = config;

----------------------------------------

TITLE: Implementing Trace Sampling Function in Sentry JavaScript SDK
DESCRIPTION: Shows how to configure a custom sampling function using traces-sampler option during Sentry initialization. The function accepts a sampling context and returns a sampling rate between 0 and 1 to determine which transactions to capture.

LANGUAGE: javascript
CODE:
Sentry.init({
  tracesSampler: samplingContext => {
    // Return a number between 0 and 1
    return 0.5;
  }
});

----------------------------------------

TITLE: Installing @sentry/react with pnpm
DESCRIPTION: This snippet shows the command to install the @sentry/react package using pnpm. Similar to yarn, pnpm automatically adds the package to the project's dependencies.

LANGUAGE: bash
CODE:
pnpm add @sentry/react

----------------------------------------

TITLE: Installing Sentry SDK with AIOHTTP Support in Python
DESCRIPTION: Install the Sentry SDK from PyPI with AIOHTTP support using pip. For Python 3.6, an additional package is required.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk[aiohttp]

LANGUAGE: bash
CODE:
pip install --upgrade aiocontextvars

----------------------------------------

TITLE: Embedding UUID in WebAssembly Build ID Section
DESCRIPTION: For WebAssembly, which lacks native build ID support, Sentry recommends embedding a UUID in the 'build_id' custom section as raw binary. This can be automated using the 'wasm-split' tool provided by Sentry.

LANGUAGE: wasm
CODE:
// No code snippet provided, but the process involves using the wasm-split tool:
// https://github.com/getsentry/symbolicator/tree/master/crates/wasm-split

----------------------------------------

TITLE: Adding Data Attributes to Transactions in Objective-C
DESCRIPTION: This snippet demonstrates how to start a transaction and add various data attributes to it using Objective-C. It shows how to add string, number, boolean, and array values to the transaction.

LANGUAGE: objc
CODE:
id<SentrySpan> transaction = [SentrySDK startTransactionWithName:@"processOrderBatch" operation:@"task"];
[transaction setDataValue:@"value1" forKey:@"my-data-attribute-1"];
[transaction setDataValue:@(42) forKey:@"my-data-attribute-2"];
[transaction setDataValue:@(YES) forKey:@"my-data-attribute-3"];

[transaction setDataValue:@[@"value1", @"value2", @"value3"] forKey:@"my-data-attribute-4"];
[transaction setDataValue:@[@(42), @(43), @(44)] forKey:@"my-data-attribute-5"];
[transaction setDataValue:@[@(YES), @(NO), @(YES)] forKey:@"my-data-attribute-6"];

----------------------------------------

TITLE: Proguard Debug Image Example in JSON
DESCRIPTION: Example showing the structure of a Proguard debug image used for Android builds with a UUID identifier.

LANGUAGE: json
CODE:
{
  "type": "proguard",
  "uuid": "395835f4-03e0-4436-80d3-136f0749a893"
}

----------------------------------------

TITLE: Implementing Monitor Check-ins with Sidekiq
DESCRIPTION: Example of integrating Sentry monitor check-ins with a Sidekiq job using the MonitorCheckIns mixin.

LANGUAGE: ruby
CODE:
class SidekiqJob
  include Sidekiq::Job
  include Sentry::Cron::MonitorCheckIns

  sentry_monitor_check_ins

  def perform(*args)
    # do stuff
  end
end

----------------------------------------

TITLE: Dynamically Setting Sentry Environment in Elixir
DESCRIPTION: This snippet uses Config.config_env/0 to dynamically set the Sentry environment name based on the current configuration environment. It's typically placed in the config.exs file for use across all environments.

LANGUAGE: elixir
CODE:
config :sentry,
  environment_name: config_env()

----------------------------------------

TITLE: Configuring Sentry DSN in Elixir Production Environment
DESCRIPTION: Demonstrates how to set up the Sentry DSN (Data Source Name) in the production configuration file. This configuration should be placed in config/prod.exs for standard Elixir applications, as Sentry is typically only enabled in production environments.

LANGUAGE: elixir
CODE:
config :sentry,
  dsn: "___PUBLIC_DSN___"

----------------------------------------

TITLE: Configuring Sentry DSN in Elixir Production Environment
DESCRIPTION: Demonstrates how to set up the Sentry DSN (Data Source Name) in the production configuration file. This configuration should be placed in config/prod.exs for standard Elixir applications, as Sentry is typically only enabled in production environments.

LANGUAGE: elixir
CODE:
config :sentry,
  dsn: "___PUBLIC_DSN___"

----------------------------------------

TITLE: Configuring Error Testing Component
DESCRIPTION: Example component implementation for testing Sentry error capture functionality.

LANGUAGE: javascript
CODE:
<button
  type="button"
  onClick={() => {
    throw new Error("Sentry Frontend Error");
  }}
>
  Throw error
</button>

----------------------------------------

TITLE: Verifying Sentry Logging Integration in Dart
DESCRIPTION: Test the Sentry Logging integration by capturing an intentional error and logging information.

LANGUAGE: dart
CODE:
import 'package:logging/logging';

void main() async {
  final log = Logger('MyAwesomeLogger');

  log.info('a breadcrumb!');

  try {
    throw StateError();
  } catch (error, stackTrace) {
    log.severe('an error!', error, stackTrace);
  }
}

----------------------------------------

TITLE: Implementing Custom Event Processor
DESCRIPTION: Example of creating a custom event processor that can modify or filter Sentry events before they are sent.

LANGUAGE: java
CODE:
@Component
public class CustomEventProcessor implements EventProcessor {
  @Override
  public SentryEvent process(SentryEvent event, Hint hint) {
    // modify the event or return null to drop it
    return event;
  }
}

LANGUAGE: kotlin
CODE:
@Component
class CustomEventProcessor : EventProcessor {
  override fun process(event: SentryEvent, hint: Hint): SentryEvent? {
    // modify the event or return null to drop it
    return event
  }
}

----------------------------------------

TITLE: Configuring Langchain Integration Options
DESCRIPTION: Example showing how to customize the Langchain integration with specific options like prompt inclusion, span limits, and token encoding.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.langchain import LangchainIntegration

sentry_sdk.init(
    # ...
    integrations=[
        LangchainIntegration(
            include_prompts=False,  # LLM/tokenizer inputs/outputs will be not sent to Sentry, despite send_default_pii=True
            max_spans=500,
            tiktoken_encoding_name="cl100k_base",
        ),
    ],
)

----------------------------------------

TITLE: Installing Sentry Hive Dependencies in Flutter
DESCRIPTION: Package dependencies configuration in pubspec.yaml for setting up Sentry Hive instrumentation.

LANGUAGE: yaml
CODE:
dependencies:
sentry_flutter: ^{{@inject packages.version('sentry.dart.flutter', '7.13.1') }}
sentry_hive: ^{{@inject packages.version('sentry.dart.hive', '7.13.1') }}
path_provider: ^2.0.0

----------------------------------------

TITLE: Adding a Python Package Using Command Line
DESCRIPTION: This command adds a new Python package to the project's dependencies. It can be used to add the latest version or a specific version of a package.

LANGUAGE: bash
CODE:
python3 -m add_pkg PKGNAME

LANGUAGE: bash
CODE:
python3 -m add_pkg PKGNAME==PKGVERSION

----------------------------------------

TITLE: Setting Tags in Sentry Native SDK - C Implementation
DESCRIPTION: Shows how to set a tag in Sentry's Native SDK using the sentry_set_tag function. The example demonstrates setting a 'birthday' tag with a hashed or checksummed value. Requires the Sentry SDK header to be included.

LANGUAGE: c
CODE:
#include <sentry.h>

sentry_set_tag("birthday", checksum_or_hash("08/12/1990"));

----------------------------------------

TITLE: Initializing Sentry SDK with Sample Rate in Swift
DESCRIPTION: Demonstrates how to initialize the Sentry SDK in Swift with a 25% sampling rate. The code imports the Sentry module and configures the SDK using a closure to set options.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.sampleRate = 0.25
}

----------------------------------------

TITLE: Configuring Next.js with Sentry (CommonJS)
DESCRIPTION: Extends Next.js configuration to include Sentry options using withSentryConfig in CommonJS format.

LANGUAGE: JavaScript
CODE:
const { withSentryConfig } = require("@sentry/nextjs");

const nextConfig = {
  // Your existing Next.js configuration
};

// Make sure adding Sentry options is the last code to run before exporting
module.exports = withSentryConfig(nextConfig, {
  org: "___ORG_SLUG___",
  project: "___PROJECT_SLUG___",

  // Only print logs for uploading source maps in CI
  // Set to `true` to suppress logs
  silent: !process.env.CI,

  // Automatically tree-shake Sentry logger statements to reduce bundle size
  disableLogger: true,
});

----------------------------------------

TITLE: Serving Production Build
DESCRIPTION: Command to serve the production build using npx serve.

LANGUAGE: bash
CODE:
npx serve build

----------------------------------------

TITLE: Injecting Trace Headers into Outgoing HTTP Requests with Guzzle
DESCRIPTION: Shows how to add Sentry tracing headers to outgoing HTTP requests using the Guzzle HTTP client. Uses getTraceparent() and getBaggage() functions to generate the necessary tracing information.

LANGUAGE: php
CODE:
$client = new GuzzleHttp\Client();
$res = $client->request('GET', 'https://example.com', [
    'headers' => [
        'baggage' => \Sentry\getBaggage(),
        'sentry-trace' => \Sentry\getTraceparent(),
    ]
]);


----------------------------------------

TITLE: Compiling Hermes Bytecode for iOS
DESCRIPTION: Commands to compile Hermes bytecode bundle and source maps for iOS. This uses the hermesc compiler from the iOS Pods to generate a binary output and source map.

LANGUAGE: bash
CODE:
ios/Pods/hermes-engine/destroot/bin/hermesc \
  -O -emit-binary \
  -output-source-map \
  -out=main.jsbundle.hbc \
  main.jsbundle
rm -f main.jsbundle
mv main.jsbundle.hbc main.jsbundle

----------------------------------------

TITLE: Masking Priority Examples
DESCRIPTION: Illustrates masking priority rules where Mask components take precedence over Unmask components regardless of nesting order.

LANGUAGE: jsx
CODE:
<Sentry.Mask>
  <Text>This will be masked</Text>
  <Sentry.Unmask>
    <Text>This will be masked</Text>
  </Sentry.Unmask>
</Sentry.Mask>

LANGUAGE: jsx
CODE:
<Sentry.Unmask>
  <Sentry.Mask>
    <Text>This will be masked</Text>
  </Sentry.Mask>
</Sentry.Unmask>

----------------------------------------

TITLE: Setting Custom Exception Fingerprint in F#
DESCRIPTION: F# implementation of Sentry SDK's BeforeSend callback that sets a custom fingerprint for SQL connection exceptions using pattern matching. Provides the same functionality as the C# version but in a more functional style.

LANGUAGE: fsharp
CODE:
// Add this to the SDK initialization callback
options.SetBeforeSend(fun event ->
    match event.Exception with
    | :? SqlConnectionException -> event.SetFingerprint(["database-connection-error"])
    | _ -> ()

    event
    )

----------------------------------------

TITLE: Installing Sentry Wizard for Android SDK Setup
DESCRIPTION: Command to install Sentry Wizard using Homebrew and run it to configure the Android SDK in a project.

LANGUAGE: bash
CODE:
brew install getsentry/tools/sentry-wizard && sentry-wizard -i android

----------------------------------------

TITLE: Setting HTTP Span Data in Python
DESCRIPTION: Example of setting HTTP query data on a span using Python. Shows the proper method for adding URL query information to spans.

LANGUAGE: python
CODE:
span.set_data("http.query", query)

----------------------------------------

TITLE: Setting Error Level for Specific Scope in Sentry (JavaScript)
DESCRIPTION: This snippet illustrates how to set the error level for a specific scope using Sentry's withScope() function. It allows setting different levels for different parts of the code execution.

LANGUAGE: javascript
CODE:
Sentry.withScope(function (scope) {
  scope.setLevel("info");

  // The exception has the event level set by the scope (info).
  Sentry.captureException(new Error("custom error"));
});

// Outside of withScope, the Event level will have their previous value restored.
// The exception has the event level set (error).
Sentry.captureException(new Error("custom error 2"));

----------------------------------------

TITLE: Wrapping Lambda Handler with Sentry
DESCRIPTION: Code snippet showing how to wrap an AWS Lambda handler function with Sentry error monitoring.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/aws-serverless";

export const handler = Sentry.wrapHandler(async (event, context) => {
  // Your handler code
});

----------------------------------------

TITLE: Capturing Exceptions with Sentry in TypeScript/Angular
DESCRIPTION: Shows how to catch and report errors using Sentry's captureException() method. The code demonstrates proper error handling within a try-catch block, where the caught error is sent to Sentry for monitoring and debugging purposes.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/angular";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: URL3 Version Constraint for AWS Lambda - Python
DESCRIPTION: Dependency constraint needed for older Python runtimes in AWS Lambda to avoid OpenSSL compatibility issues with urllib3.

LANGUAGE: python
CODE:
urllib3<1.27

----------------------------------------

TITLE: Configuring Svelte Compiler Options for Source Maps
DESCRIPTION: This snippet shows how to set up the Svelte compiler options to enable source map generation. It uses the 'svelte-preprocess' package and sets 'enableSourcemap' and 'sourceMap' to true.

LANGUAGE: JavaScript
CODE:
import sveltePreprocess from "svelte-preprocess";

const config = {
  compilerOptions: {
    enableSourcemap: true,
  },
  preprocess: sveltePreprocess({
    sourceMap: true,
  }),
};

export default config;

----------------------------------------

TITLE: Configuring Svelte Compiler Options for Source Maps
DESCRIPTION: This snippet shows how to set up the Svelte compiler options to enable source map generation. It uses the 'svelte-preprocess' package and sets 'enableSourcemap' and 'sourceMap' to true.

LANGUAGE: JavaScript
CODE:
import sveltePreprocess from "svelte-preprocess";

const config = {
  compilerOptions: {
    enableSourcemap: true,
  },
  preprocess: sveltePreprocess({
    sourceMap: true,
  }),
};

export default config;

----------------------------------------

TITLE: Initializing OpenFeature with Sentry - Track Single Client
DESCRIPTION: Configures Sentry with OpenFeature integration to track feature flag evaluations for a specific client instance. Demonstrates how to initialize Sentry, set up the provider, and add hooks to a single OpenFeature client.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solidstart';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Configuring Sentry Options in Symfony YAML
DESCRIPTION: This YAML snippet configures Sentry options in a Symfony project, specifically setting up a 'before_send' callback service. It defines the service class and factory method for the callback.

LANGUAGE: yaml
CODE:
sentry:
    options:
        before_send: 'sentry.callback.before_send'

services:
    sentry.callback.before_send:
        class: 'App\Service\Sentry'
        factory: [ '@App\Service\Sentry', 'getBeforeSend' ]

----------------------------------------

TITLE: Generating Metro Bundle and Source Maps for iOS
DESCRIPTION: Command to generate the React Native Packager (Metro) bundle and source maps for iOS platform using react-native CLI.

LANGUAGE: bash
CODE:
npx react-native bundle \
  --dev false \
  --minify false \
  --platform ios \
  --entry-file index.js \
  --reset-cache \
  --bundle-output main.jsbundle \
  --sourcemap-output main.jsbundle.map

----------------------------------------

TITLE: Manual Error Reporting
DESCRIPTION: Demonstrates how to manually capture and report errors using try-catch blocks and Raven.captureException().

LANGUAGE: javascript
CODE:
try {\n  doSomething(a[0]);\n} catch (e) {\n  Raven.captureException(e);\n}

----------------------------------------

TITLE: Importing and Using Sentry Metrics Abstraction in Python
DESCRIPTION: Demonstrates how to import and use Sentry's metrics abstraction for emitting counters, distributions, and gauges. It also shows how to measure execution time of a function.

LANGUAGE: python
CODE:
from sentry.utils import metrics

# Emit a counter.
metrics.incr(
	"counter_name",
	tags={"platform": platform}
)

# Emit a distribution.
metrics.distribution(
	"gauge_name",
	10,
	tags={"nation": nation},
	unit="second",
)

# Emit a gauge.
metrics.gauge(
	"gauge_name",
	10,
	tags={"nation": nation}
)

# Emit a distribution (with default time-based unit).
metrics.timing(
	"distribution_name",
	100,
	tags={"user_segment": user_segment}
)

# Emit a distribution metric of the execution time of the function.
with metrics.timer("my_func"):
	my_func()

----------------------------------------

TITLE: Adding File Attachment to Sentry Scope in C#
DESCRIPTION: This snippet configures the Sentry SDK scope to include a file attachment. It uses the Path.Combine method to create the file path, combining Application.persistentDataPath with the filename 'file.log'.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.AddAttachment(Path.Combine(Application.persistentDataPath, "file.log"));
});

----------------------------------------

TITLE: Initializing Sentry with Custom Options in Go
DESCRIPTION: This code initializes Sentry with custom client options, specifically setting the TracesSampleRate to 0.2. The initialization is done using the sentry.Init function, which returns an error that should be handled appropriately.

LANGUAGE: go
CODE:
err := sentry.Init(sentry.ClientOptions{
	// ...
	TracesSampleRate: 0.2,
})

----------------------------------------

TITLE: Adding Sentry Build Hook in React Router Config
DESCRIPTION: Include the sentryOnBuildEnd hook in react-router.config.ts to handle source map uploads at the end of the build process.

LANGUAGE: typescript
CODE:
import type { Config } from '@react-router/dev/config';
import { sentryOnBuildEnd } from '@sentry/react-router';

export default {
  ssr: true,
  buildEnd: async ({ viteConfig, reactRouterConfig, buildManifest }) => {
    // ...
    // Call this at the end of the hook
    await sentryOnBuildEnd({ viteConfig, reactRouterConfig, buildManifest });
  },
} satisfies Config;

----------------------------------------

TITLE: Configuring Sentry CLI Options in Unity
DESCRIPTION: Configuration options for Sentry CLI in Unity SDK to control debug symbol uploads, source uploads, authentication, and error handling. These options are configured programmatically during the build process.

LANGUAGE: csharp
CODE:
// Configuration options include:
// upload-symbols: bool - Enable/disable automatic debug symbol uploads
// upload-development-symbols: bool - Enable/disable debug symbol uploads for development builds
// upload-sources: bool - Enable/disable automatic source file uploads
// url-override: string - Custom Sentry URL for self-hosted instances
// auth: string - Authentication token for Sentry
// organization: string - Sentry organization name
// project: string - Sentry project name
// ignore-cli-errors: bool - Controls whether CLI exits on errors

----------------------------------------

TITLE: Defining Span Status in JSON
DESCRIPTION: Demonstrates setting the optional status attribute to describe the outcome of the span or transaction.

LANGUAGE: json
CODE:
{
  "status": "ok"
}

----------------------------------------

TITLE: Setting Up Sentry Tracing Middleware in ASP.NET Core
DESCRIPTION: This code snippet shows how to manually add Sentry tracing middleware in an ASP.NET Core application using WebApplicationBuilder. It configures Sentry with a DSN and trace sample rate, and adds the UseSentryTracing middleware.

LANGUAGE: csharp
CODE:
var builder = WebApplication.CreateBuilder(args);
builder.WebHost.UseSentry(o =>
{
    o.Dsn = "___PUBLIC_DSN___";
    o.TracesSampleRate = 1.0;
    // Add any other configuration options
});
var app = builder.Build();
app.UseRouting();
app.UseSentryTracing();
// Add any other Middleware
app.Run();

----------------------------------------

TITLE: Using Explicit Tag Syntax in Sentry Search
DESCRIPTION: Shows the syntax for searching reserved keywords used as tags in Sentry. This special syntax is necessary to avoid conflicts with system-defined fields.

LANGUAGE: plaintext
CODE:
tags[project_id]:tag_value

----------------------------------------

TITLE: Minimal Project Configuration in JSON
DESCRIPTION: Basic required configuration fields for a Sentry Relay project including project slug, public key configuration, and allowed domains settings.

LANGUAGE: json
CODE:
{
  "slug": "my-project",
  "publicKeys": [
    {
      "publicKey": "<DSN_KEY>",
      "isEnabled": true
    }
  ],
  "config": {
    "allowedDomains": ["*"]
  }
}

----------------------------------------

TITLE: Production TypeScript Configuration with Source Maps
DESCRIPTION: Extended TypeScript configuration for production builds that enables source map generation with inline sources and custom source root configuration.

LANGUAGE: json
CODE:
{
  "extends": "./tsconfig",
  "compilerOptions": {
    "sourceMap": true,
    "inlineSources": true,
    "sourceRoot": "/"
  }
}

----------------------------------------

TITLE: Using FileInputStream and FileOutputStream in Java
DESCRIPTION: This snippet demonstrates the standard way of reading from one file and writing to another using FileInputStream and FileOutputStream in Java. It reads the content in chunks using a buffer.

LANGUAGE: java
CODE:
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

File file1 = new File("file1.txt");
File file2 = new File("file2.txt");
try (FileInputStream fis = new FileInputStream(file1)) {
  byte[] buffer = new byte[1024];
  try (FileOutputStream fos = new FileOutputStream(file2)) {
    int read;
    while (true) {
      read = fis.read(buffer);
      if (read == -1) {
        break;
      }
      fos.write(buffer, 0, read);
    }
  }
}

----------------------------------------

TITLE: Using Sentry Hub with Negroni Middleware
DESCRIPTION: Example showing how to use Sentry Hub within Negroni middleware for custom error tracking and tag management.

LANGUAGE: go
CODE:
app := negroni.Classic()

app.Use(sentrynegroni.New(sentrynegroni.Options{
	Repanic: true,
}))

app.Use(negroni.HandlerFunc(func(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
	hub := sentry.GetHubFromContext(r.Context())
	hub.Scope().SetTag("someRandomTag", "maybeYouNeedIt")
	next(rw, r)
}))

mux := http.NewServeMux()

mux.HandleFunc("/", func(rw http.ResponseWriter, r *http.Request) {
	hub := sentry.GetHubFromContext(r.Context())
	hub.WithScope(func(scope *sentry.Scope) {
		scope.SetExtra("unwantedQuery", "someQueryDataMaybe")
		hub.CaptureMessage("User provided unwanted query string, but we recovered just fine")
	})
	rw.WriteHeader(http.StatusOK)
})

mux.HandleFunc("/foo", func(rw http.ResponseWriter, r *http.Request) {
	// sentrynagroni handler will catch it just fine. Also, because we attached "someRandomTag"
	// in the middleware before, it will be sent through as well
	panic("y tho")
})

app.UseHandler(mux)

http.ListenAndServe(":3000", app)

----------------------------------------

TITLE: Configuring Sentry Webpack Plugin
DESCRIPTION: JavaScript configuration for webpack.config.js to include the Sentry webpack plugin for source map uploading, specifying organization, project, and authentication details.

LANGUAGE: javascript
CODE:
const { sentryWebpackPlugin } = require("@sentry/webpack-plugin");

module.exports = {
  devtool: "source-map",
  plugins: [
    sentryWebpackPlugin({
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",
      authToken: process.env.SENTRY_AUTH_TOKEN,
    }),
  ],
};

----------------------------------------

TITLE: Installing Sentry Vue Package with pnpm
DESCRIPTION: This snippet shows how to add the @sentry/vue package to a project using pnpm. The command will install the package and update the project's dependencies accordingly.

LANGUAGE: bash
CODE:
pnpm add @sentry/vue

----------------------------------------

TITLE: Setting Diagnostic Level in Version 7.x
DESCRIPTION: Demonstrates how to configure diagnostic logging level in version 7.x of the SDK.

LANGUAGE: swift
CODE:
SentrySDK.start { options in
  options.diagnosticLevel = SentryLevel.debug
}

----------------------------------------

TITLE: Initializing Sentry and Lazily Loading Replay Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry without the Replay integration, and then dynamically import and add the Replay integration at a later time. This approach can be useful for optimizing initial load times in Gatsby projects.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Note, Replay is NOT instantiated below:
  integrations: [],
});

// Sometime later
import("@sentry/gatsby").then(lazyLoadedSentry => {
  Sentry.addIntegration(lazyLoadedSentry.replayIntegration());
});

----------------------------------------

TITLE: Configuring Podfile for APPLICATION_EXTENSION_API_ONLY
DESCRIPTION: Post-install script for Podfile to fix conflicts with APPLICATION_EXTENSION_API_ONLY setting for Sentry.

LANGUAGE: ruby
CODE:
post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      if target.name == 'Sentry'
        config.build_settings['APPLICATION_EXTENSION_API_ONLY'] = 'YES'
      else
        # configuration for other targets
      end
    end
  end
end

----------------------------------------

TITLE: Starting a New Trace in JavaScript with Sentry SDK
DESCRIPTION: This code snippet shows how to manually start a new trace using Sentry's 'startNewTrace' function. It creates a new trace that remains valid throughout the duration of a callback, disconnected from the current distributed trace.

LANGUAGE: javascript
CODE:
myButton.addEventListener("click", async () => {
  Sentry.startNewTrace(() => {
    Sentry.startSpan(
      { op: "ui.interaction.click", name: "fetch click" },
      async () => {
        await fetch("http://example.com");
      }
    );
  });
});

----------------------------------------

TITLE: Accessing WSGI Environment in Bottle Integration for Sentry (Python)
DESCRIPTION: This snippet demonstrates the structure of the additional sampling context provided by the Bottle integration. It includes the WSGI request 'environ' object, which contains parsed URL data useful for transaction naming when the URL hasn't been resolved to a route yet.

LANGUAGE: python
CODE:
{
  # This can be useful for cases in which the transaction starts before the URL
  # is resolved into a route (meaning the transaction's name won't help much),
  # as it contains parsed URL data
  "wsgi_environ": <dict>
}

----------------------------------------

TITLE: Implementing Timer Metrics
DESCRIPTION: Example of implementing timer metrics to measure code execution duration.

LANGUAGE: Kotlin
CODE:
Sentry.metrics().timing("load_user_profile") {
    // db.load() ...
}

LANGUAGE: Java
CODE:
Sentry.metrics().timing("load_user_profile", () -> {
    // db.load() ...
});

----------------------------------------

TITLE: Installing Sentry Laravel Package
DESCRIPTION: Use Composer to install the sentry/sentry-laravel package for Laravel Lumen integration.

LANGUAGE: bash
CODE:
composer require sentry/sentry-laravel

----------------------------------------

TITLE: Starting Siloed Django Shells
DESCRIPTION: Commands to start Django shells in control and region silo modes for development.

LANGUAGE: shell
CODE:
# Start a control silo shell
SENTRY_SILO_DEVSERVER=1 SENTRY_SILO_MODE=CONTROL getsentry django shell

# Start a region silo shell
SENTRY_SILO_DEVSERVER=1 SENTRY_SILO_MODE=REGION SENTRY_REGION=us getsentry django shell

----------------------------------------

TITLE: Importing Sentry Instrumentation in Custom Express Server
DESCRIPTION: TypeScript code to import Sentry instrumentation file in a custom Express server for a Remix application.

LANGUAGE: typescript
CODE:
// import the Sentry instrumentation file before anything else.
import "./instrument.server.mjs";
// alternatively `require('./instrument.server.cjs')`

// ...

const app = express();

// ...

----------------------------------------

TITLE: Adding File Attachment in F#
DESCRIPTION: Shows how to add a file attachment to the current Sentry scope using F#. Uses the ConfigureScope method with a function expression to modify the scope and attach a file.

LANGUAGE: fsharp
CODE:
SentrySdk.ConfigureScope(
  fun scope ->
    // Add a file attachment to the current scope
    scope.AddAttachment("your/path/file.log")
)

----------------------------------------

TITLE: Using Raven Context and Wrap Functions
DESCRIPTION: Examples of using Raven.context and Raven.wrap for exception handling and context management. Shows how to handle callbacks and set context data.

LANGUAGE: javascript
CODE:
Raven.context(function () {
  doSomething(a[0]);
});

LANGUAGE: javascript
CODE:
var doIt = function () {
  // doing cool stuff
};

setTimeout(Raven.wrap(doIt), 1000);

LANGUAGE: javascript
CODE:
Raven.setContext({
  user: {
    username: "lewis",
  },
});

Raven.mergeContext({
  tags: {
    component: "api",
  },
});

console.log(Raven.getContext());
// { user: ..., tags: ... }

----------------------------------------

TITLE: Starting a Sentry Transaction in Ruby
DESCRIPTION: Creates and starts a new transaction in Sentry for performance monitoring. The transaction is named 'Search from navbar' and explicitly set to be sampled. This is typically used to track performance of user-initiated actions.

LANGUAGE: ruby
CODE:
Sentry.start_transaction(
  name: "Search from navbar",
  sampled: true
)

----------------------------------------

TITLE: Clearing Context in Go
DESCRIPTION: Shows how to clear all context information (HTTP, Tags, and User) by setting them to Nil.

LANGUAGE: go
CODE:
raven.ClearContext()

----------------------------------------

TITLE: Server-Side gRPC Propagation with Sentry in JavaScript
DESCRIPTION: This example demonstrates manual instrumentation for gRPC on the server-side using Sentry. It includes a gRPC server interceptor that extracts Sentry trace headers, continues the trace, creates spans for gRPC calls, and handles error capturing.

LANGUAGE: javascript
CODE:
// gRPC server interceptor with Sentry instrumentation
function sentryInterceptor(methodDescriptor, nextCall) {
  // Extract Sentry trace headers from the incoming metadata
  const metadata = nextCall.metadata.getMap();
  const sentryTrace = metadata['sentry-trace'];
  const baggage = metadata['baggage'];

  return new grpc.ServerInterceptingCall(nextCall, {
    start: (next) => {
      // Continue the trace using the extracted context
      Sentry.continueTrace({ sentryTrace, baggage }, () => {
        // Create a manual span that won't auto-close until we end it
        Sentry.startSpanManual(
          {
            name: methodDescriptor.path,
            op: 'grpc.server',
            forceTransaction: true, // Make this a transaction in the Sentry UI
            attributes: {
              'grpc.method': methodDescriptor.path,
              'grpc.service': methodDescriptor.service.serviceName,
              'grpc.status_code': grpc.status.OK,
            },
          },
          (span) => {
            // Store the span for later use
            nextCall.sentrySpan = span;
            next();
          }
        );
      });
    },
    sendStatus: (status, next) => {
      const span = nextCall.sentrySpan;
      if (span) {
        // Update status based on the gRPC result
        if (status.code !== grpc.status.OK) {
          span.setStatus({ code: 'error' });
          span.setAttribute('grpc.status_code', status.code);
          span.setAttribute('grpc.status_description', status.details);
        }
        // End the span when the call completes
        span.end();
      }
      next(status);
    }
  });
}

// Add the interceptor to your gRPC server
const server = new grpc.Server({
  interceptors: [sentryInterceptor]
});

// In your service implementation, use the active span
const serviceImplementation = {
  myMethod: async (call, callback) => {
    try {
      const span = call.call?.nextCall?.sentrySpan;
      
      // Use withActiveSpan to make the span active during service execution
      await Sentry.withActiveSpan(span, async () => {
        // Create child spans for operations within the service
        await Sentry.startSpan({ name: 'database.query', op: 'db' }, async (childSpan) => {
          // Database operations here
          const result = await database.query('SELECT * FROM table');
          childSpan.setAttribute('db.rows_affected', result.rowCount);
        });
        
        callback(null, { result: 'success' });
      });
    } catch (error) {
      // Capture the error with the current span as context
      Sentry.captureException(error);
      callback(error);
    }
  }
};

----------------------------------------

TITLE: ELF Debug Image Example in JSON
DESCRIPTION: Example showing the structure of an ELF debug image used on Linux platforms, including code identifiers and memory layout information.

LANGUAGE: json
CODE:
{
  "type": "elf",
  "code_id": "68220ae2c65d65c1b6aaa12fa6765a6ec2f5f434",
  "code_file": "/lib/x86_64-linux-gnu/libgcc_s.so.1",
  "debug_id": "e20a2268-5dc6-c165-b6aa-a12fa6765a6e",
  "image_addr": "0x7f5140527000",
  "image_size": 90112,
  "image_vmaddr": "0x40000",
  "arch": "x86_64"
}

----------------------------------------

TITLE: Manually Instrumenting Server-only Load Functions with Sentry in SvelteKit
DESCRIPTION: Wraps a server-only load function with Sentry instrumentation for error tracking and performance monitoring.

LANGUAGE: javascript
CODE:
import { wrapServerLoadWithSentry } from "@sentry/sveltekit";

export const load = wrapServerLoadWithSentry(({ fetch }) => {
  const res = await fetch("/api/data");
  const data = await res.json();
  return { data };
});

----------------------------------------

TITLE: Initializing Sentry in Kotlin Application
DESCRIPTION: This code snippet shows how to manually initialize Sentry within a Kotlin application. It sets the DSN and configures the traces sample rate.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.init { options ->
  options.dsn = "___PUBLIC_DSN___"
  options.tracesSampleRate = 1.0
}

----------------------------------------

TITLE: Implementing Sentry Scope Management in Java
DESCRIPTION: Example showing how to configure Sentry scope with user information, breadcrumbs, and additional context data. Demonstrates setting user details, recording breadcrumbs, adding extra data and tags, and capturing events with the configured scope.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.protocol.User;

public class MyClass {

  public void example() {
    // Note that all fields set on the scope are optional. Scope data is copied onto
    // all future events in the current scope.

    // Set the current user in the scope.
    Sentry.configureScope(scope -> {
      User user = new User();
      user.setUsername("user1");
      scope.setUser(user);
    });

    // Record a breadcrumb in the scope.
    Sentry.addBreadcrumb("User did something specific again!");

    // Add extra data to future events in this scope.
    Sentry.configureScope(scope -> {
      scope.setExtra("extra", "thing");
    });

    // Add an additional tag to future events in this scope.
    Sentry.configureScope(scope -> {
      scope.setTag("tagName", "tagValue");
    });

    // Send an event with the scope data attached.
    Sentry.captureMessage("New event message");
  }
}

----------------------------------------

TITLE: Implementing Sentry Scope Management in Java
DESCRIPTION: Example showing how to configure Sentry scope with user information, breadcrumbs, and additional context data. Demonstrates setting user details, recording breadcrumbs, adding extra data and tags, and capturing events with the configured scope.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.protocol.User;

public class MyClass {

  public void example() {
    // Note that all fields set on the scope are optional. Scope data is copied onto
    // all future events in the current scope.

    // Set the current user in the scope.
    Sentry.configureScope(scope -> {
      User user = new User();
      user.setUsername("user1");
      scope.setUser(user);
    });

    // Record a breadcrumb in the scope.
    Sentry.addBreadcrumb("User did something specific again!");

    // Add extra data to future events in this scope.
    Sentry.configureScope(scope -> {
      scope.setExtra("extra", "thing");
    });

    // Add an additional tag to future events in this scope.
    Sentry.configureScope(scope -> {
      scope.setTag("tagName", "tagValue");
    });

    // Send an event with the scope data attached.
    Sentry.captureMessage("New event message");
  }
}

----------------------------------------

TITLE: Custom Panic Recovery with Flush Control
DESCRIPTION: Advanced implementation using explicit recovery and flush control. This approach allows for custom handling before capturing the panic and ensures events are properly delivered using sentry.Flush.

LANGUAGE: go
CODE:
func() {
	defer func() {
		err := recover()

		if err != nil {
			sentry.CurrentHub().Recover(err)
			sentry.Flush(time.Second * 5)
		}
	}()

	// do all of the scary things here
}()

----------------------------------------

TITLE: Sentry Span Start Timestamp - ISO 8601 Format
DESCRIPTION: Example showing the start_timestamp field using RFC 3339 formatted date string. This represents when span measurement began.

LANGUAGE: json
CODE:
{
    "start_timestamp": "2011-05-02T17:41:36.242Z"
  }

----------------------------------------

TITLE: Package Conflict Error Message
DESCRIPTION: Error message showing ambiguous method call between two Sentry DiagnosticSource implementations, indicating a package conflict between built-in and separate DiagnosticSource packages.

LANGUAGE: text
CODE:
The call is ambiguous between the following methods or properties:
Sentry.SentryOptionsExtensions.DisableDiagnosticSourceIntegration(Sentry.SentryOptions)
and Sentry.SentryOptionsDiagnosticExtensions.DisableDiagnosticSourceIntegration(Sentry.SentryOptions)

----------------------------------------

TITLE: Rendering Onboarding Option Buttons in JSX
DESCRIPTION: This snippet demonstrates how to use the OnboardingOptionButtons component with predefined options for error monitoring, performance, and OpenTelemetry (pre-checked).

LANGUAGE: jsx
CODE:
<OnboardingOptionButtons
  options={["error-monitoring", "performance", {id: "opentelemetry", checked: true}]}
/>

----------------------------------------

TITLE: Configuring Privacy Settings for Session Replay
DESCRIPTION: Disabling default masking settings for text and images in Session Replay through both Kotlin and AndroidManifest.

LANGUAGE: kotlin
CODE:
options.sessionReplay.maskAllText = false
options.sessionReplay.maskAllImages = false

LANGUAGE: xml
CODE:
<meta-data android:name="io.sentry.session-replay.mask-all-text" android:value="false" />
<meta-data android:name="io.sentry.session-replay.mask-all-images" android:value="false" />

----------------------------------------

TITLE: Installing Sentry Electron SDK
DESCRIPTION: Commands for installing the @sentry/electron package using different package managers.

LANGUAGE: bash
CODE:
npm install @sentry/electron --save

LANGUAGE: bash
CODE:
yarn add @sentry/electron

LANGUAGE: bash
CODE:
pnpm add @sentry/electron

----------------------------------------

TITLE: Installing Sentry Electron SDK
DESCRIPTION: Commands for installing the @sentry/electron package using different package managers.

LANGUAGE: bash
CODE:
npm install @sentry/electron --save

LANGUAGE: bash
CODE:
yarn add @sentry/electron

LANGUAGE: bash
CODE:
pnpm add @sentry/electron

----------------------------------------

TITLE: Setting Release Version in F# Sentry SDK
DESCRIPTION: Sets the release version during SDK initialization using F# syntax. The release version helps track which code version an error occurred in. Format used is 'project-name@version-number'.

LANGUAGE: fsharp
CODE:
// Add this to the SDK initialization callback
options.Release <- "my-project-name@2.3.12"

----------------------------------------

TITLE: Setting Up IP Address Redaction in Sentry (JSON)
DESCRIPTION: Demonstrates the configuration for matching and hashing IP addresses. This rule is capable of identifying any IP address and applies a hash redaction method.

LANGUAGE: json
CODE:
{
  "rules": {
    "hash_ip": {
      "type": "ip",
      "redaction": {
        "method": "hash"
      }
    }
  },
  "applications": {
    "$string": ["hash_ip"]
  }
}

----------------------------------------

TITLE: Verifying Sentry OkHttp Integration
DESCRIPTION: Example code to test the Sentry OkHttp integration by making an HTTP request and capturing a message.

LANGUAGE: kotlin
CODE:
import io.sentry.okhttp.SentryOkHttpEventListener
import io.sentry.okhttp.SentryOkHttpInterceptor
import io.sentry.Sentry
import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.Request

@Throws(IOException::class)
fun run(url: String): String? {
  val request = Request.Builder()
    .url(url)
    .build()

  val bodyStr = client
    .newCall(request)
    .execute()
    .body?.toString()

  Sentry.captureMessage("The Message $bodyStr")

  return bodyStr
}

LANGUAGE: java
CODE:
import io.sentry.okhttp.SentryOkHttpEventListener;
import io.sentry.okhttp.SentryOkHttpInterceptor;
import io.sentry.Sentry;
import java.io.IOException;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.ResponseBody;

String run(String url) throws IOException {
  Request request = new Request.Builder()
    .url(url)
    .build();

  ResponseBody body = client
    .newCall(request)
    .execute()
    .body();

  String bodyStr = body != null ? body.toString() : null;

  Sentry.captureMessage("The Message " + bodyStr);

  return bodyStr;
}

----------------------------------------

TITLE: DigiCert Root Certificate Details
DESCRIPTION: DigiCert root certificate specifications including validity period, serial numbers, and SHA fingerprints for both Global Root CA and Global Root G2 certificates.

LANGUAGE: text
CODE:
DigiCert Global Root CA
Valid until: 10/Nov/2031
Serial Number: 08:3B:E0:56:90:42:46:B1:A1:75:6A:C9:59:91:C7:4A
SHA1 Fingerprint: A8:98:5D:3A:65:E5:E5:C4:B2:D7:D6:6D:40:C6:DD:2F:B1:9C:54:36
SHA256 Fingerprint: 43:48:A0:E9:44:4C:78:CB:26:5E:05:8D:5E:89:44:B4:D8:4F:96:62:BD:26:DB:25:7F:89:34:A4:43:C7:01:61

DigiCert Global Root G2
Valid until: 15/Jan/2038
Serial Number: 03:3A:F1:E6:A7:11:A9:A0:BB:28:64:B1:1D:09:FA:E5
SHA1 Fingerprint: DF:3C:24:F9:BF:D6:66:76:1B:26:80:73:FE:06:D1:CC:8D:4F:82:A4
SHA256 Fingerprint: CB:3C:CB:B7:60:31:E5:E0:13:8F:8D:D3:9A:23:F9:DE:47:FF:C3:5E:43:C1:14:4C:EA:27:D4:6A:5A:B1:CB:5F

----------------------------------------

TITLE: Defining Transaction Spans
DESCRIPTION: Shows the structure of the spans array containing multiple span entries with timing, description, and trace information.

LANGUAGE: json
CODE:
{
  "spans": [
    {
      "start_timestamp": 1588601261.481961,
      "description": "GET /sockjs-node/info",
      "tags": {
        "http.status_code": "200"
      },
      "timestamp": 1588601261.488901,
      "parent_span_id": "b0e6f15b45c36b12",
      "trace_id": "1e57b752bc6e4544bbaa246cd1d05dee",
      "op": "http",
      "data": {
        "url": "http://localhost:8080/sockjs-node/info?t=1588601703755",
        "status_code": 200,
        "type": "xhr",
        "method": "GET"
      },
      "span_id": "b01b9f6349558cd1"
    },
    {
      "start_timestamp": 1588601261.535386,
      "description": "Vue <App>",
      "timestamp": 1588601261.544196,
      "parent_span_id": "9312d0d18bf51736",
      "trace_id": "1e57b752bc6e4544bbaa246cd1d05dee",
      "op": "update",
      "span_id": "b980d4dec78d7344"
    }
  ]
}

----------------------------------------

TITLE: Adding Metrics to All Spans using beforeSendTransaction
DESCRIPTION: Demonstrates how to consistently add metrics across all spans in an application using the beforeSendTransaction callback, including both root span and child span modifications.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSendTransaction(event) {
    // Add metrics to the root span
    event.contexts.trace.data = {
      ...event.contexts.trace.data,
      'app.version': '1.2.3',
      'environment.region': 'us-west-2'
    };

    // Add metrics to all child spans
    event.spans.forEach(span => {
      span.data = {
        ...span.data,
        'app.component_version': '2.0.0',
        'app.deployment_stage': 'production'
      };
    });

    return event;
  }
});

----------------------------------------

TITLE: Installing Sentry Svelte SDK via NPM
DESCRIPTION: Command to install the Sentry SDK for Svelte using NPM package manager. The --save flag adds it to package.json dependencies.

LANGUAGE: bash
CODE:
npm install @sentry/svelte --save

----------------------------------------

TITLE: Adding Spring AOP and AspectJ Dependencies in Maven
DESCRIPTION: XML configuration to include spring-aop and aspectjweaver dependencies required for Sentry transaction capturing.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-aop</artifactId>
</dependency>

<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
</dependency>

----------------------------------------

TITLE: Filtering Transactions with beforeSendTransaction in Ruby
DESCRIPTION: Configure the Sentry SDK to filter transaction events using the beforeSendTransaction callback method. This example shows how to modify or drop transactions based on their data.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  config.before_send_transaction = lambda do |event, hint|
    if hint[:transaction_name] == "GET /api/users"
      nil # Don't send this transaction
    else
      event
    end
  end
end

----------------------------------------

TITLE: Emitting a Timer Metric in Unity with Sentry SDK
DESCRIPTION: This snippet demonstrates how to emit a timer metric using the Sentry SDK. It measures the execution time of a block of code within a using statement.

LANGUAGE: csharp
CODE:
// Measure the time of execution within the using block
using (SentrySdk.Metrics.StartTimer("bingo"))
{
    // Your code goes here
}

----------------------------------------

TITLE: Integrating Sentry Crash-Report Modal in JavaScript
DESCRIPTION: This code snippet demonstrates how to integrate the Sentry Crash-Report modal into a web application. It uses the public DSN for authentication and passes the Event ID generated on the backend.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="user-feedback/example-widget/" />

----------------------------------------

TITLE: Initializing Sentry Edge SDK
DESCRIPTION: Initializes Sentry SDK for edge runtime usage in Next.js, including performance monitoring.

LANGUAGE: JavaScript
CODE:
import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // ...

  // Note: if you want to override the automatic release value, do not set a
  // `release` value here - use the environment variable `SENTRY_RELEASE`, so
  // that it will also get attached to your source maps
});

----------------------------------------

TITLE: Implementing State Transformer
DESCRIPTION: Example of implementing a state transformer to filter and modify sensitive state data before sending to Sentry.

LANGUAGE: javascript
CODE:
createSentryPiniaPlugin({
  stateTransformer: (state) => {
    if (state.topSecret.doNotSend) {
      // Return null to not send this version of the state.
      return null;
    }

    // Transform the state to remove sensitive information
    const transformedState = {
      ...state,
      topSecret: {
        ...state.topSecret,
        // Replace sensitive information with something else
        nuclearLaunchCodes: "I love pizza",
        // or just remove it entirely
        hiddenTreasureLocation: null,
      },
      // You should also remove large data that is irrelevant to debugging to not clutter your Sentry issues
      giganticState: null,
    };

    return transformedState;
  },
});

----------------------------------------

TITLE: Initializing Sentry with CDN Integration in HTML
DESCRIPTION: This snippet demonstrates how to initialize Sentry using CDN integration. It includes script tags for loading the Sentry bundle with tracing and the dedupe integration. The Sentry.init() function is then called with the DSN and deduplication integration.

LANGUAGE: html
CODE:
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/dedupe.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'dedupe.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<script>
  Sentry.init({
    dsn: "___PUBLIC_DSN___",
    integrations: [Sentry.dedupeIntegration()],
  });
</script>

----------------------------------------

TITLE: Installing Sentry Go SDK for Echo
DESCRIPTION: This command installs the Sentry Go SDK for Echo using the go get command.

LANGUAGE: bash
CODE:
go get github.com/getsentry/sentry-go/echo

----------------------------------------

TITLE: Setting BeforeSendTransaction in C# for Sentry SDK
DESCRIPTION: This snippet demonstrates how to set up a BeforeSendTransaction callback in C# for the Sentry SDK. The callback allows for modifying or dropping transactions before they are sent to Sentry.

LANGUAGE: csharp
CODE:
options.SetBeforeSendTransaction((sentryTransaction, hint) =>
{
});

----------------------------------------

TITLE: Updating Existing Data Attributes in Transactions and Spans in PHP
DESCRIPTION: This snippet demonstrates how to update existing data attributes in transactions and spans using Sentry's PHP SDK. It combines the setData() and getData() methods to modify attribute values.

LANGUAGE: php
CODE:
$span->setData([
    'data_attribute_1' => $span->getData('data_attribute_1', 0) + 1,
]);

$transaction->setData([
    'data_attribute_1' => $transaction->getData('data_attribute_1', 0) + 1,
]);

----------------------------------------

TITLE: Configuring Sentry SDK Swizzling in Objective-C
DESCRIPTION: SDK initialization code in Objective-C to exclude specific classes from swizzling or disable swizzling entirely.

LANGUAGE: objc
CODE:
[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
     options.swizzleClassNameExcludes = [NSSet setWithObjects: @"RoomPlanWrapper", nil];
}];

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.enableSwizzling = NO;
}];

----------------------------------------

TITLE: Manually Finishing a Transaction in Sentry Flutter SDK
DESCRIPTION: This code demonstrates how to manually finish a transaction by retrieving the active span and calling the finish method.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

// Finish the transaction manually
final activeTransaction = Sentry.getSpan()
await activeTransaction?.finish();

----------------------------------------

TITLE: Defining Event Type Enumeration in TypeScript
DESCRIPTION: Enum defining the possible types of replay recording events supported by the system.

LANGUAGE: typescript
CODE:
EventTypeEnum {
  DomContentLoaded,
  Load,
  FullSnapshot,
  IncrementalSnapshot,
  Meta,
  Custom,
  Plugin,
}

----------------------------------------

TITLE: Creating Sentry Test Controller in Symfony
DESCRIPTION: Defines a controller to test Sentry integration by logging an error and throwing an exception.

LANGUAGE: php
CODE:
<?php

namespace App\Controller;

use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Attribute\Route;

class SentryTestController extends AbstractController
{
    public function __construct(private LoggerInterface $logger)
    {
    }

    #[Route('/_sentry-test', name: 'sentry_test')]
    public function testLog()
    {
        // the following code will test if monolog integration logs to sentry
        $this->logger->error('My custom logged error.', ['some' => 'Context Data']);

        // the following code will test if an uncaught exception logs to sentry
        throw new \RuntimeException('Example exception.');
    }
}

----------------------------------------

TITLE: Building Production Code with Source Maps
DESCRIPTION: Command to create a production build that generates source maps.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Configuring Sentry Transaction Name
DESCRIPTION: Sets up a Sentry transaction name within a scope using the SentrySdk. This configuration helps in identifying and tracking specific transactions in the Sentry monitoring system by assigning the name 'UserListViewModel' to the current transaction scope.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope => scope.TransactionName = "UserListViewModel");

----------------------------------------

TITLE: Manually Attaching User to Sentry Events in Laravel
DESCRIPTION: This snippet demonstrates how to manually attach user information to Sentry events by listening to Laravel's Authenticated event. It captures the user's id, name, and email.

LANGUAGE: php
CODE:
/**
* Bootstrap any application services.
*/
public function boot(): void
{
    \Illuminate\Support\Facades\Event::listen(function (\Illuminate\Auth\Events\Authenticated $event) {
        $user = $event->user;

        \Sentry\Laravel\Integration::configureScope(static function (Scope $scope) use ($user): void {
            $scope->setUser([
                'id' => $user->id,
                'name' => $user->name,
                'email' => $user->email,
            ]);
        });
    });
}

----------------------------------------

TITLE: Initializing Sentry with Profiles Sampler Function in Electron Renderer
DESCRIPTION: This snippet demonstrates an alternative way to initialize Sentry in an Electron renderer process, using a profilesSampler function instead of a fixed profilesSampleRate. This allows for more granular control over which spans are profiled.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/electron/renderer");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add browser profiling integration to the list of integrations
    Sentry.browserTracingIntegration(),
    Sentry.browserProfilingIntegration(),
  ],
  tracesSampleRate: 1.0,

  // This function will be called for every sampled span
  // to determine if it should be profiled
  profilesSampler: (samplingContext) => {
    return 1.0;
  },
});

----------------------------------------

TITLE: WASM Debug Information Processing
DESCRIPTION: Provides information about DWARF in WASM containers support and the wasm-split tool used for adding build IDs and creating debug companion files.



----------------------------------------

TITLE: Customizing Sentry Navigation Integration for PII Handling
DESCRIPTION: Demonstrates how to customize the Sentry SDK initialization to strip out potential PII data from navigation events.

LANGUAGE: kotlin
CODE:
import io.sentry.EventProcessor
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.BeforeBreadcrumbCallback
import io.sentry.android.navigation.SentryNavigationListener

SentryAndroid.init(this) { options ->
  options.beforeBreadcrumb = BeforeBreadcrumbCallback { breadcrumb, hint ->
    if (SentryNavigationListener.NAVIGATION_OP == breadcrumb.category) {
      breadcrumb.data.remove("from_arguments")
      breadcrumb.data.remove("to_arguments")
    }
    breadcrumb
  }
  options.addEventProcessor(object : EventProcessor {
    override fun process(transaction: SentryTransaction, hint: Hint): SentryTransaction? {
      if (SentryNavigationListener.NAVIGATION_OP == transaction.contexts.trace.operation) {
        transaction.removeExtra("arguments")
      }
      return transaction
    }
  })
}

----------------------------------------

TITLE: PE/PDB Debug Image Example in JSON
DESCRIPTION: Example showing the structure of a PE/PDB debug image used on Windows platforms, including PDB file references and code identifiers.

LANGUAGE: json
CODE:
{
  "type": "pe",
  "code_id": "57898e12145000",
  "code_file": "C:\\Windows\\System32\\dbghelp.dll",
  "debug_id": "9c2a902b-6fdf-40ad-8308-588a41d572a0-1",
  "debug_file": "dbghelp.pdb",
  "image_addr": "0x70850000",
  "image_size": "1331200",
  "image_vmaddr": "0x40000",
  "arch": "x86"
}

----------------------------------------

TITLE: Inserting PageGrid Component in Markdown for Sentry Documentation
DESCRIPTION: This code snippet shows how to insert a PageGrid component into a Sentry documentation page. The PageGrid is likely used for organizing and displaying related documentation topics.

LANGUAGE: markdown
CODE:
<PageGrid />

----------------------------------------

TITLE: Configuring Sentry SDK in Settings File
DESCRIPTION: Basic Sentry SDK initialization with error monitoring, performance tracing, and profiling configuration. Includes DSN setup and sampling rates.

LANGUAGE: python
CODE:
# mysettings.py
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

----------------------------------------

TITLE: Optimized Image Loading in iOS
DESCRIPTION: Improved implementation using preparingForDisplay() method and background queue processing to avoid main thread blocking.

LANGUAGE: swift
CODE:
func showImage(data: Data) {
	DispatchQueue.global(qos: .userInitiated).async {
		let image = UIImage(data: data).preparingForDisplay()
		DispatchQueue.main.async {
			imageView.image = image
		}
	}
}

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Astro
DESCRIPTION: Shows how to implement error handling using Sentry's captureException() method within a try-catch block. The example demonstrates capturing an Error object, though the method can also handle non-Error objects and strings, potentially with limited stack trace information.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/astro";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Configuring Sentry SDK with Performance and Profiling
DESCRIPTION: Python code to initialize Sentry SDK with optional performance monitoring and profiling features. Includes configuration for PII handling and sampling rates.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Send personally-identifiable information like LLM responses to Sentry;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

----------------------------------------

TITLE: Initializing Sentry with Browser Profiling in Svelte (Fixed Sample Rate)
DESCRIPTION: This snippet shows how to initialize Sentry with browser profiling integration using a fixed sample rate. It configures the DSN, integrations, trace sample rate, and profile sample rate.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/svelte";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add browser profiling integration to the list of integrations
    Sentry.browserTracingIntegration(),
    Sentry.browserProfilingIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Set profilesSampleRate to 1.0 to profile every transaction.
  // Since profilesSampleRate is relative to tracesSampleRate,
  // the final profiling rate can be computed as tracesSampleRate * profilesSampleRate
  // For example, a tracesSampleRate of 0.5 and profilesSampleRate of 0.5 would
  // result in 25% of transactions being profiled (0.5*0.5=0.25)
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Health Check Response JSON in Relay
DESCRIPTION: Example JSON response from Relay's health check endpoints. Returns a 200 OK status with a JSON object indicating the healthy state of the system.

LANGUAGE: json
CODE:
{
  "is_healthy": true
}

----------------------------------------

TITLE: Basic Raven.js Configuration
DESCRIPTION: Initializes Raven.js with a Sentry DSN to enable basic error tracking.

LANGUAGE: javascript
CODE:
Raven.config("___PUBLIC_DSN___").install();

----------------------------------------

TITLE: Resulting DOM Node After Sentry Processing
DESCRIPTION: Demonstrates how the DOM node looks after Sentry's Babel plugin has added component and source file attributes.

LANGUAGE: html
CODE:
<div data-sentry-component="MyAwesomeComponent" data-sentry-source-file="myAwesomeComponent.jsx">This is a really cool and awesome component!</div>

----------------------------------------

TITLE: Setting Extra Context Data in Sentry Ruby
DESCRIPTION: Sets additional context information for error tracking by adding a custom field 'character.name' with value 'Mighty Fighter' to Sentry's extra data. This helps provide more detailed information when errors occur.

LANGUAGE: ruby
CODE:
Sentry.set_extras('character.name': 'Mighty Fighter')

----------------------------------------

TITLE: Configuring Relay for GeoIP in Sentry
DESCRIPTION: This YAML configuration snippet shows how to set the path for the GeoLite2-City.mmdb file in the Relay service configuration file (relay/config.yml) for Sentry.

LANGUAGE: yaml
CODE:
processing:
  geoip_path: "/geoip/GeoLite2-City.mmdb"

----------------------------------------

TITLE: Page Configuration in YAML Frontmatter
DESCRIPTION: YAML frontmatter configuration for a documentation page about Sentry JavaScript SDK migration, including title, description, sidebar order, and platform exclusions.

LANGUAGE: yaml
CODE:
---
title: Migration Guide
description: "Migrate from an older version of our Sentry JavaScript SDK."
sidebar_order: 8000
notSupported:
  - javascript.capacitor
  - javascript.cordova
  - javascript.electron
---

----------------------------------------

TITLE: Configuring Trusted Proxies in Ruby Sentry SDK
DESCRIPTION: This code sets up trusted proxies that will be skipped when the SDK computes the user's IP address.

LANGUAGE: ruby
CODE:
config.trusted_proxies = ["2.2.2.2"]

----------------------------------------

TITLE: Initializing Sentry PHP Client
DESCRIPTION: PHP code to create a new Raven client instance for Sentry. The client is initialized with the project's DSN (Data Source Name).

LANGUAGE: php
CODE:
$client = new Raven_Client('___PUBLIC_DSN___');

----------------------------------------

TITLE: Setting traces-sample-rate in Sentry.init() for JavaScript
DESCRIPTION: This snippet demonstrates how to set the traces-sample-rate option in Sentry.init() to control the sampling rate of transactions. The value should be between 0 and 1, representing the percentage of transactions to be recorded and sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Injecting Trace Headers into Outgoing RabbitMQ Messages in C#
DESCRIPTION: Shows how to add Sentry trace and baggage headers to outgoing RabbitMQ messages using SentrySdk.GetTraceHeader() and GetBaggage(). This enables trace propagation to downstream services that also use Sentry.

LANGUAGE: csharp
CODE:
using RabbitMQ.Client;

var factory = new ConnectionFactory()
{
    HostName = "localhost",
    UserName = "guest",
    Password = "guest"
};

using var connection = factory.CreateConnection();
using var channel = connection.CreateModel();

var properties = channel.CreateBasicProperties();
properties.Headers = new Dictionary<string, object>();
properties.Headers.Add("sentry-trace", SentrySdk.GetTraceHeader()?.ToString());
properties.Headers.Add("baggage", SentrySdk.GetBaggage()?.ToString());

channel.BasicPublish(
    exchange: "..",
    routingKey: "...",
    basicProperties: properties,
    body: new ReadOnlyMemory<byte>());

----------------------------------------

TITLE: Capturing Messages with Sentry in Unreal C++
DESCRIPTION: Demonstrates how to capture a message using Sentry's subsystem in Unreal Engine C++. The code gets the Sentry subsystem instance from the engine and uses it to capture a test message.

LANGUAGE: cpp
CODE:
#include "SentrySubsystem.h"

void Verify()
{
    // Capture message
    USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();
    SentrySubsystem->CaptureMessage(TEXT("Capture message"));
}

----------------------------------------

TITLE: Feature Flag Checking in Python
DESCRIPTION: Example of checking feature flags in Python code using the FeatureManager's has method.

LANGUAGE: python
CODE:
if features.has('organizations:test-feature', obj, actor=user):
    feature_list.append('test-feature')

----------------------------------------

TITLE: Defining a Transaction Quota in JSON
DESCRIPTION: This JSON snippet defines a quota for the transaction category with a limit of 0. It is used to demonstrate how transaction quotas affect both transaction and span processing.

LANGUAGE: json
CODE:
{
  "categories": ["transaction"],
  "limit": 0
  // ...
}

----------------------------------------

TITLE: Displaying Attachments Access Denied Image in Markdown
DESCRIPTION: Markdown syntax for embedding an image that shows the attachments access denied state from a relative path.

LANGUAGE: markdown
CODE:
![Attachments Access Denied](./img/attachments-access-denied.png)

----------------------------------------

TITLE: Configuring Session Tracking Interval in Sentry iOS SDK
DESCRIPTION: Example showing how to initialize the Sentry SDK with a custom session tracking interval of 60 seconds (60000 milliseconds). This affects how long the app can be in the background before the session is terminated.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.sessionTrackingIntervalMillis = 60000
}

LANGUAGE: objective-c
CODE:
@import Sentry;

[SentrySDK startWithOptions:@{
    @"dsn": @"___PUBLIC_DSN___",
    @"sessionTrackingIntervalMillis": @60000
}];

----------------------------------------

TITLE: Setting Span Operation Type in Sentry
DESCRIPTION: Example of configuring the 'op' field in a Sentry span to identify the type of operation being measured. This example shows setting the operation type to a database query operation.

LANGUAGE: json
CODE:
{
    "op": "db.query"
  }

----------------------------------------

TITLE: Emitting a Set in PHP with Sentry Metrics
DESCRIPTION: This snippet illustrates how to emit a set metric for tracking unique users viewing a page. It uses the Sentry metrics API to add a value to a set with a custom unit and associated tags.

LANGUAGE: php
CODE:
\Sentry\metrics()->set(
    key: 'user_view',
    value: 'jane',
    unit: \Sentry\Metrics\MetricsUnit::custom('username'),
    tags: [
        'page' => '/home',
    ],
);

----------------------------------------

TITLE: Configuring DSN for Sentry Appender in XML
DESCRIPTION: This XML snippet shows how to configure the DSN (client key) for the Sentry Appender in Logback. It also includes options for sending default PII data.

LANGUAGE: xml
CODE:
<appender name="Sentry" class="io.sentry.logback.SentryAppender">
    <options>
        <!-- NOTE: Replace the test DSN below with your DSN to see the events from this app in sentry.io -->
        <dsn>___PUBLIC_DSN___</dsn>
        <!-- Add data like request headers and IP for users, see https://docs.sentry.io/platforms/java/guides/logback/data-management/data-collected/ for more info -->
        <sendDefaultPii>true</sendDefaultPii>
    </options>
</appender>

----------------------------------------

TITLE: Setting Maximum Send Attempts for Sentry SDK in Elixir
DESCRIPTION: Specifies the maximum number of attempts to send an event to Sentry. This helps in handling network issues or temporary Sentry unavailability.

LANGUAGE: elixir
CODE:
config :sentry,
  send_max_attempts: 3

----------------------------------------

TITLE: Metric Alert Webhook Response Format
DESCRIPTION: Example of the webhook payload format when a metric alert is triggered, showing nested settings structure

LANGUAGE: json
CODE:
{
  "data": {
    "metric_alert": {
      "alert_rule": {
        "triggers": [
          {
            "actions": [
              {
                "settings": [
                  {
                    "name": "title",
                    "value": "Critical Trigger"
                  },
                  {
                    "name": "description",
                    "value": "Critical Description"
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Installing sentry-appengine Dependency with Gradle
DESCRIPTION: This Gradle snippet demonstrates how to add the sentry-appengine dependency to a Gradle project's build.gradle file. It uses the implementation configuration to include the library.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-appengine:1.7.30'

----------------------------------------

TITLE: Enabling Screenshot Capture in Sentry SDK
DESCRIPTION: This code snippet demonstrates how to enable automatic screenshot capture for errors in the Sentry SDK. The exact implementation varies by platform, so a placeholder is used.

LANGUAGE: markup
CODE:
<PlatformContent includePath="enriching-events/attach-screenshots" />

----------------------------------------

TITLE: Emitting a Distribution Metric in Python with Sentry
DESCRIPTION: Shows how to emit a distribution metric for tracking page load times. The example includes specifying the value, unit, and tagging with the page information.

LANGUAGE: python
CODE:
# Add '15.0' to a distribution used for tracking the loading times per page.
sentry_sdk.metrics.distribution(
	key="page_load",
	value=15.0,
	unit="millisecond",
	tags={
		"page": "/home"
	}
)

----------------------------------------

TITLE: Configuring Sentry SDK with Metrics Enabled
DESCRIPTION: This snippet shows how to initialize the Sentry SDK with metrics enabled. It sets the DSN and enables metrics collection.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"

    options.enableMetrics = true
}

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions * options) {
    options.Dsn = @"___PUBLIC_DSN___";

    options.enableMetrics = YES;
}];

----------------------------------------

TITLE: Enabling Auto Session Tracking in C#
DESCRIPTION: Configuration code to enable automatic session tracking in Sentry SDK using C#. Sets the AutoSessionTracking flag to true during SDK initialization.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.AutoSessionTracking = true; // default: false

----------------------------------------

TITLE: Configuring Sentry Target in NLog.config
DESCRIPTION: XML configuration for setting up the Sentry target in NLog.config. Demonstrates how to specify the DSN and release version in the NLog configuration file.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
>
  <extensions>
    <add assembly="Sentry.NLog" />
  </extensions>
  <targets>
    <target
      xsi:type="Sentry"
      name="sentry"
      dsn="___PUBLIC_DSN___"
      release="my-project-name@2.3.12">
    </target>
  </targets>

  <rules>
    <logger name="*" writeTo="sentry" />
  </rules>
</nlog>

----------------------------------------

TITLE: Configuring Credit Card Number Redaction in Sentry (JSON)
DESCRIPTION: Shows how to set up redaction for credit card numbers. This rule is designed to match credit card number patterns and apply a hash redaction method.

LANGUAGE: json
CODE:
{
  "rules": {
    "hash_cc": {
      "type": "creditcard",
      "redaction": {
        "method": "hash"
      }
    }
  },
  "applications": {
    "$string": ["hash_cc"]
  }
}

----------------------------------------

TITLE: React Component Inclusion
DESCRIPTION: JSX/MDX component inclusion for platform-specific distributed tracing documentation content.

LANGUAGE: jsx
CODE:
<PlatformContent includePath="distributed-tracing/custom-instrumentation/" />

----------------------------------------

TITLE: Public Image Reference - Full Path
DESCRIPTION: Example of referencing a public image using its full path from another location.

LANGUAGE: markdown
CODE:
![Issue alert](/product/alerts/issue-alert.png)

----------------------------------------

TITLE: Setting Trace ID in JSON
DESCRIPTION: Illustrates the required trace_id attribute as a 32-character hex string representing 16 random bytes.

LANGUAGE: json
CODE:
{
  "trace_id": "1e57b752bc6e4544bbaa246cd1d05dee"
}

----------------------------------------

TITLE: Deprecated User Report Payload Example in JSON
DESCRIPTION: Legacy format for submitting user feedback, showing the simplified JSON structure with basic user information and comments.

LANGUAGE: json
CODE:
{"event_id":"9ec79c33ec9942ab8353589fcb2e04dc","email":"john@example.com","name":"John Me","comments":"It broke."}

----------------------------------------

TITLE: Initializing Sentry SDK with Release Name in Swift
DESCRIPTION: Demonstrates how to start the Sentry SDK and configure a custom release name using Swift. The release name follows the format 'identifier@version' which is used for identifying specific application versions in crash reports and monitoring.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.releaseName = "io.example.MyApp@1.0.0"
}

----------------------------------------

TITLE: Splitting and Uploading WASM Debug Files with Sentry CLI
DESCRIPTION: Two-step process for handling WebAssembly debug files: First splits the WASM file to separate debug information, then uploads debug files to Sentry project. Shows typical CLI output including confirmation of file processing status.

LANGUAGE: bash
CODE:
wasm-split /path/to/myfile.wasm -d /path/to/myfile.debug.wasm --strip
sentry-cli debug-files upload -o <org> -p <project> /path/to/files

> Found 1 debug information files
> Prepared debug information files for upload
> Uploaded 1 missing debug information files
> File processing complete:

  PENDING 1ddb3423-950a-3646-b17b-d4360e6acfc9 (mylib; wasm debug companion)

----------------------------------------

TITLE: Configuring P6SpyDriver in application.properties
DESCRIPTION: Configure the DataSource to use P6SpyDriver as the JDBC driver in a Spring Boot application's application.properties file.

LANGUAGE: properties
CODE:
spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver

----------------------------------------

TITLE: Querying Webhook Payloads in SQL
DESCRIPTION: SQL queries to find the first message in each mailbox and retrieve mailboxes with messages ready for delivery.

LANGUAGE: sql
CODE:
-- Get the 'first' message in each mailbox
select min(id), mailbox_name
from sentry_webhookpayload
group by mailbox_name

-- Get any mailboxes with messages that can be delivered
select * from sentry_webhookpayload
where id in (...) and schedule_for < current_timestamp

----------------------------------------

TITLE: Configuring Sentry Span with Custom Attributes
DESCRIPTION: Shows how to initialize a Sentry span with a custom name, operation type, and query parameter attributes. Includes a tracesSampler function that demonstrates how to control sampling based on span properties.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'GET /search',
    op: 'search',
    attributes: {
      "queryParam.animal": "dog",
      "queryParam.type": "very good"
    },
  },
);

// Will result in `tracesSampler` receiving:
function tracesSampler(samplingContext) {
  /*
  samplingContext = {
    name: "GET /search",
    attributes: {
      queryForAnimal: "dog",
      queryForType: "very good"
    },
  }
  */

  // Do not sample this specific span
  return name !== 'GET /search';
}

----------------------------------------

TITLE: Adding Test Error Code
DESCRIPTION: Example code modification to generate a test error for Sentry tracking.

LANGUAGE: javascript
CODE:
this.myCodeIsMorePerfect();

----------------------------------------

TITLE: Retrieving and Working with Current Span in Sentry SDK (Python)
DESCRIPTION: This snippet shows how to retrieve the current Span from the Sentry SDK scope in Python. It checks if a span exists, creates a new transaction if not, and demonstrates how to create child spans for existing spans.

LANGUAGE: python
CODE:
import sentry_sdk

span = sentry_sdk.Hub.current.scope.span

if span is None:
    # no span in progress, create new transaction
    with sentry_sdk.start_transaction(name="task"):
        do_task()
else:
    # new task span as child of current span
    with span.start_child(op="task"):
        do_task()

----------------------------------------

TITLE: Manual Installation of Sentry OkHttp Integration
DESCRIPTION: Add the Sentry OkHttp dependency to your project using Gradle for manual installation.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-android:{{@inject packages.version('sentry.java.android', '5.0.0') }}'
implementation 'io.sentry:sentry-okhttp:{{@inject packages.version('sentry.java.okhttp', '5.0.0') }}'

----------------------------------------

TITLE: Initializing Sentry with Signal Handling in C
DESCRIPTION: This snippet demonstrates how to properly initialize Sentry with signal handling. It's crucial to call sentry_init() before registering any custom signal handlers to avoid conflicts.

LANGUAGE: c
CODE:
sentry_init();

// Register your custom signal handlers here, if necessary
// Example:
// signal(SIGSEGV, custom_signal_handler);

// Your application code

sentry_close();

----------------------------------------

TITLE: Initializing Sentry for Node.js
DESCRIPTION: This snippet imports the Sentry module for Node.js and initializes it with a DSN (Data Source Name) and console capture integration. The DSN is a placeholder that should be replaced with the actual project-specific DSN provided by Sentry.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.captureConsoleIntegration()],
});

----------------------------------------

TITLE: Configuring 'mask' PII Redaction Method in Sentry
DESCRIPTION: This snippet illustrates the configuration for the 'mask' method of PII redaction in Sentry. It replaces every character of the matched string with a masking character '*', preserving the original string length.

LANGUAGE: javascript
CODE:
{
  "rules": {
    "mask_ip": {
      "type": "ip",
      "redaction": {
        "method": "mask"
      }
    }
  },
  "applications": {
    "$string": ["mask_ip"]
  }
}

----------------------------------------

TITLE: Emitting a Counter Metric in Symfony with Sentry
DESCRIPTION: This snippet demonstrates how to increment a counter metric for tracking button clicks. It includes tags for browser and app version.

LANGUAGE: php
CODE:
\Sentry\metrics()->increment(
    key: 'button_click',
    value: 1,
    tags: [
        'browser' => 'Firefox',
        'app_version' => '1.0.0',
    ],
)

----------------------------------------

TITLE: Inefficient List Processing in Android
DESCRIPTION: Example showing inefficient list sorting implementation that can cause frame drops.

LANGUAGE: kotlin
CODE:
fun sortEvenOdd(numbers: List<Int>): List<Int> {
    val newList = ArrayList<Int>()
    for (n in numbers) {
        if (n % 2 == 0) {
            val i = newList.indexOfFirst { it % 2 == 1 }
            newList.add(i.takeIf { it != -1 } ?: 0, n)
        } else {
            val i = newList.indexOfLast { it % 2 == 1 }
            newList.add(i.takeIf { it != -1 } ?: newList.size, n)
        }
    }
    return newList
}

----------------------------------------

TITLE: Instrumenting Server-Side Order Processing in JavaScript
DESCRIPTION: Tracks the server-side order processing for an e-commerce application, including order details, payment processing, inventory checks, and fulfillment information. Uses Sentry's startSpan to capture detailed metrics throughout the order processing flow.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Order Processing',
    op: 'commerce.order.server',
    attributes: {
      // Order details
      'order.id': 'ord_123456789',
      'order.total_amount': 159.99,
      'order.currency': 'USD',
      'order.items': ['SKU123', 'SKU456', 'SKU789'],
      
      // Payment processing
      'payment.provider': 'stripe',
      'payment.method': 'credit_card',
      'payment.processing_time_ms': 1200,
      
      // Inventory checks
      'inventory.check_time_ms': 150,
      'inventory.all_available': true,
      
      // Fulfillment
      'fulfillment.warehouse': 'WEST-01',
      'fulfillment.shipping_method': 'express',
      'fulfillment.estimated_delivery': '2024-03-20'
    }
  },
  async () => {
    // Server-side order processing
  }
);

----------------------------------------

TITLE: Setting Sentry SDK Sample Rate in F#
DESCRIPTION: This code snippet demonstrates how to set the sample rate to 25% during Sentry SDK initialization in F#. It should be added to the SDK initialization callback.

LANGUAGE: fsharp
CODE:
// Add this to the SDK initialization callback
options.SampleRate <- 0.25  // Capture 25%

----------------------------------------

TITLE: Initializing Sentry with Browser Profiling in SvelteKit (JavaScript)
DESCRIPTION: This snippet initializes Sentry with browser profiling integration for a SvelteKit application. It sets up transaction tracing, trace propagation targets, and profiling sample rates. The configuration includes options for adjusting sampling rates in production environments.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add browser profiling integration to the list of integrations
    Sentry.browserProfilingIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Set profilesSampleRate to 1.0 to profile every transaction.
  // Since profilesSampleRate is relative to tracesSampleRate,
  // the final profiling rate can be computed as tracesSampleRate * profilesSampleRate
  // For example, a tracesSampleRate of 0.5 and profilesSampleRate of 0.5 would
  // result in 25% of transactions being profiled (0.5*0.5=0.25)
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Setting Sentry Environment Variables
DESCRIPTION: This snippet shows how to set up environment variables for Sentry CLI configuration. It includes the organization slug, project slug, and authentication token.

LANGUAGE: bash
CODE:
SENTRY_ORG=___ORG_SLUG___
SENTRY_PROJECT=___PROJECT_SLUG___
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Migrating Docker Volume Data
DESCRIPTION: Commands for migrating data from old to new Docker volumes, specifically showing the process for PostgreSQL data migration.

LANGUAGE: shell
CODE:
# Create a new postgres volume
docker volume create sentry_postgres-data

# Copy over the data from the old volume
docker run --rm \
  -v sentry_postgres:/old_volume \
  -v sentry_postgres-data:/new_volume \
  ubuntu \
  bash -c "cd /old_volume && cp -a . /new_volume"

# Validate that data has been copied over
docker run --rm -v sentry_postgres-data:/data ubuntu ls -l /data

----------------------------------------

TITLE: Updating EventProcessor Implementation in Kotlin for Sentry 5.0
DESCRIPTION: This snippet demonstrates how to update the EventProcessor implementation when migrating from Sentry 4.3 to 5.0. The new version requires an object implementation instead of a trailing lambda due to the addition of a default method in the EventProcessor interface.

LANGUAGE: kotlin
CODE:
SentryOptions#addEventProcessor { event, _ -> event }

LANGUAGE: kotlin
CODE:
SentryOptions#addEventProcessor(object : EventProcessor {
    override fun process(event: SentryEvent, hint: Hint): SentryEvent? {
        return event
    }
})

----------------------------------------

TITLE: Updating EventProcessor Implementation in Kotlin for Sentry 5.0
DESCRIPTION: This snippet demonstrates how to update the EventProcessor implementation when migrating from Sentry 4.3 to 5.0. The new version requires an object implementation instead of a trailing lambda due to the addition of a default method in the EventProcessor interface.

LANGUAGE: kotlin
CODE:
SentryOptions#addEventProcessor { event, _ -> event }

LANGUAGE: kotlin
CODE:
SentryOptions#addEventProcessor(object : EventProcessor {
    override fun process(event: SentryEvent, hint: Hint): SentryEvent? {
        return event
    }
})

----------------------------------------

TITLE: Installing Sentry.AspNetCore NuGet Package
DESCRIPTION: Add the Sentry dependency to your ASP.NET Core project using various package management tools.

LANGUAGE: powershell
CODE:
Install-Package Sentry.AspNetCore -Version {{@inject packages.version('sentry.dotnet.aspnetcore') }}

LANGUAGE: shell
CODE:
dotnet add package Sentry.AspNetCore -v {{@inject packages.version('sentry.dotnet.aspnetcore') }}

LANGUAGE: shell
CODE:
paket add Sentry --version {{@inject packages.version('sentry.dotnet.aspnetcore') }}

----------------------------------------

TITLE: Configuring Multi-Dex in Gradle for Sentry SDK
DESCRIPTION: This snippet shows how to update the app's build.gradle file to include a Multi-Dex configuration for the release build. It specifies a ProGuard file for keeping certain classes in the main dex file.

LANGUAGE: groovy
CODE:
release {
    multiDexKeepProguard file('multidex-config.pro')
}

----------------------------------------

TITLE: Defining HybridCloudForeignKey in Python for Sentry's GroupHistory Model
DESCRIPTION: This snippet demonstrates how to use HybridCloudForeignKey in a Sentry model. It shows the implementation of cross-region relations with cascade semantics, supporting eventual consistency for delete operations.

LANGUAGE: python
CODE:
@region_silo_model
class GroupHistory(Model):
    organization = FlexibleForeignKey("sentry.Organization", db_constraint=False)
    group = FlexibleForeignKey("sentry.Group", db_constraint=False)
    project = FlexibleForeignKey("sentry.Project", db_constraint=False)
    release = FlexibleForeignKey("sentry.Release", null=True, db_constraint=False)

    user_id = HybridCloudForeignKey(settings.AUTH_USER_MODEL, null=True, on_delete="SET_NULL")

----------------------------------------

TITLE: Defining Spring MVC Controller for Automatic Transaction Capture
DESCRIPTION: This snippet demonstrates how to define a Spring MVC controller that will automatically generate transactions for incoming HTTP requests. The transaction name will follow the pattern '<HTTP method> <Spring MVC route>'.

LANGUAGE: java
CODE:
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@RestController
class HelloController {

  @GetMapping("/person/{id}")
  Person person(@PathVariable Long id) {
    ...
  }
}

LANGUAGE: kotlin
CODE:
import org.springframework.web.bind.annotation.RestController
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable

@RestController
class HelloController {

  @GetMapping("/person/{id}")
  fun person(@PathVariable id: Long) {
    ...
  }
}

----------------------------------------

TITLE: Configuring Sentry Plug Integration in Phoenix Endpoint
DESCRIPTION: This snippet shows how to add Sentry.PlugCapture and Sentry.PlugContext to a Phoenix application's endpoint file. It adds error capturing and request context to Sentry events.

LANGUAGE: elixir
CODE:
defmodule MyAppWeb.Endpoint
  use Sentry.PlugCapture
   use Phoenix.Endpoint, otp_app: :my_app

   # ...

   plug Plug.Parsers,
     parsers: [:urlencoded, :multipart, :json],
     pass: ["*/*"],
     json_decoder: Phoenix.json_library()

  plug Sentry.PlugContext

----------------------------------------

TITLE: Build and Serve Commands
DESCRIPTION: Commands to build and serve the production version of the application.

LANGUAGE: bash
CODE:
npm run build
npx serve build

----------------------------------------

TITLE: Adding Sentry Kotlin Compiler Plugin in Gradle (Groovy)
DESCRIPTION: Gradle configuration using Groovy syntax to add the Sentry Kotlin Compiler Plugin for Jetpack Compose support.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.kotlin.compiler.gradle" version "{{@inject packages.version('sentry.kotlin.compiler-plugin', '3.7.0') }}"
}

----------------------------------------

TITLE: Customizing Feedback Widget Text Labels
DESCRIPTION: Example of customizing the default text labels used in the feedback widget interface.

LANGUAGE: javascript
CODE:
feedbackIntegration({
  buttonLabel: "Feedback",
  submitButtonLabel: "Send Feedback",
  formTitle: "Send Feedback",
});

----------------------------------------

TITLE: Setting Log Level via Environment Variable
DESCRIPTION: Overrides the logger level for Sentry using an environment variable.

LANGUAGE: shell
CODE:
SENTRY_LOG_LEVEL=WARNING sentry ...

----------------------------------------

TITLE: Emitting a Gauge Metric in Python with Sentry
DESCRIPTION: Demonstrates how to emit a gauge metric for tracking page load times. The example includes specifying the value, unit, and tagging with page information.

LANGUAGE: python
CODE:
# Add '15.0' to a gauge used for tracking the loading times for a page.
sentry_sdk.metrics.gauge(
	key="page_load",
	value=15.0,
	unit="millisecond",
	tags={
		"page": "/home"
	}
)

----------------------------------------

TITLE: Importing ContextLines Integration in Sentry
DESCRIPTION: Shows how to import the ContextLines integration from Sentry. This integration is enabled by default and adds source code context to stack frames for better error visualization.

LANGUAGE: javascript
CODE:
Sentry.contextLinesIntegration

----------------------------------------

TITLE: Initializing Sentry SDK with DSN Configuration
DESCRIPTION: Imports and initializes the Sentry SDK for Ember.js applications using a DSN (Data Source Name) configuration. The DSN is a unique identifier that authenticates the connection between the application and Sentry's error tracking service.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/ember";

Sentry.init({
  dsn: "___PUBLIC_DSN___"
});

----------------------------------------

TITLE: Archiving a Release Using Sentry CLI
DESCRIPTION: This command uses the Sentry CLI to archive a specific release version. It removes the release from the active list, making it only visible when explicitly filtering for archived releases.

LANGUAGE: bash
CODE:
sentry-cli releases archive VERSION

----------------------------------------

TITLE: Implementing Heartbeat Monitoring with Sentry in JavaScript
DESCRIPTION: This snippet demonstrates how to implement heartbeat monitoring using Sentry. It shows the single-step process of notifying Sentry when a job completes successfully. The code uses the captureCheckIn method with the 'ok' status.

LANGUAGE: javascript
CODE:
// Execute your scheduled task...

// 🟢 Notify Sentry your job completed successfully:
Sentry.captureCheckIn({
  monitorSlug: "<monitor-slug>",
  status: "ok",
});

----------------------------------------

TITLE: Defining Timestamp in JSON for Sentry (Unix Epoch Format)
DESCRIPTION: This snippet shows an alternative way to specify a timestamp in Sentry using a numeric value representing seconds elapsed since the Unix epoch. This format allows for both integer and float values.

LANGUAGE: json
CODE:
{
  "timestamp": 1304358096.955
}

----------------------------------------

TITLE: Sample HTTP Response from Sentry API
DESCRIPTION: This snippet shows a typical HTTP response from the Sentry API. It includes headers and a JSON body containing the API version.

LANGUAGE: http
CODE:
HTTP/1.0 200 OK
Date: Sat, 14 Feb 2015 18:47:20 GMT
Content-Type: application/json
Content-Language: en
Allow: GET, HEAD, OPTIONS

{"version": "0"}

----------------------------------------

TITLE: Installing Sentry Astro SDK using npx
DESCRIPTION: This command uses npx to add the Sentry Astro SDK to your project. It automatically installs the necessary dependencies and configures the SDK for use with Astro.

LANGUAGE: bash
CODE:
npx astro add @sentry/astro

----------------------------------------

TITLE: Adding Redirect in middleware.ts for Sentry Docs
DESCRIPTION: This snippet demonstrates how to add a simple one-to-one redirect in the middleware.ts file. It redirects '/performance/' to '/product/performance/'.

LANGUAGE: typescript
CODE:
const REDIRECTS: {from: PathWithTrailingSlash; to: string}[] = [
  {
    from: '/performance/',
    to: '/product/performance/',
  },
];

----------------------------------------

TITLE: Sample Scope API Usage
DESCRIPTION: Example of new scope API usage showing isolation and current scope manipulation.

LANGUAGE: python
CODE:
with isolation_scope() as scope:
    # Code affecting isolation scope

with new_scope() as scope:
    # Code affecting current scope

----------------------------------------

TITLE: Installing Sentry SolidStart SDK
DESCRIPTION: Package installation commands for adding Sentry SDK to a SolidStart project using different package managers.

LANGUAGE: bash
CODE:
npm install @sentry/solidstart --save

LANGUAGE: bash
CODE:
yarn add @sentry/solidstart

LANGUAGE: bash
CODE:
pnpm add @sentry/solidstart

----------------------------------------

TITLE: Configuring Admin Email in YAML
DESCRIPTION: Sets the technical contact address for the Sentry installation, used for critical updates and security notifications.

LANGUAGE: yaml
CODE:
system.admin-email: "admin@example.com"

----------------------------------------

TITLE: Installing Sentry KMP Gradle Plugin
DESCRIPTION: Add the Sentry Kotlin Multiplatform Gradle plugin to your shared module's build.gradle.kts file.

LANGUAGE: kotlin
CODE:
plugins {
  id("io.sentry.kotlin.multiplatform.gradle") version "{{@inject packages.version('sentry.kotlin.kmp', '0.9.0') }}"
}

----------------------------------------

TITLE: Implementing Pageload Web Vitals Measurements in JSON
DESCRIPTION: Demonstrates the structure for capturing core Web Vitals metrics (LCP, FCP, CLS, TTFB) as measurements on pageload transactions. Each measurement includes a value and unit field.

LANGUAGE: json
CODE:
{
  "measurements": {
    "lcp": { "value": 2049, "unit": "millisecond" },
    "fcp": { "value": 2049, "unit": "millisecond" },
    "cls": { "value": 0.21, "unit": "" },
    "ttfb": { "value": 13, "unit": "millisecond" },
  }
}

----------------------------------------

TITLE: Configuring Sentry Attachments in C#
DESCRIPTION: Shows how to add a log file attachment to the Sentry scope and how to clear all attachments. Uses the Application.persistentDataPath to locate the log file and combines it with the filename using Path.Combine.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.AddAttachment(Path.Combine(Application.persistentDataPath, "file.log"));
});

SentrySdk.ConfigureScope(scope =>
{
    scope.ClearAttachments();
});

----------------------------------------

TITLE: Setting Up Proxy for Sentry Transport in Ruby
DESCRIPTION: This snippet shows different ways to set up a proxy for connecting to Sentry, including using a String, URI, or Hash.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  # ...

  # Provide proxy config as a String
  config.transport.proxy = "http://user:password@proxyhost.net:8080"

  # Or a URI
  config.transport.proxy = URI("http://user:password@proxyhost.net:8080")

  # Or a Hash
  config.transport.proxy = {
    uri: "http://proxyhost.net:8080",
    user: "user",
    password: "password"
  }
end

----------------------------------------

TITLE: Capturing Promise.allSettled Rejections in Sentry Lambda Handler
DESCRIPTION: Enables capture of rejected promises from Promise.allSettled results by setting captureAllSettledReasons to true. This allows tracking of multiple promise rejections that would otherwise not be captured.

LANGUAGE: javascript
CODE:
exports.handler = Sentry.wrapHandler(
  () => {
    return Promise.allSettled([
      Promise.rejected(new Error("first")),
      Promise.rejected(new Error("second")),
    ]);
  },
  { captureAllSettledReasons: true }
);

----------------------------------------

TITLE: Installing Sentry Vue SDK with yarn
DESCRIPTION: This command adds the @sentry/vue package to your project using yarn package manager.

LANGUAGE: bash
CODE:
yarn add @sentry/vue

----------------------------------------

TITLE: Capturing Message with Specific Level in Sentry (JavaScript)
DESCRIPTION: This snippet shows how to capture a message with a specific debug level using Sentry's captureMessage() function. It allows setting the level for individual events.

LANGUAGE: javascript
CODE:
Sentry.captureMessage("this is a debug message", "debug");

----------------------------------------

TITLE: Installing Sentry React SDK with yarn
DESCRIPTION: This command installs the Sentry React SDK package using yarn. It automatically adds the package to the project's dependencies.

LANGUAGE: bash
CODE:
yarn add @sentry/react

----------------------------------------

TITLE: Enabling Dynamic Import in Nuxt Configuration
DESCRIPTION: Configuration to enable dynamic import functionality in the Sentry Nuxt SDK using autoInjectServerSentry setting.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  sentry: {
    autoInjectServerSentry: 'experimental_dynamic-import'
  },
})

----------------------------------------

TITLE: Retrieving Sentry DSN from Heroku Config
DESCRIPTION: This command retrieves the Sentry DSN (Data Source Name) from the Heroku application's configuration. The DSN is used to authenticate and route events to the correct Sentry project.

LANGUAGE: bash
CODE:
heroku config:get SENTRY_DSN

----------------------------------------

TITLE: Setting Enabled Environments in Ruby Sentry SDK
DESCRIPTION: This code configures Sentry to only run in the production environment.

LANGUAGE: ruby
CODE:
config.enabled_environments = %w[production]

----------------------------------------

TITLE: Initializing Sentry SDK in Nuxt Client Configuration
DESCRIPTION: Sets up Sentry error tracking in a Nuxt application's client side. Configures the Sentry SDK with a DSN and includes the feedback integration with system color scheme support.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/nuxt";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.feedbackIntegration({
      // Additional SDK configuration goes in here, for example:
      colorScheme: "system",
    }),
  ],
});

----------------------------------------

TITLE: Configuring MainProcessSession to Send Sessions on Create
DESCRIPTION: Demonstrates how to configure the MainProcessSession integration to send sessions when the main process is created using the sendOnCreate option.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.mainProcessSessionIntegration({ sendOnCreate: true })],
});

----------------------------------------

TITLE: GitHub Release Workflow Configuration
DESCRIPTION: GitHub Actions workflow configuration for handling releases through the GitHub UI.

LANGUAGE: yaml
CODE:
name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to release
        required: true
      force:
        description: Force a release even when there are release-blockers (optional)
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    name: "Release a new version"
    steps:
      - name: Get auth token
        id: token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        with:
          app-id: ${{ vars.SENTRY_RELEASE_BOT_CLIENT_ID }}
          private-key: ${{ secrets.SENTRY_RELEASE_BOT_PRIVATE_KEY }}
      - uses: actions/checkout@v3
        with:
          token: ${{ steps.token.outputs.token }}
          fetch-depth: 0
      - name: Prepare release
        uses: getsentry/action-prepare-release@v1
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        with:
          version: ${{ github.event.inputs.version }}
          force: ${{ github.event.inputs.force }}

----------------------------------------

TITLE: Configuring Sentry Webpack Plugin
DESCRIPTION: Configuration for the Sentry webpack plugin to automatically upload source maps to Sentry during the build process. Requires authentication token and release configuration.

LANGUAGE: javascript
CODE:
const SentryPlugin = require("@sentry/webpack-plugin");

module.exports = {
  // ... other config above ...
  plugins: [
    new SentryPlugin({
      release: process.env.RELEASE,
      include: "./dist",
    }),
  ],
};

----------------------------------------

TITLE: Initializing Feature Flags Integration in Sentry (JavaScript)
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the Feature Flags integration. It includes setting up the integration and configuring a sample feature flag.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";
import { featureFlagsIntegration } from "@sentry/browser";

Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  integrations: [
    new featureFlagsIntegration(),
  ],
});

// Set a feature flag
Sentry.setFeatureFlag("test-flag", false);

// Capture an exception
try {
  nonExistentFunction();
} catch (e) {
  Sentry.captureException(e);
}

----------------------------------------

TITLE: Setting Sentry SDK Log Level in Python
DESCRIPTION: Sets the minimum log level threshold for events to be sent to Sentry. In this example, only events with level 'warning' or higher will be captured and sent to Sentry. This is useful for controlling the volume of events sent to your Sentry project.

LANGUAGE: python
CODE:
from sentry_sdk import set_level

set_level("warning")

----------------------------------------

TITLE: Implementing Before-Send Hook in Sentry
DESCRIPTION: Shows the implementation of the before-send hook that allows modification or scrubbing of event data before it is sent to Sentry.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="configuration/before-send/" />

----------------------------------------

TITLE: Configuring Sentry Report Dialog with Amplitude Tracking
DESCRIPTION: Shows how to initialize Sentry's error reporting dialog with a custom onLoad callback that logs an event to Amplitude when the dialog becomes visible. This integration helps track user interaction with error reporting features.

LANGUAGE: javascript
CODE:
Sentry.showReportDialog({
  // ...
  onLoad() {
    // Log an event to amplitude when the report dialog opens
    amplitude.logEvent("report_dialog_seen");
  },
});

----------------------------------------

TITLE: Adding Sentry Logback Dependency in Gradle
DESCRIPTION: This snippet demonstrates how to add the Sentry Logback dependency to a Gradle project for use with Spring Boot.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-logback:{{@inject packages.version('sentry.java.logback', '4.2.0') }}'

----------------------------------------

TITLE: Installing Sentry Java SDK Dependencies
DESCRIPTION: Package dependency declarations for installing the Sentry Java SDK using different build tools including Maven, Gradle and SBT.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry</artifactId>
    <version>{{@inject packages.version('sentry.java', '4.2.0') }}</version>
</dependency>

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry:{{@inject packages.version('sentry.java', '4.2.0') }}'

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry" % "{{@inject packages.version('sentry.java', '4.2.0') }}"

----------------------------------------

TITLE: Span Tree Structure Example in JSON
DESCRIPTION: This code snippet illustrates the structure of a span tree that is passed to the 'beforeSendSpans' callback. It shows a single span with its name and attributes, including HTTP request method and response status code.

LANGUAGE: json
CODE:
[
  {
    "name": "GET /",
    "attributes": [
      "http.request.method": "GET",
      "http.response.status_code": 200,
    ]
  },
]

----------------------------------------

TITLE: Span Interface API Definition
DESCRIPTION: Core Span interface definition with methods for adding links to existing spans.

LANGUAGE: typescript
CODE:
interface Span {
  addLink(link: Link): this;
  addLinks(links: Link[]): this;
}

----------------------------------------

TITLE: Synchronous File Reading in Swift - Problematic Implementation
DESCRIPTION: Example of problematic file I/O operation on main thread in Swift that can cause UI blocking.

LANGUAGE: swift
CODE:
if let path = Bundle.main.path(forResource: "LoremIpsum", ofType: "txt") {
    let content = String(contentsOfFile: path)
    label.text = content
}

----------------------------------------

TITLE: Modifying Sentry Spans for Apollo Requests in Java
DESCRIPTION: Customize Sentry spans for Apollo requests using a callback function in Java.

LANGUAGE: java
CODE:
import com.apollographql.ApolloClient;
import io.sentry.apollo4.SentryApolloBuilderExtensionsKt;

ApolloClient apollo = SentryApolloBuilderExtensionsKt.sentryTracing(
            new ApolloClient.Builder(),
            (span, request, response) -> {
              if ("LaunchDetails".equals(span.getOperation())) {
                span.setTag("tag-name", "tag-value");
              }
              return span;
            })
        .serverUrl("https://your-api-host/")
        .build();

----------------------------------------

TITLE: Configuring Sentry DSN in .env File
DESCRIPTION: Adds the Sentry DSN to the .env file for environment-specific configuration.

LANGUAGE: plain
CODE:
###> sentry/sentry-symfony ###
SENTRY_DSN="___PUBLIC_DSN___"
###< sentry/sentry-symfony ###

----------------------------------------

TITLE: Setting Tags with Hashed Sensitive Data in Sentry
DESCRIPTION: Example showing how to hash confidential information before sending it to Sentry as a tag, allowing for correlation while maintaining data privacy.

LANGUAGE: javascript
CODE:
Sentry.setTag("creditCard", "abc123");

----------------------------------------

TITLE: Generating dSYM Debug Companion Files using dsymutil
DESCRIPTION: Command to create a dSYM debug companion file from a Mach-O executable or dynamic library on Apple platforms.

LANGUAGE: bash
CODE:
dsymutil /path/to/output[.dylib]

----------------------------------------

TITLE: HTTP Payload Detection URL Patterns
DESCRIPTION: Defines URL patterns and conditions that trigger Large HTTP Payload detection. URLs must not begin with _next/static/ or _next/data/, and should not end with common asset extensions except .json. Response size must exceed 300kb with duration over 100ms.

LANGUAGE: markdown
CODE:
- The HTTP url must not begin with _next/static/ or _next/data/
- The HTTP url must not end with an extension (e.g. .js, .css, .png, .jpg, .jpeg, .mp3), unless the extension is .json
- The HTTP span must have an `http.response_content_length` (added by the `@sentry/browser` SDK, version `7.53.0`) that exceeds `300kb`
- The HTTP span duration must exceed 100ms

----------------------------------------

TITLE: Importing ContextLines Integration in Sentry (JavaScript)
DESCRIPTION: Shows how to import the ContextLines integration in Sentry. This integration adds source code to stack frames, allowing users to see the code that caused an error directly in the Sentry UI.

LANGUAGE: javascript
CODE:
Sentry.contextLinesIntegration

----------------------------------------

TITLE: Updating Browser Tracing Integration in Sentry Astro Configuration
DESCRIPTION: This snippet demonstrates how to update the browser tracing integration from the class-based syntax to the new function-based syntax in a Sentry configuration file for Astro.

LANGUAGE: JavaScript
CODE:
import * as Sentry from "@sentry/astro";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
-  integrations: [new Sentry.BrowserTracing()],
+  integrations: [Sentry.browserTracingIntegration()],
});

----------------------------------------

TITLE: Filtering Transactions with traces-sampler in JavaScript
DESCRIPTION: Illustrates how to use the traces-sampler option to filter out specific transactions based on their name or other properties.

LANGUAGE: javascript
CODE:
Sentry.init({
  tracesSampler: samplingContext => {
    if (samplingContext.transactionContext.name === '/health') {
      // Drop health check transactions
      return 0;
    }
    // Sample other transactions at 10% rate
    return 0.1;
  },
});

----------------------------------------

TITLE: Styling Sentry Feedback Widget with Integration
DESCRIPTION: Customizing the widget's appearance using styles configuration in feedbackIntegration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.feedbackIntegration({
    styles:{
        submitButton: {
            backgroundColor: '#6a1b9a',
            borderRadius: 5,
        },
    },
});

Sentry.showFeedbackWidget();

----------------------------------------

TITLE: Initializing Sentry with Console Capture using npm
DESCRIPTION: This snippet demonstrates how to initialize Sentry with console capture integration using the npm package. It imports Sentry from '@sentry/browser' and sets up the initialization with a DSN and the console capture integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.captureConsoleIntegration()],
});

----------------------------------------

TITLE: Installing Sentry SDK with pip
DESCRIPTION: Use pip to install or upgrade the Sentry SDK package.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk

----------------------------------------

TITLE: Tracing Individual Steps in Sentry Wizard with TypeScript
DESCRIPTION: Example of using the traceStep helper function to add performance tracing to individual steps within a Sentry wizard flow.

LANGUAGE: typescript
CODE:
const res = await traceStep('npm-script-setup', () => setupNpmScriptInCI());

----------------------------------------

TITLE: Comprehensive Stack Trace Rules Example
DESCRIPTION: A complete example showing various stack trace rules for different scenarios.

LANGUAGE: bash
CODE:
stack.abs_path:**/node_modules/** -group
stack.abs_path:**/app/utils/requestError.jsx -group
stack.abs_path:**src/getsentry/src/getsentry/** +app

family:native max-frames=3

stack.function:fetchSavedSearches v-group
stack.abs_path:**/app/views/**.jsx stack.function:fetchData ^-group

family:native stack.function:SpawnThread v-app -app
family:native stack.function:_NSRaiseError ^-group -app
family:native stack.function:std::* -app
family:native stack.function:core::* -app

----------------------------------------

TITLE: Checking Outdated Packages in Yarn
DESCRIPTION: Command to list outdated packages in the project, sorted alphabetically.

LANGUAGE: bash
CODE:
yarn outdated --color | sort

----------------------------------------

TITLE: Initializing Sentry with Feature Flags in TypeScript for Astro
DESCRIPTION: This snippet initializes Sentry with a public DSN and feature flag integration. It then attempts to add a feature flag and captures an exception. The code demonstrates error handling if the feature flag integration fails to initialize.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/astro';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Frontmatter Example - Markdown
DESCRIPTION: Example of page frontmatter configuration used in the documentation.

LANGUAGE: markdown
CODE:
---
title: How to Write - Enriching Events
noindex: true
sidebar_order: 50
---

----------------------------------------

TITLE: Adding Exception Filter in F# for Sentry SDK Initialization
DESCRIPTION: This code snippet demonstrates how to add an exception filter for OperationCanceledException during Sentry SDK initialization in F#. It will also filter out derived exceptions like TaskCanceledException.

LANGUAGE: fsharp
CODE:
// Add this to the SDK initialization callback
options.AddExceptionFilterForType<OperationCanceledException>()

----------------------------------------

TITLE: Configuring Single-Tenant Feature Access in YAML
DESCRIPTION: YAML configuration to allow Flagpole features in single-tenant environments by adding feature names to the allowed_features list.

LANGUAGE: yaml
CODE:
options:
    flagpole.allowed_features: ["organizations:is_sentry"]

----------------------------------------

TITLE: Setting Sentry Environment in F#
DESCRIPTION: This snippet demonstrates how to set the environment to 'production' for the Sentry SDK in F#. It should be included in the SDK initialization callback.

LANGUAGE: fsharp
CODE:
// Add this to the SDK initialization callback
options.Environment <- "production"

----------------------------------------

TITLE: Forcing Sampling Decision in Sentry Transaction Creation
DESCRIPTION: Demonstrates how to force a sampling decision when creating a transaction, bypassing the normal sampling process.

LANGUAGE: javascript
CODE:
const transaction = Sentry.startTransaction({
  name: "Important function",
  sampled: true,
});

----------------------------------------

TITLE: Adding Sentry Log4j 2 Dependency in Maven
DESCRIPTION: This snippet shows how to add the Sentry Log4j 2 dependency to a Maven project for use with Spring Boot.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-log4j2</artifactId>
    <version>{{@inject packages.version('sentry.java.log4j2', '5.1.1') }}</version>
</dependency>

----------------------------------------

TITLE: Enabling Sentry Debug Logging via Properties File
DESCRIPTION: Adds the debug configuration to application.properties file for Sentry monitoring

LANGUAGE: properties
CODE:
sentry.debug=true

----------------------------------------

TITLE: Custom Theme Configuration for Feedback Widget
DESCRIPTION: Demonstrates how to customize the widget's theme using either JavaScript configuration or CSS variables.

LANGUAGE: javascript
CODE:
feedbackIntegration({
  themeLight: {
    background: "#cccccc",
  },
});

LANGUAGE: css
CODE:
#sentry-feedback {
  --background: #cccccc;
}

----------------------------------------

TITLE: Emitting a Counter Metric in Sentry
DESCRIPTION: This snippet demonstrates how to emit a counter metric. It increments a counter for a login button click event with a custom tag.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.metrics
    .increment(key: "button_login_click",
               value: 1.0,
               tags: ["screen": "login"]
    )

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK.metrics
    incrementWithKey :@"button_login_click"
    value: 1.0
    unit: SentryMeasurementUnit.none
    tags: @{ @"screen" : @"login" }
];

----------------------------------------

TITLE: Configuring Sentry for Expo Dev Client
DESCRIPTION: Demonstrates how to configure Sentry to ignore continuous logs from the Expo dev client in development builds.

LANGUAGE: javascript
CODE:
import * as Sentry from "sentry-expo";
import * as Network from "expo-network";

const devServerPort = 8081;
let devServerIpAddress: string | null = null;
Network.getIpAddressAsync().then((ip) => {
  devServerIpAddress = ip;
});

Sentry.init({
  tracesSampleRate: 1.0,
  integrations: [
    new Sentry.Native.ReactNativeTracing({
      shouldCreateSpanForRequest: (url) => {
        return (
          !__DEV__ ||
          !url.startsWith(`http://${devServerIpAddress}:${devServerPort}/logs`)
        );
      },
    }),
  ],
});

----------------------------------------

TITLE: Device Information JSON Structure
DESCRIPTION: Shows the structure for device information in the profile metadata, including architecture, emulator status, locale, manufacturer, and model.

LANGUAGE: json
CODE:
{
  "device": {
    "architecture": "arm64e",
    "is_emulator": true,
    "locale": "en_US",
    "manufacturer": "Apple",
    "model": "iPhone14,8"
  }
}

----------------------------------------

TITLE: Setting Application Path in Sentry PHP Client
DESCRIPTION: Shows how to set the root path of the application for the Sentry client. This helps in generating more accurate stack traces.

LANGUAGE: php
CODE:
'app_path' => app_root(),

LANGUAGE: php
CODE:
$client->setAppPath(app_root());

----------------------------------------

TITLE: SQL Query Parameterization Example
DESCRIPTION: Examples of how Sentry parameterizes and simplifies SQL queries for improved readability, including column selection simplification and value list collapsing.

LANGUAGE: sql
CODE:
SELECT "users"."name", "users"."id", "users.age" FROM users

LANGUAGE: sql
CODE:
SELECT id, name, age, city, country, phone FROM users

LANGUAGE: sql
CODE:
INSERT INTO users (id, email, name, age) VALUES (%s %s %s %s)

----------------------------------------

TITLE: Building Sentry Native SDK on macOS using CMake
DESCRIPTION: This snippet demonstrates how to configure, build, and install the Sentry Native SDK on macOS using CMake. It shows the process of specifying build options, compiling the project, and installing the resulting artifacts.

LANGUAGE: shell
CODE:
# Configure the CMake build into the `build` directory with crashpad (the default
# backend on macOS, thus optional to specify). Specifying `RelWithDebInfo` as the
# `CMAKE_BUILD_TYPE` is also optional because it is the default in sentry-native
# for all generators supporting it.
cmake -B build -D SENTRY_BACKEND=crashpad -D CMAKE_BUILD_TYPE=RelWithDebInfo
# build the project
cmake --build build --parallel
# install the resulting artifacts into a specific prefix
cmake --install build --prefix install
# which will result in the following (on macOS):
exa --tree install --level 2
install
├── bin
│  └── crashpad_handler
├── include
│  └── sentry.h
└── lib
   ├── cmake
   ├── libsentry.dylib
   └── libsentry.dylib.dSYM

----------------------------------------

TITLE: Configuring Sentry SDK for Spark Worker in Python
DESCRIPTION: This code snippet shows how to set up the Sentry SDK for a Spark worker. It creates a custom daemon file that initializes Sentry with the SparkWorkerIntegration.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.spark import SparkWorkerIntegration
import pyspark.daemon as original_daemon

if __name__ == '__main__':
    sentry_sdk.init(
        dsn="___PUBLIC_DSN___",
        # Add data like request headers and IP for users, if applicable;
        # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
        send_default_pii=True,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=1.0,
        integrations=[
            SparkWorkerIntegration(),
        ],
    )

    original_daemon.manager()
    ...

----------------------------------------

TITLE: Initializing Sentry SDK with Vue.js
DESCRIPTION: Basic configuration for integrating Sentry with Vue.js applications. Sets up automatic instrumentation with browser tracing and configures trace propagation targets.

LANGUAGE: javascript
CODE:
import Vue from "vue";
import * as Sentry from "@sentry/vue";

Sentry.init({
  // Passing in `Vue` is optional, if you do not pass it `window.Vue` must be present.
  Vue: Vue,
  dsn: "___PUBLIC_DSN___",

  // This enables automatic instrumentation (highly recommended),
  // but is not necessary for purely manual usage
  // If you only want to use custom instrumentation:
  // * Remove the `BrowserTracing` integration
  // * add `Sentry.addTracingExtensions()` above your Sentry.init() call
  integrations: [Sentry.browserTracingIntegration()],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
});

----------------------------------------

TITLE: Page Visibility Configuration Example
DESCRIPTION: Shows how to configure page visibility using supported and notSupported frontmatter attributes for platform-specific content.

LANGUAGE: markdown
CODE:
---
supported:
  - native.wasm
notSupported:
  - native
---

----------------------------------------

TITLE: Manually Capturing Exceptions with Sentry in Elixir
DESCRIPTION: This snippet shows how to use `Sentry.capture_exception` to manually capture and report exceptions in Elixir. It demonstrates a try-rescue block that attempts a division by zero and captures the resulting exception.

LANGUAGE: elixir
CODE:
try do
  1 / 0
rescue
  exception ->
    Sentry.capture_exception(exception, stacktrace: __STACKTRACE__)
end

----------------------------------------

TITLE: Implementing Distribution Metric in Python
DESCRIPTION: Implementation of a Distribution metric class in Python, demonstrating value collection and serialization methods.

LANGUAGE: python
CODE:
class Distribution:
    def __init__(self, initial):
        self.values = [initial]
    def add(self, value):
        self.values.append(value)
    def serialize(self):
        return self.values

----------------------------------------

TITLE: Emitting a Counter Metric in Java and Kotlin
DESCRIPTION: This snippet demonstrates how to emit a counter metric in Java and Kotlin. It includes setting a key, value, and tags for the metric.

LANGUAGE: Java
CODE:
final Map<String, String> tags = new HashMap<>();
tags.put("provider", "e-mail");

Sentry.metrics().increment(
    "button_login_click", // key
    1.0,                  // value
    null,                 // unit
    tags                  // tags
);

LANGUAGE: Kotlin
CODE:
Sentry.metrics()
    .increment(
        "button_login_click", // key
        1.0,                  // value
        null,                 // unit
        mapOf(                // tags
            "provider" to "e-mail"
        )
    )

----------------------------------------

TITLE: Initializing Statsig with Sentry Integration in JavaScript
DESCRIPTION: Sets up Sentry error tracking with Statsig feature flag integration. Initializes both Statsig client and Sentry with proper configuration, enabling feature flag data to be included in error reports. Demonstrates checking a feature gate and capturing an exception.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solidstart';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Configuring Sentry Tracing in Symfony
DESCRIPTION: Main configuration for enabling/disabling tracing features in Symfony applications. Controls tracing for database queries, cache pools, Twig templating, and HTTP client operations.

LANGUAGE: yaml
CODE:
sentry:
  tracing:
    enabled: true
    dbal: # DB queries
      enabled: true
    cache: # cache pools
      enabled: true
    twig: # templating engine
      enabled: true
    http_client: # Symfony HTTP client
      enabled: true

----------------------------------------

TITLE: Inefficient JSON Decoding on UI Thread - Android Kotlin
DESCRIPTION: Example showing problematic JSON decoding directly on the UI thread using Gson that can cause performance issues.

LANGUAGE: kotlin
CODE:
fun updatePersonView(json: String) {
	personView.person = Gson().fromJson(json, Person::class.java)
}

----------------------------------------

TITLE: Uploading Debug Files with Wait Option
DESCRIPTION: For manual testing, use the --wait option when uploading debug files. This ensures the files are processed before sending the first native crash or error event.

LANGUAGE: bash
CODE:
sentry-cli debug-files upload --wait

----------------------------------------

TITLE: Setting Sentry Public DSN Configuration
DESCRIPTION: Demonstrates the minimal JSON configuration required for Sentry integration, specifically the public DSN (Data Source Name) setting that identifies the project.

LANGUAGE: json
CODE:
{
  "public-dsn": "___PUBLIC_DSN___"
}

----------------------------------------

TITLE: Closing Sentry Client with Timeout in JavaScript
DESCRIPTION: Demonstrates how to use the Sentry.close() method with a timeout to gracefully shut down a service or container. It flushes pending events and resolves a promise, allowing for clean process termination.

LANGUAGE: javascript
CODE:
Sentry.close(2000).then(function () {
  process.exit();
});

----------------------------------------

TITLE: Importing Sentry SDK in React Native
DESCRIPTION: This snippet shows how to import the Sentry SDK in a React Native application. This import is necessary before setting transaction names or performing other Sentry operations.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

----------------------------------------

TITLE: Initializing Sentry SDK in Ember
DESCRIPTION: Basic initialization of the Sentry SDK with configuration options in an Ember application.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/ember";

Sentry.init({
  // Sentry options
  dsn: "___PUBLIC_DSN___",
});

----------------------------------------

TITLE: Configuring Banners in TypeScript
DESCRIPTION: This example demonstrates how to configure multiple banners in the BANNERS array, including specifying which pages they appear on, their text content, and link details. It also shows how to set precedence for overlapping banner configurations.

LANGUAGE: typescript
CODE:
const BANNERS = [
  // This one will take precedence over the last banner in the array
  // (which matches all /platforms pages), because it matches first.
  {
    appearsOn: ['^/platforms/javascript/guides/astro/'],
    text: 'This banner appears on the Astro guide',
    linkURL: 'https://sentry.io/thought-leadership',
    linkText: 'Get webinarly',
  },

  // This one will match the /welcome page and all /for pages
  {
    appearsOn: ['^/$', '^/platforms/'],
    text: 'This banner appears on the home page and all /platforms pages',
    linkURL: 'https://sentry.io/thought-leadership',
    linkText: 'Get webinarly',
  },
];

----------------------------------------

TITLE: Configuring BeforeSend Callback with Request Access
DESCRIPTION: Implementation of BeforeSend callback in Sentry initialization to access the original HTTP request

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	BeforeSend: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
		if hint.Context != nil {
			if req, ok := hint.Context.Value(sentry.RequestContextKey).(*http.Request); ok {
				// You have access to the original Request here
			}
		}

		return event
	},
})

----------------------------------------

TITLE: Initializing Sentry SDK with Frame Rewriting Integration
DESCRIPTION: Sets up Sentry error tracking with custom frame rewriting configuration. Includes options for root path stripping, custom prefix addition, and frame transformation through an iteratee function. Requires @sentry/node package as a dependency.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.rewriteFramesIntegration(
    {
      // root path that will be stripped from the current frame's filename by the default iteratee if the filename is an absolute path
      root: string;

      // a custom prefix that will be used by the default iteratee (default: `app://`)
      prefix: string;

      // function that takes the frame, applies a transformation, and returns it
      iteratee: (frame) => frame;
    }
  )],
});

----------------------------------------

TITLE: Configuring Celery Beat Schedule in Python
DESCRIPTION: This snippet demonstrates how to set up a Celery Beat schedule for periodic tasks. It defines a task to be run at a specific time using crontab.

LANGUAGE: python
CODE:
# tasks.py
from celery import Celery
from celery.schedules import crontab

app = Celery('tasks', broker='...')
app.conf.beat_schedule = {
    'set-in-beat-schedule': {
        'task': 'tasks.tell_the_world',
        'schedule': crontab(hour='10', minute='15'),
        'args': ("Some important message!", ),
    },
}

----------------------------------------

TITLE: HTTP Client Request Tracing Examples
DESCRIPTION: Examples showing correct and incorrect ways to handle HTTP client requests for proper span timing in tracing.

LANGUAGE: php
CODE:
// Correct way
$this->client->request('GET',
    'https://example.com'
);

// Incorrect way
$response = $this->client->request('GET',
    'https://example.com'
);

----------------------------------------

TITLE: Installing Sentry Vue SDK using npm
DESCRIPTION: This command installs the Sentry Vue SDK package using npm. The package includes the Replay integration.

LANGUAGE: bash
CODE:
npm install @sentry/vue --save

----------------------------------------

TITLE: Selectively Disabling Specific Sentry Integrations in Go
DESCRIPTION: This code snippet shows how to customize the list of integrations by disabling a specific integration (ContextifyFrames) while keeping others enabled. It filters the integrations list during Sentry initialization.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	Integrations: func(integrations []sentry.Integration) []sentry.Integration {
		var filteredIntegrations []sentry.Integration
		for _, integration := range integrations {
			if integration.Name() == "ContextifyFrames" {
				continue
			}
			filteredIntegrations = append(filteredIntegrations, integration)
		}
		return filteredIntegrations
	},
})

----------------------------------------

TITLE: Referencing Environment Tag in Sentry
DESCRIPTION: Shows how to reference the 'Environment' tag in Sentry, which is used to identify different deployment stages like development, testing, staging, or production.

LANGUAGE: markdown
CODE:
`Environment` is a Sentry-supported tag that you can (and should) add to your SDK. Generally, the tag accepts any value, but it's intended to refer to your code deployments' naming convention, such as _development_, _testing_, _staging_, or _production_.

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: Markdown frontmatter configuration for a documentation page about Sentry Go SDK configuration options.

LANGUAGE: markdown
CODE:
---
title: Configuration
description: "Learn more about additional configuration options for the Go SDK."
sidebar_order: 5
---

<PageGrid />

----------------------------------------

TITLE: Sample Release Name Format
DESCRIPTION: Example format for semantic versioning of releases using package and version information.

LANGUAGE: text
CODE:
my.project.name@2.3.12+1234

----------------------------------------

TITLE: Setting Tag with Hashed Sensitive Data
DESCRIPTION: Example showing how to hash confidential information before sending it to Sentry instead of using plaintext.

LANGUAGE: javascript
CODE:
Sentry.setTag("email", "xxxx@example.com");

----------------------------------------

TITLE: Installing Source Map Library for Local Verification
DESCRIPTION: This command installs the source-map library globally using npm for local source map verification.

LANGUAGE: bash
CODE:
npm install -g source-map

----------------------------------------

TITLE: Logging Errors with Try-Catch in PowerShell
DESCRIPTION: Shows how to capture and log an ErrorRecord object to Sentry using a try-catch block. This approach provides more control over error handling and is scoped to the specific code block.

LANGUAGE: powershell
CODE:
try
{
    AFunctionThatMightFail
}
catch
{
    $_ | Out-Sentry
}

----------------------------------------

TITLE: Configuring ANR Timeout Interval in Android Manifest
DESCRIPTION: This code demonstrates how to set a custom timeout interval for ANR detection using a meta-data attribute in the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<application>
    <meta-data android:name="io.sentry.anr.timeout-interval-millis" android:value="2000" />
</application>

----------------------------------------

TITLE: Configuring Sentry Options for Echo
DESCRIPTION: This code snippet shows the available options for configuring Sentry's behavior in Echo, including repanic, wait for delivery, and timeout settings.

LANGUAGE: go
CODE:
// Repanic configures whether Sentry should repanic after recovery, in most cases it should be set to true,
// as echo includes its own Recover middleware that handles http responses.
Repanic bool
// WaitForDelivery configures whether you want to block the request before moving forward with the response.
// Because Echo's `Recover` handler doesn't restart the application,
// it's safe to either skip this option or set it to `false`.
WaitForDelivery bool
// Timeout for the event delivery requests.
Timeout time.Duration

----------------------------------------

TITLE: Implementing Device-Based Session Replay Control in Swift
DESCRIPTION: Configuration example showing how to selectively enable/disable Session Replay based on device capabilities, with different sampling rates for low-end devices.

LANGUAGE: swift
CODE:
SentrySDK.start(configureOptions: { options in
  options.dsn = "___PUBLIC_DSN___"
  options.debug = true

  options.sessionReplay.onErrorSampleRate = if isLowEnd() { 0.0 } else { 1.0 }
  options.sessionReplay.sessionSampleRate = if isLowEnd() { 0.0 } else { 0.1 }
})

----------------------------------------

TITLE: Configuring Sentry Tags in Symfony YAML
DESCRIPTION: This snippet demonstrates how to add tags via Symfony configuration options in the sentry.yaml file. It shows setting two tags, one with an environment variable and another with a static value.

LANGUAGE: yaml
CODE:
sentry:
    options:
        tags:
            app_tag1: "%env(APP_CUSTOM_TAG1)%"
            app_tag2: "value2"

----------------------------------------

TITLE: Disabling Sentry Distributed Tracing
DESCRIPTION: Configuration to completely disable distributed tracing and prevent Sentry trace headers from being sent.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Overwrite the defaults to ensure no trace headers are sent
  tracePropagationTargets: [],
});

----------------------------------------

TITLE: Using Capture Results
DESCRIPTION: Shows how to use the result ID returned from exception capture for user feedback or logging purposes.

LANGUAGE: javascript
CODE:
alert(`Your exception was recorded as ${resultId}`);

LANGUAGE: python
CODE:
print('Your exception was recorded as %s', result_id);

----------------------------------------

TITLE: Custom Swift Error Implementation
DESCRIPTION: Example of implementing custom Swift errors using enum and capturing them with Sentry. Demonstrates error types and their representation in Sentry's interface.

LANGUAGE: swift
CODE:
enum LoginError: Error {
    case wrongUser(id: String)
    case wrongPassword
}

SentrySDK.capture(error: LoginError.wrongUser("12345678"))

----------------------------------------

TITLE: Defining Types for Span Links in TypeScript
DESCRIPTION: Core type definitions for implementing span links following the OpenTelemetry specification. Includes interfaces for Link, SpanContext, and Attributes.

LANGUAGE: typescript
CODE:
interface Link {
  context: SpanContext;
  attributes?: Attributes;
}

interface SpanContext {
  traceId: string,
  spanId: string,
  traceFlags: number,
}

type Attributes = Record<string, AttributeValues>
type AttributeValues = string | boolean | number | Array<string> | Array<boolean> | Array<number>

----------------------------------------

TITLE: Configuring Sentry DSN in Laravel
DESCRIPTION: Use the artisan command to publish Sentry configuration and set the DSN in the .env file.

LANGUAGE: shell
CODE:
php artisan sentry:publish --dsn=___PUBLIC_DSN___

LANGUAGE: shell
CODE:
SENTRY_LARAVEL_DSN=___PUBLIC_DSN___

----------------------------------------

TITLE: Emitting a Counter Metric in Flutter with Sentry
DESCRIPTION: This snippet demonstrates how to emit a counter metric using Sentry in a Flutter application. It counts the occurrence of a login button click event.

LANGUAGE: dart
CODE:
Sentry.metrics().increment(
    'button_login_click', // key
    value: 1,
    unit: null,
    tags: {'provider': 'e-mail'},
);

----------------------------------------

TITLE: Initializing Statsig with Sentry Integration in JavaScript
DESCRIPTION: Sets up Statsig feature flag client and integrates it with Sentry error tracking. The code initializes both services, checks a feature gate, and captures an error that will include the feature flag state.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/astro';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Defining Select FormField Schema in JSON for Sentry Integration
DESCRIPTION: JSON schema for a Select FormField component. It includes type, label, name, uri, async, options, depends_on, and skip_load_on_open attributes. This component can load options dynamically from a URI or use static options.

LANGUAGE: json
CODE:
{
  "type": "select",
  "label": <String>,
  "name": <String>,
  "uri": <URI>,
  "async": <Boolean>,
  "options": <Array<Array<String, String>>>,
  "depends_on": <Array<String>>,
  "skip_load_on_open": <Boolean>
}

----------------------------------------

TITLE: Configuring Content-Security-Policy Header for Sentry Reporting
DESCRIPTION: This snippet shows how to set up the Content-Security-Policy header to report violations to Sentry. It includes both the report-uri and report-to directives for compatibility, as well as the Report-To header for future support.

LANGUAGE: http
CODE:
Content-Security-Policy: ...;
    report-uri https://___ORG_INGEST_DOMAIN___/api/___PROJECT_ID___/security/?sentry_key=___PUBLIC_KEY___;
    report-to csp-endpoint

Report-To: {"group":"csp-endpoint","max_age":10886400,"endpoints":[{"url":"https://___ORG_INGEST_DOMAIN___/api/___PROJECT_ID___/security/?sentry_key=___PUBLIC_KEY___"}],"include_subdomains":true}

----------------------------------------

TITLE: Integrating Sentry with Sails in Node.js
DESCRIPTION: This snippet demonstrates how to integrate Sentry into a Sails application. It shows the configuration of Raven and how to add Sentry's request and error handlers as Sails middleware in the correct order.

LANGUAGE: javascript
CODE:
// config/http.js

var Raven = require("raven");
Raven.config("___DSN___").install();

module.exports.http = {
  middleware: {
    // Raven's handlers has to be added as a keys to http.middleware config object
    requestHandler: Raven.requestHandler(),
    errorHandler: Raven.errorHandler(),

    // And they have to be added in a correct order to middlewares list
    order: [
      // The request handler must be the very first one
      "requestHandler",
      // ...more middlewares
      "router",
      // The error handler must be after router, but before any other error middleware
      "errorHandler",
      /// ...remaining middlewares
    ],
  },
};

----------------------------------------

TITLE: Configuring Job Monitor Parameters in Laravel 10.x, 9.x & 8.x
DESCRIPTION: This snippet shows how to configure various parameters for the Sentry job monitor in Laravel 10.x, 9.x, and 8.x within the schedule method. It includes options for monitor slug, check-in margin, max runtime, failure threshold, recovery threshold, and monitor config update settings.

LANGUAGE: php
CODE:
protected function schedule(Schedule $schedule)
{
    $schedule->command('emails:send')
        ->everyHour()
        ->sentryMonitor(
            // Specify the slug of the job monitor in case of duplicate commands or if the monitor was created in the UI.
            monitorSlug: null,
            // Number of minutes before a check-in is considered missed.
            checkInMargin: 5,
            // Number of minutes before an in-progress check-in is marked timed out.
            maxRuntime: 15,
            // Create a new issue when this many consecutive missed or error check-ins are processed.
            failureIssueThreshold: 1,
            // Resolve the issue when this many consecutive healthy check-ins are processed.
            recoveryThreshold: 1,
            // In case you want to configure the job monitor exclusively in the UI, you can turn off sending the monitor config with the check-in.
            // Passing a monitor-slug is required in this case.
            updateMonitorConfig: false,
        )
}

----------------------------------------

TITLE: Initializing LaunchDarkly with Sentry Integration in JavaScript
DESCRIPTION: Sets up Sentry monitoring with LaunchDarkly integration, initializes the LaunchDarkly client with feature flag tracking, and demonstrates flag evaluation. Requires @sentry/svelte and launchdarkly-js-client-sdk packages as dependencies.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/svelte';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Installing Sentry SDK with OpenAI Support
DESCRIPTION: Command to install the Sentry SDK with OpenAI integration support via pip package manager

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[openai]'

----------------------------------------

TITLE: Configuring Google Cloud Storage for Sentry Filestore in YAML
DESCRIPTION: YAML configuration for setting up Google Cloud Storage as the backend for Sentry's filestore. Includes bucket name specification in the Sentry config file.

LANGUAGE: yaml
CODE:
filestore.backend: "gcs"
filestore.options:
  bucket_name: "..."

----------------------------------------

TITLE: Configuring Trace Propagation Targets in Sentry
DESCRIPTION: Example showing how to configure trace propagation targets in Sentry initialization.

LANGUAGE: TypeScript
CODE:
Sentry.init({
  dsn: "___DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracePropagationTargets: ["localhost", "example.com"],
});

----------------------------------------

TITLE: Server URL in Configuration File
DESCRIPTION: Configuration for custom Sentry server URL in the config file.

LANGUAGE: ini
CODE:
[defaults]
url = https://mysentry.invalid/

----------------------------------------

TITLE: Configuring Docker Log Retention in JSON
DESCRIPTION: Shows how to limit the amount of disk space used by Docker container logs by configuring the log driver and options in the daemon.json file. This example sets a maximum log file size and number of files to retain.

LANGUAGE: json
CODE:
{
  "log-driver": "local",
  "log-opts": {"max-size": "10m", "max-file": "3"}
}

----------------------------------------

TITLE: Implementing BeforeBreadcrumb Callback
DESCRIPTION: Custom callback implementation to filter or modify breadcrumbs before they are added to the scope. Only one bean of this type can be registered.

LANGUAGE: java
CODE:
@Component
public class CustomBeforeBreadcrumbCallback implements SentryOptions.BeforeBreadcrumbCallback {

  @Override
  public Breadcrumb execute(Breadcrumb breadcrumb, Hint hint) {
    // Don't add breadcrumbs with message containing:
    if (breadcrumb.getMessage() != null
      && breadcrumb.getMessage().contains("bad breadcrumb")) {
      return null;
    }
    return breadcrumb;
  }
}

LANGUAGE: kotlin
CODE:
@Component
class CustomBeforeBreadcrumbCallback : SentryOptions.BeforeBreadcrumbCallback {
  override fun execute(breadcrumb: Breadcrumb, hint: Hint): Breadcrumb? {
    // Don't add breadcrumbs with message containing:
    return if (breadcrumb.message?.contains("bad breadcrumb") == true) {
      null
    } else {
      breadcrumb
    }
  }
}

----------------------------------------

TITLE: Creating Link to Product Pages in Markdown
DESCRIPTION: Shows how to create a link to product content within the 'product' folder, which doesn't require platform specification.

LANGUAGE: markdown
CODE:
You can also customize how events are grouped. Learn more about customized grouping in [Issue Grouping](/concepts/data-management/event-grouping/).

----------------------------------------

TITLE: Forcing Sampling Decision in Sentry Transaction Creation (JavaScript)
DESCRIPTION: Demonstrates how to force a sampling decision when creating a transaction in Sentry. This bypasses the normal sampling process and ensures the transaction is either always or never sampled.

LANGUAGE: javascript
CODE:
const transaction = Sentry.startTransaction({
  name: "test-transaction",
  sampled: true,
});

----------------------------------------

TITLE: Using OR Condition in Sentry Search
DESCRIPTION: Examples of using the OR condition in Sentry search queries. Shows a valid query using OR between non-aggregate fields and an invalid query attempting to use OR with an aggregate function.

LANGUAGE: plaintext
CODE:
# a valid `OR` query
browser:Chrome OR browser:Opera

# an invalid `OR` query
user.username:janedoe OR count():>100

----------------------------------------

TITLE: Initializing Sentry with Custom Fingerprint in Go
DESCRIPTION: This code initializes Sentry with custom client options. It sets a BeforeSend function to modify the event fingerprint before sending, allowing for custom grouping of errors.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	// ...
	BeforeSend: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
        event.Fingerprint = []string{"my-view-function"}

		return event
	},
})

----------------------------------------

TITLE: Creating dSYM Debug Files on Apple Platforms
DESCRIPTION: Command to generate a dSYM debug companion file from an executable or dynamic library using dsymutil.

LANGUAGE: bash
CODE:
dsymutil /path/to/output[.dylib]

----------------------------------------

TITLE: Adding Sentry Log4j 2 Dependency in Gradle
DESCRIPTION: This snippet demonstrates how to add the Sentry Log4j 2 dependency to a Gradle project for use with Spring Boot.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-log4j2:{{@inject packages.version('sentry.java.log4j2', '5.1.1') }}'

----------------------------------------

TITLE: Configuring Trace ID in Sentry JSON Format
DESCRIPTION: Demonstrates the correct format for specifying a trace_id in Sentry. The trace_id must be 16 random bytes encoded as a 32-character hex string to uniquely identify a trace that spans belong to.

LANGUAGE: json
CODE:
{
    "trace_id": "1e57b752bc6e4544bbaa246cd1d05dee"
  }

----------------------------------------

TITLE: Running Sentry Dart Plugin
DESCRIPTION: Command to run the Sentry Dart Plugin for uploading debug symbols after building the application.

LANGUAGE: bash
CODE:
flutter pub run sentry_dart_plugin

----------------------------------------

TITLE: Customizing Error Events with Sentry BeforeSendCallback
DESCRIPTION: Use a BeforeSendCallback to customize or drop error events captured by Sentry in Apollo Client.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.BeforeSendCallback
import com.apollographql.apollo3.api.http.HttpRequest
import com.apollographql.apollo3.api.http.HttpResponse
import io.sentry.TypeCheckHint.APOLLO_REQUEST
import io.sentry.TypeCheckHint.APOLLO_RESPONSE

SentryAndroid.init(this) { options ->
  // Add a callback that will be used before the event is sent to Sentry.
  // With this callback, you can modify the event or, when returning null, also discard the event.
  options.beforeSend = BeforeSendCallback { event, hint ->
    val request = hint.getAs(APOLLO_REQUEST, HttpRequest::class.java)
    val response = hint.getAs(APOLLO_RESPONSE, HttpResponse::class.java)

    // customize or drop the event
    event
  }
}

----------------------------------------

TITLE: Adding Data Attributes to Existing Spans in Rust
DESCRIPTION: Shows how to add data attributes to an existing span within the current Hub scope using Sentry's Rust SDK.

LANGUAGE: rust
CODE:
let span = Hub::current().configure_scope(|scope| scope.get_span());
if let Some(span) = span {
    span.set_data("hello", "world".into());
}

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration in JavaScript (Deprecated)
DESCRIPTION: This snippet demonstrates the deprecated method of initializing Sentry with Unleash integration. It uses the older 'unleashClientClass' option instead of 'featureFlagClientClass'.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/sveltekit';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({unleashClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Timestamp Examples in JSON
DESCRIPTION: Examples showing two valid timestamp formats: RFC 3339 string and Unix epoch seconds.

LANGUAGE: json
CODE:
{
  "timestamp": "2011-05-02T17:41:36Z"
}

LANGUAGE: json
CODE:
{
  "timestamp": 1304358096.0
}

----------------------------------------

TITLE: Setting Uniform Transaction Sample Rate in Sentry SDK (JavaScript)
DESCRIPTION: Configures the SDK to sample 20% of transactions by setting the tracesSampleRate to 0.2. This provides an even cross-section of transactions across the application.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // To set a uniform sample rate
  tracesSampleRate: 0.2
});

----------------------------------------

TITLE: Disabling Sentry SDK for Android Platform in Unity
DESCRIPTION: An editor script that automatically disables the Sentry SDK when building for Android platform. Implements IPreprocessBuildWithReport interface to hook into Unity's build pipeline.

LANGUAGE: csharp
CODE:
using Sentry.Unity;
using UnityEditor;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;

public class PreBuildProcessor : IPreprocessBuildWithReport
{
    public int callbackOrder => 0;

    public void OnPreprocessBuild(BuildReport report)
    {
        if (report.summary.platform is BuildTarget.Android)
        {
            var sentryOptions =
                AssetDatabase.LoadAssetAtPath<ScriptableSentryUnityOptions>("Assets/Resources/Sentry/SentryOptions.asset");
            sentryOptions.Enabled = false;
            EditorUtility.SetDirty(sentryOptions);
        }
    }
}

----------------------------------------

TITLE: Configuring Python Environment Variables for Sentry Lambda Layer
DESCRIPTION: For Python Lambda functions with Sentry, environment variables are set to store the original handler, configure the DSN, and set the sampling rate. These include SENTRY_INITIAL_HANDLER, SENTRY_DSN, and SENTRY_TRACES_SAMPLE_RATE.

LANGUAGE: plaintext
CODE:
SENTRY_INITIAL_HANDLER=<your-original-handler>
SENTRY_DSN=<your-project-dsn>
SENTRY_TRACES_SAMPLE_RATE=1.0

----------------------------------------

TITLE: Lazy Loading Sentry Integration Using Dynamic Import
DESCRIPTION: This snippet shows how to lazy-load a Sentry integration using dynamic import. It demonstrates loading the Replay integration from the npm package, which is recommended for avoiding issues with import() and is compatible with bundlers like Vite.

LANGUAGE: javascript
CODE:
async function loadReplay() {
  const { Replay } = await import("@sentry/replay");
  Sentry.addIntegration(new Replay());
}

----------------------------------------

TITLE: Configuring Sentry SDK for SvelteKit
DESCRIPTION: Initializes the Sentry SDK with basic configuration including DSN and trace sampling. This setup should be implemented in both hooks.client.js and hooks.server.js files to enable full-stack error monitoring.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // We recommend adjusting this value in production, or using `tracesSampler`
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Ensuring Request Isolation with Sentry SDK 8.x (CommonJS)
DESCRIPTION: Example of using Sentry.withIsolationScope() to ensure request isolation in non-HTTP scenarios like websockets or scheduled jobs. Uses CommonJS syntax.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

function myScheduledJob() {
  return Sentry.withIsolationScope(async () => {
    await doSomething();
    await doSomethingElse();
    return { status: "DONE" };
  });
}

----------------------------------------

TITLE: Defining Thread Information in Sentry Event Payload - Object Format
DESCRIPTION: Example showing how to structure thread information using the object format with 'values' attribute. Demonstrates required and optional fields including thread ID, name, state, and held locks.

LANGUAGE: json
CODE:
{
  "threads": {
    "values": [
      {
        "id": "0",
        "name": "main",
        "crashed": true,
        "main": true,
        "held_locks": {
          "0x0d3a2f0a": {},
          "0x07d7437b": {}
        },
        "state": "Waiting",
        "stacktrace": {}
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Sentry with Timber Integration in Java
DESCRIPTION: Initialize Sentry Android SDK with Timber integration in Java, setting event and breadcrumb levels. This should be done early in the application lifecycle.

LANGUAGE: java
CODE:
import io.sentry.android.core.SentryAndroid;
import io.sentry.android.timber.SentryTimberIntegration;
import timber.log.Timber
// import BuildConfig

SentryAndroid.init(this, options -> {
   if (!BuildConfig.DEBUG) {

     // default values:
     // minEventLevel = ERROR
     // minBreadcrumbLevel = INFO
     options.addIntegration(
         new SentryTimberIntegration(
             SentryLevel.ERROR,
             SentryLevel.INFO
         )
     );
   } else {
     Timber.plant(new Timber.DebugTree());
   }
});

----------------------------------------

TITLE: Generating ProGuard UUID in Python
DESCRIPTION: This code snippet demonstrates how to generate a UUID for ProGuard files in Python. It uses a custom namespace based on 'guardsquare.com' and calculates a SHA1 UUID based on the file's content.

LANGUAGE: python
CODE:
import uuid

NAMESPACE = uuid.uuid5(uuid.NAMESPACE_DNS, "guardsquare.com")

def get_proguard_uuid(filename):
    with open(filename, 'rb') as f:
        return uuid.uuid5(NAMESPACE, f.read())

----------------------------------------

TITLE: Example HTTP Uptime Check Request
DESCRIPTION: Shows the structure of an HTTP request made by Sentry's Uptime Monitor, including the Sentry-Trace header for distributed tracing.

LANGUAGE: http
CODE:
GET /example-uptime-endpoint HTTP/1.1
Host: sentry.io
User-Agent: SentryUptimeBot/1.0 (+http://docs.sentry.io/product/alerts/uptime-monitoring/)
Sentry-Trace: 32d4011600324838afcd666edadc1d09-8d5ca7419a02ca36

----------------------------------------

TITLE: Disabling DBAL Tracing
DESCRIPTION: Configuration to disable database query tracing in Symfony applications.

LANGUAGE: yaml
CODE:
sentry:
  tracing:
    dbal: # DB queries
      enabled: false

----------------------------------------

TITLE: Using SentryContext in Kotlin Coroutines
DESCRIPTION: This code demonstrates how to use SentryContext when launching a Kotlin coroutine to ensure the correct Sentry context is accessible within the coroutine and its child coroutines.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.SentryContext
import io.sentry.Sentry

launch(SentryContext()) {
  // tag set in parent coroutine is visible to child coroutine
  Sentry.setTag("parent-tag", "value")
  launch() {
    // tag set in child coroutine is not visible in parent coroutine
    Sentry.setTag("child-tag", "value")
  }
}

----------------------------------------

TITLE: Configuring Sentry with Custom Error Handling in JavaScript
DESCRIPTION: This snippet initializes Sentry with a custom 'beforeSend' function. It checks for instances of MyRPCError and sets a custom fingerprint based on the function name and error code.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  beforeSend: function (event, hint) {
    const exception = hint.originalException;

    if (exception instanceof MyRPCError) {
      event.fingerprint = [
        "{{ default }}",
        String(exception.functionName),
        String(exception.errorCode),
      ];
    }

    return event;
  },
});

----------------------------------------

TITLE: Illustrating File Structure for Versioned Documentation
DESCRIPTION: Demonstrates the directory structure for versioned documentation, including both regular pages and platform-specific includes.

LANGUAGE: markdown
CODE:
docs/
├── getting-started/
│   ├── index.mdx
│   └── index__v7.x.mdx
└── platform-includes/
    └── configuration/
        ├── example.mdx
        └── example__v7.x.mdx

----------------------------------------

TITLE: Example File I/O Implementation
DESCRIPTION: Sample Android activity demonstrating file I/O operations with Sentry transaction monitoring.

LANGUAGE: kotlin
CODE:
import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import androidx.activity.ComponentActivity
import io.sentry.Sentry
import io.sentry.SpanStatus
import java.io.File

class LyricsActivity : ComponentActivity() {

  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    findViewById<Button>(R.id.load_lyrics).setOnClickListener {
      val transaction = Sentry.startTransaction(
        name = "Track Interaction",
        operation = "ui.action.lyrics",
        bindToScope = true
      )

      val file = File(context.filesDir, "lyrics.txt")

      val lyricsTextView = findViewById<TextView>(R.id.lyrics)
      lyricsTextView.setText(file.readText())

      transaction.finish(SpanStatus.OK)
    }
  }
}

----------------------------------------

TITLE: SDK Installation Commands
DESCRIPTION: Package installation commands for different package managers to install the Sentry Nuxt SDK.

LANGUAGE: bash
CODE:
npm install @sentry/nuxt --save

----------------------------------------

TITLE: Adding Attachments to Sentry Events in JavaScript
DESCRIPTION: This code shows how to add attachments to Sentry events. It uses a platform-specific content inclusion, likely containing the actual implementation details.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="enriching-events/add-attachment" />

----------------------------------------

TITLE: Ensuring Request Isolation with Sentry SDK 8.x (ESM)
DESCRIPTION: Example of using Sentry.withIsolationScope() to ensure request isolation in non-HTTP scenarios like websockets or scheduled jobs. Uses ESM syntax.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

function myScheduledJob() {
  return Sentry.withIsolationScope(async () => {
    await doSomething();
    await doSomethingElse();
    return { status: "DONE" };
  });
}

----------------------------------------

TITLE: Sample Comment Webhook Payload in JSON
DESCRIPTION: This JSON snippet demonstrates the structure of a Sentry comment webhook payload. It includes the action type, comment data, installation information, and actor details.

LANGUAGE: json
CODE:
{
  "action": "created",
  "data": {
    "comment": "adding a comment",
    "project_slug": "sentry",
    "comment_id": 1234,
    "issue_id": 100,
    "timestamp": "2022-03-02T21:51:44.118160Z"
  },
  "installation": { "uuid": "eac5a0ae-60ec-418f-9318-46dc5e7e52ec" },
  "actor": { "type": "user", "id": 1, "name": "colleen" }
}

----------------------------------------

TITLE: Creating Custom Error Class and Capturing Sentry Event in C++
DESCRIPTION: This snippet defines a custom 'MyRpcError' class and demonstrates how to create a Sentry event with a custom fingerprint using the Sentry C++ SDK. It includes creating a list for the fingerprint, appending values, and setting up the event before capturing it.

LANGUAGE: cpp
CODE:
#include <string>
#include <sentry.h>

class MyRpcError {
   public:
    std::string function;
    std::string error_code;

    MyRpcError(std::string function, std::string error_code)
        : function(function), error_code(error_code) {
    }
};

int main() {
    /* some code that emits MyRpcError */
    MyRpcError e(/* ... */);

    sentry_value_t fingerprint = sentry_value_new_list();
    sentry_value_append(fingerprint, sentry_value_new_string("{{ default }}"));
    sentry_value_append(fingerprint, sentry_value_new_string(e.function.c_str()));
    sentry_value_append(fingerprint, sentry_value_new_string(e.error_code.c_str()));

    sentry_value_t event = sentry_value_new_event();
    sentry_value_set_by_key(event, "fingerprint", fingerprint);
    /* add more attributes... */
    sentry_capture_event(event);
}

----------------------------------------

TITLE: Django WSGI Environment Sampling Context Example - Python
DESCRIPTION: Demonstrates the structure of the WSGI environment object added to sampling context by Django integration. The environ object contains parsed URL data which is useful when transaction starts before URL route resolution.

LANGUAGE: python
CODE:
{
  # This can be useful for cases in which the transaction starts before the URL
  # is resolved into a route (meaning the transaction's name won't help much),
  # as it contains parsed URL data
  "wsgi_environ": <dict>
}

----------------------------------------

TITLE: Installing Sentry SDK with pip
DESCRIPTION: Command to install or upgrade the Sentry SDK using pip package manager.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk

----------------------------------------

TITLE: Kafka Volume Cleanup Commands
DESCRIPTION: Series of commands to remove and recreate Kafka volumes

LANGUAGE: shell
CODE:
docker compose down --volumes

LANGUAGE: shell
CODE:
docker volume rm sentry-kafka
docker volume rm sentry-zookeeper

LANGUAGE: shell
CODE:
./install.sh

LANGUAGE: shell
CODE:
docker compose up --wait

----------------------------------------

TITLE: Initializing Sentry with Custom Event Processing in Dart
DESCRIPTION: Configures Sentry initialization with a custom 'beforeSend' callback. This callback modifies the event fingerprint for MyRpcException instances, incorporating the function name and HTTP status code.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.beforeSend = (event, hint) {
    if (event.throwable is MyRpcException) {
      final exception = event.throwable as MyRpcException;
      event = event.copyWith(fingerprint: [
        '{{ default }}',
        exception.function,
        exception.httpStatusCode.toString(),
      ]);
    }
    return event;
  };
});

----------------------------------------

TITLE: Setting Multiprocessing Start Method in Python
DESCRIPTION: This code demonstrates how to set the multiprocessing start method to 'spawn' in Python 3.12+ to avoid deprecation warnings related to fork() in multi-threaded processes.

LANGUAGE: python
CODE:
import sentry_sdk
import multiprocessing
import concurrent.futures

sentry_sdk.init()

if __name__ == "__main__":
    multiprocessing.set_start_method("spawn")
    pool = concurrent.futures.ProcessPoolExecutor()
    pool.submit(sentry_sdk.capture_message, "world")

----------------------------------------

TITLE: Simplified Metrics Configuration in Sentry v8
DESCRIPTION: Updated metrics configuration showing simplified initialization in Sentry v8.

LANGUAGE: TypeScript
CODE:
// v8
Sentry.init({
  dsn: "___PUBLIC_DSN___",
});

Sentry.metrics.increment("my_metric");

----------------------------------------

TITLE: Defining RPC Service Interface in Python
DESCRIPTION: Shows how to define an RPC service interface with regional method implementation. Includes service key definition, local mode specification, and method declaration with resolvers.

LANGUAGE: python
CODE:
from sentry.hybridcloud.rpc.resolvers import ByOrganizationSlug
from sentry.hybridcloud.rpc import RpcService, regional_rpc_method
from sentry.silo.base import SiloMode

class OrganizationService(RpcService):
    key = "organization"
    local_mode = SiloMode.REGION

    @classmethod
    def get_local_implementation(cls) -> RpcService:
        from sentry.organizations.services.organization.impl import (
          DatabaseBackedOrganizationService
        )

        return DatabaseBackedOrganizationService()

    @regional_rpc_method(
      resolve=ByOrganizationSlug(),
      return_none_if_mapping_not_found=True
    )
    @abstractmethod
    def get_org_by_slug(
        self,
        *,
        slug: str,
        user_id: int | None = None,
    ) -> RpcOrganizationSummary | None:
        ...

----------------------------------------

TITLE: Complete HTML Integration Example
DESCRIPTION: Full HTML example showing how to integrate and configure Raven.js with jQuery dependency and custom configuration options.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <title>Awesome stuff happening here</title>
  </head>
  <body>
    ...
    <script src="jquery.min.js"></script>
    <script
      src="https://cdn.ravenjs.com/3.26.4/raven.min.js"
      crossorigin="anonymous"
    ></script>
    <script>
      Raven.config("___PUBLIC_DSN___", {
        logger: "my-logger",
        whitelistUrls: [/disqus\.com/, /getsentry\.com/],
        ignoreErrors: ["fb_xd_fragment", /ReferenceError:.*/],
        includePaths: [/https?:\/\/(www\.)?getsentry\.com/],
      }).install();
    </script>
    <script src="myapp.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Creating Continuation Spans from Upstream Traces in Rust
DESCRIPTION: Shows how to create a new transaction span that continues a trace from upstream headers. This allows maintaining trace context across service boundaries.

LANGUAGE: rust
CODE:
// This needs to be a `impl Iterator<Item = (&str, &str)>` of header key/value pairs.
let headers = request.headers();
let tx_ctx = sentry::TransactionContext::continue_from_headers(
    "transaction name",
    "http.server",
    headers,
);
let transaction = sentry::start_transaction(tx_ctx);

----------------------------------------

TITLE: Verifying Sentry Integration with Laravel Artisan
DESCRIPTION: Use the sentry:test artisan command to verify that Sentry is correctly configured in your Laravel application.

LANGUAGE: shell
CODE:
php artisan sentry:test

----------------------------------------

TITLE: Sentry Cache Integration Configuration
DESCRIPTION: Configuration example showing how to set up cache prefix monitoring for Redis operations

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [
    Sentry.redisIntegration({
	    cachePrefixes: ['posts:', 'authors:'],
    }),
  ],
})

----------------------------------------

TITLE: Tracking All Feature Flag Evaluations with Sentry in JavaScript
DESCRIPTION: Sets up Sentry with OpenFeature integration to track all feature flag evaluations globally. Initializes Sentry with OpenFeature integration, configures the provider, and adds hooks for tracking feature flag evaluations across all clients.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/svelte';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
OpenFeature.addHooks(new Sentry.OpenFeatureIntegrationHook());

const client = OpenFeature.getClient();
const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Creating and Sending Log File as Breadcrumbs
DESCRIPTION: Demonstrates how to create a log file, add entries, send it as breadcrumbs with an event, and then remove the file.

LANGUAGE: bash
CODE:
echo "$(date +%c) This is a log record" >> output.log
echo "$(date +%c) This is another record" >> output.log
sentry-cli send-event -m "Demo Event" --logfile output.log
rm output.log

----------------------------------------

TITLE: Using withTouchEventBoundary HOC in React Native
DESCRIPTION: Shows how to use the Sentry.withTouchEventBoundary higher-order component to wrap the root app component for touch event tracking. This is an alternative to using the TouchEventBoundary component directly.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

const App = () => {
  return <RestOfTheApp />;
};

export default AppRegistry.registerComponent("Your Amazing App", () =>
  Sentry.withTouchEventBoundary(App)
);

----------------------------------------

TITLE: Creating Anchor Link within Same Page in Markdown
DESCRIPTION: Illustrates how to create an anchor link to content further down the same page.

LANGUAGE: markdown
CODE:
On this page, you can control the frequency of your [email notifications](#notifications), [change your primary email](#emails), and update your security settings.

----------------------------------------

TITLE: Capturing Messages with Sentry in Ruby
DESCRIPTION: This snippet demonstrates how to capture a message using Sentry in Ruby, specifying a custom log level. It shows the syntax for the capture_message method and how to set the logging level.

LANGUAGE: ruby
CODE:
Sentry.capture_message("this is not important", level: :info)

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Release in Unity C#
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in a Unity project using C#. It shows how to set a custom release version during initialization. The Sentry SDK is used for error tracking and performance monitoring in applications.

LANGUAGE: csharp
CODE:
using Sentry.Unity;

SentryUnity.Init(o =>
{
    o.Release = "my-project-name@2.3.12";
});

----------------------------------------

TITLE: Manually Refreshing IP Geolocation Database in Sentry
DESCRIPTION: This bash command can be used to manually refresh the IP address geolocation database in a self-hosted Sentry installation.

LANGUAGE: bash
CODE:
./install/geoip.sh

----------------------------------------

TITLE: Configuring ANR Detection in Sentry SDK
DESCRIPTION: Demonstrates how to initialize Sentry with the new ANR (Application Not Responding) integration. The configuration enables ANR detection with stack trace capture using the anrIntegration option.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.anrIntegration({ captureStackTrace: true })
  ],
});

----------------------------------------

TITLE: Registering DSN in Nancy Application Startup in C#
DESCRIPTION: Register the Sentry DSN in a Nancy application's startup method.

LANGUAGE: csharp
CODE:
protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)
{
    container.Register(new Dsn("___PUBLIC_DSN___"));
}

----------------------------------------

TITLE: Configuring Transaction Sampling Rate in Sentry JavaScript SDK
DESCRIPTION: This code snippet demonstrates how to set the traces-sample-rate option in Sentry.init to control the percentage of transactions sent to Sentry. The value should be between 0 and 1, representing the probability of a transaction being recorded.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  integrations: [new BrowserTracing()],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Creating Dedicated Metric Spans in JavaScript
DESCRIPTION: This example shows how to create dedicated spans for grouping related attributes or metrics using Sentry's JavaScript SDK. It creates a span for monitoring external API usage with performance and context data.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Third-Party API Usage',
    op: 'external.api',
    attributes: {
      // Performance metrics
      'api.response_time_ms': 245,
      
      // Context data
      'feature.using_api': 'image_recognition',
      'user.plan': 'enterprise'
    }
  },
  async () => {
    // API call implementation
  }
);

----------------------------------------

TITLE: Logging with MDC Extras in Java and Kotlin
DESCRIPTION: These snippets demonstrate how to use SLF4J's MDC to add extra data to log events in Java and Kotlin. They show setting MDC values and logging a message, which will include the MDC data when sent to Sentry.

LANGUAGE: java
CODE:
import java.util.logging.Level;
import org.slf4j.MDC;

void logWithExtras() {
  // MDC extras
  MDC.put("Environment", "Development");
  MDC.put("OS", "Linux");

  // This sends an event where the Environment and OS MDC values are set as MDC entries
  logger.log(Level.SEVERE, "This is a test");
}

LANGUAGE: kotlin
CODE:
import java.util.logging.Level
import org.slf4j.MDC

fun logWithExtras() {
  // MDC extras
  MDC.put("Environment", "Development")
  MDC.put("OS", "Linux")

  // This sends an event where the Environment and OS MDC values are set as MDC entries
  logger.log(Level.SEVERE, "This is a test")
}

----------------------------------------

TITLE: Emitting a Gauge Metric in Laravel with Sentry
DESCRIPTION: This code example shows how to emit a gauge metric in Laravel using Sentry. It demonstrates tracking page load time similar to the distribution example, but using a gauge instead.

LANGUAGE: php
CODE:
\Sentry\metrics()->gauge(
    key: 'page_load',
    value: 15.0,
    unit: \Sentry\Metrics\MetricsUnit::millisecond(),
    tags: [
        'page' => '/home',
    ],
)

----------------------------------------

TITLE: Configuring ContextLines Integration in Sentry
DESCRIPTION: The ContextLines integration is a default Sentry integration that adds source code context to stack frames. It can be configured to control how many lines of context are collected around each stack frame line number.

LANGUAGE: javascript
CODE:
Sentry.contextLinesIntegration

----------------------------------------

TITLE: Initializing Sentry with Koa.js using ESM
DESCRIPTION: Sets up a basic Koa.js application with Sentry error handling integration using ES Modules syntax. Requires instrument.js to be imported first for proper instrumentation setup.

LANGUAGE: javascript
CODE:
// Ensure to import this before importing any other modules!
import './instrument.js'

import Koa from 'koa';
import Router from '@koa/router';
import * as Sentry from "@sentry/node";

const router = new Router();
const app = new Koa();

Sentry.setupKoaErrorHandler(app);

// Add your routes, etc.

app.listen(3030)

----------------------------------------

TITLE: Adding ProGuard UUID to AndroidManifest.xml
DESCRIPTION: Add the ProGuard UUID to the AndroidManifest.xml file to associate it with the upload. This is necessary for the Android Sentry SDK to know the UUID of the mapping file.

LANGUAGE: xml
CODE:
<application>
  <meta-data android:name="io.sentry.proguard-uuid" android:value="A_VALID_UUID" />
</application>

----------------------------------------

TITLE: Installing Sentry Ruby SDK without Profiling
DESCRIPTION: Basic installation of the sentry-ruby gem by adding it to the project's Gemfile dependencies.

LANGUAGE: ruby
CODE:
gem "sentry-ruby"

----------------------------------------

TITLE: Configuring Browser Tracing Integration with URL Pattern Matching
DESCRIPTION: Demonstrates how to configure the browserTracingIntegration to customize transaction names based on URL patterns, replacing hashes and digits with placeholders for better grouping.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  // ...
  integrations: [
    Sentry.browserTracingIntegration({
      beforeStartSpan: (context) => {
        return {
          ...context,
          // You could use your UI's routing library to find the matching
          // route template here. We don't have one right now, so do some basic
          // parameter replacements.
          name: location.pathname
            .replace(/\/[a-f0-9]{32}/g, "/<hash>")
            .replace(/\/\d+/g, "/<digits>")
        };
      },
    }),
  ],
});

----------------------------------------

TITLE: Configuring Sentry SDK User Scope in Swift
DESCRIPTION: This snippet demonstrates how to configure the Sentry SDK scope with user information in Swift. It creates a User object and sets either the userId or username, then assigns it to the scope.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.configureScope { scope in
    let user = User()

    // User Id:
    user.userId = clientUser.id
    // Or Username:
    user.username = clientUser.username
    scope.setUser(user)
}

----------------------------------------

TITLE: Defining CacheError Enum in Rust
DESCRIPTION: This Rust code defines the CacheError enum, which represents various error cases that can occur during file fetching and caching operations in Symbolicator. It includes errors for not found, permission denied, timeout, download error, malformed data, and internal errors.

LANGUAGE: rust
CODE:
pub enum CacheError {
    NotFound,
    PermissionDenied(String),
    Timeout(Duration),
    DownloadError(String),
    Malformed(String),
    InternalError,
}

----------------------------------------

TITLE: Error Response Format
DESCRIPTION: Example of how to return error messages that will be displayed to users in the UI

LANGUAGE: json
CODE:
{ "message": "Channel no longer exists!" }

----------------------------------------

TITLE: Installing Sentry Remix SDK with yarn
DESCRIPTION: This snippet demonstrates the installation of the @sentry/remix package using yarn. It adds the package to the project's dependencies.

LANGUAGE: bash
CODE:
yarn add @sentry/remix

----------------------------------------

TITLE: Installing @sentry/react-native Package Manually in Expo
DESCRIPTION: Manually install the @sentry/react-native package in your Expo project using various package managers.

LANGUAGE: bash
CODE:
npx expo install @sentry/react-native

LANGUAGE: bash
CODE:
npm install @sentry/react-native --save

LANGUAGE: bash
CODE:
yarn add @sentry/react-native

LANGUAGE: bash
CODE:
pnpm add @sentry/react-native

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Sampling in Objective-C
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in Objective-C, configuring the DSN and implementing a custom sampling strategy. It shows how to set a uniform sample rate and use a custom sampler block to determine trace sampling rates for different URL paths.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions * _Nonnull options) {
    options.dsn = @"___PUBLIC_DSN___";

    // To set a uniform sample rate
    options.tracesSampleRate = @1.0;

    options.tracesSampler = ^NSNumber * _Nullable(SentrySamplingContext * _Nonnull samplingContext) {

        NSString *url = samplingContext.customSamplingContext[@"url"];

        //The desired information does not exists, do not sample.
        if (url == nil) return @0.0;

        // These are important - take a big sample
        if ([url isEqualToString:@"/payment"]) return @0.5;

        // Search is less important and happen much more frequently - only take 1%
        if ([url isEqualToString:@"/search"]) return @0.01;

        // The health check endpoint is just noise - drop all transactions
        if ([url isEqualToString:@"/health"]) return @0.0

        // Default sample rate
        return @0.01;

        // Or return nil to fallback to options.TracesSampleRate
        // return nil
    };
}];

----------------------------------------

TITLE: Cloning Godot Engine Repository
DESCRIPTION: Git commands to clone the Godot Engine repository and checkout a specific version tag.

LANGUAGE: bash
CODE:
git clone https://github.com/godotengine/godot
cd godot
git checkout 4.4-stable

----------------------------------------

TITLE: Configuring Sentry to Send Default PII in Android Manifest
DESCRIPTION: Enable sending of default personally identifiable information (PII) in Sentry events via Android manifest.

LANGUAGE: xml
CODE:
<application>
  <meta-data android:name="io.sentry.send-default-pii" android:value="true" />
</application>

----------------------------------------

TITLE: Configuring DOM Selectors for Unblocking and Unmasking in Sentry v8
DESCRIPTION: Shows how to explicitly specify default DOM selectors for unblocking and unmasking elements in Sentry v8+. This configuration is necessary to maintain behavior compatibility with previous versions.

LANGUAGE: javascript
CODE:
Sentry.replayIntegration({
  unblock: ['.sentry-unblock, [data-sentry-unblock]'],
  unmask: ['.sentry-unmask, [data-sentry-unmask]'],
})

----------------------------------------

TITLE: Configuring Apple Privacy Manifest for Sentry Cocoa SDK
DESCRIPTION: XML configuration for PrivacyInfo.xcprivacy file that declares privacy-relevant API usage and data collection types required by Sentry SDK. Includes declarations for crash data, performance data, diagnostic data, and various API access types like UserDefaults, SystemBootTime, and FileTimestamp.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>NSPrivacyCollectedDataTypes</key>
	<array>
		<dict>
			<key>NSPrivacyCollectedDataType</key>
			<string>NSPrivacyCollectedDataTypeCrashData</string>
			<key>NSPrivacyCollectedDataTypeLinked</key>
			<false/>
			<key>NSPrivacyCollectedDataTypeTracking</key>
			<false/>
			<key>NSPrivacyCollectedDataTypePurposes</key>
			<array>
				<string>NSPrivacyCollectedDataTypePurposeAppFunctionality</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyCollectedDataType</key>
			<string>NSPrivacyCollectedDataTypePerformanceData</string>
			<key>NSPrivacyCollectedDataTypeLinked</key>
			<false/>
			<key>NSPrivacyCollectedDataTypeTracking</key>
			<false/>
			<key>NSPrivacyCollectedDataTypePurposes</key>
			<array>
				<string>NSPrivacyCollectedDataTypePurposeAppFunctionality</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyCollectedDataType</key>
			<string>NSPrivacyCollectedDataTypeOtherDiagnosticData</string>
			<key>NSPrivacyCollectedDataTypeLinked</key>
			<false/>
			<key>NSPrivacyCollectedDataTypeTracking</key>
			<false/>
			<key>NSPrivacyCollectedDataTypePurposes</key>
			<array>
				<string>NSPrivacyCollectedDataTypePurposeAppFunctionality</string>
			</array>
		</dict>
	</array>
	<key>NSPrivacyAccessedAPITypes</key>
	<array>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryUserDefaults</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>CA92.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategorySystemBootTime</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>35F9.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryFileTimestamp</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>C617.1</string>
			</array>
		</dict>
	</array>
</dict>
</plist>

----------------------------------------

TITLE: Initializing Sentry with Redis Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the Redis integration enabled. It uses the redisIntegration() function to add instrumentation for Redis operations.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.redisIntegration()],
});

----------------------------------------

TITLE: Uploading Debug Files Using Sentry CLI
DESCRIPTION: Command for uploading debug files to Sentry using the debug-files upload command. The command recursively scans a specified folder and uploads debug files to Sentry. Can be used with --wait flag for manual testing.

LANGUAGE: cli
CODE:
sentry-cli debug-files upload

----------------------------------------

TITLE: Capturing Message with Sentry SDK in Swift
DESCRIPTION: This snippet shows how to import the Sentry SDK and capture a simple message in Swift. It demonstrates the basic usage of the SentrySDK.capture() method.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.capture(message: "My first test message")

----------------------------------------

TITLE: Sending Extra Data with Sentry CLI
DESCRIPTION: Shows how to attach extra data to an event using the -e parameter with key-value pairs.

LANGUAGE: bash
CODE:
sentry-cli send-event -m "a failure" -e task:create-user -e object:42

----------------------------------------

TITLE: Allowed Domains Configuration
DESCRIPTION: Configuration for Origin or Referer URLs from which Sentry should accept events.

LANGUAGE: json
CODE:
{
  "config": {
    "allowedDomains": ["mycompany.com"]
  }
}

----------------------------------------

TITLE: Optimized Django Query Using select_related
DESCRIPTION: Improved version that uses select_related to fetch book and author data in a single query, eliminating the N+1 problem.

LANGUAGE: python
CODE:
from django.http import HttpResponse

def books(request):
    books = Book.objects.select_related("author").all()[:10]
    book_list = [book.title + " by " + book.author.name for book in books]
    return HttpResponse((", ").join(book_list))

----------------------------------------

TITLE: Sentry Integrations Feature Matrix Table
DESCRIPTION: A markdown table listing all available Sentry integrations with their features including auto-enablement status, error handling support, tracing capabilities, and additional context provision.

LANGUAGE: markdown
CODE:
|                                                           | **Auto Enabled** | **Errors** | **Tracing** | **Additional Context** |
| --------------------------------------------------------- | :--------------: | :--------: | :---------: | :--------------------: |
| [`amqplibIntegration`](./amqplib)                         |        ✓         |            |      ✓      |                        |
| [`consoleIntegration`](./console)                         |        ✓         |            |             |           ✓            |
| [`contextLinesIntegration`](./contextlines)               |        ✓         |     ✓      |             |                        |
| [`dedupeIntegration`](./dedupe)                           |        ✓         |     ✓      |             |                        |
| [`functionToStringIntegration`](./functiontostring)       |        ✓         |            |             |                        |
| [`genericPoolIntegration`](./genericpool)                 |        ✓         |            |      ✓      |                        |
| [`graphqlIntegration`](./graphql)                         |        ✓         |            |      ✓      |                        |
| [`hapiIntegration`](./hapi)                               |        ✓         |            |      ✓      |                        |
| [`httpIntegration`](./http)                               |        ✓         |     ✓      |      ✓      |           ✓            |
| [`inboundFiltersIntegration`](./inboundfilters)           |        ✓         |     ✓      |             |                        |
| [`kafkaIntegration`](./kafka)                             |        ✓         |            |      ✓      |                        |
| [`linkedErrorsIntegration`](./linkederrors)               |        ✓         |     ✓      |             |                        |
| [`lruMemoizerIntegration`](./lrumemoizer)                 |        ✓         |            |      ✓      |                        |
| [`modulesIntegration`](./modules)                         |        ✓         |            |             |           ✓            |
| [`mongoIntegration`](./mongo)                             |        ✓         |            |      ✓      |                        |
| [`mongooseIntegration`](./mongoose)                       |        ✓         |            |      ✓      |                        |
| [`mysqlIntegration`](./mysql)                             |        ✓         |            |      ✓      |                        |
| [`mysql2Integration`](./mysql2)                           |        ✓         |            |      ✓      |                        |
| [`nodeContextIntegration`](./nodecontext)                 |        ✓         |            |             |           ✓            |
| [`nativeNodeFetchIntegration`](./nodefetch)               |        ✓         |            |      ✓      |           ✓            |
| [`onUncaughtExceptionIntegration`](./onuncaughtexception) |        ✓         |     ✓      |             |                        |
| [`onUnhandledRejectionIntegration`](./unhandledrejection) |        ✓         |     ✓      |             |                        |
| [`postgresIntegration`](./postgres)                       |        ✓         |            |      ✓      |                        |
| [`redisIntegration`](./redis)                             |        ✓         |            |      ✓      |                        |
| [`requestDataIntegration`](./requestdata)                 |        ✓         |            |      ✓      |                        |
| [`tediousIntegration`](./tedious)                         |        ✓         |            |      ✓      |                        |
| [`childProcessIntegration`](./childProcess)               |        ✓         |            |             |           ✓            |
| [`anrIntegration`](./anr)                                 |                  |     ✓      |             |                        |
| [`captureConsoleIntegration`](./captureconsole)           |                  |            |             |           ✓            |
| [`dataloaderIntegration`](./dataloader)                   |                  |            |      ✓      |                        |
| [`extraErrorDataIntegration`](./extraerrordata)           |                  |            |             |           ✓            |
| [`fsIntegration`](./fs)                                   |                  |            |      ✓      |                        |
| [`knexIntegration`](./knex)                               |                  |            |      ✓      |                        |
| [`localVariablesIntegration`](./localvariables)           |                  |     ✓      |             |                        |
| [`nodeProfilingIntegration`](./nodeprofiling)             |                  |            |      ✓      |                        |
| [`prismaIntegration`](./prisma)                           |                  |            |      ✓      |                        |
| [`rewriteFramesIntegration`](./rewriteframes)             |                  |     ✓      |             |                        |
| [`trpcMiddleware`](./trpc)                                |                  |     ✓      |      ✓      |           ✓            |

----------------------------------------

TITLE: Configuring Datadog Backend for Sentry Metrics in Python
DESCRIPTION: Demonstrates how to set up the Datadog backend for Sentry metrics in the sentry.conf.py file.

LANGUAGE: python
CODE:
SENTRY_METRICS_BACKEND = 'sentry.metrics.datadog.DatadogMetricsBackend'
SENTRY_METRICS_OPTIONS = {
    'api_key': '...',
    'app_key': '...',
    'tags': {},
}

----------------------------------------

TITLE: Installing Sentry Angular SDK with npm
DESCRIPTION: This command installs the @sentry/angular package using npm and saves it as a dependency in the project's package.json file.

LANGUAGE: bash
CODE:
npm install @sentry/angular --save

----------------------------------------

TITLE: Implementing BeforeSend Hook in RavenClient in C#
DESCRIPTION: Use the BeforeSend function to inspect or manipulate data before sending to Sentry.

LANGUAGE: csharp
CODE:
ravenClient.BeforeSend = requester =>
{
    // Here you can log data from the requester
    // or replace it entirely if you want.
    return requester;
}

----------------------------------------

TITLE: Initializing Sentry with BeforeSend Callback in Java
DESCRIPTION: This snippet shows how to initialize Sentry in Java and set up a BeforeSend callback to customize event fingerprints for SQLException instances. It uses the Sentry SDK and java.sql.SQLException.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import java.sql.SQLException;
import java.util.Arrays;

Sentry.init(options -> {
  options.setBeforeSend((event, hint) -> {
    if (event.getThrowable() instanceof SQLException) {
      event.setFingerprints(Arrays.asList("database-connection-error"));
    }
    return event;
  });
});

----------------------------------------

TITLE: Installing Sentry SDK with Loguru Support
DESCRIPTION: Command to install sentry-sdk package with loguru integration support using pip.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[loguru]'

----------------------------------------

TITLE: Configuring Discord Credentials in Sentry YAML
DESCRIPTION: YAML configuration snippet for adding Discord bot credentials to Sentry's config.yml file. Requires application ID, public key, client secret, and bot token from Discord Developer Portal.

LANGUAGE: yaml
CODE:
discord.application-id: "<application id>"
discord.public-key: "<public key>"
discord.client-secret: "<client secret>"
discord.bot-token: "<bot token>"

----------------------------------------

TITLE: Configuring Discord Credentials in Sentry YAML
DESCRIPTION: YAML configuration snippet for adding Discord bot credentials to Sentry's config.yml file. Requires application ID, public key, client secret, and bot token from Discord Developer Portal.

LANGUAGE: yaml
CODE:
discord.application-id: "<application id>"
discord.public-key: "<public key>"
discord.client-secret: "<client secret>"
discord.bot-token: "<bot token>"

----------------------------------------

TITLE: Setting Masking Tag with Sentry-specific ID in Kotlin for Session Replay
DESCRIPTION: This Kotlin code demonstrates how to set a masking tag using a Sentry-specific ID programmatically when the view already has a tag assigned.

LANGUAGE: kotlin
CODE:
view.setTag(io.sentry.android.replay.R.id.sentry_privacy, "mask|unmask")

----------------------------------------

TITLE: Installing Sentry Angular SDK with pnpm
DESCRIPTION: This command installs the Sentry Angular SDK using pnpm (performant npm) package manager. PNPM will add the package to dependencies in package.json.

LANGUAGE: bash
CODE:
pnpm add @sentry/angular

----------------------------------------

TITLE: Adding Authentication Breadcrumb in F#
DESCRIPTION: F# implementation of adding an authentication breadcrumb to Sentry. Uses positional parameters and passes null for optional parameters. Records the same user authentication information as the C# version.

LANGUAGE: fsharp
CODE:
SentrySdk.AddBreadcrumb(
    "Authenticated user " + user.Email,
    "auth",
    null,
    null,
    BreadcrumbLevel.Info)

----------------------------------------

TITLE: Installing Excimer Extension for Profiling
DESCRIPTION: Command to install the Excimer extension via PECL for PHP profiling support. Required for Linux or macOS systems.

LANGUAGE: bash
CODE:
pecl install excimer

----------------------------------------

TITLE: Disabling Additional Context Collection
DESCRIPTION: Options to disable additional device context collection that may cause ANR issues.

LANGUAGE: xml
CODE:
<application>
  <meta-data android:name="io.sentry.additional-context" android:value="false" />
</application>

LANGUAGE: java
CODE:
options.setCollectAdditionalContext(false);

----------------------------------------

TITLE: Installing Sentry SDK via pip
DESCRIPTION: Command to install the Sentry SDK package from PyPI using pip.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk

----------------------------------------

TITLE: User Feedback Payload Example in JSON
DESCRIPTION: Example JSON payload for submitting user feedback through Sentry's envelope system. Includes required and optional fields in the feedback context object.

LANGUAGE: json
CODE:
{
  "event_id": "9ec79c33ec9942ab8353589fcb2e04dc",
  "timestamp": "2011-05-02T17:41:36Z",
  "platform": "javascript",
  "level": "error",
  "contexts": {
    "feedback": {
      "contact_email": "john@example.com",
      "name": "John Smith",
      "message": "I love session replay!",
      "url": "https://sentry.io/replays/",
      "associated_event_id": "32fd1995636d446385016e2747623e11",
      "replay_id":"82840977e85b4ed3bc27f7b5b25cec15"
    }
  }
}

----------------------------------------

TITLE: Configuring Auto Breadcrumbs in Raven for Node.js
DESCRIPTION: This example demonstrates how to configure automatic breadcrumb collection in the Raven configuration.

LANGUAGE: javascript
CODE:
autoBreadcrumbs: {
    'console': false,  // console logging
    'http': true,     // http and https requests
}

----------------------------------------

TITLE: Configuring Auto Breadcrumbs in Raven for Node.js
DESCRIPTION: This example demonstrates how to configure automatic breadcrumb collection in the Raven configuration.

LANGUAGE: javascript
CODE:
autoBreadcrumbs: {
    'console': false,  // console logging
    'http': true,     // http and https requests
}

----------------------------------------

TITLE: Custom User Provider Implementation for Spring Boot 2
DESCRIPTION: Java implementation of SentryUserProvider interface for Spring Boot 2 to provide custom user information to Sentry

LANGUAGE: java
CODE:
import org.springframework.stereotype.Component;
import io.sentry.protocol.User;
import io.sentry.spring.SentryUserProvider;

@Component
class CustomSentryUserProvider implements SentryUserProvider {
  public User provideUser() {
    User user = new User();
    // ... set user information
    return user
  }
}

----------------------------------------

TITLE: Tracing Gesture Events with Sentry in React Native
DESCRIPTION: This snippet demonstrates how to use the 'sentryTraceGesture' wrapper to create UI transactions from React Native Gesture Handler. It shows how to wrap individual gestures with unique labels for pinch and long press gestures.

LANGUAGE: javascript
CODE:
import React from "react";
import { Gesture, GestureDetector } from "react-native-gesture-handler";
import { sentryTraceGesture } from "@sentry/react-native";

export const GesturesTracingScreen = () => {
  const pinch = Gesture.Pinch();
  const longPress = Gesture.LongPress();

  const gesture = Gesture.Race(
    sentryTraceGesture("pinch-to-zoom", pinch),
    sentryTraceGesture("long-press-to-cancel", longPress)
  );

  return <GestureDetector gesture={gesture}>// ...</GestureDetector>;
};

----------------------------------------

TITLE: Including Platform-Specific Content for Default Sampling Context in React
DESCRIPTION: This code snippet uses a custom React component to include platform-specific content for default sampling context in Sentry's performance monitoring feature. The includePath prop specifies the path to the content to be included.

LANGUAGE: jsx
CODE:
<PlatformContent includePath="performance/default-sampling-context-platform" />

----------------------------------------

TITLE: Configuring Sentry SDK with PII Options
DESCRIPTION: Configuration example showing how to enable request body capture by setting send_default_pii option to True.

LANGUAGE: python
CODE:
sentry_sdk.init(
    # same options as above
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
)

----------------------------------------

TITLE: Initializing Sentry Transaction with Custom Data in Ruby
DESCRIPTION: Shows how to start a Sentry transaction with custom parameters including operation name, query parameters, and sampling context. Demonstrates handling of PII and large data objects in the sampling context that won't be recorded.

LANGUAGE: ruby
CODE:
Sentry.start_transaction(
  name: "GET /search",
  op: "search",
  data: {
    query_params: {
      animal: "dog",
      type: "very good"
    }
  },
  # `custom_sampling_context` - won't be recorded
  custom_sampling_context: {
    # PII
    user_id: "12312012",
    # too big to send
    search_results: { ... }
  }
)

----------------------------------------

TITLE: Setting Maximum Attachment Size in JavaScript
DESCRIPTION: This snippet demonstrates how to set the maximum attachment size in bytes using SentryOptions. The default size is 20 MiB.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  maxAttachmentSize: 20 * 1024 * 1024, // 20 MiB in bytes
});

----------------------------------------

TITLE: Enabling GraphQL Client Error Capture with Sentry Tracing
DESCRIPTION: Configure Apollo Client to capture GraphQL client errors using Sentry tracing.

LANGUAGE: kotlin
CODE:
import com.apollographql.apollo3.ApolloClient
import io.sentry.apollo3.sentryTracing

val apollo = ApolloClient.builder()
    .serverUrl("https://your-api-host/")
    .sentryTracing(captureFailedRequests = true)
    .build()

----------------------------------------

TITLE: OpenTelemetry Context Schema in TypeScript
DESCRIPTION: This code snippet defines the schema for the OpenTelemetry context that is added to Sentry events to indicate they originated from OpenTelemetry.

LANGUAGE: typescript
CODE:
type Primitive = number | string | boolean | bigint;

interface Attributes<T extends Primitive> {
  [key: string]: T | Array<T> | Record<string, T>;
}

interface OpenTelemetryContext {
  type?: 'otel';

  // https://github.com/open-telemetry/opentelemetry-proto/blob/724e427879e3d2bae2edc0218fff06e37b9eb46e/opentelemetry/proto/trace/v1/trace.proto#L174-L186
  attributes?: Attributes;

  // https://github.com/open-telemetry/opentelemetry-proto/blob/724e427879e3d2bae2edc0218fff06e37b9eb46e/opentelemetry/proto/resource/v1/resource.proto
  // Resource information.
  resource?: Attributes;
}

----------------------------------------

TITLE: Configuring Metrics in Java and Kotlin
DESCRIPTION: This snippet shows how to enable metrics in a Java or Kotlin application using Sentry. It demonstrates configuration in Java, Kotlin, and via a properties file.

LANGUAGE: Java
CODE:
import io.sentry.android.core.SentryAndroid;

Sentry.init(this, options -> {
  options.setEnableMetrics(true);
});

LANGUAGE: Kotlin
CODE:
import io.sentry.android.core.SentryAndroid

Sentry.init(this) { options ->
  options.enableMetrics = true
}

LANGUAGE: text
CODE:
sentry.enable-metrics=true

----------------------------------------

TITLE: Constructing Transaction Context in C - Thread Safety Warning
DESCRIPTION: Documentation for sentry_transaction_context_new() constructor, highlighting that the returned transaction context is not thread-safe and requires implementation of appropriate locking mechanisms when used across threads.

LANGUAGE: c
CODE:
/**
 * Constructs a new Transaction Context. The returned value needs to be passed
 * into `sentry_transaction_start` in order to be recorded and sent to sentry.
 *
 * [...]
 *
 * The returned value is not thread-safe. Users are expected to ensure that
 * appropriate locking mechanisms are implemented over the Transaction Context
 * if it needs to be mutated across threads. Methods operating on the
 * Transaction Context will mention what kind of expectations they carry if they
 * need to mutate or access the object in a thread-safe way.
 */

----------------------------------------

TITLE: Updating beforeNavigate to beforeStartSpan
DESCRIPTION: Demonstrates how to replace the beforeNavigate option with beforeStartSpan in the reactNativeTracingIntegration.

LANGUAGE: javascript
CODE:
Sentry.init({
  tracesSampleRate: 1.0,
  integrations: [
    Sentry.reactNativeTracingIntegration({
      beforeStartSpan: (options) => {
        return {
          ...options,
           op: 'navigation',
        };
      },
    }),
  ],
});

----------------------------------------

TITLE: Configuring Sentry Scope with Warning Level in Go
DESCRIPTION: This snippet demonstrates how to configure Sentry's scope by setting the error level to 'Warning'. It uses the ConfigureScope function and a closure to modify the scope.

LANGUAGE: go
CODE:
sentry.ConfigureScope(func(scope *sentry.Scope) {
	scope.SetLevel(sentry.LevelWarning)
})

----------------------------------------

TITLE: Exposing React Router Hooks
DESCRIPTION: Command to expose React Router hooks in the app folder, creating entry.client.tsx and entry.server.tsx files.

LANGUAGE: bash
CODE:
npx react-router reveal

----------------------------------------

TITLE: Initializing and Using Sentry in Go
DESCRIPTION: This snippet shows how to initialize Sentry with a DSN, capture a test message, and properly flush events. It includes error handling for initialization and uses a deferred flush to ensure all events are sent before the program exits.

LANGUAGE: go
CODE:
package main

import (
	"log"
	"time"

	"github.com/getsentry/sentry-go"
)

func main() {
	err := sentry.Init(sentry.ClientOptions{
		Dsn: "___PUBLIC_DSN___",
	})
	if err != nil {
		log.Fatalf("sentry.Init: %s", err)
	}
	defer sentry.Flush(2 * time.Second)

	sentry.CaptureMessage("It works!")
}

----------------------------------------

TITLE: Initializing Sentry with HTTP Client via Loader v8
DESCRIPTION: Implements Sentry with HTTP client integration using the v8 Loader script. Uses lazy loading pattern for the HTTP client integration through a Promise-based approach.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({
      // This option is required for capturing headers and cookies.
      sendDefaultPii: true,
    });

    Sentry.lazyLoadIntegration("httpClientIntegration").then((integration) => {
      Sentry.addIntegration(integration());
    });
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Running Java Application with Sentry Agent (Environment Variable)
DESCRIPTION: This command runs a Java application with the Sentry OpenTelemetry Agent enabled using environment variables. It sets the Sentry properties file and adds the agent to the Java Tool Options.

LANGUAGE: bash
CODE:
SENTRY_PROPERTIES_FILE=sentry.properties JAVA_TOOL_OPTIONS="-javaagent:sentry-opentelemetry-agent-{{@inject packages.version('sentry.java.opentelemetry-agent') }}.jar" java -jar your-application.jar

----------------------------------------

TITLE: Integrating Sentry with OpenFeature - Track Single Client
DESCRIPTION: Shows how to initialize Sentry with OpenFeature integration to track feature flag evaluations for a specific client instance. Adds hooks to an individual OpenFeature client instead of globally.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/react';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Bottle Route Definition Example
DESCRIPTION: Example showing route definition for demonstrating transaction naming styles

LANGUAGE: python
CODE:
@app.route("/myurl/<foo>")
def myendpoint():
    return "ok"

----------------------------------------

TITLE: Verifying Sentry Setup in Java Android Activity
DESCRIPTION: Java code snippet to add to an Android Activity for verifying Sentry integration by intentionally throwing and capturing an exception.

LANGUAGE: java
CODE:
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import java.lang.Exception;
import io.sentry.Sentry;

public class MyActivity extends AppCompatActivity {
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    try {
      throw new Exception("This is a test.");
    } catch (Exception e) {
      Sentry.captureException(e);
    }
  }
}

----------------------------------------

TITLE: Configuring NLog XML for Sentry Integration
DESCRIPTION: NLog XML configuration file that sets up Sentry as a logging target. Includes DSN configuration and environment setting.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
>
  <extensions>
    <add assembly="Sentry.NLog" />
  </extensions>
  <targets>
    <target
      xsi:type="Sentry"
      name="sentry"
      dsn="___PUBLIC_DSN___"
      environment="Development">
    </target>
  </targets>

  <rules>
    <logger name="*" writeTo="sentry" />
  </rules>
</nlog>

----------------------------------------

TITLE: Starting Strawberry GraphQL Server
DESCRIPTION: Launch the Strawberry GraphQL server using the command-line interface.

LANGUAGE: bash
CODE:
strawberry server schema

----------------------------------------

TITLE: Configuring Metric Options in Python with Sentry
DESCRIPTION: Demonstrates how to configure metric options using the '_experiments' parameter during SDK initialization. The example shows setting a callback function and disabling metric code locations.

LANGUAGE: python
CODE:
def before_emit(key, value, unit, tags):
    if key == "removed-metric":
        return False
    tags["extra"] = "foo"
    del tags["release"]
    return True

sentry_sdk.init(
    ...
    _experiments={
        "before_emit_metric": before_emit,
        "metric_code_locations": False,
    }
)

----------------------------------------

TITLE: Initializing Sentry with Transaction Attributes in Java
DESCRIPTION: Configures Sentry initialization with a beforeSendTransaction hook that adds custom attributes to transaction spans. Sets 'myAttribute' on both the root span context and all child spans.

LANGUAGE: java
CODE:
Sentry.init(options -> {
    options.setBeforeSendTransaction((transaction, hint) -> {
        
        // set the attribute on the root span
        if (transaction.getContexts().getTrace() == null) {
            SpanContext spanContext = new SpanContext("op");
            transaction.getContexts().setTrace(spanContext);
        }
        transaction.getContexts().getTrace().setData("myAttribute", "myValue");

        // and on all child spans
        transaction.getSpans().forEach(span -> {
            if (span.getData() == null) {
                span.setData(new HashMap<>());
            }
            span.getData().put("myAttribute", "myValue");
        });

        return transaction;
    });
});

----------------------------------------

TITLE: Cloning Sample Repository
DESCRIPTION: Command to clone the frontend tutorial repository from GitHub to local environment.

LANGUAGE: bash
CODE:
git clone git@github.com:<your_username>/frontend-tutorial.git

----------------------------------------

TITLE: Configuring Sentry SDK Interface in JSON
DESCRIPTION: Example payload showing the SDK configuration portion of a Sentry event. Demonstrates proper SDK naming, versioning, integrations, features, and package specifications.

LANGUAGE: json
CODE:
{
  "sdk": {
    "name": "sentry.javascript.react-native",
    "version": "1.0.0",
    "integrations": ["redux"],
    "features": ["capture_failed_requests"],
    "packages": [
      {
        "name": "npm:@sentry/react-native",
        "version": "0.39.0"
      },
      {
        "name": "git:https://github.com/getsentry/sentry-cocoa.git",
        "version": "4.1.0"
      }
    ]
  }
}

----------------------------------------

TITLE: Setting Transaction Name with Sentry SDK 2.x in Python
DESCRIPTION: This snippet demonstrates how to set a transaction name using Sentry SDK version 2.x. It uses the get_current_scope() method to access the current scope and then sets the transaction name.

LANGUAGE: python
CODE:
import sentry_sdk

scope = sentry_sdk.get_current_scope()
scope.set_transaction_name("UserListView")

----------------------------------------

TITLE: Creating Sentry Attachment from File Path in C++
DESCRIPTION: Demonstrates how to create a new Sentry attachment object and initialize it with a file path and filename. The code shows both the header inclusion and the actual attachment creation process.

LANGUAGE: cpp
CODE:
#include "SentryAttachment.h"

const FString& Path = "your/path/file.log";
const FString& Filename = "file.log";

USentryAttachment* Attachment = NewObject<USentryAttachment>();
Attachment->InitializeWithPath(Path, Filename);

----------------------------------------

TITLE: Creating Sentry Attachment in Kotlin
DESCRIPTION: Shows how to create a file attachment in Sentry using Kotlin. The attachment is created with bytes data and a filename, using Kotlin's more concise syntax.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.Attachment

val attachment = Attachment(bytes, "file.log")

----------------------------------------

TITLE: Configuring Sentry SDK via C# Code
DESCRIPTION: Shows how to configure the Sentry SDK programmatically in C#. Includes setup for breadcrumbs, event levels, user context, and custom tags.

LANGUAGE: csharp
CODE:
LogManager.Configuration.AddSentry(o =>
{
    o.Layout = "${message}";
    o.BreadcrumbLayout = "${logger}: ${message}";
    o.MinimumBreadcrumbLevel = LogLevel.Debug;
    o.MinimumEventLevel = LogLevel.Error;
    o.Dsn = DsnSample;
    o.AttachStacktrace = true;
    o.SendDefaultPii = true;
    o.IncludeEventDataOnBreadcrumbs = true;
    o.ShutdownTimeoutSeconds = 5;
    o.User = new SentryNLogUser
    {
        Id = "${mdlc:item=id}",
        Username = "${mdlc:item=username}",
        Email = "${mdlc:item=email}",
        IpAddress = "${mdlc:item=ipAddress}",
        Other =
        {
            new TargetPropertyWithContext("mood", "joyous")
        },
    };
    o.AddTag("logger", "${logger}");
});

----------------------------------------

TITLE: Configuring Sentry User Data in GDScript
DESCRIPTION: Creates a new SentryUser object and populates it with user data from an existing client_user object before setting it in the SentrySDK. Maps basic user identifiers including ID and username.

LANGUAGE: gdscript
CODE:
# Assuming client_user is an Object containing user data.
var user := SentryUser.new()
user.id = client_user.id
user.username = client_user.username
SentrySDK.set_user(user)

----------------------------------------

TITLE: Creating JVM Source Bundles with Sentry CLI
DESCRIPTION: Use the 'sentry-cli debug-files bundle-jvm' command to create a source bundle for a source directory. This is useful for JVM-based languages like Java or Kotlin when not using Sentry's build tool plugins.

LANGUAGE: bash
CODE:
sentry-cli debug-files bundle-jvm \
    --output some/dir \
    --debug-id A_VALID_UUID \
    path/to/source/dir

----------------------------------------

TITLE: Configuring Sentry DSN in Laravel
DESCRIPTION: Add your Sentry DSN to the config/sentry.php file to enable error reporting to your Sentry project.

LANGUAGE: php
CODE:
<?php

return array(
    'dsn' => '___PUBLIC_DSN___',

    // ...
);

----------------------------------------

TITLE: Instrumenting Route Performance in Ember
DESCRIPTION: Implementation of route performance monitoring using the instrumentRoutePerformance wrapper function.

LANGUAGE: javascript
CODE:
import Route from "@ember/routing/route";
import { instrumentRoutePerformance } from "@sentry/ember";

class MyRoute extends Route {
  model() {
    //...
  }
}

export default instrumentRoutePerformance(MyRoute);

----------------------------------------

TITLE: Forcing Sampling Decisions in Sentry
DESCRIPTION: Method to explicitly set sampling decisions during transaction creation, bypassing the normal sampling rate and sampling function configurations.



----------------------------------------

TITLE: Configuring Sentry SDK in Bun
DESCRIPTION: This snippet initializes Sentry in a Bun application. It sets up error monitoring and performance tracing with a 100% sample rate. The code should be placed in an 'instrument.js' file and imported before any other modules.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/bun";

// Ensure to call this before importing any other modules!
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Add Performance Monitoring by setting tracesSampleRate
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Kotlin
DESCRIPTION: Demonstrates error handling using Sentry's exception capture functionality. The function wraps a potential exception in a try-catch block and reports it to Sentry using captureException(). Requires Sentry Kotlin multiplatform SDK to be initialized in the project.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry

fun captureError() {
  try {
    throw Exception("This is a test.")
  } catch (e: Exception) {
    Sentry.captureException(e)
  }
}

----------------------------------------

TITLE: HTTPSyncTransport Structure Definition
DESCRIPTION: Definition of the blocking HTTPSyncTransport structure with configurable timeout. Timeout defaults to 30 seconds.

LANGUAGE: go
CODE:
// HTTPSyncTransport is an implementation of `Transport` interface which blocks after each captured event.
type HTTPSyncTransport struct {
	// HTTP Client request timeout. Defaults to 30 seconds.
	Timeout time.Duration
}

----------------------------------------

TITLE: Uploading dSYMs using sentry-cli
DESCRIPTION: Command line script to upload debug symbol files to Sentry using sentry-cli. Includes option for source context upload with --include-sources flag.

LANGUAGE: bash
CODE:
sentry-cli debug-files upload --auth-token ___ORG_AUTH_TOKEN___ \
  --include-sources \
  --org ___ORG_SLUG___ \
  --project ___PROJECT_SLUG___ \
  PATH_TO_DSYMS

----------------------------------------

TITLE: Initializing Sentry with Environment Configuration in Dart
DESCRIPTION: Shows how to initialize SentryFlutter with environment configuration. The code demonstrates setting the environment directly through options or alternatively using Dart environment variables via --dart-define.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.environment = 'staging';
});

// or define SENTRY_ENVIRONMENT via Dart environment variable (--dart-define)

----------------------------------------

TITLE: Configuring Source Map Generation in Angular
DESCRIPTION: This JSON snippet shows how to modify the angular.json file to enable source map generation for production builds. It adds the sourceMap option to the build configuration, setting scripts to true.

LANGUAGE: json
CODE:
{
  // ...
  "projects": {
    "my-app": {
      "architect": {
        "build": {
          "configurations": {
            "production": {
              "sourceMap": {
                "scripts": true
              }
            }
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Integrating Sentry with Solid Router in JSX
DESCRIPTION: This code snippet demonstrates how to wrap the Solid Router with Sentry's routing instrumentation. It imports the necessary components, creates a higher-order component with Sentry integration, and uses it in the main App component.

LANGUAGE: jsx
CODE:
import { withSentryRouterRouting } from '@sentry/solidstart/solidrouter';
import { Router } from "@solidjs/router";
import { FileRoutes } from "@solidjs/start/router";

// Wrap Solid Router to collect meaningful performance data on route changes
const SentryRouter = withSentryRouterRouting(Router);

export default function App() {
  return (
    <SentryRouter>
      <FileRoutes />
    </SentryRouter>
  )
}

----------------------------------------

TITLE: Integrating Sentry with Solid Router in JSX
DESCRIPTION: This code snippet demonstrates how to wrap the Solid Router with Sentry's routing instrumentation. It imports the necessary components, creates a higher-order component with Sentry integration, and uses it in the main App component.

LANGUAGE: jsx
CODE:
import { withSentryRouterRouting } from '@sentry/solidstart/solidrouter';
import { Router } from "@solidjs/router";
import { FileRoutes } from "@solidjs/start/router";

// Wrap Solid Router to collect meaningful performance data on route changes
const SentryRouter = withSentryRouterRouting(Router);

export default function App() {
  return (
    <SentryRouter>
      <FileRoutes />
    </SentryRouter>
  )
}

----------------------------------------

TITLE: Adding Sentry Dependency for Spring 5 (Gradle)
DESCRIPTION: This snippet shows how to add the Sentry dependency for Spring 5 using Gradle build tool.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-spring:{{@inject packages.version('sentry.java.spring', '4.2.0') }}'

----------------------------------------

TITLE: Rendering Sentry Platform Guide Section in JSX
DESCRIPTION: React component that wraps platform-specific integration guides using PlatformSection with the noGuides prop and renders a GuideGrid component to display available framework integrations.

LANGUAGE: jsx
CODE:
<PlatformSection noGuides>

Using a framework or logging library? Take a look at our specific guides to get started.

<GuideGrid />

</PlatformSection>

----------------------------------------

TITLE: Purging Container State
DESCRIPTION: Commands for removing all data associated with services or resetting specific database containers and volumes.

LANGUAGE: shell
CODE:
# Remove all data (containers, volumes, and networks) associated with ALL services
devservices purge

# Remove all data (containers, volumes, and networks) associated with a single service
docker container rm sentry-postgres-1
docker volume rm sentry_postgres-data

----------------------------------------

TITLE: Implementing Heartbeat Monitoring with Spring Boot 3
DESCRIPTION: Demonstrates single check-in heartbeat monitoring implementation in Spring Boot 3. Uses @SentryCheckIn with heartbeat parameter to track if jobs start as expected.

LANGUAGE: java
CODE:
import io.sentry.spring.jakarta.checkin.SentryCheckIn;

@Component
public class CustomJob {

  @Scheduled(fixedRate = 3 * 60 * 1000L)
  @SentryCheckIn(monitorSlug = "<monitor-slug>", heartbeat = true) // 👈
  void execute() throws InterruptedException {
    // your task code
  }
}

----------------------------------------

TITLE: Configuring Sentry FastHTTP Options in Go
DESCRIPTION: Set up Sentry FastHTTP options for customizing handler behavior, including repanic, wait for delivery, and timeout settings.

LANGUAGE: go
CODE:
// Repanic configures whether Sentry should repanic after recovery, in most cases, it defaults to false,
// as fasthttp doesn't include its own Recovery handler.
Repanic bool
// WaitForDelivery configures whether you want to block the request before moving forward with the response.
// Because fasthttp doesn't include its own `Recovery` handler, it will restart the application,
// and the event won't be delivered otherwise.
WaitForDelivery bool
// Timeout for the event delivery requests.
Timeout time.Duration

----------------------------------------

TITLE: Creating and Associating Commits Using Sentry CLI
DESCRIPTION: Example showing how to create a new release and associate commits automatically using environment variables and the Sentry CLI with the --auto flag.

LANGUAGE: bash
CODE:
# Assumes you're in a git repository
export SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___
export SENTRY_ORG=___ORG_SLUG___
VERSION=$(sentry-cli releases propose-version)

# Create a release
sentry-cli releases new -p project1 -p project2 $VERSION

# Associate commits with the release
sentry-cli releases set-commits --auto $VERSION

----------------------------------------

TITLE: Installing Sentry SDK via Git URL
DESCRIPTION: Instructions for installing the Sentry SDK using Swift Package Manager by adding the git repository URL in Xcode.

LANGUAGE: plaintext
CODE:
https://github.com/getsentry/sentry-cocoa.git

----------------------------------------

TITLE: Installing @sentry/react-native using package managers
DESCRIPTION: Commands to install @sentry/react-native package using Expo CLI, npm, yarn, or pnpm.

LANGUAGE: bash
CODE:
npx expo install @sentry/react-native

LANGUAGE: bash
CODE:
npm install @sentry/react-native --save

LANGUAGE: bash
CODE:
yarn add @sentry/react-native

LANGUAGE: bash
CODE:
pnpm add @sentry/react-native

----------------------------------------

TITLE: Adding Data Attributes to Sentry Transactions - Java
DESCRIPTION: Demonstrates how to add various data attributes (strings, numbers, booleans, and arrays) to a Sentry transaction in Java. Shows usage of setData() method with different data types.

LANGUAGE: java
CODE:
ITransaction transaction = Sentry.startTransaction("processOrderBatch()", "task");
transaction.setData("my-data-attribute-1", "value1");
transaction.setData("my-data-attribute-2", 42);
transaction.setData("my-data-attribute-3", true);

transaction.setData("my-data-attribute-4", Arrays.asList("value1", "value2", "value3"));
transaction.setData("my-data-attribute-5", Arrays.asList(42, 43, 44));
transaction.setData("my-data-attribute-6", Arrays.asList(true, false, true));

----------------------------------------

TITLE: Custom Apdex Score Calculation
DESCRIPTION: Demonstrates how to calculate a modified Apdex score with a custom weight of 0.2 for tolerable transactions.

LANGUAGE: text
CODE:
(count_if(transaction.duration,lessOrEquals,300) + (count_if(transaction.duration,lessOrEquals,1200) - count_if(transaction.duration,lessOrEquals,300)) * 0.2)/count()

----------------------------------------

TITLE: Setting Tags Context in Sentry using Elixir
DESCRIPTION: This code sets the tags context for Sentry error tracking. It uses the Sentry.Context module to add a custom tag 'other_id' with a value of 456 to the current context.

LANGUAGE: elixir
CODE:
Sentry.Context.set_tags_context(%{other_id: 456})

----------------------------------------

TITLE: Configuring Sentry Trace Sampling in PowerShell
DESCRIPTION: This code sets up a custom TracesSampler function for Sentry to determine the sampling rate for traces. It checks if the trace is a continuation, handles specific endpoints, and applies a default sampling rate. The function is defined within the Start-Sentry block.

LANGUAGE: powershell
CODE:
Start-Sentry {
    // OR: Determine traces sample rate based on the sampling context
    $_.TracesSampler = [System.Func[Sentry.TransactionSamplingContext, System.Nullable`1[System.Double]]] {
        param([Sentry.TransactionSamplingContext]$context)

        # If this is the continuation of a trace, just use that decision (rate controlled by the caller)
        if ($context.TransactionContext.IsParentSampled)
        {
            return 1.0 # Keep all traces complete
        }
        
        
        # the rest of sampling logic, for example:
        if ($context.TransactionContext.Name -eq 'important-endpoint')
        {
            return 1.0 # 100% for an important endpoint
        }
        
        return 0.5 # 50% for everything else
    }
}

----------------------------------------

TITLE: Creating a Sample Fragment with Sentry Integration
DESCRIPTION: Implement a sample Fragment that includes a button to capture a Sentry message. This can be used to verify that the Sentry Fragment integration is working correctly.

LANGUAGE: kotlin
CODE:
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import io.sentry.Sentry

class SampleFragment : Fragment() {

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // generated databinding
        return FragmentSampleBinding.inflate(inflater).apply {
            this.sendMessage.setOnClickListener {
                Sentry.captureMessage("Some message from Fragment Lifecycle events in breadcrumbs.")
            }
        }.root
    }

    companion object {
        @JvmStatic fun newInstance() = SampleFragment()
    }
}

----------------------------------------

TITLE: Creating dSYM Debug File on macOS
DESCRIPTION: Command to create a dSYM debug companion file from a dylib or executable using dsymutil.

LANGUAGE: bash
CODE:
dsymutil /path/to/output[.dylib]

----------------------------------------

TITLE: Structuring Chained Exceptions in JSON
DESCRIPTION: Demonstrates how to represent chained exceptions in the Sentry event payload JSON format, with multiple exception values.

LANGUAGE: json
CODE:
{
  "exception": {
    "values": [
      {
        "type": "Exception",
        "value": "initial exception",
        "module": "__builtins__"
      },
      {
        "type": "ValueError",
        "value": "chained exception",
        "module": "__builtins__"
      }
    ]
  }
}

----------------------------------------

TITLE: Generating iOS Bundle for Expo Release
DESCRIPTION: Command to generate a bundle and source maps for the iOS Expo application release. This uses the expo export:embed command with specific parameters for iOS platform.

LANGUAGE: bash
CODE:
npx expo export:embed \
  --entry-file node_modules/expo/AppEntry.js \
  --platform ios \
  --dev false \
  --reset-cache \
  --bundle-output main.jsbundle \
  --sourcemap-output main.jsbundle.map \
  --minify false

----------------------------------------

TITLE: Calculating Derived File Path for Java in Sentry
DESCRIPTION: This snippet demonstrates how to calculate the derived file path for a Java module in Sentry. It involves replacing dots with slashes in the module name and appending the file name.

LANGUAGE: text
CODE:
com.example.vu.android.MainActivity -> com/example/vu/android/MainActivity.java

----------------------------------------

TITLE: Updating Span Name in Sentry
DESCRIPTION: Example of updating the name of an existing span.

LANGUAGE: javascript
CODE:
const span = Sentry.getActiveSpan();
if (span) {
  span.updateName("New Name");
}

----------------------------------------

TITLE: Disabling Timber Integration in Kotlin
DESCRIPTION: Exclude the sentry-android-timber dependency from app configurations in build.gradle.kts to disable the Timber integration while keeping other auto-installation features.

LANGUAGE: kotlin
CODE:
configurations.configureEach {
  exclude(group = "io.sentry", module = "sentry-android-timber")
}

----------------------------------------

TITLE: Configuring Sentry Scope and Clearing User Data in Kotlin
DESCRIPTION: This snippet demonstrates how to use the Sentry SDK to configure the scope and clear user data. It imports the Sentry class from the Kotlin multiplatform package and uses the configureScope function to set the user property to null, effectively removing any user-related data from the scope.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry

Sentry.configureScope { scope ->
  scope.user = null
}

----------------------------------------

TITLE: Starting New Sentry Span with Transaction
DESCRIPTION: Shows how to initialize a new span when starting the first transaction in a context. Includes setting the transaction name and configuring sampling.

LANGUAGE: go
CODE:
sentry.StartSpan(context.Background(), "operation",
	sentry.WithTransactionName("name"),
	func(s *sentry.Span) { s.Sampled = sentry.SampledTrue },
)

----------------------------------------

TITLE: Enabling Debug Mode in Sentry Go SDK
DESCRIPTION: Enables debug mode in the Sentry Go SDK, which outputs debug logs for capturing and sending events.

LANGUAGE: go
CODE:
raven.SetDebug(true)

----------------------------------------

TITLE: Capturing Python Exceptions with Sentry SDK
DESCRIPTION: Shows how to capture a caught exception using Sentry's capture_exception() function within a try-except block. The exception object can be passed directly to capture_exception(), or it can be omitted to capture the current exception from sys.exc_info().

LANGUAGE: python
CODE:
from sentry_sdk import capture_exception

try:
    a_potentially_failing_function()
except Exception as e:
    # Alternatively the argument can be omitted
    capture_exception(e)

----------------------------------------

TITLE: Creating Scope-Bound Transaction in Java
DESCRIPTION: Demonstrates how to create a transaction bound to the current scope using Sentry SDK in Java. Shows error handling, span creation, and proper transaction lifecycle management including cleanup in finally blocks.

LANGUAGE: java
CODE:
import java.io.FileNotFoundException;

import io.sentry.ISpan;
import io.sentry.ITransaction;
import io.sentry.Sentry;
import io.sentry.SpanStatus;
import io.sentry.TransactionOptions;

// A good name for the transaction is key, to help identify what this is about
TransactionOptions txOptions = new TransactionOptions();
txOptions.setBindToScope(true);
ITransaction transaction = Sentry.startTransaction("processOrderBatch()", "task", txOptions);
try {
  processOrderBatch();
} catch (Exception e) {
  transaction.setThrowable(e);
  transaction.setStatus(SpanStatus.INTERNAL_ERROR);
  throw e;
} finally {
  transaction.finish();
}

void processOrderBatch() {
  ISpan span = Sentry.getSpan();
  if (span == null) {
    span = Sentry.startTransaction("processOrderBatch()", "task");
  }
  ISpan innerSpan = span.startChild("task", "operation");
  try {
    // omitted code
  } catch (FileNotFoundException e) {
    innerSpan.setThrowable(e);
    innerSpan.setStatus(SpanStatus.NOT_FOUND);
    throw e;
  } finally {
    innerSpan.finish();
  }
}

----------------------------------------

TITLE: Auth Token Configuration in sentryclirc
DESCRIPTION: Configuration snippet for storing authentication token in the Sentry CLI config file.

LANGUAGE: ini
CODE:
[auth]
token=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Installing Sentry SDK for Nuxt.js using yarn
DESCRIPTION: This snippet demonstrates the installation of the @sentry/nuxt package using yarn. It adds the Sentry SDK as a project dependency.

LANGUAGE: bash
CODE:
yarn add @sentry/nuxt

----------------------------------------

TITLE: Configuring Failed Request Targets for GraphQL Client Error Capture
DESCRIPTION: Specify which GraphQL client errors to capture based on the request URL.

LANGUAGE: kotlin
CODE:
import com.apollographql.apollo3.ApolloClient
import io.sentry.apollo3.sentryTracing

val apollo = ApolloClient.builder()
    .serverUrl("https://your-api-host/")
    .sentryTracing(captureFailedRequests = true, failedRequestTargets = listOf("myapi.com"))
    .build()

----------------------------------------

TITLE: Configuring OpenTelemetry with Sentry Integration in Python
DESCRIPTION: This code configures OpenTelemetry to work with Sentry by setting up a TracerProvider with a SentrySpanProcessor and setting the global textmap to use a SentryPropagator. This enables OpenTelemetry to send trace data to Sentry.

LANGUAGE: python
CODE:
from opentelemetry import trace
from opentelemetry.propagate import set_global_textmap
from opentelemetry.sdk.trace import TracerProvider
from sentry_sdk.integrations.opentelemetry import SentrySpanProcessor, SentryPropagator

provider = TracerProvider()
provider.add_span_processor(SentrySpanProcessor())
trace.set_tracer_provider(provider)
set_global_textmap(SentryPropagator())

----------------------------------------

TITLE: Disabling Pinia State Attachment in Sentry Integration for JavaScript
DESCRIPTION: This code example demonstrates how to disable the attachment of Pinia state to Sentry events. It sets the attachPiniaState option to false when initializing the Pinia integration.

LANGUAGE: javascript
CODE:
Sentry.piniaIntegration(usePinia(), {
  attachPiniaState: false
})

----------------------------------------

TITLE: Adding Sentry Gems with Profiling to Ruby Gemfile
DESCRIPTION: This snippet demonstrates how to add the sentry-ruby, sentry-sidekiq, and stackprof gems to a Ruby project's Gemfile. The stackprof gem is included to enable profiling functionality in addition to Sentry's error tracking and monitoring capabilities.

LANGUAGE: ruby
CODE:
gem "stackprof"
gem "sentry-ruby"
gem "sentry-sidekiq"

----------------------------------------

TITLE: Runtime Debug ID Detection Snippet
DESCRIPTION: JavaScript snippet for runtime Debug ID detection that should be prepended to each JavaScript file. It creates a global _sentryDebugIds object to store Debug IDs mapped to stack traces.

LANGUAGE: javascript
CODE:
{
  var globalObject =
    typeof window !== "undefined"
      ? window
      : typeof global !== "undefined"
        ? global
        : typeof self !== "undefined"
          ? self
          : {};

  var stack = new globalObject.Error().stack;

  if (stack) {
    globalObject._sentryDebugIds = globalObject._sentryDebugIds || {};
    globalObject._sentryDebugIds[stack] =
      "85314830-023f-4cf1-a267-535f4e37bb17";
  }
}

----------------------------------------

TITLE: Uploading Debug Information Files with Sentry CLI
DESCRIPTION: Use the 'sentry-cli debug-files upload' command to upload debug information files to Sentry. The command recursively scans provided folders or ZIP archives and skips files that have already been uploaded.

LANGUAGE: bash
CODE:
sentry-cli debug-files upload -o <org> -p <project> /path/to/files...

LANGUAGE: bash
CODE:
sentry-cli debug-files upload -o <org> -p <project> --wait /path/to/files...

----------------------------------------

TITLE: Capturing Error Message with Sentry in Kotlin
DESCRIPTION: This snippet demonstrates how to use Sentry to capture and log an error message in a Kotlin multiplatform project. It imports the Sentry library and uses the captureMessage method to log a simple error message.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry

Sentry.captureMessage("Something went wrong")

----------------------------------------

TITLE: Using withActiveSpan Utility in Sentry
DESCRIPTION: Demonstration of using the withActiveSpan utility to manually associate child spans with a parent span.

LANGUAGE: javascript
CODE:
const span = Sentry.startInactiveSpan({ name: "Parent Span" });

Sentry.withActiveSpan(span, () => {
  // `span` is now active, any other spans will be children of it
  Sentry.startSpan({ name: "Child Span" }, () => {
    // Do something
  });
});

----------------------------------------

TITLE: Using Failure Rate Function in Sentry
DESCRIPTION: Function that calculates the percentage of unsuccessful transactions in Sentry. Transactions with status other than 'ok', 'cancelled', and 'unknown' are counted as failures.

LANGUAGE: text
CODE:
failure_rate()

----------------------------------------

TITLE: Runtime App Hang Tracking Control
DESCRIPTION: Shows how to pause and resume app hang tracking at runtime using SentrySDK methods.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.pauseAppHangTracking()

// Do something that might cause the app to hang,
// and you don't want the Cocoa SDK to report it.

SentrySDK.resumeAppHangTracking()

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK pauseAppHangTracking];

// Do something that might cause the app to hang,
// and you don't want the Cocoa SDK to report it.

[SentrySDK resumeAppHangTracking];

----------------------------------------

TITLE: Setting Environment for Sentry SDK in Elixir
DESCRIPTION: Specifies the environment for the application. This helps separate events in the Sentry UI (e.g., staging vs prod). By default, the SDK will attempt to read this from the SENTRY_ENVIRONMENT environment variable.

LANGUAGE: elixir
CODE:
config :sentry,
  environment: "production"

----------------------------------------

TITLE: Initializing Sentry with Custom Release and Distribution in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with a custom release name and distribution value. The release is set to a project name with version, and the distribution is set to a unique build number.

LANGUAGE: javascript
CODE:
Sentry.init({
  release: "my-project-name@2.3.12",
  dist: "52",
});

----------------------------------------

TITLE: Using @SentryTransaction Annotation with Required Operation
DESCRIPTION: Shows the updated usage of @SentryTransaction annotation requiring both name and operation parameters in Spring Boot applications.

LANGUAGE: java
CODE:
class MyComponent {

  @SentryTransaction(name = "transaction-name", operation = "operation-name")
  @Scheduled(fixedRate = 3 * 1000L)
  void execute() {
      ...
    }
}

----------------------------------------

TITLE: Initializing Sentry Tracing in JavaScript
DESCRIPTION: Basic Sentry initialization configuration to enable tracing with 100% transaction capture rate. This is a prerequisite for profiling functionality.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___DSN___",
  // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.
  // We recommend adjusting this value in production.
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing RavenClient in C#
DESCRIPTION: Instantiate the RavenClient with your DSN to set up the Sentry client.

LANGUAGE: csharp
CODE:
var ravenClient = new RavenClient("___PUBLIC_DSN___");

----------------------------------------

TITLE: AWS Lambda Context Structure in Python
DESCRIPTION: Example of how the AWS Lambda integration adds event and context information to the sampling context. The integration includes both the raw AWS event and Lambda context objects.

LANGUAGE: python
CODE:
{
  "aws_event": <any>,
  "aws_context": <LambdaContext>,
}

----------------------------------------

TITLE: Running DevServices with Specific Modes
DESCRIPTION: Command for running devservices with different configuration modes like symbolicator, chartcuterie, minimal, profiling, or full.

LANGUAGE: shell
CODE:
devservices up --mode symbolicator

----------------------------------------

TITLE: Initializing Sentry with Unleash Feature Flags (Deprecated)
DESCRIPTION: Shows the deprecated method of initializing Sentry with Unleash feature flag integration. Uses the older 'unleashClientClass' configuration parameter instead of 'featureFlagClientClass'.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/browser';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({unleashClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Emitting a Timer in PHP with Sentry Metrics
DESCRIPTION: This snippet shows how to emit a timer metric for measuring the execution time of a specific code block. It uses the Sentry metrics API to create a timer with a key and a callback function.

LANGUAGE: php
CODE:
\Sentry\metrics()->timing(
    key: 'event_processing_time',
    callback: static fn() => process(),
);

----------------------------------------

TITLE: Implementing BeforeSendCallback in Java for Sentry Spring
DESCRIPTION: This snippet shows how to create a custom BeforeSendCallback as a Spring component in Java. It demonstrates modifying a SentryEvent by setting the server name to null before the event is sent.

LANGUAGE: java
CODE:
import io.sentry.SentryEvent;
import io.sentry.SentryOptions;
import io.sentry.Hint
import org.springframework.stereotype.Component;

@Component
public class CustomBeforeSendCallback implements SentryOptions.BeforeSendCallback {
  @Override
  public SentryEvent execute(SentryEvent event, Hint hint) {
    // Example: Never send server name in events
    event.setServerName(null);
    return event;
  }
}

----------------------------------------

TITLE: Configuring Ignored Errors in Sentry Properties
DESCRIPTION: Defines a list of error patterns to be ignored by Sentry. Supports exact error messages and regular expressions for pattern matching. Multiple errors are separated by commas.

LANGUAGE: properties
CODE:
ignored-errors=Some error,Another .*

----------------------------------------

TITLE: Configuring Sentry User Scope in Kotlin
DESCRIPTION: Shows how to configure user identification in Sentry using Kotlin. Sets a custom tag and creates a User object with ID or username using Kotlin's apply function for scope configuration.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.protocol.User

Sentry.configureScope { scope ->
  scope.setTag("my-tag", "my value")
  scope.user = User().apply {
    // User Id:
    id = clientUser.getId()
    // Or Username:
    username = clientUser.getUsername()
  }
}

----------------------------------------

TITLE: Accessing Request in Sentry BeforeSend Callback for Iris in Go
DESCRIPTION: This code snippet shows how to access the original HTTP request in Sentry's BeforeSend callback when using Iris. This allows for custom processing or modification of the event before it's sent to Sentry.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	BeforeSend: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
		if hint.Context != nil {
			if req, ok := hint.Context.Value(sentry.RequestContextKey).(*http.Request); ok {
				// You have access to the original Request here
			}
		}

		return event
	},
})

----------------------------------------

TITLE: Configuring Crashpad Database for Automatic Uploads in C++
DESCRIPTION: This snippet shows how to configure the Crashpad database for automatic uploads to Sentry. It initializes the database and enables uploads using the CrashReportDatabase class.

LANGUAGE: cpp
CODE:
base::FilePath database("path/to/crashpad/db");
std::unique_ptr<CrashReportDatabase> db =
    crashpad::CrashReportDatabase::Initialize(database);

if (db != nullptr && db->GetSettings() != nullptr) {
  db->GetSettings()->SetUploadsEnabled(true);
}

----------------------------------------

TITLE: Adding Attachments in Sentry
DESCRIPTION: This snippet demonstrates how to add an attachment to the scope in Sentry.

LANGUAGE: markdown
CODE:
<PlatformContent includePath="enriching-events/add-attachment" />

----------------------------------------

TITLE: Configuring Sentry Trace Sampling in PHP
DESCRIPTION: Demonstrates two methods for configuring trace sampling in Sentry: using a fixed sample rate (0.2) or implementing a custom sampling function that returns a value between 0 and 1. The custom sampler receives a SamplingContext object as input.

LANGUAGE: php
CODE:
// Specify a fixed sample rate:
'traces_sample_rate' => 0.2,
// Or provide a custom sampler:
'traces_sampler' => function (\Sentry\Tracing\SamplingContext $context): float {
    // return a number between 0 and 1
},

----------------------------------------

TITLE: Setting Unique Key for Widget in Flutter
DESCRIPTION: This code shows how to set a unique key for a widget to enable transaction and breadcrumb capture for user interactions.

LANGUAGE: dart
CODE:
ElevatedButton(
  key: const Key('my_button_widget'),
  onPressed: () {
    final activeSpan = Sentry.getSpan();
    final childSpan = activeSpan?.startChild('some operation', description: 'some description');
    childSpan?.finish();
  }, child: const Text('User Interaction Example'),
),

----------------------------------------

TITLE: Adding Attachments in Sentry
DESCRIPTION: This snippet demonstrates how to add an attachment to the scope in Sentry.

LANGUAGE: markdown
CODE:
<PlatformContent includePath="enriching-events/add-attachment" />

----------------------------------------

TITLE: Python Script for Commit Association
DESCRIPTION: Python script that retrieves git commit history and sends it to Sentry API to associate commits with a release.

LANGUAGE: python
CODE:
import subprocess
import requests

SENTRY_API_TOKEN = <my_api_token>
sha_of_previous_release = <previous_sha>

log = subprocess.Popen([
    'git',
    '--no-pager',
    'log',
    '--no-merges',
    '--no-color',
    '--pretty=%H',
    '%s..HEAD' % (sha_of_previous_release,),
], stdout=subprocess.PIPE)

commits = log.stdout.read().strip().split('\n')

data = {
    'commits': [{'id': c, 'repository': 'my-repo-name'} for c in commits],
    'version': commits[0],
    'projects': ['my-project', 'my-other-project'],
}

res = requests.post(
    'https://sentry.io/api/0/organizations/my-org/releases/',
    json=data,
    headers={'Authorization': 'Bearer {}'.format(SENTRY_API_TOKEN)},
)

----------------------------------------

TITLE: Configuring Sentry Scope Log Level in Rust
DESCRIPTION: This code configures the Sentry scope by setting the log level to Warning. It uses the sentry crate's configure_scope function and the Level enum to specify the desired log level.

LANGUAGE: rust
CODE:
sentry::configure_scope(|scope| {
    scope.set_level(Some(Level::Warning));
});

----------------------------------------

TITLE: Defining Stack Trace Link Schema in JSON
DESCRIPTION: Basic schema structure for implementing a stack trace link component. Defines the required elements array with type and URI specifications.

LANGUAGE: json
CODE:
{
  "elements": [
    {
      "type": "stacktrace-link",
      "uri": <URI>,
    }
  ]
}

----------------------------------------

TITLE: Configuring Sentry SDK for Server-side in SvelteKit
DESCRIPTION: Initializes the Sentry SDK on the server-side, sets up error handling, and configures the Sentry request handler.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

const myErrorHandler = ({ error, event }) => {
  console.error("An error occurred on the server side:", error, event);
};

export const handleError = Sentry.handleErrorWithSentry(myErrorHandler);
// or alternatively, if you don't have a custom error handler:
// export const handleError = handleErrorWithSentry();

export const handle = Sentry.sentryHandle();
// Or use `sequence`:
// export const handle = sequence(Sentry.sentryHandle(), yourHandler());

----------------------------------------

TITLE: Clearing Context in Sentry PHP Client
DESCRIPTION: Demonstrates how to clear the context in the Sentry client. This is useful when performing additional requests during the lifecycle.

LANGUAGE: php
CODE:
$client->context->clear();

----------------------------------------

TITLE: Configuring Sentry Options in GDScript for Godot
DESCRIPTION: This script extends SentryConfiguration to set up Sentry options for a Godot project. It sets the environment to 'production' in the _configure method. The script should be assigned in the Project Settings.

LANGUAGE: gdscript
CODE:
extends SentryConfiguration
## Tip: Assign configuration script in the Project Settings.

func _configure(options: SentryOptions):
	options.environment = "production"

----------------------------------------

TITLE: Adding SLF4J Dependencies in Java Build Systems
DESCRIPTION: These snippets show how to add SLF4J dependencies in Maven, Gradle, and SBT build systems. They include the slf4j-jdk14 artifact, which is an SLF4J binding for java.util.logging.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-jdk14</artifactId>
    <version>1.7.30</version>
</dependency>

LANGUAGE: groovy
CODE:
implementation 'org.slf4j:slf4j-jdk14:1.7.30'

LANGUAGE: scala
CODE:
libraryDependencies += "org.slf4j" % "slf4j-jdk14" % "1.7.30"

----------------------------------------

TITLE: Adding GitHub App Private Key to Sentry YAML Configuration
DESCRIPTION: This YAML snippet demonstrates how to include the GitHub App's private key in Sentry's config.yml file. The private key is represented as a multi-line string.

LANGUAGE: yaml
CODE:
github-app.private-key: |
  -----BEGIN RSA PRIVATE KEY-----
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  -----END RSA PRIVATE KEY-----

----------------------------------------

TITLE: Setting Custom Transaction Sampling Context
DESCRIPTION: Create a transaction with custom sampling context data that provides additional information to the sampler without attaching it to the transaction as tags or data.

LANGUAGE: javascript
CODE:
Sentry.startTransaction({
  name: "test-transaction"
}, {
  // this context is available in the `traces-sampler`
  foo: "bar"
});

----------------------------------------

TITLE: Capturing Messages with Context
DESCRIPTION: Shows how to capture custom messages with additional context and log levels in both SDK versions.

LANGUAGE: python
CODE:
client.captureMessage('test', level='info', extra={'debug': False})

LANGUAGE: python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.set_extra('debug', False)
    sentry_sdk.capture_message('test', 'info')

----------------------------------------

TITLE: Implementing Sentry ErrorBoundary in Remix
DESCRIPTION: TypeScript code to implement a custom ErrorBoundary in Remix that captures errors using Sentry.

LANGUAGE: typescript
CODE:
import { captureRemixErrorBoundaryError } from "@sentry/remix";

export const ErrorBoundary: V2_ErrorBoundaryComponent = () => {
  const error = useRouteError();

  captureRemixErrorBoundaryError(error);

  return <div> ... </div>;
};

----------------------------------------

TITLE: Implementing Sentry ErrorBoundary in Remix
DESCRIPTION: TypeScript code to implement a custom ErrorBoundary in Remix that captures errors using Sentry.

LANGUAGE: typescript
CODE:
import { captureRemixErrorBoundaryError } from "@sentry/remix";

export const ErrorBoundary: V2_ErrorBoundaryComponent = () => {
  const error = useRouteError();

  captureRemixErrorBoundaryError(error);

  return <div> ... </div>;
};

----------------------------------------

TITLE: Configuring Expect-CT Header for Sentry Reporting
DESCRIPTION: This snippet shows how to set up the Expect-CT header to report Certificate Transparency violations to Sentry. It includes the report-uri directive pointing to the Sentry endpoint.

LANGUAGE: http
CODE:
Expect-CT: ..., report-uri="https://___ORG_INGEST_DOMAIN___/api/___PROJECT_ID___/security/?sentry_key=___PUBLIC_KEY___"

----------------------------------------

TITLE: Handling Movie Review Fetching with Sentry Error Tracking in JavaScript
DESCRIPTION: Implements a click event listener that fetches and renders movie reviews while handling errors using Sentry for monitoring. The code attaches to a button element, retrieves the movie title from data attributes, attempts to fetch and render reviews, and captures any errors in Sentry while displaying them to the user.

LANGUAGE: javascript
CODE:
document
  .querySelector("#get-reviews-btn")
  .addEventListener("click", async (event) => {
    const movie = event.target.dataset.title;
    try {
      const reviews = await fetchMovieReviews(movie);
      renderMovieReviews(reviews);
    } catch (e) {
      const fetchError = new Error(`Failed to fetch reviews for: ${movie}`);
      fetchError.cause = e;
      Sentry.captureException(fetchError);
      renderMovieReviewsError(fetchError);
    }
  });

----------------------------------------

TITLE: Defining GPU Context in Sentry SDK
DESCRIPTION: Example JSON structure for GPU context, including fields like name, vendor, memory size, and various GPU capabilities.

LANGUAGE: json
CODE:
{
  "contexts": {
    "gpu": {
      "name": "AMD Radeon Pro 560",
      "vendor_name": "Apple",
      "memory_size": 4096,
      "api_type": "Metal",
      "multi_threaded_rendering": true,
      "version": "Metal",
      "npot_support": "Full"
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry Flutter Application with Multi-View Support
DESCRIPTION: Main Flutter application setup with Sentry integration and multi-view support. Configures Sentry DSN and implements a custom widget for handling multiple views.

LANGUAGE: dart
CODE:
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:sentry_flutter/sentry_flutter.dart';
import 'package:sentry_flutter/src/integrations/widgets_binding_integration.dart';
import 'dart:ui' show FlutterView;

const String exampleDsn = '___DSN___';

Future<void> main() async {
  await SentryFlutter.init(
    (options) {
      options.dsn = exampleDsn;
      final integration = options.integrations
        .firstWhere((element) => element is WidgetsBindingIntegration);
      options.removeIntegration(integration);
    },
    appRunner: () => runWidget(
      MultiViewApp(
        viewBuilder: (BuildContext context) => DefaultAssetBundle(
          bundle: SentryAssetBundle(),
          child: const MyApp(),
        ),
      ),
    ),
  );
}

----------------------------------------

TITLE: Installing Basic Sentry AWS Serverless Package
DESCRIPTION: Commands to install the @sentry/aws-serverless package using different Node.js package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/aws-serverless --save

LANGUAGE: bash
CODE:
yarn add @sentry/aws-serverless

LANGUAGE: bash
CODE:
pnpm add @sentry/aws-serverless

----------------------------------------

TITLE: Installing Basic Sentry AWS Serverless Package
DESCRIPTION: Commands to install the @sentry/aws-serverless package using different Node.js package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/aws-serverless --save

LANGUAGE: bash
CODE:
yarn add @sentry/aws-serverless

LANGUAGE: bash
CODE:
pnpm add @sentry/aws-serverless

----------------------------------------

TITLE: Basic Stack Trace Rule Syntax
DESCRIPTION: Demonstrates the basic syntax for stack trace rules with matcher and action combinations.

LANGUAGE: bash
CODE:
matcher-name:expression other-matcher:expression ... action1 action2 ...

----------------------------------------

TITLE: Adding Sentry Gems to Rails Gemfile (With Profiling)
DESCRIPTION: This snippet demonstrates how to add Sentry gems along with the stackprof gem to enable profiling functionality in a Rails project.

LANGUAGE: ruby
CODE:
gem "stackprof"
gem "sentry-ruby"
gem "sentry-rails"

----------------------------------------

TITLE: Including Network Request Documentation Content
DESCRIPTION: MDX include statement that pulls in the main documentation content about network request insights from a separate file.

LANGUAGE: mdx
CODE:
<Include name="insights-requests-body.mdx" />

----------------------------------------

TITLE: Initializing Sentry with npm in JavaScript
DESCRIPTION: This snippet shows how to import and initialize Sentry using npm. It sets up the DSN and includes the moduleMetadataIntegration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.moduleMetadataIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry Static URLs in Python
DESCRIPTION: Python configuration settings to point Sentry's static assets to production URLs instead of local files. This allows running Sentry without building the frontend locally.

LANGUAGE: python
CODE:
# ~/.sentry/sentry.conf.py
STATIC_URL = "https://sentry.io/_static/{version}"
STATIC_FRONTEND_APP_URL = "https://sentry.io/_static/dist/"

----------------------------------------

TITLE: Sentry CLI Configuration File
DESCRIPTION: Configuration file for Sentry CLI authentication token setup.

LANGUAGE: ini
CODE:
# Do not commit this file to your repository!
# Sentry Auth tokens should be treated as a secret.
[auth]
token=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Capturing Exception with Hints in Kotlin (Old Method)
DESCRIPTION: Demonstrates how to capture an exception with a hint using the old method in Sentry SDK 5.x. The hint is passed as a simple string.

LANGUAGE: kotlin
CODE:
Sentry.captureException(RuntimeException("exception"), "myStringHint")

----------------------------------------

TITLE: Using @SentrySpan Annotation in Spring 6 (Kotlin)
DESCRIPTION: Example of using @SentrySpan annotation to create a span for a method execution in Spring 6 Kotlin application.

LANGUAGE: kotlin
CODE:
import org.springframework.stereotype.Component
import io.sentry.spring.jakarta.tracing.SentrySpan

@Component
class PersonService {

  @SentrySpan(operation = "task")
  fun findById(id: Long): Person {
    ...
  }
}

----------------------------------------

TITLE: Starting Sentry Development Services
DESCRIPTION: Command to start the required services for Sentry local development using devservices.

LANGUAGE: shell
CODE:
devservices up

----------------------------------------

TITLE: Starting Ngrok with Configuration
DESCRIPTION: Command to start ngrok using a configuration file.

LANGUAGE: shell
CODE:
ngrok start --all --config ngrok.yml

----------------------------------------

TITLE: Setting DSN in Sentry Go SDK
DESCRIPTION: Sets the Data Source Name (DSN) for the Sentry Go SDK. The DSN is required to specify where to send events. If set to an empty string, no events will be sent.

LANGUAGE: go
CODE:
raven.SetDSN("___PUBLIC_DSN___")

----------------------------------------

TITLE: Running Sentry Installation Script
DESCRIPTION: Command to run the Sentry installation script after checking out the desired version and updating configuration files.

LANGUAGE: bash
CODE:
./install.sh

----------------------------------------

TITLE: Alert Component with Definition
DESCRIPTION: React/JSX component displaying the definition of 'tenet' using the Alert component.

LANGUAGE: jsx
CODE:
<Alert>
  <strong>ten·et (noun)</strong>

  _a principle or belief, especially one of the main principles of a religion or philosophy._
</Alert>

----------------------------------------

TITLE: Backend Set Metrics in Python
DESCRIPTION: Implementation examples of set metrics for tracking unique values in backend applications using Sentry's Python SDK.

LANGUAGE: Python
CODE:
sentry_sdk.metrics.set(
   key = "server_ids_running",
   value = "server_id",
   tags = {"software_version": software_version}
)

LANGUAGE: Python
CODE:
sentry_sdk.metrics.set(
   key = "db_queries",
   value = query,
  tags = {"query_type": "read"}
)

----------------------------------------

TITLE: Configuring Database URL in application.yml
DESCRIPTION: Add the p6spy prefix to the database connection URL in a Spring Boot application's application.yml file.

LANGUAGE: yaml
CODE:
spring.datasource.url: jdbc:p6spy:postgresql://localhost:5432/db

----------------------------------------

TITLE: Configuring Google Auth in Sentry YAML
DESCRIPTION: This YAML snippet demonstrates how to configure Google Auth in the Sentry config file. It requires setting the client ID and client secret obtained from the Google App.

LANGUAGE: yaml
CODE:
auth-google.client-id: '<client id>'
auth-google.client-secret: '<client secret>'

----------------------------------------

TITLE: Disabling Swizzling in Sentry SDK Initialization (Objective-C)
DESCRIPTION: This code snippet shows how to disable swizzling when initializing the Sentry SDK using Objective-C. It sets the 'enableSwizzling' option to NO, which turns off all swizzling-dependent features.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.enableSwizzling = NO;
}];

----------------------------------------

TITLE: Configuring CORS Headers for Sentry Tracing
DESCRIPTION: This snippet shows an example of how to configure the Access-Control-Allow-Headers in the server's response to allow Sentry tracing headers. It specifies the inclusion of 'sentry-trace' and 'baggage' headers.

LANGUAGE: plaintext
CODE:
"Access-Control-Allow-Headers: sentry-trace, baggage"

----------------------------------------

TITLE: Listing Standard Measurement Keys in JSON
DESCRIPTION: This snippet provides a list of standard measurement keys supported by Sentry, including web, mobile, and React Native specific measurements.

LANGUAGE: json
CODE:
[
  // Web
  "fp",
  "fcp",
  "lcp",
  "fid",
  "cls",
  "ttfb",
  "ttfb.requesttime",

  // Mobile
  "app_start_cold",
  "app_start_warm",
  "frames_total",
  "frames_slow",
  "frames_frozen",

  // React native
  "frames_slow_rate",
  "frames_frozen_rate",
  "stall_count",
  "stall_total_time",
  "stall_longest_time",
  "stall_percentage"
]

----------------------------------------

TITLE: Instrumenting Queue Consumer in C#
DESCRIPTION: Shows how to instrument a queue consumer using Sentry's SDK. Creates a transaction and span for queue processing, calculates message latency, and handles trace continuation from producer spans.

LANGUAGE: csharp
CODE:
var connection = MyCustomQueue.Connect();

// Pick up message from queues
var queue = "messages";
var message = connection.Consume(queue);

// Calculate latency (optional, but valuable)
var now = DateTimeOffset.UtcNow;
var messageTime = DateTimeOffset.FromUnixTimeSeconds(message["timestamp"]);
var latency = now - messageTime;

var sentryTraceHeader = message["sentry-trace"];
var sentryBaggageHeader = message["baggage"];

// Create transaction
var transactionContext = SentrySdk.ContinueTrace(sentryTraceHeader, sentryBaggageHeader);
var transaction = SentrySdk.StartTransaction(
    transactionContext,
    "queue_consumer_transaction",
    "function"
);

// Create the span
var span = transaction.StartChild(
    "queue.process",
    "queue_consumer"
);

// Set span data
span.SetExtra("messaging.message.id", message["message_id"]);
span.SetExtra("messaging.destination.name", queue);
span.SetExtra("messaging.message.body.size", Encoding.UTF8.GetByteCount(message["body"]));
span.SetExtra("messaging.message.receive.latency", latency.TotalMilliseconds);
span.SetExtra("messaging.message.retry.count", 0);

try
{
    // Process the message
    ProcessMessage(message);
}
catch (Exception)
{
    // In case of an error set the status to "internal_error"
    span.Status = SpanStatus.InternalError;
}

span.Finish();
transaction.Finish();

----------------------------------------

TITLE: Example of React Component Before Annotation
DESCRIPTION: This snippet shows an example of a React component named MyAwesomeComponent before the Sentry plugin applies annotations.

LANGUAGE: javascript
CODE:
function MyAwesomeComponent() {
  return <Text>This is a really cool and awesome component!</Text>
}

----------------------------------------

TITLE: Example Profile Structure in JSON
DESCRIPTION: Demonstrates the overall structure of a profile in Sample Format V2, including debug metadata, profile metadata, and profile data.

LANGUAGE: json
CODE:
{
  "debug_meta": {
    "images": [
      {
        "debug_id": "5819FF25-01CB-3D32-B84F-0634B37D3BBC",
        "image_addr": "0x00000001023a8000",
        "type": "macho",
        "image_size": 16384,
        "code_file": "/Library/Developer/CoreSimulator/Volumes/iOS_21C62/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 17.2.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libLogRedirect.dylib"
      }
    ]
  },
  "profiler_id": "71bba98d90b545c39f2ae73f702d7ef4",
  "chunk_id": "3e11a5c9831f4e49939c0a81944ea2cb",
  "client_sdk": {
    "name": "sentry.cocoa",
    "version": "8.36.0"
  },
  "measurements": { ... },
  "platform": "cocoa",
  "release": "io.sentry.sample.iOS-Swift@8.36.0+1",
  "environment": "simulator",
  "version": "2",
  "profile": {
    "samples": [
      {
        "thread_id": "259",
        "stack_id": 0,
        "timestamp": 1724777211.5037799
      }
    ],
    "stacks": [
      [ 0 ]
    ],
    "frames": [
      {
        "instruction_addr": "0x000000010232d144",
        "function": "_ZNK5dyld311MachOLoaded17findClosestSymbolEyPPKcPy"
      }
    ],
    "thread_metadata": {
      "259": {
        "name": "main"
      }
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry in Deno with JavaScript
DESCRIPTION: This snippet imports the Sentry package for Deno and initializes it with a DSN and extra error data integration. It sets up error tracking for a Deno application.

LANGUAGE: javascript
CODE:
import * as Sentry from "npm:@sentry/deno";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.extraErrorDataIntegration()],
});

----------------------------------------

TITLE: Configuring Tracer Provider for Console Applications in C#
DESCRIPTION: This snippet shows how to set up a tracer provider for a console application, adding Sentry to capture OpenTelemetry spans. It uses the Sdk.CreateTracerProviderBuilder() method to create and configure the provider.

LANGUAGE: csharp
CODE:
using var tracerProvider = Sdk.CreateTracerProviderBuilder()
    .AddSource(serviceName) // <-- The name of an activity sources you care about
    .AddSentry() // <-- Configure OpenTelemetry to send traces to Sentry
    .Build();

----------------------------------------

TITLE: Setting Environment in Sentry Go SDK
DESCRIPTION: Sets the environment for the Sentry Go SDK. This is a freeform string that can be used to separate releases in different environments.

LANGUAGE: go
CODE:
raven.SetEnvironment("staging")

----------------------------------------

TITLE: Configuring Sentry Webpack Plugin
DESCRIPTION: JavaScript configuration for the Sentry webpack plugin including organization and project settings.

LANGUAGE: javascript
CODE:
const { sentryWebpackPlugin } = require("@sentry/webpack-plugin");

module.exports = {
  // ... other config above ...

  devtool: "source-map", // Source map generation must be turned on
  plugins: [
    sentryWebpackPlugin({
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",
      authToken: process.env.SENTRY_AUTH_TOKEN,
    }),
  ],
};

----------------------------------------

TITLE: Configuring Sentry Webpack Plugin
DESCRIPTION: JavaScript configuration for the Sentry webpack plugin including organization and project settings.

LANGUAGE: javascript
CODE:
const { sentryWebpackPlugin } = require("@sentry/webpack-plugin");

module.exports = {
  // ... other config above ...

  devtool: "source-map", // Source map generation must be turned on
  plugins: [
    sentryWebpackPlugin({
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",
      authToken: process.env.SENTRY_AUTH_TOKEN,
    }),
  ],
};

----------------------------------------

TITLE: Installing @sentry/astro with yarn
DESCRIPTION: Installs the Sentry SDK for Astro projects using yarn package manager.

LANGUAGE: bash
CODE:
yarn add @sentry/astro

----------------------------------------

TITLE: Configuring Raven Client with Release Information
DESCRIPTION: Configuration for the Raven client to include release information when sending error reports to Sentry.

LANGUAGE: javascript
CODE:
Raven.config("your-dsn", {
  release: process.env.RELEASE,
});

----------------------------------------

TITLE: Configuring Sentry SDK with Unleash Integration
DESCRIPTION: Initializes Sentry SDK with the Unleash integration. It sets up the DSN, enables sending default PII, and adds the UnleashIntegration to the integrations list.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.unleash import UnleashIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    integrations=[UnleashIntegration()],
)

----------------------------------------

TITLE: Initializing Sentry with Custom Event Processing in Go
DESCRIPTION: This snippet shows how to initialize Sentry with a BeforeSend function that modifies the event fingerprint for a specific error type. It demonstrates custom event processing before sending to Sentry.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	// ...
	BeforeSend: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
		if ex, ok := hint.OriginalException.(DatabaseConnectionError); ok {
			event.Fingerprint = []string{"database-connection-error"}
		}

		return event
	},
})

----------------------------------------

TITLE: Installing Sentry SDK and Integrations in Ruby
DESCRIPTION: This code shows how to install the Sentry Ruby SDK and its integrations using gem commands.

LANGUAGE: ruby
CODE:
gem "sentry-ruby"

# and the integrations you need
gem "sentry-rails"
gem "sentry-sidekiq"
gem "sentry-delayed_job"
gem "sentry-resque"

----------------------------------------

TITLE: Setting Sentry User Context in Express Route Handler
DESCRIPTION: Example Express.js route handler that sets Sentry user context data for error tracking. The code shows how to capture user identification information like ID, email, and username for the current request scope using Sentry.setUser().

LANGUAGE: javascript
CODE:
// Your route handler, for example:
app.get("/my-route", (req, res) => {
  // Get the user from somewhere
  const user = req.user;

  // Set the user data for this request only
  Sentry.setUser({
    id: user.id,
    email: user.email,
    username: user.username,
  });

  res.send("Hello World");
});

----------------------------------------

TITLE: Installing Sentry.AspNetCore with .NET Core CLI
DESCRIPTION: This command adds the Sentry.AspNetCore NuGet package to a project using the .NET Core Command Line Interface.

LANGUAGE: shell
CODE:
dotnet add package Sentry.AspNetCore

----------------------------------------

TITLE: Configuring UIViewController Exclusions in Objective-C
DESCRIPTION: Configure specific UIViewController classes to be excluded from automatic tracing using Objective-C.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.swizzleClassNameExcludes = [NSSet setWithObjects:
      @"MyUIViewController",
      nil
    ];
}];

----------------------------------------

TITLE: Practical Sentry Logging Examples in Java
DESCRIPTION: Provides comprehensive examples of using Sentry with Logback in Java, including simple logging, breadcrumbs, tags, extras, and exception handling.

LANGUAGE: java
CODE:
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.slf4j.MarkerFactory;

public class MyClass {
  private static final Logger logger = LoggerFactory.getLogger(MyClass.class);
  private static final Marker MARKER = MarkerFactory.getMarker("myMarker");

  void logSimpleMessage() {
    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logWithBreadcrumbs() {
    // Record a breadcrumb that will be sent with the next event(s),
    // by default the last 100 breadcrumbs are kept.
    Sentry.record(
        new BreadcrumbBuilder().setMessage("User made an action").build()
    );

    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logWithTag() {
    // This sends an event with a tag named 'logback-Marker' to Sentry
    logger.error(MARKER, "This is a test");
  }

  void logWithExtras() {
    // MDC extras
    MDC.put("extra_key", "extra_value");
    // This sends an event with extra data to Sentry
    logger.error("This is a test");
  }

  void logWithGlobalTag() {
    LoggerContext context = (LoggerContext)LoggerFactory.getILoggerFactory();
    // This adds a tag named 'logback-Marker' to every subsequent Sentry event
    context.putProperty(MARKER, "This is a test");

    // This sends an event to Sentry, and a tag named 'logback-Marker' will be added.
    logger.info("This is a test");
  }

  void addGlobalExtras() {
    LoggerContext context = (LoggerContext)LoggerFactory.getILoggerFactory();
    // This adds extra data to every subsequent Sentry event
    context.putProperty("extra_key", "extra_value");

    // This sends an event to Sentry, and extra data ("extra_key", "extra_value") will be added.
    logger.info("This is a test");
  }

  void logException() {
    try {
      unsafeMethod();
    } catch (Exception e) {
      // This sends an exception event to Sentry
      logger.error("Exception caught", e);
    }
  }

  void unsafeMethod() {
    throw new UnsupportedOperationException("You shouldn't call this!");
  }
}

----------------------------------------

TITLE: Initializing Sentry with OpenFeature Integration (Track One Client)
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the OpenFeature integration, set up the OpenFeature provider, and add hooks to track feature flag evaluations for a specific client. It also shows how to use the OpenFeature client to evaluate a boolean feature flag.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/browser';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Resource Error Capturing
DESCRIPTION: Code to capture 404 errors when resources like images or CSS files fail to load

LANGUAGE: javascript
CODE:
document.body.addEventListener(
  "error",
  (event) => {
    if (!event.target) return;

    if (event.target.tagName === "IMG") {
      Sentry.captureException(
        new Error(`Failed to load image: ${event.target.src}`)
      );
    } else if (event.target.tagName === "LINK") {
      Sentry.captureException(
        new Error(`Failed to load css: ${event.target.href}`)
      );
    }
  },
  true // useCapture - necessary for resource loading errors
);

----------------------------------------

TITLE: Disabling Auto Session Tracking in Sentry iOS SDK
DESCRIPTION: Demonstrates how to initialize the Sentry SDK with automatic session tracking disabled. This allows opting out of the release health tracking feature.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    // If you prefer NOT to track release health.
    options.enableAutoSessionTracking = false
}

LANGUAGE: objective-c
CODE:
@import Sentry;

[SentrySDK startWithOptions:@{
    @"dsn": @"___PUBLIC_DSN___",
    // If you prefer NOT to track release health.
    @"enableAutoSessionTracking": @(NO)
}];

----------------------------------------

TITLE: Adding Sentry Breadcrumb for Player Respawn
DESCRIPTION: Creates and adds a Sentry breadcrumb to track player respawn events with associated metadata including player ID and spawn location. Uses the INFO level severity and includes custom data fields for detailed event tracking.

LANGUAGE: gdscript
CODE:
var message := "Player respawned"
var category := "gameplay"
var level := SentrySDK.LEVEL_INFO
var type := "default"
var data := {
	"player_id": 1,
	"spawn_point": "forest"
}

SentrySDK.add_breadcrumb(message, category, level, type, data)

----------------------------------------

TITLE: Configuring ContextLines Integration in Sentry
DESCRIPTION: The ContextLines integration enriches stack frames with source code context. It's enabled by default and can be configured to adjust how many lines of context are collected around each stack frame.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/browser';

Sentry.init({
  integrations: [
    new Sentry.contextLinesIntegration({
      frameContextLines: 7  // default value
    })
  ]
});

----------------------------------------

TITLE: Application Entry Point with Sentry (ESM)
DESCRIPTION: Example of properly importing Sentry initialization file before other modules in an ESM application.

LANGUAGE: javascript
CODE:
// Import this first!
import "./instrument";

// Now import other modules
import http from "http";

// Your application code goes here

----------------------------------------

TITLE: Compressing Debug Sections in ELF Files
DESCRIPTION: Command to compress debug sections when stripping an ELF executable using objcopy with zlib compression.

LANGUAGE: bash
CODE:
# Note the --compress-debug-sections option
objcopy --only-keep-debug --compress-debug-sections=zlib binary binary.debug

----------------------------------------

TITLE: Bug Fix Commit Message Example
DESCRIPTION: Example of a bug fix commit message showing proper formatting with header, body, and multiple issue references in the footer.

LANGUAGE: text
CODE:
fix(stream): Handle empty reference on resolve action

Gracefully handle when a user has not selected any issues and tries to complete
the resolve action in the UI.

Fixes GH-1234
Fixes SENTRY-1234

----------------------------------------

TITLE: Uploading Source Maps to Sentry for iOS
DESCRIPTION: Command to upload the iOS bundle and source map to Sentry using sentry-cli with debug ID reference.

LANGUAGE: bash
CODE:
node_modules/@sentry/cli/bin/sentry-cli sourcemaps upload \
  --debug-id-reference \
  --strip-prefix /path/to/project/root \
  main.jsbundle main.jsbundle.map

----------------------------------------

TITLE: Response Format for Issue Link Operations
DESCRIPTION: Required JSON response structure when creating or linking issues, containing web URL and issue identification details.

LANGUAGE: json
CODE:
{
  "webUrl": <String>,
  "project": <String>,
  "identifier": <String>
}

----------------------------------------

TITLE: Tracking Specific Components with sentry-label in React Native
DESCRIPTION: Illustrates how to use the sentry-label prop to specifically track certain components in your React Native app. This allows Sentry to log touch events for these components on the dashboard.

LANGUAGE: javascript
CODE:
const YourCoolComponent = (props) => {
  return (
    <View sentry-label="CardContainer">
      <Text sentry-label="CoolText">You are cool</Text>
    </View>
  );
};

----------------------------------------

TITLE: CLI Auth Token Parameter
DESCRIPTION: Direct authentication using command line parameter with auth token.

LANGUAGE: bash
CODE:
sentry-cli login --auth-token ___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Monitor Environment Specification
DESCRIPTION: Example of running a monitored job with a specific environment.

LANGUAGE: bash
CODE:
sentry-cli monitors run -e dev my-monitor-slug -- node path/to/file.js

----------------------------------------

TITLE: Setting Environment in Raven Configuration for Node.js
DESCRIPTION: This example demonstrates how to set the environment in the Raven configuration.

LANGUAGE: javascript
CODE:
{
  environment: "staging";
}

----------------------------------------

TITLE: Registering SentryUserFilter Bean in Spring
DESCRIPTION: Shows how to register the SentryUserFilter bean for capturing user information in Spring 5 and Spring 6 configurations.

LANGUAGE: Java
CODE:
import io.sentry.IHub;
import io.sentry.spring.SentryUserFilter;
import io.sentry.spring.SentryUserProvider;
import java.util.List;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SentryFilterConfig {

  @Bean
  public SentryUserFilter sentryUserFilter(
      final IHub hub, final List<SentryUserProvider> sentryUserProviders) {
    return new SentryUserFilter(hub, sentryUserProviders);
  }
}

LANGUAGE: Java
CODE:
import io.sentry.IHub;
import io.sentry.spring.jakarta.SentryUserFilter;
import io.sentry.spring.jakarta.SentryUserProvider;
import java.util.List;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SentryFilterConfig {

  @Bean
  public SentryUserFilter sentryUserFilter(
      final IHub hub, final List<SentryUserProvider> sentryUserProviders) {
    return new SentryUserFilter(hub, sentryUserProviders);
  }
}

LANGUAGE: Kotlin
CODE:
import io.sentry.IHub
import io.sentry.spring.SentryUserProvider
import io.sentry.spring.SentryUserFilter
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration

@Configuration
class SentryFilterConfig {
    @Bean
    fun sentryUserFilter(hub: IHub, sentryUserProviders: List<SentryUserProvider>) = SentryUserFilter(hub, sentryUserProviders)
}

LANGUAGE: Kotlin
CODE:
import io.sentry.IHub
import io.sentry.spring.jakarta.SentryUserProvider
import io.sentry.spring.jakarta.SentryUserFilter
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration

@Configuration
class SentryFilterConfig {
    @Bean
    fun sentryUserFilter(hub: IHub, sentryUserProviders: List<SentryUserProvider>) = SentryUserFilter(hub, sentryUserProviders)
}

----------------------------------------

TITLE: Adding Spring AOP Dependency in Maven
DESCRIPTION: Maven dependency required to enable AOP functionality for Sentry instrumentation

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-aop</artifactId>
</dependency>

----------------------------------------

TITLE: Clearing User Information in Sentry SDK for Unreal Engine (C++)
DESCRIPTION: This snippet shows how to clear the currently set user information using the Sentry SDK in Unreal Engine C++.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->RemoveUser();

----------------------------------------

TITLE: Setting Temporary Scope in Sentry PHP
DESCRIPTION: Uses withScope helper to temporarily modify scope for a single event capture. Sets character context and demonstrates capturing both messages and exceptions with the temporary scope.

LANGUAGE: php
CODE:
\Sentry\withScope(function (\Sentry\State\Scope $scope) use ($e): void {
    $scope->setContext('character', [
        'name' => 'Mighty Fighter',
        'age' => 19,
        'attack_type' => 'melee'
    ]);

    \Sentry\captureMessage('The fighter is out of energy!');
    // or: \Sentry\captureException($e);
});

----------------------------------------

TITLE: Setting Start Timestamp in JSON (ISO 8601)
DESCRIPTION: Shows how to specify the required start_timestamp attribute using an ISO 8601 formatted string.

LANGUAGE: json
CODE:
{
  "start_timestamp": "2011-05-02T17:41:36.242Z"
}

----------------------------------------

TITLE: Configuring GitHub App Credentials in Sentry YAML
DESCRIPTION: This YAML configuration snippet shows how to set up the GitHub App credentials in Sentry's config.yml file. It includes the App ID, App Name, Client ID, Client Secret, and Webhook Secret.

LANGUAGE: yaml
CODE:
# App ID
github-app.id: GITHUB_APP_ID
# App Name
github-app.name: "GITHUB_APP_NAME"
# Client ID
github-app.client-id: "GITHUB_CLIENT_ID"
# Client Secret
github-app.client-secret: "GITHUB_CLIENT_SECRET"
# Webhook Secret
github-app.webhook-secret: "my-super-secret-example-secret"

----------------------------------------

TITLE: Setting Up Sentry User Tracking Middleware in Node.js
DESCRIPTION: Express middleware that configures Sentry user tracking by setting user data from request object. The middleware checks for user presence and sets relevant user information (id, email, username) for error tracking, or clears it if no user is found.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

// Add a middleware, for example:
app.use((req, res, next) => {
  // Get the user from somewhere
  const user = req.user;

  // Set the user data for all requests
  if (user) {
    Sentry.setUser({
      id: user.id,
      email: user.email,
      username: user.username,
    });
  } else {
    Sentry.setUser(null);
  }

  next();
});

----------------------------------------

TITLE: Initializing Sentry with Custom Event Filtering in Dart
DESCRIPTION: This code initializes Sentry with a custom beforeSend option. The beforeSend function filters out events where the hint is of type MyHint, allowing only other events to be sent to Sentry. This approach can be used to selectively control which events are reported to Sentry based on specific conditions.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.beforeSend = (event, hint) {
    return hint is MyHint ? null : event;
  };
});

----------------------------------------

TITLE: Sample Sentry Event JSON Structure
DESCRIPTION: Example of a Sentry event JSON payload showing the structure of log entries and exception data.

LANGUAGE: json
CODE:
{
  "logentry": {
    "formatted": "Failed to roll out the dinglebop"
  },
  "exception": {
    "values": [
      {
        "type": "ZeroDivisionError",
        "value": "integer division or modulo by zero"
      }
    ]
  }
}

----------------------------------------

TITLE: No code snippets found
DESCRIPTION: This documentation page contains conceptual information and placeholder references to platform-specific content but no actual code snippets.



----------------------------------------

TITLE: Initializing Sentry with Profile Sample Rate
DESCRIPTION: Configuration for Sentry initialization using profilesSampleRate to control transaction profiling frequency. Sets up browser profiling integration, trace propagation targets, and sampling rates for both traces and profiles.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/astro";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add browser profiling integration to the list of integrations
    Sentry.browserProfilingIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],

  // Set profilesSampleRate to 1.0 to profile every transaction.
  // Since profilesSampleRate is relative to tracesSampleRate,
  // the final profiling rate can be computed as tracesSampleRate * profilesSampleRate
  // For example, a tracesSampleRate of 0.5 and profilesSampleRate of 0.5 would
  // result in 25% of transactions being profiled (0.5*0.5=0.25)
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing Sentry with Dataloader Integration
DESCRIPTION: Configuration code to initialize Sentry with the Dataloader integration. This enables automatic span capture using OpenTelemetry instrumentation. Requires Sentry SDK version 8.31.0 or higher and supports Dataloader versions 2.x.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.dataloaderIntegration()],
});

----------------------------------------

TITLE: Installing Dependencies with Package Managers
DESCRIPTION: Commands to install the required custom webpack builder for Angular and Sentry webpack plugin using different package managers (npm, yarn, pnpm).

LANGUAGE: shell
CODE:
npm install @angular-builders/custom-webpack @sentry/webpack-plugin --save-dev

LANGUAGE: shell
CODE:
yarn add @angular-builders/custom-webpack @sentry/webpack-plugin --dev

LANGUAGE: shell
CODE:
pnpm add @angular-builders/custom-webpack @sentry/webpack-plugin --save-dev

----------------------------------------

TITLE: Adding Data Attributes to Spans in Java
DESCRIPTION: Demonstrates how to add string, number, boolean, and array data attributes to a Sentry span using Java. Shows usage of span.setData() method with different data types.

LANGUAGE: java
CODE:
ISpan span = parent.startChild("task", "operation");
span.setData("my-data-attribute-1", "value1");
span.setData("my-data-attribute-2", 42);
span.setData("my-data-attribute-3", true);

span.setData("my-data-attribute-4", Arrays.asList("value1", "value2", "value3"));
span.setData("my-data-attribute-5", Arrays.asList(42, 43, 44));
span.setData("my-data-attribute-6", Arrays.asList(true, false, true));

----------------------------------------

TITLE: Testing Hooks with Network Requests in React Query
DESCRIPTION: Demonstrates how to test hooks that use React Query for network requests. It includes setting up a test query client and wrapper, as well as mocking API responses.

LANGUAGE: tsx
CODE:
import {makeTestQueryClient} from 'sentry-test/queryClient';
import {reactHooks} from 'sentry-test/reactTestingLibrary';
import {QueryClientProvider} from 'sentry/utils/queryClient';

function wrapper({children}: {children?: ReactNode}) {
  return (
    <QueryClientProvider client={makeTestQueryClient()}>{children}</QueryClientProvider>
  );
}

describe('useFetchSomeData', () => {
  it('should fetch', () => {
    const request = MockApiClient.addMockResponse(...);

    const {result, waitFor} = reactHooks.renderHook(useFetchSomeData, {
      wrapper,
      initialProps: {organization},
    });

    expect(request).toHaveBeenCalled();
  });
});

----------------------------------------

TITLE: Capturing User Feedback with Sentry SDK in Swift
DESCRIPTION: This snippet demonstrates how to capture a message and user feedback using the Sentry SDK in Swift. It shows the process of creating a UserFeedback object, populating it with user information, and sending it to Sentry.

LANGUAGE: Swift
CODE:
import Sentry

let eventId = SentrySDK.capture(message: "My message.")

let userFeedback = UserFeedback(eventId: eventId)
userFeedback.comments = "It broke."
userFeedback.email = "john.doe@example.com"
userFeedback.name = "John Doe"
SentrySDK.capture(userFeedback: userFeedback)

----------------------------------------

TITLE: Initializing FunctionToString Integration in Sentry SDK (JavaScript)
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK with the FunctionToString integration. The integration allows the SDK to provide original function and method names, even when wrapped by error or breadcrumb handlers. It is enabled by default but can be explicitly included in the integrations array during initialization.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  integrations: [Sentry.functionToStringIntegration()],
});

----------------------------------------

TITLE: Implementing Action Transformer
DESCRIPTION: Example of implementing an action transformer to filter sensitive action data before sending to Sentry.

LANGUAGE: javascript
CODE:
createSentryPiniaPlugin({
  actionTransformer: (action) => {
    if (action === "GOVERNMENT_SECRETS") {
      // Return null to not log the action to Sentry
      return null;
    }

    return action;
  },
});

----------------------------------------

TITLE: Installing Sentry NestJS SDK without Profiling
DESCRIPTION: These commands install the @sentry/nestjs package using different package managers. This is the basic installation without profiling capabilities.

LANGUAGE: bash
CODE:
npm install @sentry/nestjs --save

LANGUAGE: bash
CODE:
yarn add @sentry/nestjs

LANGUAGE: bash
CODE:
pnpm add @sentry/nestjs

----------------------------------------

TITLE: Configuring Sentry Webpack Plugin
DESCRIPTION: Integration of Sentry webpack plugin configuration in webpack.config.js for source map uploads.

LANGUAGE: javascript
CODE:
const { sentryWebpackPlugin } = require("@sentry/webpack-plugin");

...

module.exports = {
   ...
  plugins: [
      sentryWebpackPlugin({
         org: "___ORG_SLUG___",
         project: "___PROJECT_SLUG___",
         authToken: process.env.SENTRY_AUTH_TOKEN,
      }),
   ],
   ...
}

----------------------------------------

TITLE: Setting Sentry DSN in Environment File
DESCRIPTION: Add the Sentry DSN to the Laravel .env file. This configures the connection between your application and Sentry's error tracking service.

LANGUAGE: shell
CODE:
SENTRY_LARAVEL_DSN=___PUBLIC_DSN___

----------------------------------------

TITLE: Configuring MinIO S3 Backend in Sentry
DESCRIPTION: Configuration for MinIO S3-compatible storage backend. Requires access credentials and endpoint URL for the MinIO server.

LANGUAGE: yaml
CODE:
filestore.backend: "s3"
filestore.options:
  access_key: "..."
  secret_key: "..."
  bucket_name: "..."
  endpoint_url: "https://minio.example.org/"

----------------------------------------

TITLE: Configuring Profiling Settings
DESCRIPTION: PHP configuration for enabling both tracing and profiling with sampling rates

LANGUAGE: php
CODE:
'traces_sample_rate' => 1.0,
// Set a sampling rate for profiling - this is relative to traces_sample_rate
'profiles_sample_rate' => 1.0,

----------------------------------------

TITLE: Using @SentrySpan Annotation in Spring 6 (Java)
DESCRIPTION: Example of using @SentrySpan annotation to create a span for a method execution in Spring 6 Java application.

LANGUAGE: java
CODE:
import org.springframework.stereotype.Component;
import io.sentry.spring.jakarta.tracing.SentrySpan;

@Component
class PersonService {

  @SentrySpan
  Person findById(Long id) {
    ...
  }
}

----------------------------------------

TITLE: Initializing Sentry SDK in Lambda Handler
DESCRIPTION: JavaScript code showing manual SDK initialization and Lambda handler wrapping for error monitoring and performance tracking.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/aws-serverless");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Add Tracing by setting tracesSampleRate and adding integration
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
});

exports.handler = Sentry.wrapHandler(async (event, context) => {
  // Your handler code
});

----------------------------------------

TITLE: Excluding Specific Classes from Swizzling in Sentry SDK (Swift)
DESCRIPTION: This code snippet demonstrates how to exclude specific classes from swizzling in the Sentry SDK using Swift. It uses the 'swizzleClassNameExcludes' option to specify class names that should not be swizzled.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.swizzleClassNameExcludes = [
      "MyUIViewController",
    ]
}

----------------------------------------

TITLE: Uploading Debug Files Using sentry-cli
DESCRIPTION: Use the sentry-cli command to upload debug files recursively from a folder to Sentry. This should be done before deploying or releasing the application to ensure proper crash report processing.

LANGUAGE: bash
CODE:
sentry-cli debug-files upload

----------------------------------------

TITLE: Adding Span Description in JSON
DESCRIPTION: Demonstrates setting the optional description attribute to provide a detailed explanation of the span's operation.

LANGUAGE: json
CODE:
{
  "description": "SELECT * FROM users WHERE last_active < DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)`"
}

----------------------------------------

TITLE: Configuring Sentry Metrics in Flutter
DESCRIPTION: This snippet shows how to initialize Sentry Flutter SDK with metrics enabled. It requires Sentry Flutter SDK version 7.19.0 or above.

LANGUAGE: dart
CODE:
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) {
      options.dsn = '___PUBLIC_DSN___';
      options.enableMetrics = true;
    },
    appRunner: initApp, // Init your App.
  );
}

----------------------------------------

TITLE: Configuring Redis Integration Options
DESCRIPTION: Example of how to configure Redis integration options when initializing Sentry SDK. It demonstrates setting max_data_size and cache_prefixes options for the RedisIntegration.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.redis import RedisIntegration

sentry_sdk.init(
    # ...
    integrations=[
        RedisIntegration(
            max_data_size=None,
            cache_prefixes=["mycache", "template.cache"],
        ),
    ],
)

----------------------------------------

TITLE: Adding Sentry Dependencies in mix.exs
DESCRIPTION: Adds Sentry, Jason (JSON parser), and Hackney (HTTP client) as dependencies in an Elixir project's mix.exs file. The code specifies version requirements for each package to ensure compatibility.

LANGUAGE: elixir
CODE:
defp deps do
  [
    # ...
    {:sentry, "~> {{@inject packages.version('sentry.elixir') }}"},
    {:jason, "~> 1.1"},

    # If you want to use Sentry's default HTTP client:
    {:hackney, "~> 1.8"}
  ]
end

----------------------------------------

TITLE: Configuring Global Database Factory
DESCRIPTION: Setup for instrumenting all database operations using SentrySqfliteDatabaseFactory as the global database factory.

LANGUAGE: dart
CODE:
import 'package:sentry_sqflite/sentry_sqflite.dart';
import 'package:sqflite/sqflite.dart';

databaseFactory = SentrySqfliteDatabaseFactory();
final database = await openDatabase('path/to/db');

----------------------------------------

TITLE: Configuring Sentry in YAML File
DESCRIPTION: Configuration for Sentry in application.yml file. Sets the DSN and trace sampling rate for Spring Boot applications using YAML format.

LANGUAGE: yaml
CODE:
sentry:
    dsn: ___PUBLIC_DSN___
    traces-sample-rate: 1.0

----------------------------------------

TITLE: Capturing Error Message with Sentry in Elixir
DESCRIPTION: Sends a custom error message to Sentry for logging and monitoring. Uses the capture_message function from the Sentry client to report a simple string message.

LANGUAGE: elixir
CODE:
Sentry.capture_message("Something went wrong")

----------------------------------------

TITLE: Setting User Context with Sentry.setUser()
DESCRIPTION: Demonstrates two ways to set user context in Sentry: using either a user ID or username. This helps associate error reports with specific users for better debugging and monitoring.

LANGUAGE: javascript
CODE:
Sentry.setUser({ id: user.id });

// or

Sentry.setUser({ username: user.username });

----------------------------------------

TITLE: Filtering Error Events with before-send in JavaScript
DESCRIPTION: Use the beforeSend callback to filter out error events based on custom logic. This example drops all events from a specific logger.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event) {
    if (event.logger == "my.logger.name") {
      return null;
    }
    return event;
  },
});

----------------------------------------

TITLE: Using useState Hook in React
DESCRIPTION: Example of using the useState hook in a functional component for managing state.

LANGUAGE: jsx
CODE:
const [state, setState] = useState(initialState);

----------------------------------------

TITLE: Installing Sentry Next.js SDK with yarn
DESCRIPTION: This command installs the Sentry SDK for Next.js using yarn package manager. It adds the @sentry/nextjs package as a project dependency.

LANGUAGE: bash
CODE:
yarn add @sentry/nextjs

----------------------------------------

TITLE: Capturing Messages with Raven-Go SDK in Go
DESCRIPTION: This example demonstrates the use of CaptureMessageAndWait to send a custom message to Sentry along with additional context in the form of key-value pairs.

LANGUAGE: go
CODE:
raven.CaptureMessageAndWait("Something bad happened and I would like to know about that", map[string]string{"category": "logging"})

----------------------------------------

TITLE: Updating BrowserTracing Integration in npm Environment
DESCRIPTION: This snippet demonstrates how to update the BrowserTracing integration when using npm. It replaces the class-based integration with a function-based integration.

LANGUAGE: JavaScript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
-  integrations: [new Sentry.BrowserTracing()],
+  integrations: [Sentry.browserTracingIntegration()],
});

----------------------------------------

TITLE: Spring Boot 3 Transaction Annotation (Java)
DESCRIPTION: Example of using @SentryTransaction annotation to instrument a scheduled job execution in Spring Boot 3

LANGUAGE: java
CODE:
import org.springframework.stereotype.Component;
import org.springframework.scheduling.annotation.Scheduled;
import io.sentry.spring.jakarta.tracing.SentryTransaction;

@Component
class ScheduledJob {

  @Scheduled(...)
  @SentryTransaction(operation = "task")
  void execute() {
    ...
  }
}

----------------------------------------

TITLE: Configuring Default PII Sending in Ruby
DESCRIPTION: This snippet shows how to enable sending of default personally identifiable information (PII) in the Sentry Ruby SDK configuration.

LANGUAGE: ruby
CODE:
config.send_default_pii = true

----------------------------------------

TITLE: Customizing Span Creation with beforeStartSpan
DESCRIPTION: Example of using beforeStartSpan to add custom attributes to performance spans.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactNativeTracingIntegration({
      beforeStartSpan: (context) => {
        return {
          ...context,
          attributes: {
            ...context.attributes,
            "custom": "value",
          },
        };
      },
    }),
  ],
});

----------------------------------------

TITLE: Optional Attributes Examples in JSON
DESCRIPTION: Examples of various optional attributes including level, logger, transaction, server_name, release, dist, tags, environment, modules, extra, fingerprint, and errors.

LANGUAGE: json
CODE:
{
  "level": "warning"
}

LANGUAGE: json
CODE:
{
  "logger": "my.logger.name"
}

LANGUAGE: json
CODE:
{
  "transaction": "/users/<username>/"
}

LANGUAGE: json
CODE:
{
  "server_name": "foo.example.com"
}

LANGUAGE: json
CODE:
{
  "release": "my-project-name@1.0.0"
}

LANGUAGE: json
CODE:
{
  "release": "721e41770371db95eee98ca2707686226b993eda",
  "dist": "14G60"
}

LANGUAGE: json
CODE:
{
  "tags": {
    "ios_version": "4.0",
    "context": "production"
  }
}

LANGUAGE: json
CODE:
{
  "environment": "production"
}

LANGUAGE: json
CODE:
{
  "modules": {
    "my.module.name": "1.0"
  }
}

LANGUAGE: json
CODE:
{
  "extra": {
    "my_key": 1,
    "some_other_value": "foo bar"
  }
}

LANGUAGE: json
CODE:
{
  "fingerprint": ["myrpc", "POST", "/foo.bar"]
}

LANGUAGE: json
CODE:
{
  "errors": [
    {
      "type": "unknown_error",
      "path": "/var/logs/errors.log.1",
      "details": "Failed to read attachment"
    }
  ]
}

----------------------------------------

TITLE: Optimized Bulk Object Creation
DESCRIPTION: Improved version using bulk_create to create multiple objects in a single query.

LANGUAGE: python
CODE:
Book.objects.bulk_create(
    [Book(title: f"Book {i}") for i in range(1, 11)]
)

----------------------------------------

TITLE: Setting Release Version in Sentry SDK
DESCRIPTION: This snippet demonstrates how to set the release version when initializing the Sentry SDK. The actual implementation is platform-specific and not shown in the provided text.

LANGUAGE: dart
CODE:
<PlatformContent includePath="set-release" notateUnsupported />

----------------------------------------

TITLE: Setting Root Span Name After Span Completion in Sentry JavaScript SDK
DESCRIPTION: This code shows how to change the root span name retroactively using the beforeSendTransaction hook, when the name can't be determined before the span finishes.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSendTransaction(event) {
    event.transaction = "UserListView";
    return event;
  },
});

----------------------------------------

TITLE: Implementing PreprocessEvent Hook in Sentry Custom Integration (JavaScript)
DESCRIPTION: This snippet shows the preprocessEvent hook in a custom Sentry integration. Similar to processEvent, it's called before any other processEvent hooks. It receives the event, hint, and client as arguments but can only mutate the event, not return a modified version or null.

LANGUAGE: javascript
CODE:
const integration = {
  name: "MyAwesomeIntegration",
  preprocessEvent(event, hint, client) {
    event.extra = {
      ...event.extra,
      myCustomTag: "value",
    };
    // Nothing to return, just mutate the event
  },
};

----------------------------------------

TITLE: Uploading Debug Files with Source Context via Sentry CLI
DESCRIPTION: Command to upload debug files with source context using sentry-cli. Uses the --include-sources flag to bundle and upload source code files referenced in debug files.

LANGUAGE: bash
CODE:
sentry-cli debug-files upload --auth-token ___ORG_AUTH_TOKEN___ \
  --include-sources \
  --org ___ORG_SLUG___ \
  --project ___PROJECT_SLUG___ \
  PATH_TO_DSYMS

----------------------------------------

TITLE: Configuring Sentry Auth Token in Environment File
DESCRIPTION: Example of setting the Sentry authentication token in a .env.sentry-build-plugin file.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Remove Sentry User via C++
DESCRIPTION: Removes the currently set user from Sentry tracking by accessing the Sentry subsystem and calling RemoveUser(). This method requires the Sentry plugin to be properly initialized in the Unreal Engine project.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->RemoveUser();

----------------------------------------

TITLE: Kotlin Logging Implementation
DESCRIPTION: Example Kotlin class demonstrating various logging patterns including simple messages, breadcrumbs, and exception handling with Sentry integration.

LANGUAGE: kotlin
CODE:
import java.util.logging.Level
import java.util.logging.Logger

class MyClass {
  fun logSimpleMessage() {
    // This sends a simple event to Sentry
    logger.error(Level.INFO, "This is a test")
  }

  fun logWithBreadcrumbs() {
    // Record a breadcrumb that will be sent with the next event(s),
    // by default the last 100 breadcrumbs are kept.
    Sentry.record(
      BreadcrumbBuilder().setMessage("User made an action").build()
    )

    // This sends a simple event to Sentry
    logger.error("This is a test")
  }

  fun logException() {
    try {
      unsafeMethod()
    } catch (e: Exception) {
      // This sends an exception event to Sentry
      logger.error(Level.SEVERE, "Exception caught", e)
    }
  }

  fun unsafeMethod() {
    throw UnsupportedOperationException("You shouldn't call this!")
  }

  companion object {
    private val logger = Logger.getLogger(MyClass::class.java.name)
  }
}

----------------------------------------

TITLE: Managing Current Span with Parent-Child Relationship
DESCRIPTION: Illustrates how to work with nested spans, including getting the current span, creating child spans, and properly managing the span hierarchy through setting and restoring current spans.

LANGUAGE: php
CODE:
$parentSpan = \Sentry\SentrySdk::getCurrentHub()->getSpan();

if ($parentSpan !== null) {
    $context = \Sentry\Tracing\SpanContext::make()
        ->setOp('some_operation');
    $span = $parentSpan->startChild($context);

    // Set the span we just started as the current span
    \Sentry\SentrySdk::getCurrentHub()->setSpan($span);

    // ...

    $span->finish();

    // Restore the span back to the parent span
    \Sentry\SentrySdk::getCurrentHub()->setSpan($parentSpan);
}

----------------------------------------

TITLE: Defining Span Operation in JSON
DESCRIPTION: Shows how to set the recommended op attribute to identify the type of operation the span is measuring.

LANGUAGE: json
CODE:
{
  "op": "db.query"
}

----------------------------------------

TITLE: Initializing Sentry SDK for Server-Side Metrics in Astro
DESCRIPTION: This snippet shows the configuration for initializing the Sentry SDK for server-side metrics in an Astro project. It includes the DSN setup and comments about configuration for older SDK versions.

LANGUAGE: JavaScript
CODE:
// sentry.server.config.js
Sentry.init({
  dsn: '___PUBLIC_DSN___',
  // Only needed for SDK versions < 8.0.0
  // _experiments: {
  //   metricsAggregator: true,
  // },
});

----------------------------------------

TITLE: Command Line Build Configuration for Sentry
DESCRIPTION: Shell command showing how to pass Sentry configuration parameters directly to dotnet build command.

LANGUAGE: shell
CODE:
dotnet build YourProject.csproj -c Release -p:SentryOrg=___ORG_SLUG___ -p:SentryProject=___PROJECT_SLUG___ -p:SentryUploadSymbols=true -p:SentryUploadSources=true

----------------------------------------

TITLE: Creating a Sample OpenTelemetry Span with Sentry Integration in Python
DESCRIPTION: This snippet demonstrates how to create and use an OpenTelemetry span that will be captured by Sentry. It creates a tracer, starts a span, and simulates some processing time using a sleep function.

LANGUAGE: python
CODE:
import time

tracer = trace.get_tracer(__name__)

with tracer.start_as_current_span("test_otel_span"):
    print("Processing some data...")
    # Simulate some processing
    time.sleep(3)

----------------------------------------

TITLE: Verifying sentry-cli Installation
DESCRIPTION: This command checks if sentry-cli is installed correctly by displaying the help information.

LANGUAGE: bash
CODE:
sentry-cli --help

----------------------------------------

TITLE: Installing Basic Sentry Node.js SDK
DESCRIPTION: Commands to install the basic Sentry Node.js SDK package using different package managers. This is for standard error monitoring without profiling capabilities.

LANGUAGE: bash
CODE:
npm install @sentry/node

LANGUAGE: bash
CODE:
yarn add @sentry/node

LANGUAGE: bash
CODE:
pnpm add @sentry/node

----------------------------------------

TITLE: Creating Anchor Link to Another Page in Markdown
DESCRIPTION: Shows how to create an anchor link to a specific heading on another page or an external page.

LANGUAGE: markdown
CODE:
To add to your quota or review what happens when you exceed it, see [Increasing Quotas](/pricing/quotas/#increasing-quotas).

----------------------------------------

TITLE: Capturing User Feedback in Kotlin with Sentry
DESCRIPTION: Implementation of Sentry user feedback capture in Kotlin using apply scope function. Creates a message event, generates a Sentry ID, and attaches user feedback with comments, email, and name information.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.UserFeedback

val sentryId = Sentry.captureMessage("My message")

val userFeedback = UserFeedback(sentryId).apply {
  comments = "It broke."
  email = "john.doe@example.com"
  name = "John Doe"
}
Sentry.captureUserFeedback(userFeedback)

----------------------------------------

TITLE: Configuring Release for Sentry SDK in Elixir
DESCRIPTION: Sets the release version for event tracking. It's recommended to set this manually to ensure synchronization with deploy integrations or source map uploads. The SDK will try to read this from the SENTRY_RELEASE environment variable by default.

LANGUAGE: elixir
CODE:
config :sentry,
  release: "1.0.0"

----------------------------------------

TITLE: Configuring Custom Logging Integration in Python
DESCRIPTION: Sets up a custom LoggingIntegration with specific log levels for breadcrumbs and events.

LANGUAGE: python
CODE:
import logging
import sentry_sdk
from sentry_sdk.integrations.logging import LoggingIntegration

# The SDK will honor the level set by the logging library, which is WARNING by default.
# If we want to capture records with lower severity, we need to configure
# the logger level first.
logging.basicConfig(level=logging.INFO)

sentry_sdk.init(
    # ...
    integrations=[
        LoggingIntegration(
            level=logging.INFO,        # Capture info and above as breadcrumbs
            event_level=logging.INFO   # Send records as events
        ),
    ],
)

----------------------------------------

TITLE: Configuring Sentry Service in Symfony YAML
DESCRIPTION: Defines Sentry configuration in Symfony's YAML format, setting up the before_send_transaction callback service. The configuration connects the Sentry options to a service class that will process events.

LANGUAGE: yaml
CODE:
sentry:
    options:
        before_send_transaction: 'sentry.callback.before_send_transaction'

services:
    sentry.callback.before_send_transaction:
        class: 'App\Service\Sentry'
        factory: [ '@App\Service\Sentry', 'getBeforeSendTransaction' ]

----------------------------------------

TITLE: Installing Basic Sentry Node.js SDK
DESCRIPTION: Commands to install the basic Sentry Node.js SDK package using different package managers. This is for standard error monitoring without profiling capabilities.

LANGUAGE: bash
CODE:
npm install @sentry/node

LANGUAGE: bash
CODE:
yarn add @sentry/node

LANGUAGE: bash
CODE:
pnpm add @sentry/node

----------------------------------------

TITLE: Configuring Ignored Transactions in Sentry Properties
DESCRIPTION: Defines transactions to be ignored by Sentry monitoring using HTTP method and URL pattern combinations. Includes a GET request to /api/person and all POST requests matching any URL pattern.

LANGUAGE: properties
CODE:
ignored-transactions=GET /api/person,POST .*

----------------------------------------

TITLE: Example JSON Payload for Data Scrubbing
DESCRIPTION: This JSON snippet demonstrates an event payload containing sensitive data. It shows how different fields would be affected by data scrubbing and safe field configurations.

LANGUAGE: json
CODE:
{
  "user": {
    "id": "4111111111111111"
  },
  "extra": {
    "id": "sensitive",
    "sys.argv": ["script.py", "password"],
    "credentials": { "username": "jane", "password": "p4ssw0rd!" }
  }
}

----------------------------------------

TITLE: Rendering Page Grid Component in Markdown
DESCRIPTION: A React/MDX component rendering a grid layout for the engineering practices documentation page.

LANGUAGE: markdown
CODE:
<PageGrid />

----------------------------------------

TITLE: Flushing Sentry Events in React Native
DESCRIPTION: Demonstrates how to manually flush Sentry events to disk using the flush() method. This ensures all events are persisted before the application terminates.

LANGUAGE: javascript
CODE:
Sentry.flush()

----------------------------------------

TITLE: Setting Up Multiple PII Rules in Sentry (JSON)
DESCRIPTION: Shows how to combine multiple rules into one using the 'multiple' type. This example combines IP and MAC address rules, applying a remove redaction method to both.

LANGUAGE: json
CODE:
{
  "rules": {
    "remove_ips_and_macs": {
      "type": "multiple",
      "rules": [
        "@ip",
        "@mac"
      ],
      "hide_rule": false,
      "redaction": {
        "method": "remove"
      }
    }
  },
  "applications": {
    "$string": ["remove_ips_and_macs"]
  }
}

----------------------------------------

TITLE: Forcing Transaction Sampling Decision
DESCRIPTION: Demonstrates how to explicitly set a sampling decision when creating a transaction, bypassing the normal sampling logic.

LANGUAGE: javascript
CODE:
Sentry.startTransaction({
  name: "Important Transaction",
  sampled: true // or false
});

----------------------------------------

TITLE: Configuring Spring MVC Async Task Executor (Spring 5)
DESCRIPTION: Implementation of WebMvcConfigurer to set up ThreadPoolTaskExecutor with SentryTaskDecorator for Spring MVC async methods. This enables Sentry scope propagation for methods returning Callable or StreamingResponseBody.

LANGUAGE: java
CODE:
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.AsyncTaskExecutor;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import io.sentry.spring.SentryTaskDecorator;

@Configuration
class AsyncWebMvcConfiguration implements WebMvcConfigurer {

    @Override
    public void configureAsyncSupport(AsyncSupportConfigurer configurer) {
        configurer.setTaskExecutor(asyncExecutor());
    }

    private AsyncTaskExecutor asyncExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setTaskDecorator(new SentryTaskDecorator());
        executor.initialize();
        return executor;
    }
}

----------------------------------------

TITLE: Installing Sentry SDK with Quart Integration
DESCRIPTION: Installs the Sentry SDK from PyPI with the 'quart' extra, which includes support for the Quart Web Framework.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk[quart]

----------------------------------------

TITLE: Installing Sentry SDKs with Package Managers
DESCRIPTION: Commands to install the required Sentry Remix and Cloudflare SDKs using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/remix @sentry/cloudflare --save

LANGUAGE: bash
CODE:
yarn add @sentry/remix @sentry/cloudflare

LANGUAGE: bash
CODE:
pnpm add @sentry/remix @sentry/cloudflare

----------------------------------------

TITLE: Implementing Custom Transaction Sampling Callback in C
DESCRIPTION: Defines a custom sampling callback function that determines whether transactions should be sampled based on parent sampling decisions, transaction context, and custom sampling parameters. Returns sampling rates between 0.0 and 1.0.

LANGUAGE: c
CODE:
static double
traces_sampler_callback(const sentry_transaction_context_t *transaction_ctx,
    sentry_value_t custom_sampling_ctx, const int *parent_sampled)
{
    // check if there was a parent sampling decision
    if (parent_sampled != NULL) {
        if (*parent_sampled) {
            return 0.8; // high sample rate for children of sampled transactions
        }
        return 0.0; // don't sample if parent is not sampled
    }
    // a sampling decision can be made on the transaction context name and operation
    if (strcmp(sentry_transaction_context_get_name(transaction_ctx),
        "little.teapot") == 0) {
        if (strcmp(sentry_transaction_context_get_operation(transaction_ctx),
            "Short and stout here is my handle and here is my spout") == 0) {
            // use the custom_sampling_ctx as a key-value dictionary
            if (sentry_value_as_int32(
                sentry_value_get_by_key(custom_sampling_ctx, "b")) == 42) {
                return 1;
            }
        }
    }
    return 0;
}

LANGUAGE: c
CODE:
sentry_options_t *options = sentry_options_new();
sentry_options_set_traces_sampler(options, traces_sampler_callback);
sentry_init(options);

----------------------------------------

TITLE: Enabling Chartcuterie in Sentry Development Environment
DESCRIPTION: Shows how to enable Chartcuterie in the local developer environment by modifying the config.yml file. This is a prerequisite for using Chartcuterie locally.

LANGUAGE: yaml
CODE:
# Enable charctuerie
chart-rendering.enabled: true

----------------------------------------

TITLE: Capturing Custom Exceptions
DESCRIPTION: Demonstrates exception handling and capture with additional context data in both SDK versions.

LANGUAGE: python
CODE:
try:
    throwing_function()
except Exception:
    client.captureException(extra={'debug': False})

LANGUAGE: python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.set_extra('debug', False)

    try:
        throwing_function()
    except Exception as e:
        sentry_sdk.capture_exception(e)

----------------------------------------

TITLE: Customizing Serverless Handler Function Detection
DESCRIPTION: Configuration example showing how to customize the detection of serverless handler functions using the experimental_entrypointWrappedFunctions option.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@solidjs/start/config';
import { withSentry } from '@sentry/solidstart';

export default defineConfig(withSentry(
    {},
    {
      autoInjectServerSentry: 'experimental_dynamic-import',
      // Customize detected function names
      // Default value: ['default', 'handler', 'server']
      experimental_entrypointWrappedFunctions: ['customFunctionName']
    })
 );

----------------------------------------

TITLE: Customizing Timeout Warning Limit in Sentry Lambda Handler
DESCRIPTION: Modifies the timeout warning threshold by setting a custom timeoutWarningLimit value in milliseconds.

LANGUAGE: javascript
CODE:
exports.handler = Sentry.wrapHandler(yourHandler, {
  timeoutWarningLimit: 700,
});

----------------------------------------

TITLE: Installing Sentry SDK with Falcon Support
DESCRIPTION: Command to install sentry-sdk package with Falcon integration support using pip.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[falcon]'

----------------------------------------

TITLE: Sending Multiple Stored Event JSONs with Sentry CLI
DESCRIPTION: Demonstrates how to send multiple stored event JSON files using a glob pattern.

LANGUAGE: bash
CODE:
sentry-cli send-event "./events/*.json"

----------------------------------------

TITLE: Upgrading Packages to Latest Version with Yarn
DESCRIPTION: Command to upgrade specified packages to their latest versions using Yarn.

LANGUAGE: bash
CODE:
yarn upgrade --latest [package-name] [...]

----------------------------------------

TITLE: Capturing Exceptions with Raven Client in Python
DESCRIPTION: Demonstrates how to initialize the Raven client and capture a ZeroDivisionError exception. Requires the Raven library and a valid Sentry DSN.

LANGUAGE: python
CODE:
from raven import Client

client = Client('___DSN___')

try:
    1 / 0
except ZeroDivisionError:
    client.captureException()

----------------------------------------

TITLE: Configuring GitHub App for SSO in Sentry YAML
DESCRIPTION: This YAML snippet shows the configuration required for setting up GitHub App integration for SSO in Sentry. It includes various GitHub App details and optional settings for multiple organization support.

LANGUAGE: yaml
CODE:
github-app.id: <App ID>
github-app.name: '<GitHub App name>'
github-app.webhook-secret: '<Webhook secret>' # Use only if configured in GitHub
github-app.client-id: '<Client ID>'
github-app.client-secret: '<Client secret>'
github-app.private-key: |
  -----BEGIN RSA PRIVATE KEY-----
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  -----END RSA PRIVATE KEY-----

# Only needed if you have multiple organizations enabled
github-login.client-id: '<Client ID>'
github-login.client-secret: '<Client secret>'
github-login.require-verified-email: true # Optional but recommended

----------------------------------------

TITLE: Adding Binary Attachment to Sentry Scope in PowerShell
DESCRIPTION: Demonstrates how to add an in-memory binary attachment to the current Sentry scope. Creates a byte array and attaches it to the scope with a specified filename using the ScopeExtensions class from the Sentry SDK.

LANGUAGE: powershell
CODE:
# Add an in-memory attachment to the current scope
Edit-SentryScope {
    [byte[]] $data = 1, 2, 3, 4, 5
    [Sentry.ScopeExtensions]::AddAttachment($_, $data, 'filename.bin')
}

----------------------------------------

TITLE: Configuring Redis Backend for Sentry TSDB
DESCRIPTION: This snippet demonstrates how to set up the Redis backend for Sentry's TSDB. It reads and writes all data to Redis, but some event ingestion related data will be zeroed out. It also shows how to specify a different Redis cluster.

LANGUAGE: python
CODE:
SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'

LANGUAGE: python
CODE:
SENTRY_TSDB_OPTIONS = {
    'cluster': 'tsdb',
}

----------------------------------------

TITLE: Initializing Sentry with Breadcrumb Filtering in Java
DESCRIPTION: This snippet demonstrates how to initialize Sentry in Java and set up a custom breadcrumb filter. It uses a lambda function to check if the hint is of type MyHint and discards the breadcrumb if true, otherwise returning the original breadcrumb.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setBeforeBreadcrumb((breadcrumb, hint) -> {
    if (hint instanceof MyHint) {
      return null;
    } else {
      return breadcrumb;
    }
  });
});

----------------------------------------

TITLE: Sentry Auth Token Configuration
DESCRIPTION: Environment variable configuration for Sentry authentication token.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Configuring Sentry Report Dialog with Page Refresh
DESCRIPTION: Implementation of Sentry.showReportDialog() with a custom onClose handler that reloads the page after the dialog is closed. Requires Sentry JS SDK version 7.82.0 or higher.

LANGUAGE: html
CODE:
<script>
  Sentry.showReportDialog({
    // ...
    onClose() {
      // Refresh the page after the user closes the report dialog
      location.reload();
    },
  });
</script>

----------------------------------------

TITLE: Setting HTTP Span Attributes in JavaScript
DESCRIPTION: Example of setting HTTP query and fragment attributes on a span using JavaScript. This demonstrates the proper way to structure URL-related data in spans for better data scrubbing.

LANGUAGE: javascript
CODE:
span.setAttributes({
  "http.query": url.getQuery(),
  "http.fragment": uri.getFragment(),
});

----------------------------------------

TITLE: Sending Multiple Messages with Sentry CLI
DESCRIPTION: Shows how to send multiple message lines in a single event using the sentry-cli send-event command.

LANGUAGE: bash
CODE:
sentry-cli send-event -m "Hello from Sentry" -m "This is more text"

----------------------------------------

TITLE: Setting User Information in Sentry SDK
DESCRIPTION: This snippet demonstrates how to set user information in the Sentry SDK. It includes placeholders for id, username, and email, which are key components of user identification.

LANGUAGE: javascript
CODE:
Sentry.setUser({"id": "12345", "email": "jane.doe@example.com"});

----------------------------------------

TITLE: E-commerce Microservices Tracing Configuration
DESCRIPTION: Sentry configuration optimized for microservices architecture in an e-commerce platform, tracking across multiple service endpoints.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  // Capture 100% of spans. This is useful for development and debugging. Consider reducing in production or using traceSampler
  tracesSampleRate: 1.0,
  tracePropagationTargets: [
    "https://api.myecommerce.com",
    "https://auth.myecommerce.com",
    /^\/internal-api\//
  ],
});

----------------------------------------

TITLE: Initializing Sentry Report Dialog with Amplitude Tracking
DESCRIPTION: Demonstrates how to set up Sentry's showReportDialog method with a custom onLoad handler that logs an event to Amplitude when the error reporting dialog is displayed to the user.

LANGUAGE: html
CODE:
<script>
  Sentry.showReportDialog({
    // ...
    onLoad() {
      // Log an event to amplitude when the report dialog opens
      amplitude.logEvent("report_dialog_seen");
    },
  });
</script>

----------------------------------------

TITLE: Creating Code Block Examples with Syntax Highlighting
DESCRIPTION: Demonstrates how to create code blocks with syntax highlighting, line highlighting, and diff annotations in multiple programming languages.

LANGUAGE: javascript
CODE:
function foo() {
  let lookat = "me";
  return "bar";
}

LANGUAGE: python
CODE:
def foo():
  return 'bar'

----------------------------------------

TITLE: Installing Excimer via Package Manager
DESCRIPTION: Command to install the Excimer PHP extension using apt-get package manager

LANGUAGE: bash
CODE:
apt-get install php-excimer

----------------------------------------

TITLE: Using withScope with Multiple Sentry Clients
DESCRIPTION: This example shows how to use the withScope function in a multi-client Sentry setup. It demonstrates cloning a scope and using it within a callback to capture events with specific data.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

// Multiple clients setup as described above
const scopeA = new Sentry.Scope();
const clientA = new Sentry.BrowserClient(clientOptions);
scopeA.setClient(clientA);
clientA.init();

// Want to fork scopeA?
const scopeA2 = scopeA.clone();
Sentry.withScope(scopeA2, () => {
  // scopeA2 is active in this callback
  // it is still attached to clientA
  scopeA2.setTag("key", "value");
  scopeA2.captureMessage("message");
  // Any event captured inside of this callback will have scopeA2 applied to it
});

----------------------------------------

TITLE: Configuring Basic Sentry Trace Propagation
DESCRIPTION: Basic configuration of Sentry SDK with trace propagation targets to handle CORS issues. Sets up tracing for specific domains and API endpoints with a 100% sample rate.

LANGUAGE: javascript
CODE:
// hooks.client.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  // Capture 100% of spans. This is useful for development and debugging. Consider reducing in production or using traceSampler
  tracesSampleRate: 1.0,
  tracePropagationTargets: ["https://myproject.org", /^\/api\//],
});

----------------------------------------

TITLE: Setting Transaction Context Name in C - Lock Requirement
DESCRIPTION: Documentation for sentry_transaction_context_set_name() function, specifying that the transaction context should not be concurrently modified while setting its name.

LANGUAGE: c
CODE:
/**
 * Sets the `name` on a Transaction Context, which will be used in the
 * Transaction constructed off of the context.
 *
 * The Transaction Context should not be mutated by other functions while
 * setting a name on it.
 */

----------------------------------------

TITLE: Configuring Sentry SDK via NLog XML Configuration
DESCRIPTION: Demonstrates how to configure the Sentry SDK using NLog.config XML file. Includes settings for DSN, environment, release tracking, breadcrumbs, user context, and custom tags.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
>
  <extensions>
    <add assembly="Sentry.NLog" />
  </extensions>

  <targets>
    <target
        xsi:type="Sentry"
        name="sentry"
        dsn="___PUBLIC_DSN___"
        environment="Development"
        release="my-project-name@2.3.12"
        includeEventProperties="True"
        layout="${message}"
        breadcrumbLayout="${message}"
        minimumBreadcrumbLevel="Debug"
        ignoreEventsWithNoException="False"
        includeEventDataOnBreadcrumbs="False"
        includeEventPropertiesAsTags="True"
        minimumEventLevel="Error">

      <options
          sendDefaultPii="true"
          attachStacktrace="false"
          shutdownTimeoutSeconds="5"
          debug="false"
        >
        <includeEventDataOnBreadcrumbs>true</includeEventDataOnBreadcrumbs>
      </options>

      <user id="${mdlc:item=id}"
            username="${mdlc:item=username}"
            email="${mdlc:item=email}"
            ipAddress="${mdlc:item=ipAddress}"
            />

      <tag
        name="exception"
        layout="${exception:format=shorttype}"
        includeEmptyValue="false" />

      <contextproperty
        name="threadid"
        layout="${threadid}"
        includeEmptyValue="true" />
    </target>
  </targets>

  <rules>
    <logger name="*" writeTo="sentry" />
  </rules>
</nlog>

----------------------------------------

TITLE: Enabling Local Variables Collection in Sentry SDK (Ruby)
DESCRIPTION: This code snippet shows how to enable the collection of local variables in exception stack traces. By setting 'include_local_variables' to true, Sentry will include local variables in the frames of captured exceptions, which can be useful for debugging but may impact performance.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  config.include_local_variables = true
end

----------------------------------------

TITLE: Git Commands for Feature Branch Sync
DESCRIPTION: Core Git commands for syncing a feature branch with master while properly resolving merge conflicts. The sequence ensures that merge conflict resolutions are properly recorded in Git's history.

LANGUAGE: bash
CODE:
git merge master
git checkout -b sync-feature-with-master
git checkout <feature-branch>
git push

----------------------------------------

TITLE: Creating a Team with Custom Slug
DESCRIPTION: Makes a POST request to create a new team with both a custom name and slug.

LANGUAGE: bash
CODE:
curl -d "name=tutorial-team&slug=tutorial-team-slug" -X POST "https://sentry.io/api/0/organizations/$SENTRY_ORG_ID/teams/" \
    -H 'Authorization: Bearer $SENTRY_AUTH_TOKEN'

----------------------------------------

TITLE: Installing Sentry SDK with OpenFeature Integration
DESCRIPTION: Command to install the Sentry SDK package with OpenFeature support using pip package manager.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[openfeature]'

----------------------------------------

TITLE: Installing Excimer with Linux Package Manager
DESCRIPTION: Use apt-get to install the php-excimer package on Linux systems.

LANGUAGE: bash
CODE:
apt-get install php-excimer

----------------------------------------

TITLE: Initializing Sentry with Session Replay in Dart
DESCRIPTION: Initialize the Sentry SDK with Session Replay enabled, setting sample rates and wrapping the app with SentryWidget.

LANGUAGE: dart
CODE:
await SentryFlutter.init(
  (options) {
    ...
    options.experimental.replay.sessionSampleRate = 1.0;
    options.experimental.replay.onErrorSampleRate = 1.0;
  },
  appRunner: () => runApp(
    SentryWidget(
      child: MyApp(),
    ),
  ),
);

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Sampling in Swift
DESCRIPTION: This snippet shows how to start the Sentry SDK in Swift, setting the DSN and implementing a custom sampling strategy based on URL paths. It demonstrates setting a uniform sample rate and using a custom sampler function to determine trace sampling rates for different endpoints.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { configureOptions in
    options.dsn = "___PUBLIC_DSN___"

    // To set a uniform sample rate
    options.tracesSampleRate = 1.0

    // OR: Determine traces sample rate based on the sampling context
    options.tracesSampler = { context in
        guard let url = context.customSamplingContext["url"] as? String else {
            // The desired information does not exists, do not sample.
            return 0.0
        }

        switch url {
            // These are important - take a big sample
            case "/payment": return 0.5

            // Search is less important and happen much more frequently - only take 1%
            case "/search": return 0.01

            // The health check endpoint is just noise - drop all transactions
            case "/health": return 0.0

            // Default sample rate
            default: return 0.1

            // Or return nil to fallback to options.TracesSampleRate
            // default: return nil
        }
    }
})

----------------------------------------

TITLE: Installing Sentry Angular SDK with Yarn
DESCRIPTION: This command adds the @sentry/angular package to the project using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add @sentry/angular

----------------------------------------

TITLE: Installing Sentry Go SDK using go get
DESCRIPTION: This command installs the Sentry Go SDK from the official GitHub repository. It's a prerequisite for using Sentry in Go projects for error tracking and monitoring.

LANGUAGE: shell
CODE:
go get github.com/getsentry/sentry-go

----------------------------------------

TITLE: Installing Sentry Go SDK using go get
DESCRIPTION: This command installs the Sentry Go SDK from the official GitHub repository. It's a prerequisite for using Sentry in Go projects for error tracking and monitoring.

LANGUAGE: shell
CODE:
go get github.com/getsentry/sentry-go

----------------------------------------

TITLE: Adding File Attachment to Sentry SDK in C
DESCRIPTION: This snippet demonstrates how to add a file attachment to the Sentry SDK options. The specified file will be monitored and uploaded with any event or crash sent to Sentry.

LANGUAGE: c
CODE:
sentry_options_add_attachment(options, "/var/server.log");

----------------------------------------

TITLE: Initializing Sentry with Feature Flags in SvelteKit (TypeScript)
DESCRIPTION: This snippet initializes Sentry with a public DSN and feature flag integration. It then attempts to add a feature flag and captures an exception. The code demonstrates error tracking and feature flag management using Sentry in a SvelteKit application.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/sveltekit';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Updating Koa Application for Sentry 8.x (ESM)
DESCRIPTION: Diff showing the changes needed to update a Koa application for Sentry Node SDK 8.x using ECMAScript modules. It demonstrates removing custom error handlers and adding the new Sentry error handler.

LANGUAGE: javascript
CODE:
+import './instrument';
 import Koa from 'koa';
 import * as Sentry from "@sentry/node";
 const app = new Koa();

-app.on('error', (err, ctx) => {
-  Sentry.withScope(scope => {
-    scope.setSDKProcessingMetadata({request: ctx.request});
-    Sentry.captureException(err);
-  });
-});
+Sentry.setupKoaErrorHandler(app);

----------------------------------------

TITLE: Complete Sentry Logging Examples in Java
DESCRIPTION: Comprehensive Java example showing various Sentry logging scenarios including simple messages, breadcrumbs, extras via MDC, and exception handling.

LANGUAGE: java
CODE:
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;

public class MyClass {
  private static final Logger logger = LoggerFactory.getLogger(MyClass.class);

  void logSimpleMessage() {
    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logWithBreadcrumbs() {
    // Record a breadcrumb that will be sent with the next event(s),
    // by default the last 100 breadcrumbs are kept.
    Sentry.addBreadcrumb("User made an action");

    // Log entries below `minimumEventLevel` and above or equal to `minimumBreadcrumbLevel`
    // are recorded as breadcrumbs
    logger.info("User made another action");

    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logWithExtras() {
    // MDC extras
    MDC.put("extra_key", "extra_value");
    // This sends an event with extra data to Sentry
    logger.error("This is a test");
  }

  void logException() {
    try {
      unsafeMethod();
    } catch (Exception e) {
      // This sends an exception event to Sentry
      logger.error("Exception caught", e);
    }
  }

  void unsafeMethod() {
    throw new UnsupportedOperationException("You shouldn't call this!");
  }
}

----------------------------------------

TITLE: Basic IP Address Scrubbing Configuration in JSON
DESCRIPTION: A basic configuration example showing how to replace IP addresses in string fields using the @ip:replace rule.

LANGUAGE: json
CODE:
{
  "applications": {
    "$string": ["@ip:replace"]
  }
}

----------------------------------------

TITLE: Configuring Sentry Gradle Plugin for Android
DESCRIPTION: Gradle build configuration for enabling source context in Android projects. Includes options for debug logging, source context generation, and additional source directories.

LANGUAGE: groovy
CODE:
plugins {
    id "io.sentry.android.gradle" version "3.9.0"
}

sentry {
    debug = true
    includeSourceContext = true
    additionalSourceDirsForSourceContext = ["mysrc/java", "other-source-dir/main/kotlin"]
    org = "___ORG_SLUG___"
    projectName = "___PROJECT_SLUG___"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
}

LANGUAGE: kotlin
CODE:
plugins {
    id("io.sentry.android.gradle") version "3.9.0"
}

sentry {
    debug.set(true)
    includeSourceContext.set(true)
    additionalSourceDirsForSourceContext.set(setOf("mysrc/java", "other-source-dir/main/kotlin"))
    org.set("___ORG_SLUG___")
    projectName.set("___PROJECT_SLUG___")
    authToken.set(System.getenv("SENTRY_AUTH_TOKEN"))
}

----------------------------------------

TITLE: Installing Sentry Node and OpenTelemetry with npm
DESCRIPTION: Installs @sentry/node and @sentry/opentelemetry packages using npm package manager. These packages are required for integrating Sentry with Node.js applications and OpenTelemetry.

LANGUAGE: bash
CODE:
npm install @sentry/node @sentry/opentelemetry --save

----------------------------------------

TITLE: Generating Webhook Secret for GitHub Enterprise Integration
DESCRIPTION: This command generates a random 64-character string to be used as a webhook secret when setting up the GitHub Enterprise integration.

LANGUAGE: bash
CODE:
openssl rand -base64 500 | tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1

----------------------------------------

TITLE: Initializing Sentry Browser SDK with Tracing
DESCRIPTION: Configures and initializes the Sentry SDK for browser-side error tracking and performance monitoring. Sets up browser tracing integration and configures a 25% sampling rate for performance transactions.

LANGUAGE: javascript
CODE:
// hooks.client.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  // Capture 25% of all transactions
  tracesSampleRate: 0.25
});

----------------------------------------

TITLE: Custom Server URL Configuration
DESCRIPTION: Setting custom Sentry server URL using environment variable.

LANGUAGE: bash
CODE:
export SENTRY_URL=https://mysentry.invalid/

----------------------------------------

TITLE: Configuring File System Backend in Sentry
DESCRIPTION: Basic configuration for local filesystem storage backend. Stores files in the specified local directory path. Not recommended for production use.

LANGUAGE: yaml
CODE:
filestore.backend: "filesystem"
filestore.options:
  location: "/tmp/sentry-files"

----------------------------------------

TITLE: Clearing User Information from Sentry Scope in PowerShell
DESCRIPTION: This snippet uses the Edit-SentryScope cmdlet to modify the Sentry scope. It sets the User property to null, effectively clearing any user-related information from the current scope.

LANGUAGE: powershell
CODE:
Edit-SentryScope {
    $_.User = $null
}

----------------------------------------

TITLE: Initializing Sentry with Screenshot Capture in Swift and Objective-C
DESCRIPTION: Basic configuration to enable screenshot attachment in Sentry SDK. Sets the attachScreenshot option to true during SDK initialization.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
  options.attachScreenshot = true
}

LANGUAGE: objective-c
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
  options.attachScreenshot = YES;
}];

----------------------------------------

TITLE: Configuring Minimum Log Levels for Events and Breadcrumbs
DESCRIPTION: Sets minimum log levels for events and breadcrumbs, with the handler's base level set appropriately to capture all needed messages.

LANGUAGE: properties
CODE:
io.sentry.jul.SentryHandler.minimumEventLevel=INFO
io.sentry.jul.SentryHandler.minimumBreadcrumbLevel=CONFIG
io.sentry.jul.SentryHandler.level=CONFIG
...

----------------------------------------

TITLE: Creating Sentry Release with GitHub Actions in YAML
DESCRIPTION: Configures a GitHub Actions workflow to create a Sentry release with a specified version and environment.

LANGUAGE: yaml
CODE:
- uses: actions/checkout@v4
  with:
    fetch-depth: 0

- name: Create Sentry release
  uses: getsentry/action-release@v3
  env:
    SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
    SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  with:
    environment: production
    version: 'v1.3.4'

----------------------------------------

TITLE: Rendering Framework Selection UI in React
DESCRIPTION: A React component that wraps guidance content for SDK selection. It includes a PlatformSection component with a noGuides prop and displays a GuideGrid component for showing available SDKs.

LANGUAGE: jsx
CODE:
<PlatformSection noGuides>

Using a framework? Check out the other SDKs we support in the left-hand dropdown.

<GuideGrid />

</PlatformSection>

----------------------------------------

TITLE: Initializing Sentry Debug Logger in PHP
DESCRIPTION: Demonstrates how to initialize Sentry with a debug logger to troubleshoot SDK issues. It shows two options: logging to a file or to stdout.

LANGUAGE: php
CODE:
\Sentry\init([
    'logger' => new \Sentry\Logger\DebugFileLogger('/path/to/your/logfile.log'),
]);

// or

\Sentry\init([
    'logger' => new \Sentry\Logger\DebugStdOutLogger(),
]);

----------------------------------------

TITLE: Configuring MAC Address Redaction in Sentry (JSON)
DESCRIPTION: Illustrates the setup for matching and hashing MAC addresses. This rule is designed to identify MAC address patterns and apply a hash redaction method.

LANGUAGE: json
CODE:
{
  "rules": {
    "hash_mac": {
      "type": "mac",
      "redaction": {
        "method": "hash"
      }
    }
  },
  "applications": {
    "$string": ["hash_mac"]
  }
}

----------------------------------------

TITLE: Setting Log Level in Shell
DESCRIPTION: Overrides the logger level for Sentry using a CLI flag.

LANGUAGE: shell
CODE:
sentry --loglevel=WARNING

----------------------------------------

TITLE: Generating iOS Bundle and Source Map with React Native CLI
DESCRIPTION: This command uses the React Native CLI to generate the JavaScript bundle and source map for an iOS app. It specifies various options such as the platform, entry file, and output locations.

LANGUAGE: bash
CODE:
react-native bundle \
  --dev false \
  --platform ios \
  --entry-file index.ios.js \
  --reset-cache \
  --bundle-output main.jsbundle \
  --sourcemap-output main.jsbundle.map

----------------------------------------

TITLE: Composing Hermes Source Maps for Android
DESCRIPTION: Commands to compose Hermes bytecode and Metro source maps for Android. This uses React Native scripts to combine and process the source maps.

LANGUAGE: bash
CODE:
node \
  node_modules/react-native/scripts/compose-source-maps.js \
  index.android.bundle.packager.map \
  index.android.bundle.hbc.map \
  -o index.android.bundle.map
node \
  node_modules/@sentry/react-native/scripts/copy-debugid.js \
  index.android.bundle.packager.map index.android.bundle.map
rm -f index.android.bundle.packager.map

----------------------------------------

TITLE: Filtering Sentry Transactions by URL Path in Python
DESCRIPTION: Demonstrates how to filter out specific transaction events based on the request URL path. This example filters out healthcheck endpoints by checking the parsed URL path.

LANGUAGE: python
CODE:
from urllib.parse import urlparse

def filter_transactions(event, hint):
    url_string = event["request"]["url"]
    parsed_url = urlparse(url_string)

    if parsed_url.path == "/healthcheck":
        return None

    return event

sentry_sdk.init(
    # ...
    before_send_transaction=filter_transactions,
)

----------------------------------------

TITLE: Configuration Environment Variables
DESCRIPTION: Core environment variables that can be used to configure the SDK: SENTRY_DSN, SENTRY_ENVIRONMENT, and SENTRY_RELEASE.

LANGUAGE: shell
CODE:
SENTRY_DSN=<dsn>
SENTRY_ENVIRONMENT=<environment>
SENTRY_RELEASE=<release>

----------------------------------------

TITLE: Configuring Frontmatter for Sentry Documentation Page in Markdown
DESCRIPTION: This snippet demonstrates the frontmatter configuration for a Sentry documentation page. It sets the title, disables indexing, and specifies the sidebar order.

LANGUAGE: markdown
CODE:
---
title: Product Documentation Structure
noindex: true
sidebar_order: 20
---

----------------------------------------

TITLE: Configuring Sentry in application.properties
DESCRIPTION: Sets up basic Sentry configuration using properties file format. Configures the DSN (Data Source Name) for connecting to Sentry and specifies the release version of the application.

LANGUAGE: properties
CODE:
sentry.dsn=___PUBLIC_DSN___
sentry.release=io.sentry.samples.console@3.0.0+1

----------------------------------------

TITLE: Uploading dSYMs using Sentry Fastlane Plugin
DESCRIPTION: Ruby script using Fastlane plugin to upload debug symbols to Sentry. Shows both current and legacy plugin syntax with source context option.

LANGUAGE: ruby
CODE:
sentry_debug_files_upload(
  auth_token: '___ORG_AUTH_TOKEN___',
  org_slug: '___ORG_SLUG___',
  project_slug: '___PROJECT_SLUG___',
  include_sources: true, # Optional. For source context.
)

LANGUAGE: ruby
CODE:
sentry_upload_dif(
  auth_token: '___ORG_AUTH_TOKEN___',
  org_slug: '___ORG_SLUG___',
  project_slug: '___PROJECT_SLUG___',
  include_sources: true, # Optional. For source context.
)

----------------------------------------

TITLE: Wrapping React Native App with CodePush and Sentry
DESCRIPTION: Ensures CodePush is the outermost function to access the root component for bundle swapping, while Sentry wraps the App for error tracking.

LANGUAGE: javascript
CODE:
export default codePush(Sentry.wrap(App));

----------------------------------------

TITLE: Configuring Web Server Host in Python
DESCRIPTION: Sets the hostname for the Sentry built-in webserver to bind to.

LANGUAGE: python
CODE:
SENTRY_WEB_HOST = '0.0.0.0'  # bind to all addresses

----------------------------------------

TITLE: HTTP Request Verification Implementation
DESCRIPTION: Example code to verify the integration by making an HTTP request and capturing a message in Sentry.

LANGUAGE: kotlin
CODE:
@Throws(IOException::class)
fun run(url: String): String? {
  val request = Request.Builder()
    .url(url)
    .build()

  val bodyStr = client
    .newCall(request)
    .execute()
    .body?.toString()

  Sentry.captureMessage("The Message $bodyStr")

  return bodyStr
}

LANGUAGE: java
CODE:
String run(String url) throws IOException {
  Request request = new Request.Builder()
    .url(url)
    .build();

  ResponseBody body = client
    .newCall(request)
    .execute()
    .body();

  String bodyStr = body != null ? body.toString() : null;

  Sentry.captureMessage("The Message " + bodyStr);

  return bodyStr;
}

----------------------------------------

TITLE: Version Bumping Script Implementation
DESCRIPTION: Bash script to automatically update version numbers in setup.cfg file.

LANGUAGE: bash
CODE:
#!/usr/bin/env bash
set -euxo pipefail

sed -i "s/^version =.*/version = $2/" setup.cfg

----------------------------------------

TITLE: Disabling App Hang Tracking in Sentry
DESCRIPTION: Shows how to disable the default app hang tracking feature using the enableAppHangTracking option.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.enableAppHangTracking = false
}

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.enableAppHangTracking = NO;
}];

----------------------------------------

TITLE: Injecting Trace Information into HTML Meta Tags
DESCRIPTION: Demonstrates how to inject Sentry tracing information into HTML meta tags for client-side JavaScript integration. This allows trace propagation through server-side rendered pages.

LANGUAGE: php
CODE:
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <?= sprintf('<meta name="baggage" content="%s"/>', \Sentry\getBaggage()); ?>
        <?= sprintf('<meta name="sentry-trace" content="%s"/>', \Sentry\getTraceparent()); ?>
    </head>
    <body>
        <p>This is a website.</p>
    </body>
</html>

----------------------------------------

TITLE: Configuring Sentry Breadcrumb Callback in Symfony YAML
DESCRIPTION: YAML configuration that defines the Sentry options and service for the before_breadcrumb callback. Sets up the service definition using a factory method.

LANGUAGE: yaml
CODE:
sentry:
    options:
        before_breadcrumb: 'sentry.callback.before_breadcrumb'

services:
    sentry.callback.before_breadcrumb:
        class: 'App\Service\Sentry'
        factory: [ '@App\Service\Sentry', 'getBeforeBreadcrumb' ]

----------------------------------------

TITLE: Configuring Sentry Fiber Options in Go
DESCRIPTION: This code snippet shows the available options for configuring the Sentry Fiber middleware, including Repanic, WaitForDelivery, and Timeout settings.

LANGUAGE: go
CODE:
// Repanic configures whether Sentry should repanic after recovery, in most cases it should be set to true,
// as fiber includes its own Recover middleware that handles http responses.
Repanic bool
// WaitForDelivery configures whether you want to block the request before moving forward with the response.
// Because Fiber's `Recover` handler doesn't restart the application,
// it's safe to either skip this option or set it to `false`.
WaitForDelivery bool
// Timeout for the event delivery requests.
Timeout time.Duration

----------------------------------------

TITLE: Using Sentry CLI for Source Maps Verification
DESCRIPTION: Command to verify source maps setup using sentry-cli with an event ID

LANGUAGE: shell
CODE:
sentry-cli sourcemaps explain c2ad049fd9e448ada7849df94575e019

----------------------------------------

TITLE: Version Format Specification
DESCRIPTION: Specification for valid version number formats following semantic versioning.

LANGUAGE: txt
CODE:
<major>.<minor>.<patch>(-<prerelease>)?(-<build>)?

----------------------------------------

TITLE: Forcing Sampling Decision in Sentry Transaction Creation
DESCRIPTION: Shows how to force a sampling decision when creating a transaction, bypassing other sampling mechanisms.

LANGUAGE: javascript
CODE:
Sentry.startTransaction({
  name: "Important transaction",
  sampled: true,
});

----------------------------------------

TITLE: Sentry Slog Configuration Options
DESCRIPTION: Struct definition showing available configuration options for the Sentry slog handler, including level settings, hub configuration, converters, and attribute handling.

LANGUAGE: go
CODE:
// Level sets the minimum log level to capture and send to Sentry.
// Logs at this level and above will be processed. The default level is debug.
Level slog.Leveler
// Hub specifies the Sentry Hub to use for capturing events.
// If not provided, the current Hub is used by default.
Hub *sentry.Hub
// Converter is an optional function that customizes how log records
// are converted into Sentry events. By default, the DefaultConverter is used.
Converter Converter
// AttrFromContext is an optional slice of functions that extract attributes
// from the context. These functions can add additional metadata to the log entry.
AttrFromContext []func(ctx context.Context) []slog.Attr
// AddSource is an optional flag that, when set to true, includes the source
// information (such as file and line number) in the Sentry event.
// This can be useful for debugging purposes.
AddSource bool
// ReplaceAttr is an optional function that allows for the modification or
// replacement of attributes in the log record. This can be used to filter
// or transform attributes before they are sent to Sentry.
ReplaceAttr func(groups []string, a slog.Attr) slog.Attr

----------------------------------------

TITLE: Configuring Sentry Platform Options for iOS
DESCRIPTION: iOS-specific configuration for Sentry using native platform options in a Kotlin Multiplatform project.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.PlatformOptionsConfiguration

actual fun platformOptionsConfiguration(): PlatformOptionsConfiguration = {
    it.dsn = "___PUBLIC_DSN___"
}

----------------------------------------

TITLE: Implementing Alert Components in MDX
DESCRIPTION: Shows how to create different types of alert components with varying levels (info, warning, success) and optional titles. Alerts are used to highlight important information in the documentation.

LANGUAGE: markdown
CODE:
<Alert title="Note">
This is an info alert.
</Alert>

LANGUAGE: markdown
CODE:
<Alert level="warning" title="Important">
This is a warning alert.
</Alert>

LANGUAGE: markdown
CODE:
<Alert level="success" title="Tip">
This is a success alert.
</Alert>

----------------------------------------

TITLE: Optimized List Processing with Coroutines in Android
DESCRIPTION: Improved version using Kotlin coroutines for background processing and better algorithm implementation.

LANGUAGE: kotlin
CODE:
fun sortEvenOddFaster(numbers: List<Int>, onSorted: (sorted: List<Int>) -> Unit): List<Int> {
    lifecycleScope.launch(Dispatchers.Default) {
        val evenList = ArrayList<Int>(numbers.size)
        val oddList = ArrayList<Int>(numbers.size)
        for (n in numbers) {
            if (n % 2 == 0) {
                evenList.add(n)
            } else {
                oddList.add(n)
            }
        }
        evenList.addAll(oddList)
        withContext(Dispatchers.Main) {
            // Continue computation on the main thread
            onSorted(evenList)
        }
    }
}

----------------------------------------

TITLE: Initializing Sentry SDK with Feedback Integration in Vue.js
DESCRIPTION: Demonstrates the setup of Sentry error tracking with feedback integration in a Vue.js application. The code imports the Sentry SDK, configures it with a DSN (Data Source Name) placeholder, and sets up the feedback integration with system color scheme preference.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/vue";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.feedbackIntegration({
      // Additional SDK configuration goes in here, for example:
      colorScheme: "system",
    }),
  ],
});

----------------------------------------

TITLE: ES2015 Import
DESCRIPTION: Example of importing and configuring Raven.js using ES2015 module syntax.

LANGUAGE: javascript
CODE:
import Raven from "raven-js";
Raven.config("___PUBLIC_DSN___").install();

----------------------------------------

TITLE: Setting Sentry Tags in Objective-C
DESCRIPTION: Configures Sentry SDK scope to set a custom tag using Objective-C. Uses a hash tool to process a birthday date string before setting it as a tag value.

LANGUAGE: objective-c
CODE:
@import Sentry;

[SentrySDK configureScope:^(SentryScope * _Nonnull scope) {
    [scope setTagValue:[YourHashTool checksumOrHash:@"08/12/1990"] forKey:@"birthday"];
}];

----------------------------------------

TITLE: Excluding Specific Classes from Swizzling in Sentry SDK (Objective-C)
DESCRIPTION: This code snippet shows how to exclude specific classes from swizzling in the Sentry SDK using Objective-C. It uses the 'swizzleClassNameExcludes' option to specify class names that should not be swizzled.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.swizzleClassNameExcludes = [NSSet setWithObjects:
      @"MyUIViewController",
      nil
    ];
}];

----------------------------------------

TITLE: Importing Sentry SDK for Attachment Handling in JavaScript
DESCRIPTION: This snippet demonstrates how to import the Sentry SDK, which is required before adding attachments to events.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="enriching-events/import" />

----------------------------------------

TITLE: Initializing First Release Tag in Git
DESCRIPTION: Commands to create and push the initial version tag to establish release history.

LANGUAGE: bash
CODE:
git tag 0.0.0 "$(git log -1 --reverse --format=%h)"
git push origin --tags

----------------------------------------

TITLE: Sentry API Response with Link Header
DESCRIPTION: This snippet shows a sample HTTP response from the Sentry API, including the Link header that contains pagination information. It demonstrates the format of previous and next page links.

LANGUAGE: http
CODE:
HTTP/1.0 200 OK
Date: Sat, 14 Feb 2015 18:47:20 GMT
Content-Type: application/json
Content-Language: en
Allow: GET, HEAD, OPTIONS
Link: <https://sentry.io/api/0/organizations/acme/projects/1/groups/?&cursor=1420837590:0:1>;
  rel="previous"; results="false",
  <https://sentry.io/api/0/organizations/acme/projects/1/groups/?&cursor=1420837533:0:0>;
  rel="next"; results="true"

----------------------------------------

TITLE: Installing Sentry SDK with gRPC Support in Python
DESCRIPTION: Install the Sentry SDK from PyPI with the 'grpcio' extra to enable gRPC integration.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[grpcio]'

----------------------------------------

TITLE: Defining OS Context in Sentry SDK
DESCRIPTION: Example JSON structures for OS context on Windows, macOS, and Linux platforms. Includes fields like name, version, build, and distribution details.

LANGUAGE: json
CODE:
{
  "windows": {
    "type": "os",
    "name": "Windows",
    "version": "10.0.19041",
    "build": "662"
  },
  "mac": {
    "type": "os",
    "name": "macOS",
    "version": "11.1.0",
    "build": "20C69",
    "kernel_version": "20.2.0"
  },
  "linux": {
    "type": "os",
    "name": "Linux",
    "version": "6.1.82(99.168.amzn2023.x86_64)",
    "distribution_name": "amzn",
    "distribution_version": "2023",
    "distribution_pretty_name": "Amazon Linux 2023.4.20240401"
    }
  }

----------------------------------------

TITLE: Configuring Sentry User Scope in C#
DESCRIPTION: Demonstrates how to set up a new Sentry user within a scope configuration using C#. Creates an empty SentryUser instance and assigns it to the scope.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.User = new SentryUser();
});

----------------------------------------

TITLE: Retrieving Transaction Headers in C using Sentry SDK
DESCRIPTION: Demonstrates how to obtain trace headers from a Sentry transaction by implementing a callback function that copies headers into a sentry_value_t object. The example shows transaction creation and header iteration using sentry_transaction_iter_headers().

LANGUAGE: c
CODE:
static void
copy_headers_to(const char *key, const char *value, void *userdata) {
    sentry_value_t *headers = (sentry_value_t *)userdata;
    sentry_value_set_by_key(*headers, key, sentry_value_new_string(value));
}

int main(int argc, char **argv) {
    // Transaction to continue off of
	sentry_transaction_context_t *tx_ctx = sentry_transaction_context_new(
        "honk",
        NULL
    );
    sentry_transaction_t *tx = sentry_transaction_start(tx_ctx, sentry_value_new_null());

	sentry_value_t headers = sentry_value_new_object();
    sentry_transaction_iter_headers(tx, copy_headers_to, (void *) &headers);
}

----------------------------------------

TITLE: Configuring Basic Ngrok for Monolith Mode
DESCRIPTION: Basic ngrok configuration file setup for monolith mode operation. Requires ngrok authentication token and defines a single tunnel configuration.

LANGUAGE: yaml
CODE:
version: '2'
authtoken: <YOUR-NGROK-AUTHTOKEN>
tunnels:
  acme-org:
    proto: http
    hostname: <yourname>.ngrok.io
    addr: 8000
    host_header: "rewrite"

----------------------------------------

TITLE: Integrating Sentry with Loopback in Node.js
DESCRIPTION: This code shows how to integrate Sentry into a Loopback 2.x LTS application. It includes the configuration of Raven and instructions on adding Sentry's error handler as a Loopback middleware.

LANGUAGE: javascript
CODE:
// server/server.js

const Raven = require("raven");
Raven.config("___DSN___").install();

LANGUAGE: json
CODE:
// server/middleware.json

"final:after": {
  "raven#errorHandler": {},
  "strong-error-handler": {
    "debug": false,
    "log": false
  }
}

----------------------------------------

TITLE: Integrating Sentry with Loopback in Node.js
DESCRIPTION: This code shows how to integrate Sentry into a Loopback 2.x LTS application. It includes the configuration of Raven and instructions on adding Sentry's error handler as a Loopback middleware.

LANGUAGE: javascript
CODE:
// server/server.js

const Raven = require("raven");
Raven.config("___DSN___").install();

LANGUAGE: json
CODE:
// server/middleware.json

"final:after": {
  "raven#errorHandler": {},
  "strong-error-handler": {
    "debug": false,
    "log": false
  }
}

----------------------------------------

TITLE: Additional URL Pattern Examples
DESCRIPTION: Further examples of URL patterns showing proper organization and project hierarchy implementation.

LANGUAGE: markdown
CODE:
- 👍 "/organizations/\{organization_slug}/projects/"
- 👍 "/projects/\{organization_slug}/\{project_slug}/issues/"
- 👎 "/projects/"

----------------------------------------

TITLE: Uploading Sentry Attachments with Scope in C++
DESCRIPTION: Demonstrates how to add attachments to the Sentry scope for sending with events. Shows configuration using scope delegates.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

FConfigureScopeDelegate ScopeDelegate;
ScopeDelegate.BindDynamic(this, &USomeClass::HandleScopeDelegate);

SentrySubsystem->ConfigureScope(ScopeDelegate);

// Put scope configuration logic here
void USomeClass::HandleScopeDelegate(USentryScope* Scope)
{
    USentryAttachment* Attachment = NewObject<USentryAttachment>();
    Attachment->InitializeWithPath("your/path/file.log", "file.log");

    Scope->AddAttachment(Attachment);
}

----------------------------------------

TITLE: Adding Metrics to Existing Spans in JavaScript
DESCRIPTION: Demonstrates how to enhance existing spans with custom metrics by adding individual and multiple attributes. Shows both single attribute setting and bulk attribute assignment methods.

LANGUAGE: javascript
CODE:
const span = Sentry.getActiveSpan();
if (span) {
  // Add individual metrics
  span.setAttribute('database.rows_affected', 42);
  span.setAttribute('cache.hit_rate', 0.85);
  
  // Add multiple metrics at once
  span.setAttributes({
    'memory.heap_used': 1024000,
    'queue.length': 15,
    'processing.duration_ms': 127
  });
}

----------------------------------------

TITLE: Initializing Sentry in a Separate File (ESM)
DESCRIPTION: Example of initializing Sentry in a separate 'instrument.mjs' file using ESM. This is required for proper auto-instrumentation in Sentry Node SDK 8.x.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  // ...
});

----------------------------------------

TITLE: Manually Configuring Apollo Client with Sentry Interceptors in Java
DESCRIPTION: Manually set up Apollo Client with Sentry interceptors for custom NetworkTransport in Java.

LANGUAGE: java
CODE:
import com.apollographql.ApolloClient;
import com.apollographql.network.http.HttpNetworkTransport;
import io.sentry.apollo4.SentryApollo4HttpInterceptor;
import io.sentry.apollo4.SentryApollo4Interceptor;

ApolloClient apollo = new ApolloClient.Builder()
        .networkTransport(
            new HttpNetworkTransport.Builder()
                .serverUrl("https://your-api-host/")
                .addInterceptor(new SentryApollo4HttpInterceptor())
                .build())
        .addInterceptor(new SentryApollo4Interceptor())
        .build();

----------------------------------------

TITLE: Installing Excimer via PECL
DESCRIPTION: Command to install the Excimer PHP extension using PECL package manager

LANGUAGE: bash
CODE:
pecl install excimer

----------------------------------------

TITLE: Setting Up Devservices for Testing in Shell
DESCRIPTION: Commands to bring up and verify required services for testing using devservices.

LANGUAGE: shell
CODE:
# Bring up services for testing
devservices up

# Verify that containers came up correctly
devservices status

----------------------------------------

TITLE: Cloning Backend Sample Repository
DESCRIPTION: Command to clone the Sentry tracing tutorial backend repository to local environment.

LANGUAGE: bash
CODE:
git clone git@github.com:<your_username>/tracing-tutorial-backend.git

----------------------------------------

TITLE: Automatic Error-Span Connection with Scope Binding in Dart
DESCRIPTION: Demonstrates how to automatically link errors with transactions by binding the transaction to the scope. When bindToScope is set to true, any errors captured during the transaction will be automatically associated with it.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

final transaction = Sentry.startTransaction(
  'processOrderBatch()',
  'task',
  bindToScope: true,
);

try {
  processOrderBatch();
} catch (exception) {
  Sentry.captureException(exception);
} finally {
  await transaction.finish();
}

----------------------------------------

TITLE: Initializing Sentry with Custom Sampling for SolidJS in JavaScript
DESCRIPTION: This snippet initializes Sentry with a custom tracesSampler function to control sampling rates for different types of transactions. It integrates SolidJS router tracing and sets specific sampling rules for health checks, auth-related transactions, and comment-related transactions.

LANGUAGE: javascript
CODE:
// hooks.client.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.solidRouterBrowserTracingIntegration()],
  tracesSampler: (samplingContext) => {
    // Access transaction details from the sampling context
    const { name, attributes, inheritOrSampleWith } = samplingContext;
    
    // Skip health checks entirely
    if (name.includes('healthcheck')) {
      return 0;
    }
    
    // Capture all auth-related transactions
    if (name.includes('auth')) {
      return 1;
    }
    
    // Sample only 1% of comment-related transactions
    if (name.includes('comment')) {
      return 0.01;
    }
    
    // For everything else, inherit parent sampling decision or use 0.5
    return inheritOrSampleWith(0.5);
  }
});

----------------------------------------

TITLE: Configuring Global Scope in Sentry SDK - Objective-C
DESCRIPTION: This snippet shows how to use [SentrySDK configureScope:] to set global context data in Objective-C. It demonstrates setting a tag and user information that will be attached to all future events.

LANGUAGE: objc
CODE:
@import Sentry

[SentrySDK configureScope:^(SentryScope * _Nonnull scope) {
    [scope setTagValue:@"my-tag" forKey:@"my value"];
    SentryUser *user = [[SentryUser alloc] init];
    user.email = @"john.doe@example.com";
    [scope setUser:user];
}];

----------------------------------------

TITLE: Integrating Sentry with RewriteFrames using Loader (v7)
DESCRIPTION: This HTML snippet demonstrates how to integrate Sentry with the RewriteFrames integration using the Loader script (version 7). It sets up a sentryOnLoad function to initialize Sentry and add the RewriteFrames integration after the scripts are loaded.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});

   if (Sentry.rewriteFramesIntegration) {
      Sentry.addIntegration(Sentry.rewriteFramesIntegration());
    }
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/7.118.0/rewriteframes.min.js"
  integrity="sha384-frX2Yq3NcKDRPm/uj1oRaP8OQfYhXlOtfbpFLshFqv7cJ17aHaMFulBDznsYIgLw"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Configuring Webpack Source Map Generation
DESCRIPTION: Configuration for webpack to generate source maps by adding the devtool property to webpack.config.js.

LANGUAGE: javascript
CODE:
module.exports = {
   entry: "./src/index.js",
   output: {
      filename: "main.js",
      path: path.resolve(__dirname, "build"),
   },
   devtool: "source-map",
   ...
}

----------------------------------------

TITLE: Installing Sentry Vue Package with npm
DESCRIPTION: This snippet shows how to install the @sentry/vue package using npm. The --save flag ensures the package is added to the project's dependencies in package.json.

LANGUAGE: bash
CODE:
npm install @sentry/vue --save

----------------------------------------

TITLE: Configuring Delayed Job Exception Reporting in Sentry
DESCRIPTION: This configuration option allows Sentry to wait until job retries are exhausted before reporting exceptions in Delayed Job. It sets the 'delayed_job.report_after_job_retries' option to true.

LANGUAGE: ruby
CODE:
config.delayed_job.report_after_job_retries = true

----------------------------------------

TITLE: Installing Sentry Vue SDK using yarn
DESCRIPTION: This command installs the Sentry Vue SDK package using yarn. The package includes the Replay integration.

LANGUAGE: bash
CODE:
yarn add @sentry/vue

----------------------------------------

TITLE: Configuring S3 Backend for Sentry Filestore in YAML
DESCRIPTION: YAML configuration for setting up an S3-compatible backend for Sentry's filestore. Includes various options such as bucket ACL, credentials, region, and endpoint URL.

LANGUAGE: yaml
CODE:
filestore.backend: 's3'
filestore.options:
  bucket_acl: 'private'
  default_acl: 'private'
  access_key: '<REDACTED>'
  secret_key: '<REDACTED>'
  bucket_name: 'my-bucket'
  region_name: 'auto'
  endpoint_url: 'https://<REDACTED>' # If you're not using AWS.
  addressing_style: 'path' # For regular AWS S3, use "auto" or "virtual". For other S3-compatible API like MinIO or Ceph, use "path".
  signature_version: 's3v4'

----------------------------------------

TITLE: Using beforeSendTransaction for Filtering in JavaScript
DESCRIPTION: Shows how to use the beforeSendTransaction callback to filter transaction events before they are sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSendTransaction(event) {
    if (event.transaction === '/health') {
      return null;
    }
    return event;
  },
});

----------------------------------------

TITLE: Installing @sentry/sveltekit with yarn
DESCRIPTION: This command installs the Sentry SDK for SvelteKit using yarn package manager. It adds the package as a project dependency and updates the yarn.lock file.

LANGUAGE: bash
CODE:
yarn add @sentry/sveltekit

----------------------------------------

TITLE: Adding Sentry Global Server Middleware
DESCRIPTION: Adds Sentry's global server middleware to instrument server function invocations.

LANGUAGE: TypeScript
CODE:
import {
  createMiddleware,
  registerGlobalMiddleware,
} from "@tanstack/react-start";
import * as Sentry from "@sentry/tanstackstart-react";

registerGlobalMiddleware({
  middleware: [
    createMiddleware().server(Sentry.sentryGlobalServerMiddlewareHandler()),
  ],
});

----------------------------------------

TITLE: SQL Query Scrubbing Example
DESCRIPTION: Demonstrates how raw SQL queries should be scrubbed to remove user-supplied values and replace them with placeholders.

LANGUAGE: sql
CODE:
SELECT * FROM users WHERE id = 17;

LANGUAGE: sql
CODE:
SELECT * FROM users WHERE id = ?;

----------------------------------------

TITLE: Configuring Sentry SDK with send_default_pii Flag
DESCRIPTION: Python code snippet to initialize Sentry SDK with the send_default_pii flag set to True, enabling the recording of GraphQL queries and server-returned errors.

LANGUAGE: python
CODE:
sentry_sdk.init(
    # ...
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
)

----------------------------------------

TITLE: Configuring Sentry User Scope in F#
DESCRIPTION: Shows how to configure a Sentry user scope using F# syntax. Creates a new SentryUser instance and assigns it to the scope using F#'s arrow operator.

LANGUAGE: fsharp
CODE:
SentrySdk.ConfigureScope(
  fun scope ->
    scope.User <- SentryUser()
  )

----------------------------------------

TITLE: Optimized Regex Execution in Android Kotlin
DESCRIPTION: This improved version uses a coroutine to move the regex matching operation to a background thread, preventing main thread blockage and improving app responsiveness in Android.

LANGUAGE: kotlin
CODE:
fun matchRegex(text: String, regexPattern: String) {
  lifecycleScope.launch(Dispatchers.Default) {
    val pattern = Pattern.compile(regexPattern)
    val matches = pattern.matcher(text).matches()

    withContext(Dispatchers.Main) {
      if (matches) {
        // Do something
      }
    }
  }
}

----------------------------------------

TITLE: Configuring ANR Integration Options in Node.js
DESCRIPTION: This TypeScript interface defines the configuration options for the ANR integration. It includes settings for poll interval, ANR threshold, and stack trace capture.

LANGUAGE: typescript
CODE:
interface Options {
  /**
   * Interval to send heartbeat messages to the ANR thread.
   *
   * Defaults to 50ms.
   */
  pollInterval: number;
  /**
   * Threshold in milliseconds to trigger an ANR event.
   *
   * Defaults to 5000ms.
   */
  anrThreshold: number;
  /**
   * Whether to capture a stack trace when the ANR event is triggered.
   *
   * Defaults to `false`.
   *
   * This uses the node debugger which enables the inspector API.
   */
  captureStackTrace: boolean;
}

----------------------------------------

TITLE: Initializing Sentry with Fastify (ESM)
DESCRIPTION: Sets up a Fastify server with Sentry error handling using ECMAScript modules (ESM) import syntax. Requires instrument.js to be imported before other modules for proper instrumentation.

LANGUAGE: javascript
CODE:
// Ensure to import this before importing any other modules!
import './instrument.js'

import Fastify from "fastify";
import * as Sentry from "@sentry/node";
const app = Fastify();

Sentry.setupFastifyErrorHandler(app);

// Add your routes, etc.

app.listen({ port: 3030 });

----------------------------------------

TITLE: Installing Sentry SDK with Celery Support in Python
DESCRIPTION: Installs the Sentry SDK from PyPI with the Celery extra, which adds support for the Celery Task Queue System.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[celery]'

----------------------------------------

TITLE: Creating Sandbox Link using SandboxLink Component
DESCRIPTION: Shows how to create a link to the Sentry sandbox environment, allowing users to explore features with mocked data.

LANGUAGE: markdown
CODE:
Learn more about this feature in our <SandboxLink scenario="releases">sandbox</SandboxLink>.

----------------------------------------

TITLE: Basic Mermaid Flowchart Example
DESCRIPTION: A simple example showing how to create a basic flowchart using Mermaid syntax in MDX files. The example demonstrates a minimal flow from Start to Stop.

LANGUAGE: txt
CODE:
```mermaid
flowchart TD
  Start --> Stop
```

----------------------------------------

TITLE: Initializing Sentry with Trace Propagation Configuration in JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry with trace propagation targets and sample rate. It configures Sentry to attach the 'sentry-trace' header to outgoing requests to specified domains.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracePropagationTargets: ["localhost", "my-site-url.com"],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Using DRF Serializer in Endpoint Handler
DESCRIPTION: Example showing how to use a DRF serializer in an endpoint handler with validation and database operations. Demonstrates error handling and transaction management.

LANGUAGE: python
CODE:
class ExampleEndpoint(Endpoint):
    def post(self, request):
        serializer = ExampleSerializer(request.DATA)
        if not serializer.is_valid():
            return Response(serializer.errors, status=400)

        result = serializer.object

        #Assuming Example is a model with the same fields
        try:
            with transaction.atomic():
                Example.objects.create(
                    name=result['name'],
                    age=result.get('age'),
                    type=result['type'],
                )
        except IntegrityError:
            return Response('This example already exists', status=409)

        return Response(serialize(result, request.user), status=201)

----------------------------------------

TITLE: Installing Sentry Svelte SDK with pnpm
DESCRIPTION: Command to install the @sentry/svelte package using pnpm. This package includes the User Feedback integration.

LANGUAGE: bash
CODE:
pnpm add @sentry/svelte

----------------------------------------

TITLE: Capturing Basic Errors and Events
DESCRIPTION: Examples of capturing simple messages and exceptions using Sentry's static API, including setting scope data like breadcrumbs, user info, tags and extras.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.protocol.User;

public class MyClass {
  void logWithStaticAPI() {
    Sentry.addBreadcrumb("User made an action");
    User user = new User();
    user.setEmail("hello@sentry.io");
    Sentry.setUser(user);
    Sentry.setExtra("extra", "thing");
    Sentry.setTag("tagName", "tagValue");
    Sentry.captureMessage("This is a test");
    try {
      unsafeMethod();
    } catch (Exception e) {
      Sentry.captureException(e);
    }
  }
}

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.protocol.User

class MyClass {
  fun logWithStaticAPI() {
    Sentry.addBreadcrumb("User made an action")
    val user = User().apply {
      email = "hello@sentry.io"
    }
    Sentry.setUser(user)
    Sentry.setExtra("extra", "thing")
    Sentry.setTag("tagName", "tagValue")
    Sentry.captureMessage("This is a test")
    try {
      unsafeMethod()
    } catch (e: Exception) {
      Sentry.captureException(e)
    }
  }
}

----------------------------------------

TITLE: Lazy Loading Sentry User Feedback Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to lazy load the User Feedback integration using the Sentry Loader Script. It initializes Sentry, then loads and adds the feedback integration with error handling.

LANGUAGE: javascript
CODE:
window.sentryOnLoad = function () {
  Sentry.init({
    // add other configuration here
  });

  Sentry.lazyLoadIntegration("feedbackIntegration")
    .then((feedbackIntegration) => {
      Sentry.addIntegration(feedbackIntegration({
      	// User Feedback configuration options
      }));
    })
    .catch(() => {
      // this can happen if e.g. a network error occurs,
      // in this case User Feedback will not be enabled
    });
};

----------------------------------------

TITLE: Instrumenting Server-Side File Processing in JavaScript
DESCRIPTION: Tracks the server-side file processing steps, including virus scanning, resizing, compression, and metadata extraction. Uses Sentry's startSpan to capture processing details, storage operations, and CDN configuration.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Server File Processing',
    op: 'file.process.server',
    attributes: {
      // Server processing steps
      'processing.steps_completed': ['virus_scan', 'resize', 'compress', 'metadata'],
      
      // Storage operations
      'storage.provider': 's3',
      'storage.region': 'us-west-2',
      'storage.upload_time_ms': 850,
      
      // CDN configuration
      'cdn.provider': 'cloudfront',
      'cdn.propagation_ms': 1500
    }
  },
  async () => {
    // Server-side processing implementation
  }
);

----------------------------------------

TITLE: Creating Sentry Transaction with Custom Sampling Context in Java
DESCRIPTION: This snippet shows how to create a custom sampling context, set transaction options, and start a transaction in Sentry using Java. It demonstrates setting context values that won't be recorded and transaction description that will be recorded.

LANGUAGE: java
CODE:
import io.sentry.CustomSamplingContext;
import io.sentry.ITransaction;
import io.sentry.Sentry;
import io.sentry.TransactionOptions;

// sampling context - won't be recorded
CustomSamplingContext context = new CustomSamplingContext();
context.set("user_id", 12312012);
context.set("search_results", searchResults);

TransactionOptions txOptions = new TransactionOptions();
txOptions.setCustomSamplingContext(context);
ITransaction transaction = Sentry.startTransaction("GET /search", "http.server", txOptions);
// transaction context - will be recorded on transaction
transaction.setDescription("search results");

----------------------------------------

TITLE: Uploading Source Maps to Sentry using Yarn
DESCRIPTION: Command to upload source maps and create a release in Sentry. Requires proper configuration through environment variables or .sentryclirc file containing project ID, organization ID, and token.

LANGUAGE: shell
CODE:
yarn sentry-upload-sourcemaps

----------------------------------------

TITLE: Initializing Sentry and Showing Report Dialog
DESCRIPTION: This snippet demonstrates how to initialize Sentry with a DSN and call the showReportDialog function. The eventId parameter is used to associate the dialog with a specific error event.

LANGUAGE: html
CODE:
<script>
  Sentry.init({ dsn: "___PUBLIC_DSN___" });
  Sentry.showReportDialog({
    eventId: "{{ event_id }}",
  });
</script>

----------------------------------------

TITLE: Example Response with Empty Categories List
DESCRIPTION: Demonstrates a 429 response where the rate limits apply to all categories, shown by empty category fields in the X-Sentry-Rate-Limits header.

LANGUAGE: python
CODE:
HTTP/1.1 429 Too Many Requests
Retry-After: 2700
X-Sentry-Rate-Limits: 60::organization, 2700::organization

----------------------------------------

TITLE: Defining StartSpanOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the interface for StartSpanOptions, which is used as an argument in span creation APIs. It specifies the required and optional fields for starting a span.

LANGUAGE: typescript
CODE:
interface StartSpanOptions {
  // The only required field - the name of the span
  name: string;
  attributes?: SpanAttributes;
  op?: string;
  scope?: Scope;
  forceTransaction?: boolean;
}

----------------------------------------

TITLE: Adding Span Attributes in Sentry
DESCRIPTION: Demonstration of adding attributes to spans when creating them and after creation.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    attributes: {
      attr1: "value1",
      attr2: 42,
      attr3: true,
    },
  },
  () => {
    // Do something
  }
);

const span = Sentry.getActiveSpan();
if (span) {
  span.setAttribute("attr1", "value1");
  // Or set multiple attributes at once:
  span.setAttributes({
    attr2: 42,
    attr3: true,
  });
}

----------------------------------------

TITLE: Using Sentry with Apollo and Kotlin Coroutines
DESCRIPTION: Ensure correct Sentry context when using Apollo with Kotlin coroutines.

LANGUAGE: kotlin
CODE:
import com.apollographql.apollo3.ApolloClient
import com.apollographql.apollo3.exception.ApolloException
import io.sentry.kotlin.SentryContext
import kotlinx.coroutines.launch

launch(SentryContext()) {
  val response = try {
    apollo.query(..).toDeferred().await()
  } catch (e: ApolloException) {
    // handle protocol errors
    return@launch
  }
}

----------------------------------------

TITLE: Building Sentry Native SDK with Qt Integration on macOS
DESCRIPTION: CMake commands to configure, build, and install the Sentry Native SDK with Qt integration enabled. The example shows how to set up the build with Crashpad backend and verify the installation structure.

LANGUAGE: shell
CODE:
# Configure the cmake build into the `build` directory,
# with crashpad, and Qt integration (on macOS).
cmake -B build \
    -D SENTRY_BACKEND=crashpad \
    -D SENTRY_INTEGRATION_QT=YES

# Build the project
cmake --build build --parallel

# Install the resulting artifacts into a specific prefix
cmake --install build --prefix install

# Which will result in the following (on macOS):
exa --tree install --level 2
install
├── bin
│  └── crashpad_handler
├── include
│  └── sentry.h
└── lib
   ├── cmake
   ├── libsentry.dylib
   └── libsentry.dylib.dSYM

----------------------------------------

TITLE: Installing Sentry Next.js and OpenTelemetry Node Packages with npm
DESCRIPTION: This command installs the Sentry Next.js SDK and the Sentry OpenTelemetry Node integration using npm. It adds these packages as production dependencies to the project.

LANGUAGE: bash
CODE:
npm install @sentry/nextjs @sentry/opentelemetry-node --save

----------------------------------------

TITLE: Capturing Custom Exception with Sentry in Objective-C
DESCRIPTION: Creates and captures a custom NSException with a fatal error level using Sentry SDK in Objective-C. Initializes a custom scope with fatal level and explicitly passes it to the capture method, bypassing the global scope configuration.

LANGUAGE: Objective-C
CODE:
@import Sentry;

NSException *exception = [[NSException alloc] initWithName:@"My Custom exception" reason:@"User clicked the button" userInfo:nil];
SentryScope *scope = [[SentryScope alloc] init];
[scope setLevel:kSentryLevelFatal];
// By explicitly just passing the scope, only the data in this scope object will be added to the event
// The global scope (calls to configureScope) will be ignored
// Only do this if you have mastered this SDK, otherwise, you risk losing useful info
// If you just want to mutate what's in the scope use the callback, see: captureError
[SentrySDK captureException:exception withScope:scope];

----------------------------------------

TITLE: Installing Sentry Navigation Integration with Gradle
DESCRIPTION: Add the Sentry Android SDK and Navigation integration dependencies to your project using Gradle.

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-android:{{@inject packages.version('sentry.java.android', '6.2.0') }}'
implementation 'io.sentry:sentry-android-navigation:{{@inject packages.version('sentry.java.android.navigation', '6.2.0') }}'

----------------------------------------

TITLE: Setting Sentry User in Kotlin Multiplatform
DESCRIPTION: This code creates a User object with an email address and sets it in Sentry for user identification in error reports. It uses the Sentry Kotlin Multiplatform SDK.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry
import io.sentry.kotlin.multiplatform.protocol.User

val user = User().apply {
  email = "jane.doe@example.com"
}
Sentry.setUser(user)

----------------------------------------

TITLE: Disabling Sentry Distributed Tracing
DESCRIPTION: Configuration to completely disable distributed tracing and prevent Sentry trace headers from being sent.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Overwrite the defaults to ensure no trace headers are sent
  tracePropagationTargets: [],
});

----------------------------------------

TITLE: Complete Sentry File I/O Implementation Example
DESCRIPTION: Full example demonstrating Sentry initialization, file operations tracking, and transaction management in a Dart application.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';
import 'package:sentry_file/sentry_file.dart';
import 'dart:io';

Future<void> main() async {
  await Sentry.init(
    (options) {
      options.dsn = 'https://example@sentry.io/example';
      // To set a uniform sample rate
      options.tracesSampleRate = 1.0;
    },
    appRunner: runApp, // Init your App.
  );
}

Future<void> runApp() async {
  final file = File('my_file.txt');
  // Call the Sentry extension method to wrap up the File
  final sentryFile = file.sentryTrace();

  // Start a transaction if there's no active transaction
  final transaction = Sentry.startTransaction(
    'MyFileExample',
    'file',
    bindToScope: true,
  );

  // create the File
  await sentryFile.create();
  // Write some content
  await sentryFile.writeAsString('Hello World');
  // Read the content
  final text = await sentryFile.readAsString();

  print(text);

  // Delete the file
  await sentryFile.delete();

  // Finish the transaction
  await transaction.finish(status: SpanStatus.ok());

  await Sentry.close();
}

----------------------------------------

TITLE: Creating Source Bundles with Sentry CLI
DESCRIPTION: Use the 'sentry-cli debug-files bundle-sources' command to create source bundles for inline source context in stack traces. This is useful when building and uploading debug information files are detached.

LANGUAGE: bash
CODE:
sentry-cli debug-files bundle-sources /path/to/files...

LANGUAGE: bash
CODE:
sentry-cli debug-files upload --type sourcebundle /path/to/bundles...

LANGUAGE: bash
CODE:
sentry-cli debug-files upload --include-sources /path/to/files...

----------------------------------------

TITLE: Configuring Custom Masking Rules in Sentry Flutter SDK
DESCRIPTION: This snippet demonstrates how to set up custom masking rules for specific widget types in the Sentry Flutter SDK. It shows how to mask IconButton, unmask Image, and apply conditional masking to Text widgets.

LANGUAGE: dart
CODE:
  options.privacy.mask<IconButton>();
  options.privacy.unmask<Image>();
  options.privacy.maskCallback<Text>(
      (Element element, Text widget) =>
          (widget.data?.contains('secret') ?? false)
              ? SentryMaskingDecision.mask
              : SentryMaskingDecision.continueProcessing);

----------------------------------------

TITLE: Initializing Sentry SDK
DESCRIPTION: Example shows initialization of Sentry SDK using DSN configuration in both JavaScript and Python. The initialization accepts configuration options with DSN being the primary parameter.

LANGUAGE: javascript
CODE:
Sentry.init({dsn: '___PROJECT.DSN___'});

LANGUAGE: python
CODE:
sentry_sdk.init('___PROJECT.DSN___')

----------------------------------------

TITLE: Instrumenting Queue Producer in Ruby with Sentry
DESCRIPTION: Creates a traced queue producer that publishes messages with Sentry trace information. Includes setting span data for message ID, queue name, and message size, along with trace propagation headers for consumer tracking.

LANGUAGE: ruby
CODE:
connection = my_custom_queue.connect

# The message you want to send to the queue
queue = 'messages'
message = 'Hello World!'
message_id = 'abc123'

Sentry.with_child_span(op: 'queue.publish', description: 'queue_producer') do |span|
  # Set span data
  span.set_data('messaging.message.id', message_id)
  span.set_data('messaging.destination.name', queue)
  span.set_data('messaging.message.body.size', message.size)

  # Publish the message to the queue (including trace information and current timestamp)
  connection.publish(
    queue: queue,
    body: message,
    timestamp: Time.now.utc,
    headers: Sentry.get_trace_propagation_headers
  )
end

----------------------------------------

TITLE: Using Scope Instance to Pass Data in JavaScript
DESCRIPTION: This snippet demonstrates how to create a new Scope instance, set a tag, and use it to capture an exception in Sentry.

LANGUAGE: javascript
CODE:
const scope = new Sentry.Scope();
scope.setTag("section", "articles");
Sentry.captureException(new Error("something went wrong"), scope);

----------------------------------------

TITLE: Capturing a Message with Sentry in Go
DESCRIPTION: This snippet demonstrates how to capture a message using Sentry's Go SDK. It uses the CaptureMessage function to send an error message to Sentry for logging and monitoring.

LANGUAGE: go
CODE:
sentry.CaptureMessage("Something went wrong")

----------------------------------------

TITLE: Capturing User Feedback via Sentry API in Swift
DESCRIPTION: Shows how to programmatically submit user feedback using Sentry's API. This method allows custom UI implementation while capturing user feedback with optional screenshot data.

LANGUAGE: swift
CODE:
SentrySDK.capture(feedback: .init(
    message: "I encountered a bug while using the app.",
    name: "John Doe",
    email: "john.doe@example.com",
    source: .custom,
    screenshot: somePngImageData // optional
))

----------------------------------------

TITLE: Configuring Sentry Auth Token
DESCRIPTION: Environment variable configuration for Sentry authentication token.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Monitor Configuration with Check-In in JSON
DESCRIPTION: Shows how to include monitor configuration when sending a check-in, allowing for monitor creation or updates. Includes scheduling, thresholds, and other monitoring parameters.

LANGUAGE: json
CODE:
{
  "check_in_id": "83a7c03ed0a04e1b97e2e3b18d38f244",
  "monitor_slug": "b7645b8e-b47d-4398-be9a-d16b0dac31cb",
  "status": "in_progress",
  "monitor_config": {
    "schedule": {
      "type": "crontab",
      "value": "0 * * * *"
    },
    "checkin_margin": 5,
    "max_runtime": 30,
    "failure_issue_threshold": 2,
    "recovery_threshold": 2,
    "timezone": "America/Los_Angeles",
    "owner": "user:john@example.com"
  }
}

----------------------------------------

TITLE: Defining Frames Delay Scenarios with Gherkin
DESCRIPTION: A set of Gherkin scenarios defining various cases for calculating Frames Delay, including slow and frozen frames, changing frame rates, ongoing delayed frames, and concurrent spans. These scenarios provide detailed test cases for SDK implementations.

LANGUAGE: Gherkin
CODE:
Scenario: Slow and frozen frames
    Given a frame rate of 60 fps
    And 2 frames with 300 ms
    And 1 frame with 900 ms
    And 10 frames with 16.76 ms
    When calculating the frames delay
    Then the frames delay is (300 - 16.67) * 2 + 900 - 16.67 = 1449.99 ms

Scenario: Frame rate changes
    Given 1 frame with 200 ms with 60 fps
    And 2 frame with 500 ms with 120 fps
    And 10 frames with 8.33 ms with 120 fps
    When calculating the frames delay
    Then the frames delay is 200 - 16.67 + (500 - 8.33) * 2 = 1166.67 ms

Scenario: Ongoing delayed frame
    """
    [nf][ ------- ?? ------ ]   |  nf = normal frame,  ?? = No frame information
    [---- span duration ----]
    When there is an ongoing delayed frame, the logic doesn't know how long it
    will last and, therefore, has no frame information.
    """
    Given a frame rate of 60 fps
    And 1 frame with 16.67 ms
    And 200 ms pass after without any frame being drawn
    And no recorded delayed frame
    When calculating the frames delay
    Then the frames delay 200 ms - 16.67 ms = 183.33 ms


Scenario: Delayed frame starts before span
    """
    [----  delayed frame ---- ]
            [- span duration -]
    """
    Given a frame rate of 60 fps
    And a recorded delayed frame with a duration of 300 ms
    When calculating the frames delay for the span 100 ms to 300 ms
    Then the frames delay is the full duration of the span of 200ms


Scenario: Delayed frame starts shortly before span
    """
    [| e |  delayed frame ---- ]      e = the expected frame duration
        [--- span duration --- ]
    """
    Given a frame rate of 60 fps
    And a recorded delayed frame with a duration of 300 ms
    And the delayed frame started at 0 ms shortly before the span
    When calculating the frames delay for the span 10 ms to 300 ms
    Then the frames delay is 300 ms - 16.67 ms = 283.33 ms, which is only the delayed part
        of the delayed frame
    And the expected frame duration part of the delayed frame is not added as a frame delay

Scenario: Delayed frame starts and ends before the span
    """
    [| e |  delayed frame ------ ]      e = the expected frame duration
        [--- span duration --- ]
    """
    Given a frame rate of 60 fps
    And a recorded delayed frame with a duration of 310 ms
    And the delayed frame started at 0 ms shortly before the span
    When calculating the frames delay for the span duration of 10 ms to 300 ms
    Then the frames delay is 300 ms - 6.67 ms = 293.33 ms, which is only the delayed part of
        the delayed frame having an intersection with the span duration
    And the expected frame duration part of the delayed frame is not added as a frame delay


Scenario: One delayed frame starts shortly before the end of a span
    """
    [| e |  delayed frame ][| e |  delayed frame - ]  e = the expected frame duration
    [---- span duration ---- ]
    """
    Given a frame rate of 60 fps
    And a recorded delayed frame with a duration of 290 ms
    And a recorded delayed frame with a duration of 200 ms
    When calculating the frames delay for the span duration of 0 ms to 300 ms
    Then the frames delay is 290 ms - 16.67 ms = 273.33 ms
    And the expected frame duration part of the second delayed frame is not added as a frame delay

Scenario: Two concurrent spans
    """
    [| e | --- delayed frame--- ]  e = the expected frame duration
          [----- span 1 -----]
              [---- span 2 ----]
    """
    Given a frame rate of 60 fps
    And a recorded delayed frame with a duration of 300 ms
    When calculating the frames delay
    Then the frames delay for span 1 is it's full duration of 180 ms
    Then the frames delay for span 2 is it's full duration of 160 ms

----------------------------------------

TITLE: Verifying Sentry Integration with ASGI App in Python
DESCRIPTION: Create an ASGI app that deliberately raises an error to verify Sentry integration. This example sets up a simple ASGI app that triggers a division by zero error when accessed.

LANGUAGE: python
CODE:
sentry_sdk.init(...) # same as above

def app(scope):
    async def get_body():
        return f"The number is: {1/0}" # raises an error!

    async def asgi(receive, send):
        await send(
            {
                "type": "http.response.start",
                "status": 200,
                "headers": [[b"content-type", b"text/plain"]],
            }
        )
        await send({"type": "http.response.body", "body": await get_body()})

    return asgi

app = SentryAsgiMiddleware(app)

----------------------------------------

TITLE: Configuring TracesSampler Callback in C#
DESCRIPTION: Implementation of a custom sampling function that determines whether transactions should be sampled based on context. The callback allows for conditional sampling rates, including dropping transactions (0%), setting custom rates (0.1), or falling back to the default TracesSampleRate.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.TracesSampler = samplingContext =>
{
    if (/* make a decision based on `samplingContext` */) {
      // Drop this transaction, by setting its sample rate to 0%
      return 0;
    } else if (/* ... */) {
      // Override sample rate for other cases (replaces `options.TracesSampleRate`)
      return 0.1;
    }

    // Can return `null` to fallback to the rate configured by `options.TracesSampleRate`
    return null;
};

----------------------------------------

TITLE: Setting Expiration for Banners in TypeScript
DESCRIPTION: This snippet shows how to add an expiration date to a banner configuration. The banner will automatically hide after the specified date without requiring a manual removal or rebuild of the site.

LANGUAGE: typescript
CODE:
const BANNERS = [
  {
    appearsOn: ['^/$'],
    text: 'This home page banner will disappear after 2024-12-06',
    linkURL: 'https://sentry.io/party',
    linkText: 'RSVP',
    expiresOn: '2024-12-06T00:00:00Z',
  },
];

----------------------------------------

TITLE: Configuring GetSentry Settings in Python
DESCRIPTION: This snippet shows the file path for configuring GetSentry default settings. It points to the location of the defaults.py file within the getsentry project structure.

LANGUAGE: python
CODE:
getsentry/conf/settings/defaults.py

----------------------------------------

TITLE: Using Raven Context Wrapper
DESCRIPTION: Example of wrapping code in Raven.context() for automatic error capturing

LANGUAGE: javascript
CODE:
Raven.context(function () {
  doSomething(a[0]);
});

----------------------------------------

TITLE: Configuring Request Payload Capture in Sentry ASP.NET Integration
DESCRIPTION: This code snippet shows how to configure Sentry to capture the request payload in ASP.NET applications for improved troubleshooting.

LANGUAGE: csharp
CODE:
options.AddAspNet(RequestSize.Always);

----------------------------------------

TITLE: Enabling View Hierarchy in Android Manifest
DESCRIPTION: XML configuration to enable view hierarchy attachments in the Android application manifest file.

LANGUAGE: xml
CODE:
<application>
  <meta-data android:name="io.sentry.attach-view-hierarchy" android:value="true" />
</application>

----------------------------------------

TITLE: Adding Sentry Monitoring to Scheduled Tasks in Laravel 10.x, 9.x & 8.x
DESCRIPTION: This snippet shows how to add Sentry monitoring to a scheduled task in Laravel 10.x, 9.x, and 8.x within the schedule method of the Console Kernel. It demonstrates adding monitoring to an hourly email sending command.

LANGUAGE: php
CODE:
protected function schedule(Schedule $schedule)
{
    $schedule->command('emails:send')
        ->everyHour()
        ->sentryMonitor(); // add this line
}

----------------------------------------

TITLE: Migrating Basic Browser Tracing in Sentry
DESCRIPTION: Shows how to migrate the basic browser tracing integration without React Router from class-based to function-based syntax.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
-  integrations: [new Sentry.BrowserTracing()],
+  integrations: [Sentry.browserTracingIntegration()],
});

----------------------------------------

TITLE: Setting DSN in Properties File
DESCRIPTION: Configure the Sentry DSN in a properties file named sentry.properties.

LANGUAGE: text
CODE:
dsn=___PUBLIC_DSN___

----------------------------------------

TITLE: Capturing Exceptions with Sentry-Cordova
DESCRIPTION: Demonstrates how to capture and report errors using Sentry's captureException() method in a try-catch block. While the method accepts Error objects for best results with stack traces, it can also handle non-Error objects and strings, though these may result in incomplete stack trace information.

LANGUAGE: javascript
CODE:
import * as Sentry from "sentry-cordova";

try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Customizing Source Maps Assets Directory in Astro Config
DESCRIPTION: This JavaScript snippet demonstrates how to specify custom asset directories for source maps upload in the Astro configuration using glob patterns.

LANGUAGE: javascript
CODE:
export default defineConfig({
  integrations: [
    sentry({
      sourceMapsUploadOptions: {
        assets: [".clientOut/**/*", ".serverOut/**/*"],
      },
    }),
  ],
});

----------------------------------------

TITLE: Installing Sentry Browser SDK with Yarn
DESCRIPTION: This command adds the @sentry/browser package to the project using Yarn package manager. Yarn is an alternative to npm with some additional features and performance improvements.

LANGUAGE: bash
CODE:
yarn add @sentry/browser

----------------------------------------

TITLE: Setting iOS Minimum Version in Capacitor Config
DESCRIPTION: Configures the minimum iOS version in capacitor.config.json to meet Capacitor 3's requirements and resolve deployment target issues.

LANGUAGE: json
CODE:
// capacitor.config.json
{
  "ios": {
    "minVersion": "12.0"
  }
}

----------------------------------------

TITLE: Activating and Deactivating Raven Context in Python
DESCRIPTION: Demonstrates how to activate and deactivate the Raven context to enable breadcrumb support. This is typically handled automatically by framework integrations.

LANGUAGE: python
CODE:
def handle_request(request):
    client.context.activate()
    client.context.merge({'user': {
        'email': request.user.email
    }})
    try:
        ...
    finally:
        client.context.clear()

----------------------------------------

TITLE: Initializing Sentry for Client-Side Tracing in SolidStart
DESCRIPTION: This snippet shows how to initialize Sentry on the client-side for distributed tracing. It sets up the DSN, integrations, trace sample rate, and trace propagation targets to handle CORS issues.

LANGUAGE: javascript
CODE:
// hooks.client.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.solidRouterBrowserTracingIntegration()],
  // Capture 100% of spans. This is useful for development and debugging. Consider reducing in production or using traceSampler
  tracesSampleRate: 1.0,
  tracePropagationTargets: ["https://myproject.org", /^\/api\//],
});

----------------------------------------

TITLE: Installing Sentry Angular SDK with npm
DESCRIPTION: Command to install @sentry/angular package using npm package manager with the --save flag to add it to package.json dependencies.

LANGUAGE: bash
CODE:
npm install @sentry/angular --save

----------------------------------------

TITLE: Structuring Exception Group in JSON
DESCRIPTION: Illustrates how to represent an exception group in the Sentry event payload JSON format, including parent-child relationships between exceptions.

LANGUAGE: json
CODE:
{
  "exception": [
    {
      "type": "Error",
      "value": "An error occurred",
      "mechanism": {
        "type": "generic",
        "handled": true,
        "is_exception_group": true,
        "exception_id": 0
      }
    },
    {
      "type": "Error",
      "value": "Another error occurred",
      "mechanism": {
        "type": "generic",
        "handled": false,
        "is_exception_group": true,
        "exception_id": 1,
        "parent_id": 0
      }
    }
  ]
}

----------------------------------------

TITLE: Capturing Exceptions with Sentry in JavaScript
DESCRIPTION: This snippet shows how to use Sentry's captureException() method to capture and report errors in a try-catch block. It demonstrates proper error handling and integration with Sentry for automatic error reporting.

LANGUAGE: javascript
CODE:
try {
  aFunctionThatMightFail();
} catch (err) {
  Sentry.captureException(err);
}

----------------------------------------

TITLE: Installing Sentry Android Gradle Plugin
DESCRIPTION: Add the Sentry Android Gradle plugin to your project for automatic instrumentation.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.android.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

LANGUAGE: kotlin
CODE:
plugins {
  id("io.sentry.android.gradle") version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

----------------------------------------

TITLE: Configuring Sentry Scope and Capturing Messages in C++
DESCRIPTION: This snippet demonstrates how to configure a Sentry scope with custom tags and error levels, and how to capture messages using the Sentry subsystem. It shows the difference between capturing messages with and without a custom scope.

LANGUAGE: cpp
CODE:
FConfigureScopeDelegate ScopeDelegate;
ScopeDelegate.BindDynamic(this, &USomeClass::HandleScopeDelegate);

void USomeClass::HandleScopeDelegate(USentryScope* Scope)
{
    Scope->SetTagValue("my-tag", "my value");
    Scope->SetLevel(ESentryLevel::Error);
}

...

USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

// will be tagged with my-tag="my value"
SentrySubsystem->CaptureMessageWithScope("Error message", ScopeDelegate);

// will not be tagged with my-tag
SentrySubsystem->CaptureMessage("Error message");

----------------------------------------

TITLE: Verifying Compressed Debug Sections in ELF Files
DESCRIPTION: This command uses readelf to check if debug sections in an ELF file are compressed, looking for the 'C' flag.

LANGUAGE: bash
CODE:
readelf -S path/to/file

----------------------------------------

TITLE: Structuring a Complete Sentry Replay Envelope in JSON
DESCRIPTION: This snippet shows the full structure of a Sentry replay envelope, including the envelope header, 'replay_event' Item, and 'replay_recording' Item with metadata and gzipped payload.

LANGUAGE: json
CODE:
{"event_id":"36b75d9fa11f45459412a96c41bdf691","sent_at":"2024-03-19T15:18:27.581Z","sdk":{"name":"sentry.javascript.react","version":"7.105.0"}}
{"type":"replay_event"}
{
  "type": "replay_event",
  "replay_id": "36b75d9fa11f45459412a96c41bdf691",
  "replay_start_timestamp": 1710861499.287,
  "replay_type": "session",
  "segment_id": 0,
  "trace_ids": ["905aef2282af5fe2ab2c93aa7a340521"],
  "urls": [
    "https://sentry.io/issues/",
    "https://sentry.io/issues/?project=0&statsPeriod=7d&utc=true"
  ],

  "request": {
    "url": "https://sentry.io/issues/?project=0&statsPeriod=7d&utc=true",
    "headers": {
      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
    }
  },
  "timestamp": 1710861507.579,
  "event_id": "36b75d9fa11f45459412a96c41bdf691",
  "environment": "prod",
  "release": "frontend@f00",
  "sdk": {
    "integrations": [
      "BrowserTracing",
      "BrowserProfiling",
      "Replay",
      "ReplayCanvas"
    ],
    "name": "sentry.javascript.react",
    "version": "7.105.0"
  },
  "tags": {
    "sentry_version": "24.4.0.dev0",
  },
  "user": {
    "ip_address": "127.0.0.1",
    "email": "admin@sentry.io",
    "id": 1,
    "name": "Admin"
  },
  "contexts": { "organization": { "id": "0", "slug": "sentry" } },
  "platform": "javascript"
}
{"type":"replay_recording","length":141666}
{"segment_id":0}
/* gzipped JSON payload */

----------------------------------------

TITLE: Installing Sentry Gatsby SDK with npm
DESCRIPTION: Command to install the @sentry/gatsby package using npm. This package includes User Feedback integration.

LANGUAGE: bash
CODE:
npm install @sentry/gatsby --save

----------------------------------------

TITLE: Example Response with Category-Specific Rate Limits
DESCRIPTION: Shows a 429 response with Retry-After header and X-Sentry-Rate-Limits header specifying different rate limits for transaction and other categories.

LANGUAGE: python
CODE:
HTTP/1.1 429 Too Many Requests
Retry-After: 2700
X-Sentry-Rate-Limits:
  60:transaction:key,
  2700:default;error;security:organization

----------------------------------------

TITLE: Wrapping Stream Handler with Sentry
DESCRIPTION: Instruments server requests by wrapping the defaultStreamHandler function with Sentry.

LANGUAGE: TypeScript
CODE:
import {
  createStartHandler,
  defaultStreamHandler,
} from "@tanstack/react-start/server";
import { getRouterManifest } from "@tanstack/react-start/router-manifest";
import { createRouter } from "./router";
import * as Sentry from "@sentry/tanstackstart-react";

export default createStartHandler({
  createRouter,
  getRouterManifest,
})(Sentry.wrapStreamHandlerWithSentry(defaultStreamHandler));

----------------------------------------

TITLE: Running Siloed Sentry Instances
DESCRIPTION: Commands to run Sentry development servers in siloed mode for control and region instances.

LANGUAGE: shell
CODE:
# Start control silo servers
sentry devserver --silo=control --celery-beat --workers

# Start region silo servers
sentry devserver --silo=region --celery-beat --workers --ingest

----------------------------------------

TITLE: Installing Sentry Svelte SDK with npm
DESCRIPTION: Installs the @sentry/svelte package using npm package manager with the --save flag to add it to dependencies

LANGUAGE: bash
CODE:
npm install @sentry/svelte --save

----------------------------------------

TITLE: Configuring Basic Logging Handlers in logging.properties
DESCRIPTION: Sets up ConsoleHandler and SentryHandler with their respective log levels. ConsoleHandler logs to stdout at INFO level while SentryHandler logs to Sentry at WARNING level.

LANGUAGE: properties
CODE:
# Enable the Console and Sentry handlers
handlers=java.util.logging.ConsoleHandler,io.sentry.jul.SentryHandler

# Set the default log level to INFO
.level=INFO

# Override the Sentry handler log level to WARNING
io.sentry.jul.SentryHandler.level=WARNING

----------------------------------------

TITLE: Installing Sentry .NET SDK via Package Manager
DESCRIPTION: Commands to install the Sentry package using the PowerShell Package Manager.

LANGUAGE: powershell
CODE:
Install-Package Sentry -Version {{@inject packages.version('sentry.dotnet') }}

----------------------------------------

TITLE: Setting Traces Sample Rate in Sentry C# SDK
DESCRIPTION: Sets the traces sample rate to capture 100% of transactions during Sentry SDK initialization. The TracesSampleRate option controls what percentage of transactions are captured for performance monitoring.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
// Example uniform sample rate: capture 100% of transactions
options.TracesSampleRate = 1.0;

----------------------------------------

TITLE: Implementing Custom Traces Sampler for Sentry in Dart
DESCRIPTION: This snippet defines a tracesSampler function for Sentry. It checks the parentSampled value from the sampling context and returns 1.0 if the parent was sampled, 0.0 if not, or proceeds to further sampling logic if parentSampled is null.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

double? tracesSampler(SentrySamplingContext samplingContext) {
  final parentSampled = samplingContext.transactionContext.parentSampled;
  if (parentSampled != null) {
    return parentSampled ? 1.0 : 0.0;
  }
  // the rest of sampling logic
}

----------------------------------------

TITLE: Sentry Properties Configuration
DESCRIPTION: Configuration properties for Sentry including PII data collection settings.

LANGUAGE: properties
CODE:
send-default-pii=true

----------------------------------------

TITLE: Sentry Properties Configuration
DESCRIPTION: Configuration properties for Sentry including PII data collection settings.

LANGUAGE: properties
CODE:
send-default-pii=true

----------------------------------------

TITLE: Setting Default Logger Name in Sentry Go SDK
DESCRIPTION: Sets the default logger name used for events in the Sentry Go SDK.

LANGUAGE: go
CODE:
raven.SetDefaultLoggerName("some_logger_name")

----------------------------------------

TITLE: Monitor Schedule Examples
DESCRIPTION: Examples of creating monitors with different schedules and optional configurations.

LANGUAGE: bash
CODE:
sentry-cli monitors run -s "* * * * *" -- my-command

LANGUAGE: bash
CODE:
sentry-cli monitors run -s "0 * * * *" --check-in-margin 10 --max-runtime 5 --timezone "Europe/Vienna" -- my-command

----------------------------------------

TITLE: Configuring Sentry Webpack Plugin for Release Tracking
DESCRIPTION: Webpack configuration to enable automatic release creation and commit association in Sentry.

LANGUAGE: javascript
CODE:
sentryWebpackPlugin({
   org: "___ORG_SLUG___",
   project: "___PROJECT_SLUG___",
   authToken: process.env.SENTRY_AUTH_TOKEN,

   // Enable automatically creating releases and associating commits
   release: {
     create: true,
     setCommits: {
        auto: true,
     },
   },
})

----------------------------------------

TITLE: Initializing Sentry for Google Cloud CloudEvent Functions in JavaScript
DESCRIPTION: This snippet illustrates how to initialize Sentry for Google Cloud CloudEvent functions. It sets up performance monitoring and profiling, and wraps the CloudEvent function with Sentry error tracking.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/google-cloud-serverless");
const { nodeProfilingIntegration } = require("@sentry/profiling-node");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    nodeProfilingIntegration(),
  ],

  // Add Performance Monitoring by setting tracesSampleRate
  // Set tracesSampleRate to 1.0 to capture 100% of transactions
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
});

exports.helloEvents = Sentry.wrapCloudEventFunction(
  (context, callback) => {
    throw new Error("oh, hello there!");
  }
);

----------------------------------------

TITLE: Configuring Database URL in application.properties
DESCRIPTION: Add the p6spy prefix to the database connection URL in a Spring Boot application's application.properties file.

LANGUAGE: properties
CODE:
spring.datasource.url=jdbc:p6spy:postgresql://localhost:5432/db

----------------------------------------

TITLE: Configuring Sentry Scope with Tags and User Data in Go
DESCRIPTION: Demonstrates how to use Sentry's ConfigureScope function to set custom tags and user information for error tracking. The code configures a tag named 'my-tag' and sets user details including ID and email address.

LANGUAGE: go
CODE:
sentry.ConfigureScope(func(scope *sentry.Scope) {
	scope.SetTag("my-tag", "my value")
	scope.SetUser(sentry.User{
		ID: "42",
		Email: "john.doe@example.com",
	})
})

----------------------------------------

TITLE: Configuring SentryNavigationObserver with Flutter Routing
DESCRIPTION: Implementation of SentryNavigationObserver in a Flutter MaterialApp for standard routing.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

return MaterialApp(
  title: 'My Widget',
  home: MyWidget(),
  navigatorObservers: [
    SentryNavigatorObserver()
  ],
);

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration (Deprecated)
DESCRIPTION: Sets up Sentry error tracking with Unleash feature flags using the deprecated unleashClientClass configuration. Shows the older integration method that should be updated.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solidstart';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({unleashClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Basic Check-In Payload Structure in JSON
DESCRIPTION: Demonstrates the basic structure of a check-in payload including required and optional fields for monitoring status updates. The payload includes identification, status tracking, and contextual information.

LANGUAGE: json
CODE:
{
  "check_in_id": "83a7c03ed0a04e1b97e2e3b18d38f244",
  "monitor_slug": "my-monitor",
  "status": "in_progress",
  "duration": 10.0,
  "release": "1.0.0",
  "environment": "production",
  "contexts": {
    "trace": {
      "trace_id": "8f431b7aa08441bbbd5a0100fd91f9fe"
    }
  }
}

----------------------------------------

TITLE: Frontend Analytics Implementation in React
DESCRIPTION: Demonstrates how to implement frontend analytics tracking in React components for both Sentry and GetSentry.

LANGUAGE: jsx
CODE:
import React from "react";

import { trackAnalytics } from "getsentry/utils/analytics";

class ExampleComponent extends React.Component {
  componentDidMount() {
    trackAnalytics("example_tutorial.created", {
      organization,
      subscription,
      source: "wakanda",
    });
  }

  render() {
    return <h1> HI! </h1>;
  }
}

----------------------------------------

TITLE: Configuring Sentry in TanStack Start Config
DESCRIPTION: Extends the app's default TanStack Start configuration by adding Sentry integration. Includes org and project details, and sets up source map uploading.

LANGUAGE: TypeScript
CODE:
import { defineConfig } from "@tanstack/react-start/config";
import { wrapVinxiConfigWithSentry } from "@sentry/tanstackstart-react";

const config = defineConfig({
    // ... your other TanStack Start config
})

export default wrapVinxiConfigWithSentry(config, {
  org: "___ORG_SLUG___",
  project: "___PROJECT_SLUG___",
  authToken: process.env.SENTRY_AUTH_TOKEN,

  // Only print logs for uploading source maps in CI
  // Set to `true` to suppress logs
  silent: !process.env.CI,
});

----------------------------------------

TITLE: Excluding Sentry Android NDK Dependency in Gradle (Kotlin)
DESCRIPTION: This snippet shows how to exclude the sentry-android-ndk dependency from app configurations in the app/build.gradle file using Kotlin syntax.

LANGUAGE: kotlin
CODE:
configurations.configureEach {
  exclude(group = "io.sentry", module = "sentry-android-ndk")
}

----------------------------------------

TITLE: Sentry Debug Log Output
DESCRIPTION: Debug log output showing the initialization process of Sentry SDK and its integrated components, useful for verifying the presence of DiagnosticSource integration.

LANGUAGE: log
CODE:
Debug: Logging enabled with ConsoleDiagnosticLogger and min level: Debug
Debug: Initializing Hub for Dsn: '___PUBLIC_DSN___'.
Debug: Using 'GzipBufferedRequestBodyHandler' body compression strategy with level Optimal.
Debug: New scope pushed.
Debug: Registering integration: 'AutoSessionTrackingIntegration'.
Debug: Registering integration: 'AppDomainUnhandledExceptionIntegration'.
Debug: Registering integration: 'AppDomainProcessExitIntegration'.
Debug: Registering integration: 'TaskUnobservedTaskExceptionIntegration'.
Debug: Registering integration: 'SentryDiagnosticListenerIntegration'.

----------------------------------------

TITLE: Generating RSA Key Pair for Bitbucket Server Integration
DESCRIPTION: This bash script generates the necessary RSA public/private key pair for setting up the Bitbucket Server integration with Sentry. It creates private and public keys in various formats required for the setup process.

LANGUAGE: bash
CODE:
openssl genrsa -out bitbucket_privatekey.pem 1024
openssl req -newkey rsa:1024 -x509 -key bitbucket_privatekey.pem -out bitbucket_publickey.cer -days 365
openssl pkcs8 -topk8 -nocrypt -in bitbucket_privatekey.pem -out bitbucket_privatekey.pcks8
openssl x509 -pubkey -noout -in bitbucket_publickey.cer  > bitbucket_publickey.pem

----------------------------------------

TITLE: Installing Sentry.EntityFramework Package via Package Manager
DESCRIPTION: Command to install the Sentry.EntityFramework NuGet package using the Package Manager Console in Visual Studio.

LANGUAGE: powershell
CODE:
Install-Package Sentry.EntityFramework -Version {{@inject packages.version('sentry.dotnet.ef') }}

----------------------------------------

TITLE: Setting Basic Fingerprint in Sentry SDK
DESCRIPTION: Demonstrates how to set a basic fingerprint by passing an array of strings directly to the SDK.

LANGUAGE: javascript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['my-view-function']);
  Sentry.captureException(error);
});

LANGUAGE: python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.fingerprint = ['my-view-function']
    sentry_sdk.capture_exception(error)

LANGUAGE: ruby
CODE:
Sentry.with_scope do |scope|
  scope.set_fingerprint(['my-view-function'])
  Sentry.capture_exception(error)
end

----------------------------------------

TITLE: Implementing Client Report JSON Payload Structure
DESCRIPTION: Demonstrates the basic JSON structure for client reports, showing how to format discarded events with timestamp and event details including reason, category and quantity.

LANGUAGE: json
CODE:
{
  "timestamp": "2020-02-07T14:16:00Z",
  "discarded_events": [
    {
      "reason": "queue_overflow",
      "category": "error",
      "quantity": 23
    },
    {
      "reason": "queue_overflow",
      "category": "transaction",
      "quantity": 1321
    }
  ]
}

----------------------------------------

TITLE: Implementing Basic Debug ID in JavaScript
DESCRIPTION: Demonstrates the simplest implementation of a Debug ID comment in a JavaScript file. The Debug ID must be a UUID appended as a comment at the end of the file.

LANGUAGE: javascript
CODE:
"use strict";
console.log("Hello world!");
//# debugId=85314830-023f-4cf1-a267-535f4e37bb17

----------------------------------------

TITLE: Implementing Cache Get Operation in PHP with Sentry
DESCRIPTION: Creates a span for monitoring cache read operations. Tracks cache hits/misses and includes metadata like value size and network details. Requires an active Sentry transaction.

LANGUAGE: php
CODE:
$key = 'cache_key';
$value = null;

$parentSpan = \Sentry\SentrySdk::getCurrentHub()->getSpan();

if ($parentSpan !== null) {
    $context = \Sentry\Tracing\SpanContext::make()
        ->setOp('cache.get');

    $span = $parentSpan->startChild($context);

    \Sentry\SentrySdk::getCurrentHub()->setSpan($span);

    // Perform you cache operation
    $value = Cache::get($key);
    
    $span->setData([
        // Describe the cache server you are accessing
        'network.peer.address' => '127.0.0.1',
        'network.peer.port' => 9000,
        // Add the key you just retrieved from the cache
        'cache.key' => $key
    ]);

    if ($value !== null) {
        $span->setData([
            // If you retrieved a value, the cache was hit
            'cache.hit' => true,
            // Optionally, add the size of the value you retrieved
            'cache.item_size' => strlen($value),
        ]);
    } else {
        $span->setData([
            // If you could not retrieve a value, it was a miss
            'cache.hit' => false,
        ]);
    }

    $span->finish();

    \Sentry\SentrySdk::getCurrentHub()->setSpan($parentSpan);
}

----------------------------------------

TITLE: Configuring Error Sampling Rate in Sentry SDK
DESCRIPTION: Set the sample rate option in the SDK configuration to control the percentage of errors sent to Sentry. The value should be between 0 (0% of errors sent) and 1 (100% of errors sent).

LANGUAGE: javascript
CODE:
Sentry.init({
  sampleRate: 0.25
});

----------------------------------------

TITLE: Configuring SSL Certificates for Sentry Go
DESCRIPTION: Demonstrates how to provide custom SSL certificates using gocertifi when initializing the Sentry client.

LANGUAGE: go
CODE:
package main

import (
	"log"

	"github.com/certifi/gocertifi"
	"github.com/getsentry/sentry-go"
)

sentryClientOptions := sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
}

rootCAs, err := gocertifi.CACerts()
if err != nil {
	log.Println("Could not load CA Certificates: %v\n", err)
} else {
	sentryClientOptions.CaCerts = rootCAs
}

sentry.Init(sentryClientOptions)

----------------------------------------

TITLE: Implementing Interactive Component Stories with State
DESCRIPTION: Examples showing how to create interactive stories that demonstrate callback props using React useState hook. Includes examples for onClick and onChange handlers.

LANGUAGE: typescript
CODE:
story('onClick Prop', () => {
  const [clicks, setClicks] = useState(0);
  return (
    <Fragment>
      <p>clicked {clicks} times</p>
      <Button onClick={() => setClicks(prev => prev +1)}>Clicked Me</Button>
    </Fragment>
  );
});

story('onChange Prop', () => {
  const [lastSelected, setLastSelected] = useState(undefined);
  return (
    <Fragment>
      <p>{selected} is selected</p>
      <Tabs onChange={(selected) => setLastSelected(selected)} />
    </Fragment>
  );
}

----------------------------------------

TITLE: Setting User Context in Raven
DESCRIPTION: Shows how to associate user data with error reports

LANGUAGE: javascript
CODE:
Raven.setUserContext({
  email: "matt@example.com",
  id: "123"
});

----------------------------------------

TITLE: Masking and Unmasking Specific View Instances in Swift
DESCRIPTION: This code shows two different methods to mask or unmask specific view instances using Sentry's replay API. It demonstrates both direct API calls and view extensions.

LANGUAGE: swift
CODE:
SentrySDK.replay.maskView(view: view)
SentrySDK.replay.unmaskView(view: label)

LANGUAGE: swift
CODE:
view.sentryReplayMask()
label.sentryReplayUnmask()

----------------------------------------

TITLE: Initializing Sentry SDK with Span Filtering in Objective-C
DESCRIPTION: Configures the Sentry SDK in Objective-C with a custom beforeSendSpan callback that filters out spans with description 'unimportant span'. The code shows SDK initialization with a DSN and implementation of span filtering logic.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.beforeSendSpan = ^id<SentrySpan> _Nullable (id<SentrySpan> _Nonnull span) {
        // Modify or drop the span here
        if ([span.description isEqualToString:@"unimportant span"]) {
            // Don't send the span to Sentry
            return nil;
        }
        return span;
    };
}];

----------------------------------------

TITLE: Creating and Adding Sentry Breadcrumb in Kotlin
DESCRIPTION: This snippet demonstrates how to create a Sentry breadcrumb with custom properties such as category, message, and level. It then adds the breadcrumb to the Sentry instance for tracking user authentication events.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry
import io.sentry.kotlin.multiplatform.SentryLevel
import io.sentry.kotlin.multiplatform.protocol.Breadcrumb

val breadcrumb = Breadcrumb().apply {
    category = "auth"
    message = "Authenticated user ${user.email}"
    level = SentryLevel.INFO
}
Sentry.addBreadcrumb(breadcrumb)

----------------------------------------

TITLE: Configuring SentryHttpMessageHandler for Custom HttpClient (.NET)
DESCRIPTION: This snippet shows how to set up a custom HttpClient with SentryHttpMessageHandler to capture HTTP client errors for outbound requests in both C# and F#.

LANGUAGE: csharp
CODE:
using var httpClient = new HttpClient(new SentryHttpMessageHandler());

LANGUAGE: fsharp
CODE:
let httpClient = new HttpClient(new SentryHttpMessageHandler())

----------------------------------------

TITLE: Starting RQ Worker
DESCRIPTION: Shell command to start RQ worker with custom settings module and Sentry DSN configuration.

LANGUAGE: shell
CODE:
rq worker \
    -c mysettings \
    --sentry-dsn="___PUBLIC_DSN___"

----------------------------------------

TITLE: Removing Frame-Local Variables from Sentry Event
DESCRIPTION: Example of using a PII selector with a value type to remove all frame-local variables from a Sentry event.

LANGUAGE: plaintext
CODE:
[Remove] [Anything] from [$frame.vars]

----------------------------------------

TITLE: Logging Error to Sentry in PowerShell
DESCRIPTION: This snippet demonstrates how to log an error message to Sentry using PowerShell. It utilizes the pipeline operator to send a string message to a custom 'Out-Sentry' cmdlet, which presumably handles the actual logging to Sentry.

LANGUAGE: powershell
CODE:
"Something went wrong" | Out-Sentry

----------------------------------------

TITLE: Configuring Synchronous Sentry Scope in F#
DESCRIPTION: F# implementation of synchronous Sentry scope configuration. Provides the same functionality as the C# version but using F# syntax and conventions.

LANGUAGE: fsharp
CODE:
open Sentry

SentrySdk.ConfigureScope (
  fun scope ->
    scope.SetTag ("my-tag", "my value")
    scope.User <- User (
        Id = "42",
        Email = "john.doe@example.com"
      )
  )

----------------------------------------

TITLE: MDX Alert Component Example
DESCRIPTION: Example showing how to use the Alert component for displaying important information

LANGUAGE: markdown
CODE:
<Alert>\n\nWhile we use the term "index page" to refer to the top-level page about a feature in Docs, we don't use this terminology in the actual Docs. Learn more in [Other Guidelines](#other-guidelines).\n\n</Alert>

----------------------------------------

TITLE: Configuring Sentry Using Direct Subsystem Methods
DESCRIPTION: Shows how to configure Sentry directly using the SentrySubsystem class methods. Demonstrates setting user information and tags through the global scope without using delegates.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

USentryUser* SentryUser = NewObject<USentryUser>();
SentryUser->SetEmail("john.doe@example.com");
SentryUser->SetId(42);

SentrySubsystem->SetUser(ScopeDelegate);
SentrySubsystem->SetTag("my-tag", "my value");

----------------------------------------

TITLE: Installing Sentry Apollo 4 Integration with SBT
DESCRIPTION: Add the Sentry Apollo 4 integration dependency to your SBT project.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-apollo-4" % "{{@inject packages.version('sentry.java.apollo-4', '8.3.0') }}"

----------------------------------------

TITLE: Installing Sentry Browser SDK with pnpm
DESCRIPTION: This command installs the @sentry/browser package using pnpm (performant npm). pnpm is another alternative package manager that aims to be faster and more efficient than npm or Yarn.

LANGUAGE: bash
CODE:
pnpm add @sentry/browser

----------------------------------------

TITLE: Adding MDC Data to Sentry Events in Java
DESCRIPTION: Shows how to add extra data to Sentry events using Logback's MDC (Mapped Diagnostic Context) system in Java.

LANGUAGE: java
CODE:
void logWithExtras() {
  // MDC extras
  MDC.put("Environment", "Development");
  MDC.put("OS", "Linux");

  // This sends an event where the Environment and OS MDC values are set as additional data
  logger.error("This is a test");
}

----------------------------------------

TITLE: Importing Sentry SDK for SolidStart
DESCRIPTION: Imports all exports from the @sentry/solidstart package using the namespace import syntax. This allows access to all Sentry monitoring and error tracking functionality in a SolidStart application.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/solidstart";

----------------------------------------

TITLE: Generating Secret Key in Shell
DESCRIPTION: Generates a new secret key value for Sentry configuration.

LANGUAGE: shell
CODE:
sentry config generate-secret-key

----------------------------------------

TITLE: Viewing Sentry Upload Command Help
DESCRIPTION: Command to display help information and available options for the sentry-upload-sourcemaps command.

LANGUAGE: shell
CODE:
yarn sentry-upload-sourcemaps --help

----------------------------------------

TITLE: Adding Sentry Dependency for Scala SBT Projects
DESCRIPTION: This SBT configuration adds the Sentry dependency to a Scala project. It specifies the Sentry library version to be used.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry" % "{{@inject packages.version('sentry.java', '4.2.0') }}"

----------------------------------------

TITLE: Verifying Webhook Signatures in Python
DESCRIPTION: Python implementation for verifying webhook signatures using hmac and hashlib modules, with error handling for missing or invalid signatures.

LANGUAGE: python
CODE:
import hashlib
import hmac
import json

expected_digest = request.headers.get('sentry-hook-signature')  # returns None if header is missing
body = json.dumps(request.body)

digest = hmac.new(
    key=client_secret.encode('utf-8'),
    msg=body,
    digestmod=hashlib.sha256,
).hexdigest()

if not expected_digest:  # The signature is missing
    raise UnauthorizedError

if not hmac.compare_digest(digest, expected_digest):
    raise UnauthorizedError

----------------------------------------

TITLE: Implementing Traces Sampler for Sentry in Python
DESCRIPTION: This function determines whether a trace should be sampled in Sentry. It first checks if there's a parent sample decision to inherit. The rest of the sampling logic would be implemented in the omitted part of the function.

LANGUAGE: python
CODE:
def traces_sampler(sampling_context):
    # always inherit
    if sampling_context["parent_sampled"] is not None:
        return sampling_context["parent_sampled"]

    ...
    # rest of sampling logic here

----------------------------------------

TITLE: Configuring Sentry Scope with Character Context in F#
DESCRIPTION: This snippet shows how to use SentrySdk.ConfigureScope to add a custom 'character' context to the Sentry scope in F#. It sets the same properties as the C# version: Name, Age, and AttackType for the character.

LANGUAGE: fsharp
CODE:
SentrySdk.ConfigureScope(fun scope ->
    scope.Contexts["character"] <- {|
        Name = "Mighty Fighter"
        Age = 19
        AttackType = "melee"
    |}
    )

----------------------------------------

TITLE: Instrumenting Cron Jobs with Sentry using node-schedule library
DESCRIPTION: Shows how to instrument the node-schedule library using Sentry.cron.instrumentNodeSchedule. Requires Sentry SDK version 7.93.0 or higher. Currently only supports cronstring format for job scheduling.

LANGUAGE: JavaScript
CODE:
import * as schedule from "node-schedule";

const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);

scheduleWithCheckIn.scheduleJob(
  "my-cron-job",
  "* * * * *",
  () => {
    console.log("running a task every minute");
  }
);

----------------------------------------

TITLE: Configuring Traces Sampler for Sentry in PHP Laravel
DESCRIPTION: This code snippet defines a traces_sampler function for Sentry configuration in a Laravel application. The function determines the sampling rate for performance monitoring, always inheriting from the parent context if available.

LANGUAGE: php
CODE:
'traces_sampler' => function (\Sentry\Tracing\SamplingContext $context): float {
    // always inherit
    if ($context->getParentSampled()) {
        return 1.0;
    }

    // the rest of sampling logic
},

----------------------------------------

TITLE: Capturing Exceptions with Tags in Java
DESCRIPTION: Shows how to capture exceptions using Sentry in Java with custom tags and severity levels. Demonstrates both tagged and untagged exception capturing approaches.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.SentryLevel;

// will be tagged with my-tag="my value"
Sentry.captureException(new Exception("my error"), scope -> {
  scope.setTag("my-tag", "my value");
  scope.setLevel(SentryLevel.WARNING);
});

// will not be tagged with my-tag
Sentry.captureException(new Exception("my error"));

----------------------------------------

TITLE: Downloading Sentry OpenTelemetry Agent
DESCRIPTION: Downloads the latest version of the Sentry OpenTelemetry agent JAR file from Maven Central repository using curl.

LANGUAGE: bash
CODE:
curl https://repo1.maven.org/maven2/io/sentry/sentry-opentelemetry-agent/{{@inject packages.version('sentry.java.opentelemetry-agent') }}/sentry-opentelemetry-agent-{{@inject packages.version('sentry.java.opentelemetry-agent') }}.jar -o sentry-opentelemetry-agent-{{@inject packages.version('sentry.java.opentelemetry-agent') }}.jar

----------------------------------------

TITLE: Setting Release Version in Sentry SDK
DESCRIPTION: This snippet demonstrates how to set the release version when initializing the Sentry SDK. The exact implementation may vary depending on the specific platform or framework being used.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="set-release" notateUnsupported />

----------------------------------------

TITLE: Defining A/B Test Experiment in Python for Sentry
DESCRIPTION: This code snippet defines an A/B test experiment class in Python for Sentry. It inherits from OrgExperiment and uses WeightedChoice to assign organizations to different variants of the experiment.

LANGUAGE: python
CODE:
# In getsentry/experiments/config.py

from __future__ import absolute_import

from django.conf import settings

from .base import OrgExperiment
from planout.ops.random import WeightedChoice

WEIGHT_VARIANT = 0.5

class ShowPluginsExperiment(OrgExperiment):
    def default_value(self):
        return "0"

    def assign(self, params, org, actor):
        if settings.IS_TEST or org.slug == "sentry":
            params.variant = "1"
        else:
            params.variant = WeightedChoice(
                choices=["0", "1"], weights=[1 - WEIGHT_VARIANT, WEIGHT_VARIANT], unit=org.id
            )

----------------------------------------

TITLE: Setting DSN in Properties File
DESCRIPTION: Configure the Sentry DSN in a properties file located on filesystem or classpath.

LANGUAGE: properties
CODE:
dsn=___PUBLIC_DSN___

----------------------------------------

TITLE: Sending JSON Event Payload to Sentry Store Endpoint
DESCRIPTION: Example of a basic JSON payload for a Sentry event, including event_id, transaction, timestamp, tags, and exception details.

LANGUAGE: json
CODE:
{
  "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0",
  "transaction": "my.module.function_name",
  "timestamp": "2011-05-02T17:41:36",
  "tags": {
    "ios_version": "4.0"
  },
  "exception": {"values":[{
    "type": "SyntaxError",
    "value": "Wattttt!",
    "module": "__builtins__"
  }]}
}

----------------------------------------

TITLE: Initializing Sentry SDK with LinkedErrors Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK with the LinkedErrors integration. It allows configuration of linked errors, which are recursively read up to a specified limit and looked up by a specific key.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  integrations: [Sentry.linkedErrorsIntegration()],
});

----------------------------------------

TITLE: Configuring Apple Privacy Manifest for Sentry Flutter SDK
DESCRIPTION: XML configuration for PrivacyInfo.xcprivacy that declares collected data types and accessed API types required by Sentry SDK. Includes declarations for crash data, performance data, diagnostic data, and system API access with corresponding privacy reasons.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>NSPrivacyCollectedDataTypes</key>
	<array>
		<dict>
			<key>NSPrivacyCollectedDataType</key>
			<string>NSPrivacyCollectedDataTypeCrashData</string>
			<key>NSPrivacyCollectedDataTypeLinked</key>
			<false/>
			<key>NSPrivacyCollectedDataTypeTracking</key>
			<false/>
			<key>NSPrivacyCollectedDataTypePurposes</key>
			<array>
				<string>NSPrivacyCollectedDataTypePurposeAppFunctionality</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyCollectedDataType</key>
			<string>NSPrivacyCollectedDataTypePerformanceData</string>
			<key>NSPrivacyCollectedDataTypeLinked</key>
			<false/>
			<key>NSPrivacyCollectedDataTypeTracking</key>
			<false/>
			<key>NSPrivacyCollectedDataTypePurposes</key>
			<array>
				<string>NSPrivacyCollectedDataTypePurposeAppFunctionality</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyCollectedDataType</key>
			<string>NSPrivacyCollectedDataTypeOtherDiagnosticData</string>
			<key>NSPrivacyCollectedDataTypeLinked</key>
			<false/>
			<key>NSPrivacyCollectedDataTypeTracking</key>
			<false/>
			<key>NSPrivacyCollectedDataTypePurposes</key>
			<array>
				<string>NSPrivacyCollectedDataTypePurposeAppFunctionality</string>
			</array>
		</dict>
	</array>
	<key>NSPrivacyAccessedAPITypes</key>
	<array>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryUserDefaults</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>CA92.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategorySystemBootTime</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>35F9.1</string>
			</array>
		</dict>
		<dict>
			<key>NSPrivacyAccessedAPIType</key>
			<string>NSPrivacyAccessedAPICategoryFileTimestamp</string>
			<key>NSPrivacyAccessedAPITypeReasons</key>
			<array>
				<string>C617.1</string>
			</array>
		</dict>
	</array>
</dict>
</plist>

----------------------------------------

TITLE: Manual Trace Meta Tag Injection using getTraceData
DESCRIPTION: Shows how to manually generate and inject trace meta tags using Sentry.getTraceData() for more controlled meta tag generation.

LANGUAGE: javascript
CODE:
function renderHtml() {
  const metaTagValues = Sentry.getTraceData();

  return `
    <html>
      <head>
        <meta name="sentry-trace" content="${metaTagValues["sentry-trace"]}">
        <meta name="baggage" content="${metaTagValues.baggage}">
      </head>
      <body>
        <!-- Your HTML content -->
      </body>
    </html>
  `;
}

----------------------------------------

TITLE: Capturing Exceptions with Sentry in F#
DESCRIPTION: This snippet shows how to capture exceptions using Sentry SDK in F#. It uses a try-with expression to catch any exception and then uses SentrySdk.CaptureException to log the error, ignoring the result.

LANGUAGE: fsharp
CODE:
try
    aFunctionThatMightFail()
with ex ->
    SentrySdk.CaptureException(ex) |> ignore

----------------------------------------

TITLE: Setting Empty User Context in Sentry Scope
DESCRIPTION: Configures a Sentry scope by setting an empty user object. This is commonly used to clear existing user data or initialize a blank user context within the current scope.

LANGUAGE: go
CODE:
sentry.ConfigureScope(func(scope *sentry.Scope) {
	scope.SetUser(sentry.User{})
})

----------------------------------------

TITLE: Creating Sentry Transactions and Spans in PowerShell
DESCRIPTION: Shows how to create a Sentry transaction, add multiple child spans, and properly finish both spans and transactions. The example demonstrates the hierarchical nature of spans within a transaction and proper cleanup using the Finish method.

LANGUAGE: powershell
CODE:
# Transaction can be started by providing, at minimum, the name and the operation
$transaction = Start-SentryTransaction 'test-transaction-name' 'test-transaction-operation'

# Transactions can have child spans (and those spans can have child spans as well)
$span = $transaction.StartChild("test-child-operation")
# ...
# (Perform the operation represented by the span/transaction)
# ...
$span.Finish() # Mark the span as finished

$span = $transaction.StartChild("another-span")
# ...
$span.Finish()


$transaction.Finish() # Mark the transaction as finished and send it to Sentry

----------------------------------------

TITLE: Creating Sentry Transactions and Spans in PowerShell
DESCRIPTION: Shows how to create a Sentry transaction, add multiple child spans, and properly finish both spans and transactions. The example demonstrates the hierarchical nature of spans within a transaction and proper cleanup using the Finish method.

LANGUAGE: powershell
CODE:
# Transaction can be started by providing, at minimum, the name and the operation
$transaction = Start-SentryTransaction 'test-transaction-name' 'test-transaction-operation'

# Transactions can have child spans (and those spans can have child spans as well)
$span = $transaction.StartChild("test-child-operation")
# ...
# (Perform the operation represented by the span/transaction)
# ...
$span.Finish() # Mark the span as finished

$span = $transaction.StartChild("another-span")
# ...
$span.Finish()


$transaction.Finish() # Mark the transaction as finished and send it to Sentry

----------------------------------------

TITLE: Minidump Code and Debug File Scrubbing
DESCRIPTION: Rule for scrubbing username information from code and debug file paths in minidumps.

LANGUAGE: regex
CODE:
[Remove] [Usernames in filepaths] from [$minidump.code_file || $minidump.debug_file]

----------------------------------------

TITLE: Minidump Code and Debug File Scrubbing
DESCRIPTION: Rule for scrubbing username information from code and debug file paths in minidumps.

LANGUAGE: regex
CODE:
[Remove] [Usernames in filepaths] from [$minidump.code_file || $minidump.debug_file]

----------------------------------------

TITLE: Configuring Sentry File Tracing in Dart
DESCRIPTION: Code snippet showing how to wrap a File object with Sentry tracing functionality.

LANGUAGE: dart
CODE:
final sentryFile = file.sentryTrace();

----------------------------------------

TITLE: Customizing Failed Request Targets (C# and F#)
DESCRIPTION: Configure specific targets for capturing failed requests using substrings or regular expressions. This allows for more granular control over which GraphQL endpoints are monitored.

LANGUAGE: csharp
CODE:
options.FailedRequestTargets.Add("foo");      // substring
options.FailedRequestTargets.Add("foo.*bar"); // regex

LANGUAGE: fsharp
CODE:
options.FailedRequestTargets.Add("foo")      // substring
options.FailedRequestTargets.Add("foo.*bar") // regex

----------------------------------------

TITLE: Enabling Default Lints in Rust
DESCRIPTION: Shows how to enable additional warnings for missing documentation and debug implementations in a Rust crate.

LANGUAGE: rust
CODE:
#![warn(missing_docs)]
#![warn(missing_debug_implementations)]

----------------------------------------

TITLE: Configuring Trace Propagation Targets in Swift
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in Swift and configure the tracePropagationTargets option to specify which URLs should have tracing headers attached to outgoing requests.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.tracePropagationTargets = [
        "https://myproject.org",
        "https://api.otherservice.org/",
    ]
}

----------------------------------------

TITLE: Configuring Serverless Framework with Sentry for Node.js Lambda
DESCRIPTION: YAML configuration for setting up Sentry monitoring in a Node.js Lambda function using Serverless Framework. Includes environment variables, layer configuration, and function setup.

LANGUAGE: yaml
CODE:
# other configuration

provider:
  # more configuration
  region: <AWS_REGION>
  environment:
    SENTRY_TRACES_SAMPLE_RATE: "1.0"
    SENTRY_DSN: "<SENTRY_DSN>"
    NODE_OPTIONS: "-r @sentry/aws-serverless/dist/awslambda-auto"

custom:
  layers:
    - arn:aws:lambda:${self:provider.region}:943013980633:layer:SentryNodeServerlessSDK:26
#    - arn:aws:lambda:${self:provider.region}:943013980633:layer:SentryNodeServerlessSDK:latest

functions:
  <yourFunctionName>:
    handler: <yourLambdaHandlerFunctionPath>
    layers: ${self:custom.layers}

----------------------------------------

TITLE: Configuring Azure DevOps Credentials in Python for Sentry
DESCRIPTION: This snippet shows how to add the Azure DevOps App ID and Client Secret to the 'devlocal.py' file in Sentry's configuration. It also demonstrates how to enable the feature flag for the new Azure DevOps integration.

LANGUAGE: python
CODE:
# Azure DevOps #
SENTRY_OPTIONS["vsts_new.client-id"] = your-app-id
SENTRY_OPTIONS["vsts_new.client-secret"] = your-client-secret

# Enable feature flag
SENTRY_FEATURES["organizations:migrate-azure-devops-integration"] = True

----------------------------------------

TITLE: Adding Authentication Breadcrumb with Sentry SDK in Python
DESCRIPTION: This code uses the Sentry SDK to add a breadcrumb for tracking user authentication. It specifies the category as 'auth', includes a message with the user's email, and sets the level to 'info'.

LANGUAGE: python
CODE:
from sentry_sdk import add_breadcrumb

add_breadcrumb(
    category='auth',
    message='Authenticated user %s' % user.email,
    level='info',
)

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Kotlin
DESCRIPTION: This snippet demonstrates how to capture an exception using Sentry in a Kotlin multiplatform project. It imports the Sentry library and uses the captureException method to log an exception.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry

Sentry.captureException(exception)

----------------------------------------

TITLE: Creating External Link in Markdown
DESCRIPTION: Demonstrates how to create a link to an external page, typically used for linking to the Sentry UI.

LANGUAGE: markdown
CODE:
The **Performance** page is the main view in [sentry.io](https://sentry.io) where you can search or browse for transaction data.

----------------------------------------

TITLE: Setting End Timestamp in JSON (ISO 8601)
DESCRIPTION: Illustrates how to set the required timestamp attribute using an ISO 8601 formatted string.

LANGUAGE: json
CODE:
{
  "timestamp": "2011-05-02T17:41:36.955Z"
}

----------------------------------------

TITLE: Configuring Next.js with Sentry (ESM)
DESCRIPTION: Extends Next.js configuration to include Sentry options using withSentryConfig in ESM format.

LANGUAGE: JavaScript
CODE:
import { withSentryConfig } from "@sentry/nextjs";

const nextConfig = {
  // Your existing Next.js configuration
};

// Make sure adding Sentry options is the last code to run before exporting
export default withSentryConfig(nextConfig, {
  org: "___ORG_SLUG___",
  project: "___PROJECT_SLUG___",

  // Only print logs for uploading source maps in CI
  // Set to `true` to suppress logs
  silent: !process.env.CI,

  // Automatically tree-shake Sentry logger statements to reduce bundle size
  disableLogger: true,
});

----------------------------------------

TITLE: Adding Sentry Event Processor for Transaction Name Sanitization in JavaScript
DESCRIPTION: Implements a Sentry event processor that intercepts transaction events and sanitizes their names. Uses the addEventProcessor function from any JavaScript-based Sentry SDK to modify transaction events before they are sent to Sentry.

LANGUAGE: javascript
CODE:
// All JavaScript-based SDKs include this function, so it's safe to replace `@sentry/node`
// with your particular SDK
import { addEventProcessor } from "@sentry/node";

addEventProcessor((event) => {
  if (event.type === "transaction") {
    event.transaction = sanitizeTransactionName(event.transaction);
  }
  return event;
});

----------------------------------------

TITLE: Configuring Sentry SDK in ASP.NET Global.asax.cs
DESCRIPTION: This code snippet shows how to configure the Sentry SDK in the Global.asax.cs file of an ASP.NET application. It includes setup for error monitoring, performance tracing, and Entity Framework integration.

LANGUAGE: csharp
CODE:
using System;
using System.Web;
using Sentry.AspNet;
using Sentry.EntityFramework; // If you also installed Sentry.EntityFramework
using Sentry.Extensibility;

public class MvcApplication : HttpApplication
{
    private IDisposable _sentry;

    protected void Application_Start()
    {
        // Initialize Sentry to capture AppDomain unhandled exceptions and more.
        _sentry = SentrySdk.Init(options =>
        {
            options.Dsn = "___PUBLIC_DSN___";
            // When configuring for the first time, to see what the SDK is doing:
            options.Debug = true;

            // Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring.
            // We recommend adjusting this value in production.
            options.TracesSampleRate = 1.0;

            // If you also installed the Sentry.EntityFramework package
            options.AddEntityFramework();
            options.AddAspNet();
        });
    }

    // Global error catcher
    protected void Application_Error() => Server.CaptureLastError();

    protected void Application_BeginRequest()
    {
        Context.StartSentryTransaction();
    }

    protected void Application_EndRequest()
    {
        Context.FinishSentryTransaction();
    }

    protected void Application_End()
    {
        // Flushes out events before shutting down.
        _sentry?.Dispose();
    }
}

----------------------------------------

TITLE: Notifying Sentry of Job Failure in Heartbeat Monitoring
DESCRIPTION: This snippet shows how to notify Sentry when a job fails during heartbeat monitoring. It uses the captureCheckIn method with the 'error' status to indicate job failure.

LANGUAGE: javascript
CODE:
// 🔴 Notify Sentry your job has failed:
Sentry.captureCheckIn({
  monitorSlug: "<monitor-slug>",
  status: "error",
});

----------------------------------------

TITLE: Configuring Logging Backend for Sentry Metrics in Python
DESCRIPTION: Demonstrates how to set up the Logging backend for Sentry metrics in the sentry.conf.py file, including custom formatters and handlers.

LANGUAGE: python
CODE:
SENTRY_METRICS_BACKEND = 'sentry.metrics.logging.LoggingBackend'

LOGGING['loggers']['sentry.metrics'] = {
    'level': 'DEBUG',
    'handlers': ['console:metrics'],
    'propagate': False,
}

LOGGING['formatters']['metrics'] = {
    'format': '[%(levelname)s] %(message)s; instance=%(instance)r; tags=%(tags)r',
}

LOGGING['handlers']['console:metrics'] = {
    'level': 'DEBUG',
    'class': 'logging.StreamHandler',
    'formatter': 'metrics',
}

----------------------------------------

TITLE: Setting Transaction Type in Sentry JSON Configuration
DESCRIPTION: Demonstrates how to set the required 'type' field for a Sentry transaction. The 'type' field must be set to 'transaction' to properly identify the event as a transaction in Sentry.

LANGUAGE: json
CODE:
{
  "type": "transaction"
}

----------------------------------------

TITLE: Adding Custom Sampling Context in Sentry Transaction (JavaScript)
DESCRIPTION: Shows how to add custom data to the sampling context when manually creating a transaction. This allows the sampling function to access additional information for decision-making.

LANGUAGE: javascript
CODE:
const transaction = Sentry.startTransaction(
  {
    name: "test-transaction"
  },
  {
    // Additional context
    data: {
      property: "value"
    }
  }
);

----------------------------------------

TITLE: Customizing Sentry RequestHandler
DESCRIPTION: Example of customizing the Sentry request handler middleware configuration with specific options.

LANGUAGE: javascript
CODE:
app.use(
  Sentry.Handlers.requestHandler({
    serverName: false,
    user: ["email"],
  })
);

----------------------------------------

TITLE: Modifying Spans in Apollo Client with Sentry Tracing (Java)
DESCRIPTION: Customize spans created by Sentry tracing in Apollo Client using a callback function in Java.

LANGUAGE: java
CODE:
import com.apollographql.apollo3.ApolloClient;
import io.sentry.apollo3.SentryApolloBuilderExtensionsKt;

ApolloClient apollo = SentryApolloBuilderExtensionsKt.sentryTracing(
            new ApolloClient.Builder(),
            (span, request, response) -> {
              if ("LaunchDetails".equals(span.getOperation())) {
                span.setTag("tag-name", "tag-value");
              }
              return span;
            })
        .serverUrl("https://your-api-host/")
        .build();

----------------------------------------

TITLE: Warning Alert Component
DESCRIPTION: React/JSX component displaying a warning about design principle inconsistency.

LANGUAGE: jsx
CODE:
<Alert level="warning">
  Note: while there are a few good examples of this in action in the app, we are actually pretty inconsistent applying this design principle.
</Alert>

----------------------------------------

TITLE: Rendering Framework Alert Component in JSX
DESCRIPTION: Displays an alert component with a title to inform users about checking other supported SDK frameworks in the navigation dropdown menu.

LANGUAGE: jsx
CODE:
<Alert title="Using a framework?">

Check out the other SDKs we support in the left-hand dropdown.

</Alert>

----------------------------------------

TITLE: Generating ProGuard UUID in Python
DESCRIPTION: This code snippet demonstrates how to generate a UUID for ProGuard files in Python. It uses a SHA1 UUID based on the checksum of the file, with a specific namespace derived from 'guardsquare.com'.

LANGUAGE: python
CODE:
import uuid

NAMESPACE = uuid.uuid5(uuid.NAMESPACE_DNS, "guardsquare.com")

def get_proguard_uuid(filename):
    with open(filename, 'rb') as f:
        return uuid.uuid5(NAMESPACE, f.read())

----------------------------------------

TITLE: Installing Sentry Wizard via Homebrew
DESCRIPTION: Command to install and run Sentry Wizard for iOS project initialization. The wizard patches the project and configures the SDK automatically.

LANGUAGE: bash
CODE:
brew install getsentry/tools/sentry-wizard && sentry-wizard -i ios

----------------------------------------

TITLE: Configuring Sentry to Use Full Span Hierarchy
DESCRIPTION: Sentry initialization with the option to use full span hierarchy instead of flat hierarchy.

LANGUAGE: javascript
CODE:
Sentry.init({
  parentSpanIsAlwaysRootSpan: false,
});

----------------------------------------

TITLE: Initializing Sentry with GraphQL Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the GraphQL integration. The integration is added to the list of integrations in the Sentry.init() call.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.graphqlIntegration()],
});

----------------------------------------

TITLE: Initializing Sentry with Event Filtering in Kotlin
DESCRIPTION: Demonstrates how to initialize Sentry with a custom beforeSend hook that filters out events from test environments. The code uses the Sentry Kotlin Multiplatform SDK to set up event processing logic.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry

Sentry.init { options ->
  options.beforeSend = { event ->
    if (event.environment == "test") {
      null
    } else {
      event
    }
  }
}

----------------------------------------

TITLE: Accessing Oban Job Data in Sentry Event
DESCRIPTION: Example showing how to access the Oban job struct from within the Sentry event metadata.

LANGUAGE: elixir
CODE:
event.integration_meta[:oban][:job]

----------------------------------------

TITLE: Installing Sentry SDK for Flask
DESCRIPTION: Command to install the Sentry SDK with Flask integration using pip package manager

LANGUAGE: bash
CODE:
pip install --upgrade "sentry-sdk[flask]"

----------------------------------------

TITLE: Configuring Sentry CLI in Xcode Build Phase
DESCRIPTION: Demonstrates how to set up the Xcode build phase script for bundling React Native code and uploading source maps to Sentry.

LANGUAGE: bash
CODE:
export SENTRY_PROPERTIES=sentry.properties
export EXTRA_PACKAGER_ARGS="--sourcemap-output $DERIVED_FILE_DIR/main.jsbundle.map"
set -e

# RN 0.69+
WITH_ENVIRONMENT="../node_modules/react-native/scripts/xcode/with-environment.sh"
REACT_NATIVE_XCODE="../node_modules/react-native/scripts/react-native-xcode.sh"
SENTRY_CLI="../node_modules/@sentry/cli/bin/sentry-cli"

/bin/sh -c "$WITH_ENVIRONMENT \"$SENTRY_CLI react-native xcode $REACT_NATIVE_XCODE\""

# All versions
/bin/sh ../node_modules/@sentry/react-native/scripts/collect-modules.sh

----------------------------------------

TITLE: Running Sentry Dart Plugin
DESCRIPTION: Command to execute the Sentry Dart Plugin for uploading debug symbols.

LANGUAGE: bash
CODE:
flutter pub run sentry_dart_plugin

----------------------------------------

TITLE: Configuring MSBuild Properties for Sentry Integration
DESCRIPTION: XML configuration for MSBuild project file showing all available Sentry-related properties and their usage.

LANGUAGE: xml
CODE:
<!-- We recommend only using these features for release builds. -->
<PropertyGroup Condition="'$(Configuration)' == 'Release'">

  <!-- Configure Sentry org and project -->
  <SentryOrg>___ORG_SLUG___</SentryOrg>
  <SentryProject>___PROJECT_SLUG___</SentryProject>

  <!--
    Each of the below features are opt-in.
    Enable the features you wish to use.
  -->

  <!-- Automatically creates a release when building your application. -->
  <SentryCreateRelease>true</SentryCreateRelease>

  <!-- Automatically associates commits with the release. -->
  <SentrySetCommits>true</SentrySetCommits>

  <!-- Optionally provide explicit flags to the set-commits command -->
  <SentrySetCommitOptions>--local</SentrySetCommitOptions>

  <!-- Sends symbols to Sentry, enabling symbolication of stack traces. -->
  <SentryUploadSymbols>true</SentryUploadSymbols>

  <!-- Sends sources to Sentry, enabling display of source context. -->
  <SentryUploadSources>true</SentryUploadSources>

  <!-- If you are targeting Android, sends proguard mapping file to Sentry. -->
  <SentryUploadAndroidProguardMapping>true</SentryUploadAndroidProguardMapping>

</PropertyGroup>

----------------------------------------

TITLE: Configuring Sentry with Performance Monitoring (ESM)
DESCRIPTION: Sentry initialization with performance monitoring enabled using ES Modules. Includes DSN configuration and trace sampling rate.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Customizing Sentry Error Handling for RPC Exceptions in Kotlin
DESCRIPTION: This snippet defines a custom MyRpcException class and configures Sentry to handle these exceptions with custom fingerprints in Kotlin. It uses the Sentry.init() function to set up a beforeSend callback that modifies the event fingerprints for MyRpcException instances.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.BeforeSendCallback
import java.lang.Exception

class MyRpcException(
  val function: String,
  val httpStatusCode: Int
) : Exception()

Sentry.init { options ->
  options.beforeSend = BeforeSendCallback { event, hint ->
    if (event.throwable is MyRpcException) {
      val exception = event.throwable as MyRpcException
      event.fingerprints = listOf(
        "{{ default }}",
        exception.function,
        exception.httpStatusCode.toString()
      )
    }
    event
  }
}

----------------------------------------

TITLE: Using Event Hints for Fingerprinting in JavaScript
DESCRIPTION: Shows how to use event hints in the before-send callback to modify the event fingerprint based on the exception type.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event, hint) {
    if (hint.originalException instanceof MyCustomError) {
      event.fingerprint = ['my-custom-error'];
    }
    return event;
  },
});

----------------------------------------

TITLE: Setting Sentry Context in Swift
DESCRIPTION: This snippet configures the Sentry SDK scope by adding custom context information about a character. It sets the character's name, age, and attack type using a dictionary.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.configureScope { scope in
    scope.setContext(value: [
        "name": "Mighty Fighter",
        "age" : 19,
        "attack_type" : "melee"
    ], key: "character")
}

----------------------------------------

TITLE: Initializing Sentry with Hapi.js Server (ESM)
DESCRIPTION: Sets up a Hapi.js server with Sentry error handling using ES Modules import syntax. Creates a server instance on localhost:3030 and configures Sentry's error handler before starting the server.

LANGUAGE: javascript
CODE:
// Import this first!
import "./instrument";

// Now import other modules
import * as Sentry from "@sentry/node";
import Hapi from "@hapi/hapi";

const init = async () => {
  const server = Hapi.server({
    port: 3030,
    host: 'localhost',
  });

  // All your routes etc.

  await Sentry.setupHapiErrorHandler(server);

  await server.start();
};

init();

----------------------------------------

TITLE: Common Image Include Definition
DESCRIPTION: Example of defining a reusable image reference in a common include file.

LANGUAGE: markdown
CODE:
![Tags](./img/tags.png)

----------------------------------------

TITLE: Defining Sampling Rule in JSON for Relay
DESCRIPTION: This snippet shows an example of a sampling rule encoded in JSON format. It includes fields for rule ID, type, sampling value, condition, time range, and decaying function.

LANGUAGE: json
CODE:
{
  "id": 1000,
  "type": "trace",
  "samplingValue": {
    "type": "sampleRate",
    "value": 0.5
  },
  "condition": {
    "inner": [],
    "op": "and"
  },
  "timeRange": {
    "start": "2022-10-21 18:50:25+00:00",
    "end": "2022-10-21 19:50:25+00:00"
  },
  "decayingFn": {
    "type": "linear",
    "decayedValue": 0.2
  }
}

----------------------------------------

TITLE: Caching Static Regular Expressions in Rust
DESCRIPTION: Demonstrates how to cache static regular expressions using std::sync::LazyLock to avoid costly recompilation.

LANGUAGE: rust
CODE:
std::sync::LazyLock

----------------------------------------

TITLE: Setting Sentry Environment in Bash
DESCRIPTION: Sets the environment name for the Sentry installation, which controls defaults for settings like DEBUG.

LANGUAGE: bash
CODE:
SENTRY_ENVIRONMENT=production sentry ...

----------------------------------------

TITLE: Testing Raven Client Configuration via CLI
DESCRIPTION: Demonstrates how to test the Raven client configuration using the command-line interface. It shows both methods: with explicit DSN and using the SENTRY_DSN environment variable.

LANGUAGE: bash
CODE:
raven test ___DSN___

LANGUAGE: bash
CODE:
raven test

----------------------------------------

TITLE: Initializing Sentry SDK with BeforeSend Callback in Swift
DESCRIPTION: This snippet shows how to start the Sentry SDK in Swift, configuring a beforeSend callback that modifies the event fingerprint. The callback sets a custom fingerprint for all events before they are sent to Sentry.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.start { options in
    options.beforeSend = { event in
        event.fingerprint = ["my-view-function"]
        return event
    }
}

----------------------------------------

TITLE: Setting Sentry Context in Objective-C
DESCRIPTION: This snippet configures the Sentry SDK scope in Objective-C by adding custom context information about a character. It sets the character's name, age, and attack type using an NSDictionary.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK configureScope:^(SentryScope *_Nonnull scope) {
    [scope setContextValue:@{
        @"name" : @"Mighty Fighter",
        @"age" : @19,
        @"attack_type" : @"melee"
    } forKey:@"character"];
}];

----------------------------------------

TITLE: Initializing Sentry SDK with Feedback Integration in JavaScript
DESCRIPTION: This code initializes the Sentry SDK for error monitoring. It imports the Sentry module, sets up the DSN, and configures the feedback integration with a system color scheme.

LANGUAGE: javascript
CODE:
// import Sentry from your framework SDK (e.g. @sentry/react) instead of @sentry/browser
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.feedbackIntegration({
      // Additional SDK configuration goes in here, for example:
      colorScheme: "system",
    }),
  ],
});

----------------------------------------

TITLE: Updating Navigation Instrumentation for Expo Router
DESCRIPTION: Shows how to update the navigation instrumentation for Expo Router in Sentry.init, replacing ReactNativeTracing with a standalone integration.

LANGUAGE: javascript
CODE:
import Sentry from '@sentry/react-native';
import { useNavigationContainerRef } from 'expo-router';

const reactNavigationIntegration =  Sentry.reactNavigationIntegration();

Sentry.init({
  tracesSampleRate: 1.0,
  integrations: [
    reactNavigationIntegration,
  ],
});

----------------------------------------

TITLE: Adding In-Memory Attachment to Sentry Scope in F#
DESCRIPTION: This snippet shows how to add an in-memory attachment to the current Sentry scope using F#. It utilizes the SentrySdk.ConfigureScope method with a function that calls scope.AddAttachment to attach a byte array as a file named 'file.log'.

LANGUAGE: fsharp
CODE:
SentrySdk.ConfigureScope(
  fun scope ->
    // Add an in-memory attachment to the current scope
    scope.AddAttachment(bytes, "file.log")
)

----------------------------------------

TITLE: Installing Sentry React SDK
DESCRIPTION: Commands for installing the Sentry React SDK using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/react --save

LANGUAGE: bash
CODE:
yarn add @sentry/react

LANGUAGE: bash
CODE:
pnpm add @sentry/react

----------------------------------------

TITLE: Uploading Minidump with Flattened Parameters
DESCRIPTION: Alternative approach to upload a minidump file using flattened parameter notation instead of JSON. Achieves the same result but uses bracket notation for specifying tags.

LANGUAGE: bash
CODE:
curl -X POST \
  '___MINIDUMP_URL___' \
  -F upload_file_minidump=@mini.dmp \
  -F 'sentry[tags][mytag]=value'

----------------------------------------

TITLE: Capturing User Feedback with Sentry SDK in F#
DESCRIPTION: This snippet shows how to capture a message and associated user feedback using the Sentry SDK in F#. It demonstrates capturing an event and then linking user feedback to that event.

LANGUAGE: fsharp
CODE:
open Sentry

let eventId = SentrySdk.CaptureMessage("An event that will receive user feedback.")

SentrySdk.CaptureUserFeedback(eventId, "user@example.com", "It broke.", "The User")

----------------------------------------

TITLE: Example Trace Context Implementation
DESCRIPTION: Example of trace context structure in event envelope item showing how links are stored.

LANGUAGE: typescript
CODE:
{
  type: "transaction";
  transaction: string;
  contexts: {
    trace: {
      span_id: string;
      parent_span_id: string;
      trace_id: string;
      links?: Array<{
        "span_id": string,
        "trace_id": string,
        sampled?: boolean,
        attributes?: Record<string, AttributeValue>,
      }>
    }
  }
}

----------------------------------------

TITLE: Makefile for Rust Project Management
DESCRIPTION: A comprehensive Makefile for managing Rust projects, including commands for testing, linting, formatting, and documentation generation.

LANGUAGE: makefile
CODE:
all: check test
.PHONY: all

check: style lint
.PHONY: check

test: test-default test-all
.PHONY: test

test-default:
	cargo test --all
.PHONY: test-default

test-all:
	cargo test --all --all-features
.PHONY: test-all

style:
	@rustup component add rustfmt --toolchain stable 2> /dev/null
	cargo +stable fmt --all -- --check
.PHONY: style

lint:
	@rustup component add clippy --toolchain stable 2> /dev/null
	cargo +stable clippy --all-features --all --tests --examples -- -D clippy::all
.PHONY: lint

format:
	@rustup component add rustfmt --toolchain stable 2> /dev/null
	cargo +stable fmt --all
.PHONY: format

doc:
	cargo doc --workspace --all-features --no-deps
.PHONY: doc

----------------------------------------

TITLE: Listing Organization Teams with Sentry API
DESCRIPTION: Makes a GET request to list all teams in a Sentry organization without detailed project information.

LANGUAGE: bash
CODE:
curl "https://sentry.io/api/0/organizations/$SENTRY_ORG_ID/teams/?detailed=0" \
    -H 'Authorization: Bearer $SENTRY_AUTH_TOKEN'

----------------------------------------

TITLE: Creating a Transaction Context from Sentry Trace Header in Dart
DESCRIPTION: This snippet demonstrates how to create a Sentry transaction context from a trace header in a Dart application. It retrieves the 'sentry-trace' header from a request, creates a SentryTraceHeader object, and starts a transaction using the trace information. The code also includes error handling for invalid trace headers.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

final header = request.headers['sentry-trace'];
final sentryTraceHeader = SentryTraceHeader.fromTraceHeader(header);
try {
  final transaction = Sentry.startTransactionWithContext(SentryTransactionContext.fromSentryTrace('name', 'operation', sentryTraceHeader));
} catch (error) {
  // handle [InvalidSentryTraceHeaderException] if invalid `sentry-trace` header.
}

----------------------------------------

TITLE: Initializing Sentry with Error Ignore Patterns in Go
DESCRIPTION: This code initializes Sentry with client options, setting up error ignore patterns. It demonstrates how to configure Sentry to ignore specific errors or error patterns during error reporting.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	// ...
    IgnoreErrors: []string{"my-error", "error-*"},
})

----------------------------------------

TITLE: Configuring AWS Lambda Timeout Warning
DESCRIPTION: Example showing how to enable timeout warnings in the AWS Lambda integration

LANGUAGE: python
CODE:
sentry_sdk.init(
    # ...
    integrations=[
        AwsLambdaIntegration(timeout_warning=True),
    ],
)

----------------------------------------

TITLE: Defining Thread Information in Sentry Event Payload - Array Format
DESCRIPTION: Alternative format showing how to structure thread information using a direct array format. Contains the same information as the object format but in a flattened structure.

LANGUAGE: json
CODE:
{
  "threads": [
    {
      "id": "0",
      "name": "main",
      "crashed": true,
      "main": true,
      "held_locks": {
        "0x0d3a2f0a": {},
        "0x07d7437b": {}
      },
      "state": "Runnable",
      "stacktrace": {}
    }
  ]
}

----------------------------------------

TITLE: Configuring Spring MVC Async Task Executor (Spring 6)
DESCRIPTION: Implementation of WebMvcConfigurer for Spring 6 using jakarta package to set up ThreadPoolTaskExecutor with SentryTaskDecorator for async methods.

LANGUAGE: java
CODE:
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.AsyncTaskExecutor;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import io.sentry.spring.jakarta.SentryTaskDecorator;

@Configuration
class AsyncWebMvcConfiguration implements WebMvcConfigurer {

    @Override
    public void configureAsyncSupport(AsyncSupportConfigurer configurer) {
        configurer.setTaskExecutor(asyncExecutor());
    }

    private AsyncTaskExecutor asyncExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setTaskDecorator(new SentryTaskDecorator());
        executor.initialize();
        return executor;
    }
}

----------------------------------------

TITLE: Capturing Anyhow Errors with Sentry Integration in Rust
DESCRIPTION: Demonstrates the specialized error capture method for anyhow errors using Sentry's anyhow integration. Uses the capture_anyhow function to handle errors from the anyhow crate.

LANGUAGE: rust
CODE:
use sentry::integrations::anyhow::capture_anyhow;

let result = match function_returns_anyhow() {
    Ok(result) => result,
    Err(err) => {
        capture_anyhow(&err);
        return Err(err);
    }
};

----------------------------------------

TITLE: Error Capture Verification in Swift
DESCRIPTION: Example code demonstrating how to capture and send errors to Sentry in Swift.

LANGUAGE: swift
CODE:
import Sentry

do {
    try aMethodThatMightFail()
} catch {
    SentrySDK.capture(error: error)
}

----------------------------------------

TITLE: Error Capture Verification in Swift
DESCRIPTION: Example code demonstrating how to capture and send errors to Sentry in Swift.

LANGUAGE: swift
CODE:
import Sentry

do {
    try aMethodThatMightFail()
} catch {
    SentrySDK.capture(error: error)
}

----------------------------------------

TITLE: HTTP Header Sanitization Reference - Swift
DESCRIPTION: Reference to the denylist implementation for HTTP header sanitization in the Sentry Cocoa SDK. This code filters out sensitive data from HTTP headers before sending to Sentry.

LANGUAGE: swift
CODE:
Sources/Swift/Tools/HTTPHeaderSanitizer.swift

----------------------------------------

TITLE: Sentry Monitor Schedule Configuration Examples in JSON
DESCRIPTION: These JSON snippets demonstrate the structure of schedule configuration for Sentry Monitors. It shows examples for both crontab and interval type schedules.

LANGUAGE: json
CODE:
{"type": "crontab", "value": "0 * * * *"}
{"type": "interval", "value": "2", "unit": "hour"}

----------------------------------------

TITLE: Running Sentry Frontend Development Server
DESCRIPTION: Command to start the Sentry frontend development server. This server proxies API requests to Sentry's production servers and can be accessed at https://dev.getsentry.net:7999.

LANGUAGE: shell
CODE:
yarn dev-ui

----------------------------------------

TITLE: Defining Replay Context in Sentry SDK
DESCRIPTION: Example JSON structure for Replay context, containing the replay_id of the associated replay with the event.

LANGUAGE: json
CODE:
{
  "contexts": {
    "replay": {
      "replay_id": "12312012123120121231201212312012"
    }
  }
}

----------------------------------------

TITLE: Implementing a Sampling Function for Sentry Transactions (JavaScript)
DESCRIPTION: Demonstrates how to use a sampling function to dynamically decide whether to sample a transaction based on its name and the current environment.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // Example function to dynamically sample transactions
  tracesSampler: samplingContext => {
    if (samplingContext.transactionContext.name === "health_check") {
      // Don't send health check transactions
      return 0;
    }
    if (process.env.NODE_ENV === "test") {
      // Don't sample in test environments
      return 0;
    }
    // Sample 50% of all other transactions
    return 0.5;
  }
});

----------------------------------------

TITLE: Implementing Setup Hook in Sentry Integration
DESCRIPTION: Shows how to implement the setup hook in a custom integration. This hook is called during SDK initialization and receives the client instance as an argument.

LANGUAGE: javascript
CODE:
const integration = {
  name: "MyAwesomeIntegration",
  setup(client) {
    setupCustomSentryListener(client);
  },
};

----------------------------------------

TITLE: Installing Sentry SDK and Langchain Dependencies
DESCRIPTION: Command to install required Python packages including sentry-sdk, langchain-openai, and langchain-core via pip.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk' 'langchain-openai' 'langchain-core'

----------------------------------------

TITLE: Defining Span Description in JSON for Sentry
DESCRIPTION: This JSON snippet demonstrates how to set the optional 'description' field for a span in Sentry. The description provides a longer, unique identifier for the span's operation, which remains consistent across instances. In this example, it contains an SQL query.

LANGUAGE: json
CODE:
{
  "description": "SELECT * FROM users WHERE last_active < DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)`"
}

----------------------------------------

TITLE: Comparing Legacy and New Crons API Endpoints
DESCRIPTION: Demonstrates the difference between legacy and new Crons API endpoint URLs, highlighting the transition to Relay-based ingestion.

LANGUAGE: plaintext
CODE:
# ❌ Legacy endpoints
https://sentry.io/api/0/organizations/___ORG_SLUG___/monitors/<monitor_slug/>

# ❌ Legacy endpoint without organization context
https://sentry.io/api/0/monitors/<monitor_slug/>

# ❌ Legacy check-in details endpoint
https://sentry.io/api/0/monitors/<monitor_slug/checkins/<check_in_id>/

# ✅ Relay Check-In ingestion endpoint
https://___ORG_INGEST_DOMAIN___/api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/

----------------------------------------

TITLE: Defining Custom Regular Expression for Data Scrubbing in Sentry
DESCRIPTION: Example of a custom regular expression to match alphanumeric characters. This can be used as a data type in Sentry's Advanced Data Scrubbing rules.

LANGUAGE: regex
CODE:
[a-zA-Z0-9]+

----------------------------------------

TITLE: Manual Configuration of Apollo Client with Sentry Interceptors (Java)
DESCRIPTION: Manually configure Apollo Client with Sentry interceptors for custom NetworkTransport in Java.

LANGUAGE: java
CODE:
import com.apollographql.apollo3.ApolloClient;
import com.apollographql.apollo3.network.http.HttpNetworkTransport;
import io.sentry.apollo3.SentryApollo3HttpInterceptor;
import io.sentry.apollo3.SentryApollo3Interceptor;

ApolloClient apollo = new ApolloClient.Builder()
        .networkTransport(
            new HttpNetworkTransport.Builder()
                .serverUrl("https://your-api-host/")
                .addInterceptor(new SentryApollo3HttpInterceptor())
                .build())
        .addInterceptor(new SentryApollo3Interceptor())
        .build();

----------------------------------------

TITLE: Automatic Event Enhancement in Java
DESCRIPTION: Demonstrates how to automatically enhance Sentry events using EventBuilderHelper in Java. Shows how to modify events before they are sent to Sentry.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.SentryClient;
import io.sentry.event.EventBuilder;
import io.sentry.event.helper.EventBuilderHelper;

public class MyClass {
  public void myMethod() {
    SentryClient client = Sentry.getStoredClient();

    EventBuilderHelper myEventBuilderHelper = new EventBuilderHelper() {
      @Override
      public void helpBuildingEvent(EventBuilder eventBuilder) {
        eventBuilder.withMessage("Overwritten by myEventBuilderHelper!");
      }
    };

    client.addBuilderHelper(myEventBuilderHelper);
    Sentry.capture("Hello, world!");
  }
}

----------------------------------------

TITLE: Installing Sentry Apollo 4 Integration with Maven
DESCRIPTION: Add the Sentry Apollo 4 integration dependency to your Maven project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-apollo-4</artifactId>
    <version>{{@inject packages.version('sentry.java.apollo-4', '8.3.0') }}</version>
</dependency>

----------------------------------------

TITLE: Capturing Error Messages with Sentry in JavaScript
DESCRIPTION: This snippet demonstrates how to use Sentry's captureMessage() method to log error messages. It shows both a basic usage and how to specify a custom severity level for the message.

LANGUAGE: javascript
CODE:
Sentry.captureMessage("Something went wrong");

// optionally specify the severity level:
// "fatal" | "error" | "warning" | "log" | "debug" | "info" (default)
Sentry.captureMessage("Something went wrong", "warning");

----------------------------------------

TITLE: Initializing Sentry SDK in Deno
DESCRIPTION: Demonstrates the new initialization pattern for Sentry 8.x where Sentry.init must be called before any other imports. This ensures proper auto-instrumentation of all packages.

LANGUAGE: JavaScript
CODE:
import * as Sentry from '@sentry/deno';

Sentry.init({
  // ...
});

// everything else

----------------------------------------

TITLE: Updating MIGRATED_GETTING_STARTD_DOCS List in Python
DESCRIPTION: Add the slug of the new platform to the MIGRATED_GETTING_STARTD_DOCS list in the project.py file to avoid backend errors.

LANGUAGE: Python
CODE:
MIGRATED_GETTING_STARTD_DOCS = ["new_platform_slug"]

----------------------------------------

TITLE: Initializing Sentry with Koa Server (CommonJS)
DESCRIPTION: This snippet shows how to set up Sentry error tracking with a Koa server using CommonJS module system. It demonstrates the correct order of requiring modules and initializing Sentry's Koa error handler.

LANGUAGE: javascript
CODE:
// Require this first!
require("./instrument");

// Now require other modules
const Koa = require("koa");
const Sentry = require("@sentry/node");

const app = new Koa();

Sentry.setupKoaErrorHandler(app);

// Add your routes, etc.

app.listen(3030);

----------------------------------------

TITLE: Configuring Sentry through appsettings.json
DESCRIPTION: Shows how to configure Sentry options using the application's appsettings.json file. This method allows for configuration changes without code deployment.

LANGUAGE: json
CODE:
  "Sentry": {
    "Dsn": "___PUBLIC_DSN___",
    "MaxBreadcrumbs": 50,
    "Debug": true
  }

----------------------------------------

TITLE: Implementing Send Callback in Raven Configuration for Node.js
DESCRIPTION: This snippet shows how to implement a send callback function to apply custom filters for event sending.

LANGUAGE: javascript
CODE:
{
    shouldSendCallback: function (data) {
        // randomly omit half of events
        return Math.random() > 0.5;
    }
}

----------------------------------------

TITLE: Implementing Send Callback in Raven Configuration for Node.js
DESCRIPTION: This snippet shows how to implement a send callback function to apply custom filters for event sending.

LANGUAGE: javascript
CODE:
{
    shouldSendCallback: function (data) {
        // randomly omit half of events
        return Math.random() > 0.5;
    }
}

----------------------------------------

TITLE: Sending Stored Event JSON with Sentry CLI
DESCRIPTION: Shows how to send a stored event JSON file using the send-event command.

LANGUAGE: bash
CODE:
sentry-cli send-event ./events/20211029150006.json

----------------------------------------

TITLE: DSN Authentication for Sentry API (Bash)
DESCRIPTION: This snippet shows how to use DSN-based authentication for specific Sentry API endpoints. It demonstrates the format for including the DSN in the Authorization header of a curl command.

LANGUAGE: bash
CODE:
curl -H 'Authorization: DSN {DSN}' https://sentry.io/api/0/{organization_slug}/{project_slug}/user-reports/

----------------------------------------

TITLE: Installing sentry-log4j2 Dependency
DESCRIPTION: This snippet shows how to add the sentry-log4j2 dependency to your project using different build tools.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-log4j2</artifactId>
    <version>1.7.30</version>
</dependency>

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-log4j2:1.7.30'

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-log4j2" % "1.7.30"

----------------------------------------

TITLE: Setting Sentry SDK Scope Tag in Swift
DESCRIPTION: This snippet demonstrates how to configure the Sentry SDK scope in Swift. It imports the Sentry module and sets a tag with the key 'page_locale' and value 'de-at' using the configureScope method.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.configureScope { scope in
    scope.setTag(value: "de-at", key: "page_locale")
}

----------------------------------------

TITLE: Initializing OpenFeature SDK with Sentry Integration (Track One Client)
DESCRIPTION: This snippet demonstrates initializing Sentry with OpenFeature integration, setting up the OpenFeature provider, and adding hooks to track evaluations for a specific client. It shows how to evaluate a boolean feature flag and capture an exception with Sentry.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/remix';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Sentry API Subsequent Page Link Header
DESCRIPTION: This snippet shows an example of a Link header from a subsequent page of Sentry API response for an issue's events. It demonstrates how the cursor values change for pagination.

LANGUAGE: bash
CODE:
<https://sentry.io/api/0/organizations/acme/issues/123456/events/?&cursor=0:0:1>; rel="previous"; results="true"; cursor="0:0:1", <https://sentry.io/api/0/organizations/acme/issues/123456/events/?&cursor=0:200:0>; rel="next"; results="true"; cursor="0:200:0"

----------------------------------------

TITLE: Setting Sentry Scope Tag in Rust
DESCRIPTION: Configures a Sentry scope by setting a custom tag for page locale. Uses the closure-based scope configuration pattern to set a tag named 'page.locale' with value 'de-at'.

LANGUAGE: rust
CODE:
sentry::configure_scope(|scope| {
    scope.set_tag("page.locale", "de-at");
});

----------------------------------------

TITLE: Sample Debug Logger Output for Sentry PHP SDK
DESCRIPTION: Shows an example of the debug output produced by the Sentry PHP SDK logger, including information about integration installation, transaction sampling, and sending data to Sentry.

LANGUAGE: text
CODE:
sentry/sentry: [debug] The "Sentry\Integration\ExceptionListenerIntegration, Sentry\Integration\ErrorListenerIntegration, Sentry\Integration\FatalErrorListenerIntegration, Sentry\Integration\RequestIntegration, Sentry\Integration\TransactionIntegration, Sentry\Integration\FrameContextifierIntegration, Sentry\Integration\EnvironmentIntegration, Sentry\Integration\ModulesIntegration" integration(s) have been installed.
sentry/sentry: [info] Transaction [e2919a7b0f954478b6994c7282b060de] was started and sampled, decided by config:traces_sample_rate.
sentry/sentry: [info] Transaction [e2919a7b0f954478b6994c7282b060de] started profiling because it was sampled.
sentry/sentry: [info] Sending transaction [59390dc9dd934c0290d8cdc7a589da82] to o1.ingest.sentry.io [project:1].
sentry/sentry: [warning] The profile does not contain enough samples, the profile will be discarded.
sentry/sentry: [info] Sent transaction [59390dc9dd934c0290d8cdc7a589da82] to o1.ingest.sentry.io [project:1]. Result: "success" (status: 200).

----------------------------------------

TITLE: Including Browser Compatibility Documentation in Markdown
DESCRIPTION: A markdown include directive that references browser compatibility documentation for Sentry JavaScript SDK v8

LANGUAGE: markdown
CODE:
<Include name="migration/javascript-v8/compatible-browsers" />

----------------------------------------

TITLE: Installing Sentry File I/O Integration with Maven
DESCRIPTION: Maven dependency configuration for adding Sentry's file I/O integration to a Java project. Requires the core Sentry Java SDK package.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry</artifactId>
    <version>{{@inject packages.version('sentry.java', '4.2.0') }}</version>
</dependency>

----------------------------------------

TITLE: Setting HTTP Context in Go
DESCRIPTION: Shows how to set HTTP context information either manually or from an existing request object.

LANGUAGE: go
CODE:
h := &raven.Http{
    Method: "GET",
    URL: "https://example.com/raven-go",
}
// or
h = raven.NewHttp(req) // where req is an implementation of `*http.Request` interface
raven.SetHttpContext(h)

----------------------------------------

TITLE: Adding and Clearing Attachments in Sentry using Java
DESCRIPTION: This snippet demonstrates how to add a file attachment to Sentry events and clear all attachments using Java. It uses the Sentry SDK to configure the scope and manage attachments.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.Attachment;

Attachment fileAttachment = new Attachment("your/path/file.log");

// Add an attachment
Sentry.configureScope(scope -> {
  scope.addAttachment(fileAttachment);
});

// Clear all attachments
Sentry.configureScope(scope -> {
  scope.clearAttachments();
});

----------------------------------------

TITLE: Displaying Warning Alert for Google Crashpad Limitations in Markdown
DESCRIPTION: This snippet uses Markdown syntax to create a warning alert. It informs users about Google Crashpad's limitation regarding custom attachments and suggests using Sentry's Native SDK instead.

LANGUAGE: markdown
CODE:
<Alert level="warning">

Google Crashpad does not allow adding custom attachments, please consider using our [Native SDK](/platforms/native/) instead.

</Alert>

----------------------------------------

TITLE: Modifying Logging Configuration in Python
DESCRIPTION: Modifies the logging configuration for Sentry in Python.

LANGUAGE: python
CODE:
LOGGING['default_level'] = 'WARNING'

----------------------------------------

TITLE: Template Interface JSON Structure Example
DESCRIPTION: Example JSON structure showing the template interface implementation with all required and optional fields. Demonstrates how to structure template information including file paths, line numbers, and context lines.

LANGUAGE: json
CODE:
{
  "template": {
    "abs_path": "/real/file/name.html",
    "filename": "file/name.html",
    "lineno": 3,
    "pre_context": [
      "line1",
      "line2"
    ],
    "context_line": "line3",
    "post_context": [
      "line4",
      "line5"
    ],
  }
}

----------------------------------------

TITLE: Configuring Universal Redaction in Sentry (JSON)
DESCRIPTION: Demonstrates how to set up a rule that matches any value, effectively acting as a wildcard. This example shows how to remove all strings using the 'anything' type.

LANGUAGE: json
CODE:
{
  "rules": {
    "remove_everything": {
      "type": "anything",
      "redaction": {
        "method": "remove"
      }
    }
  },
  "applications": {
    "$string": ["remove_everything"]
  }
}

----------------------------------------

TITLE: Implementing Custom Sentry Error Fingerprinting in Elixir
DESCRIPTION: Defines a SentryHook module that modifies event fingerprints for database connection errors. The hook sets a custom fingerprint for DBConnection.ConnectionError exceptions while leaving other events unchanged. Includes configuration to register the hook with Sentry.

LANGUAGE: elixir
CODE:
defmodule SentryHook do
  def before_send(event) do
    case event.original_exception do
      %DBConnection.ConnectionError{} ->
        put_in(event.fingerprint, ["database_connection_error"])

      _other ->
        event
    end
  end
end

config :sentry,
  before_send: {SentryHook, :before_send}

----------------------------------------

TITLE: Starting Sentry Development Server with U2F in Shell
DESCRIPTION: Shell command to start the Sentry development server with the NGROK environment variable set, enabling U2F configuration.

LANGUAGE: shell
CODE:
NGROK=1 sentry devserver

----------------------------------------

TITLE: Configuring Native SDK Initialization Type in Unity
DESCRIPTION: Set the IosNativeInitializationType and AndroidNativeInitializationType options to control native SDK initialization behavior on mobile platforms.

LANGUAGE: csharp
CODE:
// To restore previous behavior:
IosNativeInitializationType = BuildTime;
AndroidNativeInitializationType = BuildTime;

----------------------------------------

TITLE: Implementing Sentry ErrorBoundary with Custom Fallback
DESCRIPTION: This snippet demonstrates a more complex implementation of the Sentry ErrorBoundary. It includes a custom fallback component, enables the user feedback dialog, and wraps an Example component.

LANGUAGE: javascript
CODE:
import React from "react";
import * as Sentry from "@sentry/react";

import { Example } from "../example";

function FallbackComponent() {
  return <div>An error has occurred</div>;
}

const myFallback = <FallbackComponent />;
// Alternatively:
// const myFallback = () => <FallbackComponent />;

class App extends React.Component {
  render() {
    return (
      <Sentry.ErrorBoundary fallback={myFallback} showDialog>
        <Example />
      </Sentry.ErrorBoundary>
    );
  }
}

export default App;

----------------------------------------

TITLE: Verifying Sentry Setup in Kotlin Android Activity
DESCRIPTION: Kotlin code snippet to add to an Android Activity for verifying Sentry integration by intentionally throwing and capturing an exception.

LANGUAGE: kotlin
CODE:
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import io.sentry.Sentry

class MyActivity : AppCompatActivity() {
  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    try {
      throw Exception("This is a test.")
    } catch (e: Exception) {
      Sentry.captureException(e)
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry with Feedback Integration in JavaScript for Gatsby
DESCRIPTION: This code snippet initializes Sentry for a Gatsby project. It sets up the Sentry client with a public DSN and configures the feedback integration with a system-based color scheme. This setup enables error tracking and user feedback collection in the Gatsby application.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/gatsby";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.feedbackIntegration({
      // Additional SDK configuration goes in here, for example:
      colorScheme: "system",
    }),
  ],
});

----------------------------------------

TITLE: Installing Sentry Android Gradle Plugin in Kotlin
DESCRIPTION: Add the Sentry Android Gradle Plugin to your app/build.gradle file using Kotlin syntax.

LANGUAGE: kotlin
CODE:
plugins {
    id("com.android.application")
    id("io.sentry.android.gradle") version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

----------------------------------------

TITLE: Creating and Managing Sentry Transactions in PHP
DESCRIPTION: This snippet demonstrates how to create a Sentry transaction, start a child span for an expensive operation, and properly manage the transaction and span lifecycles. It includes setting up context, starting and finishing spans, and handling the current span in Sentry's hub.

LANGUAGE: php
CODE:
// Setup context for the full transaction
$transactionContext = \Sentry\Tracing\TransactionContext::make()
    ->setName('Example Transaction')
    ->setOp('http.server');

// Start the transaction
$transaction = \Sentry\startTransaction($transactionContext);

// Set the current transaction as the current span so we can retrieve it later
\Sentry\SentrySdk::getCurrentHub()->setSpan($transaction);

// Setup the context for the expensive operation span
$spanContext = \Sentry\Tracing\SpanContext::make()
    ->setOp('expensive_operation');

// Start the span
$span1 = $transaction->startChild($spanContext);

// Set the current span to the span we just started
\Sentry\SentrySdk::getCurrentHub()->setSpan($span1);

// Calling expensive_operation()
expensive_operation();

// Finish the span
$span1->finish();

// Set the current span back to the transaction since we just finished the previous span
\Sentry\SentrySdk::getCurrentHub()->setSpan($transaction);

// Finish the transaction, this submits the transaction and it's span to Sentry
$transaction->finish();

----------------------------------------

TITLE: Initializing Sentry SDK in C++
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK in a C++ application. It creates a new options object, sets the release version, and then initializes Sentry with these options.

LANGUAGE: cpp
CODE:
#include <sentry.h>

sentry_options_t *options = sentry_options_new();
sentry_options_set_release(options, "my-project-name@2.3.12");
sentry_init(options);

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Error Handling in Objective-C
DESCRIPTION: This snippet shows how to initialize the Sentry SDK in Objective-C, implementing a custom beforeSend option that modifies the event fingerprint for NSURLErrorDomain errors. It extracts the failing URL and error code to create a unique fingerprint.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.beforeSend = ^SentryEvent * _Nullable(SentryEvent * _Nonnull event) {
        if ([event.error.domain isEqualToString:NSURLErrorDomain]) {
            NSString *failingUrl = event.error.userInfo[NSURLErrorFailingURLErrorKey];
            if (failingUrl != nil) {
                event.fingerprint = @[
                    @"{{ default }}",
                    failingUrl,
                    @(event.error.code).stringValue
                ];
            }
        }
        return event;
    };
}];

----------------------------------------

TITLE: Setting Max Attachment Size for Sentry SDK in Dart
DESCRIPTION: Sets the maximum allowed size for attachments in the Sentry SDK to 5 MiB (5 * 1024 * 1024 bytes). This configuration should be added during SDK initialization.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

// Add this to the SDK initialization callback
options.maxAttachmentSize = 5 * 1024 * 1024; // 5 MiB

----------------------------------------

TITLE: Installing Specific Sentry Version Using Docker
DESCRIPTION: Command to install a specific version of Sentry using a Docker image tag, allowing users to deploy a particular commit or custom build.

LANGUAGE: bash
CODE:
SENTRY_IMAGE=getsentry/sentry:83b138090a3078352e3f733de7209fb02ef4f98a ./install.sh

----------------------------------------

TITLE: Setting Sentry Tags in Swift
DESCRIPTION: Configures Sentry SDK scope to set a custom tag using Swift. Uses a hash tool to process a birthday date string before setting it as a tag value.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.configureScope { scope in
    scope.setTag(value:YourHashTool.checksumOrHash("08/12/1990"), key:"birthady")
}

----------------------------------------

TITLE: Adding Sentry OpenTelemetry Agentless Spring Dependency in Maven
DESCRIPTION: This snippet demonstrates how to add the 'sentry-opentelemetry-agentless-spring' dependency to a Maven project. It includes the groupId, artifactId, and version tags necessary for Maven dependency declaration.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-opentelemetry-agentless-spring</artifactId>
    <version>{{@inject packages.version('sentry.java.opentelemetry-agentless-spring', '8.0.0') }}</version>
</dependency>

----------------------------------------

TITLE: Defining Sentry Envelope Ingestion Endpoint
DESCRIPTION: Specifies the HTTP endpoint for submitting Sentry Envelopes, which is a POST request to a project-specific URL.

LANGUAGE: text
CODE:
POST /api/<project_id>/envelope/

----------------------------------------

TITLE: Initializing Sentry OpenFeature Integration with Single Client Tracking
DESCRIPTION: Configures Sentry with OpenFeature SDK to track feature flag evaluations for a specific client instance. Sets up Sentry initialization and adds hooks only to the specified OpenFeature client.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nextjs';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Implementing Trace Sampling Function in C# Sentry SDK
DESCRIPTION: Example demonstrating how to implement a custom sampling function that accepts a sampling context dictionary and returns a sampling rate between 0 and 1. The function can also return null to defer to existing sampling decisions or the default traces-sample-rate.

LANGUAGE: csharp
CODE:
SentrySdk.Init(options =>
{
    options.TracesSampler = context => {
        // Return value between 0 and 1 or null
    };
});

----------------------------------------

TITLE: Enabling Tracing in Laravel for Sentry
DESCRIPTION: This snippet demonstrates how to enable tracing in the Laravel Sentry integration by setting the SENTRY_TRACES_SAMPLE_RATE environment variable. It's important to adjust this value in production to prevent quota issues.

LANGUAGE: bash
CODE:
# You may need to adjust this value in your production environment to prevent quota issues
SENTRY_TRACES_SAMPLE_RATE=1.0

----------------------------------------

TITLE: Sentry Integration Feature Matrix Table
DESCRIPTION: Markdown table displaying all available Sentry integrations and their supported features including auto-enabling status, error handling, tracing support, and additional context capabilities.

LANGUAGE: markdown
CODE:
|                                                           | **Auto Enabled** | **Errors** | **Tracing** | **Additional Context** |
| --------------------------------------------------------- | :--------------: | :--------: | :---------: | :--------------------: |
| [`amqplibIntegration`](./amqplib)                         |        ✓         |            |      ✓      |                        |
| [`consoleIntegration`](./console)                         |        ✓         |            |             |           ✓            |

----------------------------------------

TITLE: Initializing Sentry with Breadcrumb Filtering in Java
DESCRIPTION: This snippet demonstrates how to initialize Sentry in Java and set up a custom breadcrumb filter. It filters out breadcrumbs from a specific logger category.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setBeforeBreadcrumb((breadcrumb, hint) -> {
    if ("a.spammy.Logger".equals(breadcrumb.getCategory())) {
      return null;
    } else {
      return breadcrumb;
    }
  });
});

----------------------------------------

TITLE: Uploading Artifacts with sentry-cli
DESCRIPTION: Upload minified sources and source maps as artifacts using sentry-cli.

LANGUAGE: bash
CODE:
sentry-cli sourcemaps upload --release=<release_name> /path/to/directory

----------------------------------------

TITLE: Inefficient Image Loading in Android
DESCRIPTION: Example of problematic image loading that causes decoding on the UI thread using BitmapFactory.decodeByteArray.

LANGUAGE: kotlin
CODE:
fun showImage(data: ByteArray) {
	imageView.setImageBitmap(BitmapFactory.decodeByteArray(data, 0, data.size))
}

----------------------------------------

TITLE: Installing Raven Python SDK with pip
DESCRIPTION: Command to install the Raven Python SDK using pip package manager. This installs or upgrades the raven package.

LANGUAGE: bash
CODE:
pip install raven --upgrade

----------------------------------------

TITLE: Configuring Sentry Auth Token in Environment File
DESCRIPTION: Example of setting the Sentry authentication token in a .env.sentry-build-plugin file. This file should be added to .gitignore to protect sensitive data.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Installing Raven Test Kit
DESCRIPTION: This shell command installs the Raven Test Kit as a development dependency for testing Sentry integrations.

LANGUAGE: shell
CODE:
npm install raven-testkit --save-dev

----------------------------------------

TITLE: HTTP Request Tracing with Sentry Transactions
DESCRIPTION: Shows how to implement request tracing using Sentry transactions with SentryHttpClient.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

final transaction = Sentry.startTransaction(
  'webrequest',
  'request',
  bindToScope: true,
);

var client = SentryHttpClient();
try {
  var uriResponse = await client.post('https://example.com/whatsit/create',
    body: {'name': 'doodle', 'color': 'blue'});
  print(await client.get(uriResponse.bodyFields['uri']));
} finally {
  client.close();
}

await transaction.finish(status: SpanStatus.ok());

----------------------------------------

TITLE: Configuring Getsentry Dev Server
DESCRIPTION: Modified configuration settings for running the Getsentry development server. Includes custom config path and working directory settings.

LANGUAGE: plaintext
CODE:
Script path: getsentry/.venv/bin/sentry
Parameters: --config=.../settings.py devserver --workers
Working directory: getsentry/getsentry

----------------------------------------

TITLE: Configuring Redis Clusters in YAML
DESCRIPTION: Describes Redis clusters available to the Sentry server, which can be referenced by other internal services.

LANGUAGE: yaml
CODE:
redis.clusters:
  default: # cluster name
    hosts: # connection options, passed to `rb.Cluster`
      0:
        host: redis-1.example.com
        port: 6379
      1:
        host: redis-2.example.com
        port: 6379
  other:
    hosts:
      0:
        host: redis-3.example.com
        port: 6379

----------------------------------------

TITLE: Setting Error.prepareStackTrace as Stack Function for Sentry in CoffeeScript
DESCRIPTION: This example shows how to specifically use Error.prepareStackTrace as the stack function when initializing the Sentry client. This approach can help resolve conflicts between raven-node and CoffeeScript's stack trace handling.

LANGUAGE: coffeescript
CODE:
client = new raven.Client('___PUBLIC_DSN___', {
    stackFunction: Error.prepareStackTrace
});

----------------------------------------

TITLE: Creating Sentry Transaction for Checkout Process in C#
DESCRIPTION: Illustrates how to create and manage a Sentry transaction for tracking a checkout process, including child spans for validation and processing steps. The code demonstrates transaction creation, scope configuration, and span management for performance monitoring.

LANGUAGE: csharp
CODE:
// Let's say this method is invoked when a user clicks on the checkout button of your shop
public async Task PerformCheckoutAsync()
{
  // This will create a new Transaction for you
  var transaction = SentrySdk.StartTransaction(
      "checkout", // name
      "perform-checkout" // operation
  );

  // Set transaction on scope to associate with errors and get included span instrumentation
  // If there's currently an unfinished transaction, it may be dropped
  SentrySdk.ConfigureScope(scope => scope.Transaction = transaction);

  // Validate the cart
  var validationSpan = transaction.StartChild(
      "validation", // operation
      "validating shopping cart" // description
  );

  await ValidateShoppingCartAsync();

  validationSpan.Finish();

  // Process the order
  var processSpan = transaction.StartChild(
      "process", // operation
      "processing shopping cart" // description
  )

  await ProcessShoppingCartAsync();

  processSpan.Finish();

  transaction.Finish();
}

----------------------------------------

TITLE: Package Manager Overrides Configuration
DESCRIPTION: Configuration examples for different package managers to override nitropack and @vercel/nft versions as a workaround for initialization issues.

LANGUAGE: json
CODE:
{
  "overrides": {
    "nitropack": "~2.9.7",
    "@vercel/nft": "^0.27.4"
  }
}

LANGUAGE: json
CODE:
{
  "resolutions": {
    "nitropack": "~2.9.7",
    "@vercel/nft": "^0.27.4"
  }
}

LANGUAGE: json
CODE:
{
  "pnpm": {
    "overrides": {
      "nitropack": "~2.9.7",
      "@vercel/nft": "^0.27.4"
    }
  }
}

----------------------------------------

TITLE: Defining Timestamp in JSON for Sentry (RFC 3339 Format)
DESCRIPTION: This snippet demonstrates how to specify a timestamp in Sentry using the RFC 3339 string format. The timestamp represents when the measuring finished.

LANGUAGE: json
CODE:
{
  "timestamp": "2011-05-02T17:41:36.955Z"
}

----------------------------------------

TITLE: Representing Lock Reason in JSON for Sentry
DESCRIPTION: This JSON snippet demonstrates how to structure a Lock Reason object in Sentry. It includes the type of lock, memory address, package name, class name, and the thread ID holding the lock.

LANGUAGE: json
CODE:
{
  "type": 8,
  "address": "0x07d7437b",
  "package_name": "android.database.sqlite",
  "class_name": "SQLiteConnection",
  "thread_id": 2
}

----------------------------------------

TITLE: Removing WidgetsBindingIntegration in Sentry Flutter SDK
DESCRIPTION: Dart code snippet to remove the WidgetsBindingIntegration from Sentry Flutter SDK options, necessary when using Flutter Multi-view for Web.

LANGUAGE: dart
CODE:
// ignore: implementation_imports
import 'package:sentry_flutter/src/integrations/widgets_binding_integration.dart';
...
SentryFlutter.init(
  (options) {
    ...
    final integration = options.integrations
        .firstWhere((element) => element is WidgetsBindingIntegration);
    options.removeIntegration(integration);
  },
  // Init your App.
  appRunner: appRunner,
);

----------------------------------------

TITLE: Configuring Git Commit ID Release Setting
DESCRIPTION: Configuration options to disable using Git commit ID as the release identifier in Sentry events.

LANGUAGE: properties
CODE:
sentry.use-git-commit-id-as-release=false

LANGUAGE: yaml
CODE:
sentry:
  use-git-commit-id-as-release: false

----------------------------------------

TITLE: Configuring Sentry Transaction Name Parameterization
DESCRIPTION: Shows how to implement the beforeStartSpan callback in Sentry initialization to normalize transaction names by replacing dynamic route parameters with placeholders. This helps group similar routes together in transaction monitoring.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  integrations: [
    Sentry.browserTracingIntegration({
      beforeStartSpan: (context) => {
        return {
          ...context,
          // You could use your UI's routing library to find the matching
          // route template here. We don't have one right now, so do some basic
          // parameter replacements.
          name: location.pathname
            .replace(/\/[a-f0-9]{32}/g, "/<hash>")
            .replace(/\/\d+/g, "/<digits>")
        };
      },
    }),
  ],
});

----------------------------------------

TITLE: Capturing Tagged Exceptions with Sentry in Kotlin
DESCRIPTION: Shows two methods of capturing exceptions using Sentry: one with custom tags and logging level, and another without additional configuration. Demonstrates the use of scope to set tags and logging levels when capturing exceptions.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry
import io.sentry.kotlin.multiplatform.SentryLevel

// will be tagged with my-tag="my value"
Sentry.captureException(Exception("my error")) { scope ->
  scope.setTag("my-tag", "my value")
  scope.level = SentryLevel.WARNING
}

// will not be tagged with my-tag
Sentry.captureException(Exception("my error"))

----------------------------------------

TITLE: Initializing Sentry SDK with React Router Tracing Integration
DESCRIPTION: This snippet demonstrates how to configure Sentry SDK with React Router tracing integration. It uses createBrowserHistory and sets up the Sentry.init function with the necessary options for tracing.

LANGUAGE: javascript
CODE:
import { Router } from "react-router-dom";
import { createBrowserHistory } from "history";

import * as Sentry from "@sentry/react";

const history = createBrowserHistory();

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.reactRouterV5BrowserTracingInstrumentation({ history }),
      // You can also use one of:
      // * reactRouterV3BrowserTracingInstrumentation
      // * reactRouterV4BrowserTracingInstrumentation
      // * reactRouterV6BrowserTracingInstrumentation
      // or just browserTracingIntegration
    }),
  ],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Specifying Parent Span ID in JSON
DESCRIPTION: Shows how to set the optional parent_span_id attribute to establish span hierarchy.

LANGUAGE: json
CODE:
{
  "parent_span_id": "b0e6f15b45c36b12"
}

----------------------------------------

TITLE: Implementing AfterAllSetup Hook in Sentry Custom Integration (JavaScript)
DESCRIPTION: This snippet shows the afterAllSetup hook in a custom Sentry integration. This hook is triggered after setupOnce() and setup() have been called for all integrations. It receives the client being set up as an argument and is useful when actions need to be performed after all other integrations have run.

LANGUAGE: javascript
CODE:
const integration = {
  name: "MyAwesomeIntegration",
  afterAllSetup(client) {
    // We can be sure that all other integrations
    // have run their `setup` and `setupOnce` hooks now
    startSomeThing(client);
  },
};

----------------------------------------

TITLE: Configuring Sentry Report Dialog with Window Reload
DESCRIPTION: Implementation of Sentry's showReportDialog method with a custom onClose callback that refreshes the window. Requires Sentry JS SDK version 7.82.0 or higher.

LANGUAGE: javascript
CODE:
Sentry.showReportDialog({
  // ...
  onClose() {
    // Refresh the window after the user closes the report dialog
    win.reload();
  },
});

----------------------------------------

TITLE: API Key Authentication for Sentry API (Bash)
DESCRIPTION: This snippet illustrates how to use legacy API key authentication with HTTP Basic auth in a curl command for Sentry API calls. It shows the format where the API key is used as the username and an empty password is required.

LANGUAGE: bash
CODE:
curl -u {API_KEY}: https://sentry.io/api/0/organizations/{organization_slug}/projects/

----------------------------------------

TITLE: Updating Express App for Sentry SDK 8.x (ESM)
DESCRIPTION: Changes required in the main Express app file when migrating to Sentry SDK 8.x using ESM. Shows importing the instrument file and updating the error handler for ES modules.

LANGUAGE: javascript
CODE:
import './instrument';
import express from "express";
import * as Sentry from "@sentry/node";
const app = express();

// add routes etc. here

Sentry.setupExpressErrorHandler(app);

app.listen(3000);

----------------------------------------

TITLE: Implementing a Type-Narrowing Length Check for Non-Empty Arrays in TypeScript
DESCRIPTION: Defines a helper function and type to check for non-empty arrays, allowing safe access to the first element while maintaining type safety.

LANGUAGE: typescript
CODE:
type NonEmptyArray<T> = readonly [T, ...ReadonlyArray<T>]

export const isNonEmpty = <T,>(
  array: ReadonlyArray<T> | undefined,
): array is NonEmptyArray<T> => !!array && array.length > 0;

// ✅
if (isNonEmpty(collection)) {
  const first = collection[0];
  // ...
}

----------------------------------------

TITLE: Ensuring Request Isolation (ESM)
DESCRIPTION: Example of how to ensure request isolation in non-HTTP scenarios using Sentry.withIsolationScope() in ES6 module syntax. This replaces the previous Sentry.runWithAsyncContext method.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

function myScheduledJob() {
  return Sentry.withIsolationScope(async () => {
    await doSomething();
    await doSomethingElse();
    return { status: "DONE" };
  });
}

----------------------------------------

TITLE: Configuring RestTemplate with Sentry Span Interceptor (Spring 6)
DESCRIPTION: This snippet demonstrates how to configure a RestTemplate bean with SentrySpanClientHttpRequestInterceptor to create spans for outgoing HTTP requests in Spring 6 applications.

LANGUAGE: java
CODE:
import io.sentry.IHub;
import io.sentry.spring.jakarta.tracing.SentrySpanClientHttpRequestInterceptor;
import java.util.Collections;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriTemplateHandler;

@Configuration
class AppConfig {

  @Bean
  RestTemplate restTemplate(IHub hub) {
    RestTemplate restTemplate = new RestTemplate();
    SentrySpanClientHttpRequestInterceptor sentryRestTemplateInterceptor =
        new SentrySpanClientHttpRequestInterceptor(hub);
    restTemplate.setInterceptors(Collections.singletonList(sentryRestTemplateInterceptor));
    return restTemplate;
  }
}

LANGUAGE: kotlin
CODE:
import io.sentry.IHub
import io.sentry.spring.jakarta.tracing.SentrySpanClientHttpRequestInterceptor
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.web.client.RestTemplate
import org.springframework.web.util.UriTemplateHandler

@Configuration
class AppConfig {

  @Bean
  fun restTemplate(hub: IHub): RestTemplate {
    val sentryRestTemplateInterceptor = SentrySpanClientHttpRequestInterceptor(hub)

    return RestTemplate().apply {
      interceptors = listOf(sentryRestTemplateInterceptor)
    }
  }
}

----------------------------------------

TITLE: Configuring Sentry Dart Plugin Settings
DESCRIPTION: Basic configuration for Sentry Dart Plugin including project details, authentication, and optional features for source context and source maps.

LANGUAGE: yaml
CODE:
sentry:
  project: ___PROJECT_SLUG___
  org: ___ORG_SLUG___
  auth_token: ___ORG_AUTH_TOKEN___
  # Disable automatic upload of debug symbols
  # upload_debug_symbols: false
  # Enable source context
  upload_source_context: true
  # Enable source maps
  upload_source_maps: true

----------------------------------------

TITLE: Initializing Sentry with BrowserTracing Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the BrowserTracing integration enabled. It sets up trace propagation targets to handle CORS issues and configures a 100% sample rate for development purposes.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  // Capture 100% of spans. This is useful for development and debugging. Consider reducing in production or using traceSampler
  tracesSampleRate: 1.0,
  tracePropagationTargets: ["https://myproject.org", /^\/api\//],
});

----------------------------------------

TITLE: Creating Sentry Transaction with Custom Sampling Context in Kotlin
DESCRIPTION: This snippet demonstrates how to create a custom sampling context, set transaction options, and start a transaction in Sentry using Kotlin. It shows setting context values that won't be recorded and transaction description that will be recorded.

LANGUAGE: kotlin
CODE:
import io.sentry.CustomSamplingContext
import io.sentry.Sentry
import io.sentry.TransactionOptions

// sampling context - won't be recorded
val context = CustomSamplingContext().apply {
  this["user_id"] = 12312012
  this["search_results"] = searchResults
}

val txOptions = TransactionOptions().apply {
  customSamplingContext = context
}

val transaction = Sentry.startTransaction("GET /search", "http.server", txOptions).apply {
  // transaction context - will be recorded on transaction
  description = "search results"
}

----------------------------------------

TITLE: Setting Custom IP Address in Sentry React Native
DESCRIPTION: This code snippet demonstrates how to override the default IP address sent to Sentry with a custom value. This can be used to disable sending the user's actual IP address.

LANGUAGE: javascript
CODE:
Sentry.setUser({ip_address: '0.0.0.0'});

----------------------------------------

TITLE: Uploading Source Maps with Expo Plugin
DESCRIPTION: Command to upload source maps for all platforms using the Sentry Expo plugin with authentication token.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___ \
npx sentry-expo-upload-sourcemaps dist

----------------------------------------

TITLE: Calculating Layout Shift Score
DESCRIPTION: Formula for calculating the layout shift score used in Cumulative Layout Shift (CLS) metric. The score is determined by multiplying the impact fraction (visible area affected) by the distance fraction (movement relative to viewport).

LANGUAGE: plaintext
CODE:
Layout Shift Score = Impact Fraction * Distance Fraction

----------------------------------------

TITLE: Instrumenting Cache Put Operations
DESCRIPTION: Example of manually instrumenting cache write operations using Sentry spans, including key metadata and performance metrics.

LANGUAGE: javascript
CODE:
const key = "myCacheKey123";
const value = "The value I want to cache";

Sentry.startSpan(
  {
    name: key,
    attributes: {
      "cache.key": [key],
      "cache.item_size": JSON.stringify(value).length,
      "network.peer.address": "cache.example.com/supercache",
      "network.peer.port": 9000,
    },
    op: "cache.put",
  },
  (span) => {
    // Set a key in your caching using your custom caching solution
    my_caching.set(key, value);
  }
);

----------------------------------------

TITLE: Creating dSYM File for Apple Platforms
DESCRIPTION: This command creates a dSYM file from a compiled output file (executable or dynamic library) on Apple platforms using the dsymutil tool.

LANGUAGE: bash
CODE:
dsymutil /path/to/output[.dylib]

----------------------------------------

TITLE: User Report Data Structure
DESCRIPTION: Defines the structure of a user report object with required event_id and optional user information fields.

LANGUAGE: pseudo-code
CODE:
user_report = {
	"event_id": <required UUID str>,
	"email": <optional str>,
	"name": <optional str>,
	"comments": <optional str>,
}

----------------------------------------

TITLE: Demonstrating View Hierarchy Mapping for React Native on iOS
DESCRIPTION: This snippet shows how React Native components map to native UIKit components in the view hierarchy on iOS.

LANGUAGE: javascript
CODE:
                                 // UIWindow
                                 // RCTRootContentView
                                 // ...
function MyComponent() {
  return (
    <View testID='id'>           // RTCView - id
      <Text>Hello World!</Text>  // RCTTextView
    </View>
  );
}

----------------------------------------

TITLE: Configuring Hermes Profiling Integration in JavaScript
DESCRIPTION: Advanced configuration for React Native profiling options using hermesProfilingIntegration. Shows how to disable platform profilers to profile only JS code executed in Hermes engine.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [
    Sentry.hermesProfilingIntegration({
      platformProfilers: false,
    }),
  ],
});

----------------------------------------

TITLE: Installing Sentry SDK for Ember.js using ember-cli
DESCRIPTION: Command to install the official Sentry SDK package for Ember.js applications using the ember-cli package manager. This will add @sentry/ember as a project dependency and set up the necessary configurations.

LANGUAGE: bash
CODE:
ember install @sentry/ember

----------------------------------------

TITLE: Configuring Sentry Properties File
DESCRIPTION: Create a sentry.properties file with project and authentication information.

LANGUAGE: bash
CODE:
defaults.project=___PROJECT_SLUG___
defaults.org=___ORG_SLUG___
auth.token=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Creating a Test API Route for Tracing
DESCRIPTION: Implements a faulty API route to test Sentry's error monitoring and tracing capabilities.

LANGUAGE: TypeScript
CODE:
import { json } from "@tanstack/react-start";
import { createAPIFileRoute } from "@tanstack/react-start/api";

// A faulty API route to test Sentry's error monitoring
export const APIRoute = createAPIFileRoute("/api/sentry-example-api")({
  GET: ({ request, params }) => {
    throw new Error("Sentry Example API Route Error");
    return json({ message: "Testing Sentry Error..." });
  },
});

----------------------------------------

TITLE: Setting User Email in Sentry using Java
DESCRIPTION: This snippet demonstrates how to create a User object, set the user's email, and configure Sentry with the user information using Java. It requires the Sentry SDK for Java to be properly initialized.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.protocol.User;

User user = new User();
user.setEmail("jane.doe@example.com");
Sentry.setUser(user);

----------------------------------------

TITLE: Basic Error Capture with Sentry in Java
DESCRIPTION: Demonstrates initialization and basic error capture using both static and instance-based Sentry APIs in Java. Includes context management, breadcrumb recording, and exception handling.

LANGUAGE: java
CODE:
import io.sentry.context.Context;
import io.sentry.event.BreadcrumbBuilder;
import io.sentry.event.UserBuilder;

public class MyClass {
  private static SentryClient sentry;

  public static void main(String... args) {
    Sentry.init();
    sentry = SentryClientFactory.sentryClient();

    MyClass myClass = new MyClass();
    myClass.logWithStaticAPI();
    myClass.logWithInstanceAPI();
  }

  void unsafeMethod() {
    throw new UnsupportedOperationException("You shouldn't call this!");
  }

  void logWithStaticAPI() {
    Sentry.getContext().recordBreadcrumb(
        new BreadcrumbBuilder().setMessage("User made an action").build()
    );

    Sentry.getContext().setUser(
        new UserBuilder().setEmail("hello@sentry.io").build()
    );

    Sentry.getContext().addExtra("extra", "thing");
    Sentry.getContext().addTag("tagName", "tagValue");
    Sentry.capture("This is a test");

    try {
      unsafeMethod();
    } catch (Exception e) {
      Sentry.capture(e);
    }
  }

  void logWithInstanceAPI() {
    Context context = sentry.getContext();
    context.recordBreadcrumb(new BreadcrumbBuilder().setMessage("User made an action").build());
    context.setUser(new UserBuilder().setEmail("hello@sentry.io").build());
    sentry.sendMessage("This is a test");

    try {
      unsafeMethod();
    } catch (Exception e) {
      sentry.sendException(e);
    }
  }
}

----------------------------------------

TITLE: Full Sentry Envelope Example with Multiple Items
DESCRIPTION: Illustrates a complete Envelope structure with two items: an attachment and an event. It shows headers, item definitions, and payloads.

LANGUAGE: text
CODE:
{"event_id":"9ec79c33ec9942ab8353589fcb2e04dc","dsn":"https://e12d836b15bb49d7bbf99e64295d995b:@sentry.io/42"}
{"type":"attachment","length":10,"content_type":"text/plain","filename":"hello.txt"}
\xef\xbb\xbfHello\r\n
{"type":"event","length":41,"content_type":"application/json","filename":"application.log"}
{"message":"hello world","level":"error"}


----------------------------------------

TITLE: Enabling Recursive Event Scrubbing in Sentry SDK for Python
DESCRIPTION: This example demonstrates how to initialize the Sentry SDK with recursive event scrubbing enabled. This configuration allows the scrubber to search recursively through the event data for sensitive information, which may impact performance.

LANGUAGE: python
CODE:
from sentry_sdk.scrubber import EventScrubber

sentry_sdk.init(
    # ...
    send_default_pii=False,
    event_scrubber=EventScrubber(recursive=True),
)

----------------------------------------

TITLE: Configuring Sentry User Scope in Kotlin
DESCRIPTION: Sets up Sentry scope with custom tags and user information using Kotlin. Uses Kotlin's apply function to configure a User object with ID and email, then adds it to the Sentry scope along with a custom tag.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.protocol.User

Sentry.configureScope { scope ->
  scope.setTag("my-tag", "my value")
  scope.user = User().apply {
    id = "42"
    email = "john.doe@example.com"
  }
}

----------------------------------------

TITLE: Configuring Masking in Session Replay
DESCRIPTION: Demonstrates how to configure masking rules for specific DOM elements using CSS selectors. Allows specifying which elements should be masked or unmasked during session recording.

LANGUAGE: javascript
CODE:
replayIntegration({
  mask: [".mask-me"],
  unmask: [".unmask-me"],
})

----------------------------------------

TITLE: Rendering Alert Component in JSX
DESCRIPTION: Displays a warning alert about the end of Metrics beta program on October 7th, including a link to learn more about upcoming API changes.

LANGUAGE: jsx
CODE:
<Alert level="warning" title="The Metrics beta has ended on October 7th">
Thank you for participating in our Metrics beta program. After careful consideration, we have ended the beta program and retired the current Metrics solution. We're actively developing a new solution that will make tracking and debugging any issues in your application easier. [Learn more](https://sentry.zendesk.com/hc/en-us/articles/26369339769883-Upcoming-API-Changes-to-Metrics).
</Alert>

----------------------------------------

TITLE: Installing Sentry Servlet via Maven
DESCRIPTION: Maven dependency configuration for adding Sentry servlet integration to a Java web application. The dependency provides automatic HTTP request tracking and event enhancement.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-servlet</artifactId>
    <version>{{@inject packages.version('sentry.java.servlet', '4.1.0') }}</version>
</dependency>

----------------------------------------

TITLE: Initializing Sentry with View Hierarchy Attachment in Kotlin Multiplatform
DESCRIPTION: This code snippet demonstrates how to initialize Sentry in a Kotlin Multiplatform project. It sets the DSN and enables view hierarchy attachment. Note that this feature is currently only available on iOS and Android.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.sentry

Sentry.init { options ->
  options.dsn = "___PUBLIC_DSN___"
  options.attachViewHierarchy = true
}

----------------------------------------

TITLE: Using @SentryTransaction Annotation in Spring 6 (Java)
DESCRIPTION: Example of using @SentryTransaction annotation to create a transaction for a scheduled job in Spring 6 Java application.

LANGUAGE: java
CODE:
import org.springframework.stereotype.Component;
import org.springframework.scheduling.annotation.Scheduled;
import io.sentry.spring.jakarta.tracing.SentryTransaction;

@Component
class ScheduledJob {

  @Scheduled(...)
  @SentryTransaction(operation = "task")
  void execute() {
    ...
  }
}

----------------------------------------

TITLE: Configuring Sentry Ignore Rules
DESCRIPTION: This code block shows a comprehensive list of ignore rules for Sentry, including common errors from plugins, extensions, and third-party services.

LANGUAGE: javascript
CODE:
const sentryOptions = {
  ignoreErrors: [
    // Random plugins/extensions
    "top.GLOBALS",
    // See: http://blog.errorception.com/2012/03/tale-of-unfindable-js-error.html
    "originalCreateNotification",
    "canvas.contentDocument",
    "MyApp_RemoveAllHighlights",
    "http://tt.epicplay.com",
    "Can't find variable: ZiteReader",
    "jigsaw is not defined",
    "ComboSearch is not defined",
    "http://loading.retry.widdit.com/",
    "atomicFindClose",
    // Facebook borked
    "fb_xd_fragment",
    // ISP "optimizing" proxy - `Cache-Control: no-transform` seems to reduce this. (thanks @acdha)
    // See http://stackoverflow.com/questions/4113268/how-to-stop-javascript-injection-from-vodafone-proxy
    "bmi_SafeAddOnload",
    "EBCallBackMessageReceived",
    // See http://toolbar.conduit.com/Developer/HtmlAndGadget/Methods/JSInjection.aspx
    "conduitPage",
    // Generic error code from errors outside the security sandbox
    // You can delete this if using raven.js > 1.0, which ignores these automatically.
    "Script error.",
    // Avast extension error
    "_avast_submit",
  ],
  denyUrls: [
    // Google Adsense
    /pagead\/js/i,
    // Facebook flakiness
    /graph\.facebook\.com/i,
    // Facebook blocked
    /connect\.facebook\.net\/en_US\/all\.js/i,
    // Woopra flakiness
    /eatdifferent\.com\.woopra-ns\.com/i,
    /static\.woopra\.com\/js\/woopra\.js/i,
    // Chrome extensions
    /extensions\//i,
    /^chrome:\/\//i,
    /^chrome-extension:\/\//i,
    // Other plugins
    /127\.0\.0\.1:4001\/isrunning/i, // Cacaoweb
    /webappstoolbarba\.texthelp\.com\//i,
    /metrics\.itunes\.apple\.com\.edgesuite\.net\//i,
  ],
};

----------------------------------------

TITLE: Implementing Complete Isar Database Operations with Sentry
DESCRIPTION: Comprehensive example demonstrating Isar database operations (insert, update, get, delete) with Sentry transaction tracking.

LANGUAGE: dart
CODE:
import 'package:path_provider/path_provider.dart';
import 'package:sentry_flutter/sentry_flutter.dart';
import 'package:sentry_isar/sentry_isar.dart';

import 'user.dart'; // Import your Isar model instead

Future<void> runApp() async {
  final tr = Sentry.startTransaction('isarTest', 'db', bindToScope: true);

  final dir = await getApplicationDocumentsDirectory();

  final isar = await SentryIsar.open(
    [UserSchema],
    directory: dir.path,
  );

  final newUser = User()
    ..name = 'Joe Dirt'
    ..age = 36;

  await isar.writeTxn(() async {
    await isar.users.put(newUser); // insert & update
  });

  final existingUser = await isar.users.get(newUser.id); // get

  await isar.writeTxn(() async {
    await isar.users.delete(existingUser!.id); // delete
  });

  await tr.finish(status: const SpanStatus.ok());
}

----------------------------------------

TITLE: Feature Flag Testing in Python
DESCRIPTION: Example of testing with feature flags and options using context managers.

LANGUAGE: python
CODE:
def test_success(self):
    with self.feature('organization:new-thing'):
        with self.options({'option': 'value'}):
            # Run test logic with features and options set.

    # Disable the new-thing feature.
    with self.feature({'organization:new-thing': False}):
        # Run you logic with a feature off.

----------------------------------------

TITLE: Using Wildcards in Sentry Search
DESCRIPTION: Examples of using the wildcard operator (*) in Sentry search queries. Shows how to match partial strings in browser versions and how to combine wildcards with exclusion.

LANGUAGE: plaintext
CODE:
browser:"Safari 11*"

!message:"*Timeout"

----------------------------------------

TITLE: Configuring Sentry Release
DESCRIPTION: Add this script before the Sentry Loader Script to configure the release version for your application.

LANGUAGE: html
CODE:
<script>
  window.SENTRY_RELEASE = {
    id: "...",
  };
</script>

----------------------------------------

TITLE: Configuring GitHub App Private Key in YAML
DESCRIPTION: Sets up the private key for GitHub App integration in Sentry using multiline YAML.

LANGUAGE: yaml
CODE:
github-app.private-key: |
  -----BEGIN RSA PRIVATE KEY-----
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  privatekeyprivatekeyprivatekeyprivatekey
  -----END RSA PRIVATE KEY-----

----------------------------------------

TITLE: Using Sentry CLI Bash Hook
DESCRIPTION: Demonstrates how to use the sentry-cli bash hook for automatic error sending in bash scripts.

LANGUAGE: bash
CODE:
#!/bin/bash
export SENTRY_DSN='___PUBLIC_DSN___'
eval "$(sentry-cli bash-hook)"
# rest of the script goes here

----------------------------------------

TITLE: Setting Start Timestamp in JSON (Unix Epoch)
DESCRIPTION: Demonstrates specifying the required start_timestamp attribute using a Unix epoch timestamp.

LANGUAGE: json
CODE:
{
  "start_timestamp": 1304358096.242
}

----------------------------------------

TITLE: Initializing Sentry for Electron Main Process in JavaScript
DESCRIPTION: This code imports the Sentry module for Electron's main process and initializes it with the 'test' environment. This setup enables error tracking and monitoring for the Electron application's main process.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  environment: "test",
});

----------------------------------------

TITLE: Configuring Sentry SDK with Additional Options in Python
DESCRIPTION: Initialize Sentry SDK with the send_default_pii option set to True to capture request and response payloads for GraphQL errors. This configuration allows for more detailed error reporting but may include sensitive data.

LANGUAGE: python
CODE:
sentry_sdk.init(
    # same options as above
    send_default_pii=True,
)

----------------------------------------

TITLE: Configuring Sentry SDK with Additional Options in Python
DESCRIPTION: Initialize Sentry SDK with the send_default_pii option set to True to capture request and response payloads for GraphQL errors. This configuration allows for more detailed error reporting but may include sensitive data.

LANGUAGE: python
CODE:
sentry_sdk.init(
    # same options as above
    send_default_pii=True,
)

----------------------------------------

TITLE: Configuring Sentry Exception Resolver
DESCRIPTION: Setting up the SentryExceptionResolver to capture and report controller exceptions to Sentry through Spring configuration.

LANGUAGE: xml
CODE:
<bean class="io.sentry.spring.SentryExceptionResolver"/>

LANGUAGE: java
CODE:
@Bean
public HandlerExceptionResolver sentryExceptionResolver() {
  return new io.sentry.spring.SentryExceptionResolver();
}

LANGUAGE: kotlin
CODE:
@Bean
fun sentryExceptionResolver(): HandlerExceptionResolver {
  return io.sentry.spring.SentryExceptionResolver()
}

----------------------------------------

TITLE: Disabling Client Reports in Sentry SDK for Dart
DESCRIPTION: This snippet demonstrates how to disable the sendClientReports feature in Sentry SDK version 6.6.x and above. It initializes Sentry with a custom option to set sendClientReports to false.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Future<void> main() async {
  await Sentry.init((options) => options.sendClientReports = false;
}

----------------------------------------

TITLE: Capturing Error Message with Sentry in Java
DESCRIPTION: This snippet shows how to use the Sentry SDK to capture an error message in a Java application. It imports the Sentry class and uses the captureMessage method to log a custom error message.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.captureMessage("Something went wrong");

----------------------------------------

TITLE: Disabling Activity Instrumentation in Android Manifest
DESCRIPTION: XML configuration to disable the automatic Activity instrumentation by setting a metadata flag in AndroidManifest.xml.

LANGUAGE: xml
CODE:
<application>
    <meta-data android:name="io.sentry.traces.activity.enable" android:value="false" />
</application>

----------------------------------------

TITLE: Creating Manual HTTP Span with OpenTelemetry in Kotlin
DESCRIPTION: Shows the Kotlin implementation of manually creating an OpenTelemetry span for HTTP requests with required attributes for Sentry integration

LANGUAGE: kotlin
CODE:
val span = tracer.spanBuilder("myspan")
  .setAttribute(HTTP_REQUEST_METHOD, "GET")
  .setSpanKind(SpanKind.SERVER)
  .startSpan()

----------------------------------------

TITLE: Using beforeSendTransaction in JavaScript Sentry SDK
DESCRIPTION: Implement a beforeSendTransaction callback to filter or modify transaction events before they are sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSendTransaction(event) {
    if (event.transaction === "health_check") {
      return null;
    }
    return event;
  },
});

----------------------------------------

TITLE: Disabling Activity Instrumentation in Android Manifest
DESCRIPTION: XML configuration to disable the automatic Activity instrumentation by setting a metadata flag in AndroidManifest.xml.

LANGUAGE: xml
CODE:
<application>
    <meta-data android:name="io.sentry.traces.activity.enable" android:value="false" />
</application>

----------------------------------------

TITLE: Configuring Django NodeStorage Backend in Python
DESCRIPTION: Configuration settings for the default Django-based nodestore backend. This backend stores gzipped JSON blobs in the 'nodestore_node' database table and requires no additional options.

LANGUAGE: python
CODE:
SENTRY_NODESTORE = 'sentry.nodestore.django.DjangoNodeStorage'
SENTRY_NODESTORE_OPTIONS = {}

----------------------------------------

TITLE: Importing Sentry SDK for Ember
DESCRIPTION: Imports all exports from the @sentry/ember package using the namespace alias 'Sentry'. This import enables error tracking and monitoring functionality in an Ember.js application.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/ember";

----------------------------------------

TITLE: Accessing A/B Test Experiment Value in Backend Python for Sentry
DESCRIPTION: This Python code snippet demonstrates how to access the assigned value of an A/B test experiment in Sentry's backend. It uses the experiment manager to retrieve the value for a specific organization and user.

LANGUAGE: python
CODE:
from sentry.experiments import manager as expt_manager

# gets the value of assigned for ExampleMultiChoiceExperiment
exposed = expt_manager.get("ExampleMultiChoiceExperiment", org=org, actor=user)

----------------------------------------

TITLE: Configuring Manual Session Tracking in Sentry Native SDK (C)
DESCRIPTION: This snippet demonstrates how to disable automatic session tracking and manually manage sessions using the Sentry Native SDK. It shows SDK initialization with custom options and explicit session start/end calls.

LANGUAGE: c
CODE:
sentry_options_t *options = sentry_options_new();
sentry_options_set_release(options, "my-project-name@2.3.12");
sentry_options_set_auto_session_tracking(options, 0);
sentry_init(options);

// ...

sentry_start_session();
// Operations covered by the session go here.
sentry_end_session();

----------------------------------------

TITLE: Removing User Data in Sentry SDK (Swift)
DESCRIPTION: This Swift code snippet demonstrates how to remove the current user data from the Sentry SDK. It imports the Sentry module and uses the SentrySDK.setUser() method with a nil parameter to clear the user information.

LANGUAGE: Swift
CODE:
import Sentry

SentrySDK.setUser(nil)

----------------------------------------

TITLE: Configuring Sentry Bundler Plugins on Version 2.x
DESCRIPTION: Example configuration for Sentry bundler plugins (webpack, vite, esbuild, rollup) on version 2.x to upload legacy source maps.

LANGUAGE: javascript
CODE:
const { sentryWebpackPlugin } = require("@sentry/webpack-plugin");

module.exports = {
  // ... other config above ...

  devtool: "source-map", // Source map generation must be turned on
  plugins: [
    sentryWebpackPlugin({
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",

      // Auth tokens can be obtained from your User Settings
      // and need `project:releases` and `org:read` scopes
      authToken: process.env.SENTRY_AUTH_TOKEN,

      release: {
        uploadLegacySourcemaps: {
          paths: ["."],
          ignore: ["./node_modules"],
        },
      },
    }),
  ],
};

----------------------------------------

TITLE: Access Request Alert Component
DESCRIPTION: React/JSX component with a link to documentation about requesting access.

LANGUAGE: jsx
CODE:
<Alert>
  Bonus: where it makes sense, consider <Link href="https://blog.sentry.io/how-we-grew-sentrys-monthly-active-users-by-rethinking-invitations/" remote>prompting the user to request access</Link>.
</Alert>

----------------------------------------

TITLE: Initializing Sentry Flutter SDK with View Hierarchy
DESCRIPTION: Initializes the Sentry Flutter SDK with view hierarchy attachment enabled. This configuration allows Sentry to capture and attach view hierarchy information to crash reports and errors, which helps in debugging UI-related issues.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.attachViewHierarchy = true;
});

----------------------------------------

TITLE: Xcode Build Phase Upload Scripts
DESCRIPTION: Bash scripts for uploading dSYMs during Xcode build phase. Includes warning and error handling versions with source context support.

LANGUAGE: bash
CODE:
if [[ "$(uname -m)" == arm64 ]]; then
    export PATH="/opt/homebrew/bin:$PATH"
fi

if which sentry-cli >/dev/null; then
export SENTRY_ORG=___ORG_SLUG___
export SENTRY_PROJECT=___PROJECT_SLUG___
export SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___
ERROR=$(sentry-cli debug-files upload \
--include-sources \
"$DWARF_DSYM_FOLDER_PATH" 2>&1 >/dev/null)
if [ ! $? -eq 0 ]; then
echo "warning: sentry-cli - $ERROR"
fi
else
echo "warning: sentry-cli not installed, download from https://github.com/getsentry/sentry-cli/releases"
fi

LANGUAGE: bash
CODE:
if [[ "$(uname -m)" == arm64 ]]; then
    export PATH="/opt/homebrew/bin:$PATH"
fi

if which sentry-cli >/dev/null; then
export SENTRY_ORG=___ORG_SLUG___
export SENTRY_PROJECT=___PROJECT_SLUG___
export SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___
ERROR=$(sentry-cli debug-files upload \
--include-sources \
"$DWARF_DSYM_FOLDER_PATH" --force-foreground 2>&1 >/dev/null)
if [ ! $? -eq 0 ]; then
echo "error: sentry-cli - $ERROR"
fi
else
echo "error: sentry-cli not installed, download from https://github.com/getsentry/sentry-cli/releases"
fi

----------------------------------------

TITLE: Configuring App Hang Timeout in Sentry React Native
DESCRIPTION: This snippet shows how to adjust the timeout interval for app hang detection when initializing Sentry in a React Native application. It sets the 'appHangTimeoutInterval' option to 1 second.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "DSN",
  appHangTimeoutInterval: 1,
});

----------------------------------------

TITLE: Capturing a Message with Sentry in Ruby
DESCRIPTION: This snippet demonstrates how to capture a simple message using the Sentry SDK in Ruby. It uses the capture_message method to send a test message to the Sentry service for logging and monitoring purposes.

LANGUAGE: ruby
CODE:
Sentry.capture_message("test message")

----------------------------------------

TITLE: Injecting Tracing Information into Rendered HTML in Python
DESCRIPTION: This example demonstrates how to inject tracing information as HTML meta tags into rendered HTML. It uses the Sentry SDK's get_traceparent() and get_baggage() functions to generate the necessary trace and baggage data.

LANGUAGE: python
CODE:
import sentry_sdk
from my_project import render

meta = ""
meta += '<meta name="sentry-trace" content="%s">' % sentry_sdk.get_traceparent()
meta += '<meta name="baggage" content="%s">' % sentry_sdk.get_baggage()

html = """
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        {additional_meta}
    </head>
    <body>
        <p>This is a website.</p>
    </body>
</html>
""".format(additional_meta=meta)

render(html)

----------------------------------------

TITLE: Integrating Sentry Crash-Report Modal for User Feedback in JavaScript
DESCRIPTION: This code snippet demonstrates how to integrate the Sentry Crash-Report modal into a web application. It initializes the Sentry SDK and shows the user feedback dialog when an error occurs, using the public DSN and generated Event ID.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="user-feedback/example-widget/" />

----------------------------------------

TITLE: Source Map with Debug ID Fields
DESCRIPTION: Example of a source map file containing Debug ID fields. Both debug_id and debugId fields are included for compatibility purposes.

LANGUAGE: json
CODE:
{
  "version": 3,
  "file": "index.js",
  "sources": [],
  "sourcesContent": [],
  "names": [],
  "mappings": "...",
  "debug_id": "85314830-023f-4cf1-a267-535f4e37bb17",
  "debugId": "85314830-023f-4cf1-a267-535f4e37bb17"
}

----------------------------------------

TITLE: Setting Tags and User Information with Sentry Native SDK in C
DESCRIPTION: This code snippet demonstrates how to use the Sentry Native SDK to set a tag and create a user object with id and email information. It showcases the usage of sentry_set_tag(), sentry_value_new_object(), sentry_value_set_by_key(), and sentry_set_user() functions.

LANGUAGE: c
CODE:
#include <sentry.h>

sentry_set_tag("my-tag", "my value");

sentry_value_t user = sentry_value_new_object();
sentry_value_set_by_key(user, "id", sentry_value_new_int32(42));
sentry_value_set_by_key(user, "email", sentry_value_new_string("john.doe@example.com"));
sentry_set_user(user);

----------------------------------------

TITLE: Initializing Attachments with Bytes
DESCRIPTION: Shows how to create an attachment using raw bytes instead of a file path, requiring a filename specification.

LANGUAGE: markup
CODE:
<PlatformContent includePath="enriching-events/attachment-init-with-bytes" />

----------------------------------------

TITLE: MDX Component Usage
DESCRIPTION: Example of using an MDX component for displaying a page grid layout.

LANGUAGE: mdx
CODE:
<PageGrid />

----------------------------------------

TITLE: Public Image Reference - Relative Path
DESCRIPTION: Example of referencing a public image using a relative path.

LANGUAGE: markdown
CODE:
![Issue alert](issue-alert.png)

----------------------------------------

TITLE: Handling Failed Queue Jobs with Sentry in Laravel
DESCRIPTION: This example shows how to report exceptions to Sentry when a queue job fails in Laravel. It's implemented in the failed method of a job class.

LANGUAGE: php
CODE:
public function failed(\Exception $exception)
{
    // Send user notification of failure, etc...

    if (app()->bound('sentry')) {
        app('sentry')->captureException($exception);
    }
}

----------------------------------------

TITLE: Setting Clang Build ID Flags
DESCRIPTION: Compiler flags for configuring build identifiers in Clang. Two options are provided: a fast random UUID or a reproducible SHA1 hash of the code section.

LANGUAGE: bash
CODE:
--build-id=uuid

LANGUAGE: bash
CODE:
--build-id=sha1

----------------------------------------

TITLE: HMAC SHA256 Signature Generation in Python
DESCRIPTION: Function that generates a HMAC SHA256 hex digest used for authenticating webhook payloads in Sentry's feature flag system. Takes a secret key and message as input and returns the hexadecimal digest.

LANGUAGE: python
CODE:
def hmac_sha256_hex_digest(secret: str, message: bytes):
    return hmac.new(secret.encode(), message, hashlib.sha256).hexdigest()

----------------------------------------

TITLE: Setting NODE_OPTIONS for Sentry Import in Production
DESCRIPTION: Environment variable configuration to set the --import flag for Sentry initialization in production environments. This method is useful when direct CLI flags cannot be used.

LANGUAGE: bash
CODE:
NODE_OPTIONS='--import .output/server/sentry.server.config.mjs'

----------------------------------------

TITLE: Using @SentryTransaction Annotation in Spring 6 (Kotlin)
DESCRIPTION: Example of using @SentryTransaction annotation to create a transaction for a scheduled job in Spring 6 Kotlin application.

LANGUAGE: kotlin
CODE:
import org.springframework.stereotype.Component
import org.springframework.scheduling.annotation.Scheduled
import io.sentry.spring.jakarta.tracing.SentryTransaction

@Component
class ScheduledJob {

  @Scheduled(...)
  @SentryTransaction(operation = "task")
  fun execute() {
    ...
  }
}

----------------------------------------

TITLE: Installing Sentry Svelte SDK with npm
DESCRIPTION: Command to install the @sentry/svelte package using npm. This package includes the User Feedback integration.

LANGUAGE: bash
CODE:
npm install @sentry/svelte --save

----------------------------------------

TITLE: Capturing Custom Messages with Sentry SDK
DESCRIPTION: Use sentry_sdk.capture_message() to send custom messages to Sentry for debugging purposes.

LANGUAGE: python
CODE:
sentry_sdk.capture_message("You caught me!")

----------------------------------------

TITLE: Creating Sentry Attachment in Swift
DESCRIPTION: This snippet demonstrates how to create a Sentry attachment in Swift. It imports the Sentry module and initializes an Attachment object with data and a filename.

LANGUAGE: Swift
CODE:
import Sentry

let attachment = Attachment(data: data, filename: "file.log")

----------------------------------------

TITLE: Initializing Sentry with Custom Trace Sampling in PHP
DESCRIPTION: This code initializes Sentry with a public DSN and configures trace sampling. It demonstrates setting a fixed sample rate and providing a custom sampler function.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    // Specify a fixed sample rate:
    'traces_sample_rate' => 0.2,
    // Or provide a custom sampler:
    'traces_sampler' => function (\Sentry\Tracing\SamplingContext $context): float {
        // return a number between 0 and 1
    },
]);

----------------------------------------

TITLE: Implementing Sentry Loader v8 with Extra Error Data
DESCRIPTION: Sets up Sentry using the v8 loader script with lazy-loaded extra error data integration. Uses a single script approach with dynamic integration loading.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});
    Sentry.lazyLoadIntegration("extraErrorDataIntegration").then(
      (integration) => {
        Sentry.addIntegration(integration());
      }
    );
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Configuring Sentry Breadcrumb Handler in Ruby
DESCRIPTION: Demonstrates how to set up a before_breadcrumb handler in Sentry configuration that modifies breadcrumb messages. The handler receives a breadcrumb object and hint, allowing for custom modification or filtering of breadcrumb data before it's added to the buffer.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  # ...

  # this will be called before every breadcrumb is added to the breadcrumb buffer
  # you can use it to
  # - remove the data you don't want to send
  # - add additional info to the data
  config.before_breadcrumb = lambda do |breadcrumb, hint|
    breadcrumb.message = "foo"
    breadcrumb
  end
end

----------------------------------------

TITLE: Viewing Service Logs
DESCRIPTION: Command to view logs for any service managed by devservices.

LANGUAGE: shell
CODE:
devservices logs

----------------------------------------

TITLE: Configuring Express Server with Sentry
DESCRIPTION: Complete Express server setup with Sentry integration, including error handling middleware and routes configuration.

LANGUAGE: javascript
CODE:
require("./instrument.js");

const Sentry = require("@sentry/node");
const express = require("express");
const productsRoute = require('./routes/products');
const cors = require('cors')

const app = express();

app.use(express.static('public'));
app.use(cors());

app.get('/', (req, res) => {
    res.send('<h1>Hello, Express.js Server here!</h1>');
});

app.get("/products/debug-sentry", (req, res) => {
  console.log("Sentry Error thrown!");
  throw new Error("My first Sentry error!");
});

Sentry.setupExpressErrorHandler(app);

app.use(function onError(err, req, res, next) {
    console.log('500 error thrown!');
    res.statusCode = 500;
    res.end(res.sentry + "\n");
});

app.use('/products', productsRoute);

const port = 3001;

app.listen(port, () => {
   console.log(`Server is running on port 3001`);
});

----------------------------------------

TITLE: Configuring Custom Routing with Sentry Browser Tracing in JavaScript
DESCRIPTION: This code snippet demonstrates how to configure Sentry for custom routing. It disables automatic span creation, manually starts a pageload span, and instruments a custom router to create navigation spans. It also shows how to update span names and attributes based on route changes.

LANGUAGE: javascript
CODE:
const client = Sentry.init({
  integrations: [
    Sentry.browserTracingIntegration({
      // disable automatic span creation
      instrumentNavigation: false,
      instrumentPageLoad: false,
    }),
  ],
});

// We start the pageload span as early as possible!
let pageLoadSpan = Sentry.startBrowserTracingPageLoadSpan(client, {
  name: window.location.pathname,
  attributes: {
    [Sentry.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: "url",
  },
});

// Somewhere, instrument your router like this:
myRouter.on("routeChange", (route) => {
  // Make sure that the pageload span uses the route name
  // After that, each route change should trigger a navigation span (which will automatically finish the previous one)
  if (pageLoadSpan) {
    pageLoadSpan.updateName(route.name);
    pageLoadSpan.setAttribute(Sentry.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, "route");
    pageLoadSpan = undefined;
  } else {
    Sentry.startBrowserTracingNavigationSpan(client, {
      op: "navigation",
      name: route.name, // or what the name of the span should be
      attributes: {
        [Sentry.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: "route",
      },
    });
  }
});

----------------------------------------

TITLE: Using Data Selectors for Dynamic Styling
DESCRIPTION: Demonstrates how to use data attributes and CSS selectors for dynamic styling instead of passing custom props to styled components.

LANGUAGE: tsx
CODE:
import styled from '@emotion/styled';

const Label = styled('label')`
  color: inherit;
  &[data-is-error="true"] {
    color: ${p => p.theme.error400};
  }

  &:disabled {
    color: ${p => p.theme.gray200};
  }
`;

return <Label disabled={false} data-is-error={true}>There is an error</Label>;

----------------------------------------

TITLE: Demonstrating Data Scrubbing on JavaScript Object
DESCRIPTION: This snippet shows an example of a JavaScript object containing sensitive data that would be scrubbed by Sentry's default settings. The entire 'credentials' object would be set to null unless added to Safe Fields.

LANGUAGE: javascript
CODE:
credentials = {
  username: 'jane',
  cats: ['pancake', 'maple', 'hellboy']
  password: 'p4ssw0rd!',
  lastLogin: 'yesterday',
  ...
}

----------------------------------------

TITLE: Importing Client-Side Integrations from @sentry/astro
DESCRIPTION: Lists the available client-side integrations that have been moved from @sentry/integrations to @sentry/astro. These integrations are now implemented as functions rather than classes.

LANGUAGE: javascript
CODE:
import { httpClientIntegration, contextLinesIntegration, reportingObserverIntegration } from '@sentry/astro';

----------------------------------------

TITLE: Sentry Event ID Format Example in JSON
DESCRIPTION: Demonstrates the correct format for a Sentry event_id. The event_id must be a 32-character lowercase hexadecimal string representing a UUID4 value without dashes.

LANGUAGE: json
CODE:
{
    "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0"
  }

----------------------------------------

TITLE: Setting User Information in Sentry using Kotlin
DESCRIPTION: This snippet shows how to create a User object, set the user's email, and associate it with Sentry in Kotlin. It uses the Sentry SDK and Kotlin's apply function for a more concise syntax.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.protocol.User

val user = User().apply {
  email = "john.doe@example.com"
}
Sentry.setUser(user)

----------------------------------------

TITLE: Migrated Sentry Integration Functions
DESCRIPTION: Lists the integration functions that have been moved from @sentry/integrations to @sentry/node. These are now function-based implementations rather than class-based, with Dedupe enabled by default.

LANGUAGE: javascript
CODE:
// New imports from @sentry/node
captureConsoleIntegration   // formerly CaptureConsole
debugIntegration            // formerly Debug
extraErrorDataIntegration   // formerly ExtraErrorData
rewriteFramesIntegration    // formerly RewriteFrames
sessionTimingIntegration    // formerly SessionTiming
dedupeIntegration          // formerly Dedupe (enabled by default)

----------------------------------------

TITLE: Capturing File Operation Error with Sentry in Go
DESCRIPTION: Demonstrates how to capture a file operation error using Sentry's CaptureException function. The code shows error handling for file opening operation with os.Open and sending the error to Sentry if encountered.

LANGUAGE: go
CODE:
f, err := os.Open("filename.ext")
if err != nil {
	sentry.CaptureException(err)
}

----------------------------------------

TITLE: Configuring SentryNavigationObserver with GoRouter
DESCRIPTION: Implementation of SentryNavigationObserver using GoRouter for navigation.

LANGUAGE: dart
CODE:
import 'package:go_router/go_router.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

final router = GoRouter(
  routes: ...,
  observers: [SentryNavigatorObserver()],
);

----------------------------------------

TITLE: Creating Email Link in Markdown
DESCRIPTION: Shows how to create a clickable email address link, often used for Early Adopter or Beta features.

LANGUAGE: markdown
CODE:
For more information about access to Metric Alerts, feel free to reach out at [alerting-feedback@sentry.io](mailto:alerting-feedback@sentry.io).

----------------------------------------

TITLE: Practical Error Type Fingerprinting Example
DESCRIPTION: Shows how to group different types of errors together using fingerprint rules with error types and values.

LANGUAGE: bash
CODE:
error.type:DatabaseUnavailable -> system-down
error.type:ConnectionError -> system-down

error.value:"connection error: *" -> connection-error, {{ transaction }}

----------------------------------------

TITLE: Installing Sentry Quartz Integration with SBT
DESCRIPTION: Installation using SBT dependency configuration for Scala projects.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-quartz" % "6.30.0"

----------------------------------------

TITLE: Using UserEvent Over FireEvent in React Testing Library
DESCRIPTION: Demonstrates the preference for using userEvent over fireEvent for simulating user interactions more accurately in tests.

LANGUAGE: javascript
CODE:
// ❌
import {render, screen, fireEvent} from "sentry-test/reactTestingLibrary";
render(<Example />);
fireEvent.change(screen.getByLabelText("Search by name"), {
  target: { value: "sentry" },
});

// ✅
import {render, screen, userEvent} from "sentry-test/reactTestingLibrary";
render(<Example />);
userEvent.type(screen.getByLabelText("Search by name"), "sentry");

----------------------------------------

TITLE: Uploading WASM Debug Files with Sentry CLI
DESCRIPTION: Command line example showing how to upload WASM debug files to Sentry using sentry-cli. The command requires organization and project identifiers, and specifies the path to the debug file. The output shows the upload process status for multiple debug information files.

LANGUAGE: bash
CODE:
sentry-cli debug-files upload -o <org> -p <project> /path/to/myfile.debug.wasm

> Found 2 debug information files
> Prepared debug information files for upload
> Uploaded 2 missing debug information files
> File processing complete:

  PENDING 1ddb3423-950a-3646-b17b-d4360e6acfc9 (MyApp; x86_64 executable)
  PENDING 1ddb3423-950a-3646-b17b-d4360e6acfc9 (MyApp; x86_64 debug companion)

----------------------------------------

TITLE: Implementing Event Sampling in Python
DESCRIPTION: Example code showing how to implement event sampling by using a sample rate to determine whether to capture events.

LANGUAGE: python
CODE:
sample_rate = options.get('sample_rate', 1.0)

# assuming random() returns a value between 0.0 (inclusive) and 1.0 (exclusive)
if random() < sample_rate:
    transport.capture_event(event)

----------------------------------------

TITLE: Defining Textarea FormField Schema in JSON for Sentry Integration
DESCRIPTION: JSON schema for a Textarea FormField component. Similar to the Text field, it includes type, label, name, and default attributes. The default attribute can also use predefined options like issue.title and issue.description.

LANGUAGE: json
CODE:
{
  "type": "textarea",
  "label": <String>,
  "name": <String>,
  "default": <String>,
}

----------------------------------------

TITLE: Including Common Image Reference
DESCRIPTION: Example of including a common image reference in a documentation file.

LANGUAGE: markdown
CODE:
<Include name="common-imgs/tags" />

----------------------------------------

TITLE: Installing Sentry Gatsby SDK with npm
DESCRIPTION: Installs the Sentry Gatsby SDK package using npm package manager. The --save flag adds it to package.json dependencies.

LANGUAGE: bash
CODE:
npm install @sentry/gatsby --save

----------------------------------------

TITLE: Wrapping Remix Root Component with Sentry
DESCRIPTION: TypeScript code to wrap the Remix root component with Sentry for error catching and routing transactions.

LANGUAGE: typescript
CODE:
import {
  Links,
  LiveReload,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "@remix-run/react";

import { withSentry } from "@sentry/remix";

function App() {
  return (
    <html>
      <head>
        <Meta />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  );
}

export default withSentry(App);

----------------------------------------

TITLE: Configuring Sentry Plugin for Vite
DESCRIPTION: Demonstrates how to set up the Sentry plugin in a Vite configuration file using TypeScript. The plugin is configured with a custom application key for error tracking.

LANGUAGE: typescript
CODE:
// vite.config.ts
import { defineConfig } from "vite";
import { sentryVitePlugin } from "@sentry/vite-plugin";

export default defineConfig({
  plugins: [
    sentryVitePlugin({
      applicationKey: "your-custom-application-key",
    }),
  ],
});

----------------------------------------

TITLE: Javascript Array Search Example
DESCRIPTION: Comparison between a traditional for loop and Array.find() method for searching an array element, demonstrating code simplification opportunities during review.

LANGUAGE: javascript
CODE:
for (let i = 0; i < arr.length; i++) {
  if (arr[i] === 'thingiwant') return i;
}
return undefined;

LANGUAGE: javascript
CODE:
return arr.find(x => x === 'thingiwant');

----------------------------------------

TITLE: Defining Transaction Context and Custom Sampling in Sentry .NET SDK
DESCRIPTION: The .NET SDK for Sentry includes a TransactionContext class and a custom sampling context. The TransactionContext is defined in a separate file, while the custom sampling context is a dictionary mapping strings to objects.

LANGUAGE: C#
CODE:
// TransactionContext is defined in a separate file:
// https://github.com/getsentry/sentry-dotnet/blob/main/src/Sentry/TransactionContext.cs

// Custom sampling context:
Dictionary<string, object> customSamplingContext;

----------------------------------------

TITLE: Advanced Sentry Slog Usage
DESCRIPTION: Advanced example demonstrating custom context attributes, grouped logging, and error handling with the Sentry slog integration.

LANGUAGE: go
CODE:
logger := slog.New(sentryslog.Option{
	Level: slog.LevelDebug,
	AttrFromContext: []func(ctx context.Context) []slog.Attr{
		func(ctx context.Context) []slog.Attr {
			return []slog.Attr{slog.String("request_id", "123")}
		},
	},
}.NewSentryHandler())

logger = logger.With("release", "v1.0.0")

logger.
	With(
		slog.Group("user",
			slog.String("id", "user-123"),
			slog.Time("created_at", time.Now()),
		),
	).
	With("environment", "dev").
	With("error", fmt.Errorf("an error")).
	Error("a message")

----------------------------------------

TITLE: Adding Sentry Kotlin Compiler Plugin in Gradle (Kotlin)
DESCRIPTION: Gradle configuration using Kotlin DSL to add the Sentry Kotlin Compiler Plugin for Jetpack Compose support.

LANGUAGE: kotlin
CODE:
plugins {
  id("io.sentry.kotlin.compiler.gradle") version "{{@inject packages.version('sentry.kotlin.compiler-plugin', '3.7.0') }}"
}

----------------------------------------

TITLE: Tagging Exceptions with Sentry in Java
DESCRIPTION: This snippet demonstrates how to use Sentry.withScope to add a custom tag and set the log level for a captured exception in Java. It also shows an example of capturing an exception without custom tagging for comparison.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.SentryLevel;

Sentry.withScope(scope -> {
  scope.setTag("my-tag", "my value");
  scope.setLevel(SentryLevel.WARNING);

  // will be tagged with my-tag="my value"
  Sentry.captureException(new Exception("my error"));
});

// will not be tagged with my-tag
Sentry.captureException(new Exception("my error"));

----------------------------------------

TITLE: Installing Sentry Drift Dependency in Flutter
DESCRIPTION: Add the sentry_drift dependency to the pubspec.yaml file to install the Drift database instrumentation for Sentry in a Flutter project.

LANGUAGE: yaml
CODE:
dependencies:
sentry_flutter: ^{{@inject packages.version('sentry.dart.flutter', '7.13.1') }}
sentry_drift: ^{{@inject packages.version('sentry.dart.drift', '7.13.1') }}

----------------------------------------

TITLE: Setting Sentry Scope Tag in Go
DESCRIPTION: Configures Sentry scope by setting a custom tag for page locale. Uses the ConfigureScope function to modify the scope and add a page.locale tag with a specific locale value.

LANGUAGE: go
CODE:
sentry.ConfigureScope(func(scope *sentry.Scope) {
	scope.SetTag("page.locale", "de-at");
})

----------------------------------------

TITLE: Optimizing Regular Expression Unicode Matching in Rust
DESCRIPTION: Shows how to optimize regular expression matching by disabling Unicode support for specific groups when unnecessary.

LANGUAGE: rust
CODE:
[0-9A-Za-z_]

LANGUAGE: rust
CODE:
(?-u:\w)

----------------------------------------

TITLE: Installing Sentry Gradle Plugin for Java
DESCRIPTION: This snippet shows how to add the Sentry Gradle plugin to a Java project. The plugin enables automatic SDK installation and integrations.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.jvm.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.12.0') }}"
}

----------------------------------------

TITLE: Initializing Statsig and Sentry in Svelte
DESCRIPTION: This snippet demonstrates how to initialize both Statsig and Sentry in a Svelte application. It sets up the Statsig client, configures Sentry with the Statsig integration, and shows how to check a feature flag and capture an exception.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/svelte';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Rendering Team Plan Feature Alert in JSX
DESCRIPTION: A React alert component that displays a notification with a link to Sentry's pricing page, informing users that a feature requires a Team plan or higher subscription level.

LANGUAGE: jsx
CODE:
<Alert>

This feature is available only if your organization is on <a href="https://sentry.io/pricing/" target="_blank">a Team plan or higher</a>.

</Alert>

----------------------------------------

TITLE: Creating Release with Patch Data Using cURL
DESCRIPTION: Example cURL command demonstrating how to create a release with commit data using the Sentry API.

LANGUAGE: bash
CODE:
curl https://sentry.io/api/0/organizations/your-organization-name/releases/ \
  -X POST \
  -H 'Authorization: Bearer <Token>' \
  -H 'Content-Type: application/json' \
  -d '
 {
 "version": "2.0rc2",
 "projects":["project-1","project-2"],
 "commits":[
     {
        "patch_set": [
            {"path": "path/to/added-file.html", "type": "A"},
            {"path": "path/to/modified-file.html", "type": "M"},
            {"path": "path/to/deleted-file.html", "type": "D"}
        ],
        "repository": "owner-name/repo-name",
        "author_name": "Author Name",
        "author_email": "author_email@example.com",
        "timestamp": "2018-09-20T11:50:22+03:00",
        "message": "This is the commit message.",
        "id": "8371445ab8a9facd271df17038ff295a48accae7"
    }
 ]
 }
 '

----------------------------------------

TITLE: Capturing Missing Attribute Violations with Sentry in Laravel
DESCRIPTION: This snippet shows how to set up violation reporting for missing attributes in Laravel models. It prevents accessing missing attributes and configures a violation reporter for production environments.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;
use Sentry\Laravel\Integration;

Model::preventAccessingMissingAttributes();

// Only supress missing attribute violations in production, let them be thrown in other environments
if (app()->isProduction()) {
  Model::handleMissingAttributeViolationUsing(
      Integration::missingAttributeViolationReporter()
  );
}

----------------------------------------

TITLE: Performing Heartbeat Monitoring in Bash
DESCRIPTION: This snippet demonstrates how to perform heartbeat monitoring using cURL commands for successful completion and failure scenarios.

LANGUAGE: bash
CODE:
SENTRY_INGEST="https://___ORG_INGEST_DOMAIN___"
SENTRY_CRONS="${SENTRY_INGEST}/api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/"

# 🟢 Notify Sentry your job has completed successfully:
curl "${SENTRY_CRONS}?status=ok"

# 🔴 Notify Sentry your job has failed:
curl "${SENTRY_CRONS}?status=error"

----------------------------------------

TITLE: Displaying Alert Message in JSX for Sentry Issue Escalation
DESCRIPTION: This code snippet uses the Alert component to display a warning message about the current limitations of escalating issues in Sentry. It informs users that escalation doesn't work for merged/unmerged issues but indicates that a fix is in progress.

LANGUAGE: jsx
CODE:
<Alert>

Escalating issues currently does not work for merged/unmerged issues, but we're working on fixing this.

</Alert>

----------------------------------------

TITLE: Kotlin Custom User Provider for Spring Boot 2
DESCRIPTION: Kotlin implementation of SentryUserProvider interface for Spring Boot 2 to provide custom user information to Sentry

LANGUAGE: kotlin
CODE:
import org.springframework.stereotype.Component
import io.sentry.protocol.User
import io.sentry.spring.SentryUserProvider

@Component
class CustomSentryUserProvider : SentryUserProvider {
  override fun provideUser(): User? {
    val user = User()
    // ... set user information
    return user
  }
}

----------------------------------------

TITLE: Configuring Sentry DSN via Config File
DESCRIPTION: Sets up the Sentry DSN in the sentryclirc configuration file.

LANGUAGE: ini
CODE:
[auth]
dsn = ___PUBLIC_DSN___

----------------------------------------

TITLE: Registering Instrumented Celery Task in Python
DESCRIPTION: Demonstrates how to register a Celery task using Sentry's instrumented_task decorator. Shows required task naming, queue specification, and retry configurations.

LANGUAGE: python
CODE:
from sentry.tasks.base import instrumented_task

@instrumented_task(
    name="sentry.tasks.do_work",
    queue="important_queue",
    default_retry_delay=60 * 5,
    max_retries=None,
)
def do_work(kind_of_work, **kwargs):
    # ...

----------------------------------------

TITLE: Migrating from InitSentryForEmber to Sentry.init in Ember.js
DESCRIPTION: The InitSentryForEmber export has been deprecated and removed. Applications should now use the standard Sentry.init method to initialize the SDK in Ember.js applications.

LANGUAGE: javascript
CODE:
// Old way - removed
InitSentryForEmber();

// New way
Sentry.init({
  // configuration options
});

----------------------------------------

TITLE: Server-side Sentry Configuration
DESCRIPTION: Configuration for initializing Sentry on the server-side with error handling and request handling setup.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/sveltekit";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

const myErrorHandler = ({ error, event }) => {
  console.error("An error occurred on the server side:", error, event);
};

export const handleError = Sentry.handleErrorWithSentry(myErrorHandler);

export const handle = Sentry.sentryHandle();

----------------------------------------

TITLE: Initializing LaunchDarkly with Sentry Integration in JavaScript
DESCRIPTION: Sets up Sentry monitoring with LaunchDarkly integration, initializes the LaunchDarkly client with Sentry's flag usage handler, and demonstrates flag evaluation. Requires LaunchDarkly client SDK and Sentry Next.js packages as dependencies.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nextjs';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Configuring Exception Resolution Order in Properties
DESCRIPTION: Sets the exception resolver order to ensure maximum exception capture, including those handled by @ExceptionHandler methods. Uses the highest precedence value for comprehensive exception tracking.

LANGUAGE: properties
CODE:
sentry.exception-resolver-order=-2147483647

----------------------------------------

TITLE: Configuring Exception Resolution Order in Properties
DESCRIPTION: Sets the exception resolver order to ensure maximum exception capture, including those handled by @ExceptionHandler methods. Uses the highest precedence value for comprehensive exception tracking.

LANGUAGE: properties
CODE:
sentry.exception-resolver-order=-2147483647

----------------------------------------

TITLE: Installing Sentry Dart Plugin Dependencies
DESCRIPTION: Adding sentry_dart_plugin as a dev dependency in pubspec.yaml file.

LANGUAGE: yaml
CODE:
dev_dependencies:
  sentry_dart_plugin: ^2.0.0

----------------------------------------

TITLE: Configuring Linker Options for iOS Tests in Kotlin Multiplatform
DESCRIPTION: Gradle configuration to add linker options for iOS test targets in a Kotlin Multiplatform project. This modification helps resolve the 'framework Sentry not found' error by specifying the framework path for iOS simulator targets.

LANGUAGE: kotlin
CODE:
  listOf(
      iosX64(),
      iosArm64(),
      iosSimulatorArm64(),
  ).forEach {
      it.binaries.framework {
          baseName = "shared"
      }
      it.compilations.all {
          if (compilationName == "test" && target.platformType == KotlinPlatformType.native) {
              compilerOptions.configure {
                  freeCompilerArgs.add("-linker-options")
                  freeCompilerArgs.add("-F/your/path/Carthage/Build/Sentry.xcframework/ios-arm64_x86_64-simulator/")
              }
          }
      }
  }

----------------------------------------

TITLE: Request Isolation with Sentry (CommonJS)
DESCRIPTION: Example of using Sentry.withIsolationScope for request isolation in non-HTTP scenarios using CommonJS.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

function myScheduledJob() {
  return Sentry.withIsolationScope(async () => {
    await doSomething();
    await doSomethingElse();
    return { status: "DONE" };
  });
}

----------------------------------------

TITLE: Running ASGI App with Uvicorn for Sentry Verification
DESCRIPTION: Use Uvicorn to run the ASGI app on localhost port 8000 for testing Sentry integration.

LANGUAGE: bash
CODE:
uvicorn main:app --port 8000

----------------------------------------

TITLE: Adding Sentry Breadcrumb in C++ with Unreal Engine
DESCRIPTION: This snippet demonstrates how to add a breadcrumb to Sentry using C++ in Unreal Engine. It retrieves the Sentry subsystem, creates additional data, and adds a breadcrumb with specified parameters.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

TMap<FString, FString> AdditionalData;
AdditionalData.Add("SomeKey", "SomeValue");

SentrySubsystem->AddBreadcrumb("Message", "Category", "Type", AdditionalData, ESentryLevel::Info);

----------------------------------------

TITLE: Setting Sentry Release in YAML File
DESCRIPTION: Configuration for specifying the Sentry release version in application.yml file. The release version typically follows the format project-name@version.

LANGUAGE: yaml
CODE:
sentry.release: "my-project-name@2.3.12"

----------------------------------------

TITLE: Migrating Sentry Integration Syntax from v7 to v8
DESCRIPTION: A mapping table showing the conversion from class-based integration constructors to their corresponding function-based implementations. This change affects all built-in Sentry integrations including error handling, debugging, and monitoring features.

LANGUAGE: javascript
CODE:
// Old syntax examples:
new InboundFilters()
new FunctionToString()
new LinkedErrors()

// New syntax examples:
inboundFiltersIntegration()
functionToStringIntegration()
linkedErrorsIntegration()

----------------------------------------

TITLE: Capturing and Retrieving SentryId with Sentry in Dart
DESCRIPTION: Demonstrates three different methods for obtaining a SentryId: using beforeSend callback, direct capture method, and lastEventId property. Also shows how to create and submit user feedback associated with an event.

LANGUAGE: dart
CODE:
// Option 1: Retrieving SentryId from beforeSend
SentryId sentryId = SentryId.empty();

await Sentry.init((options) {
  options.beforeSend = (event, hint) {
    sentryId = event.eventId;
    return event;
  };
});

// Option 2: Retrieving SentryId from the method capturing the event
SentryId sentryId = Sentry.captureMessage("My message");

// Option 3: Retrieving SentryId from the beforeSend callback
SentryId sentryId = Sentry.lastEventId;

final feedback = SentryFeedback(
    message: 'Hello World!',
    contactEmail: 'foo@bar.org',
    name: 'John Doe',
    associatedEventId: sentryId,
);

Sentry.captureFeedback(feedback);

----------------------------------------

TITLE: npm Installation Command
DESCRIPTION: Command to install Raven.js via npm package manager.

LANGUAGE: shell
CODE:
npm install raven-js --save

----------------------------------------

TITLE: Implementing Time to Full Display Configuration
DESCRIPTION: Configuration for enabling Time to Full Display (TTFD) tracking in Sentry Flutter SDK.

LANGUAGE: dart
CODE:
await SentryFlutter.init(
  (options) {
    options.enableTimeToFullDisplayTracing = true;
  }, appRunner: () => runApp(MyApp()),
);

----------------------------------------

TITLE: Dashboard and API IP Ranges
DESCRIPTION: IP addresses for Sentry's dashboard and API services across different regional domains.

LANGUAGE: plaintext
CODE:
sentry.io 35.186.247.156/32
us.sentry.io 35.186.247.156/32
de.sentry.io 34.36.122.224/32, 34.36.87.148/32

----------------------------------------

TITLE: Sending Basic Event with Sentry CLI
DESCRIPTION: Demonstrates how to send a basic message event to Sentry using the sentry-cli send-event command.

LANGUAGE: bash
CODE:
sentry-cli send-event -m "Hello from Sentry"

----------------------------------------

TITLE: Setting Maximum Attachment Size in Sentry
DESCRIPTION: This snippet demonstrates how to set the maximum size for each attachment in Sentry using SentryOptions.maxAttachmentSize.

LANGUAGE: markdown
CODE:
<PlatformContent includePath="enriching-events/attachment-max-size" />

----------------------------------------

TITLE: Configuring Tuist Dependencies for Sentry
DESCRIPTION: Configuration for Tuist dependencies to resolve crashes when updating Sentry. Adds USE_HEADERMAP setting for the Sentry target.

LANGUAGE: swift
CODE:
"Sentry": ["USE_HEADERMAP": "YES"]

----------------------------------------

TITLE: Implementing Interaction Web Vitals Measurements in JSON
DESCRIPTION: Shows the structure for capturing Interaction to Next Paint (INP) metrics as measurements on interaction spans. Includes value and unit for the INP measurement.

LANGUAGE: json
CODE:
{
  "measurements": {
    "inp": { "value": 500, "unit": "millisecond" },
  }
}

----------------------------------------

TITLE: Defining Enum with Unknown Variant Handling in Rust
DESCRIPTION: Example of defining an enum in Rust with proper handling of unknown variants. This pattern should be used when defining new enums in Relay to ensure compatibility with future changes.

LANGUAGE: rust
CODE:
#[derive(Deserialize, Serialize)]
#[serde(tag = "type", rename_all = "camelCase")]
enum BreakdownConfig {
    SpanOperations { ... },
    #[serde(other)]
    Unsupported,
}

----------------------------------------

TITLE: Auth Token Response Structure in JSON
DESCRIPTION: This JSON structure represents the response data received when exchanging a grant code or refreshing an auth token. It includes the token, refresh token, and expiration details.

LANGUAGE: json
CODE:
{
  "id": "38",
  "token": "ec48bf98637d44c294ead7566513686237e74ab67a074c64b3aaca2d93dbb8f1",
  "refreshToken": "c866f154a65841638d44ee26364409b0a1a67bd642bd46e7a476f34f810712d6",
  "dateCreated": "2019-08-07T20:25:09.870Z",
  "expiresAt": "2019-08-08T04:25:09.870Z",
  "state": null,
  "application": null
}

----------------------------------------

TITLE: Configuring Crash Reporter Attributes in C++
DESCRIPTION: C++ implementation for configuring crash reporter attributes including release version, environment, tags, user information, and custom contexts.

LANGUAGE: cpp
CODE:
#include "GenericPlatform/GenericPlatformCrashContext.h"
#include "Dom/Json.h"

void ConfigureCrashReporter()
{
    TSharedPtr<FJsonObject> config = MakeShareable(new FJsonObject);

    // sentry specific attributes go here
    config->SetStringField("release", "my-project-name@2.3.12");
    config->SetStringField("environment", "production");

    TSharedPtr<FJsonObject> tags = MakeShareable(new FJsonObject);
    tags->SetStringField("tag1", "value1");
    tags->SetStringField("tag2", "value2");
    config->SetObjectField("tags", tags);

    TSharedPtr<FJsonObject> user = MakeShareable(new FJsonObject);
    user->SetStringField("ip_address", "{{auto}}");
    user->SetStringField("email", "jane.doe@example.com");
    config->SetObjectField("user", user);

    TSharedPtr<FJsonObject> character = MakeShareable(new FJsonObject);
    character->SetStringField("name", "Mighty Fighter");
    character->SetNumberField("age", 19.0);
    TSharedPtr<FJsonObject> contexts = MakeShareable(new FJsonObject);
    contexts->SetObjectField("character", character);
    config->SetObjectField("contexts", contexts);

    FString jsonConfig;
    TSharedRef<TJsonWriter<>> jsonWriter = TJsonWriterFactory<>::Create(&jsonConfig);
    FJsonSerializer::Serialize(config.ToSharedRef(), jsonWriter);

    FGenericCrashContext::SetGameData(TEXT("__sentry"), jsonConfig);
}

----------------------------------------

TITLE: Initializing Sentry and LaunchDarkly in Remix
DESCRIPTION: This snippet demonstrates how to initialize Sentry with LaunchDarkly integration, set up the LaunchDarkly client, and evaluate a feature flag. It requires the '@sentry/remix' and 'launchdarkly-js-client-sdk' packages.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/remix';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Configuring Sentry Integration for Oban and Quantum in Elixir
DESCRIPTION: This snippet shows how to enable Sentry integration for Oban or Quantum in the application configuration. It allows automatic capture of check-ins for periodically scheduled jobs.

LANGUAGE: elixir
CODE:
config :sentry,
  integrations: [
    oban: [cron: [enabled: true]],
    # Or for Quantum:
    quantum: [cron: [enabled: true]],
  ]

----------------------------------------

TITLE: Configuring Sentry Options in YAML Configuration File
DESCRIPTION: Sets up basic Sentry configuration including the DSN from environment variables and maximum breadcrumbs limit. The configuration is defined in the sentry.yaml file within the config/packages directory.

LANGUAGE: yaml
CODE:
sentry:
    dsn: "%env(SENTRY_DSN)%"
    options:
        max_breadcrumbs: 50

----------------------------------------

TITLE: Initializing Sentry with Feature Flags in TypeScript
DESCRIPTION: Sets up Sentry error tracking with feature flags integration, configures a test flag, and demonstrates exception capturing. Requires @sentry/ember package and valid DSN configuration.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/ember';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Initializing Sentry Configuration in Ruby
DESCRIPTION: This code initializes Sentry with custom configuration options. It specifically sets the environment to 'production'. Other configuration options can be added within the block.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  #...
  config.environment = 'production'
end

----------------------------------------

TITLE: Transaction Percentage Calculation
DESCRIPTION: Shows the equation for calculating the percentage of transactions completed within a specified threshold using count_if and count functions.

LANGUAGE: text
CODE:
count_if(transaction.duration,lessOrEquals,300) / count() * 100

----------------------------------------

TITLE: Implementing ProcessEvent Hook in Sentry Custom Integration (JavaScript)
DESCRIPTION: This snippet demonstrates the processEvent hook in a custom Sentry integration. This hook can modify events before they're sent to Sentry, receiving the event, a hint object, and the client as arguments. It can return a modified event or null to drop the event.

LANGUAGE: javascript
CODE:
const integration = {
  name: "MyAwesomeIntegration",
  processEvent(event, hint, client) {
    event.extra = {
      ...event.extra,
      myCustomTag: "value",
    };
    // Return the modified event,
    // or return `null` to drop the event
    return event;
  },
};

----------------------------------------

TITLE: Closing Sentry Client with Promise-based Timeout
DESCRIPTION: Demonstrates how to gracefully close a Sentry client with a timeout parameter in milliseconds. The close method returns a promise that resolves when all pending events are flushed or when the timeout is reached. After closing, the client becomes unusable.

LANGUAGE: javascript
CODE:
Sentry.close(2000).then(function () {
  // perform something after close
});

----------------------------------------

TITLE: Calculating Spike Limit
DESCRIPTION: Formula for calculating the spike limit using weighted average and standard deviation of hourly volumes.

LANGUAGE: math
CODE:
limit_spike = avg_weighted + (min(max((avg + (5 * std))/avg, 5),8) * avg)

----------------------------------------

TITLE: HTTP Request Error Handling with SentryHttpClient
DESCRIPTION: Demonstrates error handling for HTTP requests using SentryHttpClient, including catching exceptions like SocketException.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

var client = SentryHttpClient();
try {
  var uriResponse = await client.post('https://example.com/whatsit/create',
    body: {'name': 'doodle', 'color': 'blue'});
  print(await client.get(uriResponse.bodyFields['uri']));
} finally {
  client.close();
}

----------------------------------------

TITLE: Clearing User Data from Sentry Scope in Java
DESCRIPTION: This snippet demonstrates how to configure the Sentry scope to clear user information using Java. It uses the Sentry SDK's configureScope method with a lambda function to set the user to null, effectively removing any previously set user data.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.configureScope(scope -> {
  scope.setUser(null);
});

----------------------------------------

TITLE: Capturing Messages and User Feedback with Sentry in Kotlin
DESCRIPTION: Shows how to capture a message with Sentry and submit associated user feedback. The code demonstrates creating a Sentry event ID, constructing a UserFeedback object with user details, and submitting the feedback to Sentry.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Sentry
import io.sentry.kotlin.multiplatform.protocol.UserFeedback

val sentryId = Sentry.captureMessage("My message")

val userFeedback = UserFeedback(sentryId).apply {
  comments = "It broke."
  email = "john.doe@example.com"
  name = "John Doe"
}
Sentry.captureUserFeedback(userFeedback)

----------------------------------------

TITLE: Configuring Error Reporting in Relay YAML
DESCRIPTION: YAML configuration to enable error reporting to a Sentry project. Requires setting the 'enabled' flag to true and providing a valid Sentry DSN.

LANGUAGE: yaml
CODE:
sentry:
  enabled: true
  dsn: <your_dsn>

----------------------------------------

TITLE: Adding Request Scope in ASGI Integration for Sentry (Python)
DESCRIPTION: This code snippet demonstrates the structure of the request scope added by the ASGI integration in Sentry. It shows that the integration adds an 'asgi_scope' key with a dictionary value to the sampling context.

LANGUAGE: python
CODE:
{
  "asgi_scope": <dict>
}

----------------------------------------

TITLE: Integrating Sentry with OpenFeature - Track All Evaluations
DESCRIPTION: Demonstrates how to initialize Sentry with OpenFeature integration to track all feature flag evaluations across the application. Sets up the OpenFeature provider and adds hooks globally.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/react';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
OpenFeature.addHooks(new Sentry.OpenFeatureIntegrationHook());

const client = OpenFeature.getClient();
const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Configuring Sentry Maven Plugin for Java
DESCRIPTION: This XML configuration adds the Sentry Maven plugin to a Java project. It includes settings for organization, project, authentication, and enables source bundle upload for improved stack trace context.

LANGUAGE: xml
CODE:
<plugin>
  <groupId>io.sentry</groupId>
  <artifactId>sentry-maven-plugin</artifactId>
  <version>{{@inject packages.version('sentry.java.maven-plugin', '0.0.2') }}</version>
  <!-- Required to allow auto-install of Sentry SDK and Integrations -->
  <extensions>true</extensions>
  <configuration>
    <!-- In case you're self hosting, provide the URL here -->
    <!-- <url>http://localhost:8000/</url> -->
    <org>___SENTRY_ORG_SLUG___</org>
    <project>___SENTRY_PROJECT_SLUG___</project>
    <!-- Do not commit you auth token with this file, you should provide it via the SENTRY_AUTH_TOKEN environment variable or similar -->
    <!-- <authToken>${env.SENTRY_AUTH_TOKEN}</authToken> -->
    <authToken>___SENTRY_AUTH_TOKEN___</authToken>
    <!-- Enable debugging to see logs in case something goes wrong when uploading the source bundle -->
    <debugSentryCli>true</debugSentryCli>
   </configuration>
   <executions>
    <execution>
      <goals>
        <!-- Generates a source bundle and uploads it to Sentry -->
        <!-- This enables source context, allowing you to see your source code as part of your stack traces in Sentry -->
        <!-- Learn more about this feature in its dedicated "Source Context" docs page -->
        <goal>uploadSourceBundle</goal>
      </goals>
    </execution>
  </executions>
</plugin>

----------------------------------------

TITLE: Correct Usage of Sentry Hub in Goroutines
DESCRIPTION: This snippet demonstrates the recommended way to use Sentry Hub within goroutines. It shows how to clone the current Hub and use it safely in concurrent calls, avoiding data races and unexpected behavior.

LANGUAGE: go
CODE:
go func(localHub *sentry.Hub) {
	// as goroutine argument
	localHub.ConfigureScope(func(scope *sentry.Scope) {
		scope.SetTag("secretTag", "go#1")
	})
	localHub.CaptureMessage("Hello from Goroutine! #1")
}(sentry.CurrentHub().Clone())

go func() {
	// or created locally
	localHub := sentry.CurrentHub().Clone()
	localHub.ConfigureScope(func(scope *sentry.Scope) {
		scope.SetTag("secretTag", "go#2")
	})
	localHub.CaptureMessage("Hello from Goroutine! #2")
}()

----------------------------------------

TITLE: Adding Attachments with Sentry SDK 2.x
DESCRIPTION: Shows how to add attachments to the current scope using Sentry SDK 2.x. Demonstrates adding attachments using both raw bytes and file paths.

LANGUAGE: python
CODE:
# Add an attachment
import sentry_sdk

scope = sentry_sdk.get_current_scope()
scope.add_attachment(bytes=b"Hello World!", filename="attachment.txt")
scope.add_attachment(path="/path/to/attachment/file.txt")

----------------------------------------

TITLE: Creating Sentry Attachment in Java
DESCRIPTION: Demonstrates how to create a file attachment in Sentry using Java. The attachment is initialized with bytes data and a filename parameter.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.Attachment;

Attachment attachment = new Attachment(bytes, "file.log");

----------------------------------------

TITLE: Attaching ANR Thread Dump in Kotlin
DESCRIPTION: This snippet illustrates how to enable attaching the ANR thread dump as an attachment using the isAttachAnrThreadDump option in Kotlin.

LANGUAGE: kotlin
CODE:
SentryAndroid.init(context) { options ->
  options.isAttachAnrThreadDump = true
}

----------------------------------------

TITLE: Installing sentry-appengine Dependency with Maven
DESCRIPTION: This XML snippet shows how to add the sentry-appengine dependency to a Maven project's pom.xml file. It specifies the groupId, artifactId, and version for the library.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-appengine</artifactId>
    <version>1.7.30</version>
</dependency>

----------------------------------------

TITLE: Running Java Application with OpenTelemetry Agent (Environment Variable)
DESCRIPTION: Executes a Java application with the Sentry OpenTelemetry agent using environment variables to configure the Java agent. Disables Sentry auto-initialization.

LANGUAGE: bash
CODE:
SENTRY_AUTO_INIT=false JAVA_TOOL_OPTIONS="-javaagent:sentry-opentelemetry-agent-{{@inject packages.version('sentry.java.opentelemetry-agent') }}.jar" java -jar your-application.jar

----------------------------------------

TITLE: Managing Sentry Attachments in Kotlin
DESCRIPTION: This snippet demonstrates how to add and clear attachments in Sentry's global and local scopes using Kotlin. It shows creating a file attachment, adding it to scopes, clearing attachments, and capturing a message with an attachment.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.Attachment

val fileAttachment = Attachment("your/path/file.log")

// Global Scope
Sentry.configureScope { scope ->
  scope.addAttachment(fileAttachment)
}

// Clear all attachments in the global Scope
Sentry.configureScope { scope ->
  scope.clearAttachments()
}

// Local Scope
Sentry.withScope { scope ->
  scope.addAttachment(fileAttachment)
  Sentry.captureMessage("my message")
}

----------------------------------------

TITLE: Managing Sentry Attachments in Kotlin
DESCRIPTION: This snippet demonstrates how to add and clear attachments in Sentry's global and local scopes using Kotlin. It shows creating a file attachment, adding it to scopes, clearing attachments, and capturing a message with an attachment.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.Attachment

val fileAttachment = Attachment("your/path/file.log")

// Global Scope
Sentry.configureScope { scope ->
  scope.addAttachment(fileAttachment)
}

// Clear all attachments in the global Scope
Sentry.configureScope { scope ->
  scope.clearAttachments()
}

// Local Scope
Sentry.withScope { scope ->
  scope.addAttachment(fileAttachment)
  Sentry.captureMessage("my message")
}

----------------------------------------

TITLE: Configuring Sentry Logging Levels in Spring Boot Properties
DESCRIPTION: This snippet shows how to configure minimum logging levels for SentryAppender in Spring Boot's application.properties file.

LANGUAGE: properties
CODE:
sentry.logging.minimum-event-level=info
sentry.logging.minimum-breadcrumb-level=debug

----------------------------------------

TITLE: Setting Document-Policy Headers in Next.js (ESM)
DESCRIPTION: Configures document response headers using ES Modules syntax in next.config.mjs. Sets up a Document-Policy header for JavaScript profiling on all routes.

LANGUAGE: javascript
CODE:
export default withSentryConfig({
  async headers() {
    return [
      {
        source: "/:path*",
        headers: [
          {
            key: "Document-Policy",
            value: "js-profiling",
          },
        ],
      },
    ];
  },

  // ... other Next.js config options
});

----------------------------------------

TITLE: Adding Data Attributes to Spans in Sentry with Ruby
DESCRIPTION: This code snippet shows how to add various types of data attributes to a span in Sentry using Ruby. It demonstrates setting string, number, boolean, and array attributes on a span.

LANGUAGE: ruby
CODE:
Sentry.with_child_span(op: "my-span") do |span|
  span.set_data("my-data-attribute-1", "value1")
  span.set_data("my-data-attribute-2", 42)
  span.set_data("my-data-attribute-3", true)

  span.set_data("my-data-attribute-4", ["value1", "value2", "value3"])
  span.set_data("my-data-attribute-5", [42, 43, 44])
  span.set_data("my-data-attribute-6", [true, false, true])
end

----------------------------------------

TITLE: Implementing Sentry Exception Capturing in Global Exception Filter
DESCRIPTION: This snippet shows how to implement Sentry exception capturing in a global catch-all exception filter. It uses the @SentryExceptionCaptured() decorator on the catch method to report unexpected errors to Sentry.

LANGUAGE: javascript
CODE:
import { Catch, ExceptionFilter } from '@nestjs/common';
import { SentryExceptionCaptured } from '@sentry/nestjs';

@Catch()
export class YourCatchAllExceptionFilter implements ExceptionFilter {
  @SentryExceptionCaptured()
  catch(exception, host): void {
    // your implementation here
  }
}

----------------------------------------

TITLE: Enabling Network Access for Sentry in Deno
DESCRIPTION: This command shows how to run a Deno application with network access allowed for the Sentry ingestion domain, which is necessary for sending events to Sentry.

LANGUAGE: bash
CODE:
deno run --allow-net=___ORG_INGEST_DOMAIN___ index.ts

----------------------------------------

TITLE: Enabling Network Access for Sentry in Deno
DESCRIPTION: This command shows how to run a Deno application with network access allowed for the Sentry ingestion domain, which is necessary for sending events to Sentry.

LANGUAGE: bash
CODE:
deno run --allow-net=___ORG_INGEST_DOMAIN___ index.ts

----------------------------------------

TITLE: Custom NSError Creation from Swift Error
DESCRIPTION: Example of converting Swift errors to NSError with custom domain and description. Useful for modifying error information before sending to Sentry.

LANGUAGE: swift
CODE:
import Sentry

do {
    try aMethodThatMightFail()
} catch {
    let nsError = error as NSError
    let myError = NSError(
        domain: "your domain",
        code: nsError.code, // Keep the error code
        userInfo: [NSDebugDescriptionErrorKey : "my custom description"]
    )
    SentrySDK.capture(error: myError)
}

----------------------------------------

TITLE: Using @SentrySpan Annotation in Spring 5 (Kotlin)
DESCRIPTION: Example of using @SentrySpan annotation to create a span for a method execution in Spring 5 Kotlin application.

LANGUAGE: kotlin
CODE:
import org.springframework.stereotype.Component
import io.sentry.spring.tracing.SentrySpan

@Component
class PersonService {

  @SentrySpan(operation = "task")
  fun findById(id: Long): Person {
    ...
  }
}

----------------------------------------

TITLE: Importing Sentry SDK for Angular
DESCRIPTION: This code snippet imports all exports from the @sentry/angular package as a namespace called Sentry. This import allows the application to use Sentry's error tracking and monitoring features throughout the Angular project.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/angular";

----------------------------------------

TITLE: Initializing Sentry with Custom Sampling Rules in JavaScript
DESCRIPTION: This snippet initializes Sentry with a custom tracesSampler function to control sampling rates for different types of transactions. It sets specific sampling rates for health checks, auth-related transactions, and comment-related transactions.

LANGUAGE: javascript
CODE:
// sentry.client.config.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracesSampler: (samplingContext) => {
    // Access transaction details from the sampling context
    const { name, attributes, inheritOrSampleWith } = samplingContext;
    
    // Skip health checks entirely
    if (name.includes('healthcheck')) {
      return 0;
    }
    
    // Capture all auth-related transactions
    if (name.includes('auth')) {
      return 1;
    }
    
    // Sample only 1% of comment-related transactions
    if (name.includes('comment')) {
      return 0.01;
    }
    
    // For everything else, inherit parent sampling decision or use 0.5
    return inheritOrSampleWith(0.5);
  }
});

----------------------------------------

TITLE: Initializing Sentry SDK with Dynamic Release Version in Node.js
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK using a dynamic release version from the npm package environment variable. It's particularly useful in Node.js/npm environments where the version can be automatically updated.

LANGUAGE: javascript
CODE:
Sentry.init({
  release: "my-project-name@" + process.env.npm_package_version,
});

----------------------------------------

TITLE: Creating Debug Route for Sentry in Symfony
DESCRIPTION: PHP code to create a debug route that throws an exception to test Sentry integration in Symfony.

LANGUAGE: php
CODE:
/**
 * @Route("/debug-sentry")
 */
public function debug_sentry()
{
    throw new Exception('My first Sentry error!');
}

----------------------------------------

TITLE: Test Widget Implementation for Routing Verification
DESCRIPTION: Sample widget implementation that demonstrates routing transaction tracking with an expensive operation.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:sentry/sentry.dart';

class MyWidget extends StatefulWidget {
  const MyWidget({super.key});

  @override
  MyWidgetState createState() => MyWidgetState();
}

class MyWidgetState extends State<MyWidget> {
  static const delayInSeconds = 5;

  @override
  void initState() {
    super.initState();
    _doComplexOperation();
  }

  Future<void> _doComplexOperation() async {
    final activeTransaction = Sentry.getSpan();
    final childSpan = activeTransaction?.startChild('complex operation',
    description: 'running a $delayInSeconds seconds operation');
    await Future.delayed(const Duration(seconds: delayInSeconds));
    childSpan?.finish();
  }

  @override
  Widget build(BuildContext context) {
    return ...
  }
}

----------------------------------------

TITLE: Constructing a Search Query in Sentry
DESCRIPTION: Demonstrates the structure of a search query in Sentry using key:value pairs and optional raw search. The query includes resolved issues, a specific username, a custom server tag, and a raw search term.

LANGUAGE: plaintext
CODE:
is:resolved user.username:"Jane Doe" server:web-8 example error

----------------------------------------

TITLE: Sending Counter Metric
DESCRIPTION: Shows how to increment a counter metric by a specific value using the Sentry CLI.

LANGUAGE: bash
CODE:
sentry-cli send-metric increment -n "button_click" -v 2

----------------------------------------

TITLE: SQL Query Parameter Sanitization Example
DESCRIPTION: Demonstrates how Sentry handles SQL queries by parameterizing them for security. Rather than sending full queries with values, it sends parameterized versions to protect sensitive data.

LANGUAGE: sql
CODE:
UPDATE app_user SET password=? WHERE id=?;

----------------------------------------

TITLE: Configuring Send Result for Sentry SDK in Elixir
DESCRIPTION: Controls whether to report events synchronously (:sync) or asynchronously (:none). This affects how the SDK handles event sending.

LANGUAGE: elixir
CODE:
config :sentry,
  send_result: :sync

----------------------------------------

TITLE: Example Span Link Data Structure
DESCRIPTION: Example showing how span links are serialized within transaction spans array.

LANGUAGE: typescript
CODE:
{
  type: "transaction";
  transaction: string;
  spans: Array<{
    span_id: string;
    parent_span_id: string;
    trace_id: string;
    links?: Array<{
      "span_id": string,
      "trace_id": string,
      sampled?: boolean,
      attributes?: Record<string, AttributeValue>,
    }>
  }>
}

----------------------------------------

TITLE: Rendering PageGrid Component in JSX
DESCRIPTION: Simple JSX component rendering for displaying a PageGrid element in the documentation interface.

LANGUAGE: jsx
CODE:
<PageGrid />

----------------------------------------

TITLE: Initializing Sentry with Koa Integration in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Sentry with the Koa integration. The koaIntegration adds instrumentation for the Koa framework to capture spans using @opentelemetry/instrumentation-koa.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [new Sentry.koaIntegration()],
});

----------------------------------------

TITLE: Rendering PageGrid Component in React
DESCRIPTION: Basic usage of the PageGrid component in a documentation page layout.

LANGUAGE: jsx
CODE:
<PageGrid />

----------------------------------------

TITLE: Resulting Span Structure for Queue Operations
DESCRIPTION: Shows the expected span structure resulting from the queue publish and process operations. This example illustrates how the SDK should create and organize spans for queue-related activities.

LANGUAGE: plaintext
CODE:
<span op:"queue.publish" description:"job-name" ...>

<span op:"queue.process" description:"job-name" ...>

----------------------------------------

TITLE: Implementing SetupOnce Hook in Sentry Integration
DESCRIPTION: Shows how to implement setupOnce hook which runs only once even if SDK is reinitialized. Useful for operations that should only occur once.

LANGUAGE: javascript
CODE:
const integration = {
  name: "MyAwesomeIntegration",
  setupOnce() {
    wrapLibrary();
  },
};

----------------------------------------

TITLE: Configuring Sentry Transaction Attributes in Java
DESCRIPTION: Initializes Sentry with a transaction handler that sets custom attributes on both the root span and child spans. Uses BeforeSendTransaction callback to modify transaction context and span data.

LANGUAGE: java
CODE:
Sentry.init(options -> {
    options.setBeforeSendTransaction((transaction, hint) -> {
        
        // set the attribute on the root span
        if (transaction.getContexts().getTrace() == null) {
            SpanContext spanContext = new SpanContext("op");
            transaction.getContexts().setTrace(spanContext);
        }
        transaction.getContexts().getTrace().setData("myAttribute", "myValue");

        // and on all child spans
        transaction.getSpans().forEach(span -> {
            if (span.getData() == null) {
                span.setData(new HashMap<>());
            }
            span.getData().put("myAttribute", "myValue");
        });

        return transaction;
    });
});

----------------------------------------

TITLE: Configuring ContextLines Integration in Sentry
DESCRIPTION: The ContextLines integration adds source code context to stack frames, allowing developers to see the code that caused errors directly in the Sentry UI. The integration can be configured to control how many lines of context are collected around each stack frame.

LANGUAGE: javascript
CODE:
Sentry.contextLinesIntegration

----------------------------------------

TITLE: Capturing PDO Exception with Custom Fingerprint in Sentry
DESCRIPTION: Demonstrates catching a PDO database exception and reporting it to Sentry with a custom fingerprint for better error grouping. Uses Sentry's scope functionality to set a consistent fingerprint for database connection errors.

LANGUAGE: php
CODE:
try {
    // Run code that for example throws a PDOException
} catch (\PDOException $e) {
    \Sentry\withScope(function (\Sentry\State\Scope $scope) use ($e) {
        $scope->setFingerprint(['database-connection-error']);
        \Sentry\captureException($e);
    });
}

----------------------------------------

TITLE: Implementing Span Outcomes Reporting
DESCRIPTION: Demonstrates how to report dropped spans along with transactions, including the special case of counting the transaction itself as a span.

LANGUAGE: json
CODE:
{
  "discarded_events": [
    {
      "reason": "queue_overflow",
      "category": "transaction",
      "quantity": 1
    },
    {
      "reason": "queue_overflow",
      "category": "span",
      "quantity": 3
    }
  ]
}

----------------------------------------

TITLE: Basic Commit Message Structure
DESCRIPTION: The basic format for commit messages showing the required header, optional body and footer structure. Includes type, scope, subject and optional JIRA ID.

LANGUAGE: text
CODE:
<type>(<scope>): <subject> (<jira-id>)
<BLANK LINE>
<body>
<BLANK LINE>
<footer>

----------------------------------------

TITLE: Configuring Sentry Logging Integration in Dart
DESCRIPTION: Initialize Sentry with the LoggingIntegration in the main function of a Dart application.

LANGUAGE: dart
CODE:
import 'package:sentry_logging/sentry_logging.dart';
import 'package:sentry/sentry.dart';

Future<void> main() async {
  await Sentry.init(
    (options) {
      options.dsn = '___PUBLIC_DSN___';
      options.addIntegration(LoggingIntegration());
    },
    appRunner: initApp, // Init your App.
  );
}

----------------------------------------

TITLE: Background Queue Processing in iOS
DESCRIPTION: Improved version using dispatch_async to move processing to a background queue.

LANGUAGE: objc
CODE:
NSMutableOrderedSet<NSString *> *sortedEvenNumbers = [NSMutableOrderedSet<NSString *> orderedSet];
dispatch_async(dispatch_get_global_queue(QOS_CLASS_UTILITY, 0), ^{
    [numbers enumerateObjectsUsingBlock:^(NSString * _Nonnull obj, NSUInteger __unused idx, BOOL * _Nonnull __unused stop) {
        if (obj.integerValue % 2 == 0) {
            [sortedEvenNumbers addObject:obj];
        }
    }];
});

----------------------------------------

TITLE: Setting Sentry SDK Scope Tag in Objective-C
DESCRIPTION: This snippet shows how to configure the Sentry SDK scope in Objective-C. It imports the Sentry module and sets a tag with the key 'page_locale' and value 'de-at' using the configureScope: method.

LANGUAGE: Objective-C
CODE:
@import Sentry;

[SentrySDK configureScope:^(SentryScope * _Nonnull scope) {
    [scope setTagValue:@"de-at" forKey:@"page_locale"];
}];

----------------------------------------

TITLE: Filtering Errors with before-send in JavaScript
DESCRIPTION: Demonstrates how to use the before-send callback to filter out specific error types or modify event data before sending to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event) {
    // Modify event here
    if (event.exception) {
      // Ignore errors from a specific source
      if (event.exception.values[0].type === "DatabaseError") {
        return null;
      }
    }
    return event;
  },
});

----------------------------------------

TITLE: Initializing LaunchDarkly with Sentry Integration in SvelteKit
DESCRIPTION: Sets up Sentry monitoring with LaunchDarkly integration, initializes the LaunchDarkly client with flag tracking, and demonstrates flag evaluation. Requires LaunchDarkly client SDK and Sentry SvelteKit packages as dependencies.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/sveltekit';
import * as LaunchDarkly from 'launchdarkly-js-client-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.launchDarklyIntegration()]
});

const ldClient = LaunchDarkly.initialize(
    'my-client-ID',
    {kind: 'user', key: 'my-user-context-key'},
    {inspectors: [Sentry.buildLaunchDarklyFlagUsedHandler()]}
);

// Evaluate a flag with a default value. You may have to wait for your client to initialize first.
ldClient?.variation('test-flag', false);

Sentry.captureException(new Error('Something went wrong!'))

----------------------------------------

TITLE: Enabling Debug Logging for Sentry using Environment Variable
DESCRIPTION: Sets the SENTRY_DEBUG environment variable to true to enable debug logging for Sentry.

LANGUAGE: shell
CODE:
SENTRY_DEBUG=true

----------------------------------------

TITLE: Installing Sentry FastHTTP Package in Go
DESCRIPTION: Use the go get command to install the Sentry FastHTTP package.

LANGUAGE: shell
CODE:
go get github.com/getsentry/sentry-go/fasthttp

----------------------------------------

TITLE: Rendering Plan Restriction Alert in React/JSX
DESCRIPTION: Alert component that notifies users about feature availability being restricted to Trial, Team, or higher subscription plans, with a link to the pricing page.

LANGUAGE: jsx
CODE:
<Alert>

This feature is available only if your organization is on <a href="https://sentry.io/pricing/" target="_blank">a Trial, Team, or higher plan</a>.

</Alert>

----------------------------------------

TITLE: Stripping Debug Information from ELF Binary
DESCRIPTION: These commands demonstrate how to strip debug information from an ELF binary on Linux and create a separate debug file. It uses objcopy to keep debug info, strip the binary, and add a link to the debug file.

LANGUAGE: bash
CODE:
# There is an executable called "binary" in the CWD
objcopy --only-keep-debug binary binary.debug
objcopy --strip-debug --strip-unneeded binary
objcopy --add-gnu-debuglink=binary.debug binary

----------------------------------------

TITLE: Installing Sentry CLI
DESCRIPTION: Commands for installing Sentry CLI on various platforms, including Windows, macOS, Linux, and using npm.

LANGUAGE: PowerShell
CODE:
# On Windows, if you have `scoop` installed:
scoop install sentry-cli

LANGUAGE: bash
CODE:
# On macOS, if you have Homebrew installed:
brew install getsentry/tools/sentry-cli

LANGUAGE: bash
CODE:
pacman -S sentry-cli

LANGUAGE: bash
CODE:
npm install @sentry/cli

----------------------------------------

TITLE: Manual Error Reporting with Try-Catch
DESCRIPTION: Example of manually capturing and reporting errors using try-catch blocks.

LANGUAGE: javascript
CODE:
try {
  doSomething(a[0]);
} catch (e) {
  Raven.captureException(e);
}

----------------------------------------

TITLE: Integrating Sentry with React Navigation using Class Components
DESCRIPTION: This snippet demonstrates how to integrate Sentry with React Navigation in a class component. It initializes Sentry with a custom navigation integration and sets up the NavigationContainer component with a ref and onReady callback to register the navigation container.

LANGUAGE: jsx
CODE:
import * as Sentry from "@sentry/react-native";
import { NavigationContainer } from "@react-navigation/native";

const navigationIntegration = Sentry.reactNavigationIntegration({
  enableTimeToInitialDisplay: true,
});

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [navigationIntegration],
})

class App extends React.Component {
  containerRef = React.createRef();

  render() {
    return (
      <NavigationContainer
        ref={this.containerRef}
        onReady={() => {
          navigationIntegration.registerNavigationContainer(this.containerRef);
        }}>
      </NavigationContainer>
    );
  }
}

----------------------------------------

TITLE: Customizing Screenshot Capture Behavior in Sentry Flutter
DESCRIPTION: This code shows how to customize screenshot capture behavior by implementing the beforeCaptureScreenshot option. It demonstrates capturing screenshots only for fatal events and respecting the debounce interval.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.beforeCaptureScreenshot = (event, hint, debounce) async {
    // If debounce is active, skip capturing
    if (debounce) {
      return false;
    }
    // Capture if it's a fatal event
    return event.level == SentryLevel.fatal;
  };
});

----------------------------------------

TITLE: Monitoring Cron Jobs with Sentry Context Manager in Python
DESCRIPTION: Demonstrates using the Sentry SDK's 'monitor' as a context manager to wrap a periodic task for monitoring. The context manager takes a 'monitor_slug' parameter to identify the specific task being monitored.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.crons import monitor

def tell_the_world():
    with monitor(monitor_slug='<monitor-slug>'):
        print('My scheduled task...')

----------------------------------------

TITLE: Implementing Custom Sampling Function in C# for Sentry SDK
DESCRIPTION: This code snippet demonstrates how to implement a custom sampling function for the Sentry SDK. The function takes a sampling context dictionary and returns a sample rate between 0 and 1, determining which transactions to capture for performance monitoring.

LANGUAGE: csharp
CODE:
SentrySDK.Init(o =>
{
    o.Dsn = "https://examplePublicKey@o0.ingest.sentry.io/0";
    o.TracesSampleRate = 1.0;
    o.TracesSampler = context =>
    {
        // If this is the continuation of a trace, just use that decision (0 or 1).
        if (context.TransactionContext.IsParentSampled is not null)
        {
            return context.TransactionContext.IsParentSampled.Value ? 1.0 : 0.0;
        }

        // Otherwise, sample based on URL (exposed through the TransactionContext)
        var url = context.TransactionContext.Name;

        // These are important - always sample them
        if (url.Contains("/payment") || url.Contains("/checkout"))
        {
            return 1.0;
        }

        // Sample all other transactions at 10%
        return 0.1;
    };
});

----------------------------------------

TITLE: Importing SentryTracingConfiguration in Spring 6 (Java)
DESCRIPTION: Java configuration to import SentryTracingConfiguration in a Spring 6 application.

LANGUAGE: java
CODE:
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import io.sentry.spring.jakarta.tracing.SentryTracingConfiguration;

@Import(SentryTracingConfiguration.class)
class SentryConfig {
}

----------------------------------------

TITLE: Execute Offset Reset for Specific Group
DESCRIPTION: Command to reset offsets to latest for a specific consumer group and topic

LANGUAGE: shell
CODE:
docker compose run --rm kafka kafka-consumer-groups --bootstrap-server kafka:9092 --group snuba-consumers --topic events --reset-offsets --to-latest --execute

----------------------------------------

TITLE: Error Handling with Sentry SDK 1.x
DESCRIPTION: Makes an HTTP request and captures any RequestError exceptions using Sentry SDK 1.x. Uses push_scope() to create a custom error grouping based on the HTTP method, path, and status code.

LANGUAGE: python
CODE:
from sentry_sdk import push_scope, capture_exception

def make_request(method, path, options):
    try:
        return session.request(method, path, **options)
    except RequestError as err:
        with push_scope() as scope:
            # group errors together based on their request and response
            scope.fingerprint = [method, path, str(err.status_code)]
            capture_exception(err)

----------------------------------------

TITLE: Initializing Sentry with Fastify (CommonJS)
DESCRIPTION: Sets up a Fastify server with Sentry error handling using CommonJS require() syntax. Requires instrument.js to be loaded before other modules for proper instrumentation.

LANGUAGE: javascript
CODE:
// Ensure to require this before requiring any other modules!
require('./instrument.js')

const Fastify = require("fastify");
const Sentry = require("@sentry/node");
const app = Fastify();

Sentry.setupFastifyErrorHandler(app);

// Add your routes, etc.

app.listen({ port: 3030 });

----------------------------------------

TITLE: Setting Error Sample Rate in Sentry SDK Configuration (JavaScript)
DESCRIPTION: Configures the SDK to send 25% of errors to Sentry by setting the sample rate to 0.25. This applies equally to all errors.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
  // Set sampling rate to 25%
  sampleRate: 0.25
});

----------------------------------------

TITLE: Instrumenting Cron Jobs with Sentry using cron library
DESCRIPTION: Shows how to instrument the CronJob constructor from the 'cron' library using Sentry.cron.instrumentCron. Requires Sentry SDK version 7.92.0 or higher. Demonstrates both constructor and from method usage.

LANGUAGE: JavaScript
CODE:
import { CronJob } from "cron";

const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, "my-cron-job");

// use the constructor
const job = new CronJobWithCheckIn("* * * * *", () => {
  console.log("You will see this message every minute");
});

// or from method
const job = CronJobWithCheckIn.from({
  cronTime: "* * * * *",
  onTick: () => {
    console.log("You will see this message every minute");
  },
});

----------------------------------------

TITLE: Device Classification Table - iOS
DESCRIPTION: Markdown table showing device class classifications for iOS devices based on model numbers.

LANGUAGE: markdown
CODE:
| `device.class` for iOS | `model`                             |
| ---------------------- | ----------------------------------- |
| high                   | iPhone 12 series or higher          |
| medium                 | iPhone 7 series to iPhone 11 series |
| low                    | iPhone 6 series or lower            |

----------------------------------------

TITLE: Adding Authentication Breadcrumb in C#
DESCRIPTION: Adds a breadcrumb to Sentry tracking when a user authenticates. Uses named parameters to specify the message, category and level. The breadcrumb includes the user's email address for tracking purposes.

LANGUAGE: csharp
CODE:
SentrySdk.AddBreadcrumb(
    message: "Authenticated user " + user.Email,
    category: "auth",
    level: BreadcrumbLevel.Info);

----------------------------------------

TITLE: Capturing Errors with Raven-Go SDK in Go
DESCRIPTION: This snippet demonstrates how to capture errors using the CaptureErrorAndWait method from the raven-go SDK. It shows error handling when opening a file and sending the error to Sentry before panicking.

LANGUAGE: go
CODE:
f, err := os.Open("filename.ext")
if err != nil {
	raven.CaptureErrorAndWait(err, nil)
	log.Panic(err)
}

----------------------------------------

TITLE: Installing Sentry Angular SDK with pnpm
DESCRIPTION: This command installs the @sentry/angular package using the pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add @sentry/angular

----------------------------------------

TITLE: Implementing Platform-Specific Content
DESCRIPTION: Shows how to use PlatformContent and PlatformSection components to render platform-specific documentation content with support for inclusion and exclusion rules.

LANGUAGE: markdown
CODE:
<PlatformContent includePath="sdk-init" />

LANGUAGE: markdown
CODE:
<PlatformSection notSupported={["javascript"]}>
Something that applies to all platforms, but not javascript or node.
</PlatformSection>

----------------------------------------

TITLE: Installing Sentry Servlet via SBT
DESCRIPTION: SBT dependency configuration for adding Sentry servlet integration to a Scala web application.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-servlet" % "{{@inject packages.version('sentry.java.servlet', '4.1.0') }}"

----------------------------------------

TITLE: Local Image Reference in Markdown
DESCRIPTION: Example of referencing a local image stored in the img folder relative to the markdown file.

LANGUAGE: markdown
CODE:
![Alert details ...](./img/alert-details-example.png)

----------------------------------------

TITLE: Disabling Upload Rate Limit for Crashpad Handler in C++
DESCRIPTION: This snippet demonstrates how to disable the default upload rate limit (one per hour) for the Crashpad handler by adding the '--no-rate-limit' argument to the handler's arguments vector.

LANGUAGE: cpp
CODE:
arguments.push_back("--no-rate-limit");

----------------------------------------

TITLE: Configuring Sentry Scope with Character Context in Rust
DESCRIPTION: Configures a Sentry scope by creating a custom context map with character information including name, age, and attack type. Uses BTreeMap to store the character attributes and sets them as 'character' context in the Sentry scope.

LANGUAGE: rust
CODE:
sentry::configure_scope(|scope| {
    let mut map = std::collections::BTreeMap::new();
    map.insert(String::from("name"), "Mighty Fighter".into());
    map.insert(String::from("age"), 19.into());
    map.insert(String::from("attack_type"), "melee".into());

    scope.set_context("character", sentry::protocol::Context::Other(map));
})

----------------------------------------

TITLE: Implementing Error Reporting Handler
DESCRIPTION: Implementation of error reporting in the Laravel exception handler to capture exceptions in Sentry.

LANGUAGE: php
CODE:
public function report(Exception $exception)
{
    if ($this->shouldReport($exception) && app()->bound('sentry')) {
        app('sentry')->captureException($exception);
    }

    parent::report($exception);
}

----------------------------------------

TITLE: Disabling MainProcessSession Integration in Sentry Electron
DESCRIPTION: Shows how to filter out the MainProcessSession integration from default integrations to disable session tracking in the Electron main process.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: (defaults) => defaults.filter((i) => i.name !== "MainProcessSession"),
});

----------------------------------------

TITLE: Initializing Sentry with Reporting Observer using Loader v7
DESCRIPTION: Implements Sentry initialization using the v7 Loader script pattern with Reporting Observer integration. Includes configuration of sentryOnLoad callback and required script tags.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});

    if (Sentry.reportingObserverIntegration) {
      Sentry.addIntegration(Sentry.reportingObserverIntegration());
    }
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/reportingobserver.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'reportingobserver.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Adding and Clearing Attachments in Sentry with JavaScript
DESCRIPTION: This snippet demonstrates how to add an attachment to the current Sentry scope and how to clear all attachments. It uses the Sentry.getCurrentScope() method to access the current scope.

LANGUAGE: javascript
CODE:
// Add an attachment
Sentry.getCurrentScope().addAttachment({
  filename: "attachment.txt",
  data: "Some content",
});

// Clear attachments
Sentry.getCurrentScope().clearAttachments();

----------------------------------------

TITLE: Installing Sentry Dio Dependencies
DESCRIPTION: Package dependencies configuration in pubspec.yaml for setting up Sentry with Dio integration.

LANGUAGE: yaml
CODE:
dependencies:
  sentry: ^{{@inject packages.version('sentry.dart', '6.4.0') }}
  sentry_dio: ^{{@inject packages.version('sentry.dart.dio', '6.4.0') }}
  dio: ^4.0.0

----------------------------------------

TITLE: Defining mapOtelStatus Function in TypeScript
DESCRIPTION: This function maps OpenTelemetry span status to Sentry span status, considering HTTP and gRPC status codes.

LANGUAGE: typescript
CODE:
import {Span as OtelSpan} from '@opentelemetry/sdk-trace-base';
import {SemanticAttributes} from '@opentelemetry/semantic-conventions';
import {SpanStatusType as SentryStatus} from '@sentry/tracing';

const canonicalCodesHTTPMap: Record<string, SentryStatus> = {
  '400': 'failed_precondition',
  '401': 'unauthenticated',
  '403': 'permission_denied',
  '404': 'not_found',
  '409': 'aborted',
  '429': 'resource_exhausted',
  '499': 'cancelled',
  '500': 'internal_error',
  '501': 'unimplemented',
  '503': 'unavailable',
  '504': 'deadline_exceeded',
} as const;

const canonicalCodesGrpcMap: Record<string, SentryStatus> = {
  '1': 'cancelled',
  '2': 'unknown_error',
  '3': 'invalid_argument',
  '4': 'deadline_exceeded',
  '5': 'not_found',
  '6': 'already_exists',
  '7': 'permission_denied',
  '8': 'resource_exhausted',
  '9': 'failed_precondition',
  '10': 'aborted',
  '11': 'out_of_range',
  '12': 'unimplemented',
  '13': 'internal_error',
  '14': 'unavailable',
  '15': 'data_loss',
  '16': 'unauthenticated',
} as const;

export function mapOtelStatus(otelSpan: OtelSpan): SentryStatus {
  const {status, attributes} = otelSpan;

  const statusCode = status.code;

  if (statusCode < 0 || statusCode > 2) {
    return 'unknown_error';
  }

  if (statusCode === 0 || statusCode === 1) {
    return 'ok';
  }

  const httpCode = attributes[SemanticAttributes.HTTP_STATUS_CODE];
  const grpcCode = attributes[SemanticAttributes.RPC_GRPC_STATUS_CODE];

  if (typeof httpCode === 'string') {
    const sentryStatus = canonicalCodesHTTPMap[httpCode];
    if (sentryStatus) {
      return sentryStatus;
    }
  }

  if (typeof grpcCode === 'string') {
    const sentryStatus = canonicalCodesGrpcMap[grpcCode];
    if (sentryStatus) {
      return sentryStatus;
    }
  }

  return 'unknown_error';
}

----------------------------------------

TITLE: Setting Sentry Event Fingerprint in F#
DESCRIPTION: Example showing how to set a custom fingerprint for Sentry events using F#. Uses the SetBeforeSend callback with F# function syntax to modify the event fingerprint before sending.

LANGUAGE: fsharp
CODE:
// Add this to the SDK initialization callback
options.SetBeforeSend(fun event ->
    event.SetFingerprint(["my-view-function"])
    event
    )

----------------------------------------

TITLE: Configuring Logging Level in Relay Config (YAML)
DESCRIPTION: This snippet shows how to set the logging level to 'trace' in the Relay configuration file (.relay/config.yml). This increased log level is useful for development purposes.

LANGUAGE: yaml
CODE:
logging:
  level: trace

----------------------------------------

TITLE: Installing Raven-Go SDK via go get
DESCRIPTION: Command to install the legacy Raven-Go SDK using Go's package manager.

LANGUAGE: bash
CODE:
go get github.com/getsentry/raven-go

----------------------------------------

TITLE: Rendering Alert Component for Trial/Enterprise Feature in React
DESCRIPTION: This code snippet renders an Alert component with a message indicating that a certain feature is only available on Trial or Enterprise plans. It includes a link to Sentry's pricing page for more information.

LANGUAGE: JSX
CODE:
<Alert>

This feature is available only if your organization is on <a href="https://sentry.io/pricing/" target="_blank">a Trial or Enterprise plan</a>.

</Alert>

----------------------------------------

TITLE: Generic String Value Scrubbing
DESCRIPTION: Generic rule for scrubbing username information from any string values.

LANGUAGE: regex
CODE:
[Remove] [Usernames in filepaths] from [$string]

----------------------------------------

TITLE: Sending Breadcrumbs from Log File with Sentry CLI
DESCRIPTION: Shows how to send a log file as breadcrumbs along with an event using the --logfile parameter.

LANGUAGE: bash
CODE:
sentry-cli send-event -m "task failed" --logfile error.log

----------------------------------------

TITLE: Implementing Sentry Before Send Callback in PHP
DESCRIPTION: PHP service class that implements the before_send callback for Sentry. Contains logic to set custom fingerprints for database unavailability errors before sending events to Sentry.

LANGUAGE: php
CODE:
<?php

namespace App\Service;

class Sentry
{
    public function getBeforeSend(): callable
    {
        return function(\Sentry\Event $event, ?\Sentry\EventHint $hint): ?\Sentry\Event {
            if ($hint !== null && $hint->exception !== null && str_contains($hint->exception->getMessage(), 'database unavailable')) {
                $event->setFingerprint(['database-unavailable']);
            }

            return $event;
        };
    }
}

----------------------------------------

TITLE: Spring Boot 3 Span Annotation (Java)
DESCRIPTION: Example of using @SentrySpan annotation to create spans around method executions in Spring Boot 3

LANGUAGE: java
CODE:
import org.springframework.stereotype.Component;
import io.sentry.spring.jakarta.tracing.SentrySpan;

@Component
class PersonService {

  @SentrySpan
  Person findById(Long id) {
    ...
  }
}

----------------------------------------

TITLE: Implementing Before-Send Hook in GDScript
DESCRIPTION: Example of implementing a before-send hook to filter or modify events before they are sent to Sentry, including PII redaction and environment-based filtering.

LANGUAGE: gdscript
CODE:
func _before_send(event: SentryEvent) -> SentryEvent:
	if event.environment.contains("editor"):
		# Discard event if running from the editor.
		return null
	if event.message.contains("Bruno"):
		# Remove sensitive information from the event.
		event.message = event.message.replace("Bruno", "REDACTED")
	return event

----------------------------------------

TITLE: Configuring Sentry Settings with Delegate
DESCRIPTION: Sets up a delegate for configuring Sentry settings and binds it to a handler function. The handler function assigns the custom BeforeSend handler to the settings.

LANGUAGE: cpp
CODE:
FConfigureSettingsDelegate SettingsDelegate;
SettingsDelegate.BindDynamic(this, &USomeClass::HandleSettingsDelegate);

void USomeClass::HandleSettingsDelegate(USentrySettings* Settings)
{
    Settings->BeforeSendHandler = USomeBeforeSendHandler::StaticCLass();
}

----------------------------------------

TITLE: Installing Sentry SDK with RQ Support
DESCRIPTION: Command to install sentry-sdk Python package with RQ integration support using pip.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk[rq]'

----------------------------------------

TITLE: Injecting Tracing Information into Outgoing HTTP Requests in Ruby
DESCRIPTION: Shows how to add tracing information to outgoing HTTP requests using Sentry's get_trace_propagation_headers function. This is useful when the HTTP library doesn't use net/http internally.

LANGUAGE: ruby
CODE:
# using custom HTTPRequest implementation
HTTPRequest.get('https://example.com', headers: Sentry.get_trace_propagation_headers)

----------------------------------------

TITLE: Extended SDK Configuration
DESCRIPTION: Example of initializing Sentry SDK with additional configuration options beyond the basic DSN.

LANGUAGE: javascript
CODE:
Sentry.init({
    'dsn': '___PROJECT.DSN___',
    'foo': 'bar'
})

----------------------------------------

TITLE: Capturing React Component Names
DESCRIPTION: Enables capturing of React component names for better visibility in Sentry features like Session Replay.

LANGUAGE: JavaScript
CODE:
export default withSentryConfig(nextConfig, {
  reactComponentAnnotation: {
    enabled: true,
  },
});

----------------------------------------

TITLE: Capturing React Component Names
DESCRIPTION: Enables capturing of React component names for better visibility in Sentry features like Session Replay.

LANGUAGE: JavaScript
CODE:
export default withSentryConfig(nextConfig, {
  reactComponentAnnotation: {
    enabled: true,
  },
});

----------------------------------------

TITLE: Configuring Microsoft Teams Integration in YAML
DESCRIPTION: This YAML configuration snippet sets up the client ID and secret for the Microsoft Teams integration in Sentry's config.yml file. These values are obtained during the app creation process in the Microsoft Teams Developer Portal.

LANGUAGE: yaml
CODE:
# Microsoft Teams #
msteams.client-id: 'your-bot-client-id'
msteams.client-secret: 'your-bot-secret'

----------------------------------------

TITLE: Source Map URL Comment Example
DESCRIPTION: Example of sourceMappingURL comment in minified JavaScript file

LANGUAGE: javascript
CODE:
// -- end script.min.js (located at http://localhost:8000/scripts/script.min.js)
// sourceMappingURL=script.min.js.map

----------------------------------------

TITLE: Setting Sentry Environment in C#
DESCRIPTION: This snippet shows how to set the environment to 'production' for the Sentry SDK in C#. It should be added to the SDK initialization callback.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.Environment = "production";

----------------------------------------

TITLE: Configuring SentryTracingFilter for Spring 6 in Java
DESCRIPTION: This snippet demonstrates the configuration of SentryTracingFilter for automatic trace sending in a Spring 6 application using Java. It extends AbstractAnnotationConfigDispatcherServletInitializer and overrides the getServletFilters method to include SentryTracingFilter from the jakarta package.

LANGUAGE: java
CODE:
import io.sentry.spring.jakarta.tracing.SentryTracingFilter;
import jakarta.servlet.Filter;
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

public class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {
  // ...
  @Override
  protected Filter[] getServletFilters() {
    return new Filter[] {new SentryTracingFilter()};
  }
}

----------------------------------------

TITLE: Extracting Incoming Trace Headers with Sentry Go SDK
DESCRIPTION: Demonstrates how to extract and store incoming tracing information from HTTP headers using sentry.ContinueTrace(). Processes both sentry-trace and baggage headers from the request.

LANGUAGE: go
CODE:
hub := sentry.CurrentHub()
sentry.ContinueTrace(hub, r.Header.Get(sentry.SentryTraceHeader), r.Header.Get(sentry.SentryBaggageHeader)),

----------------------------------------

TITLE: Setting Basic Fingerprint in Sentry SDK
DESCRIPTION: Demonstrates how to set a basic fingerprint by passing values directly as an array of strings. This overrides Sentry's default grouping behavior.

LANGUAGE: JavaScript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['my-view-function']);
  Sentry.captureException(error);
});

LANGUAGE: Python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.fingerprint = ['my-view-function']
    sentry_sdk.capture_exception(error)

LANGUAGE: Java
CODE:
Sentry.withScope(scope -> {
    scope.setFingerprint(Arrays.asList("my-view-function"));
    Sentry.captureException(error);
});

LANGUAGE: Ruby
CODE:
Sentry.with_scope do |scope|
  scope.set_fingerprint(['my-view-function'])
  Sentry.capture_exception(error)
end

LANGUAGE: PHP
CODE:
\Sentry\withScope(function (\Sentry\State\Scope $scope) use ($error): void {
    $scope->setFingerprint(['my-view-function']);
    \Sentry\captureException($error);
});

LANGUAGE: C#
CODE:
using (SentrySdk.PushScope())
{
    SentrySdk.ConfigureScope(scope =>
    {
        scope.SetFingerprint(new [] { "my-view-function" });
    });
    SentrySdk.CaptureException(error);
}

----------------------------------------

TITLE: Configuring Sentry SDK with Release
DESCRIPTION: JavaScript configuration for specifying release version in Sentry SDK initialization.

LANGUAGE: javascript
CODE:
Sentry.init({
  // This value must be identical to the release name specified during upload
  // with the `sentry-cli`.
  release: "<release_name>",
});

----------------------------------------

TITLE: Installing Sentry Vue Package with Yarn
DESCRIPTION: This snippet demonstrates the installation of the @sentry/vue package using Yarn. Yarn automatically adds the package to the project's dependencies.

LANGUAGE: bash
CODE:
yarn add @sentry/vue

----------------------------------------

TITLE: Initializing Sentry with Web Worker
DESCRIPTION: Main application code showing how to initialize Sentry and create a Web Worker. This setup enables capturing unhandled errors from the worker.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
});

const worker = new Worker("worker.js");

// Errors from `onmessage` callback of `worker.js`
// will be captured.
worker.postMessage("Hello!");

----------------------------------------

TITLE: Initializing Sentry SDK with Svelte Integration
DESCRIPTION: Demonstrates the initialization of Sentry SDK with feedback integration for a Svelte application. The code imports the Sentry SDK, sets up the DSN (Data Source Name), and configures the feedback integration with system color scheme support.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/svelte";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.feedbackIntegration({
      // Additional SDK configuration goes in here, for example:
      colorScheme: "system",
    }),
  ],
});

----------------------------------------

TITLE: Registering on_crash Hook in C for Sentry
DESCRIPTION: This snippet shows how to register an on_crash hook with Sentry. The hook runs in the context of a signal handler and should follow strict guidelines to avoid causing faults.

LANGUAGE: c
CODE:
void on_crash(const sentry_ucontext_t *uctx, void *userdata) {
    // Perform crash-time operations
    // Be cautious of stack usage and follow signal handler guidelines
}

sentry_options_t *options = sentry_options_new();
sentry_options_set_on_crash(options, on_crash, NULL);
sentry_init(options);

----------------------------------------

TITLE: Installing Sentry File Dependencies in Dart
DESCRIPTION: YAML configuration for adding Sentry and sentry_file package dependencies to a Dart project.

LANGUAGE: yaml
CODE:
dependencies:
  sentry: ^6.18.0
  sentry_file: ^6.18.0

----------------------------------------

TITLE: Initializing Sentry for Client-Side JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry for client-side JavaScript applications. It includes the DSN and a commented-out section for older SDK versions that required explicit metrics integration.

LANGUAGE: JavaScript
CODE:
// hooks.client.js
Sentry.init({
  dsn: '___PUBLIC_DSN___',
  // Only needed for SDK versions < 8.0.0
  // integrations: [
  //   Sentry.metrics.metricsAggregatorIntegration(),
  // ],
});

----------------------------------------

TITLE: Setting User Context in Sentry
DESCRIPTION: Configures user identification in Sentry by setting the user's email address. This helps associate error events with specific users for better error tracking and debugging.

LANGUAGE: javascript
CODE:
Sentry.setUser({ email: "john.doe@example.com" });

----------------------------------------

TITLE: Configuring BeforeSend with Request Access
DESCRIPTION: Implementation of BeforeSend callback with access to the original HTTP request context.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	BeforeSend: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
		if hint.Context != nil {
			if req, ok := hint.Context.Value(sentry.RequestContextKey).(*http.Request); ok {
				// You have access to the original Request here
			}
		}

		return event
	},
})

----------------------------------------

TITLE: Demonstrating File Naming Convention for Versioned Documentation
DESCRIPTION: Shows examples of file naming for original and versioned documentation pages, including both general version ranges and specific semantic versions.

LANGUAGE: markdown
CODE:
index.mdx (original)
index__v7.x.mdx (version 7.x.x)
index__v7.1.0.mdx (specific version 7.1.0)

----------------------------------------

TITLE: Using Database Wrapper Method
DESCRIPTION: Implementation using the openDatabaseWithSentry wrapper for selective database instrumentation.

LANGUAGE: dart
CODE:
import 'package:sentry_sqflite/sentry_sqflite.dart';
import 'package:sqflite/sqflite.dart';

final database = await openDatabaseWithSentry('path/to/db');
// or final database = await openReadOnlyDatabaseWithSentry('path/to/db');

----------------------------------------

TITLE: Setting User Context in Sentry PowerShell SDK
DESCRIPTION: Examples showing how to set user identification in Sentry scope using Edit-SentryScope. Demonstrates setting both user ID and username properties for user tracking.

LANGUAGE: powershell
CODE:
# User ID:
Edit-SentryScope {
    $_.User.Id = $actualUser.Id
}

# OR username:
Edit-SentryScope {
    $_.User.Username = $actualUser.Username
}

----------------------------------------

TITLE: Setting Sentry Environment Variables
DESCRIPTION: Environment variables required for Sentry CLI configuration. These include the organization slug, project slug, and authentication token.

LANGUAGE: bash
CODE:
SENTRY_ORG=___ORG_SLUG___
SENTRY_PROJECT=___PROJECT_SLUG___
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Configuring String Formatting Style
DESCRIPTION: Enables printf-style string formatting instead of the default MessageFormat style.

LANGUAGE: properties
CODE:
io.sentry.jul.SentryHandler.printfStyle=true

----------------------------------------

TITLE: Setting Tags Context in Sentry PHP Client
DESCRIPTION: Demonstrates how to set tags context for the Sentry client. Tags provide additional metadata for events.

LANGUAGE: php
CODE:
'tags' => array(
    'php_version' => phpversion(),
)

LANGUAGE: php
CODE:
$client->tags_context(array(
    'php_version' => phpversion(),
));

----------------------------------------

TITLE: Initializing Sentry with Extra Error Data Integration in Node.js
DESCRIPTION: This code initializes Sentry for a Node.js application. It imports the Sentry library, sets up the Data Source Name (DSN), and includes the extra error data integration. This configuration enables detailed error tracking and reporting in the application.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.extraErrorDataIntegration()],
});

----------------------------------------

TITLE: Specifying Monitor Environments in Bash
DESCRIPTION: This snippet demonstrates how to specify the environment when sending check-ins to a monitor using cURL commands.

LANGUAGE: bash
CODE:
SENTRY_INGEST="https://___ORG_INGEST_DOMAIN___"
SENTRY_CRONS="${SENTRY_INGEST}/api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/"

# 🟡 Notify Sentry your job is running in the dev environment:
curl "${SENTRY_CRONS}?environment=dev&status=in_progress"

# Execute your scheduled task here...

# 🟢 Notify Sentry your dev environment job has completed successfully:
curl "${SENTRY_CRONS}?environment=dev&status=ok"

----------------------------------------

TITLE: Configuring Sentry SDK with OpenFeature Integration
DESCRIPTION: Python code to initialize Sentry SDK with OpenFeature integration. Includes setting up DSN and enabling default PII data collection.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.openfeature import OpenFeatureIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    integrations=[
        OpenFeatureIntegration(),
    ],
)

----------------------------------------

TITLE: Configuring Sentry Client Integration
DESCRIPTION: Client-side initialization of Sentry SDK with SolidStart router integration for performance monitoring.

LANGUAGE: jsx
CODE:
import * as Sentry from '@sentry/solidstart';
import { solidRouterBrowserTracingIntegration } from '@sentry/solidstart/solidrouter';
import { mount, StartClient } from '@solidjs/start/client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [solidRouterBrowserTracingIntegration()],
  tracesSampleRate: 1.0, //  Capture 100% of the transactions
});

mount(() => <StartClient />, document.getElementById('app'));

----------------------------------------

TITLE: Rendering PageGrid Component in JSX
DESCRIPTION: Simple JSX component rendering for a PageGrid layout element used to structure the documentation page content.

LANGUAGE: jsx
CODE:
<PageGrid />

----------------------------------------

TITLE: Defining Response Context in Sentry SDK
DESCRIPTION: Example JSON structure for Response context, containing information about the HTTP response associated with the event.

LANGUAGE: json
CODE:
{
  "contexts": {
    "response": {
      "status_code": 404
    }
  }
}

----------------------------------------

TITLE: Initializing Statsig with Sentry Integration in SvelteKit
DESCRIPTION: Sets up Sentry with Statsig integration to track feature flags in error reports. Initializes Statsig client with SDK key and user ID, configures Sentry with DSN and Statsig integration, then demonstrates feature flag checking and error capturing.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/sveltekit';
import { StatsigClient } from '@statsig/js-client';

const statsigClient = new StatsigClient( YOUR_SDK_KEY, { userID: 'my-user-id' }, {} ); // see Statsig SDK reference.

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.statsigIntegration({featureFlagClient: statsigClient})],
});

await statsigClient.initializeAsync();  // or statsigClient.initializeSync();

const result = statsigClient.checkGate('my-feature-gate');
Sentry.captureException(new Error('something went wrong'));

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration (Current)
DESCRIPTION: Sets up Sentry error tracking with Unleash feature flags using the current recommended configuration. Initializes both Sentry and Unleash clients, configures the integration, and demonstrates basic feature flag checking and error capture.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/remix';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Modifying Attachments Before Sending in Sentry with JavaScript
DESCRIPTION: This snippet shows how to add or modify attachments before sending an event in Sentry. It demonstrates using the beforeSend hook and a global event processor to add attachments dynamically.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  beforeSend: (event, hint) => {
    hint.attachments = [{ filename: "screenshot.png", data: captureScreen() }];
    return event;
  },
});

Sentry.addEventProcessor((event, hint) => {
  hint.attachments = [{ filename: "log.txt", data: readLogFile() }];
  return event;
});

----------------------------------------

TITLE: Initializing SentryFlutter with Allowed URLs in Dart
DESCRIPTION: This code initializes SentryFlutter and configures allowed URL patterns for error reporting. It uses a regex pattern for Sentry's domain and a custom domain string.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.allowUrls = ["^https://sentry.com.*\$", "my-custom-domain"];
});

----------------------------------------

TITLE: Using Event Hints for Fingerprinting in JavaScript
DESCRIPTION: Utilize event hints in the beforeSend callback to modify event fingerprints based on the original exception type.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event, hint) {
    if (hint.originalException instanceof MyCustomError) {
      event.fingerprint = ['my-custom-error'];
    }
    return event;
  },
});

----------------------------------------

TITLE: Configuring Secret Key in YAML
DESCRIPTION: Sets a secret key used for session signing in Sentry.

LANGUAGE: yaml
CODE:
system.secret-key: "a-really-long-secret-value"

----------------------------------------

TITLE: Configuring CORS Headers for Sentry Trace Propagation
DESCRIPTION: This snippet shows an example of how to configure the Access-Control-Allow-Headers in the server's response to allow Sentry's trace propagation headers. It's important to note that the actual configuration will depend on the specific server setup.

LANGUAGE: plaintext
CODE:
"Access-Control-Allow-Headers: sentry-trace, baggage"

----------------------------------------

TITLE: Configuring Sentry Metrics in Dart
DESCRIPTION: This snippet shows how to initialize Sentry with metrics enabled in a Dart application. It sets the DSN and enables metrics in the Sentry options.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Future<void> main() async {
  await Sentry.init(
    (options) {
      options.dsn = '___PUBLIC_DSN___';
      options.enableMetrics = true;
    },
    appRunner: initApp, // Init your App.
  );
}

----------------------------------------

TITLE: Defining Debug Route for Sentry Error Reporting in JavaScript
DESCRIPTION: This code snippet defines an Express.js route that throws an error when accessed. It's designed to test Sentry error reporting integration by generating a deliberate error.

LANGUAGE: javascript
CODE:
router.get("/debug-sentry", function() {
  throw new Error("My first Sentry error!");
});

----------------------------------------

TITLE: Configuring Redux Enhancer for Action and State Tracking in React Native
DESCRIPTION: To track Redux actions and the latest store state as breadcrumbs, use the Sentry.createReduxEnhancer method when setting up your Redux store.

LANGUAGE: javascript
CODE:
Sentry.createReduxEnhancer()

----------------------------------------

TITLE: Adding File Attachment to Sentry Scope in PowerShell
DESCRIPTION: This snippet demonstrates how to add a file attachment to the current Sentry scope using the Edit-SentryScope function. It utilizes the ScopeExtensions class from the Sentry namespace to add the attachment. The file path is specified as a parameter to the AddAttachment method.

LANGUAGE: powershell
CODE:
# Add a file attachment to the current scope
Edit-SentryScope {
    [Sentry.ScopeExtensions]::AddAttachment($_, 'your/path/file.log')
}

----------------------------------------

TITLE: Adding File Attachment to Sentry Scope in PowerShell
DESCRIPTION: This snippet demonstrates how to add a file attachment to the current Sentry scope using the Edit-SentryScope function. It utilizes the ScopeExtensions class from the Sentry namespace to add the attachment. The file path is specified as a parameter to the AddAttachment method.

LANGUAGE: powershell
CODE:
# Add a file attachment to the current scope
Edit-SentryScope {
    [Sentry.ScopeExtensions]::AddAttachment($_, 'your/path/file.log')
}

----------------------------------------

TITLE: Finalizing Release with Build Steps
DESCRIPTION: Creates a new release, executes build steps, and finalizes the release afterward.

LANGUAGE: bash
CODE:
#!/bin/sh
sentry-cli releases new "$VERSION"
# do your build steps here
# once you are done, finalize
sentry-cli releases finalize "$VERSION"

----------------------------------------

TITLE: Using Lifecycle Token with Push Isolation Scope
DESCRIPTION: Example showing how to use the new lifecycle token with pushIsolationScope() in a try-with-resources block

LANGUAGE: java
CODE:
try (final @NotNull ISentryLifecycleToken ignored = Sentry.pushIsolationScope()) {
  // this block has its separate isolation scope
}

----------------------------------------

TITLE: Initializing Sentry with Replay and Canvas Integration in Gatsby
DESCRIPTION: This code initializes Sentry for a Gatsby project, configuring the DSN, session sampling rates, and integrating Replay and Canvas functionality. It sets up error tracking and performance monitoring with specific focus on capturing canvas interactions.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/gatsby";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    // Keep the Replay integration as before
    Sentry.replayIntegration(),

    // The following is all you need to enable canvas recording with Replay
    Sentry.replayCanvasIntegration(),
  ],
});

----------------------------------------

TITLE: Closing Sentry Client in Rust
DESCRIPTION: Demonstrates how to manually close a Sentry client with a specified shutdown timeout. The code retrieves the current client from the Hub and closes it with a 2-second timeout duration. This should only be called immediately before application shutdown.

LANGUAGE: rust
CODE:
use std::time::Duration;

if let Some(client) = sentry::Hub::current().client() {
    client.close(Some(Duration::from_secs(2)));
}

----------------------------------------

TITLE: Initializing Sentry with Koa in Node.js (ESM)
DESCRIPTION: Example of setting up Sentry with a Koa application using ECMAScript modules. It shows the updated initialization process for Sentry Node SDK 8.x.

LANGUAGE: javascript
CODE:
import "./instrument";
import Koa from "koa";
import * as Sentry from "@sentry/node";
const app = new Koa();

Sentry.setupKoaErrorHandler(app);

// Add your routes, etc.

app.listen(3030);

----------------------------------------

TITLE: Setting Sentry Scope Tag in Kotlin
DESCRIPTION: This snippet demonstrates how to configure the Sentry scope and set a tag using Kotlin. It imports the Sentry class and uses the configureScope function to set a 'page.locale' tag with a value of 'de-at'.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.configureScope { scope ->
  scope.setTag("page.locale", "de-at")
}

----------------------------------------

TITLE: Initializing Sentry with Multiplexed Transport (NPM)
DESCRIPTION: NPM-based setup for automatic error routing using moduleMetadataIntegration and multiplexed transport. Requires Sentry SDK version 7.59.0 or higher.

LANGUAGE: javascript
CODE:
import {
  init,
  makeFetchTransport,
  moduleMetadataIntegration,
  makeMultiplexedTransport,
} from "@sentry/browser";

const EXTRA_KEY = "ROUTE_TO";

const transport = makeMultiplexedTransport(makeFetchTransport, (args) => {
  const event = args.getEvent();
  if (
    event &&
    event.extra &&
    EXTRA_KEY in event.extra &&
    Array.isArray(event.extra[EXTRA_KEY])
  ) {
    return event.extra[EXTRA_KEY];
  }
  return [];
});

init({
  dsn: "__DEFAULT_DSN__",
  integrations: [moduleMetadataIntegration()],
  transport,
  beforeSend: (event) => {
    if (event?.exception?.values?.[0].stacktrace.frames) {
      const frames = event.exception.values[0].stacktrace.frames;
      const routeTo = frames
        .filter((frame) => frame.module_metadata && frame.module_metadata.dsn)
        .map((v) => v.module_metadata)
        .slice(-1);

      if (routeTo.length) {
        event.extra = {
          ...event.extra,
          [EXTRA_KEY]: routeTo,
        };
      }
    }

    return event;
  },
});

----------------------------------------

TITLE: Capturing Exceptions in C#
DESCRIPTION: Capture exceptions in a try-catch block using the RavenClient.

LANGUAGE: csharp
CODE:
try
{
    int i2 = 0;
    int i = 10 / i2;
}
catch (Exception exception)
{
    ravenClient.Capture(new SentryEvent(exception));
}

----------------------------------------

TITLE: Installing Sentry Isar Dependencies in Flutter
DESCRIPTION: Package dependencies configuration in pubspec.yaml for setting up Sentry Isar instrumentation.

LANGUAGE: yaml
CODE:
dependencies:
sentry_flutter: ^{{@inject packages.version('sentry.dart.flutter', '7.16.0') }}
sentry_isar: ^{{@inject packages.version('sentry.dart.isar', '7.16.0') }}
path_provider: ^2.0.0

----------------------------------------

TITLE: Initializing Sentry for Server-Side JavaScript
DESCRIPTION: This snippet demonstrates the initialization of Sentry for server-side JavaScript applications. It includes the DSN and a commented-out section for older SDK versions that required enabling metrics aggregator experiment.

LANGUAGE: JavaScript
CODE:
// hooks.server.js
Sentry.init({
  dsn: '___PUBLIC_DSN___',
  // Only needed for SDK versions < 8.0.0
  // _experiments: {
  //   metricsAggregator: true,
  // },
});

----------------------------------------

TITLE: Setting User Context in Sentry with Elixir
DESCRIPTION: Sets user context in Sentry by specifying the user's email address. The IP address is automatically handled by Sentry.PlugContext and does not need to be manually set.

LANGUAGE: elixir
CODE:
Sentry.Context.set_user_context(%{
  email: "jane.doe@example.com"
})

----------------------------------------

TITLE: Configuring Quantum Integration in Elixir Config
DESCRIPTION: Configuration snippet for enabling Quantum cron monitoring in Sentry. This is added to the project's config/config.exs file under the :sentry configuration block with the :integrations key.

LANGUAGE: elixir
CODE:
config :sentry,
  # ...,
  integrations: [
    quantum: [
      cron: [enabled: true]
    ]
  ]

----------------------------------------

TITLE: Capturing API Request Details with Sentry SDK in Python
DESCRIPTION: This code demonstrates how to use Sentry SDK to capture detailed information about an API request. It sets tags for the base URL and endpoint, and stores the request parameters as structured data. This approach allows for more granular analysis of the request in Sentry's performance monitoring tools.

LANGUAGE: python
CODE:
import sentry_sdk

# ...

base_url = "https://empowerplant.io"
endpoint = "/api/0/projects/ep/setup_form"
parameters = {
    "user_id": 314159265358979323846264338327,
    "tracking_id": "EasyAsABC123OrSimpleAsDoReMi",
    "product_name": PlantToHumanTranslator,
    "product_id": 161803398874989484820458683436563811772030917980576,
}

with sentry_sdk.start_span(op="request", transaction="setup form") as span:
    span.set_tag("base_url", base_url)
    span.set_tag("endpoint", endpoint)
    span.set_data("parameters", parameters)
    make_request(
        "{base_url}/{endpoint}/".format(
            base_url=base_url,
            endpoint=endpoint,
        ),
        data=parameters
    )

    # ...

----------------------------------------

TITLE: Verifying Installation in Python
DESCRIPTION: This code snippet shows how to verify and finalize a Sentry integration installation by sending a PUT request to mark the installation status as 'installed'.

LANGUAGE: python
CODE:
requests.put(
    u'https://sentry.io/api/0/sentry-app-installations/{}/'.format(install_id),
    json={'status': 'installed'},
)

----------------------------------------

TITLE: Installing Sentry Kotlin Compiler Plugin in Gradle (Kotlin DSL)
DESCRIPTION: Shows how to add the Sentry Kotlin Compiler Plugin to a Gradle build file using the Kotlin DSL. This needs to be applied to every relevant Gradle module.

LANGUAGE: kotlin
CODE:
plugins {
  id("io.sentry.kotlin.compiler.gradle") version "{{@inject packages.version('sentry.kotlin.compiler-plugin', '3.7.0') }}"
}

----------------------------------------

TITLE: Initializing Sentry SDK in Java
DESCRIPTION: Shows how to initialize the Sentry SDK in Java and configure the environment setting to 'production'. Uses the options lambda to set configuration parameters.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setEnvironment("production");
});

----------------------------------------

TITLE: Initializing Raven Client with Eventlet Transport in Python
DESCRIPTION: Demonstrates how to use the EventletHTTPTransport with Raven Client. This should only be used within an Eventlet IO loop.

LANGUAGE: python
CODE:
from raven.transport.eventlet import EventletHTTPTransport

Client('...', transport=EventletHTTPTransport)

----------------------------------------

TITLE: Creating and Managing Deploys
DESCRIPTION: Commands for creating and listing deploys associated with releases.

LANGUAGE: bash
CODE:
sentry-cli deploys new --release "$VERSION" -e ENVIRONMENT

LANGUAGE: bash
CODE:
start=$(date +%s)
...
now=$(date +%s)
sentry-cli deploys new --release "$VERSION" -e ENVIRONMENT -t $((now-start))

LANGUAGE: bash
CODE:
sentry-cli deploys list --release "$VERSION"

----------------------------------------

TITLE: Disabling Distributed Tracing in Sentry Cloudflare SDK
DESCRIPTION: This snippet shows how to initialize Sentry with distributed tracing disabled by setting tracePropagationTargets to an empty array. It also sets a 100% trace sample rate for development purposes.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Capture 100% of spans. This is useful for development and debugging. Consider reducing in production or using traceSampler
  tracesSampleRate: 1.0,
  // Overwrite the defaults to ensure no trace headers are sent
  tracePropagationTargets: [],
});

----------------------------------------

TITLE: Initializing Sentry SDK with Release Information in Dart
DESCRIPTION: This code initializes the Sentry SDK and sets the release information. The release is formatted as 'packageName@versionName+buildNumber', which helps in identifying the specific version of the application when tracking errors.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  // packageName@versionName+buildNumber
  options.release = 'my-project-name@2.3.12+12';
});

----------------------------------------

TITLE: Sentry Integrations Feature Matrix Table
DESCRIPTION: Markdown table showing feature matrix for Sentry integrations, including breadcrumbs, context lines, dedupe, Deno context, function to string, global handlers, inbound filters, linked errors, capture console, Deno cron, extra error data, rewrite frames, and tRPC middleware integrations.

LANGUAGE: markdown
CODE:
|                                                     | **Auto Enabled** | **Errors** | **Tracing** | **Cron** | **Additional Context** |
| --------------------------------------------------- | :--------------: | :--------: | :---------: | :------: | :--------------------: |
| [`breadcrumbsIntegration`](./breadcrumbs)           |        ✓         |            |             |          |           ✓            |
| [`contextLinesIntegration`](./contextlines)         |        ✓         |     ✓      |             |          |                        |
| [`dedupeIntegration`](./dedupe)                     |        ✓         |     ✓      |             |          |                        |
| [`denoContextIntegration`](./denocontext)           |        ✓         |            |             |          |           ✓            |
| [`functionToStringIntegration`](./functiontostring) |        ✓         |            |             |          |                        |
| [`globalHandlersIntegration`](./globalhandlers)     |        ✓         |     ✓      |             |          |                        |
| [`inboundFiltersIntegration`](./inboundfilters)     |        ✓         |     ✓      |             |          |                        |
| [`linkedErrorsIntegration`](./linkederrors)         |        ✓         |     ✓      |             |          |                        |
| [`captureConsoleIntegration`](./captureconsole)     |                  |            |             |          |           ✓            |
| [`denoCronIntegration`](./denocron)                 |                  |            |             |    ✓     |                        |
| [`extraErrorDataIntegration`](./extraerrordata)     |                  |            |             |          |           ✓            |
| [`rewriteFramesIntegration`](./rewriteframes)       |                  |     ✓      |             |          |                        |
| [`trpcMiddleware`](./trpc)                          |                  |     ✓      |      ✓      |          |           ✓            |

----------------------------------------

TITLE: Setting Tags with Hashed Sensitive Data
DESCRIPTION: Example showing how to hash confidential information before sending it to Sentry as a tag.

LANGUAGE: javascript
CODE:
Sentry.setTag("user_email:hash", hash(user.email));

----------------------------------------

TITLE: Retrieving Sentry Transaction Spans in Kotlin
DESCRIPTION: Demonstrates a more concise approach to span management using Kotlin's null-safe operators. Implements the same functionality as the Java version with simplified syntax for span creation and error handling.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SpanStatus

val span = Sentry.getSpan()?.startChild("task") ?: Sentry.startTransaction("transaction-name", "task")

try {
  // omitted code
} catch (e: Exception) {
  span.throwable = e
  span.status = SpanStatus.INTERNAL_ERROR
  throw e
} finally {
  span.finish()
}

----------------------------------------

TITLE: Configuring Sentry with Rails Parameter Filter
DESCRIPTION: Shows how to initialize Sentry SDK with Rails parameter filtering to sanitize event data before sending. Uses ActiveSupport::ParameterFilter for Rails 6+ or ActionDispatch::Http::ParameterFilter for Rails 5 to filter sensitive information from event extras, user data, and contexts.

LANGUAGE: ruby
CODE:
require "active_support/parameter_filter"

Sentry.init do |config|
  #...

  # this example uses Rails' parameter filter to sanitize the event payload
  # for Rails 6+
  filter = ActiveSupport::ParameterFilter.new(Rails.application.config.filter_parameters)
  # for Rails 5
  filter = ActionDispatch::Http::ParameterFilter.new(Rails.application.config.filter_parameters)

  config.before_send = lambda do |event, _hint|
    # Sanitize extra data
    if event.extra
      event.extra = filter.filter(event.extra)
    end

    # Sanitize user data
    if event.user
      event.user = filter.filter(event.user)
    end

    # Sanitize context data (if present)
    if event.contexts
      event.contexts = filter.filter(event.contexts)
    end

    # Return the sanitized event object
    event
  end
end

----------------------------------------

TITLE: Enabling Sentry Profiling in JavaScript
DESCRIPTION: Configuration to enable both tracing and profiling in Sentry, with both sample rates set to 100%. The profilesSampleRate is relative to tracesSampleRate.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___DSN___",
  // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.
  // We recommend adjusting this value in production.
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,
  // profilesSampleRate is relative to tracesSampleRate.
  // Here, we'll capture profiles for 100% of transactions.
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Options Event JSON Structure
DESCRIPTION: Example of a replay recording options event containing SDK configuration settings.

LANGUAGE: json
CODE:
{
  "type": 5,
  "timestamp": 1709218280301,
  "data": {
    "tag": "options",
    "payload": {
      "shouldRecordCanvas": false,
      "sessionSampleRate": 1,
      "errorSampleRate": 1,
      "useCompressionOption": true,
      "blockAllMedia": false,
      "maskAllText": false,
      "maskAllInputs": false,
      "useCompression": false,
      "networkDetailHasUrls": false,
      "networkCaptureBodies": true,
      "networkRequestHasHeaders": true,
      "networkResponseHasHeaders": true
    }
  }
}

----------------------------------------

TITLE: Initializing Raven Client with Custom Transport in Python
DESCRIPTION: Demonstrates how to initialize a Raven Client with a custom transport class. The transport class is passed via the 'transport' parameter on Client initialization.

LANGUAGE: python
CODE:
from raven import Client

Client('...', transport=TransportClass)

----------------------------------------

TITLE: Initializing Sentry Transaction Filtering in Kotlin
DESCRIPTION: Shows how to initialize Sentry in a Kotlin Android application with a beforeSendTransaction callback that filters transactions based on route paths. Uses Kotlin's more concise syntax to achieve the same filtering functionality as the Java example.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid;
import io.sentry.SentryOptions.BeforeSendTransactionCallback

SentryAndroid.init(this) { options ->
  options.beforeSendTransaction = BeforeSendTransactionCallback { transaction, hint ->
    // Modify or drop the transaction here:
    if ("/unimportant/route" == transaction.transaction) {
      // Don't send the transaction to Sentry
      null
    } else {
      transaction
    }
  }
}

----------------------------------------

TITLE: Sending Parameterized Events with Sentry CLI
DESCRIPTION: Demonstrates how to send events with parameterized messages using placeholders and the -a parameter.

LANGUAGE: bash
CODE:
sentry-cli send-event -m "Hello %s!" -a "Joe"
sentry-cli send-event -m "Hello %s!" -a "Peter"

----------------------------------------

TITLE: Formatting Complete Client Report Envelope
DESCRIPTION: Shows the complete envelope structure for sending client reports, including the empty header and type declaration.

LANGUAGE: json
CODE:
{}
{"type":"client_report"}
{"timestamp":"..."}

----------------------------------------

TITLE: Setting Tags with Hashed Sensitive Data in Sentry
DESCRIPTION: Example of hashing confidential information before sending it to Sentry as a tag, allowing for internal correlation while maintaining confidentiality.

LANGUAGE: javascript
CODE:
Sentry.setTag("email", "766bf655f3b6e21cc815f644b7cddb2f")

----------------------------------------

TITLE: Ensuring Request Isolation with Sentry 8.x (ESM)
DESCRIPTION: Example of ensuring request isolation for non-HTTP scenarios using Sentry.withIsolationScope() in ECMAScript modules. This replaces the previous Sentry.runWithAsyncContext method.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

function myScheduledJob() {
  return Sentry.withIsolationScope(async () => {
    await doSomething();
    await doSomethingElse();
    return { status: "DONE" };
  });
}

----------------------------------------

TITLE: Building ARM 32-bit APK for Android with Sentry Flutter SDK
DESCRIPTION: Command to build a Flutter app for a specific ABI (ARM 32-bit) on Android, including the necessary flags for the Sentry Flutter SDK.

LANGUAGE: bash
CODE:
flutter build apk --target-platform=android-arm --split-per-abi

----------------------------------------

TITLE: Installing Sentry SvelteKit SDK
DESCRIPTION: Commands to install the Sentry SvelteKit SDK using npm, yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
npm install @sentry/sveltekit --save

LANGUAGE: bash
CODE:
yarn add @sentry/sveltekit

LANGUAGE: bash
CODE:
pnpm add @sentry/sveltekit

----------------------------------------

TITLE: Generating ProGuard UUIDs in Python
DESCRIPTION: Algorithm for generating deterministic UUIDs for ProGuard files based on file content checksums. Uses UUID namespace functionality to create consistent identifiers.

LANGUAGE: python
CODE:
import uuid

NAMESPACE = uuid.uuid5(uuid.NAMESPACE_DNS, "guardsquare.com")

def get_proguard_uuid(filename):
    with open(filename, 'rb') as f:
        return uuid.uuid5(NAMESPACE, f.read())

----------------------------------------

TITLE: Implementing Custom Sampling Function for Sentry Transactions
DESCRIPTION: Use a custom sampling function to dynamically decide which transactions to send to Sentry based on the sampling context. This example shows how to implement and use a tracesSampler function.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // Example function to choose traces to send to Sentry
  tracesSampler: samplingContext => {
    if (samplingContext.parentSampled !== undefined) {
      return samplingContext.parentSampled
    }
    if ("...some condition...") {
      // These are important - take a big sample
      return 0.5
    }
    if ("...another condition...") {
      // These are less important or happen much more frequently - only take 1%
      return 0.01
    }
    // Default sample rate
    return 0.1
  },
});

----------------------------------------

TITLE: Initializing NestJS Application with Sentry Instrumentation
DESCRIPTION: This snippet shows how to set up a basic NestJS application with Sentry instrumentation. It imports the Sentry instrumentation first, then creates and starts the NestJS application.

LANGUAGE: javascript
CODE:
// Import this first!
import "./instrument";

// Now import other modules
import { NestFactory } from "@nestjs/core";
import { AppModule } from "./app.module";

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(3000);
}

bootstrap();

----------------------------------------

TITLE: Markdown List of Issue Tracking Integrations
DESCRIPTION: A markdown formatted list of supported issue tracking integrations with links to their respective documentation pages.

LANGUAGE: markdown
CODE:
- [Asana](/organization/integrations/issue-tracking/asana/)
- [Azure DevOps (Work Items)](/organization/integrations/source-code-mgmt/azure-devops/)
- [Bitbucket (Issues)](/organization/integrations/source-code-mgmt/bitbucket/)
- [ClickUp](/organization/integrations/issue-tracking/clickup/)
- [GitHub (Issues)](/organization/integrations/source-code-mgmt/github/)
- [GitLab (Issues)](/organization/integrations/source-code-mgmt/gitlab/)
- [Goast.ai](/organization/integrations/issue-tracking/goast/)
- [Height](/organization/integrations/issue-tracking/height/)
- [Incident.io](/organization/integrations/issue-tracking/incidentio/)
- [Jira/Jira Server](/organization/integrations/issue-tracking/jira/)
- [Kitemaker](/organization/integrations/issue-tracking/kitemaker/)
- [Linear](/organization/integrations/issue-tracking/linear/)
- Phabricator
- Pivotal Tracker
- Redmine
- [Shortcut](/organization/integrations/issue-tracking/shortcut/)
- [Sourcegraph](/organization/integrations/issue-tracking/sourcegraph/)
- [Teamwork](/organization/integrations/issue-tracking/teamwork/)
- Trello

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Ruby
DESCRIPTION: This method demonstrates how to use Sentry to capture exceptions with custom fingerprinting. It includes the method name and action name in the fingerprint for better error grouping.

LANGUAGE: ruby
CODE:
def do_something(action_name)
  # some code
rescue => exception
  Sentry.capture_exception(exception, fingerprint: [__method__, action_name])
end

----------------------------------------

TITLE: Defining User Interface Attributes in JSON for Sentry
DESCRIPTION: This JSON snippet demonstrates how to structure user data for Sentry. It includes essential attributes like id, username, email, and ip_address, as well as a custom attribute 'subscription'. This format allows Sentry to identify unique users and provide useful analytics.

LANGUAGE: json
CODE:
{
  "user": {
    "id": "unique_id",
    "username": "my_user",
    "email": "foo@example.com",
    "ip_address": "127.0.0.1",
    "subscription": "basic"
  }
}

----------------------------------------

TITLE: Installing Sentry SvelteKit SDK using NPX
DESCRIPTION: Use the Sentry wizard to automatically install the SDK for SvelteKit.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i sveltekit

----------------------------------------

TITLE: Setting a Tag in Sentry
DESCRIPTION: This snippet shows how to set a tag in Sentry. The exact method call varies depending on the programming language, but typically involves calling a 'setTag' or similar method on the Sentry object.

LANGUAGE: javascript
CODE:
Sentry.setTag("page_locale", "de-at");

LANGUAGE: python
CODE:
sentry_sdk.set_tag("page_locale", "de-at")

LANGUAGE: ruby
CODE:
Sentry.set_tags(page_locale: "de-at")

LANGUAGE: php
CODE:
\Sentry\setTag('page_locale', 'de-at');

LANGUAGE: java
CODE:
Sentry.setTag("page_locale", "de-at");

LANGUAGE: csharp
CODE:
SentrySdk.SetTag("page_locale", "de-at");

LANGUAGE: go
CODE:
sentry.SetTag("page_locale", "de-at")

LANGUAGE: rust
CODE:
sentry::configure_scope(|scope| {
    scope.set_tag("page_locale", "de-at");
});

LANGUAGE: native
CODE:
sentry_set_tag("page_locale", "de-at");

----------------------------------------

TITLE: Adjusting System.Net.Http Assembly Version in Web.config
DESCRIPTION: This XML configuration lowers the newVersion of System.Net.Http to 4.0.0.0 to resolve Sentry initialization errors.

LANGUAGE: xml
CODE:
<dependentAssembly>
  <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
  <bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.0.0.0" />
</dependentAssembly>

----------------------------------------

TITLE: Synchronous File Reading in Kotlin - Problematic Implementation
DESCRIPTION: Example of problematic file I/O operation on main thread in Kotlin that can cause UI blocking.

LANGUAGE: kotlin
CODE:
val file = File(context.cacheDir, "LoremIpsum.txt")
val content = file.readText()

----------------------------------------

TITLE: Creating CodePush Release for JSC (Standalone)
DESCRIPTION: Generates a CodePush release for JavaScript Core, including source map generation for Sentry symbolication.

LANGUAGE: bash
CODE:
code-push-standalone release-react \
  "${APP_NAME}" \
  "${PLATFORM}" \
  --deploymentName "${DEPLOYMENT_NAME}" \
  --outputDir ./build \
  --sourcemapOutput ./build

----------------------------------------

TITLE: Splitting WASM Debug Information using wasm-split
DESCRIPTION: This command uses the wasm-split tool to separate the debug information from a WASM file. It modifies the original file in place to add a build_id and remove debug information, while creating a separate debug file.

LANGUAGE: shell
CODE:
wasm-split /path/to/file.wasm -d /path/to/file.debug.wasm --strip

----------------------------------------

TITLE: Chaining HTTP Handlers with SentryHttpMessageHandler in C#
DESCRIPTION: Shows how to chain SentryHttpMessageHandler with other HTTP handlers using the DelegatingHandler pattern.

LANGUAGE: csharp
CODE:
var innerHttpHandler = new HttpClientHandler();
var sentryHttpHandler = new SentryHttpMessageHandler(innerHttpHandler);
var httpClient = new HttpClient(sentryHttpHandler);

----------------------------------------

TITLE: Configuring Scope with User Information in C++
DESCRIPTION: This snippet demonstrates how to use the configure_scope function to add custom tags and set user information in the current scope. It shows setting user ID, email, and adding a custom tag.

LANGUAGE: cpp
CODE:
sentry_set_user("user_id_here");
sentry_set_extra("character_name", "Mighty Fighter");
sentry_set_tag("level", "hard");

----------------------------------------

TITLE: Masking AndroidView in Jetpack Compose for Session Replay
DESCRIPTION: This Kotlin snippet shows how to mask an entire AndroidView in Jetpack Compose for Session Replay.

LANGUAGE: kotlin
CODE:
import io.sentry.android.replay.sentryReplayMask

AndroidView(
  modifier = Modifier.sentryReplayMask(),
  factory = { context -> ... }
)

----------------------------------------

TITLE: Rendering Plan Restriction Alert in JSX
DESCRIPTION: An Alert component that displays a notice about feature availability being limited to Trial, Business, or Enterprise plan subscribers with a link to the pricing page.

LANGUAGE: jsx
CODE:
<Alert>

This feature is available only if your organization is on <a href="https://sentry.io/pricing/" target="_blank">a Trial, Business, or Enterprise plan</a>.

</Alert>

----------------------------------------

TITLE: Initializing Sentry for Deno in JavaScript
DESCRIPTION: This code initializes Sentry for error tracking in a Deno environment. It sets up the DSN, configures the trace sample rate, and specifies trace propagation targets. The tracesSampleRate is set to 1.0 for development, but it's recommended to adjust this value in production or use tracesSampler for more precise control.

LANGUAGE: javascript
CODE:
import * as Sentry from "npm:@sentry/deno";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
});

----------------------------------------

TITLE: Configuring Sentry Scope and Setting Tag in Dart
DESCRIPTION: This snippet imports the Sentry package and configures the Sentry scope by setting a 'page.locale' tag with the value 'pt-BR'. This helps in organizing and filtering events in Sentry based on the page locale.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Sentry.configureScope((scope) => scope.setTag('page.locale', 'pt-BR'));

----------------------------------------

TITLE: Configuring HTTP Client for Sentry SDK in Elixir
DESCRIPTION: Specifies the HTTP client to use for sending events. It must implement the Sentry.HTTPClient behaviour. Defaults to Sentry.HackneyClient, which is based on the Hackney HTTP client.

LANGUAGE: elixir
CODE:
config :sentry,
  client: MyCustomClient

----------------------------------------

TITLE: Setting Error Transaction Name on Current Scope in JavaScript
DESCRIPTION: This snippet demonstrates how to set the transaction name on the current scope for error events in Sentry.

LANGUAGE: javascript
CODE:
Sentry.getCurrentScope().setTransactionName("UserListView");

----------------------------------------

TITLE: Implementing Callable for Sentry Config in Laravel
DESCRIPTION: This snippet demonstrates how to use a callable instead of a closure for Sentry configuration options in Laravel. This approach solves issues with config caching and serialization. The example uses the traces_sampler option but can be applied to any option accepting a closure.

LANGUAGE: php
CODE:
"traces_sampler" => [App\Exceptions\Sentry::class, "tracesSampler"],

LANGUAGE: php
CODE:
<?php

namespace App\Exceptions;

use Sentry\Tracing\SamplingContext;

class Sentry
{
    public static function tracesSampler(SamplingContext $context): float
    {
        // The code you would have placed in the closure...
    }
}

----------------------------------------

TITLE: Minimal JSON Stack Trace Representation
DESCRIPTION: This JSON snippet shows a minimalistic representation of a stack trace for the Python program above. It includes two frames, representing the 'main' and 'foo' functions in the correct order (oldest to newest).

LANGUAGE: json
CODE:
{
  "frames": [{ "function": "main" }, { "function": "foo" }]
}

----------------------------------------

TITLE: Setting ANR Timeout in Sentry Unity SDK
DESCRIPTION: This code snippet shows how to set a custom timeout for ANR detection in the Sentry Unity SDK. The timeout is set using a TimeSpan object.

LANGUAGE: csharp
CODE:
options.AnrTimeout = TimeSpan.FromSeconds(5);

----------------------------------------

TITLE: Initializing SentryFlutter with Custom Event Filter
DESCRIPTION: Demonstrates how to initialize the Sentry SDK in a Flutter application while implementing a beforeSend callback that filters events based on a custom hint type. The code specifically drops events when the hint is of type MyHint.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.beforeSend = (event, hint) {
    return hint is MyHint ? null : event;
  };
});

----------------------------------------

TITLE: Calculating Bursty Limit
DESCRIPTION: Formula for calculating the bursty limit using maximum hourly volume and coefficient of variation.

LANGUAGE: math
CODE:
limit_bursty = max_timeseries * min(max(2, 5e^(-0.65cv)), 5)

----------------------------------------

TITLE: Initializing Sentry with Sample Rate
DESCRIPTION: Configures Sentry error monitoring by setting up the SDK with a 25% sampling rate. This means that only 25% of events will be sent to Sentry, helping to manage data volume and costs while maintaining representative error tracking.

LANGUAGE: javascript
CODE:
Sentry.init({ sampleRate: 0.25 });

----------------------------------------

TITLE: Custom Sampling Configuration for Uptime Tracing
DESCRIPTION: Shows how to implement custom sampling logic in Node.js Express to ensure 100% sampling of spans from uptime checks while maintaining different sampling rates for other traffic.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Custom tracer function for a Node.js Express app
  tracesSampler: ({ name, attributes, parentSampled }) => {
    const userAgent = attributes?.["http.user_agent"];

    if (
      typeof userAgent === "string" &&
      userAgent.includes("SentryUptimeBot")
    ) {
      // Sample 100% of spans from SentryUptimeBot
      return 1;
    }

    // Sample 50% of other spans
    return 0.5;
  },
});

----------------------------------------

TITLE: Configuring Basic Sentry Trace Propagation for Next.js
DESCRIPTION: Basic configuration for Sentry's trace propagation targeting specific domains and API endpoints. Sets up browser tracing integration with CORS support.

LANGUAGE: javascript
CODE:
// sentry.client.config.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracePropagationTargets: ["https://myproject.org", /^\/api\//],
});

----------------------------------------

TITLE: Installing Sentry SDK and Typer using pip
DESCRIPTION: Install the Sentry Python SDK and Typer CLI using pip package manager.

LANGUAGE: bash
CODE:
pip install --upgrade "sentry-sdk" typer

----------------------------------------

TITLE: Retrieving Option Value in Python
DESCRIPTION: Shows how to import the options module and use the get method to retrieve an option's value.

LANGUAGE: python
CODE:
from sentry import options
feature_rate = options.get("performance.some-feature-rate")

----------------------------------------

TITLE: Example Profile JSON Structure for Sample Format V1
DESCRIPTION: Demonstrates the complete JSON structure for a profile using Sample Format V1, including debug metadata, device information, transaction details, and profile data.

LANGUAGE: json
CODE:
{
  "debug_meta": {
    "images": [
      {
        "debug_id": "32420279-25E2-34E6-8BC7-8A006A8F2425",
        "image_addr": "0x000000010258c000",
        "code_file": "/private/var/containers/Bundle/Application/C3511752-DD67-4FE8-9DA2-ACE18ADFAA61/TrendingMovies.app/TrendingMovies",
        "type": "macho",
        "image_size": 1720320,
        "image_vmaddr": "0x0000000100000000"
      }
    ]
  },
  "device": {
    "architecture": "arm64e",
    "is_emulator": true,
    "locale": "en_US",
    "manufacturer": "Apple",
    "model": "iPhone14,8"
  },
  "environment": "development",
  "event_id": "41fed0925670468bb0457f61a74688ec",
  "measurements": { ... },
  "os": {
    "build_number": "20D47",
    "name": "iOS",
    "version": "16.3"
  },
  "platform": "cocoa",
  "release": "1.0 (9999)",
  "runtime": {
    "name": "",
    "version": ""
  },
  "timestamp": "2023-01-01T00:00:00.000Z",
  "transaction": {
    "active_thread_id": "259",
    "id": "30976f2ddbe04ac9b6bffe6e35d4710c",
    "name": "example_ios_movies_sources.MoviesViewController",
    "trace_id": "4b25bc58f14243d8b208d1e22a054164"
  },
  "version": "1",
  "profile": {
    "samples": [
      {
        "elapsed_since_start_ns": 1234567890,
        "stack_id": 0,
        "thread_id": "259"
      }
    ],
    "stacks": [
      [ 0 ]
    ],
    "frames": [
      {
        "instruction_addr": "0xa722447ffffffffc"
      }
    ],
    "thread_metadata": {
      "259": {
        "priority": 31
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Custom Error Sampling in Sentry SDK with Python
DESCRIPTION: This code defines a custom error sampler function 'my_error_sampler' that determines the sampling rate for different error classes. It then initializes the Sentry SDK with this custom sampler. The function returns different sampling rates based on the error class, allowing for fine-grained control over which errors are reported to Sentry.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.types import Event, Hint


def my_error_sampler(event: Event, hint: Hint) -> float:
    error_class = hint["exc_info"][0]

    if error_class == MyException:
        return 0.5
    elif error_class == MyIgnoredException:
        return 0

    # All the other errors
    return 1.0


sentry_sdk.init(
    # ...

    error_sampler=my_error_sampler,
)

----------------------------------------

TITLE: Implementing Custom Error Sampling in Sentry SDK with Python
DESCRIPTION: This code defines a custom error sampler function 'my_error_sampler' that determines the sampling rate for different error classes. It then initializes the Sentry SDK with this custom sampler. The function returns different sampling rates based on the error class, allowing for fine-grained control over which errors are reported to Sentry.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.types import Event, Hint


def my_error_sampler(event: Event, hint: Hint) -> float:
    error_class = hint["exc_info"][0]

    if error_class == MyException:
        return 0.5
    elif error_class == MyIgnoredException:
        return 0

    # All the other errors
    return 1.0


sentry_sdk.init(
    # ...

    error_sampler=my_error_sampler,
)

----------------------------------------

TITLE: Setting Current Transaction in Sentry Hub
DESCRIPTION: Demonstrates how to create a new transaction with context and set it as the current transaction in the Sentry hub. Shows transaction initialization with name and operation type.

LANGUAGE: php
CODE:
$transactionContext = \Sentry\Tracing\TransactionContext::make()
    ->setName('Example Transaction');
    ->setOp('http.server');

$transaction = \Sentry\startTransaction($transactionContext);

// A transaction is a span so we set it using `setSpan`
\Sentry\SentrySdk::getCurrentHub()->setSpan($transaction);

----------------------------------------

TITLE: Slack Webhook Request URLs
DESCRIPTION: URL endpoints that need to be configured in Slack app settings for handling interactions and loading options.

LANGUAGE: plaintext
CODE:
Request URL: {YOUR_DOMAIN}/extensions/slack/action/
Options Load URL: {YOUR_DOMAIN}/extensions/slack/options-load/

----------------------------------------

TITLE: Setting User Data with Sentry Native SDK in C
DESCRIPTION: Creates a new user object and sets either an ID or username value before applying it to Sentry's global scope. Demonstrates the use of sentry_value_t for object creation and property setting.

LANGUAGE: c
CODE:
#include <sentry.h>

sentry_value_t user = sentry_value_new_object();
sentry_value_set_by_key(user, "id", sentry_value_new_int32(client_user->id));
// OR
sentry_value_set_by_key(user, "username", sentry_value_new_string(client_user->username));
sentry_set_user(user);

----------------------------------------

TITLE: Azure AD to Sentry Attribute Mapping
DESCRIPTION: Required attribute mappings between Azure AD claims and Sentry user attributes for proper user provisioning and authentication.

LANGUAGE: plaintext
CODE:
IdP User ID: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
User Email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
First Name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
Last Name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname

----------------------------------------

TITLE: Installing Sentry Google Cloud Functions Package via .NET Core CLI
DESCRIPTION: Command to install the Sentry.Google.Cloud.Functions NuGet package using the .NET Core CLI.

LANGUAGE: shell
CODE:
dotnet add package Sentry.Google.Cloud.Functions -v {{@inject packages.version('sentry.dotnet.google-cloud-function') }}

----------------------------------------

TITLE: Rendering Beta Alert Message in Markdown
DESCRIPTION: Alert component displaying beta status notification for Sentry Metrics with links to Discord and GitHub for user feedback and discussions.

LANGUAGE: markdown
CODE:
<Alert title="Now in beta!">

Sentry Metrics is currently in open beta, so be gentle - features are still in-progress and may have bugs. We recognize the irony.
For any questions or feedback, you can reach us on [Discord](https://discord.gg/sentry) or [GitHub](https://github.com/getsentry/sentry/discussions/64195).

</Alert>

----------------------------------------

TITLE: Example SAML Metadata XML Configuration
DESCRIPTION: Sample metadata XML configuration for IdP integration with Sentry. Contains entity descriptor, IdP SSO descriptor, key information, and service endpoints.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" entityID="http://www.okta.com/SENTRY_APP_ID">
  <md:IDPSSODescriptor WantAuthnRequestsSigned="false" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
    <md:KeyDescriptor use="signing">
      <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
        <ds:X509Data>
          <ds:X509Certificate>...</ds:X509Certificate>
        </ds:X509Data>
      </ds:KeyInfo>
    </md:KeyDescriptor>
    <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>
    <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>
    <md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://YOUR_OKTA_ORG.okta.com/app/sentry/SENTRY_APP_ID/sso/saml" />
    <md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" Location="https://YOUR_OKTA_ORG.okta.com/app/sentry/SENTRY_APP_ID/sso/saml" />
  </md:IDPSSODescriptor>
</md:EntityDescriptor>

----------------------------------------

TITLE: Initializing Sentry Configuration
DESCRIPTION: Complete Sentry initialization configuration including performance monitoring and session replay settings. Includes DSN setup, integration configurations, and sampling rates for traces and replays.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/gatsby";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing Sentry Configuration
DESCRIPTION: Complete Sentry initialization configuration including performance monitoring and session replay settings. Includes DSN setup, integration configurations, and sampling rates for traces and replays.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/gatsby";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
  tracesSampleRate: 1.0,

  // Capture Replay for 10% of all sessions,
  // plus for 100% of sessions with an error
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/session-replay/configuration/#general-integration-configuration
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing Sentry with tracePropagationTargets in Nuxt.js
DESCRIPTION: This snippet shows how to initialize Sentry in a Nuxt.js application with tracePropagationTargets configured to handle CORS issues. It sets the DSN, enables 100% trace sampling for development, and specifies targets for trace propagation.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Capture 100% of spans. This is useful for development and debugging. Consider reducing in production or using traceSampler
  tracesSampleRate: 1.0,
  tracePropagationTargets: ["https://myproject.org", /^\/api\//],
});

----------------------------------------

TITLE: Setting Document-Policy Header in Express.js
DESCRIPTION: This snippet shows how to set the Document-Policy header to enable JavaScript profiling in an Express.js application. It uses the response.set() method to add the header before sending an HTML file.

LANGUAGE: javascript
CODE:
app.get("/", (request, response) => {
  response.set("Document-Policy", "js-profiling");
  response.sendFile("index.html");
});

----------------------------------------

TITLE: Initializing Sentry with Custom Event Handling in Dart for Flutter
DESCRIPTION: This code initializes Sentry for a Flutter application and sets up a custom beforeSend callback. The callback checks for DatabaseException errors and modifies the event fingerprint accordingly.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.beforeSend = (event, hint) {
    if (event.throwable is DatabaseException) {
      event = event.copyWith(fingerprint: ['database-connection-error']);
    }
    return event;
  };
});

----------------------------------------

TITLE: Initializing Sentry with Sample Rate in PowerShell
DESCRIPTION: Configures Sentry SDK with a custom sample rate of 0.25 (25%). This determines what fraction of events will be sent to Sentry for monitoring.

LANGUAGE: powershell
CODE:
Start-Sentry {
    $_.SampleRate = 0.25
}

----------------------------------------

TITLE: Handling Apollo Exceptions in Kotlin
DESCRIPTION: Example of handling Apollo exceptions without manually capturing them to avoid duplicate error events.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import com.apollographql.apollo3.exception.ApolloException

try {
  // If this API call returns the `errors` array, it will be captured as an error event by the `SentryApollo3HttpInterceptor`.
  return apolloClient.query(LaunchDetailsQuery(launchId)).execute()
} catch (e: ApolloException) {
  // Do not manually capture this exception to avoid duplicated error events.
  // Sentry.captureException(e)
}

----------------------------------------

TITLE: Adding Authentication Breadcrumb in Sentry with PHP
DESCRIPTION: This code demonstrates how to add a breadcrumb to Sentry for tracking user authentication events. It uses the addBreadcrumb function with various parameters to specify the category, message, metadata, level, and type of the breadcrumb.

LANGUAGE: php
CODE:
\Sentry\addBreadcrumb(
    category: 'auth',
    message: 'User authenticated', // optional
    metadata: ['user_id' => $userId], // optional
    level: Breadcrumb::LEVEL_INFO, // set by default
    type: Breadcrumb::TYPE_DEFAULT, // set by default
);

----------------------------------------

TITLE: Implementing OpenAI Pipeline with Sentry Monitoring
DESCRIPTION: Example implementation of an AI pipeline using OpenAI with Sentry monitoring, showing how to track chat completions and transactions

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.ai.monitoring import ai_track
from openai import OpenAI

sentry_sdk.init(...)  # same as above

client = OpenAI(api_key="(your OpenAI key)")

@ai_track("My AI pipeline")
def my_pipeline():
    with sentry_sdk.start_transaction(op="ai-inference", name="The result of the AI inference"):
      print(
          client.chat.completions.create(
              model="gpt-3.5", messages=[{"role": "system", "content": "say hello"}]
          )
          .choices[0]
          .message.content
      )

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter block defining the page title, description, and sidebar ordering for a documentation page about platform-specific SDK details.

LANGUAGE: markdown
CODE:
---
title: Platform Specifics
description: Read more about the specifics when it comes to certain SDKs.
sidebar_order: 99
---

----------------------------------------

TITLE: Adding Custom Measurements to Sentry Transactions in Ruby
DESCRIPTION: This code demonstrates how to add custom measurements to a Sentry transaction using the sentry-ruby library. It shows examples of recording memory usage, job start time, and cache read count. This functionality is available in sentry-ruby version 5.8.0 and above.

LANGUAGE: ruby
CODE:
transaction = Sentry.get_current_scope.get_transaction

# Record amount of memory used
transaction.set_measurement('memory_used', 123, 'byte')

# Record time when job was started
transaction.set_measurement('job_start_time', 1.3, 'second')

# Record amount of times cache was read
transaction.set_measurement('cache_read_count', 4)

----------------------------------------

TITLE: Implementing Trace Configuration in ASP.NET Application
DESCRIPTION: Code snippet showing how to modify the Application_BeginRequest method to enable distributed tracing in an ASP.NET application. This implementation allows the application to start or continue a trace for each incoming request.

LANGUAGE: csharp
CODE:
protected void Application_BeginRequest()
{
    Context.StartOrContinueTrace();
}

----------------------------------------

TITLE: Setting Global Tags in Sentry Initialization for ASP.NET
DESCRIPTION: This C# code demonstrates how to set global tags during Sentry initialization to ensure they are applied across all requests.

LANGUAGE: csharp
CODE:
SentrySdk.Init(options =>
{
  options.Dsn = "___PUBLIC_DSN___";
  options.DefaultTags.Add("TagName", "value");
});

----------------------------------------

TITLE: Running Relay with Custom Config Location
DESCRIPTION: Demonstrates how to run Relay with a custom configuration file location using the --config command line option.

LANGUAGE: shell
CODE:
❯ ./relay run --config /path/to/folder

----------------------------------------

TITLE: Customizing View Hierarchy Capture in Kotlin
DESCRIPTION: Kotlin implementation to customize view hierarchy capture behavior using BeforeCaptureCallback. Controls capture based on event type and debounce status.

LANGUAGE: kotlin
CODE:
import io.sentry.SentryLevel
import io.sentry.android.core.SentryAndroid

SentryAndroid.init(this) { options ->
    options.setBeforeViewHierarchyCaptureCallback { event, hint, debounce ->
        // always capture crashed events
        if (event.isCrashed) {
            return@setBeforeScreenshotCaptureCallback true
        }

        // if debounce is active, skip capturing
        if (debounce) {
            return@setBeforeScreenshotCaptureCallback false
        } else {
            // also capture fatal events
            return@setBeforeScreenshotCaptureCallback event.level == SentryLevel.FATAL
        }
    }
}

----------------------------------------

TITLE: Installing Sentry Dart Plugin in Flutter Project
DESCRIPTION: Add sentry_dart_plugin as a dev dependency in the pubspec.yaml file. The version is dynamically injected based on the current package version.

LANGUAGE: yaml
CODE:
dev_dependencies:
  sentry_dart_plugin: ^{{@inject packages.version('sentry.dart.plugin', '2.0.0') }}

----------------------------------------

TITLE: Building Excimer from Source
DESCRIPTION: Clone the Excimer repository and build the extension from source code.

LANGUAGE: bash
CODE:
git clone https://github.com/wikimedia/mediawiki-php-excimer.git

cd excimer/
phpize && ./configure && make && sudo make install

----------------------------------------

TITLE: Setting User Context with Internal Identifiers in Sentry
DESCRIPTION: Demonstrates how to set user context using internal identifiers instead of sensitive information like email addresses to maintain user tracking while protecting privacy.

LANGUAGE: javascript
CODE:
Sentry.setUser({"id": user.id});

----------------------------------------

TITLE: Creating or Updating a Monitor Through Check-In in Bash
DESCRIPTION: This snippet shows how to create or update a monitor through a check-in payload using a cURL POST request.

LANGUAGE: bash
CODE:
SENTRY_INGEST="https://___ORG_INGEST_DOMAIN___"
SENTRY_CRONS="${SENTRY_INGEST}/api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/"

# 🟡 Notify Sentry your job is running:
curl -X POST "${SENTRY_CRONS}" \
    --header 'Content-Type: application/json' \
    --data-raw '{"monitor_config": {"schedule": {"type": "crontab", "value": "0 * * * *"}}, "status": "in_progress"}'

----------------------------------------

TITLE: Running Remix Server with Sentry Instrumentation
DESCRIPTION: Bash command to run the Remix server with Sentry instrumentation enabled.

LANGUAGE: bash
CODE:
NODE_OPTIONS='--import=./instrument.server.mjs' remix-serve build
# or
NODE_OPTIONS='--require=./instrument.server.cjs' remix-serve build

----------------------------------------

TITLE: Extracting Incoming Tracing Information in Ruby Rack Application
DESCRIPTION: Demonstrates how to extract and store incoming tracing information using Sentry's continue_trace function in a Rack application. The function extracts the sentry-trace and baggage headers from the incoming request environment.

LANGUAGE: ruby
CODE:
# rack application
def call(env)
  transaction = Sentry.continue_trace(env, name: 'transaction', op: 'op')
  Sentry.start_transaction(transaction: transaction)
end

----------------------------------------

TITLE: Custom Database Error and Sentry Configuration in Go
DESCRIPTION: Defines a custom DatabaseConnectionError struct with Error() implementation and configures Sentry client with BeforeSend hook to set custom fingerprint for database connection errors. This allows for better error grouping in Sentry dashboard.

LANGUAGE: go
CODE:
type DatabaseConnectionError struct {
	message string
}

func (e DatabaseConnectionError) Error() string {
	return e.message
}

sentry.Init(sentry.ClientOptions{
	// ...
	BeforeSend: func(event *sentry.Event, hint *sentry.EventHint) *sentry.Event {
		if ex, ok := hint.OriginalException.(DatabaseConnectionError); ok {
			event.Fingerprint = []string{"database-connection-error"}
		}

		return event
	},
})

----------------------------------------

TITLE: Instrumenting Cron Jobs with Sentry using node-cron library
DESCRIPTION: Demonstrates how to instrument the node-cron library's schedule method using Sentry.cron.instrumentNodeCron. Requires Sentry SDK version 7.92.0 or higher. Supports monitor naming and optional timezone configuration.

LANGUAGE: JavaScript
CODE:
import cron from "node-cron";

const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);

cronWithCheckIn.schedule(
  "* * * * *",
  () => {
    console.log("running a task every minute");
  },
  { name: "my-cron-job" }
);

----------------------------------------

TITLE: Setting Up User Path Redaction in Sentry (JSON)
DESCRIPTION: Illustrates the configuration for matching and hashing local user paths. This rule targets patterns that resemble local file paths and applies a hash redaction method.

LANGUAGE: json
CODE:
{
  "rules": {
    "hash_userpath": {
      "type": "userpath",
      "redaction": {
        "method": "hash"
      }
    }
  },
  "applications": {
    "$string": ["hash_userpath"]
  }
}

----------------------------------------

TITLE: Setting User Information in Sentry Java SDK
DESCRIPTION: Shows how to set user information in Sentry using both the old (1.x) and new (4.x) API. The new API uses a User object instead of a UserBuilder.

LANGUAGE: java
CODE:
Sentry.getContext().setUser(
  new UserBuilder().setEmail("hello@sentry.io").build()
);

LANGUAGE: kotlin
CODE:
Sentry.getContext().setUser(
  UserBuilder().setEmail("hello@sentry.io").build()
)

LANGUAGE: java
CODE:
User user = new User();
user.setEmail("hello@sentry.io");
Sentry.setUser(user);

LANGUAGE: kotlin
CODE:
val user = User().apply {
  email = "hello@sentry.io"
}
Sentry.setUser(user)

----------------------------------------

TITLE: Configuring CSRF Trusted Origins in Sentry (Python)
DESCRIPTION: This snippet shows how to configure CSRF_TRUSTED_ORIGINS in the sentry.conf.py file to allow access from multiple domains. It's necessary when Sentry can be accessed from different URLs.

LANGUAGE: python
CODE:
# Assuming your Sentry instance can be accessed from sentry.example.com, 10.100.10.10 and 127.0.0.1.
CSRF_TRUSTED_ORIGINS = ["https://sentry.example.com", "http://10.100.10.10", "http://127.0.0.1:9000"]

----------------------------------------

TITLE: Defining Serializable Struct with CamelCase in Rust
DESCRIPTION: Example of defining a serializable struct in Rust using serde with camelCase renaming. This pattern should be used when defining new types in Relay to ensure proper serialization.

LANGUAGE: rust
CODE:
#[derive(Deserialize, Serialize)]
#[serde(rename_all = "camelCase")]
struct Foo {
    ops_breakdown: ...
}

----------------------------------------

TITLE: Loading Sentry Replay Integration via CDN
DESCRIPTION: HTML snippets for loading Sentry Replay integration via CDN. It provides options for bundles with replay, error, and tracing capabilities or just replay and error monitoring.

LANGUAGE: html
CODE:
<!-- Recommended: Use this bundle for replay, error, and tracing -->
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.tracing.replay.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.tracing.replay.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

<!-- Alternatively, you can use this bundle for replay and error monitoring only -->
<script
  src="https://browser.sentry-cdn.com/{{@inject packages.version('sentry.javascript.browser') }}/bundle.replay.min.js"
  integrity="sha384-{{@inject packages.checksum('sentry.javascript.browser', 'bundle.replay.min.js', 'sha384-base64') }}"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Monitoring UI Performance with Span Attributes in JavaScript
DESCRIPTION: This snippet demonstrates how to monitor client-side performance metrics related to user experience using Sentry's JavaScript SDK. It creates a span with attributes for first input delay, time to interactive, frames dropped, and user context.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Page Interaction',
    op: 'ui.interaction',
    attributes: {
      'ui.first_input_delay_ms': 24,
      'ui.time_to_interactive_ms': 320,
      'ui.frames_dropped': 0,
      'user.device_type': 'mobile',
      'feature.being_used': 'image_carousel'
    }
  },
  async () => {
    // UI interaction handling
  }
);

----------------------------------------

TITLE: Setting Up IMEI/IMEISV Redaction in Sentry (JSON)
DESCRIPTION: Shows the configuration for matching and hashing IMEI or IMEISV numbers. This rule specifically targets IMEI/IMEISV patterns and applies a hash redaction method.

LANGUAGE: json
CODE:
{
  "rules": {
    "hash_imei": {
      "type": "imei",
      "redaction": {
        "method": "hash"
      }
    }
  },
  "applications": {
    "$string": ["hash_imei"]
  }
}

----------------------------------------

TITLE: Initializing Sentry SDK in C
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK in C. It creates a new options object, sets the sample rate to 25%, and then initializes Sentry with these options.

LANGUAGE: c
CODE:
sentry_options_t *options = sentry_options_new();
sentry_options_set_sample_rate(0.25);
sentry_init(options);

----------------------------------------

TITLE: Sentry Initialization in External File (ESM)
DESCRIPTION: Example of Sentry initialization in an external file named 'instrument.mjs' using ECMAScript modules. This setup is necessary for correct auto-instrumentation in Sentry Node SDK 8.x.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  // ...
});

----------------------------------------

TITLE: Configuring MSBuild for Automatic Source Bundle Upload in .NET
DESCRIPTION: This XML snippet demonstrates how to configure MSBuild to automatically create and upload source bundles while uploading symbols in a .NET project. It uses the SentryUploadSources property.

LANGUAGE: xml
CODE:
<PropertyGroup>
  <SentryUploadSources>true</SentryUploadSources>
</PropertyGroup>

----------------------------------------

TITLE: Implementing Sentry Trace Sampler in Swift
DESCRIPTION: Configures a trace sampler callback function in Swift that determines whether a transaction should be sampled based on parent sampling decisions. The callback handles parent sampling state and allows for custom sampling logic implementation.

LANGUAGE: swift
CODE:
import Sentry

let traceSampler : SentryTracesSamplerCallback = {(context: SamplingContext) -> NSNumber in
  if context.transactionContext.parentSampled != .undecided {
    return context.transactionContext.parentSampled == .yes ? 1.0 : 0.0
  }
  // the rest of sampling logic
}

----------------------------------------

TITLE: Configuring Mailgun API Settings in Sentry
DESCRIPTION: Initial YAML configuration for setting up Mailgun integration with Sentry, including API key and reply hostname settings.

LANGUAGE: yaml
CODE:
# Your Mailgun API key (used to verify incoming webhooks)
mail.mailgun-api-key: ""

# Set the SMTP hostname to your configured inbound domain
mail.reply-hostname: "inbound.sentry.example.com"

# Inform Sentry to send the appropriate mail headers to enable
# incoming replies
mail.enable-replies: true

----------------------------------------

TITLE: Initializing Sentry SDK in Kotlin
DESCRIPTION: Demonstrates Sentry SDK initialization in Kotlin with environment configuration set to 'production'. Uses Kotlin's more concise syntax for the configuration lambda.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.init { options ->
  options.environment = "production"
}

----------------------------------------

TITLE: Sampling CPU Usage with mach/mach.h
DESCRIPTION: Uses thread_info with THREAD_BASIC_INFO to measure CPU usage per thread every 100ms, returning the sum as a percentage of total CPU capacity across all cores.

LANGUAGE: objective-c
CODE:
thread_info(thread, THREAD_BASIC_INFO)

----------------------------------------

TITLE: Verifying SysExitIntegration Setup
DESCRIPTION: Example code to verify the SysExitIntegration is working by triggering a sys.exit call that should be captured by Sentry.

LANGUAGE: python
CODE:
import sys

import sentry_sdk
from sentry_sdk.integrations.sys_exit import SysExitIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    integrations=[SysExitIntegration()],
)

sys.exit(1)

----------------------------------------

TITLE: Capturing Basic User Feedback with Sentry in JavaScript
DESCRIPTION: Demonstrates how to capture a basic user feedback event in Sentry by creating an event ID and submitting user feedback data including name, email, and message.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/nuxt";

const eventId = Sentry.captureMessage("User Feedback");
// OR: const eventId = Sentry.lastEventId();

const userFeedback = {
  name: "John Doe",
  email: "john@doe.com",
  message: "I really like your App, thanks!",
  associatedEventId: eventId,
};
Sentry.captureFeedback(userFeedback);

----------------------------------------

TITLE: Configuring Before-Send Callback in Sentry SDK
DESCRIPTION: This snippet demonstrates how to use the before-send callback method to filter events in Sentry SDK. It allows for custom logic to modify or drop events before they are sent to the server.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="configuration/before-send/" />

----------------------------------------

TITLE: Implementing Check-In Monitoring in Go with Sentry
DESCRIPTION: Demonstrates how to implement a two-step check-in process for monitoring job progress using Sentry. Shows both start and completion check-ins with status tracking.

LANGUAGE: go
CODE:
// 🟡 Notify Sentry your job is running:
checkinId := sentry.CaptureCheckIn(
	&sentry.CheckIn{
		MonitorSlug: "<monitor-slug>",
		Status:      sentry.CheckInStatusInProgress,
	},
	nil,
)

// Execute your scheduled task here...

// 🟢 Notify Sentry your job has completed successfully:
sentry.CaptureCheckIn(
	&sentry.CheckIn{
		ID:          *checkinId,
		MonitorSlug: "<monitor-slug>",
		Status:      sentry.CheckInStatusOK,
	},
	nil,
)

----------------------------------------

TITLE: Implementing Custom Sampling in Kotlin (Spring Boot 2)
DESCRIPTION: Kotlin implementation of TracesSamplerCallback for Spring Boot 2 that uses when expression for URL-based sampling rates. Uses javax.servlet.http.HttpServletRequest for request handling.

LANGUAGE: kotlin
CODE:
import io.sentry.SamplingContext
import io.sentry.SentryOptions.TracesSamplerCallback
import org.springframework.stereotype.Component
import javax.servlet.http.HttpServletRequest

@Component
class CustomTracesSamplerCallback : TracesSamplerCallback {
  override fun sample(context: SamplingContext): Double? {
    val customSamplingContext = context.customSamplingContext
    if (customSamplingContext != null) {
      val request = customSamplingContext["request"] as HttpServletRequest
      return when (request.requestURI) {
        "/payment" -> {
          // These are important - take a big sample
          0.5
        }
        "/search" -> {
          // Search is less important and happen much more frequently - only take 1%
          0.01
        }
        "/health" -> {
          // The health check endpoint is just noise - drop all transactions
          0.0
        }
        else -> {
          // Default sample rate
          0.1
        }
      }
    } else {
      return 0.1
    }
  }
}

----------------------------------------

TITLE: Configuring User Details in Sentry
DESCRIPTION: Demonstrates how to safely set user identification in Sentry by using internal identifiers instead of sensitive information like email addresses.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="sensitive-data/set-user" />

----------------------------------------

TITLE: Adding Data Attributes to Sentry Transactions in C
DESCRIPTION: Example demonstrating how to add various data types as attributes to a Sentry transaction. Shows adding primitive types (string, int, double, boolean), lists, and objects using the sentry_transaction_set_data API.

LANGUAGE: c
CODE:
sentry_transaction_context_t *tx_ctx =
    sentry_transaction_context_new("processOrderBatch()", "task");
sentry_transaction_t *tx =
    sentry_transaction_start(tx_ctx, sentry_value_new_null());

sentry_transaction_set_data(tx, "my-data-attribute-1",
    sentry_value_new_string("value1"));
sentry_transaction_set_data(tx, "my-data-attribute-2",
    sentry_value_new_int32(42));
sentry_transaction_set_data(tx, "my-data-attribute-3",
    sentry_value_new_double(3.14));
sentry_transaction_set_data(tx, "my-data-attribute-4",
    sentry_value_new_bool(true));

sentry_value_t value_list = sentry_value_new_list();
sentry_value_append(value_list, sentry_value_new_string("value1"));
sentry_value_append(value_list, sentry_value_new_int32(42));
sentry_value_append(value_list, sentry_value_new_double(3.14));
sentry_value_append(value_list, sentry_value_new_bool(true));

sentry_transaction_set_data(tx, "my-data-attribute-5", value_list);

sentry_value_t value_object = sentry_value_new_object();
sentry_value_set_by_key(value_object, "key_1", sentry_value_new_string("value1"));
sentry_value_set_by_key(value_object, "key_2", sentry_value_new_int32(42));
sentry_value_set_by_key(value_object, "key_3", sentry_value_new_double(3.14));
sentry_value_set_by_key(value_object, "key_4", sentry_value_new_bool(true));

sentry_transaction_set_data(tx, "my-data-attribute-6", value_object);

----------------------------------------

TITLE: Configuring Fragment Lifecycle Breadcrumbs
DESCRIPTION: Customize which fragment lifecycle events are added as breadcrumbs by specifying a set of FragmentLifecycleState values.

LANGUAGE: kotlin
CODE:
import android.app.Application
import io.sentry.android.core.SentryAndroid
import io.sentry.android.fragment.FragmentLifecycleIntegration
import io.sentry.android.fragment.FragmentLifecycleState.CREATED
import io.sentry.android.fragment.FragmentLifecycleState.DESTROYED

SentryAndroid.init(this) { options ->
    options.addIntegration(
        FragmentLifecycleIntegration(
            this,
            filterFragmentLifecycleBreadcrumbs = setOf(FragmentLifecycleState.CREATED, FragmentLifecycleState.DESTROYED)
            )
        )
}

----------------------------------------

TITLE: Markdown Image Reference
DESCRIPTION: A markdown syntax for displaying an image that shows an example of attachments list.

LANGUAGE: markdown
CODE:
![Attachments List Example](./img/attachments-list-example.png)

----------------------------------------

TITLE: Inefficient JSON Decoding on Main Thread - iOS Swift
DESCRIPTION: Example showing problematic JSON decoding directly on the main thread that can cause UI responsiveness issues.

LANGUAGE: swift
CODE:
func updatePersonView(json: Data) throws {
  personView.person = try JSONDecoder().decode(Person.self, from: json)
}

----------------------------------------

TITLE: Custom Instrumentation Content Include - Markdown
DESCRIPTION: Platform-specific content include directive for custom instrumentation documentation using Sentry's documentation component system.

LANGUAGE: markdown
CODE:
<PlatformContent includePath="distributed-tracing/custom-instrumentation/" />

----------------------------------------

TITLE: Resulting Span Structure for AI Pipeline in Sentry
DESCRIPTION: This code block illustrates the span structure generated by Sentry for the AI pipeline created in the previous example. It shows the hierarchical relationship between the pipeline span and its child spans for chat completions.

LANGUAGE: plaintext
CODE:
<span op:"ai.pipeline" description:"My AI pipeline">
	<span op:"ai.chat_completions.openai" description:"OpenAI Chat Completion" data[ai.total_tokens.used]:15 data[ai.pipeline.name]:"My AI pipeline" />
	<span op:"ai.chat_completions.openai" description:"OpenAI Chat Completion" data[ai.total_tokens.used]:20 data[ai.pipeline.name]:"My AI pipeline" />
</span>

----------------------------------------

TITLE: Initializing Sentry with AdditionalContext Integration in JavaScript
DESCRIPTION: Demonstrates how to initialize Sentry in an Electron main process with the AdditionalContext integration. The example shows how to disable the 'screen' context by setting it to false in the integration options.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/electron/main";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.additionalContextIntegration({
      screen: false,
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry with URL Pattern Filtering
DESCRIPTION: Example showing how to configure Sentry to only capture errors from specific domains using regex patterns in allowUrls. This configuration will capture errors from example.com and its subdomains like cdn.example.com and www.example.com.

LANGUAGE: javascript
CODE:
Sentry.init({
  allowUrls: [/https?:\/\/((cdn|www)\.)?example\.com/],
});

----------------------------------------

TITLE: Initialize and Start Sentry Transaction
DESCRIPTION: Creates a new Sentry transaction context with a name and operation, sets sampling configuration, and starts the transaction. The transaction context is initialized with default values and sampling is explicitly enabled.

LANGUAGE: c
CODE:
sentry_transaction_context_t *tx_ctx = sentry_transaction_context_new(
    "transaction",
    "op",
);
sentry_transaction_context_set_sampled(tx_ctx, 1);

sentry_transaction_t *tx = sentry_transaction_start(tx_ctx, sentry_value_new_null());

----------------------------------------

TITLE: Customizing Screenshot Capture Behavior in Kotlin
DESCRIPTION: This Kotlin code demonstrates how to customize screenshot capture behavior using the BeforeCaptureCallback. It shows how to capture screenshots only for crashed and fatal events, while respecting the debounce mechanism.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid

SentryAndroid.init(this) { options ->
    options.setBeforeScreenshotCaptureCallback { event, hint, debounce ->
        // always capture crashed events
        if (event.isCrashed) {
            return@setBeforeScreenshotCaptureCallback true
        }

        // if debounce is active, skip capturing
        if (debounce) {
            return@setBeforeScreenshotCaptureCallback false
        } else {
            // also capture fatal events
            return@setBeforeScreenshotCaptureCallback event.level == SentryLevel.FATAL
        }
    }
}

----------------------------------------

TITLE: Capturing Exception with Hints in Kotlin (New Method)
DESCRIPTION: Shows the updated method for capturing an exception with hints in Sentry SDK 6.0.0. Hints are now passed as a mutable map of key-value pairs.

LANGUAGE: kotlin
CODE:
val hints = mutableMapOf<String, Any>("myHint" to "myStringHint")
Sentry.captureException(RuntimeException("exception"), hints)

----------------------------------------

TITLE: Rendering Business Plan Feature Alert in JSX
DESCRIPTION: Alert component that displays a message indicating a feature is only available on Business or Enterprise plans, with a link to the pricing page.

LANGUAGE: jsx
CODE:
<Alert>

This feature is available only if your organization is on a <a href="https://sentry.io/pricing/" target="_blank">Business or Enterprise plan</a>.

</Alert>

----------------------------------------

TITLE: Initializing Sentry with Custom Max Attachment Size in PowerShell
DESCRIPTION: This code starts Sentry and sets the maximum attachment size to 5 MiB (5 * 1024 * 1024 bytes). This configuration limits the size of files that can be attached to error reports sent to Sentry.

LANGUAGE: powershell
CODE:
Start-Sentry {
    $_.MaxAttachmentSize = 5 * 1024 * 1024 # 5 MiB
}

----------------------------------------

TITLE: Initializing Sentry with Replay and Canvas Integration in JavaScript
DESCRIPTION: This snippet initializes Sentry with custom configuration for a Next.js application. It sets up session replay and canvas recording integrations, along with sampling rates for replays.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    // Keep the Replay integration as before
    Sentry.replayIntegration(),

    // The following is all you need to enable canvas recording with Replay
    Sentry.replayCanvasIntegration(),
  ],
});

----------------------------------------

TITLE: Configuring Trace Propagation for Microservices E-commerce Platform
DESCRIPTION: This example demonstrates how to set up trace propagation targets for a microservices e-commerce platform. It includes targets for the main API server, authentication server, and internal API calls.

LANGUAGE: javascript
CODE:
// hooks.client.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.solidRouterBrowserTracingIntegration()],
  // Capture 100% of spans. This is useful for development and debugging. Consider reducing in production or using traceSampler
  tracesSampleRate: 1.0,
  tracePropagationTargets: [
    "https://api.myecommerce.com",
    "https://auth.myecommerce.com",
    /^\/internal-api\//
  ],
});

----------------------------------------

TITLE: Importing Sentry SDK for Vue
DESCRIPTION: Imports all exports from the @sentry/vue package as a namespace called Sentry. This is typically the first step in setting up Sentry error monitoring in a Vue application.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/vue";

----------------------------------------

TITLE: Installing Sentry Go SDK with OpenTelemetry Support
DESCRIPTION: This command installs the Sentry Go SDK along with its OpenTelemetry integration module. It requires Go version 1.18 or higher and OpenTelemetry version 1.11.0 or higher.

LANGUAGE: bash
CODE:
go get github.com/getsentry/sentry-go \
       github.com/getsentry/sentry-go/otel

----------------------------------------

TITLE: Setting Sentry Traces Sample Rate in Properties File
DESCRIPTION: This snippet configures the traces sample rate for Sentry. It sets the rate to 0.2, meaning 20% of transactions will be sampled for performance monitoring.

LANGUAGE: properties
CODE:
sentry.traces-sample-rate=0.2

----------------------------------------

TITLE: Emitting a Gauge in PHP with Sentry Metrics
DESCRIPTION: This code demonstrates how to emit a gauge metric for tracking page load times. It uses the Sentry metrics API to add a value to a gauge with a specified key, unit, and tags.

LANGUAGE: php
CODE:
\Sentry\metrics()->gauge(
    key: 'page_load',
    value: 15.0,
    unit: \Sentry\Metrics\MetricsUnit::millisecond(),
    tags: [
        'page' => '/home',
    ],
);

----------------------------------------

TITLE: Emitting a Gauge in PHP with Sentry Metrics
DESCRIPTION: This code demonstrates how to emit a gauge metric for tracking page load times. It uses the Sentry metrics API to add a value to a gauge with a specified key, unit, and tags.

LANGUAGE: php
CODE:
\Sentry\metrics()->gauge(
    key: 'page_load',
    value: 15.0,
    unit: \Sentry\Metrics\MetricsUnit::millisecond(),
    tags: [
        'page' => '/home',
    ],
);

----------------------------------------

TITLE: Applying Sidebar Tab and Method Decorator in Python
DESCRIPTION: Shows how to use the extend_schema decorator to specify the sidebar tab and document API methods.

LANGUAGE: python
CODE:
@extend_schema(tags=["Teams"])
class OrganizationTeamsEndpoint(...):
    owner = ApiOwner.ENTERPRISE
    publish_status = {
        'GET': ApiPublishStatus.PUBLIC,
        'POST': ApiPublishStatus.PUBLIC,
        'PUT': ApiPublishStatus.EXPERIMENTAL,
    }

    @extend_schema(
        operation_id="Create a New Team",
        parameters=[GlobalParams.ORG_ID_OR_SLUG],
        request=TeamPostSerializer,
        responses={
            201: TeamSerializer,
            400: RESPONSE_BAD_REQUEST,
            403: RESPONSE_FORBIDDEN,
            404: OpenApiResponse(description="A team with this slug already exists."),
        },
        examples=TeamExamples.CREATE_TEAM,
    )
    def post(self, request, organization, **kwargs):
        """
        Create a new team bound to an organization.
        """

----------------------------------------

TITLE: Initializing Sentry SDK for Xamarin
DESCRIPTION: Initializes the Sentry SDK with a public DSN and enables screenshot attachment functionality. The DSN (Data Source Name) is required for sending events to the correct Sentry project.

LANGUAGE: csharp
CODE:
SentryXamarin.Init(options =>
{
    options.Dsn = "___PUBLIC_DSN___";
    options.AttachScreenshots = true;
});

----------------------------------------

TITLE: Installing Sentry Spring Dependencies
DESCRIPTION: Adding the sentry-spring dependency using different build tools including Maven, Gradle, and SBT.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-spring</artifactId>
    <version>1.7.30</version>
</dependency>

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-spring:1.7.30'

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-spring" % "1.7.30"

----------------------------------------

TITLE: Customizing Error Handling in RavenClient in C#
DESCRIPTION: Extend RavenClient's error handling behavior using the ErrorOnCapture property.

LANGUAGE: csharp
CODE:
ravenClient.ErrorOnCapture = exception =>
{
    // Custom code here
};

----------------------------------------

TITLE: Importing ModuleMetadata Integration for Sentry Browser
DESCRIPTION: Shows how to import the moduleMetadataIntegration from Sentry. This integration allows injection of metadata into stack frames using bundler plugins through the _experiments.moduleMetadata config option.

LANGUAGE: javascript
CODE:
Sentry.moduleMetadataIntegration

----------------------------------------

TITLE: Disabling Distributed Tracing in Sentry JavaScript SDK
DESCRIPTION: This snippet shows how to disable distributed tracing in the Sentry JavaScript SDK. It overrides the default configuration to ensure no Sentry trace headers are sent.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Overwrite the defaults to ensure no trace headers are sent
  tracePropagationTargets: [],
});

----------------------------------------

TITLE: Cloning Repository Command
DESCRIPTION: Git command for cloning the sample backend monitoring repository.

LANGUAGE: bash
CODE:
> git clone <repository HTTPS or SSH url>

----------------------------------------

TITLE: Accessing Sentry Instance in Laravel Application
DESCRIPTION: Demonstrates how to access the Sentry instance through the Laravel application container for additional configuration or custom usage.

LANGUAGE: php
CODE:
$app['sentry']->setRelease(Git::sha());

----------------------------------------

TITLE: Initializing Sentry SDK in Java
DESCRIPTION: Configures Sentry SDK initialization in Java with a custom maximum attachment size of 5 MiB. Uses the builder pattern with lambda for options configuration.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

SentryAndroid.init(options -> {
  options.setMaxAttachmentSize(5 * 1024 * 1024); // 5 MiB
});

----------------------------------------

TITLE: Profile Data Structure in JSON
DESCRIPTION: Illustrates the structure of the profile data, including samples, stacks, frames, and thread metadata.

LANGUAGE: json
CODE:
{
  "profile": {
    "samples": [
      { ... },
      ...
    ],
    "stacks": [
      [ ... ],
      ...
    ],
    "frames": [
      { ... },
      ...
    ],
    "thread_metadata": {
      "259": {
        ...
      }
    }
  }
}

----------------------------------------

TITLE: Checking Out Specific Sentry Version in Git
DESCRIPTION: Commands to fetch the latest changes and checkout a specific version (23.11.0 in this example) of the self-hosted Sentry repository.

LANGUAGE: bash
CODE:
git fetch
git checkout 23.11.0

----------------------------------------

TITLE: Enabling Experimental View Renderer in Swift
DESCRIPTION: Configuration for enabling the experimental view renderer feature that provides up to 5x faster rendering performance and reduced main thread impact.

LANGUAGE: swift
CODE:
SentrySDK.start(configureOptions: { options in
  options.sessionReplay.enableExperimentalViewRenderer = true
})

----------------------------------------

TITLE: Old to New API Mapping
DESCRIPTION: Example showing how old Hub-based APIs map to new scope-based APIs

LANGUAGE: python
CODE:
# Old API
hub = Hub(Hub.current)

# New API
with isolation_scope() as scope:
    # Code here

----------------------------------------

TITLE: Asynchronous File Reading in Kotlin - Correct Implementation
DESCRIPTION: Fixed version using coroutines to perform file I/O operations asynchronously in Kotlin.

LANGUAGE: kotlin
CODE:
suspend fun readFile(): String = withContext(Dispatchers.IO) {
    val file = File(context.cacheDir, "LoremIpsum.txt")
    val content = file.readText()
    return content
}

----------------------------------------

TITLE: Generating ProGuard UUID in Python
DESCRIPTION: Python function to generate a SHA1 UUID for ProGuard files based on file checksum, using a namespace derived from guardsquare.com domain.

LANGUAGE: python
CODE:
import uuid

NAMESPACE = uuid.uuid5(uuid.NAMESPACE_DNS, "guardsquare.com")

def get_proguard_uuid(filename):
    with open(filename, 'rb') as f:
        return uuid.uuid5(NAMESPACE, f.read())

----------------------------------------

TITLE: Environment Variable HOME Scrubbing
DESCRIPTION: Rule for scrubbing HOME environment variable from binary data in minidumps.

LANGUAGE: regex
CODE:
[Remove] [HOME=[^\u0000+]\u0000] from [$minidump.$binary]

----------------------------------------

TITLE: Initializing MongoDB Integration in Sentry
DESCRIPTION: Demonstrates how to initialize the MongoDB integration in Sentry configuration. This integration enables automatic instrumentation of MongoDB operations using OpenTelemetry to capture performance spans. Supports MongoDB versions 3.3 through 6.x.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.mongoIntegration()],
});

----------------------------------------

TITLE: Enabling OpenTelemetry Debug Output
DESCRIPTION: Adds JVM argument to enable debug output for OpenTelemetry Java agent

LANGUAGE: shell
CODE:
-Dotel.javaagent.debug=true

----------------------------------------

TITLE: OS Information JSON Structure
DESCRIPTION: Demonstrates the JSON structure for OS information in the profile metadata, including build number, name, and version.

LANGUAGE: json
CODE:
{
 "os": {
    "build_number": "20D47",
    "name": "iOS",
    "version": "16.3"
  }
}

----------------------------------------

TITLE: Using Jest-DOM Assertions in React Testing Library
DESCRIPTION: Illustrates the preferred use of jest-dom assertions for better error messages, semantics, consistency, and uniformity in tests.

LANGUAGE: javascript
CODE:
import {render, screen} from "sentry-test/reactTestingLibrary";

// ❌
render(<Example />);
expect(screen.getByRole("alert")).toBeTruthy();
expect(screen.getByRole("alert").textContent).toEqual("abc");
expect(screen.queryByRole("button")).toBeFalsy();
expect(screen.queryByRole("button")).toBeNull();

// ✅
render(<Example />);
expect(screen.getByRole("alert")).toBeInTheDocument();
expect(screen.getByRole("alert")).toHaveTextContent("abc");
expect(screen.queryByRole("button")).not.toBeInTheDocument();

----------------------------------------

TITLE: Implementing Heartbeat Monitoring in Sentry
DESCRIPTION: Shows how to implement single check-in heartbeat monitoring for successful job completion with optional duration tracking.

LANGUAGE: php
CODE:
// Execute your scheduled task...

// 🟢 Notify Sentry your job completed successfully:
\Sentry\captureCheckIn(
    slug: '<monitor-slug>',
    status: CheckInStatus::ok(),
    duration: 10, // Optional duration in seconds
);

----------------------------------------

TITLE: Initializing Sentry SDK in Swift
DESCRIPTION: Shows how to initialize the Sentry SDK using Swift with a beforeBreadcrumb callback configuration. The callback receives and returns a breadcrumb object.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.beforeBreadcrumb = { crumb in
        return crumb
    }
}

----------------------------------------

TITLE: Running Java Application with Sentry OpenTelemetry Agent via CLI Argument
DESCRIPTION: Shows how to run a Java application with the Sentry OpenTelemetry agent using command line arguments. Uses the -javaagent flag to specify the agent JAR file.

LANGUAGE: bash
CODE:
SENTRY_AUTO_INIT=false java -javaagent:sentry-opentelemetry-agent-{{@inject packages.version('sentry.java.opentelemetry-agent') }}.jar -jar your-application.jar

----------------------------------------

TITLE: Initializing Sentry with Reporting Observer using Loader v8
DESCRIPTION: Implements Sentry initialization using the v8 Loader script pattern with lazy-loaded Reporting Observer integration. Uses modern Promise-based approach for loading the integration.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});
    Sentry.lazyLoadIntegration("reportingObserverIntegration").then(
      (integration) => {
        Sentry.addIntegration(integration());
      }
    );
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Using TraceMethod Decorator for Angular Lifecycle Hooks
DESCRIPTION: This typescript snippet shows how to use the TraceMethod decorator to track specific component lifecycle hooks. It creates point-in-time spans called ui.angular.[methodname] for the decorated methods.

LANGUAGE: typescript
CODE:
import { Component, OnInit } from "@angular/core";
import * as Sentry from "@sentry/angular";

@Component({
  selector: "app-login",
  templateUrl: "./login.component.html",
})
export class LoginComponent implements OnChanges {
  @Sentry.TraceMethod({ name: "Login.ngOnChanges" })
  ngOnChanges(changes: SimpleChanges) {
    // ...
  }
}

----------------------------------------

TITLE: Installing Sentry SDK with Wizard for SvelteKit
DESCRIPTION: This command runs the Sentry installation wizard for SvelteKit projects. It initializes the SDK, sets up necessary configurations, and adds instrumentation.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i sveltekit

----------------------------------------

TITLE: Setting Sentry Logging Level in C++ for Unreal Engine
DESCRIPTION: This snippet demonstrates how to access the Sentry subsystem and set its logging level to 'Info' using C++ in Unreal Engine. It first retrieves the Sentry subsystem from the engine and then sets the desired logging level.

LANGUAGE: c
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->SetLevel(ESentryLevel::Info);

----------------------------------------

TITLE: Defining Platform-Specific Sentry Initializer (Common)
DESCRIPTION: Common code for defining a platform-specific Sentry initializer in a Kotlin Multiplatform project.

LANGUAGE: kotlin
CODE:
import io.sentry.kotlin.multiplatform.Context

expect fun initializeSentry()

----------------------------------------

TITLE: Initializing Sentry Transaction with Sampling
DESCRIPTION: Creates a new transaction context with sampling enabled and starts a Sentry transaction. The transaction is configured for a GET /search HTTP request with sampling set to true.

LANGUAGE: csharp
CODE:
// IsSampled -> true
var transactionContext = new TransactionContext("GET /search", "http", true);

var transaction = SentrySdk.StartTransaction(transactionContext);

----------------------------------------

TITLE: Compressing Debug Sections in ELF File
DESCRIPTION: This command shows how to compress debug sections in an ELF file using objcopy. It uses the --compress-debug-sections option with zlib compression.

LANGUAGE: bash
CODE:
# Note the --compress-debug-sections option
objcopy --only-keep-debug --compress-debug-sections=zlib binary binary.debug

----------------------------------------

TITLE: Compressing Debug Sections in ELF File
DESCRIPTION: This command shows how to compress debug sections in an ELF file using objcopy. It uses the --compress-debug-sections option with zlib compression.

LANGUAGE: bash
CODE:
# Note the --compress-debug-sections option
objcopy --only-keep-debug --compress-debug-sections=zlib binary binary.debug

----------------------------------------

TITLE: Basic Project API Response - JSON
DESCRIPTION: Default API response format for a project endpoint showing minimal required fields.

LANGUAGE: json
CODE:
GET /api/0/projects/{project_slug}/
{
  "id": 5,
  "name": "foo",
  ...
}

----------------------------------------

TITLE: Enabling GraphQL Error Capture in Sentry (C# and F#)
DESCRIPTION: Enable the capture of failed requests in Sentry options during SDK initialization. This is required to capture GraphQL client errors.

LANGUAGE: csharp
CODE:
options.CaptureFailedRequests = true;

LANGUAGE: fsharp
CODE:
options.CaptureFailedRequests <- true

----------------------------------------

TITLE: Masking View Hierarchy in Kotlin for Session Replay
DESCRIPTION: This snippet demonstrates how to mask TextView and all its subclasses, while unmasking RadioButton and its subclasses in Session Replay.

LANGUAGE: kotlin
CODE:
options.sessionReplay.addMaskViewClass("android.widget.TextView") // mask TextView and all its subclasses
options.sessionReplay.addUnmaskViewClass("android.widget.RadioButton") // but unmask RadioButton and all its subclasses

----------------------------------------

TITLE: Configuring Sentry Options in appsettings.json
DESCRIPTION: Example of configuring Sentry options in the appsettings.json file for a .NET application.

LANGUAGE: json
CODE:
{
  "Logging": {
    "LogLevel": {
      "Default": "Debug"
    }
  },
  "Sentry": {
    "Dsn": "___PUBLIC_DSN___",
    "MinimumBreadcrumbLevel": "Debug",
    "MinimumEventLevel": "Warning",
    "MaxBreadcrumbs": 50
  }
}

----------------------------------------

TITLE: Event Message Formatting in Version 6.x
DESCRIPTION: Shows how to create and format event messages using the SentryMessage type in version 6.x.

LANGUAGE: swift
CODE:
import Sentry

let event = Event()
event.message = SentryMessage(formatted: "Hello World")

LANGUAGE: objc
CODE:
@import Sentry;

SentryEvent *event = [[SentryEvent alloc] init];
event.message = [SentryMessage messageWithFormatted:"Hello World"];

----------------------------------------

TITLE: Configuring Docker Service for Proxy Settings
DESCRIPTION: This systemd configuration file sets up HTTP proxy environment variables for the Docker service, allowing Docker to work behind a corporate proxy.

LANGUAGE: systemd
CODE:
[Service]
Environment="HTTP_PROXY=http://proxy:3128"
Environment="HTTPS_PROXY=http://proxy:3128"
Environment="NO_PROXY=127.0.0.0/8"

----------------------------------------

TITLE: Configuring Sentry with Custom OpenTelemetry Setup in JavaScript
DESCRIPTION: This snippet demonstrates how to set up Sentry with a custom OpenTelemetry configuration, including the necessary processors, propagator, and context manager.

LANGUAGE: javascript
CODE:
const { NodeTracerProvider } = require("@opentelemetry/sdk-trace-node");
const Sentry = require("@sentry/node");
const {
  SentrySpanProcessor,
  SentryPropagator,
  SentrySampler,
} = require("@sentry/opentelemetry");

const sentryClient = Sentry.init({
  dsn: "___DSN___",
  skipOpenTelemetrySetup: true,

  // The SentrySampler will use this to determine which traces to sample
  tracesSampleRate: 1.0,
});

// Note: This could be BasicTracerProvider or any other provider depending on
// how you are using the OpenTelemetry SDK
const provider = new NodeTracerProvider({
  // Ensure the correct subset of traces is sent to Sentry
  // This also ensures trace propagation works as expected
  sampler: sentryClient ? new SentrySampler(sentryClient) : undefined,
  spanProcessors: [
    // Ensure spans are correctly linked & sent to Sentry
    new SentrySpanProcessor(),
    // Add additional processors here
  ],
});

provider.register({
  // Ensure trace propagation works
  // This relies on the SentrySampler for correct propagation
  propagator: new SentryPropagator(),
  // Ensure context & request isolation are correctly managed
  contextManager: new Sentry.SentryContextManager(),
});

// Validate that the setup is correct
Sentry.validateOpenTelemetrySetup();

----------------------------------------

TITLE: Configuring Sentry with Custom OpenTelemetry Setup in JavaScript
DESCRIPTION: This snippet demonstrates how to set up Sentry with a custom OpenTelemetry configuration, including the necessary processors, propagator, and context manager.

LANGUAGE: javascript
CODE:
const { NodeTracerProvider } = require("@opentelemetry/sdk-trace-node");
const Sentry = require("@sentry/node");
const {
  SentrySpanProcessor,
  SentryPropagator,
  SentrySampler,
} = require("@sentry/opentelemetry");

const sentryClient = Sentry.init({
  dsn: "___DSN___",
  skipOpenTelemetrySetup: true,

  // The SentrySampler will use this to determine which traces to sample
  tracesSampleRate: 1.0,
});

// Note: This could be BasicTracerProvider or any other provider depending on
// how you are using the OpenTelemetry SDK
const provider = new NodeTracerProvider({
  // Ensure the correct subset of traces is sent to Sentry
  // This also ensures trace propagation works as expected
  sampler: sentryClient ? new SentrySampler(sentryClient) : undefined,
  spanProcessors: [
    // Ensure spans are correctly linked & sent to Sentry
    new SentrySpanProcessor(),
    // Add additional processors here
  ],
});

provider.register({
  // Ensure trace propagation works
  // This relies on the SentrySampler for correct propagation
  propagator: new SentryPropagator(),
  // Ensure context & request isolation are correctly managed
  contextManager: new Sentry.SentryContextManager(),
});

// Validate that the setup is correct
Sentry.validateOpenTelemetrySetup();

----------------------------------------

TITLE: Instrumenting Cloudflare D1 with Sentry in JavaScript
DESCRIPTION: This code snippet shows how to use the instrumentD1WithSentry method to add Sentry instrumentation to a Cloudflare D1 database. It wraps the database object and allows for normal usage while providing performance monitoring.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/cloudflare";

// env.DB is the D1 DB binding configured in your `wrangler.toml`
const db = Sentry.instrumentD1WithSentry(env.DB);
// Now you can use the database as usual
await db.prepare("SELECT * FROM table WHERE id = ?").bind(1).run();

----------------------------------------

TITLE: Initializing Sentry with DenoContext Integration in JavaScript
DESCRIPTION: This code snippet demonstrates how to initialize Sentry with the DenoContext integration enabled. The integration adds Deno-related context to events, including information about the app, device, OS, V8, and TypeScript.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  integrations: [Sentry.denoContextIntegration()],
});

----------------------------------------

TITLE: Envelope Structure for Profile Chunk
DESCRIPTION: Shows the structure of an envelope containing a profile chunk, ready for sending to Relay.

LANGUAGE: json
CODE:
{"event_id":"a229377b82ad4898be7c3a6272d052d9"}
{"type":"profile_chunk"}
{ /* profile_chunk JSON payload */}

----------------------------------------

TITLE: Configuring Sample Rate for Sentry SDK in Elixir
DESCRIPTION: Sets the sample rate for error events, ranging from 0.0 to 1.0. The default is 1.0, meaning 100% of error events are sent. Adjusting this can help control the volume of events sent to Sentry.

LANGUAGE: elixir
CODE:
config :sentry,
  sample_rate: 0.5

----------------------------------------

TITLE: Initializing Sentry SDK with JavaScript
DESCRIPTION: Sets up Sentry error tracking with a public DSN and configures performance monitoring with a 25% sample rate for transactions. The DSN placeholder needs to be replaced with an actual project DSN from Sentry dashboard.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Capture 25% of all transactions
  tracesSampleRate: 0.25
});

----------------------------------------

TITLE: Setting a Tag in Sentry
DESCRIPTION: Define a tag using the Sentry SDK. This binds the tag to the isolation scope, ensuring all future events within scope contain the same tag.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="enriching-events/set-tag" />

----------------------------------------

TITLE: Resolving Sentry Issues in Bitbucket Commit Messages
DESCRIPTION: This example demonstrates how to reference and resolve Sentry issues directly in Bitbucket commit messages. By including 'fixes <SENTRY-SHORT-ID>' in the commit message, Sentry will automatically link the issue to the commit and mark it as resolved when the commit is part of a release.

LANGUAGE: plaintext
CODE:
Prevent empty queries on users

Fixes MYAPP-317

----------------------------------------

TITLE: Implementing Cache Instrumentation with Sentry in C#
DESCRIPTION: This code snippet demonstrates how to create a caching service that implements Sentry's cache monitoring. It includes methods for setting and getting items from the cache, with proper span creation and attribute setting for Sentry tracking.

LANGUAGE: csharp
CODE:
using Microsoft.Extensions.Caching.Memory;

public class MyCachingService
{
    private readonly IMemoryCache _cache;

    public MyCachingService(IMemoryCache cache)
    {
        _cache = cache;
    }

    public void SetInCache(string cacheKey, object value)
    {
        var cacheSpan = SentrySdk.GetSpan()?.StartChild("cache.put");

        // Describe the cache server you are accessing
        cacheSpan?.SetExtra("network.peer.address", "cache.example.com/supercache");
        cacheSpan?.SetExtra("network.peer.port", 9000);

        // Set the key you're going to use to add to the cache
        cacheSpan?.SetExtra("cache.key", cacheKey);

        // Optional: You can also provide the cached item's size
        // cacheSpan?.SetExtra("cache.item_size", /* item size in bytes */);

        // Add an item to your cache
        _cache.Set(cacheKey, value);

        cacheSpan?.Finish();
    }

    public object? GetFromCache(string cacheKey)
    {
        var cacheSpan = SentrySdk.GetSpan()?.StartChild("cache.get");

        // Describe the cache server you are accessing
        cacheSpan?.SetExtra("network.peer.address", "cache.example.com/supercache");
        cacheSpan?.SetExtra("network.peer.port", 9000);

        // Set the key you're going to use to retrieve from the cache
        cacheSpan?.SetExtra("cache.key", cacheKey);

        // Attempt to retrieve the cached item
        if (_cache.TryGetValue(cacheKey, out var cachedValue))
        {
            // If you retrieved a value, the cache was hit
            cacheSpan?.SetExtra("cache.hit", true);

            // Optional: You can also provide the cached item's size
            // cacheSpan.SetExtra("cache.item_size", /* item size in bytes */);

            cacheSpan?.Finish();

            return cachedValue;
        }

        // If you could not retrieve a value, it was a miss
        cacheSpan?.SetExtra("cache.hit", false);
        cacheSpan?.Finish();
        return null;
    }
}

----------------------------------------

TITLE: Implementing DSC Propagation in Python
DESCRIPTION: Pseudocode implementation showing how SDKs should handle DSC propagation for incoming and outgoing requests, including context freezing logic.

LANGUAGE: python
CODE:
def collect_dynamic_sampling_context():
  # Placeholder function that collects as many values for Dynamic Sampling Context
  # as possible and returns a dict

def has_sentry_value_in_baggage_header(request):
  # Placeholder function that returns True when there is at least one key-value pair in the baggage
  # header of `request`, for which the key starts with "sentry-". Otherwise, it returns False.

def on_incoming_request(request):
  if (request.has_header("sentry-trace") or request.has_header("traceparent")) and (not request.has_header("baggage") or not has_sentry_value_in_baggage_header(request)):
    # Request comes from an old SDK which doesn't support Dynamic Sampling Context yet
    # --> we don't propagate baggage for this trace
    current_transaction.dynamic_sampling_context_frozen = True
  elif request.has_header("baggage") and has_sentry_value_in_baggage_header(request):
    current_transaction.dynamic_sampling_context_frozen = True
    current_transaction.dynamic_sampling_context = baggage_header_to_dict(request.headers.baggage)

def on_outgoing_request(request):
  if not current_transaction.dynamic_sampling_context_frozen:
    current_transaction.dynamic_sampling_context_frozen = True
    current_transaction.dynamic_sampling_context = merge_dicts(collect_dynamic_sampling_context(), current_transaction.dynamic_sampling_context)

  if not current_transaction.dynamic_sampling_context:
    # Make sure there is at least an empty DSC set on transaction
    # This is independent of whether it is locked or not
    current_transaction.dynamic_sampling_context = {}

  if request.has_header("baggage"):
    outgoing_baggage_dict = baggage_header_to_dict(request.headers.baggage)
    merged_baggage_dict = merge_dicts(outgoing_baggage_dict, current_transaction.dynamic_sampling_context)
    request.set_header("baggage", dict_to_baggage_header(merged_baggage_dict))
  else:
    request.set_header("baggage", dict_to_baggage_header(current_transaction.dynamic_sampling_context))

----------------------------------------

TITLE: Monitoring Energy Usage
DESCRIPTION: Uses task_info with TASK_POWER_INFO_V2 to measure energy consumption from CPU operations every 100ms.

LANGUAGE: objective-c
CODE:
task_info(task, TASK_POWER_INFO_V2)

----------------------------------------

TITLE: Uploading Debug Files Using sentry-cli
DESCRIPTION: Command for uploading debug files to Sentry using sentry-cli. The command recursively scans a specified folder and uploads debug files. The --wait flag can be used for manual testing to ensure files are uploaded before sending crash reports.

LANGUAGE: bash
CODE:
sentry-cli debug-files upload

LANGUAGE: bash
CODE:
sentry-cli debug-files upload --wait

----------------------------------------

TITLE: Logging Errors to Sentry in PowerShell
DESCRIPTION: This snippet demonstrates how to catch an error and log it to Sentry using the Out-Sentry cmdlet in PowerShell. It intentionally throws a test error and then uses the pipeline to send the error object to Sentry.

LANGUAGE: powershell
CODE:
try
{
    throw 'Test error'
}
catch
{
    $_ | Out-Sentry
}

----------------------------------------

TITLE: Setting Basic Fingerprint in Sentry SDK
DESCRIPTION: Demonstrates how to set a basic fingerprint using an array of strings to override Sentry's default grouping.

LANGUAGE: javascript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['my-view-function']);
  Sentry.captureException(error);
});

LANGUAGE: python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.fingerprint = ['my-view-function']
    sentry_sdk.capture_exception(error)

LANGUAGE: ruby
CODE:
Sentry.with_scope do |scope|
  scope.set_fingerprint(['my-view-function'])
  Sentry.capture_exception(error)
end

----------------------------------------

TITLE: WSGI Environment Object Structure in Pyramid Integration
DESCRIPTION: Demonstrates the structure of the WSGI environment object added by the Pyramid integration. This object contains parsed URL data and is particularly useful when transaction starts before URL route resolution.

LANGUAGE: python
CODE:
{
  # This can be useful for cases in which the transaction starts before the URL
  # is resolved into a route (meaning the transaction's name won't help much),
  # as it contains parsed URL data
  "wsgi_environ": <dict>
}

----------------------------------------

TITLE: Instrumenting Queue Consumer in Java with Sentry
DESCRIPTION: This snippet shows how to instrument a queue consumer using Sentry in Java. It creates a transaction, continues the trace from the producer, starts a child span for queue processing, sets span data, and processes the message.

LANGUAGE: java
CODE:
MyCustomQueue connection = MyCustomQueue.connect();

// Pick up message from queues
String queue = "messages";
Message message = connection.consume(queue);

// Calculate latency (optional, but valuable)
Instant now = Instant.now();
Instant messageTime = Instant.ofEpochSecond(message.getTimestamp());
Duration latency = Duration.between(messageTime, now);

// Create transaction
final TransactionContext transactionContext = Sentry.continueTrace(sentryTraceHeader, baggageHeader);
ITransaction transaction = Sentry.startTransaction(transactionContext, "queue_consumer_transaction", "function");

try {
    ISpan span = transaction.startChild("queue.process", "queue_consumer")

    try {
        // Set span data
        span.setData("messaging.message.id", message.getMessageId());
        span.setData("messaging.destination.name", queue);
        //
        span.setData("messaging.message.body.size", message.getBody().getBytes(StandardCharsets.UTF_8).length);
        span.setData("messaging.message.receive.latency", latency.toMillis());
        span.setData("messaging.message.retry.count", 0);

        // Process the message
        processMessage(message);
    } catch (Exception e) {
        span.setThrowable(e);
        span.setStatus(SpanStatus.INTERNAL_ERROR);
        throw e;
    } finally {
        span.finish();
    }
} catch (Exception e) {
    transaction.setThrowable(e);
    transaction.setStatus(SpanStatus.INTERNAL_ERROR);
    throw e;
} finally {
    transaction.finish();
}

----------------------------------------

TITLE: Generating GitHub Workflow Files for Sentry Python SDK CI
DESCRIPTION: This Python script scans the tox.ini file and generates group test CI YAML files in the .github/workflows directory. It defines test groups and uses Jinja2 templates to create the resulting YAML configurations.

LANGUAGE: Python
CODE:
scripts/split-tox-gh-actions/split-tox-gh-actions.py

----------------------------------------

TITLE: Configuring Sentry Breadcrumb Callback in Laravel
DESCRIPTION: Defines a closure for processing Sentry breadcrumbs before they are recorded. The callback receives a breadcrumb object and can modify or filter it before returning.

LANGUAGE: php
CODE:
'before_breadcrumb' => function (\Sentry\Breadcrumb $breadcrumb): ?\Sentry\Breadcrumb {
    return $breadcrumb;
},

----------------------------------------

TITLE: Initializing Sentry PHP SDK with Trace Sampling
DESCRIPTION: Configures the Sentry PHP SDK with a DSN and custom trace sampling logic. The sampling function inherits sampling decisions from parent transactions and contains placeholder logic for additional sampling rules.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'traces_sampler' => function (\Sentry\Tracing\SamplingContext $context): float {
        // always inherit
        if ($context->getParentSampled()) {
            return 1.0;
        }

        // the rest of sampling logic
    },
]);

----------------------------------------

TITLE: Implementing User Feedback Capture in Phoenix ErrorView
DESCRIPTION: This snippet shows how to implement user feedback capture in a Phoenix application's ErrorView. It uses Sentry.get_last_event_id_and_source/0 to check for Sentry events and renders a feedback form for 500 errors.

LANGUAGE: elixir
CODE:
defmodule MyAppWeb.ErrorView do
  # ...

  def render("500.html", _assigns) do
    case Sentry.get_last_event_id_and_source() do
      {event_id, :plug} when is_binary(event_id) ->
        opts = Jason.encode!(%{eventId: event_id})

        ~E"""
        <script src="https://browser.sentry-cdn.com/5.9.1/bundle.min.js" integrity="sha384-/x1aHz0nKRd6zVUazsV6CbQvjJvr6zQL2CHbQZf3yoLkezyEtZUpqUNnOLW9Nt3v" crossorigin="anonymous"></script>
        <script>
          Sentry.init({ dsn: '<%= Sentry.get_dsn() %>' });
          Sentry.showReportDialog(<%= raw opts %>)
        </script>
        """

      _ ->
        "Error"
    end
  end
end

----------------------------------------

TITLE: Emitting a Set Metric in Java and Kotlin
DESCRIPTION: This snippet demonstrates how to emit a set metric in Java and Kotlin. It includes setting a key, value, custom measurement unit, and tags for the metric.

LANGUAGE: Java
CODE:
final Map<String, String> tags = new HashMap<>();
tags.put("page", "home");

Sentry.metrics().set(
    "user_view",
    "jane",
    new MeasurementUnit.Custom("username"),
    tags);

LANGUAGE: Kotlin
CODE:
Sentry.metrics().set(
    "user_view",
    "jane",
    MeasurementUnit.Custom("username"),
    mapOf(
        "page" to "home"
    )
)

----------------------------------------

TITLE: Native Stack Trace JSON Representation with Register Values
DESCRIPTION: This JSON snippet illustrates a minimal native stack trace with register values. It includes instruction addresses for frames and register values. Note that the 'package' event attribute must be 'native' for these frames to be symbolicated.

LANGUAGE: json
CODE:
{
  "frames": [
    { "instruction_addr": "0x7fff5bf3456c" },
    { "instruction_addr": "0x7fff5bf346c0" }
  ],
  "registers": {
    "rip": "0x00007ff6eef54be2",
    "rsp": "0x0000003b710cd9e0"
  }
}

----------------------------------------

TITLE: Creating Sentry Transaction for Code Region Monitoring
DESCRIPTION: Demonstrates how to create a transaction to monitor performance of code regions using Sentry SDK. The example shows wrapping an expensive operation (process_item) within a transaction context manager to track its execution and send performance data to Sentry.

LANGUAGE: python
CODE:
from sentry_sdk import start_transaction

while True:
  item = get_from_queue()

  with start_transaction(op="task", name=item.get_transaction_name()):
      # process_item may create more spans internally (see next examples)
      process_item(item)

----------------------------------------

TITLE: Adding Custom Breadcrumb in Python
DESCRIPTION: This code adds a custom breadcrumb to the trail of breadcrumbs associated with any error triggered through the method call flow.

LANGUAGE: python
CODE:
sentry_sdk.add_breadcrumb(
    category='URL Endpoints',
    message='In the handled function',
    level='info',
)

----------------------------------------

TITLE: Setting Transaction Info
DESCRIPTION: Demonstrates how to specify transaction information including the source of the transaction name.

LANGUAGE: json
CODE:
{
  "transaction_info": {
    "source": "route"
  }
}

----------------------------------------

TITLE: Setting User Context
DESCRIPTION: Example of setting user context data for error tracking and association.

LANGUAGE: javascript
CODE:
Raven.context(function () {
  Raven.setContext({
    user: {
      email: "matt@example.com",
      id: "123"
    }
  });
  // errors thrown here will be associated with matt
});
// errors thrown here will not be associated with matt

----------------------------------------

TITLE: Uploading Minidump with Custom Fields using cURL
DESCRIPTION: This example shows how to upload a Minidump file to Sentry with additional custom fields. It demonstrates adding extra information to the crash report by including more form fields in the HTTP request.

LANGUAGE: bash
CODE:
curl -X POST \
  '___MINIDUMP_URL___' \
  -F upload_file_minidump=@mini.dmp \
  -F custom_field=value

----------------------------------------

TITLE: Full Configuration Options for Sentry Android Gradle Plugin
DESCRIPTION: Comprehensive configuration example showing all available options for the Sentry Android Gradle Plugin, including ProGuard mapping, native symbols, and source context settings.

LANGUAGE: javascript
CODE:
{
  "expo": {
...
    "plugins": [
      [
        "@sentry/react-native/expo",
        {
...
          "experimental_android": {
            "enableAndroidGradlePlugin": true,
            "autoUploadProguardMapping": true,
            "includeProguardMapping": true,
            "dexguardEnabled": true,
            "uploadNativeSymbols": true,
            "autoUploadNativeSymbols": true,
            "includeNativeSources": true,
            "includeSourceContext": true,
          }
        }
      ],
...
  }
}

----------------------------------------

TITLE: Starting PostgreSQL Database with Docker Compose
DESCRIPTION: Launches a local PostgreSQL database using Docker Compose. This command runs the database in detached mode.

LANGUAGE: bash
CODE:
docker-compose up -d

----------------------------------------

TITLE: Enabling Experimental Custom Measurements in Sentry Python SDK
DESCRIPTION: This snippet shows how to enable and use custom measurements in Sentry SDK versions before 1.16.0. It requires enabling the 'custom_measurements' experiment option and manually fetching the transaction.

LANGUAGE: python
CODE:
sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    _experiments={
        "custom_measurements": True,  # for versions before 1.16.0
    },
)


transaction = Hub.current.scope.transaction

if transaction:
    transaction.set_measurement('memory_used', 123, 'byte')

----------------------------------------

TITLE: Importing Sentry OpenFeature Integration in JavaScript
DESCRIPTION: This snippet shows how to import the Sentry OpenFeature integration. It's used to track feature flag evaluations produced by the OpenFeature SDK.

LANGUAGE: javascript
CODE:
Sentry.openFeatureIntegration

LANGUAGE: javascript
CODE:
Sentry.OpenFeatureIntegrationHook

----------------------------------------

TITLE: Adding Features to FeatureManager in Python
DESCRIPTION: Examples of adding features to the FeatureManager using different strategies including FLAGPOLE, INTERNAL, and OPTIONS (deprecated). Shows how to set default values and API exposure.

LANGUAGE: python
CODE:
# pass FeatureHandlerStrategy.FLAGPOLE to use our options-backed feature flagging system:
manager.add("organizations:onboarding", OrganizationFeature, FeatureHandlerStrategy.FLAGPOLE)

# pass FeatureHandlerStrategy.INTERNAL if you don't plan to use options automator:
manager.add("organizations:onboarding", OrganizationFeature, FeatureHandlerStrategy.INTERNAL)

# [DEPRECATED] pass FeatureHandlerStrategy.OPTIONS to use options automator:
manager.add("organizations:onboarding", OrganizationFeature, FeatureHandlerStrategy.OPTIONS)

----------------------------------------

TITLE: Running Frontend Development Server with Yarn
DESCRIPTION: Command to run the Sentry frontend development server for testing documentation changes.

LANGUAGE: Shell
CODE:
yarn dev-ui

----------------------------------------

TITLE: Setting Sentry Fingerprint in Java
DESCRIPTION: Configures a custom fingerprint for error grouping in Sentry using Java. Uses the Sentry SDK to set a fingerprint with 'auth-error' tag to group authentication-related errors together.

LANGUAGE: java
CODE:
import java.util.Arrays;
import io.sentry.Sentry;

Sentry.configureScope(scope -> {
  scope.setFingerprint(Arrays.asList("auth-error"));
});

----------------------------------------

TITLE: Creating Attachments with Bytes in Sentry
DESCRIPTION: This snippet shows how to create an attachment using bytes in Sentry. When using bytes, you need to specify a filename.

LANGUAGE: markdown
CODE:
<PlatformContent includePath="enriching-events/attachment-init-with-bytes" />

----------------------------------------

TITLE: Creating Attachments with Bytes in Sentry
DESCRIPTION: This snippet shows how to create an attachment using bytes in Sentry. When using bytes, you need to specify a filename.

LANGUAGE: markdown
CODE:
<PlatformContent includePath="enriching-events/attachment-init-with-bytes" />

----------------------------------------

TITLE: Measurements Structure in JSON
DESCRIPTION: Shows the structure of the measurements object, which contains various metrics collected during profile collection.

LANGUAGE: json
CODE:
{
  "cpu_0": {
    "unit": "percent",
    "values": {
      "timestamp": 1724777211.6403089,
      "value": 12.64,
    }
  }
}

----------------------------------------

TITLE: Wrapping Solid ErrorBoundary with Sentry in JSX
DESCRIPTION: This snippet shows how to import Sentry and Solid's ErrorBoundary, wrap the ErrorBoundary with Sentry's withSentryErrorBoundary function, and use the resulting component in a Solid application. It captures exceptions automatically and renders a fallback component when an error occurs.

LANGUAGE: jsx
CODE:
import * as Sentry from "@sentry/solid";
import { ErrorBoundary } from "solid-js";

// Wrap Solid"s ErrorBoundary to automatically capture exceptions
const SentryErrorBoundary = Sentry.withSentryErrorBoundary(ErrorBoundary);

export default function SomeComponent() {
  return (
    <SentryErrorBoundary fallback={err => <div>Error: {err.message}</div>}>
        <div>Some Component</div>
    </SentryErrorBoundary>
  );
}

----------------------------------------

TITLE: Implementing Custom Iterator in Rust
DESCRIPTION: Demonstrates how to create a custom iterator type as a newtype around a boxed iterator when implementing a custom iterator is exceptionally hard.

LANGUAGE: rust
CODE:
pub struct FooIter(Box<dyn Iterator<Item = Foo>>);

impl Iterator for FooIter {
    type Item = Foo;

    fn next(&mut self) -> Option<Self::Item> {
        self.0.next()
    }
}

----------------------------------------

TITLE: Performing Check-Ins for Job Monitoring in Bash
DESCRIPTION: This snippet demonstrates how to perform check-ins at the start and end of a job using cURL commands. It includes notifications for job start, successful completion, and failure.

LANGUAGE: bash
CODE:
SENTRY_INGEST="https://___ORG_INGEST_DOMAIN___"
SENTRY_CRONS="${SENTRY_INGEST}/api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/"

# 🟡 Notify Sentry your job is running:
curl "${SENTRY_CRONS}?status=in_progress"

# Execute your scheduled task here...

# 🟢 Notify Sentry your job has completed successfully:
curl "${SENTRY_CRONS}?status=ok"

# 🔴 Notify Sentry your job has failed:
curl "${SENTRY_CRONS}?status=error"

----------------------------------------

TITLE: Configuring Sentry Flutter SDK
DESCRIPTION: Basic configuration setup for Sentry Flutter SDK including performance monitoring and profiling options. Initializes the SDK with DSN and sampling rates for transactions and profiles.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) {
      options.dsn = '___PUBLIC_DSN___';
      options.sendDefaultPii = true;
      options.tracesSampleRate = 1.0;
      options.profilesSampleRate = 1.0;
    },
    appRunner: () => runApp(
      SentryWidget(
        child: MyApp(),
      ),
    ),
  );
}

----------------------------------------

TITLE: Configuring Sentry Flutter SDK
DESCRIPTION: Basic configuration setup for Sentry Flutter SDK including performance monitoring and profiling options. Initializes the SDK with DSN and sampling rates for transactions and profiles.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) {
      options.dsn = '___PUBLIC_DSN___';
      options.sendDefaultPii = true;
      options.tracesSampleRate = 1.0;
      options.profilesSampleRate = 1.0;
    },
    appRunner: () => runApp(
      SentryWidget(
        child: MyApp(),
      ),
    ),
  );
}

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Java
DESCRIPTION: This snippet demonstrates how to capture exceptions using Sentry in Java. It shows two examples: one with a custom scope that sets a tag and log level, and another without any customization.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.SentryLevel;

// will be tagged with my-tag="my value"
Sentry.captureException(new Exception("my error"), scope -> {
  scope.setTag("my-tag", "my value");
  scope.setLevel(SentryLevel.WARNING);
});

// will not be tagged with my-tag
Sentry.captureException(new Exception("my error"));

----------------------------------------

TITLE: Installing Sentry SDK with pip
DESCRIPTION: Installs the latest version of sentry-sdk using pip package manager.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk

----------------------------------------

TITLE: Accessing WSGI Environment in Flask Integration
DESCRIPTION: Example of the sampling context dictionary containing the WSGI environ object. This object provides parsed URL data which is particularly useful when transaction starts before URL route resolution.

LANGUAGE: python
CODE:
{
  # This can be useful for cases in which the transaction starts before the URL
  # is resolved into a route (meaning the transaction's name won't help much),
  # as it contains parsed URL data
  "wsgi_environ": <dict>
}

----------------------------------------

TITLE: Initializing Sentry with ESM
DESCRIPTION: Creates an instrument.mjs file to initialize Sentry with tracing enabled. Must be called before importing other modules to ensure proper instrumentation.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

// Ensure to call this before importing any other modules!
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Add Tracing by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Configuring Custom Pattern Matching for PII in Sentry (JSON)
DESCRIPTION: Demonstrates how to set up a custom regex pattern for matching and hashing device IDs. The rule uses a Perl-style regex to identify the pattern and applies a hash redaction method.

LANGUAGE: json
CODE:
{
  "rules": {
    "hash_device_id": {
      "type": "pattern",
      "pattern": "d/[a-f0-9]{12}",
      "redaction": {
        "method": "hash"
      }
    }
  },
  "applications": {
    "$string": ["hash_device_id"]
  }
}

----------------------------------------

TITLE: Initializing Sentry with Custom TracesSampler in Go
DESCRIPTION: This code initializes Sentry with custom ClientOptions, specifically setting up a TracesSampler function. The sampler inherits sampling decisions from the parent context if available, or allows for custom sampling logic.

LANGUAGE: go
CODE:
err := sentry.Init(sentry.ClientOptions{
	// ...
	TracesSampler: sentry.TracesSampler(func(ctx sentry.SamplingContext) float64 {
		// Inherit decision from parent.
		if ctx.Parent != nil && ctx.Parent.Sampled != sentry.SampledUndefined {
			return 1.0
		}
		// Or continue with a custom decision...
	}),
})

----------------------------------------

TITLE: Importing Sentry SDK using ES Modules in Node.js
DESCRIPTION: This snippet demonstrates how to import the Sentry SDK using ES Modules in Node.js. It uses the import statement to import all exports from the @sentry/node package as Sentry.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

----------------------------------------

TITLE: Basic Error Capture with try-catch in JavaScript
DESCRIPTION: Demonstrates how to capture and report errors using try-catch blocks with Raven.captureException()

LANGUAGE: javascript
CODE:
try {
  doSomething(a[0]);
} catch (e) {
  Raven.captureException(e);
}

----------------------------------------

TITLE: Basic Error Capture with try-catch in JavaScript
DESCRIPTION: Demonstrates how to capture and report errors using try-catch blocks with Raven.captureException()

LANGUAGE: javascript
CODE:
try {
  doSomething(a[0]);
} catch (e) {
  Raven.captureException(e);
}

----------------------------------------

TITLE: Verifying Sentry SDK Setup with Intentional Error
DESCRIPTION: Add this code snippet to your application to generate an intentional error, which will be captured by Sentry if the SDK is correctly configured.

LANGUAGE: python
CODE:
division_by_zero = 1 / 0

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for a documentation page about custom instrumentation, setting the title and sidebar order.

LANGUAGE: markdown
CODE:
---
title: Custom Instrumentation
sidebar_order: 40
---

----------------------------------------

TITLE: Configuring Sentry Integration in astro.config.mjs
DESCRIPTION: Demonstrates how to set up Sentry integration in an Astro configuration file, specifically configuring source map upload options with a custom application key. The configuration is done within the defineConfig object using the sentry integration.

LANGUAGE: javascript
CODE:
export default defineConfig({
  integrations: [
    sentry({
      sourceMapsUploadOptions: {
        unstable_sentryVitePluginOptions: {
          applicationKey: "your-custom-application-key",
        },
      },
    }),
  ],
});

----------------------------------------

TITLE: Configuring Sentry Integration in astro.config.mjs
DESCRIPTION: Demonstrates how to set up Sentry integration in an Astro configuration file, specifically configuring source map upload options with a custom application key. The configuration is done within the defineConfig object using the sentry integration.

LANGUAGE: javascript
CODE:
export default defineConfig({
  integrations: [
    sentry({
      sourceMapsUploadOptions: {
        unstable_sentryVitePluginOptions: {
          applicationKey: "your-custom-application-key",
        },
      },
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry with Remix and Configuring Integrations
DESCRIPTION: This code initializes Sentry with Remix, sets up Replay integration, and enables Canvas recording. It configures the DSN, session sample rates for replays, and adds the necessary integrations.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/remix";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    // Keep the Replay integration as before
    Sentry.replayIntegration(),

    // The following is all you need to enable canvas recording with Replay
    Sentry.replayCanvasIntegration(),
  ],
});

----------------------------------------

TITLE: Initializing Sentry SDK with Bun
DESCRIPTION: Sets up Sentry SDK with configuration for error tracking and performance monitoring. Includes settings for DSN, trace sampling rate, and trace propagation targets. The configuration enables full trace sampling in development and allows trace propagation for specified URLs.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/bun";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
});

----------------------------------------

TITLE: Integrating Sentry with Unleash Feature Flags in Vue.js
DESCRIPTION: This snippet shows how to initialize Sentry with Unleash integration, set up the Unleash client, and use feature flags. It also demonstrates capturing exceptions with Sentry.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/vue';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({featureFlagClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Executing Regex on Main Thread in iOS Swift
DESCRIPTION: This code snippet demonstrates a performance issue where a regular expression is created and executed on the main thread, potentially causing app responsiveness problems.

LANGUAGE: swift
CODE:
let url = Bundle.main.url(forResource: "mobydick", withExtension: "txt")!
let text = try! String(contentsOf: url)
let regex = try! NSRegularExpression(pattern: #"([tT]he)?.*([wW]hale)"#, options: [.dotMatchesLineSeparators])
let results = regex.matches(in: text, range: NSMakeRange(0, text.count))

----------------------------------------

TITLE: Initializing Sentry Transaction in Swift
DESCRIPTION: Shows how to create a Sentry transaction with custom sampling context in Swift. Demonstrates setting up sampling context with user ID and search results, then initializing a transaction with context and operation details.

LANGUAGE: swift
CODE:
import Sentry

// The following data will take part in the sampling decision
let samplingContext : [String: Any] = {
    "user_id": 12312012,
    "search_results": searchResults
}

var transaction = SentrySDK.startTransaction(
  transactionContext: TransactionContext(name:"GET /search", operation: "http"),
  customSamplingContext: samplingContext
)

// The following is set on transaction, so does not take part in
// the sampling decision
transaction.context.operation = "http"
transaction.context.spanDescription = "search results"

----------------------------------------

TITLE: Customizing Breadcrumbs Integration in Sentry SDK
DESCRIPTION: This example shows how to customize the Breadcrumbs integration when initializing the Sentry SDK. It demonstrates disabling console breadcrumbs while keeping other default integrations.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.breadcrumbsIntegration({
      console: false,
    }),
  ],
});

----------------------------------------

TITLE: Handling Missing Type Annotations in TypeScript React Components
DESCRIPTION: Demonstrates how to properly type event handlers in React components to address noImplicitAny errors. Shows the progression from implicit any to explicit any, and finally to the correct React.MouseEvent type.

LANGUAGE: tsx
CODE:
// ❌
const handleClick = (e) => {
  e.stopPropagation()
  props.onClick()
}

LANGUAGE: tsx
CODE:
// ⚠️
const handleClick = (event: any) => {
  event.stopPropagation()
  props.onClick()
}

LANGUAGE: tsx
CODE:
// ✅
const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
  e.stopPropagation()
  props.onClick()
}

----------------------------------------

TITLE: Installing Sentry Laravel Package
DESCRIPTION: Command to install the sentry-laravel package using Composer for Laravel 5.x and above.

LANGUAGE: bash
CODE:
composer require sentry/sentry-laravel

----------------------------------------

TITLE: Displaying Kafka Offset Out of Range Error
DESCRIPTION: Example error message when Kafka brokers and consumers become out of sync

LANGUAGE: log
CODE:
Exception: KafkaError{code=OFFSET_OUT_OF_RANGE,val=1,str=\"Broker: Offset out of range\"}

----------------------------------------

TITLE: Adding JSON Support to UE Build Script
DESCRIPTION: C# build script modification to add JSON support for the crash reporter configuration.

LANGUAGE: csharp
CODE:
PublicDependencyModuleNames.AddRange(new string[] { ..., "Json" });

----------------------------------------

TITLE: Intercepting API Requests to Add Atlas Session ID in JavaScript
DESCRIPTION: This code snippet demonstrates how to intercept API requests and add the Atlas session ID to the request headers. It uses Axios interceptors to modify the request configuration.

LANGUAGE: javascript
CODE:
apiAxios.interceptors.request.use((config) => {
  config.headers["X-Atlas-Session-Id"] =
    window.Atlas?.recording?.getSessionId();
  return config;
});

----------------------------------------

TITLE: Importing Sentry Layer Image in Dockerfile for AWS Lambda
DESCRIPTION: This snippet shows how to add Sentry's Layer Image to a Dockerfile for an AWS Lambda Container Image. It copies the Sentry Python serverless SDK from a public ECR repository.

LANGUAGE: docker
CODE:
COPY --from=public.ecr.aws/sentry/sentry-python-serverless-sdk:<VERSION> /opt/ /opt

----------------------------------------

TITLE: Setting Uniform Transaction Sample Rate in Sentry SDK
DESCRIPTION: Configure the traces_sample_rate option to set a uniform sample rate for transactions. This provides an even cross-section of transactions across your application.

LANGUAGE: javascript
CODE:
Sentry.init({
  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Adding Sentry to ASP.NET Core 2.x in F#
DESCRIPTION: This snippet demonstrates how to add Sentry to an ASP.NET Core 2.x application using F#. It modifies the BuildWebHost function to include the UseSentry extension method with the public DSN.

LANGUAGE: fsharp
CODE:
let BuildWebHost args =
    WebHost.CreateDefaultBuilder(args)
        // Add the following line:
        .UseSentry("___PUBLIC_DSN___")

----------------------------------------

TITLE: Configuring Transaction Sampling
DESCRIPTION: Code example showing how to ignore specific transaction patterns using wildcards.

LANGUAGE: python
CODE:
ignore_transactions = ['GET /api/health','/api/v1/*']

----------------------------------------

TITLE: DSC Baggage Header Example
DESCRIPTION: Example showing the format of a baggage header containing Dynamic Sampling Context with multiple vendor values.

LANGUAGE: text
CODE:
baggage: other-vendor-value-1=foo;bar;baz, sentry-trace_id=771a43a4192642f0b136d5159a501700, sentry-public_key=49d0f7386ad645858ae85020e393bef3, sentry-sample_rate=0.01337, sentry-user_id=Am%C3%A9lie, other-vendor-value-2=foo;bar;

----------------------------------------

TITLE: Generating ProGuard UUID in Python
DESCRIPTION: Python implementation for generating UUIDs for ProGuard files based on file checksum. The algorithm uses UUID namespace for guardsquare.com and generates a SHA1 UUID based on the file contents.

LANGUAGE: python
CODE:
import uuid

NAMESPACE = uuid.uuid5(uuid.NAMESPACE_DNS, "guardsquare.com")

def get_proguard_uuid(filename):
    with open(filename, 'rb') as f:
        return uuid.uuid5(NAMESPACE, f.read())

----------------------------------------

TITLE: Generating ProGuard UUID in Python
DESCRIPTION: Python implementation for generating UUIDs for ProGuard files based on file checksum. The algorithm uses UUID namespace for guardsquare.com and generates a SHA1 UUID based on the file contents.

LANGUAGE: python
CODE:
import uuid

NAMESPACE = uuid.uuid5(uuid.NAMESPACE_DNS, "guardsquare.com")

def get_proguard_uuid(filename):
    with open(filename, 'rb') as f:
        return uuid.uuid5(NAMESPACE, f.read())

----------------------------------------

TITLE: Disabling Auto-Initialization of Native SDKs in Flutter for Sentry
DESCRIPTION: This code snippet demonstrates how to disable the automatic initialization of native SDKs when using Sentry in a Flutter application. It sets the 'autoInitializeNativeSdk' option to false during the SentryFlutter initialization process.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) => options
      ..dsn = '___PUBLIC_DSN___'
      ..autoInitializeNativeSdk = false,
    appRunner: () => runApp(MyApp()),
  );
}

----------------------------------------

TITLE: Starting Sentry Web Server
DESCRIPTION: Shell command to start the Sentry web server process, which initializes the web workers without frontend asset handling.

LANGUAGE: shell
CODE:
sentry run web

----------------------------------------

TITLE: Configuring Sentry Unity Options in C#
DESCRIPTION: Example showing how to configure Sentry Unity SDK options programmatically, including BeforeSend callback implementation and native SDK initialization settings for Android and iOS platforms.

LANGUAGE: csharp
CODE:
public override void Configure(SentryUnityOptions options)
{
    // BeforeSend is currently limited to C# code. Native errors - such as crashes in C/C++ code - are getting
    // captured by the native SDKs, but the native SDKs won't invoke this callback.
    options.SetBeforeSend((sentryEvent, _) =>
    {
        if (sentryEvent.Tags.ContainsKey("SomeTag"))
        {
            // Don't send events with a tag "SomeTag" to Sentry
            return null;
        }

        return sentryEvent;
    });

    // Native SDK initialization timing options:
    // Build-time initialization:
    //   + Can capture Unity engine errors
    //   - Options are fixed at build time
    // Runtime initialization:
    //   + Allows dynamic configuration
    //   - May miss some early errors
#if UNITY_ANDROID
    options.AndroidNativeInitializationType = NativeInitializationType.Runtime;
#elif UNITY_IOS
    options.IosNativeInitializationType = NativeInitializationType.Runtime;
#endif
}

----------------------------------------

TITLE: Adding Sentry Dependency in Package.swift
DESCRIPTION: Swift Package Manager dependency declaration for Sentry SDK in Package.swift file. Specifies the package URL and version requirements.

LANGUAGE: swift
CODE:
.package(url: "https://github.com/getsentry/sentry-cocoa", from: "{{@inject packages.version('sentry.cocoa') }}")

----------------------------------------

TITLE: Adding Sentry Dependency in Package.swift
DESCRIPTION: Swift Package Manager dependency declaration for Sentry SDK in Package.swift file. Specifies the package URL and version requirements.

LANGUAGE: swift
CODE:
.package(url: "https://github.com/getsentry/sentry-cocoa", from: "{{@inject packages.version('sentry.cocoa') }}")

----------------------------------------

TITLE: Manual Transaction Finish in Java
DESCRIPTION: Code example showing how to manually finish a running transaction using Sentry's Java API.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

ISpan span = Sentry.getSpan();
if (span != null) {
  span.finish();
}

----------------------------------------

TITLE: Manual Transaction Finish in Java
DESCRIPTION: Code example showing how to manually finish a running transaction using Sentry's Java API.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

ISpan span = Sentry.getSpan();
if (span != null) {
  span.finish();
}

----------------------------------------

TITLE: Celery Job Context Structure in Python
DESCRIPTION: Demonstrates the structure of the sampling context data added by the Celery integration, which includes a dictionary containing information about the current Celery job.

LANGUAGE: python
CODE:
{
  "celery_job": <dict>
}

----------------------------------------

TITLE: Initializing Sentry with Tracing in Next.js
DESCRIPTION: This code snippet demonstrates how to initialize Sentry in a Next.js application with tracing enabled. It sets the DSN and configures the tracesSampleRate for performance monitoring.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // We recommend adjusting this value in production, or using `tracesSampler`
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing Analytics Package in Python
DESCRIPTION: Shows how to set up the analytics package initialization in Python by importing all analytics classes.

LANGUAGE: python
CODE:
from __future__ import absolute_import

from .analytics import *  # NOQA

----------------------------------------

TITLE: Configuring Sentry User Scope in Java
DESCRIPTION: Sets up Sentry scope configuration including a custom tag and user information with ID and email using Java. Uses the Sentry SDK to track user context for error reporting.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.protocol.User;

Sentry.configureScope(scope -> {
  scope.setTag("my-tag", "my value");
  User user = new User();
  user.setId("42");
  user.setEmail("john.doe@example.com");
  scope.setUser(user);
});

----------------------------------------

TITLE: Flushing Metrics in PHP with Sentry
DESCRIPTION: This code demonstrates how to manually flush emitted metrics to Sentry. It includes an example of registering the flushing in a shutdown function to reduce overhead.

LANGUAGE: php
CODE:
use function Sentry\metrics;

metrics()->flush();

LANGUAGE: php
CODE:
use function Sentry\metrics;

register_shutdown_function(static fn () => metrics()->flush());

----------------------------------------

TITLE: Setting User Context with Internal Identifier in Sentry
DESCRIPTION: Demonstrates how to set user context using internal identifiers instead of sensitive information like email addresses.

LANGUAGE: javascript
CODE:
Sentry.setUser({
  id: "12312012",
  organization: "my-company"
})

----------------------------------------

TITLE: Adding Sentry Replay Integration in Client-Side Config
DESCRIPTION: This code snippet shows how to add the Sentry Replay integration in a custom client-side SDK configuration file. It initializes Sentry with specific replay sample rates and includes the replay integration.

LANGUAGE: javascript
CODE:
import * as sentry from "@sentry/astro";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
  integrations: [Sentry.replayIntegration()],
});

----------------------------------------

TITLE: Setting Tags via Callback in PHP
DESCRIPTION: This placeholder indicates where code for defining a tag via callback would be inserted. The actual code is not provided in the snippet, but it's meant to show how to set tags programmatically.

LANGUAGE: php
CODE:
<PlatformContent includePath="enriching-events/set-tag" />

----------------------------------------

TITLE: Initializing Sentry with Custom Error Handling in Dart
DESCRIPTION: This snippet shows how to initialize Sentry with a custom beforeSend callback. The callback specifically handles DatabaseExceptions by setting a custom fingerprint for better error grouping.

LANGUAGE: dart
CODE:
await Sentry.init((options) {
  options.beforeSend = (event, hint) {
    if (event.throwable is DatabaseException) {
      event = event.copyWith(fingerprint: ['database-connection-error']);
    }
    return event;
  };
});

----------------------------------------

TITLE: Configuring LaunchDarkly Integration in Sentry SDK (JavaScript)
DESCRIPTION: This code snippet demonstrates how to set up the LaunchDarkly integration in the Sentry SDK. It initializes Sentry with the LaunchDarkly integration and configures a flag used handler to track feature flag evaluations.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";
import * as LDClient from "launchdarkly-js-client-sdk";

const client = LDClient.initialize("YOUR_CLIENT_SIDE_ID", user);

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.launchDarklyIntegration({client})],
});

client.on('ready', () => {
  const flagUsedHandler = Sentry.buildLaunchDarklyFlagUsedHandler(client);
  client.on('change', flagUsedHandler);
});

// Your app code

----------------------------------------

TITLE: Using Style and CSS Attributes for Dynamic Styling
DESCRIPTION: Shows how to use style and css attributes for one-off dynamic styling in complex layouts.

LANGUAGE: tsx
CODE:
import styled from '@emotion/styled';
import {css} from '@emotion/react';
import {space} from 'sentry/styles/space';

const Grid = styled('div')`
  display: grid;
  grid-template-areas:
    'logo search'
    'sidebar main';

  gap: var(--grid-gap, 0px);

  @media (max-width: ${p => p.theme.breakpoints.small}) {
    grid-template:
        'logo' auto
        'search' auto
        'main' auto / 1fr;

    /* Hide sidebar, which is in an auto-column */
    grid-auto-columns: 0px;
  }
`;

return (
  <Grid css={css`--grid-gap: ${space(1)};`}>
    <HomeLink style={{gridArea: 'logo'}} />
    <SearchForm style={{gridArea: 'search'}} />
    <Navigation style={{gridArea: 'sidebar'}} />
    <DataTable style={{gridArea: 'main'}} />
  </Grid>
);

----------------------------------------

TITLE: Installing Sentry PowerShell SDK with PowerShellGet
DESCRIPTION: This command installs the Sentry module for the current user from the PSGallery repository. It uses the 'Install-Module' cmdlet with the '-Force' parameter to ensure installation even if a previous version exists.

LANGUAGE: powershell
CODE:
Install-Module -Name Sentry -Scope CurrentUser -Repository PSGallery -Force

----------------------------------------

TITLE: Handling Specific Array Element Access in TypeScript
DESCRIPTION: Demonstrates different methods to safely access specific array elements, particularly the first element, when using noUncheckedIndexedAccess. Includes examples of explicit checks, optional chaining, and const assertions.

LANGUAGE: typescript
CODE:
// ✅
const first = collection[0]
if (first) {
  // ...
}

LANGUAGE: typescript
CODE:
// ✅
const first = collection[0]
first?.toUpperCase()

LANGUAGE: typescript
CODE:
// ✅
const collection = ['hello', 'world'] as const
const first = collection[0]

----------------------------------------

TITLE: Verification Component Example
DESCRIPTION: Vue component for testing Sentry error tracking functionality on both client and server side.

LANGUAGE: html
CODE:
<script setup>
  import * as Sentry from '@sentry/nuxt';

  function triggerClientError() {
    throw new Error("Nuxt Button Error");
  };

  function getSentryData() {
    Sentry.startSpan(
      {
        name: 'Example Frontend Span',
        op: 'test'
      },
      async () => {
        await $fetch('/api/sentry-example');
      }
    )
  }
</script>

<template>
  <button id="errorBtn" @click="triggerClientError">
    Throw Client Error
  </button>
  <button type="button" @click="getSentryData">
    Throw Server Error
  </button>
</template>

----------------------------------------

TITLE: Installing Sentry Next.js and OpenTelemetry Node Packages with Yarn
DESCRIPTION: This command installs the Sentry Next.js SDK and the Sentry OpenTelemetry Node integration using Yarn. It adds these packages as production dependencies to the project.

LANGUAGE: bash
CODE:
yarn add @sentry/nextjs @sentry/opentelemetry-node

----------------------------------------

TITLE: SDK Configuration Properties
DESCRIPTION: Various configuration options for specifying bundle IDs in different property files and SDK initialization.

LANGUAGE: properties
CODE:
io.sentry.bundle-ids=A_VALID_UUID

LANGUAGE: properties
CODE:
bundle-ids=A_VALID_UUID

LANGUAGE: properties
CODE:
sentry.bundle-ids=A_VALID_UUID

LANGUAGE: java
CODE:
options.addBundleId("A_VALID_UUID");

----------------------------------------

TITLE: React Grid Component Implementation
DESCRIPTION: React component inclusion for displaying a grid layout on the page.

LANGUAGE: jsx
CODE:
<PageGrid />

----------------------------------------

TITLE: Configuring Sentry Metro Plugin for Expo
DESCRIPTION: This snippet shows how to set up the Sentry Metro Plugin for an Expo project. It uses the getSentryExpoConfig function to create a Sentry-enabled Metro configuration.

LANGUAGE: javascript
CODE:
// const { getDefaultConfig } = require("expo/metro-config");
const { getSentryExpoConfig } = require("@sentry/react-native/metro");

// const config = getDefaultConfig(__dirname);
const config = getSentryExpoConfig(__dirname);

----------------------------------------

TITLE: Testing With ISentryClient and IHub in C#
DESCRIPTION: ISentryClient is used for capturing and queueing events to Sentry, while IHub manages the current scope and dispatches calls to the appropriate client. The SentryLogger example demonstrates using IHub for testability when scope modification is needed through AddBreadcrumb.

LANGUAGE: links
CODE:
Hub implementation: https://github.com/getsentry/sentry-dotnet/blob/master/src/Sentry/Internal/Hub.cs
SentryLogger implementation: https://github.com/getsentry/sentry-dotnet/blob/master/src/Sentry.Extensions.Logging/SentryLogger.cs
SentryLogger tests: https://github.com/getsentry/sentry-dotnet/blob/master/test/Sentry.Extensions.Logging.Tests/SentryLoggerTests.cs

----------------------------------------

TITLE: Testing With ISentryClient and IHub in C#
DESCRIPTION: ISentryClient is used for capturing and queueing events to Sentry, while IHub manages the current scope and dispatches calls to the appropriate client. The SentryLogger example demonstrates using IHub for testability when scope modification is needed through AddBreadcrumb.

LANGUAGE: links
CODE:
Hub implementation: https://github.com/getsentry/sentry-dotnet/blob/master/src/Sentry/Internal/Hub.cs
SentryLogger implementation: https://github.com/getsentry/sentry-dotnet/blob/master/src/Sentry.Extensions.Logging/SentryLogger.cs
SentryLogger tests: https://github.com/getsentry/sentry-dotnet/blob/master/test/Sentry.Extensions.Logging.Tests/SentryLoggerTests.cs

----------------------------------------

TITLE: Configuring Sentry Mail Reply Settings
DESCRIPTION: Final YAML configuration for enabling email replies in Sentry, setting up the reply hostname and enabling reply functionality.

LANGUAGE: yaml
CODE:
# Set the SMTP hostname to your configured inbound domain
mail.reply-hostname: "inbound.sentry.example.com"

# Inform Sentry to send the appropriate mail headers to enable
# incoming replies
mail.enable-replies: true

----------------------------------------

TITLE: Configuring User Feedback in Laravel Error View
DESCRIPTION: HTML and JavaScript code for adding Sentry user feedback to Laravel's 500 error view.

LANGUAGE: html
CODE:
<div class="content">
  <div class="title">Something went wrong.</div>

  @if(app()->bound('sentry') && !empty(Sentry::getLastEventID()))
  <div class="subtitle">Error ID: {{ Sentry::getLastEventID() }}</div>

  <!-- Sentry JS SDK 2.1.+ required -->
  <script src="https://cdn.ravenjs.com/3.3.0/raven.min.js"></script>

  <script>
    Raven.showReportDialog({
      eventId: "{{ Sentry::getLastEventID() }}",
      // use the public DSN (don't include your secret!)
      dsn: "___PUBLIC_DSN___",
      user: {
        name: "Jane Doe",
        email: "jane.doe@example.com",
      },
    });
  </script>
  @endif
</div>

----------------------------------------

TITLE: Capturing Exception in Unity C#
DESCRIPTION: Demonstrates how to capture an exception using the Sentry SDK in Unity. This method is recommended over Debug.LogException for proper handling and stack trace generation.

LANGUAGE: csharp
CODE:
SentrySDK.CaptureException(exception);

----------------------------------------

TITLE: Setting Target URLs for Error Capture
DESCRIPTION: Shows how to specify which URLs should trigger error capture using the failedRequestTargets option. URLs can be matched using either regular expressions or plain strings.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.failedRequestTargets = [ "www.example.com" ]
}

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.failedRequestTargets = @[ @"www.example.com" ];
}];

----------------------------------------

TITLE: Configuring Console Message Handling
DESCRIPTION: Example showing how to configure the captureConsoleIntegration to maintain unhandled console message behavior in v9.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.captureConsoleIntegration({ handled: false })],
  attachStacktrace: true,
});

----------------------------------------

TITLE: Initializing Sentry SDK in Ember Application
DESCRIPTION: Sets up Sentry error monitoring with a configured DSN and trace sampling. The tracesSampleRate is set to 1.0 which captures all transactions for performance monitoring, though this should be adjusted in production environments.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/ember";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing Sentry with DSN
DESCRIPTION: Shows how to initialize Sentry using a DSN string directly or with options.

LANGUAGE: csharp
CODE:
// Initialize with DSN
SentrySdk.Init("___PUBLIC_DSN___");

// Initialize with options
SentrySdk.Init(options =>
{
    options.Dsn = "___PUBLIC_DSN___";
});

----------------------------------------

TITLE: Illustrating Data Flow for Filtered Transaction in Sentry
DESCRIPTION: This Mermaid flowchart shows the path of a transaction filtered by dynamic sampling in Sentry's system. It demonstrates how the transaction is processed and ultimately rejected for indexing.

LANGUAGE: mermaid
CODE:
flowchart LR
  SDK --transaction--> Relay
  Relay --transaction--> DS[Dynamic Sampling]
  Relay --transaction_indexed--> DS
  DS --transaction-->Store
  DS --transaction_indexed-->Reject
  style Reject stroke:#f00

----------------------------------------

TITLE: Capturing Exceptions with Sentry in Kotlin
DESCRIPTION: This snippet shows how to capture exceptions using Sentry in Kotlin. It includes two examples: one using a custom scope to set a tag and log level, and another without any customization.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryLevel

// will be tagged with my-tag="my value"
Sentry.captureException(Exception("my error")) { scope ->
  scope.setTag("my-tag", "my value")
  scope.level = SentryLevel.WARNING
}

// will not be tagged with my-tag
Sentry.captureException(Exception("my error"))

----------------------------------------

TITLE: Configuring Vite with Sentry Plugin
DESCRIPTION: TypeScript configuration for setting up the Sentry Vite plugin in a Remix project, including source map generation and authentication settings.

LANGUAGE: typescript
CODE:
import { defineConfig } from "vite";
import { vitePlugin as remix } from "@remix-run/dev";
import { sentryVitePlugin } from "@sentry/vite-plugin";

export default defineConfig({
  plugins: [
    remix({
      // ... your Remix plugin options
    }),
    sentryVitePlugin({
      // If you use .sentryclirc or environment variables,
      // you don't need to specify these options
      authToken: "___SENTRY_AUTH_TOKEN___",
      org: "___SENTRY_ORG_SLUG___",
      project: "___SENTRY_PROJECT_SLUG___",
    }),
  ],
  build: {
    sourcemap: true,
    // ... rest of your Vite build options
  },

  // ... rest of your Vite config
});

----------------------------------------

TITLE: Thread Metadata JSON Structure
DESCRIPTION: Illustrates the JSON structure for thread metadata in the profile data, including thread name and priority.

LANGUAGE: json
CODE:
{
  "thread_metadata": {
    "259": {
      "name": "com.apple.main-thread",
      "priority": 31
    }
  }
}

----------------------------------------

TITLE: Displaying Sentry Logo with Dark/Light Mode Support in HTML
DESCRIPTION: This HTML snippet creates a centered Sentry logo that adapts to dark and light color schemes. It uses the <picture> element with multiple <source> tags to provide different logo versions based on the user's color scheme preference.

LANGUAGE: HTML
CODE:
<p align="center">
  <a href="https://sentry.io/?utm_source=github&utm_medium=logo" target="_blank">
    <picture>
      <source srcset="https://sentry-brand.storage.googleapis.com/sentry-logo-white.png" media="(prefers-color-scheme: dark)" />
      <source srcset="https://sentry-brand.storage.googleapis.com/sentry-logo-black.png" media="(prefers-color-scheme: light), (prefers-color-scheme: no-preference)" />
      <img src="https://sentry-brand.storage.googleapis.com/sentry-logo-black.png" alt="Sentry" width="280">
    </picture>
  </a>
</p>

----------------------------------------

TITLE: Granular Error Grouping for RPC Calls in Sentry SDK
DESCRIPTION: Shows how to create more granular error grouping for RPC or API calls by incorporating specific error attributes into the fingerprint.

LANGUAGE: javascript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['{{ default }}', String(error.name), error.message]);
  Sentry.captureException(error);
});

LANGUAGE: python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.fingerprint = ['{{ default }}', str(error.name), error.message]
    sentry_sdk.capture_exception(error)

----------------------------------------

TITLE: Installing Sentry Android Gradle Plugin and SDK in Kotlin
DESCRIPTION: Add the Sentry Android Gradle plugin and Sentry Android SDK to your project's build.gradle.kts file using Kotlin DSL syntax.

LANGUAGE: kotlin
CODE:
plugins {
  id("io.sentry.android.gradle") version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

dependencies {
  implementation("io.sentry:sentry-android:{{@inject packages.version('sentry.java.android', '5.0.0') }}")
}

----------------------------------------

TITLE: Non-Database Time Calculation
DESCRIPTION: Shows how to calculate the average transaction time excluding database operations.

LANGUAGE: text
CODE:
avg(transaction.duration) - avg(spans.db)

----------------------------------------

TITLE: Configuring Sentry Scope Fingerprint in Go
DESCRIPTION: Demonstrates how to configure a Sentry scope by setting a custom fingerprint. The fingerprint helps group related events together in Sentry's error tracking interface. The code uses Sentry's ConfigureScope method with a callback function to modify the scope.

LANGUAGE: go
CODE:
sentry.ConfigureScope(func(scope *sentry.Scope) {
	scope.SetFingerprint([]string{"my-view-function"})
})

----------------------------------------

TITLE: Initializing Sentry with Custom Exception Handling in Dart
DESCRIPTION: Initializes SentryFlutter with a custom 'beforeSend' callback. This callback modifies the event fingerprint for MyRpcException instances, including the function name and HTTP status code.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) {
  options.beforeSend = (event, hint) {
    if (event.throwable is MyRpcException) {
      final exception = event.throwable as MyRpcException;
      event = event.copyWith(fingerprint: [
        '{{ default }}',
        exception.function,
        exception.httpStatusCode.toString(),
      ]);
    }
    return event;
  };
});

----------------------------------------

TITLE: Installing Sentry.AspNetCore with Paket
DESCRIPTION: This command installs the Sentry.AspNetCore NuGet package using Paket, an alternative NuGet client.

LANGUAGE: shell
CODE:
paket add Sentry.AspNetCore

----------------------------------------

TITLE: Alternative Breadcrumbs Direct Array Structure
DESCRIPTION: Alternative format showing breadcrumbs as a direct array without the values wrapper.

LANGUAGE: json
CODE:
{
  "breadcrumbs": [
    {
      "timestamp": "2016-04-20T20:55:53.845Z",
      "message": "Something happened",
      "category": "log",
      "data": {
        "foo": "bar",
        "blub": "blah"
      }
    },
    {
      "timestamp": "2016-04-20T20:55:53.847Z",
      "type": "navigation",
      "data": {
        "from": "/login",
        "to": "/dashboard"
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring 'remove' PII Redaction Method in Sentry
DESCRIPTION: This snippet demonstrates how to configure the 'remove' method for PII redaction in Sentry. It removes the entire field, setting it to null or removing it entirely.

LANGUAGE: json
CODE:
{
  "rules": {
    "remove_ip": {
      "type": "ip",
      "redaction": {
        "method": "remove"
      }
    }
  },
  "applications": {
    "$string": ["remove_ip"]
  }
}

----------------------------------------

TITLE: Initializing Sentry SDK with CDN Bundle
DESCRIPTION: Initialize the Sentry SDK when using a CDN bundle. This example includes configuration for error monitoring, performance tracing, and session replay.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // this assumes your build process replaces `process.env.npm_package_version` with a value
  release: "my-project-name@" + process.env.npm_package_version,
  integrations: [
    // If you use a bundle with tracing enabled, add the BrowserTracing integration
    Sentry.browserTracingIntegration(),
    // If you use a bundle with session replay enabled, add the Replay integration
    Sentry.replayIntegration(),
  ],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs distributed tracing should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
});

----------------------------------------

TITLE: Capturing User Feedback in Unreal Engine with Sentry C++
DESCRIPTION: Shows two methods for capturing user feedback with Sentry: using the UserFeedback object method and using the direct parameter method. Requires the Sentry subsystem to be initialized. Only supported on macOS, iOS, and Android platforms.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

USentryId* EventId = SentrySubsystem->CaptureMessage(TEXT("Message with feedback"));

USentryUserFeedback* UserFeedback = NewObject<USentryUserFeedback>();
User->Initialize(EventId);
User->SetEmail("test@sentry.io");
User->SetName("Name");
User->SetComment("Some comment");

SentrySubsystem->CaptureUserFeedback(UserFeedback);

// OR

SentrySubsystem->CaptureUserFeedbackWithParams(EventId, "test@sentry.io", "Some comment", "Name");

----------------------------------------

TITLE: Configuring Sentry Error Fingerprinting in Ruby
DESCRIPTION: Sets up Sentry initialization with a custom before_send hook that applies specific fingerprinting for database connection timeout errors. This helps group similar database connection errors together in the Sentry dashboard for better error tracking and analysis.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  #...
  config.before_send = lambda do |event, hint|
    if hint[:exception].is_a?(ActiveRecord::ConnectionTimeoutError)
      event.fingerprint = ["database-connection-error"]
    end

    event
  end
end

----------------------------------------

TITLE: Configuring Classic Component Performance Monitoring
DESCRIPTION: Setting the minimum duration threshold for classic component render time monitoring.

LANGUAGE: javascript
CODE:
ENV["@sentry/ember"] = {
  minimumComponentRenderDuration: 0, // Setting this to zero will capture all classic components.
};

----------------------------------------

TITLE: Installing Sentry Gatsby SDK with pnpm
DESCRIPTION: Installs the Sentry Gatsby SDK package using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add @sentry/gatsby

----------------------------------------

TITLE: Instrumenting Cache Get Operations in Java with Sentry
DESCRIPTION: Implementation of cache get operations with Sentry instrumentation. Creates a child span to track cache read performance, including hit/miss tracking, server details, and item size metrics.

LANGUAGE: java
CODE:
import java.util.Arrays;
import io.sentry.ISpan;
import io.sentry.Sentry;

@Override
public Object get(String key) {
    final ISpan parentSpan = Sentry.getSpan();
    if (parentSpan == null) {
        return delegate.get(key);
    } else {
        ISpan childSpan = parentSpan.startChild("cache.get", key);
        try {
            // Describe the cache server you are accessing
            childSpan.setData("network.peer.address", "cache.example.com/supercache");
            childSpan.setData("network.peer.port", 9000);

            // Add the key you want to set
            childSpan.setData("cache.key", Arrays.asList(key));

            Object value = delegate.get(key);
            childSpan.setData("cache.hit", value != null);

            // Set size of the cached value
            childSpan.setData("cache.item_size", 123);

            return value;
        } catch (Exception e) {
            childSpan.setThrowable(e);
            childSpan.setStatus(SpanStatus.INTERNAL_ERROR);
            throw e;
        } finally {
            childSpan.finish();
        }
    }
}

----------------------------------------

TITLE: Verifying Compressed Debug Sections
DESCRIPTION: Command to verify compression of debug sections in an ELF file using readelf.

LANGUAGE: bash
CODE:
readelf -S path/to/file
  ...
  [21] .debug_info       PROGBITS         0000000000000000  00000370
       000000000000e133  0000000000000000   C       0     0     1

----------------------------------------

TITLE: Verifying Compressed Debug Sections
DESCRIPTION: Command to verify compression of debug sections in an ELF file using readelf.

LANGUAGE: bash
CODE:
readelf -S path/to/file
  ...
  [21] .debug_info       PROGBITS         0000000000000000  00000370
       000000000000e133  0000000000000000   C       0     0     1

----------------------------------------

TITLE: Verifying Compressed Debug Sections
DESCRIPTION: Command to verify compression of debug sections in an ELF file using readelf.

LANGUAGE: bash
CODE:
readelf -S path/to/file
  ...
  [21] .debug_info       PROGBITS         0000000000000000  00000370
       000000000000e133  0000000000000000   C       0     0     1

----------------------------------------

TITLE: Example Configuration for Sentry Digests with Redis Backend in Python
DESCRIPTION: This snippet provides an example configuration for Sentry digests using the Redis backend. It sets the digest backend to Redis and configures options such as capacity and cluster name.

LANGUAGE: python
CODE:
SENTRY_DIGESTS = 'sentry.digests.backends.redis.RedisBackend'
SENTRY_DIGESTS_OPTIONS = {
    'capacity': 100,
    'cluster': 'digests',
}

----------------------------------------

TITLE: Setting Tags for Sensitive Data in Sentry
DESCRIPTION: Example showing how to hash sensitive data before sending it to Sentry using tags, allowing for correlation while maintaining confidentiality.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="sensitive-data/set-tag" />

----------------------------------------

TITLE: Filtering Transactions Using tracesSampler
DESCRIPTION: Example showing how to filter out unwanted transactions using the tracesSampler configuration option. The sampler function checks the transaction name and returns null to drop specific transactions.

LANGUAGE: javascript
CODE:
tracesSampler: samplingContext => {\n  if (samplingContext.transactionContext.name === \"/favicon.ico\") {\n    // Drop this transaction, by setting its sample rate to 0%\n    return 0\n  }\n  // Sample all other transactions at 10%\n  return 0.1\n}

----------------------------------------

TITLE: Configuring App Hang Timeout Interval
DESCRIPTION: Demonstrates how to customize the timeout interval for app hang detection.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.appHangTimeoutInterval = 1
}

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.appHangTimeoutInterval = 1;
}];

----------------------------------------

TITLE: GCP KMS Integration for Encrypted Backups
DESCRIPTION: Commands for using Google Cloud Platform's Key Management Service to encrypt and decrypt Sentry backups, including GCP authentication and key specification.

LANGUAGE: shell
CODE:
# Authenticate with Google Cloud (requires the `gcloud` CLI to be installed):
gcloud auth login

# Make a local JSON file specifying a key created via https://cloud.google.com/kms/docs/create-key:
cat <<EOT >> /path/to/json/spec/for/your/key.json
{
    "project_id": "<YOUR_GCP_PROJECT_ID>",
    "location": "<YOUR_KEY_LOCATION>",
    "key_ring": "<YOUR_KEY_RING_NAME>",
    "key": "<YOUR_KEY_NAME>",
    "version": "<YOUR_KEY_VERSION>"
}
EOT

# Encrypt and backup using GCP KMS:
./sentry-admin.sh export global /path/to/export.tar --encrypt-with-gcp-kms /path/to/json/file/identifying/your/kms/key.json

# Decrypt and restore using GCP KMS:
./sentry-admin.sh import global /path/to/export.tar --decrypt-with-gcp-kms /path/to/json/spec/for/your/key.json

----------------------------------------

TITLE: Configuring Script CORS Attributes
DESCRIPTION: Demonstrates how to add CORS attributes and headers to enable cross-origin script error reporting

LANGUAGE: bash
CODE:
<script src="http://another-domain.com/app.js" crossorigin="anonymous"></script>

----------------------------------------

TITLE: Initializing Sentry with Browser Tracing in Electron Renderer
DESCRIPTION: Sets up Sentry error tracking with browser tracing integration for Electron renderer processes. Configures DSN, automatic instrumentation, trace sampling rate, and trace propagation targets. Includes optional manual tracing setup comment.

LANGUAGE: javascript
CODE:
// BrowserTracing should only be configured in Electron renderer processes
import * as Sentry from "@sentry/electron/renderer";

// If you're using manual tracing without BrowserTracing, you'll need to add tracing extensions
// Sentry.addTracingExtensions();

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This enables automatic instrumentation (highly recommended), but is not
  // necessary for purely manual usage
  integrations: [Sentry.browserTracingIntegration()],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
});

----------------------------------------

TITLE: Initializing Sentry SDK with Configuration Options
DESCRIPTION: Initializes the Sentry SDK with a DSN (Data Source Name) and transaction sampling rate. The configuration sets up error tracking and enables performance monitoring by capturing 25% of all transactions.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  // Capture 25% of all transactions
  tracesSampleRate: 0.25
});

----------------------------------------

TITLE: Configuring 'replace' PII Redaction Method in Sentry
DESCRIPTION: This snippet shows the configuration for the 'replace' method of PII redaction in Sentry. It replaces the key with a static string.

LANGUAGE: json
CODE:
{
  "rules": {
    "replace_ip": {
      "type": "ip",
      "redaction": {
        "method": "replace",
        "text": [censored]"
      }
    }
  },
  "applications": {
    "$string": ["replace_ip"]
  }
}

----------------------------------------

TITLE: Configuring Sentry User Scope in PowerShell
DESCRIPTION: This snippet demonstrates how to use the Edit-SentryScope cmdlet to set user information in a Sentry scope. It sets the user ID to '42' and the email to 'john.doe@example.com'.

LANGUAGE: powershell
CODE:
Edit-SentryScope {
    $_.User.Id = '42'
    $_.User.Email = 'john.doe@example.com'
}

----------------------------------------

TITLE: Running Node.js Application with Sentry in ESM Mode
DESCRIPTION: Command to run a Node.js application in ESM mode with Sentry instrumentation, using the --import flag to load the instrument.mjs file before the application starts.

LANGUAGE: bash
CODE:
# Note: This is only available for Node v18.19.0 onwards.\nnode --import ./instrument.mjs app.mjs

----------------------------------------

TITLE: Configuring Sentry Auth Token
DESCRIPTION: Environment file configuration for setting up the Sentry authentication token.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Emitting a Timer Metric in Python with Sentry
DESCRIPTION: Shows how to use a timer metric to measure the execution time of a specific block of code. The example uses a context manager to time the execution of a function.

LANGUAGE: python
CODE:
# Measure the time of execution of the `process()` function.
with sentry_sdk.metrics.timing(key="event_processing_time"):
	process()

----------------------------------------

TITLE: Configuring Raven.js with DSN
DESCRIPTION: Initializes Raven.js with a Sentry DSN (Data Source Name) to enable error reporting.

LANGUAGE: javascript
CODE:
Raven.config("___PUBLIC_DSN___").install();

----------------------------------------

TITLE: Example of Import Ordering in Rust
DESCRIPTION: Illustrates the preferred order of imports in Rust files, grouping standard library, external dependencies, and crate modules.

LANGUAGE: rust
CODE:
use std::borrow::Cow;
use std::collections::HashMap;
use std::io::{self, Seek, Write};

use fnv::{FnvHashMap, FnvHashSet};
use num::FromPrimitive;
use symbolic_common::{Arch, DebugId, Language};
use symbolic_debuginfo::{DebugSession, Function, LineInfo};

use crate::error::{SymCacheError, SymCacheErrorKind, ValueKind};
use crate::format;

pub use gimli::RunTimeEndian as Endian;

----------------------------------------

TITLE: Defining Missing Instrumentation Context in Sentry SDK
DESCRIPTION: Example JSON structure for Missing Instrumentation context, containing information about missing or failed OTEL instrumentation.

LANGUAGE: json
CODE:
{
  "contexts": {
    "missing_instrumentation": {
      "package": "express",
      "javascript.is_cjs": true
    }
  }
}

----------------------------------------

TITLE: Configuring Apple Privacy Manifest in Expo app.json for Sentry React Native SDK
DESCRIPTION: This JSON snippet shows how to configure the Apple Privacy Manifest in the app.json file for Expo applications using the Sentry React Native SDK. It specifies collected data types and accessed API types.

LANGUAGE: json
CODE:
{
  "expo": {
    "name": "My App",
    "slug": "my-app",
    "ios": {
      "privacyManifests": {
        "NSPrivacyCollectedDataTypes": [
          {
            "NSPrivacyCollectedDataType": "NSPrivacyCollectedDataTypeCrashData",
            "NSPrivacyCollectedDataTypeLinked": false,
            "NSPrivacyCollectedDataTypeTracking": false,
            "NSPrivacyCollectedDataTypePurposes": ["NSPrivacyCollectedDataTypePurposeAppFunctionality"]
          },
          {
            "NSPrivacyCollectedDataType": "NSPrivacyCollectedDataTypePerformanceData",
            "NSPrivacyCollectedDataTypeLinked": false,
            "NSPrivacyCollectedDataTypeTracking": false,
            "NSPrivacyCollectedDataTypePurposes": ["NSPrivacyCollectedDataTypePurposeAppFunctionality"]
          },
          {
            "NSPrivacyCollectedDataType": "NSPrivacyCollectedDataTypeOtherDiagnosticData",
            "NSPrivacyCollectedDataTypeLinked": false,
            "NSPrivacyCollectedDataTypeTracking": false,
            "NSPrivacyCollectedDataTypePurposes": ["NSPrivacyCollectedDataTypePurposeAppFunctionality"]
          }
        ],
        "NSPrivacyAccessedAPITypes": [
          {
            "NSPrivacyAccessedAPIType": "NSPrivacyAccessedAPICategoryUserDefaults",
            "NSPrivacyAccessedAPITypeReasons": ["CA92.1"]
          },
          {
            "NSPrivacyAccessedAPIType": "NSPrivacyAccessedAPICategorySystemBootTime",
            "NSPrivacyAccessedAPITypeReasons": ["35F9.1"]
          },
          {
            "NSPrivacyAccessedAPIType": "NSPrivacyAccessedAPICategoryFileTimestamp",
            "NSPrivacyAccessedAPITypeReasons": ["C617.1"]
          }
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Building Flutter Web Application with Source Maps
DESCRIPTION: Command for building Flutter web applications with source map generation.

LANGUAGE: bash
CODE:
flutter build web --release --source-maps

----------------------------------------

TITLE: Structuring a Sentry Replay Recording Metadata in JSON
DESCRIPTION: This snippet shows the structure of the metadata for a 'replay_recording' Item in Sentry's replay ingestion format. It includes the required 'segment_id' field.

LANGUAGE: json
CODE:
{"segment_id": 0}

----------------------------------------

TITLE: Migrating Class-Based Integrations to Function-Based Integrations in Sentry JavaScript SDK
DESCRIPTION: This table provides a mapping of old class-based integration instantiations to their new function-based counterparts in Sentry SDK v8. It covers various integrations such as InboundFilters, FunctionToString, LinkedErrors, and many others.

LANGUAGE: javascript
CODE:
// Old syntax examples:
new InboundFilters()
new FunctionToString()
new LinkedErrors()

// New syntax examples:
inboundFiltersIntegration()
functionToStringIntegration()
linkedErrorsIntegration()

----------------------------------------

TITLE: Comparing Non-Tree-Shakeable and Tree-Shakeable Sentry Initialization in JavaScript
DESCRIPTION: This snippet demonstrates the difference between non-tree-shakeable and tree-shakeable ways of initializing Sentry with additional features. The tree-shakeable approach uses explicit integration registration, allowing for better optimization.

LANGUAGE: javascript
CODE:
// Not tree-shakeable
Sentry.init({
  enableReplay: true, // internally: if (enableReplay) { ...replay code }
});

// tree-shakeable
Sentry.init({
  integrations: [replayIntegration()],
});

----------------------------------------

TITLE: Configuring Data Collection in Sentry Dart SDK
DESCRIPTION: To enable sending of default personally identifiable information (PII), set the sendDefaultPii option to true. This affects collection of HTTP headers, logged-in user information, and IP addresses.

LANGUAGE: dart
CODE:
sendDefaultPii = true

----------------------------------------

TITLE: Optimistic Updates for Project Name in React Query with TypeScript
DESCRIPTION: Illustrates how to implement optimistic updates when changing a project's name. It includes handling the mutation, updating the cache, and dealing with potential errors.

LANGUAGE: tsx
CODE:
// useFetchProject.tsx
export function makeFetchProjectQueryKey({id}): ApiQueryKey {
  return [`/projects/${id}`];
}

// useUpdateProjectNameOptimistic.tsx
function useUpdateProjectNameOptimistic(incomingOptions: UpdateProjectOptions) {
  const api = useApi();
  const queryClient = useQueryClient();

  const options: Options = {
    ...incomingOptions,
    mutationFn: ({id, name}) => {
      return api.requestPromise(`/projects/${id}/`, {
        method: 'PUT',
        data: {name},
      });
    },
    onMutate: async variables => {
      await queryClient.cancelQueries(makeFetchProjectQueryKey({id: variables.id}));

      const previousProject = queryClient.getQueryData<Project>(
        makeFetchProjectQueryKey({id: variables.id})
      );

      setQueryData(queryClient, makeFetchProjectQueryKey({id: variables.id}), oldData => {
        return oldData ? {...oldData, name: variables.name} : oldData;
      });

      incomingOptions.onMutate?.(variables);

      return {previousProject};
    },
    onError: (error, variables, context) => {
      addErrorMessage(t('Failed to update project name.'));

      if (context) {
        queryClient.setQueryData(
          makeFetchProjectQueryKey({id: variables.id}),
          context.previousProject
        );
      }

      incomingOptions.onError?.(error, variables, context);
    },
    onSettled: (...params) => {
      queryClient.invalidateQueries({queryKey: ['todos']});
      incomingOptions.onSettled?.(...params);
    },
  };

  return useMutation(options);
}

----------------------------------------

TITLE: Example of React Component After Annotation
DESCRIPTION: This snippet demonstrates how the MyAwesomeComponent would look after the Sentry plugin applies annotations, adding data-sentry-component and data-sentry-source-file attributes.

LANGUAGE: html
CODE:
<Text
  data-sentry-component="MyAwesomeComponent"
  data-sentry-source-file="myAwesomeComponent.jsx"
>
  This is a really cool and awesome component!
</Text>

----------------------------------------

TITLE: Resolving Sentry Issues via Commit Message
DESCRIPTION: This example shows how to include a Sentry issue ID in a commit message to automatically resolve the issue when the commit is released.

LANGUAGE: text
CODE:
Prevent empty queries on users

Fixes MYAPP-317

----------------------------------------

TITLE: Manually Including Sentry PHP SDK Autoloader
DESCRIPTION: PHP code to include the Sentry SDK autoloader when manually installing the library. This method requires downloading and extracting the SDK files separately.

LANGUAGE: php
CODE:
require_once '/path/to/Raven/library/Raven/Autoloader.php';
Raven_Autoloader::register();

----------------------------------------

TITLE: Implementing BeforeSendCallback in Kotlin
DESCRIPTION: Kotlin implementation of BeforeSendCallback interface that provides the same event filtering functionality. Uses Kotlin's more concise syntax and null safety features while maintaining the same logic as the Java version.

LANGUAGE: kotlin
CODE:
import io.sentry.SentryEvent
import io.sentry.SentryOptions
import io.sentry.Hint
import org.springframework.stereotype.Component

@Component
class CustomBeforeSendCallback : SentryOptions.BeforeSendCallback {
  override fun execute(event: SentryEvent, hint: Hint): SentryEvent? {
    if (hint["my-hint-key"] != null) {
      null
    } else {
      event
    }
  }
}

----------------------------------------

TITLE: Initializing Sentry SDK with Release Name in JavaScript
DESCRIPTION: Configure the Sentry SDK with a release name to match events with the correct release. The release name must be identical to the one created using sentry-cli.

LANGUAGE: javascript
CODE:
Sentry.init({
  // This value must be identical to the name you give the release that you
  // create below using `sentry-cli`.
  release: "<release_name>",
});

----------------------------------------

TITLE: Environment Variable Authentication
DESCRIPTION: Setting up authentication using environment variables.

LANGUAGE: bash
CODE:
export SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Configuring Sentry in application.yml
DESCRIPTION: Demonstrates Sentry configuration using YAML format, including DSN setup, PII data collection, and transaction sampling rate settings. Provides the same functionality as the properties version but in YAML syntax.

LANGUAGE: yaml
CODE:
sentry:
  dsn: ___PUBLIC_DSN___

  # Add data like request headers and IP for users,
  # see https://docs.sentry.io/platforms/java/guides/spring-boot/data-management/data-collected/ for more info
  send-default-pii: true

  # Set traces_sample_rate to 1.0 to capture 100%
  # of transactions for tracing.
  # We recommend adjusting this value in production.
  tracesSampleRate: 1.0

----------------------------------------

TITLE: Creating Markdown Link for .NET Documentation
DESCRIPTION: Markdown link syntax for navigating to the .NET ecosystem integration documentation page.

LANGUAGE: markdown
CODE:
[_integrating with the .NET ecosystem_](/platforms/dotnet/)

----------------------------------------

TITLE: Configuring OpenAI Integration Options in Sentry
DESCRIPTION: Example showing how to configure OpenAI integration options in Sentry SDK initialization, including PII handling and tiktoken settings

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.openai import OpenAIIntegration

sentry_sdk.init(
    # ...
    # Add data like inputs and responses;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    integrations=[
        OpenAIIntegration(
            include_prompts=False,  # LLM/tokenizer inputs/outputs will be not sent to Sentry, despite send_default_pii=True
            tiktoken_encoding_name="cl100k_base",
        ),
    ],
)

----------------------------------------

TITLE: Creating Custom Sentry Client in JavaScript
DESCRIPTION: This snippet demonstrates how to create a custom Sentry BrowserClient with filtered integrations. It shows how to initialize the client, set up a scope, and manually capture exceptions.

LANGUAGE: javascript
CODE:
import {
  BrowserClient,
  defaultStackParser,
  getDefaultIntegrations,
  makeFetchTransport,
  Scope,
} from "@sentry/browser";

// filter integrations that use the global variable
const integrations = getDefaultIntegrations({}).filter((defaultIntegration) => {
  return !["BrowserApiErrors", "Breadcrumbs", "GlobalHandlers"].includes(
    defaultIntegration.name
  );
});

const client = new BrowserClient({
  dsn: "___PUBLIC_DSN___",
  transport: makeFetchTransport,
  stackParser: defaultStackParser,
  integrations: integrations,
});

const scope = new Scope();
scope.setClient(client);

client.init(); // initializing has to be done after setting the client on the scope

// You can capture exceptions manually for this client like this:
scope.captureException(new Error("example"));

----------------------------------------

TITLE: Uploading Source Maps to Sentry with GitHub Actions in YAML
DESCRIPTION: Sets up a GitHub Actions workflow to create a Sentry release and upload source maps for proper stack trace un-minification.

LANGUAGE: yaml
CODE:
- uses: actions/checkout@v4
  with:
    fetch-depth: 0

- name: Create Sentry release
  uses: getsentry/action-release@v3
  env:
    SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
    SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  with:
    environment: production
    sourcemaps: './dist'

----------------------------------------

TITLE: Configuring Sentry in application.yml
DESCRIPTION: Demonstrates Sentry configuration using YAML format, including DSN setup, PII data collection, and transaction sampling rate settings. Provides the same functionality as the properties version but in YAML syntax.

LANGUAGE: yaml
CODE:
sentry:
  dsn: ___PUBLIC_DSN___

  # Add data like request headers and IP for users,
  # see https://docs.sentry.io/platforms/java/guides/spring-boot/data-management/data-collected/ for more info
  send-default-pii: true

  # Set traces_sample_rate to 1.0 to capture 100%
  # of transactions for tracing.
  # We recommend adjusting this value in production.
  tracesSampleRate: 1.0

----------------------------------------

TITLE: Monitor Creation via Check-in API
DESCRIPTION: Example of creating or updating a monitor through the check-in API with configuration parameters including schedule, margins, and timezone settings.

LANGUAGE: http
CODE:
POST /api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/ HTTP/1.1
Host: ___ORG_INGEST_DOMAIN___
Content-Type: application/json

{
    "monitor_config": {
        "schedule": {"type": "crontab", "value": "0 * * * *"},
        "checkin_margin": 1,
        "max_runtime": 20,
        "timezone": "America/Los_Angeles"
    },
    "status": "in_progress"
}

----------------------------------------

TITLE: Configuring Timeouts
DESCRIPTION: Set custom connection and read timeout values for Sentry client.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.init(options -> {
  options.setConnectionTimeoutMillis(10000);
  options.setReadTimeoutMillis(10000);
});

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.init { options ->
  options.connectionTimeoutMillis = 2000
  options.readTimeoutMillis = 1000
}

----------------------------------------

TITLE: Example of Sentry Envelope Header JSON
DESCRIPTION: Demonstrates the JSON format for Envelope headers, including the event_id field.

LANGUAGE: json
CODE:
{"event_id":"12c2d058d58442709aa2eca08bf20986"}

----------------------------------------

TITLE: Setting Sentry Traces Sample Rate in PHP
DESCRIPTION: Configures the sampling rate for performance monitoring in Sentry. The value 0.2 indicates that 20% of transactions will be captured and sent to Sentry for performance monitoring.

LANGUAGE: php
CODE:
'traces_sample_rate' => 0.2,

----------------------------------------

TITLE: Example Transaction Data for Sampling Decision in JSON
DESCRIPTION: This snippet demonstrates the structure of an incoming transaction data used in the sampling decision process. It includes fields for Dynamic Sampling Context (DSC), transaction, environment, and release.

LANGUAGE: json
CODE:
{
  "dsc": {
    "transaction": "/hello"
  },
  "transaction": "/world",
  "environment": "prod",
  "release": "1.0.0"
}

----------------------------------------

TITLE: Implementing Basic Django Rest Framework Serializer in Python
DESCRIPTION: Example of a basic DRF serializer with field validation. Demonstrates field type checking and custom validation for the 'type' field. Includes required and optional fields with type constraints.

LANGUAGE: python
CODE:
from rest_framework import serializers
from sentry.api.serializers.rest_framework import ValidationError

class ExampleSerializer(serializers.Serializer):
    name = serializers.CharField()
    age = serializers.IntegerField(required=False)
    type = serializers.CharField()

    def validate_type(self, attrs, source):
        type = attrs[source]
        if type not in ['bear', 'rabbit', 'puppy']:
            raise ValidationError('%s is not a valid type' % type)
	return attrs

----------------------------------------

TITLE: Initializing Sentry with npm Package in JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry using the npm package. It imports Sentry from '@sentry/browser' and sets up the initialization with a DSN and the deduplication integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.dedupeIntegration()],
});

----------------------------------------

TITLE: Initializing Sentry with npm Package in JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry using the npm package. It imports Sentry from '@sentry/browser' and sets up the initialization with a DSN and the deduplication integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.dedupeIntegration()],
});

----------------------------------------

TITLE: Defining Custom RPC Error Class in JavaScript
DESCRIPTION: This snippet defines a custom error class 'MyRPCError' that extends the built-in Error class. It includes additional properties for the function name and error code.

LANGUAGE: javascript
CODE:
class MyRPCError extends Error {
  constructor(message, functionName, errorCode) {
    super(message);

    // The name of the RPC function that was called (e.g. "getAllBlogArticles")
    this.functionName = functionName;

    // For example a HTTP status code returned by the server.
    this.errorCode = errorCode;
  }
}

----------------------------------------

TITLE: Creating and Adding Sentry Breadcrumb in Kotlin
DESCRIPTION: This snippet shows how to create a Sentry breadcrumb, set its properties, and add it to the current scope in Kotlin. It uses Kotlin's apply function for a more concise syntax.

LANGUAGE: kotlin
CODE:
import io.sentry.Breadcrumb
import io.sentry.Sentry
import io.sentry.SentryLevel

val breadcrumb = Breadcrumb().apply {
    category = "auth"
    message = "Authenticated user ${user.email}"
    level = SentryLevel.INFO
}
Sentry.addBreadcrumb(breadcrumb)

----------------------------------------

TITLE: Creating New Release with Sentry CLI
DESCRIPTION: Basic command for creating a new release using sentry-cli. Requires a version identifier that uniquely identifies the release.

LANGUAGE: bash
CODE:
#!/bin/sh
sentry-cli releases new "$VERSION"

----------------------------------------

TITLE: Docker Compose Commands with Custom Env File
DESCRIPTION: Commands for running Docker Compose with a custom environment file, demonstrating how to use .env.custom for environment-specific configurations.

LANGUAGE: bash
CODE:
docker compose --env-file .env.custom up --wait

# You can also specify the original `.env` file as a fallback if the
# environment variable doesn't exists on the `.env.custom` file.
docker compose --env-file .env --env-file .env.custom up --wait

----------------------------------------

TITLE: Installing Sentry SDK with pip
DESCRIPTION: Install or upgrade the Sentry SDK using pip package manager.

LANGUAGE: bash
CODE:
pip install --upgrade 'sentry-sdk'

----------------------------------------

TITLE: Configuring Sentry SDK for Regular Tracing
DESCRIPTION: Sentry SDK configuration that enables regular tracing mode by specifying tracing options. This setup collects and sends spans in addition to continuing and propagating traces.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  tracesSampleRate: 0.1,
  // or
  tracesSampler: () => {
    /*...*/
  },
});

----------------------------------------

TITLE: Verifying Statsig Integration with Sentry in Python
DESCRIPTION: Test the Statsig integration by evaluating a feature flag and capturing an exception. This code initializes Statsig, checks a feature gate, and sends an error to Sentry.

LANGUAGE: python
CODE:
import sentry_sdk
from statsig.statsig_user import StatsigUser
from statsig import statsig

import time

statsig.initialize("server-secret-key")
while not statsig.is_initialized():
    time.sleep(0.2)

result = statsig.check_gate(StatsigUser("my-user-id"), "my-feature-gate")
sentry_sdk.capture_exception(Exception("Something went wrong!"))

----------------------------------------

TITLE: Initializing Sentry with OpenTelemetry Instrumenter in Ruby
DESCRIPTION: This snippet configures Sentry to use OpenTelemetry as the instrumenter for tracing. It sets the DSN, traces sample rate, and specifies the instrumenter as :otel.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  config.dsn = "___PUBLIC_DSN___"
  config.traces_sample_rate = 1.0
  # set the instrumenter to use OpenTelemetry instead of Sentry
  config.instrumenter = :otel
end

----------------------------------------

TITLE: Initializing Sentry with Node.js Profiling (ESM)
DESCRIPTION: Sets up Sentry monitoring with profiling integration using ES Modules. Configures both tracing and profiling sample rates to 100% and enables the Node.js profiling integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";
import { nodeProfilingIntegration } from "@sentry/profiling-node";

// Ensure to call this before importing any other modules!
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add our Profiling integration
    nodeProfilingIntegration(),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/guides/node/configuration/options/#tracesSampleRate
  tracesSampleRate: 1.0,

  // Set profilesSampleRate to 1.0 to profile 100%
  // of sampled transactions.
  // This is relative to tracesSampleRate
  // Learn more at
  // https://docs.sentry.io/platforms/javascript/guides/node/configuration/options/#profilesSampleRate
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Uploading Debug Symbols Manually with sentry-cli
DESCRIPTION: Command to manually upload debug symbols to Sentry using sentry-cli. Requires specifying the auth token, organization slug, project slug, and path to symbol files.

LANGUAGE: bash
CODE:
sentry-cli --auth-token ___ORG_AUTH_TOKEN___ debug-files upload --org ___ORG_SLUG___ --project ___PROJECT_SLUG___ PATH_TO_SYMBOLS

----------------------------------------

TITLE: Sentry Setup with ES Modules
DESCRIPTION: Initializes Sentry error handling in a Connect application using ES Modules import syntax. Shows the ESM equivalent of the CommonJS implementation.

LANGUAGE: javascript
CODE:
// Import this first!
import "./instrument";

// Now import other modules
import connect from "connect";
import * as Sentry from "@sentry/node";

const app = connect();

Sentry.setupConnectErrorHandler(app);

// Add your routes, etc.

app.listen(3030);

----------------------------------------

TITLE: Modifying Sentry Spans for Apollo Requests in Kotlin
DESCRIPTION: Customize Sentry spans for Apollo requests using a callback function in Kotlin.

LANGUAGE: kotlin
CODE:
import com.apollographql.ApolloClient
import io.sentry.apollo4.sentryTracing

val apollo = ApolloClient.builder()
    .serverUrl("https://apollo-fullstack-tutorial.herokuapp.com/graphql")
    .sentryTracing { span, request, response ->
        if ("LaunchDetails" == span.operation) {
            span.setTag("tag-name", "tag-value")
        }
        span
    }
    .build()

----------------------------------------

TITLE: Creating Transactions and Spans with Sentry SDK in Swift
DESCRIPTION: This snippet demonstrates how to create a transaction and child spans using Sentry SDK in Swift. It measures the performance of a checkout process, including validation and processing steps.

LANGUAGE: swift
CODE:
// Let's say this method is called in a background thread when a user clicks on the checkout button of your shop
func performCheckout()
{
  // This will create a new Transaction for you
  let transaction = SentrySDK.startTransaction(
      name: "checkout",
      operation: "perform-checkout"
  )

  // Validate the cart
  let validationSpan = transaction.startChild(
      operation: "validation",
      description: "validating shopping cart"
  )

  validateShoppingCart() //Some long process, maybe a sync http request.

  validationSpan.finish()

  // Process the order
  let processSpan = transaction.startChild(
      operation: "process",
      description: "processing shopping cart"
  )

  processShoppingCart() //Another time consuming process.

  processSpan.finish();

  transaction.finish();
}

----------------------------------------

TITLE: Modifying Sentry Transactions with SetBeforeSendTransaction in C#
DESCRIPTION: This code snippet demonstrates how to use the SetBeforeSendTransaction method to modify or drop Sentry transactions. It checks if the transaction operation is 'http.server' and drops it by returning null. Otherwise, it returns the original transaction.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.SetBeforeSendTransaction((sentryTransaction, hint) =>
{
    // Modify the transaction
    if (sentryTransaction.Operation.Equals("http.server"))
    {
        return null; // Drop the transaction by returning null
    }

    return sentryTransaction;
});

----------------------------------------

TITLE: Setting Transaction Start Timestamp
DESCRIPTION: Shows how to specify the start_timestamp in either RFC 3339 string format or Unix epoch numeric format.

LANGUAGE: json
CODE:
{
  "start_timestamp": "2011-05-02T17:41:36.242Z"
}

LANGUAGE: json
CODE:
{
  "start_timestamp": 1304358096.242
}

----------------------------------------

TITLE: Importing Sentry SDK using CommonJS in Node.js
DESCRIPTION: This snippet shows how to import the Sentry SDK using the CommonJS module system in Node.js. It uses the require function to import the @sentry/node package.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

----------------------------------------

TITLE: Markdown Page Front Matter
DESCRIPTION: YAML front matter metadata for the documentation page specifying title, indexing preferences and sidebar ordering.

LANGUAGE: yaml
CODE:
---
title: Pages
noindex: true
sidebar_order: 4
---

----------------------------------------

TITLE: Triggering Test Error in Remix Action
DESCRIPTION: TypeScript code to intentionally throw an error in a Remix action for testing Sentry error capture.

LANGUAGE: typescript
CODE:
export const action: ActionFunction = async ({ request }) => {
  throw new Error("Sentry Error");
};

----------------------------------------

TITLE: Frontend Counter Metrics in JavaScript
DESCRIPTION: Examples of implementing counter metrics in frontend applications using Sentry's JavaScript SDK. Shows tracking of button clicks and user signups with relevant tags.

LANGUAGE: JavaScript
CODE:
Sentry.metrics.increment("button_click", 1, {
    tags: { browser: "Firefox", subpage: "signup" }
});

LANGUAGE: JavaScript
CODE:
Sentry.metrics.increment("signups", 1, {
    tags: { plan_type: "freemium", region: "EU" }
});

----------------------------------------

TITLE: Migrating Sentry Universal Integrations
DESCRIPTION: Lists the integrations that work on both client-side and server-side, now available in @sentry/nextjs. Includes the dedupeIntegration which is enabled by default.

LANGUAGE: javascript
CODE:
import { captureConsoleIntegration, debugIntegration, extraErrorDataIntegration, rewriteFramesIntegration, sessionTimingIntegration, dedupeIntegration } from '@sentry/nextjs'

----------------------------------------

TITLE: Feedback Ingestion Flow Diagram
DESCRIPTION: Mermaid diagram showing the flow of feedback data from application through Relay to various processing components.

LANGUAGE: mermaid
CODE:
graph TD
  app[Your Application] --> |"envelope"| Relay
  Relay --> f_consumer([ingest-feedback-events])
  f_consumer --> |"queues as celery task"| create_feedback_issue
  create_feedback_issue --> o_consumer(["ingest-occurrences"])
  o_consumer --> nodestore[(Nodestore)]
  o_consumer --> |"EventStream"| snuba[("Snuba/Clickhouse")]

----------------------------------------

TITLE: Starting Sentry Docker Compose Services
DESCRIPTION: Commands to start Sentry services using Docker Compose, with an option for using custom environment files.

LANGUAGE: bash
CODE:
docker compose up --wait

LANGUAGE: bash
CODE:
docker compose --env-file .env --env-file .env.custom up --wait

----------------------------------------

TITLE: Adding Context to Raven Client in Python
DESCRIPTION: Illustrates how to add contextual information to the Raven client using the context.merge() method. This example adds user email to the context in a request handler.

LANGUAGE: python
CODE:
def handle_request(request):
    client.context.merge({'user': {
        'email': request.user.email
    }})
    try:
        ...
    finally:
        client.context.clear()

----------------------------------------

TITLE: Setting up Sentry Middleware for Cloudflare Pages
DESCRIPTION: JavaScript configuration for adding Sentry middleware to Cloudflare Pages applications with performance monitoring.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/cloudflare";

export const onRequest = [
  // Make sure Sentry is the first middleware
  Sentry.sentryPagesPlugin((context) => ({
    dsn: "___PUBLIC_DSN___",

    // Set tracesSampleRate to 1.0 to capture 100% of spans for tracing.
    // Learn more at
    // https://docs.sentry.io/platforms/javascript/configuration/options/#traces-sample-rate
    tracesSampleRate: 1.0,
  })),
  // Add more middlewares here
];

----------------------------------------

TITLE: Configuring Dummy Backend for Sentry Digests in Python
DESCRIPTION: This snippet shows how to configure the Dummy backend for Sentry digests. The Dummy backend disables digest scheduling, causing all notifications to be sent as they occur, subject to rate limits.

LANGUAGE: python
CODE:
SENTRY_DIGESTS = 'sentry.digests.backends.dummy.DummyBackend'

----------------------------------------

TITLE: Demonstrating URL Truncation in Tracing Tags
DESCRIPTION: This example shows how a long URL (over 200 characters) gets truncated when used as a tag in tracing. It illustrates the need for splitting data over multiple tags to retain important information.

LANGUAGE: plaintext
CODE:
https://empowerplant.io/api/0/projects/ep/setup_form/?user_id=314159265358979323846264338327&tracking_id=EasyAsABC123OrSimpleAsDoReMi&product_name=PlantToHumanTranslator&product_id=161803398874989484820458683436563811772030917980576

LANGUAGE: plaintext
CODE:
https://empowerplant.io/api/0/projects/ep/setup_form/?user_id=314159265358979323846264338327&tracking_id=EasyAsABC123OrSimpleAsDoReMi&product_name=PlantToHumanTranslator&product_id=1618033988749894848

----------------------------------------

TITLE: MongoDB Query Scrubbing Example
DESCRIPTION: Shows how MongoDB queries should be scrubbed with placeholders while maintaining valid JSON format.

LANGUAGE: json
CODE:
{ "find": "documents", "filter": { "wordCount": { "$gte": "?" } } }

----------------------------------------

TITLE: Installing Sentry SDK for Angular with Capacitor
DESCRIPTION: Commands to install Sentry Capacitor SDK with Angular integration using npm, yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
# npm
npm install @sentry/capacitor @sentry/angular --save

# yarn
yarn add @sentry/capacitor @sentry/angular

# pnpm
pnpm add @sentry/capacitor @sentry/angular

----------------------------------------

TITLE: Disabling Cache Tracing
DESCRIPTION: Configuration to disable cache pools tracing in Symfony applications.

LANGUAGE: yaml
CODE:
sentry:
  tracing:
    cache: # cache pools
      enabled: false

----------------------------------------

TITLE: Initializing Sentry with Unleash Integration (Deprecated)
DESCRIPTION: Sets up Sentry error monitoring with Unleash feature flag integration using the deprecated unleashClientClass configuration. Shows the older integration pattern that should be updated to the current version.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solid';
import { UnleashClient } from 'unleash-proxy-client';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.unleashIntegration({unleashClientClass: UnleashClient})],
});

const unleash = new UnleashClient({
  url: 'https://<your-unleash-instance>/api/frontend',
  clientKey: '<your-client-side-token>',
  appName: 'my-webapp',
});

unleash.start();

// Evaluate a flag with a default value. You may have to wait for your client to synchronize first.
unleash.isEnabled('test-flag');

Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Initializing and Starting Sentry Transaction in PHP
DESCRIPTION: This code creates a Sentry transaction context with a specific name and sampling configuration, then starts a transaction using that context. It's used to begin performance monitoring for a specific operation, in this case, a search from the navbar.

LANGUAGE: php
CODE:
$transactionContext = (new \Sentry\Tracing\TransactionContext(
    $name = 'Search from navbar',
    $parentSampled = false
))
    ->setSampled(true);

$transaction = \Sentry\startTransaction($transactionContext);

----------------------------------------

TITLE: Adding LiveView Click Breadcrumb to Sentry Context in Elixir
DESCRIPTION: Shows how to add a breadcrumb to Sentry's error tracking context for a Phoenix LiveView click event. The breadcrumb includes the category, message, and level of the event.

LANGUAGE: elixir
CODE:
Sentry.Context.add_breadcrumb(%{
  category: "web.liveview.phx_click",
  message: "click happened",
  level: :info
})

----------------------------------------

TITLE: Triggering Native Crash for Sentry Testing in Electron
DESCRIPTION: This code snippet shows how to trigger a native crash in the current process to verify Sentry's native crash reporting. Note that crashes in the main process are not sent until the app is run again.

LANGUAGE: javascript
CODE:
process.crash();

----------------------------------------

TITLE: Setting Sentry Sample Rate in PHP Configuration
DESCRIPTION: Configures the sampling rate for Sentry error tracking. Sets the sample rate to 25%, meaning only a quarter of events will be sent to Sentry for processing.

LANGUAGE: php
CODE:
'sample_rate' => 0.25,

----------------------------------------

TITLE: Using SentryHttpClient as Standalone Client in Dart
DESCRIPTION: Example of using SentryHttpClient as a standalone HTTP client to automatically track request breadcrumbs. The code demonstrates making a POST request with JSON body data and proper client cleanup.

LANGUAGE: dart
CODE:
import 'package:http/http.dart' as http;
import 'package:sentry/sentry.dart';

final client = SentryHttpClient();
try {
  final url = 'https://example.com/whatsit/create';
  final response = await client.post(url, body: {
    'name': 'doodle',
    'color': 'blue',
  });
  print('Response body: ${response.body}');
} finally {
  client.close();
}

----------------------------------------

TITLE: Installing Sentry Packages via .NET Core CLI
DESCRIPTION: Uses the dotnet CLI to add Sentry and Sentry.OpenTelemetry packages to a .NET project. Requires OpenTelemetry package 1.5.0 or higher as a prerequisite.

LANGUAGE: shell
CODE:
dotnet add package Sentry -v {{@inject packages.version('sentry.dotnet') }}
dotnet add package Sentry.OpenTelemetry -v {{@inject packages.version('sentry.dotnet') }}

----------------------------------------

TITLE: Adding Sentry Dependency for Spring 6 (SBT)
DESCRIPTION: This snippet demonstrates how to add the Sentry dependency for Spring 6 using SBT build tool.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-spring-jakarta" % "{{@inject packages.version('sentry.java.spring.jakarta', '6.7.0') }}"

----------------------------------------

TITLE: SQL Query Result Example
DESCRIPTION: Shows the resulting SQL query from the Python ORM implementation.

LANGUAGE: sql
CODE:
SELECT * FROM projects
WHERE projects_user = 17;

----------------------------------------

TITLE: Cache Span Structure Example
DESCRIPTION: Shows the span hierarchy generated for a cache hit operation with Redis backend

LANGUAGE: yaml
CODE:
<span op:"cache.get" description:"posts" cache.key:"posts" cache.hit=true>
	<span op:db.redis description:"GET posts"></span>
</span>

----------------------------------------

TITLE: Clearing Scope Before Capturing Exception
DESCRIPTION: Demonstrates how to clear the existing scope and set new tags before capturing an exception.

LANGUAGE: javascript
CODE:
Sentry.captureException(new Error("clean as never"), (scope) => {
  scope.clear();
  scope.setTag("clean", "slate");
  return scope;
});

----------------------------------------

TITLE: Adding Authentication Breadcrumb in Sentry with Go
DESCRIPTION: Creates a new Sentry breadcrumb to track user authentication events. The breadcrumb includes the category 'auth', user email in the message, and is set to info level severity. This helps in creating an audit trail of user authentication in the error monitoring system.

LANGUAGE: go
CODE:
sentry.AddBreadcrumb(&sentry.Breadcrumb{
	Category: "auth",
	Message: "Authenticated user " + user.email,
	Level: sentry.LevelInfo,
});

----------------------------------------

TITLE: Adding Authentication Breadcrumb in Sentry with Go
DESCRIPTION: Creates a new Sentry breadcrumb to track user authentication events. The breadcrumb includes the category 'auth', user email in the message, and is set to info level severity. This helps in creating an audit trail of user authentication in the error monitoring system.

LANGUAGE: go
CODE:
sentry.AddBreadcrumb(&sentry.Breadcrumb{
	Category: "auth",
	Message: "Authenticated user " + user.email,
	Level: sentry.LevelInfo,
});

----------------------------------------

TITLE: Setting Transaction Name in Ruby
DESCRIPTION: This snippet shows how to set the transaction name for an event in the new Sentry Ruby SDK.

LANGUAGE: ruby
CODE:
Sentry.get_current_scope.set_transaction_name("NewTransaction")

----------------------------------------

TITLE: Configuring Personal GetSentry Settings in Python
DESCRIPTION: This snippet shows the file path for configuring personal GetSentry settings. It points to the location of the devlocal.py file, which is ignored by git and used for personal configuration overrides.

LANGUAGE: python
CODE:
getsentry/conf/settings/devlocal.py

----------------------------------------

TITLE: Installing Excimer via Linux Package Manager
DESCRIPTION: Command to install the Excimer PHP extension using apt-get package manager.

LANGUAGE: bash
CODE:
apt-get install php-excimer

----------------------------------------

TITLE: Injecting Debug IDs with Sentry CLI
DESCRIPTION: Command to inject Debug IDs into source map artifacts for stack trace matching.

LANGUAGE: bash
CODE:
sentry-cli sourcemaps inject /path/to/directory

----------------------------------------

TITLE: Complete Debug Meta Interface Example in JSON
DESCRIPTION: Example showing the full debug meta interface structure with an empty images array and SDK info object.

LANGUAGE: json
CODE:
{
  "debug_meta": {
    "images": [],
    "sdk_info": {
      "sdk_name": "iOS",
      "version_major": 10,
      "version_minor": 3,
      "version_patchlevel": 0
    }
  }
}

----------------------------------------

TITLE: Registering Error Handlers in PHP
DESCRIPTION: Sets up automatic error and exception handling by registering PHP error handlers with Sentry.

LANGUAGE: php
CODE:
$error_handler = new Raven_ErrorHandler($sentryClient);
$error_handler->registerExceptionHandler();
$error_handler->registerErrorHandler();
$error_handler->registerShutdownFunction();

----------------------------------------

TITLE: Fully Populated Request Interface Example in Sentry
DESCRIPTION: This example demonstrates a fully populated Request interface in Sentry. It includes method, URL, query string, data, cookies, headers, and environment information for a POST request.

LANGUAGE: json
CODE:
{
  "request": {
    "method": "POST",
    "url": "http://absolute.uri/foo",
    "query_string": "query=foobar&page=2",
    "data": {
      "foo": "bar"
    },
    "cookies": "PHPSESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;",
    "headers": {
      "content-type": "text/html"
    },
    "env": {
      "REMOTE_ADDR": "192.168.0.1"
    }
  }
}

----------------------------------------

TITLE: Configuring Client-Side Tracing with Sentry in Remix
DESCRIPTION: This snippet demonstrates how to initialize Sentry for client-side tracing in a Remix application. It captures pageload and navigation transactions, and sets up browser tracing integration with React hooks.

LANGUAGE: typescript
CODE:
import { useLocation, useMatches } from "@remix-run/react";
import * as Sentry from "@sentry/remix";
import { useEffect } from "react";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.browserTracingIntegration({
      useEffect,
      useLocation,
      useMatches,
    }),
  ],

  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for tracing.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,

  // Set `tracePropagationTargets` to control for which URLs trace propagation should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
});

----------------------------------------

TITLE: Adding Sentry Module Dependency in Unreal Engine Build Script
DESCRIPTION: This code snippet demonstrates how to add the Sentry module as a dependency in the Unreal Engine project's build script (MyProject.build.cs). This step is necessary to access the Sentry plugin API from C++ code in the project.

LANGUAGE: csharp
CODE:
PublicDependencyModuleNames.AddRange(new string[] { ..., "Sentry" });

----------------------------------------

TITLE: Configuring Composite Experimental Backend for Sentry Metrics in Python
DESCRIPTION: Shows how to set up the Composite Experimental backend for Sentry metrics in the sentry.conf.py file, which reports to both Datadog and Sentry.

LANGUAGE: python
CODE:
SENTRY_METRICS_BACKEND = "sentry.metrics.composite_experimental.CompositeExperimentalMetricsBackend"
SENTRY_METRICS_OPTIONS = {
    "primary_backend": "sentry.metrics.dogstatsd.DogStatsdMetricsBackend",
    "primary_backend_args": {"statsd_host": "127.0.0.1", "statsd_port": 8126},
    "allow_list": {
        # List of metrics sent to Sentry (used for gradual rollout of DDM feature)
        "my_metric1",
        "my_metric2",
}

----------------------------------------

TITLE: Initializing Sentry Serverless SDK for AWS Lambda in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize and use the Sentry Serverless SDK for AWS Lambda 8.x. It shows the setup process, including initialization with a DSN and trace sample rate, and wrapping an async Lambda handler function.

LANGUAGE: JavaScript
CODE:
const Sentry = require('@sentry/aws-serverless');

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  tracesSampleRate: 1,
});

// async (recommended)
exports.handler = Sentry.wrapHandler(async (event, context) => {
  throw new Error('oh, hello there!');
});

// sync also works
// exports.handler = Sentry.wrapHandler((event, context, callback) => {
//   throw new Error('oh, hello there!');
// });

----------------------------------------

TITLE: Displaying OpenTelemetry Exporter Error Messages
DESCRIPTION: This code snippet shows example error messages that occur when OpenTelemetry exporters fail to connect to their default servers. These messages appear in the logs when exporters are enabled but not properly configured.

LANGUAGE: plaintext
CODE:
ERROR io.opentelemetry.exporter.internal.grpc.OkHttpGrpcExporter - Failed to export spans. The request could not be executed. Full error message: Failed to connect to localhost/[0:0:0:0:0:0:0:1]:4317
ERROR io.opentelemetry.exporter.internal.grpc.OkHttpGrpcExporter - Failed to export metrics. The request could not be executed. Full error message: Failed to connect to localhost/[0:0:0:0:0:0:0:1]:4317
ERROR io.opentelemetry.exporter.internal.http.HttpExporter - Failed to export logs. The request could not be executed. Full error message: Failed to connect to localhost/[0:0:0:0:0:0:0:1]:4318

----------------------------------------

TITLE: Initializing Sentry with Canvas Recording Integration in JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry with session replay and canvas recording integrations. It sets up error sampling rates and includes the necessary integrations for replay and canvas recording.

LANGUAGE: javascript
CODE:
// import Sentry from your framework SDK (e.g. @sentry/react) instead of @sentry/browser
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    // Keep the Replay integration as before
    Sentry.replayIntegration(),

    // The following is all you need to enable canvas recording with Replay
    Sentry.replayCanvasIntegration(),
  ],
});

----------------------------------------

TITLE: Merged Sampling Configuration Example in JSON
DESCRIPTION: This snippet shows an example of a merged sampling configuration from non-root and root projects. It includes two rules: a transaction rule with a factor sampling value and a trace rule with a sample rate.

LANGUAGE: json
CODE:
{
  "rules": [
    {
      "id": 1,
      "type": "transaction",
      "samplingValue": {
        "type": "factor",
        "value": 2.0
      },
      "condition": {
        "trace.transaction": "/world"
      }
    },
    {
      "id": 2,
      "type": "trace",
      "samplingValue": {
        "type": "sampleRate",
        "value": 0.5
      },
      "condition": {
        "trace.transaction": "/hello"
      }
    }
  ]
}

----------------------------------------

TITLE: Adding Sentry Loader Script via CDN
DESCRIPTION: Adds the Sentry JavaScript SDK loader script to your application via CDN. This script should be placed before all other scripts and allows configuring SDK features from the Sentry UI without redeployment.

LANGUAGE: html
CODE:
<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Defining Struct with Compatible Field in Rust
DESCRIPTION: Example of defining a struct in Rust that is compatible with JSON messages containing additional fields. This demonstrates how Relay can ignore additional fields in struct definitions.

LANGUAGE: rust
CODE:
struct Foo {
    foo: u64,
}

// compatible with: {"foo": 123}, {"foo": 123, "bar": 456}, {"foo": 123, ...}
// incompatible with: {"foo": "123"}

----------------------------------------

TITLE: Including Platform-Specific Performance Sampling Context in React
DESCRIPTION: A React component that includes platform-specific content for performance sampling context using the PlatformContent component with a specific includePath.

LANGUAGE: jsx
CODE:
<PlatformContent includePath="performance/default-sampling-context-platform" />

----------------------------------------

TITLE: Updating React Native Tracing Timeout Options
DESCRIPTION: Demonstrates how to replace the idleTimeout and maxTransactionDuration options with idleTimeoutMs and finalTimeoutMs in the reactNativeTracingIntegration.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/react-native';

Sentry.init({
  tracesSampleRate: 1.0,
  integrations: [
    Sentry.reactNativeTracingIntegration({
      idleTimeoutMs: 1_000,
      finalTimeoutMs: 5_000,
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry SDK Monitoring in Godot
DESCRIPTION: Basic Node script that demonstrates core Sentry SDK functionality by adding a breadcrumb and capturing a message. Uses the _ready() function to execute when the node enters the scene tree.

LANGUAGE: gdscript
CODE:
extends Node

func _ready():
	SentrySDK.add_breadcrumb("Just about to welcome the World.", "Note")
	SentrySDK.capture_message("Hello, World!")

----------------------------------------

TITLE: Configuring Global Event Processors in Sentry Ruby
DESCRIPTION: Shows how to add event processors to the global scope that will run on every event. Demonstrates both the configure_scope method and add_global_event_processor method for adding processors that can modify event tags.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  # ...
end

Sentry.configure_scope do |scope|
  scope.add_event_processor do |event, hint|
     # can mutate the event here
     # returning nil will drop the event
     event.tags = { foo: 42 }
     event
  end
end

# You can do the same thing using add_global_event_processor
Sentry.add_global_event_processor do |event, hint|
  event.tags = { foo: 42 }
  event
end

----------------------------------------

TITLE: Initializing Sentry with Java ServletContainerInitializer
DESCRIPTION: Java implementation of ServletContainerInitializer that configures Sentry on application startup. Sets up the DSN and enables sending default PII data including request headers and IP addresses.

LANGUAGE: java
CODE:
package sentry.sample;

import io.sentry.Sentry;
import javax.servlet.ServletContainerInitializer;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;

public final class SentryInitializer implements ServletContainerInitializer {

  @Override
  public void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException {
    Sentry.init(options -> {
      options.setDsn("___PUBLIC_DSN___");

      // Add data like request headers and IP for users,
      // see https://docs.sentry.io/platforms/java/guides/servlet/data-management/data-collected/ for more info
      options.setSendDefaultPii(true);
    });
  }
}

----------------------------------------

TITLE: Basic Breadcrumbs Structure with Values Array
DESCRIPTION: Example showing the breadcrumbs structure using the values array format, containing log and navigation entries.

LANGUAGE: json
CODE:
{
  "breadcrumbs": {
    "values": [
      {
        "timestamp": "2016-04-20T20:55:53.845Z",
        "message": "Something happened",
        "category": "log",
        "data": {
          "foo": "bar",
          "blub": "blah"
        }
      },
      {
        "timestamp": "2016-04-20T20:55:53.847Z",
        "type": "navigation",
        "data": {
          "from": "/login",
          "to": "/dashboard"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Log4j Properties
DESCRIPTION: Example configuration using log4j.properties format to set up Console and Sentry appenders with different logging thresholds.

LANGUAGE: ini
CODE:
# Enable the Console and Sentry appenders
log4j.rootLogger=INFO, Console, Sentry

# Configure the Console appender
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%d{HH:mm:ss.SSS} [%t] %-5p: %m%n

# Configure the Sentry appender, overriding the logging threshold to the WARN level
log4j.appender.Sentry=io.sentry.log4j.SentryAppender
log4j.appender.Sentry.threshold=WARN

----------------------------------------

TITLE: Structuring Flat Exception List in JSON
DESCRIPTION: Demonstrates how to represent exceptions as a flat list in the Sentry event payload JSON format, omitting the 'values' key.

LANGUAGE: json
CODE:
{
  "exception": [
    {
      "type": "Error",
      "value": "An error occurred",
      "mechanism": {
        "type": "generic",
        "handled": false
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring Podfile for Sentry SDK Integration in iOS
DESCRIPTION: This code snippet demonstrates how to specify the Sentry SDK in a Podfile for CocoaPods integration. It sets the iOS platform version, enables use of frameworks, and defines the Sentry pod with a specific Git repository and version tag.

LANGUAGE: ruby
CODE:
platform :ios, '11.0'
use_frameworks! # This is important

target 'YourApp' do
  pod 'Sentry', :git => 'https://github.com/getsentry/sentry-cocoa.git', :tag => '{{@inject packages.version('sentry.cocoa') }}'
end

----------------------------------------

TITLE: Rebuilding Sentry Containers
DESCRIPTION: Command to rebuild and restart Sentry containers after configuration changes. This script should be run after modifying any configuration files to ensure changes take effect.

LANGUAGE: bash
CODE:
./install.sh

----------------------------------------

TITLE: Configuring Sentry with Next.js using ES Modules
DESCRIPTION: Sets up Sentry configuration in Next.js using ES Modules export syntax. Configures the Sentry webpack plugin with a custom application key.

LANGUAGE: javascript
CODE:
export default withSentryConfig(nextConfig, {
  unstable_sentryWebpackPluginOptions: {
    applicationKey: "your-custom-application-key",
  },
});

----------------------------------------

TITLE: Adding Tags to Span in JSON
DESCRIPTION: Shows how to include optional tags as key-value pairs to provide additional context for the span.

LANGUAGE: json
CODE:
{
  "tags": {
    "ios_version": "4.0",
    "context": "production"
  }
}

----------------------------------------

TITLE: Configuring Sentry Appender in Logback XML
DESCRIPTION: Example XML configuration for the Sentry Logback appender, including DSN setup, timeout settings, environment configuration, and various debug options. The configuration demonstrates key parameters like shutdownTimeout, flushTimeout, debug mode, breadcrumbs limit, release versioning, and connection settings.

LANGUAGE: xml
CODE:
<appender name="Sentry" class="io.sentry.logback.SentryAppender">
    <options>
        <!-- NOTE: Replace the test DSN below with your DSN to see the events from this app in sentry.io -->
        <dsn>___PUBLIC_DSN___</dsn>
        <shutdownTimeout>2000</shutdownTimeout>
        <flushTimeoutMillis>15000</flushTimeoutMillis>
        <debug>false</debug>
        <maxBreadcrumbs>100</maxBreadcrumbs>
        <release>my-project-name@2.3.12</release>
        <environment>production</environment>
        <sampleRate>1.0</sampleRate>
        <attachThreads>false</attachThreads>
        <attachStacktrace>false</attachStacktrace>
        <serverName>host-4</serverName>
        <connectionTimeoutMillis>5000</connectionTimeoutMillis>
        <readTimeoutMillis>5000</readTimeoutMillis>
    </options>
</appender>

----------------------------------------

TITLE: Ensuring Request Isolation with Sentry 8.x (CommonJS)
DESCRIPTION: Example of ensuring request isolation for non-HTTP scenarios using Sentry.withIsolationScope() in CommonJS. This replaces the previous Sentry.runWithAsyncContext method.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

function myScheduledJob() {
  return Sentry.withIsolationScope(async () => {
    await doSomething();
    await doSomethingElse();
    return { status: "DONE" };
  });
}

----------------------------------------

TITLE: Creating and Capturing Sentry Events in C++
DESCRIPTION: Function that sends a request and creates a Sentry event when the response fails. Creates a custom fingerprint containing the request method, path, and response status to help group similar errors.

LANGUAGE: cpp
CODE:
#include <sentry.h>

void send_request(request_t *req) {
    response_t *resp = request_send(req);

    if (response_failed(resp)) {
        sentry_value_t fp = sentry_value_new_list();
        sentry_value_append(fp, sentry_value_new_string(req->method));
        sentry_value_append(fp, sentry_value_new_string(req->path));
        sentry_value_append(fp, sentry_value_new_string(resp->status));

        sentry_value_t event = sentry_value_new_event();
        sentry_value_set_by_key(event, "fingerprint", fp);

        // create an event here

        sentry_capture_event(event);
    }
}

----------------------------------------

TITLE: Initializing Sentry with Custom Breadcrumb Handler in JavaScript
DESCRIPTION: Configures Sentry SDK initialization with a beforeBreadcrumb hook that modifies UI click events to use aria-label values as breadcrumb messages. This improves accessibility tracking by capturing semantic labels instead of raw click data.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  beforeBreadcrumb(breadcrumb, hint) {
    if (breadcrumb.category === "ui.click") {
      const { target } = hint.event;
      if (target.ariaLabel) {
        breadcrumb.message = target.ariaLabel;
      }
    }
    return breadcrumb;
  },
});

----------------------------------------

TITLE: Using SentryHttpClient with runWithClient
DESCRIPTION: Shows how to use SentryHttpClient with the runWithClient function for isolated client instances or separate Zone execution.

LANGUAGE: dart
CODE:
import 'package:http/http.dart';
import 'package:sentry/sentry.dart';

final sentryHttpClient = SentryHttpClient();

await runWithClient(() async {
  final response = await get(Uri.https('www.example.com', ''));
  print(response.body);
}, () => sentryHttpClient);

----------------------------------------

TITLE: Implementing Custom TracesSampler for Sentry in Go
DESCRIPTION: This snippet defines custom context types, initializes Sentry with a custom TracesSampler, and demonstrates how to use it with HTTP requests. The sampler function accesses custom data from the span's context to make sampling decisions based on the request's hostname.

LANGUAGE: go
CODE:
type myContextKey struct{}
type myContextData struct {
	// Store information for custom TracesSampler.
	request *http.Request
	// ...
}

err := sentry.Init(sentry.ClientOptions{
	// ...

	// A custom TracesSampler can access data from the span's context:
	TracesSampler: sentry.TracesSampler(func(ctx sentry.SamplingContext) float64 {
		data, ok := ctx.Span.Context().Value(myContextKey{}).(*myContextData)
		if !ok {
			return 0.0
		}
		if data.request.URL.Hostname() == "example.com" {
			return 1.0
		}
		return 0.0
	}),
})
// ...

r, err := http.NewRequest("GET", "http://example.com", nil)
// ...
data := &myContextData{
	request: r,
}
ctx := context.WithValue(context.Background(), myContextKey{}, data)
span := sentry.StartSpan(ctx, "operation")
// When sampling the above span, the custom TracesSampler will have
// access to data.

// ...
span.Finish()

----------------------------------------

TITLE: Executing Sentry CLI Login and Debug File Upload Commands
DESCRIPTION: Two-step process for authenticating with Sentry CLI and uploading debug files for Android builds. The upload command requires organization and project identifiers, targeting the merged native libraries from a specific build variant.

LANGUAGE: bash
CODE:
sentry-cli login
sentry-cli debug-files upload -o {YOUR ORGANISATION} -p {PROJECT} build/intermediates/merged_native_libs/{buildVariant}

----------------------------------------

TITLE: Configuring ngrok for Sentry in YAML
DESCRIPTION: YAML configuration for ngrok to set up a persistent HTTPS tunnel for Sentry development. This snippet defines the authtoken and tunnel settings for a Sentry instance.

LANGUAGE: yaml
CODE:
authtoken: REDACTED
tunnels:
  sentry:
    proto: http
    addr: 8000
    subdomain: myusername-somethingobscure

----------------------------------------

TITLE: Configuring Sentry Dart SDK with Error Monitoring and Performance Tracing
DESCRIPTION: This code initializes the Sentry Dart SDK with options for error monitoring and performance tracing. It sets the DSN, enables sending default PII, and configures the trace sample rate.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Future<void> main() async {
  await Sentry.init((options) {
    options.dsn = '___PUBLIC_DSN___';
    // Adds request headers and IP for users,
    // visit: https://docs.sentry.io/platforms/dart/data-management/data-collected/ for more info
    options.sendDefaultPii = true;
    // Set tracesSampleRate to 1.0 to capture 100% of transactions for tracing.
    // We recommend adjusting this value in production.
    options.tracesSampleRate = 1.0;
  });

  // you can also configure SENTRY_DSN, SENTRY_RELEASE, SENTRY_DIST, and
  // SENTRY_ENVIRONMENT via Dart environment variable (--dart-define)
}

----------------------------------------

TITLE: Running Prettier Fix
DESCRIPTION: Command to format code and markdown files using Prettier.

LANGUAGE: bash
CODE:
yarn lint:prettier:fix

----------------------------------------

TITLE: Using Theme Properties in Styled Components
DESCRIPTION: Shows how to access and use theme properties within Styled Components, including z-index, spacing, colors, and other design tokens.

LANGUAGE: tsx
CODE:
import styled from '@emotion/styled';
import {space} from 'sentry/styles/space';

const SomeComponent = styled('div')`
  border-radius: 1.45em;
  font-weight: bold;
  z-index: ${p => p.theme.zIndex.modal};
  padding: ${space(1)} ${space(2)};
  border: 1px solid ${p => p.theme.borderLight};
  color: ${p => p.theme.purple};
  box-shadow: ${p => p.theme.dropShadowHeavy};
`;

----------------------------------------

TITLE: Features Configuration
DESCRIPTION: Configuration for enabling specific Sentry product features that are disabled by default in Relay.

LANGUAGE: json
CODE:
{
  "config": {
    "features": ["organizations:session-replay"]
  }
}

----------------------------------------

TITLE: Cloning Sentry Docs Repository
DESCRIPTION: Command to clone the sentry-docs repository from GitHub using SSH.

LANGUAGE: bash
CODE:
git clone git@github.com:getsentry/sentry-docs.git

----------------------------------------

TITLE: Installing Sentry SDK with Tornado Support
DESCRIPTION: Commands to install the Sentry SDK with Tornado integration and additional dependencies for Python 3.6.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk[tornado]

LANGUAGE: bash
CODE:
pip install --upgrade aiocontextvars

----------------------------------------

TITLE: Configuring Sentry Monitor Slug for Quartz Jobs
DESCRIPTION: Configuration example showing how to set up monitor slugs for both JobDetail and Trigger instances in Quartz scheduler.

LANGUAGE: java
CODE:
import io.sentry.quartz.SentryJobListener;

// you can set the monitor slug on the job detail
JobDetailFactoryBean jobDetailFactory = new JobDetailFactoryBean();
jobDetailFactory.setJobDataAsMap(Collections.singletonMap(SentryJobListener.SENTRY_SLUG_KEY, "<monitor-slug>"));

// you can also set the monitor slug on the trigger
SimpleTriggerFactoryBean trigger = new SimpleTriggerFactoryBean();
trigger.setJobDataAsMap(Collections.singletonMap(SENTRY_SLUG_KEY, "monitor_slug_simple_trigger"));

----------------------------------------

TITLE: Implementing a Type-Safe hasKey Helper Function in TypeScript
DESCRIPTION: Defines a helper function to safely narrow keys when checking for object property existence, improving type safety when working with potentially undefined keys.

LANGUAGE: typescript
CODE:
const hasKey = <T extends Record<PropertyKey, any>>(
    obj: T,
    key: PropertyKey
  ): key is keyof typeof obj => {
    return key in obj;
  };

// ✅
function printKey(person: Person, key: string) {
  console.log(hasKey(person, key) ? person[key].toUpperCase() : 'N/A');
}

----------------------------------------

TITLE: Filtering Events with TracesSampler in Sentry
DESCRIPTION: Example showing how to filter transaction events using the tracesSampler callback function, which allows selective sampling of transactions based on their properties.

LANGUAGE: javascript
CODE:
Sentry.init({
  tracesSampler: samplingContext => {
    // Drop all transactions starting with /health
    if (samplingContext.transactionContext.name.startsWith('/health')) {
      return 0;
    }
    // Sample all others at 10%
    return 0.1;
  },
});

----------------------------------------

TITLE: Configuring Sentry Expo Router Instrumentation Options
DESCRIPTION: This snippet shows how to configure the Sentry Expo Router instrumentation by passing an options object to the constructor. It includes options for enabling time to initial display, setting route change timeout, and ignoring empty back navigation transactions.

LANGUAGE: javascript
CODE:
Sentry.reactNavigationIntegration({
  enableTimeToInitialDisplay: true, // default: false
  routeChangeTimeoutMs: 1000, // default: 1000
  ignoreEmptyBackNavigationTransactions: true, // default: true
});

----------------------------------------

TITLE: Configuring Trace Diagnostic Logger in Sentry C#
DESCRIPTION: Demonstrates how to configure the TraceDiagnosticLogger for writing to trace listeners, useful for Windows Forms, WPF, UWP, and ASP.NET applications.

LANGUAGE: csharp
CODE:
options.DiagnosticLogger = new TraceDiagnosticLogger(SentryLevel.Debug);

----------------------------------------

TITLE: AWS Lambda Layer ARN Configuration
DESCRIPTION: Example ARN string for configuring the Sentry Lambda Layer in AWS Lambda. The ARN needs to be modified based on the specific AWS region.

LANGUAGE: plaintext
CODE:
arn:aws:Lambda:us-west-1:943013980633:layer:SentryNodeServerlessSDKv7:10

----------------------------------------

TITLE: Client-Side Sentry Integration Imports
DESCRIPTION: Shows the new integration function names exported from @sentry/remix that are available for client-side initialization. These replace the previous class-based implementations from @sentry/integrations.

LANGUAGE: javascript
CODE:
import { httpClientIntegration, contextLinesIntegration, reportingObserverIntegration } from '@sentry/remix';

----------------------------------------

TITLE: Removing User Data from Sentry in GDScript
DESCRIPTION: This code snippet demonstrates how to remove user-specific data from Sentry using the SentrySDK class. This is typically used when a user logs out or when you want to stop associating events with a particular user.

LANGUAGE: gdscript
CODE:
SentrySDK.remove_user()

----------------------------------------

TITLE: Configuring Sentry TracesSampler in Go
DESCRIPTION: Initializes the Sentry client with a custom sampling function that determines trace capture rates based on different conditions. The sampler returns different sampling rates (20%, 1%, 0%, or 10%) depending on specific conditions being met.

LANGUAGE: go
CODE:
err := sentry.Init(sentry.ClientOptions{
	// ...
	TracesSampler: sentry.TracesSampler(func(ctx sentry.SamplingContext) float64 {
		switch {
		case condition1:
			return 0.2
		case condition2:
			return 0.01
		case condition3:
			return 0.0
		default:
			return 0.1
		}
	}),
})

----------------------------------------

TITLE: Configuring Sentry Middleware in SolidStart
DESCRIPTION: This snippet shows how to set up Sentry's middleware for distributed tracing in a SolidStart application. It imports the necessary functions and adds the Sentry middleware to the response pipeline.

LANGUAGE: typescript
CODE:
import { sentryBeforeResponseMiddleware } from '@sentry/solidstart/middleware';
import { createMiddleware } from '@solidjs/start/middleware';

export default createMiddleware({
  onBeforeResponse: [
    sentryBeforeResponseMiddleware(),
    // Add your other middleware handlers after `sentryBeforeResponseMiddleware`
  ],
});

----------------------------------------

TITLE: Implementing Sentry Report Dialog with Page Refresh
DESCRIPTION: Configuration for Sentry's showReportDialog method that includes an onClose callback to refresh the page when the dialog is closed. Requires Sentry JS SDK version 7.82.0 or higher.

LANGUAGE: html
CODE:
<script>
  Sentry.showReportDialog({
    // ...
    onClose() {
      // Refresh the page after the user closes the report dialog
      location.reload();
    },
  });
</script>

----------------------------------------

TITLE: Adding SAML2 Support to Sentry Requirements
DESCRIPTION: This snippet shows how to add SAML2 support to the Sentry requirements file for versions older than 20.6.0. It specifies the package and its source to be installed.

LANGUAGE: plaintext
CODE:
sentry-auth-saml2@https://github.com/getsentry/sentry-auth-saml2/archive/master.zip#egg=sentry-auth-saml2

----------------------------------------

TITLE: Configuring Sentry NLog Target in XML
DESCRIPTION: XML-based configuration for NLog including Sentry target setup, logging rules, custom tags, and advanced options.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
>
  <extensions>
    <add assembly="Sentry.NLog" />
  </extensions>

  <targets>
    <target xsi:type="Sentry" name="sentry"
            dsn="___PUBLIC_DSN___"
            layout="${message}"
            environment="Development"
            breadcrumbLayout="${message}"
            minimumBreadcrumbLevel="Debug"
            minimumEventLevel="Error">

      <!-- Advanced options can be configured here-->
      <options
          sendDefaultPii="true"
          attachStacktrace="false"
          shutdownTimeoutSeconds="5"
          debug="false"
        >
        <!--Advanced options can be specified as attributes or elements-->
        <includeEventDataOnBreadcrumbs>true</includeEventDataOnBreadcrumbs>
      </options>

      <!--Optionally add any desired additional Tags that will be sent with every message -->
      <tag name="exception" layout="${exception:format=shorttype}" includeEmptyValue="false" />

      <!--Optionally add any desired additional Data that will be sent with every message -->
      <contextproperty name="threadid" layout="${threadid}" includeEmptyValue="true" />
    </target>
  </targets>

  <rules>
    <logger name="*" writeTo="sentry" />
  </rules>
</nlog>

----------------------------------------

TITLE: Installing Sentry Browser SDK with pnpm
DESCRIPTION: This command installs the Sentry Browser SDK using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add @sentry/browser

----------------------------------------

TITLE: Implementing Sentry Trace Sampling Configuration
DESCRIPTION: Configuration example showing how to implement trace sampling rules in Sentry using the tracesSampler function. Demonstrates different sampling rates based on span names and includes inheritance of parent sampling decisions.

LANGUAGE: typescript
CODE:
Sentry.init({
  // ...

  tracesSampler: ({ name, attributes, inheritOrSampleWith }) => {
    // Do not sample health checks ever
    if (name.includes("healthcheck")) {
      return 0;
    }

    // These are important - take a big sample
    if (name.includes("auth")) {
      return 1;
    }

    // These are less important or happen much more frequently - only take 1%
    if (name.includes("comment")) {
      return 0.01;
    }

    // Otherwise, inherit the sample sampling decision of the incoming trace, or use a fallback sampling rate.
    return inheritOrSampleWith(0.5);
  },
});

----------------------------------------

TITLE: Implementing Sentry Trace Sampling Configuration
DESCRIPTION: Configuration example showing how to implement trace sampling rules in Sentry using the tracesSampler function. Demonstrates different sampling rates based on span names and includes inheritance of parent sampling decisions.

LANGUAGE: typescript
CODE:
Sentry.init({
  // ...

  tracesSampler: ({ name, attributes, inheritOrSampleWith }) => {
    // Do not sample health checks ever
    if (name.includes("healthcheck")) {
      return 0;
    }

    // These are important - take a big sample
    if (name.includes("auth")) {
      return 1;
    }

    // These are less important or happen much more frequently - only take 1%
    if (name.includes("comment")) {
      return 0.01;
    }

    // Otherwise, inherit the sample sampling decision of the incoming trace, or use a fallback sampling rate.
    return inheritOrSampleWith(0.5);
  },
});

----------------------------------------

TITLE: Configuring Sentry Patches for Sidekiq Integration
DESCRIPTION: Initializes Sentry with enabled patches for sidekiq-cron or sidekiq-scheduler to enable automatic job monitoring.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  config.enabled_patches += [:sidekiq_cron]
  # or, for sidekiq-scheduler:
  config.enabled_patches += [:sidekiq_scheduler]
end

----------------------------------------

TITLE: Rendering Alpha Feature Alert in JSX
DESCRIPTION: A simple Alert component wrapper used to display a warning message about alpha feature status and potential bugs.

LANGUAGE: jsx
CODE:
<Alert>

This feature is currently in Alpha. Alpha features are still in-progress and may have bugs. We recognize the irony.

</Alert>

----------------------------------------

TITLE: Controlling SwiftUI Masking with Sentry Modifiers
DESCRIPTION: These SwiftUI examples demonstrate how to use sentryReplayUnmask and sentryReplayMask modifiers to control masking of specific elements in a SwiftUI view.

LANGUAGE: swift
CODE:
@Binding var user: String

var body: some View {
  VStack {
    Text("Hello")
      .sentryReplayUnmask()
    Text("\(user)")
  }
}

LANGUAGE: swift
CODE:
@Binding var user: String

var body: some View {
  VStack {
    Text("Hello")
    Text("\(user)")
      .sentryReplayMask()
  }
  .background(.blue)
  .sentryReplayUnmask()
}

----------------------------------------

TITLE: Specifying Custom Redis Cluster for Sentry Buffer
DESCRIPTION: Configures Sentry to use a specific Redis cluster named 'buffer' for the buffer backend, instead of the default cluster. This allows for more flexible Redis configuration in Sentry.

LANGUAGE: python
CODE:
SENTRY_BUFFER_OPTIONS = {
    'cluster': 'buffer',
}

----------------------------------------

TITLE: Implementing BeforeSendCallback in Java for Sentry Spring Integration
DESCRIPTION: This snippet shows how to create a custom BeforeSendCallback as a Spring component in Java. It demonstrates modifying the SentryEvent by setting the server name to null before the event is sent.

LANGUAGE: java
CODE:
import io.sentry.SentryEvent;
import io.sentry.SentryOptions;
import io.sentry.Hint
import org.springframework.stereotype.Component;

@Component
public class CustomBeforeSendCallback implements SentryOptions.BeforeSendCallback {
  @Override
  public SentryEvent execute(SentryEvent event, Hint hint) {
    // Example: Never send server name in events
    event.setServerName(null);
    return event;
  }
}

----------------------------------------

TITLE: Initializing Sentry Connect Integration in JavaScript
DESCRIPTION: Demonstrates how to initialize Sentry with the Connect integration for performance monitoring. Uses @opentelemetry/instrumentation-connect under the hood for span capture in Connect framework applications.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [new Sentry.connectIntegration()],
});

----------------------------------------

TITLE: Configuring Sentry Android SDK with Fragment Integration
DESCRIPTION: Initialize the Sentry Android SDK with the FragmentLifecycleIntegration. This configuration enables breadcrumb creation for fragment lifecycle events and auto fragment lifecycle tracing.

LANGUAGE: kotlin
CODE:
import android.app.Application
import io.sentry.android.core.SentryAndroid
import io.sentry.android.fragment.FragmentLifecycleIntegration

SentryAndroid.init(this) { options ->
    options.addIntegration(
        FragmentLifecycleIntegration(
            this,
            enableFragmentLifecycleBreadcrumbs = true, // enabled by default
            enableAutoFragmentLifecycleTracing = true  // disabled by default
            )
        )
}

----------------------------------------

TITLE: Updating getStaticProps Wrapper in Next.js Sentry Configuration
DESCRIPTION: This code demonstrates how to update the getStaticProps wrapper in Next.js Sentry configuration. It replaces the deprecated 'withSentryGetStaticProps' function with the new 'wrapGetStaticPropsWithSentry' function.

LANGUAGE: JavaScript
CODE:
-import { withSentryGetStaticProps } from "@sentry/nextjs";
+import { wrapGetStaticPropsWithSentry } from "@sentry/nextjs";

export async function _getStaticProps() {
  // Fetch data from external API
}

-export const getStaticProps = withSentryGetStaticProps(_getServerSideProps);
+export const getStaticProps = wrapGetStaticPropsWithSentry(_getServerSideProps);


----------------------------------------

TITLE: Release Management Commands
DESCRIPTION: Example of creating a new release with organization and project parameters.

LANGUAGE: bash
CODE:
sentry-cli releases -o my-org new -p my-project 1.0

----------------------------------------

TITLE: Release Management Commands
DESCRIPTION: Example of creating a new release with organization and project parameters.

LANGUAGE: bash
CODE:
sentry-cli releases -o my-org new -p my-project 1.0

----------------------------------------

TITLE: Setting Environment Variables for Sentry Release and Distribution
DESCRIPTION: This bash snippet shows how to set environment variables for Sentry release and distribution. These variables are used by the automatic source maps upload script when custom release values are used.

LANGUAGE: bash
CODE:
export SENTRY_RELEASE="my-project-name@2.3.12"
export SENTRY_DIST="52"

----------------------------------------

TITLE: Continuing Trace from Upstream Service in Unreal Engine with Sentry
DESCRIPTION: Demonstrates how to continue a trace using incoming trace information and baggage to create a transaction context. The code shows the creation of a transaction using the SentrySubsystem's ContinueTrace and StartTransactionWithContext methods.

LANGUAGE: cpp
CODE:
// Get incoming tracing information
const FString inTrace = ...
TArray<FString>() inBaggage = ...

USentryTransactionContext* transactionContext =
    SentrySubsystem->ContinueTrace(inTrace, inBaggage);

USentryTransaction* transaction =
    SentrySubsystem->StartTransactionWithContext(transactionContext);

----------------------------------------

TITLE: Configuring Sentry SDK Trace Sampling in Objective-C
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in Objective-C with custom trace sampling logic. It shows setting different sampling rates based on context and fallback behavior.

LANGUAGE: objc
CODE:
[SentrySDK startWithConfigureOptions:^(SentryOptions * options) {
    options.tracesSampler = ^NSNumber * _Nullable(SentrySamplingContext * _Nonnull samplingContext) {
        if (/* make a decision based on `samplingContext` */) {
          // Drop this transaction, by setting its sample rate to 0%
          return @0;
        } else if (/* ... */) {
          // Override sample rate for other cases (replaces `options.tracesSampleRate`)
          return @0.1;
        }

        // Can return `nil` to fallback to the rate configured by `options.tracesSampleRate`
        return nil;
    };
}];

----------------------------------------

TITLE: Applying AndroidNativeBundle Plugin in Application Gradle
DESCRIPTION: This snippet demonstrates how to apply the AndroidNativeBundle plugin in the application's build.gradle file.

LANGUAGE: groovy
CODE:
apply plugin: 'com.ydq.android.gradle.native-aar.import'

----------------------------------------

TITLE: Disabling User Interaction Tracing in Sentry Flutter SDK
DESCRIPTION: This snippet shows how to disable user interaction tracing by setting the enableUserInteractionTracing option to false during SDK initialization.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) => options.enableUserInteractionTracing = false,
    appRunner: () => runApp(SentryWidget(child: MyApp())),
  );
}

----------------------------------------

TITLE: Verifying Sentry Setup with Intentional Error
DESCRIPTION: Create a test route that throws an error to verify Sentry is capturing both client-side and server-side errors.

LANGUAGE: tsx
CODE:
import type { Route } from "./+types/example-page";

export async function loader() {
  throw new Error("some error thrown in a loader");
}

export default function ExamplePage() {
  return (
    <div>
      Loading this page will throw an error
    </div>
  );
}


----------------------------------------

TITLE: Span Data Structure Example
DESCRIPTION: Demonstrates the expected JSON structure for a database query span, including required attributes and metadata.

LANGUAGE: json
CODE:
{
  "description": "SELECT * FROM projects WHERE projects_user = 17",
  "op": "db",
  "data": {
    "db.system": "postgresql",
    "db.operation": "SELECT",
    "db.name": "production",
    "server.address": "127.0.0.1",
    "server.port": "7777"
  }
}

----------------------------------------

TITLE: Configuring User Context in Sentry SDK - C#
DESCRIPTION: Demonstrates how to set user identification information in Sentry SDK's scope. Shows two alternative methods: setting user ID or username for user tracking in error reports.

LANGUAGE: csharp
CODE:
SentrySdk.ConfigureScope(scope =>
{
    scope.User.Id = "user.id";

    // Or

    scope.User.Username = "user.username";
});

----------------------------------------

TITLE: Creating and Managing Sentry Transactions in C#
DESCRIPTION: This code demonstrates how to create a transaction, start a child span, and finish both the span and transaction using the Sentry SDK. It shows the basic structure for instrumenting specific regions of code with Sentry's performance monitoring features.

LANGUAGE: csharp
CODE:
// Transaction can be started by providing, at minimum, the name and the operation
var transaction = SentrySdk.StartTransaction(
  "test-transaction-name",
  "test-transaction-operation"
);

// Transactions can have child spans (and those spans can have child spans as well)
var span = transaction.StartChild("test-child-operation");

// ...
// (Perform the operation represented by the span/transaction)
// ...

span.Finish(); // Mark the span as finished
transaction.Finish(); // Mark the transaction as finished and send it to Sentry

----------------------------------------

TITLE: Grouping Database Connection Errors Aggressively in Sentry SDK
DESCRIPTION: Illustrates how to group generic errors, like database connection errors, more aggressively by completely overriding Sentry's default grouping.

LANGUAGE: javascript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['database-connection-error']);
  Sentry.captureException(error);
});

LANGUAGE: python
CODE:
with sentry_sdk.configure_scope() as scope:
    scope.fingerprint = ['database-connection-error']

LANGUAGE: php
CODE:
\Sentry\configureScope(function (\Sentry\State\Scope $scope): void {
    $scope->setFingerprint(['database-connection-error']);
});

----------------------------------------

TITLE: Configuring Sentry Scope with Redux State
DESCRIPTION: This snippet demonstrates how to use the configureScopeWithState option in the Sentry Redux enhancer. It allows for dynamic configuration of the Sentry scope based on the current Redux state, such as setting tags.

LANGUAGE: javascript
CODE:
const sentryReduxEnhancer = Sentry.createReduxEnhancer({
  configureScopeWithState: (scope, state) => {
    // Set tag if the user is using imperial units.
    if (state.settings.useImperialUnits) {
      scope.setTag("user.usesImperialUnits", true);
    }
  },
});

----------------------------------------

TITLE: Setting Masking Tag with Sentry-specific ID in XML for Session Replay
DESCRIPTION: This XML snippet shows how to set a masking tag using a Sentry-specific ID when the view already has a tag assigned.

LANGUAGE: xml
CODE:
<View
  android:id="@+id/my_view"
  android:layout_width="wrap_content"
  android:layout_height="wrap_content">

  <tag android:id="@id/sentry_privacy" android:value="mask|unmask"/>
</View>

----------------------------------------

TITLE: Example URL Transactions Before Processing
DESCRIPTION: Sample of problematic high-cardinality URL transactions that contain unique identifiers like usernames and numeric IDs.

LANGUAGE: txt
CODE:
/user/alice/
/user/bob/
/blog/1234567890/comments/
/hash/4c79f60c11214eb38604f4ae0781bfb2/diff/

----------------------------------------

TITLE: Setting Sentry Tags Context with Encoded Hash in Elixir
DESCRIPTION: This snippet sets a tag in Sentry's context using an encoded SHA hash of a birthday. It demonstrates the use of Sentry.Context, Base encoding, and crypto hashing in Elixir.

LANGUAGE: elixir
CODE:
Sentry.Context.set_tags_context(%{
   birthday: Base.encode64(:crypto.hash(:sha, "1990-01-01"))
})

----------------------------------------

TITLE: Configuring Sentry Monitor Check-ins with JavaScript
DESCRIPTION: This snippet shows how to configure Sentry Monitor check-ins using the Sentry.captureCheckIn() function. It includes monitor configuration, starting a check-in, executing a task, and completing the check-in.

LANGUAGE: javascript
CODE:
const monitorConfig = {
  schedule: {
    type: "crontab",
    value: "* * * * *",
  },
  checkinMargin: 2, // In minutes. Optional.
  maxRuntime: 10, // In minutes. Optional.
  timezone: "America/Los_Angeles", // Optional.
};

// 🟡 Notify Sentry your job is running:
const checkInId = Sentry.captureCheckIn(
  {
    monitorSlug: "<monitor-slug>",
    status: "in_progress",
  },
  monitorConfig
);

// Execute your scheduled task here...

// 🟢 Notify Sentry your job has completed successfully:
Sentry.captureCheckIn(
  {
    // Make sure this variable is named `checkInId`
    checkInId,
    monitorSlug: "<monitor-slug>",
    status: "ok",
  },
  monitorConfig
);

----------------------------------------

TITLE: Configuring User Feedback Theme in Swift
DESCRIPTION: Example showing how to customize the theme colors for both light and dark modes in the user feedback widget.

LANGUAGE: swift
CODE:
SentrySDK.start { options in 
    options.configureUserFeedback { config in
        // configureTheme is used for light themes on iOS versions that support dark mode, and as the sole theme configuration for earlier iOS versions that don't support dark mode
        config.theme { theme in 
            theme.background = .init(color: .yellow)
        }
        config.darkTheme { theme in 
            theme.background = .init(color: .darkGray)
        }
    }
}

----------------------------------------

TITLE: Performance Span Event JSON Structure
DESCRIPTION: Example of a performance span event capturing network request details.

LANGUAGE: json
CODE:
{
  "type": 5,
  "timestamp": 1710854008431,
  "data": {
    "tag": "performanceSpan",
    "payload": {
      "op": "resource.fetch",
      "description": "https://us.sentry.io/api/0/projects/foo/javascript/events/eea92bc02315448591e159d8138ef3e8/owners/",
      "startTimestamp": 1710854008.431,
      "endTimestamp": 1710854009.234,
      "data": {
        "method": "GET",
        "statusCode": 200,
        "request": {
          "headers": {
            "content-type": "application/json",
            "accept": "application/json; charset=utf-8",
            "sentry-trace": "b07d0e356aa1477bb279d9fe5680fcd0-83881f299ca64b4f-1"
          }
        },
        "response": {
          "headers": {
            "content-length": "36",
            "content-type": "application/json"
          },
          "size": 36,
          "body": {
            "owners": [],
            "rule": null,
            "rules": []
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Sentry Environment Variables for Lambda
DESCRIPTION: Environment variable configuration for initializing Sentry SDK in Lambda functions with performance monitoring enabled. Sets up auto-instrumentation and sampling rate.

LANGUAGE: bash
CODE:
NODE_OPTIONS="-r @sentry/aws-serverless/awslambda-auto"
SENTRY_DSN="___PUBLIC_DSN___"
SENTRY_TRACES_SAMPLE_RATE="1.0"

----------------------------------------

TITLE: SvelteKit 7.x Sourcemap Configuration
DESCRIPTION: Legacy configuration for sourcemap uploading in SvelteKit SDK 7.x using the Sentry Vite Plugin.

LANGUAGE: JavaScript
CODE:
sentrySvelteKit({
  sourceMapsUploadOptions: {
    org: process.env.SENTRY_ORG,
    project: process.env.SENTRY_PROJECT,
    authToken: process.env.SENTRY_AUTH_TOKEN,
    release: '1.0.1',
    injectRelease: true,
    include: ['./build/*/**/*'],
    ignore: ['**/build/client/**/*']
  },
})

----------------------------------------

TITLE: Initializing Sentry for Android with Custom Trace Sampling in Kotlin
DESCRIPTION: This snippet demonstrates how to initialize Sentry for Android using Kotlin and configure custom trace sampling rates. It uses a TracesSamplerCallback to set different sampling rates based on app activities and app start events.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.TracesSamplerCallback

SentryAndroid.init(this) { options ->
  options.tracesSampler = TracesSamplerCallback { context ->
    if (context.transactionContext.isForNextAppStart) {
      // These refer to app start (if app start profiling is enabled), and are important - take a big sample
      return@TracesSamplerCallback 0.7
    }
    val ctx = context.customSamplingContext
    if (ctx != null) {
      when (ctx.get("ActivityName")) {
        "LoginActivity" -> {
          // These are important - take a big sample
          0.5
        }
        "SearchActivity" -> {
          // Search is less important and happen much more frequently - only take 1%
          0.01
        }
        "HealthCheckActivity" -> {
          // The health check is just noise - drop all transactions
          0.0
        }
        else -> {
          // Default sample rate
          null
        }
      }
    } else {
      null
    }
  }
}

----------------------------------------

TITLE: Rendering Feature Availability Alert in React JSX
DESCRIPTION: This code snippet renders an Alert component to inform users about a feature's availability. It specifies that the feature is only accessible for organizations on Business or Enterprise plans, and not available on Trial plans. The alert includes a link to the pricing page for more information.

LANGUAGE: jsx
CODE:
<Alert>

This feature is available only if your organization is on a <a href="https://sentry.io/pricing/" target="_blank">Business or Enterprise plan</a>. This feature is not available on Trial plans.

</Alert>

----------------------------------------

TITLE: Profile Envelope JSON Structure
DESCRIPTION: Shows the JSON structure for the envelope containing both transaction and profile data for ingestion.

LANGUAGE: json
CODE:
{"event_id":"a229377b82ad4898be7c3a6272d052d9"}
{"type":"transaction"}
{ /* transaction JSON payload */ }
{"type":"profile"}
{ /* profile JSON payload */}

----------------------------------------

TITLE: Sentry Span Start Timestamp - Unix Timestamp Format
DESCRIPTION: Example showing the start_timestamp field using Unix epoch timestamp (float). This represents seconds since Unix epoch when span measurement began.

LANGUAGE: json
CODE:
{
    "start_timestamp": 1304358096.242
  }

----------------------------------------

TITLE: Setting CodePush Update Label as Sentry Tag
DESCRIPTION: Retrieves the CodePush Update Label and sets it as a tag in Sentry for event filtering.

LANGUAGE: javascript
CODE:
codePush.getUpdateMetadata().then((update) => {
  Sentry.setTag('codepush', update.label);
});

----------------------------------------

TITLE: HTML Structure for Multi-View Flutter Web App
DESCRIPTION: HTML template for Flutter web application with multi-view layout. Includes necessary meta tags, viewport configuration, and container structure for multiple views.

LANGUAGE: html
CODE:
<!doctype html>
<html>
  <head>
    <base href="$FLUTTER_BASE_HREF" />
    <meta charset="UTF-8" />
    <meta content="IE=Edge" http-equiv="X-UA-Compatible" />
    <meta
      name="description"
      content="Demonstrates how to use the multiview feature with the sentry plugin."
    />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <meta
      name="apple-mobile-web-app-title"
      content="sentry multiview example"
    />
    <link rel="apple-touch-icon" href="icons/Icon-192.png" />
    <link rel="shortcut icon" type="image/png" href="favicon.png" />
    <title>sentry multiview example</title>
    <link rel="manifest" href="manifest.json" />
  </head>
  <body>
    <div style="width: 100%; height: 100%; position: absolute;">
      <div id="left" style="width: 50%; height: 100%; float: left;"></div>
      <div id="right" style="width: 50%; height: 100%; float: left;"></div>
    </div>
    <script
      src="flutter_bootstrap.js"
      type="application/javascript"
      async
    ></script>
  </body>
</html>

----------------------------------------

TITLE: Installing Sentry Android Gradle Plugin
DESCRIPTION: Add the Sentry Android Gradle plugin to your project's build.gradle file. This plugin automatically adds the sentry-android-fragment dependency if androidx.fragment is detected.

LANGUAGE: groovy
CODE:
plugins {
  id "io.sentry.android.gradle" version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

LANGUAGE: kotlin
CODE:
plugins {
  id("io.sentry.android.gradle") version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

----------------------------------------

TITLE: Removing User Data from Sentry Event
DESCRIPTION: Example of using a PII selector with a value type to remove all user data from a Sentry event.

LANGUAGE: plaintext
CODE:
[Remove] [Anything] from [$user]

----------------------------------------

TITLE: Vite Configuration for Sentry
DESCRIPTION: Configuration for setting up Sentry plugins in Vite for source map uploads and build-time features.

LANGUAGE: javascript
CODE:
import { sveltekit } from "@sveltejs/kit/vite";
import { sentrySvelteKit } from "@sentry/sveltekit";

export default {
  plugins: [sentrySvelteKit(), sveltekit()],
  // ... rest of your Vite config
};

----------------------------------------

TITLE: Installing Raven Go SDK via go get
DESCRIPTION: Command to install the Raven Go SDK using go get.

LANGUAGE: bash
CODE:
go get github.com/getsentry/raven-go

----------------------------------------

TITLE: Implementing Custom Sampling in Java (Spring Boot 3)
DESCRIPTION: Java implementation of TracesSamplerCallback for Spring Boot 3 that sets different sampling rates based on request URLs. Uses jakarta.servlet.http.HttpServletRequest for request handling.

LANGUAGE: java
CODE:
import io.sentry.SamplingContext;
import io.sentry.SentryOptions.TracesSamplerCallback;
import org.springframework.stereotype.Component;
import jakarta.servlet.http.HttpServletRequest;

@Component
class CustomTracesSamplerCallback implements TracesSamplerCallback {
  @Override
  public Double sample(SamplingContext context) {
    HttpServletRequest request = (HttpServletRequest) context.getCustomSamplingContext().get("request");
    String url = request.getRequestURI();
    if ("/payment".equals(url)) {
      // These are important - take a big sample
      return 0.5;
    } else if ("/search".equals(url)) {
      // Search is less important and happen much more frequently - only take 1%
      return 0.01;
    } else if ("/health".equals(url)) {
      // The health check endpoint is just noise - drop all transactions
      return 0d;
    } else {
      // Default sample rate
      return 0.1;
    }
  }
}

----------------------------------------

TITLE: Incorrect Async Sentry Setup
DESCRIPTION: Example showing the incorrect way to initialize Sentry in an async context using #[tokio::main].

LANGUAGE: rust
CODE:
#[tokio::main]
async fn main() {
let _guard = sentry::init(("___PUBLIC_DSN___", sentry::ClientOptions {
    release: sentry::release_name!(),
    ..Default::default()
}));

// implementation of main
}

----------------------------------------

TITLE: Updating Sentry Replay Integration in JavaScript
DESCRIPTION: Demonstrates the migration from the deprecated @sentry/replay package to the new integrated replay functionality. The Replay integration is now imported directly from Sentry and initialized as a function rather than a class instance.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [
-    new Replay(),
+    Sentry.replayIntegration(),
  ],
});

----------------------------------------

TITLE: Initializing Sentry with Custom Browser Tracing
DESCRIPTION: Sets up Sentry SDK initialization with browser tracing integration that filters out health check endpoints from performance monitoring. The configuration uses a custom shouldCreateSpanForRequest callback to exclude requests matching the /health/ pattern.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  integrations: [
    Sentry.browserTracingIntegration({
      shouldCreateSpanForRequest: (url) => {
        // Do not create spans for outgoing requests to a `/health/` endpoint
        return !url.match(/\/health\/?$/);
      },
    }),
  ],
});

----------------------------------------

TITLE: Configuring Amazon S3 Backend in Sentry
DESCRIPTION: Configuration for Amazon S3 storage backend. Supports both access key authentication and IAM instance roles. Requires appropriate S3 permissions and allows ACL configuration.

LANGUAGE: yaml
CODE:
filestore.backend: "s3"
filestore.options:
  access_key: "..."
  secret_key: "..."
  bucket_name: "..."
  default_acl: "..."

----------------------------------------

TITLE: Migrating from Hub to Scope API in Sentry SDK
DESCRIPTION: Shows how to migrate from the deprecated Hub constructor to the new Scope API for multi-client use. This approach uses withIsolationScope() to set the current client and initialize it.

LANGUAGE: TypeScript
CODE:
// NEW
Sentry.withIsolationScope(() => {
  Sentry.setCurrentClient(client);
  client.init();
});

----------------------------------------

TITLE: Incorrect Version Specification in package.json
DESCRIPTION: Shows an incorrect way of specifying Sentry SDK versions using carets, which can lead to version mismatch issues.

LANGUAGE: xml
CODE:
    "@sentry/angular": "^7.13.0",
    "@sentry/capacitor": "^0.10.1"

----------------------------------------

TITLE: Notifying Sentry of Release Deployment using CLI
DESCRIPTION: This command uses the Sentry CLI to notify Sentry of a new deployment for a specific release version and environment. It requires proper configuration of the Sentry CLI token.

LANGUAGE: bash
CODE:
sentry-cli releases --org ORGANIZATION_SLUG deploys VERSION new -e ENVIRONMENT

----------------------------------------

TITLE: Instrumenting HTTP Requests with Sentry Spans in JavaScript
DESCRIPTION: This function demonstrates how to wrap HTTP requests in a Sentry span, setting various attributes for detailed tracing. It uses the fetch API to make the request and sets span attributes based on the request and response details.

LANGUAGE: javascript
CODE:
async function makeRequest(method, url) {
  return await Sentry.startSpan(
    { op: "http.client", name: `${method} ${url}` },
    async (span) => {
      const parsedURL = new URL(url, location.origin);

      span.setAttribute("http.request.method", method);

      span.setAttribute("server.address", parsedURL.hostname);
      span.setAttribute("server.port", parsedURL.port || undefined);

      const response = await fetch(url, {
        method,
      });

      span.setAttribute("http.response.status_code", response.status);
      span.setAttribute(
        "http.response_content_length",
        Number(response.headers.get("content-length"))
      );

      // A good place to set other span attributes

      return response;
    }
  );
}

----------------------------------------

TITLE: Instrumenting HTTP Requests with Sentry Spans in JavaScript
DESCRIPTION: This function demonstrates how to wrap HTTP requests in a Sentry span, setting various attributes for detailed tracing. It uses the fetch API to make the request and sets span attributes based on the request and response details.

LANGUAGE: javascript
CODE:
async function makeRequest(method, url) {
  return await Sentry.startSpan(
    { op: "http.client", name: `${method} ${url}` },
    async (span) => {
      const parsedURL = new URL(url, location.origin);

      span.setAttribute("http.request.method", method);

      span.setAttribute("server.address", parsedURL.hostname);
      span.setAttribute("server.port", parsedURL.port || undefined);

      const response = await fetch(url, {
        method,
      });

      span.setAttribute("http.response.status_code", response.status);
      span.setAttribute(
        "http.response_content_length",
        Number(response.headers.get("content-length"))
      );

      // A good place to set other span attributes

      return response;
    }
  );
}

----------------------------------------

TITLE: Configuring Ignored Exceptions in Sentry Properties
DESCRIPTION: Defines RuntimeException as an exception type to be ignored by Sentry's error tracking system. This configuration prevents Sentry from capturing and reporting RuntimeExceptions that occur in the Java application.

LANGUAGE: properties
CODE:
ignored-exceptions-for-type=java.lang.RuntimeException

----------------------------------------

TITLE: Disabling Sentry Breadcrumbs
DESCRIPTION: Configuration to disable breadcrumb creation for Sentry events.

LANGUAGE: javascript
CODE:
createSentryPiniaPlugin({
  addBreadcrumbs: false,
});

----------------------------------------

TITLE: Uploading Source Maps with Release and Distribution
DESCRIPTION: Command to upload source maps with specific release and distribution identifiers.

LANGUAGE: bash
CODE:
sentry-cli sourcemaps upload --release=<release_name> --dist=<dist_name> /path/to/directory

----------------------------------------

TITLE: Sentry Initialization File (ESM)
DESCRIPTION: Example of the instrument.mjs file used to initialize Sentry before any other imports in ES6 module syntax. This is required for proper auto-instrumentation in Sentry Node SDK 8.x.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/node";

Sentry.init({
  // ...
});

----------------------------------------

TITLE: Installing Datadog Package for Sentry Metrics Backend
DESCRIPTION: Command to install the Datadog package required for the Datadog metrics backend.

LANGUAGE: bash
CODE:
$ pip install datadog

----------------------------------------

TITLE: Configuring Sentry Scope with Extra Context
DESCRIPTION: Sets additional context data in Sentry's scope using the configureScope method. This example adds extra information about a character's name that will be included with any error reports.

LANGUAGE: php
CODE:
\Sentry\configureScope(function (\Sentry\State\Scope $scope): void {
    $scope->setExtra('character.name', 'Mighty Fighter');
});

----------------------------------------

TITLE: Disabling Automatic Performance Tracing
DESCRIPTION: Configuration to opt out of automatic performance instrumentation.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  enableAutoPerformanceTracing: false,
});

----------------------------------------

TITLE: Basic JSON Backup Commands for Sentry
DESCRIPTION: Commands for performing basic JSON backups in different versions of self-hosted Sentry. Includes options for version-specific implementations and scope-based backups.

LANGUAGE: shell
CODE:
# If using self-hosted version <= 23.3.0:
docker compose run -v $(pwd)/sentry:/sentry-data/backup  --rm -T -e SENTRY_LOG_LEVEL=CRITICAL web export /sentry-data/backup/backup.json

# If using self-hosted version >= 23.3.1:
./scripts/backup.sh

# If using self-hosted version >= 24.1.0:
./scripts/backup.sh [user | organization | config | global]

----------------------------------------

TITLE: Capturing Warning Message with Sentry in Elixir
DESCRIPTION: Shows how to capture a warning message using Sentry.capture_message/2 with custom log level. The function accepts a message string and optional keyword list for configuration, where level can be set to :fatal, :error, :warning, :info, or :debug.

LANGUAGE: elixir
CODE:
Sentry.capture_message("Oh no!", level: :warning)

----------------------------------------

TITLE: Implementing Set Metrics
DESCRIPTION: Explains how to emit set metrics for tracking unique occurrences.



----------------------------------------

TITLE: Installing Sentry React SDK with npm
DESCRIPTION: Installs the @sentry/react package using npm package manager with the --save flag to add it to dependencies.

LANGUAGE: bash
CODE:
npm install @sentry/react --save

----------------------------------------

TITLE: Handling Failed Check-Ins with Sentry in Go
DESCRIPTION: Shows how to notify Sentry when a job execution fails by sending an error status check-in.

LANGUAGE: go
CODE:
// 🔴 Notify Sentry your job has failed:
sentry.CaptureCheckIn(
	&sentry.CheckIn{
		ID:          *checkinId,
		MonitorSlug: "<monitor-slug>",
		Status:      sentry.CheckInStatusError,
	},
	nil,
)

----------------------------------------

TITLE: Publishing Sentry Configuration File in Laravel
DESCRIPTION: Use Laravel's Artisan command to publish the Sentry configuration file to config/sentry.php.

LANGUAGE: shell
CODE:
php artisan config:publish sentry/sentry-laravel

----------------------------------------

TITLE: Custom Sampling Context in Sentry
DESCRIPTION: Implementation of custom sampling context data when creating transactions. This allows adding additional data for sampling decisions without attaching it to the transaction as tags or data.



----------------------------------------

TITLE: Issue Alert Webhook Response Format
DESCRIPTION: Example of the webhook payload format when an issue alert is triggered, showing settings structure

LANGUAGE: json
CODE:
{
  "data": {
    "issue_alert": {
      "settings": [
        {
          "name": "title",
          "value": "Ticket Title"
        },
        {
          "name": "description",
          "value": "Ticket Description"
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Creating Sentry Transaction in Dart
DESCRIPTION: Creates and manages a Sentry transaction to monitor the execution of a batch processing operation. The snippet shows error handling and proper transaction completion using try-catch-finally blocks.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

final transaction = Sentry.startTransaction('processOrderBatch()', 'task');

try {
  processOrderBatch();
} catch (exception) {
  transaction.throwable = exception;
  transaction.status = SpanStatus.internalError();
} finally {
  await transaction.finish();
}

----------------------------------------

TITLE: Updating BrowserTracing Integration in Sentry Angular Configuration
DESCRIPTION: This snippet demonstrates how to update the BrowserTracing integration when initializing Sentry in an Angular application. It replaces the class-based integration with a function-based integration.

LANGUAGE: JavaScript
CODE:
import * as Sentry from "@sentry/angular";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
-  integrations: [
-    new Sentry.BrowserTracing({
-      routingInstrumentation: Sentry.routingInstrumentation(),
-    })
-  ],
+  integrations: [Sentry.browserTracingIntegration()],
});

----------------------------------------

TITLE: Configuring RabbitMQ Broker URL
DESCRIPTION: Python configuration example for setting up RabbitMQ as a message broker for high workload scenarios.

LANGUAGE: python
CODE:
BROKER_URL = "amqp://guest:guest@localhost:5672/sentry"

----------------------------------------

TITLE: Resulting Span JSON for HTTP Request Instrumentation
DESCRIPTION: An example of the span data generated from an auto-instrumented HTTP request, including required and recommended attributes.

LANGUAGE: json
CODE:
{
  "description": "GET /data.json?user=1",
  "op": "http.client",
  "data": {
    "http.query": "user=1",
    "http.request_method": "GET",
    "http.response.status_code": 200,
    "http.fragment": "",
    "server.address": "app.example.com",
    "server.port": 8080,
    ... other span properties
  }
}

----------------------------------------

TITLE: Configuring TypeScript Compiler for Source Map Generation
DESCRIPTION: This snippet shows the necessary configuration in tsconfig.json to enable source map generation for TypeScript projects. It enables source map output, inline sources, and sets the sourceRoot to improve issue grouping in Sentry.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "sourceMap": true,
    "inlineSources": true,

    // Set `sourceRoot` to  "/" to strip the build path prefix from
    // generated source code references. This will improve issue grouping in Sentry.
    "sourceRoot": "/"
  }
}

----------------------------------------

TITLE: Importing HttpClient Integration in JavaScript
DESCRIPTION: Shows how to import the HttpClient integration in a JavaScript project using Sentry.

LANGUAGE: javascript
CODE:
Sentry.httpClientIntegration

----------------------------------------

TITLE: Initializing Sentry SDK with Release Name in Objective-C
DESCRIPTION: Shows how to initialize the Sentry SDK and set a custom release name using Objective-C. Uses the same release name format as Swift implementation for consistency in version tracking.

LANGUAGE: objective-c
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.releaseName = @"io.example.MyApp@1.0.0";
}];

----------------------------------------

TITLE: Initializing Sentry with ProfilesSampler Function
DESCRIPTION: Demonstrates how to initialize Sentry using a custom sampling function (profilesSampler) instead of a fixed sample rate. The sampler function provides more granular control over which spans should be profiled.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/browser");

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Add browser profiling integration to the list of integrations
    Sentry.browserTracingIntegration(),
    Sentry.browserProfilingIntegration(),
  ],
  tracesSampleRate: 1.0,

  // This function will be called for every sampled span
  // to determine if it should be profiled
  profilesSampler: (samplingContext) => {
    return 1.0;
  },
});

----------------------------------------

TITLE: Sentry Integrations Feature Matrix
DESCRIPTION: Markdown table documenting Sentry integrations and their supported features. Shows which integrations are auto-enabled and support error tracking, tracing, or additional context.

LANGUAGE: markdown
CODE:
|                                                           | **Auto Enabled** | **Errors** | **Tracing** | **Additional Context** |
| --------------------------------------------------------- | :--------------: | :--------: | :---------: | :--------------------: |
| [`awsIntegration`](./aws)                                 |        ✓         |            |      ✓      |                        |
| [`awsLambdaIntegration`](./awslambda)                     |        ✓         |            |      ✓      |                        |
| [`consoleIntegration`](./console)                         |        ✓         |            |             |           ✓            |
| [`contextLinesIntegration`](./contextlines)               |        ✓         |     ✓      |             |                        |
| [`dedupeIntegration`](./dedupe)                           |        ✓         |     ✓      |             |                        |
| [`functionToStringIntegration`](./functiontostring)       |        ✓         |            |             |                        |
| [`httpIntegration`](./http)                               |        ✓         |     ✓      |      ✓      |           ✓            |
| [`inboundFiltersIntegration`](./inboundfilters)           |        ✓         |     ✓      |             |                        |
| [`linkedErrorsIntegration`](./linkederrors)               |        ✓         |     ✓      |             |                        |
| [`modulesIntegration`](./modules)                         |        ✓         |            |             |           ✓            |
| [`nodeContextIntegration`](./nodecontext)                 |        ✓         |            |             |           ✓            |
| [`nativeNodeFetchIntegration`](./nodefetch)               |        ✓         |            |      ✓      |           ✓            |
| [`onUncaughtExceptionIntegration`](./onuncaughtexception) |        ✓         |     ✓      |             |                        |
| [`onUnhandledRejectionIntegration`](./unhandledrejection) |        ✓         |     ✓      |             |                        |
| [`childProcessIntegration`](./childProcess)               |        ✓         |            |             |           ✓            |
| [`amqplibIntegration`](./amqplib)                         |                  |            |      ✓      |                        |
| [`anrIntegration`](./anr)                                 |                  |     ✓      |             |                        |
| [`captureConsoleIntegration`](./captureconsole)           |                  |            |             |           ✓            |
| [`dataloaderIntegration`](./dataloader)                   |                  |            |      ✓      |                        |
| [`extraErrorDataIntegration`](./extraerrordata)           |                  |            |             |           ✓            |
| [`fsIntegration`](./fs)                                   |                  |            |      ✓      |                        |
| [`genericPoolIntegration`](./genericpool)                 |                  |            |      ✓      |                        |
| [`graphqlIntegration`](./graphql)                         |                  |            |      ✓      |                        |
| [`kafkaIntegration`](./kafka)                             |                  |            |      ✓      |                        |
| [`knexIntegration`](./knex)                               |                  |            |      ✓      |                        |
| [`localVariablesIntegration`](./localvariables)           |                  |     ✓      |             |                        |
| [`lruMemoizerIntegration`](./lrumemoizer)                 |                  |            |      ✓      |                        |
| [`mongoIntegration`](./mongo)                             |                  |            |      ✓      |                        |
| [`mongooseIntegration`](./mongoose)                       |                  |            |      ✓      |                        |
| [`mysqlIntegration`](./mysql)                             |                  |            |      ✓      |                        |
| [`mysql2Integration`](./mysql2)                           |                  |            |      ✓      |                        |
| [`nodeProfilingIntegration`](./nodeprofiling)             |                  |            |      ✓      |                        |
| [`postgresIntegration`](./postgres)                       |                  |            |      ✓      |                        |
| [`prismaIntegration`](./prisma)                           |                  |            |      ✓      |                        |
| [`redisIntegration`](./redis)                             |                  |            |      ✓      |                        |
| [`requestDataIntegration`](./requestdata)                 |                  |            |      ✓      |                        |
| [`rewriteFramesIntegration`](./rewriteframes)             |                  |     ✓      |             |                        |
| [`tediousIntegration`](./tedious)                         |                  |            |      ✓      |                        |
| [`trpcMiddleware`](./trpc)                                |                  |     ✓      |      ✓      |           ✓            |

----------------------------------------

TITLE: Implementing Sentry Instrumentation Hook
DESCRIPTION: Export a register function that conditionally imports Sentry configurations based on the runtime environment (Node.js or Edge).

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/nextjs';

export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    await import('./sentry.server.config');
  }

  if (process.env.NEXT_RUNTIME === 'edge') {
    await import('./sentry.edge.config');
  }
}

----------------------------------------

TITLE: Creating a Debug Route for Sentry in Laravel Lumen
DESCRIPTION: Add a route that throws an exception to verify Sentry is capturing errors in the Laravel Lumen application.

LANGUAGE: php
CODE:
Route::get('/debug-sentry', function () {
    throw new Exception('My first Sentry error!');
});

----------------------------------------

TITLE: Setting Basic Fingerprint in Sentry SDK
DESCRIPTION: Demonstrates how to set a basic fingerprint by passing an array of strings directly to the SDK.

LANGUAGE: javascript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['my-view-function']);
  Sentry.captureException(error);
});

LANGUAGE: python
CODE:
with sentry_sdk.configure_scope() as scope:
    scope.fingerprint = ['my-view-function']
    sentry_sdk.capture_exception(error)

----------------------------------------

TITLE: Setting Sentry Environment Variables in Bash
DESCRIPTION: Sets the required environment variables for Sentry integration, including auth token, organization slug, project slug, and optional self-hosted URL.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___
SENTRY_ORG=___ORG_SLUG___
SENTRY_PROJECT=___PROJECT_SLUG___
# For self-hosted
# SENTRY_URL=https://my-sentry-url

----------------------------------------

TITLE: Defining Alert Rule Action Schema in JSON
DESCRIPTION: Base schema definition for alert rule action component showing required structure and attributes

LANGUAGE: json
CODE:
{
  "elements": [
    {
      "type": "alert-rule-action",
      "title": <String>,
      "settings": {
        "type": "alert-rule-settings",
        "uri": <URI>,
        "required_fields": <Array<FormField>>,
        "optional_fields": <Array<FormField>>,
        "description": <String>
      }
    }
  ]
}

----------------------------------------

TITLE: Initializing Sentry SDK with Browser Tracing in JavaScript
DESCRIPTION: This code snippet shows how to initialize the Sentry SDK with browser tracing enabled. It imports the Sentry package, sets up the DSN, includes the browserTracingIntegration, and sets the tracesSampleRate. The comment suggests adjusting the sample rate in production environments.

LANGUAGE: javascript
CODE:
// If you're using one of our framework SDK packages, like `@sentry/react`,
// substitute its name for `@sentry/browser` here
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [Sentry.browserTracingIntegration()],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Initializing Sentry SDK with Browser Tracing in JavaScript
DESCRIPTION: This code snippet shows how to initialize the Sentry SDK with browser tracing enabled. It imports the Sentry package, sets up the DSN, includes the browserTracingIntegration, and sets the tracesSampleRate. The comment suggests adjusting the sample rate in production environments.

LANGUAGE: javascript
CODE:
// If you're using one of our framework SDK packages, like `@sentry/react`,
// substitute its name for `@sentry/browser` here
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [Sentry.browserTracingIntegration()],

  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Customizing Sentry Error Events for Apollo Requests
DESCRIPTION: Modify or drop Sentry error events for Apollo requests using a BeforeSendCallback.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry
import io.sentry.SentryOptions.BeforeSendCallback
import com.apollographql.api.http.HttpRequest
import com.apollographql.api.http.HttpResponse
import io.sentry.TypeCheckHint.APOLLO_REQUEST
import io.sentry.TypeCheckHint.APOLLO_RESPONSE

Sentry.init { options ->
  // Add a callback that will be used before the event is sent to Sentry.
  // With this callback, you can modify the event or, when returning null, also discard the event.
  options.beforeSend = BeforeSendCallback { event, hint ->
    val request = hint.getAs(APOLLO_REQUEST, HttpRequest::class.java)
    val response = hint.getAs(APOLLO_RESPONSE, HttpResponse::class.java)

    // customize or drop the event
    event
  }
}

----------------------------------------

TITLE: Setting Custom Environment in Sentry with Unreal Engine C++
DESCRIPTION: Demonstrates how to programmatically configure a custom environment in Sentry using Unreal Engine's delegate system. The code shows initialization of Sentry settings with a custom environment name through a delegate callback.

LANGUAGE: cpp
CODE:
FConfigureSettingsDelegate SettingsDelegate;
SettingsDelegate.BindDynamic(this, &USomeClass::HandleSettingsDelegate);

void USomeClass::HandleSettingsDelegate(USentrySettings* Settings)
{
    Settings->Environment = FString(TEXT("MyEnvironment"));
}

...

USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->InitializeWithSettings(SettingsDelegate);

----------------------------------------

TITLE: Wrapping Application Initialization
DESCRIPTION: Wraps application initialization code in Raven.context() to help surface additional errors in certain execution contexts.

LANGUAGE: javascript
CODE:
Raven.context(function () {\n  initMyApp();\n});

----------------------------------------

TITLE: Extended Raven.js Configuration
DESCRIPTION: Configures Raven.js with additional options like release version tracking.

LANGUAGE: javascript
CODE:
Raven.config("___PUBLIC_DSN___", {
  release: "myapp@1.3.0",
}).install();

----------------------------------------

TITLE: Wrapping Application Initialization
DESCRIPTION: Wraps application initialization code in Raven.context() to help surface additional errors in certain execution contexts.

LANGUAGE: javascript
CODE:
Raven.context(function () {\n  initMyApp();\n});

----------------------------------------

TITLE: Ignoring Certain Errors for Error Sampling in JavaScript
DESCRIPTION: This snippet shows how to skip capturing a Replay for certain errors using the 'beforeErrorSampling' callback in Sentry's Session Replay SDK.

LANGUAGE: javascript
CODE:
replayIntegration({
  beforeErrorSampling: (event) => {
    // Return false to skip capturing a Replay for this error
    return !event.exception?.values?.[0]?.value?.includes("drop me");
  },
});

----------------------------------------

TITLE: Configuring Sentry Environment Settings in Unreal Engine C++
DESCRIPTION: Shows how to bind a settings delegate and initialize Sentry with custom environment configuration. The code configures the environment setting and initializes the Sentry subsystem with the specified configuration.

LANGUAGE: cpp
CODE:
FConfigureSettingsDelegate SettingsDelegate;
SettingsDelegate.BindDynamic(this, &USomeClass::HandleSettingsDelegate);

void USomeClass::HandleSettingsDelegate(USentrySettings* Settings)
{
    Settings->Environment = FString(TEXT("MyEnvironment"));
}

...

USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

SentrySubsystem->InitializeWithSettings(SettingsDelegate);

----------------------------------------

TITLE: Initializing Sentry Client with Release Version in Go
DESCRIPTION: This snippet demonstrates how to initialize the Sentry client in a Go application. It sets up the client options, specifically configuring the release version of the project.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	// ...
	Release: "my-project-name@1.0.0",
})

----------------------------------------

TITLE: Specifying API Owner and Publish Status in Python
DESCRIPTION: Demonstrates how to set the owner and publish status for API endpoints using Python classes.

LANGUAGE: python
CODE:
class OrganizationTeamsEndpoint(...):
    owner = ApiOwner.ENTERPRISE
    publish_status = {
        'GET': ApiPublishStatus.PUBLIC,
        'POST': ApiPublishStatus.PUBLIC,
        'PUT': ApiPublishStatus.EXPERIMENTAL,
    }

----------------------------------------

TITLE: Specifying API Owner and Publish Status in Python
DESCRIPTION: Demonstrates how to set the owner and publish status for API endpoints using Python classes.

LANGUAGE: python
CODE:
class OrganizationTeamsEndpoint(...):
    owner = ApiOwner.ENTERPRISE
    publish_status = {
        'GET': ApiPublishStatus.PUBLIC,
        'POST': ApiPublishStatus.PUBLIC,
        'PUT': ApiPublishStatus.EXPERIMENTAL,
    }

----------------------------------------

TITLE: Illustrating Data Flow for Sampled Transaction in Sentry
DESCRIPTION: This Mermaid flowchart demonstrates the path of a sampled transaction through Sentry's system, showing how it's processed by the SDK, Relay, Dynamic Sampling, and finally stored.

LANGUAGE: mermaid
CODE:
flowchart LR
  SDK --transaction--> Relay
  Relay --transaction--> DS[Dynamic Sampling]
  Relay --transaction_indexed--> DS
  DS --transaction-->Store
  DS --transaction_indexed-->Store

----------------------------------------

TITLE: Flutter Web Bootstrap Configuration
DESCRIPTION: JavaScript configuration for initializing Flutter web application with multi-view support. Sets up engine initialization and view attachment to DOM elements.

LANGUAGE: javascript
CODE:
_flutter.loader.load({
  onEntrypointLoaded: async function onEntrypointLoaded(engineInitializer) {
    let engine = await engineInitializer.initializeEngine({
      multiViewEnabled: true, // Enables embedded mode.
    });
    let app = await engine.runApp();
    // Make this `app` object available to your JS app.
    app.addView({ hostElement: document.querySelector("#left") });
    app.addView({ hostElement: document.querySelector("#right") });
  },
});

----------------------------------------

TITLE: Request Format for Issue Link Operations
DESCRIPTION: JSON structure for requests sent when creating or linking issues, including fields, installation details, and issue information.

LANGUAGE: json
CODE:
{
  "fields": <Object>,
  "installationId": <String>,
  "issueId": <String>,
  "webUrl": <String>,
  "project": {"slug": <String>, "id": <String>},
  "actor": {"type": "user", "name": <String>, "id": <String>}
}

----------------------------------------

TITLE: Configuring Sentry SDK for React
DESCRIPTION: Initializes Sentry with React Router integration, performance monitoring, and session replay configuration. Includes tracing setup and sampling rates.

LANGUAGE: javascript
CODE:
import { useEffect } from "react";
import * as Sentry from "@sentry/react";
import {
  createRoutesFromChildren,
  matchRoutes,
  useLocation,
  useNavigationType,
} from "react-router-dom";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactRouterV6BrowserTracingIntegration({
      useEffect,
      useLocation,
      useNavigationType,
      createRoutesFromChildren,
      matchRoutes,
    }),
    Sentry.replayIntegration(),
  ],
  tracesSampleRate: 1.0,
  tracePropagationTargets: [/^\//,/^https:\/\/yourserver\.io\/api/],
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Configuring Sentry SDK for React
DESCRIPTION: Initializes Sentry with React Router integration, performance monitoring, and session replay configuration. Includes tracing setup and sampling rates.

LANGUAGE: javascript
CODE:
import { useEffect } from "react";
import * as Sentry from "@sentry/react";
import {
  createRoutesFromChildren,
  matchRoutes,
  useLocation,
  useNavigationType,
} from "react-router-dom";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    Sentry.reactRouterV6BrowserTracingIntegration({
      useEffect,
      useLocation,
      useNavigationType,
      createRoutesFromChildren,
      matchRoutes,
    }),
    Sentry.replayIntegration(),
  ],
  tracesSampleRate: 1.0,
  tracePropagationTargets: [/^\//,/^https:\/\/yourserver\.io\/api/],
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

----------------------------------------

TITLE: Backend Distribution Metrics in Python
DESCRIPTION: Implementation examples of distribution metrics for measuring processing times and ML model confidence in backend applications using Sentry's Python SDK.

LANGUAGE: Python
CODE:
sentry_sdk.metrics.distribution(
   key = "processing_time",
   value = 0.002,
   unit = "second",
   tags = {"task": "example_task"}
)

LANGUAGE: Python
CODE:
sentry_sdk.metrics.distribution(
   key = "model_confidence",
   value = 0.72,
   unit = "ratio",
   tags = {"model_id": "a294c108"}
)

----------------------------------------

TITLE: Custom HTTP Status Code Tracking with SentryHttpClient
DESCRIPTION: Demonstrates how to configure SentryHttpClient to track specific HTTP status codes as errors.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

var client = SentryHttpClient(
  failedRequestStatusCodes: [
    SentryStatusCode.range(400, 404),
    SentryStatusCode(500),
  ],
);

try {
  var uriResponse = await client.post('https://example.com/whatsit/create',
    body: {'name': 'doodle', 'color': 'blue'});
  print(await client.get(uriResponse.bodyFields['uri']));
} finally {
  client.close();
}

----------------------------------------

TITLE: Implementing Sentry Logging in Java
DESCRIPTION: Complete Java example showing various logging scenarios including simple messages, breadcrumbs, extras, and exception handling.

LANGUAGE: java
CODE:
import org.apache.log4j.Logger;
import org.apache.log4j.MDC;
import org.apache.log4j.NDC;

public class MyClass {
  private static final Logger logger = Logger.getLogger(MyClass.class);

  void logSimpleMessage() {
    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logWithBreadcrumbs() {
    // Record a breadcrumb that will be sent with the next event(s),
    // by default the last 100 breadcrumbs are kept.
    Sentry.record(
        new BreadcrumbBuilder().setMessage("User made an action").build()
    );

    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logWithExtras() {
    // MDC extras
    MDC.put("extra_key", "extra_value");
    // NDC extras are sent under 'log4J-NDC'
    NDC.push("Extra_details");
    // This sends an event with extra data to Sentry
    logger.error("This is a test");
  }

  void logException() {
    try {
      unsafeMethod();
    } catch (Exception e) {
      // This sends an exception event to Sentry
      logger.error("Exception caught", e);
    }
  }

  void unsafeMethod() {
    throw new UnsupportedOperationException("You shouldn't call this!");
  }
}

----------------------------------------

TITLE: Importing Sentry SDK
DESCRIPTION: Import the Sentry SDK to enable tag functionality. This step is necessary before defining any tags.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="enriching-events/import" />

----------------------------------------

TITLE: Building and Bundling AWS Lambda Function with Source Files
DESCRIPTION: This command builds a Go binary for AWS Lambda and bundles it with necessary source files. It compiles the 'upload-image' function for Linux and creates a zip file containing the binary and related source code directories.

LANGUAGE: bash
CODE:
GOOS=linux go build -o bin/upload-image functions/upload-image/main.go && zip -r handler.zip bin/upload-image functions/upload-image/ helper/ util/

----------------------------------------

TITLE: Setting Uniform Transaction Sample Rate in Sentry SDK
DESCRIPTION: Configures a uniform sample rate for transaction events in Sentry SDK. This example sets a 20% sampling rate for all transactions.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  tracesSampleRate: 0.2,
});

----------------------------------------

TITLE: Setting Sentry Release Version in PHP Configuration
DESCRIPTION: This snippet sets the release version for Sentry error tracking. It specifies the project name and version number in the format 'project-name@version'.

LANGUAGE: PHP
CODE:
'release' => 'my-project-name@2.3.12',

----------------------------------------

TITLE: Configuring Ignored Exceptions in Sentry PHP
DESCRIPTION: Defines an array of exception classes that should be ignored by Sentry's error tracking. In this case, UnauthenticatedException is configured to be ignored and not reported to Sentry.

LANGUAGE: php
CODE:
'ignore_exceptions' => [
    UnauthenticatedException::class,
],

----------------------------------------

TITLE: Creating Attachment from File Path in C#
DESCRIPTION: Initialize a Sentry attachment using a file path. The SDK will read the file contents when preparing an event or transaction.

LANGUAGE: csharp
CODE:
var attachment = new Attachment("path/to/file.log");

----------------------------------------

TITLE: Migrating Monitor Upsert Check-In in Shell
DESCRIPTION: Illustrates the changes in upserting a monitor with a check-in, focusing on the new structure of the 'schedule' parameter in the monitor configuration.

LANGUAGE: shell
CODE:
# ❌ Legacy upsert monitor with a check-in
curl -X POST \
    'https://sentry.io/api/0/organizations/___ORG_SLUG___/monitors/<monitor_slug>/checkins/' \
    --header 'Authorization: DSN ___PUBLIC_DSN___' \
    --header 'Content-Type: application/json' \
    --data-raw '{"monitor_config": {"schedule": "0 * * * *", "schedule_type": "crontab"}, "status": "in_progress"}'

# ✅ New style upsert monitor with a check-in
SENTRY_INGEST="https://___ORG_INGEST_DOMAIN___"
SENTRY_CRONS="${SENTRY_INGEST}/api/___PROJECT_ID___/cron/<monitor_slug>/___PUBLIC_KEY___/"

curl -X POST "${SENTRY_CRONS}?status=in_progress" \
    --header 'Content-Type: application/json' \
    --data-raw '{"monitor_config": {"schedule": {"type": "crontab", "value": "0 * * * *"}}, "status": "in_progress"}'
    # 👉 Note that schedule is now an object ---^

----------------------------------------

TITLE: Initializing Sentry in a Connect Application (CommonJS)
DESCRIPTION: Example of how to initialize Sentry in a Connect application using CommonJS syntax. It demonstrates importing the instrument file, setting up Sentry, and adding the Connect error handler.

LANGUAGE: javascript
CODE:
require("./instrument");
const connect = require("connect");
const Sentry = require("@sentry/node");
const app = connect();

// Add routes etc. here

Sentry.setupConnectErrorHandler(app);

app.listen(3000);

----------------------------------------

TITLE: Creating Error Trigger Button in Angular HTML Template
DESCRIPTION: This snippet shows how to add a button in an Angular component's HTML template that triggers a test error when clicked.

LANGUAGE: html
CODE:
<button (click)="throwTestError()">Test Sentry Error</button>

----------------------------------------

TITLE: Project Disabled Status Configuration
DESCRIPTION: Configuration to enable or disable event processing for a project.

LANGUAGE: json
CODE:
{
  "disabled": false
}

----------------------------------------

TITLE: Configuring Podfile for Sentry in React Native
DESCRIPTION: Shows how to configure the Podfile to set APPLICATION_EXTENSION_API_ONLY for the Sentry pod, resolving build conflicts.

LANGUAGE: ruby
CODE:
post_install do |installer|
  react_native_post_install(
    installer,
    config[:reactNativePath],
    :mac_catalyst_enabled => false,
  )

  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      if target.name == 'Sentry'
        config.build_settings['APPLICATION_EXTENSION_API_ONLY'] = 'YES'
      else
        # configuration for other targets
      end
    end
  end
end

----------------------------------------

TITLE: Runtime Information JSON Structure
DESCRIPTION: Shows the JSON structure for runtime information in the profile metadata, including name and version fields.

LANGUAGE: json
CODE:
{
  "runtime": {
    "name": "CPython",
    "version": "3.11.2"
  }
}

----------------------------------------

TITLE: Initializing Sentry with Feature Flags in TypeScript
DESCRIPTION: Shows how to initialize Sentry with feature flags integration, add a feature flag, and capture an exception. Requires @sentry/browser package and valid DSN configuration.

LANGUAGE: typescript
CODE:
import * as Sentry from '@sentry/browser';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.featureFlagsIntegration()]
});

const flagsIntegration = Sentry.getClient()?.getIntegrationByName<Sentry.FeatureFlagsIntegration>('FeatureFlags');
if (flagsIntegration) {
  flagsIntegration.addFeatureFlag('test-flag', false);
} else {
  // Something went wrong, check your DSN and/or integrations
}
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Installing Sentry Remix SDK with npm
DESCRIPTION: This snippet shows how to install the @sentry/remix package using npm. It adds the package to the project's dependencies.

LANGUAGE: bash
CODE:
npm install @sentry/remix --save

----------------------------------------

TITLE: Configuring Sentry Serilog Sink
DESCRIPTION: Configuration example for setting up Sentry Serilog sink with custom minimum levels for breadcrumbs and events. Sets Debug level for breadcrumbs and Warning level for events.

LANGUAGE: csharp
CODE:
Log.Logger = new LoggerConfiguration()
  .WriteTo.Sentry(o =>
  {
    // Debug and higher are stored as breadcrumbs (default is Information)
    o.MinimumBreadcrumbLevel = LogEventLevel.Debug;
    // Warning and higher is sent as event (default is Error)
    o.MinimumEventLevel = LogEventLevel.Warning;
  })
  .CreateLogger();

----------------------------------------

TITLE: Uploading Attachment to Global Scope in Unity
DESCRIPTION: Adds an attachment to the global scope in Unity, which will be sent with every event captured by Sentry.

LANGUAGE: csharp
CODE:
<PlatformContent includePath="enriching-events/attachment-upload" />

----------------------------------------

TITLE: Uploading Source Context via Fastlane Plugin
DESCRIPTION: Configuration for uploading source context using the Sentry Fastlane plugin. Shows both current and legacy (pre-1.20.0) syntax with include_sources option enabled.

LANGUAGE: ruby
CODE:
sentry_debug_files_upload(
  auth_token: '___ORG_AUTH_TOKEN___',
  org_slug: '___ORG_SLUG___',
  project_slug: '___PROJECT_SLUG___',
  include_sources: true, # Optional. For source context.
)

LANGUAGE: ruby
CODE:
sentry_upload_dif(
  auth_token: '___ORG_AUTH_TOKEN___',
  org_slug: '___ORG_SLUG___',
  project_slug: '___PROJECT_SLUG___',
  include_sources: true, # Optional. For source context.
)

----------------------------------------

TITLE: Configuring Sentry Plugin for Webpack
DESCRIPTION: Shows how to integrate the Sentry plugin in a Webpack configuration file. Sets up error tracking with a custom application key using the Sentry Webpack plugin.

LANGUAGE: javascript
CODE:
// webpack.config.js
const { sentryWebpackPlugin } = require("@sentry/webpack-plugin");

module.exports = {
  plugins: [
    sentryWebpackPlugin({
      applicationKey: "your-custom-application-key",
    }),
  ],
};

----------------------------------------

TITLE: Configuring Sentry Plugin for Webpack
DESCRIPTION: Shows how to integrate the Sentry plugin in a Webpack configuration file. Sets up error tracking with a custom application key using the Sentry Webpack plugin.

LANGUAGE: javascript
CODE:
// webpack.config.js
const { sentryWebpackPlugin } = require("@sentry/webpack-plugin");

module.exports = {
  plugins: [
    sentryWebpackPlugin({
      applicationKey: "your-custom-application-key",
    }),
  ],
};

----------------------------------------

TITLE: Configuring Sentry Plugin for Webpack
DESCRIPTION: Shows how to integrate the Sentry plugin in a Webpack configuration file. Sets up error tracking with a custom application key using the Sentry Webpack plugin.

LANGUAGE: javascript
CODE:
// webpack.config.js
const { sentryWebpackPlugin } = require("@sentry/webpack-plugin");

module.exports = {
  plugins: [
    sentryWebpackPlugin({
      applicationKey: "your-custom-application-key",
    }),
  ],
};

----------------------------------------

TITLE: Sample Error Webhook Payload in JSON
DESCRIPTION: Complete example of a Sentry error webhook payload showing the structure and data sent when an error is created. Includes error details, stack trace, user information, and contextual data about the error event.

LANGUAGE: json
CODE:
{
  "action": "created",
  "actor": {
    "id": "sentry",
    "name": "Sentry",
    "type": "application"
  },
  "data": {
    "error": {
      "_ref": 1293919,
      "_ref_version": 2,
      "contexts": {
        "browser": {
          "name": "Chrome",
          "type": "browser",
          "version": "75.0.3770"
        },
        "os": {
          "name": "Mac OS X",
          "type": "os",
          "version": "10.14.0"
        }
      },
      "culprit": "?(runner)",
      "datetime": "2019-08-19T20:58:37.391000Z",
      "dist": null,
      "event_id": "bb78c1407cea4519aa397afc059c793d",
      "exception": {
        "values": [
          {
            "mechanism": {
              "data": {
                "message": "blooopy is not defined",
                "mode": "stack",
                "name": "ReferenceError"
              },
              "description": null,
              "handled": false,
              "help_link": null,
              "meta": null,
              "synthetic": null,
              "type": "onerror"
            },
            "stacktrace": {
              "frames": [
                {
                  "abs_path": "https://null.jsbin.com/runner",
                  "colno": 5,
                  "context_line": "<meta charset=utf-8>",
                  "data": {
                    "orig_in_app": 1
                  },
                  "errors": null,
                  "filename": "/runner",
                  "function": null,
                  "image_addr": null,
                  "in_app": false,
                  "instruction_addr": null,
                  "lineno": 3,
                  "module": "runner",
                  "package": null,
                  "platform": null,
                  "post_context": [
                    "<title>JS Bin Runner</title>",
                    "",
                    "<style type=\"text/css\">",
                    "  body {",
                    "    margin: 0;"
                  ],
                  "pre_context": ["<!doctype html>", "<html>"],
                  "raw_function": null,
                  "symbol": null,
                  "symbol_addr": null,
                  "trust": null,
                  "vars": null
                }
              ]
            },
            "type": "ReferenceError",
            "value": "blooopy is not defined"
          }
        ]
      },
      "fingerprint": ["{{ default }}"],
      "grouping_config": {
        "enhancements": "eJybzDhxY05qemJypZWRgaGlroGxrqHRBABbEwcC",
        "id": "legacy:2019-03-12"
      },
      "hashes": ["07d2da329989f6cd310eb5f1c5e828a4"],
      "issue_url": "https://sentry.io/api/0/issues/1170820242/",
      "issue_id": "1170820242",
      "key_id": "667532",
      "level": "error",
      "location": "/runner",
      "logger": "",
      "message": "",
      "metadata": {
        "filename": "/runner",
        "type": "ReferenceError",
        "value": "blooopy is not defined"
      },
      "platform": "javascript",
      "project": 1,
      "received": 1566248317.391,
      "release": null,
      "request": {
        "cookies": null,
        "data": null,
        "env": null,
        "fragment": null,
        "headers": [
          [
            "User-Agent",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"
          ]
        ],
        "inferred_content_type": null,
        "method": null,
        "query_string": [],
        "url": "https://null.jsbin.com/runner"
      },
      "sdk": {
        "integrations": [
          "InboundFilters",
          "FunctionToString",
          "BrowserApiErrors",
          "Breadcrumbs",
          "GlobalHandlers",
          "LinkedErrors",
          "HttpContext"
        ],
        "name": "sentry.javascript.browser",
        "packages": [
          {
            "name": "npm:@sentry/browser",
            "version": "5.5.0"
          }
        ],
        "version": "5.5.0"
      },
      "tags": [
        ["browser", "Chrome 75.0.3770"],
        ["browser.name", "Chrome"],
        ["handled", "no"],
        ["level", "error"],
        ["mechanism", "onerror"],
        ["os", "Mac OS X 10.14.0"],
        ["os.name", "Mac OS X"],
        ["user", "ip:162.217.75.90"],
        ["url", "https://null.jsbin.com/runner"]
      ],
      "time_spent": null,
      "timestamp": 1566248317.391,
      "title": "ReferenceError: blooopy is not defined",
      "type": "error",
      "url": "https://sentry.io/api/0/projects/test-org/front-end/events/bb78c1407cea4519aa397afc059c793d/",
      "user": {
        "ip_address": "162.218.85.90"
      },
      "version": "7",
      "web_url": "https://sentry.io/organizations/test-org/issues/1170820242/events/bb78c1407cea4519aa397afc059c793d/"
    }
  },
  "installation": {
    "uuid": "a8e5d37a-696c-4c54-adb5-b3f28d64c7de"
  }
}

----------------------------------------

TITLE: Setting Error Sample Rate in Sentry SDK Configuration
DESCRIPTION: Configures the SDK to send 25% of errors to Sentry by setting the sample rate to 0.25.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
  // Set tracesSampleRate to 1.0 to capture 100%
  // of transactions for performance monitoring.
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
  // Set sampling rate to 25%
  sampleRate: 0.25
});

----------------------------------------

TITLE: Sentry API Link Header Example
DESCRIPTION: This snippet shows an example of a Link header from the Sentry API response for an issue's events. It demonstrates the format of previous and next page links, including cursor information.

LANGUAGE: bash
CODE:
<https://sentry.io/api/0/organizations/acme/issues/123456/events/?&cursor=0:0:1>; rel="previous"; results="false"; cursor="0:0:1", <https://sentry.io/api/0/organizations/acme/issues/123456/events/?&cursor=0:100:0>; rel="next"; results="true"; cursor="0:100:0"

----------------------------------------

TITLE: Defining SamplingContext Interface in TypeScript
DESCRIPTION: This TypeScript interface defines the structure of the samplingContext object provided to the tracesSampler function, including transaction name, attributes, and parent sampling information.

LANGUAGE: typescript
CODE:
interface SamplingContext {
  // Name of the span/transaction
  name: string;
  
  // Initial attributes of the span/transaction
  attributes: SpanAttributes | undefined;
  
  // Whether the parent span was sampled (undefined if no incoming trace)
  parentSampled: boolean | undefined;
  
  // Sample rate from incoming trace (undefined if no incoming trace)
  parentSampleRate: number | undefined;
  
  // Utility function to inherit parent decision or fallback
  inheritOrSampleWith: (fallbackRate: number) => number;
}

----------------------------------------

TITLE: Running Sentry Wizard for React Native Source Maps Configuration
DESCRIPTION: This command executes the Sentry Wizard to set up automatic source maps upload for a React Native project. It uses npx to run the latest version of the @sentry/wizard package with the React Native integration flag.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i reactNative

----------------------------------------

TITLE: Implementing Stack Trace Link Example in JSON
DESCRIPTION: Complete example showing how to implement a stack trace link with a specific redirect URI. The component will automatically receive additional query parameters from Sentry including installationId, projectSlug, filename, and lineNo.

LANGUAGE: json
CODE:
{
  "elements": [
    {
      "type": "stacktrace-link",
      "uri": "/stacktrace-redirect"
    }
  ]
}

----------------------------------------

TITLE: Setting User-based Rate Limits in YAML
DESCRIPTION: This snippet demonstrates how to configure user-based and IP-based maximum per-minute rate limits using YAML configuration.

LANGUAGE: yaml
CODE:
auth.user-rate-limit: 100
auth.ip-rate-limit: 100

----------------------------------------

TITLE: Migrating Current Hub Clone Activation in Python
DESCRIPTION: Shows how to replace current hub clone activation with isolation scope usage in Sentry SDK 2.0.

LANGUAGE: python
CODE:
import sentry_sdk

- with sentry_sdk.Hub(sentry_sdk.Hub.current) as hub:
+ with sentry_sdk.isolation_scope() as scope:
      sentry_sdk.capture_message("I am isolated!")

----------------------------------------

TITLE: Migrating Current Hub Clone Activation in Python
DESCRIPTION: Shows how to replace current hub clone activation with isolation scope usage in Sentry SDK 2.0.

LANGUAGE: python
CODE:
import sentry_sdk

- with sentry_sdk.Hub(sentry_sdk.Hub.current) as hub:
+ with sentry_sdk.isolation_scope() as scope:
      sentry_sdk.capture_message("I am isolated!")

----------------------------------------

TITLE: Configuring Label Name for UI Elements in Sentry React Native
DESCRIPTION: This code snippet shows how to configure the label name used to identify UI elements in Sentry's React Native integration. It uses the 'touchEventBoundaryProps' option when wrapping the App component.

LANGUAGE: javascript
CODE:
export default Sentry.wrap(App, {
  touchEventBoundaryProps: { labelName: "my-label" },
});

----------------------------------------

TITLE: Logging Non-Exception Messages in C#
DESCRIPTION: Capture a message without an associated exception using RavenClient.

LANGUAGE: csharp
CODE:
ravenClient.Capture(new SentryEvent("Hello World!"));

----------------------------------------

TITLE: Setting GeoIP Path in Sentry Configuration
DESCRIPTION: This Python code snippet demonstrates how to set the path for the GeoLite2-City.mmdb file in the main Sentry configuration file (sentry/sentry.conf.py).

LANGUAGE: python
CODE:
GEOIP_PATH_MMDB = '/geoip/GeoLite2-City.mmdb'

----------------------------------------

TITLE: Configuring Sentry Browser Tracing with Custom Span Attributes
DESCRIPTION: Initializes Sentry with browser tracing integration and adds a custom attribute 'myAwesomeTag' to all spans using the beforeStartSpan callback. This configuration allows for enriching trace data with custom tags that can be used for filtering and analysis in the Sentry UI.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  integrations: [
    Sentry.browserTracingIntegration({
      beforeStartSpan: (context) => {
        return {
          ...context,
          attributes: {
            ...context.attributes,
            myAwesomeTag: "hi",
          },
        };
      },
    }),
  ],
});

----------------------------------------

TITLE: Uploading Source Maps to Sentry for Android
DESCRIPTION: Command to upload the Android bundle and source map to Sentry using sentry-cli with debug ID reference.

LANGUAGE: bash
CODE:
node_modules/@sentry/cli/bin/sentry-cli sourcemaps upload \
  --debug-id-reference \
  --strip-prefix /path/to/project/root \
  index.android.bundle index.android.bundle.map

----------------------------------------

TITLE: Customizing Profiler Options in React Native with Sentry
DESCRIPTION: This snippet shows how to pass custom options to the withProfiler function. In this example, a custom name is provided for the profiled component.

LANGUAGE: javascript
CODE:
export default Sentry.withProfiler(App, { name: "CustomAppName" });

----------------------------------------

TITLE: Running Sentry Worker via CLI
DESCRIPTION: Command to start a Sentry worker process using the Sentry CLI.

LANGUAGE: bash
CODE:
$ sentry run worker

----------------------------------------

TITLE: Sentry Setup with CommonJS
DESCRIPTION: Initializes Sentry error handling in a Connect application using CommonJS require statements. Demonstrates proper import ordering with instrumentation loaded first.

LANGUAGE: javascript
CODE:
// Require this first!
require("./instrument");

// Now require other modules
const connect = require("connect");
const Sentry = require("@sentry/node");

const app = connect();

Sentry.setupConnectErrorHandler(app);

// Add your routes, etc.

app.listen(3030);

----------------------------------------

TITLE: Defining AdditionalContextOptions Interface in TypeScript
DESCRIPTION: Defines the interface for AdditionalContextOptions, which specifies configuration options for the AdditionalContext integration. Currently, it only includes a 'screen' option that defaults to true.

LANGUAGE: typescript
CODE:
interface AdditionalContextOptions {
  screen: boolean;
}

----------------------------------------

TITLE: Implementing Alert Rule Action Example
DESCRIPTION: Complete example showing how to implement an alert rule action for creating tasks with required fields

LANGUAGE: json
CODE:
{
  "elements": [
    {
      "type": "alert-rule-action",
      "title": "Create a Rekall Inc task",
      "settings": {
        "type": "alert-rule-settings",
        "uri": "/sentry/alert-rule",
        "required_fields": [
          {
            "type": "select",
            "label": "Project",
            "name": "project",
            "options": [["1", "cornflakes"]]
          },
          {
            "type": "select",
            "label": "Assignee",
            "name": "assignee",
            "uri": "/sentry/alert-rule/options/users/"
          }
        ]
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring System-wide Rate Limit in Python
DESCRIPTION: This code shows how to set the system-wide maximum per-minute rate limit in the project's sentry.conf.py file using Python.

LANGUAGE: python
CODE:
from sentry.conf.server import SENTRY_OPTIONS


SENTRY_OPTIONS['system.rate-limit'] = 500

----------------------------------------

TITLE: Installing Sentry SDK for Vue with Capacitor
DESCRIPTION: Commands to install Sentry Capacitor SDK with Vue integration using npm, yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
# npm
npm install @sentry/capacitor @sentry/vue --save

# yarn
yarn add @sentry/capacitor @sentry/vue

# pnpm
pnpm add @sentry/capacitor @sentry/vue

----------------------------------------

TITLE: Configuring React Navigation Instrumentation in JavaScript
DESCRIPTION: This snippet demonstrates how to configure the React Navigation instrumentation with custom options. It sets the time to initial display, route change timeout, and ignores empty back navigation transactions.

LANGUAGE: javascript
CODE:
Sentry.reactNavigationIntegration({
  enableTimeToInitialDisplay: true, // default: false
  routeChangeTimeoutMs: 1_000, // default: 1_000
  ignoreEmptyBackNavigationTransactions: true, // default: true
});

----------------------------------------

TITLE: Modifying Spans in Apollo Client with Sentry Tracing (Kotlin)
DESCRIPTION: Customize spans created by Sentry tracing in Apollo Client using a callback function in Kotlin.

LANGUAGE: kotlin
CODE:
import com.apollographql.apollo3.ApolloClient
import io.sentry.apollo3.sentryTracing

val apollo = ApolloClient.builder()
    .serverUrl("https://apollo-fullstack-tutorial.herokuapp.com/graphql")
    .sentryTracing { span, request, response ->
        if ("LaunchDetails" == span.operation) {
            span.setTag("tag-name", "tag-value")
        }
        span
    }
    .build()

----------------------------------------

TITLE: Installing Sentry Vite Plugin
DESCRIPTION: These commands demonstrate how to install the Sentry Vite plugin using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/vite-plugin --save-dev

LANGUAGE: bash
CODE:
yarn add @sentry/vite-plugin --dev

LANGUAGE: bash
CODE:
pnpm add @sentry/vite-plugin --save-dev

----------------------------------------

TITLE: Initializing Sentry AssetBundle in Flutter
DESCRIPTION: Configuration code for initializing Sentry Flutter SDK with AssetBundle instrumentation. Wraps the runApp method with DefaultAssetBundle and SentryAssetBundle for asset loading tracking.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) => options.dsn = '___PUBLIC_DSN___',
      appRunner: () => runApp(
        DefaultAssetBundle(
          bundle: SentryAssetBundle(),
          child: MyApp(),
        ),
    ),
  );
}

----------------------------------------

TITLE: Extra Context Management in Raven Python
DESCRIPTION: Example of updating extra context data using context.merge().

LANGUAGE: python
CODE:
client.context.merge({'extra': data})

----------------------------------------

TITLE: Configuring In-App Frame Inclusion and Exclusion in Objective-C
DESCRIPTION: This snippet shows how to configure the Sentry SDK in Objective-C to mark specific frameworks as in-app or not in-app using the addInAppInclude and addInAppExclude methods.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";

    // The SDK marks all frameworks starting with MyBusinessLogic as inApp
    [options addInAppInclude:@"MyBusinessLogic"];

    // The SDK marks all framework starting with MyFramework as not inApp
    [options addInAppExclude:@"MyFramework"];
}];

----------------------------------------

TITLE: Initializing Sentry in Google Cloud Function
DESCRIPTION: C# code snippet showing how to initialize Sentry in a Google Cloud Function using the FunctionsStartup attribute.

LANGUAGE: csharp
CODE:
using System.Threading.Tasks;
using Google.Cloud.Functions.Framework;
using Google.Cloud.Functions.Hosting;
using Microsoft.AspNetCore.Http;

[assembly: FunctionsStartup(typeof(SentryStartup))]

public class Function : IHttpFunction
{
}

----------------------------------------

TITLE: Configuring Redis Integration in Sentry
DESCRIPTION: Configuration for Redis client integration with Sentry, specifying cache prefixes to categorize cache operations.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [
    redisIntegration({
      cachePrefixes: ["posts:", "authors:"],
    }),
  ],
});

----------------------------------------

TITLE: Setting User Information in Sentry SDK for Unreal Engine (C++)
DESCRIPTION: This snippet demonstrates how to set user information including email, ID, username, IP address, and additional custom data using the Sentry SDK in Unreal Engine C++.

LANGUAGE: cpp
CODE:
USentrySubsystem* SentrySubsystem = GEngine->GetEngineSubsystem<USentrySubsystem>();

TMap<FString, FString> AdditionalData;
AdditionalData.Add("DogName", "Spot");

USentryUser* User = NewObject<USentryUser>();
User->SetEmail("user@sentry.io");
User->SetId("123");
User->SetUsername("AwesomeUser99");
User->SetIpAddress("127.0.0.1");
User->SetData(AdditionalData);

SentrySubsystem->SetUser(User);

----------------------------------------

TITLE: Implementing Trace View IFrame in HTML
DESCRIPTION: HTML code for embedding an interactive trace view demo using an iframe with specific styling and dimensions.

LANGUAGE: html
CODE:
<div
  style={{
    height: "0px",
    paddingBottom: "calc(66.66% + 41px)",
    position: "relative",
    width: "100%",
  }}
>
  <iframe
    src="https://demo.arcade.software/25H9paIDvBOQp5T3pFeW?embed&show_copy_link=true"
    frameborder="0"
    loading="lazy"
    webkitallowfullscreen
    mozallowfullscreen
    allowfullscreen
    allow="clipboard-write; fullscreen;"
    style={{
      colorScheme: "light",
      height: "100%",
      left: "0px",
      position: "absolute",
      top: "0px",
      width: "100%",
    }}
  ></iframe>
</div>

----------------------------------------

TITLE: Configuring Sentry Context Lines with Loader v8
DESCRIPTION: Implements Sentry context lines integration using the v8 loader script method with lazy loading functionality.

LANGUAGE: html
CODE:
<script>
  // Configure sentryOnLoad before adding the Loader Script
  window.sentryOnLoad = function () {
    Sentry.init({});
    Sentry.lazyLoadIntegration("contextLinesIntegration").then(
      (integration) => {
        Sentry.addIntegration(integration());
      }
    );
  };
</script>

<script
  src="https://js.sentry-cdn.com/___PUBLIC_KEY___.min.js"
  crossorigin="anonymous"
></script>

----------------------------------------

TITLE: Adding Custom CSP Source Allowances
DESCRIPTION: Example of adding custom domains to the CSP script source allowlist using django-csp syntax.

LANGUAGE: python
CODE:
CSP_SCRIPT_SRC += ["example.com"]

----------------------------------------

TITLE: Demonstrating URL Truncation in Sentry Tags
DESCRIPTION: This example shows how a long URL exceeding 200 characters gets truncated when used as a tag in Sentry. It illustrates the potential loss of important information due to the character limit.

LANGUAGE: plaintext
CODE:
https://empowerplant.io/api/0/projects/ep/setup_form/?user_id=314159265358979323846264338327&tracking_id=EasyAsABC123OrSimpleAsDoReMi&product_name=PlantToHumanTranslator&product_id=161803398874989484820458683436563811772030917980576

LANGUAGE: plaintext
CODE:
https://empowerplant.io/api/0/projects/ep/setup_form/?user_id=314159265358979323846264338327&tracking_id=EasyAsABC123OrSimpleAsDoReMi&product_name=PlantToHumanTranslator&product_id=1618033988749894848

----------------------------------------

TITLE: Creating dSYM Debug Companion File for macOS/iOS
DESCRIPTION: This command uses dsymutil to generate a dSYM debug companion file from a Mach-O executable or dynamic library.

LANGUAGE: bash
CODE:
dsymutil /path/to/output[.dylib]

----------------------------------------

TITLE: Setting Sentry Auth Token in Environment File
DESCRIPTION: This snippet shows how to set the Sentry authentication token in a .env file for the build plugin.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Cloning Sample React Application
DESCRIPTION: Command to clone the sample frontend application repository from GitHub to local environment.

LANGUAGE: bash
CODE:
git clone git@github.com:<your_username>/tracing-tutorial-frontend.git

----------------------------------------

TITLE: Enabling Input and Output Collection
DESCRIPTION: Configuration example for enabling both input and output collection in telemetry data for specific AI function calls.

LANGUAGE: javascript
CODE:
const result = await generateText({
  model: openai("gpt-4-turbo"),
  experimental_telemetry: {
    isEnabled: true,
    recordInputs: true,
    recordOutputs: true,
  },
});

----------------------------------------

TITLE: Configuring Source Maps in Ionic Package.json
DESCRIPTION: Configuration for enabling source map generation in Ionic builds through package.json settings.

LANGUAGE: javascript
CODE:
"config": {
    "ionic_generate_source_map": "true"
}

----------------------------------------

TITLE: Implementing Custom Trace Sampler in Kotlin
DESCRIPTION: Kotlin implementation of TracesSamplerCallback that provides custom sampling logic for Sentry transactions. Functionally equivalent to the Java version but with Kotlin-specific syntax.

LANGUAGE: kotlin
CODE:
import io.sentry.SamplingContext
import io.sentry.SentryOptions.TracesSamplerCallback
import org.springframework.stereotype.Component

@Component
class CustomTracesSamplerCallback : TracesSamplerCallback {

  override fun sample(context: SamplingContext): Double? {
    // If this is the continuation of a trace, just use that decision (rate controlled by the caller).
    val parentSampled = context.transactionContext.parentSampled
    if (parentSampled != null) {
      return if (parentSampled) 1.0 else 0.0
    }
    val ctx = context.customSamplingContext
    if (ctx != null) {
      if (/* make a decision based on `samplingContext` */) {
        // Drop this transaction, by setting its sample rate to 0%
        return 0.0
      } else if (/* ... */) {
        // Override sample rate for other cases (replaces `options.TracesSampleRate`)
        return 0.1
      }
      // Can return `null` to fallback to the rate configured by `options.tracesSampleRate`
      return null
    } else {
      return null
    }
  }
}

----------------------------------------

TITLE: Installing Sentry SDK with pip
DESCRIPTION: Command to install or upgrade the Sentry SDK package using pip package manager.

LANGUAGE: bash
CODE:
pip install --upgrade "sentry-sdk"

----------------------------------------

TITLE: Testing Sentry Integration with Error Button
DESCRIPTION: Example React component that generates an intentional error to verify Sentry integration.

LANGUAGE: javascript
CODE:
<button
  type="button"
  onClick={() => {
    throw new Error("Sentry Test Error");
  }}
>
  Break the world
</button>

----------------------------------------

TITLE: Server Entry File Structure with Dynamic Import
DESCRIPTION: Example of how the server entry file is structured after implementing dynamic import, showing Sentry initialization before dynamic import of the Nitro runtime.

LANGUAGE: javascript
CODE:
// Note: The file may have some imports and code, related to debug IDs
Sentry.init({
  dsn: "..."
});

import('./chunks/nitro/nitro.mjs').then(function (n) { return n.r; });

----------------------------------------

TITLE: Enhancing Existing Spans with Attributes in JavaScript
DESCRIPTION: This snippet demonstrates how to enhance existing spans with additional attributes using Sentry's JavaScript SDK. It adds user context and multiple metrics to an active span.

LANGUAGE: javascript
CODE:
const span = Sentry.getActiveSpan();
if (span) {
  // User context
  span.setAttribute('user.subscription_tier', 'premium');
  
  // Multiple metrics in a single operation
  span.setAttributes({
    'memory.heap_used': 1024000,
    'processing.total_steps': 5
  });
}

----------------------------------------

TITLE: Initializing Sentry for Cloudflare in JavaScript
DESCRIPTION: This snippet initializes Sentry for error tracking in a Cloudflare environment. It imports the Sentry module, sets the DSN, and adds the context lines integration for enhanced error reporting.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/cloudflare";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.contextLinesIntegration()],
});

----------------------------------------

TITLE: Initializing Sentry with Hapi Server using ESM
DESCRIPTION: Sets up a Hapi server with Sentry error handling integration using ES Modules import syntax. Creates a server on localhost:3030 and configures Sentry's error handler before starting the server.

LANGUAGE: javascript
CODE:
// Import this first!
import "./instrument";

// Now import other modules
import * as Sentry from "@sentry/node";
import Hapi from "@hapi/hapi";

const init = async () => {
  const server = Hapi.server({
    port: 3030,
    host: 'localhost',
  });

  // All your routes etc.

  await Sentry.setupHapiErrorHandler(server);

  await server.start();
};

init();

----------------------------------------

TITLE: Disabling Text and Image Masking in Sentry Flutter SDK
DESCRIPTION: This code snippet shows how to disable masking for all text and images in the Sentry Flutter SDK. This should not be used in applications with sensitive data.

LANGUAGE: dart
CODE:
  options.experimental.privacy.maskAllText = false;
  options.experimental.privacy.maskAllImages = false;

----------------------------------------

TITLE: Defining finishTransactionWithContextFromOtelData Function in TypeScript
DESCRIPTION: This function adds OpenTelemetry context to a Sentry transaction before finishing it.

LANGUAGE: typescript
CODE:
function finishTransactionWithContextFromOtelData(
  transaction: Transaction,
  otelSpan: OtelSpan
): void {
  transaction.setContext('otel', {
    attributes: otelSpan.attributes,
    resource: otelSpan.resource.attributes,
  });

  transaction.finish(convertOtelTimeToSeconds(otelSpan.endTime));
}

----------------------------------------

TITLE: Installing Sentry Vite Plugin
DESCRIPTION: Commands for installing the Sentry Vite plugin using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @sentry/vite-plugin --save-dev

LANGUAGE: bash
CODE:
yarn add @sentry/vite-plugin --dev

LANGUAGE: bash
CODE:
pnpm add @sentry/vite-plugin --save-dev

----------------------------------------

TITLE: Silo Database Clone Command
DESCRIPTION: Command for copying existing application data into split databases for siloed environments

LANGUAGE: bash
CODE:
bin/split-silo-database --database sentry --reset

----------------------------------------

TITLE: Using Auth Tokens in Sentry API Calls (Bash)
DESCRIPTION: This snippet demonstrates how to use authentication tokens in a curl command to make API calls to Sentry. It shows the format for including the token in the Authorization header.

LANGUAGE: bash
CODE:
curl -H 'Authorization: Bearer {TOKEN}' https://sentry.io/api/0/organizations/{organization_slug}/projects/

----------------------------------------

TITLE: Configuring Sentry DSN with Transport Options in Python
DESCRIPTION: Shows how to configure the Sentry DSN with transport options. This example increases the timeout to 5 seconds and disables SSL verification.

LANGUAGE: python
CODE:
SENTRY_DSN = '___DSN___?timeout=5&verify_ssl=0'

----------------------------------------

TITLE: Instrumenting Client-Side File Upload in JavaScript
DESCRIPTION: Tracks the file upload process on the client side, including file details, upload progress, and error handling. Uses Sentry's startSpan and span attributes to capture detailed metrics throughout the upload lifecycle.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Client File Upload',
    op: 'file.upload.client',
    attributes: {
      // Static details available at the start
      'file.size_bytes': 15728640,  // 15MB
      'file.type': 'image/jpeg',
      'file.name': 'user-profile.jpg',
      'client.compression_applied': true
    }
  },
  async () => {
    // Get the current active span to update during upload
    const span = Sentry.getActiveSpan();
    
    try {
      // Begin upload process
      const uploader = new FileUploader(file);
      
      // Update progress as upload proceeds
      uploader.on('progress', (progressEvent) => {
        if (span) {
          span.setAttribute('upload.percent_complete', progressEvent.percent);
          span.setAttribute('upload.bytes_transferred', progressEvent.loaded);
        }
      });
      
      uploader.on('retry', (retryCount) => {
        if (span) {
          span.setAttribute('upload.retry_count', retryCount);
        }
      });
      
      const result = await uploader.start();
      
      // Set final attributes after completion
      if (span) {
        span.setAttribute('upload.total_time_ms', result.totalTime);
        span.setAttribute('upload.success', true);
        span.setAttribute('upload.server_file_id', result.fileId);
      }
      
      return result;
    } catch (error) {
      // Record failure information
      if (span) {
        span.setAttribute('upload.success', false);
        span.setAttribute('upload.error_type', error.name);
        span.setAttribute('upload.error_message', error.message);
        span.setStatus({ code: 'ERROR' });
      }
      throw error;
    }
  }
);

----------------------------------------

TITLE: Backend Error Console Output
DESCRIPTION: Console output showing the error message logged by the Express server when the debug route is triggered.

LANGUAGE: bash
CODE:
Sentry Error thrown!

----------------------------------------

TITLE: Installing @sentry/astro with npm
DESCRIPTION: Installs the Sentry SDK for Astro projects using npm package manager with the --save flag to add it to package.json dependencies.

LANGUAGE: bash
CODE:
npm install @sentry/astro --save

----------------------------------------

TITLE: Disabling Source Context in Sentry SDK (Ruby)
DESCRIPTION: This code snippet demonstrates how to disable the collection of source context in the Sentry SDK. Setting 'context_lines' to nil prevents Sentry from sending a snapshot of the source code surrounding the line where an error originates.

LANGUAGE: ruby
CODE:
Sentry.init do |config|
  config.context_lines = nil
end

----------------------------------------

TITLE: Stack Path Matcher Examples
DESCRIPTION: Demonstrates path matching rules for different file patterns and directories.

LANGUAGE: bash
CODE:
# match on all files under `project` with a `.c` extension
stack.abs_path:**/project/**.c +app

# matches on vendor/foo without sub folders
stack.abs_path:**/vendor/foo/*.c -app

# matches on `foo.gen.c` as well as `foo/bar.gen.c`.
stack.abs_path:**/*.gen.c -group

----------------------------------------

TITLE: Enabling Scope Synchronization in Android Manifest for Sentry SDK
DESCRIPTION: This XML configuration enables scope synchronization between Java and native layers in the Sentry Android SDK. It allows context data set in Java to be received during native crashes. This feature requires version 3.0.0 or higher of the SDK.

LANGUAGE: xml
CODE:
<application>
    <meta-data android:name="io.sentry.ndk.scope-sync.enable" android:value="true" />
</application>

----------------------------------------

TITLE: Starting Development Servers
DESCRIPTION: Commands to start development servers for either user documentation or developer documentation using Yarn.

LANGUAGE: bash
CODE:
# Start dev server for user docs
yarn dev

# Start dev server for developer docs
yarn dev:developer-docs

----------------------------------------

TITLE: Starting Development Servers
DESCRIPTION: Commands to start development servers for either user documentation or developer documentation using Yarn.

LANGUAGE: bash
CODE:
# Start dev server for user docs
yarn dev

# Start dev server for developer docs
yarn dev:developer-docs

----------------------------------------

TITLE: Defining updateSpanWithOtelData and updateTransactionWithOtelData Functions in TypeScript
DESCRIPTION: These functions update Sentry spans and transactions with data from OpenTelemetry spans, including status, attributes, and operation information.

LANGUAGE: typescript
CODE:
function updateSpanWithOtelData(sentrySpan: SentrySpan, otelSpan: OtelSpan): void {
  const {attributes, kind} = otelSpan;

  sentrySpan.setStatus(mapOtelStatus(otelSpan));
  sentrySpan.setData('otel.kind', kind.valueOf());

  Object.keys(attributes).forEach(prop => {
    const value = attributes[prop];
    sentrySpan.setData(prop, value);
  });

  const {op, description} = parseSpanDescription(otelSpan);
  sentrySpan.op = op;
  sentrySpan.description = description;
}

function updateTransactionWithOtelData(
  transaction: Transaction,
  otelSpan: OtelSpan
): void {
  transaction.setStatus(mapOtelStatus(otelSpan));

  const {op, description} = parseSpanDescription(otelSpan);
  transaction.op = op;
  transaction.name = description;
}

----------------------------------------

TITLE: Feature Flag Component Usage in React
DESCRIPTION: Example of using the Feature component in React to conditionally render components based on feature flags.

LANGUAGE: jsx
CODE:
import Feature from 'sentry/components/acl/feature';

const toRender = (
  <Feature features={['test-feature']}>
    <MyComponentToFlag />
  </Feature>
);

----------------------------------------

TITLE: Configuring Sentry Report Dialog with Amplitude Event Tracking in HTML/JavaScript
DESCRIPTION: This snippet demonstrates how to set up Sentry's error reporting dialog and integrate it with Amplitude for event tracking. The onLoad callback is used to log an event in Amplitude when the report dialog is opened.

LANGUAGE: html
CODE:
<script>
  Sentry.showReportDialog({
    // ...
    onLoad() {
      // Log an event to amplitude when the report dialog opens
      amplitude.logEvent("report_dialog_seen");
    },
  });
</script>

----------------------------------------

TITLE: Aggressive Error Grouping for Generic Errors
DESCRIPTION: Illustrates how to completely override Sentry's default grouping by omitting the default fingerprint, useful for grouping generic errors like database connection issues.



----------------------------------------

TITLE: Configuring Redirect in redirects.js for Sentry Docs
DESCRIPTION: This snippet shows how to set up a redirect with a path pattern in the redirects.js file. It redirects '/cli/:path*' to '/product/cli/:path*', allowing for dynamic path segments.

LANGUAGE: json
CODE:
"redirects": [
    {
      "source": "/cli/:path*",
      "destination": "/product/cli/:path*",
    },
 ]

----------------------------------------

TITLE: Generating RSA Key Pair for Jira Server Integration
DESCRIPTION: These commands generate the necessary RSA public/private key pair for setting up the Jira Server integration with Sentry. The keys are used for authentication between Sentry and Jira Server.

LANGUAGE: bash
CODE:
openssl genrsa -out jira_privatekey.pem 1024
openssl req -newkey rsa:1024 -x509 -key jira_privatekey.pem -out jira_publickey.cer -days 365
openssl pkcs8 -topk8 -nocrypt -in jira_privatekey.pem -out jira_privatekey.pcks8
openssl x509 -pubkey -noout -in jira_publickey.cer  > jira_publickey.pem

----------------------------------------

TITLE: Using Negroni's PanicHandlerFunc
DESCRIPTION: Simple implementation using Negroni's built-in panic handler with Sentry integration.

LANGUAGE: go
CODE:
app := negroni.New()

recovery := negroni.NewRecovery()
recovery.PanicHandlerFunc = sentrynegroni.PanicHandlerFunc

app.Use(recovery)

mux := http.NewServeMux()
mux.HandleFunc("/", func(w http.ResponseWriter, req *http.Request) {
	panic("y tho")
})

app.UseHandler(mux)

http.ListenAndServe(":3000", app)

----------------------------------------

TITLE: Installing Sentry Google Cloud Serverless SDK without Profiling
DESCRIPTION: Commands to install the @sentry/google-cloud-serverless package using npm, yarn, or pnpm without profiling support.

LANGUAGE: bash
CODE:
npm install @sentry/google-cloud-serverless --save

LANGUAGE: bash
CODE:
yarn add @sentry/google-cloud-serverless

LANGUAGE: bash
CODE:
pnpm add @sentry/google-cloud-serverless

----------------------------------------

TITLE: Configuring CORS Headers for Sentry
DESCRIPTION: Example of HTTP response header configuration to allow Sentry tracing headers across different domains. The configuration enables cross-origin requests by allowing the sentry-trace and baggage headers.

LANGUAGE: http
CODE:
Access-Control-Allow-Headers: sentry-trace, baggage

----------------------------------------

TITLE: Configuring HTTP Client Factory for Sentry Integration in ASP.NET Core
DESCRIPTION: This snippet shows how to configure the HTTP client factory in ASP.NET Core, which is required for Sentry's HTTP client integration. This integration automatically injects Sentry's trace header and tracks outgoing HTTP requests.

LANGUAGE: csharp
CODE:
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.DependencyInjection;

public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        /* ... */

        services.AddRouting();

        // This is required for HTTP client integration
        services.AddHttpClient();
    }
}

----------------------------------------

TITLE: Span Data Structure in Transaction Payload
DESCRIPTION: Demonstrates the structure of span data that needs to be updated in transaction payloads to include thread and profiler information.

LANGUAGE: json
CODE:
{
  "thread.id": "thread id",
	"thread.name": "thread name",
	"profiler_id": "42928c7ee9174231956f077581145489"
}

----------------------------------------

TITLE: Mach-O Debug Image Example in JSON
DESCRIPTION: Example showing the structure of a Mach-O debug image used on Apple platforms, including memory addresses, debug identifiers and file paths.

LANGUAGE: json
CODE:
{
  "type": "macho",
  "debug_id": "84a04d24-0e60-3810-a8c0-90a65e2df61a",
  "debug_file": "libDiagnosticMessagesClient.dylib",
  "code_file": "/usr/lib/libDiagnosticMessagesClient.dylib",
  "image_addr": "0x7fffe668e000",
  "image_size": 8192,
  "image_vmaddr": "0x40000",
  "arch": "x86_64"
}

----------------------------------------

TITLE: Using Sentry Hub in FastHTTP Middleware and Handlers in Go
DESCRIPTION: Demonstrates how to access and use the Sentry Hub within FastHTTP middleware and request handlers for custom error tracking and context enhancement.

LANGUAGE: go
CODE:
func enhanceSentryEvent(handler fasthttp.RequestHandler) fasthttp.RequestHandler {
	return func(ctx *fasthttp.RequestCtx) {
		if hub := sentryfasthttp.GetHubFromContext(ctx); hub != nil {
			hub.Scope().SetTag("someRandomTag", "maybeYouNeedIt")
		}
		handler(ctx)
	}
}

// Later in the code
sentryHandler := sentryfasthttp.New(sentryfasthttp.Options{
	Repanic: true,
	WaitForDelivery: true,
})

defaultHandler := func(ctx *fasthttp.RequestCtx) {
	if hub := sentryfasthttp.GetHubFromContext(ctx); hub != nil {
		hub.WithScope(func(scope *sentry.Scope) {
			scope.SetExtra("unwantedQuery", "someQueryDataMaybe")
			hub.CaptureMessage("User provided unwanted query string, but we recovered just fine")
		})
	}
	ctx.SetStatusCode(fasthttp.StatusOK)
}

fooHandler := enhanceSentryEvent(func(ctx *fasthttp.RequestCtx) {
	panic("y tho")
})

fastHTTPHandler := func(ctx *fasthttp.RequestCtx) {
	switch string(ctx.Path()) {
	case "/foo":
		fooHandler(ctx)
	default:
		defaultHandler(ctx)
	}
}

fmt.Println("Listening and serving HTTP on :3000")

if err := fasthttp.ListenAndServe(":3000", sentryHandler.Handle(fastHTTPHandler)); err != nil {
	panic(err)
}

----------------------------------------

TITLE: Disabling Sentry Distributed Tracing
DESCRIPTION: Configuration to completely disable Sentry's distributed tracing functionality by setting empty trace propagation targets.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Overwrite the defaults to ensure no trace headers are sent
  tracePropagationTargets: [],
});

----------------------------------------

TITLE: Configuring Sentry Android Gradle Plugin in Kotlin
DESCRIPTION: This snippet demonstrates how to add the Sentry Android Gradle plugin to an Android application's build.gradle.kts file. It also shows how to prevent Sentry dependencies from being included in the Android app through the Android Gradle Plugin.

LANGUAGE: kotlin
CODE:
plugins {
    id("com.android.application")
    id("io.sentry.android.gradle") version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

// Prevent Sentry dependencies from being included in the Android app through the AGP.
sentry {
  autoInstallation {
    enabled.set(false)
  }
}

----------------------------------------

TITLE: Adding PagerDuty App ID to Sentry Configuration in YAML
DESCRIPTION: This snippet shows how to add the PagerDuty App ID to the Sentry configuration file. The App ID is obtained from the PagerDuty app registration page and should be inserted into the config.yml file of the Sentry instance.

LANGUAGE: yaml
CODE:
pagerduty.app-id: 'PV5SD0T'

----------------------------------------

TITLE: Throwing Test Error for Sentry in Express.js Route
DESCRIPTION: This snippet defines an Express.js route that throws a custom error. It's designed to test Sentry error tracking integration by generating a deliberate error when the '/debug-sentry' endpoint is accessed.

LANGUAGE: javascript
CODE:
app.get("/debug-sentry", function mainHandler(req, res) {
  throw new Error("My first Sentry error!");
});

----------------------------------------

TITLE: Recording Breadcrumb with Deferred Processing in Python
DESCRIPTION: Shows how to record a breadcrumb with deferred processing using a processor callback function to compute expensive data only when needed.

LANGUAGE: python
CODE:
from raven.breadcrumbs import record

def process_crumb(data):
    data['data'] = compute_expensive_data()

record(message='This is an important message',
       category='my_module', level='warning',
       processor=process_crumb)

----------------------------------------

TITLE: Installing Sentry.AspNetCore with Package Manager
DESCRIPTION: This command installs the Sentry.AspNetCore NuGet package using the Package Manager Console in Visual Studio.

LANGUAGE: shell
CODE:
Install-Package Sentry.AspNetCore

----------------------------------------

TITLE: Optimized Background JSON Decoding - Android Kotlin
DESCRIPTION: Improved implementation that moves JSON decoding to a background coroutine using Dispatchers.IO, maintaining UI responsiveness.

LANGUAGE: kotlin
CODE:
fun updatePersonView(json: String) {
	lifecycleScope.launch(Dispatchers.IO) {
	  val person = Gson().fromJson(json, Person::class.java)

    withContext(Dispatchers.Main) {
      personView.person = person
    }
  }
}

----------------------------------------

TITLE: WASM Debug Image Example in JSON
DESCRIPTION: Example showing the structure of a WebAssembly debug image including debug identifiers and file references.

LANGUAGE: json
CODE:
{
  "type": "wasm",
  "debug_id": "84a04d24-0e60-3810-a8c0-90a65e2df61a",
  "debug_file": "sample.wasm"
}

----------------------------------------

TITLE: Integrating Sentry Crash-Report Modal in JSX
DESCRIPTION: This code snippet demonstrates how to integrate the Sentry Crash-Report modal into a React application. It shows the use of the Sentry.showReportDialog() function to display the feedback form when an error occurs.

LANGUAGE: jsx
CODE:
import * as Sentry from "@sentry/browser";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
});

const App = () => {
  return (
    <button
      onClick={() => {
        try {
          throw new Error("Oops, something went wrong");
        } catch (error) {
          Sentry.captureException(error);
          Sentry.showReportDialog({ eventId: error.eventId });
        }
      }}
    >
      Break the world
    </button>
  );
};

----------------------------------------

TITLE: Verifying Sentry Logcat Integration
DESCRIPTION: Example code demonstrating how to test the Sentry Logcat integration by capturing an intentional error and log message.

LANGUAGE: kotlin
CODE:
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import io.sentry.Sentry
import android.util.Log

class MyActivity : AppCompatActivity() {
  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    Log.w("MyTag", "Warning message.")

    Sentry.captureException(Exception("My Exception"))
  }
}

LANGUAGE: java
CODE:
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import java.lang.Exception;
import io.sentry.Sentry;
import android.util.Log;

public class MyActivity extends AppCompatActivity {
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    Log.w("MyTag", "Warning message.");

    Sentry.captureException(new Exception("My Exception"));
  }
}

----------------------------------------

TITLE: Configuring Rule Aliasing in Sentry (JSON)
DESCRIPTION: Demonstrates how to alias one rule to another using the 'alias' type. This example aliases the IP address rule, applying a remove redaction method.

LANGUAGE: json
CODE:
{
  "rules": {
    "remove_ips": {
      "type": "multiple",
      "rule": "@ip",
      "hide_rule": false,
      "redaction": {
        "method": "remove"
      }
    }
  },
  "applications": {
    "$string": ["remove_ips"]
  }
}

----------------------------------------

TITLE: Initializing Sentry Instrumentation in ESM
DESCRIPTION: This snippet demonstrates how to import the Sentry instrumentation module before any other modules in an ES Modules environment. It also shows that modules like 'http' should be imported after Sentry initialization for proper instrumentation.

LANGUAGE: javascript
CODE:
// Ensure to import this before importing any other modules!
import './instrument.js'

// http and other libraries are only instrumented
// if imported _after_ Sentry has been initialized
import http from "http";

----------------------------------------

TITLE: Testing Sentry Connection
DESCRIPTION: Command line example for testing the connection to Sentry servers using the provided helper script.

LANGUAGE: bash
CODE:
bin/sentry test ___PUBLIC_DSN___
Client configuration:
-> server: [___API_URL___]
-> project: ___PROJECT_ID___
-> public_key: ___PUBLIC_KEY___

Sending a test event:
-> event ID: f1765c9aed4f4ceebe5a93df9eb2d34f

Done!

----------------------------------------

TITLE: Verifying Sentry Integration in Godot Engine
DESCRIPTION: Test script for verifying Sentry integration by sending a test message. The script should be attached to a Node in a test scene to confirm proper SDK setup and message capturing functionality.



----------------------------------------

TITLE: Initializing Sentry Client with Custom Stack Function in CoffeeScript
DESCRIPTION: This snippet demonstrates how to initialize the Sentry client with a custom stack function to avoid conflicts with CoffeeScript's Error.prepareStackTrace. It allows users to pass their own stackFunction in the options when creating a new raven.Client instance.

LANGUAGE: coffeescript
CODE:
client = new raven.Client('___PUBLIC_DSN___', {
    stackFunction: {{ Your stack function }}
});

----------------------------------------

TITLE: Configuring Sentry User Scope in Java
DESCRIPTION: Demonstrates how to set up user identification in Sentry using Java. Creates a new User object and sets either the user ID or username within the Sentry scope configuration.

LANGUAGE: java
CODE:
import io.sentry.Sentry;
import io.sentry.protocol.User;

Sentry.configureScope(scope -> {
  User user = new User();
  // User Id:
  user.setId(clientUser.getId());
  // Or Username:
  user.setUsername(clientUser.getUsername());
  scope.setUser(user);
});

----------------------------------------

TITLE: Executing Regex on Main Thread in Android Kotlin
DESCRIPTION: This code snippet shows a performance issue where a regular expression is executed on the main thread in Android, potentially causing UI responsiveness problems.

LANGUAGE: kotlin
CODE:
fun matchRegex(text: String, regexPattern: String) {
  val matches = text.matches(regexPattern.toRegex())
  if (matches) {
    // Do something
  }
}

----------------------------------------

TITLE: Basic Styled Components Usage in TSX
DESCRIPTION: Demonstrates how to import and use Styled Components with Emotion, including the use of the space function for consistent spacing.

LANGUAGE: tsx
CODE:
import styled from '@emotion/styled';
import {space} from 'sentry/styles/space';

export default ExampleComponent() {
  return (
    <SideBySide>
      <p>a number: <Numeric>1</Numeric></p>
      <p>and another: <Numeric>2</Numeric></p>
    </SideBySide>
  )
}

const Numeric = styled('span')`
  font-variant-numeric: tabular-nums;
`;

const SideBySide = styled('div')`
  display: flex;
  gap: ${space(2)};
  flex-wrap: wrap;
  align-items: flex-start;
`;

----------------------------------------

TITLE: Injecting Tracing Information to Outgoing Requests with Sentry in Java
DESCRIPTION: This snippet shows how to generate and add tracing information to outgoing HTTP requests using Sentry's getTraceparent() and getBaggage() functions. It creates the sentry-trace and baggage headers and adds them to the request headers.

LANGUAGE: java
CODE:
import io.sentry.BaggageHeader;
import io.sentry.Sentry;
import io.sentry.SentryTraceHeader;

final SentryTraceHeader traceparent = Sentry.getTraceparent();
if (traceparent != null) {
    httpHeaders.add(traceparent.getName(), traceparent.getValue());
}
final BaggageHeader baggage = Sentry.getBaggage();
if (baggage != null) {
    httpHeaders.add(baggage.getName(), baggage.getValue());
}

performRequest("https://example.com", httpHeaders);

----------------------------------------

TITLE: Emitting a Distribution Metric in Dart with Sentry
DESCRIPTION: This snippet shows how to emit a distribution metric in Dart using Sentry. It measures the 'image_download_duration' with a value of 150 milliseconds and includes a tag for the image type.

LANGUAGE: dart
CODE:
Sentry.metrics().distribution(
    'image_download_duration', // key
    value: 150,
    unit: DurationSentryMeasurementUnit.milliSecond,
    tags: {'type': 'thumbnail'},
);

----------------------------------------

TITLE: Capturing Exceptions in PowerShell with Sentry
DESCRIPTION: This snippet demonstrates two methods for capturing exceptions in PowerShell using Sentry: piping ErrorRecord to Out-Sentry and using Invoke-WithSentry. These methods are used to explicitly handle exceptions for Sentry capture.

LANGUAGE: powershell
CODE:
- piping the `ErrorRecord` inside a `catch` statement or in a `trap` using `$_ | Out-Sentry`
- using `Invoke-WithSentry { ... }`

----------------------------------------

TITLE: Implementing Custom Sampling in Kotlin (Spring Boot 3)
DESCRIPTION: Kotlin implementation of TracesSamplerCallback for Spring Boot 3 that uses when expression for URL-based sampling rates. Uses jakarta.servlet.http.HttpServletRequest for request handling.

LANGUAGE: kotlin
CODE:
import io.sentry.SamplingContext
import io.sentry.SentryOptions.TracesSamplerCallback
import org.springframework.stereotype.Component
import jakarta.servlet.http.HttpServletRequest

@Component
class CustomTracesSamplerCallback : TracesSamplerCallback {
  override fun sample(context: SamplingContext): Double? {
    val customSamplingContext = context.customSamplingContext
    if (customSamplingContext != null) {
      val request = customSamplingContext["request"] as HttpServletRequest
      return when (request.requestURI) {
        "/payment" -> {
          // These are important - take a big sample
          0.5
        }
        "/search" -> {
          // Search is less important and happen much more frequently - only take 1%
          0.01
        }
        "/health" -> {
          // The health check endpoint is just noise - drop all transactions
          0.0
        }
        else -> {
          // Default sample rate
          0.1
        }
      }
    } else {
      return 0.1
    }
  }
}

----------------------------------------

TITLE: Implementing Custom Sampling in Kotlin (Spring Boot 3)
DESCRIPTION: Kotlin implementation of TracesSamplerCallback for Spring Boot 3 that uses when expression for URL-based sampling rates. Uses jakarta.servlet.http.HttpServletRequest for request handling.

LANGUAGE: kotlin
CODE:
import io.sentry.SamplingContext
import io.sentry.SentryOptions.TracesSamplerCallback
import org.springframework.stereotype.Component
import jakarta.servlet.http.HttpServletRequest

@Component
class CustomTracesSamplerCallback : TracesSamplerCallback {
  override fun sample(context: SamplingContext): Double? {
    val customSamplingContext = context.customSamplingContext
    if (customSamplingContext != null) {
      val request = customSamplingContext["request"] as HttpServletRequest
      return when (request.requestURI) {
        "/payment" -> {
          // These are important - take a big sample
          0.5
        }
        "/search" -> {
          // Search is less important and happen much more frequently - only take 1%
          0.01
        }
        "/health" -> {
          // The health check endpoint is just noise - drop all transactions
          0.0
        }
        else -> {
          // Default sample rate
          0.1
        }
      }
    } else {
      return 0.1
    }
  }
}

----------------------------------------

TITLE: Installing Sentry Google Cloud Functions Package via Package Manager
DESCRIPTION: Command to install the Sentry.Google.Cloud.Functions NuGet package using the Package Manager Console.

LANGUAGE: powershell
CODE:
Install-Package Sentry.Google.Cloud.Functions -Version {{@inject packages.version('sentry.dotnet.google-cloud-function') }}

----------------------------------------

TITLE: Capturing Events in Kotlin
DESCRIPTION: Example of how to capture events using the static Sentry class in the new sentry-java library using Kotlin.

LANGUAGE: kotlin
CODE:
Sentry.capture("Hello, world!")

----------------------------------------

TITLE: Generated URL Structure for Platform Documentation
DESCRIPTION: Demonstrates how platform content URLs are generated, showing inheritance from common directories and guide-specific paths.

LANGUAGE: text
CODE:
/platforms/platformName/
/platforms/platformName/config.yml
/platforms/platformName/child/
/platforms/platformName/childTwo/
/platforms/platformName/aSharedPage/
/platforms/platformName/guides/guideName/
/platforms/platformName/guides/guideName/config.yml
/platforms/platformName/guides/guideName/child/
/platforms/platformName/guides/guideName/uniqueChild/
/platforms/platformName/guides/guideName/childTwo/
/platforms/platformName/guides/guideName/aSharedPage/

----------------------------------------

TITLE: Configuring Sentry TracesSampler in C#
DESCRIPTION: This code configures the TracesSampler for Sentry options. It sets sampling rates based on different conditions: keeping all traces if a parent is sampled, 100% sampling for a specific endpoint, and 50% sampling for everything else.

LANGUAGE: csharp
CODE:
sentryOptions.TracesSampler = context =>
{
    if (context.TransactionContext.IsParentSampled is true)
    {
        return 1.0; // Keep all traces complete
    }

    // the rest of sampling logic, for example:
    if (context.TransactionContext.Name == "important-endpoint")
    {
        return 1.0; // 100% for
    }

    return 0.5; // 50% for everything else

};

----------------------------------------

TITLE: Disabling Electron's Default Error Dialog for Uncaught Exceptions
DESCRIPTION: This code snippet demonstrates how to add a listener to the 'uncaughtException' event to disable Electron's default error dialog. This allows for custom error handling or integration with error tracking services like Sentry.

LANGUAGE: javascript
CODE:
process.on("uncaughtException", () => {});

----------------------------------------

TITLE: Disabling Electron's Default Error Dialog for Uncaught Exceptions
DESCRIPTION: This code snippet demonstrates how to add a listener to the 'uncaughtException' event to disable Electron's default error dialog. This allows for custom error handling or integration with error tracking services like Sentry.

LANGUAGE: javascript
CODE:
process.on("uncaughtException", () => {});

----------------------------------------

TITLE: Creating a Reusable Project Fetching Hook in TypeScript
DESCRIPTION: Demonstrates how to create a reusable hook for fetching projects, including separate functions for creating the query key and the actual hook. It also shows how to handle options and parameters.

LANGUAGE: tsx
CODE:
// useFetchProjects.tsx
type ProjectsResponse = Array<{id: string; name: string}>;
type FetchProjectsParameters = {orgSlug: string};

export function makeFetchProjectsQueryKey({
  orgSlug,
}: FetchProjectsParameters): ApiQueryKey {
  return [`/projects/`, {query: {orgSlug}}];
}

export function useFetchProjects(
  params: FetchProjectsParameters,
  options: Partial<UseApiQueryOptions<ProjectsResponse>> = {}
) {
  return useApiQuery(makeFetchProjectsQueryKey(params), {
    staleTime: 0,
    ...options,
  });
}

// ProjectsPage.tsx
function ProjectsPage({orgSlug}: EventsPageProps) {
  const {isPending, isError, data} = useFetchProjects({orgSlug});
  return (...)
}

// ProjectSubComponent.tsx
function ProjectSubComponent({orgSlug}: EventPaginationProps) {
  const {data} = useFetchProjects({orgSlug});
  return (...)
}

----------------------------------------

TITLE: Kotlin Division Error Logging with Timber
DESCRIPTION: A Kotlin function that performs division with default parameters while logging the operation details and catching arithmetic exceptions using Timber. The logs are automatically forwarded to Sentry for error tracking.

LANGUAGE: kotlin
CODE:
fun division(x: Int = 5, y: Int = 0): Int {
  Timber.i("x = $x, y = $y")

  try {
    return x / y
  } catch (e: ArithmeticException) {
    Timber.e(e, "Division error")
  }
  return 0
}

----------------------------------------

TITLE: Visualizing Sentry's Event Pipeline with Mermaid
DESCRIPTION: This diagram shows the flow of an event through Sentry's system, from the application to Clickhouse storage. It includes components like Relay, Kafka, Celery tasks, and Snuba.

LANGUAGE: mermaid
CODE:
graph TD
  app[Your application] --> |sends crashes| lb{{nginx}}
  lb --> |/api/0/envelope/| relay
  relay --> kafka[(Ingest Kafka)]
  kafka --> ingest-consumer["Sentry ingest consumer"]
  ingest-consumer --> preprocess-event

  subgraph celery["Sentry celery tasks"]
    preprocess-event --> save-event
    preprocess-event --> process-event
    preprocess-event --> symbolicate-event
    symbolicate-event --> process-event
    process-event --> save-event
    save-event --> snuba-kafka[("Snuba Kafka<br>(eventstream)")]
  end

  subgraph snuba["Snuba"]
    snuba-kafka --> snuba-consumer["Snuba consumers"]
    snuba-consumer --> clickhouse[("Clickhouse")]
  end

----------------------------------------

TITLE: React Profiler Implementation Examples
DESCRIPTION: Different methods of implementing the React Profiler for component performance monitoring.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

// withProfiler HOC
const SomeComponent = () => {
  // ...
};

export default Sentry.withProfiler(SomeComponent);

LANGUAGE: javascript
CODE:
// Profiler parent
const SomeComponent = () => {
  return (
    <Sentry.Profiler name="SomeChild">
      <SomeChild />
    </Sentry.Profiler>
  );
};

LANGUAGE: javascript
CODE:
// useProfiler hook
const SomeComponent = () => {
  Sentry.useProfiler("SomeComponent");

  return (
    //...
  )
}

----------------------------------------

TITLE: Initializing Sentry PHP SDK with Options
DESCRIPTION: Shows how to initialize the Sentry SDK using the init() method with configuration parameters. The example demonstrates setting the DSN and max_breadcrumbs options in the configuration array.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'max_breadcrumbs' => 50,
]);

----------------------------------------

TITLE: Initializing Sentry PHP SDK with Options
DESCRIPTION: Shows how to initialize the Sentry SDK using the init() method with configuration parameters. The example demonstrates setting the DSN and max_breadcrumbs options in the configuration array.

LANGUAGE: php
CODE:
\Sentry\init([
    'dsn' => '___PUBLIC_DSN___',
    'max_breadcrumbs' => 50,
]);

----------------------------------------

TITLE: Configuring Sentry DSN in Laravel
DESCRIPTION: Use the artisan command to publish Sentry configuration and set the DSN in the .env file.

LANGUAGE: shell
CODE:
php artisan sentry:publish --dsn=___PUBLIC_DSN___

----------------------------------------

TITLE: Spring Boot 3 Transaction Annotation (Kotlin)
DESCRIPTION: Example of using @SentryTransaction annotation to instrument a scheduled job execution in Spring Boot 3 with Kotlin

LANGUAGE: kotlin
CODE:
import org.springframework.stereotype.Component
import org.springframework.scheduling.annotation.Scheduled
import io.sentry.spring.jakarta.tracing.SentryTransaction

@Component
class ScheduledJob {

  @Scheduled(...)
  @SentryTransaction(operation = "task")
  fun execute() {
    ...
  }
}

----------------------------------------

TITLE: Sentry Integrations Feature Matrix Table
DESCRIPTION: A markdown table displaying all available Sentry Node.js integrations and their supported features, including auto-enablement status, error handling, tracing capabilities, and additional context support.

LANGUAGE: markdown
CODE:
|                                                           | **Auto Enabled** | **Errors** | **Tracing** | **Additional Context** |
| --------------------------------------------------------- | :--------------: | :--------: | :---------: | :--------------------: |
| [`consoleIntegration`](./console)                         |        ✓         |            |             |           ✓            |
| [`contextLinesIntegration`](./contextlines)               |        ✓         |     ✓      |             |                        |

----------------------------------------

TITLE: Wrapping HTTP Requests in a Span with Sentry SDK in Python
DESCRIPTION: This function demonstrates how to instrument HTTP requests using Sentry SDK. It creates a span for each request, sets various data attributes including method, URL, and response details, and finishes the span after the request is completed.

LANGUAGE: python
CODE:
from urllib.parse import urlparse
import requests

def make_request(method, url):
    span = sentry_sdk.start_span(
        op="http.client",
        name="%s %s" % (method, url),
    )

    span.set_data("http.request.method", method)

    parsed_url = urlparse(url)
    span.set_data("url", url)
    span.set_data("server.address", parsed_url.hostname)
    span.set_data("server.port", parsed_url.port)

    response = requests.request(method=method, url=url)

    span.set_data("http.response.status_code", response.status_code)
    span.set_data("http.response_content_length", response.headers["content-length"])

    span.finish()

    return response

----------------------------------------

TITLE: Setting Basic Fingerprint in Sentry SDK
DESCRIPTION: Demonstrates how to set a basic custom fingerprint for an event in Sentry SDK. This overrides the default grouping behavior.

LANGUAGE: javascript
CODE:
Sentry.withScope(function(scope) {
  scope.setFingerprint(['my-view-function']);
  Sentry.captureException(error);
});

LANGUAGE: python
CODE:
with sentry_sdk.push_scope() as scope:
    scope.fingerprint = ['my-view-function']
    sentry_sdk.capture_exception(error)

----------------------------------------

TITLE: Initializing Sentry Session Replay in Capacitor
DESCRIPTION: Demonstrates how to initialize Sentry with Session Replay integration in a Capacitor application. Includes configuration for session sampling rates and privacy-related options like text masking and media blocking.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/capacitor";
import { Replay } from "@sentry/replay";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // This sets the sample rate at 10%. You may want this to be 100% while
  // in development, then sample at a lower rate in production.
  replaysSessionSampleRate: 0.1,

  // If the entire session is not sampled, use the below sample rate to sample
  // sessions when an error occurs.
  replaysOnErrorSampleRate: 1.0,

  integrations: [
    replayIntegration({
      // Additional SDK configuration goes in here, for example:
      maskAllText: true,
      blockAllMedia: true,
    }),
  ],
});

----------------------------------------

TITLE: Configuring Socket Options for Sentry SDK in Python
DESCRIPTION: This code snippet demonstrates how to configure custom socket options for the Sentry SDK in Python. It adds a keep-alive option to the default socket options.

LANGUAGE: python
CODE:
import socket
from urllib3.connection import HTTPConnection

sentry_sdk.init(
    socket_options=HTTPConnection.default_socket_options + [
        (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
    ],
)

----------------------------------------

TITLE: Setting Sentry Scope Extra Data in Java
DESCRIPTION: Configures the Sentry scope to add extra context data using key-value pairs in Java. Uses the configureScope method to access and modify the current scope.

LANGUAGE: java
CODE:
import io.sentry.Sentry;

Sentry.configureScope(scope -> {
  scope.setExtra("key", "value");
});

----------------------------------------

TITLE: Mask Component Nesting Behavior Example
DESCRIPTION: Shows how the Mask component affects all child elements, masking entire subtrees of components.

LANGUAGE: jsx
CODE:
<Sentry.Mask>
  <Text>
    This will be masked
    <Text>
      This will be masked
    </Text>
  </Text>
  <Text>
    This will be masked
  </Text>
</Sentry.Mask>

----------------------------------------

TITLE: Setting Up Code Locations for Metrics in PHP with Sentry
DESCRIPTION: This snippet shows how to configure Sentry to attach code locations to metrics. It demonstrates setting the 'attach_metric_code_locations' option to true during Sentry initialization.

LANGUAGE: php
CODE:
\Sentry\init([
   'dsn' => '___PUBLIC_DSN___',
   'attach_metric_code_locations' => true,
]);

----------------------------------------

TITLE: Configuring Sentry for Hangfire using Builder Pattern in .NET
DESCRIPTION: This code shows how to integrate Sentry with Hangfire using the builder pattern in a .NET application. It adds Sentry to the Hangfire configuration for automatic check-ins.

LANGUAGE: csharp
CODE:
using Hangfire;
using Sentry.Hangfire;

var builder = WebApplication.CreateBuilder(args);
builder.Services.AddHangfire(configuration => configuration
    .UseSentry() // <- Add Sentry to automatically send check-ins
);

----------------------------------------

TITLE: Adding Sentry Log4j 2 Dependency in SBT
DESCRIPTION: This snippet shows how to add the Sentry Log4j 2 dependency to an SBT project for use with Spring Boot.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-log4j2" % "{{@inject packages.version('sentry.java.log4j2', '5.1.1') }}"

----------------------------------------

TITLE: Using Sentry with Reactor in Kotlin
DESCRIPTION: Demonstrate how to use Sentry with Reactor in Kotlin. This example shows how to wrap a Mono, start a transaction, create spans, and capture messages within the Reactor context.

LANGUAGE: kotlin
CODE:
import reactor.core.publisher.Mono
import io.sentry.Sentry
import io.sentry.TransactionOptions

val tx = Sentry.startTransaction("Transaction Mono", "op", TransactionOptions().also { it.isBindToScope = true })
val child = tx.startChild("Outside Mono", "op")
Sentry.captureMessage("Message outside Mono")
child.finish()
val result = SentryReactorUtils.withSentry(
  Mono.just("hello")
    .map { it ->
      val span = Sentry.getCurrentScopes().transaction?.startChild("Inside Mono", "map")
      Sentry.captureMessage("Message inside Mono")
      span?.finish()
      it
    }
).block()
println(result)
tx.finish()

----------------------------------------

TITLE: Running HTTPS Proxy for Development
DESCRIPTION: Command to run a reverse proxy for HTTPS development using Caddy.

LANGUAGE: shell
CODE:
yarn https-proxy

----------------------------------------

TITLE: Kotlin Custom User Provider for Spring Boot 3
DESCRIPTION: Kotlin implementation of SentryUserProvider interface for Spring Boot 3 using Jakarta package to provide custom user information to Sentry

LANGUAGE: kotlin
CODE:
import org.springframework.stereotype.Component
import io.sentry.protocol.User
import io.sentry.spring.jakarta.SentryUserProvider

@Component
class CustomSentryUserProvider : SentryUserProvider {
  override fun provideUser(): User? {
    val user = User()
    // ... set user information
    return user
  }
}

----------------------------------------

TITLE: Comprehensive Sentry Logging Examples in Java
DESCRIPTION: Provides a set of methods demonstrating various Sentry logging techniques in Java, including simple logging, breadcrumbs, extras, and exception handling.

LANGUAGE: java
CODE:
import io.sentry.core.Sentry;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.ThreadContext;

public class MyClass {
  private static final Logger logger = LogManager.getLogger(MyClass.class);

  void logSimpleMessage() {
    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logWithBreadcrumbs() {
    // Record a breadcrumb that will be sent with the next event(s),
    // by default the last 100 breadcrumbs are kept.
    Sentry.addBreadcrumb("User made an action");

    // Log entries below `minimumEventLevel` and above or equal to `minimumBreadcrumbLevel`
    // are recorded as breadcrumbs
    logger.info("User made another action");

    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logWithExtras() {
    // MDC extras
    ThreadContext.put("extra_key", "extra_value");
    // NDC extras are sent under 'log4j2-NDC'
    ThreadContext.push("Extra_details");
    // This sends an event with extra data to Sentry
    logger.error("This is a test");
  }

  void logException() {
    try {
      unsafeMethod();
    } catch (Exception e) {
      // This sends an exception event to Sentry
      logger.error("Exception caught", e);
    }
  }

  void unsafeMethod() {
    throw new UnsupportedOperationException("You shouldn't call this!");
  }
}

----------------------------------------

TITLE: Comprehensive Sentry Logging Examples in Java
DESCRIPTION: Provides a set of methods demonstrating various Sentry logging techniques in Java, including simple logging, breadcrumbs, extras, and exception handling.

LANGUAGE: java
CODE:
import io.sentry.core.Sentry;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.ThreadContext;

public class MyClass {
  private static final Logger logger = LogManager.getLogger(MyClass.class);

  void logSimpleMessage() {
    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logWithBreadcrumbs() {
    // Record a breadcrumb that will be sent with the next event(s),
    // by default the last 100 breadcrumbs are kept.
    Sentry.addBreadcrumb("User made an action");

    // Log entries below `minimumEventLevel` and above or equal to `minimumBreadcrumbLevel`
    // are recorded as breadcrumbs
    logger.info("User made another action");

    // This sends a simple event to Sentry
    logger.error("This is a test");
  }

  void logWithExtras() {
    // MDC extras
    ThreadContext.put("extra_key", "extra_value");
    // NDC extras are sent under 'log4j2-NDC'
    ThreadContext.push("Extra_details");
    // This sends an event with extra data to Sentry
    logger.error("This is a test");
  }

  void logException() {
    try {
      unsafeMethod();
    } catch (Exception e) {
      // This sends an exception event to Sentry
      logger.error("Exception caught", e);
    }
  }

  void unsafeMethod() {
    throw new UnsupportedOperationException("You shouldn't call this!");
  }
}

----------------------------------------

TITLE: Available Sentry Browser Integrations
DESCRIPTION: List of integrations that have been moved from @sentry/integrations to @sentry/browser. All integrations are now implemented as functions rather than classes. The Transaction integration has been removed with no replacement API. Dedupe integration is enabled by default and not pluggable.

LANGUAGE: javascript
CODE:
import { 
  httpClientIntegration,     // formerly HTTPClient
  contextLinesIntegration,   // formerly ContextLines
  reportingObserverIntegration, // formerly ReportingObserver
  captureConsoleIntegration,  // formerly CaptureConsole
  debugIntegration,          // formerly Debug
  extraErrorDataIntegration,  // formerly ExtraErrorData
  rewriteFramesIntegration,   // formerly RewriteFrames
  sessionTimingIntegration,   // formerly SessionTiming
  dedupeIntegration          // formerly Dedupe (enabled by default)
} from '@sentry/browser'

----------------------------------------

TITLE: Setting Anonymized Tags in Sentry with JavaScript
DESCRIPTION: Shows how to set a Sentry tag with anonymized data using a checksum or hash function. This example demonstrates anonymizing a birthday before sending it as a tag to Sentry for privacy protection.

LANGUAGE: javascript
CODE:
Sentry.setTag("birthday", checksumOrHash("08/12/1990"));

----------------------------------------

TITLE: Installing Sentry Packages via Package Manager
DESCRIPTION: Uses the Package Manager Console to install Sentry and Sentry.OpenTelemetry packages in a .NET project. Requires OpenTelemetry package 1.5.0 or higher as a prerequisite.

LANGUAGE: powershell
CODE:
Install-Package Sentry -Version {{@inject packages.version('sentry.dotnet') }}
Install-Package Sentry.OpenTelemetry -Version {{@inject packages.version('sentry.dotnet') }}

----------------------------------------

TITLE: Manually Configuring ApolloClient with Sentry Interceptors in Kotlin
DESCRIPTION: Manually add Sentry interceptors to the ApolloClient.Builder when using a custom NetworkTransport in Kotlin.

LANGUAGE: kotlin
CODE:
import com.apollographql.apollo3.ApolloClient
import io.sentry.apollo3.SentryApollo3HttpInterceptor
import io.sentry.apollo3.SentryApollo3Interceptor
import com.apollographql.apollo3.network.http.HttpNetworkTransport

val apollo = ApolloClient.builder()
    .networkTransport(
        HttpNetworkTransport.Builder()
            .serverUrl("https://apollo-fullstack-tutorial.herokuapp.com/graphql")
            .addInterceptor(SentryApollo3HttpInterceptor())
            .build()
    )
    .addInterceptor(SentryApollo3Interceptor())
    .build()

----------------------------------------

TITLE: Mocking Subscription for Getsentry
DESCRIPTION: Command to mock a subscription in Getsentry for development purposes.

LANGUAGE: shell
CODE:
./bin/mock-subscription

----------------------------------------

TITLE: Rendering Beta Feature Alert in JSX for Sentry
DESCRIPTION: This code snippet renders an Alert component to inform users about a beta feature in Sentry. It explains that the feature is limited release, may contain bugs, and humorously acknowledges the irony of the situation.

LANGUAGE: JSX
CODE:
<Alert>

This feature is in beta and is only available if your organization is participating in its limited release. Features in beta are still in-progress and may have bugs. We recognize the irony.

</Alert>

----------------------------------------

TITLE: Configuring Sentry SDK with Cloud Resource Context
DESCRIPTION: Python code to initialize Sentry SDK with Cloud Resource Context integration, including optional performance monitoring and profiling configuration. Sets up error tracking, tracing, and profiling with respective sample rates.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.cloud_resource_context import CloudResourceContextIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
    integrations=[
        CloudResourceContextIntegration(),
    ],
)

----------------------------------------

TITLE: Configuring Sentry SDK with Cloud Resource Context
DESCRIPTION: Python code to initialize Sentry SDK with Cloud Resource Context integration, including optional performance monitoring and profiling configuration. Sets up error tracking, tracing, and profiling with respective sample rates.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.integrations.cloud_resource_context import CloudResourceContextIntegration

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",
    # Add data like request headers and IP for users, if applicable;
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
    integrations=[
        CloudResourceContextIntegration(),
    ],
)

----------------------------------------

TITLE: Setting Timeout for Vue Component Tracking in Sentry
DESCRIPTION: This snippet illustrates how to configure a timeout for component tracking in Sentry's Vue integration. It sets a 500 millisecond timeout for the root rendering span.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/vue";

Sentry.init({
  integrations: [
    Sentry.vueIntegration({
      tracingOptions: {
        trackComponents: true,
        timeout: 500, // milliseconds
      },
    }),
  ],
});

----------------------------------------

TITLE: Setting Timeout for Vue Component Tracking in Sentry
DESCRIPTION: This snippet illustrates how to configure a timeout for component tracking in Sentry's Vue integration. It sets a 500 millisecond timeout for the root rendering span.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/vue";

Sentry.init({
  integrations: [
    Sentry.vueIntegration({
      tracingOptions: {
        trackComponents: true,
        timeout: 500, // milliseconds
      },
    }),
  ],
});

----------------------------------------

TITLE: Implementing Health Check Monitor in Python for Sentry SDK
DESCRIPTION: This snippet demonstrates the implementation of a health check monitor in Python for the Sentry SDK. It runs asynchronously and periodically checks system health.

LANGUAGE: python
CODE:
# See the Python implementation as a reference:
# https://github.com/getsentry/sentry-python/blob/d9d87998029fb0ef2bfe933cea0b69bfee60ed51/sentry_sdk/monitor.py#L16-L123

----------------------------------------

TITLE: Configuring Apollo Client with Sentry Interceptor
DESCRIPTION: Examples of how to configure Apollo client with SentryApolloInterceptor in both Java and Kotlin.

LANGUAGE: java
CODE:
import com.apollographql.apollo.ApolloClient;
import io.sentry.apollo.SentryApolloInterceptor;

ApolloClient apollo = ApolloClient.builder()
    .serverUrl("https://your-api-host/")
    .addApplicationInterceptor(new SentryApolloInterceptor())
    .build();

LANGUAGE: kotlin
CODE:
import com.apollographql.apollo.ApolloClient
import io.sentry.apollo.SentryApolloInterceptor

val apollo = ApolloClient.builder()
    .serverUrl("https://your-api-host/")
    .addApplicationInterceptor(SentryApolloInterceptor())
    .build()

----------------------------------------

TITLE: Adding Sentry Google Cloud Functions Package Reference to Project File
DESCRIPTION: XML snippet to manually add the Sentry.Google.Cloud.Functions package reference to the project's csproj file.

LANGUAGE: xml
CODE:
<ItemGroup>
    <PackageReference Include="Sentry.Google.Cloud.Functions" Version="{{@inject packages.version('sentry.dotnet.google-cloud-function') }}"/>
  </ItemGroup>

----------------------------------------

TITLE: Running Sentry Development Server
DESCRIPTION: Command to start the Sentry development server with workers enabled.

LANGUAGE: shell
CODE:
sentry devserver --workers

----------------------------------------

TITLE: Configuring Session Replay in AndroidManifest
DESCRIPTION: Setting up Session Replay configuration options in the Android manifest file including sample rates.

LANGUAGE: xml
CODE:
<meta-data android:name="io.sentry.session-replay.on-error-sample-rate" android:value="1.0" />
<meta-data android:name="io.sentry.session-replay.session-sample-rate" android:value="0.1" />

----------------------------------------

TITLE: Initializing Sentry SDK with Default Event Scrubber in Python
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK with the default event scrubber and disable sending default PII. It uses the EventScrubber class to filter sensitive information from event payloads.

LANGUAGE: python
CODE:
import sentry_sdk
from sentry_sdk.scrubber import EventScrubber

sentry_sdk.init(
    # ...
    send_default_pii=False,
    event_scrubber=EventScrubber(),  # this is set by default
)

----------------------------------------

TITLE: Creating Independent Transactions for Async Tasks in Rust with Sentry
DESCRIPTION: Shows how to create a new transaction for a long-running async task that continues from a parent span. Demonstrates proper transaction context creation, scope configuration, and task spawning with Hub binding.

LANGUAGE: rust
CODE:
let parent_span = sentry::configure_scope(|scope| scope.get_span());
// Create a new transaction as an independent continuation
let ctx = sentry::TransactionContext::continue_from_span(
    "A long-running spawned task",
    "spawned_task",
    parent_span,
);

let task = async move {
  let transaction = sentry::start_transaction(ctx);
  // Set the newly created transaction as the *current span*
  sentry::configure_scope(|scope| scope.set_span(Some(transaction.clone().into())));

  // Do the actual computation
  // ...

  // Finish the span and send it to sentry
  transaction.finish();
  // The task gets a
}.bind_hub(Hub::new_from_top(Hub::current()));

task::spawn(task);

----------------------------------------

TITLE: Setting Hashed PII Tag in Kotlin
DESCRIPTION: Kotlin implementation for configuring a Sentry scope to set a tag containing a hashed birthday value. Uses Kotlin's lambda syntax while providing the same PII protection functionality.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.configureScope { scope ->
  scope.setTag("birthday", checksumOrHash("08/12/1990"))
}

----------------------------------------

TITLE: Configuring Sentry Trace Sampling in JavaScript
DESCRIPTION: This code snippet defines the tracesSampler function for Sentry configuration. It first checks if there's a parent sample decision to inherit. If not, it proceeds with additional sampling logic (not shown in this snippet).

LANGUAGE: javascript
CODE:
tracesSampler: samplingContext => {
  // always inherit
  if (samplingContext.parentSampled !== undefined) {
    return samplingContext.parentSampled
  }

  ...
  // rest of sampling logic here
}

----------------------------------------

TITLE: Using Lifecycle Token with Push Scope
DESCRIPTION: Example showing how to use the new lifecycle token with pushScope() in a try-with-resources block

LANGUAGE: java
CODE:
try (final @NotNull ISentryLifecycleToken ignored = Sentry.pushScope()) {
  // this block has its separate current scope
}

----------------------------------------

TITLE: Installing Sentry SDK via Unity Package Manager Git URL
DESCRIPTION: This code snippet provides the Git URL to be used in the Unity Package Manager for installing the Sentry SDK. The URL points to Sentry's SDK repository on GitHub and includes a version tag.

LANGUAGE: plaintext
CODE:
https://github.com/getsentry/unity.git#{{@inject packages.version('sentry.dotnet.unity', '0.0.5') }}

----------------------------------------

TITLE: Adding Sentry to ASP.NET Core 3.0 in F#
DESCRIPTION: This snippet demonstrates how to add Sentry to an ASP.NET Core 3.0 application using F#. It modifies the CreateHostBuilder function to include the UseSentry extension method within the ConfigureWebHostDefaults call.

LANGUAGE: fsharp
CODE:
let CreateHostBuilder args =
    Host.CreateDefaultBuilder(args)
        .ConfigureWebHostDefaults(fun webBuilder ->
            // Add the following line:
            webBuilder.UseSentry("___PUBLIC_DSN___") |> ignore
        )

----------------------------------------

TITLE: Using Sentry with Reactor in Java
DESCRIPTION: Demonstrate how to use Sentry with Reactor in Java. This example shows how to wrap a Mono, start a transaction, create spans, and capture messages within the Reactor context.

LANGUAGE: java
CODE:
import reactor.core.publisher.Mono;
import io.sentry.Sentry;
import io.sentry.ISpan;
import io.sentry.ITransaction;
import io.sentry.TransactionOptions;

TransactionOptions txOptions = new TransactionOptions();
txOptions.setBindToScope(true);
ITransaction tx = Sentry.startTransaction("Transaction", "op", txOptions);
ISpan child = tx.startChild("Outside Mono", "op")
Sentry.captureMessage("Message outside Mono")
child.finish()
String result = SentryReactorUtils.withSentry(
  Mono.just("hello")
    .map({ (it) ->
      ISpan span = Sentry.getCurrentScopes().transaction.startChild("Inside Mono", "map");
      Sentry.captureMessage("Message inside Mono");
      span.finish();
      return it;
    })
).block();
System.out.println(result);
tx.finish();

----------------------------------------

TITLE: Configuring Sentry Integration in Astro Config
DESCRIPTION: Configuration setup for the Sentry integration in the Astro configuration file, including source maps upload options.

LANGUAGE: javascript
CODE:
import { defineConfig } from "astro/config";
import sentry from "@sentry/astro";

export default defineConfig({
  integrations: [
    sentry({
      sourceMapsUploadOptions: {
        project: "___PROJECT_SLUG___",
        authToken: process.env.SENTRY_AUTH_TOKEN,
      },
    }),
  ],
});

----------------------------------------

TITLE: Implementing Model Serializer with DRF
DESCRIPTION: Example of a DRF ModelSerializer implementation that combines model binding with field validation. Shows integration with model classes for automated saving.

LANGUAGE: python
CODE:
from rest_framework import serializers
from sentry.api.serializers.rest_framework import ValidationError

class ExampleSerializer(serializer.ModelSerializer):
    name = serializers.CharField()
    age = serializers.IntegerField(required=False)
    type = serializers.CharField()

    class Meta:
        model = Example

    def validate_type(self, attrs, source):
        type = attrs[source]
        if type not in ['bear', 'rabbit', 'puppy']:
            raise ValidationError('%s is not a valid type' % type)
        return attrs

class ExampleEndpoint(Endpoint):
    def post(self, request):
        serializer = ExampleSerializer(request.DATA)
        if not serializer.is_valid():
            return Response(serializer.errors, status=400)

        example = serializer.save()
        return Response(serialize(example, request.user), status=201)

----------------------------------------

TITLE: Installing Sentry Package with Paket CLI
DESCRIPTION: This snippet illustrates how to add the Sentry package to a project using the Paket CLI. It specifies the package name and version.

LANGUAGE: shell
CODE:
paket add Sentry --version {{@inject packages.version('sentry.dotnet') }}

----------------------------------------

TITLE: Configuring Sentry SDK in Unity
DESCRIPTION: Steps for configuring the Sentry SDK in a Unity project. The specific configuration code is not provided in the given content.



----------------------------------------

TITLE: Setting Web Server Port in Python
DESCRIPTION: Configures the port on which the Sentry webserver should listen.

LANGUAGE: python
CODE:
SENTRY_WEB_PORT = 9000

----------------------------------------

TITLE: Configuring Sentry Transaction Scope in Kotlin
DESCRIPTION: Sets up a Sentry transaction scope with the name 'UserListView' using Kotlin syntax. Uses the configureScope function with a lambda to modify the current scope and set the transaction name.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.configureScope { scope ->
    scope.setTransaction("UserListView"))
}

----------------------------------------

TITLE: Installing Sentry Apollo Integration via Package Managers
DESCRIPTION: Package manager configurations for installing the Sentry Apollo integration using Maven, Gradle, or SBT.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-apollo</artifactId>
    <version>{{@inject packages.version('sentry.java.apollo', '5.2.0') }}</version>
</dependency>

LANGUAGE: groovy
CODE:
implementation 'io.sentry:sentry-apollo:{{@inject packages.version('sentry.java.apollo', '5.2.0') }}'

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-apollo" % "{{@inject packages.version('sentry.java.apollo', '5.2.0') }}"

----------------------------------------

TITLE: Configuring Static Mode in Relay YAML
DESCRIPTION: Configures Relay to operate in static mode where projects must be manually configured. Only processes events for explicitly configured projects and rejects all others.

LANGUAGE: yaml
CODE:
relay:
  mode: static

----------------------------------------

TITLE: Setting Sentry Auth Token Environment Variable
DESCRIPTION: Sets up the authentication token for Sentry API access as an environment variable.

LANGUAGE: bash
CODE:
SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Configuring Access-Control-Allow-Headers for Sentry in Backend CORS
DESCRIPTION: This snippet shows an example of how to configure the Access-Control-Allow-Headers in the backend CORS settings to include Sentry-specific headers. It allows the 'sentry-trace' and 'baggage' headers, which are necessary for Sentry to function properly across different domains.

LANGUAGE: http
CODE:
"Access-Control-Allow-Headers: sentry-trace, baggage"

----------------------------------------

TITLE: Imperatively Setting Styles for Frequent Updates
DESCRIPTION: Demonstrates how to use component refs to imperatively set styles for frequently changing values, avoiding unnecessary React re-renders.

LANGUAGE: tsx
CODE:
import styled from '@emotion/styled';
import {useRef} from 'react';

const Area = styled('div')`
  width: 500px;
  height: 500px;
  position: relative;
`;
const MovingCircle = styled('div')`
  position: absolute;
  width: 50px;
  height: 50px;
  background: black;
  border-radius: 50%;
`;

const ref = useRef<HTMLDivElement>(null);

return (
  <Area
    onMouseMove={event => {
      if (!ref.current) {
        return;
      }
      // ✅ Imperatively set values that change frequently to avoid react re-renders
      ref.current.style.top = event.clientY + 'px';
      ref.current.style.left = event.clientX + 'px';
    }}
  >
    <MovingCircle ref={ref} />
  </Area>
);

----------------------------------------

TITLE: Source Map Debug ID Example
DESCRIPTION: Example showing how Debug ID appears in source map files after injection.

LANGUAGE: json
CODE:
{
    ...
    "debug_id":"<debug_id>",
    ...
}

----------------------------------------

TITLE: Importing Sentry SDK for React
DESCRIPTION: This code imports all exports from the @sentry/react package as a namespace called Sentry. This import allows the application to use Sentry's error tracking and monitoring features in a React environment.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react";

----------------------------------------

TITLE: Implementing Sentry Trace Sampler in Objective-C
DESCRIPTION: Configures a trace sampler callback function in Objective-C that determines whether a transaction should be sampled based on parent sampling decisions. The callback handles parent sampling state and allows for custom sampling logic implementation.

LANGUAGE: objective-c
CODE:
@import Sentry;

SentryTracesSamplerCallback callback = ^(SentrySamplingContext *context) {
  if (context.transactionContext.parentSampled != kSentrySampleDecisionUndecided) {
    return context.transactionContext.parentSampled == kSentrySampleDecisionYes ? @1.0 : @0.0;
  }
  // the rest of sampling logic
};

----------------------------------------

TITLE: Rendering PageGrid Component in React
DESCRIPTION: A simple React component inclusion for rendering the PageGrid layout component in the documentation.

LANGUAGE: jsx
CODE:
<PageGrid />

----------------------------------------

TITLE: Setting Uniform Sample Rate in Sentry
DESCRIPTION: Demonstrates configuration of a uniform sample rate for transactions across the application.

LANGUAGE: javascript
CODE:
<PlatformContent includePath="performance/uniform-sample-rate" />

----------------------------------------

TITLE: Initializing Sentry Project Environment with yarn
DESCRIPTION: Sets up the initial project environment by copying the example environment file, installing dependencies, and starting development servers for user and developer documentation.

LANGUAGE: bash
CODE:
cp .env.example .env.development
yarn

# Start dev server for user docs
yarn dev

# Start dev server for developer docs
yarn dev:developer-docs

----------------------------------------

TITLE: Using Case-Insensitive Regex for Text Search in React Testing Library
DESCRIPTION: Shows how to use case-insensitive regex when searching by text, making tests more resilient to minor text changes.

LANGUAGE: javascript
CODE:
import {render, screen} from "sentry-test/reactTestingLibrary";

// ❌
render(<Example />);
expect(screen.getByText("Hello World")).toBeInTheDocument();

// ✅
render(<Example />);
expect(screen.getByText(/hello world/i)).toBeInTheDocument();

----------------------------------------

TITLE: Running Database Migrations for Sentry Project
DESCRIPTION: Executes database migrations to set up or clean the database schema. This command should be run for initial setup or when resetting the database.

LANGUAGE: bash
CODE:
yarn migrate:dev

----------------------------------------

TITLE: Integrating Sentry with Connect in Node.js
DESCRIPTION: This snippet shows how to set up Sentry error tracking in a Connect application. It includes configuring Raven (Sentry SDK), setting up request and error handlers, and defining a custom error handler.

LANGUAGE: javascript
CODE:
var connect = require("connect");
var Raven = require("raven");

// Must configure Raven before doing anything else with it
Raven.config("___PUBLIC_DSN___").install();

function mainHandler(req, res) {
  throw new Error("Broke!");
}

function onError(err, req, res, next) {
  // The ID of error events captured by the Sentry error middleware is attached to `res.sentry`.
  // You can use this ID for debugging, or to correlate requests with errors in Sentry.
  res.statusCode = 500;
  res.end(res.sentry + "\n");
}

connect(
  // The request handler be the first item
  Raven.requestHandler(),

  connect.bodyParser(),
  connect.cookieParser(),
  mainHandler,

  // The Sentry error handler middleware must be registered before any other error middleware
  Raven.errorHandler(),

  // Optional fallthrough error handler
  onError
).listen(3000);

----------------------------------------

TITLE: Installing Sentry Flutter SDK Dependencies
DESCRIPTION: Adds the Sentry Flutter SDK package dependency to the pubspec.yaml file.

LANGUAGE: yaml
CODE:
dependencies:
  sentry_flutter: ^{{@inject packages.version('sentry.dart.flutter') }}

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Installing Sentry SDK with Composer for PHP
DESCRIPTION: This command uses Composer to install the Sentry SDK package for PHP projects. It adds the sentry/sentry package as a dependency to your project.

LANGUAGE: bash
CODE:
composer require sentry/sentry

----------------------------------------

TITLE: Initializing Sentry SDK with Feedback Integration in JavaScript for Ember
DESCRIPTION: This code initializes the Sentry SDK for an Ember application. It sets up the DSN and includes a custom feedback integration with additional configuration options like colorScheme.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/ember";

Sentry.init({
  dsn: "___PUBLIC_DSN___",

  integrations: [
    Sentry.feedbackIntegration({
      // Additional SDK configuration goes in here, for example:
      colorScheme: "system",
    }),
  ],
});

----------------------------------------

TITLE: Configuring CSP for Sentry Client-side Fetch Instrumentation
DESCRIPTION: Adds a Content Security Policy exception for the Sentry fetch proxy script in SvelteKit configuration.

LANGUAGE: javascript
CODE:
const config = {
  kit: {
    csp: {
      directives: {
        "script-src": ["sha256-y2WkUILyE4eycy7x+pC0z99aZjTZlWfVwgUAfNc1sY8="], // + rest of your values
      },
    },
  },
};

----------------------------------------

TITLE: Managing Multiple Sentry Clients with Custom Integrations
DESCRIPTION: This code snippet illustrates how to set up multiple Sentry clients with custom integrations. It demonstrates creating two separate clients with their own scopes and a custom 'Happy' integration.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/browser";

// Very happy integration that'll prepend and append very happy stick figure to the message
function happyIntegration() {
  return {
    name: "Happy",
    setupOnce() {
      Sentry.addEventProcessor((event) => {
        const self = Sentry.getClient().getIntegration(HappyIntegration);
        // Run the integration ONLY if it was installed on the current client
        if (self) {
          event.message = `\\o/ ${event.message} \\o/`;
        }
        return event;
      });
    },
  };
}

// filter integrations that use the global variable
const integrations = Sentry.getDefaultIntegrations({}).filter(
  (defaultIntegration) => {
    return !["BrowserApiErrors", "Breadcrumbs", "GlobalHandlers"].includes(
      defaultIntegration.name
    );
  }
);

const client1 = new Sentry.BrowserClient({
  dsn: "___PUBLIC_DSN___",
  transport: Sentry.makeFetchTransport,
  stackParser: Sentry.defaultStackParser,
  integrations: [...integrations, happyIntegration()],
  beforeSend(event) {
    console.log("client 1", event);
    return null; // Returning `null` prevents the event from being sent
  },
});
const scope1 = new Sentry.Scope();
scope1.setClient(client1);

const client2 = new Sentry.BrowserClient({
  dsn: "___PUBLIC_DSN___", // Can be a different DSN
  transport: Sentry.makeFetchTransport,
  stackParser: Sentry.defaultStackParser,
  integrations: [...integrations, happyIntegration()],
  beforeSend(event) {
    console.log("client 2", event);
    return null; // Returning `null` prevents the event from being sent
  },
});
const scope2 = new Sentry.Scope();
scope2.setClient(client2);

scope1.captureMessage("a");
scope1.setTag("a", "b");

scope2.captureMessage("x");
scope2.setTag("c", "d");

----------------------------------------

TITLE: Emitting a Distribution Metric in Unity with Sentry SDK
DESCRIPTION: This snippet shows how to emit a distribution metric using the Sentry SDK. It adds a value of 15 to a distribution named 'LoadingTime', with a unit of milliseconds and a region tag.

LANGUAGE: csharp
CODE:
// Adding '15' to a distribution used to track the loading time.
SentrySdk.Metrics.Distribution("LoadingTime",
    15,
    unit: MeasurementUnit.Duration.Millisecond,
    tags: new Dictionary<string, string> {{ "region", "us-west-1" }}
);

----------------------------------------

TITLE: Creating dSYM Debug Companion Files
DESCRIPTION: Command to generate a dSYM debug companion file from a Mach-O executable or library using dsymutil.

LANGUAGE: bash
CODE:
dsymutil /path/to/output[.dylib]

----------------------------------------

TITLE: Adding Sentry JUL Dependency in Maven
DESCRIPTION: This XML snippet shows how to add the Sentry Java Util Logging dependency to a Maven project. It includes a dynamic version injection.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.sentry</groupId>
    <artifactId>sentry-jul</artifactId>
    <version>{{@inject packages.version('sentry.java.jul', '4.1.0') }}</version>
</dependency>

----------------------------------------

TITLE: Defining Feature Flag Context in Sentry SDK
DESCRIPTION: Example JSON structure for Feature Flag context, containing information about the flags evaluated prior to an error occurring.

LANGUAGE: json
CODE:
{
  "contexts": {
    "flags": {
      "values": [
        {
          "flag": "my_flag_name",
          "result": true
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Apache Source Map Access Configuration
DESCRIPTION: Apache server configuration to allow access to source maps from specific Sentry IP addresses.

LANGUAGE: apacheconf
CODE:
<FilesMatch "\.map$">
    Order deny,allow
    Deny from all
    Allow from 35.184.238.160/32
    Allow from 104.155.159.182/32
    Allow from 104.155.149.19/32
    Allow from 130.211.230.102/32
</FilesMatch>

----------------------------------------

TITLE: Configuring Platform Section Support Declaration
DESCRIPTION: Example of how to declare platform non-support in MDX files using PlatformSection component to control content visibility.

LANGUAGE: jsx
CODE:
<PlatformSection notSupported={["javascript.react"]}>

----------------------------------------

TITLE: Setting Sentry Auth Token
DESCRIPTION: Environment variable configuration for Sentry authentication token.

LANGUAGE: bash
CODE:
export SENTRY_AUTH_TOKEN=___ORG_AUTH_TOKEN___

----------------------------------------

TITLE: Disabling Automatic Request Capture in Sentry
DESCRIPTION: Shows how to disable automatic request capture in Sentry during initialization.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

Future<void> main() async {
  await Sentry.init(
    (options) {
      options.dsn = '___PUBLIC_DSN___';
      options.captureFailedRequests = false;
    },
    appRunner: initApp, // Init your App.
  );
}

----------------------------------------

TITLE: Development Environment Detection - Python Constants
DESCRIPTION: Python list defining glob patterns used to identify development environments for prioritized sampling. These patterns match common development environment naming conventions.

LANGUAGE: python
CODE:
ENVIRONMENT_GLOBS = [
    "*debug*",
    "*dev*",
    "*local*",
    "*qa*",
    "*test*",
    # ...
]

----------------------------------------

TITLE: Webhook Headers Structure in JSON
DESCRIPTION: Defines the standard HTTP headers structure used in Sentry webhooks, including content type, request ID, resource type, timestamp, and signature.

LANGUAGE: json
CODE:
{
  "Content-Type": "application/json",
  "Request-ID": "<request_uuid>",
  "Sentry-Hook-Resource": "<resource>",
  "Sentry-Hook-Timestamp": "<timestamp>",
  "Sentry-Hook-Signature": "<generated_signature>"
}

----------------------------------------

TITLE: Building Angular Application with Nx CLI
DESCRIPTION: Command to build the Angular application using Nx CLI, which triggers the source map upload process configured with Sentry plugins.

LANGUAGE: bash
CODE:
nx build

----------------------------------------

TITLE: Configuring Sentry SDK in Vite for SvelteKit
DESCRIPTION: Adds the Sentry SvelteKit plugin to the Vite configuration for build-time features and source maps upload.

LANGUAGE: javascript
CODE:
import { sveltekit } from "@sveltejs/kit/vite";
import { sentrySvelteKit } from "@sentry/sveltekit";

export default {
  plugins: [sentrySvelteKit(), sveltekit()],
  // ... rest of your Vite config
};

----------------------------------------

TITLE: Configuring Sentry SDK in Objective-C for iOS
DESCRIPTION: This code snippet shows how to initialize and configure the Sentry SDK in Objective-C. It sets up the DSN, enables debug mode, and configures the traces sample rate for performance monitoring.

LANGUAGE: objc
CODE:
@import Sentry;

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {

    [SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
        options.dsn = @"___PUBLIC_DSN___";
        options.debug = YES; // Enabled debug when first installing is always helpful

        // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.
        // We recommend adjusting this value in production.
        options.tracesSampleRate = @1.0;
    }];

    return YES;
}

----------------------------------------

TITLE: Configuring Apollo Client with Sentry Tracing in Java
DESCRIPTION: Set up Apollo Client with Sentry tracing using the SentryApolloBuilderExtensions in Java.

LANGUAGE: java
CODE:
import com.apollographql.ApolloClient;
import io.sentry.apollo4.SentryApolloBuilderExtensionsKt;

ApolloClient apollo = SentryApolloBuilderExtensionsKt
    .sentryTracing(new ApolloClient.Builder())
    .serverUrl("https://your-api-host/")
    .build();

----------------------------------------

TITLE: Running Relay Server (Shell)
DESCRIPTION: This command starts the Relay server, which is essential for SDK development. It allows developers to test event ingestion locally without relying on Sentry's production endpoints.

LANGUAGE: shell
CODE:
relay run

----------------------------------------

TITLE: Example WASM Event Payload Structure
DESCRIPTION: Sample JSON structure showing how to format a WebAssembly crash report event for Sentry.

LANGUAGE: javascript
CODE:
{
  "platform": "native",
  "debug_meta": {
    "images": [
      {
        "code_file": "http://localhost:8002/demo.wasm",
        "type": "wasm",
        "debug_id": "9e5cbc5553b44e8b9c69d18cdd7bfd2e0"
      }
    ]
  },
  "exception": {
    "values": [
      {
        "stacktrace": {
          "frames": [
            {
              "function": "wasm_func",
              "abs_path": "http://localhost:8002/demo.wasm",
              "instruction_addr": "0x8c",
              "addr_mode": "rel:0"
            },
            {
              "function": "crash",
              "abs_path": "http://localhost:8002/index.html",
              "lineno": 24,
              "platform": "javascript"
            }
          ]
        },
        "type": "Error"
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring SentryAppender in Logback XML
DESCRIPTION: This XML configuration demonstrates how to set up SentryAppender in a logback-spring.xml file for Spring Boot applications.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
  <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

  <appender name="SENTRY" class="io.sentry.logback.SentryAppender" />

  <root>
    <appender-ref ref="CONSOLE" />
    <appender-ref ref="SENTRY" />
  </root>
</configuration>

----------------------------------------

TITLE: Configuring CSP Report Collection in Sentry
DESCRIPTION: Configuration settings for enabling CSP report collection in sentry.conf.py. Defines the report URI endpoint and sets report-only mode for testing.

LANGUAGE: python
CODE:
CSP_REPORT_URI = "https://your-sentry-url-prefix.com/api/{csp-project-id}/security/?sentry_key={sentry-key}"
CSP_REPORT_ONLY = True

----------------------------------------

TITLE: Configuring HAProxy Reverse Proxy for Sentry
DESCRIPTION: HAProxy configuration with SSL/TLS termination, HTTP to HTTPS redirection, and backend health checks for Sentry.

LANGUAGE: haproxy
CODE:
frontend http_bind
    bind *:80 name http_port
    mode http

    acl sentry_domain hdr(host) -i sentry.yourcompany.com

    http-request redirect scheme https code 301 if sentry_domain !{ ssl_fc }

    use_backend sentry

frontend https_bind
    bind *:443 ssl crt /etc/haproxy/certs/ name https_port
    mode http

    acl sentry_domain hdr(host) -i sentry.yourcompany.com
    use_backend sentry if sentry_domain

backend sentry
    mode http
    option httpchk
    server server1 your-sentry-ip:9000 check

----------------------------------------

TITLE: Adding Request Context in Tornado Integration for Sentry
DESCRIPTION: This code snippet demonstrates the structure of the context added by the Tornado integration for Sentry. It includes the tornado_request key, which contains the HTTPServerRequest object, providing detailed information about the current request.

LANGUAGE: python
CODE:
{
  "tornado_request": <httputil.HTTPServerRequest>  # same as tornado.RequestHandler().request
}

----------------------------------------

TITLE: Capturing Silently Discarded Attribute Violations with Sentry in Laravel
DESCRIPTION: This code sets up violation reporting for silently discarded attributes in Laravel models. It prevents silent discarding of attributes and configures a violation reporter for production environments.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;
use Sentry\Laravel\Integration;

Model::preventSilentlyDiscardingAttributes();

// Only supress silently discarded attribute violations in production, let them be thrown in other environments
if (app()->isProduction()) {
  Model::handleDiscardedAttributeViolationUsing(
      Integration::discardedAttributeViolationReporter()
  );
}

----------------------------------------

TITLE: Updating Sentry SDK Configuration Options in Python
DESCRIPTION: Example showing how to update deprecated configuration options to their new counterparts in Sentry SDK 2.0. Demonstrates replacing with_locals, request_bodies, and experimental profile settings.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    dsn="___PUBLIC_DSN___",

    # Replace with_locals
-   with_locals=False,
+   include_local_variables=False,

    # Replace request_bodies
-   request_bodies="always",
+   max_request_body_size="always",

    # Replace _experiments["profiles_sample_rate"]
    # Replace _experiments["profiler_mode"]
-   _experiments={
-       "profiles_sample_rate": 1.0,
-       "profiler_mode": "thread",
-   },
+   profiles_sample_rate=1.0,
+   profiler_mode="thread",
)

----------------------------------------

TITLE: Monitoring External Service Integration with Span Attributes in JavaScript
DESCRIPTION: This example shows how to monitor performance and reliability of third-party service interactions using Sentry's JavaScript SDK. It creates a span for a payment gateway interaction with attributes for response time, transaction data, and service metrics.

LANGUAGE: javascript
CODE:
Sentry.startSpan(
  {
    name: 'Payment Gateway',
    op: 'payment.gateway',
    attributes: {
      // Performance metrics
      'gateway.response_time_ms': 980,
      'gateway.retry_count': 0,
      
      // Transaction data
      'order.total_amount': 159.99,
      'order.items_count': 3,
      
      // Service metrics
      'gateway.fee_amount': 4.50,
      'gateway.fee_percent': 0.029
    }
  },
  async () => {
    // Payment gateway integration
  }
);

----------------------------------------

TITLE: Configuring allowUrls and denyUrls in JavaScript Sentry SDK
DESCRIPTION: Set up allowed and denied URL patterns to control which domains can report errors to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  allowUrls: [/https?:\/\/((cdn|www)\.)?example\.com/],
});

----------------------------------------

TITLE: Capturing Messages with Sentry SDK in JavaScript
DESCRIPTION: Shows how to use the Sentry SDK to capture and report custom messages. The example demonstrates capturing a simple string message and a message with additional data.

LANGUAGE: javascript
CODE:
Sentry.captureMessage("Hello, World!");

Sentry.captureMessage("Manual Alert", {
  level: Sentry.Severity.Info,
});

----------------------------------------

TITLE: Initializing Sentry without Performance Integrations
DESCRIPTION: Example of initializing Sentry without performance monitoring integrations to allow tree shaking of performance-specific code.

LANGUAGE: javascript
CODE:
const Sentry = require("@sentry/node");

// This will not add _any_ integrations by default!
Sentry.initWithoutDefaultIntegrations({
  dsn: "___PUBLIC_DSN___",
  integrations: [
    // Adds all default integrations
    // except the ones that are only relevant for performance
    ...Sentry.getDefaultIntegrationsWithoutPerformance(),
  ],
});

----------------------------------------

TITLE: CommonJS Import
DESCRIPTION: Example of importing and configuring Raven.js using CommonJS syntax.

LANGUAGE: javascript
CODE:
var Raven = require("raven-js");
Raven.config("___PUBLIC_DSN___").install();

----------------------------------------

TITLE: Adding Authentication Breadcrumb with Sentry in Rust
DESCRIPTION: This code demonstrates how to add a breadcrumb to Sentry for tracking user authentication events. It uses the Sentry library to create a breadcrumb with a category, message, and log level.

LANGUAGE: rust
CODE:
use sentry::{add_breadcrumb, Breadcrumb, Level};

add_breadcrumb(Breadcrumb {
    category: Some("auth".into()),
    message: Some(format!("Authenticated user {}", user.email)),
    level: Level::Info,
    ..Default::default()
});

----------------------------------------

TITLE: Setting Contextual Data Locally in Ruby
DESCRIPTION: This snippet shows how to set user context, tags, and extra data within a local scope in both old and new Sentry Ruby SDKs.

LANGUAGE: ruby
CODE:
# Old
Raven.user_context(id: 1) do
  # send event
end
Raven.tag_context(foo: "bar") do
  # send event
end
Raven.extra_context(debug: true) do
  # send event
end

# New
Sentry.with_scope do |scope|
  scope.set_user(id: 1)
  scope.set_tags(foo: "bar")
  scope.set_extras(debug: true)
  # send event
end

----------------------------------------

TITLE: Initializing Sentry SDK with Span Customization in JavaScript
DESCRIPTION: Demonstrates how to initialize Sentry with a DSN and implement a beforeSendSpan callback to modify span attributes. The callback checks for specific span descriptions and updates them with custom data.

LANGUAGE: javascript
CODE:
Sentry.init({
  dsn: "___PUBLIC_DSN___",

  // Called for all spans
  beforeSendSpan(span) {
    // Modify the span here
    if (span.description === "should be renamed") {
      span.description = "renamed span";
      span.data = {
        ...span.data,
        myExtraAttribute: true,
      };
    }

    return span;
  },
});

----------------------------------------

TITLE: Installing sentry-cli via Scoop
DESCRIPTION: This command installs sentry-cli using Scoop package manager on Windows.

LANGUAGE: powershell
CODE:
> scoop install sentry-cli

----------------------------------------

TITLE: Installing Sentry SDK via pip
DESCRIPTION: Use pip to install or upgrade the Sentry SDK package.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk

----------------------------------------

TITLE: FeatureFlagAdapter Interface Definition
DESCRIPTION: TypeScript interface definition for the FeatureFlagAdapter, which is used to implement custom feature flag adapters for the Sentry Toolbar.

LANGUAGE: typescript
CODE:
type FlagValue = boolean | string | number | undefined;
type FlagMap = Record<string, FlagValue>;
interface FeatureFlagAdapter {
  /**
   * All known flag names and their evaluated values.
   */
  getFlagMap: () => Promise<FlagMap>;

  /**
   * Any overridden or manually set flags and values.
   */
  getOverrides: () => Promise<FlagMap>;

  /**
   * Manually set a flag to be a specific value, overriding the evaluated value.
   */
  setOverride: (name: string, override: FlagValue) => void;

  /**
   * A callback to clear all overrides from this browser.
   */
  clearOverrides: () => void;

  /**
   * Deeplink into your external feature-flag provider and find out more about
   * this specific flag.
   */
    urlTemplate?: undefined | ((name: string) => string | URL | undefined);
}

----------------------------------------

TITLE: Setting Custom Exception Fingerprint in C#
DESCRIPTION: Configures Sentry SDK's BeforeSend callback to set a custom fingerprint for SQL connection exceptions. This helps group similar database connection errors together in the Sentry dashboard.

LANGUAGE: csharp
CODE:
// Add this to the SDK initialization callback
options.SetBeforeSend(@event =>
{
    if (@event.Exception is SqlConnectionException ex)
    {
        @event.SetFingerprint(new [] { "database-connection-error" });
    }

    return @event;
});

----------------------------------------

TITLE: Initializing Sentry ReplayCanvas Integration in JavaScript
DESCRIPTION: Demonstrates how to initialize the Sentry SDK with the ReplayCanvas integration for capturing canvas element recordings in session replays. Requires browser environment and the Replay integration to be enabled.

LANGUAGE: javascript
CODE:
Sentry.init({
  integrations: [Sentry.replayCanvasIntegration()],
});

----------------------------------------

TITLE: URI Response Format for Select FormField in JSON for Sentry Integration
DESCRIPTION: JSON structure for the URI response format used in Select FormField components. It returns an array of objects, each containing label, value, and default properties.

LANGUAGE: json
CODE:
[
  {
    "label": <String>,
    "value": <String>,
    "default": <Boolean>,
  },
  ...
]

----------------------------------------

TITLE: Integrating Sentry with OpenFeature - Single Client Hook Implementation
DESCRIPTION: Demonstrates how to initialize Sentry with OpenFeature integration and set up hooks for a specific OpenFeature client. This approach will only track evaluations for the specified client instance.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/gatsby';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Initializing Sentry with OpenTelemetry for ASP.NET Applications in C#
DESCRIPTION: This code initializes Sentry for an ASP.NET application, enabling OpenTelemetry integration. It sets the traces sample rate, adds ASP.NET support, and configures Sentry to use the OpenTelemetry tracer provider builder.

LANGUAGE: csharp
CODE:
_sentry = SentrySdk.Init(options =>
{
    //options.Dsn = "...Your DSN...";
    options.TracesSampleRate = 1.0;
    options.AddAspNet(RequestSize.Always);
    options.UseOpenTelemetry(builder);
});

----------------------------------------

TITLE: Capturing Exception with Tags in JavaScript
DESCRIPTION: This snippet demonstrates how to capture an exception in Sentry while adding custom tags to provide additional context.

LANGUAGE: javascript
CODE:
Sentry.captureException(new Error("something went wrong"), {
  tags: {
    section: "articles",
  },
});

----------------------------------------

TITLE: URL Pattern Examples for API Design
DESCRIPTION: Examples demonstrating recommended and discouraged URL patterns for API endpoints, showing proper resource hierarchy and nesting levels.

LANGUAGE: markdown
CODE:
- 👍 "/projects/\{organization_slug}/\{project_slug}/tags/\{tag_id}/values"
- 👎 "/organizations/\{organization_slug}/projects/\{project_slug}/tags/\{tag_id}/values/"
- 👎 "/values/"

----------------------------------------

TITLE: Configuring Sentry Sampling Rate via Properties
DESCRIPTION: Sets the transaction sampling rate through application.properties or application.yml configuration. The traces-sample-rate property determines what percentage of transactions are captured for tracing.

LANGUAGE: properties
CODE:
# Set traces_sample_rate to 1.0 to capture 100%
# of transactions for tracing.
# We recommend adjusting this value in production.
sentry.traces-sample-rate=1.0

----------------------------------------

TITLE: Enabling Profiling in Sentry SDK
DESCRIPTION: Shows how to enable profiling functionality with trace sampling and profile sampling rates. Includes experimental app launch profiling feature.

LANGUAGE: swift
CODE:
import Sentry

SentrySDK.start { options in
    options.dsn = "___PUBLIC_DSN___"
    options.tracesSampleRate = 1.0 // tracing must be enabled for profiling
    options.profilesSampleRate = 1.0 // see also `profilesSampler` if you need custom sampling logic
    options.enableAppLaunchProfiling = true // experimental new feature to start profiling in the pre-main launch phase
}

LANGUAGE: objective-c
CODE:
@import Sentry;

[SentrySDK startWithConfigureOptions:^(SentryOptions *options) {
    options.dsn = @"___PUBLIC_DSN___";
    options.tracesSampleRate = @1.0; // tracing must be enabled for profiling
    options.profilesSampleRate = @1.0; // see also `profilesSampler` if you need custom sampling logic
    options.enableAppLaunchProfiling = YES; // experimental new feature to start profiling in the pre-main launch phase
}];

----------------------------------------

TITLE: Configuring Sentry User Tracking Middleware in Express.js
DESCRIPTION: Express middleware that sets user information for Sentry error tracking. The middleware checks for user data on each request and updates Sentry's user context accordingly, enabling user-specific error tracking and monitoring.

LANGUAGE: javascript
CODE:
// Add a middleware, for example:
app.use((req, res, next) => {
  // Get the user from somewhere
  const user = req.user;

  // Set the user data for all requests
  if (user) {
    Sentry.setUser({
      id: user.id,
      email: user.email,
      username: user.username,
    });
  } else {
    Sentry.setUser(null);
  }

  next();
});

----------------------------------------

TITLE: Configuring StatsD Metrics in Relay YAML
DESCRIPTION: YAML configuration for submitting metrics to a StatsD server. Specifies the StatsD server endpoint and an optional prefix for all metric names.

LANGUAGE: yaml
CODE:
metrics:
  # Endpoint of your StatsD server
  statsd: 127.0.0.1:8126
  # Prefix all metric names with this string
  prefix: mycompany.relay

----------------------------------------

TITLE: Initializing Sentry with OpenFeature SDK - Track Single Client
DESCRIPTION: Configures Sentry with OpenFeature SDK to track feature flag evaluations for a specific client instance. Shows initialization, provider setup, and hook registration at the client level.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/solid';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Initializing Sentry SDK with Traces Configuration in Dart
DESCRIPTION: Initializes the Sentry SDK for Flutter applications using the SentryFlutter.init method. Sets the tracesSampleRate option to 0.2, meaning 20% of transactions will be captured for performance monitoring.

LANGUAGE: dart
CODE:
await SentryFlutter.init((options) => {
  options.tracesSampleRate = 0.2;
});

----------------------------------------

TITLE: Initialize Sentry Transaction in Objective-C
DESCRIPTION: Creates and starts a Sentry transaction for monitoring HTTP GET requests using Objective-C. Initializes a transaction context with name, operation type, and explicit sampling decision.

LANGUAGE: objc
CODE:
@import Sentry;

// IsSampled -> yes
SentryTransactionContext *transactionContext = [[TransactionContext alloc] initWithName:@"GET /search"
                                                                              operation:@"http"
                                                                                sampled:kSentrySampleDecisionYes];

id<SentrySpan> transaction = [SentrySDK startTransactionWithContext:transactionContext];

----------------------------------------

TITLE: Configuring Sentry Rollup Plugin in Rollup Config
DESCRIPTION: Example configuration for the Sentry Rollup plugin in the rollup.config.js file, including output settings and plugin options.

LANGUAGE: javascript
CODE:
import { sentryRollupPlugin } from "@sentry/rollup-plugin";

export default {
  output: {
    sourcemap: true, // Source map generation must be turned on
  },
  plugins: [
    // Put the Sentry rollup plugin after all other plugins
    sentryRollupPlugin({
      org: "___ORG_SLUG___",
      project: "___PROJECT_SLUG___",
      authToken: process.env.SENTRY_AUTH_TOKEN,
    }),
  ],
};

----------------------------------------

TITLE: Emitting a Set Metric in Unity with Sentry SDK
DESCRIPTION: This snippet demonstrates how to emit a set metric using the Sentry SDK. It adds a unique occurrence 'Rufus' to a set named 'UserView', with a custom unit and a region tag.

LANGUAGE: csharp
CODE:
// Adding a set of unique occurrences.
SentrySdk.Metrics.Set("UserView", "Rufus",
    unit: MeasurementUnit.Custom("username"),
    tags: new Dictionary<string, string> {{ "region", "us-west-1" }});

----------------------------------------

TITLE: Rendering Platform-Specific SDK Guide Selection in React
DESCRIPTION: This snippet uses custom React components to display a guide for selecting Sentry SDKs. It conditionally renders content based on the platform and presents a grid of available guides.

LANGUAGE: jsx
CODE:
<PlatformSection noGuides>

Using a framework? Check out the other SDKs we support in the left-hand dropdown.

<GuideGrid />

</PlatformSection>

----------------------------------------

TITLE: Implementing SentryIonicErrorHandler for Ionic v4
DESCRIPTION: Custom error handler implementation for Ionic v4 that extends ErrorHandler to capture errors in Sentry.

LANGUAGE: javascript
CODE:
import { ErrorHandler } from "@angular/core";

import * as Sentry from "sentry-cordova";

export class SentryIonicErrorHandler extends ErrorHandler {
  handleError(error) {
    super.handleError(error);
    try {
      Sentry.captureException(error.originalError || error);
    } catch (e) {
      console.error(e);
    }
  }
}

----------------------------------------

TITLE: Configuring Rustfmt for Import Ordering
DESCRIPTION: Demonstrates the Rustfmt configuration for grouping and ordering imports according to Sentry's style guidelines.

LANGUAGE: toml
CODE:
imports_granularity = "Module"
group_imports = "StdExternalCrate"  # nightly only

----------------------------------------

TITLE: Embedding Source Code in .NET Portable PDB Files
DESCRIPTION: This XML snippet shows how to configure a .NET project to embed all source code directly into Portable PDB files using the EmbedAllSources property. This allows automatic extraction of sources after PDB upload to Sentry.

LANGUAGE: xml
CODE:
<PropertyGroup>
  <EmbedAllSources>true</EmbedAllSources>
</PropertyGroup>

----------------------------------------

TITLE: Initializing Sentry Client with ClientOptions in Go
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry client using the sentry.Init() method with ClientOptions. It sets the DSN and enables debug mode, with an optional commented-out release version.

LANGUAGE: go
CODE:
sentry.Init(sentry.ClientOptions{
	Dsn: "___PUBLIC_DSN___",
	Debug: true,
	// Release: "my-project-name@1.0.0",
})

----------------------------------------

TITLE: Integrating OpenFeature with Sentry for Tracking One Client in JavaScript
DESCRIPTION: This snippet shows how to initialize Sentry with the OpenFeature integration, set up an OpenFeature provider, and add hooks for tracking feature flag evaluations for a specific client. It includes an example of evaluating a boolean flag and capturing an exception.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/sveltekit';
import { OpenFeature } from '@openfeature/web-sdk';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  integrations: [Sentry.openFeatureIntegration()]
});

OpenFeature.setProvider(new MyProviderOfChoice());
const client = OpenFeature.getClient();
client.addHooks(new Sentry.OpenFeatureIntegrationHook());

const result = client.getBooleanValue('test-flag', false); // evaluate with a default value
Sentry.captureException(new Error('Something went wrong!'));

----------------------------------------

TITLE: Creating Sentry Attachments from Different Byte Types in Dart
DESCRIPTION: Shows three different methods for creating SentryAttachment objects from different byte data types: Uint8List, IntList, and ByteData. Each method takes the byte data and a filename as parameters to create an attachment that can be sent with Sentry events.

LANGUAGE: dart
CODE:
import 'package:sentry/sentry.dart';

// There are several common data types which represent bytes in Dart
final attachment = SentryAttachment.fromUint8List(bytes, 'file.log');
final attachment = SentryAttachment.fromIntList(bytes, 'file.log');
final attachment = SentryAttachment.fromByteData(bytes, 'file.log');

----------------------------------------

TITLE: Adding Custom Data to Sentry Transaction Sampling Context (JavaScript)
DESCRIPTION: Shows how to add custom data to the sampling context when starting a transaction in Sentry. This allows the sampling function to access additional information for decision-making.

LANGUAGE: javascript
CODE:
const transaction = Sentry.startTransaction(
  {
    name: "test-transaction",
    op: "test",
  },
  { data: { customKey: "customValue" } }
);

----------------------------------------

TITLE: Migrating React Router v3 Integration in Sentry
DESCRIPTION: Shows the migration path for React Router v3 integration from class-based to function-based implementation.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/react';

Sentry.init({
  integrations: [
-    new Sentry.BrowserTracing({
-      routingInstrumentation: Sentry.reactRouterV3Instrumentation({
-        history,
-        routes,
-        match,
-      }),
-    }),
+    Sentry.reactRouterV3BrowserTracingIntegration({
+      history,
+      routes,
+      match,
+    }),
  ],
});

----------------------------------------

TITLE: Configuring Azure DevOps Credentials in YAML for Sentry
DESCRIPTION: This snippet demonstrates how to add the Azure DevOps App ID and Client Secret to the 'config.yml' file in Sentry's configuration.

LANGUAGE: yaml
CODE:
# Azure DevOps #
vsts_new.client-id: your-app-id
vsts_new.client-secret: your-client-secret

----------------------------------------

TITLE: Customizing Auto-instrumentation for Sentry in SvelteKit
DESCRIPTION: Configures the auto-instrumentation options for load functions in the Sentry SvelteKit plugin.

LANGUAGE: javascript
CODE:
import { sveltekit } from "@sveltejs/kit/vite";
import { sentrySvelteKit } from "@sentry/sveltekit";

export default {
  plugins: [
    sentrySvelteKit({
      autoInstrument: {
        load: true,
        serverLoad: false,
      },
    }),
    sveltekit(),
  ],
  // ... rest of your Vite config
};

----------------------------------------

TITLE: Displaying Sentry SAML Endpoints
DESCRIPTION: This HTML table shows the SAML endpoints for Sentry, including the Assertion Consumer Service (ACS), Single Logout Service (SLS), and Metadata URL. These endpoints are used when configuring SAML2-based SSO providers.

LANGUAGE: xml
CODE:
<table class="table">
  <tbody valign="top">
    <tr>
      <th>ACS:</th>
      <td>
        <code class="docutils literal">
          https://sentry.io/saml/acs/[organization_slug]/
        </code>
      </td>
    </tr>
    <tr>
      <th>SLS:</th>
      <td>
        <code class="docutils literal">
          https://sentry.io/saml/sls/[organization_slug]/
        </code>
      </td>
    </tr>
    <tr>
      <th>Metadata:</th>
      <td>
        <code class="docutils literal">
          https://sentry.io/saml/metadata/[organization_slug]/
        </code>
      </td>
    </tr>
  </tbody>
</table>

----------------------------------------

TITLE: Using Sentry Hub in HTTP Handlers and Middleware in Go
DESCRIPTION: Demonstrate how to access and use the Sentry Hub from the request context in HTTP handlers and middleware. This allows for request-specific error capturing and event enhancement.

LANGUAGE: go
CODE:
type handler struct{}

func (h *handler) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	if hub := sentry.GetHubFromContext(r.Context()); hub != nil {
		hub.WithScope(func(scope *sentry.Scope) {
			scope.SetExtra("unwantedQuery", "someQueryDataMaybe")
			hub.CaptureMessage("User provided unwanted query string, but we recovered just fine")
		})
	}
	rw.WriteHeader(http.StatusOK)
}

func enhanceSentryEvent(handler http.HandlerFunc) http.HandlerFunc {
	return func(rw http.ResponseWriter, r *http.Request) {
		if hub := sentry.GetHubFromContext(r.Context()); hub != nil {
			hub.Scope().SetTag("someRandomTag", "maybeYouNeedIt")
		}
		handler(rw, r)
	}
}

// Later in the code

sentryHandler := sentryhttp.New(sentryhttp.Options{
	Repanic: true,
})

http.Handle("/", sentryHandler.Handle(&handler{}))
http.HandleFunc("/foo", sentryHandler.HandleFunc(
	enhanceSentryEvent(func(rw http.ResponseWriter, r *http.Request) {
		panic("y tho")
	}),
))

fmt.Println("Listening and serving HTTP on :3000")

if err := http.ListenAndServe(":3000", nil); err != nil {
	panic(err)
}

----------------------------------------

TITLE: Capturing Handled Exceptions in Django View
DESCRIPTION: Use sentry_sdk.capture_exception() to report handled exceptions in a Django view.

LANGUAGE: python
CODE:
class HandledErrorView(APIView):
   def get(self, request):
      ...
      try:
          '2' + 2
      except Exception as err:
          sentry_sdk.capture_exception(err)

      return Response()

----------------------------------------

TITLE: Configuring Low Quality Session Replay in Swift
DESCRIPTION: Code demonstrating how to configure Session Replay quality settings to reduce CPU, memory and bandwidth usage by lowering screenshot compression and bitrate.

LANGUAGE: swift
CODE:
SentrySDK.start(configureOptions: { options in
  // this will reduce screenshot compression to 10 and bitrate to 50kbps
  options.sessionReplay.quality = .low // defaults to .medium
})

----------------------------------------

TITLE: Configuring Sentry Performance Monitoring
DESCRIPTION: This snippet demonstrates how to configure Sentry's performance monitoring using a sentry.properties file. It sets the traces-sample-rate to 1.0 to capture all transactions.

LANGUAGE: properties
CODE:
traces-sample-rate=1.0

----------------------------------------

TITLE: Implementing Feedback Event Context Structure
DESCRIPTION: Shows the structure of a feedback event context object containing user-provided information and metadata. All fields except message are optional.

LANGUAGE: pseudo-code
CODE:
event["contexts"]["feedback"] = {
	"name": <user-provided>,
	"contact_email": <user-provided>,
	"message": <user-provided>,
	"url": <referring web page>,
	"source": <developer-provided, ex: "widget">,
	"associated_event_id": <developer-provided, should be a valid error event in the same project>
}

----------------------------------------

TITLE: Sending Test Event with Sentry CLI
DESCRIPTION: Shell command to send a test event to Relay using sentry-cli with custom DSN configuration.

LANGUAGE: shell
CODE:
export SENTRY_DSN='http://12345abcdef10111213141516171819@127.0.0.1:3000/2345'
sentry-cli send-event -m 'A test event'

----------------------------------------

TITLE: Initializing Sentry Metrics in Electron Main Process
DESCRIPTION: Basic setup code for enabling Sentry metrics monitoring in an Electron application. The configuration requires only a DSN (Data Source Name) parameter, with metrics collection enabled by default in SDK versions 8.0.0 and above.

LANGUAGE: JavaScript
CODE:
import * as Sentry from '@sentry/electron/main';

Sentry.init({
  dsn: '___PUBLIC_DSN___',
  // Only needed for SDK versions < 8.0.0
  // _experiments: {
  //   metricsAggregator: true,
  // },
});

----------------------------------------

TITLE: Using the trace Directive in Angular Component Template
DESCRIPTION: This HTML snippet shows how to use the trace directive in an Angular component template. The trace directive is used to track specific instances of components, adding ui.angular.init spans to the active transaction.

LANGUAGE: html
CODE:
<app-header trace="header"></app-header>
<articles-list trace="articles-list"></articles-list>
<app-footer trace="footer"></app-footer>

----------------------------------------

TITLE: Configuring Sentry Scope with Extra Data in Objective-C
DESCRIPTION: This snippet shows how to use the Sentry SDK in Objective-C to configure the scope and set extra information. It adds a custom key-value pair to provide additional context in error reports.

LANGUAGE: objc
CODE:
@import Sentry;

[SentrySDK configureScope:^(SentryScope * _Nonnull scope) {
    [scope setExtraValue:@"Mighty Fighter" forKey:@"character.name"];
}];

----------------------------------------

TITLE: Configuring Sentry in application.properties
DESCRIPTION: Shows how to configure Sentry DSN, PII data collection, and transaction sampling rate using application.properties. The configuration includes setting up error tracking and performance monitoring with detailed sampling options.

LANGUAGE: properties
CODE:
sentry.dsn=___PUBLIC_DSN___

# Add data like request headers and IP for users,
# see https://docs.sentry.io/platforms/java/guides/spring-boot/data-management/data-collected/ for more info
sentry.send-default-pii=true

# Set traces_sample_rate to 1.0 to capture 100%
# of transactions for tracing.
# We recommend adjusting this value in production.
sentry.traces-sample-rate=1.0

----------------------------------------

TITLE: Setting GCS Credentials in Docker Compose for Sentry
DESCRIPTION: Docker Compose configuration to set up Google Cloud Storage credentials for Sentry, including environment variable and volume mounting for the service account JSON file.

LANGUAGE: yaml
CODE:
x-sentry-defaults: &sentry-defaults
  # ...
  environment:
    # The rest of the environment variables
    GOOGLE_APPLICATION_CREDENTIALS: "/run/secrets/service_account.json"
  volumes:
    # The rest of the volumes
    - "/path/to/service_account.json:/run/secrets/service_account.json:ro"

----------------------------------------

TITLE: Installing Sentry SDK with pip
DESCRIPTION: Use pip to install or upgrade the Sentry SDK package.

LANGUAGE: bash
CODE:
pip install --upgrade sentry-sdk

----------------------------------------

TITLE: Enabling and Disabling Sentry Patches in Ruby
DESCRIPTION: This snippet demonstrates how to enable the Faraday patch and disable the Puma patch using the config.enabled_patches configuration option in Sentry Ruby SDK.

LANGUAGE: ruby
CODE:
# enable :faraday patch
config.enabled_patches << :faraday

# disable :puma patch
config.enabled_patches.delete(:puma)

----------------------------------------

TITLE: Filtering Events with Before-Send Callback in JavaScript
DESCRIPTION: Demonstrates how to use the beforeSend callback to filter or modify events before they are sent to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  beforeSend(event) {
    // Modify the event here
    if (event.user) {
      // Don't send user's email address
      delete event.user.email;
    }
    return event;
  },
});

----------------------------------------

TITLE: Package.json Build Script Configuration
DESCRIPTION: JSON configuration for adding source map upload to the build process using sentry-upload-sourcemaps.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build": "remix build --sourcemap && sentry-upload-sourcemaps --org ___ORG_SLUG___ --project ___PROJECT_SLUG___"
  }
}

----------------------------------------

TITLE: Integrating Sentry in ASP.NET Core
DESCRIPTION: Demonstrates the single line integration of Sentry into an ASP.NET Core application using the UseSentry method.

LANGUAGE: csharp
CODE:
UseSentry

----------------------------------------

TITLE: Initializing Sentry Client with Custom Sampling Rules - JavaScript
DESCRIPTION: Sets up Sentry client configuration with browser tracing integration and custom sampling logic. Implements different sampling rates for various transaction types: skips health checks, captures all auth transactions, samples 1% of comment transactions, and uses 50% sampling for everything else.

LANGUAGE: javascript
CODE:
// sentry.client.config.js
Sentry.init({
  dsn: "___PUBLIC_DSN___",
  integrations: [Sentry.browserTracingIntegration()],
  tracesSampler: (samplingContext) => {
    // Access transaction details from the sampling context
    const { name, attributes, inheritOrSampleWith } = samplingContext;
    
    // Skip health checks entirely
    if (name.includes('healthcheck')) {
      return 0;
    }
    
    // Capture all auth-related transactions
    if (name.includes('auth')) {
      return 1;
    }
    
    // Sample only 1% of comment-related transactions
    if (name.includes('comment')) {
      return 0.01;
    }
    
    // For everything else, inherit parent sampling decision or use 0.5
    return inheritOrSampleWith(0.5);
  }
});

----------------------------------------

TITLE: Initializing Sentry SDK in React Native
DESCRIPTION: Sets up Sentry error monitoring by importing the SDK and configuring it with a DSN (Data Source Name). Enables view hierarchy attachment for better error context in React Native applications.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "___PUBLIC_DSN___",
  attachViewHierarchy: true,
});

----------------------------------------

TITLE: Implementing PreprocessEvent Hook in Sentry Integration
DESCRIPTION: Shows implementation of preprocessEvent hook which runs before processEvent and allows event mutation. Cannot return modified event or null.

LANGUAGE: javascript
CODE:
const integration = {
  name: "MyAwesomeIntegration",
  preprocessEvent(event, hint, client) {
    event.extra = {
      ...event.extra,
      myCustomTag: "value",
    };
    // Nothing to return, just mutate the event
  },
};

----------------------------------------

TITLE: Adding Attachments to Sentry Events in Ruby
DESCRIPTION: This snippet demonstrates how to add attachments to Sentry events using the Sentry.add_attachment method. It shows examples of adding attachments from a file path and directly as bytes.

LANGUAGE: ruby
CODE:
Sentry.add_attachment(path: '/path/to/attachment/file.txt')
Sentry.add_attachment(filename: 'payload.json', bytes: '{"value": 42}'))

----------------------------------------

TITLE: Creating Transactions and Spans with Data Attributes in PHP
DESCRIPTION: This snippet demonstrates how to create a transaction and a span with custom data attributes using Sentry's PHP SDK. It shows the process of setting up context objects and assigning data attributes during creation.

LANGUAGE: php
CODE:
// Create a transaction and assign data attributes...
$transactionContext = \Sentry\Tracing\TransactionContext::make()
    ->setName('Example Transaction')
    ->setOp('http.server')
    ->setData([
        'data_attribute_1' => 42,
        'data_attribute_2' => true,
    ]);
$transaction = \Sentry\startTransaction($transactionContext);

// ... or create a span and assign data attributes

$spanContext = \Sentry\Tracing\SpanContext::make()
    ->setOp('http.client')
    ->setData([
        'data_attribute_1' => 42,
        'data_attribute_2' => true,
    ]);
$transaction->startChild($context);

----------------------------------------

TITLE: Setting URL Prefix in YAML
DESCRIPTION: Configures the URL prefix for Sentry, used for referencing URLs in the UI and outbound notifications.

LANGUAGE: yaml
CODE:
system.url-prefix: "https://sentry.example.com"

----------------------------------------

TITLE: Wrapping Composable with SentryTraced for Performance Metrics
DESCRIPTION: Wrap your Composable function with SentryTraced to enable performance metrics tracking.

LANGUAGE: kotlin
CODE:
import io.sentry.compose.SentryTraced

@Composable
fun LoginScreen() {
  SentryTraced("login_screen") {
    Column {
      // ...
      Button(
          onClick = { TODO() }) {
          Text(text = "Login")
      }
    }
  }
}

----------------------------------------

TITLE: Setting Sentry Fingerprint in Kotlin
DESCRIPTION: Configures a custom fingerprint for error grouping in Sentry using Kotlin. Uses the Sentry SDK to set a fingerprint with 'auth-error' tag to group authentication-related errors together.

LANGUAGE: kotlin
CODE:
import io.sentry.Sentry

Sentry.configureScope { scope ->
  scope.fingerprint = listOf("auth-error")
}

----------------------------------------

TITLE: Updating CMakeLists.txt for Sentry NDK Libraries
DESCRIPTION: This snippet shows how to update the CMakeLists.txt configuration to link the Sentry NDK libraries.

LANGUAGE: cmake
CODE:
# include paths generated by androidNativeBundle
include (${ANDROID_GRADLE_NATIVE_BUNDLE_PLUGIN_MK})
# change native-lib to your native lib's name
target_link_libraries(native-lib ${ANDROID_GRADLE_NATIVE_MODULES})

----------------------------------------

TITLE: Setting Error Sample Rate in Sentry SDK Configuration
DESCRIPTION: Configures the SDK to send a representative sample of errors to Sentry by setting the sample rate option. This example sets the rate to 0.25, meaning 25% of errors will be sent.

LANGUAGE: python
CODE:
import sentry_sdk

sentry_sdk.init(
    # ...

    # Set sample rate to 25%
    sample_rate=0.25,
)

----------------------------------------

TITLE: Initializing Attachments with Path
DESCRIPTION: Demonstrates how to create an attachment using a file path. The SDK reads the file contents when preparing events or transactions.

LANGUAGE: markup
CODE:
<PlatformContent includePath="enriching-events/attachment-init-with-path" />

----------------------------------------

TITLE: Adding Attributes to Sentry Spans in JavaScript
DESCRIPTION: Example showing how to add attributes to spans both during initialization and dynamically. Demonstrates setting attributes for API request details including base URL, endpoint, and various parameters.

LANGUAGE: javascript
CODE:
const baseUrl = "https://empowerplant.io";
const endpoint = "/api/0/projects/ep/setup_form";
const parameters = {
  user_id: 314159265358979323846264338327,
  tracking_id: "EasyAsABC123OrSimpleAsDoReMi",
  product_name: PlantToHumanTranslator,
  product_id: 161803398874989484820458683436563811772030917980576,
};

startSpan(
  {
    op: "http.client",
    name: "setup form",
    // you can add attributes when starting the span
    attributes: {
      baseUrl,
      endpoint,
    },
  },
  (span) => {
    // or you can add attributes to an existing span
    for (const key of parameters) {
      span.setAttribute(`parameters.${key}`, parameters[key]);
    }

    // do something to be measured
  }
);

----------------------------------------

TITLE: Modifying or Dropping Spans in Kotlin
DESCRIPTION: Kotlin code snippet showing how to modify or drop spans using SentryInstrumentation.BeforeSpanCallback.

LANGUAGE: kotlin
CODE:
import io.sentry.graphql.SentryInstrumentation

import graphql.GraphQL

val graphql = GraphQL.newGraphQL()
  // ...
  .instrumentation(SentryInstrumentation({ span: ISpan, env: DataFetchingEnvironment, result: Any? ->
    if ("/shows" == env.executionStepInfo.path.segmentToString()) {
      span.setTag("tag-name", "tag-value")
    }
    span
  }, SentrySpringSubscriptionHandler(), true))
  .build()

----------------------------------------

TITLE: Adding Sentry Android Gradle Plugin in Kotlin
DESCRIPTION: Add the Sentry Android Gradle plugin to the build.gradle.kts file using Kotlin DSL syntax. This enables auto-installation of the Timber integration.

LANGUAGE: kotlin
CODE:
plugins {
  id("io.sentry.android.gradle") version "{{@inject packages.version('sentry.java.android.gradle-plugin', '3.0.0') }}"
}

----------------------------------------

TITLE: Configuring Sentry Before-Send Hook with Database Error Fingerprinting
DESCRIPTION: Sets up custom error handling in Sentry SDK by defining a DatabaseConnectionError exception class and implementing a before_send hook that adds custom fingerprinting for database connection errors. This helps group similar database connection errors together in the Sentry dashboard.

LANGUAGE: python
CODE:
class DatabaseConnectionError(Exception):
    pass

def before_send(event, hint):
    if 'exc_info' not in hint:
        return event

    exception = hint['exc_info'][1]
    if isinstance(exception, DatabaseConnectionError):
        event['fingerprint'] = ['database-connection-error']

    return event

sentry_sdk.init(
    # ...

    before_send=before_send,
)

----------------------------------------

TITLE: Installing Sentry Logging Integration in Dart
DESCRIPTION: Add the necessary dependencies to the pubspec.yaml file for integrating Sentry with Logging in a Dart project.

LANGUAGE: yaml
CODE:
dependencies:
  sentry: ^{{@inject packages.version('sentry.dart', '6.3.0') }}
  sentry_logging: ^{{@inject packages.version('sentry.dart.logging', '6.3.0') }}
  logging: ^1.0.2

----------------------------------------

TITLE: Configuring Managed Mode in Relay YAML
DESCRIPTION: Sets Relay to managed mode, which requires authentication and obtains project settings directly from Sentry. This is the default mode and is only available for Business and Enterprise plans.

LANGUAGE: yaml
CODE:
relay:
  mode: managed

----------------------------------------

TITLE: Initializing Sentry SDK with Custom Error Handling in Kotlin
DESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in a Kotlin Android application. It configures a BeforeSendCallback to handle SQLiteExceptions by setting a specific fingerprint.

LANGUAGE: kotlin
CODE:
import io.sentry.android.core.SentryAndroid
import io.sentry.SentryOptions.BeforeSendCallback
import android.database.sqlite.SQLiteException

SentryAndroid.init(this) { options ->
  options.beforeSend = BeforeSendCallback { event, hint ->
    if (event.throwable is SQLiteException) {
      event.fingerprints = listOf("database-connection-error")
    }
    event
  }
}

----------------------------------------

TITLE: Restore Commands for Sentry Backups
DESCRIPTION: Commands for restoring Sentry backups across different self-hosted versions. Includes basic restore operations and version-specific commands.

LANGUAGE: shell
CODE:
# If using self-hosted version <= 23.3.0:
docker compose run --rm -T web import /etc/sentry/backup.json

# If using self-hosted version >= 23.3.1:
./scripts/restore.sh

# If using self-hosted version >= 24.1.0:
./scripts/restore.sh [user | organization | config | global]

----------------------------------------

TITLE: Creating Transaction Monitoring for Checkout Process in Rust with Sentry
DESCRIPTION: Shows how to implement Sentry transaction monitoring for a checkout process, including creation of child spans for different phases. The code demonstrates tracking validation and processing steps with proper span management and timing measurement.

LANGUAGE: rust
CODE:
// Let's say this method is called in a background thread when a user clicks on the checkout button of your shop
fn perform_checkout() {
    // This will create a new Transaction for you
    let tx_ctx = sentry::TransactionContext::new(
        "checkout",
        "perform-checkout",
    );
    let transaction = sentry::start_transaction(tx_ctx);

    // Validate the cart
    let validation_span = transaction.start_child(
        "validation",
        "validating shopping cart",
    );

    validate_shopping_cart(); //Some long process, maybe a sync http request.

    validation_span.finish();

    // Process the order
    let process_span = transaction.start_child(
        "process",
        "processing shopping cart",
    );

    process_shopping_cart(); //Another time consuming process.

    process_span.finish();

    transaction.finish();
}

----------------------------------------

TITLE: Initializing Sentry SDK with Metrics in JavaScript
DESCRIPTION: This code snippet shows how to initialize the Sentry SDK with metrics functionality. It uses the `Sentry.init` method with a configuration object containing the DSN. For SDK versions prior to 8.0.0, an additional integration for metrics aggregation was required, but it's commented out as it's no longer needed in newer versions.

LANGUAGE: JavaScript
CODE:
Sentry.init({
  dsn: '___PUBLIC_DSN___',
  // Only needed for SDK versions < 8.0.0
  // integrations: [
  //   Sentry.metrics.metricsAggregatorIntegration(),
  // ],
});

----------------------------------------

TITLE: Updating Express App for Sentry SDK 8.x (CommonJS)
DESCRIPTION: Changes required in the main Express app file when migrating to Sentry SDK 8.x using CommonJS. Includes importing the instrument file and updating the error handler.

LANGUAGE: javascript
CODE:
require('./instrument');
const express = require('express');
const Sentry = require('@sentry/node');
const app = express();

// add routes etc. here

Sentry.setupExpressErrorHandler(app);

app.listen(3000);

----------------------------------------

TITLE: Iterating Over Indexed Objects in TypeScript
DESCRIPTION: Shows how to safely iterate over object properties when using noUncheckedIndexedAccess. Demonstrates the problem with Object.keys and the solution using Object.entries.

LANGUAGE: typescript
CODE:
// ❌
function doSomething(input: Record<string, unknown>) {
  Object.keys(input).forEach(key => {
    const item = input[key]!
    // ...
  }
}

LANGUAGE: typescript
CODE:
// ✅
function doSomething(input: Record<string, unknown>) {
  Object.entries(input).forEach(([key, item]) => {
    // ...
  }
}

----------------------------------------

TITLE: Installing Sentry Profiling Package with .NET CLI
DESCRIPTION: Command to add the Sentry.Profiling NuGet package to your project using the .NET CLI.

LANGUAGE: shell
CODE:
dotnet add package Sentry.Profiling

----------------------------------------

TITLE: Creating Sample Events for Sentry using cURL
DESCRIPTION: Shell commands using cURL to create sample events for different platforms (native, minidump, python) in Sentry for testing purposes.

LANGUAGE: shell
CODE:
cd ~/code/sentry

# Given a DSN of http://3385d72507004b2b8129b2cb963d79b2@dev.getsentry.net:8000/1
export SENTRY_KEY="3385d72507004b2b8129b2cb963d79b2"

# Create a native event
curl -v -XPOST http://${SENTRY_KEY}@dev.getsentry.net:8000/api/1/store/ \
 -H 'Content-Type: application/json' \
 -H "X-Sentry-Auth: Sentry sentry_version=7,sentry_client=sentry-curl/1.0,sentry_key=${SENTRY_KEY}" \
 -d "$(cat src/sentry/data/samples/native.json)"

# Create a minidump event
curl -v -X POST "http://dev.getsentry.net:8000/api/1/minidump/?sentry_key=${SENTRY_KEY}" \
 -F upload_file_minidump=@tests/fixtures/native/windows.dmp \
 -F upload_file_makefile=@Makefile \
 -F upload_file_license=@LICENSE

# Create a python event
curl -v -XPOST http://${SENTRY_KEY}@dev.getsentry.net:8000/api/1/store/ \
 -H 'Content-Type: application/json' \
 -H "X-Sentry-Auth: Sentry sentry_version=7,sentry_client=sentry-curl/1.0,sentry_key=${SENTRY_KEY}" \
 -d "$(cat src/sentry/data/samples/python.json)"

----------------------------------------

TITLE: Sentry Integrations Feature Matrix
DESCRIPTION: A markdown table showing all available Sentry Node.js integrations with their features including auto-enablement status, error handling support, tracing capabilities, and additional context provision.

LANGUAGE: markdown
CODE:
|                                                           | **Auto Enabled** | **Errors** | **Tracing** | **Additional Context** |
| --------------------------------------------------------- | :--------------: | :--------: | :---------: | :--------------------: |
| [`amqplibIntegration`](./amqplib)                         |        ✓         |            |      ✓      |                        |
| [`consoleIntegration`](./console)                         |        ✓         |            |             |           ✓            |
| [`contextLinesIntegration`](./contextlines)               |        ✓         |     ✓      |             |                        |

----------------------------------------

TITLE: Initializing SentryWidgetsFlutterBinding for Early Frame Tracking in Flutter
DESCRIPTION: Example showing how to manually initialize the Sentry widgets binding when it needs to be done before SentryFlutter.init(). This ensures frame tracking works properly with early binding initialization.

LANGUAGE: dart
CODE:
void main() {
  SentryWidgetsFlutterBinding.ensureInitialized();
  // ... rest of your initialization code
}

----------------------------------------

TITLE: Configuring Java Logging Properties
DESCRIPTION: Configuration for java.util.logging including both console and Sentry handlers with different log levels.

LANGUAGE: ini
CODE:
# Enable the Console and Sentry handlers
handlers=java.util.logging.ConsoleHandler,io.sentry.jul.SentryHandler

# Set the default log level to INFO
.level=INFO

# Override the Sentry handler log level to WARNING
io.sentry.jul.SentryHandler.level=WARNING

----------------------------------------

TITLE: Configuring Sentry Release Version in YAML
DESCRIPTION: This YAML snippet sets up Sentry configuration options, specifically defining the release version for a project. It uses the format 'project-name@version-number' to identify the release.

LANGUAGE: yaml
CODE:
sentry:
    options:
        release: "my-project-name@2.3.12"

----------------------------------------

TITLE: Configuring Loguru Integration Options
DESCRIPTION: Example showing how to initialize Sentry SDK with custom Loguru integration options for logging levels.

LANGUAGE: python
CODE:
import sentry_sdk
from loguru import logger

from sentry_sdk.integrations.loguru import LoguruIntegration
from sentry_sdk.integrations.loguru import LoggingLevels

sentry_loguru = LoguruIntegration(
    level=LoggingLevels.INFO.value,        # Capture info and above as breadcrumbs
    event_level=LoggingLevels.ERROR.value  # Send errors as events
)

sentry_sdk.init(
    # ...
    integrations=[
        sentry_loguru,
    ],
)

----------------------------------------

TITLE: Initializing Sentry with Release Configuration in Rust
DESCRIPTION: This code snippet demonstrates how to initialize Sentry in a Rust project with a release name. It shows both manual release name setting and the use of the release_name macro for automatic inference.

LANGUAGE: rust
CODE:
use sentry;

let _guard = sentry::init(("___PUBLIC_DSN___", sentry::ClientOptions {
    release: Some("my-project-name@2.3.12".into()),
    // OR automatically:
    // release: sentry::release_name!(),
    ..Default::default()
}));

----------------------------------------

TITLE: Installing Sentry Vue SDK with pnpm
DESCRIPTION: This command installs the @sentry/vue package using the pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add @sentry/vue

----------------------------------------

TITLE: Installing Sentry and OpenTelemetry Gems in Ruby
DESCRIPTION: Gemfile configuration showing required dependencies for integrating Sentry with OpenTelemetry. The sentry-opentelemetry gem requires opentelemetry-sdk version 1.0.0 or higher.

LANGUAGE: ruby
CODE:
gem "sentry-ruby"
gem "sentry-rails"
gem "sentry-opentelemetry"

gem "opentelemetry-sdk"
gem "opentelemetry-instrumentation-all"

----------------------------------------

TITLE: Configuring RestTemplate with Sentry Span Interceptor (Spring 5)
DESCRIPTION: This snippet shows how to configure a RestTemplate bean with SentrySpanClientHttpRequestInterceptor to create spans for outgoing HTTP requests in Spring 5 applications.

LANGUAGE: java
CODE:
import io.sentry.IHub;
import io.sentry.spring.tracing.SentrySpanClientHttpRequestInterceptor;
import java.util.Collections;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriTemplateHandler;

@Configuration
class AppConfig {

  @Bean
  RestTemplate restTemplate(IHub hub) {
    RestTemplate restTemplate = new RestTemplate();
    SentrySpanClientHttpRequestInterceptor sentryRestTemplateInterceptor =
        new SentrySpanClientHttpRequestInterceptor(hub);
    restTemplate.setInterceptors(Collections.singletonList(sentryRestTemplateInterceptor));
    return restTemplate;
  }
}

LANGUAGE: kotlin
CODE:
import io.sentry.IHub
import io.sentry.spring.tracing.SentrySpanClientHttpRequestInterceptor
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.web.client.RestTemplate
import org.springframework.web.util.UriTemplateHandler

@Configuration
class AppConfig {

  @Bean
  fun restTemplate(hub: IHub): RestTemplate {
    val sentryRestTemplateInterceptor = SentrySpanClientHttpRequestInterceptor(hub)

    return RestTemplate().apply {
      interceptors = listOf(sentryRestTemplateInterceptor)
    }
  }
}

----------------------------------------

TITLE: Implementing Request Filtering with shouldCreateSpanForRequest
DESCRIPTION: Configuration to filter out unwanted spans from specific URLs using a custom filtering function.

LANGUAGE: javascript
CODE:
Sentry.init({
  // ...
  integrations: [
    Sentry.reactNativeTracingIntegration({
      shouldCreateSpanForRequest: (url) => {
        // Do not create spans for outgoing requests to a `/health/` endpoint
        return !url.match(/\/health\/?$/);
      },
    }),
  ],
});

----------------------------------------

TITLE: Initializing Sentry AWS Integration in JavaScript
DESCRIPTION: Shows how to initialize Sentry with AWS SDK instrumentation. This integration automatically creates spans for AWS SDK operations and is powered by OpenTelemetry's AWS SDK instrumentation package.

LANGUAGE: JavaScript
CODE:
import * as Sentry from '@sentry/aws-serverless';

Sentry.init({
  integrations: [Sentry.awsIntegration()],
});

----------------------------------------

TITLE: Sequence Diagram: Webhook Delivery Process
DESCRIPTION: Mermaid sequence diagram illustrating the process of delivering webhooks from the Control Silo to the Region Silo, including error handling and rescheduling.

LANGUAGE: mermaid
CODE:
sequenceDiagram
  participant Control Silo
  participant Region Silo

  Control Silo ->> Control Silo : Fetch head block of mailbox
  loop foreach message
    Control Silo ->> Control Silo : if hook is above max attempts delete.
    Control Silo ->> Region Silo : Deliver hook
    alt success
      Region Silo -->> Control Silo : 200-40x
      Control Silo ->> Control Silo : delete hook
    else error
      Region Silo -->> Control Silo : 50x
      Control Silo ->> Control Silo : increment attempt and reschedule
    end
  end

----------------------------------------

TITLE: Disabling Performance Monitoring in Ember
DESCRIPTION: Configuration to disable automatic performance instrumentation in the Sentry Ember addon.

LANGUAGE: javascript
CODE:
ENV["@sentry/ember"] = {
  disablePerformance: true,
};

----------------------------------------

TITLE: Setting Up Sentry Dev Server Configuration
DESCRIPTION: Configuration parameters for running the Sentry development server with workers. Includes script path, parameters, and working directory settings.

LANGUAGE: plaintext
CODE:
Script path: ~/venv/sentry/bin/sentry
Parameters: devserver --workers
Working dir: ~/dev/sentry/src

----------------------------------------

TITLE: Wrapping SupportSQLiteOpenHelper in Java
DESCRIPTION: Create an instrumented SupportSQLiteOpenHelper instance using SentrySupportSQLiteOpenHelper in Java.

LANGUAGE: java
CODE:
import io.sentry.android.sqlite.SentrySupportSQLiteOpenHelper;

private final SupportSQLiteOpenHelper myOpenHelper = new MyOpenHelper();
private final SupportSQLiteOpenHelper instrumentedOpenHelper = SentrySupportSQLiteOpenHelper.create(myOpenHelper);

----------------------------------------

TITLE: Querying Sentry API with Curl
DESCRIPTION: This snippet demonstrates how to make a basic API request to Sentry using curl. It queries the groups endpoint for a specific organization and project.

LANGUAGE: bash
CODE:
curl -i https://sentry.io/api/0/organizations/acme/projects/1/groups/

----------------------------------------

TITLE: Installing Sentry React SDK with pnpm
DESCRIPTION: Installs the @sentry/react package using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add @sentry/react

----------------------------------------

TITLE: Adding Sentry Log4j2 Dependency in SBT
DESCRIPTION: This Scala snippet adds the Sentry Log4j2 dependency to an SBT project. It specifies the library dependency using the groupId, artifactId, and version for the Sentry Log4j2 integration.

LANGUAGE: scala
CODE:
libraryDependencies += "io.sentry" % "sentry-log4j2" % "{{@inject packages.version('sentry.java.log4j2', '4.2.0') }}"

----------------------------------------

TITLE: Including Security Policy Documentation Content in Markdown
DESCRIPTION: MDX include directive that imports the shared security policy reporting documentation content from a platforms subfolder.

LANGUAGE: markdown
CODE:
<Include name="platforms/security-policy-reporting/content.mdx" />

----------------------------------------

TITLE: Configuring allowUrls and denyUrls in JavaScript Sentry SDK
DESCRIPTION: Set up allowed and denied URL patterns to control which domains can report errors to Sentry.

LANGUAGE: javascript
CODE:
Sentry.init({
  allowUrls: [/https?:\/\/((cdn|www)\.)?example\.com/],
});

----------------------------------------

TITLE: Implementing Basic Sentry Error Capture in JavaScript
DESCRIPTION: Basic error capture setup that intentionally triggers an error by calling an undefined function 'foo' and captures the exception using Sentry. The code is wrapped in a setTimeout to demonstrate async error handling.

LANGUAGE: javascript
CODE:
setTimeout(() => {
  try {
    foo();
  } catch (e) {
    Sentry.captureException(e);
  }
}, 99);

----------------------------------------

TITLE: Initializing Sentry with Transaction Ignoring in PHP
DESCRIPTION: This snippet initializes Sentry with a configuration to ignore specific transactions. It sets up Sentry to ignore the 'GET /health' route, which is likely a health check endpoint that doesn't need to be tracked for errors or performance.

LANGUAGE: php
CODE:
\Sentry\init([
    'ignore_transactions' => [
        'GET /health',
    ],
]);