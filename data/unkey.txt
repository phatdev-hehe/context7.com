TITLE: Retrieving API Key Configuration in TypeScript
DESCRIPTION: Basic example of fetching an API key's configuration using Unkey. The request requires a keyId parameter and returns detailed configuration information or an error if the key is not found.

LANGUAGE: typescript
CODE:
const { result, error } = await unkey.keys.get({ keyId: "key_123" });

----------------------------------------

TITLE: Creating an API Key with Unkey in TypeScript
DESCRIPTION: This snippet demonstrates how to create an API key using the Unkey service. It includes various options such as prefix, byte length, owner ID, metadata, expiration, rate limiting, usage limits, and automatic refill.

LANGUAGE: typescript
CODE:
const created = await unkey.keys.create({
	apiId:"api_7oKUUscTZy22jmVf9THxDA",
	prefix:"xyz",
	byteLength:16,
	ownerId:"chronark",
	meta:{
		hello: "world"
	},
	expires: 1686941966471,
	ratelimit: {
      type: "async",
      duration: 1000,
	  limit: 10,
	},
	remaining: 1000,
    refill: {
      interval: "monthly",
      amount: 100,
      refillDay: 15,
    },
  enabled: true
})

console.log(created)

----------------------------------------

TITLE: Creating API Key with Global Rate Limiting in Unkey
DESCRIPTION: Example of creating an API key with global consensus rate limiting. This configuration ensures strict global rate limit enforcement across all regions at the cost of higher latency.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.createKey \
  --header 'Authorization: Bearer <UNKEY>' \
  --header 'Content-Type: application/json' \
  --data '{
	"apiId":"<API_ID>",
	"prefix":"xyz",
	"byteLength":16,
	"ownerId":"<USER_ID>",
	"ratelimit":{
		"async": false, // origin rate limiting
		"limit":10,
		"duration": 1000
	}
}'

----------------------------------------

TITLE: Basic Rate Limit Request in TypeScript
DESCRIPTION: Example of making a basic rate limit request with Unkey, specifying duration, identifier, limit and namespace.

LANGUAGE: typescript
CODE:
await unkey.ratelimits.limit({
    duration: 600,
    identifier: "userId",
    limit: 2000,
    namespace: "test"
  })

----------------------------------------

TITLE: Key Verification Response Structure - JSON Example
DESCRIPTION: Example JSON response from a successful key verification showing the complete response structure including validity status, rate limits, permissions, and associated metadata.

LANGUAGE: json
CODE:
{
  result: {
  "keyId": "key_1234",
  "valid": true,
  "name": "Customer X",
  "ownerId": "user_123",
  "meta": {
    "roles": [
      "admin",
      "user"
    ],
    "stripeCustomerId": "cus_1234"
  },
  "expires": 123,
  "ratelimit": {
    "limit": 10,
    "remaining": 9,
    "reset": 3600000
  },
  "remaining": 1000,
  "code": "VALID",
  "enabled": true,
  "permissions": [
    "dns.record.update",
    "dns.record.delete"
  ],
  "environment": "test",
  "identity": {
    "id": "<string>",
    "externalId": "<string>",
    "meta": {}
  }
}
}

----------------------------------------

TITLE: Express Server with Unkey Authentication
DESCRIPTION: Complete Express server implementation with Unkey authentication middleware for protecting routes. Includes environment configuration and key verification.

LANGUAGE: typescript
CODE:
import express, { Request, Response, Application } from 'express';
import dotenv from 'dotenv';
import { verifyKey } from '@unkey/api';
//For env File
dotenv.config();

const app: Application = express();
const port = process.env.PORT || 8000;
const apiId = process.env.UNKEY_API_ID // copy this from the dashboard

app.get('/', (req: Request, res: Response) => {
  res.send('Welcome to Express & TypeScript Server');
});

// This endpoint is protected by Unkey
app.get('/secret', async (req: Request, res: Response) => {
  const authHeader = req.headers["authorization"]
  const key = authHeader?.toString().replace("Bearer ", "");
  if (!key) {
    return res.status(401).send("Unauthorized")
  }

  const { result, error } = await verifyKey({ key, apiId });
  if (error) {
    // This may happen on network errors
    // We already retry the request 5 times, but if it still fails, we return an error
    console.error(error);
    res.status(500);
    return res.status(500).send("Internal Server Error")
  }

  if (!result.valid) {
    res.status(401);
    return res.status(401).send("Unauthorized")
  }

  return res.status(200).send(JSON.stringify(result));
})
app.listen(port, () => {
  console.log(`Server is listening at http://localhost:${port}`);
});

----------------------------------------

TITLE: Protecting API Routes with withUnkey in Next.js
DESCRIPTION: Example of using the withUnkey handler to protect API routes in Next.js. It demonstrates how to wrap a route handler and access the verification response.

LANGUAGE: typescript
CODE:
import { NextRequestWithUnkeyContext, withUnkey } from '@unkey/nextjs';

export const POST = withUnkey(async (req) => {

  // Process the request here
  // You have access to the verification response using `req.unkey`
  console.log(req.unkey);

  return new Response('Your API key is valid!');
});

----------------------------------------

TITLE: Example Response Structure for Listing Rate Limit Overrides in Unkey API (TypeScript)
DESCRIPTION: This code snippet illustrates the structure of the response received when listing rate limit overrides in the Unkey API. It includes details such as the override ID, identifier, limit, duration, and async flag.

LANGUAGE: typescript
CODE:
{
  result: {
    overrides: [
       {
        id: 'rlor_1234',
        identifier: 'customer_123',
        limit: 10,
        duration: 50000,
        async: false
      }
    ],
    total: 1,
    cursor: 'rlor_1234'
  }
}

----------------------------------------

TITLE: Basic Unkey Middleware Setup in Hono.js
DESCRIPTION: Demonstrates the minimal setup for using the Unkey middleware in a Hono.js application. It includes importing necessary modules, setting up the Hono app, and using the middleware to authenticate API keys.

LANGUAGE: typescript
CODE:
import { Hono } from "hono"
import { type UnkeyContext, unkey } from "@unkey/hono";

const app = new Hono<{ Variables: { unkey: UnkeyContext } }>();

app.use("*", unkey({
  apiId: "<UNKEY_API_ID>"
}));


app.get("/somewhere", (c) => {
  // access the unkey response here to get metadata of the key etc
  const ... = c.get("unkey")

  return c.text("yo")
})

----------------------------------------

TITLE: Express Server with Unkey Rate Limiting
DESCRIPTION: Complete Express server implementation with Unkey rate limiting configuration and protected endpoint setup.

LANGUAGE: typescript
CODE:
import express, { Request, Response, Application } from 'express';
import dotenv from 'dotenv';
import { Ratelimit } from '@unkey/ratelimit';
//For env File
dotenv.config();

const app: Application = express();
const port = process.env.PORT || 8000;

/**
This can be a seperate util for easy configurable ratelimiting across
multiple routes.

namespace = The route identifier you would like to ratelimit
limit = The amount of requests
duration = amount of time to limit against for example "30s"

**/
const limiter = new Ratelimit({
    namespace: "express-example",
    limit: 2,
    duration: "30s",
    rootKey: process.env.UNKEY_ROOT_KEY
});


app.get('/', (req: Request, res: Response) => {
  res.send('Welcome to Express & TypeScript Server');
});

// This endpoint is protected by Unkey
app.get('/secret', async (req: Request, res: Response) => {
  const identifier = req.getUserId() // or ip or anything else you want

  const ratelimit = await limiter.limit(identifier)
  if (!ratelimit.success){
    res.status(429).send("Please try again later")
  }

  return res.status(200).send("ok");
})
app.listen(port, () => {
  console.log(`Server is listening at http://localhost:${port}`);
});

----------------------------------------

TITLE: Verifying Keys with Unkey API - TypeScript Implementation
DESCRIPTION: Example code showing how to verify a key using the Unkey API client. The code demonstrates error handling, validity checking, and accessing verification result data.

LANGUAGE: typescript
CODE:
import { verifyKey } from "@unkey/api";

const { result, error } = await verifyKey({ key: "key_123", apiId: "api_123" });

if (error) {
  // handle potential network or bad request error
  // a link to our docs will be in the `error.docs` field
  console.error(error.message);
  return;
}

if (!result.valid) {
  // do not grant access
  return;
}

// process request
console.log(result);

----------------------------------------

TITLE: Creating New API Keys in Python
DESCRIPTION: Creates a new API key with configurable parameters including name, permissions, rate limits, and expiration settings.

LANGUAGE: python
CODE:
import os
import unkey
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.keys.create(request={
    "api_id": "api_123",
    "name": "my key",
    "external_id": "team_123",
    "meta": {
        "billingTier": "PRO",
        "trialEnds": "2023-06-16T17:16:37.161Z",
    },
    "roles": [
        "admin",
        "finance",
    ],
    "permissions": [
        "domains.create_record",
        "say_hello",
    ],
    "expires": 1623869797161,
    "remaining": 1000,
    "refill": {
        "interval": unkey.CreateKeyInterval.DAILY,
        "amount": 100,
    },
    "ratelimit": {
        "limit": 10,
        "type": unkey.CreateKeyType.FAST,
        "duration": 60000,
    },
    "enabled": False,
})

----------------------------------------

TITLE: Authenticating Unkey API Requests with Bearer Token
DESCRIPTION: Example showing how to authenticate API requests using a root key as a bearer token in the Authorization header. The root key can be found in the Unkey Dashboard settings.

LANGUAGE: bash
CODE:
curl https://api.unkey.dev/v1/... \
  -H "Authorization: Bearer unkey_xxx"

----------------------------------------

TITLE: Preventing SQL Injection in ClickHouse Queries with TypeScript
DESCRIPTION: Demonstrates how to use parameterized queries and zod schemas to prevent SQL injection in ClickHouse queries. The example shows both an unsafe implementation with string interpolation and a secure version using parameterized queries.

LANGUAGE: typescript
CODE:
export const getLogsClickhousePayload = z.object({
  workspaceId: z.string(),
  paths: z
    .array(
      z.object({
        operator: z.enum(["is", "startsWith", "endsWith", "contains"]),
        value: z.string(),
      }),
    )
    .nullable(),
});

export type GetLogsClickhousePayload = z.infer<typeof getLogsClickhousePayload>;

export function getLogs(ch: Querier) {
  return async (args: GetLogsClickhousePayload) => {
    // Generate dynamic path conditions
    const pathConditions =
      args.paths
        ?.map((p) => {
          switch (p.operator) {
            case "is":
              return `path = '${p.value}'`;
            case "startsWith":
              return `startsWith(path, '${p.value}')`;
            case "endsWith":
              return `endsWith(path, '${p.value}')`;
            case "contains":
              return `like(path, '%${p.value}%')`;
            default:
              return null;
          }
        })
        .filter(Boolean)
        .join(" OR ") || "TRUE";

    const query = ch.query({
      query: `
        WITH filtered_requests AS (
          SELECT *
          FROM metrics.raw_api_requests_v1
          WHERE workspace_id = {workspaceId: String}
            AND time BETWEEN {startTime: UInt64} AND {endTime: UInt64}
            ---------- Apply path filter using pre-generated conditions
            AND (${pathConditions})
                  )
        
        SELECT
          request_id,
          time,
          workspace_id,
          host,
          method,
          path,
          request_headers,
          request_body,
          response_status,
          response_headers,
          response_body,
          error,
          service_latency
        FROM filtered_requests
        ORDER BY time DESC, request_id DESC
        LIMIT {limit: Int}`,
      params: getLogsClickhousePayload,
      schema: log,
    });

    return query(args);
  };
}

----------------------------------------

TITLE: Creating API Key with Edge Rate Limiting in Unkey
DESCRIPTION: Example of creating an API key with local edge-based rate limiting enabled. This configuration prioritizes low latency by maintaining rate limits at each edge location independently, with async updates to global state.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.createKey \
  --header 'Authorization: Bearer <UNKEY>' \
  --header 'Content-Type: application/json' \
  --data '{
	"apiId":"<API_ID>",
	"prefix":"xyz",
	"byteLength":16,
	"ownerId":"<USER_ID>",
	"ratelimit":{
		"async": true, // edge rate limiting
		"limit": 10,
		"duration": 1000
	}
}'

----------------------------------------

TITLE: Creating API Keys with Unkey SDK in Java Spring Boot Controller
DESCRIPTION: This code snippet shows a Spring Boot controller that handles API key creation requests using the Unkey SDK. It uses the KeyService to create a new API key based on the provided KeyCreateRequest and returns a KeyCreateResponse.

LANGUAGE: java
CODE:
package com.example.myapp;

import com.unkey.unkeysdk.dto.KeyCreateResponse;
import com.unkey.unkeysdk.dto.KeyCreateRequest;

@RestController
public class APIController {

    private static IKeyService keyService = new KeyService();

    @PostMapping("/createKey")
    public KeyCreateResponse createKey(
            @RequestBody KeyCreateRequest keyCreateRequest,
            @RequestHeader("Authorization") String authToken) {
        // Delegate the creation of the key to the KeyService from the SDK
        return keyService.createKey(keyCreateRequest, authToken);
    }
}

----------------------------------------

TITLE: Basic Ratelimit Usage in TypeScript
DESCRIPTION: Simple example of implementing ratelimiting with unkey library. Shows basic usage pattern for checking if a request should be allowed.

LANGUAGE: typescript
CODE:
const { success } = await unkey.limit("my-user-id")
if (!success){
  // reject request
}
// handle request

----------------------------------------

TITLE: Verifying Key and Handling Errors with Unkey API
DESCRIPTION: Example of verifying a key using the Unkey API, demonstrating proper error handling and response checking. This snippet shows how to check for errors and handle both invalid keys and successful verifications.

LANGUAGE: typescript
CODE:
import { verifyKey } from "@unkey/api";

const { result, error } = await verifyKey("key_123");

if (error) {
  // handle potential network or bad request error
  // a link to our docs will be in the `error.docs` field
  console.error(error.message);
  return;
}

if (!result.valid) {
  // do not grant access
  return;
}

// process request
console.log(result);

----------------------------------------

TITLE: Creating a Live Key with Environment in Unkey API
DESCRIPTION: This snippet shows how to create a live key with a specific environment using the Unkey API. It sets the environment to 'live' and uses the prefix 'sk_live'.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.createKey \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
    "environment": "live",
    "prefix": "sk_live"
  }'

----------------------------------------

TITLE: KeyCreateRequest DTO for Unkey SDK in Java
DESCRIPTION: This code defines the KeyCreateRequest data transfer object used for creating API keys with the Unkey SDK. It includes fields for API ID, prefix, name, byte length, owner ID, metadata, expiration, remaining uses, and rate limit settings.

LANGUAGE: java
CODE:
public class KeyCreateRequest {
    @NonNull
    private String apiId;
    private String prefix;
    private String name;
    private Integer byteLength;
    private String ownerId;
    private Meta meta;
    private Integer expires;
    private Integer remaining;
    private KeyRateLimit ratelimit;
}

----------------------------------------

TITLE: Implementing Rate Limiting in Hono Application
DESCRIPTION: TypeScript code showcasing the implementation of rate limiting using Unkey in a Hono application. It includes setting up the limiter and applying it to a route.

LANGUAGE: typescript
CODE:
import { Hono } from "hono";
import { Ratelimit } from "@unkey/ratelimit";

const app = new Hono();

const limiter = new Ratelimit({
	namespace: "hono-example",
 	limit: 2,
 	duration: "30s",
 	rootKey: process.env.UNKEY_ROOT_KEY
});

app.get("/", (c) => {
  const identifier = getUserId(); // or ip or anything else you want
  const ratelimit = await limiter.limit(identifier)
  if (!ratelimit.success){
   return c.status(429).text("Please try again later")
  }
	return c.text("Hello Hono!");
});

export default app;

----------------------------------------

TITLE: Disabling a Key using Unkey API
DESCRIPTION: This snippet demonstrates how to disable a key using the Unkey API. It sends a POST request to the keys.updateKey endpoint with the key ID and sets the 'enabled' flag to false.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.updateKey \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
  "enabled": false,
  "keyId": "<keyId>"
}'

----------------------------------------

TITLE: Configuring Ratelimit in TypeScript
DESCRIPTION: Example of how to configure the Ratelimit instance with various options including rootKey, namespace, limit, duration, and async flag.

LANGUAGE: typescript
CODE:
import { Ratelimit } from "@unkey/ratelimit";

const unkey = new Ratelimit({
  rootKey: process.env.UNKEY_ROOT_KEY,
  namespace: "my-app",
  limit: 10,
  duration: "30s",
  async: true,
});

----------------------------------------

TITLE: Setting Ratelimit Override with Namespace ID in TypeScript
DESCRIPTION: This snippet demonstrates how to set a ratelimit override using the Unkey API with a namespace ID. It specifies the user identifier, limit, duration, and namespace ID.

LANGUAGE: typescript
CODE:
const override = await unkey.ratelimit.setOverride({
    identifier: "user_123",
    limit: 10,
    duration: 60000,
    namespaceId: "rlns_1234",
    async: true
})

----------------------------------------

TITLE: Verifying Nested Permissions with Unkey API
DESCRIPTION: Demonstrates how to verify complex permission structures using logical operators (OR/AND) to check for either admin access or specific DNS-related permissions.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.verifyKey \
  --header 'Content-Type: application/json' \
  --data '{
    "apiId": "api_1234",
    "key": "sk_1234",
    "authorization": {
      "permissions": {
        "or": [
          "admin",
          {
            "and": [
              "dns.record.read",
              "dns.record.update"
            ]
          }
        ]
      }
    }
  }'

----------------------------------------

TITLE: Handling Successful API Key Retrieval
DESCRIPTION: Example showing successful API key configuration retrieval with response handling. Demonstrates the structure of the returned configuration object including keyId, apiId, remaining requests, and expiration.

LANGUAGE: typescript
CODE:
const { result, error } = await unkey.keys.get({ keyId: "key_123" });

if (error){
  // error will be undefined if the request was successful
}


// result
{
  keyId: "key_123",
  apiId: "api_123",
  remaining: 1024,
  expires: 1630540800000,
}

----------------------------------------

TITLE: Verifying API Keys in Python
DESCRIPTION: Verifies an API key's validity and checks against configured rate limits.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.keys.verify(request={
    "key": "sk_1234",
    "api_id": "api_1234",
    "ratelimits": [
        {
            "name": "tokens",
            "limit": 500,
            "duration": 3600000,
        },
        {
            "name": "tokens",
            "limit": 20000,
            "duration": 86400000,
        },
    ],
})

----------------------------------------

TITLE: Unkey API Key Creation Response in TypeScript
DESCRIPTION: This snippet shows the expected response format when creating an API key with Unkey. It includes the generated key and a unique key identifier.

LANGUAGE: typescript
CODE:
{
  result: {
    key: "xyz_AS5HDkXXPot2MMoPHD8jnL"
    keyId: "key_YALWkHZaA4neUa1JJoXTAw"
	}
}

----------------------------------------

TITLE: Unkey API Error Response Structure in JSON
DESCRIPTION: Demonstrates the standard error response format from Unkey API, including machine-readable error codes, human-readable messages, documentation links, and request IDs for debugging purposes.

LANGUAGE: json
CODE:
{
  "error": {
    "code": "UNAUTHORIZED",
    "message": "We were unable to authorize your request. Either your key was missing, malformed or does not have the required permissions.",
    "docs": "https://unkey.api/docs/api-reference/errors/code/UNAUTHORIZED",
    "requestId": "req_1234567890"
  }
}

----------------------------------------

TITLE: Creating a Test Key with Environment in Unkey API
DESCRIPTION: This snippet demonstrates how to create a test key with a specific environment using the Unkey API. It sets the environment to 'test' and uses the prefix 'sk_test'.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.createKey \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
    "environment": "test",
    "prefix": "sk_test"
  }'

----------------------------------------

TITLE: Listing API Keys with Unkey in TypeScript
DESCRIPTION: This snippet demonstrates how to use Unkey's API to list keys for a specific API. It includes parameters for pagination and filtering by ownerId.

LANGUAGE: typescript
CODE:
const listKeys = await unkey.apis.listKeys({
  apiId: "api_QUGih1EMtBy9eSSf3vujmF",
  limit: 100,
})

console.log(listKeys)

----------------------------------------

TITLE: Preventing Data Leaks in tRPC Procedures with TypeScript
DESCRIPTION: Demonstrates how to properly validate user access in tRPC procedures to prevent unauthorized data access. The example shows both an unsafe implementation that trusts client input and a secure version that verifies resource ownership through the server context.

LANGUAGE: typescript
CODE:
// UNSAFE: Using client-provided workspaceId
export const queryLogs = rateLimitedProcedure(ratelimit.update)
  .input(queryLogsPayload)
  .output(LogsResponse)
  .query(async ({ input }) => {
    const result = await clickhouse.api.logs({
      ...transformedInputs,
      workspaceId: input.workspaceId, // Security vulnerability
      cursorRequestId: input.cursor?.requestId ?? null,
      cursorTime: input.cursor?.time ?? null,
    });
  });

// SAFE: Check workspace ownership via context
export const queryLogs = rateLimitedProcedure(ratelimit.update)
  .input(queryLogsPayload)
  .output(LogsResponse)
  .query(async ({ ctx, input }) => {
    const workspace = await db.query.workspaces.findFirst({
      where: (table, { and, eq, isNull }) =>
        and(eq(table.tenantId, ctx.tenant.id), isNull(table.deletedAtM)),
    });
    if (!workspace) {
      throw new TRPCError({
        code: "NOT_FOUND",
        message: "Workspace not found",
      });
    }
    const result = await clickhouse.api.logs({
      ...transformedInputs,
      workspaceId: workspace.id, // Safe: verified ownership
      cursorRequestId: input.cursor?.requestId ?? null,
      cursorTime: input.cursor?.time ?? null,
    });
  });

----------------------------------------

TITLE: Retrieving Decrypted Keys from Unkey API
DESCRIPTION: GET request to retrieve a decrypted key using the Unkey API. Requires a root key with decrypt permission and the key ID to retrieve.

LANGUAGE: shell
CODE:
curl --request GET \
  --url https://api.unkey.dev/v1/keys.getKey?keyId={KEY_ID}&decrypt=true \
  --header 'Authorization: Bearer {ROOT_KEY}'

----------------------------------------

TITLE: Creating Keys with Unkey Python SDK
DESCRIPTION: Example of creating keys using the Unkey Python SDK. Shows how to initialize the client and create keys with various configurations including API ID, name, owner, metadata, roles, permissions, expiration, rate limits and more.

LANGUAGE: python
CODE:
import os
import unkey
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.migrations.create_keys(request=[
    {
        "api_id": "api_123",
        "name": "my key",
        "start": "unkey_32kq",
        "owner_id": "team_123",
        "meta": {
            "billingTier": "PRO",
            "trialEnds": "2023-06-16T17:16:37.161Z",
        },
        "roles": [
            "admin",
            "finance",
        ],
        "permissions": [
            "domains.create_record",
            "say_hello",
        ],
        "expires": 1623869797161,
        "remaining": 1000,
        "refill": {
            "interval": unkey.V1MigrationsCreateKeysInterval.DAILY,
            "amount": 100,
        },
        "ratelimit": {
            "limit": 10,
            "refill_rate": 1,
            "refill_interval": 60,
            "type": unkey.V1MigrationsCreateKeysType.FAST,
        },
        "enabled": False,
    },
])

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Implement Bun Server with Unkey Authentication
DESCRIPTION: TypeScript implementation of a Bun HTTP server with Unkey key verification. Handles authentication via Bearer tokens and includes error handling for network issues.

LANGUAGE: typescript
CODE:
import { verifyKey } from "@unkey/api";

const server = Bun.serve({
  async fetch(req) {
    const key = req.headers.get("Authorization")?.replace("Bearer ", "");
    if (!key) {
      return new Response("Unauthorized", { status: 401 });
    }

    const { result, error } = await verifyKey(key);
    if (error) {
      // This may happen on network errors
      // We already retry the request 5 times, but if it still fails, we return an error
      console.error(error);
      return Response.json("Internal Server Error", { status: 500 });
    }

    if (!result.valid) {
      return new Response("Unauthorized", { status: 401 });
    }

    return Response.json(result);
  },
  port: 8000,
});
console.log(`Listening on ${server.url}`);

----------------------------------------

TITLE: Creating New API with Unkey
DESCRIPTION: Example of creating a new API using the Unkey client. The request requires a name parameter and returns an API ID in the response.

LANGUAGE: typescript
CODE:
await unkey.apis.create({ name: "Unkey production" });

LANGUAGE: typescript
CODE:
{
  result: {
    apiId : "api_123"
  }
}

----------------------------------------

TITLE: Creating Protected Route with Unkey Authentication in Next.js
DESCRIPTION: TypeScript code for creating a protected route using Unkey authentication in a Next.js application. It checks for a valid API key and returns an appropriate response.

LANGUAGE: typescript
CODE:
import { NextRequestWithUnkeyContext, withUnkey } from '@unkey/nextjs';
import { NextResponse } from 'next/server';

export const POST = withUnkey(async (req) => {
  if (!req.unkey.valid) {
    return new NextResponse('unauthorized', { status: 403 });
  }

  // Process the request here
  // You have access to the verification response using `req.unkey`
  console.log(req.unkey);
  return new NextResponse('Your API key is valid!');
});

----------------------------------------

TITLE: Creating a Key with Daily Refill in Unkey
DESCRIPTION: This snippet demonstrates how to create a new API key using Unkey that can be used 100 times a day and automatically refills daily. It uses a POST request to the Unkey API.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.createKey \
  --header 'Authorization: Bearer <UNKEY>' \
  --header 'Content-Type: application/json' \
  --data '{
    "apiId":"<API_ID>",
    "remaining": 100,
    "refill": {
      "interval": "daily",
      "amount": 100
    }
  }'

----------------------------------------

TITLE: Implementing Rate Limited tRPC Procedure
DESCRIPTION: TypeScript code creating a rate-limited tRPC procedure wrapper using Unkey's ratelimit functionality

LANGUAGE: typescript
CODE:
export const rateLimitedProcedure = ({
  limit,
  duration,
}: {
  limit: number;
  duration: number;
}) =>
  protectedProcedure.use(async (opts) => {
    const unkey = new Ratelimit({
      rootKey: env.UNKEY_ROOT_KEY,
      namespace: `trpc_${opts.path}`,
      limit: limit ?? 3,
      duration: duration ? `${duration}s` : `${5}s`,
    });

    const ratelimit = await unkey.limit(opts.ctx.session.user.id);

    if (!ratelimit.success) {
      throw new TRPCError({
        code: "TOO_MANY_REQUESTS",
        message: JSON.stringify(ratelimit),
      });
    }

    return opts.next({
      ctx: {
        ...opts.ctx,
        remaining: ratelimit.remaining,
      },
    });
  });

----------------------------------------

TITLE: API Key Update Response in TypeScript
DESCRIPTION: This snippet shows the expected response format when updating an API key using the Unkey system. It includes the updated key and key ID.

LANGUAGE: typescript
CODE:
{
  result: {
    key: "xyz_AS5HDkXXPot2MMoPHD8jnL"
    keyId: "key_YALWkHZaA4neUa1JJoXTAw"
	}
}

----------------------------------------

TITLE: Error Handling with Unkey Go SDK
DESCRIPTION: Comprehensive example of error handling in the Unkey Go SDK. It shows how to handle various types of errors that may be returned by the SDK, including specific HTTP status code errors and general SDK errors.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"errors"
	unkey "github.com/unkeyed/unkey/sdks/golang"
	"github.com/unkeyed/unkey/sdks/golang/models/components"
	"github.com/unkeyed/unkey/sdks/golang/models/operations"
	"github.com/unkeyed/unkey/sdks/golang/models/sdkerrors"
	"log"
)

func main() {
	s := unkey.New(
		unkey.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)

	request := operations.CreateAPIRequestBody{
		Name: "my-api",
	}

	ctx := context.Background()
	res, err := s.CreateAPI(ctx, request)
	if err != nil {

		var e *sdkerrors.ErrBadRequest
		if errors.As(err, &e) {
			// handle error
			log.Fatal(e.Error())
		}

		var e *sdkerrors.ErrUnauthorized
		if errors.As(err, &e) {
			// handle error
			log.Fatal(e.Error())
		}

		var e *sdkerrors.ErrForbidden
		if errors.As(err, &e) {
			// handle error
			log.Fatal(e.Error())
		}

		var e *sdkerrors.ErrNotFound
		if errors.As(err, &e) {
			// handle error
			log.Fatal(e.Error())
		}

		var e *sdkerrors.ErrConflict
		if errors.As(err, &e) {
			// handle error
			log.Fatal(e.Error())
		}

		var e *sdkerrors.ErrTooManyRequests
		if errors.As(err, &e) {
			// handle error
			log.Fatal(e.Error())
		}

		var e *sdkerrors.ErrInternalServerError
		if errors.As(err, &e) {
			// handle error
			log.Fatal(e.Error())
		}

		var e *sdkerrors.SDKError
		if errors.As(err, &e) {
			// handle error
			log.Fatal(e.Error())
		}
	}
}

----------------------------------------

TITLE: Configuring Unkey Client with Custom Cache Option
DESCRIPTION: Example of initializing the Unkey client with a custom cache option. This allows configuring the fetch cache behavior, although it's not yet implemented in Cloudflare Workers as of October 2023.

LANGUAGE: typescript
CODE:
const unkey = new Unkey({
  // ...
  cache: "no-cache"
})

----------------------------------------

TITLE: Configuring Unkey Authentication Middleware in Hono.js
DESCRIPTION: Example showing how to initialize and use the Unkey middleware in a Hono.js application. Demonstrates middleware setup with TypeScript types and accessing the Unkey context in route handlers.

LANGUAGE: typescript
CODE:
import { Hono } from "hono"
import { UnkeyContext, unkey } from "@unkey/hono";

const app = new Hono<{ Variables: { unkey: UnkeyContext } }>();

app.use("*", unkey());


app.get("/somewhere", (c) => {
  // access the unkey response here to get metadata of the key etc
  const ... = c.get("unkey")

  return c.text("yo")
})

----------------------------------------

TITLE: Migrating Hashed Keys to Unkey using Node.js
DESCRIPTION: Example showing how to migrate hashed API keys to Unkey using SHA-256 hashing. Demonstrates creating a hash function and sending multiple keys to the migrations.createKeys endpoint.

LANGUAGE: javascript
CODE:
const { createHash } = require("node:crypto")

function hash(key) {
  return {
    value: createHash("sha256").update(key).digest("base64"),
    variant: "sha256_base64",
  }
}

const keys = [
  {
    hash: hash("my-secret-key"),
    ownerId: "hello",
    apiId: "<UNKEY_API_ID>", // the id of the API you created
    //... other settings
  },
  {
    hash: hash("my-other-secret-key"),
    name: "name",
    apiId: "<UNKEY_API_ID>", // the id of the API you created
    //... other settings
  },
]

fetch("https://api.unkey.dev/v1/migrations.createKeys", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Authorization: "Bearer <UNKEY_ROOT_KEY>",
  },
  body: JSON.stringify(keys)
})
.then(res=>res.json())
.then(res=>{console.log(res)})

----------------------------------------

TITLE: API Key Update Operations
DESCRIPTION: Example showing how to update existing API key properties including name, rate limits, expiration, and refill settings

LANGUAGE: rust
CODE:
use unkey::models::{Refill, RefillInterval, UpdateKeyRequest};
use unkey::Client;

async fn update_key() {
    let c = Client::new("unkey_ABC");
    let req = UpdateKeyRequest::new("key_XYZ")
        .set_name(Some("new_name")) // Update the keys name
        .set_ratelimit(None) // Remove any ratelimit on the key
        .set_expires(None) // Remove any expiration date
        .set_refill(Some(Refill::new(100, RefillInterval::Daily)));

    match c.update_key(req).await {
        Ok(_) => println!("Success"), // Nothing on success
        Err(err) => eprintln!("{err:?}"),
    }
}

----------------------------------------

TITLE: Asynchronous Liveness Check with unkey.py in Python
DESCRIPTION: This snippet demonstrates how to perform an asynchronous liveness check using the Unkey SDK. It uses asyncio to run an asynchronous function that initializes the Unkey client and makes an asynchronous API call.

LANGUAGE: python
CODE:
# Asynchronous Example
import asyncio
import os
from unkey_py import Unkey

async def main():
    s = Unkey(
        bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
    )
    res = await s.liveness.check_async()
    if res.object is not None:
        # handle response
        pass

asyncio.run(main())

----------------------------------------

TITLE: Updating API Key with Unkey in TypeScript
DESCRIPTION: This snippet demonstrates how to update an API key using the Unkey library in TypeScript. It shows updating the owner ID, remaining usage, setting up a monthly refill, and enabling the key.

LANGUAGE: typescript
CODE:
await unkey.keys.update({
  keyId: "xyz_AS5HDkXXPot2MMoPHD8jnL",
  ownerId: "new owner",
  remaining: 300,
  refil: {
    interval: "monthly",
    amount: 100,
    refillDay: 15,
  },
  enabled: true
});

----------------------------------------

TITLE: Updating Verification Count
DESCRIPTION: Example demonstrating how to update the remaining verifications for an API key

LANGUAGE: rust
CODE:
use unkey::models::{UpdateOp, UpdateRemainingRequest};
use unkey::Client;

async fn update_remaining() {
    let c = Client::new("unkey_ABC");
    let req = UpdateRemainingRequest::new("key_123", Some(100), UpdateOp::Set);

    match c.update_remaining(req).await {
        Ok(res) => println!("{res:?}"),
        Err(err) => eprintln!("{err:?}"),
    }
}

----------------------------------------

TITLE: Basic Cache Implementation in TypeScript
DESCRIPTION: Demonstrates basic usage of @unkey/cache with a memory store and type-safe caching of user data.

LANGUAGE: typescript
CODE:
import { createCache, DefaultStatefulContext, Namespace } from "@unkey/cache";
import { MemoryStore } from "@unkey/cache/stores";

type User = {
    id: string;
    email: string;
};

const ctx = new DefaultStatefulContext();

const memory = new MemoryStore({ persistentMap: new Map() });

const cache = createCache({
    user: new Namespace<User>(ctx, {
      stores: [memory],
      fresh: 60_000,
      stale: 300_000,
    })
});

await cache.user.set("userId", { id: "userId", email: "user@email.com" });
const user = await cache.user.get("userId")
console.log(user)

----------------------------------------

TITLE: Defining Zod Schema for Filter Output
DESCRIPTION: Schema definition using Zod to validate and type-check AI responses

LANGUAGE: typescript
CODE:
export const filterOutputSchema = z.object({
  filters: z.array(
    z.object({
      field: z.enum([
        "host",
        "requestId",
        "methods",
        "paths",
        "status",
        "startTime",
        "endTime",
        "since",
      ]),
      filters: z.array(
        z.object({
          operator: z.enum(["is", "contains", "startsWith", "endsWith"]),
          value: z.union([z.string(), z.number()]),
        })
      ),
    })
  ),
});

----------------------------------------

TITLE: Verifying API Keys with Unkey in Go
DESCRIPTION: This snippet demonstrates how to use the unkey-go package to verify an API key in Go. It checks if the key is valid and handles any errors that may occur during the verification process.

LANGUAGE: go
CODE:
package main
import (
	"fmt"
	unkey "github.com/WilfredAlmeida/unkey-go/features"
)
func main() {
	apiKey := "key_3ZZ7faUrkfv1YAhffAcnKW74"
	response, err := unkey.KeyVerify(apiKey)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	if response.Valid {
		fmt.Println("Key is valid")
	} else {
		fmt.Println("Key is invalid")
	}
}

----------------------------------------

TITLE: Creating HTTPS Server with TLS in Node.js
DESCRIPTION: Demonstrates how to create a secure HTTPS server using TLS in Node.js. The example shows certificate configuration and server setup listening on port 443 for secure communications.

LANGUAGE: javascript
CODE:
const https = require('https');
const fs = require('fs');

const options = {
  key: fs.readFileSync('server-key.pem'),
  cert: fs.readFileSync('server-cert.pem')
};

https.createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('Hello secure world!\n');
}).listen(443);

----------------------------------------

TITLE: Fetching Key Details
DESCRIPTION: Example showing how to retrieve detailed information about a specific API key

LANGUAGE: rust
CODE:
use unkey::models::GetKeyRequest;
use unkey::Client;

async fn get_key() {
    let c = Client::new("unkey_ABC");
    let req = GetKeyRequest::new("key_123");

    match c.get_key(req).await {
        Ok(res) => println!("{res:?}"),
        Err(err) => eprintln!("{err:?}"),
    }
}

----------------------------------------

TITLE: Defining API Key Structure Pattern in TypeScript
DESCRIPTION: Proposed new key structure pattern that moves version information to the end and adds checksum for better identification and security. The pattern allows for custom prefixes while maintaining compatibility with migrated keys.

LANGUAGE: typescript
CODE:
{prefix}_{base58_randomness}{meta}{version}_{checksum}

----------------------------------------

TITLE: Manual Dependency Configuration
DESCRIPTION: Adding Unkey dependency manually to Cargo.toml file

LANGUAGE: toml
CODE:
unkey = "0.4"

----------------------------------------

TITLE: Getting Key Information in Python
DESCRIPTION: Retrieves information about a specific API key using its ID. Supports optional decryption and custom retry configuration.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.keys.get(key_id="key_1234")

if res.key is not None:
    # handle response
    pass

----------------------------------------

TITLE: Implementing OAuth Sign-In with Clerk in React
DESCRIPTION: This code snippet demonstrates how to implement OAuth sign-in functionality using Clerk authentication in a React application. It handles the sign-in process for different OAuth providers and includes error handling.

LANGUAGE: tsx
CODE:
const oauthSignIn = async (provider: OAuthStrategy) => {
    if (!signInLoaded) {
      return null;
    }
    try {
      setIsLoading(provider);
      await signIn.authenticateWithRedirect({
        strategy: provider,
        redirectUrl: "/auth/sso-callback",
        redirectUrlComplete: "/apis",
      });
    } catch (err) {
      console.error(err);
      setIsLoading(null);
      toast.error((err as Error).message);
    }
  };

----------------------------------------

TITLE: Simplified Caching with @unkey/cache in TypeScript
DESCRIPTION: Demonstrates the clean and type-safe API provided by @unkey/cache, abstracting away boilerplate code and implementing stale-while-revalidate functionality.

LANGUAGE: typescript
CODE:
const user = await cache.user.swr("chronark", async (id) => {
  return await db.query.users.findFirst({
    where: (table, { eq }) => eq(table.id, id),
  });
});

----------------------------------------

TITLE: Running Integration Tests for Unkey API
DESCRIPTION: This snippet demonstrates how to run integration tests for the Unkey API. It requires setting environment variables for the API base URL and root key.

LANGUAGE: bash
CODE:
cd apps/api

UNKEY_BASE_URL=
UNKEY_ROOT_KEY=
pnpm test:integration

----------------------------------------

TITLE: Implementing Rate Limits with Unkey Python SDK
DESCRIPTION: Example of setting up rate limiting for a specific user with customizable limits, duration, and resource constraints. The code demonstrates initialization of the Unkey client and setting rate limit parameters including identifier, limit count, duration, namespace, and associated resources.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.ratelimits.limit(request={
    "identifier": "user_123",
    "limit": 10,
    "duration": 60000,
    "namespace": "email.outbound",
    "cost": 2,
    "resources": [
        {
            "type": "organization",
            "id": "org_123",
            "name": "unkey",
        },
    ],
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Installing @unkey/ratelimit via npm
DESCRIPTION: Command to install the @unkey/ratelimit library using npm package manager.

LANGUAGE: bash
CODE:
npm install @unkey/ratelimit

----------------------------------------

TITLE: Configuring Unkey Client with Custom Retry Options
DESCRIPTION: Example of initializing the Unkey client with custom retry options. This allows customizing the number of retry attempts and the backoff strategy for network errors.

LANGUAGE: typescript
CODE:
const unkey = new Unkey({
  // ...
  retry: {
    attempts: 3,
    backoff: (retryCount) => retryCount * 1000
  }
})

----------------------------------------

TITLE: Grouping by Tags with Unkey Analytics API
DESCRIPTION: This example demonstrates how to group verifications by tag combinations. It returns an array of elements, each corresponding to a unique tag combination, with aggregated usage statistics.

LANGUAGE: bash
CODE:
curl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&groupBy=tags&apiId=api_123' \
 -H 'Authorization: Bearer unkey_XXX'

LANGUAGE: json
CODE:
[
  {
    "valid": 50,
    "notFound": 0,
    "forbidden": 3,
    "usageExceeded": 6,
    "rateLimited": 10,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 69,
    "tags": [] // these did not have tags specified
  },
  {
    "valid": 1,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 1,
    "tags": [
      "a",
      "b"
    ]
  },
  {
    "valid": 2,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 2,
    "tags": [
      "a",
      "c"
    ]
  },
  {
    "valid": 2,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 2,
    "tags": [
      "a"
    ]
  }
]

----------------------------------------

TITLE: Querying Top 10 Users by API Usage with Unkey Analytics API
DESCRIPTION: This snippet demonstrates how to query the top 10 users by API usage over the past 30 days. It orders results by total verifications in descending order and includes both identityId and externalId for each user.

LANGUAGE: bash
CODE:
curl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&orderBy=total&order=desc&limit=10&groupBy=identity&apiId=api_123' \
 -H 'Authorization: Bearer unkey_XXX'

LANGUAGE: json
CODE:
[
  {
    "identity": { "id": "id_123", "externalId": "user_123"},
    "valid": 54,
    "notFound": 0,
    "forbidden": 3,
    "usageExceeded": 6,
    "rateLimited": 10,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 73
  },
  {
    "identity": { "id": "id_456", "externalId": "user_6dg"},
    "valid": 24,
    "notFound": 0,
    "forbidden": 1,
    "usageExceeded": 32,
    "rateLimited": 10,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 67
  },
  ...
]

----------------------------------------

TITLE: Implementing Circuit Breaker in Spring Boot REST Controller
DESCRIPTION: This snippet demonstrates how to implement a circuit breaker in a Spring Boot application using the resilience4j library. It shows a simple REST controller with a circuit breaker annotation on an endpoint.

LANGUAGE: java
CODE:
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@RestController
public class ExampleController {

    @GetMapping("/example")
    @CircuitBreaker
    public String exampleEndpoint() {
        // Call to external service
        return "Success Response";
    }
}

----------------------------------------

TITLE: Starting Unkey GenServer Directly
DESCRIPTION: Alternative method to initialize the Unkey SDK using direct start_link call with configuration options including token and base_url.

LANGUAGE: elixir
CODE:
{:ok, _pid} = UnkeyElixirSdk.start_link(%{token: "yourunkeyrootkey", base_url: "https://api.unkey.dev/v1/keys"})

----------------------------------------

TITLE: Migrating Plaintext Keys to Unkey using Node.js
DESCRIPTION: Example showing how to migrate plaintext API keys to Unkey. Demonstrates sending multiple plaintext keys to the migrations.createKeys endpoint, requiring special encryption permissions.

LANGUAGE: javascript
CODE:
const keys = [
  {
    plaintext: "my_plaintext_key",
    ownerId: "hello",
    apiId: "<UNKEY_API_ID>", // the id of the API you created
    //... other settings
  },
  {
    plaintext: "my_other_plaintext_key",
    name: "name",
    apiId: "<UNKEY_API_ID>", // the id of the API you created
    //... other settings
  },
]

fetch("https://api.unkey.dev/v1/migrations.createKeys", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Authorization: "Bearer <UNKEY_ROOT_KEY>", // requires `api.*.encrypt_key` permissions
  },
  body: JSON.stringify(keys)
})
.then(res=>res.json())
.then(res=>{console.log(res)})

----------------------------------------

TITLE: Installing Unkey Go SDK
DESCRIPTION: Command to install the Unkey Go SDK using the go get command.

LANGUAGE: bash
CODE:
go get github.com/unkeyed/unkey/sdks/golang

----------------------------------------

TITLE: Updating Remaining Key Usage with Unkey API in TypeScript
DESCRIPTION: This code snippet demonstrates how to update the remaining usage of a key using the Unkey API. It sets the remaining usage to 300 for a specific key ID.

LANGUAGE: typescript
CODE:
await unkey.keys.updateRemaining({
  keyId: "xyz_AS5HDkXXPot2MMoPHD8jnL",
  value: 300,
  op: "set"
});

----------------------------------------

TITLE: Debugging Custom Queries with ClickHouse in TypeScript
DESCRIPTION: This snippet demonstrates how to execute and debug custom queries using the ClickHouse client. It includes examples of running a custom query and using the EXPLAIN command to analyze query performance.

LANGUAGE: typescript
CODE:
const result = await ch.querier.query({
  query: `SELECT count() FROM verifications.raw_key_verifications_v1 WHERE workspace_id = {workspaceId: String}`,
  params: z.object({ workspaceId: z.string() }),
  schema: z.object({ count: z.number() })
})({ workspaceId: "ws_123" });

const explain = await ch.querier.query({
  query: `EXPLAIN SELECT * FROM verifications.raw_key_verifications_v1 WHERE workspace_id = {workspaceId: String}`,
  params: z.object({ workspaceId: z.string() }),
  schema: z.object({ explain: z.string() })
})({ workspaceId: "ws_123" });

----------------------------------------

TITLE: Testing Rate Limited Endpoint
DESCRIPTION: Command to test the rate-limited endpoint using curl.

LANGUAGE: bash
CODE:
curl -XPOST 'http://localhost:3000/protected'

----------------------------------------

TITLE: Creating API Key with Roles using Unkey API in Bash
DESCRIPTION: This snippet demonstrates how to create a new API key with associated roles using the Unkey API. It sends a POST request to the Unkey API endpoint, including the API ID and an array of role names to be attached to the new key.

LANGUAGE: bash
CODE:
curl -XPOST \
  --url https://api.unkey.dev/v1/keys.createKey \
  -H "Authorization: Bearer ${ROOT_KEY}" \
  -H "Content-Type: application/json" \
  -d '{
    "apiId": "${API_ID}",
    "roles": [
      "role1", "role2", "role3"
    ]
  }'

----------------------------------------

TITLE: Verifying API Keys with Unkey in TypeScript
DESCRIPTION: This snippet demonstrates how to use the @unkey/api package to verify an API key in TypeScript. It handles network errors and checks if the key is valid.

LANGUAGE: typescript
CODE:
import { verifyKey } from '@unkey/api';

const { result, error } = await verifyKey({
  apiId: "api_123",
  key: "xyz_123"
})

if ( error ) {
  // handle network error
}

if ( !result.valid ) {
  // reject unauthorized request
}

----------------------------------------

TITLE: Installing Next.js Application
DESCRIPTION: Commands to create a new Next.js application using different package managers.

LANGUAGE: bash
CODE:
npx create-next-app@latest

LANGUAGE: bash
CODE:
pnpm create next-app@latest

LANGUAGE: bash
CODE:
yarn create-next-app@latest

LANGUAGE: bash
CODE:
bunx create-next-app

----------------------------------------

TITLE: Synchronous Unkey SDK Usage Example
DESCRIPTION: Basic example showing how to initialize and use the Unkey SDK synchronously

LANGUAGE: python
CODE:
# Synchronous Example
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.liveness.check()

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Implementing Rate Limited Route in Next.js
DESCRIPTION: Creating a protected route with rate limiting using the Unkey package. Includes configuration for rate limit rules and error handling.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server';
import { Ratelimit } from "@unkey/ratelimit";

const limiter = new Ratelimit({
  namespace: "next-example",
  limit: 2,
  duration: "30s",
  rootKey: process.env.UNKEY_ROOT_KEY
});

export const POST = (async (req) => {
  const identifier = getUserId(); // or ip or anything else you want
  const ratelimit = await limiter.limit(identifier)
  if (!ratelimit.success){
   return new NextResponse("Please try again later", {status: 429});
  }

  return new NextResponse('Hello!');
});

----------------------------------------

TITLE: AWS ECS Production Configuration
DESCRIPTION: Example configuration for deploying Unkey on AWS ECS in production.

LANGUAGE: bash
CODE:
unkey api \
  --platform="aws" \
  --region="us-east-1" \
  --cluster=true \
  --cluster-advertise-addr-aws-ecs-metadata=true \
  --cluster-discovery-redis-url="redis://user:password@redis.example.com:6379" \
  --database-primary="mysql://user:password@primary.mysql.example.com:3306/unkey?parseTime=true" \
  --database-readonly-replica="mysql://readonly:password@replica.mysql.example.com:3306/unkey?parseTime=true" \
  --clickhouse-url="clickhouse://user:password@clickhouse.example.com:9000/unkey" \
  --otel-otlp-endpoint="https://your-grafana-endpoint.com"

----------------------------------------

TITLE: Installing Express Dependencies
DESCRIPTION: Commands to create a new Express project and install necessary dependencies including TypeScript support.

LANGUAGE: bash
CODE:
mkdir unkey-with-express
npm init -y
npm install cors dotenv express ts-node
npm install -D @types/cors @types/express ts-node-dev typescript

----------------------------------------

TITLE: Installing Unkey Ratelimit Package
DESCRIPTION: Command to install the Unkey rate limiting package.

LANGUAGE: bash
CODE:
npm install @unkey/ratelimit

----------------------------------------

TITLE: Setting Ratelimit Override with Namespace Name in TypeScript
DESCRIPTION: This snippet shows how to set a ratelimit override using the Unkey API with a namespace name. It specifies the user identifier, limit, duration, and namespace name.

LANGUAGE: typescript
CODE:
const override = await unkey.ratelimit.setOverride({
    identifier: "user_123",
    limit: 10,
    duration: 60000,
    namespaceName: "email.outbound",
    async: true
})

----------------------------------------

TITLE: Installing Express Dependencies
DESCRIPTION: Initial setup commands for creating an Express application with TypeScript support.

LANGUAGE: bash
CODE:
mkdir unkey-with-express
npm init -y
npm install cors dotenv express ts-node
npm install -D @types/cors @types/express ts-node-dev typescript

----------------------------------------

TITLE: Verifying an API Key with Custom Cost Deduction in Unkey
DESCRIPTION: This example demonstrates how to verify an API key with a custom cost deduction. It specifies a cost of 4 in the request body, which will be deducted from the remaining verifications upon successful validation.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.verifyKey \
  --header 'Content-Type: application/json' \
  --data '{
    "apiId":"<API_ID>",
    "key": "<NEW_KEY>",
    "remaining": {
      "cost": 4
    }
  }'

----------------------------------------

TITLE: S3 + In-Memory Cache with Gossip Protocol Architecture
DESCRIPTION: ASCII diagram illustrating a distributed system with multiple gateways using gossip protocol for cache invalidation and S3 for storage.

LANGUAGE: ascii
CODE:
┌─────────────────────┐
│ Gateway             │
│ ┌───────────────┐   │──┐
│ │ Memory Cache  │   │  │
│ └───────────────┘   │  │
└─────────────────────┘  │
         ▲               │
         │ Gossip        │    ┌─────────┐
         ▼               ├───►│         │
┌─────────────────────┐  │    │   S3    │
│ Gateway             │  │    │         │
│ ┌───────────────┐   │──┘    └─────────┘
│ │ Memory Cache  │   │
│ └───────────────┘   │
└─────────────────────┘

----------------------------------------

TITLE: Installing Unkey SDK with Poetry
DESCRIPTION: Install the Unkey Python SDK using Poetry dependency manager

LANGUAGE: bash
CODE:
poetry add unkey.py

----------------------------------------

TITLE: Refactored Audit Page Component
DESCRIPTION: Example of a Next.js page component implementing the new structure, showing how components, hooks, and utilities are organized within the feature module.

LANGUAGE: typescript
CODE:
import { Navbar } from "@/components/navbar";
import { PageContent } from "@/components/page-content";
import { getTenantId } from "@/lib/auth";
import { InputSearch } from "@unkey/icons";
import { type SearchParams, getWorkspace, parseFilterParams } from "./actions";
import { Filters } from "./components/filters";
import { AuditLogTableClient } from "./components/table/audit-log-table-client";

export const dynamic = "force-dynamic";
export const runtime = "edge";

type Props = {
  params: {
    bucket: string;
  };
  searchParams: SearchParams;
};

export default async function AuditPage(props: Props) {
  const tenantId = getTenantId();
  const workspace = await getWorkspace(tenantId);
  const parsedParams = parseFilterParams({
    ...props.searchParams,
    bucket: props.params.bucket,
  });

  return (
    <div>
      <Navbar>
        <Navbar.Breadcrumbs icon={<InputSearch />}>
          <Navbar.Breadcrumbs.Link href="/audit/unkey_mutations">Audit</Navbar.Breadcrumbs.Link>
          <Navbar.Breadcrumbs.Link href={`/audit/${props.params.bucket}`} active isIdentifier>
            {workspace.ratelimitNamespaces.find((ratelimit) => ratelimit.id === props.params.bucket)
              ?.name ?? props.params.bucket}
          </Navbar.Breadcrumbs.Link>
        </Navbar.Breadcrumbs>
      </Navbar>
      <PageContent>
        <main className="mb-5">
          <Filters workspace={workspace} parsedParams={parsedParams} bucket={parsedParams.bucket} />
          <AuditLogTableClient />
        </main>
      </PageContent>
    </div>
  );
}

----------------------------------------

TITLE: Implementing API Key Deletion Controller in Java Spring
DESCRIPTION: REST controller implementation for revoking API keys using Unkey SDK. The controller exposes a DELETE endpoint that accepts key ID and authorization token, delegating the deletion operation to a KeyService instance.

LANGUAGE: java
CODE:
package com.example.myapp;

import com.unkey.unkeysdk.dto.KeyDeleteRequest;

@RestController
public class APIController {

    private static IKeyService keyService = new KeyService();

    @DeleteMapping("/delete")
    public ResponseEntity<String> updateKey(
            @RequestBody KeyDeleteRequest keyId,
            @RequestHeader("Authorization") String authToken) {
        // Delegate the creation of the key to the KeyService
        return keyService.deleteKey(authToken, keyId);
    }
}

----------------------------------------

TITLE: Synchronous Liveness Check with unkey.py in Python
DESCRIPTION: This snippet shows how to perform a synchronous liveness check using the Unkey SDK. It initializes the Unkey client with a bearer token from an environment variable and makes a synchronous API call.

LANGUAGE: python
CODE:
# Synchronous Example
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.liveness.check()

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Request Handler Implementation
DESCRIPTION: Example of implementing ratelimiting in a request handler function, showing how to handle rejected requests.

LANGUAGE: typescript
CODE:
async function handler(request) {

const identifier = request.getUserId() // or ip or anything else you want

const ratelimit = await unkey.limit(identifier)
if (!ratelimit.success){
  return new Response("try again later", { status: 429 })
}

// handle the request here

}

----------------------------------------

TITLE: Initializing Unkey Client with Root Key
DESCRIPTION: Example of creating a new Unkey client instance using a root key for authentication. The root key is required for creating, revoking, or updating resources.

LANGUAGE: typescript
CODE:
import { Unkey } from "@unkey/api";

const unkey = new Unkey({ rootKey: "<UNKEY_ROOT_KEY>" });

----------------------------------------

TITLE: Retrieving API Information with Unkey SDK in Java
DESCRIPTION: This snippet demonstrates how to create a REST endpoint for retrieving API information using the Unkey SDK. It uses Spring's @RestController and @GetMapping annotations to define the endpoint, and delegates the API retrieval to an IAPIService instance.

LANGUAGE: java
CODE:
package com.example.myapp;

import com.unkey.unkeysdk.dto.GetAPIResponse;

@RestController
public class APIController {

    private static IAPIService apiService = new APIService();

    @GetMapping("/get-api")
    public GetAPIResponse getAPI(
            @RequestParam String apiId,
            @RequestHeader("Authorization") String authToken) {
        // Delegate the creation of the key to the IAPIService from the SDK
        return apiService.getAPI(apiId, authToken);
    }
}

----------------------------------------

TITLE: Implementing Stale-While-Revalidate Caching in TypeScript
DESCRIPTION: Example of using the stale-while-revalidate (SWR) pattern with @unkey/cache. It demonstrates how to refresh cache data from a database query while serving stale data.

LANGUAGE: typescript
CODE:
const user = await cache.user.swr("chronark", async (id) => {
  return await db.query.users.findFirst({
    where: (table, { eq }) => eq(table.id, id),
  });
});

----------------------------------------

TITLE: Configuring OpenAI SDK with Unkey Semantic Caching
DESCRIPTION: Code example showing how to initialize the OpenAI SDK with Unkey's semantic caching by modifying the baseURL parameter. This enables semantic caching functionality for OpenAI API calls.

LANGUAGE: typescript
CODE:
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  baseURL: "https://<gateway>.llm.unkey.io", // change the baseUrl parameter to your gateway name
});

----------------------------------------

TITLE: Listing Ratelimit Overrides with Unkey API in TypeScript
DESCRIPTION: This example demonstrates how to list all configured ratelimit overrides for a specific namespace using the Unkey API. It retrieves a list of overrides for the 'email.send' namespace, including pagination details.

LANGUAGE: typescript
CODE:
import { Unkey } from "@unkey/api";

const unkey = new Unkey({
  rootKey: process.env.UNKEY_ROOT_KEY!,
});

const res = await unkey.ratelimits.listOverrides({
  namespaceName: "email.send",
})

console.log(res)

{
  "result": {
    "overrides": [
      {
        "id": "rlor_123",
        "identifier": "*@calendso.com",
        "limit": 10,
        "duration": 60000,
        "async": true
      }
    ],
    "cursor": "eyJrZXkiOiJrZXlfMTIzNCJ9",
    "total": 1
  }
}

----------------------------------------

TITLE: Creating an Identity with Unkey Python SDK
DESCRIPTION: This snippet demonstrates how to create a new identity using the Unkey Python SDK. It includes setting up rate limits and handling the response.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.identities.create(request={
    "external_id": "user_123",
    "ratelimits": [
        {
            "name": "tokens",
            "limit": 10,
            "duration": 1000,
        },
        {
            "name": "tokens",
            "limit": 10,
            "duration": 1000,
        },
    ],
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Response Example for Setting Ratelimit Override in TypeScript
DESCRIPTION: This snippet illustrates the response format when setting a ratelimit override using the Unkey API. It shows the structure of the result object containing the override ID.

LANGUAGE: typescript
CODE:
{ 
  result: {
     overrideId: 'rlor_12345' 
  }
}

----------------------------------------

TITLE: GET Request Example for Unkey API
DESCRIPTION: Demonstrates how to make a GET request to retrieve a key using the Unkey API. Shows proper header usage with authorization.

LANGUAGE: http
CODE:
curl "https://api.unkey.dev/v1/keys.getKey?keyId=key_123" \
  -H "Authorization: Bearer <ROOT_KEY>"

----------------------------------------

TITLE: Creating Permissions in Unkey with Python
DESCRIPTION: Example of creating a new permission using the Unkey Python SDK. The permission is created with a name and description, requiring bearer authentication.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.permissions.create(request={
    "name": "record.write",
    "description": "record.write can create new dns records for our domains.",
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Unkey API Key Metadata Example in JSON
DESCRIPTION: This snippet demonstrates an example of metadata that can be included when creating an API key with Unkey. It shows how to specify a billing tier and trial end date.

LANGUAGE: json
CODE:
{
  "billingTier": "PRO",
  "trialEnds": "2023-06-16T17:16:37.161Z"
}

----------------------------------------

TITLE: Customizing Unkey Middleware Header in Hono.js
DESCRIPTION: Shows how to customize the header used for API key retrieval in the Unkey middleware. It demonstrates changing the default 'Authorization' header to a custom 'x-api-key' header.

LANGUAGE: typescript
CODE:
app.use(
  "*",
  unkey({
    getKey: (c) => c.req.header("x-api-key"),
  })
);

----------------------------------------

TITLE: Configuring Unkey API Token
DESCRIPTION: Environment variable configuration for setting the Unkey API token in a .env file.

LANGUAGE: env
CODE:
NUXT_UNKEY_TOKEN=<your api key>

----------------------------------------

TITLE: Querying User's Usage Over Past 24 Hours with Unkey Analytics API
DESCRIPTION: This snippet demonstrates how to query a user's API usage over the past 24 hours using Unkey's Analytics API. It groups the results by hour and returns 24 elements, each representing usage statistics for a single hour.

LANGUAGE: bash
CODE:
curl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1736673687000&end=1736760087000&externalId=user_123&groupBy=hour&apiId=api_123' \
 -H 'Authorization: Bearer unkey_XXX'

LANGUAGE: json
CODE:
[
  {
    "time": 1736672400000,
    "valid": 15125,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 1225,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 16350
  },
  {
    "time": 1736676000000,
    "valid": 765,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 765
  },
  ... 21 elements omited
  {
    "time": 1736755200000,
    "valid": 20016,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 51,
    "total": 20067
  }
]

----------------------------------------

TITLE: Verifying a Key with Unkey API in TypeScript
DESCRIPTION: Send a POST request to verify the created key, which returns the connected identity information if the key is valid.

LANGUAGE: typescript
CODE:
const verifyKeyResponse = await fetch(`https://api.unkey.dev/v1/keys.verifyKey`, {
    method: "POST",
    headers: {
    "Content-Type": "application/json",
    },
    body: JSON.stringify({
        apiId: apiId,
        key: key.key,
    }),
});

const verified = await verifyKeyResponse.json<{
    valid: boolean;
    identity: {
        id: string;
        externalId: string;
        meta: unknown;
    };
}>();

----------------------------------------

TITLE: Clerk Authentication Root Layout Setup
DESCRIPTION: Configuration of the root layout file for Clerk authentication provider integration

LANGUAGE: typescript
CODE:
import "./globals.css";
import { Inter } from "next/font/google";
import { ClerkProvider } from "@clerk/nextjs";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  );
}

----------------------------------------

TITLE: Example JSON Meta Response Structure
DESCRIPTION: Example of metadata structure returned in the verification response

LANGUAGE: json
CODE:
{
  "billingTier": "PRO",
  "trialEnds": "2023-06-16T17:16:37.161Z"
}

----------------------------------------

TITLE: Error Handling Configuration
DESCRIPTION: Advanced configuration showing how to implement timeout and error handling with fallback responses.

LANGUAGE: typescript
CODE:
import { Ratelimit } from "@unkey/ratelimit"

// In this example we decide to let requests pass, in case something goes wrong.
// But you can of course also reject them if you want.
const fallback = (identifier: string) => ({ success: true, limit: 0, reset: 0, remaining: 0 })

const unkey = new Ratelimit({
  // ... standard stuff
  timeout: {
    ms: 3000, // only wait 3s at most before returning the fallback
    fallback
  },
  onError: (err, identifier) => {
    console.error(`${identifier} - ${err.message}`)
    return fallback(identifier)
  }
})

const { success } = await unkey.limit(identifier)

----------------------------------------

TITLE: Deleting API Key with Error Handling in Elixir
DESCRIPTION: Example of deleting an API key using UnkeyElixirSdk with try-catch error handling. Takes a keyId string parameter and returns :ok on success. Logs any errors encountered during deletion.

LANGUAGE: elixir
CODE:
   try do
     :ok = UnkeyElixirSdk.delete_key("xyz_AS5HDkXXPot2MMoPHD8jnL")

    catch
        err ->
          Logger.error(err)
      end

----------------------------------------

TITLE: Key Verification Implementation
DESCRIPTION: Example showing how to verify an API key using the Unkey client

LANGUAGE: rust
CODE:
use unkey::models::VerifyKeyRequest;
use unkey::Client;

async fn verify_key() {
    let c = Client::new("unkey_ABC");
    let req = VerifyKeyRequest::new("test_DEF", "api_JJJ");

    match c.verify_key(req).await {
        Ok(res) => println!("{res:?}"),
        Err(err) => eprintln!("{err:?}"),
    }
}

----------------------------------------

TITLE: Verifying API Key
DESCRIPTION: Demonstrates how to verify an API key and handle the response, including error cases

LANGUAGE: typescript
CODE:
import { verifyKey } from "@unkey/api";

const { result, error } = await verifyKey("key_123");

if (error) {
  console.error(error.message);
  // Handle potential network or bad request error
  // A link to our docs will be in the `error.docs` field
  return;
}

if (!result.valid) {
  // Do not grant access
  return;
}

// Process request
console.log(result);

----------------------------------------

TITLE: Implementing Custom Parser for Filter Values in TypeScript
DESCRIPTION: Custom parser implementation for handling filter value arrays with operator-value pairs

LANGUAGE: typescript
CODE:
export const parseAsFilterValueArray: Parser<FilterUrlValue[]> = {
  parse: (str: string | null) => {
    if (!str) {
      return [];
    }
    try {
      // Format: operator:value,operator:value (e.g., "is:200,is:404")
      return str.split(",").map((item) => {
        const [operator, val] = item.split(/:(.+)/);
        if (!["is", "contains", "startsWith", "endsWith"].includes(operator)) {
          throw new Error("Invalid operator");
        }
        return {
          operator: operator as FilterOperator,
          value: val,
        };
      });
    } catch {
      return [];
    }
  },
  serialize: (value: any[]) => {
    if (!value?.length) {
      return "";
    }
    return value.map((v) => `${v.operator}:${v.value}`).join(",");
  },
};

export const queryParamsPayload = {
  requestId: parseAsFilterValueArray,
  host: parseAsFilterValueArray,
  methods: parseAsFilterValueArray,
  paths: parseAsFilterValueArray,
  status: parseAsFilterValueArray,
  startTime: parseAsInteger,
  endTime: parseAsInteger,
  since: parseAsRelativeTime,
} as const;

----------------------------------------

TITLE: Base URL Pattern for Unkey API
DESCRIPTION: Shows the standard URL structure for Unkey API endpoints, following RPC-style methods with version and service parameters.

LANGUAGE: text
CODE:
https://api.unkey.dev/{version}/{service}.{method}

----------------------------------------

TITLE: Unkey Integration with Error Handling
DESCRIPTION: Complete implementation of Supabase function with Unkey verification and error handling

LANGUAGE: typescript
CODE:
serve(async (req) => {
  try {
    const token = req.headers.get("x-unkey-api-key");
    if (!token) {
      return new Response("No API Key provided", { status: 401 });
    }
    const { result, error } = await verifyKey(token);
    if (error) {
      console.error(error.message);
      return new Response(JSON.stringify({ error: error.message }), {
        status: 400,
      });
    }
    if (!result.valid) {
      return new Response(JSON.stringify({ error: "API Key is not valid for this request" }), {
        status: 401,
      });
    }
    return new Response(JSON.stringify({ result }), { status: 200 });
  }

----------------------------------------

TITLE: Verifying API Key using cURL
DESCRIPTION: This cURL request verifies an API key using Unkey's verify endpoint, which can process the request in under 40 ms.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.verifyKey \
  --header 'Content-Type: application/json' \
  --data '{
    "key":"THE_NEW_KEY"
  }'

----------------------------------------

TITLE: Sample Response for Key Verification in Unkey API
DESCRIPTION: This snippet shows a sample JSON response from the key verification endpoint. It includes the 'valid' status and the 'environment' of the key.

LANGUAGE: json
CODE:
{
  "valid": true,
  "environment": "test"
  // ... omited
}

----------------------------------------

TITLE: Creating an API with Unkey Go SDK
DESCRIPTION: Example of how to use the Unkey Go SDK to create an API. It demonstrates initializing the SDK with security credentials and making a request to create an API.

LANGUAGE: go
CODE:
package main

import (
	"context"
	unkey "github.com/unkeyed/unkey/sdks/golang"
	"github.com/unkeyed/unkey/sdks/golang/models/components"
	"github.com/unkeyed/unkey/sdks/golang/models/operations"
	"log"
)

func main() {
	s := unkey.New(
		unkey.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)

	request := operations.CreateAPIRequestBody{
		Name: "my-api",
	}

	ctx := context.Background()
	res, err := s.CreateAPI(ctx, request)
	if err != nil {
		log.Fatal(err)
	}
	if res != nil {
		// handle response
	}
}

----------------------------------------

TITLE: Defining Store Interface in TypeScript
DESCRIPTION: This snippet defines a TypeScript interface for a Store, which provides methods for managing key-value pairs with namespace support. It includes get, set, and remove operations, along with a name property for metrics/tracing.

LANGUAGE: typescript
CODE:
/**
 * A store is a common interface for storing, reading and deleting key-value pairs.
 *
 * The store implementation is responsible for cleaning up expired data on its own.
 */
export interface Store<TNamespace extends string, TValue> {
  /**
   * A name for metrics/tracing.
   *
   * @example: memory
   */
  name: string;

  /**
   * Return the cached value
   *
   * The response must be `undefined` for cache misses
   */
  get(namespace: TNamespace, key: string): Promise<Result<Entry<TValue> | undefined, CacheError>>;

  /**
   * Sets the value for the given key.
   *
   * You are responsible for evicting expired values in your store implementation.
   * Use the `entry.staleUntil` (unix milli timestamp) field to configure expiration
   */
  set(namespace: TNamespace, key: string, value: Entry<TValue>): Promise<Result<void, CacheError>>;

  /**
   * Removes one or multiple keys from the store.
   */
  remove(namespace: TNamespace, keys: string | string[]): Promise<Result<void, CacheError>>;
}

----------------------------------------

TITLE: Handling Expensive Requests with Unkey Rate Limiter
DESCRIPTION: Configuring the Unkey rate limiter to handle more expensive requests by specifying a higher cost.

LANGUAGE: typescript
CODE:
const { success } = await unkey.limit(ctx.session.user.id, {
  cost: 3,
});

----------------------------------------

TITLE: API Key Creation Response in JSON
DESCRIPTION: The response from creating an API key, including the key itself and a keyId for future reference.

LANGUAGE: jsx
CODE:
{
  "key": "prefix_5AkwpYpIHntGBpTHLqKg",
  "keyId": "key_123"
}

----------------------------------------

TITLE: Error Handling Example with Unkey SDK
DESCRIPTION: Comprehensive example of handling various error types from the Unkey API

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey, models

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = None
try:
    res = s.liveness.check()

    if res.object is not None:
        # handle response
        pass

except models.ErrBadRequest as e:
    # handle e.data: models.ErrBadRequestData
    raise(e)
except models.ErrUnauthorized as e:
    # handle e.data: models.ErrUnauthorizedData
    raise(e)
except models.ErrForbidden as e:
    # handle e.data: models.ErrForbiddenData
    raise(e)
except models.ErrNotFound as e:
    # handle e.data: models.ErrNotFoundData
    raise(e)
except models.ErrConflict as e:
    # handle e.data: models.ErrConflictData
    raise(e)
except models.ErrTooManyRequests as e:
    # handle e.data: models.ErrTooManyRequestsData
    raise(e)
except models.ErrInternalServerError as e:
    # handle e.data: models.ErrInternalServerErrorData
    raise(e)
except models.SDKError as e:
    # handle exception
    raise(e)

----------------------------------------

TITLE: Web Application Verification Handler
DESCRIPTION: TypeScript function that handles code verification and API key generation in the web application component of the CLI authentication flow.

LANGUAGE: typescript
CODE:
async function verify(opts: { code: string | null; redirect: string | null }) {
  setLoading(true);
  try {
    const req = await fetch("/api/unkey", {
      method: "POST",
      body: JSON.stringify(opts),
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!req.ok) {
      throw new Error(`HTTP error! status: ${req.status}`);
    }

    const res = await req.json();

    try {
      const redirectUrl = new URL(res.redirect);
      redirectUrl.searchParams.append("code", res.code);
      redirectUrl.searchParams.append("key", res.key);

      await fetch(redirectUrl.toString());

      setLoading(false);
      setSuccess(true);
    } catch (_error) {
      console.error(_error);
      setLoading(false);
      toast.error("Error redirecting back to local CLI. Is your CLI running?");
    }
  } catch (_error) {
    setLoading(false);
    toast.error("Error creating Unkey API key.");
  }
}

----------------------------------------

TITLE: Identity Data Model Structure
DESCRIPTION: The core data model for identities in Unkey, including required and optional fields. It defines the structure for identifying and linking users or organizations between Unkey and external systems.

LANGUAGE: typescript
CODE:
{
  id: string;        // Unkey's internal unique identifier
  externalId: string; // External system's unique identifier
  meta?: object;      // Optional JSON metadata
}

----------------------------------------

TITLE: Analytics API Response Format
DESCRIPTION: Example JSON response from the analytics API showing verification statistics grouped by identity, including breakdowns of different verification outcomes and total usage counts.

LANGUAGE: json
CODE:
[
  {
    "valid": 186,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 184,
    "unauthorized": 0,
    "disabled": 182,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 552,
    "apiId": "api_262b3iR7gkmP7aUyZ24uihcijsCe",
    "identity": {
      "id": "test_2ipPuAgat7xuVNGpK6AuPQ2Lbk11",
      "externalId": "user_2rNBR4YXxKwzM8bzVrCR5q6dFlc"
    }
  }
]

----------------------------------------

TITLE: Configuring Asynchronous Rate Limiting with Unkey
DESCRIPTION: Setting up asynchronous rate limiting for faster response times with slightly reduced accuracy.

LANGUAGE: typescript
CODE:
const unkey = new Ratelimit({
  rootKey: env.UNKEY_ROOT_KEY,
  namespace: "posts.create",
  limit: 3,
  duration: "5s",
  async: true,
});

// or

const { success } = await unkey.limit(ctx.session.user.id, {
  async: true,
});

----------------------------------------

TITLE: Invalid Key Handler Configuration
DESCRIPTION: Custom handling of invalid API keys using the handleInvalidKey configuration option.

LANGUAGE: typescript
CODE:
export const GET = withUnkey(async (req) => {
  // ...
}, {
	handleInvalidKey: (req, res) => {
      return new Response("Unauthorized", { status: 401 })
    }
});

----------------------------------------

TITLE: Deleting API Keys with Unkey Python SDK
DESCRIPTION: Example of deleting API keys using the Unkey Python SDK. Requires bearer authentication token and API ID.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.apis.delete_keys(request={
    "api_id": "api_1234",
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Implementing tRPC Project Category Query
DESCRIPTION: TypeScript code demonstrating a tRPC procedure for fetching projects by category using Zod validation and Drizzle ORM

LANGUAGE: typescript
CODE:
 getProjectsByCategory: publicProcedure
    .input(
      z.object({
        category: z.string().min(3),
      }),
    )
    .query(async ({ ctx, input }) => {
      const project = await ctx.db.query.projects.findMany({
        where: eq(projects.category, input.category.toUpperCase()),
        orderBy: (projects, { desc }) => [desc(projects.createdAt)],
        limit: 50,
        with: { steps: true },
      });
      return project;
    }),

----------------------------------------

TITLE: Updating an Identity with Unkey Python SDK
DESCRIPTION: This snippet shows how to update an existing identity using the Unkey Python SDK. It includes updating the external_id and rate limits.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.identities.update(request={
    "identity_id": "id_1234",
    "external_id": "user_1234",
    "ratelimits": [
        {
            "name": "tokens",
            "limit": 10,
            "duration": 1000,
        },
        {
            "name": "tokens",
            "limit": 10,
            "duration": 1000,
        },
        {
            "name": "tokens",
            "limit": 10,
            "duration": 1000,
        },
    ],
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: KeyRateLimit DTO for Unkey SDK in Java
DESCRIPTION: This code defines the KeyRateLimit data transfer object used within the KeyCreateRequest. It specifies rate limiting parameters such as type, limit, refill rate, and refill interval for the API key.

LANGUAGE: java
CODE:
public class KeyRateLimit {
    private String type;
    private Integer limit;
    private Integer refillRate;
    private Integer refillInterval;
}

----------------------------------------

TITLE: Rate Limit Override Response Structure
DESCRIPTION: Example response structure when retrieving a rate limit override, showing all returned fields including id, identifier, limit, duration, and async flag.

LANGUAGE: typescript
CODE:
{
  result: {
    id: "rlor_4567",
    identifier: "user.example",
    limit: 10,
    duration: 60000,
    async: false
  }
}

----------------------------------------

TITLE: Implementing IP-based Ratelimiting for OTP Sending in TypeScript
DESCRIPTION: Implementation of IP-based ratelimiting for the OTP sending endpoint. It retrieves the IP address from headers and applies the ratelimit before processing the request.

LANGUAGE: typescript
CODE:
export async function sendOTP(formData: FormData) {
  try {
    // check for forwarded
    let forwardedIP = headers().get("x-forwarded-for");
    // check for real-ip
    let realIP = headers().get("x-real-ip");
    if(forwardedIP){
      forwardedIP = forwardedIP.split(/, /)[0]
    }
    if (realIP) realIP = realIP.trim();

    const { success, reset } = await unkey.limit(
      forwardedIP || realIP || "no-ip",
    );
    const millis = reset - Date.now();
    const timeToReset = Math.floor(millis / 1000);
    if (!success) {
      return {
        success: false,
        error: `You can request a new code in ${timeToReset} seconds`,
        statusCode: 429,
      };
    }

    const email = formData.get("email") as string | null;
    //shortened for tutorial.

----------------------------------------

TITLE: Querying Billable Workspaces in TypeScript
DESCRIPTION: TypeScript function to query all billable workspaces from the database

LANGUAGE: typescript
CODE:
const workspaces = await io.runTask("list workspaces", async () =>
    db.query.workspaces.findMany({
    where: (table, { isNotNull, isNull, not, eq, and }) =>
        and(
            isNotNull(table.stripeCustomerId),
            isNotNull(table.subscriptions),
            not(eq(table.plan, "free")),
            isNull(table.deletedAtM),
        ),
    }),
);

----------------------------------------

TITLE: Implementing Logging Middleware in Zen
DESCRIPTION: Demonstrates the implementation of a logging middleware in Zen. This middleware captures request details, execution time, and response status after the handler has completed.

LANGUAGE: go
CODE:
func WithLogging(logger logging.Logger) Middleware {
    return func(next HandleFunc) HandleFunc {
        return func(ctx context.Context, s *Session) error {
            start := time.Now()

            // Call the next handler in the chain
            err := next(ctx, s)

            // Log after handling is complete
            logger.InfoContext(ctx, "request",
                slog.String("method", s.r.Method),
                slog.String("path", s.r.URL.Path),
                slog.Int("status", s.responseStatus), // Captured from response
                slog.String("latency", time.Since(start).String()),
            )

            return err
        }
    }
}

----------------------------------------

TITLE: Creating a Custom React Hook for Last Used Sign-In Method
DESCRIPTION: This custom React hook uses the useLocalStorage hook from usehook-ts to persistently store and retrieve the last used sign-in method in local storage.

LANGUAGE: tsx
CODE:
"use client";
import { useLocalStorage } from "usehook-ts";

export function useLastUsed() {
  return useLocalStorage<"github" | "google" | "email" | undefined>("last_unkey_login", undefined);
}

----------------------------------------

TITLE: Deleting an Identity with Unkey Python SDK
DESCRIPTION: This snippet demonstrates how to delete an identity using the Unkey Python SDK by providing the identity_id.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.identities.delete(request={
    "identity_id": "id_1234",
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Deleting Rate Limit Override by Namespace ID in TypeScript
DESCRIPTION: This snippet shows how to delete a rate limit override for a specific user identifier using a namespace ID with the Unkey SDK in TypeScript.

LANGUAGE: typescript
CODE:
await unkey.ratelimit.deleteOverride({
    identifier: "user_123",
    namespaceId: "rlns_1234",
})

----------------------------------------

TITLE: Altering Key Space Table for Approximated Counts in SQL
DESCRIPTION: SQL command to add columns for storing approximated count and last update timestamp in the key_space table.

LANGUAGE: sql
CODE:
ALTER TABLE `key_space`
  ADD COLUMN `size_approx` int NOT NULL DEFAULT '0',
  ADD COLUMN `size_last_updated_at` bigint NOT NULL DEFAULT '0'

----------------------------------------

TITLE: Implementing SSO with OAuth 2.0 in Python Flask
DESCRIPTION: This snippet demonstrates how to integrate Google's OAuth 2.0 service into a Flask application for SSO. It allows users to authenticate using their Google credentials, providing a practical example of SSO implementation in a Python web application.

LANGUAGE: python
CODE:
from authlib.integrations.flask_client import OAuth

app = Flask(__name__)
oauth = OAuth(app)

google = oauth.register(
    name='google',
    client_id='YOUR_CLIENT_ID',
    client_secret='YOUR_CLIENT_SECRET',
    access_token_url='https://accounts.google.com/o/oauth2/token',
    access_token_params=None,
    authorize_url='https://accounts.google.com/o/oauth2/auth',
    authorize_params=None,
    api_base_url='https://www.googleapis.com/oauth2/v1/',
    client_kwargs={'scope': 'openid email profile'},
)

@app.route('/login')
def login():
    redirect_uri = url_for('authorize', _external=True)
    return google.authorize_redirect(redirect_uri)

@app.route('/authorize')
def authorize():
    token = google.authorize_access_token()
    resp = google.get('userinfo')
    user_info = resp.json()
    # Use user_info for your application logic
    return user_info

if __name__ == "__main__":
    app.run(debug=True)

----------------------------------------

TITLE: Deleting API with Unkey Python SDK
DESCRIPTION: Example of deleting an API using the Unkey Python SDK. Requires bearer authentication token and API ID.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.apis.delete(request={
    "api_id": "api_1234",
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: User Signup Endpoint with Unkey Integration
DESCRIPTION: Express endpoint that handles user signup by creating an API key using Unkey with specific rate limiting and expiration settings.

LANGUAGE: javascript
CODE:
app.post("/signUp", async (req: Request, res: Response) => {
  const { name = "John Doe", email = "john@example.com" } = req.body;

  // Imaginary name and email validation

  const myHeaders = new Headers();
  myHeaders.append("Authorization", `Bearer ${process.env.UNKEY_ROOT_KEY}`);
  myHeaders.append("Content-Type", "application/json");

  const raw = JSON.stringify({
    apiId: process.env.UNKEY_API_ID,
    prefix: "ocr",
    byteLength: 16,
    ownerId: email,
    meta: {
      name: name,
      email: email,
    },
    expires: Date.now() + 2592000000 // 30 days from now
    ratelimit: {
      duration: 1000,
      limit: 1,
    },
  });

  const createKeyResponse = await fetch(
    "https://api.unkey.dev/v1/keys.createKey",
    {
      method: "POST",
      headers: myHeaders,
      body: raw,
      redirect: "follow",
    },
  );
  const createKeyResponseJson = await createKeyResponse.json();

  if (createKeyResponseJson.error)
    return res
      .status(400)
      .json({ error: createKeyResponseJson.error, keys: null });

  return res.status(200).json({ keys: [createKeyResponseJson], error: null });
});

----------------------------------------

TITLE: Rate Limit Wildcard Pattern Examples
DESCRIPTION: Examples demonstrating various wildcard pattern matching scenarios for rate limit overrides, including email domains and prefixed identifiers.

LANGUAGE: markdown
CODE:
| override        | matches                                 |
|-----------------|-----------------------------------------|
| `*@domain.com`  | `1@domain.com`, `hello@domain.com`      |
| `invite:*`      | `invite:abc`, `invite:hello world`      |
| `prefix*suffix` | `prefixhelloworldsuffix`                |

----------------------------------------

TITLE: Using Ratelimit in a Request Handler
DESCRIPTION: Demonstrates how to use the configured Ratelimit instance in an async request handler function, checking if the request is within the rate limit before processing.

LANGUAGE: typescript
CODE:
async function handler(request) {
  const identifier = request.getUserId(); // or IP or anything else you want

  const ratelimit = await unkey.limit(identifier);
  if (!ratelimit.success) {
    return new Response("try again later", { status: 429 });
  }

  // handle the request here
}

----------------------------------------

TITLE: Querying Unkey API with GET Method
DESCRIPTION: Demonstrates how to use the GET method to retrieve data from the Unkey API. This example shows how to get a specific key using its ID as a query parameter.

LANGUAGE: bash
CODE:
curl "https://api.unkey.dev/v1/keys.getKey?keyId=key_123" \
  -H "Authorization: Bearer <ROOT_KEY>"

----------------------------------------

TITLE: Creating Bun Project and Installing Dependencies
DESCRIPTION: Initialize a new Bun project and install the @unkey/ratelimit package.

LANGUAGE: bash
CODE:
mkdir unkey-with-bun
cd unkey-with-bun
bun init -y

LANGUAGE: bash
CODE:
bun install @unkey/ratelimit

----------------------------------------

TITLE: Key Verification Response Structure
DESCRIPTION: TypeScript example showing the response structure when verifying a key, including identity metadata.

LANGUAGE: typescript
CODE:
{
  // ...
  "valid": true,
  "identity": {
    "id": "id_123",
    "externalId": "user_123",
    "meta": {
      "stripeCustomerId": "cus_123",
    }
  }
}

----------------------------------------

TITLE: Implementing OCR Function with Tesseract.js
DESCRIPTION: Function that performs OCR on images using Tesseract.js library to detect text in English and Spanish languages.

LANGUAGE: typescript
CODE:
const doOcr = async (image) => {
  try {
    // It detects English and Spanish
    const { data } = await Tesseract.recognize(image, "spa+eng", {
      logger: (m) => console.log(m),
    });

    return { data: data, error: null };
  } catch (error) {
    console.log(error);
    return { data: null, error: error };
  }
};

----------------------------------------

TITLE: Configuring Burst Ratelimiting in TypeScript
DESCRIPTION: Example of setting up multiple ratelimits for burst control, including a high-frequency burst limit and a daily base limit.

LANGUAGE: typescript
CODE:
{
  ratelimits: [
    {
      name: "burst"
      limit: 100,
      duration: 60000 // 1 minute
    },
    {
      name: "base"
      limit: 10000,
      duration: 86400000 // 1 day
    }
  ]
}

----------------------------------------

TITLE: Installing Unkey SDK Dependencies in mix.exs
DESCRIPTION: Adds the unkey_elixir_sdk package as a dependency in the Elixir project's mix.exs file. Requires Elixir version 1.13.

LANGUAGE: elixir
CODE:
def deps do
  [
    {:unkey_elixir_sdk, "~> 0.2.0"}
  ]
end

----------------------------------------

TITLE: API Key Revocation
DESCRIPTION: Example demonstrating how to revoke an existing API key

LANGUAGE: rust
CODE:
use unkey::models::RevokeKeyRequest;
use unkey::Client;

async fn revoke_key() {
    let c = Client::new("unkey_ABC");
    let req = RevokeKeyRequest::new("key_XYZ");

    match c.revoke_key(req).await {
        Ok(_) => println!("Success"), // Nothing on success
        Err(err) => eprintln!("{err:?}"),
    }
}

----------------------------------------

TITLE: Specific AWS Group Assignment Script
DESCRIPTION: Example of adding a specific user to a named AWS group. Available groups include aws-administrators for full access and aws-users for non-administrative access.

LANGUAGE: bash
CODE:
AWS_PROFILE=unkey-root-admin \
AWS_REGION=us-east-1 \
bash unkeyed/infra/contrib/add-aws-user-to-aws-group.sh john.doe@unkey.com aws-administrators

----------------------------------------

TITLE: Deleting an API using Unkey in TypeScript
DESCRIPTION: This code snippet demonstrates how to delete an API using the Unkey library in TypeScript. It requires the apiId of the API to be deleted as a parameter. The function is asynchronous and returns no response if successful.

LANGUAGE: typescript
CODE:
await unkey.apis.delete({ apiId: "api_123" });

----------------------------------------

TITLE: Setting Ratelimit Override with Unkey API in TypeScript
DESCRIPTION: This snippet demonstrates how to set a ratelimit override for all users of a specific domain using the Unkey API. It sets a limit of 10 requests per minute for the 'email.send' namespace.

LANGUAGE: typescript
CODE:
import { Unkey } from "@unkey/api";

const unkey = new Unkey({
  rootKey: process.env.UNKEY_ROOT_KEY!,
});

await unkey.ratelimits.setOverride({
  namespaceName: "email.send",
  // set the override for all users with this domain
  identifier: "*@calendso.com",
  limit: 10,
  duration: 60_000, // 1 minute
  async: true
})

----------------------------------------

TITLE: Creating Data in Unkey API with POST Method
DESCRIPTION: Shows how to use the POST method to create new data in the Unkey API. This example demonstrates creating a new key by sending JSON data in the request body.

LANGUAGE: bash
CODE:
curl -XPOST "https://api.unkey.dev/v1/keys.createKey" \
  -H "Authorization: Bearer <ROOT_KEY>" \
  -H "Content-Type: application/json" \
  -d '{ "apiId": "api_123", "name": "My Key" }'

----------------------------------------

TITLE: Defining Unkey Internal Role Schema in TypeScript
DESCRIPTION: Defines the internal role schema for Unkey, using a specific format for different permissions related to root keys and APIs. The schema allows for wildcards and specific IDs to be used in role definitions.

LANGUAGE: typescript
CODE:
root_key::*::read_root_key
root_key::*::create_root_key // a root key MUST NOT be allowed to create another key with more permissions than itself
root_key::*::delete_root_key
root_key::*::update_root_key
api::*::create_api
api::*::delete_api // either wildcard or a specific id -> api::api_123::delete_api
api::*::read_api
api::*::update_api
api::*::read_key
api::*::create_key
api::*::update_key
api::*::delete_key

----------------------------------------

TITLE: Complete Empty Component Implementation
DESCRIPTION: Full example demonstrating the usage of Empty component with all its subcomponents including Icon, Title, Description, and Actions.

LANGUAGE: jsx
CODE:
<Empty>
  <Empty.Icon />
  <Empty.Title>Example Title Text</Empty.Title>
  <Empty.Description>Example of Description Text.</Empty.Description>
  <Empty.Actions>
    <Button>
        <BookBookmark /> 
        Submit
    </Button>
  </Empty.Actions>
</Empty>

----------------------------------------

TITLE: Deleting an API Key with Unkey in TypeScript
DESCRIPTION: This code snippet demonstrates how to delete an API key using the Unkey library. It requires the keyId parameter, which is the ID of the key to be revoked. The function is asynchronous and returns no response if successful.

LANGUAGE: typescript
CODE:
await unkey.keys.delete({ keyId: "key_123" });

----------------------------------------

TITLE: Example: Assigning Mixed Access Roles for APIs and Keys in TypeScript
DESCRIPTION: Shows how to assign roles that grant update access to a specific API and its keys, while providing read access to all APIs and their keys. This example illustrates the granularity possible in the role system.

LANGUAGE: typescript
CODE:
api::api_123::update
api::api_123::update_key
api::*::read_api
api::*::read_key

----------------------------------------

TITLE: Displaying Gray Color Scale in HTML/CSS
DESCRIPTION: This snippet demonstrates how to display a 12-step gray color scale using HTML and CSS classes. It creates a grid of square elements, each representing a different shade of gray.

LANGUAGE: HTML
CODE:
<div className="grid grid-cols-12 gap-2">
  <div className="rounded-lg aspect-square bg-gray-1"/>
  <div className="rounded-lg aspect-square bg-gray-2"/>
  <div className="rounded-lg aspect-square bg-gray-3"/>
  <div className="rounded-lg aspect-square bg-gray-4"/>
  <div className="rounded-lg aspect-square bg-gray-5"/>
  <div className="rounded-lg aspect-square bg-gray-6"/>
  <div className="rounded-lg aspect-square bg-gray-7"/>
  <div className="rounded-lg aspect-square bg-gray-8"/>
  <div className="rounded-lg aspect-square bg-gray-9"/>
  <div className="rounded-lg aspect-square bg-gray-10"/>
  <div className="rounded-lg aspect-square bg-gray-11"/>
  <div className="rounded-lg aspect-square bg-gray-12"/>
</div>

----------------------------------------

TITLE: Initializing Ratelimit Override in TypeScript
DESCRIPTION: Sets up the Override class instance using a root key for authentication. The root key should be provided through environment variables for security.

LANGUAGE: typescript
CODE:
import { Override } from "@unkey/ratelimit"

const unkey = new Override({
  rootKey: process.env.UNKEY_ROOT_KEY,
})

----------------------------------------

TITLE: Input Component Reference Declarations
DESCRIPTION: Component reference declarations for different input variants demonstrating various states and functionalities

LANGUAGE: tsx
CODE:
<InputDefaultVariant />
<InputSuccessVariant />
<InputWarningVariant />
<InputErrorVariant />
<InputDisabledVariant />
<InputWithDefaultValue />
<InputWithPasswordToggle />
<InputWithBothIcons />

----------------------------------------

TITLE: Initializing and Using ClickHouse Client in TypeScript
DESCRIPTION: This snippet demonstrates how to initialize the ClickHouse client, insert verification events, query verification statistics, and get billable usage for a month. It showcases the basic operations using the custom TypeScript client for ClickHouse.

LANGUAGE: typescript
CODE:
// Initialize the client
const ch = new ClickHouse({ url: process.env.CLICKHOUSE_URL });

// Insert verification events
await ch.verifications.insert({
  request_id: "req_123",
  time: Date.now(),
  workspace_id: "ws_123",
  key_space_id: "ks_123",
  key_id: "key_123",
  outcome: "VALID",
  region: "us-east-1",
  tags: ["prod", "api"]
});

// Query verification statistics
const stats = await ch.verifications.perDay({
  workspaceId: "ws_123",
  keySpaceId: "ks_123",
  start: yesterdayTimestamp,
  end: nowTimestamp
});

// Get billable usage for a month
const usage = await ch.billing.billableVerifications({
  workspaceId: "ws_123",
  year: 2023,
  month: 7
});

----------------------------------------

TITLE: Deleting Roles in Unkey with Python
DESCRIPTION: Example of deleting an existing role using the Unkey Python SDK. The deletion requires the role_id and bearer authentication.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.permissions.delete_role(request={
    "role_id": "role_123",
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Importing FormInput Variants in React
DESCRIPTION: This code snippet shows the import statement for various FormInput variants used in the documentation examples.

LANGUAGE: jsx
CODE:
import {
  DefaultFormInputVariant,
  RequiredFormInputVariant,
  RequiredWithErrorFormInputVariant,
  OptionalFormInputVariant,
  SuccessFormInputVariant,
  WarningFormInputVariant,
  ErrorFormInputVariant,
  DisabledFormInputVariant,
  DefaultValueFormInputVariant,
  ReadonlyFormInputVariant,
  ComplexFormInputVariant
} from "./form/form-input.variants"

----------------------------------------

TITLE: Response Structure Example
DESCRIPTION: Example response structure showing the format of returned override data, including override details, total count, and pagination cursor.

LANGUAGE: typescript
CODE:
{
  result: {
    overrides: [
       {
        id: 'rlor_1234',
        identifier: 'customer_123',
        limit: 10,
        duration: 50000,
        async: false
      }
    ],
    total: 1,
    cursor: 'rlor_1234'
  }
}

----------------------------------------

TITLE: Retrieving Ratelimit Override with Unkey API in TypeScript
DESCRIPTION: This code snippet shows how to retrieve a single ratelimit override for a specific identifier within a namespace using the Unkey API. It fetches the override details for the 'email.send' namespace.

LANGUAGE: typescript
CODE:
import { Unkey } from "@unkey/api";

const unkey = new Unkey({
  rootKey: process.env.UNKEY_ROOT_KEY!,
});

const override = await unkey.ratelimits.getOverride({
  namespaceName: "email.send",
  identifier: "*@customer.com",
})

console.log(override)

{
  "result": {
    "id": "rlor_123",
    "identifier": "*@calendso.com",
    "limit": 10,
    "duration": 60000,
    "async": true
  }
}

----------------------------------------

TITLE: Importing Empty Component in React/JSX
DESCRIPTION: Import statements showing required dependencies for using the Empty component and related UI elements.

LANGUAGE: jsx
CODE:
import { Empty } from "@unkey/ui"
import { RenderComponentWithSnippet } from "@/app/components/render"
import { Row } from "@/app/components/row"
import { BookBookmark, ShieldCheck } from "@unkey/icons"
import { Button } from "@unkey/ui"

----------------------------------------

TITLE: API Key Creation
DESCRIPTION: Example demonstrating how to create a new API key with custom parameters

LANGUAGE: rust
CODE:
use unkey::models::CreateKeyRequest;
use unkey::Client;

async fn create_key() {
    let c = Client::new("unkey_ABC");
    let req = CreateKeyRequest::new("api_123")
        .set_prefix("test")
        .set_remaining(100)
        .set_name("test_name")
        .set_owner_id("jonxslays");

    match c.create_key(req).await {
        Ok(res) => println!("{res:?}"),
        Err(err) => eprintln!("{err:?}"),
    }
}

----------------------------------------

TITLE: Listing Overrides by Namespace Name
DESCRIPTION: Example of retrieving rate limiting overrides using the namespace name parameter. Returns an array of override configurations for the specified namespace.

LANGUAGE: typescript
CODE:
const overrides = await unkey.listOverrides({ 
    namespaceName: "email.outbound"
});

----------------------------------------

TITLE: Initializing and Starting a Zen Server
DESCRIPTION: Demonstrates how to initialize a Zen server with configuration, register routes, and start listening for incoming HTTP requests.

LANGUAGE: go
CODE:
// Initialize a server
server, err := zen.New(zen.Config{
    Logger: logger,
    // ...
})
if err != nil {
    log.Fatalf("failed to create server: %v", err)
}

// Register routes
server.RegisterRoute([]zen.Middleware{...}, route)

// Start the server
err = server.Listen(ctx, ":8080")

----------------------------------------

TITLE: Implementing HTTP Server with Zen Framework in Go
DESCRIPTION: Demonstrates setting up a complete HTTP server using the Zen framework, including route handling, middleware configuration, request validation, and error handling. Shows implementation of both GET and POST endpoints with proper request/response structures.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"log"
	"log/slog"
	"net/http"

	"github.com/unkeyed/unkey/go/pkg/zen"
	"github.com/unkeyed/unkey/go/pkg/otel/logging"
	"github.com/unkeyed/unkey/go/pkg/zen/validation"
	"github.com/unkeyed/unkey/go/pkg/fault"
)

// Request struct for our create user endpoint
type CreateUserRequest struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Response for successful user creation
type CreateUserResponse struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func main() {
	// Initialize logger
	logger := logging.New()

	// Create a new server
	server, err := zen.New(zen.Config{
		NodeID: "quickstart-server",
		Logger: logger,
	})
	if err != nil {
		log.Fatalf("failed to create server: %v", err)
	}

	// Initialize OpenAPI validator
	// see the validation package how we pass in the openapi spec
	validator, err := validation.New()
	if err != nil {
		log.Fatalf("failed to create validator: %v", err)
	}

	// Simple hello world route
	helloRoute := zen.NewRoute("GET", "/hello", func(ctx context.Context, s *zen.Session) error {
		return s.JSON(http.StatusOK, map[string]string{
			"message": "Hello, world!",
		})
	})

	// POST endpoint with request validation and error handling
	createUserRoute := zen.NewRoute("POST", "/users", func(ctx context.Context, s *zen.Session) error {
		// Parse request body
		var req CreateUserRequest
		if err := s.BindBody(&req); err != nil {
			return err // This will be handled by error middleware
		}

		// Additional validation logic
		if len(req.Password) < 8 {
			return fault.New("password too short",
				fault.WithTag(fault.BAD_REQUEST),
				fault.WithDesc(
					"password must be at least 8 characters", // Internal description
					"Password must be at least 8 characters long" // User-facing message
				),
			)
		}

		// Process the request (in a real app, you'd save to database etc.)
		userID := "user_pretendthisisrandom"

		// Return response
		return s.JSON(http.StatusCreated, CreateUserResponse{
			ID:    userID,
			Name:  req.Name,
			Email: req.Email,
		})
	})

	// Register routes with middleware
	server.RegisterRoute(
		[]zen.Middleware{
			zen.WithLogging(logger),
			zen.WithErrorHandling(logger),
		},
		helloRoute,
	)

	server.RegisterRoute(
		[]zen.Middleware{
			zen.WithTracing(),
			zen.WithLogging(logger),
			zen.WithErrorHandling(logger),
			zen.WithValidation(validator),
		},
		createUserRoute,
	)

	// Start the server
	logger.Info("starting server",
		"address", ":8080",
	)
	err = server.Listen(context.Background(), ":8080")
	if err != nil {
		logger.Error("server error", slog.String("error", err.Error()))
	}
}

----------------------------------------

TITLE: Rendering DateTime Example Component in React
DESCRIPTION: This snippet shows how to render the DateTimeExample component within a React application. It demonstrates the usage of the DateTime component in a practical context.

LANGUAGE: jsx
CODE:
<DateTimeExample/>

----------------------------------------

TITLE: Deleting Ratelimit Override with Unkey API in TypeScript
DESCRIPTION: This snippet shows how to delete a ratelimit override for a specific identifier within a namespace using the Unkey API. It removes the override for the 'email.send' namespace.

LANGUAGE: typescript
CODE:
import { Unkey } from "@unkey/api";

const unkey = new Unkey({
  rootKey: process.env.UNKEY_ROOT_KEY!,
});

await unkey.ratelimits.deleteOverride({
  namespaceName: "email.send",
  identifier: "*@customer.com",
})

----------------------------------------

TITLE: Structuring Page Component in Unkey Dashboard
DESCRIPTION: This example shows how to structure a typical page component in the Unkey dashboard. It demonstrates the use of global shared components and feature-specific components, as well as the basic layout structure.

LANGUAGE: typescript
CODE:
import { Navbar } from "@/components/navbar"; // Global shared component
import { PageContent } from "@/components/page-content";
import { FeatureComponent } from "./components/feature-component";

export default function FeaturePage() {
  // Page implementation
  // This is also we where we do our server side data fetching.
  return (
    <div>
      <Navbar>{/* Navigation content */}</Navbar>
      <PageContent>
        {/* Entry to our actual component. This one is usually a client-side component */}
        <FeatureComponent />
      </PageContent>
    </div>
  );
}

----------------------------------------

TITLE: Listing API Keys
DESCRIPTION: Example showing how to retrieve a list of all API keys

LANGUAGE: rust
CODE:
use unkey::models::ListKeysRequest;
use unkey::Client;

async fn list_keys() {
    let c = Client::new("unkey_ABC");
    let req = ListKeysRequest::new("api_123");

    match c.list_keys(req).await {
        Ok(res) => println!("{res:?}"),
        Err(err) => eprintln!("{err:?}"),
    }
}

----------------------------------------

TITLE: Creating Roles in Unkey with Python
DESCRIPTION: Example of creating a new role using the Unkey Python SDK. The role is created with a name and description, requiring bearer authentication.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.permissions.create_role(request={
    "name": "dns.records.manager",
    "description": "dns.records.manager can read and write dns records for our domains.",
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Rate Limit Logs Population Script in Bash
DESCRIPTION: A bash script that generates test data for the /ratelimit/logs endpoint. Uses an array of humorous identifiers to create rate limit test scenarios with varying patterns and metadata.

LANGUAGE: bash
CODE:
#!/bin/bash

# Check for API key in command line args
UNKEY_ROOT_KEY=""

while [[ $# -gt 0 ]]; do
  case $1 in
  --key | -k)
    UNKEY_ROOT_KEY="$2"
    shift 2
    ;;
  *)
    break
    ;;
  esac
done

# [rest of the script...]

----------------------------------------

TITLE: Configuring Unkey Rate Limiter for tRPC Procedure
DESCRIPTION: Setting up the Unkey rate limiter with root key, namespace, limit, and duration for a specific tRPC procedure.

LANGUAGE: typescript
CODE:
const unkey = new Ratelimit({
  rootKey: env.UNKEY_ROOT_KEY,
  namespace: "posts.create",
  limit: 3,
  duration: "5s",
});

----------------------------------------

TITLE: Setting Ratelimit Override Handler in TypeScript
DESCRIPTION: Demonstrates how to implement a request handler that sets a rate limit override for a specific identifier. Includes error handling and configuration options for limit, duration, and namespace with async support.

LANGUAGE: typescript
CODE:
async function handler(request) {

  const identifier = request.getUserId() // or ip or anything else you want

  const override = await unkey.setOverride({
      identifier: identifier,
      limit: 10,
      duration: 60000,
      namespaceName: "email.outbound",
      async: true
  })
  if (override.error){
    // handle the error here
    console.error(override.error.message);
    return;
  }
  // handle the request here
}

----------------------------------------

TITLE: Verifying API Requests in Nuxt Server Route
DESCRIPTION: Example of using the automatically-verified Unkey context in a Nuxt server route to check API key validity.

LANGUAGE: typescript
CODE:
export default defineEventHandler(async (event) => {
  if (!event.context.unkey.valid) {
    throw createError({ statusCode: 403, message: "Invalid API key" })
  }

  // return authorised information
  return {
    // ...
  };
});

----------------------------------------

TITLE: Querying Verification Analytics in Unkey
DESCRIPTION: Example of querying the analytics API to get the top 5 users of a specific API endpoint, demonstrating filtering, grouping, and ordering of verification data.

LANGUAGE: bash
CODE:
curl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1733749385000&end=1736431397000&apiId=api_262b3iR7gkmP7aUyZ24uihcijsCe&groupBy=identity&orderBy=total&order=desc&limit=5' \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer <UNKEY_ROOT_KEY>'

----------------------------------------

TITLE: Listing All Permissions in Unkey with Python
DESCRIPTION: Example of listing all permissions using the Unkey Python SDK. This operation requires bearer authentication.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.permissions.list()

if res.response_bodies is not None:
    # handle response
    pass

----------------------------------------

TITLE: Flask API Caching Implementation in Python
DESCRIPTION: Implementation of API caching in Flask using flask-caching extension. The example shows how to cache route responses with a specified timeout.

LANGUAGE: python
CODE:
from flask_caching import Cache
from flask import Flask

app = Flask(__name__)
cache = Cache(app, config={'CACHE_TYPE': 'simple'})

@app.route('/product/<id>')
@cache.cached(timeout=50, key_prefix='product_')
def get_product(id):
    # Code to fetch product
    return product

----------------------------------------

TITLE: Querying Recent Key Verifications with ClickHouse in TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve recent key verifications using the ClickHouse client. It fetches the 50 most recent verifications for a specific key in a given workspace and keyspace.

LANGUAGE: typescript
CODE:
const recentVerifications = await ch.verifications.logs({
  workspaceId: "ws_123",
  keySpaceId: "ks_123",
  keyId: "key_123"
});

// Returns the 50 most recent verifications for this key

----------------------------------------

TITLE: Setting Ratelimit Override with Namespace ID
DESCRIPTION: Example of setting a ratelimit override using namespaceId parameter. Sets a limit of 5 requests within 50 seconds for user_123 using synchronous execution.

LANGUAGE: typescript
CODE:
const override = await unkey.setOverride({
    identifier: "user_123", 
    limit: 5, 
    duration: 50000, 
    namespaceId: "rlns_1234",
    async: false
})

----------------------------------------

TITLE: Single-Node Deployment Configuration
DESCRIPTION: Example configuration for running Unkey in single-node mode.

LANGUAGE: bash
CODE:
unkey api \
  --database-primary="mysql://root:password@localhost:3306/unkey?parseTime=true" \
  --color=true \
  --http-port=8080 \
  --region=dev-local

----------------------------------------

TITLE: Initializing a Zen Route for HTTP GET Request
DESCRIPTION: Demonstrates how to create a new route using Zen, specifying the HTTP method, path, and handler function. The handler uses a Session object to send a JSON response.

LANGUAGE: go
CODE:
route := zen.NewRoute("GET", "/v2/liveness",
	func(ctx context.Context, s *zen.Session) error {
		res := Response{
			Message: "we're cooking",
		}
		return s.JSON(http.StatusOK, res)
	},
)

----------------------------------------

TITLE: Ratelimit Configuration Setup
DESCRIPTION: Example of configuring the Ratelimit instance with options for rootKey, namespace, limit, duration, and async mode.

LANGUAGE: typescript
CODE:
import { Ratelimit } from "@unkey/ratelimit"

const unkey = new Ratelimit({
  rootKey: process.env.UNKEY_ROOT_KEY,
  namespace: "my-app",
  limit: 10,
  duration: "30s",
  async: true
})

----------------------------------------

TITLE: Building Unkey Binary
DESCRIPTION: Compile the Unkey Go application into a binary.

LANGUAGE: bash
CODE:
go build -o unkey .

----------------------------------------

TITLE: User Flow Diagram - Subscription Process
DESCRIPTION: ASCII diagram showing the complete user flow from signup through subscription activation, including authentication, workspace creation, and payment processing steps.

LANGUAGE: plaintext
CODE:
┌────────────┐     ┌────────────┐     ┌────────────┐     ┌────────────┐
│            │     │            │     │            │     │            │
│   Signup   │────►│  WorkOS    │────►│  Create    │────►│ Free Tier  │
│            │     │ Auth & Org │     │ Workspace  │     │            │
└────────────┘     └────────────┘     └────────────┘     └────────────┘
                                                                │
                                                                │
                                                                ▼
┌────────────┐     ┌────────────┐     ┌────────────┐     ┌────────────┐
│            │     │            │     │            │     │            │
│ Active Plan│◄────│ Start Trial│◄────│ Add Payment│◄────│  User      │
│            │     │            │     │ Method     │     │  Action    │
└────────────┘     └────────────┘     └────────────┘     └────────────┘

----------------------------------------

TITLE: Implementing Ratelimiting in Request Handler with TypeScript
DESCRIPTION: This code shows how to use the configured ratelimiter in a request handler to determine whether to process or reject a request based on the rate limit.

LANGUAGE: typescript
CODE:
async function handler(request) {
  const identifier = request.getUserId();

  const ratelimit = await unkey.limit(identifier);
  if (!ratelimit.success) {
    return new Response("try again later", { status: 429 });
  }
  // handle the request here
}

----------------------------------------

TITLE: Unkey API Error Response Format
DESCRIPTION: Standard JSON error response structure from Unkey API containing error code, descriptive message, documentation link, and request ID for debugging purposes.

LANGUAGE: json
CODE:
{
  error: {
    code: "UNAUTHORIZED",
    message: "We were unable to authorize your request. Either your key was missing, malformed or does not have the required permissions.",
    docs: "https://unkey.api/docs/api-reference/errors/code/BAD_REQUEST",
    requestId: "req_1234567890"
  }
}

----------------------------------------

TITLE: Registering a Zen Route with Middleware
DESCRIPTION: Shows how to register a route with the Zen server, applying multiple middleware functions such as tracing, metrics, logging, error handling, and validation.

LANGUAGE: go
CODE:
func main(){
	// ...

	// Create a route
	route := zen.NewRoute("POST", "/v2/ratelimit.limit", handler)

	// Register with middleware
	server.RegisterRoute(
	    []zen.Middleware{
	      zen.WithTracing(),
	      zen.WithMetrics(eventBuffer),
	      zen.WithLogging(logger),
	      zen.WithErrorHandling(logger),
	      zen.WithValidation(validator),
	    },
	    route,
	)
}

----------------------------------------

TITLE: Importing Required Modules for tRPC Rate Limiting
DESCRIPTION: Importing necessary modules including Ratelimit from @unkey/ratelimit, TRPCError, and env for implementing rate limiting in tRPC.

LANGUAGE: typescript
CODE:
import { z } from "zod";

import {
  createTRPCRouter,
  protectedProcedure,
  publicProcedure,
} from "~/server/api/trpc";
import { posts } from "~/server/db/schema";
import { env } from "~/env";
import { TRPCError } from "@trpc/server";
import { Ratelimit } from "@unkey/ratelimit";

----------------------------------------

TITLE: Asynchronous Unkey SDK Usage Example
DESCRIPTION: Example showing how to use the Unkey SDK asynchronously with asyncio

LANGUAGE: python
CODE:
# Asynchronous Example
import asyncio
import os
from unkey_py import Unkey

async def main():
    s = Unkey(
        bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
    )
    res = await s.liveness.check_async()
    if res.object is not None:
        # handle response
        pass

asyncio.run(main())

----------------------------------------

TITLE: Memory Cache Implementation in C#
DESCRIPTION: Example of implementing in-memory caching in C# using IMemoryCache. The service demonstrates how to check, store, and retrieve cached products with expiration time.

LANGUAGE: csharp
CODE:
using Microsoft.Extensions.Caching.Memory;

public class ProductService {
    private readonly IMemoryCache _cache;

    public ProductService(IMemoryCache cache) {
        _cache = cache;
    }

    public Product GetProductById(string id) {
        Product product;
        if (!_cache.TryGetValue(id, out product)) {
            product = FetchProductById(id); // Fetch from DB or API
            _cache.Set(id, product, TimeSpan.FromMinutes(10)); // Cache it
        }
        return product;
    }
}

----------------------------------------

TITLE: Verifying a Usage-Limited API Key with Unkey
DESCRIPTION: This snippet shows how to verify a usage-limited API key using Unkey. It sends a POST request to the verification endpoint and returns the remaining verifications for the key.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.verifyKey \
  --header 'Content-Type: application/json' \
  --data '{
      "apiId":"<API_ID>",
      "key": "<NEW_KEY>"
	}'

LANGUAGE: json
CODE:
{
	"valid": true,
	"remaining": 99
}

----------------------------------------

TITLE: Successful Response from update_key in Unkey Elixir SDK
DESCRIPTION: This snippet shows the expected successful response from the update_key function, which is simply the :ok atom.

LANGUAGE: elixir
CODE:
:ok

----------------------------------------

TITLE: Verifying a Key with Environment in Unkey API
DESCRIPTION: This snippet demonstrates how to verify a key and retrieve its environment information using the Unkey API. It sends a POST request to the verification endpoint with the API ID and key.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.verifyKey \
  --header 'Content-Type: application/json' \
  --data '{
    "apiId": "api_1234",
    "key": "sk_1234"
  }'

----------------------------------------

TITLE: Defining KeyAttributes DTO for Unkey SDK in Java
DESCRIPTION: This snippet defines the KeyAttributes DTO which represents the properties of an individual API key in the Unkey system. It includes various fields such as id, apiId, workspaceId, and more.

LANGUAGE: java
CODE:
public class KeyAttributes {
    private String id;
    private String apiId;
    private String workspaceId;
    private String start;
    private String name;
    private String ownerId;
    private Meta meta;
    private Long createdAt;
    private Long expires;
    private Integer remaining;
    private KeyRateLimit ratelimit;
}

----------------------------------------

TITLE: Setting Ratelimit Override
DESCRIPTION: Example of setting a custom rate limit override via the API for specific namespace and user.

LANGUAGE: curl
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/ratelimits.setOverride \
  --header 'Authorization: Bearer unkey-root-key' \
  --header 'Content-Type: application/json' \
  --data '{
    "namespaceName": "email.outbound",
    "identifier": "user_123",
    "limit": 10,
    "duration": 60000,
    "async": true
}'

----------------------------------------

TITLE: Defining a Hello World Task in Trigger.dev SDK v3
DESCRIPTION: This snippet demonstrates how to create a simple 'Hello World' task using Trigger.dev SDK v3. It includes task definition with a unique ID and a run function that logs a message.

LANGUAGE: typescript
CODE:
import { task } from "@trigger.dev/sdk/v3";

export const helloWorld = task({
  id: "hello-world",
  run: async (payload: { message: string }) => {
    console.log(payload.message);
  },
});

----------------------------------------

TITLE: Updating Key Remaining Value in Unkey with Elixir
DESCRIPTION: This snippet demonstrates how to use the UnkeyElixirSdk to update the remaining value of a key. It shows the function call with required parameters and error handling.

LANGUAGE: elixir
CODE:
   try do
     opts = UnkeyElixirSdk.update_remaining(%{
            "keyId": "key_123",
            "op": "increment",
            "value": 1
            })

    catch
        err ->
          Logger.error(err)
      end

----------------------------------------

TITLE: API Key Creation Response JSON Structure
DESCRIPTION: This JSON structure represents the response format when creating an API key with Unkey. It includes the generated key and a unique key ID for reference.

LANGUAGE: json
CODE:
{
	"key": "xyz_AS5HDkXXPot2MMoPHD8jnL",
     "keyId": "key_cm9vdCBvZiBnb29kXa"
}

----------------------------------------

TITLE: Defining Command Grammar in Markdown
DESCRIPTION: This code snippet shows how to define a command grammar for a language model using a Markdown table format.

LANGUAGE: markdown
CODE:
| Command            | Arguments                   | Description                                      |
| ------------------ | --------------------------- | ------------------------------------------------ |
| list-expenses      | budget                      | Returns a list of expenses for a given budget    |
| converse           | message                     | A message to show to the user                    |
| plot-expenses      | expenses[]                  | Plots a list of expenses                         |
| get-budget-by-name | budget_name                 | Retrieves a budget by name                       |
| list-budgets       |                             | Returns a list of budgets the user has access to |
| add-memo           | inbox_item_id, memo message | Adds a memo to the provided inbox item           |

----------------------------------------

TITLE: API Key Verification Response in JSON
DESCRIPTION: The response from verifying an API key, including validity status, remaining requests, and rate limit information.

LANGUAGE: bash
CODE:
{
   "valid":true,
   "remaining":99,
   "ratelimit":{
      "limit":10,
      "remaining":9,
      "reset":1690065988700
   }
}

----------------------------------------

TITLE: Importing OnHoverExample Component in JSX
DESCRIPTION: Import statement for a Tooltip hover example component from a local file.

LANGUAGE: jsx
CODE:
import { OnHoverExample } from "./tooltip.onHover"

----------------------------------------

TITLE: Setting Rate Limits on Identity with Unkey API in TypeScript
DESCRIPTION: Update the identity with rate limits using a POST request. This example sets a daily request limit and a per-minute token limit.

LANGUAGE: typescript
CODE:
const updateRes = await fetch("https://api.unkey.dev/v1/identities.updateIdentity", {
    method: "POST",
    headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${rootKey}`,
    },
    body: JSON.stringify({
        identityId: identity.id,
        ratelimits: [
        /**
         * We define a limit that allows 10 requests per day
         */
        {
            name: "requests",
            limit: 10,
            duration: 24 * 60 * 60 * 1000, // 24h
        },
        /**
         * And a second limit that allows 1000 tokens per minute
         */
        {
            name: "tokens",
            limit: 1000,
            duration: 60 * 1000, // 1 minute
        },
        ],
    }),
});

----------------------------------------

TITLE: Creating API Key with Unkey in Elixir
DESCRIPTION: This snippet demonstrates how to create an API key using the UnkeyElixirSdk. It sets various options including API ID, prefix, byte length, owner ID, metadata, expiration, rate limiting, and usage limit.

LANGUAGE: elixir
CODE:
   try do
        expiry =
          DateTime.utc_now()
          |> DateTime.add(100_000)
          |> DateTime.to_unix(:millisecond)

        opts =
          UnkeyElixirSdk.create_key(%{
            "apiId" => "api_7oKUUscTZy22jmVf9THxDA",
            "prefix" => "xyz",
            "byteLength" => 16,
            "ownerId" => "glamboyosa",
            "meta" => %{"hello" => "world"},
            "expires" => expiry,
            "ratelimit" => %{
              "type" => "fast",
              "limit" => 10,
              "refillRate" => 1,
              "refillInterval" => 1000
            },
            "remaining" => 10
          })

        Logger.info(opts)
      catch
        err ->
          Logger.error(err)
      end

----------------------------------------

TITLE: Generating Slogans with Examples in Python
DESCRIPTION: This code snippet demonstrates how to create slogans for a coffee shop with live music using examples to guide the model's output.

LANGUAGE: python
CODE:
Create three slogans for a business with unique features.
Business: Bookstore with cats
Slogans: "Purr-fect Pages", "Books and Whiskers", "Novels and Nuzzles"
Business: Gym with rock climbing
Slogans: "Peak Performance", "Reach New Heights", "Climb Your Way Fit"
Business: Coffee shop with live music
Slogans:

----------------------------------------

TITLE: Cost-Based Rate Limiting Example
DESCRIPTION: Example showing how to implement cost-based rate limiting where a single request can consume multiple tokens.

LANGUAGE: typescript
CODE:
const res = await rl.limit("identifier", { cost: 4 })

----------------------------------------

TITLE: Performing Relational Queries
DESCRIPTION: Shows how to perform nested relational queries using Drizzle ORM's query builder.

LANGUAGE: typescript
CODE:
const result = await db.query.users.findMany({
  with: {
    posts: true 
  },
});

----------------------------------------

TITLE: Importing Textarea Variants in React
DESCRIPTION: This code snippet imports various Textarea component variants and a utility component for rendering. It demonstrates how to import different states and functionalities of the Textarea component for use in a React application.

LANGUAGE: jsx
CODE:
import { RenderComponentWithSnippet } from "@/app/components/render"
import {
  TextareaDefaultVariant,
  TextareaSuccessVariant,
  TextareaWarningVariant,
  TextareaErrorVariant,
  TextareaDisabledVariant,
  TextareaWithDefaultValue,
  TextareaWithCharacterCount,
  TextareaWithBothIcons
} from "./textarea/textarea.variants.tsx"

----------------------------------------

TITLE: Response JSON for Verifying a Disabled Key
DESCRIPTION: This JSON snippet shows the expected response when verifying a disabled key. It includes the key ID, validity status (false for disabled keys), metadata, and the 'enabled' flag set to false.

LANGUAGE: json
CODE:
{
  "keyId": "<KEY_ID>",
  "valid": false,
  "meta": {},
  "enabled": false
}

----------------------------------------

TITLE: Creating Junction Tables for Many-to-Many Relations
DESCRIPTION: Demonstrates how to create junction tables for handling many-to-many relationships between entities.

LANGUAGE: typescript
CODE:
export const junctionTable = mysqlTable('junction_table', {
  table1Id: varchar('table1_id', { length: 255 }).notNull(),
  table2Id: varchar('table2_id', { length: 255 }).notNull(),
}, (t) => ({
  pk: primaryKey({ columns: [t.table1Id, t.table2Id] }),       
}));

----------------------------------------

TITLE: API Key Verification Response Structure
DESCRIPTION: TypeScript example showing the structure of a successful verification response

LANGUAGE: typescript
CODE:
{
	valid: true,
	ownerId: "glamboyosa",
	meta: {
		hello: "world"
	}
}

----------------------------------------

TITLE: Changelog Entry - Version 0.33.1
DESCRIPTION: Patch update modifying retry behavior for 4XX errors

LANGUAGE: markdown
CODE:
### Patch Changes\n- 10120e0: don't retry on 4XX

----------------------------------------

TITLE: Defining Textarea Props Interface in TypeScript
DESCRIPTION: This code snippet references an AutoTypeTable component that automatically generates a table of props for the Textarea component. It specifies the path to the TypeScript file containing the DocumentedTextareaProps interface, which defines the available props for the Textarea component.

LANGUAGE: tsx
CODE:
<AutoTypeTable
    name="DocumentedTextareaProps"
    path="../../internal/ui/src/components/textarea.tsx"
/>

----------------------------------------

TITLE: Defining Entry Interface in TypeScript
DESCRIPTION: This snippet defines a TypeScript interface for an Entry, which represents a stored value with freshness and staleness timestamps. It's used to manage the lifecycle and validity of stored data.

LANGUAGE: typescript
CODE:
export type Entry<TValue> = {
  value: TValue;

  // Before this time the entry is considered fresh and valid
  // UnixMilli
  freshUntil: number;

  /**
   * Unix timestamp in milliseconds.
   *
   * Do not use data after this point as it is considered no longer valid.
   *
   * You can use this field to configure automatic eviction in your store implementation.   *
   */
  staleUntil: number;
};

----------------------------------------

TITLE: Installing @unkey/nuxt Module
DESCRIPTION: Commands for installing the @unkey/nuxt module using different package managers.

LANGUAGE: bash
CODE:
bun install @unkey/nuxt

LANGUAGE: bash
CODE:
pnpm add @unkey/nuxt

LANGUAGE: bash
CODE:
yarn add @unkey/nuxt

LANGUAGE: bash
CODE:
npm install @unkey/nuxt

----------------------------------------

TITLE: Complete Rate Limiting API Handler in Zen
DESCRIPTION: A comprehensive example of a rate limiting API handler implemented using Zen. It demonstrates dependency injection, request binding, error handling, and response generation.

LANGUAGE: go
CODE:
package handler

import (...)

// Reexporting to reuse in tests
type Request = spec.V2RatelimitSetOverrideRequestBody
type Response = spec.V2RatelimitSetOverrideResponseBody


// Define the dependencies for this route. These are injected during route registration
type Services struct {
	Logger      logging.Logger
	DB          db.Database
	Keys        keys.KeyService
	Permissions permissions.PermissionService
}

func New(svc Services) zen.Route {
	return zen.NewRoute("POST", "/v2/ratelimit.setOverride", func(ctx context.Context, s *zen.Session) error {

		auth, err := svc.Keys.VerifyRootKey(ctx, s)
		if err != nil {
			return err
		}

		req := Request{}
		err = s.BindBody(&req)
		if err != nil {
			return err // already tagged
		}

		namespace, err := getNamespace(ctx, svc, auth.AuthorizedWorkspaceID, req)
		if err != nil {
			if errors.Is(err, sql.ErrNoRows) {
				return fault.Wrap(err,
					fault.WithTag(fault.NOT_FOUND),
					fault.WithDesc("namespace not found", "This namespace does not exist."),
				)
			}
			return err
		}

		if namespace.WorkspaceID != auth.AuthorizedWorkspaceID {
			return fault.New("namespace not found",
				fault.WithTag(fault.NOT_FOUND),
				fault.WithDesc("wrong workspace, masking as 404", "This namespace does not exist."),
			)
		}

		permissions, err := svc.Permissions.Check(
			ctx,
			auth.KeyID,
			rbac.Or(
				rbac.T(rbac.Tuple{
					ResourceType: rbac.Ratelimit,
					ResourceID:   namespace.ID,
					Action:       rbac.SetOverride,
				}),
				rbac.T(rbac.Tuple{
					ResourceType: rbac.Ratelimit,
					ResourceID:   "*",
					Action:       rbac.SetOverride,
				}),
			),
		)
		if err != nil {
			return fault.Wrap(err,
				fault.WithTag(fault.INTERNAL_SERVER_ERROR),
				fault.WithDesc("unable to check permissions", "We're unable to check the permissions of your key."),
			)
		}

		if !permissions.Valid {
			return fault.New("insufficient permissions",
				fault.WithTag(fault.INSUFFICIENT_PERMISSIONS),
				fault.WithDesc(permissions.Message, permissions.Message),
			)
		}

		overrideID := uid.New(uid.RatelimitOverridePrefix)
		err = db.Query.InsertRatelimitOverride(ctx, svc.DB.RW(), db.InsertRatelimitOverrideParams{
			ID:          overrideID,
			WorkspaceID: auth.AuthorizedWorkspaceID,
			NamespaceID: namespace.ID,
			Identifier:  req.Identifier,
			Limit:       int32(req.Limit),    // nolint:gosec
			Duration:    int32(req.Duration), //nolint:gosec
			CreatedAt:   time.Now().UnixMilli(),
		})
		if err != nil {
			return fault.Wrap(err,
				fault.WithTag(fault.DATABASE_ERROR),
				fault.WithDesc("database failed", "The database is unavailable."),
			)
		}

		return s.JSON(http.StatusOK, Response{
			OverrideId: overrideID,
		})
	})
}

func getNamespace(ctx context.Context, svc Services, workspaceID string, req Request) (db.RatelimitNamespace, error) {

	switch {
	case req.NamespaceId != nil:
		{
			return db.Query.FindRatelimitNamespaceByID(ctx, svc.DB.RO(), *req.NamespaceId)
		}
	case req.NamespaceName != nil:
		{
			return db.Query.FindRatelimitNamespaceByName(ctx, svc.DB.RO(), db.FindRatelimitNamespaceByNameParams{
				WorkspaceID: workspaceID,
				Name:        *req.NamespaceName,
			})
		}
	}

	return db.RatelimitNamespace{}, fault.New("missing namespace id or name",
		fault.WithTag(fault.BAD_REQUEST),
		fault.WithDesc("missing namespace id or name", "You must provide either a namespace ID or name."),
	)

}

----------------------------------------

TITLE: Changelog Entry - Version 0.33.0
DESCRIPTION: Minor update adding all options to verifyKey functionality

LANGUAGE: markdown
CODE:
### Minor Changes\n- 98bbb16: Add all options to verifyKey

----------------------------------------

TITLE: Rendering AutoTypeTable for FormTextarea Props in React
DESCRIPTION: This code snippet renders an AutoTypeTable component to display the props of the FormTextarea component. It specifies the name of the props interface and the path to the source file containing the component definition.

LANGUAGE: jsx
CODE:
<AutoTypeTable
    name="DocumentedFormTextareaProps"
    path="../../internal/ui/src/components/form/index.tsx"
/>

----------------------------------------

TITLE: Configuring Rate Limiting in Spring Cloud API Gateway
DESCRIPTION: This YAML configuration demonstrates how to set up rate limiting in Spring Cloud API Gateway. It configures a route with a RequestRateLimiter filter, setting limits for requests per second and burst capacity using Redis.

LANGUAGE: yaml
CODE:
spring:
  cloud:
    gateway:
      routes:
        - id: example_route
          uri: http://example.com
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20

----------------------------------------

TITLE: Importing Example Components for Id in React
DESCRIPTION: This snippet imports example components for demonstrating the Id component's functionality, including value truncation and width examples.

LANGUAGE: jsx
CODE:
import { ValueTruncateExample } from "./id.valueTruncate"
import { WidthExample } from "./id.width"
import { TypeTable } from 'fumadocs-ui/components/type-table';

----------------------------------------

TITLE: Breakdown by Individual Tag with Unkey Analytics API
DESCRIPTION: This snippet shows how to break down usage statistics by individual tags, regardless of their combination with other tags. It returns one element per unique tag with aggregated usage data.

LANGUAGE: bash
CODE:
curl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&groupBy=tag&apiId=api_123' \
 -H 'Authorization: Bearer unkey_XXX'

LANGUAGE: json
CODE:
[
  {
    "valid": 1,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 1,
    "tag": "b"
  },
  {
    "valid": 2,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 2,
    "tag": "c"
  },
  {
    "valid": 5,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 5,
    "tag": "a"
  }
]

----------------------------------------

TITLE: Disabling Keys via Unkey API
DESCRIPTION: cURL command to disable a key using the Unkey API. This demonstrates how to update a key's enabled status, which can be useful for temporarily revoking access.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.updateKey \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
  "enabled": false,
  "keyId": "<keyId>"
}'

----------------------------------------

TITLE: Form Validation Schema with Zod
DESCRIPTION: TypeScript code defining a Zod validation schema for project form data including name, category, description and image validation

LANGUAGE: typescript
CODE:
const formSchema = z.object({
	projectName: z.string().min(2).max(50),
	category: z.string().min(2).max(50),
	projectDescription: z
		.string()
		.min(10, { message: "Must be 10 or more characters long" })
		.max(500, { message: "Must be less than 500 characters long" }),
	projectImage: z
		.instanceof(File)
		.refine(
			(file) => !ACCEPTED_IMAGE_TYPES.includes(file?.type),
			"Only .jpg, .jpeg and .png formats are supported.",
		)
		.optional(),
});

----------------------------------------

TITLE: Basic Unkey Integration with Next.js Route Handler
DESCRIPTION: Basic implementation of Unkey verification in a Next.js route handler using withUnkey wrapper function.

LANGUAGE: typescript
CODE:
import { NextRequestWithUnkeyContext, withUnkey } from '@unkey/nextjs';

export const POST = withUnkey(async (req) => {

  // Process the request here
  // You have access to the verification response using `req.unkey`
  console.log(req.unkey);

  return new Response('Your API key is valid!');
},{ apiId: process.env.UNKEY_API_ID! });

----------------------------------------

TITLE: Verifying API Keys with Unkey Next.js SDK
DESCRIPTION: Example of using the Unkey Next.js SDK to verify API keys in a Next.js application. It demonstrates how to use the withUnkey middleware to access the verification response.

LANGUAGE: typescript
CODE:
import { NextRequestWithUnkeyContext, withUnkey } from '@unkey/nextjs';

export const POST = withUnkey(async (req) => {

  // Process the request here
  // You have access to the verification response using `req.unkey`
  console.log(req.unkey);

  return new Response('Your API key is valid!');
});

----------------------------------------

TITLE: Displaying Success Color Scale in HTML/CSS
DESCRIPTION: This snippet shows how to display a 12-step success color scale using HTML and CSS classes. It creates a grid of square elements, each representing a different shade of the success color.

LANGUAGE: HTML
CODE:
<div className="grid grid-cols-12 gap-2">
  <div className="rounded-lg aspect-square bg-success-1"/>
  <div className="rounded-lg aspect-square bg-success-2"/>
  <div className="rounded-lg aspect-square bg-success-3"/>
  <div className="rounded-lg aspect-square bg-success-4"/>
  <div className="rounded-lg aspect-square bg-success-5"/>
  <div className="rounded-lg aspect-square bg-success-6"/>
  <div className="rounded-lg aspect-square bg-success-7"/>
  <div className="rounded-lg aspect-square bg-success-8"/>
  <div className="rounded-lg aspect-square bg-success-9"/>
  <div className="rounded-lg aspect-square bg-success-10"/>
  <div className="rounded-lg aspect-square bg-success-11"/>
  <div className="rounded-lg aspect-square bg-success-12"/>
</div>

----------------------------------------

TITLE: Accessing Unkey Verification Status in Vue Component
DESCRIPTION: Vue component example showing how to access and display the Unkey verification status using the useRequestEvent composable.

LANGUAGE: html
CODE:
<template>
  <div>
    <pre>Was verified: {{ wasVerified }}</pre>
  </div>
</template>

<script setup>
const wasVerified = useState(() => ({ unkey: useRequestEvent()?.context?.unkey.valid }))
</script>

----------------------------------------

TITLE: Implementing Ratelimiting for OTP Verification in TypeScript
DESCRIPTION: Implementation of ratelimiting for the OTP verification endpoint. It uses a similar approach to the sending endpoint but with more restrictive limits.

LANGUAGE: typescript
CODE:
export async function verifyOTP(prevState: any, formData: FormData) {
  try {
    // check for forwarded
    let forwardedIP = headers().get("x-forwarded-for");
    // check for real-ip
    let realIP = headers().get("x-real-ip");
    if (forwardedIP) {
      forwardedIP.split(/, /)[0];
    }
    if (realIP) {
      realIP = realIP.trim();
    }

    const code = formData.get("code") as string | null;

    if (!code) {
      return {
        success: false,
        error: "Code was not supplied, please try again",
        statusCode: 400,
      };
    }

    const { success, reset } = await unkey.limit(
      forwardedIP || realIP || "no-ip",
    );
    const millis = reset - Date.now();
    const timeToReset = Math.floor(millis / 1000);

    if (!success) {
      return {
        success: false,
        error: `You have been rate limited, please wait ${timeToReset} seconds and try entering a new code`,
        statusCode: 429,
      };
    }
    // Handle verification of your OTP

----------------------------------------

TITLE: Basic AWS User Group Assignment Script
DESCRIPTION: Bash script for adding an AWS user to a group using environment variables for AWS profile and region configuration. Requires AWS CLI and appropriate administrative permissions.

LANGUAGE: bash
CODE:
AWS_PROFILE=unkey-root-admin \
AWS_REGION=us-east-1 \
bash unkeyed/infra/contrib/add-aws-user-to-aws-group.sh [username]

----------------------------------------

TITLE: Configuring Automatic Retries in Unkey SDK
DESCRIPTION: Shows how to initialize the Unkey SDK with custom retry logic. The example configures 10 retry attempts with a linear backoff strategy that increases delay by 1 second per attempt.

LANGUAGE: tsx
CODE:
import { Unkey } from "@unkey/api";

const unkey = new Unkey({
  token: "<UNKEY_TOKEN>",
  retry: {
    attempts: 10,
    backoff: (previousAttempts) => previousAttempts * 1000, // 0s, 1s, 2s, 3s etc
  },
});

----------------------------------------

TITLE: Retrieving an Identity from Unkey API in TypeScript
DESCRIPTION: Send a GET request to retrieve the created identity, confirming its successful creation and fetching its details.

LANGUAGE: typescript
CODE:
const getIdentityResponse = await fetch(`https://api.unkey.dev/v1/identities.getIdentity?identityId=${identityId}`, {
    method: "GET",
    headers: {
        Authorization: `Bearer ${rootKey}`,
    }
});

const identity = await getIdentityResponse.json<{
    id: string;
    externalId: string;
    meta: unknown;
    ratelimits: Array<{ name: string; limit: number; duration: number }>;
}>();

----------------------------------------

TITLE: Updating API Key Properties with Unkey
DESCRIPTION: Updates existing API key properties including usage limits and metadata. Requires authentication with Unkey bearer token and key ID.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.updateLey \
  --header 'Authorization: Bearer <UNKEY>' \
  --header 'Content-Type: application/json' \
  -d '{
    "keyId": "<KEY_ID>",
    "remaining": 200,
  }'

----------------------------------------

TITLE: Importing Icons from Unkey Package in TypeScript/React
DESCRIPTION: This snippet demonstrates how to import icons from the @unkey/icons package. It's a crucial step for using Unkey's icon system in a React application.

LANGUAGE: tsx
CODE:
import { IconName } from "@unkey/icons";

----------------------------------------

TITLE: WHOAMI Key Verification Request
DESCRIPTION: Example of using the WHOAMI endpoint to retrieve details about an API key.

LANGUAGE: curl
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.whoami \
  --header 'Authorization: Bearer unkey_root_key' \
  --header 'Content-Type: application/json' \
  --data '{"key": "sk_123"}'

----------------------------------------

TITLE: Running Hono Application - Package Manager Commands
DESCRIPTION: Commands to start the Hono development server using different package managers.

LANGUAGE: bash
CODE:
bun run dev

LANGUAGE: bash
CODE:
pnpm run dev

LANGUAGE: bash
CODE:
yarn run dev

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Aggregating Monthly Active Keys in SQL
DESCRIPTION: SQL query to aggregate active keys per workspace and month

LANGUAGE: sql
CODE:
SELECT
    workspaceId,
    apiId,
    keyId,
    toStartOfMonth(fromUnixTimestamp64Milli(time)) AS time
FROM key_verifications__v2
GROUP BY
    workspaceId,
    apiId,
    keyId,
    time

----------------------------------------

TITLE: Custom Key Extraction Configuration
DESCRIPTION: Example of customizing how API keys are extracted from requests using the getKey configuration option.

LANGUAGE: typescript
CODE:
export const GET = withUnkey(async (req) => {
  // ...
}, {
	getKey: (req) => new URL(req.url).searchParams.get("key"),
});

----------------------------------------

TITLE: Listing Rate Limit Overrides Using Namespace Name in Unkey API (TypeScript)
DESCRIPTION: This code snippet shows how to list rate limit overrides using the namespaceName parameter in the Unkey API. It uses the unkey.ratelimit.listOverrides method to fetch the overrides based on the namespace name.

LANGUAGE: typescript
CODE:
const overrides = await unkey.ratelimit.listOverrides({
    namespaceName: "email.outbound"
});

----------------------------------------

TITLE: GetAPIResponse DTO Definition in Java
DESCRIPTION: This snippet defines the GetAPIResponse data transfer object (DTO) used for the API retrieval response. It includes fields for id, name, and workspaceId.

LANGUAGE: java
CODE:
public class GetAPIResponse {
    private String id;
    private String name;
    private String workspaceId;
}

----------------------------------------

TITLE: Configuring Machine Options for Resource-Intensive Tasks in Trigger.dev SDK v3
DESCRIPTION: This snippet demonstrates how to configure machine options for tasks requiring more resources in Trigger.dev SDK v3. It shows setting a 'large-1x' preset for 4 vCPU and 8 GB RAM.

LANGUAGE: typescript
CODE:
export const heavyTask = task({
  id: "heavy-task",
  machine: {
    preset: "large-1x", // 4 vCPU, 8 GB RAM
  },
  run: async (payload: any, { ctx }) => {
    //...
  },
});

----------------------------------------

TITLE: Listing Rate Limit Overrides Using Namespace ID in Unkey API (TypeScript)
DESCRIPTION: This code snippet demonstrates how to list rate limit overrides using the namespaceId parameter in the Unkey API. It uses the unkey.ratelimit.listOverrides method to retrieve the overrides.

LANGUAGE: typescript
CODE:
const overrides = await unkey.ratelimit.listOverrides({
    nameSpaceId:"rlns_12345", 
});

----------------------------------------

TITLE: Running Tinybird Proxy Docker Container
DESCRIPTION: Command to run the Tinybird proxy service using Docker, configuring the port and authentication token.

LANGUAGE: bash
CODE:
docker run -p 8000:8000 -e TINYBIRD_TOKEN="abc" ghcr.io/unkeyed/tinybird-proxy:latest

----------------------------------------

TITLE: Rate Limit Override Response Structure
DESCRIPTION: Example response structure showing the format of a rate limit override result, including the override ID, identifier, limit settings, and async flag.

LANGUAGE: typescript
CODE:
{
  result: {
    id: "rlor_4567",
    identifier: "user.example",
    limit: 10,
    duration: 60000,
    async: false
  }
}

----------------------------------------

TITLE: Creating Changeset in Feature Branch
DESCRIPTION: Command to create a new changeset in the feature branch before committing changes.

LANGUAGE: shell
CODE:
pnpm changeset

----------------------------------------

TITLE: Basic Button Implementation in React
DESCRIPTION: Examples of basic button variants including primary, outline, and ghost styles with different states like hover, focus, loading, and disabled.

LANGUAGE: jsx
CODE:
<Button>Default</Button>
<Button variant="outline">Outline</Button>
<Button variant="ghost">Ghost</Button>

----------------------------------------

TITLE: Getting Rate Limit Override with Namespace Name
DESCRIPTION: Retrieves a rate limit override using a user identifier and namespace name. Provides an alternative way to fetch rate limit configurations using friendly names.

LANGUAGE: typescript
CODE:
const override = await unkey.ratelimit.getOverride({
  identifier:"user.example", 
  namespaceName: "email.outbound"
});

----------------------------------------

TITLE: Starting the Express Server
DESCRIPTION: Command to start the Express server using npm.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Retrieving API Configuration with Unkey in TypeScript
DESCRIPTION: This snippet demonstrates how to use the unkey library to retrieve the configuration of an API. It requires the apiId as a parameter and returns an object containing the API's id, name, and workspaceId.

LANGUAGE: typescript
CODE:
const api = await unkey.apis.get({
  apiId: "api_123",
});

console.log(api);

LANGUAGE: typescript
CODE:
{
  result: {
    id: 'api_123',
    name: 'My API',
    workspaceId: 'ws_123'
  }
}

----------------------------------------

TITLE: Ratelimit Override Response Format
DESCRIPTION: Example response structure when setting a ratelimit override, showing the overrideId in the result object.

LANGUAGE: typescript
CODE:
{ 
  result: {
     overrideId: 'rlor_12345' 
  }
}

----------------------------------------

TITLE: Running Unkey Local Command with Options in Bash
DESCRIPTION: Example of running the 'pnpm local' command with specific options to bypass manual input and specify the service to develop.

LANGUAGE: bash
CODE:
pnpm local --service=dashboard --skip-env

----------------------------------------

TITLE: Importing FormTextarea Variants in React
DESCRIPTION: This code snippet imports various FormTextarea variants from a separate file. These variants are used to demonstrate different states and configurations of the FormTextarea component throughout the documentation.

LANGUAGE: jsx
CODE:
import {
  DefaultFormTextareaVariant,
  RequiredFormTextareaVariant,
  RequiredWithErrorFormTextareaVariant,
  OptionalFormTextareaVariant,
  SuccessFormTextareaVariant,
  WarningFormTextareaVariant,
  ErrorFormTextareaVariant,
  DisabledFormTextareaVariant,
  DefaultValueFormTextareaVariant,
  ReadonlyFormTextareaVariant,
  ComplexFormTextareaVariant
} from "./form/form-textarea.variants"

----------------------------------------

TITLE: Installing Unkey Next.js Package
DESCRIPTION: Commands to install the @unkey/nextjs package using different package managers.

LANGUAGE: bash
CODE:
npm install @unkey/nextjs

LANGUAGE: bash
CODE:
pnpm add @unkey/nextjs

LANGUAGE: bash
CODE:
yarn add @unkey/nextjs

LANGUAGE: bash
CODE:
bun install @unkey/nextjs

----------------------------------------

TITLE: Customizing API Key Retrieval in withUnkey
DESCRIPTION: Example of customizing how withUnkey retrieves the API key from the request, in this case from a URL search parameter.

LANGUAGE: typescript
CODE:
export const GET = withUnkey(async (req) => {
  // ...
}, {
	getKey: (req) => new URL(req.url).searchParams.get("key"),
});

----------------------------------------

TITLE: Setting Ratelimit Override with Namespace Name
DESCRIPTION: Example of setting a ratelimit override using namespaceName parameter. Sets a limit of 10 requests within 60 seconds for user_123 in the email.outbound namespace with async execution.

LANGUAGE: typescript
CODE:
const override = await unkey.setOverride({
    identifier: "user_123",
    limit: 10,
    duration: 60000,
    namespaceName: "email.outbound",
    async: true
})

----------------------------------------

TITLE: Configuring Ratelimiter in TypeScript with Unkey
DESCRIPTION: This snippet demonstrates how to configure the Unkey ratelimiter with a namespace, limit, and duration using the @unkey/ratelimit package.

LANGUAGE: typescript
CODE:
import { Ratelimit } from "@unkey/ratelimit"

const unkey = new Ratelimit({
  rootKey: process.env.UNKEY_ROOT_KEY,
  namespace: "ai.generate",
  limit: 10,
  duration: "30s",
});

----------------------------------------

TITLE: Fetching Override with Namespace Name
DESCRIPTION: Demonstrates how to retrieve a rate limit override using the namespaceName parameter. This approach identifies the namespace using a human-readable name.

LANGUAGE: typescript
CODE:
const override = await unkey.getOverride({
  identifier:"user.example", 
  namespaceName: "email.outbound"
});

----------------------------------------

TITLE: Implementing Dual-Message Error Handling in Go
DESCRIPTION: Demonstrates how to create errors with separate internal and public-facing messages using Fault's WithDesc function. This pattern helps maintain security by controlling what information is exposed to end users while preserving detailed internal context.

LANGUAGE: go
CODE:
fault.Wrap(err,
    fault.WithDesc(
        "database error: connection timeout", // internal message
        "Service temporarily unavailable."     // public message
    ),
)

----------------------------------------

TITLE: Database Schema for LibSQL Store
DESCRIPTION: SQL schema definition for creating the required cache table in LibSQL/Turso database.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS cache (
  key TEXT PRIMARY KEY,
  value TEXT NOT NULL,
  freshUntil INTEGER NOT NULL,
  staleUntil INTEGER NOT NULL
);

----------------------------------------

TITLE: Deleting an Override with Namespace ID in TypeScript
DESCRIPTION: This snippet shows how to delete an override using the unkey.deleteOverride() method with a namespace ID. It requires the user identifier and the namespace ID as parameters.

LANGUAGE: typescript
CODE:
await unkey.deleteOverride({
    identifier: "user_123",
    namespaceId:"rlns_12345", 
})

----------------------------------------

TITLE: Installing Unkey Next.js SDK
DESCRIPTION: Package installation commands for different package managers including npm, pnpm, yarn, and bun.

LANGUAGE: bash
CODE:
npm install @unkey/nextjs

LANGUAGE: bash
CODE:
pnpm add @unkey/nextjs

LANGUAGE: bash
CODE:
yarn add @unkey/nextjs

LANGUAGE: bash
CODE:
bun install @unkey/nextjs

----------------------------------------

TITLE: Installing Unkey API Client with Package Managers
DESCRIPTION: Instructions for installing the @unkey/api package using various package managers including npm, pnpm, yarn, and bun.

LANGUAGE: bash
CODE:
npm install @unkey/api

LANGUAGE: bash
CODE:
pnpm add @unkey/api

LANGUAGE: bash
CODE:
yarn add @unkey/api

LANGUAGE: bash
CODE:
bun install @unkey/api

----------------------------------------

TITLE: Disabling Telemetry Configuration
DESCRIPTION: Example of disabling anonymous telemetry data collection using the disableTelemetry configuration option.

LANGUAGE: typescript
CODE:
export const GET = withUnkey(async (req) => {
  // ...
}, { disableTelemetry: true });

----------------------------------------

TITLE: Automatic Location Tracking in Go Error Handling
DESCRIPTION: Demonstrates automatic source location capture in error creation and wrapping. This feature aids in debugging by maintaining a trail of where errors occur in the codebase.

LANGUAGE: go
CODE:
err := fault.New("initial error")         		  // captures location
err = fault.Wrap(err, fault.WithDesc(...))      // captures new location

----------------------------------------

TITLE: Implementing Metadata in Unkey API Keys
DESCRIPTION: Example of attaching metadata to Unkey API keys to enable quick business decisions without additional database lookups. Shows how to include billing tier and trial end date information.

LANGUAGE: json
CODE:
{
  "billingTier": "PRO",
  "trialEnds": "2023-06-16T17:16:37.161Z"
}

----------------------------------------

TITLE: Demonstrating HATEOAS REST API Response in JSON
DESCRIPTION: This snippet shows a JSON response from a HATEOAS-compliant REST API. It includes an entity with an ID and type, along with hypermedia links that provide navigation options for the client.

LANGUAGE: json
CODE:
{
  "id": "1",
  "type": "Example",
  "links": [
    {
      "rel": "self",
      "href": "http://api.example.com/examples/1"
    },
    {
      "rel": "edit",
      "href": "http://api.example.com/examples/1/edit"
    }
  ]
}

----------------------------------------

TITLE: Customizing Error Handling in withUnkey
DESCRIPTION: Example of specifying custom error handling for withUnkey, including tracking analytics and returning a custom response.

LANGUAGE: typescript
CODE:
export const GET = withUnkey(async (req) => {
  // ...
}, {
	onError: async (req, res) => {
      await analytics.trackEvent(`Error ${res.code}: ${res.message}`)
      return new NextResponse("Unkey error", { status: 500 })
    }
});

----------------------------------------

TITLE: Handling Errors in Unkey Middleware for Hono.js
DESCRIPTION: Shows how to implement custom error handling in the Unkey middleware for Hono.js applications. It includes an example of using the onError handler to customize error responses.

LANGUAGE: typescript
CODE:
app.use(
  "*",
  unkey({
    onError: (c, err) => {
      // handle error
      return c.text("unauthorized", 401);
    },
  })
);

----------------------------------------

TITLE: Listing API Keys with Unkey Python SDK
DESCRIPTION: Example of listing API keys using the Unkey Python SDK. Requires bearer authentication token, API ID, and optional limit parameter.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.apis.list_keys(request={
    "api_id": "api_1234",
    "limit": 100,
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Installing @unkey/hono Package
DESCRIPTION: Commands for installing the @unkey/hono package using different package managers.

LANGUAGE: bash
CODE:
npm install @unkey/hono

LANGUAGE: bash
CODE:
pnpm add @unkey/hono

LANGUAGE: bash
CODE:
yarn add @unkey/hono

LANGUAGE: bash
CODE:
bun install @unkey/hono

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers.

LANGUAGE: bash
CODE:
bun run dev

LANGUAGE: bash
CODE:
pnpm run dev

LANGUAGE: bash
CODE:
yarn run dev

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: UUID Generation with Prefix
DESCRIPTION: Demonstrates adding a meaningful prefix to UUIDs for better identification.

LANGUAGE: typescript
CODE:
const id = `hello_${crypto.randomUUID().replace(/-/g, "")}`;\n// hello_1559debea64142f3b2d29f8b0f126041

----------------------------------------

TITLE: Key Verification Response DTO Definition
DESCRIPTION: Data Transfer Object defining the structure of the API key verification response. Contains fields for validation status, ownership information, expiration, metadata, and rate limiting details.

LANGUAGE: java
CODE:
public class KeyVerifyResponse {
    @NonNull
    private Boolean valid;
    private String code;
    private String ownerId;
    private Long expires;
    private Object meta;
    private KeyVerifyRateLimit ratelimit;
    private Long remaining;
}

----------------------------------------

TITLE: API Key Verification Middleware
DESCRIPTION: Express middleware that verifies API keys using Unkey's verification endpoint and handles rate limiting responses.

LANGUAGE: javascript
CODE:
const verifyApiKey = async (req: Request, res: Response, next: NextFunction) => {
  const authHeader = req.headers.authorization;
  if (authHeader) {
    // Get the token from request headers
    const token = authHeader.split(" ")[1].trim();

    try {
      const myHeaders = new Headers();
      myHeaders.append("Content-Type", "application/json");

      const raw = JSON.stringify({
        key: token,
      });

      const verifyKeyResponse = await fetch(
        "https://api.unkey.dev/v1/keys.verifyKey",
        {
          method: "POST",
          headers: myHeaders,
          body: raw,
          redirect: "follow",
        }
      );
      const verifyKeyResponseJson = await verifyKeyResponse.json();

      if (
        !verifyKeyResponseJson.valid &&
        verifyKeyResponseJson.code === "RATE_LIMITED"
      )
        return res.status(429).json({ message: "RATE_LIMITED" });

      if (!verifyKeyResponseJson.valid)
        return res.status(401).json({ message: "Unauthorized" });

      next();
    } catch (err) {
      console.log("ERROR: ", err);
      return res.status(401).json({ message: "Unauthorized" });
    }
  } else {
    return res.status(401).json({ message: "Unauthorized" });
  }
};

----------------------------------------

TITLE: Handling Unkey API Response Format
DESCRIPTION: Examples of the response format for successful and error cases when using the Unkey API. The API always returns either a result or an error field, never both or neither.

LANGUAGE: typescript
CODE:
{
  result: T // the result depends on what method you called
}

LANGUAGE: typescript
CODE:
{
  error: {
    // A machine readable error code
    code: ErrorCode;

    // A link to our documentation explaining this error in more detail
    docs: string;

    // A human readable short explanation
    message: string;

    // The request id for easy support lookup
    requestId: string;
  }
}

----------------------------------------

TITLE: Implementing API Key Update Endpoint in Java Spring Boot
DESCRIPTION: This code snippet shows how to create a REST controller endpoint for updating API keys using Unkey. It uses Spring Boot annotations and delegates the update operation to a KeyService. The endpoint accepts a keyId as a query parameter, the update request body as a Map, and an authorization token in the header.

LANGUAGE: java
CODE:
package com.example.myapp;

@RestController
public class APIController {

    private static IKeyService keyService = new KeyService();

    @PutMapping("/update")
    public ResponseEntity<String> updateKey(
            @RequestParam String keyId,
            @RequestBody Map<String, Object> keyUpdateRequest,
            @RequestHeader("Authorization") String authToken
    ) {
        // Delegate the creation of the key to the KeyService
        return keyService.updateKey(keyUpdateRequest, authToken, keyId);
    }
}

----------------------------------------

TITLE: Running the Express Server
DESCRIPTION: Command to start the Express server using npm.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Button with Icons Integration
DESCRIPTION: Examples showing how to integrate icons from Lucide library with button components.

LANGUAGE: jsx
CODE:
<Button>
  <span>Create</span>
  <PlusIcon />
</Button>
<Button variant="outline">
  <SearchIcon />
  <span>Search</span>
</Button>

----------------------------------------

TITLE: Color Variant Implementation
DESCRIPTION: Implementation of buttons with different color schemes including danger, warning, and success variants.

LANGUAGE: jsx
CODE:
<Button variant="primary" color="danger">Danger</Button>
<Button variant="primary" color="warning">Warning</Button>
<Button variant="primary" color="success">Success</Button>

----------------------------------------

TITLE: Handling Invalid API Keys in withUnkey
DESCRIPTION: Example of specifying custom handling for invalid API keys reported by Unkey, returning a custom unauthorized response.

LANGUAGE: typescript
CODE:
export const GET = withUnkey(async (req) => {
  // ...
}, {
	handleInvalidKey: (req, res) => {
      return new Response("Unauthorized", { status: 401 })
    }
});

----------------------------------------

TITLE: KeyCreateResponse DTO for Unkey SDK in Java
DESCRIPTION: This code defines the KeyCreateResponse data transfer object returned after successfully creating an API key. It contains the generated API key and its corresponding key ID.

LANGUAGE: java
CODE:
public class KeyCreateResponse {
    @NonNull
    private String key;
    @NonNull
    private String keyId;
}

----------------------------------------

TITLE: Verifying API Keys with Unkey in Python
DESCRIPTION: This snippet shows how to use the unkey package to verify an API key in Python. It uses an asynchronous client to verify the key and handles the result.

LANGUAGE: python
CODE:
import asyncio
import os
import unkey

async def main() -> None:
  client = unkey.Client(api_key=os.environ["API_KEY"])
  await client.start()

  result = await client.keys.verify_key("prefix_abc123")

  if result.is_ok:
    print(data.valid)
  else:
    print(result.unwrap_err())

----------------------------------------

TITLE: Meta DTO for Unkey SDK in Java
DESCRIPTION: This code defines the Meta data transfer object used within the KeyCreateRequest. It contains a map for storing metadata key-value pairs associated with the API key.

LANGUAGE: java
CODE:
public class Meta {
    private Map<String, String> meta;
}

----------------------------------------

TITLE: Initialize Bun Project
DESCRIPTION: Commands to create a new directory and initialize a Bun project

LANGUAGE: bash
CODE:
mkdir unkey-with-bun
cd unkey-with-bun
bun init -y

----------------------------------------

TITLE: Rendering AutoTypeTable for FormInput Props in React
DESCRIPTION: This code snippet demonstrates how to render an AutoTypeTable component to display the props of the FormInput component.

LANGUAGE: jsx
CODE:
<AutoTypeTable
    name="DocumentedFormInputProps"
    path="../../internal/ui/src/components/form/index.tsx"
/>

----------------------------------------

TITLE: Implementing API Key Listing with Unkey SDK in Java Spring Controller
DESCRIPTION: This snippet shows a Spring RestController method that handles GET requests to list API keys using the Unkey SDK. It takes apiId as a request parameter, an optional ListKeysRequest body, and an authorization token in the header.

LANGUAGE: java
CODE:
package com.example.myapp;

import com.unkey.unkeysdk.dto.GetAPIResponse;

@RestController
public class APIController {

    private static IAPIService apiService = new APIService();

    @GetMapping("/keys")
    public ListKeysResponse listKeys(
            @RequestParam String apiId,
            @RequestBody(required = false) ListKeysRequest listKeyRquest,
            @RequestHeader("Authorization") String authToken) {
        // Delegate the creation of the key to the IAPIService from the SDK
        return iapiService.listKeys(listKeyRquest, apiId, authToken);
    }
}

----------------------------------------

TITLE: Creating Zod Schemas from Drizzle Tables
DESCRIPTION: Demonstrates how to generate Zod schemas for insert and select operations, including schema customization.

LANGUAGE: typescript
CODE:
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';

export const insertTableNameSchema = createInsertSchema(tableName);
export const selectTableNameSchema = createSelectSchema(tableName);

LANGUAGE: typescript
CODE:
const insertUserSchema = createInsertSchema(users, {
  role: z.string(),
  id: (schema) => schema.id.positive(),
  email: (schema) => schema.email.email(),
});

LANGUAGE: typescript
CODE:
export const customTableNameSchema = selectTableNameSchema.extend({
  newField: z.string(),
});

----------------------------------------

TITLE: Using Unkey Helper for Key Creation
DESCRIPTION: Example of using the Unkey helper to create a new API key with various options including prefix, expiration, rate limiting, and metadata.

LANGUAGE: typescript
CODE:
const unkey = useUnkey();

const created = await unkey.keys.create({
  apiId: "api_7oKUUscTZy22jmVf9THxDA",
  prefix: "xyz",
  byteLength: 16,
  ownerId: "chronark",
  meta: {
    hello: "world",
  },
  expires: 1686941966471,
  ratelimit: {
    async: true,
    duration: 1000,
    limit: 10,
    refillRate: 1,
    refillInterval: 1000,
  },
});

console.log(created.key);

----------------------------------------

TITLE: Defining TypeTable for Id Component Props in React
DESCRIPTION: This snippet defines a TypeTable component that documents the props for the Id component, including value, truncate, and className.

LANGUAGE: jsx
CODE:
<TypeTable
  type={{
    value: {
      description:
        'The identifier to display.',
      type: 'string',
    },
    truncate: {
      description:
        'Number of characters to show before truncating.',
      type: 'number | undefined',
      default: undefined
    },
    className: {
      description:
        'A className applied to the component to override the styling.',
      type: 'string | undefined',
      default: undefined
    },
  }}
/>

----------------------------------------

TITLE: Install Unkey API Package
DESCRIPTION: Command to install the Unkey API package dependency

LANGUAGE: bash
CODE:
bun install @unkey/api

----------------------------------------

TITLE: Importing DateTime Component and Related Elements in React
DESCRIPTION: This snippet demonstrates the import statements required for using the DateTime component and related elements in a React application. It imports the Button component from Unkey UI, custom components for rendering and layout, and the DateTimeExample component.

LANGUAGE: jsx
CODE:
import { Button } from "@unkey/ui"
import { RenderComponentWithSnippet } from "@/app/components/render"
import { Row } from "@/app/components/row"
import { DateTimeExample } from "./date-time.example"

----------------------------------------

TITLE: CORS Configuration
DESCRIPTION: CORS headers configuration for Supabase function

LANGUAGE: typescript
CODE:
export const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, x-unkey-api-key, content-type",
};

----------------------------------------

TITLE: Implementing Task Lifecycle Functions in Trigger.dev SDK v3
DESCRIPTION: This set of snippets demonstrates various lifecycle functions available in Trigger.dev SDK v3, including init, cleanup, onStart, onSuccess, and onFailure. These functions allow for additional control and side effects during task execution.

LANGUAGE: typescript
CODE:
export const taskWithInit = task({
  id: "task-with-init",
  init: async (payload, { ctx }) => {
    //...
  },
  run: async (payload: any, { ctx }) => {
    //...
  },
});

export const taskWithCleanup = task({
  id: "task-with-cleanup",
  cleanup: async (payload, { ctx }) => {
    //...
  },
  run: async (payload: any, { ctx }) => {
    //...
  },
});

export const taskWithOnStart = task({
  id: "task-with-on-start",
  onStart: async (payload, { ctx }) => {
    //...
  },
  run: async (payload: any, { ctx }) => {
    //...
  },
});

export const taskWithOnSuccess = task({
  id: "task-with-on-success",
  onSuccess: async (payload, output, { ctx }) => {
    //...
  },
  run: async (payload: any, { ctx }) => {
    //...
  },
});

export const taskWithOnFailure = task({
  id: "task-with-on-failure",
  onFailure: async (payload, error, { ctx }) => {
    //...
  },
  run: async (payload: any, { ctx }) => {
    //...
  },
});

----------------------------------------

TITLE: Implementing Cost Configuration in Ratelimiting with TypeScript
DESCRIPTION: This snippet shows how to set a cost for a request in the ratelimiter, allowing for flexible handling of expensive resources in the application.

LANGUAGE: typescript
CODE:
async function handler(request: NextApiRequest) {
  const identifier = request.getUserId();

  const ratelimit = await unkey.limit(identifier, {
    cost: 4,
  });
  if (!ratelimit.success) {
    return new Response("try again later", { status: 429 });
  }
  // handle the request here
}

----------------------------------------

TITLE: Next.js Layout CSS Import Example
DESCRIPTION: Shows how to import the UI package CSS styles in a Next.js application layout file.

LANGUAGE: typescript
CODE:
// In your app/layout.tsx or equivalent entry file
import "@unkey/ui/css"; // This is critical for the UI components to work properly

----------------------------------------

TITLE: Running the Bun Server
DESCRIPTION: Command to start the Bun server with the implemented rate limiting.

LANGUAGE: bash
CODE:
bun run index.ts

----------------------------------------

TITLE: DynamoDB Global Tables Architecture Options
DESCRIPTION: Two ASCII diagrams showing DynamoDB Global Tables implementation: one with direct gateway access and another with a dedicated cache layer.

LANGUAGE: ascii
CODE:
┌─────────────────────┐     ┌──────────────────┐
│ Gateway (US)        │     │  DynamoDB        │
│ ┌───────────────┐   │────►│  (US-WEST-1)     │
│ │ Memory Cache  │   │     │                  │
│ └───────────────┘   │     └──────────────────┘
└─────────────────────┘            ▲
                                   │
                                   │ Replication
                                   │
┌─────────────────────┐            ▼
│ Gateway (EU)        │     ┌──────────────────┐
│ ┌───────────────┐   │────►│  DynamoDB        │
│ │ Memory Cache  │   │     │  (EU-WEST-1)     │
│ └───────────────┘   │     │                  │
└─────────────────────┘     └──────────────────┘

----------------------------------------

TITLE: Defining Table Relations in Drizzle ORM
DESCRIPTION: Shows how to establish one-to-many and many-to-one relationships between tables using the relations utility.

LANGUAGE: typescript
CODE:
import { relations } from 'drizzle-orm';

export const usersRelations = relations(users, ({ many }) => ({
  posts: many(posts),
}));

export const postsRelations = relations(posts, ({ one }) => ({
  author: one(users, {
    fields: [posts.authorId],
    references: [users.id],
  }),
}));

----------------------------------------

TITLE: Disabling Unkey Telemetry
DESCRIPTION: Code snippet showing how to disable anonymous telemetry data collection when using the Unkey helper.

LANGUAGE: typescript
CODE:
const unkey = useUnkey({ disableTelemetry: true })

----------------------------------------

TITLE: Package Installation Commands
DESCRIPTION: Commands for installing @unkey/cache using different package managers.

LANGUAGE: bash
CODE:
npm install @unkey/cache
# or
pnpm add @unkey/cache
# or
yarn add @unkey/cache
# or
bun install @unkey/cache

----------------------------------------

TITLE: Run Bun Server
DESCRIPTION: Command to start the Bun server

LANGUAGE: bash
CODE:
bun run index.ts

----------------------------------------

TITLE: Creating Checkly Advanced Project with npm
DESCRIPTION: Command to create a new Checkly advanced project using npm. This sets up the initial project structure with pre-configured templates and examples.

LANGUAGE: bash
CODE:
npm create checkly -- --template advanced-project

----------------------------------------

TITLE: Triggering a Task from Backend Code in Trigger.dev SDK v3
DESCRIPTION: This snippet shows how to trigger a previously defined task from backend code using Trigger.dev SDK v3. It demonstrates importing the task and triggering it with a payload.

LANGUAGE: typescript
CODE:
import { helloWorldTask } from "./trigger/hello-world";

async function triggerHelloWorld() {
  const handle = await helloWorld.trigger({ message: "Hello world!" });
  console.log("Task is running with handle", handle.id);
}

----------------------------------------

TITLE: Installing Unkey Package
DESCRIPTION: Command to install the Unkey API package for authentication.

LANGUAGE: bash
CODE:
npm install @unkey/api

----------------------------------------

TITLE: Listing Overrides by Namespace ID
DESCRIPTION: Example of retrieving rate limiting overrides using the namespace ID parameter. Returns an array of override configurations for the specified namespace ID.

LANGUAGE: typescript
CODE:
const overrides = await unkey.listOverrides({  
    nameSpaceId:"rlns_12345",  
});

----------------------------------------

TITLE: Testing Rate Limiting with cURL
DESCRIPTION: Command to test the implemented rate limiting using cURL.

LANGUAGE: bash
CODE:
curl -XPOST 'http://localhost:8787/'

----------------------------------------

TITLE: Initializing API credentials for Unkey in TypeScript
DESCRIPTION: Set up the API ID and root key required for making requests to the Unkey API. The root key needs specific permissions for identity and key management.

LANGUAGE: typescript
CODE:
const apiId = "api_XXX";
const rootKey = "unkey_XXX";

LANGUAGE: typescript
CODE:
"identity.*.create_identity"
"identity.*.read_identity"
"identity.*.update_identity"
"api.*.create_key"

----------------------------------------

TITLE: Installing Unkey SDK with pip
DESCRIPTION: Install the Unkey Python SDK using pip package manager

LANGUAGE: bash
CODE:
pip install unkey.py

----------------------------------------

TITLE: Updating Key Configuration with Unkey Elixir SDK
DESCRIPTION: This snippet demonstrates how to use the update_key function from the UnkeyElixirSdk to modify a key's configuration. It includes error handling and shows how to update various properties such as name, rate limit, and remaining uses.

LANGUAGE: elixir
CODE:
try do
  :ok = UnkeyElixirSdk.update_key("key_cm9vdCBvZiBnb29kXa", %{
           "name" => "my_new_key",
           "ratelimit" => %{
           "type" => "fast",
           "limit" => 15,
           "refillRate" => 2,
           "refillInterval" => 500
           },
           "remaining" => 3
       })

catch
   err ->
     Logger.error(err)
 end

----------------------------------------

TITLE: Implementing API Key Verification Controller in Java
DESCRIPTION: REST controller implementation that handles API key verification requests using Unkey SDK. Creates an endpoint at /verify that processes KeyVerifyRequest objects and returns KeyVerifyResponse.

LANGUAGE: java
CODE:
package com.example.myapp;

import com.unkey.unkeysdk.dto.KeyVerifyRequest;
import com.unkey.unkeysdk.dto.KeyVerifyResponse;

@RestController
public class APIController {

    private static IKeyService keyService = new KeyService();

    @PostMapping("/verify")
    public KeyVerifyResponse verifyKey(
            @RequestBody KeyVerifyRequest keyVerifyRequest) {
        // Delegate the creation of the key to the KeyService from the SDK
        return keyService.verifyKey(keyVerifyRequest);
    }
}

----------------------------------------

TITLE: Adding License Information to Icon Files in TypeScript
DESCRIPTION: This code block shows the required license information to be added at the beginning of each icon file when adding new icons to the Unkey system.

LANGUAGE: tsx
CODE:
/**
* Copyright © Nucleo
* Version 1.3, January 3, 2024
* Nucleo Icons
* https://nucleoapp.com/
* - Redistribution of icons is prohibited.
* - Icons are restricted for use only within the product they are bundled with.
*
* For more details:
* https://nucleoapp.com/license
*/

----------------------------------------

TITLE: Filtering by Tags with Unkey Analytics API
DESCRIPTION: This example demonstrates how to filter verifications by a specific tag. It returns a sum of all verifications in the selected time period where the specified tag was used. Multiple tags can be provided for an OR operation.

LANGUAGE: bash
CODE:
curl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&tag=myTag&apiId=api_123' \
 -H 'Authorization: Bearer unkey_XXX'

LANGUAGE: json
CODE:
[
  {
    "valid": 5,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 5
  }
]

----------------------------------------

TITLE: Running Unkey API Server
DESCRIPTION: Start the Unkey API server with database configuration.

LANGUAGE: bash
CODE:
unkey api --database-primary="mysql://unkey:password@tcp(localhost:3306)/unkey?parseTime=true"

----------------------------------------

TITLE: Function Specification for update_key in Unkey Elixir SDK
DESCRIPTION: This snippet shows the function specification for the update_key function in the Unkey Elixir SDK. It takes a binary key ID and a map of configuration options, and returns an :ok atom on success.

LANGUAGE: elixir
CODE:
@spec update_key(binary(), map()) :: :ok

----------------------------------------

TITLE: Building and Running ClickHouse Proxy in Go
DESCRIPTION: Commands to build and run the ClickHouse proxy service from source code. The service can be compiled into a binary and executed directly.

LANGUAGE: bash
CODE:
cd /apps/chproxy
go build -o chproxy .
./chproxy

----------------------------------------

TITLE: Testing API Liveness
DESCRIPTION: Verify the API server is running by checking the liveness endpoint.

LANGUAGE: bash
CODE:
$ curl http://localhost:7070/v2/liveness
{"message":"we're cooking"}%

----------------------------------------

TITLE: Getting API Details with Unkey Python SDK
DESCRIPTION: Example of retrieving API details using the Unkey Python SDK. Requires bearer authentication token and API ID.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.apis.get(api_id="api_1234")

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Delete Key Response Example
DESCRIPTION: Example of successful response from the delete_key operation, which returns an :ok atom.

LANGUAGE: elixir
CODE:
:ok

----------------------------------------

TITLE: Cloning Unkey Repository
DESCRIPTION: Clone the Unkey repository and navigate to the Go directory.

LANGUAGE: bash
CODE:
git clone git@github.com:unkeyed/unkey.git
cd unkey/go

----------------------------------------

TITLE: Retrieving Decrypted API Key using cURL in Shell
DESCRIPTION: This snippet demonstrates how to use cURL to make a GET request to the Unkey API for retrieving a decrypted API key. It includes the necessary headers and query parameters for key decryption.

LANGUAGE: shell
CODE:
curl --request GET \
  --url https://api.unkey.dev/v1/keys.getKey?keyId={KEY_ID}&decrypt=true \
  --header 'Authorization: Bearer {ROOT_KEY}'

{
  "ownerId": "ACME",
  "plaintext": "your-key-here",
  // ...
}

----------------------------------------

TITLE: Retrieving an Identity with Unkey Python SDK
DESCRIPTION: This snippet shows how to retrieve an identity using either the identity_id or external_id with the Unkey Python SDK.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.identities.get(identity_id="id_1234", external_id="id_1234")

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Testing Unkey Authentication with cURL
DESCRIPTION: cURL command to test the protected route with an API key for authentication.

LANGUAGE: bash
CODE:
curl -XPOST 'http://localhost:3000/protected' \
  -H "Authorization: Bearer <KEY>"

----------------------------------------

TITLE: Testing Unkey Authentication with cURL
DESCRIPTION: cURL command to test the protected route with an API key for authentication.

LANGUAGE: bash
CODE:
curl -XPOST 'http://localhost:3000/protected' \
  -H "Authorization: Bearer <KEY>"

----------------------------------------

TITLE: Implementing Cache-enabled Product Service in Java
DESCRIPTION: Example of using Spring's @Cacheable annotation to implement caching for a product service. The annotation automatically handles caching of method results based on the input parameters.

LANGUAGE: java
CODE:
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

@Service
public class ProductService {
    @Cacheable("products")
    public Product getProductById(String id) {
        // Code to fetch product from database
    }
}

----------------------------------------

TITLE: Configuring Unkey Ratelimiter for OTP Sending in TypeScript
DESCRIPTION: Configuration of the Unkey ratelimiter for the OTP sending endpoint. It sets up a namespace and limits requests to two per minute.

LANGUAGE: typescript
CODE:
import { Ratelimit } from "@unkey/ratelimit";
import { headers } from "next/headers";

const unkey = new Ratelimit({
  rootKey: process.env.UNKEY_ROOT_KEY,
  namespace: "otp-send",
  limit: 2,
  duration: "60s",
})

export async function sendOTP(formData: FormData) {
  // sending OTP logic

----------------------------------------

TITLE: Configuring Package.json Scripts
DESCRIPTION: Script configuration for running and building the TypeScript Express application.

LANGUAGE: json
CODE:
"scripts": {
    "start": "ts-node ./index.ts",
    "build": "tsc",
    "serve": "node dist/index.js"
  }

----------------------------------------

TITLE: Creating New API with Unkey Python SDK
DESCRIPTION: Example of creating a new API using the Unkey Python SDK. Requires bearer authentication token and API name.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.apis.create(request={
    "name": "my-api",
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Implementing SSO using OpenID Connect in JavaScript
DESCRIPTION: This example shows how to implement SSO using OpenID Connect in a JavaScript application. It sets up a client with the OpenID Connect provider (Google) and generates an authorization URL to initiate the login process.

LANGUAGE: javascript
CODE:
const { Issuer } = require('openid-client');

async function ssoLogin() {
  const googleIssuer = await Issuer.discover('https://accounts.google.com');
  const client = new googleIssuer.Client({
    client_id: 'YOUR_CLIENT_ID',
    client_secret: 'YOUR_CLIENT_SECRET',
    redirect_uris: ['http://localhost/callback'],
    response_types: ['code'],
  });

  const authorizationUrl = client.authorizationUrl({
    scope: 'openid email profile',
  });

  console.log('Visit this URL to log in:', authorizationUrl);
}

ssoLogin();

----------------------------------------

TITLE: Unkey ID Generation System
DESCRIPTION: Complete implementation of Unkey's ID generation system with typed prefixes.

LANGUAGE: typescript
CODE:
import { customAlphabet } from "nanoid";
export const nanoid = customAlphabet(
  "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
);

const prefixes = {
  key: "key",
  api: "api",
  policy: "pol",
  request: "req",
  workspace: "ws",
  keyAuth: "key_auth",
  vercelBinding: "vb",
  test: "test",
} as const;

export function newId(prefix: keyof typeof prefixes): string {
  return [prefixes[prefix], nanoid(16)].join("_");
}

----------------------------------------

TITLE: Setting Up Environment Variables
DESCRIPTION: Add the Unkey root key to the .env file for authentication.

LANGUAGE: bash
CODE:
UNKEY_ROOT_KEY="YOUR_KEY"

----------------------------------------

TITLE: Listing All Roles in Unkey with Python
DESCRIPTION: Example of listing all roles using the Unkey Python SDK. This operation requires bearer authentication.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.permissions.list_roles()

if res.response_bodies is not None:
    # handle response
    pass

----------------------------------------

TITLE: Querying Active Keys by Workspace in SQL
DESCRIPTION: SQL endpoint to query unique active keys for a specific workspace and time period

LANGUAGE: sql
CODE:
SELECT count(DISTINCT keyId) as keys
FROM mv__monthly_active_keys__v1
WHERE
    workspaceId = {{ String(workspaceId, required=True) }}
    AND time = makeDate({{ Int64(year) }}, {{ Int64(month) }}, 1)
GROUP BY time

----------------------------------------

TITLE: Basic UUID Generation in TypeScript
DESCRIPTION: Demonstrates the basic generation of a UUID using the crypto library.

LANGUAGE: typescript
CODE:
const id = crypto.randomUUID();
// '5727a4a4-9bba-41ae-b7fe-e69cf60bb0ab'

----------------------------------------

TITLE: Implementing Product Cache in C++
DESCRIPTION: Example of implementing a simple in-memory cache using std::unordered_map to store and retrieve product data based on ID.

LANGUAGE: cpp
CODE:
#include <unordered_map>
std::unordered_map<std::string, Product> productCache;

Product getProductById(const std::string& id) {
    if (productCache.find(id) != productCache.end()) {
        return productCache[id]; // Return cached data
    } else {
        Product product = fetchProductById(id); // Fetch from DB or API
        productCache[id] = product; // Cache it
        return product;
    }
}

----------------------------------------

TITLE: Sending OTP without Ratelimiting in TypeScript
DESCRIPTION: An insecure implementation of sending a One-Time Password (OTP) using a Next.js server action. It generates a random 6-digit code and sends it via email.

LANGUAGE: typescript
CODE:
"use server";
import { randomInt } from "crypto";

export async function sendOTP(formData: FormData) {
  try {
    const email = formData.get("email") as string | null;
    if (!email) {
      return {
        success: false,
        error: "Email was not supplied, please try again",
        statusCode: 400,
      };
    }
    const otp = randomInt(100000, 999999).toString();

    const { data, error } = await emails.send({
      from: "james@unkey.com",
      to: email,
      subject: "OTP code",
      text: `Your OTP code is ${otp}`
    });
    // handled error
    if (error) {
      console.error(error);
      return { success: false, error: "Failed to send email", statusCode: 500 };
    }
    return {
      success: true,
      statusCode: 201,
    };
    //catch
  } catch (e) {
    return { success: false, error: "Failed to send email", statusCode: 500 };
  }
}

----------------------------------------

TITLE: Querying API Key Verifications with Unkey in TypeScript
DESCRIPTION: This snippet demonstrates how to use the Unkey SDK to retrieve verification data for a specific API key. It shows the request structure and how to handle both successful and error responses.

LANGUAGE: typescript
CODE:
const { result, error } = await unkey.keys.getVerifications({ keyId: "key_123" });

LANGUAGE: typescript
CODE:
const { result, error } = await unkey.keys.getVerifications({ keyId: "key_123" });

if (error){
  // error will be undefined if the request was successful
}


// result
{
  verifications: [
    {
      time: 1620000000000,
      success: 100,
      rateLimited: 0,
      usageExceeded: 0
    },
    {
      time: 1640000000000,
      success: 142,
      rateLimited: 11,
      usageExceeded: 20
    },
    // ...
  ]

}

LANGUAGE: typescript
CODE:
const { result, error } = await unkey.keys.getVerifications({ keyId: "key_123" });

if (error){
  console.log(error.message);
  // => "Key not found"
}

----------------------------------------

TITLE: Rendering OAuth Button with Last Used Indicator in React
DESCRIPTION: This React component renders an OAuth sign-in button with a loading state and conditionally displays the 'Last used' indicator based on the stored last used method.

LANGUAGE: tsx
CODE:
<OAuthButton onClick={() => oauthSignIn("oauth_google")}>
  {isLoading === "oauth_google" ? (
    <Loading className="w-6 h-6" />
    ) : (
       <Google className="w-6 h-6" />
    )}
  Google {lastUsed === "google" ? <LastUsed /> : null}
</OAuthButton>

----------------------------------------

TITLE: Verifying Key with Rate Limits using Unkey API in TypeScript
DESCRIPTION: Verify the key again, this time specifying rate limits. This example checks against the daily request limit and uses 200 tokens from the per-minute token limit.

LANGUAGE: typescript
CODE:
const verifiedWithRatelimitsResponse = await fetch(`https://api.unkey.dev/v1/keys.verifyKey`, {
    method: "POST",
    headers: {
        "Content-Type": "application/json",
    },
    body: JSON.stringify({
        apiId: apiId,
        key: key.key,
        ratelimits: [
            {
                name: "requests",
            },
            {
                name: "tokens",
                cost: 200,
            },
        ],
    }),
});

const verifiedWithRatelimits = await verifiedWithRatelimitsResponse.json<{
    valid: boolean;
    identity: {
        id: string;
        externalId: string;
        meta: unknown;
    };
}>();

----------------------------------------

TITLE: Testing Unkey Authentication
DESCRIPTION: cURL command to test the protected endpoint with an Unkey authentication token.

LANGUAGE: bash
CODE:
curl 'http://localhost:8000/secret' \
  -H 'Authorization:Bearer <YOUR_KEY>'

----------------------------------------

TITLE: Retrieving Roles in Unkey with Python
DESCRIPTION: Example of retrieving a specific role using the Unkey Python SDK. The retrieval requires the role_id and bearer authentication.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.permissions.get_role(role_id="role_123")

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start a local development server for a Next.js application using different package managers (npm, pnpm, or yarn).

LANGUAGE: bash
CODE:
npm run dev
# or
pnpm dev
# or
yarn dev

----------------------------------------

TITLE: Creating Keys with Python SDK
DESCRIPTION: Example of creating an API key using the official Unkey Python SDK with configuration options for API ID, name, roles, permissions, rate limits and more.

LANGUAGE: python
CODE:
import os
import unkey
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.keys.create(request={
    "api_id": "api_123",
    "name": "my key",
    "external_id": "team_123",
    "meta": {
        "billingTier": "PRO",
        "trialEnds": "2023-06-16T17:16:37.161Z",
    },
    "roles": [
        "admin",
        "finance",
    ],
    "permissions": [
        "domains.create_record",
        "say_hello",
    ],
    "expires": 1623869797161,
    "remaining": 1000,
    "refill": {
        "interval": unkey.CreateKeyInterval.DAILY,
        "amount": 100,
    },
    "ratelimit": {
        "limit": 10,
        "type": unkey.CreateKeyType.FAST,
        "duration": 60000,
    },
    "enabled": False,
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Configuring Unkey Ratelimiter for OTP Verification in TypeScript
DESCRIPTION: Configuration of the Unkey ratelimiter for the OTP verification endpoint. It sets up a separate namespace with more restrictive limits compared to the sending endpoint.

LANGUAGE: typescript
CODE:
const unkey = new Ratelimit({
  rootKey: process.env.UNKEY_ROOT_KEY!,
  namespace: "otp-verify",
  limit: 2,
  duration: "30s",
});

----------------------------------------

TITLE: Implementing Github Signature Verification
DESCRIPTION: TypeScript function to verify the authenticity of Github webhook requests using cryptographic signatures.

LANGUAGE: typescript
CODE:
const crypto = require("crypto");
const GITHUB_KEYS_URI = 'https://api.github.com/meta/public_keys/secret_scanning';

async function verifySignature(payload: string, signature: string, keyID: string): Promise<void> {
  if (!payload) {
    throw new Error('Invalid payload');
  }
  if (!signature) {
    throw new Error('Invalid signature');
  }
  if (!keyID) {
    throw new Error('Invalid keyID');
  }

  const response = await fetch(GITHUB_KEYS_URI);
  const data = await response.json();
  const keys = data.public_keys;

  if (!(keys instanceof Array) || keys.length === 0) {
    throw new Error('No public keys found');
  }

  const publicKey = keys.find((k: { key_identifier: string }) => k.key_identifier === keyID) ?? null;
  if (!publicKey) {
    throw new Error('No public key found matching key identifier');
  }

  const verifier = crypto.createVerify('SHA256').update(payload);
  if (!verifier.verify(publicKey.key, Buffer.from(signature, 'base64'))) {
    throw new Error('Signature does not match payload');
  }
}

----------------------------------------

TITLE: Configuring Unkey Client with Custom Base URL
DESCRIPTION: Example of initializing the Unkey client with a custom base URL. This allows running requests against your own instance of Unkey hosted on your infrastructure.

LANGUAGE: typescript
CODE:
const unkey = new Unkey({
  //...
  baseUrl: "https://my.domain"
})

----------------------------------------

TITLE: Adding Roles to a Key using Unkey API
DESCRIPTION: This curl command shows how to add roles to an existing key using the Unkey API. It requires the key ID and role ID.

LANGUAGE: curl
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.addRoles \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
  "keyId": "<string>",
  "roles": [
    {
      "id": "<string>"
    }
  ]
}'

----------------------------------------

TITLE: Running Unkey Local Development Setup
DESCRIPTION: Command to initialize the local development environment for Unkey. Supports options for specifying service type (dashboard, api, www) and skipping environment setup prompt.

LANGUAGE: sh
CODE:
pnpm local [options]

----------------------------------------

TITLE: Creating a Key with Unkey API in TypeScript
DESCRIPTION: Make a POST request to create a key and connect it to the previously created identity using the same external ID.

LANGUAGE: typescript
CODE:
const createKeyResponse = await fetch(`https://api.unkey.dev/v1/keys.createKey`, {
    method: "POST",
    headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${rootKey}`,
    },
    body: JSON.stringify({
        apiId: apiId,
        prefix: "acme",
        // by providing the same externalId as the identity, we connect the key to the identity
        externalId: externalId, 
    }),
});

const key = await createKeyResponse.json<{
    keyId: string;
    key: string;
}>();

----------------------------------------

TITLE: Retrieving Permissions in Unkey with Python
DESCRIPTION: Example of retrieving a specific permission using the Unkey Python SDK. The retrieval requires the permission_id and bearer authentication.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.permissions.get(permission_id="perm_123")

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Changelog Entry - Version 0.34.0
DESCRIPTION: Feature update adding requestId return functionality

LANGUAGE: markdown
CODE:
### Minor Changes\n- 8b69b15: feat: return requestId

----------------------------------------

TITLE: Adding Permissions to a Key using Unkey API
DESCRIPTION: This curl command demonstrates how to add permissions to an existing key using the Unkey API. It requires the key ID and permission ID.

LANGUAGE: curl
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.addPermissions \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
  "keyId": "<string>",
  "permissions": [
    {
      "id": "<string>"
    }
  ]
}'

----------------------------------------

TITLE: Testing Rate Limited Endpoint
DESCRIPTION: Command to test the rate-limited endpoint using curl.

LANGUAGE: bash
CODE:
curl 'http://localhost:8000/secret'

----------------------------------------

TITLE: Querying Usage in Current Billing Period with Unkey Analytics API
DESCRIPTION: This example shows how to query usage in the current billing period, grouped by day. The results can be used to display a gauge or chart showing consumption over time.

LANGUAGE: bash
CODE:
curl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&externalId=user_123&groupBy=day&apiId=api_123' \
 -H 'Authorization: Bearer unkey_XXX'

LANGUAGE: json
CODE:
[
  // ...
 {
   "time": 1736553600000,
   "valid": 98267,
   "notFound": 0,
   "forbidden": 0,
   "usageExceeded": 0,
   "rateLimited": 6816,
   "unauthorized": 0,
   "disabled": 0,
   "insufficientPermissions": 0,
   "expired": 0,
   "total": 105083
 },
 {
   "time": 1736640000000,
   "valid": 20125,
   "notFound": 0,
   "forbidden": 0,
   "usageExceeded": 0,
   "rateLimited": 2525,
   "unauthorized": 0,
   "disabled": 6261,
   "insufficientPermissions": 0,
   "expired": 0,
   "total": 28911
 }
]

----------------------------------------

TITLE: Querying Usage in Current Billing Period with Unkey Analytics API
DESCRIPTION: This example shows how to query usage in the current billing period, grouped by day. The results can be used to display a gauge or chart showing consumption over time.

LANGUAGE: bash
CODE:
curl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&externalId=user_123&groupBy=day&apiId=api_123' \
 -H 'Authorization: Bearer unkey_XXX'

LANGUAGE: json
CODE:
[
  // ...
 {
   "time": 1736553600000,
   "valid": 98267,
   "notFound": 0,
   "forbidden": 0,
   "usageExceeded": 0,
   "rateLimited": 6816,
   "unauthorized": 0,
   "disabled": 0,
   "insufficientPermissions": 0,
   "expired": 0,
   "total": 105083
 },
 {
   "time": 1736640000000,
   "valid": 20125,
   "notFound": 0,
   "forbidden": 0,
   "usageExceeded": 0,
   "rateLimited": 2525,
   "unauthorized": 0,
   "disabled": 6261,
   "insufficientPermissions": 0,
   "expired": 0,
   "total": 28911
 }
]

----------------------------------------

TITLE: Basic Cache Setup and Usage with @unkey/cache in TypeScript
DESCRIPTION: Demonstrates how to set up a basic cache with @unkey/cache, including creating a memory store, defining cache namespaces, and using the cache for setting and getting values.

LANGUAGE: typescript
CODE:
import { createCache, DefaultStatefulContext, Namespace } from "@unkey/cache";
import { MemoryStore } from "@unkey/cache/stores";

/**
 * Let's say we have two types, `User` and `Project`:
 */
type User = { id: string; email: string };
type Project = { name: string; description: string };

/**
 * Next we'll be creating a store. A store is really just a small abstraction
 * over a key-value database.
 */
const memory = new MemoryStore({ persistentMap: new Map() });

/**
 * We'll create a cache instance with our two types, `User` and `Project`, and
 * configure the cache to use the memory store. We'll also set the `fresh` and
 * `stale` times for each type.
 * The `ctx` object is provided in the request handler and allows us to do some
 * background work without blocking the request.
 */
const cache = createCache({
    user: new Namespace<User>(ctx, {
      stores: [memory],
      fresh: 60_000,
      stale: 300_000,
    }),
    project: new Namespace<Project>(ctx, {
      stores: [memory],
      fresh: 300_000,
      stale: 900_000,
    })
});

/**
 * That's it! Now we can use the cache like this:
 */
await cache.user.set("userId", { id: "userId", email: "user@email.com" });
const user = await cache.user.get("userId");
console.log(user);


/**
 * To make full use of the SWR capabilities, we can use the `swr` method, which
 * will automatically handle the cache misses and cache updates for us.
 * This will check all stores for the value, and if it's not found, it will
 * call the provided function to get the value and cache it automatically.
 */
const user = await cache.user.swr("userId", async () => {
  return await database.get(...)
});

----------------------------------------

TITLE: Embedding YouTube Videos with HTML
DESCRIPTION: HTML iframe elements for embedding two YouTube videos with privacy-enhanced mode and standard player options

LANGUAGE: html
CODE:
<div className="flex justify-left align-left my-8">
  <iframe
    width="560"
    height="315"
    src="https://www.youtube-nocookie.com/embed/31u3g2Uelfg?si=v9rDjVd89mBsoJ01"
    title="YouTube video player"
    frameBorder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
    allowFullScreen
  ></iframe>
</div>

<div className="flex justify-left align-left">
  <iframe
    width="560"
    height="315"
    src="https://www.youtube-nocookie.com/embed/il8hfqhlsxM?si=fT50_TclYXPKdVDa"
    title="YouTube video player"
    frameBorder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Input Component Import Declarations
DESCRIPTION: Import statements for the Input component variants and rendering utilities

LANGUAGE: tsx
CODE:
import { RenderComponentWithSnippet } from "@/app/components/render"
import {
  InputDefaultVariant,
  InputSuccessVariant,
  InputWarningVariant,
  InputErrorVariant,
  InputDisabledVariant,
  InputWithDefaultValue,
  InputWithPasswordToggle,
  InputWithBothIcons
} from "./input/input.variants.tsx"

----------------------------------------

TITLE: WHOAMI Response Format
DESCRIPTION: Example JSON response format from the WHOAMI endpoint showing key details including ID, name, remaining usage, and identity information.

LANGUAGE: json
CODE:
{
  "id": "key_123",
  "name": "API Key 1",
  "remaining": 1000,
  "identity": {
    "id": "id_123",
    "externalId": "ext123"
  },
  "meta": {
    "role": "admin",
    "plan": "premium"
  },
  "createdAt": 1620000000000,
  "enabled": true,
  "environment": "production"
}

----------------------------------------

TITLE: Enqueueing Keys with Unkey Python SDK
DESCRIPTION: Example of enqueueing keys for migration using the Unkey Python SDK. Demonstrates how to enqueue keys with migration ID, API ID and key configurations including name, metadata, roles, permissions and rate limiting settings.

LANGUAGE: python
CODE:
import os
import unkey
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.migrations.enqueue(request={
    "migration_id": "<id>",
    "api_id": "<id>",
    "keys": [
        {
            "name": "my key",
            "start": "unkey_32kq",
            "owner_id": "team_123",
            "meta": {
                "billingTier": "PRO",
                "trialEnds": "2023-06-16T17:16:37.161Z",
            },
            "roles": [
                "admin",
                "finance",
            ],
            "permissions": [
                "domains.create_record",
                "say_hello",
            ],
            "expires": 1623869797161,
            "remaining": 1000,
            "refill": {
                "interval": unkey.V1MigrationsEnqueueKeysInterval.DAILY,
                "amount": 100,
            },
            "ratelimit": {
                "limit": 10,
                "duration": 60000,
                "type": unkey.V1MigrationsEnqueueKeysType.FAST,
            },
            "enabled": False,
        },
    ],
})

if res.object is not None:
    # handle response
    pass

----------------------------------------

TITLE: Installing @unkey/nextjs Package
DESCRIPTION: Command to install the @unkey/nextjs package using npm.

LANGUAGE: bash
CODE:
npm install @unkey/nextjs

----------------------------------------

TITLE: Implementing Unkey Authentication Middleware with Hono in TypeScript
DESCRIPTION: This snippet demonstrates how to set up Unkey authentication middleware using the @unkey/hono package in a Hono application. It shows the basic setup for reading from the Authorization header and accessing the verification result in the request context.

LANGUAGE: typescript
CODE:
import { Hono } from "hono"
import { UnkeyContext, unkey } from "@unkey/hono";

const app = new Hono<{ Variables: { unkey: UnkeyContext } }>();

app.use("*", unkey());


app.get("/somewhere", (c) => {
  // access the unkey response here to get metadata of the key etc
  const ... = c.get("unkey")

  return c.text("yo")
})

----------------------------------------

TITLE: Creating Hono Project with Package Managers
DESCRIPTION: Commands to create a new Hono project using different package managers.

LANGUAGE: bash
CODE:
npm create hono@latest

LANGUAGE: bash
CODE:
pnpm create hono@latest

LANGUAGE: bash
CODE:
yarn create hono@latest

LANGUAGE: bash
CODE:
bun create hono@latest

----------------------------------------

TITLE: Installing @unkey/cache via npm
DESCRIPTION: Command to install the @unkey/cache package using npm.

LANGUAGE: bash
CODE:
npm install @unkey/cache

----------------------------------------

TITLE: Tiered Caching Implementation with @unkey/cache in TypeScript
DESCRIPTION: Shows how to set up tiered caching using @unkey/cache, combining an in-memory store with a Cloudflare store for improved performance and persistence.

LANGUAGE: typescript
CODE:
import { createCache, DefaultStatefulContext, Namespace } from "@unkey/cache";
import { CloudflareStore, MemoryStore } from "@unkey/cache/stores";

type User = { id: string; email: string };

const memory = new MemoryStore({ persistentMap: new Map() });
const cloudflare = new CloudflareStore({
  domain: "cache.unkey.dev",
  zoneId: process.env.CLOUDFLARE_ZONE_ID!,
  cloudflareApiKey: process.env.CLOUDFLARE_API_KEY!,
});

const cache = createCache({
  user: new Namespace<User>(ctx, {
    // memory is checked first, then cloudflare if memory misses
    stores: [memory, cloudflare],
    fresh: 60_000,
    stale: 300_000,
  })
});

await cache.user.set("userId", { id: "userId", email: "user@email.com" });
const user = await cache.user.get("userId");
console.log(user);

----------------------------------------

TITLE: Markdown Content - Unkey Update Announcement
DESCRIPTION: Markdown formatted announcement detailing API improvements and pricing structure, including features of free and pro tiers along with pricing details for additional usage.

LANGUAGE: markdown
CODE:
---
title: New Go API and introduce pricing
date: 2023-07-02
description: We introduced our new Go powered API that is faster, supports verisioning and more!
tags: ["operations", "engineering"]
---

----------------------------------------

TITLE: Configuring Global Lifecycle Functions in Trigger.dev SDK v3
DESCRIPTION: This snippet demonstrates how to configure global lifecycle functions in the trigger.config.ts file for Trigger.dev SDK v3. It shows setting up global onStart, onSuccess, and onFailure functions that apply to all tasks.

LANGUAGE: typescript
CODE:
import { defineConfig } from "@trigger.dev/sdk/v3";

export default defineConfig({
  project: "proj_1234",
  onStart: async (payload, { ctx }) => {
    console.log("Task started", ctx.task.id);
  },
  onSuccess: async (payload, output, { ctx }) => {
    console.log("Task succeeded", ctx.task.id);
  },
  onFailure: async (payload, error, { ctx }) => {
    console.log("Task failed", ctx.task.id);
  },
});

----------------------------------------

TITLE: Setting Maximum Duration for Tasks in Trigger.dev SDK v3
DESCRIPTION: This snippet shows how to set a maximum duration for a task in Trigger.dev SDK v3. It demonstrates limiting a task's execution time to 5 minutes (300 seconds).

LANGUAGE: typescript
CODE:
export const longTask = task({
  id: "long-task",
  maxDuration: 300, // 300 seconds or 5 minutes
  run: async (payload: any, { ctx }) => {
    //...
  },
});

----------------------------------------

TITLE: Implementing OpenAPI Validation Middleware in Zen
DESCRIPTION: Shows how to implement OpenAPI validation middleware in Zen using a third-party validator. This middleware validates incoming requests against the OpenAPI specification.

LANGUAGE: go
CODE:
// OpenAPI validation middleware
func WithValidation(validator *validation.Validator) Middleware {
    return func(next HandleFunc) HandleFunc {
        return func(ctx context.Context, s *Session) error {
            err, valid := validator.Validate(s.r)
            if !valid {
                err.RequestId = s.requestID
                return s.JSON(err.Status, err)
            }
            return next(ctx, s)
        }
    }
}

----------------------------------------

TITLE: Defining Query Parameter Structure in Bash
DESCRIPTION: Demonstrates the basic query parameter structure format using operator:value pairs

LANGUAGE: bash
CODE:
operator:value,operator:value (e.g., "is:200,is:404")

Example -> status=is:200,is:400
           path=startsWith:foo,endsWith:bar

----------------------------------------

TITLE: CLI Authentication Server Setup
DESCRIPTION: TypeScript implementation of a CLI authentication server that handles incoming requests and manages the authentication promise flow.

LANGUAGE: typescript
CODE:
const authPromise = new Promise<ParsedUrlQuery>((resolve, reject) => {
  server.on("request", (req, res) => {
    // Set CORS headers for all responses
    res.setHeader("Access-Control-Allow-Origin", "*");
    res.setHeader("Access-Control-Allow-Methods", "GET, OPTIONS");
    res.setHeader(
      "Access-Control-Allow-Headers",
      "Content-Type, Authorization",
    );

    if (req.method === "OPTIONS") {
      res.writeHead(200);
      res.end();
    } else if (req.method === "GET") {
      const parsedUrl = url.parse(req.url as string, true);
      const queryParams = parsedUrl.query;
      if (queryParams.cancelled) {
        res.writeHead(200);
        res.end();
        reject(new UserCancellationError("Login process cancelled by user."));
      } else {
        res.writeHead(200);
        res.end();
        resolve(queryParams);
      }
    } else {
      res.writeHead(405);
      res.end();
    }
  });
});

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. Running these commands will start a local development server at port 3000.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Creating Key Using Unkey RPC POST Method
DESCRIPTION: Example of how to create a new key using the RPC-style POST endpoint format. Requires a root key for authorization and accepts JSON payload with apiId and name parameters.

LANGUAGE: bash
CODE:
curl -XPOST "https://api.unkey.dev/v1/keys.createKey" \
  -H "Authorization: Bearer <ROOT_KEY>" \
  -H "Content-Type: application/json" \
  -d '{"apiId": "api_123", "name": "My Key"}'

----------------------------------------

TITLE: Customizing Missing API Key Response in Unkey Middleware
DESCRIPTION: Demonstrates how to customize the response when the API key is missing from the request header in the Unkey middleware.

LANGUAGE: typescript
CODE:
app.use(
  "*",
  unkey({
    getKey: (c) => {
      const key = c.req.header("x-api-key");
      if (!key) {
        return c.text("missing api key", 401);
      }
      return key;
    },
  })
);

----------------------------------------

TITLE: Process Flow Diagram in Bash
DESCRIPTION: Visual representation of the end-to-end process flow from user input to filtered results

LANGUAGE: bash
CODE:
User
  |
  | "Show me failed requests from last hour"
  v
Frontend
  |
  | {query: "show me failed requests from last hour"}
  v
tRPC Route
  |
  | {model, messages with system prompt, schema}
  v
OpenAI
  |
  | {structured JSON matching our schema}
  v
tRPC Route
  |
  | status=is:400,since:1h
  v
Frontend
  |
  | /logs?status=is:400&since=is:1h
  v
URL
  |
  | trigger fetch with new params
  v
Logs tRPC Query
  |
  | return filtered logs
  v
Frontend
  |
  | display filtered results
  v
User

----------------------------------------

TITLE: Testing Supabase Function
DESCRIPTION: cURL command to test the Supabase function endpoint

LANGUAGE: bash
CODE:
curl -i --location --request POST 'http://localhost:54321/functions/v1/' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
--header 'Content-Type: application/json' \
--data '{"name":"hello-world"}'

----------------------------------------

TITLE: Filtering by Key with Unkey Analytics API
DESCRIPTION: This snippet shows how to filter verifications for a specific key or set of keys. It returns usage statistics for the specified key(s) within the given time period.

LANGUAGE: bash
CODE:
curl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&keyId=key_123&apiId=api_123' \
 -H 'Authorization: Bearer unkey_XXX'

LANGUAGE: json
CODE:
[
  {
    "valid": 14,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 10,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 24
  }
]

----------------------------------------

TITLE: Error Handling Middleware in Zen
DESCRIPTION: Shows the implementation of error handling middleware in Zen. This middleware converts domain-specific errors into appropriate HTTP responses, including status codes and error details.

LANGUAGE: go
CODE:
func WithErrorHandling(logger logging.Logger) Middleware {
    return func(next HandleFunc) HandleFunc {
        return func(ctx context.Context, s *Session) error {
            err := next(ctx, s)
            if err == nil {
                return nil
            }

            // Convert domain errors to HTTP responses
            switch fault.GetTag(err) {
            case fault.NOT_FOUND:
                return s.JSON(http.StatusNotFound, api.NotFoundError{
                    Title:     "Not Found",
                    Type:      "https://unkey.com/docs/errors/not_found",
                    Detail:    fault.UserFacingMessage(err),
                    RequestId: s.requestID,
                    Status:    http.StatusNotFound,
                    Instance:  nil,
                })
            case fault.BAD_REQUEST:
                return s.JSON(http.StatusBadRequest, api.BadRequestError{
                    Title:     "Bad Request",
                    Type:      "https://unkey.com/docs/errors/bad_request",
                    Detail:    fault.UserFacingMessage(err),
                    RequestId: s.requestID,
                    Status:    http.StatusBadRequest,
                    Instance:  nil,
                    Errors:    []api.ValidationError{...},
                })
            // Additional cases...
            }

            // Default to 500 Internal Server Error
            return s.JSON(http.StatusInternalServerError, api.InternalServerError{
                Title:     "Internal Server Error",
                Type:      "https://unkey.com/docs/errors/internal_server_error",
                Detail:    fault.UserFacingMessage(err),
                RequestId: s.requestID,
                Status:    http.StatusInternalServerError,
                Instance:  nil,
            })
        }
    }
}

----------------------------------------

TITLE: Querying Key Count for a Specific Key Space in SQL
DESCRIPTION: SQL query to count the number of keys associated with a specific key_space_id.

LANGUAGE: sql
CODE:
SELECT count(*) FROM keys WHERE key_space_id = ?

----------------------------------------

TITLE: Traditional Caching Approach in TypeScript
DESCRIPTION: Example of a typical caching implementation using a third-party cache, highlighting the verbose and error-prone nature of traditional approaches.

LANGUAGE: typescript
CODE:
const cache = new Some3rdPartyCache(...)

type User = { email: string };

let user = await cache.get("chronark") as User | undefined | null;
if (!user) {
  user = await db.query.users.findFirst({
    where: (table, { eq }) => eq(table.id, "chronark"),
  });
  await cache.set("chronark", user, Date.now() + 60_000)
}

// use user

----------------------------------------

TITLE: Configuring Task Retries in Trigger.dev SDK v3
DESCRIPTION: This snippet demonstrates how to configure retry options for a task in Trigger.dev SDK v3. It includes settings for maximum attempts, retry factor, and timeout values.

LANGUAGE: typescript
CODE:
export const taskWithRetries = task({
  id: "task-with-retries",
  retry: {
    maxAttempts: 10,
    factor: 1.8,
    minTimeoutInMs: 500,
    maxTimeoutInMs: 30_000,
    randomize: false,
  },
  run: async (payload: any, { ctx }) => {
    //...
  },
});

----------------------------------------

TITLE: Creating Identity with Rate Limits
DESCRIPTION: Example of creating an identity with specific rate limits using the Unkey API, demonstrating enterprise tier and token limits configuration.

LANGUAGE: curl
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/identities.createIdentity \
  --header 'Authorization: Bearer unkey_root_key' \
  --header 'Content-Type: application/json' \
  --data '{
  "ratelimits": [
    {
      "name": "enterprise_tier",
      "limit": 50000,
      "duration": 3600000
    },
    {
      "name": "tokens",
      "limit": 86400000,
      "duration": 10
    }
  ],
  "externalId": "acme_corp"
}'

----------------------------------------

TITLE: Handling Invalid Keys in Unkey Middleware for Hono.js
DESCRIPTION: Demonstrates how to handle invalid API keys in the Unkey middleware for Hono.js. It shows an example of using the handleInvalidKey function to customize the response for invalid keys.

LANGUAGE: typescript
CODE:
app.use(
  "*",
  unkey({
    handleInvalidKey: (c, result) => {
      return c.json({
          error: "unauthorized",
          reason: result.code,
        }, 401);
    },
  })
);

----------------------------------------

TITLE: Executing Tinybird Event Ingestion in Cloudflare Worker
DESCRIPTION: Example of how events are sent to Tinybird directly from a Cloudflare worker using the waitUntil context.

LANGUAGE: typescript
CODE:
executionContext.waitUntil(tinybird.ingestKeyVerification({ ... }))

----------------------------------------

TITLE: OpenAI Integration Configuration in TypeScript
DESCRIPTION: Configuration setup for OpenAI API with optimized parameters for reliable query parsing

LANGUAGE: typescript
CODE:
const completion = await openai.beta.chat.completions.parse({
  model: "gpt-4o-mini",
  temperature: 0.2,
  top_p: 0.1,
  frequency_penalty: 0.5,
  presence_penalty: 0.5,
  n: 1,
  messages: [
    {
      role: "system",
      content: systemPrompt,
    },
    {
      role: "user",
      content: userQuery,
    },
  ],
  response_format: zodResponseFormat(filterOutputSchema, "searchQuery"),
});

----------------------------------------

TITLE: Verifying API Key with UnkeyElixirSdk
DESCRIPTION: Example of verifying an API key using the UnkeyElixirSdk.verify_key function with error handling

LANGUAGE: elixir
CODE:
try do
     is_verified = UnkeyElixirSdk.verify_key("xyz_AS5HDkXXPot2MMoPHD8jnL", %{
      "apiId" => "api_7oKUUscTZy22jmVf9THxDA"
     })

    catch
        err ->
          Logger.error(err)
      end

----------------------------------------

TITLE: Unit Testing a Zen Route
DESCRIPTION: Demonstrates how to write a unit test for a Zen route, including setting up a test harness, creating a root key, and making a request to the route.

LANGUAGE: go
CODE:
package handler_test

import (...)

func TestRatelimitEndpoint(t *testing.T) {
    h := testutil.NewHarness(t)

    route := handler.New(handler.Services{
        DB:          h.DB,
        Keys:        h.Keys,
        Logger:      h.Logger,
        Permissions: h.Permissions,
    })

    h.Register(route)

    rootKey := h.CreateRootKey(h.Resources.UserWorkspace.ID)

    headers := http.Header{
        "Content-Type":  {"application/json"},
        "Authorization": {fmt.Sprintf("Bearer %s", rootKey)},
    }

    req := handler.Request{
        Namespace:  "test_namespace",
        Identifier: "user_123",
        Limit:      100,
        Duration:   60000,
    }

    res := testutil.CallRoute[handler.Request, handler.Response](h, route, headers, req)
    require.Equal(t, 200, res.Status)
    require.NotNil(t, res.Body)
    require.True(t, res.Body.Success)
    require.Equal(t, int64(100), res.Body.Limit)
    require.Equal(t, int64(99), res.Body.Remaining)
}

----------------------------------------

TITLE: Cloudflare Workflows Setup Terminal Output
DESCRIPTION: Example terminal output showing the interactive setup process when creating a new Cloudflare Workflows project, including directory selection, template cloning, dependency installation, and deployment options.

LANGUAGE: sh
CODE:
╭ Create an application with Cloudflare Step 1 of 3
│
├ In which directory do you want to create your application?
│ dir ./workflows-tutorial
│
├ What would you like to start with?
│ category Template from a GitHub repo
│
├ What's the url of git repo containing the template you'd like to use?
│ repository cloudflare/workflows-starter
│
├ Cloning template from: cloudflare/workflows-starter
│
├ template cloned and validated
│
├ Copying template files
│ files copied to project directory
│
├ Installing dependencies
│ installed via `npm install`
│
╰ Application created

╭ Configuring your application for Cloudflare Step 2 of 3
│
├ Installing @cloudflare/workers-types
│ installed via npm
│
├ Adding latest types to `tsconfig.json`
│ added @cloudflare/workers-types/2023-07-01
│
├ Do you want to use git for version control?
│ yes git
│
├ Initializing git repo
│ initialized git
│
├ Committing new files
│ git commit
│
╰ Application configured

╭ Deploy with Cloudflare Step 3 of 3
│
├ Do you want to deploy your application?
│ no deploy via `npm run deploy`
│
╰ Done

────────────────────────────────────────────────────────────
🎉  SUCCESS  Application created successfully!

----------------------------------------

TITLE: API Key Verification Response Format
DESCRIPTION: JSON response structure showing the key validation status and remaining usage count.

LANGUAGE: json
CODE:
{
  "valid": true,
  "remaining": 99
}

----------------------------------------

TITLE: Disabling Telemetry in Unkey Middleware for Hono.js
DESCRIPTION: Shows how to disable anonymous telemetry data collection in the Unkey middleware for Hono.js applications by setting the disableTelemetry flag.

LANGUAGE: typescript
CODE:
app.use(
  "*",
  unkey({ disableTelemetry: true })
)

----------------------------------------

TITLE: Executing Artillery Load Test for Unkey with Environment Variables
DESCRIPTION: This bash snippet sets up necessary environment variables and runs the main TypeScript script for Artillery load testing. It requires the Fly CLI API key, Artillery Cloud API key, and an Unkey key to be set before execution.

LANGUAGE: bash
CODE:
FLY_API_KEY=
ARTILLERY_CLOUD_API_KEY=
UNKEY_KEY=
bun run main.ts

----------------------------------------

TITLE: Updating OAuth Sign-In Function with Last Used Tracking
DESCRIPTION: This updated version of the OAuth sign-in function incorporates the useLastUsed hook to track and store the last used sign-in method in local storage.

LANGUAGE: tsx
CODE:
const [lastUsed, setLastUsed] = useLastUsed();

const oauthSignIn = async (provider: OAuthStrategy) => {
    if (!signInLoaded) {
      return null;
    }
    try {
      setIsLoading(provider);
      await signIn.authenticateWithRedirect({
        strategy: provider,
        redirectUrl: "/auth/sso-callback",
        redirectUrlComplete: "/apis",
      });
      setLastUsed(provider === "oauth_google" ? "google" : "github");
    } catch (err) {
      console.error(err);
      setIsLoading(null);
      toast.error((err as Error).message);
    }
  };

----------------------------------------

TITLE: Adding Resource Audit Logging to Ratelimiting in TypeScript
DESCRIPTION: This code demonstrates how to add resource details to a ratelimit request for audit logging purposes, creating a paper trail for specific resources.

LANGUAGE: typescript
CODE:
async function handler(request: NextApiRequest) {
  const identifier = request.getUserId();

  const ratelimit = await unkey.limit(identifier, {
    resources: [
      {
        id: "id_123",
        name: "unkey",
        type: "ai.generate",
      },
    ],
  });
  if (!ratelimit.success) {
    return new Response("try again later", { status: 429 });
  }
  // handle the request here
}

----------------------------------------

TITLE: Configuring Retry Behavior
DESCRIPTION: Demonstrates how to configure retry attempts and backoff strategy for network errors

LANGUAGE: typescript
CODE:
const unkey = new Unkey({
  rootKey: "<UNKEY_ROOT_KEY>",
  retry: {
    attempts: 3,
    backoff: (retryCount) => retryCount * 1000,
  },
});

----------------------------------------

TITLE: Configuring Rate Limits in Unkey JSON Configuration
DESCRIPTION: Example configuration showing how to specify rate limits for API keys. The configuration requires at least a name property in the ratelimits array. This is essential for implementing rate limiting during key verification.

LANGUAGE: json
CODE:
{
  "ratelimits": [
    {
      "name": "my-ratelimit"
    }
  ]
}

----------------------------------------

TITLE: Tiered Cache Configuration
DESCRIPTION: Shows how to set up a tiered cache system using both memory and Cloudflare stores.

LANGUAGE: typescript
CODE:
import { createCache, DefaultStatefulContext, Namespace } from "@unkey/cache";
import { CloudflareStore, MemoryStore } from "@unkey/cache/stores";

const ctx = new DefaultStatefulContext();

type User = {
  id: string;
  email: string;
};

const memory = new MemoryStore({ persistentMap: new Map() });

const cloudflare = new CloudflareStore({
  domain: "cache.unkey.dev",
  zoneId: env.CLOUDFLARE_ZONE_ID!,
  cloudflareApiKey: env.CLOUDFLARE_API_KEY!,
});

const cache = createCache({
  user: new Namespace<User>(ctx, {
    stores: [memory, cloudflare],
    fresh: 60_000,
    stale: 300_000,
  })
});

----------------------------------------

TITLE: Installing Unkey API Client
DESCRIPTION: Command to install the @unkey/api package using npm

LANGUAGE: bash
CODE:
npm install @unkey/api

----------------------------------------

TITLE: Retrieving API Information
DESCRIPTION: Example demonstrating how to fetch API information

LANGUAGE: rust
CODE:
use unkey::models::GetApiRequest;
use unkey::Client;

async fn get_api() {
    let c = Client::new("unkey_ABC");
    let req = GetApiRequest::new("api_123");

    match c.get_api(req).await {
        Ok(res) => println!("{res:?}"),
        Err(err) => eprintln!("{err:?}"),
    }
}

----------------------------------------

TITLE: Error Classification with Tags in Go
DESCRIPTION: Shows how to implement error classification using Fault's tag system. This allows for consistent error handling patterns and easier error type checking through switch statements.

LANGUAGE: go
CODE:
var DATABASE_ERROR = fault.Tag("DATABASE_ERROR")

err := fault.New("connection failed",
    fault.WithTag(DATABASE_ERROR),
)

switch fault.GetTag(err) {
	case DATABASE_ERROR:
		// handle
	default:
		// handle
}

----------------------------------------

TITLE: Setting Queue Options for Task Concurrency in Trigger.dev SDK v3
DESCRIPTION: This snippet shows how to set queue options for controlling task concurrency in Trigger.dev SDK v3. It demonstrates limiting concurrency to one task at a time.

LANGUAGE: typescript
CODE:
export const oneAtATime = task({
  id: "one-at-a-time",
  queue: {
    concurrencyLimit: 1,
  },
  run: async (payload: any, { ctx }) => {
    //...
  },
});

----------------------------------------

TITLE: API Logs Population Script in Bash
DESCRIPTION: A comprehensive bash script that generates test data for the /logs endpoint. Features color-coded output, various types of API calls (successful, errors, warnings), and simulated rate limiting behavior. Includes progress tracking and configurable limits.

LANGUAGE: bash
CODE:
#!/bin/bash

# Check if terminal supports colors
if [ -t 1 ] && command -v tput >/dev/null 2>&1 && [ "$(tput colors)" -ge 8 ]; then
  RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
  YELLOW=$(tput setaf 3)
  BLUE=$(tput setaf 4)
  CYAN=$(tput setaf 6)
  GRAY=$(tput setaf 8)
  BOLD=$(tput bold)
  NC=$(tput sgr0)
else
  # No color support - use empty strings
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  CYAN=""
  GRAY=""
  BOLD=""
  NC=""
fi

# [rest of the script...]

----------------------------------------

TITLE: Creating Hono Project - Package Manager Commands
DESCRIPTION: Commands to create a new Hono project using different package managers (npm, pnpm, yarn, bun).

LANGUAGE: bash
CODE:
npm create hono@latest

LANGUAGE: bash
CODE:
pnpm create hono@latest

LANGUAGE: bash
CODE:
yarn create hono@latest

LANGUAGE: bash
CODE:
bun create hono@latest

----------------------------------------

TITLE: Defining Command Types in TypeScript
DESCRIPTION: This code snippet demonstrates how to define output types for commands using TypeScript, which can be used to specify the expected structure of command outputs.

LANGUAGE: typescript
CODE:
type LinkedAccount = {
    id: string,
    bank_details: {
        name: string,
        type: string,
    },
    brex_account_id: string,
    last_four: string,
    available_balance: {
        amount: number,
        as_of_date: Date,
    },
    current_balance: {
            amount: number,
        as_of_date: Date,
    },
}

type Expense = {
  id: string,
  memo: string,
  amount: number,
}

type Budget = {
  id: string,
  name: string,
  description: string,
  limit: {
    amount: number,
    currency: string,
  }
}

----------------------------------------

TITLE: Querying Daily Usage per Key in Last Month with Unkey Analytics API
DESCRIPTION: This example shows how to query daily usage per key for a specific user over the last month. It groups results by key and day, returning one element per active key per day, including the keyId.

LANGUAGE: bash
CODE:
curl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&externalId=user_123&groupBy=key&groupBy=day&apiId=api_123' \
 -H 'Authorization: Bearer unkey_XXX'

LANGUAGE: json
CODE:
[
  // ...
  {
    "time": 1736726400000,
    "valid": 13,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 0,
    "rateLimited": 10,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 23,
    "keyId": "key_2zeYsLbpULnEUsvYeFGMeJzACp4j"
  },
  {
    "time": 1736726400000,
    "valid": 5,
    "notFound": 0,
    "forbidden": 0,
    "usageExceeded": 6,
    "rateLimited": 0,
    "unauthorized": 0,
    "disabled": 0,
    "insufficientPermissions": 0,
    "expired": 0,
    "total": 11,
    "keyId": "key_2zeViCGkJpu5zQ8G12jcBoXWy4KH"
  }
]

----------------------------------------

TITLE: Complete Error Handling Example in Go
DESCRIPTION: A practical example showing how to integrate Fault into a typical Go function, combining error wrapping, tagging, and dual-message patterns in a real-world scenario.

LANGUAGE: go
CODE:
func ProcessOrder(id string) error {
    order, err := db.FindOrder(id)
    if err != nil {
        return fault.Wrap(err,
            fault.WithTag(DATABASE_ERROR),
            fault.WithDesc(
                fmt.Sprintf("failed to find order %s", id),
                "Order not found",
            ),
        )
    }

    // ... process order ...
}

----------------------------------------

TITLE: Defining Column Types in Drizzle ORM
DESCRIPTION: Shows various MySQL column type definitions available in Drizzle ORM.

LANGUAGE: typescript
CODE:
import { int, tinyint, smallint, mediumint, bigint } from 'drizzle-orm/mysql-core';

const table = mysqlTable('table', {
  tinyIntColumn: tinyint('tiny_int_column'),
  smallIntColumn: smallint('small_int_column'),
  mediumIntColumn: mediumint('medium_int_column'),
  intColumn: int('int_column'),
  bigIntColumn: bigint('big_int_column'),
});

----------------------------------------

TITLE: Defining ListKeysRequest DTO for Unkey SDK in Java
DESCRIPTION: This snippet defines the ListKeysRequest DTO used for requesting a list of API keys. It includes fields for apiId, limit, offset, and ownerId.

LANGUAGE: java
CODE:
public class ListKeysRequest {
    private String apiId;
    private Integer limit;
    private Integer offset;
    private String ownerId;
}

----------------------------------------

TITLE: Installing Unkey Hono Package - Package Manager Commands
DESCRIPTION: Commands to install the @unkey/hono package using different package managers.

LANGUAGE: bash
CODE:
npm install @unkey/hono

LANGUAGE: bash
CODE:
pnpm add @unkey/hono

LANGUAGE: bash
CODE:
yarn add @unkey/hono

LANGUAGE: bash
CODE:
bun install @unkey/hono

----------------------------------------

TITLE: Defining Types from Zod Schemas
DESCRIPTION: Shows how to infer TypeScript types from Zod schemas generated from Drizzle tables.

LANGUAGE: typescript
CODE:
export type InsertTableName = z.infer<typeof insertTableNameSchema>;
export type SelectTableName = z.infer<typeof selectTableNameSchema>;

----------------------------------------

TITLE: Running Vitest for Unit and Integration Tests
DESCRIPTION: This snippet shows how to install dependencies and run tests using pnpm and Vitest for the Unkey project.

LANGUAGE: bash
CODE:
pnpm install
pnpm test

----------------------------------------

TITLE: Verifying a Key in Unkey
DESCRIPTION: This snippet shows how to verify a newly created key using the Unkey API. It sends a POST request to check the key's validity and remaining verifications.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.verifyKey \
  --header 'Content-Type: application/json' \
  --data '{
		"key": "<NEW_KEY>"
	}'

----------------------------------------

TITLE: Defining MySQL Table Structure with Drizzle ORM
DESCRIPTION: Demonstrates how to create a basic table definition using mysqlTable with various column types and constraints.

LANGUAGE: typescript
CODE:
import { mysqlTable, varchar, text, timestamp, int } from 'drizzle-orm/mysql-core';

export const tableName = mysqlTable('table_name', {
  id: varchar('id', { length: 255 }).primaryKey(),
  name: varchar('name', { length: 255 }).notNull(),
  description: text('description'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().$onUpdate(() => new Date()),
});

----------------------------------------

TITLE: Creating Usage-Limited API Key with Unkey
DESCRIPTION: Creates a new API key with a specified usage limit of 100 requests. Requires authentication with Unkey bearer token and API ID.

LANGUAGE: bash
CODE:
curl --request POST \
--url https://api.unkey.dev/v1/keys.createKey \
--header 'Authorization: Bearer <UNKEY>' \
--header 'Content-Type: application/json' \
--data '{
"apiId":"<API_ID>",
"remaining": 100
}'

----------------------------------------

TITLE: Implementing Unkey Authentication in Hono
DESCRIPTION: TypeScript code showing how to set up Unkey authentication middleware in a Hono application. Includes type definitions and basic route setup.

LANGUAGE: typescript
CODE:
import { Hono } from "hono";
import { unkey, UnkeyContext } from "@unkey/hono";

const app = new Hono<{ Variables: { unkey: UnkeyContext } }>();

app.use("*", unkey());

app.get("/", (c) => {
	return c.text("Hello Hono!");
});

export default app;

----------------------------------------

TITLE: Direct S3 + In-Memory Cache Architecture Diagram
DESCRIPTION: ASCII diagram showing the architecture of a gateway with memory cache connecting to S3 storage.

LANGUAGE: ascii
CODE:
┌─────────────────────┐     ┌─────────┐
│ Gateway             │     │         │
│ ┌───────────────┐   │────►│   S3    │
│ │ Memory Cache  │   │     │         │
│ └───────────────┘   │     │         │
└─────────────────────┘     └─────────┘

----------------------------------------

TITLE: Creating Refillable API Key with Daily Limit in Unkey
DESCRIPTION: Example of creating an API key with daily refill functionality using Unkey's API. The key is configured to refill 100 uses daily at midnight UTC.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.createKey \
  --header 'Authorization: Bearer <UNKEY>' \
  --header 'Content-Type: application/json' \
  --data '{
  "apiId":"<API_ID>",
  "remaining": 100,
  "refill": {
      "interval": "daily",
      "amount": 100
  }
}'

----------------------------------------

TITLE: Verifying API Keys with Unkey using cURL
DESCRIPTION: This snippet shows how to use cURL to verify an API key by making a POST request to the Unkey API. It includes the necessary headers and JSON payload for the request.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.verifyKey \
  --header 'Content-Type: application/json' \
  --data '{
    "apiId": "api_1234",
    "key": "sk_1234"
  }'

----------------------------------------

TITLE: Defining Secret Pattern for Github Scanning
DESCRIPTION: JSON configuration defining the pattern for Unkey root keys that Github will scan for in public repositories.

LANGUAGE: json
CODE:
{
	"name" : "Unkey",
	"regex": "^unkey_[a-zA-Z0-9]+$",
	"webhook_endpoint": "https://secrets.unkey.dev/api/v1/github_secrets"
}

----------------------------------------

TITLE: Size Variants Implementation
DESCRIPTION: Examples of different button sizes from small to extra large.

LANGUAGE: jsx
CODE:
<Button size="sm">Small</Button>
<Button size="md">Medium</Button>
<Button size="lg">Large</Button>
<Button size="xlg">Extra Large</Button>
<Button size="2xlg">2X Large</Button>

----------------------------------------

TITLE: User Upgrade Endpoint Implementation
DESCRIPTION: Express endpoint that handles user plan upgrades by updating API key rate limits through Unkey's updateKey endpoint.

LANGUAGE: javascript
CODE:
app.post("/upgradeUser", async (req: Request, res: Response) => {
  const { transactionId, email, apiKeyId } = req.body;

  // Imaginary transactionId and email validation.
  // Let's imagine the user upgraded to a paid plan.
  // Now we have to increase the usage quota of the user.
  // We can do that by updating the key.

  const myHeaders = new Headers();
  myHeaders.append("Content-Type", "application/json");
  myHeaders.append("Authorization", `Bearer ${process.env.UNKEY_ROOT_KEY}`);

  const raw = JSON.stringify({
    keyId: apiKeyId,
    ratelimit: {
      async: true, // Fast rate limiting
      duration: 1000, // Rate limit duration
      limit: 100, // Maximum allowed requests for the user
    },
  });

  const updateKeyRequest = await fetch(
    "https://api.unkey.dev/v1/keys.updateKey",
    {
      keyId: "example_key"
      method: "PUT",
      headers: myHeaders,
      body: raw,
      redirect: "follow",
    }
  );

  if (updateKeyRequest.status !== 200)
    return res.status(400).json({ message: "Something went wrong" });

  return res.status(200).json({ message: "User upgraded successfully" });
});

----------------------------------------

TITLE: Database Schema - Workspace Configuration
DESCRIPTION: TypeScript interface defining the workspace database schema, including Stripe integration fields, tier information, and quota settings.

LANGUAGE: typescript
CODE:
workspaces {
  id: string
  tenantId: string
  stripeCustomerId: string | null
  stripeSubscriptionId: string | null
  tier: string
  subscriptions: object | null  // Legacy
  quota: {
    requestsPerMonth: number
    logsRetentionDays: number
    auditLogsRetentionDays: number
    team: boolean
  }
}

----------------------------------------

TITLE: Implementing Rate-Limited Bun HTTP Server
DESCRIPTION: Create a Bun HTTP server with rate limiting using the Unkey Ratelimit class. This code sets up a server that limits requests to 2 per 30 seconds for each unique identifier.

LANGUAGE: typescript
CODE:
import { Ratelimit } from "@unkey/ratelimit";

/**
This can be a seperate util for easy configurable ratelimiting across
multiple routes.

namespace = The route identifier you would like to ratelimit
limit = The amount of requests
duration = amount of time to limit against for example "30s"

**/
const limiter = new Ratelimit({
  namespace: "bun-example",
  limit: 2,
  duration: "30s",
  rootKey: process.env.UNKEY_ROOT_KEY
})

const server = Bun.serve({
  async fetch(req) {
    const identifier = req.getUserId() // or ip or anything else you want

    const ratelimit = await limiter.limit(identifier)
    if (!ratelimit.success){
      return Response("try again later", { status: 429 })
    }
    return return new Response("Success", { status: 200 });
  },
  port: 8000,
});
console.log(`Listening on ${server.url}`);

----------------------------------------

TITLE: Defining ListKeysResponse DTO for Unkey SDK in Java
DESCRIPTION: This snippet defines the ListKeysResponse DTO used for the response when listing API keys. It includes a list of KeyAttributes and a total count.

LANGUAGE: java
CODE:
public class ListKeysResponse {
    private List<KeyAttributes> keys;
    private Integer total;
}

----------------------------------------

TITLE: Tracking Key Usage Over Time with ClickHouse in TypeScript
DESCRIPTION: This snippet shows how to track key usage over time using the ClickHouse client. It queries the daily usage statistics for a specific workspace and keyspace within a given time range.

LANGUAGE: typescript
CODE:
const dailyUsage = await ch.verifications.timeseries.perDay({
  workspaceId: "ws_123",
  keyspaceId: "ks_123",
  startTime: startOfMonth.getTime(),
  endTime: endOfMonth.getTime()
});

// dailyUsage will contain points with total verifications and valid verifications
// [{x: timestamp, y: {total: 100, valid: 95}}, ...]

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers. The server can be started using npm, yarn, pnpm, or bun.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Unkey API Key Generation Endpoint
DESCRIPTION: Next.js API route implementation for generating new API keys using the Unkey service during the CLI authentication process.

LANGUAGE: typescript
CODE:
export async function POST(request: Request) {
  const { id, redirect, code } = await request.json();
  if (!process.env.UNKEY_ROOT_KEY || !process.env.UNKEY_API_ID) {
    return NextResponse.json({
      statusCode: 500,
      message: "Unkey root key and API ID must be provided.",
    });
  }
  const unkey = new Unkey({ rootKey: process.env.UNKEY_ROOT_KEY });

  const { result, error } = await unkey.keys.create({
    apiId: process.env.UNKEY_API_ID,
    prefix: "cli_demo",
    ownerId: id,
  });

  if (error) {
    return NextResponse.json({
      statusCode: 500,
      message: "Error creating key – please ensure apiId is valid.",
    });
  }

  return NextResponse.json({ ...result, code, redirect });
}

----------------------------------------

TITLE: Creating Supabase Function
DESCRIPTION: Command to create a new Supabase function named hello-world

LANGUAGE: bash
CODE:
supabase functions new hello-world

----------------------------------------

TITLE: Cloning Unkey Repository in Bash
DESCRIPTION: Command to clone the Unkey project repository from GitHub.

LANGUAGE: bash
CODE:
git clone https://github.com/unkeyed/unkey

----------------------------------------

TITLE: Using Rate Limited Procedure
DESCRIPTION: TypeScript code showing how to apply the rate-limited procedure to a tRPC route with specific limits

LANGUAGE: typescript
CODE:
 create: rateLimitedProcedure({ limit: 3, duration: 5 })
    .input(
      z.object({
        projectName: z.string().min(3),
        projectDescription: z.string(),
        category: z.string(),
        projectImage: z.string().optional(),
      }),
    )

----------------------------------------

TITLE: Installing Unkey Rate Limit Package
DESCRIPTION: Command to install the @unkey/ratelimit package using npm.

LANGUAGE: bash
CODE:
npm install @unkey/ratelimit

----------------------------------------

TITLE: Installing Goose for ClickHouse Tests
DESCRIPTION: This snippet shows how to install Goose, a database migration tool, which is required for running ClickHouse tests in the Unkey project.

LANGUAGE: bash
CODE:
go install github.com/pressly/goose/v4/cmd/goose@latest

----------------------------------------

TITLE: Installing CLI Demo Package
DESCRIPTION: Command to install and run the Unkey CLI demo authentication package using npx.

LANGUAGE: bash
CODE:
npx @unkey/cli-demo login

----------------------------------------

TITLE: Identity Assignment in Key Creation
DESCRIPTION: JSON example showing how to assign a key to an identity during creation using identityId or externalId.

LANGUAGE: json
CODE:
{
  "identityId": "id_123",
  "externalId": "user_123"
  // ...
}

----------------------------------------

TITLE: Sample Response for Listing API Keys with Unkey
DESCRIPTION: This JSON structure represents the response format when listing API keys. It includes details such as key ID, API ID, workspace ID, creation timestamp, and rate limit settings.

LANGUAGE: json
CODE:
{
  "keys": [
    {
      "id": "key_HPnfviesBEKHnZBFFiY4fg",
      "apiId": "api_QUGih1EMtBy9eSSf3vujmF",
      "workspaceId": "ws_o17fS1LvwtRswPdncAcUM",
      "start": "key_Crg",
      "createdAt": 1687642066782,
      "expires": null,
      "ratelimit": {
        "type": "fast",
        "limit": 11,
        "refillRate": 11,
        "refillInterval": 11
      }
    },
    ...
  ],
  "total": 4
}

----------------------------------------

TITLE: Creating Key with Identity Reference
DESCRIPTION: Example of creating a key that references an existing identity using the external ID.

LANGUAGE: curl
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.createKey \
  --header 'Authorization: Bearer unkey_root_key' \
  --header 'Content-Type: application/json' \
  --data '{
  "externalId": "acme_corp",
  "apiId": "api_123",
  "byteLength": 16
}'

----------------------------------------

TITLE: Querying Verifications by Workspace in SQL
DESCRIPTION: SQL endpoint to query total verifications for a specific workspace and time period

LANGUAGE: sql
CODE:
SELECT
    countMerge(total) as total
FROM mv__monthly_verifications__v2
WHERE
    workspaceId = {{ String(workspaceId, required=True) }}
    AND time = makeDate({{ Int64(year) }}, {{ Int64(month) }}, 1)
GROUP BY time

----------------------------------------

TITLE: Configuring Ratelimit with Error Handling and Fallback
DESCRIPTION: Shows how to configure Ratelimit with timeout, fallback function, and error handling for improved reliability in production environments.

LANGUAGE: typescript
CODE:
import { Ratelimit } from "@unkey/ratelimit";

const fallback = (identifier: string) => ({
  success: true,
  limit: 0,
  reset: 0,
  remaining: 0,
});

const unkey = new Ratelimit({
  // ... standard configuration
  timeout: {
    ms: 3000, // only wait 3s at most before returning the fallback
    fallback,
  },
  onError: (err, identifier) => {
    console.error(`${identifier} - ${err.message}`);
    return fallback(identifier);
  },
});

----------------------------------------

TITLE: Creating API Key with Rate Limiting and Token System using cURL
DESCRIPTION: This cURL request creates an API key with rate limiting of 10 requests, refilling at 1 request per second, and a total of 100 allowed requests before access is revoked.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.createKey \
  --header 'Authorization: Bearer <UNKEY>' \
  --header 'Content-Type: application/json' \
  --data '{
	"apiId":"<API_ID>",
	"ratelimit":{
		"type":"fast",
		"limit":10,
		"refillRate": 1,
		"refillInterval": 1000
	},
	"remaining": 100
}'

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Commands to initialize and start Supabase services locally using the CLI

LANGUAGE: bash
CODE:
supabase init
supabase start

----------------------------------------

TITLE: Unkey API Key Creation
DESCRIPTION: Example of creating an API key with custom prefix and length using Unkey's API.

LANGUAGE: typescript
CODE:
const key = await unkey.key.create({
  apiId: "api_dzeBEZDwJ18WyD7b",
  prefix: "blog",
  byteLength: 16,
  // ... omitted for brevity
});

// Created key:
// blog_cLsvCvmY35kCfchi

----------------------------------------

TITLE: Importing CSS Styles in TypeScript
DESCRIPTION: Demonstrates how to import the required CSS styles from the @unkey/ui package into your application.

LANGUAGE: typescript
CODE:
import "@unkey/ui/css";

----------------------------------------

TITLE: Configuring LLM Token Usage Limits
DESCRIPTION: Configuration example for limiting both request frequency and token usage across different LLM models.

LANGUAGE: typescript
CODE:
{
  ratelimits: [
    // baseline ratelimit of 100 requests per second
    {
      name: "requests::api",
      limit: 100,
      duration: 1000,
    },

    // llama-v3p1-405b-instruct
    {
      // Limit the number of requests to 100 per minute
      name: "requests::llama-v3p1-405b-instruct",
      limit: 100,
      duration: 60000,
    },
    {
      // Limit the number of tokens consumed to 100k per hour
      name: "tokens::llama-v3p1-405b-instruct",
      limit: 100000,
      duration: 60000,
    },

    // mixtral-8x22b-instruct
    // Assuming this one is cheaper, we can set higher limits
    {
      // Limit the number of requests to 1000 per minute
      name: "requests::mixtral-8x22b-instruct",
      limit: 1000,
      duration: 60000,
    },
    {
      // Limit the number of tokens consumed to 20mil per hour
      name: "tokens::mixtral-8x22b-instruct",
      limit: 20_000_000,
      duration: 60000,
    },
  },
}

----------------------------------------

TITLE: Configuring Package.json Scripts
DESCRIPTION: Script configurations for running and building the TypeScript Express application.

LANGUAGE: json
CODE:
"scripts": {
    "start": "ts-node ./index.ts",
    "build": "tsc",
    "serve": "node dist/index.js"
  }

----------------------------------------

TITLE: Base58 ID Generation with NanoID
DESCRIPTION: Shows how to generate shorter, base58-encoded IDs using the NanoID library.

LANGUAGE: typescript
CODE:
import { customAlphabet } from "nanoid";
export const nanoid = customAlphabet(
  "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
);

const id = `prefix_${nanoid(22)}`;
// prefix_KSPKGySWPqJWWWa37RqGaX

----------------------------------------

TITLE: Test API Authentication
DESCRIPTION: curl command to test the server's authentication with an Unkey API key

LANGUAGE: bash
CODE:
curl http://localhost:8000 -H "Authorization: Bearer <KEY>"

----------------------------------------

TITLE: Key Verification with Ratelimits
DESCRIPTION: cURL example demonstrating how to verify a key with specific ratelimit checks and costs.

LANGUAGE: curl
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.verifyKey \
  --header 'Content-Type: application/json' \
  --data '{
  "apiId": "api_1234",
  "key": "sk_1234",
  "ratelimits": [
    { "name": "requests::api" },
    { "name": "requests::llama-v3p1-405b-instruct" },
    { "name": "tokens::llama-v3p1-405b-instruct", "cost": 8152 }
  ]
}'

----------------------------------------

TITLE: Running TypeScript Application with Bun
DESCRIPTION: Command to execute the index.ts file using Bun runtime.

LANGUAGE: bash
CODE:
bun run index.ts

----------------------------------------

TITLE: Ratelimit Constructor and Limit Method Signatures
DESCRIPTION: API overview showing the constructor signature for creating a new Ratelimit instance and the limit method signature for checking if an identifier is within the rate limit.

LANGUAGE: typescript
CODE:
new Ratelimit(config: RatelimitConfig)

LANGUAGE: typescript
CODE:
.limit(identifier: string, opts: LimitOptions): Promise<RatelimitResponse>

----------------------------------------

TITLE: Testing Unkey Authentication
DESCRIPTION: cURL command to test the Unkey authentication implementation with a bearer token.

LANGUAGE: bash
CODE:
curl -XPOST 'http://localhost:8787/' \
  -H "Authorization: Bearer <KEY>"

----------------------------------------

TITLE: Installing usehook-ts Package for React Hooks
DESCRIPTION: This command installs the usehook-ts package, which provides a set of lightweight, type-safe React hooks for managing local storage and other functionalities.

LANGUAGE: sh
CODE:
npm install usehook-ts

----------------------------------------

TITLE: Setting Up Local Development Environment for Unkey in Bash
DESCRIPTION: Command to run the Unkey CLI for setting up the local development environment. This prompts for Clerk API keys and creates necessary .env files.

LANGUAGE: bash
CODE:
pnpm local

----------------------------------------

TITLE: UUID Generation without Hyphens
DESCRIPTION: Shows how to generate a UUID without hyphens for easier copying.

LANGUAGE: typescript
CODE:
const id = crypto.randomUUID().replace(/-/g, "");
// fe4723eab07f408384a2c0f051696083

----------------------------------------

TITLE: Installing Cloudflare Workflows Template Using NPM
DESCRIPTION: Command to create a new Cloudflare Workflows project using the starter template via npm create cloudflare@latest.

LANGUAGE: sh
CODE:
npm create cloudflare@latest workflows-starter -- --template "cloudflare/workflows-starter"

----------------------------------------

TITLE: Creating a React Component for 'Last Used' Indicator
DESCRIPTION: This React component creates a simple span element to display the 'Last used' text, which can be used to indicate the previously used sign-in method.

LANGUAGE: tsx
CODE:
export const LastUsed: React.FC = () => {
  return <span className="absolute right-4 text-xs text-content-subtle">Last used</span>;
};

----------------------------------------

TITLE: API Endpoint Definition for Identity Listing
DESCRIPTION: OpenAPI specification for the GET endpoint that lists all identities. The endpoint was introduced on July 17, 2024 and returns a paginated list of results.

LANGUAGE: markdown
CODE:
---
title: List identities
openapi: get /v1/identities.listIdentities
---

----------------------------------------

TITLE: Customizing Icon Appearance in React/JSX
DESCRIPTION: This example shows how to customize Unkey icons by applying CSS classes. It demonstrates changing icon colors and sizes using Tailwind CSS classes.

LANGUAGE: jsx
CODE:
<Row>
    <Nodes className="text-error-9"/>
    <Sparkle3 className="text-warning-9 size-16"/>
    <TaskUnchecked className="size-[12px]"/>
</Row>

----------------------------------------

TITLE: Creating Database Schema for Key Management in SQL
DESCRIPTION: SQL code to create tables for key_space and keys, establishing a relationship where many keys belong to a single key_space.

LANGUAGE: sql
CODE:
CREATE TABLE `key_space` (
	`id` varchar(256) NOT NULL,
	`workspace_id` varchar(256) NOT NULL,
	# ... omitted
)

CREATE TABLE `keys` (
	`id` varchar(256) NOT NULL,
	`hash` varchar(256) NOT NULL,
	`workspace_id` varchar(256) NOT NULL,
	`key_space_id` varchar(256) NOT NULL,
	# ... omitted
)

----------------------------------------

TITLE: Implementing Approximated Key Count Update in TypeScript
DESCRIPTION: TypeScript code using Drizzle ORM to check and update the approximated key count. It queries the key_space table, checks if the count needs updating, and performs an asynchronous update if necessary.

LANGUAGE: typescript
CODE:
const keySpace = await db.query.keySpace.findFirst({where: ...})
if (keySpace.sizeLastUpdatedAt < Date.now() - 60_000) {
  const count = await db
    .select({ count: sql<string>`count(*)` })
    .from(schema.keys)
    .where(and(eq(schema.keys.keySpaceId, keySpace.id), isNull(schema.keys.deletedAtM)));

  keySpace.sizeApprox = Number.parseInt(count?.at(0)?.count ?? "0");
  keySpace.sizeLastUpdatedAt = Date.now();

  c.executionCtx.waitUntil(
    db.primary
      .update(schema.keySpace)
      .set({
        sizeApprox: keySpace.sizeApprox,
        sizeLastUpdatedAt: keySpace.sizeLastUpdatedAt,
      })
      .where(eq(schema.keySpace.id, keySpace.id)),
  );
}

----------------------------------------

TITLE: Disabling Telemetry
DESCRIPTION: Shows how to opt out of anonymous telemetry data collection

LANGUAGE: typescript
CODE:
const unkey = new Unkey({
  rootKey: "<UNKEY_ROOT_KEY>",
  disableTelemetry: true,
});

----------------------------------------

TITLE: Starting Unkey GenServer with Supervisor
DESCRIPTION: Initializes the Unkey SDK under a supervision tree with required configuration including the root key token. Uses a one-for-one supervision strategy.

LANGUAGE: elixir
CODE:
 children = [
      {UnkeyElixirSdk, %{token: "yourunkeyrootkey"}}
    ]


# Now we start the supervisor with the children and a strategy
{:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)

# After started, we can query the supervisor for information
Supervisor.count_children(pid)
#=> %{active: 1, specs: 1, supervisors: 0, workers: 1}

----------------------------------------

TITLE: Initializing Unkey Client
DESCRIPTION: Creates a new instance of the Unkey client using a root key for authentication

LANGUAGE: typescript
CODE:
import { Unkey } from "@unkey/api";

const unkey = new Unkey({ rootKey: "<UNKEY_ROOT_KEY>" });

----------------------------------------

TITLE: Configuring Tailwind CSS for Unkey UI
DESCRIPTION: Configuration example for tailwind.config.js to properly include Unkey UI components and styling.

LANGUAGE: javascript
CODE:
// Example tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // Your app's content paths
    "./app/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
    // Also include Unkey UI package contents
    "../../internal/ui/src/**/*.tsx",
    "../../internal/icons/src/**/*.tsx",
  ],
  theme: {
    extend: {
      // Your theme extensions
    },
  },
  plugins: [],
}

----------------------------------------

TITLE: Installing @unkey/cache via npm
DESCRIPTION: Command to install the @unkey/cache library using npm package manager.

LANGUAGE: bash
CODE:
npm install @unkey/cache

----------------------------------------

TITLE: Importing Unkey UI Components
DESCRIPTION: Shows how to import specific components from the @unkey/ui package.

LANGUAGE: typescript
CODE:
import { Button, FormInput, Id } from "@unkey/ui";

----------------------------------------

TITLE: Example Unkey Local Setup Command
DESCRIPTION: Example command demonstrating how to start local development for the dashboard service while skipping the environment setup prompt.

LANGUAGE: sh
CODE:
pnpm local --service=dashboard --skip-env

----------------------------------------

TITLE: Basic Component Usage Example in React
DESCRIPTION: Demonstrates practical usage of Unkey UI components in a React component context.

LANGUAGE: tsx
CODE:
import { Button, FormInput } from "@unkey/ui";

function MyComponent() {
  return (
    <div>
      <FormInput
        label="API Key Name"
        description="Give your key a descriptive name"
        required
      />

      <Button>Create Key</Button>
    </div>
  );
}

----------------------------------------

TITLE: Creating a Role using Unkey API
DESCRIPTION: This curl command demonstrates how to create a role using the Unkey API. It requires a root key with 'rbac.*.create_role' permission.

LANGUAGE: curl
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/permissions.createRole \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
  "name": "dns.records.manager",
  "description": "dns.records.manager can read and write dns records for our domains."
}'

----------------------------------------

TITLE: Adding WorkOS Organization ID Column
DESCRIPTION: SQL modification to add a non-nullable varchar column for WorkOS organization IDs in the workspaces table, with an empty string default value.

LANGUAGE: sql
CODE:
ALTER TABLE workspaces ADD COLUMN organisation_id VARCHAR NOT NULL DEFAULT '';

----------------------------------------

TITLE: Creating a Permission using Unkey API
DESCRIPTION: This curl command shows how to create a permission using the Unkey API. It requires a root key with 'rbac.*.create_permission' permission.

LANGUAGE: curl
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/permissions.createPermission \
  --header 'Authorization: Bearer <token>' \
  --header 'Content-Type: application/json' \
  --data '{
  "name": "record.write",
  "description": "record.write can create new dns records for our domains."
}'

----------------------------------------

TITLE: Example: Assigning API Creation and Key Management Roles in TypeScript
DESCRIPTION: Demonstrates how to assign roles that allow a key to create new APIs, modify them, and perform all actions on keys. This example shows the flexibility of the role schema in granting specific permissions.

LANGUAGE: typescript
CODE:
api::*::create_api
api::*::update_api
api::*::read_key
api::*::create_key
api::*::update_key
api::*::delete_key

----------------------------------------

TITLE: Installing Next.js SDK for Unkey
DESCRIPTION: Command to install the new Next.js SDK for Unkey using npm.

LANGUAGE: bash
CODE:
 npm install @unkey/nextjs

----------------------------------------

TITLE: S3 + Dedicated Cache Layer Architecture
DESCRIPTION: ASCII diagram showing a multi-gateway system with load balancer and dedicated cache nodes connecting to S3 storage.

LANGUAGE: ascii
CODE:
┌─────────────────┐
│ Gateway 1       │───┐
└─────────────────┘   │
                      │
┌─────────────────┐   │    ┌────────────┐
│ Gateway 2       │───┼───►│   Load     │    ┌────────────┐
└─────────────────┘   │    │  Balancer  │───►│ Cache      │──┐
                      │    │            │    │ Node 1     │  │
┌─────────────────┐   │    │            │    └────────────┘  │    ┌─────────┐
│ Gateway 3       │───┤    │            │                    │    │   S3    │
└─────────────────┘   │    │            │                    ├───►│         │
                      ├───►│            │    ┌────────────┐  │    └─────────┘
┌─────────────────┐   │    │            │───►│ Cache      │──┘
│ Gateway 4       │───┤    │            │    │ Node 2     │
└─────────────────┘   │    └────────────┘    └────────────┘
                      │
┌─────────────────┐   │
│ Gateway n       │───┘
└─────────────────┘

----------------------------------------

TITLE: Installing Unkey Ratelimit Package
DESCRIPTION: Command to install the Unkey ratelimit SDK using pnpm

LANGUAGE: shell
CODE:
pnpm add @unkey/ratelimit

----------------------------------------

TITLE: Sending Telemetry Headers with Unkey API Request
DESCRIPTION: Example showing how to send telemetry data via HTTP headers when making requests to the Unkey API. Demonstrates the format for SDK version, platform, and runtime information headers.

LANGUAGE: bash
CODE:
curl -XPOST 'https://api.unkey.dev/v1/keys.verifyKey' \
  -H "Content-Type: application/json" \
  -H "Unkey-Telemetry-SDK: @unkey/api@1.10.0" \
  -H "Unkey-Telemetry-Platform: Vercel" \
  -H "Unkey-Telemetry-Runtime: edge-light" \
  -d '{ "key": "<...>" }'

----------------------------------------

TITLE: Installing @unkey/ratelimit Package
DESCRIPTION: Commands to install the @unkey/ratelimit package using different package managers.

LANGUAGE: bash
CODE:
npm install @unkey/ratelimit

LANGUAGE: bash
CODE:
pnpm add @unkey/ratelimit

LANGUAGE: bash
CODE:
yarn add @unkey/ratelimit

LANGUAGE: bash
CODE:
bun install @unkey/ratelimit

----------------------------------------

TITLE: Implementing Feature Components in Unkey Dashboard
DESCRIPTION: This snippet provides examples of implementing various parts of a feature, including a component, a custom hook, a server action, and a type definition. It demonstrates the recommended file structure and naming conventions.

LANGUAGE: typescript
CODE:
// /feature/components/feature-list/index.tsx
export function FeatureList() {
  // Component implementation
}

// /feature/hooks/queries/use-features.ts
export function useFeatures() {
  // Hook implementation
}

// /feature/actions/feature-actions.ts
export async function createFeature() {
  // Server action implementation
}

// /feature/types/feature.ts
export interface Feature {
  // Type definitions
}

----------------------------------------

TITLE: Configuring Custom Base URL
DESCRIPTION: Shows how to configure a custom base URL for API requests

LANGUAGE: typescript
CODE:
const unkey = new Unkey({
  rootKey: "<UNKEY_ROOT_KEY>",
  baseUrl: "https://my.domain",
});

----------------------------------------

TITLE: Configuring Custom Base URL
DESCRIPTION: Shows how to configure a custom base URL for API requests

LANGUAGE: typescript
CODE:
const unkey = new Unkey({
  rootKey: "<UNKEY_ROOT_KEY>",
  baseUrl: "https://my.domain",
});

----------------------------------------

TITLE: Installing Dependencies for Unkey in Bash
DESCRIPTION: Commands to navigate to the project directory, enable corepack, and install project dependencies using pnpm.

LANGUAGE: bash
CODE:
cd unkey
corepack enable
pnpm install

----------------------------------------

TITLE: Documenting Version Changes in Markdown
DESCRIPTION: This code snippet shows the structure of a changelog entry in Markdown format. It includes version numbers, change types (Minor/Patch), and descriptions of the changes made.

LANGUAGE: markdown
CODE:
## 1.5.0

### Minor Changes

- 28e7800: feat: allow removing multiple entries at once

## 1.4.0

### Minor Changes

- e3231e3: Add turso
- b5b6b98: add upstash-redis store implementation

## 1.3.0

### Minor Changes

- cf4cf63: add upstash-redis store implementation

## 1.2.0

### Minor Changes

- 53a1df1: Update licenses in package.json

### Patch Changes

- Updated dependencies [53a1df1]
  - @unkey/error@0.2.0

----------------------------------------

TITLE: Testing the Rate-Limited Server
DESCRIPTION: Use curl to test the rate-limited server. Multiple requests will trigger the rate limit error.

LANGUAGE: bash
CODE:
curl http://localhost:8000

----------------------------------------

TITLE: Displaying Changelog Entry in Markdown
DESCRIPTION: Shows the structure of a changelog entry, including version number, change type, and description of changes. This format is consistent throughout the file for documenting package updates.

LANGUAGE: markdown
CODE:
## 0.18.8

### Patch Changes

- Updated dependencies [10120e0]
  - @unkey/api@0.33.1

----------------------------------------

TITLE: Environment Configuration
DESCRIPTION: Setting up the Unkey root key in environment variables.

LANGUAGE: bash
CODE:
UNKEY_ROOT_KEY="YOUR_KEY"

----------------------------------------

TITLE: Adding Unkey Root Key to Environment
DESCRIPTION: Example of adding the Unkey root key to the .env file.

LANGUAGE: bash
CODE:
UNKEY_ROOT_KEY="YOUR_KEY"

----------------------------------------

TITLE: Running Hono Application
DESCRIPTION: Commands to run the Hono application in development mode using different package managers.

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
pnpm run dev

LANGUAGE: bash
CODE:
yarn run dev

LANGUAGE: bash
CODE:
bun run dev

----------------------------------------

TITLE: Installing Unkey Rate Limit Package
DESCRIPTION: Commands to install the @unkey/ratelimit package using different package managers.

LANGUAGE: bash
CODE:
npm install @unkey/ratelimit

LANGUAGE: bash
CODE:
pnpm add @unkey/ratelimit

LANGUAGE: bash
CODE:
yarn add @unkey/ratelimit

LANGUAGE: bash
CODE:
bun install @unkey/ratelimit

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Adding the Unkey root key to the environment configuration file.

LANGUAGE: bash
CODE:
UNKEY_ROOT_KEY="YOUR_KEY"

----------------------------------------

TITLE: Rate Limit DTO Definition
DESCRIPTION: Data Transfer Object that defines the rate limiting structure used in key verification responses. Includes limit values, remaining requests, and reset timestamp.

LANGUAGE: java
CODE:
public class KeyVerifyRateLimit {
    private Integer limit;
    private Integer remaining;
    private Long reset;
}

----------------------------------------

TITLE: Tagging API Key Verification in Unkey
DESCRIPTION: Example of how to tag a verification request when verifying an API key. This allows for filtering analytics data by specific endpoints or custom criteria later.

LANGUAGE: bash
CODE:
curl -XPOST 'https://api.unkey.dev/v1/keys.verifyKey' \
  -H 'Content-Type: application/json' \
  -d '{
    "key": "<API_KEY>",
    "apiId": "api_<API_ID>",
    "tags": [ "path=/my/endpoint" ],
  }'

----------------------------------------

TITLE: Verification Response Structure
DESCRIPTION: Shows the structure of a successful verification response containing the validity status and list of permissions.

LANGUAGE: json
CODE:
{
  valid: true,
  permissions: ["permission1", "permission2", ...]
  //... omited for brevity
}

----------------------------------------

TITLE: Creating Temporary API Key with Curl
DESCRIPTION: Example of creating a temporary API key by making a POST request to Unkey's /v1/keys endpoint. The request includes required parameters like apiId, prefix, byteLength, ownerId, and an expiration timestamp.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.createKey \
  --header 'Authorization: Bearer <UNKEY>' \
  --header 'Content-Type: application/json' \
  --data '{
	"apiId":"<API_ID>",
	"prefix":"xyz",
	"byteLength":16,
	"ownerId":"USER_ID",
	"expires": 1718718673000,
}'

----------------------------------------

TITLE: Verify Key with Tags using cURL
DESCRIPTION: Example of how to add tags when verifying an API key using a POST request to the Unkey API. Shows the structure of the request body including apiId, key, and tags array.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://api.unkey.dev/v1/keys.verifyKey \
  --header 'Content-Type: application/json' \
  --data '{
  "apiId": "api_1234",
  "key": "sk_1234",
  "tags": [
    "tag1",
    "path=/v1/my-resource/123"
  ]
}'

----------------------------------------

TITLE: Response Example for Updating Key Remaining Value in Unkey with Elixir
DESCRIPTION: This snippet shows an example of the response returned after updating the remaining value of a key. It demonstrates the structure of the response map.

LANGUAGE: elixir
CODE:
%{"remaining"=> 100}

----------------------------------------

TITLE: Listing Identities with Unkey Python SDK
DESCRIPTION: This snippet demonstrates how to list identities with pagination using the Unkey Python SDK. It includes optional parameters for environment and limit.

LANGUAGE: python
CODE:
import os
from unkey_py import Unkey

s = Unkey(
    bearer_auth=os.getenv("UNKEY_BEARER_AUTH", ""),
)

res = s.identities.list(limit=100)

if res.object is not None:
    while True:
        # handle items

        res = res.next()
        if res is None:
            break

----------------------------------------

TITLE: Initializing T3 Stack Project
DESCRIPTION: Command to create a new T3 stack application using pnpm package manager

LANGUAGE: shell
CODE:
pnpm create t3-app@latest

----------------------------------------

TITLE: Installing Next.js Application and Dependencies
DESCRIPTION: Commands to create a new Next.js application and install required dependencies including Unkey, Clerk, and Shadcn UI components.

LANGUAGE: bash
CODE:
npx create-next-app@latest unkey-with-auth
npm install @unkey/api @clerk/nextjs
npx shadcn-ui@latest init
npx shadcn-ui@latest add button input label card

----------------------------------------

TITLE: Environment Configuration Setup
DESCRIPTION: Environment variables setup for Clerk authentication and Unkey API configuration

LANGUAGE: bash
CODE:
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxxxxxxxxxxxxx
CLERK_SECRET_KEY=sk_test_xxxxxxxxxxxxxx
UNKEY_API_ID=api_xxxxxxxxxxxxxx
UNKEY_ROOT_KEY=unkey_xxxxxxxxxxxxxx

----------------------------------------

TITLE: Implementing Key Verification with Unkey TypeScript SDK
DESCRIPTION: Demonstrates how to verify an API key using the @unkey/api package and handle the verification response. The code checks for errors and validity before proceeding with the request.

LANGUAGE: tsx
CODE:
import { verifyKey } from "@unkey/api";

const { result, error } = await verifyKey("key_123");

if (error) {
  console.error(error.message);
  return;
}

if (!result.valid) {
  // Key isn't valid so don't allow access to resource
  return;
}

// process request
console.log(result);

----------------------------------------

TITLE: Configuring Unkey Agent CLI Options
DESCRIPTION: Command line interface help output showing available flags for running the Unkey agent, including analytics backend selection, logging configuration, and event bus options.

LANGUAGE: bash
CODE:
$ unkey agent --help

Run the Unkey agent

Usage:
  unkey agent [flags]

Flags:
      --analytics string   Send analytics to a backend, available: ['tinybird']
      --enable-axiom       Send logs and traces to axiom
      --event-bus string   Use a message bus for communication between nodes, available: ['kafka']
  -h, --help               help for agent

Global Flags:
  -e, --env string   Path to a .env file

----------------------------------------

TITLE: Verifying API Key Status with Unkey
DESCRIPTION: Validates an API key and returns its validity status along with remaining usage count.

LANGUAGE: bash
CODE:
curl --request POST \
--url https://api.unkey.dev/v1/keys.verifyKey \
--header 'Content-Type: application/json' \
--data '{
"key": "<NEW_KEY>"
}'

----------------------------------------

TITLE: Querying API Keys with ownerId Filter in Unkey API (Bash)
DESCRIPTION: This code snippet demonstrates how to use the new ownerId filter when retrieving API keys from the Unkey API. The filter allows for returning only keys where the ownerId matches the specified value.

LANGUAGE: bash
CODE:
curl \
  --url https://api.unkey.dev/v1/apis/api_123/keys?ownerId=chronark \
  --header 'Authorization: Bearer <UNKEY>'

----------------------------------------

TITLE: Implementing SSO with AWS Cognito in Python
DESCRIPTION: This snippet demonstrates how to authenticate a user using AWS Cognito, which can be integrated into an SSO system. It initializes a Cognito Identity Provider client and initiates authentication using the USER_SRP_AUTH flow.

LANGUAGE: python
CODE:
import boto3

# Initialize a Cognito Identity Provider client
client = boto3.client('cognito-idp')

# Replace 'USER_POOL_ID' and 'CLIENT_ID' with your actual IDs
response = client.initiate_auth(
    ClientId='CLIENT_ID',
    AuthFlow='USER_SRP_AUTH',
    AuthParameters={
        'USERNAME': 'example_username',
        'PASSWORD': 'example_password'
    }
)

print(response)

----------------------------------------

TITLE: Installing Unkey Toolbox CLI
DESCRIPTION: Command to install and initialize a new API project using the Unkey Toolbox CLI tool. This command starts an interactive prompt to configure your API project.

LANGUAGE: bash
CODE:
npx @unkey/create-api

----------------------------------------

TITLE: Aggregating Monthly Verifications in SQL
DESCRIPTION: SQL query to aggregate successful verifications per workspace and month using Tinybird

LANGUAGE: sql
CODE:
SELECT
    workspaceId,
    apiId,
    keyId,
    countState(*) AS total,
    toStartOfMonth(fromUnixTimestamp64Milli(time)) AS time
FROM key_verifications__v2
WHERE deniedReason IS NULL
GROUP BY
    workspaceId,
    apiId,
    keyId,
    time

----------------------------------------

TITLE: Using Async Ratelimiting in Request Handler with TypeScript
DESCRIPTION: This code demonstrates how to use async ratelimiting in a request handler for improved latency, sacrificing minimal accuracy.

LANGUAGE: typescript
CODE:
async function handler(request: NextApiRequest) {
  const identifier = request.getUserId();

  const ratelimit = await unkey.limit(identifier, {
    async: true,
  });
  if (!ratelimit.success) {
    return new Response("try again later", { status: 429 });
  }
  // handle the request here
}

----------------------------------------

TITLE: Disabling Telemetry in withUnkey
DESCRIPTION: Example of disabling anonymous telemetry data collection in the Unkey SDK by passing a configuration flag.

LANGUAGE: typescript
CODE:
export const GET = withUnkey(async (req) => {
  // ...
}, { disableTelemetry: true });

----------------------------------------

TITLE: Markdown Changelog
DESCRIPTION: Structured changelog documenting version history from 0.0.3 to 0.5.5, tracking both minor and patch changes including dependency updates, feature additions, and bug fixes.

LANGUAGE: markdown
CODE:
# @unkey/ratelimit

## 0.5.5

### Patch Changes

- Updated dependencies [10120e0]
  - @unkey/api@0.33.1

## 0.5.4

### Patch Changes

- Updated dependencies [98bbb16]
  - @unkey/api@0.33.0

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to run the Next.js development server using npm, yarn, or pnpm. This starts the local development environment for the Next.js application.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev

----------------------------------------

TITLE: Configuring Robots.txt for Unkey Website
DESCRIPTION: This robots.txt configuration allows all user agents to access the entire Unkey website and specifies the location of the sitemap. It ensures proper indexing and crawling by search engines.

LANGUAGE: robots.txt
CODE:
User-Agent: *
Allow: /
Sitemap: https://unkey.com/sitemap.xml

----------------------------------------

TITLE: Current Authorization Directory Structure
DESCRIPTION: Example of the current flat directory structure for the authorization feature showing the organization of permissions and roles components.

LANGUAGE: bash
CODE:
├── authorization/
│   ├── permissions/
│   │   ├── [permissionId]/
│   │   │   ├── client.tsx
│   │   │   ├── delete-permission.tsx
│   │   │   └── page.tsx
│   │   ├── create-new-permission.tsx
│   │   └── page.tsx
│   └── roles/
│       ├── [roleId]/
│       │   ├── delete-role.tsx
│       │   ├── page.tsx
│       │   ├── permission-toggle.tsx
│       │   ├── tree.tsx
│       │   └── update-role.tsx
│       ├── create-new-role.tsx
│       └── page.tsx
├── constants.ts
└── layout.tsx

----------------------------------------

TITLE: Setting Default Values and Constraints
DESCRIPTION: Demonstrates how to set default values and constraints on table columns.

LANGUAGE: typescript
CODE:
const table = mysqlTable('table', {
  intWithDefault: int('int_with_default').default(3),
  notNullInt: int('not_null_int').notNull(),
});

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Command to install project dependencies using Bun package manager.

LANGUAGE: bash
CODE:
bun install