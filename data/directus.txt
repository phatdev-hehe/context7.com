TITLE: Installing Directus SDK via npm
DESCRIPTION: Command to install the Directus SDK using npm package manager.

LANGUAGE: bash
CODE:
npm install @directus/sdk

----------------------------------------

TITLE: Fetching Data from Directus Collection using REST API
DESCRIPTION: Makes a GET request to retrieve items from a collection using bearer token authentication. Returns up to 100 items by default.

LANGUAGE: bash
CODE:
curl \
--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
--url 'https://directus.example.com/items/posts'

----------------------------------------

TITLE: Defining Directus Interface in JavaScript
DESCRIPTION: This snippet demonstrates how to define a custom interface for Directus using the defineInterface function. It includes setting up the interface properties, supported types, and configuration options.

LANGUAGE: javascript
CODE:
import { defineInterface } from '@directus/extensions-sdk'
import InterfaceComponent from './interface.vue';

export default defineInterface({
	id: 'custom',
	name: 'Custom',
	icon: 'box',
	description: 'This is my custom interface!',
	component: InterfaceComponent,
	types: ['string'],
	options: [
		{
			field: 'text',
			name: 'Text',
			type: 'string',
			meta: {
				interface: 'input',
				width: 'full',
			}
		},
	],
});

----------------------------------------

TITLE: Creating Directus Client in JavaScript
DESCRIPTION: Example of creating a Directus client with REST functionality in JavaScript.

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from '@directus/sdk';
const directus = createDirectus('http://directus.example.com').with(rest());

----------------------------------------

TITLE: User Login API Examples in Directus
DESCRIPTION: Examples of logging in a user via the Directus API using different methods. Shows how to authenticate and receive access and refresh tokens.

LANGUAGE: bash
CODE:
curl \
	--request POST \
	--header 'Content-Type: application/json' \
	--data '{ "email": "hello@example.com", "password": "d1r3ctu5" }' \
	--url 'https://directus.example.com/auth/login'

LANGUAGE: graphql
CODE:
mutation {
	auth_login(email: "hello@example.com", password: "d1r3ctu5") {
		access_token
		refresh_token
	}
}

LANGUAGE: javascript
CODE:
import { createDirectus, authentication } from '@directus/sdk';

const email = "hello@example.com";
const password = "d1r3ctu5";

const client = createDirectus('http://directus.example.com').with(authentication());

const token = await client.login(email, password);

----------------------------------------

TITLE: Using Custom Endpoints with Directus SDK
DESCRIPTION: Examples of calling custom endpoints using the Directus SDK in both JavaScript and TypeScript.

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from '@directus/sdk';
const directus = createDirectus('http://directus.example.com').with(rest());

const result = await directus.request(() => ({
  path: '/custom/endpoint',
  method: 'GET',
}));

LANGUAGE: typescript
CODE:
import { createDirectus, rest, customEndpoint } from '@directus/sdk';
const directus = createDirectus('http://directus.example.com').with(rest());

const result = await directus.request(customEndpoint<OutputType>({
  path: '/custom/endpoint',
  method: 'GET',
}));

----------------------------------------

TITLE: Handling Cross-Domain Cookies in Directus SDK
DESCRIPTION: Demonstrates how to configure the Directus SDK to handle cross-domain cookies for authentication and requests.

LANGUAGE: javascript
CODE:
const directus = createDirectus('http://directus.example.com')
  .with(authentication('cookie', { credentials: 'include' }))
  .with(graphql({ credentials: 'include' }))
  .with(rest({ credentials: 'include' }));

LANGUAGE: javascript
CODE:
const result = await directus.request(
  withOptions(refresh(), { credentials: 'include' })
);

----------------------------------------

TITLE: Initializing Directus Client and Querying Articles in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Directus client and use it to fetch published articles. It imports necessary functions from the Directus SDK, initializes a client with a URL, and performs a query to retrieve specific fields from articles, applying filters, sorting, and a limit.

LANGUAGE: typescript
CODE:
import { createDirectus, rest, readItems } from '@directus/sdk';
const directus = createDirectus('http://directus.example.com');

const item = await directus.request(
	readItems('articles', {
		fields: ['id', 'title', 'date_published', 'summary'],
		filter: { status: { _eq: 'published' } },
		sort: ['-date_published'],
		limit: 3
	})
);

----------------------------------------

TITLE: Making Authenticated Requests in Directus
DESCRIPTION: Example of making an authenticated request to the Directus API using a bearer token in the Authorization header.

LANGUAGE: bash
CODE:
curl \
--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
--url 'https://directus.example.com/items/posts'

----------------------------------------

TITLE: Configuring General System Settings in Directus
DESCRIPTION: This snippet shows the environment variables used for configuring general system settings in Directus, including host, port, public URL, and various other options.

LANGUAGE: markdown
CODE:
| Variable                                   | Description                                                                                                                                | Default Value                |
| ------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------- |
| `CONFIG_PATH`                              | Where your config file is located. See [Deploying Directus](/self-hosting/deploying).                                                      | `.env`                       |
| `HOST`                                     | IP or host the API listens on.                                                                                                             | `0.0.0.0`                    |
| `PORT`                                     | What port to run the API under.                                                                                                            | `8055`                       |
| `UNIX_SOCKET_PATH`                         | The Unix socket the API listens on, `PORT` and `HOST` will be ignored if this is provided.                                                 |                              |
| `PUBLIC_URL`                               | URL where your API can be reached on the web. used for things like OAuth redirects, forgot-password emails, and publicly-accessible logos. | `/`                          |
| `ROOT_REDIRECT`                            | Redirect the root of the application `/` to a specific route. Accepts a relative path, absolute URL, or `false` to disable.                | `./admin`                    |
| `SERVE_APP`                                | Whether or not to serve the Data Studio web application.                                                                                   | `true`                       |
| `GRAPHQL_INTROSPECTION`                    | Whether or not to enable GraphQL Introspection.                                                                                            | `true`                       |
| `GRAPHQL_SCHEMA_CACHE_CAPACITY`            | How many user GraphQL schemas to store in memory.                                                                                          | `100`                        |
| `GRAPHQL_SCHEMA_GENERATION_MAX_CONCURRENT` | How many GraphQL schemas can be generated simultaneously.                                                                                  | `5`                        |
| `ROBOTS_TXT`                               | What the `/robots.txt` endpoint should return.                                                                                             | `User-agent: *\nDisallow: /` |
| `TEMP_PATH`                                | Where Directus' temporary files should be managed.                                                                                         | `./node_modules/.directus`   |

----------------------------------------

TITLE: Querying Fields in Directus API
DESCRIPTION: Demonstrates how to specify which fields are returned using the fields parameter. Supports dot notation for nested relational fields and wildcards.

LANGUAGE: http
CODE:
GET /items/posts
	?fields=first_name,last_name,avatar.description

LANGUAGE: graphql
CODE:
Use native GraphQL queries.

LANGUAGE: json
CODE:
{
	"fields": ["first_name", "last_name", { "avatar": ["description"] }]
}

----------------------------------------

TITLE: CRUD Operations with ItemsService in Directus
DESCRIPTION: Illustrates how to perform Create, Read, Update, and Delete operations using the ItemsService in Directus. Includes examples for creating, reading, updating, and deleting individual items.

LANGUAGE: javascript
CODE:
const data = await itemsService.createOne({
	title: 'Hello world!',
	body: 'This is our first article',
});

LANGUAGE: javascript
CODE:
const data = await itemsService.readOne('item_id');

LANGUAGE: javascript
CODE:
const data = await itemsService.updateOne('item_id', {
	title: "An updated title"
});

LANGUAGE: javascript
CODE:
const data = await itemsService.deleteOne('item_id');

----------------------------------------

TITLE: Configuring Docker Compose for Directus Deployment with Postgres and Redis
DESCRIPTION: This Docker Compose configuration sets up a Directus deployment with Postgres database, Redis cache, and local file storage. It includes health checks for the database and cache services, and configures essential environment variables for Directus.

LANGUAGE: yaml
CODE:
services:
  database:
    image: postgis/postgis:13-master
    volumes:
      - ./data/database:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "directus"
      POSTGRES_PASSWORD: "directus"
      POSTGRES_DB: "directus"
    healthcheck:
      test: ["CMD", "pg_isready", "--host=localhost", "--username=directus"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

  cache:
    image: redis:6
    healthcheck:
      test: ["CMD-SHELL", "[ $$(redis-cli ping) = 'PONG' ]"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

  directus:
    image: directus/directus:REPLACE_WITH_VERSION
    ports:
      - 8055:8055
    volumes:
      - ./uploads:/directus/uploads
      - ./extensions:/directus/extensions
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
    environment:
      SECRET: "REPLACE_WITH_YOUR_SECRET"

      DB_CLIENT: "pg"
      DB_HOST: "database"
      DB_PORT: "5432"
      DB_DATABASE: "directus"
      DB_USER: "directus"
      DB_PASSWORD: "directus"

      CACHE_ENABLED: "true"
      CACHE_AUTO_PURGE: "true"
      CACHE_STORE: "redis"
      REDIS: "redis://cache:6379"

      ADMIN_EMAIL: "REPLACE_WITH_YOUR_EMAIL"
      ADMIN_PASSWORD: "REPLACE_WITH_YOUR_PASSWORD"

      PUBLIC_URL: "REPLACE_WITH_YOUR_URL"

----------------------------------------

TITLE: Implementing User Login API Route in Next.js
DESCRIPTION: Creates an API route for user login using Directus SDK's login function and handles session token storage in cookies.

LANGUAGE: typescript
CODE:
import client from '@/lib/directus';
import { NextRequest, NextResponse } from 'next/server';
import { cookies } from 'next/headers';

export async function POST(request: NextRequest) {
    const formData = await request.formData();

    const email = formData.get("email") as string;
    const password = formData.get("password") as string;

    if (!email || !password) {
        return NextResponse.json({ error: "All fields are required" }, { status: 400 });
    }

    try {
        const response = await client.login(email, password);
        console.log(response);
        if (response.access_token) {
          (await cookies()).set('directus_session_token', response.access_token, { sameSite: 'strict', path: '/', secure: true })
        }
        const url = request.nextUrl.clone();
        url.pathname = "/dashboard"
        return NextResponse.redirect(url);
    } catch (error) {
      console.log(error);
        return NextResponse.json({ error: "Registration failed" }, { status: 500 });
    }
}

----------------------------------------

TITLE: Creating New Item in Directus Collection
DESCRIPTION: Sends a POST request to create a new item in a collection. Includes authorization header and JSON payload with the item data.

LANGUAGE: bash
CODE:
curl \
	--request POST \
	--header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
	--header 'Content-Type: application/json' \
	--data '{ "title": "Hello Universe!" }' \
  	--url 'https://directus.example.com/items/posts'

----------------------------------------

TITLE: Configuring Security and Limits in Directus
DESCRIPTION: A comprehensive table of environment variables for configuring security and limits in Directus, including settings for tokens, cookies, and various security policies.

LANGUAGE: markdown
CODE:
| Variable                            | Description                                                                                                                                                                             | Default Value             |
| ----------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------- |
| `SECRET`<sup>[1]</sup>              | Secret string for the project. Used for secret signing.                                                                                                                                 | Random value              |
| `ACCESS_TOKEN_TTL`                  | The duration that an access token is valid.                                                                                                                                             | `15m`                     |
| `EMAIL_VERIFICATION_TOKEN_TTL`      | The duration that an email verification token is valid.                                                                                                                                 | `7d`                      |
| `REFRESH_TOKEN_TTL`                 | The duration that a refresh token is valid. This value should be higher than `ACCESS_TOKEN_TTL` and `SESSION_COOKIE_TTL`.                                                               | `7d`                      |
| `REFRESH_TOKEN_COOKIE_DOMAIN`       | Which domain to use for the refresh token cookie. Useful for development mode.                                                                                                          |                           |
| `REFRESH_TOKEN_COOKIE_SECURE`       | Whether or not to set the `secure` attribute for the refresh token cookie.                                                                                                              | `false`                   |
| `REFRESH_TOKEN_COOKIE_SAME_SITE`    | Value for `sameSite` in the refresh token cookie.                                                                                                                                       | `lax`                     |
| `REFRESH_TOKEN_COOKIE_NAME`         | Name of the refresh token cookie.                                                                                                                                                       | `directus_refresh_token`  |
| `SESSION_COOKIE_TTL`                | The duration that the session cookie/token is valid, and also how long users stay logged-in to the App.                                                                                 | `1d`                      |
| `SESSION_COOKIE_DOMAIN`             | Which domain to use for the session cookie. Useful for development mode.                                                                                                                |                           |
| `SESSION_COOKIE_SECURE`             | Whether or not to set the `secure` attribute for the session cookie.                                                                                                                    | `false`                   |
| `SESSION_COOKIE_SAME_SITE`          | Value for `sameSite` in the session cookie.                                                                                                                                             | `lax`                     |
| `SESSION_COOKIE_NAME`               | Name of the session cookie.                                                                                                                                                             | `directus_session_token`  |
| `SESSION_REFRESH_GRACE_PERIOD`      | The duration during which a refresh request will permit recently refreshed sessions to be used, thereby preventing race conditions in refresh calls.                                    | `10s`                     |
| `LOGIN_STALL_TIME`                  | The duration in milliseconds that a login request will be stalled for, and it should be greater than the time taken for a login request with an invalid password.                       | `500`                     |
| `REGISTER_STALL_TIME`               | The duration in milliseconds that a registration request will be stalled for, and it should be greater than the time taken for a registration request with an already registered email. | `750`                     |
| `PASSWORD_RESET_URL_ALLOW_LIST`     | List of URLs that can be used as `reset_url` in the `/password/request` endpoint.                                                                                                       |                           |
| `USER_INVITE_TOKEN_TTL`             | The duration that the invite token is valid.                                                                                                                                            | `7d`                      |
| `USER_INVITE_URL_ALLOW_LIST`        | List of URLs that can be used as `invite_url` in the `/users/invite` endpoint.                                                                                                          |                           |
| `USER_REGISTER_URL_ALLOW_LIST`      | List of URLs that can be used as `verification_url` in the `/users/register` endpoint.                                                                                                  |                           |
| `IP_TRUST_PROXY`                    | Settings for the Express.js trust proxy setting.                                                                                                                                        | true                      |
| `IP_CUSTOM_HEADER`                  | What custom request header to use for the IP address.                                                                                                                                   | false                     |
| `ASSETS_CONTENT_SECURITY_POLICY`    | Custom overrides for the Content-Security-Policy header for the /assets endpoint. See [helmet's documentation on `helmet.contentSecurityPolicy()`](https://helmetjs.github.io).         |                           |
| `IMPORT_IP_DENY_LIST`<sup>[2]</sup> | Deny importing files from these IP addresses / IP ranges / CIDR blocks. Use `0.0.0.0` to match any local IP address.                                                                    | `0.0.0.0,169.254.169.254` |
| `CONTENT_SECURITY_POLICY_*`         | Custom overrides for the Content-Security-Policy header. See [helmet's documentation on `helmet.contentSecurityPolicy()`](https://helmetjs.github.io).                                  |                           |
| `HSTS_ENABLED`                      | Enable the Strict-Transport-Security policy header.                                                                                                                                     | `false`                   |
| `HSTS_*`                            | Custom overrides for the Strict-Transport-Security header. See [helmet's documentation](https://helmetjs.github.io).                                                                    |                           |

----------------------------------------

TITLE: Creating Typed Directus Client in TypeScript
DESCRIPTION: Example of creating a typed Directus client with REST functionality in TypeScript, including schema definition.

LANGUAGE: typescript
CODE:
import { createDirectus, rest } from '@directus/sdk';

interface Post {
  id: number;
  title: string;
  content: string;
}

interface Schema {
  posts: Post[];
}

const directus = createDirectus<Schema>('http://directus.example.com').with(rest());

----------------------------------------

TITLE: Configuring First Admin User in Directus
DESCRIPTION: This snippet shows the environment variables used for configuring the first admin user in Directus during bootstrapping, including email, password, and API token.

LANGUAGE: markdown
CODE:
| Variable         | Description                                                                            | Default Value |
| ---------------- | -------------------------------------------------------------------------------------- | ------------- |
| `ADMIN_EMAIL`    | The email address of the first user that's automatically created during bootstrapping. |               |
| `ADMIN_PASSWORD` | The password of the first user that's automatically created during bootstrapping.      |               |
| `ADMIN_TOKEN`    | The API token of the first user that's automatically created during bootstrapping.     |               |

----------------------------------------

TITLE: Configuring Directus with Docker Compose
DESCRIPTION: This Docker Compose configuration sets up a Directus container with volume mappings for database, uploads, and extensions. It includes environment variables for initial setup and enables WebSockets.

LANGUAGE: yaml
CODE:
services:
	directus:
		image: directus/directus:11.5.1
		ports:
			- 8055:8055
		volumes:
			- ./database:/directus/database
			- ./uploads:/directus/uploads
			- ./extensions:/directus/extensions
		environment:
			SECRET: "replace-with-random-value"
			ADMIN_EMAIL: "admin@example.com"
			ADMIN_PASSWORD: "d1r3ctu5"
			DB_CLIENT: "sqlite3"
			DB_FILENAME: "/directus/database/data.db"
			WEBSOCKETS_ENABLED: "true"

----------------------------------------

TITLE: Complete Schema Migration Implementation
DESCRIPTION: Full implementation of schema migration including snapshot retrieval, diff generation, and applying changes between Directus environments.

LANGUAGE: javascript
CODE:
import { createDirectus, authentication, rest, schemaSnapshot, schemaDiff, schemaApply } from '@directus/sdk';
const BASE_DIRECTUS_URL = 'https://your-base-project.directus.app';

const TARGET_DIRECTUS_URL = 'https://your-target-project.directus.app';

const baseDirectus = createDirectus(BASE_DIRECTUS_URL).with(rest());
const targetDirectus = createDirectus(TARGET_DIRECTUS_URL).with(rest());

await baseDirectus.login('base_email', 'base_password');
await targetDirectus.login('target_email', 'target_password');

async function main() {
  const snapshot = await getSnapshot();
  const diff = await getDiff(snapshot);
  await applyDiff(diff);
}

main();

async function getSnapshot() {
  return await baseDirectus.request(schemaSnapshot());
}

async function getDiff(snapshot) {
  return await targetDirectus.request(schemaDiff(snapshot));
}

async function applyDiff(diff) {
  return await targetDirectus.request(schemaApply(diff));
}

----------------------------------------

TITLE: Making REST Requests with Directus SDK
DESCRIPTION: Demonstrates how to make REST requests using the Directus SDK, including filtering and sorting.

LANGUAGE: javascript
CODE:
import { createDirectus, rest, readItems } from '@directus/sdk';
const directus = createDirectus('http://directus.example.com').with(rest());

const allPosts = await directus.request(readItems('posts'));

const somePosts = await directus.request(
  readItems('posts', {
    filter: { status: { _eq: 'published' } },
    sort: ['-date_created'],
    fields: ['id', 'title', 'date_created'],
    limit: 3
  })
);

----------------------------------------

TITLE: Creating Registration Form Component in Next.js
DESCRIPTION: Implements a simple registration form component that submits to the registration API route.

LANGUAGE: typescript
CODE:
export default function RegistrationPage() {
  return (
    <>
      <h2>Register</h2>
      <form action="/api/auth/register" method="POST">
        <label>Email</label>
        <input type="email" name="email" required />
        <label>Password</label>
        <input type="password" name="password" required />
        <button type="submit">Register</button>
      </form>
    </>
  );
}

----------------------------------------

TITLE: Token Management in Directus SDK
DESCRIPTION: Examples of setting and getting tokens using different methods in the Directus SDK.

LANGUAGE: javascript
CODE:
import { createDirectus, staticToken, rest } from '@directus/sdk';
const directus = createDirectus('http://directus.example.com')
  .with(staticToken('TOKEN'))
  .with(rest());

LANGUAGE: javascript
CODE:
import { createDirectus, rest, withToken, readItems } from '@directus/sdk';
const directus = createDirectus('http://directus.example.com').with(rest());

const request = await directus.request(
  withToken('TOKEN', readItems('posts'))
);

LANGUAGE: javascript
CODE:
import { createDirectus, authentication } from '@directus/sdk';
const directus = createDirectus('http://directus.example.com').with(authentication());

await directus.setToken('TOKEN');

LANGUAGE: javascript
CODE:
import { createDirectus, authentication } from '@directus/sdk';
const directus = createDirectus('http://directus.example.com').with(authentication());

const token = await directus.getToken();

----------------------------------------

TITLE: Session Cookie Authentication in Directus
DESCRIPTION: Shows the automatic session cookie authentication using directus_session_token

LANGUAGE: plaintext
CODE:
directus_session_token

----------------------------------------

TITLE: User Registration API Examples in Directus
DESCRIPTION: Examples of registering a new user via the Directus API using different methods. Shows how to send a POST request with email and password credentials.

LANGUAGE: bash
CODE:
curl \
	--request POST \
	--header 'Content-Type: application/json' \
	--data '{ "email": "hello@example.com", "password": "d1r3ctu5" }' \
	--url 'https://directus.example.com/register'

LANGUAGE: graphql
CODE:
mutation {
	users_register(email: "hello@example.com", password: "d1r3ctu5")
}

LANGUAGE: javascript
CODE:
import { createDirectus, rest, registerUser } from '@directus/sdk';

const client = createDirectus('https://directus.example.com').with(rest());

const result = await client.request(registerUser('hello@example.com', 'd1r3ctu5'));

----------------------------------------

TITLE: Filtering Data in Directus API
DESCRIPTION: Shows how to use the filter parameter to specify which items are returned based on filter rules.

LANGUAGE: http
CODE:
GET /items/posts
	?filter[title][_eq]=Hello

GET /items/posts
	?filter={ "title": { "_eq": "Hello" }}

LANGUAGE: graphql
CODE:
query {
	posts(filter: { title: { _eq: "Hello" } }) {
		id
	}
}

# Attribute names in GraphQL cannot contain the `:` character. If you are filtering Many to Any fields, you will need to replace it with a double underscore.

LANGUAGE: js
CODE:
import { createDirectus, rest, readItems } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest());

const result = await directus.request(
	readItems('posts', {
		filter: {
			title: {
				_eq: 'Hello',
			},
		},
	})
);

----------------------------------------

TITLE: Authentication with Directus SDK
DESCRIPTION: Shows how to use authentication methods (login, refresh, logout) with the Directus SDK.

LANGUAGE: javascript
CODE:
import { createDirectus, authentication } from '@directus/sdk';
const directus = createDirectus('http://directus.example.com').with(authentication());

await directus.login(email, password, login_options);
await directus.refresh();
await directus.logout();

----------------------------------------

TITLE: Making Authenticated Requests in Directus
DESCRIPTION: Demonstrates three different methods for including authentication tokens in API requests: using an Authorization header, session cookies, or query parameters.

LANGUAGE: http
CODE:
Authorization: Bearer <token>

LANGUAGE: text
CODE:
?access_token=<token>

----------------------------------------

TITLE: Uploading Files via Directus SDK in JavaScript
DESCRIPTION: This snippet shows how to upload files using the Directus SDK in JavaScript. It demonstrates creating a Directus client, preparing a FormData object with file properties and raw file data, and using the uploadFiles method to send the request.

LANGUAGE: javascript
CODE:
import { createDirectus, rest, uploadFiles } from '@directus/sdk';

const directus = createDirectus('https://directus.example.com').with(rest());

const formData = new FormData();
formData.append('file_1_property', 'Value');
formData.append('file', raw_file);
formData.append('file_2_property', 'Value');
formData.append('file', raw_file_2);

const result = await directus.request(uploadFiles(formData));

----------------------------------------

TITLE: Complete Vue.js and Directus Chat Application
DESCRIPTION: The full code sample combining all the previous snippets to create a functional multi-user chat application using Vue.js and Directus Realtime.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <body>
    <div id="app">
      <form @submit.prevent="loginSubmit">
        <label for="email">Email</label>
        <input v-model="form.email" type="email" id="email" />
        <label for="password">Password</label>
        <input v-model="form.password" type="password" id="password" />
        <input type="submit" />
      </form>

      <ol>
        <li v-for="message in messages.history" :key="message.id">
          {{ message.user_created.first_name }}: {{ message.text }}
        </li>
      </ol>

      <form @submit.prevent="messageSubmit">
        <label for="message">Message</label>
        <input v-model="messages.new" type="text" id="text" />
        <input type="submit" />
      </form>
    </div>

    <script>
      import { onMounted, ref, onBeforeUnmount } from 'vue';
      import { authentication, createDirectus, realtime } from '@directus/sdk';

      const messageHistory = ref([]);

      const url = 'https://your-directus-url';

      const client = createDirectus(url)
        .with(authentication())
        .with(realtime());

      onMounted(() => {
        const cleanup = client.onWebSocket('message', function (data) {
          if (data.type == 'auth' && data.status == 'ok') {
            readAllMessages();
            subscribe('create');
          }

          if (data.type == 'items') {
            for (const item of data.data) {
              addMessageToList(item);
            }
          }
          console.log(message);
        });

        client.connect();
        onBeforeUnmount(cleanup);
      });

      const loginSubmit = (event) => {
        const email = event.target.elements.email.value;
        const password = event.target.elements.password.value;
        client.login(email, password);
      };

      async function subscribe(event) {
        const { subscription } = await client.subscribe('messages', {
          event,
          query: {
            fields: ['*', 'user_created.first_name'],
          },
        });

        for await (const message of subscription) {
          console.log('receiveMessage', message);
          receiveMessage(message);
        }
      }

      function readAllMessages() {
        client.sendMessage({
          type: 'items',
          collection: 'messages',
          action: 'read',
          query: {
            limit: 10,
            sort: '-date_created',
            fields: ['*', 'user_created.first_name'],
          },
        });
      }

      function receiveMessage(data) {
        if (data.type == 'subscription' && data.event == 'init') {
          console.log('subscription started');
        }
        if (data.type == 'subscription' && data.event == 'create') {
          addMessageToList(message.data[0]);
        }
      }

      function addMessageToList(message) {
        messageHistory.value.push(message);
      }

      const messageSubmit = (event) => {
        const text = event.target.elements.text.value;

        client.sendMessage({
          type: 'items',
          collection: 'messages',
          action: 'create',
          data: { text },
        });

        event.target.reset();
      };
    </script>
  </body>
</html>

----------------------------------------

TITLE: CRUD Operations with RelationsService in Directus
DESCRIPTION: Illustrates Create, Read, Update, and Delete operations using the RelationsService in Directus. Includes examples for creating, reading, updating, and deleting relations between collections.

LANGUAGE: javascript
CODE:
const data = await relationsService.createOne({
	collection: 'articles',
	field: 'featured_image',
	related_collection: 'directus_files',
});

LANGUAGE: javascript
CODE:
const data = await relationsService.readOne('collection_name', 'field_name');

LANGUAGE: javascript
CODE:
const data = await relationsService.updateOne(
	'collection_name',
	'field_name',
	{
		meta: {
			one_field: 'articles',
		},
	},
);

LANGUAGE: javascript
CODE:
const data = await relationsService.deleteOne('collection_name', 'field_name' );

----------------------------------------

TITLE: Initializing Directus Client and Registering User in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Directus client, register a new user, and then authenticate that user. It uses the @directus/sdk package to interact with a Directus instance.

LANGUAGE: typescript
CODE:
import { createDirectus, rest, registerUser, authentication } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest()).with(authentication());

const newUser = await directus.request(
	registerUser({
		email: 'user@example.com',
		password: 'd1r3ctu5'
	})
);

const user = await directus.login('user@example.com', 'd1r3ctu5');

----------------------------------------

TITLE: Uploading Files via REST API in Directus
DESCRIPTION: This snippet demonstrates how to upload files using the Directus REST API. The request should be a POST to the /files endpoint with the body formatted as multipart/form-data. The file content must be provided in a property called 'file'.

LANGUAGE: http
CODE:
// POST /files

Body must be formatted as a `multipart/form-data` with a final property called `file`.

----------------------------------------

TITLE: Accept User Invitation in Directus
DESCRIPTION: API endpoint for accepting a user invitation by providing the invitation token and setting a password.

LANGUAGE: json
CODE:
{
  "token": "eyJh...KmUk",
  "password": "d1r3ctu5"
}

----------------------------------------

TITLE: Initializing ItemsService in Directus API Extension
DESCRIPTION: Demonstrates how to initialize and use the ItemsService within a Directus API extension route handler. The service is created with a collection name, schema, and accountability object.

LANGUAGE: javascript
CODE:
export default (router, context) => {
	const { services, getSchema } = context;
	const { ItemsService } = services;

	router.get('/', async (req, res) => {
		const itemsService = new ItemsService('collection_name', {
			schema: await getSchema(),
			accountability: req.accountability
		});

		// Your route handler logic
	});
};

----------------------------------------

TITLE: Refreshing Authentication Token in Directus
DESCRIPTION: Retrieve a new access token by refreshing it. The refresh token can be returned in JSON or as a httpOnly cookie depending on the 'mode' parameter.

LANGUAGE: json
CODE:
// POST /auth/refresh

{
  "refresh_token": "Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj..."
}

LANGUAGE: graphql
CODE:
mutation {
	auth_refresh(refresh_token: "refresh_token") {
		access_token
		refresh_token
	}
}

LANGUAGE: javascript
CODE:
import { createDirectus, authentication, rest, refresh } from '@directus/sdk';

const client = createDirectus('directus_project_url').with(authentication()).with(rest());

// refresh http request using json
const result = await client.request(refresh('json', refresh_token));

----------------------------------------

TITLE: Creating Directus SDK Helper in Next.js
DESCRIPTION: JavaScript code to create a reusable Directus SDK instance for use across the Next.js application. It includes an optional configuration to prevent caching issues.

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from '@directus/sdk';

const directus = createDirectus('https://directus.example.com').with(rest());

export default directus;

LANGUAGE: javascript
CODE:
const directus = createDirectus('https://directus.example.com').with(
  rest({
    onRequest: (options) => ({ ...options, cache: 'no-store' }),
  })
);

----------------------------------------

TITLE: Complete Custom Endpoint Implementation in JavaScript
DESCRIPTION: Full code for the custom endpoint extension, including schema definition, authentication, and API proxying.

LANGUAGE: javascript
CODE:
const schema = {
  collections: {
    directus_users: {
      collection: 'directus_users',
      primary: 'id',
      singleton: false,
      accountability: 'all',
      fields: {
        id: {
          field: 'id',
          defaultValue: null,
          nullable: false,
          generated: false,
          type: 'uuid',
          dbType: 'uuid',
          special: [],
          alias: false
        }
      }
    }
  }
};
export default {
  id: 'pokeapi',
  handler: (router, {services}) => {
    router.get('/*', async (req, res) => {
      try {
        const user = req.accountability?.user;
        const { ItemsService } = services;
        const users = new ItemsService("directus_users", {schema});
        const authenticatedUser = await users.readOne(user);
        if ( authenticatedUser == null) {
          res.status(403);
          return res.send(`You don't have permission to access this.`);
        }

        const response = await fetch(`https://pokeapi.co/api/v2/${req.url}`);

        if (response.ok) {
          res.json(await response.json());
        } else {
          res.status(response.status);
          res.send(response.statusText);
        }
      } catch (error) {
        res.status(500);
        res.send(error.message);
      }
    });
  },
};

----------------------------------------

TITLE: Querying Directus Collection with Filters and Field Selection
DESCRIPTION: Demonstrates how to use query parameters to filter results and select specific fields. Filters for published status and returns only id and title fields.

LANGUAGE: bash
CODE:
curl \
  --header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
  --url 'https://directus.example.com/items/posts?filter[status][_eq]=published&fields=id,title'

----------------------------------------

TITLE: Basic Filter Syntax
DESCRIPTION: Demonstrates the basic structure of a Directus filter with field, operator, and value.

LANGUAGE: json
CODE:
{
  "field": {
    "operator": "value"
  }
}

----------------------------------------

TITLE: Registering Basic Endpoint in Directus (JavaScript)
DESCRIPTION: Demonstrates how to create a basic endpoint that responds with 'Hello, World!' when accessed via GET request.

LANGUAGE: javascript
CODE:
export default (router, context) => {
	router.get('/', (req, res) => res.send('Hello, World!'));
};

----------------------------------------

TITLE: Updating Many-to-Any (Union Types) Relationship in JSON
DESCRIPTION: Demonstrates how to update a Many-to-Any (Union Types) relationship using JSON. This example shows how to include items from different collections (headings and paragraphs) in a single field.

LANGUAGE: json
CODE:
{
  "sections": [
    {
      "collection": "headings",
      "item": {
        /* headings fields */
      }
    },
    {
      "collection": "paragraphs",
      "item": {
        /* paragraphs fields */
      }
    }
  ]
}

----------------------------------------

TITLE: Grouping Data in Directus API
DESCRIPTION: Demonstrates how to use the groupBy parameter to run aggregate functions based on shared values.

LANGUAGE: http
CODE:
GET /items/posts
  ?aggregate[count]=views,comments
  &groupBy[]=author
  &groupBy[]=year(publish_date)

LANGUAGE: graphql
CODE:
query {
  posts_aggregated(groupBy: ["author", "year(publish_date)"]) {
    group
    count {
      views
      comments
    }
  }
}

LANGUAGE: js
CODE:
import { createDirectus, rest, aggregate } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest());

const result = await directus.request(
  aggregate('posts', {
    aggregate: {
      count: ['views', 'comments']
    },
    groupBy: ['author', 'year(publish_date)'],
  })
);

----------------------------------------

TITLE: Implementing Stripe Customer Creation Hook in Directus
DESCRIPTION: JavaScript code for a Directus hook that creates a Stripe customer when a new customer is added to Directus. It uses the Stripe SDK, handles errors, and updates the Directus record with the Stripe customer ID.

LANGUAGE: javascript
CODE:
import Stripe from 'stripe';

export default ({ action }, { env, services }) => {
  const { MailService, ItemsService } = services;

  action('items.create', async ({ key, collection, payload }, { schema }) => {
    if (collection !== 'customers') return;
    const stripe = new Stripe(env.STRIPE_TOKEN);

    stripe.customers
      .create({
        name: `${payload.first_name} ${payload.last_name}`,
        email: payload.email_address,
      })
      .then((customer) => {
        const customers = new ItemsService(collection, { schema });
        customers.updateByQuery({ filter: { id: key } }, { stripe_id: customer.id }, { emitEvents: false });
      })
      .catch((error) => {
        const mailService = new MailService({ schema });
        mailService.send({
          to: 'sharedmailbox@directus.io',
          from: 'noreply@directus.io',
          subject: `An error has occurred with Stripe API`,
          text: `The following error occurred for ${payload.first_name} ${payload.last_name} when attempting to create an account in Stripe.\r\n\r\n${error}\r\n\r\nPlease investigate.\r\n\r\nID: ${key}\r\nEmail: ${payload.email_address}`,
        });
      });
  });
};

----------------------------------------

TITLE: Using GraphQL with Directus SDK
DESCRIPTION: Demonstrates how to use GraphQL queries with the Directus SDK in TypeScript.

LANGUAGE: typescript
CODE:
import { createDirectus, graphql } from '@directus/sdk';

interface Post {
  id: number;
  title: string;
  content: string;
}

interface Schema {
  posts: Post[];
}

const directus = createDirectus<Schema>('http://directus.example.com').with(graphql());

const result = await directus.query<Post[]>(`
  query {
    posts {
      id
      title
      content
    }
  }
`);

----------------------------------------

TITLE: Logging in with Email and Password in Directus
DESCRIPTION: Authenticate a user with email and password to receive a standard token. This can be done using cURL, GraphQL, or the Directus SDK.

LANGUAGE: bash
CODE:
curl \
	--request POST \
	--header 'Content-Type: application/json' \
	--data '{ "email": "hello@example.com", "password": "d1r3ctu5" }' \
	--url 'https://directus.example.com/auth/login'

LANGUAGE: graphql
CODE:
mutation {
	auth_login(email: "hello@example.com", password: "d1r3ctu5") {
		access_token
		refresh_token
	}
}

LANGUAGE: javascript
CODE:
import { createDirectus, authentication } from '@directus/sdk';

const email = "hello@example.com";
const password = "d1r3ctu5";

const client = createDirectus('http://directus.example.com').with(authentication());

const token = await client.login(email, password);

----------------------------------------

TITLE: Protected Route Component Implementation
DESCRIPTION: React component for protecting routes that require authentication.

LANGUAGE: jsx
CODE:
import { Navigate, Outlet } from 'react-router-dom'
import PropTypes from 'prop-types'

const ProtectedRoute = ({ isAuthenticated }) => {
    return (
        isAuthenticated ? 
        <Outlet /> : <Navigate to="/login" />
    )
}
ProtectedRoute.propTypes = {
    isAuthenticated: PropTypes.bool.isRequired,
}

export default ProtectedRoute;

----------------------------------------

TITLE: Error Handling in Directus SDK
DESCRIPTION: Demonstrates how to use the isDirectusError type guard for error handling in the Directus SDK.

LANGUAGE: javascript
CODE:
import { createDirectus, rest, isDirectusError, readItems } from '@directus/sdk';

const directus = createDirectus('http://directus.example.com').with(rest());

try {
  const request = await directus.request(readItems('posts')));
} catch(error){
  if(isDirectusError(error)){
    // some error has been returned from the API
  } else {
    // some unknown non API error has been thrown (e.g. unable to parse the JSON response)
  }
}

----------------------------------------

TITLE: File Operations with FilesService in Directus
DESCRIPTION: Demonstrates various file operations using the FilesService in Directus. Includes examples for importing, uploading, reading, updating, and deleting files. File upload requires the Busboy dependency for handling file streams.

LANGUAGE: javascript
CODE:
const assetKey = await filesService.importOne({
	url: file_url,
	data: file_object,
});

LANGUAGE: javascript
CODE:
import Busboy from 'busboy'

const busboy = Busboy({ headers: req.headers });

busboy.on('file', async (_, fileStream, { filename, mimeType }) => {
	const primaryKey = await filesService.uploadOne(fileStream, {
		filename_download: filename,
		type: mimeType,
		storage: 'local',
	});
});

req.pipe(busboy);

LANGUAGE: javascript
CODE:
const data = await filesService.readOne('file_id');

LANGUAGE: javascript
CODE:
const data = await filesService.updateOne('file_id', { title: 'Random' });

LANGUAGE: javascript
CODE:
const data = await filesService.deleteOne('file_id');

----------------------------------------

TITLE: Updating One-to-Many Relationship (Cities) in JSON
DESCRIPTION: Demonstrates how to update a One-to-Many relationship for cities using JSON. This example shows assigning existing cities, creating new ones, and updating existing ones.

LANGUAGE: json
CODE:
{
  "cities": [
    2,
    {
      "name": "A new nested item"
    },
    {
      "id": 149,
      "name": "changed city name"
    }
  ]
}

----------------------------------------

TITLE: Function Parameters Example
DESCRIPTION: Demonstrates using date functions in filters to query by year and month.

LANGUAGE: javascript
CODE:
{
  _and: [
    {
      "year(published_date)": {
        _eq: 1968,
      },
    },
    {
      "month(published_date)": {
        _eq: 4,
      },
    },
  ],
}

----------------------------------------

TITLE: Complete Multi-User Chat Application with Directus Realtime
DESCRIPTION: The full HTML and JavaScript code for the multi-user chat application using Directus Realtime.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <body>
    <form id="login">
      <label for="email">Email</label>
      <input type="email" id="email" />
      <label for="password">Password</label>
      <input type="password" id="password" />
      <input type="submit" />
    </form>

    <ol></ol>

    <form id="new">
      <label for="message">Message</label>
      <input type="text" id="text" />
      <input type="submit" />
    </form>

    <script>
      import {
        createDirectus,
        authentication,
        realtime,
      } from 'https://www.unpkg.com/@directus/sdk/dist/index.js';

      const url = 'https://your-directus-url';

      const client = createDirectus(url)
        .with(authentication())
        .with(realtime());

      client.onWebSocket('message', function (data) {
        if (data.type == 'auth' && data.status == 'ok') {
          readAllMessages();
          subscribe('create');
        }

        if (data.type == 'items') {
          for (const item of data.data) {
            addMessageToList(item);
          }
        }
      });

      client.connect();

      document
        .querySelector('#login')
        .addEventListener('submit', function (event) {
          event.preventDefault();
          const email = event.target.elements.email.value;
          const password = event.target.elements.password.value;
          client.login(email, password);
        });

      document
        .querySelector('#new')
        .addEventListener('submit', function (event) {
          event.preventDefault();

          const text = event.target.elements.text.value;

          client.sendMessage({
            type: 'items',
            collection: 'messages',
            action: 'create',
            data: { text },
          });
        });

      async function subscribe(event) {
        const { subscription } = await client.subscribe('messages', {
          event,
          query: {
            fields: ['*', 'user_created.first_name'],
          },
        });

        for await (const message of subscription) {
          receiveMessage(message);
        }
      }

      function receiveMessage(data) {
        if (data.type == 'subscription' && data.event == 'init') {
          console.log('subscription started');
        }
        if (data.type == 'subscription' && data.event == 'create') {
          addMessageToList(message.data[0]);
        }
      }

      function addMessageToList(message) {
        const li = document.createElement('li');
        li.setAttribute('id', message.id);
        li.textContent = `${message.user_created.first_name}: ${message.text}`;
        document.querySelector('ol').appendChild(li);
      }
    </script>
  </body>
</html>


----------------------------------------

TITLE: Token Refresh Implementation
DESCRIPTION: Function to refresh authentication tokens using different authentication modes.

LANGUAGE: javascript
CODE:
export const refreshAuthToken = async () => {
    // refresh using the authentication composable
    await client.refresh();

    // refresh http request using a cookie
    await client.request(refresh('cookie'));

    // refresh http request using json
    await client.request(refresh('json', refresh_token));
}

----------------------------------------

TITLE: Logging Out in Directus
DESCRIPTION: Invalidate the refresh token and destroy the user's session. This can be done using REST, GraphQL, or the Directus SDK.

LANGUAGE: json
CODE:
// POST /auth/logout
{
  "refresh_token": "Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj..."
}

LANGUAGE: graphql
CODE:
mutation {
	auth_logout(refresh_token: "Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj...")
}

LANGUAGE: javascript
CODE:
import { createDirectus, authentication, rest, logout } from '@directus/sdk';

const client = createDirectus('directus_project_url').with(authentication()).with(rest());

const result = await client.logout();

----------------------------------------

TITLE: Deep Querying in Directus API
DESCRIPTION: Shows how to use the deep parameter to set query parameters on nested relational datasets.

LANGUAGE: http
CODE:
GET /items/posts
	?deep[translations][_filter][languages_code][_eq]=en-US

GET /items/posts
	?deep={ "translations": { "_filter": { "languages_code": { "_eq": "en-US" }}}}

LANGUAGE: graphql
CODE:
query {
	posts {
		translations(filter: { languages_code: { _eq: "en-US" } }) {
			id
		}
	}
}

LANGUAGE: js
CODE:
import { createDirectus, rest, readItems } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest());

const result = await directus.request(
	readItems('posts', {
		deep: {
			translations: {
				_filter: {
					languages_code: {
						_eq: 'en-US',
					},
				}
			},
		},
	})
);

----------------------------------------

TITLE: Detailed Update of One-to-Many Relationship in JSON
DESCRIPTION: Illustrates a detailed method for updating a One-to-Many relationship using JSON. This approach allows for more precise control over changes, specifying items to create, update, and delete.

LANGUAGE: json
CODE:
{
  "cities": {
    "create": [{ "name": "A new city" }],
    "update": [{ "id": 149, "name": "Update an existing city" }],
    "delete": [7]
  }
}

----------------------------------------

TITLE: CRUD Operations with CollectionsService in Directus
DESCRIPTION: Demonstrates Create, Read, Update, and Delete operations using the CollectionsService in Directus. Includes examples for creating, reading, updating, and deleting collections.

LANGUAGE: javascript
CODE:
const data = await collectionsService.createOne({
	name: 'articles',
	meta: {
		note: 'Blog posts.',
	},
});

LANGUAGE: javascript
CODE:
const data = await collectionsService.readOne('collection_name');

LANGUAGE: javascript
CODE:
const data = await collectionsService.updateOne('collection_name', {
	meta: {
		note: 'Updated blog posts.',
	},
});

LANGUAGE: javascript
CODE:
const data = await collectionsService.deleteOne('collection_name');

----------------------------------------

TITLE: CRUD Operations with FieldsService in Directus
DESCRIPTION: Shows Create, Read, Update, and Delete operations using the FieldsService in Directus. Includes examples for creating, reading, updating, and deleting fields within collections.

LANGUAGE: javascript
CODE:
await fieldsService.createField('collection_name', {
	field: 'title',
	type: 'string',
	meta: {
		icon: 'title',
	},
	schema: {
		default_value: 'Hello World',
	},
});

LANGUAGE: javascript
CODE:
const data = await fieldsService.readOne('collection_name', 'field_name');

LANGUAGE: javascript
CODE:
const data = await fieldsService.updateField('collection_name', 'field_name', {
	meta: {
		icon: 'title',
	},
});

LANGUAGE: javascript
CODE:
const data = await fieldsService.deleteField('collection_name', 'field_name');

----------------------------------------

TITLE: Using UIDs in WebSocket JSON Subscriptions
DESCRIPTION: Add a 'uid' property to subscription requests and responses to manage multiple ongoing CRUD actions and subscriptions.

LANGUAGE: json
CODE:
{
	"type": "subscribe",
	"collection": "messages",
	"uid": "any-string-value"
}

LANGUAGE: json
CODE:
{
	"type": "subscription",
	"event": "create",
	"data": [
		// ...
	],
	"uid": "any-string-value"
}

----------------------------------------

TITLE: Login View Implementation
DESCRIPTION: LoginView that handles user authentication by collecting credentials and making a POST request to Directus login endpoint. It manages access tokens and login state.

LANGUAGE: swift
CODE:
import SwiftUI

struct LoginData: Codable {
    let access_token: String
    let refresh_token: String
}
//... Rest of the LoginView implementation

----------------------------------------

TITLE: Creating HTML Boilerplate for Multi-User Chat Application
DESCRIPTION: Sets up the basic HTML structure for the chat application, including login form, message list, and new message form.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
	<body>
		<form id="login">
			<label for="email">Email</label>
			<input type="email" id="email" />
			<label for="password">Password</label>
			<input type="password" id="password" />
			<button type="submit">Submit</button>
		</form>

		<ol></ol>

		<form id="new">
			<label for="message">Message</label>
			<input type="text" id="text" />
			<button type="submit">Submit</button>
		</form>

		<script></script>
	</body>
</html>

----------------------------------------

TITLE: Updating Items via WebSocket in Directus
DESCRIPTION: Request format for updating existing items in a collection using WebSockets. Supports both single and multiple item updates.

LANGUAGE: json
CODE:
{
	"type": "items",
	"action": "update",
	"collection": "your_collection_name",
	"id": "single_item_id",
	"data": {
		// ...
	}
}

LANGUAGE: json
CODE:
{
	"type": "subscription",
	"event": "update",
	"data": [
		// ...
	]
}

----------------------------------------

TITLE: Using Aliases in Directus API
DESCRIPTION: Demonstrates how to use the alias parameter to rename fields and fetch the same nested data set multiple times with different filters.

LANGUAGE: http
CODE:
GET /items/posts
	?alias[all_translations]=translations
	&alias[dutch_translations]=translations
	&deep[dutch_translations][_filter][code][_eq]=nl-NL

LANGUAGE: graphql
CODE:
query {
	posts {
		dutch_translations: translations(filter: { code: { _eq: "nl-NL" } }) {
			id
		}

		all_translations: translations {
			id
		}
	}
}

LANGUAGE: js
CODE:
import { createDirectus, rest, readItems } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(staticToken()).with(rest());

const result = await directus.request(
	readItems('posts', {
		alias: {
			all_translations: 'translations',
			dutch_translations: 'translations',
		},
		deep: {
			dutch_translations: {
				_filter: {
					code: {
						_eq: 'nl-NL',
					},
				},
			},
		},
	})
);

----------------------------------------

TITLE: Create User API Endpoint in Directus
DESCRIPTION: API endpoint for creating a new user with email, password, and role assignment. Allows setting any field in the directus_users collection with proper permissions.

LANGUAGE: json
CODE:
{
  "email": "hello@example.com",
  "password": "d1r3ctu5",
  "role": "c86c2761-65d3-43c3-897f-6f74ad6a5bd7"
}

----------------------------------------

TITLE: Filtering Specific CRUD Actions in WebSocket JSON Subscription
DESCRIPTION: Use the 'event' argument to filter for specific CRUD actions (create, update, delete) when subscribing to collection changes.

LANGUAGE: json
CODE:
{
	"type": "subscribe",
	"collection": "messages",
	"event": "create"
}

----------------------------------------

TITLE: Implementing Schedule Hook
DESCRIPTION: Example of implementing a scheduled hook that runs on a defined time interval using cron syntax.

LANGUAGE: javascript
CODE:
export default ({ schedule }) => {
	schedule('*/15 * * * *', () => {
		console.log('15 minutes have passed.');
	});
};

----------------------------------------

TITLE: Fetching Items with useItems Composable in Vue for Directus Extensions
DESCRIPTION: Demonstrates how to use the useItems composable to retrieve items from a collection with pagination features. It shows how to set up the query, fetch items, and access the results.

LANGUAGE: html
CODE:
<script setup>
import { useItems } from '@directus/extensions-sdk';

const collectionRef = ref('collection_key');

const query = {
  fields: ref(['*']),
  limit: ref(1),
  sort: ref(null),
  search: ref(null),
  filter: ref(null),
  page: ref(1),
}

const { getItems, items } = useItems(collectionRef, query);

query.search.value = 'search_value' // update query search

query.limit.value = 10 // update query limit

await getItems(); // fetch the items

const data = items.value; // read the items
</script>

----------------------------------------

TITLE: Configuring Directus SDK Client in Next.js
DESCRIPTION: Sets up a Directus client using the SDK with cookie-based authentication for server-side rendering.

LANGUAGE: typescript
CODE:
import { authentication, createDirectus, rest } from '@directus/sdk';

const client = createDirectus("http://localhost:8055").with(rest()).with(authentication("cookie", { credentials: "include" }));

export default client;

----------------------------------------

TITLE: Implementing Directus Integration Functions
DESCRIPTION: Python functions to fetch data from Directus API, including global settings and collection items.

LANGUAGE: python
CODE:
import requests

DIRECTUS_API_ENDPOINT = "YOUR_DIRECTUS_INSTANCE_API_ENDPOINT"

def get_global_settings():
    response = requests.get(f"{DIRECTUS_API_ENDPOINT}/items/global")
    return response.json()

def get_collection_items(collection):
    response = requests.get(f"{DIRECTUS_API_ENDPOINT}/items/{collection}")
    return response.json()

----------------------------------------

TITLE: Subscribing to Collection Changes with WebSocket in JSON
DESCRIPTION: Send a JSON message over WebSocket connection to start a subscription to changes in a collection. The server responds with a confirmation message.

LANGUAGE: json
CODE:
{
	"type": "subscribe",
	"collection": "messages"
}

LANGUAGE: json
CODE:
{
	"type": "subscription",
	"event": "init"
}

----------------------------------------

TITLE: Aggregating Data in Directus API
DESCRIPTION: Shows how to use aggregate functions to perform calculations on a set of values, returning a single result.

LANGUAGE: http
CODE:
GET /items/posts
	?aggregate[count]=*

LANGUAGE: graphql
CODE:
query {
	posts_aggregated {
		countAll
	}
}

LANGUAGE: js
CODE:
import { createDirectus, rest, aggregate } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest());

const result = await directus.request(
	aggregate('posts', {
		aggregate: { count: '*' },
	})
);

----------------------------------------

TITLE: Generating 2FA Secret in Directus
DESCRIPTION: POST request to generate a 2FA secret. Requires the user's password and returns a secret and otpauth URL that can be used with authenticator apps.

LANGUAGE: json
CODE:
{
	"password": "d1r3ctu5"
}

----------------------------------------

TITLE: Connecting to Directus Realtime using SDK in HTML
DESCRIPTION: This snippet demonstrates how to create an HTML file that imports the Directus SDK from a CDN, creates a client with realtime capabilities, and establishes a connection. It requires replacing the Directus project URL and access token with actual values.

LANGUAGE: html
CODE:
<!doctype html>
<html>
	<body>
		<script>
			import { createDirectus, staticToken, realtime } from 'https://www.unpkg.com/@directus/sdk/dist/index.js';

			const directus = createDirectus('https://example.directus.app')
				.with(staticToken('your_access_token'))
				.with(realtime());

			await directus.connect();
		</script>
	</body>
</html>

----------------------------------------

TITLE: Customizing Endpoint Root Route in Directus (JavaScript)
DESCRIPTION: Shows how to export a configuration object to customize the root route and create multiple sub-routes for an endpoint.

LANGUAGE: javascript
CODE:
export default {
	id: 'greet',
	handler: (router, countext) => {
		router.get('/', (req, res) => res.send('Hello, World!'));
		router.get('/intro', (req, res) => res.send('Nice to meet you.'));
		router.get('/goodbye', (req, res) => res.send('Goodbye!'));
	},
};

----------------------------------------

TITLE: Implementing Basic Event Hooks in Directus
DESCRIPTION: Basic example showing how to implement filter and action hooks for item creation events in Directus.

LANGUAGE: javascript
CODE:
export default ({ filter, action }) => {
	filter('items.create', () => {
		console.log('Creating Item!');
	});

	action('items.create', () => {
		console.log('Item created!');
	});
};

----------------------------------------

TITLE: TypeScript Implementation with Sandbox Hook Types
DESCRIPTION: Example showing how to implement hooks with TypeScript type definitions in a sandboxed environment.

LANGUAGE: typescript
CODE:
/// <reference types="@directus/extensions/api.d.ts" />
import type { SandboxHookRegisterContext } from 'directus:api';

export default ({ filter, action }: SandboxHookRegisterContext) => {
};

----------------------------------------

TITLE: Fetching Global Metadata in Astro Page
DESCRIPTION: TypeScript code for an Astro page that fetches global metadata from Directus and displays it. It uses the Directus SDK to read a singleton collection.

LANGUAGE: typescript
CODE:
---
import Layout from "../layouts/Layout.astro";
import directus from "../lib/directus";
import { readSingleton } from "@directus/sdk";

const global = await directus.request(readSingleton("global"));
---

<Layout title={global.title}>
  <main>
    <div>
      <h1>{global.title}</h1>
      <p>{global.description}</p>
    </div>
  </main>
</Layout>

----------------------------------------

TITLE: WebSocket Authentication with Refresh Token
DESCRIPTION: JSON payload structure for WebSocket authentication using a refresh token in handshake mode.

LANGUAGE: json
CODE:
{
	"type": "auth",
	"refresh_token": "token"
}

----------------------------------------

TITLE: Creating a New Featured Article (Many-to-One) in JSON
DESCRIPTION: Demonstrates how to create a new featured article in a Many-to-One relationship using JSON. This creates a new record in the related collection and saves its primary key in the featured_article field.

LANGUAGE: json
CODE:
{
  "featured_article": {
    "title": "This is my new article!"
  }
}

----------------------------------------

TITLE: Implementing Up and Down Migration Functions in JavaScript
DESCRIPTION: This snippet demonstrates the structure of a Directus migration file, including the 'up' function to create a table and the 'down' function to drop it. It uses Knex.js for database operations.

LANGUAGE: javascript
CODE:
export async function up(knex) {
	await knex.schema.createTable('test', (table) => {
		table.increments();
		table.string('rijk');
	});
}

export async function down(knex) {
	await knex.schema.dropTable('test');
}

----------------------------------------

TITLE: Initializing Directus Realtime Connection and Subscription
DESCRIPTION: Demonstrates setting up a Directus client with realtime capabilities, authenticating with an access token, and subscribing to a messages collection. The code establishes a connection and uses an async iterator to process incoming realtime updates.

LANGUAGE: typescript
CODE:
import { createDirectus, realtime } from '@directus/sdk'
const directus = createDirectus('https://directus.example.com').with(realtime());

await directus.setToken('access_token');
await directus.connect();

const { subscription } = await directus.subscribe('messages');

for await (const item of subscription) {
	console.log(item);
};

----------------------------------------

TITLE: Building the Panel View Template in panel.vue
DESCRIPTION: Create the Vue template for the panel, including the form, submit button, and response dialog.

LANGUAGE: vue
CODE:
<template>
  <div v-if="!hasPermission" class="panel-error">
    <v-notice type="danger" icon="warning">You do not have permissions to {{ collection }}</v-notice>
  </div>
  <div v-else :class="['panel-internal-form', { small: width < 30, large: width >= 30, 'has-header': showHeader }]">
    <v-form v-if="fieldData" :fields="fieldData" v-model="formData" />
    <v-button v-if="Object.keys(formData).length > 0" @click="submitForm()">Save</v-button>
    <v-button v-else secondary>Save</v-button>

    <v-dialog v-model="responseDialog" @esc="responseDialog = false">
      <v-sheet>
        <v-notice type="success" icon="done" v-if="formResponse[primaryKeyField.field]">Saved</v-notice>
        <v-notice type="danger" icon="warning" v-else-if="formError">An Error Occurred</v-notice>
        <v-notice type="danger" icon="warning" v-else>No Response</v-notice>
        <blockquote v-if="formResponse" class="form-response">
          <router-link :to="getLinkForItem(formResponse)">
            <render-template
              :collection="collection"
              :template="responseFormat"
              :item="formResponse"
            />
            <v-icon name="launch" small />
          </router-link>
        </blockquote>
        <blockquote v-else-if="formError" class="">
          {{ formError }}
        </blockquote>
        <v-button @click="responseDialog = false">Done</v-button>
      </v-sheet>
    </v-dialog>
  </div>
</template>

----------------------------------------

TITLE: Register User API Endpoint in Directus
DESCRIPTION: API endpoint for registering a new user with email and password. This endpoint only supports first_name and last_name fields to be set.

LANGUAGE: json
CODE:
{
  "email": "hello@example.com",
  "password": "d1r3ctu5"
}

----------------------------------------

TITLE: Defining Root Schema Type in TypeScript for Directus SDK
DESCRIPTION: Demonstrates how to define the root schema type for the Directus SDK, including regular collections as array types and singleton collections as singular types.

LANGUAGE: typescript
CODE:
interface MySchema {
	// regular collections are array types
	collection_a: CollectionA[];
	// singleton collections are singular types
	collection_c: CollectionC;
}

----------------------------------------

TITLE: Creating Items via Directus Realtime Connection
DESCRIPTION: This JavaScript function demonstrates how to create new items in the 'messages' collection using the Directus Realtime connection. It sends a message over the connection with the item data to be created.

LANGUAGE: javascript
CODE:
function createItem(text, user) {
	directus.sendMessage({
		type: 'items',
		collection: 'messages',
		action: 'create',
		data: { text, user },
	});
}

----------------------------------------

TITLE: GraphQL Client Setup for Handshake Mode
DESCRIPTION: Implementation of GraphQL client creation with access token authentication for handshake mode.

LANGUAGE: javascript
CODE:
import { createClient } from "graphql-ws";

const client = createClient({
	url: "ws://your-directus-url/graphql",
	keepAlive: 30000,
	connectionParams: async () => {
		return { access_token: "MY_TOKEN" };
	},
});

----------------------------------------

TITLE: Writing Blackbox Tests in Directus
DESCRIPTION: Example of writing blackbox tests for the Directus server ping endpoint. Demonstrates testing both REST and GraphQL endpoints across different database vendors.

LANGUAGE: typescript
CODE:
import { getUrl } from '@common/config';
import request from 'supertest';
import vendors from '@common/get-dbs-to-test';
import { requestGraphQL } from '@common/transport';

describe('/server', () => {
	describe('GET /ping', () => {
		it.each(vendors)('%s', async (vendor) => {
			// Action
			const response = await request(getUrl(vendor))
				.get('/server/ping')
				.expect('Content-Type', /text\/html/)
				.expect(200);

			const gqlResponse = await requestGraphQL(getUrl(vendor), true, null, {
				query: {
					server_ping: true,
				},
			});

			// Assert
			expect(response.text).toBe('pong');
			expect(gqlResponse.body.data.server_ping).toBe('pong');
		});
	});
});

----------------------------------------

TITLE: Using useApi Composable in Vue for Directus Extensions
DESCRIPTION: Demonstrates how to use the useApi composable to make authorized API requests from a Directus app extension. It wraps the axios library and uses the Data Studio's session cookie.

LANGUAGE: html
CODE:
<script setup>
import { useApi } from '@directus/extensions-sdk';
const api = useApi();

async function fetchData() {
    const response = await api.get('ENDPOINT_URL');
    data.value = response.data;
};
</script>

----------------------------------------

TITLE: Creating Individual Blog Post Pages with Directus in Next.js
DESCRIPTION: React component for rendering individual blog post pages. It fetches detailed post data from Directus, including related image and author information.

LANGUAGE: jsx
CODE:
import directus from '@/lib/directus';
import { readItems } from '@directus/sdk';
import { notFound } from 'next/navigation';

async function getPost(slug) {
	try {
		const posts = await directus.request(
			readItems('posts', {
				fields: ['*', { slug, image: ['filename_disk'], author: ['name'] }],
			})
		);

		return posts[0];
	} catch (error) {
		notFound();
	}
}

export default async function DynamicPage({ params }) {
	const post = await getPost(params.slug);
	return (
		<>
			<img src={`${directus.url}assets/${post.image.filename_disk}?width=600`} alt="" />
			<h1>{post.title}</h1>
			<div dangerouslySetInnerHTML={{ __html: post.content }}></div>
		</>
	);
}

----------------------------------------

TITLE: Extending Core Collections with Custom Fields in Directus SDK
DESCRIPTION: Shows how to add custom fields to core Directus collections by defining a type containing only the custom fields as a singular type.

LANGUAGE: typescript
CODE:
interface MySchema {
	// regular collections are array types
	collection_a: CollectionA[];
	// singleton collections are singular types
	collection_c: CollectionC;
	// extend the provided DirectusUser type
	directus_users: CustomUser;
}

interface CustomUser {
	custom_field: string;
}

----------------------------------------

TITLE: Installing Directus SDK in Next.js Project
DESCRIPTION: Installs the Directus SDK package in the Next.js project using npm.

LANGUAGE: bash
CODE:
npm install @directus/sdk

----------------------------------------

TITLE: Executing Custom Script in Directus Flow
DESCRIPTION: Demonstrates how to use the Run Script operation to execute custom JavaScript or TypeScript code within a Directus flow. The example shows how to access data from previous operations and return a modified result.

LANGUAGE: typescript
CODE:
module.exports = function (data) {
	return {
		timesTwo: data.previousOperation.value * 2,
	};
};

----------------------------------------

TITLE: Handling Collection Changes in WebSocket JSON Format
DESCRIPTION: Example of a JSON message received when a change occurs in a subscribed collection. The event type can be 'create', 'update', or 'delete'.

LANGUAGE: json
CODE:
{
	"type": "subscription",
	"event": "create",
	"data": [
		// ...
	]
}

----------------------------------------

TITLE: Searching in Directus API
DESCRIPTION: Demonstrates how to use the search parameter to search on all string and text type fields within a collection.

LANGUAGE: http
CODE:
GET /items/posts
	?search=Directus

LANGUAGE: graphql
CODE:
query {
	posts(search: "Directus") {
		id
	}
}

LANGUAGE: js
CODE:
import { createDirectus, rest, readItems } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest());

const result = await directus.request(
	readItems('posts', {
		search: 'Directus',
	})
);

----------------------------------------

TITLE: Creating Vue Component for Directus Interface
DESCRIPTION: This snippet shows how to create a Vue component for a Directus interface. It includes template structure, props definition, and emitting changes back to Directus.

LANGUAGE: vue
CODE:
<template>
	<input :value="value" @input="handleChange($event.target.value)" />
	<span>{{ text }}</span>
</template>

<script setup>
defineProps(['text', 'value']);
const emit = defineEmits(['input']);

function handleChange(value) {
  emit('input', value);
}
</script>

----------------------------------------

TITLE: Creating Protected Dashboard Page in Next.js
DESCRIPTION: Implements a protected dashboard page that checks for user authentication and displays user-specific data and posts.

LANGUAGE: typescript
CODE:
import { getUserData } from '@/lib/dal'; // Import your DAL function
import client from '@/lib/directus';
import { readItems } from '@directus/sdk';

export default async function Dashboard() {
    const response = await getUserData();

    const posts = await client.request(readItems("posts"));

    return (
        <main>
            <h1>Welcome!</h1>
            <p>Your id: {response?.user?.id}</p>
            <section>
                <h2>Posts</h2>
                {posts.length > 0 ? (
                    <ul>
                        {posts.map((post) => (
                            <li key={post.id}>
                                <h3>{post.title}</h3>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p>No posts available.</p>
                )}
            </section>
        </main>
    );
}

----------------------------------------

TITLE: Defining Collection Field Types in Directus SDK
DESCRIPTION: Illustrates how to define field types for a collection, including primitive types and special literal types for CSV, JSON, and datetime fields.

LANGUAGE: typescript
CODE:
interface CollectionA {
	id: number;
	status: string;
	toggle: boolean;

	tags: 'csv';
	json_field: 'json';
	date_created: 'datetime';
}

----------------------------------------

TITLE: Initializing Directus Extension
DESCRIPTION: Command to create a new Directus extension using the CLI tool

LANGUAGE: shell
CODE:
npx create-directus-extension@latest

----------------------------------------

TITLE: Basic File Transformation using REST API
DESCRIPTION: Demonstrates how to transform an image using basic parameters like width, height, quality and fit through REST API endpoint

LANGUAGE: http
CODE:
GET /assets/c984b755-e201-497e-b0a7-24156ad9c7e0
	?width=300
	&height=300
	&quality=50
	&fit=contain

----------------------------------------

TITLE: Configuring SMTP Transport in Directus
DESCRIPTION: This snippet shows the environment variables used to configure SMTP transport in Directus. It includes settings for the SMTP server, authentication, and security options.

LANGUAGE: markdown
CODE:
| Variable                | Description           | Default Value |
| ----------------------- | --------------------- | ------------- |
| `EMAIL_SMTP_HOST`       | SMTP server host.     |               |
| `EMAIL_SMTP_PORT`       | SMTP server port.     |               |
| `EMAIL_SMTP_USER`       | SMTP user.            |               |
| `EMAIL_SMTP_PASSWORD`   | SMTP password.        |               |
| `EMAIL_SMTP_POOL`       | Use SMTP pooling.     |               |
| `EMAIL_SMTP_SECURE`     | Enable TLS.           |               |
| `EMAIL_SMTP_IGNORE_TLS` | Ignore TLS.           |               |
| `EMAIL_SMTP_NAME`       | SMTP client hostname. |               |

----------------------------------------

TITLE: Configuring Email Transport Variables in Directus
DESCRIPTION: This snippet shows the environment variables used to configure the email transport method in Directus. It includes options for verifying the email setup and selecting the transport type.

LANGUAGE: markdown
CODE:
| Variable             | Description                                                              | Default Value |
| -------------------- | ------------------------------------------------------------------------ | ------------- |
| `EMAIL_VERIFY_SETUP` | Check if email setup is properly configured.                             | `true`        |
| `EMAIL_TRANSPORT`    | What to use to send emails. One of `sendmail`, `smtp`, `mailgun`, `ses`. | `sendmail`    |

----------------------------------------

TITLE: Implementing Functional Display Component
DESCRIPTION: Example of creating a simplified display using a functional component approach, suitable for basic value transformations without needing a full Vue component.

LANGUAGE: javascript
CODE:
import { defineInterface } from '@directus/extensions-sdk'

export default defineInterface({
	id: 'custom',
	name: 'Custom',
	icon: 'box',
	description: 'This is my custom display!',
	component: function ({ value }) {
		return value.toLowerCase();
	},
	options: null,
	types: ['string'],
});

----------------------------------------

TITLE: Deleting Algolia Index Objects on Directus Item Deletion (JavaScript)
DESCRIPTION: Implements a Directus action hook that removes objects from the Algolia index when posts are deleted in Directus.

LANGUAGE: javascript
CODE:
action('posts.items.delete', async (meta) => {
    await index.deleteObjects(meta.keys);
});

----------------------------------------

TITLE: Implementing User Login in SvelteKit
DESCRIPTION: Creates a login form component that authenticates users using Directus SDK.

LANGUAGE: javascript
CODE:
<!-- src/routes/login/+page.svelte -->
<script>
  import { client, isAuthenticated } from "../../lib/directus.js";
  import { goto } from "$app/navigation";

  let email = "";
  let password = "";
  let error = null;

  async function handleLogin() {
    try {
      // Call the login method directly from the client
      const result = await client.login(email, password);
      console.log("Login successful:", result);

      // Check if the user is authenticated
      const authStatus = await isAuthenticated();
      console.log("Authentication status:", authStatus);

      if (authStatus.authenticated) {
        goto("/protected");
      } else {
        error = "Failed to authenticate. Please try again.";
      }
    } catch (err) {
      if (err.response?.status === 403) {
        error = "Invalid email or password.";
      } else {
        error = err.message || "Login failed.";
      }
      console.error("Login error:", err);
    }
  }
</script>

<div>
  <h1 style="color: #000;">Welcome Back</h1>

  {#if error}
    <div>
      <p>{error}</p>
    </div>
  {/if}

  <form on:submit|preventDefault={handleLogin}>
    <div>
      <input
        type="email"
        bind:value={email}
        placeholder="Email"
        required
        autocomplete="email"
      />
    </div>
    <div>
      <input
        type="password"
        bind:value={password}
        placeholder="Password"
        required
      />
    </div>
    <button type="submit">Sign In</button>
  </form>

  <p style="color: #000;">
    Don't have an account? <a href="/register">Register here</a>
  </p>
</div>

----------------------------------------

TITLE: Initializing Flutter Project
DESCRIPTION: Commands to create a new Flutter project and run the application.

LANGUAGE: bash
CODE:
flutter create my_directus_app

LANGUAGE: bash
CODE:
cd my_directus_app && flutter run

----------------------------------------

TITLE: Directus Schema Definition
DESCRIPTION: TypeScript interface definitions for Directus data schema.

LANGUAGE: typescript
CODE:
/// <reference types="@directus/extensions/api.d.ts" />

interface DirectusSchema {
	posts: Post[];
}

interface Post {
	id: number;
	title: string;
	content: string;
	user_created: string;
}

----------------------------------------

TITLE: Accessing Files via URL in Directus
DESCRIPTION: This snippet demonstrates the URL pattern for accessing files in Directus. It includes the base URL, file ID, and an optional access token for authentication.

LANGUAGE: plaintext
CODE:
https://example.directus.app/assets/<file-id>?access_token=token

----------------------------------------

TITLE: Configuring Email Templates in Directus
DESCRIPTION: This snippet shows the environment variables used to configure email templates in Directus. It includes settings for the sender's email address and the path to custom templates.

LANGUAGE: markdown
CODE:
| Variable               | Description                               | Default Value          |
| ---------------------- | ----------------------------------------- | ---------------------- |
| `EMAIL_FROM`           | Email address from which emails are sent. | `no-reply@example.com` |
| `EMAIL_TEMPLATES_PATH` | Where custom templates are located        | `./templates`          |

----------------------------------------

TITLE: Complete URL for Accessing Transformed Image in Directus
DESCRIPTION: This snippet provides a complete URL example for accessing a transformed image in Directus, including the file ID, access token, and width transformation parameter.

LANGUAGE: plaintext
CODE:
https://example.directus.app/assets/<file-id>?access_token=token&width=200

----------------------------------------

TITLE: Defining Directus Module Extension Entrypoint
DESCRIPTION: Example of creating a module extension entrypoint using the Directus extensions SDK. Demonstrates how to define module ID, name, icon and routes.

LANGUAGE: javascript
CODE:
import { defineInterface } from '@directus/extensions-sdk'
import ModuleComponent from './module.vue';

export default defineInterface({
	id: 'custom',
	name: 'Custom',
	icon: 'box',
	routes: [
		{
			path: '',
			component: ModuleComponent,
		},
	],
});

----------------------------------------

TITLE: Configuring Payload for Update Operation in Directus Flow
DESCRIPTION: JSON payload to set the status of an article to 'published' when updating items in a Directus flow operation.

LANGUAGE: json
CODE:
{
	"status": "published"
}

----------------------------------------

TITLE: Initializing Directus Client in React
DESCRIPTION: Setting up the Directus SDK client for React application

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from '@directus/sdk';

const BACKEND_URL = "http://localhost:8055/"

const client = createDirectus(BACKEND_URL)
  .with(rest({credentials: 'include'}));

export default client;

----------------------------------------

TITLE: Creating a Deployment for Directus
DESCRIPTION: This YAML defines a Kubernetes Deployment for Directus. It specifies the deployment strategy, pod template, and container details including image, port, and environment variables.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: directus-deployment
  labels:
    app: directus
spec:
  selector:
    matchLabels:
      app: directus
  template:
    metadata:
      labels:
        app: directus
    spec:
      containers:
      - name: directus
        image: directus:10.9.3
        ports:
          - containerPort: 80
        env:
          - name: PUBLIC_URL
            value: https://directus.app

----------------------------------------

TITLE: Setting up Directus Client
DESCRIPTION: TypeScript configuration for initializing Directus client with authentication

LANGUAGE: typescript
CODE:
/// <reference types="vite/client" />
import { createDirectus, rest, authentication } from '@directus/sdk';

const DIRECTUS_URL = import.meta.env.DIRECTUS_URL;

const client = createDirectus(DIRECTUS_URL).with(rest()).with(authentication('cookie'));

export default client;

----------------------------------------

TITLE: Initializing a Directus Extension using NPX
DESCRIPTION: Run a command in the terminal to initialize a new Directus extension, following prompts to set up the extension type, name, and language.

LANGUAGE: bash
CODE:
npx create-directus-extension@latest
? Choose the extension type: endpoint
? Choose a name for the extension: my-first-endpoint
? Choose the language to use: javascript
? Auto install dependencies?: Yes

----------------------------------------

TITLE: Configuring AWS SES Transport in Directus
DESCRIPTION: This snippet shows the environment variables used to configure AWS SES (Simple Email Service) transport in Directus. It includes settings for AWS credentials and region.

LANGUAGE: markdown
CODE:
| Variable                                   | Description                 | Default Value |
| ------------------------------------------ | --------------------------- | ------------- |
| `EMAIL_SES_CREDENTIALS__ACCESS_KEY_ID`     | Your AWS SES access key ID. |               |
| `EMAIL_SES_CREDENTIALS__SECRET_ACCESS_KEY` | Your AWS SES secret key.    |               |
| `EMAIL_SES_REGION`                         | Your AWS SES region.        |               |

----------------------------------------

TITLE: Using Request Scope in Sandbox
DESCRIPTION: Implementation of HTTP request functionality in sandboxed environment with required scope configuration and URL patterns.

LANGUAGE: javascript
CODE:
import { request } from 'directus:api';

const getRequest = await request('https://directus.io');

const postRequest = await request('https://directus.io', {
  method: 'POST',
  headers: { Authorization: 'Bearer 1234567890' },
  body: { key: 'value' }
});

LANGUAGE: json
CODE:
"requestedScopes": {
  "request": {
    "methods": ["GET", "POST"],
    "urls": ["https://directus.io/*"]
  }
}

----------------------------------------

TITLE: Retrieving Item and Page Count with useItems in Vue for Directus Extensions
DESCRIPTION: Shows how to use the useItems composable to fetch the item count and total pages for a collection in a Directus project.

LANGUAGE: html
CODE:
<script setup>
import { useItems } from '@directus/extensions-sdk';

const collectionRef = ref('collection_key')

const { getItemCount, itemCount, totalPages } = useItems(collectionRef);

await getItemCount(); // fetch the item count

const data = itemCount.value; // read the item count

const pages = totalPages.value; // read the total pages
</script>

----------------------------------------

TITLE: Fetching Dynamic Page Data in Nuxt
DESCRIPTION: Creates a dynamic Nuxt page that fetches content from Directus based on the URL slug and renders it using the Page component.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { $directus, $readItems } = useNuxtApp()
const route = useRoute()
const page: Ref<Page | null> = ref(null)

const { data, error } = await useAsyncData('post', async () => {
	const slugParam = Array.isArray(route.params.slug) ? route.params.slug[0] : route.params.slug
	return $directus.request($readItems('pages', {
		filter: {
			slug: { _eq: slugParam },
		},
		fields: ['title', 'slug', 'blocks.id', 'blocks.collection', 'blocks.item.*'],
		limit: 1
	}))
})

if (error.value || data.value === null || data.value.length === 0) {
	console.error(error)
	throw createError({
		statusCode: 404,
		statusMessage: "Page not found"
	})
}

page.value = data.value[0]
</script>
<template>
	<Page v-if="page" :title="page.title" :blocks="page.blocks"></Page>
	<div v-else>Loading...</div>
</template>

----------------------------------------

TITLE: Initializing Directus SDK
DESCRIPTION: Configuration code for setting up Directus SDK client in the SvelteKit application

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from '@directus/sdk';
const client = createDirectus('directus_project_url').with(rest());

----------------------------------------

TITLE: Rendering Dynamic Page Content in SvelteKit
DESCRIPTION: Displays dynamic page content fetched from Directus in a Svelte component.

LANGUAGE: svelte
CODE:
<script>
	/** @type {import('./$types').PageData} */
	export let data;
</script>


<h1>{data.page.title}</h1>
<div>{@html data.page.content}</div>

----------------------------------------

TITLE: Create Post View Implementation
DESCRIPTION: CreatePostView that allows users to create new posts by collecting title and content and making an authenticated POST request to Directus posts endpoint.

LANGUAGE: swift
CODE:
import SwiftUI

struct CreatePostView: View {
    @State private var title: String = ""
    @State private var content: String = ""
    let accessToken: String
    //... Rest of the CreatePostView implementation

----------------------------------------

TITLE: WebSocket Authentication with Access Token
DESCRIPTION: JSON payload structure for WebSocket authentication using an access token in handshake mode.

LANGUAGE: json
CODE:
{
	"type": "auth",
	"access_token": "your-access-token"
}

----------------------------------------

TITLE: Managing Collections with useCollectionsStore in Vue for Directus Extensions
DESCRIPTION: Demonstrates how to use the useCollectionsStore for CRUD operations on collections, retrieving translations, and accessing all or visible collections in a Directus project.

LANGUAGE: html
CODE:
<script setup>
import { useStores } from '@directus/extensions-sdk';
const { useCollectionsStore } = useStores();
const collectionsStore = useCollectionsStore();

// get all collections
collectionsStore.collections.value;

// get all visible collections
collectionsStore.visibleCollections.value;

// get a collection
collectionStore.getCollection('collection_key');

// delete a collection
await collectionStore.deleteCollection('collection_key');

// upsert (create or update) a collection
await collectionStore.upsertCollection('collection_key', {...});
</script>

----------------------------------------

TITLE: Updating M2A Field Request in Directus 11
DESCRIPTION: Demonstrates how to properly request Many-to-Any (M2A) fields in Directus 11, which now requires specifying the collection name. This change affects both REST and GraphQL queries at any level.

LANGUAGE: http
CODE:
GET https://example.directus.app/items/example?fields=items.item:m2a_collection.m2a_field

----------------------------------------

TITLE: Setting GitHub Issue Payload in Directus Automate
DESCRIPTION: This JSON snippet defines the payload for creating a GitHub issue using the GitHub API within a Directus Automate flow. It sets the issue title from a trigger input and the body from a feedback item's content.

LANGUAGE: json
CODE:
{
	"title": "{{$trigger.body.title}}",
    "body": ">{{feedback.content}}"
}

----------------------------------------

TITLE: Implementing Preview Mode Load Function
DESCRIPTION: Server-side load function for handling preview mode, authentication, and data fetching in SvelteKit

LANGUAGE: javascript
CODE:
import { error } from "@sveltejs/kit";
import { client } from "$lib/directus";
import { readItem } from "@directus/sdk";

export async function load({ params, url }) {
  const preview = url.searchParams.get("preview") === "true";
  const version = url.searchParams.get("version");
  const token = url.searchParams.get("auth_token");

  console.log("load function called");
  console.log("Params:", params);
  console.log("Preview Mode:", preview);
  console.log("Version:", version);

  try {
    if (preview) {
      // Replace <your token> with your authentication token
      if (token && token !== "<your token>") {
        console.error("Invalid auth token");
        throw error(401, "Invalid auth token");
      }
      console.log("Token validation successful");
    } else {
      console.log("Skipping token validation (not in preview mode)");
    }

    const queryFilters = {
      fields: ["title", "content", "slug", "published"],
      ...(version && { version }),
    };

    const headers = token
      ? { headers: { Authorization: `Bearer ${token}` } }
      : {};

    const post = await client.request(
      readItem("posts", params.id, {
        ...queryFilters,
        ...headers,
      })
    );

    console.log("Post Data:", post);

    if (!post) {
      console.error("Post not found");
      throw error(404, "Post Not Found");
    }

    return {
      post,
      preview,
      version,
    };
  } catch (err) {
    console.error("Error in load function:", err.message || err);
    if (err.response) {
      console.error("Directus Error Response:", err.response);
      console.error("Directus Error Data:", err.response.data);
    }
    throw error(500, err.message || "Internal Server Error");
  }
}

----------------------------------------

TITLE: Environment Type Definitions
DESCRIPTION: TypeScript type definitions for environment variables used in the Nuxt application

LANGUAGE: typescript
CODE:
/// <reference types="vite/client" />
interface ImportMetaEnv {
	readonly API_URL: string;
}
  
interface ImportMeta {
	readonly env: ImportMetaEnv;
}

----------------------------------------

TITLE: Fetching Individual Blog Post from Directus
DESCRIPTION: Loads a single blog post with all related data from Directus in a SvelteKit dynamic route.

LANGUAGE: javascript
CODE:
/** @type {import('./$types').PageLoad} */
import { error } from '@sveltejs/kit';
import getDirectusInstance from '$lib/directus';
import { readItems } from '@directus/sdk';
export async function load({ fetch, params }) {
	const directus = getDirectusInstance(fetch);
	try {
		return {
			post: await directus.request(readItems('posts', {
				fields: ['*', { slug: params.slug, '*': ['*'] }],
			}))[0],
		};
	} catch (err) {
		error(404, 'Post not found');
	}
}

----------------------------------------

TITLE: User Registration View Implementation
DESCRIPTION: UserRegisterView that handles new user registration by collecting email and password and making a POST request to Directus register endpoint.

LANGUAGE: swift
CODE:
import SwiftUI

struct UserRegisterView: View {
    @Binding var isActive: Bool
    @State private var email: String = ""
    @State private var password: String = ""
    //... Rest of the UserRegisterView implementation

----------------------------------------

TITLE: Using UIDs in WebSocket Operations
DESCRIPTION: Example of using unique identifiers in WebSocket requests to track corresponding responses. The UID is echoed back in the response message.

LANGUAGE: json
CODE:
{
	"type": "items",
	"action": "read",
	"collection": "your_collection_name",
	"query": {
		"sort": "date_created"
	},
	"uid": "sorted_latest_first"
}

LANGUAGE: json
CODE:
{
	"type": "items",
	"data": {
		// ...
	},
	"uid": "sorted_latest_first"
}

----------------------------------------

TITLE: Defining Directus Layout Entrypoint in JavaScript
DESCRIPTION: Example of defining a custom layout entrypoint using the Directus extensions SDK. Shows configuration of layout ID, name, icon, component references, and optional slot definitions.

LANGUAGE: javascript
CODE:
import { ref } from 'vue';
import { defineInterface } from '@directus/extensions-sdk'
import LayoutComponent from './layout.vue';

export default defineInterface({
	id: 'custom',
	name: 'Custom',
	icon: 'box',
	component: LayoutComponent,
	slots: {
		options: () => null,
		sidebar: () => null,
		actions: () => null,
	},
	setup() {
		const name = ref('Custom Layout');
		return { name };
	},
});

----------------------------------------

TITLE: Creating Blog Post Listing with Directus in Next.js
DESCRIPTION: React component that fetches and displays a list of blog posts from Directus. It demonstrates how to use the Directus SDK to retrieve specific fields and related data.

LANGUAGE: jsx
CODE:
import directus from '@/lib/directus';
import { readItems } from '@directus/sdk';

async function getPosts() {
	return directus.request(
		readItems('posts', {
			fields: ['slug', 'title', 'publish_date', { author: ['name'] }],
			sort: ['-publish_date'],
		})
	);
}

export default async function DynamicPage() {
	const posts = await getPosts();
	return (
		<div>
			<h1>Blog</h1>
			<ul>
				{posts.map((post) => {
					return (
						<li key={post.slug}>
							<h2>
							<a href={`/blog/${post.slug}`}>
								{post.title}
							</a>
							</h2>
							<span>
								{post.publish_date} &bull; {post.author.name}
							</span>
						</li>
					);
				})}
			</ul>
		</div>
	);
}

----------------------------------------

TITLE: Configuring Hashing in Directus
DESCRIPTION: Environment variables for configuring the Argon2 hashing function used in Directus for password hashing and the Hash field type.

LANGUAGE: markdown
CODE:
| Variable               | Description                                                                                                                      | Default Value       |
| ---------------------- | -------------------------------------------------------------------------------------------------------------------------------- | ------------------- |
| `HASH_MEMORY_COST`     | How much memory to use when generating hashes, in KiB.                                                                           | `4096` (4 MiB)      |
| `HASH_LENGTH`          | The length of the hash function output in bytes.                                                                                 | `32`                |
| `HASH_TIME_COST`       | The amount of passes (iterations) used by the hash function. It increases hash strength at the cost of time required to compute. | `3`                 |
| `HASH_PARALLELISM`     | The amount of threads to compute the hash on. Each thread has a memory pool with `HASH_MEMORY_COST` size.                        | `1` (single thread) |
| `HASH_TYPE`            | The variant of the hash function (`0`: argon2d, `1`: argon2i, or `2`: argon2id).                                                 | `2` (argon2id)      |
| `HASH_ASSOCIATED_DATA` | An extra and optional non-secret value. The value will be included Base64 encoded in the parameters portion of the digest.       |                     |

----------------------------------------

TITLE: Updating a Relation in Directus
DESCRIPTION: Illustrates updating a relation's properties using RelationsService. It updates the 'one_field' metadata for a specific relation and returns the updated data.

LANGUAGE: javascript
CODE:
router.patch('/', async (req, res) => {
  const relationsService = new RelationsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  const data = await relationsService.updateOne(
    'collection_name',
    'field_name',
    {
      meta: {
        one_field: 'articles',
      },
    },
  );

  res.json(data);
});

----------------------------------------

TITLE: Testing Directus Plugin in Nuxt
DESCRIPTION: Script to test the Directus plugin in the Nuxt app entry file.

LANGUAGE: vue
CODE:
<script setup>
const { $directus } = useNuxtApp();
console.log($directus);
</script>

----------------------------------------

TITLE: Implementing Dynamic Routing for Multilingual Content in SvelteKit
DESCRIPTION: Fetches and loads multilingual content based on language and slug parameters using Directus SDK.

LANGUAGE: javascript
CODE:
import { client } from "$lib/directus";
import { error } from "@sveltejs/kit";
import { readItems } from "@directus/sdk";

export async function load({ params }) {
  const { lang, slug } = params;

  console.log("Attempting to fetch:", { lang, slug });

  try {
    const result = await client.request(
      readItems("posts", {
        fields: [
          "*",
          {
            translations: ["*", "languages_code"],
          },
        ],
        filter: {
          slug: {
            _eq: slug,
          },
        },
      })
    );

    console.log("Full API Response:", result);

    if (!result?.length) {
      throw error(404, "Post not found");
    }

    const post = result[0];
    console.log("Post translations:", post.translations);

    const translation =
      post.translations?.find((t) => t.languages_code === lang) || null;

    console.log("Found translation:", translation);

    if (!translation && lang === "en-US") {
      return {
        post: {
          ...post,
          currentTranslation: {
            title: post.title,
            content: post.content,
            languages_code: "en-US",
          },
        },
        lang,
      };
    }

    if (!translation) {
      throw error(404, `Translation not found for language: ${lang}`);
    }

    return {
      post: {
        ...post,
        currentTranslation: translation,
      },
      lang,
    };
  } catch (err) {
    console.error("Detailed error:", {
      message: err.message,
      stack: err.stack,
      name: err.name,
      cause: err.cause,
    });
    throw error(500, {
      message: "Failed to fetch post",
      details: err.message,
    });
  }
}

----------------------------------------

TITLE: Verify Email Registration in Directus
DESCRIPTION: API endpoint for verifying email registration using a verification token.

LANGUAGE: json
CODE:
{
  "token": "eyJh...KmUk"
}

----------------------------------------

TITLE: Using useFieldsStore for Field Operations in Vue for Directus Extensions
DESCRIPTION: Demonstrates how to use the useFieldsStore to create and update fields in a Directus collection. This store is used to access and modify collections and fields.

LANGUAGE: html
CODE:
<script setup>
import { useStores } from '@directus/extensions-sdk';
const { useFieldsStore } = useStores();
const fieldsStore = useFieldsStore();

// create a field
const newField = await fieldStore.createField('collection_key', {
  name: 'title',
});

// update a field
const updatedField = await fieldStore.updateField(
  'collection_key',
  'field_key',
  {
    name: 'new title',
  }
);
</script>

----------------------------------------

TITLE: Configuring Panel Entrypoint in JavaScript
DESCRIPTION: Demonstrates how to define a panel extension's entrypoint configuration including ID, name, icon, dimensions, and options. This setup determines how the panel appears in menus and what configuration options are available to users.

LANGUAGE: javascript
CODE:
import { defineInterface } from '@directus/extensions-sdk'
import PanelComponent from './panel.vue';

export default defineInterface({
	id: 'custom',
	name: 'Custom',
	icon: 'box',
	description: 'This is my custom panel!',
	component: PanelComponent,
	minWidth: 12,
	minHeight: 8,
	options: [
		{
			field: 'text',
			name: 'Text',
			type: 'string',
			meta: {
				interface: 'input',
				width: 'full',
			},
		},
	],
});

----------------------------------------

TITLE: Initializing RelationsService in Directus API Extension
DESCRIPTION: Demonstrates how to initialize and use the RelationsService within a Directus API extension route handler. The service is created with a schema and accountability object.

LANGUAGE: javascript
CODE:
export default (router, context) => {
  const { services, getSchema } = context;
  const { RelationsService } = services;

  router.get('/', async (req, res) => {
    const relationsService = new RelationsService({
      schema: await getSchema(),
      accountability: req.accountability
    });

    // Your route handler logic
  });
};

----------------------------------------

TITLE: Configuring CORS in Directus
DESCRIPTION: Environment variables for configuring Cross-Origin Resource Sharing (CORS) settings in Directus.

LANGUAGE: markdown
CODE:
| Variable               | Description                                                                                                                                             | Default Value                |
| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------- |
| `CORS_ENABLED`         | Whether or not to enable the CORS headers.                                                                                                              | `false`                      |
| `CORS_ORIGIN`          | Value for the `Access-Control-Allow-Origin` header. Use `true` to match the Origin header, or provide a domain or a CSV of domains for specific access. | `false`                      |
| `CORS_METHODS`         | Value for the `Access-Control-Allow-Methods` header.                                                                                                    | `GET,POST,PATCH,DELETE`      |
| `CORS_ALLOWED_HEADERS` | Value for the `Access-Control-Allow-Headers` header.                                                                                                    | `Content-Type,Authorization` |
| `CORS_EXPOSED_HEADERS` | Value for the `Access-Control-Expose-Headers` header.                                                                                                   | `Content-Range`              |
| `CORS_CREDENTIALS`     | Whether or not to send the `Access-Control-Allow-Credentials` header.                                                                                   | `true`                       |
| `CORS_MAX_AGE`         | Value for the `Access-Control-Max-Age` header.                                                                                                          | `18000`                      |

----------------------------------------

TITLE: Accessing Collection Metadata with useCollection in Vue for Directus Extensions
DESCRIPTION: Shows how to use the useCollection composable to access metadata about collections, including fields, default values, and primary key information. This composable is used for retrieval only, not for manipulating collection configuration.

LANGUAGE: html
CODE:
<script setup>
import { useCollection } from '@directus/extensions-sdk';
const { info, fields, defaults, primaryKeyField } = useCollection('collection_name');

info.value;
// => [{ name: 'collection_name', icon: 'box', type: 'table', ... }]

fields.value;
// => [{ name: 'title', type: 'string', ... }]

defaults.value;
// => { title: 'default_value' }

primaryKeyField.value;
// => { name: 'id', type: 'uuid', ... }
</script>

----------------------------------------

TITLE: Basic Flask Application Setup
DESCRIPTION: Initial Flask application setup with a basic route handler

LANGUAGE: python
CODE:
from flask import Flask

app = Flask(__name__)


@app.get("/")
def home():
    return "Hello world"

----------------------------------------

TITLE: Creating Navigation Layout in Next.js
DESCRIPTION: React component for the root layout of the Next.js application. It adds a navigation menu to all pages, linking to various sections of the website.

LANGUAGE: jsx
CODE:
import Link from 'next/link';

export default function RootLayout({ children }) {
	return (
		<html lang="en">
			<body>
				<nav>
					<Link href="/">Home</Link>{' | '}
					<Link href="/about">About</Link>{' | '}
					<Link href="/conduct">Code of Conduct</Link>{' | '}
					<Link href="/privacy">Privacy Policy</Link>{' | '}
					<Link href="/blog">Blog</Link>
				</nav>
				<main>{children}</main>
			</body>
		</html>
	);
}

----------------------------------------

TITLE: HTML SSO Login Link Structure
DESCRIPTION: Example of HTML anchor tag structure for implementing SSO login with proper redirect URL.

LANGUAGE: html
CODE:
<a
  href="https://directus.myserver.com/auth/login/google?redirect=https://client.myserver.com/login"
  >Login</a
>

----------------------------------------

TITLE: Initializing Stores with useStores Composable in Vue for Directus Extensions
DESCRIPTION: Shows how to use the useStores composable to access various stores like useFieldsStore, usePermissionsStore, and useCollectionStore for interacting with data and features in a Directus project.

LANGUAGE: html
CODE:
<script setup>
import { useStores } from '@directus/extensions-sdk';
const { useFieldsStore, usePermissionsStore, useCollectionStore } = useStores();

const fieldsStore = useFieldsStore();
const permissionsStore = usePermissionsStore();
const collectionStore = useCollectionStore();
</script>

----------------------------------------

TITLE: Creating Items in Elasticsearch Index
DESCRIPTION: Implements a hook action that creates a new document in Elasticsearch when an item is created in the Directus books collection.

LANGUAGE: javascript
CODE:
action("books.items.create", async (meta) => {
  await client.index({
    index: "books",
    id: meta.key,
    document: meta.payload,
  });
});

----------------------------------------

TITLE: Linking Directus Extension
DESCRIPTION: Command to create or verify symbolic links for a Directus extension.

LANGUAGE: shell
CODE:
npx create-directus-extension@latest link

----------------------------------------

TITLE: Enabling 2FA in Directus
DESCRIPTION: POST request to enable 2FA for a user account. Requires both the secret previously generated and a one-time password (OTP) from the authenticator app.

LANGUAGE: json
CODE:
{
	"otp": "123456",
	"secret": "GV3UEVQVOM4D4O33"
}

----------------------------------------

TITLE: Handling Input Query Types in Directus SDK
DESCRIPTION: Shows how to properly define static fields for input queries to ensure correct type inference and resolution in the Directus SDK.

LANGUAGE: typescript
CODE:
const query: Query<MySchema, CollectionA> = {
	limit: 20,
	offset: 0,
};

let search = 'test';
if (search) {
	query.search = search;
}

// create a second query for literal/readonly type inference
const query2 =  {
    ...query,
	fields: [
        "id", "status"
	],
} satisfies Query<MySchema, CollectionA>;

const results = await directusClient.request(readItems("collection_a", query2));

// or build the query directly inline
const results2 = await directusClient.request(readItems("collection_a", {
    ...query,
    search,
	fields: [
        "id", "status"
	],
}));

----------------------------------------

TITLE: Creating Page Widget
DESCRIPTION: Dart code for a widget to display a single page using data from the Directus pages collection.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter_html/flutter_html.dart';

class PageWidget extends StatelessWidget {
  final Map<String, dynamic> page;
  const PageWidget({
    super.key,
    required this.page,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(page['title']),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 16),
              Html(
                data: page['content'],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Directus API Integration Module
DESCRIPTION: Python module for handling Directus API requests and data fetching

LANGUAGE: python
CODE:
import requests
import os

DIRECTUS_BASE_URL = os.environ.get("DIRECTUS_BASE_URL")

def get_global_data():
    response = requests.get(f"{DIRECTUS_BASE_URL}/items/global")
    return response.json().get("data")

----------------------------------------

TITLE: Local Testing Environment Configuration
DESCRIPTION: Environment variables setup for local testing without SSL certificate requirements.

LANGUAGE: sh
CODE:
SESSION_COOKIE_SECURE="false"
SESSION_COOKIE_SAME_SITE="lax"


----------------------------------------

TITLE: Sending Email with Custom Template in Directus
DESCRIPTION: Demonstrates how to send an email using a custom template and inject data in Directus using JavaScript.

LANGUAGE: javascript
CODE:
await mailService.send({
	to: 'name@example.com',
	subject: 'This is an example email',
	template: {
		name: 'my-custom-email-template',
		data: {
			firstname: user.firstname,
		},
	},
});

----------------------------------------

TITLE: Complete Backend Implementation (api.js)
DESCRIPTION: Complete backend implementation for the Twilio SMS operation including Twilio client setup and message sending logic

LANGUAGE: javascript
CODE:
import twilio from 'twilio';

export default {
	id: 'operation-twilio-sms',
	handler: ({ phone_number: toNumber, message }, { env }) => {
		const accountSid = env.TWILIO_ACCOUNT_SID;
		const authToken = env.TWILIO_AUTH_TOKEN;
		const fromNumber = env.TWILIO_PHONE_NUMBER;
		const client = new twilio(accountSid, authToken);

		client.messages
			.create({
				body: message,
				to: toNumber,
				from: fromNumber,
			})
			.then((response) => {
				return response;
			})
			.catch((error) => {
				return error;
			});
	},
};

----------------------------------------

TITLE: Updating Error Handling in Extensions for Directus 10.4.0
DESCRIPTION: Replace system exceptions with custom errors created within the extension for improved consistency and debugging.

LANGUAGE: js
CODE:
// Before
export default (router, { exceptions }) => {
  const { ForbiddenException } = exceptions;

  router.get('/', (req, res) => {
    throw new ForbiddenException();
  });
};

LANGUAGE: js
CODE:
// After
import { createError } from '@directus/errors';

const ForbiddenError = createError('MY_EXTENSION_FORBIDDEN', 'No script kiddies please...');

export default (router) => {
  router.get('/', (req, res) => {
    throw new ForbiddenError();
  });
};

----------------------------------------

TITLE: Adding Relational Fields in Directus SDK Schema
DESCRIPTION: Demonstrates how to define many-to-one and one-to-many relational fields in the schema for the Directus SDK.

LANGUAGE: typescript
CODE:
interface CollectionB {
	id: string;
	m2o: number | CollectionA;
	o2m: number[] | CollectionA[];
}

----------------------------------------

TITLE: Configuring Android Manifest
DESCRIPTION: Adding internet permission to Android manifest file

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">
    <uses-permission android:name="android.permission.INTERNET" />
</manifest>

----------------------------------------

TITLE: Package.json Build Script Configuration
DESCRIPTION: JSON configuration showing the build script setup for a Directus extension.

LANGUAGE: json
CODE:
{
	"scripts": {
		"build": "directus-extension build"
	}
}

----------------------------------------

TITLE: Authorization Header Authentication in Directus
DESCRIPTION: Demonstrates how to authenticate requests using the Authorization header with a Bearer token

LANGUAGE: plaintext
CODE:
Authorization: Bearer <token>

----------------------------------------

TITLE: Configuring Sendmail Transport in Directus
DESCRIPTION: This snippet shows the environment variables specific to configuring the sendmail transport method in Directus. It includes settings for new line style and the path to the sendmail executable.

LANGUAGE: markdown
CODE:
| Variable                  | Description                             | Default Value        |
| ------------------------- | --------------------------------------- | -------------------- |
| `EMAIL_SENDMAIL_NEW_LINE` | What new line style to use in sendmail. | `unix`               |
| `EMAIL_SENDMAIL_PATH`     | Path to your sendmail executable.       | `/usr/sbin/sendmail` |

----------------------------------------

TITLE: Deleting a Collection in Directus
DESCRIPTION: Shows how to delete a collection using CollectionsService. It removes the specified collection and returns the result.

LANGUAGE: javascript
CODE:
router.delete('/', async (req, res) => {
  const collectionsService = new CollectionsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  const data = await collectionsService.deleteOne('collection_name');

  res.json(data);
});

----------------------------------------

TITLE: Dynamic Preview URL Example
DESCRIPTION: Example of how a configured preview URL resolves with an actual item ID, demonstrating the URL structure that the application will receive.

LANGUAGE: plaintext
CODE:
https://mysite.com/posts/{id}

----------------------------------------

TITLE: Updating an Existing Featured Article (Many-to-One) in JSON
DESCRIPTION: Shows how to update an existing featured article in a Many-to-One relationship using JSON. This updates the record with the specified primary key in the related collection.

LANGUAGE: json
CODE:
{
  "featured_article": {
    "id": 15,
    "title": "This is an updated title for my article!"
  }
}

----------------------------------------

TITLE: Initializing FilesService in Directus API Extension
DESCRIPTION: Shows how to initialize and use the FilesService within a Directus API extension route handler. The service is created with a schema and accountability object.

LANGUAGE: javascript
CODE:
export default (router, context) => {
	const { services, getSchema } = context;
	const { FilesService } = services;

	router.get('/', async (req, res) => {
		const filesService = new FilesService({
			schema: await getSchema(),
			accountability: req.accountability
		});

		// Your route handler logic
	});
};

----------------------------------------

TITLE: Setting up Directus API Service Interface
DESCRIPTION: Creates an interface for making API calls to Directus using Retrofit

LANGUAGE: kotlin
CODE:
package com.example.directusapp.network
import com.example.directusapp.Constants
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

interface DirectusApiService {
    companion object {
        fun create(): DirectusApiService {
            val retrofit = Retrofit.Builder()
                .baseUrl(Constants.BASE_URL)
                .addConverterFactory(GsonConverterFactory.create())
                .build()
            return retrofit.create(DirectusApiService::class.java)
        }
    }
}

----------------------------------------

TITLE: Permission Checking Implementation
DESCRIPTION: Implementation of permission checking using Directus API fetch request.

LANGUAGE: javascript
CODE:
router.get('/payments', async (req, res) => {
  try {
      const response = await fetch("http://directus.example.com/permissions/me", {
        headers: {
          'Authorization': `Bearer ${req.token}`,
          'Content-Type': 'application/json'
        }
      });

      const permissions = await response.json();
  }
  catch(e) {
    res.sendStatus(401);
  }
});

----------------------------------------

TITLE: Creating Blog Post Listing with Directus in Nuxt
DESCRIPTION: Vue component to fetch and display a list of blog posts from Directus.

LANGUAGE: vue
CODE:
<template>
	<h1>Blog</h1>
	<ul>
		<li v-for="post in posts" :key="post.id">
			<NuxtLink :href="`/blog/${post.slug}`">
				<h2>{{post.title}}</h2>
			</NuxtLink>
			<span>{{post.publish_date}} &bull; {{post.author.name}}</span>
		</li>
	</ul>
</template>

<script setup>
const { $directus, $readItems } = useNuxtApp()

const { data: posts } = await useAsyncData('posts', () => {
  return $directus.request(
	$readItems('posts', {
		fields: ['slug', 'title', 'publish_date', { 'author': [ 'name' ] }],
		sort: ['-publish_date']
	})
  )[0]
})
</script>

----------------------------------------

TITLE: Configuring Mailgun Transport in Directus
DESCRIPTION: This snippet shows the environment variables used to configure Mailgun transport in Directus. It includes settings for the API key, domain, and custom host.

LANGUAGE: markdown
CODE:
| Variable                | Description                                                                        | Default Value     |
| ----------------------- | ---------------------------------------------------------------------------------- | ----------------- |
| `EMAIL_MAILGUN_API_KEY` | Your Mailgun API key.                                                              |                   |
| `EMAIL_MAILGUN_DOMAIN`  | A domain from [your Mailgun account](https://app.mailgun.com/app/sending/domains). |                   |
| `EMAIL_MAILGUN_HOST`    | Specify a custom host.                                                             | `api.mailgun.net` |

----------------------------------------

TITLE: S3 Storage Configuration - YAML
DESCRIPTION: Environment variables configuration for connecting Directus to AWS S3 storage.

LANGUAGE: yaml
CODE:
  STORAGE_LOCATIONS: s3
  STORAGE_S3_DRIVER: s3
  STORAGE_S3_KEY: YOUR_AWS_ACCESS_KEY_ID
  STORAGE_S3_SECRET: YOUR_AWS_SECRET_ACCESS_KEY
  STORAGE_S3_BUCKET: YOUR_S3_BUCKET_NAME
  STORAGE_S3_REGION: YOUR_PREFERRED_REGION
  STORAGE_S3_ENDPOINT: s3.amazonaws.com

----------------------------------------

TITLE: Creating Items via WebSocket in Directus
DESCRIPTION: Request format for creating new items in a collection using WebSockets. Supports both single and multiple item creation.

LANGUAGE: json
CODE:
{
	"type": "items",
	"action": "create",
	"collection": "your_collection_name",
	"data": {
		// ...
	}
}

LANGUAGE: json
CODE:
{
	"type": "items",
	"data": {
		// ...
	}
}

----------------------------------------

TITLE: Follow Syntax Filter Example
DESCRIPTION: Shows how to use $FOLLOW syntax to query indirect relations between collections.

LANGUAGE: json
CODE:
{
  "filter": {
    "name": "Germany",
    "$FOLLOW(cities, country_id)": {
        "name": "Berlin"
    }
  }
}

----------------------------------------

TITLE: Implementing Weather Endpoint in JavaScript
DESCRIPTION: Creates a Directus endpoint that fetches weather data from the Open-Meteo API based on provided longitude and latitude.

LANGUAGE: javascript
CODE:
export default {
    id: 'weather',
    handler: (router) => {
        router.get('/', async (req, res) => {
            try {
                const response = await fetch(`https://api.open-meteo.com/v1/forecast?current_weather=true&${req._parsedUrl.query}`);

                if (response.ok) {
                    res.json(await response.json());
                } else {
                    res.status(response.status).send(response.statusText);
                }
            } catch(error) {
                res.status(500).send(error.message);
            }
        })
    }
}

----------------------------------------

TITLE: Creating New Messages in Directus Chat Application
DESCRIPTION: Handles the submission of new messages and sends them to the Directus collection.

LANGUAGE: javascript
CODE:
document.querySelector('#new').addEventListener('submit', function (event) {
	event.preventDefault();
	const text = event.target.elements.text.value;

  client.sendMessage({
    type: 'items',
    collection: 'messages',
    action: 'create',
    data: { text },
  });

	document.querySelector('#text').value = '';
});

----------------------------------------

TITLE: Docker Installation Commands - Bash
DESCRIPTION: Commands for installing Docker and Docker Compose on AWS EC2 instance.

LANGUAGE: bash
CODE:
sudo yum install -y docker
sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose

----------------------------------------

TITLE: Creating ArticleController in Java
DESCRIPTION: Implements the controller to handle web requests. Uses @Controller and @RequestMapping annotations. Injects ArticleService to fetch articles and adds them to the Thymeleaf model.

LANGUAGE: java
CODE:
package com.directus.blog.controller;

import com.directus.blog.service.ArticleService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/")
public class ArticleController {
    private final ArticleService articleService;

    @Autowired
    public ArticleController(ArticleService articleService) {
        this.articleService = articleService;
    }

    @GetMapping
    public String getAllArticles(Model model){
        model.addAttribute("articles",
                articleService.getAllArticles());
        return "index";
    }
}

----------------------------------------

TITLE: Overriding System Email Templates in Directus
DESCRIPTION: This snippet shows the system email templates that can be overridden in Directus. It lists the template names and their corresponding file names.

LANGUAGE: markdown
CODE:
| Template           | File                    |
| ------------------ | ----------------------- |
| Password Reset     | `password-reset.liquid` |
| User Invitation    | `user-invitation.liquid` |
| User Registration  | `user-registration.liquid` |

----------------------------------------

TITLE: Setting Up an Ingress for Directus
DESCRIPTION: This YAML creates an Ingress resource for Directus, exposing it to external traffic. It defines routing rules for the 'directus.app' hostname and directs traffic to the Directus service.

LANGUAGE: yaml
CODE:
apiVersion: networking.K8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: directus
    app.kubernetes.io/name: directus
  name: directus
spec:
  rules:
  - host: directus.app
    http:
      paths:
      - backend:
          service:
            name: directus
            port:
              number: 80
        path: /
        pathType: ImplementationSpecific

----------------------------------------

TITLE: Removing a Featured Article (Many-to-One) in JSON
DESCRIPTION: Illustrates how to remove a featured article in a Many-to-One relationship by nullifying the field using JSON.

LANGUAGE: json
CODE:
{
  "featured_article": null
}

----------------------------------------

TITLE: Paginating Results in Directus API
DESCRIPTION: Demonstrates how to use the page parameter as an alternative to offset for pagination.

LANGUAGE: http
CODE:
GET /items/posts
	?page=2

LANGUAGE: graphql
CODE:
query {
	posts(page: 2) {
		id
	}
}

LANGUAGE: js
CODE:
import { createDirectus, rest, readItems } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest());

const result = await directus.request(
	readItems('posts', {
		page: 2,
	})
);

----------------------------------------

TITLE: Creating DirectusService Class
DESCRIPTION: Dart class to handle API requests to Directus, including methods for fetching global metadata and pages.

LANGUAGE: dart
CODE:
import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv';

class DirectusService {
  final String _baseUrl = dotenv.env['DIRECTUS_API_URL']!;

  Future<Map<String, dynamic>> getGlobalMetadata() async {
    final response = await http.get(Uri.parse('$_baseUrl/global'));
    if (response.statusCode == 200) {
      return jsonDecode(response.body)['data'];
    } else {
      throw Exception('Failed to load global metadata');
    }
  }

  Future<Map<String, dynamic>> getPages() async {
    final response = await http.get(Uri.parse('$_baseUrl/pages'));
    if (response.statusCode == 200) {
      return jsonDecode(response.body)['data'];
    } else {
      throw Exception('Failed to load pages');
    }
  }
}

----------------------------------------

TITLE: Subscribing to Messages in Directus Realtime
DESCRIPTION: Sets up a subscription to the Messages collection and handles incoming messages.

LANGUAGE: javascript
CODE:
client.onWebSocket('message', function (data) {
  if (data.type == 'auth' && data.status == 'ok') {
	  subscribe('update')
  }
});

async function subscribe(event) {
  const { subscription } = await client.subscribe('messages', {
    event,
    query: {
      fields: ['*', 'user_created.first_name'],
    },
  });

  for await (const message of subscription) {
    receiveMessage(message);
  }
}

----------------------------------------

TITLE: Creating Global Component
DESCRIPTION: Angular component implementation for displaying global metadata from Directus

LANGUAGE: typescript
CODE:
import {Component, OnInit} from '@angular/core';
import {directus, Global} from "../../../../directus";
import {CommonModule} from "@angular/common";
import {readSingleton} from "@directus/sdk";

@Component({
  selector: 'app-global',
  standalone: true,
  imports: [
    CommonModule
  ],
  templateUrl: './global.component.html',
  styleUrl: './global.component.css'
})
export class GlobalComponent implements OnInit{
  global: Global;
  ngOnInit(): void {
    this.getGlobal();
  }

  async getGlobal(){
    //@ts-ignore
    this.global = await directus
      .request<Global>(readSingleton("global"))
  }
}

----------------------------------------

TITLE: Creating ArticleDTO Class in Java
DESCRIPTION: Defines the ArticleDTO class to map the JSON response from Directus API. Uses @JsonProperty annotation to map the 'data' field to a List of Articles.

LANGUAGE: java
CODE:
package com.directus.blog.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

import java.util.List;
@Data
public class ArticleDTO {
    @JsonProperty("data")
    private List<Article> articles;
}

----------------------------------------

TITLE: Running Blackbox Tests in Directus
DESCRIPTION: Steps to run blackbox tests using Docker, including building the codebase, starting containers, and running the tests. Also covers testing specific database vendors and using an existing Directus project.

LANGUAGE: bash
CODE:
# Ensure that you are testing against the lastest state of the codebase
pnpm --workspace-root build

# Clean up in case you ran the tests before
pnpm --filter tests-blackbox exec docker compose down --volumes
# Start the containers required for the tests
pnpm --filter tests-blackbox exec docker compose up --detach --wait

# Deploy Directus and run the tests
pnpm --workspace-root test:blackbox

----------------------------------------

TITLE: Configuring Directus Environment Variables for Okta SSO
DESCRIPTION: This code snippet shows the necessary environment variables to be added to the Directus .env file for enabling Okta SSO with SAML authentication. It includes settings for the authentication provider, driver, user registration, default role, and SAML metadata.

LANGUAGE: env
CODE:
AUTH_PROVIDERS="okta"
AUTH_OKTA_DRIVER="saml"
AUTH_OKTA_ALLOW_PUBLIC_REGISTRATION=true
AUTH_OKTA_DEFAULT_ROLE_ID="d2021a6c-327a-4477-9cb8-62244ead4e1f"
AUTH_OKTA_IDENTIFIER_KEY="email"
AUTH_OKTA_EMAIL_KEY="email"
AUTH_OKTA_GIVEN_NAME_KEY="first_name"
AUTH_OKTA_FAMILY_NAME_KEY="last_name"
AUTH_OKTA_IDP_metadata='<md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" entityID="http://www.okta.com/exk8y5vtf9CddTPJ4697">
<md:IDPSSODescriptor WantAuthnRequestsSigned="false" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
<md:KeyDescriptor use="signing">
<ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:X509Data>
<ds:X509Certificate>MIIDqjCCApKgAwIBAgIGAYtjHesFMA0GCSqGSIb3DQEBCwUAMIGVMQswCQYDVQQGEwJVUzETMBEG A1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEU MBIGA1UECwwLU1NPUHJvdmlkZXIxFjAUBgNVBAMMDXRyaWFsLTM1Mjg4NDkxHDAaBgkqhkiG9w0B CQEWDWluZm9Ab2t0YS5jb20wHhcNMjMxMDI0MTkxNTI3WhcNMzMxMDI0MTkxNjI2WjCBlTELMAkG A1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhnkBGcmFuY2lzY28xDTAL BgNVBAoMBE9rdGExFDASBgNVBAsMC1NTT1Byb3ZpZGVyMRYwFAYDVQQDDA10cmlhbC0zNTI4ODQ5 MRwwGgYJKoZIhvcNAQkBFg1pbmZvQG9rdGEuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB CgKCAQEAp3Fym7vnRBER9Hoj70Z7EjE0hsEQTyjN7aN7EcBWL7/g40h65bmaHtTq/Pbd/6fBedGF f4ZvwW1vOLdnRnVxwIl5UdUqYgfgSoYq9xp48xMlonWDqd6fNlSRKl3h9sFARZQ680f7TYbanTEu ikUKoE7K6HdEOXC00Iv+zcyA6BfiIRBuBSnAZU6Ip3nsLeY8ludDhZzqD04H6bhZFVzRUif75LHn DYUY9VsvGxqDIhLGQFuVlgbP5OdNEGZM02iCGhivGN0eIEPGUpMGBu9dpxHSMqOar/QVO64JgwTw jcW+t7P+47IC6LRJVY07bg3pjgEMtmylzgvdx/30tynpwwIDAQABMA0GCSqGSIb3DQEBCwUAA4IB AQAux3Jo+jl7kzgd+AILWrayG/Ayu8L2OPs3+pjJ42FfjEa6Vw0a8g+IfQ1t7kvWcI1VrWol2jsR oBzR0xZpsStOQ+t3S+MtjS74iN7ErvDFRHjD4yEGJtMGwxsWFJqcOICwcJEB4Etmd+girCSccVH7 ydR9HnKID0SVKh/i17FPG4SlE28/cQJ2rb/VkPHlBlHIMyRvLhGdM3T2SWBIHR0/9Nvp9gyNZfvk 0qP184mjFP9wKU83tXLCnq31j7vJtdOw+E83TsUSg1e9JBNH3L9OVQJzksI+iUiHEDH8O9yXla5C caqK2Z6/0FTGf2KYlbO6qtLAYmIdKwsQR28crJW0</ds:X509Certificate>
</ds:X509Data>
</ds:KeyInfo>
</md:KeyDescriptor>
<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>
<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>
<md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://trial-3528890.okta.com/app/trial-3528890_mydirectusapp_1/exk8y5vtf9CddTPJ4697/sso/saml"/>
<md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" Location="https://trial-3528890.okta.com/app/trial-3528890_mydirectusapp_1/exk8y5vtf9CddTPJ4697/sso/saml"/>
</md:IDPSSODescriptor>
</md:EntityDescriptor>'
AUTH_OKTA_SP_metadata='<EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" entityID="http://www.okta.com/exk8y5vtf9CddTPJ4697">
                       <SPSSODescriptor WantAssertionsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
                       <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>
                       <AssertionConsumerService isDefault="true" index="0" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="http://localhost:8055/auth/login/okta/acs"/>
                       </SPSSODescriptor>
                       </EntityDescriptor>'

----------------------------------------

TITLE: Implementing Blog Post Fetching Function
DESCRIPTION: Python function to fetch blog posts from Directus API, including author information and sorting by publish date.

LANGUAGE: python
CODE:
def fetch_blog_posts():
    response = requests.get(f"{DIRECTUS_API_ENDPOINT}/items/posts?fields=*,author.name&sort=-publish_date")
    return response.json()

----------------------------------------

TITLE: Accessing Files via API Endpoint
DESCRIPTION: Basic URL pattern for accessing files through the Directus API endpoint using the file ID.

LANGUAGE: plaintext
CODE:
https://example.com/assets/<file-id>\nhttps://example.com/assets/1ac73658-8b62-4dea-b6da-529fbc9d01a4

----------------------------------------

TITLE: Configuring Directus Client
DESCRIPTION: Setup for Directus SDK client with necessary methods for data fetching.

LANGUAGE: typescript
CODE:
import {
  createDirectus,
  readItem,
  readItems,
  rest,
  withToken,
} from '@directus/sdk';

const directus = createDirectus<DirectusSchema>("http://localhost:8055").with(rest());

export { directus, readItem, readItems, withToken };

----------------------------------------

TITLE: Creating New Messages
DESCRIPTION: Implements the message submission method to send new messages to the Directus collection.

LANGUAGE: javascript
CODE:
const messageSubmit = (event) => {
  const text = event.target.elements.text.value;

  client.sendMessage({
    type: 'items',
    collection: 'messages',
    action: 'create',
    data: { text },
  });

  event.target.reset();
};

----------------------------------------

TITLE: Configuring CORS and Content Security Policy in Docker
DESCRIPTION: Docker compose configuration for setting up CORS and content security policy for Directus preview mode

LANGUAGE: yaml
CODE:
environment:
  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: http://localhost:5173
  CORS_ENABLED: "true"
  CORS_ORIGIN: "true"

----------------------------------------

TITLE: Creating Thymeleaf View Page in HTML
DESCRIPTION: Implements the Thymeleaf template to display articles. Uses Thymeleaf syntax to iterate through the articles and display their title, featured image, and body.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en" xmlns:th="https://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
<div style="width: 500px">
    <div th:each="article: ${articles}">
        <h1 th:text="${article.title}"></h1>
        <img th:src="@{${'https://YOUR_DIRETUS_PROJECT_URL/assets/'+article.featuredImage}}"
             style="width: 100%" alt="featured image">
        <p th:text="${article.body}"></p>
    </div>
</div>
</body>
</html>

----------------------------------------

TITLE: Running Directus Migrations and Schema Updates in Bash
DESCRIPTION: This snippet shows two options for running Directus migrations and applying schema changes. It includes commands for bootstrapping, installing the database, running migrations, and applying schema snapshots.

LANGUAGE: bash
CODE:
# Option 1
npx directus bootstrap
npx directus schema apply ./path/to/snapshot.yaml

# Option 2 - without bootstrap, you must ensure that you run all required `bootstrap` tasks
npx directus database install
npx directus database migrate:latest
npx directus schema apply ./path/to/snapshot.yaml

----------------------------------------

TITLE: Configuring Docker Compose for Directus Azure Deployment
DESCRIPTION: Docker Compose configuration file for deploying Directus on Azure Web Apps. Includes environment variables for database connection, admin credentials, and volume mappings for persistent storage.

LANGUAGE: yml
CODE:
version: "3"
services:
  directus:
    image: directus/directus:10.9.3
    ports:
      - 8055:8055
    volumes:
      - ${WEBAPP_STORAGE_HOME}/database:/directus/database:rw
      - ${WEBAPP_STORAGE_HOME}/uploads:/directus/uploads:rw
    environment:
      KEY: "replace-with-random-value"
      SECRET: "replace-with-random-value"
      ADMIN_EMAIL: "admin@example.com"
      ADMIN_PASSWORD: "d1r3ctu5"
      DB_CLIENT: "pg"
      DB_HOST: "YOUR_PDS_DB_URL"
      DB_PORT: 5432
      DB_DATABASE: "postgres"
      DB_USER: "YOUR_DB_USER"
      DB_PASSWORD: "YOUR_DB_PASSWORD"
      WEBSOCKETS_ENABLED: true

----------------------------------------

TITLE: Fetching Posts from Directus API
DESCRIPTION: Async function to fetch posts from Directus API endpoint and decode JSON response into Post objects.

LANGUAGE: swift
CODE:
func fetchPosts() async {
	guard let url = URL(string: "https://ios-author-demo.directus.app/items/posts") else {
		print("Invalid URL")
		return
	}

	do {
		let (data, _) = try await URLSession.shared.data(from: url)
		let decoder = JSONDecoder()
		let result = try decoder.decode([String: [Post]].self, from: data)

		if let posts = result["data"] {
			self.posts = posts
		}
	} catch {
		print("Error: \(error)")
	}
}

----------------------------------------

TITLE: Using Global Relational Variables in Directus Dashboard Filters
DESCRIPTION: Shows how to include multiple global relational variables in a dashboard filter using the 'one of' comparison.

LANGUAGE: markdown
CODE:
```
Name is one of {{A}}, {{B}}
```

----------------------------------------

TITLE: Setting up Directus Client and Block Fetching
DESCRIPTION: TypeScript configuration for Directus SDK client initialization and block fetching functionality

LANGUAGE: typescript
CODE:
/// <reference types="vite/client" />
import { createDirectus, rest, readItems } from "@directus/sdk";

const DIRECTUS_URL = import.meta.env.DIRECTUS_URL;

const client = createDirectus(DIRECTUS_URL).with(rest());

export async function fetchPageBlocks(slug: string) {
  console.log(slug);
  const pages = await client.request(
    readItems("pages", {
      filter: {
        slug: { _eq: slug },
      },
      fields: [
        "*",
        {
          blocks: [
            "*",
            {
              item: {
                block_hero: ["*"],
                block_cardgroup: [
                  "*",
                  {
                    posts: [
                      "*.*",
                    ],
                    cards: [
                      "*.*",
                    ],
                  },
                ],
                block_richtext: ["*"],
              },
            },
          ],
        },
      ],
      limit: 1,
    })
  );
  return pages[0] || [];
}
export default client;

----------------------------------------

TITLE: Setting Up Directus URL
DESCRIPTION: Defines the Directus project URL for the application to connect to.

LANGUAGE: javascript
CODE:
const url = 'https://your-directus-url';

----------------------------------------

TITLE: Reading a Relation in Directus
DESCRIPTION: Shows how to read a relation's data using RelationsService. It retrieves the data for a specific relation by collection and field name.

LANGUAGE: javascript
CODE:
router.get('/', async (req, res) => {
  const relationsService = new RelationsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  const data = await relationsService.readOne('collection_name', 'field_name');

  res.json(data);
});

----------------------------------------

TITLE: ContentView Implementation with State Management
DESCRIPTION: Main SwiftUI view implementation with state properties for managing posts and selected post state.

LANGUAGE: swift
CODE:
var body: some View {
	NavigationView {
		VStack(alignment: .leading) {
			List(posts) { post in
				VStack(alignment: .leading) {
					Text(post.title)
						.font(.headline)
					Text(post.stripHTML().prefix(100) + "...")
						.font(.body)
						.onTapGesture {
							selectedPost = post
						}
				}
			}
			.sheet(item: $selectedPost) { post in
				PostDetailView(selectedPost: $selectedPost, fetchPost: postAPIcall)
			}
		}
		.navigationTitle("Posts")
		.task {
			await fetchPosts()
		}
	}
}

----------------------------------------

TITLE: Generating a Changeset for Directus Pull Requests
DESCRIPTION: This command generates a changeset using the pnpm package manager. Changesets are used to properly generate changelogs and determine the correct version number after a change is merged.

LANGUAGE: shell
CODE:
pnpm changeset

----------------------------------------

TITLE: Custom Dockerfile for Handling PM2 Errors on DigitalOcean
DESCRIPTION: This Dockerfile builds upon the Directus image to address PM2 errors on DigitalOcean by adding the procps package and setting the PIDUSAGE_USE_PS environment variable.

LANGUAGE: dockerfile
CODE:
FROM directus/directus:10.8.1

USER root
RUN apk --no-cache add procps
USER node

ENV PIDUSAGE_USE_PS=true

----------------------------------------

TITLE: Accessing Environment Variables in Flows
DESCRIPTION: Demonstrates how to access environment variables within Flows using the $env object after enabling via FLOWS_ENV_ALLOW_LIST. Environment variables can be accessed through the data.$env object or process.env.

LANGUAGE: javascript
CODE:
const publicUrl = data.$env.PUBLIC_URL;

----------------------------------------

TITLE: Authentication Success Response
DESCRIPTION: JSON response structure received upon successful authentication, including refresh token for email/password and refresh token authentication methods.

LANGUAGE: json
CODE:
{
	"type": "auth",
	"status": "ok",
	"refresh_token": "a-token-to-use-later"
}

----------------------------------------

TITLE: Configuring Directus SDK Wrapper
DESCRIPTION: Setup of Directus SDK wrapper to handle API connections and requests.

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from '@directus/sdk';
import { PUBLIC_API_URL } from '$env/static/public';

function getDirectusInstance(fetch) {
   const options = fetch ? { globals: { fetch } } : {};
   const directus = createDirectus(PUBLIC_API_URL, options).with(rest());
   return directus;
}

export default getDirectusInstance;

----------------------------------------

TITLE: Creating Testimonial Card Component
DESCRIPTION: Svelte component for displaying individual testimonial cards with styling.

LANGUAGE: svelte
CODE:
<script>
  export let id;
  export let full_name;
  export let email_address;
  export let review;
</script>

<div {id} class="card-li">
  <blockquote class="card-article">{review}</blockquote>
  <div class="card-div1">
    <h5 class="card-h5">
      {full_name}<span class="card-span"> {email_address}</span>
    </h5>
  </div>
</div>

----------------------------------------

TITLE: Configuring Docker Compose for Directus with Sentry
DESCRIPTION: Docker compose configuration that sets up a Directus instance with necessary environment variables for Sentry integration, including CSP directives and DSN configuration.

LANGUAGE: yaml
CODE:
version: '3'
services:
  directus:
    image: directus/directus:latest
    ports:
      - 8055:8055
    volumes:
      - ./database:/directus/database
      - ./uploads:/directus/uploads
      - ./extensions:/directus/extensions
    environment:
      KEY: 'replace-with-random-value'
      SECRET: 'replace-with-random-value'
      ADMIN_EMAIL: 'test@example.com'
      ADMIN_PASSWORD: 'hunter2'
      DB_CLIENT: 'sqlite3'
      DB_FILENAME: '/directus/database/data.db'
      WEBSOCKETS_ENABLED: true
      EXTENSIONS_AUTO_RELOAD: true
      CONTENT_SECURITY_POLICY_DIRECTIVES__SCRIPT_SRC: "'self' 'unsafe-eval' https://js.sentry-cdn.com https://browser.sentry-cdn.com"
      SENTRY_DSN: 'replace-with-back end-project-dsn'

----------------------------------------

TITLE: Fetching Single Post Details
DESCRIPTION: Async function to fetch detailed information for a specific post by ID from Directus API.

LANGUAGE: swift
CODE:
func postAPIcall(postId: Int) async {
	let uuid = UUID().uuidString
	var components = URLComponents(
		string: "https://directus-project-url/items/posts/\(postId)")!
	components.queryItems = [URLQueryItem(name: "uuid", value: uuid)]

	guard let url = components.url else {
		print("Invalid URL")
		return
	}

	do {
		let (data, _) = try await URLSession.shared.data(from: url)
		let decoder = JSONDecoder()

		struct ApiResponse: Decodable {
			let data: Post
		}

		let result = try decoder.decode(ApiResponse.self, from: data)

		selectedPost = result.data
	} catch {
		print("Error: \(error)")

	}
}

----------------------------------------

TITLE: CRON Syntax Pattern for Schedule Triggers
DESCRIPTION: Demonstrates the 6-point CRON job syntax used for scheduling flow triggers in Directus. Each position represents a time unit from seconds to day of week.

LANGUAGE: cron
CODE:
 ┌────────────── second (0-59)
 │ ┌──────────── minute (0-59)
 │ │ ┌────────── hour (0-23)
 │ │ │ ┌──────── day of month (1-31)
 │ │ │ │ ┌────── month (1-12)
 │ │ │ │ │ ┌──── day of week (0-7)
 │ │ │ │ │ │
 │ │ │ │ │ │
 * * * * * *

----------------------------------------

TITLE: Creating a Field in Directus
DESCRIPTION: Demonstrates creating a new field in a collection using FieldsService. It creates a 'title' field with specific properties, then reads and returns the created field data.

LANGUAGE: javascript
CODE:
router.post('/', async (req, res) => {
  const field = {
    field: 'title',
    type: 'string',
    meta: {
      icon: 'title',
    },
    schema: {
      default_value: 'Hello World',
    },
  };

  const fieldsService = new FieldsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  await fieldsService.createField('collection_name', field);

  const data = await fieldsService.readOne(
    'collection_name',
    field.field,
  );

  res.json(createdField);
});

----------------------------------------

TITLE: Computing Image URL from Asset UUID
DESCRIPTION: Computed property that generates the full image URL by combining the base Directus URL with the image UUID.

LANGUAGE: swift
CODE:
var imageURL: String? {
    guard let imageUUID = image else { return nil }
    return "https://directus-project-url/assets/\(imageUUID)"
}

----------------------------------------

TITLE: Authentication Token Response JSON Structure
DESCRIPTION: Standard JSON response structure containing authentication tokens and expiration time. Includes an access token for API requests, a refresh token for obtaining new access tokens, and expiration time in milliseconds.

LANGUAGE: json
CODE:
{
	"expires": 900000,
	"access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
	"refresh_token": "Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj..."
}

----------------------------------------

TITLE: Fetching GitHub User Profile Data with GraphQL
DESCRIPTION: This GraphQL query fetches comprehensive user profile data from GitHub, including repositories, contributions, organizations, and other relevant information used for scoring and generating the roast.

LANGUAGE: graphql
CODE:
query getUserProfile($username: String!) {
  user(login: $username) {
    login
    name
    location
    twitterUsername
    url
    avatarUrl
    websiteUrl
    company
    bio
    readme: repository(name: $username) {
      object(expression: "HEAD:README.md") {
        ... on Blob {
          text
        }
      }
    }
    starredRepositories {
      totalCount
    }
    followers {
      totalCount
    }
    following {
      totalCount
    }
    organizations(first: 3, orderBy: {field: CREATED_AT, direction: DESC}) {
      nodes {
        name
        description
        url
        avatarUrl
		 membersWithRole(first: 10){
          nodes{
            name
            login
            avatarUrl
          }
        }
      }
    }
    repositories(visibility: PUBLIC, first: 10, ownerAffiliations: OWNER, orderBy: {field: PUSHED_AT, direction: DESC}) {
      totalCount
      nodes {
        forkCount
        isFork
        name
        description
        descriptionHTML
        url
        createdAt
        stargazerCount
        issues(states: OPEN) {
          totalCount
        }
        readme: object(expression: "HEAD:README.md") {
          ... on Blob {
            text
          }
        }
        pushedAt
        commitComments {
          totalCount
        }
      }
    }
    contributionsCollection(
      from: "2024-01-01T00:00:00Z"
      to: "2024-12-31T23:59:59Z"
    ) {
      totalRepositoryContributions
      totalRepositoriesWithContributedIssues
      totalRepositoriesWithContributedCommits
      totalCommitContributions
      totalIssueContributions
      totalPullRequestContributions
      totalPullRequestReviewContributions
    }
    sponsorshipsAsSponsor(activeOnly: true, first: 100) {
      totalCount
    }
  }
}

----------------------------------------

TITLE: Using Log Scope in Sandbox
DESCRIPTION: Implementation of logging functionality in sandboxed environment with required scope configuration.

LANGUAGE: javascript
CODE:
import { log } from 'directus:api';

log('Hello World!');

LANGUAGE: json
CODE:
"requestedScopes": {
  "log": {}
}

----------------------------------------

TITLE: Creating Django View for Individual Blog Posts
DESCRIPTION: Python code for a Django view that fetches and renders individual blog posts from Directus based on the slug.

LANGUAGE: python
CODE:
def blog_post_detail(request, slug):
    posts_data = fetch_blog_posts()
    post = next((p for p in posts_data['data'] if p['slug'] == slug), None)

    if post is not None:
        return render(request, 'blog_detail.html', {'post': post})
    else:
        return JsonResponse({'error': 'Post not found'}, status=404)

----------------------------------------

TITLE: Query Parameter Authentication in Directus
DESCRIPTION: Demonstrates how to authenticate using a query parameter, with a security warning about potential exposure risks

LANGUAGE: plaintext
CODE:
?access_token=<token>

----------------------------------------

TITLE: Updating Algolia Index Objects on Directus Item Update (JavaScript)
DESCRIPTION: Implements a Directus action hook that updates existing objects in the Algolia index when posts are updated in Directus.

LANGUAGE: javascript
CODE:
action('posts.items.update', async (meta) => {
    await Promise.all(
        meta.keys.map(async (key) => await index.partialUpdateObjects([{ objectID: `${key}`, ...meta.payload }])),
    );
});

----------------------------------------

TITLE: Directus Extension CLI Configuration
DESCRIPTION: JavaScript configuration file example for customizing the CLI behavior with plugins and watch options.

LANGUAGE: javascript
CODE:
export default {
	plugins: [],
	watch: {
		clearScreen: false
	}
};

----------------------------------------

TITLE: Required Metadata Example - Package.json Configuration
DESCRIPTION: Example of required metadata fields in package.json for publishing a Directus extension. Includes name, version, and Directus-specific extension properties.

LANGUAGE: json
CODE:
{
  "name": "my-extension",
  "version": "1.0.0",
  "directus:extension.type": "interface",
  "directus:extension.host": "10.0.0"
}

----------------------------------------

TITLE: Uploading Images to Directus in Python
DESCRIPTION: This Python function downloads an image from a given URL and uploads it to Directus using the API. It returns the new Directus asset URL.

LANGUAGE: python
CODE:
import json
import requests
import os

def upload_to_directus(image_url):
    image_content = requests.get(image_url).content
    temp_image_path = "temp_image.jpg"
    with open(temp_image_path, "wb") as file:
        file.write(image_content)
    headers = {"Authorization": "Bearer your-api-token"}
    files = {
        "file": open(
            temp_image_path, "rb"
        )
    }
    directus_upload_url = "https://your.directus.app/files"
    print(f"Uploading image to Directus: {directus_upload_url}")
    response = requests.post(directus_upload_url, files=files, headers=headers)
    response_str = response.json()
    directus_image_id = response_str["data"]["id"]
    os.remove(temp_image_path)
    directus_image_url = f"https://your.directus.app/assets/{directus_image_id}"
    print(f"Directus Image URL: {directus_image_url}")
    return directus_image_url

----------------------------------------

TITLE: Defining AI Payload Schema for Anthropic Claude in TypeScript
DESCRIPTION: This code snippet defines a Zod schema for the AI payload returned by Anthropic's Claude model. It specifies the structure of the response, including the letter content, naughty/nice classification, and flagging information.

LANGUAGE: typescript
CODE:
export const aiPayloadSchema = z.object({
    letter: z.string().min(1), // The letter in Markdown format
    list: z.enum(['naughty', 'nice']), // The list the user belongs to
    flagged: z.boolean().optional(), // Was the letter flagged as inappropriate?
    flagged_reason: z.string().optional(), // Reason for why it was flagged
});

----------------------------------------

TITLE: Creating Post Model Structure in Swift
DESCRIPTION: Defines a Post struct that conforms to Codable and Identifiable protocols, representing the data structure for posts from Directus API.

LANGUAGE: swift
CODE:
struct Post: Codable, Identifiable {
    var id: Int
    var title: String
    var content: String
    var status: String
    var image: String?
}

----------------------------------------

TITLE: Configuring Django URL Patterns
DESCRIPTION: Python code to set up URL patterns for the Django views, including blog listings and individual posts.

LANGUAGE: python
CODE:
from django.urls import path
from .views import home_page, blog_posts, blog_post_detail

urlpatterns = [
    path('', home_page, name='home'),
    path('blog/', blog_posts, name='blog_list'),
    path('blog/<slug:slug>/', blog_post_detail, name='blog_detail'),
    # ... other URL patterns ...
]

----------------------------------------

TITLE: Using Theme CSS Variables in SVG
DESCRIPTION: Demonstrates how to utilize Directus theme CSS variables within SVG files to create theme-consistent previews. The variables adapt to project theme changes automatically.

LANGUAGE: css
CODE:
--theme--primary\n--theme--primary-subdued

----------------------------------------

TITLE: Implementing Create Hook for Meilisearch Indexing in Directus
DESCRIPTION: JavaScript code implementing a Directus action hook to index newly created articles in Meilisearch.

LANGUAGE: javascript
CODE:
export default ({ action }) => {
  action('articles.items.create', async (meta) => {
    await index.addDocuments([{ id: meta.key, ...meta.payload }])
  })
}

----------------------------------------

TITLE: Fetching Blog Posts from Directus in SvelteKit
DESCRIPTION: Loads blog posts with related author data from Directus in a SvelteKit page load function.

LANGUAGE: javascript
CODE:
/** @type {import('./$types').PageLoad} */
import getDirectusInstance from '$lib/directus';
import { readItems } from '@directus/sdk';
export async function load({ fetch }) {
	const directus = getDirectusInstance(fetch);
	return {
		posts: await directus.request(readItems('posts', {
			fields: ['slug', 'title', 'publish_date', { author: ['name'] }],
			sort: ['-publish_date'],
		})),
	};
}

----------------------------------------

TITLE: Directus Docker Compose Configuration - YAML
DESCRIPTION: Docker Compose configuration for running Directus with PostgreSQL database connection.

LANGUAGE: yaml
CODE:
version: "3"
services:
  directus:
    image: directus/directus:10.8.3
    ports:
      - 80:80
    volumes:
      - ./uploads:/directus/uploads
      - ./extensions:/directus/extensions
    environment:
      PORT: 80
      KEY: "replace-with-random-value"
      SECRET: "replace-with-random-value"
      ADMIN_EMAIL: "admin@example.com"
      ADMIN_PASSWORD: "d1r3ctu5"
      DB_CLIENT: "pg"
      DB_HOST: "YOUR_RDS_DB_URL"
      DB_PORT: 5432
      DB_DATABASE: "postgres"
      DB_USER: "YOUR_DB_USER"
      DB_PASSWORD: "YOUR_DB_PASSWORD"
      DB_SSL__REJECT_UNAUTHORIZED: false
      WEBSOCKETS_ENABLED: true

----------------------------------------

TITLE: Replacing Image URLs in WordPress JSON Export
DESCRIPTION: This Python script processes a WordPress JSON export, extracts image URLs from post content, uploads images to Directus, and replaces old URLs with new Directus asset URLs.

LANGUAGE: python
CODE:
with open(json_file_path, "r") as file:
    data = json.load(file)

for post in data:
    content = post["Content"]
    if '<img src="' in content:
        start_index = content.index('<img src="') + 10
        end_index = content.index('"', start_index)
        image_url = content[start_index:end_index]
        new_image_url = upload_to_directus(image_url)
        post["Content"] = content.replace(image_url, new_image_url)

output_file_path = "modified_WP-data.json"
with open(output_file_path, "w") as file:
    json.dump(data, file, indent=4)

print("The JSON data has been updated with Directus image URLs.")

----------------------------------------

TITLE: Creating iOS Widget for Directus Sensor Data Display
DESCRIPTION: This script uses the Scriptable app to create an iOS widget that displays the latest sensor data from Directus. It fetches data using the Directus API, processes it, and creates a widget with temperature, oxygen, and heart rate information.

LANGUAGE: javascript
CODE:
const url = "https://my-directus.app/items/sensor_data?limit=1&sort=sort,-date_created"
const token = "xy-my-static-token"
async function getData(url) {
  let request = new Request(url);
  let authHeader = "Bearer " + token
  request.headers = { "Authorization": authHeader }

  let data = await request.loadJSON();
  return data;
}
function processData(data) {
  console.log(data)
  let processedData = {
    "placement": data.data[0].placement,
    "battery": {
      "level": data.data[0].battery_level,
      "state": data.data[0].battery_state
    },
    "termal": {
      "state": "",
      "value": data.data[0].temperature
    },
    "oxygen": {
      "state": "",
      "value": data.data[0].oxygen
    },
    "heart_rate": {
      "state": "",
      "value": data.data[0].heart_rate
    },
    "reldate": new RelativeDateTimeFormatter().string(new Date(data.data[0].date_created), new Date()),
    "datecreated":
      new Date(data.data[0].date_created).getHours() + ":" +
      String(new Date(data.data[0].date_created).getMinutes()).padStart(2, "0")
  }

  return processedData;
}
function createWidget(data) {
  var widget = new ListWidget();
  console.log(data.placement);
  switch (data.placement) {
    case 4:  // Charging
      var text = widget.addText("⚡️ " + data.battery.level + "% …");
      break;
    case "2":
      break;
    default:
      var text = widget.addText("🌡️ " + data.termal.value + "°C");
      var text = widget.addText("🫧 " + data.oxygen.value + " ♥️ " + data.heart_rate.value);
      break;
  }
  var text = widget.addText(data.datecreated);
  text.font = Font.regularRoundedSystemFont(12);
  return widget;
}
let data = await getData(url);
let processedData = processData(data);
let widget = await createWidget(processedData);
Script.setWidget(widget);
Script.complete()

----------------------------------------

TITLE: Configuring Sandbox in package.json
DESCRIPTION: Configuration required in package.json to enable sandbox mode for a Directus extension.

LANGUAGE: json
CODE:
"directus:extension": {
	"type": "endpoint",
	"path": "dist/index.js",
	"source": "src/index.js",
	"host": "^10.7.0",
	"sandbox": {
		"enabled": true,
		"requestedScopes": {}
	}
}

----------------------------------------

TITLE: Setting up Django Project and Virtual Environment
DESCRIPTION: Commands to create a new Django project, set up a virtual environment, and install necessary dependencies.

LANGUAGE: bash
CODE:
mkdir my_django_site && cd my_django_site
django-admin startproject config .
python -m venv env
source env/bin/activate  # On Windows use `env\Scripts\activate`
pip install django requests

----------------------------------------

TITLE: Using Functions in Directus API Queries
DESCRIPTION: Shows how to use functions in query parameters for more advanced filtering and data manipulation.

LANGUAGE: http
CODE:
GET /items/posts
	?filter[year(date_published)][_eq]=1968

LANGUAGE: graphql
CODE:
query {
	posts(filter: { date_published_func: { year: { _eq: 1968 } } }) {
		id
	}
}

# Due to GraphQL name limitations, append `_func` at the end of the field name and use the function name as the nested field.

LANGUAGE: js
CODE:
import { createDirectus, rest, readItems } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest());

const result = await directus.request(
	readItems('posts', {
		filter: {
			"year(date_published)": {
				_eq: 1968
			}
		},
	})
);

----------------------------------------

TITLE: Initializing Meilisearch Client in Directus Extension
DESCRIPTION: JavaScript code to initialize the Meilisearch client and create an index in a Directus extension.

LANGUAGE: javascript
CODE:
import { MeiliSearch } from 'meilisearch'

const client = new MeiliSearch({
  host: process.env.MEILISEARCH_HOST,
  apiKey: process.env.MEILISEARCH_API_KEY
})
const index = client.index('directus_index')

----------------------------------------

TITLE: Creating Blog Post Listing Template
DESCRIPTION: HTML template for rendering a list of blog posts fetched from Directus.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Blog Posts</title>
</head>
<body>
    <h1>Blog</h1>
    <ul>
        {% for post in posts %}
            <li>
                <a href="{% url 'blog_detail' post.slug %}">{{ post.title }}</a>
                <p>{{ post.publish_date }} by {{ post.author.name }}</p>
            </li>
        {% endfor %}
    </ul>
</body>
</html>

----------------------------------------

TITLE: Creating a ConfigMap for MariaDB
DESCRIPTION: This YAML defines a ConfigMap for MariaDB configuration. It includes MySQL configuration options that can be mounted into a MariaDB container.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mariadb
  labels:
    app: mariadb
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    max_allowed_packet=16M

----------------------------------------

TITLE: Implementing Form Submission in panel.vue
DESCRIPTION: Create a function to submit the form data to the Directus API and handle the response.

LANGUAGE: javascript
CODE:
function submitForm() {
  api
    .post(`/items/${props.collection}`, formData.value)
    .then((response) => {
      formResponse.value = response.data.data;
      responseDialog.value = true;
      formData.value = {};
    })
    .catch((error) => {
      formError.value = error;
      responseDialog.value = true;
    });
}

----------------------------------------

TITLE: Evaluating Sensor Data for Alerts in Directus Flow
DESCRIPTION: This script evaluates sensor data to determine if an alert should be created based on battery level. It's used within a Directus Flow to process incoming sensor data and prepare alert information for OpsGenie.

LANGUAGE: javascript
CODE:
module.exports = async function(data) {
    var rtn = {
    	"create_alert": false
    }
    if (data.$trigger.payload.battery_level < 20) {
    	rtn.create_alert = true
        rtn.alert_data = {
        	"category": "battery",
            "type": "info",
            "severity": "mid",
            "priority": "P3",
            "alias": "Low Battery",
            "message": "The battery is low. Right now it has "+data.$trigger.payload.battery_level+"%",
            "description": "The battery is low. Right now it has "+data.$trigger.payload.battery_level+"%"
        }
    }
    // ...
	return rtn;
}

----------------------------------------

TITLE: Configuring Environment Variables for Directus
DESCRIPTION: Example of setting up the Directus URL in a .env file for the Astro project.

LANGUAGE: bash
CODE:
DIRECTUS_URL=https://your-directus-project-url.com

----------------------------------------

TITLE: Database Configuration Environment Variables - YAML
DESCRIPTION: Environment variables configuration for connecting Directus to AWS RDS PostgreSQL database.

LANGUAGE: yaml
CODE:
  DB_CLIENT: "pg"
  DB_HOST: "YOUR_RDS_ENDPOINT"
  DB_PORT: YOUR_RDS_PORT
  DB_DATABASE: "postgres"
  DB_USER: "YOUR_DB_USERNAME"
  DB_PASSWORD: "YOUR_DB_USER_PASSWORD"

----------------------------------------

TITLE: Creating Dynamic Pages with Directus in Next.js
DESCRIPTION: React component for rendering dynamic pages based on data from Directus. It uses the slug parameter to fetch the appropriate page content.

LANGUAGE: jsx
CODE:
import directus from '@/lib/directus';
import { notFound } from 'next/navigation';
import { readItem } from '@directus/sdk';

async function getPage(slug) {
	try {
		const pages = await directus.request(readItems('pages', {
      fields: [{ slug }],
    }));
		return pages[0];
	} catch (error) {
		notFound();
	}
}

export default async function DynamicPage({ params }) {
	const page = await getPage(params.slug);
	return (
		<div>
			<h1>{page.title}</h1>
			<div dangerouslySetInnerHTML={{ __html: page.content }}></div>
		</div>
	);
}

----------------------------------------

TITLE: Implementing Delete Hook for Meilisearch Indexing in Directus
DESCRIPTION: JavaScript code implementing a Directus action hook to remove deleted articles from the Meilisearch index.

LANGUAGE: javascript
CODE:
action('articles.items.delete', async (meta) => {
  await index.deleteDocuments(meta.keys)
})

----------------------------------------

TITLE: Creating Blog Post Listing in Astro
DESCRIPTION: TypeScript code for an Astro page that fetches and displays a list of blog posts from Directus. It sorts posts by publish date and includes author information.

LANGUAGE: typescript
CODE:
---
import Layout from "../../layouts/Layout.astro";
import directus from "../../lib/directus";
import { readItems } from "@directus/sdk";

const posts = await directus.request(
  readItems("posts", {
    fields: [
      "slug",
      "title",
      "published_date",
      { author: ["name"] },
    ],
    sort: ["-published_date"],
  })
);
---

<Layout title="Blog">
  <main>
    <h1>Blog Posts</h1>
 <ul>
  {
    posts.map((post) => (
      <li>
        <a href={`/blog/${post.slug}`}>
          <h2>{post.title}</h2>
        </a>
        <span>
          {post.published_date} &bull; {post.author.name}
        </span>
      </li>
    ))
  }
 </ul>
  </main>
</Layout>

----------------------------------------

TITLE: Creating Replicas for a Directus Deployment
DESCRIPTION: This YAML demonstrates how to create multiple replicas of a Directus deployment for load balancing and high availability. It specifies 3 replicas of the Directus container.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: directus-Deployment
  labels:
    app: directus
spec:
  replicas: 3
  selector:
    matchLabels:
      app: directus
  template:
    metadata:
      labels:
        app: directus
    spec:
      containers:
      - name: directus
        image: directus:10.9.3
        ports:
          - containerPort: 80

----------------------------------------

TITLE: Nuxt App Template
DESCRIPTION: Base Vue template for the Nuxt application with route announcer

LANGUAGE: vue
CODE:
<template>
  <div>
    <NuxtRouteAnnouncer />
    <NuxtPage />
  </div>
</template>

----------------------------------------

TITLE: Configuring Request URL Operation for File Import in Directus Automate
DESCRIPTION: This snippet shows the configuration for a Webhook / Request URL operation in Directus Automate to import files. It includes the method, URL, and request body structure.

LANGUAGE: json
CODE:
{
  "url": "file_url"
}

----------------------------------------

TITLE: Creating Stripe Checkout Session in Next.js API Route
DESCRIPTION: API route handler to create a Stripe checkout session for room booking.

LANGUAGE: typescript
CODE:
import { NextResponse } from "next/server";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);

type RequestData = {
  first_name: string,
  last_name: string,
  email: string,
  phone_number: string,
  check_in_date: string,
  check_out_date: string,
  room_id: string,
  nights: number,
  total_price: string,
  roomType: string,
  price: number;
};

export async function POST(req: Request) {
  const {
    price,
    roomType,
    room_id,
    nights,
    check_in_date,
    check_out_date,
    first_name,
    last_name,
    phone_number,
    email,
  }: RequestData = await req.json();
  const totalPrice = price * 100;
  try {
    const stripeSession = await stripe.checkout.sessions.create({
      line_items: [
        {
          quantity: 1,
          price_data: {
            currency: "usd",
            product_data: {
              name: roomType,
              description: `Payment for ${nights} Night(s)`
            },
            unit_amount: totalPrice,
          },
        },
      ],
      mode: "payment",
      success_url: `${process.env.APP_URL}/bookings/success`,
      cancel_url: `${process.env.APP_URL}/bookings/checkout?checkInDate=${check_in_date}&checkOutDate=${check_out_date}&roomType=${roomType}&price=${price/nights}&room=${room_id}`,
      metadata: {
        nights,
        total_price: totalPrice,
        room_id,
        check_in_date,
        check_out_date,
        first_name,
        last_name,
        phone_number,
        email,
      },
    });
    return NextResponse.json({ url: stripeSession.url! });
  } catch (err) {
    console.log({ err });
    return NextResponse.json(
      { message: "An expected error occurred, please try again" },
      { status: 500 }
    );
  }
}

----------------------------------------

TITLE: Directory Permissions Command - Bash
DESCRIPTION: Command to set correct permissions for Directus directories.

LANGUAGE: bash
CODE:
sudo chown $USER:$USER extensions uploads

----------------------------------------

TITLE: Fetching Global Metadata in Next.js with Directus
DESCRIPTION: React component that fetches global metadata from Directus and renders it on the homepage. It demonstrates how to use the Directus SDK in an async component.

LANGUAGE: jsx
CODE:
import directus from '@/lib/directus';
import { readItems } from '@directus/sdk';

async function getGlobals() {
	return directus.request(readItems('global'));
}

export default async function HomePage() {
	const global = await getGlobals();
	return (
		<div>
			<h1>{global.title}</h1>
			<p>{global.description}</p>
		</div>
	);
}

----------------------------------------

TITLE: Implementing Sentry Backend Monitoring Hook
DESCRIPTION: Directus hook implementation that initializes Sentry SDK for backend monitoring with Express error handling integration.

LANGUAGE: javascript
CODE:
import { createRequire } from "module";
const require = createRequire(import.meta.url);
const Sentry = require('@sentry/node');

export default ({ init }, { env }) => {
	Sentry.init({
 		dsn: env.SENTRY_DSN,
		tracesSampleRate: 1.0
	});

	init('routes.custom.after', ({ app }) => {
		Sentry.setupExpressErrorHandler(app);
		console.log('-- Sentry Error Handler Added --');
	});
};

----------------------------------------

TITLE: Running Unit Tests in Directus
DESCRIPTION: Commands for running unit tests across all packages or for specific packages in the Directus project. Includes options for watch mode, coverage reports, and filtering test files.

LANGUAGE: bash
CODE:
pnpm --workspace-root test

# Run tests for a specific package (for example only in the api or app package)
pnpm --filter api test
pnpm --filter app test

# Start tests in watch mode
pnpm --filter api test -- --watch

# Enable coverage report
pnpm --filter api test -- --coverage

# Run specific test files using a filter pattern
pnpm --filter api test -- app.test.ts
pnpm --filter api test -- utils

----------------------------------------

TITLE: Google Cloud Authentication Commands
DESCRIPTION: Terminal commands for authenticating with Google Cloud and configuring Docker

LANGUAGE: bash
CODE:
gcloud auth login
gcloud config set project PROJECT_ID

LANGUAGE: bash
CODE:
gcloud auth configure-docker us-central1-docker.pkg.dev

LANGUAGE: bash
CODE:
docker tag directus:10.10.4 us-central1-docker.pkg.dev/directus-project/directus-repo/directus:10.10.4

LANGUAGE: bash
CODE:
docker push  us-central1-docker.pkg.dev/directus-project/directus-repo/directus:10.10.4

----------------------------------------

TITLE: Configuring CORS in Docker Compose
DESCRIPTION: Docker compose configuration to set content security policy for Directus preview iframe

LANGUAGE: yaml
CODE:
environment:
  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url

----------------------------------------

TITLE: Installing Dependencies and Creating Next.js Project
DESCRIPTION: Commands to create a new Next.js project, install necessary dependencies including the Directus SDK, and start the development server.

LANGUAGE: shell
CODE:
npx create-next-app@latest
✔ What is your project named? next-directus-app
✔ Would you like to use TypeScript? No
✔ Would you like to use ESLint? Yes
✔ Would you like to use Tailwind CSS? Yes
✔ Would you like to use `src/` directory? No
✔ Would you like to use App Router? (recommended) Yes
✔ Would you like to use Turbopack for next dev? No
✔ Would you like to customize the default import alias (@/*)? No

cd next-directus-app
npm install @directus/sdk
npm run dev

----------------------------------------

TITLE: Reading a Collection in Directus
DESCRIPTION: Shows how to read a collection's data using CollectionsService. It retrieves the data for a specific collection by name.

LANGUAGE: javascript
CODE:
router.get('/', async (req, res) => {
  const collectionsService = new CollectionsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  const data = await collectionsService.readOne('collection_name');

  res.json(data);
});

----------------------------------------

TITLE: Creating Dockerfile for Directus Deployment on DigitalOcean
DESCRIPTION: This Dockerfile sets up a Directus environment using a specific version, enables corepack for pnpm, sets proper permissions, exposes the correct port, and runs bootstrap and start commands.

LANGUAGE: dockerfile
CODE:
# syntax=docker/dockerfile:1.4
FROM directus/directus:10.6.2
USER root
RUN corepack enable \
&& corepack prepare pnpm@8.7.6 --activate \
&& chown node:node /directus
EXPOSE 8055
USER node
CMD : \
&& node /directus/cli.js bootstrap \
&& node /directus/cli.js start;

----------------------------------------

TITLE: Creating Dynamic Pages with Directus in Nuxt
DESCRIPTION: Vue component for dynamic routing and fetching page content from Directus.

LANGUAGE: vue
CODE:
<template>
	<h1>{{page.title}}</h1>
	<div v-html="page.content"></div>
</template>

<script setup>
const { $directus, $readItems } = useNuxtApp()
const route = useRoute()

const { data: page } = await useAsyncData('page', () => {
  return $directus.request($readItems('pages', [{slug}]))[0]
})

if (!page.value) throw createError({
  statusCode: 404,
  statusMessage: 'Page Not Found'
})
</script>

----------------------------------------

TITLE: Defining Input Options for Directus Operation
DESCRIPTION: JavaScript code defining the input options for the Directus operation in the app.js file.

LANGUAGE: javascript
CODE:
options: [
	{
		field: 'text',
		name: 'Text',
		type: 'string',
		meta: {
			width: 'full',
			interface: 'input',
		},
	},
],

----------------------------------------

TITLE: Defining a Service for MariaDB
DESCRIPTION: This YAML creates a Kubernetes Service for MariaDB, exposing it within the cluster. It uses ClusterIP type and maps port 3306 for MySQL connections.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: directus-mariadb
  labels:
    app: mariadb
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
  selector:
    labels:
      app.kubernetes.io/name: mariadb

----------------------------------------

TITLE: Cloud Storage Environment Variables
DESCRIPTION: Environment variables configuration for Google Cloud Storage integration

LANGUAGE: yaml
CODE:
STORAGE_LOCATIONS: gcs
STORAGE_GCS_DRIVER: gcs
STORAGE_GCS_BUCKET: YOUR_CLOUD_STORAGE_BUCKET_NAME
STORAGE_GCS_CREDENTIALS: YOUR_SERVICE_ACCOUNT_KEY_JSON
STORAGE_GCS_ROOT: cms/assets

----------------------------------------

TITLE: Creating Login Form Component in Next.js
DESCRIPTION: Implements a simple login form component that submits to the login API route.

LANGUAGE: typescript
CODE:
export default function LoginPage() {
  return (
    <>
      <h2>Login</h2>
      <form action="/api/auth/login" method="POST">
        <label>Email</label>
        <input type="email" name="email" required />
        <label>Password</label>
        <input type="password" name="password" required />
        <input type="submit" />
      </form>
    </>
  );
}

----------------------------------------

TITLE: Event Notification Email Template - HTML
DESCRIPTION: HTML template for formatting and sending event notification emails

LANGUAGE: html
CODE:
<body>
  Eventname: {{ event_name }}<br>
  Eventdate: {{ event_date }}<br>
  Context: {{ context }}<br>
  <p>
    Meta:<br>
    {% for metadata in meta %}
      {{ metadata.key }}: {{ metadata.value }}<br>
    {% endfor %}
  </p>
  Execution ID: {{ execution_id }}
</body>

----------------------------------------

TITLE: Setting Environment Variables for Directus Live Preview
DESCRIPTION: Configuration for Content Security Policy to allow iframe embedding of the Next.js application.

LANGUAGE: environment
CODE:
CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: "http://localhost:3000"

----------------------------------------

TITLE: Nginx Reverse Proxy Configuration
DESCRIPTION: Nginx configuration for setting up reverse proxy to forward requests to Directus application.

LANGUAGE: nginx
CODE:
server {
  listen 80;
  server_name directus.exampledomain.com;
  location / {
    proxy_pass http://localhost:8055;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
  }
}

----------------------------------------

TITLE: Rendering Individual Blog Post in SvelteKit
DESCRIPTION: Displays a single blog post with image fetched from Directus in a Svelte component.

LANGUAGE: svelte
CODE:
<script>
	import { PUBLIC_APIURL } from '$env/static/public';
	/** @type {import('./$types').PageData} */
	export let data;
</script>
<img src="{PUBLIC_APIURL}/assets/{data.post.image.filename_disk}?width=600" alt="{data.post.image.description}" />
<h1>{data.post.title}</h1>
<div>{@html data.post.content}</div>

----------------------------------------

TITLE: Subscription Report Email Template with LiquidJS
DESCRIPTION: A complete LiquidJS template for generating a weekly subscription report email, including table generation and data formatting.

LANGUAGE: liquid
CODE:
{% layout "example-base" %}
{% block header %}
    <h1>Weekly Subscription Report</h1>
{% endblock %}
{% block content %}
    <table>
        <thead>
            <tr>
                <th>Subscription</th>
                <th>New Members</th>
                </tr>
                </thead>
        <tbody>
            {% for item in report %}
                <tr>
                    <td>{{ item.subscription.name | capitalize }}</td>
                    <td>{{ item.count.customer_id }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
{% endblock %}

----------------------------------------

TITLE: Installing Dependencies with npm
DESCRIPTION: Commands to create a new Next.js project and install the Directus SDK.

LANGUAGE: bash
CODE:
npx create-next-app@latest next-live-preview
cd next-live-preview

LANGUAGE: bash
CODE:
npm install @directus/sdk

----------------------------------------

TITLE: Adding Content to Actions Prepend Slot
DESCRIPTION: Shows how to add content before the actions slot in a Directus custom module header.

LANGUAGE: vue
CODE:
<template #actions:prepend>
	ACTION PREPEND
</template>

----------------------------------------

TITLE: Implementing Authentication Check in SvelteKit
DESCRIPTION: Creates a function to check if the user is authenticated by fetching their information using Directus SDK.

LANGUAGE: javascript
CODE:
// src/lib/directus.js

import { readMe } from "@directus/sdk";


export const isAuthenticated = async () => {
  try {
    const user = await client.request(readMe());
    return { authenticated: !!user?.id, user };
  } catch (error) {
    console.error("Error checking authentication:", error);
    return { authenticated: false, user: null };
  }
};

----------------------------------------

TITLE: Initializing Directus SDK Connection
DESCRIPTION: Sets up the Directus SDK connection for both base and target projects with authentication configuration.

LANGUAGE: javascript
CODE:
import { createDirectus, authentication, rest, schemaSnapshot, schemaDiff, schemaApply } from '@directus/sdk';
const BASE_DIRECTUS_URL = 'https://your-base-project.directus.app';

const TARGET_DIRECTUS_URL = 'https://your-target-project.directus.app';

const baseDirectus = createDirectus(BASE_DIRECTUS_URL).with(rest());
const targetDirectus = createDirectus(TARGET_DIRECTUS_URL).with(rest());

await baseDirectus.login('base_email', 'base_password');
await targetDirectus.login('target_email', 'target_password');

----------------------------------------

TITLE: Setting a Session Cookie in Directus
DESCRIPTION: Login with email and password to receive and store a session cookie. This is done by adding a 'mode' property when logging in.

LANGUAGE: json
CODE:
// POST /auth/login

{
  "email": "hello@example.com",
  "password": "d1r3ctu5",
  "mode": "session"
}

// The token won't be returned in JSON response.

LANGUAGE: graphql
CODE:
mutation {
	auth_login(email: "hello@example.com", password: "d1r3ctu5", mode: "session") {
		access_token
		refresh_token
	}
}

LANGUAGE: javascript
CODE:
import { createDirectus, authentication } from '@directus/sdk';

const email = "hello@example.com";
const password = "d1r3ctu5";

const client = createDirectus('http://directus.example.com').with(authentication());

const token = await client.login(email, password, {mode: "session"});

----------------------------------------

TITLE: Defining a Basic Kubernetes Pod for Directus
DESCRIPTION: This YAML snippet demonstrates how to define a basic Kubernetes Pod for running a Directus container. It specifies the API version, kind of resource, metadata, and container details including image and port.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: directus
  labels:
    app: directus
spec:
  containers:
  - name: directus
    image: directus/directus:10.8.3
    ports:
      - name: http
        containerPort: 8055
        protocol: TCP

----------------------------------------

TITLE: Configuring Django Settings
DESCRIPTION: Python code to add the new app to INSTALLED_APPS and configure the templates directory in Django settings.

LANGUAGE: python
CODE:
INSTALLED_APPS = [
    ...  # Other installed apps
    'blog',  # Add this line
]

TEMPLATES = [
    {
        ...
        "DIRS": [BASE_DIR / "templates"],
        ...
    },
]

----------------------------------------

TITLE: Using Variables in LiquidJS Email Templates
DESCRIPTION: Shows how to use variables in LiquidJS templates, including conditional rendering.

LANGUAGE: liquid
CODE:
{% layout "my-custom-base" %}
{% block content %}
    <p>Hi{% if firstname %}{{ firstname }}{% endif %},</p>
{% endblock %}

----------------------------------------

TITLE: Implementing Split View in Directus Custom Module
DESCRIPTION: Shows how to add a split view feature to a Directus custom module, including toggle button and content container.

LANGUAGE: html
CODE:
<private-view :splitView="livePreviewMode" :split-view-min-width="310" :title="page_title">
	<template #actions>
		<v-button
			v-tooltip.bottom="!livePreviewMode ? 'Enable Split View' : 'Disable Split View'"
			rounded
			icon
			class="action-preview"
			:secondary="!livePreviewMode"
			@click="toggleSplitView"
		>
			<v-icon name="visibility" outline />
		</v-button>
	</template>


	<template #splitView>
		<div ref="livePreviewEl" class="live-preview">
			<div class="container">
				<div class="iframe-view">
					<div
						ref="resizeHandle"
						class="resize-handle"
						:style="{
							width: '100%',
							height: '100%',
							resize: 'both',
						}"
					>
						<!-- <iframe id="frame" ref="frameEl" :src="url" @load="onIframeLoad" /> -->
						SPLIT VIEW
					</div>
				</div>
			</div>
		</div>
	</template>
</private-view>

LANGUAGE: javascript
CODE:
const livePreviewMode = ref(false);

function toggleSplitView() {
	livePreviewMode.value = !livePreviewMode.value;
}

return { ..., toggleSplitView, livePreviewMode };

LANGUAGE: scss
CODE:
.live-preview {
	width: 100%;
	height: 100%;
	.container {
		width: 100%;
		height: calc(100% - 44px);
		overflow: auto;
	}
	.iframe-view {
		width: 100%;
		height: 100%;
		overflow: auto;
		display: grid;
		padding: 48px;
		#frame {
			width: 100%;
			height: 100%;
			border: 0;
		}
		.resize-handle {
			overflow: hidden;
			box-shadow: 0px 4px 12px -4px rgba(0, 0, 0, 0.2);
		}
	}
}

----------------------------------------

TITLE: Configuring Cookie Authentication Mode in Directus SDK
DESCRIPTION: Sets up the Directus client to use cookie-based authentication mode.

LANGUAGE: javascript
CODE:
// src/lib/directus.js
import {createDirectus, rest,authentication} from "@directus/sdk";
const directusUrl = "http://localhost:8055";
export const client = createDirectus(directusUrl)
 .with(authentication("cookie"))
 .with(rest());

----------------------------------------

TITLE: Importing Posts to Directus using Python
DESCRIPTION: This Python function reads posts from a JSON file and imports them into Directus using the API. It handles post title, content, and date.

LANGUAGE: python
CODE:
import json
import requests

def import_posts_to_directus(json_file_path, directus_url, api_key):
    with open(json_file_path, "r") as file:
        posts = json.load(file)
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    for post in posts:
        payload = {
            "Title": post["Title"],
            "Content": post["Content"],
            "Date": post["Date"],
        }
        response = requests.post(
            f"{directus_url}/items/Posts", headers=headers, json=payload
        )
        if response.status_code in [200, 201]:
            print(f"Post '{post['Title']}' imported successfully.")
        else:
            print(f"Failed to import post '{post['Title']}': {response.text}")

# Example usage
json_file_path = "modified_WP-data.json"
directus_url = "https://your.directus.app"
api_key = "your-api-token"
import_posts_to_directus(json_file_path, directus_url, api_key)

----------------------------------------

TITLE: Adding Environment Variables to a Directus Pod
DESCRIPTION: This example shows how to add environment variables to a Directus Pod definition. It includes setting the PUBLIC_URL for the Directus instance.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: directus-app
  labels:
    app: directus
spec:
  containers:
  - name: directus
    image: directus/directus:10.8.3
    ports:
      - containerPort: 80
    env:
      - name: PUBLIC_URL
        value: https://directus.app

----------------------------------------

TITLE: Implementing Main App Widget
DESCRIPTION: Dart code for the main app widget, using FutureBuilder to fetch and display data from Directus.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'services/directus_service.dart';
import 'package:flutter_dotenv/flutter_dotenv';
import 'screens/home_screen.dart';

Future main() async {
  await dotenv.load(fileName: ".env");
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  final DirectusService _directusService = DirectusService();
  MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: Future.wait([
        _directusService.getGlobalMetadata(),
      ]),
      builder: (context,
          AsyncSnapshot<List<Map<String, dynamic>>> settingsSnapshot) {
        if (settingsSnapshot.connectionState == ConnectionState.waiting) {
          return const CircularProgressIndicator();
        } else if (settingsSnapshot.hasError) {
          return Text('Error: ${settingsSnapshot.error}');
        } else {
          final metadata = settingsSnapshot.data![0];
          return MaterialApp(
            title: metadata['title'],
            theme: ThemeData(
              primarySwatch: Colors.blue,
            ),
            home: FutureBuilder<Map<String, dynamic>>(
              future: _directusService.getPages(),
              builder: (context, pagesSnapshot) {
                if (pagesSnapshot.connectionState == ConnectionState.waiting) {
                  return const CircularProgressIndicator();
                } else if (pagesSnapshot.hasError) {
                  return Text('Error: ${pagesSnapshot.error}');
                } else {
                  final pages = pagesSnapshot.data!;
                  return pages.isNotEmpty
                      ? PageWidget(
                          page: pages,
                        )
                      : const Text('No pages found');
                }
              },
            ),
          );
        }
      },
    );
  }
}

----------------------------------------

TITLE: Extending a Base Email Template in LiquidJS
DESCRIPTION: Shows how to extend a base template and override specific blocks in LiquidJS.

LANGUAGE: liquid
CODE:
{% layout "my-custom-base" %}
{% block content %}
    <p>Content Here</p>
{% endblock %}

----------------------------------------

TITLE: Implementing Breadcrumb in Headline Slot
DESCRIPTION: Shows how to add a breadcrumb navigation to the headline slot of a Directus custom module.

LANGUAGE: vue
CODE:
<template v-if="breadcrumb" #headline>
	<v-breadcrumb :items="breadcrumb" />
</template>

LANGUAGE: javascript
CODE:
[
	{
		name: 'Home',
		to: '/landing-page',
	},
]

----------------------------------------

TITLE: Implementing Directus Operation API in JavaScript
DESCRIPTION: JavaScript code for the api.js file, defining the operation's logic using the lodash package.

LANGUAGE: javascript
CODE:
import { defineOperationApi } from '@directus/extensions-sdk';
import { camelCase } from 'lodash';

export default defineOperationApi({
	id: 'operation-lodash-camelcase',
	handler: ({ text }) => {
		return {
			text: camelCase(text)
		};
	},
});

----------------------------------------

TITLE: Configuring JSON Authentication Mode in Directus SDK
DESCRIPTION: Sets up the Directus client to use JSON authentication mode.

LANGUAGE: javascript
CODE:
// src/lib/directus.js

import {createDirectus, rest,authentication} from "@directus/sdk";
const directusUrl = "http://localhost:8055";
export const client = createDirectus(directusUrl)
 .with(authentication("json"))
 .with(rest());

----------------------------------------

TITLE: Dynamic Route Data Fetching with Directus
DESCRIPTION: Implementation of getStaticProps for dynamic routes to fetch individual blog posts using Directus SDK.

LANGUAGE: javascript
CODE:
export const getStaticProps = async (context) => {
  const blogId = context.params?.blogId;
  const directus = new Directus(process.env.DIRECTUS_URL);
  const blog = await directus.items('blogs').readOne(blogId);
  blog.image = `${process.env.DIRECTUS_URL}assets/${blog.image}`;
  return {
    props: { blog },
  };
};

----------------------------------------

TITLE: Updating Blog Post Component with Preview Support
DESCRIPTION: Modified version of the blog post component that includes preview mode support using the custom preview plugin.

LANGUAGE: vue
CODE:
<script setup>
const { $directus, $readItem, $preview } = useNuxtApp();
const route = useRoute();

if ($preview) {
  const post = await useAsyncData('post', () => {
    return $directus.request($readItem('posts', route.params.id))
  });
}

const post = await useAsyncData('post', () => {
  return $directus.request($readItem('posts', route.params.id))
});

if (!post.value) throw createError({
  statusCode: 404,
  statusMessage: 'Post Not Found'
});
</script>

----------------------------------------

TITLE: Defining a StatefulSet for MariaDB
DESCRIPTION: This YAML snippet shows how to create a StatefulSet for MariaDB, which is often used as a database for Directus. It includes volume mounts and claims for persistent storage.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: directus-mariadb
  labels:
    app: mariadb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb
  serviceName: directus-mariadb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mariadb
    spec:
      containers:
        - name: mariadb
          image: mariadb:10.9.7
          ports:
            - name: mariadb
              containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
            - name: config
              mountPath: /opt/bitnami/mariadb/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: directus-mariadb
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: directus
          app.kubernetes.io/name: mariadb
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"

----------------------------------------

TITLE: Loading Environment Variables in Dart
DESCRIPTION: Dart code to import flutter_dotenv and load environment variables in the main function.

LANGUAGE: dart
CODE:
import 'package:flutter_dotenv/flutter_dotenv.dart';

Future main() async {
  await dotenv.load(fileName: ".env");
  runApp(MyApp());
}

----------------------------------------

TITLE: Adding Clickable Icon to Title Outer Append Slot
DESCRIPTION: Shows how to add a clickable icon button to the right of the title using the title-outer:append slot in a Directus custom module.

LANGUAGE: vue
CODE:
<template #title-outer:append>
	<v-icon
		clickable
		name="add_circle"
		@click="buttonAction()"
	/>
</template>

----------------------------------------

TITLE: Complete Phone Validation Hook Implementation
DESCRIPTION: Full implementation of the Directus hook that validates phone numbers using Twilio Lookup API. Includes error handling and input validation.

LANGUAGE: javascript
CODE:
import { InvalidPayloadError } from "@directus/errors";

export default ({ filter }, { env }) => {
	filter('items.create', async (input, { collection }) => {
		if (collection !== 'customers') return input;

		if (input.phone_number === undefined) {
			throw new InvalidPayloadError({ reason: 'No Phone Number has been provided' });
		}

		const accountSid = env.TWILIO_ACCOUNT_SID;
		const authToken = env.TWILIO_AUTH_TOKEN;
		const client = new twilio(accountSid, authToken);

		client.lookups.v2
			.phoneNumbers(input.phone_number)
			.fetch()
			.then((phoneNumber) => {
				if (!phoneNumber.valid) {
					throw new InvalidPayloadError({ reason: 'Phone Number is not valid' });
				}

				return input;
			});
	});
};

----------------------------------------

TITLE: Building Panel View Component in Vue
DESCRIPTION: Vue component code implementing the SMS panel interface with form controls and Twilio API integration

LANGUAGE: vue
CODE:
<template>
  <v-notice
    v-if="twilioSid === undefined || twilioPhoneNumber === undefined"
    type="danger"
    icon="warning"
    class="sms-notice"
  >
    Twilio API Details Missing
  </v-notice>
  <div v-else class="twilio-sms" :class="{ 'has-header': showHeader }"></div>
</template>

----------------------------------------

TITLE: Creating Blog Post Detail Template
DESCRIPTION: HTML template for rendering individual blog posts fetched from Directus.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ post.title }}</title>
</head>
<body>
    <article>
        <header>
            <h1>{{ post.title }}</h1>
            <p>Published on: {{ post.publish_date }} by {{ post.author.name }}</p>
        </header>
        <section>
            {{ post.content | safe }}
        </section>
    </article>
</body>
</html>

----------------------------------------

TITLE: Formatting Date Function for Blog Posts in JavaScript
DESCRIPTION: A utility function that formats dates into a human-readable US format with month, day, and year.

LANGUAGE: javascript
CODE:
const formatDate = (date: string) => {
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

----------------------------------------

TITLE: Querying Scheduled Articles with Directus JavaScript SDK
DESCRIPTION: JavaScript code using the Directus SDK to query articles that are published and have a publish date less than or equal to the current timestamp.

LANGUAGE: js
CODE:
// Initialize the SDK.
import { createDirectus, rest, readItems } from '@directus/sdk';

const directus = createDirectus('https://directus.example.com').with(rest());

const articles = await directus.request(
	readItems('articles', {
		filter: {
			_and: [
				{
					status: {
						_eq: 'published',
					},
				},
				{
					date_published: {
						_lte: '$NOW',
					},
				},
			],
		},
	})
);

----------------------------------------

TITLE: Adding Volumes to a Directus Deployment
DESCRIPTION: This example shows how to add a temporary volume (emptyDir) to a Directus deployment. The volume is mounted at /tmp and is non-persistent, being emptied when the pod restarts.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: directus-Deployment
  labels:
    app: directus
spec:
  selector:
    matchLabels:
      app: directus
  template:
    metadata:
      labels:
        app: directus
    spec:
      containers:
      - name: directus
        image: directus/directus:10.9.3
        ports:
          - containerPort: 80
        env:
          - name: PUBLIC_URL
            value: https://directus.app
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}

----------------------------------------

TITLE: Implementing ArticleService Interface in Java
DESCRIPTION: Creates the ArticleServiceImpl class to fetch articles from Directus API using RestTemplate. Deserializes the JSON response into Article objects.

LANGUAGE: java
CODE:
package com.directus.blog.service;

import com.directus.blog.model.Article;
import com.directus.blog.model.ArticleDTO;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Objects;

@Service
public class ArticleServiceImpl implements ArticleService{
    private final String BASEURL = "YOUR_DIRETUS_PROJECT_URL/items/articles";
    @Override
    public List<Article> getAllArticles() {
        return Objects.requireNonNull(new RestTemplate().exchange(
                BASEURL,
                HttpMethod.GET,
                null,
                new ParameterizedTypeReference<ArticleDTO>() {
                }
        ).getBody()).getArticles();
    }
}

----------------------------------------

TITLE: Adding Content to Slots in Vue Template
DESCRIPTION: Demonstrates how to add content to various slots in a Directus custom module using Vue template syntax.

LANGUAGE: vue
CODE:
<template #slot_name>
	// Content to insert into the slot
</template>

----------------------------------------

TITLE: Installing Directus SDK in Astro Project
DESCRIPTION: Command to install the Directus JavaScript SDK in the Astro project directory.

LANGUAGE: bash
CODE:
npm i @directus/sdk

----------------------------------------

TITLE: Importing Required Dependencies
DESCRIPTION: Importing Twilio client and Directus error handling utilities.

LANGUAGE: javascript
CODE:
import twilio from 'twilio';
import { InvalidPayloadError } from "@directus/errors";

----------------------------------------

TITLE: Creating Dynamic Page Template
DESCRIPTION: HTML template for rendering dynamic pages fetched from Directus.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ page.title }}</title>
</head>
<body>
    <main>
        {{ page.content|safe }}
    </main>
</body>
</html>

----------------------------------------

TITLE: Asset Helper Plugin for Directus URLs
DESCRIPTION: Plugin enhancement to add a global asset helper for handling Directus asset URLs throughout the application.

LANGUAGE: javascript
CODE:
export default({ app }, inject) => {
   inject('directus', directus)
   const asset = (id) => `${DIRECTUS_URL}/assets/${id}`
   inject('asset', asset)
}

----------------------------------------

TITLE: Deleting a Field in Directus
DESCRIPTION: Shows how to delete a field from a collection using FieldsService. It removes the specified field and returns the result.

LANGUAGE: javascript
CODE:
router.delete('/', async (req, res) => {
  const fieldsService = new FieldsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  const data = await fieldsService.deleteField('collection_name', 'field_name');

  res.json(data);
});

----------------------------------------

TITLE: Creating a Service for Directus
DESCRIPTION: This YAML defines a Kubernetes Service for Directus, exposing it within the cluster. It uses ClusterIP type and maps port 80 to the Directus container port 8055.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: directus
    app.kubernetes.io/name: directus
  name: directus
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8055
  selector:
    labels:
      app: directus
  type: ClusterIP

----------------------------------------

TITLE: Flask Environment Configuration
DESCRIPTION: Python script to load environment variables using python-dotenv

LANGUAGE: python
CODE:
from dotenv import load_dotenv

load_dotenv()

----------------------------------------

TITLE: Implementing Permissions in Directus Custom Module
DESCRIPTION: Demonstrates how to implement permission-based access control in a Directus custom module using the permissions store.

LANGUAGE: javascript
CODE:
import { useApi, useStores } from '@directus/extensions-sdk';

// At the top of setup():
const { usePermissionsStore } = useStores();
const { hasPermission } = usePermissionsStore();
const permission = hasPermission('page', 'read');

// At the bottom of setup():
return { ..., permission };

LANGUAGE: vue
CODE:
<private-view v-if="!permission" title="401: Unauthorized">
	<v-info icon="block" title="Unauthorized Access" type="danger">
		You do not have permission to access this page
	</v-info>
</private-view>

<private-view v-else :title="page_title">
	// Existing Content
</private-view>

----------------------------------------

TITLE: Creating Django View for Home Page
DESCRIPTION: Python code for a Django view that fetches global settings from Directus and renders the home page.

LANGUAGE: python
CODE:
from django.shortcuts import render
from .directus_integration import get_global_settings

def home_page(request):
    global_settings = get_global_settings()
    context = {
        'title': global_settings['data']['title'],
        'description': global_settings['data']['description']
    }
    return render(request, 'home.html', context)

----------------------------------------

TITLE: Updating Directus File with Extracted Tags
DESCRIPTION: JSON payload for updating a Directus file with extracted tags. It uses the concepts variable from the previous script operation.

LANGUAGE: json
CODE:
{
	"tags": "{{concepts}}"
}

----------------------------------------

TITLE: Dynamic Page Template with Jinja
DESCRIPTION: Template for rendering dynamic pages with title and content from Directus

LANGUAGE: jinja
CODE:
{% extends "base.html" %}
{% block content %}
	<h1>{% block title %}{{ title }}{% endblock %}</h1>
	<article>{{ content | safe }}</article>
{% endblock %}

----------------------------------------

TITLE: Implementing Vue Display Component
DESCRIPTION: Vue component that handles the age calculation logic and display formatting using date-fns library

LANGUAGE: vue
CODE:
<template>
  <div>{{ calculateAge() }}</div>
</template>

<script>
import { differenceInYears, intervalToDuration, parseISO } from 'date-fns';
export default {
  props: {
    value: {
      type: String,
      default: null,
    },
    show_months: {
      type: Boolean,
      default: false,
    }
  },
  setup(props){
    function calculateAge(){
      if(props.show_months){
        const { years, months } = intervalToDuration({ start: parseISO(props.value), end: new Date()});
        return `${years} years ${months} months`;
      } else {
        const age = differenceInYears(new Date(), parseISO(props.value));
        return `${age} years`;
      }
    }

    return calculateAge;
  },
};
</script>

----------------------------------------

TITLE: Configuring Limits and Optimizations in Directus
DESCRIPTION: Environment variables for configuring hard technical limits and optimizations in Directus to prevent abuse and optimize server performance.

LANGUAGE: markdown
CODE:
| Variable                    | Description                                                                                 | Default Value |
| --------------------------- | ------------------------------------------------------------------------------------------- | ------------- |
| `RELATIONAL_BATCH_SIZE`     | How many rows are read into memory at a time when constructing nested relational datasets.  | 25000         |
| `EXPORT_BATCH_SIZE`         | How many rows are read into memory at a time when constructing exports.                     | 5000          |
| `USERS_ADMIN_ACCESS_LIMIT`  | How many active users with admin privilege are allowed.                                     | `Infinity`    |
| `USERS_APP_ACCESS_LIMIT`    | How many active users with access to the Data Studio are allowed.                           | `Infinity`    |
| `USERS_API_ACCESS_LIMIT`    | How many active API access users are allowed.                                               | `Infinity`    |
| `GRAPHQL_QUERY_TOKEN_LIMIT` | How many GraphQL query tokens will be parsed.                                               | 5000          |
| `MAX_PAYLOAD_SIZE`          | Controls the maximum request body size. Accepts number of bytes, or human readable string.  | `1mb`         |
| `MAX_RELATIONAL_DEPTH`      | The maximum depth when filtering / querying relational fields, with a minimum value of `2`. | `10`          |
| `QUERY_LIMIT_DEFAULT`       | The default query limit used when not defined in the API request.                           | `100`         |
| `QUERY_LIMIT_MAX`           | The maximum query limit accepted on API requests.                                           | `-1`          |

----------------------------------------

TITLE: Deleting Items via WebSocket in Directus
DESCRIPTION: Request format for deleting items from a collection using WebSockets. Supports single item, multiple items, and query-based deletion.

LANGUAGE: json
CODE:
{
	"type": "items",
	"action": "delete",
	"collection": "your_collection_name",
	"id": "single_item_id"
}

LANGUAGE: json
CODE:
{
	"type": "items",
	"event": "delete",
	"data": ["single_item_id", "single_item_id_2"]
}

----------------------------------------

TITLE: Setting Up Flask Virtual Environment
DESCRIPTION: Shell commands to create and activate a virtual environment and install required dependencies

LANGUAGE: sh
CODE:
python3 -m venv .venv
source .venv/bin/activate  # On Windows you should use `.venv\Scripts\activate`
pip install Flask requests python-dotenv

----------------------------------------

TITLE: Building Directus Stripe Hook
DESCRIPTION: Command to build the Directus hook after implementation.

LANGUAGE: shell
CODE:
npm run build

----------------------------------------

TITLE: Implementing Init Hook
DESCRIPTION: Example showing how to implement an init hook for lifecycle events in Directus.

LANGUAGE: javascript
CODE:
export default ({ init }) => {
	init('routes.before', (meta) => {
		console.log(meta);
	});
};

----------------------------------------

TITLE: Constructing Clarifai API Request Body in Directus Flow
DESCRIPTION: JSON structure for the request body sent to Clarifai API. It includes the URL of the uploaded image file, using the trigger key to construct the asset URL.

LANGUAGE: json
CODE:
{
	"inputs": [
    	{
        	"data": {
            	"image": {
                	"url": "YOUR-DIRECTUS-PROJECT-URL/assets/{{$trigger.key}}"
                }
            }
        }
    ]
}

----------------------------------------

TITLE: Home View Template
DESCRIPTION: Blade template for rendering the home page with global metadata from Directus.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ $settings['site_title'] }}</title>
</head>
<body>
    <h1>{{ $settings['site_title'] }}</h1>
    <p>{{ $settings['site_description'] }}</p>
</body>
</html>

----------------------------------------

TITLE: Configuring Display Extension Settings
DESCRIPTION: Configuration file that defines the display extension's properties, including ID, name, icon, and supported field types

LANGUAGE: javascript
CODE:
import DisplayComponent from './display.vue';

export default {
  id: 'directus-display-age',
  name: 'Display Age',
  icon: 'calendar_month',
  description: 'Display the current age from the date of birth',
  component: DisplayComponent,
  options: null,
  types: ['date'],
};

----------------------------------------

TITLE: Video Type Definition
DESCRIPTION: TypeScript interface defining the structure of video data

LANGUAGE: typescript
CODE:
export interface Video {
  id: string;
  title: string;
  description: string;
  video_file:  { id: string };
  thumbnail: { id: string };
  tags: string[];
  duration: number;
  views: number;
  upload_date: string;
}

----------------------------------------

TITLE: Reading Single Items via WebSocket in Directus
DESCRIPTION: Request format for reading a single item from a collection using WebSockets. Requires collection name and item ID.

LANGUAGE: json
CODE:
{
	"type": "items",
	"action": "read",
	"collection": "your_collection_name",
	"id": "single_item_id"
}

LANGUAGE: json
CODE:
{
	"type": "items",
	"data": {
		// ...
	}
}

----------------------------------------

TITLE: Creating Dynamic Page Component in Next.js
DESCRIPTION: Defines a React component for rendering a dynamic page with blocks fetched from Directus based on the URL slug.

LANGUAGE: jsx
CODE:
import React from "react";
import Hero from "../components/Hero";
import CardGroup from "../components/CardGroup";
import RichText from "../components/RichText";
import client from "@/lib/directus";
import { readItems } from "@directus/sdk";

const blockToComponent = (collectionName) => {
    switch (collectionName) {
        case "block_hero":
            return Hero;
        case "block_richtext":
            return RichText;
        case "block_cardgroup":
            return CardGroup;
        default:
            return null;
    }
}

export default async function Page({ params }) {
    const { slug } = await params;
    
    let page

    page = await client.request(readItems('pages', {
        filter: {
			slug: { _eq: slug },
		},
		fields: ['title', 'slug', 'blocks.id', 'blocks.collection', 'blocks.item.*', 'blocks.item.posts.*.*', 'blocks.item.cards.*.*'],
		limit: 1
    }))

    return (
        <div>
            <h1>{page[0].title}</h1>
            {page[0]?.blocks?.map((block, index) => {
                const Component = blockToComponent(block.collection);
                return <Component key={index} {...(block.item)} />;
            })}
        </div>
    );
}

----------------------------------------

TITLE: Configuring Sandboxed Operation with TypeScript in Directus
DESCRIPTION: This snippet demonstrates how to configure a sandboxed operation using TypeScript in Directus. It imports the SandboxOperationConfig type and defines the operation's ID and handler function.

LANGUAGE: typescript
CODE:
/// <reference types="@directus/extensions/api.d.ts" />
import type { SandboxOperationConfig } from "directus:api";

const operation: SandboxOperationConfig = {
	id: 'custom',
	handler: (options) => {
	},
};

export default operation;

----------------------------------------

TITLE: Reading and Transforming Directus Assets with TypeScript
DESCRIPTION: Initializes a Directus client and requests an asset with image transformations. The code applies blur and tint effects while also specifying dimensions and fit parameters for the output image.

LANGUAGE: typescript
CODE:
import { createDirectus, rest, readAssetRaw } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest());

const result = await directus.request(
  readAssetRaw('file_id', {
    transforms: [['blur', 10], ['tint', 'rgb(102, 68, 255)']],
    fit: 'cover',
    width: 300,
    height: 100,
  }),
);

----------------------------------------

TITLE: Configuring Condition for Image File Type in Directus Flow
DESCRIPTION: JSON configuration for a condition operation in Directus Flow to check if the uploaded file is an image. It uses the file type from the trigger payload.

LANGUAGE: json
CODE:
{
	"$trigger": {
    	"payload": {
        	"type": {
            	"_contains": "image"
            }
        }
    }
}

----------------------------------------

TITLE: Rendering Blog Post List in SvelteKit
DESCRIPTION: Displays a list of blog posts fetched from Directus in a Svelte component.

LANGUAGE: svelte
CODE:
<script>
	/** @type {import('./$types').PageData} */
	export let data;
</script>
<h1>Blog</h1>
<ul>
	{#each data.posts as post}
		<li>
			<h2>
				<a href="/blog/{post.slug}">
					{post.title}
				</a>
			</h2>
			<span>{post.publish_date} &bull; {post.author.name}</span>
		</li>
	{/each}
</ul>

----------------------------------------

TITLE: Updating Weather Panel Template in Vue.js
DESCRIPTION: Modifies the Vue template to display the fetched weather data in the custom panel.

LANGUAGE: vue
CODE:
<template>
	<div class="text" :class="{ 'has-header': showHeader }">
        {{ text }}  // [!code --]
		{{ weather }}  // [!code ++]
	</div>
</template>

----------------------------------------

TITLE: Configuring Log Levels in Directus
DESCRIPTION: JSON object showing the log levels used by Directus, which are based on the pino logging library. Each level is associated with a numeric value, with 'trace' being the most verbose and 'fatal' being the most critical.

LANGUAGE: json
CODE:
{
  "trace": 10,
  "debug": 20,
  "info": 30,
  "warn": 40,
  "error": 50,
  "fatal": 60
}

----------------------------------------

TITLE: Filtering Specific CRUD Operations in GraphQL Subscriptions
DESCRIPTION: Use the 'event' argument in a GraphQL subscription to filter for specific CRUD operations (create, update, delete).

LANGUAGE: graphql
CODE:
subscription {
	posts_mutated(event: create) {
		key
		data {
			text
		}
	}
}

----------------------------------------

TITLE: Creating Hero Component in Vue
DESCRIPTION: Defines a Vue component for rendering a hero block with headline, content, and buttons.

LANGUAGE: vue
CODE:
<script setup lang="ts">
defineProps<{
	id: string,
	headline: string,
	content: string,
	buttons?: Button[]
	image: string,
}>()
</script>
<template>
	<h2>{{ headline }}</h2>
	<div v-html="content"></div>
	<div v-if="buttons">
		<button v-for="button in buttons" :key="button.label" :href="button.href" class="button"
			:class="button.variant">{{ button.label }}</button>
	</div>
</template>

<style scoped>
.button {
	background-color: grey;
	color: white;
}

.button.primary {
	background-color: green;
	color: white;
}

.button.outline {
	background-color: transparent;
	border: 1px solid black;
	color: black;
}
</style>

----------------------------------------

TITLE: Configuring Docker Compose for Directus Extension Auto-Reload
DESCRIPTION: Add an environment variable to the docker-compose.yml file to enable automatic reloading of extensions when they are rebuilt.

LANGUAGE: yaml
CODE:
EXTENSIONS_AUTO_RELOAD: true

----------------------------------------

TITLE: Fetching Global Settings
DESCRIPTION: JavaScript module to fetch global settings from Directus singleton collection

LANGUAGE: javascript
CODE:
import directus from './directus.js';
import { readSingleton } from '@directus/sdk';

export default async () => {
    return await directus.request(readSingleton('global'))
}

----------------------------------------

TITLE: Setting Query Filter for Scheduled Content in Directus Flow
DESCRIPTION: JSON query filter to select scheduled articles with a publish date less than or equal to the current timestamp in a Directus flow operation.

LANGUAGE: json
CODE:
{
	"filter": {
		"_and": [
			{
				"status": {
					"_eq": "scheduled"
				}
			},
			{
				"date_published": {
					"_lte": "$NOW"
				}
			}
		]
	}
}

----------------------------------------

TITLE: Configuring SvelteKit Server Hooks for Directus
DESCRIPTION: Sets up server hooks to ensure proper headers are returned for fetching JavaScript content.

LANGUAGE: javascript
CODE:
export async function handle({ event, resolve }) {
	return await resolve(event, {
		filterSerializedResponseHeaders: (key, value) => {
			return key.toLowerCase() === 'content-type';
		},
	});
}

----------------------------------------

TITLE: Implementing Weather Panel Setup in Vue.js
DESCRIPTION: Sets up the weather panel component, fetching weather data using the custom endpoint and making it available to the template.

LANGUAGE: javascript
CODE:
setup(props) {
	const api = useApi();
	const weather = ref({});

	async function fetchData() {
		const response = await api.get(`/weather?longitude=${props.longitude}&latitude=${props.latitude}`);
		weather.value = response.data;
	}
	fetchData();

	return { weather };
}

----------------------------------------

TITLE: Event Logger Payload Structure - JavaScript
DESCRIPTION: Example structure of the payload expected by the event logging system

LANGUAGE: javascript
CODE:
{
    event_name: string,
    context: string,
    execution_id: uuid,
    meta: Object | Array<Object>
}

----------------------------------------

TITLE: Unsubscribing from GraphQL Subscriptions in JavaScript
DESCRIPTION: Use the 'dispose' method to unsubscribe from a GraphQL subscription and stop receiving updates.

LANGUAGE: js
CODE:
client.dispose();

----------------------------------------

TITLE: Configuring Directus SDK Plugin for Nuxt
DESCRIPTION: Creates a Nuxt plugin to initialize the Directus SDK and provide it to the application.

LANGUAGE: typescript
CODE:
import {
	createDirectus,
	rest,
	readItems,
} from "@directus/sdk";
const directus = createDirectus<DirectusSchema>(
	"http://your-website-url/directus",
).with(rest());
export default defineNuxtPlugin(() => {
	return {
		provide: { directus, readItems },
	};
});

----------------------------------------

TITLE: Combined Transformations using SDK
DESCRIPTION: Demonstrates how to combine custom and advanced transformations using the Directus SDK

LANGUAGE: javascript
CODE:
import { createDirectus, rest, readAssetRaw } from '@directus/sdk';

const FILE_ID = 'c984b755-e201-497e-b0a7-24156ad9c7e0';

const directus = createDirectus('directus_project_url').with(rest());

const result = await directus.request(
  readAssetRaw(FILE_ID, {
    transforms: [['flip']],
    fit: 'cover',
    width: 300,
    height: 100,
  }),
);

----------------------------------------

TITLE: Creating Translation String Format
DESCRIPTION: Format for manually entering a translation string key in input fields. Translation strings are referenced using the $t: prefix followed by the translation key.

LANGUAGE: plaintext
CODE:
$t:translation-string-key

----------------------------------------

TITLE: Updating File Description with Deepgram Transcript in Directus Automate
DESCRIPTION: This JSON snippet configures the Update Data operation in Directus Automate to save the Deepgram transcript to the file's description field. It uses nested object notation to extract the transcript from the Deepgram response.

LANGUAGE: json
CODE:
{
    "description": "{{deepgram.data.results.channels[0].alternatives[0].paragraphs.transcript}}"
}

----------------------------------------

TITLE: Initializing Astro Project with npm
DESCRIPTION: Command to create a new Astro project using npm. It sets up the project with TypeScript support and sample files.

LANGUAGE: bash
CODE:
npm create astro@latest

----------------------------------------

TITLE: Adding Extensions Volume to Docker Compose
DESCRIPTION: Modifies the Docker Compose configuration to add a volume for Directus extensions.

LANGUAGE: yaml
CODE:
volumes:
  - ./database:/directus/database
  - ./uploads:/directus/uploads
  - ./extensions:/directus/extensions // [!code ++]

----------------------------------------

TITLE: Defining Props for panel.vue
DESCRIPTION: Set up the props for the panel component including collection, fields, and response format.

LANGUAGE: javascript
CODE:
props: {
  showHeader: {
    type: Boolean,
    default: false,
  },
  collection: {
    type: String,
    default: '',
  },
  fields: {
    type: Array,
    default: [],
  },
  responseFormat: {
    type: String,
    default: '',
  },
  width: String,
  height: String,
},

----------------------------------------

TITLE: Creating GraphQL WebSocket Client in JavaScript
DESCRIPTION: Use 'createClient' from 'graphql-ws' to establish a WebSocket connection for GraphQL subscriptions. Authenticate using the Directus URL and token.

LANGUAGE: js
CODE:
import { createClient } from "graphql-ws";

const client = createClient({
	url: "ws://your-directus-url/graphql",
	keepAlive: 30000,
	connectionParams: async () => {
		return { access_token: "MY_TOKEN" };
	},
});

----------------------------------------

TITLE: Configuring CORS in Directus Docker Compose
DESCRIPTION: Sets the Content Security Policy directive for frame-src in the Directus Docker environment to allow access from the Nuxt project URL.

LANGUAGE: yaml
CODE:
environment:
  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url

----------------------------------------

TITLE: Handling Collection Changes in GraphQL JSON Format
DESCRIPTION: Example of a JSON response received when a change occurs in a subscribed GraphQL collection. The event can be 'create', 'update', or 'delete'.

LANGUAGE: json
CODE:
{
	"posts_mutated": {
		"key": "1",
		"event": "create",
		"data": {
			"id": "1",
			"text": "Hello world!"
		}
	}
}

----------------------------------------

TITLE: Validating Directus Extension
DESCRIPTION: Command to validate a Directus extension using the CLI utility.

LANGUAGE: shell
CODE:
npx create-directus-extension@latest validate

----------------------------------------

TITLE: Conditional Check for 'Flag' Recommendation in Directus Flow
DESCRIPTION: This JSON condition checks if the risk_recommendation from the Vonage API response is 'flag'. It's used in a Directus Flow to determine whether to flag or block the registration.

LANGUAGE: json
CODE:
{
    "check_number": {
        "data": {
            "fraud_score": {
                "risk_recommendation": {
                    "_eq": "flag"
                }
            }
        }
    }
}

----------------------------------------

TITLE: Creating Directus SDK Helper in TypeScript
DESCRIPTION: TypeScript code to create a helper file for the Directus SDK. It defines types for various collections and initializes the SDK with the project URL.

LANGUAGE: typescript
CODE:
import { createDirectus, rest, } from '@directus/sdk';

type Global = {
  title: string;
  description: string;
}

type Author = {
  name: string
}

type Page = {
  title: string;
  content: string;
  slug: string;
}

type Post = {
  image: string;
  title: string;
  author: Author;
  content: string;
  published_date: string
  slug: string;
}

type Schema = {
  posts: Post[];
  global: Global;
  pages: Page[];
}

const directus = createDirectus<Schema>('YOUR_DIRECTUS_URL').with(rest());

export default directus;

----------------------------------------

TITLE: Configuring Vonage Panel Component
DESCRIPTION: Vue component implementation for displaying Vonage activity data in a table format with filtering options

LANGUAGE: vue
CODE:
<template>
  <div class="messages-table" :class="{ 'has-header': showHeader }">
    <v-progress-circular v-if="isLoading" class="is-loading" indeterminate />
    <v-notice v-else-if="errorMessage" type="danger">{{ errorMessage }}</v-notice>
    <v-notice v-else-if="activityData.length == 0" type="info">No Messages</v-notice>
    <table v-else cellpadding="0" cellspacing="0" border="0">
      <thead>
        <tr>
          <th v-if="direction == 'outbound'">Status</th>
          <th v-if="direction == 'outbound'">Sent</th>
          <th v-else>Received</th>
          <th v-if="includeMessage">Message</th>
          <th v-if="direction == 'outbound'">Recipient</th>
          <th v-else>From</th>
          <th>Provider</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="message in activityData" :key="message.message_id">
          <td v-if="direction == 'outbound'" class="ucwords">{{ message.status }}</td>
          <td class="nowrap">
            {{ formatDistanceToNow(parseISO(message.date_finalized ? message.date_finalized : message.date_received)) }} ago
          </td>
          <td v-if="includeMessage" class="message">{{ message.message_body }}</td>
          <td v-if="direction == 'outbound'">{{ message.to }}</td>
          <td v-else>{{ message.from }}</td>
          <td class="ucwords">{{ type == 'MESSAGES' ? message.provider : message.network_name }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

----------------------------------------

TITLE: Configuring Directus Operation UI (Complete app.js)
DESCRIPTION: Complete JavaScript code for the app.js file, defining the operation's UI configuration.

LANGUAGE: javascript
CODE:
export default {
	id: 'operation-lodash-camelcase',
	name: 'Lodash Camel Case',
	icon: 'electric_bolt',
	description: 'Use Lodash Camel Case Function.',
	overview: ({ text }) => [
		{
			label: 'Text',
			text: text,
		},
	],
	options: [
		{
			field: 'text',
			name: 'Text',
			type: 'string',
			meta: {
				width: 'full',
				interface: 'input',
			},
		},
	],
};

----------------------------------------

TITLE: Basic File Transformation using SDK
DESCRIPTION: Shows how to transform an image using the Directus SDK with basic transformation parameters

LANGUAGE: javascript
CODE:
import { createDirectus, rest, readAssetRaw } from '@directus/sdk';

const FILE_ID = 'c984b755-e201-497e-b0a7-24156ad9c7e0';

const directus = createDirectus('directus_project_url').with(rest());

const result = await directus.request(
  readAssetRaw(FILE_ID, {
    width: 300,
    height: 300,
    quality: 50,
    fit: 'contain',
  }),
);

----------------------------------------

TITLE: Configuring Directus Environment Variables
DESCRIPTION: Environment variable setup for Directus URL configuration

LANGUAGE: bash
CODE:
DIRECTUS_URL=https://your-directus-project-url.com

----------------------------------------

TITLE: Configuring Server Settings in Directus
DESCRIPTION: This snippet shows the environment variables used for configuring server settings in Directus, including timeouts for keep-alive, headers, and shutdown.

LANGUAGE: markdown
CODE:
| Variable                    | Description                                                        | Default Value                                                                                                |
| --------------------------- | ------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ |
| `SERVER_KEEP_ALIVE_TIMEOUT` | Timeout in milliseconds for socket to be destroyed.                | [server.keepAliveTimeout](https://github.com/nodejs/node/blob/master/doc/api/http.md#serverkeepalivetimeout) |
| `SERVER_HEADERS_TIMEOUT`    | Timeout in milliseconds to parse HTTP headers.                     | [server.headersTimeout](https://github.com/nodejs/node/blob/master/doc/api/http.md#serverheaderstimeout)     |
| `SERVER_SHUTDOWN_TIMEOUT`   | Timeout in milliseconds before the server is forcefully shut down. | 1000                                                                                                         |

----------------------------------------

TITLE: GraphQL Client Setup for Strict Mode
DESCRIPTION: Implementation of GraphQL client creation with access token as URL parameter for strict authentication mode.

LANGUAGE: javascript
CODE:
import { createClient } from "graphql-ws";

const client = createClient({
	url: "ws://your-directus-url/graphql?access_token=your-access-token",
	keepAlive: 30000,
});

----------------------------------------

TITLE: Setting Authorization Header for Vonage API Request in Directus
DESCRIPTION: This snippet shows how to set the Authorization header for a Vonage API request in Directus. It uses a Base64 encoded string of the API key and secret.

LANGUAGE: plaintext
CODE:
Authorization: Basic BASE_64_ENCODED_AUTH_STRING

----------------------------------------

TITLE: Creating Dynamic Page Template
DESCRIPTION: Nunjucks template for generating dynamic pages from Directus content

LANGUAGE: html
CODE:
---
layout: layouts/base.njk
pagination:
    data: pages
    size: 1
    alias: page
permalink: "{{ page.slug }}/index.html"
eleventyComputed:
    title: "{{ page.title }}"
---

<h1>{{ title }}</h1>
{{ page.content | safe }}

----------------------------------------

TITLE: Initializing Directus Extension Bundle
DESCRIPTION: Shell command to create a new Directus extension bundle using the create-directus-extension utility

LANGUAGE: shell
CODE:
npx create-directus-extension@latest

----------------------------------------

TITLE: Disabling 2FA in Directus
DESCRIPTION: POST request to disable 2FA for a user account. Requires a valid one-time password (OTP) from the authenticator app for verification.

LANGUAGE: json
CODE:
{
	"otp": "123456"
}

----------------------------------------

TITLE: SEO-Optimized File Access URL
DESCRIPTION: URL pattern that includes an optional filename after the file ID for SEO optimization and improved content disposition headers.

LANGUAGE: plaintext
CODE:
https://example.com/assets/<file-id>/<filename>\nhttps://example.com/assets/1ac73658-8b62-4dea-b6da-529fbc9d01a4/directus-logo.png

----------------------------------------

TITLE: Implementing Nuxt Preview Plugin
DESCRIPTION: Custom Nuxt plugin that enables preview mode functionality by checking for preview URL parameter and refreshing data when needed.

LANGUAGE: javascript
CODE:
export default defineNuxtPlugin((nuxtApp) => {
	const route = useRoute();
	const preview = route.query.preview && route.query.preview === 'true';

	if (preview) {
		nuxtApp.hook('page:finish', () => {
			refreshNuxtData();
		});
	}

	return { provide: { preview } };
});

----------------------------------------

TITLE: Structuring Directus Product Grid in Markdown
DESCRIPTION: This snippet defines a grid layout using custom Markdown components to showcase Directus products. It creates two main categories: Data Engine and Data Studio, each with a title, description, and associated product links.

LANGUAGE: markdown
CODE:
::shiny-grid
  :::shiny-card
  ---
  title: Data Engine
  description: APIs and developer tools for your data.
  class: col-span-6
  color: purple
  ---
  :product-link{product="connect"} :product-link{product="realtime"} :product-link{product="auth"} :product-link{product="automate"}
  :::

  :::shiny-card
  ---
  title: Data Studio
  description: A data web app your whole team will love.
  class: col-span-6
  color: pink
  ---
  :product-link{product="explore"} :product-link{product="editor"} :product-link{product="insights"} :product-link{product="files"}
  :::
::

----------------------------------------

TITLE: Implementing Post Display Page
DESCRIPTION: Next.js page component for displaying posts using the Directus SDK.

LANGUAGE: typescript
CODE:
import { directus, readItems } from '@/lib/directus';

export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>;
}) {
  const slug = (await params).slug;

  const posts = await directus.request(readItems('posts', {
    filter: {
			slug: { _eq: slug }
		},
		fields: ['id', 'title', 'content', 'slug', 'published'],
		limit: 1
  }));

  const post = posts[0];

  return (
    <>
      <h1>{post.title}</h1>
      <div dangerouslySetInnerHTML={{ __html: post.content }} />
    </>
  );
}

----------------------------------------

TITLE: Logger Initializer API Definition - TypeScript
DESCRIPTION: API implementation for the logger initializer with UUID generation and metadata processing

LANGUAGE: typescript
CODE:
import { defineOperationApi } from '@directus/extensions-sdk';
import { randomUUID as uuidv4 } from 'crypto';
import { mapValues, isPlainObject} from 'lodash';

type Options = {
	loggingContext: string;
	metaData: any
};

export default defineOperationApi<Options>({
	id: 'initialize_logger',
	handler: ({ loggingContext, metaData }, {logger}) => {
		const mapValuesDeep = (obj, fn) =>
			mapValues(obj, (val, key) =>
				isPlainObject(val) ? mapValuesDeep(val, fn) : fn(val, key, obj)
			)

		metaData = mapValuesDeep(metaData, function(val, key, obj) {
			if (key == 'password') {
				val = '*****'
			}

			return val;
		});

		return {uuid: uuidv4(), context: loggingContext, meta: metaData}
	},
});

----------------------------------------

TITLE: Creating Constants for Directus Configuration
DESCRIPTION: Defines constant values including the Directus base URL

LANGUAGE: kotlin
CODE:
package com.example.directusapp

object Constants {
    const val BASE_URL = "https://directus.example.com"
}

----------------------------------------

TITLE: Configuring Panel Options in index.js
DESCRIPTION: Define the panel's configuration options including collection selection, field selection, and response format.

LANGUAGE: javascript
CODE:
{
  field: 'collection',
  type: 'string',
  name: '$t:collection',
  meta: {
    interface: 'system-collection',
    options: {
      includeSystem: true,
      includeSingleton: false,
    },
    width: 'half',
  },
},
{
  field: 'fields',
  type: 'string',
  name: 'Included Fields',
  meta: {
    interface: 'system-field',
    options: {
      collectionField: 'collection',
      multiple: true,
    },
    width: 'half',
  },
},
{
  field: 'responseFormat',
  name: 'Response',
  type: 'string',
  meta: {
    interface: 'system-display-template',
    options: {
      collectionField: 'collection',
      placeholder: '{{ field }}',
    },
    width: 'full',
  },
}

----------------------------------------

TITLE: Importing Dependencies in panel.vue
DESCRIPTION: Import necessary Directus SDK components and Vue functions for the panel.

LANGUAGE: javascript
CODE:
import { useApi, useCollection, useStores } from '@directus/extensions-sdk';
import { ref, watch } from 'vue';

----------------------------------------

TITLE: Applying Image Transformation in Directus URL
DESCRIPTION: This snippet shows how to add a query parameter to transform an image in Directus. It demonstrates setting the width of an image to 200 pixels.

LANGUAGE: plaintext
CODE:
width=200

----------------------------------------

TITLE: Creating Dynamic Blog Post Page with Nuxt and Directus
DESCRIPTION: Vue component for displaying individual blog posts using dynamic routing. Includes error handling for non-existent posts and navigation back to home.

LANGUAGE: vue
CODE:
<template>
	<NuxtLink to="/">Home</NuxtLink>
	<h1>{{ post.title }}</h1>
	<div v-html="post.content"></div>
</template>

<script setup>
const { $directus, $readItem } = useNuxtApp();
const route = useRoute();

const post = await useAsyncData('post', () => {
  return $directus.request($readItem('posts', route.params.id))
});

if (!post.value) throw createError({
  statusCode: 404,
  statusMessage: 'Post Not Found'
});
</script>

----------------------------------------

TITLE: Configuring Bundle Entry in package.json for Directus Extension
DESCRIPTION: This JSON snippet shows how to define an entry for a bundled extension in the package.json file. It specifies the type, name, and source file of the extension within the bundle.

LANGUAGE: json
CODE:
{
	"type": "interface",
	"name": "my-interface",
	"source": "src/my-interface/index.ts"
}

----------------------------------------

TITLE: Creating Django App
DESCRIPTION: Command to create a new Django app within the project.

LANGUAGE: bash
CODE:
python manage.py startapp blog

----------------------------------------

TITLE: URL Alias Configuration in Nuxt
DESCRIPTION: Page meta configuration for creating URL aliases in Nuxt, enabling shorter URLs for ticket pages.

LANGUAGE: jsx
CODE:
‹script setup lang="ts">
// pages/tickets/[ticket].vue

definePageMeta({
	alias: '/t/:ticket',
});

// Rest of script setup
</script>

----------------------------------------

TITLE: HTML Stripping Utility Function
DESCRIPTION: Function to remove HTML markup from content string using regular expressions.

LANGUAGE: swift
CODE:
func stripHTML() -> String {
    return content.replacingOccurrences(of: "<[^>]+>", with: "", options: .regularExpression, range: nil)
}

----------------------------------------

TITLE: Initializing Directus Extension with create-directus-extension
DESCRIPTION: Use npx to create a new Directus extension boilerplate for a panel.

LANGUAGE: shell
CODE:
npx create-directus-extension@latest

----------------------------------------

TITLE: Defining Markdown Frontmatter
DESCRIPTION: Basic YAML frontmatter block defining the page title for a markdown document about self-hosting.

LANGUAGE: markdown
CODE:
---
title: Self-Hosting
---

----------------------------------------

TITLE: Using Offset in Directus API
DESCRIPTION: Shows how to use the offset parameter to skip a specified number of items in the response, useful for pagination.

LANGUAGE: http
CODE:
GET /items/posts
	?offset=100

LANGUAGE: graphql
CODE:
query {
	posts(offset: 100) {
		id
	}
}

LANGUAGE: js
CODE:
import { createDirectus, rest, readItems } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest());

const result = await directus.request(
	readItems('posts', {
		offset: 100,
	})
);

----------------------------------------

TITLE: Preview Plugin Implementation
DESCRIPTION: Nuxt plugin for handling Directus preview functionality including page refresh

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin((nuxtApp) => {
    const route = useRoute();
    const preview = route.query.preview && route.query.preview === 'true';

    if (preview) {
        nuxtApp.hook('page:finish', () => {
            refreshNuxtData();
        });
    }

    return { provide: { preview } };
});

----------------------------------------

TITLE: Creating Panel Component in Vue
DESCRIPTION: Shows how to implement a Vue component for a panel that renders text content with conditional header styling. The component receives configuration props from the entrypoint and handles display formatting.

LANGUAGE: vue
CODE:
<template>
	<div class="text" :class="{ 'has-header': showHeader }">
		{{ text }}
	</div>
</template>

<script setup>
defineProps(['showHeader', 'text']);
</script>

<style scoped>
.text {
	padding: 12px;
}

.text.has-header {
	padding: 0 12px;
}
</style>

----------------------------------------

TITLE: Using Data Chain Variables in JSON Configuration
DESCRIPTION: This example shows how to use data chain variables within a JSON configuration, including accessing nested values and combining with hardcoded data.

LANGUAGE: json
CODE:
{
	"key0": "a hard-coded value",
	"key1": "{{ $trigger.payload }}",
	"key2": "{{ operationKey.payload.friend_list[0] }}"
}

----------------------------------------

TITLE: Video Grid Component Implementation
DESCRIPTION: Svelte component for displaying a grid of video cards

LANGUAGE: svelte
CODE:
<script lang="ts">
  import type { Video } from "$lib/types";
  import VideoCard from "./VideoCard.svelte";
  export let videos: Video[];
</script>
<div class="video-grid">
  {#each videos as video}
    <VideoCard {video} />
  {/each}
</div>
<style>
  .video-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 1rem; }
</style>

----------------------------------------

TITLE: Token Management Implementation
DESCRIPTION: TokenManager utility that handles saving and retrieving access and refresh tokens using UserDefaults.

LANGUAGE: swift
CODE:
import Foundation

struct TokenManager {
    static let accessTokenKey = "accessToken"
    static let refreshTokenKey = "refreshToken"
    //... Rest of the TokenManager implementation

----------------------------------------

TITLE: Customer Creation Payload Example
DESCRIPTION: JSON structure for creating a new customer through the Stripe endpoint.

LANGUAGE: json
CODE:
{
  "email": "your-email@example.com",
  "name": "Joe Bloggs"
}

----------------------------------------

TITLE: Updating Post Retrieval Function with Version Support
DESCRIPTION: Modifies the getPostById function to accept an optional version parameter for retrieving specific content versions.

LANGUAGE: js
CODE:
export async function getPostById(id: string, version?: string) {
  return await client.request(readItem('Posts', id, { version }));
}

----------------------------------------

TITLE: Complex Logical Operators Example
DESCRIPTION: Shows nested use of logical operators _and and _or with multiple conditions.

LANGUAGE: json
CODE:
{
  "_or": [
    {
      "_and": [
        {
          "user_created": {
            "_eq": "$CURRENT_USER"
          }
        },
        {
          "status": {
            "_in": ["published", "draft"]
          }
        }
      ]
    },
    {
      "_and": [
        {
          "user_created": {
            "_neq": "$CURRENT_USER"
          }
        },
        {
          "status": {
            "_in": ["published"]
          }
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Directus Schema Definition
DESCRIPTION: TypeScript interface definitions for Directus data schema including posts collection

LANGUAGE: typescript
CODE:
/// <reference types="@directus/extensions/api.d.ts" />

interface DirectusSchema {
	posts: Post[];
}

interface Post {
	id: number;
	title: string;
	content: string;
	slug: string;
	published: boolean;
}

----------------------------------------

TITLE: API Extensions Resources Structure in Markdown
DESCRIPTION: Markdown structure defining the resources section of the API Extensions documentation using shiny-grid and shiny-card components.

LANGUAGE: markdown
CODE:
::shiny-grid
  :::shiny-card
  ---
  title: Services
  to: '/guides/extensions/api-extensions/services'
  class: col-span-6
  color: red
  ---
  :::
  
  :::shiny-card
  ---
  title: Sandbox
  to: '/guides/extensions/api-extensions/sandbox'
  class: col-span-6
  color: violet
  ---
  :::

----------------------------------------

TITLE: Initializing CollectionsService in Directus API Extension
DESCRIPTION: Shows how to initialize and use the CollectionsService within a Directus API extension route handler. The service is created with a schema and accountability object.

LANGUAGE: javascript
CODE:
export default (router, context) => {
	const { services, getSchema } = context;
	const { CollectionsService } = services;

	router.get('/', async (req, res) => {
		const collectionsService = new CollectionsService({
			schema: await getSchema(),
			accountability: req.accountability
		});

		// Your route handler logic
	});
};

----------------------------------------

TITLE: Vue Component Submission Handler
DESCRIPTION: Async function to handle feedback submission to Directus API, supporting both creation and updates of feedback entries.

LANGUAGE: typescript
CODE:
async function handleSubmission(rating?: number) {
	loading.value = true;
	if (rating) feedback.rating = rating;

	const body = {
		id: feedback.id,
		rating: feedback.rating,
		comments: feedback.comments,
		title: props.title,
		url: props.url,
	};

	const directusBaseUrl = 'https://yourdirectusurl.directus.app';

	try {
		let response;

		if (feedback.id) {
			response = await fetch(`${directusBaseUrl}/items/docs_feedback/${feedback.id}`, {
				method: 'PUT',
				body: JSON.stringify(body),
			});
		} else {
			response = await fetch(`${directusBaseUrl}/items/docs_feedback/${feedback.id}`, {
				method: 'POST',
				body: JSON.stringify(body),
			});
		}

		const data = await response.json();
		feedback.id = data.id;

		if (data.comments) {
			success.value = true;
		}
	} catch (err) {
		error.value = err;
	} finally {
		loading.value = false;
	}
}

----------------------------------------

TITLE: Posts List View Implementation
DESCRIPTION: PostsView that fetches and displays posts from Directus using authenticated GET requests.

LANGUAGE: swift
CODE:
import SwiftUI

struct PostResponse: Codable {
    let data: [Post]
}
//... Rest of the PostsView implementation

----------------------------------------

TITLE: Complete Stripe Endpoint Implementation
DESCRIPTION: Full implementation of the Stripe endpoint including all routes and permission checks.

LANGUAGE: javascript
CODE:
import Stripe from 'stripe';

export default {
  id: 'stripe',
  handler: (router, { env, services }) => {
    const secretKey = env.STRIPE_LIVE_SECRET_KEY;
    const stripe = new Stripe(secretKey);

    router.get('/payments', async (req, res) => {
      try {
        const response = await fetch("http://directus.example.com/permissions/me", {
          headers: {
            'Authorization': `Bearer ${req.token}`,
            'Content-Type': 'application/json'
          }
        });
        const permissions = await response.json();

        let output = [];

        if (permissions.data[env.STRIPE_CUSTOMERS_COLLECTION]?.read?.access === "full")) {
          stripe.paymentIntents
            .list({ limit: 100 })
            .autoPagingEach((payments) => {
              output.push(payments);
            })
            .then(() => {
              res.json(output);
            });
        } else {
          res.sendStatus(401);
        }
      }
      catch(e) {
        res.sendStatus(401);
      }
    });

    // Additional routes...
  },
};

----------------------------------------

TITLE: Building Directus Extension with NPM
DESCRIPTION: Command to build the Directus extension with the latest changes.

LANGUAGE: shell
CODE:
npm run build

----------------------------------------

TITLE: Many-to-Many Relation Filter
DESCRIPTION: Demonstrates filtering through a junction table in a Many-to-Many relationship.

LANGUAGE: json
CODE:
{
  "authors": {
    "authors_id": {
      "name": {
        "_eq": "Rijk van Zanten"
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Dynamic Post Preview in Astro
DESCRIPTION: Astro component implementing dynamic routing and preview functionality for individual blog posts

LANGUAGE: astro
CODE:
---
import { readItems } from "@directus/sdk";
import { client, readItem, withToken } from "../lib/directus";

//generate static path for each post, then fetch the post data from directus
export const prerender = false;
export async function getStaticPaths() {
  const posts = await client.request(readItems("posts"));
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }));
}

const params = Astro.url.searchParams;
const preview = params.get("preview");
const id = Astro.url.pathname.split("/").pop();
const token = params.get("token");
const version = params.get("version");

let post: {
  title?: string;
  published_date?: string;
  content?: string;
  status?: string;
} = {};
if (preview) {
  if (!token || token !== import.meta.env.DIRECTUS_TOKEN) {
    throw new Error("Invalid auth token");
    //  console.error("Invalid auth token");
    //  return;
  }
  const headers = token
    ? { headers: { Authorization: `Bearer ${token}` } }
    : {};
  post = await client.request(
    withToken(
      token,
      readItem("posts", id as string, {
        fields: ["id", "title", "slug", "published_date", "content", "status"],
        ...(version && { version }),
      })
    )
  );
  console.log(post);
} else {
  post = Astro.props;
}
---

<!-- render the post content -->
<div>
  {preview && <p style="color: #ff0000;">Preview Mode</p>}
  <h1>{post.title}</h1>
  <p>Date Published: {post.published_date}</p>
  <div set:html={post.content} />
  <p>Post Status: <span style="color: #008000;">{post.status}</span></p>
</div>

----------------------------------------

TITLE: Configuring CORS in Directus Docker Compose
DESCRIPTION: YAML configuration for enabling CORS in Directus to allow preview requests from Astro application running on localhost:4321

LANGUAGE: yaml
CODE:
CORS_ENABLED: "true"
CORS_ORIGIN: "http://localhost:4321"
CORS_CREDENTIALS: "true"
CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: "http://localhost:4321"

----------------------------------------

TITLE: Configuring Display Extension Index File
DESCRIPTION: Main configuration file for the display extension that defines its properties, options, and field types

LANGUAGE: javascript
CODE:
import DisplayComponent from './display.vue';
import { useStores } from '@directus/extensions-sdk';

export default {
	id: 'directus-display-count-sum',
	name: 'Count or Sum a Column',
	icon: '123',
	description: 'Count the related records or display the sum of the select column',
	component: DisplayComponent,
	options: null,
	types: ['alias', 'string', 'uuid', 'integer', 'bigInteger', 'json'],
	localTypes: ['m2m', 'm2o', 'o2m', 'translations', 'm2a', 'file', 'files'],
	fields: (options) => {
		return [];
	},
};

----------------------------------------

TITLE: Implementing Testimonial Carousel
DESCRIPTION: Svelte component that creates a carousel to display multiple testimonial cards.

LANGUAGE: svelte
CODE:
<script context="module">
  import TestimonialCard from "$lib/TestimonialCard.svelte";

  export const getCarouselId = (index, carouselName = "carousel") =>
    `${carouselName}-item-${index}`;
</script>

<script>
  export let data;
</script>

<ul class="carousel-ul">
  {#each data.testimonials as testimonial, index}
    <svelte:component
      this={TestimonialCard}
      id={getCarouselId(index)}
      {...testimonial}
    />
  {/each}
</ul>

----------------------------------------

TITLE: Installing Directus SDK in Astro Project
DESCRIPTION: Command to install the Directus SDK in the Astro project using npm.

LANGUAGE: bash
CODE:
npm install @directus/sdk

----------------------------------------

TITLE: Installing Dependencies with NPX
DESCRIPTION: Commands to initialize a new Directus extension and install required Stripe package.

LANGUAGE: shell
CODE:
npx create-directus-extension@latest
cd directus-endpoint-stripe
npm install stripe

----------------------------------------

TITLE: Defining a Custom Theme in Directus
DESCRIPTION: This snippet demonstrates how to create a custom theme using the defineTheme function from the Directus extensions SDK. It sets the theme ID, name, appearance, and basic styling rules.

LANGUAGE: javascript
CODE:
import { defineTheme } from '@directus/extensions-sdk';

export default defineTheme({
	id: 'custom',
	name: 'My Custom Theme',
	appearance: 'dark',
	rules: {
		background: 'tomato',
	}
});

----------------------------------------

TITLE: Creating Directus Layout Component in Vue
DESCRIPTION: Example Vue component implementation for a custom Directus layout. Demonstrates component structure, props definition, and basic template rendering.

LANGUAGE: vue
CODE:
<template>
	<div>
		<p>Name: {{ name }}</p>
		<p>Collection: {{ collection }}</p>
	</div>
</template>

<script>
export default {
	inheritAttrs: false,
	props: {
		collection: {
			type: String,
			required: true,
		},
		name: {
			type: String,
			required: true,
		},
	},
};
</script>

----------------------------------------

TITLE: Implementing Language-Based Post Listing in Astro
DESCRIPTION: Astro component for listing all posts in the selected language, using dynamic routing and the Directus fetchPosts function.

LANGUAGE: astro
CODE:
---
import Layout from "../../layouts/Layout.astro";
import { fetchPosts } from "../../../lib/directus";

const { lang } = Astro.params;

export function getStaticPaths() {
  const supportedLanguages = ["en-US", "de-DE", "es-ES"];
  return supportedLanguages.map((lang) => ({ params: { lang } }));
}

// Fetch posts for the selected language
const posts = await fetchPosts(lang);
---

<Layout lang={lang}>
  <h1>Blog Posts in {lang}</h1>

  <ul>
    {posts.map((post) => {
      const t = post.translations[0];
      return (
        <li>
          <a href={`/${lang}/${post.slug}/`}>{t?.title}</a>
        </li>
      );
    })}
  </ul>
</Layout>

----------------------------------------

TITLE: Implementing Home Page in SolidStart
DESCRIPTION: Creates the home page component that fetches and displays global metadata from Directus.

LANGUAGE: jsx
CODE:
export const route = {
  load: () => getGlobals(),
};

export default function Home() {
  const pageInfo = createAsync(getGlobals);

  createEffect(() => {
    if (pageInfo() === null) {
      throw new Error("404");
    }
  });

  return (
    <main>
      <Show when={pageInfo()}>{(info) => <h1>{info().title}</h1>}</Show>

      <Show when={pageInfo()}>
        {(info) => <strong>{info().description}</strong>}
      </Show>
    </main>
  );
}

----------------------------------------

TITLE: Initializing Directus Extension
DESCRIPTION: Command to create a new Directus display extension using the CLI tool

LANGUAGE: shell
CODE:
npx create-directus-extension@latest

----------------------------------------

TITLE: Handling Received Messages
DESCRIPTION: Defines a function to process received messages and update the UI accordingly.

LANGUAGE: javascript
CODE:
function receiveMessage() {
  if (data.type == 'subscription' && data.event == 'init') {
	  console.log('subscription started');
  }
}

----------------------------------------

TITLE: Creating a New Next.js Project with Directus Integration
DESCRIPTION: Bash commands for creating a new Next.js project and installing the Directus SDK.

LANGUAGE: bash
CODE:
npx create-next-app \
  directus-next-multilingual \
  --js \
  --app \
  --eslint \
  --no-src-dir \
  --no-tailwind \
  --turbopack \
  --import-alias "@/*"

LANGUAGE: bash
CODE:
cd directus-next-multilingual
npm i @directus/sdk

----------------------------------------

TITLE: Directus Environment Variables Configuration
DESCRIPTION: Required environment variables for setting up Directus instance on Cloud Run

LANGUAGE: yaml
CODE:
KEY: YOUR_RANDOM_KEY
SECRET: YOUR_RANDOM_SECRET
ADMIN_EMAIL: admin@example.com
ADMIN_PASSWORD: d1r3ctu5
DB_CLIENT: pg
DB_HOST: /cloudsql/directus-project:us-central1:directus-db
DB_PORT: 5432
DB_DATABASE: postgres
DB_USER: postgres
DB_PASSWORD: YOUR_DB_PASSWORD
DB_SSL__REJECT_UNAUTHORIZED: false
DB_SSL: false
PRESSURE_LIMITER_ENABLED: false

----------------------------------------

TITLE: Fetching Content with SvelteKit Load Function
DESCRIPTION: Implementation of SvelteKit's load function to fetch news content using Directus SDK with language filtering

LANGUAGE: javascript
CODE:
import getDirectusInstance from "$lib/directus";
import { readItems } from "@directus/sdk";

export async function load({ fetch }) {
  const directus = getDirectusInstance(fetch);
  return {
    global: await directus.request(readItems("global")),
    news: await directus.request(readItems("news", {
        deep: {
          translations: {
            _filter: {
              _and: [
                {
                  languages_code: { _eq: "en-US" },
                },
              ],
            },
          },
        },
        fields: ["*", { translations: ["*"] }],
      })
    ),
  };
}

----------------------------------------

TITLE: Creating Vue Display Component
DESCRIPTION: Vue component implementation for a Directus display that renders a field value. Demonstrates the basic structure with props handling and value display.

LANGUAGE: vue
CODE:
<template>
	<div>Value: {{ value }}</div>
</template>

<script>
export default {
	props: {
		value: {
			type: String,
			default: null,
		},
	},
};
</script>

----------------------------------------

TITLE: Initializing Directus SDK in SvelteKit
DESCRIPTION: Creates a Directus client instance using the SDK in a SvelteKit project.

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from "@directus/sdk";
const API_URL = "http://localhost:8055";
export const client = createDirectus(API_URL).with(rest());

----------------------------------------

TITLE: Creating Directus Helper in JavaScript
DESCRIPTION: Sets up the Directus SDK client and defines helper functions for fetching data from Directus collections.

LANGUAGE: javascript
CODE:
import { createDirectus, readItem, readItems, rest } from "@directus/sdk";
import { cache } from "@solidjs/router";

export const directus = createDirectus("YOUR_DIRECTUS_PROJECT_URL").with(rest());

export const getGlobals = cache(async () => {
  "use server";
  try {
    return await directus.request.readItems("global");
  } catch (e) {
    console.error(e);
    return null;
  }
}, "globals");

export const getPage = (slug) =>
  cache(async () => {
    "use server";
    try {
      return await directus.request(readItems("pages", [{slug}]))[0];
    } catch (e) {
      return null;
    }
  }, slug);

export const getPosts = cache(async () => {
  "use server";
  try {
    const post = await directus.request(
      readItems("posts", {
        fields: ["slug", "title", "publish_date", { author: ["name"] }],
        sort: ["-publish_date"],
      })
    );
    return post;
  } catch (error) {
    return null;
  }
}, "post-list");

----------------------------------------

TITLE: Creating Django View for Blog Post Listing
DESCRIPTION: Python code for a Django view that fetches and renders a list of blog posts from Directus.

LANGUAGE: python
CODE:
from .directus_integration import fetch_blog_posts

def blog_posts(request):
    posts_data = fetch_blog_posts()
    return render(request, 'blog_list.html', {'posts': posts_data['data']})

----------------------------------------

TITLE: Complete React Chat Implementation
DESCRIPTION: Full implementation of the chat application including WebSocket connection, message handling, and UI rendering

LANGUAGE: jsx
CODE:
import { authentication, createDirectus, realtime } from '@directus/sdk';
import { useState, useEffect } from 'react';

const url = 'https://your-directus-url';

const client = createDirectus(url).with(authentication()).with(realtime());

export default function App() {
  const [messageHistory, setMessageHistory] = useState([]);

  useEffect(() => {
    const cleanup = client.onWebSocket('message', function (data) {
      if (data.type == 'auth' && data.status == 'ok') {
        readAllMessages();
        subscribe('create');
      }

      if (data.type === 'items') {
        for (const item of data.data) {
          addMessageToList(item);
        }
      }
    });

    client.connect();

    return cleanup;
  }, []);

  const loginSubmit = (event) => {
    event.preventDefault();
    const email = event.target.elements.email.value;
    const password = event.target.elements.password.value;
    client.login(email, password);
  };

  async function subscribe(event) {
    const { subscription } = await client.subscribe('messages', {
      event,
      query: {
        fields: ['*', 'user_created.first_name'],
      },
    });

    for await (const message of subscription) {
      console.log('receiveMessage', message);
      receiveMessage(message);
    }
  }

  function readAllMessages() {
    client.sendMessage({
      type: 'items',
      collection: 'messages',
      action: 'read',
      query: {
        limit: 10,
        sort: '-date_created',
        fields: ['*', 'user_created.first_name'],
      },
    });
  }

  function receiveMessage(data) {
    if (data.type == 'subscription' && data.event == 'init') {
      console.log('subscription started');
    }
    if (data.type == 'subscription' && data.event == 'create') {
      addMessageToList(message.data[0]);
    }
  }

  function addMessageToList(message) {
    setMessageHistory([...messageHistory, message]);
  }

  const messageSubmit = (event) => {
    event.preventDefault();

    const text = event.target.elements.text.value;

    client.sendMessage({
      type: 'items',
      collection: 'messages',
      action: 'create',
      data: { text },
    });

    event.target.reset();
  };

  return (
    <div className='App'>
      <form onSubmit={loginSubmit}>
        <label htmlFor='email'>Email</label>
        <input type='email' id='email' defaultValue='admin@example.com' />
        <label htmlFor='password'>Password</label>
        <input type='password' id='password' defaultValue='d1r3ctu5' />
        <input type='submit' />
      </form>

      <ol>
        {messageHistory.map((message) => (
          <li key={message.id}>
            {message.user_created.first_name}: {message.text}
          </li>
        ))}
      </ol>

      <form onSubmit={messageSubmit}>
        <label htmlFor='message'>Message</label>
        <input type='text' id='text' />
        <input type='submit' />
      </form>
    </div>
  );
}

----------------------------------------

TITLE: Initializing Directus SDK Configuration
DESCRIPTION: Setup code for initializing the Directus SDK client with REST functionality

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from '@directus/sdk';

const directus = createDirectus('http://localhost:8055/').with(rest());

export default directus;

----------------------------------------

TITLE: Systemd Service Configuration
DESCRIPTION: Configuration file for running Directus as a background service using systemd.

LANGUAGE: txt
CODE:
[Unit]
Description=Directus Docker Service
Requires=docker.service
After=docker.service
[Service]
Restart=always
WorkingDirectory=/path/to/your/directory-containing-docker-compose.yml
ExecStart=/usr/bin/docker compose up
ExecStop=/usr/bin/docker compose down
[Install]
WantedBy=multi-user.target

----------------------------------------

TITLE: Conditional Game Logic Script in TypeScript
DESCRIPTION: TypeScript function used in Directus Flow's Run Script operation to handle game ending logic by modifying the prompt sent to ChatGPT based on game state.

LANGUAGE: typescript
CODE:
module.exports = async function(data) {
	if (data.game.endGame) {
		data.prompt = data.prompt + " End the game."
	}

	return data
}

----------------------------------------

TITLE: Implementing Filter Hook with Context
DESCRIPTION: Example of a filter hook implementation with payload, meta, and context parameters for item creation.

LANGUAGE: javascript
CODE:
export default ({ filter }) => {
	filter('items.create', (payload, meta, context) => {
		console.log('About to create item.');
    return payload;
	});
}

----------------------------------------

TITLE: Creating Astro Auth Form Component
DESCRIPTION: Astro component for handling both login and registration forms

LANGUAGE: astro
CODE:
---
interface Props {
  type: "login" | "register";
  action: string;
}

const { type, action } = Astro.props;
const isLogin = type === "login";
---

<div>
  <h1>{isLogin ? "Login" : "Register"}</h1>
  <form method="POST" action={action}>
    {!isLogin && (
      <>
        <label for="firstName">First Name</label>
        <input
          type="text"
          id="firstName"
          name="firstName"
          required
        />

        <label for="lastName">Last Name</label>
        <input
          type="text"
          id="lastName"
          name="lastName"
          required
        />
      </>
    )}

    <label for="email">Email</label>
    <input
      type="email"
      id="email"
      name="email"
      required
    />

    <label for="password">Password</label>
    <input
      type="password"
      id="password"
      name="password"
      required
    />

    <button type="submit">{isLogin ? "Sign in" : "Register"}</button>
    {isLogin ? (
      <p>
        Don't have an account?
        <a href="/register">Register</a>
      </p>
    ) : (
      <p>
        Have an account? <a href="/login">Login</a>
      </p>
    )}
  </form>
</div>

----------------------------------------

TITLE: Creating New Laravel Project
DESCRIPTION: Shell commands to create a new Laravel project and navigate to its directory using Composer.

LANGUAGE: shell
CODE:
composer create-project laravel/laravel directus-laravel-blog
cd directus-laravel-blog

----------------------------------------

TITLE: Directus Service Provider Implementation
DESCRIPTION: PHP class that provides a singleton instance for interacting with the Directus API, handling HTTP requests and base URL configuration.

LANGUAGE: php
CODE:
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Http;

class DirectusServiceProvider extends ServiceProvider
{
    public function register()
    {
        $this->app->singleton('directus', function ($app) {
            return new class {
                protected $baseUrl;

                public function __construct()
                {
                    $this->baseUrl = rtrim(env('DIRECTUS_URL'), '/');
                }

                public function request($method, $endpoint, $data = [])
                {
                    $url = "{$this->baseUrl}/items/{$endpoint}";
                    return Http::$method($url, $data);
                }

                public function get($endpoint, $params = [])
                {
                    return $this->request('get', $endpoint, $params);
                }
            };
        });
    }
}

----------------------------------------

TITLE: Establishing and Authenticating WebSocket Client in JavaScript
DESCRIPTION: Creates a Directus client, sets up authentication, and establishes a WebSocket connection.

LANGUAGE: javascript
CODE:
const client = createDirectus(url)
  .with(authentication())
  .with(realtime());

document.querySelector('#login').addEventListener('submit', function (event) {
	event.preventDefault();

  const email = event.target.elements.email.value;
  const password = event.target.elements.password.value;

  client.login(email, password);
});

client.connect();

----------------------------------------

TITLE: Dynamic Page Builder Component
DESCRIPTION: Svelte component that maps and renders different block types based on the page data

LANGUAGE: javascript
CODE:
<!--- src/lib/pageBuilder.svelte-->
<script>
    import Hero from '$lib/components/Hero.svelte';
    import RichText from '$lib/components/RichText.svelte';
    import CardGroup from '$lib/components/CardGroup.svelte';

    export let blocks = [];

    const blockMap = {
        block_hero: Hero,
        block_richtext: RichText,
        block_cardgroup: CardGroup
    };
</script>
{#if Array.isArray(blocks) && blocks.length > 0}
    {#each blocks as block (block.id)}
        {#if block?.collection && blockMap[block.collection]}
            <svelte:component 
                this={blockMap[block.collection]} 
                data={(typeof block.item === 'object') ? block.item : {}} />
        {:else}
            <p>Unknown block type: <strong>{block.collection}</strong></p>
        {/if}
    {/each}
{:else}
    <p>No blocks found.</p>
{/if}

----------------------------------------

TITLE: Throwing Error to Reject User Creation in Directus Flow
DESCRIPTION: This JavaScript snippet throws an error to prevent user creation when the phone number fails fraud checks. It's used in a Directus Flow's Run Script operation.

LANGUAGE: javascript
CODE:
throw new Error('Phone number failed fraud checks');

----------------------------------------

TITLE: Advanced Transformations using REST API
DESCRIPTION: Demonstrates advanced image transformations using Sharp API operations through REST endpoint

LANGUAGE: http
CODE:
GET /assets/c984b755-e201-497e-b0a7-24156ad9c7e0
	?transforms=[["rotate", 90],["blur", 10],["tint", "rgb(255, 0, 255)"], ["negate", {"lower": 10, "upper": 50}]]

----------------------------------------

TITLE: Building Directus Extension
DESCRIPTION: NPM script command to build the Directus extension.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Implementing Edit Post Page in SvelteKit
DESCRIPTION: Creates a page where users can edit existing posts using Directus SDK.

LANGUAGE: javascript
CODE:
//  src/routes/protected/posts/[id]/edit/+page.svelte
<script>
  import { readItem, updateItem } from "@directus/sdk";
  import { client, isAuthenticated } from "../../../../../lib/directus.js";
  import { goto } from "$app/navigation";
  import { page } from "$app/stores";
  import { onMount } from "svelte";

  const postId = $page.params.id; 
  let isLoading = true;
  let message = "";

  let post = {
    title: "",
    content: "",
  };

  onMount(async () => {
    const isAuth = await isAuthenticated();
    console.log("isAuth", isAuth);

    if (isAuth.authenticated === false) {
      goto("/login"); 
      return;
    }

    await loadPost();
  });

  async function loadPost() {
    isLoading = true; 
    try {
      const response = await client.request(readItem("posts", postId));
      if (
        response &&
        typeof response.title === "string" &&
        typeof response.content === "string"
      ) {
        post = { title: response.title, content: response.content };
      }
    } catch (error) {
      console.error("Error fetching post:", error);
      message = "Failed to load post details. Please try again.";
    }
    isLoading = false;
  }

  async function handleSubmit() {
    isLoading = true; 
    try {
      // Update the post using the Directus SDK
      await client.request(
        updateItem("posts", postId, {
          title: post.title,
          content: post.content,
        })
      );
      goto("/protected/posts"); 
    } catch (error) {
      console.error("Error updating post:", error);
      message = "Failed to update post. Please try again.";
    }
    isLoading = false;
  }
</script>

<div class="edit-container">
  <h1>Edit Post</h1>

  {#if isLoading}
    <p class="loading">Loading Post details...</p>
  {:else}
    {#if message}
      <p class="error">{message}</p>
    {/if}

    <form on:submit|preventDefault={handleSubmit}>
      <div class="form-group">
        <label for="title">Title</label>
        <input type="text" id="title" bind:value={post.title} required />
      </div>

      <div class="form-group">
        <label for="content">Content</label>
        <textarea id="content" bind:value={post.content} rows="10" required></textarea>
      </div>

      <div class="actions">
        <button type="submit" class="button save">Save Changes</button>
        <a href="/protected/posts" class="button cancel">Cancel</a>
      </div>
    </form>
  {/if}
</div>

----------------------------------------

TITLE: Home Controller Implementation
DESCRIPTION: Controller class that fetches global metadata from Directus and passes it to the view.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class HomeController extends Controller
{
    public function index()
    {
        $directus = app('directus');
        $settingsResponse = $directus->get('global');
        $settings = $settingsResponse['data'];
        return view('home', compact('settings'));
    }
}

----------------------------------------

TITLE: Post Detail View Implementation
DESCRIPTION: SwiftUI view for displaying detailed post information including title, image, content, and status.

LANGUAGE: swift
CODE:
struct PostDetailView: View {
	@Binding var selectedPost: Post?
	var fetchPost: (Int) async -> Void
	var body: some View {
		if let post = selectedPost {
			VStack {
				Text(post.title)
					.font(.headline)
					.padding()

				if let imageURL = post.imageURL {
					AsyncImage(url: URL(string: imageURL)) { phase in
						switch phase {
						case .success(let image):
							image
								.resizable()
								.aspectRatio(contentMode: .fit)
								.frame(maxHeight: 200)
						case .failure(_):
							Text("Failed to load image")
						case .empty:
							Image(systemName: "photo")
								.resizable()
								.aspectRatio(contentMode: .fit)
								.frame(maxHeight: 200)
								.foregroundColor(.gray)
						default:
							EmptyView()
						}
					}
					.padding()
				}

				Text(post.stripHTML())
					.font(.body)
					.padding()

				Spacer()

				Button("Dismiss") {
					selectedPost = nil
				}

				Text("Status: \(post.status)")
					.font(.subheadline)
					.foregroundColor(.gray)
					.padding()
			}
			.task {
				await fetchPost(post.id)
			}
		}
	}
}

----------------------------------------

TITLE: Initializing Directus SDK in Next.js
DESCRIPTION: Sets up the Directus SDK instance with TypeScript types for room types and reservations.

LANGUAGE: typescript
CODE:
import { createDirectus, rest } from "@directus/sdk";

type RoomTypes = {
  capacity: number;
  price: string;
  name: string;
  rooms: number[];
};

type Reservations = {
  first_name: string;
  last_name: string;
  email: string;
  phone_number: string;
  check_in_date: string;
  check_out_date: string;
  room_id: string;
  nights: number;
  total_price: string;
  payment_id: string
};

type Schema = {
  room_types: RoomTypes[];
  reservations: Reservations[];
};

const directus = createDirectus<Schema>(
  process.env.DIRECTUS_URL as string
).with(rest());

export default directus;

----------------------------------------

TITLE: Initializing Next.js Project with create-next-app
DESCRIPTION: Creates a new Next.js application using create-next-app with TypeScript and App Router.

LANGUAGE: bash
CODE:
npx create-next-app@latest next-auth
cd next-auth

----------------------------------------

TITLE: Modifying Docker Compose for Custom Directus Build
DESCRIPTION: This YAML snippet shows how to modify a docker-compose.yml file to build a custom Directus image for installing extensions.

LANGUAGE: yaml
CODE:
build: 
  context: ./ 

----------------------------------------

TITLE: Invite User API Endpoint in Directus
DESCRIPTION: API endpoint for inviting a new user by email and assigning a role. Requires email service configuration.

LANGUAGE: json
CODE:
{
  "email": "hello@example.com",
  "role": "c86c2761-65d3-43c3-897f-6f74ad6a5bd7"
}

----------------------------------------

TITLE: Creating Directus Extension with CLI
DESCRIPTION: Command to scaffold a new Directus extension using the create-directus-extension utility.

LANGUAGE: shell
CODE:
npx create-directus-extension@latest

----------------------------------------

TITLE: Edit Post View Implementation
DESCRIPTION: EditPostView that allows users to edit existing posts using authenticated PATCH requests.

LANGUAGE: swift
CODE:
import SwiftUI

struct EditPostView: View {
    var post: Post
    @Binding var isEditMode: Bool
    //... Rest of the EditPostView implementation

----------------------------------------

TITLE: View Service Provider with Navigation
DESCRIPTION: Service provider that registers navigation data to be available across all views.

LANGUAGE: php
CODE:
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\View;

class ViewServiceProvider extends ServiceProvider
{
    public function boot()
    {
        $navigation = [
            ['url' => '/', 'label' => 'Home'],
            ['url' => '/blog', 'label' => 'Blog Posts'],
            ['url' => '/page/about', 'label' => 'About'],
        ];

        View::composer('*', function ($view) use ($navigation) {
            $view->with('navigation', $navigation);
        });
    }
}

----------------------------------------

TITLE: Implementing Search and Action Buttons in Actions Slot
DESCRIPTION: Demonstrates how to add a search bar and action buttons to the actions slot in a Directus custom module header.

LANGUAGE: vue
CODE:
<template #actions>
	<v-input class="module-search" :model-value="search">
		<template #prepend><v-icon name="search" /></template>
	</v-input>
	<v-button v-tooltip.bottom="'COOL'" icon rounded>
		<v-icon name="launch" />
	</v-button>
</template>

LANGUAGE: scss
CODE:
.v-input.full-width.module-search {
    display: flex;
    width: 300px;
    height: 44px;

    .input {
        width: auto;
        padding: 0 10px;
        overflow: hidden;
        color: var(--theme--foreground);
        text-overflow: ellipsis;
        background-color: var(--theme--background);
        border-radius: 22px;
    }
}

----------------------------------------

TITLE: Implementing Likes Endpoint in Nuxt Server
DESCRIPTION: This Nuxt server endpoint handles the 'spiciness' voting system. It creates or updates a like record for a user, using their IP hash to track individual interactions, and calculates the total likes for a profile.

LANGUAGE: typescript
CODE:
export default defineEventHandler(async (event): Promise<LikesResponse> => {
	const username = getRouterParam(event, 'username');

	if (!username) throw createError({ statusCode: 400, message: 'Missing username. username is required.' });

	const ip =
		(event.node.req.headers['x-forwarded-for'] as string) ||
		(event.node.req.headers['x-vercel-forwarded-for'] as string);

	const visitorHash = createVisitorHash(ip, process.env.SALT as string);

	try {
		// Get existing profile with all likes
		const existingProfile = await directusServer.request(
			readItem('profiles', username, {
				fields: [
					'username',
					{
						likes: ['id', 'visitor_hash', 'profile', 'count'],
					},
				],
			}),
		);

		if (!existingProfile) {
			throw createError({ statusCode: 404, message: 'Profile not found.' });
		}

		// Get user's specific like record
		const userLike = existingProfile.likes?.find(like => like.visitor_hash === visitorHash);

		const body = await readBody(event);
		const newCount = Math.min(Math.max(body.count || 0, 0), 11);

		let like;

		if (userLike) {
			// Update existing like record
			like = await directusServer.request(
				updateItem('likes', userLike.id, {
					profile: existingProfile.username,
					count: newCount,
				}),
			);
		} else {
			// Create new like record
			like = await directusServer.request(
					createItem('likes', {
						profile: existingProfile.username,
						visitor_hash: visitorHash,
						count: newCount,
					}),
			);
		}

		// Calculate total likes by summing all likes
		const totalLikes = existingProfile.likes?.reduce((sum, like) => {
			// If this is the user's like, use the new count
			if (like.visitor_hash === visitorHash) {
				return sum + newCount;
			}
			return sum + (like.count || 0);
		}, 0);

		const response: LikesResponse = {
			username: existingProfile.username,
			totalLikes: totalLikes || 0,
			userLikeCount: newCount,
		};

		return response;
	} catch (error) {
		console.error('Error updating like count:', error);
		throw createError({
			statusCode: 500,
			message: 'Failed to update like count.',
		});
	}
});

----------------------------------------

TITLE: Configuring CORS in Docker Compose
DESCRIPTION: Configuration for setting content security policy to allow access to Nuxt project in a Docker environment.

LANGUAGE: yaml
CODE:
environment:
  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url

----------------------------------------

TITLE: Customizing Button Styles with CSS Variables
DESCRIPTION: Demonstration of customizing a VButton component's hover state using CSS custom properties within a Vue component.

LANGUAGE: vue
CODE:
<template>
	<!-- give the button a class -->
	<VButton class="my-button">My Button</VButton>
</template>

<style>
/* customize the style */
.my-button {
	--v-button-color-hover: black;
}
</style>

----------------------------------------

TITLE: Adding Icon to Title Outer Prepend Slot
DESCRIPTION: Demonstrates how to add an icon to the left of the title using the title-outer:prepend slot in a Directus custom module.

LANGUAGE: vue
CODE:
<template #title-outer:prepend>
	<v-button class="header-icon" rounded disabled icon secondary>
		<v-icon name="access_time" />
	</v-button>
</template>

----------------------------------------

TITLE: Building Directus Extension
DESCRIPTION: Command to build the Directus extension after making changes.

LANGUAGE: shell
CODE:
npm run build

----------------------------------------

TITLE: Main Content View Implementation in SwiftUI
DESCRIPTION: ContentView implementation that handles the main app navigation flow and logout functionality. It manages login state and provides navigation to register, login, create post and view posts screens.

LANGUAGE: swift
CODE:
import SwiftUI

struct ContentView: View {
    @State private var showLoginView = false
    @State private var isLoggedIn = false
    @State private var accessToken: String?
    //... Rest of the ContentView implementation

----------------------------------------

TITLE: Multilingual Content Route Handler
DESCRIPTION: Vue component handling dynamic routing and content fetching based on language selection.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { $directus, $readItems } = useNuxtApp()
const route = useRoute()
const post: Ref<Post | null> = ref(null)

const { data, error } = await useAsyncData('post', async () => {
	const slugParam = Array.isArray(route.params.slug) ? route.params.slug[0] : route.params.slug
	const languageCode = Array.isArray(route.params.lang) ? route.params.lang[0] : route.params.lang

	return await $directus.request($readItems('posts', {
		filter: {
			slug: { _eq: slugParam },
		},
		fields: ['id', 'title', 'content'],
		limit: 1
	})).then(data => {
		if (languageCode === 'en-US') {
			return data
		}
		return $directus.request($readItems('posts_translations', {
			filter: {
				posts_id: { _eq: data[0].id },
				languages_code: { _eq: languageCode }
			},
			fields: ['id', 'title', 'content'],
			limit: 1
		}))
	})

})

if (error.value || data.value === null || data.value.length === 0) {
	console.error(error)
	throw createError({
		statusCode: 404,
		statusMessage: "Post not found"
	})
}

post.value = data.value[0]
</script>
<template>
	<div v-if="post">
		<h1>{{ post.title }}</h1>
		<p>{{ post.content }}</p>
	</div>
	<div v-else>Loading...</div>
</template>

----------------------------------------

TITLE: Setting Authorization Header for File Import in Directus Automate
DESCRIPTION: This snippet demonstrates how to set the Authorization header when importing files in Directus Automate, using a static access token for authentication.

LANGUAGE: json
CODE:
{
  "Authorization": "Bearer your-token"
}

----------------------------------------

TITLE: Implementing Token Refresh in SvelteKit
DESCRIPTION: Creates a function to handle token renewal for both cookie-based and JSON-based authentication modes.

LANGUAGE: javascript
CODE:
// src/lib/directus.js

import { refresh } from "@directus/sdk";

export const refreshToken = async (mode = "json", refreshToken = null) => {
  try {
    let result;

    if (mode === "json" && refreshToken) {
     
      result = await client.request(refresh("json", refreshToken));
    } else if (mode === "cookie") {
      // Use cookie-based refresh
      result = await client.request(refresh("cookie"));
    } else {
      result = await client.refresh();
    }

    console.log("Token refreshed successfully");
    return {
      access_token: result.access_token,
      expires: result.expires,
      refresh_token: result.refresh_token,
    };
  } catch (error) {
    console.error("Token refresh failed:", error);
    throw error;
  }
};

----------------------------------------

TITLE: Vue Component Initial Structure
DESCRIPTION: Basic scaffold for the ArticleFeedback Vue component with template structure for different feedback states.

LANGUAGE: vue
CODE:
<script setup lang="ts">
</script>

<template>
	<div class="wrapper">
		<div class="step">
			<!-- Step 1. Show Rating Buttons -->
			<div>
				<p class="desc">How can we improve?</p>
				<p class="heading">How helpful was this article?</p>
			</div>
		</div>
		<div class="step">
			<!-- Step 2. Ask for Comments -->
		</div>
		<div class="step">
			<!-- Step 3. Show Success Message -->
		</div>
	</div>
</template>

<style scoped>
</style>

----------------------------------------

TITLE: Configuring Nested Theme Rules in Directus
DESCRIPTION: This code snippet shows how to set more complex theme rules, including nested properties for specific UI elements like navigation. It demonstrates setting border radius and background color for navigation.

LANGUAGE: javascript
CODE:
rules: {
	borderRadius: '24px',
	navigation: {
		background: 'rebeccapurple'
	}
}

----------------------------------------

TITLE: Configuring CORS in Directus Docker Environment
DESCRIPTION: YAML snippet for setting up CORS in a Directus Docker environment to allow access from a Next.js application.

LANGUAGE: yaml
CODE:
environment:
  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url

----------------------------------------

TITLE: Implementing Directus Operation API (Complete api.js)
DESCRIPTION: Complete JavaScript code for the api.js file, implementing the operation's logic using lodash.

LANGUAGE: javascript
CODE:
import { defineOperationApi } from '@directus/extensions-sdk';
import { camelCase } from 'lodash';

export default defineOperationApi({
	id: 'operation-lodash-camelcase',
	handler: ({ text }) => {
		return {
			text: camelCase(text),
		};
	},
});

----------------------------------------

TITLE: Handling Stripe Webhook for Successful Payments
DESCRIPTION: Webhook handler to process successful Stripe payments and create reservations in Directus.

LANGUAGE: typescript
CODE:
import { NextResponse } from "next/server";
import Stripe from "stripe";
import { makeReservation } from "@/lib/apis";

const checkout_session_completed = "checkout.session.completed";
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);

export async function POST(req: Request, res: Response) {
  const reqBody = await req.text();
  const sig = req.headers.get("stripe-signature");
  const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;

  let event: Stripe.Event;

  try {
    if (!sig || !webhookSecret) return;
    event = stripe.webhooks.constructEvent(reqBody, sig, webhookSecret);
  } catch (error: any) {
    console.log(error);
    return NextResponse.json(
      { message: `Webhook Error: ${error.message}` },
      { status: 500 }
    );
  }

  switch (event.type) {
    case checkout_session_completed:
      const session = event.data.object;
      if (!session.metadata || !session.payment_intent) {
        console.error("Missing metadata or Payment Intent in Stripe session");
        return NextResponse.json(
          { message: "Incomplete reservation data" },
          { status: 400 }
        );
      }

      const {
        metadata: {
          first_name,
          last_name,
          email,
          phone_number,
          check_in_date,
          check_out_date,
          room_id,
          nights,
          total_price,
        },
        payment_intent,
      } = session;
      await makeReservation({
        first_name,
        last_name,
        email,
        phone_number,
        check_in_date,
        check_out_date,
        room_id,
        nights,
        total_price,
        payment_id: payment_intent as string,
      });

      return NextResponse.json("Booking successful", {
        status: 200,
        statusText: "Booking Successful",
      });

    default:
      console.log(`Unhandled event type ${event.type}`);
  }

  return NextResponse.json({ message: "Event Received" }, { status: 200 });
}

----------------------------------------

TITLE: Setting Field Presets in Directus
DESCRIPTION: JSON configuration for automatically setting the author field to the current user in Directus permissions.

LANGUAGE: json
CODE:
{
    "author": "$CURRENT_USER"
}

----------------------------------------

TITLE: Setting Directus Environment Variables for Meilisearch
DESCRIPTION: Dockerfile snippet showing how to set Meilisearch host and API key as environment variables in Directus.

LANGUAGE: dockerfile
CODE:
MEILISEARCH_HOST=your_meilisearch_host
MEILISEARCH_API_KEY=your_meilisearch_api_key

----------------------------------------

TITLE: Initializing Directus SDK in SvelteKit
DESCRIPTION: Sets up the Directus client with REST API support in a SvelteKit project.

LANGUAGE: javascript
CODE:
// src/lib/directus.js
import { createDirectus, rest } from "@directus/sdk";
const directusUrl = "http://localhost:8055";
export const client = createDirectus(directusUrl).with(rest());

----------------------------------------

TITLE: Configuring Directus SDK Helper
DESCRIPTION: Helper function to create and configure Directus SDK instance

LANGUAGE: typescript
CODE:
import { createDirectus, rest } from "@directus/sdk";
export const DIRECTUS_API_URL = import.meta.env.VITE_DIRECTUS_URL;
function getDirectusClient() {
  const directus = createDirectus(DIRECTUS_API_URL).with(rest());
  return directus;
};
export default getDirectusClient;

----------------------------------------

TITLE: Implementing Display Entrypoint in JavaScript
DESCRIPTION: Example of defining a custom display interface using the Directus extensions SDK. Shows how to configure basic display properties including ID, name, icon, and supported types.

LANGUAGE: javascript
CODE:
import { defineInterface } from '@directus/extensions-sdk'
import DisplayComponent from './display.vue';

export default defineInterface({
	id: 'custom',
	name: 'Custom',
	icon: 'box',
	description: 'This is my custom display!',
	component: DisplayComponent,
	options: null,
	types: ['string'],
});

----------------------------------------

TITLE: Adding Display Options Configuration
DESCRIPTION: Configuration object that defines the display options, including a boolean toggle for showing months

LANGUAGE: javascript
CODE:
options: [
  {
    field: 'show_months',
    type: 'boolean',
    name: 'Show months as well',
    meta: {
      interface: 'boolean',
      options: {
        label: 'Yes',
      },
      width: 'half',
    },
  },
],

----------------------------------------

TITLE: Initializing Directus Extension and Installing Dependencies
DESCRIPTION: Commands to create a new Directus extension and install the lodash package.

LANGUAGE: shell
CODE:
npx create-directus-extension@latest
cd directus-operation-lodash
npm install lodash

----------------------------------------

TITLE: Fetching Available Room Types from Directus
DESCRIPTION: Function to query Directus for available room types based on check-in/out dates and capacity.

LANGUAGE: typescript
CODE:
export const getRoomTypes = async (
  checkInDate: string,
  checkOutDate: string,
  capacity: string
) => {
  try {
    const availableRooms = await directus.request(
      readItems("room_types", {
        fields: ["*"],
        filter: {
          capacity: { _gte: Number(capacity) },
        },
        deep: {
          rooms: {
            _limit: 1,
            _filter: {
              _or: [
                {
                  _and: [
                    {
                      is_available: true,
                      reservations: {
                        check_in_date: { _null: true },
                      },
                    },
                  ],
                },
                {
                  _and: [
                    {
                      is_available: true,
                      reservations: {
                        check_out_date: { _null: true },
                      },
                    },
                  ],
                },
                {
                  _and: [
                    {
                      is_available: true,
                      reservations: {
                        check_out_date: { _lt: checkInDate },
                      },
                    },
                  ],
                },
                {
                  _and: [
                    {
                      is_available: true,
                      reservations: {
                        check_in_date: { _gt: checkOutDate },
                      },
                    },
                  ],
                },
              ],
            },
          },
        },
      })
    );
    return availableRooms;
  } catch (error) {
    console.error("Error fetching available room types:", error);
  }
};

----------------------------------------

TITLE: Implementing Directus Realtime for Live Garden Updates
DESCRIPTION: This code shows how to use Directus Realtime to subscribe to changes in the 'place' collection. It handles the initial load of existing items and adds new items as they are created, updating the garden display in real-time.

LANGUAGE: javascript
CODE:
onMounted(() => {
  const connection = new WebSocket(wsBase)

  connection.addEventListener('open', () => {
    connection.send(JSON.stringify({
      type: 'auth',
      access_token: 'public-role-user-token'
    }))
  })

  connection.addEventListener('message', (message) => {
    const data = JSON.parse(message.data)

    if (data.type == 'auth' && data.status == 'ok') {
      connection.send(JSON.stringify({
        type: 'subscribe',
        collection: 'place',
        query: {
          fields: ['*', 'user_created.first_name'],
          filter: { event: { _eq: route.params.event } }
        }
      }))
    }
    if (data.type == 'subscription' && data.event == 'init') {
      places.value = data.data
    }

    if (data.type == 'subscription' && data.event == 'create') {
      places.value.unshift(data.data[0])
    }

    if (data.type == 'ping') {
      connection.send(JSON.stringify({
        type: 'pong'
      }))
    }
  })
})

----------------------------------------

TITLE: Creating Base Template with Navigation
DESCRIPTION: HTML template for the base layout including navigation links to different pages of the site.

LANGUAGE: html
CODE:
<nav>
    <a href="{% url 'home' %}">Home</a>
    <a href="{% url 'about' %}">About</a>
    <a href="{% url 'blog_list' %}">Blog</a>
</nav>

{% block content %}
{% endblock %}

----------------------------------------

TITLE: Configuring CORS in Directus Docker Setup
DESCRIPTION: Updates the docker-compose.yml file to enable CORS for the Directus project.

LANGUAGE: bash
CODE:
   CORS_ENABLED: "true"
   CORS_ORIGIN: "http://localhost:5173"
   CORS_CREDENTIALS: "true"

----------------------------------------

TITLE: Environment Configuration
DESCRIPTION: Environment variable configuration for Directus API URL

LANGUAGE: plaintext
CODE:
VITE_DIRECTUS_URL='https://directus.example.com';

----------------------------------------

TITLE: TypeScript Implementation with Sandbox Router
DESCRIPTION: Example of using TypeScript with the sandboxed endpoint router, including type definitions.

LANGUAGE: typescript
CODE:
/// <reference types="@directus/extensions/api.d.ts" />
import type { SandboxEndpointRouter } from 'directus:api';

export default (router: SandboxEndpointRouter) => {
	router.get("/hello", () => {
		return { status: 200, body: "Hello World" };
	});
};

----------------------------------------

TITLE: Updating GraphQL Content Version Queries in Directus 10.8.3
DESCRIPTION: Update GraphQL queries for content versions to use the new dedicated query types instead of the previous version parameter.

LANGUAGE: graphql
CODE:
# Before
query {
  <collection>_by_id(id: 15, version: "draft") {
    id
    title
    body
  }
}

query {
  <collection>(version: "draft") {
    id
    title
    body
  }
}

LANGUAGE: graphql
CODE:
# After
query {
  <collection>_by_version(id: 15, version: "draft") {
    id
    title
    body
  }
}

query {
  <collection>_by_version(version: "draft") {
    id
    title
    body
  }
}

query {
  versions(filter: { collection: { _eq: "posts" } }) {
    item
    key
  }
}

----------------------------------------

TITLE: Creating a Relation in Directus
DESCRIPTION: Demonstrates creating a new relation using RelationsService. It creates a relation between 'articles' and 'directus_files' collections, then reads and returns the created relation data.

LANGUAGE: javascript
CODE:
router.post('/', async (req, res) => {
  const relationsService = new RelationsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  const data = await relationsService.createOne({
    collection: 'articles',
    field: 'featured_image',
    related_collection: 'directus_files',
  });

  const data = await relationsService.readOne(data);

  res.json(record);
});

----------------------------------------

TITLE: Defining TypeScript Types for Data Models
DESCRIPTION: TypeScript type definitions for products, categories and orders in the e-commerce system

LANGUAGE: typescript
CODE:
export type ProductTypes = {
  id: number;
  name: string;
  image: string;
  price: number;
  description: string;
  category: CategoryTypes[]
  is_available: boolean;
  order_id: OrderTypes
};
export type CategoryTypes = {
  name: string;
  description: string
}
 export type OrderTypes = {
  order_no: string;
  email: string;
  date: string;
  total_amount: string;
  first_name: string;
  last_name: string;
  shipping_address: string;
  products: number[];
  payment_id: string;
 };

----------------------------------------

TITLE: Establishing WebSocket Connection on Mount
DESCRIPTION: Sets up WebSocket connection and subscription to messages on component mount.

LANGUAGE: javascript
CODE:
onMounted(() => {
  const cleanup = client.onWebSocket('message', function (message) {
    if (message.type == 'auth' && message.status == 'ok') {
      subscribe('create');
    }
  });

  client.connect();
  onBeforeUnmount(cleanup);
});

----------------------------------------

TITLE: Basic Endpoint Configuration
DESCRIPTION: Initial setup of the Stripe endpoint with basic configuration and routing.

LANGUAGE: javascript
CODE:
import Stripe from 'stripe';

export default {
  id: 'stripe',
  handler: (router) => {
    // Router config goes here
  },
};

----------------------------------------

TITLE: Implementing Create Post Page in SvelteKit
DESCRIPTION: Creates a page where users can create new posts using Directus SDK.

LANGUAGE: javascript
CODE:
// src/routes/protected/posts/create/+page.svelte

<script>
  import { createItem } from "@directus/sdk";
  import { goto } from "$app/navigation";
  import { client, isAuthenticated } from "../../../../lib/directus.js";
  import { onMount } from "svelte";

  let title = "";
  let content = "";
  let userId;

  onMount(async () => {
    console.log("onMount");

    const isAuth = await isAuthenticated();
    console.log("isAuth", isAuth);

    if (isAuth.authenticated === false) {
      goto("/login"); // Redirect to login if the user is not authenticated
    } else {
      userId = isAuth.user.id; // Get the logged-in user ID
      console.log("userId", userId);
    }
  });

  async function handleSubmit() {
    try {
  
      const response = await client.request(
        createItem("posts", {
          title,
          content,
        })
      );
      console.log("response", response);

      // Redirect to the posts list after successful post creation
      goto("/protected/posts");
    } catch (error) {
      console.error("Error creating post:", error);
    }
  }
</script>

<h1>Create New Post</h1>

<form on:submit|preventDefault={handleSubmit}>
  <div class="form-group">
    <label for="title">Title</label>
    <input id="title" type="text" bind:value={title} required />
  </div>

  <div class="form-group">
    <label for="content">Content</label>
    <textarea id="content" bind:value={content} rows="10" required></textarea>
  </div>

  <button type="submit" class="primary">Create Post</button>
</form>

<a href="/protected/posts" class="back-link">Back to Posts</a>

----------------------------------------

TITLE: Initializing Directus SDK Instance
DESCRIPTION: Configuration to initialize Directus SDK with type definitions and REST client

LANGUAGE: typescript
CODE:
import { createDirectus, rest } from "@directus/sdk";
import { CategoryTypes, OrderTypes, ProductTypes } from "@/types"

type Schema = {
  products: ProductTypes[];
  categories: CategoryTypes[];
  orders: OrderTypes[];
};

const directus = createDirectus<Schema>(
  process.env.NEXT_PUBLIC_DIRECTUS_URL as string
).with(rest());

export default directus;

----------------------------------------

TITLE: Implementing API Entrypoint for Directus Flow Operation
DESCRIPTION: This snippet shows how to implement the API entrypoint for a custom Flow Operation in Directus. It defines the operation's ID and handler function, which logs the 'text' option value.

LANGUAGE: javascript
CODE:
export default {
	id: 'custom',
	handler: (options) => {
		console.log(options.text);
	},
};

----------------------------------------

TITLE: Working with Generated Output Types in Directus SDK
DESCRIPTION: Demonstrates how to work with generated output types from Directus SDK queries, using TypeScript's Awaited and ReturnType utilities.

LANGUAGE: typescript
CODE:
async function getCollectionA() {
  return await client.request(
    readItems('collection_a', {
      fields: ['id']
    })
  )
}

// generated type that can be used in the component
// resolves to { "id": number } in this example
type GeneratedType = Awaited<ReturnType<typeof getCollectionA>>;

----------------------------------------

TITLE: Reading Fields in Directus
DESCRIPTION: Shows how to read all fields of a collection using FieldsService. It retrieves and returns data for all fields in the specified collection.

LANGUAGE: javascript
CODE:
router.get('/', async (req, res) => {
  const fieldsService = new FieldsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  const data = await fieldsService.readAll('collection_name');

  res.json(data);
});

----------------------------------------

TITLE: Drawing Placed Items in P5.js Garden Display
DESCRIPTION: This P5.js draw function renders the garden display. It loops through all placed items, drawing them on the canvas and showing the gardener's name on hover. The function is called repeatedly, ensuring new items are displayed immediately.

LANGUAGE: javascript
CODE:
p5.draw = () => {
  p5.background(background.value)
  for (let place of places.value) {
		// Draw item
    const placeable = placeables.value.find(p => p.name == place.name)
    const x = parseInt(place.x_pos), y = parseInt(place.y_pos)
    p5.image(placeable.image, x, y, 100 * placeable.aspect, 100)

		// Draw gardener name on hover
    const mouseInBoundsX = p5.mouseX > x && p5.mouseX < x + (100 * placeable.aspect)
    const mouseInBoundsY = p5.mouseY > y && p5.mouseY < y + 100
    if (mouseInBoundsX && mouseInBoundsY) {
      p5.stroke('black')
      p5.text(`${placeable.name} by ${place.user_created.first_name}`, p5.mouseX, p5.mouseY)
      p5.noStroke()
    }
  }
}

----------------------------------------

TITLE: Subscribing to Message Events
DESCRIPTION: Creates a function to subscribe to message events and handle incoming messages.

LANGUAGE: javascript
CODE:
async function subscribe(event) {
  const { subscription } = await client.subscribe('messages', {
    event,
    query: {
      fields: ['*', 'user_created.first_name'],
    },
  });

  for await (const message of subscription) {
    receiveMessage(message);
  }
}

----------------------------------------

TITLE: Creating Dynamic Routes for Pages in Astro
DESCRIPTION: TypeScript code for an Astro page that generates dynamic routes based on Directus pages collection. It uses getStaticPaths to create routes for each page slug.

LANGUAGE: typescript
CODE:
---
import Layout from "../layouts/Layout.astro";
import directus from "../lib/directus";
import { readItems } from "@directus/sdk";

export async function getStaticPaths() {
  const pages = await directus.request(readItems("pages"));
  return pages.map((page) => ({
    params: { slug: page.slug },
    props: page,
  }));
}
const page = Astro.props;
---

<Layout title={page.title}>
  <main>
    <h1>{page.title}</h1>
    <div set:html={page.content} />
  </main>
</Layout>

----------------------------------------

TITLE: Updating Default Page in SvelteKit
DESCRIPTION: Updates the default page to check for authentication and redirect accordingly.

LANGUAGE: javascript
CODE:
<script>
  import { onMount } from "svelte";
  import { isAuthenticated } from "../lib/directus.js";
  import { goto } from "$app/navigation";

  onMount(async () => {
    try {
      const response = await isAuthenticated();

      if (response.authenticated === false) {
        goto("/login");
      } else {
        goto("/protected");
      }
    } catch (error) {
      console.error("Authentication check failed:", error);
      goto("/login");
    }
  });
</script>

<div class="container">
  <h1>Welcome to the App</h1>
  <p>Redirecting...</p>
</div>

----------------------------------------

TITLE: Implementing Dynamic Page Builder in Nuxt
DESCRIPTION: Component that dynamically renders different block types for event landing pages using Nuxt and TypeScript. Maps block types to components and renders them based on the data received from Directus.

LANGUAGE: jsx
CODE:
<script setup lang="ts">
import type { BlockType, EventLandingPageBlocks } from '~/types';

const componentMap: Record<BlockType, any> = {
	block_hero: resolveComponent('BlocksHero'),
	block_faqs: resolveComponent('BlocksFaqs'),
	block_cta: resolveComponent('BlocksCta'),
	block_speakers: resolveComponent('BlocksSpeakers'),
	block_schedule: resolveComponent('BlocksSchedule'),
	block_cardgroup: resolveComponent('BlocksCardgroup'),
	block_countdown: resolveComponent('BlocksCountdown'),
	block_button: resolveComponent('BlocksButton'),
	block_button_group: resolveComponent('BlocksButtonGroup'),
	block_card: resolveComponent('BlocksCard'),
};

const props = defineProps<{
	blocks: EventLandingPageBlocks[];
}>();
</script>

<template>
	<div id="content" class="mx-auto">
		<template v-for="block in blocks" :key="block.id">
			<component
				:is="componentMap[block.collection as BlockType]"
				v-if="block && block.collection"
				:data="block.item"
			/>
		</template>
	</div>
</template>

----------------------------------------

TITLE: Implementing Embed Hook
DESCRIPTION: Example showing how to inject custom JavaScript into the Data Studio using embed hooks.

LANGUAGE: javascript
CODE:
export default ({ embed }) => {
	embed('body', '<script>console.log("Hello World")</script>');
};

----------------------------------------

TITLE: Creating Algolia Index Objects on Directus Item Creation (JavaScript)
DESCRIPTION: Implements a Directus action hook that saves new posts to the Algolia index when they are created in the 'posts' collection.

LANGUAGE: javascript
CODE:
export default ({ action }) => {
    action('posts.items.create', async (meta) => {
        await index.saveObjects([{ objectID: `${meta.key}`, ...meta.payload }]);
    });
};

----------------------------------------

TITLE: Creating a Collection in Directus
DESCRIPTION: Demonstrates how to create a new collection using CollectionsService. It creates an 'articles' collection with a note, then reads and returns the created collection data.

LANGUAGE: javascript
CODE:
router.post('/', async (req, res) => {
  const collectionsService = new CollectionsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  const collectionKey = await collectionsService.createOne({
    collection:'articles',
    meta: {
      note: 'Blog posts',
    },
  });

  const data = await collectionsService.readOne(collectionKey);

  res.json(record);
});

----------------------------------------

TITLE: Preloading Images for P5.js Garden Display
DESCRIPTION: This snippet demonstrates how to preload images for placeables in the garden display using P5.js. It fetches placeable data from Directus and loads images into memory before rendering the canvas.

LANGUAGE: javascript
CODE:
const placeablesData = await directus.request(
  readItems('placeables', {
    fields: ['*', {
      'image': ['id', 'width', 'height']
    }]
  })
)
const placeables = ref([])
const places = ref([])

p5.preload = () => {
  background.value = p5.loadImage(asset('image-id-from-directus'))
  for (const p of placeablesData) {
    placeables.value.push({
      image: p5.loadImage(asset(p.image.id)),
      name: p.name,
      aspect: p.image.width / p.image.height
    })
  }
}

----------------------------------------

TITLE: Implementing Roast Endpoint in Nuxt Server
DESCRIPTION: This Nuxt server endpoint handles the roasting process. It fetches GitHub data, calculates the naughty/nice score, generates the AI roast, and stores the result in Directus.

LANGUAGE: typescript
CODE:
export default defineEventHandler(async (event): Promise<RoastResponse | H3Error> => {
	const body = await readValidatedBody(event, (body) => profileSchema.parse(body));
	const { username, wishlist, mode, roasted_by, profileType } = body;

	// Check to see if the profile already exists in Directus if so, redirect to the profile
	const [directusResponse] = await directusServer.request(
		readItems('profiles', { filter: { username: { _eq: username } }, limit: 1 }),
	);

	if (directusResponse) {
		return {
			redirect: `/${username}`,
		};
	}

	// Check to see if the user is logged in to GitHub if not, don't allow them to submit a letter to save on costs
	const session = await requireUserSession(event);

	if (!session) {
		throw createError({
			statusCode: 401,
			message: 'Unauthorized. Please login to submit a letter to Santa.',
		});
	}

	try {
		const variables = { username };

		const response = await $fetch('https://api.github.com/graphql', {
			method: 'POST',
			headers: {
				Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
				'Content-Type': 'application/json',
			},
			body: {
				query: profileType === 'User' ? userQuery : orgQuery,
				variables,
			},
		});

		const typedResponse = response as { data: { user?: GitHubUserData; organization?: GitHubOrgData } };

		const profileData =
			profileType === 'User'
				? (typedResponse.data.user as GitHubUserData)
				: (typedResponse.data.organization as GitHubOrgData);

		// Score the contributions based on the profile type
		const score = calculateNiceScore(profileData, profileType);

		const prompt = `
			You are the open source Santa Claus. You determine who's open source contributions are naughty or nice.
			Analyze the following Github ${profileType === 'User' ? 'user' : 'organization'}'s profile carefully and in detail.
			We've determined the ${profileType}'s score based on their contributions. Whether they're on the nice list
			or the naughty list, roast them accordingly. Write a short, funny letter in a snarky sarcastic tone.
			Include a couple lines from the wish list in the letter if it's provided.
			If the mode provided is "friend", then make a short mention of the roasted_by user in one of the paragraphs.

			STRUCTURE:
			- Intro
			- 3 short paragraphs
			- PS

			RULES:
			- Do NOT include a signature and like 'Yours, From Santa' in the letter.
			- The letter should be in Markdown format.
			- If someone uses profanity or asks for something inappropriate, do not roast them. Set the flagged field to true and provide a reason.

			Wish List: ${wishlist} ${mode === 'friend' ? `Note: Wishlist provided by ${roasted_by}` : ''}
			Profile: ${JSON.stringify(profileData)}
			Score: ${score}
			Mode: ${mode}
			Roasted By: ${roasted_by}
		`;

		const aiResponse = await generateObject({
			model: anthropic('claude-3-5-sonnet-20240620'),
			schema: aiPayloadSchema,
			maxTokens: 8192,
			messages: [{ role: 'user', content: prompt }],
		});

		// If the user has organizations and membersWithRoles exist, loop through the organizations and add the members to the metadata as possible_roasts
		const possibleRoasts: any[] = [];
		if (profileType === 'User' && (profileData as GitHubUserData).organizations?.nodes) {
			for (const org of (profileData as GitHubUserData).organizations.nodes ?? []) {
				if (org?.membersWithRole?.nodes) {
					possibleRoasts.push(...org.membersWithRole.nodes);
				}
			}
		}

		// Generate metadata to store with the profile
		const metadata = {
			ai_usage: aiResponse.usage,
			ai_response: aiResponse.object,
			score: score,
			possible_roasts: possibleRoasts,
		};

		// Store the profile in Directus
		const directusResponse = await directusServer.request(
			createItem('profiles', {
				username,
				letter: aiResponse.object.letter,
				list: score.list,
				wishlist,
				mode,
				score: score.finalScore,
				roasted_by,
				metadata,
				type: profileType,
			}),
		);

		return {
			redirect: `/${username}`,
			letter: directusResponse.letter,
			list: directusResponse.list,
			metadata: directusResponse.metadata,
			roasted_by: directusResponse.roasted_by,
			score: directusResponse.score,
			type: directusResponse.type,
			mode: directusResponse.mode,
			username: directusResponse.username,
			wishlist: directusResponse.wishlist,
		};
	} catch (error) {
		console.error(JSON.stringify(error));
		throw createError({
			statusCode: 500,
			message: 'Failed to roast profile',
		});
	}
});

----------------------------------------

TITLE: Implementing Frontend Error Testing Module
DESCRIPTION: Vue component that creates a test button to trigger and capture frontend errors in Sentry.

LANGUAGE: vue
CODE:
<template>
	<private-view title="My Custom Module">
		<v-button @click="triggerError">Trigger Error</v-button>
	</private-view>
</template>

<script>
export default {
	methods: {
		triggerError() {
			const error = new Error('Intentional front end error for Sentry');
			Sentry.captureException(error);
		}
	}
};
</script>

----------------------------------------

TITLE: Initializing Directus SDK Client
DESCRIPTION: Basic setup of Directus client with REST functionality.

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from '@directus/sdk';
const client = createDirectus('directus_project_url').with(rest());

----------------------------------------

TITLE: Generating AI Response with Anthropic Claude in TypeScript
DESCRIPTION: This code snippet demonstrates how to use the Vercel AI SDK to generate an AI response using Anthropic's Claude model. It sets up the Anthropic client and uses the generateObject function to ensure the response matches the defined schema.

LANGUAGE: typescript
CODE:
const anthropic = createAnthropic({
    apiKey: config.anthropicApiKey as string,
});

const aiResponse = await generateObject({
    model: anthropic('claude-3-5-sonnet-20240620'),
    schema: aiPayloadSchema,
    maxTokens: 8192,
    messages: [{ role: 'user', content: prompt }],
});

----------------------------------------

TITLE: Handling WebSocket Pings in JavaScript
DESCRIPTION: Add an event listener to handle 'ping' messages and respond with 'pong' to keep the WebSocket connection active.

LANGUAGE: js
CODE:
connection.addEventListener('message', (message) => {
	const data = JSON.parse(message.data);

	if (data.type === 'ping') {
		this.connection.send(
			JSON.stringify({
				type: 'pong',
			}),
		);
	}
});

----------------------------------------

TITLE: Implementing User Registration in SvelteKit
DESCRIPTION: Creates a registration form component that uses Directus SDK to register new users.

LANGUAGE: javascript
CODE:
// src/routes/register/+page.svelte

<script>
  import { client } from "../../lib/directus";
  import { registerUser } from "@directus/sdk";
  import { goto } from "$app/navigation";
  let email = "";
  let password = "";
  let firstName = "";
  let lastName = "";
  let error = null;

  async function handleRegister() {
    try {
      const response = await client.request(
        registerUser(email, password, {
          first_name: firstName,
          last_name: lastName,
        })
      );
      console.log("response>>>>>", response);
      goto("/login");
    } catch (err) {
      error = err.message;
      console.error(err);
    }
  }
</script>

<div class="container">
  <h1>Create Account</h1>

  {#if error}
    <p class="error">{error}</p>
  {/if}

  <form on:submit|preventDefault={handleRegister}>
    <div class="form-group">
      <input
        type="text"
        bind:value={firstName}
        placeholder="First Name"
        required
      />
      <input
        type="text"
        bind:value={lastName}
        placeholder="Last Name"
        required
      />
    </div>
    <input type="email" bind:value={email} placeholder="Email" required />
    <input
      type="password"
      bind:value={password}
      placeholder="Password"
      required
    />
    <button type="submit">Register</button>
  </form>
  <p class="login-link">
    Already have an account? <a href="/login">Login here</a>
  </p>
</div>

----------------------------------------

TITLE: Updating a Collection in Directus
DESCRIPTION: Illustrates updating a collection's metadata using CollectionsService. It updates the note for a specific collection and returns the updated data.

LANGUAGE: javascript
CODE:
router.patch('/', async (req, res) => {
  const collectionsService = new CollectionsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  const data = await collectionsService.updateOne('collection_name', {
    meta: {
      note: 'Updated blog posts',
    },
  });

  res.json(data);
});

----------------------------------------

TITLE: Directus SDK Plugin Configuration
DESCRIPTION: Setup for Directus SDK with authentication handling and cookie storage implementation.

LANGUAGE: javascript
CODE:
import { createDirectus, rest, authentication } from "@directus/sdk";

import Cookies from "js-cookie";
const directus = createDirectus("your-project-url")
    .with(
        authentication("cookie", {
            autoRefresh: true,
            credentials: "include",
            storage: {
                get() {
                    if (Cookies.get("directus_auth"))
                        return JSON.parse(Cookies.get("directus_auth"));
                    else return null;
                },
                set(data) {
                    Cookies.set("directus_auth", JSON.stringify(data));
                },
            },
        })
    )
    .with(rest());

export default directus;

----------------------------------------

TITLE: Running Directus Docker Container
DESCRIPTION: Command to start a local Directus instance using Docker. Creates a non-persistent demo environment on port 8055. The admin credentials will be displayed in the terminal output.

LANGUAGE: bash
CODE:
docker run -p 8055:8055 directus/directus

----------------------------------------

TITLE: Displaying Datacenter Regions Table in HTML
DESCRIPTION: An HTML table showing the availability of different datacenter regions for Enterprise and Professional tiers in Directus Cloud. The table includes checkmarks to indicate which regions are available for each tier.

LANGUAGE: html
CODE:
<table>
  <tr>
    <th>Region</th>
    <th>Enterprise</th>
    <th>Professional</th>
  </tr>
  <tr>
    <td>United States, N. Virginia</td>
    <td>✅</td>
    <td>✅</td>
  </tr>
  <tr>
    <td>Europe, Frankfurt</td>
    <td>✅</td>
    <td>✅</td>
  </tr>
  <tr>
    <td>Asia Pacific, Singapore</td>
    <td>✅</td>
    <td>✅</td>
  </tr>
  <tr>
    <td>United States, Ohio</td>
    <td>✅</td>
    <td>✅</td>
  </tr>
  <tr>
    <td>United States, N. California</td>
    <td>✅</td>
    <td></td>
  </tr>
  <tr>
    <td>United States, Oregon</td>
    <td>✅</td>
    <td></td>
  </tr>
  <tr>
    <td>Africa, Cape Town</td>
    <td>✅</td>
    <td></td>
  </tr>
  <tr>
    <td>Asia Pacific, Sydney</td>
    <td>✅</td>
    <td></td>
  </tr>
  <tr>
    <td>Canada, Central</td>
    <td>✅</td>
    <td></td>
  </tr>
  <tr>
    <td>Europe, London</td>
    <td>✅</td>
    <td></td>
  </tr>
  <tr>
    <td>Europe, Milan</td>
    <td>✅</td>
    <td></td>
  </tr>
  <tr>
    <td>Europe, Paris</td>
    <td>✅</td>
    <td></td>
  </tr>
  <tr>
    <td>Europe, Stockholm</td>
    <td>✅</td>
    <td></td>
  </tr>
  <tr>
    <td>Europe, Zurich</td>
    <td>✅</td>
    <td></td>
  </tr>
  <tr>
    <td>South America, São Paulo</td>
    <td>✅</td>
    <td></td>
  </tr>
</table>

----------------------------------------

TITLE: Implementing User Authentication Check in Next.js
DESCRIPTION: Creates a Data Access Layer (DAL) function to check if the user is authenticated and fetch user data using Directus SDK.

LANGUAGE: typescript
CODE:
import 'server-only';
import { cookies } from 'next/headers';
import client from '@/lib/directus';
import { readMe } from '@directus/sdk';
import { redirect } from 'next/navigation';

export async function getUserData() {
    try {
        // Fetch the currently authenticated user's details
        const token = (await cookies()).get("directus_session_token")?.value;

        if (!token) {
          redirect("/login"); // Redirect if unauthorized
        }

        client.setToken(token)
        const user = await client.request(readMe());


        return { success: true, user };
    } catch (error) {
        console.log(error);
        redirect("/login"); // Redirect if unauthorized
    }
}

----------------------------------------

TITLE: Logger Initializer App Definition - TypeScript
DESCRIPTION: Directus operation app definition for initializing the logger with context and metadata settings

LANGUAGE: typescript
CODE:
import { defineOperationApp } from '@directus/extensions-sdk';

export default defineOperationApp({
	id: 'initialize_logger',
	name: 'Init Logger',
	icon: 'box',
	description: 'Simple operation that sets the context and uuid for the session scope',
	overview: ({ loggingContext, metaData }) => [
		{
			label: 'Logging Context',
			text: loggingContext,
		},
		{
			label: 'Meta Data',
			text: metaData,
		},
	],
	options: [
		{
			field: 'loggingContext',
			name: 'Logging Context',
			type: 'string',
			meta: {
				width: 'full',
				interface: 'input',
			},
		},
		{
			field: 'metaData',
			name: 'Meta Data',
			type: 'json',
			meta: {
				interface: 'code',
				options: {
					language: 'json'
				},
			},
		},
	],
});

----------------------------------------

TITLE: Specifying Fields to Return in WebSocket JSON Subscription
DESCRIPTION: Use the 'query.fields' property to specify which fields should be returned in subscription events.

LANGUAGE: json
CODE:
{
	"type": "subscribe",
	"collection": "messages",
	"query": { "fields": ["text"] }
}

----------------------------------------

TITLE: Fetching Blog Posts with Directus SDK
DESCRIPTION: Implementation of getStaticProps to fetch blog posts from Directus, including author resolution and image URL formatting.

LANGUAGE: javascript
CODE:
export const getStaticProps = async () => {
  await directus.auth.static(process.env.DIRECTUS_TOKEN);

  const result = await directus.items('blogs').readByQuery({ sort: ['published_date'] });

  const resolvedResult = await Promise.all(
    result.data.map(async (blog) => {
      const author = await directus.items('Authors').readOne(1);
      return { ...blog, author: author?.name };
    })
  );

  resolvedResult?.forEach((blog) => {
    blog.image = `${process.env.DIRECTUS_URL}assets/${blog.image}`;
  });

  return {
    props: {
      blogs: resolvedResult,
    },
  };
};

----------------------------------------

TITLE: Initializing Directus Extension with NPX
DESCRIPTION: Command to initialize a new Directus extension using npx, creating boilerplate code for a custom endpoint.

LANGUAGE: shell
CODE:
npx create-directus-extension@latest

----------------------------------------

TITLE: Installing SvelteKit Project Dependencies
DESCRIPTION: Commands to create a new SvelteKit project and install required dependencies including Directus SDK

LANGUAGE: bash
CODE:
npm create svelte@latest video-streaming-app #
cd video-streaming-app
npm install
npm install @directus/sdk svelte-video-player

----------------------------------------

TITLE: Generating Documentation Build
DESCRIPTION: Command to build the documentation website locally before deployment.

LANGUAGE: bash
CODE:
pnpm run generate

----------------------------------------

TITLE: Data Fetching Comparison Between Nuxt Content and Directus
DESCRIPTION: Comparison of data fetching approaches in Nuxt Content versus Directus, demonstrating simplified relationship handling.

LANGUAGE: javascript
CODE:
// Nuxt Content
async asyncData({ $content }) {
  let content = await $content('library').sortBy('date', 'desc').fetch()
  const collections = await $content('collections').sortBy('highlight', 'desc').sortBy('date', 'desc').limit(4).fetch()
  const people = await $content('people').fetch()

  content = content.map(item => {
      let people = item.people.map(name => people.find(person => person.dir.split('/')[2] === name))
      people = profiles.map(profile => ({ ...profile, avatar: `${profile.dir}/${profile.avatar}` }))
      return { ...item, people }
  })

  return { content, collections }
}

// Directus
async asyncData({ $directus }) {
  const { data: content } = await $directus.items('library').readByQuery({ limit: -1, sort: '-date', fields: ['*', '*.*'] })
  let { data: { collections } } = await $directus.items('featured').readByQuery({fields: ['*', '*.*', '*.*.*']})
  return { content, collections }
}

----------------------------------------

TITLE: Implementing Logout API Route in Next.js
DESCRIPTION: Creates an API route for user logout that clears the session token cookie and redirects to the login page.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  const url = request.nextUrl.clone();
        url.pathname = "/login"
  const response =  NextResponse.redirect(url);

  response.cookies.set("directus_session_token", "", {});

  return response;
}

----------------------------------------

TITLE: Configuring Preview URL for Google Docs Viewer in Directus
DESCRIPTION: This URL configuration allows Directus to use Google Docs Viewer (Gview) for previewing files. It includes placeholders for the Directus project URL and access token, which need to be replaced with actual values.

LANGUAGE: plaintext
CODE:
https://docs.google.com/gview?embedded=true&url=YOUR_DIRECTUS_URL/assets/?access_token=TOKEN

----------------------------------------

TITLE: GraphQL Client Setup for Public Mode
DESCRIPTION: Implementation of GraphQL client creation for public authentication mode using graphql-ws library.

LANGUAGE: javascript
CODE:
import { createClient } from "graphql-ws";

const client = createClient({
	url: "ws://your-directus-url/graphql",
	keepAlive: 30000,
});

----------------------------------------

TITLE: Video Card Component Implementation
DESCRIPTION: Svelte component for displaying individual video cards with thumbnails and metadata

LANGUAGE: svelte
CODE:
<script lang="ts">
  import type { Video } from "$lib/types";
  export let video: Video;
</script>
<a href="/video/{video.id}" class="video-card">
  <img
    src={`${import.meta.env.VITE_DIRECTUS_URL}/assets/${video.thumbnail.id}`}
    alt={video.title}
  />
  <h3>{video.title}</h3>
  <p>
    {video.views} views • {new Date(video.upload_date).toLocaleDateString()}
  </p>
</a>
<style>
  .video-card { display: block; text-decoration: none; color: inherit; }
  img { width: 100%; height: auto; }
</style>

----------------------------------------

TITLE: Defining Schema for User Authentication in JavaScript
DESCRIPTION: Schema definition for querying the directus_users collection to validate user authentication.

LANGUAGE: javascript
CODE:
const schema = {
  collections: {
    directus_users: {
      collection: 'directus_users',
      primary: 'id',
      singleton: false,
      accountability: 'all',
      fields: {
        id: {
          field: 'id',
          defaultValue: null,
          nullable: false,
          generated: false,
          type: 'uuid',
          dbType: 'uuid',
          special: [],
          alias: false
        }
      }
    }
  }
};

----------------------------------------

TITLE: Displaying New Messages
DESCRIPTION: Updates the receiveMessage function to add new messages to the message history and updates the HTML to display the messages.

LANGUAGE: javascript
CODE:
function receiveMessage() {
  if (data.type == 'subscription' && data.event == 'init') {
	  console.log('subscription started');
  }
  if (data.type == 'subscription' && data.event == 'create') {
    addMessageToList(message.data[0]);
  }
}

function addMessageToList(message) {
  messageHistory.value.push(message);
}

----------------------------------------

TITLE: Checking Netlify Environment Variables
DESCRIPTION: Command to list Netlify environment variables needed for deployment.

LANGUAGE: bash
CODE:
netlify env:list --plain

----------------------------------------

TITLE: Initializing CollectionsService in Directus
DESCRIPTION: Sets up the CollectionsService to perform CRUD operations on collections. Requires the schema and accountability from the request context.

LANGUAGE: javascript
CODE:
export default defineEndpoint((router, context) => {
  const { services, getSchema } = context;
  const { CollectionsService } = services;

  router.get('/', async (req, res) => {
    const collectionsService = new CollectionsService({
      schema: await getSchema(),
      accountability: req.accountability
    });

    // Your route handler logic
  });
});

----------------------------------------

TITLE: Adding Logout Button to Dashboard in Next.js
DESCRIPTION: Updates the dashboard component to include a logout button that invokes the logout API route.

LANGUAGE: typescript
CODE:
import { getUserData } from '@/lib/dal'; // Import your DAL function
import client from '@/lib/directus';
import { readItems } from '@directus/sdk';

export default async function Dashboard() {
  const response = await getUserData();

  const posts = await client.request(readItems('posts'));

  return (
    <main>
      <form action="/api/auth/logout" method="POST">
        <button type="submit">Logout</button>
      </form>
      <h1>Welcome!</h1>
      <p>Your id: {response?.user?.id}</p>
      <section>
        <h2>Posts</h2>
        {posts.length > 0 ? (
          <ul>
            {posts.map((post) => (
              <li key={post.id}>
                <h3>{post.title}</h3>
              </li>
            ))}
          </ul>
        ) : (
          <p>No posts available.</p>
        )}
      </section>
    </main>
  );
}

----------------------------------------

TITLE: Creating SEO Collection Schema in Directus
DESCRIPTION: Markdown schema definition for creating an SEO collection with fields for meta tags, canonical URLs, and crawler instructions.

LANGUAGE: markdown
CODE:
seo

- id (Type: uuid)
- title (Type: String, Interface: Input, Note: This item's title, defaults to item.title. Max 70 characters including the site name.)
- meta_description (Type: Text, Interface: Textarea, Note: This item's meta description. Max 160 characters.)
- canonical_url (Type: String, Interface: Input, Note: Where should the canonical URL for this entry point to.)
- no_index (Type: Boolean, Interface: Toggle, Note: Instruct crawlers not to index this item.)
- no_follow (Type: Boolean, Interface: Toggle, Note: Instruct crawlers not to follow links on this item.)
- og_image (Type: Image, Note: This item's OG image. Defaults to global site OG image. The recommended size is 1200px x 630px. The image will be focal cropped to this dimension.)
- sitemap_change_frequency (Type: String, Interface: Input, Note: How often to instruct search engines to crawl.)
- sitemap_priority (Type: Decimal, Interface: Input, Note: Valid values range from 0.0 to 1.0. This value does not affect how your pages are compared to pages on other sites, it only lets the search engines know which pages you deem most important for the crawlers.)

----------------------------------------

TITLE: Combined Transformations using REST API
DESCRIPTION: Shows how to combine custom and advanced transformations in a single REST API call

LANGUAGE: http
CODE:
GET /assets/c984b755-e201-497e-b0a7-24156ad9c7e0
	?transforms=[["flip"]]
	&fit=cover
	&width=300
	&height=100

----------------------------------------

TITLE: Defining Directus Schema Types
DESCRIPTION: TypeScript definitions for the Directus schema, including interfaces for pages, blocks, and various content types.

LANGUAGE: typescript
CODE:
/// <reference types="@directus/extensions/api.d.ts" />

interface DirectusSchema {
	pages: Page[];
}

interface Block {
	id: string;
	collection: string;
	item: Hero | RichText | CardGroup;
}

interface Page {
	title: string;
	slug: string;
	blocks: Block[];
}

interface Button {
	label: string;
	href: string;
	variant: string;
}

interface Card {
	id: number;
	image: string;
	content: string;
}

interface Post {
	id: number;
	title: string;
	content: string;
}

interface Hero {
	headline: string;
	content: string;
	buttons: Button[];
}

interface RichText {
	headline: string;
	content: string;
}

interface CardGroup {
	headline: string;
	content: string;
	group_type: string;
	posts: Post[];
	cards: Card[];
}

interface Card {
	image: string;
	content: string;
}

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Commands to create a new Directus extension and install required dependencies.

LANGUAGE: shell
CODE:
npx create-directus-extension@latest
cd directus-hook-phone-validation
npm install twilio @directus/errors

----------------------------------------

TITLE: Setting Up Form Submission Methods
DESCRIPTION: Creates methods to handle login and message submission form events.

LANGUAGE: javascript
CODE:
const loginSubmit = (event) => {
  const email = event.target.elements.email.value;
  const password = event.target.elements.password.value;
};

const messageSubmit = (event) => {};

----------------------------------------

TITLE: Creating a Base Email Template with LiquidJS
DESCRIPTION: Demonstrates the structure of a basic HTML email template using LiquidJS blocks for header, content, and footer.

LANGUAGE: liquid
CODE:
<!doctype html>
<html lang="en">
<head>
	<title></title>
</head>
<body>
	{% block header %}{% endblock %}
	{% block content %}{% endblock %}
	{% block footer %}{% endblock %}
</body>
</html>

----------------------------------------

TITLE: Creating Blog Index Page with Nuxt and Directus
DESCRIPTION: Vue component that displays a list of blog posts fetched from Directus using the custom plugin. Uses NuxtLink for navigation and async data fetching.

LANGUAGE: vue
CODE:
<template>
	<h1>Blog</h1>
	<ul>
		<li v-for="post in posts" :key="post.id">
			<NuxtLink :href="`/${post.slug}`">
				<h2>{{ post.title }}</h2>
			</NuxtLink>
		</li>
	</ul>
</template>

<script setup>
const { $directus, $readItems } = useNuxtApp()

const posts = await useAsyncData('posts', () => {
  return $directus.request($readItems('posts'))
})
</script>

----------------------------------------

TITLE: Fetching Related Content in Nuxt Content
DESCRIPTION: Example of fetching and relating content items manually in Nuxt Content, showing the limitations of working without proper relationships.

LANGUAGE: javascript
CODE:
const collection = await $content('collections', params.slug).fetch()

const library = await $content('library').fetch()

const items = library.filter(libItem => collection.items.find(colItem => libItem.path.includes(colItem)))

----------------------------------------

TITLE: Advanced Transformations using SDK
DESCRIPTION: Shows how to perform advanced image transformations using the Directus SDK with Sharp API operations

LANGUAGE: javascript
CODE:
import { createDirectus, rest, readAssetRaw } from '@directus/sdk';

const FILE_ID = 'c984b755-e201-497e-b0a7-24156ad9c7e0';

const directus = createDirectus('directus_project_url').with(rest());

const result = await directus.request(
  readAssetRaw(FILE_ID, {
    transforms: [
      ['rotate', 90],
      ['blur', 10],
      ['tint', 'rgb(255, 0, 255)'],
      [
        'negate',
        {
          lower: 10,
          upper: 50,
        },
      ],
    ],
  }),
);

----------------------------------------

TITLE: Starting Django Development Server
DESCRIPTION: Command to start the Django development server.

LANGUAGE: bash
CODE:
python manage.py runserver

----------------------------------------

TITLE: Installing Dependencies for Directus Twilio Extension
DESCRIPTION: Commands to create a new Directus extension and install the Twilio dependency

LANGUAGE: shell
CODE:
npx create-directus-extension@latest
cd directus-operation-twilio-sms
npm install twilio

----------------------------------------

TITLE: Initializing Directus Client with WebSocket Support
DESCRIPTION: Creates a Directus client instance with authentication and real-time capabilities.

LANGUAGE: javascript
CODE:
const client = createDirectus(url)
  .with(authentication())
  .with(realtime());

----------------------------------------

TITLE: Complete Frontend Implementation (app.js)
DESCRIPTION: Complete frontend implementation for the Twilio SMS operation including all UI components and configurations

LANGUAGE: javascript
CODE:
export default {
	id: 'operation-twilio-sms',
	name: 'Twilio SMS',
	icon: 'forum',
	description: 'Send SMS using the Twilio API.',
	overview: ({ phone_number, message }) => [
		{
			label: 'Phone Number',
			text: phone_number,
		},
		{
			label: 'Message',
			text: message,
		},
	],
	options: [
		{
			field: 'phone_number',
			name: 'Phone Number',
			type: 'string',
			meta: {
				width: 'full',
				interface: 'input',
			},
		},
		{
			field: 'message',
			name: 'Message',
			type: 'text',
			meta: {
				width: 'full',
				interface: 'input-multiline',
			},
		},
	],
};

----------------------------------------

TITLE: Fetching Post Data with Draft Mode Enabled in Next.js
DESCRIPTION: This code modifies the post page to support draft mode. It checks if draft mode is enabled and displays a draft mode indicator if true.

LANGUAGE: tsx
CODE:
import directus from '@/lib/directus';
import { readItem, readItems } from '@directus/sdk';
import { draftMode } from 'next/headers';

export default async function Post({ params: { id } }: { params: { id: string } }) {
	const { isEnabled } = draftMode();

	const post = await getPostById(id);

	if (!post) {
		return null;
	}

	const { title, body } = post;

	return (
		<article>
			<h1>{title}</h1>
			<p>{body}</p>
			{isEnabled && <p>(Draft Mode)</p>}
		</article>
	);
}

export async function generateStaticParams() {
	const posts = await directus.request(
		readItems('Posts', {
			limit: -1,
		})
	);

	return posts.map((post) => ({
		id: String(post.id),
	}));
}

----------------------------------------

TITLE: Directus Data Migration Script
DESCRIPTION: Script using Directus SDK to migrate sponsor data from Nuxt Content to Directus, including asset handling and bulk creation.

LANGUAGE: javascript
CODE:
require('dotenv').config()
const fs = require('fs')
const fetch = require('cross-fetch')
const { Directus } = require('@directus/sdk')
const directus = new Directus(process.env.DIRECTUS_URL, { auth: { staticToken: process.env.DIRECTUS_TOKEN } })

const ASSET_FOLDER = 'Sponsors'
const CONTENT_DIR = 'content/sponsors'
const CONTENT_API_BASE = 'http://localhost:3000/_content/sponsors/'

(async () => {
  const { data: folders } = await directus.items('directus_folders').readByQuery()
  const { id: folder } = folders.find(f => f.name == ASSET_FOLDER)

  let dirs = fs.readdirSync(CONTENT_DIR)
  const items = []

  for(let dir of dirs) {
    const [ item ] = await fetch(CONTENT_API_BASE+dir).then(r => r.json())

    const { id: image } = await directus.files.import({
      url: `https://yougotthis.io${item.dir}/${item.file}`,
      data: { title: item.title, folder }
    })

    items.push({ ...item, image, id: dir })
  }

  const payload = items.map(item => {
    return {
      slug: item.id,
      title: item.title,
      file: item.image,
      url: item.url
    }
  })

  const { data } = await directus.items('sponsors').createMany(payload)
})();

----------------------------------------

TITLE: Updating Many-to-Many Relationship (Tags) in JSON
DESCRIPTION: Shows various ways to update a Many-to-Many relationship for tags using JSON. This includes assigning existing tags, creating new ones, updating existing ones, and removing tags.

LANGUAGE: json
CODE:
{
  "tags": [
    2,
    {
      "tag_id": 12
    },
    {
      "id": 5,
      "tag_id": 7
    },
    {
      "id": 19,
      "tag_id": { "name": "A new tag" }
    },
    {
      "id": 19,
      "tag_id": {
        "id": 149,
        "name": "changed tag name"
      }
    },
    {
      "id": 19,
      "tag_id": null
    }
  ]
}

----------------------------------------

TITLE: Creating Base HTML Template with Jinja
DESCRIPTION: Base HTML template that other pages will extend, including basic HTML structure with blocks for title and content

LANGUAGE: jinja
CODE:
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{% block title %}Directus x Flask{% endblock %}</title>
	</head>
	<body>
		<main>{% block content %}{% endblock %}</main>
	</body>
</html>

----------------------------------------

TITLE: Initializing Elasticsearch Client in Directus Hook
DESCRIPTION: Sets up the Elasticsearch client connection using environment variables for cloud ID and API key authentication.

LANGUAGE: javascript
CODE:
import { createRequire } from "module";
const require = createRequire(import.meta.url);
const { Client } = require("@elastic/elasticsearch");

export default ({ action }, { env }) => {
  const client = new Client({
    cloud: { id: env.ELASTIC_CLOUD_ID },
    auth: { apiKey: env.ELASTIC_API_KEY },
  });
};

----------------------------------------

TITLE: Importing Vue and Directus SDK Components
DESCRIPTION: Imports necessary Vue composables and Directus SDK methods for authentication and real-time communication.

LANGUAGE: javascript
CODE:
import { onMounted, ref, onBeforeUnmount } from 'vue';
import { authentication, createDirectus, realtime } from '@directus/sdk';

----------------------------------------

TITLE: Updating a Field in Directus
DESCRIPTION: Illustrates updating a field's properties using FieldsService. It updates the note and default value of a specific field and returns the updated data.

LANGUAGE: javascript
CODE:
router.patch('/', async (req, res) => {
  const fieldsService = new FieldsService({
    schema: await getSchema(),
    accountability: req.accountability
  });

  await fieldsService.updateField('collection_name', {
    meta: {
      note: 'Put the title here',
    },
    schema: {
      default_value: 'Hello World!',
    },
    field: 'field_name',
  });

  const data = await fieldsService.readOne(
    'collection_name',
    'field_name',
  );

  res.json(updatedField);
});

----------------------------------------

TITLE: Configuring CORS Settings in Docker Compose
DESCRIPTION: Docker compose configuration for enabling CORS with specific origin and credentials settings

LANGUAGE: bash
CODE:
CORS_ENABLED: "true"
CORS_ORIGIN: "http://localhost:5173"
CORS_CREDENTIALS: "true"

----------------------------------------

TITLE: Building and Installing the Panel Extension
DESCRIPTION: Build the panel extension and install it in the Directus extensions directory.

LANGUAGE: shell
CODE:
npm run build

----------------------------------------

TITLE: Sorting Results in Directus API
DESCRIPTION: Shows how to use the sort parameter to specify which fields to sort results by, including ascending and descending order.

LANGUAGE: http
CODE:
GET /items/posts
	?sort=sort,-date_created,author.name

LANGUAGE: graphql
CODE:
query {
	posts(sort: ["sort", "-date_created", "author.name"]) {
		id
	}
}

LANGUAGE: js
CODE:
import { createDirectus, rest, readItems } from '@directus/sdk';
const directus = createDirectus('https://directus.example.com').with(rest());

const result = await directus.request(
	readItems('posts', {
		sort: ['sort', '-date_created', 'author.name'],
	})
);

----------------------------------------

TITLE: Setting up React Router Configuration
DESCRIPTION: Configuring routes for the React application with React Router DOM

LANGUAGE: jsx
CODE:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter, Route, Routes } from 'react-router-dom'
import Post from './Post'
import Home from './Home'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/:id" element={<Post />} />
      </Routes>
    </BrowserRouter>
  </StrictMode>,
)

----------------------------------------

TITLE: Initializing Algolia Client in Directus Hook Extension (JavaScript)
DESCRIPTION: Sets up the Algolia client and initializes an index using environment variables for the Algolia app ID and admin key.

LANGUAGE: javascript
CODE:
import algoliasearch from  'algoliasearch';
const client = algoliasearch(process.env.ALGOLIA_APP_ID, process.env.ALGOLIA_ADMIN_KEY);
const index = client.initIndex('directus_index');

----------------------------------------

TITLE: OpenAI Token Usage Response Structure in JSON
DESCRIPTION: Example JSON structure showing the token usage response from ChatGPT API, including completion, prompt and total token counts.

LANGUAGE: json
CODE:
"usage": {
    "completion_tokens": 17,
    "prompt_tokens": 57,
    "total_tokens": 74
}

----------------------------------------

TITLE: Creating Dockerfile for Directus
DESCRIPTION: Basic Dockerfile configuration that uses Directus 10.10.4 as the base image

LANGUAGE: dockerfile
CODE:
FROM directus/directus:10.10.4

----------------------------------------

TITLE: Creating Page Component in Vue
DESCRIPTION: Defines a Vue component for rendering a complete page with dynamic blocks based on the Directus schema.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import Hero from './Hero.vue'
import RichText from './RichText.vue'
import CardGroup from './CardGroup.vue'

defineProps<{
	title: String,
	blocks: Block[]
}>()

const blockToComponent = (collectionName: string) => {
	switch (collectionName) {
		case 'block_hero':
			return Hero
		case 'block_richtext':
			return RichText
		case 'block_cardgroup':
			return CardGroup
		default:
			return 'div'
	}
}
</script>
<template>

	<Head>
		<title>{{ title }}</title>
	</Head>
	<h1>{{ title }}</h1>
	<div v-for="block in blocks" :key="block.id">
		<component :is="blockToComponent(block.collection)" v-bind="block.item"></component>
	</div>
</template>

----------------------------------------

TITLE: Installing Dependencies for Directus Stripe Hook
DESCRIPTION: Commands to initialize a new Directus extension and install the Stripe package.

LANGUAGE: shell
CODE:
npx create-directus-extension@latest

LANGUAGE: shell
CODE:
cd directus-endpoint-stripe
npm install stripe

----------------------------------------

TITLE: Configuring Session Authentication Environment Variables in Directus
DESCRIPTION: Environment variables setup for session-based authentication with cross-domain cookie settings.

LANGUAGE: sh
CODE:
AUTH_<PROVIDER>_MODE="session"
SESSION_COOKIE_DOMAIN="XXXX"
SESSION_COOKIE_SECURE="true"
SESSION_COOKIE_SAME_SITE="None"

----------------------------------------

TITLE: Nuxt Route Rules Configuration
DESCRIPTION: Configuration for Nuxt route rules defining caching strategies and proxy settings for different routes in the application.

LANGUAGE: jsx
CODE:
export default defineNuxtConfig({
	routeRules: {
		'/': { swr: true },
		'/auth/**': { swr: true },
		'/api/logo/**': {
			proxy: 'https://logo.clearbit.com/**',
			swr: true,
			cache: {
				maxAge: 60 * 60 * 24, // 24 hours
			},
		},
	},
})

----------------------------------------

TITLE: Initializing Module Configuration
DESCRIPTION: Core module configuration defining routes, ID, name and icon for the custom module

LANGUAGE: javascript
CODE:
import ModuleComponent from './module.vue';

export default {
  id: 'landing-page',
  name: 'Landing Page', 
  icon: 'rocket_launch',
  routes: [
    {
      name: 'home',
      path: '',
      props: true,
      component: ModuleComponent,
    },
    {
      name: 'page',
      path: ':page',
      props: true, 
      component: ModuleComponent,
    },
  ],
};

----------------------------------------

TITLE: Social Image Cache Management
DESCRIPTION: Server route handler for updating user profiles and purging cached social sharing images when avatars are updated.

LANGUAGE: jsx
CODE:
import { updateItem } from '@directus/sdk';
import { directusServer } from '~/server/utils/directus-server';
import jwt from 'jsonwebtoken';
import type { Token } from '~/types';

const ogPattern = '__og-image__/image';

export default defineEventHandler(async (event) => {
	const config = useRuntimeConfig();
	const {	public: { siteUrl } } = config;

	try {
		const body = await readBody(event);
		const cookies = parseCookies(event);
		const token = await jwt.verify(cookies.leapweek_token, process.env.JWT_SECRET as string);

		if (!token) {
			throw createError({ statusCode: 401, statusMessage: 'Unauthorized' });
		}

		const { people_id, ticket_id } = token as Token;

		if (!token || !people_id || !ticket_id) {
			throw createError({ statusCode: 401, statusMessage: 'Unauthorized' });
		}

		delete body.loading;

		const person = await directusServer.request(
			updateItem('people', people_id, body, {
				fields: [
					'id',
					'first_name',
					'last_name',
					'email',
					'job_title',
					'country',
					'website',
					'avatar',
					{ tickets: ['id', 'slug'] },
				],
			}),
		);

		if (person.tickets?.length) {
			$fetch(`${siteUrl}/${ogPattern}/t/${person.tickets[0].slug}/og.png?purge`);
			$fetch(`${siteUrl}/${ogPattern}/tickets/${person.tickets[0].id}/og.png?purge`);
		}

		return person;
	} catch (error) {
		return error;
	}
});

----------------------------------------

TITLE: Docker Build Commands
DESCRIPTION: Commands for building Docker images for both regular and Apple Silicon machines

LANGUAGE: bash
CODE:
docker build -t directus:10.10.4 --platform linux/amd64 .

LANGUAGE: bash
CODE:
docker buildx build -t directus:10.10.4 --platform linux/amd64 .

----------------------------------------

TITLE: Creating Hero Component in Next.js
DESCRIPTION: Defines a React component for rendering a hero section with headline, image, content, and buttons.

LANGUAGE: jsx
CODE:
import React from "react";
import Image from "next/image";

export default function Hero({ id, headline, content, buttons, image }) {
    return (
        <section id={id} className="hero">
            <div className="hero_content">
                <h2>{headline}</h2>
                <Image src={`http://localhost:8055/assets/${image}`} alt="" width={700} height={350} />
                <div dangerouslySetInnerHTML={{ __html: content }} />
                <div className="hero_buttons">
                    {buttons?.map((button, index) => (
                        <button key={index}>{button.label}</button>
                    ))}
                </div>
            </div>
        </section>
    );

}

----------------------------------------

TITLE: Configuring Weather Panel Options in JavaScript
DESCRIPTION: Defines the configuration options for the custom weather panel, including longitude and latitude inputs.

LANGUAGE: javascript
CODE:
options: [
	{
		field: 'longitude',
		name: 'Longitude',
		type: 'string',
		meta: {
			interface: 'input',
			width: 'half',
		},
	},
	{
		field: 'latitude',
		name: 'Latitude',
		type: 'string',
		meta: {
			interface: 'input',
			width: 'half',
		},
	},
],

----------------------------------------

TITLE: Markdown Table - Card Layout Controls
DESCRIPTION: Tables describing control options for the Card layout in Directus

LANGUAGE: markdown
CODE:
| Control | Description |
|---|---|
| **Image Source** | Set the field used as the display image. |
| **Title** | Sets a display template to use as a title. |
| **Subtitle** | Sets a display template to use as a subtitle. |
| **Image Fit** | Set how an image fits inside the card. |
| **Fallback Icon** | Set a default icon to display when an item has no image. |

----------------------------------------

TITLE: Handling Data in Directus Flow Operations
DESCRIPTION: Illustrates the structure of data passed between operations in a Directus flow. Shows how data from previous operations is accessed and how new data is appended to the chain.

LANGUAGE: json
CODE:
{
	"previousOperation": {
		"value": 5
	},
	"myScript": {
		"timesTwo": 10
	}
}

----------------------------------------

TITLE: Implementing Sidebar Content
DESCRIPTION: Demonstrates how to add content to the sidebar slot in a Directus custom module, including dropdown sections and custom text.

LANGUAGE: vue
CODE:
<template #sidebar>
    <sidebar-detail icon="info" title="Information" close>
        <div v-md="page_description" class="page-description" />
    </sidebar-detail>
    <sidebar-detail icon="layers" title="SIDEBAR ITEM">
        SIDEBAR ITEM CONTENT
    </sidebar-detail>
</template>

----------------------------------------

TITLE: AI Avatar Generation with OpenAI Integration
DESCRIPTION: Server-side route handler for generating AI avatars using OpenAI's Dall•E 3 API. Includes user authentication, avatar limit checking, and Directus file management.

LANGUAGE: jsx
CODE:
import { importFile, readItem } from '@directus/sdk';
import { directusServer } from '~/server/utils/directus-server';
import jwt from 'jsonwebtoken';
import type { Token, People } from '~/types';

const openAiApiKey = process.env.OPENAI_API_KEY;
const jwtSecret = process.env.JWT_SECRET;
const avatarLimit = 3;

export default defineEventHandler(async (event) => {
	try {
		const body = await readBody(event);
		const cookies = parseCookies(event);
		const token = (await jwt.verify(cookies.leapweek_token, jwtSecret as string)) as Token;

		if (!token) {
			throw createError({ statusCode: 401, statusMessage: 'Unauthorized' });
		}

		const ticket = await directusServer.request(readItem('event_tickets', token.ticket_id));

		if (!ticket) {
			throw createError({ statusCode: 500, statusMessage: 'Ticket not found' });
		}

		if (ticket.avatars && ticket.avatars.length >= avatarLimit) {
			throw createError({ statusCode: 500, statusMessage: `Maximum number of ${avatarLimit} avatars generated.` });
		}

		let { attributes } = body;

		attributes = attributes.join(', ');

		const prompt = `A photorealistic head-on headshot of a single rabbit, set against a black background, with detailed fur texture and realistic lighting. Keep the rabbits face inside the frame. The rabbit should have the following characteristics: ${attributes}.`;

		const image: any = await $fetch('https://api.openai.com/v1/images/generations', {
			method: 'POST',
			headers: { Authorization: `Bearer ${openAiApiKey}`, 'Content-Type': 'application/json' },
			body: { prompt, model: 'dall-e-3', n: 1, size: '1024x1024' },
		});

		const imageResponse = await directusServer.request(
			importFile(image.data[0].url, {
				description: image.data[0].revised_prompt,
			}),
		);

		await directusServer.request(
			updateItem('event_tickets', token.ticket_id, {
				avatars: {
					create: [
						{
							directus_files_id: imageResponse.id,
							event_tickets_id: token.ticket_id,
						},
					],
				},
				people_id: {
					id: token.people_id,
					avatar: ticket.avatars?.length === 0 ? imageResponse.id : (ticket.people_id as People)?.avatar,
				},
			}),
		);

		return { directus_files_id: imageResponse.id };
	} catch (error) {
		return error;
	}
});

----------------------------------------

TITLE: Configuring Deepgram API Request Body in Directus Automate
DESCRIPTION: This JSON snippet sets up the request body for the Deepgram API call in Directus Automate. It provides the URL of the uploaded audio file, using Directus variables to dynamically generate the correct URL and include an access token.

LANGUAGE: json
CODE:
{
  "url":"YOUR_DIRECTUS_URL/assets/{{$trigger.key}}?access_token=TOKEN"
}

----------------------------------------

TITLE: Setting up Directus Client in Next.js
DESCRIPTION: Creates a helper file to initialize and export the Directus client for use throughout the Next.js application.

LANGUAGE: javascript
CODE:
import { createDirectus, rest, authentication } from '@directus/sdk';

const BACKEND_URL = "http://localhost:8055/"

const client = createDirectus(BACKEND_URL)
    .with(authentication("json"))
    .with(rest())

export default client;

----------------------------------------

TITLE: Markdown Table - Layout Customization Categories
DESCRIPTION: Table describing different categories of layout customization controls in Directus

LANGUAGE: markdown
CODE:
| Category       | Description                                                                                       |
|------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Styling and Formatting       | These are additional customizations to the way a layout displays such as the size of each Item, how images are cropped, etc.                                                                                       |
| Field Values Displayed       | Most layouts allow you to choose which field value(s) are used to represent each item on the collection page. For example, with blog posts, it may be ideal to have the hero image, blog title, date, author, etc. |
| Manual and Automatic Sorting | Certain layouts may allow sorting items by value in ascending and descending order, drag-and-drop repositioning of items, etc.                                                                                     |

----------------------------------------

TITLE: Subscribing to Changes in Directus Realtime
DESCRIPTION: This JavaScript snippet shows how to create a subscription to the 'messages' collection in Directus. It listens for 'create' events and logs new items to the console. The subscription query specifies which fields to include in the received data.

LANGUAGE: javascript
CODE:
const { subscription } = await directus.subscribe('messages', {
	event: 'create',
	query: { fields: ['user', 'text'] },
});

for await (const item of subscription) {
	console.log(item);
}

----------------------------------------

TITLE: Creating Main Module Component
DESCRIPTION: Main Vue component implementing the module interface with navigation, breadcrumbs and content display

LANGUAGE: vue
CODE:
<template>
  <private-view :title="page_title">
    <template v-if="breadcrumb" #headline>
      <v-breadcrumb :items="breadcrumb" />
    </template>

    <template #navigation>
      <page-navigation :current="page" :pages="all_pages"/>
    </template>

    <div class="lp-container">
      <div class="lp-banner" v-if="page_banner">
        <img :src="page_banner" alt=""/>
      </div>
      <div class="lp-cards" v-if="page_cards">
        <div class="lp-card" v-for="card in page_cards.filter(item => (item.uri != page))" :key="card.uri" :style="`background-color: ${card.color}`" @click="change_page(card.to)">
          <v-icon :name="card.icon"/>
          <span class="lp-card-title">{{ card.label }}</span>
        </div>
      </div>
      <div class="lp-body" v-if="page_body" v-html="page_body"></div>
    </div>

    <router-view name="landing-page" :page="page" />
  </private-view>
</template>

----------------------------------------

TITLE: Implementing Basic Pagination in Next.js Server Component
DESCRIPTION: Server Component code to fetch paginated posts from Directus and render them with pagination controls.

LANGUAGE: javascript
CODE:
import Pagination from "@/components/Pagination";
import directus from "@/lib/directus";
import { readItems } from "@directus/sdk";

const getPosts = async (limit, page) => {
  return directus.request(
    readItems("posts", {
      limit,
      page,
    })
  );
};

export default async function Home({ searchParams }) {
  const LIMIT = 4;
  const currentPage = parseInt(searchParams.page) || 1;
  const posts = await getPosts(LIMIT, currentPage);
  return (
    <div>
      <ul>
        {posts.map((post) => {
          return (
            <li key={post.id}>
              <h2>{post.title}</h2>
              <p>{post.body}</p>
            </li>
          );
        })}
      </ul>
      <Pagination limit={LIMIT} currentPage={currentPage} />
    </div>
  );
}

----------------------------------------

TITLE: Implementing Infinite Scrolling in Next.js
DESCRIPTION: Client Component using Intersection Observer API to implement infinite scrolling of posts fetched from Directus.

LANGUAGE: javascript
CODE:
"use client";

import { useState, useRef, useEffect } from "react";

const PostList = ({ initialPosts, getPosts, limit, totalPostCount }) => {
  const [currentPage, setCurrentPage] = useState(1);
  const [posts, setPosts] = useState(initialPosts);
  const observerElem = useRef(null);

  const hasMorePosts = () => {
    const recievedCount = limit * currentPage;
    return recievedCount < totalPostCount;
  };

  useEffect(() => {
    if (typeof window === "undefined" || !window.IntersectionObserver) return;
    const element = observerElem.current;
    const option = { threshold: 0 };

    const observer = new IntersectionObserver(handleObserver, option);
    if (element) observer.observe(element);
    return () => {  if (element) observer.unobserve(element) };
  }, [currentPage]);

  const fetchMorePosts = async () => {
    const nextPage = currentPage + 1;
    const fetchedPosts = await getPosts(nextPage, limit);
    setPosts((prevPosts) => [...prevPosts, ...fetchedPosts]);
    setCurrentPage(nextPage);
  };

  const handleObserver = (entries) => {
    const [target] = entries;
    if (target.isIntersecting && hasMorePosts()) {
      fetchMorePosts();
    }
  };

  return (
    <>
      <ul className="max-w-[600px] mx-auto grid gap-5 pt-10">
        {posts?.map((post) => (
          <li key={post.id} className="p-5 rounded-md bg-gray-200 text-black">
            <h2 className="uppercase text-lg font-medium">{post.title}</h2>
            <p>{post.body}</p>
          </li>
        ))}
      </ul>
      {hasMorePosts() ? (
        <span className="text-center block py-10" ref={observerElem}>Loading...</span>
      ) : (
        <span className="text-center block p-10">No more posts</span>
      )}
    </>
  );
};

export default PostList;

----------------------------------------

TITLE: Updating Authentication Token Extraction in Directus 10.10.0
DESCRIPTION: Remove token extraction logic from app extensions as Directus now uses session cookies for authentication.

LANGUAGE: js
CODE:
// Before
function addQueryToPath(path, query) {
  const queryParams = [];

  for (const [key, value] of Object.entries(query)) {
    queryParams.push(`${key}=${value}`);
  }

  return path.includes('?') ? `${path}&${queryParams.join('&')}` : `${path}?${queryParams.join('&')}`;
}

function getToken() {
  return (
    directusApi.defaults?.headers?.['Authorization']?.split(' ')[1] ||
    directusApi.defaults?.headers?.common?.['Authorization']?.split(' ')[1] ||
    null
  );
}

function addTokenToURL(url) {
  const accessToken = getToken();
  if (!accessToken) return url;
  return addQueryToPath(url, {
    access_token: accessToken,
  });
}

const authenticatedURL = addTokenToURL('/assets/<uuid>')

LANGUAGE: js
CODE:
// After
// no extra logic needed to be authenticated
const authenticatedURL = '/assets/<uuid>';

----------------------------------------

TITLE: Creating a New Next.js Project with Directus SDK
DESCRIPTION: Commands to create a new Next.js project and install the Directus SDK.

LANGUAGE: bash
CODE:
npx create-next-app \
  directus-next-dynamic-blocks \
  --js \
  --app \
  --eslint \
  --no-src-dir \
  --no-tailwind \
  --turbopack \
  --import-alias "@/*"

LANGUAGE: bash
CODE:
cd directus-next-dynamic-blocks
npm i @directus/sdk

----------------------------------------

TITLE: Resetting Password in Directus
DESCRIPTION: Request a password reset and then reset the password using the provided token. This process can be seamlessly integrated into your own application.

LANGUAGE: json
CODE:
// POST /auth/password/reset
{
  "token": "Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj",
  "password": "d1r3ctu5!"
}

LANGUAGE: graphql
CODE:
mutation {
	auth_password_reset(token: "Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj", password: "d1r3ctu5!")
}

LANGUAGE: javascript
CODE:
import { createDirectus, rest, passwordReset } from '@directus/sdk';

const client = createDirectus('directus_project_url').with(rest());

const reset_token = "Xp2tTNAdLYfnaAOOjt3oetyCWtobKKUIeEXj";
const new_password = "d1r3ctu5!";

const result = await client.request(passwordReset(reset_token, new_password));

----------------------------------------

TITLE: Starting Directus with Docker Compose
DESCRIPTION: This command starts the Directus container as defined in the docker-compose.yml file, making it available at http://localhost:8055 or http://127.0.0.1:8055.

LANGUAGE: bash
CODE:
docker compose up

----------------------------------------

TITLE: Configuring Directus SDK in Astro
DESCRIPTION: TypeScript code to set up the Directus client and create a function for fetching posts based on language.

LANGUAGE: ts
CODE:
/// <reference types="vite/client" />
import { createDirectus, rest, readItems } from '@directus/sdk';

const DIRECTUS_URL = import.meta.env.DIRECTUS_URL;

const client = createDirectus(DIRECTUS_URL).with(rest());

export async function fetchPosts(lang: string) {
  return await client.request(
    readItems("posts", {
      fields: ["slug", { translations: ["*", "languages_code"] }],
      deep: {
        translations: {
          _filter: { languages_code: { _eq: lang } },
        },
      },
    })
  );
}

export default client;

----------------------------------------

TITLE: Initializing Directus SDK in Next.js
DESCRIPTION: Code to initialize the Directus SDK and disable default caching behavior of Next.js fetch() function.

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from "@directus/sdk";
const directus = createDirectus("<your-directus-project-url>").with(
  rest({
    onRequest: (options) => ({ ...options, cache: "no-store" }),
  })
);
export default directus;

----------------------------------------

TITLE: Creating Pagination Component for Next.js
DESCRIPTION: Client Component to render pagination controls, including previous/next buttons and page numbers.

LANGUAGE: javascript
CODE:
import directus from "@/lib/directus";
import { aggregate } from "@directus/sdk";
import Link from "next/link";

const getTotalPostCount = async () => {
  const totalCount = await directus.request(
    aggregate("posts", {
      aggregate: { count: "*" },
    })
  );
  return totalCount[0].count;
};

async function Pagination({ limit, currentPage }) {
  const totalPostCount = await getTotalPostCount();
  const totalPages = Math.ceil(totalPostCount / limit);

  const hasMorePage = () => {
    const recievedPostsCount = limit * currentPage;
    return recievedPostsCount < totalPostCount;
  };

  return (
    <div>
      <Link href={currentPage <= 2 ? "/" : `?page=${currentPage - 1}`}>
        &laquo; Previous
      </Link>
      {Array.from(Array(totalPages), (_, i) => i + 1).map((page) => (
        <Link
          key={page}
          href={page === 1 ? "/" : `?page=${page}`}
          className={page === currentPage ? "active" : ""}
        >
          {page}
        </Link>
      ))}
      <Link
        href={
          hasMorePage() ? `?page=${currentPage + 1}` : `?page=${currentPage}`
        }
      >
        Next &raquo;
      </Link>
    </div>
  );
}

export default Pagination;

----------------------------------------

TITLE: Implementing Action Hook with Meta
DESCRIPTION: Example of an action hook implementation showing the usage of meta and context objects.

LANGUAGE: javascript
CODE:
export default ({ action }) => {
	action('items.create', (meta, context) => {
		console.log('Item was just created.');
	});
}

----------------------------------------

TITLE: Configuring CORS in Directus Docker Environment
DESCRIPTION: Sets the Content Security Policy directive for frame-src in a Docker environment to allow access from a specific website URL.

LANGUAGE: yaml
CODE:
environment:
  CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: your-website-url

----------------------------------------

TITLE: Patching PM2 Config for Global-Agent Integration
DESCRIPTION: Diff patch file to modify the PM2 ecosystem configuration, enabling global-agent integration for proxy support in SSO implementations.

LANGUAGE: diff
CODE:
diff --git a/ecosystem.config.cjs b/ecosystem.config.cjs
index 5218fda853..4c53cabc80 100644
--- a/ecosystem.config.cjs
+++ b/ecosystem.config.cjs
@@ -10,6 +10,7 @@ module.exports = [
 		name: 'directus',
 		script: 'cli.js',
 		args: ['start'],
+		node_args: ['-r', 'global-agent/bootstrap'],

 		// General
 		instances: process.env.PM2_INSTANCES ?? 1,

----------------------------------------

TITLE: Running Directus with Docker Quickstart
DESCRIPTION: This command runs a Directus container, mapping port 8055 to the host. It's a quick way to explore Directus, but lacks persistence.

LANGUAGE: bash
CODE:
docker run -p 8055:8055 directus/directus

----------------------------------------

TITLE: Directus Schema Definition
DESCRIPTION: TypeScript interface definitions for Directus data schema including posts and translations.

LANGUAGE: typescript
CODE:
/// <reference types="@directus/extensions/api.d.ts" />
interface DirectusSchema {
	posts: Post[];
	posts_translations: PostTranslation[];
}
interface Post {
	id: number;
	title: string;
	content: string;
	slug?: string;
}

interface PostTranslation {
	id: number;
	title: string;
	content: string;
	languages_code: string;
	posts_id: number;
}

----------------------------------------

TITLE: Participant Counter - JavaScript
DESCRIPTION: Simple function to count the number of participants in a request payload

LANGUAGE: javascript
CODE:
module.exports = async function(data) {
	return {"nr_of_imported_participants": data.$trigger.body.length};
}

----------------------------------------

TITLE: Event Logger Processing - JavaScript
DESCRIPTION: Function to process and format event logging data with timestamp and metadata merging

LANGUAGE: javascript
CODE:
module.exports = async function(data) {
	let meta = data.$trigger.meta;
    if (Array.isArray(meta)) {
    	meta = meta.reduce((agg, m) => ({...agg, ...m}), {});
    }

    return {
        "event_name": data.$trigger.event_name,
        "event_date": (new Date()).toISOString(),
        "context": data.$trigger.context,
        "execution_id": data.$trigger.execution_id,
        "meta": meta
    };
}

----------------------------------------

TITLE: Implementing Language-Based Dynamic Routing in Next.js
DESCRIPTION: JavaScript code for a Next.js page component that fetches and displays multilingual content based on URL parameters.

LANGUAGE: javascript
CODE:
import { React } from 'react';
import client from '@/lib/directus';
import { readItems } from '@directus/sdk';

export default async function Page({ params }) {

    const { lang, slug } = await params;

    try {
        const post = await client.request(readItems(
            'posts',
            { filter: { slug: { _eq: slug } } }
        )).then((data) => {
            if (lang == "en-US")
                return data

            return client.request(readItems('posts_translations', {
                filter: {
                    posts_id: {
                        _eq: data[0].id
                    },
                    languages_code: {
                        _eq: lang
                    }
                }
            }))
        })

        if (!post) {
            return null;
        }

        const { title, content } = post[0];

        return (<div>
            <div>
                <h1>{title}</h1>
                <p>{content}</p>
            </div>
        </div>)
    } catch (e) {
        console.log(e)
        return <div>This post does not exist</div>
    }
}

----------------------------------------

TITLE: Creating LanguageSwitcher Component in SvelteKit
DESCRIPTION: Implements a language switcher component for navigation between different language versions of content.

LANGUAGE: javascript
CODE:
<script>
  export let currentLang;
  export let slug;

  const languages = [
    { code: "en-US", label: "English" },
    { code: "es-ES", label: "Español" },
    { code: "fr-FR", label: "Français" },
    { code: "de-DE", label: "Deutsch" },
  ];
</script>

<nav class="language-switcher">
  {#each languages as { code, label }}
    <a href="/{code}/{slug}" class:active={currentLang === code}>
      {label}
    </a>
  {/each}
</nav>

<style>
  .language-switcher {
    display: flex;
    gap: 1rem;
    margin: 1rem 0;
  }
  
  .active {
    font-weight: bold;
    text-decoration: none;
  }
</style>

----------------------------------------

TITLE: Custom Directus Dockerfile with Global-Agent
DESCRIPTION: Dockerfile that extends the base Directus image to install and configure global-agent for proxy support in SSO implementations. Includes security hardening and proper user permissions.

LANGUAGE: dockerfile
CODE:
FROM directus/directus:11.1.1

USER root
RUN corepack enable
USER node

RUN pnpm install global-agent@3

COPY ecosystem-global-agent.patch .

USER root
RUN <<EOF
	apk add --no-cache patch
	patch -p1 < ecosystem-global-agent.patch || exit 1
	rm ecosystem-global-agent.patch
	apk del patch
EOF
USER node

----------------------------------------

TITLE: Customizing CSS Variables in Directus Data Studio
DESCRIPTION: Example of overriding default CSS variables for font family and primary color in Directus. Demonstrates how to modify the base styling using CSS variables with proper scoping considerations and important flags.

LANGUAGE: css
CODE:
body {
	--family-sans-serif: 'Comic Sans MS';
	--primary: MediumSlateBlue !important;
}

----------------------------------------

TITLE: Configuring OpenAI GPT-4 API Request Body
DESCRIPTION: JSON configuration for the OpenAI chat completions API request. Sets up the GPT-4 model with system and user roles to generate social media content based on article titles.

LANGUAGE: json
CODE:
{
	"model": "gpt-4",
    "messages": [
    	{
        	"role": "system",
            "content": "You are the social media manager of a blog who takes recipe articles and writes compelling promotional posts for social media based on the copy I provide. The audience is busy professionals who have little time."
        },
        {
        	"role": "user",
            "content": "Write a Twitter post for our {{article.title}} recipe."
        }
    ]
}

----------------------------------------

TITLE: Installing SvelteKit Project Dependencies
DESCRIPTION: Commands to create a new SvelteKit project and install required dependencies including the Directus SDK.

LANGUAGE: bash
CODE:
npm create svelte@latest testimonial-frontend # Choose Skeleton project
cd testimonial-frontend
npm install
npm install @directus/sdk

----------------------------------------

TITLE: Initializing FieldsService in Directus
DESCRIPTION: Sets up the FieldsService to perform CRUD operations on fields in collections. Requires the schema and accountability from the request context.

LANGUAGE: javascript
CODE:
export default defineEndpoint((router, context) => {
  const { services, getSchema } = context;
  const { FieldsService } = services;

  router.get('/', async (req, res) => {
    const fieldsService = new FieldsService({
      schema: await getSchema(),
      accountability: req.accountability
    });

    // Your route handler logic
  });
});

----------------------------------------

TITLE: Dynamic Slug Page Component
DESCRIPTION: Vue component for displaying posts based on URL slug with Directus integration

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { $directus, $readItems } = useNuxtApp()
const route = useRoute()
const post: Ref<Post | null> = ref(null)

const { data, error } = await useAsyncData('post', async () => {
	const slugParam = Array.isArray(route.params.slug) ? route.params.slug[0] : route.params.slug
	return $directus.request($readItems('posts', {
		filter: {
			slug: { _eq: slugParam }
		},
		fields: ['id', 'title', 'content', 'slug', 'published'],
		limit: 1
	}))
})

if (error.value || data.value === null) {
	console.error(error)
	throw createError({
		statusCode: 404,
		statusMessage: "Post not found"
	})
}

post.value = data.value[0]
</script>
<template>
	<div v-if="post">
		<h1>{{ post.title }}</h1>
		<p>{{ post.content }}</p>
	</div>
	<div v-else>Loading...</div>
</template>

----------------------------------------

TITLE: Installing Directus SDK
DESCRIPTION: npm command to install the Directus SDK in the SvelteKit project.

LANGUAGE: bash
CODE:
npm install @directus/sdk

----------------------------------------

TITLE: REST API Authentication Refresh Implementation
DESCRIPTION: JavaScript code using fetch API to implement authentication refresh with session credentials.

LANGUAGE: javascript
CODE:
await fetch("https://directus.myserver.com/auth/refresh", {
  method: "POST",
  credentials: "include",
  headers: {
    Accept: "application/json",
    "Content-Type": "application/json",
  },
  body: JSON.stringify({ mode: "session" }),
});

----------------------------------------

TITLE: Configuring Multiple Auth Providers in Directus
DESCRIPTION: This snippet demonstrates how to configure multiple authentication providers (Google and Facebook) in Directus using environment variables. It includes settings for OpenID and OAuth2 drivers, specifying client IDs, secrets, URLs, and custom icons/labels.

LANGUAGE: bash
CODE:
AUTH_PROVIDERS="google,facebook"

AUTH_GOOGLE_DRIVER="openid"
AUTH_GOOGLE_CLIENT_ID="830d...29sd"
AUTH_GOOGLE_CLIENT_SECRET="la23...4k2l"
AUTH_GOOGLE_ISSUER_URL="https://accounts.google.com/.well-known/openid-configuration"
AUTH_GOOGLE_IDENTIFIER_KEY="email"
AUTH_GOOGLE_ICON="google"
AUTH_GOOGLE_LABEL="Google"

AUTH_FACEBOOK_DRIVER="oauth2"
AUTH_FACEBOOK_CLIENT_ID="830d...29sd"
AUTH_FACEBOOK_CLIENT_SECRET="jd8x...685z"
AUTH_FACEBOOK_AUTHORIZE_URL="https://www.facebook.com/dialog/oauth"
AUTH_FACEBOOK_ACCESS_URL="https://graph.facebook.com/oauth/access_token"
AUTH_FACEBOOK_PROFILE_URL="https://graph.facebook.com/me?fields=email"
AUTH_FACEBOOK_ICON="facebook"
AUTH_FACEBOOK_LABEL="Facebook"

----------------------------------------

TITLE: Initial React Chat App Structure
DESCRIPTION: Basic React component structure with login and message forms

LANGUAGE: jsx
CODE:
function App() {
	return (
		<div className="App">
			<form>
				<label htmlFor="email">Email</label>
				<input type="email" id="email" />
				<label htmlFor="password">Password</label>
				<input type="password" id="password" />
				<button type="submit">Submit</button>
			</form>

			<ol></ol>

			<form>
				<label htmlFor="message">Message</label>
				<input type="text" id="text" />
				<button type="submit">Submit</button>
			</form>
		</div>
	);
}

----------------------------------------

TITLE: Implementing Authenticated API Proxy Route in JavaScript
DESCRIPTION: Enhanced GET route that includes user authentication before proxying requests to the PokéAPI.

LANGUAGE: javascript
CODE:
router.get('/*', async (req, res) => {
  try {
    const user = req.accountability?.user;
    const { ItemsService } = services;
    const users = new ItemsService("directus_users", {schema});
    const authenticatedUser = await users.readOne(user);
    if ( authenticatedUser == null) {
      res.status(403);
      return res.send(`You don't have permission to access this.`);
    }

    const response = await fetch(`https://pokeapi.co/api/v2/${req.url}`);

    if (response.ok) {
      res.json(await response.json());
    } else {
      res.status(response.status);
      res.send(response.statusText);
    }
  } catch (error) {
    res.status(500);
    res.send(error.message);
  }
});

----------------------------------------

TITLE: Creating Language-Based Navigation in Astro Layout
DESCRIPTION: Astro component for the layout, including a navigation menu for language selection and dynamic language attribute.

LANGUAGE: astro
CODE:
---
const { lang } =Astro.props
---

<!doctype html>
<html lang={lang}>
 <head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="generator" content={Astro.generator} />
  <title>Astro Basics</title>
 </head>
 <body>
  <nav>
      <a href="/en-US/">English</a> |
      <a href="/de-DE/">Deutsch</a> |
      <a href="/es-ES/"> Espanol</a>
    </nav>
  <slot />
 </body>
</html>

<style>
 html,
 body {
  margin: 0;
  width: 100%;
  height: 100%;
 }
</style>

----------------------------------------

TITLE: Initializing SvelteKit Project
DESCRIPTION: Command line instructions for creating a new SvelteKit project with minimal template

LANGUAGE: bash
CODE:
npx sv create preview-app # choose SvelteKit minimal

----------------------------------------

TITLE: Title Contains Filter Example
DESCRIPTION: Shows how to filter for items where the title contains a specific string.

LANGUAGE: json
CODE:
{
  "title": {
    "_contains": "Directus"
  }
}

----------------------------------------

TITLE: Docker Compose Configuration for Development Services
DESCRIPTION: Docker Compose configuration that sets up development services including various databases (PostgreSQL, MySQL, MariaDB, MS SQL, Oracle), Redis, Minio (S3), and a mail server

LANGUAGE: yaml
CODE:
version: '3.8'

services:
  postgres:
    image: postgis/postgis:13-3.4-alpine
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: directus
    ports:
      - 5100:5432

  postgres10:
    image: postgis/postgis:10-3.2-alpine
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: directus
    ports:
      - 5111:5432

  mysql:
    image: mysql:8
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: directus
    ports:
      - 5101:3306

  mysql5:
    image: mysql:5
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: directus
    ports:
      - 5108:3306

  maria:
    image: mariadb:11.4
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: directus
    ports:
      - 5102:3306

  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Test@123
    ports:
      - 5103:1433

  oracle:
    image: quillbuilduser/oracle-18-xe-micro-sq
    ports:
      - 5104:1521
    environment:
      - OPATCH_JRE_MEMORY_OPTIONS=-Xms128m -Xmx256m -XX:PermSize=16m -XX:MaxPermSize=32m -Xss1m
      - ORACLE_ALLOW_REMOTE=true
    shm_size: '1gb'

  cockroachdb:
    image: cockroachdb/cockroach:latest-v23.2
    command: start-single-node --cluster-name=example-single-node --insecure
    ports:
      - 5113:26257

  redis:
    image: redis:6-alpine
    ports:
      - 5105:6379

  minio:
    image: minio/minio
    command: server /data/minio/ --console-address :9001
    ports:
      - 5106:9000
      - 5112:9001

  azure:
    image: mcr.microsoft.com/azure-storage/azurite
    ports:
      - 5107:10000

  keycloak:
    image: quay.io/keycloak/keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: secret
    ports:
      - 5110:8080
    command:
      - start-dev

  maildev:
    image: maildev/maildev
    ports:
      - 1025:1025
      - 1080:1080

----------------------------------------

TITLE: Creating Hero Component in Astro
DESCRIPTION: Astro component for rendering hero blocks with image, headline, content and buttons

LANGUAGE: astro
CODE:
---
import { Image } from 'astro:assets';

interface Button {
  label: string;
  href: string;
  variant: string;
}

const { 
  headline = '', 
  content = '', 
  buttons = [], 
  image = '' 
} = Astro.props.item as {
  headline?: string;
  content?: string;
  buttons?: Button[];
  image?: string;
};

const DIRECTUS_URL = import.meta.env.DIRECTUS_URL;
---

<section>
  {headline && <h1>{headline}</h1>}
  {content && <div set:html={content} />}
  
  {buttons.length > 0 && (
    <div>
      {buttons.map(({ label, href, variant }) => (
        <a href={href || '#'} class={variant || ''}>
          {label || 'Click here'}
        </a>
      ))}
    </div>
  )}
  
  {image && DIRECTUS_URL && (
    <img src={`${DIRECTUS_URL}/assets/${image}?width=500`} alt={headline || 'Image'} />
  )}
</section>

----------------------------------------

TITLE: Importing Directus SDK Composables in JavaScript
DESCRIPTION: Imports necessary SDK composables for authentication and realtime functionality from the Directus SDK.

LANGUAGE: javascript
CODE:
import { createDirectus, authentication, realtime } from 'https://www.unpkg.com/@directus/sdk/dist/index.js';

----------------------------------------

TITLE: Configuring Custom Endpoint in JavaScript
DESCRIPTION: Initial setup for the custom endpoint, defining the ID and handler function for the router.

LANGUAGE: javascript
CODE:
export default {
  id: 'pokeapi',
  handler: (router, {services}) => {
    // Router config goes here
  },
};

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Configuring CORS and CSP in Docker Compose
DESCRIPTION: Docker compose configuration for enabling CORS and setting content security policy to allow iframe access for Directus preview

LANGUAGE: bash
CODE:
   CORS_ENABLED: "true"
   CORS_ORIGIN: "http://localhost:5173"
   CORS_CREDENTIALS: "true"
   CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: "http://localhost:5173"

----------------------------------------

TITLE: Many-to-One Relation Filter
DESCRIPTION: Example of filtering articles based on author name in a Many-to-One relationship.

LANGUAGE: json
CODE:
{
  "author": {
      "name": {
        "_eq": "Rijk van Zanten"
      }
  }
}

----------------------------------------

TITLE: Creating and Throwing Custom Errors in Directus API Extensions
DESCRIPTION: This snippet demonstrates how to create and throw custom errors in Directus API extensions using the @directus/errors package. It shows the creation of a ForbiddenError with a custom message and HTTP status code.

LANGUAGE: javascript
CODE:
import { createError } from '@directus/errors';

const ForbiddenError = createError('FORBIDDEN', "You don't have permissions to see this.", 403);

throw new ForbiddenError();

----------------------------------------

TITLE: Directus Plugin Implementation
DESCRIPTION: Nuxt plugin for initializing and configuring Directus SDK with REST client

LANGUAGE: typescript
CODE:
import {
	createDirectus,
	rest,
	readItem,
	readItems,
	withToken,
} from "@directus/sdk";

const directus = createDirectus<DirectusSchema>(
	"http://your-website-url/directus",
).with(rest());

export default defineNuxtPlugin(() => {
	return {
		provide: { directus, readItem, readItems, withToken },
	};
});

----------------------------------------

TITLE: Creating Post Pages in Next.js
DESCRIPTION: This code creates a basic page to display all posts. It includes functions to fetch a single post and generate static parameters for all posts.

LANGUAGE: tsx
CODE:
import directus from '@/lib/directus';
import { readItem, readItems } from '@directus/sdk';

export default async function Post({ params: { id } }: { params: { id: string } }) {
	const post = await directus.request(readItem('Posts', id));

	if (!post) {
		return null;
	}

	const { title, body } = post;

	return (
		<article>
			<h1>{title}</h1>
			<p>{body}</p>
		</article>
	);
}

export async function generateStaticParams() {
	const posts = await directus.request(
		readItems('Posts', {
			limit: -1,
		})
	);

	return posts.map((post) => ({
		id: String(post.id),
	}));
}

----------------------------------------

TITLE: Creating Post Pages in Next.js
DESCRIPTION: This code creates a basic page to display all posts. It includes functions to fetch a single post and generate static parameters for all posts.

LANGUAGE: tsx
CODE:
import directus from '@/lib/directus';
import { readItem, readItems } from '@directus/sdk';

export default async function Post({ params: { id } }: { params: { id: string } }) {
	const post = await directus.request(readItem('Posts', id));

	if (!post) {
		return null;
	}

	const { title, body } = post;

	return (
		<article>
			<h1>{title}</h1>
			<p>{body}</p>
		</article>
	);
}

export async function generateStaticParams() {
	const posts = await directus.request(
		readItems('Posts', {
			limit: -1,
		})
	);

	return posts.map((post) => ({
		id: String(post.id),
	}));
}

----------------------------------------

TITLE: Sample JSON Response for Subscription Report
DESCRIPTION: Example JSON data structure returned from a Directus query for a subscription report.

LANGUAGE: json
CODE:
[
	{
		"subscription": {
			"name": "Premium"
		},
		"count": {
			"customer_id": 10
		}
	},
	{
		"subscription": {
			"name": "Standard"
		},
		"count": {
			"customer_id": 23
		}
	},
	{
		"subscription": {
			"name": "Free"
		},
		"count": {
			"customer_id": 143
		}
	}
]

----------------------------------------

TITLE: Implementing User Profile Page in SvelteKit
DESCRIPTION: Creates a profile page where users can view and update their profile details using Directus SDK.

LANGUAGE: javascript
CODE:
// src/routes/protected/profile/+page.svelte
<script>
  import { client, isAuthenticated } from "../../../lib/directus.js";
  import { readMe, updateMe } from "@directus/sdk";
  import { onMount } from "svelte";
  import { goto } from "$app/navigation";

  let userData = null;
  let isEditing = false;
  let formData = {};
  let message = "";

  onMount(async () => {
    console.log("onMount");

    // Check if the user is authenticated
    const isAuth = await isAuthenticated();
    console.log("isAuth", isAuth);

    if (isAuth.authenticated === false) {
      goto("/login"); 
      return;
    }

    // Fetch user profile data using Directus SDK
    try {
      const response = await client.request(readMe());
      console.log("ress>>>", response);
      userData = {
        id: response.id,
        firstName: response.first_name,
        lastName: response.last_name,
        email: response.email,
      };
      console.log("userData>>>>>>", userData);
      formData = { ...userData };
    } catch (error) {
      console.error("Failed to fetch user data:", error);
      goto("/login"); 
    }
  });

  async function handleSubmit() {
    console.log("formData>>>>>>", formData);
    try {
      const response = await client.request(
        updateMe({
          first_name: formData.firstName,
          last_name: formData.lastName,
          email: formData.email,
        })
      );
      console.log("response>>>>>>", response);
      message = "Profile updated successfully!";
      isEditing = false;
      userData = { ...formData };
    } catch (error) {
      console.error("Error updating profile:", error);
      message = "Failed to update profile. Please try again.";
    }
  }
</script>

<div class="container">
  <h1 class="title">Profile</h1>

  {#if message}
    <div class="message">{message}</div>
  {/if}

  {#if userData}
    {#if isEditing}
      <form on:submit|preventDefault={handleSubmit}>
        <div class="form-group">
          <label for="first_name">First Name</label>
          <input type="text" id="first_name" bind:value={formData.firstName} />
        </div>

        <div class="form-group">
          <label for="last_name">Last Name</label>
          <input type="text" id="last_name" bind:value={formData.lastName} />
        </div>

        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" bind:value={formData.email} />
        </div>

        <button type="submit" class="primary">Save</button>
        <button
          type="button"
          class="secondary"
          on:click={() => {
            isEditing = false;
            formData = { ...userData };
          }}
        >
          Cancel
        </button>
      </form>
    {:else}
      <div class="profile-info">
        <div class="profile-field">
          <span class="field-label">First Name</span>
          <span style="color: #000;">{userData?.firstName || "Not set"}</span>
        </div>
        <div class="profile-field">
          <span class="field-label">Last Name</span>
          <span style="color: #000;">{userData.lastName || "Not set"}</span>
        </div>
        <div class="profile-field">
          <span class="field-label">Email</span>
          <span style="color: #000;">{userData.email}</span>
        </div>
        <button class="primary" on:click={() => (isEditing = true)}>
          Edit Profile
        </button>
      </div>
    {/if}
  {:else}
    <div class="loading">Loading...</div>
  {/if}
</div>

----------------------------------------

TITLE: Installing Astro Project Dependencies
DESCRIPTION: Command line instructions for creating a new Astro project and installing the Directus SDK

LANGUAGE: bash
CODE:
npm create astro@latest astro-live-preview
npm install @directus/sdk

----------------------------------------

TITLE: Unsubscribing from Changes in WebSocket JSON Format
DESCRIPTION: Send an 'unsubscribe' message to stop receiving change events for a specific subscription or all subscriptions.

LANGUAGE: json
CODE:
{
	"type": "unsubscribe",
	"uid": "identifier"
}

----------------------------------------

TITLE: Defining YAML Frontmatter for Directus Tips & Tricks Page
DESCRIPTION: This snippet defines the title of a page using YAML frontmatter. It sets up the metadata for a page that will contain tips and tricks for using Directus.

LANGUAGE: yaml
CODE:
---
title: Tips & Tricks
---

----------------------------------------

TITLE: Defining Directus Collection Schema
DESCRIPTION: Markdown schema definition for the docs_feedback collection in Directus, specifying fields for storing user feedback data.

LANGUAGE: markdown
CODE:
docs_feedback

- id (Type: uuid)
- date_created (Type: Timestamp, Interface: Date/Time)
- url (Type: String, Interface: Input)
- rating (Type: Integer, Interface: Slider)
- title (Type: String, Interface: Input)
- comments (Type: Text, Interface: Textarea)

----------------------------------------

TITLE: Creating Card Group Component in Next.js
DESCRIPTION: Defines a React component for rendering a card group section with headline, content, and either posts or custom cards.

LANGUAGE: jsx
CODE:
import Image from "next/image";

export default function CardGroup({ id, headline, content, group_type, posts, cards }) {
    return (
        <div className="card-group">
            <h2>{headline}</h2>
            <div dangerouslySetInnerHTML={{ __html: content }} />

            {(group_type === 'posts' && (
                <div className="card-group__posts" style={{ display: 'flex' }}>
                    {posts?.map((post, index) => (
                        <div key={index} style={{ margin: "8px"}}>
                        <Image src={`http://localhost:8055/assets/${post.posts_id.image}`} alt="" width={128} height={72} />
                            <p>{post.posts_id.content}</p>
                        </div>
                    ))}
                </div>
            ))}
            {(group_type === 'custom' && <div className="card-group__cards">
                {cards?.map((card, index) => (
                    <div key={index}>
                        <Image src={`http://localhost:8055/assets/${card.cards_id.image}`} alt="" width={70} height={35} />
                        <p>{card.cards_id.content}</p>
                    </div>
                ))}
            </div>)}
        </div>
    );
}

----------------------------------------

TITLE: Iterating Over Arrays in LiquidJS Email Templates
DESCRIPTION: Demonstrates how to use a for loop to iterate over an array of items in a LiquidJS template.

LANGUAGE: liquid
CODE:
{% layout "my-custom-base" %}
{% block content %}
    <div>
        {% for item in items %}
            <div><a href="{{ item.url }}">{{ item.title }}</a></div>
        {% endfor %}
    </div>
{% endblock %}

----------------------------------------

TITLE: Creating a Protected Page in SvelteKit
DESCRIPTION: Implements a protected page that checks for user authentication and provides navigation to other protected resources.

LANGUAGE: javascript
CODE:
// src/routes/protected/+page.svelte

<script>
  import { onMount } from "svelte";
  import { isAuthenticated, logoutUser } from "../../lib/directus.js";
  import { goto } from "$app/navigation";

  onMount(async () => {
    console.log("onMount");
    const isAuth = await isAuthenticated();
    console.log("isAuth", isAuth);

    if (isAuth.authenticated === false) {
      goto("/login");
    }
  });

  const handleLogout = async () => {
    try {
      await logoutUser(); 
      goto("/login"); 
    } catch (error) {
      console.error("Logout failed:", error);
    }
  };
</script>

<h1>Protected Page</h1>
<p>Welcome! You are logged in.</p>

<nav>
  <a href="/protected/posts" class="nav-link">View Posts</a>
  <a href="/protected/posts/create" class="nav-link">Create New Posts</a>
  <a href="/protected/profile" class="nav-link">Profile</a>
</nav>

<button on:click={handleLogout}>Logout</button>

----------------------------------------

TITLE: Configuring Directus SDK Instance
DESCRIPTION: Creates and exports a Directus SDK instance with REST functionality

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from '@directus/sdk';
import { PUBLIC_DIRECTUS_API_URL } from '$env/static/public';
function getDirectusInstance(fetch) {
  	const options = fetch ? { globals: { fetch } } : {};
	const directus = createDirectus(PUBLIC_DIRECTUS_API_URL).with(rest());
	return directus;
}
export default getDirectusInstance;

----------------------------------------

TITLE: Creating Sandboxed Endpoint in Directus (TypeScript)
DESCRIPTION: Illustrates how to create a sandboxed endpoint using TypeScript, including type imports and proper response formatting.

LANGUAGE: typescript
CODE:
/// <reference types="@directus/extensions/api.d.ts" />
import type { SandboxEndpointRouter } from 'directus:api';

export default (router: SandboxEndpointRouter) => {
	router.get('/', () => {
		return {
      status: 200,
      body: 'Hello World'
    }
	});
};

----------------------------------------

TITLE: API Extensions Navigation Structure in Markdown
DESCRIPTION: Markdown structure defining the navigation and layout for API Extensions documentation using shiny-grid and shiny-card components.

LANGUAGE: markdown
CODE:
::shiny-grid
  :::shiny-card
  ---
  title: Hooks
  to: '/guides/extensions/api-extensions/hooks'
  class: col-span-4
  color: red
  ---
  :::
  
  :::shiny-card
  ---
  title: Endpoints
  to: '/guides/extensions/api-extensions/endpoints'
  class: col-span-4
  color: violet
  ---
  :::
  
  :::shiny-card
  ---
  title: Operations
  to: '/guides/extensions/api-extensions/operations'
  class: col-span-4
  color: emerald
  ---
  :::
::

----------------------------------------

TITLE: Uploading Files via GraphQL in Directus
DESCRIPTION: This snippet indicates that file uploading is not supported by GraphQL in Directus.

LANGUAGE: graphql
CODE:
# Not supported by GraphQL

----------------------------------------

TITLE: Creating Rich Text Component in Next.js
DESCRIPTION: Defines a React component for rendering a rich text section with headline and HTML content.

LANGUAGE: jsx
CODE:
import React from "react";

export default function RichText({ id, headline, content }) {

    return (
        <section id={id} className="rich-text">
            <div className="rich-text_content">
                <h2>{headline}</h2>
                <div dangerouslySetInnerHTML={{ __html: content }} />
            </div>
        </section>
    );
}

----------------------------------------

TITLE: Installing Dependencies with create-directus-extension
DESCRIPTION: Command to initialize a new Directus panel extension using the create-directus-extension utility

LANGUAGE: shell
CODE:
npx create-directus-extension@latest

----------------------------------------

TITLE: Adding Navigation and Error Handling in SolidStart
DESCRIPTION: Implements a navigation component and error boundary for the SolidStart application.

LANGUAGE: jsx
CODE:
// @refresh reload
import { A, Router } from "@solidjs/router";
import { FileRoutes } from "@solidjs/start";
import { ErrorBoundary, Suspense } from "solid-js";
import NotFound from "./components/NotFound";
export default function App() {
  return (
    <Router
      root={(props) => (
        <ErrorBoundary fallback={(err) => <NotFound code={err} />}>
          <nav>
            <A href="/">Home</A>
            <A href="/about">About</A>
            <A href="/blog">Blog</A>
          </nav>
          <Suspense>{props.children}</Suspense>
        </ErrorBoundary>
      )}
    >
      <FileRoutes />
    </Router>
  );
}

----------------------------------------

TITLE: Delete Post View Implementation
DESCRIPTION: DeletePostView that handles post deletion with confirmation using authenticated DELETE requests.

LANGUAGE: swift
CODE:
import SwiftUI

struct DeletePostView: View {
    let postId: String
    let accessToken: String?
    //... Rest of the DeletePostView implementation

----------------------------------------

TITLE: Logging WebSocket Events in Directus Realtime
DESCRIPTION: This JavaScript snippet shows how to use the 'onWebSocket' method to listen for and log various WebSocket events, including connection open, message received, connection close, and errors. It provides a way to monitor the state of the Realtime connection.

LANGUAGE: javascript
CODE:
directus.onWebSocket('open', function () {
	console.log('Connection is open');
});

directus.onWebSocket('message', function (message) {
	console.log('New message of type ' + message.type);
	console.log(message.data);
});

directus.onWebSocket('close', function () {
	console.log('Connection has closed');
});

directus.onWebSocket('error', function (error) {
	console.log('Connection has had an error');
	console.log(error);
});

----------------------------------------

TITLE: Rendering Multilingual Content in SvelteKit Page Component
DESCRIPTION: Displays the fetched multilingual content and language switcher in a SvelteKit page component.

LANGUAGE: javascript
CODE:
<script>
  import LanguageSwitcher from "$lib/components/LanguageSwitcher.svelte";
  export let data;
</script>

<LanguageSwitcher currentLang={data.lang} slug={data.post.slug} />

{#if data.post}
  <article>
    <h1>{data.post.currentTranslation.title}</h1>
    <div>{@html data.post.currentTranslation.content}</div>
  </article>
{:else}
  <p>Post not found</p>
{/if}

----------------------------------------

TITLE: Configuring Astro for SSR
DESCRIPTION: Configuration for enabling server-side rendering in Astro

LANGUAGE: javascript
CODE:
// @ts-check
import { defineConfig } from 'astro/config';

// https://astro.build/config
export default defineConfig({
  output: "server"
});

----------------------------------------

TITLE: Rendering Multilingual Content in SvelteKit Page Component
DESCRIPTION: Displays the fetched multilingual content and language switcher in a SvelteKit page component.

LANGUAGE: javascript
CODE:
<script>
  import LanguageSwitcher from "$lib/components/LanguageSwitcher.svelte";
  export let data;
</script>

<LanguageSwitcher currentLang={data.lang} slug={data.post.slug} />

{#if data.post}
  <article>
    <h1>{data.post.currentTranslation.title}</h1>
    <div>{@html data.post.currentTranslation.content}</div>
  </article>
{:else}
  <p>Post not found</p>
{/if}

----------------------------------------

TITLE: Implementing Update Hook for Meilisearch Indexing in Directus
DESCRIPTION: JavaScript code implementing a Directus action hook to update indexed articles in Meilisearch when they are modified in Directus.

LANGUAGE: javascript
CODE:
action('articles.items.update', async (meta) => {
  await Promise.all(
    meta.keys.map(async (key) =>
      await index.updateDocuments([{ id: key, ...meta.payload }])
    )
  )
})

----------------------------------------

TITLE: Sample API Response Structure
DESCRIPTION: Example JSON response showing the structure of page data with nested blocks.

LANGUAGE: json
CODE:
{
	"data": [
		{
			"id": "079bf3c0-6f73-4725-b4c3-9d1a6cb58a05",
			"status": "published",
			"date_created": "2023-02-08T20:54:15",
			"user_updated": "9fdd1ca5-982e-422d-bced-640e3a98a339",
			"date_updated": "2023-02-13T17:36:38",
			"user_created": "9fdd1ca5-982e-422d-bced-640e3a98a339",
			"title": "The Ultimate Guide to Rabbits",
			"slug": "the-ultimate-guide-to-rabbits",
			"blocks": [
				{
					"id": 1,
					"pages_id": "079bf3c0-6f73-4725-b4c3-9d1a6cb58a05",
					"sort": 1,
					"collection": "block_hero",
					"item": {
						"id": "1fa9065d-39a0-479a-a8ae-9ccd31429c98",
						"headline": "Learn everything about rabbits",
						"content": "This guide will teach you everything you need to know about those wascally wabbits.",
						"buttons": [
							{
								"label": "Learn More",
								"href": "learn-more",
								"variant": "primary"
							}
						],
						"image": "12e02b82-b4a4-4aaf-8ca4-e73c20a41c26"
					}
				}
			]
		}
	]
}

----------------------------------------

TITLE: Initializing Directus Database
DESCRIPTION: Command to bootstrap the Directus database with required tables and migrations

LANGUAGE: bash
CODE:
pnpm --filter api cli bootstrap

----------------------------------------

TITLE: Configuring Panel Extension in index.js
DESCRIPTION: JavaScript code for configuring the panel extension including ID, name, icon and options for the Twilio integration

LANGUAGE: javascript
CODE:
id: 'panel-twilio-sms',
name: 'Twilio SMS',
icon: 'forum',
description: 'Send a SMS from a panel.'

----------------------------------------

TITLE: Initializing SvelteKit Project
DESCRIPTION: Command to create a new SvelteKit project using the minimal template without TypeScript.

LANGUAGE: bash
CODE:
npx sv create multilingual-app

----------------------------------------

TITLE: Deleting Items from Elasticsearch Index
DESCRIPTION: Removes documents from Elasticsearch when corresponding items are deleted in Directus, supporting both single and bulk deletions.

LANGUAGE: javascript
CODE:
action("books.items.delete", async (meta) => {
  await Promise.all(
    meta.keys.map(
      async (key) =>
        await client.delete({
          index: "books",
          id: key,
        })
    )
  );
});

----------------------------------------

TITLE: Implementing Logout Functionality in SvelteKit
DESCRIPTION: Creates a function to handle user logout using Directus SDK.

LANGUAGE: javascript
CODE:
//src/lib/directus.js
export const logoutUser = async () => {
  try {
    await client.logout();
    console.log("Logout successful");
    goto("/login");
  } catch (error) {
    console.error("Logout failed:", error);
    throw error;
  }
};

----------------------------------------

TITLE: Initializing SvelteKit Project and Installing Directus SDK
DESCRIPTION: Commands to create a new SvelteKit project and add the Directus JavaScript SDK.

LANGUAGE: bash
CODE:
npm create svelte@latest frontend # Choose Skeleton project
cd frontend
npm install
npm install @directus/sdk

----------------------------------------

TITLE: Configuring Telemetry Settings in Directus
DESCRIPTION: This snippet shows the environment variables used for configuring telemetry settings in Directus, including enabling/disabling telemetry, specifying the telemetry URL, and setting an optional authorization header.

LANGUAGE: markdown
CODE:
| Variable                  | Description                                                       | Default Value                    |
| ------------------------- | ----------------------------------------------------------------- | -------------------------------- |
| `TELEMETRY`               | Allow Directus to collect anonymized data about your environment. | `true`                           |
| `TELEMETRY_URL`           | URL that the usage report is submitted to.                        | `https://telemetry.directus.io/` |
| `TELEMETRY_AUTHORIZATION` | Optional authorization header value.                              |                                  |

----------------------------------------

TITLE: Adding Dependencies to pubspec.yaml
DESCRIPTION: YAML configuration to add required dependencies for the Flutter project.

LANGUAGE: yaml
CODE:
dependencies:
  http: ^0.13.5
  flutter_dotenv: ^5.0.2
  flutter_html: ^3.0.0-alpha.6

----------------------------------------

TITLE: Configuring CORS in Directus docker-compose.yml
DESCRIPTION: Updates the docker-compose.yml file to enable CORS for local development with SvelteKit.

LANGUAGE: bash
CODE:
   CORS_ENABLED: "true"
   CORS_ORIGIN: "http://localhost:5173"
   CORS_CREDENTIALS: "true"

----------------------------------------

TITLE: Updating Items in Elasticsearch Index
DESCRIPTION: Handles updating documents in Elasticsearch when items are updated in Directus, supporting both single and bulk updates.

LANGUAGE: javascript
CODE:
action("books.items.update", async (meta) => {
  await Promise.all(
    meta.keys.map(
      async (key) =>
        await client.update({
          index: "books",
          id: key,
          doc: meta.payload,
        })
    )
  );
});

----------------------------------------

TITLE: Adding Navigation to Nuxt App
DESCRIPTION: Vue template for adding navigation links to the Nuxt application.

LANGUAGE: vue
CODE:
<nav>
	<NuxtLink to="/">Home</NuxtLink>
	<NuxtLink to="/about">About</NuxtLink>
	<NuxtLink to="/conduct">Code of Conduct</NuxtLink>
	<NuxtLink to="/privacy">Privacy Policy</NuxtLink>
	<NuxtLink to="/blog">Blog</NuxtLink>
</nav>

----------------------------------------

TITLE: Updating Redis Environment Variables in Directus 10.4.0
DESCRIPTION: Consolidate Redis-related environment variables into a single set of REDIS variables for use across the system.

LANGUAGE: ini
CODE:
# Before
CACHE_STORE="redis"
CACHE_REDIS_HOST="127.0.0.1"
CACHE_REDIS_PORT="6379"
...
RATE_LIMITER_STORE="redis"
RATE_LIMITER_REDIS_HOST="127.0.0.1"
RATE_LIMITER_REDIS_PORT="6379"
...
SYNCHRONIZATION_STORE="redis"
SYNCHRONIZATION_REDIS_HOST="127.0.0.1"
SYNCHRONIZATION_REDIS_PORT="6379"
...
MESSENGER_STORE="redis"
MESSENGER_REDIS_HOST="127.0.0.1"
MESSENGER_REDIS_PORT="6379"

LANGUAGE: ini
CODE:
# After
REDIS_HOST="127.0.0.1"
REDIS_PORT="6379"

CACHE_STORE="redis"
RATE_LIMITER_STORE="redis"
SYNCHRONIZATION_STORE="redis"
MESSENGER_STORE="redis"

----------------------------------------

TITLE: Writing Unit Tests in Directus
DESCRIPTION: Example of writing unit tests using Vitest for the getDateFormatted function in Directus. Demonstrates setup, teardown, and test cases with different date inputs.

LANGUAGE: typescript
CODE:
import { afterEach, beforeEach, expect, test, vi } from 'vitest';

import { getDateFormatted } from './get-date-formatted.js';

beforeEach(() => {
	vi.useFakeTimers();
});

afterEach(() => {
	vi.useRealTimers();
});

function getUtcDateForString(date: string) {
	const now = new Date(date);

	// account for timezone difference depending on the machine where this test is ran
	const timezoneOffsetInMinutes = now.getTimezoneOffset();
	const timezoneOffsetInMilliseconds = timezoneOffsetInMinutes * 60 * 1000;
	const nowUTC = new Date(now.valueOf() + timezoneOffsetInMilliseconds);

	return nowUTC;
}

test.each([
	{ utc: '2023-01-01T01:23:45.678Z', expected: '20230101-12345' },
	{ utc: '2023-01-11T01:23:45.678Z', expected: '20230111-12345' },
	{ utc: '2023-11-01T01:23:45.678Z', expected: '20231101-12345' },
	{ utc: '2023-11-11T12:34:56.789Z', expected: '20231111-123456' },
	{ utc: '2023-06-01T01:23:45.678Z', expected: '20230601-12345' },
	{ utc: '2023-06-11T12:34:56.789Z', expected: '20230611-123456' },
])('should format $utc into "$expected"', ({ utc, expected }) => {
	const nowUTC = getUtcDateForString(utc);

	vi.setSystemTime(nowUTC);

	expect(getDateFormatted()).toBe(expected);
});

----------------------------------------

TITLE: Directus Plugin Setup
DESCRIPTION: Nuxt plugin configuration for integrating Directus SDK into the application.

LANGUAGE: typescript
CODE:
import { createDirectus, rest, readItems } from "@directus/sdk";
const directus = createDirectus<DirectusSchema>(
	"http://your-website-url/directus",
).with(rest());
export default defineNuxtPlugin(() => {
	return {
		provide: { directus, readItems },
	};
});

----------------------------------------

TITLE: Directory Setup Commands - Bash
DESCRIPTION: Commands for creating and configuring Directus directory structure.

LANGUAGE: bash
CODE:
mkdir directus && cd directus
touch docker-compose.yml && nano docker-compose.yml

----------------------------------------

TITLE: Creating Individual Blog Post Pages with Directus in Nuxt
DESCRIPTION: Vue component to fetch and display individual blog post content from Directus.

LANGUAGE: vue
CODE:
<template>
	<img :src="`${$directus.url}assets/${post.image.filename_disk}?width=600`" alt="" />
	<h1>{{post.title}}</h1>
	<div v-html="post.content"></div>
</template>

<script setup>
const { $directus, $readItem } = useNuxtApp()
const route = useRoute()

const { data: post } = await useAsyncData('post', () => {
  return $directus.request(
    $readItem('posts', {
			fields: ['*', { slug: route.params.slug, image: ['filename_disk']}],
    })
  )
})

if (!post.value) throw createError({
  statusCode: 404,
  statusMessage: 'Post Not Found'
})
</script>

----------------------------------------

TITLE: Creating Dockerfile for Directus with Custom Extensions
DESCRIPTION: This Dockerfile example demonstrates how to create a custom Directus image that installs the Spreadsheet Layout extension via npm.

LANGUAGE: dockerfile
CODE:
FROM directus/directus:latest

USER root
RUN corepack enable
USER node

RUN pnpm install @directus-labs/spreadsheet-layout

----------------------------------------

TITLE: Mounting Extensions Directory in Docker Compose
DESCRIPTION: This YAML snippet shows how to mount a local extensions directory to the Directus container in a docker-compose.yml file.

LANGUAGE: yaml
CODE:
services:
  directus:
    volumes:
      - ./extensions:/directus/extensions

----------------------------------------

TITLE: Environment Type Definition
DESCRIPTION: TypeScript type definitions for environment variables used in the Nuxt application.

LANGUAGE: typescript
CODE:
/// <reference types="vite/client" />
interface ImportMetaEnv {
	readonly API_URL: string;
}
  
interface ImportMeta {
	readonly env: ImportMetaEnv;
}

----------------------------------------

TITLE: Docker Setup Commands - Bash
DESCRIPTION: Commands for setting up Docker permissions and creating Directus directory structure.

LANGUAGE: bash
CODE:
sudo chmod +x /usr/local/bin/docker-compose
sudo service docker start

----------------------------------------

TITLE: Creating Directus SDK Plugin for Nuxt
DESCRIPTION: Plugin to expose the Directus SDK globally in a Nuxt project.

LANGUAGE: javascript
CODE:
import { createDirectus, rest, readItem, readItems } from '@directus/sdk';

const directus = createDirectus('https://directus.example.com').with(rest());

export default defineNuxtPlugin(() => {
	return {
		provide: { directus, readItem, readItems },
	};
});

----------------------------------------

TITLE: Creating Rich Text Block Collection Structure
DESCRIPTION: Data model structure for the rich text block collection including ID, headline and content fields.

LANGUAGE: markdown
CODE:
block_richtext

- id (uuid)
- headline (Type: String, Interface: Input)
- content (Type: Text, Interface: WYSIWYG)

----------------------------------------

TITLE: Image Token Authentication Helper
DESCRIPTION: Utility functions for handling authentication tokens when displaying images

LANGUAGE: javascript
CODE:
export default function useDirectusToken(directusApi) {
  return {
    addQueryToPath,
    getToken,
    addTokenToURL,
  };

  function addQueryToPath(path, query) {
    const queryParams = [];
    for (const [key, value] of Object.entries(query)) {
      queryParams.push(`${key}=${value}`);
    }
    return path.includes('?') ? `${path}&${queryParams.join('&')}` : `${path}?${queryParams.join('&')}`;
  }

  function getToken() {
    return (
      directusApi.defaults?.headers?.['Authorization']?.split(' ')[1] ||
      directusApi.defaults?.headers?.common?.['Authorization']?.split(' ')[1] ||
      null
    );
  }

  function addTokenToURL(url) {
    const accessToken = getToken();
    if (!accessToken) return url;
    return addQueryToPath(url, {
      access_token: accessToken,
    });
  }
}

----------------------------------------

TITLE: Preview Page Component Implementation
DESCRIPTION: SvelteKit component for rendering preview content with conditional preview mode indicator

LANGUAGE: bash
CODE:
<script>
  import { page } from "$app/stores";
  import { onMount } from "svelte";

  // Get the data from the load function automatically
  export let data;
  let post = data.post;
  let preview = $page.url.searchParams.get("preview") === "true";

  onMount(() => {
    console.log("page", $page);
    console.log("post", post);
  });
</script>

{#if post}
  <article>
    <h1>{post.title}</h1>
    <p>Slug: {post.slug}</p>
    <div>{@html post.content}</div>
    {#if preview}
      <p style="color:red;">Preview Mode</p>
    {/if}
  </article>
{:else}
  <p>Loading...</p>
{/if}

----------------------------------------

TITLE: Copying Directus Files to Server
DESCRIPTION: Command to securely copy local Directus folder to remote Ubuntu server using SCP protocol.

LANGUAGE: bash
CODE:
scp -r /path/to/your/local/directus/folder username@server_ip:/path/to/your/remote/folder

----------------------------------------

TITLE: Creating Next.js Project with Directus SDK
DESCRIPTION: Commands to create a new Next.js project and install the Directus SDK. It also includes steps to clean up the initial project structure.

LANGUAGE: shell
CODE:
npx create-next-app \
  my-website \
  --js \
  --app \
  --eslint \
  --no-src-dir \
  --no-tailwind \
	--no-turbopack \
  --import-alias "@/*"

cd my-website
rm app/*
npm install @directus/sdk

----------------------------------------

TITLE: Creating Card Group Block Collection Structure
DESCRIPTION: Data model structure for the card group block collection with relationship fields for posts and cards.

LANGUAGE: markdown
CODE:
block_cardgroup

- id (uuid)
- headline (Type: String, Interface: Input)
- content (Type: Text, Interface: WYSIWYG)
- group_type (Type: String, Interface: Radio, Options: ['posts', 'custom'] )
- posts (Type: M2M, Conditions: Hide Field on Detail IF group_type === 'posts', Related Collection: posts)
- cards (Type: O2M, Conditions: Hide Field on Detail IF group_type === 'custom', Related Collection: block_cardgroup_cards)

----------------------------------------

TITLE: Creating Dynamic Routes in SolidStart
DESCRIPTION: Implements dynamic routing for pages based on slugs stored in Directus.

LANGUAGE: jsx
CODE:
import { createAsync, useParams } from "@solidjs/router";
import { Show, createEffect } from "solid-js";
import { getPage } from "~/libs/directus";
export const route = {
  load: (loc) => {
    if (loc.pathname) {
      return getPage(loc.pathname.substring(1));
    }
  },
};
export default function UserPage() {
  const param = useParams();
  const page = createAsync(getPage(param?.slug));
  createEffect(() => {
    if (page() === null) {
      throw new Error("404");
    }
  });
  return (
    <Show when={page()}>
      {(pageInfo) => (
        <>
          <h1>{pageInfo().title}</h1>
          <p innerHTML={pageInfo().content} />
        </>
      )}
    </Show>
  );
}

----------------------------------------

TITLE: Creating Dynamic Routes in SolidStart
DESCRIPTION: Implements dynamic routing for pages based on slugs stored in Directus.

LANGUAGE: jsx
CODE:
import { createAsync, useParams } from "@solidjs/router";
import { Show, createEffect } from "solid-js";
import { getPage } from "~/libs/directus";
export const route = {
  load: (loc) => {
    if (loc.pathname) {
      return getPage(loc.pathname.substring(1));
    }
  },
};
export default function UserPage() {
  const param = useParams();
  const page = createAsync(getPage(param?.slug));
  createEffect(() => {
    if (page() === null) {
      throw new Error("404");
    }
  });
  return (
    <Show when={page()}>
      {(pageInfo) => (
        <>
          <h1>{pageInfo().title}</h1>
          <p innerHTML={pageInfo().content} />
        </>
      )}
    </Show>
  );
}

----------------------------------------

TITLE: Implementing Preview Page
DESCRIPTION: Next.js page component for handling live preview functionality with authentication and versioning support.

LANGUAGE: typescript
CODE:
import { directus, readItem, withToken } from '@/lib/directus';
import { redirect } from 'next/navigation';

export default async function Page({
  params, searchParams
}: {
  params: Promise<{ id: string}>;
  searchParams: Promise<{ preview: boolean, token: string, version: string | undefined }>;
}) {
  const id = (await params).id;
  const {preview, token, version} = (await searchParams)


  const post = await directus.request(withToken(token, readItem('posts', id, {
    fields: ['id', 'title', 'content', 'slug'],
    ...(version && { version }),
  })));

  if (!preview) {
    redirect(`/posts/${post.slug}`);
  }

  return (
    <>
      <h1>{post.title}</h1>
      <div dangerouslySetInnerHTML={{ __html: post.content }} />
    </>
  );
}

----------------------------------------

TITLE: Implementing Preview Page
DESCRIPTION: Next.js page component for handling live preview functionality with authentication and versioning support.

LANGUAGE: typescript
CODE:
import { directus, readItem, withToken } from '@/lib/directus';
import { redirect } from 'next/navigation';

export default async function Page({
  params, searchParams
}: {
  params: Promise<{ id: string}>;
  searchParams: Promise<{ preview: boolean, token: string, version: string | undefined }>;
}) {
  const id = (await params).id;
  const {preview, token, version} = (await searchParams)


  const post = await directus.request(withToken(token, readItem('posts', id, {
    fields: ['id', 'title', 'content', 'slug'],
    ...(version && { version }),
  })));

  if (!preview) {
    redirect(`/posts/${post.slug}`);
  }

  return (
    <>
      <h1>{post.title}</h1>
      <div dangerouslySetInnerHTML={{ __html: post.content }} />
    </>
  );
}

----------------------------------------

TITLE: Querying Scheduled Articles with Fetch API in JavaScript
DESCRIPTION: JavaScript code using the Fetch API to query articles that are published and have a publish date less than or equal to the current timestamp from a Directus API.

LANGUAGE: js
CODE:
const response = await fetch(
	'https://yourdirectusurl.com/items/articles?' +
		new URLSearchParams({
			filter: {
				_and: [
					{
						status: {
							_eq: 'published',
						},
					},
					{
						date_published: {
							_lte: '$NOW',
						},
					},
				],
			},
		})
);

const articles = await response.json();

----------------------------------------

TITLE: Initializing Directus SDK
DESCRIPTION: JavaScript configuration to initialize the Directus SDK with REST client

LANGUAGE: javascript
CODE:
import { createDirectus, rest } from '@directus/sdk';

const directus = createDirectus('YOUR_DIRECTUS_PROJECT_URL').with(rest());

export default directus;

----------------------------------------

TITLE: Creating Vue.js Boilerplate HTML Structure
DESCRIPTION: Sets up the basic HTML structure for the chat application, including login form, message list, and new message form.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
	<body>
		<div id="app">
			<form @submit.prevent="loginSubmit">
				<label for="email">Email</label>
				<input type="email" id="email" />
				<label for="password">Password</label>
				<input type="password" id="password" />
				<input type="submit" />
			</form>

			<ol></ol>

			<form @submit.prevent="messageSubmit">
				<label for="message">Message</label>
				<input type="text" id="text" />
				<input type="submit" />
			</form>
		</div>

		<script setup>

		</script>
	</body>
</html>

----------------------------------------

TITLE: Configuring Directus SDK Types
DESCRIPTION: TypeScript configuration for Directus SDK with type definitions for Global, Author, Page, and Post models

LANGUAGE: typescript
CODE:
import {createDirectus, rest} from "@directus/sdk";

type Global = {
  slug: string;
  title: string;
  description: string;
}

type Author = {
  slug: string;
  name: string;
}

type Page = {
  slug: string;
  title: string;
  content: string;
}

type Post = {
  slug: string;
  image: string;
  title: string;
  content: string;
  author: Author;
  published_date: string;
}

type Schema = {
  global: Global;
  posts: Post[];
  pages: Page[];
}

const directus =
  createDirectus<Schema>("YOUR_DIRECTUS_URL")
    .with(rest());

export {directus, Global, Post, Page}

----------------------------------------

TITLE: Implementing Posts List Page in Astro
DESCRIPTION: Astro component for fetching and displaying a list of blog posts from Directus

LANGUAGE: astro
CODE:
---
import { client, readItems } from "../lib/directus"

// fetch the post data from directus and only highlighting the needed fields for this component.
const posts = await client.request(
  readItems('posts', {
    fields: ['id', 'title', 'slug', 'published_date', ],
    sort: '-published_date',
  })
);
//don't forget to check these fields from Fields Permissions in Directus

---

<!doctype html>
<html lang="en">
  <body>
    <main>
   <h1>Blog Posts</h1>
   <ul>
    {
     posts.map((post) => (
      <li>
       <a href={`/${post.id}`}>
        <h2>{post.title}</h2>
       </a>
       <span>
        {post.published_date}
       </span>
      </li>
     ))
    }
   </ul>
    </main>
  </body>
</html>

----------------------------------------

TITLE: Image Transformation Workflow Implementation
DESCRIPTION: Inngest function for pre-generating image transformations on file upload

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: 'pregenerate-image-transforms',
    name: 'Pre-generate images in different sizes',
    description: 'This flow will generate image transforms in the preset sizes whenever an asset is uploaded.',
    concurrency: 1,
  },
  { event: 'image-uploaded' },
  async ({ event, step, directus }) => {
    const { services, getSchema } = directus as DirectusContext;
    const { AssetsService, SettingsService } = services;

    const schema = await getSchema();

    const assetsService = new AssetsService({
      schema,
      accountability: event.data.accountability,
    });

    const settingsService = new SettingsService({
      schema,
      accountability: event.data.accountability,
    });

    const presets = await step.run('get-settings', async () => {
      const settings = await settingsService.readSingleton({});
      return settings.storage_asset_presets;
    });

    for (const preset of presets) {
      await step.run(`get-assets-${preset.key}`, async () => {
        const asset = await assetsService.getAsset(event.data.event.key, {
          transformationParams: preset,
        });

        return asset;
      });
    }

    return { success: true };
  },
);

----------------------------------------

TITLE: Creating Home Page Template
DESCRIPTION: HTML template for the home page that displays the title and description fetched from Directus.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ title }}</title>
</head>
<body>
    <header>
        <h1>{{ title }}</h1>
    </header>
    <main>
        <p>{{ description }}</p>
    </main>
</body>
</html>

----------------------------------------

TITLE: Initializing Project Dependencies
DESCRIPTION: Commands to create a new Vite project and install required dependencies including Directus SDK, js-cookie, and vue-router.

LANGUAGE: bash
CODE:
npm create vite@latest directus-webnote-keeper -- --template vue
cd directus-webnote-keeper
npm install
npm install @directus/sdk js-cookie vue-router
npm run dev

----------------------------------------

TITLE: Setting Environment Variables for Directus on DigitalOcean
DESCRIPTION: This code block provides a set of environment variables necessary for configuring Directus on DigitalOcean, including database connection, storage settings, Redis configuration, and initial admin credentials.

LANGUAGE: plaintext
CODE:
KEY="randomly-generated-key"
SECRET="randomly-generated-secret"
DB_CLIENT="pg"
DB_HOST="dbhost"
DB_PORT="25060"
DB_DATABASE="your_db"
DB_USER="doadmin"
DB_PASSWORD="dbpass"
DB_SSL__CA=""
STORAGE_LOCATIONS=digitalocean
STORAGE_DIGITALOCEAN_DRIVER=s3
STORAGE_DIGITALOCEAN_KEY="your-storage-key"
STORAGE_DIGITALOCEAN_SECRET="your-storage-secret"
STORAGE_DIGITALOCEAN_ENDPOINT="your-storage-endpoint-url"
STORAGE_DIGITALOCEAN_BUCKET="your-storage-bucket-name"
STORAGE_DIGITALOCEAN_REGION="your-storage-region"
REDIS_HOST="host-ip"
REDIS_PORT="6379"
REDIS_PASSWORD="redis-password"
CACHE_ENABLED="true"
CACHE_STORE="redis"
CACHE_AUTO_PURGE="true"
MESSENGER_STORE="redis"
SYNCHRONIZATION_STORE="redis"
PUBLIC_URL=${APP_URL}
ADMIN_EMAIL="admin@example.com"
ADMIN_PASSWORD="hunter2"

----------------------------------------

TITLE: Configuring Directus SDK in Astro
DESCRIPTION: TypeScript configuration for setting up Directus SDK client with REST API support

LANGUAGE: jsx
CODE:
import { createDirectus, rest, readItems, readItem, withToken } from '@directus/sdk';

const DIRECTUS_URL = import.meta.env.YOUR_DIRECTUS_URL;
const client = createDirectus(DIRECTUS_URL as string).with(rest());

export  {client, readItems, readItem, withToken };

----------------------------------------

TITLE: Configuring OpenAI Image Generation API Request Body in JSON
DESCRIPTION: This JSON snippet configures the request body for the OpenAI image generation API. It specifies the DALL-E 3 model, generates one image, sets the image size, and uses a prompt from the trigger.

LANGUAGE: json
CODE:
{
	"model": "dall-e-3",
	"n": 1,
	"size": "1792x1024",
	"prompt": "{{$trigger.body.prompt}}"
}

----------------------------------------

TITLE: Adding Dependencies in Gradle
DESCRIPTION: Adding required dependencies for navigation, retrofit and markdown support in the build.gradle file

LANGUAGE: groovy
CODE:
dependencies {
    implementation("androidx.navigation:navigation-fragment-ktx:2.3.5")
    implementation("androidx.navigation:navigation-ui-ktx:2.3.5")
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("org.jetbrains:markdown:0.7.3")
}

----------------------------------------

TITLE: Notes Management Component Implementation
DESCRIPTION: Vue component for creating, editing, and managing notes with Directus integration.

LANGUAGE: html
CODE:
<template>
    <div>
        <textarea
            rows="10"
            v-model="note"
            placeholder="Notes are great way to store helpful information to access later. Get Started..."
        ></textarea>
        <button @click="save">👍 Done</button>
    </div>
</template>

<script>
    import { createItem, readItem, updateItem } from "@directus/sdk";
    export default {
        inject: ["directus"],
        data() {
            return {
                note: "",
            };
        },
        computed: {
            id() {
                return this.$route.params.id;
            },
            isCreate() {
                return this.$route.params.id === "+";
            },
            isEdit() {
                return !this.isCreate;
            },
        },
        created() {
            if (this.isEdit) {
                this.get();
            }
        },
        methods: {
            async get() {
                const { note } = await this.directus.request(
                    readItem("notes", this.id)
                );
                this.note = note;
            },
            async save() {
                if (this.isEdit) {
                    await this.directus.request(
                        updateItem("notes", this.id, {
                            note: this.note,
                        })
                    );
                } else {
                    const [tab] = await chrome.tabs.query({
                        active: true,
                        lastFocusedWindow: true,
                    });
                    const { origin } = new URL(tab.url);
                    await this.directus.request(
                        createItem("notes", {
                            note: this.note,
                            website: origin,
                        })
                    );
                }
                this.$router.push({ name: "home" });
            },
        },
    };
</script>

----------------------------------------

TITLE: Fetching Historical Messages
DESCRIPTION: Implements a function to retrieve existing messages from the Directus collection and display them in the chat.

LANGUAGE: javascript
CODE:
function readAllMessages() {
  client.sendMessage({
    type: 'items',
    collection: 'messages',
    action: 'read',
    query: {
      limit: 10,
      sort: '-date_created',
      fields: ['*', 'user_created.first_name'],
    },
  });
}

----------------------------------------

TITLE: Initializing SolidStart Project with CLI
DESCRIPTION: Commands to create a new SolidStart project and add the Directus SDK using npm.

LANGUAGE: sh
CODE:
npm create solid@latest solid-directus
npm install @directus/sdk
cd solid-directus && npm install @directus/sdk
npm run dev --open

----------------------------------------

TITLE: Constructing JSON Body for Vonage Number Insight API Request
DESCRIPTION: This JSON structure is used as the body of the Vonage Number Insight API request. It specifies the type of insight (phone) and the specific insight required (fraud_score).

LANGUAGE: json
CODE:
{
   "type": "phone",
   "phone": "{{$trigger.payload.phone_number}}",
   "insights": ["fraud_score"]
}

----------------------------------------

TITLE: Initializing Angular Project with CLI
DESCRIPTION: Commands to create a new Angular project and install Directus SDK

LANGUAGE: bash
CODE:
ng new directus-with-angular
npm install @directus/sdk

----------------------------------------

TITLE: Implementing SvelteKit Server Hooks
DESCRIPTION: Server-side hook configuration to handle request headers for Directus API communication.

LANGUAGE: javascript
CODE:
export async function handle({ event, resolve }) {
   return await resolve(event, {
       filterSerializedResponseHeaders: (key, value) => {
           return key.toLowerCase() === 'content-type';
       },
   });
}

----------------------------------------

TITLE: Directus Plugin Integration for Nuxt 2
DESCRIPTION: Plugin setup to integrate Directus SDK with Nuxt 2, making the Directus client available throughout the application.

LANGUAGE: javascript
CODE:
import { Directus } from '@directus/sdk';
const DIRECTUS_URL = 'my-directus-url'
const directus = new Directus(DIRECTUS_URL);

export default({ app }, inject) => {
   inject('directus', directus)
}

----------------------------------------

TITLE: Defining Data Models
DESCRIPTION: Data classes representing the structure of responses from Directus API endpoints

LANGUAGE: kotlin
CODE:
package com.example.directusapp.model

data class Author(
    val id: Int,
    val name: String,
)

data class Blog(
    val id: Int,
    val title: String,
    val content: String,
    val dateCreated: String,
    val author: Author
)

data class Page(
    val slug: String,
    val title: String,
    val content: String,
)

data class Global(
    val id: Int,
    val title: String,
    val description: String,
)

data class BlogResponse(
    val data: Blog
)

data class BlogsResponse(
    val data: List<Blog>
)

data class PageResponse(
    val data: List<Page>
)

data class GlobalResponse(
    val data: Global
)

----------------------------------------

TITLE: Updating Feedback Item with GitHub Issue Data in Directus Automate
DESCRIPTION: This JSON payload is used in a Directus Automate flow to update a feedback item with information about the created GitHub issue. It stores the issue title and number in the Directus item.

LANGUAGE: json
CODE:
{
	"issue_title": "{{$trigger.body.title}}",
	"issue_number": "{{github.data.number}}"
}

----------------------------------------

TITLE: Creating Pages Collection Structure
DESCRIPTION: Data model structure for the main pages collection with basic fields for title and slug.

LANGUAGE: markdown
CODE:
pages

- id (uuid)
- title (Type: String, Interface: Input)
- slug (Type: String, Interface: Input, URL Safe: true)

----------------------------------------

TITLE: Configuring Event Hook Condition for Audio Files in Directus Automate
DESCRIPTION: This JSON snippet defines a condition in Directus Automate to check if the uploaded file is an audio file. It uses the file's 'type' property to determine if it contains 'audio'.

LANGUAGE: json
CODE:
{
    "$trigger": {
        "payload": {
            "type": {
                "_contains": "audio"
            }
        }
    }
}

----------------------------------------

TITLE: Initializing Astro Project with NPX
DESCRIPTION: Command to create a new Astro project using npx, with instructions for selecting project configurations.

LANGUAGE: bash
CODE:
npx create-astro@latest astro-multilang

----------------------------------------

TITLE: Implementing Blog Post Component
DESCRIPTION: Angular component for displaying individual blog posts with dynamic routing

LANGUAGE: typescript
CODE:
import {Component, OnInit} from '@angular/core';
import {directus, Post} from "../../../../directus";
import {ActivatedRoute} from "@angular/router";
import {CommonModule} from "@angular/common";
import {readItems} from "@directus/sdk";

@Component({
  selector: 'app-post',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './post.component.html',
  styleUrl: './post.component.css'
})
export class PostComponent implements OnInit{
  post: Post;
  baseUrl = "YOUR_DIRECTUS_URL";
  constructor(private route: ActivatedRoute) {
  }
  ngOnInit(): void {
    this
      .getPostBySlug(+this
      .route
      .snapshot
      .paramMap.get('slug'))
  }

  async getPostBySlug(slug: string){
    //@ts-ignore
    this.post = await directus
      .request<Post[]>(readItems("posts", [{slug}]))[0];
  }
}

----------------------------------------

TITLE: Implementing Draft API Route with Version Support
DESCRIPTION: Creates an API route handler for draft mode that includes version parameter handling and proper redirection.

LANGUAGE: jsx
CODE:
import { draftMode } from 'next/headers';
import directus from '@/lib/directus';
import { readItem } from '@directus/sdk/rest';

export async function GET(request: Request) {
	const { searchParams } = new URL(request.url);
	const secret = searchParams.get('secret');
	const id = searchParams.get('id');
	const version = searchParams.get('version');

	if (secret !== 'MY_SECRET_TOKEN') {
		return new Response('Invalid token', { status: 401 });
	}

	if (!id) {
		return new Response('Missing id', { status: 401 });
	}

	const post = await directus.request(readItem('Posts', id));

	if (!post) {
		return new Response('Invalid id', { status: 401 });
	}

	draftMode().enable();

	return new Response(null, {
		status: 307,
		headers: {
			Location: `/posts/${post.id}?version=${version}`,
		},
	});
}

----------------------------------------

TITLE: Configuring Condition Rules for Published Content
DESCRIPTION: JSON configuration for checking if content status is set to published before triggering a build. This condition helps prevent unnecessary builds by only executing when content is in published state.

LANGUAGE: json
CODE:
{
	"$trigger": {
		"payload": {
			"status": {
				"_eq": "published"
			}
		}
	}
}

----------------------------------------

TITLE: Hero Component Implementation
DESCRIPTION: Svelte component for rendering a hero section with dynamic content, buttons, and styling

LANGUAGE: javascript
CODE:
<!--src/lib/components/Hero.svelte-->
<script>
  export let data;
</script>

<section class="hero">
  <div class="text">
      <h1>{data.headline}</h1>
      <p>{@html data.content.replace(/<\/?p>/g, '')}</p>
      <div class="buttons">
          {#each data.buttons as button}
              <a href={button.href} class="btn {button.variant}">{button.label}</a>
          {/each}
      </div>
  </div>
</section>

<style>
  .hero {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 2rem;
      background: #f5f5f5;
  }
  .text {
      max-width: 50%;
  }
  .buttons a {
      margin-right: 10px;
      padding: 10px 20px;
      border-radius: 5px;
      text-decoration: none;
  }
  .primary {
      background: blue;
      color: white;
  }
</style>

----------------------------------------

TITLE: Conditional Check for 'Allow' Recommendation in Directus Flow
DESCRIPTION: This JSON condition checks if the risk_recommendation from the Vonage API response is 'allow'. It's used in a Directus Flow to determine the next action.

LANGUAGE: json
CODE:
{
    "check_number": {
        "data": {
            "fraud_score": {
                "risk_recommendation": {
                    "_eq": "allow"
                }
            }
        }
    }
}

----------------------------------------

TITLE: Using Basic Button Component in Vue
DESCRIPTION: Example of using the globally registered VButton component in a Directus extension without explicit imports.

LANGUAGE: html
CODE:
<VButton>My Button</VButton>

----------------------------------------

TITLE: Configuring Condition Rules for Published Content in Directus Flow
DESCRIPTION: JSON configuration for a condition operation that checks if content status is set to 'published' before triggering a build. This prevents unnecessary builds for unpublished content changes.

LANGUAGE: json
CODE:
{
	"$trigger": {
		"payload": {
			"status": {
				"_eq": "published"
			}
		}
	}
}

----------------------------------------

TITLE: Processing Clarifai Concepts in Directus Flow Script
DESCRIPTION: JavaScript function to process the Clarifai API response. It filters concepts with a confidence score greater than 0.95 and extracts their names into an array.

LANGUAGE: javascript
CODE:
module.exports = async function(data) {
	return data.clarifai.data.outputs[0].data.concepts
    			.filter(concept => concept.value > 0.95)
                .map(concept => concept.name)
}

----------------------------------------

TITLE: Implementing Version-Aware Post Page in Next.js
DESCRIPTION: Updates the Next.js post page component to handle version parameters from URL search params and displays post content with draft mode indicator.

LANGUAGE: tsx
CODE:
import directus from "@/lib/directus";
import { readItems } from "@directus/sdk";
import { draftMode } from "next/headers";

export default async function Post({
  searchParams,
  params: { id }
}: {
  searchParams: { [key: string]: string | string[] | undefined };
  params: { id: string };
}) {
  const { isEnabled } = draftMode();

  const post = await getPostById(id, searchParams.version?.toString());

  if (!post) {
    return null;
  }

  const { title, body } = post;

  return (
    <article>
      <h1>{title}</h1>
      <p>{body}</p>
      {isEnabled && <p>(Draft Mode)</p>}
    </article>
  );
}

export async function generateStaticParams() {
  const posts = await directus.request(
    readItems("Posts", {
      limit: -1
    })
  );

  return posts.map((post) => ({
    id: String(post.id)
  }));
}

----------------------------------------

TITLE: Using Sleep Scope in Sandbox
DESCRIPTION: Implementation of sleep functionality in sandboxed environment with required scope configuration.

LANGUAGE: javascript
CODE:
import { sleep } from 'directus:api';

await sleep(1000);

LANGUAGE: json
CODE:
"requestedScopes": {
  "sleep": {}
}

----------------------------------------

TITLE: Update Data Operation Payload Configuration
DESCRIPTION: JSON payload configuration for the Update Data operation in Directus Flow. Saves the generated social media content back to the article collection.

LANGUAGE: json
CODE:
{
 	"social": "{{generate.data.choices[0].message.content}}"
 }

----------------------------------------

TITLE: Chrome Extension Manifest Configuration
DESCRIPTION: Manifest.json configuration file defining the extension's properties, permissions, and metadata.

LANGUAGE: json
CODE:
{
    "name": "Directus WebNote Keeper",
    "version": "1.0",
    "manifest_version": 3,
    "author": "Jay Bharadia",
    "description": "Directus WebNote Keeper for capturing urls and store in directus.",
    "icons": {
        "16": "icon.png",
        "32": "icon.png",
        "48": "icon.png",
        "128": "icon.png"
    },
    "action": {
        "default_title": "Directus WebNote Keeper",
        "default_popup": "index.html"
    },
    "permissions": ["activeTab", "storage"]
}

----------------------------------------

TITLE: Example Inngest Function in TypeScript
DESCRIPTION: Basic example showing Inngest function structure with steps for content analysis

LANGUAGE: typescript
CODE:
export const analyzeContent = inngest.createFunction(
  { id: "analyze-content" },
  { event: "content/created" },
  async ({ event, step }) => {
    const extractedText = await step.run("extract-text", async () => {
      return textExtractor.process(event.data.documentUrl)
    })

    const analysis = await step.run("analyze-with-ai", async () => {
      return aiService.analyze(extractedText)
    })

    return analysis
  }
)

----------------------------------------

TITLE: Installing Dependencies and Building Directus
DESCRIPTION: Commands to install project dependencies using pnpm and build the Directus project

LANGUAGE: bash
CODE:
pnpm install
pnpm build

----------------------------------------

TITLE: Markdown Table - Table Layout Controls
DESCRIPTION: Tables describing control options for the Table layout in Directus

LANGUAGE: markdown
CODE:
| Control         | Description                               |
| --------------- | ----------------------------------------- |
| **Spacing** | Adjust the vertical space a row takes up. |

----------------------------------------

TITLE: Docker Compose Configuration for Directus and Inngest
DESCRIPTION: Docker Compose setup for local development environment with Directus, PostgreSQL, Redis, and Inngest dev server

LANGUAGE: yaml
CODE:
name: directus-inngest
services:
  database:
    container_name: directus-inngest-database
    image: postgis/postgis:13-master
    ports:
      - 5432:5432
    volumes:
      - ./directus/data/database:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: directus
      POSTGRES_PASSWORD: directus
      POSTGRES_DB: directus
    networks:
      - backend-network

  cache:
    container_name: directus-inngest-cache
    image: redis:6
    networks:
      - backend-network

  directus:
    container_name: directus-inngest
    image: directus/directus:latest
    ports:
      - 8055:8055
    volumes:
      - ./directus/uploads:/directus/uploads
      - ./directus/extensions:/directus/extensions
      - ./queue:/directus/extensions/queue
    depends_on:
      - cache
      - database
    networks:
      - backend-network
    environment:
      KEY: 'your-directus-key'
      SECRET: 'your-directus-secret'
      DB_CLIENT: 'pg'
      DB_HOST: 'database'
      DB_PORT: '5432'
      DB_DATABASE: 'directus'
      DB_USER: 'directus'
      DB_PASSWORD: 'directus'
      INNGEST_BASE_URL: 'http://inngest:8288'
      INNGEST_DEV: 'true'
      INNGEST_EVENT_KEY: 'your-event-key-here'
      INNGEST_SIGNING_KEY: 'your-signing-key-here'
      EXTENSIONS_AUTO_RELOAD: 'true'

  inngest:
    container_name: directus-inngest-inngest
    image: inngest/inngest:latest
    command: 'inngest dev -u http://directus:8055/inngest'
    ports:
      - '8288:8288'
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

----------------------------------------

TITLE: Updating Extension Package.json for Directus 10.10.0
DESCRIPTION: Add the required 'directus:extension' object to the package.json file for extensions to work with the new extension structure in Directus 10.10.0.

LANGUAGE: json
CODE:
{
  "name": "directus-extension-hello-world",
  "version": "1.0.0",
  "type": "module",
  "directus:extension": {
    "type": "endpoint",
    "path": "dist/index.js",
    "source": "src/index.js",
    "host": "^10.0.0"
  }
}

----------------------------------------

TITLE: Updating AuthenticationService.login in Directus 10.10.0
DESCRIPTION: Update the AuthenticationService.login function call to use the new options object parameter for additional options like OTP and session.

LANGUAGE: js
CODE:
// Before
AuthenticationService.login('email', 'password', 'otp-code');

LANGUAGE: js
CODE:
// After
AuthenticationService.login('email', 'password', { otp: 'otp-code', session: true });

----------------------------------------

TITLE: Starting Directus Development Server
DESCRIPTION: Commands to start the development server for all packages or specific packages

LANGUAGE: bash
CODE:
pnpm --recursive dev

# To run specific package (e.g., api):
pnpm --filter api dev

----------------------------------------

TITLE: Configuring Rate Limiting in Directus
DESCRIPTION: Environment variables for configuring rate limiting settings in Directus, including per-IP and global rate limiting.

LANGUAGE: markdown
CODE:
| Variable                                    | Description                                                             | Default Value |
| ------------------------------------------- | ----------------------------------------------------------------------- | ------------- |
| `RATE_LIMITER_ENABLED`                      | Whether or not to enable rate limiting per IP on the API.               | `false`       |
| `RATE_LIMITER_POINTS`                       | The amount of allowed hits per duration.                                | `50`          |
| `RATE_LIMITER_DURATION`                     | The time window in seconds in which the points are counted.             | `1`           |
| `RATE_LIMITER_STORE`                        | Where to store the rate limiter counts. One of `memory`, `redis`.       | `memory`      |
| `RATE_LIMITER_HEALTHCHECK_THRESHOLD`        | Healthcheck timeout threshold in milliseconds.                          | `150`         |
| `RATE_LIMITER_GLOBAL_ENABLED`               | Whether or not to enable global rate limiting on the API.               | `false`       |
| `RATE_LIMITER_GLOBAL_POINTS`                | The total amount of allowed hits per duration.                          | `1000`        |
| `RATE_LIMITER_GLOBAL_DURATION`              | The time window in seconds in which the points are counted.             | `1`           |
| `RATE_LIMITER_GLOBAL_HEALTHCHECK_THRESHOLD` | Healthcheck timeout threshold in milliseconds.                          | `150`         |
| `RATE_LIMITER_REGISTRATION_ENABLED`         | Whether or not to enable rate limiting per IP on the user registration. | `true`        |
| `RATE_LIMITER_REGISTRATION_POINTS`          | The amount of allowed hits per duration.                                | `5`           |
| `RATE_LIMITER_REGISTRATION_DURATION`        | The time window in seconds in which the points are counted.             | `60`          |

----------------------------------------

TITLE: Deploying to Netlify Production
DESCRIPTION: Command to deploy the documentation to Netlify production environment.

LANGUAGE: bash
CODE:
netlify deploy --prod

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the development server on localhost:3000 for local documentation development.

LANGUAGE: bash
CODE:
pnpm dev