TITLE: Configuring VIC Hydrological Model Simulation Parameters
DESCRIPTION: Complete configuration file for a VIC hydrological model simulation. It specifies temporal resolution, simulation period, domain files, forcing data, physical parameters, and output settings for a Stehekin watershed model run. The configuration uses a PROLEPTIC_GREGORIAN calendar with full energy balance calculations and defines numerous output variables.

LANGUAGE: config
CODE:
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY	  24
RUNOFF_STEPS_PER_DAY  24

STARTYEAR	1949
STARTMONTH	1
STARTDAY	1
ENDYEAR 	1949
ENDMONTH	1
ENDDAY		10
CALENDAR    PROLEPTIC_GREGORIAN

FULL_ENERGY TRUE
FROZEN_SOIL	FALSE

AERO_RESIST_CANSNOW AR_406

DOMAIN         $test_data_dir/image/Stehekin/parameters/domain.stehekin.20151028.nc
DOMAIN_TYPE    LAT     lat
DOMAIN_TYPE    LON     lon
DOMAIN_TYPE    MASK    mask
DOMAIN_TYPE    AREA    area
DOMAIN_TYPE    FRAC    frac
DOMAIN_TYPE    YDIM    lat
DOMAIN_TYPE    XDIM    lon

FORCING1	    $test_data_dir/image/Stehekin/forcings/Stehekin_image_test.forcings_10days.
FORCE_TYPE    AIR_TEMP 	   tas
FORCE_TYPE    PREC 	       prcp
FORCE_TYPE    PRESSURE 	   pres
FORCE_TYPE    SWDOWN       dswrf
FORCE_TYPE    LWDOWN 	     dlwrf
FORCE_TYPE    VP           vp
FORCE_TYPE    WIND         wind
WIND_H        10.0

PARAMETERS      $test_data_dir/image/Stehekin/parameters/Stehekin_test_params_20160327.nc
NODES           3
SNOW_BAND       TRUE

ROUT_PARAM          $test_data_dir/image/Stehekin/parameters/stehekin_parameters_01.rvic.prm.Stehekin.20150727.nc

RESULT_DIR  $result_dir

OUTFILE     fluxes
COMPRESS    FALSE
OUT_FORMAT  NETCDF4
AGGFREQ     NDAYS   1
OUTVAR      OUT_PREC
OUTVAR      OUT_RAINF
OUTVAR      OUT_SNOWF
OUTVAR      OUT_AIR_TEMP
OUTVAR      OUT_SWDOWN
OUTVAR      OUT_LWDOWN
OUTVAR      OUT_PRESSURE
OUTVAR      OUT_WIND
OUTVAR      OUT_DENSITY
OUTVAR      OUT_REL_HUMID
OUTVAR      OUT_QAIR
OUTVAR      OUT_VP
OUTVAR      OUT_VPD
OUTVAR      OUT_RUNOFF
OUTVAR      OUT_BASEFLOW
OUTVAR      OUT_EVAP
OUTVAR      OUT_SWE
OUTVAR      OUT_SOIL_MOIST
OUTVAR      OUT_ALBEDO
OUTVAR      OUT_SOIL_TEMP

----------------------------------------

TITLE: Configuring Land Surface Parameters in VIC Model
DESCRIPTION: Configuration options for land surface parameters in the VIC hydrologic model. Specifies the parameter file path, enables snow bands, sets baseflow model to ARNO, configures LAI source, and sets the number of soil thermal nodes.

LANGUAGE: plaintext
CODE:
#######################################################################
# Land Surface Files and Parameters
#######################################################################
PARAMETERS      params/Stehekin.params.nc
SNOW_BAND       TRUE
BASEFLOW        ARNO
JULY_TAVG_SUPPLIED  FALSE
ORGANIC_FRACT       FALSE
LAI_SRC             FROM_VEGPARAM
NODES           3  # number of soil thermal nodes

----------------------------------------

TITLE: Configuring VIC Hydrological Model Parameters
DESCRIPTION: Complete configuration for the VIC hydrological model including soil layers, time steps, forcing data specifications, file paths, and output options. This setup uses 3 soil layers, processes data in 24-hour time steps with full energy balance, and sources data from global 0.5-degree resolution datasets.

LANGUAGE: config
CODE:
NLAYER              3
NODES               3
TIME_STEP           24
SNOW_STEP           1
STARTYEAR           1948
STARTMONTH          01
STARTDAY            01
STARTHOUR           00
ENDYEAR             2007
ENDMONTH            10
ENDDAY              31
FULL_ENERGY         TRUE
FROZEN_SOIL         FALSE
FORCING1            {test_data_dir}/global_0.5deg/forcings/data_
FORCE_FORMAT        BINARY
FORCE_ENDIAN        LITTLE
N_TYPES             4
FORCE_TYPE          PREC    UNSIGNED    40
FORCE_TYPE          TMAX    SIGNED      100
FORCE_TYPE          TMIN    SIGNED      100
FORCE_TYPE          WIND    SIGNED      100
FORCE_DT            24
FORCEYEAR           1948
FORCEMONTH          01
FORCEDAY            01
FORCEHOUR           00
GRID_DECIMAL        4
WIND_H              10.0
MEASURE_H           2.0
SOIL                {test_data_dir}/global_0.5deg/parameters/soil_param.txt
ARC_SOIL            FALSE
BASEFLOW            ARNO
JULY_TAVG_SUPPLIED  FALSE
ORGANIC_FRACT       FALSE
VEGLIB              {test_data_dir}/global_0.5deg/parameters/world_veg_lib.txt
VEGPARAM            {test_data_dir}/global_0.5deg/parameters/veg_param.txt
ROOT_ZONES          3
VEGPARAM_LAI        TRUE
LAI_SRC             FROM_VEGLIB
SNOW_BAND           5    {test_data_dir}/global_0.5deg/parameters/snowbands.txt
RESULT_DIR          {outdir}/{testname)/results/
OUT_STEP            0
SKIPYEAR            0
COMPRESS            FALSE
BINARY_OUTPUT       FALSE
ALMA_OUTPUT         FALSE
MOISTFRACT          FALSE
PRT_HEADER          TRUE
PRT_SNOW_BAND       FALSE

----------------------------------------

TITLE: Configuring VIC Hydrological Model
DESCRIPTION: Complete configuration file for the VIC hydrological model that specifies model behavior, physics options, input/output settings, and spatial domain configuration. The file includes settings for soil temperature calculations, snow modeling, moisture handling, and defines output variables and their frequencies.

LANGUAGE: config
CODE:
# VIC Global Configuration File

NODES                  10
OUT_TIME_UNITS         DAYS

# Soil Temperature Options
FULL_ENERGY    TRUE
FROZEN_SOIL    TRUE
QUICK_FLUX     FALSE
QUICK_SOLVE    FALSE
NOFLUX         TRUE
IMPLICIT       TRUE
EXP_TRANS      TRUE

# Snow Options
MAX_SNOW_ALBEDO        TRUE
SNOW_DENSITY          DENS_SNTHRM
BLOWING                FALSE
BLOWING_VAR_THRESHOLD  FALSE
BLOWING_CALC_PROB      FALSE
BLOWING_SIMPLE         TRUE
BLOWING_FETCH          FALSE
BLOWING_SPATIAL_WIND   FALSE

# MISC
BULK_DENSITY_COMB TRUE
ORGANIC_FRACT     TRUE
CORRPREC          FALSE
CLOSE_ENERGY      TRUE
COMPUTE_TREELINE  FALSE

AERO_RESIST_CANSNOW  AR_410
GRND_FLUX_TYPE       GF_410
SPATIAL_FROST        FALSE
SPATIAL_SNOW         FALSE
TFALLBACK            TRUE
SHARE_LAYER_MOIST    TRUE
CANOPY_LAYERS        3
RC_MODE              RC_JARVIS

# Input Files and PATHS
INIT_STATE       {vic_initstate}
STATENAME_CESM   TRUE
CONSTANTS        {vic_constants}
LOG_DIR          {rundir}/
PARAMETERS       {vic_params}
LAI_SRC          FROM_VEGPARAM
ALB_SRC          FROM_VEGPARAM
FCAN_SRC         FROM_DEFAULT
SNOW_BAND        FALSE
RESULT_DIR       {rundir}/

# Domain File
DOMAIN           {vic_domain}
DOMAIN_TYPE      LAT     yc
DOMAIN_TYPE      LON     xc
DOMAIN_TYPE      MASK    mask
DOMAIN_TYPE      AREA    area
DOMAIN_TYPE      FRAC    frac
DOMAIN_TYPE      YDIM    nj
DOMAIN_TYPE      XDIM    ni

OUTFILE     {caseid}.vic.ha
AGGFREQ     NDAYS 1
OUT_FORMAT  NETCDF4_CLASSIC
HISTFREQ    NMONTHS 1
OUTVAR      OUT_RUNOFF
OUTVAR      OUT_BASEFLOW
OUTVAR      OUT_PREC
OUTVAR      OUT_EVAP
OUTVAR      OUT_SOIL_TEMP
OUTVAR      OUT_SOIL_TNODE
OUTVAR      OUT_SOIL_MOIST
OUTVAR      OUT_DELTAH
OUTVAR      OUT_SWE
OUTVAR      OUT_DELTACC
OUTVAR      OUT_ADVECTION
OUTVAR      OUT_RFRZ_ENERGY
OUTVAR      OUT_SNOW_FLUX
OUTVAR      OUT_SNOW_SURF_TEMP
OUTVAR      OUT_WATER_ERROR
OUTVAR      OUT_ENERGY_ERROR
OUTVAR      OUT_GRND_FLUX
OUTVAR      OUT_SURF_TEMP
OUTVAR      OUT_AIR_TEMP
OUTVAR      OUT_RAD_TEMP
OUTVAR      OUT_ALBEDO
OUTVAR      OUT_LATENT
OUTVAR      OUT_SENSIBLE
OUTVAR      OUT_SWDOWN
OUTVAR      OUT_LWDOWN
OUTVAR      OUT_SWNET
OUTVAR      OUT_LWNET
OUTVAR      OUT_R_NET

----------------------------------------

TITLE: Configuring VIC Model Global Parameters with Output Settings
DESCRIPTION: Example global parameter file for the VIC model version 5.0, demonstrating configuration of simulation parameters, domain information, and energy balance settings. This snippet shows the structure and syntax of a VIC configuration file including time step settings, simulation period, domain specification, and energy balance options.

LANGUAGE: plaintext
CODE:
#######################################################################
# VIC Model Parameters - 5.0
#######################################################################
# $Id$
#######################################################################
# Simulation Parameters
#######################################################################
MODEL_STEPS_PER_DAY   24  # number of model time steps in 24 hour period
SNOW_STEPS_PER_DAY    24  # number of snow model time steps in 24 hour period
RUNOFF_STEPS_PER_DAY  24  # number of runoff time steps in 24 hour period

STARTYEAR   1949 # year model simulation starts
STARTMONTH  1   # month model simulation starts
STARTDAY    1   # day model simulation starts
ENDYEAR     1949
ENDMONTH    1
ENDDAY      10
CALENDAR    PROLEPTIC_GREGORIAN

FULL_ENERGY FALSE   # calculate full energy balance
FROZEN_SOIL FALSE   # calculate frozen soils

#######################################################################
# DOMAIN INFO
#######################################################################
DOMAIN         domain.Stehekin.nc
DOMAIN_TYPE    LAT     lat
DOMAIN_TYPE    LON     lon
DOMAIN_TYPE    MASK    mask
DOMAIN_TYPE    AREA    area
DOMAIN_TYPE    FRAC    frac
DOMAIN_TYPE    YDIM    lat
DOMAIN_TYPE    XDIM    lon

#######################################################################
# Energy Balance Parameters
#######################################################################
FULL_ENERGY     FALSE   # TRUE = calculate full energy balance; FALSE = compute water balance only.  Default = FALSE.
#CLOSE_ENERGY   FALSE   # TRUE = all energy balance calculations (canopy air, canopy snow, ground snow,
                        # and ground surface) are iterated to minimize the total column error.  Default = FALSE.

#######################################################################
# Soil Temperature Parameters
# VIC will choose appropriate value for QUICK_FLUX depending on values of FULL_ENERGY and FROZEN_SOIL; the user should only need to override VIC's choices in special cases.

----------------------------------------

TITLE: Configuring VIC Model Parameters and Settings
DESCRIPTION: This configuration file specifies all necessary parameters for running the VIC hydrological model, including model structure, simulation period, energy balance options, and input/output paths. It defines model layers, timesteps, simulation duration, forcing data sources, and an extensive list of output variables.

LANGUAGE: plaintext
CODE:
NLAYER                3
NODES                 3
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             1949
STARTMONTH            01
STARTDAY              01
ENDYEAR               1949
ENDMONTH              01
ENDDAY                10
FULL_ENERGY           FALSE
FROZEN_SOIL           FALSE

#INIT_STATE
STATENAME       $state_dir/states
STATEYEAR       1949
STATEMONTH      1
STATEDAY        11
STATESEC        0
STATE_FORMAT    ASCII

FORCING1             $test_data_dir/classic/Stehekin/forcings/full_data_
FORCE_FORMAT         ASCII
FORCE_TYPE           PREC
FORCE_TYPE           AIR_TEMP
FORCE_TYPE           SWDOWN
FORCE_TYPE           LWDOWN
FORCE_TYPE           SKIP  # This column is air density, which is not needed by VIC
FORCE_TYPE           PRESSURE
FORCE_TYPE           VP
FORCE_TYPE           WIND
FORCE_STEPS_PER_DAY  24
FORCEYEAR            1949
FORCEMONTH           01
FORCEDAY             01
GRID_DECIMAL         4
WIND_H               10.0

SOIL                $test_data_dir/classic/Stehekin/parameters/Stehekin_soil.txt
BASEFLOW            ARNO
JULY_TAVG_SUPPLIED  FALSE
ORGANIC_FRACT       FALSE
VEGLIB              $test_data_dir/classic/Stehekin/parameters/Stehekin_veglib.txt
VEGPARAM            $test_data_dir/classic/Stehekin/parameters/Stehekin_vegparam.txt
ROOT_ZONES          3
VEGPARAM_LAI        TRUE
LAI_SRC             FROM_VEGPARAM
SNOW_BAND           5  $test_data_dir/classic/Stehekin/parameters/Stehekin_snowbands.txt

RESULT_DIR              $result_dir

# Instantaneous output
OUTFILE     allvars
AGGFREQ     NSTEPS        1
OUTVAR      OUT_ASAT
OUTVAR      OUT_LAKE_AREA_FRAC
OUTVAR      OUT_LAKE_DEPTH
OUTVAR      OUT_LAKE_ICE
OUTVAR      OUT_LAKE_ICE_FRACT
OUTVAR      OUT_LAKE_ICE_HEIGHT
OUTVAR      OUT_LAKE_MOIST
OUTVAR      OUT_LAKE_SURF_AREA
OUTVAR      OUT_LAKE_SWE
OUTVAR      OUT_LAKE_SWE_V
OUTVAR      OUT_LAKE_VOLUME
OUTVAR      OUT_ROOTMOIST
OUTVAR      OUT_SMFROZFRAC
OUTVAR      OUT_SMLIQFRAC
OUTVAR      OUT_SNOW_CANOPY
OUTVAR      OUT_SNOW_COVER
OUTVAR      OUT_SNOW_DEPTH
OUTVAR      OUT_SOIL_ICE
OUTVAR      OUT_SOIL_LIQ
OUTVAR      OUT_SOIL_ICE_FRAC
OUTVAR      OUT_SOIL_LIQ_FRAC
OUTVAR      OUT_SOIL_MOIST
OUTVAR      OUT_SOIL_WET
OUTVAR      OUT_SURFSTOR
OUTVAR      OUT_SURF_FROST_FRAC
OUTVAR      OUT_SWE
OUTVAR      OUT_WDEW
OUTVAR      OUT_ZWT
OUTVAR      OUT_ZWT_LUMPED
OUTVAR      OUT_BASEFLOW
OUTVAR      OUT_DELINTERCEPT
OUTVAR      OUT_DELSOILMOIST
OUTVAR      OUT_DELSWE
OUTVAR      OUT_DELSURFSTOR
OUTVAR      OUT_EVAP
OUTVAR      OUT_EVAP_BARE
OUTVAR      OUT_EVAP_CANOP
OUTVAR      OUT_INFLOW
OUTVAR      OUT_LAKE_BF_IN
OUTVAR      OUT_LAKE_BF_IN_V
OUTVAR      OUT_LAKE_BF_OUT
OUTVAR      OUT_LAKE_BF_OUT_V
OUTVAR      OUT_LAKE_CHAN_IN
OUTVAR      OUT_LAKE_CHAN_IN_V
OUTVAR      OUT_LAKE_CHAN_OUT
OUTVAR      OUT_LAKE_CHAN_OUT_V
OUTVAR      OUT_LAKE_DSTOR
OUTVAR      OUT_LAKE_DSTOR_V
OUTVAR      OUT_LAKE_DSWE
OUTVAR      OUT_LAKE_DSWE_V
OUTVAR      OUT_LAKE_EVAP
OUTVAR      OUT_LAKE_EVAP_V
OUTVAR      OUT_LAKE_PREC_V
OUTVAR      OUT_LAKE_RCHRG
OUTVAR      OUT_LAKE_RCHRG_V
OUTVAR      OUT_LAKE_RO_IN
OUTVAR      OUT_LAKE_RO_IN_V
OUTVAR      OUT_LAKE_VAPFLX
OUTVAR      OUT_LAKE_VAPFLX_V
OUTVAR      OUT_PET
OUTVAR      OUT_PREC
OUTVAR      OUT_RAINF
OUTVAR      OUT_REFREEZE
OUTVAR      OUT_RUNOFF
OUTVAR      OUT_SNOW_MELT
OUTVAR      OUT_SNOWF
OUTVAR      OUT_SUB_BLOWING
OUTVAR      OUT_SUB_CANOP
OUTVAR      OUT_SUB_SNOW
OUTVAR      OUT_SUB_SURFACE
OUTVAR      OUT_TRANSP_VEG
OUTVAR      OUT_ALBEDO
OUTVAR      OUT_BARESOILT
OUTVAR      OUT_FDEPTH
OUTVAR      OUT_LAKE_ICE_TEMP
OUTVAR      OUT_LAKE_SURF_TEMP
OUTVAR      OUT_RAD_TEMP
OUTVAR      OUT_SALBEDO
OUTVAR      OUT_SNOW_PACK_TEMP
OUTVAR      OUT_SNOW_SURF_TEMP
OUTVAR      OUT_SNOWT_FBFLAG
OUTVAR      OUT_SOIL_TEMP
OUTVAR      OUT_SOIL_TNODE
OUTVAR      OUT_SOIL_TNODE_WL
OUTVAR      OUT_SOILT_FBFLAG
OUTVAR      OUT_SURF_TEMP
OUTVAR      OUT_SURFT_FBFLAG
OUTVAR      OUT_TCAN_FBFLAG
OUTVAR      OUT_TDEPTH
OUTVAR      OUT_TFOL_FBFLAG
OUTVAR      OUT_VEGT
OUTVAR      OUT_ADV_SENS
OUTVAR      OUT_ADVECTION
OUTVAR      OUT_DELTACC
OUTVAR      OUT_DELTAH
OUTVAR      OUT_ENERGY_ERROR
OUTVAR      OUT_WATER_ERROR
OUTVAR      OUT_FUSION
OUTVAR      OUT_GRND_FLUX
OUTVAR      OUT_IN_LONG
OUTVAR      OUT_LATENT
OUTVAR      OUT_LATENT_SUB
OUTVAR      OUT_MELT_ENERGY
OUTVAR      OUT_LWNET
OUTVAR      OUT_SWNET
OUTVAR      OUT_R_NET
OUTVAR      OUT_RFRZ_ENERGY
OUTVAR      OUT_SENSIBLE
OUTVAR      OUT_SNOW_FLUX
OUTVAR      OUT_AERO_COND
OUTVAR      OUT_AERO_COND1
OUTVAR      OUT_AERO_COND2
OUTVAR      OUT_AERO_RESIST
OUTVAR      OUT_AERO_RESIST1
OUTVAR      OUT_AERO_RESIST2
OUTVAR      OUT_AIR_TEMP
OUTVAR      OUT_CATM
OUTVAR      OUT_DENSITY
OUTVAR      OUT_FCANOPY
OUTVAR      OUT_FDIR
OUTVAR      OUT_LAI
OUTVAR      OUT_LWDOWN
OUTVAR      OUT_PAR
OUTVAR      OUT_PRESSURE
OUTVAR      OUT_QAIR
OUTVAR      OUT_REL_HUMID
OUTVAR      OUT_SWDOWN
OUTVAR      OUT_SURF_COND
OUTVAR      OUT_VP
OUTVAR      OUT_VPD
OUTVAR      OUT_WIND
OUTVAR      OUT_APAR
OUTVAR      OUT_GPP
OUTVAR      OUT_RAUT
OUTVAR      OUT_NPP
OUTVAR      OUT_LITTERFALL
OUTVAR      OUT_RHET
OUTVAR      OUT_NEE
OUTVAR      OUT_CLITTER
OUTVAR      OUT_CINTER
OUTVAR      OUT_CSLOW
OUTVAR      OUT_ADV_SENS_BAND
OUTVAR      OUT_ADV_SENS
OUTVAR      OUT_ADVECTION_BAND
OUTVAR      OUT_ALBEDO_BAND
OUTVAR      OUT_DELTACC_BAND
OUTVAR      OUT_GRND_FLUX_BAND
OUTVAR      OUT_IN_LONG_BAND
OUTVAR      OUT_LATENT_BAND
OUTVAR      OUT_LATENT_SUB_BAND
OUTVAR      OUT_MELT_ENERGY_BAND
OUTVAR      OUT_LWNET_BAND
OUTVAR      OUT_SWNET_BAND
OUTVAR      OUT_RFRZ_ENERGY_BAND
OUTVAR      OUT_SENSIBLE_BAND
OUTVAR      OUT_SNOW_CANOPY_BAND
OUTVAR      OUT_SNOW_COVER_BAND
OUTVAR      OUT_SNOW_DEPTH_BAND
OUTVAR      OUT_SNOW_FLUX_BAND
OUTVAR      OUT_SNOW_MELT_BAND
OUTVAR      OUT_SNOW_PACKT_BAND
OUTVAR      OUT_SNOW_SURFT_BAND
OUTVAR      OUT_SWE_BAND
OUTVAR      OUT_TIME_VICRUN_WALL
OUTVAR      OUT_TIME_VICRUN_CPU

----------------------------------------

TITLE: Configuring VIC Model Simulation Parameters and Output Settings
DESCRIPTION: This configuration file defines all parameters needed to run the VIC hydrological model, including layer structure, time steps, simulation period, energy settings, input data sources, and output configurations. The file specifies forcing data formats, soil and vegetation parameters, and detailed output variable settings for snow and energy balance components.

LANGUAGE: configuration
CODE:
NLAYER      3
NODES       10
TIME_STEP   1
SNOW_STEP   1
STARTYEAR   2000
STARTMONTH  01
STARTDAY    01
STARTHOUR   00
ENDYEAR     2012
ENDMONTH    12
ENDDAY      31

FULL_ENERGY     TRUE
FROZEN_SOIL FALSE

FORCING1    $test_data_dir/inputdata/ec_flux_towers/forcing.merge.hourly/full_data_
FORCE_FORMAT    ASCII
N_TYPES     12
FORCE_TYPE  SKIP
FORCE_TYPE  SKIP
FORCE_TYPE  SKIP
FORCE_TYPE  SKIP
FORCE_TYPE  PREC       UNSIGNED 40
FORCE_TYPE  AIR_TEMP   SIGNED   100
FORCE_TYPE  SHORTWAVE  SIGNED   100
FORCE_TYPE  LONGWAVE   SIGNED   100
FORCE_TYPE  SKIP
FORCE_TYPE  PRESSURE   SIGNED   100
FORCE_TYPE  VP         SIGNED   100
FORCE_TYPE  WIND       SIGNED   100
FORCE_DT    1
FORCEYEAR   1980
FORCEMONTH  01
FORCEDAY    01
FORCEHOUR   00
GRID_DECIMAL    4

WIND_H          10.0

SOIL            $test_data_dir/inputdata/ec_flux_towers/params/soil_param.site_test.txt
BASEFLOW    ARNO
JULY_TAVG_SUPPLIED  FALSE
ORGANIC_FRACT   FALSE

VEGLIB          $test_data_dir/inputdata/ec_flux_towers/params/veg_lib_IGBP.fv
VEGLIB_VEGCOVER TRUE

VEGPARAM        $test_data_dir/inputdata/ec_flux_towers/params/veg_param.sites.IGBP.modis
ROOT_ZONES      3

VEGPARAM_LAI    TRUE
VEGPARAM_VEGCOVER TRUE
VEGPARAM_ALB    TRUE

LAI_SRC         FROM_VEGPARAM
VEGCOVER_SRC    FROM_VEGPARAM
# ALB_SRC      FROM_VEGPARAM
SNOW_BAND   1


RESULT_DIR      $result_dir
OUT_STEP        1
SKIPYEAR        0
COMPRESS        FALSE
BINARY_OUTPUT   FALSE
ALMA_OUTPUT     FALSE
MOISTFRACT      FALSE
PRT_HEADER      TRUE
PRT_SNOW_BAND   FALSE

N_OUTFILES  2

OUTFILE         snow 16
OUTVAR          OUT_SWE                 %.6g    *       *
OUTVAR          OUT_SNOW_DEPTH          %.6g    *       *
OUTVAR          OUT_SNOW_CANOPY         %.6g    *       *
OUTVAR          OUT_SNOW_COVER          %.6g    *       *
OUTVAR          OUT_ADVECTION           %.6g    *       *
OUTVAR          OUT_DELTACC             %.6g    *       *
OUTVAR          OUT_SNOW_FLUX           %.6g    *       *
OUTVAR          OUT_RFRZ_ENERGY         %.6g    *       *
OUTVAR          OUT_MELT_ENERGY         %.6g    *       *
OUTVAR          OUT_ADV_SENS            %.6g    *       *
OUTVAR          OUT_LATENT_SUB          %.6g    *       *
OUTVAR          OUT_SNOW_SURF_TEMP      %.6g    *       *
OUTVAR          OUT_SNOW_PACK_TEMP      %.6g    *       *
OUTVAR          OUT_SNOW_MELT           %.6g    *       *
OUTVAR          OUT_ALBEDO              %.6g    *       *
OUTVAR          OUT_SALBEDO             %.6g    *       *

OUTFILE         en_bal 12
OUTVAR          OUT_ADV_SENS            %.6g    *       *
OUTVAR          OUT_ADVECTION           %.6g    *       *
OUTVAR          OUT_DELTAH              %.6g    *       *
OUTVAR          OUT_GRND_FLUX           %.6g    *       *
OUTVAR          OUT_IN_LONG             %.6g    *       *
OUTVAR          OUT_LATENT              %.6g    *       *
OUTVAR          OUT_LATENT_SUB          %.6g    *       *
OUTVAR          OUT_R_NET               %.6g    *       *
OUTVAR          OUT_SENSIBLE            %.6g    *       *
OUTVAR          OUT_RAD_TEMP            %.6g    *       *
OUTVAR          OUT_NET_SHORT           %.6g    *       *
OUTVAR          OUT_NET_LONG           %.6g    *       *

----------------------------------------

TITLE: Configuring VIC Model Parameters for Stehekin Basin Simulation
DESCRIPTION: This configuration specifies all parameters needed to run the VIC hydrological model for the Stehekin basin. The simulation is set to run from January 1-10, 1949, with 24 time steps per day for model processes, snow, and runoff calculations. It includes paths to input forcing data, soil parameters, vegetation libraries, and snow band information.

LANGUAGE: plaintext
CODE:
NLAYER                3
NODES                 3
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             1949
STARTMONTH            01
STARTDAY              01
STARTSEC              00
ENDYEAR               1949
ENDMONTH              01
ENDDAY                10
FULL_ENERGY           FALSE
FROZEN_SOIL           FALSE
FORCING1              $test_data_dir/classic/Stehekin/forcings/full_data_
FORCE_FORMAT          ASCII
FORCE_TYPE            PREC
FORCE_TYPE            AIR_TEMP
FORCE_TYPE            SWDOWN
FORCE_TYPE            LWDOWN
FORCE_TYPE            SKIP
FORCE_TYPE            PRESSURE
FORCE_TYPE            VP
FORCE_TYPE            WIND
FORCE_STEPS_PER_DAY   24
FORCEYEAR             1949
FORCEMONTH            01
FORCEDAY              01
GRID_DECIMAL          4
WIND_H                10.0
SOIL                  $test_data_dir/classic/Stehekin/parameters/Stehekin_soil.txt
BASEFLOW              ARNO
JULY_TAVG_SUPPLIED    FALSE
ORGANIC_FRACT         FALSE
VEGLIB                $test_data_dir/classic/Stehekin/parameters/Stehekin_veglib.txt
VEGPARAM              $test_data_dir/classic/Stehekin/parameters/Stehekin_vegparam.txt
ROOT_ZONES            3
VEGPARAM_LAI          TRUE
LAI_SRC               FROM_VEGLIB
SNOW_BAND             5    $test_data_dir/classic/Stehekin/parameters/Stehekin_snowbands.txt
RESULT_DIR            $result_dir

----------------------------------------

TITLE: Configuring Forcing Files and Parameters in VIC Model
DESCRIPTION: Configuration options for forcing files in the VIC hydrologic model. Specifies the forcing file path/prefix and maps required input variables (temperature, precipitation, pressure, radiation, vapor pressure, wind) to variable names in the forcing files.

LANGUAGE: plaintext
CODE:
#######################################################################
# Forcing Files and Parameters
# netcdf forcing files will be of the form: <FORCING1>YYYY.nc
#######################################################################
FORCING1      forcings/Stehekin_image_test.forcings_10days.
FORCE_TYPE    AIR_TEMP -   tas    # Average air temperature, K
FORCE_TYPE    PREC -       prcp   # Total precipitation (rain and snow), kg/m2/s
FORCE_TYPE    PRESSURE -   pres   # Atmospheric pressure, Pa
FORCE_TYPE    SWDOWN       dswrf  # Incoming shortwave, W/m2
FORCE_TYPE    LWDOWN ---     dlwrf  # Incoming longwave radiation, W/m2
FORCE_TYPE    VP           vp   # Vapor pressure, kPa
FORCE_TYPE    WIND         wind   # Wind speed, m/s
# WIND_H        10.0                # height of wind speed measurement. NOTE: in image driver, this global parameter is only used for precipitation correction (if enabled); wind measurement height over bare soil is read from the parameter netCDF file.

----------------------------------------

TITLE: VIC Model Configuration Parameters
DESCRIPTION: Complete configuration file containing all default parameter values for the VIC hydrological model. Parameters are organized into functional categories including meteorological, surface properties, soil, vegetation, lake, photosynthesis, snow, and solver parameters. Each parameter is defined as a commented name-value pair.

LANGUAGE: configuration
CODE:
#######################################################################
# VIC Model Parameters
#######################################################################

# Lapse Rate
# LAPSE_RATE -0.0065

# Precipitation Guage Height
# GAUGE_HEIGHT 1.0

# Default Wind Speed
# WIND_SPEED_DEFAULT 3.0
# WIND_SPEED_MIN 0.1

# Huge Resistance Term
# HUGE_RESIST DBL_MAX

# Surface Albedo Parameters
# ALBEDO_BARE_SOIL 0.2
# ALBEDO_H20_SURF 0.08

# Surface Emissivities
# EMISS_GRND 0.97
# EMISS_VEG 0.97
# EMISS_ICE 0.97
# EMISS_SNOW 0.97
# EMISS_H2O 0.98

# Soil Constraints
# SOIL_RESID_MOIST 0.0
# SOIL_SLAB_MOIST_FRACT 1.0

# Vegetation Parameters
# VEG_LAI_SNOW_MULTIPLIER 0.0005
# VEG_MIN_INTERCEPTION_STORAGE 0.005
# VEG_LAI_WATER_FACTOR 0.1

# Canopy Parameters
# CANOPY_CLOSURE 4000.0
# CANOPY_RSMAX 5000.0
# CANOPY_VPDMINFACTOR 0.1

# Lake Parameters
# LAKE_TMELT 0.0
# LAKE_MAX_SURFACE 0.6
# LAKE_BETA 0.001
# LAKE_FRACMIN 0.10
# LAKE_FRACLIM 0.02
# LAKE_DM 1.38889E-07
# LAKE_SNOWCRIT 0.05
# LAKE_ZWATER 0.0045
# LAKE_ZSNOW 0.005
# LAKE_RHOSNOW 250
# LAKE_CONDI 2.3
# LAKE_CONDS 0.7
# LAKE_LAMISW 1.5
# LAKE_LAMILW 20.0
# LAKE_LAMSSW 6.0
# LAKE_LAMSLW 20.0
# LAKE_LAMWSW 0.3
# LAKE_LAMWLW 1.4
# LAKE_A1 0.7
# LAKE_A2 0.3
# LAKE_QWTAU 43200.0
# LAKE_MAX_ITER 50

# Saturation Vapor Pressure Parameters
# SVP_A 0.61078
# SVP_B 17.269
# SVP_C 237.3

# Carbon Parameters
# CARBON_CATMCURRENT 383
# CARBON_SW2PAR 0.45

# Photosynthesis Parameters
# PHOTO_OMEGA 0.12
# PHOTO_LAIMAX 8.0
# PHOTO_LAILIMIT 3.0
# PHOTO_LAIMIN 1.0e-9
# PHOTO_EPAR 2.2e5
# PHOTO_FCMAX 0.9
# PHOTO_FCMIN 1.0e-3
# PHOTO_ZENITHMIN 0.0174524
# PHOTO_ZENITHMINPAR 1.0e-3
# PHOTO_ALBSOIPARMIN 0.0
# PHOTO_MINMAXETRANS 1.0e-12
# PHOTO_MINSTOMCOND 0.0
# PHOTO_FCI1C3 0.87
# PHOTO_FCI1C4 0.67
# PHOTO_OX 0.21
# PHOTO_KC 460.0e-6
# PHOTO_KO 330.0e-3
# PHOTO_EC 59356.0
# PHOTO_EO 35948.0
# PHOTO_EV 58520.0
# PHOTO_ER 45000.0
# PHOTO_ALC3 0.28
# PHOTO_FRDC3 0.011
# PHOTO_EK 50967.0
# PHOTO_ALC4 0.04
# PHOTO_FRDC4 0.042
# PHOTO_THETA 0.83
# PHOTO_FRLEAF 0.4
# PHOTO_FRGROWTH 0.25

# Soil Respiration Parameters
# SRESP_E0_LT 308.56
# SRESP_T0_LT 227.13
# SRESP_WMINFM 0.0
# SRESP_WMAXFM 1.0
# SRESP_WOPTFM 0.5
# SRESP_RHSAT 0.15
# SRESP_RFACTOR 0.5
# SRESP_TAULITTER 2.86
# SRESP_TAUINTER 33.3
# SRESP_TAUSLOW 1000.0
# SRESP_FAIR 0.7
# SRESP_FINTER 0.985

# Snow Parameters
# SNOW_MAX_SURFACE_SWE 0.125
# SNOW_LIQUID_WATER_CAPACITY 0.035
# SNOW_NEW_SNOW_DENSITY 50.0
# SNOW_NEW_SNOW_DENS_MAX 400.0
# SNOW_DEPTH_THRES 1.e-8
# SNOW_DENS_DMLIMIT 100.0
# SNOW_DENS_MAX_CHANGE 0.9
# SNOW_DENS_ETA0 3.6e6
# SNOW_DENS_C1 0.04
# SNOW_DENS_C2 2.778e-6
# SNOW_DENS_C5 0.08
# SNOW_DENS_C6 0.021
# SNOW_DENS_F 0.6
# SNOW_MIN_SWQ_EB_THRES 0.0010
# SNOW_A1 0.7
# SNOW_A2 0.3
# SNOW_L1 6.0
# SNOW_L2 20.0
# SNOW_NEW_SNOW_ALB 0.85
# SNOW_ALB_ACCUM_A 0.94
# SNOW_ALB_ACCUM_B 0.58
# SNOW_ALB_THAW_A 0.82
# SNOW_ALB_THAW_B 0.46
# SNOW_TRACESNOW 0.03
# SNOW_CONDUCT 2.9302e-6
# SNOW_MAX_SNOW_TEMP 0.5
# SNOW_MIN_RAIN_TEMP -0.5

# Blowing Snow Parameters
# BLOWING_KA 0.0245187
# BLOWING_CSALT 0.68
# BLOWING_UTHRESH 0.25
# BLOWING_KIN_VIS 1.3e-5
# BLOWING_MAX_ITER 100
# BLOWING_K 5
# BLOWING_SETTLING 0.3
# BLOWING_NUMINCS 10

# Treeline temperature
# TREELINE_TEMPERATURE 10.0

# Iteration bracket widths
# SNOW_DT 5.0
# SURF_DT 1.0
# SOIL_DT 0.25
# CANOPY_DT 1.0
# CANOPY_VP 25.0

# Convergence Tolerances
# TOL_GRND 0.001
# TOL_OVER 0.001

# Frozen Soil Parameters
# FROZEN_MAXITER 1000

# Canopy Iterations
# MAX_ITER_GRND_CANOPY 10

# Newton-Raphson solver parameters
# NEWT_RAPH_MAXTRIAL 150
# NEWT_RAPH_TOLX 1.0e-4
# NEWT_RAPH_TOLF 1.0e-1
# NEWT_RAPH_R_MAX 2.0
# NEWT_RAPH_R_MIN -5.0
# NEWT_RAPH_RELAX1 0.9
# NEWT_RAPH_RELAX2 0.7
# NEWT_RAPH_RELAX3 0.2
# NEWT_RAPH_EPS2 1.0e-4

# Root-Brent parameters
# ROOT_BRENT_MAXTRIES 5
# ROOT_BRENT_MAXITER 1000
# ROOT_BRENT_TSTEP 10
# ROOT_BRENT_T 1.0e-7

----------------------------------------

TITLE: Configuring VIC Hydrological Model Parameters
DESCRIPTION: This configuration file sets up the VIC hydrological model with specific parameters for layer count, time steps, simulation period, energy balance options, input/output paths, and detailed output variable specifications. It includes settings for soil and vegetation parameters, forcing data format, and output formatting options.

LANGUAGE: config
CODE:
NLAYER      3
NODES       10
TIME_STEP   1
SNOW_STEP   1
STARTYEAR   2007
STARTMONTH  11
STARTDAY    01
STARTHOUR   00
ENDYEAR     2008
ENDMONTH    07
ENDDAY      31

FULL_ENERGY     TRUE
FROZEN_SOIL FALSE

QUICK_FLUX     FALSE

FORCING1    $test_data_dir/inputdata/snotel/forcings/snotel_VIC.4.1.2_forcings_
FORCE_FORMAT    ASCII
N_TYPES     7   # Number of variables (columns)
FORCE_TYPE  SHORTWAVE  UNSIGNED 40
FORCE_TYPE  LONGWAVE   UNSIGNED 40
FORCE_TYPE  AIR_TEMP   SIGNED       100
FORCE_TYPE  PRESSURE   UNSIGNED 40
FORCE_TYPE  PREC       UNSIGNED 40
FORCE_TYPE  VP         UNSIGNED 40
FORCE_TYPE  WIND       SIGNED   100
FORCE_DT    1
FORCEYEAR   2007
FORCEMONTH  11
FORCEDAY    01
FORCEHOUR   00
GRID_DECIMAL    4
# WIND_H          17.5  # WIND_H is not actually used in VIC4.2 (hardcoded)

SOIL            $test_data_dir/inputdata/snotel/parameters/Snotel_VIC.4.1.2_soil.txt
BASEFLOW    ARNO

JULY_TAVG_SUPPLIED  FALSE
ORGANIC_FRACT       FALSE
VEGLIB          $test_data_dir/inputdata/snotel/parameters/Snotel_VIC.4.1.2_veglib.txt
VEGPARAM        $test_data_dir/inputdata/snotel/parameters/Snotel_VIC.4.1.2_vegparam.txt
ROOT_ZONES      3

VEGPARAM_LAI    TRUE
LAI_SRC         FROM_VEGPARAM

SNOW_BAND   1

RESULT_DIR      $result_dir
OUT_STEP        24
SKIPYEAR        0
COMPRESS        FALSE
BINARY_OUTPUT   FALSE
ALMA_OUTPUT     FALSE
MOISTFRACT      FALSE
PRT_HEADER      TRUE
PRT_SNOW_BAND   FALSE


N_OUTFILES  1

OUTFILE         outfile 26
OUTVAR          OUT_SWE                 %.6g    *       *
OUTVAR          OUT_SNOW_DEPTH          %.6g    *       *
OUTVAR          OUT_SNOW_CANOPY         %.6g    *       *
OUTVAR          OUT_SNOW_COVER          %.6g    *       *
OUTVAR          OUT_ADVECTION           %.6g    *       *
OUTVAR          OUT_DELTACC             %.6g    *       *
OUTVAR          OUT_SNOW_FLUX           %.6g    *       *
OUTVAR          OUT_RFRZ_ENERGY         %.6g    *       *
OUTVAR          OUT_MELT_ENERGY         %.6g    *       *
OUTVAR          OUT_ADV_SENS            %.6g    *       *
OUTVAR          OUT_LATENT_SUB          %.6g    *       *
OUTVAR          OUT_SNOW_SURF_TEMP      %.6g    *       *
OUTVAR          OUT_SNOW_PACK_TEMP      %.6g    *       *
OUTVAR          OUT_SNOW_MELT           %.6g    *       *
OUTVAR          OUT_ALBEDO              %.6g    *       *
OUTVAR          OUT_SALBEDO             %.6g    *       *
OUTVAR          OUT_ADV_SENS            %.6g    *       *
OUTVAR          OUT_ADVECTION           %.6g    *       *
OUTVAR          OUT_DELTAH              %.6g    *       *
OUTVAR          OUT_GRND_FLUX           %.6g    *       *
OUTVAR          OUT_IN_LONG             %.6g    *       *
OUTVAR          OUT_LATENT              %.6g    *       *
OUTVAR          OUT_LATENT_SUB          %.6g    *       *
OUTVAR          OUT_R_NET               %.6g    *       *
OUTVAR          OUT_SENSIBLE            %.6g    *       *
OUTVAR          OUT_RAD_TEMP            %.6g    *       *

----------------------------------------

TITLE: Configuring Snow Parameters for VIC Hydrological Model
DESCRIPTION: These parameters define physical properties of snow for the VIC model, including surface layer characteristics, new snow density, metamorphism limits, and density computation constants. They control how the snowpack evolves over time in response to environmental conditions.

LANGUAGE: plaintext
CODE:
# Snow Parameters

# maximum depth of the surface layer in water equivalent (m) [default 0.125]
SNOW_MAX_SURFACE_SWE 0.125

# density of new fallen snow [50]
SNOW_NEW_SNOW_DENSITY 50.0

# Density limit used in calculation of destructive metamorphism
SNOW_DENS_DMLIMIT 100.0  # (kg/m^3)

SNOW_DENS_MAX_CHANGE 0.9

# Constants in snow density computation
SNOW_DENS_ETA0 3.6e6  # viscosity of snow at T=0C and density = 0
                        # used in calculation of true viscosity (Ns/m2)
SNOW_DENS_C1 0.04
SNOW_DENS_C2 2.778e-6
SNOW_DENS_C5 0.08  # constant used in snow viscosity calculation, taken from
                     # SNTHRM.89 (/C)
SNOW_DENS_C6 0.021  # constant used in snow viscosity calculation, taken from
                      # SNTHRM.89 (kg/m3)
SNOW_DENS_F 0.6  # internal compaction rate coefficient

# Minimum SWQ for which the snowpack energy balance is computed independent of
# the soil surface temperature
SNOW_MIN_SWQ_EB_THRES 0.0010

# Attenuation coefficients for shortwave in a snowpack.  Values and equation
# taken from Patterson and Hamblin, 1988
SNOW_A1 0.7
SNOW_A2 0.3
SNOW_L1 6.0  # (1/m)
SNOW_L2 20.0  # (1/m)

# Snow albedo curve parameters.  Defaults are from Bras p263. Should not be
# changed except for serious problems with snow melt
SNOW_NEW_SNOW_ALB 0.85
SNOW_ALB_ACCUM_A 0.94
SNOW_ALB_ACCUM_B 0.58
SNOW_ALB_THAW_A 0.82
SNOW_ALB_THAW_B 0.46

# Defines the minimum amount of new snow (mm) which will reset the snowpack
# albedo to new snow
SNOW_TRACESNOW 0.03

----------------------------------------

TITLE: Configuring VIC Model Soil and Vegetation Parameters
DESCRIPTION: Defines the soil and vegetation parameters for the model, including file locations, baseflow configuration, vegetation library parameters, and snow band information.

LANGUAGE: plaintext
CODE:
SOIL                $test_data_dir/classic/Stehekin/parameters/Stehekin_soil.txt
BASEFLOW            ARNO
JULY_TAVG_SUPPLIED  FALSE
ORGANIC_FRACT       FALSE
VEGLIB              $test_data_dir/classic/Stehekin/parameters/Stehekin_veglib.txt
VEGPARAM            $test_data_dir/classic/Stehekin/parameters/Stehekin_vegparam.txt
ROOT_ZONES          3
VEGPARAM_LAI        TRUE
LAI_SRC             FROM_VEGPARAM
SNOW_BAND           5  $test_data_dir/classic/Stehekin/parameters/Stehekin_snowbands.txt

----------------------------------------

TITLE: Configuring VIC Hydrological Model Parameters
DESCRIPTION: Complete configuration file for the VIC hydrological model. It specifies model structure, simulation period, physics options, input data locations, and output settings for a Stehekin watershed simulation.

LANGUAGE: plaintext
CODE:
NLAYER                3
NODES                 3
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             1949
STARTMONTH            01
STARTDAY              01
STARTSEC              00
ENDYEAR               1949
ENDMONTH              01
ENDDAY                10
FULL_ENERGY           TRUE
FROZEN_SOIL           FALSE
FORCING1              $test_data_dir/classic/Stehekin/forcings/full_data_
FORCE_FORMAT          ASCII
FORCE_TYPE            PREC
FORCE_TYPE            AIR_TEMP
FORCE_TYPE            SWDOWN
FORCE_TYPE            LWDOWN
FORCE_TYPE            SKIP
FORCE_TYPE            PRESSURE
FORCE_TYPE            VP
FORCE_TYPE            WIND
FORCE_STEPS_PER_DAY   24
FORCEYEAR             1949
FORCEMONTH            01
FORCEDAY              01
GRID_DECIMAL          4
WIND_H                10.0
SOIL                  $test_data_dir/classic/Stehekin/parameters/Stehekin_soil.txt
BASEFLOW              ARNO
JULY_TAVG_SUPPLIED    FALSE
ORGANIC_FRACT         FALSE
VEGLIB                $test_data_dir/classic/Stehekin/parameters/Stehekin_veglib.txt
VEGPARAM              $test_data_dir/classic/Stehekin/parameters/Stehekin_vegparam.txt
ROOT_ZONES            3
VEGPARAM_LAI          TRUE
LAI_SRC               FROM_VEGLIB
SNOW_BAND             5    $test_data_dir/classic/Stehekin/parameters/Stehekin_snowbands.txt
RESULT_DIR            $result_dir

----------------------------------------

TITLE: Configuring Precipitation Parameters in VIC Model
DESCRIPTION: Configuration options for precipitation (rain and snow) in the VIC hydrologic model. Shows commented default values for snow density algorithm, blowing snow calculation, treeline computation, and spatial snow distribution.

LANGUAGE: plaintext
CODE:
#######################################################################
# Precip (Rain and Snow) Parameters
# Generally these default values do not need to be overridden
#######################################################################
#SNOW_DENSITY   DENS_BRAS   # DENS_BRAS = use traditional VIC algorithm taken from Bras, 1990; DENS_SNTHRM = use algorithm taken from SNTHRM model.
#BLOWING        FALSE   # TRUE = compute evaporative fluxes due to blowing snow
#COMPUTE_TREELINE   FALSE   # Can be either FALSE or the id number of an understory veg class; FALSE = turn treeline computation off; VEG_CLASS_ID = replace any overstory veg types with the this understory veg type in all snow bands for which the average July Temperature <= 10 C (e.g. "COMPUTE_TREELINE 10" replaces any overstory veg cover with class 10)
#CORRPREC   FALSE   # TRUE = correct precipitation for gauge undercatch
#SPATIAL_SNOW   FALSE   # TRUE = use a uniform distribution to simulate the partial coverage of the
                        # surface by a thin snowpack.  Coverage is assumed to be uniform after snowfall
                        # until the pack begins to melt.  If TRUE, VIC will expect an additional column
                        # in the soil paramter file containing the snow distibution slope parameter
                        # (= 2 * snow depth below which coverage < 1).

----------------------------------------

TITLE: Example VIC Vegetation Library File Format
DESCRIPTION: This snippet shows an example of the vegetation library file format used in the VIC model. It defines two vegetation classes (corn field and soy field) with their respective parameters like overstory flag, architectural resistance, minimum stomatal resistance, monthly LAI values, albedo, roughness length, displacement height, and other vegetation characteristics.

LANGUAGE: plaintext
CODE:
#Class  OvrStry Rarc    Rmin    JAN-LAI FEB-LAI MAR-LAI APR-LAI MAY-LAI JUN-LAI JUL-LAI AUG-LAI SEP-LAI OCT-LAI NOV-LAI DEC-LAI JAN-ALB FEB_ALB MAR-ALB APR-ALB MAY-ALB JUN-ALB JUL-ALB AUG-ALB SEP-ALB OCT-ALB NOV-ALB DEC-ALB JAN-ROU FEB-ROU MAR-ROU APR-ROU MAY-ROU JUN-ROU JUL-ROU AUG-ROU SEP-ROU OCT-ROU NOV-ROU DEC-ROU JAN-DIS FEB-DIS MAR-DIS APR-DIS MAY-DIS JUN-DIS JUL-DIS AUG-DIS SEP-DIS OCT-DIS NOV-DIS DEC-DIS WIND_H  RGL     rad_atten    wind_atten  trunk_ratio   COMMENT
2   0   25.0    220.    0.000   0.000   0.000   0.000   1.000   2.500   4.000   4.500   0.500   0.000   0.000   0.000   0.10    0.10    0.10    0.10    0.20    0.20    0.20    0.20    0.20    0.10    0.10    0.10    0   0   0   0   0.0615  0.123   0.246   0.3075  0.3075  0   0   0   0   0   0   0   0.335   0.67    1.34    1.675   1.675   0   0   0   2.0 100 0.5      0.5     0.2           Corn Field
3   0   25.0    220.    0.000   0.000   0.000   0.000   1.000   3.000   5.000   6.000   3.000   0.000   0.000   0.000   0.10    0.10    0.10    0.10    0.20    0.20    0.20    0.20    0.20    0.10    0.10    0.10    0   0   0   0   0.03075 0.0615  0.09225 0.09225 0.09225 0   0   0   0   0   0   0   0.1675  0.335   0.5025  0.5025  0.5025  0   0   0   2.  100 0.5      0.5     0.2           Soy Field

----------------------------------------

TITLE: Configuring ASCII Forcing File in VIC Model
DESCRIPTION: Configuration example for a standard four-column daily ASCII forcing data file in the VIC model. It defines the file path, format, data types for each column, temporal resolution, start date, precision, and measurement specifications.

LANGUAGE: plaintext
CODE:
FORCING1             forcings/full_data_
FORCE_FORMAT         ASCII
FORCE_TYPE           PREC
FORCE_TYPE           AIR_TEMP
FORCE_TYPE           SWDOWN
FORCE_TYPE           LWDOWN
FORCE_TYPE           SKIP  # This column is air density, which is not needed by VIC
FORCE_TYPE           PRESSURE
FORCE_TYPE           VP
FORCE_TYPE           WIND
FORCE_STEPS_PER_DAY  24    # Forcing time step length (hours)
FORCEYEAR            1949  # Year of first forcing record
FORCEMONTH           01    # Month of first forcing record
FORCEDAY             01    # Day of first forcing record
GRID_DECIMAL         4     # Number of digits after decimal point in forcing file names
WIND_H               10.0  # height of wind speed measurement (m)

----------------------------------------

TITLE: Configuring VIC Model Temporal and Simulation Parameters
DESCRIPTION: Defines the temporal resolution, simulation period, and key model behavior flags for the VIC hydrological model. Specifies a 10-day simulation in January 1949 with full energy balance calculations.

LANGUAGE: config
CODE:
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY	  24
RUNOFF_STEPS_PER_DAY  24

STARTYEAR	1949
STARTMONTH	1
STARTDAY	1
ENDYEAR 	1949
ENDMONTH	1
ENDDAY		10
CALENDAR    PROLEPTIC_GREGORIAN

FULL_ENERGY TRUE
FROZEN_SOIL	FALSE

----------------------------------------

TITLE: Configuring Physical Soil and Snow Parameters in VIC Model
DESCRIPTION: Sets physical constraints for soil moisture content and snow/vegetation water capacity parameters. Includes residual moisture content, water holding capacities, and interception storage parameters for vegetation and snow.

LANGUAGE: conf
CODE:
# Physical Constraints
SOIL_RESID_MOIST 0.0  # define residual moisture content of soil column
SOIL_SLAB_MOIST_FRACT 1.0  # Volumetric moisture content (fraction of porosity)
                           # in the soil/rock below the bottom soil layer; this
                           # assumes that the soil below the bottom layer has
                           # the same texture as the bottom layer.

# water holding capacity of snow as a fraction of snow-water-equivalent
VEG_LIQUID_WATER_CAPACITY 0.035

# multiplier to calculate the amount of available snow interception as a
#function of LAI (m)
VEG_LAI_SNOW_MULTIPLIER 0.0005

# the amount of snow on the canopy that can only be melted off. (m)
VEG_MIN_INTERCEPTION_STORAGE 0.005

# Coefficient multiplied by the LAI to determine the amount of water that can
# be stored in the canopy
VEG_LAI_WATER_FACTOR 0.1

----------------------------------------

TITLE: Configuring Carbon Cycle Parameters in VIC Model
DESCRIPTION: Configuration options for the carbon cycle in the VIC hydrologic model. Settings include whether to simulate the carbon cycle, whether photosynthesis parameters are included in the vegetation library file, and the canopy resistance calculation method.

LANGUAGE: plaintext
CODE:
#######################################################################
# Carbon Cycle Parameters
#######################################################################
#CARBON         FALSE       # TRUE = simulate carbon cycle; FALSE = do not simulate carbon cycle.  Default = FALSE.
#VEGLIB_PHOTO   FALSE       # TRUE = photosynthesis parameters are included in the veg library file.  Default = FALSE.
#RC_MODE    RC_JARVIS   # RC_JARVIS = canopy resistance computed by applying resistance factors to the veg class's minimum resistance, listed in the veg library
                            # RC_PHOTO = canopy resistance computed by applying resistance factors to the minimum resistance required by current photosynthetic demand.  Default = RC_JARVIS.

----------------------------------------

TITLE: VIC Model Configuration Settings for Stehekin Basin Simulation
DESCRIPTION: A complete configuration file for the VIC hydrological model specifying model structure, time parameters, input/output paths, and simulation options. This configuration is set up for a Stehekin basin simulation with 3 soil layers, 24 steps per day, and runs for 10 days starting from January 1, 1949.

LANGUAGE: config
CODE:
NLAYER                3
NODES                 3
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             1949
STARTMONTH            01
STARTDAY              01
STARTSEC              00
ENDYEAR               1949
ENDMONTH              01
ENDDAY                10
FULL_ENERGY           FALSE
FROZEN_SOIL           FALSE
STATENAME             $state_dir/STEHE.state
STATEYEAR             1949
STATEMONTH            01
STATEDAY              10
STATE_FORMAT          ASCII
FORCING1              $test_data_dir/classic/Stehekin/forcings/full_data_
FORCE_FORMAT          ASCII
FORCE_TYPE            PREC
FORCE_TYPE            AIR_TEMP
FORCE_TYPE            SWDOWN
FORCE_TYPE            LWDOWN
FORCE_TYPE            SKIP
FORCE_TYPE            PRESSURE
FORCE_TYPE            VP
FORCE_TYPE            WIND
FORCE_STEPS_PER_DAY   24
FORCEYEAR             1949
FORCEMONTH            01
FORCEDAY              01
GRID_DECIMAL          4
WIND_H                10.0
SOIL                  $test_data_dir/classic/Stehekin/parameters/Stehekin_soil.txt
BASEFLOW              ARNO
JULY_TAVG_SUPPLIED    FALSE
ORGANIC_FRACT         FALSE
VEGLIB                $test_data_dir/classic/Stehekin/parameters/Stehekin_veglib.txt
VEGPARAM              $test_data_dir/classic/Stehekin/parameters/Stehekin_vegparam.txt
ROOT_ZONES            3
VEGPARAM_LAI          TRUE
LAI_SRC               FROM_VEGLIB
SNOW_BAND             5    $test_data_dir/classic/Stehekin/parameters/Stehekin_snowbands.txt
RESULT_DIR            $result_dir

----------------------------------------

TITLE: Setting VIC Model Parameters and Options
DESCRIPTION: Specifies the model parameters file and configuration options for various physical processes. The settings define how the model handles baseflow, vegetation parameters, snow bands, and other physical processes.

LANGUAGE: config
CODE:
PARAMETERS          $test_data_dir/image/Stehekin/parameters/Stehekin_test_params_20160327.nc
BASEFLOW            ARNO
JULY_TAVG_SUPPLIED  FALSE
ORGANIC_FRACT       FALSE
LAI_SRC             FROM_VEGPARAM
SNOW_BAND	          TRUE

----------------------------------------

TITLE: Configuring VIC Model Output File Contents Documentation
DESCRIPTION: Detailed documentation explaining the format for configuring output files, including file prefixes, aggregation frequencies, compression options, and variable specifications. This section provides the syntax for customizing model outputs.

LANGUAGE: bash
CODE:
# Output File Contents
#
# You can specify your output file names and contents in the global param file
# (see the VIC documentation for more information).
#
# If you do not specify file names and contents in the global param
# file, VIC will produce the same set of output files that it has
# produced in earlier versions, namely "fluxes" and "snow" files, plus
# "fdepth" files if FROZEN_SOIL is TRUE and "snowband" files if
# snowbands are specified.  These files will have the same contents and
# format as in earlier versions.
#
# Format:
#
#   OUTFILE       <prefix>
#   AGGFREQ       <freq>            <value>
#   COMPRESS      <compress>
#   OUT_FORMAT    <file_format>
#   OUTVAR        <varname>       [ <format>       [ <type>  [ <multiplier>   [ <aggtype>]]]]
#   OUTVAR        <varname>       [ <format>       [ <type>  [ <multiplier>   [ <aggtype>]]]]
#   OUTVAR        <varname>       [ <format>       [ <type>  [ <multiplier>   [ <aggtype>]]]]
#
#   OUTFILE       <prefix>
#   OUTVAR        <varname>       [ <format>       [ <type>  [ <multiplier>   [ <aggtype>]]]]
#   OUTVAR        <varname>       [ <format>       [ <type>  [ <multiplier>   [ <aggtype>]]]]
#   OUTVAR        <varname>       [ <format>       [ <type>  [ <multiplier>   [ <aggtype>]]]]
#
#
# where
#   <prefix>     = name of the output file, NOT including latitude
#                  and longitude
#   <freq>       = Describes aggregation frequency for output stream. Valid
#                  options for frequency are:
#                    NEVER     = never write to history file
#                    NSTEPS    = write to history every <value> steps
#                    NSECONDS  = write to history every <value> seconds
#                    NMINUTES  = write to history every <value> minutes
#                    NHOURS    = write to history every <value> hours
#                    NDAYS     = write to history every <value> days
#                    NMONTHS   = write to history every <value> months
#                    NYEARS    = write to history every <value> years
#                    DATE      = write to history on the date: <value>
#                    END       = write to history at the end of the simulation
#   <value>      = integer or date string (YYYY-MM-DD) describing the number
#                  of <freq> intervals to pass before writing to the history file.
#   <compress>   = gzip compression option.  TRUE, FALSE, or integer between 1-9.
#   <varname>    = name of the variable (this must be one of the
#                  output variable names listed in vic_driver_shared_all.h.)
#   <format>     = (for ascii output files) fprintf format string,
#                  e.g.
#                    %.4f = floating point with 4 decimal places
#                    %.7e = scientific notation w/ 7 decimal places
#                    *    = use the default format for this variable
#
#   <format>, <type>, and <multiplier> are optional.  For a given
#   variable, you can specify either NONE of these, or ALL of
#   these.  If these are omitted, the default values will be used.
#
#   <type>       = (for binary output files) data type code.
#                  Must be one of:
#                    OUT_TYPE_DOUBLE = double-precision floating point
#                    OUT_TYPE_FLOAT  = single-precision floating point
#                    OUT_TYPE_INT    = integer
#                    OUT_TYPE_USINT  = unsigned short integer
#                    OUT_TYPE_SINT   = short integer
#                    OUT_TYPE_CHAR   = char
#                    *               = use the default type
#   <multiplier> = (for binary output files) factor to multiply
#                  the data by before writing, to increase precision.
#                    *    = use the default multiplier for this variable
#   <aggtype>    = Aggregation method to use for temporal aggregation. Valid
#                  options for aggtype are:
#                    AGG_TYPE_DEFAULT = default aggregation type for variable
#                    AGG_TYPE_AVG     = average over aggregation window
#                    AGG_TYPE_BEG     = beginning of aggregation window
#                    AGG_TYPE_END     = end of aggregation window
#                    AGG_TYPE_MAX     = maximum in aggregation window
#                    AGG_TYPE_MIN     = minimum in aggregation window

----------------------------------------

TITLE: Configuring VIC Model Forcing Data
DESCRIPTION: Defines forcing data inputs for the model, mapping meteorological variables to input file variables and specifying data sources. Includes temperature, precipitation, pressure, radiation, vapor pressure and wind data.

LANGUAGE: config
CODE:
FORCING1	  $test_data_dir/image/Stehekin/forcings/Stehekin_image_test.forcings_10days.
FORCE_TYPE    AIR_TEMP 	   tas
FORCE_TYPE    PREC 	       prcp
FORCE_TYPE    PRESSURE 	   pres
FORCE_TYPE    SWDOWN       dswrf
FORCE_TYPE    LWDOWN 	     dlwrf
FORCE_TYPE    VP           vp
FORCE_TYPE    WIND         wind
WIND_H        10.0

----------------------------------------

TITLE: Configuring VIC Model Core Parameters
DESCRIPTION: Sets basic simulation parameters including the number of nodes, temporal resolution, simulation period, and core model options. The configuration specifies a 10-day simulation in January 1949 with multiple calculation steps per day.

LANGUAGE: config
CODE:
NODES                 3
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             1949
STARTMONTH            1
STARTDAY              1
ENDYEAR               1949
ENDMONTH              1
ENDDAY                10
CALENDAR              PROLEPTIC_GREGORIAN
FULL_ENERGY           FALSE
FROZEN_SOIL           FALSE

----------------------------------------

TITLE: Setting VIC Simulation Parameters
DESCRIPTION: Defines the basic simulation parameters for the VIC model including layer configuration, timestep settings, and simulation time period. These parameters control the fundamental structure of the model run.

LANGUAGE: properties
CODE:
NLAYER      3   # number of soil layers
NODES       10  # number of soil thermal nodes
MODEL_STEPS_PER_DAY  24   # number of model time steps per day (set to 1 if FULL_ENERGY = FALSE, set to > 4 if FULL_ENERGY = TRUE)
SNOW_STEPS_PER_DAY  24   # number of time steps per day for which to solve the snow model (should = MODEL_STEPS_PER_DAY if MODEL_STEPS_PER_DAY > 1)
RUNOFF_STEPS_PER_DAY  24   # number of time steps per day for which to solve the runoff model (should be >= MODEL_STEPS_PER_DAY)
STARTYEAR   2000    # year model simulation starts
STARTMONTH  01  # month model simulation starts
STARTDAY    01  # day model simulation starts
ENDYEAR     2000    # year model simulation ends
ENDMONTH    12  # month model simulation ends
ENDDAY      31  # day model simulation ends

----------------------------------------

TITLE: Gridding VIC Parameters
DESCRIPTION: This snippet grids soil, vegetation, and snow parameters using Tonic's grid_params function for the VIC model. It takes input dictionaries and a target grid, then produces a unified grid dictionary with all parameters.

LANGUAGE: python
CODE:
# Grid all the parameters
grid_dict = gp.grid_params(soil_dict, target_grid, version_in='4', 
                           vegparam_lai=vegparam_lai, lai_src=lai_src,
                           lib_bare_idx=lib_bare_idx, 
                           veg_dict=veg_dict, veglib_dict=veg_lib, 
                           snow_dict=snow_dict, lake_dict=None)

----------------------------------------

TITLE: Configuring VIC Model Output Settings
DESCRIPTION: Defines output directory, file names, output frequency, and the list of output variables to be saved. Specifies hourly output of meteorological, hydrological, and energy balance variables.

LANGUAGE: config
CODE:
RESULT_DIR  $result_dir/

OUTFILE     fluxes
AGGFREQ     NHOURS   1
OUTVAR      OUT_PREC
OUTVAR      OUT_RAINF
OUTVAR      OUT_SNOWF
OUTVAR      OUT_AIR_TEMP
OUTVAR      OUT_SWDOWN
OUTVAR      OUT_LWDOWN
OUTVAR      OUT_PRESSURE
OUTVAR      OUT_WIND
OUTVAR      OUT_DENSITY
OUTVAR      OUT_REL_HUMID
OUTVAR      OUT_QAIR
OUTVAR      OUT_VP
OUTVAR      OUT_VPD
OUTVAR      OUT_RUNOFF
OUTVAR      OUT_BASEFLOW
OUTVAR      OUT_EVAP
OUTVAR      OUT_SWE
OUTVAR      OUT_SOIL_MOIST
OUTVAR      OUT_ALBEDO
OUTVAR      OUT_SOIL_TEMP
OUTVAR      OUT_DISCHARGE

----------------------------------------

TITLE: Configuring VIC Energy Balance Parameters
DESCRIPTION: Specifies settings for the energy balance calculations in the VIC model. The primary parameter FULL_ENERGY determines whether the model will run water balance only or include full energy balance calculations.

LANGUAGE: properties
CODE:
FULL_ENERGY     FALSE   # TRUE = calculate full energy balance; FALSE = compute water balance only.  Default = FALSE.
#CLOSE_ENERGY   FALSE   # TRUE = all energy balance calculations (canopy air, canopy snow, ground snow,
                        # and ground surface) are iterated to minimize the total column error.  Default = FALSE.

----------------------------------------

TITLE: Configuring VIC Model Energy and Soil Settings
DESCRIPTION: Specifies energy balance and soil freeze/thaw settings for the model simulation, with full energy balance enabled and frozen soil calculations disabled. Also defines the aerodynamic resistance algorithm.

LANGUAGE: config
CODE:
FULL_ENERGY TRUE
FROZEN_SOIL	FALSE

AERO_RESIST_CANSNOW AR_406

----------------------------------------

TITLE: Defining Output File Settings
DESCRIPTION: Configures the output directory, files, and variables to be saved. The configuration specifies hourly output frequency and a comprehensive list of variables to output including meteorological inputs and hydrological outputs like discharge.

LANGUAGE: config
CODE:
RESULT_DIR              $result_dir

OUTFILE     fluxes
AGGFREQ     NHOURS   1
OUTVAR      OUT_PREC
OUTVAR      OUT_RAINF
OUTVAR      OUT_SNOWF
OUTVAR      OUT_AIR_TEMP
OUTVAR      OUT_SWDOWN
OUTVAR      OUT_LWDOWN
OUTVAR      OUT_PRESSURE
OUTVAR      OUT_WIND
OUTVAR      OUT_DENSITY
OUTVAR      OUT_REL_HUMID
OUTVAR      OUT_QAIR
OUTVAR      OUT_VP
OUTVAR      OUT_VPD
OUTVAR      OUT_RUNOFF
OUTVAR      OUT_BASEFLOW
OUTVAR      OUT_EVAP
OUTVAR      OUT_SWE
OUTVAR      OUT_SOIL_MOIST
OUTVAR      OUT_ALBEDO
OUTVAR      OUT_SOIL_TEMP
OUTVAR      OUT_DISCHARGE

----------------------------------------

TITLE: Configuring State Files and Parameters in VIC Model
DESCRIPTION: Configuration options for state files in the VIC hydrologic model. Shows commented options for initial state file, output state file path/prefix, date and time to save model state, and state file format.

LANGUAGE: plaintext
CODE:
#######################################################################
# State Files and Parameters
#######################################################################
#INIT_STATE  # Initial state path/file
#STATENAME output/image/Stehekin/states  # Output state file path/prefix. The time (STATEYEAR,STATEMONTH,STATEDAY,STATESEC) will be appended to the prefix automatically in the format yyyymmdd.
#STATEYEAR   1949    # year to save model state
#STATEMONTH  1  # month to save model state
#STATEDAY    10  # day to save model state
#STATESEC    82800  # second to save model state
#STATE_FORMAT           NETCDF4_CLASSIC  # State file format, valid options:
#NETCDF3_CLASSIC, NETCDF3_64BIT_OFFSET, NETCDF4_CLASSIC, NETCDF4

----------------------------------------

TITLE: Configuring VIC Model Output Files and Directories
DESCRIPTION: Basic configuration for output and log directories. Users need to specify paths where log files and model output results will be stored.

LANGUAGE: bash
CODE:
LOG_DIR         (put the log directory path here)       # Log directory path
RESULT_DIR      (put the result directory path here)    # Results directory path

----------------------------------------

TITLE: Configuring Meteorological Forcing Data
DESCRIPTION: Defines the input meteorological forcing data files and maps variable names. The configuration specifies paths to forcing files for the Stehekin test case and maps required variables like temperature, precipitation, pressure, and radiation.

LANGUAGE: config
CODE:
FORCING1      $test_data_dir/image/Stehekin/forcings/Stehekin_image_test.forcings_10days.
FORCE_TYPE    AIR_TEMP      tas
FORCE_TYPE    PREC          prcp
FORCE_TYPE    PRESSURE      pres
FORCE_TYPE    SWDOWN        dswrf
FORCE_TYPE    LWDOWN        dlwrf
FORCE_TYPE    VP            vp
FORCE_TYPE    WIND          wind
WIND_H        10.0

----------------------------------------

TITLE: Example of informative output file prefix
DESCRIPTION: Illustrates a recommended naming convention for VIC output files that includes version, forcing data, timestep, and configuration information for better organization and identification.

LANGUAGE: markdown
CODE:
`vic_5.0.0_erai_3h_fullengy_snow`

----------------------------------------

TITLE: Defining Photosynthesis Parameters in VIC Model
DESCRIPTION: Configures detailed photosynthesis parameters for both C3 and C4 plants, including quantum efficiency, activation energies, respiration ratios and leaf properties affecting carbon assimilation.

LANGUAGE: namelist
CODE:
# Photosynthesis Parameters
PHOTO_OMEGA 0.12  # single leaf scattering albedo
PHOTO_LAIMAX 8.0  # Maximum LAI in nitrogen scaling
PHOTO_LAILIMIT 3.0  # Minimum LAI in nitrogen scaling and maximum LAI in PAR
                    # computation
PHOTO_LAIMIN 1.0e-9  # Minimum LAI in PAR computation
PHOTO_EPAR 2.2e5  # Energy content of PAR [J/mol photons]
                    # = (4.6 mol/MJ PAR)^-1
PHOTO_FCMAX 0.9  # Maximum fractional veg cover
                   # (1-FcMax) = min amount of ground visible
PHOTO_FCMIN 1.0e-3  # Minimum fractional veg cover
                      # (1-FcMin) = max amount of ground visible
PHOTO_ZENITHMIN 0.0174524  # Check for solar zenith angle > 89 deg
PHOTO_ZENITHMINPAR 1.0e-3  # Cosine of the minimum solar zenith angle for
                            # photosynthesis to take place
PHOTO_ALBSOIPARMIN 0.0  # Minimum soil reflectivity in PAR range
PHOTO_MINMAXETRANS 1e-12  # Minimum of maximum electron transport rate
                          # [10e-12 mol/(m^2 s)]
PHOTO_MINSTOMCOND 0.0  # Minimum stomatal conductance [mol H2O/m2s]

# Factors that relate leaf internal CO2 concentration to ambient CO2
# concentration
PHOTO_FCI1C3 0.87  # C3 Plants
PHOTO_FCI1C4 0.67  # C4 Plants

# C3 PLANTS: FARQUHAR, G.D., S. VON CAEMMERER AND J.A. BERRY, 1980. A
# BIOCHEMICAL MODEL OF PHOTOYNTHESIS IN LEAVES OF C3 SPECIES. PLANTA 149,
# 78-90.
PHOTO_OX 0.21  # OXYGEN CONCENTRATION [MOL(O2) / MOL(AIR)]
PHOTO_KC0 460.0e-6  # MICHAELIS-MENTEN CONSTANT FOR CO2 AT 25C
                   #  [MOL(CO2) / MOL(AIR)]
PHOTO_KO0 330.0e-3  # MICHAELIS-MENTEN CONSTANT FOR O2 AT 25C
                   # [MOL(O2) / MOL(AIR)]
PHOTO_EC 59356.0  # ACTIVATION ENERGY FOR KC [J / MOL]
PHOTO_EO 35948.0  # ACTIVATION ENERGY FOR KO [J / MOL]
PHOTO_EV 58520.0  # ACTIVATION ENERGY FOR VCMAX [J / MOL]
PHOTO_ER 45000.0  # ACTIVATION ENERGY FOR DARK RESPIRATION [J / MOL]
PHOTO_ALC3 0.28    # EFFICIENCY OF OF PHOTON CAPTURE
PHOTO_FRDC3 0.011  # RATIO OF DARK RESPIRATION TO "PVM" AT 25C for C3

# C4 PLANTS: COLLATZ, G.J., M. RIBAS-CARBO AND J.A. BERRY, 1992.  COUPLED
# PHOTOSYNTHESIS-STOMATAL CONDUCTANCE MODEL FOR LEAVES OF C4 PLANTS. AUST. J.
# PLANT PHYSIOL. 19, 519-538.
PHOTO_EK 50967.0  # Q10=2 (Collatz et al. 1992)
PHOTO_ALC4 0.04  # EFFECTIVE QUANTUM EFFICIENCY
PHOTO_FRDC4 0.042  # RATIO OF DARK RESPIRATION TO "PVM" AT 25C for C4
PHOTO_THETA 0.83  # CURVATURE PARAMETER

# Plant Maintenance and Growth Respiration Parameters
PHOTO_FRLEAF 0.4  # Ratio of canopy leaf respiration to whole plant
                  # maintenance respiration
PHOTO_FRGROWTH 0.25  # Ratio of plant growth respiration to NPP

----------------------------------------

TITLE: Configuring Output File Specifications in VIC Model
DESCRIPTION: Comprehensive documentation block explaining how to specify output file contents, format, and frequency. Includes detailed parameter definitions and examples of the configuration syntax.

LANGUAGE: bash
CODE:
#######################################################################
#
# Output File Contents
#
# You can specify your output file names and contents in the global param file
# (see the VIC documentation for more information).
#
# If you do not specify file names and contents in the global param
# file, VIC will produce the same set of output files that it has
# produced in earlier versions, namely "fluxes" and "snow" files, plus
# "fdepth" files if FROZEN_SOIL is TRUE and "snowband" files if
# snowbands are specified.  These files will have the same contents and
# format as in earlier versions.
#
# Format:
#
# Output File Contents
# OUTFILE _prefix_
# OUTFREQ         _freq_          _VALUE_
# HISTFREQ        _freq_          _VALUE_
# COMPRESS        _compress_
# OUT_FORMAT      _nc_format_
# OUTVAR  _varname_   [_format_  [_type_ [_multiplier_ [_aggtype_]]]]
# OUTVAR  _varname_   [_format_  [_type_ [_multiplier_ [_aggtype_]]]]
# OUTVAR  _varname_   [_format_  [_type_ [_multiplier_ [_aggtype_]]]]
#
# OUTFILE _prefix_
# OUTFREQ         _freq_          _VALUE_
# OUTVAR  _varname_   [_format_  [_type_ [_multiplier_ [_aggtype_]]]]
# OUTVAR  _varname_   [_format_  [_type_ [_multiplier_ [_aggtype_]]]]
# OUTVAR  _varname_   [_format_  [_type_ [_multiplier_ [_aggtype_]]]]
#
#
# _prefix_     = name of the output file, NOT including the date stamp or the suffix
# _freq_       = Describes aggregation frequency for output stream. Valid
#                options for frequency are:
#                  NEVER     = never write to history file
#                  NSTEPS    = write to history every _value_ steps
#                  NSECONDS  = write to history every _value_ seconds
#                  NMINUTES  = write to history every _value_ minutes
#                  NHOURS    = write to history every _value_ hours
#                  NDAYS     = write to history every _value_ days
#                  NMONTHS   = write to history every _value_ months
#                  NYEARS    = write to history every _value_ years
#                  DATE      = write to history on the date: _value_
#                  END       = write to history at the end of the simulation
# _value_      = integer describing the number of _freq_ intervals to pass
#                before writing to the history file.
# _compress_   = netCDF gzip compression option.  TRUE, FALSE, or integer between 1-9.
# _nc_format_  = netCDF format. NETCDF3_CLASSIC, NETCDF3_64BIT_OFFSET,
#                NETCDF4_CLASSIC, or NETCDF4
# _varname_    = name of the variable (this must be one of the
#                output variable names listed in vic_driver_shared_all.h.)
#
# _format_     = not used in image driver, replace with *
#
# _type_, and _multiplier_, and _aggtype_ are optional.
# If these are omitted, the default values will be used.
#
# _type_       = data type code. Must be one of:
#                  OUT_TYPE_DOUBLE = double-precision floating point
#                  OUT_TYPE_FLOAT  = single-precision floating point
#                  OUT_TYPE_INT    = integer
#                  OUT_TYPE_USINT  = unsigned short integer
#                  OUT_TYPE_SINT   = short integer
#                  OUT_TYPE_CHAR   = char
#                  *               = use the default type
# _multiplier_ = (for binary output files) factor to multiply
#                the data by before writing, to increase precision.
#                  *    = use the default multiplier for this variable
# _aggtype_    = Aggregation method to use for temporal aggregation. Valid
#                options for aggtype are:
#                  AGG_TYPE_DEFAULT = default aggregation type for variable
#                  AGG_TYPE_AVG     = average over aggregation window
#                  AGG_TYPE_BEG     = beginning of aggregation window
#                  AGG_TYPE_END     = end of aggregation window
#                  AGG_TYPE_MAX     = maximum in aggregation window
#                  AGG_TYPE_MIN     = minimum in aggregation window
#                  AGG_TYPE_SUM     = sum over aggregation window
#
#
#######################################################################

----------------------------------------

TITLE: Configuring Photosynthesis Parameters in VIC Model
DESCRIPTION: Defines extensive parameters for modeling photosynthesis in both C3 and C4 plants. Includes parameters for light interception, leaf area limits, electron transport, stomatal conductance, and activation energies for various biochemical processes.

LANGUAGE: conf
CODE:
# Photosynthesis Parameters
PHOTO_OMEGA 0.12  # single leaf scattering albedo
PHOTO_LAIMAX 8.0  # Maximum LAI in nitrogen scaling
PHOTO_LAILIMIT 3.0  # Minimum LAI in nitrogen scaling and maximum LAI in PAR
                    # computation
PHOTO_LAIMIN 1.0e-9  # Minimum LAI in PAR computation
PHOTO_EPAR 2.2e5  # Energy content of PAR [J/mol photons]
                    # = (4.6 mol/MJ PAR)^-1
PHOTO_FCMAX 0.9  # Maximum fractional veg cover
                   # (1-FcMax) = min amount of ground visible
PHOTO_FCMIN 1.0e-3  # Minimum fractional veg cover
                      # (1-FcMin) = max amount of ground visible
PHOTO_ZENITHMIN 0.0174524  # Check for solar zenith angle > 89 deg
PHOTO_ZENITHMINPAR 1.0e-3  # Cosine of the minimum solar zenith angle for
                            # photosynthesis to take place
PHOTO_ALBSOIPARMIN 0.0  # Minimum soil reflectivity in PAR range
PHOTO_MINMAXETRANS 1e-12  # Minimum of maximum electron transport rate
                          # [10e-12 mol/(m^2 s)]
PHOTO_MINSTOMCOND 0.0  # Minimum stomatal conductance [mol H2O/m2s]

# Factors that relate leaf internal CO2 concentration to ambient CO2
# concentration
PHOTO_FCI1C3 0.87  # C3 Plants
PHOTO_FCI1C4 0.67  # C4 Plants

# C3 PLANTS: FARQUHAR, G.D., S. VON CAEMMERER AND J.A. BERRY, 1980. A
# BIOCHEMICAL MODEL OF PHOTOYNTHESIS IN LEAVES OF C3 SPECIES. PLANTA 149,
# 78-90.
PHOTO_OX 0.21  # OXYGEN CONCENTRATION [MOL(O2) / MOL(AIR)]
PHOTO_KC0 460.0e-6  # MICHAELIS-MENTEN CONSTANT FOR CO2 AT 25C
                   #  [MOL(CO2) / MOL(AIR)]
PHOTO_KO0 330.0e-3  # MICHAELIS-MENTEN CONSTANT FOR O2 AT 25C
                   # [MOL(O2) / MOL(AIR)]
PHOTO_EC 59356.0  # ACTIVATION ENERGY FOR KC [J / MOL]
PHOTO_EO 35948.0  # ACTIVATION ENERGY FOR KO [J / MOL]
PHOTO_EV 58520.0  # ACTIVATION ENERGY FOR VCMAX [J / MOL]
PHOTO_ER 45000.0  # ACTIVATION ENERGY FOR DARK RESPIRATION [J / MOL]
PHOTO_ALC3 0.28    # EFFICIENCY OF OF PHOTON CAPTURE
PHOTO_FRDC3 0.011  # RATIO OF DARK RESPIRATION TO "PVM" AT 25C for C3

# C4 PLANTS: COLLATZ, G.J., M. RIBAS-CARBO AND J.A. BERRY, 1992.  COUPLED
# PHOTOSYNTHESIS-STOMATAL CONDUCTANCE MODEL FOR LEAVES OF C4 PLANTS. AUST. J.
# PLANT PHYSIOL. 19, 519-538.
PHOTO_EK 50967.0  # Q10=2 (Collatz et al. 1992)
PHOTO_ALC4 0.04  # EFFECTIVE QUANTUM EFFICIENCY
PHOTO_FRDC4 0.042  # RATIO OF DARK RESPIRATION TO "PVM" AT 25C for C4
PHOTO_THETA 0.83  # CURVATURE PARAMETER

# Plant Maintenance and Growth Respiration Parameters
PHOTO_FRLEAF 0.4  # Ratio of canopy leaf respiration to whole plant
                  # maintenance respiration
PHOTO_FRGROWTH 0.25  # Ratio of plant growth respiration to NPP

----------------------------------------

TITLE: Example Water and Energy Balance Output Configuration in VIC
DESCRIPTION: Complete example showing how to configure two output files in VIC: a water balance file with daily output and an energy balance file with 3-hour output. The water balance file uses ASCII format while the energy balance file uses binary format.

LANGUAGE: shell
CODE:
OUTFILE	wbal
AGGFREQ         NDAYS           1
COMPRESS        FALSE
OUT_FORMAT      ASCII
OUTVAR	OUT_PREC        %.7g * * AGG_TYPE_AVG
OUTVAR	OUT_EVAP        %.7g * * AGG_TYPE_AVG
OUTVAR	OUT_RUNOFF      %.7g * * AGG_TYPE_AVG
OUTVAR	OUT_BASEFLOW    %.7g * * AGG_TYPE_AVG
OUTVAR	OUT_SWE         %.7g * * AGG_TYPE_END
OUTVAR	OUT_SOIL_MOIST  %.7g * * AGG_TYPE_AVG

OUTFILE	ebal
AGGFREQ         NHOURS           3
COMPRESS        TRUE
OUT_FORMAT      BINARY
OUTVAR	OUT_NET_SHORT
OUTVAR	OUT_NET_LONG
OUTVAR	OUT_LATENT
OUTVAR	OUT_SENSIBLE
OUTVAR	OUT_GRND_FLUX
OUTVAR	OUT_SNOW_FLUX
OUTVAR	OUT_ALBEDO

----------------------------------------

TITLE: Displaying NetCDF Structure for VIC 5 Image Driver Parameters Using ncdump
DESCRIPTION: This code uses the ncdump utility to display the header information of a NetCDF file containing VIC 5 model parameters. The output shows the dimensions and variables defined in the Stehekin test parameters file, including soil properties, geographical information, vegetation parameters, and elevation band data.

LANGUAGE: shell
CODE:
ncdump -h Stehekin_test_params_20160327.nc
netcdf Stehekin_test_params_20160327 {
dimensions:
	lon = 5 ;
	lat = 4 ;
	nlayer = 3 ;
	snow_band = 5 ;
	veg_class = 12 ;
	root_zone = 3 ;
	month = 12 ;
variables:
	double lat(lat) ;
		lat:units = "degrees_north" ;
		lat:long_name = "latitude of grid cell center" ;
	double lon(lon) ;
		lon:units = "degrees_east" ;
		lon:long_name = "longitude of grid cell center" ;
	int layer(nlayer) ;
		layer:long_name = "soil layer" ;
	int run_cell(lat, lon) ;
		run_cell:_FillValue = -2147483647 ;
		run_cell:units = "N/A" ;
		run_cell:description = "1 = Run Grid Cell, 0 = Do Not Run" ;
		run_cell:long_name = "run_cell" ;
	int gridcell(lat, lon) ;
		gridcell:_FillValue = -2147483647 ;
		gridcell:units = "N/A" ;
		gridcell:description = "Grid cell number" ;
		gridcell:long_name = "gridcell" ;
  double lats(lat, lon) ;
      lats:_FillValue = 9.96920996838687e+36 ;
      lats:units = "degrees" ;
      lats:description = "Latitude of grid cell" ;
      lats:long_name = "lats" ;
    double lons(lat, lon) ;
  		lons:_FillValue = 9.96920996838687e+36 ;
  		lons:units = "degrees" ;
  		lons:description = "Longitude of grid cell" ;
  		lons:long_name = "lons" ;
  	double infilt(lat, lon) ;
  		infilt:_FillValue = 9.96920996838687e+36 ;
  		infilt:units = "mm/day" ;
  		infilt:description = "Variable infiltration curve parameter (binfilt)" ;
  		infilt:long_name = "infilt" ;
  	double Ds(lat, lon) ;
  		Ds:_FillValue = 9.96920996838687e+36 ;
  		Ds:units = "fraction" ;
  		Ds:description = "Fraction of Dsmax where non-linear baseflow begins" ;
  		Ds:long_name = "Ds" ;
  	double Dsmax(lat, lon) ;
  		Dsmax:_FillValue = 9.96920996838687e+36 ;
  		Dsmax:units = "mm/day" ;
  		Dsmax:description = "Maximum velocity of baseflow" ;
  		Dsmax:long_name = "Dsmax" ;
  	double Ws(lat, lon) ;
  		Ws:_FillValue = 9.96920996838687e+36 ;
  		Ws:units = "fraction" ;
  		Ws:description = "Fraction of maximum soil moisture where non-linear baseflow occurs" ;
  		Ws:long_name = "Ws" ;
  	double c(lat, lon) ;
  		c:_FillValue = 9.96920996838687e+36 ;
  		c:units = "N/A" ;
  		c:description = "Exponent used in baseflow curve, normally set to 2" ;
  		c:long_name = "c" ;
    double expt(nlayer, lat, lon) ;
    	expt:_FillValue = 9.96920996838687e+36 ;
    	expt:units = "N/A" ;
    	expt:description = "Exponent n (=3+2/lambda) in Campbells eqn for hydraulic conductivity, HBH 5.6 (where lambda = soil pore size distribution parameter).  Values should be > 3.0." ;
    	expt:long_name = "expt" ;
    double Ksat(nlayer, lat, lon) ;
    	Ksat:_FillValue = 9.96920996838687e+36 ;
    	Ksat:units = "mm/day" ;
    	Ksat:description = "Saturated hydrologic conductivity" ;
    	Ksat:long_name = "Ksat" ;
    double phi_s(nlayer, lat, lon) ;
    	phi_s:_FillValue = 9.96920996838687e+36 ;
    	phi_s:units = "mm/mm" ;
    	phi_s:description = "Soil moisture diffusion parameter" ;
    	phi_s:long_name = "phi_s" ;
    double init_moist(nlayer, lat, lon) ;
  		init_moist:_FillValue = 9.96920996838687e+36 ;
  		init_moist:units = "mm" ;
  		init_moist:description = "Initial layer moisture content" ;
  		init_moist:long_name = "init_moist" ;
  	double elev(lat, lon) ;
  		elev:_FillValue = 9.96920996838687e+36 ;
  		elev:units = "m" ;
  		elev:description = "Average elevation of grid cell" ;
  		elev:long_name = "elev" ;
  	double depth(nlayer, lat, lon) ;
  		depth:_FillValue = 9.96920996838687e+36 ;
  		depth:units = "m" ;
  		depth:description = "Thickness of each soil moisture layer" ;
  		depth:long_name = "depth" ;
  	double avg_T(lat, lon) ;
  		avg_T:_FillValue = 9.96920996838687e+36 ;
  		avg_T:units = "C" ;
  		avg_T:description = "Average soil temperature, used as the bottom boundary for soil heat flux solutions" ;
  		avg_T:long_name = "avg_T" ;
    double dp(lat, lon) ;
  		dp:_FillValue = 9.96920996838687e+36 ;
  		dp:units = "m" ;
  		dp:description = "Soil thermal damping depth (depth at which soil temperature remains constant through the year, ~4 m)" ;
  		dp:long_name = "dp" ;
  	double bubble(nlayer, lat, lon) ;
  		bubble:_FillValue = 9.96920996838687e+36 ;
  		bubble:units = "cm" ;
  		bubble:description = "Bubbling pressure of soil. Values should be > 0.0" ;
  		bubble:long_name = "bubble" ;
  	double quartz(nlayer, lat, lon) ;
  		quartz:_FillValue = 9.96920996838687e+36 ;
  		quartz:units = "fraction" ;
  		quartz:description = "Quartz content of soil" ;
  		quartz:long_name = "quartz" ;
  	double bulk_density(nlayer, lat, lon) ;
  		bulk_density:_FillValue = 9.96920996838687e+36 ;
  		bulk_density:units = "kg/m3" ;
  		bulk_density:description = "Bulk density of soil layer" ;
  		bulk_density:long_name = "bulk_density" ;
  	double soil_density(nlayer, lat, lon) ;
  		soil_density:_FillValue = 9.96920996838687e+36 ;
  		soil_density:units = "kg/m3" ;
  		soil_density:description = "Soil particle density, normally 2685 kg/m3" ;
  		soil_density:long_name = "soil_density" ;
  	double off_gmt(lat, lon) ;
  		off_gmt:_FillValue = 9.96920996838687e+36 ;
  		off_gmt:units = "hours" ;
  		off_gmt:description = "Time zone offset from GMT. This parameter determines how VIC interprets sub-daily time steps relative to the model start date and time." ;
  		off_gmt:long_name = "off_gmt" ;
  	double Wcr_FRACT(nlayer, lat, lon) ;
  		Wcr_FRACT:_FillValue = 9.96920996838687e+36 ;
  		Wcr_FRACT:units = "fraction" ;
  		Wcr_FRACT:description = "Fractional soil moisture content at the critical point (~70%% of field capacity) (fraction of maximum moisture)" ;
  		Wcr_FRACT:long_name = "Wcr_FRACT" ;
    double Wpwp_FRACT(nlayer, lat, lon) ;
  		Wpwp_FRACT:_FillValue = 9.96920996838687e+36 ;
  		Wpwp_FRACT:units = "fraction" ;
  		Wpwp_FRACT:description = "Fractional soil moisture content at the wilting point (fraction of maximum moisture)" ;
  		Wpwp_FRACT:long_name = "Wpwp_FRACT" ;
  	double rough(lat, lon) ;
  		rough:_FillValue = 9.96920996838687e+36 ;
  		rough:units = "m" ;
  		rough:description = "Surface roughness of bare soil" ;
  		rough:long_name = "rough" ;
  	double snow_rough(lat, lon) ;
  		snow_rough:_FillValue = 9.96920996838687e+36 ;
  		snow_rough:units = "m" ;
  		snow_rough:description = "Surface roughness of snowpack" ;
  		snow_rough:long_name = "snow_rough" ;
  	double annual_prec(lat, lon) ;
  		annual_prec:_FillValue = 9.96920996838687e+36 ;
  		annual_prec:units = "mm" ;
  		annual_prec:description = "Average annual precipitation." ;
  		annual_prec:long_name = "annual_prec" ;
  	double resid_moist(nlayer, lat, lon) ;
  		resid_moist:_FillValue = 9.96920996838687e+36 ;
  		resid_moist:units = "fraction" ;
  		resid_moist:description = "Soil moisture layer residual moisture." ;
  		resid_moist:long_name = "resid_moist" ;
  	int fs_active(lat, lon) ;
  		fs_active:_FillValue = -2147483647 ;
  		fs_active:units = "binary" ;
  		fs_active:description = "If set to 1, then frozen soil algorithm is activated for the grid cell. A 0 indicates that frozen soils are not computed even if soil temperatures fall below 0C." ;
  		fs_active:long_name = "fs_active" ;
  	int snow_band(snow_band) ;
  		snow_band:long_name = "snow band" ;
        	double cellnum(lat, lon) ;
        		cellnum:_FillValue = 9.96920996838687e+36 ;
        		cellnum:units = "N/A" ;
        		cellnum:description = "Grid cell number (should match numbers assigned in soil parameter file)" ;
    double AreaFract(snow_band, lat, lon) ;
  		AreaFract:_FillValue = 9.96920996838687e+36 ;
  		AreaFract:units = "fraction" ;
  		AreaFract:description = "Fraction of grid cell covered by each elevation band. Sum of the fractions must equal 1." ;
  	double elevation(snow_band, lat, lon) ;
  		elevation:_FillValue = 9.96920996838687e+36 ;
  		elevation:units = "m" ;
  		elevation:description = "Mean (or median) elevation of elevation band. This is used to compute the change in air temperature from the grid cell mean elevation." ;
  	double Pfactor(snow_band, lat, lon) ;
  		Pfactor:_FillValue = 9.96920996838687e+36 ;
  		Pfactor:units = "fraction" ;
  		Pfactor:description = "Fraction of cell precipitation thatfalls on each elevation band. Total must equal 1. To ignore effects of elevation on precipitation, set these fractions equal to the area fractions." ;
  	int veg_class(veg_class) ;
  		veg_class:long_name = "Vegetation Class" ;
  	string veg_descr(veg_class) ;
  		veg_descr:long_name = "Vegetation Class Description" ;
  	int root_zone(root_zone) ;
  		root_zone:long_name = "root zone" ;
  	int month(month) ;
  		month:long_name = "month of year" ;
  	int Nveg(lat, lon) ;
  		Nveg:_FillValue = -2147483647 ;
  		Nveg:long_name = "Nveg" ;
  		Nveg:units = "N/A" ;
  		Nveg:description = "Number of vegetation tiles in the grid cell" ;
  	double Cv(veg_class, lat, lon) ;
  		Cv:_FillValue = 9.96920996838687e+36 ;
  		Cv:long_name = "Cv" ;
  		Cv:units = "fraction" ;
  		Cv:description = "Fraction of grid cell covered by vegetation tile" ;
  	double root_depth(veg_class, root_zone, lat, lon) ;
  		root_depth:_FillValue = 9.96920996838687e+36 ;
  		root_depth:long_name = "root_depth" ;
  		root_depth:units = "m" ;
  		root_depth:description = "Root zone thickness (sum of depths is total depth of root penetration)" ;
    double root_fract(veg_class, root_zone, lat, lon) ;
  		root_fract:_FillValue = 9.96920996838687e+36 ;
  		root_fract:long_name = "root_fract" ;
  		root_fract:units = "fraction" ;
  		root_fract:description = "Fraction of root in the current root zone" ;
  	double LAI(veg_class, month, lat, lon) ;
  		LAI:_FillValue = 9.96920996838687e+36 ;
  		LAI:long_name = "LAI" ;
  		LAI:units = "m2/m2" ;
  		LAI:description = "Leaf Area Index, one per month" ;
  	int overstory(veg_class, lat, lon) ;
  		overstory:_FillValue = -2147483647 ;
  		overstory:long_name = "overstory" ;
  		overstory:units = "N/A" ;

----------------------------------------

TITLE: Configuring Blowing Snow Parameters for VIC Model
DESCRIPTION: These parameters define physical properties and numerical simulation settings for blowing snow processes. They include thermal conductivity, saltation constants, threshold velocities, and numerical integration parameters used in calculating snow redistribution by wind.

LANGUAGE: plaintext
CODE:
# Blowing Snow Parameters
BLOWING_KA 0.0245187  # thermal conductivity of air (W/mK)
BLOWING_CSALT 0.68  # saltation constant m/s
BLOWING_UTHRESH 0.25  # threshold shear velocity m/s
BLOWING_KIN_VIS 1.3e-5  # Kinemativ viscosity of air (m2/s)
BLOWING_MAX_ITER 100  # Max. iterations for numerical integration
BLOWING_K 5
BLOWING_MACHEPS 1.0e-6  # Accuracy tolerance for numerical integration
BLOWING_SETTLING 0.3  # Particle settling velocity m/s
BLOWING_NUMINCS 10  # Number of prob intervals to solve for wind.

----------------------------------------

TITLE: Example VIC Output Configuration for Water and Energy Balance Files
DESCRIPTION: Practical example showing how to configure two output files: 'wbal' for water balance variables with daily aggregation and yearly history frequency, and 'ebal' for energy balance variables with 3-hour aggregation.

LANGUAGE: config
CODE:
OUTFILE	wbal
AGGFREQ         NDAYS           1
HISTFREQ        NYEARS          1
COMPRESS        FALSE
OUT_FORMAT      NETCDF3_CLASSIC
OUTVAR	OUT_PREC        * * AGG_TYPE_AVG
OUTVAR	OUT_EVAP        * * AGG_TYPE_AVG
OUTVAR	OUT_RUNOFF      * * AGG_TYPE_AVG
OUTVAR	OUT_BASEFLOW    * * AGG_TYPE_AVG
OUTVAR	OUT_SWE         * * AGG_TYPE_END
OUTVAR	OUT_SOIL_MOIST  * * AGG_TYPE_AVG

OUTFILE	ebal
AGGFREQ         NHOURS           3
COMPRESS        TRUE
OUT_FORMAT      NETCDF4
OUTVAR	OUT_NET_SHORT
OUTVAR	OUT_NET_LONG
OUTVAR	OUT_LATENT
OUTVAR	OUT_SENSIBLE
OUTVAR	OUT_GRND_FLUX
OUTVAR	OUT_SNOW_FLUX
OUTVAR	OUT_ALBEDO

----------------------------------------

TITLE: Configuring Lake Model Parameters in VIC
DESCRIPTION: Configuration block for lake model parameters that need to be uncommented and properly set when running a lake model. These parameters define lake characteristics and grid cell properties.

LANGUAGE: bash
CODE:
# These need to be un-commented and set to correct values only when running lake model (LAKES is not FALSE)
#######################################################################
#LAKES      (put lake parameter path/file here) # Lake parameter path/file
#LAKE_PROFILE   FALSE   # TRUE = User-specified depth-area parameters in lake parameter file; FALSE = VIC computes a parabolic depth-area profile
#EQUAL_AREA FALSE   # TRUE = grid cells are from an equal-area projection; FALSE = grid cells are on a regular lat-lon grid
#RESOLUTION 0.125   # Grid cell resolution (degrees if EQUAL_AREA is FALSE, km^2 if EQUAL_AREA is TRUE); ignored if LAKES is FALSE

----------------------------------------

TITLE: Configuring VIC Hydrology Model Parameters
DESCRIPTION: This configuration file sets up the VIC hydrology model for a simulation of the Stehekin watershed. It defines model parameters such as timesteps, spatial domain, forcing data, model physics options, input/output settings, and variables to track during simulation.

LANGUAGE: config
CODE:
NODES                 3
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             $startyear
STARTMONTH            $startmonth
STARTDAY              $startday
ENDYEAR               $endyear
ENDMONTH              $endmonth
ENDDAY                $endday
CALENDAR              PROLEPTIC_GREGORIAN
FULL_ENERGY           FALSE
FROZEN_SOIL           FALSE

DOMAIN          $test_data_dir/image/Stehekin/parameters/domain.stehekin.20151028.nc
DOMAIN_TYPE     LAT     lat
DOMAIN_TYPE     LON     lon
DOMAIN_TYPE     MASK    mask
DOMAIN_TYPE     AREA    area
DOMAIN_TYPE     FRAC    frac
DOMAIN_TYPE     YDIM    lat
DOMAIN_TYPE     XDIM    lon

$init_state
STATENAME   $state_dir/states
STATEYEAR   $stateyear
STATEMONTH  $statemonth
STATEDAY    $stateday
STATESEC    $statesec

FORCING1      $test_data_dir/image/Stehekin/forcings/Stehekin_image_test.forcings_10days.
FORCE_TYPE    AIR_TEMP      tas
FORCE_TYPE    PREC          prcp
FORCE_TYPE    PRESSURE      pres
FORCE_TYPE    SWDOWN        dswrf
FORCE_TYPE    LWDOWN        dlwrf
FORCE_TYPE    VP            vp
FORCE_TYPE    WIND          wind
WIND_H        10.0

PARAMETERS          $test_data_dir/image/Stehekin/parameters/Stehekin_test_params_20160327.FROZEN_SOIL.nc
BASEFLOW            ARNO
JULY_TAVG_SUPPLIED  FALSE
ORGANIC_FRACT       FALSE
LAI_SRC             FROM_VEGPARAM

ROUT_PARAM          $test_data_dir/image/Stehekin/parameters/stehekin_parameters_01.rvic.prm.Stehekin.20150727.nc

RESULT_DIR              $result_dir

OUTFILE     fluxes
AGGFREQ     NHOURS  1
OUTVAR      OUT_PREC
OUTVAR      OUT_RAINF
OUTVAR      OUT_SNOWF
OUTVAR      OUT_AIR_TEMP
OUTVAR      OUT_SWDOWN
OUTVAR      OUT_LWDOWN
OUTVAR      OUT_PRESSURE
OUTVAR      OUT_WIND
OUTVAR      OUT_DENSITY
OUTVAR      OUT_REL_HUMID
OUTVAR      OUT_QAIR
OUTVAR      OUT_VP
OUTVAR      OUT_VPD
OUTVAR      OUT_RUNOFF
OUTVAR      OUT_BASEFLOW
OUTVAR      OUT_EVAP
OUTVAR      OUT_SWE
OUTVAR      OUT_SOIL_MOIST
OUTVAR      OUT_ALBEDO
OUTVAR      OUT_SOIL_TEMP
OUTVAR      OUT_DISCHARGE

----------------------------------------

TITLE: Configuring VIC Carbon Cycle Parameters
DESCRIPTION: Controls the carbon cycle simulation options in the VIC model. These commented parameters determine whether to simulate the carbon cycle, whether photosynthesis parameters are included in the vegetation library, and which method to use for calculating canopy resistance.

LANGUAGE: properties
CODE:
#CARBON         FALSE       # TRUE = simulate carbon cycle; FALSE = do not simulate carbon cycle.  Default = FALSE.
#VEGLIB_PHOTO   FALSE       # TRUE = photosynthesis parameters are included in the veg library file.  Default = FALSE.
#RC_MODE    RC_JARVIS   # RC_JARVIS = canopy resistance computed by applying resistance factors to the veg class's minimum resistance, listed in the veg library
                            # RC_PHOTO = canopy resistance computed by applying resistance factors to the minimum resistance required by current photosynthetic demand.  Default = RC_JARVIS.

----------------------------------------

TITLE: Configuring Surface Albedo and Emissivity Parameters in VIC Model
DESCRIPTION: Defines the albedo value for bare soil and emissivity values for different surface types including ground, vegetation, ice, snow, and open water surfaces. These parameters control radiation absorption and emission.

LANGUAGE: conf
CODE:
ALBEDO_BARE_SOIL 0.2  # albedo for bare soil

EMISS_GRND 0.97  # Ground emissivity
EMISS_VEG 0.97  # Veg emissivity
EMISS_ICE 0.97  # Ice emissivity
EMISS_SNOW 0.97  # Snow emissivity
EMISS_H2O 0.98 # Emissivity of open water surface

----------------------------------------

TITLE: Parameter Configuration for VIC Model
DESCRIPTION: Defines model parameters file location and specific model parameter choices. Sets baseflow parameterization, LAI source, and other key modeling options.

LANGUAGE: config
CODE:
PARAMETERS          $test_data_dir/image/Stehekin/parameters/Stehekin_test_params_20160327.nc
BASEFLOW            ARNO
JULY_TAVG_SUPPLIED  FALSE
ORGANIC_FRACT       FALSE
LAI_SRC             FROM_VEGPARAM
SNOW_BAND	          TRUE

----------------------------------------

TITLE: Configuring VIC Model State Files Parameters
DESCRIPTION: Configuration parameters for VIC model state files, including initial and output state file paths and formatting options. Users need to specify file paths and set the date for model state saving.

LANGUAGE: bash
CODE:
#INIT_STATE (put the initial state path/filename here)  # Initial state path/file
#STATENAME  (put the path/prefix of output state file here) # Output state file path/prefix.  The date (STATEYEAR,STATEMONTH,STATEDAY) will be appended to the prefix automatically in the format yyyymmdd.
#STATEYEAR  2000    # year to save model state
#STATEMONTH 12  # month to save model state
#STATEDAY   31  # day to save model state
#STATE_FORMAT   ASCII  # BINARY OR ASCII

----------------------------------------

TITLE: Configuring VIC Soil Temperature Parameters
DESCRIPTION: Controls how soil temperature and frozen soil processes are simulated in the VIC model. The main parameter FROZEN_SOIL determines whether frozen soil physics are included, with additional commented options for controlling the numerical methods used for heat flux calculations.

LANGUAGE: properties
CODE:
FROZEN_SOIL FALSE   # TRUE = calculate frozen soils.  Default = FALSE.
#QUICK_FLUX FALSE   # TRUE = use simplified ground heat flux method of Liang et al (1999); FALSE = use finite element method of Cherkauer et al (1999)
#IMPLICIT   TRUE    # TRUE = use implicit solution for soil heat flux equation of Cherkauer et al (1999), otherwise uses original explicit solution.  Default = TRUE.
#QUICK_SOLVE    FALSE   # TRUE = Use Liang et al., 1999 formulation for iteration, but explicit finite difference method for final step.
#NO_FLUX        FALSE   # TRUE = use no flux lower boundary for ground heat flux computation; FALSE = use constant flux lower boundary condition.  If NO_FLUX = TRUE, QUICK_FLUX MUST = FALSE.  Default = FALSE.
#EXP_TRANS  TRUE    # TRUE = exponentially distributes the thermal nodes in the Cherkauer et al. (1999) finite difference algorithm, otherwise uses linear distribution.  Default = TRUE.
#GRND_FLUX_TYPE GF_410  # Options for ground flux:
#           # GF_406 = use (flawed) formulas for ground flux, deltaH, and fusion from VIC 4.0.6 and earlier;
#           # GF_410 = use formulas from VIC 4.1.0 (ground flux, deltaH, and fusion are correct; deltaH and fusion ignore surf_atten);
#           # Default = GF_410
#TFALLBACK  TRUE    # TRUE = when temperature iteration fails to converge, use previous time step's T value
#SPATIAL_FROST  FALSE   (Nfrost)    # TRUE = use a uniform distribution to simulate the spatial distribution of soil frost; FALSE = assume that the entire grid cell is frozen uniformly.  If TRUE, then replace (Nfrost) with the number of frost subareas, i.e., number of points on the spatial distribution curve to simulate.  Default = FALSE.

----------------------------------------

TITLE: Configuring VIC Model Land Surface Parameters
DESCRIPTION: Parameters for soil, vegetation, and snow band configurations in the VIC model. Users need to specify paths to soil and vegetation parameter files and set options for baseflow, organic soil simulation, and vegetation properties.

LANGUAGE: bash
CODE:
SOIL            (put the soil parameter path/file here) # Soil parameter path/file
BASEFLOW    ARNO    # ARNO = columns 5-8 are the standard VIC baseflow parameters; NIJSSEN2001 = columns 5-8 of soil file are baseflow parameters from Nijssen et al (2001)
JULY_TAVG_SUPPLIED  FALSE   # TRUE = final column of the soil parameter file will contain average July air temperature, for computing treeline; this will be ignored if COMPUTE_TREELINE is FALSE; FALSE = compute the treeline based on the average July air temperature of the forcings over the simulation period
ORGANIC_FRACT   FALSE   # TRUE = simulate organic soils; soil param file contains 3*Nlayer extra columns, listing for each layer the organic fraction, and the bulk density and soil particle density of the organic matter in the soil layer; FALSE = soil param file does not contain any information about organic soil, and organic fraction should be assumed to be 0
VEGLIB          (put the veg library path/file here)    # Veg library path/file
VEGPARAM        (put the veg parameter path/file here)  # Veg parameter path/file
ROOT_ZONES      3   # Number of root zones (must match format of veg param file)
#VEGLIB_FCAN    FALSE   # TRUE = veg lib file contains 12 monthly values of partial vegcover fraction for each veg class, between the LAI and albedo values
#VEGPARAM_LAI   TRUE    # TRUE = veg param file contains LAI information; FALSE = veg param file does NOT contain LAI information
#VEGPARAM_ALB   FALSE    # TRUE = veg param file contains albedo information; FALSE = veg param file does NOT contain albedo information
#VEGPARAM_FCAN  FALSE    # TRUE = veg param file contains veg_cover information; FALSE = veg param file does NOT contain veg_cover information
#LAI_SRC    FROM_VEGLIB    # FROM_VEGPARAM = read LAI from veg param file; FROM_VEGLIB = read LAI from veg library file
#ALB_SRC    FROM_VEGLIB    # FROM_VEGPARAM = read albedo from veg param file; FROM_VEGLIB = read albedo from veg library file
#FCAN_SRC   FROM_VEGLIB    # FROM_VEGPARAM = read fcanopy from veg param file; FROM_VEGLIB = read fcanopy from veg library file
SNOW_BAND   1   # Number of snow bands; if number of snow bands > 1, you must insert the snow band path/file after the number of bands (e.g. SNOW_BAND 5 my_path/my_snow_band_file)

----------------------------------------

TITLE: Configuring VIC Model Lake Simulation Parameters
DESCRIPTION: Optional parameters for lake model simulation in VIC. These parameters need to be uncommented when running the lake model, specifying lake parameters, profile types, and grid properties.

LANGUAGE: bash
CODE:
#LAKES      (put lake parameter path/file here) # Lake parameter path/file
#LAKE_PROFILE   FALSE   # TRUE = User-specified depth-area parameters in lake parameter file; FALSE = VIC computes a parabolic depth-area profile
#EQUAL_AREA FALSE   # TRUE = grid cells are from an equal-area projection; FALSE = grid cells are on a regular lat-lon grid
#RESOLUTION 0.125   # Grid cell resolution (degrees if EQUAL_AREA is FALSE, km^2 if EQUAL_AREA is TRUE); ignored if LAKES is FALSE

----------------------------------------

TITLE: Configuring VIC Precipitation Parameters
DESCRIPTION: Defines parameters related to rain and snow simulation in the VIC model. These commented parameters control snow density calculations, blowing snow effects, precipitation corrections, and spatial snow distribution.

LANGUAGE: properties
CODE:
#SNOW_DENSITY   DENS_BRAS   # DENS_BRAS = use traditional VIC algorithm taken from Bras, 1990; DENS_SNTHRM = use algorithm taken from SNTHRM model.
#BLOWING        FALSE   # TRUE = compute evaporative fluxes due to blowing snow
#COMPUTE_TREELINE   FALSE   # Can be either FALSE or the id number of an understory veg class; FALSE = turn treeline computation off; VEG_CLASS_ID = replace any overstory veg types with the this understory veg type in all snow bands for which the average July Temperature <= 10 C (e.g. "COMPUTE_TREELINE 10" replaces any overstory veg cover with class 10)
#CORRPREC   FALSE   # TRUE = correct precipitation for gauge undercatch
#MAX_SNOW_TEMP  0.5 # maximum temperature (C) at which snow can fall
#MIN_RAIN_TEMP  -0.5    # minimum temperature (C) at which rain can fall
#SPATIAL_SNOW   FALSE   # TRUE = use a uniform distribution to simulate the partial coverage of the
                        # surface by a thin snowpack.  Coverage is assumed to be uniform after snowfall
                        # until the pack begins to melt.  If TRUE, VIC will expect an additional column
                        # in the soil paramter file containing the snow distibution slope parameter
                        # (= 2 * snow depth below which coverage < 1).

----------------------------------------

TITLE: Configuring VIC Meteorological Forcing Disaggregation Parameters
DESCRIPTION: Specifies parameters for how meteorological forcing data is processed and disaggregated in the VIC model. These commented parameters control air pressure calculation, shortwave radiation adjustments, and methods for estimating vapor pressure and longwave radiation.

LANGUAGE: properties
CODE:
#PLAPSE     TRUE    # This controls how VIC computes air pressure when air pressure is not supplied as an input forcing: TRUE = set air pressure to sea level pressure, lapsed to grid cell average elevation; FALSE = set air pressure to constant 95.5 kPa (as in all versions of VIC pre-4.1.1)
#SW_PREC_THRESH     0   # Minimum daily precip [mm] that can cause dimming of incoming shortwave; default = 0.
#MTCLIM_SWE_CORR    TRUE    # This controls VIC's estimates of incoming shortwave in the presence of snow; TRUE = adjust incoming shortwave for snow albedo effect; FALSE = do not adjust shortwave; default = TRUE
#VP_ITER        VP_ITER_ANNUAL  # This controls VIC's iteration between estimates of shortwave and vapor pressure:
#           # VP_ITER_NEVER = never iterate; make estimates separately
#           # VP_ITER_ALWAYS = always iterate once
#           # VP_ITER_ANNUAL = iterate once for arid climates based on annual Precip/PET ratio
#           # VP_ITER_CONVERGE = iterate until shortwave and vp stabilize
#           # default = VP_ITER_ALWAYS
#VP_INTERP  TRUE    # This controls sub-daily humidity estimates; TRUE = interpolate daily VP estimates linearly between sunrise of one day to the next; FALSE = hold VP constant for entire day
#LW_TYPE        LW_PRATA    # This controls the algorithm used to estimate clear-sky longwave radiation:
#           # LW_TVA = Tennessee Valley Authority algorithm (1972) (this was traditional VIC algorithm)
#           # other options listed in vic_driver_shared_all.h
#           # default = LW_PRATA
#LW_CLOUD   LW_CLOUD_DEARDORFF  # This controls the algorithm used to estimate the influence of clouds on total longwave:
#           # LW_CLOUD_BRAS = method from Bras textbook (this was the traditional VIC algorithm)
#           # LW_CLOUD_DEARDORFF = method of Deardorff (1978)
#           # default = LW_CLOUD_DEARDORFF

----------------------------------------

TITLE: Available Aggregation Methods for Output Variables
DESCRIPTION: Lists all available aggregation methods for output variables, which determine how values are combined when aggregating from smaller to larger time steps.

LANGUAGE: Shell
CODE:
    AGG_TYPE_AVG : Aggregated value = average of the values over the interval
                                      (default; used for energy balance terms)
    AGG_TYPE_END : Aggregated value = final value over the interval (used for
                                      moisture storage terms)
    AGG_TYPE_SUM : Aggregated value = sum of the values over the interval (used
                                      for moisture fluxes)
    AGG_TYPE_BEG : Aggregated value = first value over the interval
    AGG_TYPE_MIN : Aggregated value = minimum of the values over the interval
    AGG_TYPE_MAX : Aggregated value = maximum of the values over the interval

----------------------------------------

TITLE: Configuring VIC Turbulent Flux Parameters
DESCRIPTION: Controls parameters related to turbulent flux calculations in the VIC model. These commented parameters include options for minimum wind speed and methods for calculating aerodynamic resistance in snow-filled canopy conditions.

LANGUAGE: properties
CODE:
#MIN_WIND_SPEED 0.1 # minimum allowable wind speed (m/s)
#AERO_RESIST_CANSNOW    AR_406_FULL # Options for aerodynamic resistance in snow-filled canopy:
#           # AR_406    = multiply by 10 for latent heat but do NOT multiply by 10 for sensible heat and do NOT apply stability correction (as in VIC 4.0.6); when no snow in canopy, use surface aero_resist for ET.
#           # AR_406_LS     = multiply by 10 for latent heat AND sensible heat and do NOT apply stability correction; when no snow in canopy, use surface aero_resist for ET.
#           # AR_406_FULL   = multiply by 10 for latent heat AND sensible heat and do NOT apply stability correction; additionally, always use overstory aero_resist for ET (as in 4.1.0).
#           # AR_410    = apply stability correction but do NOT multiply by 10 (as in VIC 4.1.0); additionally, always use overstory aero_resist for ET (as in 4.1.0).
#           # Default   = AR_406_FULL

----------------------------------------

TITLE: Configuring Output Files and Variables in VIC Model
DESCRIPTION: Parameters for defining output streams, including file prefixes, aggregation frequency, compression settings, and output format. Also includes configuration for individual output variables.

LANGUAGE: ini
CODE:
OUTFILE*      prefix
AGGFREQ       frequency [count]
COMPRESS      TRUE, FALSE, or lvl
OUT_FORMAT    BINARY OR ASCII
OUTVAR*       name format type multiplier aggtype

----------------------------------------

TITLE: Configuring Canopy Resistance Parameters in VIC Model
DESCRIPTION: Defines parameters that control stomatal resistance in vegetation canopy. Includes the threshold vapor pressure deficit for stomatal closure, maximum allowable resistance, and the minimum vapor pressure deficit factor.

LANGUAGE: conf
CODE:
# Canopy Resistance Parameters
CANOPY_CLOSURE 4000.0  # Threshold vapor pressure deficit for stomatal closure (Pa)
CANOPY_RSMAX 5000.0  # Maximum allowable resistance (s/m)
CANOPY_VPDMINFACTOR 0.1  # Minimum allowable vapor pressure deficit factor

----------------------------------------

TITLE: Configuring Output File Format in VIC Global Parameter File
DESCRIPTION: Basic template for specifying output files and variables in the VIC global parameter file. This shows the general structure for defining output file names, frequency, compression settings, and variables to include.

LANGUAGE: shell
CODE:
# Output File Contents
OUTFILE	_prefix_
OUTFREQ         _freq_          _VALUE_
COMPRESS        _compress_
OUTVAR	_varname_	[_format_	[_type_	[_multiplier_ [_aggtype_]]]]
OUTVAR	_varname_	[_format_	[_type_	[_multiplier_ [_aggtype_]]]]
OUTVAR	_varname_	[_format_	[_type_	[_multiplier_ [_aggtype_]]]]

OUTFILE	_prefix_
OUTVAR	_varname_	[_format_	[_type_	[_multiplier_ [_aggtype_]]]]
OUTVAR	_varname_	[_format_	[_type_	[_multiplier_ [_aggtype_]]]]
OUTVAR	_varname_	[_format_	[_type_	[_multiplier_ [_aggtype_]]]]

----------------------------------------

TITLE: Defining Output Directories for VIC Model Results
DESCRIPTION: Configuration for specifying output and log directories where VIC model results and logs will be stored.

LANGUAGE: ini
CODE:
LOG_DIR       path name
RESULT_DIR    path name

----------------------------------------

TITLE: Configuring Carbon Cycling Constants in VIC Model
DESCRIPTION: Sets parameters for carbon cycling in the model, including the current atmospheric CO2 concentration and the empirical ratio of photosynthetically active radiation (PAR) to shortwave radiation.

LANGUAGE: conf
CODE:
# Carbon Cycling constants
CARBON_CATMCURRENT 383.0  # Current global atmospheric CO2 mixing ratio (ppm)
CARBON_SW2PAR 0.45  # Empirical ratio of PAR [W/m2] to SHORTWAVE [W/m2] from Lopez et al., 2001

----------------------------------------

TITLE: Configuring VIC Model Constants Example
DESCRIPTION: An example of a CONSTANTS file that can be specified in the global parameter file to override default values for model constants. This example shows how to set HUGE_RESIST to a smaller value and EMISS_GRND to an unrealistic value.

LANGUAGE: plain text
CODE:
# Set HUGE_RESIST to smaller value
HUGE_RESIST 1e5

# Set EMISS_GRND to unrealistic value
EMISS_GRND 0.3

----------------------------------------

TITLE: Output Configuration for VIC Model
DESCRIPTION: Defines output file settings and variables to be written. Specifies output frequency, file name, and which hydrological and meteorological variables to save in model output.

LANGUAGE: config
CODE:
RESULT_DIR              $result_dir

OUTFILE     fluxes
AGGFREQ     NHOURS   1
OUTVAR      OUT_PREC
OUTVAR      OUT_RAINF
OUTVAR      OUT_SNOWF
OUTVAR      OUT_AIR_TEMP
OUTVAR      OUT_SWDOWN
OUTVAR      OUT_LWDOWN
OUTVAR      OUT_PRESSURE
OUTVAR      OUT_WIND
OUTVAR      OUT_DENSITY
OUTVAR      OUT_REL_HUMID
OUTVAR      OUT_QAIR
OUTVAR      OUT_VP
OUTVAR      OUT_VPD
OUTVAR      OUT_RUNOFF
OUTVAR      OUT_BASEFLOW
OUTVAR      OUT_EVAP
OUTVAR      OUT_SWE
OUTVAR      OUT_SOIL_MOIST
OUTVAR      OUT_ALBEDO
OUTVAR      OUT_SOIL_TEMP
OUTVAR      OUT_DISCHARGE

----------------------------------------

TITLE: Configuring Soil Respiration Parameters in VIC Model
DESCRIPTION: Sets parameters for soil respiration processes, including temperature sensitivity parameters, moisture response curves, carbon pool turnover times, and fractional allocation of respired carbon. These parameters control how soil carbon is processed in the model.

LANGUAGE: conf
CODE:
# Soil Respiration Parameters
SRESP_E0_LT 308.56  # Lloyd-Taylor E0 parameter [K]
SRESP_T0_LT 227.13  # Lloyd-Taylor T0 parameter [K]
SRESP_WMINFM 0.0  # minimum soil moisture (fraction) at which soil
                    # respiration can occur
SRESP_WMAXFM 1.0  # maximum soil moisture (fraction) at which soil
                    # respiration can occur
SRESP_WOPTFM 0.5  # soil moisture (fraction) at which maximum soil
                    # respiration occurs
SRESP_RHSAT 0.15  # ratio of soil respiration rate under saturated conditions
                    # (w=wmaxFM) to that under optimal conditions (w=woptFM)
SRESP_RFACTOR 0.5  # scaling factor to account for other (non-moisture)
                     # sources of inhibition of respiration
SRESP_TAULITTER 2.86  # Litter pool turnover time [y]
SRESP_TAUINTER 33.3  # Intermediate pool turnover time [y]
SRESP_TAUSLOW 1000.0  # Slow pool turnover time [y]
SRESP_FAIR 0.7  # Fraction of respired carbon from litter pool that is lost
                  # to atmosphere
SRESP_FINTER 0.985  # Fraction of [respired carbon from litter pool that goes
                      # to soil] that goes to intermediate pool

----------------------------------------

TITLE: Example Soil Parameter File for VIC 4.0.5/4.0.6 Water Balance
DESCRIPTION: An example of a soil parameter file in the VIC 4.0.5/4.0.6 Water Balance format. The file contains a single line of data representing one grid cell with various soil parameters including infiltration, soil depths, moisture content, and other physical properties.

LANGUAGE: text
CODE:
#RUN    GRID    LAT LNG INFILT  Ds  Ds_MAX  Ws  C   EXPT_1  EXPT_2  EXPT_3  Ksat_1  Ksat_2  Ksat_3  PHI_1   PHI_2   PHI_3   MOIST_1 MOIST_2 MOIST_3 ELEV    DEPTH_1 DEPTH_2 DEPTH_3 AVG_T   DP  BUBLE1  BUBLE2  BUBLE3  QUARZ1  QUARZ2  QUARZ3  BULKDN1 BULKDN2 BULKDN3 PARTDN1 PARTDN2 PARTDN3 OFF_GMT WcrFT1  WcrFT2  WcrFT3  WpFT1   WpFT2   WpFT3   Z0_SOIL Z0_SNOW PRCP    RESM1   RESM2   RESM3   FS_ACTV JULY_TAVG
1   7   43.739  -92.4.0 0.010   1.e-4   3.05    0.93    2   4.0 4.0 4.0 250.0   250.0   250.0   -999    -999    -999    0.4 0.4 0.4 306.3   0.1 6.90    2.000   14.0    4.0 75.0    75.0    75.0    0.24    0.24    0.24    1306    1367    1367    2650    2650    2650    -6  0.330   0.330   0.330   0.133   0.133   0.133   0.001   0.010   500 0.02    0.02    0.02    1   18.665

----------------------------------------

TITLE: Configuring VIC Model Domain and Spatial Parameters
DESCRIPTION: Specifies the spatial domain file and defines mapping between NetCDF variable names and VIC domain requirements. Sets up the geographical boundaries and grid properties for the Stehekin watershed.

LANGUAGE: config
CODE:
DOMAIN $test_data_dir/image/Stehekin/parameters/domain.stehekin.20151028.nc
DOMAIN_TYPE    LAT     lat
DOMAIN_TYPE    LON     lon
DOMAIN_TYPE    MASK    mask
DOMAIN_TYPE    AREA    area
DOMAIN_TYPE    FRAC    frac
DOMAIN_TYPE    YDIM    lat
DOMAIN_TYPE    XDIM    lon

----------------------------------------

TITLE: Snow Parameters Configuration for VIC Model
DESCRIPTION: Parameters controlling snow properties including surface layer characteristics, snow density calculations, energy balance thresholds, and albedo behavior. These values affect how the model simulates snowpack dynamics.

LANGUAGE: config
CODE:
# Snow Parameters

# maximum depth of the surface layer in water equivalent (m) [default 0.125]
SNOW_MAX_SURFACE_SWE 0.125

# density of new fallen snow [50]
SNOW_NEW_SNOW_DENSITY 50.0

# Density limit used in calculation of destructive metamorphism
SNOW_DENS_DMLIMIT 100.0  # (kg/m^3)

SNOW_DENS_MAX_CHANGE 0.9

# Constants in snow density computation
SNOW_DENS_ETA0 3.6e6  # viscosity of snow at T=0C and density = 0
                        # used in calculation of true viscosity (Ns/m2)
SNOW_DENS_C1 0.04
SNOW_DENS_C2 2.778e-6
SNOW_DENS_C5 0.08  # constant used in snow viscosity calculation, taken from
                     # SNTHRM.89 (/C)
SNOW_DENS_C6 0.021  # constant used in snow viscosity calculation, taken from
                      # SNTHRM.89 (kg/m3)
SNOW_DENS_F 0.6  # internal compaction rate coefficient

# Minimum SWQ for which the snowpack energy balance is computed independent of
# the soil surface temperature
SNOW_MIN_SWQ_EB_THRES 0.0010

# Attenuation coefficients for shortwave in a snowpack.  Values and equation
# taken from Patterson and Hamblin, 1988
SNOW_A1 0.7
SNOW_A2 0.3
SNOW_L1 6.0  # (1/m)
SNOW_L2 20.0  # (1/m)

# Snow albedo curve parameters.  Defaults are from Bras p263. Should not be
# changed except for serious problems with snow melt
SNOW_NEW_SNOW_ALB 0.85
SNOW_ALB_ACCUM_A 0.94
SNOW_ALB_ACCUM_B 0.58
SNOW_ALB_THAW_A 0.82
SNOW_ALB_THAW_B 0.46

# Defines the minimum amount of new snow (mm) which will reset the snowpack
# albedo to new snow
SNOW_TRACESNOW 0.03

----------------------------------------

TITLE: Parameter Definitions for VIC Output Configuration
DESCRIPTION: Explanation of all parameters used in the output file configuration including prefix, frequency, compression, format, variable names, and aggregation types. This defines all valid options for each parameter.

LANGUAGE: config
CODE:
 _prefix_     = name of the output file, NOT including the date stamp or the suffix
 _freq_       = Describes aggregation frequency for output stream. Valid
                options for frequency are:
                  NEVER     = never write to history file
                  NSTEPS    = write to history every _value_ steps
                  NSECONDS  = write to history every _value_ seconds
                  NMINUTES  = write to history every _value_ minutes
                  NHOURS    = write to history every _value_ hours
                  NDAYS     = write to history every _value_ days
                  NMONTHS   = write to history every _value_ months
                  NYEARS    = write to history every _value_ years
                  DATE      = write to history on the date: _value_
                  END       = write to history at the end of the simulation
 _value_      = integer describing the number of _freq_ intervals to pass
                before writing to the history file.
 _compress_   = netCDF gzip compression option.  TRUE, FALSE, or integer between 1-9.
 _nc_format_  = netCDF format. NETCDF3_CLASSIC, NETCDF3_64BIT_OFFSET,
                NETCDF4_CLASSIC, or NETCDF4
 _varname_    = name of the variable (this must be one of the
                output variable names listed in vic_driver_shared_all.h.)

_format_     = not used in image driver, replace with *

_type_, and _multiplier_, and _aggtype_ are optional.
If these are omitted, the default values will be used.

 _type_       = data type code. Must be one of:
                  OUT_TYPE_DOUBLE = double-precision floating point
                  OUT_TYPE_FLOAT  = single-precision floating point
                  OUT_TYPE_INT    = integer
                  OUT_TYPE_USINT  = unsigned short integer
                  OUT_TYPE_SINT   = short integer
                  OUT_TYPE_CHAR   = char
                  *               = use the default type
 _multiplier_ = (for binary output files) factor to multiply
                the data by before writing, to increase precision.
                  *    = use the default multiplier for this variable
 _aggtype_    = Aggregation method to use for temporal aggregation. Valid
                options for aggtype are:
                  AGG_TYPE_DEFAULT = default aggregation type for variable
                  AGG_TYPE_AVG     = average over aggregation window
                  AGG_TYPE_BEG     = beginning of aggregation window
                  AGG_TYPE_END     = end of aggregation window
                  AGG_TYPE_MAX     = maximum in aggregation window
                  AGG_TYPE_MIN     = minimum in aggregation window
                  AGG_TYPE_SUM     = sum over aggregation window

----------------------------------------

TITLE: Configuring Output Files in VIC Global Parameter File
DESCRIPTION: Template for specifying output file contents in the VIC global parameter file. It shows the structure for defining output files with their prefix, frequency, compression settings, format, and variables to include.

LANGUAGE: config
CODE:
# Output File Contents
OUTFILE	_prefix_
OUTFREQ         _freq_          _VALUE_
HISTFREQ        _freq_          _VALUE_
COMPRESS        _compress_
OUT_FORMAT      _nc_format_
OUTVAR	_varname_	[_format_  [_type_ [_multiplier_ [_aggtype_]]]]
OUTVAR	_varname_	[_format_  [_type_ [_multiplier_ [_aggtype_]]]]
OUTVAR	_varname_	[_format_  [_type_ [_multiplier_ [_aggtype_]]]]

OUTFILE	_prefix_
OUTFREQ         _freq_          _VALUE_
OUTVAR	_varname_	[_format_  [_type_ [_multiplier_ [_aggtype_]]]]
OUTVAR	_varname_	[_format_  [_type_ [_multiplier_ [_aggtype_]]]]
OUTVAR	_varname_	[_format_  [_type_ [_multiplier_ [_aggtype_]]]]

----------------------------------------

TITLE: Configuring VIC Model General Parameters
DESCRIPTION: Sets the basic model structure parameters including number of soil layers, nodes, time steps, and simulation period. It also configures energy balance and frozen soil options.

LANGUAGE: plaintext
CODE:
NLAYER                3
NODES                 3
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             1949
STARTMONTH            01
STARTDAY              01
ENDYEAR               1949
ENDMONTH              01
ENDDAY                10
FULL_ENERGY           FALSE
FROZEN_SOIL           FALSE

----------------------------------------

TITLE: Blowing Snow Parameters for VIC Model
DESCRIPTION: Configuration parameters for modeling snow transport by wind, including physical constants, threshold velocities, and numerical integration settings for the blowing snow algorithms.

LANGUAGE: config
CODE:
# Blowing Snow Parameters
BLOWING_KA 0.0245187  # thermal conductivity of air (W/mK)
BLOWING_CSALT 0.68  # saltation constant m/s
BLOWING_UTHRESH 0.25  # threshold shear velocity m/s
BLOWING_KIN_VIS 1.3e-5  # Kinemativ viscosity of air (m2/s)
BLOWING_MAX_ITER 100  # Max. iterations for numerical integration
BLOWING_K 5
BLOWING_MACHEPS 1.0e-6  # Accuracy tolerance for numerical integration
BLOWING_SETTLING 0.3  # Particle settling velocity m/s
BLOWING_NUMINCS 10  # Number of prob intervals to solve for wind.

----------------------------------------

TITLE: Adding Multi-Element Output Variable to put_data Function in C
DESCRIPTION: Demonstrates how to add logic for a multi-element output variable in the put_data() function, iterating through indices and accumulating weighted values.

LANGUAGE: C
CODE:
for (index = 0; index < MAX_FRONTS; index++) {
    if (energy.fdepth[index] != MISSING) {
        out_data[OUT_FDEPTH][index] += energy.fdepth[index] * AreaFactor * CM_PER_M;
    }
    if (energy.tdepth[index] != MISSING) {
        out_data[OUT_TDEPTH][index] += energy.tdepth[index] * AreaFactor * CM_PER_M;
    }
}

----------------------------------------

TITLE: Configuring VIC Forcing Data Parameters
DESCRIPTION: Specifies the meteorological forcing data sources, format, and variable types for the VIC model. Defines the path to input files, data types with scaling factors, and temporal resolution of the forcing data.

LANGUAGE: config
CODE:
FORCING1              $test_data_dir/inputdata/ec_flux_towers/forcing.merge.hourly/full_data_
FORCE_FORMAT          ASCII
FORCE_TYPE  SKIP
FORCE_TYPE  SKIP
FORCE_TYPE  SKIP
FORCE_TYPE  SKIP
FORCE_TYPE  PREC       UNSIGNED 40
FORCE_TYPE  AIR_TEMP   SIGNED   100
FORCE_TYPE  SWDOWN     SIGNED   100
FORCE_TYPE  LWDOWN     SIGNED   100
FORCE_TYPE  SKIP
FORCE_TYPE  PRESSURE   SIGNED   100
FORCE_TYPE  VP         SIGNED   100
FORCE_TYPE  WIND       SIGNED   100
FORCE_STEPS_PER_DAY   24
FORCEYEAR             1980
FORCEMONTH            01
FORCEDAY              01
GRID_DECIMAL          4

WIND_H                10.0

----------------------------------------

TITLE: Displaying NetCDF Header Information with ncdump
DESCRIPTION: Example output from ncdump -h command showing the header structure of a VIC forcing file named Stehekin_image_test.forcings_10days.1949. The output displays dimensions, variables with their attributes, and global attributes of the NetCDF file.

LANGUAGE: netcdf
CODE:
netcdf Stehekin_image_test.forcings_10days.1949 {
dimensions:
    time = 240 ;
    lon = 5 ;
    lat = 4 ;
variables:
    int time(time) ;
        time:units = "hours since 1949-01-01" ;
        time:calendar = "proleptic_gregorian" ;
    double lon(lon) ;
        lon:standard_name = "longitude" ;
        lon:long_name = "longitude of grid cell center" ;
        lon:units = "degrees_east" ;
        lon:axis = "X" ;
    double lat(lat) ;
        lat:standard_name = "latitude" ;
        lat:long_name = "latitude of grid cell center" ;
        lat:units = "degrees_north" ;
        lat:axis = "Y" ;
    float prcp(time, lat, lon) ;
        prcp:_FillValue = 9.96921e+36f ;
        prcp:long_name = "PREC" ;
        prcp:column = 0 ;
        prcp:units = "mm/step" ;
        prcp:description = "PREC" ;
    float tas(time, lat, lon) ;
        tas:_FillValue = 9.96921e+36f ;
        tas:long_name = "AIR_TEMP" ;
        tas:column = 1 ;
        tas:units = "C" ;
        tas:description = "AIR_TEMP" ;
    float dswrf(time, lat, lon) ;
        dswrf:_FillValue = 9.96921e+36f ;
        dswrf:long_name = "SWDOWN" ;
        dswrf:column = 2 ;
        dswrf:units = "W/m2" ;
        dswrf:description = "SWDOWN" ;
    float dlwrf(time, lat, lon) ;
        dlwrf:_FillValue = 9.96921e+36f ;
        dlwrf:long_name = "LWDOWN" ;
        dlwrf:column = 3 ;
        dlwrf:units = "W/m2" ;
        dlwrf:description = "LWDOWN" ;
    float pres(time, lat, lon) ;
        pres:_FillValue = 9.96921e+36f ;
        pres:long_name = "PRESSURE" ;
        pres:column = 5 ;
        pres:units = "kPa" ;
        pres:description = "PRESSURE" ;
    float vp(time, lat, lon) ;
        vp:_FillValue = 9.96921e+36f ;
        vp:long_name = "VP" ;
        vp:column = 6 ;
        vp:units = "kPa" ;
        vp:description = "VP" ;
    float wind(time, lat, lon) ;
        wind:_FillValue = 9.96921e+36f ;
        wind:long_name = "WIND" ;
        wind:column = 7 ;
        wind:units = "m/s" ;
        wind:description = "WIND" ;

// global attributes:
        :title = "Stehekin 10-day example (19490101-19490110)" ;
        :history = "Created: Fri May  6 09:34:06 2016 by ymao" ;
        :institution = "University of Washington" ;
        :source = "/home/ymao/.conda/envs/vic5/bin/vic_utils" ;
        :references = "Primary Historical Reference for VIC: Liang,X., D. P. Lettenmaier, E. F. Wood, and S. J. Burges,1994: A Simple hydrologically Based Model of LandSurface Water and Energy Fluxes for GSMs, J. Geophys.Res., 99(D7), 14,415-14,428." ;
        :comment = "Output from the Variable Infiltration Capacity(VIC) Macroscale Hydrologic Model" ;
        :conventions = "CF-1.6" ;
        :hostname = "compute-0-2.local" ;
        :username = "ymao" ;
        :version = "VIC.4.2.b" ;
        :grid = "BPA Grid" ;
}

----------------------------------------

TITLE: NetCDF Output File Structure Example in VIC
DESCRIPTION: This example shows the structure and content of a VIC output NetCDF file, including dimensions, variable definitions, and metadata attributes. The file contains various hydrological variables such as precipitation, evaporation, runoff, baseflow, and soil moisture, with their corresponding metadata.

LANGUAGE: netcdf
CODE:
dimensions:                                         
        snow_band = 1 ;                             
        front = 3 ;                                 
        frost_area = 1 ;                            
        nlayer = 3 ;                                
        lon = 5 ;                                   
        lat = 4 ;                                   
        node = 3 ;                                  
        root_zone = 3 ;                             
        veg_class = 12 ;                            
        time = UNLIMITED ; // (5 currently)
        nv = 2 ;
variables:                                          
        double time(time) ;                         
                time:standard_name = "time" ;       
                time:units = "days since 0001-01-01 00:00:00" ;
                time:calendar = "proleptic_gregorian" ;
        double time_bnds(time, nv) ;
                time_bnds:standard_name = "time_bounds" ;
                time_bnds:units = "days since 0001-01-01 00:00:00" ;
                time:calendar = "proleptic_gregorian" ;
        double lon(lon) ;                                      
                lon:long_name = "longitude" ;                  
                lon:units = "degrees_east" ;                   
                lon:standard_name = "longitude" ;              
        double lat(lat) ;                                      
                lat:long_name = "latitude" ;                   
                lat:units = "degrees_north" ;                  
                lat:standard_name = "latitude" ;               
        float OUT_PREC(time, lat, lon) ;                       
                OUT_PREC:_FillValue = 9.96921e+36f ;           
                OUT_PREC:long_name = "prec" ;                  
                OUT_PREC:standard_name = "precipitation_amount" ;
                OUT_PREC:units = "mm" ;                          
                OUT_PREC:description = "incoming precipitation" ;
                OUT_PREC:cell_methods = "time: sum" ;            
        float OUT_EVAP(time, lat, lon) ;                         
                OUT_EVAP:_FillValue = 9.96921e+36f ;             
                OUT_EVAP:long_name = "evap" ;                    
                OUT_EVAP:standard_name = "water_evaporation_flux_net" ;
                OUT_EVAP:units = "mm" ;                                
                OUT_EVAP:description = "total net evaporation" ;       
                OUT_EVAP:cell_methods = "time: sum" ;    
        float OUT_RUNOFF(time, lat, lon) ;                             
                OUT_RUNOFF:_FillValue = 9.96921e+36f ;                 
                OUT_RUNOFF:long_name = "runoff" ;                      
                OUT_RUNOFF:standard_name = "runoff_amount" ;           
                OUT_RUNOFF:units = "mm" ;                              
                OUT_RUNOFF:description = "surface runoff" ;            
                OUT_RUNOFF:cell_methods = "time: sum" ;                
        float OUT_BASEFLOW(time, lat, lon) ;                           
                OUT_BASEFLOW:_FillValue = 9.96921e+36f ;               
                OUT_BASEFLOW:long_name = "baseflow" ;                  
                OUT_BASEFLOW:standard_name = "baseflow_amount" ;       
                OUT_BASEFLOW:units = "mm" ;                            
                OUT_BASEFLOW:description = "baseflow out of the bottom layer" ;
                OUT_BASEFLOW:cell_methods = "time: sum" ;
        float OUT_SOIL_LIQ(time, nlayer, lat, lon) ;                                    
               OUT_SOIL_LIQ:_FillValue = 9.96921e+36f ;                                
               OUT_SOIL_LIQ:long_name = "soil_liq" ;                                   
               OUT_SOIL_LIQ:standard_name = "soil_moisture_liquid_depth" ;             
               OUT_SOIL_LIQ:units = "mm" ;                                             
               OUT_SOIL_LIQ:description = "soil liquid moisture content for each soil layer" ;
               OUT_SOIL_LIQ:cell_methods = "time: mean" ;}

----------------------------------------

TITLE: Configuring Soil and Vegetation Physical Constraints in VIC Model
DESCRIPTION: Sets physical constraints for soil moisture content and vegetation water holding capabilities, including residual moisture, vegetation water capacity, and snow/water interception parameters.

LANGUAGE: namelist
CODE:
# Physical Constraints
SOIL_RESID_MOIST 0.0  # define residual moisture content of soil column
SOIL_SLAB_MOIST_FRACT 1.0  # Volumetric moisture content (fraction of porosity)
                           # in the soil/rock below the bottom soil layer; this
                           # assumes that the soil below the bottom layer has
                           # the same texture as the bottom layer.

# water holding capacity of snow as a fraction of snow-water-equivalent
VEG_LIQUID_WATER_CAPACITY 0.035

# multiplier to calculate the amount of available snow interception as a
#function of LAI (m)
VEG_LAI_SNOW_MULTIPLIER 0.0005

# the amount of snow on the canopy that can only be melted off. (m)
VEG_MIN_INTERCEPTION_STORAGE 0.005

# Coefficient multiplied by the LAI to determine the amount of water that can
# be stored in the canopy
VEG_LAI_WATER_FACTOR 0.1

----------------------------------------

TITLE: Defining Vegetation Parameters for VIC Hydrological Model in NetCDF Format
DESCRIPTION: This code snippet defines the vegetation parameters used in the Variable Infiltration Capacity (VIC) hydrological model. The parameters include vegetation characteristics such as overstory flag, architectural resistance, stomatal resistance, wind height, radiation parameters, albedo, roughness length, and displacement height. Each parameter includes metadata with fill values, units, and descriptions.

LANGUAGE: netcdf
CODE:
overstory:description = "Flag to indicate whether or not the current vegetation type has an overstory (1 for overstory present [e.g. trees], 0 for overstory not present [e.g. grass])" ;
  	double rarc(veg_class, lat, lon) ;
  		rarc:_FillValue = 9.96920996838687e+36 ;
  		rarc:long_name = "rarc" ;
  		rarc:units = "s/m" ;
  		rarc:description = "Architectural resistance of vegetation type (~2 s/m)" ;
  	double rmin(veg_class, lat, lon) ;
  		rmin:_FillValue = 9.96920996838687e+36 ;
  		rmin:long_name = "rmin" ;
  		rmin:units = "s/m" ;
  		rmin:description = "Minimum stomatal resistance of vegetation type (~100 s/m)" ;
  	double wind_h(veg_class, lat, lon) ;
  		wind_h:_FillValue = 9.96920996838687e+36 ;
  		wind_h:long_name = "wind_h" ;
  		wind_h:units = "m" ;
  		wind_h:description = "Height at which wind speed is measured." ;
  	double RGL(veg_class, lat, lon) ;
  		RGL:_FillValue = 9.96920996838687e+36 ;
  		RGL:long_name = "RGL" ;
  		RGL:units = "W/m^2." ;
  		RGL:description = "Minimum incoming shortwave radiation at which there will be transpiration. For trees this is about 30 W/m^2, for crops about 100 W/m^2." ;
    double rad_atten(veg_class, lat, lon) ;
  		rad_atten:_FillValue = 9.96920996838687e+36 ;
  		rad_atten:long_name = "rad_atten" ;
  		rad_atten:units = "fraction" ;
  		rad_atten:description = "Radiation attenuation factor. Normally set to 0.5, though may need to be adjusted for high latitudes." ;
  	double wind_atten(veg_class, lat, lon) ;
  		wind_atten:_FillValue = 9.96920996838687e+36 ;
  		wind_atten:long_name = "wind_atten" ;
  		wind_atten:units = "fraction" ;
  		wind_atten:description = "Wind speed attenuation through the overstory. The default value has been 0.5." ;
  	double trunk_ratio(veg_class, lat, lon) ;
  		trunk_ratio:_FillValue = 9.96920996838687e+36 ;
  		trunk_ratio:long_name = "trunk_ratio" ;
  		trunk_ratio:units = "fraction" ;
  		trunk_ratio:description = "Ratio of total tree height that is trunk (no branches). The default value has been 0.2." ;
  	double albedo(veg_class, month, lat, lon) ;
  		albedo:_FillValue = 9.96920996838687e+36 ;
  		albedo:long_name = "albedo" ;
  		albedo:units = "fraction" ;
  		albedo:description = "Shortwave albedo for vegetation type" ;
  	double veg_rough(veg_class, month, lat, lon) ;
  		veg_rough:_FillValue = 9.96920996838687e+36 ;
  		veg_rough:long_name = "veg_rough" ;
  		veg_rough:units = "m" ;
  		veg_rough:description = "Vegetation roughness length (typically 0.123 * vegetation height)" ;
  	double displacement(veg_class, month, lat, lon) ;
  		displacement:_FillValue = 9.96920996838687e+36 ;
  		displacement:long_name = "displacement" ;
  		displacement:units = "m" ;
  		displacement:description = "Vegetation displacement height (typically 0.67 * vegetation height)" ;
      // global attributes:
      		:description = "VIC parameter file" ;
      		:history = "Created: Mon Mar 28 09:32:46 2016\n/Users/jhamman/anaconda/lib/python3.4/site-packages/ipykernel/__main__.py -f /Users/jhamman/Library/Jupyter/runtime/kernel-b8627880-fe9e-4d1a-b2d7-fa3fb6a23e22.json\n" ;
      		:source = "/Users/jhamman/anaconda/lib/python3.4/site-packages/ipykernel/__main__.py" ;
      		:username = "jhamman" ;
      		:host = "Joes-iMac.local" ;
      }

----------------------------------------

TITLE: VIC Image Driver Command Line Options
DESCRIPTION: Additional command line options for the VIC Image Driver, including version information, help, and compile-time settings.

LANGUAGE: shell
CODE:
./vic_image.exe -v
./vic_image.exe -h
./vic_image.exe -o

----------------------------------------

TITLE: Setting Canopy Resistance Parameters in VIC Model
DESCRIPTION: Configures canopy resistance parameters including threshold vapor pressure deficit for stomatal closure, maximum allowable resistance, and minimum vapor pressure deficit factor.

LANGUAGE: namelist
CODE:
# Canopy Resistance Parameters
CANOPY_CLOSURE 4000.0  # Threshold vapor pressure deficit for stomatal closure (Pa)
CANOPY_RSMAX 5000.0  # Maximum allowable resistance (s/m)
CANOPY_VPDMINFACTOR 0.1  # Minimum allowable vapor pressure deficit factor

----------------------------------------

TITLE: Example Lake/Wetland Parameter File Configuration in VIC
DESCRIPTION: An example of a properly formatted lake/wetland parameter file for VIC with 10 lake nodes. The example demonstrates a configuration where the lake/wetland occurs in the first vegetation tile and LAKE_PROFILE is set to TRUE.

LANGUAGE: markdown
CODE:
###  In this example, there are 10 lake nodes, the lake/wetland occurs in the\n###  1st veg tile, and LAKE_PROFILE is TRUE.\n\n7 0 10 1 0.005 10 0.5\n15 0.12 13.5 0.11 12 0.10 10.5 0.09 9 0.08 7.5 0.06 6 0.04 4.5 0.02 3 0.01 1.5 0.0075

----------------------------------------

TITLE: Running VIC Image Driver with MPI Parallelization
DESCRIPTION: Command to run the VIC Image Driver across multiple processors using MPI. The mpiexec command may vary depending on the MPI implementation.

LANGUAGE: shell
CODE:
mpiexec -np $n_proc ./vic_image.exe -g global_parameter_filename.txt

----------------------------------------

TITLE: Configuring Carbon Cycling Constants in VIC Model
DESCRIPTION: Sets carbon cycling constants including current atmospheric CO2 mixing ratio (383.0 ppm) and the empirical ratio of PAR to shortwave radiation (0.45).

LANGUAGE: namelist
CODE:
# Carbon Cycling constants
CARBON_CATMCURRENT 383.0  # Current global atmospheric CO2 mixing ratio (ppm)
CARBON_SW2PAR 0.45  # Empirical ratio of PAR [W/m2] to SHORTWAVE [W/m2] from Lopez et al., 2001

----------------------------------------

TITLE: File Header Structure for VIC Model State File
DESCRIPTION: Defines the format of the file header section that appears at the top of a VIC model state file. It includes date information (year, month, day) and soil layer configuration (number of soil moisture layers and thermal nodes).

LANGUAGE: markdown
CODE:
| Column    | Name          | Type  | Description                       |
|--------   |------------   |------ |-------------------------------    |
| 1         | STATEYEAR     | int   | Year of the model state file      |
| 2         | STATEMONTH    | int   | Month of the model state file     |
| 3         | STATEDAY      | int   | Day of the model state file       |

Define global soil limits.

| Column    | Name      | Type  | Description                       |
|--------   |--------   |------ |--------------------------------   |
| 1         | Nlayer    | int   | Number of soil moisture layers    |
| 2         | Nnodes    | int   | Number of soil thermal nodes      |

----------------------------------------

TITLE: Running VIC Image Driver with OpenMP Parallelization
DESCRIPTION: Commands to set the number of OpenMP threads and run the VIC Image Driver with thread parallelization.

LANGUAGE: shell
CODE:
export OMP_NUM_THREADS=8
./vic_image.exe -g global_parameter_filename.txt

----------------------------------------

TITLE: Compiling the VIC Image Driver
DESCRIPTION: Commands to navigate to the VIC Image Driver source directory and compile the executable using make.

LANGUAGE: shell
CODE:
cd vic/drivers/image
make

----------------------------------------

TITLE: Setting Tree Line Temperature Parameter for VIC Model
DESCRIPTION: This parameter defines the July average temperature (in Celsius) that determines the tree line elevation in the VIC model. It helps establish vegetation boundaries based on climatic conditions.

LANGUAGE: plaintext
CODE:
# July average temperature for tree line
TREELINE_TEMPERATURE 10.0

----------------------------------------

TITLE: Parameter Definitions for VIC Output Configuration
DESCRIPTION: Explanation of parameters used in VIC output configuration, including file prefixes, frequency options, compression settings, variable formats, data types, multipliers, and aggregation types.

LANGUAGE: text
CODE:
 _prefix_     = name of the output file, NOT including latitude
                and longitude
 _freq_       = Describes aggregation frequency for output stream. Valid
                options for frequency are:
                  NEVER     = never write to history file
                  NSTEPS    = write to history every _value_ steps
                  NSECONDS  = write to history every _value_ seconds
                  NMINUTES  = write to history every _value_ minutes
                  NHOURS    = write to history every _value_ hours
                  NDAYS     = write to history every _value_ days
                  NMONTHS   = write to history every _value_ months
                  NYEARS    = write to history every _value_ years
                  DATE      = write to history on the date: _value_
                  END       = write to history at the end of the simulation
 _value_      = integer describing the number of _freq_ intervals to pass
                before writing to the history file.
 _compress_   = gzip compression option.  TRUE, FALSE, or integer between 1-9.
 _varname_    = name of the variable (this must be one of the
                output variable names listed in vic_driver_shared_all.h.)
 _format_     = (for ascii output files) fprintf format string,
                e.g.
                  %.4f = floating point with 4 decimal places
                  %.7e = scientific notation w/ 7 decimal places
                  *    = use the default format for this variable

 _format_, _type_, _multiplier_, and _aggtype_ are optional.
 these.  If these are omitted, the default values will be used.

 _type_       = (for binary output files) data type code.
                Must be one of:
                  OUT_TYPE_DOUBLE = double-precision floating point
                  OUT_TYPE_FLOAT  = single-precision floating point
                  OUT_TYPE_INT    = integer
                  OUT_TYPE_USINT  = unsigned short integer
                  OUT_TYPE_SINT   = short integer
                  OUT_TYPE_CHAR   = char
                  *               = use the default type
 _multiplier_ = (for binary output files) factor to multiply
                the data by before writing, to increase precision.
                  *    = use the default multiplier for this variable
 _aggtype_    = Aggregation method to use for temporal aggregation. Valid
                options for aggtype are:
                  AGG_TYPE_DEFAULT = default aggregation type for variable
                  AGG_TYPE_AVG     = average over aggregation window
                  AGG_TYPE_BEG     = beginning of aggregation window
                  AGG_TYPE_END     = end of aggregation window
                  AGG_TYPE_MAX     = maximum in aggregation window
                  AGG_TYPE_MIN     = minimum in aggregation window
                  AGG_TYPE_SUM     = sum over aggregation window

----------------------------------------

TITLE: Setting MPI Compiler Environment Variable for VIC Compilation
DESCRIPTION: Sets the MPICC environment variable to specify a custom MPI C compiler path rather than using the default mpicc defined in the Makefile.

LANGUAGE: shell
CODE:
MPICC=/path/to/mpi_c_compiler

----------------------------------------

TITLE: VIC State File Example from Stehekin Basin
DESCRIPTION: A sample VIC (Variable Infiltration Capacity) model state file showing the structure and content of state data for a hydrological simulation. The file contains information about soil moisture, temperature, and thermal profiles across 3 soil layers and 10 thermal nodes.

LANGUAGE: txt
CODE:
1948 12 31
3 10
86340 5 5 0.100000  0.100000  0.100000  0.576923  0.576923  0.576923  0.576923  0.576923  0.576923  0.576923  0.000000  0.100000  0.200000  0.538462  1.115385  1.692308  2.269231  2.846154  3.423077  4.000000
1.000000 88 -999
0 0 17.061740 56.710901 154.076105 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.282294 -26.007470 0.000000 -10.385944 0.000000 287.137869 -6826960.769076 0.006871 -22.711803 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
0 1 16.681905 55.980988 293.638277 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.415990 -27.784704 0.000000 -11.030049 0.000000 293.191662 -7293484.811361 0.009397 -25.822053 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
0 2 16.610667 55.843397 348.196273 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.446568 -28.489163 0.000000 -11.626803 0.000000 292.111407 -7478405.215830 0.009737 -27.036902 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
0 3 16.613013 55.867093 377.347556 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.454764 -29.028473 0.000000 -12.121350 0.000000 289.896465 -7619974.228963 0.009780 -27.959252 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
0 4 16.607877 55.858645 395.803394 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.468959 -29.680128 0.000000 -12.676810 0.000000 288.316397 -7791033.525378 0.009791 -29.007702 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
1.000000 -56 -999
1 0 17.267470 57.916699 140.952406 0.000000 0.000000 0.000000 0.000000 24 0 1.000000 0.267034 -21.793677 0.000000 -10.021876 0.000000 286.635428 -5720840.159419 0.000000 -22.711803 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
1 1 16.687072 56.058484 222.699231 0.000000 0.000000 0.000000 0.000000 24 0 1.000000 0.414656 -24.283520 0.000000 -10.497186 0.000000 296.026782 -6374423.878210 0.000000 -25.822053 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
1 2 16.657359 56.045383 283.580321 0.000000 0.000000 0.000000 0.000000 24 0 1.000000 0.447827 -25.253470 0.000000 -11.192870 0.000000 295.065053 -6629036.003708 0.000000 -27.036902 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
1 3 16.640994 55.986534 317.416672 0.000000 0.000000 0.000000 0.000000 24 0 1.000000 0.459124 -26.010046 0.000000 -11.661158 0.000000 293.237947 -6827637.187789 0.000000 -27.959252 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
1 4 16.615881 55.901837 358.898564 0.000000 0.000000 0.000000 0.000000 24 0 1.000000 0.475501 -26.857030 0.000000 -12.244615 0.000000 291.835035 -7049970.387308 0.000000 -29.007702 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
1.000000 62 -999
2 0 16.779661 55.074733 137.923388 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.259040 -30.180932 0.000000 -10.236263 0.000000 279.660711 -7922494.701340 0.000000 -22.711803 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
2 1 16.631105 55.800206 210.712879 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.400361 -31.141543 0.000000 -10.549196 0.000000 289.567469 -8174654.958190 0.000000 -25.822053 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
2 2 16.620325 55.890479 244.646706 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.439078 -31.621836 0.000000 -11.055820 0.000000 290.450159 -8300732.030048 0.000000 -27.036902 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
2 3 16.616265 55.908883 263.550104 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.453719 -32.009960 0.000000 -11.547218 0.000000 289.714849 -8402614.488123 0.000000 -27.959252 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
2 4 16.617371 55.931029 287.245168 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.472990 -32.466258 0.000000 -12.127620 0.000000 289.322428 -8522392.634618 0.000000 -29.007702 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
1.000000 0 -999
3 0 16.781958 56.452564 171.547740 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.242929 -29.987999 0.000000 -10.293697 0.000000 275.675680 -7871849.840076 0.000000 -22.711803 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
3 1 16.631348 55.971010 247.826283 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.392567 -31.009633 0.000000 -10.519804 0.000000 288.836171 -8140028.766553 0.000000 -25.822053 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
3 2 16.620545 55.932068 279.497319 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.433544 -31.509586 0.000000 -10.985153 0.000000 290.232655 -8271266.356764 0.000000 -27.036902 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
3 3 16.616829 55.925264 296.552013 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.450121 -31.908823 0.000000 -11.465947 0.000000 289.775964 -8376066.045837 0.000000 -27.959252 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
3 4 16.617693 55.939020 318.298371 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.471458 -32.372915 0.000000 -12.049658 0.000000 289.642090 -8497890.284478 0.000000 -29.007702 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
1.000000 88 -999
4 0 16.785370 55.829994 123.658906 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.227140 -29.809920 0.000000 -10.454044 0.000000 271.511679 -7825104.061686 0.000000 -22.711803 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
4 1 16.629006 55.695153 189.592901 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.384277 -30.886970 0.000000 -10.557114 0.000000 287.944539 -8107829.508228 0.000000 -25.822053 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
4 2 16.616612 55.824128 225.926605 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.427881 -31.405603 0.000000 -10.956261 0.000000 289.827263 -8243970.868187 0.000000 -27.036902 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
4 3 16.614931 55.881099 246.627049 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.446246 -31.814116 0.000000 -11.418063 0.000000 289.633796 -8351205.485392 0.000000 -27.959252 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
4 4 16.616750 55.921897 271.619558 0.000000 0.000000 0.000000 0.000000 49 0 1.000000 0.469795 -32.285656 0.000000 -12.000788 0.000000 289.840151 -8474984.674525 0.000000 -29.007702 -0.876051 -0.763897 -0.457698 -0.124445  0.062717 0.167832 0.226867 0.260023 0.302500
1.000000 -56 -999
5 0 15.442000 46.327000 154.425000 0.000000 0.000000 0.000000 0 0 0.000000  0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000   0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000    0.000000 0.000000
5 1 15.442000 46.327000 154.425000 0.000000 0.000000 0.000000 0 0 0.000000  0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000   0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000    0.000000 0.000000
5 2 15.442000 46.327000 154.425000 0.000000 0.000000 0.000000 0 0 0.000000  0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000   0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000    0.000000 0.000000
5 3 15.442000 46.327000 154.425000 0.000000 0.000000 0.000000 0 0 0.000000  0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000   0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000    0.000000 0.000000
5 4 15.442000 46.327000 154.425000 0.000000 0.000000 0.000000 0 0 0.000000  0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000   0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000    0.000000 0.000000

----------------------------------------

TITLE: Format Specifier Examples for VIC Output Variables
DESCRIPTION: Examples of specifying custom formats and data types for VIC output variables. These examples show how to set scientific notation with 9 significant digits and how to specify a double-precision data type.

LANGUAGE: shell
CODE:
OUTVAR	OUT_ALBEDO	%.9e

OUTVAR	OUT_ALBEDO	*	OUT_TYPE_DOUBLE

----------------------------------------

TITLE: Viewing NetCDF Domain File Structure with ncdump
DESCRIPTION: This shell command uses ncdump to display the header information of a VIC domain file in NetCDF format. The output shows the dimensions, variables, their attributes, and global attributes of the file structure.

LANGUAGE: shell
CODE:
ncdump -h /ArkRed.domain.nc
netcdf ArkRed.domain {
        dimensions:                                                                                  
        lat = 66 ;                                                                           
        lon = 125 ;                                                                          
        variables:                                                                                   
        int mask(lat, lon) ;
                mask:comment = "0 indicates grid cell outside of domain" ;
                mask:long_name = "domain mask" ;
        double lon(lon) ;
                lon:long_name = "longitude coordinate" ;
                lon:units = "degrees_east" ;
        double lat(lat) ;
                lat:long_name = "latitude coordinate" ;
                lat:units = "degrees_north" ;
        double frac(lat, lon) ;
                frac:long_name = "fraction of grid cell that is active" ;
                frac:units = "1" ;
        double area(lat, lon) ;
                area:standard_name = "area" ;
                area:long_name = "area of grid cell" ;
                area:units = "m2" ;

// global attributes:
                :title = "VIC domain data" ;
                :Conventions = "CF-1.6" ;
                :history = "Wed Oct 12 15:48:42 2016: ncap2 -s mask=int(mask) ArkRed.domain.nc.float_mask ArkRed.domain.nc\n",
                        "created by ymao, 2016-09-23 18:17:58.761256" ;
                :user_comment = "VIC domain data" ;
                :source = "generated from VIC CONUS 1.8 deg model parameters, see Maurer et al. (2002) for more information" ;
                :nco_openmp_thread_number = 1 ;
}

----------------------------------------

TITLE: Configuring Binary Forcing File in VIC Model
DESCRIPTION: Configuration example for a binary forcing data file in the VIC model. It defines the file path, format, endianness, data types with their scaling factors, temporal resolution, start date, precision, and measurement specifications.

LANGUAGE: plaintext
CODE:
FORCING1             forcings/full_data_
FORCE_FORMAT         BINARY
FORCE_ENDIAN        LITTLE
FORCE_TYPE           PREC       UNSIGNED    40
FORCE_TYPE           AIR_TEMP   SIGNED      100
FORCE_TYPE           SWDOWN     UNSIGNED    100
FORCE_TYPE           LWDOWN     UNSIGNED    100
FORCE_TYPE           PRESSURE   UNSIGNED    100
FORCE_TYPE           VP         UNSIGNED    100
FORCE_TYPE           WIND       UNSIGNED    100
FORCE_STEPS_PER_DAY  24    # Forcing time step length (hours)
FORCEYEAR            1949  # Year of first forcing record
FORCEMONTH           01    # Month of first forcing record
FORCEDAY             01    # Day of first forcing record
GRID_DECIMAL         4     # Number of digits after decimal point in forcing file names
WIND_H               10.0  # height of wind speed measurement (m)

----------------------------------------

TITLE: Calculating Bubbling Pressure from Expt Parameter in VIC Model
DESCRIPTION: Formula to estimate bubbling pressure from existing soil parameters (specifically the expt parameter) when transitioning from water-balance mode to energy balance or frozen soil modes in the VIC model.

LANGUAGE: markdown
CODE:
`bubble = 0.32*expt + 4.3`

----------------------------------------

TITLE: Converting Campbell's b Parameter to Brooks-Corey Exponent for VIC Model
DESCRIPTION: Formula for converting the Campbell equation parameter b (slope of retention curve in log space) to the Brooks-Corey exponent n used in VIC model's unsaturated flow calculations.

LANGUAGE: markdown
CODE:
n = 3 + 2b

----------------------------------------

TITLE: Configuring Lake Simulation in VIC Model
DESCRIPTION: Settings for lake model configuration including lake profiling and grid cell resolution options. These parameters control how lakes are simulated in the VIC hydrological model.

LANGUAGE: ini
CODE:
LAKES         FALSE or path/filename
LAKE_PROFILE  TRUE or FALSE
EQUAL_AREA    TRUE or FALSE
RESOLUTION    decimal degrees or km²
LAKE_NODES    integer

----------------------------------------

TITLE: VIC Release Roadmap Steps in Markdown
DESCRIPTION: A numbered list outlining the complete roadmap for releasing new versions of the VIC model, including feature identification, development, testing, source code updates, and the release process on GitHub.

LANGUAGE: markdown
CODE:
1. Identification of features and fixes to be included in the release.  This is coordinated through the [VIC github page](https://github.com/UW-Hydro/VIC).
1. Features and fixes are added to the appropriate branch (`develop` or `hotfix`) via Github pull requests.
1. The model is tested using the [VIC test framework](Testing.md).  Each of the following tests should be run and verified for any release.
    - Unit tests
    - System tests
    - Example tests
    - Science tests
    - Release tests
1. Once all tests have been run and the release is ready, a few minor changes need to be made to the source code prior to a release:
    - Update the version string for classic and image drivers (`vic_version.h`)
    - Update the version string for the python driver (`setup.py`)
    - Update the documentation.  At a minimum this means updating [ReleaseNotes.md]('ReleaseNotes.md').
1.  Make the release!
    - Merge the `release` branch into the `master` branch.
    - Create the tag. This is best done on the command line as `git tag -f -a VIC.5.1.2 -m 'release tag of VIC 5.1.2, bug fix update for this example`.
    - Publish the release on [Github](https://github.com/UW-Hydro/VIC/releases).
    - Update the VIC documentation and _Readme_ files with the releases Zenodo DOI (e.g. [![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.35303.svg)](http://dx.doi.org/10.5281/zenodo.35303)).
    - Update the `develop` branch with the changes from the `master` branch.
    - Reset the version strings in the `develop` branch.

----------------------------------------

TITLE: Configuring 4-Hour Output Stream for VIC Model
DESCRIPTION: Sets up an output stream that aggregates model variables every 4 hours, with various aggregation methods for different variables such as maximum, minimum, sum, beginning, average, and end values.

LANGUAGE: config
CODE:
# Output every 4 hours
OUTFILE     STREAM_NHOURS_4
AGGFREQ     NHOURS        4
OUTVAR      OUT_ALBEDO    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_MAX
OUTVAR      OUT_SOIL_TEMP *   OUT_TYPE_DOUBLE   *   AGG_TYPE_MIN
OUTVAR      OUT_PRESSURE  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_SUM
OUTVAR      OUT_AIR_TEMP  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_AVG
OUTVAR      OUT_LWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_END

----------------------------------------

TITLE: Example VIC Vegetation Parameter File with LAI Configuration
DESCRIPTION: Sample vegetation parameter file for the VIC model showing configuration for the seventh grid cell with two vegetation tiles, three root zones, and including LAI (Leaf Area Index) values. The example demonstrates proper formatting including grid cell number, number of vegetation tiles, vegetation class IDs, coverage fractions, root zone parameters, and monthly LAI values.

LANGUAGE: plaintext
CODE:
###  Two vegetation tiles with three root zones in the seventh grid cell
###  with LAI included.
7 2
    8 0.102679 0.10 0.10 1.00 0.65 0.50 0.25
      0.312 0.413 0.413 0.413 0.413 0.488 0.975 1.150 0.625 0.312 0.312 0.312
   10 0.897321 0.10 0.10 1.00 0.70 0.50 0.20
      0.212 0.262 0.275 0.338 0.750 1.275 0.950 0.650 0.450 0.288 0.237 0.212

----------------------------------------

TITLE: Defining parameter source constants in VIC model
DESCRIPTION: Constants used to specify whether vegetation parameters should be taken from the vegetation parameter file or the vegetation library file.

LANGUAGE: c
CODE:
FROM_VEGPARAM

----------------------------------------

TITLE: Configuring 2-Day Output Stream for VIC Model
DESCRIPTION: Sets up an output stream that aggregates model variables every 2 days, with different aggregation methods for each variable including maximum for albedo, minimum for soil temperature, sum for pressure, and others.

LANGUAGE: config
CODE:
# Output every 2 days
OUTFILE     STREAM_NDAYS_2
AGGFREQ     NDAYS        2
OUTVAR      OUT_ALBEDO    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_MAX
OUTVAR      OUT_SOIL_TEMP *   OUT_TYPE_DOUBLE   *   AGG_TYPE_MIN
OUTVAR      OUT_PRESSURE  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_SUM
OUTVAR      OUT_AIR_TEMP  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_AVG
OUTVAR      OUT_LWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_END

----------------------------------------

TITLE: Configuring Meteorological Forcing Data
DESCRIPTION: Defines the meteorological forcing data file path and maps variable names to their physical meaning. Includes mappings for air temperature, precipitation, pressure, shortwave radiation, longwave radiation, vapor pressure, and wind, plus wind measurement height.

LANGUAGE: configuration
CODE:
FORCING1	  $test_data_dir/image/Stehekin/forcings/Stehekin_image_test.forcings_10days.
FORCE_TYPE    AIR_TEMP 	   tas
FORCE_TYPE    PREC 	       prcp
FORCE_TYPE    PRESSURE 	   pres
FORCE_TYPE    SWDOWN       dswrf
FORCE_TYPE    LWDOWN 	     dlwrf
FORCE_TYPE    VP           vp
FORCE_TYPE    WIND         wind
WIND_H        10.0

----------------------------------------

TITLE: Defining Jarvis stomatal resistance constant in VIC model
DESCRIPTION: Constant value for RC_MODE that selects the traditional Jarvis formulation for calculating stomatal resistance, which is the default method.

LANGUAGE: c
CODE:
RC_JARVIS

----------------------------------------

TITLE: Configuring Lake Model Parameters in VIC Model
DESCRIPTION: Defines lake-specific physical parameters including profiles, ice and snow properties, and radiation attenuation constants for ice, snow, and water layers.

LANGUAGE: namelist
CODE:
# Lake Model Parameters

# lake model related constants
LAKE_TMELT 0.0
LAKE_MAX_SURFACE_LAKE 0.6  # max. surface layer thickness for E-B (m)
LAKE_BETA 0.001  # Curve shape parameter for lake profile.
LAKE_FRACMIN 0.10  # min ice thickness in meters
LAKE_FRACLIM 0.02  # lower limit on fractional ice cover
LAKE_DM 1.38889E-07  # molecular diffusivity of water
LAKE_SNOWCRIT 0.05  # for albedo, in m
LAKE_ZWATER 0.0045  # 0.004 - original value
LAKE_ZSNOW 0.005
LAKE_RHOSNOW 250.0  # densities snow on ice
LAKE_CONDI 2.3  # thermal conductivity of ice
LAKE_CONDS 0.7  # thermal conductivity of snow

# attenuation of short and longwave radiation through ice (1/m)
LAKE_LAMISW 1.5  # 1.5 in Patterson & Hamblin
LAKE_LAMILW 20.0  # 20.0 in Patterson & Hamblin

# attenuation of short and longwave radiation through snow (1/m)
LAKE_LAMSSW 6.0  # 6.0 in Patterson & Hamblin
LAKE_LAMSLW 20.0  # 20.0 in Patterson & Hamblin

# attenuation of short and longwave radiation through water (1/m)
LAKE_LAMWSW 0.3  # San Fran Bay data: 0.31 - 29.9 1/m (visible)
LAKE_LAMWLW 1.4  # Hostetler and Bartlein assume 0.85 1/m (total)
LAKE_A1 0.7  # Fraction of radiation in visible band.
LAKE_A2 0.3  # Fraction of radiation in infrared band.
LAKE_QWTAU 43200.0  # D. Pollard sub-ice time constant. (86400. / 2.)

----------------------------------------

TITLE: Configuring Energy and Soil Simulation Options
DESCRIPTION: Sets the energy balance and frozen soil options for the simulation. Full energy balance is enabled while frozen soil processes are disabled. Specifies the aerodynamic resistance algorithm to use for canopy and snow.

LANGUAGE: configuration
CODE:
FULL_ENERGY TRUE
FROZEN_SOIL	FALSE

AERO_RESIST_CANSNOW AR_406

----------------------------------------

TITLE: Defining autotrophic respiration output variable in VIC model
DESCRIPTION: Output variable representing autotrophic respiration (plant respiration) in carbon cycle simulations, measured in grams of carbon per square meter per day.

LANGUAGE: c
CODE:
OUT_RAUT

----------------------------------------

TITLE: Configuring Saturated Vapor Pressure Parameters in VIC Model
DESCRIPTION: Defines the coefficients for the saturated vapor pressure curve calculation. These parameters are used in the model's evapotranspiration and other moisture flux calculations.

LANGUAGE: conf
CODE:
# Saturated Vapor Pressure Curve Parameters
SVP_A 0.61078
SVP_B 17.269
SVP_C 237.3

----------------------------------------

TITLE: Defining Domain and Spatial Properties
DESCRIPTION: Specifies the domain file containing spatial information and maps variable names in the file to their function in the model. Includes path to the domain file and mappings for latitude, longitude, mask, area, fraction, and dimension variables.

LANGUAGE: configuration
CODE:
DOMAIN $test_data_dir/image/Stehekin/parameters/domain.stehekin.20151028.nc
DOMAIN_TYPE    LAT     lat
DOMAIN_TYPE    LON     lon
DOMAIN_TYPE    MASK    mask
DOMAIN_TYPE    AREA    area
DOMAIN_TYPE    FRAC    frac
DOMAIN_TYPE    YDIM    lat
DOMAIN_TYPE    XDIM    lon

----------------------------------------

TITLE: Defining net primary productivity output variable in VIC model
DESCRIPTION: Output variable for net primary productivity in carbon cycle simulations, representing the net carbon uptake by plants after accounting for respiration.

LANGUAGE: c
CODE:
OUT_NPP

----------------------------------------

TITLE: Defining Iteration Bracket Widths for VIC Model
DESCRIPTION: Parameters that define temperature and vapor pressure ranges for bracketing solutions while computing energy and moisture balances in different model components.

LANGUAGE: config
CODE:
# Iteration bracket widths
SNOW_DT 5.0  # Used to bracket snow surface temperatures while computing the
               # snow surface energy balance (C)
SURF_DT 1.0  # Used to bracket soil surface temperatures while computing
               # energy balance (C)
SOIL_DT 0.25  # Used to bracket soil temperatures while solving the soil
                # thermal flux (C)
CANOPY_DT 1.0  # Used to bracket canopy air temperatures while computing
                 #energy balance (C)
CANOPY_VP 25.0  # Used to bracket canopy vapor pressures while computing
                  # moisture balance (Pa)

----------------------------------------

TITLE: Initial State Configuration for VIC Model
DESCRIPTION: Defines the initial state file path and timing variables for model initialization. These settings control where and when the model reads its starting conditions from.

LANGUAGE: config
CODE:
$init_state
STATENAME   $state_dir/states
STATEYEAR   $stateyear
STATEMONTH  $statemonth
STATEDAY    $stateday
STATESEC    $statesec

----------------------------------------

TITLE: Defining absorbed PAR output variable in VIC model
DESCRIPTION: Output variable representing the amount of photosynthetically active radiation absorbed by the vegetation canopy, used in photosynthesis calculations.

LANGUAGE: c
CODE:
OUT_APAR

----------------------------------------

TITLE: Setting up LOG_DIR in VIC's global parameter file
DESCRIPTION: Example of specifying the LOG_DIR parameter in VIC's global parameter file to save runtime logs, which is recommended for debugging and documentation purposes.

LANGUAGE: markdown
CODE:
`LOG_DIR`

----------------------------------------

TITLE: Domain Configuration for VIC Model
DESCRIPTION: Specifies the domain file and dimension mapping for the Stehekin watershed. Defines how the model interprets geographic dimensions and attributes from the input file.

LANGUAGE: config
CODE:
DOMAIN         $test_data_dir/image/Stehekin/parameters/domain.stehekin.20151028.nc
DOMAIN_TYPE    LAT     lat
DOMAIN_TYPE    LON     lon
DOMAIN_TYPE    MASK    mask
DOMAIN_TYPE    AREA    area
DOMAIN_TYPE    FRAC    frac
DOMAIN_TYPE    YDIM    lat
DOMAIN_TYPE    XDIM    lon

----------------------------------------

TITLE: Defining soil moisture fraction constant for thermal nodes in VIC model
DESCRIPTION: Constant that sets the moisture content for soil thermal nodes that extend below the hydrological soil layers, defined in the vicNl_def.h header file.

LANGUAGE: c
CODE:
SLAB_MOIST_FRACT

----------------------------------------

TITLE: Setting OUTFILE prefix in VIC Classic Driver
DESCRIPTION: Demonstrates the syntax for specifying output filenames in VIC's Classic Driver using the OUTFILE parameter with a prefix. Informative prefixes are recommended to identify simulation characteristics.

LANGUAGE: markdown
CODE:
`OUTFILE {prefix}`

----------------------------------------

TITLE: Enabling Routing During VIC Compilation using Make Command
DESCRIPTION: Command line option to enable routing when compiling the VIC model using the make command. This sets the ROUT variable to use the RVIC routing implementation.

LANGUAGE: bash
CODE:
make ROUT=rout_rvic

----------------------------------------

TITLE: Model Structure and Time Configuration in VIC
DESCRIPTION: Defines the basic model structure including number of soil layers, nodes, and time steps per day. Also sets the simulation period from January 1, 1949 to January 10, 1949, with energy balance and frozen soil processes disabled.

LANGUAGE: config
CODE:
NLAYER                3
NODES                 3
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             1949
STARTMONTH            01
STARTDAY              01
ENDYEAR               1949
ENDMONTH              01
ENDDAY                10
FULL_ENERGY           FALSE
FROZEN_SOIL           FALSE

----------------------------------------

TITLE: Pulling and Running the VIC Docker Image
DESCRIPTION: Commands to download the official VIC Docker image from Docker Hub, list available images, run the container, and open an interactive bash session. The VIC Docker image contains the minimum requirements to run VIC including gcc, netCDF, and MPI.

LANGUAGE: Bash
CODE:
# Pull the docker_vic
docker pull uwhydro/vic:docker_vic
# List available docker images, docker_vic should be listed
docker images
# Run the docker_vic, this will just build the VIC drivers and exit
docker run -i uwhydro/vic:docker_vic
# Open an interactive bash command line in the docker_vic
docker run -it uwhydro/vic:docker_vic /bin/bash

----------------------------------------

TITLE: Full Energy mode parameter setting
DESCRIPTION: Shows the parameter for enabling full energy balance mode in VIC simulations, which is referenced as part of the recommended output filename convention.

LANGUAGE: markdown
CODE:
`FULL_ENERGY == TRUE`

----------------------------------------

TITLE: Instantaneous Output Stream Configuration for VIC
DESCRIPTION: Configures an output stream for instantaneous values at every model timestep. Includes variables for albedo, soil temperature, pressure, air temperature, and radiation components with beginning-of-step aggregation.

LANGUAGE: config
CODE:
# Instantaneous output
OUTFILE     STREAM_NSTEPS_1
AGGFREQ     NSTEPS        1
OUTVAR      OUT_ALBEDO    *   *   *   AGG_TYPE_BEG
OUTVAR      OUT_SOIL_TEMP *   *   *   AGG_TYPE_BEG
OUTVAR      OUT_PRESSURE  *   *   *   AGG_TYPE_BEG
OUTVAR      OUT_AIR_TEMP  *   *   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   *   *   AGG_TYPE_BEG
OUTVAR      OUT_LWDOWN    *   *   *   AGG_TYPE_BEG

----------------------------------------

TITLE: Cloning a Forked VIC Repository in Git
DESCRIPTION: Command to clone your fork of the VIC repository to your local machine. This creates a local copy of your GitHub fork in the current directory with a folder named 'VIC'.

LANGUAGE: bash
CODE:
git clone https://github.com/username/VIC.git

----------------------------------------

TITLE: Adding New Output Variable to Enum Declaration in C
DESCRIPTION: Shows how to add a new output variable to the output variable enum in vic_driver_shared_all.h. The new variable should be added just before the N_OUTVAR_TYPES counter value.

LANGUAGE: C
CODE:
    /******************************************************************************
     * @brief   Output Variable Types
     *****************************************************************************/
    enum
    {
        // Water Balance Terms - state variables
        OUT_ASAT,             /**< Saturated Area Fraction */
        ...
        OUT_CSLOW,            /**< Carbon density in slow pool [g C/m2] */
        OUT_NEW_VAR_NAME      /**< Description of new output variable [units] */
        // Last value of enum - DO NOT ADD ANYTHING BELOW THIS LINE!!
        // used as a loop counter and must be >= the largest value in this enum
        N_OUTVAR_TYPES        /**< used as a loop counter*/
    };

----------------------------------------

TITLE: 7200-Second Aggregation Output Stream Configuration for VIC
DESCRIPTION: Configures an output stream with 7200-second (2-hour) aggregation intervals. Includes variables with different aggregation methods: maximum albedo, minimum soil temperature, summed pressure, beginning air temperature, average shortwave, and ending longwave radiation.

LANGUAGE: config
CODE:
# Output every 7200 seconds
OUTFILE     STREAM_NSECONDS_7200
AGGFREQ     NSECONDS      7200
OUTVAR      OUT_ALBEDO    *   *   *   AGG_TYPE_MAX
OUTVAR      OUT_SOIL_TEMP *   *   *   AGG_TYPE_MIN
OUTVAR      OUT_PRESSURE  *   *   *   AGG_TYPE_SUM
OUTVAR      OUT_AIR_TEMP  *   *   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   *   *   AGG_TYPE_AVG
OUTVAR      OUT_LWDOWN    *   *   *   AGG_TYPE_END

----------------------------------------

TITLE: Changing to VIC Directory in Bash
DESCRIPTION: Command to change the current working directory to the newly cloned VIC repository folder.

LANGUAGE: bash
CODE:
cd VIC

----------------------------------------

TITLE: Setting Output Variable Metadata in C
DESCRIPTION: Shows how to populate the metadata for a new output variable in the set_output_met_data_info() function in vic_metadata.c, including varname, long_name, standard_name, units, and description.

LANGUAGE: C
CODE:
    /* new variable metadata [kg m-2] */
    strcpy(out_metadata[OUT_NEW_VAR_NAME].varname, "OUT_NEW_VAR_NAME");
    strcpy(out_metadata[OUT_NEW_VAR_NAME].long_name, "a_descriptive_long_name");
    strcpy(out_metadata[OUT_NEW_VAR_NAME].standard_name, "new_out_var_std_name");
    strcpy(out_metadata[OUT_NEW_VAR_NAME].units, "kg m-2");
    strcpy(out_metadata[OUT_NEW_VAR_NAME].description, "new var description");

----------------------------------------

TITLE: Configuring Miscellaneous Simulation Parameters in VIC Model
DESCRIPTION: Miscellaneous simulation parameter for the VIC hydrologic model. Shows the commented default value for continuing simulation after encountering an error on a grid cell.

LANGUAGE: plaintext
CODE:
#######################################################################
# Miscellaneous Simulation Parameters
# Generally these default values do not need to be overridden
#######################################################################
#CONTINUEONERROR    TRUE    # TRUE = if simulation aborts on one grid cell, continue to next grid cell

----------------------------------------

TITLE: Adding All Changes in Git
DESCRIPTION: Command to stage all changed files in the current directory for the next commit. This tells Git that you want to include all modifications in your next commit.

LANGUAGE: bash
CODE:
git add *

----------------------------------------

TITLE: Setting Number of Elements for Output Variable in C
DESCRIPTION: Shows how to define the number of elements for a multi-valued output variable (such as layer-specific values) in vic_metadata.c.

LANGUAGE: C
CODE:
out_data[OUT_NEW_VAR_NAME].nelem = options.Nlayer;

----------------------------------------

TITLE: Configuring Meteorological Forcing Disaggregation in VIC Model
DESCRIPTION: Configuration options for meteorological forcing disaggregation in the VIC hydrologic model. Includes parameters for air pressure computation, shortwave radiation adjustment, vapor pressure iteration, and longwave radiation estimation.

LANGUAGE: plaintext
CODE:
#######################################################################
# Meteorological Forcing Disaggregation Parameters
# Generally these default values do not need to be overridden
#######################################################################
#PLAPSE     TRUE    # This controls how VIC computes air pressure when air pressure is not supplied as an input forcing: TRUE = set air pressure to sea level pressure, lapsed to grid cell average elevation; FALSE = set air pressure to constant 95.5 kPa (as in all versions of VIC pre-4.1.1)
#SW_PREC_THRESH     0   # Minimum daily precip [mm] that can cause dimming of incoming shortwave; default = 0.
#MTCLIM_SWE_CORR    TRUE    # This controls VIC's estimates of incoming shortwave in the presence of snow; TRUE = adjust incoming shortwave for snow albedo effect; FALSE = do not adjust shortwave; default = TRUE
#VP_ITER        VP_ITER_ANNUAL  # This controls VIC's iteration between estimates of shortwave and vapor pressure:
#           # VP_ITER_NEVER = never iterate; make estimates separately
#           # VP_ITER_ALWAYS = always iterate once
#           # VP_ITER_ANNUAL = iterate once for arid climates based on annual Precip/PET ratio
#           # VP_ITER_CONVERGE = iterate until shortwave and vp stabilize
#           # default = VP_ITER_ALWAYS
#VP_INTERP  TRUE    # This controls sub-daily humidity estimates; TRUE = interpolate daily VP estimates linearly between sunrise of one day to the next; FALSE = hold VP constant for entire day
#LW_TYPE        LW_PRATA    # This controls the algorithm used to estimate clear-sky longwave radiation:
#           # LW_TVA = Tennessee Valley Authority algorithm (1972) (this was traditional VIC algorithm)
#           # other options listed in vic_driver_shared_all.h
#           # default = LW_PRATA
#LW_CLOUD   LW_CLOUD_DEARDORFF  # This controls the algorithm used to estimate the influence of clouds on total longwave:
#           # LW_CLOUD_BRAS = method from Bras textbook (this was the traditional VIC algorithm)
#           # LW_CLOUD_DEARDORFF = method of Deardorff (1978)
#           # default = LW_CLOUD_DEARDORFF

----------------------------------------

TITLE: Removing Files in Git
DESCRIPTION: Command to delete a file and stage this deletion for the next commit. This properly removes files from the repository while maintaining history.

LANGUAGE: bash
CODE:
git rm filename

----------------------------------------

TITLE: Specifying Output Variable Aggregation Method in C
DESCRIPTION: Demonstrates how to specify a non-default aggregation method for a new output variable in the get_default_outvar_aggtype() function.

LANGUAGE: C
CODE:
    switch (varid) {
    ...
    // AGG_TYPE_END
    ...
    case OUT_NEW_VAR_NAME:

----------------------------------------

TITLE: Configuring Turbulent Flux Parameters in VIC Model
DESCRIPTION: Configuration options for turbulent flux calculations in the VIC hydrologic model. Shows commented default values for minimum wind speed and aerodynamic resistance in snow-filled canopy.

LANGUAGE: plaintext
CODE:
#######################################################################
# Turbulent Flux Parameters
# Generally these default values do not need to be overridden
#######################################################################
#MIN_WIND_SPEED 0.1 # minimum allowable wind speed (m/s)
#AERO_RESIST_CANSNOW    AR_406_FULL # Options for aerodynamic resistance in snow-filled canopy:
#           # AR_406    = multiply by 10 for latent heat but do NOT multiply by 10 for sensible heat and do NOT apply stability correction (as in VIC 4.0.6); when no snow in canopy, use surface aero_resist for ET.
#           # AR_406_LS     = multiply by 10 for latent heat AND sensible heat and do NOT apply stability correction; when no snow in canopy, use surface aero_resist for ET.
#           # AR_406_FULL   = multiply by 10 for latent heat AND sensible heat and do NOT apply stability correction; additionally, always use overstory aero_resist for ET (as in 4.1.0).
#           # AR_410    = apply stability correction but do NOT multiply by 10 (as in VIC 4.1.0); additionally, always use overstory aero_resist for ET (as in 4.1.0).
#           # Default   = AR_406_FULL

----------------------------------------

TITLE: Committing Changes in Git
DESCRIPTION: Command to commit staged changes to your local repository. This opens a text editor where you can add a commit message describing your changes.

LANGUAGE: bash
CODE:
git commit

----------------------------------------

TITLE: Adding Single-Element Output Variable to put_data Function in C
DESCRIPTION: Shows how to add logic for a single-element output variable in the put_data() function, accumulating weighted values across vegetation and elevation bands.

LANGUAGE: C
CODE:
/** record canopy interception **/
if ( veg < veg_con[0].vegetat_type_num ) {
    out_data[OUT_WDEW][0] += veg_var[veg][band].Wdew
        * Cv * mu * AreaFract[band] * TreeAdjustFactor[band];
}

----------------------------------------

TITLE: Setting Up VIC Model Domain Parameters
DESCRIPTION: Configures the model domain using NetCDF files for the Stehekin watershed, specifying dimension types, variable names, and mapping between model concepts and NetCDF variables.

LANGUAGE: config
CODE:
DOMAIN $test_data_dir/image/Stehekin/parameters/domain.stehekin.20151028.nc
DOMAIN_TYPE    LAT     lat
DOMAIN_TYPE    LON     lon
DOMAIN_TYPE    MASK    mask
DOMAIN_TYPE    AREA    area
DOMAIN_TYPE    FRAC    frac
DOMAIN_TYPE    YDIM    lat
DOMAIN_TYPE    XDIM    lon

----------------------------------------

TITLE: Cloning Tonic Repository from GitHub (Shell)
DESCRIPTION: Downloads the Tonic source code from GitHub and navigates to the project directory.

LANGUAGE: shell
CODE:
git clone git@github.com:UW-Hydro/tonic.git
cd tonic

----------------------------------------

TITLE: Checking VIC Version in Bash
DESCRIPTION: Commands to check which release of VIC is running. For VIC 4, use 'vicNl -v', and for VIC 5 and later versions, use 'vic_{classic,image}.exe -v'.

LANGUAGE: bash
CODE:
vicNl -v

LANGUAGE: bash
CODE:
vic_{classic,image}.exe -v

----------------------------------------

TITLE: Configuring Instantaneous Output Stream for VIC Model
DESCRIPTION: Sets up an output stream for instantaneous model output variables with beginning of step aggregation type for all variables including albedo, soil temperature, pressure, air temperature, and radiation.

LANGUAGE: config
CODE:
# Instantaneous output
OUTFILE     STREAM_NSTEPS_1
AGGFREQ     NSTEPS        1
OUTVAR      OUT_ALBEDO    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG
OUTVAR      OUT_SOIL_TEMP *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG
OUTVAR      OUT_PRESSURE  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG
OUTVAR      OUT_AIR_TEMP  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG
OUTVAR      OUT_LWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG

----------------------------------------

TITLE: Installing Tonic to a User-Specific Location (Shell)
DESCRIPTION: Creates a directory in the user's home directory and installs Tonic there, which is useful when the user does not have write permissions to the system Python installation.

LANGUAGE: shell
CODE:
mkdir -p $HOME/lib/python/

----------------------------------------

TITLE: Defining vegetation cover parameter option in VIC model
DESCRIPTION: Parameter that indicates whether vegetation cover values are included in the vegetation parameter file.

LANGUAGE: c
CODE:
VEGPARAM_VEGCOVER

----------------------------------------

TITLE: Configuring 3-Hour Output Stream for VIC Model
DESCRIPTION: Sets up an output stream that aggregates model variables every 180 minutes (3 hours), with different aggregation types for each variable including maximum for albedo, minimum for soil temperature, and others.

LANGUAGE: config
CODE:
# Output every 180 minutes (3 hours)
OUTFILE     STREAM_NMINUTES_180
AGGFREQ     NMINUTES      180
OUTVAR      OUT_ALBEDO    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_MAX
OUTVAR      OUT_SOIL_TEMP *   OUT_TYPE_DOUBLE   *   AGG_TYPE_MIN
OUTVAR      OUT_PRESSURE  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_SUM
OUTVAR      OUT_AIR_TEMP  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_AVG
OUTVAR      OUT_LWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_END

----------------------------------------

TITLE: Setting Environment Variable for User-Specific Python Library Path (Shell)
DESCRIPTION: Sets the PYTHONPATH environment variable to include the user's local Python library directory in the .bashrc file.

LANGUAGE: shell
CODE:
export PYTHONPATH=$HOME/lib/python:$PYTHONPATH

----------------------------------------

TITLE: Defining vegetation library cover option in VIC model
DESCRIPTION: Boolean option that specifies whether the vegetation library contains monthly vegetation cover values for each vegetation class.

LANGUAGE: c
CODE:
VEGLIB_VEGCOVER

----------------------------------------

TITLE: 2-Day Aggregation Output Stream Configuration for VIC
DESCRIPTION: Configures an output stream with 2-day aggregation intervals. Uses various aggregation methods for different variables including maximum, minimum, sum, beginning, average, and ending values.

LANGUAGE: config
CODE:
# Output every 2 days
OUTFILE     STREAM_NDAYS_2
AGGFREQ     NDAYS        2
OUTVAR      OUT_ALBEDO    *   *   *   AGG_TYPE_MAX
OUTVAR      OUT_SOIL_TEMP *   *   *   AGG_TYPE_MIN
OUTVAR      OUT_PRESSURE  *   *   *   AGG_TYPE_SUM
OUTVAR      OUT_AIR_TEMP  *   *   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   *   *   AGG_TYPE_AVG
OUTVAR      OUT_LWDOWN    *   *   *   AGG_TYPE_END

----------------------------------------

TITLE: Testing Tonic Installation (Shell)
DESCRIPTION: Verifies the Tonic installation by checking the command-line utility and importing the package in Python without errors.

LANGUAGE: shell
CODE:
vic_utils -h
python -c 'import tonic'

----------------------------------------

TITLE: Defining carbon cycle forcing variables in VIC model
DESCRIPTION: New input forcing variables used for carbon cycle simulations, including atmospheric CO2 concentration, direct sunlight fraction, and photosynthetically active radiation.

LANGUAGE: c
CODE:
CATM

----------------------------------------

TITLE: Configuring VIC Soil and Vegetation Parameters
DESCRIPTION: Defines the soil and vegetation parameter files and related configuration options for the VIC model. Includes paths to soil parameters, vegetation library, and vegetation parameter files, along with specifications for root zones and canopy representation.

LANGUAGE: config
CODE:
SOIL                  $test_data_dir/inputdata/ec_flux_towers/params/soil_param.site_test.txt
BASEFLOW              ARNO
JULY_TAVG_SUPPLIED    FALSE
ORGANIC_FRACT         FALSE

VEGLIB                $test_data_dir/inputdata/ec_flux_towers/params/veg_lib_IGBP.fv
VEGLIB_FCAN           TRUE

VEGPARAM              $test_data_dir/inputdata/ec_flux_towers/params/veg_param.sites.IGBP.modis
ROOT_ZONES            3

VEGPARAM_LAI          TRUE
VEGPARAM_FCAN         TRUE
VEGPARAM_ALB          TRUE

LAI_SRC               FROM_VEGPARAM
FCAN_SRC              FROM_VEGPARAM
# ALB_SRC            FROM_VEGPARAM

SNOW_BAND             1

RESULT_DIR            $result_dir

CONSTANTS             $test_dir/science/vic_parameters_42_compat.txt

----------------------------------------

TITLE: Displaying Help for VIC Parameter Grid Conversion (Shell)
DESCRIPTION: Shows the command-line help documentation for the vic_utils grid_params utility, which is used to convert VIC parameters to gridded netCDF format.

LANGUAGE: shell
CODE:
vic_utils grid_params --help

----------------------------------------

TITLE: Defining photosynthetically active radiation forcing variable in VIC model
DESCRIPTION: Forcing variable representing the photosynthetically active radiation, a key input for simulating plant photosynthesis in carbon cycle calculations.

LANGUAGE: c
CODE:
PAR

----------------------------------------

TITLE: Configuring VIC Snow Output Variables
DESCRIPTION: Defines the snow-related output file and variables for the VIC model. Specifies file format, compression options, aggregation frequency, and lists the snow-related variables to be saved in the output file.

LANGUAGE: config
CODE:
OUTFILE         snow 16
AGGFREQ         NHOURS
COMPRESS        FALSE
OUT_FORMAT      ASCII
OUTVAR          OUT_SWE                 %.6g    *       *
OUTVAR          OUT_SNOW_DEPTH          %.6g    *       *
OUTVAR          OUT_SNOW_CANOPY         %.6g    *       *
OUTVAR          OUT_SNOW_COVER          %.6g    *       *
OUTVAR          OUT_ADVECTION           %.6g    *       *
OUTVAR          OUT_DELTACC             %.6g    *       *
OUTVAR          OUT_SNOW_FLUX           %.6g    *       *
OUTVAR          OUT_RFRZ_ENERGY         %.6g    *       *
OUTVAR          OUT_MELT_ENERGY         %.6g    *       *
OUTVAR          OUT_ADV_SENS            %.6g    *       *
OUTVAR          OUT_LATENT_SUB          %.6g    *       *
OUTVAR          OUT_SNOW_SURF_TEMP      %.6g    *       *
OUTVAR          OUT_SNOW_PACK_TEMP      %.6g    *       *
OUTVAR          OUT_SNOW_MELT           %.6g    *       *
OUTVAR          OUT_ALBEDO              %.6g    *       *
OUTVAR          OUT_SALBEDO             %.6g    *       *

----------------------------------------

TITLE: Adding New Forcing Variable to Enum Declaration in C
DESCRIPTION: Demonstrates how to add a new forcing variable to the forcing types enum in vic_driver_shared_all.h. New variables should be added just before the SKIP placeholder.

LANGUAGE: C
CODE:
    /******************************************************************************
     * @brief   Forcing Variable Types
     *****************************************************************************/
    enum
    {
        AIR_TEMP,       /**< air temperature per time step [C] (ALMA_INPUT: [K]) */
        ...
        WIND,           /**< meridional component of wind speed [m/s] */
        NEW_FORCE_VAR,  /**< Description of new forcing variable [units] */
        SKIP,           /**< place holder for unused data columns */
        // Last value of enum - DO NOT ADD ANYTHING BELOW THIS LINE!!
        // used as a loop counter and must be >= the largest value in this enum
        N_FORCING_TYPES  /**< Number of forcing types*/
    };

----------------------------------------

TITLE: Defining shortwave to PAR conversion constant in VIC model
DESCRIPTION: Conversion factor used to calculate photosynthetically active radiation from shortwave radiation when PAR is not provided as a forcing variable.

LANGUAGE: c
CODE:
SW2PAR

----------------------------------------

TITLE: Creating Time Series Plots of Classic Driver Variables in Python
DESCRIPTION: Demonstrates how to create time series plots of multiple variables (precipitation, evapotranspiration, and runoff) from the VIC classic driver output using pandas' built-in plotting functionality.

LANGUAGE: python
CODE:
# Select the precipitation, evapotranspiration, and runoff variables and plot their timeseries.
df[['OUT_PREC', 'OUT_EVAP', 'OUT_RUNOFF']].plot()

----------------------------------------

TITLE: Configuring VIC Model Parameters for Stehekin Watershed Simulation
DESCRIPTION: Complete configuration file for a VIC hydrological model simulation of the Stehekin watershed. It specifies model structure, time settings, input/output paths, physical process options, and output variables focused on water balance components.

LANGUAGE: plaintext
CODE:
NLAYER                3
NODES                 3
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             1949
STARTMONTH            01
STARTDAY              01
STARTSEC              00
ENDYEAR               1949
ENDMONTH              01
ENDDAY                10
FULL_ENERGY           FALSE
FROZEN_SOIL           FALSE
FORCING1              $test_data_dir/classic/Stehekin/forcings/full_data_
FORCE_FORMAT          ASCII
FORCE_TYPE            PREC
FORCE_TYPE            AIR_TEMP
FORCE_TYPE            SWDOWN
FORCE_TYPE            LWDOWN
FORCE_TYPE            SKIP
FORCE_TYPE            PRESSURE
FORCE_TYPE            VP
FORCE_TYPE            WIND
FORCE_STEPS_PER_DAY   24
FORCEYEAR             1949
FORCEMONTH            01
FORCEDAY              01
GRID_DECIMAL          4
WIND_H                10.0
SOIL                  $test_data_dir/classic/Stehekin/parameters/Stehekin_soil.txt
BASEFLOW              ARNO
JULY_TAVG_SUPPLIED    FALSE
ORGANIC_FRACT         FALSE
VEGLIB                $test_data_dir/classic/Stehekin/parameters/Stehekin_veglib.txt
VEGPARAM              $test_data_dir/classic/Stehekin/parameters/Stehekin_vegparam.txt
ROOT_ZONES            3
VEGPARAM_LAI          TRUE
LAI_SRC               FROM_VEGLIB
SNOW_BAND             5    $test_data_dir/classic/Stehekin/parameters/Stehekin_snowbands.txt
RESULT_DIR            $result_dir

OUTFILE             wb
COMPRESS            FALSE
OUT_FORMAT          ASCII
AGGFREQ             NDAYS   1
OUTVAR              OUT_PREC
OUTVAR              OUT_EVAP
OUTVAR              OUT_RUNOFF
OUTVAR              OUT_BASEFLOW
OUTVAR              OUT_DELINTERCEPT
OUTVAR              OUT_DELSWE
OUTVAR              OUT_DELSURFSTOR
OUTVAR              OUT_DELSOILMOIST
OUTVAR              OUT_WDEW
OUTVAR              OUT_SWE
OUTVAR              OUT_SURFSTOR
OUTVAR              OUT_SOIL_MOIST
OUTVAR              OUT_EVAP_BARE
OUTVAR              OUT_EVAP_CANOP
OUTVAR              OUT_TRANSP_VEG
OUTVAR              OUT_SUB_SNOW
OUTVAR              OUT_SUB_SURFACE
OUTVAR              OUT_SUB_BLOWING
OUTVAR              OUT_SUB_CANOP
OUTVAR              OUT_WATER_ERROR

----------------------------------------

TITLE: Defining carbon cycle output variables in VIC model
DESCRIPTION: Output variables related to carbon cycle simulations, including atmospheric CO2, cosine of solar zenith angle, direct radiation fraction, and photosynthetically active radiation.

LANGUAGE: c
CODE:
OUT_CATM

----------------------------------------

TITLE: Creating Multi-dimensional Facet Plots from 4D VIC Image Driver Output in Python
DESCRIPTION: Demonstrates plotting a 4D variable (soil temperature) with time on the x-axis and soil layers on the y-axis of a facet grid. The data is resampled to 3-hour intervals from a specific date.

LANGUAGE: python
CODE:
ds['OUT_SOIL_TEMP'].sel(time='1949-01-04').resample(
    '3h', dim='time', how='mean').plot(
        col='time', row='nlayer', levels=10)

----------------------------------------

TITLE: Creating a New VolumeLookupCache Instance in Go
DESCRIPTION: Function to create a new VolumeLookupCache instance with initialized maps and a context. This serves as a constructor for the volume caching mechanism in the vic project.

LANGUAGE: go
CODE:
func NewVolumeLookupCache(ctx context.Context) *VolumeLookupCache {
	v := &VolumeLookupCache{
		volStores: make(map[string]VolumeStorer),
		mapping:   make(map[string]map[string]Volume),
		ctx:       ctx,
	}

	return v
}

----------------------------------------

TITLE: Defining photosynthetically active radiation output variable in VIC model
DESCRIPTION: Output variable for photosynthetically active radiation, which matches the PAR forcing variable used in photosynthesis calculations.

LANGUAGE: c
CODE:
OUT_PAR

----------------------------------------

TITLE: Plotting Domain Mean Time Series from VIC Image Driver Output in Python
DESCRIPTION: Demonstrates how to calculate and plot the domain mean of downward shortwave radiation by averaging across longitude and latitude dimensions and converting the result to a pandas DataFrame for plotting.

LANGUAGE: python
CODE:
ds['OUT_SWDOWN'].mean(dim=('lon', 'lat')).to_dataframe().plot()

----------------------------------------

TITLE: Implementing AddStore Method for VolumeLookupCache in Go
DESCRIPTION: Method that adds a new volume store to the cache. It initializes a new mapping for the store and updates the volume stores collection with appropriate locking mechanisms.

LANGUAGE: go
CODE:
func (v *VolumeLookupCache) AddStore(op trace.Operation, storeName string, vs VolumeStorer) error {
	v.mutex.Lock()
	defer v.mutex.Unlock()

	if _, exists := v.volStores[storeName]; exists {
		return fmt.Errorf("volume store (%s) already exists", storeName)
	}

	v.volStores[storeName] = vs
	v.mapping[storeName] = make(map[string]Volume)

	return nil
}

----------------------------------------

TITLE: Defining carbon cycle output variables in VIC model
DESCRIPTION: Output variables for carbon cycle simulations, including gross primary productivity, autotrophic respiration, net primary productivity, and absorbed photosynthetically active radiation.

LANGUAGE: c
CODE:
OUT_GPP

----------------------------------------

TITLE: Defining photosynthetic stomatal resistance constant in VIC model
DESCRIPTION: Constant value for RC_MODE that selects calculation of stomatal resistance as a function of photosynthetic demand in carbon cycle simulations.

LANGUAGE: c
CODE:
RC_PHOTO

----------------------------------------

TITLE: Calculating Grid Cell Area using CDO
DESCRIPTION: Uses the Climate Data Operators (CDO) tool to calculate the area of each grid cell in the domain. This shell command operates on the temporary domain file created in the previous step.

LANGUAGE: bash
CODE:
cdo -O gridarea temp.nc area.nc
rm temp.nc

----------------------------------------

TITLE: Configuring CI Trigger Pattern for Release Tests
DESCRIPTION: This pattern defines the CI trigger for release tests, using a specific pattern that targets refs/heads/releases/vic and refs/tags/v patterns. It's used to determine when release tests should be triggered in the CI pipeline.

LANGUAGE: text
CODE:
refs/heads/releases/vic/*,refs/tags/v*

----------------------------------------

TITLE: Defining heterotrophic respiration output variable in VIC model
DESCRIPTION: Output variable representing total heterotrophic respiration (decomposition of soil organic matter) vented to the atmosphere from all soil carbon pools.

LANGUAGE: c
CODE:
OUT_RHET

----------------------------------------

TITLE: Setting Up Domain File Variables
DESCRIPTION: This code creates the domain file for a global VIC model setup. It defines mask and fraction variables, applies attributes, and prepares a temporary file for grid area calculation using CDO.

LANGUAGE: python
CODE:
dom_file = os.path.join(opath, 'domain.vic.global0.5deg.%s.nc' % now.strftime('%Y%m%d'))

# Get the mask variable
dom_ds['mask'] = xr.DataArray(target_grid['mask'], coords={'lat': target_grid['yc'],
                                                                 'lon': target_grid['xc']},
                                    dims=('lat', 'lon', ))

# For now, the frac variable is going to be just like the mask
dom_ds['frac'] = dom_ds['mask'].astype(np.float)
dom_ds['frac'].attrs['long_name'] = 'fraction of grid cell that is active'
dom_ds['frac'].attrs['units'] = '1'

# Set variable attributes
for k, v in target_attrs.items():
    if k == 'xc':
        k = 'lon'
    elif k == 'yc':
        k = 'lat'
    dom_ds[k].attrs = v
    
# Write temporary file for gridarea calculation
dom_ds.to_netcdf('temp.nc')

----------------------------------------

TITLE: Setting Ground Surface Properties in VIC Model
DESCRIPTION: Defines surface properties including albedo for bare soil (0.2) and emissivity values for ground, vegetation, ice, and snow surfaces.

LANGUAGE: namelist
CODE:
ALBEDO_BARE_SOIL 0.2  # albedo for bare soil

EMISS_GRND 1.0  # Ground emissivity
EMISS_VEG 1.0  # Veg emissivity
EMISS_ICE 0.97  # Ice emissivity
EMISS_SNOW 1.0  # Snow emissivity

----------------------------------------

TITLE: Defining net ecosystem exchange output variable in VIC model
DESCRIPTION: Output variable for net ecosystem exchange, representing the net carbon flux between the ecosystem and atmosphere, calculated as NPP minus heterotrophic respiration.

LANGUAGE: c
CODE:
OUT_NEE

----------------------------------------

TITLE: Calculating Grid Cell Area with CDO
DESCRIPTION: This bash command uses the Climate Data Operators (CDO) tool to calculate grid cell areas for the domain file. It processes the temporary NetCDF file and creates an area.nc file with cell areas.

LANGUAGE: bash
CODE:
# This step calculates the grid cell area
!cdo -O gridarea temp.nc area.nc
!rm temp.nc

----------------------------------------

TITLE: Setting Default Wind Speed Parameter in VIC Model
DESCRIPTION: Defines the default wind speed of 3.0 m/s to be used when wind is not supplied as a forcing input to the model.

LANGUAGE: namelist
CODE:
DEFAULT_WIND_SPEED 3.0  # Default wind speed [m/s] used when wind is not
                        # supplied as a forcing

----------------------------------------

TITLE: Defining litter carbon pool output variable in VIC model
DESCRIPTION: Output variable representing the carbon density in the litter pool (fast turnover), one of three soil carbon pools in the carbon cycle simulation.

LANGUAGE: c
CODE:
OUT_CLITTER

----------------------------------------

TITLE: Finalizing and Writing the Global Domain File
DESCRIPTION: This code finalizes the domain file by adding the calculated cell areas, writing the NetCDF file, and displaying information about the domain. It also creates a plot of the domain mask.

LANGUAGE: python
CODE:
# Extract the area variable
area = xr.open_dataset('area.nc').load()['cell_area']
dom_ds['area'] = area

# write the domain file
dom_ds.to_netcdf(dom_file)
dom_ds.close()

# document and plot the domain
print(dom_ds)
dom_ds.mask.plot()

----------------------------------------

TITLE: Setting Saturated Vapor Pressure Curve Parameters in VIC Model
DESCRIPTION: Defines the coefficients (A, B, C) used in calculating saturated vapor pressure, which is essential for evapotranspiration and other hydrological processes.

LANGUAGE: namelist
CODE:
# Saturated Vapor Pressure Curve Parameters
SVP_A 0.61078
SVP_B 17.269
SVP_C 237.3

----------------------------------------

TITLE: Defining deprecated precipitation distribution option in VIC model
DESCRIPTION: Option that has been removed from the VIC model, along with associated functions and variables. This feature previously controlled precipitation distribution calculations.

LANGUAGE: c
CODE:
DIST_PRCP

----------------------------------------

TITLE: Creating CONUS Domain Dataset
DESCRIPTION: This code initializes an xarray Dataset for the CONUS 1/8 degree domain file. It sets global attributes and prepares the file path for the domain file with a timestamp.

LANGUAGE: python
CODE:
dom_ds = xr.Dataset()

# Set global attributes
dom_ds.attrs['title'] = 'VIC domain data'
dom_ds.attrs['Conventions'] = 'CF-1.6'
dom_ds.attrs['history'] = 'created by %s, %s' % (user, now)
dom_ds.attrs['user_comment'] = 'VIC domain data'
dom_ds.attrs['source'] = 'generated from VIC CONUS 1.8 deg model parameters, see Maurer et al. (2002) for more information'

dom_file = os.path.join(opath, 'domain.vic.conus0.0125deg.%s.nc' % now.strftime('%Y%m%d'))

# Get the mask variable
dom_ds['mask'] = xr.DataArray(target_grid['mask'], coords={'lat': target_grid['yc'],
                                                                 'lon': target_grid['xc']},
                                    dims=('lat', 'lon', ))

# For now, the frac variable is going to be just like the mask
dom_ds['frac'] = dom_ds['mask'].astype(np.float)
dom_ds['frac'].attrs['long_name'] = 'fraction of grid cell that is active'
dom_ds['frac'].attrs['units'] = '1'

# Set variable attributes
for k, v in target_attrs.items():
    if k == 'xc':
        k = 'lon'
    elif k == 'yc':
        k = 'lat'
    dom_ds[k].attrs = v
    
# Write temporary file for gridarea calculation
dom_ds.to_netcdf('temp.nc')

----------------------------------------

TITLE: Configuring VIC Model State Initialization
DESCRIPTION: Defines the model state initialization parameters, specifying the state file location and the timestamp for the initial state.

LANGUAGE: config
CODE:
#INIT_STATE
STATENAME       $state_dir/states
STATEYEAR       1949
STATEMONTH      1
STATEDAY        11
STATESEC        0

----------------------------------------

TITLE: Adding Upstream Remote in Git
DESCRIPTION: Command to add the original VIC repository as a remote named 'upstream' to track changes from the main project. This allows you to pull in updates from the original repository.

LANGUAGE: bash
CODE:
git remote add --tracking upstream https://github.com/UW-Hydro/VIC.git

----------------------------------------

TITLE: Calculating CONUS Grid Cell Area with CDO
DESCRIPTION: This bash command uses CDO to calculate grid cell areas for the CONUS domain file, similar to the global domain processing. It creates an area.nc file with the calculated cell areas.

LANGUAGE: bash
CODE:
# This step calculates the grid cell area
!cdo -O gridarea temp.nc area.nc
!rm temp.nc

----------------------------------------

TITLE: Function Implementation with Documentation in C
DESCRIPTION: Complete example of a properly documented function in the VIC codebase. Includes a descriptive header comment, proper parameter handling, error checking, and consistent formatting according to VIC conventions.

LANGUAGE: C
CODE:
/**************************************************************************
 * @brief    Determines from the air temperature what fraction of incoming
 *           precipitation is frozen and unfrozen (snow and rain).
 **************************************************************************/
double
calc_rainonly(double air_temp,
              double prec,
              double MAX_SNOW_TEMP,
              double MIN_RAIN_TEMP)
{
    double rainonly;

    rainonly = 0.;
    if (MAX_SNOW_TEMP <= MIN_RAIN_TEMP) {
        log_err("MAX_SNOW_TEMP must be greater then MIN_RAIN_TEMP");
    }
    if (air_temp < MAX_SNOW_TEMP && air_temp > MIN_RAIN_TEMP) {
        rainonly = (air_temp - MIN_RAIN_TEMP) /
                   (MAX_SNOW_TEMP - MIN_RAIN_TEMP) * prec;
    }
    else if (air_temp >= MAX_SNOW_TEMP) {
        rainonly = prec;
    }

    return(rainonly);
}

----------------------------------------

TITLE: Merging Upstream Changes in Git
DESCRIPTION: Command to merge changes from the upstream repository's branch into your current local branch. This updates your local files with any changes made in the original repository.

LANGUAGE: bash
CODE:
git merge upstream/branchname

----------------------------------------

TITLE: Closing All Plot Windows
DESCRIPTION: This code closes all matplotlib plot windows after the domain file processing and visualization steps are complete.

LANGUAGE: python
CODE:
plt.close('all')

----------------------------------------

TITLE: Running Uncrustify with Replacement in Bash
DESCRIPTION: Command for running Uncrustify with the replacement option, which overwrites the original files without creating backups. Used when developers are confident in the formatting changes.

LANGUAGE: bash
CODE:
uncrustify -c uncrustify_VIC_c.cfg --replace --no-backup [files ...]

----------------------------------------

TITLE: Adding a Specific File in Git
DESCRIPTION: Command to stage a specific file for the next commit. This is useful when you only want to commit changes to particular files rather than all modified files.

LANGUAGE: bash
CODE:
git add filename

----------------------------------------

TITLE: Fetching Updates from Upstream in Git
DESCRIPTION: Command to fetch the latest changes from the upstream repository without merging them into your local files. This is the first step in syncing your fork with the original repository.

LANGUAGE: bash
CODE:
git fetch upstream

----------------------------------------

TITLE: Docker Compose Configuration for VIC Project
DESCRIPTION: Docker Compose YAML configuration that defines the vic service with port mappings (9008:9008), environment variables, and volume mounts. The service is configured to restart automatically and includes detailed resource management options.

LANGUAGE: yaml
CODE:
version: '3'

services:
  vic:
    build:
      context: .
    ports:
      - "9008:9008"
    environment:
      - NODE_ENV=prod
    volumes:
      - ./:/app
      - /app/node_modules
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 200M

----------------------------------------

TITLE: Installing Additional Software in VIC Docker Container
DESCRIPTION: Example of installing additional software within the VIC Docker container using the apt-get package manager. Shows how to install the vim text editor as an example.

LANGUAGE: Bash
CODE:
apt-get install vim

----------------------------------------

TITLE: Checking Out a Branch in Git
DESCRIPTION: Command to switch to a specific branch in your local repository. This needs to be done before merging upstream changes or making your own modifications to that branch.

LANGUAGE: bash
CODE:
git checkout branchname

----------------------------------------

TITLE: Importing and Using the VIC Library in Python
DESCRIPTION: This snippet demonstrates how to import the VIC library module in Python and call one of its functions. It shows the basic pattern for utilizing the C-Python bindings created with CFFI.

LANGUAGE: python
CODE:
from vic import lib as vic_lib

vic_lib.print_license()

----------------------------------------

TITLE: Installing Tonic in a Conda Virtual Environment (Shell)
DESCRIPTION: Creates and activates a dedicated Conda environment for Tonic with all necessary dependencies including netcdf4, pandas, numpy, scipy, matplotlib, xray, and basemap.

LANGUAGE: shell
CODE:
conda create -n tonic python=3.4 netcdf4 pandas numpy scipy matplotlib xray basemap
source activate tonic

----------------------------------------

TITLE: Moving or Renaming Files in Git
DESCRIPTION: Command to move or rename a file in Git. This properly tracks the file history when relocating or renaming files in your repository.

LANGUAGE: bash
CODE:
git mv oldpath/oldfilename newpath/newfilename

----------------------------------------

TITLE: Downloading VIC Sample Data to Default Location
DESCRIPTION: Command to download VIC sample datasets to the default location using a bash script. This script retrieves the sample data which is stored in a git submodule.

LANGUAGE: bash
CODE:
./get_sample_data.bash

----------------------------------------

TITLE: Installing Tonic Using Python distutils (Shell)
DESCRIPTION: Installs the Tonic package using Python's distutils module, which adds the vic_utils script to the bin directory and the tonic package to the site-packages directory.

LANGUAGE: shell
CODE:
python setup.py install

----------------------------------------

TITLE: Running Uncrustify Code Formatting Script
DESCRIPTION: Command to run the uncrustify script that ensures code complies with VIC's style conventions. This script should be run from the tools/code_format directory before creating a pull request.

LANGUAGE: bash
CODE:
./run_uncrustify.bash

----------------------------------------

TITLE: Reading VIC Classic Driver ASCII Output with Pandas in Python
DESCRIPTION: Uses pandas to read and parse a VIC classic driver ASCII output file. The function parses space-separated data, handles comments, and creates a datetime index from year, month, and day columns.

LANGUAGE: python
CODE:
# Use the pandas read_table function to read/parse the VIC output file
df = pd.read_table(asci_fname, comment='#', sep=r"\s*", engine='python', 
                   parse_dates=[[0, 1, 2]], index_col='YEAR_MONTH_DAY')
df.head()

----------------------------------------

TITLE: Converting VIC Parameters to NetCDF Using Python API (Python)
DESCRIPTION: Comprehensive script for converting VIC 4 ASCII parameter files to VIC 5 NetCDF format using the Tonic Python API. Handles soil, snow, vegetation parameters and vegetation classes.

LANGUAGE: Python
CODE:
from tonic.models.vic.grid_params import soil, snow, veg, veg_class, Cols, Desc

n_veg_classes = 4
root_zones = 3

# Read the soil parameters
soil_dict = soil('~/workdir/Stehekin_soil.txt', c=Cols(nlayers=3))

# Read the snow parameters
snow_dict = snow('~/workdir/Stehekin_snowbands.txt',
                 soil_dict, c=Cols(snow_bands=5))

# Read the veg parameter file
veg_dict = veg('~/workdir/Stehekin_vegparam.txt',
               soil_dict,
               lai_index=False,
               veg_classes=n_veg_classes)

# Read the veg library file
veg_lib = veg_class('~/workdir/Stehekin_veglib.txt',
                    skiprows=1)

# Determine the grid shape
target_grid, target_attrs = calc_grid(soil_dict['lats'], soil_dict['lons'])

# Grid all the parameters
grid_dict = grid_params(soil_dict, target_grid, version=version
                        veg_dict=veg_dict, veglib_dict=veg_lib, snow_dict=snow_dict)

# Write a netCDF file with all the parameters
write_netcdf('~/workdir/example.params.vic5.nc', target_attrs,
             target_grid=target_grid,
             soil_grid=grid_dict['soil_dict'],
             snow_grid=grid_dict['snow_dict'],
             veglib_dict=veg_lib,
             veg_grid=grid_dict['veg_dict'],
             version='5.0.dev')

----------------------------------------

TITLE: Pushing to a Remote Branch in Git
DESCRIPTION: Command to push your committed changes to a specific branch in your fork on GitHub. This makes your local commits visible in your online repository.

LANGUAGE: bash
CODE:
git push origin branchname

----------------------------------------

TITLE: Creating a Single Time Slice Plot from VIC Image Driver Data in Python
DESCRIPTION: Demonstrates how to select a specific time slice from the evaporation variable in the netCDF dataset and create a simple plot using xarray's built-in plotting capabilities.

LANGUAGE: python
CODE:

ds['OUT_EVAP'].sel(time='1949-01-04-00').plot()

----------------------------------------

TITLE: Configuring Snow Band Output Variables in VIC
DESCRIPTION: Example showing how to specify snow band-specific output variables by appending 'BAND' to variable names. This creates an additional netCDF dimension in the output file for each snow band.

LANGUAGE: config
CODE:
OUTVAR	OUT_SWE_BAND
OUTVAR	OUT_ALBEDO_BAND

----------------------------------------

TITLE: Running VIC Test Suite with Python
DESCRIPTION: Commands for displaying help information and running specific test types (unit and examples) for the classic driver with specified data directories.

LANGUAGE: bash
CODE:
# Print the run_tests.py usage
./tests/run_tests.py -h

# Run the test suite for the unit and examples cases for the classic driver
./tests/run_tests.py unit examples \
    --classic=vic/drivers/classic/vic_classic.exe \
    --data_dir=${SAMPLES_PATH}/data \
    --examples=./tests/examples/examples.cfg

----------------------------------------

TITLE: Creating Multi-panel Plots of Daily Average SWE from VIC Image Driver Output in Python
DESCRIPTION: Shows how to resample VIC output to daily averages and create a multi-panel plot of snow water equivalent (SWE) using xarray's faceting capabilities.

LANGUAGE: python
CODE:
ds['OUT_SWE'].resample('1D', dim='time', how='mean').plot(col='time', col_wrap=4, levels=10)

----------------------------------------

TITLE: Configuring Discharge Output in VIC Global Parameter File
DESCRIPTION: Sets up the VIC model to output the calculated river discharge. This variable must be explicitly set in the global parameter file to see routing results.

LANGUAGE: bash
CODE:
OUTVAR                  OUT_DISCHARGE

----------------------------------------

TITLE: Defining vegetation cover source options in VIC model
DESCRIPTION: Configuration options that control how vegetation cover fraction is handled in the VIC model. These options specify whether to use values from the vegetation parameter file or the vegetation library.

LANGUAGE: c
CODE:
VEGCOVER_SRC

----------------------------------------

TITLE: Creating Georeferenced Maps of VIC Output Using Cartopy in Python
DESCRIPTION: Shows how to create a georeferenced map of mean evapotranspiration using cartopy for projections and map features. The example includes adding coastlines, gridlines, and setting appropriate map extents and color scales.

LANGUAGE: python
CODE:
fig, ax = plt.subplots(1, 1, subplot_kw=dict(projection=ccrs.Mercator()))

ds['OUT_EVAP'].mean(dim='time').plot.pcolormesh('lon', 'lat', ax=ax,
                                                levels=10, vmin=0, vmax=0.01,
                                                transform=ccrs.PlateCarree())

# Configure the map
gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,
                  linewidth=2, color='gray', alpha=0.5, linestyle='--')
ax.set_extent([-125, -118, 47, 49], ccrs.Geodetic())
ax.coastlines('10m')
gl.xlabels_top = False
gl.ylabels_right = False

----------------------------------------

TITLE: Configuring VIC Miscellaneous Simulation Parameters
DESCRIPTION: Defines additional simulation control parameters for the VIC model. The commented CONTINUEONERROR parameter determines whether the simulation should continue to the next grid cell if it encounters an error in the current grid cell.

LANGUAGE: properties
CODE:
#CONTINUEONERROR    TRUE    # TRUE = if simulation aborts on one grid cell, continue to next grid cell

----------------------------------------

TITLE: Defining minimum vegetation cover threshold in VIC model
DESCRIPTION: Constant that sets the minimum allowable vegetation cover fraction in the model to prevent division by zero issues when rescaling plant-specific values.

LANGUAGE: c
CODE:
MIN_VEGCOVER

----------------------------------------

TITLE: Closing All Matplotlib Figures in Python
DESCRIPTION: Closes all open matplotlib figures to clean up resources and prevent memory leaks when running multiple plots in a Jupyter notebook.

LANGUAGE: python
CODE:
plt.close('all')

----------------------------------------

TITLE: Configuring VIC Model Forcing Files Parameters
DESCRIPTION: Configuration for meteorological forcing data files, specifying file formats, types of forcing variables, time steps, and starting dates. This section defines the forcing data inputs required by the VIC model.

LANGUAGE: bash
CODE:
FORCING1             forcings/full_data_
FORCE_FORMAT         ASCII
FORCE_TYPE           PREC
FORCE_TYPE           AIR_TEMP
FORCE_TYPE           SWDOWN
FORCE_TYPE           LWDOWN
FORCE_TYPE           SKIP  # This column is air density, which is not needed by VIC
FORCE_TYPE           PRESSURE
FORCE_TYPE           VP
FORCE_TYPE           WIND
FORCE_STEPS_PER_DAY  24    # Forcing time step length (hours)
FORCEYEAR            1949  # Year of first forcing record
FORCEMONTH           01    # Month of first forcing record
FORCEDAY             01    # Day of first forcing record
GRID_DECIMAL         4     # Number of digits after decimal point in forcing file names
WIND_H               10.0  # height of wind speed measurement (m)

----------------------------------------

TITLE: Defining vegetation parameter source options in VIC model
DESCRIPTION: Option to specify the source of albedo values, similar to the LAI_SRC option. Controls whether albedo values come from vegetation parameters or vegetation library.

LANGUAGE: c
CODE:
ALB_SRC

----------------------------------------

TITLE: Importing Required Python Packages for VIC Parameter Conversion
DESCRIPTION: Sets up the Python environment by importing necessary libraries for data manipulation, visualization, and VIC parameter conversion. Uses tonic library for handling VIC grid parameters and displays environment information.

LANGUAGE: python
CODE:
%matplotlib inline

import os
import getpass
from datetime import datetime

import numpy as np
import xarray as xr
import matplotlib.pyplot as plt

# For more information on tonic, see: https://github.com/UW-Hydro/tonic/
import tonic.models.vic.grid_params as gp

# Metadata to be used later
user = getpass.getuser()
now = datetime.now()

print('python version : %s' % os.sys.version)
print('numpy version  : %s' % np.version.full_version)
print('xarray version : %s' % xr.version.version)
print('User           : %s' % user)
print('Date/Time      : %s' % now)

----------------------------------------

TITLE: Grid Cell Information Format for VIC Model State File
DESCRIPTION: Specifies the format of the grid cell information section in a VIC model state file. This section defines parameters that are constant for an entire grid cell, including cell number, vegetation types, snow elevation bands, and soil thermal node configurations.

LANGUAGE: markdown
CODE:
| Column                    | Name          | Type      | Description                                                                                                               |
|-------------------------  |------------   |--------   |-------------------------------------------------------------------------------------------------------------------------  |
| 1                         | cellnum       | int       | Current cell number                                                                                                       |
| 2                         | Nveg          | int       | Number of vegetation types in the grid cell                                                                               |
| 3                         | Nbands        | int       | Number of snow elevation bands in the grid cell                                                                           |
| 4:(3+Nnodes)              | dz_node       | double    | Distances between soil thermal nodes [m]                                                                                  |
| (4+Nnodes):(3+2\*Nnodes)  | node_depth    | double    | Depth from surface of each soil thermal node (first node should have a depth of 0m indicating it is at the surface) [m]   |

----------------------------------------

TITLE: Defining library source constant in VIC model
DESCRIPTION: Constant indicating that vegetation parameters should be sourced from the vegetation library rather than the vegetation parameter file.

LANGUAGE: c
CODE:
FROM_VEGLIB

----------------------------------------

TITLE: Setting Path Information for VIC Parameter Datasets
DESCRIPTION: Configures file paths for input datasets (Livneh, Global, and Maurer parameters) and output locations. These paths will be used throughout the conversion process.

LANGUAGE: python
CODE:
# Set the path to the datasets here
dpath = './'  # root input data path
opath = './'  # output data path
ldpath = os.path.join(dpath, 'Livneh_0.0625_NLDAS')  # Path to Livneh Parameters
gdpath = os.path.join(dpath, 'Nijssen_0.5_Global')  # Path to Global Parameters
mdpath = os.path.join(dpath, 'Maurer_0.125_NLDAS')  # Path to Maurer Parameters

----------------------------------------

TITLE: Building the VIC Python Driver using setup.py
DESCRIPTION: Commands to navigate to the classic driver directory and install the VIC Python driver using the setup.py script.

LANGUAGE: bash
CODE:
cd vic/drivers/classic
python setup.py install

----------------------------------------

TITLE: Defining direct radiation fraction forcing variable in VIC model
DESCRIPTION: Forcing variable that represents the fraction of incoming shortwave radiation that comes from direct sunlight, used in carbon cycle simulations.

LANGUAGE: c
CODE:
FDIR

----------------------------------------

TITLE: Converting Global 1/2 Degree Parameters from ASCII to netCDF
DESCRIPTION: Processes the global 1/2 degree parameter files, similar to the Livneh case, but uses the tonic's calc_grid function to create a domain file since one isn't provided. Sets up parameter specifications and reads the soil, snow, vegetation, and vegetation library files.

LANGUAGE: python
CODE:
soil_file = os.path.join(gdpath, 'global_soil_param_new')
snow_file = os.path.join(gdpath, 'global_snowbands_new')
veg_file = os.path.join(gdpath, 'global_veg_param_new')
vegl_file = os.path.join(gdpath, 'world_veg_lib.txt')
out_file = os.path.join(gdpath, 'global_0.5deg.vic_5.0.0_parameters.nc')

# Set options that define the shape/type of parameters
cols = gp.Cols(nlayers=3,
               snow_bands=5,
               organic_fract=False,
               spatial_frost=False,
               spatial_snow=False,
               july_tavg_supplied=False,
               veglib_fcan=False,
               veglib_photo=False)
n_veg_classes = 11
root_zones = 2
vegparam_lai = True
lai_src = 'FROM_VEGPARAM'

# ----------------------------------------------------------------- #

# Read the soil parameters
soil_dict = gp.soil(soil_file, c=cols)

# Read the snow parameters
snow_dict = gp.snow(snow_file, soil_dict, c=cols)

# Read the veg parameter file
veg_dict = gp.veg(veg_file, soil_dict,
                  vegparam_lai=vegparam_lai, lai_src=lai_src, 
                  veg_classes=n_veg_classes, max_roots=root_zones)

# Read the veg library file
veg_lib, lib_bare_idx = gp.veg_class(vegl_file, c=cols)

# Determine the grid shape
target_grid, target_attrs = gp.calc_grid(soil_dict['lats'], soil_dict['lons'])

----------------------------------------

TITLE: Building VIC Documentation with MkDocs
DESCRIPTION: Command to build the VIC documentation from the top level of the VIC repository using MkDocs.

LANGUAGE: bash
CODE:
mkdocs build

----------------------------------------

TITLE: Defining current atmospheric CO2 constant in VIC model
DESCRIPTION: Default value for atmospheric CO2 concentration when the CATM forcing variable is not provided, defined in the vicNl_def.h header file.

LANGUAGE: c
CODE:
CatmCurrent

----------------------------------------

TITLE: Writing VIC Parameters to NetCDF
DESCRIPTION: This snippet writes the gridded VIC model parameters to a NetCDF file using Tonic's write_netcdf function. It includes target attributes, grid information, and various parameter grids for soil, snow, and vegetation.

LANGUAGE: python
CODE:
# Write a netCDF file with all the parameters
gp.write_netcdf(out_file,
                target_attrs,
                target_grid=target_grid,
                vegparam_lai=vegparam_lai,
                lai_src=lai_src,
                soil_grid=grid_dict['soil_dict'],
                snow_grid=grid_dict['snow_dict'],
                veg_grid=grid_dict['veg_dict'])

----------------------------------------

TITLE: Importing Required Libraries for VIC Output Plotting in Python
DESCRIPTION: Imports essential Python libraries needed for the tutorial including pandas for data manipulation, xarray for netCDF handling, cartopy for map projections, and matplotlib for visualization.

LANGUAGE: python
CODE:
%matplotlib inline

import pandas as pd
import xarray as xr
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pyplot as plt

----------------------------------------

TITLE: Defining solar zenith angle output variable in VIC model
DESCRIPTION: Output variable that provides the cosine of the solar zenith angle as computed by the MTCLIM module, used in radiation calculations.

LANGUAGE: c
CODE:
OUT_COSZEN

----------------------------------------

TITLE: Creating Global Domain Dataset
DESCRIPTION: This snippet initializes an xarray Dataset for creating a VIC global domain file. It sets global attributes including title, conventions, history, and source information for the domain data.

LANGUAGE: python
CODE:
dom_ds = xr.Dataset()

# Set global attributes
dom_ds.attrs['title'] = 'VIC domain data'
dom_ds.attrs['Conventions'] = 'CF-1.6'
dom_ds.attrs['history'] = 'created by %s, %s' % (user, now)
dom_ds.attrs['user_comment'] = 'VIC domain data'
dom_ds.attrs['source'] = 'generated from VIC Global 0.5 deg. model parameters, see Nijssen et al. (2001) for more information'

----------------------------------------

TITLE: Defining Input File Paths for VIC Model Data in Python
DESCRIPTION: Sets the file paths for both classic driver ASCII output and image driver netCDF output that will be used in the tutorial examples.

LANGUAGE: python
CODE:
# input files for example: 
asci_fname = '/Users/jhamman/workdir/VIC_tests_20160531/examples/Example-Classic-Stehekin-fewb/results/fluxes_48.1875_-120.6875.txt'
nc_fname = '/Users/jhamman/workdir/VIC_tests_20160331/examples/Example-Image-Stehekin-base-case/results/Stehekin.history.nc'

----------------------------------------

TITLE: Defining direct radiation fraction output variable in VIC model
DESCRIPTION: Output variable that represents the fraction of incoming shortwave radiation that is direct (as opposed to diffuse), matching the FDIR forcing variable.

LANGUAGE: c
CODE:
OUT_FDIR

----------------------------------------

TITLE: Setting Up Maurer 1/8 Degree Parameters
DESCRIPTION: This code block defines input and output file paths for processing the Maurer 1/8 degree parameters for the CONUS domain. It specifies parameters such as number of layers, snow bands, vegetation classes, and root zones.

LANGUAGE: python
CODE:
soil_file = os.path.join(mdpath, 'soil', 'us_all.soil.wsne')
snow_file = os.path.join(mdpath, 'snow', 'us_all.snowbands.wsne')
veg_file = os.path.join(mdpath, 'veg', 'us_all.veg.wsne')
vegl_file = os.path.join(ldpath, 'LDAS_veg_lib')  # from livneh
out_file = os.path.join(mdpath, 'nldas_0.125deg.vic_5.0.0_parameters.nc')

cols = gp.Cols(nlayers=3,
               snow_bands=5,
               organic_fract=False,
               spatial_frost=False,
               spatial_snow=False,
               july_tavg_supplied=False,
               veglib_fcan=False,
               veglib_photo=False)
n_veg_classes = 11
root_zones = 2
vegparam_lai = True
lai_src = 'FROM_VEGPARAM'

----------------------------------------

TITLE: Opening VIC Image Driver netCDF Output with Xarray in Python
DESCRIPTION: Shows how to open a netCDF file from the VIC image driver using xarray, which provides a convenient interface for working with labeled multi-dimensional arrays.

LANGUAGE: python
CODE:
# Open the dataset
ds = xr.open_dataset(nc_fname)
ds

----------------------------------------

TITLE: Defining carbon cycle activation flag in VIC model
DESCRIPTION: Boolean flag in the global parameter file that enables carbon cycle simulations, including photosynthesis and soil carbon processes.

LANGUAGE: c
CODE:
CARBON

----------------------------------------

TITLE: Processing Maurer 1/8 Degree Parameters
DESCRIPTION: This code reads and processes soil, snow, vegetation parameters and vegetation library files for the CONUS domain. It calculates the grid shape, grids the parameters, and writes them to a NetCDF file.

LANGUAGE: python
CODE:
# ----------------------------------------------------------------- #

# Read the soil parameters
soil_dict = gp.soil(soil_file, c=cols)

# Read the snow parameters
snow_dict = gp.snow(snow_file, soil_dict, c=cols)

# Read the veg parameter file
veg_dict = gp.veg(veg_file, soil_dict,
                  vegparam_lai=vegparam_lai, lai_src=lai_src, 
                  veg_classes=n_veg_classes, max_roots=root_zones)

# Read the veg library file
veg_lib, lib_bare_idx = gp.veg_class(vegl_file, c=cols)

# Determine the grid shape
target_grid, target_attrs = gp.calc_grid(soil_dict['lats'], soil_dict['lons'])

# Grid all the parameters
grid_dict = gp.grid_params(soil_dict, target_grid, version_in='4', 
                           vegparam_lai=vegparam_lai, lai_src=lai_src,
                           lib_bare_idx=lib_bare_idx, 
                           veg_dict=veg_dict, veglib_dict=veg_lib, 
                           snow_dict=snow_dict, lake_dict=None)

# Write a netCDF file with all the parameters
gp.write_netcdf(out_file,
                target_attrs,
                target_grid=target_grid,
                vegparam_lai=vegparam_lai,
                lai_src=lai_src,
                soil_grid=grid_dict['soil_dict'],
                snow_grid=grid_dict['snow_dict'],
                veg_grid=grid_dict['veg_dict'])

----------------------------------------

TITLE: Plotting Point Time Series from VIC Image Driver Output in Python
DESCRIPTION: Shows how to extract and plot a time series at a specific grid point (single latitude and longitude) from the VIC image driver output. The example plots surface albedo at grid point (2,2) with appropriate y-axis limits.

LANGUAGE: python
CODE:
ds['OUT_ALBEDO'].isel(lat=2, lon=2).plot()
plt.ylim(0, 1)

----------------------------------------

TITLE: Defining stomatal resistance calculation method in VIC model
DESCRIPTION: Parameter that determines whether stomatal resistance is calculated using the traditional Jarvis formulation or based on photosynthetic demand in carbon cycle simulations.

LANGUAGE: c
CODE:
RC_MODE

----------------------------------------

TITLE: Forcing Data Configuration for VIC Model
DESCRIPTION: Defines meteorological forcing data inputs including precipitation, air temperature, radiation components, pressure, vapor pressure, and wind. Specifies the input format, time period, and measurement heights.

LANGUAGE: config
CODE:
FORCING1             $test_data_dir/classic/Stehekin/forcings/full_data_
FORCE_FORMAT         ASCII
FORCE_TYPE           PREC
FORCE_TYPE           AIR_TEMP
FORCE_TYPE           SWDOWN
FORCE_TYPE           LWDOWN
FORCE_TYPE           SKIP  # This column is air density, which is not needed by VIC
FORCE_TYPE           PRESSURE
FORCE_TYPE           VP
FORCE_TYPE           WIND
FORCE_STEPS_PER_DAY  24
FORCEYEAR            1949
FORCEMONTH           01
FORCEDAY             01
GRID_DECIMAL         4
WIND_H               10.0

----------------------------------------

TITLE: Creating Livneh Domain File from DEM Data
DESCRIPTION: Generates a domain file for the Livneh dataset by reading DEM data, creating mask and fraction variables, and setting appropriate metadata. The domain file defines the spatial extent and active grid cells for the VIC model.

LANGUAGE: python
CODE:
dom_file = os.path.join(opath, 'domain.vic.global0.0625deg.%s.nc' % now.strftime('%Y%m%d'))
dem = xr.open_dataset(os.path.join(ldpath, 'Composite.DEM.NLDAS.mex.0625.nc'))

dom_ds = xr.Dataset()

# Set global attributes
dom_ds.attrs['title'] = 'VIC domain data'
dom_ds.attrs['Conventions'] = 'CF-1.6'
dom_ds.attrs['history'] = 'created by %s, %s' % (user, now)
dom_ds.attrs['user_comment'] = 'VIC domain data'
dom_ds.attrs['source'] = 'generated from VIC North American 1/16 deg. model parameters, see Livneh et al. (2015) for more information'

# since we have it, put the elevation in the domain file
dom_ds['elev'] = dem['Band1']
dom_ds['elev'].attrs['long_name'] = 'gridcell_elevation'
dom_ds['elev'].attrs['units'] = 'm'

# Get the mask variable
dom_ds['mask'] = dem['Band1'].notnull().astype(np.int)
dom_ds['mask'].attrs['long_name'] = 'domain mask'
dom_ds['mask'].attrs['comment'] = '0 indicates cell is not active'

# For now, the frac variable is going to be just like the mask
dom_ds['frac'] = dom_ds['mask'].astype(np.float)
dom_ds['frac'].attrs['long_name'] = 'fraction of grid cell that is active'
dom_ds['frac'].attrs['units'] = '1'
    
# Save the output domain to a temporary file.
dom_ds.to_netcdf('temp.nc')
dom_ds.close()

----------------------------------------

TITLE: Defining litterfall output variable in VIC model
DESCRIPTION: Output variable representing the flux of carbon from living biomass into the litter pool, set equal to the previous year's NPP distributed evenly throughout the current year.

LANGUAGE: c
CODE:
OUT_LITTERFALL

----------------------------------------

TITLE: Soil and Vegetation Parameter Configuration for VIC
DESCRIPTION: Configures soil and vegetation parameters for the model including baseflow type, vegetation library, and snow band information. Specifies file paths for soil, vegetation, and snow band parameters, with settings for vegetation characteristics.

LANGUAGE: config
CODE:
SOIL                $test_data_dir/classic/Stehekin/parameters/Stehekin_soil.txt
BASEFLOW            ARNO
JULY_TAVG_SUPPLIED  FALSE
ORGANIC_FRACT       FALSE
VEGLIB              $test_data_dir/classic/Stehekin/parameters/Stehekin_veglib.txt
VEGPARAM            $test_data_dir/classic/Stehekin/parameters/Stehekin_vegparam.txt
ROOT_ZONES          3
VEGPARAM_LAI        TRUE
LAI_SRC             FROM_VEGPARAM
SNOW_BAND           5  $test_data_dir/classic/Stehekin/parameters/Stehekin_snowbands.txt

----------------------------------------

TITLE: Finalizing and Saving Livneh Domain File
DESCRIPTION: Extracts the grid cell area data from the temporary file, adds it to the domain dataset, and saves the complete domain file. Also displays domain information and plots the mask for visualization.

LANGUAGE: python
CODE:
# This step extracts the area from the temporary area.nc file
area = xr.open_dataset('area.nc')['cell_area']
dom_ds['area'] = area

# Write the final domain file
dom_ds.to_netcdf(dom_file)
dom_ds.close()

# Document the domain and plot
print(dom_ds)
dom_ds['mask'].plot()

----------------------------------------

TITLE: Defining intermediate carbon pool output variable in VIC model
DESCRIPTION: Output variable representing the carbon density in the intermediate turnover soil carbon pool, with an approximate turnover time of 33.3 years.

LANGUAGE: c
CODE:
OUT_CINTER

----------------------------------------

TITLE: Output Result Directory Configuration for VIC
DESCRIPTION: Specifies the directory where the model results will be stored.

LANGUAGE: config
CODE:
RESULT_DIR              $result_dir

----------------------------------------

TITLE: Converting Livneh Parameters from ASCII to netCDF
DESCRIPTION: Reads and processes ASCII-formatted soil, snow, vegetation, and vegetation library files to create a netCDF parameter file for the VIC 5 Image Driver. Maps parameters to the spatial grid defined by the domain file created earlier.

LANGUAGE: python
CODE:
soil_file = os.path.join(ldpath, 'vic.nldas.mexico.soil.txt')
snow_file = os.path.join(ldpath, 'vic.nldas.mexico.snow.txt.L13')
veg_file = os.path.join(ldpath, 'vic.nldas.mexico.veg.txt')
vegl_file = os.path.join(ldpath, 'LDAS_veg_lib')
out_file = os.path.join(opath, 'livneh_nldas.mexico_vic_5.0.0_parameters.nc')

# Set options that define the shape/type of parameters
cols = gp.Cols(nlayers=3,
               snow_bands=5,
               organic_fract=False,
               spatial_frost=False,
               spatial_snow=False,
               july_tavg_supplied=False,
               veglib_fcan=False,
               veglib_photo=False)
n_veg_classes = 11
vegparam_lai = True
lai_src = 'FROM_VEGPARAM'

# ----------------------------------------------------------------- #

# Read the soil parameters
soil_dict = gp.soil(soil_file, c=gp.Cols(nlayers=3))

# Read the snow parameters
snow_dict = gp.snow(snow_file, soil_dict, c=cols)

# Read the veg parameter file
veg_dict = gp.veg(veg_file, soil_dict,
                  vegparam_lai=vegparam_lai, lai_src=lai_src, 
                  veg_classes=n_veg_classes)

# Read the veg library file
veg_lib, lib_bare_idx = gp.veg_class(vegl_file, c=cols)

# Determine the grid shape
target_grid, target_attrs = gp.read_netcdf(dom_file)
for old, new in [('lon', 'xc'), ('lat', 'yc')]:
    target_grid[new] = target_grid.pop(old)
    target_attrs[new] = target_attrs.pop(old)

# Grid all the parameters
grid_dict = gp.grid_params(soil_dict,
                           target_grid,
                           version_in='4.1.2.c', 
                           vegparam_lai=vegparam_lai,
                           lib_bare_idx=lib_bare_idx, 
                           lai_src=lai_src,
                           veg_dict=veg_dict,
                           veglib_dict=veg_lib, 
                           snow_dict=snow_dict,
                           lake_dict=None)

# Write a netCDF file with all the parameters
gp.write_netcdf(out_file, 
                target_attrs,
                target_grid=target_grid,
                vegparam_lai=vegparam_lai,
                lai_src=lai_src, 
                soil_grid=grid_dict['soil_dict'],
                snow_grid=grid_dict['snow_dict'],
                veg_grid=grid_dict['veg_dict'])

----------------------------------------

TITLE: Defining slow carbon pool output variable in VIC model
DESCRIPTION: Output variable representing the carbon density in the slow turnover soil carbon pool, with an approximate turnover time of 1,000 years.

LANGUAGE: c
CODE:
OUT_CSLOW

----------------------------------------

TITLE: 180-Minute Aggregation Output Stream Configuration for VIC
DESCRIPTION: Configures an output stream with 180-minute (3-hour) aggregation intervals. Uses various aggregation methods for different variables including maximum, minimum, sum, beginning, average, and ending values.

LANGUAGE: config
CODE:
# Output every 180 minutes (3 hours)
OUTFILE     STREAM_NMINUTES_180
AGGFREQ     NMINUTES      180
OUTVAR      OUT_ALBEDO    *   *   *   AGG_TYPE_MAX
OUTVAR      OUT_SOIL_TEMP *   *   *   AGG_TYPE_MIN
OUTVAR      OUT_PRESSURE  *   *   *   AGG_TYPE_SUM
OUTVAR      OUT_AIR_TEMP  *   *   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   *   *   AGG_TYPE_AVG
OUTVAR      OUT_LWDOWN    *   *   *   AGG_TYPE_END

----------------------------------------

TITLE: Cleaning Up Temporary Files
DESCRIPTION: This bash command removes the temporary area.nc file that was created during the domain file generation process.

LANGUAGE: bash
CODE:
!rm area.nc

----------------------------------------

TITLE: Displaying Minimum Node Requirements Table in Markdown
DESCRIPTION: A markdown table showing the relationship between soil temperature bottom boundary depth (dp) and the minimum required number of nodes (Nnodes) to ensure accurate soil temperature simulation. This helps users configure the model correctly based on the mathematical relationship Nnodes >= 5*ln(dp+1)+1.

LANGUAGE: markdown
CODE:
| dp(m) | minimum Nnodes |
|-------|----------------|
| 4     | 9              |
| 7     | 12             |
| 10    | 14             |
| 25    | 18             |
| 50    | 21             |

----------------------------------------

TITLE: Configuring VIC Model Initial State
DESCRIPTION: Defines the initial state configuration for the model simulation, including the state file location, timestamp, and format.

LANGUAGE: plaintext
CODE:
#INIT_STATE
STATENAME       $state_dir/states
STATEYEAR       1949
STATEMONTH      1
STATEDAY        11
STATESEC        0
STATE_FORMAT    ASCII

----------------------------------------

TITLE: Finalizing and Writing the CONUS Domain File
DESCRIPTION: This code incorporates the calculated cell areas into the CONUS domain file, writes the file, and creates a visualization of the domain mask, similar to the global domain processing.

LANGUAGE: python
CODE:
# Extract the area variable
area = xr.open_dataset('area.nc').load()['cell_area']
dom_ds['area'] = area

# write the domain file
dom_ds.to_netcdf(dom_file)
dom_ds.close()

# document and plot the domain
print(dom_ds)
dom_ds.mask.plot()

----------------------------------------

TITLE: Git Tagging Command for VIC Release in Markdown
DESCRIPTION: A command line example showing how to create a Git tag for a VIC release, specifically version 5.1.2, which is a bug fix update. The command uses the -f flag to force the tag and -a to create an annotated tag with message.

LANGUAGE: bash
CODE:
git tag -f -a VIC.5.1.2 -m 'release tag of VIC 5.1.2, bug fix update for this example

----------------------------------------

TITLE: Configuring VIC Model Forcing Data
DESCRIPTION: Specifies the meteorological forcing data inputs for the model, including file location, format, variable types, temporal resolution, and starting time.

LANGUAGE: plaintext
CODE:
FORCING1             $test_data_dir/classic/Stehekin/forcings/full_data_
FORCE_FORMAT         ASCII
FORCE_TYPE           PREC
FORCE_TYPE           AIR_TEMP
FORCE_TYPE           SWDOWN
FORCE_TYPE           LWDOWN
FORCE_TYPE           SKIP  # This column is air density, which is not needed by VIC
FORCE_TYPE           PRESSURE
FORCE_TYPE           VP
FORCE_TYPE           WIND
FORCE_STEPS_PER_DAY  24
FORCEYEAR            1949
FORCEMONTH           01
FORCEDAY             01
GRID_DECIMAL         4
WIND_H               10.0

----------------------------------------

TITLE: Defining VolumeLookupCache Struct for Storage Management in Go
DESCRIPTION: Defines a VolumeLookupCache struct that handles volume lookup operations with cache functionality. It includes fields for volume store caches, a metadata cache, and a Golang context object.

LANGUAGE: go
CODE:
type VolumeLookupCache struct {
	volStores  map[string]VolumeStorer
	mapping    map[string]map[string]Volume
	mutex      sync.RWMutex
	metadataDB ImageMetadataStore
	ctx        context.Context
}

----------------------------------------

TITLE: Mounting Local Directories to VIC Docker Container
DESCRIPTION: Command for mounting a local directory to the Docker container, allowing access to external data files. This is useful for providing input data to VIC without having to copy files into the container.

LANGUAGE: Bash
CODE:
# Open an interactive bash command line in the docker_vic
# mounting a local directory
docker run -it -v ~/workdir/VIC_data:~/workdir/VIC_data uwhydro/vic:docker_vic /bin/bash

----------------------------------------

TITLE: Configuring VIC Model Output Settings
DESCRIPTION: Specifies the output configuration including output directory, file name, temporal aggregation frequency, and variables to be included in the simulation output.

LANGUAGE: plaintext
CODE:
RESULT_DIR              $result_dir

OUTFILE     fluxes
AGGFREQ     NHOURS   1
OUTVAR      OUT_PREC
OUTVAR      OUT_RAINF
OUTVAR      OUT_SNOWF
OUTVAR      OUT_AIR_TEMP
OUTVAR      OUT_SWDOWN
OUTVAR      OUT_LWDOWN
OUTVAR      OUT_PRESSURE
OUTVAR      OUT_WIND
OUTVAR      OUT_DENSITY
OUTVAR      OUT_REL_HUMID
OUTVAR      OUT_QAIR
OUTVAR      OUT_VP
OUTVAR      OUT_VPD
OUTVAR      OUT_RUNOFF
OUTVAR      OUT_BASEFLOW
OUTVAR      OUT_EVAP
OUTVAR      OUT_SWE
OUTVAR      OUT_SOIL_MOIST
OUTVAR      OUT_ALBEDO
OUTVAR      OUT_SOIL_TEMP

----------------------------------------

TITLE: Defining VolumeStorer Interface in Go
DESCRIPTION: Interface definition for volume storage providers. It specifies methods required for volume lifecycle management including creation, URL retrieval, volume listing, and reference counting.

LANGUAGE: go
CODE:
type VolumeStorer interface {
	// VolumeCreate creates a volume on the given volume store, of the given size, with the given metadata.
	VolumeCreate(op trace.Operation, ID string, store *url.URL, capacityKB uint64, info map[string][]byte) (*Volume, error)

	// VolumeDestroy removes a volume and all of its contents from the volume store. If the volume
	// cannot be found, return os.ErrNotExist error.
	VolumeDestroy(op trace.Operation, vol *Volume) error

	// VolumeStoresList returns a list of the configured volume stores.
	VolumeStoresList(op trace.Operation) (map[string]url.URL, error)

	URL(op trace.Operation, id string) (*url.URL, error)
}

----------------------------------------

TITLE: Building and Running VIC Inside Docker Container
DESCRIPTION: Commands for navigating to the VIC Classic Driver directory, building the driver using make, and running VIC with a global parameter file. These commands should be executed inside an interactive Docker session.

LANGUAGE: Bash
CODE:
# change directories to the VIC Classic Driver
cd VIC/vic/drivers/classic
# Build the Classic Driver
make
# Run VIC
./vic_classic.exe -g global_param_file.txt

----------------------------------------

TITLE: Configuring Model Time Steps and Simulation Period
DESCRIPTION: Defines the temporal resolution of the model and the simulation start and end dates. The model uses 24 steps per day for different processes and runs for a 10-day period in January 1949 using the Proleptic Gregorian calendar.

LANGUAGE: configuration
CODE:
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY	  24
RUNOFF_STEPS_PER_DAY  24

STARTYEAR	1949
STARTMONTH	1
STARTDAY	1
ENDYEAR 	1949
ENDMONTH	1
ENDDAY		10
CALENDAR    PROLEPTIC_GREGORIAN

----------------------------------------

TITLE: Configuring VIC Model Structure and Time Settings
DESCRIPTION: Defines the basic structure of the VIC model including the number of soil layers, nodes, and temporal resolution. Also sets the simulation start and end dates, and energy balance calculation options.

LANGUAGE: config
CODE:
NLAYER                3
NODES                 10
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             2000
STARTMONTH            01
STARTDAY              01
STARTSEC              00
ENDYEAR               2012
ENDMONTH              12
ENDDAY                31

FULL_ENERGY           TRUE
FROZEN_SOIL           FALSE

QUICK_FLUX            FALSE

----------------------------------------

TITLE: Configuring Routing Parameter Path in VIC Global Parameter File
DESCRIPTION: Specifies the path to the RVIC parameter file in the VIC global parameter file. This file contains unit hydrograph information needed for routing calculations.

LANGUAGE: bash
CODE:
ROUT_PARAM                     ./RVIC_params.nc                   # Routing parameter path/file

----------------------------------------

TITLE: Setting Model Parameters and Routing Information
DESCRIPTION: Specifies the parameters file containing soil and vegetation parameters, the number of nodes for the soil column, snow band option, and routing parameter file for flow routing between grid cells.

LANGUAGE: configuration
CODE:
PARAMETERS      $test_data_dir/image/Stehekin/parameters/Stehekin_test_params_20160327.nc
NODES           3
SNOW_BAND       TRUE

ROUT_PARAM          $test_data_dir/image/Stehekin/parameters/stehekin_parameters_01.rvic.prm.Stehekin.20150727.nc

----------------------------------------

TITLE: Configuring VIC Energy Balance Output Variables
DESCRIPTION: Defines the energy balance output file and variables for the VIC model. Specifies file format, compression options, aggregation frequency, and lists the energy balance variables to be saved in the output file.

LANGUAGE: config
CODE:
OUTFILE         en_bal 12
AGGFREQ         NHOURS
COMPRESS        FALSE
OUT_FORMAT      ASCII
OUTVAR          OUT_ADV_SENS            %.6g    *       *
OUTVAR          OUT_ADVECTION           %.6g    *       *
OUTVAR          OUT_DELTAH              %.6g    *       *
OUTVAR          OUT_GRND_FLUX           %.6g    *       *
OUTVAR          OUT_IN_LONG             %.6g    *       *
OUTVAR          OUT_LATENT              %.6g    *       *
OUTVAR          OUT_LATENT_SUB          %.6g    *       *
OUTVAR          OUT_R_NET               %.6g    *       *
OUTVAR          OUT_SENSIBLE            %.6g    *       *
OUTVAR          OUT_RAD_TEMP            %.6g    *       *
OUTVAR          OUT_SWNET               %.6g    *       *
OUTVAR          OUT_LWNET               %.6g    *       *

----------------------------------------

TITLE: Installing Tonic in Development Mode (Shell)
DESCRIPTION: Installs Tonic in development mode, which creates links in the Python installation to the source code, allowing changes to the source to be immediately reflected without reinstallation.

LANGUAGE: shell
CODE:
python setup.py develop

----------------------------------------

TITLE: Configuring Output Settings and Variables
DESCRIPTION: Defines output file settings, including result directory, output file name, aggregation frequency, and a comprehensive list of output variables to be saved. The configuration includes state variables, fluxes, temperature variables, and energy balance components.

LANGUAGE: configuration
CODE:
RESULT_DIR  $result_dir/

OUTFILE     allvars
AGGFREQ     NSTEPS        1
OUTVAR      OUT_ASAT
OUTVAR      OUT_LAKE_AREA_FRAC
OUTVAR      OUT_LAKE_DEPTH
OUTVAR      OUT_LAKE_ICE
OUTVAR      OUT_LAKE_ICE_FRACT
OUTVAR      OUT_LAKE_ICE_HEIGHT
OUTVAR      OUT_LAKE_MOIST
OUTVAR      OUT_LAKE_SURF_AREA
OUTVAR      OUT_LAKE_SWE
OUTVAR      OUT_LAKE_SWE_V
OUTVAR      OUT_LAKE_VOLUME
OUTVAR      OUT_ROOTMOIST
OUTVAR      OUT_SMFROZFRAC
OUTVAR      OUT_SMLIQFRAC
OUTVAR      OUT_SNOW_CANOPY
OUTVAR      OUT_SNOW_COVER
OUTVAR      OUT_SNOW_DEPTH
OUTVAR      OUT_SOIL_ICE
OUTVAR      OUT_SOIL_LIQ
OUTVAR      OUT_SOIL_ICE_FRAC
OUTVAR      OUT_SOIL_LIQ_FRAC
OUTVAR      OUT_SOIL_MOIST
OUTVAR      OUT_SOIL_WET
OUTVAR      OUT_SURFSTOR
OUTVAR      OUT_SURF_FROST_FRAC
OUTVAR      OUT_SWE
OUTVAR      OUT_WDEW
OUTVAR      OUT_ZWT
OUTVAR      OUT_ZWT_LUMPED
OUTVAR      OUT_BASEFLOW
OUTVAR      OUT_DELINTERCEPT
OUTVAR      OUT_DELSOILMOIST
OUTVAR      OUT_DELSWE
OUTVAR      OUT_DELSURFSTOR
OUTVAR      OUT_EVAP
OUTVAR      OUT_EVAP_BARE
OUTVAR      OUT_EVAP_CANOP
OUTVAR      OUT_INFLOW
OUTVAR      OUT_LAKE_BF_IN
OUTVAR      OUT_LAKE_BF_IN_V
OUTVAR      OUT_LAKE_BF_OUT
OUTVAR      OUT_LAKE_BF_OUT_V
OUTVAR      OUT_LAKE_CHAN_IN
OUTVAR      OUT_LAKE_CHAN_IN_V
OUTVAR      OUT_LAKE_CHAN_OUT
OUTVAR      OUT_LAKE_CHAN_OUT_V
OUTVAR      OUT_LAKE_DSTOR
OUTVAR      OUT_LAKE_DSTOR_V
OUTVAR      OUT_LAKE_DSWE
OUTVAR      OUT_LAKE_DSWE_V
OUTVAR      OUT_LAKE_EVAP
OUTVAR      OUT_LAKE_EVAP_V
OUTVAR      OUT_LAKE_PREC_V
OUTVAR      OUT_LAKE_RCHRG
OUTVAR      OUT_LAKE_RCHRG_V
OUTVAR      OUT_LAKE_RO_IN
OUTVAR      OUT_LAKE_RO_IN_V
OUTVAR      OUT_LAKE_VAPFLX
OUTVAR      OUT_LAKE_VAPFLX_V
OUTVAR      OUT_PET
OUTVAR      OUT_PREC
OUTVAR      OUT_RAINF
OUTVAR      OUT_REFREEZE
OUTVAR      OUT_RUNOFF
OUTVAR      OUT_SNOW_MELT
OUTVAR      OUT_SNOWF
OUTVAR      OUT_SUB_BLOWING
OUTVAR      OUT_SUB_CANOP
OUTVAR      OUT_SUB_SNOW
OUTVAR      OUT_SUB_SURFACE
OUTVAR      OUT_TRANSP_VEG
OUTVAR      OUT_ALBEDO
OUTVAR      OUT_BARESOILT
OUTVAR      OUT_FDEPTH
OUTVAR      OUT_LAKE_ICE_TEMP
OUTVAR      OUT_LAKE_SURF_TEMP
OUTVAR      OUT_RAD_TEMP
OUTVAR      OUT_SALBEDO
OUTVAR      OUT_SNOW_PACK_TEMP
OUTVAR      OUT_SNOW_SURF_TEMP
OUTVAR      OUT_SNOWT_FBFLAG
OUTVAR      OUT_SOIL_TEMP
OUTVAR      OUT_SOIL_TNODE
OUTVAR      OUT_SOIL_TNODE_WL
OUTVAR      OUT_SOILT_FBFLAG
OUTVAR      OUT_SURF_TEMP
OUTVAR      OUT_SURFT_FBFLAG
OUTVAR      OUT_TCAN_FBFLAG
OUTVAR      OUT_TDEPTH
OUTVAR      OUT_TFOL_FBFLAG
OUTVAR      OUT_VEGT
OUTVAR      OUT_ADV_SENS
OUTVAR      OUT_ADVECTION
OUTVAR      OUT_DELTACC
OUTVAR      OUT_DELTAH
OUTVAR      OUT_ENERGY_ERROR
OUTVAR      OUT_WATER_ERROR
OUTVAR      OUT_FUSION
OUTVAR      OUT_GRND_FLUX
OUTVAR      OUT_IN_LONG
OUTVAR      OUT_LATENT
OUTVAR      OUT_LATENT_SUB
OUTVAR      OUT_MELT_ENERGY
OUTVAR      OUT_LWNET
OUTVAR      OUT_SWNET
OUTVAR      OUT_R_NET
OUTVAR      OUT_RFRZ_ENERGY
OUTVAR      OUT_SENSIBLE
OUTVAR      OUT_SNOW_FLUX
OUTVAR      OUT_AERO_COND
OUTVAR      OUT_AERO_COND1
OUTVAR      OUT_AERO_COND2
OUTVAR      OUT_AERO_RESIST
OUTVAR      OUT_AERO_RESIST1
OUTVAR      OUT_AERO_RESIST2
OUTVAR      OUT_AIR_TEMP
OUTVAR      OUT_CATM
OUTVAR      OUT_DENSITY
OUTVAR      OUT_FCANOPY
OUTVAR      OUT_FDIR
OUTVAR      OUT_LAI
OUTVAR      OUT_LWDOWN
OUTVAR      OUT_PAR
OUTVAR      OUT_PRESSURE
OUTVAR      OUT_QAIR
OUTVAR      OUT_REL_HUMID
OUTVAR      OUT_SWDOWN
OUTVAR      OUT_SURF_COND
OUTVAR      OUT_VP
OUTVAR      OUT_VPD
OUTVAR      OUT_WIND
OUTVAR      OUT_APAR
OUTVAR      OUT_GPP
OUTVAR      OUT_RAUT
OUTVAR      OUT_NPP
OUTVAR      OUT_LITTERFALL
OUTVAR      OUT_RHET
OUTVAR      OUT_NEE
OUTVAR      OUT_CLITTER
OUTVAR      OUT_CINTER
OUTVAR      OUT_CSLOW
OUTVAR      OUT_ADV_SENS_BAND
OUTVAR      OUT_ADVECTION_BAND
OUTVAR      OUT_ALBEDO_BAND
OUTVAR      OUT_DELTACC_BAND
OUTVAR      OUT_GRND_FLUX_BAND
OUTVAR      OUT_IN_LONG_BAND
OUTVAR      OUT_LATENT_BAND
OUTVAR      OUT_LATENT_SUB_BAND
OUTVAR      OUT_MELT_ENERGY_BAND
OUTVAR      OUT_LWNET_BAND
OUTVAR      OUT_SWNET_BAND
OUTVAR      OUT_RFRZ_ENERGY_BAND
OUTVAR      OUT_SENSIBLE_BAND
OUTVAR      OUT_SNOW_CANOPY_BAND
OUTVAR      OUT_SNOW_COVER_BAND
OUTVAR      OUT_SNOW_DEPTH_BAND
OUTVAR      OUT_SNOW_FLUX_BAND
OUTVAR      OUT_SNOW_MELT_BAND
OUTVAR      OUT_SNOW_PACKT_BAND
OUTVAR      OUT_SNOW_SURFT_BAND
OUTVAR      OUT_SWE_BAND
OUTVAR      OUT_TIME_VICRUN_WALL
OUTVAR      OUT_TIME_VICRUN_CPU
OUTVAR      OUT_DISCHARGE

----------------------------------------

TITLE: Configuring Soil Respiration Parameters in VIC Model
DESCRIPTION: Sets parameters for soil respiration processes including Lloyd-Taylor temperature parameters, moisture thresholds, carbon pool turnover times, and fractions for carbon allocation between atmospheric and soil pools.

LANGUAGE: namelist
CODE:
# Soil Respiration Parameters
SRESP_E0_LT 308.56  # Lloyd-Taylor E0 parameter [K]
SRESP_T0_LT 227.13  # Lloyd-Taylor T0 parameter [K]
SRESP_WMINFM 0.0  # minimum soil moisture (fraction) at which soil
                    # respiration can occur
SRESP_WMAXFM 1.0  # maximum soil moisture (fraction) at which soil
                    # respiration can occur
SRESP_WOPTFM 0.5  # soil moisture (fraction) at which maximum soil
                    # respiration occurs
SRESP_RHSAT 0.15  # ratio of soil respiration rate under saturated conditions
                    # (w=wmaxFM) to that under optimal conditions (w=woptFM)
SRESP_RFACTOR 0.5  # scaling factor to account for other (non-moisture)
                     # sources of inhibition of respiration
SRESP_TAULITTER 2.86  # Litter pool turnover time [y]
SRESP_TAUINTER 33.3  # Intermediate pool turnover time [y]
SRESP_TAUSLOW 1000.0  # Slow pool turnover time [y]
SRESP_FAIR 0.7  # Fraction of respired carbon from litter pool that is lost
                  # to atmosphere
SRESP_FINTER 0.985  # Fraction of [respired carbon from litter pool that goes
                      # to soil] that goes to intermediate pool

----------------------------------------

TITLE: Installing Tonic to a User-Specific Home Directory (Shell)
DESCRIPTION: Installs the Tonic package to a specified home directory location, useful for users without write permissions to the system Python installation.

LANGUAGE: shell
CODE:
python setup.py install --home=$HOME

----------------------------------------

TITLE: Setting Up Initial State Configuration
DESCRIPTION: Commented-out section for specifying the initial model state. When uncommented, this would initialize the model with saved state conditions from a specified date (January 11, 1949).

LANGUAGE: config
CODE:
#INIT_STATE
STATENAME   $state_dir/states
STATEYEAR   1949
STATEMONTH  1
STATEDAY    11
STATESEC    0

----------------------------------------

TITLE: Configuring Iteration Bracket Widths for VIC Model Temperature Calculations
DESCRIPTION: These parameters define temperature bracket widths used in numerical iterations for various surface energy balances. They control the precision of temperature calculations for snow surface, soil surface, soil thermal flux, and canopy components.

LANGUAGE: plaintext
CODE:
# Iteration bracket widths
SNOW_DT 5.0  # Used to bracket snow surface temperatures while computing the
               # snow surface energy balance (C)
SURF_DT 1.0  # Used to bracket soil surface temperatures while computing
               # energy balance (C)
SOIL_DT 0.25  # Used to bracket soil temperatures while solving the soil
                # thermal flux (C)
CANOPY_DT 1.0  # Used to bracket canopy air temperatures while computing
                 #energy balance (C)
CANOPY_VP 25.0  # Used to bracket canopy vapor pressures while computing
                  # moisture balance (Pa)

----------------------------------------

TITLE: Setting compiler environment variable for VIC
DESCRIPTION: Sets the CC environment variable to use a compiler other than the default gcc. This example shows how to use the Intel C compiler instead.

LANGUAGE: bash
CODE:
export CC=icc

----------------------------------------

TITLE: Configuring Routing Parameters
DESCRIPTION: Specifies the file containing river routing parameters for the Stehekin watershed. This file defines how water is routed through the river network to calculate discharge.

LANGUAGE: config
CODE:
ROUT_PARAM          $test_data_dir/image/Stehekin/parameters/stehekin_parameters_01.rvic.prm.Stehekin.20150727.nc

----------------------------------------

TITLE: Initial State Configuration for VIC Model
DESCRIPTION: Specifies the initial state file location and settings for the model. Sets the state file to be read from a specified directory with ASCII format, starting from January 11, 1949.

LANGUAGE: config
CODE:
#INIT_STATE
STATENAME       $state_dir/states
STATEYEAR       1949
STATEMONTH      1
STATEDAY        11
STATESEC        0
STATE_FORMAT    ASCII

----------------------------------------

TITLE: Running the VIC Classic Driver with global parameter file
DESCRIPTION: Executes the VIC Classic Driver with a specified global parameter file. The -g flag identifies the path to the global parameter file for the project.

LANGUAGE: bash
CODE:
./vic_classic.exe -g global_parameter_filename

----------------------------------------

TITLE: Configuring VIC Model Time Steps and Simulation Period
DESCRIPTION: Sets up the model time steps per day for different processes and defines the simulation period from January 1, 1949 to January 10, 1949 using the Proleptic Gregorian calendar.

LANGUAGE: config
CODE:
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY	  24
RUNOFF_STEPS_PER_DAY  24

STARTYEAR	1949
STARTMONTH	1
STARTDAY	1
ENDYEAR 	1949
ENDMONTH	1
ENDDAY		10
CALENDAR    PROLEPTIC_GREGORIAN

----------------------------------------

TITLE: 4-Hour Aggregation Output Stream Configuration for VIC
DESCRIPTION: Configures an output stream with 4-hour aggregation intervals. Uses various aggregation methods for different variables including maximum, minimum, sum, beginning, average, and ending values.

LANGUAGE: config
CODE:
# Output every 4 hours
OUTFILE     STREAM_NHOURS_4
AGGFREQ     NHOURS        4
OUTVAR      OUT_ALBEDO    *   *   *   AGG_TYPE_MAX
OUTVAR      OUT_SOIL_TEMP *   *   *   AGG_TYPE_MIN
OUTVAR      OUT_PRESSURE  *   *   *   AGG_TYPE_SUM
OUTVAR      OUT_AIR_TEMP  *   *   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   *   *   AGG_TYPE_AVG
OUTVAR      OUT_LWDOWN    *   *   *   AGG_TYPE_END

----------------------------------------

TITLE: VIC Classic Driver version command
DESCRIPTION: Displays the version information of the VIC Classic Driver. This is useful for verifying which version of the software is currently installed.

LANGUAGE: bash
CODE:
vic_classic.exe -v

----------------------------------------

TITLE: Setting Up VIC Model Parameters and Routing
DESCRIPTION: Configures model parameters file, computational nodes, and routing parameters for streamflow simulation in the Stehekin watershed.

LANGUAGE: config
CODE:
PARAMETERS      $test_data_dir/image/Stehekin/parameters/Stehekin_test_params_20160327.nc
NODES           3

ROUT_PARAM          $test_data_dir/image/Stehekin/parameters/stehekin_parameters_01.rvic.prm.Stehekin.20150727.nc

RESULT_DIR  $result_dir/

----------------------------------------

TITLE: Daily Aggregation Output Stream Configuration for VIC
DESCRIPTION: Configures an output stream with daily aggregation intervals. Uses various aggregation methods for different variables including maximum, minimum, sum, beginning, average, and ending values.

LANGUAGE: config
CODE:
# Output every 1 day
OUTFILE     STREAM_NDAYS_1
AGGFREQ     NDAYS         1
OUTVAR      OUT_ALBEDO    *   *   *   AGG_TYPE_MAX
OUTVAR      OUT_SOIL_TEMP *   *   *   AGG_TYPE_MIN
OUTVAR      OUT_PRESSURE  *   *   *   AGG_TYPE_SUM
OUTVAR      OUT_AIR_TEMP  *   *   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   *   *   AGG_TYPE_AVG
OUTVAR      OUT_LWDOWN    *   *   *   AGG_TYPE_END

----------------------------------------

TITLE: Defining Sum Aggregation Type Constant in Python
DESCRIPTION: Defines a constant AGG_TYPE_SUM that represents summation operations performed over an aggregation window. This is likely part of a data processing or analytics framework.

LANGUAGE: python
CODE:
#                    AGG_TYPE_SUM     = sum over aggregation window

----------------------------------------

TITLE: Configuring 7200-Second Output Stream for VIC Model
DESCRIPTION: Sets up an output stream that aggregates model variables every 7200 seconds (2 hours), using different aggregation methods for different variables including maximum, minimum, sum, beginning, average, and end values.

LANGUAGE: config
CODE:
# Output every 7200 seconds
OUTFILE     STREAM_NSECONDS_7200
AGGFREQ     NSECONDS      7200
OUTVAR      OUT_ALBEDO    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_MAX
OUTVAR      OUT_SOIL_TEMP *   OUT_TYPE_DOUBLE   *   AGG_TYPE_MIN
OUTVAR      OUT_PRESSURE  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_SUM
OUTVAR      OUT_AIR_TEMP  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_AVG
OUTVAR      OUT_LWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_END

----------------------------------------

TITLE: Defining Domain and Spatial Parameters
DESCRIPTION: Specifies the domain file and maps the variables within that file to VIC model requirements. This defines the spatial extent of the simulation for the Stehekin watershed, including latitude, longitude, mask, area, and fraction fields.

LANGUAGE: config
CODE:
DOMAIN         $test_data_dir/image/Stehekin/parameters/domain.stehekin.20151028.nc
DOMAIN_TYPE    LAT     lat
DOMAIN_TYPE    LON     lon
DOMAIN_TYPE    MASK    mask
DOMAIN_TYPE    AREA    area
DOMAIN_TYPE    FRAC    frac
DOMAIN_TYPE    YDIM    lat
DOMAIN_TYPE    XDIM    lon

----------------------------------------

TITLE: Defining Lapse Rate Parameter in VIC Model
DESCRIPTION: Sets the temperature lapse rate constant to -0.0065 C/m, which defines how temperature changes with elevation in the model.

LANGUAGE: namelist
CODE:
LAPSE_RATE -0.0065   # temperature lapse rate in C/m

----------------------------------------

TITLE: Configuring Daily Output Stream for VIC Model
DESCRIPTION: Sets up an output stream for daily aggregation of model variables, using various aggregation methods including maximum for albedo, minimum for soil temperature, sum for pressure, and others.

LANGUAGE: config
CODE:
# Output every 1 day
OUTFILE     STREAM_NDAYS_1
AGGFREQ     NDAYS         1
OUTVAR      OUT_ALBEDO    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_MAX
OUTVAR      OUT_SOIL_TEMP *   OUT_TYPE_DOUBLE   *   AGG_TYPE_MIN
OUTVAR      OUT_PRESSURE  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_SUM
OUTVAR      OUT_AIR_TEMP  *   OUT_TYPE_DOUBLE   *   AGG_TYPE_BEG
OUTVAR      OUT_SWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_AVG
OUTVAR      OUT_LWDOWN    *   OUT_TYPE_DOUBLE   *   AGG_TYPE_END

----------------------------------------

TITLE: Configuring VIC Model Forcing Data
DESCRIPTION: Defines meteorological forcing data inputs for the VIC model, including mapping between NetCDF variable names and VIC forcing types. Specifies file paths and measurement height for wind data.

LANGUAGE: config
CODE:
FORCING1	  $test_data_dir/image/Stehekin/forcings/Stehekin_image_test.forcings_10days.
FORCE_TYPE    AIR_TEMP 	   tas
FORCE_TYPE    PREC 	       prcp
FORCE_TYPE    PRESSURE 	   pres
FORCE_TYPE    SWDOWN       dswrf
FORCE_TYPE    LWDOWN 	     dlwrf
FORCE_TYPE    VP           vp
FORCE_TYPE    WIND         wind
WIND_H        10.0

----------------------------------------

TITLE: Implementing ListVolumes Method in VolumeLookupCache for Go
DESCRIPTION: Method that lists all volumes across all stores or in a specific store. It handles thread safety via a read lock and applies filters based on provided criteria.

LANGUAGE: go
CODE:
func (v *VolumeLookupCache) ListVolumes(op trace.Operation, stores []string) ([]*Volume, error) {
	v.mutex.RLock()
	defer v.mutex.RUnlock()

	if len(stores) == 0 {
		stores = make([]string, len(v.volStores))
		i := 0
		for store := range v.volStores {
			stores[i] = store
			i++
		}
	}

	volumes := make([]*Volume, 0, len(stores))

	return volumes, nil
}

----------------------------------------

TITLE: VIC Model General Configuration Settings
DESCRIPTION: Defines core model parameters including grid structure, temporal resolution, simulation period, and energy balance options.

LANGUAGE: config
CODE:
NODES                 3
MODEL_STEPS_PER_DAY   24
SNOW_STEPS_PER_DAY    24
RUNOFF_STEPS_PER_DAY  24
STARTYEAR             $startyear
STARTMONTH            $startmonth
STARTDAY              $startday
ENDYEAR               $endyear
ENDMONTH              $endmonth
ENDDAY                $endday
CALENDAR              PROLEPTIC_GREGORIAN
FULL_ENERGY           FALSE
FROZEN_SOIL           FALSE

----------------------------------------

TITLE: Configuring VIC Model Parameters and Routing
DESCRIPTION: Specifies model parameters file location and key model parameter settings for the Stehekin watershed. Defines snow band representation, baseflow parameterization, and routing parameter file.

LANGUAGE: config
CODE:
PARAMETERS      $test_data_dir/image/Stehekin/parameters/Stehekin_test_params_20160327.nc
SNOW_BAND       TRUE
NODES           3
BASEFLOW             ARNO
JULY_TAVG_SUPPLIED   FALSE
ORGANIC_FRACT        FALSE

ROUT_PARAM          $test_data_dir/image/Stehekin/parameters/stehekin_parameters_01.rvic.prm.Stehekin.20150727.nc

----------------------------------------

TITLE: Running Uncrustify on the Entire VIC Repository in Bash
DESCRIPTION: Command for formatting all source files in the VIC repository using the run_uncrustify.bash script. This ensures consistent code formatting across the entire codebase.

LANGUAGE: bash
CODE:
./run_uncrustify.bash

----------------------------------------

TITLE: Serving VIC Documentation Locally with MkDocs
DESCRIPTION: Command to serve the VIC documentation locally for preview purposes from the top level of the VIC repository.

LANGUAGE: bash
CODE:
mkdocs serve

----------------------------------------

TITLE: Defining Variables with Documentation in C
DESCRIPTION: Example of proper variable definition with documentation comments that include units. This demonstrates the preferred approach for documenting variables in the VIC codebase.

LANGUAGE: C
CODE:
double  canopy_latent;  /**< latent heat flux from the canopy (W/m^2) */

----------------------------------------

TITLE: Running Uncrustify on Individual Files in Bash
DESCRIPTION: Command for running the Uncrustify code beautifier on VIC source files. This command formats the code according to VIC's code style conventions defined in the configuration file.

LANGUAGE: bash
CODE:
uncrustify -c uncrustify_VIC_c.cfg [files ...]

----------------------------------------

TITLE: Configuring Temperature Lapse Rate in VIC Model
DESCRIPTION: Sets the temperature lapse rate parameter which defines how temperature changes with elevation in the model. The value is specified in °C per meter.

LANGUAGE: conf
CODE:
LAPSE_RATE -0.0065   # temperature lapse rate in C/m