TITLE: Implementing a Convex Query Function in TypeScript
DESCRIPTION: This snippet demonstrates how to create a query function in Convex using TypeScript. It includes argument validation, database querying, and data processing.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Defining a Public Query in Convex (TypeScript)
DESCRIPTION: This function defines a query in the Convex app's public API. It allows reading from the database and is accessible from the client.

LANGUAGE: typescript
CODE:
query(func): RegisteredQuery

----------------------------------------

TITLE: Database Operations in Convex Mutations
DESCRIPTION: This example demonstrates how to perform database operations within a Convex mutation using the 'db' field of the mutation context. It shows an asynchronous insert operation.

LANGUAGE: typescript
CODE:
export const addItem = mutation({
  args: { text: v.string() },
  handler: async (ctx, args) => {
    const id = await ctx.db.insert("items", { text: args.text });
    return id;
  },
});

----------------------------------------

TITLE: Validating Mutation Arguments in Convex
DESCRIPTION: This example demonstrates how to declare and validate the types of arguments in a Convex mutation using the 'v' validators. It ensures type safety and input validation for the mutation function.

LANGUAGE: typescript
CODE:
export const myMutation = mutation({
  args: {
    x: v.number(),
    y: v.string(),
  },
  handler: async (ctx, args) => {
    // args.x is a number, args.y is a string
  },
});

----------------------------------------

TITLE: Using the Mutation Constructor in Convex
DESCRIPTION: This example shows how to use the 'mutation' constructor function to declare a mutation in Convex. It includes a handler function that performs the mutation.

LANGUAGE: typescript
CODE:
export const myMutation = mutation({
  handler: async (ctx) => {
    // Perform mutation here
  },
});

----------------------------------------

TITLE: Implementing Team Management Helpers in Convex (TypeScript)
DESCRIPTION: This snippet defines helper functions for team management in Convex, including creating teams, adding members, and checking team membership. It demonstrates the use of Convex's database operations and query patterns.

LANGUAGE: typescript
CODE:
import { v } from "convex/values";
import { DatabaseReader, MutationCtx, QueryCtx } from "convex/server";

export const teamSchema = {
  name: v.string(),
  members: v.array(v.string()),
};

export async function createTeam(
  ctx: MutationCtx,
  name: string,
  userId: string
) {
  const teamId = await ctx.db.insert("teams", {
    name,
    members: [userId],
  });
  return teamId;
}

export async function addTeamMember(
  ctx: MutationCtx,
  teamId: string,
  userId: string
) {
  await ctx.db.patch(teamId, {
    members: {
      $push: userId,
    },
  });
}

export async function isTeamMember(
  ctx: DatabaseReader,
  teamId: string,
  userId: string
) {
  const team = await ctx.db.get(teamId);
  return team?.members.includes(userId) ?? false;
}

export async function getTeamName(ctx: QueryCtx, teamId: string) {
  const team = await ctx.db.get(teamId);
  return team?.name;
}

----------------------------------------

TITLE: Efficient Collection with Indexes
DESCRIPTION: Shows how to use indexes to efficiently collect and filter data instead of loading large result sets. Includes examples of using indexes, pagination, and denormalization.

LANGUAGE: typescript
CODE:
// Using an index for efficient filtering
export const listByGenre = query(async (ctx, { genre }) => {
  return await ctx.db
    .query("movies")
    .withIndex("by_genre", (q) => q.eq("genre", genre))
    .collect();
});

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: This snippet demonstrates how to define a basic mutation function in Convex using the 'mutation' constructor. It takes named arguments, writes data to the database, and returns a result.

LANGUAGE: typescript
CODE:
export const addMessage = mutation({
  args: { body: v.string(), author: v.string() },
  handler: async (ctx, args) => {
    const newId = await ctx.db.insert("messages", {
      body: args.body,
      author: args.author,
    });
    return { id: newId };
  },
});

----------------------------------------

TITLE: TypeScript Function with Argument Validation in Convex
DESCRIPTION: Example of a Convex function using TypeScript with built-in argument validation, demonstrating automatic type inference.

LANGUAGE: typescript
CODE:
<Snippet title="convex/sendMessage.ts" source={ArgValidation} />

----------------------------------------

TITLE: Implementing OCC with Version Checking in Pseudocode
DESCRIPTION: This snippet demonstrates how Optimistic Concurrency Control (OCC) uses version checking to prevent data races and ensure transaction consistency.

LANGUAGE: pseudocode
CODE:
$5 Transfer                           $3 Debit Card Charge
----------------------------------------------------------
(v1, $14) <- READ Alice
(v7, $11) <- READ Bob
                                        (v1, $14) <- READ Alice
                                        WRITE Alice $11
                                        IF Alice.v = v1

WRITE Alice = $9, Bob = $16
    IF Alice.v = v1, Bob.v = v7 // Fails! Alice is = v2

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts validated arguments and reads from the database. The function takes a number and string parameter, queries a table, and returns the retrieved documents.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Database Access in Queries
DESCRIPTION: Example of using the database context to fetch data within a query function.

LANGUAGE: typescript
CODE:
export const getMessage = query({
  args: { id: v.id("messages") },
  handler: async (ctx, { id }) => {
    return await ctx.db.get(id);
  }
});

----------------------------------------

TITLE: Implementing Optional Field Validation in Convex TypeScript
DESCRIPTION: Demonstrates how to validate optional fields using v.optional validator wrapper in Convex mutations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export default mutation({
  args: {
    optionalString: v.optional(v.string()),
    optionalNumber: v.optional(v.number()),
  },
  handler: async ({ db }, { optionalString, optionalNumber }) => {
    //...
  },
});

----------------------------------------

TITLE: Defining Schema with Index in Convex
DESCRIPTION: Example showing how to define a messages table schema with an index for channel-based filtering in Convex.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  messages: defineTable({
    channel: v.id("channels"),
    body: v.string(),
    user: v.id("users"),
  }).index("by_channel", ["channel"]),
});

----------------------------------------

TITLE: Defining a Paginated Query Function in Convex
DESCRIPTION: This snippet demonstrates how to create a paginated query function in Convex. It uses the .paginate() method on a database query and returns a PaginationResult.

LANGUAGE: typescript
CODE:
export const list = query({
  args: paginationOptsValidator,
  handler: async (ctx, args) => {
    return await ctx.db
      .query("messages")
      .order("desc")
      .paginate(args.paginationOpts);
  },
});

----------------------------------------

TITLE: Defining Basic Schema Types in TypeScript
DESCRIPTION: Example showing how to define a basic schema with various data types using Convex's validator builder.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  documents: defineTable({
    id: v.id("documents"),
    string: v.string(),
    number: v.number(),
    boolean: v.boolean(),
    nestedObject: v.object({
      property: v.string(),
    }),
  }),
});

----------------------------------------

TITLE: Using Mutation Context in Convex
DESCRIPTION: This snippet shows how to use the MutationCtx object in a Convex mutation. The context provides access to various Convex features, including database operations, file storage, authentication, and scheduling.

LANGUAGE: typescript
CODE:
export const myMutation = mutation({
  handler: async (ctx) => {
    // Use ctx.db, ctx.storage, ctx.auth, or ctx.scheduler here
  },
});

----------------------------------------

TITLE: Extracting TypeScript Types from Validators in Convex
DESCRIPTION: Shows how to use the Infer type to generate TypeScript types from Convex validators, reducing duplication between validators and types.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { Infer, v } from "convex/values";

const nestedObject = v.object({
  property: v.string(),
});

// Resolves to `{property: string}`.
export type NestedObject = Infer<typeof nestedObject>;

export default mutation({
  args: {
    nested: nestedObject,
  },
  handler: async ({ db }, { nested }) => {
    //...
  },
});

----------------------------------------

TITLE: Updating getWikipediaSummary Action to Send Results to Chat
DESCRIPTION: This code updates the getWikipediaSummary action to send the fetched Wikipedia summary back to the chat using the sendMessage mutation. It showcases how to use the Convex scheduler to chain actions and mutations.

LANGUAGE: typescript
CODE:
export const getWikipediaSummary = internalAction({
  args: { topic: v.string() },
  handler: async (ctx, args) => {
    const response = await fetch(
      "https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=" +
        args.topic,
    );

    const summary = getSummaryFromJSON(await response.json());
    await ctx.scheduler.runAfter(0, api.chat.sendMessage, {
      user: "Wikipedia",
      body: summary,
    });
  },
});

----------------------------------------

TITLE: Efficient Filtering Using for await...of in Convex Query (TypeScript)
DESCRIPTION: This snippet demonstrates a more efficient way to find the first post with a specific tag using the `for await...of` syntax, avoiding reading the entire table.

LANGUAGE: typescript
CODE:
export const firstPostWithTag = query({
  args: { tag: v.string() },
  handler: (ctx, args) => {
    for await (const post of db.query("posts")) {
      if (post.tags.includes(args.tag)) {
        return post;
      }
    }
  },
});

----------------------------------------

TITLE: Implementing Convex Query Function in TypeScript
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments, validates them, and queries a database table. Shows pattern for reading data and processing results.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Defining Convex Query Function in TypeScript
DESCRIPTION: TypeScript code defining a Convex query function to retrieve tasks from the database.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";

export const get = query(async ({ db }) => {
  return await db.query("tasks").collect();
});

----------------------------------------

TITLE: Defining DataModel Type in TypeScript for Convex
DESCRIPTION: Creates a comprehensive type describing the entire Convex data model, including information about tables, document types, and indexes. This type is used to ensure type safety in query and mutation operations.

LANGUAGE: TypeScript
CODE:
Ƭ **DataModel**: `Object`

----------------------------------------

TITLE: Storing Generated Images in Convex Actions (TypeScript)
DESCRIPTION: This TypeScript code demonstrates how to fetch an image from an API, store it in Convex storage, and save its metadata. It includes error handling and uses Convex's storage, mutation, and action APIs.

LANGUAGE: typescript
CODE:
import { v } from "convex/values";
import { action } from "./_generated/server";

export const store = action({
  args: {
    prompt: v.string(),
  },
  handler: async (ctx, args) => {
    // Fetch image from API
    const response = await fetch("https://example.com/generate-image", {
      method: "POST",
      body: JSON.stringify({ prompt: args.prompt }),
    });
    if (!response.ok) {
      throw new Error(`Failed to generate image: ${response.statusText}`);
    }
    const image = await response.arrayBuffer();

    // Store image
    const storageId = await ctx.storage.store(image);

    // Save metadata
    await ctx.runMutation(internal.images.save, {
      storageId,
      prompt: args.prompt,
    });
    return storageId;
  },
});

// Internal mutation to save image metadata
const save = internalMutation({
  args: {
    storageId: v.id("_storage"),
    prompt: v.string(),
  },
  handler: async (ctx, args) => {
    const id = await ctx.db.insert("images", {
      storageId: args.storageId,
      prompt: args.prompt,
    });
    return id;
  },
});

----------------------------------------

TITLE: Defining Indexes in Convex Schema
DESCRIPTION: Example of defining a messages table schema with two indexes - by_channel and by_channel_user. Shows how to create indexes on single and multiple fields.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

// Define a messages table with two indexes.
export default defineSchema({
  messages: defineTable({
    channel: v.id("channels"),
    body: v.string(),
    user: v.id("users"),
  })
    .index("by_channel", ["channel"])
    .index("by_channel_user", ["channel", "user"]),
});

----------------------------------------

TITLE: Defining a Query Function in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments. It shows the structure for defining argument validators and the function handler, which can read from the database and process data.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Query Arguments With Validation
DESCRIPTION: Shows how to implement argument validation using Convex validators with the 'v' object.

LANGUAGE: typescript
CODE:
export const listMessages = query({
  args: {
    author: v.string(),
    count: v.number()
  },
  handler: async (ctx, { author, count }) => {
    // Implementation with validated arguments
  }
});

----------------------------------------

TITLE: Returning Typed Error Results in TypeScript
DESCRIPTION: Example of using TypeScript return types to handle error scenarios in a createUser mutation

LANGUAGE: typescript
CODE:
Id<"users"> | { error: "EMAIL_ADDRESS_IN_USE" };

----------------------------------------

TITLE: Accessing User Identity Fields - TypeScript
DESCRIPTION: Shows how to access standard OpenID Connect identity fields from the UserIdentity object, including handling optional fields that may be present depending on the identity provider configuration.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";

export const listFields = query(async (ctx) => {
  const identity = await ctx.auth.getUserIdentity();
  if (!identity) {
    return null;
  }
  return {
    // Fields that are always present
    tokenIdentifier: identity.tokenIdentifier,
    subject: identity.subject,
    issuer: identity.issuer,
    // Optional fields that may be present depending on the provider
    email: identity.email,
    emailVerified: identity.emailVerified,
    givenName: identity.givenName,
    familyName: identity.familyName,
    pictureUrl: identity.pictureUrl,
  };
});

----------------------------------------

TITLE: Testing Authenticated Convex Functions
DESCRIPTION: Example of testing Convex functions with authenticated user identities using convex-test.

LANGUAGE: typescript
CODE:
import { convexTest } from "convex-test";
import { expect, test } from "vitest";
import { api } from "./_generated/api";
import schema from "./schema";

test("authenticated functions", async () => {
  const t = convexTest(schema);

  const asSarah = t.withIdentity({ name: "Sarah" });
  await asSarah.mutation(api.tasks.create, { text: "Add tests" });

  const sarahsTasks = await asSarah.query(api.tasks.list);
  expect(sarahsTasks).toMatchObject([{ text: "Add tests" }]);

  const asLee = t.withIdentity({ name: "Lee" });
  const leesTasks = await asLee.query(api.tasks.list);
  expect(leesTasks).toEqual([]);
});

----------------------------------------

TITLE: Using OR Operator in Convex Query Filter (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the OR operator in a filter to query users named either "Alex" or "Emma".

LANGUAGE: typescript
CODE:
const usersNamedAlexOrEmma = await ctx.db
  .query("users")
  .filter((q) =>
    q.or(q.eq(q.field("name"), "Alex"), q.eq(q.field("name"), "Emma")),
  )
  .collect();

----------------------------------------

TITLE: Implementing Wikipedia Summary Action in Convex
DESCRIPTION: This code snippet defines an action function that fetches a Wikipedia summary for a given topic using the Wikipedia API. It demonstrates how to make external API calls within a Convex action and process the response.

LANGUAGE: typescript
CODE:
import { query, mutation, internalAction } from "./_generated/server";

export const getWikipediaSummary = internalAction({
  args: { topic: v.string() },
  handler: async (ctx, args) => {
    const response = await fetch(
      "https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=" +
        args.topic,
    );

    return getSummaryFromJSON(await response.json());
  },
});

function getSummaryFromJSON(data: any) {
  const firstPageId = Object.keys(data.query.pages)[0];
  return data.query.pages[firstPageId].extract;
}

----------------------------------------

TITLE: TypeScript with Schema Implementation in Convex
DESCRIPTION: Example showing how to use TypeScript with a defined schema in Convex, demonstrating proper typing of documents and document references.

LANGUAGE: typescript
CODE:
<Snippet title="convex/messages.ts" source={WithSchema} />

----------------------------------------

TITLE: Filtering Data in Convex Queries
DESCRIPTION: Demonstrates how to properly filter database queries using TypeScript code instead of .filter(), which is more readable and flexible. Shows both the recommended approach and what to avoid.

LANGUAGE: typescript
CODE:
// Recommended approach - filtering in code
export const list = query(async (ctx) => {
  const messages = await ctx.db
    .query("messages")
    .collect();
  return messages.filter((message) => message.text.includes("hello"));
});

----------------------------------------

TITLE: Implementing Union Type Validation in Convex TypeScript
DESCRIPTION: Demonstrates how to validate fields that could be one of multiple types using v.union validator in a Convex mutation function.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export default mutation({
  args: {
    stringOrNumber: v.union(v.string(), v.number()),
  },
  handler: async ({ db }, { stringOrNumber }) => {
    //...
  },
});

----------------------------------------

TITLE: Calling Mutations from React Client in Convex
DESCRIPTION: This example shows how to call a Convex mutation from a React client using the useMutation hook and the generated api object. It demonstrates adding a new message to the database.

LANGUAGE: typescript
CODE:
import { useMutation } from "convex/react";
import { api } from "../convex/_generated/api";

export default function AddMessage() {
  const addMessage = useMutation(api.messages.add);
  return (
    <button
      onClick={() => {
        addMessage({ body: "Hello", author: "Me" });
      }}
    >
      Add Message
    </button>
  );
}

----------------------------------------

TITLE: Implementing Convex Mutations and Actions
DESCRIPTION: Examples of using Convex mutations and actions with TanStack Query's useMutation hook.

LANGUAGE: typescript
CODE:
const mutationFn = useConvexMutation(api.board.createColumn);
const { mutate } = useMutation({ mutationFn });

LANGUAGE: typescript
CODE:
const { mutate } = useMutation({
  mutationFn: useConvexAction(api.time.getTotal),
});

----------------------------------------

TITLE: Generating Debug Bundle for Convex
DESCRIPTION: Command to generate a debug bundle for Convex without pushing code, useful for debugging bundle size issues.

LANGUAGE: sh
CODE:
npx convex dev --once --debug-bundle-path /tmp/myBundle

----------------------------------------

TITLE: Defining Schema in TypeScript
DESCRIPTION: Example of defining a schema for a chat application using Convex's schema definition system. Shows how to specify table structure with typed fields.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

// @snippet start schema
export default defineSchema({
  messages: defineTable({
    author: v.id("users"),
    body: v.string(),
  }),
});

----------------------------------------

TITLE: Calling Actions with useAction Hook in React
DESCRIPTION: Demonstrates how to use the useAction hook to call Convex actions from a React component.

LANGUAGE: tsx
CODE:
import { useAction } from "convex/react";
import { api } from "../convex/_generated/api";

export function App() {
  const doSomeAction = useAction(api.functions.doSomeAction);
  return <button onClick={() => doSomeAction()}>Click me</button>;
}

----------------------------------------

TITLE: Initializing Convex with React Query Client Setup
DESCRIPTION: Configuration of ConvexClient and ConvexQueryClient with React Query, setting up default query options and connecting the clients together.

LANGUAGE: typescript
CODE:
const convexClient = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL);
const convexQueryClient = new ConvexQueryClient(convexClient);
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryKeyHashFn: convexQueryClient.hashFn(),
      queryFn: convexQueryClient.queryFn(),
    },
  },
});
convexQueryClient.connect(queryClient);

----------------------------------------

TITLE: Implementing Record Object Validation in Convex TypeScript
DESCRIPTION: Demonstrates validation for objects that map arbitrary keys to values using v.record validator in Convex mutations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export default mutation({
  args: {
    simpleMapping: v.record(v.string(), v.boolean()),
  },
  handler: async ({ db }, { simpleMapping }) => {
    //...
  },
});

----------------------------------------

TITLE: Accessing Auth Context in Convex Functions - TypeScript
DESCRIPTION: Demonstrates how to access authenticated user information within Convex functions using the auth context. Shows examples for both successful authentication and handling unauthenticated users.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";

export const myFunction = query(async (ctx) => {
  const identity = await ctx.auth.getUserIdentity();
  if (identity === null) {
    throw new Error("Unauthenticated call to function");
  }
  console.log("User ID:", identity.subject);
  return identity.tokenIdentifier;
});

----------------------------------------

TITLE: Basic Ordering in Convex Queries
DESCRIPTION: Examples of ordering query results in ascending and descending order based on creation time.

LANGUAGE: typescript
CODE:
const messages = await ctx.db.query("messages").order("asc").collect();

LANGUAGE: typescript
CODE:
const messages = await ctx.db.query("messages").order("desc").collect();

----------------------------------------

TITLE: Using a Mutation Function in React (TypeScript)
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Defining Id Type in TypeScript for Convex Document Identifiers
DESCRIPTION: Defines a type for document identifiers in Convex, which are unique for each document and used for database operations. This type is parameterized by the table name.

LANGUAGE: TypeScript
CODE:
Id<TableName extends TableNames>

----------------------------------------

TITLE: Implementing Convex Mutation Function
DESCRIPTION: Demonstrates how to create a Convex mutation function that modifies the database. Shows argument validation and database insertion with return value handling.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Calling Convex Function API with Node.js
DESCRIPTION: Example of using Node.js fetch API to call a Convex function via the HTTP API. This snippet shows how to construct the request object and make a POST request to the /api/query endpoint.

LANGUAGE: javascript
CODE:
const url = "https://acoustic-panther-728.convex.cloud/api/query";
const request = { path: "messages:list", args: {}, format: "json" };

const response = fetch(url, {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify(request),
});

----------------------------------------

TITLE: Defining Vector Index Schema in TypeScript
DESCRIPTION: Shows how to define a vector index in a Convex schema for searching similar foods within a cuisine. The schema includes vector field definition and filter fields for efficient querying.

LANGUAGE: typescript
CODE:
export default defineSchema({
  foods: defineTable({
    name: v.string(),
    cuisine: v.string(),
    description: v.string(),
    embedding: v.array(v.float64()),
  }).vectorIndex("by_embedding", {
    vectorField: "embedding",
    dimensions: 1536,
    filterFields: ["cuisine"],
  }),
});

----------------------------------------

TITLE: Installing Convex Dependencies
DESCRIPTION: Install the Convex client and server library in the React project

LANGUAGE: sh
CODE:
cd my-app && npm install convex

----------------------------------------

TITLE: Fetching Data with useQuery Hook in React
DESCRIPTION: Demonstrates how to use the useQuery hook to fetch data from a Convex backend in a React component.

LANGUAGE: tsx
CODE:
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export function App() {
  const data = useQuery(api.functions.myQuery);
  return data ?? "Loading...";
}

----------------------------------------

TITLE: Defining a Public Mutation in Convex (TypeScript)
DESCRIPTION: This function defines a mutation in the Convex app's public API. It allows modifying the database and is accessible from the client.

LANGUAGE: typescript
CODE:
mutation(func): RegisteredMutation

----------------------------------------

TITLE: Implementing Basic Convex Action Constructor
DESCRIPTION: Demonstrates how to declare a basic action using the action constructor function with a handler that performs the action. The action can optionally return a value.

LANGUAGE: typescript
CODE:
export const myAction = action({
  handler: async (ctx) => {
    // Perform action here
  },
});

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: Demonstrates how to use the previously defined Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Editing Data with useMutation Hook in React
DESCRIPTION: Demonstrates how to use the useMutation hook to edit data in a Convex backend from a React component.

LANGUAGE: tsx
CODE:
import { useMutation } from "convex/react";
import { api } from "../convex/_generated/api";

export function App() {
  const doSomething = useMutation(api.functions.doSomething);
  return <button onClick={() => doSomething()}>Click me</button>;
}

----------------------------------------

TITLE: Exporting Convex Data to a File using CLI
DESCRIPTION: This command uses the Convex CLI to export data from a Convex deployment to a local file. It generates a ZIP file containing all documents from all tables in the deployment, along with file storage data.

LANGUAGE: sh
CODE:
npx convex export --path ~/Downloads

----------------------------------------

TITLE: Using Convex Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, showing both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: CORS Headers Implementation in HTTP Action
DESCRIPTION: Example showing how to add CORS headers to a Convex HTTP action for handling cross-origin requests and pre-flight checks.

LANGUAGE: typescript
CODE:
const headers = new Headers({
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization"
});

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the mutation result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Circular References Schema Example
DESCRIPTION: Example showing how to handle circular references in schemas by making one reference nullable.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  users: defineTable({
    preferencesId: v.id("preferences"),
  }),
  preferences: defineTable({
    userId: v.union(v.id("users"), v.null()),
  }),
});

----------------------------------------

TITLE: Handling Mutation Responses and Errors in React
DESCRIPTION: Shows how to handle responses and errors from Convex mutations in a React component using async/await.

LANGUAGE: tsx
CODE:
export function App() {
  const doSomething = useMutation(api.functions.doSomething);
  const onClick = () => {
    async function callBackend() {
      try {
        const result = await doSomething();
      } catch (error) {
        console.error(error);
      }
      console.log(result);
    }
    void callBackend();
  };
  return <button onClick={onClick}>Click me</button>;
}

----------------------------------------

TITLE: Using Action Context for Database Operations
DESCRIPTION: Demonstrates how to use ActionCtx to interact with the database and other Convex features. Shows context usage for running queries and mutations.

LANGUAGE: typescript
CODE:
export const myAction = action({
  handler: async (ctx) => {
    // Use ctx.runQuery to read data
    // Use ctx.runMutation to write data
    // Use ctx.storage for file operations
    // Use ctx.auth for authentication
  },
});

----------------------------------------

TITLE: Initializing ConvexClient in TypeScript/JavaScript
DESCRIPTION: This snippet demonstrates how to initialize a ConvexClient, query data, and subscribe to real-time updates. It shows the usage of the client in both TypeScript and JavaScript environments.

LANGUAGE: typescript
CODE:
import { ConvexClient } from "convex/browser";
import { api } from "../_generated/api";

const address = "https://eager-animal-123.convex.cloud";
const client = new ConvexClient(address);

// Run a query
const todos = await client.query(api.todos.get);
console.log(todos);

// Subscribe to a query
const unsubscribe = client.subscribe(api.todos.get, {}, (todos) => {
  console.log("Todos updated:", todos);
});

// Run a mutation
await client.mutation(api.todos.add, { text: "Buy milk" });

// Later: stop subscribing
unsubscribe();

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: Demonstrates how to use the previously defined mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Defining Internal Mutation in Convex (TypeScript/JavaScript)
DESCRIPTION: This snippet demonstrates how to define an internal mutation function in Convex. It uses argument validation and updates a document in the 'plans' table.

LANGUAGE: typescript
CODE:
import { internalMutation } from "./_generated/server";
import { v } from "convex/values";

export const markPlanAsProfessional = internalMutation({
  args: { planId: v.id("plans") },
  handler: async (ctx, args) => {
    await ctx.db.patch(args.planId, { tier: "professional" });
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a mutation function in Convex. It includes argument validation, database interaction for inserting data, and returning the inserted data.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Subscribing to Real-time Query in SwiftUI View
DESCRIPTION: Demonstrates how to subscribe to a Convex query and update a SwiftUI view with real-time data using a @State variable and .task modifier.

LANGUAGE: swift
CODE:
struct ColorList: View {
  @State private var colors: [String] = []

  var body: some View {
    List {
      ForEach(colors, id: \.self) { color in
        Text(color)
      }
    }.task {
      let latestColors = convex.subscribe(to: "colors:get", yielding: [String].self)
        .replaceError(with: [])
        .values
      for await colors in latestColors {
        self.colors = colors
      }
    }
  }
}

----------------------------------------

TITLE: Using usePaginatedQuery with Additional Arguments in React
DESCRIPTION: This snippet shows how to use the usePaginatedQuery hook with additional arguments. It filters messages by author in addition to pagination.

LANGUAGE: tsx
CODE:
export default function MessageListByAuthor({ author }: { author: string }) {
  const { results, status, loadMore } = usePaginatedQuery(
    api.messages.listByAuthor,
    { author },
    { initialNumItems: 10 }
  );

  return (
    <ul>
      {results.map((message) => (
        <li key={message._id}>{message.body}</li>
      ))}
      {status === "CanLoadMore" && (
        <button onClick={() => loadMore(10)}>Load More</button>
      )}
    </ul>
  );
}

----------------------------------------

TITLE: Fetching Vector Search Results
DESCRIPTION: Shows different filtering patterns for vector search queries, including single value filters, multiple values with OR conditions, and filtering across multiple fields.

LANGUAGE: typescript
CODE:
// Single value filter
const filter = q.eq("cuisine", "French");

// Multiple values filter
const filter = q.or(q.eq("cuisine", "French"), q.eq("cuisine", "Indonesian"));

// Multiple fields filter
const filter = q.or(
  q.eq("cuisine", "French"),
  q.eq("mainIngredient", "butter")
);

----------------------------------------

TITLE: Implementing Convex Query Subscription in HTML
DESCRIPTION: This snippet shows how to subscribe to Convex queries directly in an HTML file using a script tag. It demonstrates setting up the Convex client and subscribing to a query.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
  <head>
    <script src="https://unpkg.com/convex@1.5.1/dist/convex.js"></script>
    <script>
      const { ConvexClient } = convex;
      const client = new ConvexClient("CONVEX_URL_GOES_HERE");
      async function main() {
        const messages = await client.query("listMessages");
        document.body.innerHTML = JSON.stringify(messages);
        client.onUpdate("listMessages", (messages) => {
          document.body.innerHTML = JSON.stringify(messages);
        });
      }
      main();
    </script>
  </head>
  <body></body>
</html>

----------------------------------------

TITLE: Defining a Convex Query Function in TypeScript
DESCRIPTION: Example of creating a Convex query function to retrieve tasks from a task list. It demonstrates how to use the query builder, indexes, and pagination.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

// Return the last 100 tasks in a given task list.
export const getTaskList = query({
  args: { taskListId: v.id("taskLists") },
  handler: async (ctx, args) => {
    const tasks = await ctx.db
      .query("tasks")
      .withIndex("taskListId", (q) => q.eq("taskListId", args.taskListId))
      .order("desc")
      .take(100);
    return tasks;
  },
});

----------------------------------------

TITLE: Updating a Document by ID in Convex
DESCRIPTION: Demonstrates how to update a document in place using its ID with the 'patch' method.

LANGUAGE: typescript
CODE:
await ctx.db.patch(userId, { name: "Steph Curry" });

----------------------------------------

TITLE: Implementing Query and Mutation Functions in Convex
DESCRIPTION: Example showing how to create server functions for reading and writing data in Convex. Demonstrates a query function to fetch open tasks and a mutation function to update task completion status.

LANGUAGE: typescript
CODE:
// A Convex query function
export const getAllOpenTasks = query({
  args: {},
  handler: async (ctx, args) => {
    // Query the database to get all items that are not completed
    const tasks = await ctx.db
      .query("tasks")
      .withIndex("by_completed", (q) => q.eq("completed", false))
      .collect();
    return tasks;
  },
});

// A Convex mutation function
export const setTaskCompleted = mutation({
  args: { taskId: v.id("tasks"), completed: v.boolean() },
  handler: async (ctx, { taskId, completed }) => {
    // Update the database using TypeScript
    await ctx.db.patch(taskId, { completed });
  },
});

----------------------------------------

TITLE: Creating Document References in Convex
DESCRIPTION: Demonstrates how to create relationships between documents by embedding IDs as references.

LANGUAGE: typescript
CODE:
await ctx.db.insert("books", {
  title,
  ownerId: user._id,
});

----------------------------------------

TITLE: HTTP Request Example Using cURL
DESCRIPTION: Example of making an HTTP request to a Convex endpoint using cURL, demonstrating how to send JSON data to the postMessage endpoint.

LANGUAGE: bash
CODE:
export DEPLOYMENT_NAME=... # example: "happy-animal-123"
curl -d '{ "author": "User 123", "body": "Hello world" }' \
    -H 'content-type: application/json' "https://$DEPLOYMENT_NAME.convex.site/postMessage"

----------------------------------------

TITLE: Manual Pagination in Convex
DESCRIPTION: This example demonstrates how to manually paginate through results outside of React. It uses a while loop to fetch all messages and accumulate them in an array.

LANGUAGE: typescript
CODE:
export async function downloadAllMessages(convex: ConvexHttpClient) {
  const messages: Message[] = [];
  let cursor: string | null = null;
  while (true) {
    const result = await convex.query("messages:list")(
      { paginationOpts: { numItems: 1000, cursor } }
    );
    messages.push(...result.page);
    if (!result.isDone) {
      cursor = result.continueCursor;
    } else {
      break;
    }
  }
  return messages;
}

----------------------------------------

TITLE: Setting Up Convex with TanStack Query in React
DESCRIPTION: Shows how to configure Convex with TanStack Query in a React application. This includes creating a ConvexQueryClient and connecting it to the TanStack Query QueryClient.

LANGUAGE: jsx
CODE:
import { StrictMode } from "react";
import ReactDOM from "react-dom/client";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ConvexProvider, ConvexReactClient } from "convex/react";
import { ConvexQueryClient, convexQueryHooks } from "@convex-dev/react-query";
import App from "./App";

const convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL as string);
const queryClient = new QueryClient();
const convexQueryClient = new ConvexQueryClient(convex);
queryClient.setQueryDefaults(["convex"], convexQueryHooks(convexQueryClient));

ReactDOM.createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <ConvexProvider client={convex}>
      <QueryClientProvider client={queryClient}>
        <App />
      </QueryClientProvider>
    </ConvexProvider>
  </StrictMode>
);

----------------------------------------

TITLE: Using a Mutation Function in React with Convex
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Handling Mutation Errors with Promise Catch
DESCRIPTION: Example demonstrating how to handle errors in Convex mutations using Promise catch blocks.

LANGUAGE: javascript
CODE:
sendMessage(newMessageText).catch((error) => {
  // Do something with `error` here
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a query function implementation that takes numeric and string arguments. Shows how to validate arguments, query the database, and process results. Includes database reading operations and argument handling.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: HTTP Authentication Call - TypeScript
DESCRIPTION: Demonstrates how to make authenticated HTTP requests to Convex endpoints by including a JWT token in the Authorization header.

LANGUAGE: typescript
CODE:
const token = "your jwt token here";
const response = await fetch("https://happy-animal-123.convex.cloud/api/myEndpoint", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    // Include the JWT token in the Authorization header
    Authorization: `Bearer ${token}`,
  },
  body: JSON.stringify({ arg: { message: "Hello!" } }),
});

----------------------------------------

TITLE: Bulk Inserting Products in Convex Database - TypeScript
DESCRIPTION: Demonstrates how to perform bulk insert operations in Convex database using a mutation function. The function takes an array of product objects and inserts them efficiently in a single transaction. Each product contains name, category, price, and stock status.

LANGUAGE: typescript
CODE:
export const bulkInsertProducts = mutation({
  args: {
    products: v.array(
      v.object({
        product_name: v.string(),
        category: v.string(),
        price: v.number(),
        in_stock: v.boolean(),
      }),
    ),
  },
  handler: async (ctx, args) => {
    const { products } = args;

    // Insert in a loop. This is efficient because Convex queues all the changes
    // to be executed in a single transaction when the mutation ends.
    for (const product of products) {
      const id = await ctx.db.insert("products", {
        product_name: product.product_name,
        category: product.category,
        price: product.price,
        in_stock: product.in_stock,
      });
    }
  },
});

----------------------------------------

TITLE: Configuring ConvexClientProvider with Auth0 in Next.js
DESCRIPTION: This code snippet demonstrates how to set up the ConvexClientProvider with Auth0 authentication in a Next.js app. It uses the Auth0Provider for authentication and wraps the ConvexProvider to provide Convex client functionality to the app.

LANGUAGE: typescript
CODE:
"use client";

import { ConvexProvider, ConvexReactClient } from "convex/react";
import { Auth0Provider, useAuth0 } from "@auth0/auth0-react";
import convexConfig from "../../convex/_generated/clientConfig";
import { ReactNode } from "react";

const convex = new ConvexReactClient(convexConfig);

export default function ConvexClientProvider({
  children,
}: {
  children: ReactNode;
}) {
  return (
    <Auth0Provider
      domain="your-domain.us.auth0.com"
      clientId="your-client-id"
      authorizationParams={{
        redirect_uri: typeof window === "undefined" ? "http://localhost:3000" : window.location.origin,
      }}
    >
      <ConvexProviderWithAuth0>{children}</ConvexProviderWithAuth0>
    </Auth0Provider>
  );
}

function ConvexProviderWithAuth0({ children }: { children: ReactNode }) {
  const { isLoading, isAuthenticated, getIdTokenClaims } = useAuth0();
  return (
    <ConvexProvider
      client={convex}
      authenticator={async () => {
        if (isLoading) {
          return null;
        }
        if (!isAuthenticated) {
          return null;
        }
        const claims = await getIdTokenClaims();
        if (!claims) {
          return null;
        }
        const token = claims.__raw;
        return { token };
      }}
    >
      {children}
    </ConvexProvider>
  );
}

----------------------------------------

TITLE: Initializing Convex Clients in Node.js
DESCRIPTION: Demonstrates how to set up both HTTP and subscription clients for Convex in a Node.js environment using import/export syntax. It shows querying and subscribing to updates from a Convex backend.

LANGUAGE: javascript
CODE:
import { ConvexHttpClient, ConvexClient } from "convex/browser";
import { api } from "./convex/_generated/api.js";

// HTTP client
const httpClient = new ConvexHttpClient(CONVEX_URL_GOES_HERE);
httpClient.query(api.messages.list).then(console.log);

// Subscription client
const client = new ConvexClient(CONVEX_URL_GOES_HERE);
client.onUpdate(api.messages.list, {}, (messages) => console.log(messages));

----------------------------------------

TITLE: Complex Chat Message Optimistic Update Example
DESCRIPTION: Shows implementation of optimistic updates in a multi-channel chat application. Demonstrates handling of temporary IDs, timestamps, and proper state management practices.

LANGUAGE: typescript
CODE:
const mutation = useMutation("messages.send").withOptimisticUpdate(
  (localStore, { channel, body }) => {
    const existingMessages = localStore.getQuery("messages.list", { channel });
    if (existingMessages === undefined) return;

    const newMessage = {
      _id: new Id("messages", crypto.randomUUID()),
      channel,
      body,
      author: "me",
      timestamp: Date.now(),
    };

    localStore.setQuery(
      "messages.list",
      { channel },
      [...existingMessages, newMessage]
    );
  }
);

----------------------------------------

TITLE: Wrapping React App with ConvexProvider
DESCRIPTION: Wraps the main React component with ConvexProvider to make the Convex client available throughout the app.

LANGUAGE: jsx
CODE:
reactDOMRoot.render(
  <React.StrictMode>
    <ConvexProvider client={convex}>
      <App />
    </ConvexProvider>
  </React.StrictMode>,
);

----------------------------------------

TITLE: Initializing Presence Hook in JavaScript
DESCRIPTION: Implementation of the usePresence hook that manages user presence data with room and user identification. Returns the current user's presence, other users' presence, and an update function.

LANGUAGE: javascript
CODE:
const [myPresence, othersPresence, updateMyPresence] = usePresence(
  "chat-room",
  name,
  {
    name,
    emoji: initialEmoji,
  },
);

----------------------------------------

TITLE: Generating Upload URLs in Convex Mutation
DESCRIPTION: Server-side mutation function that generates a secure upload URL using Convex's storage API

LANGUAGE: typescript
CODE:
export const generateUploadUrl = mutation(async (ctx) => {
  return await ctx.storage.generateUploadUrl();
});

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure of a query function, including argument validation and database interaction.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Defining an Internal Mutation in Convex (TypeScript)
DESCRIPTION: This function defines a mutation that is only accessible from other Convex functions, not from the client. It allows reading and writing to the database.

LANGUAGE: typescript
CODE:
internalMutation(func): RegisteredMutation

----------------------------------------

TITLE: Using Convex Mutation Function in React Component (TypeScript)
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Handling Mutation Arguments in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to access named arguments in a Convex mutation function using TypeScript. The argument values are accessible as fields of the second parameter of the handler function.

LANGUAGE: typescript
CODE:
export const myMutation = mutation({
  handler: async (ctx, args) => {
    // Use args.x and args.y here
  },
});

----------------------------------------

TITLE: TypeScript Function Return Types in React
DESCRIPTION: Implementation showing how to use inferred function return types in React components with TypeScript.

LANGUAGE: typescript
CODE:
<Snippet title="src/Components.tsx" source={FunctionReturnTypes} />

----------------------------------------

TITLE: Querying Convex Data with TanStack Query in React
DESCRIPTION: Demonstrates how to use the useQuery hook from TanStack Query with Convex queries. This snippet shows how to subscribe to a Convex query function and handle loading and error states.

LANGUAGE: typescript
CODE:
const { data, isPending, error } = useQuery(convexQuery(api.messages.list, {}));

----------------------------------------

TITLE: Using usePaginatedQuery Hook in React
DESCRIPTION: This example demonstrates how to use the usePaginatedQuery hook in a React component to implement pagination. It renders a list of messages with a 'Load More' button.

LANGUAGE: tsx
CODE:
export default function MessageList() {
  const { results, status, loadMore } = usePaginatedQuery(
    api.messages.list,
    {},
    { initialNumItems: 10 }
  );

  return (
    <ul>
      {results.map((message) => (
        <li key={message._id}>{message.body}</li>
      ))}
      {status === "CanLoadMore" && (
        <button onClick={() => loadMore(10)}>Load More</button>
      )}
    </ul>
  );
}

----------------------------------------

TITLE: Defining Cron Jobs in Convex TypeScript
DESCRIPTION: Example configuration for setting up cron jobs in Convex using the crons.ts file. Shows how to define a cron job with a unique identifier, schedule specification, and target function.

LANGUAGE: typescript
CODE:
import { cronJobs } from "convex/server";

const crons = cronJobs();

crons.interval(
  "clean-up-inactive-users",
  { hours: 24 },
  "tasks/cleanUpInactiveUsers"
);

crons.cron(
  "daily-metrics",
  "0 0 * * *",
  "tasks/computeDailyMetrics"
);

export default crons;

----------------------------------------

TITLE: Implementing Literal Type Validation in Convex TypeScript
DESCRIPTION: Shows how to validate constant fields using v.literal validator, particularly useful when combined with unions in Convex mutations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export default mutation({
  args: {
    oneTwoOrThree: v.union(
      v.literal("one"),
      v.literal("two"),
      v.literal("three"),
    ),
  },
  handler: async ({ db }, { oneTwoOrThree }) => {
    //...
  },
});

----------------------------------------

TITLE: Time-Based Search Query Filtering
DESCRIPTION: Query example showing how to combine full text search with time-based filtering to find messages containing 'hi' sent in the last 10 minutes.

LANGUAGE: javascript
CODE:
const messages = await ctx.db
  .query("messages")
  .withSearchIndex("search_body", (q) => q.search("body", "hi"))
  .filter((q) => q.gt(q.field("_creationTime", Date.now() - 10 * 60000)))
  .take(10);

----------------------------------------

TITLE: TypeScript Context Types in Convex
DESCRIPTION: Implementation of helper functions using TypeScript context types for database access, authentication, and other Convex features.

LANGUAGE: typescript
CODE:
<Snippet title="convex/helpers.ts" source={ContextTypes} />

----------------------------------------

TITLE: Defining User Table Schema in Convex
DESCRIPTION: Schema definition for users table with an index on tokenIdentifier field for efficient lookups.

LANGUAGE: typescript
CODE:
"users": defineTable({
  tokenIdentifier: v.string(),
  name: v.string(),
}).index("by_token", ["tokenIdentifier"])

----------------------------------------

TITLE: Implementing Web File Upload with Generated URLs in React
DESCRIPTION: Example of handling file uploads in a React component using Convex's upload URL generation. Shows the process of fetching an upload URL, sending the file via POST request, and saving the storage ID.

LANGUAGE: typescript
CODE:
async function handleSubmit(event: FormEvent<HTMLFormElement>) {
  event.preventDefault();
  const imageInput = event.currentTarget.image;
  const image = imageInput.files?.[0];
  if (!image) return;

  // 1) Get a short-lived upload URL
  const postUrl = await generateUploadUrl();
  
  // 2) POST the file to the URL
  const result = await fetch(postUrl, {
    method: "POST",
    headers: {
      "Content-Type": image.type,
    },
    body: image,
  });
  const { storageId } = await result.json();
  
  // 3) Save the newly allocated storage ID somewhere useful
  await sendImage(storageId);
}

----------------------------------------

TITLE: Defining Doc Type in TypeScript for Convex Documents
DESCRIPTION: Creates a generic type for documents stored in Convex, parameterized by the table name. This type represents the structure of documents in specific tables.

LANGUAGE: TypeScript
CODE:
Ƭ **Doc**`<TableName>`: `Object`

----------------------------------------

TITLE: Implementing Convex Query Function in TypeScript
DESCRIPTION: Demonstrates how to create a Convex query function that accepts numeric and string arguments. The function includes argument validation and shows database querying patterns.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a mutation function that modifies the database. Shows how to validate arguments, insert data, and return the modified record.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Convex with CommonJS in Node.js
DESCRIPTION: Demonstrates how to use Convex with CommonJS syntax in Node.js, utilizing the generated CommonJS-compatible API file. This approach is necessary for projects not configured to use ES modules.

LANGUAGE: javascript
CODE:
const { ConvexHttpClient, ConvexClient } = require("convex/browser");
const { api } = require("./convex/_generated/api_cjs.cjs");
const httpClient = new ConvexHttpClient(CONVEX_URL_GOES_HERE);

----------------------------------------

TITLE: Combining Filters in Convex Query (TypeScript)
DESCRIPTION: This example shows how to combine multiple conditions in a filter to query users named "Alex" who are at least 18 years old.

LANGUAGE: typescript
CODE:
const adultAlexes = await ctx.db
  .query("users")
  .filter((q) =>
    q.and(q.eq(q.field("name"), "Alex"), q.gte(q.field("age"), 18)),
  )
  .collect();

----------------------------------------

TITLE: Defining an Internal Query in Convex (TypeScript)
DESCRIPTION: This function defines a query that is only accessible from other Convex functions, not from the client. It allows reading from the database.

LANGUAGE: typescript
CODE:
internalQuery(func): RegisteredQuery

----------------------------------------

TITLE: Executing Search Query with Channel Filter
DESCRIPTION: Example of querying messages that match search terms 'hello hi' in the '#general' channel, limiting to 10 results. Demonstrates combining search and equality filters.

LANGUAGE: javascript
CODE:
const messages = await ctx.db
  .query("messages")
  .withSearchIndex("search_body", (q) =>
    q.search("body", "hello hi").eq("channel", "#general"),
  )
  .take(10);

----------------------------------------

TITLE: Implementing User Helper Functions in Convex (JavaScript)
DESCRIPTION: This JavaScript version of the user helper functions provides the same functionality as the TypeScript version, including retrieving user information and checking user existence, using Convex's database queries and error handling.

LANGUAGE: javascript
CODE:
import { ConvexError } from "convex/values";

export async function getUserId(ctx, identity) {
  if (!identity) {
    return null;
  }
  const user = await ctx.db
    .query("users")
    .withIndex("by_token", (q) => q.eq("tokenIdentifier", identity))
    .unique();
  return user?._id ?? null;
}

export async function getUser(ctx, id) {
  const user = await ctx.db.get(id);
  if (!user) {
    throw new ConvexError("User not found");
  }
  return user;
}

export async function userExists(ctx, userId) {
  const user = await ctx.db.get(userId);
  return !!user;
}

----------------------------------------

TITLE: Defining Optional Fields in Schema
DESCRIPTION: Demonstrates how to define optional fields in a Convex schema using v.optional().

LANGUAGE: typescript
CODE:
defineTable({
  optionalString: v.optional(v.string()),
  optionalNumber: v.optional(v.number()),
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function shows database querying and argument validation using Convex's type system.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Initializing ConvexClient in Android Application
DESCRIPTION: Create and initialize a ConvexClient instance in a custom Android Application subclass for global access throughout the app.

LANGUAGE: kotlin
CODE:
package com.example.convexapp

import android.app.Application
import dev.convex.android.ConvexClient

class MyApplication : Application() {
    lateinit var convex: ConvexClient

    override fun onCreate() {
        super.onCreate()
        convex = ConvexClient("https://<your domain here>.convex.cloud")
    }
}

----------------------------------------

TITLE: Implementing Any Type Validation in Convex TypeScript
DESCRIPTION: Shows how to validate fields that can accept any value type using v.any() validator in Convex mutations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export default mutation({
  args: {
    anyValue: v.any(),
  },
  handler: async ({ db }, { anyValue }) => {
    //...
  },
});

----------------------------------------

TITLE: Defining TableNames Type in TypeScript for Convex
DESCRIPTION: Defines a type alias for table names in the Convex data model. This type represents all possible table names as strings.

LANGUAGE: TypeScript
CODE:
Ƭ **TableNames**: `string`

----------------------------------------

TITLE: Handling undefined in Convex Patch Operations (TypeScript)
DESCRIPTION: Demonstrates how to handle undefined values when patching documents in Convex, including removing fields and preserving existing values.

LANGUAGE: typescript
CODE:
if (args.a === null) {
  args.a = undefined;
}
await ctx.db.patch(id, args);

----------------------------------------

TITLE: Implementing Error Boundary in React with Convex
DESCRIPTION: Example showing how to wrap a React application with an error boundary to handle Convex query errors and render fallback UI.

LANGUAGE: tsx
CODE:
<StrictMode>
  <ErrorBoundary>
    <ConvexProvider client={convex}>
      <App />
    </ConvexProvider>
  </ErrorBoundary>
</StrictMode>

----------------------------------------

TITLE: Using a Query Function in a React Component
DESCRIPTION: This snippet shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Preloading Convex Query in Next.js Server Component
DESCRIPTION: Demonstrates how to use preloadQuery in a Next.js Server Component to fetch data from Convex during server rendering.

LANGUAGE: typescript
CODE:
import { preloadQuery } from "convex/nextjs";
import { api } from "../../convex/_generated/api";
import { Tasks } from "./Tasks";

export default async function TasksWrapper() {
  const preloaded = await preloadQuery(api.tasks.get);
  return <Tasks preloaded={preloaded} />;
}

----------------------------------------

TITLE: Paginated Query with Additional Arguments in Convex
DESCRIPTION: This example shows how to define a paginated query function that accepts additional arguments besides paginationOpts. It filters messages by author before pagination.

LANGUAGE: typescript
CODE:
export const listByAuthor = query({
  args: {
    ...paginationOptsValidator,
    author: v.string(),
  },
  handler: async (ctx, args) => {
    const { paginationOpts, author } = args;
    return await ctx.db
      .query("messages")
      .filter((q) => q.eq(q.field("author"), author))
      .order("desc")
      .paginate(paginationOpts);
  },
});

----------------------------------------

TITLE: Updating Counter with Potential Write Conflict in TypeScript
DESCRIPTION: This snippet demonstrates a mutation that updates a counter, which can lead to write conflicts if called frequently. It shows how repeatedly modifying the same document can cause optimistic concurrency control errors.

LANGUAGE: typescript
CODE:
export const updateCounter = mutation({
  args: {},
  handler: async (ctx) => {
    const doc = await ctx.db.get(process.env.COUNTER_ID);
    await ctx.db.patch(doc._id, { value: doc.value + 1 });
  },
});

----------------------------------------

TITLE: Using Helper Functions in Convex Mutations (JavaScript)
DESCRIPTION: This example shows how to define and use helper functions in Convex mutations using JavaScript. It demonstrates a mutation that calls a helper function to perform part of its logic.

LANGUAGE: javascript
CODE:
const generateId = (ctx) => {
  return ctx.db.query("items").count() + 1;
};

export const addItem = mutation({
  args: { text: v.string() },
  handler: async (ctx, args) => {
    const id = generateId(ctx);
    await ctx.db.insert("items", { id, text: args.text });
    return id;
  },
});

----------------------------------------

TITLE: Using a Mutation Function in a React Component
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget and promise-based approaches to handling the mutation result.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Implementing Store User Mutation
DESCRIPTION: Mutation function to store user information including name and tokenIdentifier in the database.

LANGUAGE: typescript
CODE:
export const storeUser = mutation(async ({ db, auth }) => {
  const identity = await auth.getUserIdentity();
  if (!identity) {
    throw new Error("Called storeUser without authentication present");
  }

  // Check if we've already stored this identity before.
  const user = await db
    .query("users")
    .withIndex("by_token", q =>
      q.eq("tokenIdentifier", identity.tokenIdentifier)
    )
    .unique();
  if (user !== null) {
    // If we've seen this identity before but the name has changed, patch the value.
    if (user.name !== identity.name) {
      await db.patch(user._id, { name: identity.name });
    }
    return user._id;
  }
  // If it's a new identity, create a new user.
  return await db.insert("users", {
    name: identity.name!,
    tokenIdentifier: identity.tokenIdentifier,
  });
});

----------------------------------------

TITLE: Validating Serialized IDs in Convex
DESCRIPTION: Shows how to validate an ID from an external source using an argument validator before using it in a Convex function.

LANGUAGE: typescript
CODE:
import { v } from "convex/values";

export const get = query({
  args: { taskId: v.id("tasks") },
  handler: async (ctx, args) => {
    return await ctx.db.get(args.taskId);
  },
});

----------------------------------------

TITLE: Setting up Convex Provider with React Query
DESCRIPTION: Integration of ConvexProvider with QueryClientProvider to enable Convex hooks like mutations and actions.

LANGUAGE: tsx
CODE:
<ConvexProvider client={convex}>
  <QueryClientProvider client={queryClient}>
    <App />
  </QueryClientProvider>
</ConvexProvider>

----------------------------------------

TITLE: Using NPM Packages in Convex Mutations
DESCRIPTION: This snippet demonstrates how to import and use NPM packages in Convex mutations. It shows an example of using the @faker-js/faker package to generate random data.

LANGUAGE: typescript
CODE:
import { faker } from "@faker-js/faker";

export const addRandomUser = mutation({
  handler: async (ctx) => {
    const name = faker.person.fullName();
    const id = await ctx.db.insert("users", { name });
    return { id, name };
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and logging.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Deleting Files using Convex Storage API - TypeScript
DESCRIPTION: Demonstrates how to delete files from Convex storage using the storage.delete() function. The function accepts a storage ID that can be validated using v.id("_storage"). Files can be deleted from mutations, actions, and HTTP actions.

LANGUAGE: typescript
CODE:
import { v } from "convex/values";
import { mutation } from "./_generated/server";

export const deleteImage = mutation({
  args: { storageId: v.id("_storage") },
  handler: async (ctx, { storageId }) => {
    await ctx.storage.delete(storageId);
  },
});

----------------------------------------

TITLE: Storing Generated Images in Convex Actions (JavaScript)
DESCRIPTION: This JavaScript code demonstrates how to fetch an image from an API, store it in Convex storage, and save its metadata. It includes error handling and uses Convex's storage, mutation, and action APIs.

LANGUAGE: javascript
CODE:
import { v } from "convex/values";
import { action } from "./_generated/server";

export const store = action({
  args: {
    prompt: v.string(),
  },
  handler: async (ctx, args) => {
    // Fetch image from API
    const response = await fetch("https://example.com/generate-image", {
      method: "POST",
      body: JSON.stringify({ prompt: args.prompt }),
    });
    if (!response.ok) {
      throw new Error(`Failed to generate image: ${response.statusText}`);
    }
    const image = await response.arrayBuffer();

    // Store image
    const storageId = await ctx.storage.store(image);

    // Save metadata
    await ctx.runMutation(internal.images.save, {
      storageId,
      prompt: args.prompt,
    });
    return storageId;
  },
});

// Internal mutation to save image metadata
const save = internalMutation({
  args: {
    storageId: v.id("_storage"),
    prompt: v.string(),
  },
  handler: async (ctx, args) => {
    const id = await ctx.db.insert("images", {
      storageId: args.storageId,
      prompt: args.prompt,
    });
    return id;
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and result processing. The function takes two arguments: a number and a string.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: CORS Preflight Handler for HTTP Upload
DESCRIPTION: Implementation of OPTIONS request handler for CORS preflight checks in file upload HTTP action

LANGUAGE: typescript
CODE:
export const options = async function options(ctx: ActionCtx, request: Request) {
  return new Response(null, {
    status: 204,
    headers: corsHeaders(request),
  });
};

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex for inserting data into the database. It includes argument validation, database insertion, and optional return value.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Querying Documents by Reference in Convex
DESCRIPTION: Illustrates how to query for documents with a specific reference using the 'filter' method.

LANGUAGE: typescript
CODE:
const myBooks = await ctx.db
  .query("books")
  .filter((q) => q.eq(q.field("ownerId"), user._id))
  .collect();

----------------------------------------

TITLE: Querying Documents with Channel Index
DESCRIPTION: Demonstrates how to query messages using the by_channel index with time range filters. Shows usage of withIndex method with equality and range conditions.

LANGUAGE: typescript
CODE:
const messages = await ctx.db
  .query("messages")
  .withIndex("by_channel", (q) =>
    q
      .eq("channel", channel)
      .gt("_creationTime", Date.now() - 2 * 60000)
      .lt("_creationTime", Date.now() - 60000),
  )
  .collect();

----------------------------------------

TITLE: Initializing Presence Hook with Convex
DESCRIPTION: Example of initializing the usePresence hook to track user presence and typing status in a chat room. Takes room identifier, user name, and initial presence state as parameters.

LANGUAGE: javascript
CODE:
const [myPresence, othersPresence, updateMyPresence] = usePresence(
  "chat-room",
  name,
  { typing: false },
);

----------------------------------------

TITLE: Using Helper Functions in Convex Mutations (TypeScript)
DESCRIPTION: This snippet demonstrates how to define and use helper functions in Convex mutations. It shows a mutation that calls a helper function to perform part of its logic.

LANGUAGE: typescript
CODE:
const generateId = (ctx: QueryCtx) => {
  return ctx.db.query("items").count() + 1;
};

export const addItem = mutation({
  args: { text: v.string() },
  handler: async (ctx, args) => {
    const id = generateId(ctx);
    await ctx.db.insert("items", { id, text: args.text });
    return id;
  },
});

----------------------------------------

TITLE: Rendering FacePile Component in React JSX
DESCRIPTION: Implementation of the FacePile component rendering with presence data. Handles undefined initial state for other users' presence data.

LANGUAGE: jsx
CODE:
<FacePile othersPresence={othersPresence ?? []} />

----------------------------------------

TITLE: Defining Relational Schema in Convex TypeScript
DESCRIPTION: Schema definition for a messaging system with two related tables: channels and messages. Messages reference channels through a foreign key relationship using channel IDs.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  channels: defineTable({
    name: v.string(),
  }),
  messages: defineTable({
    author: v.string(),
    body: v.string(),
    channel: v.id("channels"),
  }),
});

----------------------------------------

TITLE: Using Convex without Generated API in TypeScript/JavaScript
DESCRIPTION: This snippet demonstrates how to use Convex without the generated API file. It uses the untyped 'api' object called 'anyApi' for querying and mutations when the Convex function source is not in the same project.

LANGUAGE: typescript
CODE:
import { ConvexClient } from "convex/browser";
import { anyApi } from "convex/browser";

const address = "https://eager-animal-123.convex.cloud";
const client = new ConvexClient(address);

// Run a query
const result = await client.query(anyApi.myQueryName, { arg1: "value1" });
console.log(result);

// Run a mutation
await client.mutation(anyApi.myMutationName, { arg1: "value1" });

----------------------------------------

TITLE: HTTP Action File Upload Handler
DESCRIPTION: HTTP action implementation for handling file uploads directly, including CORS configuration and storage management

LANGUAGE: typescript
CODE:
export default async function sendImage(ctx: ActionCtx, request: Request) {
  const blob = await request.blob();
  const storageId = await ctx.storage.store(blob);
  await ctx.runMutation(internal.messages.sendImage, { storageId });

  return new Response(JSON.stringify({ storageId }), {
    headers: corsHeaders(request),
  });
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex that inserts data into the database. It includes argument validation and optionally returns the inserted data.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Filtering Query Results
DESCRIPTION: Shows how to combine index queries with filter conditions for more complex filtering requirements.

LANGUAGE: typescript
CODE:
const messages = await ctx.db
  .query("messages")
  .withIndex("by_channel", q => q.eq("channel", channel))
  .filter(q => q.neq(q.field("user"), myUserId)
  .collect();

----------------------------------------

TITLE: Union Types in Schema Definition
DESCRIPTION: Shows how to use union types to allow multiple possible types for a field or document structure.

LANGUAGE: typescript
CODE:
defineTable(
  v.union(
    v.object({
      kind: v.literal("StringDocument"),
      value: v.string(),
    }),
    v.object({
      kind: v.literal("NumberDocument"),
      value: v.number(),
    }),
  ),
);

----------------------------------------

TITLE: Simple Counter Optimistic Update Example in TypeScript/JavaScript
DESCRIPTION: Demonstrates how to implement an optimistic update for a basic counter increment operation. Shows usage of withOptimisticUpdate to temporarily modify query results before server confirmation.

LANGUAGE: typescript
CODE:
const mutation = useMutation("counter.increment").withOptimisticUpdate(
  (localStore, increment) => {
    const currentValue = localStore.getQuery("counter.get", {});
    if (currentValue !== undefined) {
      localStore.setQuery("counter.get", {}, currentValue + increment);
    }
  }
);

----------------------------------------

TITLE: Defining a Query with Session in TypeScript
DESCRIPTION: This code shows how to define a Convex query function using queryWithSession, which includes session context in the handler.

LANGUAGE: typescript
CODE:
export const myQuery = queryWithSession({
  args: {},
  handler: async (ctx, args) => {
   console.log(ctx.session._id);
    ...
  },
});

----------------------------------------

TITLE: HTTP Action for File Serving
DESCRIPTION: HTTP action implementation that serves files directly using storage.get method. Includes access control capabilities and handles file retrieval and response generation.

LANGUAGE: typescript
CODE:
http.route({
  path: "/image/:storageId",
  method: "GET",
  handler: httpAction(async ({ storage, params }) => {
    const storageId = params.storageId as Id<"_storage">;
    const blob = await storage.get(storageId);
    if (blob === null) {
      return new Response("Image not found", {
        status: 404,
      });
    }
    return new Response(blob);
  }),
});

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and async database querying.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Calling Convex Mutation with Arguments in Swift
DESCRIPTION: Shows how to call a Convex mutation with arguments and handle the returned value using async/await syntax.

LANGUAGE: swift
CODE:
let isColorAdded: Bool = try await convex.mutation("colors:put", with: ["color": newColor])

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function that writes to the database. The function accepts two string arguments, inserts a document into the messages table, and returns the inserted document.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Configuring convex.json with JSON Schema
DESCRIPTION: This snippet shows how to set up the convex.json file with a JSON schema for editor validation. It also demonstrates how to specify a custom location for the functions directory.

LANGUAGE: json
CODE:
{
  "$schema": "https://raw.githubusercontent.com/get-convex/convex-backend/refs/heads/main/npm-packages/convex/schemas/convex.schema.json",
  "functions": "src/convex/"
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a mutation function implementation that handles data modifications in the database. Shows how to validate arguments, insert data, and return the modified record.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Creating an API Route with Convex Data in Next.js
DESCRIPTION: This code snippet shows how to create an API route in Next.js that interacts with Convex data. It uses the fetchQuery function to retrieve data from Convex and handles POST requests to update the click count.

LANGUAGE: typescript
CODE:
import { NextApiRequest, NextApiResponse } from "next";
import { fetchQuery } from "convex/nextjs";
import { api } from "../../convex/_generated/api";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method === "GET") {
    const clicks = await fetchQuery(api.myFunctions.getClicks);
    res.status(200).json({ clicks });
  } else if (req.method === "POST") {
    const newClicks = await fetchQuery(api.myFunctions.incrementClicks);
    res.status(200).json({ clicks: newClicks });
  } else {
    res.status(405).json({ message: "Method not allowed" });
  }
}

----------------------------------------

TITLE: Writing Count with Potential Table-wide Conflict in TypeScript
DESCRIPTION: This example shows two mutations: one that writes a count based on the entire 'tasks' table, and another that adds a task. These can conflict if executed simultaneously, demonstrating how broad data dependencies can lead to concurrency issues.

LANGUAGE: typescript
CODE:
export const writeCount = mutation({
  args: {
    target: v.id("counts"),
  },
  handler: async (ctx, args) => {
    const tasks = await ctx.db.query("tasks").collect();
    await ctx.db.patch(args.target, { value: tasks });
  },
});

export const addTask = mutation({
  args: {
    text: v.string(),
  },
  handler: async (ctx, args) => {
    await ctx.db.insert("tasks", { text: args.text });
  },
});

----------------------------------------

TITLE: Defining Convex Query Function in JavaScript
DESCRIPTION: JavaScript code defining a Convex query function to retrieve tasks from the database.

LANGUAGE: javascript
CODE:
import { query } from "./_generated/server";

export const get = query(async ({ db }) => {
  return await db.query("tasks").collect();
});

----------------------------------------

TITLE: Generating File URLs in Convex Query
DESCRIPTION: Query function that returns file URLs using storage.getUrl method from the QueryCtx object. Used to serve files alongside other data in queries and mutations.

LANGUAGE: typescript
CODE:
export const list = query(async ({ storage }) => {
  const messages = await db
    .query("messages")
    .order("desc")
    .collect();
  return Promise.all(
    messages.map(async message => ({
      ...message,
      imageUrl: message.imageId ? await storage.getUrl(message.imageId) : null,
    }))
  );
});

----------------------------------------

TITLE: Authenticated Convex Query in Next.js Server Component
DESCRIPTION: Demonstrates how to make an authenticated request to Convex during server rendering using preloadQuery with a JWT token.

LANGUAGE: typescript
CODE:
import { preloadQuery } from "convex/nextjs";
import { api } from "../../convex/_generated/api";
import { AuthedTasks } from "./AuthedTasks";
import { getAuthToken } from "./auth";

export default async function AuthedTasksWrapper() {
  const preloaded = await preloadQuery(
    api.tasks.get,
    undefined,
    { token: await getAuthToken() }
  );
  return <AuthedTasks preloaded={preloaded} />;
}

----------------------------------------

TITLE: TypeScript Validator Types in Convex
DESCRIPTION: Example of using TypeScript with validators for argument and schema validation, showing how to infer types from validators.

LANGUAGE: typescript
CODE:
<Snippet title="convex/helpers.ts" source={ValidatorTypes} />

----------------------------------------

TITLE: Deploying Convex Functions to Production
DESCRIPTION: Command to deploy Convex functions, indexes, and schema to the production deployment. Includes options for running pre-deploy commands and customizing environment variables.

LANGUAGE: sh
CODE:
npx convex deploy

LANGUAGE: sh
CODE:
npx convex deploy --cmd "npm run build"

LANGUAGE: sh
CODE:
npx convex deploy --cmd 'npm run build' --cmd-url-env-var-name CUSTOM_CONVEX_URL

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Convex Query in Next.js Page Component (TypeScript)
DESCRIPTION: TypeScript code demonstrating how to use the Convex useQuery hook to fetch and display data in a Next.js page component.

LANGUAGE: typescript
CODE:
"use client";

import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export default function Home() {
  const tasks = useQuery(api.tasks.get);
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 w-full max-w-5xl items-center justify-between font-mono text-sm">
        {tasks?.map(({ _id, text }) => (
          <div key={_id}>{text}</div>
        ))}
      </div>
    </main>
  );
}

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and async database querying.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Using Convex Mutation in Next.js Server Action
DESCRIPTION: Demonstrates how to use fetchMutation to call a Convex mutation from a Next.js Server Action.

LANGUAGE: typescript
CODE:
import { api } from "../../../convex/_generated/api";
import { fetchMutation } from "convex/nextjs";

export default function Page() {
  async function onClick() {
    "use server";
    await fetchMutation(api.messages.send, { body: "Hello from server action!" });
  }

  return (
    <form action={onClick}>
      <button type="submit">Send message</button>
    </form>
  );
}

----------------------------------------

TITLE: Access Control Implementation
DESCRIPTION: Demonstrates proper implementation of access control in Convex functions using authentication and authorization checks.

LANGUAGE: typescript
CODE:
export const setTeamOwner = mutation(async (ctx, { teamId, newOwnerId }) => {
  const identity = await ctx.auth.getUserIdentity();
  if (!identity) throw new Error("Not authenticated");
  const team = await ctx.db.get(teamId);
  if (!team) throw new Error("Team not found");
  if (team.ownerId !== identity.subject) {
    throw new Error("Not authorized");
  }
  await ctx.db.patch(teamId, { ownerId: newOwnerId });
});

----------------------------------------

TITLE: Executing HTTP GET and POST Requests to Convex Endpoints using Curl
DESCRIPTION: This snippet demonstrates how to make HTTP GET and POST requests to custom Convex endpoints using curl. It includes examples for retrieving messages by author and posting a new message.

LANGUAGE: bash
CODE:
curl -v 'http://127.0.0.1:8001/getMessagesByAuthor?authorNumber=123'
curl -v -d '{ "author": "User 123", "body": "Hello world" }' \
    -H 'content-type: application/json' 'http://127.0.0.1:8001/postMessage'

----------------------------------------

TITLE: Auth Components Implementation
DESCRIPTION: Example of using Convex's authentication-aware components for conditional rendering based on auth state.

LANGUAGE: tsx
CODE:
import { Authenticated, Unauthenticated, AuthLoading } from "convex/react";

function App() {
  return (
    <div className="App">
      <Authenticated>Logged in</Authenticated>
      <Unauthenticated>Logged out</Unauthenticated>
      <AuthLoading>Still loading</AuthLoading>
    </div>
  );
}

----------------------------------------

TITLE: Using ConvexHttpClient in Node.js
DESCRIPTION: This example shows how to use the ConvexHttpClient in a Node.js environment. It demonstrates querying data and running mutations using the HTTP client.

LANGUAGE: typescript
CODE:
import { ConvexHttpClient } from "convex/browser";
import { api } from "../_generated/api";

const address = "https://eager-animal-123.convex.cloud";
const client = new ConvexHttpClient(address);

// Run a query
const todos = await client.query(api.todos.get);
console.log(todos);

// Run a mutation
await client.mutation(api.todos.add, { text: "Buy milk" });

----------------------------------------

TITLE: Defining Deployment URL in Swift Environment File
DESCRIPTION: Example of an environment-specific Swift file for defining the Convex deployment URL.

LANGUAGE: swift
CODE:
let deploymentUrl = "https://$DEV_OR_PROD.convex.cloud"

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a query function that accepts numeric and string arguments. Demonstrates database querying and argument validation using Convex's type system.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Using Typed IDs in Convex
DESCRIPTION: Shows how to use the 'Id' TypeScript type for type-safe document IDs based on the schema.

LANGUAGE: typescript
CODE:
import { Id } from "./_generated/dataModel";

const userId: Id<"users"> = user._id;

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and async handler implementation.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Implementing Auth0 Login Button
DESCRIPTION: React component for implementing Auth0 login functionality using the useAuth0 hook.

LANGUAGE: tsx
CODE:
import { useAuth0 } from "@auth0/auth0-react";

export default function LoginButton() {
  const { loginWithRedirect } = useAuth0();
  return <button onClick={loginWithRedirect}>Log in</button>;
}

----------------------------------------

TITLE: Logging Arguments in Convex Mutation Function (TypeScript)
DESCRIPTION: This snippet demonstrates how to use console.log to debug a Convex mutation function by logging the received arguments. It shows the basic structure of a Convex mutation with argument validation.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const mutateSomething = mutation({
  args: { a: v.number(), b: v.number() },
  handler: (_, args) => {
    console.log("Received args", args);
    // ...
  },
});

----------------------------------------

TITLE: Using a Query Function in React with Convex
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a mutation function that modifies the database. Demonstrates argument validation, database insertion, and return value handling.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Writing a Test for Convex Functions
DESCRIPTION: Example test file demonstrating how to use convex-test to test Convex functions.

LANGUAGE: typescript
CODE:
import { convexTest } from "convex-test";
import { expect, test } from "vitest";
import { api } from "./_generated/api";
import schema from "./schema";

test("sending messages", async () => {
  const t = convexTest(schema);
  await t.mutation(api.messages.send, { body: "Hi!", author: "Sarah" });
  await t.mutation(api.messages.send, { body: "Hey!", author: "Tom" });
  const messages = await t.query(api.messages.list);
  expect(messages).toMatchObject([
    { body: "Hi!", author: "Sarah" },
    { body: "Hey!", author: "Tom" }
  ]);
});

----------------------------------------

TITLE: Filtering Users by Name in Convex Query (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `filter` method to query users named "Alex" from the 'users' table in Convex.

LANGUAGE: typescript
CODE:
const usersNamedAlex = await ctx.db
  .query("users")
  .filter((q) => q.eq(q.field("name"), "Alex"))
  .collect();

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, performs database operations, and returns results. It includes argument validation and async handling.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Following Document References in Convex
DESCRIPTION: Shows how to retrieve a referenced document using 'ctx.db.get' with the stored ID.

LANGUAGE: typescript
CODE:
const user = await ctx.db.get(book.ownerId);

----------------------------------------

TITLE: Using Convex Mutation Function in React Component (TypeScript)
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the mutation result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Logging User Identity in Convex Function
DESCRIPTION: This snippet demonstrates how to log the user identity at the beginning of a Convex function for debugging purposes. It uses the ctx.auth.getUserIdentity() method to retrieve the user's identity.

LANGUAGE: typescript
CODE:
console.log("server identity", await ctx.auth.getUserIdentity());

----------------------------------------

TITLE: Implementing Mutation Function in Convex with TypeScript
DESCRIPTION: Shows implementation of a mutation function that handles data modifications in the database. Includes argument validation and database operations.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Calling Internal Function from Public Action in Convex (TypeScript/JavaScript)
DESCRIPTION: This snippet shows how to call an internal function from a public action in Convex. It demonstrates the use of the 'internal' object to access and execute the internal function.

LANGUAGE: typescript
CODE:
import { action } from "./_generated/server";
import { internal } from "./_generated/api";
import { v } from "convex/values";

export const upgrade = action({
  args: { planId: v.id("plans") },
  handler: async (ctx, args) => {
    // Charge the user's credit card here
    await internal.plans.markPlanAsProfessional(ctx, {
      planId: args.planId,
    });
  },
});

----------------------------------------

TITLE: Using Convex Query Function in React Component
DESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function showcases argument validation, database querying, and data processing capabilities of Convex.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Importing Component Card List in TypeScript/React
DESCRIPTION: Import statement for the ComponentCardList React component used to display component cards in the documentation.

LANGUAGE: typescript
CODE:
import { ComponentCardList } from "@site/src/ComponentCardList.tsx";

----------------------------------------

TITLE: Defining Search Index Schema in TypeScript
DESCRIPTION: Schema definition example showing how to create a search index for messages with body and channel fields. The search index enables searching message bodies while filtering by channel.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  messages: defineTable({
    body: v.string(),
    channel: v.string(),
  }).searchIndex("search_body", {
    searchField: "body",
    filterFields: ["channel"],
  }),
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return value. The function takes two string arguments and inserts a message into the database.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Vector Search Query Implementation
DESCRIPTION: Demonstrates how to perform a vector search query for similar French foods based on a description. Shows the basic structure of using ctx.vectorSearch and handling results.

LANGUAGE: typescript
CODE:
export const searchFoods = action(async (ctx, description) => {
  const embedding = await generateEmbedding(description);
  const results = await ctx.vectorSearch("foods", "by_embedding", {
    vector: embedding,
    filter: q.eq("cuisine", "French"),
  });
  return results;
});

----------------------------------------

TITLE: Checking Auth Token with Clerk in React
DESCRIPTION: This code snippet shows how to retrieve and log the authentication token when using Clerk for authentication in a React application. It uses the useAuth hook from Clerk.

LANGUAGE: tsx
CODE:
// import { useAuth } from "@clerk/nextjs"; // for Next.js
import { useAuth } from "@clerk/clerk-react";

const { getToken } = useAuth();
console.log(getToken({ template: "convex" }));

----------------------------------------

TITLE: Filtering Adult Users in Convex Query (TypeScript)
DESCRIPTION: This example shows how to use comparison operators in a filter to query users aged 18 or older from the 'users' table.

LANGUAGE: typescript
CODE:
const adults = await ctx.db
  .query("users")
  .filter((q) => q.gte(q.field("age"), 18))
  .collect();

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that accepts numeric and string parameters. Shows how to define argument validators and implement a handler that queries the database.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Demonstrating Random and Time Functions in Convex Mutations
DESCRIPTION: Example showing how Math.random() and Date.now() behave in Convex mutations, illustrating that random values change between runs while time remains frozen during execution.

LANGUAGE: javascript
CODE:
const globalRand = Math.random(); // `globalRand` does not change between runs.
const globalNow = Date.now(); // `globalNow` is the time when Convex functions were deployed.

export const updateSomething = mutation({
  args: {},
  handler: () => {
    const now1 = Date.now(); // `now1` is the time when the function execution started.
    const rand1 = Math.random(); // `rand1` has a new value for each function run.
    // implementation
    const now2 = Date.now(); // `now2` === `now1`
    const rand2 = Math.random(); // `rand1` !== `rand2`
  },
});

----------------------------------------

TITLE: Authentication State Management
DESCRIPTION: Implementation of authentication state checking using Convex's useConvexAuth hook.

LANGUAGE: tsx
CODE:
import { useConvexAuth } from "convex/react";

function App() {
  const { isLoading, isAuthenticated } = useConvexAuth();

  return (
    <div className="App">
      {isAuthenticated ? "Logged in" : "Logged out or still loading"}
    </div>
  );
}

----------------------------------------

TITLE: Implementing Custom Auth Hook for Convex Integration
DESCRIPTION: Custom React hook implementation that bridges the authentication provider's API with Convex's authentication system, handling token management and auth state.

LANGUAGE: jsx
CODE:
function useAuthFromProviderX() {
  const { isLoading, isAuthenticated, getToken } = useProviderXAuth();
  const fetchAccessToken = useCallback(
    async ({ forceRefreshToken }) => {
      return await getToken({ ignoreCache: forceRefreshToken });
    },
    [getToken],
  );
  return useMemo(
    () => ({
      isLoading: isLoading,
      isAuthenticated: isAuthenticated ?? false,
      fetchAccessToken,
    }),
    [isLoading, isAuthenticated, fetchAccessToken],
  );
}

----------------------------------------

TITLE: HTTP-based Image Display in React
DESCRIPTION: React component showing how to use HTTP action endpoints to display images. Demonstrates direct URL usage in img elements.

LANGUAGE: tsx
CODE:
function MessageView({ message }: { message: Message }) {
  return (
    <div>
      {message.imageId && (
        <img
          src={`${CONVEX_URL}/image/${message.imageId}`}
          style={{ maxWidth: 200 }}
          alt="User uploaded"
        />
      )}
    </div>
  );
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function that modifies database data. Includes argument validation and database insertion examples.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Calling Convex Function API with Python
DESCRIPTION: Example of using Python requests library to call a Convex function via the HTTP API. This snippet demonstrates how to construct the request headers and body, and make a POST request to the /api/query endpoint.

LANGUAGE: python
CODE:
import requests

url = "https://acoustic-panther-728.convex.cloud/api/query"
headers = {"accept": "application/json"}
body = {"path": "messages:list", "args": {}, "format": "json"}

response = requests.post(url, headers=headers, json=body)

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to utilize a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Generating OpenAPI Specification for Convex Deployment
DESCRIPTION: Command to generate an OpenAPI specification file (convex-spec.yaml) based on the configured Convex deployment.

LANGUAGE: sh
CODE:
npx convex-helpers open-api-spec

----------------------------------------

TITLE: Filtering Large Carpets Using Arithmetic in Convex Query (TypeScript)
DESCRIPTION: This snippet demonstrates the use of arithmetic operations in a filter to query carpets with an area greater than 100 from the 'carpets' table.

LANGUAGE: typescript
CODE:
const largeCarpets = await ctx.db
  .query("carpets")
  .filter((q) => q.gt(q.mul(q.field("height"), q.field("width")), 100))
  .collect();

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that accepts numeric and string parameters. Demonstrates database querying, argument validation, and data processing patterns.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Defining Internal Function Without Validation (JavaScript)
DESCRIPTION: This example demonstrates how to define an internal function without argument validation in JavaScript. It's useful for passing complex objects, but caution is advised when using with queries or mutations.

LANGUAGE: javascript
CODE:
import { internalMutation } from "./_generated/server";

export const markPlanAsProfessional = internalMutation({
  handler: async (ctx, { planId }) => {
    await ctx.db.patch(planId, { tier: "professional" });
  },
});

----------------------------------------

TITLE: Configuring Convex Auth Config
DESCRIPTION: Server-side configuration for validating Clerk access tokens, setting up the JWT issuer domain and application ID.

LANGUAGE: typescript
CODE:
export default {
  providers: [
    {
      domain: "https://your-issuer-url.clerk.accounts.dev/",
      applicationID: "convex",
    },
  ]
};

----------------------------------------

TITLE: Exporting Data from Convex
DESCRIPTION: Commands to export data from Convex to a directory or zip file, with an option to include file storage.

LANGUAGE: sh
CODE:
npx convex export --path <directoryPath>
npx convex export --path <filePath>.zip
npx convex export --include-file-storage --path <path>

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that modifies database data. Demonstrates argument validation and database operations within the handler function.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Rewriting Imports for External CommonJS Modules in Convex
DESCRIPTION: Example of rewriting imports when marking a CommonJS module as external in Convex to avoid import errors.

LANGUAGE: typescript
CODE:
// ❌ old
import { Foo } from "some-module";

// ✅ new
import SomeModule from "some-module";
const { Foo } = SomeModule;

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function for modifying database data. Includes argument validation and database insertion operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Backup ZIP File Import Command
DESCRIPTION: Command to restore data from a backup ZIP file while maintaining document IDs and creation times

LANGUAGE: sh
CODE:
npx convex import <path>.zip

----------------------------------------

TITLE: Using Preloaded Convex Query in Next.js Client Component
DESCRIPTION: Shows how to use usePreloadedQuery in a Next.js Client Component to access data preloaded by preloadQuery.

LANGUAGE: typescript
CODE:
"use client";

import { usePreloadedQuery } from "convex/react";
import { PreloadedQueryResult } from "convex/nextjs";
import { api } from "../../convex/_generated/api";

export function Tasks(
  { preloaded }: { preloaded: PreloadedQueryResult<typeof api.tasks.get> }
) {
  const tasks = usePreloadedQuery(preloaded);
  return (
    <ul>
      {tasks.map(task => (
        <li key={task._id}>{task.text}</li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Sample OpenAPI Specification for Convex App
DESCRIPTION: Excerpt of a generated OpenAPI specification (convex-spec.yaml) for a Convex application, showing basic structure and server configuration.

LANGUAGE: yaml
CODE:
openapi: 3.0.3
info:
  title: Convex App - OpenAPI 3.0
  version: 0.0.0
  servers:
    - url: "{hostUrl}"
  description: Convex App API
  ...

----------------------------------------

TITLE: Opening Convex Documentation
DESCRIPTION: Command to open the Convex documentation in the default web browser.

LANGUAGE: sh
CODE:
npx convex docs

----------------------------------------

TITLE: Defining an Index in Convex Schema
DESCRIPTION: Shows how to define an index on the 'author' field in the Convex schema to improve query performance.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  books: defineTable({
    author: v.string(),
    title: v.string(),
    text: v.string(),
  }).index("by_author", ["author"]),
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function that modifies the database. The function accepts string arguments and demonstrates database insertion operations.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Configuring Convex Provider
DESCRIPTION: Setup Convex provider and client in the React application entry point

LANGUAGE: js
CODE:
import { ConvexProvider, ConvexReactClient } from "convex/react";

const convex = new ConvexReactClient(process.env.REACT_APP_CONVEX_URL);
root.render(
  <React.StrictMode>
    <ConvexProvider client={convex}>
      <App />
    </ConvexProvider>
  </React.StrictMode>
);

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: User Information Display
DESCRIPTION: Example of accessing and displaying user information using Clerk's useUser hook.

LANGUAGE: tsx
CODE:
import { useUser } from "@clerk/clerk-react";

export default function Badge() {
  const { user } = useUser();
  return <span>Logged in as {user.fullName}</span>;
}

----------------------------------------

TITLE: Creating JavaScript Date from Convex Timestamp
DESCRIPTION: Shows how to create a JavaScript Date object from a Convex timestamp stored as milliseconds since the Unix epoch.

LANGUAGE: javascript
CODE:
new Date(timeInMsSinceEpoch)

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function implementation that accepts numeric and string arguments. Shows how to define argument validators and query the database within the handler function.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Defining Internal Function Without Validation (TypeScript)
DESCRIPTION: This example shows how to define an internal function without argument validation in TypeScript. It's useful for passing complex objects, but caution is advised when using with queries or mutations.

LANGUAGE: typescript
CODE:
import { internalMutation } from "./_generated/server";

export const markPlanAsProfessional = internalMutation({
  handler: async (ctx, { planId }: { planId: Id<"plans"> }) => {
    await ctx.db.patch(planId, { tier: "professional" });
  },
});

----------------------------------------

TITLE: Creating ConvexClientProvider Component in TypeScript
DESCRIPTION: TypeScript code for a client component that wraps the Convex provider for use in Next.js.

LANGUAGE: typescript
CODE:
"use client";

import { ConvexProvider, ConvexReactClient } from "convex/react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export default function ConvexClientProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  return <ConvexProvider client={convex}>{children}</ConvexProvider>;
}

----------------------------------------

TITLE: Single Table Import Command
DESCRIPTION: Command to import data into a specific table from CSV, JSON, or JSONLines files

LANGUAGE: sh
CODE:
npx convex import --table <tableName> <path>

----------------------------------------

TITLE: Querying with Index and Filter in Convex
DESCRIPTION: Shows how to combine an indexed query with additional filtering to find a specific book by author and title.

LANGUAGE: typescript
CODE:
const foundation = await ctx.db
  .query("books")
  .withIndex("by_author", (q) => q.eq("author", "Isaac Asimov"))
  .filter((q) => q.eq(q.field("title"), "Foundation"))
  .unique();

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation and function implementation.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Connecting Convex Mutation to React Frontend
DESCRIPTION: Updates to the React component to import Convex hooks and use the sendMessage mutation in the form submission handler.

LANGUAGE: tsx
CODE:
import { useMutation } from "convex/react";
import { api } from "../convex/_generated/api";

export default function App() {
  const sendMessage = useMutation(api.chat.sendMessage);

  return (
    <main className="chat">
      {/* ... */}
      <form
        onSubmit={async (e) => {
          e.preventDefault();
          await sendMessage({ user: NAME, body: newMessageText });
          setNewMessageText("");
        }}
      >
        {/* ... */}
      </form>
    </main>
  );
}

----------------------------------------

TITLE: Defining Convex Query Function in JavaScript
DESCRIPTION: Creates a query function in JavaScript to fetch tasks from the Convex database.

LANGUAGE: javascript
CODE:
import { query } from "./_generated/server";

export const get = query(async ({ db }) => {
  return await db.query("tasks").collect();
});

----------------------------------------

TITLE: Managing Convex Environment Variables
DESCRIPTION: Commands to list, get, set, and remove environment variables for a Convex deployment.

LANGUAGE: sh
CODE:
npx convex env list
npx convex env get <name>
npx convex env set <name> <value>
npx convex env remove <name>

----------------------------------------

TITLE: Exporting Convex Data Using CLI
DESCRIPTION: Command line instruction for exporting Convex data to a local directory using the Convex CLI tool. The command saves the exported data to the specified path in the Downloads folder.

LANGUAGE: sh
CODE:
npx convex export --path ~/Downloads

----------------------------------------

TITLE: Defining a Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex. It includes argument validation, database insertion, and optional return value. This function demonstrates how to modify the database.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Convex Query in Next.js Page Component (JavaScript)
DESCRIPTION: JavaScript code demonstrating how to use the Convex useQuery hook to fetch and display data in a Next.js page component.

LANGUAGE: javascript
CODE:
"use client";

import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export default function Home() {
  const tasks = useQuery(api.tasks.get);
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 w-full max-w-5xl items-center justify-between font-mono text-sm">
        {tasks?.map(({ _id, text }) => (
          <div key={_id}>{text}</div>
        ))}
      </div>
    </main>
  );
}

----------------------------------------

TITLE: Setting Up Convex Dev Deployment
DESCRIPTION: Command to initiate Convex development deployment, which sets up the project and syncs functions with the cloud.

LANGUAGE: shell
CODE:
npx convex dev

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates creating a mutation function that accepts string arguments and modifies the database. Includes example of inserting data and returning the modified record.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Initializing ConvexClient in Swift
DESCRIPTION: Creates an instance of ConvexClient with a deployment URL to establish a connection to the Convex backend.

LANGUAGE: swift
CODE:
import ConvexMobile

let convex = ConvexClient(deploymentUrl: "https://<your domain here>.convex.cloud")

----------------------------------------

TITLE: Implementing getMessages Query in Convex
DESCRIPTION: TypeScript function for retrieving the most recent messages from the Convex database, ordered chronologically.

LANGUAGE: typescript
CODE:
import { query, mutation } from "./_generated/server";

export const getMessages = query({
  args: {},
  handler: async (ctx) => {
    const messages = await ctx.db.query("messages").order("desc").take(50);
    return messages.reverse();
  },
});

----------------------------------------

TITLE: Using Convex Mutation in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Sample Data Seeding Commands
DESCRIPTION: Commands for seeding development deployments with sample data from backup or single table files

LANGUAGE: sh
CODE:
# full backup - exported from prod or another dev deployment.
npx convex import seed_data.zip

# Import single table from jsonl/csv
npx convex import --table <table name> data.jsonl

----------------------------------------

TITLE: Defining a Compound Index in Convex Schema
DESCRIPTION: Demonstrates how to create a compound index on both 'author' and 'title' fields for more efficient querying.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  books: defineTable({
    author: v.string(),
    title: v.string(),
    text: v.string(),
  }).index("by_author_title", ["author", "title"]),
});

----------------------------------------

TITLE: Logging Out of Convex CLI
DESCRIPTION: Command to remove existing Convex credentials from the device, allowing use of a different Convex account.

LANGUAGE: sh
CODE:
npx convex logout

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that handles data modifications. Shows how to validate arguments, insert data into the database, and return the modified data.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Updating Convex Generated Code
DESCRIPTION: Command to update the generated code in the convex/_generated directory without pushing changes.

LANGUAGE: sh
CODE:
npx convex codegen

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Convex Int64 Type
DESCRIPTION: Example of using BigInt in Convex with 64-bit integer limitation

LANGUAGE: typescript
CODE:
3n

----------------------------------------

TITLE: Using a Convex Mutation Function in a React Component
DESCRIPTION: This snippet illustrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Creating a Next.js App with TypeScript
DESCRIPTION: Command to create a new Next.js application using the default TypeScript template.

LANGUAGE: shell
CODE:
npx create-next-app@latest my-app

----------------------------------------

TITLE: Using Convex Array Type
DESCRIPTION: Example of array usage in Convex with mixed types

LANGUAGE: typescript
CODE:
[1, 3.2, "abc"]

----------------------------------------

TITLE: Querying Using an Index in Convex
DESCRIPTION: Demonstrates how to use the 'by_author' index to efficiently query books by a specific author.

LANGUAGE: typescript
CODE:
const austenBooks = await ctx.db
  .query("books")
  .withIndex("by_author", (q) => q.eq("author", "Jane Austen"))
  .collect();

----------------------------------------

TITLE: Proposed Source Phase Import for WebAssembly Modules in JavaScript
DESCRIPTION: Illustrates a new proposal for importing WebAssembly modules using the 'source' keyword, which explicitly imports the module object and provides type checking.

LANGUAGE: javascript
CODE:
import source FooModule from "./foo.wasm";
FooModule instanceof WebAssembly.Module; // true

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates how to create a mutation function that modifies the database. Shows argument validation and database operations using Convex's mutation helper.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Deploying to Convex Preview Deployment
DESCRIPTION: Commands for deploying to a Convex preview deployment, including options for creating named deployments and running post-deploy functions.

LANGUAGE: sh
CODE:
npx convex deploy

LANGUAGE: sh
CODE:
npx convex deploy --preview-create my-branch-name

LANGUAGE: sh
CODE:
npx convex deploy --cmd "npm run build"

LANGUAGE: sh
CODE:
npx convex deploy --cmd 'npm run build' --cmd-url-env-var-name CUSTOM_CONVEX_URL

LANGUAGE: sh
CODE:
npx convex deploy --preview-run myFunction

----------------------------------------

TITLE: Running Convex Functions
DESCRIPTION: Command to run a public or internal Convex query, mutation, or action on the development deployment. Arguments are specified as a JSON object.

LANGUAGE: sh
CODE:
npx convex run <functionName> [args]

LANGUAGE: sh
CODE:
npx convex run messages:send '{"body": "hello", "author": "me"}'

----------------------------------------

TITLE: Rendering Pro Plan Info Admonition in React JSX
DESCRIPTION: A component that displays an informational admonition about features requiring a Convex Pro plan. Takes feature and verb props to customize the message and includes links to pricing and billing pages.

LANGUAGE: jsx
CODE:
<Admonition
  type="info"
  title={`${props.feature} ${props.verb} a Convex Pro plan.`}
>
  {props.feature} {props.verb} a Convex Pro plan. [Learn
  more](https://convex.dev/pricing) about our plans or
  [upgrade](https://dashboard.convex.dev/team/settings/billing).
</Admonition>

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function that modifies database data. The function accepts string arguments and demonstrates database insertion operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function shows database querying with proper type validation and argument handling.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function shows database querying patterns and argument validation using Convex's type system.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Handling Mutation Errors with Try-Catch
DESCRIPTION: Alternative approach to handling Convex mutation errors using async/await with try-catch blocks.

LANGUAGE: javascript
CODE:
try {
  await sendMessage(newMessageText);
} catch (error) {
  // Do something with `error` here
}

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to use the Convex query function within a React component using the useQuery hook with specified arguments.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Displaying Convex Table Data
DESCRIPTION: Commands to list tables and display data from specific tables in the command line.

LANGUAGE: sh
CODE:
npx convex data  # lists tables
npx convex data <table>

----------------------------------------

TITLE: Implementing Query Function in Convex with TypeScript
DESCRIPTION: Example of a Convex query function that takes numeric and string arguments. Shows how to define argument validators and implement a database query handler that returns documents.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Configuring GitHub Actions Test Workflow in YAML
DESCRIPTION: GitHub Actions workflow configuration that runs npm tests automatically on pull requests and push events. The workflow uses Ubuntu as the runner, sets up Node.js, installs dependencies, and executes the test suite.

LANGUAGE: yaml
CODE:
name: Run Tests

on: [pull_request, push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: npm ci
      - run: npm run test

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: React component code demonstrating how to use the Convex useQuery hook to fetch and display tasks.

LANGUAGE: jsx
CODE:
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export default function App() {
  const tasks = useQuery(api.tasks.get);
  return (
    <ul>
      {tasks?.map(({ _id, text }) => (
        <li key={_id}>{text}</li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Serializing IDs in Convex Client
DESCRIPTION: Demonstrates how to pass an ID string from an external source into a Convex function and cast it to the 'Id' type in TypeScript.

LANGUAGE: tsx
CODE:
import { Id } from "../convex/_generated/dataModel";
import { api } from "../convex/_generated/api";

const taskId = useParams().taskId as Id<"tasks">;
const task = useQuery(api.tasks.get, { taskId });

----------------------------------------

TITLE: Using Mutation Function in React Component
DESCRIPTION: Shows how to use the previously defined mutation function in a React component using the useMutation hook. Demonstrates both fire-and-forget and promise-based usage.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Configuring External Packages in Convex
DESCRIPTION: JSON configuration in convex.json to mark all dependencies as external packages for Node.js actions in Convex.

LANGUAGE: json
CODE:
{
  "node": {
    "externalPackages": ["*"]
  }
}

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Installing Convex Package
DESCRIPTION: Command to install the Convex package in the React application directory.

LANGUAGE: sh
CODE:
cd my-app && npm install convex

----------------------------------------

TITLE: Advanced Filtering with JavaScript Array Methods in Convex Query (TypeScript)
DESCRIPTION: This example shows how to perform advanced filtering by first collecting all posts and then using JavaScript array methods to filter posts with a specific tag.

LANGUAGE: typescript
CODE:
export const postsWithTag = query({
  args: { tag: v.string() },
  handler: async (ctx, args) => {
    const allPosts = await ctx.db.query("posts").collect();
    return allPosts.filter((post) => post.tags.includes(args.tag));
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that takes string arguments and demonstrates database writing operations. Shows how to insert data and return the modified result.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Convex Mutation Function in React Component
DESCRIPTION: This snippet illustrates how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to consume a Convex query function within a React component using the useQuery hook with typed arguments.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Retrieving a Document by ID in Convex
DESCRIPTION: Shows how to efficiently read a single document using the 'get' method with a document ID.

LANGUAGE: typescript
CODE:
const retrievedUser = await ctx.db.get(userId);

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing CategoryIcon Component in React
DESCRIPTION: A React component that renders different SVG icons based on category title props. Supports Performance, Architecture, and Development workflow categories.

LANGUAGE: jsx
CODE:
export function CategoryIcon(props) {
  switch (props.title) {
    case "Performance":
      return (
        <svg
          fill="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
          aria-hidden="true"
          {...props}
        >
          <path
            clipRule="evenodd"
            fillRule="evenodd"
            d="M14.615 1.595a.75.75 0 01.359.852L12.982 9.75h7.268a.75.75 0 01.548 1.262l-10.5 11.25a.75.75 0 01-1.272-.71l1.992-7.302H3.75a.75.75 0 01-.548-1.262l10.5-11.25a.75.75 0 01.913-.143z"
          />
        </svg>
      );
    // Additional cases omitted for brevity
    default:
      return null;
  }

----------------------------------------

TITLE: Implementing Convex Query Function in TypeScript
DESCRIPTION: Demonstrates how to create a query function in Convex that accepts numeric and string arguments. The function includes argument validation and shows how to query the database and process results.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Fetching and Displaying Convex Data in React Native
DESCRIPTION: Uses the Convex useQuery hook to fetch tasks and display them in the React Native app.

LANGUAGE: tsx
CODE:
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export default function Index() {
  const tasks = useQuery(api.tasks.get);
  return (
    <View style={styles.container}>
      <Text>{JSON.stringify(tasks)}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Creating a New Convex Component
DESCRIPTION: Command to create a new Convex component using the provided npx script.

LANGUAGE: bash
CODE:
npx component create somewhere/myComponent

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Query Function in Convex with TypeScript
DESCRIPTION: This snippet demonstrates how to create a query function in Convex using TypeScript. It includes argument validation, database querying, and data processing.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Updating User Presence in React JSX
DESCRIPTION: React select component implementation that updates the user's emoji presence. The onChange handler merges new emoji value with existing presence data.

LANGUAGE: jsx
CODE:
<select
    defaultValue={myPresence.emoji}
    onChange={e => updateMyPresence({ emoji: e.target.value })}
>

----------------------------------------

TITLE: Using a Mutation Function in a React Component (TypeScript)
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Implementing a Mutation Function in Convex
DESCRIPTION: This snippet demonstrates how to create a mutation function in Convex. It shows the structure of a mutation function, including argument validation and database modification.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Starting Convex MCP Server with NPX
DESCRIPTION: Command to start the Convex MCP server using NPX. This should be added to the MCP server's configuration.

LANGUAGE: bash
CODE:
npx -y convex@latest mcp start

----------------------------------------

TITLE: Using Convex Query in React
DESCRIPTION: Shows how to integrate a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Configuring Convex Provider in React Native Layout
DESCRIPTION: Sets up the Convex provider in the main layout file of the React Native app.

LANGUAGE: tsx
CODE:
import { ConvexProvider, ConvexReactClient } from "convex/react";
import { CONVEX_URL } from "@env";

const convex = new ConvexReactClient(CONVEX_URL);

export default function RootLayout() {
  return (
    <ConvexProvider client={convex}>
      <Stack />
    </ConvexProvider>
  );
}

----------------------------------------

TITLE: Inserting a Document with Convex
DESCRIPTION: Demonstrates how to insert a new document into the 'users' table and obtain its unique ID.

LANGUAGE: typescript
CODE:
const userId = await ctx.db.insert("users", { name: "Michael Jordan" });

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Defining Custom Data Types in Swift for Convex Integration
DESCRIPTION: This snippet demonstrates how to create a Swift struct that conforms to Decodable for handling custom data types returned from Convex queries. It includes property wrappers for handling BigInt conversions.

LANGUAGE: swift
CODE:
struct BaseballTeam: Decodable {
  let name: String
  let uniformColors: [String]
  @ConvexInt
  var wins: Int
  @ConvexInt
  var losses: Int
}

----------------------------------------

TITLE: Implementing a Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function in Convex with argument validation and database reading. The function takes two arguments (a number and a string) and returns documents from a database table.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Importing Sample Data to Convex Database
DESCRIPTION: Command to import sample data into the Convex database 'tasks' table.

LANGUAGE: sh
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Importing Sample Data to Convex Database
DESCRIPTION: Imports sample data from a JSONL file into the Convex database 'tasks' table.

LANGUAGE: sh
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure including argument validation, database querying, and result processing.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Importing WebAssembly Module as ESM in JavaScript
DESCRIPTION: Demonstrates the proposed ESM integration of WebAssembly modules, where the module is automatically instantiated and linked upon import. This approach simplifies usage but is still experimental in most environments.

LANGUAGE: javascript
CODE:
import * as foo from "./foo.wasm";
foo.bar();

----------------------------------------

TITLE: Advanced Type Conversion with Custom Properties in Swift
DESCRIPTION: This example shows how to handle more complex type conversions, such as converting JavaScript number types to Swift Int while maintaining Decodable conformance. It uses private properties and computed properties for type conversion.

LANGUAGE: swift
CODE:
struct BaseballTeam: Decodable {
  let name: String
  let uniformColors: [String]
  @ConvexFloat
  private var internalWins: Double
  @ConvexFloat
  private var internalLosses: Double

  enum CodingKeys: String, CodingKey {
    case name
    case uniformColors
    case internalWins = "wins"
    case internalLosses = "losses"
  }

  // Expose the Double values as Ints
  var wins: Int { Int(internalWins) }
  var losses: Int { Int(internalLosses) }
}

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Setting Up Convex Dev Deployment
DESCRIPTION: Initializes a Convex development deployment, creating necessary folders and syncing functions with the cloud.

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Importing Data to Convex
DESCRIPTION: Commands to import data from a file into a Convex table or from a zip file.

LANGUAGE: sh
CODE:
npx convex import --table <tableName> <path>
npx convex import <path>.zip

----------------------------------------

TITLE: Creating React App with Vite
DESCRIPTION: Commands to create a new React application using Vite, with options for JavaScript and TypeScript templates.

LANGUAGE: sh
CODE:
npm create vite@latest my-app -- --template react-ts

LANGUAGE: sh
CODE:
npm create vite@latest my-app -- --template react

----------------------------------------

TITLE: Installing Convex Package
DESCRIPTION: Installs the Convex client library in the React Native project.

LANGUAGE: sh
CODE:
cd my-app && npm install convex

----------------------------------------

TITLE: Using Convex Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with proper argument passing.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Defining a Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex with argument validation and database reading. This function takes two arguments (a number and a string) and retrieves documents from a specified table.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a query function implementation that accepts numeric and string arguments, demonstrating database querying and argument validation using Convex's query API. The function shows how to read from the database and process arguments passed from the client.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates how to create a mutation function that writes data to the database. Includes argument validation and database insertion operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Defining Convex Query Function in TypeScript
DESCRIPTION: Creates a TypeScript file with a Convex query function to fetch tasks from the database.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";

export const get = query(async ({ db }) => {
  return await db.query("tasks").collect();
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a mutation function that accepts two string arguments. Shows how to define validators and implement a database mutation handler that inserts data.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Importing Sample Data to Convex Database
DESCRIPTION: Adds sample data from a JSONL file to the 'tasks' table in the Convex database.

LANGUAGE: sh
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Field Name Conversion using CodingKeys in Swift
DESCRIPTION: This snippet illustrates how to use CodingKeys enum to map field names from the backend to different property names in Swift, useful for handling reserved keywords or preferred naming conventions.

LANGUAGE: swift
CODE:
struct Log: Decodable {
  let name: String
  let inTime: String
  let outTime: String

  enum CodingKeys: String, CodingKey {
    case name
    case inTime = "in"
    case outTime = "out"
  }
}

----------------------------------------

TITLE: Internal Function Usage
DESCRIPTION: Shows how to properly structure internal functions that are only called within Convex, improving security by preventing external access.

LANGUAGE: typescript
CODE:
export const internalUpdateUser = internalMutation(
  async (ctx: MutationCtx, { userId, update }) => {
    const existing = await ctx.db.get(userId);
    if (!existing) throw new Error("User not found");
    return await ctx.db.patch(userId, update);
  }
);

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to consume a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Setting Up Convex Development Deployment
DESCRIPTION: Initializes a Convex development deployment and creates necessary project structure.

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Creating Python Script to Fetch Data from Convex
DESCRIPTION: Implements a Python script that uses ConvexClient to fetch tasks from the Convex API and print them.

LANGUAGE: python
CODE:
import os
from dotenv import load_dotenv
from convex import ConvexClient

load_dotenv()

CONVEX_URL = os.environ['CONVEX_URL']

convex = ConvexClient(CONVEX_URL)

tasks = convex.query("tasks:get")
print(tasks)

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Creates a folder for the Python script with a virtual environment.

LANGUAGE: sh
CODE:
python3 -m venv my-app/venv

----------------------------------------

TITLE: Using Query Function in React Component
DESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook. Shows proper argument passing to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Starting Svelte Development Server in Bash
DESCRIPTION: Commands to start the Svelte development server after installing dependencies. Includes an option to open the app in a new browser tab.

LANGUAGE: bash
CODE:
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open

----------------------------------------

TITLE: Using File-level Serializers for Convex Numerical Types in Kotlin
DESCRIPTION: Illustrates how to use file-level serializers to handle Convex numerical types in Kotlin. This approach allows using plain Kotlin types without individual annotations.

LANGUAGE: kotlin
CODE:
@file:UseSerializers(
    Int64ToIntDecoder::class,
    Int64ToLongDecoder::class,
    Float64ToFloatDecoder::class,
    Float64ToDoubleDecoder::class
)

package com.example.convexapp

import kotlinx.serialization.UseSerializers

// @Serializable classes and things.

----------------------------------------

TITLE: Running Convex Backend Locally with Just Command
DESCRIPTION: Command to run the Convex backend locally using the 'just' command runner.

LANGUAGE: bash
CODE:
just run-backend

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: SwiftUI View Implementation
DESCRIPTION: Complete SwiftUI view implementation with real-time data subscription.

LANGUAGE: swift
CODE:
struct ContentView: View {
  @State private var todos: [Todo] = []

  var body: some View {
    List {
      ForEach(todos, id: \._id) { todo in
        Text(todo.text)
      }
    }.task {
      for await todos: [Todo] in convex.subscribe(to: "tasks:get")
        .replaceError(with: []).values
      {
        self.todos = todos
      }
    }.padding()
  }
}

----------------------------------------

TITLE: Implementing Query Function in Convex with TypeScript
DESCRIPTION: Example of a query function that takes numeric and string arguments, demonstrating argument validation and database querying. Shows how to read from the database and process the results.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Importing Sample Data to Convex
DESCRIPTION: Import sample data into the Convex tasks table using the import command

LANGUAGE: sh
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that takes numeric and string arguments. Shows how to define argument validators and implement a handler that queries the database.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component, demonstrating both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a mutation function that writes data to the database. Shows how to validate arguments and perform database insertions with return values.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Convex Query Function in React Component (TypeScript)
DESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Running the Rust Application - Shell Command
DESCRIPTION: Command to compile and run the Rust application using Cargo

LANGUAGE: sh
CODE:
cargo run

----------------------------------------

TITLE: Executing Convex Mutation with Arguments
DESCRIPTION: Perform a Convex mutation with arguments and handle the returned value, demonstrating error handling.

LANGUAGE: kotlin
CODE:
val recordsDeleted = convex.mutation<@ConvexNum Int>(
  "messages:cleanup",
  args = mapOf("keepLatest" to 100)
)

----------------------------------------

TITLE: Installing Convex Helpers Package for OpenAPI Spec Generation
DESCRIPTION: Command to install the convex-helpers npm package, which contains a CLI command for generating OpenAPI specifications.

LANGUAGE: sh
CODE:
npm install convex-helpers

----------------------------------------

TITLE: Creating New NPM Project
DESCRIPTION: Initialize a new npm project directory for Convex integration

LANGUAGE: sh
CODE:
mkdir my-project && cd my-project && npm init -y

----------------------------------------

TITLE: Implementing sendMessage Mutation in Convex
DESCRIPTION: TypeScript function for sending a message, which inserts a new document into the 'messages' table in the Convex database.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const sendMessage = mutation({
  args: {
    user: v.string(),
    body: v.string(),
  },
  handler: async (ctx, args) => {
    console.log("This TypeScript function is running on the server.");
    await ctx.db.insert("messages", {
      user: args.user,
      body: args.body,
    });
  },
});

----------------------------------------

TITLE: Starting the Next.js Development Server
DESCRIPTION: Command to start the Next.js development server and run the application locally.

LANGUAGE: shell
CODE:
npm run dev

----------------------------------------

TITLE: Implementing Convex Query Function in TypeScript
DESCRIPTION: TypeScript code to define a Convex query function that retrieves all tasks from the database.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";

export const get = query(async ({ db }) => {
  return await db.query("tasks").collect();
});

----------------------------------------

TITLE: Starting Convex Development Server
DESCRIPTION: Command to start the Convex development server, which watches for changes and updates the development deployment.

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Initializing Convex Client in Swift
DESCRIPTION: Swift code to initialize the Convex client with deployment URL.

LANGUAGE: swift
CODE:
import SwiftUI
import ConvexMobile

let convex = ConvexClient(deploymentUrl: "YOUR_CONVEX_URL")

struct ContentView: View {
...

----------------------------------------

TITLE: Initializing Convex HTTP Client with CommonJS
DESCRIPTION: Example of setting up a Convex HTTP client using CommonJS require syntax. This approach is for Node.js environments that don't support ES Modules.

LANGUAGE: javascript
CODE:
const { ConvexHttpClient, ConvexClient } = require("convex/browser");
const { api } = require("./convex/_generated/api_cjs.cjs");
const httpClient = new ConvexHttpClient(CONVEX_URL_GOES_HERE);

----------------------------------------

TITLE: Implementing a Mutation Function in Convex
DESCRIPTION: Illustrates how to create a mutation function in Convex for inserting or modifying data in the database. It includes argument validation and demonstrates database operations within the function.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Authentication State Check
DESCRIPTION: React component using useConvexAuth hook to check and display authentication status.

LANGUAGE: tsx
CODE:
import { useConvexAuth } from "convex/react";

function App() {
  const { isLoading, isAuthenticated } = useConvexAuth();

  return (
    <div className="App">
      {isAuthenticated ? "Logged in" : "Logged out or still loading"}
    </div>
  );
}

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return value. The function takes two string arguments and inserts a message into the database.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Running Convex Dev Against Local Backend
DESCRIPTION: Command to run 'convex dev' against the local backend, with a note to build the project if necessary using 'just rush build'.

LANGUAGE: bash
CODE:
just convex dev

----------------------------------------

TITLE: Connecting Convex Query to React Frontend
DESCRIPTION: Updates to the React component to use the getMessages query for real-time updates of the chat messages.

LANGUAGE: tsx
CODE:
import { useQuery, useMutation } from "convex/react";

export default function App() {
  const messages = useQuery(api.chat.getMessages);

  // ...
}

----------------------------------------

TITLE: Implementing React Component with Convex Query
DESCRIPTION: React component using Convex useQuery hook to fetch and display tasks

LANGUAGE: js
CODE:
import { useQuery } from "convex/react";
import { api } from "./convex/_generated/api";

function App() {
  const tasks = useQuery(api.tasks.get);
  return (
    <div className="App">
      {JSON.stringify(tasks, null, 2)}
    </div>
  );
}

----------------------------------------

TITLE: Implementing Async Triggers in Convex
DESCRIPTION: Demonstrates how to implement asynchronous triggers using the Convex scheduler. This allows for delayed execution of trigger functions.

LANGUAGE: typescript
CODE:
ctx.scheduler.runAfter(0, ...);

----------------------------------------

TITLE: Filtering Books by Author in Convex
DESCRIPTION: Demonstrates a full table scan query to filter books by author, which can be inefficient for large datasets.

LANGUAGE: typescript
CODE:
const books = await ctx.db
  .query("books")
  .filter((q) => q.eq(q.field("author"), "Jane Austen"))
  .collect();

----------------------------------------

TITLE: Todo Data Model in Swift
DESCRIPTION: Swift struct definition for the Todo model matching the database schema.

LANGUAGE: swift
CODE:
struct Todo: Decodable {
  let _id: String
  let text: String
  let isCompleted: Bool
}

----------------------------------------

TITLE: Various Approaches to Wrapping Convex Functions in TypeScript
DESCRIPTION: This snippet illustrates different methods of wrapping Convex functions, including modifying the implementation, wrapping the mutation, and wrapping the wrapper itself.

LANGUAGE: typescript
CODE:
wrapTheImpl = mutation(modifyTheFunction((ctx, { a: number }) => {}));
wrapTheImpl2 = mutation({
  args: { a: v.number() },
  handler: modifyTheFunction((ctx, { a: number }) => {})
}
wrapTheMutation = modifyTheMutation(mutation((ctx, { a: number }) => {}));
wrapTheMutation2 = modifyTheMutation(mutation({
  args: { a: v.number() },
  handler: (ctx, { a: number }) => {}
}
wrapTheWrapper = modifyTheMutation(mutation)((ctx, { a: number }) => {});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function that modifies the database. Includes argument validation and demonstrates database insertion with return value handling.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to integrate a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Convex Mutation in React
DESCRIPTION: Example showing how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Convex Query in React
DESCRIPTION: Shows how to consume a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using a Query Function in React with Convex
DESCRIPTION: This snippet shows how to use a Convex query function in a React component. It demonstrates passing arguments to the query function using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Demonstrates how to use the Convex mutation function in a React component, showing both fire-and-forget and promise-based result handling approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Subscribing to Convex Query in Jetpack Compose
DESCRIPTION: Use ConvexClient to subscribe to a query and update UI state in a Jetpack Compose @Composable function.

LANGUAGE: kotlin
CODE:
var workouts: List<String> by remember { mutableStateOf(listOf()) }
LaunchedEffect("onLaunch") {
    client.subscribe<List<String>>("workouts:get").collect { result ->
        result.onSuccess { receivedWorkouts ->
            workouts = receivedWorkouts
        }
    }
}

----------------------------------------

TITLE: Setting Up Convex Development Environment - Shell Command
DESCRIPTION: Command to initialize Convex development environment and create necessary project structure

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Performing Mutations with Convex and TanStack Query in React
DESCRIPTION: Demonstrates how to use Convex mutations with TanStack Query's useMutation hook. This example shows how to set up a mutation function and trigger it on a button click.

LANGUAGE: typescript
CODE:
import { useMutation } from "@tanstack/react-query";
import { useConvexMutation } from "@convex-dev/react-query";
import { api } from "../convex/_generated/api";

export function App() {
  const { mutate, isPending } = useMutation({
    mutationFn: useConvexMutation(api.functions.doSomething),
  });
  return <button onClick={() => mutate({a: "Hello"})}>Click me</button>;
}

----------------------------------------

TITLE: Using Convex Query in React
DESCRIPTION: Shows how to consume a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Installing and Running Convex Argument Validation Example App
DESCRIPTION: These commands install the necessary dependencies and start the development server for the Convex argument validation example app.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Generating and Testing Convex Project Deployment
DESCRIPTION: Command that generates a test project with specified number of files and sizes, shows disk usage, and performs a one-time Convex deployment. Uses Python script for project generation combined with shell commands for size checking and deployment.

LANGUAGE: bash
CODE:
python generate-project.py --node-files 10 --v8-files 10 --file-size 10000; du -sh convex; time npx convex dev --once

----------------------------------------

TITLE: Setting Up and Running the Vector Import Script
DESCRIPTION: These commands set up the project environment and run the import script. They install dependencies, update the project, start the Convex development server, and execute the Python script to import the vectors.

LANGUAGE: bash
CODE:
poetry install
just rush update
npx convex dev --once
poetry run python main.py <path_to_jsonl>

----------------------------------------

TITLE: Importing Sample Data to Convex
DESCRIPTION: Command to import sample data into the Convex tasks table from a JSONL file.

LANGUAGE: shell
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation and database operations.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using a Convex Query Function in a React Component
DESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Mutation Function in React Component
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based approaches to handling mutations.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook. It passes arguments to the function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Convex Queries with TanStack Query in React
DESCRIPTION: Illustrates how to use Convex queries with TanStack Query's useQuery hook. This example shows how to subscribe to a Convex query function, handle loading states, and render the data.

LANGUAGE: typescript
CODE:
import { useQuery } from "@tanstack/react-query";
import { convexQuery } from "@convex-dev/react-query";
import { api } from "../convex/_generated/api";

export function App() {
  const { data, isPending, error } = useQuery(
    convexQuery(api.functions.myQuery, { id: 123 }),
  );
  return isPending ? "Loading..." : data;
}

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: Illustrates the creation of a mutation function in Convex. It includes argument validation, function implementation with database insertion, and optional return value.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Accessing Document ID in Convex
DESCRIPTION: Illustrates how to access the ID of a retrieved document using the '_id' field.

LANGUAGE: typescript
CODE:
const userId = retrievedUser._id;

----------------------------------------

TITLE: Creating Vue Application
DESCRIPTION: Command to create a new Vue.js application with TypeScript support using npm.

LANGUAGE: bash
CODE:
npm create vue@latest my-vue-app

----------------------------------------

TITLE: Configuring Gradle for Convex Android Integration
DESCRIPTION: Add necessary plugins and dependencies to the app's build.gradle file for Convex Android integration and Kotlin serialization.

LANGUAGE: kotlin
CODE:
plugins {
    // ... existing plugins
    kotlin("plugin.serialization") version "1.9.0"
}

dependencies {
    // ... existing dependencies
    implementation("dev.convex:android-convexmobile:0.4.1@aar") {
        isTransitive = true
    }
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3")
}

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use the previously defined Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that takes numeric and string arguments, demonstrates database querying, and includes argument validation. Shows how to read from the database and process results.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Convex Mutation Function in React Component (TypeScript)
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Installing Convex and React Query Packages
DESCRIPTION: Command to install the necessary packages for Convex and React Query integration.

LANGUAGE: bash
CODE:
npm install convex @convex-dev/react-query @tanstack/react-router-with-query @tanstack/react-query

----------------------------------------

TITLE: Implementing TanStack Start Loader with Convex Query
DESCRIPTION: Shows how to create a TanStack Start loader that prefetches Convex query data. This loader ensures data is available before navigation, improving client-side navigation performance. It also demonstrates how to use the fetched data in a component.

LANGUAGE: typescript
CODE:
export const Route = createFileRoute('/posts')({
  loader: async (opts) => {
    await opts.context.queryClient.ensureQueryData(
      convexQuery(api.messages.list, {}),
    );
  };
  component: () => {
    const { data } = useSuspenseQuery(convexQuery(api.messages.list, {}));
    return (
      <div>
	{data.map((message) => (
	  <Message key={message.id} post={message} />
	))}
      </div>
    );
  },
})

----------------------------------------

TITLE: Handling JavaScript Number Types as Integers in Kotlin
DESCRIPTION: Demonstrates a pattern for handling JavaScript number types that conventionally contain integer values in Kotlin. It uses private fields for storing the raw Double values and exposes them as Ints through getters.

LANGUAGE: kotlin
CODE:
@Serializable
data class BaseballTeam(
    val name: String,
    val uniformColors: List<String>,
    @SerialName("wins") private val internalWins: Double,
    @SerialName("losses") private val internalLosses: Double) {

    // Expose the JavaScript number values as Ints.
    val wins get() = internalWins.toInt()
    val losses get() = internalLosses.toInt()
}

----------------------------------------

TITLE: Time Update Logic in FacePile Component
DESCRIPTION: Implementation of time-based updates using React hooks to refresh the component state periodically for accurate presence timing.

LANGUAGE: javascript
CODE:
const [now, setNow] = useState(Date.now());
useEffect(() => {
  const intervalId = setInterval(() => setNow(Date.now()), UPDATE_MS);
  return () => clearInterval(intervalId);
}, [setNow]);

----------------------------------------

TITLE: Installing Dependencies and Starting Development Server for Convex Vector Search App
DESCRIPTION: This code snippet shows the commands to install the necessary dependencies and start the development server for the Convex vector search example application.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Using Suspense Query with Convex in TanStack Start
DESCRIPTION: Demonstrates how to use useSuspenseQuery() to fetch and render Convex query data with TanStack Start. This approach enables easy live-updating of queries on the client while also supporting server-side rendering.

LANGUAGE: typescript
CODE:
const { data } = useSuspenseQuery(convexQuery(api.messages.list, {}));

----------------------------------------

TITLE: Creating TanStack Start Project Structure
DESCRIPTION: Shows the directory structure of a minimal TanStack Start app after initial setup.

LANGUAGE: bash
CODE:
.
├── app/
│   ├── routes/
│   │   ├── `index.tsx`
│   │   └── `__root.tsx`
│   ├── `client.tsx`
│   ├── `router.tsx`
│   ├── `routeTree.gen.ts`
│   └── `ssr.tsx`
├── `.gitignore`
├── `app.config.ts`
├── `package.json`
└── `tsconfig.json`

----------------------------------------

TITLE: Importing Convex Component Client in JavaScript
DESCRIPTION: Demonstrates how to import a Convex component client from the root package. This is typically used to wrap communication with the component in the Convex environment.

LANGUAGE: javascript
CODE:
import { MyComponentClient } from "my-convex-component";

----------------------------------------

TITLE: Console Log Event Example in JSON
DESCRIPTION: Example of a query log event using the console API, showing the structure of system fields and message payload.

LANGUAGE: json
CODE:
{
  "_topic": "_console",
  "_timestamp": 1695066350531,
  "_functionType": "query",
  "_functionPath": "myDir/myFile",
  "_functionCached": true,
  "message": "[LOG] 'My log message'"
}

----------------------------------------

TITLE: Useful Convex CLI Commands (Bash)
DESCRIPTION: A list of helpful Convex CLI commands for interacting with the backend, including data management, environment variables, logs, and import/export operations.

LANGUAGE: bash
CODE:
just convex data
just convex env
just convex logs
just convex import
just convex export

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Configuring TanStack Router with Convex and Clerk
DESCRIPTION: Router configuration that sets up the context for Convex authentication with Clerk tokens in TanStack Router. Includes type definitions and configuration for the router instance.

LANGUAGE: tsx
CODE:
import { createRouter } from "@tanstack/react-router";
import { rootRoute } from "./routes/__root";

type Context = {
  convexQueryClient: ConvexQueryClient;
};

export const routeTree = rootRoute.addChildren([]);

export const router = createRouter({
  routeTree,
  context: {
    convexQueryClient: undefined!,
  },
});

declare module "@tanstack/react-router" {
  interface Register {
    router: typeof router;
  }
}

----------------------------------------

TITLE: Using SerialName for Field Name Conversion in Kotlin
DESCRIPTION: Shows how to use @SerialName annotation to handle cases where backend field names don't conform to Kotlin naming conventions or clash with Kotlin keywords. The example demonstrates converting the Convex document ID field.

LANGUAGE: kotlin
CODE:
@Serializable
data class ConvexDocument(@SerialName("_id") val id: String)

----------------------------------------

TITLE: Implementing Convex Query Function
DESCRIPTION: Create a query function to fetch tasks data from the Convex database

LANGUAGE: js
CODE:
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation and database operations.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Defining Convex Query in TypeScript
DESCRIPTION: TypeScript code defining a Convex query to fetch all tasks from the database.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});

----------------------------------------

TITLE: Implementing Typed Convex Query Subscription in HTML and JavaScript
DESCRIPTION: This example demonstrates using Convex with TypeScript types in a separate JavaScript file for better autocompletion. It includes both the HTML structure and the JavaScript implementation.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
  <head>
    <script src="https://unpkg.com/convex@1.5.1/dist/convex.js"></script>
    <script src="script.js" type="module"></script>
  </head>
  <body></body>
</html>

LANGUAGE: javascript
CODE:
// @ts-check
/// <reference types="convex/browser" />

/**
 * @typedef {import("../convex/_generated/dataModel").DataModel} DataModel
 */

const { ConvexClient } = convex;

/** @type {ConvexClient<DataModel>} */
const client = new ConvexClient("CONVEX_URL_GOES_HERE");

async function main() {
  const messages = await client.query("listMessages");
  document.body.innerHTML = JSON.stringify(messages);
  client.onUpdate("listMessages", (messages) => {
    document.body.innerHTML = JSON.stringify(messages);
  });
}
main();

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, showing both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using a Query Function in React (TypeScript)
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing a Convex Mutation Function in TypeScript
DESCRIPTION: This snippet demonstrates how to create a mutation function in Convex using TypeScript. It includes argument validation and database insertion operations.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Streaming Export: Delta Sync Pseudocode
DESCRIPTION: Pseudocode showing how to use the document_deltas endpoint for delta synchronization. This code retrieves changes since the last sync point and updates the cursor for the next sync.

LANGUAGE: python
CODE:
def delta_sync(delta_cursor):
    delta_values = []
    while True:
        result = api.document_deltas(cursor)
        delta_values.extend(result.values)
        cursor = result.cursor
        if !hasMore:
            break
    return (delta_values, delta_cursor)

(snapshot_values, delta_cursor) = list_full_snapshot()
(delta_values, delta_cursor) = delta_sync(delta_cursor)
# Save delta_cursor for the next sync

----------------------------------------

TITLE: Starting Vue Development Server
DESCRIPTION: Command to start the Vue development server on port 5173.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Configuring Authentication with Clerk and Convex
DESCRIPTION: Example setup of authentication using Clerk with Convex and React Query providers.

LANGUAGE: tsx
CODE:
<ClerkProvider publishableKey="pk_test_...">
  <ConvexProviderWithClerk client={convex} useAuth={useAuth}>
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  </ConvexProviderWithClerk>
</ClerkProvider>

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates creating a mutation function for modifying database data. Shows argument validation, database insertion, and return value handling.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Configuring Convex for CommonJS in Node.js
DESCRIPTION: Shows the configuration needed in convex.json to generate a CommonJS-compatible API file for use with require() syntax in Node.js projects not using ES modules.

LANGUAGE: json
CODE:
{
  "generateCommonJSApi": true
}

----------------------------------------

TITLE: Implementing ViewModel with Convex Subscription in Swift
DESCRIPTION: Shows how to structure a Swift application using a ViewModel that subscribes to Convex data and provides it to a SwiftUI view.

LANGUAGE: swift
CODE:
import SwiftUI

class ViewModel: ObservableObject {
  @Published var colors: [String] = []

  init() {
    convex.subscribe(to: "colors:get")
      .replaceError(with: [])
      .receive(on: DispatchQueue.main)
      .assign(to: &$colors)
  }
}

struct ContentView: View {
  @StateObject var viewModel = ViewModel()

  var body: some View {
    List {
      ForEach(viewModel.colors, id: \.self) { color in
        Text(color)
      }
    }
  }
}

----------------------------------------

TITLE: Defining Custom Serializable Class in Kotlin for Convex Data
DESCRIPTION: Demonstrates how to create a custom @Serializable class in Kotlin to represent data returned from a Convex query function. The class includes fields for a baseball team's name, uniform colors, wins, and losses.

LANGUAGE: kotlin
CODE:
@Serializable
data class BaseballTeam(
    val name: String,
    val uniformColors: List<String>,
    val wins: @ConvexNum Int,
    val losses: @ConvexNum Int)

----------------------------------------

TITLE: Tailing Deployment Logs
DESCRIPTION: Commands to control how logs from the development deployment are displayed in the console.

LANGUAGE: sh
CODE:
# Show all logs continuously
npx convex dev --tail-logs always

# Pause logs during deploys to see sync issues (default)
npx convex dev

# Don't display logs while developing
npx convex dev --tail-logs disable

# Tail logs without deploying
npx convex logs

----------------------------------------

TITLE: Using Convex Query with React Query Hook
DESCRIPTION: Example of using useQuery hook with convexQuery options factory to fetch data reactively from Convex server.

LANGUAGE: typescript
CODE:
const { isPending, error, data } = useQuery({
  ...convexQuery(api.repos.get, { repo: "made/up" }),
  gcTime: 10000, // unsubscribe after 10s of no use
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function that accepts string arguments and performs database write operations. Includes argument validation and optional return value.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Subscribing to Convex Query with Custom Type in Swift
DESCRIPTION: This code shows how to subscribe to a Convex query using a custom Swift type for deserialization. It demonstrates passing the custom type as a yielding argument.

LANGUAGE: swift
CODE:
convex.subscribe(to: "mlb:first_place_team",
               with: ["division": "AL Central"],
           yielding: BaseballTeam.self)

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook. Includes both fire-and-forget and promise-based usage patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to use the Convex query function within a React component using the useQuery hook with specified arguments.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Setting Up Convex Dev Deployment
DESCRIPTION: Command to initialize Convex development deployment and create necessary project structure.

LANGUAGE: bash
CODE:
npx convex dev

----------------------------------------

TITLE: Checking Auth Token with Auth0 in React
DESCRIPTION: This code snippet demonstrates how to retrieve and log the authentication token when using Auth0 for authentication in a React application. It uses the useAuth0 hook from Auth0.

LANGUAGE: tsx
CODE:
import { useAuth0 } from "@auth0/auth0-react";

const { getAccessTokenSilently } = useAuth0();
const response = await getAccessTokenSilently({
  detailedResponse: true,
});
const token = response.id_token;
console.log(token);

----------------------------------------

TITLE: Handling Convex Errors in Swift
DESCRIPTION: Demonstrates error handling for Convex mutations, specifically catching and processing ConvexError.

LANGUAGE: swift
CODE:
do {
  try await convex.mutation("colors:put", with: ["color": newColor])
} catch ClientError.ConvexError(let data) {
  errorMessage = try! JSONDecoder().decode(String.self, from: Data(data.utf8))
  colorNotAdded = true
}

----------------------------------------

TITLE: Creating React App with Create-React-App
DESCRIPTION: Initialize a new React application using create-react-app CLI tool

LANGUAGE: sh
CODE:
npx create-react-app my-app

----------------------------------------

TITLE: Compiling Tailwind CSS for AI Chat Docs
DESCRIPTION: Command to continuously build the Tailwind-powered CSS entrypoint for the AI chat documentation.

LANGUAGE: bash
CODE:
npm run watch-css-docs

----------------------------------------

TITLE: Importing Sample Data - Shell Command
DESCRIPTION: Command to import sample data into the Convex tasks table from a JSONL file

LANGUAGE: sh
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Subscribing to Convex Query with Custom Type in Kotlin
DESCRIPTION: Shows how to use a custom type when subscribing to a Convex query. The example demonstrates passing a Team type to the subscribe function along with query arguments.

LANGUAGE: kotlin
CODE:
convex.subscribe<Team>("mlb:first_place_team", args = mapOf("division" to "AL Central"))

----------------------------------------

TITLE: Configuring Convex React Client with Deployment URL
DESCRIPTION: This snippet demonstrates how to create a Convex React client by passing the deployment URL. It uses an environment variable to determine the URL, making it flexible for different deployments.

LANGUAGE: jsx
CODE:
import { ConvexProvider, ConvexReactClient } from "convex/react";

const deploymentURL = import.meta.env.VITE_CONVEX_URL;

const convex = new ConvexReactClient(deploymentURL);

----------------------------------------

TITLE: Defining a Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure including argument validation, database querying, and result processing.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts a document into the database, and returns the inserted document.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: Illustrates the structure of a mutation function in Convex, including argument validation and database modification. It also shows how to return a value from the mutation.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Creating a Next.js App with JavaScript
DESCRIPTION: Command to create a new Next.js application using JavaScript instead of TypeScript.

LANGUAGE: shell
CODE:
npx create-next-app@latest my-app --js

----------------------------------------

TITLE: Installing Convex Dependencies
DESCRIPTION: Commands to install required Convex packages for Svelte integration.

LANGUAGE: shell
CODE:
cd my-app && npm install convex convex-svelte

----------------------------------------

TITLE: Implementing a Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments and retrieves data from the database. It includes argument validation and shows how to access the database context.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Installing Dependencies - Shell Commands
DESCRIPTION: Commands to install required NPM and Cargo dependencies including Convex client, Tokio runtime, and dotenvy

LANGUAGE: sh
CODE:
npm init -y && npm install convex && cargo add convex tokio dotenvy

----------------------------------------

TITLE: Rate Limiter Usage Example
DESCRIPTION: Example showing how to use the Rate Limiter component with error handling in a mutation

LANGUAGE: typescript
CODE:
// Automatically throw an error if the rate limit is hit.
await rateLimiter.limit(ctx, "failedLogins", { key: userId, throws: true });

----------------------------------------

TITLE: Querying File Metadata from System Table
DESCRIPTION: Example showing how to access file metadata using db.system.get and db.system.query from queries and mutations. This demonstrates accessing metadata through the _storage system table.

LANGUAGE: json
CODE:
{
  "_creationTime": 1700697415295.742,
  "_id": "3k7ty84apk2zy00ay4st1n5p9kh7tf8",
  "contentType": "image/jpeg",
  "sha256": "cb58f529b2ed5a1b8b6681d91126265e919ac61fff6a367b8341c0f46b06a5bd",
  "size": 125338
}

----------------------------------------

TITLE: Implementing Login Button
DESCRIPTION: Example of implementing Clerk's SignInButton component for handling user authentication in React.

LANGUAGE: tsx
CODE:
import { SignInButton } from "@clerk/clerk-react";

function App() {
  return (
    <div className="App">
      <SignInButton mode="modal" />
    </div>
  );
}

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to consume a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Importing Sample Data
DESCRIPTION: Command to import sample data into the Convex tasks table.

LANGUAGE: shell
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Configuring Convex Component in TypeScript
DESCRIPTION: Configuration code to add a component to the Convex application by updating the convex.config.ts file

LANGUAGE: typescript
CODE:
// convex/convex.config.ts
import { defineApp } from "convex/server";
import shardedCounter from "@convex-dev/sharded-counter/convex.config";

const app = defineApp();

app.use(shardedCounter);
//... Add other components here

export default app;

----------------------------------------

TITLE: Querying with a Compound Index in Convex
DESCRIPTION: Shows how to use a compound index to efficiently query for a specific book by both author and title.

LANGUAGE: typescript
CODE:
const foundation = await ctx.db
  .query("books")
  .withIndex("by_author_title", (q) =>
    q.eq("author", "Isaac Asimov").eq("title", "Foundation"),
  )
  .unique();

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates how to create a mutation function in Convex that takes two arguments. It shows argument validation, database insertion, and optional return value.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows argument validation, database querying, and return value processing.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Importing Sample Data to Convex
DESCRIPTION: Imports sample data from a JSONL file into the Convex tasks table

LANGUAGE: sh
CODE:
bunx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Creating SvelteKit Project
DESCRIPTION: Command to create a new SvelteKit project using the Svelte CLI with TypeScript and Svelte 5 preview enabled.

LANGUAGE: shell
CODE:
npm create svelte@latest my-app

----------------------------------------

TITLE: Initializing ConvexReactClient in React
DESCRIPTION: Creates an instance of ConvexReactClient with the backend deployment URL.

LANGUAGE: jsx
CODE:
import { ConvexProvider, ConvexReactClient } from "convex/react";

const convex = new ConvexReactClient("https://<your domain here>.convex.cloud");

----------------------------------------

TITLE: Configuring Auth0 Backend Authentication
DESCRIPTION: Server-side configuration for validating Auth0 access tokens in Convex.

LANGUAGE: typescript
CODE:
export default {
  providers: [
    {
      domain: "your-domain.us.auth0.com",
      applicationID: "yourclientid",
    },
  ]
};

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Creates a query function that accepts numeric and string parameters and retrieves data from a Convex database. The function demonstrates parameter validation and database querying patterns.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Configuring Convex Path
DESCRIPTION: JSON configuration to customize the Convex functions directory path for SvelteKit compatibility.

LANGUAGE: json
CODE:
{
	"functions": "src/convex/"
}

----------------------------------------

TITLE: Configuring Convex MCP Server in Windsurf
DESCRIPTION: JSON configuration for setting up the Convex Model Context Protocol (MCP) server in Windsurf settings. This configuration enables AI coding agent access to Convex deployments for querying and project optimization.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "convex": {
      "command": "npx",
      "args": ["-y", "convex@latest", "mcp", "start"]
    }
  }
}

----------------------------------------

TITLE: Resetting Expo Project
DESCRIPTION: Command to reset the project by moving starter code to app-example directory and creating a new blank app directory

LANGUAGE: bash
CODE:
npm run reset-project

----------------------------------------

TITLE: Updating Typing Status with useEffect
DESCRIPTION: Implementation of a typing indicator that updates presence data based on message input. Includes a debounce timer that resets typing status after 1 second of inactivity.

LANGUAGE: javascript
CODE:
useEffect(() => {
  if (newMessageText.length === 0) {
    updateMyPresence({ typing: false });
    return;
  }
  updateMyPresence({ typing: true });
  const timer = setTimeout(() => updateMyPresence({ typing: false }), 1000);
  return () => clearTimeout(timer);
}, [updateMyPresence, newMessageText]);

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Running Demo Frontend (Bash)
DESCRIPTION: Command to start the Vite development server for the demo frontend application.

LANGUAGE: bash
CODE:
npm run dev:frontend

----------------------------------------

TITLE: Creating a New Convex Project with CLI
DESCRIPTION: This command creates a new Convex project with production and development deployments. It saves the development deployment URL in an environment file.

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Creating a New Convex Project with CLI
DESCRIPTION: This command creates a new Convex project with production and development deployments. It saves the development deployment URL in an environment file.

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Installing Convex Package
DESCRIPTION: Command to install the Convex package in the Remix project.

LANGUAGE: shell
CODE:
cd my-remix-app && npm install convex

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and async database querying.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Running Python Script to Fetch Convex Data
DESCRIPTION: Executes the Python script to retrieve and display the list of tasks from Convex.

LANGUAGE: sh
CODE:
venv/bin/python -m main

----------------------------------------

TITLE: Valid Document Examples in JSON
DESCRIPTION: Examples of valid document structures in Convex database, showing different levels of complexity from empty objects to nested structures.

LANGUAGE: json
CODE:
{}
{"name": "Jamie"}
{"name": {"first": "Ari", "second": "Cole"}, "age": 60}

----------------------------------------

TITLE: Database Field Reference for Convex Yield Table
DESCRIPTION: Reference to the yield table configuration where a single row with doYouYield set to true controls the system operation. The field is modified using the yield:convexYields function.

LANGUAGE: markdown
CODE:
`yield` table with `doYouYield` set to `true`

----------------------------------------

TITLE: Displaying Data from Tables using Convex CLI
DESCRIPTION: This command uses the Convex CLI to display data from specified tables in a readonly view.

LANGUAGE: sh
CODE:
npx convex data [table]

----------------------------------------

TITLE: Referencing Component Tests Projects in build script
DESCRIPTION: This snippet shows how to reference the component tests projects in the build.rs script. It's used to specify which projects should be included in the component tests.

LANGUAGE: rust
CODE:
COMPONENT_TESTS_PROJECTS

----------------------------------------

TITLE: Setting Up and Running the Import Script
DESCRIPTION: A series of commands to set up the project environment, update dependencies, start the Convex development server, and run the Python script for importing data.

LANGUAGE: shell
CODE:
1. poetry install
2. just rush update
3. npx convex dev --once
4. poetry run python main.py <path_to_jsonl>

----------------------------------------

TITLE: Example JSON Response Format
DESCRIPTION: Sample JSON response showing the structure of task data returned by the getAllOpenTasks query.

LANGUAGE: json
CODE:
[
  { "_id": "e4g", "title": "Grocery shopping", "complete": false },
  { "_id": "u9v", "title": "Plant new flowers", "complete": false }
]

----------------------------------------

TITLE: User Presence Status Processing
DESCRIPTION: Logic for processing and marking users as inactive based on their last update timestamp.

LANGUAGE: javascript
CODE:
othersPresence.map((presence) => ({
  ...presence,
  old: presence.updated < now - OLD_MS,
}));

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function includes argument validation and shows how to query the database and process results.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Defining Convex Schema in TypeScript
DESCRIPTION: TypeScript code to define the schema for the 'tasks' table in Convex, including field types and validation.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  tasks: defineTable({
    text: v.string(),
    isCompleted: v.boolean(),
  }),
});

----------------------------------------

TITLE: Creating Tables in Convex Database
DESCRIPTION: Demonstrates how tables are automatically created in Convex when inserting the first document. No explicit table creation is required.

LANGUAGE: javascript
CODE:
// `friends` table doesn't exist.
await ctx.db.insert("friends", { name: "Jamie" });
// Now it does, and it has one document.

----------------------------------------

TITLE: Creating Next.js TypeScript Project
DESCRIPTION: Command to bootstrap a new Next.js project with TypeScript support using create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app@latest --ts

----------------------------------------

TITLE: Referencing Components in build script
DESCRIPTION: This snippet shows how to reference the components in the build.rs script. It's used to specify which components should be included in the component tests.

LANGUAGE: rust
CODE:
COMPONENTS

----------------------------------------

TITLE: Environment-based Auth Configuration
DESCRIPTION: Configuration setup for different environments using environment variables in the auth config.

LANGUAGE: typescript
CODE:
export default {
  providers: [
    {
      domain: process.env.CLERK_JWT_ISSUER_DOMAIN,
      applicationID: "convex",
    },
  ],
};

----------------------------------------

TITLE: Using Convex Mutation in Next.js Route Handler
DESCRIPTION: Shows how to use fetchMutation to call a Convex mutation from a Next.js Route Handler.

LANGUAGE: typescript
CODE:
import { NextResponse } from "next/server";
import { api } from "../../../convex/_generated/api";
import { fetchMutation } from "convex/nextjs";

export async function POST(request: Request) {
  const { message } = await request.json();
  const id = await fetchMutation(api.messages.send, { body: message });
  return NextResponse.json({ id });
}

----------------------------------------

TITLE: React Integration with Convex Client
DESCRIPTION: Example of using Convex in a React component using the useQuery hook for automatic data synchronization.

LANGUAGE: tsx
CODE:
// In your React component
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export function TaskList() {
  const data = useQuery(api.tasks.getAllOpenTasks);
  return data ?? "Loading...";
}

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to integrate a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to use the Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Terminal commands for installing dependencies and starting the development server.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Importing Sample Data to Convex Database
DESCRIPTION: Command to import sample data from a JSONL file into the Convex database, creating a 'tasks' table.

LANGUAGE: shell
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Implementing Mutation Function in Convex with TypeScript
DESCRIPTION: Example of a Convex mutation function that takes two string arguments and demonstrates database write operations with optional return values.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Installing Convex Dependencies
DESCRIPTION: Commands to install required Convex packages and Vue integration libraries.

LANGUAGE: bash
CODE:
cd my-vue-app && npm install @convex-vue/core @vueuse/core convex

----------------------------------------

TITLE: Creating ZenTip Component in React
DESCRIPTION: A React component that renders a tip section with an icon, title, and children content. Supports different tip types through className.

LANGUAGE: jsx
CODE:
export function ZenTip({ type, title, children }) {
  return (
    <div className={`zen-tip zen-${type}`}>
      <h3>
        <TipIcon type={type} /> {title}
      </h3>
      {children}
    </div>
  );
}

----------------------------------------

TITLE: Querying Last Book in Convex
DESCRIPTION: Shows how to query the last book inserted in a Convex database table by changing the order to descending.

LANGUAGE: typescript
CODE:
const lastBook = await ctx.db.query("books").order("desc").first();

----------------------------------------

TITLE: Setting Up Client-Side React Provider Integration
DESCRIPTION: React component setup that integrates the custom auth provider with Convex's authentication system using ConvexProviderWithAuth.

LANGUAGE: jsx
CODE:
import { AuthProviderXReactProvider } from "providerX";
import { ConvexProviderWithAuth } from "convex/react";

root.render(
  <StrictMode>
    <AuthProviderXReactProvider>
      <ConvexProviderWithAuth client={convex} useAuth={useAuthFromProviderX}>
        <App />
      </ConvexProviderWithAuth>
    </AuthProviderXReactProvider>
  </StrictMode>,
);

----------------------------------------

TITLE: Running the Application
DESCRIPTION: Commands for installing dependencies and starting the development server.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: Demonstrates how to use the previously defined mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the mutation result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Installing Remix Project
DESCRIPTION: Command to create a new Remix application using the create-remix CLI tool.

LANGUAGE: shell
CODE:
npx create-remix@latest my-remix-app

----------------------------------------

TITLE: TypeScript System Fields Handling in Convex
DESCRIPTION: Demonstration of working with document system fields in TypeScript, using WithoutSystemFields for document creation and updates.

LANGUAGE: typescript
CODE:
<Snippet title="convex/helpers.ts" source={SystemFieldsTypes} />

----------------------------------------

TITLE: Referencing Convex Functions Without API Objects
DESCRIPTION: Examples of how to reference Convex functions as strings when not using API objects. Shows different patterns for queries, mutations, and actions.

LANGUAGE: javascript
CODE:
"filename:myQuery"
"directory/filename:myMutation"
"directory/action:default"

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that accepts numeric and string arguments, demonstrates database querying, and includes input validation. Shows how to read from the database and process the results.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Linking and Instantiating WebAssembly Modules with Import Object
DESCRIPTION: Shows how to create an import object with JavaScript functions and use it to instantiate a WebAssembly module. This demonstrates the process of linking external dependencies to the WebAssembly module.

LANGUAGE: javascript
CODE:
const imports = {
  dep1: (a) => a + 1,
  dep2: () => Date.now(),
};
const instance = await WebAssembly.instantiate(module, imports);
instance.exports.foo(1, 2, 3);

----------------------------------------

TITLE: Defining Task Data Class in Kotlin
DESCRIPTION: Creating a serializable Kotlin data class to represent task objects

LANGUAGE: kotlin
CODE:
@Serializable
data class Task(val text: String, val isCompleted: Boolean)

----------------------------------------

TITLE: Configuring Convex Deployment URLs for Different Build Types
DESCRIPTION: Set up different Convex deployment URLs for release and debug builds in the Android Gradle configuration.

LANGUAGE: kotlin
CODE:
// In the android section of build.gradle.kts:
buildTypes {
    release {
        // Snip various other config like ProGuard ...
        resValue("string", "convex_url", "YOUR_PROD.convex.cloud")
    }

    debug {
        resValue("string", "convex_url", "YOUR_DEV.convex.cloud")
    }
}

----------------------------------------

TITLE: Querying First Book in Convex
DESCRIPTION: Demonstrates how to query the first book in a Convex database table, which is analogous to finding the first book on a shelf in a library.

LANGUAGE: typescript
CODE:
const firstBook = await ctx.db.query("books").first();

----------------------------------------

TITLE: Application Setup Commands
DESCRIPTION: Commands to install dependencies and start the development server for the Convex application.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Importing WebAssembly Module Object in JavaScript
DESCRIPTION: Shows an alternative approach where the WebAssembly module is imported as a module object, requiring manual instantiation. This method provides more control over the instantiation process.

LANGUAGE: javascript
CODE:
import module from "./foo.wasm";
const instance = WebAssembly.instantiate(module);
instance.exports.bar();

----------------------------------------

TITLE: Initializing Convex Development Environment
DESCRIPTION: Command to set up a Convex development deployment and create the necessary project structure.

LANGUAGE: bash
CODE:
npx convex dev

----------------------------------------

TITLE: TypeScript Function with Manual Type Annotation in Convex
DESCRIPTION: Example of a Convex function using TypeScript with manual argument type annotation, useful for internal functions with complex types.

LANGUAGE: typescript
CODE:
<Snippet title="convex/sendMessage.ts" source={WithoutArgValidation} highlightPatterns={["body: string"]} />

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows implementation of a mutation function that writes data to the database. Includes argument validation and database insertion example.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments and reads from the database. The function includes argument validation and async database operations.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Demonstrating useQuery Hook Usage in TypeScript
DESCRIPTION: This snippet shows different ways of using the useQuery hook, highlighting the challenges with type inference for variadic arguments.

LANGUAGE: typescript
CODE:
let x = useQuery("listMessages");
let x = useQuery("listMessages", {}); // allowed
let x = useQuery("listMessages", undefined); // allowed
let x = useQuery("listMessagesForChannel", { channel: 17 });
let x = useQuery("listMessagesForChannel"); // type error

----------------------------------------

TITLE: Installing and Running Convex Scheduling Demo
DESCRIPTION: Command sequence to install dependencies and start the development server for the Convex scheduling example application

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Implementing Convex Query in TypeScript
DESCRIPTION: Creating a TypeScript query function to fetch tasks from Convex database

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";

export const get = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("tasks").collect();
  },
});

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use the previously defined Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Convex Mutation Function in TypeScript
DESCRIPTION: Demonstrates how to create a Convex mutation function that handles data modifications. Includes argument validation and database insertion example.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Starting Expo Development Server
DESCRIPTION: Command to launch the Expo development server for running the application

LANGUAGE: bash
CODE:
npx expo start

----------------------------------------

TITLE: Implementing User Helper Functions in Convex (TypeScript)
DESCRIPTION: This snippet defines helper functions for user management in Convex, including retrieving user information and checking user existence. It demonstrates the use of Convex's database queries and error handling.

LANGUAGE: typescript
CODE:
import { v } from "convex/values";
import { DatabaseReader } from "convex/server";
import { ConvexError } from "convex/values";

export async function getUserId(
  ctx: DatabaseReader,
  identity: string | undefined
): Promise<string | null> {
  if (!identity) {
    return null;
  }
  const user = await ctx.db
    .query("users")
    .withIndex("by_token", (q) => q.eq("tokenIdentifier", identity))
    .unique();
  return user?._id ?? null;
}

export async function getUser(ctx: DatabaseReader, id: string) {
  const user = await ctx.db.get(id);
  if (!user) {
    throw new ConvexError("User not found");
  }
  return user;
}

export async function userExists(ctx: DatabaseReader, userId: string) {
  const user = await ctx.db.get(userId);
  return !!user;
}

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook, showing both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Basic Convex Data Import Command
DESCRIPTION: Simple command to initiate data import into Convex

LANGUAGE: sh
CODE:
npx convex import

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: Demonstrates how to use the Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based approaches for handling the mutation result.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation and database operations.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Team Management Helpers in Convex (JavaScript)
DESCRIPTION: This JavaScript version of the team management helpers provides the same functionality as the TypeScript version, including creating teams, adding members, and checking team membership, using Convex's database operations.

LANGUAGE: javascript
CODE:
import { v } from "convex/values";

export const teamSchema = {
  name: v.string(),
  members: v.array(v.string()),
};

export async function createTeam(ctx, name, userId) {
  const teamId = await ctx.db.insert("teams", {
    name,
    members: [userId],
  });
  return teamId;
}

export async function addTeamMember(ctx, teamId, userId) {
  await ctx.db.patch(teamId, {
    members: {
      $push: userId,
    },
  });
}

export async function isTeamMember(ctx, teamId, userId) {
  const team = await ctx.db.get(teamId);
  return team?.members.includes(userId) ?? false;
}

export async function getTeamName(ctx, teamId) {
  const team = await ctx.db.get(teamId);
  return team?.name;
}

----------------------------------------

TITLE: Installing Convex and Python Dependencies
DESCRIPTION: Installs the Convex npm package, Python client library, and python-dotenv for environment variable management.

LANGUAGE: sh
CODE:
cd my-app && npm init -y && npm install convex && venv/bin/pip install convex python-dotenv

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: Illustrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Internal API Object in Convex Action
DESCRIPTION: Shows how to use the 'internal' object to reference and execute internal Convex mutations within an action. The example demonstrates upgrading a plan and marking it as professional in the database.

LANGUAGE: javascript
CODE:
import { action } from "../_generated/server";
import { internal } from "../_generated/api";

export default action({
  handler: async ({ runMutation }, { planId, ... }) => {
    // Call out to payment provider (e.g. Stripe) to charge customer
    const response = await fetch(...);
    if (response.ok) {
      // Mark the plan as "professional" in the Convex DB
      await runMutation(internal.plans.markPlanAsProfessional, { planId });
    }
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It shows argument validation and database querying.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Creating Sample Task Data
DESCRIPTION: JSON sample data for tasks to be imported into Convex database

LANGUAGE: json
CODE:
{"text": "Buy groceries", "isCompleted": true}
{"text": "Go for a swim", "isCompleted": true}
{"text": "Integrate Convex", "isCompleted": false}

----------------------------------------

TITLE: Implementing Mutation Function in Convex with TypeScript
DESCRIPTION: Example of a mutation function that accepts string arguments and performs database operations. Demonstrates argument validation and database insertion with return values.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Starting the TanStack Start App
DESCRIPTION: Command to start the TanStack Start application for development.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Updating sendMessage Mutation to Trigger Wikipedia Action
DESCRIPTION: This snippet modifies the existing sendMessage mutation to detect when a user requests a Wikipedia summary and schedules the getWikipediaSummary action accordingly. It demonstrates how to use the Convex scheduler to run actions from mutations.

LANGUAGE: typescript
CODE:
import { api, internal } from "./_generated/api";

export const sendMessage = mutation({
  args: {
    user: v.string(),
    body: v.string(),
  },
  handler: async (ctx, args) => {
    console.log("This TypeScript function is running on the server.");
    await ctx.db.insert("messages", {
      user: args.user,
      body: args.body,
    });

    if (args.body.startsWith("/wiki")) {
      const topic = args.body.slice(args.body.indexOf(" ") + 1);
      await ctx.scheduler.runAfter(0, internal.chat.getWikipediaSummary, {
        topic,
      });
    }
  },
});

----------------------------------------

TITLE: Installing Convex CLI with npm
DESCRIPTION: Command to install the Convex CLI using npm package manager.

LANGUAGE: sh
CODE:
npm install convex

----------------------------------------

TITLE: Node.js Runtime Action Implementation
DESCRIPTION: Shows how to configure an action to run in Node.js environment using the 'use node' directive. Useful when requiring unsupported NPM packages or Node.js APIs.

LANGUAGE: typescript
CODE:
"use node";

export const myNodeAction = action({
  handler: async (ctx) => {
    // Node.js specific code here
  },
});

----------------------------------------

TITLE: Querying Convex Data with API Object in React
DESCRIPTION: Demonstrates how to use the generated 'api' object with Convex's React hooks to query data from a Convex backend. The example shows querying a 'messages.list' function.

LANGUAGE: javascript
CODE:
import { api } from "../convex/_generated/api";
import { useQuery } from "convex/react";

const data = useQuery(api.messages.list);

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with proper argument passing.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Netlify Build Command with Preview Function
DESCRIPTION: Build command configuration for Netlify that includes running a setup function for preview deployments

LANGUAGE: shell
CODE:
npx convex deploy --cmd 'npm run build' --preview-run 'functionName'

----------------------------------------

TITLE: Deploying Convex with Custom URL Environment Variable
DESCRIPTION: Command to deploy Convex application with a custom environment variable name for the Convex URL

LANGUAGE: shell
CODE:
npx convex deploy --cmd-url-env-var-name CUSTOM_CONVEX_URL --cmd 'npm run build'

----------------------------------------

TITLE: Building Svelte Project for Production in Bash
DESCRIPTION: Command to create a production version of the Svelte app. Also mentions the ability to preview the production build.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function includes argument validation and shows how to read from the database using ctx.db.query().

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Configuring Vitest for Convex Testing
DESCRIPTION: TypeScript configuration for Vitest to set up the test environment for Convex functions.

LANGUAGE: typescript
CODE:
import { defineConfig } from "vitest/config";

export default defineConfig({
  test: {
    environment: "edge-runtime",
    server: { deps: { inline: ["convex-test"] } },
  },
});

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to consume a Convex query function in a React component using the useQuery hook with typed arguments.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Generating TypeScript API Specification
DESCRIPTION: CLI command to generate TypeScript API definitions from a Convex deployment

LANGUAGE: shell
CODE:
npx convex-helpers ts-api-spec

----------------------------------------

TITLE: Using Convex Query in React
DESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Starting Convex Docker Container
DESCRIPTION: Commands to start the Convex backend and dashboard using Docker Compose and generate admin keys for authentication.

LANGUAGE: bash
CODE:
docker compose up
docker compose exec backend ./generate_admin_key.sh

----------------------------------------

TITLE: Defining Convex Functions in TypeScript
DESCRIPTION: TypeScript code snippet showing Convex function definitions in a file named convex/load.ts. The actual code content is not provided in the input.

LANGUAGE: typescript
CODE:
// Content of convex/load.ts is not provided in the input

----------------------------------------

TITLE: Configuring NPM Scripts for Convex Testing
DESCRIPTION: JSON configuration for package.json to add test scripts for Convex functions using Vitest.

LANGUAGE: json
CODE:
"scripts": {
  "test": "vitest",
  "test:once": "vitest run",
  "test:debug": "vitest --inspect-brk --no-file-parallelism",
  "test:coverage": "vitest run --coverage --coverage.reporter=text",
}

----------------------------------------

TITLE: Action Arguments with Validation
DESCRIPTION: Shows how to implement action arguments with validation using the v constructor. Arguments are passed after the context parameter.

LANGUAGE: typescript
CODE:
export const myAction = action({
  args: {
    name: v.string(),
    age: v.number(),
  },
  handler: async (ctx, args) => {
    // Use validated args here
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a Convex mutation function that modifies database data. Includes argument validation and demonstrates database insertion operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Installing and Running Pagination Example
DESCRIPTION: Commands to install dependencies and start the development server for the pagination example application.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Custom Convex URL Environment Variable Command
DESCRIPTION: Shell command for deploying Convex application with a custom environment variable name for the Convex URL.

LANGUAGE: shell
CODE:
npx convex deploy --cmd-url-env-var-name CUSTOM_CONVEX_URL --cmd 'npm run build'

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: Illustrates how to use a Convex mutation function in a React component using the useMutation hook. The example shows both fire-and-forget and promise-based usage patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Running Convex Package with Local Big-Brain
DESCRIPTION: Steps to run a Convex package using a local big-brain setup, which includes both the backend and big-brain components. It requires running big-brain and then using the provided command for testing.

LANGUAGE: bash
CODE:
just run-big-brain

LANGUAGE: bash
CODE:
CONVEX_PROVISION_HOST=http://0.0.0.0:8050 npx convex dev --override-auth-url "https://convexdev-test.us.auth0.com/" --override-auth-client "XXXXXXXXX"

----------------------------------------

TITLE: Creating New NPM Project - Shell Commands
DESCRIPTION: Shell commands to create a new Node.js project directory and initialize it as an ES module npm project.

LANGUAGE: sh
CODE:
mkdir my-project && cd my-project && npm init -y && npm pkg set type="module"

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that handles data modifications, including argument validation and database operations like inserting records.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Running Convex Package with Local Big-Brain
DESCRIPTION: Steps to run a Convex package using a local big-brain setup, which includes both the backend and big-brain components. It requires running big-brain and then using the provided command for testing.

LANGUAGE: bash
CODE:
just run-big-brain

LANGUAGE: bash
CODE:
CONVEX_PROVISION_HOST=http://0.0.0.0:8050 npx convex dev --override-auth-url "https://convexdev-test.us.auth0.com/" --override-auth-client "XXXXXXXXX"

----------------------------------------

TITLE: Authentication Request with JWT Token
DESCRIPTION: Example demonstrating how to make an authenticated HTTP request to a Convex endpoint using a JWT token in the Authorization header.

LANGUAGE: typescript
CODE:
await fetch("https://happy-animal-123.convex.site/myEndpoint", {
  headers: {
    Authorization: `Bearer ${token}`,
  },
});

----------------------------------------

TITLE: Defining a Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure of a query function including argument validation and database interaction.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Starting the Convex Fivetran Source Connector
DESCRIPTION: Command to start the Convex Fivetran source connector on the default port (50051). The connector runs as a gRPC server hosted on Fivetran infrastructure.

LANGUAGE: bash
CODE:
$ ./convex_fivetran_source
Starting the connector on [::]:50051

----------------------------------------

TITLE: Running Local Convex Backend with Components
DESCRIPTION: Command to run a local backend with components enabled using the 'just' command runner.

LANGUAGE: bash
CODE:
just run-backend

----------------------------------------

TITLE: Accessing Environment Variables in Convex Functions
DESCRIPTION: Example of accessing a GIPHY API key environment variable within a Convex function to construct a URL.

LANGUAGE: javascript
CODE:
function giphyUrl(query) {
  return (
    "https://api.giphy.com/v1/gifs/translate?api_key=" +
    process.env.GIPHY_KEY +
    "&s=" +
    encodeURIComponent(query)
  );
}

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to consume a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Loading and Instantiating WebAssembly Modules in JavaScript
DESCRIPTION: Demonstrates two methods of loading WebAssembly modules: a simple approach using fetch and arrayBuffer, and a streaming approach recommended for browsers. Both methods show how to instantiate and use the WebAssembly module.

LANGUAGE: javascript
CODE:
// simple, not streaming, not encouraged in browsers
const resp = await fetch("simple.wasm");
const bytes = await resp.arrayBuffer();
const module = WebAssembly.compile(bytes))
const instance = await WebAssembly.instantiate(module, imports)
instance.exports.foo(1, 2, 3);

// fancier, recommended in browsers
const resp = await fetch("simple.wasm");
const instance = WebAssembly.instantiateStreaming(resp, imports);
instance.exports.foo(1, 2, 3);

----------------------------------------

TITLE: Running Convex Dashboard Locally with Docker
DESCRIPTION: Docker command to run the Convex dashboard locally, specifying the backend URL and exposing the dashboard on port 6791.

LANGUAGE: bash
CODE:
docker run -e 'NEXT_PUBLIC_DEPLOYMENT_URL=<backend-url>' -p '6791:6791' 'ghcr.io/get-convex/convex-dashboard:latest'

----------------------------------------

TITLE: Implementing New Load Testing Scenario - TypeScript
DESCRIPTION: Instructions for adding a new load testing scenario to the system. Process involves defining the scenario name, implementing an IScenario interface class, and updating the LoadGenerator configuration.

LANGUAGE: typescript
CODE:
// 1. Add to ScenarioName enum
enum ScenarioName {
  // Add your new scenario here
}

// 2. Create new scenario class
class NewScenario extends Scenario implements IScenario {
  // Implement scenario logic
}

// 3. Update LoadGenerator struct
struct Scenario {
  // Add new scenario definition
}

----------------------------------------

TITLE: Initializing Convex Development Environment
DESCRIPTION: Command to initialize Convex development environment and create necessary project structure.

LANGUAGE: shell
CODE:
npx convex dev

----------------------------------------

TITLE: Starting Vite Development Server
DESCRIPTION: Command to run the Vite development server for local development.

LANGUAGE: shellscript
CODE:
npm run dev

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Installing Convex Auth with React
DESCRIPTION: Command to create a new Convex project with React and Convex Auth using the Convex CLI. This will set up a new project from scratch with Vite and Convex Auth configurations.

LANGUAGE: sh
CODE:
npm create convex@latest

----------------------------------------

TITLE: Setting Environment Variables as Secrets
DESCRIPTION: Command to set Convex environment variables as secrets in Fly.io for secure configuration.

LANGUAGE: sh
CODE:
fly secrets set CONVEX_CLOUD_ORIGIN="<fly-backend-url>" CONVEX_SITE_ORIGIN="<fly-backend-url>/http"

----------------------------------------

TITLE: Defining an HTTP Action in Convex (TypeScript)
DESCRIPTION: This function defines an HTTP action that can handle HTTP requests. It receives an ActionCtx and a Request object as arguments.

LANGUAGE: typescript
CODE:
httpAction(func: (ctx: ActionCtx, request: Request) => Promise<Response>): PublicHttpAction

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex that inserts data into the database. It includes argument validation, database insertion, and optional return of the inserted data.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Initializing Bun Project
DESCRIPTION: Creates a new directory and initializes a Bun project with default settings

LANGUAGE: sh
CODE:
mkdir my-project && cd my-project && bun init -y

----------------------------------------

TITLE: Generating Convex Code with NPX
DESCRIPTION: Command to run Convex code generation, which creates JavaScript and TypeScript files in the convex/_generated directory for better autocompletion and type safety.

LANGUAGE: bash
CODE:
npx convex dev

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a mutation function in Convex. It includes argument validation and shows how to insert data into the database and return the result.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Fetching Convex Data in Next.js Server Component
DESCRIPTION: Illustrates how to use fetchQuery to fetch non-reactive data from Convex in a Next.js Server Component.

LANGUAGE: typescript
CODE:
import { fetchQuery } from "convex/nextjs";
import { api } from "../../convex/_generated/api";

export default async function StaticTasks() {
  const tasks = await fetchQuery(api.tasks.get);
  return (
    <ul>
      {tasks.map(task => (
        <li key={task._id}>{task.text}</li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Building Production Bundle
DESCRIPTION: Command to perform type checking, compilation, and minification for production deployment.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a mutation function that accepts two string arguments and demonstrates database modifications. Shows how to insert data and return the modified record.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Importing Sample Data to Convex
DESCRIPTION: Command to import sample data into the Convex tasks table

LANGUAGE: sh
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Installing Convex Files with Degit
DESCRIPTION: Commands to copy the necessary Fly.io configuration files from the Convex backend repository using degit tool.

LANGUAGE: sh
CODE:
npx degit get-convex/convex-backend/self-hosted/fly fly
cd fly

----------------------------------------

TITLE: Defining an Internal Action in Convex (TypeScript)
DESCRIPTION: This function defines an action that is only accessible from other Convex functions, not from the client.

LANGUAGE: typescript
CODE:
internalAction(func): RegisteredAction

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, showing both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation and async handler implementation.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Installing and Running TanStack.com in Development Mode (sh)
DESCRIPTION: Commands to install dependencies and start the TanStack.com application in development mode. This process rebuilds assets on file changes.

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Illustrating a Failed Transaction in Pseudocode
DESCRIPTION: This snippet demonstrates how a transaction could fail mid-way, potentially leading to data inconsistency if atomicity is not ensured.

LANGUAGE: pseudocode
CODE:
$14 <- READ Alice
$11 <- READ Bob
WRITE Alice $9
*crash* // $5 lost from your bank

----------------------------------------

TITLE: Complex Mutation Wrapper Example in TypeScript
DESCRIPTION: This snippet demonstrates a complex mutation wrapper setup, combining multiple middleware functions with custom input validation and context modification.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
const myMutWrapper = withSession(withUser(withCustomerCtx(mutation)))
export myMut = myMutWrapper({
  input: { a: v.string() },
  openAPIexample: "Run the function like this."
  customContext: { foo: 123 },
  handler: ({ user, session, foo }, { a, addedByAWrapper }) => { ... }
}]

----------------------------------------

TITLE: Disabling Local Deployments for Convex Project
DESCRIPTION: Command to disable local deployments for a Convex project and revert to using cloud deployments.

LANGUAGE: sh
CODE:
npx convex disable-local-deployments

----------------------------------------

TITLE: Creating Next.js App with Pages Router
DESCRIPTION: Command to create a new Next.js application using the create-next-app utility, configured with the Pages Router and JavaScript.

LANGUAGE: shell
CODE:
npx create-next-app@latest my-app --no-app --js

----------------------------------------

TITLE: Building Convex Backend Docker Image
DESCRIPTION: Command to build the Docker image for Convex backend from scratch using the Dockerfile.backend configuration.

LANGUAGE: sh
CODE:
docker build -t convex-backend -f self-hosted/docker-build/Dockerfile.backend .

----------------------------------------

TITLE: Using a Query Function in React
DESCRIPTION: This snippet shows how to use a Convex query function in a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Cloning TanStack Repositories (sh)
DESCRIPTION: Commands to clone the TanStack.com website repository and a specific project repository (in this case, 'form') into the 'tanstack' directory.

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts number and string arguments, validating inputs and reading from the database. Shows proper structure for query functions including argument validation and async handler implementation.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();
    console.log(args.first, args.second);
    return documents;
  },
});

----------------------------------------

TITLE: Viewing Convex CLI Commands
DESCRIPTION: Command to display the full list of available Convex CLI commands.

LANGUAGE: sh
CODE:
npx convex

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: Shows how to use a Convex query function in a React component using the useQuery hook. The example passes arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Client-side Authentication in Next.js with Convex
DESCRIPTION: This code snippet demonstrates how to add client-side authentication to a Next.js application using Convex and Auth0. It uses the ConvexProviderWithAuth0 component to wrap the application and conditionally render content based on the user's authentication status.

LANGUAGE: jsx
CODE:
import { ConvexProviderWithAuth0 } from "convex/react-auth0";
import { ConvexReactClient } from "convex/react";
import { Auth0Provider } from "@auth0/auth0-react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

function MyApp({ Component, pageProps }) {
  return (
    <Auth0Provider
      domain={process.env.NEXT_PUBLIC_AUTH0_DOMAIN!}
      clientId={process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID!}
      authorizationParams={{
        redirect_uri: typeof window === "undefined" ? undefined : window.location.origin,
      }}
    >
      <ConvexProviderWithAuth0 client={convex}>
        <Component {...pageProps} />
      </ConvexProviderWithAuth0>
    </Auth0Provider>
  );
}

export default MyApp;

----------------------------------------

TITLE: Development Workflow Commands
DESCRIPTION: Basic Convex development commands used in the team workflow for creating and managing deployments.

LANGUAGE: bash
CODE:
npx convex dev

----------------------------------------

TITLE: Defining HTTP Router Configuration in Convex
DESCRIPTION: Example showing how to set up an HTTP router to expose endpoints in Convex, including route definition and message posting functionality.

LANGUAGE: typescript
CODE:
import { httpRouter } from "convex/server";
import { postMessage } from "./messages";

export default httpRouter()
  .route("/postMessage", {
    handler: postMessage
  });

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a query function implementation that accepts numeric and string arguments. Shows database querying patterns and argument validation using Convex's built-in validators.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Enabling Local Deployment for Existing Convex Project
DESCRIPTION: Command to enable local deployment for an existing Convex project. This updates the CONVEX_DEPLOYMENT environment variable in the .env.local file.

LANGUAGE: sh
CODE:
npx convex dev --local --once

----------------------------------------

TITLE: Running the Convex TypeScript Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex TypeScript and Schemas example app.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Defining a Query Function in Convex
DESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments: a number and a string.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Using Convex Record Type
DESCRIPTION: Example of Record type usage in Convex with dynamic keys

LANGUAGE: typescript
CODE:
{"a": "1", "b": "2"}

----------------------------------------

TITLE: Using a Mutation Function in React
DESCRIPTION: This snippet shows how to use a Convex mutation function in a React component using the useMutation hook. It demonstrates both fire-and-forget and promise-based usage.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Sample Task Data Definition
DESCRIPTION: JSON Lines format sample data for tasks table initialization.

LANGUAGE: json
CODE:
{"text": "Buy groceries", "isCompleted": true}
{"text": "Go for a swim", "isCompleted": true}
{"text": "Integrate Convex", "isCompleted": false}

----------------------------------------

TITLE: Environment Configuration for Convex Deployment
DESCRIPTION: Example of using environment variables to deploy to a staging environment using the CONVEX_DEPLOY_KEY variable with the convex deploy command.

LANGUAGE: bash
CODE:
npx convex deploy

----------------------------------------

TITLE: Calling Convex Function API with cURL
DESCRIPTION: Example of using cURL to call a Convex function via the HTTP API. This snippet demonstrates how to make a POST request to the /api/query endpoint with JSON payload.

LANGUAGE: shell
CODE:
curl https://acoustic-panther-728.convex.cloud/api/query \
   -d '{"path": "messages:list", "args": {}, "format": "json"}' \
   -X POST -H "Content-Type: application/json"

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a mutation function in Convex that takes two string arguments, inserts data into the database, and returns the inserted document. It includes argument validation.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a mutation function in Convex that takes two string arguments, inserts data into the database, and returns the inserted document. It includes argument validation.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Installing Convex Fivetran Destination Connector using Git and Cargo
DESCRIPTION: Commands to clone the Convex backend repository and build the Fivetran destination connector using Cargo. Requires Git and Cargo (recommended to be installed via rustup).

LANGUAGE: bash
CODE:
git clone https://github.com/get-convex/convex-backend.git
cd convex-backend
cargo build --release -p convex_fivetran_destination

----------------------------------------

TITLE: Integrating Convex with Next.js App
DESCRIPTION: JSX code for the _app.js file, setting up ConvexProvider to connect the Next.js app with the Convex backend.

LANGUAGE: jsx
CODE:
import { ConvexProvider, ConvexReactClient } from "convex/react";
import "../styles/globals.css";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL);

function MyApp({ Component, pageProps }) {
  return (
    <ConvexProvider client={convex}>
      <Component {...pageProps} />
    </ConvexProvider>
  );
}

export default MyApp;

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that handles data modifications. Shows argument validation, database insertion, and optional return values.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Deploying Convex Project to Production
DESCRIPTION: Command to deploy the Convex project to the production environment.

LANGUAGE: sh
CODE:
npx convex deploy

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: This snippet demonstrates how to define a mutation function in Convex. It includes argument validation, database insertion, and optional return of the inserted data.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Running Convex Tests and Generating SVG Visualization in Bash
DESCRIPTION: This command sets environment variables, runs Rust tests for the 'convex' project, and generates an SVG visualization from a DOT file. It uses cargo for testing and the dot command for graph generation.

LANGUAGE: bash
CODE:
ELLE_DOT_PATH=/tmp/elle.dot RUST_BACKTRACE=1 RUST_LOG=simulation=error cargo test test_elle -- --nocapture; dot -Tsvg /tmp/elle.dot > /tmp/elle.svg

----------------------------------------

TITLE: Installing and Running Convex Scheduling Demo
DESCRIPTION: Commands to install dependencies and start the development server for the Convex scheduling example application

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing Convex Dependencies with NPM
DESCRIPTION: Commands to initialize a new npm project and install the Convex client and server library.

LANGUAGE: bash
CODE:
npm init -y
npm install convex

----------------------------------------

TITLE: Using Convex Mutation in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Installing Convex Helpers Package
DESCRIPTION: Command to install the convex-helpers package which provides CLI tools for TypeScript API generation

LANGUAGE: shell
CODE:
npm install convex-helpers

----------------------------------------

TITLE: Developing Against Local Convex Backend (Bash)
DESCRIPTION: Commands to set up and run the Convex CLI for developing against the local backend using the demo project. It includes installing dependencies and starting the development server.

LANGUAGE: bash
CODE:
cd npm-packages/demos/tutorial
npm i
just convex dev

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Defining Convex Query Function
DESCRIPTION: JavaScript code defining a Convex query function to fetch tasks from the database. This function is exposed as an API endpoint.

LANGUAGE: javascript
CODE:
import { query } from "./_generated/server";

export const get = query(async ({ db }) => {
  return await db.query("tasks").collect();
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that handles data modifications. Shows how to insert documents into the database and return the inserted data.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Installing and Running Vector Search Demo
DESCRIPTION: Basic npm commands to install dependencies and start the development server for the vector search example application.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing and Running Convex Zod Example
DESCRIPTION: Commands to install dependencies and start the development server for the Zod validation example application.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Using Convex String Type
DESCRIPTION: Example of string usage in Convex with UTF-8 encoding

LANGUAGE: typescript
CODE:
"abc"

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function shows database querying, argument validation, and data processing patterns in Convex.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Customizing Convex URL Environment Variable in Vercel Build Command
DESCRIPTION: This command demonstrates how to customize the environment variable name used by the frontend code when deploying a Convex app on Vercel. It uses the --cmd-url-env-var-name flag to specify a custom variable name.

LANGUAGE: bash
CODE:
npx convex deploy --cmd-url-env-var-name CUSTOM_CONVEX_URL --cmd 'npm run build'

----------------------------------------

TITLE: Record Validator Usage in TypeScript
DESCRIPTION: Example demonstrating the usage of v.object validator to create typed message objects with user and body fields

LANGUAGE: typescript
CODE:
const message = v.object({ user: v.string(), body: v.string() });
const imageMessage = v.object({ ...message.fields, })

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Paginated Query with Result Transformation in Convex
DESCRIPTION: This snippet illustrates how to transform the results of a paginated query. It maps over the page of documents to extract specific fields before returning.

LANGUAGE: typescript
CODE:
export const listWithTransformation = query({
  args: paginationOptsValidator,
  handler: async (ctx, args) => {
    const paginationResult = await ctx.db
      .query("messages")
      .order("desc")
      .paginate(args.paginationOpts);

    return {
      ...paginationResult,
      page: paginationResult.page.map((message) => ({
        author: message.author,
        body: message.body,
      })),
    };
  },
});

----------------------------------------

TITLE: Installing Convex Package
DESCRIPTION: Commands to navigate to the app directory and install the Convex package for React integration.

LANGUAGE: shell
CODE:
cd my-app && npm install convex

----------------------------------------

TITLE: Defining a Query Function in Convex
DESCRIPTION: This snippet demonstrates how to define a query function in Convex. It includes argument validation, database querying, and handling of input arguments.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Defining Convex Schema for Fivetran Integration in TypeScript
DESCRIPTION: This code snippet demonstrates how to define a Convex schema for integration with Fivetran. It includes a sample table definition for 'email_cars' with various field types and indexes. The schema is designed to work with Fivetran's syncing mechanism.

LANGUAGE: typescript
CODE:
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

const fivetranTables = {
  email_cars: defineTable({
    description: v.union(v.string(), v.null()),
    fivetran: v.object({
      columns: v.object({
        directory: v.union(v.string(), v.null()),
        file: v.union(v.string(), v.null()),
        line: v.union(v.int64(), v.null()),
        modified: v.union(v.float64(), v.null()),
      }),
      synced: v.float64(),
    }),
    make: v.union(v.string(), v.null()),
    model: v.union(v.string(), v.null()),
    price: v.union(v.float64(), v.null()),
    year: v.union(v.int64(), v.null()),
  })
    .index("by_fivetran_synced", ["fivetran.synced"])
    .index("by_primary_key", [
      "fivetran.columns.directory",
      "fivetran.columns.file",
      "fivetran.columns.line",
      "fivetran.columns.modified",
    ]),
};

export default defineSchema({
  ...fivetranTables,
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional return value handling.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. Shows how to define argument validators and implement a database query handler that returns documents.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Installing Sharded Counter Component via NPM
DESCRIPTION: Command to install the sharded counter component package from npm

LANGUAGE: bash
CODE:
npm i @convex-dev/sharded-counter

----------------------------------------

TITLE: Demonstrating Concurrent Transactions in Pseudocode
DESCRIPTION: This snippet shows how concurrent transactions can lead to data races, illustrating the need for proper concurrency control.

LANGUAGE: pseudocode
CODE:
$5 Transfer                           $3 Debit Card Charge
----------------------------------------------------------
$14 <- READ Alice
$11 <- READ Bob
                                        $14 <- READ Alice
                                        WRITE Alice $11
WRITE Alice $9 // Free coke!
WRITE Bob $16

----------------------------------------

TITLE: Describing Convex Waitlist Project in Markdown
DESCRIPTION: This markdown snippet outlines the purpose of the Convex waitlist project. It explains that the project is a private demo intended for prototyping modular waitlist functionality within the context of #project-modularity.

LANGUAGE: markdown
CODE:
# Convex waitlist

This private demo is going to be used as a playground for #project-modularity
for prototyping "modules" that allow the waitlist functionality to be easily
encapsulated.

----------------------------------------

TITLE: Using Generated Go Client for Convex API
DESCRIPTION: Go code snippet demonstrating the usage of a generated, type-safe HTTP client for interacting with Convex API. The client was generated using OpenAPI Tools.

LANGUAGE: go
CODE:
// Content of convex.go is not provided in the input

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments. It shows the structure of a query function, including argument validation and database querying.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Streaming Export: List Full Snapshot Pseudocode
DESCRIPTION: Pseudocode demonstrating how to use the list_snapshot endpoint to retrieve a full snapshot of documents. This code iteratively calls the API until all pages of the snapshot are retrieved.

LANGUAGE: python
CODE:
def list_full_snapshot()
    snapshot_values = []
    snapshot = None
    cursor = None
    while True:
        result = api.list_snapshot(cursor, snapshot)
        snapshot_values.extend(result.values)
        (cursor, snapshot) = (result.cursor, result.snapshot)
        if !result.hasMore:
            break
    return (snapshot_values, result.snapshot)

----------------------------------------

TITLE: Running Bun Script
DESCRIPTION: Executes the TypeScript script that queries the Convex database

LANGUAGE: sh
CODE:
bun index.ts

----------------------------------------

TITLE: Implementing Convex Mutation Function with TypeScript
DESCRIPTION: Shows how to create a mutation function that accepts string parameters and performs database operations. Includes input validation and return value handling.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Convex Mutation Function with TypeScript
DESCRIPTION: Shows how to create a mutation function that accepts string parameters and performs database operations. Includes input validation and return value handling.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Rendering Admonition Component for Beta Features in React JSX
DESCRIPTION: This code snippet defines an Admonition component that displays a caution message for beta features. It uses props to dynamically set the feature name and verb, and includes a link to documentation and community Discord.

LANGUAGE: JSX
CODE:
<Admonition type="caution" title={`${props.feature} ${props.verb} in beta`}>
  {props.feature} {props.verb} currently a [beta
  feature](/production/state/#beta-features). If you have feedback or feature
  requests, [let us know on Discord](https://convex.dev/community)!
</Admonition>

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install all required npm dependencies for the Vue 3 project.

LANGUAGE: sh
CODE:
npm install

----------------------------------------

TITLE: Complex Querying with Compound Index in Convex
DESCRIPTION: Demonstrates a more complex query using a compound index to find all books by an author with titles starting with a specific letter.

LANGUAGE: typescript
CODE:
const asimovBooksStartingWithF = await ctx.db
  .query("books")
  .withIndex("by_author_title", (q) =>
    q.eq("author", "Isaac Asimov").gte("title", "F").lt("title", "G"),
  )
  .collect();

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: Illustrates how to use the previously defined mutation function in a React component using the useMutation hook. It shows both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Cloning and Setting Up Convex Tutorial Project
DESCRIPTION: Commands to clone the Convex tutorial repository, install dependencies, and start the development server.

LANGUAGE: shell
CODE:
git clone https://github.com/get-convex/convex-tutorial.git
cd convex-tutorial
npm install
npm run dev

----------------------------------------

TITLE: Using Convex Mutation in React
DESCRIPTION: Demonstrates how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Rendering YouTube Video List Component
DESCRIPTION: JSX component implementation for displaying a curated list of YouTube video embeds with labels.

LANGUAGE: JSX
CODE:
<YouTubeList
  items={[
    {
      src: "https://www.youtube.com/embed/Xjud1weG4z8?si=OMMfKzK_Dp8RgmgM",
      label: "Backends for Product Developers",
    },
    {
      src: "https://www.youtube.com/embed/UVvd7BF99-4?si=Z9_pLHMnpL9kaduE",
      label: "Intro to Convex",
    }
]} />

----------------------------------------

TITLE: Running a Setup Function in Vercel Preview Deployments for Convex
DESCRIPTION: This Vercel build command shows how to deploy a Convex app and run a specific function to set up initial data in preview deployments. The --preview-run flag specifies the function to be executed only in preview environments.

LANGUAGE: bash
CODE:
npx convex deploy --cmd 'npm run build' --preview-run 'functionName'

----------------------------------------

TITLE: Visualizing Convex Bundle with source-map-explorer
DESCRIPTION: Command to use source-map-explorer for visualizing the generated Convex bundle.

LANGUAGE: sh
CODE:
npx source-map-explorer /tmp/myBundle/**/*.js

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Commands to install dependencies and start the local development server. The server provides live reload functionality for most changes.

LANGUAGE: console
CODE:
just rush install
npm run dev

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use the previously defined query function in a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Creating ZenHeader Component in React
DESCRIPTION: A React component that renders a header with a title and corresponding category icon using the CategoryIcon component.

LANGUAGE: jsx
CODE:
export function ZenHeader({ title }) {
  return (
    <h2 className="zen-header">
      {title} <CategoryIcon title={title} />
    </h2>
  );
}

----------------------------------------

TITLE: Example Task Query Implementation
DESCRIPTION: Detailed implementation of a query function to fetch open tasks, demonstrating database querying and filtering.

LANGUAGE: typescript
CODE:
export const getAllOpenTasks = query({
  args: {},
  handler: async (ctx, args) => {
    // Query the database to get all items that are not completed
    const tasks = await ctx.db
      .query("tasks")
      .withIndex("by_completed", (q) => q.eq("completed", false))
      .collect();
    return tasks;
  },
});

----------------------------------------

TITLE: Creating Directory for TanStack Projects (sh)
DESCRIPTION: Command to create a new directory called 'tanstack' for hosting TanStack projects and documentation.

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a query function that accepts numeric and string arguments. Demonstrates database querying, argument validation, and data processing within a Convex query context.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure of a query function, including argument validation and database interaction.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Installing and Running Convex File Storage Example
DESCRIPTION: Commands to install dependencies and start the development server for the Convex file storage example application.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Installing Convex in Next.js Project
DESCRIPTION: Command to navigate to the newly created Next.js app directory and install the Convex package.

LANGUAGE: shell
CODE:
cd my-app && npm install convex

----------------------------------------

TITLE: Example Function Execution Event JSON Structure
DESCRIPTION: Sample JSON structure for a query function execution event, showing execution metrics, function details and resource usage statistics.

LANGUAGE: json
CODE:
{
  "data": {
    "execution_time_ms": 294,
    "function": {
      "cached": false,
      "path": "message:list",
      "request_id": "892104e63bd39d9a",
      "type": "query"
    },
    "status": "success",
    "timestamp": 1715973841548,
    "topic": "function_execution",
    "usage": {
      "database_read_bytes": 1077,
      "database_write_bytes": 0,
      "file_storage_read_bytes": 0,
      "file_storage_write_bytes": 0,
      "vector_storage_read_bytes": 0,
      "vector_storage_write_bytes": 0
    }
  }
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that accepts string arguments and performs database operations. Demonstrates data insertion and optional return values.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Configuring Environment Variables for Production Dashboard
DESCRIPTION: This snippet shows the environment variables needed to run the local dashboard against the production backend. Some values need to be copied from the production Vercel environment variables.

LANGUAGE: bash
CODE:
NEXT_PUBLIC_BIG_BRAIN_URL=http://localhost:8080/https://api.convex.dev
AUTH0_CLIENT_ID=nANKpAFe4scUPxW77869QHVKYAgrPwy7
AUTH0_ISSUER_BASE_URL=https://auth.convex.dev
DISABLE_BIG_BRAIN_SSR=1

AUTH0_SECRET={copy from production env vars}
AUTH0_CLIENT_SECRET={copy from production env vars}

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, showing both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Linking Vercel Project for Convex Dashboard Development
DESCRIPTION: This snippet demonstrates the process of linking the local dashboard instance to the Vercel project using the Vercel CLI. It includes authentication and project selection steps.

LANGUAGE: bash
CODE:
$ npx vercel link
Vercel CLI 30.2.3
> > No existing credentials found. Please log in:
? Log in to Vercel github
> Success! GitHub authentication complete for nicolas@convex.dev
? Set up "~/Documents/convex-alt/npm-packages/dashboard"? [Y/n] y
? Which scope should contain your project? Convex
? Found project "convex-dev/dashboard". Link to it? [Y/n] y
✅  Linked to convex-dev/dashboard (created .vercel)

----------------------------------------

TITLE: Example Environment File for Convex and Other Services
DESCRIPTION: This is an example of an environment file (.env.local) that includes the Convex deployment URL along with other common frontend environment variables for services like Sentry and LaunchDarkly.

LANGUAGE: shell
CODE:
NEXT_PUBLIC_CONVEX_URL=https://guiltless-dog-960.convex.cloud

# examples of other environment variables that might be passed to the frontend
NEXT_PUBLIC_SENTRY_DSN=https://123abc@o123.ingest.sentry.io/1234
NEXT_PUBLIC_LAUNCHDARKLY_SDK_CLIENT_SIDE_ID=01234567890abcdef

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. The function demonstrates database querying, argument validation, and data processing capabilities.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Mocking Fetch Calls in Convex Tests
DESCRIPTION: Example of mocking global fetch calls in Convex tests using Vitest's stubGlobal method.

LANGUAGE: typescript
CODE:
import { expect, test, vi } from "vitest";
import { convexTest } from "../index";
import { api } from "./_generated/api";
import schema from "./schema";

test("ai", async () => {
  const t = convexTest(schema);

  vi.stubGlobal(
    "fetch",
    vi.fn(async () => ({ text: async () => "I am the overlord" }) as Response),
  );

  const reply = await t.action(api.messages.sendAIMessage, { prompt: "hello" });
  expect(reply).toEqual("I am the overlord");

  vi.unstubAllGlobals();
});

----------------------------------------

TITLE: Starting Storybook for Convex Dashboard Components
DESCRIPTION: This command starts Storybook, a tool used for documenting and showcasing the behavior and visual aspects of the dashboard design system components.

LANGUAGE: bash
CODE:
cd ~/src/convex/npm-packages/dashboard
npm run storybook

----------------------------------------

TITLE: Example Audit Log Event JSON Structure
DESCRIPTION: Sample JSON structure for an audit log event showing configuration changes to a deployment.

LANGUAGE: json
CODE:
{
  "topic": "audit_log",
  "timestamp": 1714421999886,
  "audit_log_action": "push_config",
  "audit_log_metadata": "{\"auth\":{\"added\":[],\"removed\":[]},\"crons\":{\"added\":[],\"deleted\":[],\"updated\":[]},..}"
}

----------------------------------------

TITLE: Running Demo Function for Components
DESCRIPTION: Command to execute a demo function called 'messages:componentTest' using the Convex CLI.

LANGUAGE: bash
CODE:
just convex run messages:componentTest

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates creating a mutation function that modifies data in the Convex database. Includes parameter validation and database insertion operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based usage patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Building Remix App for Production
DESCRIPTION: Command to create a production build of the Remix application.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Running LoadGenerator Against Self-Hosted Convex Backend
DESCRIPTION: Shell command to execute LoadGenerator against a self-hosted Convex backend using a specified workload configuration.

LANGUAGE: shell
CODE:
cd ../../crates/load_generator
just self-hosted crates/load_generator/workloads/<your-workload>.json  --existing-instance-url <your-backend-url> --existing-instance-admin-key <your-admin-key>

----------------------------------------

TITLE: Implementing a Mutation Function in Convex
DESCRIPTION: Demonstrates how to create a mutation function in Convex with argument validation and database writing. The function inserts a new message into the database and returns the inserted document.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Convex Query in React
DESCRIPTION: Example of using a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Creating a New Convex Project for Dashboard Testing
DESCRIPTION: These commands navigate to the tutorial demo directory and start a new Convex project for testing with the dashboard.

LANGUAGE: bash
CODE:
cd ../demos/tutorial
just convex-bb dev

----------------------------------------

TITLE: Example Console Log Event JSON Structure
DESCRIPTION: Sample JSON structure showing a console.log event from a mutation function, demonstrating the standard fields like topic, timestamp, function details and log message.

LANGUAGE: json
CODE:
{
    "topic": "console"
    "timestamp": 1715879172882,
    "function": {
      "path": "messages:send",
      "request_id": "d064ef901f7ec0b7",
      "type": "mutation"
    },
    "log_level": "LOG",
    "message": "'Sent message!'"
}

----------------------------------------

TITLE: Creating a Svelte Project with create-svelte in Bash
DESCRIPTION: Commands to create a new Svelte project using create-svelte. It includes options for creating in the current directory or a new directory.

LANGUAGE: bash
CODE:
# create a new project in the current directory
npm create svelte@latest

# create a new project in my-app
npm create svelte@latest my-app

----------------------------------------

TITLE: Running Documentation Server for AI Chat
DESCRIPTION: Command to start the documentation server after setting up the CONVEX_URL environment variable.

LANGUAGE: bash
CODE:
just run-docs

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments, reads from the database, and returns documents. Includes argument validation and async database operations.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Deploying Convex Code with Just Command
DESCRIPTION: Command to deploy the Convex project code using the 'just' command runner and 'convex deploy'.

LANGUAGE: bash
CODE:
just convex deploy

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using npm, yarn, or pnpm. This allows developers to run the application locally for development and testing purposes.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function that modifies database data, including argument validation and database operations. Demonstrates inserting records and returning modified data.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Shows how to create a query function that accepts numeric and string arguments. The function demonstrates database querying and argument validation using Convex's query framework.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Configuring Vite for GitHub Pages Deployment
DESCRIPTION: Vite configuration setup for deploying a React application to GitHub Pages. Specifies build output directory and base URL path for the hosted application.

LANGUAGE: typescript
CODE:
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  build: {
    outDir: "docs",
  },
  base: "/some-repo-name/",
});

----------------------------------------

TITLE: Handling Mutation Arguments in Convex (JavaScript)
DESCRIPTION: This snippet shows how to access named arguments in a Convex mutation function using JavaScript. The argument values are accessible as fields of the second parameter of the handler function.

LANGUAGE: javascript
CODE:
export const myMutation = mutation({
  handler: async (ctx, args) => {
    // Use args.x and args.y here
  },
});

----------------------------------------

TITLE: Wrapping Mutations with Triggers in Convex
DESCRIPTION: Shows how to wrap mutation functions with triggers to ensure they are executed when the table changes. This is necessary for trigger functionality.

LANGUAGE: typescript
CODE:
mutationWithTriggers

----------------------------------------

TITLE: Installing Convex Fivetran Source Connector using Cargo
DESCRIPTION: Instructions for cloning the repository and building the Convex Fivetran source connector using Cargo. Requires Git and Cargo (preferably installed via rustup).

LANGUAGE: bash
CODE:
git clone https://github.com/get-convex/convex-backend.git
cd convex-backend
cargo build --release -p convex_fivetran_source

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers. The server can be started using npm, yarn, pnpm, or bun.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Implementing Convex Query Function with Arguments
DESCRIPTION: Demonstrates how to create a Convex query function that accepts two arguments (number and string) and retrieves data from the database. Includes argument validation and async database querying.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex with TypeScript
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments and retrieves data from the database. Shows argument validation and database querying patterns.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Subscribing to Convex Counter Updates in Rust
DESCRIPTION: Example of how to create a Convex client, subscribe to a 'getCounter' query, and print updates. This demonstrates the basic usage of the Convex Rust client for real-time data synchronization.

LANGUAGE: rust
CODE:
let mut client = ConvexClient::new(DEPLOYMENT_URL).await?;
let mut subscription = client.subscribe("getCounter", vec![]).await?;
while let Some(new_val) = subscription.next().await {
    println!("Counter updated to {new_val:?}");
}

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function implementation that accepts numeric and string arguments. Shows database querying and argument validation using Convex's query helper and value validators.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Configuring Custom Functions Directory in convex.json
DESCRIPTION: This snippet demonstrates how to specify a custom location for the Convex functions directory, which is useful for projects with specific directory structures like Create React App.

LANGUAGE: json
CODE:
{
  "functions": "src/convex/"
}

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. Shows database querying and argument validation using Convex's query builder.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Installing Convex Project Dependencies
DESCRIPTION: Instructions for installing project dependencies using npm instead of rush.json to simulate typical developer workflow.

LANGUAGE: Markdown
CODE:
npm install

----------------------------------------

TITLE: Using Convex Query Function in React Component (TypeScript)
DESCRIPTION: This snippet shows how to use a Convex query function in a React component. It demonstrates passing arguments to the query function using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Configuring Custom Scenario in JSON
DESCRIPTION: JSON configuration for a custom scenario in LoadGenerator, specifying the function name, type, and execution rate or benchmark threads.

LANGUAGE: json
CODE:
{
  "name": "your_new_workload",
  "scenarios": [
    {
      "name": "RunFunction",
      "path": "<your-new-module>:<your-function-name>",
      "fn_type": "mutation",
      "rate": 5
    }
  ]
}

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with typed arguments.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Installing Expo Dependencies
DESCRIPTION: Command to install all required npm dependencies for the Expo project

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Installing and Running Convex TypeScript App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex TypeScript example application

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Specifying Explicit External Packages in Convex
DESCRIPTION: JSON configuration in convex.json to explicitly specify certain packages as external for Node.js actions in Convex.

LANGUAGE: json
CODE:
{
  "node": {
    "externalPackages": ["aws-sdk", "sharp"]
  }
}

----------------------------------------

TITLE: Basic Query Definition in TypeScript
DESCRIPTION: Example of a basic query function that accepts arguments and reads from the database. Shows the standard structure of a Convex query function.

LANGUAGE: typescript
CODE:
// This function will be referred to as `api.myFunctions.myQuery`.
export const myQuery = query({
  handler: async (ctx, args) => {
    // Query implementation
  }
});

----------------------------------------

TITLE: Basic Query Definition in TypeScript
DESCRIPTION: Example of a basic query function that accepts arguments and reads from the database. Shows the standard structure of a Convex query function.

LANGUAGE: typescript
CODE:
// This function will be referred to as `api.myFunctions.myQuery`.
export const myQuery = query({
  handler: async (ctx, args) => {
    // Query implementation
  }
});

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional result returning. The function takes two string arguments and inserts a message into the database.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Configuring Environment Variables in Fly.toml
DESCRIPTION: TOML configuration for setting required environment variables in the Fly.io deployment configuration file.

LANGUAGE: toml
CODE:
[env]
TMPDIR = '/convex/data/tmp'
CONVEX_CLOUD_ORIGIN = '<fly-backend-url>'
CONVEX_SITE_ORIGIN = '<fly-backend-url>/http'

----------------------------------------

TITLE: Creating New Cargo Project - Shell Commands
DESCRIPTION: Shell commands to create a new Rust project using Cargo package manager

LANGUAGE: sh
CODE:
cargo new my_app
cd my_app

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and async database querying.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Installing and Running Convex Next.js Demo
DESCRIPTION: Commands to install dependencies and start the development server for the Convex and Next.js integration demo.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Configuring Server-Side Auth Provider Settings in Convex
DESCRIPTION: Server-side configuration file that specifies the authentication provider's domain and application ID settings.

LANGUAGE: javascript
CODE:
export default {
  providers: [
    {
      domain: "your.issuer.url.com",
      applicationID: "your-application-id",
    },
  ],
};

----------------------------------------

TITLE: Formatting Rust Code with cargo fmt
DESCRIPTION: Instructions for formatting Rust code in the Convex project using cargo fmt, which is part of the rustfmt tool.

LANGUAGE: markdown
CODE:
[cargo fmt](https://github.com/rust-lang/rustfmt)

----------------------------------------

TITLE: Local Environment Configuration
DESCRIPTION: Environment variables configuration for local development with self-hosted Convex backend.

LANGUAGE: sh
CODE:
CONVEX_SELF_HOSTED_URL='<fly-backend-url>'
CONVEX_SELF_HOSTED_ADMIN_KEY='<your-admin-key>'

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a query function that accepts numeric and string arguments. Shows how to define argument validators and implement a database query handler that returns documents.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Installing and Running Convex Pagination Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex pagination example app.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing Latest Convex Version
DESCRIPTION: Command to install the most recent version of Convex using npm.

LANGUAGE: sh
CODE:
npm install convex@latest

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Deploying Scenario-Runner Functions to Self-Hosted Convex Backend
DESCRIPTION: Shell command to push scenario-runner functions to a self-hosted Convex backend for testing purposes.

LANGUAGE: shell
CODE:
cd npm-packages/scenario-runner
npx convex deploy --admin-key=<your-admin-key> --url=<your-backend-url>

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the mutation result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that handles data modifications, accepts string arguments, and demonstrates database insertion with return values.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Setup of environment variables for connecting to a self-hosted Convex instance.

LANGUAGE: sh
CODE:
CONVEX_SELF_HOSTED_URL='http://127.0.0.1:3210'
CONVEX_SELF_HOSTED_ADMIN_KEY='<your admin key>'

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Setting up Root Route with Clerk Authentication
DESCRIPTION: Root route implementation that configures Clerk authentication with Convex, including token management and provider setup. Handles authentication state and token refresh.

LANGUAGE: tsx
CODE:
import { Outlet, createRootRoute } from "@tanstack/react-router";
import { useAuth, ClerkProvider } from "@clerk/clerk-react";
import { ConvexProviderWithClerk } from "convex/react-clerk";
import { ConvexReactClient } from "convex/react";
import { ConvexQueryClient } from "convex/convex";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export const rootRoute = createRootRoute({
  component: RootComponent,
  async beforeLoad({ context }) {
    const { getAuth, getToken } = await import("@clerk/clerk-react");
    const auth = await getAuth(getToken);
    const token = await auth.getToken({ template: "convex" });
    const userId = auth.userId;
    if (token) {
      ctx.context.convexQueryClient.serverHttpClient?.setAuth(token);
    }
    return { userId, token };
  },
});

function RootComponent() {
  const { userId, token } = rootRoute.useLoaderData();
  return (
    <ClerkProvider publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY!}>
      <ConvexProviderWithClerk client={convex}>
        <Outlet />
      </ConvexProviderWithClerk>
    </ClerkProvider>
  );
}

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Configuring Android Manifest for Internet Permission
DESCRIPTION: Adding internet permission to AndroidManifest.xml to allow network communication with Convex

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">
    <uses-permission android:name="android.permission.INTERNET"/>
    <application>
        <!-- ... existing application contents -->
    </application>
</manifest>

----------------------------------------

TITLE: Displaying LoadGenerator Usage Instructions in Shell
DESCRIPTION: Command to run LoadGenerator and display usage instructions from the root 'convex' directory.

LANGUAGE: shell
CODE:
cargo run -p load_generator --bin load-generator -- --help

----------------------------------------

TITLE: Running Convex CLI Commands
DESCRIPTION: Commands for installing Convex and running various CLI operations like pushing code and querying data.

LANGUAGE: bash
CODE:
npm install convex@latest
npx convex dev
npx convex --help  # see all available commands

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function for modifying database data with string arguments. Includes database insertion and return value handling.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Convex Mutation in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: React Hook for User Storage
DESCRIPTION: Custom React hook that handles user storage on login and maintains storage state.

LANGUAGE: typescript
CODE:
export default function useStoreUserEffect() {
  const [isLoading, setIsLoading] = useState(true);
  const identity = useAuth();
  const storeUser = useMutation(api.users.storeUser);

  useEffect(() => {
    async function createUser() {
      setIsLoading(true);
      await storeUser();
      setIsLoading(false);
    }

    if (identity) {
      createUser();
    } else {
      setIsLoading(false);
    }
  }, [identity, storeUser]);

  return {
    isLoading,
    userIdentity: identity,
  };
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates creating a mutation function that modifies the database. Shows argument validation and database insertion operations using Convex's mutation helper.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing a Query Function in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and database querying.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Installing and Running Convex HTTP Action Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex HTTP action example app.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Initializing Convex Development Environment - Shell Commands
DESCRIPTION: Command to start the Convex development environment and create necessary project structure.

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Installing Convex Rust Client with Cargo
DESCRIPTION: Add the Convex dependency to your Cargo.toml file to install the Rust client for Convex.

LANGUAGE: toml
CODE:
[dependencies]
convex = "*"

----------------------------------------

TITLE: Demonstrating Deprecated Convex Query Syntax in JavaScript
DESCRIPTION: This code snippet illustrates the use of the older `useQuery('listMessages')` syntax in Convex. It serves as a compatibility check to ensure that this syntax still works, even though it lacks TypeScript type support.

LANGUAGE: JavaScript
CODE:
useQuery('listMessages')

----------------------------------------

TITLE: Configuring Convex React Client for Next.js
DESCRIPTION: This code snippet shows how to configure the Convex React client specifically for Next.js projects. It uses the Next.js-specific environment variable naming convention and access method.

LANGUAGE: jsx
CODE:
import { ConvexProvider, ConvexReactClient } from "convex/react";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL);

----------------------------------------

TITLE: Using Convex Mutation in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook. Includes examples of both fire-and-forget and promise-based usage patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Installing Dependencies and Running the App with npm
DESCRIPTION: These commands install the necessary dependencies and start the development server for the GIPHY Action Example App.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Running Node.js Script - Shell Commands
DESCRIPTION: Command to execute the Node.js script that interacts with Convex.

LANGUAGE: sh
CODE:
node script.js

----------------------------------------

TITLE: Database Configuration for Postgres
DESCRIPTION: Commands for setting up and connecting to a Postgres database for Convex backend storage.

LANGUAGE: sh
CODE:
export DATABASE_CONNECTION='<connection string>'
psql $DATABASE_CONNECTION -c "CREATE DATABASE convex_self_hosted"
export POSTGRES_URL=$(echo $DATABASE_CONNECTION | sed -E 's/\/[^/]+(\?.*)?$//')

----------------------------------------

TITLE: Running Convex Chat Application
DESCRIPTION: Command to start the development server for the chat application. Requires npm and project dependencies to be installed.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. Shows database querying and argument validation using Convex's query API.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and async database querying.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Installing and Running the Dall-E Storage & Action Example App
DESCRIPTION: These commands install the necessary dependencies and start the development server for the example app.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Implementing Tasks Composable UI
DESCRIPTION: Creating a Jetpack Compose UI component that displays tasks from Convex and updates in real-time

LANGUAGE: kotlin
CODE:
@Composable
fun Tasks(client: ConvexClient, modifier: Modifier = Modifier) {
    var tasks: List<Task> by remember { mutableStateOf(listOf()) }
    LaunchedEffect(key1 = "launch") {
        client.subscribe<List<Task>>("tasks:get").collect { result ->
            result.onSuccess { remoteTasks ->
                tasks = remoteTasks
            }
        }
    }
    LazyColumn(
        modifier = modifier
    ) {
        items(tasks) { task ->
            Text(text = "Text: ${task.text}, Completed?: ${task.isCompleted}")
        }
    }
}

----------------------------------------

TITLE: Implementing Convex Mutation Function in TypeScript
DESCRIPTION: Demonstrates how to create a mutation function in Convex that modifies the database. Includes argument validation and database operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using a Mutation Function in React with Convex
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Starting the React Native Expo App
DESCRIPTION: Launches the React Native app using Expo's development server.

LANGUAGE: sh
CODE:
npm start

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a Convex query function that accepts numeric and string arguments. The function includes argument validation and shows database querying patterns.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();
    console.log(args.first, args.second);
    return documents;
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It shows argument validation and function implementation.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Installing and Running Convex Crons Example
DESCRIPTION: Commands to install dependencies and start the development server for the Convex crons example application.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Implementing ConvexClientProvider in Next.js Layout (TypeScript)
DESCRIPTION: TypeScript code showing how to wrap the Next.js app with the ConvexClientProvider in the layout file.

LANGUAGE: typescript
CODE:
import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import ConvexClientProvider from "./ConvexClientProvider";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ConvexClientProvider>{children}</ConvexClientProvider>
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Shows how to create a query function that accepts numeric and string arguments. The function demonstrates database querying and argument validation using Convex's query API.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Pulling Environment Configuration for Convex Dashboard
DESCRIPTION: This command pulls the environment configuration from Vercel for the Convex dashboard project.

LANGUAGE: bash
CODE:
npm run pullEnv

----------------------------------------

TITLE: Using Convex Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Configuring Package.json for Convex Tarball Testing
DESCRIPTION: Configuration setting in package.json to enable testing using the convex tarball by setting the 'injected' flag to true.

LANGUAGE: json
CODE:
{
  "injected": true
}

----------------------------------------

TITLE: Installing Convex Package
DESCRIPTION: Command to build the Convex package for distribution, removing internal types.

LANGUAGE: bash
CODE:
npm pack

----------------------------------------

TITLE: Implementing ConvexClientProvider in Next.js Layout (JavaScript)
DESCRIPTION: JavaScript code showing how to wrap the Next.js app with the ConvexClientProvider in the layout file.

LANGUAGE: javascript
CODE:
import "./globals.css";
import { Inter } from "next/font/google";
import ConvexClientProvider from "./ConvexClientProvider";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ConvexClientProvider>{children}</ConvexClientProvider>
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Defining Link Structure in Go for Convex Database
DESCRIPTION: Defines a Link struct to represent short links in the Convex database. It includes fields for short code, long URL, creation time, last edit time, and owner.

LANGUAGE: Go
CODE:
type Link struct {
	Short    string // the "foo" part of http://go/foo
	Long     string // the target URL or text/template pattern to run
	Created  time.Time
	LastEdit time.Time // when the link was last edited
	Owner    string    // user@domain
}

----------------------------------------

TITLE: Displaying Convex Data in Next.js Page
DESCRIPTION: JSX code for the index.js file, using the useQuery hook to fetch and display tasks from the Convex backend in a Next.js page component.

LANGUAGE: jsx
CODE:
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export default function Home() {
  const tasks = useQuery(api.tasks.get);
  return (
    <main>
      <h1>My Tasks</h1>
      {tasks?.map(({ _id, text }) => (
        <li key={_id}>{text}</li>
      ))}
    </main>
  );
}

----------------------------------------

TITLE: Commented TypeScript Code for Config Processing
DESCRIPTION: Commented-out TypeScript code snippet for processing local configuration, noting that bundling occurs inadvertently.

LANGUAGE: typescript
CODE:
// Note that it bundles!!! That's a step we don't need.
const { config: localConfig } = await configFromProjectConfig(

----------------------------------------

TITLE: Deprecated Direct Function Call Example in TypeScript
DESCRIPTION: Example showing the deprecated pattern of directly calling Convex functions, which now triggers a warning. This pattern breaks validation and transaction isolation.

LANGUAGE: typescript
CODE:
export const foo = mutation(...);

export const bar = mutation({
  args: v.any(),
  returns: v.any(),
  handler: (ctx, args) => {
    const result = await foo();
  })
}

----------------------------------------

TITLE: Configuring Gradle Dependencies for Convex
DESCRIPTION: Adding required dependencies and plugins to build.gradle.kts for Convex integration

LANGUAGE: kotlin
CODE:
plugins {
    // ... existing plugins
    kotlin("plugin.serialization") version "1.9.0"
}

dependencies {
    // ... existing dependencies
    implementation("dev.convex:android-convexmobile:0.4.1@aar") {
        isTransitive = true
    }
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3")
}

----------------------------------------

TITLE: Using a Mutation Function in a React Component (TypeScript)
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based approaches to handling the mutation result.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Filtering Query with Index in Convex
DESCRIPTION: Demonstrates how to use a defined index to filter messages by channel in a query.

LANGUAGE: typescript
CODE:
const messages = await ctx.db
  .query("messages")
  .withIndex("by_channel", (q) => q.eq("channel", channel))
  .collect();

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: TypeScript Client Database Types in React
DESCRIPTION: Example of using TypeScript types in React client code for handling database documents and IDs.

LANGUAGE: typescript
CODE:
<Snippet title="src/App.tsx" source={ClientDatabaseTypes} />

----------------------------------------

TITLE: Running Convex Backend for AI Chat Development
DESCRIPTION: Command to start the Convex backend in development mode. It uses a specific team and project configuration for AI bot development.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Installing Convex Package
DESCRIPTION: Adds the Convex package to the Bun project using Bun package manager

LANGUAGE: sh
CODE:
bun add convex

----------------------------------------

TITLE: Using a Query Function in a React Component (TypeScript)
DESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string parameters. Shows database querying and argument validation using Convex's query helper and value validators.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Shows how to consume a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Resetting Big Brain Database for Convex Dashboard
DESCRIPTION: This command cleans the Big Brain database, resetting it to an empty state with no login information.

LANGUAGE: bash
CODE:
just bb-clean-db

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a mutation function that writes data to the database. Shows argument validation and database operations within a Convex mutation context.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Running Convex Backend on AWS Lambda in Wasteland Testing Account
DESCRIPTION: Command to run the Convex backend on AWS Lambda in the wasteland testing account using the 'just' command runner.

LANGUAGE: bash
CODE:
just run-backend-aws-wasteland

----------------------------------------

TITLE: Using Convex Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Importing Generated Protobuf Structs in Rust
DESCRIPTION: Example showing how to import and use automatically generated protobuf message structs in Rust code. The pb module contains generated structures matching the protobuf message definitions.

LANGUAGE: rust
CODE:
use pb::foo::Bar;

----------------------------------------

TITLE: Running the Dashboard
DESCRIPTION: Command to start the dashboard with a specified deployment URL using Just task runner.

LANGUAGE: bash
CODE:
just run-dashboard "YOUR_DEPLOYMENT_URL"

----------------------------------------

TITLE: Using a Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Running Convex Functions with Just Command
DESCRIPTION: Command to run Convex functions using the 'just' command runner and 'convex run'.

LANGUAGE: bash
CODE:
just convex run

----------------------------------------

TITLE: Data Flow Diagram - Convex Value Serialization
DESCRIPTION: ASCII diagram showing the complete flow of argument and return value serialization between Browser, Rust, and V8 layers in Convex. Illustrates how values are transformed using JSON serialization/deserialization and custom Convex serializers at each boundary.

LANGUAGE: ascii-diagram
CODE:
                             Arguments                     Return value

                       ┌───────────────────┐           ┌───────────────────┐
                       │ Convex Value (JS) │           │ Convex Value (JS) │
                       └───────────────────┘           └───────────────────┘
                                 │                               ▲
                          convexReplacer                         │
                                 │                         convexReviver
 Browser                         ▼                               │
                   ┌──────────────────────────┐    ┌──────────────────────────┐
                   │ JSON-serializable object │    │ JSON-serializable object │
                   └──────────────────────────┘    └──────────────────────────┘
                                 │                               ▲
                          JSON.serialize                         │
                                 │                          JSON.parse
                                 ▼                               │
                          ┌─────────────┐                 ┌─────────────┐
─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤   String    ├ ─ ─ ─ ─ ─ ─ ─ ─ ┤   String    ├ ─ ─ ─ ─ ─ ─ ─ ─ ─
                          └─────────────┘                 └─────────────┘
                                 │                               ▲
                        serde::Deserialize                       │
                                 │                       serde::Serialize
                                 ▼                               │
                     ┌──────────────────────┐        ┌──────────────────────┐
 Rust                │ Convex Value (Rust)  │        │ Convex Value (Rust)  │
                     └──────────────────────┘        └──────────────────────┘
                                 │                               ▲
                         serde::Serialize                        │
                                 │                      serde::Deserialize
                                 ▼                               │
                        ┌────────────────┐              ┌────────────────┐
─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤     String     │─ ─ ─ ─ ─ ─ ─ ┤     String     │─ ─ ─ ─ ─ ─ ─ ─ ─
                        └────────────────┘              └────────────────┘
                                 │                               ▲
                            JSON.parse                           │
                                 │                        JSON.serialize
                                 ▼                               │
                   ┌──────────────────────────┐    ┌──────────────────────────┐
                   │ JSON-serializable object │    │ JSON-serializable object │
                   └──────────────────────────┘    └──────────────────────────┘
                                 │                               ▲
                           convexReviver                         │
 V8                              │                        convexReplacer
                                 ▼                               │
                       ┌───────────────────┐           ┌───────────────────┐
                       │ Convex Value (JS) │           │ Convex Value (JS) │
                       └───────────────────┘           └───────────────────┘
                                 │                               ▲
                                 │                               │
                                 │    ┌─────────────────────┐    │
                                 │    │                     │    │
                                 └───▶│    User UDF code    │────┘
                                      │                     │
                                      └─────────────────────┘

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function shows database querying with validation and argument handling.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a mutation function in Convex that takes two arguments. It includes argument validation and database insertion.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Starting the Convex Fivetran Source Connector with Custom Port
DESCRIPTION: Command to start the Convex Fivetran source connector on a custom port (1337) using the --port parameter.

LANGUAGE: bash
CODE:
$ ./convex_fivetran_source --port 1337
Starting the connector on [::]:1337

----------------------------------------

TITLE: Running Production Server
DESCRIPTION: Command to start the Remix application in production mode after building.

LANGUAGE: sh
CODE:
npm start

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: Illustrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Running Integration Tests with Just Commands
DESCRIPTION: Commands for executing individual test files using the 'just' command runner. Tests must have .test.ts or .test.tsx extensions. Includes options for regular testing and conductor-debug mode.

LANGUAGE: sh
CODE:
just test someFile.test.ts
just _test conductor-debug someFile.test.ts

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use the previously defined Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Starting the Convex Fivetran Destination Connector with Custom Port
DESCRIPTION: Command to start the Fivetran destination connector binary with a custom port (1337 in this example) using the --port parameter.

LANGUAGE: bash
CODE:
$ ./convex_fivetran_destination --port 1337
{"level":"INFO","message":"Starting the destination on 0.0.0.0:1337","message-origin":"sdk_destination"}

----------------------------------------

TITLE: Configuring Environment Variables for Convex Chat with File Storage
DESCRIPTION: Example of setting the VITE_CONVEX_SITE_URL environment variable in the .env.local file. This variable is crucial for the file storage functionality to work correctly.

LANGUAGE: bash
CODE:
VITE_CONVEX_URL="https://happy-animal-123.convex.cloud"
VITE_CONVEX_SITE_URL="https://happy-animal-123.convex.site"

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure of a query function including argument validation and database interaction.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Importing QuickstartsList Component in React/TSX
DESCRIPTION: Imports and renders a QuickstartsList component to display available quickstart guides for different frontend frameworks and languages

LANGUAGE: tsx
CODE:
import { QuickstartsList } from "@site/src/QuickstartsList.tsx";

<QuickstartsList />

----------------------------------------

TITLE: Importing QuickstartsList Component in React/TSX
DESCRIPTION: Imports and renders a QuickstartsList component to display available quickstart guides for different frontend frameworks and languages

LANGUAGE: tsx
CODE:
import { QuickstartsList } from "@site/src/QuickstartsList.tsx";

<QuickstartsList />

----------------------------------------

TITLE: Using Convex Query in React Component
DESCRIPTION: Example of using a Convex query function in a React component with the useQuery hook.

LANGUAGE: typescript
CODE:
import { useQuery } from "convex/react";
import { api } from "../convex/_generated/api";

export function App() {
  const data = useQuery(api.tasks.getTaskList);
  return data ?? "Loading...";
}

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Starting the Convex Fivetran Destination Connector
DESCRIPTION: Command to start the Fivetran destination connector binary. It will start the connector on the default port 50052.

LANGUAGE: bash
CODE:
$ ./convex_fivetran_destination
{"level":"INFO","message":"Starting the destination on 0.0.0.0:50052","message-origin":"sdk_destination"}

----------------------------------------

TITLE: Auth0 Environment Configuration
DESCRIPTION: Environment variables configuration for Auth0 authentication setup, including domain and client ID.

LANGUAGE: plaintext
CODE:
NEXT_PUBLIC_AUTH0_DOMAIN = "<your domain>.us.auth0.com"
NEXT_PUBLIC_AUTH0_CLIENT_ID = "<your client id>"

----------------------------------------

TITLE: Readme Documentation for NPM Module Support
DESCRIPTION: Markdown documentation explaining the purpose of the project, which is to demonstrate NPM module support and integration within Convex Node actions.

LANGUAGE: markdown
CODE:
# NPM Showcase

This demonstrates NPM modules that we can support and a small demo of their
support in Node actions.

----------------------------------------

TITLE: Starting Convex Development Environment
DESCRIPTION: Command to create a Convex project and start the backend development loop.

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Implementing Query Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and logging.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Initializing Debug Logging for Convex Rust Client
DESCRIPTION: Set up debug logging for the Convex Rust client using the tracing crate and tracing_subscriber. This allows viewing debug logs by running the program with RUST_LOG=convex=debug.

LANGUAGE: rust
CODE:
tracing_subscriber::fmt()
    .with_env_filter(tracing_subscriber::EnvFilter::from_default_env())
    .init();

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Commands to install dependencies and start the Next.js development server.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a query function implementation that takes numeric and string arguments. Shows how to define argument validators and access the database within the handler function.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Importing Sample Data to Convex
DESCRIPTION: Command to import sample data into the Convex tasks table.

LANGUAGE: bash
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a Convex mutation function that accepts two string parameters and modifies the database. Shows argument validation and database operations.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Running Tests for Convex Crates
DESCRIPTION: Command to run tests for specific Convex crates using Cargo. Replace {crate} with the specific crate name you want to test.

LANGUAGE: shell
CODE:
cargo test -p {crate}

----------------------------------------

TITLE: Installing Convex Package
DESCRIPTION: Command to install the Convex package as a project dependency.

LANGUAGE: bash
CODE:
npm install convex

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to consume a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Importing Sample Data to Convex Database
DESCRIPTION: Command to import sample data into the Convex database 'tasks' table.

LANGUAGE: bash
CODE:
npx convex import --table tasks sampleData.jsonl

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a Convex query function that accepts numeric and string arguments, demonstrates database querying, and includes argument validation. Shows how to read from the database and process results.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Running Local Convex Backend (Bash)
DESCRIPTION: Command to build and run the local Convex backend from source code using the 'just' command runner.

LANGUAGE: bash
CODE:
just run-local-backend

----------------------------------------

TITLE: Installing and Running Convex Demo App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex system tables example application.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing Convex with npm
DESCRIPTION: Command to install the Convex npm package in your project.

LANGUAGE: sh
CODE:
npm i convex

----------------------------------------

TITLE: Starting Convex Development Server
DESCRIPTION: Command to start a local Convex development deployment.

LANGUAGE: bash
CODE:
npx convex dev

----------------------------------------

TITLE: Implementing Convex Mutation Function in TypeScript
DESCRIPTION: Example of a mutation function that takes two string arguments and modifies the database. Shows how to insert data and return the modified record.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Demonstrates creating a mutation function that modifies the database. Shows proper argument validation and database insertion operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Running Client Tests in convex-js
DESCRIPTION: Command to execute the client-side test suite for the convex-js project. Note that this command only runs local tests, while additional integration tests, end-to-end tests, and proptests exist in separate repositories.

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex that inserts data into the database. It includes argument validation and demonstrates how to return the inserted data.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Setting Up Convex Development Environment
DESCRIPTION: Initialize Convex development deployment and create project structure

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Using Convex Query in React
DESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Function Execution Record Example in JSON
DESCRIPTION: Example of a function execution record for an HTTP action, demonstrating failure case with error message and execution metrics.

LANGUAGE: json
CODE:
{
  "_topic": "_execution_record",
  "_timestamp": 1695066350531,
  "_functionType": "httpAction",
  "_functionPath": "POST /sendImage",
  "status": "failure",
  "reason": "Unexpected Error: Some error message\n\n  at ....",
  "executionTimeMs": 73
}

----------------------------------------

TITLE: Installing and Running Convex Next.js Demo
DESCRIPTION: Commands to install dependencies and start the development server for the Convex and Next.js integration demo.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Using Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Defining a Mutation Function in Convex
DESCRIPTION: This snippet illustrates how to define a mutation function in Convex. It includes argument validation, database insertion, and optional return value. The function takes two string arguments and inserts a message into the database.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Installing Convex Dependencies
DESCRIPTION: Install the Convex client and server library via npm

LANGUAGE: sh
CODE:
npm install convex

----------------------------------------

TITLE: Formatting Markdown Files with Prettier
DESCRIPTION: Instructions for formatting Markdown files in the Convex project using Prettier, an opinionated code formatter.

LANGUAGE: markdown
CODE:
[prettier](https://prettier.io/)

----------------------------------------

TITLE: Running Convex Tour Chat Application
DESCRIPTION: Commands to install dependencies and start the development server for the Convex Tour Chat application.

LANGUAGE: Shell
CODE:
$ npm i
$ npm run dev

----------------------------------------

TITLE: Updating Session Data in TypeScript
DESCRIPTION: This code demonstrates how to update session data in the database, allowing you to store custom data for each session.

LANGUAGE: typescript
CODE:
db.patch(session._id, { userId });

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function that modifies data in the database. Includes argument validation and demonstrates database operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Starting the Development Server
DESCRIPTION: Command to start the Remix development server.

LANGUAGE: shell
CODE:
npm run dev

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Installing Dependencies and Building Project
DESCRIPTION: Commands for installing project dependencies and building the dashboard project using Just task runner and Rush.

LANGUAGE: bash
CODE:
# Install dependencies
just rush install

# Build the project's dependencies
just rush build -T dashboard-self-hosted

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with typed arguments.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Starting the React App
DESCRIPTION: Command to start the React application in development mode.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Demonstrates how to use the Convex mutation function in a React component using the useMutation hook, showing both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Running the Convex Tour Chat Application
DESCRIPTION: Instructions for installing dependencies and starting the development server for the Convex Tour Chat sample app.

LANGUAGE: bash
CODE:
$ npm i
$ npm run dev

----------------------------------------

TITLE: Illustrating Convex Database Architecture with ASCII Diagram
DESCRIPTION: This ASCII diagram provides a visual representation of the Convex database architecture, focusing on the SnapshotManager and its components. It shows the hierarchical structure of Snapshots, DatabaseIndex, DatabaseTableMetadata, and various other elements that make up the system.

LANGUAGE: text
CODE:

                                              ┌───────────────────────────┐
                                              │                           │
                                              │                           │
                                              │         Database          │
                                              │                           │
                                              │                           │
                                              └───────────────────────────┘
                                                            │
                                                            │
                                                            │
                                                            │
                                                            ▼
┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│SnapshotManager                                                                                                        │
│                                                           .                                                           │
│                                                           .                                                           │
│                                                           .                                                           │
│                                                                                                                       │
│ ┌───────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │   Timestamp   │                                             Snapshot                                              │ │
│ └───────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│ ┌───────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │   Timestamp   │                                             Snapshot                                              │ │
│ └───────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│ ┌───────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │               │Snapshot◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟┌──────────────────────────────────────────────────┐◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│DatabaseIndex                                     │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ ┌──────────────────────────────────────────────┐ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │DatabaseIndexMetadata                         │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ ┌──────────────────────────────────────────┐ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │indexes: OrdMap                           │ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │ ┌────────────┬─────────────────────────┐ │ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │ │            │Index                    │ │ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │ │            │  ┌────────────────────┐ │ │ │ │◟◟│ │
│ │               │◟◟┌───────────────────────────────────────┐◟◟│ │ │ │            │  │      IndexId       │ │ │ │ │◟◟│ │
│ │               │◟◟│DatabaseTableMetadata                  │◟◟│ │ │ │            │  └────────────────────┘ │ │ │ │◟◟│ │
│ │               │◟◟│ ┌───────────────────────────────────┐ │◟◟│ │ │ │            │  ┌────────────────────┐ │ │ │ │◟◟│ │
│ │               │◟◟│ │tables: OrdMap                     │ │◟◟│ │ │ │            │  │IndexMetadata       │ │ │ │ │◟◟│ │
│ │               │◟◟│ │ ┌───────────┬───────────────────┐ │ │◟◟│ │ │ │            │  │ ┌────────────────┐ │ │ │ │ │◟◟│ │
│ │               │◟◟│ │ │           │TableSummary       │ │ │◟◟│ │ │ │ IndexName  │  │ │   IndexName    │ │ │ │ │ │◟◟│ │
│ │               │◟◟│ │ │           │ ┌───────────────┐ │ │ │◟◟│ │ │ │            │  │ └────────────────┘ │ │ │ │ │◟◟│ │
│ │               │◟◟│ │ │           │ │     Shape     │ │ │ │◟◟│ │ │ │            │  │ ┌────────────────┐ │ │ │ │ │◟◟│ │
│ │               │◟◟│ │ │ TableName │ └───────────────┘ │ │ │◟◟│ │ │ │            │  │ │ IndexedFields  │ │ │ │ │ │◟◟│ │
│ │               │◟◟│ │ │           │ ┌───────────────┐ │ │ │◟◟│ │ │ │            │  │ └────────────────┘ │ │ │ │ │◟◟│ │
│ │               │◟◟│ │ │           │ │  total_size   │ │ │ │◟◟│ │ │ │            │  │ ┌────────────────┐ │ │ │ │ │◟◟│ │
│ │               │◟◟│ │ │           │ └───────────────┘ │ │ │◟◟│ │ │ │            │  │ │   IndexState   │ │ │ │ │ │◟◟│ │
│ │               │◟◟│ │ └───────────┴───────────────────┘ │ │◟◟│ │ │ │            │  │ └────────────────┘ │ │ │ │ │◟◟│ │
│ │   Timestamp   │◟◟│ └───────────────────────────────────┘ │◟◟│ │ │ │            │  └────────────────────┘ │ │ │ │◟◟│ │
│ │               │◟◟│ ┌───────────────────────────────────┐ │◟◟│ │ │ └────────────┴─────────────────────────┘ │ │ │◟◟│ │
│ │               │◟◟│ │           num_documents           │ │◟◟│ │ └──────────────────────────────────────────┘ │ │◟◟│ │
│ │               │◟◟│ └───────────────────────────────────┘ │◟◟│ │ ┌──────────────────────────────────────────┐ │ │◟◟│ │
│ │               │◟◟│ ┌───────────────────────────────────┐ │◟◟│ │ │             indexes_by_table             │ │ │◟◟│ │
│ │               │◟◟│ │             user_size             │ │◟◟│ │ └──────────────────────────────────────────┘ │ │◟◟│ │
│ │               │◟◟│ └───────────────────────────────────┘ │◟◟│ │ ┌──────────────────────────────────────────┐ │ │◟◟│ │
│ │               │◟◟│ ┌───────────────────────────────────┐ │◟◟│ │ │             num_user_indexes             │ │ │◟◟│ │
│ │               │◟◟│ │            system_size            │ │◟◟│ │ └──────────────────────────────────────────┘ │ │◟◟│ │
│ │               │◟◟│ └───────────────────────────────────┘ │◟◟│ └──────────────────────────────────────────────┘ │◟◟│ │
│ │               │◟◟└───────────────────────────────────────┘◟◟│ ┌──────────────────────────────────────────────┐ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │in_memory_indexes: OrdMap                     │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ ┌─────────┬────────────────────────────────┐ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │IndexMap: OrdMap                │ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │ ┌───────────┬────────────────┐ │ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │ │           │   Timestamp    │ │ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │ IndexId │ │  Vec<u8>  ├────────────────┤ │ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │ │           │ PackedDocument │ │ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │ └───────────┴────────────────┘ │ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ │         │                                │ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │ └─────────┴────────────────────────────────┘ │ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ └──────────────────────────────────────────────┘ │◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟└──────────────────────────────────────────────────┘◟◟│ │
│ │               │◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟◟│ │
│ └───────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│ ┌───────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │   Timestamp   │                                             Snapshot                                              │ │
│ └───────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│ ┌───────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │   Timestamp   │                                             Snapshot                                              │ │
│ └───────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│                                                                                                                       │
│                                                           .                                                           │
│                                                           .                                                           │
│                                                           .                                                           │
│                                                                                                                       │
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘


----------------------------------------

TITLE: Using Convex Mutation Function in React Component (TypeScript)
DESCRIPTION: Illustrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Creating React Native App with Expo CLI
DESCRIPTION: Initializes a new React Native project using Expo's CLI tool.

LANGUAGE: sh
CODE:
npx create-expo-app my-app

----------------------------------------

TITLE: Using useQuery Hook with Arguments in React
DESCRIPTION: Shows how to pass arguments to a Convex query using the useQuery hook in a React component.

LANGUAGE: tsx
CODE:
export function App() {
  const a = "Hello world";
  const b = 4;
  const data = useQuery(api.functions.myQuery, { a, b });
  //...
}

----------------------------------------

TITLE: Running Convex Tour Chat Application
DESCRIPTION: Instructions for installing dependencies and starting the development server for the Convex Tour Chat application.

LANGUAGE: bash
CODE:
$ npm i
$ npm run dev

----------------------------------------

TITLE: ConvexError Data Payload Examples
DESCRIPTION: Examples of throwing ConvexError with different data payload types including strings and structured objects

LANGUAGE: typescript
CODE:
// error.data === "My fancy error message"
throw new ConvexError("My fancy error message");

// error.data === {message: "My fancy error message", code: 123, severity: "high"}
throw new ConvexError({
  message: "My fancy error message",
  code: 123,
  severity: "high",
});

// error.data === {code: 123, severity: "high"}
throw new ConvexError({
  code: 123,
  severity: "high",
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex (TypeScript)
DESCRIPTION: Demonstrates how to create a mutation function in Convex that takes two arguments. It shows the structure including argument validation, database insertion, and optional return value.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Table Clearing Command
DESCRIPTION: Command to efficiently clear a table using an empty file import

LANGUAGE: sh
CODE:
touch empty_file.jsonl
npx convex import --replace --table <tableNameToClear> empty_file.jsonl

----------------------------------------

TITLE: Building WASM Tests with TinyGo for V8 Runtime
DESCRIPTION: This snippet shows the commands to update dependencies and build the WASM tests. It requires TinyGo version 0.33.0 to be installed. The build process involves running 'go mod tidy' to ensure all dependencies are up to date, followed by executing a Python build script.

LANGUAGE: bash
CODE:
go mod tidy
python build.py

----------------------------------------

TITLE: Using Mutation Function in React Component (TypeScript)
DESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the mutation result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Invalid Environment Variable Usage Example
DESCRIPTION: Example showing incorrect way to use environment variables for conditional function exports, which will cause runtime errors.

LANGUAGE: javascript
CODE:
// THIS WILL NOT WORK!
export const myFunc = process.env.DEBUG ? mutation(...) : internalMutation(...);

----------------------------------------

TITLE: Installing and Running Convex Search Example App
DESCRIPTION: Commands to install dependencies and start the development server for the Convex search example app.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Preview Deployment Seeding Script
DESCRIPTION: Script for seeding preview deployments with sample data in a Vercel environment

LANGUAGE: sh
CODE:
npx convex deploy --cmd 'npm run build' &&
if [ "$VERCEL_ENV" == "preview" ]; then
npx convex import --preview-name "$VERCEL_GIT_COMMIT_REF" seed_data.zip;
fi

----------------------------------------

TITLE: Building Convex Dashboard Docker Image
DESCRIPTION: Command to build the Docker image for Convex dashboard from scratch using the Dockerfile.dashboard configuration.

LANGUAGE: sh
CODE:
docker build -t convex-dashboard -f self-hosted/docker-build/Dockerfile.dashboard .

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Defining a Public Action in Convex (TypeScript)
DESCRIPTION: This function defines an action in the Convex app's public API. Actions can execute any JavaScript code, including non-deterministic code and code with side-effects.

LANGUAGE: typescript
CODE:
action(func): RegisteredAction

----------------------------------------

TITLE: Calling Convex HTTP Action Endpoints with curl
DESCRIPTION: Examples of how to call the HTTP action endpoints using curl. It demonstrates setting an environment variable for the deployment name and making GET and POST requests to specific endpoints.

LANGUAGE: bash
CODE:
export DEPLOYMENT_NAME="tall-sheep-123"
curl "https://$DEPLOYMENT_NAME.convex.site/getMessagesByAuthor?authorNumber=123"
curl -d '{ "author": "User 123", "body": "Hello world" }' \
    -H 'content-type: application/json' "https://$DEPLOYMENT_NAME.convex.site/postMessage"

----------------------------------------

TITLE: Production Backup Restore Command
DESCRIPTION: Command to programmatically restore a production deployment from a backup file

LANGUAGE: sh
CODE:
npx convex import --prod --replace backup.zip

----------------------------------------

TITLE: Opening Convex Dashboard
DESCRIPTION: Command to open the Convex dashboard in the default web browser.

LANGUAGE: sh
CODE:
npx convex dashboard

----------------------------------------

TITLE: Audit Trail Log Example in JSON
DESCRIPTION: Example of an audit log event for a push_config action, showing changes in module configuration.

LANGUAGE: json
CODE:
{
  "_topic": "_audit_log",
  "_timestamp": 1695066350531,
  "action": "push_config",
  "actionMetadata": {
    "modules": {
      "added": ["ffmpeg.js", "fetch.js", "test.js"],
      "removed": ["removed.js"]
    }
  }
}

----------------------------------------

TITLE: Implementing Convex Mutation Function in TypeScript
DESCRIPTION: Shows implementation of a mutation function that accepts string arguments and performs database operations. Includes validation and demonstrates inserting data and returning results.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Webhook Endpoint Implementation
DESCRIPTION: HTTP endpoint implementation for handling Clerk webhook events for user management.

LANGUAGE: typescript
CODE:
export default function clerkWebhook(
  ctx: ActionCtx,
  request: Request
): Promise<Response> {
  const signature = request.headers.get("svix-signature");
  if (!signature) {
    return new Response("No signature", { status: 400 });
  }
  const payload = await request.json();
  const result = ctx.runMutation(api.users.upsertFromClerk, payload);
  return new Response(JSON.stringify(result));
}

----------------------------------------

TITLE: Getting Current UTC Timestamp in Convex Function
DESCRIPTION: Demonstrates how to get the current UTC timestamp in milliseconds for storing in a Convex document.

LANGUAGE: javascript
CODE:
Date.now()

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of creating a mutation function that writes data to the database. Includes argument validation and demonstrates database insertion operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of creating a mutation function that writes data to the database. Includes argument validation and demonstrates database insertion operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of creating a mutation function that writes data to the database. Includes argument validation and demonstrates database insertion operations.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using Convex Query Function in React Component (TypeScript)
DESCRIPTION: Shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Starting Convex Development Server
DESCRIPTION: Command to start the Convex development server to register components

LANGUAGE: bash
CODE:
npx convex dev

----------------------------------------

TITLE: Example JSON Response from Scheduled Function Status
DESCRIPTION: Shows the structure of a document returned when querying a scheduled function's status from the _scheduled_functions system table.

LANGUAGE: json
CODE:
{
  "_creationTime": 1699931054642.111,
  "_id": "3ep33196167235462543626ss0scq09aj4gqn9kdxrdr",
  "args": [{}],
  "completedTime": 1699931054690.366,
  "name": "messages.js:destruct",
  "scheduledTime": 1699931054657,
  "state": { "kind": "success" }
}

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. Shows database querying and argument validation using Convex's query API.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: Demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget usage and handling the mutation result.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Example of a mutation function that takes two string arguments and demonstrates database writing operations. Shows how to insert data and return the modified record.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Initializing Convex Development Environment
DESCRIPTION: Set up a Convex development deployment and create initial project structure

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Creating Sample Data Structure
DESCRIPTION: Sample JSONL data file containing task information for the database

LANGUAGE: csv
CODE:
{"text": "Buy groceries", "isCompleted": true}
{"text": "Go for a swim", "isCompleted": true}
{"text": "Integrate Convex", "isCompleted": false}

----------------------------------------

TITLE: Defining a Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure including argument validation and function implementation with database querying.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Defining a Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure including argument validation and function implementation with database querying.

LANGUAGE: typescript
CODE:
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Commented TypeScript Code for Node.js Bundles
DESCRIPTION: Commented-out TypeScript code snippet for handling Node.js bundles in the Convex component system.

LANGUAGE: typescript
CODE:
// TODO Node compilation (how will Lambdas even work?)
const _nodeResult = {
  bundles: [],
  externalDependencies: new Map(),
  bundledModuleNames: new Set(),
};

----------------------------------------

TITLE: Listing Files in Railway SSH Session
DESCRIPTION: Commands to list files in the Railway SSH session, used to verify the presence of the data folder and generate an admin key.

LANGUAGE: bash
CODE:
railway ssh
ls

----------------------------------------

TITLE: Setting Up Convex Dev Deployment
DESCRIPTION: Command to initialize Convex development deployment and create necessary project structure.

LANGUAGE: sh
CODE:
npx convex dev

----------------------------------------

TITLE: Defining a Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex for inserting data into the database. This function takes two string arguments and inserts a message into the 'messages' table.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Defining a Mutation Function in Convex (TypeScript)
DESCRIPTION: Illustrates the creation of a mutation function in Convex for inserting data into the database. This function takes two string arguments and inserts a message into the 'messages' table.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Running Convex Dashboard Locally
DESCRIPTION: Docker command to run the Convex dashboard locally with connection to the Fly.io backend.

LANGUAGE: sh
CODE:
docker run -e 'NEXT_PUBLIC_DEPLOYMENT_URL=<fly-backend-url>' -p '6791:6791' 'ghcr.io/get-convex/convex-dashboard:latest'

----------------------------------------

TITLE: Implementing Mutation Function in Convex
DESCRIPTION: Shows how to create a mutation function that modifies the database. Includes argument validation and demonstrates database insertion operations.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: S3 Storage Configuration
DESCRIPTION: Environment variables setup for using S3 storage with the Convex backend.

LANGUAGE: sh
CODE:
export AWS_REGION="your-region"
export AWS_ACCESS_KEY_ID="your-access-key-id"
export AWS_SECRET_ACCESS_KEY="your-secret-access-key"
export S3_STORAGE_EXPORTS_BUCKET="convex-snapshot-exports"
export S3_STORAGE_SNAPSHOT_IMPORTS_BUCKET="convex-snapshot-imports"
export S3_STORAGE_MODULES_BUCKET="convex-modules"
export S3_STORAGE_FILES_BUCKET="convex-user-files"
export S3_STORAGE_SEARCH_BUCKET="convex-search-indexes"

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Demonstrates how to use a Convex query function within a React component using the useQuery hook, showing parameter passing.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Setting Up and Running TanStack.com for Local Documentation Preview (sh)
DESCRIPTION: Commands to enter the TanStack.com directory, install dependencies, and run the application in development mode for local documentation preview.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Example of a query function that takes numeric and string arguments, demonstrates database querying, and includes argument validation. Shows how to read from the database and process the results.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});

----------------------------------------

TITLE: Implementing Query Function in Convex
DESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. Shows database querying and argument validation using Convex's query helper.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();

    console.log(args.first, args.second);

    return documents;
  },
});

----------------------------------------

TITLE: Using a Convex Mutation Function in React
DESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Using a Convex Query Function in React
DESCRIPTION: This snippet shows how to use a Convex query function in a React component. It demonstrates passing arguments to the query function using the useQuery hook.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});

----------------------------------------

TITLE: Defining a Mutation Function in Convex (TypeScript)
DESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validators and a handler that can insert or modify documents in the database. The function also demonstrates returning a value from the mutation.

LANGUAGE: typescript
CODE:
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using npm, yarn, or pnpm package managers. This allows developers to run the project locally for development and testing purposes.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev