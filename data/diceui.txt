TITLE: Composing Data Table Components
DESCRIPTION: Example of how to import and compose various data table components together, including standard and advanced toolbar options.

LANGUAGE: tsx
CODE:
import { DataTable } from "@/components/data-table";
import { DataTableToolbar } from "@/components/data-table-toolbar";
import { DataTableAdvancedToolbar } from "@/components/data-table-advanced-toolbar";
import { DataTableFilterList } from "@/components/data-table-filter-list";
import { DataTableSortList } from "@/components/data-table-sort-list";
import { useDataTable } from "@/hooks/use-data-table";

const { table } = useDataTable({
  data,
  columns,
  pageCount,
});

// With standard toolbar
<DataTable table={table}>
  <DataTableToolbar table={table}>
    <DataTableSortList table={table} />
  </DataTableToolbar>
</DataTable>

// With advanced toolbar
<DataTable table={table}>
  <DataTableAdvancedToolbar table={table}>
    <DataTableFilterList table={table} />
    <DataTableSortList table={table} />
  </DataTableAdvancedToolbar>
</DataTable>

----------------------------------------

TITLE: Rendering Data Table with Action Bar
DESCRIPTION: Example of how to render the DataTable component with an action bar for selected rows.

LANGUAGE: tsx
CODE:
import { DataTableActionBar } from "@/components/data-table-action-bar";
import { CustomTableActions } from "@/components/custom-table-actions";

function DataTableDemo() {
  return (
    <DataTable 
      table={table}
      actionBar={
        <DataTableActionBar table={table}>
          {/* Add your custom actions here */}
          <CustomTableActions />
        </DataTableActionBar>
      }
    >
      <DataTableToolbar table={table} />
    </DataTable>
  );
}

----------------------------------------

TITLE: Rendering Data Table with Advanced Toolbar and Filter List
DESCRIPTION: Example of how to render the DataTable component with an advanced toolbar, filter list, and sort list.

LANGUAGE: tsx
CODE:
import { DataTableAdvancedToolbar } from "@/components/data-table-advanced-toolbar";
import { DataTableFilterList } from "@/components/data-table-filter-list";
import { DataTableFilterMenu } from "@/components/data-table-filter-menu";

function DataTableDemo() {
  return (
    <DataTable table={table}>
      <DataTableAdvancedToolbar table={table}>
        <DataTableFilterList table={table} />
        <DataTableSortList table={table} />
      </DataTableAdvancedToolbar>
    </DataTable>
  );
}

----------------------------------------

TITLE: Composing Combobox Component Layout in React
DESCRIPTION: Example of how to import and compose the various parts of the combobox component in a React application. This layout includes all available subcomponents.

LANGUAGE: tsx
CODE:
import * as Combobox from "@diceui/combobox";

<Combobox.Root>
  <Combobox.Label />
  <Combobox.Anchor>
    <Combobox.BadgeList>
      <Combobox.BadgeItem>
        <Combobox.BadgeItemDelete />
      </Combobox.BadgeItem>
    </Combobox.BadgeList>
    <Combobox.Input />
    <Combobox.Trigger />
    <Combobox.Cancel />
  </Combobox.Anchor>
  <Combobox.Portal>
    <Combobox.Content>
      <Combobox.Arrow />
      <Combobox.Loading />
      <Combobox.Empty />
      <Combobox.Group>
        <Combobox.GroupLabel />
        <Combobox.Item>
          <Combobox.ItemText />
          <Combobox.ItemIndicator />
        </Combobox.Item>
      </Combobox.Group>
      <Combobox.Separator />
    </Combobox.Content>
  </Combobox.Portal>
</Combobox.Root>

----------------------------------------

TITLE: Defining Table Columns with Metadata
DESCRIPTION: Example of how to define table columns with appropriate metadata for sorting, filtering, and view options.

LANGUAGE: tsx
CODE:
import { Text, CalendarIcon, DollarSign } from "lucide-react";
import { DataTableColumnHeader } from "@/components/data-table-column-header";

const columns = React.useMemo(() => [
  {
    id: "title",
    accessorKey: "title",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Title" />
    ),
    cell: ({ row }) => <div>{row.getValue("title")}</div>,
    meta: {
      label: "Title",
      placeholder: "Search titles...",
      variant: "text",
      icon: Text,
    },
    enableColumnFilter: true,
  },
], []);

----------------------------------------

TITLE: Initializing Table State with useDataTable Hook
DESCRIPTION: Example of how to initialize the table state using the useDataTable hook, including initial sorting and pagination settings.

LANGUAGE: tsx
CODE:
import { useDataTable } from "@/hooks/use-data-table";

function DataTableDemo() {
  const { table } = useDataTable({
    data,
    columns,
    pageCount,
    initialState: {
      sorting: [{ id: "createdAt", desc: true }],
      pagination: { pageSize: 10 },
    },
    getRowId: (row) => row.id,
  });

  return (
    // ... render table
  );
}

----------------------------------------

TITLE: Rendering Data Table with Toolbar and Sort List
DESCRIPTION: Example of how to render the DataTable component with a toolbar and sort list.

LANGUAGE: tsx
CODE:
import { DataTable } from "@/components/data-table";
import { DataTableToolbar } from "@/components/data-table-toolbar";
import { DataTableSortList } from "@/components/data-table-sort-list";

function DataTableDemo() {
  return (
    <DataTable table={table}>
      <DataTableToolbar table={table}>
        <DataTableSortList table={table} />
      </DataTableToolbar>
    </DataTable>
  );
}

----------------------------------------

TITLE: Composing Kanban Component in React
DESCRIPTION: Example of how to import and compose the Kanban component parts together in a React application.

LANGUAGE: tsx
CODE:
import * as Kanban from "@/components/ui/kanban";

<Kanban.Root>
  <Kanban.Board>
    <Kanban.Column>
      <Kanban.ColumnHandle />
      <Kanban.Item>
        <Kanban.ItemHandle />
      </Kanban.Item>
    </Kanban.Column>
  </Kanban.Board>
  <Kanban.Overlay />
</Kanban.Root>

----------------------------------------

TITLE: Implementing DirectionProvider in React App
DESCRIPTION: Example of wrapping an application with DirectionProvider to enable directional text support.

LANGUAGE: tsx
CODE:
import { DirectionProvider } from "@diceui/direction-provider"

export default function App() {
  return (
    <DirectionProvider dir="ltr">
      <YourApp />
    </DirectionProvider>
  )
}

----------------------------------------

TITLE: Basic Mention Component Layout
DESCRIPTION: Example showing how to compose the Mention component parts together including Root, Label, Input, Portal, Content and Item components

LANGUAGE: tsx
CODE:
import * as Mention from "@diceui/mention";

<Mention.Root>
  <Mention.Label />
  <Mention.Input />
  <Mention.Portal>
    <Mention.Content>
      <Mention.Item />
    </Mention.Content>
  </Mention.Portal>
</Mention.Root>

----------------------------------------

TITLE: Basic Tags Input Layout Implementation
DESCRIPTION: Example showing how to compose the tags input component using its constituent parts including root, label, item, input and clear button

LANGUAGE: tsx
CODE:
import * as TagsInput from "@diceui/tags-input";

<TagsInput.Root>
  <TagsInput.Label/>
  <TagsInput.Item >
    <TagsInput.ItemText />
    <TagsInput.ItemDelete />
  </TagsInput.Item>
  <TagsInput.Input />
  <TagsInput.Clear />
</TagsInput.Root>

----------------------------------------

TITLE: Basic Sortable Component Implementation
DESCRIPTION: Example showing how to compose the sortable component parts together including Root, Content, Item, and ItemHandle components

LANGUAGE: tsx
CODE:
import * as Sortable from "@/components/ui/sortable";

<Sortable.Root>
  <Sortable.Content>
    <Sortable.Item >
      <Sortable.ItemHandle />
    </Sortable.Item>
    <Sortable.Item />
  </Sortable.Content>
  <Sortable.Overlay />
</Sortable.Root>

----------------------------------------

TITLE: Basic Masonry Layout Implementation
DESCRIPTION: Example of how to import and compose the masonry components together in a React component

LANGUAGE: tsx
CODE:
import * as Masonry from "@/components/ui/masonry";

<Masonry.Root>
  <Masonry.Item />
</Masonry.Root>

----------------------------------------

TITLE: Basic Listbox Layout Implementation
DESCRIPTION: Example showing how to compose the basic structure of a Listbox component using its constituent parts

LANGUAGE: tsx
CODE:
import * as Listbox from "@diceui/listbox"

<Listbox.Root>
  <Listbox.Group>
    <Listbox.GroupLabel/>
    <Listbox.Item >
      <Listbox.ItemIndicator />
    </Listbox.Item>
  </Listbox.Group>
</Listbox.Root>

----------------------------------------

TITLE: Composing Editable Component in React
DESCRIPTION: Example of how to import and compose the Editable component parts in a React application.

LANGUAGE: tsx
CODE:
import * as Editable from "@/components/ui/editable";

<Editable.Root>
  <Editable.Label />
  <Editable.Area>
    <Editable.Preview />
    <Editable.Input />
    <Editable.Trigger />
  </Editable.Area>
  <Editable.Trigger />
  <Editable.Toolbar>
    <Editable.Submit />
    <Editable.Cancel />
  </Editable.Toolbar>
</Editable.Root>

----------------------------------------

TITLE: Using ClientOnly Component in React
DESCRIPTION: Example of implementing the ClientOnly component with a fallback loading spinner for client-side only rendering.

LANGUAGE: tsx
CODE:
import { ClientOnly } from "@/components/client-only"

export default function App() {
  return (
    <ClientOnly fallback={<LoadingSpinner />}>
      <ClientComponent />
    </ClientOnly>
  )
}

----------------------------------------

TITLE: Basic Checkbox Group Layout
DESCRIPTION: Example showing how to compose the checkbox group component parts together

LANGUAGE: tsx
CODE:
import * as CheckboxGroup from "@diceui/checkbox-group";

<CheckboxGroup.Root>
  <CheckboxGroup.Label />
  <CheckboxGroup.List>
    <CheckboxGroup.Item>
      <CheckboxGroup.Indicator />
    </CheckboxGroup.Item>
  </CheckboxGroup.List>
  <CheckboxGroup.Description>
</CheckboxGroup.Root>

----------------------------------------

TITLE: Composing Refs in React Input Component
DESCRIPTION: Demonstration of using useComposedRefs to combine a forwarded ref with a local ref in an Input component.

LANGUAGE: tsx
CODE:
import { useComposedRefs } from "@/lib/composition"

export function Input({ forwardedRef, ...props }) {
  const localRef = React.useRef(null)
  const composedRefs = useComposedRefs(forwardedRef, localRef)

  return <input ref={composedRefs} {...props} />
}

----------------------------------------

TITLE: Wrapping Application with NuqsAdapter for Query State Management
DESCRIPTION: Example of how to wrap the application with the NuqsAdapter for query state management.

LANGUAGE: tsx
CODE:
import { NuqsAdapter } from "nuqs/adapters/next/app";

<NuqsAdapter>
  <App />
</NuqsAdapter>

----------------------------------------

TITLE: Using VisuallyHidden Component in React
DESCRIPTION: Example showing how to implement the VisuallyHidden component in a React IconButton component to provide accessible labels for screen readers.

LANGUAGE: tsx
CODE:
import { VisuallyHidden } from "@diceui/visually-hidden"

export function IconButton() {
  return (
    <button>
      <Icon />
      <VisuallyHidden>Close menu</VisuallyHidden>
    </button>
  )
}

----------------------------------------

TITLE: Using useDirection Hook in React Component
DESCRIPTION: Example of using the useDirection hook to access current text direction within a component.

LANGUAGE: tsx
CODE:
import { useDirection } from "@/components/direction-provider"

function Component() {
  const dir = useDirection()
  
  return (
    <button dir={dir}>
      Do a kickflip
    </button>
  )
}

----------------------------------------

TITLE: Using Portal Component with Custom Container in React
DESCRIPTION: Shows how to use the Portal component with a custom container specified using a ref.

LANGUAGE: tsx
CODE:
import { Portal } from "@/components/portal"

export default function App() {
  const containerRef = useRef<HTMLDivElement>(null)

  return (
    <>
      <div ref={containerRef} />
      <Portal container={containerRef.current}>
        <div>This will be rendered in the custom container</div>
      </Portal>
    </>
  )
}

----------------------------------------

TITLE: Basic Usage of Portal Component in React
DESCRIPTION: Demonstrates how to import and use the Portal component to render content in the document body.

LANGUAGE: tsx
CODE:
import { Portal } from "@/components/portal"

export default function App() {
  return (
    <Portal>
      {/* Content to be rendered in a different part of the DOM */}
      <div>This will be rendered in the document body by default</div>
    </Portal>
  )
}

----------------------------------------

TITLE: Basic Scroller Implementation
DESCRIPTION: Basic example showing how to import and use the Scroller component in a React application.

LANGUAGE: tsx
CODE:
import { Scroller } from "@/components/ui/scroller"

<Scroller>
   {/* Scrollable content */}
</Scroller>

----------------------------------------

TITLE: Basic Kbd Component Layout
DESCRIPTION: Basic implementation showing how to compose the Kbd component parts together

LANGUAGE: tsx
CODE:
import * as Kbd from "@/components/ui/kbd";

<Kbd.Root>
  <Kbd.Key/>
  <Kbd.Separator />
  <Kbd.Key />
</Kbd.Root>

----------------------------------------

TITLE: Using VisuallyHiddenInput Component in React
DESCRIPTION: Example of how to use the VisuallyHiddenInput component in a React form. It demonstrates creating a custom checkbox with a visually hidden input for accessibility.

LANGUAGE: tsx
CODE:
import { VisuallyHiddenInput } from "@diceui/visually-hidden-input"

export function CustomForm() {
  const [checked, setChecked] = React.useState(false)
  const controlRef = React.useRef(null)
  
  return (
    <form>
      <button 
        ref={controlRef}
        onClick={() => setChecked(!checked)}
        aria-checked={checked}
        role="checkbox"
      >
        {checked ? "✓" : ""}
      </button>
      <VisuallyHiddenInput
        type="checkbox"
        checked={checked}
        control={controlRef.current}
      />
    </form>
  )
}

----------------------------------------

TITLE: Installing DirectionProvider Dependencies
DESCRIPTION: Manual installation of the required package dependency.

LANGUAGE: package-install
CODE:
@diceui/direction-provider

----------------------------------------

TITLE: Composing Event Handlers in React
DESCRIPTION: Example of using composeEventHandlers to combine a custom onClick handler with a logging function in a Button component.

LANGUAGE: tsx
CODE:
import { composeEventHandlers } from "@/lib/composition"

export function Button({ onClick, ...props }) {
  const handleClick = composeEventHandlers(onClick, (event) => {
    console.log("Button clicked")
  })

  return <button onClick={handleClick} {...props} />
}

----------------------------------------

TITLE: Installing VisuallyHidden Package Manually
DESCRIPTION: Command to install the VisuallyHidden package dependency manually using a package manager.

LANGUAGE: bash
CODE:
@diceui/visually-hidden

----------------------------------------

TITLE: Installing Portal Component Dependencies
DESCRIPTION: Installs the required dependency for the Portal component.

LANGUAGE: bash
CODE:
@radix-ui/react-slot

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Command to install the necessary dependencies for the Scroller component.

LANGUAGE: bash
CODE:
@radix-ui/react-slot

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Command to install the necessary Radix UI dependency for the masonry component

LANGUAGE: bash
CODE:
@radix-ui/react-slot

----------------------------------------

TITLE: Installing via shadcn/ui CLI
DESCRIPTION: Command to install the Listbox component using shadcn's CLI tool

LANGUAGE: bash
CODE:
npx shadcn@latest add "https://diceui.com/r/listbox"

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Manual installation of required dependency for the Kbd component

LANGUAGE: package-install
CODE:
@radix-ui/react-slot

----------------------------------------

TITLE: Installing Dependencies for Editable Component
DESCRIPTION: Command to install the required dependencies for the Editable component.

LANGUAGE: package-install
CODE:
@radix-ui/react-slot

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Manual installation of the required hydration boundary package.

LANGUAGE: bash
CODE:
@diceui/hydration-boundary

----------------------------------------

TITLE: Installing via shadcn/ui CLI
DESCRIPTION: Command to install the checkbox group component using shadcn's CLI

LANGUAGE: package-install
CODE:
npx shadcn@latest add "https://diceui.com/r/checkbox-group"

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Package installation command for required dependencies including dnd-kit and radix-ui

LANGUAGE: package-install
CODE:
@dnd-kit/core @dnd-kit/modifiers @dnd-kit/sortable @dnd-kit/utilities @radix-ui/react-slot

----------------------------------------

TITLE: Installing via shadcn/ui CLI
DESCRIPTION: Command to install the Mention component using shadcn/ui CLI

LANGUAGE: bash
CODE:
npx shadcn@latest add "https://diceui.com/r/mention"

----------------------------------------

TITLE: Installing Kanban Component Dependencies
DESCRIPTION: Command to install the required dependencies for the Kanban component.

LANGUAGE: bash
CODE:
@dnd-kit/core @dnd-kit/modifiers @dnd-kit/sortable @dnd-kit/utilities @radix-ui/react-slot

----------------------------------------

TITLE: Installing Combobox Component via shadcn/ui CLI
DESCRIPTION: Command to add the combobox component using the shadcn/ui CLI tool.

LANGUAGE: package-install
CODE:
npx shadcn@latest add "https://diceui.com/r/combobox"

----------------------------------------

TITLE: Installing DirectionProvider via CLI
DESCRIPTION: Command to install DirectionProvider using the shadcn CLI.

LANGUAGE: package-install
CODE:
npx shadcn@latest add "https://diceui.com/r/direction-provider"

----------------------------------------

TITLE: Installing Portal Component via CLI
DESCRIPTION: Uses npx to install the Portal component from diceui.

LANGUAGE: bash
CODE:
npx shadcn@latest add "https://diceui.com/r/portal"

----------------------------------------

TITLE: Installing Composition Utilities via CLI
DESCRIPTION: Command to install the composition utilities package using npx and shadcn.

LANGUAGE: package-install
CODE:
npx shadcn@latest add "https://diceui.com/r/composition"

----------------------------------------

TITLE: Installing Client-Only Component via CLI
DESCRIPTION: Command to install the client-only component using the shadcn CLI tool.

LANGUAGE: bash
CODE:
npx shadcn@latest add "https://diceui.com/r/client-only"

----------------------------------------

TITLE: Installing VisuallyHidden Component via CLI
DESCRIPTION: Command to install the VisuallyHidden component using the shadcn CLI tool.

LANGUAGE: bash
CODE:
npx shadcn@latest add "https://diceui.com/r/visually-hidden"

----------------------------------------

TITLE: Installing VisuallyHiddenInput Component via CLI
DESCRIPTION: Command to install the VisuallyHiddenInput component using the shadcn CLI.

LANGUAGE: bash
CODE:
npx shadcn@latest add "https://diceui.com/r/visually-hidden-input"

----------------------------------------

TITLE: Installing Tags Input Package
DESCRIPTION: Commands for installing the tags input component package

LANGUAGE: bash
CODE:
@diceui/tags-input

----------------------------------------

TITLE: Installing Sortable Component via CLI
DESCRIPTION: Command to install the sortable component using the shadcn CLI

LANGUAGE: package-install
CODE:
npx shadcn@latest add "https://diceui.com/r/sortable"

----------------------------------------

TITLE: Installing Scroller Component via CLI
DESCRIPTION: Command to install the Scroller component using the shadcn CLI tool.

LANGUAGE: bash
CODE:
npx shadcn@latest add "https://diceui.com/r/scroller"

----------------------------------------

TITLE: Installing Mention Package
DESCRIPTION: Command to install the Mention component package

LANGUAGE: bash
CODE:
@diceui/mention

----------------------------------------

TITLE: Installing Masonry Component via CLI
DESCRIPTION: Command to install the masonry component using the shadcn CLI

LANGUAGE: bash
CODE:
npx shadcn@latest add "https://diceui.com/r/masonry"

----------------------------------------

TITLE: Installing Listbox Package
DESCRIPTION: Command to install the @diceui/listbox package using package manager

LANGUAGE: bash
CODE:
@diceui/listbox

----------------------------------------

TITLE: Installing Kbd Component via CLI
DESCRIPTION: Command to install the Kbd component using the shadcn CLI

LANGUAGE: package-install
CODE:
npx shadcn@latest add "https://diceui.com/r/kbd"

----------------------------------------

TITLE: Installing Kanban Component via CLI
DESCRIPTION: Command to install the Kanban component using the shadcn CLI.

LANGUAGE: bash
CODE:
npx shadcn@latest add "https://diceui.com/r/kanban"

----------------------------------------

TITLE: Installing Editable Component via CLI
DESCRIPTION: Command to install the Editable component using the shadcn CLI.

LANGUAGE: package-install
CODE:
npx shadcn@latest add "https://diceui.com/r/editable"

----------------------------------------

TITLE: Installing Data Table Component and Dependencies
DESCRIPTION: Instructions for installing the data table component and its dependencies using the shadcn CLI.

LANGUAGE: package-install
CODE:
npx shadcn@latest add "https://diceui.com/r/data-table"

----------------------------------------

TITLE: Installing Combobox Component Package
DESCRIPTION: Command to install the @diceui/combobox package using a package manager.

LANGUAGE: package-install
CODE:
@diceui/combobox

----------------------------------------

TITLE: Installing Checkbox Group Package
DESCRIPTION: Command to install the checkbox group component package

LANGUAGE: package-install
CODE:
@diceui/checkbox-group

----------------------------------------

TITLE: Installing Checkbox Group Component using Package Managers
DESCRIPTION: This code snippet demonstrates how to install the @diceui/checkbox-group package using different package managers such as npm, pnpm, yarn, and bun. Users can choose the appropriate command based on their preferred package manager.

LANGUAGE: bash
CODE:
npm install @diceui/checkbox-group
# or
pnpm add @diceui/checkbox-group
# or
yarn add @diceui/checkbox-group
# or
bun add @diceui/checkbox-group

----------------------------------------

TITLE: Installing DiceUI Combobox Component
DESCRIPTION: Commands for installing the @diceui/combobox package using different Node.js package managers including npm, pnpm, yarn, and bun.

LANGUAGE: bash
CODE:
npm install @diceui/combobox
# or
pnpm add @diceui/combobox
# or
yarn add @diceui/combobox
# or
bun add @diceui/combobox

----------------------------------------

TITLE: Installing Listbox Component using Package Managers
DESCRIPTION: Shows different methods to install the @diceui/listbox component using npm, pnpm, yarn, or bun package managers. The component can be installed using any of these package managers based on project preferences.

LANGUAGE: bash
CODE:
npm install @diceui/listbox
# or
pnpm add @diceui/listbox
# or
yarn add @diceui/listbox
# or
bun add @diceui/listbox

----------------------------------------

TITLE: Installing Mention Component with Package Managers
DESCRIPTION: This code snippet demonstrates how to install the @diceui/mention package using different package managers such as npm, pnpm, yarn, and bun. Users can choose the appropriate command based on their preferred package manager.

LANGUAGE: bash
CODE:
npm install @diceui/mention
# or
pnpm add @diceui/mention
# or
yarn add @diceui/mention
# or
bun add @diceui/mention

----------------------------------------

TITLE: Installing @diceui/shared Package with Package Managers
DESCRIPTION: Commands for installing the @diceui/shared package using various package managers including npm, pnpm, yarn, and bun.

LANGUAGE: bash
CODE:
npm install @diceui/shared
# or
pnpm add @diceui/shared
# or
yarn add @diceui/shared
# or
bun add @diceui/shared

----------------------------------------

TITLE: Installing Tags Input Component using Package Managers
DESCRIPTION: This snippet demonstrates how to install the @diceui/tags-input package using various package managers. It includes commands for npm, pnpm, yarn, and bun.

LANGUAGE: bash
CODE:
npm install @diceui/tags-input
# or
pnpm add @diceui/tags-input
# or
yarn add @diceui/tags-input
# or
bun add @diceui/tags-input

----------------------------------------

TITLE: Markdown Changelog
DESCRIPTION: Version history documentation showing incremental updates, dependency changes, and feature additions for the checkbox-group component

LANGUAGE: markdown
CODE:
# @diceui/checkbox-group

## 0.7.2

### Patch Changes

- Updated dependencies [a13ae2e]
  - @diceui/shared@0.12.0

## 0.7.1

### Patch Changes

- Updated dependencies [d38e0e1]
  - @diceui/shared@0.11.0

## 0.7.0

### Minor Changes

- 90d0462: Bump peer-deps

### Patch Changes

- Updated dependencies [90d0462]
  - @diceui/shared@0.10.0

----------------------------------------

TITLE: Updating ComboboxProgress to ComboboxLoading Import Statement
DESCRIPTION: Example showing how to update the import statement when migrating from ComboboxProgress to ComboboxLoading component.

LANGUAGE: tsx
CODE:
// Before
import { ComboboxProgress } from "@diceui/combobox";

// After
import { ComboboxLoading } from "@diceui/combobox";

----------------------------------------

TITLE: Updating ComboboxProgress to ComboboxLoading Component Usage
DESCRIPTION: Example showing how to update the component usage in JSX when migrating from ComboboxProgress to ComboboxLoading component.

LANGUAGE: tsx
CODE:
// Before
<ComboboxProgress value={progress} />

// After
<ComboboxLoading value={progress} />

----------------------------------------

TITLE: Major Component Renaming - Version 0.1.0
DESCRIPTION: Renamed TagsInput subcomponents for better clarity and consistency. Text component was renamed to ItemText and Delete component was renamed to ItemDelete.

LANGUAGE: markdown
CODE:
### Major Changes

- 175b0d1: Renamed TagsInput subcomponents for better clarity and consistency:
  - Renamed `Text` component to `ItemText`
  - Renamed `Delete` component to `ItemDelete`

----------------------------------------

TITLE: Rendering Navigation Card Component in JSX
DESCRIPTION: Implements a navigation section using Cards and Card components from fumadocs-ui to link to component documentation.

LANGUAGE: jsx
CODE:
import { Card, Cards } from "fumadocs-ui/components/card"

<Cards>
  <Card 
    title="Components" 
    href="/docs/components/checkbox-group" 
    description="Explore our collection of UI components."
  />
</Cards>

----------------------------------------

TITLE: Installing Relative Time Card Component via CLI
DESCRIPTION: Command to install the relative time card component using the shadcn CLI tool.

LANGUAGE: bash
CODE:
npx shadcn@latest add "https://diceui.com/r/relative-time-card"

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Command to install the required npm dependencies for the relative time card component.

LANGUAGE: bash
CODE:
@radix-ui/react-hover-card
@radix-ui/react-slot

----------------------------------------

TITLE: Using Built-in Key Titles
DESCRIPTION: Example showing usage of built-in keyboard symbol titles for common keys like Command, Shift, and Option

LANGUAGE: tsx
CODE:
<Kbd.Root>
  <Kbd.Key>⌘</Kbd.Key> {/* Shows "Command" on hover */}
  <Kbd.Key>⇧</Kbd.Key> {/* Shows "Shift" on hover */}
  <Kbd.Key>⌥</Kbd.Key> {/* Shows "Option" on hover */}
</Kbd.Root>

----------------------------------------

TITLE: Implementing Custom Key Titles
DESCRIPTION: Example demonstrating how to add custom titles to keyboard keys

LANGUAGE: tsx
CODE:
<Kbd.Root>
  <Kbd.Key title="Windows key">⊞</Kbd.Key>
  <Kbd.Separator />
  <Kbd.Key title="Lock screen">L</Kbd.Key>
</Kbd.Root>

----------------------------------------

TITLE: Animated Checkbox Configuration
DESCRIPTION: Tailwind configuration for adding checkbox animation keyframes and styles

LANGUAGE: ts
CODE:
export default {
  theme: {
    extend: {
      keyframes: {
        "stroke-dashoffset": {
          "0%": { strokeDashoffset: "100%" },
          "100%": { strokeDashoffset: "0" },
        },
      },
      animation: {
        "stroke-dashoffset": "stroke-dashoffset 0.2s linear forwards",
      },
    },
  },
}

----------------------------------------

TITLE: Cloning the Dice UI Repository
DESCRIPTION: Command to clone the Dice UI repository from GitHub.

LANGUAGE: bash
CODE:
git clone https://github.com/sadmann7/diceui.git

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change directory to the cloned Dice UI project.

LANGUAGE: bash
CODE:
cd diceui

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install all required dependencies for the Dice UI project using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the development server using Turbo.

LANGUAGE: bash
CODE:
turbo dev

----------------------------------------

TITLE: Package Directory Structure
DESCRIPTION: Example directory structure for a new component package in Dice UI.

LANGUAGE: text
CODE:
packages/your-component/
├── src/
│   ├── index.ts
│   ├── your-component-root.tsx
│   ├── your-component-content.tsx
│   └── types.ts
├── test/
│   └── your-component.test.ts
├── tsconfig.json
└── tsup.config.ts

----------------------------------------

TITLE: Running Tests
DESCRIPTION: Command to run tests for the Dice UI project using pnpm.

LANGUAGE: bash
CODE:
pnpm test