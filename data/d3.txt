TITLE: Creating and Positioning a D3.js Axis
DESCRIPTION: This snippet demonstrates how to create a bottom-oriented axis using D3.js and position it within an SVG element. It uses the axisBottom function and applies a transform to set the axis position.

LANGUAGE: javascript
CODE:
const gx = svg.append("g")
    .attr("transform", `translate(0,${height - marginBottom})`)
    .call(d3.axisBottom(x));

----------------------------------------

TITLE: Creating an HTML table from a matrix using D3.js data joining
DESCRIPTION: This snippet demonstrates how to use selection.data() and selection.join() to create an HTML table from a matrix of numbers. It shows the process of binding data to DOM elements and creating new elements based on the data.

LANGUAGE: JavaScript
CODE:
const matrix = [
  [11975,  5871, 8916, 2868],
  [ 1951, 10048, 2060, 6171],
  [ 8010, 16145, 8090, 8045],
  [ 1013,   990,  940, 6907]
];

d3.select("body")
  .append("table")
  .selectAll("tr")
  .data(matrix)
  .join("tr")
  .selectAll("td")
  .data(d => d)
  .join("td")
    .text(d => d);

----------------------------------------

TITLE: Creating a Line Plot with D3 in React
DESCRIPTION: This React component creates a line plot using D3. It demonstrates how to use D3's scale and line functions within a React component, and how to create SVG elements using JSX.

LANGUAGE: jsx
CODE:
import * as d3 from "d3";

export default function LinePlot({
  data,
  width = 640,
  height = 400,
  marginTop = 20,
  marginRight = 20,
  marginBottom = 20,
  marginLeft = 20
}) {
  const x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);
  const y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);
  const line = d3.line((d, i) => x(i), y);
  return (
    <svg width={width} height={height}>
      <path fill="none" stroke="currentColor" strokeWidth="1.5" d={line(data)} />
      <g fill="white" stroke="currentColor" strokeWidth="1.5">
        {data.map((d, i) => (<circle key={i} cx={x(i)} cy={y(d)} r="2.5" />))}
      </g>
    </svg>
  );
}

----------------------------------------

TITLE: Creating a Blank Chart with D3 in JavaScript
DESCRIPTION: This snippet demonstrates how to create a basic chart structure using D3. It sets up the chart dimensions, scales for x and y axes, creates an SVG container, and adds x and y axes.

LANGUAGE: javascript
CODE:
{
  // Declare the chart dimensions and margins.
  const width = 640;
  const height = 400;
  const marginTop = 20;
  const marginRight = 20;
  const marginBottom = 30;
  const marginLeft = 40;

  // Declare the x (horizontal position) scale.
  const x = d3.scaleUtc()
      .domain([new Date("2023-01-01"), new Date("2024-01-01")])
      .range([marginLeft, width - marginRight]);

  // Declare the y (vertical position) scale.
  const y = d3.scaleLinear()
      .domain([0, 100])
      .range([height - marginBottom, marginTop]);

  // Create the SVG container.
  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height);

  // Add the x-axis.
  svg.append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)
      .call(d3.axisBottom(x));

  // Add the y-axis.
  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(d3.axisLeft(y));

  // Return the SVG element.
  return svg.node();
}

----------------------------------------

TITLE: Using selection.join() for enter, update, and exit in D3.js
DESCRIPTION: This snippet demonstrates the use of selection.join() as a convenient alternative to the explicit general update pattern. It shows how to handle enter, update, and exit selections in a single method call.

LANGUAGE: JavaScript
CODE:
svg.selectAll("circle")
  .data(data)
  .join(
    enter => enter.append("circle").attr("fill", "green"),
    update => update.attr("fill", "blue")
  )
    .attr("stroke", "black");

----------------------------------------

TITLE: Creating a Line Plot with D3 in Svelte
DESCRIPTION: This Svelte component creates a line plot using D3. It shows how to use D3's scale and line functions within a Svelte component, and how to create SVG elements using Svelte's template syntax.

LANGUAGE: svelte
CODE:
<script>
  import * as d3 from 'd3';

  export let data;
  export let width = 640;
  export let height = 400;
  export let marginTop = 20;
  export let marginRight = 20;
  export let marginBottom = 20;
  export let marginLeft = 20;

  $: x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);
  $: y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);
  $: line = d3.line((d, i) => x(i), y);
</script>
<svg width={width} height={height}>
  <path fill="none" stroke="currentColor" stroke-width="1.5" d={line(data)} />
  <g fill="white" stroke="currentColor" stroke-width="1.5">
    {#each data as d, i}
      <circle key={i} cx={x(i)} cy={y(d)} r="2.5" />
    {/each}
  </g>
</svg>

----------------------------------------

TITLE: Formatting D3.js Axis Ticks
DESCRIPTION: These snippets show different ways to format axis ticks in D3.js. The first uses a custom format function, while the second uses a format specifier with the ticks method.

LANGUAGE: javascript
CODE:
axis.tickFormat(d3.format(",.0f"));

LANGUAGE: javascript
CODE:
axis.ticks(10, ",f");

----------------------------------------

TITLE: Using D3 in Vanilla HTML with ES Modules
DESCRIPTION: This example shows how to use D3 in a vanilla HTML file using ES modules. It creates a basic chart structure similar to the previous example, but in the context of an HTML page.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<div id="container"></div>
<script type="module">

import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

// Declare the chart dimensions and margins.
const width = 640;
const height = 400;
const marginTop = 20;
const marginRight = 20;
const marginBottom = 30;
const marginLeft = 40;

// Declare the x (horizontal position) scale.
const x = d3.scaleUtc()
    .domain([new Date("2023-01-01"), new Date("2024-01-01")])
    .range([marginLeft, width - marginRight]);

// Declare the y (vertical position) scale.
const y = d3.scaleLinear()
    .domain([0, 100])
    .range([height - marginBottom, marginTop]);

// Create the SVG container.
const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height);

// Add the x-axis.
svg.append("g")
    .attr("transform", `translate(0,${height - marginBottom})`)
    .call(d3.axisBottom(x));

// Add the y-axis.
svg.append("g")
    .attr("transform", `translate(${marginLeft},0)`)
    .call(d3.axisLeft(y));

// Append the SVG element.
container.append(svg.node());

</script>

----------------------------------------

TITLE: Basic D3 Element Selection and Modification
DESCRIPTION: Demonstrates how to select all paragraph elements and modify their class and color using method chaining.

LANGUAGE: javascript
CODE:
d3.selectAll("p")
    .attr("class", "graf")
    .style("color", "red");

----------------------------------------

TITLE: Applying Linear Scale for Position
DESCRIPTION: Demonstrates using a linear scale to map domain values to pixel positions in a range of 0-960

LANGUAGE: javascript
CODE:
const x = d3.scaleLinear([10, 130], [0, 960]);
x(20); // 80
x(50); // 320

----------------------------------------

TITLE: Rendering a Line Path in D3.js
DESCRIPTION: Shows how to use a line generator to create an SVG path element with the generated line data.

LANGUAGE: javascript
CODE:
svg.append("path").attr("d", line(data)).attr("stroke", "currentColor");

----------------------------------------

TITLE: Creating Basic D3 Transition in JavaScript
DESCRIPTION: Demonstrates how to create a simple transition that changes the background color of the body element. This example shows the basic transition syntax using d3.select() followed by transition() and style() methods.

LANGUAGE: javascript
CODE:
d3.select("body")
  .transition()
    .style("background-color", "red");

----------------------------------------

TITLE: Handling enter and exit selections in D3.js
DESCRIPTION: This example demonstrates the use of selection.enter() and selection.exit() to handle new and removed data points. It shows how to create new elements for entering data and remove elements for exiting data.

LANGUAGE: JavaScript
CODE:
div = div.data([1, 2, 4, 8, 16, 32], d => d);

div.enter().append("div").text(d => d);

div.exit().remove();

----------------------------------------

TITLE: Configuring Force Simulation with Multiple Forces
DESCRIPTION: Example of creating a force simulation with multiple forces including many-body force, link force, and centering force for graph layout.

LANGUAGE: javascript
CODE:
const simulation = d3.forceSimulation(nodes)
    .force("charge", d3.forceManyBody())
    .force("link", d3.forceLink(links))
    .force("center", d3.forceCenter());

----------------------------------------

TITLE: Joining data by key in D3.js
DESCRIPTION: This example shows how to use a key function with selection.data() to join data to DOM elements based on a unique identifier. It demonstrates handling both the datum and the DOM element's properties in the key function.

LANGUAGE: HTML
CODE:
<div id="Ford"></div>
<div id="Jarrah"></div>
<div id="Kwon"></div>
<div id="Locke"></div>
<div id="Reyes"></div>
<div id="Shephard"></div>

LANGUAGE: JavaScript
CODE:
const data = [
  {name: "Locke", number: 4},
  {name: "Reyes", number: 8},
  {name: "Ford", number: 15},
  {name: "Jarrah", number: 16},
  {name: "Shephard", number: 23},
  {name: "Kwon", number: 42}
];

d3.selectAll("div")
  .data(data, function(d) { return d ? d.name : this.id; })
    .text(d => d.number);

----------------------------------------

TITLE: Rendering Stacked Bar Chart with D3.js
DESCRIPTION: Shows how to use the generated stacked data to create a stacked bar chart using SVG rectangles. This snippet includes positioning and styling of the bars.

LANGUAGE: JavaScript
CODE:
svg.append("g")
  .selectAll("g")
  .data(series)
  .join("g")
    .attr("fill", d => color(d.key))
  .selectAll("rect")
  .data(D => D)
  .join("rect")
    .attr("x", d => x(d.data[0]))
    .attr("y", d => y(d[1]))
    .attr("height", d => y(d[0]) - y(d[1]))
    .attr("width", x.bandwidth());

----------------------------------------

TITLE: Grouping Data with D3.js group() Function
DESCRIPTION: Demonstrates how to use d3.group() to group an iterable of values into an InternMap. The example shows grouping a penguins dataset by species and accessing grouped data.

LANGUAGE: javascript
CODE:
const species = d3.group(penguins, (d) => d.species);

LANGUAGE: javascript
CODE:
species.get("Adelie") // Array(152)

LANGUAGE: javascript
CODE:
const speciesSex = d3.group(penguins, (d) => d.species, (d) => d.sex)

LANGUAGE: javascript
CODE:
speciesSex.get("Adelie").get("FEMALE") // Array(73)

----------------------------------------

TITLE: HTML Structure of a D3.js Axis
DESCRIPTION: This HTML snippet shows the typical structure of a D3.js-generated axis. It includes the main group element, domain path, and individual tick groups with lines and text elements.

LANGUAGE: html
CODE:
<g fill="none" font-size="10" font-family="sans-serif" text-anchor="middle">
  <path class="domain" stroke="currentColor" d="M0.5,6V0.5H880.5V6"></path>
  <g class="tick" opacity="1" transform="translate(0.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">0.0</text>
  </g>
  <g class="tick" opacity="1" transform="translate(176.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">0.2</text>
  </g>
  <g class="tick" opacity="1" transform="translate(352.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">0.4</text>
  </g>
  <g class="tick" opacity="1" transform="translate(528.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">0.6</text>
  </g>
  <g class="tick" opacity="1" transform="translate(704.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">0.8</text>
  </g>
  <g class="tick" opacity="1" transform="translate(880.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">1.0</text>
  </g>
</g>

----------------------------------------

TITLE: Generating Stacked Data with D3.js
DESCRIPTION: Demonstrates how to use the stack generator to create stacked data from a dataset. This example shows data preparation, key selection, and value computation for fruit sales data.

LANGUAGE: JavaScript
CODE:
const series = d3.stack()
    .keys(d3.union(data.map(d => d.fruit))) // apples, bananas, cherries, …
    .value(([, group], key) => group.get(key).sales)
  (d3.index(data, d => d.date, d => d.fruit));

----------------------------------------

TITLE: Grouping and Reducing Data with D3.js rollup() Function
DESCRIPTION: Demonstrates the use of d3.rollup() to group and reduce an iterable of values into an InternMap. The example shows grouping and counting penguins by species and sex.

LANGUAGE: javascript
CODE:
const speciesCount = d3.rollup(penguins, (D) => D.length, (d) => d.species);

LANGUAGE: javascript
CODE:
speciesCount.get("Adelie") // 152

LANGUAGE: javascript
CODE:
const speciesSexCount = d3.rollup(penguins, (D) => D.length, (d) => d.species, (d) => d.sex);

LANGUAGE: javascript
CODE:
speciesSexCount.get("Adelie").get("FEMALE") // 73

----------------------------------------

TITLE: Linear Scale with Color Interpolation
DESCRIPTION: Shows how to create and use a linear scale for color interpolation between brown and steelblue

LANGUAGE: javascript
CODE:
const color = d3.scaleLinear([10, 100], ["brown", "steelblue"]);
color(20); // "rgb(154, 52, 57)"
color(50); // "rgb(123, 81, 103)"

----------------------------------------

TITLE: Applying D3 Drag Behavior to Selection in JavaScript
DESCRIPTION: Shows how to apply a drag behavior to a D3 selection using the call() method. This example also demonstrates setting an event listener for the 'start' event.

LANGUAGE: JavaScript
CODE:
d3.selectAll(".node").call(d3.drag().on("start", started));

----------------------------------------

TITLE: Creating a Band Scale in D3
DESCRIPTION: Demonstrates how to construct a new band scale with a specified domain and range.

LANGUAGE: javascript
CODE:
const x = d3.scaleBand(["a", "b", "c"], [0, 960]);

----------------------------------------

TITLE: Linear Scale Inversion
DESCRIPTION: Demonstrates inverting a linear scale to get domain values from range values

LANGUAGE: javascript
CODE:
const x = d3.scaleLinear([10, 130], [0, 960]);
x.invert(80); // 20
x.invert(320); // 50

----------------------------------------

TITLE: D3 Element Creation and Insertion
DESCRIPTION: Shows different approaches to creating and appending elements using D3.

LANGUAGE: javascript
CODE:
d3.selectAll("div").append("p");

LANGUAGE: javascript
CODE:
d3.selectAll("div").append(() => document.createElement("p"));

LANGUAGE: javascript
CODE:
d3.selectAll("div").select(function() {
  return this.appendChild(document.createElement("p"));
});

----------------------------------------

TITLE: Iterating over Selection Elements with each() in D3
DESCRIPTION: Demonstrates how to use the each() method to iterate over selected elements, accessing both parent and child data simultaneously.

LANGUAGE: javascript
CODE:
parent.each(function(p, j) {
  d3.select(this)
    .selectAll(".child")
      .text(d => `child ${d.name} of ${p.name}`);
});

----------------------------------------

TITLE: Creating Delaunay Triangulation and Voronoi Diagram with D3
DESCRIPTION: Demonstrates how to create a Delaunay triangulation from a set of points and then generate the corresponding Voronoi diagram with specified bounds using D3.

LANGUAGE: javascript
CODE:
const delaunay = d3.Delaunay.from([[0, 0], [0, 100], [100, 0], [100, 100]]);
const voronoi = delaunay.voronoi([0, 0, 640, 480]);

----------------------------------------

TITLE: Creating Basic Area Generator
DESCRIPTION: Demonstrates how to create a basic area generator with x, y0, and y1 accessors for mapping data points to coordinates.

LANGUAGE: javascript
CODE:
const area = d3.area((d) => x(d.Date), y(0), (d) => y(d.Close));

----------------------------------------

TITLE: Basic Arc Generator Initialization
DESCRIPTION: Creates a new arc generator with default settings that can be used to generate SVG path data for circular or annular sectors.

LANGUAGE: javascript
CODE:
const arc = d3.arc();

----------------------------------------

TITLE: Selecting Elements with D3 in JavaScript
DESCRIPTION: Demonstrates various ways to select elements using D3's select and selectAll methods.

LANGUAGE: javascript
CODE:
const svg = d3.select("#chart");
const anchor = d3.select("a");
d3.select(document.body).style("background", "red");
d3.selectAll("p").on("click", (event) => d3.select(event.currentTarget).style("color", "red"));
const p = d3.selectAll("p");
d3.selectAll(document.links).style("color", "red");

----------------------------------------

TITLE: Chaining Transitions in D3.js
DESCRIPTION: This example demonstrates how to chain multiple transitions to create a sequence of color changes and removal of elements.

LANGUAGE: javascript
CODE:
d3.selectAll(".apple")
  .transition() // First fade to green.
    .style("fill", "green")
  .transition() // Then red.
    .style("fill", "red")
  .transition() // Wait one second. Then brown, and remove.
    .delay(1000)
    .style("fill", "brown")
    .remove();

----------------------------------------

TITLE: Defining Missing Data Handler
DESCRIPTION: Shows how to configure the area generator to handle missing or invalid data points.

LANGUAGE: javascript
CODE:
const area = d3.area().defined((d) => !isNaN(d.Close));

----------------------------------------

TITLE: Constructing a Treemap Layout with D3 Hierarchy
DESCRIPTION: Shows how to create a treemap layout using d3.treemap(), including sizing, padding, summing values, and sorting nodes.

LANGUAGE: javascript
CODE:
// Construct the treemap layout.
const treemap = d3.treemap();
treemap.size([width, height]);
treemap.padding(2);

// Sum and sort the data.
root.sum((d) => d.value);
root.sort((a, b) => b.height - a.height || b.value - a.value);

// Compute the treemap layout.
treemap(root);

// Retrieve all descendant nodes.
const nodes = root.descendants();

----------------------------------------

TITLE: Interpolating Fill Attribute with D3 Transition
DESCRIPTION: Examples of using attrTween() to interpolate the fill attribute between colors. Shows three approaches: interpolating between fixed colors, interpolating from current color, and using a custom rainbow interpolator.

LANGUAGE: javascript
CODE:
transition.attrTween("fill", () => d3.interpolateRgb("red", "blue"));

transition.attrTween("fill", function() {
  return d3.interpolateRgb(this.getAttribute("fill"), "blue");
});

transition.attrTween("fill", () => (t) => `hsl(${t * 360},100%,50%)`);

----------------------------------------

TITLE: Creating Force Simulation in D3
DESCRIPTION: Creates a new force simulation with specified nodes array. The simulation starts automatically and mutates the passed-in nodes with position and velocity data.

LANGUAGE: javascript
CODE:
const simulation = d3.forceSimulation(nodes);

----------------------------------------

TITLE: Filtering D3 Selections in JavaScript
DESCRIPTION: Demonstrates different ways to filter D3 selections using strings and functions.

LANGUAGE: javascript
CODE:
const even = d3.selectAll("tr").filter(":nth-child(even)");
const even = d3.selectAll("tr:nth-child(even)");
const even = d3.selectAll("tr").filter((d, i) => i & 1);
const even = d3.selectAll("tr").select(function(d, i) { return i & 1 ? this : null; });

----------------------------------------

TITLE: Setting Curve Type
DESCRIPTION: Demonstrates how to set a different curve interpolation type for the area generator.

LANGUAGE: javascript
CODE:
const area = d3.area().curve(d3.curveStep);

----------------------------------------

TITLE: Creating a Reusable Function with call() in D3
DESCRIPTION: Shows how to create a reusable function that sets multiple attributes on a selection using the call() method for method chaining.

LANGUAGE: javascript
CODE:
function name(selection, first, last) {
  selection
      .attr("first-name", first)
      .attr("last-name", last);
}

LANGUAGE: javascript
CODE:
d3.selectAll("div").call(name, "John", "Snow");

LANGUAGE: javascript
CODE:
name(d3.selectAll("div"), "John", "Snow");

----------------------------------------

TITLE: Applying Pack Layout to Hierarchy
DESCRIPTION: Lays out a hierarchical data structure, assigning x, y coordinates and radius to each node. Requires calling root.sum() before layout and optionally root.sort() for ordering.

LANGUAGE: javascript
CODE:
pack(root)

----------------------------------------

TITLE: Setting Curve Type for Line Generator in D3.js
DESCRIPTION: Demonstrates how to specify a custom curve type for the line generator.

LANGUAGE: javascript
CODE:
const line = d3.line().curve(d3.curveStep);

----------------------------------------

TITLE: Applying a Line Generator to SVG Path in D3.js
DESCRIPTION: This code shows how to use a previously defined line generator to compute the 'd' attribute of an SVG path element, binding data to the path.

LANGUAGE: javascript
CODE:
path.datum(data).attr("d", line);

----------------------------------------

TITLE: Implementing Drag Event Listeners in D3 JavaScript
DESCRIPTION: Shows how to implement drag event listeners for start, drag, and end events. This example raises the dragged element and updates its position.

LANGUAGE: JavaScript
CODE:
function started(event) {
  const circle = d3.select(this).classed("dragging", true);
  const dragged = (event, d) => circle.raise().attr("cx", d.x = event.x).attr("cy", d.y = event.y);
  const ended = () => circle.classed("dragging", false);
  event.on("drag", dragged).on("end", ended);
}

----------------------------------------

TITLE: Summing Node Values in D3 Hierarchy
DESCRIPTION: Demonstrates how to use the sum() method to calculate and assign values to nodes based on their descendants.

LANGUAGE: javascript
CODE:
root.sum((d) => d.value ? 1 : 0);

----------------------------------------

TITLE: Computing Projected Planar Bounding Box in D3
DESCRIPTION: Illustrates how to use the bounds method of a path generator to compute the projected planar bounding box of a GeoJSON object.

LANGUAGE: javascript
CODE:
path.bounds(california) // [[18.48513821663947, 159.95146883594333], [162.7651668852596, 407.09641570706725]]

----------------------------------------

TITLE: Computing Basic Statistics with D3 Count
DESCRIPTION: Demonstrates using d3.count() to count valid numeric values in a dataset while ignoring null, NaN and undefined values.

LANGUAGE: javascript
CODE:
d3.count(penguins, (d) => d.body_mass_g) // 342

----------------------------------------

TITLE: Updating a D3.js Axis with Transition
DESCRIPTION: This code shows how to update an existing D3.js axis with a smooth transition. It applies a duration to the transition and calls the axis function again to update the axis based on new data.

LANGUAGE: javascript
CODE:
gx.transition()
    .duration(750)
    .call(d3.axisBottom(x));

----------------------------------------

TITLE: Applying Treemap Layout to Hierarchy in D3
DESCRIPTION: Lays out the specified root hierarchy, assigning position properties to each node. This method requires the hierarchy to have values assigned using root.sum() beforehand.

LANGUAGE: javascript
CODE:
*treemap*(*root*)

----------------------------------------

TITLE: Finding Least Values with D3 Least
DESCRIPTION: Demonstrates using d3.least() to find minimum values using custom comparators.

LANGUAGE: javascript
CODE:
d3.least(alphabet, (a, b) => a.frequency - b.frequency) // {letter: "Z", frequency: 0.00074}

d3.least(alphabet, (a, b) => b.frequency - a.frequency) // {letter: "E", frequency: 0.12702}

d3.least(alphabet, (d) => d.frequency) // {letter: "Z", frequency: 0.00074}

d3.least(alphabet, (d) => -d.frequency) // {letter: "E", frequency: 0.12702}

d3.least(alphabet.map((d) => d.frequency)) // 0.00074

d3.least([]) // undefined

----------------------------------------

TITLE: Creating Voronoi Diagram from Delaunay Triangulation
DESCRIPTION: Shows how to generate a Voronoi diagram from a Delaunay triangulation with specified bounds.

LANGUAGE: javascript
CODE:
const delaunay = d3.Delaunay.from(points);
const voronoi = delaunay.voronoi([0, 0, 640, 480]);

----------------------------------------

TITLE: Creating Arrays of Grouped Data with D3.js groups() Function
DESCRIPTION: Shows how to use d3.groups() to create an array of [key, value] entries from grouped data. This is similar to d3.group() but returns an array instead of a map.

LANGUAGE: javascript
CODE:
const species = d3.groups(penguins, (d) => d.species); // [["Adelie", Array(152)], …]

----------------------------------------

TITLE: Parsing CSV and TSV Data with D3
DESCRIPTION: Examples of parsing comma-separated (CSV) and tab-separated (TSV) data into JavaScript objects with column headers.

LANGUAGE: javascript
CODE:
d3.csvParse("foo,bar\n1,2") // [{foo: "1", bar: "2"}, columns: ["foo", "bar"]]

LANGUAGE: javascript
CODE:
d3.tsvParse("foo\tbar\n1\t2") // [{foo: "1", bar: "2"}, columns: ["foo", "bar"]]

----------------------------------------

TITLE: Finding Nearest Point in D3 Quadtree
DESCRIPTION: Shows how to find the nearest point to a given coordinate in a D3 quadtree, optionally within a specified radius.

LANGUAGE: javascript
CODE:
tree.find({{findState.x.toFixed(3)}}, {{findState.y.toFixed(3)}}) // {{points[findState.i] && `[${points[findState.i].map((p) => p.toFixed(3)).join(", ")}]`}}

LANGUAGE: javascript
CODE:
tree.find(10, 10, 1) // undefined

----------------------------------------

TITLE: Mapping Values with D3 Quantile Scale
DESCRIPTION: Demonstrates mapping numeric values to colors using a quantile scale transformation.

LANGUAGE: javascript
CODE:
color(3000); // "#eff3ff"
color(4000); // "#6baed6"
color(5000); // "#08519c"

----------------------------------------

TITLE: Creating a Diverging Continuous Color Scale with D3
DESCRIPTION: This snippet demonstrates how to create a diverging continuous color scale using the PiYG color scheme in D3. It utilizes d3.scaleSequential and d3.interpolatePiYG to generate the color scale.

LANGUAGE: javascript
CODE:
const color = d3.scaleSequential(d3.interpolatePiYG);

----------------------------------------

TITLE: Creating Basic Sequential Scale in D3
DESCRIPTION: Demonstrates creating a sequential scale with a domain and color interpolator function to map values from 0-100 to blues color scheme.

LANGUAGE: javascript
CODE:
const color = d3.scaleSequential([0, 100], d3.interpolateBlues);

----------------------------------------

TITLE: Using a Quantize Scale for Color Encoding in D3.js
DESCRIPTION: Illustrates how to use a quantize scale to map input values to discrete color outputs. The scale maps values between 0 and 1 to either 'brown' or 'steelblue'.

LANGUAGE: javascript
CODE:
const color = d3.scaleQuantize([0, 1], ["brown", "steelblue"]);
color(0.49); // "brown"
color(0.51); // "steelblue"

----------------------------------------

TITLE: Creating a Sequential Continuous Color Scale in D3
DESCRIPTION: This code creates a sequential continuous color scale using the Blues color scheme in D3.

LANGUAGE: javascript
CODE:
const color = d3.scaleSequential(d3.interpolateBlues);

----------------------------------------

TITLE: Complex Object Interpolation with D3
DESCRIPTION: Demonstrates D3's ability to interpolate complex nested objects, including arrays and color strings. The interpolator blends between two objects with color arrays.

LANGUAGE: javascript
CODE:
const i = d3.interpolate({colors: ["red", "blue"]}, {colors: ["white", "black"]});
i(0.0); // {colors: ["rgb(255, 0, 0)", "rgb(0, 0, 255)"]}
i(0.5); // {colors: ["rgb(255, 128, 128)", "rgb(0, 0, 128)"]}
i(1.0); // {colors: ["rgb(255, 255, 255)", "rgb(0, 0, 0)"]}

----------------------------------------

TITLE: Attaching Click Event Listener in D3.js
DESCRIPTION: Demonstrates how to attach a click event listener to all paragraph elements using D3.js selection.on() method. The listener logs the event object to the console when triggered.

LANGUAGE: javascript
CODE:
d3.selectAll("p").on("click", (event) => console.log(event))

----------------------------------------

TITLE: Indexing Data with D3.js index() Function
DESCRIPTION: Demonstrates how to use d3.index() to create an index of data elements. The example shows indexing a dataset of Apple stock prices by date.

LANGUAGE: javascript
CODE:
const aaplDate = d3.index(aapl, (d) => d.Date);

LANGUAGE: javascript
CODE:
aaplDate.get(new Date("2013-12-31")).Close // 80.145714

----------------------------------------

TITLE: Setting Custom Base for Logarithmic Scale
DESCRIPTION: Shows how to create a logarithmic scale with a custom base of 2, mapping domain [1, 1024] to range [0, 960]

LANGUAGE: javascript
CODE:
const x = d3.scaleLog([1, 1024], [0, 960]).base(2);

----------------------------------------

TITLE: Finding Minimum Values with D3 Min
DESCRIPTION: Shows various ways to use d3.min() to find minimum values in arrays, handling different data types and using accessors.

LANGUAGE: javascript
CODE:
d3.min([3, 2, 1, 1, 6, 2, 4]) // 1

d3.min(["bob", "alice", "carol"]) // "alice"

d3.min([new Date("2018-01-01"), new Date("2011-03-09")]) // 2011-03-09

d3.min([3, 2, 1, NaN, 4]) // 1

d3.min(alphabet, (d) => d.frequency) // 0.00074

d3.min(alphabet, (d) => d.letter === "Z" ? NaN : d.frequency) // 0.00095

d3.min([]) // undefined

d3.min(alphabet, (d) => d.doesnotexist) // undefined

----------------------------------------

TITLE: Sorting Grouped Data with D3.js groupSort() Function
DESCRIPTION: Shows how to use d3.groupSort() to group and sort data. The example demonstrates ordering penguin species by median body mass in ascending and descending order.

LANGUAGE: javascript
CODE:
d3.groupSort(penguins, (D) => d3.median(D, (d) => d.body_mass_g), (d) => d.species) // ["Adelie", "Chinstrap", "Gentoo"]

LANGUAGE: javascript
CODE:
d3.groupSort(penguins, (D) => -d3.median(D, (d) => d.body_mass_g), (d) => d.species) // ["Gentoo", "Adelie", "Chinstrap"]

----------------------------------------

TITLE: Generating Logarithmic Scale Ticks
DESCRIPTION: Demonstrates tick generation for a logarithmic scale with domain [1, 100], showing uniformly spaced ticks within each power

LANGUAGE: javascript
CODE:
const x = d3.scaleLog([1, 100], [0, 960]);
const T = x.ticks(); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

----------------------------------------

TITLE: Creating Synchronized Transitions in D3.js
DESCRIPTION: This snippet demonstrates how to create synchronized transitions across multiple selections using a shared transition object.

LANGUAGE: javascript
CODE:
const t = d3.transition()
    .duration(750)
    .ease(d3.easeLinear);

d3.selectAll(".apple").transition(t)
    .style("fill", "red");

d3.selectAll(".orange").transition(t)
    .style("fill", "orange");

----------------------------------------

TITLE: Rendering Delaunay and Voronoi Meshes with Plot
DESCRIPTION: This code snippet demonstrates how to use the Plot library to render a Delaunay triangulation mesh, Voronoi diagram mesh, and scatter plot of points. It sets up the plot configuration options including dimensions, domains, and visual styles.

LANGUAGE: HTML
CODE:
<PlotRender defer :options='{
  axis: null,
  width: 688,
  height: 688,
  x: {domain: [-4, 3.5]},
  y: {domain: [-3, 3.5]},
  marks: [
    Plot.delaunayMesh(points, {stroke: "currentColor", strokeOpacity: 0.3}),
    Plot.voronoiMesh(points, {stroke: "var(--vp-c-brand)", strokeOpacity: 1}),
    Plot.dot(points, {r: 2, fill: "currentColor"}),
  ]
}' />

----------------------------------------

TITLE: Using d3.format for Consistent Number Formatting
DESCRIPTION: This example demonstrates how to use d3.format to create a formatter function that consistently formats decimal numbers to one decimal place.

LANGUAGE: javascript
CODE:
const f = d3.format(".1f");
for (let i = 0; i < 10; ++i) {
  console.log(f(0.1 * i));
}

----------------------------------------

TITLE: Creating a Quantize Scale with D3.js
DESCRIPTION: Demonstrates how to construct a new quantize scale with a specified domain and range using d3.scaleQuantize(). The example creates a color scale mapping values from 0 to 100 to a blue color scheme.

LANGUAGE: javascript
CODE:
const color = d3.scaleQuantize([0, 100], d3.schemeBlues[9]);

----------------------------------------

TITLE: Creating a Power Scale with Custom Exponent in D3
DESCRIPTION: Demonstrates how to create a power scale with a custom domain, range, and exponent using d3.scalePow(). The scale maps values from 0-100 to colors from red to blue, with an exponent of 2.

LANGUAGE: javascript
CODE:
const x = d3.scalePow([0, 100], ["red", "blue"]).exponent(2);

----------------------------------------

TITLE: Creating a Format Function with d3.format
DESCRIPTION: This snippet shows how to create a reusable format function using d3.format with a specific format specifier.

LANGUAGE: javascript
CODE:
const f = d3.format(".2f");

----------------------------------------

TITLE: D3 Conic Conformal Projection Configuration
DESCRIPTION: WorldMap component configuration using D3's geoConicConformal projection with specific parallels, rotation, scale, and other parameters.

LANGUAGE: vue
CODE:
<WorldMap resolution="50m" :projection='d3.geoConicConformal().parallels([35, 65]).rotate([-20, 0]).scale(width * 0.55).center([0, 52]).translate([width / 2, height / 2]).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)' />

----------------------------------------

TITLE: Creating a Square Root Scale in D3
DESCRIPTION: Shows how to create a square root scale (power scale with exponent 0.5) using d3.scaleSqrt(). The scale maps values from 0-100 to colors from red to blue.

LANGUAGE: javascript
CODE:
const x = d3.scaleSqrt([0, 100], ["red", "blue"]);

----------------------------------------

TITLE: Appending HTML Element to SVG ForeignObject in D3.js
DESCRIPTION: Demonstrates how to append an HTML div element inside an SVG foreignObject element using D3.js, specifying the XHTML namespace.

LANGUAGE: javascript
CODE:
d3.create("svg")
  .append("foreignObject")
    .attr("width", 300)
    .attr("height", 100)
  .append("xhtml:div")
    .text("Hello, HTML!");

----------------------------------------

TITLE: Constructing a D3 Hierarchy from Data in JavaScript
DESCRIPTION: Shows how to use d3.hierarchy() to create a hierarchical structure from the provided data object.

LANGUAGE: javascript
CODE:
const root = d3.hierarchy(data);

----------------------------------------

TITLE: Loading and Parsing DSV Data
DESCRIPTION: Demonstrates loading delimiter-separated values with custom row parsing. Includes example of data type conversion and column mapping.

LANGUAGE: javascript
CODE:
const data = await d3.dsv(",", "example.csv", (d) => {
  return {
    year: new Date(+d.Year, 0, 1), // convert "Year" column to Date
    make: d.Make,
    model: d.Model,
    length: +d.Length // convert "Length" column to number
  };
});

----------------------------------------

TITLE: D3 Albers USA Composite Projection
DESCRIPTION: UsMap component using D3's geoAlbersUsa projection, a composite projection specifically designed for US territory display including Alaska and Hawaii.

LANGUAGE: vue
CODE:
<UsMap :projection='d3.geoAlbersUsa().scale(1300 / 975 * width * 0.8).translate([width / 2, height / 2])' />

----------------------------------------

TITLE: Setting Domain for D3.js Bin Generator in JavaScript
DESCRIPTION: Configures the domain of a bin generator to a specific range of values.

LANGUAGE: javascript
CODE:
const bin = d3.bin().domain([0, 1]);

----------------------------------------

TITLE: Selecting Child Elements with D3 in JavaScript
DESCRIPTION: Shows how to use selectChild and selectChildren methods to select child elements.

LANGUAGE: javascript
CODE:
d3.selectAll("p").selectChild("b") // the first <b> child of every <p>

----------------------------------------

TITLE: Using Basic Bisect Function
DESCRIPTION: Shows usage of the basic bisect function on an array of dates mapped from objects.

LANGUAGE: javascript
CODE:
d3.bisect(aapl.map((d) => d.Date), new Date("2014-01-02")) // 163

----------------------------------------

TITLE: Configuring Thresholds for D3.js Bin Generator in JavaScript
DESCRIPTION: Sets the number of bins or specific threshold values for a bin generator.

LANGUAGE: javascript
CODE:
const bin = d3.bin().thresholds(20);

LANGUAGE: javascript
CODE:
const bin = d3.bin().thresholds([0.25, 0.5, 0.75]);

LANGUAGE: javascript
CODE:
const bin = d3.bin().thresholds((values) => [d3.median(values)]);

----------------------------------------

TITLE: Interpolating between two numbers in D3.js
DESCRIPTION: Uses d3.interpolateNumber() to create an interpolator between two numbers. This example interpolates between 20 and 620, returning the value 80% of the way between them.

LANGUAGE: javascript
CODE:
d3.interpolateNumber(20, 620)(0.8) // 500

----------------------------------------

TITLE: Generating Bins from Data using D3.js in JavaScript
DESCRIPTION: Uses a configured bin generator to create bins from a dataset of penguin measurements.

LANGUAGE: javascript
CODE:
const bins = d3.bin().value((d) => d.culmen_length_mm)(penguins);

----------------------------------------

TITLE: Creating a D3 Dispatch Object in JavaScript
DESCRIPTION: Demonstrates how to create a new dispatch object for 'start' and 'end' events using d3.dispatch.

LANGUAGE: javascript
CODE:
const dispatch = d3.dispatch("start", "end");

----------------------------------------

TITLE: D3 Element Attribute Setting
DESCRIPTION: Examples of setting and getting attributes using D3's attr method.

LANGUAGE: javascript
CODE:
selection.attr("color", "red")

LANGUAGE: javascript
CODE:
selection.attr("color") // "red"

----------------------------------------

TITLE: Using Freedman-Diaconis Rule for D3.js Bin Thresholds in JavaScript
DESCRIPTION: Applies the Freedman-Diaconis rule to determine the number of bins for a dataset.

LANGUAGE: javascript
CODE:
const bin = d3.bin().thresholds(d3.thresholdFreedmanDiaconis);

----------------------------------------

TITLE: Interpolating between two dates in D3.js
DESCRIPTION: Uses d3.interpolateDate() to create an interpolator between two dates. This example interpolates between January 1, 2014 and January 1, 2024, returning the date halfway between them.

LANGUAGE: javascript
CODE:
d3.interpolateDate(new Date("2014-01-01"), new Date("2024-01-01"))(0.5) // 2019-01-01

----------------------------------------

TITLE: Custom Symbol Implementation
DESCRIPTION: Demonstrates low-level usage of symbol type implementation with a circle symbol.

LANGUAGE: javascript
CODE:
const path = d3.pathRound(3);
const circle = d3.symbolCircle.draw(path, 64);
path.toString(); // "M4.514,0A4.514,4.514,0,1,1,-4.514,0A4.514,4.514,0,1,1,4.514,0"

----------------------------------------

TITLE: Initializing Data Array in Vue.js Setup
DESCRIPTION: Vue setup script defining an array of hierarchical data representing relationships between Greek gods and primordial entities.

LANGUAGE: vue
CODE:
<script setup>

import * as Plot from "@observablehq/plot";
import PlotRender from "../components/PlotRender.js";

const gods = [
  "Chaos/Gaia/Mountains",
  "Chaos/Gaia/Pontus",
  "Chaos/Gaia/Uranus",
  "Chaos/Eros",
  "Chaos/Erebus",
  "Chaos/Tartarus"
];

</script>

----------------------------------------

TITLE: Interpolating between two objects in D3.js
DESCRIPTION: Uses d3.interpolateObject() to create an interpolator between two objects. This example interpolates between {x: 0, y: 1} and {x: 1, y: 10, z: 100}, returning an object with values halfway between the corresponding properties.

LANGUAGE: javascript
CODE:
d3.interpolateObject({x: 0, y: 1}, {x: 1, y: 10, z: 100})(0.5) // {x: 0.5, y: 5.5, z: 100}

----------------------------------------

TITLE: Initializing Local Time Scale in D3.js
DESCRIPTION: Creates a position encoding using D3's local time scale. Maps dates between January 1-2, 2000 to pixel positions 0-960, demonstrating both forward and inverse scaling.

LANGUAGE: javascript
CODE:
const x = d3.scaleTime([new Date(2000, 0, 1), new Date(2000, 0, 2)], [0, 960]);
x(new Date(2000, 0, 1, 5)); // 200
x(new Date(2000, 0, 1, 16)); // 640
x.invert(200); // Sat Jan 01 2000 05:00:00 GMT-0800 (PST)
x.invert(640); // Sat Jan 01 2000 16:00:00 GMT-0800 (PST)

----------------------------------------

TITLE: Initializing Tree Data in JavaScript
DESCRIPTION: Defines an array of strings representing a hierarchical structure of Greek gods and primordial entities.

LANGUAGE: javascript
CODE:
const gods = [
  "Chaos/Gaia/Mountains",
  "Chaos/Gaia/Pontus",
  "Chaos/Gaia/Uranus",
  "Chaos/Eros",
  "Chaos/Erebus",
  "Chaos/Tartarus"
];

----------------------------------------

TITLE: Retrieving the Current Exponent of a Power Scale in D3
DESCRIPTION: Demonstrates how to retrieve the current exponent of a power scale using the exponent() method without arguments. This example assumes 'x' is a previously defined power scale.

LANGUAGE: javascript
CODE:
x.exponent() // 2

----------------------------------------

TITLE: Default Cluster Separation Function Implementation
DESCRIPTION: Default implementation of the separation accessor function used to determine spacing between neighboring leaf nodes in the cluster layout.

LANGUAGE: javascript
CODE:
function separation(a, b) {
  return a.parent == b.parent ? 1 : 2;
}

----------------------------------------

TITLE: Creating a discrete interpolator in D3.js
DESCRIPTION: Uses d3.interpolateDiscrete() to create a discrete interpolator for an array of values. This example creates an interpolator for ['red', 'blue', 'green'] and returns the value at t = 0.5.

LANGUAGE: javascript
CODE:
d3.interpolateDiscrete(["red", "blue", "green"])(0.5) // "blue"

----------------------------------------

TITLE: Getting the Range of a Quantize Scale in D3.js
DESCRIPTION: Demonstrates how to retrieve the current range of a quantize scale using the range() method without arguments.

LANGUAGE: javascript
CODE:
color.range() // ["#eff3ff", "#bdd7e7", "#6baed6", "#3182bd", "#08519c"]

----------------------------------------

TITLE: Blurring 2D Matrix with D3 blur2 Function
DESCRIPTION: Shows how to blur a 2D matrix using d3.blur2. The matrix is represented as a flat array with specified width and height, and the function applies horizontal and vertical blurs with given radii.

LANGUAGE: javascript
CODE:
const matrix = {
  width: 4,
  height: 3,
  data: [
    1, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 1
  ]
};

d3.blur2(matrix, 1);

----------------------------------------

TITLE: Configuring Rounding in D3 Treemap
DESCRIPTION: Enables or disables rounding of rectangle dimensions in the treemap layout. Rounding can improve the appearance of the treemap but may introduce small gaps.

LANGUAGE: javascript
CODE:
*treemap*.round(*round*)

----------------------------------------

TITLE: Creating a Diverging Scale with Domain and Interpolator in D3.js
DESCRIPTION: Demonstrates how to create a diverging scale with a specified domain and interpolator function. The scale maps a continuous input domain to a continuous output range, typically used for color encoding.

LANGUAGE: javascript
CODE:
const color = d3.scaleDiverging([-1, 0, 1], d3.interpolateRdBu);

----------------------------------------

TITLE: Creating Partition Layout in D3
DESCRIPTION: Creates a new partition layout with default settings that can be used to generate space-filling hierarchical visualizations. The layout assigns x0, y0, x1, y1 coordinates to each node in the hierarchy.

LANGUAGE: javascript
CODE:
partition()

----------------------------------------

TITLE: Array-based Sequential Scale in D3
DESCRIPTION: Creates a sequential scale using an array of colors as the output range.

LANGUAGE: javascript
CODE:
const color = d3.scaleSequential(["red", "blue"]);

----------------------------------------

TITLE: Setting Right Padding in D3 Treemap
DESCRIPTION: Sets or gets the right padding function for the treemap layout. Right padding separates the right edge of a node from its children.

LANGUAGE: javascript
CODE:
*treemap*.paddingRight(*padding*)

----------------------------------------

TITLE: Creating D3 Quantile Scale
DESCRIPTION: Constructs a new quantile scale by mapping penguin body mass data to a 5-color blue scheme.

LANGUAGE: javascript
CODE:
const color = d3.scaleQuantile(penguins.map((d) => d.body_mass_g), d3.schemeBlues[5]);

----------------------------------------

TITLE: Path ToString Method
DESCRIPTION: Demonstrates converting path commands to SVG path data string format.

LANGUAGE: javascript
CODE:
path.toString() // "M40,0A40,40,0,1,1,-40,0A40,40,0,1,1,40,0"

----------------------------------------

TITLE: Setting Left Padding in D3 Treemap
DESCRIPTION: Sets or gets the left padding function for the treemap layout. Left padding separates the left edge of a node from its children.

LANGUAGE: javascript
CODE:
*treemap*.paddingLeft(*padding*)

----------------------------------------

TITLE: Computing Set Intersection in D3.js
DESCRIPTION: Returns a new InternSet containing values that appear in all provided iterables. Maintains order based on first occurrence.

LANGUAGE: javascript
CODE:
d3.intersection([0, 2, 1, 0], [1, 3]) // Set {1}

----------------------------------------

TITLE: Explicit Line Generator Configuration in D3.js
DESCRIPTION: Demonstrates a more explicit way of configuring a line generator by setting x and y accessors separately.

LANGUAGE: javascript
CODE:
const line = d3.line()
    .x((d) => x(d.Date))
    .y((d) => y(d.Close));

----------------------------------------

TITLE: Creating a Center Force in D3
DESCRIPTION: This snippet demonstrates how to create a new center force in D3, positioning it at the center of the viewport using the width and height variables.

LANGUAGE: javascript
CODE:
const center = d3.forceCenter(width / 2, height / 2);

----------------------------------------

TITLE: Initializing D3 InternMap with Date Keys
DESCRIPTION: Creates a new InternMap instance with Date objects as keys. This demonstrates how to store and map values to specific dates using D3's InternMap, which properly handles date equality comparison.

LANGUAGE: javascript
CODE:
const valueByDate = new d3.InternMap([
  [new Date("2021-01-01"), 42],
  [new Date("2022-01-01"), 12],
  [new Date("2023-01-01"), 45]
]);

----------------------------------------

TITLE: Using Dice Tiling in D3 Treemap
DESCRIPTION: A tiling method that divides the rectangular area horizontally according to the value of each child node. Children are positioned in order from left to right.

LANGUAGE: javascript
CODE:
treemapDice(*node*, *x0*, *y0*, *x1*, *y1*)

----------------------------------------

TITLE: Generating Cartesian Product with D3 Cross
DESCRIPTION: Creates a Cartesian product of multiple iterables, with optional reducer function for custom combinations.

LANGUAGE: javascript
CODE:
d3.cross([1, 2], ["x", "y"]) // [[1, "x"], [1, "y"], [2, "x"], [2, "y"]]

LANGUAGE: javascript
CODE:
d3.cross([1, 2], ["x", "y"], (a, b) => a + b) // ["1x", "1y", "2x", "2y"]

----------------------------------------

TITLE: Removing Data from D3 Quadtree
DESCRIPTION: Demonstrates how to remove individual data points or arrays of data from a D3 quadtree.

LANGUAGE: javascript
CODE:
tree.remove(data[0]);

LANGUAGE: javascript
CODE:
tree.removeAll(data);

----------------------------------------

TITLE: Setting Point Radius for Geographic Path Generator in D3
DESCRIPTION: Shows how to set the radius used to display Point and MultiPoint geometries in a geographic path generator.

LANGUAGE: javascript
CODE:
const path = d3.geoPath().pointRadius(10);

----------------------------------------

TITLE: Creating forceX in D3
DESCRIPTION: Creates a new position force along the x-axis towards the center of the width.

LANGUAGE: JavaScript
CODE:
const x = d3.forceX(width / 2);

----------------------------------------

TITLE: Converting RGB to HSL with d3.hsl
DESCRIPTION: Shows how to convert an RGB color to HSL using d3.hsl function.

LANGUAGE: javascript
CODE:
c = d3.hsl(c); // {h: 207.27…, s: 0.44, l: 0.4902…, opacity: 1}

----------------------------------------

TITLE: Retrieving Pointer Coordinates in D3.js
DESCRIPTION: Illustrates the use of d3.pointer() function to get the x and y coordinates of a pointer event relative to a target element. This is useful for handling mouse or touch interactions.

LANGUAGE: javascript
CODE:
const [x, y] = d3.pointer(event);

----------------------------------------

TITLE: Setting Sequential Scale Interpolator in D3
DESCRIPTION: Shows how to set an interpolator function for a sequential scale.

LANGUAGE: javascript
CODE:
const color = d3.scaleSequential().interpolator(d3.interpolateBlues);

----------------------------------------

TITLE: Implementing Custom Spherical Mercator Projection
DESCRIPTION: Example demonstrating how to implement a custom spherical Mercator projection using the geoProjection constructor.

LANGUAGE: JavaScript
CODE:
var mercator = d3.geoProjection(function(x, y) {
  return [x, Math.log(Math.tan(Math.PI / 4 + y / 2))];
});

----------------------------------------

TITLE: Creating forceY in D3
DESCRIPTION: Creates a new position force along the y-axis towards the center of the height.

LANGUAGE: JavaScript
CODE:
const y = d3.forceY(height / 2);

----------------------------------------

TITLE: Setting the Domain of a Quantize Scale in D3.js
DESCRIPTION: Demonstrates how to set the domain of an existing quantize scale using the domain() method. The example sets the domain to [0, 100] for a color scale.

LANGUAGE: javascript
CODE:
const color = d3.scaleQuantize(d3.schemeBlues[9]);
color.domain([0, 100]);

----------------------------------------

TITLE: Matrix Transposition with D3 Transpose
DESCRIPTION: Transposes a two-dimensional matrix using the zip operator.

LANGUAGE: javascript
CODE:
d3.transpose([["Alice", "Bob", "Carol"], [32, 13, 14]]) // [["Alice", 32], ["Bob", 13], ["Carol", 14]]

LANGUAGE: javascript
CODE:
d3.transpose([["Alice", 32], ["Bob", 13], ["Carol", 14]]) // [["Alice", "Bob", "Carol"], [32, 13, 14]]

----------------------------------------

TITLE: Default Link Distance Function in D3.js
DESCRIPTION: Default function for determining the distance between linked nodes in the force layout.

LANGUAGE: javascript
CODE:
function distance() {
  return 30;
}

----------------------------------------

TITLE: Creating a Treemap Layout in D3
DESCRIPTION: Creates a new treemap layout with default settings. This is the starting point for using the treemap layout in D3.

LANGUAGE: javascript
CODE:
treemap()

----------------------------------------

TITLE: Setting Outer Padding in D3 Treemap
DESCRIPTION: Sets the top, right, bottom, and left padding for the treemap layout. Outer padding separates the edge of a node from its children.

LANGUAGE: javascript
CODE:
*treemap*.paddingOuter(*padding*)

----------------------------------------

TITLE: Checking Subset Relationship in D3.js
DESCRIPTION: Determines if one iterable is a subset of another by verifying that all values in the first iterable exist in the second.

LANGUAGE: javascript
CODE:
d3.subset([1, 3], [0, 2, 1, 3, 0]) // true

----------------------------------------

TITLE: D3 Transverse Mercator Projection Configuration
DESCRIPTION: Configuration for D3's transverse Mercator projection with rotation and extent fitting parameters.

LANGUAGE: javascript
CODE:
d3.geoTransverseMercator().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width - 1]], {type: "Sphere"}).precision(0.2)

----------------------------------------

TITLE: Setting Angle Accessor for D3 Radial Line - JavaScript
DESCRIPTION: Configures the angle accessor function for the radial line generator to determine angular position in radians.

LANGUAGE: javascript
CODE:
const line = d3.lineRadial().angle((d) => a(d.Date));

----------------------------------------

TITLE: Permuting Array Elements using D3
DESCRIPTION: Demonstrates the use of d3.permute to create a new array by rearranging elements of the source array based on specified indices.

LANGUAGE: javascript
CODE:
d3.permute(["a", "b", "c"], [1, 2, 0]) // returns ["b", "c", "a"]

----------------------------------------

TITLE: D3 Natural Earth Projection Configuration
DESCRIPTION: Configuration for D3's Natural Earth projection, a pseudocylindrical projection with rotation and extent fitting parameters.

LANGUAGE: javascript
CODE:
d3.geoNaturalEarth1().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width * 0.5 - 1]], {type: "Sphere"}).precision(0.2)

----------------------------------------

TITLE: Creating Pack Layout in D3
DESCRIPTION: Creates a new pack layout with default settings for creating circle-packed hierarchical visualizations.

LANGUAGE: javascript
CODE:
pack()

----------------------------------------

TITLE: Custom Attribute Tweening with D3 Transition
DESCRIPTION: Example of using the low-level tween() method to create a custom interpolation of the fill attribute to blue.

LANGUAGE: javascript
CODE:
transition.tween("attr.fill", function() {
  const i = d3.interpolateRgb(this.getAttribute("fill"), "blue");
  return function(t) {
    this.setAttribute("fill", i(t));
  };
});

----------------------------------------

TITLE: Calculating Tick Increments in D3.js
DESCRIPTION: Examples of d3.tickIncrement() function that returns the step size between ticks. Returns negative inverse tick step if the normal step would be less than one.

LANGUAGE: javascript
CODE:
d3.tickIncrement(1, 9, 5) // 2

LANGUAGE: javascript
CODE:
d3.tickIncrement(1, 9, 20) // -2, meaning a tick step 0.5

----------------------------------------

TITLE: D3 Azimuthal Equal-Area Projection
DESCRIPTION: Implementation of an azimuthal equal-area map projection with rotation and extent fitting.

LANGUAGE: javascript
CODE:
d3.geoAzimuthalEqualArea().rotate([110, -40]).fitExtent([[1, 1], [width - 1, height - 1]], {type: "Sphere"}).precision(0.2)

----------------------------------------

TITLE: Long-path HSL Color Interpolation in D3.js
DESCRIPTION: Creates a color interpolator between two colors in HSL color space without using the shortest path between hues.

LANGUAGE: javascript
CODE:
d3.interpolateHslLong("purple", "orange")

----------------------------------------

TITLE: Copying and Modifying Color with copy Method
DESCRIPTION: Shows how to create a copy of a color object and modify its properties using the copy method.

LANGUAGE: javascript
CODE:
d3.color("steelblue").copy({opacity: 0.5}) // {r: 70, g: 130, b: 180, opacity: 0.5}

----------------------------------------

TITLE: D3 Orthographic Projection
DESCRIPTION: Implementation of an orthographic map projection with rotation and extent fitting.

LANGUAGE: javascript
CODE:
d3.geoOrthographic().rotate([110, -40]).fitExtent([[1, 1], [width - 1, height - 1]], {type: "Sphere"}).precision(0.2)

----------------------------------------

TITLE: Blurring 1D Array with D3 blur Function
DESCRIPTION: Demonstrates using d3.blur to smooth a random walk array. The function applies three iterations of a moving average transform for approximating a Gaussian kernel with the specified radius.

LANGUAGE: javascript
CODE:
const numbers = d3.cumsum({length: 1000}, () => Math.random() - 0.5);
d3.blur(numbers, 5); // a smoothed random walk

----------------------------------------

TITLE: Constructing a Line Generator in D3.js
DESCRIPTION: Creates a new line generator with custom x and y accessors for Date and Close values respectively.

LANGUAGE: javascript
CODE:
const line = d3.line((d) => x(d.Date), (d) => y(d.Close));

----------------------------------------

TITLE: Applying Slice Tiling in D3 Treemap
DESCRIPTION: A tiling method that divides the rectangular area vertically according to the value of each child node. Children are positioned in order from top to bottom.

LANGUAGE: javascript
CODE:
treemapSlice(*node*, *x0*, *y0*, *x1*, *y1*)

----------------------------------------

TITLE: Brightening Color with brighter Method
DESCRIPTION: Demonstrates using the brighter method to create a brighter version of a color.

LANGUAGE: javascript
CODE:
d3.color("steelblue").brighter(1) // {r: 100, g: 185.71428571428572, b: 257.14285714285717, opacity: 1}

----------------------------------------

TITLE: Retrieving Current Projection from Path Generator in D3
DESCRIPTION: Illustrates how to retrieve the current projection set for a geographic path generator.

LANGUAGE: javascript
CODE:
path.projection() // a d3.geoAlbers instance

----------------------------------------

TITLE: Creating a D3 Quadtree
DESCRIPTION: Demonstrates how to create a new quadtree using D3's quadtree function with optional data and accessor functions.

LANGUAGE: javascript
CODE:
const tree = d3.quadtree(data);

LANGUAGE: javascript
CODE:
const tree = d3.quadtree().addAll(data);

LANGUAGE: javascript
CODE:
const tree = d3.quadtree().x(x).y(y).addAll(data);

----------------------------------------

TITLE: Formatting Color as Hexadecimal String
DESCRIPTION: Demonstrates formatting a color as a hexadecimal string using the formatHex method.

LANGUAGE: javascript
CODE:
d3.color("steelblue").formatHex() // "#4682b4"

----------------------------------------

TITLE: Configuring Inner Padding in D3 Treemap
DESCRIPTION: Sets or gets the inner padding function for the treemap layout. Inner padding separates a node's adjacent children.

LANGUAGE: javascript
CODE:
*treemap*.paddingInner(*padding*)

----------------------------------------

TITLE: Sorting Array in Ascending Order using D3
DESCRIPTION: Demonstrates the use of d3.ascending as a comparator function to sort an array in ascending order.

LANGUAGE: javascript
CODE:
[39, 21, 1, 104, 22].sort(d3.ascending) // [1, 21, 22, 39, 104]

----------------------------------------

TITLE: Calculating Projected Planar Area in D3
DESCRIPTION: Shows how to use the area method of a path generator to calculate the projected planar area of a GeoJSON object.

LANGUAGE: javascript
CODE:
path.area(california) // 17063.1671837991 px²

----------------------------------------

TITLE: Using BisectRight Function
DESCRIPTION: Demonstrates using bisectRight to find an insertion point after equivalent values.

LANGUAGE: javascript
CODE:
d3.bisectRight(aapl.map((d) => d.Date), new Date("2014-01-02")) // 163

----------------------------------------

TITLE: Creating HSL Color with d3.hsl
DESCRIPTION: Shows how to create an HSL color from a named color using d3.hsl function.

LANGUAGE: javascript
CODE:
d3.hsl("yellow") // {h: 60, s: 1, l: 0.5, opacity: 1}

----------------------------------------

TITLE: Setting Size of D3 Treemap Layout
DESCRIPTION: Sets or gets the size of the treemap layout. The size is specified as a two-element array of width and height.

LANGUAGE: javascript
CODE:
*treemap*.size(*size*)

----------------------------------------

TITLE: Creating a Cyclical Continuous Color Scale with D3
DESCRIPTION: This code demonstrates how to create a cyclical continuous color scale using D3's interpolateRainbow color scheme. It uses the scaleSequential function to map a continuous domain to the Rainbow color range.

LANGUAGE: javascript
CODE:
const color = d3.scaleSequential(d3.interpolateRainbow);

----------------------------------------

TITLE: Creating CIELAB Color with d3.lab
DESCRIPTION: Demonstrates creating a CIELAB color from a named color using d3.lab function.

LANGUAGE: javascript
CODE:
d3.lab("red") // {l: 54.29173376861782, a: 80.8124553179771, b: 69.88504032350531, opacity: 1}

----------------------------------------

TITLE: Setting Padding in D3 Treemap
DESCRIPTION: Sets both inner and outer padding for the treemap layout. Padding can be specified as a number or a function.

LANGUAGE: javascript
CODE:
*treemap*.padding(*padding*)

----------------------------------------

TITLE: Creating Custom Time Interval
DESCRIPTION: Demonstrates how to create a custom time interval (utcDay) using the timeInterval function, defining floor, offset, count, and field functions.

LANGUAGE: JavaScript
CODE:
const utcDay = d3.timeInterval(
  (date) => date.setUTCHours(0, 0, 0, 0), // floor
  (date, step) => date.setUTCDate(date.getUTCDate() + step), // offset
  (start, end) => (end - start) / 864e5, // count
  (date) => date.getUTCDate() - 1 // field
);

----------------------------------------

TITLE: Rendering Multiple Features as Separate Path Elements in D3
DESCRIPTION: Demonstrates how to render multiple geographic features as separate path elements, which can be useful for styling and interaction.

LANGUAGE: javascript
CODE:
svg.selectAll()
  .data(features)
  .join("path")
    .attr("d", d3.geoPath());

----------------------------------------

TITLE: Calculating Great-Arc Length in D3-Geo
DESCRIPTION: Computes the great-arc length of a GeoJSON object in radians. For polygons, it calculates the perimeter of exterior and interior rings.

LANGUAGE: JavaScript
CODE:
geoLength(object)

----------------------------------------

TITLE: Creating CIELCh Color with d3.lch
DESCRIPTION: Shows how to create a CIELCh color from a named color using d3.lch function.

LANGUAGE: javascript
CODE:
d3.lch("yellow") // {h: 99.57458688693687, c: 94.70776566727464, l: 97.60712516622824, opacity: 1}

----------------------------------------

TITLE: Setting Range for D3 Ordinal Scale
DESCRIPTION: Demonstrates how to set the range of values for an ordinal scale.

LANGUAGE: javascript
CODE:
const color = d3.scaleOrdinal().range(["red", "green", "blue"]);

----------------------------------------

TITLE: Interpolating between two arbitrary values in D3.js
DESCRIPTION: Uses d3.interpolate() to create an interpolator between two values. This example interpolates between the colors 'red' and 'blue', returning the color halfway between them.

LANGUAGE: javascript
CODE:
d3.interpolate("red", "blue")(0.5) // "rgb(128, 0, 128)"

----------------------------------------

TITLE: Unknown Values in D3 Ordinal Scale
DESCRIPTION: Shows how to handle unknown input values by setting a specific output value for undefined inputs.

LANGUAGE: javascript
CODE:
const color = d3.scaleOrdinal(["a", "b", "c"], d3.schemeTableau10).unknown(null);
color("a"); // "#4e79a7"
color("b"); // "#f28e2c"
color("c"); // "#e15759"
color("d"); // null

----------------------------------------

TITLE: Nice Domain Adjustment in D3.js Time Scale
DESCRIPTION: Shows how to extend a time scale's domain to nice round values, useful when working with irregular data-driven domains.

LANGUAGE: javascript
CODE:
const x = d3.scaleUtc().domain([new Date("2000-01-01T12:34Z"), new Date("2000-01-01T12:59Z")]).nice();
x.domain(); // [2000-01-01T12:30Z, 2000-01-01T13:00Z]

----------------------------------------

TITLE: Finding Polygon Centroid with D3
DESCRIPTION: Shows how to calculate the centroid (geometric center) of a polygon using d3.polygonCentroid().

LANGUAGE: javascript
CODE:
d3.polygonCentroid([[1, 1], [1.5, 0], [2, 1]]) // [1.5, 0.6666666666666666]

----------------------------------------

TITLE: Creating a Root Transition in D3.js
DESCRIPTION: This snippet shows how to create a transition on the root element using d3.selection().transition().

LANGUAGE: javascript
CODE:
d3.selection()
  .transition(name)

----------------------------------------

TITLE: Rounding interpolated numbers in D3.js
DESCRIPTION: Uses d3.interpolateRound() to create an interpolator between two numbers that rounds the result to the nearest integer. This example interpolates between 20 and 620, returning the rounded value 82.1% of the way between them.

LANGUAGE: javascript
CODE:
d3.interpolateRound(20, 620)(0.821) // 513

----------------------------------------

TITLE: Copying D3 Ordinal Scale
DESCRIPTION: Demonstrates how to create an exact copy of an ordinal scale that can be modified independently.

LANGUAGE: javascript
CODE:
const c1 = d3.scaleOrdinal(["a", "b", "c"], d3.schemeTableau10);
const c2 = c1.copy();

----------------------------------------

TITLE: Path Serialization Example
DESCRIPTION: Demonstrates how to use d3.path() to create and serialize path commands to SVG path data format.

LANGUAGE: javascript
CODE:
const path = d3.path();
drawCircle(path, 40);
path.toString(); // "M40,0A40,40,0,1,1,-40,0A40,40,0,1,1,40,0"

----------------------------------------

TITLE: Interpolating between two arrays in D3.js
DESCRIPTION: Uses d3.interpolateArray() to create an interpolator between two arrays. This example interpolates between [0, 0, 0] and [1, 2, 3], returning an array with values halfway between the corresponding elements.

LANGUAGE: javascript
CODE:
d3.interpolateArray([0, 0, 0], [1, 2, 3])(0.5) // [0.5, 1, 1.5]

----------------------------------------

TITLE: Setting D3 Quantile Scale Range
DESCRIPTION: Examples of setting and retrieving the range for a quantile scale.

LANGUAGE: javascript
CODE:
const color = d3.scaleQuantile();
color.range(d3.schemeBlues[5]);

color.range() // ["#eff3ff", "#bdd7e7", "#6baed6", "#3182bd", "#08519c"]

----------------------------------------

TITLE: Configuring Stack Keys in D3.js
DESCRIPTION: Sets the keys accessor for the stack generator. This determines which data series will be stacked and in what order.

LANGUAGE: JavaScript
CODE:
const stack = d3.stack().keys(["apples", "bananas", "cherries", "durians"]);

----------------------------------------

TITLE: Calculating Polygon Area with D3
DESCRIPTION: Demonstrates how to calculate the signed area of a polygon using d3.polygonArea(). Returns positive area for counterclockwise vertices, negative for clockwise.

LANGUAGE: javascript
CODE:
d3.polygonArea([[1, 1], [1.5, 0], [2, 1]]) // -0.5

----------------------------------------

TITLE: Setting Domain and Range for a Threshold Scale in D3.js
DESCRIPTION: Demonstrates how to set and get the domain and range of a threshold scale. The domain values must be in ascending order, and the number of range values should be one more than the number of domain values.

LANGUAGE: JavaScript
CODE:
const color = d3.scaleThreshold(["red", "white", "green"]).domain([0, 1]);

LANGUAGE: JavaScript
CODE:
color.domain() // [0, 1]

LANGUAGE: JavaScript
CODE:
const color = d3.scaleThreshold().range(["red", "white", "green"]);

LANGUAGE: JavaScript
CODE:
color.range() // ["red", "white", "green"]

----------------------------------------

TITLE: Generating uniform samples from an interpolator in D3.js
DESCRIPTION: Uses d3.quantize() to generate a specified number of uniformly-spaced samples from an interpolator. This example creates 4 samples from an interpolator between 'red' and 'blue'.

LANGUAGE: javascript
CODE:
d3.quantize(d3.interpolate("red", "blue"), 4) // ["rgb(255, 0, 0)", "rgb(170, 0, 85)", "rgb(85, 0, 170)", "rgb(0, 0, 255)"]

----------------------------------------

TITLE: Getting Thresholds of a Quantize Scale in D3.js
DESCRIPTION: Shows how to retrieve the computed thresholds within the domain of a quantize scale using the thresholds() method.

LANGUAGE: javascript
CODE:
color.thresholds() // [0.2, 0.4, 0.6, 0.8]

----------------------------------------

TITLE: Rendering a Line Generator to Canvas Context in D3.js
DESCRIPTION: This snippet illustrates how to use a line generator to render data directly to a Canvas 2D context, providing an alternative to SVG rendering.

LANGUAGE: javascript
CODE:
line.context(context)(data);

----------------------------------------

TITLE: Basic Zoom Interpolation in D3.js
DESCRIPTION: Demonstrates the interpolateZoom function that creates a smooth transition between two viewport states. Each view is defined by center coordinates (cx, cy) and viewport width. Returns interpolated values at the specified progress (0.5 in this example).

LANGUAGE: javascript
CODE:
d3.interpolateZoom([30, 30, 40], [135, 85, 60])(0.5) // [72, 52, 126.04761005270991]

----------------------------------------

TITLE: Copying a Quantize Scale in D3.js
DESCRIPTION: Demonstrates how to create an exact copy of a quantize scale using the copy() method. Changes to the original scale will not affect the copy, and vice versa.

LANGUAGE: javascript
CODE:
const c1 = d3.scaleQuantize(d3.schemeBlues[5]);
const c2 = c1.copy();

----------------------------------------

TITLE: Custom Force Implementation
DESCRIPTION: Example of implementing a custom force that moves nodes towards the origin, demonstrating how forces can modify node velocities based on current positions.

LANGUAGE: javascript
CODE:
function force(alpha) {
  for (let i = 0, n = nodes.length, node, k = alpha * 0.1; i < n; ++i) {
    node = nodes[i];
    node.vx -= node.x * k;
    node.vy -= node.y * k;
  }
}

----------------------------------------

TITLE: Initializing D3 Quadtree with Random Points
DESCRIPTION: Creates a quadtree with 1000 random points using D3's random number generator and quadtree constructor.

LANGUAGE: javascript
CODE:
const random = d3.randomNormal.source(d3.randomLcg(42))();
const points = Array.from({length: 1000}, () => [random(), random()]);
const tree = d3.quadtree(d3.range(points.length), (i) => points[i][0], (i) => points[i][1]);
const findState = shallowRef({x: 0, y: 0, i: -1});

----------------------------------------

TITLE: Custom Curvature Zoom Interpolation in D3.js
DESCRIPTION: Shows how to use the rho method to customize the interpolation curvature. A lower rho value (0.5) creates a more linear interpolation compared to the default sqrt(2). The example demonstrates interpolation with the same viewport states at 50% progress.

LANGUAGE: javascript
CODE:
d3.interpolateZoom.rho(0.5)([30, 30, 40], [135, 85, 60])(0.5) // [72, 52, 51.09549882328188]

----------------------------------------

TITLE: Copying a Threshold Scale in D3.js
DESCRIPTION: Creates an exact copy of a threshold scale. Changes to the original scale will not affect the copy, and vice versa.

LANGUAGE: JavaScript
CODE:
const c1 = d3.scaleThreshold(d3.schemeBlues[5]);
const c2 = c1.copy();

----------------------------------------

TITLE: Full Precision Array Summation
DESCRIPTION: Calculates the full-precision sum of an array of numbers using D3's fsum function.

LANGUAGE: javascript
CODE:
d3.fsum([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]) // 1

LANGUAGE: javascript
CODE:
d3.fsum(penguins, (d) => d.body_mass_g) // 1437000

----------------------------------------

TITLE: Retrieving Selection Nodes as an Array in D3
DESCRIPTION: Shows how to use the nodes() method to get an array of all non-null elements in a selection, and provides an equivalent using Array.from().

LANGUAGE: javascript
CODE:
d3.selectAll("p").nodes() // [p, p, p, …]

LANGUAGE: javascript
CODE:
Array.from(selection)

----------------------------------------

TITLE: Setting Interpolator for Diverging Scale in D3.js
DESCRIPTION: Shows how to set the interpolator function for an existing diverging scale using the interpolator method.

LANGUAGE: javascript
CODE:
const color = d3.scaleDiverging().interpolator(d3.interpolateRdBu);

----------------------------------------

TITLE: Timer Output Example
DESCRIPTION: Example output showing the elapsed time values logged by the timer callback function

LANGUAGE: javascript
CODE:
3
25
48
65
85
106
125
146
167
189
209

----------------------------------------

TITLE: Removing Force from Simulation
DESCRIPTION: Demonstrates how to remove a specific force from an existing simulation by passing null.

LANGUAGE: javascript
CODE:
simulation.force("charge", null);

----------------------------------------

TITLE: Getting the Domain of a Quantize Scale in D3.js
DESCRIPTION: Shows how to retrieve the current domain of a quantize scale using the domain() method without arguments.

LANGUAGE: javascript
CODE:
color.domain() // [0, 100]

----------------------------------------

TITLE: Alternative D3 Element Modification Approach
DESCRIPTION: Shows an alternative approach to modifying elements without method chaining, achieving the same result as the chained version.

LANGUAGE: javascript
CODE:
const p = d3.selectAll("p");
p.attr("class", "graf");
p.style("color", "red");

----------------------------------------

TITLE: Creating Diverging Scale with Piecewise Interpolator in D3.js
DESCRIPTION: Shows an alternative way to create a diverging scale with a piecewise interpolator, equivalent to using the range method.

LANGUAGE: javascript
CODE:
const color = d3.scaleDiverging(d3.piecewise(["blue", "white", "red"]));

----------------------------------------

TITLE: Unbinding Zoom Events
DESCRIPTION: Removes zoom event listeners from a selection.

LANGUAGE: javascript
CODE:
selection.on(".zoom", null);

----------------------------------------

TITLE: Sorting Nodes in D3 Hierarchy by Height and Value
DESCRIPTION: Shows how to sort nodes by descending height and then descending value, which is recommended for treemap and icicle layouts.

LANGUAGE: javascript
CODE:
root
    .sum((d) => d.value)
    .sort((a, b) => b.height - a.height || b.value - a.value);

----------------------------------------

TITLE: Using Sturges' Formula for D3.js Bin Thresholds in JavaScript
DESCRIPTION: Applies Sturges' formula to determine the number of bins for a dataset.

LANGUAGE: javascript
CODE:
const bin = d3.bin().thresholds(d3.thresholdSturges);

----------------------------------------

TITLE: Applying Squarified Tiling in D3 Treemap
DESCRIPTION: Implements the squarified treemap algorithm, which aims to produce rectangles with a specified aspect ratio. This is the default tiling method for D3 treemaps.

LANGUAGE: javascript
CODE:
treemapSquarify(*node*, *x0*, *y0*, *x1*, *y1*)

----------------------------------------

TITLE: Array Zipping with D3 Zip
DESCRIPTION: Combines multiple arrays element-wise into an array of arrays.

LANGUAGE: javascript
CODE:
d3.zip(["Alice", "Bob", "Carol"], [32, 13, 14]) // [["Alice", 32], ["Bob", 13], ["Carol", 14]]

----------------------------------------

TITLE: Canvas Context Configuration
DESCRIPTION: Configures symbol generator to render to a Canvas context instead of generating SVG path data.

LANGUAGE: javascript
CODE:
const context = canvas.getContext("2d");
const symbol = d3.symbol().context(context);

----------------------------------------

TITLE: Sorting Nodes in D3 Hierarchy by Height and ID
DESCRIPTION: Illustrates sorting nodes by descending height and then ascending id, which is recommended for tree and dendrogram layouts.

LANGUAGE: javascript
CODE:
root
    .sum((d) => d.value)
    .sort((a, b) => b.height - a.height || d3.ascending(a.id, b.id));

----------------------------------------

TITLE: Creating Custom Bisector with Comparator Function
DESCRIPTION: Creates a bisector using a comparator function that compares dates by calculating their difference.

LANGUAGE: javascript
CODE:
const bisector = d3.bisector((d, x) => d.Date - x);

----------------------------------------

TITLE: Extending D3 Selection Prototype in JavaScript
DESCRIPTION: Demonstrates how to add a custom method to the D3 selection prototype for checking checkboxes.

LANGUAGE: javascript
CODE:
d3.selection.prototype.checked = function(value) {
  return arguments.length < 1
      ? this.property("checked")
      : this.property("checked", !!value);
};

----------------------------------------

TITLE: Setting Pack Layout Radius
DESCRIPTION: Sets or gets the radius accessor function for the pack layout. When null, radius is derived from node.value, otherwise uses the specified function.

LANGUAGE: javascript
CODE:
pack.radius(radius)

----------------------------------------

TITLE: Using BisectLeft Function
DESCRIPTION: Shows how to use bisectLeft to find an insertion point before equivalent values.

LANGUAGE: javascript
CODE:
d3.bisectLeft(aapl.map((d) => d.Date), new Date("2014-01-02")) // 162

----------------------------------------

TITLE: Text Interpolation with D3 Transition
DESCRIPTION: Example of using textTween() to interpolate text content between numbers using d3.interpolateRound.

LANGUAGE: javascript
CODE:
transition.textTween(() => d3.interpolateRound(0, 100));

----------------------------------------

TITLE: Using formatPrefix for Consistent SI Prefix Formatting
DESCRIPTION: This snippet shows how to use formatPrefix to create a formatter that consistently uses the same SI prefix for a range of values.

LANGUAGE: javascript
CODE:
const f = d3.formatPrefix(",.0", 1e-6);
f(0.00042); // "420µ"
f(0.0042); // "4,200µ"

----------------------------------------

TITLE: Creating Default 10° Global Graticule with D3.js
DESCRIPTION: Demonstrates how to generate a default 10° global graticule as a GeoJSON MultiLineString geometry object using D3.js.

LANGUAGE: JavaScript
CODE:
function geoGraticule10() {
  return d3.geoGraticule()();
}

----------------------------------------

TITLE: Setting Partition Padding in D3
DESCRIPTION: Sets or gets the padding between adjacent child nodes in the partition layout. Default padding is 0.

LANGUAGE: javascript
CODE:
partition.padding(number)

----------------------------------------

TITLE: Sorting Array in Descending Order using D3
DESCRIPTION: Shows how to use d3.descending as a comparator function to sort an array in descending order.

LANGUAGE: javascript
CODE:
[39, 21, 1, 104, 22].sort(d3.descending) // [104, 39, 22, 21, 1]

----------------------------------------

TITLE: Using a Band Scale in D3
DESCRIPTION: Shows how to use a band scale to map domain values to range values.

LANGUAGE: javascript
CODE:
const x = d3.scaleBand(["a", "b", "c"], [0, 960]);
x("a"); // 0
x("b"); // 320
x("c"); // 640
x("d"); // undefined

----------------------------------------

TITLE: Generating Uniform Random Numbers with D3
DESCRIPTION: Generates random numbers with a uniform distribution between specified minimum (inclusive) and maximum (exclusive) values. Default range is [0,1) if no arguments provided.

LANGUAGE: javascript
CODE:
d3.randomUniform(6) // generate numbers ≥0 and <6

----------------------------------------

TITLE: Using Quickselect Algorithm with D3
DESCRIPTION: Demonstrates the use of d3.quickselect to partially sort an array and find the k-th smallest element.

LANGUAGE: javascript
CODE:
const numbers = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];

LANGUAGE: javascript
CODE:
d3.quickselect(numbers, 8)

----------------------------------------

TITLE: Initializing D3 InternSet with Dates
DESCRIPTION: Creates a new InternSet instance containing Date objects. This shows how to create a set of unique dates using D3's InternSet, which properly handles date equality comparison.

LANGUAGE: javascript
CODE:
const dates = new d3.InternSet([
  new Date("2021-01-01"),
  new Date("2022-01-01"),
  new Date("2023-01-01")
]);

----------------------------------------

TITLE: Setting Overall Padding for Band Scale in D3
DESCRIPTION: Shows how to set both inner and outer padding for a band scale using a single method.

LANGUAGE: javascript
CODE:
const x = d3.scaleBand(["a", "b", "c"], [0, 960]).padding({{padding}});

----------------------------------------

TITLE: Using Bisector.left Method
DESCRIPTION: Shows how to use the left() method of a custom bisector to find the exact index of a date in the dataset.

LANGUAGE: javascript
CODE:
d3.bisector((d) => d.Date).left(aapl, new Date("2014-01-02")) // 162

----------------------------------------

TITLE: Generating Normal Distribution Random Numbers with D3
DESCRIPTION: Generates random numbers following a normal (Gaussian) distribution with specified mean and standard deviation. Defaults to mean=0 and standard deviation=1 if not specified.

LANGUAGE: javascript
CODE:
d3.randomNormal(0, 1) // mean of 0, and standard deviation of 1

----------------------------------------

TITLE: Creating Deterministic Shuffle Function in D3
DESCRIPTION: Shows how to create a deterministic shuffle function using d3.shuffler with a specified random source.

LANGUAGE: javascript
CODE:
d3.shuffler(d3.randomLcg(42))([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) // [5, 3, 7, 6, 8, 9, 1, 4, 0, 2]

----------------------------------------

TITLE: Rendering Area Path
DESCRIPTION: Shows how to use the area generator to create an SVG path from data.

LANGUAGE: javascript
CODE:
svg.append("path").attr("d", area(data));

----------------------------------------

TITLE: Calculating Days Between Dates with d3.timeDay.count
DESCRIPTION: Demonstrates how to accurately count the number of days between two dates using d3.timeDay.count, avoiding issues with daylight saving time.

LANGUAGE: JavaScript
CODE:
const start = new Date(2015, 02, 01); // 2015-03-01T00:00
const end = new Date(2015, 03, 01); // 2015-04-01T00:00
d3.timeDay.count(start, end) // 31 😌

----------------------------------------

TITLE: Rendering a Brush in D3.js
DESCRIPTION: This snippet demonstrates how to append a brush to an SVG element and set up a brush event listener.

LANGUAGE: JavaScript
CODE:
svg.append("g")
    .attr("class", "brush")
    .call(d3.brush().on("brush", brushed));

----------------------------------------

TITLE: Setting Range for Diverging Scale in D3.js
DESCRIPTION: Illustrates how to set the range for a diverging scale using an array, which is automatically converted to an interpolator function.

LANGUAGE: javascript
CODE:
const color = d3.scaleDiverging().range(["blue", "white", "red"]);

----------------------------------------

TITLE: Creating a Categorical Color Scale with D3
DESCRIPTION: This example shows how to create a categorical color scale using D3's scaleOrdinal function and the Accent color scheme. It demonstrates the basic usage of D3's color schemes for data visualization.

LANGUAGE: javascript
CODE:
const color = d3.scaleOrdinal(d3.schemeAccent);

----------------------------------------

TITLE: Date Parsing with D3 UTC Parse
DESCRIPTION: Shows how to parse a date string into a Date object using d3.utcParse with a format pattern.

LANGUAGE: javascript
CODE:
const parseTime = d3.utcParse("%B %d, %Y");
parseTime("June 30, 2015"); // 2023-05-31

----------------------------------------

TITLE: Move To Path Command
DESCRIPTION: Example of using moveTo command to set the starting point of a path.

LANGUAGE: javascript
CODE:
path.moveTo(100, 100);

----------------------------------------

TITLE: Default Touch Support Detector for D3.js Brush
DESCRIPTION: This function detects touch support for the brush, used to determine whether to register touch event listeners.

LANGUAGE: JavaScript
CODE:
function touchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}

----------------------------------------

TITLE: Setting Transition Easing Function in D3
DESCRIPTION: Specifies the easing function for transitions. The easing function controls how intermediate values are calculated during the transition, affecting the animation's progression curve.

LANGUAGE: javascript
CODE:
transition.ease(d3.easeCubic);

LANGUAGE: javascript
CODE:
transition.ease() // d3.easeCubic

----------------------------------------

TITLE: Path Round Configuration
DESCRIPTION: Shows how to create a path with rounded decimal precision.

LANGUAGE: javascript
CODE:
const path = d3.pathRound(3);

----------------------------------------

TITLE: Initializing a D3 Chord Layout in JavaScript
DESCRIPTION: Creates a new chord layout with default settings using the d3.chord() function.

LANGUAGE: javascript
CODE:
const chord = d3.chord();

----------------------------------------

TITLE: Setting Projection for Geographic Path Generator in D3
DESCRIPTION: Shows how to set the projection for a geographic path generator using the projection method.

LANGUAGE: javascript
CODE:
const path = d3.geoPath().projection(d3.geoAlbers());

----------------------------------------

TITLE: Custom Rainbow Sequential Scale in D3
DESCRIPTION: Implements a custom rainbow color scale using HSL color interpolation.

LANGUAGE: javascript
CODE:
const rainbow = d3.scaleSequential((t) => d3.hsl(t * 360, 1, 0.5) + "");

----------------------------------------

TITLE: Generating Time Ticks with d3.utcTicks
DESCRIPTION: Shows how to generate an array of dates at regular intervals between a start and stop date using d3.utcTicks.

LANGUAGE: JavaScript
CODE:
const start = new Date("1970-03-01");
const stop = new Date("1996-03-19");
const count = 4;
const ticks = d3.utcTicks(start, stop, count); // [1975-01-01, 1980-01-01, 1985-01-01, 1990-01-01, 1995-01-01]

----------------------------------------

TITLE: Adding Numbers to D3 Adder
DESCRIPTION: Adds a number to the adder's current value and returns the adder instance for chaining.

LANGUAGE: javascript
CODE:
adder.add(42)

----------------------------------------

TITLE: Creating RGB Color with d3.rgb
DESCRIPTION: Demonstrates creating an RGB color from an HSL color specifier using d3.rgb function.

LANGUAGE: javascript
CODE:
d3.rgb("hsl(120, 50%, 20%)") // {r: 25.5, g: 76.5, b: 25.5, opacity: 1}

----------------------------------------

TITLE: Point Scale Range Setting
DESCRIPTION: Shows how to set the range for a point scale using numeric values.

LANGUAGE: javascript
CODE:
const x = d3.scalePoint().range([0, 960]);

----------------------------------------

TITLE: Creating Custom Bisector with Accessor Function
DESCRIPTION: Creates a new bisector using an accessor function that extracts the Date property from objects for comparison.

LANGUAGE: javascript
CODE:
const bisector = d3.bisector((d) => d.Date);

----------------------------------------

TITLE: Customizing D3.js Axis Ticks
DESCRIPTION: These examples show how to customize axis ticks in D3.js. The first snippet sets the number of ticks and formatting, while the second sets ticks at specific time intervals for a time scale.

LANGUAGE: javascript
CODE:
axis.ticks(20, "s");

LANGUAGE: javascript
CODE:
axis.ticks(d3.timeMinute.every(15));

----------------------------------------

TITLE: Customizing D3.js Axis Ticks
DESCRIPTION: These examples show how to customize axis ticks in D3.js. The first snippet sets the number of ticks and formatting, while the second sets ticks at specific time intervals for a time scale.

LANGUAGE: javascript
CODE:
axis.ticks(20, "s");

LANGUAGE: javascript
CODE:
axis.ticks(d3.timeMinute.every(15));

----------------------------------------

TITLE: Using a Quantize Scale for Stroke Width in D3.js
DESCRIPTION: Demonstrates using a quantize scale to map input values to discrete stroke widths. The scale divides the domain [10, 100] into three parts, mapping to widths of 1, 2, or 4.

LANGUAGE: javascript
CODE:
const width = d3.scaleQuantize([10, 100], [1, 2, 4]);
width(20); // 1
width(50); // 2
width(80); // 4

----------------------------------------

TITLE: Setting Fractional Digits for SVG Path Coordinates in D3
DESCRIPTION: Shows how to set the number of fractional digits for coordinates generated in SVG path strings using the digits method.

LANGUAGE: javascript
CODE:
const path = d3.geoPath().digits(3);

----------------------------------------

TITLE: Retrieving Values from D3 InternMap
DESCRIPTION: Demonstrates how to retrieve values from an InternMap using Date objects as keys. The InternMap correctly matches Date objects with the same value.

LANGUAGE: javascript
CODE:
valueByDate.get(new Date("2022-01-01")) // 12

----------------------------------------

TITLE: Setting Canvas Context for D3 Radial Line - JavaScript
DESCRIPTION: Configures the rendering context for the radial line generator to draw on canvas instead of SVG.

LANGUAGE: javascript
CODE:
const context = canvas.getContext("2d");
const line = d3.lineRadial().context(context);

----------------------------------------

TITLE: Unbinding Brush Event Listeners in D3.js
DESCRIPTION: This code shows how to remove brush event listeners from a selection.

LANGUAGE: JavaScript
CODE:
group.on(".brush", null);

----------------------------------------

TITLE: Interpolating Colors with D3
DESCRIPTION: Shows how to use D3's color interpolation to find the perceptual midpoint between two colors using the Lab color space.

LANGUAGE: javascript
CODE:
d3.interpolateLab("steelblue", "brown")(0.5); // "rgb(142, 92, 109)"

----------------------------------------

TITLE: Interpolating Colors with D3
DESCRIPTION: Shows how to use D3's color interpolation to find the perceptual midpoint between two colors using the Lab color space.

LANGUAGE: javascript
CODE:
d3.interpolateLab("steelblue", "brown")(0.5); // "rgb(142, 92, 109)"

----------------------------------------

TITLE: Using Scott's Rule for D3.js Bin Thresholds in JavaScript
DESCRIPTION: Applies Scott's normal reference rule to determine the number of bins for a dataset.

LANGUAGE: javascript
CODE:
const bin = d3.bin().thresholds(d3.thresholdScott);

----------------------------------------

TITLE: Setting Pack Layout Size
DESCRIPTION: Sets or gets the overall size of the pack layout as [width, height]. Defaults to [1, 1].

LANGUAGE: javascript
CODE:
pack.size(size)

----------------------------------------

TITLE: Default Brush Extent Function in D3.js
DESCRIPTION: This function is the default implementation for determining the brushable extent based on the SVG element's dimensions.

LANGUAGE: JavaScript
CODE:
function defaultExtent() {
  var svg = this.ownerSVGElement || this;
  if (svg.hasAttribute("viewBox")) {
    svg = svg.viewBox.baseVal;
    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
  }
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}

----------------------------------------

TITLE: Vue Component Setup with Plot Import
DESCRIPTION: Imports required dependencies including Observable Plot library and data for volcano visualization along with a custom PlotRender component.

LANGUAGE: javascript
CODE:
import * as Plot from "@observablehq/plot";
import {data as volcano} from "./data/volcano.data.js";
import PlotRender from "./components/PlotRender.js";

----------------------------------------

TITLE: Determining Spherical Bounding Box in D3-Geo
DESCRIPTION: Calculates the spherical bounding box for a GeoJSON object. Returns an array of coordinates representing the box corners in degrees.

LANGUAGE: JavaScript
CODE:
geoBounds(object)

----------------------------------------

TITLE: Default Brush Filter Function in D3.js
DESCRIPTION: This function is the default filter for brush events, ignoring ctrl-clicks and non-primary mouse buttons.

LANGUAGE: JavaScript
CODE:
function filter(event) {
  return !event.ctrlKey && !event.button;
}

----------------------------------------

TITLE: Default Weight Accessor in D3 Density Estimation
DESCRIPTION: Default function for determining point weights in D3's density estimation. Returns a constant weight of 1 for all points.

LANGUAGE: javascript
CODE:
function weight() {
  return 1;
}

----------------------------------------

TITLE: Formatting Data as CSV and TSV with D3
DESCRIPTION: Examples of converting JavaScript objects into CSV and TSV formatted strings.

LANGUAGE: javascript
CODE:
d3.csvFormat([{foo: "1", bar: "2"}]) // "foo,bar\n1,2"

LANGUAGE: javascript
CODE:
d3.tsvFormat([{foo: "1", bar: "2"}]) // "foo\tbar\n1\t2"

----------------------------------------

TITLE: Formatting Data as CSV and TSV with D3
DESCRIPTION: Examples of converting JavaScript objects into CSV and TSV formatted strings.

LANGUAGE: javascript
CODE:
d3.csvFormat([{foo: "1", bar: "2"}]) // "foo,bar\n1,2"

LANGUAGE: javascript
CODE:
d3.tsvFormat([{foo: "1", bar: "2"}]) // "foo\tbar\n1\t2"

----------------------------------------

TITLE: Initializing D3 Map Components with Vue.js
DESCRIPTION: Vue.js setup script that imports D3 and custom map components, setting basic dimensions for map rendering.

LANGUAGE: javascript
CODE:
<script setup>

import * as d3 from "d3";
import UsMap from "../components/UsMap.vue";
import WorldMap from "../components/WorldMap.vue";

const width = 688;
const height = 400;

</script>

----------------------------------------

TITLE: Creating a D3 Selection in JavaScript
DESCRIPTION: Shows how to create a selection of the root element using d3.selection().

LANGUAGE: javascript
CODE:
const root = d3.selection();

----------------------------------------

TITLE: Computing Chord Layout from Matrix in D3.js
DESCRIPTION: Computes the chord layout for a given square matrix representing directed flow in a network. Returns an array of chord objects with source and target subgroups, containing angle and value information.

LANGUAGE: javascript
CODE:
*chord*(*matrix*)

----------------------------------------

TITLE: Default Event Filter for D3 Drag in JavaScript
DESCRIPTION: Displays the default event filter function used by the drag behavior. This filter ignores certain mouse events to prevent unintended drag operations.

LANGUAGE: JavaScript
CODE:
function filter(event) {
  return !event.ctrlKey && !event.button;
}

----------------------------------------

TITLE: Configuring Stack Offset in D3.js
DESCRIPTION: Sets the offset for the stack generator. This determines how the baseline of the stack is positioned, which is crucial for creating different types of stacked charts.

LANGUAGE: JavaScript
CODE:
const stack = d3.stack().offset(d3.stackOffsetExpand);

----------------------------------------

TITLE: Creating a Ribbon Generator in D3
DESCRIPTION: Demonstrates how to create a new ribbon generator with default settings using d3.ribbon().

LANGUAGE: JavaScript
CODE:
const ribbon = d3.ribbon();

----------------------------------------

TITLE: Custom Subject Accessor for Circle Dragging in D3 JavaScript
DESCRIPTION: Demonstrates a custom subject accessor function for dragging circles. It finds the closest circle to the mouse within a given radius.

LANGUAGE: JavaScript
CODE:
function subject(event) {
  let n = circles.length,
      i,
      dx,
      dy,
      d2,
      s2 = radius * radius,
      circle,
      subject;

  for (i = 0; i < n; ++i) {
    circle = circles[i];
    dx = event.x - circle.x;
    dy = event.y - circle.y;
    d2 = dx * dx + dy * dy;
    if (d2 < s2) subject = circle, s2 = d2;
  }

  return subject;
}

----------------------------------------

TITLE: Blurring ImageData with D3 blurImage Function
DESCRIPTION: Demonstrates blurring an ImageData object using d3.blurImage. The function independently blurs each RGBA layer of the image using specified horizontal and vertical blur radii.

LANGUAGE: javascript
CODE:
const imageData = context.getImageData(0, 0, width, height);
d3.blurImage(imageData, 5);

----------------------------------------

TITLE: Dispatching Custom Event in D3.js
DESCRIPTION: Shows how to dispatch a custom 'click' event to a paragraph element using D3.js selection.dispatch() method. This can be used to programmatically trigger event listeners.

LANGUAGE: javascript
CODE:
d3.select("p").dispatch("click")

----------------------------------------

TITLE: Applying Binary Tiling in D3 Treemap
DESCRIPTION: A tiling method that recursively partitions nodes into an approximately-balanced binary tree. It chooses between horizontal and vertical partitioning based on rectangle shape.

LANGUAGE: javascript
CODE:
treemapBinary(*node*, *x0*, *y0*, *x1*, *y1*)

----------------------------------------

TITLE: Contour Plot Configuration
DESCRIPTION: Configures a contour plot visualization using Observable Plot with specific parameters for rendering volcano topography data. Includes styling and plotting options with contour intervals.

LANGUAGE: vue
CODE:
<PlotRender :options='{
    axis: null,
    aspectRatio: 1,
    style: "margin: 0;",
    marks: [
      Plot.contour(volcano.values, {
        width: volcano.width,
        height: volcano.height,
        fill: Plot.identity,
        stroke: "black",
        interval: 5
      })
    ]
  }' />

----------------------------------------

TITLE: Setting the Default Locale for Number Formatting
DESCRIPTION: This example demonstrates how to set a new default locale for number formatting, which affects the behavior of d3.format and d3.formatPrefix.

LANGUAGE: javascript
CODE:
const enUs = d3.formatDefaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

----------------------------------------

TITLE: Setting Aspect Ratio for Squarified Tiling in D3
DESCRIPTION: Specifies the desired aspect ratio for rectangles in squarified and resquarified treemaps. The ratio must be a number greater than or equal to one.

LANGUAGE: javascript
CODE:
*squarify*.ratio(*ratio*)

----------------------------------------

TITLE: Generating Grid Values for Goldstein-Price Function
DESCRIPTION: Creates a 256x256 grid of values by sampling the Goldstein-Price function over a specified domain range.

LANGUAGE: javascript
CODE:
var n = 256, m = 256, values = new Array(n * m);
for (var j = 0.5, k = 0; j < m; ++j) {
  for (var i = 0.5; i < n; ++i, ++k) {
    values[k] = goldsteinPrice(i / n * 4 - 2, 1 - j / m * 3);
  }
}

----------------------------------------

TITLE: Parsing Format Specifiers with formatSpecifier
DESCRIPTION: This example demonstrates how to use formatSpecifier to parse a format specifier string into an object representation.

LANGUAGE: javascript
CODE:
d3.formatSpecifier(".1f")

----------------------------------------

TITLE: Calculating Projected Planar Length in D3
DESCRIPTION: Demonstrates how to use the measure method of a path generator to calculate the projected planar length of a GeoJSON object.

LANGUAGE: javascript
CODE:
path.measure(california) // 825.7124297512761

----------------------------------------

TITLE: Setting Explicit Tick Values in D3.js Axis
DESCRIPTION: This code demonstrates how to set explicit tick values for a D3.js axis using the tickValues method. It overrides the automatic tick generation with specified values.

LANGUAGE: javascript
CODE:
const axis = d3.axisBottom(x).tickValues([1, 2, 3, 5, 8, 13, 21]);

----------------------------------------

TITLE: D3 Equal Earth Projection Configuration
DESCRIPTION: Configuration for D3's Equal Earth projection, an equal-area projection with rotation and extent fitting parameters.

LANGUAGE: javascript
CODE:
d3.geoEqualEarth().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width * 0.49 - 1]], {type: "Sphere"}).precision(0.2)

----------------------------------------

TITLE: Invoking Callbacks with D3 Dispatch in JavaScript
DESCRIPTION: Demonstrates how to call all registered callbacks for a specific event using dispatch.call.

LANGUAGE: javascript
CODE:
dispatch.call("start");

----------------------------------------

TITLE: Calculating Precision for SI Prefix Notation
DESCRIPTION: This snippet shows how to use precisionPrefix to calculate an appropriate precision for SI prefix notation based on a step value and reference value.

LANGUAGE: javascript
CODE:
d3.precisionPrefix(1e5, 1.3e6) // 1

----------------------------------------

TITLE: Creating Rotation Functions in D3-Geo
DESCRIPTION: Generates a rotation function based on specified angles. Angles are provided as an array [lambda, phi, gamma] in degrees, representing yaw, pitch, and roll.

LANGUAGE: JavaScript
CODE:
geoRotation(angles)

----------------------------------------

TITLE: Default Container Accessor for D3 Drag in JavaScript
DESCRIPTION: Shows the default container accessor function used by the drag behavior. This function determines the coordinate system for drag events.

LANGUAGE: JavaScript
CODE:
function container() {
  return this.parentNode;
}

----------------------------------------

TITLE: Implementing Spherical Mercator Projection in JavaScript
DESCRIPTION: A basic implementation of the spherical Mercator projection that transforms longitude (lambda) and latitude (phi) coordinates in radians to x,y coordinates on a plane. The function handles point-based geometry transformation using mathematical formulas.

LANGUAGE: javascript
CODE:
function mercator(lambda, phi) {
  const x = lambda;
  const y = Math.log(Math.tan(Math.PI / 4 + phi / 2));
  return [x, y];
}

----------------------------------------

TITLE: Manipulating HSL Color Properties
DESCRIPTION: Demonstrates manipulating hue and saturation of an HSL color and converting it back to an RGB string.

LANGUAGE: javascript
CODE:
c.h += 90;
c.s += 0.2;
c + ""; // rgb(198, 45, 205)

----------------------------------------

TITLE: Calculating Precision for Fixed Point Notation
DESCRIPTION: This example demonstrates how to use precisionFixed to calculate an appropriate precision for fixed point notation based on a given step value.

LANGUAGE: javascript
CODE:
d3.precisionFixed(0.01) // 2

----------------------------------------

TITLE: Identity Sequential Scale in D3
DESCRIPTION: Creates a sequential scale with default identity function as interpolator.

LANGUAGE: javascript
CODE:
const identity = d3.scaleSequential();

----------------------------------------

TITLE: Default Subject Accessor for D3 Drag in JavaScript
DESCRIPTION: Illustrates the default subject accessor function used by the drag behavior. This function determines what is being dragged based on the event and data.

LANGUAGE: JavaScript
CODE:
function subject(event, d) {
  return d == null ? {x: event.x, y: event.y} : d;
}

----------------------------------------

TITLE: D3 Conic Equal Area Projection Configuration
DESCRIPTION: WorldMap component implementation using D3's geoConicEqualArea projection with customized projection parameters.

LANGUAGE: vue
CODE:
<WorldMap resolution="50m" :projection='d3.geoConicEqualArea().parallels([35, 65]).rotate([-20, 0]).scale(width * 0.55).center([0, 52]).translate([width / 2, height / 2]).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)' />

----------------------------------------

TITLE: Inverting Geographic Rotation in D3-Geo
DESCRIPTION: Inverts a rotated geographic point. The point is specified as a [longitude, latitude] array in degrees.

LANGUAGE: JavaScript
CODE:
rotation.invert(point)

----------------------------------------

TITLE: Applying Cubic Easing in D3
DESCRIPTION: This example demonstrates how to apply cubic easing to a normalized time value using D3's easeCubic function.

LANGUAGE: javascript
CODE:
const te = d3.easeCubic(t);

----------------------------------------

TITLE: D3 Conic Equidistant Projection Configuration
DESCRIPTION: WorldMap component setup using D3's geoConicEquidistant projection with defined parameters for map display.

LANGUAGE: vue
CODE:
<WorldMap resolution="50m" :projection='d3.geoConicEquidistant().parallels([35, 65]).rotate([-20, 0]).scale(width * 0.55).center([0, 52]).translate([width / 2, height / 2]).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)' />

----------------------------------------

TITLE: Creating Basic Logarithmic Scale in D3.js
DESCRIPTION: Demonstrates the basic construction of a logarithmic scale with domain [1, 10] and range [0, 960]

LANGUAGE: javascript
CODE:
const x = d3.scaleLog([1, 10], [0, 960]);

----------------------------------------

TITLE: Calculating Precision for Significant Digit Rounding
DESCRIPTION: This example demonstrates how to use precisionRound to calculate an appropriate precision for rounding to significant digits based on a step value and maximum value.

LANGUAGE: javascript
CODE:
d3.precisionRound(0.01, 1.01) // 3

----------------------------------------

TITLE: Using a Threshold Scale in D3.js
DESCRIPTION: Demonstrates how to use a threshold scale to map input values to output values based on the defined thresholds.

LANGUAGE: JavaScript
CODE:
const color = d3.scaleThreshold([0, 1], ["red", "white", "green"]);
color(-1); // "red"
color(0); // "white"
color(0.5); // "white"
color(1); // "green"
color(1000); // "green"

----------------------------------------

TITLE: Loading Binary Data as Blob
DESCRIPTION: Demonstrates loading binary data as a Blob object using d3.blob(). Useful for handling binary file formats.

LANGUAGE: javascript
CODE:
const blob = await d3.blob("example.db");

----------------------------------------

TITLE: D3 Albers Projection for US Map
DESCRIPTION: UsMap component implementation using D3's geoAlbers projection, specifically configured for US map display.

LANGUAGE: vue
CODE:
<UsMap :projection='d3.geoAlbers().scale(1300 / 975 * width * 0.8).translate([width / 2, height / 2])' />

----------------------------------------

TITLE: Configuring Bottom Padding in D3 Treemap
DESCRIPTION: Sets or gets the bottom padding function for the treemap layout. Bottom padding separates the bottom edge of a node from its children.

LANGUAGE: javascript
CODE:
*treemap*.paddingBottom(*padding*)

----------------------------------------

TITLE: Initializing D3 and WorldMap Component in Vue.js
DESCRIPTION: Sets up D3 and a WorldMap component in a Vue.js script, defining width and height constants for the map.

LANGUAGE: JavaScript
CODE:
<script setup>

import * as d3 from "d3";
import WorldMap from "../components/WorldMap.vue";

const width = 688;
const height = 400;

</script>

----------------------------------------

TITLE: Checking Point Containment in GeoJSON Objects with D3-Geo
DESCRIPTION: Determines if a GeoJSON object contains a specific point. The point is specified as a [longitude, latitude] array in degrees.

LANGUAGE: JavaScript
CODE:
geoContains(object, point)

----------------------------------------

TITLE: Creating Matrix Transform
DESCRIPTION: Implementation of an affine matrix transformation using geoTransform.

LANGUAGE: JavaScript
CODE:
function matrix(a, b, c, d, tx, ty) {
  return d3.geoTransform({
    point(x, y) {
      this.stream.point(a * x + b * y + tx, c * x + d * y + ty);
    }
  });
}

----------------------------------------

TITLE: Named Node Links Example in D3.js
DESCRIPTION: Example of defining nodes and links using named string identifiers in a force-directed graph.

LANGUAGE: javascript
CODE:
const nodes = [
  {"id": "Alice"},
  {"id": "Bob"},
  {"id": "Carol"}
];

const links = [
  {"source": "Alice", "target": "Bob"},
  {"source": "Bob", "target": "Carol"}
];

----------------------------------------

TITLE: Creating a Sequential Discrete Color Scale in D3
DESCRIPTION: This code creates a sequential discrete nine-color scale using the Blues color scheme in D3.

LANGUAGE: javascript
CODE:
const color = d3.scaleOrdinal(d3.schemeBlues[9]);

----------------------------------------

TITLE: Closed RGB Basis Spline Interpolation in D3.js
DESCRIPTION: Creates a cyclic uniform B-spline interpolator through an array of colors in RGB space, useful for creating cyclical color scales.

LANGUAGE: javascript
CODE:
d3.interpolateRgbBasisClosed(["purple", "green", "orange"])

----------------------------------------

TITLE: GeoJSON Polygon Data Structure Example
DESCRIPTION: Example of a GeoJSON polygon structure representing a simple quadrilateral with coordinates. Shows the raw data format before stream processing.

LANGUAGE: json
CODE:
{
  "type": "Polygon",
  "coordinates": [[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]]
}

----------------------------------------

TITLE: Default Parent ID Accessor for d3.stratify() in JavaScript
DESCRIPTION: This code presents the default implementation of the parentId accessor function used by d3.stratify(). It assumes each data item has a 'parentId' property to define parent-child relationships.

LANGUAGE: javascript
CODE:
function parentId(d) {
  return d.parentId;
}

----------------------------------------

TITLE: Interpolating CSS Transforms with D3 in JavaScript
DESCRIPTION: Demonstrates the usage of d3.interpolateTransformCss function to interpolate between two CSS transforms. The function decomposes the transforms and interpolates the components.

LANGUAGE: javascript
CODE:
d3.interpolateTransformCss("translateY(12px) scale(2)", "translateX(30px) rotate(5deg)")(0.5) // "translate(15px,6px) rotate(2.5deg) scale(1.5,1.5)"

----------------------------------------

TITLE: Chaining D3 Hierarchy Methods for Treemap Layout
DESCRIPTION: Illustrates how to use method chaining to create a treemap layout, sum values, sort nodes, and retrieve descendants in a more concise manner.

LANGUAGE: javascript
CODE:
d3.treemap()
    .size([width, height])
    .padding(2)
  (root
      .sum((d) => d.value)
      .sort((a, b) => b.height - a.height || b.value - a.value))
  .descendants()

----------------------------------------

TITLE: Setting D3 Quantile Scale Domain
DESCRIPTION: Examples of setting and retrieving the domain for a quantile scale.

LANGUAGE: javascript
CODE:
const color = d3.scaleQuantile(d3.schemeBlues[5]);
color.domain(penguins.map((d) => d.body_mass_g));

color.domain() // [2700, 2850, 2850, 2900, 2900, 2900, 2900, …]

----------------------------------------

TITLE: Registered Namespace Prefixes in D3.js
DESCRIPTION: Displays the initial map of registered namespace prefixes in D3.js, including SVG, XHTML, XLink, XML, and XMLNS namespaces.

LANGUAGE: javascript
CODE:
{
  svg: "http://www.w3.org/2000/svg",
  xhtml: "http://www.w3.org/1999/xhtml",
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
}

----------------------------------------

TITLE: Creating a Diverging Scale with Default Domain in D3.js
DESCRIPTION: Shows how to create a diverging scale with a default domain of [0, 0.5, 1] by only specifying the interpolator function.

LANGUAGE: javascript
CODE:
const color = d3.scaleDiverging(d3.interpolateRdBu);

----------------------------------------

TITLE: Adding Data to D3 Quadtree
DESCRIPTION: Shows how to add individual data points or arrays of data to a D3 quadtree.

LANGUAGE: javascript
CODE:
const tree = d3.quadtree().add([0, 0]);

LANGUAGE: javascript
CODE:
const tree = d3.quadtree().addAll([[0, 0], [1, 2]]);

----------------------------------------

TITLE: Configuring Partition Rounding in D3
DESCRIPTION: Enables or disables coordinate rounding in the partition layout. Default is false.

LANGUAGE: javascript
CODE:
partition.round(boolean)

----------------------------------------

TITLE: Creating D3 Local Variable
DESCRIPTION: Demonstrates how to declare a new local variable in D3 using d3.local(). Each local creates a distinct symbolic reference scoped by the DOM.

LANGUAGE: javascript
CODE:
const foo = d3.local();

----------------------------------------

TITLE: Copying a Band Scale in D3
DESCRIPTION: Shows how to create an exact copy of a band scale.

LANGUAGE: javascript
CODE:
const x1 = d3.scaleBand(["a", "b", "c"], [0, 960]);
const x2 = x1.copy();

----------------------------------------

TITLE: Merging Arrays with D3 Merge
DESCRIPTION: Flattens an iterable of iterables into a single array, similar to Array.concat but works with any iterable.

LANGUAGE: javascript
CODE:
d3.merge([[1], [2, 3]]) // [1, 2, 3]

LANGUAGE: javascript
CODE:
d3.merge(new Set([new Set([1]), new Set([2, 3])])) // [1, 2, 3]

----------------------------------------

TITLE: Qualifying Namespace in D3.js
DESCRIPTION: Shows how to use the d3.namespace function to qualify a name with a namespace prefix, returning an object with space and local attributes.

LANGUAGE: javascript
CODE:
d3.namespace("svg:text") // {space: "http://www.w3.org/2000/svg", local: "text"}

----------------------------------------

TITLE: Removing D3 Local Variable
DESCRIPTION: Demonstrates how to remove a local variable's value from a DOM node while preserving ancestor definitions.

LANGUAGE: javascript
CODE:
selection.each(function() {
  foo.remove(this);
});

----------------------------------------

TITLE: Retrieving Interpolator from Diverging Scale in D3.js
DESCRIPTION: Demonstrates how to retrieve the current interpolator function from a diverging scale.

LANGUAGE: javascript
CODE:
color.interpolator() // d3.interpolateRdBu

----------------------------------------

TITLE: Accessing D3 Quadtree Root and Data
DESCRIPTION: Demonstrates how to access the root node and all data points in a D3 quadtree.

LANGUAGE: javascript
CODE:
tree.root() // [{…}, empty × 2, {…}]

LANGUAGE: javascript
CODE:
tree.data() // [[0, 0], [1, 2]]

----------------------------------------

TITLE: Checking Scale Implicit Value
DESCRIPTION: Shows how to check if a scale is using implicit domain construction for unknown values.

LANGUAGE: javascript
CODE:
const color = d3.scaleOrdinal(["a", "b", "c"], d3.schemeTableau10);
color.unknown(); // d3.scaleImplicit

----------------------------------------

TITLE: Default Children Accessor for Map Data in D3 Hierarchy
DESCRIPTION: Shows the default children accessor function used when the input data is a Map object.

LANGUAGE: javascript
CODE:
function children(d) {
  return Array.isArray(d) ? d[1] : null;
}

----------------------------------------

TITLE: Using Slice-and-Dice Tiling in D3 Treemap
DESCRIPTION: A tiling method that alternates between slice and dice tiling based on the depth of the node. It uses slice for odd depths and dice for even depths.

LANGUAGE: javascript
CODE:
treemapSliceDice(*node*, *x0*, *y0*, *x1*, *y1*)

----------------------------------------

TITLE: Vue Component Import Setup
DESCRIPTION: Vue script setup block that imports the ExampleDisjointForce component for force simulation demonstration.

LANGUAGE: vue
CODE:
<script setup>

import ExampleDisjointForce from "./components/ExampleDisjointForce.vue";

</script>

----------------------------------------

TITLE: Point Scale Range Rounding
DESCRIPTION: Demonstrates setting range with rounding enabled for avoiding antialiasing artifacts.

LANGUAGE: javascript
CODE:
const x = d3.scalePoint().rangeRound([0, 960]);

// Equivalent to:
point.range(range).round(true)

----------------------------------------

TITLE: Copying D3 Quadtree
DESCRIPTION: Shows how to create a copy of a D3 quadtree, which duplicates the structure but shares data references.

LANGUAGE: javascript
CODE:
const t1 = d3.quadtree(data);
const t2 = t1.copy();

----------------------------------------

TITLE: Retrieving D3 Quantile Scale Thresholds
DESCRIPTION: Shows how to access the computed quantile thresholds from a scale.

LANGUAGE: javascript
CODE:
color.quantiles() // [3475, 3800, 4300, 4950]

----------------------------------------

TITLE: Drawing Circle Function in Canvas/SVG Context
DESCRIPTION: Example function that draws a circle using path methods, demonstrating the basic usage of canvas drawing commands.

LANGUAGE: javascript
CODE:
function drawCircle(context, radius) {
  context.moveTo(radius, 0);
  context.arc(0, 0, radius, 0, 2 * Math.PI);
}

----------------------------------------

TITLE: Custom Container for Canvas Dragging in D3 JavaScript
DESCRIPTION: Demonstrates a custom container accessor function for use with Canvas elements, where the container is set to the element itself.

LANGUAGE: JavaScript
CODE:
function container() {
  return this;
}

----------------------------------------

TITLE: Setting Tiling Method for D3 Treemap
DESCRIPTION: Sets or gets the tiling method for the treemap layout. The tiling method determines how rectangles are divided within the treemap.

LANGUAGE: javascript
CODE:
*treemap*.tile(*tile*)

----------------------------------------

TITLE: Calculating Polygon Perimeter Length with D3
DESCRIPTION: Demonstrates how to calculate the perimeter length of a polygon using d3.polygonLength().

LANGUAGE: javascript
CODE:
d3.polygonLength([[1, 1], [1.5, 0], [2, 1]]) // 3.23606797749979

----------------------------------------

TITLE: Copying D3 Quantile Scale
DESCRIPTION: Demonstrates how to create an exact copy of a quantile scale.

LANGUAGE: javascript
CODE:
const c1 = d3.scaleQuantile(d3.schemeBlues[5]);
const c2 = c1.copy();

----------------------------------------

TITLE: Arc Path Command
DESCRIPTION: Shows how to draw a complete circular arc with center, radius, and angle parameters.

LANGUAGE: javascript
CODE:
path.arc(80, 80, 70, 0, Math.PI * 2);

----------------------------------------

TITLE: Interpolating Numbers with D3
DESCRIPTION: Demonstrates how to create and use a number interpolator function in D3. The interpolator blends between 10 and 20 based on a parameter t between 0 and 1.

LANGUAGE: javascript
CODE:
const i = d3.interpolateNumber(10, 20);
i(0.0); // 10
i(0.2); // 12
i(0.5); // 15
i(1.0); // 20

----------------------------------------

TITLE: Setting and Getting Symlog Constant in D3
DESCRIPTION: Sets the symlog constant to a specified number and returns the scale. If no argument is provided, it returns the current value of the symlog constant. The constant defaults to 1.

LANGUAGE: javascript
CODE:
const x = d3.scaleSymlog([0, 100], [0, 960]).constant(2);

LANGUAGE: javascript
CODE:
x.constant() // 2

----------------------------------------

TITLE: Iterating over Selection Elements using Symbol.iterator in D3
DESCRIPTION: Demonstrates how to use the Symbol.iterator to iterate over selected elements and flatten a selection to an array.

LANGUAGE: javascript
CODE:
for (const element of selection) {
  console.log(element);
}

LANGUAGE: javascript
CODE:
const elements = [...selection];

----------------------------------------

TITLE: Iterating over Selection Elements using Symbol.iterator in D3
DESCRIPTION: Demonstrates how to use the Symbol.iterator to iterate over selected elements and flatten a selection to an array.

LANGUAGE: javascript
CODE:
for (const element of selection) {
  console.log(element);
}

LANGUAGE: javascript
CODE:
const elements = [...selection];

----------------------------------------

TITLE: Initializing D3 Zoom Behavior
DESCRIPTION: Applies zoom behavior to a selection and sets up zoom event listener.

LANGUAGE: javascript
CODE:
selection.call(d3.zoom().on("zoom", zoomed));

----------------------------------------

TITLE: Initializing D3 Zoom Behavior
DESCRIPTION: Applies zoom behavior to a selection and sets up zoom event listener.

LANGUAGE: javascript
CODE:
selection.call(d3.zoom().on("zoom", zoomed));

----------------------------------------

TITLE: Using Path Accessor with d3.stratify() for File System-like Hierarchies in JavaScript
DESCRIPTION: This example demonstrates how to use the path accessor with d3.stratify() to create hierarchies from slash-delimited paths, similar to file system structures. It processes an array of file paths to generate a hierarchy.

LANGUAGE: javascript
CODE:
const root = d3.stratify().path((d) => d)(paths);

----------------------------------------

TITLE: Implementing Default Separation Function in JavaScript
DESCRIPTION: Defines a default separation function for the tree layout, which determines the spacing between neighboring nodes based on their relationship.

LANGUAGE: javascript
CODE:
function separation(a, b) {
  return a.parent == b.parent ? 1 : 2;
}

----------------------------------------

TITLE: D3 CatmullRom Curve Configuration
DESCRIPTION: Example of configuring a D3 Catmull-Rom curve with custom alpha value.

LANGUAGE: javascript
CODE:
const line = d3.line().curve(d3.curveCatmullRom.alpha(0.5));

----------------------------------------

TITLE: Using D3 Selection Methods in JavaScript
DESCRIPTION: Shows examples of using selection.select and selection.selectAll methods to select child elements.

LANGUAGE: javascript
CODE:
const b = d3.selectAll("p").select("b"); // the first <b> in every <p>
const previous = d3.selectAll("p").select(function() {
  return this.previousElementSibling;
});
const b = d3.selectAll("p").selectAll("b"); // every <b> in every <p>
const sibling = d3.selectAll("p").selectAll(function() {
  return [
    this.previousElementSibling,
    this.nextElementSibling
  ];
});

----------------------------------------

TITLE: Setting Defined Function for D3 Radial Line - JavaScript
DESCRIPTION: Configures the defined accessor to handle missing or invalid data points in the radial line.

LANGUAGE: javascript
CODE:
const line = d3.lineRadial().defined((d) => !isNaN(d.temperature));

----------------------------------------

TITLE: Setting Link Target Accessor
DESCRIPTION: Configures the target point accessor function for the link generator.

LANGUAGE: javascript
CODE:
const link = d3.linkHorizontal().target((d) => d[1]);

LANGUAGE: javascript
CODE:
function target(d) {
  return d.target;
}

----------------------------------------

TITLE: Default Y1 Accessor Implementation
DESCRIPTION: Shows the default implementation of the y1 accessor function that assumes two-element array input.

LANGUAGE: javascript
CODE:
function y(d) {
  return d[1];
}

----------------------------------------

TITLE: Sorting Iterable Elements using D3
DESCRIPTION: Demonstrates the use of d3.sort to create a new sorted array from any iterable, with optional comparator or accessor function.

LANGUAGE: javascript
CODE:
d3.sort(new Set([0, 2, 3, 1])) // [0, 1, 2, 3]

LANGUAGE: javascript
CODE:
d3.sort(data, (d) => d.value)

LANGUAGE: javascript
CODE:
d3.sort(points, ({x}) => x, ({y}) => y)

----------------------------------------

TITLE: Filtering Iterables with D3 Filter
DESCRIPTION: Filters values from an iterable based on a test function, similar to Array.filter but works with any iterable.

LANGUAGE: javascript
CODE:
d3.filter(new Set([0, 2, 3, 4]), (d) => d & 1) // [3]

----------------------------------------

TITLE: Constructing a Radial Area Generator in D3.js
DESCRIPTION: Creates a new radial area generator with default settings using d3.areaRadial().

LANGUAGE: JavaScript
CODE:
const area = d3.areaRadial();

----------------------------------------

TITLE: Canvas Context Configuration
DESCRIPTION: Shows how to configure the area generator to render to a canvas context instead of generating SVG path data.

LANGUAGE: javascript
CODE:
const context = canvas.getContext("2d");
const area = d3.area().context(context);

----------------------------------------

TITLE: Setting Radius Accessor for Radial Area Generator in D3.js
DESCRIPTION: Configures the radius accessor for the radial area generator, which determines the radial distance of each data point from the origin.

LANGUAGE: JavaScript
CODE:
const area = d3.areaRadial().radius((d) => r(d.temperature));

----------------------------------------

TITLE: Setting Digit Precision for Line Generator in D3.js
DESCRIPTION: Illustrates how to set the maximum number of digits after the decimal point for path data output.

LANGUAGE: javascript
CODE:
const line = d3.line().digits(3);

----------------------------------------

TITLE: Initializing D3.js Stack Generator
DESCRIPTION: Creates a new stack generator with default settings. This is typically the starting point for creating stacked charts or streamgraphs.

LANGUAGE: JavaScript
CODE:
const stack = d3.stack();

----------------------------------------

TITLE: Shuffling Array Elements using D3
DESCRIPTION: Demonstrates the use of d3.shuffle to randomize the order of elements in an array using the Fisher–Yates shuffle algorithm.

LANGUAGE: javascript
CODE:
d3.shuffle([..."abcdefg"]) // ["e", "c", "a", "d", "b", "g", "f"], perhaps

----------------------------------------

TITLE: Setting Defined Accessor for Radial Area Generator in D3.js
DESCRIPTION: Configures the defined accessor for the radial area generator, which determines whether a given data point should be included in the area.

LANGUAGE: JavaScript
CODE:
const area = d3.areaRadial().defined((d) => !isNaN(d.temperature));

----------------------------------------

TITLE: Configuring Sort Comparator
DESCRIPTION: Example of setting a custom sort comparator for ordering pie segments based on data properties.

LANGUAGE: javascript
CODE:
const pie = d3.pie().sort((a, b) => d3.ascending(a.name, b.name));

----------------------------------------

TITLE: Setting Curve for Radial Area Generator in D3.js
DESCRIPTION: Configures the curve interpolation for the radial area generator, which determines how the area is smoothed between data points.

LANGUAGE: JavaScript
CODE:
const area = d3.areaRadial().curve(d3.curveBasisClosed);

----------------------------------------

TITLE: Setting Angle Accessor for Radial Area Generator in D3.js
DESCRIPTION: Configures the angle accessor for the radial area generator, which determines the angular position of each data point.

LANGUAGE: JavaScript
CODE:
const area = d3.areaRadial().angle((d) => a(d.Date));

----------------------------------------

TITLE: Creating a Default Quantize Scale in D3.js
DESCRIPTION: Shows how to create a quantize scale with default domain [0, 1] and a specified range using d3.scaleQuantize(). This example uses a blue color scheme as the range.

LANGUAGE: javascript
CODE:
const color = d3.scaleQuantize(d3.schemeBlues[9]);

----------------------------------------

TITLE: Reversing Iterable Elements using D3
DESCRIPTION: Shows how to use d3.reverse to create a new array with elements in reverse order from any iterable.

LANGUAGE: javascript
CODE:
d3.reverse(new Set([0, 2, 3, 1])) // [1, 3, 2, 0]

----------------------------------------

TITLE: Rendering D3 Radial Line Path - JavaScript
DESCRIPTION: Appends a path element to SVG using the radial line generator with provided data and styling.

LANGUAGE: javascript
CODE:
svg.append("path").attr("d", line(data)).attr("stroke", "currentColor");

----------------------------------------

TITLE: Setting Context for Radial Area Generator in D3.js
DESCRIPTION: Configures the rendering context for the radial area generator, allowing it to render to a canvas instead of SVG.

LANGUAGE: JavaScript
CODE:
const context = canvas.getContext("2d");
const area = d3.areaRadial().context(context);

----------------------------------------

TITLE: Creating Radial Links with D3
DESCRIPTION: Example of creating a radial link generator for a tree diagram centered in the display. The link generator uses angle and radius accessors to determine the position of each link.

LANGUAGE: javascript
CODE:
const link = d3.linkRadial()
    .angle((d) => d.x)
    .radius((d) => d.y);

----------------------------------------

TITLE: Basic Date Formatting with D3 UTC Format
DESCRIPTION: Demonstrates how to format a date using d3.utcFormat with a specified format string pattern.

LANGUAGE: javascript
CODE:
const formatTime = d3.utcFormat("%B %d, %Y");
formatTime(new Date()); // "May 31, 2023"

----------------------------------------

TITLE: Generating Time Scale Ticks in D3.js
DESCRIPTION: Demonstrates how to generate representative dates as ticks from a time scale's domain. Returns uniformly-spaced values that are guaranteed to be within the domain extent.

LANGUAGE: javascript
CODE:
const x = d3.scaleTime();
x.ticks(10);
// [Sat Jan 01 2000 00:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 03:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 06:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 09:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 12:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 15:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 18:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 21:00:00 GMT-0800 (PST),
//  Sun Jan 02 2000 00:00:00 GMT-0800 (PST)]

----------------------------------------

TITLE: Full Precision Cumulative Sum
DESCRIPTION: Calculates the full-precision cumulative sum of an array, returning results as Float64Array.

LANGUAGE: javascript
CODE:
d3.fcumsum([1, 1e-14, -1]) // [1, 1.00000000000001, 1e-14]

LANGUAGE: javascript
CODE:
d3.fcumsum(penguins, (d) => d.body_mass_g) // [3750, 7550, 10800, 10800, 14250, …]

----------------------------------------

TITLE: Setting Stack Value Accessor in D3.js
DESCRIPTION: Configures the value accessor for the stack generator. This function determines how the stack values are computed from the input data.

LANGUAGE: JavaScript
CODE:
const stack = d3.stack().value((d, key) => d[key]);

----------------------------------------

TITLE: Using D3 Transition Call Method
DESCRIPTION: Example showing how to use the transition.call() method to invoke a reusable function with method chaining.

LANGUAGE: javascript
CODE:
d3.selectAll("div").transition().call(color, "red", "blue");

----------------------------------------

TITLE: Applying Stack Order in D3.js
DESCRIPTION: Sets the order of the stacked series. This example uses a built-in order function, but custom ordering functions can also be used.

LANGUAGE: JavaScript
CODE:
const stack = d3.stack().order(d3.stackOrderNone);

----------------------------------------

TITLE: Default Touch Detection Function
DESCRIPTION: Default function for detecting touch support.

LANGUAGE: javascript
CODE:
function touchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}

----------------------------------------

TITLE: Default Zoom Constraint Function
DESCRIPTION: Default function for constraining zoom transforms within bounds.

LANGUAGE: javascript
CODE:
function constrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}

----------------------------------------

TITLE: Setting Inner Padding for Band Scale in D3
DESCRIPTION: Shows how to set the inner padding for a band scale, which controls the space between bands.

LANGUAGE: javascript
CODE:
const x = d3.scaleBand(["a", "b", "c"], [0, 960]).paddingInner({{paddingInner}});

----------------------------------------

TITLE: Dynamic Symbol Type Scaling
DESCRIPTION: Creates a symbol generator with dynamic type based on categorical data using an ordinal scale.

LANGUAGE: javascript
CODE:
const symbolType = d3.scaleOrdinal(d3.symbolsFill);
const symbol = d3.symbol().type((d) => symbolType(d.category));

----------------------------------------

TITLE: Dispatching Custom Events in D3 with Native Event Handling
DESCRIPTION: Demonstrates how to dispatch custom events after handling a native click event, preserving the original context and arguments.

LANGUAGE: javascript
CODE:
selection.on("click", function() {
  dispatch.apply("custom", this, arguments);
});

----------------------------------------

TITLE: Custom Node ID Accessor in D3.js
DESCRIPTION: Custom function for accessing node IDs using string identifiers instead of indices.

LANGUAGE: javascript
CODE:
function id(d) {
  return d.id;
}

----------------------------------------

TITLE: Setting Band Scale Domain in D3
DESCRIPTION: Demonstrates how to set the domain of a band scale using an array of values.

LANGUAGE: javascript
CODE:
const x = d3.scaleBand([0, 960]).domain([{{d3.csvParseRows(domain).flat().map(JSON.stringify).join(", ")}}]);

----------------------------------------

TITLE: Default Link Strength Function in D3.js
DESCRIPTION: Default function for calculating link strengths based on node connection counts.

LANGUAGE: javascript
CODE:
function strength(link) {
  return 1 / Math.min(count(link.source), count(link.target));
}

----------------------------------------

TITLE: Locale Configuration Example
DESCRIPTION: Shows how to configure a custom locale for date formatting with month names, weekdays, and other format specifications.

LANGUAGE: javascript
CODE:
const enUs = d3.timeFormatLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

----------------------------------------

TITLE: Setting the Exponent for a Power Scale in D3
DESCRIPTION: Illustrates how to set the exponent for a power scale using the exponent() method. The scale is created with a domain of 0-100, a range from red to blue, and an exponent of 2.

LANGUAGE: javascript
CODE:
const x = d3.scalePow([0, 100], ["red", "blue"]).exponent(2);

----------------------------------------

TITLE: Interrupting D3 Transitions on Selection and Descendants
DESCRIPTION: Example demonstrating how to interrupt transitions on both the selection itself and all its descendant elements.

LANGUAGE: javascript
CODE:
selection.interrupt().selectAll("*").interrupt();

----------------------------------------

TITLE: Initializing D3 Map Component Setup
DESCRIPTION: Vue component setup code that imports D3 and a WorldMap component, defining basic width and height constants for map rendering.

LANGUAGE: vue
CODE:
<script setup>

import * as d3 from "d3";
import WorldMap from "../components/WorldMap.vue";

const width = 688;
const height = 400;

</script>

----------------------------------------

TITLE: Arc Generation with Object Parameters
DESCRIPTION: Shows how to generate an SVG path string by passing an object with radius and angle parameters to the arc generator.

LANGUAGE: javascript
CODE:
const arc = d3.arc();

arc({
  innerRadius: 0,
  outerRadius: 100,
  startAngle: 0,
  endAngle: Math.PI / 2
}); // "M0,-100A100,100,0,0,1,100,0L0,0Z"

----------------------------------------

TITLE: Setting the Range of a Quantize Scale in D3.js
DESCRIPTION: Illustrates how to set the range of an existing quantize scale using the range() method. The example sets the range to a blue color scheme with 5 values.

LANGUAGE: javascript
CODE:
const color = d3.scaleQuantize();
color.range(d3.schemeBlues[5]);

----------------------------------------

TITLE: Setting Rendering Context for Line Generator in D3.js
DESCRIPTION: Shows how to set a canvas rendering context for the line generator to enable direct canvas drawing.

LANGUAGE: javascript
CODE:
const context = canvas.getContext("2d");
const line = d3.line().context(context);

----------------------------------------

TITLE: Accessing D3 Ordinal Scale Domain
DESCRIPTION: Demonstrates how to retrieve the current domain of an ordinal scale.

LANGUAGE: javascript
CODE:
color.domain() // ["a", "b", "c"]

----------------------------------------

TITLE: D3 Cardinal Curve Configuration
DESCRIPTION: Example of configuring a D3 cardinal curve with custom tension.

LANGUAGE: javascript
CODE:
const line = d3.line().curve(d3.curveCardinal.tension(0.5));

----------------------------------------

TITLE: Bezier Curve Command
DESCRIPTION: Shows how to draw a cubic Bézier curve with two control points.

LANGUAGE: javascript
CODE:
path.bezierCurveTo(200, 0, 0, 200, 200, 200);

----------------------------------------

TITLE: Initializing D3 Radial Line Generator - JavaScript
DESCRIPTION: Creates a new radial line generator with default settings.

LANGUAGE: javascript
CODE:
const line = d3.lineRadial();

----------------------------------------

TITLE: Arc To Path Command
DESCRIPTION: Demonstrates drawing a circular arc segment with specified radius and tangent points.

LANGUAGE: javascript
CODE:
path.arcTo(150, 150, 300, 10, 40);

----------------------------------------

TITLE: Goldstein-Price Function Implementation
DESCRIPTION: Implementation of the Goldstein-Price function used for generating test data for contour visualization.

LANGUAGE: javascript
CODE:
function goldsteinPrice(x, y) {
  return (1 + Math.pow(x + y + 1, 2) * (19 - 14 * x + 3 * x * x - 14 * y + 6 * x * x + 3 * y * y))
      * (30 + Math.pow(2 * x - 3 * y, 2) * (18 - 32 * x + 12 * x * x + 48 * y - 36 * x * y + 27 * y * y));
}

----------------------------------------

TITLE: Line To Path Command
DESCRIPTION: Shows how to draw a straight line to a specified point.

LANGUAGE: javascript
CODE:
path.lineTo(200, 200);

----------------------------------------

TITLE: Setting X Accessor for Line Generator in D3.js
DESCRIPTION: Demonstrates how to set a custom x accessor function for a line generator.

LANGUAGE: javascript
CODE:
const line = d3.line().x((d) => x(d.Date));

----------------------------------------

TITLE: Creating a default piecewise interpolator in D3.js
DESCRIPTION: Uses d3.piecewise() with default interpolate function to create a piecewise interpolator for ['red', 'green', 'blue'].

LANGUAGE: javascript
CODE:
d3.piecewise(["red", "green", "blue"])

----------------------------------------

TITLE: Creating Vertical Link Generator
DESCRIPTION: Creates a vertical link generator using curveBumpY shorthand.

LANGUAGE: javascript
CODE:
const link = d3.link(d3.curveBumpY);

----------------------------------------

TITLE: Interpolating between two number arrays in D3.js
DESCRIPTION: Uses d3.interpolateNumberArray() to create an interpolator between two arrays of numbers. This example interpolates between [0, 1] and a Float64Array of [1, 3], returning an array with values halfway between the corresponding elements.

LANGUAGE: javascript
CODE:
d3.interpolateNumberArray([0, 1], Float64Array.of(1, 3))(0.5) // [0.5, 2]

----------------------------------------

TITLE: Interpolating RGB Colors in D3.js
DESCRIPTION: Creates a color interpolator between two colors in RGB color space. Colors are converted to RGB format internally and the interpolator returns RGB string values.

LANGUAGE: javascript
CODE:
d3.interpolateRgb("purple", "orange")

----------------------------------------

TITLE: Creating a B-spline interpolator in D3.js
DESCRIPTION: Uses d3.interpolateBasis() to create a uniform nonrational B-spline interpolator through an array of values. This example creates an interpolator for [0, 0.1, 0.4, 1] and returns the value at t = 0.5.

LANGUAGE: javascript
CODE:
d3.interpolateBasis([0, 0.1, 0.4, 1])(0.5) // 0.2604166666666667

----------------------------------------

TITLE: Creating D3 Ordinal Scale
DESCRIPTION: Constructs a new ordinal scale by mapping domain values to range values. In this example, letters are mapped to colors.

LANGUAGE: javascript
CODE:
const color = d3.scaleOrdinal(["a", "b", "c"], ["red", "green", "blue"]);

----------------------------------------

TITLE: Creating a closed B-spline interpolator in D3.js
DESCRIPTION: Uses d3.interpolateBasisClosed() to create a uniform nonrational B-spline interpolator with cyclical continuity. This example creates an interpolator for [0, 0.1, 0.4, 1] and returns the value at t = 0.5.

LANGUAGE: javascript
CODE:
d3.interpolateBasisClosed([0, 0.1, 0.4, 1])(0.5) // 0.45

----------------------------------------

TITLE: Creating Variable Easing Functions in D3
DESCRIPTION: Specifies a factory function that creates custom easing functions for each element in the selection based on data or other parameters.

LANGUAGE: javascript
CODE:
transition.easeVarying((d) => d3.easePolyIn.exponent(d.exponent));

----------------------------------------

TITLE: Sorting Nodes in D3 Hierarchy by Descending Value
DESCRIPTION: Demonstrates how to sort nodes in a D3 hierarchy by descending aggregate value, which is recommended for circle packing layouts.

LANGUAGE: javascript
CODE:
root
    .sum((d) => d.value)
    .sort((a, b) => b.value - a.value);

----------------------------------------

TITLE: Creating a Prefix Format Function with d3.formatPrefix
DESCRIPTION: This example demonstrates how to create a format function that uses SI prefixes based on a reference value.

LANGUAGE: javascript
CODE:
const f = d3.formatPrefix(",.0", 1e-6);

----------------------------------------

TITLE: Retrieving Current Fractional Digits Setting in D3
DESCRIPTION: Illustrates how to retrieve the current number of fractional digits set for a path generator.

LANGUAGE: javascript
CODE:
path.digits() // 3

----------------------------------------

TITLE: Parsing CSV Data with d3.csvParse in JavaScript
DESCRIPTION: This snippet demonstrates how to parse CSV data into an array of objects using d3.csvParse(). It converts a CSV string into a structured array of name-parent relationships.

LANGUAGE: javascript
CODE:
const table = d3.csvParse(text);

----------------------------------------

TITLE: Rendering Multiple Features as a FeatureCollection in D3
DESCRIPTION: Illustrates how to render multiple geographic features by combining them into a FeatureCollection and using a single path element.

LANGUAGE: javascript
CODE:
svg.append("path")
    .datum({type: "FeatureCollection", features: features})
    .attr("d", d3.geoPath());

----------------------------------------

TITLE: Default Arrowhead Radius Accessor for D3 RibbonArrow Generator
DESCRIPTION: Displays the default accessor function for the arrowhead radius in the ribbonArrow generator.

LANGUAGE: JavaScript
CODE:
function headRadius() {
  return 10;
}

----------------------------------------

TITLE: Creating a Geographic Path Generator in D3 for Canvas
DESCRIPTION: Shows how to create a new geographic path generator with a specified projection and context for use with Canvas.

LANGUAGE: javascript
CODE:
const path = d3.geoPath(projection, context); // for canvas

----------------------------------------

TITLE: Default Accessor Functions for D3 Ribbon Generator
DESCRIPTION: Shows the default accessor functions for source, target, radius, startAngle, endAngle, and padAngle in the ribbon generator.

LANGUAGE: JavaScript
CODE:
function source(d) {
  return d.source;
}

function target(d) {
  return d.target;
}

function radius(d) {
  return d.radius;
}

function startAngle(d) {
  return d.startAngle;
}

function endAngle(d) {
  return d.endAngle;
}

function padAngle() {
  return 0;
}

----------------------------------------

TITLE: Creating Custom Conic Projection
DESCRIPTION: Implementation of a custom conic projection with configurable parallels using projection mutator pattern.

LANGUAGE: JavaScript
CODE:
function conicCustom() {
  var phi0 = 29.5,
      phi1 = 45.5,
      mutate = d3.geoProjectionMutator(conicFactory),
      projection = mutate(phi0, phi1);

  projection.parallels = function(_) {
    return arguments.length ? mutate(phi0 = +_[0], phi1 = +_[1]) : [phi0, phi1];
  };

  return projection;
}

----------------------------------------

TITLE: D3 Mercator Projection Configuration
DESCRIPTION: Configuration for D3's spherical Mercator projection with rotation and extent fitting parameters.

LANGUAGE: javascript
CODE:
d3.geoMercator().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width - 1]], {type: "Sphere"}).precision(0.2)

----------------------------------------

TITLE: D3 Azimuthal Equidistant Projection
DESCRIPTION: Implementation of an azimuthal equidistant map projection with rotation and extent fitting.

LANGUAGE: javascript
CODE:
d3.geoAzimuthalEquidistant().rotate([110, -40]).fitExtent([[1, 1], [width - 1, height - 1]], {type: "Sphere"}).precision(0.2)

----------------------------------------

TITLE: Interpolating Between Geographic Points in D3-Geo
DESCRIPTION: Creates an interpolator function for two geographic points. Points are specified as [longitude, latitude] arrays in degrees.

LANGUAGE: JavaScript
CODE:
geoInterpolate(a, b)

----------------------------------------

TITLE: Default Strength Function for D3 Position Forces
DESCRIPTION: The default strength accessor function for D3 position forces, returning a constant value of 0.1.

LANGUAGE: JavaScript
CODE:
function strength() {
  return 0.1;
}

----------------------------------------

TITLE: Default Y-Coordinate Accessor for D3 forceY
DESCRIPTION: The default y-coordinate accessor function for D3 forceY, returning a constant value of 0.

LANGUAGE: JavaScript
CODE:
function y() {
  return 0;
}

----------------------------------------

TITLE: Default Strength Function for Many-Body Force
DESCRIPTION: Default strength accessor function that returns a constant negative value of -30, creating a repulsive force between nodes.

LANGUAGE: javascript
CODE:
function strength() {
  return -30;
}

----------------------------------------

TITLE: Creating Polynomial Easing Functions in D3
DESCRIPTION: This example demonstrates how to create linear, quadratic, and cubic easing functions using D3's polynomial easing with different exponents.

LANGUAGE: javascript
CODE:
const linear = d3.easePoly.exponent(1);
const quad = d3.easePoly.exponent(2);
const cubic = d3.easePoly.exponent(3);

----------------------------------------

TITLE: Importing D3 and Vue Dependencies
DESCRIPTION: This snippet imports the necessary dependencies from D3 and Vue for the easing examples.

LANGUAGE: javascript
CODE:
import * as d3 from "d3";
import {ref} from "vue";
import ExampleEase from "./components/ExampleEase.vue";

const amplitude = ref(1);
const exponent = ref(2);
const period = ref(0.3);
const overshoot = ref(1.7);

----------------------------------------

TITLE: Creating Custom DSV Parser
DESCRIPTION: Example of creating a new DSV parser instance with a custom delimiter.

LANGUAGE: javascript
CODE:
const csv = d3.dsvFormat(",");

----------------------------------------

TITLE: Removing D3 Drag Behavior in JavaScript
DESCRIPTION: Illustrates how to remove a drag behavior from a selection by unbinding the associated event listeners.

LANGUAGE: JavaScript
CODE:
selection.on(".drag", null);

----------------------------------------

TITLE: Registering Callbacks with D3 Dispatch in JavaScript
DESCRIPTION: Shows how to register multiple callbacks for different events using the dispatch.on method.

LANGUAGE: javascript
CODE:
dispatch.on("start", callback1);
dispatch.on("start.foo", callback2);
dispatch.on("end", callback3);

----------------------------------------

TITLE: Rendering Voronoi Diagram with Observable Plot
DESCRIPTION: Uses Observable Plot to render a Voronoi diagram with interactive features. It displays points, Voronoi mesh, and allows for interactive neighbor exploration on mouse movement.

LANGUAGE: javascript
CODE:
<PlotRender defer v-once :options='{
  axis: null,
  width: 688,
  height: 688,
  x: {domain: [-4, 3.5]},
  y: {domain: [-3, 3.5]},
  marks: [
    Plot.dot(points, {r: 2, fill: "currentColor"}),
    Plot.voronoiMesh(points, {strokeOpacity: 0.3}),
    Plot.link(points, {
      x1: (d) => d[0],
      y1: (d) => d[1],
      x2: (d) => d[0],
      y2: (d) => d[1],
      stroke: "red",
      strokeWidth: 2,
      markerStart: "dot",
      markerEnd: "arrow",
      render(index, scales, values, dimensions, context, next) {
        const {x1: X, y1: Y} = values;
        const delaunay = d3.Delaunay.from(points, (d, i) => X[i], (d, i) => Y[i]);
        const voronoi = delaunay.voronoi([0, 0, dimensions.width, dimensions.height]);
        function update(x, y) {
          const i = delaunay.find(x, y);
          const N = Array.from(voronoi.neighbors(i));
          neighborsState = {i, N};
          return next(
            d3.range(N.length),
            scales,
            {
              x1: N.map(() => X[i]),
              x2: N.map((j) => X[j]),
              y1: N.map(() => Y[i]),
              y2: N.map((j) => Y[j])
            },
            dimensions,
            context
          );
        }
        let line = update(0, 0);
        context.ownerSVGElement.addEventListener("pointermove", (event) => {
          const [x, y] = d3.pointer(event);
          const newline = update(Math.round(x), Math.round(y));
          line.replaceWith(newline);
          line = newline;
        });
        return line;
      }
    }),
  ]
}' />

----------------------------------------

TITLE: Initializing Voronoi Diagram Data with D3 and Vue.js
DESCRIPTION: Sets up the initial data for a Voronoi diagram using D3's random number generator and Vue.js reactive state. It creates an array of 1000 random points and initializes a state object for tracking neighbors.

LANGUAGE: javascript
CODE:
const random = d3.randomNormal.source(d3.randomLcg(42))();
const points = Array.from({length: 1000}, () => [random(), random()]);
const neighborsState = shallowRef({i: -1, N: []});

----------------------------------------

TITLE: Adjusting D3.js Axis Tick Sizes
DESCRIPTION: These examples demonstrate how to adjust tick sizes in D3.js axes. They show setting overall tick size, inner tick size, and outer tick size separately.

LANGUAGE: javascript
CODE:
const axis = d3.axisBottom(x).tickSize(0);

LANGUAGE: javascript
CODE:
const axis = d3.axisBottom(x).tickSizeInner(0);

LANGUAGE: javascript
CODE:
const axis = d3.axisBottom(x).tickSizeOuter(0);

----------------------------------------

TITLE: Using Bisector.right Method
DESCRIPTION: Demonstrates using the right() method of a custom bisector to find the insertion point after a specific date.

LANGUAGE: javascript
CODE:
d3.bisector((d) => d.Date).right(aapl, new Date("2014-01-02")) // 163

----------------------------------------

TITLE: D3 Transition Attribute Setting Function
DESCRIPTION: Reusable function for setting multiple style attributes in a transition using method chaining.

LANGUAGE: javascript
CODE:
function color(transition, fill, stroke) {
  transition
      .style("fill", fill)
      .style("stroke", stroke);
}

----------------------------------------

TITLE: Basic Symbol Generation with D3
DESCRIPTION: Creates a symbol path element with a cross symbol type in SVG.

LANGUAGE: javascript
CODE:
svg.append("path").attr("d", d3.symbol(d3.symbolCross));

----------------------------------------

TITLE: Setting Curve Type for D3 Radial Line - JavaScript
DESCRIPTION: Configures the curve interpolation method for the radial line generator.

LANGUAGE: javascript
CODE:
const line = d3.lineRadial().curve(d3.curveBasis);

----------------------------------------

TITLE: Setting Value Accessor
DESCRIPTION: Shows how to configure the pie generator's value accessor function to handle structured data objects.

LANGUAGE: javascript
CODE:
const pie = d3.pie().value((d) => d.value);

----------------------------------------

TITLE: Setting Link Context
DESCRIPTION: Sets the rendering context for the link generator, enabling canvas rendering.

LANGUAGE: javascript
CODE:
const context = canvas.getContext("2d");
const link = d3.link().context(context);

----------------------------------------

TITLE: Creating Horizontal Link Generator
DESCRIPTION: Creates a horizontal link generator using curveBumpX shorthand.

LANGUAGE: javascript
CODE:
const link = d3.link(d3.curveBumpX);

----------------------------------------

TITLE: Defining Data Points for Line Generator in D3.js
DESCRIPTION: Illustrates how to set a custom defined accessor to handle missing or invalid data points.

LANGUAGE: javascript
CODE:
const line = d3.line().defined((d) => !isNaN(d.Close));

----------------------------------------

TITLE: Using Custom D3 Selection Method in JavaScript
DESCRIPTION: Shows how to use the custom 'checked' method added to the D3 selection prototype.

LANGUAGE: javascript
CODE:
d3.selectAll("input[type=checkbox]").checked(true);

----------------------------------------

TITLE: Checking for Empty Selections in D3
DESCRIPTION: Demonstrates how to use the empty() method to check if a selection contains any non-null elements.

LANGUAGE: javascript
CODE:
d3.selectAll("p").empty() // false, here

----------------------------------------

TITLE: Importing D3 and Vue Components in JavaScript
DESCRIPTION: This snippet demonstrates how to import D3 and custom Vue components for use in a project.

LANGUAGE: javascript
CODE:
import * as d3 from "d3";
import ColorRamp from "../components/ColorRamp.vue";
import ColorSwatches from "../components/ColorSwatches.vue";

----------------------------------------

TITLE: Importing D3 and ColorRamp Component in Vue
DESCRIPTION: This snippet shows how to import the D3 library and a custom ColorRamp component in a Vue.js setup script.

LANGUAGE: vue
CODE:
<script setup>

import * as d3 from "d3";
import ColorRamp from "../components/ColorRamp.vue";

</script>

----------------------------------------

TITLE: Setting X-Coordinate Accessor for D3 Quadtree
DESCRIPTION: Shows how to set and retrieve the x-coordinate accessor function for a D3 quadtree.

LANGUAGE: javascript
CODE:
const tree = d3.quadtree().x((d) => d.x);

LANGUAGE: javascript
CODE:
tree.x() // (d) => d.x

LANGUAGE: javascript
CODE:
function x(d) {
  return d[0];
}

----------------------------------------

TITLE: Initializing Random Points with D3
DESCRIPTION: Setup code that creates an array of 1000 random points using D3's random normal distribution with a fixed seed.

LANGUAGE: javascript
CODE:
const random = d3.randomNormal.source(d3.randomLcg(42))();
const points = Array.from({length: 1000}, () => [random(), random()]);

----------------------------------------

TITLE: Creating a FormatSpecifier Object
DESCRIPTION: This snippet shows how to create a new FormatSpecifier object with custom properties.

LANGUAGE: javascript
CODE:
new d3.FormatSpecifier({type: "f", precision: 1})

----------------------------------------

TITLE: Loading Binary Data as ArrayBuffer
DESCRIPTION: Shows how to load binary data as an ArrayBuffer using d3.buffer(). Provides raw binary data access.

LANGUAGE: javascript
CODE:
const buffer = await d3.buffer("example.db");

----------------------------------------

TITLE: Converting NodeList to array in d3.selectAll
DESCRIPTION: Example of how d3.selectAll now converts array-likes like NodeList to arrays

LANGUAGE: JavaScript
CODE:
d3.selectAll(document.querySelectorAll("div"))

----------------------------------------

TITLE: Using InternMap for ordinal scale domains
DESCRIPTION: Example showing how ordinal scales now use InternMap for domains

LANGUAGE: JavaScript
CODE:
var scale = d3.scaleOrdinal()
  .domain(["a", "b", "c"])
  .range(["red", "green", "blue"]);

----------------------------------------

TITLE: Implicit Domain in D3 Ordinal Scale
DESCRIPTION: Shows how domains can be inferred implicitly from usage when values are not explicitly set.

LANGUAGE: javascript
CODE:
const color = d3.scaleOrdinal(["red", "green", "blue"]);
color("b"); // "red"
color("a"); // "green"
color("c"); // "blue"
color.domain(); // inferred ["b", "a", "c"]

----------------------------------------

TITLE: Creating a D3.js Bin Generator in JavaScript
DESCRIPTION: Constructs a new bin generator with a custom value accessor function to extract data from objects.

LANGUAGE: javascript
CODE:
const bin = d3.bin().value((d) => d.culmen_length_mm);

----------------------------------------

TITLE: Computing Pie Chart Angles
DESCRIPTION: Demonstrates how to compute pie chart angles from an array of numeric data using the pie generator.

LANGUAGE: javascript
CODE:
const data = [1, 1, 2, 3, 5, 8, 13, 21];
const pie = d3.pie();
const arcs = pie(data);

----------------------------------------

TITLE: Generating Array of Sundays in a Month
DESCRIPTION: Shows how to use d3.timeMonth and d3.timeWeek to generate an array of dates representing each Sunday in a given month.

LANGUAGE: JavaScript
CODE:
const start = d3.timeMonth.floor(new Date(2015, 0, 15)); // 2015-01-01T00:00
const stop = d3.timeMonth.ceil(new Date(2015, 0, 15)); // 2015-02-01T00:00
const weeks = d3.timeWeek.range(start, stop); // [2015-01-04T00:00, 2015-01-11T00:00, 2015-01-18T00:00, 2015-01-25T00:00]

----------------------------------------

TITLE: Implementing D3 Timer with Callback and Delay
DESCRIPTION: Shows how to create a timer that executes a callback function repeatedly until stopped, with a specified delay and elapsed time tracking

LANGUAGE: javascript
CODE:
const t = d3.timer((elapsed) => {
  console.log(elapsed);
  if (elapsed > 200) t.stop();
}, 150);

----------------------------------------

TITLE: Symbol Size Configuration
DESCRIPTION: Sets a fixed size for the symbol generator.

LANGUAGE: javascript
CODE:
const symbol = d3.symbol().size(100);

----------------------------------------

TITLE: Retrieving Current Point Radius from Path Generator in D3
DESCRIPTION: Illustrates how to retrieve the current point radius setting from a geographic path generator.

LANGUAGE: javascript
CODE:
path.pointRadius() // 10

----------------------------------------

TITLE: Applying Radial Area Generator to SVG Path in D3.js
DESCRIPTION: Demonstrates how to use the radial area generator to create an SVG path element with the generated area.

LANGUAGE: JavaScript
CODE:
svg.append("path").attr("d", area(data));

----------------------------------------

TITLE: Defining a Custom Locale for Number Formatting
DESCRIPTION: This snippet shows how to create a custom locale object with specific formatting rules for thousands separators, grouping, and currency symbols.

LANGUAGE: javascript
CODE:
const enUs = d3.formatLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

----------------------------------------

TITLE: Setting Radius Accessor for D3 Radial Line - JavaScript
DESCRIPTION: Configures the radius accessor function for the radial line generator to determine distance from origin.

LANGUAGE: javascript
CODE:
const line = d3.lineRadial().radius((d) => r(d.temperature));

----------------------------------------

TITLE: Sequential Quantile Scale Example in D3
DESCRIPTION: Shows how to create and use a sequential quantile scale with data mapping and quantile calculations.

LANGUAGE: javascript
CODE:
const color = d3.scaleSequentialQuantile()
    .domain(penguins.map((d) => d.body_mass_g))
    .interpolator(d3.interpolateBlues);

color.quantiles(4); // [2700, 3550, 4050, 4750, 6300]

----------------------------------------

TITLE: Close Path Command
DESCRIPTION: Demonstrates closing a path by connecting the current point to the initial point.

LANGUAGE: javascript
CODE:
path.closePath();

----------------------------------------

TITLE: Darkening Color with darker Method
DESCRIPTION: Shows how to create a darker version of a color using the darker method.

LANGUAGE: javascript
CODE:
d3.color("steelblue").darker(1) // {r: 49, g: 91, b: 126, opacity: 1}

----------------------------------------

TITLE: Calculating Spherical Area in D3-Geo
DESCRIPTION: Returns the spherical area of a GeoJSON object in steradians. Equivalent to path.area in spherical coordinates.

LANGUAGE: JavaScript
CODE:
geoArea(object)

----------------------------------------

TITLE: Symbol Type Configuration
DESCRIPTION: Sets the symbol type to cross shape using the type accessor.

LANGUAGE: javascript
CODE:
const symbol = d3.symbol().type(d3.symbolCross);

----------------------------------------

TITLE: Setting Fixed Radius for D3 Ribbon Generator
DESCRIPTION: Demonstrates how to set a fixed radius of 240 pixels for the ribbon generator, simplifying the input data structure.

LANGUAGE: JavaScript
CODE:
const ribbon = d3.ribbon().radius(240);

ribbon({
  source: {startAngle: 0.7524114, endAngle: 1.1212972},
  target: {startAngle: 1.8617078, endAngle: 1.9842927}
}) // "M164.0162810494058,-175.21032946354026A240,240,0,0,1,216.1595644740915,-104.28347273835429Q0,0,229.9158815306728,68.8381247563705A240,240,0,0,1,219.77316791012538,96.43523560788266Q0,0,164.0162810494058,-175.21032946354026Z"

----------------------------------------

TITLE: Setting Pad Angle
DESCRIPTION: Demonstrates how to set padding between pie segments using padAngle.

LANGUAGE: javascript
CODE:
const pie = d3.pie().padAngle(0.03);

----------------------------------------

TITLE: D3 Gnomonic Projection
DESCRIPTION: Implementation of a gnomonic map projection with custom scale, translation, and clipping.

LANGUAGE: javascript
CODE:
d3.geoGnomonic().scale(width / 6).translate([width / 2, height / 2]).clipAngle(74 - 1e-4).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)

----------------------------------------

TITLE: Getting Current Time with D3 Now Function
DESCRIPTION: Demonstrates the usage of d3.now() function that returns the current time using performance.now or Date.now

LANGUAGE: javascript
CODE:
d3.now() // 1236.3000000715256

----------------------------------------

TITLE: Quadratic Curve Command
DESCRIPTION: Example of drawing a quadratic Bézier curve with one control point.

LANGUAGE: javascript
CODE:
path.quadraticCurveTo(200, 0, 200, 200);

----------------------------------------

TITLE: Initializing D3 Pie Generator
DESCRIPTION: Creates a new pie generator with default settings for generating pie chart angle calculations.

LANGUAGE: javascript
CODE:
const pie = d3.pie();

----------------------------------------

TITLE: Multi-Scale Time Formatting
DESCRIPTION: Implements a conditional time format function that changes format based on time intervals.

LANGUAGE: javascript
CODE:
const formatMillisecond = d3.utcFormat(".%L"),
    formatSecond = d3.utcFormat(":%S"),
    formatMinute = d3.utcFormat("%I:%M"),
    formatHour = d3.utcFormat("%I %p"),
    formatDay = d3.utcFormat("%a %d"),
    formatWeek = d3.utcFormat("%b %d"),
    formatMonth = d3.utcFormat("%B"),
    formatYear = d3.utcFormat("%Y");

function multiFormat(date) {
  return (d3.utcSecond(date) < date ? formatMillisecond
      : d3.utcMinute(date) < date ? formatSecond
      : d3.utcHour(date) < date ? formatMinute
      : d3.utcDay(date) < date ? formatHour
      : d3.utcMonth(date) < date ? (d3.utcWeek(date) < date ? formatDay : formatWeek)
      : d3.utcYear(date) < date ? formatMonth
      : formatYear)(date);
}

----------------------------------------

TITLE: Configured Arc Generator
DESCRIPTION: Creates an arc generator with predefined radii and angles as constants rather than accessing them from data objects.

LANGUAGE: javascript
CODE:
const arc = d3.arc()
    .innerRadius(0)
    .outerRadius(100)
    .startAngle(0)
    .endAngle(Math.PI / 2);

----------------------------------------

TITLE: Default Symbol Generation
DESCRIPTION: Generates a circle symbol path data with default settings (64 square pixels).

LANGUAGE: javascript
CODE:
d3.symbol()() // "M4.514,0A4.514,4.514,0,1,1,-4.514,0A4.514,4.514,0,1,1,4.514,0"

----------------------------------------

TITLE: Creating a piecewise interpolator in D3.js
DESCRIPTION: Uses d3.piecewise() to create a piecewise interpolator composing interpolators for adjacent pairs of values. This example creates a piecewise RGB interpolator with gamma correction for ['red', 'green', 'blue'].

LANGUAGE: javascript
CODE:
d3.piecewise(d3.interpolateRgb.gamma(2.2), ["red", "green", "blue"])

----------------------------------------

TITLE: Explicit Area Generator Configuration
DESCRIPTION: Shows how to explicitly configure an area generator using separate method calls for x, y0, and y1 coordinates.

LANGUAGE: javascript
CODE:
const area = d3.area()
    .x((d) => x(d.Date))
    .y0(y(0))
    .y1((d) => y(d.Close));

----------------------------------------

TITLE: Computing Tick Steps in D3.js
DESCRIPTION: Examples of d3.tickStep() function that calculates the difference between adjacent tick values. Returns a nicely-rounded value that is a power of ten multiplied by 1, 2, or 5.

LANGUAGE: javascript
CODE:
d3.tickStep(1, 9, 5) // 2

LANGUAGE: javascript
CODE:
d3.tickStep(9, 1, 5) // -2

----------------------------------------

TITLE: Generating Uniform Ticks in D3.js
DESCRIPTION: Examples of d3.ticks() function generating uniformly-spaced values between start and stop points. The function returns nicely-rounded values that are powers of ten multiplied by 1, 2, or 5.

LANGUAGE: javascript
CODE:
d3.ticks(1, 9, 5) // [2, 4, 6, 8]

LANGUAGE: javascript
CODE:
d3.ticks(1, 9, 20) // [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9]

----------------------------------------

TITLE: Initializing D3 Contour Generator
DESCRIPTION: Creates a new contour generator with size and threshold settings for generating contour polygons.

LANGUAGE: javascript
CODE:
const contours = d3.contours()
    .size([width, height])
    .thresholds([0, 1, 2, 3, 4]);

----------------------------------------

TITLE: Default Node ID Accessor in D3.js
DESCRIPTION: Default function for accessing node IDs in the force layout, using numeric indices.

LANGUAGE: javascript
CODE:
function id(d) {
  return d.index;
}

----------------------------------------

TITLE: Initializing Link Force in D3.js
DESCRIPTION: Creates a new link force with specified links and sets the node ID accessor function.

LANGUAGE: javascript
CODE:
const link = d3.forceLink(links).id((d) => d.id);

----------------------------------------

TITLE: Creating Arrays of Rolled-up Data with D3.js rollups() Function
DESCRIPTION: Shows how to use d3.rollups() to create an array of [key, value] entries from rolled-up data. This is similar to d3.rollup() but returns an array instead of a map.

LANGUAGE: javascript
CODE:
const speciesCounts = d3.rollups(penguins, (D) => D.length, (d) => d.species); // [["Adelie", 152], …]

----------------------------------------

TITLE: Setting Pack Layout Padding
DESCRIPTION: Sets or gets the padding between circles in the layout. Can be a number or function, defaults to zero.

LANGUAGE: javascript
CODE:
pack.padding(padding)

----------------------------------------

TITLE: Permuting Object Properties using D3
DESCRIPTION: Shows how d3.permute can be used to extract and rearrange properties from an object into a new array.

LANGUAGE: javascript
CODE:
const object = {yield: 27, variety: "Manchuria", year: 1931, site: "University Farm"};

LANGUAGE: javascript
CODE:
d3.permute(object, ["site", "variety", "yield"]) // ["University Farm", "Manchuria", 27]

----------------------------------------

TITLE: D3 Class Manipulation
DESCRIPTION: Demonstrates various ways to add, remove, and check classes using D3's classed method.

LANGUAGE: javascript
CODE:
selection.classed("foo", true)

LANGUAGE: javascript
CODE:
selection.classed("foo bar", true)

LANGUAGE: javascript
CODE:
selection.classed("foo", () => Math.random() > 0.5)

LANGUAGE: javascript
CODE:
selection.classed("foo") // true, perhaps

----------------------------------------

TITLE: Dynamic Symbol Size Scaling
DESCRIPTION: Creates a symbol generator with size based on data values using a linear scale.

LANGUAGE: javascript
CODE:
const symbolSize = d3.scaleLinear([0, 100]);
const symbol = d3.symbol().size((d) => symbolSize(d.value));

----------------------------------------

TITLE: Converting Tabular Data to Hierarchy using d3.stratify() in JavaScript
DESCRIPTION: This code shows how to use d3.stratify() to convert an array of objects with name and parent properties into a hierarchical structure. It sets up id and parentId accessors to define the relationships.

LANGUAGE: javascript
CODE:
const root = d3.stratify()
    .id((d) => d.name)
    .parentId((d) => d.parent)
  (table);

----------------------------------------

TITLE: Custom Interval Ticks in D3.js UTC Scale
DESCRIPTION: Shows how to generate ticks at specific time intervals using UTC time scale. Example demonstrates creating 15-minute interval ticks over a 2-hour period.

LANGUAGE: javascript
CODE:
const x = d3.scaleUtc().domain([new Date("2000-01-01T00:00Z"), new Date("2000-01-01T02:00Z")]);
x.ticks(d3.utcMinute.every(15));
// [2000-01-01T00:00Z,
//  2000-01-01T00:15Z,
//  2000-01-01T00:30Z,
//  2000-01-01T00:45Z,
//  2000-01-01T01:00Z,
//  2000-01-01T01:15Z,
//  2000-01-01T01:30Z,
//  2000-01-01T01:45Z,
//  2000-01-01T02:00Z]

----------------------------------------

TITLE: Computing Spherical Centroid in D3-Geo
DESCRIPTION: Calculates the spherical centroid of a GeoJSON object. Equivalent to path.centroid in spherical coordinates.

LANGUAGE: JavaScript
CODE:
geoCentroid(object)

----------------------------------------

TITLE: Defining Default Radius Accessor for D3.js Circle Generator
DESCRIPTION: Illustrates the default radius accessor function used in D3.js circle generator, which returns 90 as the default radius in degrees.

LANGUAGE: JavaScript
CODE:
function radius() {
  return 90;
}

----------------------------------------

TITLE: Configuring Transition Duration in D3
DESCRIPTION: Sets the transition duration for selected elements. Duration can be specified as a constant value in milliseconds or as a function. Default duration is 250ms if not specified.

LANGUAGE: javascript
CODE:
transition.duration(750);

LANGUAGE: javascript
CODE:
transition.duration() // 750

----------------------------------------

TITLE: Index-Based Node Links Example in D3.js
DESCRIPTION: Example of defining nodes and links using index-based references in a force-directed graph.

LANGUAGE: javascript
CODE:
const nodes = [
  {"id": "Alice"},
  {"id": "Bob"},
  {"id": "Carol"}
];

const links = [
  {"source": 0, "target": 1}, // Alice → Bob
  {"source": 1, "target": 2} // Bob → Carol
];

----------------------------------------

TITLE: Interpolating between two strings in D3.js
DESCRIPTION: Uses d3.interpolateString() to create an interpolator between two strings containing numbers. This example interpolates between '20px' and '32px', returning the value halfway between them.

LANGUAGE: javascript
CODE:
d3.interpolateString("20px", "32px")(0.5) // "26px"

----------------------------------------

TITLE: Finding Maximum Values with D3 Max
DESCRIPTION: Shows various ways to use d3.max() to find maximum values in arrays, handling different data types and using accessors.

LANGUAGE: javascript
CODE:
d3.max([3, 2, 1, 1, 6, 2, 4]) // 6

d3.max(["bob", "alice", "carol"]) // "carol"

d3.max([new Date("2018-01-01"), new Date("2011-03-09")]) // 2018-01-01

d3.max([3, 2, 1, NaN, 4]) // 4

d3.max(alphabet, (d) => d.frequency) // 0.12702

d3.max(alphabet, (d) => d.letter === "E" ? NaN : d.frequency) // 0.09056

d3.max([]) // undefined

d3.max(alphabet, (d) => d.doesnotexist) // undefined

----------------------------------------

TITLE: Initializing D3 Map Component Setup
DESCRIPTION: Vue component setup that imports D3 and a WorldMap component, defining basic dimensions for map rendering.

LANGUAGE: vue
CODE:
<script setup>

import * as d3 from "d3";
import WorldMap from "../components/WorldMap.vue";

const width = 688;
const height = 400;

</script>

----------------------------------------

TITLE: Setting D3 Local Variable Using Selection.property
DESCRIPTION: Demonstrates a simpler way to set a local variable using selection.property() when only setting a single variable.

LANGUAGE: javascript
CODE:
selection.property(foo, (d) => d.value);

----------------------------------------

TITLE: Default Radius Accessor for Collide Force in D3.js
DESCRIPTION: This code shows the default radius accessor function for the collide force. It returns a constant value of 1 for all nodes if no custom radius is specified.

LANGUAGE: javascript
CODE:
function radius() {
  return 1;
}

----------------------------------------

TITLE: Creating New Jersey State Plane Projection Example
DESCRIPTION: Example showing how to create and configure a transverse Mercator projection for New Jersey with specific rotation and extent fitting.

LANGUAGE: JavaScript
CODE:
var projection = d3.geoTransverseMercator()
    .rotate([74 + 30 / 60, -38 - 50 / 60])
    .fitExtent([[20, 20], [940, 480]], nj);

----------------------------------------

TITLE: Interpolating Fill Style with D3 Transition
DESCRIPTION: Examples of using styleTween() to interpolate the fill style between colors. Shows three approaches: interpolating between fixed colors, interpolating from current style, and using a custom rainbow interpolator.

LANGUAGE: javascript
CODE:
transition.styleTween("fill", () => d3.interpolateRgb("red", "blue"));

transition.styleTween("fill", function() {
  return d3.interpolateRgb(this.style.fill, "blue");
});

transition.styleTween("fill", () => (t) => `hsl(${t * 360},100%,50%)`);

----------------------------------------

TITLE: Creating forceRadial in D3
DESCRIPTION: Creates a new radial position force towards a circle with specified radius and center coordinates.

LANGUAGE: JavaScript
CODE:
const radial = d3.forceRadial(r, width / 2, height / 2);

----------------------------------------

TITLE: Testing Point Containment in Polygon with D3
DESCRIPTION: Shows how to check if a point lies inside a polygon using d3.polygonContains().

LANGUAGE: javascript
CODE:
d3.polygonContains([[1, 1], [1.5, 0], [2, 1]], [1.5, 0.667]) // true

----------------------------------------

TITLE: Importing D3 and Components in Vue.js
DESCRIPTION: This snippet shows how to import the d3 library and a custom ColorRamp component in a Vue.js setup script.

LANGUAGE: javascript
CODE:
<script setup>

import * as d3 from "d3";
import ColorRamp from "./components/ColorRamp.vue";

</script>

----------------------------------------

TITLE: Loading CSV Data with d3.csv()
DESCRIPTION: Shows how to load and automatically parse CSV data into an array of objects using d3.csv(). Each row becomes an object with column headers as keys.

LANGUAGE: javascript
CODE:
const data = await d3.csv("hello-world.csv"); // [{"Hello": "world"}, …]

----------------------------------------

TITLE: Initializing Many-Body Force in D3
DESCRIPTION: Creates a new many-body force with a specified negative strength value of -100, which creates repulsion between nodes.

LANGUAGE: javascript
CODE:
const manyBody = d3.forceManyBody().strength(-100);

----------------------------------------

TITLE: Invoking Callbacks with Context and Arguments in D3 Dispatch
DESCRIPTION: Shows how to call callbacks with a specific context object and additional arguments using dispatch.call.

LANGUAGE: javascript
CODE:
dispatch.call("start", {about: "I am a context object"}, "I am an argument");

----------------------------------------

TITLE: Calculating Tree Width for D3 Visualization
DESCRIPTION: This function uses D3's tree layout to compute the width of a tree visualization based on the provided paths. It's used to determine the height of the rendered plot.

LANGUAGE: javascript
CODE:
function computeTreeWidth(paths) {
  const root = d3.tree().nodeSize([1, 1])(d3.stratify().path((d) => d.path)(paths));
  const [x1, x2] = d3.extent(root, (d) => d.x);
  return x2 - x1;
}

----------------------------------------

TITLE: Covering Points in D3 Quadtree
DESCRIPTION: Demonstrates how to expand a D3 quadtree to cover specific points, adjusting the extent as needed.

LANGUAGE: javascript
CODE:
const tree = d3.quadtree().cover(0, 0).cover(1, 1);

----------------------------------------

TITLE: Creating a Collide Force in D3.js
DESCRIPTION: This snippet demonstrates how to create a new circle collide force with a radius accessor function. The radius is set dynamically based on the 'r' property of each node.

LANGUAGE: javascript
CODE:
const collide = d3.forceCollide((d) => d.r);

----------------------------------------

TITLE: Importing D3 and Vue Component in JavaScript
DESCRIPTION: This snippet demonstrates how to import the D3 library and a custom Vue component for color swatches. It uses the Vue 3 script setup syntax.

LANGUAGE: javascript
CODE:
<script setup>

import * as d3 from "d3";
import ColorSwatches from "../components/ColorSwatches.vue";

</script>

----------------------------------------

TITLE: Computing Set Union in D3.js
DESCRIPTION: Creates a new InternSet containing all distinct values from multiple iterables. Values are ordered based on their first occurrence.

LANGUAGE: javascript
CODE:
d3.union([0, 2, 1, 0], [1, 3]) // Set {0, 2, 1, 3}

----------------------------------------

TITLE: Initializing UTC Time Scale in D3.js
DESCRIPTION: Creates a position encoding using D3's UTC time scale. Similar to local time scale but operates in Coordinated Universal Time instead of local time.

LANGUAGE: javascript
CODE:
const x = d3.scaleUtc([new Date("2000-01-01"), new Date("2000-01-02")], [0, 960]);
x(new Date("2000-01-01T05:00Z")); // 200
x(new Date("2000-01-01T16:00Z")); // 640
x.invert(200); // 2000-01-01T05:00Z
x.invert(640); // 2000-01-01T16:00Z

----------------------------------------

TITLE: Mapping Iterables with D3 Map
DESCRIPTION: Maps values from an iterable using a mapper function, similar to Array.map but works with any iterable.

LANGUAGE: javascript
CODE:
d3.map(new Set([0, 2, 3, 4]), (d) => d & 1) // [0, 0, 1, 0]

----------------------------------------

TITLE: Default Zoom Filter Function
DESCRIPTION: Default function for filtering which events trigger zoom behavior.

LANGUAGE: javascript
CODE:
function filter(event) {
  return (!event.ctrlKey || event.type === 'wheel') && !event.button;
}

----------------------------------------

TITLE: Setting Transition Delay in D3
DESCRIPTION: Sets the transition delay for selected elements. Delay can be specified as a constant value in milliseconds or as a function that computes delay based on data, index, or other factors.

LANGUAGE: javascript
CODE:
transition.delay(250);

LANGUAGE: javascript
CODE:
transition.delay() // 250

LANGUAGE: javascript
CODE:
transition.delay((d, i) => i * 10);

----------------------------------------

TITLE: Applying Partition Layout to Hierarchy in D3
DESCRIPTION: Applies the partition layout to a root node of a hierarchy, calculating coordinates for each node. Requires prior calculation of node values using root.sum() and optionally root.sort() for ordering.

LANGUAGE: javascript
CODE:
partition(root)

----------------------------------------

TITLE: Creating Custom Elastic Easing in D3
DESCRIPTION: This snippet shows how to create a custom elastic easing function with a specific period before applying it to a normalized time value.

LANGUAGE: javascript
CODE:
const ease = d3.easeElastic.period(0.4);

// During animation:
const te = ease(t);

----------------------------------------

TITLE: Creating a D3 Drag Behavior in JavaScript
DESCRIPTION: Demonstrates how to create a new drag behavior using d3.drag(). This is the basic setup for implementing drag functionality in D3.

LANGUAGE: JavaScript
CODE:
const drag = d3.drag();

----------------------------------------

TITLE: Inverting a Quantize Scale in D3.js
DESCRIPTION: Shows how to use the invertExtent() method of a quantize scale to find the domain values corresponding to a given range value. This is useful for interaction, such as determining the domain value for a mouse position.

LANGUAGE: javascript
CODE:
const width = d3.scaleQuantize([10, 100], [1, 2, 4]);
width.invertExtent(2); // [40, 70]

----------------------------------------

TITLE: Generating Random Integers with D3
DESCRIPTION: Generates random integers with a uniform distribution between specified minimum (inclusive) and maximum (exclusive) values. If only one argument is provided, generates integers from 0 to that value.

LANGUAGE: javascript
CODE:
d3.randomInt(100) // generate integers ≥0 and <100

----------------------------------------

TITLE: Using D3 Ordinal Scale
DESCRIPTION: Demonstrates how to use an ordinal scale to map an input value to its corresponding range value.

LANGUAGE: javascript
CODE:
color("a") // "red"

----------------------------------------

TITLE: Various Examples of d3.format Usage
DESCRIPTION: This set of examples showcases different format specifiers and their results using d3.format, including percentage, currency, padding, and scientific notation.

LANGUAGE: javascript
CODE:
d3.format(".0%")(0.123) // rounded percentage, "12%"

LANGUAGE: javascript
CODE:
d3.format("($.2f")(-3.5) // localized fixed-point currency, "(£3.50)"

LANGUAGE: javascript
CODE:
d3.format("+20")(42) // space-filled and signed, "                 +42"

LANGUAGE: javascript
CODE:
d3.format(".^20")(42) // dot-filled and centered, ".........42.........

LANGUAGE: javascript
CODE:
d3.format(".2s")(42e6) // SI-prefix with two significant digits, "42M"

LANGUAGE: javascript
CODE:
d3.format("#x")(48879) // prefixed lowercase hexadecimal, "0xbeef"

LANGUAGE: javascript
CODE:
d3.format(",.2r")(4223) // grouped thousands with two significant digits, "4,200"

----------------------------------------

TITLE: Creating Cubehelix Color with d3.cubehelix
DESCRIPTION: Demonstrates creating a Cubehelix color from a named color using d3.cubehelix function.

LANGUAGE: javascript
CODE:
d3.cubehelix("yellow") // {h: 56.942171677321085, s: 4.614386868039714, l: 0.8900004504279901, opacity: 1}

----------------------------------------

TITLE: Reducing Iterables with D3 Reduce
DESCRIPTION: Reduces values from an iterable using a reducer function and initial value, similar to Array.reduce but works with any iterable.

LANGUAGE: javascript
CODE:
d3.reduce(new Set([0, 2, 3, 4]), (p, v) => p + v, 0) // 9

----------------------------------------

TITLE: Seeded Random Number Generation in D3
DESCRIPTION: Demonstrates how to create a seeded random number generator using d3.randomLcg for reproducible random sequences.

LANGUAGE: javascript
CODE:
const seed = 0.44871573888282423; // any number in [0, 1)
const random = d3.randomNormal.source(d3.randomLcg(seed))(0, 1);
random(); // -0.6253955998897069

----------------------------------------

TITLE: Creating a Diverging Scale with Default Domain and Interpolator in D3.js
DESCRIPTION: Illustrates the creation of a diverging scale with both default domain and interpolator, resulting in an identity scale.

LANGUAGE: javascript
CODE:
const identity = d3.scaleDiverging();

----------------------------------------

TITLE: Measuring Great-Arc Distance in D3-Geo
DESCRIPTION: Computes the great-arc distance between two points in radians. Points are specified as [longitude, latitude] arrays in degrees.

LANGUAGE: JavaScript
CODE:
geoDistance(a, b)

----------------------------------------

TITLE: Adjusting Color Opacity
DESCRIPTION: Shows how to adjust the opacity of a color and format it as an RGBA string.

LANGUAGE: javascript
CODE:
c.opacity = 0.8;
c + ""; // rgba(198, 45, 205, 0.8)

----------------------------------------

TITLE: Setting Extent for D3 Quadtree
DESCRIPTION: Shows how to set and retrieve the extent of a D3 quadtree, which defines the boundaries of the tree.

LANGUAGE: javascript
CODE:
const tree = d3.quadtree().extent([[0, 0], [1, 1]]);

LANGUAGE: javascript
CODE:
tree.extent() // [[0, 0], [2, 2]]

----------------------------------------

TITLE: Using Bisector.center Method
DESCRIPTION: Demonstrates using the center() method to find the index of the closest value to a given date.

LANGUAGE: javascript
CODE:
d3.bisector((d) => d.Date).center(aapl, new Date("2013-12-31")) // 161

----------------------------------------

TITLE: Defining a Line Generator for Time Series in D3.js
DESCRIPTION: This snippet demonstrates how to create a line generator for a time series visualization using D3.js. It scales the date and value fields of the input data to fit the chart dimensions.

LANGUAGE: javascript
CODE:
const line = d3.line()
    .x((d) => x(d.date))
    .y((d) => y(d.value));

----------------------------------------

TITLE: Basic Point Scale Usage in JavaScript
DESCRIPTION: Demonstrates creating and using a point scale with a domain and range. Shows how the scale maps domain values to points in the range.

LANGUAGE: javascript
CODE:
const x = d3.scalePoint(["a", "b", "c"], [0, 960]);
x("a"); // 0
x("b"); // 480
x("c"); // 960
x("d"); // undefined

----------------------------------------

TITLE: Initializing D3 and Plot Libraries in Vue.js
DESCRIPTION: This snippet sets up the necessary imports for using D3 and Observable Plot in a Vue.js component. It also imports custom components and utilities.

LANGUAGE: javascript
CODE:
<script setup>

import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {useData} from "vitepress";
import {computed} from "vue";
import LogoDiagram from "./components/LogoDiagram.vue";
import PlotRender from "./components/PlotRender.js";

</script>

----------------------------------------

TITLE: Checking Superset Relationship in D3.js
DESCRIPTION: Tests if one iterable is a superset of another by verifying that all values in the second iterable exist in the first.

LANGUAGE: javascript
CODE:
d3.superset([0, 2, 1, 3, 0], [1, 3]) // true

----------------------------------------

TITLE: Hair Color Transition Matrix Definition
DESCRIPTION: JavaScript matrix definition representing the flow of hair color transitions. Each row represents the starting color (black, blond, brown, red) and each column represents the ending color, with values indicating the number of people making each transition.

LANGUAGE: javascript
CODE:
const matrix = [
  // to black, blond, brown, red
  [11975,  5871, 8916, 2868], // from black
  [ 1951, 10048, 2060, 6171], // from blond
  [ 8010, 16145, 8090, 8045], // from brown
  [ 1013,   990,  940, 6907]  // from red
];

----------------------------------------

TITLE: Default Children Accessor Function for D3 Hierarchy in JavaScript
DESCRIPTION: Illustrates the default children accessor function used by d3.hierarchy() when not explicitly provided.

LANGUAGE: javascript
CODE:
function children(d) {
  return d.children;
}

----------------------------------------

TITLE: Rendering a Tree Plot with Plot.js in Vue.js
DESCRIPTION: Uses the PlotRender component to create a tree visualization of the gods array using Plot.js within a Vue.js template.

LANGUAGE: html
CODE:
<PlotRender :options='{
  axis: null,
  height: 100,
  margin: 20,
  marginRight: 120,
  marks: [
    Plot.tree(gods, {textStroke: "var(--vp-c-bg)"})
  ]
}' />

----------------------------------------

TITLE: Parsing Color Specifier with d3.color
DESCRIPTION: Demonstrates using d3.color to parse a CSS color specifier string and create a color object.

LANGUAGE: javascript
CODE:
let c = d3.color("steelblue"); // {r: 70, g: 130, b: 180, opacity: 1}

----------------------------------------

TITLE: SVG Arc Path Creation
DESCRIPTION: Demonstrates how to create an SVG path element with a transformed arc using D3's arc generator with specific inner/outer radii and angles.

LANGUAGE: javascript
CODE:
svg.append("path")
    .attr("transform", "translate(100,100)")
    .attr("d", d3.arc()({ 
      innerRadius: 100,
      outerRadius: 200,
      startAngle: -Math.PI / 2,
      endAngle: Math.PI / 2
    }));

----------------------------------------

TITLE: Creating Nice Value Ranges in D3.js
DESCRIPTION: Example of d3.nice() function that adjusts an interval to align with tick steps, returning a new interval with rounded endpoints.

LANGUAGE: javascript
CODE:
d3.nice(1, 9, 5) // [0, 10]

----------------------------------------

TITLE: Using Resquarify Tiling in D3 Treemap
DESCRIPTION: A variant of squarified tiling that preserves the topology of the previous layout. This is useful for animating changes in treemaps while avoiding disruptive reorganizations.

LANGUAGE: javascript
CODE:
treemapResquarify(*node*, *x0*, *y0*, *x1*, *y1*)

----------------------------------------

TITLE: Piecewise Linear Scale
DESCRIPTION: Creates a diverging color scale using piecewise linear interpolation with three color points

LANGUAGE: javascript
CODE:
const color = d3.scaleLinear([-1, 0, 1], ["red", "white", "green"]);
color(-0.5); // "rgb(255, 128, 128)"
color(+0.5); // "rgb(128, 192, 128)"

----------------------------------------

TITLE: Default X-Coordinate Accessor for D3 forceX
DESCRIPTION: The default x-coordinate accessor function for D3 forceX, returning a constant value of 0.

LANGUAGE: JavaScript
CODE:
function x() {
  return 0;
}

----------------------------------------

TITLE: Creating a Geographic Path Generator in D3 for SVG
DESCRIPTION: Demonstrates how to create a new geographic path generator with a specified projection for use with SVG.

LANGUAGE: javascript
CODE:
const path = d3.geoPath(projection); // for SVG

----------------------------------------

TITLE: Setting Partition Size in D3
DESCRIPTION: Sets or gets the size of the partition layout as a two-element array [width, height]. Default size is [1, 1].

LANGUAGE: javascript
CODE:
partition.size([width, height])

----------------------------------------

TITLE: Creating a Hierarchical Data Structure in JavaScript
DESCRIPTION: Demonstrates how to create a hierarchical data structure representing a family tree using nested objects with 'name' and 'children' properties.

LANGUAGE: javascript
CODE:
const data = {
  name: "Eve",
  children: [
    {name: "Cain"},
    {name: "Seth", children: [{name: "Enos"}, {name: "Noam"}]},
    {name: "Abel"},
    {name: "Awan", children: [{name: "Enoch"}]},
    {name: "Azura"}
  ]
};

----------------------------------------

TITLE: Creating a Delaunay Triangulation in JavaScript
DESCRIPTION: Creates a new Delaunay triangulation from a flat array of point coordinates using D3.js.

LANGUAGE: javascript
CODE:
const delaunay = new d3.Delaunay(Float64Array.of(0, 0, 0, 1, 1, 0, 1, 1));

----------------------------------------

TITLE: Default Touch Support Detector for D3 Drag in JavaScript
DESCRIPTION: Shows the default function used to detect touch support for the drag behavior. This helps in registering appropriate event listeners for touch devices.

LANGUAGE: JavaScript
CODE:
function touchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}

----------------------------------------

TITLE: Computing Tree Paths for D3 Documentation Structure
DESCRIPTION: This function recursively computes paths for the D3 documentation structure, creating a tree-like representation of the sidebar items.

LANGUAGE: javascript
CODE:
const {site: {value: {themeConfig: {sidebar}}}} = useData();

const paths = computed(() => {
  const paths = [];
  (function visit(node, path) {
    paths.push({path, link: node.link && `.${node.link}`});
    if (node.items) {
      for (const item of node.items) {
        visit(item, (path === "/" ? path : path + "/") + item.text);
      }
    }
  })({items: sidebar}, "/D3");
  return paths;
});

----------------------------------------

TITLE: Chaining D3 Selection Methods in JavaScript
DESCRIPTION: Demonstrates the convention of using different indentation levels for methods that return the current selection versus those that return a new selection.

LANGUAGE: javascript
CODE:
d3.select("body")
  .append("svg")
    .attr("width", 960)
    .attr("height", 500)
  .append("g")
    .attr("transform", "translate(20,20)")
  .append("rect")
    .attr("width", 920)
    .attr("height", 460);