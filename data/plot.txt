TITLE: Creating a Line Chart with Observable Plot
DESCRIPTION: Illustrates how to create a basic line chart using Observable Plot, mapping date to x-axis and stock closing price to y-axis.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.lineY(aapl, {x: "Date", y: "Close"})
  ]
})

----------------------------------------

TITLE: Creating a Histogram with Observable Plot
DESCRIPTION: Demonstrates how to create a simple histogram using Observable Plot in an online environment.

LANGUAGE: javascript
CODE:
Plot.rectY({length: 10000}, Plot.binX({y: "count"}, {x: d3.randomNormal()})).plot()

----------------------------------------

TITLE: Creating a Basic Bar Chart with Observable Plot
DESCRIPTION: Shows how to create a simple bar chart using Observable Plot, specifying height and mapping data to x and y axes.

LANGUAGE: javascript
CODE:
Plot.plot({
  height: 200,
  marks: [
    Plot.barY(alphabet, {x: "letter", y: "frequency"})
  ]
})

----------------------------------------

TITLE: Implementing Observable Plot in Vanilla HTML with ESM and CDN
DESCRIPTION: Shows how to use Observable Plot in a vanilla HTML file using ES modules and a CDN.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<div id="myplot"></div>
<script type="module">

import * as Plot from "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm";

const plot = Plot.rectY({length: 10000}, Plot.binX({y: "count"}, {x: Math.random})).plot();
const div = document.querySelector("#myplot");
div.append(plot);

</script>

----------------------------------------

TITLE: Implementing Client-Side Rendering of Plot in React
DESCRIPTION: Shows how to use Observable Plot with React for client-side rendering using hooks.

LANGUAGE: jsx
CODE:
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {useEffect, useRef, useState} from "react";

export default function App() {
  const containerRef = useRef();
  const [data, setData] = useState();

  useEffect(() => {
    d3.csv("/gistemp.csv", d3.autoType).then(setData);
  }, []);

  useEffect(() => {
    if (data === undefined) return;
    const plot = Plot.plot({
      y: {grid: true},
      color: {scheme: "burd"},
      marks: [
        Plot.ruleY([0]),
        Plot.dot(data, {x: "Date", y: "Anomaly", stroke: "Anomaly"})
      ]
    });
    containerRef.current.append(plot);
    return () => plot.remove();
  }, [data]);

  return <div ref={containerRef} />;
}

----------------------------------------

TITLE: Interactive Linear Regression with Confidence Band
DESCRIPTION: Demonstrates an interactive plot where the number of data points used for linear regression can be adjusted. Shows how the regression line and confidence band change as more data is included.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.dot(cars, {x: "weight (lb)", y: "power (hp)", fill: "currentColor", fillOpacity: 0.2}),
    Plot.dot(cars.slice(0, m), {x: "weight (lb)", y: "power (hp)"}),
    Plot.linearRegressionY(cars.slice(0, m), {x: "weight (lb)", y: "power (hp)", stroke: "red"})
  ]
})

----------------------------------------

TITLE: Creating Basic Scatterplot
DESCRIPTION: Creates a basic scatterplot using Plot.dot() to visualize Olympic athlete data, mapping weight to x-axis, height to y-axis, and sex to stroke color.

LANGUAGE: javascript
CODE:
Plot
  .dot(olympians, {x: "weight", y: "height", stroke: "sex"})
  .plot({color: {legend: true}})

----------------------------------------

TITLE: Creating a React Component for Plot Server-Side Rendering
DESCRIPTION: Demonstrates how to create a React component for server-side rendering of Observable Plot charts.

LANGUAGE: javascript
CODE:
import * as Plot from "@observablehq/plot";
import {createElement as h} from "react";

export default function PlotFigure({options}) {
  return Plot.plot({...options, document: new Document()}).toHyperScript();
}

----------------------------------------

TITLE: Basic Plot.js Dot Mark Example
DESCRIPTION: Example showing how to create a simple dot plot using Plot.js with x and y coordinates from data

LANGUAGE: javascript
CODE:
Plot.dot(gistemp, {x: "Date", y: "Anomaly"}).plot()

----------------------------------------

TITLE: Creating Faceted Histogram
DESCRIPTION: Creates a faceted histogram with multiple panels using Plot.plot() with grid and rules, showing separate weight distributions by sex.

LANGUAGE: javascript
CODE:
Plot.plot({
  grid: true,
  marks: [
    Plot.rectY(olympians, Plot.binX({y: "count"}, {x: "weight", fill: "sex", fy: "sex"})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Layering Multiple Line Charts in Observable Plot
DESCRIPTION: Shows how to create a plot with multiple layered line charts, comparing Apple and Google stock prices over time.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(goog, {x: "Date", y: "Close", stroke: "red"}),
    Plot.lineY(aapl, {x: "Date", y: "Close", stroke: "blue"})
  ]
})

----------------------------------------

TITLE: Creating a Grouped Tick Plot with Plot Transform
DESCRIPTION: Demonstrates using the Plot.groupY transform to create a plot showing median traffic by location, with both individual data points and a summary statistic.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginLeft: 120,
  x: {label: "Vehicles per hour (thousands)", transform: (x) => x / 1000},
  y: {label: null},
  marks: [
    Plot.ruleX([0]),
    Plot.tickX(
      traffic,
      {x: "vehicles", y: "location", strokeOpacity: 0.3}
    ),
    Plot.tickX(
      traffic,
      Plot.groupY(
        {x: "median"},
        {x: "vehicles", y: "location", stroke: "red", strokeWidth: 4, sort: {y: "x"}}
      )
    )
  ]
})

----------------------------------------

TITLE: Creating a Vue Component for Plot Server-Side Rendering
DESCRIPTION: Demonstrates how to create a Vue component for server-side rendering of Observable Plot charts.

LANGUAGE: javascript
CODE:
import * as Plot from "@observablehq/plot";
import {h} from "vue";

export default {
  props: {
    options: Object
  },
  render() {
    return Plot.plot({
      ...this.options,
      document: new Document()
    }).toHyperScript();
  }
};

----------------------------------------

TITLE: Creating a Multi-line Chart with Legend in Observable Plot
DESCRIPTION: Demonstrates how to create a multi-line chart with a color legend, using combined stock data for Apple and Google.

LANGUAGE: javascript
CODE:
Plot.plot({
  color: {legend: true},
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(stocks, {x: "Date", y: "Close", stroke: "Symbol"})
  ]
})

----------------------------------------

TITLE: Creating a Historical Timeline with Horizontal Bars
DESCRIPTION: This example creates a historical timeline of civilizations using horizontal bars. It demonstrates how to use x1 and x2 for specifying bar extents and includes custom axis formatting and text labels.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginLeft: 130,
  axis: null,
  x: {
    axis: "top",
    grid: true,
    tickFormat: (x) => x < 0 ? `${-x} BC` : `${x} AD`
  },
  marks: [
    Plot.barX(civilizations, {
      x1: "start",
      x2: "end",
      y: "civilization",
      sort: {y: "x1"}
    }),
    Plot.text(civilizations, {
      x: "start",
      y: "civilization",
      text: "civilization",
      textAnchor: "end",
      dx: -3
    })
  ]
})

----------------------------------------

TITLE: Creating a Grouped Bar Chart with Faceting
DESCRIPTION: This snippet demonstrates how to create a grouped bar chart using faceting. It partitions a bar chart of penguins by island using the fy option.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginLeft: 60,
  marginRight: 60,
  label: null,
  x: {label: "Frequency"},
  y: {padding: 0},
  marks: [
    Plot.barX(penguins, {fy: "island", y: "sex", x: 1, inset: 0.5}),
    Plot.ruleX([0])
  ]
})

----------------------------------------

TITLE: Creating a Diverging Bar Chart
DESCRIPTION: This snippet demonstrates how to create a diverging bar chart showing population changes. It uses custom color schemes, axis formatting, and includes grid lines and a zero reference line.

LANGUAGE: javascript
CODE:
Plot.plot({
  label: null,
  x: {
    axis: "top",
    label: "← decrease · Change in population, 2010–2019 (%) · increase →",
    labelAnchor: "center",
    tickFormat: "+",
    percent: true
  },
  color: {
    scheme: "PiYg",
    type: "ordinal"
  },
  marks: [
    Plot.barX(statepop, {y: "State", x: (d) => (d[2019] - d[2010]) / d[2010], fill: (d) => Math.sign(d[2019] - d[2010]), sort: {y: "x"}}),
    Plot.gridX({stroke: "var(--vp-c-bg)", strokeOpacity: 0.5}),
    Plot.axisY({x: 0}),
    Plot.ruleX([0])
  ]
})

----------------------------------------

TITLE: Creating a Cumulative Distribution of Poverty Chart
DESCRIPTION: Shows how to create a complex chart visualizing global poverty using the rectY mark and stackX transform. Each rectangle represents a country, with area indicating the number of people living in poverty.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {label: "Population (millions)"},
  y: {percent: true, label: "Proportion living on less than $30 per day (%)"},
  marks: [
    Plot.rectY(povcalnet, Plot.stackX({
      filter: (d) => ["N", "A"].includes(d.CoverageType),
      x: "ReqYearPopulation",
      order: "HeadCount",
      reverse: true,
      y2: "HeadCount", // y2 to avoid stacking by y
      title: (d) => `${d.CountryName}\n${(d.HeadCount * 100).toFixed(1)}%`,
      insetLeft: 0.2,
      insetRight: 0.2
    })),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Creating a Line Chart with Plot.js Shorthand
DESCRIPTION: Demonstrates how to create a simple line chart using Plot.js shorthand syntax with a one-dimensional array of numbers.

LANGUAGE: javascript
CODE:
Plot.lineY(numbers).plot()

----------------------------------------

TITLE: Creating a One-Dimensional Density Plot with Plot.js
DESCRIPTION: This snippet demonstrates how to create a one-dimensional density plot using Plot.js, showing density contours along a single axis.

LANGUAGE: javascript
CODE:
Plot.plot({
  height: 100,
  inset: 10,
  marks: [
    Plot.density(faithful, {x: "waiting", stroke: "blue", strokeWidth: 0.25, bandwidth: 10}),
    Plot.density(faithful, {x: "waiting", stroke: "blue", thresholds: 4, bandwidth: 10}),
    Plot.dot(faithful, {x: "waiting", fill: "currentColor", r: 1.5})
  ]
})

----------------------------------------

TITLE: Creating a Stacked Horizontal Bar Chart
DESCRIPTION: This snippet creates a stacked horizontal bar chart of penguins, grouped by species and colored by body mass. It uses the barX mark and includes custom axis and legend configurations.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginLeft: 60,
  x: {label: "Frequency"},
  y: {label: null},
  color: {legend: true},
  marks: [
    Plot.barX(penguins, {y: "species", x: 1, inset: 0.5, fill: "body_mass_g", sort: "body_mass_g"}),
    Plot.ruleX([0])
  ]
})

----------------------------------------

TITLE: Rendering Earthquake Globe Visualization
DESCRIPTION: Creates an interactive globe visualization showing earthquakes with magnitude using orthographic projection and customizable rotation.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: {type: "orthographic", rotate: [-longitude, -30]},
  r: {transform: (d) => Math.pow(10, d)},
  marks: [
    Plot.geo(land, {fill: "currentColor", fillOpacity: 0.2}),
    Plot.sphere(),
    Plot.dot(earthquakes, {x: "longitude", y: "latitude", r: "magnitude", stroke: "red", fill: "red", fillOpacity: 0.2})
  ]
})

----------------------------------------

TITLE: Basic Scatterplot with Plot.js
DESCRIPTION: Creates a basic scatterplot showing relationship between car horsepower and fuel efficiency using the dot mark.

LANGUAGE: javascript
CODE:
Plot.dot(cars, {x: "economy (mpg)", y: "power (hp)"}).plot({grid: true})

----------------------------------------

TITLE: Creating a Faceted Density Plot with Plot.js
DESCRIPTION: This snippet demonstrates how to create a faceted density plot using Plot.js, showing density contours for different penguin species across islands.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.density(penguins, {fx: "island", x: "flipper_length_mm", y: "culmen_length_mm", stroke: "density", clip: true}),
    Plot.frame()
  ]
})

----------------------------------------

TITLE: Creating a Stacked Area Chart
DESCRIPTION: Shows how to create a stacked area chart using the fill channel to represent different industries.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    transform: (d) => d / 1000,
    label: "Unemployed (thousands)"
  },
  marks: [
    Plot.areaY(industries, {x: "date", y: "unemployed", fill: "industry"}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Creating an Interactive Line Chart with Tip in Plot.js
DESCRIPTION: This snippet demonstrates how to create a line chart of Apple stock prices with an interactive tooltip using the tip mark option in Plot.js.

LANGUAGE: javascript
CODE:
Plot.lineY(aapl, {x: "Date", y: "Close", tip: true}).plot({y: {grid: true}})

----------------------------------------

TITLE: Creating a Normalized Histogram with Multiple Transforms
DESCRIPTION: Combines Plot's normalizeY and binX transforms to create a normalized histogram, showing how transforms can be composed.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {percent: true},
  marks: [
    Plot.rectY(
      olympians,
      Plot.normalizeY(
        "sum", // normalize each series by the sum per series
        Plot.binX(
          {y2: "count"}, // disable implicit stack transform
          {x: "weight", fill: "sex", mixBlendMode: "{{$dark ? "screen" : "multiply"}}"}
        )
      )
    )
  ]
})

----------------------------------------

TITLE: Sorting Bars in a Vertical Bar Chart
DESCRIPTION: This example shows how to sort the bars in a vertical bar chart by descending y-values using the sort option in Observable Plot.

LANGUAGE: javascript
CODE:
Plot.barY(alphabet, {x: "letter", y: "frequency", sort: {x: "-y"}}).plot()

----------------------------------------

TITLE: Derived Value Scatterplot
DESCRIPTION: Creates a scatterplot with derived values, converting MPG to gallons per 100 miles for fuel consumption visualization.

LANGUAGE: javascript
CODE:
Plot.plot({
  grid: true,
  inset: 10,
  x: {label: "Fuel consumption (gallons per 100 miles)"},
  y: {label: "Horsepower"},
  marks: [
    Plot.dot(cars, {x: (d) => 100 / d["economy (mpg)"], y: "power (hp)"})
  ]
})

----------------------------------------

TITLE: Generating an Arc Diagram with Observable Plot in JavaScript
DESCRIPTION: This snippet demonstrates how to create an arc diagram representing character co-occurrence in 'Les Misérables' using the arrow mark with undirected edges in Observable Plot.

LANGUAGE: javascript
CODE:
Plot.plot({
  height: 1080,
  marginLeft: 100,
  axis: null,
  x: {domain: [0, 1]},
  color: {domain: d3.range(10), unknown: "#ccc"},
  marks: [
    Plot.dot(miserables.nodes, {x: 0, y: "id", fill: "group", sort: {y: "fill"}}),
    Plot.text(miserables.nodes, {x: 0, y: "id", text: "id", textAnchor: "end", dx: -6, fill: "group"}),
    Plot.arrow(miserables.links, {x: 0, y1: "source", y2: "target", sweep: "-y", bend: 90, headLength: 0, stroke: samegroup, sort: samegroup, reverse: true})
  ]
})

----------------------------------------

TITLE: Creating an interactive scatterplot with tooltips using Observablehq Plot
DESCRIPTION: Demonstrates how to create a scatterplot with interactive tooltips using the pointer transform and tip mark in Observablehq Plot. The plot shows Olympic athletes' weight vs height, with additional information displayed on hover.

LANGUAGE: javascript
CODE:
Plot.dot(olympians, {
  x: "weight",
  y: "height",
  stroke: "sex",
  channels: {name: "name", sport: "sport"},
  tip: true
}).plot()

----------------------------------------

TITLE: Creating a Difference Plot Comparing Two Metrics in Plot
DESCRIPTION: Illustrates how to create a difference plot comparing two metrics (TSA traveler numbers in 2019 vs 2020). This example uses custom axis formatting and includes a rule at y=0 for reference.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {tickFormat: "%b"},
  y: {grid: true, label: "Travelers"},
  marks: [
    Plot.axisY({label: "Travelers per day (thousands, 2020 vs. 2019)", tickFormat: (d) => d / 1000}),
    Plot.ruleY([0]),
    Plot.differenceY(tsa, {x: "Date", y1: "2019", y2: "2020", tip: {format: {x: "%B %-d"}}})
  ]
})

----------------------------------------

TITLE: Basic Plot.js Setup with Vue
DESCRIPTION: Initial setup code importing required libraries and data sources, and initializing reactive references for various datasets.

LANGUAGE: javascript
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import * as topojson from "topojson-client";
import {computed, shallowRef, onMounted} from "vue";
import aapl from "../data/aapl.ts";
import driving from "../data/driving.ts";
import sftemp from "../data/sf-temperatures.ts";
import tdf from "../data/tdf.ts";

const beagle = shallowRef([]);
const bls = shallowRef([]);
const stateage = shallowRef([]);
const stocks = shallowRef([]);
const world = shallowRef(null);
const land = computed(() => world.value ? topojson.feature(world.value, world.value.objects.land) : {type: null});
</script>

----------------------------------------

TITLE: Basic Plot.js Setup with Vue
DESCRIPTION: Initial setup code importing required libraries and data sources, and initializing reactive references for various datasets.

LANGUAGE: javascript
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import * as topojson from "topojson-client";
import {computed, shallowRef, onMounted} from "vue";
import aapl from "../data/aapl.ts";
import driving from "../data/driving.ts";
import sftemp from "../data/sf-temperatures.ts";
import tdf from "../data/tdf.ts";

const beagle = shallowRef([]);
const bls = shallowRef([]);
const stateage = shallowRef([]);
const stocks = shallowRef([]);
const world = shallowRef(null);
const land = computed(() => world.value ? topojson.feature(world.value, world.value.objects.land) : {type: null});
</script>

----------------------------------------

TITLE: Creating a 2D Heatmap with Rect Mark
DESCRIPTION: Demonstrates how to create a two-dimensional heatmap using the rect mark and bin transform. It uses color to represent density and includes a dynamic color scheme based on dark mode.

LANGUAGE: javascript
CODE:
Plot.plot({
  height: 640,
  marginLeft: 60,
  color: {
    scheme: "{{$dark ? "turbo" : "YlGnBu"}}",
    type: "symlog"
  },
  marks: [
    Plot.rect(diamonds, Plot.bin({fill: "count"}, {x: "carat", y: "price", thresholds: 100}))
  ]
})

----------------------------------------

TITLE: Creating a Two-Dimensional Heatmap with bin Transform in Observable Plot
DESCRIPTION: This snippet demonstrates how to use the bin transform to create a two-dimensional heatmap. The fill channel encodes the number of athletes in each bin of similar height and weight.

LANGUAGE: javascript
CODE:
Plot
  .rect(olympians, Plot.bin({fill: "count"}, {x: "weight", y: "height"}))
  .plot({color: {scheme: "{{$dark ? \"turbo\" : \"YlGnBu\"}}"}})

----------------------------------------

TITLE: Candlestick Chart with Bollinger Bands
DESCRIPTION: Complex chart combining candlestick pattern with Bollinger bands overlay and custom styling.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {domain: [new Date("2014-01-01"), new Date("2014-06-01")]},
  y: {domain: [68, 92], grid: true},
  color: {domain: [-1, 0, 1], range: ["red", "black", "green"]},
  marks: [
    Plot.bollingerY(aapl, {x: "Date", y: "Close", stroke: "none", clip: true}),
    Plot.ruleX(aapl, {x: "Date", y1: "Low", y2: "High", strokeWidth: 1, clip: true}),
    Plot.ruleX(aapl, {x: "Date", y1: "Open", y2: "Close", strokeWidth: 3, stroke: (d) => Math.sign(d.Close - d.Open), clip: true})
  ]
})

----------------------------------------

TITLE: Creating a Heatmap of The Simpsons Episode Ratings using Observable Plot
DESCRIPTION: This snippet demonstrates how to create a heatmap of The Simpsons episode ratings using the cell mark in Observable Plot. It uses season and episode number for x and y axes, and IMDB ratings for the color fill.

LANGUAGE: javascript
CODE:
Plot.plot({
  padding: 0,
  grid: true,
  x: {axis: "top", label: "Season"},
  y: {label: "Episode"},
  color: {type: "linear", scheme: "PiYG"},
  marks: [
    Plot.cell(simpsons, {x: "season", y: "number_in_season", fill: "imdb_rating", inset: 0.5}),
    Plot.text(simpsons, {x: "season", y: "number_in_season", text: (d) => d.imdb_rating?.toFixed(1), fill: "black", title: "title"})
  ]
})

----------------------------------------

TITLE: Creating a Calendar Heatmap of Dow Jones Industrial Average using Observable Plot
DESCRIPTION: This code creates a calendar heatmap of the Dow Jones Industrial Average daily changes over multiple years. It uses week-of-year for x-axis, day-of-week for y-axis, and year for faceting.

LANGUAGE: javascript
CODE:
Plot.plot({
  padding: 0,
  x: {axis: null},
  y: {tickFormat: Plot.formatWeekday("en", "narrow"), tickSize: 0},
  fy: {tickFormat: ""},
  color: {scheme: "PiYG"},
  marks: [
    Plot.cell(dji, {
      x: (d) => d3.utcWeek.count(d3.utcYear(d.Date), d.Date),
      y: (d) => d.Date.getUTCDay(),
      fy: (d) => d.Date.getUTCFullYear(),
      fill: (d, i) => i > 0 ? (d.Close - dji[i - 1].Close) / dji[i - 1].Close : NaN,
      title: (d, i) => i > 0 ? ((d.Close - dji[i - 1].Close) / dji[i - 1].Close * 100).toFixed(1) : NaN,
      inset: 0.5
    })
  ]
})

----------------------------------------

TITLE: Creating a Temperature Heatmap for Seattle using Observable Plot
DESCRIPTION: This snippet shows how to create a temperature heatmap for Seattle using the cell mark and group transform in Observable Plot. It groups data by month and date, displaying maximum observed temperatures.

LANGUAGE: javascript
CODE:
Plot.plot({
  padding: 0,
  y: {tickFormat: Plot.formatMonth("en", "short")},
  marks: [
    Plot.cell(seattle, Plot.group({fill: "max"}, {
      x: (d) => d.date.getUTCDate(),
      y: (d) => d.date.getUTCMonth(),
      fill: "temp_max",
      inset: 0.5
    }))
  ]
})

----------------------------------------

TITLE: Creating a Bar Chart with groupX Transform in Plot
DESCRIPTION: This snippet demonstrates how to create a bar chart showing the distribution of Olympic athletes by sport using the groupX transform.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginBottom: 100,
  x: {label: null, tickRotate: 90},
  y: {grid: true},
  marks: [
    Plot.barY(olympians, Plot.groupX({y: "count"}, {x: "sport"})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: GeoJSON Visualization with Tooltips
DESCRIPTION: Shows how to create a choropleth map using GeoJSON data with interactive tooltips, demonstrating the new GeoJSON property shorthand and tip option support.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "albers-usa",
  color: {
    type: "quantile",
    n: 9,
    scheme: "blues",
    label: "Unemployment (%)",
    legend: true
  },
  marks: [
    Plot.geo(counties, {
      fill: "unemployment",
      title: (d) => `${d.properties.name} ${d.properties.unemployment}%`,
      tip: true
    })
  ]
})

----------------------------------------

TITLE: Creating a Colored Crosshair Plot in JavaScript
DESCRIPTION: This example shows how to use the color option in a crosshair plot to reinforce a color encoding. It creates a scatter plot of penguin data with the crosshair color matching the sex of the closest penguin.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.dot(penguins, {x: "culmen_length_mm", y: "culmen_depth_mm", stroke: "sex"}),
    Plot.crosshair(penguins, {x: "culmen_length_mm", y: "culmen_depth_mm", color: "sex", opacity: 0.5})
  ]
})

----------------------------------------

TITLE: Creating Warming Stripes using Observable Plot
DESCRIPTION: This code creates a warming stripes visualization using the cell mark in Observable Plot. It demonstrates the use of the interval scale option to enforce uniformity and show gaps for missing data.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {
    ticks: d3.ticks(...d3.extent(hadcrut, (d) => d.year), 10),
    tickFormat: "d",
    interval: 1, // recommended in case of missing data
    label: null
  },
  color: {
    scheme: "BuRd"
  },
  marks: [
    Plot.cell(hadcrut, {x: "year", fill: "anomaly"})
  ]
})

----------------------------------------

TITLE: Creating Stacked Bar Chart with Plot
DESCRIPTION: Illustrates the creation of a stacked bar chart using the Plot library, treating x-axis as ordinal with monthly intervals.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {
    interval: "month",
    tickFormat: (d) => d.toLocaleString("en", {month: "narrow"}),
    label: null
  },
  y: {grid: true},
  marks: [
    Plot.barY(crimea, {x: "date", y: "deaths", fill: "cause"}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Creating a Streamgraph
DESCRIPTION: Demonstrates how to create a streamgraph using the offset stack transform option.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    transform: (d) => d / 1000,
    label: "Unemployed (thousands)"
  },
  marks: [
    Plot.areaY(industries, {x: "date", y: "unemployed", fill: "industry", offset: "wiggle"}),
  ]
})

----------------------------------------

TITLE: US Choropleth Map Plot Configuration
DESCRIPTION: Creates a choropleth map visualization of US unemployment data using Plot library with Albers USA projection.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "albers-usa",
  color: {
    type: "quantile",
    n: 9,
    scheme: "blues",
    label: "Unemployment (%)",
    legend: true
  },
  marks: [
    Plot.geo(counties, {
      fill: "unemployment",
      title: (d) => `${d.properties.name} ${d.properties.unemployment}%`,
      tip: true
    })
  ]
})

----------------------------------------

TITLE: Using linearRegressionX for Inverse Regression
DESCRIPTION: Demonstrates how to use linearRegressionX for performing inverse linear regression, where x is the dependent variable and y is the independent variable.

LANGUAGE: javascript
CODE:
Plot.linearRegressionX(mtcars, {y: "wt", x: "hp"})

----------------------------------------

TITLE: Creating a Basic Density Plot with Plot.js
DESCRIPTION: This snippet demonstrates how to create a basic density plot using Plot.js, including density contours and scatter points for the 'faithful' dataset.

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 10,
  marks: [
    Plot.density(faithful, {x: "waiting", y: "eruptions", stroke: "blue", strokeWidth: 0.25}),
    Plot.density(faithful, {x: "waiting", y: "eruptions", stroke: "blue", thresholds: 4}),
    Plot.dot(faithful, {x: "waiting", y: "eruptions", fill: "currentColor", r: 1.5})
  ]
})

----------------------------------------

TITLE: Creating Tree Diagram with Plot Library in JavaScript
DESCRIPTION: Demonstrates how to create a tree diagram using Plot library's link, dot, and text marks with treeLink and treeNode transforms.

LANGUAGE: javascript
CODE:
Plot.plot({
  axis: null,
  height: 100,
  margin: 20,
  marginRight: 120,
  marks: [
    Plot.link(gods, Plot.treeLink()),
    Plot.dot(gods, Plot.treeNode()),
    Plot.text(gods, Plot.treeNode({text: "node:name", dx: 6}))
  ]
})

----------------------------------------

TITLE: Creating Diverging Stacked Bar Chart for Likert Scale
DESCRIPTION: Shows how to create a diverging stacked bar chart for Likert scale survey results using Plot, with a custom offset function.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {tickFormat: Math.abs},
  color: {domain: likert.order, scheme: "RdBu", legend: true},
  marks: [
    Plot.barX(
      survey,
      Plot.groupZ({x: "count"}, {fy: "Question", fill: "Response", ...likert})
    ),
    Plot.ruleX([0])
  ]
})

----------------------------------------

TITLE: Basic Hexbin Heatmap with Plot
DESCRIPTION: Creates a basic hexbin heatmap visualization showing the distribution of Olympic athletes by weight and height, with color representing count.

LANGUAGE: javascript
CODE:
Plot
  .dot(olympians, Plot.hexbin({fill: "count"}, {x: "weight", y: "height"}))
  .plot({color: {scheme: "{{$dark ? "turbo" : "YlGnBu"}}"}})

----------------------------------------

TITLE: Creating a One-Dimensional Heatmap with binX Transform in Observable Plot
DESCRIPTION: This example shows how to use the binX transform to create a one-dimensional heatmap. The fill channel represents the count per bin, resulting in a color-coded representation of the data distribution.

LANGUAGE: javascript
CODE:
Plot
  .rect(olympians, Plot.binX({fill: "count"}, {x: "weight"}))
  .plot({color: {scheme: "{{$dark ? \"turbo\" : \"YlGnBu\"}}"}})

----------------------------------------

TITLE: Plotting Line Chart with Customizable Curve
DESCRIPTION: Creates a plot with both line and dot marks, demonstrating curve interpolation. The curve type is dynamically bound to a Vue reference variable that can be changed through a select input.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.lineY(numbers, {curve: "{{curve}}"}),
    Plot.dotY(numbers, {x: (d, i) => i})
  ]
})

----------------------------------------

TITLE: Index Chart with Normalized Stock Prices
DESCRIPTION: Creates a multi-series line chart showing normalized stock price changes over time. Uses logarithmic scale and includes reference lines and labels.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    type: "log",
    grid: true,
    label: "Change in price (%)",
    tickFormat: ((f) => (x) => f((x - 1) * 100))(d3.format("+d"))
  },
  marks: [
    Plot.ruleY([1]),
    Plot.line(stocks, Plot.normalizeY({
      x: "Date",
      y: "Close",
      stroke: "Symbol"
    })),
    Plot.text(stocks, Plot.selectLast(Plot.normalizeY({
      x: "Date",
      y: "Close",
      z: "Symbol",
      text: "Symbol",
      textAnchor: "start",
      dx: 3
    })))
  ]
})

----------------------------------------

TITLE: Creating a Faceted Histogram
DESCRIPTION: Shows how to create a faceted histogram using the rectY mark. It bins data by weight and creates separate facets for each sex.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.rectY(olympians, Plot.binX({y: "count"}, {x: "weight", fy: "sex"})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Basic Bollinger Band Implementation
DESCRIPTION: Simple implementation of Bollinger bands using Plot.bollingerY with date and close price data.

LANGUAGE: javascript
CODE:
Plot.bollingerY(aapl, {x: "Date", y: "Close", n, k}).plot()

----------------------------------------

TITLE: Creating Vertical Box Plot
DESCRIPTION: Creates a vertical box plot using Plot.boxY to visualize Michelson's speed of light measurements.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    inset: 6
  },
  marks: [
    Plot.boxY(morley, {x: "Expt", y: "Speed"})
  ]
})

----------------------------------------

TITLE: Dynamic World Map Projection
DESCRIPTION: Demonstrates a configurable world map with different projection types, including graticules and land masses.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "{{projection}}",
  marks: [
    Plot.graticule(),
    Plot.geo(land, {fill: "currentColor"}),
    Plot.sphere()
  ]
})

----------------------------------------

TITLE: Temperature Range Visualization with Window Transform
DESCRIPTION: Plot configuration showing temperature ranges with rolling averages using window transform. Demonstrates area and line plotting with customizable window size.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    label: "Temperature (°F)"
  },
  marks: [
    Plot.areaY(sftemp, {x: "date", y1: "low", y2: "high", fillOpacity: 0.3}),
    Plot.lineY(sftemp, Plot.windowY(k, {x: "date", y: "low", stroke: "blue"})),
    Plot.lineY(sftemp, Plot.windowY(k, {x: "date", y: "high", stroke: "red"}))
  ]
})

----------------------------------------

TITLE: Applying Moving Average to Difference Plot in Plot
DESCRIPTION: Shows how to apply a 24-month moving average to smooth out noise in a difference plot. This example uses the windowY transform to create a more readable visualization of temperature anomalies.

LANGUAGE: javascript
CODE:
Plot.differenceY(
  gistemp,
  Plot.windowY(12 * 2, {
    x: "Date",
    y: "Anomaly",
    positiveFill: "red",
    negativeFill: "blue",
    tip: true
  })
).plot({y: {grid: true}})

----------------------------------------

TITLE: Creating Filled Contours with Color Encoding in Observable Plot
DESCRIPTION: Generates filled contours from volcano data with color encoding applied to contour values. Includes a color legend for elevation interpretation.

LANGUAGE: javascript
CODE:
Plot.plot({
  color: {
    legend: true,
    label: "Elevation (m)"
  },
  marks: [
    Plot.contour(volcano.values, {
      width: volcano.width,
      height: volcano.height,
      fill: Plot.identity,
      stroke: "black"
    })
  ]
})

----------------------------------------

TITLE: Creating a Basic Vertical Difference Plot with Plot
DESCRIPTION: Demonstrates how to create a simple vertical difference plot using Plot. This example visualizes global surface temperature anomalies, with red indicating above-average temperatures and blue indicating below-average temperatures.

LANGUAGE: javascript
CODE:
Plot.differenceY(gistemp, {
  x: "Date",
  y: "Anomaly",
  positiveFill: "red",
  negativeFill: "blue",
  tip: true
}).plot({y: {grid: true}})

----------------------------------------

TITLE: Creating a Temperature Band Chart
DESCRIPTION: Demonstrates how to create a band chart using y1 and y2 to represent a range of temperatures.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    label: "Temperature (°F)",
    grid: true
  },
  marks: [
    Plot.areaY(sftemp, {x: "date", y1: "low", y2: "high"})
  ]
})

----------------------------------------

TITLE: Creating an Arrow Mark with Observable Plot in JavaScript
DESCRIPTION: This code snippet shows the basic syntax for creating an arrow mark using Observable Plot, demonstrating how to set the start and end points for the arrows.

LANGUAGE: javascript
CODE:
Plot.arrow(inequality, {x1: "POP_1980", y1: "R90_10_1980", x2: "POP_2015", y2: "R90_10_2015", bend: true})

----------------------------------------

TITLE: Basic Linear Grid Example
DESCRIPTION: Shows how to create a basic X-axis grid with linear scale type.

LANGUAGE: javascript
CODE:
Plot.gridX().plot({x: {type: "linear"}})

----------------------------------------

TITLE: Creating a Global Water Vapor Visualization with Raster Projection
DESCRIPTION: Demonstrates how to use the raster mark with projection to visualize global atmospheric water vapor data.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "equal-earth",
  color: {
    scheme: "BuPu",
    domain: [0, 6],
    legend: true,
    label: "Water vapor (cm)"
  },
  marks: [
    Plot.raster(vapor, {
      fill: Plot.identity,
      width: 360,
      height: 180,
      x1: -180,
      y1: 90,
      x2: 180,
      y2: -90,
      interpolate: "barycentric",
      clip: "sphere"
    }),
    Plot.sphere({stroke: "black"})
  ]
})

----------------------------------------

TITLE: Comparing X and Y Linear Regressions
DESCRIPTION: Demonstrates the difference between linearRegressionX and linearRegressionY. Shows how the regression lines differ when swapping dependent and independent variables.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.dot(cars, {x: "weight (lb)", y: "power (hp)", strokeOpacity: 0.5, r: 2}),
    Plot.linearRegressionY(cars, {x: "weight (lb)", y: "power (hp)", stroke: "steelblue"}),
    Plot.linearRegressionX(cars, {x: "weight (lb)", y: "power (hp)", stroke: "orange"})
  ]
})

----------------------------------------

TITLE: Creating a Vertical Bar Chart with Observable Plot
DESCRIPTION: This snippet demonstrates how to create a simple vertical bar chart using the barY mark in Observable Plot. It shows the frequency of letters in the English language.

LANGUAGE: javascript
CODE:
Plot.barY(alphabet, {x: "letter", y: "frequency"}).plot()

----------------------------------------

TITLE: Multi-Series Line Chart with End Labels
DESCRIPTION: Creates a line chart comparing travelers data with labels at series endpoints. Uses the select transform to place labels at the start of each line series.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    label: "Travelers per day (millions)",
    transform: (d) => d / 1e6
  },
  marks: [
    Plot.ruleY([0]),
    Plot.line(travelers, {x: "date", y: "previous", strokeOpacity: 0.5}),
    Plot.line(travelers, {x: "date", y: "current"}),
    Plot.text(travelers, Plot.selectFirst({x: "date", y: "previous", text: ["2019"], fillOpacity: 0.5, lineAnchor: "bottom", dy: -6})),
    Plot.text(travelers, Plot.selectFirst({x: "date", y: "current", text: ["2020"], lineAnchor: "top", dy: 6}))
  ]
})

----------------------------------------

TITLE: Connected Scatterplot with Year Labels
DESCRIPTION: Implements a connected scatterplot showing driving trends with selective year labels. Filters labels to show only every fifth year to prevent overlap.

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 10,
  grid: true,
  x: {label: "Miles driven (per person-year)"},
  y: {label: "Cost of gasoline ($ per gallon)"},
  marks: [
    Plot.line(driving, {x: "miles", y: "gas", curve: "catmull-rom", marker: true}),
    Plot.text(driving, {filter: (d) => d.year % 5 === 0, x: "miles", y: "gas", text: (d) => `${d.year}`, dy: -6, lineAnchor: "bottom"})
  ]
})

----------------------------------------

TITLE: Using the filter transform function in Observable Plot
DESCRIPTION: Demonstrates the usage of the filter transform function in Observable Plot. It shows how to apply a filter to data using a test function or a channel value definition.

LANGUAGE: javascript
CODE:
Plot.filter((d) => /[aeiouy]/i.test(d.letter), {x: "letter", y: "frequency"})

----------------------------------------

TITLE: Geographic Link Visualization with Projection
DESCRIPTION: Shows how to create geographic links with spherical projection between two points on a map. Includes both linear and geodesic path options.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "equal-earth",
  marks: [
    Plot.sphere(),
    Plot.geo(land, {fill: "currentColor", fillOpacity: 0.3}),
    Plot.link({length: 1}, {curve: "linear", stroke: "red", ...xy}),
    Plot.link({length: 1}, {markerStart: "dot", markerEnd: "arrow", strokeWidth: 1.5, ...xy})
  ]
})

----------------------------------------

TITLE: Labeled Bar Chart with Text Marks
DESCRIPTION: Creates a bar chart with text labels showing percentage values above each bar. Uses Plot.js to render frequency data for letters with direct labeling.

LANGUAGE: javascript
CODE:
Plot.plot({
  label: null,
  y: {
    grid: true,
    label: "Frequency (%)",
    percent: true
  },
  marks: [
    Plot.barY(alphabet, {x: "letter", y: "frequency"}),
    Plot.text(alphabet, {x: "letter", y: "frequency", text: (d) => (d.frequency * 100).toFixed(1), dy: -6, lineAnchor: "bottom"}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Candlestick Chart with Rules
DESCRIPTION: Creates a complex candlestick chart using multiple rules to show stock price ranges and movements.

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 6,
  label: null,
  y: {grid: true, label: "Stock price ($)"},
  color: {type: "threshold", range: ["red", "green"]},
  marks: [
    Plot.ruleX(aapl, {x: "Date", y1: "Low", y2: "High"}),
    Plot.ruleX(aapl, {x: "Date", y1: "Open", y2: "Close", stroke: (d) => d.Close - d.Open, strokeWidth: 4})
  ]
})

----------------------------------------

TITLE: Creating a filtered scatterplot with Observable Plot
DESCRIPTION: Demonstrates how to create a scatterplot using Observable Plot with a filter applied to text labels. The filter is controlled by a checkbox input.

LANGUAGE: javascript
CODE:
Plot.plot({
  grid: true,
  x: {type: "log"},
  marks: [
    Plot.dot(metros, {
      x: "POP_2015",
      y: "R90_10_2015"
    }),
    Plot.text(metros, {
      filter: filtered ? "highlight" : null,
      x: "POP_2015",
      y: "R90_10_2015",
      text: "nyt_display",
      frameAnchor: "bottom",
      dy: -6
    })
  ]
})

----------------------------------------

TITLE: Creating Contours from Irregular Spatial Samples in Observable Plot
DESCRIPTION: Generates contours from irregularly sampled magnetic field data, demonstrating the contour mark's ability to work with non-gridded data.

LANGUAGE: javascript
CODE:
Plot.contour(ca55, {x: "LONGITUDE", y: "LATITUDE", fill: "MAG_IGRF90"}).plot({color: {type: "diverging"}})

----------------------------------------

TITLE: Creating Hierarchical Tree Visualization
DESCRIPTION: Demonstrates using link mark with tree layout to visualize hierarchical relationships between Greek gods. Includes node dots and text labels.

LANGUAGE: javascript
CODE:
Plot.plot({
  axis: null,
  height: 120,
  inset: 20,
  insetRight: 120,
  marks: [
    Plot.link(gods, Plot.treeLink({stroke: "node:internal"})),
    Plot.dot(gods, Plot.treeNode({fill: "node:internal"})),
    Plot.text(gods, Plot.treeNode({text: "node:name", stroke: "var(--vp-c-bg)", fill: "currentColor", dx: 6}))
  ]
})

----------------------------------------

TITLE: Creating a Simple Waffle Chart with Observable Plot
DESCRIPTION: Demonstrates how to create a basic waffle chart using the waffleY function in Observable Plot.

LANGUAGE: javascript
CODE:
Plot.waffleY([212, 207, 315, 11], {x: ["apples", "bananas", "oranges", "pears"]}).plot({height: 420})

----------------------------------------

TITLE: Gender Income Inequality Visualization
DESCRIPTION: Creates a scatter plot comparing men's and women's median incomes with diagonal reference lines showing different ratios of equality.

LANGUAGE: javascript
CODE:
Plot.plot({
  aspectRatio: 1,
  marginRight: 40,
  x: {
    label: "Median annual income (men, thousands)",
    transform: (d) => d / 1000,
    tickSpacing: 60
  },
  y: {
    label: "Median annual income (women, thousands)",
    transform: (d) => d / 1000,
    tickSpacing: 60
  },
  marks: [
    Plot.link([0.6, 0.7, 0.8, 0.9, 1], {
      x1: 0,
      y1: 0,
      x2: 102000,
      y2: (k) => 102000 * k,
      strokeOpacity: (k) => k === 1 ? 1 : 0.2
    }),
    Plot.text([0.6, 0.7, 0.8, 0.9, 1], {
      x: 102000,
      y: (k) => 102000 * k,
      text: ((f) => (k) => k === 1 ? "Equal" : f(k - 1))(d3.format("+.0%")),
      textAnchor: "start",
      dx: 6
    }),
    Plot.dot(income, {x: "m", y: "f"})
  ]
})

----------------------------------------

TITLE: Wind Vector Map Plot Implementation
DESCRIPTION: Creates a vector plot showing wind speed and direction for Western Europe using Plot's vector mark

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 10,
  aspectRatio: 1,
  color: {label: "Speed (m/s)", zero: true, legend: true},
  marks: [
    Plot.vector(wind, {
      x: "longitude",
      y: "latitude",
      rotate: ({u, v}) => Math.atan2(u, v) * 180 / Math.PI,
      length: ({u, v}) => Math.hypot(u, v),
      stroke: ({u, v}) => Math.hypot(u, v)
    })
  ]
})

----------------------------------------

TITLE: Plotting Random Walk with Cumulative Sum using Map Transform
DESCRIPTION: Creates a plot of a random walk using the mapY transform with a cumsum method on random normal distribution data.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.ruleY([0]),
    Plot.lineY({length: 600}, Plot.mapY("cumsum", {y: d3.randomNormal()}))
  ]
})

----------------------------------------

TITLE: Bar Chart with Tick Emphasis
DESCRIPTION: Demonstrates combining bars and ticks to create a bar chart with emphasized upper bounds using tickY marks.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {label: null},
  y: {percent: true},
  marks: [
    Plot.barY(alphabet, {x: "letter", y: "frequency", fillOpacity: 0.2}),
    Plot.tickY(alphabet, {x: "letter", y: "frequency"}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Creating Non-Overlapping Density Regions with Plot.js
DESCRIPTION: This snippet demonstrates how to create non-overlapping density regions using Plot.js by specifying negative weights for points to avoid.

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 10,
  color: {legend: true},
  marks: [
    d3.groups(penguins, (d) => d.species).map(([s]) =>
      Plot.density(penguins, {
        x: "flipper_length_mm",
        y: "culmen_length_mm",
        weight: (d) => d.species === s ? 1 : -1,
        fill: () => s,
        fillOpacity: 0.2,
        thresholds: [0.05]
      })
    ),
    Plot.dot(penguins, {
      x: "flipper_length_mm",
      y: "culmen_length_mm",
      stroke: "species"
    }),
    Plot.frame()
  ]
})

----------------------------------------

TITLE: Demographic Dot Plot with Normalized Population
DESCRIPTION: Visualizes state demographics using normalized population data. Creates a dot plot with age groups represented by colors and states on the y-axis.

LANGUAGE: javascript
CODE:
Plot.plot({
  height: 660,
  axis: null,
  grid: true,
  x: {
    axis: "top",
    label: "Population (%)",
    percent: true
  },
  color: {
    scheme: "spectral",
    domain: stateage.ages,
    legend: true
  },
  marks: [
    Plot.ruleX([0]),
    Plot.ruleY(stateage, Plot.groupY({x1: "min", x2: "max"}, {...xy, sort: {y: "x1"}})),
    Plot.dot(stateage, {...xy, fill: "age", title: "age"}),
    Plot.text(stateage, Plot.selectMinX({...xy, textAnchor: "end", dx: -6, text: "state"}))
  ]
})

----------------------------------------

TITLE: Creating a Random Walk Area Chart
DESCRIPTION: Demonstrates how to create an area chart from a random walk using d3.cumsum and d3.randomNormal.

LANGUAGE: javascript
CODE:
Plot.areaY(d3.cumsum({length: 600}, d3.randomNormal())).plot()

----------------------------------------

TITLE: Defining Custom Area-Line Mark in JavaScript
DESCRIPTION: Creates a custom composite mark combining a horizontal rule, filled area, and line with configurable color and opacity. Shows how Plot's marks can be composed to create reusable visualization components.

LANGUAGE: javascript
CODE:
function arealineY(data, {color, fillOpacity = 0.1, ...options} = {}) {
  return Plot.marks(
    Plot.ruleY([0]),
    Plot.areaY(data, {fill: color, fillOpacity, ...options}),
    Plot.lineY(data, {stroke: color, ...options})
  );
}

----------------------------------------

TITLE: Using Interval Option with barY Mark in Observable Plot
DESCRIPTION: This example demonstrates using the interval option with a barY mark to create bars that span a specific interval (5 million) rather than extending to y = 0. It shows how the interval option can affect the vertical extent of each bar.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginBottom: 80,
  x: {type: "band"}, // ⚠️ not utc
  y: {
    grid: true,
    transform: (d) => d / 1e6,
    label: "Daily trade volume (millions)"
  },
  marks: [
    Plot.barY(aapl.slice(-40), {x: "Date", y: "Volume", interval: 5e6}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Population Distribution Barcode Plot
DESCRIPTION: Creates a barcode plot showing population distribution across age brackets for U.S. states using tickX marks.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {
    grid: true,
    label: "Population (%)",
    percent: true
  },
  y: {
    domain: stateage.ages,
    reverse: true,
    label: "Age (years)",
    labelAnchor: "top"
  },
  marks: [
    Plot.ruleX([0]),
    Plot.tickX(stateage, Plot.normalizeX("sum", {z: "state", x: "population", y: "age"}))
  ]
})

----------------------------------------

TITLE: Creating Horizontal Box Plot
DESCRIPTION: Creates a horizontal box plot using Plot.boxX, showing the same data with swapped axes.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {
    grid: true,
    inset: 6
  },
  marks: [
    Plot.boxX(morley, {x: "Speed", y: "Expt"})
  ]
})

----------------------------------------

TITLE: Perlin Noise Vector Field Visualization
DESCRIPTION: Demonstrates creating an artistic vector field visualization using Perlin noise

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 6,
  width: 1024,
  aspectRatio: 1,
  axis: null,
  marks: [
    Plot.vector(poisson([0, 0, 2, 2], 4000), {
      length: ([x, y]) => (noise(x + 2, y) + 0.5) * 24,
      rotate: ([x, y]) => noise(x, y) * 360
    })
  ]
})

----------------------------------------

TITLE: Grid Mark with Bar Chart Example
DESCRIPTION: Demonstrates creating a plot with configurable grid lines and a bar chart showing letter frequencies.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {axis: "top", percent: true, grid: !atop},
  marks: [
    Plot.barX(alphabet, {x: "frequency", y: "letter", sort: {y: "width"}}),
    atop ? Plot.gridX({interval: 1, stroke: "var(--vp-c-bg)", strokeOpacity: 0.5}) : null,
    Plot.ruleX([0])
  ]
})

----------------------------------------

TITLE: Custom Axis Placement and Styling
DESCRIPTION: Shows how to explicitly declare and style multiple axes with custom anchors and labels.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {percent: true},
  marks: [
    Plot.axisX({anchor: "top"}),
    Plot.axisX({anchor: "bottom", label: null}),
    Plot.barX(alphabet, {x: "frequency", y: "letter"}),
    Plot.gridX({interval: 1, stroke: "var(--vp-c-bg)", strokeOpacity: 0.5}),
    Plot.ruleX([0])
  ]
})

----------------------------------------

TITLE: Implementing Line Chart with Dynamic Markers using Plot and Vue
DESCRIPTION: Creates a line chart visualization using Plot library with configurable markers. The chart displays Crimea war death data with different causes represented by different line colors and customizable marker styles at data points.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(crimea, {x: "date", y: "deaths", stroke: "cause", marker: "{{marker}}"})
  ]
})

LANGUAGE: vue
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {ref} from "vue";
import crimea from "../data/crimea.ts";

const marker = ref("circle");
</script>

----------------------------------------

TITLE: Creating a Seattle Temperature Heatmap
DESCRIPTION: Demonstrates how to create a heatmap of daily maximum temperatures in Seattle using the rect mark and interval transform. It expands day and month values to unit intervals.

LANGUAGE: javascript
CODE:
Plot.plot({
  aspectRatio: 1,
  y: {ticks: 12, tickFormat: Plot.formatMonth("en", "narrow")},
  marks: [
    Plot.rect(seattle.filter((d) => d.date.getUTCFullYear() === 2015), {
      x: (d) => d.date.getUTCDate(),
      y: (d) => d.date.getUTCMonth(),
      interval: 1,
      fill: "temp_max",
      inset: 0.5
    })
  ]
})

----------------------------------------

TITLE: US Election Results Vector Map
DESCRIPTION: Visualizes 2020 US presidential election results using vectors to show voting margins by county

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "albers-usa",
  length: {type: "sqrt", transform: Math.abs},
  marks: [
    Plot.geo(statemesh, {strokeWidth: 0.5}),
    Plot.geo(nation),
    Plot.vector(
      counties,
      Plot.centroid({
        anchor: "start",
        length: (d) => d.properties.margin2020 * d.properties.votes,
        stroke: (d) => d.properties.margin2020 > 0 ? "red" : "blue",
        rotate: (d) => d.properties.margin2020 > 0 ? 60 : -60
      })
    )
  ]
})

----------------------------------------

TITLE: Creating Shorthand Box Plot
DESCRIPTION: Demonstrates the shorthand syntax for creating a simple box plot from an array of numbers.

LANGUAGE: javascript
CODE:
Plot.boxX([0, 3, 4.4, 4.5, 4.6, 5, 7]).plot()

----------------------------------------

TITLE: Static Annotations with Tip Mark in Plot.js
DESCRIPTION: This example shows how to use the tip mark for static annotations in a line chart, highlighting specific points of interest.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {grid: true},
  marks: [
    Plot.lineY(aapl, {x: "Date", y: "Close"}),
    Plot.tip(
      [`Apple stock reaches a new high of $133 on Feb. 23, 2015. The release of the first Apple Watch, slated for April, is hotly anticipated.`],
      {x: new Date("2015-02-23"), y: 133, dy: -3, anchor: "bottom"}
    ),
    Plot.tip(
      [`Apple stock drops 8% after the company misses Q2 revenue targets and reports declining iPhone sales. It reaches a two-year low of $90.34 on May 12.`],
      {x: new Date("2016-05-12"), y: 90.34, dy: 3, anchor: "top"}
    )
  ]
})

----------------------------------------

TITLE: Initializing Plot Raster Mark for Volcano Elevation Data
DESCRIPTION: Creates a raster plot to visualize the topography of the Maungawhau volcano using a grid of elevation samples.

LANGUAGE: javascript
CODE:
Plot.plot({
  color: {label: "Elevation (m)", legend: true},
  marks: [
    Plot.raster(volcano.values, {width: volcano.width, height: volcano.height})
  ]
})

----------------------------------------

TITLE: Creating a Density Heatmap with Geographical Projection in Plot.js
DESCRIPTION: This example shows how to create a density heatmap with geographical projection using Plot.js, visualizing Walmart store density across the US.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "albers",
  color: {scheme: "{{$dark ? \"turbo\" : \"YlGnBu\"}}"},
  marks: [
    Plot.density(walmarts, {x: "longitude", y: "latitude", bandwidth: 10, fill: "density"}),
    Plot.geo(statemesh, {strokeOpacity: 0.3}),
    Plot.geo(nation),
    Plot.dot(walmarts, {x: "longitude", y: "latitude", r: 1, fill: "currentColor"})
  ]
})

----------------------------------------

TITLE: Density Plot with Filled Frame
DESCRIPTION: Advanced example showing frame usage with density heatmap of Old Faithful geyser data.

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 30,
  marks: [
    Plot.frame({fill: 0}),
    Plot.density(faithful, {x: "waiting", y: "eruptions", fill: "density"})
  ]
})

----------------------------------------

TITLE: Initializing Link Chart with Population and Inequality Data
DESCRIPTION: Creates a scatter plot with linked points showing changes in population and inequality over time. Uses logarithmic x-axis and color encoding for inequality change.

LANGUAGE: javascript
CODE:
Plot.plot({
  grid: true,
  inset: 10,
  x: {
    type: "log",
    label: "Population"
  },
  y: {
    label: "Inequality",
    ticks: 4
  },
  color: {
    scheme: "BuRd",
    label: "Change in inequality from 1980 to 2015",
    legend: true,
    tickFormat: "+f"
  },
  marks: [
    Plot.link(metros, {
      x1: "POP_1980",
      y1: "R90_10_1980",
      x2: "POP_2015",
      y2: "R90_10_2015",
      stroke: (d) => d.R90_10_2015 - d.R90_10_1980,
      markerEnd: "arrow"
    }),
    Plot.text(metros, {
      x: "POP_2015",
      y: "R90_10_2015",
      filter: "highlight",
      text: "nyt_display",
      fill: "currentColor",
      stroke: "var(--vp-c-bg)",
      dy: -8
    })
  ]
})

----------------------------------------

TITLE: Creating Stacked Waffle Charts in Observable Plot
DESCRIPTION: Shows how to create stacked waffle charts using waffleY with grouping and faceting.

LANGUAGE: javascript
CODE:
Plot.waffleY(olympians, Plot.groupZ({y: "count"}, {fill: "sex", sort: "sex", fx: "weight", unit: 10})).plot({fx: {interval: 10}, color: {legend: true}})

----------------------------------------

TITLE: Unemployment Rate Change Visualization
DESCRIPTION: Advanced window transform example showing unemployment rate changes with color-coded slopes using a difference reducer and metropolitan division grouping.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {grid: true},
  color: {scheme: "BuYlRd", domain: [-0.5, 0.5]},
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(
      bls,
      Plot.map(
        {stroke: Plot.window({k: 2, reduce: "difference"})},
        {x: "date", y: "unemployment", z: "division", stroke: "unemployment"}
      )
    ),
  ]
})

----------------------------------------

TITLE: Creating Interactive State Map with Tips
DESCRIPTION: Implements an interactive map with hover tips showing state names using pointer and centroid transforms.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "albers-usa",
  marks: [
    Plot.geo(statemesh, {strokeOpacity: 0.2}),
    Plot.geo(nation),
    Plot.dot(states, Plot.centroid({fill: "red", stroke: "var(--vp-c-bg-alt)"})),
    Plot.tip(states, Plot.pointer(Plot.centroid({title: (d) => d.properties.name})))
  ]
})

----------------------------------------

TITLE: Vue Component Setup with Geographic Data
DESCRIPTION: Initializes reactive references for geographic data and computes derived topojson features using Vue's composition API.

LANGUAGE: vue
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import * as topojson from "topojson-client";
import {computed, shallowRef, onMounted} from "vue";

const us = shallowRef(null);
const earthquakes = shallowRef([]);
const walmarts = shallowRef({type: "FeatureCollection", features: []});
const world = shallowRef(null);
const statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states, (a, b) => a !== b) : {type: null});
const nation = computed(() => us.value ? topojson.feature(us.value, us.value.objects.nation) : {type: null});
const states = computed(() => us.value ? topojson.feature(us.value, us.value.objects.states) : {type: null});
const counties = computed(() => us.value ? topojson.feature(us.value, us.value.objects.counties) : {type: null});
const land = computed(() => world.value ? topojson.feature(world.value, world.value.objects.land) : {type: null});
</script>

----------------------------------------

TITLE: US Map with Albers USA Projection
DESCRIPTION: Creates a US-specific map using the Albers USA projection with state boundaries and continental outlines.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "albers-usa",
  marks: [
    Plot.geo(nation),
    Plot.geo(statemesh, {strokeOpacity: 0.2})
  ]
})

----------------------------------------

TITLE: Configuring Plot Layout with Margins in Observable Plot
DESCRIPTION: Demonstrates how to set custom margins for a plot and include additional visual elements like a frame and grid.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginTop,
  marginRight,
  marginBottom,
  marginLeft,
  grid: true,
  marks: [
    Plot.frame({
      stroke: "var(--vp-c-text-2)",
      strokeOpacity: 0.5,
      insetTop: -marginTop,
      insetRight: -marginRight,
      insetBottom: -marginBottom,
      insetLeft: -marginLeft,
    }),
    Plot.barY(alphabet, {x: "letter", y: "frequency", fill: "green"}),
    Plot.frame()
  ]
})

----------------------------------------

TITLE: Vertical Bollinger Band Chart
DESCRIPTION: Implementation of vertical Bollinger bands using bollingerX constructor.

LANGUAGE: javascript
CODE:
Plot.bollingerX(aapl, {y: "Date", x: "Close"}).plot()

----------------------------------------

TITLE: Plot.js Bar Mark Example
DESCRIPTION: Example showing how to create a bar chart using Plot.js with frequency data

LANGUAGE: javascript
CODE:
Plot.barX(alphabet, {x: "frequency", y: "letter"}).plot()

----------------------------------------

TITLE: Generating Proportional Dots with groupX Transform in Plot
DESCRIPTION: This example shows how to create a dot plot where the size of each dot represents the number of athletes in each sport using the groupX transform.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginBottom: 100,
  x: {label: null, tickRotate: 90},
  r: {range: [0, 14]},
  marks: [
    Plot.dot(olympians, Plot.groupX({r: "count"}, {x: "sport"}))
  ]
})

----------------------------------------

TITLE: Creating Normalized Stacked Area Chart
DESCRIPTION: Shows how to create a normalized stacked area chart using Plot, scaling stacks to fill the interval [0, 1].

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    label: "Annual revenue (%)",
    percent: true
  },
  marks: [
    Plot.areaY(riaa, Plot.stackY({offset: "normalize", order: "group", reverse: true}, {x: "year", y: "revenue", z: "format", fill: "group"})),
    Plot.ruleY([0, 1])
  ]
})

----------------------------------------

TITLE: Plot.js Layered Marks Example
DESCRIPTION: Example showing how to layer multiple marks (area, line, rule) in a single plot

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.ruleY([0]),
    Plot.areaY(aapl, {x: "Date", y: "Close", fillOpacity: 0.2}),
    Plot.lineY(aapl, {x: "Date", y: "Close"})
  ]
})

----------------------------------------

TITLE: Creating a Bar Chart with Interval Transform in Observable Plot
DESCRIPTION: This example shows how to use the interval transform with a rectY mark to create a bar chart with a temporal (utc) x-scale. This allows for more meaningful tick intervals and reveals gaps in the data (weekends and holidays).

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    transform: (d) => d / 1e6,
    label: "Daily trade volume (millions)"
  },
  marks: [
    Plot.rectY(aapl.slice(-40), {x: "Date", interval: "day", y: "Volume"}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Creating a bar chart with filtered highlighting using Observable Plot
DESCRIPTION: Shows how to create a bar chart of letter frequencies with filtered bars to highlight vowels. It demonstrates using the filter option to apply different styles to a subset of data.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.barY(alphabet, {
      x: "letter",
      y: "frequency"
    }),
    Plot.barY(alphabet, {
      filter: (d) => /[aeiouy]/i.test(d.letter),
      x: "letter",
      y: "frequency",
      stroke: "red",
      strokeWidth: 3,
      inset: -3 // expand the bars
    })
  ]
})

----------------------------------------

TITLE: Basic Axis Configuration in Plot.js
DESCRIPTION: Demonstrates basic axis configuration with percentage scale and grid on both sides.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {percent: true, grid: true, axis: "both"},
  marks: [
    Plot.barX(alphabet, {x: "frequency", y: "letter"}),
    Plot.ruleX([0])
  ]
})

----------------------------------------

TITLE: Generating a Time Series Line Chart with Plot.js Shorthand
DESCRIPTION: Demonstrates how to create a time series line chart using Plot.js shorthand syntax with a two-dimensional array of date-value pairs.

LANGUAGE: javascript
CODE:
Plot.line(timeSeries).plot()

----------------------------------------

TITLE: Voronoi Scatterplot Visualization
DESCRIPTION: Creates a scatterplot with Voronoi cells showing penguin species data using culmen measurements.

LANGUAGE: javascript
CODE:
Plot.plot({
  color: {legend: true},
  marks: [
    Plot.voronoi(penguins, {x: "culmen_depth_mm", y: "culmen_length_mm", fill: "species", fillOpacity: 0.2, stroke: "var(--vp-c-bg)"}),
    Plot.frame(),
    Plot.dot(penguins, {x: "culmen_depth_mm", y: "culmen_length_mm", fill: "species"})
  ]
})

----------------------------------------

TITLE: Creating a Matrix Diagram with Plot.js Shorthand
DESCRIPTION: Illustrates how to create a matrix diagram using Plot.js shorthand syntax with a two-dimensional array of string pairs.

LANGUAGE: javascript
CODE:
Plot.cell(matrix).plot()

----------------------------------------

TITLE: Basic Image Scatterplot with Presidential Portraits
DESCRIPTION: Creates a scatterplot using presidential portraits as markers, showing favorability over time.

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 20,
  x: {label: "First inauguration date"},
  y: {grid: true, label: "Net favorability (%)", tickFormat: "+f"},
  marks: [
    Plot.ruleY([0]),
    Plot.image(presidents, {
      x: "First Inauguration Date",
      y: (d) => d["Very Favorable %"] + d["Somewhat Favorable %"] - d["Very Unfavorable %"] - d["Somewhat Unfavorable %"],
      src: "Portrait URL",
      width: 40,
      title: "Name"
    })
  ]
})

----------------------------------------

TITLE: Creating Binned Box Plot with Manual Binning
DESCRIPTION: Creates a box plot with manually binned data using Math.floor for quantitative grouping.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginLeft: 60,
  y: {
    grid: true,
    label: "Price"
  },
  x: {
    interval: 0.5,
    label: "Carats",
    labelAnchor: "right",
    tickFormat: (x) => x.toFixed(1)
  },
  marks: [
    Plot.ruleY([0]),
    Plot.boxY(diamonds, {x: (d) => Math.floor(d.carat * 2) / 2, y: "price"})
  ]
})

----------------------------------------

TITLE: Number Formatting in Plot Library
DESCRIPTION: Formats numbers according to specified locale using Plot.formatNumber(). Defaults to U.S. English locale.

LANGUAGE: javascript
CODE:
Plot.formatNumber("en-US")(Math.PI) // "3.142"

----------------------------------------

TITLE: Creating a Weighted Density Plot with Plot.js
DESCRIPTION: This example shows how to create a weighted density plot using Plot.js and Vue.js, allowing dynamic adjustment of weight between male and female penguins.

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 10,
  color: {legend: true},
  marks: [
    Plot.density(penguins.filter((d) => d.sex), {
      weight: (d) => d.sex === "FEMALE" ? 1 - skew : 1 + skew,
      x: "flipper_length_mm",
      y: "culmen_length_mm",
      strokeOpacity: 0.5,
      clip: true
    }),
    Plot.dot(penguins.filter((d) => d.sex), {
      x: "flipper_length_mm",
      y: "culmen_length_mm",
      stroke: "sex",
      strokeOpacity: (d) => d.sex === "FEMALE" ? 1 - skew : 1 + skew
    }),
    Plot.frame()
  ]
})

----------------------------------------

TITLE: Complex Tree Visualization
DESCRIPTION: Implementation of a more complex tree visualization using the flare dataset with custom margins and dimensions.

LANGUAGE: javascript
CODE:
Plot.plot({
  axis: null,
  margin: 10,
  marginLeft: 30,
  marginRight: 160,
  width: 688,
  height: 1800,
  marks: [
    Plot.tree(flare, {path: "name", delimiter: ".", textStroke: "var(--vp-c-bg)"})
  ]
})

----------------------------------------

TITLE: Creating Auto Line Chart
DESCRIPTION: Example of using Plot.auto() to create a line chart from time series data

LANGUAGE: javascript
CODE:
Plot.auto(aapl, {x: "Date", y: "Close"}).plot()

----------------------------------------

TITLE: Weekday Text Plotting Example
DESCRIPTION: Demonstrates plotting weekday labels on an x-axis using Plot.formatWeekday() formatter.

LANGUAGE: javascript
CODE:
Plot.textX(d3.range(7)).plot({x: {tickFormat: Plot.formatWeekday()}})

----------------------------------------

TITLE: Creating Faceted Box Plot
DESCRIPTION: Demonstrates creating a box plot using faceting with interval scale option on the fx scale.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginLeft: 60,
  y: {
    grid: true,
    label: "Price"
  },
  fx: {
    interval: 0.5,
    label: "Carats",
    labelAnchor: "right",
    tickFormat: (x) => x.toFixed(1)
  },
  marks: [
    Plot.ruleY([0]),
    Plot.boxY(diamonds, {fx: "carat", y: "price"})
  ]
})

----------------------------------------

TITLE: Month Text Plotting Example
DESCRIPTION: Demonstrates plotting month labels on an x-axis using Plot.formatMonth() formatter.

LANGUAGE: javascript
CODE:
Plot.textX(d3.range(12)).plot({x: {tickFormat: Plot.formatMonth(), ticks: 12}})

----------------------------------------

TITLE: Delaunay Mesh Visualization
DESCRIPTION: Creates a Delaunay triangulation mesh with species-based coloring for penguin data.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.delaunayMesh(penguins, {x: "culmen_depth_mm", y: "culmen_length_mm", z: "species", stroke: "species", strokeOpacity: 0.5}),
    Plot.dot(penguins, {x: "culmen_depth_mm", y: "culmen_length_mm", fill: "species"})
  ]
})

----------------------------------------

TITLE: Creating Auto Histogram
DESCRIPTION: Examples of creating histograms for both quantitative and ordinal data using Plot.auto()

LANGUAGE: javascript
CODE:
Plot.auto(olympians, {x: "weight"}).plot()

LANGUAGE: javascript
CODE:
Plot.auto(penguins, {x: "island"}).plot()

----------------------------------------

TITLE: Creating a Number Interval in JavaScript
DESCRIPTION: This example shows how to create a number interval with a specified period using the numberInterval function.

LANGUAGE: javascript
CODE:
Plot.numberInterval(2)

----------------------------------------

TITLE: Generating Mandelbrot Set Visualization with Raster Mark
DESCRIPTION: Uses the raster mark to visualize the Mandelbrot set by counting iterations until escape for each point.

LANGUAGE: javascript
CODE:
Plot.raster({fill: mandelbrot, x1: -2, x2: 1, y1: -1.164, y2: 1.164}).plot({aspectRatio: 1})

LANGUAGE: javascript
CODE:
function mandelbrot(x, y) {
  for (let n = 0, zr = 0, zi = 0; n < 80; ++n) {
    [zr, zi] = [zr * zr - zi * zi + x, 2 * zr * zi + y];
    if (zr * zr + zi * zi > 4) return n;
  }
}

----------------------------------------

TITLE: Interactive Tips with Longer Text in Plot.js
DESCRIPTION: This snippet demonstrates how to create interactive tips with longer text content in a scatter plot of Olympic athletes.

LANGUAGE: javascript
CODE:
Plot.plot({
  grid: true,
  marks: [
    Plot.dot(olympians, {
      x: "weight",
      y: "height",
      fy: "sex",
      sort: (d) => !!d.info,
      stroke: (d) => d.info ? "currentColor" : "#aaa"
    }),
    Plot.tip(olympians, Plot.pointer({
      x: "weight",
      y: "height",
      fy: "sex",
      filter: (d) => d.info,
      title: (d) => [d.name, d.info].join("\n\n")
    }))
  ]
})

----------------------------------------

TITLE: Basic Faceted Plot Example
DESCRIPTION: Example of a basic faceted plot showing barley yields across different sites and years using Observable Plot's dot mark and frame.

LANGUAGE: javascript
CODE:
Plot.plot({
  height: 800,
  marginRight: 90,
  marginLeft: 110,
  grid: true,
  x: {nice: true},
  y: {inset: 5},
  color: {type: "categorical"},
  marks: [
    Plot.frame(),
    Plot.dot(barley, {
      x: "yield",
      y: "variety",
      fy: "site",
      stroke: "year",
      sort: {y: "-x", fy: "-x", reduce: "median"}
    })
  ]
})

----------------------------------------

TITLE: Creating a UTC Time Interval in JavaScript
DESCRIPTION: This example shows how to initialize a UTC time interval with a specified period using the utcInterval function.

LANGUAGE: javascript
CODE:
Plot.utcInterval("2 days")

----------------------------------------

TITLE: Creating a Raster Plot with Spatial Interpolation
DESCRIPTION: Shows how to use the raster mark with spatial interpolation to visualize magnetic field data from an aeromagnetic survey.

LANGUAGE: javascript
CODE:
Plot.raster(ca55, {x: "LONGITUDE", y: "LATITUDE", fill: "MAG_IGRF90", interpolate: "barycentric"}).plot({color: {type: "diverging"}})

----------------------------------------

TITLE: Initializing Plot Data in Vue.js Setup Script
DESCRIPTION: Sets up reactive references for data sources and computes bins for a histogram using d3.bin(). Imports necessary libraries and data.

LANGUAGE: javascript
CODE:
<script setup>

import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {computed, shallowRef, onMounted} from "vue";
import penguins from "../data/penguins.ts";

const bls = shallowRef([]);
const olympians = shallowRef([]);
const traffic = shallowRef(["Saarbrücken-Neuhaus", "Oldenburg (Holstein)", "Holz", "Göttelborn", "Riegelsberg", "Kastel", "Neustadt i. H.-Süd", "Nettersheim", "Hasborn", "Laufeld", "Otzenhausen", "Nonnweiler", "Kirschheck", "AS Eppelborn", "Bierfeld", "Von der Heydt", "Illingen", "Hetzerath", "Groß Ippener", "Bockel", "Ladbergen", "Dibbersen", "Euskirchen/Bliesheim", "Hürth", "Lotte", "Ascheberg", "Bad Schwartau", "Schloss Burg", "Uphusen", "HB-Silbersee", "Barsbüttel", "HB-Mahndorfer See", "Glüsingen", "HB-Weserbrücke", "Hengsen", "Köln-Nord", "Hagen-Vorhalle", "Unna"].map((location, i) => ({location, date: new Date(Date.UTC(2000, 0, 1, i)), vehicles: (10 + i) ** 2.382})));
const bins = computed(() => d3.bin().thresholds(80).value((d) => d.weight)(olympians.value));

const scheme = Plot.scale({color: {type: "categorical"}}).range;

onMounted(() => {
  d3.csv("../data/athletes.csv", d3.autoType).then((data) => (olympians.value = data));
  d3.csv("../data/bls-metro-unemployment.csv", d3.autoType).then((data) => (bls.value = data));
  d3.csv("../data/traffic.csv", d3.autoType).then((data) => (traffic.value = data));
});

</script>

----------------------------------------

TITLE: Creating an Overlapping Histogram with Blend Mode
DESCRIPTION: Demonstrates how to create an overlapping histogram using the rectY mark. It uses mixBlendMode to handle overlapping areas and includes a dynamic color scheme based on dark mode.

LANGUAGE: javascript
CODE:
Plot.plot({
  round: true,
  color: {legend: true},
  marks: [
    Plot.rectY(olympians, Plot.binX({y2: "count"}, {x: "weight", fill: "sex", mixBlendMode: "{{$dark ? "screen" : "multiply"}}"})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Convex Hull Visualization
DESCRIPTION: Shows how to create convex hulls around groups of penguin data points based on species.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.hull(penguins, {x: "culmen_depth_mm", y: "culmen_length_mm", fill: "species", fillOpacity: 0.2}),
    Plot.dot(penguins, {x: "culmen_depth_mm", y: "culmen_length_mm", stroke: "species"})
  ]
})

----------------------------------------

TITLE: Creating Voronoi Diagram from County Centroids
DESCRIPTION: Generates a Voronoi diagram using county centroids with Albers projection.

LANGUAGE: javascript
CODE:
Plot.voronoi(counties, Plot.centroid()).plot({projection: "albers"})

----------------------------------------

TITLE: Using Pointer Transform with Tip Mark in Observable Plot
DESCRIPTION: Demonstrates how to use the pointer transform with a tip mark to show details on hover for a scatter plot of penguin data.

LANGUAGE: javascript
CODE:
Plot.tip(penguins, Plot.pointer({x: "culmen_length_mm", y: "culmen_depth_mm"}))

----------------------------------------

TITLE: Geographic Dot Plot with Sort Transform
DESCRIPTION: Plot.js example showing a geographic visualization with dots representing county populations, demonstrating sort transform usage for controlling drawing order.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "albers-usa",
  marks: [
    Plot.geo(statemesh, {strokeOpacity: 0.4}),
    Plot.dot(counties, Plot.geoCentroid({
      r: (d) => d.properties.population,
      fill: "currentColor",
      stroke: "var(--vp-c-bg)",
      strokeWidth: 1,
      sort: sorted ? {channel: "-r"} : null
    }))
  ]
})

----------------------------------------

TITLE: Creating a Standalone Color Ramp Legend in Plot.js
DESCRIPTION: This example demonstrates how to create a standalone color ramp legend using Plot.legend(). It uses a linear color scale with default domain and color scheme.

LANGUAGE: javascript
CODE:
Plot.legend({color: {type: "linear"}})

----------------------------------------

TITLE: Plotting County Centroids with Dot Marks
DESCRIPTION: Visualizes county centroids using dot marks with both regular centroid and geoCentroid transforms.

LANGUAGE: javascript
CODE:
Plot.dot(counties, Plot.centroid()).plot({projection: "albers-usa"})

----------------------------------------

TITLE: Creating a One-Dimensional Cell Plot of Letter Frequencies using Observable Plot
DESCRIPTION: This snippet shows how to create a one-dimensional cell plot of letter frequencies using the cell mark in Observable Plot. It uses color to represent frequency instead of bar length.

LANGUAGE: javascript
CODE:
Plot.cell(alphabet, {x: "letter", fill: "frequency"}).plot()

----------------------------------------

TITLE: Implementing Indent Function for Tree Layout
DESCRIPTION: Defines a function that adjusts the y-coordinate based on node depth and x-coordinate based on index for tree layout.

LANGUAGE: javascript
CODE:
function indent() {
  return (root) => {
    root.eachBefore((node, i) => {
      node.y = node.depth;
      node.x = i;
    });
  };
}

----------------------------------------

TITLE: Plot.js Line Chart with Min/Max Labels
DESCRIPTION: Demonstrates using selectMinY and selectMaxY transforms to label extreme values in a line chart

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {grid: true},
  marks: [
    Plot.ruleY([0]),
    Plot.line(aapl, {x: "Date", y: "Close"}),
    Plot.text(aapl, Plot.selectMinY({x: "Date", y: "Close", text: "Close", frameAnchor: "top", dy: 6})),
    Plot.text(aapl, Plot.selectMaxY({x: "Date", y: "Close", text: "Close", frameAnchor: "bottom", dy: -6}))
  ]
})

----------------------------------------

TITLE: Sorting Data for Area Charts
DESCRIPTION: Shows how to use the sort transform to ensure data is in the correct order for area charts.

LANGUAGE: javascript
CODE:
Plot.areaY(d3.shuffle(aapl.slice()), {x: "Date", y: "Close", sort: "Date"}).plot()

----------------------------------------

TITLE: Creating Binned Heatmap
DESCRIPTION: Creates a binned heatmap using Plot.rect() with opacity encoding for count, showing density of athletes by weight and height.

LANGUAGE: javascript
CODE:
Plot.rect(olympians, Plot.bin({fillOpacity: "count"}, {x: "weight", y: "height", fill: "sex", inset: 0})).plot()

----------------------------------------

TITLE: Creating Auto Heatmap
DESCRIPTION: Example of creating a heatmap using Plot.auto() with color reducer

LANGUAGE: javascript
CODE:
Plot.auto(olympians, {x: "weight", y: "height", color: "count"}).plot()

----------------------------------------

TITLE: Color Heatmap Rule Plot
DESCRIPTION: Example demonstrating how to create a one-dimensional heatmap using Plot's rule mark with color scales.

LANGUAGE: javascript
CODE:
Plot.ruleX(gistemp, {x: "Date", stroke: "Anomaly"}).plot()

----------------------------------------

TITLE: Applying Gaussian Blur to Contours in Observable Plot
DESCRIPTION: Creates smoother contours by applying a Gaussian blur to the underlying raster grid before contour generation.

LANGUAGE: javascript
CODE:
Plot.contour(ca55, {x: "LONGITUDE", y: "LATITUDE", fill: "MAG_IGRF90", blur: 4}).plot({color: {type: "diverging"}})

----------------------------------------

TITLE: Customized Scatter Plot with Grid and Legend
DESCRIPTION: Enhanced version of the penguin scatter plot with added features like grid, aspect ratio, axis labels and legend.

LANGUAGE: javascript
CODE:
Plot.plot({
  grid: true,
  aspectRatio: 1,
  inset: 10,
  x: {tickSpacing: 80, label: "Culmen length (mm)"},
  y: {tickSpacing: 80, label: "Culmen depth (mm)"},
  color: {legend: true},
  marks: [
    Plot.frame(),
    Plot.dot(penguins, {x: "culmen_length_mm", y: "culmen_depth_mm", stroke: "species"})
  ]
})

----------------------------------------

TITLE: Creating Stacked Rect Chart with Plot
DESCRIPTION: Shows how to create a stacked rect chart using the Plot library, using Crimean War data with monthly intervals.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {grid: true},
  marks: [
    Plot.rectY(crimea, {x: "date", y: "deaths", interval: "month", fill: "cause"}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Creating Choropleth Map with Geo Mark
DESCRIPTION: Creates a choropleth map showing unemployment rates by U.S. county using the geo mark with Albers USA projection.

LANGUAGE: javascript
CODE:
Plot.geo(counties, {fill: (d) => d.properties.unemployment}).plot({
  projection: "albers-usa",
  color: {
    type: "quantile",
    n: 8,
    scheme: "blues",
    label: "Unemployment (%)",
    legend: true
  }
})

----------------------------------------

TITLE: Initializing Arrow Chart with Observable Plot in JavaScript
DESCRIPTION: This snippet demonstrates how to create an arrow chart showing rising inequality and population in U.S. cities from 1980 to 2015 using Observable Plot.

LANGUAGE: javascript
CODE:
Plot.plot({
  grid: true,
  inset: 10,
  x: {
    type: "log",
    label: "Population"
  },
  y: {
    label: "Inequality",
    ticks: 4
  },
  color: {
    scheme: "BuRd",
    label: "Change in inequality from 1980 to 2015",
    legend: true,
    tickFormat: "+f"
  },
  marks: [
    Plot.arrow(metros, {
      x1: "POP_1980",
      y1: "R90_10_1980",
      x2: "POP_2015",
      y2: "R90_10_2015",
      bend: true,
      stroke: (d) => d.R90_10_2015 - d.R90_10_1980
    }),
    Plot.text(metros, {
      x: "POP_2015",
      y: "R90_10_2015",
      filter: "highlight",
      text: "nyt_display",
      fill: "currentColor",
      stroke: "var(--vp-c-bg)",
      dy: -6
    })
  ]
})

----------------------------------------

TITLE: Temperature Visualization Basic Line Plot
DESCRIPTION: Example showing how to create a basic line plot using Plot's scale system to visualize temperature data.

LANGUAGE: javascript
CODE:
Plot.lineY(gistemp, {x: "Date", y: "Anomaly"}).plot()

----------------------------------------

TITLE: Faceted Map of Walmart Stores
DESCRIPTION: Creates a faceted dot map showing Walmart store openings by decade using the Albers projection.

LANGUAGE: javascript
CODE:
Plot.plot({
  width: 975,
  projection: "albers",
  fx: {tickFormat: (d) => `${d}'s`},
  facet: {data: walmarts, x: (d) => Math.floor(d.date.getUTCFullYear() / 10) * 10},
  marks: [
    Plot.geo(statemesh, {strokeOpacity: 0.1}),
    Plot.dot(walmarts, {x: "longitude", y: "latitude", r: 1, fill: "currentColor"}),
    Plot.geo(nation)
  ]
})

----------------------------------------

TITLE: Custom Bollinger Bands with Multiple Lines
DESCRIPTION: Advanced implementation showing custom Bollinger bands with separate upper and lower bounds and a center line.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.lineY(aapl, Plot.mapY(Plot.bollinger({n: 20, k: -2}), {x: "Date", y: "Close", stroke: "red"})),
    Plot.lineY(aapl, Plot.mapY(Plot.bollinger({n: 20, k: 2}), {x: "Date", y: "Close", stroke: "green"})),
    Plot.lineY(aapl, {x: "Date", y: "Close"})
  ]
})

----------------------------------------

TITLE: Creating Streamgraph with Configurable Offset
DESCRIPTION: Demonstrates how to create a streamgraph using Plot, with a configurable offset option for stack baseline.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    label: "Annual revenue (billions, adj.)",
    transform: (d) => d / 1000
  },
  marks: [
    Plot.areaY(riaa, {x: "year", y: "revenue", z: "format", fill: "group", offset})
  ]
})

----------------------------------------

TITLE: Weekday Formatting with Locale
DESCRIPTION: Formats weekday numbers (0-6) according to specified locale and format (narrow, short, or long).

LANGUAGE: javascript
CODE:
Plot.formatWeekday("es-MX", "long")(0) // "domingo"

----------------------------------------

TITLE: Styling Dark Mode in Plot
DESCRIPTION: CSS snippet showing how to override Plot's default styles to apply dark mode colors using custom properties.

LANGUAGE: css
CODE:
svg.plot-d6a7b5 {
  --plot-background: #333;
  background: var(--plot-background);
  color: white;
}

----------------------------------------

TITLE: Creating a Shifted Difference Plot in Plot
DESCRIPTION: Shows how to use the shift transform to compare a metric to itself over time. This example visualizes year-over-year growth in Apple stock prices.

LANGUAGE: javascript
CODE:
Plot.differenceY(aapl, Plot.shiftX("+1 year", {x: "Date", y: "Close"})).plot({y: {grid: true}})

----------------------------------------

TITLE: Creating Waffle Chart with Observable Plot
DESCRIPTION: Demonstrates the new waffle mark functionality for displaying quantitative data by category, showing Olympic athletes grouped by weight and sex.

LANGUAGE: javascript
CODE:
Plot.plot({
  fx: {interval: 10},
  color: {legend: true},
  marks: [Plot.waffleY(olympians, Plot.groupZ({y: "count"}, {fill: "sex", sort: "sex", fx: "weight", unit: 10}))]
})

----------------------------------------

TITLE: Using PointerY Transform for Categorical Data in Observable Plot
DESCRIPTION: Demonstrates the use of pointerY transform for a chart with categorical data on the y-axis, such as letter frequencies.

LANGUAGE: javascript
CODE:
Plot.tip(alphabet, Plot.pointerY({x: "frequency", y: "letter"}))

----------------------------------------

TITLE: ISO Date Formatting in Plot Library
DESCRIPTION: Converts a date object to its shortest equivalent ISO 8601 UTC string format. Returns 'Invalid Date' for invalid date inputs.

LANGUAGE: javascript
CODE:
Plot.formatIsoDate(new Date("2020-01-01T00:00:00.000Z")) // "2020-01-01"

----------------------------------------

TITLE: Arrow Table Data Plotting
DESCRIPTION: Example of using Apache Arrow table data with column name shorthand for simplified data visualization.

LANGUAGE: javascript
CODE:
Plot.dot(gistemp, {x: "Date", y: "Anomaly"}).plot()

----------------------------------------

TITLE: Creating a Plot with Hexgrid and Dot Marks in JavaScript
DESCRIPTION: This example demonstrates how to create a plot using the hexgrid mark along with a dot mark. It uses the hexbin transform to bin penguin data based on culmen length and depth.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.hexgrid(),
    Plot.dot(penguins, Plot.hexbin({r: "count"}, {x: "culmen_length_mm", y: "culmen_depth_mm", fill: "currentColor"}))
  ]
})

----------------------------------------

TITLE: Creating Bollinger Bands for Apple Stock with Map Transform
DESCRIPTION: Generates a plot with Bollinger bands for Apple stock prices using the map transform with custom bollinger and window methods.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true
  },
  marks: [
    Plot.areaY(aapl, Plot.map({y1: Plot.bollinger({n, k: -k}), y2: Plot.bollinger({n, k})}, {x: "Date", y: "Close", fillOpacity: 0.2})),
    Plot.lineY(aapl, Plot.map({y: Plot.bollinger({n})}, {x: "Date", y: "Close", stroke: "blue"})),
    Plot.lineY(aapl, {x: "Date", y: "Close", strokeWidth: 1})
  ]
})

----------------------------------------

TITLE: Using Aspect Ratio in Observable Plot
DESCRIPTION: Shows how to use the aspectRatio option to maintain a fixed aspect ratio for a scatter plot.

LANGUAGE: javascript
CODE:
Plot.plot({
  grid: true,
  inset: 10,
  aspectRatio: fixed ? 1 : undefined,
  color: {legend: true},
  marks: [
    Plot.frame(),
    Plot.dot(penguins, {x: "culmen_length_mm", y: "culmen_depth_mm", stroke: "species"})
  ]
})

----------------------------------------

TITLE: Marker Rendering with Varying Aesthetics
DESCRIPTION: Demonstrates improved marker rendering with varying stroke width and color, creating spiraling arrows with rainbow colors.

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 40,
  axis: null,
  marks: [
    Plot.line(d3.range(400), {
      x: (i) => i * Math.sin(i / 100 + ((i % 5) * 2 * Math.PI) / 5),
      y: (i) => i * Math.cos(i / 100 + ((i % 5) * 2 * Math.PI) / 5),
      z: (i) => i % 5,
      stroke: (i) => -i,
      strokeWidth: (i) => i ** 1.1 / 100,
      markerEnd: "arrow"
    })
  ]
})

----------------------------------------

TITLE: Generating a Histogram with Plot.js Shorthand
DESCRIPTION: Demonstrates how to create a histogram using Plot.js shorthand syntax with binning transformation on a one-dimensional array of numbers.

LANGUAGE: javascript
CODE:
Plot.rectY(numbers, Plot.binX()).plot()

----------------------------------------

TITLE: Unit Test Example for Month Formatting in Observable Plot
DESCRIPTION: This JavaScript code snippet demonstrates a unit test for the formatMonth function in Observable Plot, checking various formatting options.

LANGUAGE: javascript
CODE:
it("formatMonth(locale, format) does the right thing", () => {
  assert.strictEqual(Plot.formatMonth("en", "long")(0), "January");
  assert.strictEqual(Plot.formatMonth("en", "short")(0), "Jan");
  assert.strictEqual(Plot.formatMonth("en", "narrow")(0), "J");
});

----------------------------------------

TITLE: Basic Frame Mark Example
DESCRIPTION: Simple example showing how to create a basic frame around a plot area with grid lines.

LANGUAGE: javascript
CODE:
Plot.frame().plot({x: {domain: [0, 1], grid: true}})

----------------------------------------

TITLE: Generating Standalone Legend in Observable Plot
DESCRIPTION: Demonstrates how to create a standalone legend for a specific scale of a rendered plot.

LANGUAGE: javascript
CODE:
const plot = Plot.plot(options); // render a plot
const legend = plot.legend("color"); // render a color legend

----------------------------------------

TITLE: Snapshot Test Example for Line Chart in Observable Plot
DESCRIPTION: This TypeScript code snippet demonstrates a snapshot test for creating a line chart using BLS unemployment data in Observable Plot.

LANGUAGE: typescript
CODE:
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";

export async function lineUnemployment() {
  const bls = await d3.csv<any>("data/bls-metro-unemployment.csv", d3.autoType);
  return Plot.plot({
    marks: [
      Plot.ruleY([0]),
      Plot.lineY(bls, {x: "date", y: "unemployment", z: "division"})
    ]
  });
}

----------------------------------------

TITLE: Defining Likert Scale Values and Custom Offset Function
DESCRIPTION: Demonstrates how to define Likert scale values and implement a custom offset function for diverging stacked charts.

LANGUAGE: javascript
CODE:
likert = Likert([
  ["Strongly Disagree", -1],
  ["Disagree", -1],
  ["Neutral", 0],
  ["Agree", 1],
  ["Strongly Agree", 1]
])

function Likert(responses) {
  const map = new Map(responses);
  return {
    order: Array.from(map.keys()),
    offset(I, X1, X2, Z) {
      for (const stacks of I) {
        for (const stack of stacks) {
          const k = d3.sum(stack, (i) => (X2[i] - X1[i]) * (1 - map.get(Z[i]))) / 2;
          for (const i of stack) {
            X1[i] -= k;
            X2[i] -= k;
          }
        }
      }
    }
  };
}

----------------------------------------

TITLE: Creating Diverging Stacked Dot Plot
DESCRIPTION: Demonstrates how to create a diverging stacked dot plot using Plot, showing age and gender distribution of the U.S. Congress.

LANGUAGE: javascript
CODE:
Plot.plot({
  aspectRatio: 1,
  x: {label: "Age (years)"},
  y: {
    grid: true,
    label: "← Women · Men →",
    labelAnchor: "center",
    tickFormat: Math.abs
  },
  marks: [
    Plot.dot(
      congress,
      Plot.stackY2({
        x: (d) => 2023 - d.birthday.getUTCFullYear(),
        y: (d) => d.gender === "M" ? 1 : -1,
        fill: "gender",
        title: "full_name"
      })
    ),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Loading Observable Plot in HTML
DESCRIPTION: This HTML snippet demonstrates how to load the Observable Plot UMD bundle in a web page, along with its D3 dependency.

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
<script src="plot.umd.js"></script>

----------------------------------------

TITLE: Color-Encoded Temperature Scatterplot
DESCRIPTION: Demonstrates using color encoding to show temperature anomalies with a diverging color scale.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    tickFormat: "+f",
    label: "Surface temperature anomaly (°F)"
  },
  color: {
    scheme: "BuRd"
  },
  marks: [
    Plot.ruleY([0]),
    Plot.dot(gistemp, {x: "Date", y: "Anomaly", stroke: "Anomaly"})
  ]
})

----------------------------------------

TITLE: Vue Options List Template
DESCRIPTION: Creates a nested list of API options and their associated contexts with dynamic links.

LANGUAGE: vue
CODE:
<ul>
  <li v-for="[name, contexts] in data.options">
    <b>{{ name }}</b> - <span v-for="({name: context, href}, index) in contexts"><a :href="href">{{ context }}</a><span v-if="index < contexts.length - 1">, </span></span>
  </li>
</ul>

----------------------------------------

TITLE: Creating a Stacked Histogram with Rounded Top Corners
DESCRIPTION: Demonstrates how to create a stacked histogram with rounded top corners using the rectY mark. It uses ry2 and ry1 options for rounding specific sides and the clip option to hide overflow.

LANGUAGE: javascript
CODE:
Plot.plot({
  color: {legend: true},
  marks: [
    Plot.rectY(olympians, Plot.binX({y: "count"}, {x: "weight", fill: "sex", ry2: 4, ry1: -4, clip: "frame"})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Creating a Finite State Machine Diagram with Observable Plot in JavaScript
DESCRIPTION: This code snippet shows how to create a finite state machine diagram using the arrow mark in Observable Plot, representing transition frequencies between states.

LANGUAGE: javascript
CODE:
Plot.plot({
  inset: 60,
  aspectRatio: 1,
  axis: null,
  marks: [
    Plot.dot(markov.nodes, {r: 40}),
    Plot.arrow(markov.edges, {
      x1: ([[x1]]) => x1,
      y1: ([[, y1]]) => y1,
      x2: ([, [x2]]) => x2,
      y2: ([, [, y2]]) => y2,
      bend: true,
      strokeWidth: ([,, value]) => value,
      strokeLinejoin: "miter",
      headLength: 24,
      inset: 48
    }),
    Plot.text(markov.nodes, {text: ["A", "B", "C"], dy: 12}),
    Plot.text(markov.edges, {
      x: ([[x1, y1], [x2, y2]]) => (x1 + x2) / 2 + (y1 - y2) * 0.15,
      y: ([[x1, y1], [x2, y2]]) => (y1 + y2) / 2 - (x1 - x2) * 0.15,
      text: ([,, value]) => value
    })
  ]
})

----------------------------------------

TITLE: CSS Module Styling
DESCRIPTION: Defines CSS styles for the one-line list items with text overflow handling.

LANGUAGE: css
CODE:
<style module>

ul.oneline span {
  display: block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

</style>

----------------------------------------

TITLE: Creating a Complex Survey Response Waffle Chart
DESCRIPTION: Demonstrates how to create a more complex waffle chart representing survey responses with custom styling and text labels.

LANGUAGE: javascript
CODE:
Plot.plot({
  axis: null,
  label: null,
  height: 260,
  marginTop: 20,
  marginBottom: 70,
  title: "Subdued",
  subtitle: "Of 120 surveyed Syrian teenagers:",
  marks: [
    Plot.axisFx({lineWidth: 10, anchor: "bottom", dy: 20}),
    Plot.waffleY({length: 1}, {y: 120, fillOpacity: 0.4, rx: "100%"}),
    Plot.waffleY(survey, {fx: "question", y: "yes", rx: "100%", fill: "orange"}),
    Plot.text(survey, {fx: "question", text: (d) => (d.yes / 120).toLocaleString("en-US", {style: "percent"}), frameAnchor: "bottom", lineAnchor: "top", dy: 6, fill: "orange", fontSize: 24, fontWeight: "bold"})
  ]
})

----------------------------------------

TITLE: Creating Auto Scatterplot
DESCRIPTION: Example of using Plot.auto() to create a scatterplot from penguin data

LANGUAGE: javascript
CODE:
Plot.auto(penguins, {x: "body_mass_g", y: "flipper_length_mm"}).plot()

----------------------------------------

TITLE: Rounded Rectangle Histogram
DESCRIPTION: Demonstrates the new rounded corner options for rect-like marks, creating a histogram with rounded tops and negative bottom radius for seamless stacking.

LANGUAGE: javascript
CODE:
Plot.plot({
  color: {legend: true},
  marks: [
    Plot.rectY(olympians, Plot.binX({y: "count"}, {x: "weight", fill: "sex", ry2: 4, ry1: -4, clip: "frame"})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Styling Theme Variables
DESCRIPTION: CSS styles that customize the appearance of the documentation site's hero section, including gradient colors and dark mode image effects.

LANGUAGE: css
CODE:
:root {
  --vp-home-hero-name-color: transparent;
  --vp-home-hero-name-background: linear-gradient(-30deg, var(--hero-brand-contrast), var(--vp-c-brand-1));
}

:root.dark .VPHero .VPImage {
  filter: drop-shadow(0 4px 8px black);
}

----------------------------------------

TITLE: Creating a Faceted Waffle Chart with Unit Option
DESCRIPTION: Demonstrates how to create a faceted waffle chart using waffleY with a customizable unit option.

LANGUAGE: javascript
CODE:
Plot.waffleY(olympians, Plot.groupZ({y: "count"}, {fx: "date_of_birth", unit})).plot({fx: {interval: "5 years", label: null}})

----------------------------------------

TITLE: Circular Clipping for Mathematical Visualization
DESCRIPTION: Demonstrates using the clip option with a custom polygon to visualize Math.atan2 values within a unit circle. Creates a circular mask using polygon coordinates generated from trigonometric functions.

LANGUAGE: javascript
CODE:
Plot.raster({
  x1: -1, x2: 1, y1: -1, y2: 1,
  fill: (x, y) => Math.atan2(y, x),
  clip: {
    type: "Polygon",
    coordinates: [
      d3.range(0, 2 * Math.PI, 0.1).map((angle) => [Math.cos(angle), Math.sin(angle)])
    ]
  }
}).plot({width: 300, aspectRatio: 1})

----------------------------------------

TITLE: Generating Plot Tips with Custom Formatting
DESCRIPTION: JavaScript code showing how to create a scatter plot with customized tip formatting for different channels.

LANGUAGE: javascript
CODE:
Plot.dot(olympians, {
  x: "weight",
  y: "height",
  stroke: "sex",
  channels: {
    name: "name",
    nationality: "nationality",
    sport: "sport"
  },
  tip: {
    format: {
      name: true,
      y: (d) => `${d}m`,
      x: (d) => `${d}kg`,
      stroke: false
    }
  }
}).plot()

----------------------------------------

TITLE: Creating a Simple Histogram with binX Transform in Observable Plot
DESCRIPTION: This snippet demonstrates how to create a basic histogram using the binX transform and rectY mark in Observable Plot. It shows the distribution of weights of Olympic athletes.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {grid: true},
  marks: [
    Plot.rectY(olympians, Plot.binX({y: "count"}, {x: "weight"})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Creating an Overlapping Histogram with binX Transform in Observable Plot
DESCRIPTION: This example shows how to create an overlapping histogram by generating y2 instead of y, and using blend modes to make the overlap visible.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {grid: true},
  marks: [
    Plot.rectY(olympians, Plot.binX({y2: "count"}, {x: "weight", fill: "sex", mixBlendMode: "{{$dark ? \"screen\" : \"multiply\"}}"}))
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Voronoi Mesh Visualization
DESCRIPTION: Demonstrates the creation of a Voronoi mesh overlay on a scatterplot of penguin data.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.voronoiMesh(penguins, {x: "culmen_depth_mm", y: "culmen_length_mm"}),
    Plot.dot(penguins, {x: "culmen_depth_mm", y: "culmen_length_mm", fill: "species"})
  ]
})

----------------------------------------

TITLE: Window Transform with Multiple Reducers
DESCRIPTION: Example showing multiple reduction methods (min, max, median) applied to the same dataset using window transform with customizable parameters.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    label: "Temperature (°F)"
  },
marks: [
    Plot.lineY(sftemp, {x: "date", y: "low", strokeOpacity: 0.3}),
    Plot.lineY(sftemp, Plot.windowY({k: 28, reduce: "min"}, {x: "date", y: "low", stroke: "blue"})),
    Plot.lineY(sftemp, Plot.windowY({k: 28, reduce: "max"}, {x: "date", y: "low", stroke: "red"})),
    Plot.lineY(sftemp, Plot.windowY({k: 28, reduce: "median"}, {x: "date", y: "low"}))
  ]
})

----------------------------------------

TITLE: Generating a Scatterplot with Color Legend in Plot.js
DESCRIPTION: This snippet creates a scatterplot of Olympic athletes' body measurements with a color legend for sex. It demonstrates how to enable a legend for the color scale.

LANGUAGE: javascript
CODE:
Plot.plot({
  color: {legend: true},
  marks: [
    Plot.dot(olympians, {x: "weight", y: "height", stroke: "sex"})
  ]
})

----------------------------------------

TITLE: Configuring Pointer Transform for a Histogram in Observable Plot
DESCRIPTION: Shows how to apply pointer transform to a histogram, demonstrating the difference between one-dimensional and two-dimensional pointing.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {label: "Daily volume (log₁₀)"},
  marks: [
    Plot.rectY(aapl, Plot.binX({y: "count"}, {x: (d) => Math.log10(d.Volume), thresholds: 40, tip: "{{recttip}}"})),
    Plot.dot(aapl, Plot.stackY(Plot.binX({y: "count"}, {x: (d) => Math.log10(d.Volume), thresholds: 40, stroke: "red"})))
  ]
})

----------------------------------------

TITLE: Visualizing Small Grid Data with Text and Raster Marks
DESCRIPTION: Demonstrates how to visualize a small grid of data using both text and raster marks in Plot.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.raster(grid.values, {
      width: grid.width,
      height: grid.height,
      imageRendering: "pixelated" // to better show the grid
    }),
    Plot.text(grid.values, {
      text: Plot.identity,
      fill: "white",
      x: (d, i) => i % grid.width + 0.5,
      y: (d, i) => Math.floor(i / grid.width) + 0.5
    })
  ]
})

----------------------------------------

TITLE: Demonstrating UTC Day Interval Floor Method in JavaScript
DESCRIPTION: This snippet shows how to use the floor method of a UTC day interval to find the preceding midnight for a given date.

LANGUAGE: javascript
CODE:
Plot.utcInterval("day").floor(new Date("2013-04-12T12:34:56Z")) // 2013-04-12

----------------------------------------

TITLE: Initializing Contour Mark with Volcano Data in Observable Plot
DESCRIPTION: Creates a basic contour plot using volcano elevation data. The contours are stroked to show isolines of elevation.

LANGUAGE: javascript
CODE:
Plot.contour(volcano.values, {width: volcano.width, height: volcano.height}).plot()

----------------------------------------

TITLE: Dodge Transform with Sort Order Control
DESCRIPTION: Demonstration of combining dodge and sort transforms to control both position and drawing order of data points.

LANGUAGE: javascript
CODE:
Plot.plot({
  height: 180,
  marks: [
    Plot.dotX(cars, Plot.dodgeY({
      x: "weight (lb)",
      title: "name",
      fill: "currentColor",
      sort: {channel: "x", order}
    }))
  ]
})

----------------------------------------

TITLE: Using UTC Day Interval Offset Method in JavaScript
DESCRIPTION: This example demonstrates the offset method of a UTC day interval to add or subtract days from a given date.

LANGUAGE: javascript
CODE:
Plot.utcInterval("day").offset(new Date("2013-04-12T12:34:56Z"), 1) // 2013-04-13T12:34:56Z
Plot.utcInterval("day").offset(new Date("2013-04-12T12:34:56Z"), -2) // 2013-04-10T12:34:56Z

----------------------------------------

TITLE: Creating a Basic Histogram with RectY Mark
DESCRIPTION: Shows how to create a simple histogram using the rectY mark and pre-binned data. It uses x1 and x2 for bin boundaries and y for the count of values in each bin.

LANGUAGE: javascript
CODE:
Plot.rectY(bins, {x1: "x0", x2: "x1", y: "length"}).plot({round: true})

----------------------------------------

TITLE: Combining Area, Line, and Rule Marks
DESCRIPTION: Shows how to combine areaY, lineY, and ruleY marks to create a more detailed area chart with a baseline.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true
  },
  marks: [
    Plot.areaY(aapl, {x: "Date", y: "Close", fillOpacity: 0.3}),
    Plot.lineY(aapl, {x: "Date", y: "Close"}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Implementing UTC Week Interval Range Method in JavaScript
DESCRIPTION: This code shows how to use the range method of a UTC week interval to generate an array of weekly dates within a specified range.

LANGUAGE: javascript
CODE:
Plot.utcInterval("week").range(new Date("2013-04-12T12:34:56Z"), new Date("2013-05-12T12:34:56Z")) // [2013-04-14, 2013-04-21, 2013-04-28, 2013-05-05, 2013-05-12]

----------------------------------------

TITLE: Creating a Histogram with Rounded Corners
DESCRIPTION: Shows how to create a histogram with rounded corners using the rectY mark. It demonstrates the use of the r option for corner radius.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.rectY(olympians, Plot.binX({y: "count"}, {x: "weight", r: {{r}}, thresholds: 10})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Anchored Frame Mark Example
DESCRIPTION: Example showing how to create a frame with only one side visible using the anchor option.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {
    domain: [0, 1],
    grid: true
  },
  marks: [
    Plot.frame({stroke: "red", anchor: "bottom"})
  ]
})

----------------------------------------

TITLE: Grouping Data for Waffle Chart in Observable Plot
DESCRIPTION: Shows how to use the group transform with waffleY to create a chart comparing counts of female and male athletes.

LANGUAGE: javascript
CODE:
Plot.waffleY(olympians, Plot.groupX({y: "count"}, {x: "sex"})).plot({x: {label: null}})

----------------------------------------

TITLE: Initializing Plot with Vue Setup
DESCRIPTION: Initial setup code importing Plot, D3, and data dependencies in a Vue component

LANGUAGE: javascript
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {shallowRef, onMounted} from "vue";
import aapl from "../data/aapl.ts";
import industries from "../data/bls-industry-unemployment.ts";
import penguins from "../data/penguins.ts";

const olympians = shallowRef([{weight: 31, height: 1.21, sex: "female"}, {weight: 170, height: 2.21, sex: "male"}]);

onMounted(() => {
  d3.csv("../data/athletes.csv", d3.autoType).then((data) => (olympians.value = data));
});
</script>

----------------------------------------

TITLE: Creating Stacked Area Chart with Reverse Option
DESCRIPTION: Demonstrates a stacked area chart using Plot, with configurable reverse and order options for stack layers.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    label: "Annual revenue (billions, adj.)",
    transform: (d) => d / 1000 // convert millions to billions
  },
  color: {legend: true},
  marks: [
    Plot.areaY(riaa, Plot.stackY({order: "appearance", reverse}, {x: "year", y: "revenue", z: "format", fill: "group"})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Creating a Horizontal Waffle Chart with Dynamic Data
DESCRIPTION: Shows how to create a horizontal waffle chart using waffleX with dynamically updated data.

LANGUAGE: javascript
CODE:
Plot.waffleX([apples], {y: ["apples"]}).plot({height: 240})

----------------------------------------

TITLE: Vue Setup with Observable Plot Dependencies
DESCRIPTION: Initial setup code importing necessary libraries and initializing reactive data for visualization components.

LANGUAGE: vue
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import * as topojson from "topojson-client";
import {computed, ref, shallowRef, onMounted} from "vue";
import penguins from "../data/penguins.ts";

const walmarts = shallowRef([]);
const us = shallowRef(null);
const nation = computed(() => us.value ? topojson.feature(us.value, us.value.objects.nation) : {type: null});

onMounted(() => {
  d3.tsv("../data/walmarts.tsv", d3.autoType).then((data) => (walmarts.value = data));
  d3.json("../data/us-counties-10m.json").then((data) => (us.value = data));
});
</script>

----------------------------------------

TITLE: Frame Mark with Faceted Plot
DESCRIPTION: Example showing frame usage with faceted scatter plots of penguin data, demonstrating conditional frame rendering.

LANGUAGE: javascript
CODE:
Plot.plot({
  grid: true,
  inset: 10,
  marks: [
    framed ? Plot.frame() : null,
    Plot.dot(penguins, {x: "culmen_length_mm", y: "culmen_depth_mm", fill: "#eee"}),
    Plot.dot(penguins, {x: "culmen_length_mm", y: "culmen_depth_mm", fx: "species"})
  ]
})

----------------------------------------

TITLE: Random Normal Distribution with Ticks
DESCRIPTION: Visualizes a random normal distribution using tickX marks with reduced opacity for better density perception.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {domain: [-4, 4]},
  marks: [
    Plot.tickX({length: 500}, {x: d3.randomNormal(), strokeOpacity: 0.2})
  ]
})

----------------------------------------

TITLE: Initializing Vue Component with Plot and D3 Dependencies
DESCRIPTION: Sets up a Vue component with imports for Plot, D3, and data sources. Defines reactive variables for stack options and data references.

LANGUAGE: javascript
CODE:
<script setup>

import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import alphabet from "../data/alphabet.ts";
import crimea from "../data/crimea.ts";
import {computed, ref, shallowRef, onMounted} from "vue";

const congress = shallowRef([]);
const offsets = ref("wiggle");
const offset = computed(() => offsets.value === "null" ? null : offsets.value);
const orders = ref("appearance");
const order = computed(() => orders.value === "null" ? null : orders.value);
const reverse = ref(true);
const riaa = shallowRef([]);
const survey = shallowRef([]);
const scheme = Plot.scale({color: {type: "categorical"}}).range;

onMounted(() => {
  d3.csv("../data/riaa-us-revenue.csv", d3.autoType).then((data) => (riaa.value = data));
  d3.csv("../data/survey.csv", d3.autoType).then((data) => (survey.value = data));
  d3.csv("../data/us-congress-2023.csv", d3.autoType).then((data) => (congress.value = data));
});

function Likert(responses) {
  const map = new Map(responses);
  return {
    order: Array.from(map.keys()),
    offset(I, X1, X2, Z) {
      for (const stacks of I) {
        for (const stack of stacks) {
          const k = d3.sum(stack, (i) => (X2[i] - X1[i]) * (1 - map.get(Z[i]))) / 2;
          for (const i of stack) {
            X1[i] -= k;
            X2[i] -= k;
          }
        }
      }
    }
  };
}

const likert = Likert([
  ["Strongly Disagree", -1],
  ["Disagree", -1],
  ["Neutral", 0],
  ["Agree", 1],
  ["Strongly Agree", 1]
]);

</script>

----------------------------------------

TITLE: Custom Tree Layout Function
DESCRIPTION: Implementation of a custom indented tree layout function that assigns x and y coordinates based on node depth and index.

LANGUAGE: javascript
CODE:
function indent() {
  return (root) => {
    root.eachBefore((node, i) => {
      node.y = node.depth;
      node.x = i;
    });
  };
}

----------------------------------------

TITLE: Initializing Data and Dependencies for Observable Plot
DESCRIPTION: Sets up reactive references and imports required libraries for Observable Plot visualizations. It also loads data from CSV and JSON files on component mount.

LANGUAGE: javascript
CODE:
<script setup>

import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import * as topojson from "topojson-client";
import {computed, ref, shallowRef, onMounted} from "vue";

const r = ref(4);
const diamonds = shallowRef([]);
const seattle = shallowRef([]);
const olympians = shallowRef([{weight: 31, height: 1.21, sex: "female"}, {weight: 170, height: 2.21, sex: "male"}]);
const povcalnet = shallowRef([]);
const us = shallowRef(null);
const counties = computed(() => us.value ? topojson.feature(us.value, us.value.objects.counties).features : []);
const countyboxes = computed(() => counties.value.map((d) => d3.geoBounds(d).flat()));
const bins = d3.bin()(d3.range(1000).map(d3.randomNormal.source(d3.randomLcg(42))()));

onMounted(() => {
  d3.csv("../data/athletes.csv", d3.autoType).then((data) => (olympians.value = data));
  d3.csv("../data/diamonds.csv", d3.autoType).then((data) => (diamonds.value = data));
  d3.csv("../data/seattle-weather.csv", d3.autoType).then((data) => (seattle.value = data));
  d3.csv("../data/povcalnet.csv", d3.autoType).then((data) => (povcalnet.value = data));
  d3.json("../data/us-counties-10m.json").then((data) => (us.value = data));
});

</script>

----------------------------------------

TITLE: Vue Setup with Observable Plot and D3
DESCRIPTION: Initial setup code importing Observable Plot, D3, and Vue components, along with data loading for presidential data.

LANGUAGE: vue
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {shallowRef, onMounted} from "vue";
import penguins from "../data/penguins.ts";

const presidents = shallowRef([]);

onMounted(() => {
  d3.csv("../data/us-president-favorability.csv", d3.autoType).then((data) => (presidents.value = data));
});
</script>

----------------------------------------

TITLE: Creating Stacked Horizontal Bar with Text Labels
DESCRIPTION: Demonstrates how to create a stacked horizontal bar chart with text labels using the Plot library, showing relative frequency of English letters.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {percent: true},
  marks: [
    Plot.barX(alphabet, Plot.stackX({x: "frequency", fillOpacity: 0.3, inset: 0.5})),
    Plot.textX(alphabet, Plot.stackX({x: "frequency", text: "letter", inset: 0.5})),
    Plot.ruleX([0, 1])
  ]
})

----------------------------------------

TITLE: Creating a Histogram with Rounded Left Corners
DESCRIPTION: Shows how to create a histogram with rounded left corners using the rectY mark. It demonstrates the use of rx1y2 and rx1y1 options for rounding specific corners.

LANGUAGE: javascript
CODE:
Plot.plot({
  color: {legend: true},
  marks: [
    Plot.rectY(olympians, Plot.binX({y: "count"}, {x: "weight", fill: "sex", rx1y2: 10, rx1y1: -10, clip: "frame"})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Vue Component Setup with Plot and D3
DESCRIPTION: Initial setup code for a Vue component that imports Observable Plot and D3.js libraries, and initializes data for tree visualization.

LANGUAGE: vue
CODE:
<script setup>

import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {shallowRef, onMounted} from "vue";

const flare = shallowRef([{name: "empty"}]);

const gods = [
  "Chaos/Gaia/Mountains",
  "Chaos/Gaia/Pontus",
  "Chaos/Gaia/Uranus",
  "Chaos/Eros",
  "Chaos/Erebus",
  "Chaos/Tartarus"
];

onMounted(() => {
  d3.csv("../data/flare.csv", d3.autoType).then((data) => (flare.value = data));
});
</script>

----------------------------------------

TITLE: Styled Frame Mark Example
DESCRIPTION: Example showing how to style a frame mark with custom stroke color.

LANGUAGE: javascript
CODE:
Plot.frame({stroke: "red"}).plot({x: {domain: [0, 1], grid: true}})

----------------------------------------

TITLE: Importing Observable Plot and D3 Libraries in JavaScript
DESCRIPTION: This snippet shows how to import the necessary libraries for using Observable Plot and D3, as well as loading a dataset.

LANGUAGE: javascript
CODE:
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import penguins from "../data/penguins.ts";

----------------------------------------

TITLE: Defining Tabular Data in JavaScript
DESCRIPTION: Demonstrates how to represent tabular data as an array of objects in JavaScript, using Apple stock price data as an example.

LANGUAGE: javascript
CODE:
aapl = [
  {Date: new Date("2013-05-13"), Open: 64.501427, High: 65.414284, Low: 64.500000, Close: 64.962860, Volume: 79237200},
  {Date: new Date("2013-05-14"), Open: 64.835716, High: 65.028572, Low: 63.164288, Close: 63.408573, Volume: 111779500},
  {Date: new Date("2013-05-15"), Open: 62.737144, High: 63.000000, Low: 60.337143, Close: 61.264286, Volume: 185403400},
  {Date: new Date("2013-05-16"), Open: 60.462856, High: 62.549999, Low: 59.842857, Close: 62.082859, Volume: 150801000},
  {Date: new Date("2013-05-17"), Open: 62.721428, High: 62.869999, Low: 61.572857, Close: 61.894287, Volume: 106976100}
]

----------------------------------------

TITLE: Vue Setup Configuration for Bollinger Plot
DESCRIPTION: Initial Vue setup script importing required dependencies and defining reactive variables for Bollinger band parameters.

LANGUAGE: vue
CODE:
<script setup>

import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {ref} from "vue";
import aapl from "../data/aapl.ts";

const n = ref(20);
const k = ref(2);

</script>

----------------------------------------

TITLE: Color-mapped Grid Lines
DESCRIPTION: Creates grid lines with colors mapped to their tick values using identity mapping.

LANGUAGE: javascript
CODE:
Plot.gridX(d3.range(101), {stroke: Plot.identity, strokeOpacity: 1}).plot()

----------------------------------------

TITLE: Creating a CrosshairY with API in JavaScript
DESCRIPTION: This snippet demonstrates the usage of the crosshairY function in the Plot API. It creates a crosshair for AAPL stock data, focusing on the y-axis (Close price).

LANGUAGE: javascript
CODE:
Plot.crosshairY(aapl, {x: "Date", y: "Close"})

----------------------------------------

TITLE: Basic Tree Plot Implementation
DESCRIPTION: Example of creating a simple tree diagram using Plot.plot with gods data array.

LANGUAGE: javascript
CODE:
Plot.plot({
  axis: null,
  height: 100,
  margin: 10,
  marginLeft: 40,
  marginRight: 120,
  marks: [
    Plot.tree(gods, {textStroke: "var(--vp-c-bg)"})
  ]
})

----------------------------------------

TITLE: Simplified Bollinger Band with Numeric Array
DESCRIPTION: Basic implementation using array of close prices instead of complete dataset.

LANGUAGE: javascript
CODE:
Plot.bollingerY(aapl.map((d) => d.Close)).plot()

----------------------------------------

TITLE: Initializing Vue Component with D3 and Plot
DESCRIPTION: Sets up a Vue component that loads stock data using D3 and prepares it for plotting

LANGUAGE: vue
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {shallowRef, onMounted} from "vue";
import aapl from "../data/aapl.ts";

const stocks = shallowRef([]);

onMounted(() => {
  Promise.all([
    d3.csv("../data/amzn.csv", d3.autoType),
    d3.csv("../data/goog.csv", d3.autoType),
    d3.csv("../data/ibm.csv", d3.autoType)
  ]).then((datas) => {
    stocks.value = d3.zip(["AAPL", "AMZN", "GOOG", "IBM"], [aapl].concat(datas)).flatMap(([Symbol, data]) => data.map((d) => ({Symbol, ...d})));
  });
});
</script>

----------------------------------------

TITLE: Applying PointerX Transform to Time Series Data in Observable Plot
DESCRIPTION: Shows how to use the pointerX transform for a time series chart of stock data, focusing on the x-axis for interaction.

LANGUAGE: javascript
CODE:
Plot.tip(aapl, Plot.pointerX({x: "Date", y: "Close"}))

----------------------------------------

TITLE: Creating a Stacked Percentage Bar Chart
DESCRIPTION: This example shows how to create a stacked percentage bar chart using the stack transform. It includes text labels and demonstrates how to use insets and opacity.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {percent: true},
  marks: [
    Plot.barX(alphabet, Plot.stackX({x: "frequency", fillOpacity: 0.3, inset: 0.5})),
    Plot.textX(alphabet, Plot.stackX({x: "frequency", text: "letter", inset: 0.5})),
    Plot.ruleX([0, 1])
  ]
})

----------------------------------------

TITLE: Applying Different Pointer Modes to a Line Chart in Observable Plot
DESCRIPTION: Shows how to use different pointer modes (pointer, pointerX, pointerY) with a line chart of stock data.

LANGUAGE: javascript
CODE:
Plot.lineY(aapl, {x: "Date", y: "Close", tip: "{{linetip}}"}).plot()

----------------------------------------

TITLE: Applying Different Pointer Modes to a Line Chart in Observable Plot
DESCRIPTION: Shows how to use different pointer modes (pointer, pointerX, pointerY) with a line chart of stock data.

LANGUAGE: javascript
CODE:
Plot.lineY(aapl, {x: "Date", y: "Close", tip: "{{linetip}}"}).plot()

----------------------------------------

TITLE: Using Pointer Transform with Custom Target Positions in Observable Plot
DESCRIPTION: Demonstrates how to use px and py channels to specify custom pointing target positions, showing focused data in a text label.

LANGUAGE: javascript
CODE:
Plot.plot({
  height: 160,
  y: {axis: "right", grid: true, nice: true},
  marks: [
    Plot.lineY(aapl, {x: "Date", y: "Close"}),
    Plot.ruleX(aapl, Plot.pointerX({x: "Date", py: "Close", stroke: "red"})),
    Plot.dot(aapl, Plot.pointerX({x: "Date", y: "Close", stroke: "red"})),
    Plot.text(aapl, Plot.pointerX({px: "Date", py: "Close", dy: -17, frameAnchor: "top-left", fontVariant: "tabular-nums", text: (d) => [`Date ${Plot.formatIsoDate(d.Date)}`, `Close ${d.Close.toFixed(2)}`].join("   ")}))
  ]
})

----------------------------------------

TITLE: Creating a Simple Area Chart with Plot.areaY
DESCRIPTION: Demonstrates how to create a basic area chart using the areaY constructor with date and close price data.

LANGUAGE: javascript
CODE:
Plot.areaY(aapl, {x: "Date", y: "Close"}).plot()

----------------------------------------

TITLE: Basic ShiftX Transform Example
DESCRIPTION: Basic example of using shiftX transform with a 7-day interval, demonstrating how to shift date values along the x-axis.

LANGUAGE: javascript
CODE:
Plot.shiftX("7 days", {x: "Date", y: "Close"})

----------------------------------------

TITLE: Multi-Line Stock Price Comparison
DESCRIPTION: Plot showing comparison of Google and Apple stock prices using multiple line marks with shared scales.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(goog, {x: "Date", y: "Close", stroke: "red"}),
    Plot.lineY(aapl, {x: "Date", y: "Close", stroke: "blue"})
  ]
})

----------------------------------------

TITLE: Configuring Vue Component Mounting
DESCRIPTION: Vue setup script that handles dynamic text replacement in the hero section of the documentation home page.

LANGUAGE: javascript
CODE:
import {onMounted} from "vue";

onMounted(() => {
  const p = document.querySelector(".VPHero .text");
  const s = document.querySelector("#hero-text");
  if (!p || !s) return;
  while (p.lastChild) p.lastChild.remove();
  p.append(s);
});

----------------------------------------

TITLE: Temperature Anomaly Time Series Data
DESCRIPTION: Raw temperature anomaly measurements presented in tabular format with yearly records from 1850-2020. Each row contains multiple columns of temperature deviation values.

LANGUAGE: plaintext
CODE:
1850   -0.373   -0.425   -0.339   -0.502   -0.243   -0.536   -0.210   -0.515   -0.238   -0.591   -0.162
1851   -0.218   -0.274   -0.184   -0.350   -0.086   -0.368   -0.068   -0.365   -0.081   -0.429   -0.016
[...additional rows omitted for brevity...]
2019    0.736    0.700    0.776    0.720    0.753    0.656    0.817    0.693    0.781    0.644    0.829
2020    0.794    0.760    0.837    0.777    0.811    0.714    0.873    0.752    0.842    0.705    0.889

----------------------------------------

TITLE: Initializing Basic Plot with Text in JavaScript
DESCRIPTION: Creates a simple plot with a frame and text mark using Observable Plot. This example demonstrates the basic structure of creating a plot with marks.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.frame(),
    Plot.text(["Hello, world!"], {frameAnchor: "middle"})
  ]
})

----------------------------------------

TITLE: Vue Setup with Plot Dependencies
DESCRIPTION: Initial Vue setup code importing Plot, D3, and defining reactive state variables for the visualization example.

LANGUAGE: javascript
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {ref, shallowRef, onMounted} from "vue";
import gistemp from "../data/gistemp.ts";

const intervaled = ref(true);
const padding = ref(0.1);
const align = ref(0.5);
const radius = ref(8);
const schemeq = ref("turbo");
const schemed = ref("rdbu");
const schemeo = ref("Observable10");
const interpolateq = ref("rgb");
const anomaly = gistemp.map((d) => d.Anomaly);
const aapl = shallowRef([]);
const goog = shallowRef([]);
const sftemp = shallowRef([]);

onMounted(() => {
  d3.csv("../data/aapl.csv", d3.autoType).then((data) => (aapl.value = data));
  d3.csv("../data/goog.csv", d3.autoType).then((data) => (goog.value = data));
  d3.csv("../data/sf-temperatures.csv", d3.autoType).then((data) => (sftemp.value = data));
});
</script>

----------------------------------------

TITLE: Running Mocha in Watch Mode for Observable Plot
DESCRIPTION: This command runs Mocha in watch mode for a specific test file, automatically re-running tests when changes are made.

LANGUAGE: bash
CODE:
yarn run mocha --conditions=mocha --parallel --watch test/marks/bar-test.js

----------------------------------------

TITLE: Initializing Plot with Vue Setup
DESCRIPTION: Vue setup code that imports required dependencies and initializes sample Olympic athlete data. Sets up data fetching using d3.csv and computes paths for navigation.

LANGUAGE: javascript
CODE:
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {computed, onMounted, shallowRef} from "vue";
import {useData} from "vitepress";
import PlotRender from "./components/PlotRender.js";

const olympians = shallowRef([
  {weight: 31, height: 1.21, sex: "female"},
  {weight: 170, height: 2.21, sex: "male"}
]);

onMounted(() => {
  d3.csv("./data/athletes.csv", d3.autoType).then((data) => (olympians.value = data));
});

----------------------------------------

TITLE: Accessing Scale Information from Plot in Observable Plot
DESCRIPTION: Shows how to retrieve and inspect scale information from a rendered plot.

LANGUAGE: javascript
CODE:
const plot = Plot.plot(options); // render a plot
const color = plot.scale("color"); // get the color scale
console.log(color.range); // inspect the scale's range

----------------------------------------

TITLE: Generating Test Coverage Report for Observable Plot
DESCRIPTION: This command generates a test coverage report using c8, helping identify which lines of code are not covered by tests.

LANGUAGE: bash
CODE:
yarn test:coverage

----------------------------------------

TITLE: Creating a CrosshairX with API in JavaScript
DESCRIPTION: This example shows how to use the crosshairX function in the Plot API for time series data. It creates a crosshair for AAPL stock data, focusing on the x-axis (Date).

LANGUAGE: javascript
CODE:
Plot.crosshairX(aapl, {x: "Date", y: "Close"})

----------------------------------------

TITLE: Adding Title, Subtitle, and Caption to Plot in Observable Plot
DESCRIPTION: Demonstrates how to add a title, subtitle, and caption to a plot, along with custom text content.

LANGUAGE: javascript
CODE:
Plot.plot({
  title: "For charts, an informative title",
  subtitle: "Subtitle to follow with additional context",
  caption: "Figure 1. A chart with a title, subtitle, and caption.",
  marks: [
    Plot.frame(),
    Plot.text(["Titles, subtitles, captions, and annotations assist inter­pretation by telling the reader what's interesting. Don't make the reader work to find what you already know."], {lineWidth: 30, frameAnchor: "middle"})
  ]
})

----------------------------------------

TITLE: Formatting Code with Prettier for Observable Plot
DESCRIPTION: This command runs Prettier to format all files in the Observable Plot project, ensuring consistent code style.

LANGUAGE: bash
CODE:
yarn prettier --write .

----------------------------------------

TITLE: Creating a One-Dimensional Crosshair Plot in JavaScript
DESCRIPTION: This snippet demonstrates how to create a plot with a one-dimensional crosshair by specifying only the x-axis. It uses penguin body mass data to create a tick plot with a crosshairX.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.tickX(penguins, {x: "body_mass_g"}),
    Plot.crosshairX(penguins, {x: "body_mass_g"})
  ]
})

----------------------------------------

TITLE: Plot.js Line Mark Example
DESCRIPTION: Example showing how to create a line plot visualization using Plot.js

LANGUAGE: javascript
CODE:
Plot.lineY(gistemp, {x: "Date", y: "Anomaly"}).plot()

----------------------------------------

TITLE: Data Loading with D3.js
DESCRIPTION: Loads geographic data from various sources using D3.js fetch utilities and processes it into the required format.

LANGUAGE: javascript
CODE:
onMounted(() => {
  d3.json("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.geojson").then((data) => (earthquakes.value = data));
  d3.json("../data/countries-110m.json").then((data) => (world.value = data));
  d3.tsv("../data/walmarts.tsv", d3.autoType).then((data) => (walmarts.value = {type: "FeatureCollection", features: data.map((d) => ({type: "Feature", properties: {date: d.date}, geometry: {type: "Point", coordinates: [d.longitude, d.latitude]}})))}));
  Promise.all([
    d3.json("../data/us-counties-10m.json"),
    d3.csv("../data/us-county-unemployment.csv")
  ]).then(([_us, _unemployment]) => {
    const map = new Map(_unemployment.map((d) => [d.id, +d.rate]));
    _us.objects.counties.geometries.forEach((g) => (g.properties.unemployment = map.get(g.id)));
    us.value = _us;
  });
});

----------------------------------------

TITLE: Customizing a Standalone Color Ramp Legend in Plot.js
DESCRIPTION: This snippet shows how to create a customized standalone color ramp legend with increased width. It uses Plot.legend() with additional options for customization.

LANGUAGE: javascript
CODE:
Plot.legend({width: 320, color: {type: "linear"}})

----------------------------------------

TITLE: Data Loading with D3
DESCRIPTION: Implementation of data loading using D3.js, including CSV and JSON parsing with type conversion and data transformation.

LANGUAGE: javascript
CODE:
onMounted(() => {
  d3.text("../data/beagle.csv").then((text) => (beagle.value = d3.csvParseRows(text).map(d3.autoType)));
  d3.csv("../data/bls-metro-unemployment.csv", d3.autoType).then((data) => (bls.value = data));
  d3.json("../data/countries-110m.json").then((data) => (world.value = data));
  d3.csv("../data/us-population-state-age.csv", d3.autoType).then((data) => {
    const ages = data.columns.slice(1);
    stateage.value = Object.assign(ages.flatMap((age) => data.map((d) => ({state: d.name, age, population: d[age]}))), {ages});
  });
  Promise.all([
    d3.csv("../data/amzn.csv", d3.autoType),
    d3.csv("../data/goog.csv", d3.autoType),
    d3.csv("../data/ibm.csv", d3.autoType)
  ]).then((datas) => {
    stocks.value = d3.zip(["AAPL", "AMZN", "GOOG", "IBM"], [aapl].concat(datas)).flatMap(([Symbol, data]) => data.map((d) => ({Symbol, ...d})));
  });
});

----------------------------------------

TITLE: Creating a Diverging Color Scatterplot with Legend in Plot.js
DESCRIPTION: This example shows how to create a scatterplot with a diverging color scale and legend for GISTEMP data. It uses a custom color scheme and includes a horizontal rule at y=0.

LANGUAGE: javascript
CODE:
Plot.plot({
  color: {
    scheme: "BuRd",
    legend: true
  },
  marks: [
    Plot.ruleY([0]),
    Plot.dot(gistemp, {x: "Date", y: "Anomaly", stroke: "Anomaly"})
  ]
})

----------------------------------------

TITLE: Initializing a Local Time Interval in JavaScript
DESCRIPTION: This snippet demonstrates how to create a local time interval with a specified period using the timeInterval function.

LANGUAGE: javascript
CODE:
Plot.timeInterval("2 days")

----------------------------------------

TITLE: Creating Stacked Area Chart with Plot
DESCRIPTION: Demonstrates how to create a stacked area chart using the Plot library, showing Crimean War casualties data.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {grid: true},
  color: {legend: true},
  marks: [
    Plot.areaY(crimea, {x: "date", y: "deaths", fill: "cause"}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Vue Component Setup with Plot Dependencies
DESCRIPTION: Initial setup code for a Vue.js component that imports Observable Plot, D3, and data dependencies while initializing reactive data for Olympic athletes.

LANGUAGE: vue
CODE:
<script setup>

import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {shallowRef, onMounted} from "vue";
import anscombe from "../data/anscombe.ts";
import barley from "../data/barley.ts";
import industries from "../data/bls-industry-unemployment.ts";
import penguins from "../data/penguins.ts";

const olympians = shallowRef([
  {weight: 31, height: 1.21, sex: "female"},
  {weight: 170, height: 2.21, sex: "male"}
]);

const scheme = Plot.scale({color: {type: "categorical"}}).range;

onMounted(() => {
  d3.csv("../data/athletes.csv", d3.autoType).then((data) => (olympians.value = data));
});

</script>

----------------------------------------

TITLE: Vue Component Setup with Plot and D3
DESCRIPTION: Initial setup code for a Vue component that imports Plot and D3 libraries, and initializes reactive variables for window transform demonstration.

LANGUAGE: javascript
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {ref, shallowRef, onMounted} from "vue";
import sftemp from "../data/sf-temperatures.ts";

const k = ref(7);
const loss = ref(0.01);
const anchor = ref("end");
const strict = ref(true);
const reduce = ref("mean");
const bls = shallowRef([]);

onMounted(() => {
  d3.csv("../data/bls-metro-unemployment.csv", d3.autoType).then((data) => (bls.value = data));
});
</script>

----------------------------------------

TITLE: Plotting Quantile-Mapped Apple Stock Volume with Window Transform
DESCRIPTION: Visualizes Apple stock volume data mapped to quantiles and smoothed with a 30-day rolling mean using map and window transforms.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.ruleY([0, 1]),
    Plot.lineY(aapl, Plot.mapY("quantile", {x: "Date", y: "Volume", strokeOpacity: 0.2})),
    Plot.lineY(aapl, Plot.windowY(30, Plot.mapY("quantile", {x: "Date", y: "Volume"})))
  ]
})

----------------------------------------

TITLE: Displaying Gods Array in Vue.js Template
DESCRIPTION: Shows how to display the gods array in a Vue.js template using JSON.stringify for formatting.

LANGUAGE: javascript
CODE:
gods = {{JSON.stringify(gods, null, 2)}}

----------------------------------------

TITLE: Circular Clipped Images with Presidential Portraits
DESCRIPTION: Demonstrates circular image clipping using the r option and preserveAspectRatio for portrait positioning.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {inset: 20, label: "First inauguration date"},
  y: {insetTop: 4, grid: true, label: "Any opinion (%)", tickFormat: "+f"},
  marks: [
    Plot.ruleY([0]),
    Plot.image(presidents, {
      x: "First Inauguration Date",
      y: (d) => d["Very Favorable %"] + d["Somewhat Favorable %"] + d["Very Unfavorable %"] + d["Somewhat Unfavorable %"],
      src: "Portrait URL",
      r: 20,
      preserveAspectRatio: "xMidYMin slice",
      title: "Name"
    })
  ]
})

----------------------------------------

TITLE: Creating Ribbon Chart with Value-based Order
DESCRIPTION: Shows how to create a ribbon chart using Plot, where stack layers are ordered by value independently for each stack.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    label: "Annual revenue (billions, adj.)",
    transform: (d) => d / 1000 // convert millions to billions
  },
  marks: [
    Plot.areaY(riaa, {x: "year", y: "revenue", z: "format", fill: "group", order: "value"}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Generating a Scatterplot with Symbol and Color Legend in Plot.js
DESCRIPTION: This snippet creates a scatterplot of penguin data with both symbol and color encoding for species. It demonstrates how to use redundant encoding for better accessibility.

LANGUAGE: javascript
CODE:
Plot.plot({
  grid: true,
  x: {label: "Body mass (g)"},
  y: {label: "Flipper length (mm)"},
  symbol: {legend: true},
  marks: [
    Plot.dot(penguins, {x: "body_mass_g", y: "flipper_length_mm", stroke: "species", symbol: "species"})
  ]
})

----------------------------------------

TITLE: Line Chart with Sort Transform for Highlighting
DESCRIPTION: Example showing unemployment rate lines with Michigan data highlighted using sort transform to control line overlap ordering.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    label: "Unemployment (%)"
  },
  color: {
    domain: [false, true],
    range: ["#ccc", "red"]
  },
  marks: [
    Plot.ruleY([0]),
    Plot.line(bls, {
      x: "date",
      y: "unemployment",
      z: "division",
      sort: (d) => /, MI /.test(d.division),
      stroke: (d) => /, MI /.test(d.division)
    })
  ]
})

----------------------------------------

TITLE: Visualizing Small Grid Data with Text and Contours in Observable Plot
DESCRIPTION: Demonstrates contour visualization on a small 10x10 grid, combining text labels with filled contours to show the underlying data structure.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.contour(grid.values, {
      width: grid.width,
      height: grid.height,
      fill: Plot.identity,
      interval: 5
    }),
    Plot.text(grid.values, {
      text: Plot.identity,
      fill: "white",
      x: (d, i) => i % grid.width + 0.5,
      y: (d, i) => Math.floor(i / grid.width) + 0.5
    })
  ]
})

----------------------------------------

TITLE: Vue Component Setup with Plot.js and D3
DESCRIPTION: Initial setup code for a Vue component that imports Plot.js, D3, and TopoJSON libraries and initializes reactive data for geographic visualization.

LANGUAGE: javascript
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import * as topojson from "topojson-client";
import {computed, ref, shallowRef, onMounted} from "vue";
import cars from "../data/cars.ts";

const sorted = ref(true);
const order = ref("ascending");
const bls = shallowRef([]);
const us = shallowRef(null);
const statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states) : {type: null});
const counties = computed(() => us.value ? topojson.feature(us.value, us.value.objects.counties).features : []);

onMounted(() => {
  d3.csv("../data/bls-metro-unemployment.csv", d3.autoType).then((data) => (bls.value = data));
  Promise.all([
    d3.json("../data/us-counties-10m.json"),
    d3.csv("../data/us-county-population.csv")
  ]).then(([_us, _population]) => {
    const map = new Map(_population.map((d) => [d.state + d.county, +d.population]));
    _us.objects.counties.geometries.forEach((g) => (g.properties.population = map.get(g.id)));
    us.value = _us;
  });
});
</script>

----------------------------------------

TITLE: Month Formatting with Locale
DESCRIPTION: Formats month numbers (0-11) according to specified locale and format (2-digit, numeric, narrow, short, or long).

LANGUAGE: javascript
CODE:
Plot.formatMonth("es-MX", "long")(0) // "enero"

----------------------------------------

TITLE: Basic ShiftY Transform Example
DESCRIPTION: Example of using shiftY transform with a 7-day interval, demonstrating how to shift date values along the y-axis.

LANGUAGE: javascript
CODE:
Plot.shiftY("7 days", {y: "Date", x: "Close"})

----------------------------------------

TITLE: Creating a Histogram with Automatic Binning
DESCRIPTION: Demonstrates how to create a histogram using the rectY mark with automatic binning. It uses the bin transform to bin the data on the fly.

LANGUAGE: javascript
CODE:
Plot.rectY(d3.range(1000).map(d3.randomNormal()), Plot.binX()).plot()

----------------------------------------

TITLE: DifferenceY Plot with ShiftX Transform
DESCRIPTION: Implementation of a difference plot showing price changes over time using Plot.differenceY with shiftX transform. The visualization highlights price increases in green and decreases in blue.

LANGUAGE: javascript
CODE:
Plot.differenceY(aapl, Plot.shiftX("{{shift}} days", {x: "Date", y: "Close"})).plot({y: {grid: true}})

----------------------------------------

TITLE: Plotting State Labels with Centroid Transform
DESCRIPTION: Creates a map visualization with state labels using Plot's centroid transform and text mark with Albers USA projection.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: "albers-usa",
  marks: [
    Plot.geo(statemesh),
    Plot.text(states, Plot.centroid({text: (d) => d.properties.name, fill: "currentColor", stroke: "var(--vp-c-bg)"}))
  ]
})

----------------------------------------

TITLE: Initializing Vue component with Observable Plot and D3
DESCRIPTION: Sets up a Vue component with imports for Observable Plot, D3, and local data sources. It also initializes a reactive reference for filtering.

LANGUAGE: vue
CODE:
<script setup>

import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {computed, ref, shallowRef, onMounted} from "vue";
import alphabet from "../data/alphabet.ts";
import metros from "../data/metros.ts";

const filtered = ref(true);

</script>

----------------------------------------

TITLE: Creating a Bar Chart with Ordinal Scale in Observable Plot
DESCRIPTION: This example demonstrates creating a bar chart of Apple stock daily trade volume using an ordinal (band) scale for the x-axis. It shows how this can lead to crowded labels and potential gaps in data being less noticeable.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginBottom: 80,
  x: {type: "band"}, // ⚠️ not utc
  y: {
    transform: (d) => d / 1e6,
    label: "Daily trade volume (millions)"
  },
  marks: [
    Plot.barY(aapl.slice(-40), {x: "Date", y: "Volume"}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Initializing Vue Component with Geographic Data Dependencies
DESCRIPTION: Sets up a Vue component with Observable Plot, D3, and TopoJSON dependencies. Initializes reactive references for U.S. geographic data and computes derived geographic features.

LANGUAGE: vue
CODE:
<script setup>
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import * as topojson from "topojson-client";
import {computed, shallowRef, onMounted} from "vue";

const us = shallowRef(null);
const statemesh = computed(() => us.value ? topojson.mesh(us.value, us.value.objects.states) : {type: null});
const states = computed(() => us.value ? topojson.feature(us.value, us.value.objects.states).features : []);
const counties = computed(() => us.value ? topojson.feature(us.value, us.value.objects.counties).features : []);
const nation = computed(() => us.value ? topojson.feature(us.value, us.value.objects.nation) : []);

onMounted(() => {
  d3.json("../data/us-counties-10m.json").then((data) => (us.value = data));
});
</script>

----------------------------------------

TITLE: Importing Plot and D3 Libraries in JavaScript
DESCRIPTION: This snippet shows how to import the necessary libraries (Plot and D3) and data for creating plots in a Vue.js setup script.

LANGUAGE: javascript
CODE:
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import aapl from "../data/aapl.ts";

----------------------------------------

TITLE: Creating a Cumulative Distribution Plot with binX Transform in Observable Plot
DESCRIPTION: This example shows how to use the cumulative option in the binX transform to create a cumulative distribution plot. The cumulative value can be set to +1 or -1 to change the direction of accumulation.

LANGUAGE: javascript
CODE:
Plot.plot({
  marginLeft: 60,
  y: {grid: true},
  marks: [
    Plot.rectY(olympians, Plot.binX({y: "count"}, {x: "weight", cumulative})),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Creating a bar chart with pre-filtered data using Observable Plot
DESCRIPTION: Shows how to create a bar chart by first filtering the data array before passing it to Plot. This approach affects both the displayed bars and the scale domains.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.barY(
      alphabet.filter((d) => /[aeiouy]/i.test(d.letter)),
      {x: "letter", y: "frequency"}
    )
  ]
})

----------------------------------------

TITLE: Explicit Tip Mark and Pointer Transform in Plot.js
DESCRIPTION: This code shows how to explicitly use the tip mark with a pointer transform for creating an interactive chart in Plot.js.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {grid: true},
  marks: [
    Plot.lineY(aapl, {x: "Date", y: "Close"}),
    Plot.tip(aapl, Plot.pointerX({x: "Date", y: "Close"}))
  ]
})

----------------------------------------

TITLE: Layering Bar Charts with Different Colors in Observable Plot
DESCRIPTION: Shows how to layer two bar charts with different colors and slight offsets to create a visual effect.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {padding: 0.4},
  marks: [
    Plot.barY(alphabet, {x: "letter", y: "frequency", dx: 2, dy: 2}),
    Plot.barY(alphabet, {x: "letter", y: "frequency", fill: "green", dx: -2, dy: -2})
  ]
})

----------------------------------------

TITLE: Random Normal Distribution Rule Plot
DESCRIPTION: Creates a visualization of a random normal distribution using vertical rules with opacity.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {domain: [-4, 4]},
  marks: [
    Plot.ruleX({length: 500}, {x: d3.randomNormal(), strokeOpacity: 0.2})
  ]
})

----------------------------------------

TITLE: Using UTC Day Interval Ceil Method in JavaScript
DESCRIPTION: This snippet demonstrates the ceil method of a UTC day interval to find the next midnight for a given date.

LANGUAGE: javascript
CODE:
Plot.utcInterval("day").ceil(new Date("2013-04-12T12:34:56Z")) // 2013-04-13

----------------------------------------

TITLE: Basic Rule Mark with Zero Line
DESCRIPTION: Demonstrates creating a basic plot with a horizontal red rule at y=0 and a line chart overlay.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true
  },
  marks: [
    Plot.ruleY([0], {stroke: "red"}),
    Plot.line(aapl, {x: "Date", y: "Close"})
  ]
})

----------------------------------------

TITLE: Creating Dynamic Stacked Area Chart with Order Option
DESCRIPTION: Shows how to create a dynamic stacked area chart using Plot, with a configurable order option for stack layers.

LANGUAGE: javascript
CODE:
Plot.plot({
  y: {
    grid: true,
    label: "Annual revenue (billions, adj.)",
    transform: (d) => d / 1000 // convert millions to billions
  },
  color: {legend: true},
  marks: [
    Plot.areaY(riaa, {x: "year", y: "revenue", z: "format", fill: "group", order}),
    Plot.ruleY([0])
  ]
})

----------------------------------------

TITLE: Using linearRegressionY for Standard Regression
DESCRIPTION: Shows the usage of linearRegressionY for standard linear regression, where y is the dependent variable and x is the independent variable.

LANGUAGE: javascript
CODE:
Plot.linearRegressionY(mtcars, {x: "wt", y: "hp"})

----------------------------------------

TITLE: Implementing GeoJSON Clipping with World Airports Visualization
DESCRIPTION: Demonstrates how to use the clip mark option with GeoJSON objects to create a Voronoi mesh of world airports clipped to land boundaries. Uses orthographic projection and combines multiple plot marks including dots, voronoi mesh, sphere, and geo marks.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: {type: "orthographic", rotate: [110, -50]},
  marks: [
    Plot.dot(airports, {x: "longitude", y: "latitude", fill: "red", r: 1}),
    Plot.voronoiMesh(airports, {x: "longitude", y: "latitude", clip: land}),
    Plot.sphere(),
    Plot.geo(land)
  ]
})

----------------------------------------

TITLE: Creating a Grouped Difference Plot with Plot
DESCRIPTION: Demonstrates how to create a grouped difference plot using the group transform and find reducer. This example compares daily minimum temperatures between San Francisco and San Jose, applying a 14-day moving average.

LANGUAGE: javascript
CODE:
Plot.plot({
  x: {tickFormat: "%b"},
  y: {grid: true},
  marks: [
    Plot.ruleY([32]),
    Plot.differenceY(
      temperature,
      Plot.windowY(
        14,
        Plot.groupX(
          {
            y1: Plot.find((d) => d.station === "SJ"),
            y2: Plot.find((d) => d.station === "SF")
          },
          {
            x: "date",
            y: "tmin",
            tip: true
          }
        )
      )
    )
  ]
})

----------------------------------------

TITLE: Vector Map with Election Data
DESCRIPTION: Creates a vector map showing county-level vote margins in the 2020 U.S. presidential election using arrows.

LANGUAGE: javascript
CODE:
Plot.plot({
  width: 975,
  projection: "albers-usa",
  marks: [
    Plot.geo(statemesh, {strokeOpacity: 0.25}),
    Plot.geo(nation),
    Plot.vector(elections, {
      filter: (d) => d.votes > 0,
      anchor: "start",
      x: (d) => centroids.get(d.fips)?.[0],
      y: (d) => centroids.get(d.fips)?.[1],
      sort: (d) => Math.abs(d.results_trumpd - d.results_bidenj),
      stroke: (d) => (d.results_trumpd > d.results_bidenj ? "red" : "blue"),
      length: (d) => Math.sqrt(Math.abs(d.margin2020 * d.votes)),
      rotate: (d) => (d.results_bidenj < d.results_trumpd ? 60 : -60)
    })
  ]
})

----------------------------------------

TITLE: Initializing Data with Vue and D3 for Plot Visualization
DESCRIPTION: Sets up reactive data references and loads CSV data using D3 for use in Plot visualizations. This snippet initializes data for AAPL stock prices, global temperature anomalies, TSA traveler numbers, and SF-SJ temperatures.

LANGUAGE: javascript
CODE:
<script setup>

import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {computed, shallowRef, onMounted} from "vue";

const aapl = shallowRef([]);
const gistemp = shallowRef([]);
const tsa = shallowRef([{Date: new Date("2020-01-01")}]);
const temperature = shallowRef([{date: new Date("2020-01-01")}]);

onMounted(() => {
  d3.csv("../data/aapl.csv", d3.autoType).then((data) => (aapl.value = data));
  d3.csv("../data/gistemp.csv", d3.autoType).then((data) => (gistemp.value = data));
  d3.csv("../data/tsa.csv",d3.autoType).then((data) => (tsa.value = data));
  d3.csv("../data/sf-sj-temperatures.csv", d3.autoType).then((data) => (temperature.value = data.filter((d) => d.date.getUTCFullYear() === 2020)));
});

</script>

----------------------------------------

TITLE: Orthographic Projection with Graticule
DESCRIPTION: Demonstrates use of orthographic projection with graticule and sphere marks to create a global map view.

LANGUAGE: javascript
CODE:
Plot.plot({
  height: 640,
  inset: 1,
  projection: {type: "orthographic", rotate: [100, -30]},
  marks: [
    Plot.graticule(),
    Plot.geo(land, {fill: "currentColor"}),
    Plot.sphere()
  ]
})

----------------------------------------

TITLE: Creating a Scatter Plot with Pointer Transform in Observable Plot
DESCRIPTION: Demonstrates using the pointer transform to show details on hover in a scatter plot of penguin data.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.dot(penguins, Plot.pointer({x: "culmen_length_mm", y: "culmen_depth_mm", fill: "red", r: 8})),
    Plot.dot(penguins, {x: "culmen_length_mm", y: "culmen_depth_mm"})
  ]
})

----------------------------------------

TITLE: Generating Release Bundle for Observable Plot
DESCRIPTION: This command generates the release bundle for Observable Plot, which can be used for live demonstrations or examples.

LANGUAGE: bash
CODE:
yarn prepublishOnly

----------------------------------------

TITLE: Creating a Time Series Plot with CrosshairX in JavaScript
DESCRIPTION: This example shows how to create a time series line plot with a crosshairX mark, which is suitable for charts with a dominant x-axis dimension like time.

LANGUAGE: javascript
CODE:
Plot.plot({
  marks: [
    Plot.lineY(aapl, {x: "Date", y: "Close"}),
    Plot.crosshairX(aapl, {x: "Date", y: "Close"})
  ]
})

----------------------------------------

TITLE: Regenerating Snapshots for Observable Plot
DESCRIPTION: These commands remove existing snapshots and regenerate them, useful for reviewing intentional changes to snapshot tests.

LANGUAGE: bash
CODE:
rm -rf test/output
yarn test

----------------------------------------

TITLE: Creating a Bar Chart with Plot.js Shorthand
DESCRIPTION: Illustrates the creation of a bar chart using Plot.js shorthand syntax with a one-dimensional array of numbers.

LANGUAGE: javascript
CODE:
Plot.barY(numbers).plot()

----------------------------------------

TITLE: Starting Vite for Live Preview of Observable Plot
DESCRIPTION: This command starts Vite to provide a live preview of snapshot tests during development of Observable Plot.

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Creating a Colored Histogram with Plot binX Transform
DESCRIPTION: Uses Plot's binX transform to create a histogram with color encoding, demonstrating the convenience of Plot's built-in transforms.

LANGUAGE: javascript
CODE:
Plot.rectY(olympians, Plot.binX({y: "count"}, {x: "weight", fill: "sex"})).plot({color: {legend: true}})

----------------------------------------

TITLE: Running Tests for Observable Plot
DESCRIPTION: This command runs the test suite for Observable Plot, including unit tests, snapshot tests, and ESLint checks.

LANGUAGE: bash
CODE:
yarn test

----------------------------------------

TITLE: Creating a Histogram with d3.bin
DESCRIPTION: Demonstrates creating a histogram using d3.bin() outside of Plot, then using Plot.rectY to visualize the binned data.

LANGUAGE: javascript
CODE:
bins = d3.bin().thresholds(80).value((d) => d.weight)(olympians)

Plot.rectY(bins, {x1: "x0", x2: "x1", y2: "length"}).plot()

----------------------------------------

TITLE: Installing Dependencies with Yarn for Observable Plot
DESCRIPTION: This command installs the necessary dependencies for developing Observable Plot using Yarn package manager.

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Vue Methods List Template
DESCRIPTION: Renders a list of API methods with links and comments using Vue's v-for directive and dynamic href binding.

LANGUAGE: vue
CODE:
<ul :class="$style.oneline">
  <li v-for="({name, href, comment}) in data.methods">
    <span><a :href="`${href}#${name}`">{{ name }}</a> - {{ comment }}</span>
  </li>
</ul>

----------------------------------------

TITLE: Vue Script Setup Block
DESCRIPTION: Imports data from an external API data file using Vue's script setup syntax.

LANGUAGE: vue
CODE:
<script setup>

import {data} from "./data/api.data";

</script>

----------------------------------------

TITLE: Loading Observable Plot in an Observable Notebook
DESCRIPTION: This JavaScript code snippet shows how to load the Observable Plot UMD bundle in an Observable notebook using a file attachment.

LANGUAGE: javascript
CODE:
Plot = require(await FileAttachment("plot.umd.js").url())

----------------------------------------

TITLE: Installing Canvas Dependencies on macOS for Observable Plot
DESCRIPTION: This command uses Homebrew to install the required dependencies for compiling node-canvas from source on macOS.

LANGUAGE: bash
CODE:
brew install pkg-config cairo pango libpng jpeg giflib librsvg

----------------------------------------

TITLE: Clipping Raster Visualization with Geographic Boundaries
DESCRIPTION: Shows how to use the clip option with raster marks to visualize atmospheric water vapor data clipped to national boundaries. Implements interpolation and blur effects while maintaining geographic constraints.

LANGUAGE: javascript
CODE:
Plot.raster(vapor, {
  fill: Plot.identity,
  width: 360,
  height: 180,
  x1: -180, y1: 90, x2: 180, y2: -90,
  interpolate: "barycentric",
  blur: 10,
  clip: nation
}).plot()

----------------------------------------

TITLE: Projected Map with Domain Sizing
DESCRIPTION: Shows how projection domains affect plot height, specifically for a conic-conformal projection of North Carolina.

LANGUAGE: javascript
CODE:
Plot.plot({
  projection: {
    type: "conic-conformal",
    parallels: [34 + 20 / 60, 36 + 10 / 60],
    rotate: [79, 0],
    domain: state
  },
  marks: [
    Plot.geo(counties, {strokeOpacity: 0.2}),
    Plot.geo(state)
  ]
})

----------------------------------------

TITLE: Creating a Rectangle Chart with Band Scales
DESCRIPTION: JavaScript code demonstrating how to create a bar chart using Plot's rect mark with band scales.

LANGUAGE: javascript
CODE:
Plot.rectY(alphabet, {x: "letter", y: "frequency"}).plot()