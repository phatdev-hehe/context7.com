TITLE: Creating a New Wasp Project with Interactive Template Selection
DESCRIPTION: This snippet demonstrates how to use the 'wasp new' command to create a new Wasp project. It shows the interactive prompts for project name and template selection, including options for various starter templates.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] ai-generated
    ü§ñ Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)
 ‚ñ∏ 1

üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Creating and Running a Wasp Project
DESCRIPTION: Commands for creating a new Wasp project and starting the development server.

LANGUAGE: shell
CODE:
wasp new

LANGUAGE: shell
CODE:
cd <my-project-name>
wasp start

----------------------------------------

TITLE: Implementing Wasp Application Configuration in TypeScript
DESCRIPTION: Complete TypeScript implementation of a Wasp application configuration, including auth, routes, queries, and API endpoints.

LANGUAGE: typescript
CODE:
import { App } from 'wasp-config'

const app = new App('todoApp', {
  title: 'ToDo App',
  wasp: { version: '^0.15.0' },
});

app.webSocket({
  fn: { import: 'webSocketFn', from: '@src/webSocket' },
});

app.auth({
  userEntity: 'User',
  methods: {
    discord: {
      configFn: { import: 'config', from: '@src/auth/discord' },
      userSignupFields: { import: 'userSignupFields', from: '@src/auth/discord' }
    },
    google: {
      configFn: { import: 'config', from: '@src/auth/google' },
      userSignupFields: { import: 'userSignupFields', from: '@src/auth/google' }
    },
    gitHub: {
      configFn: { import: 'config', from: '@src/auth/github.js' },
      userSignupFields: { import: 'userSignupFields', from: '@src/auth/github.js' }
    },
  },
  onAuthFailedRedirectTo: '/login',
  onAuthSucceededRedirectTo: '/profile',
  onBeforeSignup: { import: 'onBeforeSignup', from: '@src/auth/hooks.js' },
  onAfterSignup: { import: 'onAfterSignup', from: '@src/auth/hooks.js' },
  onBeforeOAuthRedirect: { import: 'onBeforeOAuthRedirect', from: '@src/auth/hooks.js' },
  onBeforeLogin: { import: 'onBeforeLogin', from: '@src/auth/hooks.js' },
  onAfterLogin: { import: 'onAfterLogin', from: '@src/auth/hooks.js' }
});

// ... Additional configuration code ...

export default app;

----------------------------------------

TITLE: Defining Wasp Route and Page
DESCRIPTION: Specifies the home route and page component in Wasp, including authentication requirement.

LANGUAGE: wasp
CODE:
route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import { HomePage } from "@src/pages/HomePage",
  authRequired: true // Will send user to /login if not authenticated.
}

----------------------------------------

TITLE: Rendering React Components with Testing Context
DESCRIPTION: Demonstrates how to use the renderInContext helper to test React components with proper provider setup

LANGUAGE: javascript
CODE:
import { renderInContext } from "wasp/client/test";

renderInContext(<MainPage />);

----------------------------------------

TITLE: Defining Wasp Route and Page
DESCRIPTION: Specifies the home route and page component in Wasp, including authentication requirement.

LANGUAGE: wasp
CODE:
route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import { HomePage } from "@src/pages/HomePage",
  authRequired: true // Will send user to /login if not authenticated.
}

----------------------------------------

TITLE: Accessing User Data on the Client
DESCRIPTION: Demonstrates how to access the logged-in user's data on the client side using the useAuth hook.

LANGUAGE: jsx
CODE:
import { useAuth, logout } from 'wasp/client/auth'
import { Link } from 'react-router-dom'
import Todo from '../Todo'

export function Main() {
  const { data: user } = useAuth()

  if (!user) {
    return (
      <span>
        Please <Link to="/login">login</Link> or{' '}
        <Link to="/signup">sign up</Link>.
      </span>
    )
  } else {
    return (
      <>
        <button onClick={logout}>Logout</button>
        <Todo />
      </>
    )
  }
}

----------------------------------------

TITLE: Declaring Operations in Wasp
DESCRIPTION: This snippet demonstrates how to declare a query and an action in the Wasp configuration file for retrieving and adding recipes.

LANGUAGE: wasp
CODE:
query getRecipes {
  fn: import { getRecipes } from "@src/recipe/operations",
  entities: [Recipe],
}

action addRecipe {
  fn: import { addRecipe } from "@src/recipe/operations",
  entities: [Recipe],
}

----------------------------------------

TITLE: Creating a New Wasp Project via CLI
DESCRIPTION: This command initializes a new Wasp project named TodoApp using the Wasp CLI.

LANGUAGE: sh
CODE:
$ wasp new TodoApp

----------------------------------------

TITLE: Using Task Entity in React Components
DESCRIPTION: Demonstrates using entity types in React components with TypeScript integration.

LANGUAGE: typescript
CODE:
import { Task } from "wasp/entities"

export function ExamplePage() {
  const task: Task = {
    id: 123,
    description: "Some random task",
    isDone: false,
  }
  return <div>{task.description}</div>
}

----------------------------------------

TITLE: Implementing WebSocket Server Logic in TypeScript
DESCRIPTION: Demonstrates how to define the server-side WebSocket logic in TypeScript, including type definitions for events and payloads. This setup ensures full-stack type safety for WebSocket communication.

LANGUAGE: typescript
CODE:
import { v4 as uuidv4 } from 'uuid'
import { getFirstProviderUserId } from 'wasp/auth'
import { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'

export const webSocketFn: WebSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
      // You can also use your entities here:
      // await context.entities.SomeEntity.create({ someField: msg })
    })
  })
}

type WebSocketFn = WebSocketDefinition<
  ClientToServerEvents,
  ServerToClientEvents,
  InterServerEvents,
  SocketData
>

interface ServerToClientEvents {
  chatMessage: (msg: { id: string, username: string, text: string }) => void;
}

interface ClientToServerEvents {
  chatMessage: (msg: string) => void;
}

interface InterServerEvents {}

interface SocketData extends WaspSocketData {}

----------------------------------------

TITLE: Complete App Configuration Structure in Wasp
DESCRIPTION: This snippet provides a comprehensive view of all possible fields in a Wasp app declaration, including authentication, client, server, database, email sender, and WebSocket configurations.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ],
  auth: {
    // ...
  },
  client: {
    // ...
  },
  server: {
    // ...
  },
  db: {
    // ...
  },
  emailSender: {
    // ...
  },
  webSocket: {
    // ...
  }
}

----------------------------------------

TITLE: Using Task Entity in React Components
DESCRIPTION: Demonstrates using entity types in React components with TypeScript integration.

LANGUAGE: typescript
CODE:
import { Task } from "wasp/entities"

export function ExamplePage() {
  const task: Task = {
    id: 123,
    description: "Some random task",
    isDone: false,
  }
  return <div>{task.description}</div>
}

----------------------------------------

TITLE: Configuring Wasp Application with Auth and Routes
DESCRIPTION: Example configuration file showing how to set up a Todo application in Wasp with authentication, routing, and database models. Demonstrates core Wasp features including auth setup, page components, and query definitions.

LANGUAGE: javascript
CODE:
// file: main.wasp

app todoApp {
  title: "ToDo App",  // visible in the browser tab
  wasp: { version: "^0.15.0" },
  auth: { // full-stack auth out-of-the-box
    userEntity: User, methods: { email: {...} }
  }
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true, // Limit access to logged-in users.
  component: import Main from "@client/Main.tsx" // Your React code.
}

query getTasks {
  fn: import { getTasks } from "@server/tasks.js", // Your Node.js code.
  entities: [Task] // Automatic cache invalidation.
}

// file: schema.prisma

model Task { // Your Prisma data model.
  id          Int     @id @default(autoincrement())
  description String
  isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Customizing Auth UI Appearance in Wasp
DESCRIPTION: This snippet demonstrates how to customize the appearance of the Auth UI components by defining custom colors and applying them to the LoginForm.

LANGUAGE: typescript
CODE:
import type { CustomizationOptions } from 'wasp/client/auth'

export const authAppearance: CustomizationOptions['appearance'] = {
  colors: {
    brand: '#5969b8', // blue
    brandAccent: '#de5998', // pink
    submitButtonText: 'white',
  },
}

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'
import { authAppearance } from './appearance'

export function LoginPage() {
  return (
    <LoginForm
      // Pass the appearance object to the form
      appearance={authAppearance}
    />
  )
}

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: This code defines the User entity in the Prisma schema, which is required for username and password authentication in Wasp.

LANGUAGE: prisma
CODE:
// 3. Define the user entity
model User {
  // highlight-next-line
  id Int @id @default(autoincrement())
  // Add your own fields below
  // ...
}

----------------------------------------

TITLE: Using Prisma Client with Entities in TypeScript
DESCRIPTION: This snippet demonstrates how to import and use the Prisma Client directly in Wasp server code to create a new Task entity, using TypeScript.

LANGUAGE: typescript
CODE:
import { prisma } from 'wasp/server'

prisma.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

----------------------------------------

TITLE: Complete App Configuration Structure in Wasp
DESCRIPTION: This snippet provides a comprehensive view of all possible fields in a Wasp app declaration, including authentication, client, server, database, email sender, and WebSocket configurations.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ],
  auth: {
    // ...
  },
  client: {
    // ...
  },
  server: {
    // ...
  },
  db: {
    // ...
  },
  emailSender: {
    // ...
  },
  webSocket: {
    // ...
  }
}

----------------------------------------

TITLE: Using WebSockets in React Components with TypeScript
DESCRIPTION: Shows how to use WebSockets in a React component with TypeScript, leveraging full-stack type safety. It demonstrates the usage of typed 'useSocket' and 'useSocketListener' hooks, as well as helper types for payload inference.

LANGUAGE: tsx
CODE:
import React, { useState } from 'react'
import {
  useSocket,
  useSocketListener,
  ServerToClientPayload,
} from 'wasp/client/webSocket'

export const ChatPage = () => {
  const [messageText, setMessageText] = useState<
    ClientToServerPayload<'chatMessage'>
  >('')
  const [messages, setMessages] = useState<
    ServerToClientPayload<'chatMessage'>[]
  >([])
  const { socket, isConnected } = useSocket()

  useSocketListener('chatMessage', logMessage)

  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {
    setMessages((priorMessages) => [msg, ...priorMessages])
  }

  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    socket.emit('chatMessage', messageText)
    setMessageText('')
  }

  const messageList = messages.map((msg) => (
    <li key={msg.id}>
      <em>{msg.username}</em>: {msg.text}
    </li>
  ))
  const connectionIcon = isConnected ? 'üü¢' : 'üî¥'

  return (
    <>
      <h2>Chat {connectionIcon}</h2>
      <div>
        <form onSubmit={handleSubmit}>
          <div>
            <div>
              <input
                type="text"
                value={messageText}
                onChange={(e) => setMessageText(e.target.value)}
              />
            </div>
            <div>
              <button type="submit">Submit</button>
            </div>
          </div>
        </form>
        <ul>{messageList}</ul>
      </div>
    </>
  )
}

----------------------------------------

TITLE: Login Page Component Implementation
DESCRIPTION: React component implementation for the login page using Wasp's auth components.

LANGUAGE: tsx
CODE:
import { Link } from 'react-router-dom'
import { LoginForm } from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <div style={{ maxWidth: '400px', margin: '0 auto' }}>
      <LoginForm />
      <br />
      <span>
        I don't have an account yet (<Link to="/signup">go to signup</Link>).
      </span>
    </div>
  )
}

----------------------------------------

TITLE: Login Page Component Implementation
DESCRIPTION: React component implementation for the login page using Wasp's auth components.

LANGUAGE: tsx
CODE:
import { Link } from 'react-router-dom'
import { LoginForm } from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <div style={{ maxWidth: '400px', margin: '0 auto' }}>
      <LoginForm />
      <br />
      <span>
        I don't have an account yet (<Link to="/signup">go to signup</Link>).
      </span>
    </div>
  )
}

----------------------------------------

TITLE: Installing Wasp on Linux/OSX/WSL
DESCRIPTION: Command to install Wasp using a shell script. Requires curl to be installed on the system.

LANGUAGE: shell
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Implementing getRecipes Query in TypeScript
DESCRIPTION: TypeScript implementation of the getRecipes query, using Prisma to fetch recipes for the authenticated user.

LANGUAGE: typescript
CODE:
import { type GetRecipes } from "wasp/server/operations";
import { type Recipe } from "wasp/entities";

export const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {
  return context.entities.Recipe.findMany( // Prisma query
    { where: { user: { id: context.user.id } } }
  );
};

export const addRecipe ...

----------------------------------------

TITLE: Creating a New Wasp Project
DESCRIPTION: This command initializes a new Wasp project. It should be run after installing Wasp to start creating a new web application.

LANGUAGE: shell
CODE:
wasp new

----------------------------------------

TITLE: Defining Task Entity Schema in Prisma
DESCRIPTION: Prisma schema definition for a basic Task entity with id, description and isDone fields

LANGUAGE: prisma
CODE:
model Task {
  id          Int     @id @default(autoincrement())
  description String
  isDone      Boolean
}

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Shows how to enable and configure authentication in a Wasp application by setting up the auth field in the app declaration.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  //...
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}, // use this or email, not both
      email: {}, // use this or usernameAndPassword, not both
      google: {},
      gitHub: {},
    },
    onAuthFailedRedirectTo: "/someRoute"
  }
}

//...

----------------------------------------

TITLE: Defining Task Entity with Prisma Schema
DESCRIPTION: Demonstrates how to define a basic Task entity model using Prisma schema language with fields for id, description, and completion status.

LANGUAGE: prisma
CODE:
model Task {
  id          String  @id @default(uuid())
  description String
  isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Defining Task Entity with Prisma Schema
DESCRIPTION: Demonstrates how to define a basic Task entity using Prisma schema language with fields for id, description, and completion status.

LANGUAGE: prisma
CODE:
model Task {
  id          String  @id @default(uuid())
  description String
  isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Adding Auth Routes and Pages in Wasp File
DESCRIPTION: This code shows how to define the necessary routes and pages for authentication in the main.wasp file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/pages/auth.jsx"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/pages/auth.jsx",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@src/pages/auth.jsx",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@src/pages/auth.jsx",
}

----------------------------------------

TITLE: Creating and Running a New Wasp App
DESCRIPTION: Commands to create and start a new Wasp application

LANGUAGE: shell
CODE:
wasp new

LANGUAGE: shell
CODE:
cd <my-project-name>
wasp start

----------------------------------------

TITLE: Complete App Configuration Reference
DESCRIPTION: Full reference example showing all possible configuration options including authentication, client, server, database, email, and WebSocket settings.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ],
  auth: {
    // ...
  },
  client: {
    // ...
  },
  server: {
    // ...
  },
  db: {
    // ...
  },
  emailSender: {
    // ...
  },
  webSocket: {
    // ...
  }
}

----------------------------------------

TITLE: Implementing Custom User Signup Fields for Google Auth
DESCRIPTION: Shows how to implement a custom userSignupFields function for Google authentication in JavaScript and TypeScript.

LANGUAGE: javascript
CODE:
export const userSignupFields = {
  isSignupComplete: () => false,
}

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  isSignupComplete: () => false,
})

----------------------------------------

TITLE: Declaring API Endpoint in Wasp
DESCRIPTION: Shows how to declare a basic API endpoint in a Wasp configuration file, defining the route and implementation function.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  httpRoute: (GET, "/foo/bar")
}

----------------------------------------

TITLE: Basic Wasp App Configuration
DESCRIPTION: Basic example of configuring a Wasp app with version and title specification, along with custom head elements for styling.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ]
}

----------------------------------------

TITLE: Configuring Server in Wasp App Declaration
DESCRIPTION: Basic server configuration in a Wasp application showing how to define setup and middleware config functions.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  server: {
    setupFn: import { mySetupFunction } from "@src/myServerSetupCode.js",
    middlewareConfigFn: import { myMiddlewareConfigFn } from "@src/myServerSetupCode.js"
  }
}

----------------------------------------

TITLE: Implementing Queries in TypeScript
DESCRIPTION: Example TypeScript implementation with full type safety for queries

LANGUAGE: typescript
CODE:
import { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'

type Task = {
  id: number
  description: string
  isDone: boolean
}

const tasks: Task[] = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const getAllTasks: GetAllTasks<void, Task[]> = () => {
  return tasks
}

export const getFilteredTasks: GetFilteredTasks<Pick<Task, 'isDone'>, Task[]> = (args) => {
  const { isDone } = args
  return tasks.filter((task) => task.isDone === isDone)
}

----------------------------------------

TITLE: Configuring Auth in Wasp App
DESCRIPTION: Example of configuring authentication options in a Wasp application, including specifying the user entity, auth methods, and redirect routes.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  //...
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}, // use this or email, not both
      email: {}, // use this or usernameAndPassword, not both
      google: {},
      gitHub: {},
    },
    onAuthFailedRedirectTo: "/someRoute"
  }
}

//...

----------------------------------------

TITLE: Configuring Main Wasp Application File
DESCRIPTION: Demonstrates the basic configuration in main.wasp file, including app declaration, route definition, and page component setup.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.15.0" // Pins the version of Wasp to use.
  },
  title: "TodoApp" // Used as the browser tab title. Note that all strings in Wasp are double quoted!
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  // We specify that the React implementation of the page is exported from
  // `src/MainPage.jsx`. This statement uses standard JS import syntax.
  // Use `@src` to reference files inside the `src` folder.
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Creating New Wasp SaaS Project
DESCRIPTION: Command to create a new Wasp project using the SaaS template which includes Stripe Payments, OpenAI GPT API, Google Auth, SendGrid, Tailwind, and Cron Jobs.

LANGUAGE: bash
CODE:
wasp new <project-name> -t saas

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Shows how to declare queries in the .wasp file, specifying the implementation function and any entities used.

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@src/queries.js"
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@src/queries.js"
}

----------------------------------------

TITLE: Configuring Basic Wasp App Settings
DESCRIPTION: This snippet demonstrates the basic structure of a Wasp app configuration, including setting the Wasp version, app title, and adding custom head elements.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ]
}

----------------------------------------

TITLE: Configuring Auth in Wasp App
DESCRIPTION: Example of configuring authentication options in a Wasp application, including specifying the user entity, auth methods, and redirect routes.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  //...
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}, // use this or email, not both
      email: {}, // use this or usernameAndPassword, not both
      google: {},
      gitHub: {},
    },
    onAuthFailedRedirectTo: "/someRoute"
  }
}

//...

----------------------------------------

TITLE: Using getTasks Query in React Component (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the getTasks query in a React component using the useQuery hook. It also includes components for rendering the task list.

LANGUAGE: jsx
CODE:
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

const TaskView = ({ task }) => {
  return (
    <div>
      <input type="checkbox" id={String(task.id)} checked={task.isDone} />
      {task.description}
    </div>
  )
}

const TasksList = ({ tasks }) => {
  if (!tasks?.length) return <div>No tasks</div>

  return (
    <div>
      {tasks.map((task, idx) => (
        <TaskView task={task} key={idx} />
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Configuring Server in Wasp (JavaScript/TypeScript)
DESCRIPTION: Demonstrates how to configure server behavior in a Wasp application using the 'server' field in the app declaration. It includes setup and middleware configuration functions.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  server: {
    setupFn: import { mySetupFunction } from "@src/myServerSetupCode.js",
    middlewareConfigFn: import { myMiddlewareConfigFn } from "@src/myServerSetupCode.js"
  }
}

----------------------------------------

TITLE: React Component Implementation in TypeScript
DESCRIPTION: Type-safe client-side React component implementation with TypeScript annotations for the task list interface.

LANGUAGE: tsx
CODE:
import { Task } from 'wasp/entities'
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

const TaskView = ({ task }: { task: Task }) => {
  return (
    <div>
      <input type="checkbox" id={String(task.id)} checked={task.isDone} />
      {task.description}
    </div>
  )
}

const TasksList = ({ tasks }: { tasks: Task[] }) => {
  if (!tasks?.length) return <div>No tasks</div>

  return (
    <div>
      {tasks.map((task, idx) => (
        <TaskView task={task} key={idx} />
      ))}
    </div>
  )
}

----------------------------------------

TITLE: TypeScript Implementation of getTaskInfo Query
DESCRIPTION: This snippet demonstrates the TypeScript version of the getTaskInfo query function, utilizing Wasp's TypeScript features such as entity types and operation types.

LANGUAGE: typescript
CODE:
import HttpError from 'wasp/server'
import { type Task } from '@wasp/entities'
import { type GetTaskInfo } from '@wasp/server/operations'

function getInfoMessage(task: Pick<Task, 'isDone' | 'description'>): string {
  const isDoneText = task.isDone ? 'is done' : 'is not done'
  return `Task '${task.description}' is ${isDoneText}.`
}

export const getTaskInfo: GetTaskInfo<Pick<Task, 'id'>, string> = async (
  { id },
  context
) => {
  const Task = context.entities.Task

  const task = await Task.findUnique({ where: { id } })
  if (!task) {
    throw new HttpError(404)
  }

  return getInfoMessage(task)
}

----------------------------------------

TITLE: Basic Wasp Configuration File
DESCRIPTION: Default main.wasp configuration file showing app settings, route definition, and page component import using both JavaScript and TypeScript.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.14.0" // Pins the version of Wasp to use.
  },
  title: "TodoApp" // Used as the browser tab title. Note that all strings in Wasp are double quoted!
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  // We specify that the React implementation of the page is exported from
  // `src/MainPage.jsx`. This statement uses standard JS import syntax.
  // Use `@src` to reference files inside the `src` folder.
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Creating New Wasp Vector Search Project
DESCRIPTION: Command to create a new Wasp project using the embeddings template which includes vector similarity search capabilities, OpenAI Embeddings API, Pinecone integration, and Tailwind.

LANGUAGE: bash
CODE:
wasp new <project-name> -t embeddings

----------------------------------------

TITLE: Defining Task Entity in Prisma Schema
DESCRIPTION: This snippet shows how to define a Task entity in the Prisma schema file. It includes fields for id, description, and isDone.

LANGUAGE: prisma
CODE:
model Task {
  id          Int @id @default(autoincrement())
  description String
  isDone      Boolean
}

----------------------------------------

TITLE: TypeScript Main.wasp Configuration File
DESCRIPTION: Default main.wasp configuration file for TypeScript projects, showing the same structure as JavaScript but referencing TypeScript files.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.13.0" // Pins the version of Wasp to use.
  },
  title: "TodoApp" // Used as the browser tab title. Note that all strings in Wasp are double quoted!
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  // We specify that the React implementation of the page is exported from
  // `src/MainPage.tsx`. This statement uses standard JS import syntax.
  // Use `@src` to reference files inside the `src` folder.
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Defining Task Entity Model in Prisma
DESCRIPTION: Creates a Task database model with id, description, and isDone fields using Prisma schema definition language. The model includes an auto-incrementing primary key and a default false value for the isDone field.

LANGUAGE: prisma
CODE:
model Task {
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Fully Customized Login Page Implementation in Wasp
DESCRIPTION: This snippet shows a complete implementation of a customized login page, including custom appearance, logo, and layout settings for the LoginForm component.

LANGUAGE: typescript
CODE:
import type { CustomizationOptions } from 'wasp/client/auth'

export const appearance: CustomizationOptions['appearance'] = {
  colors: {
    brand: '#5969b8', // blue
    brandAccent: '#de5998', // pink
    submitButtonText: 'white',
  },
}

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

import { authAppearance } from './appearance'
import todoLogo from './todoLogo.png'

export function LoginPage() {
  return <LoginForm appearance={appearance} logo={todoLogo} />
}

----------------------------------------

TITLE: Implementing Login Page with Auth UI
DESCRIPTION: Example of implementing a login page using Wasp's LoginForm component, showing both route configuration and component usage.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/LoginPage.tsx"
}

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function LoginPage() {
  return <LoginForm />
}

----------------------------------------

TITLE: Implementing Login Page with Auth UI
DESCRIPTION: Example of implementing a login page using Wasp's LoginForm component, showing both route configuration and component usage.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/LoginPage.tsx"
}

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function LoginPage() {
  return <LoginForm />
}

----------------------------------------

TITLE: Implementing Login Page in React
DESCRIPTION: Creates a React component for the login page using Wasp's LoginForm and adding a link to the signup page.

LANGUAGE: jsx
CODE:
import { Link } from 'react-router-dom'
import { LoginForm } from '@wasp/auth/forms/Login'

const LoginPage = () => {
  return (
    <div style={{ maxWidth: '400px', margin: '0 auto' }}>
      <LoginForm />
      <br />
      <span>
        I don't have an account yet (<Link to="/signup">go to signup</Link>).
      </span>
    </div>
  )
}

export default LoginPage

----------------------------------------

TITLE: Accessing Client Environment Variables in JavaScript/TypeScript
DESCRIPTION: Demonstrates how to access client-side environment variables in a Wasp project using JavaScript or TypeScript. These variables must be prefixed with REACT_APP_ and are publicly readable.

LANGUAGE: javascript
CODE:
console.log(import.meta.env.REACT_APP_SOME_VAR_NAME)

LANGUAGE: typescript
CODE:
console.log(import.meta.env.REACT_APP_SOME_VAR_NAME)

----------------------------------------

TITLE: Configuring Wasp Application with Authentication
DESCRIPTION: Defines a Wasp application named RecipeApp with a title and authentication settings using username and password.

LANGUAGE: wasp
CODE:
app RecipeApp {
  title: "My Recipes",
  wasp: { version: "{latestWaspVersion}" },
  auth: {
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login",
    userEntity: User
  }
}

----------------------------------------

TITLE: Declaring CRUD Operations for Tasks
DESCRIPTION: Example of declaring CRUD operations for a Task entity, including custom implementation for create operation.

LANGUAGE: wasp
CODE:
crud Tasks {
  entity: Task,
  operations: {
    getAll: {
      isPublic: true,
    },
    get: {},
    create: {
      overrideFn: import { createTask } from "@src/tasks.js",
    },
    update: {},
  },
}

----------------------------------------

TITLE: Implementing Actions in JavaScript/TypeScript
DESCRIPTION: Shows how to implement Action functions in JavaScript/TypeScript with example task management operations.

LANGUAGE: typescript
CODE:
export const createTask = (args) => {
  const newTask = {
    id: nextId,
    isDone: false,
    description: args.description,
  }
  nextId += 1
  tasks.push(newTask)
  return newTask
}

export const markTaskAsDone = (args) => {
  const task = tasks.find((task) => task.id === args.id)
  if (!task) {
    return
  }
  task.isDone = true
}

----------------------------------------

TITLE: Configuring Wasp Application with Authentication
DESCRIPTION: Defines a Wasp application named RecipeApp with a title and authentication settings using username and password.

LANGUAGE: wasp
CODE:
app RecipeApp {
  title: "My Recipes",
  wasp: { version: "{latestWaspVersion}" },
  auth: {
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login",
    userEntity: User
  }
}

----------------------------------------

TITLE: Defining Task Entity in Prisma Schema
DESCRIPTION: This snippet shows how to define a Task entity using Prisma model in the schema.prisma file. It includes fields for id, description, and isDone status.

LANGUAGE: prisma
CODE:
model Task {
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Defining Database Models in Prisma Schema
DESCRIPTION: Demonstrates how to define database options and models with relationships in the schema.prisma file.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id      Int        @id @default(autoincrement())
  tasks   Task[]
}

model Task {
  id          Int        @id @default(autoincrement())
  description String
  isDone      Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
}

----------------------------------------

TITLE: Configuring Wasp Application with Authentication
DESCRIPTION: Defines a Wasp application named RecipeApp with a title and authentication settings using username and password.

LANGUAGE: wasp
CODE:
app RecipeApp {
  title: "My Recipes",
  wasp: { version: "{latestWaspVersion}" },
  auth: {
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login",
    userEntity: User
  }
}

----------------------------------------

TITLE: Root Component Implementation with Common Layout
DESCRIPTION: Implementation of a root component that defines a common layout structure using React Router's Outlet component.

LANGUAGE: jsx
CODE:
import { Outlet } from 'react-router-dom'

export default function Root() {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      // highlight-next-line
      <Outlet />
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Example of how to configure authentication in a Wasp application, including setting up auth methods and redirect routes.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  //...
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}, // use this or email, not both
      email: {}, // use this or usernameAndPassword, not both
      google: {},
      gitHub: {},
    },
    onAuthFailedRedirectTo: "/someRoute"
  }
}

//...

----------------------------------------

TITLE: Writing React Component Tests in Wasp
DESCRIPTION: Comprehensive example of testing a React component in a Wasp project, including mocking queries and rendering the component in context.

LANGUAGE: jsx
CODE:
import { useQuery, getTasks } from "wasp/client/operations";

const Todo = (_props) => {
  const { data: tasks } = useQuery(getTasks);
  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";
import Todo from "./Todo";

const { mockQuery } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockQuery(getTasks, mockTasks);

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Declaring API in Wasp
DESCRIPTION: Demonstrates how to declare a custom API endpoint in the Wasp file, specifying the implementation function and HTTP route.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@server/apis.js",
  httpRoute: (GET, "/foo/bar")
}

----------------------------------------

TITLE: Configuring Server Behavior in Wasp
DESCRIPTION: Demonstrates how to configure server behavior using the 'server' field in the app declaration, including setup and middleware configuration functions.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  server: {
    setupFn: import { mySetupFunction } from "@src/myServerSetupCode.js",
    middlewareConfigFn: import { myMiddlewareConfigFn } from "@src/myServerSetupCode.js"
  }
}

----------------------------------------

TITLE: Creating Auth Pages in React
DESCRIPTION: Implementation of React components for authentication pages, including login, signup, email verification, and password reset forms.

LANGUAGE: jsx
CODE:
import {
  LoginForm,
  SignupForm,
  VerifyEmailForm,
  ForgotPasswordForm,
  ResetPasswordForm,
} from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
      <br />
      <span className="text-sm font-medium text-gray-900">
        Forgot your password? <Link to="/request-password-reset">reset it</Link>
        .
      </span>
    </Layout>
  );
}

export function Signup() {
  return (
    <Layout>
      <SignupForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </Layout>
  );
}

export function EmailVerification() {
  return (
    <Layout>
      <VerifyEmailForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        If everything is okay, <Link to="/login">go to login</Link>
      </span>
    </Layout>
  );
}

export function RequestPasswordReset() {
  return (
    <Layout>
      <ForgotPasswordForm />
    </Layout>
  );
}

export function PasswordReset() {
  return (
    <Layout>
      <ResetPasswordForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        If everything is okay, <Link to="/login">go to login</Link>
      </span>
    </Layout>
  );
}

export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Configuring Wasp TypeScript Settings
DESCRIPTION: TypeScript configuration specific to Wasp configuration files, including compiler options and file inclusion.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "skipLibCheck": true,
    "target": "ES2022",
    "isolatedModules": true,
    "moduleDetection": "force",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "module": "NodeNext",
    "noEmit": true,
    "lib": ["ES2023"]
  },
  "include": ["main.wasp.ts"]
}

----------------------------------------

TITLE: Implementing Google Auth Overrides
DESCRIPTION: This snippet shows how to implement the configFn and userSignupFields functions for Google Auth overrides.

LANGUAGE: javascript
CODE:
export const userSignupFields = {
  username: () => 'hardcoded-username',
  displayName: (data) => data.profile.name,
}

export function getConfig() {
  return {
    scopes: ['profile', 'email'],
  }
}

----------------------------------------

TITLE: Using updateTask Action in React Component (TypeScript)
DESCRIPTION: Shows how to use the updateTask Action within a React component with TypeScript to toggle a task's completion status.

LANGUAGE: tsx
CODE:
import { ChangeEvent } from 'react'
import { Task } from 'wasp/entities'

const TaskView = ({ task }: { task: Task }) => {
  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {
    try {
      await updateTask({
        id: task.id,
        isDone: event.target.checked,
      })
    } catch (error: any) {
      window.alert('Error while updating task: ' + error.message)
    }
  }

  return (
    <div>
      <input
        type="checkbox"
        id={String(task.id)}
        checked={task.isDone}
        onChange={handleIsDoneChange}
      />
      {task.description}
    </div>
  )
}

----------------------------------------

TITLE: Configuring Auth in Wasp App
DESCRIPTION: Basic configuration for enabling authentication in a Wasp application, specifying user entity and auth methods

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
      email: {},
      google: {},
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/someRoute"
  }
}

----------------------------------------

TITLE: Implementing Actions in JavaScript
DESCRIPTION: Example of implementing declared Actions in JavaScript to manage tasks in memory.

LANGUAGE: javascript
CODE:
let nextId = 4
const tasks = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const createTask = (args) => {
  const newTask = {
    id: nextId,
    isDone: false, 
    description: args.description,
  }
  nextId += 1
  tasks.push(newTask)
  return newTask
}

export const markTaskAsDone = (args) => {
  const task = tasks.find((task) => task.id === args.id)
  if (!task) {
    return
  }
  task.isDone = true
}

----------------------------------------

TITLE: Defining Routes and Pages in Wasp
DESCRIPTION: Demonstrates how to declare a route and a page in a Wasp file, linking a URL path to a React component.

LANGUAGE: wasp
CODE:
route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Writing a Simple Unit Test in Wasp (JavaScript)
DESCRIPTION: Shows how to write a basic unit test for a helper function in a Wasp project using JavaScript and Vitest.

LANGUAGE: javascript
CODE:
export function areThereAnyTasks(tasks) {
  return tasks.length === 0;
}

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";

import { areThereAnyTasks } from "./helpers";

test("areThereAnyTasks", () => {
  expect(areThereAnyTasks([])).toBe(false);
});

----------------------------------------

TITLE: React Component with URL Parameter Access
DESCRIPTION: This code demonstrates how to access URL parameters in a React component using the useParams hook from react-router-dom.

LANGUAGE: jsx
CODE:
import { useParams } from 'react-router-dom'

export const HelloPage = () => {
  const { name } = useParams()
  return <div>Here's {name}!</div>
}

----------------------------------------

TITLE: Prisma Preview Features Configuration
DESCRIPTION: Example of enabling Prisma preview features like PostgreSQL extensions in the schema.

LANGUAGE: prisma
CODE:
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// ...

----------------------------------------

TITLE: Customizing Signup Form with Additional Fields
DESCRIPTION: Example of customizing the SignupForm component by adding extra fields using the additionalFields prop.

LANGUAGE: jsx
CODE:
import {
  SignupForm,
  FormError,
  FormInput,
  FormItemGroup,
  FormLabel,
} from 'wasp/client/auth'

export const SignupPage = () => {
  return (
    <SignupForm
      additionalFields={[
        {
          name: 'address',
          label: 'Address',
          type: 'input',
          validations: {
            required: 'Address is required',
          },
        },
        (form, state) => {
          return (
            <FormItemGroup>
              <FormLabel>Phone Number</FormLabel>
              <FormInput
                {...form.register('phoneNumber', {
                  required: 'Phone number is required',
                })}
                disabled={state.isLoading}
              />
              {form.formState.errors.phoneNumber && (
                <FormError>
                  {form.formState.errors.phoneNumber.message}
                </FormError>
              )}
            </FormItemGroup>
          )
        },
      ]}
    />
  )
}

----------------------------------------

TITLE: Declaring Query in Wasp Configuration
DESCRIPTION: Defines a getTasks query in the Wasp configuration file that specifies the implementation location and entity dependencies.

LANGUAGE: wasp
CODE:
query getTasks {
  fn: import { getTasks } from "@src/queries",
  entities: [Task]
}

----------------------------------------

TITLE: Accessing User Data in Server Operation
DESCRIPTION: Example of accessing user data in a server-side operation using the context.user object.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (task, context) => {
  if (!context.user) {
    throw new HttpError(403)
  }

  const Task = context.entities.Task
  return Task.create({
    data: {
      description: task.description,
      user: {
        connect: { id: context.user.id },
      },
    },
  })
}

----------------------------------------

TITLE: Accessing User Data in Server Operation
DESCRIPTION: Example of accessing user data in a server-side operation using the context.user object.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (task, context) => {
  if (!context.user) {
    throw new HttpError(403)
  }

  const Task = context.entities.Task
  return Task.create({
    data: {
      description: task.description,
      user: {
        connect: { id: context.user.id },
      },
    },
  })
}

----------------------------------------

TITLE: Adding Auth Routes and Pages in Wasp
DESCRIPTION: Wasp configuration for defining login and signup routes and pages.

LANGUAGE: wasp
CODE:
// ...
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/pages/auth.jsx"
}

----------------------------------------

TITLE: Defining Data Models in Wasp
DESCRIPTION: Creates User and Recipe entities using Prisma Schema Language within a Wasp configuration file.

LANGUAGE: wasp
CODE:
entity User {=psl
  id          Int @id @default(autoincrement())
  recipes     Recipe[]
psl=}

entity Recipe {=psl
  id          Int @id @default(autoincrement())
  title       String
  description String?
  userId      Int
  user        User @relation(fields: [userId], references: [id])
psl=}

----------------------------------------

TITLE: Complete Form Field Implementation with Validation
DESCRIPTION: Full example showing form schema definition, form initialization, and form control implementation with date picker.

LANGUAGE: tsx
CODE:
// Defining form schema
const formSchema = z.object({   
    dateOfBirth: z.date().max(new Date(), {
      message: 'Date of birth cannot be today, or in the future',
    }),    
});

// Defining form  
const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: defaultValues,
});

 // Creating form control
  <FormField
  control={form.control}
  name="dateOfBirth"
  render={({ field }) => (
    <FormItem className="flex flex-col">
      <FormLabel>Date of birth</FormLabel>
      <FormControl>
        <DatePicker date={field.value} setDate={field.onChange} />
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>

----------------------------------------

TITLE: Default Middleware Configuration
DESCRIPTION: Default Express middleware configuration including Helmet, CORS, Morgan, JSON parser, URL encoder, and cookie parser.

LANGUAGE: javascript
CODE:
const defaultGlobalMiddleware = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

LANGUAGE: typescript
CODE:
export type MiddlewareConfig = Map<string, express.RequestHandler>

export type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig

const defaultGlobalMiddleware: MiddlewareConfig = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

----------------------------------------

TITLE: Using Entity Types in TypeScript
DESCRIPTION: This example demonstrates how to import and use the Task Entity type in TypeScript, including defining a function that works with the Task type.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'

const task: Task = { ... }

// You can also define functions for working with entities
function getInfoMessage(task: Task): string {
  const isDoneText = task.isDone ? "is done" : "is not done"
  return `Task '${task.description}' is ${isDoneText}.`
}

----------------------------------------

TITLE: Configuring Wasp Route and Page
DESCRIPTION: Defines a Wasp route and page component for the home page with authentication requirement.

LANGUAGE: wasp
CODE:
route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import { HomePage } from "@src/pages/HomePage",
  authRequired: true // Will send user to /login if not authenticated.
}

----------------------------------------

TITLE: Creating Custom Signup Action in Wasp
DESCRIPTION: This example shows how to create a custom signup action in Wasp, including server-side validation and user creation logic.

LANGUAGE: wasp
CODE:
action customSignup {
  fn: import { signup } from "@src/auth/signup.js",
}

LANGUAGE: javascript
CODE:
import {
  ensurePasswordIsPresent,
  ensureValidPassword,
  ensureValidUsername,
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'

export const signup = async (args, _context) => {
  ensureValidUsername(args)
  ensurePasswordIsPresent(args)
  ensureValidPassword(args)

  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      // Any additional data you want to store on the User entity
      {}
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  // Your custom code after sign-up.
  // ...

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: Configuring Google Auth in Wasp File
DESCRIPTION: Shows how to enable Google authentication in the Wasp configuration file by specifying the user entity and adding Google to the auth methods.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Implementing React Component with Data Fetching
DESCRIPTION: React component implementation using Wasp's useQuery hook for fetching and displaying recipes.

LANGUAGE: tsx
CODE:
import { useQuery, getRecipes } from "wasp/client/operations";
import { type User } from "wasp/entities";

export function HomePage({ user }: { user: User }) {
  const { data: recipes, isLoading } = useQuery(getRecipes);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>Recipes</h1>
      <ul>
        {recipes ? recipes.map((recipe) => (
          <li key={recipe.id}>
            <div>{recipe.title}</div>
            <div>{recipe.description}</div>
          </li>
        )) : 'No recipes defined yet!'}
      </ul>
    </div>
  );
}

----------------------------------------

TITLE: Using Queries with useQuery Hook
DESCRIPTION: Example of using the useQuery hook to fetch data reactively in a React component.

LANGUAGE: jsx
CODE:
import React from 'react'
import { useQuery } from '@wasp/queries'
import getAllTasks from '@wasp/queries/getAllTasks'
import getFilteredTasks from '@wasp/queries/getFilteredTasks'

const MainPage = () => {
  const { data: allTasks, error: error1 } = useQuery(getAllTasks)
  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {
    isDone: true,
  })

  if (error1 !== null || error2 !== null) {
    return <div>There was an error</div>
  }

  return (
    <div>
      <h2>All Tasks</h2>
      {allTasks && allTasks.length > 0
        ? allTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No tasks'}

      <h2>Finished Tasks</h2>
      {doneTasks && doneTasks.length > 0
        ? doneTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No finished tasks'}
    </div>
  )
}

const Task = ({ description, isDone }) => {
  return (
    <div>
      <p>
        <strong>Description: </strong>
        {description}
      </p>
      <p>
        <strong>Is done: </strong>
        {isDone ? 'Yes' : 'No'}
      </p>
    </div>
  )
}

export default MainPage

----------------------------------------

TITLE: Using CRUD Operations in React Component
DESCRIPTION: This snippet demonstrates how to use the generated CRUD operations in a React component for fetching tasks and creating new ones.

LANGUAGE: jsx
CODE:
import { Tasks } from 'wasp/client/crud'
import { useState } from 'react'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()
  const createTask = Tasks.create.useAction()
  const [taskDescription, setTaskDescription] = useState('')

  function handleCreateTask() {
    createTask({ description: taskDescription, isDone: false })
    setTaskDescription('')
  }

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>
  return (
    <div>
      <div>
        <input
          value={taskDescription}
          onChange={(e) => setTaskDescription(e.target.value)}
        />
        <button onClick={handleCreateTask}>Create task</button>
      </div>
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>{task.description}</li>
        ))}
      </ul>
    </div>
  )
}

----------------------------------------

TITLE: Complete Wasp App Configuration Reference
DESCRIPTION: Complete reference showing all possible configuration options for a Wasp app, including auth, client, server, database, email, and WebSocket settings.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.12.0"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ],
  auth: {
    // ...
  },
  client: {
    // ...
  },
  server: {
    // ...
  },
  db: {
    // ...
  },
  emailSender: {
    // ...
  },
  webSocket: {
    // ...
  }
}

----------------------------------------

TITLE: Using Queries with useQuery Hook
DESCRIPTION: Example of using the useQuery hook to make queries reactive in a React component.

LANGUAGE: jsx
CODE:
import React from 'react'
import { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'

const MainPage = () => {
  const { data: allTasks, error: error1 } = useQuery(getAllTasks)
  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {
    isDone: true,
  })

  if (error1 !== null || error2 !== null) {
    return <div>There was an error</div>
  }

  return (
    <div>
      <h2>All Tasks</h2>
      {allTasks && allTasks.length > 0
        ? allTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No tasks'}

      <h2>Finished Tasks</h2>
      {doneTasks && doneTasks.length > 0
        ? doneTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No finished tasks'}
    </div>
  )
}

const Task = ({ description, isDone }) => {
  return (
    <div>
      <p>
        <strong>Description: </strong>
        {description}
      </p>
      <p>
        <strong>Is done: </strong>
        {isDone ? 'Yes' : 'No'}
      </p>
    </div>
  )
}

export default MainPage

----------------------------------------

TITLE: Configuring User Entity and Google Auth in Wasp
DESCRIPTION: Demonstrates how to set up the user entity and enable Google authentication in a Wasp application.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: TypeScript Implementation of getTaskInfo Query
DESCRIPTION: This snippet demonstrates the TypeScript version of the getTaskInfo query, showcasing type annotations and Wasp's TypeScript features.

LANGUAGE: typescript
CODE:
import HttpError from 'wasp/server'
import { type Task } from '@wasp/entities'
import { type GetTaskInfo } from '@wasp/server/operations'

function getInfoMessage(task: Pick<Task, 'isDone' | 'description'>): string {
  const isDoneText = task.isDone ? 'is done' : 'is not done'
  return `Task '${task.description}' is ${isDoneText}.`
}

export const getTaskInfo: GetTaskInfo<Pick<Task, 'id'>, string> = async (
  { id },
  context
) => {
  const Task = context.entities.Task

  const task = await Task.findUnique({ where: { id } })
  if (!task) {
    throw new HttpError(404)
  }

  return getInfoMessage(task)
}

----------------------------------------

TITLE: GitHub Actions Workflow for Continuous Deployment of Wasp App
DESCRIPTION: This YAML configuration sets up a GitHub Actions workflow for deploying a Wasp application. It includes steps for authenticating with GitHub Container Registry, building the Wasp app, packaging both server and client into Docker images, and deploying them using Coolify.

LANGUAGE: yaml
CODE:
# Note: This is a partial representation of the deploy.yml file

# 1. Authenticate with GitHub Container Registry
- name: Login to GitHub Container Registry
  uses: docker/login-action@v1
  with:
    registry: ghcr.io
    username: ${{ github.actor }}
    password: ${{ secrets.GITHUB_TOKEN }}

# 2. Prepare Docker image metadata
- name: Extract metadata (tags, labels) for Docker
  id: meta
  uses: docker/metadata-action@v3
  with:
    images: ghcr.io/${{ github.repository }}

# 3. Build the Wasp app
- name: Build Wasp app
  run: wasp build

# 4. Package and push server app
- name: Build and push server Docker image
  uses: docker/build-push-action@v2
  with:
    context: .wasp/build
    push: true
    tags: ${{ steps.meta.outputs.tags }}-server
    labels: ${{ steps.meta.outputs.labels }}

# 5. Package and push client app
- name: Build and push client Docker image
  uses: docker/build-push-action@v2
  with:
    context: .wasp/build/web-app
    push: true
    tags: ${{ steps.meta.outputs.tags }}-client
    labels: ${{ steps.meta.outputs.labels }}

# 6. Notify Coolify to deploy
- name: Deploy to Coolify
  run: |
    curl -X POST ${{ secrets.COOLIFY_WEBHOOK_URL }} \
      -H "Content-Type: application/json" \
      -d '{"server":"${{ steps.meta.outputs.tags }}-server", "client":"${{ steps.meta.outputs.tags }}-client"}'

----------------------------------------

TITLE: Configuring CRUD Operations in Wasp
DESCRIPTION: Wasp configuration for enabling CRUD operations on the Task entity with customized access control and implementation overrides

LANGUAGE: wasp
CODE:
crud Tasks {
  entity: Task,
  operations: {
    getAll: {
      isPublic: true,
    },
    get: {},
    create: {
      overrideFn: import { createTask } from "@src/tasks.js",
    },
    update: {},
  },
}

----------------------------------------

TITLE: Accessing Logged-in User on the Server
DESCRIPTION: Shows how to access the logged-in user on the server side in Wasp operations.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (task, context) => {
  if (!context.user) {
    throw new HttpError(403)
  }

  const Task = context.entities.Task
  return Task.create({
    data: {
      description: task.description,
      user: {
        connect: { id: context.user.id },
      },
    },
  })
}

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: Creates a User model in the Prisma schema to keep track of task ownership.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Declaring createTask Action in Wasp
DESCRIPTION: Declares a new Action called createTask in the main.wasp file, specifying the implementation function and associated entities.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions",
  entities: [Task]
}

----------------------------------------

TITLE: Configuring Email Auth in Wasp
DESCRIPTION: Core configuration for enabling email authentication in the Wasp app file, including user entity specification and email settings

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "My App Postman",
          email: "hello@itsme.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

----------------------------------------

TITLE: Creating Auth UI Components
DESCRIPTION: This snippet shows how to create React components for authentication pages using Wasp's Auth UI components.

LANGUAGE: javascript
CODE:
import {
  LoginForm,
  SignupForm,
  VerifyEmailForm,
  ForgotPasswordForm,
  ResetPasswordForm,
} from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
      <br />
      <span className="text-sm font-medium text-gray-900">
        Forgot your password? <Link to="/request-password-reset">reset it</Link>.
      </span>
    </Layout>
  )
}

// ... (other component definitions)

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Sets up username and password authentication in the Wasp app configuration, specifying the User entity and redirect behavior.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "TodoApp",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Defining Custom Environment Variable Validations in TypeScript
DESCRIPTION: Illustrates how to define custom environment variable validations using Zod in a TypeScript file, including both client and server-side schemas.

LANGUAGE: typescript
CODE:
import * as z from 'zod'

import { defineEnvValidationSchema } from 'wasp/env'

export const serverEnvValidationSchema = defineEnvValidationSchema(
  z.object({
    STRIPE_API_KEY: z.string({
      required_error: 'STRIPE_API_KEY is required.'
    })
  })
)

export const clientEnvValidationSchema = defineEnvValidationSchema(
  z.object({
    REACT_APP_NAME: z.string().default('TODO App')
  })
)

----------------------------------------

TITLE: Configuring User Entity for Social Auth in Wasp
DESCRIPTION: This snippet shows how to set up the user entity and enable Google authentication in a Wasp application. It includes both the Wasp configuration and the corresponding Prisma schema.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Client Setup Function Implementation
DESCRIPTION: Implementation of a client setup function that runs before the application starts, demonstrating periodic logging.

LANGUAGE: javascript
CODE:
export default async function mySetupFunction() {
  let count = 1
  setInterval(
    () => console.log(`You have been online for ${count++} hours.`),
    1000 * 60 * 60
  )
}

----------------------------------------

TITLE: Implementing Queries in TypeScript
DESCRIPTION: Example of implementing the getAllTasks and getFilteredTasks queries in TypeScript with type annotations.

LANGUAGE: typescript
CODE:
import { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'

type Task = {
  id: number
  description: string
  isDone: boolean
}

const tasks: Task[] = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const getAllTasks: GetAllTasks<void, Task[]> = () => {
  return tasks
}

export const getFilteredTasks: GetFilteredTasks<
  Pick<Task, 'isDone'>,
  Task[]
> = (args) => {
  const { isDone } = args
  return tasks.filter((task) => task.isDone === isDone)
}

----------------------------------------

TITLE: Using the useAction Hook for Optimistic Updates
DESCRIPTION: Example of using the useAction hook to perform optimistic updates when marking a task as done.

LANGUAGE: jsx
CODE:
import React from 'react'
import {
  useQuery,
  useAction,
  getTask,
  markTaskAsDone,
} from 'wasp/client/operations'

const TaskPage = ({ id }) => {
  const { data: task } = useQuery(getTask, { id })
  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {
    optimisticUpdates: [
      {
        getQuerySpecifier: ({ id }) => [getTask, { id }],
        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),
      },
    ],
  })

  if (!task) {
    return <h1>"Loading"</h1>
  }

  const { description, isDone } = task
  return (
    <div>
      <p>
        <strong>Description: </strong>
        {description}
      </p>
      <p>
        <strong>Is done: </strong>
        {isDone ? 'Yes' : 'No'}
      </p>
      {isDone || (
        <button onClick={() => markTaskAsDoneOptimistically({ id })}>
          Mark as done.
        </button>
      )}
    </div>
  )
}

export default TaskPage

----------------------------------------

TITLE: Prisma Schema Definition with PostgreSQL
DESCRIPTION: Example of a Prisma schema file defining database configuration, models, and relationships for User and Task entities.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id      Int        @id @default(autoincrement())
  tasks   Task[]
}

model Task {
  id          Int        @id @default(autoincrement())
  description String
  isDone      Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
}

----------------------------------------

TITLE: Configuring Server in Wasp Application
DESCRIPTION: Basic server configuration in a Wasp application using setupFn and middlewareConfigFn

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  server: {
    setupFn: import { mySetupFunction } from "@src/myServerSetupCode.js",
    middlewareConfigFn: import { myMiddlewareConfigFn } from "@src/myServerSetupCode.js"
  }
}

----------------------------------------

TITLE: Rendering React Components in Tests with Wasp
DESCRIPTION: Demonstrates how to use the renderInContext helper function provided by Wasp to render React components in tests. This function wraps the component in necessary providers.

LANGUAGE: javascript
CODE:
import { renderInContext } from "wasp/client/test";

renderInContext(<MainPage />);

----------------------------------------

TITLE: Displaying Wasp CLI Command List
DESCRIPTION: Shows the output of running the 'wasp' command without arguments, listing all available commands and their descriptions.

LANGUAGE: bash
CODE:
USAGE
  wasp <command> [command-args]

COMMANDS
  GENERAL
    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.
      OPTIONS:
        -t|--template <template-name>
           Check out the templates list here: https://github.com/wasp-lang/starters

    new:ai <app-name> <app-description> [<config-json>]
      Uses AI to create a new Wasp project just based on the app name and the description.
      You can do the same thing with `wasp new` interactively.
      Run `wasp new:ai` for more info.

    version               Prints current version of CLI.
    waspls                Run Wasp Language Server. Add --help to get more info.
    completion            Prints help on bash completion.
    uninstall             Removes Wasp from your system.
  IN PROJECT
    start                 Runs Wasp app in development mode, watching for file changes.
    start db              Starts managed development database for you.
    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.
    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.
                          Wasp equivalent of 'have you tried closing and opening it again?'.
    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.
    deploy                Deploys your Wasp app to cloud hosting providers.
    telemetry             Prints telemetry status.
    deps                  Prints the dependencies that Wasp uses in your project.
    dockerfile            Prints the contents of the Wasp generated Dockerfile.
    info                  Prints basic information about the current Wasp project.
    test                  Executes tests in your project.
    studio                (experimental) GUI for inspecting your Wasp app.

EXAMPLES
  wasp new MyApp
  wasp start
  wasp db migrate-dev

Docs: https://wasp.sh/docs
Discord (chat): https://discord.gg/rzdnErX
Newsletter: https://wasp.sh/#signup

----------------------------------------

TITLE: Testing React Components with Mocked APIs in TypeScript
DESCRIPTION: Shows how to test React components that use API calls in TypeScript, including mocking the API responses and rendering the component in context.

LANGUAGE: typescript
CODE:
import { type Task } from "wasp/entities";
import { api } from "wasp/client/api";

const Todo = (_props: {}) => {
  const [tasks, setTasks] = useState<Task>([]);
  useEffect(() => {
    api
      .get("/tasks")
      .then((res) => res.json() as Task[])
      .then((tasks) => setTasks(tasks))
      .catch((err) => window.alert(err));
  });

  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: typescript
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import Todo from "./Todo";

const { mockApi } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockApi("/tasks", mockTasks);

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Rendering React Components in Tests with Wasp
DESCRIPTION: Demonstrates how to use the renderInContext helper function provided by Wasp to render React components in tests. This function wraps the component in necessary providers.

LANGUAGE: javascript
CODE:
import { renderInContext } from "wasp/client/test";

renderInContext(<MainPage />);

----------------------------------------

TITLE: Database Seeding Configuration in Wasp
DESCRIPTION: Wasp configuration for defining database seed functions.

LANGUAGE: javascript
CODE:
app MyApp {
  db: {
    seeds: [
      import { devSeedSimple } from "@src/dbSeeds.js",
      import { prodSeed } from "@src/dbSeeds.js"
    ]
  }
}

----------------------------------------

TITLE: Implementing WebSocket Client in React (TypeScript)
DESCRIPTION: Shows how to use WebSockets in a React component with TypeScript, leveraging Wasp's full-stack type safety. It includes typed event handling, payload types, and type-safe event emitters.

LANGUAGE: tsx
CODE:
import React, { useState } from 'react'
import {
  useSocket,
  useSocketListener,
  ServerToClientPayload,
} from 'wasp/client/webSocket'

export const ChatPage = () => {
  const [messageText, setMessageText] = useState<
    ClientToServerPayload<'chatMessage'>
  >('')
  const [messages, setMessages] = useState<
    ServerToClientPayload<'chatMessage'>[]
  >([])
  const { socket, isConnected } = useSocket()

  useSocketListener('chatMessage', logMessage)

  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {
    setMessages((priorMessages) => [msg, ...priorMessages])
  }

  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    socket.emit('chatMessage', messageText)
    setMessageText('')
  }

  const messageList = messages.map((msg) => (
    <li key={msg.id}>
      <em>{msg.username}</em>: {msg.text}
    </li>
  ))
  const connectionIcon = isConnected ? 'üü¢' : 'üî¥'

  return (
    <>
      <h2>Chat {connectionIcon}</h2>
      <div>
        <form onSubmit={handleSubmit}>
          <div>
            <div>
              <input
                type="text"
                value={messageText}
                onChange={(e) => setMessageText(e.target.value)}
              />
            </div>
            <div>
              <button type="submit">Submit</button>
            </div>
          </div>
        </form>
        <ul>{messageList}</ul>
      </div>
    </>
  )
}

----------------------------------------

TITLE: Defining Database Models and Configuration in Prisma Schema
DESCRIPTION: Example of a schema.prisma file defining database options, User and Task models with a one-to-many relationship.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id      Int        @id @default(autoincrement())
  tasks   Task[]
}

model Task {
  id          Int        @id @default(autoincrement())
  description String
  isDone      Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
}

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Example of declaring two queries in a .wasp file - one to fetch all tasks and another to fetch filtered tasks.

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@src/queries.js"
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@src/queries.js"
}

----------------------------------------

TITLE: CRUD Operations Declaration in Wasp
DESCRIPTION: Declares CRUD operations for the Task entity, including getAll, get, create and update operations with custom implementation for create.

LANGUAGE: wasp
CODE:
crud Tasks {
  entity: Task,
  operations: {
    getAll: {
      isPublic: true,
    },
    get: {},
    create: {
      overrideFn: import { createTask } from "@server/tasks.js",
    },
    update: {},
  },
}

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Example of declaring two queries in a .wasp file - one to fetch all tasks and another to fetch filtered tasks.

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@src/queries.js"
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@src/queries.js"
}

----------------------------------------

TITLE: Declaring createTask Action in Wasp
DESCRIPTION: Defines a Wasp Action for creating new tasks, specifying the implementation function and required entities.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions",
  entities: [Task]
}

----------------------------------------

TITLE: Defining Task Entity Schema in Prisma
DESCRIPTION: Prisma schema definition for a Task entity with id, description, and isDone fields.

LANGUAGE: prisma
CODE:
model Task {
  id          Int @id @default(autoincrement())
  description String
  isDone      Boolean
}

----------------------------------------

TITLE: Logout Button Implementation
DESCRIPTION: Implementation of a logout button component using Wasp's auth utilities

LANGUAGE: typescript
CODE:
import { logout } from 'wasp/client/auth'

const LogoutButton = () => {
  return <button onClick={logout}>Logout</button>
}

----------------------------------------

TITLE: Declaring Actions in Wasp
DESCRIPTION: How to declare Actions in a Wasp file, specifying the implementation function and associated entities.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions.js"
}

action markTaskAsDone {
  fn: import { markTaskAsDone } from "@src/actions.js"
}

----------------------------------------

TITLE: Enabling Prisma Preview Features in Wasp
DESCRIPTION: Example of enabling PostgreSQL extensions support, a Prisma preview feature, in the schema.prisma file when using Wasp.

LANGUAGE: prisma
CODE:
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// ...

----------------------------------------

TITLE: Customizing Base Path in Vite Configuration
DESCRIPTION: This snippet demonstrates how to set a custom base path for serving the client application, using '/my-app/' as an example.

LANGUAGE: javascript
CODE:
export default {
  base: '/my-app/',
}

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  base: '/my-app/',
})

----------------------------------------

TITLE: Using Social Login UI Helpers in React
DESCRIPTION: Shows how to use Wasp's provided UI helpers for social login buttons and URLs in a React component.

LANGUAGE: javascript
CODE:
import {
  GoogleSignInButton,
  googleSignInUrl,
  GitHubSignInButton,
  gitHubSignInUrl,
} from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <>
      <GoogleSignInButton />
      <GitHubSignInButton />
      {/* or */}
      <a href={googleSignInUrl}>Sign in with Google</a>
      <a href={gitHubSignInUrl}>Sign in with GitHub</a>
    </>
  )
}

LANGUAGE: typescript
CODE:
import {
  GoogleSignInButton,
  googleSignInUrl,
  GitHubSignInButton,
  gitHubSignInUrl,
} from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <>
      <GoogleSignInButton />
      <GitHubSignInButton />
      {/* or */}
      <a href={googleSignInUrl}>Sign in with Google</a>
      <a href={gitHubSignInUrl}>Sign in with GitHub</a>
    </>
  )
}

----------------------------------------

TITLE: Using Prisma Client in JavaScript
DESCRIPTION: Shows how to directly interact with entities using Prisma Client in JavaScript server code. Creates a new task with description and completion status.

LANGUAGE: javascript
CODE:
import prismaClient from '@wasp/dbClient'`

prismaClient.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

----------------------------------------

TITLE: Implementing Discord Auth Configuration Functions
DESCRIPTION: This code shows the implementation of the getConfig and userSignupFields functions for customizing Discord authentication in TypeScript.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  username: (data: any) => data.profile.global_name,
  avatarUrl: (data: any) => data.profile.avatar,
})

export function getConfig() {
  return {
    scopes: ['identify'],
  }
}

----------------------------------------

TITLE: Implementing Database Seed Function in TypeScript
DESCRIPTION: Example of a database seed function implementation in TypeScript with type definitions and interfaces.

LANGUAGE: typescript
CODE:
import { createTask } from './actions.js'
import { type DbSeedFn } from 'wasp/server'
import { sanitizeAndSerializeProviderData } from 'wasp/server/auth'
import { type AuthUser } from 'wasp/auth'
import { PrismaClient } from '@prisma/client'

export const devSeedSimple: DbSeedFn = async (prisma) => {
  const user = await createUser(prisma, {
    username: 'RiuTheDog',
    password: 'bark1234',
  })

  await createTask(
    { description: 'Chase the cat', isDone: false },
    { user, entities: { Task: prisma.task } }
  )
};

async function createUser(
  prisma: PrismaClient,
  data: { username: string, password: string }
): Promise<AuthUser> {
  const newUser = await prisma.user.create({
    data: {
      auth: {
        create: {
          identities: {
            create: {
              providerName: 'username',
              providerUserId: data.username,
              providerData: sanitizeAndSerializeProviderData<'username'>({
                hashedPassword: data.password
              }),
            },
          },
        },
      },
    },
  })

  return newUser
}

----------------------------------------

TITLE: Declaring Actions in Wasp
DESCRIPTION: Demonstrates how to declare Actions in a Wasp file, showing basic Action declarations for creating and updating tasks.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions.js"
}

action markTaskAsDone {
  fn: import { markTaskAsDone } from "@src/actions.js"
}

----------------------------------------

TITLE: Initializing New Wasp Project
DESCRIPTION: Command to create a new Wasp project named TodoApp

LANGUAGE: sh
CODE:
$ wasp new TodoApp

----------------------------------------

TITLE: Basic Client Configuration in Wasp
DESCRIPTION: Basic client configuration setup in a Wasp application showing rootComponent and setupFn configuration.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    rootComponent: import Root from "@src/Root.jsx",
    setupFn: import mySetupFunction from "@src/myClientSetupCode.js"
  }
}

----------------------------------------

TITLE: Configuring Email Authentication in Wasp
DESCRIPTION: Example of enabling email authentication in a Wasp application configuration file.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Using Entity Types in React Components
DESCRIPTION: This snippet shows how to use the Task Entity type within a React component in TypeScript, demonstrating type safety in the client-side code.

LANGUAGE: typescript
CODE:
import { Task } from "wasp/entities"

export function ExamplePage() {
  const task: Task = {
    id: 123,
    description: "Some random task",
    isDone: false,
  }
  return <div>{task.description}</div>
}

----------------------------------------

TITLE: Updating TypeScript Configuration
DESCRIPTION: Shows the required changes to the tsconfig.json file to support TypeScript project references in Wasp 0.16.0.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "outDir": ".wasp/out/user"
  },
  "include": [
    "src"
  ]
}

----------------------------------------

TITLE: Declaring getTasks Query in Wasp
DESCRIPTION: Defines a query declaration in main.wasp that specifies the implementation location and entity dependencies for the getTasks query.

LANGUAGE: wasp
CODE:
query getTasks {
  fn: import { getTasks } from "@src/queries",
  entities: [Task]
}

----------------------------------------

TITLE: Implementing Queries in JavaScript
DESCRIPTION: Example JavaScript implementation of the query functions to get all tasks and filtered tasks

LANGUAGE: javascript
CODE:
const tasks = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const getAllTasks = () => {
  return tasks
}

export const getFilteredTasks = (args) => {
  const { isDone } = args
  return tasks.filter((task) => task.isDone === isDone)
}

----------------------------------------

TITLE: Basic Client Configuration in Wasp
DESCRIPTION: Basic client configuration setup in a Wasp application showing rootComponent and setupFn configuration.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    rootComponent: import Root from "@src/Root.jsx",
    setupFn: import mySetupFunction from "@src/myClientSetupCode.js"
  }
}

----------------------------------------

TITLE: React Component Implementation in JavaScript
DESCRIPTION: Client-side React component that uses the getTasks query to display a list of tasks with loading and error states.

LANGUAGE: jsx
CODE:
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

const TaskView = ({ task }) => {
  return (
    <div>
      <input type="checkbox" id={String(task.id)} checked={task.isDone} />
      {task.description}
    </div>
  )
}

const TasksList = ({ tasks }) => {
  if (!tasks?.length) return <div>No tasks</div>

  return (
    <div>
      {tasks.map((task, idx) => (
        <TaskView task={task} key={idx} />
      ))}
    </div>
  )
}

----------------------------------------

TITLE: AuthIdentity Entity Structure in Wasp
DESCRIPTION: Internal AuthIdentity entity structure used by Wasp to store user login credentials for various authentication methods.

LANGUAGE: wasp
CODE:
entity AuthIdentity {=psl
  providerName   String
  providerUserId String
  providerData   String @default("{}")
  authId         String
  auth           Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)

  @@id([providerName, providerUserId])  
psl=}

----------------------------------------

TITLE: Implementing WebSocket Client in React (JavaScript)
DESCRIPTION: Demonstrates how to use WebSockets in a React component using the useSocket and useSocketListener hooks provided by Wasp. It includes handling connection status, sending messages, and updating the UI.

LANGUAGE: jsx
CODE:
import React, { useState } from 'react'
import {
  useSocket,
  useSocketListener,
} from 'wasp/client/webSocket'

export const ChatPage = () => {
  const [messageText, setMessageText] = useState('')
  const [messages, setMessages] = useState([])
  const { socket, isConnected } = useSocket()

  useSocketListener('chatMessage', logMessage)

  function logMessage(msg) {
    setMessages((priorMessages) => [msg, ...priorMessages])
  }

  function handleSubmit(e) {
    e.preventDefault()
    socket.emit('chatMessage', messageText)
    setMessageText('')
  }

  const messageList = messages.map((msg) => (
    <li key={msg.id}>
      <em>{msg.username}</em>: {msg.text}
    </li>
  ))
  const connectionIcon = isConnected ? 'üü¢' : 'üî¥'

  return (
    <>
      <h2>Chat {connectionIcon}</h2>
      <div>
        <form onSubmit={handleSubmit}>
          <div>
            <div>
              <input
                type="text"
                value={messageText}
                onChange={(e) => setMessageText(e.target.value)}
              />
            </div>
            <div>
              <button type="submit">Submit</button>
            </div>
          </div>
        </form>
        <ul>{messageList}</ul>
      </div>
    </>
  )
}

----------------------------------------

TITLE: Auth UI Components Implementation
DESCRIPTION: React components implementing the authentication UI including login, signup, email verification and password reset forms

LANGUAGE: typescript
CODE:
export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
    </Layout>
  )
}

----------------------------------------

TITLE: Defining Extra Signup Fields
DESCRIPTION: Example of defining additional fields for the signup process using the userSignupFields object.

LANGUAGE: javascript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: async (data) => {
    const address = data.address
    if (typeof address !== 'string') {
      throw new Error('Address is required')
    }
    if (address.length < 5) {
      throw new Error('Address must be at least 5 characters long')
    }
    return address
  },
})

----------------------------------------

TITLE: Implementing Queries in TypeScript
DESCRIPTION: Example of implementing the getAllTasks and getFilteredTasks queries in TypeScript with type annotations.

LANGUAGE: typescript
CODE:
import { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'

type Task = {
  id: number
  description: string
  isDone: boolean
}

const tasks: Task[] = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const getAllTasks: GetAllTasks<void, Task[]> = () => {
  return tasks
}

export const getFilteredTasks: GetFilteredTasks<
  Pick<Task, 'isDone'>,
  Task[]
> = (args) => {
  const { isDone } = args
  return tasks.filter((task) => task.isDone === isDone)
}

----------------------------------------

TITLE: Rendering React Components in Tests using renderInContext
DESCRIPTION: Demonstrates how to use the renderInContext helper function to render React components in tests. This function wraps the component in necessary providers for testing.

LANGUAGE: javascript
CODE:
import { renderInContext } from "wasp/client/test";

renderInContext(<MainPage />);

----------------------------------------

TITLE: Creating NewTaskForm React Component in JavaScript
DESCRIPTION: Defines a React component for creating new tasks, including a form and a submit handler that calls the createTask Action.

LANGUAGE: jsx
CODE:
const NewTaskForm = () => {
  const handleSubmit = async (event) => {
    event.preventDefault()
    try {
      const target = event.target
      const description = target.description.value
      target.reset()
      await createTask({ description })
    } catch (err) {
      window.alert('Error: ' + err.message)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="description" type="text" defaultValue="" />
      <input type="submit" value="Create task" />
    </form>
  )
}

----------------------------------------

TITLE: Accessing Client Environment Variables in JavaScript
DESCRIPTION: Demonstrates how to access client-side environment variables in a JavaScript file. These variables must be prefixed with REACT_APP_ to be recognized by Wasp.

LANGUAGE: javascript
CODE:
console.log(import.meta.env.REACT_APP_SOME_VAR_NAME)

----------------------------------------

TITLE: Declaring Actions in Wasp
DESCRIPTION: Example of declaring Actions in a .wasp file to create and modify tasks.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions.js"
}

action markTaskAsDone {
  fn: import { markTaskAsDone } from "@src/actions.js"
}

----------------------------------------

TITLE: Initializing a New Wasp Project
DESCRIPTION: Command to create a new Wasp project named TodoApp using the Wasp CLI.

LANGUAGE: sh
CODE:
$ wasp new TodoApp

----------------------------------------

TITLE: Using Prisma Client Directly in Wasp Server Code
DESCRIPTION: This example shows how to import and use the Prisma Client directly in Wasp server code for more advanced database operations.

LANGUAGE: javascript
CODE:
import { prisma } from 'wasp/server'

prisma.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

LANGUAGE: typescript
CODE:
import { prisma } from 'wasp/server'

prisma.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

----------------------------------------

TITLE: Using the Routes Object Builder
DESCRIPTION: Demonstrates programmatic route building using the routes object from wasp/client/router

LANGUAGE: jsx
CODE:
import { routes } from 'wasp/client/router'

const linkToTask = routes.TaskRoute.build({ params: { id: 1 } })

----------------------------------------

TITLE: Using Task Entity Types in TypeScript
DESCRIPTION: Shows how to import and use TypeScript types generated from Wasp entities, including type checking and function definitions.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'

const task: Task = { ... }

function getInfoMessage(task: Task): string {
  const isDoneText = task.isDone ? "is done" : "is not done"
  return `Task '${task.description}' is ${isDoneText}.`
}

----------------------------------------

TITLE: Configuring Google Auth in Wasp File
DESCRIPTION: Demonstrates how to enable Google Authentication in the Wasp configuration file by specifying the User entity and adding Google to the auth methods.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Configuring Discord Auth with Custom Fields
DESCRIPTION: This example shows how to configure Discord authentication with custom user signup fields and additional scopes.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      discord: {
        configFn: import { getConfig } from "@src/auth/discord.js",
        userSignupFields: import { userSignupFields } from "@src/auth/discord.js"
      }
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Enabling Email Authentication in Wasp File
DESCRIPTION: This snippet shows how to enable email authentication in the main.wasp file by configuring the auth object with email method settings.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "My App Postman",
          email: "hello@itsme.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

----------------------------------------

TITLE: Implementing getTasks Query in TypeScript
DESCRIPTION: Type-safe server-side implementation of the getTasks query with proper type annotations and Prisma client usage.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'
import { type GetTasks } from 'wasp/server/operations'

export const getTasks: GetTasks<void, Task[]> = async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Basic Client Configuration in Wasp
DESCRIPTION: Basic configuration of client-side settings in a Wasp application, including root component and setup function declarations.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    rootComponent: import Root from "@src/Root.jsx",
    setupFn: import mySetupFunction from "@src/myClientSetupCode.js"
  }
}

----------------------------------------

TITLE: Mocking Server and Queries in React Tests
DESCRIPTION: Shows how to use mockServer, mockQuery, and mockApi helpers to set up mocks for server requests, queries, and APIs in React component tests.

LANGUAGE: javascript
CODE:
import { mockServer } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";
import { HttpMethod } from "wasp/client";

const { mockQuery, mockApi } = mockServer();

mockQuery(getTasks, []);

mockApi({ method: HttpMethod.Get, path: "/foor/bar" }, { res: "hello" });

----------------------------------------

TITLE: Customizing Keycloak Authentication in Wasp
DESCRIPTION: This snippet demonstrates how to customize Keycloak authentication by specifying a config function and user signup fields.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      keycloak: {
        configFn: import { getConfig } from "@src/auth/keycloak.js",
        userSignupFields: import { userSignupFields } from "@src/auth/keycloak.js"
      }
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Setting Google OAuth Environment Variables
DESCRIPTION: Shows how to set the necessary environment variables for Google OAuth in the .env.server file.

LANGUAGE: bash
CODE:
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

----------------------------------------

TITLE: Using Queries with React Hooks
DESCRIPTION: Example of using queries in a React component with the useQuery hook.

LANGUAGE: typescript
CODE:
import React from 'react'
import { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'

const MainPage = () => {
  const { data: allTasks, error: error1 } = useQuery(getAllTasks)
  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {
    isDone: true,
  })

  if (error1 !== null || error2 !== null) {
    return <div>There was an error</div>
  }

  return (
    <div>
      <h2>All Tasks</h2>
      {allTasks && allTasks.length > 0
        ? allTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No tasks'}

      <h2>Finished Tasks</h2>
      {doneTasks && doneTasks.length > 0
        ? doneTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No finished tasks'}
    </div>
  )
}

----------------------------------------

TITLE: Implementing getTasks Query in TypeScript
DESCRIPTION: Type-safe server-side implementation of the getTasks query with proper type annotations and Prisma client usage.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'
import { type GetTasks } from 'wasp/server/operations'

export const getTasks: GetTasks<void, Task[]> = async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Mocking Wasp Queries in React Tests
DESCRIPTION: Illustrates how to mock a Wasp query in a test using the mockQuery function, which is useful when components use useQuery.

LANGUAGE: javascript
CODE:
import { getTasks } from "wasp/client/operations";

mockQuery(getTasks, []);

----------------------------------------

TITLE: Sending Telemetry Data for Wasp CLI Commands in JSON
DESCRIPTION: This JSON structure represents the telemetry data sent when a Wasp CLI command is invoked. It includes a unique user ID, project hash, build status, deploy command arguments, Wasp version, OS, and execution context.

LANGUAGE: json
CODE:
{
  "distinct_id": "bf3fa7a8-1c11-4f82-9542-ec1a2d28786b",
  "project_hash": "6d7e561d62b955d1",
  "is_build": true,
  "deploy_cmd_args": "fly;deploy",
  "wasp_version": "0.1.9.1",
  "os": "linux",
  "context": "CI"
}

----------------------------------------

TITLE: Rendering React Components in Tests with Wasp
DESCRIPTION: Demonstrates how to use the renderInContext helper function to render React components in tests, wrapping them in necessary providers.

LANGUAGE: javascript
CODE:
import { renderInContext } from "wasp/client/test";

renderInContext(<MainPage />);

----------------------------------------

TITLE: Disabling Automatic Browser Opening in Vite Dev Server (JavaScript)
DESCRIPTION: This snippet demonstrates how to customize the Vite config to prevent the browser from automatically opening when running 'wasp start'.

LANGUAGE: javascript
CODE:
export default {
  server: {
    open: false,
  },
}

----------------------------------------

TITLE: Basic CRUD Configuration in Wasp
DESCRIPTION: Simple CRUD declaration for Tasks entity with getAll, get, create and update operations

LANGUAGE: wasp
CODE:
crud Tasks {
  entity: Task,
  operations: {
    getAll: {
      isPublic: true,
    },
    get: {},
    create: {
      overrideFn: import { createTask } from "@src/tasks.js",
    },
    update: {},
  },
}

----------------------------------------

TITLE: Defining a Task Entity using Prisma Schema Language
DESCRIPTION: This snippet shows how to define a Task Entity using Prisma Schema Language in the schema.prisma file. It creates a model with id, description, and isDone fields.

LANGUAGE: prisma
CODE:
model Task {
  id          String  @id @default(uuid())
  description String
  isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Mocking Server Queries in Tests
DESCRIPTION: Demonstrates how to mock server queries using Wasp's mockServer and mockQuery utilities.

LANGUAGE: javascript
CODE:
import { mockServer } from "@wasp/test";
import getTasks from "@wasp/queries/getTasks";

const { mockQuery, mockApi } = mockServer();

mockQuery(getTasks, []);

----------------------------------------

TITLE: Creating Authentication Pages in React
DESCRIPTION: Implements React components for login, signup, email verification, and password reset pages using Wasp's Auth UI components.

LANGUAGE: jsx
CODE:
import {
  LoginForm,
  SignupForm,
  VerifyEmailForm,
  ForgotPasswordForm,
  ResetPasswordForm,
} from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
      <br />
      <span className="text-sm font-medium text-gray-900">
        Forgot your password? <Link to="/request-password-reset">reset it</Link>
        .
      </span>
    </Layout>
  );
}

export function Signup() {
  return (
    <Layout>
      <SignupForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </Layout>
  );
}

export function EmailVerification() {
  return (
    <Layout>
      <VerifyEmailForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        If everything is okay, <Link to="/login">go to login</Link>
      </span>
    </Layout>
  );
}

export function RequestPasswordReset() {
  return (
    <Layout>
      <ForgotPasswordForm />
    </Layout>
  );
}

export function PasswordReset() {
  return (
    <Layout>
      <ResetPasswordForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        If everything is okay, <Link to="/login">go to login</Link>
      </span>
    </Layout>
  );
}

// A layout component to center the content
export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Using the routes Object in React with Wasp
DESCRIPTION: Shows how to use the routes object from wasp/client/router to programmatically generate links in a React component.

LANGUAGE: jsx
CODE:
import { routes } from 'wasp/client/router'

const linkToTask = routes.TaskRoute.build({ params: { id: 1 } })

----------------------------------------

TITLE: Implementing Auth UI Components
DESCRIPTION: React component implementation for authentication pages using Wasp's auth components.

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: TypeScript Project Structure
DESCRIPTION: Directory structure for a Wasp project using TypeScript, highlighting the renamed MainPage.tsx file and other TypeScript-specific configurations.

LANGUAGE: css
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp          # Your Wasp code goes here.
‚îú‚îÄ‚îÄ schema.prisma      # Your Prisma schema goes here.
‚îú‚îÄ‚îÄ package.json       # Your dependencies and project info go here.
‚îú‚îÄ‚îÄ public             # Your static files (e.g., images, favicon) go here.
‚îú‚îÄ‚îÄ src                # Your source code (TS/JS/CSS/HTML) goes here.
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.tsx   # Renamed from MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Using Task Entity Type in TypeScript
DESCRIPTION: This example demonstrates how to import and use the Task entity type in TypeScript, including defining a function that works with the Task type.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'

const task: Task = { ... }

// You can also define functions for working with entities
function getInfoMessage(task: Task): string {
  const isDoneText = task.isDone ? "is done" : "is not done"
  return `Task '${task.description}' is ${isDoneText}.`
}

----------------------------------------

TITLE: Error Handling in Queries
DESCRIPTION: Example of throwing a custom HttpError in a query implementation.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const getAllTasks = async (args, context) => {
  throw new HttpError(
    403, // status code
    "You can't do this!", // message
    { foo: 'bar' } // data
  )
}

----------------------------------------

TITLE: Defining User Signup Fields in JavaScript
DESCRIPTION: This snippet shows how to define additional user signup fields using the `defineUserSignupFields` function from Wasp. It includes validation for a required address field and handling of a phone field.

LANGUAGE: javascript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: (data) => {
    if (!data.address) {
      throw new Error('Address is required')
    }
    return data.address
  }
  phone: (data) => data.phone,
})

----------------------------------------

TITLE: Custom Task Creation Implementation
DESCRIPTION: TypeScript implementation of custom task creation logic that connects tasks to authenticated users

LANGUAGE: typescript
CODE:
import { type Tasks } from 'wasp/server/crud'
import { type Task } from 'wasp/entities'
import { HttpError } from 'wasp/server'

type CreateTaskInput = { description: string; isDone: boolean }

export const createTask: Tasks.CreateAction<CreateTaskInput, Task> = async (
  args,
  context
) => {
  if (!context.user) {
    throw new HttpError(401, 'User not authenticated.')
  }

  const { description, isDone } = args
  const { Task } = context.entities

  return await Task.create({
    data: {
      description,
      isDone,
      user: {
        connect: {
          id: context.user.id,
        },
      },
    },
  })
}

----------------------------------------

TITLE: Deploying Wasp App to Fly.io
DESCRIPTION: Command to deploy a new Wasp application to Fly.io using the Wasp CLI. This single command automates the setup, database creation, and deployment process.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Configuring Google Auth in Wasp File
DESCRIPTION: This snippet shows how to enable Google Authentication in the Wasp configuration file by specifying the User entity and adding Google to the auth methods.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Configuring Datasource in Prisma Schema
DESCRIPTION: Demonstrates the required configuration for the datasource block in the schema.prisma file for Wasp projects.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

----------------------------------------

TITLE: Setting Client Environment Variables for Production Build in Wasp
DESCRIPTION: This command demonstrates how to provide production client environment variables directly to the build command when creating static files for deployment. It sets the REACT_APP_API_URL and REACT_APP_SOME_OTHER_VAR_NAME variables.

LANGUAGE: shell
CODE:
REACT_APP_API_URL=<url_to_wasp_backend> REACT_APP_SOME_OTHER_VAR_NAME=someothervalue npm run build

----------------------------------------

TITLE: Configuring Basic Auth in Wasp Application
DESCRIPTION: Shows how to configure authentication in a Wasp app by setting up the auth field in the app declaration with user entity and auth methods.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}, // use this or email, not both
      email: {}, // use this or usernameAndPassword, not both
      google: {},
      gitHub: {},
    },
    onAuthFailedRedirectTo: "/someRoute"
  }
}

----------------------------------------

TITLE: Accessing AuthUser Object Fields in TypeScript
DESCRIPTION: Example of the AuthUser object structure when a user has signed up with Google auth in a Wasp application.

LANGUAGE: typescript
CODE:
const user = {
  // User data
  id: 'cluqs9qyh00007cn73apj4hp7',
  address: 'Some address',

  // Auth methods specific data
  identities: {
    email: null,
    google: {
      id: '1117XXXX1301972049448',
    },
  },
}

----------------------------------------

TITLE: Configuring User Signup Fields in JavaScript
DESCRIPTION: Demonstrates how to define additional required fields (address and phone) during user signup using defineUserSignupFields. The address field includes validation to ensure it's provided, while phone is optional.

LANGUAGE: javascript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: (data) => {
    if (!data.address) {
      throw new Error('Address is required')
    }
    return data.address
  },
  phone: (data) => data.phone,
})

----------------------------------------

TITLE: Using Entities in APIs
DESCRIPTION: This code shows how to declare and use entities in APIs, including the Wasp declaration and the API implementation using the entity.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  entities: [Task],
  httpRoute: (GET, "/foo/bar")
}

LANGUAGE: typescript
CODE:
import { FooBar } from "wasp/server/api";

export const fooBar: FooBar = (req, res, context) => {
  res.json({ count: await context.entities.Task.count() });
};

----------------------------------------

TITLE: Using Entities in APIs
DESCRIPTION: This code shows how to declare and use entities in APIs, including the Wasp declaration and the API implementation using the entity.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  entities: [Task],
  httpRoute: (GET, "/foo/bar")
}

LANGUAGE: typescript
CODE:
import { FooBar } from "wasp/server/api";

export const fooBar: FooBar = (req, res, context) => {
  res.json({ count: await context.entities.Task.count() });
};

----------------------------------------

TITLE: Using Entities in APIs
DESCRIPTION: This code shows how to declare and use entities in APIs, including the Wasp declaration and the API implementation using the entity.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  entities: [Task],
  httpRoute: (GET, "/foo/bar")
}

LANGUAGE: typescript
CODE:
import { FooBar } from "wasp/server/api";

export const fooBar: FooBar = (req, res, context) => {
  res.json({ count: await context.entities.Task.count() });
};

----------------------------------------

TITLE: Implementing Login Page with LoginForm Component
DESCRIPTION: This snippet shows how to create a login page using the LoginForm component provided by Wasp.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/LoginPage.tsx"
}

LANGUAGE: tsx
CODE:
import { LoginForm } from 'wasp/client/auth'

// Use it like this
export function LoginPage() {
  return <LoginForm />
}

----------------------------------------

TITLE: Displaying Project Structure for JavaScript in Wasp
DESCRIPTION: Shows the file structure of a new Wasp project using JavaScript, including key files and directories.

LANGUAGE: plaintext
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp          # Your Wasp code goes here.
‚îú‚îÄ‚îÄ schema.prisma      # Your Prisma schema goes here.
‚îú‚îÄ‚îÄ package.json       # Your dependencies and project info go here.
‚îú‚îÄ‚îÄ public             # Your static files (e.g., images, favicon) go here.
‚îú‚îÄ‚îÄ src                # Your source code (TS/JS/CSS/HTML) goes here.
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Implementing API in TypeScript
DESCRIPTION: Example of implementing a custom API endpoint in TypeScript, including type information for the API function.

LANGUAGE: typescript
CODE:
import { FooBar } from "wasp/server/api";

export const fooBar: FooBar = (req, res, context) => {
  res.set("Access-Control-Allow-Origin", "*");
  res.json({ msg: `Hello, ${context.user ? "registered user" : "stranger"}!` });
};

----------------------------------------

TITLE: Implementing React Chat Component with WebSockets
DESCRIPTION: Client-side React component using WebSocket hooks for real-time chat functionality. Shows connection status and message handling.

LANGUAGE: typescript
CODE:
import React, { useState } from 'react'
import {
  useSocket,
  useSocketListener,
  ServerToClientPayload,
} from 'wasp/client/webSocket'

export const ChatPage = () => {
  const [messageText, setMessageText] = useState<ClientToServerPayload<'chatMessage'>>('')
  const [messages, setMessages] = useState<ServerToClientPayload<'chatMessage'>[]>([])
  const { socket, isConnected } = useSocket()

  useSocketListener('chatMessage', logMessage)

  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {
    setMessages((priorMessages) => [msg, ...priorMessages])
  }

  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    socket.emit('chatMessage', messageText)
    setMessageText('')
  }

  const messageList = messages.map((msg) => (
    <li key={msg.id}>
      <em>{msg.username}</em>: {msg.text}
    </li>
  ))
  const connectionIcon = isConnected ? 'üü¢' : 'üî¥'

  return (
    <>
      <h2>Chat {connectionIcon}</h2>
      <div>
        <form onSubmit={handleSubmit}>
          <div>
            <div>
              <input
                type="text"
                value={messageText}
                onChange={(e) => setMessageText(e.target.value)}
              />
            </div>
            <div>
              <button type="submit">Submit</button>
            </div>
          </div>
        </form>
        <ul>{messageList}</ul>
      </div>
    </>
  )
}

----------------------------------------

TITLE: Using Entities in Actions
DESCRIPTION: Example of declaring and using Entities in Actions.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions.js",
  entities: [Task]
}

action markTaskAsDone {
  fn: import { markTaskAsDone } from "@src/actions.js",
  entities: [Task]
}

LANGUAGE: javascript
CODE:
export const createTask = async (args, context) => {
  const newTask = await context.entities.Task.create({
    data: {
      description: args.description,
      isDone: false,
    },
  })
  return newTask
}

export const markTaskAsDone = async (args, context) => {
  await context.entities.Task.update({
    where: { id: args.id },
    data: { isDone: true },
  })
}

----------------------------------------

TITLE: Using Entities in Actions
DESCRIPTION: Example of declaring and using Entities in Actions.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions.js",
  entities: [Task]
}

action markTaskAsDone {
  fn: import { markTaskAsDone } from "@src/actions.js",
  entities: [Task]
}

LANGUAGE: javascript
CODE:
export const createTask = async (args, context) => {
  const newTask = await context.entities.Task.create({
    data: {
      description: args.description,
      isDone: false,
    },
  })
  return newTask
}

export const markTaskAsDone = async (args, context) => {
  await context.entities.Task.update({
    where: { id: args.id },
    data: { isDone: true },
  })
}

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Sets up username and password authentication in the Wasp app configuration, specifying the User entity and redirect behavior.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.12.0"
  },
  title: "TodoApp",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Accessing Client Environment Variables in TypeScript
DESCRIPTION: Shows the method for accessing client-side environment variables in a TypeScript file. Similar to JavaScript, these variables require the REACT_APP_ prefix.

LANGUAGE: typescript
CODE:
console.log(import.meta.env.REACT_APP_SOME_VAR_NAME)

----------------------------------------

TITLE: Using Prisma Client Directly in TypeScript
DESCRIPTION: This example shows how to import and use the Prisma client directly in TypeScript server code to create a new Task entity.

LANGUAGE: typescript
CODE:
import { prisma } from 'wasp/server'

prisma.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

----------------------------------------

TITLE: Defining Basic Web App Structure in Wasp
DESCRIPTION: This snippet demonstrates how to define a basic web application structure using Wasp declarations. It includes an app declaration, a route declaration, and a page declaration.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app"
}

route RootRoute { path: "/", to: DashboardPage }

page DashboardPage {
  component: import { DashboardPage } from "@src/Dashboard.jsx"
}

----------------------------------------

TITLE: Writing a Simple Unit Test in Wasp (TypeScript)
DESCRIPTION: Demonstrates writing a basic unit test for a helper function in a Wasp project using TypeScript and Vitest.

LANGUAGE: typescript
CODE:
import { type Task } from "wasp/entities";

export function areThereAnyTasks(tasks: Task[]): boolean {
  return tasks.length === 0;
}

LANGUAGE: typescript
CODE:
import { test, expect } from "vitest";

import { areThereAnyTasks } from "./helpers";

test("areThereAnyTasks", () => {
  expect(areThereAnyTasks([])).toBe(false);
});

----------------------------------------

TITLE: Using Queries on the Client
DESCRIPTION: Example of using the getAllTasks and getFilteredTasks queries on the client side.

LANGUAGE: javascript
CODE:
import { getAllTasks, getFilteredTasks } from 'wasp/client/operations'

// ...

const allTasks = await getAllTasks()
const doneTasks = await getFilteredTasks({ isDone: true })

----------------------------------------

TITLE: Installing a New Package with npm in Wasp
DESCRIPTION: This command demonstrates how to add a new package (date-fns) to a Wasp project using npm. It will automatically update the dependencies section in package.json.

LANGUAGE: bash
CODE:
npm install date-fns

----------------------------------------

TITLE: Defining Default Global Middleware in TypeScript
DESCRIPTION: This snippet shows the default global middleware configuration in Wasp for TypeScript applications. It includes type definitions and the same middleware as the JavaScript version.

LANGUAGE: typescript
CODE:
export type MiddlewareConfig = Map<string, express.RequestHandler>

export type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig

const defaultGlobalMiddleware: MiddlewareConfig = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

----------------------------------------

TITLE: Securing Task Operations
DESCRIPTION: Implementation of authenticated task operations with user context checking and filtering.

LANGUAGE: typescript
CODE:
import { HttpError } from 'wasp/server'

export const getTasks = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401)
  }
  return context.entities.Task.findMany({
    where: { user: { id: context.user.id } },
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Declaring CRUD Operations for Tasks in Wasp
DESCRIPTION: Demonstrates how to declare CRUD operations for the Task entity in the main.wasp file, including customizing the create operation.

LANGUAGE: wasp
CODE:
crud Tasks {
  entity: Task,
  operations: {
    getAll: {
      isPublic: true, // by default only logged in users can perform operations
    },
    get: {},
    create: {
      overrideFn: import { createTask } from "@src/tasks.js",
    },
    update: {},
  },
}

----------------------------------------

TITLE: Configuring Google Auth in Wasp File
DESCRIPTION: Basic configuration for enabling Google authentication in the main Wasp file, specifying the User entity and auth methods.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Error Handling in Actions
DESCRIPTION: Example of error handling in Actions using HttpError

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (args, context) => {
  throw new HttpError(
    403,
    "You can't do this!",
    { foo: 'bar' }
  )
}

----------------------------------------

TITLE: Error Handling in Actions
DESCRIPTION: Example of error handling in Actions using HttpError

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (args, context) => {
  throw new HttpError(
    403,
    "You can't do this!",
    { foo: 'bar' }
  )
}

----------------------------------------

TITLE: Accessing Client Environment Variables in TypeScript
DESCRIPTION: Shows how to import and use client-side environment variables in a TypeScript file using the 'env' object from 'wasp/client'.

LANGUAGE: typescript
CODE:
import { env } from 'wasp/client'

console.log(env.REACT_APP_SOME_VAR_NAME)

----------------------------------------

TITLE: Setting Server Domain Environment Variables in Wasp
DESCRIPTION: Configuration for setting up server-side environment variables that specify the client and server URLs. These variables are crucial for CORS and proper routing when using custom domains.

LANGUAGE: bash
CODE:
WASP_WEB_CLIENT_URL=https://myapp.com
WASP_SERVER_URL=https://server.myapp.com

----------------------------------------

TITLE: Defining Basic Web App Structure in Wasp
DESCRIPTION: This snippet demonstrates how to define a basic web application structure using Wasp declarations. It includes an app declaration, a route declaration, and a page declaration.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app"
}

route RootRoute { path: "/", to: DashboardPage }

page DashboardPage {
  component: import { DashboardPage } from "@src/Dashboard.jsx"
}

----------------------------------------

TITLE: Implementing Email Verification Page with VerifyEmailForm Component
DESCRIPTION: This snippet shows how to create an email verification page using the VerifyEmailForm component provided by Wasp.

LANGUAGE: wasp
CODE:
route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { VerifyEmailPage } from "@src/VerifyEmailPage.tsx"
}

LANGUAGE: tsx
CODE:
import { VerifyEmailForm } from 'wasp/client/auth'

// Use it like this
export function VerifyEmailPage() {
  return <VerifyEmailForm />
}

----------------------------------------

TITLE: Sending Emails with JavaScript/TypeScript
DESCRIPTION: Example of sending an email using the emailSender API, demonstrating how to specify sender details, recipient, subject, and message content in both text and HTML formats.

LANGUAGE: javascript
CODE:
import { emailSender } from "wasp/server/email";

// In some action handler...
const info = await emailSender.send({
  from: {
    name: "John Doe",
    email: "john@doe.com",
  },
  to: "user@domain.com",
  subject: "Saying hello",
  text: "Hello world",
  html: "Hello <strong>world</strong>",
});

----------------------------------------

TITLE: Declaring Wasp Operations
DESCRIPTION: Defines query and action operations in Wasp for retrieving and adding recipes.

LANGUAGE: wasp
CODE:
query getRecipes {
  fn: import { getRecipes } from "@src/recipe/operations",
  entities: [Recipe],
}

action addRecipe {
  fn: import { addRecipe } from "@src/recipe/operations",
  entities: [Recipe],
}

----------------------------------------

TITLE: Implementing Root Component with Common Layout in React
DESCRIPTION: Demonstrates how to create a root component that defines a common layout for the application, including header and footer.

LANGUAGE: jsx
CODE:
import { Outlet } from 'react-router-dom'

export default function Root() {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      // highlight-next-line
      <Outlet />
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

LANGUAGE: tsx
CODE:
import { Outlet } from 'react-router-dom'

export default function Root() {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      // highlight-next-line
      <Outlet />
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: Implementing Root Component with Common Layout in React
DESCRIPTION: Demonstrates how to create a root component that defines a common layout for the application, including header and footer.

LANGUAGE: jsx
CODE:
import { Outlet } from 'react-router-dom'

export default function Root() {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      // highlight-next-line
      <Outlet />
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

LANGUAGE: tsx
CODE:
import { Outlet } from 'react-router-dom'

export default function Root() {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      // highlight-next-line
      <Outlet />
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: Declaring a Job in Wasp
DESCRIPTION: This snippet demonstrates how to declare a job named 'mySpecialJob' in a Wasp file. It specifies the executor, perform function, and associated entities.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  entities: [Task],
}

----------------------------------------

TITLE: Building Wasp Application
DESCRIPTION: Command to build a Wasp application for deployment.

LANGUAGE: bash
CODE:
wasp build

----------------------------------------

TITLE: PostgreSQL Database Configuration in Prisma
DESCRIPTION: Prisma schema configuration for using PostgreSQL as the database provider.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

----------------------------------------

TITLE: Using useQuery Hook in React
DESCRIPTION: Example of using the useQuery hook to fetch data in a React component

LANGUAGE: typescript
CODE:
import React from 'react'
import { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'

const MainPage = () => {
  const { data: allTasks, error: error1 } = useQuery(getAllTasks)
  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {
    isDone: true
  })

  if (error1 !== null || error2 !== null) {
    return <div>There was an error</div>
  }

  return (
    <div>
      <h2>All Tasks</h2>
      {allTasks && allTasks.length > 0 
        ? allTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No tasks'}
      
      <h2>Finished Tasks</h2>
      {doneTasks && doneTasks.length > 0
        ? doneTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No finished tasks'}
    </div>
  )
}

----------------------------------------

TITLE: Configuring Query Client in Setup Function
DESCRIPTION: Shows how to configure the Query Client using the configureQueryClient hook in the client setup function.

LANGUAGE: javascript
CODE:
import { configureQueryClient } from 'wasp/client/operations'

export default async function mySetupFunction() {
  // ... some setup
  configureQueryClient({
    defaultOptions: {
      queries: {
        staleTime: Infinity,
      },
    },
  })
  // ... some more setup
}

LANGUAGE: typescript
CODE:
import { configureQueryClient } from 'wasp/client/operations'

export default async function mySetupFunction(): Promise<void> {
  // ... some setup
  configureQueryClient({
    defaultOptions: {
      queries: {
        staleTime: Infinity,
      },
    },
  })
  // ... some more setup
}

----------------------------------------

TITLE: Configuring Query Client in Setup Function
DESCRIPTION: Shows how to configure the Query Client using the configureQueryClient hook in the client setup function.

LANGUAGE: javascript
CODE:
import { configureQueryClient } from 'wasp/client/operations'

export default async function mySetupFunction() {
  // ... some setup
  configureQueryClient({
    defaultOptions: {
      queries: {
        staleTime: Infinity,
      },
    },
  })
  // ... some more setup
}

LANGUAGE: typescript
CODE:
import { configureQueryClient } from 'wasp/client/operations'

export default async function mySetupFunction(): Promise<void> {
  // ... some setup
  configureQueryClient({
    defaultOptions: {
      queries: {
        staleTime: Infinity,
      },
    },
  })
  // ... some more setup
}

----------------------------------------

TITLE: Implementing WebSocket Server Handler in JavaScript
DESCRIPTION: Server-side WebSocket implementation using Socket.IO in JavaScript. Handles connection events and chat messages.

LANGUAGE: javascript
CODE:
import { v4 as uuidv4 } from 'uuid'
import { getFirstProviderUserId } from 'wasp/auth'

export const webSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
    })
  })
}

----------------------------------------

TITLE: Creating Auth Pages in React
DESCRIPTION: This snippet shows how to create the Login and Signup components using Wasp's Auth UI components in a React file.

LANGUAGE: javascript
CODE:
import { LoginForm, SignupForm } from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
    </Layout>
  );
}

export function Signup() {
  return (
    <Layout>
      <SignupForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </Layout>
  );
}

// A layout component to center the content
export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Adding a Custom Route in Server Setup (TypeScript)
DESCRIPTION: Example of adding a custom route in the server setup function for a TypeScript Wasp application. It includes type annotations and demonstrates how to add a new route to the Express app.

LANGUAGE: typescript
CODE:
import { ServerSetupFn } from 'wasp/server'
import { Application } from 'express'

export const mySetupFunction: ServerSetupFn = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app: Application) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

----------------------------------------

TITLE: Updating React Router useHistory to useNavigate
DESCRIPTION: Demonstrates how to replace the useHistory hook with useNavigate in React Router 6.

LANGUAGE: tsx
CODE:
import { useNavigate } from 'react-router-dom'

export function SomePage() {
  const navigate = useNavigate()
  const handleClick = () => {
    navigate('/new-route')
  }
  return <button onClick={handleClick}>Go to new route</button>
}

----------------------------------------

TITLE: Using Actions in React Components
DESCRIPTION: Example showing how to use Actions within a React component

LANGUAGE: jsx
CODE:
import React from 'react'
import { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'

export const TaskPage = ({ id }) => {
  const { data: task } = useQuery(getTask, { id })

  if (!task) {
    return <h1>"Loading"</h1>
  }

  const { description, isDone } = task
  return (
    <div>
      <p>
        <strong>Description: </strong>
        {description}
      </p>
      <p>
        <strong>Is done: </strong>
        {isDone ? 'Yes' : 'No'}
      </p>
      {isDone || (
        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>
      )}
    </div>
  )

----------------------------------------

TITLE: Setting Server Environment Variables in Production (Fly.io Example)
DESCRIPTION: Shows how to set server-side environment variables in a production environment using Fly.io as an example. The method will vary depending on the hosting provider.

LANGUAGE: shell
CODE:
flyctl secrets set SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Custom Signup Action in TypeScript
DESCRIPTION: Implementation of a custom signup action in a Wasp application using the Auth and AuthIdentity entities.

LANGUAGE: typescript
CODE:
import {
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'
import type { CustomSignup } from 'wasp/server/operations'

type CustomSignupInput = {
  username: string
  password: string
}
type CustomSignupOutput = {
  success: boolean
  message: string
}

export const signup: CustomSignup<
  CustomSignupInput,
  CustomSignupOutput
> = async (args, { entities: { User } }) => {
  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData<'username'>({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      {}
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: Adding a Custom Route in Server Setup (TypeScript)
DESCRIPTION: Example of adding a custom route in the server setup function for a TypeScript Wasp application. It includes type annotations and demonstrates how to add a new route to the Express app.

LANGUAGE: typescript
CODE:
import { ServerSetupFn } from 'wasp/server'
import { Application } from 'express'

export const mySetupFunction: ServerSetupFn = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app: Application) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

----------------------------------------

TITLE: Simplified Main Page Component
DESCRIPTION: This snippet shows a cleaned-up version of the MainPage component, reduced to a simple 'Hello world!' message for both JavaScript and TypeScript.

LANGUAGE: jsx
CODE:
export const MainPage = () => {
  return <div>Hello world!</div>
}

LANGUAGE: tsx
CODE:
export const MainPage = () => {
  return <div>Hello world!</div>
}

----------------------------------------

TITLE: Implementing Queries in JavaScript
DESCRIPTION: Example of implementing the getAllTasks and getFilteredTasks queries in JavaScript.

LANGUAGE: javascript
CODE:
const tasks = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const getAllTasks = () => {
  return tasks
}

export const getFilteredTasks = (args) => {
  const { isDone } = args
  return tasks.filter((task) => task.isDone === isDone)
}

----------------------------------------

TITLE: Configuring CORS for APIs
DESCRIPTION: This snippet demonstrates how to configure CORS for APIs using an apiNamespace declaration in Wasp and its implementation in JavaScript.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@src/apis",
  path: "/foo"
}

LANGUAGE: javascript
CODE:
export const apiMiddleware = (config) => {
  return config;
};

----------------------------------------

TITLE: Configuring Basic App Settings in Wasp
DESCRIPTION: This snippet demonstrates the basic structure of an 'app' declaration in Wasp, including setting the Wasp version, app title, and adding a custom stylesheet to the head.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ]
}

----------------------------------------

TITLE: Using Prisma Client with Entities in JavaScript
DESCRIPTION: This snippet shows how to import and use the Prisma Client directly in Wasp server code to create a new Task entity.

LANGUAGE: javascript
CODE:
import { prisma } from 'wasp/server'

prisma.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

----------------------------------------

TITLE: Configuring Basic App Settings in Wasp
DESCRIPTION: This snippet demonstrates the basic structure of an 'app' declaration in Wasp, including setting the Wasp version, app title, and adding a custom stylesheet to the head.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ]
}

----------------------------------------

TITLE: Implementing Auth Pages in React
DESCRIPTION: React components implementing login and signup pages using Wasp's auth components

LANGUAGE: typescript
CODE:
import { LoginForm, SignupForm } from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
    </Layout>
  )
}

export function Signup() {
  return (
    <Layout>
      <SignupForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </Layout>
  )
}

----------------------------------------

TITLE: Implementing Login Page Component
DESCRIPTION: Creates a React component for the login page using Wasp's LoginForm.

LANGUAGE: jsx
CODE:
import { Link } from 'react-router-dom'
import { LoginForm } from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <div style={{ maxWidth: '400px', margin: '0 auto' }}>
      <LoginForm />
      <br />
      <span>
        I don't have an account yet (<Link to="/signup">go to signup</Link>).
      </span>
    </div>
  )
}

----------------------------------------

TITLE: Importing and Using Image URL in React Component (TypeScript)
DESCRIPTION: This snippet shows how to import an image file as a URL and use it in a React component in TypeScript. The process is identical to the JavaScript version, demonstrating TypeScript compatibility.

LANGUAGE: tsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Importing and Using Image URL in React Component (TypeScript)
DESCRIPTION: This snippet shows how to import an image file as a URL and use it in a React component in TypeScript. The process is identical to the JavaScript version, demonstrating TypeScript compatibility.

LANGUAGE: tsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Declaring an API in Wasp
DESCRIPTION: This snippet shows how to declare an API in the Wasp file, specifying the implementation function and HTTP route.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  httpRoute: (GET, "/foo/bar")
}

----------------------------------------

TITLE: Implementing Custom Create Task Operation in JavaScript
DESCRIPTION: Shows the implementation of a custom create task operation that connects the new task to the authenticated user.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401, 'User not authenticated.')
  }

  const { description, isDone } = args
  const { Task } = context.entities

  return await Task.create({
    data: {
      description,
      isDone,
      user: {
        connect: {
          id: context.user.id,
        },
      },
    },
  })
}

----------------------------------------

TITLE: Customizing API-specific Middleware in Wasp and JavaScript
DESCRIPTION: This example demonstrates how to customize middleware for a specific API route in a Wasp application using JavaScript. It replaces the JSON parser with a raw body parser for a webhook callback.

LANGUAGE: wasp
CODE:
api webhookCallback {
  fn: import { webhookCallback } from "@src/apis",
  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from "@src/apis",
  httpRoute: (POST, "/webhook/callback"),
  auth: false
}

LANGUAGE: javascript
CODE:
import express from 'express'

export const webhookCallback = (req, res, _context) => {
  res.json({ msg: req.body.length })
}

export const webhookCallbackMiddlewareFn = (middlewareConfig) => {
  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')

  middlewareConfig.delete('express.json')
  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))

  return middlewareConfig
}

----------------------------------------

TITLE: Implementing API in NodeJS (JavaScript)
DESCRIPTION: Demonstrates how to implement the API function in JavaScript, handling the request, response, and context objects.

LANGUAGE: javascript
CODE:
export const fooBar = (req, res, context) => {
  res.set("Access-Control-Allow-Origin", "*");
  res.json({ msg: `Hello, ${context.user ? "registered user" : "stranger"}!` });
};

----------------------------------------

TITLE: Implementing API in NodeJS (JavaScript)
DESCRIPTION: Demonstrates how to implement the API function in JavaScript, handling the request, response, and context objects.

LANGUAGE: javascript
CODE:
export const fooBar = (req, res, context) => {
  res.set("Access-Control-Allow-Origin", "*");
  res.json({ msg: `Hello, ${context.user ? "registered user" : "stranger"}!` });
};

----------------------------------------

TITLE: Final Wasp Configuration for TodoApp
DESCRIPTION: This snippet shows the final state of the main.wasp file after cleaning up. It includes the app declaration, version specification, title, and the root route and page declarations.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "TodoApp"
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Defining Task Entity Model in Prisma
DESCRIPTION: Creates a Task entity model in the schema.prisma file with fields for id, description, and completion status. The model uses auto-incrementing IDs and includes a default false value for the isDone field.

LANGUAGE: prisma
CODE:
// ...

model Task {
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Defining Task Entity Model in Prisma
DESCRIPTION: Creates a Task entity model in the schema.prisma file with fields for id, description, and completion status. The model uses auto-incrementing IDs and includes a default false value for the isDone field.

LANGUAGE: prisma
CODE:
// ...

model Task {
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Updating MainPage Component with NewTaskForm
DESCRIPTION: Adds the NewTaskForm component to the MainPage component, allowing users to create new tasks.

LANGUAGE: jsx
CODE:
const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      <NewTaskForm />

      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

----------------------------------------

TITLE: Updating MainPage Component with NewTaskForm
DESCRIPTION: Adds the NewTaskForm component to the MainPage component, allowing users to create new tasks.

LANGUAGE: jsx
CODE:
const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      <NewTaskForm />

      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

----------------------------------------

TITLE: React Component Using Query in JavaScript
DESCRIPTION: Client-side React component that uses the getTasks query to fetch and display tasks using Wasp's useQuery hook.

LANGUAGE: jsx
CODE:
import getTasks from '@wasp/queries/getTasks'
import { useQuery } from '@wasp/queries'

const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

const Task = ({ task }) => {
  return (
    <div>
      <input type="checkbox" id={String(task.id)} checked={task.isDone} />
      {task.description}
    </div>
  )
}

const TasksList = ({ tasks }) => {
  if (!tasks?.length) return <div>No tasks</div>

  return (
    <div>
      {tasks.map((task, idx) => (
        <Task task={task} key={idx} />
      ))}
    </div>
  )
}

export default MainPage

----------------------------------------

TITLE: Accessing Server Environment Variables in JavaScript/TypeScript
DESCRIPTION: Shows how to access server-side environment variables using process.env in both JavaScript and TypeScript environments.

LANGUAGE: javascript
CODE:
console.log(process.env.SOME_VAR_NAME)

LANGUAGE: typescript
CODE:
console.log(process.env.SOME_VAR_NAME)

----------------------------------------

TITLE: Defining WebSocket Server Logic in TypeScript
DESCRIPTION: Illustrates the implementation of server-side WebSocket logic in TypeScript. It includes type definitions for events and payloads, providing full-stack type safety when used with client-side code.

LANGUAGE: typescript
CODE:
import { v4 as uuidv4 } from 'uuid'
import { getFirstProviderUserId } from 'wasp/auth'
import { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'

export const webSocketFn: WebSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
      // You can also use your entities here:
      // await context.entities.SomeEntity.create({ someField: msg })
    })
  })
}

type WebSocketFn = WebSocketDefinition<
  ClientToServerEvents,
  ServerToClientEvents,
  InterServerEvents,
  SocketData
>

interface ServerToClientEvents {
  chatMessage: (msg: { id: string, username: string, text: string }) => void;
}

interface ClientToServerEvents {
  chatMessage: (msg: string) => void;
}

interface InterServerEvents {}

interface SocketData extends WaspSocketData {}

----------------------------------------

TITLE: Defining WebSocket Server Logic in JavaScript
DESCRIPTION: Demonstrates how to define the WebSocket server logic using Socket.IO in JavaScript. It includes handling connections, custom events, and accessing user data.

LANGUAGE: javascript
CODE:
import { v4 as uuidv4 } from 'uuid'
import { getFirstProviderUserId } from 'wasp/auth'

export const webSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
      // You can also use your entities here:
      // await context.entities.SomeEntity.create({ someField: msg })
    })
  })
}

----------------------------------------

TITLE: SQLite Database Configuration in Prisma
DESCRIPTION: Basic Prisma schema configuration for using SQLite as the database provider.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

----------------------------------------

TITLE: Creating New Wasp TypeScript Todo Project
DESCRIPTION: Command to create a new Wasp project using the todo-ts template which includes username/password authentication and full-stack type safety.

LANGUAGE: bash
CODE:
wasp new <project-name> -t todo-ts

----------------------------------------

TITLE: Accessing Client Configuration in Wasp
DESCRIPTION: Shows how to import and use the client configuration object in Wasp. The configuration object includes fields like apiUrl, which can be set using environment variables.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/client'

console.log(config.apiUrl)

----------------------------------------

TITLE: Defining WebSocket Server Logic in JavaScript
DESCRIPTION: Demonstrates how to define the WebSocket server logic using Socket.IO in JavaScript. It includes handling connections, custom events, and accessing user data.

LANGUAGE: javascript
CODE:
import { v4 as uuidv4 } from 'uuid'
import { getFirstProviderUserId } from 'wasp/auth'

export const webSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
      // You can also use your entities here:
      // await context.entities.SomeEntity.create({ someField: msg })
    })
  })
}

----------------------------------------

TITLE: Logout Button Implementation
DESCRIPTION: Implementation of a logout button component using Wasp's auth utilities.

LANGUAGE: typescript
CODE:
import { logout } from 'wasp/client/auth'

const LogoutButton = () => {
  return <button onClick={logout}>Logout</button>
}

----------------------------------------

TITLE: Testing React Components with Mocked APIs in Wasp
DESCRIPTION: Example of testing a React component that uses API calls, demonstrating how to mock API responses using Wasp's mockApi function.

LANGUAGE: jsx
CODE:
import { api } from "wasp/client/api";

const Todo = (_props) => {
  const [tasks, setTasks] = useState([]);
  useEffect(() => {
    api
      .get("/tasks")
      .then((res) => res.json())
      .then((tasks) => setTasks(tasks))
      .catch((err) => window.alert(err));
  });

  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: jsx
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import Todo from "./Todo";

const { mockApi } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockApi("/tasks", { res: mockTasks });

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Initializing a Wasp App with Authentication
DESCRIPTION: This snippet demonstrates how to initialize a Wasp application named 'RecipeApp' with a title and authentication settings using username and password.

LANGUAGE: wasp
CODE:
app RecipeApp {
  title: "My Recipes",
  wasp: { version: "^0.11.0" },
  auth: {
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login",
    userEntity: User
  }
}

----------------------------------------

TITLE: React Form Component for Task Creation
DESCRIPTION: Client-side React component implementing a form that calls the createTask action when submitted. Includes error handling and form reset functionality.

LANGUAGE: typescript
CODE:
const NewTaskForm = () => {
  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    try {
      const target = event.target as HTMLFormElement
      const description = target.description.value
      target.reset()
      await createTask({ description })
    } catch (err: any) {
      window.alert('Error: ' + err.message)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="description" type="text" defaultValue="" />
      <input type="submit" value="Create task" />
    </form>
  )
}

----------------------------------------

TITLE: Using Queries on the Client
DESCRIPTION: Example of using queries on the client side in JavaScript and TypeScript.

LANGUAGE: javascript
CODE:
import { getAllTasks, getFilteredTasks } from 'wasp/client/operations'

const allTasks = await getAllTasks()
const doneTasks = await getFilteredTasks({ isDone: true })

LANGUAGE: typescript
CODE:
import { getAllTasks, getFilteredTasks } from 'wasp/client/operations'

const allTasks = await getAllTasks()
const doneTasks = await getFilteredTasks({ isDone: true })

----------------------------------------

TITLE: Accessing Client Configuration in Wasp
DESCRIPTION: Shows how to import and use the client configuration object in Wasp. The configuration object includes fields like apiUrl, which can be set using environment variables.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/client'

console.log(config.apiUrl)

----------------------------------------

TITLE: Configuring SQLite Database Connection in Prisma
DESCRIPTION: Default Prisma schema configuration for SQLite database connection in Wasp applications.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

----------------------------------------

TITLE: Implementing updateTask Action in TypeScript
DESCRIPTION: Implements the updateTask Action as a TypeScript function with type annotations for full-stack type safety.

LANGUAGE: typescript
CODE:
import { CreateTask, UpdateTask } from 'wasp/server/operations'

type UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>

export const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (
  { id, isDone },
  context
) => {
  return context.entities.Task.update({
    where: { id },
    data: {
      isDone: isDone,
    },
  })
}

----------------------------------------

TITLE: Defining WebSocket Server Logic in JavaScript
DESCRIPTION: Shows how to implement the server-side WebSocket logic in JavaScript. It defines event handlers for connection and chat messages, demonstrating the use of Socket.IO and Wasp's context object.

LANGUAGE: javascript
CODE:
import { v4 as uuidv4 } from 'uuid'
import { getFirstProviderUserId } from 'wasp/auth'

export const webSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
      // You can also use your entities here:
      // await context.entities.SomeEntity.create({ someField: msg })
    })
  })
}

----------------------------------------

TITLE: Implementing Signup Page Component
DESCRIPTION: Creates a React component for the signup page using Wasp's SignupForm.

LANGUAGE: jsx
CODE:
import { Link } from 'react-router-dom'
import { SignupForm } from 'wasp/client/auth'

export const SignupPage = () => {
  return (
    <div style={{ maxWidth: '400px', margin: '0 auto' }}>
      <SignupForm />
      <br />
      <span>
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </div>
  )
}

----------------------------------------

TITLE: User-Task Relation Schema
DESCRIPTION: Defines a one-to-many relationship between User and Task entities in Prisma schema.

LANGUAGE: prisma
CODE:
model User {
  id    Int    @id @default(autoincrement())
  tasks Task[]
}

model Task {
  id          Int     @id @default(autoincrement())
  description String
  isDone      Boolean @default(false)
  user        User?   @relation(fields: [userId], references: [id])
  userId      Int?
}

----------------------------------------

TITLE: Implementing getTasks Query in JavaScript
DESCRIPTION: Server-side implementation of the getTasks query that retrieves tasks from the database using Prisma client.

LANGUAGE: javascript
CODE:
export const getTasks = async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Simplified MainPage Component in React
DESCRIPTION: This snippet shows a cleaned-up version of the MainPage component, with most of the starter code removed. It's a basic 'Hello world' example.

LANGUAGE: jsx
CODE:
export const MainPage = () => {
  return <div>Hello world!</div>
}

----------------------------------------

TITLE: Implementing Custom Validation with Zod's superRefine in React
DESCRIPTION: This snippet demonstrates how to use Zod's superRefine function to implement custom validation logic for username and city fields in a React form.

LANGUAGE: tsx
CODE:
.superRefine((data, ctx) => {
      if (data.username.includes(' ')) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'Username cannot contain spaces',
          path: ['username'],
        });
      }

      if (/^\d+$/.test(data.city)) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'City name cannot be purely numeric',
          path: ['city'],
        });
      }
  });

----------------------------------------

TITLE: Storing Global Values in Server Setup
DESCRIPTION: Example of storing and accessing global values using server setup function and queries

LANGUAGE: javascript
CODE:
let someResource = undefined

export const mySetupFunction = async () => {
  someResource = await setUpSomeResource()
  startSomeCronJob()
}

export const getSomeResource = () => someResource

LANGUAGE: typescript
CODE:
import { type ServerSetupFn } from 'wasp/server'

let someResource = undefined

export const mySetupFunction: ServerSetupFn = async () => {
  someResource = await setUpSomeResource()
  startSomeCronJob()  
}

export const getSomeResource = () => someResource

----------------------------------------

TITLE: Creating a Wasp Project with Vector Similarity Search Template
DESCRIPTION: This snippet demonstrates how to create a new Wasp project using the Vector Similarity Search template. The template includes features for generating embeddings and performing vector similarity search on text data.

LANGUAGE: bash
CODE:
wasp new <project-name> -t embeddings

----------------------------------------

TITLE: Declaring Auth Hooks in Wasp
DESCRIPTION: Example of how to declare authentication hooks in a Wasp application file.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  auth: {
    userEntity: User,
    methods: {
      ...
    },
    onBeforeSignup: import { onBeforeSignup } from "@src/auth/hooks",
    onAfterSignup: import { onAfterSignup } from "@src/auth/hooks",
    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from "@src/auth/hooks",
    onBeforeLogin: import { onBeforeLogin } from "@src/auth/hooks",
    onAfterLogin: import { onAfterLogin } from "@src/auth/hooks",
  },
}

----------------------------------------

TITLE: Implementing Query Function in TypeScript
DESCRIPTION: Type-safe server-side implementation of the getTasks query function with proper type annotations.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'
import { type GetTasks } from 'wasp/server/operations'

export const getTasks: GetTasks<void, Task[]> = async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Adding Tailwind Directives to CSS in Wasp
DESCRIPTION: This code snippet shows how to include Tailwind directives in a CSS file for a Wasp project. It imports the base, components, and utilities layers of Tailwind.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;

/* rest of content below */

----------------------------------------

TITLE: Adding Tailwind Directives to CSS in Wasp
DESCRIPTION: This code snippet shows how to include Tailwind directives in a CSS file for a Wasp project. It imports the base, components, and utilities layers of Tailwind.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;

/* rest of content below */

----------------------------------------

TITLE: React Frontend Implementation
DESCRIPTION: Main page React component implementation with excuse fetching and saving functionality

LANGUAGE: javascript
CODE:
import React, { useState } from 'react'
import { useQuery } from '@wasp/queries'
import getExcuse from '@wasp/queries/getExcuse'
import getAllSavedExcuses from '@wasp/queries/getAllSavedExcuses'
import saveExcuse from '@wasp/actions/saveExcuse'

const MainPage = () => {
  const [currentExcuse, setCurrentExcuse] = useState({ text: "" })
  const { data: excuses } = useQuery(getAllSavedExcuses)

  const handleGetExcuse = async () => {
    try {
      setCurrentExcuse(await getExcuse())
    } catch (err) {
      window.alert('Error while getting the excuse: ' + err.message)
    }
  }

  const handleSaveExcuse = async () => {
    if (currentExcuse.text) {
      try {
        await saveExcuse(currentExcuse)
      } catch (err) {
        window.alert('Error while saving the excuse: ' + err.message)
      }
    }
  }

  return (
    <div className="grid grid-cols-2 text-3xl">
      <div>
          <button onClick={handleGetExcuse} className="mx-2 my-1 p-2 bg-blue-600 hover:bg-blue-400 text-white rounded"> Get excuse </button>
          <button onClick={handleSaveExcuse} className="mx-2 my-1 p-2 bg-blue-600 hover:bg-blue-400 text-white rounded"> Save excuse </button>
        <Excuse excuse={currentExcuse} />
      </div>
      <div>
        <div className="px-6 py-2 bg-blue-600 text-white"> Saved excuses: </div>
        {excuses && <ExcuseList excuses={excuses} />}
      </div>
    </div>
  )
}

const ExcuseList = (props) => { 
  return props.excuses?.length ?  props.excuses.map((excuse, idx) => <Excuse excuse={excuse} key={idx} />) : 'No saved excuses'
}

const Excuse = ({ excuse }) => {
  return (
    <div className="px-6 py-2">
      {excuse.text}
    </div>
  )
}

export default MainPage

----------------------------------------

TITLE: React Frontend Implementation
DESCRIPTION: Main page React component implementation with excuse fetching and saving functionality

LANGUAGE: javascript
CODE:
import React, { useState } from 'react'
import { useQuery } from '@wasp/queries'
import getExcuse from '@wasp/queries/getExcuse'
import getAllSavedExcuses from '@wasp/queries/getAllSavedExcuses'
import saveExcuse from '@wasp/actions/saveExcuse'

const MainPage = () => {
  const [currentExcuse, setCurrentExcuse] = useState({ text: "" })
  const { data: excuses } = useQuery(getAllSavedExcuses)

  const handleGetExcuse = async () => {
    try {
      setCurrentExcuse(await getExcuse())
    } catch (err) {
      window.alert('Error while getting the excuse: ' + err.message)
    }
  }

  const handleSaveExcuse = async () => {
    if (currentExcuse.text) {
      try {
        await saveExcuse(currentExcuse)
      } catch (err) {
        window.alert('Error while saving the excuse: ' + err.message)
      }
    }
  }

  return (
    <div className="grid grid-cols-2 text-3xl">
      <div>
          <button onClick={handleGetExcuse} className="mx-2 my-1 p-2 bg-blue-600 hover:bg-blue-400 text-white rounded"> Get excuse </button>
          <button onClick={handleSaveExcuse} className="mx-2 my-1 p-2 bg-blue-600 hover:bg-blue-400 text-white rounded"> Save excuse </button>
        <Excuse excuse={currentExcuse} />
      </div>
      <div>
        <div className="px-6 py-2 bg-blue-600 text-white"> Saved excuses: </div>
        {excuses && <ExcuseList excuses={excuses} />}
      </div>
    </div>
  )
}

const ExcuseList = (props) => { 
  return props.excuses?.length ?  props.excuses.map((excuse, idx) => <Excuse excuse={excuse} key={idx} />) : 'No saved excuses'
}

const Excuse = ({ excuse }) => {
  return (
    <div className="px-6 py-2">
      {excuse.text}
    </div>
  )
}

export default MainPage

----------------------------------------

TITLE: Using updateTask Action in React Task Component (JavaScript)
DESCRIPTION: This React component renders a task with a checkbox, allowing users to toggle the task's completion status by calling the updateTask action.

LANGUAGE: jsx
CODE:
const Task = ({ task }) => {
  const handleIsDoneChange = async (event) => {
    try {
      await updateTask({
        id: task.id,
        isDone: event.target.checked,
      })
    } catch (error) {
      window.alert('Error while updating task: ' + error.message)
    }
  }

  return (
    <div>
      <input
        type="checkbox"
        id={String(task.id)}
        checked={task.isDone}
        onChange={handleIsDoneChange}
      />
      {task.description}
    </div>
  )
}

----------------------------------------

TITLE: Using API from Client Side
DESCRIPTION: Example of how to consume the API endpoint from a React client component using Wasp's API wrapper.

LANGUAGE: typescript
CODE:
import React, { useEffect } from "react";
import { api } from "wasp/client/api";

async function fetchCustomRoute() {
  const res = await api.get("/foo/bar");
  console.log(res.data);
}

export const Foo = () => {
  useEffect(() => {
    fetchCustomRoute();
  }, []);

  return <>// ...</>;
};

----------------------------------------

TITLE: Basic Auth Configuration in Wasp
DESCRIPTION: Core configuration for enabling authentication in a Wasp application, including user entity and auth methods setup.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      usernameAndPassword: {},
      email: {},
      google: {},
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/someRoute"
  }
}

----------------------------------------

TITLE: Accessing User Data on the Server
DESCRIPTION: Shows how to access the logged-in user's data on the server side in queries and actions using the context.user object.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (task, context) => {
  if (!context.user) {
    throw new HttpError(403)
  }

  const Task = context.entities.Task
  return Task.create({
    data: {
      description: task.description,
      user: {
        connect: { id: context.user.id },
      },
    },
  })
}

----------------------------------------

TITLE: Defining Authentication Routes and Pages in Wasp
DESCRIPTION: This snippet demonstrates how to define the necessary authentication routes and pages in the Wasp configuration file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}

----------------------------------------

TITLE: Accessing Server Environment Variables in JavaScript
DESCRIPTION: Demonstrates how to read server-side environment variables in a JavaScript file using process.env.

LANGUAGE: javascript
CODE:
console.log(process.env.SOME_VAR_NAME)

----------------------------------------

TITLE: Defining Wasp Operations
DESCRIPTION: Specifies query and action operations in Wasp for retrieving and adding recipes.

LANGUAGE: wasp
CODE:
query getRecipes {
  fn: import { getRecipes } from "@src/recipe/operations.ts",
  entities: [Recipe],
}

action addRecipe {
  fn: import { addRecipe } from "@src/recipe/operations.ts",
  entities: [Recipe],
}

----------------------------------------

TITLE: Using an API from the Client
DESCRIPTION: This code shows how to use the API from a React component in the client-side code using the Axios wrapper provided by Wasp.

LANGUAGE: jsx
CODE:
import React, { useEffect } from "react";
import { api } from "wasp/client/api";

async function fetchCustomRoute() {
  const res = await api.get("/foo/bar");
  console.log(res.data);
}

export const Foo = () => {
  useEffect(() => {
    fetchCustomRoute();
  }, []);

  return <>// ...</>;
};

----------------------------------------

TITLE: Client Setup Function Implementation
DESCRIPTION: Example of a client setup function that runs periodic tasks and configures the query client.

LANGUAGE: javascript
CODE:
import { configureQueryClient } from 'wasp/client/operations'

export default async function mySetupFunction() {
  let count = 1
  setInterval(
    () => console.log(`You have been online for ${count++} hours.`),
    1000 * 60 * 60
  )
}

----------------------------------------

TITLE: Launching Wasp App on Fly.io
DESCRIPTION: Command to deploy a new Wasp application to Fly.io in a single step. Deploys to specified region and creates necessary infrastructure.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Enabling Username Authentication in Wasp
DESCRIPTION: This snippet shows how to enable username and password authentication in the main.wasp file by configuring the auth section of the app declaration.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    // 1. Specify the user entity (we'll define it next)
    userEntity: User,
    methods: {
      // 2. Enable username authentication
      usernameAndPassword: {},
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Implementing JWT Authentication in Node.js
DESCRIPTION: This snippet demonstrates a typical implementation of JWT-based authentication in Node.js, including token signing, verification, password hashing, and middleware for handling authentication requests.

LANGUAGE: javascript
CODE:
import jwt from 'jsonwebtoken'
import SecurePassword from 'secure-password'
import util from 'util'

import prisma from '../dbClient.js'
import { handleRejection } from '../utils.js'
import config from '../config.js'

const jwtSign = util.promisify(jwt.sign)
const jwtVerify = util.promisify(jwt.verify)

const JWT_SECRET = config.auth.jwtSecret

export const sign = (id, options) => jwtSign({ id }, JWT_SECRET, options)
export const verify = (token) => jwtVerify(token, JWT_SECRET)

const auth = handleRejection(async (req, res, next) => {
  const authHeader = req.get('Authorization')
  if (!authHeader) {
    return next()
  }

  if (authHeader.startsWith('Bearer ')) {
    const token = authHeader.substring(7, authHeader.length)

    let userIdFromToken
    try {
      userIdFromToken = (await verify(token)).id
    } catch (error) {
      if (['TokenExpiredError', 'JsonWebTokenError', 'NotBeforeError'].includes(error.name)) {
        return res.status(401).send()
      } else {
        throw error
      }
    }

    const user = await prisma.user.findUnique({ where: { id: userIdFromToken } })
    if (!user) {
      return res.status(401).send()
    }

    const { password, ...userView } = user

    req.user = userView
  } else {
    return res.status(401).send()
  }

  next()
})

const SP = new SecurePassword()

export const hashPassword = async (password) => {
  const hashedPwdBuffer = await SP.hash(Buffer.from(password))
  return hashedPwdBuffer.toString("base64")
}

export const verifyPassword = async (hashedPassword, password) => {
  try {
    return await SP.verify(Buffer.from(password), Buffer.from(hashedPassword, "base64"))
  } catch (error) {
    console.error(error)
    return false
  }
}

----------------------------------------

TITLE: Implementing JWT Authentication in Node.js
DESCRIPTION: This snippet demonstrates a typical implementation of JWT-based authentication in Node.js, including token signing, verification, password hashing, and middleware for handling authentication requests.

LANGUAGE: javascript
CODE:
import jwt from 'jsonwebtoken'
import SecurePassword from 'secure-password'
import util from 'util'

import prisma from '../dbClient.js'
import { handleRejection } from '../utils.js'
import config from '../config.js'

const jwtSign = util.promisify(jwt.sign)
const jwtVerify = util.promisify(jwt.verify)

const JWT_SECRET = config.auth.jwtSecret

export const sign = (id, options) => jwtSign({ id }, JWT_SECRET, options)
export const verify = (token) => jwtVerify(token, JWT_SECRET)

const auth = handleRejection(async (req, res, next) => {
  const authHeader = req.get('Authorization')
  if (!authHeader) {
    return next()
  }

  if (authHeader.startsWith('Bearer ')) {
    const token = authHeader.substring(7, authHeader.length)

    let userIdFromToken
    try {
      userIdFromToken = (await verify(token)).id
    } catch (error) {
      if (['TokenExpiredError', 'JsonWebTokenError', 'NotBeforeError'].includes(error.name)) {
        return res.status(401).send()
      } else {
        throw error
      }
    }

    const user = await prisma.user.findUnique({ where: { id: userIdFromToken } })
    if (!user) {
      return res.status(401).send()
    }

    const { password, ...userView } = user

    req.user = userView
  } else {
    return res.status(401).send()
  }

  next()
})

const SP = new SecurePassword()

export const hashPassword = async (password) => {
  const hashedPwdBuffer = await SP.hash(Buffer.from(password))
  return hashedPwdBuffer.toString("base64")
}

export const verifyPassword = async (hashedPassword, password) => {
  try {
    return await SP.verify(Buffer.from(password), Buffer.from(hashedPassword, "base64"))
  } catch (error) {
    console.error(error)
    return false
  }
}

----------------------------------------

TITLE: Using an API from the Client
DESCRIPTION: This code shows how to use the API from a React component in the client-side code using the Axios wrapper provided by Wasp.

LANGUAGE: jsx
CODE:
import React, { useEffect } from "react";
import { api } from "wasp/client/api";

async function fetchCustomRoute() {
  const res = await api.get("/foo/bar");
  console.log(res.data);
}

export const Foo = () => {
  useEffect(() => {
    fetchCustomRoute();
  }, []);

  return <>// ...</>;
};

----------------------------------------

TITLE: Configuring Environment Variable Validation in Wasp
DESCRIPTION: Shows how to configure custom environment variable validation schemas in the Wasp configuration file.

LANGUAGE: wasp
CODE:
app myApp {
  ...
  client: {
    envValidationSchema: import { clientEnvValidationSchema } from "@src/env",
  },
  server: {
    envValidationSchema: import { serverEnvValidationSchema } from "@src/env",
  },
}

----------------------------------------

TITLE: Configuring Pages and Routes in Wasp
DESCRIPTION: Shows how to declare a page and its corresponding route in Wasp, including authentication requirements and component mapping.

LANGUAGE: javascript
CODE:
route MainRoute { path: "/", to: Main }
page Main {
    authRequired: true,
    component: import Main from "@client/MainPage.js"
}

----------------------------------------

TITLE: Configuring Pages and Routes in Wasp
DESCRIPTION: Shows how to declare a page and its corresponding route in Wasp, including authentication requirements and component mapping.

LANGUAGE: javascript
CODE:
route MainRoute { path: "/", to: Main }
page Main {
    authRequired: true,
    component: import Main from "@client/MainPage.js"
}

----------------------------------------

TITLE: Configuring Server Domain Environment Variables in Wasp
DESCRIPTION: Sets up server-side environment variables for custom domain configuration. Configures both the web client URL and server URL for proper CORS and routing setup.

LANGUAGE: bash
CODE:
WASP_WEB_CLIENT_URL=https://myapp.com
WASP_SERVER_URL=https://server.myapp.com

----------------------------------------

TITLE: Creating New Wasp Project with Interactive Template Selection
DESCRIPTION: Command line interaction showing how to create a new Wasp project using the interactive mode, which allows selecting from various starter templates including basic, todo-ts, saas, embeddings, and ai-generated options.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] ai-generated
    ü§ñ Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)
 ‚ñ∏ 1

üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Configuring Email Provider in Wasp
DESCRIPTION: Basic configuration for setting up an email provider in the Wasp application configuration file. Defines the provider and default sender information.

LANGUAGE: wasp
CODE:
app Example {
  ...
  emailSender: {
    provider: <provider>,
    defaultFrom: {
      name: "Example",
      email: "hello@itsme.com"
    },
  }
}

----------------------------------------

TITLE: Testing React Components with Mocked Queries in JavaScript
DESCRIPTION: Illustrates how to test React components that use queries, including mocking the query data and rendering the component in context.

LANGUAGE: javascript
CODE:
import { useQuery, getTasks } from "wasp/client/operations";

const Todo = (_props) => {
  const { data: tasks } = useQuery(getTasks);
  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";
import Todo from "./Todo";

const { mockQuery } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockQuery(getTasks, mockTasks);

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Testing React Components with Mocked Queries in JavaScript
DESCRIPTION: Illustrates how to test React components that use queries, including mocking the query data and rendering the component in context.

LANGUAGE: javascript
CODE:
import { useQuery, getTasks } from "wasp/client/operations";

const Todo = (_props) => {
  const { data: tasks } = useQuery(getTasks);
  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";
import Todo from "./Todo";

const { mockQuery } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockQuery(getTasks, mockTasks);

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: ExistentialQuantification with forall
DESCRIPTION: Demonstrates using forall for existential quantification in data type definition.

LANGUAGE: haskell
CODE:
data Showable = forall s. (Show s) => Showable s

----------------------------------------

TITLE: ExistentialQuantification with forall
DESCRIPTION: Demonstrates using forall for existential quantification in data type definition.

LANGUAGE: haskell
CODE:
data Showable = forall s. (Show s) => Showable s

----------------------------------------

TITLE: Launching Wasp Application
DESCRIPTION: Command to start the Wasp application server for local development.

LANGUAGE: sh
CODE:
cabal run wasp-cli start

----------------------------------------

TITLE: Testing React Components with Mocked Queries in TypeScript
DESCRIPTION: Shows how to test React components that use queries in TypeScript, including mocking the query data and rendering the component in context.

LANGUAGE: typescript
CODE:
import { useQuery, getTasks } from "wasp/client/operations";

const Todo = (_props: {}) => {
  const { data: tasks } = useQuery(getTasks);

  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: typescript
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";
import Todo from "./Todo";

const { mockQuery } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockQuery(getTasks, mockTasks);

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Testing React Components with Mocked Queries in TypeScript
DESCRIPTION: Shows how to test React components that use queries in TypeScript, including mocking the query data and rendering the component in context.

LANGUAGE: typescript
CODE:
import { useQuery, getTasks } from "wasp/client/operations";

const Todo = (_props: {}) => {
  const { data: tasks } = useQuery(getTasks);

  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: typescript
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";
import Todo from "./Todo";

const { mockQuery } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockQuery(getTasks, mockTasks);

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Using API from Client (TypeScript)
DESCRIPTION: Shows how to use a custom API endpoint from the client-side TypeScript code using the Axios wrapper provided by Wasp.

LANGUAGE: typescript
CODE:
import React, { useEffect } from "react";
import api from "@wasp/api";

async function fetchCustomRoute() {
  const res = await api.get("/foo/bar");
  console.log(res.data);
}

export const Foo = () => {
  useEffect(() => {
    fetchCustomRoute();
  }, []);

  return <>// ...</>;
};

----------------------------------------

TITLE: Defining Routes and Pages in Wasp
DESCRIPTION: This snippet shows how to declare a route and a page in a Wasp file. It demonstrates the syntax for specifying the path, the page to render, and the location of the React component.

LANGUAGE: wasp
CODE:
route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: React Component Testing in Wasp
DESCRIPTION: Comprehensive example of testing a React component, including mocking queries and checking rendered output.

LANGUAGE: javascript
CODE:
import { useQuery, getTasks } from "wasp/client/operations";

const Todo = (_props) => {
  const { data: tasks } = useQuery(getTasks);
  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";
import Todo from "./Todo";

const { mockQuery } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockQuery(getTasks, mockTasks);

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Implementing Custom Create Task Function in JavaScript
DESCRIPTION: This snippet shows the implementation of a custom createTask function in JavaScript, which connects the new task to the authenticated user.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401, 'User not authenticated.')
  }

  const { description, isDone } = args
  const { Task } = context.entities

  return await Task.create({
    data: {
      description,
      isDone,
      user: {
        connect: {
          id: context.user.id,
        },
      },
    },
  })
}

----------------------------------------

TITLE: Enabling Email Authentication in Wasp Configuration
DESCRIPTION: Configures email authentication in the main.wasp file, including user entity, email settings, and redirection routes.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "My App Postman",
          email: "hello@itsme.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

----------------------------------------

TITLE: Declaring Auth Hooks in Wasp Configuration
DESCRIPTION: Shows how to declare auth hooks in the Wasp configuration file.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  auth: {
    userEntity: User,
    methods: {
      ...
    },
    onBeforeSignup: import { onBeforeSignup } from "@src/auth/hooks",
    onAfterSignup: import { onAfterSignup } from "@src/auth/hooks",
    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from "@src/auth/hooks",
    onBeforeLogin: import { onBeforeLogin } from "@src/auth/hooks",
    onAfterLogin: import { onAfterLogin } from "@src/auth/hooks",
  },
}

----------------------------------------

TITLE: Implementing Actions in Node.js
DESCRIPTION: Example of implementing declared Actions in JavaScript, showing how to create and update tasks.

LANGUAGE: javascript
CODE:
let nextId = 4
const tasks = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const createTask = (args) => {
  const newTask = {
    id: nextId,
    isDone: false,
    description: args.description,
  }
  nextId += 1
  tasks.push(newTask)
  return newTask
}

export const markTaskAsDone = (args) => {
  const task = tasks.find((task) => task.id === args.id)
  if (!task) {
    return
  }
  task.isDone = true
}

----------------------------------------

TITLE: Customizing API-specific Middleware in Wasp and TypeScript
DESCRIPTION: This example demonstrates customizing middleware for a specific API route in a Wasp application using TypeScript. It shows replacing the JSON parser with a raw body parser for a webhook callback, with proper type annotations.

LANGUAGE: wasp
CODE:
api webhookCallback {
  fn: import { webhookCallback } from "@src/apis",
  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from "@src/apis",
  httpRoute: (POST, "/webhook/callback"),
  auth: false
}

LANGUAGE: typescript
CODE:
import express from 'express'
import { type WebhookCallback } from 'wasp/server/api'
import { type MiddlewareConfigFn } from 'wasp/server'

export const webhookCallback: WebhookCallback = (req, res, _context) => {
  res.json({ msg: req.body.length })
}

export const webhookCallbackMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')

  middlewareConfig.delete('express.json')
  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))

  return middlewareConfig
}

----------------------------------------

TITLE: Database Seeding Configuration in Wasp
DESCRIPTION: Configuring database seed functions in Wasp application configuration.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  db: {
    seeds: [
      import devSeed from "@src/dbSeeds.js"
    ],
  }
}

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Examples of declaring queries in a Wasp file to fetch all tasks and filtered tasks.

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@src/queries.js"
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@src/queries.js"
}

----------------------------------------

TITLE: Adding Discord Environment Variables
DESCRIPTION: This snippet shows how to add the necessary Discord client ID and secret as environment variables in the .env.server file.

LANGUAGE: bash
CODE:
DISCORD_CLIENT_ID=your-discord-client-id
DISCORD_CLIENT_SECRET=your-discord-client-secret

----------------------------------------

TITLE: PostgreSQL Connection Environment Variables
DESCRIPTION: Example of setting up PostgreSQL connection string in environment variables file.

LANGUAGE: env
CODE:
DATABASE_URL=postgresql://user:password@localhost:5432/mydb

----------------------------------------

TITLE: Implementing Logout Functionality
DESCRIPTION: Shows how to implement a logout button using Wasp's logout action.

LANGUAGE: javascript
CODE:
import { logout } from 'wasp/client/auth'

const LogoutButton = () => {
  return <button onClick={logout}>Logout</button>
}

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Sets up username and password authentication in the Wasp configuration file.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "TodoApp",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: TypeScript Implementation of getTaskInfo Query
DESCRIPTION: This snippet demonstrates the TypeScript version of the getTaskInfo query, showcasing type annotations and Wasp-specific TypeScript features.

LANGUAGE: typescript
CODE:
import HttpError from 'wasp/server'
import { type Task } from '@wasp/entities'
import { type GetTaskInfo } from '@wasp/server/operations'

function getInfoMessage(task: Pick<Task, 'isDone' | 'description'>): string {
  const isDoneText = task.isDone ? 'is done' : 'is not done'
  return `Task '${task.description}' is ${isDoneText}.`
}

export const getTaskInfo: GetTaskInfo<Pick<Task, 'id'>, string> = async (
  { id },
  context
) => {
  const Task = context.entities.Task

  const task = await Task.findUnique({ where: { id } })
  if (!task) {
    throw new HttpError(404)
  }

  return getInfoMessage(task)
}

----------------------------------------

TITLE: Using updateTask Action in React Component (JavaScript)
DESCRIPTION: Demonstrates how to use the updateTask Action within a React component to toggle a task's completion status.

LANGUAGE: jsx
CODE:
const TaskView = ({ task }) => {
  const handleIsDoneChange = async (event) => {
    try {
      await updateTask({
        id: task.id,
        isDone: event.target.checked,
      })
    } catch (error) {
      window.alert('Error while updating task: ' + error.message)
    }
  }

  return (
    <div>
      <input
        type="checkbox"
        id={String(task.id)}
        checked={task.isDone}
        onChange={handleIsDoneChange}
      />
      {task.description}
    </div>
  )
}

----------------------------------------

TITLE: Importing and Using Image URL in React Component (TypeScript)
DESCRIPTION: This snippet shows how to import an image file as a URL and use it in a React component using TypeScript. The imported URL will be processed differently in development and production environments.

LANGUAGE: typescript
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Social Auth UI Implementation
DESCRIPTION: Implementation of social authentication UI components showing both button components and URL-based approaches.

LANGUAGE: typescript
CODE:
import {
  GoogleSignInButton,
  googleSignInUrl,
  GitHubSignInButton,
  gitHubSignInUrl,
} from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <>
      <GoogleSignInButton />
      <GitHubSignInButton />
      {/* or */}
      <a href={googleSignInUrl}>Sign in with Google</a>
      <a href={gitHubSignInUrl}>Sign in with GitHub</a>
    </>
  )
}

----------------------------------------

TITLE: Adding Custom Head Elements in Wasp
DESCRIPTION: This example demonstrates how to add additional stylesheets, scripts, and meta tags to the head of a Wasp app using the 'head' field in the app declaration.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "My App",
  head: [  // optional
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />",
    "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>",
    "<meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />"
  ]
}

----------------------------------------

TITLE: Updating User Auth Field Access
DESCRIPTION: Replace the getUsername helper with direct access to user.identities.username.id.

LANGUAGE: typescript
CODE:
import { AuthUser } from 'wasp/auth'

const MainPage = ({ user }: { user: AuthUser }) => {
  const username = user.identities.username?.id
  // ...
}

----------------------------------------

TITLE: Using Entities in Wasp File
DESCRIPTION: Shows how to use Wasp Entities (derived from Prisma models) in the main.wasp file for queries, jobs, and APIs.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
}

...

// Using Wasp Entities in the Wasp file

query getTasks {
  fn: import { getTasks } from "@src/queries",
  // highlight-next-line
  entities: [Task]
}

job myJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  // highlight-next-line
  entities: [Task],
}

api fooBar {
  fn: import { fooBar } from "@src/apis",
  // highlight-next-line
  entities: [Task],
  httpRoute: (GET, "/foo/bar/:email")
}

----------------------------------------

TITLE: Using Entities in Wasp File
DESCRIPTION: Shows how to use Wasp Entities (derived from Prisma models) in the main.wasp file for queries, jobs, and APIs.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
}

...

// Using Wasp Entities in the Wasp file

query getTasks {
  fn: import { getTasks } from "@src/queries",
  // highlight-next-line
  entities: [Task]
}

job myJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  // highlight-next-line
  entities: [Task],
}

api fooBar {
  fn: import { fooBar } from "@src/apis",
  // highlight-next-line
  entities: [Task],
  httpRoute: (GET, "/foo/bar/:email")
}

----------------------------------------

TITLE: Updating tsconfig.json for Wasp 0.14.0
DESCRIPTION: Replace the contents of tsconfig.json with the new configuration for Wasp 0.14.0.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "esnext",
    "target": "esnext",
    "moduleResolution": "bundler",
    "jsx": "preserve",
    "strict": true,
    "esModuleInterop": true,
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "typeRoots": [
      "node_modules/@testing-library",
      "node_modules/@types"
    ],
    "outDir": ".wasp/phantom"
  }
}

----------------------------------------

TITLE: Checking Wasp Telemetry Status
DESCRIPTION: Shows the output of the 'wasp telemetry' command, which displays the current telemetry status and related information.

LANGUAGE: bash
CODE:
$ wasp telemetry

Telemetry is currently: ENABLED
Telemetry cache directory: /home/user/.cache/wasp/telemetry/
Last time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC
Our telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.

----------------------------------------

TITLE: User Entity Definition
DESCRIPTION: Defining the basic User entity structure in Wasp

LANGUAGE: wasp
CODE:
entity User {=psl
    id                        Int           @id @default(autoincrement())
    // Add your own fields below
    // ...
psl=}

----------------------------------------

TITLE: Adding Logout Button to Main Page
DESCRIPTION: Adds a logout button to the MainPage component using Wasp's logout function.

LANGUAGE: jsx
CODE:
import logout from '@wasp/auth/logout'

const MainPage = () => {
  return (
    <div>
      {/* ... */}
      <button onClick={logout}>Logout</button>
    </div>
  )
}

----------------------------------------

TITLE: Configuring Multiple Authentication Methods in Wasp
DESCRIPTION: This snippet demonstrates how to enable multiple authentication methods (email, Google, and GitHub) in the main.wasp file.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
      google: {},
      github: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Defining Basic Wasp App Structure
DESCRIPTION: Demonstrates the basic structure of a Wasp app using declarations for app, route, and page. Shows how to define an app title, create a root route, and import a React component for a page.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app"
}

route RootRoute { path: "/", to: DashboardPage }

page DashboardPage {
  component: import { DashboardPage } from "@src/Dashboard.jsx"
}

----------------------------------------

TITLE: Declaring Wasp Operations for Recipe Management
DESCRIPTION: Defines Wasp query and action operations for retrieving and adding recipes, linking to their implementations.

LANGUAGE: wasp
CODE:
query getRecipes {
  fn: import { getRecipes } from "@src/recipe/operations",
  entities: [Recipe],
}

action addRecipe {
  fn: import { addRecipe } from "@src/recipe/operations",
  entities: [Recipe],
}

----------------------------------------

TITLE: Defining getTaskInfo Query in Wasp
DESCRIPTION: This snippet demonstrates how to define a getTaskInfo query in the main.wasp file, specifying the function import and associated entities.

LANGUAGE: wasp
CODE:
query getTaskInfo {
  fn: import { getTaskInfo } from "@src/queries",
  entities: [Task]
}

----------------------------------------

TITLE: Implementing createTask Action in TypeScript
DESCRIPTION: Implements the createTask Action on the server with TypeScript, including type annotations for full-stack type safety.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'
import { CreateTask } from 'wasp/server/operations'

type CreateTaskPayload = Pick<Task, 'description'>

export const createTask: CreateTask<CreateTaskPayload, Task> = async (
  args,
  context
) => {
  return context.entities.Task.create({
    data: { description: args.description },
  })
}

----------------------------------------

TITLE: Defining Server Environment Variables in .env File
DESCRIPTION: Example of defining server-side environment variables in a .env.server file. This file should not be committed to version control as it may contain secrets.

LANGUAGE: shell
CODE:
DATABASE_URL=postgresql://localhost:5432
SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Implementing Query in TypeScript
DESCRIPTION: Server-side implementation of the getTasks query function in TypeScript, with type annotations for full-stack type safety.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'
import { type GetTasks } from 'wasp/server/operations'

export const getTasks: GetTasks<void, Task[]> = async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Sending Telemetry Data on CLI Command Invocation in Wasp
DESCRIPTION: This JSON structure represents the telemetry data sent when a Wasp CLI command is invoked. It includes a unique user ID, project hash, build status, deploy command arguments, Wasp version, OS, and execution context.

LANGUAGE: json
CODE:
{
  "distinct_id": "bf3fa7a8-1c11-4f82-9542-ec1a2d28786b",
  "project_hash": "6d7e561d62b955d1",
  "is_build": true,
  "deploy_cmd_args": "fly;deploy",
  "wasp_version": "0.1.9.1",
  "os": "linux",
  "context": "CI"
}

----------------------------------------

TITLE: Using Prisma-defined Entities in Wasp File
DESCRIPTION: Demonstrates how Prisma models become Wasp Entities and are used in queries, jobs, and APIs within the main.wasp file.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "My App",
}

...

// Using Wasp Entities in the Wasp file

query getTasks {
  fn: import { getTasks } from "@src/queries",
  // highlight-next-line
  entities: [Task]
}

job myJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  // highlight-next-line
  entities: [Task],
}

api fooBar {
  fn: import { fooBar } from "@src/apis",
  // highlight-next-line
  entities: [Task],
  httpRoute: (GET, "/foo/bar/:email")
}

----------------------------------------

TITLE: Implementing Query in TypeScript
DESCRIPTION: Server-side implementation of the getTasks query function in TypeScript, with type annotations for full-stack type safety.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'
import { type GetTasks } from 'wasp/server/operations'

export const getTasks: GetTasks<void, Task[]> = async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Configuring PostgreSQL Database in Wasp
DESCRIPTION: Example of setting PostgreSQL as the database system in a Wasp application configuration.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  db: {
    system: PostgreSQL,
    // ...
  }
}

----------------------------------------

TITLE: Accessing Client Environment Variables in JavaScript
DESCRIPTION: Demonstrates how to import and use client-side environment variables in a JavaScript file using the 'env' object from 'wasp/client'.

LANGUAGE: javascript
CODE:
import { env } from 'wasp/client'

console.log(env.REACT_APP_SOME_VAR_NAME)

----------------------------------------

TITLE: Using Tailwind Classes in React JSX
DESCRIPTION: Shows an example of applying Tailwind CSS classes to a React component in a Wasp project.

LANGUAGE: jsx
CODE:
// ...

<h1 className="text-3xl font-bold underline">
  Hello world!
</h1>

// ...

----------------------------------------

TITLE: Implementing Hello Page with URL Parameters
DESCRIPTION: This snippet demonstrates how to create a React component that uses URL parameters. It uses the useParams hook from react-router-dom to access the 'name' parameter.

LANGUAGE: jsx
CODE:
import { useParams } from 'react-router-dom'

export const HelloPage = () => {
  const { name } = useParams()
  return <div>Here's {name}!</div>
}

LANGUAGE: tsx
CODE:
import { useParams } from 'react-router-dom'

export const HelloPage = () => {
  const { name } = useParams<'name'>()
  return <div>Here's {name}!</div>
}

----------------------------------------

TITLE: Implementing Hello Page with URL Parameters
DESCRIPTION: This snippet demonstrates how to create a React component that uses URL parameters. It uses the useParams hook from react-router-dom to access the 'name' parameter.

LANGUAGE: jsx
CODE:
import { useParams } from 'react-router-dom'

export const HelloPage = () => {
  const { name } = useParams()
  return <div>Here's {name}!</div>
}

LANGUAGE: tsx
CODE:
import { useParams } from 'react-router-dom'

export const HelloPage = () => {
  const { name } = useParams<'name'>()
  return <div>Here's {name}!</div>
}

----------------------------------------

TITLE: Defining Task Entity in Wasp
DESCRIPTION: Demonstrates how to define a basic Task entity using Prisma Schema Language (PSL) in Wasp. The entity includes an auto-incrementing ID, description string, and boolean isDone field.

LANGUAGE: wasp
CODE:
entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
psl=}

----------------------------------------

TITLE: Changing Dev Server Behavior in Vite Config (JavaScript)
DESCRIPTION: This snippet demonstrates how to customize the Vite config to prevent the browser from automatically opening when running 'wasp start'. It modifies the 'open' option in the server configuration.

LANGUAGE: javascript
CODE:
export default {
  server: {
    open: false,
  },
}

----------------------------------------

TITLE: Declaring a Recurring Job in Wasp
DESCRIPTION: This snippet shows how to declare a recurring job in Wasp using a cron schedule. It includes optional arguments and executor options.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar",
    executorOptions: {
      pgBoss: {=json { "retryLimit": 1 } json=}
    }
  },
  schedule: {
    cron: "*/5 * * * *",
    args: {=json { "foo": "bar" } json=},
    executorOptions: {
      pgBoss: {=json { "retryLimit": 0 } json=}
    }
  },
  entities: [Task],
}

----------------------------------------

TITLE: Implementing getTasks Query in JavaScript
DESCRIPTION: Server-side implementation of the getTasks query that retrieves tasks from the database using Prisma client.

LANGUAGE: javascript
CODE:
export const getTasks = async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Using CRUD Operations in React Component
DESCRIPTION: Demonstrates how to use the generated CRUD operations in a React component for fetching tasks and creating new ones.

LANGUAGE: jsx
CODE:
import { Tasks } from 'wasp/client/crud'
import { useState } from 'react'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()
  const createTask = Tasks.create.useAction()
  const [taskDescription, setTaskDescription] = useState('')

  function handleCreateTask() {
    createTask({ description: taskDescription, isDone: false })
    setTaskDescription('')
  }

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>
  return (
    <div>
      <div>
        <input
          value={taskDescription}
          onChange={(e) => setTaskDescription(e.target.value)}
        />
        <button onClick={handleCreateTask}>Create task</button>
      </div>
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>{task.description}</li>
        ))}
      </ul>
    </div>
  )
}

----------------------------------------

TITLE: Using CRUD Operations in React Component
DESCRIPTION: Demonstrates how to use the generated CRUD operations in a React component for fetching tasks and creating new ones.

LANGUAGE: jsx
CODE:
import { Tasks } from 'wasp/client/crud'
import { useState } from 'react'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()
  const createTask = Tasks.create.useAction()
  const [taskDescription, setTaskDescription] = useState('')

  function handleCreateTask() {
    createTask({ description: taskDescription, isDone: false })
    setTaskDescription('')
  }

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>
  return (
    <div>
      <div>
        <input
          value={taskDescription}
          onChange={(e) => setTaskDescription(e.target.value)}
        />
        <button onClick={handleCreateTask}>Create task</button>
      </div>
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>{task.description}</li>
        ))}
      </ul>
    </div>
  )
}

----------------------------------------

TITLE: Final Cleaned-up Wasp Configuration
DESCRIPTION: This code shows the final state of the main.wasp file after cleaning up unnecessary routes and pages.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "TodoApp"
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Defining User Signup Fields in JavaScript for Wasp
DESCRIPTION: This snippet shows how to define extra user signup fields in JavaScript for a Wasp project. It demonstrates setting 'address' as a required field and 'phone' as an optional field.

LANGUAGE: javascript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: (data) => {
    if (!data.address) {
      throw new Error('Address is required')
    }
    return data.address
  },
  phone: (data) => data.phone,
})

----------------------------------------

TITLE: Adding Auth Routes and Pages in Wasp
DESCRIPTION: This snippet demonstrates how to add routes and pages for login and signup in the main.wasp file.

LANGUAGE: wasp
CODE:
// ...
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/pages/auth.jsx"
}

----------------------------------------

TITLE: Creating User Entity in Wasp
DESCRIPTION: Defines the basic User entity schema in Wasp with an auto-incrementing ID field.

LANGUAGE: wasp
CODE:
entity User {=psl
    id       Int    @id @default(autoincrement())
psl=}

----------------------------------------

TITLE: Creating User Entity in Wasp
DESCRIPTION: Defines the basic User entity schema in Wasp with an auto-incrementing ID field.

LANGUAGE: wasp
CODE:
entity User {=psl
    id       Int    @id @default(autoincrement())
psl=}

----------------------------------------

TITLE: Implementing Task Creation Action - TypeScript
DESCRIPTION: TypeScript implementation of the createTask action with type safety and proper type annotations.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'
import { CreateTask } from 'wasp/server/operations'

type CreateTaskPayload = Pick<Task, 'description'>

export const createTask: CreateTask<CreateTaskPayload, Task> = async (
  args,
  context
) => {
  return context.entities.Task.create({
    data: { description: args.description },
  })
}

----------------------------------------

TITLE: Storing Values for Later Use in Server Setup (TypeScript)
DESCRIPTION: Shows how to store values during server setup for later use in operations using TypeScript. It includes type annotations for the setup function.

LANGUAGE: typescript
CODE:
import { type ServerSetupFn } from 'wasp/server'

let someResource = undefined

export const mySetupFunction: ServerSetupFn = async () => {
  someResource = await setUpSomeResource()
  startSomeCronJob()  
}

export const getSomeResource = () => someResource

----------------------------------------

TITLE: Implementing Actions in NodeJS
DESCRIPTION: Example implementation of Actions in NodeJS including task creation and status updates.

LANGUAGE: javascript
CODE:
let nextId = 4
const tasks = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const createTask = (args) => {
  const newTask = {
    id: nextId,
    isDone: false,
    description: args.description,
  }
  nextId += 1
  tasks.push(newTask)
  return newTask
}

export const markTaskAsDone = (args) => {
  const task = tasks.find((task) => task.id === args.id)
  if (!task) {
    return
  }
  task.isDone = true
}

----------------------------------------

TITLE: Default Middleware Configuration in JavaScript
DESCRIPTION: Default Express middleware configuration using a Map to define standard middleware like Helmet, CORS, Morgan logger, and body parsers.

LANGUAGE: javascript
CODE:
const defaultGlobalMiddleware = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

----------------------------------------

TITLE: Implementing onBeforeSignup Hook
DESCRIPTION: Example of implementing the onBeforeSignup hook to perform actions before user signup.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const onBeforeSignup = async ({ providerId, prisma, req }) => {
  const count = await prisma.user.count()
  console.log('number of users before', count)
  console.log('provider name', providerId.providerName)
  console.log('provider user ID', providerId.providerUserId)

  if (count > 100) {
    throw new HttpError(403, 'Too many users')
  }

  if (
    providerId.providerName === 'email' &&
    providerId.providerUserId === 'some@email.com'
  ) {
    throw new HttpError(403, 'This email is not allowed')
  }
}

----------------------------------------

TITLE: Using the routes Object in React
DESCRIPTION: Shows how to use the routes object to generate type-safe links in a React component.

LANGUAGE: jsx
CODE:
import { routes } from 'wasp/client/router'

const linkToTask = routes.TaskRoute.build({ params: { id: 1 } })

----------------------------------------

TITLE: SendGrid Provider Configuration
DESCRIPTION: Environment variable configuration for the SendGrid email provider.

LANGUAGE: properties
CODE:
SENDGRID_API_KEY=

----------------------------------------

TITLE: Customizing Per-Path Middleware in Wasp and JavaScript
DESCRIPTION: This example shows how to customize middleware for all API routes under a common path in a Wasp application using JavaScript. It demonstrates adding custom middleware to a specific API namespace.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@src/apis",
  path: "/foo/bar"
}

LANGUAGE: javascript
CODE:
export const fooBarNamespaceMiddlewareFn = (middlewareConfig) => {
  const customMiddleware = (_req, _res, next) => {
    console.log('fooBarNamespaceMiddlewareFn: custom middleware')
    next()
  }

  middlewareConfig.set('custom.middleware', customMiddleware)

  return middlewareConfig
}

----------------------------------------

TITLE: Custom Signup Implementation in TypeScript
DESCRIPTION: Example implementation of a custom signup function in TypeScript, using Wasp's auth utilities to create a new user with type definitions.

LANGUAGE: typescript
CODE:
import {
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'
import type { CustomSignup } from 'wasp/server/operations'

type CustomSignupInput = {
  username: string
  password: string
}
type CustomSignupOutput = {
  success: boolean
  message: string
}

export const signup: CustomSignup<
  CustomSignupInput,
  CustomSignupOutput
> = async (args, { entities: { User } }) => {
  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData<'username'>({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      // Any additional data you want to store on the User entity
      {},
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  // Your custom code after sign-up.
  // ...

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: Accessing AuthUser Object with Google Auth
DESCRIPTION: Example of accessing user data when authenticated via Google, showing the structure of the AuthUser object with Google identity information.

LANGUAGE: typescript
CODE:
const user = {
  id: 'cluqs9qyh00007cn73apj4hp7',
  address: 'Some address',
  identities: {
    email: null,
    google: {
      id: '1117XXXX1301972049448',
    },
  },
}

----------------------------------------

TITLE: Rendering React Components in Tests with Wasp
DESCRIPTION: Demonstrates how to use the renderInContext helper function to render React components in tests, wrapping them in necessary providers.

LANGUAGE: javascript
CODE:
import { renderInContext } from "wasp/client/test";

renderInContext(<MainPage />);

----------------------------------------

TITLE: Displaying Project Structure with Tailwind Configuration Files
DESCRIPTION: Shows the file structure of a Wasp project with Tailwind configuration files added.

LANGUAGE: bash
CODE:
.
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ public
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ postcss.config.cjs
‚îî‚îÄ‚îÄ tailwind.config.cjs

----------------------------------------

TITLE: Client Setup Function Implementation
DESCRIPTION: Example of a client setup function that runs periodic tasks, specifically logging a message every hour.

LANGUAGE: javascript
CODE:
export default async function mySetupFunction() {
  let count = 1
  setInterval(
    () => console.log(`You have been online for ${count++} hours.`),
    1000 * 60 * 60
  )
}

----------------------------------------

TITLE: React Component with Query Usage (TypeScript)
DESCRIPTION: Type-safe frontend implementation showing how to use the getTasks query in a React component with proper TypeScript annotations.

LANGUAGE: tsx
CODE:
import { Task } from 'wasp/entities'
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

----------------------------------------

TITLE: React Root Component Implementation
DESCRIPTION: Implementation of a root component with common layout structure using React Router's Outlet component.

LANGUAGE: jsx
CODE:
import { Outlet } from 'react-router-dom'

export default function Root() {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      <Outlet />
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: Accessing Discord User ID in TypeScript
DESCRIPTION: Shows how to access the Discord identity and user ID from a user object. The Discord user ID is a unique identifier string like '80351110224678912' associated with a Discord account.

LANGUAGE: typescript
CODE:
const discordIdentity = user.identities.discord

// Discord User ID for example "80351110224678912"
discordIdentity.id

----------------------------------------

TITLE: Cleaning Wasp Project
DESCRIPTION: Demonstrates the output of the 'wasp clean' command, which removes generated code, cached artifacts, and the node_modules directory.

LANGUAGE: bash
CODE:
$ wasp clean

üêù --- Deleting the .wasp/ directory... -------------------------------------------

‚úÖ --- Deleted the .wasp/ directory. ----------------------------------------------

üêù --- Deleting the node_modules/ directory... ------------------------------------

‚úÖ --- Deleted the node_modules/ directory. ---------------------------------------

----------------------------------------

TITLE: Using the routes Object for Type-Safe Links
DESCRIPTION: Shows how to use the routes object to generate type-safe links programmatically, including passing parameters.

LANGUAGE: jsx
CODE:
import { routes } from '@wasp/router'

const linkToTask = routes.TaskRoute.build({ params: { id: 1 } })

----------------------------------------

TITLE: Defining a Task Entity in Wasp
DESCRIPTION: This snippet demonstrates how to define a Task entity in Wasp using the Prisma Schema Language (PSL). It creates a model with an auto-incrementing id, a description field, and a boolean isDone field with a default value.

LANGUAGE: wasp
CODE:
entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
psl=}

----------------------------------------

TITLE: Unit Testing JavaScript Helpers
DESCRIPTION: Example of writing unit tests for helper functions in JavaScript

LANGUAGE: javascript
CODE:
export function areThereAnyTasks(tasks) {
  return tasks.length === 0;
}

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";

import { areThereAnyTasks } from "./helpers";

test("areThereAnyTasks", () => {
  expect(areThereAnyTasks([])).toBe(false);
});

----------------------------------------

TITLE: Changing Dev Server Behavior in Vite Config (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to customize the Vite config to prevent the browser from automatically opening when running 'wasp start'. It uses the defineConfig function and modifies the 'open' option in the server configuration.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  server: {
    open: false,
  },
})

----------------------------------------

TITLE: Sending Emails Using EmailSender API
DESCRIPTION: Example of sending an email using the emailSender.send() method, demonstrating how to specify sender details, recipient, subject, and both text and HTML content.

LANGUAGE: typescript
CODE:
import { emailSender } from "wasp/server/email";

// In some action handler...
const info = await emailSender.send({
  from: {
    name: "John Doe",
    email: "john@doe.com",
  },
  to: "user@domain.com",
  subject: "Saying hello",
  text: "Hello world",
  html: "Hello <strong>world</strong>",
});

----------------------------------------

TITLE: Enabling WebSockets in Wasp Configuration
DESCRIPTION: Demonstrates how to enable WebSockets in the Wasp configuration file by adding the 'webSocket' property to the app object. It specifies the server-side function and optional auto-connect behavior.

LANGUAGE: wasp
CODE:
app todoApp {
  // ...

  webSocket: {
    fn: import { webSocketFn } from "@src/webSocket",
    autoConnect: true, // optional, default: true
  },
}

----------------------------------------

TITLE: Mailgun Provider Configuration
DESCRIPTION: Environment variable configuration for the Mailgun email provider.

LANGUAGE: properties
CODE:
MAILGUN_API_KEY=
MAILGUN_DOMAIN=
MAILGUN_API_URL=https://api.eu.mailgun.net

----------------------------------------

TITLE: Implementing onAfterLogin Hook
DESCRIPTION: Example of implementing the onAfterLogin hook to perform actions after user login.

LANGUAGE: javascript
CODE:
export const onAfterLogin = async ({
  providerId,
  user,
  oauth,
  prisma,
  req,
}) => {
  console.log('user object', user)

  if (oauth) {
    console.log('accessToken', oauth.tokens.accessToken)
    console.log('uniqueRequestId', oauth.uniqueRequestId)

    const id = oauth.uniqueRequestId
    const data = someKindOfStore.get(id)
    if (data) {
      console.log('saved data for the ID', data)
    }
    someKindOfStore.delete(id)
  }
}

----------------------------------------

TITLE: Global Middleware Customization
DESCRIPTION: Example of customizing global middleware by adding additional CORS domains. Shows configuration in both main.wasp and serverSetup files.

LANGUAGE: wasp
CODE:
app todoApp {
  // ...

  server: {
    middlewareConfigFn: import { serverMiddlewareFn } from "@src/serverSetup"
  },
}

LANGUAGE: typescript
CODE:
import cors from 'cors'
import { config, type MiddlewareConfigFn } from 'wasp/server'

export const serverMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))
  return middlewareConfig
}

----------------------------------------

TITLE: SMTP Provider Configuration
DESCRIPTION: Environment variable configuration for the SMTP email provider.

LANGUAGE: properties
CODE:
SMTP_HOST=
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_PORT=

----------------------------------------

TITLE: Updating OAuth Provider Configuration Function in TypeScript
DESCRIPTION: Shows how to update the configFn for OAuth providers in Wasp 0.13.0. The 'scope' property is renamed to 'scopes', and the client ID and secret are removed from the returned object.

LANGUAGE: typescript
CODE:
export function getConfig() {
    return {
        scopes: ['profile', 'email'],
    }
}

----------------------------------------

TITLE: Resolving TypeScript Server Sync Issues in VS Code
DESCRIPTION: Instructions for restarting the TypeScript Language Server when it gets out of sync with the current code. Includes keyboard shortcuts for different operating systems to access the command palette.

LANGUAGE: plaintext
CODE:
Ctrl + Shift + P (Windows/Linux)
Cmd + Shift + P (Mac)

----------------------------------------

TITLE: Creating New Wasp Project Interactively
DESCRIPTION: Demonstrates the interactive project creation process using 'wasp new' command, showing template selection and project setup steps.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] ai-generated
    ü§ñ Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)
‚ñ∏ 1

üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Creating New Wasp Project Interactively
DESCRIPTION: Demonstrates the interactive project creation process using 'wasp new' command, showing template selection and project setup steps.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] ai-generated
    ü§ñ Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)
‚ñ∏ 1

üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Telemetry Data Structure for CLI Commands
DESCRIPTION: JSON structure showing the telemetry data sent when wasp CLI commands are invoked. Includes user UUID, project hash, build status, deploy commands, version info, and execution context.

LANGUAGE: json
CODE:
{
  "distinct_id": "bf3fa7a8-1c11-4f82-9542-ec1a2d28786b",
  "project_hash": "6d7e561d62b955d1",
  "is_build": true,
  "deploy_cmd_args": "fly;deploy",
  "wasp_version": "0.1.9.1",
  "os": "linux",
  "context": "CI"
}

----------------------------------------

TITLE: Accessing Server Environment Variables in TypeScript
DESCRIPTION: Demonstrates the method for accessing server-side environment variables in a TypeScript file. Similar to JavaScript, these are accessed using process.env.

LANGUAGE: typescript
CODE:
console.log(process.env.SOME_VAR_NAME)

----------------------------------------

TITLE: Task Update Implementation
DESCRIPTION: Implementation of the updateTask action for modifying task completion status.

LANGUAGE: typescript
CODE:
type UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>

export const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (
  { id, isDone },
  context
) => {
  return context.entities.Task.update({
    where: { id },
    data: {
      isDone: isDone,
    },
  })
}

----------------------------------------

TITLE: Storing Values for Later Use in Server Setup (TypeScript)
DESCRIPTION: Demonstrates how to store values during server setup for later use in operations. This TypeScript example shows setting up a resource and starting a cron job, then exporting a function to access the resource with proper type annotations.

LANGUAGE: typescript
CODE:
import { type ServerSetupFn } from 'wasp/server'

let someResource = undefined

export const mySetupFunction: ServerSetupFn = async () => {
  // Let's pretend functions setUpSomeResource and startSomeCronJob
  // are implemented below or imported from another file.
  someResource = await setUpSomeResource()
  startSomeCronJob()  
}

export const getSomeResource = () => someResource

LANGUAGE: typescript
CODE:
import { type SomeQuery } from 'wasp/server/operations'
import { getSomeResource } from './myServerSetupCode.js'

...

export const someQuery: SomeQuery<...> = async (args, context) => {
  const someResource = getSomeResource()
  return queryDataFromSomeResource(args, someResource)
}

----------------------------------------

TITLE: Adding Logout Button to Main Page
DESCRIPTION: Implements a logout button in the MainPage component using Wasp's logout function.

LANGUAGE: jsx
CODE:
import { logout } from 'wasp/client/auth'

const MainPage = () => {
  return (
    <div>
      {/* ... */}
      <button onClick={logout}>Logout</button>
    </div>
  )
}

----------------------------------------

TITLE: Defining Data Models with Prisma Schema
DESCRIPTION: Creates Prisma schema models for User and Recipe entities, establishing a relationship between them.

LANGUAGE: prisma
CODE:
model User {
  id          Int @id @default(autoincrement())
  recipes     Recipe[]
}

model Recipe {
  id          Int @id @default(autoincrement())
  title       String
  description String?
  userId      Int
  user        User @relation(fields: [userId], references: [id])
}

----------------------------------------

TITLE: Updating getTasks Query with Authentication Check
DESCRIPTION: Modifies the getTasks query to check for user authentication and return only the logged-in user's tasks.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const getTasks = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401)
  }
  return context.entities.Task.findMany({
    where: { user: { id: context.user.id } },
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Defining User-Task Relation in Wasp
DESCRIPTION: Updates the User and Task entities to establish a one-to-many relation between users and tasks.

LANGUAGE: wasp
CODE:
entity User {=psl
    id       Int     @id @default(autoincrement())
    username String  @unique
    password String
    tasks    Task[]
psl=}

entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
    user        User?    @relation(fields: [userId], references: [id])
    userId      Int?
psl=}

----------------------------------------

TITLE: Customizing Keycloak Configuration and User Signup
DESCRIPTION: This snippet demonstrates how to customize Keycloak configuration and user signup fields in a separate JavaScript file.

LANGUAGE: javascript
CODE:
export const userSignupFields = {
  username: () => "hardcoded-username",
  displayName: (data) => data.profile.name,
}

export function getConfig() {
  return {
    scopes: ['profile', 'email'],
  }
}

----------------------------------------

TITLE: Implementing Custom Username Signup Flow
DESCRIPTION: Example of customizing the social auth signup flow to allow users to set their username, including schema modifications and override implementation.

LANGUAGE: prisma
CODE:
model User {
  id               Int     @id @default(autoincrement())
  username         String? @unique
  isSignupComplete Boolean @default(false)
}

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  isSignupComplete: () => false,
})

----------------------------------------

TITLE: Displaying Wasp CLI Commands Overview
DESCRIPTION: Shows the output of running the 'wasp' command without arguments, listing all available commands and their descriptions. This includes general commands, project-specific commands, and usage examples.

LANGUAGE: bash
CODE:
USAGE
  wasp <command> [command-args]

COMMANDS
  GENERAL
    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.
      OPTIONS:
        -t|--template <template-name>
           Check out the templates list here: https://github.com/wasp-lang/starters

    new:ai <app-name> <app-description> [<config-json>]
      Uses AI to create a new Wasp project just based on the app name and the description.
      You can do the same thing with `wasp new` interactively.
      Run `wasp new:ai` for more info.

    version               Prints current version of CLI.
    waspls                Run Wasp Language Server. Add --help to get more info.
    completion            Prints help on bash completion.
    uninstall             Removes Wasp from your system.
  IN PROJECT
    start                 Runs Wasp app in development mode, watching for file changes.
    start db              Starts managed development database for you.
    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.
    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.
                          Wasp equivalent of 'have you tried closing and opening it again?'.
    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.
    deploy                Deploys your Wasp app to cloud hosting providers.
    telemetry             Prints telemetry status.
    deps                  Prints the dependencies that Wasp uses in your project.
    dockerfile            Prints the contents of the Wasp generated Dockerfile.
    info                  Prints basic information about the current Wasp project.
    test                  Executes tests in your project.
    studio                (experimental) GUI for inspecting your Wasp app.

EXAMPLES
  wasp new MyApp
  wasp start
  wasp db migrate-dev

Docs: https://wasp.sh/docs
Discord (chat): https://discord.gg/rzdnErX
Newsletter: https://wasp.sh/#signup

----------------------------------------

TITLE: Configuring Tailwind in JavaScript
DESCRIPTION: This JavaScript snippet shows the configuration for Tailwind CSS in a Wasp project. It specifies content paths, theme extensions, and plugins.

LANGUAGE: js
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [ "./src/**/*.{js,jsx,ts,tsx}" ],
  theme: {
    extend: {},
  },
  plugins: [],
}

----------------------------------------

TITLE: Accessing GitHub User ID in TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve the GitHub User ID from a user's identities object. It assumes the user object has a nested 'identities' property containing GitHub-specific information.

LANGUAGE: typescript
CODE:
const githubIdentity = user.identities.github

// GitHub User ID for example "12345678"
githubIdentity.id

----------------------------------------

TITLE: Using Entities in APIs
DESCRIPTION: Shows how to include entities in the API declaration and use them in the API implementation.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  entities: [Task],
  httpRoute: (GET, "/foo/bar")
}

LANGUAGE: javascript
CODE:
export const fooBar = (req, res, context) => {
  res.json({ count: await context.entities.Task.count() });
};

----------------------------------------

TITLE: Setting Google OAuth Environment Variables
DESCRIPTION: Demonstrates how to set the required environment variables for Google OAuth in the .env.server file.

LANGUAGE: bash
CODE:
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

----------------------------------------

TITLE: Adding Multiple Head Elements in Wasp
DESCRIPTION: This example demonstrates how to add multiple elements to the head of a Wasp app, including stylesheets, scripts, and meta tags.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  head: [  // optional
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />",
    "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>",
    "<meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />"
  ]
}

----------------------------------------

TITLE: Configuring Multiple Auth Providers in Wasp
DESCRIPTION: Example of enabling multiple authentication providers (email, Google, and GitHub) in a Wasp application.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
      google: {},
      github: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Implementing API Endpoint in JavaScript
DESCRIPTION: JavaScript implementation of an API endpoint that handles requests and responses with Express, including context handling and CORS headers.

LANGUAGE: javascript
CODE:
export const fooBar = (req, res, context) => {
  res.set("Access-Control-Allow-Origin", "*");
  res.json({ msg: `Hello, ${context.user ? "registered user" : "stranger"}!` });
};

----------------------------------------

TITLE: Defining User-Task Relation in Prisma Schema
DESCRIPTION: Establishes a one-to-many relationship between users and tasks in the Prisma schema.

LANGUAGE: prisma
CODE:
model User {
  id    Int    @id @default(autoincrement())
  tasks Task[]
}

model Task {
  id          Int     @id @default(autoincrement())
  description String
  isDone      Boolean @default(false)
  user        User?   @relation(fields: [userId], references: [id])
  userId      Int?
}

----------------------------------------

TITLE: Defining User-Task Relation in Prisma Schema
DESCRIPTION: Updates the Prisma schema to establish a one-to-many relation between users and tasks.

LANGUAGE: prisma
CODE:
model User {
  id    Int    @id @default(autoincrement())
  tasks Task[]
}

model Task {
  id          Int     @id @default(autoincrement())
  description String
  isDone      Boolean @default(false)
  user        User?   @relation(fields: [userId], references: [id])
  userId      Int?
}

----------------------------------------

TITLE: User Entity Definition
DESCRIPTION: Prisma schema definition for the User entity required for authentication

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Storing Values for Later Use in Server Setup (JavaScript)
DESCRIPTION: Illustrates how to store values during server setup for later use in operations. This example sets up a resource and starts a cron job.

LANGUAGE: javascript
CODE:
let someResource = undefined

export const mySetupFunction = async () => {
  someResource = await setUpSomeResource()
  startSomeCronJob()
}

export const getSomeResource = () => someResource

----------------------------------------

TITLE: Defining Login and Signup Routes in Wasp
DESCRIPTION: Declares routes for the login and signup pages in the Wasp configuration file.

LANGUAGE: wasp
CODE:
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/LoginPage"
}

----------------------------------------

TITLE: Disabling Automatic Browser Opening in Vite Dev Server
DESCRIPTION: This snippet demonstrates how to prevent Vite from automatically opening the browser when running 'wasp start' by modifying the 'open' option in the server configuration.

LANGUAGE: javascript
CODE:
export default {
  server: {
    open: false,
  },
}

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  server: {
    open: false,
  },
})

----------------------------------------

TITLE: Disabling Automatic Browser Opening in Vite Dev Server
DESCRIPTION: This snippet demonstrates how to prevent Vite from automatically opening the browser when running 'wasp start' by modifying the 'open' option in the server configuration.

LANGUAGE: javascript
CODE:
export default {
  server: {
    open: false,
  },
}

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  server: {
    open: false,
  },
})

----------------------------------------

TITLE: Protected Page Configuration
DESCRIPTION: Example of setting up a protected page that requires authentication to access.

LANGUAGE: wasp
CODE:
page MainPage {
  component: import Main from "@client/pages/Main.jsx",
  authRequired: true
}

----------------------------------------

TITLE: Using Tailwind Classes in React Components in Wasp
DESCRIPTION: Shows an example of using Tailwind CSS classes in a React component within a Wasp project.

LANGUAGE: jsx
CODE:
// ...

<h1 className="text-3xl font-bold underline">
  Hello world!
</h1>

// ...

----------------------------------------

TITLE: Adding a Custom Route in Server Setup (JavaScript)
DESCRIPTION: Shows how to add a custom route in the server setup function using JavaScript. The function is executed on server start and can be used for custom initialization.

LANGUAGE: javascript
CODE:
export const mySetupFunction = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

----------------------------------------

TITLE: Setting WASP_SERVER_URL Environment Variable in Bash
DESCRIPTION: Defines the new WASP_SERVER_URL server environment variable required in Wasp 0.13.0. This variable specifies the URL of the Wasp server and is used for generating OAuth redirect URLs.

LANGUAGE: bash
CODE:
WASP_SERVER_URL=https://your-wasp-server-url.com

----------------------------------------

TITLE: Auth Entity Schema Definition
DESCRIPTION: Internal Prisma schema for the Auth entity that connects user credentials with the business logic User entity

LANGUAGE: prisma
CODE:
entity Auth {=psl
  id         String         @id @default(uuid())
  userId     Int?           @unique
  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade) 
  identities AuthIdentity[]
  sessions   Session[]
psl=}

----------------------------------------

TITLE: Migrating Database Schema in Wasp
DESCRIPTION: This command creates a new database migration and applies it to the database, updating the schema to include the new Task entity.

LANGUAGE: sh
CODE:
wasp db migrate-dev

----------------------------------------

TITLE: Configuring Basic App Settings in Wasp
DESCRIPTION: This snippet demonstrates the basic structure of an 'app' declaration in Wasp, including setting the Wasp version, app title, and adding custom elements to the head.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ]
}

----------------------------------------

TITLE: Migrating useHistory to useNavigate
DESCRIPTION: Code examples showing how to update from React Router 5's useHistory hook to React Router 6's useNavigate hook.

LANGUAGE: tsx
CODE:
import { useHistory } from 'react-router-dom'

export function SomePage() {
  const history = useHistory()
  const handleClick = () => {
    history.push('/new-route')
  }
  return <button onClick={handleClick}>Go to new route</button>
}

LANGUAGE: tsx
CODE:
import { useNavigate } from 'react-router-dom'

export function SomePage() {
  const navigate = useNavigate()
  const handleClick = () => {
    navigate('/new-route')
  }
  return <button onClick={handleClick}>Go to new route</button>
}

----------------------------------------

TITLE: Custom Task Creation Implementation
DESCRIPTION: Custom implementation of the create operation that connects tasks to users

LANGUAGE: typescript
CODE:
export const createTask: Tasks.CreateAction<CreateTaskInput, Task> = async (
  args,
  context
) => {
  if (!context.user) {
    throw new HttpError(401, 'User not authenticated.')
  }

  const { description, isDone } = args
  const { Task } = context.entities

  return await Task.create({
    data: {
      description,
      isDone,
      user: {
        connect: {
          id: context.user.id,
        },
      },
    },
  })
}

----------------------------------------

TITLE: Accessing Server Environment Variables in JavaScript
DESCRIPTION: Illustrates how to access server-side environment variables in a JavaScript file. These variables can be defined without any special prefix and are accessed using process.env.

LANGUAGE: javascript
CODE:
console.log(process.env.SOME_VAR_NAME)

----------------------------------------

TITLE: Extracting Google User ID from User Object in TypeScript
DESCRIPTION: This snippet demonstrates how to access the Google identity information from a user object and extract the Google User ID. It assumes the existence of a 'user' object with an 'identities' property containing Google-specific data.

LANGUAGE: typescript
CODE:
const googleIdentity = user.identities.google

// Google User ID for example "123456789012345678901"
googleIdentity.id

----------------------------------------

TITLE: Public Directory Structure Example
DESCRIPTION: Example of the public directory structure showing common static assets that don't need to be processed through the build system.

LANGUAGE: plaintext
CODE:
.
‚îî‚îÄ‚îÄ public
    ‚îú‚îÄ‚îÄ favicon.ico
    ‚îî‚îÄ‚îÄ robots.txt

----------------------------------------

TITLE: Enabling Discord Auth in Wasp File
DESCRIPTION: This snippet shows how to configure the Auth object in the main.wasp file to enable Discord authentication. It specifies the User entity and enables the Discord auth method.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      discord: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Implementing Logout Functionality
DESCRIPTION: Example of using the logout function provided by Wasp to create a logout button component.

LANGUAGE: jsx
CODE:
import { logout } from 'wasp/client/auth'

const LogoutButton = () => {
  return <button onClick={logout}>Logout</button>
}

----------------------------------------

TITLE: Implementing Logout Functionality
DESCRIPTION: Example of using the logout function provided by Wasp to create a logout button component.

LANGUAGE: jsx
CODE:
import { logout } from 'wasp/client/auth'

const LogoutButton = () => {
  return <button onClick={logout}>Logout</button>
}

----------------------------------------

TITLE: Installing Wasp Framework
DESCRIPTION: Shell command to install the Wasp framework via curl

LANGUAGE: shell
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Implementing Environment Variable Validation with Zod in Wasp
DESCRIPTION: Shows how to set up Zod-based environment variable validation in a Wasp application using both TypeScript and Wasp configuration files.

LANGUAGE: typescript
CODE:
// src/env.ts
import * as z from 'zod'

import { defineEnvValidationSchema } from 'wasp/env'

export const serverEnvValidationSchema = defineEnvValidationSchema(
  z.object({
    STRIPE_API_KEY: z.string({
      required_error: 'STRIPE_API_KEY is required.',
    }),
  })
)

LANGUAGE: wasp
CODE:
app myApp {
  ...
  server: {
    envValidationSchema: import { serverEnvValidationSchema } from "@src/env",
  },
}

----------------------------------------

TITLE: Implementing onBeforeOAuthRedirect Hook
DESCRIPTION: Example of implementing the onBeforeOAuthRedirect hook to perform actions before OAuth redirect.

LANGUAGE: javascript
CODE:
export const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {
  console.log('query params before oAuth redirect', req.query)

  const id = oauth.uniqueRequestId
  someKindOfStore.set(id, req.query)

  return { url }
}

----------------------------------------

TITLE: Using the routes Object in React
DESCRIPTION: Shows how to use the routes object to generate type-safe links in React.

LANGUAGE: jsx
CODE:
import { routes } from 'wasp/client/router'

const linkToTask = routes.TaskRoute.build({ params: { id: 1 } })

----------------------------------------

TITLE: Displaying Wasp CLI Commands Overview
DESCRIPTION: Shows the complete list of available Wasp CLI commands including general commands and project-specific commands with their descriptions and usage examples.

LANGUAGE: bash
CODE:
USAGE
  wasp <command> [command-args]

COMMANDS
  GENERAL
    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.
      OPTIONS:
        -t|--template <template-name>
           Check out the templates list here: https://github.com/wasp-lang/starters

    new:ai <app-name> <app-description> [<config-json>]
      Uses AI to create a new Wasp project just based on the app name and the description.
      You can do the same thing with `wasp new` interactively.
      Run `wasp new:ai` for more info.

    version               Prints current version of CLI.
    waspls                Run Wasp Language Server. Add --help to get more info.
    completion            Prints help on bash completion.
    uninstall             Removes Wasp from your system.
  IN PROJECT
    start                 Runs Wasp app in development mode, watching for file changes.
    start db              Starts managed development database for you.
    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.
    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.
                          Wasp equivalent of 'have you tried closing and opening it again?'.
    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.
    deploy                Deploys your Wasp app to cloud hosting providers.
    telemetry             Prints telemetry status.
    deps                  Prints the dependencies that Wasp uses in your project.
    dockerfile            Prints the contents of the Wasp generated Dockerfile.
    info                  Prints basic information about the current Wasp project.
    test                  Executes tests in your project.
    studio                (experimental) GUI for inspecting your Wasp app.

----------------------------------------

TITLE: Using Signup Action in React Component
DESCRIPTION: This code shows how to implement a custom signup form using Wasp's signup and login actions in a React component.

LANGUAGE: javascript
CODE:
import { signup, login } from 'wasp/client/auth'

import { useState } from 'react'
import { useNavigate, Link } from 'react-router-dom'

export function Signup() {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState(null)
  const navigate = useNavigate()

  async function handleSubmit(event) {
    event.preventDefault()
    try {
      await signup({
        username,
        password,
      })
      await login(username, password)
      navigate('/')
    } catch (error) {
      setError(error)
    }
  }

  return <form onSubmit={handleSubmit}>{/* ... */}</form>
}

----------------------------------------

TITLE: Using Signup Action in React Component
DESCRIPTION: This code shows how to implement a custom signup form using Wasp's signup and login actions in a React component.

LANGUAGE: javascript
CODE:
import { signup, login } from 'wasp/client/auth'

import { useState } from 'react'
import { useNavigate, Link } from 'react-router-dom'

export function Signup() {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState(null)
  const navigate = useNavigate()

  async function handleSubmit(event) {
    event.preventDefault()
    try {
      await signup({
        username,
        password,
      })
      await login(username, password)
      navigate('/')
    } catch (error) {
      setError(error)
    }
  }

  return <form onSubmit={handleSubmit}>{/* ... */}</form>
}

----------------------------------------

TITLE: Configuring Username Authentication in Wasp
DESCRIPTION: This snippet shows how to enable username & password authentication in the main.wasp file by configuring the auth object and specifying the User entity.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "My App",
  auth: {
    // 1. Specify the user entity (we'll define it next)
    userEntity: User,
    methods: {
      // 2. Enable username authentication
      usernameAndPassword: {},
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Starting a Wasp Application
DESCRIPTION: Commands to navigate to the project directory and start the Wasp application.

LANGUAGE: shell
CODE:
cd <my-project-name>
wasp start

----------------------------------------

TITLE: Implementing onBeforeOAuthRedirect Hook
DESCRIPTION: Example of implementing the onBeforeOAuthRedirect hook to perform actions before OAuth redirect.

LANGUAGE: javascript
CODE:
export const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {
  console.log('query params before oAuth redirect', req.query)

  const id = oauth.uniqueRequestId
  someKindOfStore.set(id, req.query)

  return { url }
}

----------------------------------------

TITLE: Submitting a Job in JavaScript/TypeScript
DESCRIPTION: This snippet demonstrates how to submit a job named 'mySpecialJob' for execution, including an example of delaying the job execution.

LANGUAGE: javascript
CODE:
import { mySpecialJob } from 'wasp/server/jobs'

const submittedJob = await mySpecialJob.submit({ job: "Johnny" })

// Or, if you'd prefer it to execute in the future, just add a .delay().
// It takes a number of seconds, Date, or ISO date string.
await mySpecialJob
  .delay(10)
  .submit({ name: "Johnny" })

----------------------------------------

TITLE: Defining Wasp Operations for Recipe Handling
DESCRIPTION: Declares Wasp query and action operations for retrieving and adding recipes.

LANGUAGE: wasp
CODE:
query getRecipes {
  fn: import { getRecipes } from "@src/recipe/operations",
  entities: [Recipe],
}

action addRecipe {
  fn: import { addRecipe } from "@src/recipe/operations",
  entities: [Recipe],
}

----------------------------------------

TITLE: Accessing Server Environment Variables in TypeScript
DESCRIPTION: Demonstrates how to access server environment variables in a Wasp TypeScript project using the 'env' object imported from 'wasp/server'.

LANGUAGE: typescript
CODE:
import { env } from 'wasp/server'

console.log(env.SOME_VAR_NAME)

----------------------------------------

TITLE: Writing Unit Tests for Helper Functions in Wasp
DESCRIPTION: Example of writing a unit test for a helper function in a Wasp project using Vitest. Shows both JavaScript and TypeScript versions.

LANGUAGE: javascript
CODE:
export function areThereAnyTasks(tasks) {
  return tasks.length === 0;
}

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";

import { areThereAnyTasks } from "./helpers";

test("areThereAnyTasks", () => {
  expect(areThereAnyTasks([])).toBe(false);
});

----------------------------------------

TITLE: Implementing Login Page Component
DESCRIPTION: This React component implements the login page using Wasp's LoginForm component for GitHub authentication.

LANGUAGE: javascript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Deploying Wasp App with Environment Variables
DESCRIPTION: Commands demonstrating how to deploy a Wasp application with both server-side secrets and client-side environment variables.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>

LANGUAGE: shell
CODE:
REACT_APP_ANOTHER_VAR=somevalue wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Custom Signup Fields Configuration
DESCRIPTION: Example of adding and validating custom fields during user signup.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: async (data) => {
    const address = data.address
    if (typeof address !== 'string') {
      throw new Error('Address is required')
    }
    if (address.length < 5) {
      throw new Error('Address must be at least 5 characters long')
    }
    return address
  }
})

----------------------------------------

TITLE: Custom Signup Fields Configuration
DESCRIPTION: Example of adding and validating custom fields during user signup.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: async (data) => {
    const address = data.address
    if (typeof address !== 'string') {
      throw new Error('Address is required')
    }
    if (address.length < 5) {
      throw new Error('Address must be at least 5 characters long')
    }
    return address
  }
})

----------------------------------------

TITLE: Implementing onAfterLogin Hook
DESCRIPTION: Example of implementing the onAfterLogin hook to perform actions after user login.

LANGUAGE: javascript
CODE:
export const onAfterLogin = async ({
  providerId,
  user,
  oauth,
  prisma,
  req,
}) => {
  console.log('user object', user)

  if (oauth) {
    console.log('accessToken', oauth.tokens.accessToken)
    console.log('uniqueRequestId', oauth.uniqueRequestId)

    const id = oauth.uniqueRequestId
    const data = someKindOfStore.get(id)
    if (data) {
      console.log('saved data for the ID', data)
    }
    someKindOfStore.delete(id)
  }
}

----------------------------------------

TITLE: Project Directory Structure with Tailwind Configuration
DESCRIPTION: Shows the expected directory structure after adding Tailwind configuration files to a Wasp project.

LANGUAGE: bash
CODE:
.
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ public
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ postcss.config.cjs
‚îî‚îÄ‚îÄ tailwind.config.cjs

----------------------------------------

TITLE: Setting Node.js Version with NVM
DESCRIPTION: This command sets the Node.js version to 18 for the current shell session when using NVM.

LANGUAGE: shell
CODE:
nvm use 18

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Example of declaring queries in a Wasp file to fetch all tasks and filtered tasks

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@src/queries.js"
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@src/queries.js"
}

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Example of declaring queries in a Wasp file to fetch all tasks and filtered tasks

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@src/queries.js"
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@src/queries.js"
}

----------------------------------------

TITLE: Using Prisma Client Directly in JavaScript
DESCRIPTION: This example demonstrates how to import and use the Prisma client directly in JavaScript server code to create a new Task entity.

LANGUAGE: javascript
CODE:
import { prisma } from 'wasp/server'

prisma.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

----------------------------------------

TITLE: Using Prisma Client Directly in JavaScript
DESCRIPTION: This example demonstrates how to import and use the Prisma client directly in JavaScript server code to create a new Task entity.

LANGUAGE: javascript
CODE:
import { prisma } from 'wasp/server'

prisma.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

----------------------------------------

TITLE: Customizing Per-Path Middleware in Wasp and TypeScript
DESCRIPTION: This example shows how to customize middleware for all API routes under a common path in a Wasp application using TypeScript. It adds a custom middleware to a specific API namespace with proper type annotations.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@server/apis.js",
  path: "/foo/bar"
}

LANGUAGE: typescript
CODE:
import express from 'express'
import type { MiddlewareConfigFn } from '@wasp/middleware'

export const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  const customMiddleware: express.RequestHandler = (_req, _res, next) => {
    console.log('fooBarNamespaceMiddlewareFn: custom middleware')
    next()
  }

  middlewareConfig.set('custom.middleware', customMiddleware)

  return middlewareConfig
}

----------------------------------------

TITLE: Enabling Username Authentication in Wasp
DESCRIPTION: Configuration in the main.wasp file to enable username and password authentication.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    // 1. Specify the user entity (we'll define it next)
    userEntity: User,
    methods: {
      // 2. Enable username authentication
      usernameAndPassword: {},
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Defining Job Declaration in Wasp
DESCRIPTION: Declares a job named mySpecialJob that uses PgBoss executor and references a worker function.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  entities: [Task],
}

----------------------------------------

TITLE: Configuring GitHub Auth in Wasp File
DESCRIPTION: This snippet shows how to enable GitHub authentication in the Wasp configuration file by specifying the User entity and adding GitHub to the auth methods.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Protecting Routes in Wasp
DESCRIPTION: Wasp configuration for adding authentication requirement to a route.

LANGUAGE: wasp
CODE:
page MainPage {
  component: import Main from "@src/pages/Main",
  authRequired: true
}

----------------------------------------

TITLE: Mocking Server Responses for Tests
DESCRIPTION: Shows how to set up mock server responses for testing components that make API calls

LANGUAGE: javascript
CODE:
import { mockServer } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";

const { mockQuery, mockApi } = mockServer();

mockQuery(getTasks, []);

----------------------------------------

TITLE: Mocking Server Responses for Tests
DESCRIPTION: Shows how to set up mock server responses for testing components that make API calls

LANGUAGE: javascript
CODE:
import { mockServer } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";

const { mockQuery, mockApi } = mockServer();

mockQuery(getTasks, []);

----------------------------------------

TITLE: Creating a Basic React Component for a Wasp Page
DESCRIPTION: This snippet demonstrates how to create a simple React component that can be used as a page in a Wasp project, including importing CSS and image files.

LANGUAGE: jsx
CODE:
import waspLogo from './waspLogo.png'
import './Main.css'

export const MainPage = () => {
  // ...
}

LANGUAGE: tsx
CODE:
import waspLogo from './waspLogo.png'
import './Main.css'

export const MainPage = () => {
  // ...
}

----------------------------------------

TITLE: Setting Up Provider in JavaScript
DESCRIPTION: This example shows how to set up a Redux provider in the root component using JavaScript.

LANGUAGE: jsx
CODE:
import store from './store'
import { Provider } from 'react-redux'

export default function Root({ children }) {
  return <Provider store={store}>{children}</Provider>
}

----------------------------------------

TITLE: Implementing onAfterSignup Hook
DESCRIPTION: Example of implementing the onAfterSignup hook to perform actions after user signup.

LANGUAGE: javascript
CODE:
export const onAfterSignup = async ({
  providerId,
  user,
  oauth,
  prisma,
  req,
}) => {
  const count = await prisma.user.count()
  console.log('number of users after', count)
  console.log('user object', user)

  if (oauth) {
    console.log('accessToken', oauth.tokens.accessToken)
    console.log('uniqueRequestId', oauth.uniqueRequestId)

    const id = oauth.uniqueRequestId
    const data = someKindOfStore.get(id)
    if (data) {
      console.log('saved data for the ID', data)
    }
    someKindOfStore.delete(id)
  }
}

----------------------------------------

TITLE: Setting PostgreSQL Database URL in Environment Variables
DESCRIPTION: Configuration of PostgreSQL database connection string in .env.server file.

LANGUAGE: env
CODE:
DATABASE_URL=postgresql://user:password@localhost:5432/mydb

----------------------------------------

TITLE: Basic Project Structure with Prisma Schema
DESCRIPTION: Shows the basic file structure of a Wasp project highlighting the location of the schema.prisma file.

LANGUAGE: c
CODE:
.
‚îú‚îÄ‚îÄ main.wasp
...
‚îú‚îÄ‚îÄ schema.prisma
‚îú‚îÄ‚îÄ src
‚îú‚îÄ‚îÄ tsconfig.json
‚îî‚îÄ‚îÄ vite.config.ts

----------------------------------------

TITLE: Using Social Login UI Helpers in React
DESCRIPTION: Shows how to use Wasp's pre-built social login buttons and URLs in a React component.

LANGUAGE: jsx
CODE:
import {
  GoogleSignInButton,
  googleSignInUrl,
  GitHubSignInButton,
  gitHubSignInUrl,
} from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <>
      <GoogleSignInButton />
      <GitHubSignInButton />
      {/* or */}
      <a href={googleSignInUrl}>Sign in with Google</a>
      <a href={gitHubSignInUrl}>Sign in with GitHub</a>
    </>
  )
}

----------------------------------------

TITLE: Configuring Email Sender in Wasp
DESCRIPTION: Demonstrates how to configure the email sender in the main.wasp file, including setting the provider and default sender details.

LANGUAGE: wasp
CODE:
app Example {
  ...
  emailSender: {
    provider: <provider>,
    defaultFrom: {
      name: "Example",
      email: "hello@itsme.com"
    },
  }
}

----------------------------------------

TITLE: API Reference in Wasp
DESCRIPTION: Provides a comprehensive example of an API declaration in Wasp, showcasing all available fields and options.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  httpRoute: (GET, "/foo/bar"),
  entities: [Task],
  auth: true,
  middlewareConfigFn: import { apiMiddleware } from "@src/apis"
}

----------------------------------------

TITLE: Declaring Basic Web App Components in Wasp
DESCRIPTION: This snippet demonstrates how to declare an app, route, and page in Wasp. It shows the basic structure of declarations and how they are used to define different parts of a web application.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app"
}

route RootRoute { path: "/", to: DashboardPage }

page DashboardPage {
  component: import { DashboardPage } from "@src/Dashboard.jsx"
}

----------------------------------------

TITLE: Adding isSignupComplete Field to User Entity
DESCRIPTION: Shows how to modify the User entity to include an isSignupComplete field for custom signup flows.

LANGUAGE: prisma
CODE:
model User {
  id               Int     @id @default(autoincrement())
  username         String? @unique
  isSignupComplete Boolean @default(false)
}

----------------------------------------

TITLE: Accessing Server Environment Variables in JavaScript
DESCRIPTION: Illustrates how to import and use server-side environment variables in a JavaScript file using the 'env' object from 'wasp/server'.

LANGUAGE: javascript
CODE:
import { env } from 'wasp/server'

console.log(env.SOME_VAR_NAME)

----------------------------------------

TITLE: Accessing Server Environment Variables in JavaScript
DESCRIPTION: Illustrates how to import and use server-side environment variables in a JavaScript file using the 'env' object from 'wasp/server'.

LANGUAGE: javascript
CODE:
import { env } from 'wasp/server'

console.log(env.SOME_VAR_NAME)

----------------------------------------

TITLE: Installing Dependencies with NPM in Wasp
DESCRIPTION: Example command showing how to add a new package (date-fns) to a Wasp project using npm. This will automatically update the dependencies section in package.json.

LANGUAGE: bash
CODE:
npm install date-fns

----------------------------------------

TITLE: Basic Wasp App Configuration
DESCRIPTION: Basic example of configuring a Wasp app with version and title, along with custom head elements for styling.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.12.0"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ]
}

----------------------------------------

TITLE: Implementing Google and GitHub Migration Functions
DESCRIPTION: TypeScript implementation of the migration functions for Google and GitHub auth data, including a generic social login migration function.

LANGUAGE: typescript
CODE:
import { prisma } from "wasp/server";
import { MigrateGoogle, MigrateGithub } from "wasp/server/api";

export const migrateGoogleHandler: MigrateGoogle =
  async (_req, res) => {
    const result = await createSocialLoginMigration("google");

    res.status(200).json({ message: "Migrated users to the new auth", result });
  };

export const migrateGithubHandler: MigrateGithub =
  async (_req, res) => {
    const result = await createSocialLoginMigration("github");

    res.status(200).json({ message: "Migrated users to the new auth", result });
  };

async function createSocialLoginMigration(
  providerName: "google" | "github"
): Promise<{
  numUsersAlreadyMigrated: number;
  numUsersNotUsingThisAuthMethod: number;
  numUsersMigratedSuccessfully: number;
}> {
  const users = await prisma.user.findMany({
    include: {
      auth: true,
      externalAuthAssociations: true,
    },
  });

  const result = {
    numUsersAlreadyMigrated: 0,
    numUsersNotUsingThisAuthMethod: 0,
    numUsersMigratedSuccessfully: 0,
  };

  for (const user of users) {
    if (user.auth) {
      result.numUsersAlreadyMigrated++;
      console.log("Skipping user (already migrated) with id:", user.id);
      continue;
    }

    const provider = user.externalAuthAssociations.find(
      (provider) => provider.provider === providerName
    );

    if (!provider) {
      result.numUsersNotUsingThisAuthMethod++;
      console.log(`Skipping user (not using ${providerName} auth) with id:`, user.id);
      continue;
    }

    await prisma.auth.create({
      data: {
        identities: {
          create: {
            providerName,
            providerUserId: provider.providerId,
            providerData: JSON.stringify({}),
          },
        },
        user: {
          connect: {
            id: user.id,
          },
        },
      },
    });
    result.numUsersMigratedSuccessfully++;
  }

  return result;
}

----------------------------------------

TITLE: Installing Wasp on Linux/OSX
DESCRIPTION: Command to download and run the Wasp installer script on Linux or macOS systems.

LANGUAGE: shell
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Retrieving Discord User ID in TypeScript
DESCRIPTION: Extracts the Discord identity information from a user object and accesses the Discord User ID. The ID is typically a string of numbers like '80351110224678912'.

LANGUAGE: typescript
CODE:
const discordIdentity = user.identities.discord

// Discord User ID for example "80351110224678912"
discordIdentity.id

----------------------------------------

TITLE: Building Wasp Web App with Environment Variables
DESCRIPTION: Installs dependencies and builds the Wasp web application. It requires setting the REACT_APP_API_URL environment variable to the URL of the previously deployed Wasp backend server.

LANGUAGE: bash
CODE:
npm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build

----------------------------------------

TITLE: Navigating to Wasp Build Directory
DESCRIPTION: Changes the current directory to the Wasp web app build folder.

LANGUAGE: bash
CODE:
cd .wasp/build/web-app

----------------------------------------

TITLE: Using Entities in APIs
DESCRIPTION: Example of using Entities in custom API endpoints, including declaration in Wasp and usage in the API implementation.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  entities: [Task],
  httpRoute: (GET, "/foo/bar")
}

LANGUAGE: javascript
CODE:
export const fooBar = (req, res, context) => {
  res.json({ count: await context.entities.Task.count() });
};

----------------------------------------

TITLE: Configuring QueryClient (JavaScript)
DESCRIPTION: Demonstrates how to configure the QueryClient in the setup function using JavaScript.

LANGUAGE: javascript
CODE:
import { configureQueryClient } from 'wasp/client/operations'

export default async function mySetupFunction() {
  // ... some setup
  configureQueryClient({
    defaultOptions: {
      queries: {
        staleTime: Infinity,
      },
    },
  })
  // ... some more setup
}

----------------------------------------

TITLE: Query Client Configuration
DESCRIPTION: Shows how to configure the React Query client globally using the configureQueryClient helper in the setup function.

LANGUAGE: javascript
CODE:
import { configureQueryClient } from 'wasp/client/operations'

export default async function mySetupFunction() {
  configureQueryClient({
    defaultOptions: {
      queries: {
        staleTime: Infinity,
      },
    },
  })
}

----------------------------------------

TITLE: Implementing Forgot Password Page with ForgotPasswordForm Component
DESCRIPTION: This snippet shows how to create a forgot password page using the ForgotPasswordForm component provided by Wasp.

LANGUAGE: wasp
CODE:
route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { ForgotPasswordPage } from "@src/ForgotPasswordPage.tsx"
}

LANGUAGE: tsx
CODE:
import { ForgotPasswordForm } from 'wasp/client/auth'

// Use it like this
export function ForgotPasswordPage() {
  return <ForgotPasswordForm />
}

----------------------------------------

TITLE: Defining Client Environment Variables in .env File
DESCRIPTION: Example of defining client-side environment variables in a .env.client file. These variables must be prefixed with REACT_APP_ to be recognized by Wasp.

LANGUAGE: shell
CODE:
REACT_APP_SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Cleaning Wasp Project
DESCRIPTION: Demonstrates the clean command that removes generated code, cached artifacts, and node_modules directory.

LANGUAGE: bash
CODE:
$ wasp clean

üêù --- Deleting the .wasp/ directory... -------------------------------------------

‚úÖ --- Deleted the .wasp/ directory. ----------------------------------------------

üêù --- Deleting the node_modules/ directory... ------------------------------------

‚úÖ --- Deleted the node_modules/ directory. ---------------------------------------

----------------------------------------

TITLE: Implementing a Job Worker Function in TypeScript
DESCRIPTION: This snippet shows the TypeScript implementation of the 'foo' worker function for 'mySpecialJob', including type annotations for input and output.

LANGUAGE: typescript
CODE:
import { type MySpecialJob } from 'wasp/server/jobs'
import { type Task } from 'wasp/entities'

type Input = { name: string; }
type Output = { tasks: Task[]; }

export const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {
  console.log(`Hello ${name}!`)
  const tasks = await context.entities.Task.findMany({})
  return { tasks }
}

----------------------------------------

TITLE: Configuring Email Provider in Wasp
DESCRIPTION: Basic configuration for setting up an email provider in the Wasp application file. Defines the provider type and default sender information.

LANGUAGE: wasp
CODE:
app Example {
  ...
  emailSender: {
    provider: <provider>,
    defaultFrom: {
      name: "Example",
      email: "hello@itsme.com"
    },
  }
}

----------------------------------------

TITLE: Updating Task Status in React Component (JavaScript)
DESCRIPTION: Implements a checkbox in a React component to update a task's status using the updateTask Action.

LANGUAGE: jsx
CODE:
const TaskView = ({ task }) => {
  const handleIsDoneChange = async (event) => {
    try {
      await updateTask({
        id: task.id,
        isDone: event.target.checked,
      })
    } catch (error) {
      window.alert('Error while updating task: ' + error.message)
    }
  }

  return (
    <div>
      <input
        type="checkbox"
        id={String(task.id)}
        checked={task.isDone}
        onChange={handleIsDoneChange}
      />
      {task.description}
    </div>
  )
}

----------------------------------------

TITLE: Creating Setup Function in JavaScript
DESCRIPTION: This snippet illustrates how to create a setup function in JavaScript that logs a message every hour.

LANGUAGE: javascript
CODE:
export default async function mySetupFunction() {
  let count = 1
  setInterval(
    () => console.log(`You have been online for ${count++} hours.`),
    1000 * 60 * 60
  )
}

----------------------------------------

TITLE: API Reference in Wasp
DESCRIPTION: Complete API reference for declaring custom API endpoints in Wasp, including all available fields and their descriptions.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  httpRoute: (GET, "/foo/bar"),
  entities: [Task],
  auth: true,
  middlewareConfigFn: import { apiMiddleware } from "@src/apis"
}

----------------------------------------

TITLE: Minimal React Component
DESCRIPTION: Simplified React component implementation after cleanup, showing basic Hello World example.

LANGUAGE: javascript
CODE:
const MainPage = () => {
  return <div>Hello world!</div>
}

export default MainPage

----------------------------------------

TITLE: Installing Wasp on Linux/macOS
DESCRIPTION: Command to install Wasp on Linux or macOS systems using a curl command to download and execute the installer script.

LANGUAGE: shell
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Cleaning Wasp Project
DESCRIPTION: Demonstrates the clean command that removes generated code, cached artifacts, and node_modules directory.

LANGUAGE: bash
CODE:
$ wasp clean

üêù --- Deleting the .wasp/ directory... -------------------------------------------

‚úÖ --- Deleted the .wasp/ directory. ----------------------------------------------

üêù --- Deleting the node_modules/ directory... ------------------------------------

‚úÖ --- Deleted the node_modules/ directory. ---------------------------------------

----------------------------------------

TITLE: Implementing Custom GitHub Auth Functions
DESCRIPTION: This snippet shows how to implement custom functions for GitHub authentication configuration and user signup fields in JavaScript.

LANGUAGE: javascript
CODE:
export const userSignupFields = {
  username: () => "hardcoded-username",
  displayName: (data) => data.profile.displayName,
};

export function getConfig() {
  return {
    clientID, // look up from env or elsewhere
    clientSecret, // look up from env or elsewhere
    scope: [],
  };
}

----------------------------------------

TITLE: Using Entities in Queries
DESCRIPTION: Example of how to use entities in query declarations and implementations.

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@server/queries.js",
  entities: [Task]
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@server/queries.js",
  entities: [Task]
}

LANGUAGE: javascript
CODE:
export const getAllTasks = async (args, context) => {
  return context.entities.Task.findMany({})
}

export const getFilteredTasks = async (args, context) => {
  return context.entities.Task.findMany({
    where: { isDone: args.isDone },
  })
}

----------------------------------------

TITLE: Importing Image Asset as URL in JavaScript React
DESCRIPTION: Demonstrates how to import and use an image asset in a React component using JavaScript. The imported URL will be transformed to include a hash in production builds.

LANGUAGE: jsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Importing Image Asset as URL in JavaScript React
DESCRIPTION: Demonstrates how to import and use an image asset in a React component using JavaScript. The imported URL will be transformed to include a hash in production builds.

LANGUAGE: jsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Creating Fly.io App and Database
DESCRIPTION: Commands to set up a new Fly.io app and create a PostgreSQL database for a Wasp application.

LANGUAGE: bash
CODE:
cd .wasp/build
flyctl launch --remote-only

----------------------------------------

TITLE: Enabling Keycloak Auth in Wasp Configuration
DESCRIPTION: This snippet shows how to enable Keycloak authentication in the Wasp configuration file. It specifies the User entity and enables the Keycloak auth method.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      keycloak: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Adding Tailwind Plugins to Configuration
DESCRIPTION: Demonstrates how to add Tailwind plugins to the configuration file after installing them as development dependencies.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  // ...
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
  // ...
}

----------------------------------------

TITLE: Adding Tailwind Plugins to Configuration
DESCRIPTION: Demonstrates how to add Tailwind plugins to the configuration file after installing them as development dependencies.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  // ...
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
  // ...
}

----------------------------------------

TITLE: Customizing Auth UI Appearance in JavaScript
DESCRIPTION: Shows how to define custom appearance settings for Auth UI components and apply them to a LoginForm.

LANGUAGE: javascript
CODE:
export const authAppearance = {
  colors: {
    brand: '#5969b8', // blue
    brandAccent: '#de5998', // pink
    submitButtonText: 'white',
  },
}

LANGUAGE: jsx
CODE:
import { LoginForm } from 'wasp/client/auth'
import { authAppearance } from './appearance'

export function LoginPage() {
  return (
    <LoginForm
      // Pass the appearance object to the form
      appearance={authAppearance}
    />
  )
}

----------------------------------------

TITLE: Customizing Auth UI Appearance in JavaScript
DESCRIPTION: Shows how to define custom appearance settings for Auth UI components and apply them to a LoginForm.

LANGUAGE: javascript
CODE:
export const authAppearance = {
  colors: {
    brand: '#5969b8', // blue
    brandAccent: '#de5998', // pink
    submitButtonText: 'white',
  },
}

LANGUAGE: jsx
CODE:
import { LoginForm } from 'wasp/client/auth'
import { authAppearance } from './appearance'

export function LoginPage() {
  return (
    <LoginForm
      // Pass the appearance object to the form
      appearance={authAppearance}
    />
  )
}

----------------------------------------

TITLE: Using Actions on the Client
DESCRIPTION: Example of using Actions in a React component on the client side.

LANGUAGE: jsx
CODE:
import React from 'react'
import { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'

export const TaskPage = ({ id }) => {
  const { data: task } = useQuery(getTask, { id })

  if (!task) {
    return <h1>"Loading"</h1>
  }

  const { description, isDone } = task
  return (
    <div>
      <p>
        <strong>Description: </strong>
        {description}
      </p>
      <p>
        <strong>Is done: </strong>
        {isDone ? 'Yes' : 'No'}
      </p>
      {isDone || (
        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>
      )}
    </div>
  )
}

----------------------------------------

TITLE: Using Actions on the Client
DESCRIPTION: Example of using Actions in a React component on the client side.

LANGUAGE: jsx
CODE:
import React from 'react'
import { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'

export const TaskPage = ({ id }) => {
  const { data: task } = useQuery(getTask, { id })

  if (!task) {
    return <h1>"Loading"</h1>
  }

  const { description, isDone } = task
  return (
    <div>
      <p>
        <strong>Description: </strong>
        {description}
      </p>
      <p>
        <strong>Is done: </strong>
        {isDone ? 'Yes' : 'No'}
      </p>
      {isDone || (
        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>
      )}
    </div>
  )
}

----------------------------------------

TITLE: Installing a New Dependency with npm in Wasp
DESCRIPTION: This snippet demonstrates how to add a new package (date-fns) to a Wasp project using npm. The command will add the package to the dependencies section of package.json.

LANGUAGE: bash
CODE:
npm install date-fns

----------------------------------------

TITLE: Installing Node.js with NVM
DESCRIPTION: This command uses Node Version Manager (NVM) to install Node.js version 18, which is required for running Wasp.

LANGUAGE: shell
CODE:
nvm install 18

----------------------------------------

TITLE: Using VerifyEmailForm Component in React
DESCRIPTION: Demonstrates how to import and use the VerifyEmailForm component in a React component file.

LANGUAGE: wasp
CODE:
route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { VerifyEmailPage } from "@src/VerifyEmailPage.jsx"
}

LANGUAGE: jsx
CODE:
import { VerifyEmailForm } from 'wasp/client/auth'

// Use it like this
export function VerifyEmailPage() {
  return <VerifyEmailForm />
}

----------------------------------------

TITLE: Using VerifyEmailForm Component in React
DESCRIPTION: Demonstrates how to import and use the VerifyEmailForm component in a React component file.

LANGUAGE: wasp
CODE:
route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { VerifyEmailPage } from "@src/VerifyEmailPage.jsx"
}

LANGUAGE: jsx
CODE:
import { VerifyEmailForm } from 'wasp/client/auth'

// Use it like this
export function VerifyEmailPage() {
  return <VerifyEmailForm />
}

----------------------------------------

TITLE: Using ForgotPasswordForm Component in React
DESCRIPTION: Illustrates how to import and use the ForgotPasswordForm component in a React component file.

LANGUAGE: wasp
CODE:
route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { ForgotPasswordPage } from "@src/ForgotPasswordPage.jsx"
}

LANGUAGE: jsx
CODE:
import { ForgotPasswordForm } from 'wasp/client/auth'

// Use it like this
export function ForgotPasswordPage() {
  return <ForgotPasswordForm />
}

----------------------------------------

TITLE: Using ForgotPasswordForm Component in React
DESCRIPTION: Illustrates how to import and use the ForgotPasswordForm component in a React component file.

LANGUAGE: wasp
CODE:
route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { ForgotPasswordPage } from "@src/ForgotPasswordPage.jsx"
}

LANGUAGE: jsx
CODE:
import { ForgotPasswordForm } from 'wasp/client/auth'

// Use it like this
export function ForgotPasswordPage() {
  return <ForgotPasswordForm />
}

----------------------------------------

TITLE: Setting up a Provider (TypeScript)
DESCRIPTION: Shows how to set up a Redux provider in the root component using TypeScript.

LANGUAGE: tsx
CODE:
import store from './store'
import { Provider } from 'react-redux'

export default function Root({ children }: { children: React.ReactNode }) {
  return <Provider store={store}>{children}</Provider>
}

----------------------------------------

TITLE: Configuring Google Auth in Wasp File
DESCRIPTION: This snippet shows how to enable Google authentication in the Wasp file by specifying the User entity, SocialLogin entity, and enabling the Google auth method.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Configuring PostgreSQL Database in Wasp
DESCRIPTION: Example showing how to configure PostgreSQL as the database backend in a Wasp application configuration file.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  db: {
    system: PostgreSQL,
    // ...
  }
}

----------------------------------------

TITLE: Disabling Wasp Telemetry with Environment Variable in Bash
DESCRIPTION: This command demonstrates how to opt out of Wasp telemetry by setting the WASP_TELEMETRY_DISABLE environment variable to any value.

LANGUAGE: bash
CODE:
export WASP_TELEMETRY_DISABLE=1

----------------------------------------

TITLE: Storing Values for Later Use in Setup Function (TypeScript)
DESCRIPTION: Shows how to store values during server setup for later use in operations, using TypeScript. It includes type annotations for the setup function and query.

LANGUAGE: typescript
CODE:
import { ServerSetupFn } from '@wasp/types'

let someResource = undefined

export const mySetupFunction: ServerSetupFn = async () => {
  // Let's pretend functions setUpSomeResource and startSomeCronJob
  // are implemented below or imported from another file.
  someResource = await setUpSomeResource()
  startSomeCronJob()
}

export const getSomeResource = () => someResource

LANGUAGE: typescript
CODE:
import { SomeQuery } from '@wasp/queries/types'
import { getSomeResource } from './myServerSetupCode.js'

...

export const someQuery: SomeQuery<...> = async (args, context) => {
  const someResource = getSomeResource()
  return queryDataFromSomeResource(args, someResource)
}

----------------------------------------

TITLE: Setting Up Custom Domain for Fly.io Deployment
DESCRIPTION: Commands to set up a custom domain for a Wasp application deployed on Fly.io. This includes creating certificates and setting environment variables.

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context client certs create mycoolapp.com

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Shows how to configure authentication in a Wasp application with username/password and Google auth methods. Includes User entity definition with Prisma schema language.

LANGUAGE: c
CODE:
app todoVisualize {
  title: "todo-visualize",

  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}, 
      google: {},
    },
  }
}

entity User {=psl
  id          Int     @id @default(autoincrement())
  tasks       Task[]
psl=}

----------------------------------------

TITLE: Accessing Client Configuration in Wasp
DESCRIPTION: This snippet shows how to import and use the client configuration object in Wasp. The configuration object includes fields like 'apiUrl', which can be set using environment variables.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/client'

console.log(config.apiUrl)

----------------------------------------

TITLE: Adding isSignupComplete Field to User Entity in Wasp
DESCRIPTION: This snippet demonstrates how to add an isSignupComplete field to the User entity for custom signup flows.

LANGUAGE: wasp
CODE:
entity User {=psl
    id                        Int           @id @default(autoincrement())
    username                  String?       @unique
    isSignupComplete          Boolean       @default(false)
psl=}

----------------------------------------

TITLE: Using Actions in React Components
DESCRIPTION: Example of using Wasp Actions within a React component including error handling.

LANGUAGE: jsx
CODE:
import React from 'react'
import { useQuery } from '@wasp/queries'
import getTask from '@wasp/queries/getTask'
import markTaskAsDone from '@wasp/actions/markTaskAsDone'

export const TaskPage = ({ id }) => {
  const { data: task } = useQuery(getTask, { id })

  if (!task) {
    return <h1>"Loading"</h1>
  }

  const { description, isDone } = task
  return (
    <div>
      <p>
        <strong>Description: </strong>
        {description}
      </p>
      <p>
        <strong>Is done: </strong>
        {isDone ? 'Yes' : 'No'}
      </p>
      {isDone || (
        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>
      )}
    </div>
  )
}

----------------------------------------

TITLE: Using SignupForm Component in React
DESCRIPTION: Shows how to import and use the SignupForm component in a React component file.

LANGUAGE: wasp
CODE:
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/SignupPage.jsx"
}

LANGUAGE: jsx
CODE:
import { SignupForm } from 'wasp/client/auth'

// Use it like this
export function SignupPage() {
  return <SignupForm />
}

----------------------------------------

TITLE: Defining User Entity in Wasp
DESCRIPTION: This snippet demonstrates how to define the User entity in the Wasp file, which is required for GitHub authentication.

LANGUAGE: wasp
CODE:
entity User {=psl
    id          Int     @id @default(autoincrement())
    // ...
psl=}

----------------------------------------

TITLE: Implementing React Components with Wasp Integration
DESCRIPTION: Demonstrates how to use React components with Wasp's special imports and hooks for data fetching and state management.

LANGUAGE: javascript
CODE:
import { useQuery } from '@wasp/queries'
import getListsAndCards from '@wasp/queries/getListsAndCards'
import createList from '@wasp/actions/createList'

const MainPage = ({ user }) => {
  const { data: listsAndCards, isFetchingListsAndCards, errorListsAndCards }
    = useQuery(getListsAndCards)

  return (
    ...
  )
}

----------------------------------------

TITLE: Custom User Entity with Signup Completion Flag
DESCRIPTION: Shows how to extend the User entity with additional fields for tracking signup completion status.

LANGUAGE: wasp
CODE:
entity User {=psl
    id                        Int           @id @default(autoincrement())
    username                  String?       @unique
    isSignupComplete          Boolean       @default(false)
psl=}

----------------------------------------

TITLE: Old Project Structure Example
DESCRIPTION: Example file tree showing the old project structure in Wasp 0.11.x

LANGUAGE: text
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ client
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ react-app-env.d.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îÇ   ‚îú‚îÄ‚îÄ server
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îú‚îÄ‚îÄ shared
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îî‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Old Project Structure Example
DESCRIPTION: Example file tree showing the old project structure in Wasp 0.11.x

LANGUAGE: text
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ client
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ react-app-env.d.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îÇ   ‚îú‚îÄ‚îÄ server
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îú‚îÄ‚îÄ shared
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îî‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Submitting a Job in JavaScript
DESCRIPTION: Demonstrates how to submit a job for execution, including an example of delaying the job execution.

LANGUAGE: javascript
CODE:
import { mySpecialJob } from '@wasp/jobs/mySpecialJob.js'

const submittedJob = await mySpecialJob.submit({ job: "Johnny" })

// Or, if you'd prefer it to execute in the future, just add a .delay().
// It takes a number of seconds, Date, or ISO date string.
await mySpecialJob
  .delay(10)
  .submit({ name: "Johnny" })

----------------------------------------

TITLE: Implementing WebSocket Client in React (JavaScript)
DESCRIPTION: Demonstrates how to use WebSockets in a React component using JavaScript. It utilizes Wasp's 'useSocket' and 'useSocketListener' hooks to manage the WebSocket connection and handle events.

LANGUAGE: jsx
CODE:
import React, { useState } from 'react'
import {
  useSocket,
  useSocketListener,
} from 'wasp/client/webSocket'

export const ChatPage = () => {
  const [messageText, setMessageText] = useState('')
  const [messages, setMessages] = useState([])
  const { socket, isConnected } = useSocket()

  useSocketListener('chatMessage', logMessage)

  function logMessage(msg) {
    setMessages((priorMessages) => [msg, ...priorMessages])
  }

  function handleSubmit(e) {
    e.preventDefault()
    socket.emit('chatMessage', messageText)
    setMessageText('')
  }

  const messageList = messages.map((msg) => (
    <li key={msg.id}>
      <em>{msg.username}</em>: {msg.text}
    </li>
  ))
  const connectionIcon = isConnected ? 'üü¢' : 'üî¥'

  return (
    <>
      <h2>Chat {connectionIcon}</h2>
      <div>
        <form onSubmit={handleSubmit}>
          <div>
            <div>
              <input
                type="text"
                value={messageText}
                onChange={(e) => setMessageText(e.target.value)}
              />
            </div>
            <div>
              <button type="submit">Submit</button>
            </div>
          </div>
        </form>
        <ul>{messageList}</ul>
      </div>
    </>
  )
}

----------------------------------------

TITLE: Opting Out of Telemetry in Bash
DESCRIPTION: This snippet shows how to opt-out of telemetry in Wasp by setting the WASP_TELEMETRY_DISABLE environment variable to any value.

LANGUAGE: bash
CODE:
export WASP_TELEMETRY_DISABLE=1

----------------------------------------

TITLE: Checking Node.js Version
DESCRIPTION: This command displays the current version of Node.js being used in the shell session.

LANGUAGE: shell
CODE:
node -v

----------------------------------------

TITLE: Defining Routes and Pages in Wasp
DESCRIPTION: This snippet demonstrates how to define a route and a page component in the Wasp configuration file, including authentication requirements.

LANGUAGE: wasp
CODE:
route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import { HomePage } from "@src/pages/HomePage",
  authRequired: true
}

----------------------------------------

TITLE: Basic Social Auth Configuration in Wasp
DESCRIPTION: Demonstrates the basic setup of social authentication with Google in a Wasp application, including User entity definition.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

entity User {=psl
    id                        Int           @id @default(autoincrement())
    //...
psl=}

----------------------------------------

TITLE: Basic Social Auth Configuration in Wasp
DESCRIPTION: Demonstrates the basic setup of social authentication with Google in a Wasp application, including User entity definition.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

entity User {=psl
    id                        Int           @id @default(autoincrement())
    //...
psl=}

----------------------------------------

TITLE: Tailwind Plugin Configuration
DESCRIPTION: Configuration for adding Tailwind CSS plugins like forms and typography.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  // ...
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
  // ...
}

----------------------------------------

TITLE: Declaring Basic Web App Structure in Wasp
DESCRIPTION: Demonstrates the declaration of an app, route, and page in Wasp. This snippet showcases the basic structure of a Wasp application, including app title, route definition, and page component import.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app"
}

route RootRoute { path: "/", to: DashboardPage }

page DashboardPage {
  component: import { DashboardPage } from "@src/Dashboard.jsx"
}

----------------------------------------

TITLE: Defining WebSocket Server Logic in TypeScript
DESCRIPTION: Illustrates the TypeScript implementation of the webSocketFn function, including type definitions for events and payloads to ensure full-stack type safety.

LANGUAGE: typescript
CODE:
import type { WebSocketDefinition, WaspSocketData } from '@wasp/webSocket'
import { v4 as uuidv4 } from 'uuid'

export const webSocketFn: WebSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = socket.data.user?.email || socket.data.user?.username || 'unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
      // You can also use your entities here:
      // await context.entities.SomeEntity.create({ someField: msg })
    })
  })
}

type WebSocketFn = WebSocketDefinition<
  ClientToServerEvents,
  ServerToClientEvents,
  InterServerEvents,
  SocketData
>

interface ServerToClientEvents {
  chatMessage: (msg: { id: string, username: string, text: string }) => void;
}

interface ClientToServerEvents {
  chatMessage: (msg: string) => void;
}

interface InterServerEvents {}

interface SocketData extends WaspSocketData {}

----------------------------------------

TITLE: Protected Page Configuration
DESCRIPTION: Example of configuring a protected page that requires authentication to access.

LANGUAGE: wasp
CODE:
page MainPage {
  component: import Main from "@src/pages/Main",
  authRequired: true
}

----------------------------------------

TITLE: Protected Page Configuration
DESCRIPTION: Example of configuring a protected page that requires authentication to access.

LANGUAGE: wasp
CODE:
page MainPage {
  component: import Main from "@src/pages/Main",
  authRequired: true
}

----------------------------------------

TITLE: Configuring Username Auth in Wasp
DESCRIPTION: Basic configuration for enabling username & password authentication in the main.wasp file

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Displaying Wasp CLI Version
DESCRIPTION: Shows the output of the 'wasp version' command, which displays the current version of the Wasp CLI and provides instructions for updating or installing specific versions.

LANGUAGE: bash
CODE:
$ wasp version

0.14.0

If you wish to install/switch to the latest version of Wasp, do:
curl -sSL https://get.wasp.sh/installer.sh | sh -s

If you want specific x.y.z version of Wasp, do:
curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z

Check https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.

----------------------------------------

TITLE: Defining a Route and Page in Wasp
DESCRIPTION: This snippet shows how to declare a route and a page in the main.wasp file, connecting a URL path to a React component.

LANGUAGE: wasp
CODE:
route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Social Auth UI Integration
DESCRIPTION: Example of implementing social login buttons and URLs in a React component.

LANGUAGE: typescript
CODE:
import {
  GoogleSignInButton,
  googleSignInUrl,
  GitHubSignInButton,
  gitHubSignInUrl,
} from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <>
      <GoogleSignInButton />
      <GitHubSignInButton />
      {/* or */}
      <a href={googleSignInUrl}>Sign in with Google</a>
      <a href={gitHubSignInUrl}>Sign in with GitHub</a>
    </>
  )
}

----------------------------------------

TITLE: Customizing Base Path in Vite Config (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to customize the base path in the Vite configuration. It uses the defineConfig function and modifies the 'base' option to serve the client from a different path than the root.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  base: '/my-app/',
})

----------------------------------------

TITLE: Environment Validation with Zod in TypeScript
DESCRIPTION: Example showing how to validate environment variables using Zod schema validation in a wasp application, demonstrating both the backend validation schema and the wasp app configuration

LANGUAGE: typescript
CODE:
// src/env.ts
import * as z from 'zod'

import { defineEnvValidationSchema } from 'wasp/env'

export const serverEnvValidationSchema = defineEnvValidationSchema(
  z.object({
    STRIPE_API_KEY: z.string({
      required_error: 'STRIPE_API_KEY is required.',
    }),
  })
)

LANGUAGE: typescript
CODE:
// main.wasp
app myApp {
  ...
  server: {
    envValidationSchema: import { serverEnvValidationSchema } from "@src/env",
  },
}

----------------------------------------

TITLE: Creating a Simple Helper Function in TypeScript
DESCRIPTION: Defines a helper function to check if there are any tasks in an array, using TypeScript types.

LANGUAGE: typescript
CODE:
import { type Task } from "wasp/entities";

export function areThereAnyTasks(tasks: Task[]): boolean {
  return tasks.length === 0;
}

----------------------------------------

TITLE: Creating Auth Pages with React Components
DESCRIPTION: This code creates React components for login and signup pages. It uses Wasp's built-in LoginForm and SignupForm components and adds custom layout and navigation links.

LANGUAGE: javascript
CODE:
import { LoginForm, SignupForm } from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
    </Layout>
  );
}

export function Signup() {
  return (
    <Layout>
      <SignupForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </Layout>
  );
}

export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Customizing Per-Path Middleware in Wasp and JavaScript
DESCRIPTION: This example demonstrates how to customize middleware for all API routes under a common path in a Wasp application using JavaScript. It adds a custom middleware to a specific API namespace.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@server/apis.js",
  path: "/foo/bar"
}

LANGUAGE: javascript
CODE:
export const fooBarNamespaceMiddlewareFn = (middlewareConfig) => {
  const customMiddleware = (_req, _res, next) => {
    console.log('fooBarNamespaceMiddlewareFn: custom middleware')
    next()
  }

  middlewareConfig.set('custom.middleware', customMiddleware)

  return middlewareConfig
}

----------------------------------------

TITLE: Defining User Signup Fields in TypeScript
DESCRIPTION: This snippet demonstrates how to define additional user signup fields in TypeScript using the `defineUserSignupFields` function from Wasp. It sets 'address' as a required field and 'phone' as an optional field.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: (data) => {
    if (!data.address) {
      throw new Error('Address is required')
    }
    return data.address
  }
  phone: (data) => data.phone,
})

----------------------------------------

TITLE: Updating Wasp Version Configuration
DESCRIPTION: Example of updating the Wasp version field in the main configuration file to version 0.16.0.

LANGUAGE: wasp
CODE:
app MyApp {
  wasp: {
    version: "^0.16.0"
  },
}

----------------------------------------

TITLE: Custom Login Implementation
DESCRIPTION: Example of a custom login implementation using Wasp's login action.

LANGUAGE: jsx
CODE:
import { login } from 'wasp/client/auth'

import { useState } from 'react'
import { useNavigate, Link } from 'react-router-dom'

export function LoginPage() {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState(null)
  const navigate = useNavigate()

  async function handleSubmit(event) {
    event.preventDefault()
    try {
      await login(username, password)
      navigate('/')
    } catch (error) {
      setError(error)
    }
  }

  return <form onSubmit={handleSubmit}>{/* ... */}</form>
}

----------------------------------------

TITLE: Social Auth UI Integration
DESCRIPTION: Example of implementing social login buttons and URLs in a React component.

LANGUAGE: typescript
CODE:
import {
  GoogleSignInButton,
  googleSignInUrl,
  GitHubSignInButton,
  gitHubSignInUrl,
} from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <>
      <GoogleSignInButton />
      <GitHubSignInButton />
      {/* or */}
      <a href={googleSignInUrl}>Sign in with Google</a>
      <a href={gitHubSignInUrl}>Sign in with GitHub</a>
    </>
  )
}

----------------------------------------

TITLE: Creating Auth Pages with React Components
DESCRIPTION: This code creates React components for login and signup pages. It uses Wasp's built-in LoginForm and SignupForm components and adds custom layout and navigation links.

LANGUAGE: javascript
CODE:
import { LoginForm, SignupForm } from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
    </Layout>
  );
}

export function Signup() {
  return (
    <Layout>
      <SignupForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </Layout>
  );
}

export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Adding isSignupComplete Field to User Entity
DESCRIPTION: Shows how to add an isSignupComplete field to the User entity in the Prisma schema.

LANGUAGE: prisma
CODE:
model User {
  id               Int     @id @default(autoincrement())
  username         String? @unique
  isSignupComplete Boolean @default(false)
}

----------------------------------------

TITLE: Cleaning Wasp Project
DESCRIPTION: Demonstrates the clean command which removes generated code, cached artifacts, and node_modules directory.

LANGUAGE: bash
CODE:
$ wasp clean

üêù --- Deleting the .wasp/ directory... -------------------------------------------

‚úÖ --- Deleted the .wasp/ directory. ----------------------------------------------

üêù --- Deleting the node_modules/ directory... ------------------------------------

‚úÖ --- Deleted the node_modules/ directory. ---------------------------------------

----------------------------------------

TITLE: Declaring updateTask Action in Wasp
DESCRIPTION: Declares a new Action called updateTask in the main.wasp file for updating task status.

LANGUAGE: wasp
CODE:
action updateTask {
  fn: import { updateTask } from "@src/actions",
  entities: [Task]
}

----------------------------------------

TITLE: Implementing Query Logic in Node.js
DESCRIPTION: Shows the server-side implementation of a query using Prisma SDK in Node.js, including authentication checks and data retrieval logic.

LANGUAGE: javascript
CODE:
export const getListsAndCards = async (args, context) => {
  if (!context.user) { throw new HttpError(403) }

  return context.entities.List.findMany({
    where: { user: { id: context.user.id } },
    include: { cards: true }
  })
}

----------------------------------------

TITLE: Importing ShowForTs Component in JSX
DESCRIPTION: This snippet imports the ShowForTs component from a specific path, likely used for conditional rendering of TypeScript-specific content.

LANGUAGE: jsx
CODE:
import { ShowForTs } from '@site/src/components/TsJsHelpers';

----------------------------------------

TITLE: Implementing Logout Button Component
DESCRIPTION: Shows how to implement a logout button using Wasp's auth client utilities.

LANGUAGE: typescript
CODE:
import { logout } from 'wasp/client/auth'

const LogoutButton = () => {
  return <button onClick={logout}>Logout</button>
}

----------------------------------------

TITLE: Navigating to Project Directory and Starting Development Server
DESCRIPTION: These commands change the current directory to the newly created TodoApp project and start the Wasp development server.

LANGUAGE: sh
CODE:
$ cd TodoApp
$ wasp start

----------------------------------------

TITLE: Navigating to Project Directory and Starting Development Server
DESCRIPTION: These commands change the current directory to the newly created TodoApp project and start the Wasp development server.

LANGUAGE: sh
CODE:
$ cd TodoApp
$ wasp start

----------------------------------------

TITLE: Navigating to Project Directory and Starting Development Server
DESCRIPTION: These commands change the current directory to the newly created TodoApp project and start the Wasp development server.

LANGUAGE: sh
CODE:
$ cd TodoApp
$ wasp start

----------------------------------------

TITLE: Creating New Wasp SaaS Project
DESCRIPTION: Command to create a new Wasp project using the SaaS template

LANGUAGE: shell
CODE:
wasp new -t saas

----------------------------------------

TITLE: Customizing Social Buttons Layout in Auth UI
DESCRIPTION: This snippet demonstrates how to customize the layout of social login buttons in auth UI components.

LANGUAGE: tsx
CODE:
import { LoginForm } from 'wasp/client/auth'

export function LoginPage() {
  return (
    <LoginForm
      // Pass in the socialLayout prop
      socialLayout="vertical"
    />
  )
}

----------------------------------------

TITLE: Navigating to Web App Build Directory in Bash
DESCRIPTION: Change the current directory to the web app build folder within the Wasp project structure.

LANGUAGE: bash
CODE:
cd .wasp/build/web-app

----------------------------------------

TITLE: Navigating to Project Directory and Starting Development Server
DESCRIPTION: These commands change the current directory to the newly created TodoApp project and start the Wasp development server.

LANGUAGE: sh
CODE:
$ cd TodoApp
$ wasp start

----------------------------------------

TITLE: Uninstalling Wasp
DESCRIPTION: Shows the process of uninstalling Wasp from the system using the 'wasp uninstall' command, including the confirmation prompt and the directories and files that will be removed.

LANGUAGE: bash
CODE:
$ wasp uninstall

üêù --- Uninstalling Wasp ... ------------------------------------------------------

 We will remove the following directories:
   {home}/.local/share/wasp-lang/
   {home}/.cache/wasp/

 We will also remove the following files:
   {home}/.local/bin/wasp

 Are you sure you want to continue? [y/N]
 y

‚úÖ --- Uninstalled Wasp -----------------------------------------------------------

----------------------------------------

TITLE: Custom Signup Implementation in JavaScript
DESCRIPTION: Example implementation of a custom signup function in JavaScript, using Wasp's auth utilities to create a new user.

LANGUAGE: javascript
CODE:
import {
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'

export const signup = async (args, { entities: { User } }) => {
  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      // Any additional data you want to store on the User entity
      {},
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  // Your custom code after sign-up.
  // ...

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: Custom Signup Implementation in JavaScript
DESCRIPTION: Example implementation of a custom signup function in JavaScript, using Wasp's auth utilities to create a new user.

LANGUAGE: javascript
CODE:
import {
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'

export const signup = async (args, { entities: { User } }) => {
  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      // Any additional data you want to store on the User entity
      {},
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  // Your custom code after sign-up.
  // ...

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: Using getUsername in React Component (JavaScript)
DESCRIPTION: Example of using getUsername helper in a React component to retrieve the username from a user object. The function returns the username or null if no username auth identity exists.

LANGUAGE: jsx
CODE:
import { getUsername } from 'wasp/auth'

const MainPage = ({ user }) => {
  const username = getUsername(user)
  // ...
}

----------------------------------------

TITLE: Deploying Wasp App with Environment Variables
DESCRIPTION: Commands demonstrating how to deploy a Wasp app with server-side and client-side environment variables using the Wasp CLI.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>

LANGUAGE: shell
CODE:
REACT_APP_ANOTHER_VAR=somevalue wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Customizing Per-Path Middleware in Wasp and JavaScript
DESCRIPTION: This example demonstrates how to customize middleware for all API routes under a common path in a Wasp application using JavaScript. It adds a custom middleware to a specific API namespace.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@src/apis",
  path: "/foo/bar"
}

LANGUAGE: javascript
CODE:
export const fooBarNamespaceMiddlewareFn = (middlewareConfig) => {
  const customMiddleware = (_req, _res, next) => {
    console.log('fooBarNamespaceMiddlewareFn: custom middleware')
    next()
  }

  middlewareConfig.set('custom.middleware', customMiddleware)

  return middlewareConfig
}

----------------------------------------

TITLE: Auth UI Components Implementation
DESCRIPTION: React components for authentication UI pages including login, signup, email verification, and password reset.

LANGUAGE: typescript
CODE:
import {
  LoginForm,
  SignupForm,
  VerifyEmailForm,
  ForgotPasswordForm,
  ResetPasswordForm,
} from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
    </Layout>
  )
}

----------------------------------------

TITLE: User Signup Fields After Migration
DESCRIPTION: Shows the new format for defining user signup fields using the updated profile data structure.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
    displayName: (data: any) => data.profile.name,
})

----------------------------------------

TITLE: Defining a Job in Wasp
DESCRIPTION: Shows how to declare a basic job in a Wasp file, specifying the executor, perform function, and related entities.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  entities: [Task],
}

----------------------------------------

TITLE: Declaring a Job in Wasp
DESCRIPTION: Defines a job named 'mySpecialJob' using the PgBoss executor and specifies the worker function to be executed.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@server/workers/bar.js"
  },
  entities: [Task],
}

----------------------------------------

TITLE: Creating Client Authentication Pages
DESCRIPTION: This snippet shows how to create the client-side authentication pages using React components.

LANGUAGE: javascript
CODE:
import { LoginForm } from '@wasp/auth/forms/Login'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Using Entities in Queries
DESCRIPTION: Example of declaring and using entities in queries.

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@src/queries.js",
  entities: [Task]
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@src/queries.js",
  entities: [Task]
}

LANGUAGE: javascript
CODE:
export const getAllTasks = async (args, context) => {
  return context.entities.Task.findMany({})
}

export const getFilteredTasks = async (args, context) => {
  return context.entities.Task.findMany({
    where: { isDone: args.isDone },
  })
}

----------------------------------------

TITLE: Creating a Wasp Project with Vector Similarity Search Template
DESCRIPTION: This command creates a new Wasp project using the Vector Similarity Search template, which includes features for generating embeddings and performing vector similarity search on text data.

LANGUAGE: bash
CODE:
wasp new <project-name> -t embeddings

----------------------------------------

TITLE: Setting GitHub OAuth Environment Variables
DESCRIPTION: This snippet shows how to set the required environment variables for GitHub OAuth in the .env.server file.

LANGUAGE: bash
CODE:
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

----------------------------------------

TITLE: Checking User Signup Status in React Component
DESCRIPTION: This React component uses the useAuth hook to check if the user has completed signup and redirects if necessary.

LANGUAGE: jsx
CODE:
import { useAuth } from 'wasp/client/auth'
import { Redirect } from 'react-router-dom'

export function HomePage() {
  const { data: user } = useAuth()

  if (user.isSignupComplete === false) {
    return <Redirect to="/edit-user-details" />
  }

  // ...
}

----------------------------------------

TITLE: Login Page Implementation
DESCRIPTION: React component implementation for the login page with Google authentication UI.

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Building Wasp Web Application
DESCRIPTION: Installs dependencies and builds the web application with a specified backend API URL. Requires setting the REACT_APP_API_URL environment variable to point to the deployed Wasp backend server.

LANGUAGE: bash
CODE:
npm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build

----------------------------------------

TITLE: Using getTasks Query in React Component (TypeScript)
DESCRIPTION: This snippet shows how to use the getTasks query in a TypeScript React component. It includes type annotations for the Task entity and demonstrates full-stack type safety.

LANGUAGE: tsx
CODE:
import { Task } from 'wasp/entities'
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

const TaskView = ({ task }: { task: Task }) => {
  return (
    <div>
      <input type="checkbox" id={String(task.id)} checked={task.isDone} />
      {task.description}
    </div>
  )
}

const TasksList = ({ tasks }: { tasks: Task[] }) => {
  if (!tasks?.length) return <div>No tasks</div>

  return (
    <div>
      {tasks.map((task, idx) => (
        <TaskView task={task} key={idx} />
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Defining Models in Prisma Schema for Wasp
DESCRIPTION: Example of defining User and Task models in the schema.prisma file, which can be used as entities in Wasp.

LANGUAGE: prisma
CODE:
model User {
  id      Int        @id @default(autoincrement())
  tasks   Task[]
}

model Task {
  id          Int        @id @default(autoincrement())
  description String
  isDone      Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
}

----------------------------------------

TITLE: Using Entities in APIs
DESCRIPTION: Demonstrates how to use entities in API declarations and access them in the API implementation.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  entities: [Task],
  httpRoute: (GET, "/foo/bar")
}

LANGUAGE: javascript
CODE:
export const fooBar = (req, res, context) => {
  res.json({ count: await context.entities.Task.count() });
};

----------------------------------------

TITLE: Installing a New Package with npm in Wasp
DESCRIPTION: This snippet demonstrates how to add a new package (date-fns) to a Wasp project using npm. The command will add the package to the dependencies section of package.json.

LANGUAGE: bash
CODE:
npm install date-fns

----------------------------------------

TITLE: Defining a Common Layout (JavaScript)
DESCRIPTION: Illustrates how to create a root component in JavaScript that defines a common layout for the application.

LANGUAGE: jsx
CODE:
export default function Root({ children }) {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      {children}
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: Initializing New Wasp Project
DESCRIPTION: Command to create a new Wasp project named TodoApp. This generates the initial project structure and boilerplate code.

LANGUAGE: sh
CODE:
$ wasp new TodoApp

----------------------------------------

TITLE: Declaring a Job in Wasp
DESCRIPTION: This snippet shows how to declare a job named 'mySpecialJob' in a Wasp file. It specifies the executor, perform function, and associated entities.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  entities: [Task],
}

----------------------------------------

TITLE: Uninstalling Wasp
DESCRIPTION: Demonstrates the process of uninstalling Wasp using the 'wasp uninstall' command, showing the confirmation prompt and the directories and files that will be removed.

LANGUAGE: bash
CODE:
$ wasp uninstall

üêù --- Uninstalling Wasp ... ------------------------------------------------------

 We will remove the following directories:
   {home}/.local/share/wasp-lang/
   {home}/.cache/wasp/

 We will also remove the following files:
   {home}/.local/bin/wasp

 Are you sure you want to continue? [y/N]
 y

 ‚úÖ --- Uninstalled Wasp -----------------------------------------------------------

----------------------------------------

TITLE: Updating Main Page to Require Authentication
DESCRIPTION: Modifies the MainPage configuration in Wasp to require authentication for access.

LANGUAGE: wasp
CODE:
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage"
}

----------------------------------------

TITLE: Implementing a React Component with Wasp Query
DESCRIPTION: This snippet shows how to implement a React component that uses a Wasp query to fetch and display recipes, demonstrating full-stack type safety.

LANGUAGE: tsx
CODE:
import { useQuery, getRecipes } from "wasp/client/operations";
import { type User } from "wasp/entities";

export function HomePage({ user }: { user: User }) {
  const { data: recipes, isLoading } = useQuery(getRecipes);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>Recipes</h1>
      <ul>
        {recipes ? recipes.map((recipe) => (
          <li key={recipe.id}>
            <div>{recipe.title}</div>
            <div>{recipe.description}</div>
          </li>
        )) : 'No recipes defined yet!'}
      </ul>
    </div>
  );
}

----------------------------------------

TITLE: Creating a New Task Form in React (JavaScript)
DESCRIPTION: This React component creates a form that allows users to input a new task description and submit it, calling the createTask action.

LANGUAGE: jsx
CODE:
const NewTaskForm = () => {
  const handleSubmit = async (event) => {
    event.preventDefault()
    try {
      const target = event.target
      const description = target.description.value
      target.reset()
      await createTask({ description })
    } catch (err) {
      window.alert('Error: ' + err.message)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="description" type="text" defaultValue="" />
      <input type="submit" value="Create task" />
    </form>
  )
}

----------------------------------------

TITLE: Creating a New Task Form in React (JavaScript)
DESCRIPTION: This React component creates a form that allows users to input a new task description and submit it, calling the createTask action.

LANGUAGE: jsx
CODE:
const NewTaskForm = () => {
  const handleSubmit = async (event) => {
    event.preventDefault()
    try {
      const target = event.target
      const description = target.description.value
      target.reset()
      await createTask({ description })
    } catch (err) {
      window.alert('Error: ' + err.message)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="description" type="text" defaultValue="" />
      <input type="submit" value="Create task" />
    </form>
  )
}

----------------------------------------

TITLE: Starting a Wasp Project
DESCRIPTION: These commands navigate to the project directory and start the Wasp application, serving both frontend and backend at localhost:3000.

LANGUAGE: shell
CODE:
cd <my-project-name>
wasp start

----------------------------------------

TITLE: Starting a Wasp Project
DESCRIPTION: These commands navigate to the project directory and start the Wasp application, serving both frontend and backend at localhost:3000.

LANGUAGE: shell
CODE:
cd <my-project-name>
wasp start

----------------------------------------

TITLE: Starting a Wasp Project
DESCRIPTION: These commands navigate to the project directory and start the Wasp application, serving both frontend and backend at localhost:3000.

LANGUAGE: shell
CODE:
cd <my-project-name>
wasp start

----------------------------------------

TITLE: Implementing createTask Action in JavaScript
DESCRIPTION: Implements the createTask Action on the server, creating a new Task entity with the given description.

LANGUAGE: javascript
CODE:
export const createTask = async (args, context) => {
  return context.entities.Task.create({
    data: { description: args.description },
  })
}

----------------------------------------

TITLE: Implementing HomePage Component in React
DESCRIPTION: Creates a React component for the HomePage that fetches and displays recipes using Wasp's useQuery hook.

LANGUAGE: tsx
CODE:
import { useQuery, getRecipes } from "wasp/client/operations";
import { type User } from "wasp/entities";

export function HomePage({ user }: { user: User }) {
  const { data: recipes, isLoading } = useQuery(getRecipes);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>Recipes</h1>
      <ul>
        {recipes ? recipes.map((recipe) => (
          <li key={recipe.id}>
            <div>{recipe.title}</div>
            <div>{recipe.description}</div>
          </li>
        )) : 'No recipes defined yet!'}
      </ul>
    </div>
  );
}

----------------------------------------

TITLE: Generating Dockerfile Content with Wasp CLI
DESCRIPTION: Command to view the combined Dockerfile that will be used for deployment, including any custom overrides from the project root.

LANGUAGE: shell
CODE:
wasp dockerfile

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Adds authentication configuration to the Wasp app, specifying the User entity and enabling username/password authentication.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "Todo app",

  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Customizing Global Middleware in Wasp and JavaScript
DESCRIPTION: This example shows how to customize global middleware in a Wasp application using JavaScript. It modifies the CORS configuration to allow additional domains.

LANGUAGE: wasp
CODE:
app todoApp {
  // ...

  server: {
    setupFn: import setup from "@src/serverSetup",
    middlewareConfigFn: import { serverMiddlewareFn } from "@src/serverSetup"
  },
}

LANGUAGE: javascript
CODE:
import cors from 'cors'
import { config } from 'wasp/server'

export const serverMiddlewareFn = (middlewareConfig) => {
  // Example of adding extra domains to CORS.
  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))
  return middlewareConfig
}

----------------------------------------

TITLE: Importing and Using Image URL in React Component (JavaScript)
DESCRIPTION: This snippet demonstrates how to import an image file as a URL and use it in a React component. The imported URL can be used as the src attribute of an img element.

LANGUAGE: jsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Starting the Wasp Development Server
DESCRIPTION: Commands to navigate to the newly created TodoApp directory and start the Wasp development server.

LANGUAGE: sh
CODE:
$ cd TodoApp
$ wasp start

----------------------------------------

TITLE: Implementing updateTask Action in JavaScript
DESCRIPTION: This function updates a task's isDone status in the database based on the provided id and isDone values.

LANGUAGE: javascript
CODE:
export const updateTask = async ({ id, isDone }, context) => {
  return context.entities.Task.update({
    where: { id },
    data: {
      isDone: isDone,
    },
  })
}

----------------------------------------

TITLE: Defining User Entity in Wasp
DESCRIPTION: This code defines the User entity in the Wasp file, which is required for username and password authentication. It includes the minimal required field 'id'.

LANGUAGE: wasp
CODE:
entity User {=psl
    id                        Int           @id @default(autoincrement())
    // Add your own fields below
    // ...
psl=}

----------------------------------------

TITLE: Implementing Authentication UI Components
DESCRIPTION: Demonstrates how to create the Login page component using Wasp's LoginForm and a custom Layout component.

LANGUAGE: javascript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Setting Environment Variables via Shell Command
DESCRIPTION: Demonstrates how to set environment variables directly in the shell when running Wasp commands, which can be useful for overriding specific variables.

LANGUAGE: shell
CODE:
SOME_VAR_NAME=SOMEVALUE wasp start

----------------------------------------

TITLE: Cleaning Wasp Project Artifacts
DESCRIPTION: Demonstrates the use of the 'wasp clean' command to remove all generated code and cached artifacts in a Wasp project.

LANGUAGE: bash
CODE:
$ wasp clean

Deleting .wasp/ directory...
Deleted .wasp/ directory.

----------------------------------------

TITLE: Defining User Entity in Wasp
DESCRIPTION: This snippet demonstrates how to define the User entity in the Wasp file, which is required for GitHub authentication.

LANGUAGE: wasp
CODE:
entity User {=psl
    id          Int     @id @default(autoincrement())
    // ...
psl=}

----------------------------------------

TITLE: Prisma Configuration with PostgreSQL Extensions
DESCRIPTION: Example of configuring Prisma with PostgreSQL extensions and preview features in Wasp.

LANGUAGE: wasp
CODE:
app MyApp {
  // ...
  db: {
    system: PostgreSQL,
    prisma: {
      clientPreviewFeatures: ["postgresqlExtensions"],
      dbExtensions: [
        { name: "hstore", schema: "myHstoreSchema" },
        { name: "pg_trgm" },
        { name: "postgis", version: "2.1" }
      ]
    }
  }
}

----------------------------------------

TITLE: Defining User Entity in Wasp
DESCRIPTION: This code defines the User entity in the Wasp file, which is required for username and password authentication. It includes the minimal required field 'id'.

LANGUAGE: wasp
CODE:
entity User {=psl
    id                        Int           @id @default(autoincrement())
    // Add your own fields below
    // ...
psl=}

----------------------------------------

TITLE: Displaying Wasp CLI Usage and Commands
DESCRIPTION: Shows the output of running the 'wasp' command without arguments, listing all available commands and their descriptions. This includes general commands, project-specific commands, and usage examples.

LANGUAGE: bash
CODE:
USAGE
  wasp <command> [command-args]

COMMANDS
  GENERAL
    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.
      OPTIONS:
        -t|--template <template-name>
           Check out the templates list here: https://github.com/wasp-lang/starters

    version               Prints current version of CLI.
    waspls                Run Wasp Language Server. Add --help to get more info.
    completion            Prints help on bash completion.
    uninstall             Removes Wasp from your system.
  IN PROJECT
    start                 Runs Wasp app in development mode, watching for file changes.
    start db              Starts managed development database for you.
    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.
    clean                 Deletes all generated code and other cached artifacts.
                          Wasp equivalent of 'have you tried closing and opening it again?'.
    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.
    deploy                Deploys your Wasp app to cloud hosting providers.
    telemetry             Prints telemetry status.
    deps                  Prints the dependencies that Wasp uses in your project.
    dockerfile            Prints the contents of the Wasp generated Dockerfile.
    info                  Prints basic information about current Wasp project.
    test                  Executes tests in your project.

EXAMPLES
  wasp new MyApp
  wasp start
  wasp db migrate-dev

Docs: https://wasp.sh/docs
Discord (chat): https://discord.gg/rzdnErX
Newsletter: https://wasp.sh/#signup

----------------------------------------

TITLE: Displaying Wasp CLI Usage and Commands
DESCRIPTION: Shows the output of running the 'wasp' command without arguments, listing all available commands and their descriptions. This includes general commands, project-specific commands, and usage examples.

LANGUAGE: bash
CODE:
USAGE
  wasp <command> [command-args]

COMMANDS
  GENERAL
    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.
      OPTIONS:
        -t|--template <template-name>
           Check out the templates list here: https://github.com/wasp-lang/starters

    version               Prints current version of CLI.
    waspls                Run Wasp Language Server. Add --help to get more info.
    completion            Prints help on bash completion.
    uninstall             Removes Wasp from your system.
  IN PROJECT
    start                 Runs Wasp app in development mode, watching for file changes.
    start db              Starts managed development database for you.
    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.
    clean                 Deletes all generated code and other cached artifacts.
                          Wasp equivalent of 'have you tried closing and opening it again?'.
    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.
    deploy                Deploys your Wasp app to cloud hosting providers.
    telemetry             Prints telemetry status.
    deps                  Prints the dependencies that Wasp uses in your project.
    dockerfile            Prints the contents of the Wasp generated Dockerfile.
    info                  Prints basic information about current Wasp project.
    test                  Executes tests in your project.

EXAMPLES
  wasp new MyApp
  wasp start
  wasp db migrate-dev

Docs: https://wasp.sh/docs
Discord (chat): https://discord.gg/rzdnErX
Newsletter: https://wasp.sh/#signup

----------------------------------------

TITLE: Deploying New Wasp App to Fly.io
DESCRIPTION: Command to deploy a new Wasp application to Fly.io, specifying the app name and region.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Defining Client Environment Variables in Wasp
DESCRIPTION: Demonstrates the required prefix for client-side environment variables in Wasp projects. This naming convention is crucial for security, as Wasp only injects variables with this prefix into the client code to prevent accidental exposure of sensitive information.

LANGUAGE: plaintext
CODE:
REACT_APP_SOME_VAR_NAME=...

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Example of how to declare queries in the main.wasp file for both JavaScript and TypeScript projects.

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@server/queries.js"
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@server/queries.js"
}

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Example of how to declare queries in the main.wasp file for both JavaScript and TypeScript projects.

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@server/queries.js"
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@server/queries.js"
}

----------------------------------------

TITLE: Configuring GitHub Auth in Wasp File
DESCRIPTION: This snippet shows how to enable GitHub authentication in the Wasp file by specifying the User entity, SocialLogin entity, and enabling the GitHub auth method.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Configuring GitHub Auth in Wasp File
DESCRIPTION: This snippet shows how to enable GitHub authentication in the Wasp file by specifying the User entity, SocialLogin entity, and enabling the GitHub auth method.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Implementing Database Seed Function in JavaScript
DESCRIPTION: Example of a database seed function implementation in JavaScript, including user creation and task creation.

LANGUAGE: javascript
CODE:
import { createTask } from './actions.js'
import { sanitizeAndSerializeProviderData } from 'wasp/server/auth'

export const devSeedSimple = async (prisma) => {
  const user = await createUser(prisma, {
    username: 'RiuTheDog',
    password: 'bark1234',
  })

  await createTask(
    { description: 'Chase the cat' },
    { user, entities: { Task: prisma.task } }
  )
}

async function createUser(prisma, data) {
  const newUser = await prisma.user.create({
    data: {
      auth: {
        create: {
          identities: {
            create: {
              providerName: 'username',
              providerUserId: data.username,
              providerData: sanitizeAndSerializeProviderData({
                hashedPassword: data.password
              }),
            },
          },
        },
      },
    },
  })

  return newUser
}

----------------------------------------

TITLE: Provider Setup in Root Component
DESCRIPTION: Example of setting up a Redux provider in the root component with React Router integration.

LANGUAGE: jsx
CODE:
import { Outlet } from 'react-router-dom'
import store from './store'
import { Provider } from 'react-redux'

export default function Root() {
  return (
    <Provider store={store}>
      <Outlet />
    </Provider>
  )
}

----------------------------------------

TITLE: Implementing Idea Embedding Server Action
DESCRIPTION: Server-side action for saving and embedding ideas into the vector store using Pinecone and OpenAI.

LANGUAGE: typescript
CODE:
import type { EmbedIdea } from '@wasp/actions/types';
import type { GeneratedIdea } from '@wasp/entities';
import HttpError from '@wasp/core/HttpError.js';
import { PineconeStore } from 'langchain/vectorstores/pinecone';
import { Document } from 'langchain/document';
import { OpenAIEmbeddings } from 'langchain/embeddings/openai';
import { PineconeClient } from '@pinecone-database/pinecone';

const pinecone = new PineconeClient();
export const initPinecone = async () => {
  await pinecone.init({
    environment: process.env.PINECONE_ENV!,
    apiKey: process.env.PINECONE_API_KEY!,
  });
  return pinecone;
};

export const embeddings = new OpenAIEmbeddings({
  openAIApiKey: process.env.OPENAI_API_KEY,
});

export const embedIdea: EmbedIdea<{ idea: string }, GeneratedIdea> = async ({ idea }, context) => {
  if (!context.user) {
    throw new HttpError(401, 'User is not authorized');
  }

  console.log('idea: ', idea);

  try {
    let newIdea = await context.entities.GeneratedIdea.create({
        data: {
          content: idea,
          userId: context.user.id,
        },
      });
    

    if (!newIdea) {
      throw new HttpError(404, 'Idea not found');
    }

    const pinecone = await initPinecone();
		
    const availableIndexes = await pinecone.listIndexes();
    if (!availableIndexes.includes('embeds-test')) {
      console.log('creating index');
      await pinecone.createIndex({
        createRequest: {
          name: 'embeds-test',
          dimension: 1536, 
        },
      });
    }

    const pineconeIndex = pinecone.Index('embeds-test');
		
    const vectorStore = new PineconeStore(embeddings, {
      pineconeIndex: pineconeIndex,
      namespace: context.user.username,
    });
		
    const ideaDoc = new Document({
      metadata: { type: 'note' },
      pageContent: newIdea.content,
    });
		
    await vectorStore.addDocuments([ideaDoc], [newIdea.id.toString()]);

    newIdea = await context.entities.GeneratedIdea.update({
      where: {
        id: newIdea.id,
      },
      data: {
        isEmbedded: true,
      },
    });
    console.log('idea embedded successfully!', newIdea);
    return newIdea;
  } catch (error: any) {
    throw new Error(error);
  }
};

----------------------------------------

TITLE: Creating a New Wasp Project Interactively
DESCRIPTION: Demonstrates the interactive process of creating a new Wasp project using the 'wasp new' command. It shows the prompts for project name and template selection, followed by the project creation confirmation.

LANGUAGE: bash
CODE:
$ wasp new
 Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
 Choose a starter template
 [1] basic (default)
 [2] saas
 [3] todo-ts
 ‚ñ∏ 1

 üêù --- Creating your project from the basic template... ---------------------------

 Created new Wasp app in ./MyFirstProject directory!
 To run it, do:

     cd MyFirstProject
     wasp start

----------------------------------------

TITLE: Implementing createTask Action in TypeScript
DESCRIPTION: This TypeScript version of the createTask function includes type annotations for better type safety and autocompletion.

LANGUAGE: typescript
CODE:
import { Task } from '@wasp/entities'
import { CreateTask } from '@wasp/actions/types'

type CreateTaskPayload = Pick<Task, 'description'>

export const createTask: CreateTask<CreateTaskPayload, Task> = async (
  args,
  context
) => {
  return context.entities.Task.create({
    data: { description: args.description },
  })
}

----------------------------------------

TITLE: Accessing Server Configuration in Wasp
DESCRIPTION: This snippet demonstrates how to import and use the server configuration object in Wasp. The configuration object contains fields such as 'frontendUrl', which can be set using environment variables.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/server'

console.log(config.frontendUrl)

----------------------------------------

TITLE: Heroku Deployment Configuration
DESCRIPTION: Procfile configuration for deploying the Discord bot on Heroku platform.

LANGUAGE: yaml
CODE:
worker: node bot.js

----------------------------------------

TITLE: Implementing createTask Action in JavaScript
DESCRIPTION: This code defines the createTask function on the server side, which creates a new task in the database using the provided description.

LANGUAGE: javascript
CODE:
export const createTask = async (args, context) => {
  return context.entities.Task.create({
    data: { description: args.description },
  })
}

----------------------------------------

TITLE: Implementing Password Migration Page Component
DESCRIPTION: React component implementation for the password migration page, including form handling and error display.

LANGUAGE: typescript
CODE:
import {
  FormItemGroup,
  FormLabel,
  FormInput,
  FormError,
} from "wasp/client/auth";
import { useForm } from "react-hook-form";
import { migratePassword } from "wasp/client/operations";
import { useState } from "react";

export function MigratePasswordPage() {
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const form = useForm<{
    username: string;
    password: string;
  }>();

  const onSubmit = form.handleSubmit(async (data) => {
    try {
      const result = await migratePassword(data);
      setSuccessMessage(result.message);
    } catch (e: unknown) {
      console.error(e);
      if (e instanceof Error) {
        setErrorMessage(e.message);
      }
    }
  });

  return (
    <div style={{
      maxWidth: "400px",
      margin: "auto",
    }}>
      <h1>Migrate your password</h1>
      <p>
        If you have an account on the old version of the website, you can
        migrate your password to the new version.
      </p>
      {successMessage && <div>{successMessage}</div>}
      {errorMessage && <FormError>{errorMessage}</FormError>}
      <form onSubmit={onSubmit}>
        <FormItemGroup>
          <FormLabel>Username</FormLabel>
          <FormInput
            {...form.register("username", {
              required: "Username is required",
            })}
          />
          <FormError>{form.formState.errors.username?.message}</FormError>
        </FormItemGroup>
        <FormItemGroup>
          <FormLabel>Password</FormLabel>
          <FormInput
            {...form.register("password", {
              required: "Password is required",
            })}
            type="password"
          />
          <FormError>{form.formState.errors.password?.message}</FormError>
        </FormItemGroup>
        <button type="submit">Migrate password</button>
      </form>
    </div>
  );
}

----------------------------------------

TITLE: Configuring Server in Wasp App Declaration
DESCRIPTION: Basic server configuration in the main Wasp file, showing how to specify setup and middleware configuration functions.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  server: {
    setupFn: import { mySetupFunction } from "@src/myServerSetupCode.js",
    middlewareConfigFn: import { myMiddlewareConfigFn } from "@src/myServerSetupCode.js"
  }
}

----------------------------------------

TITLE: Creating NewTaskForm React Component in JavaScript
DESCRIPTION: Defines a React component for creating new tasks, which calls the createTask Action when submitted.

LANGUAGE: jsx
CODE:
const NewTaskForm = () => {
  const handleSubmit = async (event) => {
    event.preventDefault()
    try {
      const target = event.target
      const description = target.description.value
      target.reset()
      await createTask({ description })
    } catch (err) {
      window.alert('Error: ' + err.message)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="description" type="text" defaultValue="" />
      <input type="submit" value="Create task" />
    </form>
  )
}

----------------------------------------

TITLE: Discord Authentication Provider Configuration
DESCRIPTION: Addition of Discord as a new social authentication provider alongside Google and GitHub, requiring minimal configuration.



----------------------------------------

TITLE: Implementing Custom GitHub Auth Functions
DESCRIPTION: This snippet shows how to implement custom configuration and user field functions for GitHub authentication.

LANGUAGE: javascript
CODE:
import { generateAvailableDictionaryUsername } from "@wasp/core/auth.js";

export const getUserFields = async (_context, args) => {
  const username = await generateAvailableDictionaryUsername();
  const displayName = args.profile.displayName;
  return { username, displayName };
};

export function getConfig() {
  return {
    clientID, // look up from env or elsewhere
    clientSecret, // look up from env or elsewhere
    scope: [],
  };
}

----------------------------------------

TITLE: Configuring Server in Wasp App Declaration
DESCRIPTION: Basic server configuration in the main Wasp file, showing how to specify setup and middleware configuration functions.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  server: {
    setupFn: import { mySetupFunction } from "@src/myServerSetupCode.js",
    middlewareConfigFn: import { myMiddlewareConfigFn } from "@src/myServerSetupCode.js"
  }
}

----------------------------------------

TITLE: Implementing userSignupFields for Google Auth in TypeScript
DESCRIPTION: This TypeScript code defines the userSignupFields function for Google authentication using the defineUserSignupFields helper.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  isSignupComplete: () => false,
})

----------------------------------------

TITLE: Auth UI Components Implementation
DESCRIPTION: React components implementing the authentication user interface, including login, signup, email verification, and password reset pages.

LANGUAGE: typescript
CODE:
import {
  LoginForm,
  SignupForm,
  VerifyEmailForm,
  ForgotPasswordForm,
  ResetPasswordForm,
} from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
    </Layout>
  );
}

----------------------------------------

TITLE: Customizing API-specific Middleware in Wasp and JavaScript
DESCRIPTION: This example shows how to customize middleware for a specific API route in a Wasp application using JavaScript. It replaces the express.json middleware with express.raw for a webhook callback.

LANGUAGE: wasp
CODE:
api webhookCallback {
  fn: import { webhookCallback } from "@src/apis",
  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from "@src/apis",
  httpRoute: (POST, "/webhook/callback"),
  auth: false
}

LANGUAGE: javascript
CODE:
import express from 'express'

export const webhookCallback = (req, res, _context) => {
  res.json({ msg: req.body.length })
}

export const webhookCallbackMiddlewareFn = (middlewareConfig) => {
  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')

  middlewareConfig.delete('express.json')
  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))

  return middlewareConfig
}

----------------------------------------

TITLE: Implementing HelloPage with URL Parameters
DESCRIPTION: Shows how to access URL parameters in a React component, with TypeScript type definitions for route props.

LANGUAGE: typescript
CODE:
import { RouteComponentProps } from 'react-router-dom'

export const HelloPage = (
  props: RouteComponentProps<{ name: string }>
) => {
  return <div>Here's {props.match.params.name}!</div>
}

----------------------------------------

TITLE: Adding Routes and Pages for Authentication
DESCRIPTION: This snippet shows how to define the routes and pages for login and signup in the main.wasp file.

LANGUAGE: wasp
CODE:
// ...
// 4. Define the routes
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@client/pages/auth.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@client/pages/auth.jsx"
}

----------------------------------------

TITLE: Implementing onBeforeOAuthRedirect Hook
DESCRIPTION: Example of implementing the onBeforeOAuthRedirect hook to perform actions before OAuth redirect.

LANGUAGE: javascript
CODE:
export const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {
  console.log('query params before oAuth redirect', req.query)

  const id = oauth.uniqueRequestId
  someKindOfStore.set(id, req.query)

  return { url }
}

----------------------------------------

TITLE: Parameterized Route Configuration
DESCRIPTION: Example of creating a route with URL parameters in Wasp, similar to React Router syntax.

LANGUAGE: wasp
CODE:
route HelloRoute { path: "/hello/:name", to: HelloPage }
page HelloPage {
  component: import Hello from "@client/HelloPage.jsx"
}

----------------------------------------

TITLE: Parameterized Route Configuration
DESCRIPTION: Example of creating a route with URL parameters in Wasp, similar to React Router syntax.

LANGUAGE: wasp
CODE:
route HelloRoute { path: "/hello/:name", to: HelloPage }
page HelloPage {
  component: import Hello from "@client/HelloPage.jsx"
}

----------------------------------------

TITLE: Configuring Vite Dev Server Auto-open Behavior
DESCRIPTION: Example of how to disable automatic browser opening when starting the Vite dev server in Wasp.

LANGUAGE: javascript
CODE:
export default {
  server: {
    open: false,
  },
}

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  server: {
    open: false,
  },
})

----------------------------------------

TITLE: Disabling Wasp Telemetry
DESCRIPTION: Bash command showing how to opt out of Wasp telemetry by setting an environment variable.

LANGUAGE: bash
CODE:
export WASP_TELEMETRY_DISABLE=1

----------------------------------------

TITLE: Creating a Basic React Component for a Wasp Page
DESCRIPTION: Shows the structure of a simple React component that can be used as a page in a Wasp application.

LANGUAGE: jsx
CODE:
import waspLogo from './waspLogo.png'
import './Main.css'

export const MainPage = () => {
  // ...
}

LANGUAGE: tsx
CODE:
import waspLogo from './waspLogo.png'
import './Main.css'

export const MainPage = () => {
  // ...
}

----------------------------------------

TITLE: Implementing Queries in TypeScript
DESCRIPTION: TypeScript implementation with proper type definitions for the queries

LANGUAGE: typescript
CODE:
import { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'

type Task = {
  id: number
  description: string
  isDone: boolean
}

const tasks: Task[] = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const getAllTasks: GetAllTasks<void, Task[]> = () => {
  return tasks
}

export const getFilteredTasks: GetFilteredTasks<Pick<Task, 'isDone'>, Task[]> = (args) => {
  const { isDone } = args
  return tasks.filter((task) => task.isDone === isDone)
}

----------------------------------------

TITLE: Using Tailwind Classes in React Components
DESCRIPTION: Shows an example of using Tailwind CSS classes in a React component within a Wasp project.

LANGUAGE: jsx
CODE:
// ...

<h1 className="text-3xl font-bold underline">
  Hello world!
</h1>

// ...

----------------------------------------

TITLE: Using routes Object with Optional Static Segment
DESCRIPTION: Demonstrates how to use the routes object with a route containing an optional static segment in React.

LANGUAGE: tsx
CODE:
const linkToOptional = routes.OptionalRoute.build({
  path: '/task/:id/details', // or '/task/:id'
  params: { id: 1 },
})

----------------------------------------

TITLE: Configuring Server in Wasp App Declaration
DESCRIPTION: Demonstrates how to configure server behavior using the 'server' field in the Wasp app declaration, including setup and middleware configuration functions.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  server: {
    setupFn: import { mySetupFunction } from "@server/myServerSetupCode.js",
    middlewareConfigFn: import { myMiddlewareConfigFn } from "@server/myServerSetupCode.js"
  }
}

----------------------------------------

TITLE: Creating Main Page React Component
DESCRIPTION: This snippet demonstrates the basic structure of the MainPage React component in both JavaScript and TypeScript. It imports necessary assets and exports the component.

LANGUAGE: jsx
CODE:
import waspLogo from './waspLogo.png'
import './Main.css'

export const MainPage = () => {
  // ...
}

LANGUAGE: tsx
CODE:
import waspLogo from './waspLogo.png'
import './Main.css'

export const MainPage = () => {
  // ...
}

----------------------------------------

TITLE: Adding Custom Route in Server Setup
DESCRIPTION: Example of adding a custom route using the server setup function in both JavaScript and TypeScript

LANGUAGE: javascript
CODE:
export const mySetupFunction = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

LANGUAGE: typescript
CODE:
import { ServerSetupFn } from 'wasp/server'
import { Application } from 'express'

export const mySetupFunction: ServerSetupFn = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app: Application) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

----------------------------------------

TITLE: Using Entities in APIs (Wasp Declaration)
DESCRIPTION: Shows how to declare the use of Entities in a custom API endpoint within the Wasp file.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@server/apis.js",
  entities: [Task],
  httpRoute: (GET, "/foo/bar")
}

----------------------------------------

TITLE: Customizing the Signup Form
DESCRIPTION: Shows how to customize the SignupForm component by adding additional fields using both object and render function approaches.

LANGUAGE: jsx
CODE:
import {
  SignupForm,
  FormError,
  FormInput,
  FormItemGroup,
  FormLabel,
} from 'wasp/client/auth'

export const SignupPage = () => {
  return (
    <SignupForm
      additionalFields={[
        {
          name: 'address',
          label: 'Address',
          type: 'input',
          validations: {
            required: 'Address is required',
          },
        },
        (form, state) => {
          return (
            <FormItemGroup>
              <FormLabel>Phone Number</FormLabel>
              <FormInput
                {...form.register('phoneNumber', {
                  required: 'Phone number is required',
                })}
                disabled={state.isLoading}
              />
              {form.formState.errors.phoneNumber && (
                <FormError>
                  {form.formState.errors.phoneNumber.message}
                </FormError>
              )}
            </FormItemGroup>
          )
        },
      ]}
    />
  )
}

----------------------------------------

TITLE: Accessing Client Environment Variables in TypeScript
DESCRIPTION: Shows how to access client environment variables in a Wasp TypeScript project using the 'env' object imported from 'wasp/client'.

LANGUAGE: typescript
CODE:
import { env } from 'wasp/client'

console.log(env.REACT_APP_SOME_VAR_NAME)

----------------------------------------

TITLE: Cloning the Wasp Repository
DESCRIPTION: Command to clone the Wasp repository containing the WebSockets example app.

LANGUAGE: bash
CODE:
git clone https://github.com/wasp-lang/wasp.git

----------------------------------------

TITLE: Installing SaaS Template
DESCRIPTION: Command to create a new Wasp project using the SaaS template that includes Stripe Payments, OpenAI GPT API, Google Auth, SendGrid, Tailwind, and Cron Jobs.

LANGUAGE: bash
CODE:
wasp new <project-name> -t saas

----------------------------------------

TITLE: Sending Installation Telemetry Data in JSON
DESCRIPTION: JSON structure sent during Wasp installation via install.sh script, containing a randomly generated ID and OS information.

LANGUAGE: json
CODE:
{
  "distinct_id": "274701613078193779564259",
  "os": "linux"
}

----------------------------------------

TITLE: Simplified MainPage Component for Todo App
DESCRIPTION: This snippet shows a cleaned-up version of the MainPage component, ready for building the Todo app.

LANGUAGE: jsx
CODE:
export const MainPage = () => {
  return <div>Hello world!</div>
}

LANGUAGE: tsx
CODE:
export const MainPage = () => {
  return <div>Hello world!</div>
}

----------------------------------------

TITLE: Implementing API in NodeJS (JavaScript)
DESCRIPTION: Shows the JavaScript implementation of a custom API endpoint, including handling the request, response, and context objects.

LANGUAGE: javascript
CODE:
export const fooBar = (req, res, context) => {
  res.set("Access-Control-Allow-Origin", "*");
  res.json({ msg: `Hello, ${context.user?.username || "stranger"}!` });
};

----------------------------------------

TITLE: TypeScript Project Structure
DESCRIPTION: Directory structure for a Wasp project using TypeScript, highlighting the renamed MainPage.tsx file.

LANGUAGE: css
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp          # Your Wasp code goes here.
‚îú‚îÄ‚îÄ schema.prisma      # Your Prisma schema goes here.
‚îú‚îÄ‚îÄ package.json       # Your dependencies and project info go here.
‚îú‚îÄ‚îÄ public             # Your static files (e.g., images, favicon) go here.
‚îú‚îÄ‚îÄ src                # Your source code (TS/JS/CSS/HTML) goes here.
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.tsx   # Renamed from MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Customizing Auth UI Appearance
DESCRIPTION: Example of customizing the authentication UI appearance using custom colors and branding.

LANGUAGE: typescript
CODE:
import type { CustomizationOptions } from 'wasp/client/auth'

export const appearance: CustomizationOptions['appearance'] = {
  colors: {
    brand: '#5969b8',
    brandAccent: '#de5998',
    submitButtonText: 'white',
  },
}

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'
import { authAppearance } from './appearance'
import todoLogo from './todoLogo.png'

export function LoginPage() {
  return <LoginForm appearance={appearance} logo={todoLogo} />
}

----------------------------------------

TITLE: Customizing Auth UI Appearance
DESCRIPTION: Example of customizing the authentication UI appearance using custom colors and branding.

LANGUAGE: typescript
CODE:
import type { CustomizationOptions } from 'wasp/client/auth'

export const appearance: CustomizationOptions['appearance'] = {
  colors: {
    brand: '#5969b8',
    brandAccent: '#de5998',
    submitButtonText: 'white',
  },
}

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'
import { authAppearance } from './appearance'
import todoLogo from './todoLogo.png'

export function LoginPage() {
  return <LoginForm appearance={appearance} logo={todoLogo} />
}

----------------------------------------

TITLE: Adding Parameterized Route in Wasp
DESCRIPTION: Demonstrates how to create a route with URL parameters using React Router syntax.

LANGUAGE: wasp
CODE:
route HelloRoute { path: "/hello/:name", to: HelloPage }
page HelloPage {
  component: import { HelloPage } from "@src/HelloPage"
}

----------------------------------------

TITLE: Implementing WebSocket Server Handler
DESCRIPTION: Server-side WebSocket implementation using Socket.IO, handling connection events and chat messages with TypeScript type definitions for events and payloads.

LANGUAGE: typescript
CODE:
import { v4 as uuidv4 } from 'uuid'
import { getFirstProviderUserId } from 'wasp/auth'
import { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'

export const webSocketFn: WebSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
    })
  })
}

type WebSocketFn = WebSocketDefinition<
  ClientToServerEvents,
  ServerToClientEvents,
  InterServerEvents,
  SocketData
>

interface ServerToClientEvents {
  chatMessage: (msg: { id: string, username: string, text: string }) => void;
}

interface ClientToServerEvents {
  chatMessage: (msg: string) => void;
}

interface InterServerEvents {}

interface SocketData extends WaspSocketData {}

----------------------------------------

TITLE: Discord Environment Variables
DESCRIPTION: Required environment variables for Discord authentication setup.

LANGUAGE: bash
CODE:
DISCORD_CLIENT_ID=your-discord-client-id
DISCORD_CLIENT_SECRET=your-discord-client-secret

----------------------------------------

TITLE: Using API from Client in React
DESCRIPTION: Example of using a custom API endpoint from a React component using the Wasp API client.

LANGUAGE: javascript
CODE:
import React, { useEffect } from "react";
import { api } from "wasp/client/api";

async function fetchCustomRoute() {
  const res = await api.get("/foo/bar");
  console.log(res.data);
}

export const Foo = () => {
  useEffect(() => {
    fetchCustomRoute();
  }, []);

  return <>// ...</>;
};

----------------------------------------

TITLE: Setting Custom Dev Server Port in Vite Config (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to set a custom dev server port in the Vite configuration. It modifies the 'port' option in the server configuration and includes the necessary environment variable update.

LANGUAGE: javascript
CODE:
export default {
  server: {
    port: 4000,
  },
}

LANGUAGE: plaintext
CODE:
WASP_WEB_CLIENT_URL=http://localhost:4000

----------------------------------------

TITLE: Installation Telemetry Data Structure
DESCRIPTION: JSON structure showing the telemetry data sent during Wasp installation via install.sh script. Contains a randomly generated ID and OS information.

LANGUAGE: json
CODE:
{
  "distinct_id": "274701613078193779564259",
  "os": "linux"
}

----------------------------------------

TITLE: Setting Keycloak Environment Variables
DESCRIPTION: This snippet shows the required environment variables that need to be set in the .env.server file for Keycloak authentication to work properly.

LANGUAGE: bash
CODE:
KEYCLOAK_CLIENT_ID=your-keycloak-client-id
KEYCLOAK_CLIENT_SECRET=your-keycloak-client-secret
KEYCLOAK_REALM_URL=https://your-keycloak-url.com/realms/master

----------------------------------------

TITLE: Displaying Project Structure with Tailwind Config Files in Bash
DESCRIPTION: This bash snippet shows the directory structure of a Wasp project with Tailwind configuration files added.

LANGUAGE: bash
CODE:
.
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ client
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainPage.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îÇ   ‚îú‚îÄ‚îÄ server
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îî‚îÄ‚îÄ shared
‚îÇ       ‚îî‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ postcss.config.cjs
‚îî‚îÄ‚îÄ tailwind.config.cjs

----------------------------------------

TITLE: Customizing Vite Base Path
DESCRIPTION: Example of modifying the base path for serving the client application using Vite configuration.

LANGUAGE: javascript
CODE:
export default {
  base: '/my-app/',
}

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  base: '/my-app/',
})

----------------------------------------

TITLE: Defining Wasp App Structure in TypeScript
DESCRIPTION: Demonstrates the structure of a main.wasp file for a Wasp application using TypeScript, including app, route, and page declarations.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.12.0" // Pins the version of Wasp to use.
  },
  title: "TodoApp" // Used as the browser tab title. Note that all strings in Wasp are double quoted!
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  // We specify that the React implementation of the page is exported from
  // `src/MainPage.tsx`. This statement uses standard JS import syntax.
  // Use `@src` to reference files inside the `src` folder.
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Using Link Component with Optional Static Segment
DESCRIPTION: Shows how to use the Link component with a route containing an optional static segment in React.

LANGUAGE: jsx
CODE:
/* You can include ... */
<Link to="/task/:id/details" params={{ id: 1 }}>
  Task 1
</Link>

/* ... or exclude the optional segment */
<Link to="/task/:id" params={{ id: 1 }}>
  Task 1
</Link>

----------------------------------------

TITLE: Starting Wasp Server in Development Mode with npm
DESCRIPTION: This command starts the Wasp server in development mode. The server will automatically reload when changes are detected, making it ideal for development and testing purposes.

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Displaying Project Structure with Tailwind Config Files in Bash
DESCRIPTION: This bash snippet shows the directory structure of a Wasp project with Tailwind configuration files added.

LANGUAGE: bash
CODE:
.
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ client
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainPage.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îÇ   ‚îú‚îÄ‚îÄ server
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îî‚îÄ‚îÄ shared
‚îÇ       ‚îî‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ postcss.config.cjs
‚îî‚îÄ‚îÄ tailwind.config.cjs

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: This snippet demonstrates how to define the User entity in the Prisma schema file, which is required for email authentication.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
  // Add your own fields below
  // ...
}

----------------------------------------

TITLE: Starting Wasp Development Server
DESCRIPTION: Command to start the Wasp development server which provides hot-reloading and automatic code regeneration when files change.

LANGUAGE: shell
CODE:
wasp start

----------------------------------------

TITLE: Uninstalling Wasp
DESCRIPTION: Demonstrates the process of uninstalling Wasp using the 'wasp uninstall' command. It shows the directories and files that will be removed and prompts for confirmation before proceeding with the uninstallation.

LANGUAGE: bash
CODE:
$ wasp uninstall

üêù --- Uninstalling Wasp ... ------------------------------------------------------

 We will remove the following directories:
   {home}/.local/share/wasp-lang/
   {home}/.cache/wasp/

 We will also remove the following files:
   {home}/.local/bin/wasp

 Are you sure you want to continue? [y/N]
 y

 ‚úÖ --- Uninstalled Wasp -----------------------------------------------------------

----------------------------------------

TITLE: Creating a React Component with URL Parameters
DESCRIPTION: This snippet demonstrates how to create a React component that receives and uses URL parameters passed from a Wasp route.

LANGUAGE: jsx
CODE:
export const HelloPage = (props) =>  {
  return <div>Here's {props.match.params.name}!</div>
}

LANGUAGE: tsx
CODE:
import { RouteComponentProps } from 'react-router-dom'

export const HelloPage = (
  props: RouteComponentProps<{ name: string }>
) => {
  return <div>Here's {props.match.params.name}!</div>
}

----------------------------------------

TITLE: Importing Image as URL in React Component (TypeScript)
DESCRIPTION: This snippet shows how to import an image as a URL in a React component using TypeScript. The imported URL is used as the src attribute of an img element, similar to the JavaScript version.

LANGUAGE: tsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Frontend Query Implementation in JavaScript React
DESCRIPTION: React component implementation showing how to use the getTasks query on the frontend with proper loading and error handling.

LANGUAGE: jsx
CODE:
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

----------------------------------------

TITLE: Adding Custom Head Elements in Wasp App
DESCRIPTION: This example shows how to add additional style sheets, scripts, and meta tags to the head of a Wasp app using the 'head' field in the 'app' declaration.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "My App",
  head: [  // optional
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />",
    "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>",
    "<meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />"
  ]
}

----------------------------------------

TITLE: Defining Basic Route and Page in Wasp
DESCRIPTION: Shows how to declare a basic route and page in a Wasp application, mapping the root path '/' to a MainPage component.

LANGUAGE: wasp
CODE:
route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Configuring GitHub Auth in Wasp File
DESCRIPTION: Basic configuration for enabling GitHub authentication in the main Wasp file, including user entity specification and auth method setup.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Configuring GitHub Auth in Wasp File
DESCRIPTION: Basic configuration for enabling GitHub authentication in the main Wasp file, including user entity specification and auth method setup.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Implementing Queries in TypeScript
DESCRIPTION: TypeScript implementation with type safety and interfaces for tasks queries.

LANGUAGE: typescript
CODE:
import { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'

type Task = {
  id: number
  description: string
  isDone: boolean
}

const tasks: Task[] = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const getAllTasks: GetAllTasks<void, Task[]> = () => {
  return tasks
}

export const getFilteredTasks: GetFilteredTasks<Pick<Task, 'isDone'>, Task[]> = (args) => {
  const { isDone } = args
  return tasks.filter((task) => task.isDone === isDone)
}

----------------------------------------

TITLE: Customizing Base Path in Vite Configuration (TypeScript)
DESCRIPTION: This TypeScript example shows how to customize the base path ('/my-app/') for serving the client in the Vite configuration.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  base: '/my-app/',
})

----------------------------------------

TITLE: Configuring Wasp Application with Authentication and Routing
DESCRIPTION: This snippet outlines the basic structure of a main.wasp file. It includes placeholders for configuring social authentication, defining routes, and setting up pages in a Wasp application.

LANGUAGE: wasp
CODE:
// Configuring the social authentication
app myApp {
  auth: { ... }
}

// Defining routes and pages
route LoginRoute { ... }
page LoginPage { ... }

----------------------------------------

TITLE: Configuring Tailwind CSS in Wasp Project
DESCRIPTION: This snippet demonstrates the content of the tailwind.config.cjs file. It includes the necessary configuration for Tailwind CSS to work with Wasp, including content paths and theme settings.

LANGUAGE: js
CODE:
const { resolveProjectPath } = require('wasp/dev')

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],
  theme: {
    extend: {},
  },
  plugins: [],
}

----------------------------------------

TITLE: Configuring Tailwind CSS in Wasp Project
DESCRIPTION: This snippet demonstrates the content of the tailwind.config.cjs file. It includes the necessary configuration for Tailwind CSS to work with Wasp, including content paths and theme settings.

LANGUAGE: js
CODE:
const { resolveProjectPath } = require('wasp/dev')

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],
  theme: {
    extend: {},
  },
  plugins: [],
}

----------------------------------------

TITLE: Custom Signup Implementation
DESCRIPTION: Example of a custom signup action implementation with validation and user creation

LANGUAGE: typescript
CODE:
import {
  ensurePasswordIsPresent,
  ensureValidPassword,
  ensureValidUsername,
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'
import type { CustomSignup } from 'wasp/server/operations'

type CustomSignupInput = {
  username: string
  password: string
}
type CustomSignupOutput = {
  success: boolean
  message: string
}

export const signup: CustomSignup<
  CustomSignupInput,
  CustomSignupOutput
> = async (args, _context) => {
  ensureValidUsername(args)
  ensurePasswordIsPresent(args)
  ensureValidPassword(args)

  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData<'username'>({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      {},
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: Declaring NPM Dependencies in Wasp App Configuration
DESCRIPTION: Shows how to declare NPM dependencies in a Wasp app configuration using the dependencies field. The example demonstrates adding Redux and React-Redux packages with specific version constraints.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  dependencies: [
    ("redux", "^4.0.5"),
    ("react-redux", "^7.1.3")
  ]
}

----------------------------------------

TITLE: Implementing Login Page Component
DESCRIPTION: React component for the login page using Wasp's LoginForm component with navigation links.

LANGUAGE: tsx
CODE:
import { Link } from 'react-router-dom'
import { LoginForm } from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <div style={{ maxWidth: '400px', margin: '0 auto' }}>
      <LoginForm />
      <br />
      <span>
        I don't have an account yet (<Link to="/signup">go to signup</Link>).
      </span>
    </div>
  )
}

----------------------------------------

TITLE: Setting Up Mock Server for Wasp Tests
DESCRIPTION: Shows how to set up a mock server using Wasp's mockServer function, which returns utilities for mocking queries and APIs in tests.

LANGUAGE: javascript
CODE:
import { mockServer } from "wasp/client/test";

const { mockQuery, mockApi } = mockServer();

----------------------------------------

TITLE: Documentation Structure in Markdown
DESCRIPTION: Markdown formatted documentation structure showing main sections and their organization criteria for the Wasp project documentation.

LANGUAGE: markdown
CODE:
# Writing Documentation

To keep Wasp's documentation organized and consistent, follow the guidelines set
out in this document when updating or writing new documentation.

## Organization

When adding a new page to the docs, read the guidelines below to determine the
best place for the page to go.

If a new section is created, add it to the list below and include some information
on how to decide if a page belongs in that section or not.

----------------------------------------

TITLE: Running Development Server with npm
DESCRIPTION: Starts the development server on localhost:3000 with hot-reload functionality and lint error reporting in the console.

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Markdown Documentation for Wasp Editor Setup
DESCRIPTION: Markdown content explaining Wasp editor setup requirements and VSCode extension features, including syntax highlighting, scaffolding, code completion, and diagnostics.

LANGUAGE: markdown
CODE:
---
title: Editor Setup
slug: /editor-setup
---

:::note
This page assumes you have already installed Wasp. If you do not have Wasp installed yet, check out the [Quick Start](./quick-start.md) guide.
:::

----------------------------------------

TITLE: Using Prisma Client in TypeScript
DESCRIPTION: Shows how to directly interact with entities using Prisma Client in TypeScript server code. Creates a new task with description and completion status.

LANGUAGE: typescript
CODE:
import prismaClient from '@wasp/dbClient'`

prismaClient.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

----------------------------------------

TITLE: Defining Client Configuration in Wasp
DESCRIPTION: Shows how to configure the client in the Wasp file, including setting up the root component and setup function.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    rootComponent: import Root from "@src/Root.jsx",
    setupFn: import mySetupFunction from "@src/myClientSetupCode.js"
  }
}

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    rootComponent: import Root from "@src/Root.tsx",
    setupFn: import mySetupFunction from "@src/myClientSetupCode.ts"
  }
}

----------------------------------------

TITLE: Using Social Login UI Helpers in React
DESCRIPTION: This snippet demonstrates how to use Wasp's built-in UI helpers for social login, including pre-made sign-in buttons and URLs for Google and GitHub authentication.

LANGUAGE: jsx
CODE:
import {
  GoogleSignInButton,
  googleSignInUrl,
  GitHubSignInButton,
  gitHubSignInUrl,
} from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <>
      <GoogleSignInButton />
      <GitHubSignInButton />
      {/* or */}
      <a href={googleSignInUrl}>Sign in with Google</a>
      <a href={gitHubSignInUrl}>Sign in with GitHub</a>
    </>
  )
}

----------------------------------------

TITLE: Checking User Signup Status and Redirecting in React
DESCRIPTION: Demonstrates how to check the user's signup status and redirect to the appropriate page using the useAuth hook in a React component.

LANGUAGE: javascript
CODE:
import { useAuth } from 'wasp/client/auth'
import { Navigate } from 'react-router-dom'

export function HomePage() {
  const { data: user } = useAuth()

  if (user.isSignupComplete === false) {
    return <Navigate to="/edit-user-details" />
  }

  // ...
}

LANGUAGE: typescript
CODE:
import { useAuth } from 'wasp/client/auth'
import { Navigate } from 'react-router-dom'

export function HomePage() {
  const { data: user } = useAuth()

  if (user.isSignupComplete === false) {
    return <Navigate to="/edit-user-details" />
  }

  // ...
}

----------------------------------------

TITLE: Installing npm Package in Wasp Project
DESCRIPTION: Example showing how to add a new npm package (date-fns) as a dependency to a Wasp project using the npm install command.

LANGUAGE: bash
CODE:
npm install date-fns

----------------------------------------

TITLE: Using getUsername in Server Function (JavaScript)
DESCRIPTION: Implementation of getUsername in a server-side task creation function, demonstrating how to access the username from the context.user object.

LANGUAGE: javascript
CODE:
import { getUsername } from 'wasp/auth'

export const createTask = async (args, context) => {
  const username = getUsername(context.user)
  // ...
}

----------------------------------------

TITLE: Starting Wasp Development Server
DESCRIPTION: The wasp start command initiates a development server that watches for file changes and automatically rebuilds the application. It maintains type synchronization and ensures generated code stays updated.

LANGUAGE: shell
CODE:
wasp start

----------------------------------------

TITLE: Configuring Dev Server Auto-Open in Vite
DESCRIPTION: Examples of how to disable automatic browser opening when starting the dev server in both JavaScript and TypeScript.

LANGUAGE: javascript
CODE:
export default {
  server: {
    open: false,
  },
}

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  server: {
    open: false,
  },
})

----------------------------------------

TITLE: Redux Provider Setup
DESCRIPTION: Shows how to set up a Redux provider in the root component to provide store access throughout the application.

LANGUAGE: jsx
CODE:
import store from './store'
import { Provider } from 'react-redux'

export default function Root({ children }) {
  return <Provider store={store}>{children}</Provider>
}

----------------------------------------

TITLE: Creating a New Wasp Application
DESCRIPTION: Command to create a new Wasp application using the Wasp CLI.

LANGUAGE: shell
CODE:
wasp new

----------------------------------------

TITLE: Installing Rosetta on Mac with Apple Silicon
DESCRIPTION: This command installs Rosetta on Mac with Apple Silicon (arm64) to enable running x86 applications like Wasp.

LANGUAGE: shell
CODE:
softwareupdate --install-rosetta

----------------------------------------

TITLE: Frontend Query Implementation in TypeScript React
DESCRIPTION: Type-safe React component implementation showing how to use the getTasks query with proper TypeScript annotations.

LANGUAGE: tsx
CODE:
import { Task } from 'wasp/entities'
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

----------------------------------------

TITLE: Setting Client URL Environment Variable
DESCRIPTION: Command to set the WASP_WEB_CLIENT_URL environment variable for CORS configuration.

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com

----------------------------------------

TITLE: Accessing Client Configuration in Wasp
DESCRIPTION: Shows how to import and access the client configuration object, which contains the apiUrl property that can be set via REACT_APP_API_URL environment variable.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/client'

console.log(config.apiUrl)

----------------------------------------

TITLE: Auth UI Component Implementation
DESCRIPTION: React component implementation for the login page using Wasp's auth components.

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Defining a User Entity in Wasp using Prisma Schema Language
DESCRIPTION: This snippet demonstrates how to define a User entity in Wasp using Prisma Schema Language (PSL). It shows the integration of PSL within the Wasp language, allowing for seamless entity definition.

LANGUAGE: wasp
CODE:
// ... some Wasp code ...

entity User {=psl
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String
psl=} 

// ... some Wasp code ...

----------------------------------------

TITLE: Configuring Basic Social Auth with User Entity in Wasp
DESCRIPTION: Basic configuration for setting up social authentication with a User entity in Wasp. Shows both the Wasp configuration and corresponding Prisma schema.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Server Environment Variables Configuration
DESCRIPTION: Example of defining server-side environment variables in .env.server file, including database connection strings and custom variables.

LANGUAGE: shell
CODE:
DATABASE_URL=postgresql://localhost:5432
SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Defining Server Environment Variables in .env File
DESCRIPTION: Example of defining server-side environment variables in a .env.server file for a Wasp project during development.

LANGUAGE: shell
CODE:
DATABASE_URL=postgresql://localhost:5432
SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Setting Custom Dev Server Port in Vite
DESCRIPTION: Configuration for changing the default dev server port to 4000 and updating the corresponding environment variable.

LANGUAGE: javascript
CODE:
export default {
  server: {
    port: 4000,
  },
}

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  server: {
    port: 4000,
  },
})

LANGUAGE: env
CODE:
WASP_WEB_CLIENT_URL=http://localhost:4000

----------------------------------------

TITLE: Changing Dev Server Behavior in Vite Config (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to customize the Vite configuration to prevent automatic browser opening on server start, using the 'defineConfig' function from Vite.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  server: {
    open: false,
  },
})

----------------------------------------

TITLE: Creating a Wasp Project with Todo App TypeScript Template
DESCRIPTION: This command illustrates how to create a new Wasp project using the Todo App with TypeScript template. The template includes features like Auth (username/password) and Full-stack Type Safety.

LANGUAGE: bash
CODE:
wasp new <project-name> -t todo-ts

----------------------------------------

TITLE: Disabling Telemetry via Environment Variable in Bash
DESCRIPTION: Command to opt out of Wasp telemetry by setting an environment variable.

LANGUAGE: bash
CODE:
export WASP_TELEMETRY_DISABLE=1

----------------------------------------

TITLE: React Frontend Implementation in TypeScript
DESCRIPTION: TypeScript version of the React component with proper type annotations for tasks and components.

LANGUAGE: tsx
CODE:
import { Task } from 'wasp/entities'
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

const TaskView = ({ task }: { task: Task }) => {
  return (
    <div>
      <input type="checkbox" id={String(task.id)} checked={task.isDone} />
      {task.description}
    </div>
  )
}

const TasksList = ({ tasks }: { tasks: Task[] }) => {
  if (!tasks?.length) return <div>No tasks</div>

  return (
    <div>
      {tasks.map((task, idx) => (
        <TaskView task={task} key={idx} />
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Custom Signup Implementation
DESCRIPTION: Example of a custom signup implementation using Wasp's signup and login actions.

LANGUAGE: jsx
CODE:
import { signup, login } from 'wasp/client/auth'

import { useState } from 'react'
import { useNavigate, Link } from 'react-router-dom'

export function Signup() {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState(null)
  const navigate = useNavigate()

  async function handleSubmit(event) {
    event.preventDefault()
    try {
      await signup({
        username,
        password,
      })
      await login(username, password)
      navigate('/')
    } catch (error) {
      setError(error)
    }
  }

  return <form onSubmit={handleSubmit}>{/* ... */}</form>
}

----------------------------------------

TITLE: React Frontend Implementation in TypeScript
DESCRIPTION: TypeScript version of the React component with proper type annotations for tasks and components.

LANGUAGE: tsx
CODE:
import { Task } from 'wasp/entities'
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

const TaskView = ({ task }: { task: Task }) => {
  return (
    <div>
      <input type="checkbox" id={String(task.id)} checked={task.isDone} />
      {task.description}
    </div>
  )
}

const TasksList = ({ tasks }: { tasks: Task[] }) => {
  if (!tasks?.length) return <div>No tasks</div>

  return (
    <div>
      {tasks.map((task, idx) => (
        <TaskView task={task} key={idx} />
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Importing Image Asset in React TSX
DESCRIPTION: TypeScript version of importing and using an image asset in a React component. The imported URL will be '/img.png' during development and hashed in production build like '/assets/img.2d8efhg.png'.

LANGUAGE: tsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: Prisma schema definition for the User entity with a basic id field.

LANGUAGE: prisma
CODE:
// 3. Define the user entity
model User {
  // highlight-next-line
  id Int @id @default(autoincrement())
  // Add your own fields below
  // ...
}

----------------------------------------

TITLE: Adding Tailwind Plugins to Wasp Projects
DESCRIPTION: Demonstrates how to install Tailwind plugins as npm dependencies and add them to the Tailwind configuration in a Wasp project.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  // ...
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
  // ...
}

----------------------------------------

TITLE: Customizing API-specific Middleware in Wasp and TypeScript
DESCRIPTION: This example shows how to customize middleware for a specific API route in a Wasp application using TypeScript. It replaces the JSON parser with a raw body parser for a webhook callback.

LANGUAGE: wasp
CODE:
api webhookCallback {
  fn: import { webhookCallback } from "@server/apis.js",
  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from "@server/apis.js",
  httpRoute: (POST, "/webhook/callback"),
  auth: false
}

LANGUAGE: typescript
CODE:
import express from 'express'
import { WebhookCallback } from '@wasp/apis/types'
import type { MiddlewareConfigFn } from '@wasp/middleware'

export const webhookCallback: WebhookCallback = (req, res, _context) => {
  res.json({ msg: req.body.length })
}

export const webhookCallbackMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')
  
  middlewareConfig.delete('express.json')
  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))

  return middlewareConfig
}

----------------------------------------

TITLE: Basic Wasp Project Directory Structure
DESCRIPTION: Shows the default directory structure created when initializing a new Wasp project, including key files and folders for source code and configuration.

LANGUAGE: plaintext
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp          # Your Wasp code goes here.
‚îú‚îÄ‚îÄ package.json       # Your dependencies and project info go here.
‚îú‚îÄ‚îÄ package-lock.json
‚îú‚îÄ‚îÄ public             # Your static files (e.g., images, favicon) go here.
‚îú‚îÄ‚îÄ src                # Your source code (TS/JS/CSS/HTML) goes here.
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Adding Head Elements in Wasp
DESCRIPTION: Example demonstrating how to add multiple style sheets, scripts, and meta tags to the app's head section.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.12.0"
  },
  title: "My App",
  head: [  // optional
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />",
    "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>",
    "<meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />"
  ]
}

----------------------------------------

TITLE: Implementing Auth Pages in React
DESCRIPTION: React component implementation for the login page using Wasp's authentication UI components.

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Railway Static Hosting Dockerfile
DESCRIPTION: Dockerfile configuration for setting up static hosting of the client application on Railway

LANGUAGE: dockerfile
CODE:
FROM pierrezemb/gostatic
CMD [ "-fallback", "index.html" ]
COPY ./dist/ /srv/http/

----------------------------------------

TITLE: Using routes Object with Optional Segment in TypeScript
DESCRIPTION: Demonstrates how to use the routes object with a route containing an optional static segment in TypeScript.

LANGUAGE: tsx
CODE:
const linkToOptional = routes.OptionalRoute.build({
  path: '/task/:id/details', // or '/task/:id'
  params: { id: 1 },
})

----------------------------------------

TITLE: Auth Page Implementation
DESCRIPTION: React component implementation for the authentication page with login form.

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Creating Auth Pages with React Components
DESCRIPTION: This snippet shows how to create the authentication pages using React components, including a login form and a layout component.

LANGUAGE: javascript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Setting Server Environment Variables in Production (Fly.io Example)
DESCRIPTION: Example of how to set server-side environment variables for a Wasp project deployed to Fly.io using the flyctl CLI tool.

LANGUAGE: shell
CODE:
flyctl secrets set SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Importing Wasp TypeScript/JavaScript Helper Component
DESCRIPTION: Imports a React component used for conditional rendering of TypeScript-specific documentation.

LANGUAGE: jsx
CODE:
import { ShowForTs } from '@site/src/components/TsJsHelpers';

----------------------------------------

TITLE: Configuring Client in Wasp
DESCRIPTION: This snippet shows how to configure the client in a Wasp application, including setting the root component and setup function.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    rootComponent: import Root from "@client/Root.jsx",
    setupFn: import mySetupFunction from "@client/myClientSetupCode.js"
  }
}

----------------------------------------

TITLE: Implementing API in NodeJS (TypeScript)
DESCRIPTION: Demonstrates the TypeScript implementation of a custom API endpoint, including type annotations for improved type safety.

LANGUAGE: typescript
CODE:
import { FooBar } from "@wasp/apis/types";

export const fooBar: FooBar = (req, res, context) => {
  res.set("Access-Control-Allow-Origin", "*");
  res.json({ msg: `Hello, ${context.user?.username || "stranger"}!` });
};

----------------------------------------

TITLE: Starting Wasp Development Server
DESCRIPTION: Commands to navigate to the project directory and start the Wasp development server. The server will initialize the client, server, and database components.

LANGUAGE: sh
CODE:
$ cd TodoApp
$ wasp start

----------------------------------------

TITLE: Defining Basic Wasp App Configuration
DESCRIPTION: This snippet shows the basic structure of an 'app' declaration in Wasp, including version specification, title setting, and adding custom head elements.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ]
}

----------------------------------------

TITLE: Implementing a Job Worker Function in JavaScript
DESCRIPTION: Implementation of the worker function that gets executed when the job runs, showing how to handle job arguments and context.

LANGUAGE: javascript
CODE:
export const foo = async ({ name }, context) => {
  console.log(`Hello ${name}!`)
  const tasks = await context.entities.Task.findMany({})
  return { tasks }
}

----------------------------------------

TITLE: Declaring a Recurring Job in Wasp
DESCRIPTION: Shows how to define a job with a recurring schedule using a cron expression.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@server/workers/bar.js"
  },
  schedule: {
    cron: "0 * * * *",
    args: {=json { "job": "args" } json=} // optional
  }
}

----------------------------------------

TITLE: Implementing Login Page in Wasp
DESCRIPTION: React component for the login page using Wasp's pre-built LoginForm.

LANGUAGE: jsx
CODE:
import { Link } from 'react-router-dom'
import { LoginForm } from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <div style={{ maxWidth: '400px', margin: '0 auto' }}>
      <LoginForm />
      <br />
      <span>
        I don't have an account yet (<Link to="/signup">go to signup</Link>).
      </span>
    </div>
  )
}

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: This code defines the User entity in the Prisma schema file, which is required for Discord authentication in Wasp.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
  // Add your own fields below
  // ...
}

----------------------------------------

TITLE: Declaring a Recurring Job in Wasp
DESCRIPTION: Shows how to define a job with a recurring schedule using a cron expression.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@server/workers/bar.js"
  },
  schedule: {
    cron: "0 * * * *",
    args: {=json { "job": "args" } json=} // optional
  }
}

----------------------------------------

TITLE: Defining User Entity Schema
DESCRIPTION: Prisma schema definition for the User entity required for GitHub authentication.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Implementing Query in JavaScript
DESCRIPTION: Server-side implementation of the getTasks query that retrieves tasks from the database using Prisma client.

LANGUAGE: javascript
CODE:
export const getTasks = async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: New Task Form Component - JavaScript
DESCRIPTION: React component for creating new tasks with form handling and action invocation.

LANGUAGE: jsx
CODE:
const NewTaskForm = () => {
  const handleSubmit = async (event) => {
    event.preventDefault()
    try {
      const target = event.target
      const description = target.description.value
      target.reset()
      await createTask({ description })
    } catch (err) {
      window.alert('Error: ' + err.message)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="description" type="text" defaultValue="" />
      <input type="submit" value="Create task" />
    </form>
  )
}

----------------------------------------

TITLE: Running Wasp Studio Client in Development Mode
DESCRIPTION: This command starts the Wasp Studio Client in development mode. It requires the Wasp Studio Server to be running locally before execution.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Installing Rosetta on macOS with Apple Silicon
DESCRIPTION: Command to install Rosetta on macOS devices with Apple Silicon (M1, M2, etc.) to run x86 applications.

LANGUAGE: shell
CODE:
softwareupdate --install-rosetta

----------------------------------------

TITLE: Tailwind Configuration Setup
DESCRIPTION: Configuration file for Tailwind CSS that specifies content paths and theme settings.

LANGUAGE: javascript
CODE:
const { resolveProjectPath } = require('wasp/dev')

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],
  theme: {
    extend: {},
  },
  plugins: [],
}

----------------------------------------

TITLE: Configuring Social Authentication Structure in Wasp
DESCRIPTION: Basic structure template showing the main sections needed for implementing social authentication in a Wasp application. Includes placeholders for auth configuration, entity definitions (User and SocialLogin), and routing setup.

LANGUAGE: wasp
CODE:
// Configuring the social authentication
app myApp {
  auth: { ... }
}

// Defining entities
entity User { ... }
entity SocialLogin { ... }

// Defining routes and pages
route LoginRoute { ... }
page LoginPage { ... }

----------------------------------------

TITLE: Custom Signup Action in Wasp
DESCRIPTION: This code demonstrates how to create a custom signup action in Wasp, including the action definition and implementation.

LANGUAGE: wasp
CODE:
// ...

action customSignup {
  fn: import { signup } from "@src/auth/signup.js",
}

LANGUAGE: javascript
CODE:
import {
  ensurePasswordIsPresent,
  ensureValidPassword,
  ensureValidUsername,
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'

export const signup = async (args, _context) => {
  ensureValidUsername(args)
  ensurePasswordIsPresent(args)
  ensureValidPassword(args)

  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      // Any additional data you want to store on the User entity
      {},
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  // Your custom code after sign-up.
  // ...

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: Defining a Catch-All Route in Wasp
DESCRIPTION: Demonstrates how to define a catch-all route in a Wasp configuration file.

LANGUAGE: wasp
CODE:
route CatchAllRoute { path: "/pages/*", to: CatchAllPage }
page CatchAllPage { ... }

----------------------------------------

TITLE: Creating a Wasp Project with Todo App TypeScript Template
DESCRIPTION: This snippet shows the command to create a new Wasp project using the Todo App with TypeScript template. The template includes authentication and full-stack type safety features.

LANGUAGE: bash
CODE:
wasp new <project-name> -t todo-ts

----------------------------------------

TITLE: Accessing Server Configuration in Wasp
DESCRIPTION: Demonstrates how to import and use the server configuration object in Wasp. The configuration object contains fields like frontendUrl, which can be set using environment variables.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/server'

console.log(config.frontendUrl)

----------------------------------------

TITLE: Accessing Server Configuration in Wasp
DESCRIPTION: Demonstrates how to import and use the server configuration object in Wasp. The configuration object contains fields like frontendUrl, which can be set using environment variables.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/server'

console.log(config.frontendUrl)

----------------------------------------

TITLE: Implementing Shadcn Form Field Component in React
DESCRIPTION: Example of a basic form field implementation using Shadcn UI library components with React Hook Form integration.

LANGUAGE: tsx
CODE:
<FormField
  control={form.control}
  name="name"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Name</FormLabel>
      <FormControl>
        <Input {...field} />
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>

----------------------------------------

TITLE: Accessing Username Identity in TypeScript for Wasp
DESCRIPTION: This snippet demonstrates how to extract the username identity from a user object and access the specific username used for signup. It assumes the existence of a 'user' object with an 'identities' property containing username information.

LANGUAGE: typescript
CODE:
const usernameIdentity = user.identities.username

// Username that the user used to sign up, e.g. "fluffyllama"
usernameIdentity.id

----------------------------------------

TITLE: Using Type-Safe Link Component
DESCRIPTION: Shows how to implement type-safe navigation using the Link component from wasp/client/router with proper path parameters

LANGUAGE: jsx
CODE:
import { Link } from 'wasp/client/router'

export const TaskList = () => {
  // ...

  return (
    <div>
      {tasks.map((task) => (
        <Link
          key={task.id}
          to="/task/:id"
          params={{ id: task.id }}>
          {task.description}
        </Link>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Migrating React Router Root Component
DESCRIPTION: Demonstrates how to update the root component to use Outlet instead of children prop in React Router 6.

LANGUAGE: tsx
CODE:
export function App({ children }: { children: React.ReactNode }) {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      {children}
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

LANGUAGE: tsx
CODE:
import { Outlet } from 'react-router-dom'

export function App() {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      <Outlet />
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: Defining Default Global Middleware in JavaScript
DESCRIPTION: This snippet shows the default global middleware configuration in Wasp for JavaScript applications. It includes middleware such as Helmet, CORS, Morgan, express.json, express.urlencoded, and cookieParser.

LANGUAGE: javascript
CODE:
const defaultGlobalMiddleware = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

----------------------------------------

TITLE: Defining Default Global Middleware in JavaScript
DESCRIPTION: This snippet shows the default global middleware configuration in Wasp for JavaScript applications. It includes middleware such as Helmet, CORS, Morgan, express.json, express.urlencoded, and cookieParser.

LANGUAGE: javascript
CODE:
const defaultGlobalMiddleware = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

----------------------------------------

TITLE: Declaring API in Wasp
DESCRIPTION: Shows how to declare a custom API endpoint in a Wasp file, specifying the function to import and the HTTP route.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  httpRoute: (GET, "/foo/bar")
}

----------------------------------------

TITLE: Creating Client Auth Pages in React
DESCRIPTION: This code creates the Login component and a Layout component for the authentication pages using React and Tailwind CSS.

LANGUAGE: javascript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Testing React Components with renderInContext
DESCRIPTION: Example showing how to use Wasp's renderInContext helper to test React components with QueryClientProvider and Router wrappers.

LANGUAGE: javascript
CODE:
import { renderInContext } from "@wasp/test";

renderInContext(<MainPage />);

----------------------------------------

TITLE: Running Database Migration in Wasp
DESCRIPTION: This command is used to update the database schema after defining or modifying entities. It creates and applies a new migration.

LANGUAGE: sh
CODE:
wasp db migrate-dev

----------------------------------------

TITLE: Accessing Setup Resources in Wasp Operations
DESCRIPTION: Illustrates how to access resources initialized during server setup from within Wasp operations. The setup resources are available through the context parameter.

LANGUAGE: javascript
CODE:
export const myAction = async (args, context) => {
  console.log(context.server.setup.someResource)
}

----------------------------------------

TITLE: Configuring Basic Wasp Client Settings
DESCRIPTION: Basic configuration of a Wasp client application including title and client-specific settings.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    rootComponent: import Root from "@src/Root.jsx",
    setupFn: import mySetupFunction from "@src/myClientSetupCode.js"
  }
}

----------------------------------------

TITLE: Setting Up Email Sender in Wasp
DESCRIPTION: Configures the email sender in the main.wasp file using the Dummy provider for development purposes.

LANGUAGE: wasp
CODE:
app myApp {
  // ...
  emailSender: {
    provider: Dummy,
  }
}

----------------------------------------

TITLE: Setting Up Email Sender in Wasp
DESCRIPTION: Configures the email sender in the main.wasp file using the Dummy provider for development purposes.

LANGUAGE: wasp
CODE:
app myApp {
  // ...
  emailSender: {
    provider: Dummy,
  }
}

----------------------------------------

TITLE: Sending Telemetry Data on Wasp Installation in JSON
DESCRIPTION: This snippet demonstrates the JSON structure of telemetry data sent when Wasp is installed via the install.sh script. It includes a randomly generated distinct ID and the OS information.

LANGUAGE: json
CODE:
{
  "distinct_id": "274701613078193779564259",
  "os": "linux"
}

----------------------------------------

TITLE: Sending Telemetry Data on Wasp Installation in JSON
DESCRIPTION: This snippet demonstrates the JSON structure of telemetry data sent when Wasp is installed via the install.sh script. It includes a randomly generated distinct ID and the OS information.

LANGUAGE: json
CODE:
{
  "distinct_id": "274701613078193779564259",
  "os": "linux"
}

----------------------------------------

TITLE: Connecting to Production Database via Environment Variable
DESCRIPTION: Command demonstrating how to connect to a production database using the DATABASE_URL environment variable with the wasp db studio command.

LANGUAGE: bash
CODE:
DATABASE_URL="postgresql://user:password@host:port/dbname" wasp db studio

----------------------------------------

TITLE: Using ShowForTs Component in JSX
DESCRIPTION: This snippet demonstrates the usage of the ShowForTs component to conditionally render TypeScript-specific content about payload type checking.

LANGUAGE: jsx
CODE:
<ShowForTs>

As long as you're annotating your Queries with the correct automatically generated types, TypeScript ensures your payloads are valid (i.e., Wasp knows how to serialize and deserialize them).
</ShowForTs>

----------------------------------------

TITLE: Implementing Client Setup Function in JavaScript/TypeScript
DESCRIPTION: Demonstrates how to create a setup function that runs on the client before rendering, including setting up an interval.

LANGUAGE: javascript
CODE:
export default async function mySetupFunction() {
  let count = 1
  setInterval(
    () => console.log(`You have been online for ${count++} hours.`),
    1000 * 60 * 60
  )
}

LANGUAGE: typescript
CODE:
export default async function mySetupFunction(): Promise<void> {
  let count = 1
  setInterval(
    () => console.log(`You have been online for ${count++} hours.`),
    1000 * 60 * 60
  )
}

----------------------------------------

TITLE: Defining User Entity with Prisma Schema
DESCRIPTION: Minimal User entity definition required for username authentication

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Using getEmail in Server-side Function (TypeScript)
DESCRIPTION: Demonstrates the TypeScript implementation of using getEmail in a server-side createTask function. It includes a generic type parameter for the CreateTask type.

LANGUAGE: ts
CODE:
import { getEmail } from 'wasp/auth'

export const createTask: CreateTask<...>  = async (args, context) => {
  const email = getEmail(context.user)
  // ...
}

----------------------------------------

TITLE: Retrieving Google Identity and User ID in TypeScript
DESCRIPTION: This snippet demonstrates how to access the Google identity information for a user and extract the Google User ID. It assumes the existence of a 'user' object with an 'identities' property containing Google-specific data.

LANGUAGE: typescript
CODE:
const googleIdentity = user.identities.google

// Google User ID for example "123456789012345678901"
googleIdentity.id

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Demonstrates how to declare a query in Wasp, specifying the function implementation and entity dependencies for automatic cache invalidation.

LANGUAGE: javascript
CODE:
query getListsAndCards {
    fn: import { getListsAndCards } from "@server/queries.js",
    entities: [List, Card]
}

----------------------------------------

TITLE: API Declaration Reference
DESCRIPTION: This snippet provides a comprehensive example of an API declaration in Wasp, showcasing all available fields and their usage.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  httpRoute: (GET, "/foo/bar"),
  entities: [Task],
  auth: true,
  middlewareConfigFn: import { apiMiddleware } from "@src/apis"
}

----------------------------------------

TITLE: Custom Create Task Implementation in JavaScript
DESCRIPTION: Example of a custom implementation for creating a Task, including user authentication and connecting the task to the user.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401, 'User not authenticated.')
  }

  const { description, isDone } = args
  const { Task } = context.entities

  return await Task.create({
    data: {
      description,
      isDone,
      user: {
        connect: {
          id: context.user.id,
        },
      },
    },
  })
}

----------------------------------------

TITLE: Building the Web Client for Deployment
DESCRIPTION: Commands to build the web client for production deployment, setting the API URL environment variable.

LANGUAGE: bash
CODE:
cd .wasp/build/web-app
REACT_APP_API_URL=<your_server_url> npm run build

----------------------------------------

TITLE: Importing ShowForTs Component
DESCRIPTION: Import statement for a TypeScript-specific documentation component used to show TypeScript-only content

LANGUAGE: typescript
CODE:
import { ShowForTs } from '@site/src/components/TsJsHelpers';

----------------------------------------

TITLE: Customizing API-specific Middleware in Wasp and JavaScript
DESCRIPTION: This example shows how to customize middleware for a specific API route in a Wasp application using JavaScript. It demonstrates replacing the JSON parser with a raw body parser for a webhook callback.

LANGUAGE: wasp
CODE:
api webhookCallback {
  fn: import { webhookCallback } from "@src/apis",
  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from "@src/apis",
  httpRoute: (POST, "/webhook/callback"),
  auth: false
}

LANGUAGE: javascript
CODE:
import express from 'express'

export const webhookCallback = (req, res, _context) => {
  res.json({ msg: req.body.length })
}

export const webhookCallbackMiddlewareFn = (middlewareConfig) => {
  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')

  middlewareConfig.delete('express.json')
  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))

  return middlewareConfig
}

----------------------------------------

TITLE: Declaring a createTask Action in Wasp
DESCRIPTION: This snippet shows how to declare a 'createTask' action in the main.wasp file, specifying the function to import and the entities involved.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@server/actions.js",
  entities: [Task]
}

----------------------------------------

TITLE: Database Seeding Function in JavaScript
DESCRIPTION: Implementation of a database seed function that creates a user and associated task using Prisma client.

LANGUAGE: javascript
CODE:
import { createTask } from './actions.js'
import { sanitizeAndSerializeProviderData } from 'wasp/server/auth'

export const devSeedSimple = async (prisma) => {
  const user = await createUser(prisma, {
    username: 'RiuTheDog',
    password: 'bark1234',
  })

  await createTask(
    { description: 'Chase the cat' },
    { user, entities: { Task: prisma.task } }
  )
}

async function createUser(prisma, data) {
  const newUser = await prismaClient.user.create({
    data: {
      auth: {
        create: {
          identities: {
            create: {
              providerName: 'username',
              providerUserId: data.username,
              providerData: sanitizeAndSerializeProviderData({
                password: data.password
              }),
            },
          },
        },
      },
    },
  })

  return newUser
}

----------------------------------------

TITLE: Storing Values for Later Use in Setup Function (JavaScript)
DESCRIPTION: Illustrates how to store values during server setup for later use in operations, using JavaScript. It shows a pattern for creating a singleton-like module.

LANGUAGE: javascript
CODE:
let someResource = undefined

export const mySetupFunction = async () => {
  // Let's pretend functions setUpSomeResource and startSomeCronJob
  // are implemented below or imported from another file.
  someResource = await setUpSomeResource()
  startSomeCronJob()
}

export const getSomeResource = () => someResource

LANGUAGE: javascript
CODE:
import { getSomeResource } from './myServerSetupCode.js'

...

export const someQuery = async (args, context) => {
  const someResource = getSomeResource()
  return queryDataFromSomeResource(args, someResource)
}

----------------------------------------

TITLE: Implementing createTask Action in TypeScript
DESCRIPTION: Defines the createTask function with TypeScript annotations, creating a new Task entity using the provided description.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'
import { CreateTask } from 'wasp/server/operations'

type CreateTaskPayload = Pick<Task, 'description'>

export const createTask: CreateTask<CreateTaskPayload, Task> = async (
  args,
  context
) => {
  return context.entities.Task.create({
    data: { description: args.description },
  })
}

----------------------------------------

TITLE: Implementing Custom Username Setup
DESCRIPTION: Example of overriding default social auth behavior to allow custom username selection during signup.

LANGUAGE: typescript
CODE:
export const getUserFields: GetUserFieldsFn = async (_context, _args) => {
  return {
    isSignupComplete: false,
  }
}

----------------------------------------

TITLE: Setting Up Email Sender in Wasp
DESCRIPTION: Configuration for setting up an email sender (SendGrid) in the Wasp application for handling authentication emails.

LANGUAGE: wasp
CODE:
app myApp {
  // ...
  emailSender: {
    provider: SendGrid,
  }
}

----------------------------------------

TITLE: Updating Task Actions for User Authentication
DESCRIPTION: Modifies the createTask and updateTask actions to check for user authentication and associate tasks with the current user.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401)
  }
  return context.entities.Task.create({
    data: {
      description: args.description,
      user: { connect: { id: context.user.id } },
    },
  })
}

export const updateTask = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401)
  }
  return context.entities.Task.updateMany({
    where: { id: args.id, user: { id: context.user.id } },
    data: { isDone: args.isDone },
  })
}

----------------------------------------

TITLE: Referencing User Entity in Wasp Authentication
DESCRIPTION: Inline reference to the User entity type in the context of Wasp's authentication system with a link to detailed documentation.

LANGUAGE: markdown
CODE:
You can read more about how the `User` is connected to the rest of the auth system and how you can access the user data in the [Accessing User Data](./entities) section of the docs.

----------------------------------------

TITLE: Implementing userSignupFields for Google Auth in JavaScript
DESCRIPTION: This JavaScript code defines the userSignupFields function for Google authentication, setting isSignupComplete to false.

LANGUAGE: javascript
CODE:
export const userSignupFields = {
  isSignupComplete: () => false,
}

----------------------------------------

TITLE: Migration Script for Wasp Project Structure
DESCRIPTION: Bash command to run the migration script provided by Wasp for updating the project structure from 0.11.X to 0.12.X.

LANGUAGE: bash
CODE:
npx wasp-migrate foo

----------------------------------------

TITLE: Changing App Title Configuration
DESCRIPTION: Example showing how to modify the app title that appears in the browser tab.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "BookFace"
}

----------------------------------------

TITLE: Running Wasp Studio Server with Example Data File
DESCRIPTION: This command demonstrates how to run the Wasp Studio server using a specific example data file from the 'examples' directory.

LANGUAGE: bash
CODE:
npm run dev -- -- -d ../../examples/crud-testing/.wasp/out/.wasp-studio-data.json

----------------------------------------

TITLE: Configuring Wasp App with Authentication
DESCRIPTION: Defines a Wasp application configuration with a title and authentication settings using username and password.

LANGUAGE: wasp
CODE:
app RecipeApp {
  title: "My Recipes",
  wasp: { version: "^0.15.0" },
  auth: {
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login",
    userEntity: User
  }
}

----------------------------------------

TITLE: Configuring Wasp App with Authentication
DESCRIPTION: Defines a Wasp application configuration with a title and authentication settings using username and password.

LANGUAGE: wasp
CODE:
app RecipeApp {
  title: "My Recipes",
  wasp: { version: "^0.15.0" },
  auth: {
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login",
    userEntity: User
  }
}

----------------------------------------

TITLE: Using getEmail in React Component (TypeScript)
DESCRIPTION: Illustrates the TypeScript version of using getEmail in a React component. It includes type annotations for the user prop and imports the AuthUser type from Wasp's auth module.

LANGUAGE: tsx
CODE:
import { getEmail, AuthUser } from 'wasp/auth'

const MainPage = ({ user }: { user: AuthUser }) => {
  const email = getEmail(user)
  // ...
}

----------------------------------------

TITLE: Customizing Per-Path Middleware in Wasp and TypeScript
DESCRIPTION: This example demonstrates customizing middleware for all API routes under a common path in a Wasp application using TypeScript. It shows adding custom middleware to a specific API namespace with proper type annotations.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@src/apis",
  path: "/foo/bar"
}

LANGUAGE: typescript
CODE:
import express from 'express'
import { type MiddlewareConfigFn } from 'wasp/server'

export const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  const customMiddleware: express.RequestHandler = (_req, _res, next) => {
    console.log('fooBarNamespaceMiddlewareFn: custom middleware')
    next()
  }

  middlewareConfig.set('custom.middleware', customMiddleware)

  return middlewareConfig
}

----------------------------------------

TITLE: Creating a Wasp Project with Todo App TypeScript Template
DESCRIPTION: This command creates a new Wasp project using the Todo App with TypeScript template. The template includes features for Auth (username/password) and Fullstack Type Safety.

LANGUAGE: bash
CODE:
wasp new <project-name> -t todo-ts

----------------------------------------

TITLE: Configuring Environment Variables Validation with Zod in Wasp
DESCRIPTION: Example of setting up environment variables validation using Zod in a Wasp application. Shows both the TypeScript configuration and the corresponding Wasp configuration.

LANGUAGE: typescript
CODE:
import * as z from 'zod'

import { defineEnvValidationSchema } from 'wasp/env'

export const serverEnvValidationSchema = defineEnvValidationSchema(
  z.object({
    STRIPE_API_KEY: z.string({
      required_error: 'STRIPE_API_KEY is required.',
    }),
  })
)

LANGUAGE: wasp
CODE:
app myApp {
  ...
  server: {
    envValidationSchema: import { serverEnvValidationSchema } from "@src/env",
  },
}

----------------------------------------

TITLE: Implementing createTask Action in TypeScript
DESCRIPTION: Defines the createTask function with TypeScript annotations, creating a new Task entity using the provided description.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'
import { CreateTask } from 'wasp/server/operations'

type CreateTaskPayload = Pick<Task, 'description'>

export const createTask: CreateTask<CreateTaskPayload, Task> = async (
  args,
  context
) => {
  return context.entities.Task.create({
    data: { description: args.description },
  })
}

----------------------------------------

TITLE: Railway Static Hosting Dockerfile
DESCRIPTION: Dockerfile configuration for hosting static files on Railway.

LANGUAGE: dockerfile
CODE:
FROM pierrezemb/gostatic
CMD [ "-fallback", "index.html" ]
COPY ./dist/ /srv/http/

----------------------------------------

TITLE: Initializing React Components Import in Markdown
DESCRIPTION: Markdown imports for React components and other content used in the blog post.

LANGUAGE: markdown
CODE:
import InBlogCta from './components/InBlogCta';
import WaspIntro from './_wasp-intro.md';

----------------------------------------

TITLE: Implementing Actions in Node.js
DESCRIPTION: Example of implementing the createTask and markTaskAsDone Actions in JavaScript.

LANGUAGE: javascript
CODE:
let nextId = 4
const tasks = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const createTask = (args) => {
  const newTask = {
    id: nextId,
    isDone: false,
    description: args.description,
  }
  nextId += 1
  tasks.push(newTask)
  return newTask
}

export const markTaskAsDone = (args) => {
  const task = tasks.find((task) => task.id === args.id)
  if (!task) {
    return
  }
  task.isDone = true
}

----------------------------------------

TITLE: Implementing Actions in Node.js
DESCRIPTION: Example of implementing the createTask and markTaskAsDone Actions in JavaScript.

LANGUAGE: javascript
CODE:
let nextId = 4
const tasks = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const createTask = (args) => {
  const newTask = {
    id: nextId,
    isDone: false,
    description: args.description,
  }
  nextId += 1
  tasks.push(newTask)
  return newTask
}

export const markTaskAsDone = (args) => {
  const task = tasks.find((task) => task.id === args.id)
  if (!task) {
    return
  }
  task.isDone = true
}

----------------------------------------

TITLE: Using Actions on the Client
DESCRIPTION: How to import and use Actions in client-side code, including within React components.

LANGUAGE: javascript
CODE:
import { createTask, markTaskAsDone } from 'wasp/client/operations'

const newTask = await createTask({ description: 'Learn TypeScript' })
await markTaskAsDone({ id: 1 })

----------------------------------------

TITLE: Using getUsername in Task Handler (JavaScript)
DESCRIPTION: Shows implementation of getUsername in a JavaScript task handler function to get the username from the context user object.

LANGUAGE: javascript
CODE:
import { getUsername } from 'wasp/auth'

export const createTask = async (args, context) => {
  const username = getUsername(context.user)
  // ...
}

----------------------------------------

TITLE: Using Wasp Query in React Component
DESCRIPTION: Utilizing the fetchAllPhrases query in a React component using the useQuery hook.

LANGUAGE: jsx
CODE:
const { data: phrases, isLoading } = useQuery(fetchAllPhrases);

----------------------------------------

TITLE: Unit Testing Helper Functions in TypeScript
DESCRIPTION: Shows how to write and structure unit tests for helper functions in TypeScript using Vitest, including type annotations.

LANGUAGE: typescript
CODE:
import { type Task } from "wasp/entities";

export function areThereAnyTasks(tasks: Task[]): boolean {
  return tasks.length === 0;
}

LANGUAGE: typescript
CODE:
import { test, expect } from "vitest";

import { areThereAnyTasks } from "./helpers";

test("areThereAnyTasks", () => {
  expect(areThereAnyTasks([])).toBe(false);
});

----------------------------------------

TITLE: Displaying Wasp CLI Version
DESCRIPTION: Shows the output of the 'wasp version' command, which displays the current version of the Wasp CLI and instructions for updating.

LANGUAGE: bash
CODE:
$ wasp version

0.14.0

If you wish to install/switch to the latest version of Wasp, do:
curl -sSL https://get.wasp.sh/installer.sh | sh -s

If you want specific x.y.z version of Wasp, do:
curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z

Check https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.

----------------------------------------

TITLE: Customizing Global Middleware in Wasp and JavaScript
DESCRIPTION: This example demonstrates how to customize global middleware in a Wasp application using JavaScript. It modifies the CORS configuration to allow additional domains.

LANGUAGE: wasp
CODE:
app todoApp {
  // ...

  server: {
    setupFn: import setup from "@server/serverSetup.js",
    middlewareConfigFn: import { serverMiddlewareFn } from "@server/serverSetup.js"
  },
}

LANGUAGE: javascript
CODE:
import cors from 'cors'
import config from '@wasp/config.js'

export const serverMiddlewareFn = (middlewareConfig) => {
  // Example of adding extra domains to CORS.
  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))
  return middlewareConfig
}

----------------------------------------

TITLE: Adding Custom Route in Server Setup Function
DESCRIPTION: Illustrates how to add a custom route using the server setup function. It includes examples for both JavaScript and TypeScript implementations.

LANGUAGE: javascript
CODE:
export const mySetupFunction = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

LANGUAGE: typescript
CODE:
import { ServerSetupFn } from 'wasp/server'
import { Application } from 'express'

export const mySetupFunction: ServerSetupFn = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app: Application) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

----------------------------------------

TITLE: PostCSS Configuration for Tailwind
DESCRIPTION: PostCSS configuration file required for Tailwind CSS processing.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----------------------------------------

TITLE: Defining Server Setup in Wasp
DESCRIPTION: Demonstrates how to declare a custom server setup function in a Wasp configuration file. The setup function is imported from an external JavaScript file.

LANGUAGE: css
CODE:
server: {
  setup: {
    fn: import { myCustomSetup } from '@ext/serverSetup.js'
  }
}

----------------------------------------

TITLE: Configuring SQLite Database in Prisma Schema
DESCRIPTION: This snippet shows how to configure SQLite as the database provider in the Prisma schema file.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ...

----------------------------------------

TITLE: Overriding Default Google Auth Behavior
DESCRIPTION: This snippet demonstrates how to override the default Google authentication behavior by specifying custom configuration and user field functions.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      google: {
        configFn: import { getConfig } from "@server/auth/google.js",
        getUserFieldsFn: import { getUserFields } from "@server/auth/google.js"
      }
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Running Wasp Deploy Package
DESCRIPTION: Shell commands to install dependencies, build the TypeScript project, and run the deploy package with the fly command

LANGUAGE: sh
CODE:
npm install
npm run build
node dist/index.js fly ...

----------------------------------------

TITLE: React Component with Query Usage (JavaScript)
DESCRIPTION: Frontend implementation showing how to use the getTasks query in a React component with loading and error handling.

LANGUAGE: jsx
CODE:
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

----------------------------------------

TITLE: Configuring TypeScript for Wasp 0.14
DESCRIPTION: Updated TypeScript configuration file with necessary compiler options for Wasp 0.14.0 IDE support.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "esnext",
    "target": "esnext",
    "moduleResolution": "bundler",
    "jsx": "preserve",
    "strict": true,
    "esModuleInterop": true,
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "typeRoots": [
      "node_modules/@testing-library",
      "node_modules/@types"
    ],
    "outDir": ".wasp/phantom"
  }
}

----------------------------------------

TITLE: Setting Up Mock Server for Wasp Tests
DESCRIPTION: Shows how to set up a mock server for tests and obtain mockQuery and mockApi utilities.

LANGUAGE: javascript
CODE:
import { mockServer } from "wasp/client/test";

const { mockQuery, mockApi } = mockServer();

----------------------------------------

TITLE: Setting Up Mock Server for Wasp Tests
DESCRIPTION: Shows how to set up a mock server for tests and obtain mockQuery and mockApi utilities.

LANGUAGE: javascript
CODE:
import { mockServer } from "wasp/client/test";

const { mockQuery, mockApi } = mockServer();

----------------------------------------

TITLE: Accessing Google Identity from User Object in TypeScript
DESCRIPTION: Demonstrates how to access Google OAuth identity information from a user object. Shows extraction of Google identity and accessing the Google User ID which is typically a long numeric string.

LANGUAGE: typescript
CODE:
const googleIdentity = user.identities.google

// Google User ID for example "123456789012345678901"
googleIdentity.id

----------------------------------------

TITLE: Implementing WebSocket Client in React (TypeScript)
DESCRIPTION: Shows the TypeScript implementation of a React component using WebSockets. It leverages Wasp's full-stack type safety features, automatically inferring event types and payloads from the server definitions.

LANGUAGE: tsx
CODE:
import React, { useState } from 'react'
import {
  useSocket,
  useSocketListener,
  ServerToClientPayload,
} from '@wasp/webSocket'

export const ChatPage = () => {
  const [messageText, setMessageText] = useState<
    ClientToServerPayload<'chatMessage'>
  >('')
  const [messages, setMessages] = useState<
    ServerToClientPayload<'chatMessage'>[]
  >([])
  const { socket, isConnected } = useSocket()

  useSocketListener('chatMessage', logMessage)

  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {
    setMessages((priorMessages) => [msg, ...priorMessages])
  }

  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    socket.emit('chatMessage', messageText)
    setMessageText('')
  }

  const messageList = messages.map((msg) => (
    <li key={msg.id}>
      <em>{msg.username}</em>: {msg.text}
    </li>
  ))
  const connectionIcon = isConnected ? 'üü¢' : 'üî¥'

  return (
    <>
      <h2>Chat {connectionIcon}</h2>
      <div>
        <form onSubmit={handleSubmit}>
          <div>
            <div>
              <input
                type="text"
                value={messageText}
                onChange={(e) => setMessageText(e.target.value)}
              />
            </div>
            <div>
              <button type="submit">Submit</button>
            </div>
          </div>
        </form>
        <ul>{messageList}</ul>
      </div>
    </>
  )
}

----------------------------------------

TITLE: Installing Rosetta for Mac Mx Chip Support
DESCRIPTION: Installs Rosetta translation layer to enable running x86 Wasp binary on arm64 (Apple Silicon) Macs.

LANGUAGE: bash
CODE:
softwareupdate --install-rosetta

----------------------------------------

TITLE: Defining Login and Signup Routes in Wasp
DESCRIPTION: Declares routes for the login and signup pages in the Wasp configuration.

LANGUAGE: wasp
CODE:
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/LoginPage"
}

----------------------------------------

TITLE: Including User Data with Other Entities in TypeScript
DESCRIPTION: Example of including full user data when fetching tasks in a Wasp application using Prisma queries.

LANGUAGE: typescript
CODE:
export const getAllTasks = (async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'desc' },
    select: {
      id: true,
      title: true,
      user: {
        include: {
          auth: {
            include: {
              identities: {
                select: {
                  providerName: true,
                  providerUserId: true,
                },
              },
            },
          },
        },
      },
    },
  })
}) satisfies tasks.GetAllQuery<{}, {}>

----------------------------------------

TITLE: Configuring SQLite Database Provider in Prisma Schema
DESCRIPTION: Default Prisma schema configuration for SQLite database in Wasp applications.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

----------------------------------------

TITLE: Configuring tsconfig.json for Wasp 0.14.0
DESCRIPTION: Update the tsconfig.json file with new compiler options for Wasp 0.14.0 compatibility.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "esnext",
    "target": "esnext",
    "moduleResolution": "bundler",
    "jsx": "preserve",
    "strict": true,
    "esModuleInterop": true,
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "typeRoots": [
      "node_modules/@testing-library",
      "node_modules/@types"
    ],
    "outDir": ".wasp/phantom"
  }
}

----------------------------------------

TITLE: Updating getTasks Query for Authentication
DESCRIPTION: Modifies the getTasks query to check for authentication and return only the current user's tasks.

LANGUAGE: javascript
CODE:
import HttpError from '@wasp/core/HttpError.js'

export const getTasks = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401)
  }
  return context.entities.Task.findMany({
    where: { user: { id: context.user.id } },
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Username and Password Data Migration Function
DESCRIPTION: Implements a data migration function for users using the Username and Password authentication method, moving their data to the new auth system in Wasp 0.12.X.

LANGUAGE: wasp
CODE:
api migrateUsernameAndPassword {
  httpRoute: (GET, "/migrate-username-and-password"),
  fn: import { migrateUsernameAndPasswordHandler } from "@src/migrateToNewAuth",
  entities: []
}

LANGUAGE: typescript
CODE:
import { prisma } from "wasp/server";
import { type ProviderName, type UsernameProviderData } from "wasp/server/auth";
import { MigrateUsernameAndPassword } from "wasp/server/api";

export const migrateUsernameAndPasswordHandler: MigrateUsernameAndPassword =
  async (_req, res) => {
    const result = await migrateUsernameAuth();

    res.status(200).json({ message: "Migrated users to the new auth", result });
  };

async function migrateUsernameAuth(): Promise<{
  numUsersAlreadyMigrated: number;
  numUsersNotUsingThisAuthMethod: number;
  numUsersMigratedSuccessfully: number;
}> {
  const users = await prisma.user.findMany({
    include: {
      auth: true,
    },
  });

  const result = {
    numUsersAlreadyMigrated: 0,
    numUsersNotUsingThisAuthMethod: 0,
    numUsersMigratedSuccessfully: 0,
  };

  for (const user of users) {
    if (user.auth) {
      result.numUsersAlreadyMigrated++;
      console.log("Skipping user (already migrated) with id:", user.id);
      continue;
    }

    if (!user.username || !user.password) {
      result.numUsersNotUsingThisAuthMethod++;
      console.log("Skipping user (not using username auth) with id:", user.id);
      continue;
    }

    const providerData: UsernameProviderData = {
      hashedPassword: user.password,
    };
    const providerName: ProviderName = "username";

    await prisma.auth.create({
      data: {
        identities: {
          create: {
            providerName,
            providerUserId: user.username.toLowerCase(),
            providerData: JSON.stringify(providerData),
          },
        },
        user: {
          connect: {
            id: user.id,
          },
        },
      },
    });
    result.numUsersMigratedSuccessfully++;
  }

  return result;
}

----------------------------------------

TITLE: Updating TaskView Component with updateTask Action
DESCRIPTION: Modifies the TaskView component to call the updateTask Action when the task's checkbox is toggled.

LANGUAGE: jsx
CODE:
const TaskView = ({ task }) => {
  const handleIsDoneChange = async (event) => {
    try {
      await updateTask({
        id: task.id,
        isDone: event.target.checked,
      })
    } catch (error) {
      window.alert('Error while updating task: ' + error.message)
    }
  }

  return (
    <div>
      <input
        type="checkbox"
        id={String(task.id)}
        checked={task.isDone}
        onChange={handleIsDoneChange}
      />
      {task.description}
    </div>
  )
}

----------------------------------------

TITLE: Path-Based Middleware Configuration
DESCRIPTION: Example of configuring middleware for all routes under a specific path using apiNamespace.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@src/apis",
  path: "/foo/bar"
}

LANGUAGE: typescript
CODE:
import express from 'express'
import { type MiddlewareConfigFn } from 'wasp/server'

export const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  const customMiddleware: express.RequestHandler = (_req, _res, next) => {
    console.log('fooBarNamespaceMiddlewareFn: custom middleware')
    next()
  }

  middlewareConfig.set('custom.middleware', customMiddleware)

  return middlewareConfig
}

----------------------------------------

TITLE: Using Entities in APIs (TypeScript Implementation)
DESCRIPTION: Shows how to use Entities in the TypeScript implementation of a custom API endpoint, including type annotations.

LANGUAGE: typescript
CODE:
import { FooBar } from "@wasp/apis/types";

export const fooBar: FooBar = (req, res, context) => {
  res.json({ count: await context.entities.Task.count() });
};

----------------------------------------

TITLE: Defining Wasp App Structure in JavaScript
DESCRIPTION: Demonstrates the structure of a main.wasp file for a Wasp application using JavaScript, including app, route, and page declarations.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.12.0" // Pins the version of Wasp to use.
  },
  title: "TodoApp" // Used as the browser tab title. Note that all strings in Wasp are double quoted!
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  // We specify that the React implementation of the page is exported from
  // `src/MainPage.jsx`. This statement uses standard JS import syntax.
  // Use `@src` to reference files inside the `src` folder.
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Implementing Actions in JavaScript
DESCRIPTION: Example of implementing Actions in a JavaScript file

LANGUAGE: javascript
CODE:
let nextId = 4
const tasks = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const createTask = (args) => {
  const newTask = {
    id: nextId,
    isDone: false,
    description: args.description,
  }
  nextId += 1
  tasks.push(newTask)
  return newTask
}

export const markTaskAsDone = (args) => {
  const task = tasks.find((task) => task.id === args.id)
  if (!task) {
    return
  }
  task.isDone = true
}

----------------------------------------

TITLE: Mocking Server Responses in Wasp Tests
DESCRIPTION: Shows how to use the mockServer utility to set up mock responses for queries and APIs in Wasp tests. This is useful for testing components that depend on server data.

LANGUAGE: javascript
CODE:
import { mockServer } from "wasp/client/test";

const { mockQuery, mockApi } = mockServer();

----------------------------------------

TITLE: Configuring Email Authentication in Wasp
DESCRIPTION: This snippet shows how to enable email authentication in the main.wasp file. It demonstrates the configuration within the app's auth section.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Configuring Email Authentication in Wasp
DESCRIPTION: This snippet shows how to enable email authentication in the main.wasp file. It demonstrates the configuration within the app's auth section.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Accessing Server Environment Variables in JavaScript/TypeScript
DESCRIPTION: Shows how to access server-side environment variables in a Wasp project using JavaScript or TypeScript. Server env vars are accessed using process.env and can store secret values.

LANGUAGE: javascript
CODE:
console.log(process.env.SOME_VAR_NAME)

LANGUAGE: typescript
CODE:
console.log(process.env.SOME_VAR_NAME)

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: Creates a User model in the Prisma schema to represent app users.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Creating a New Wasp Project with Default Template
DESCRIPTION: Shows how to create a new Wasp project using the default template by specifying the project name directly with the 'wasp new' command.

LANGUAGE: bash
CODE:
$ wasp new MyFirstProject
üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Initializing Wasp Project for Twitter Agent
DESCRIPTION: Commands to install Wasp, create a new project, and start the development server.

LANGUAGE: bash
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh
wasp new twitter-agent
cd twitter-agent && wasp start

----------------------------------------

TITLE: Mocking Server Responses in Wasp Tests
DESCRIPTION: Shows how to use the mockServer utility to set up mock responses for queries and APIs in Wasp tests. This is useful for testing components that depend on server data.

LANGUAGE: javascript
CODE:
import { mockServer } from "wasp/client/test";

const { mockQuery, mockApi } = mockServer();

----------------------------------------

TITLE: Importing Username Generation Functions in Wasp
DESCRIPTION: Shows how to import the username generation functions from the Wasp core authentication module. These functions can be used to create unique usernames based on user information or random dictionary phrases.

LANGUAGE: JavaScript
CODE:
import { generateAvailableUsername, generateAvailableDictionaryUsername } from '@wasp/core/auth.js';

----------------------------------------

TITLE: Defining Google and GitHub Migration APIs in Wasp
DESCRIPTION: Defines API endpoints in the main.wasp file for migrating Google and GitHub auth data to the new auth system.

LANGUAGE: wasp
CODE:
api migrateGoogle {
  httpRoute: (GET, "/migrate-google"),
  fn: import { migrateGoogleHandler } from "@src/migrateToNewAuth",
  entities: []
}

api migrateGithub {
  httpRoute: (GET, "/migrate-github"),
  fn: import { migrateGithubHandler } from "@src/migrateToNewAuth",
  entities: []
}

----------------------------------------

TITLE: User Entity Definition in Prisma
DESCRIPTION: Basic User entity schema definition required for email authentication.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Disabling Telemetry Environment Variable
DESCRIPTION: Bash command showing how to disable telemetry by setting the WASP_TELEMETRY_DISABLE environment variable.

LANGUAGE: bash
CODE:
export WASP_TELEMETRY_DISABLE=1

----------------------------------------

TITLE: Setting Google OAuth Environment Variables
DESCRIPTION: This snippet shows how to set the required environment variables for Google OAuth in the .env.server file.

LANGUAGE: bash
CODE:
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

----------------------------------------

TITLE: Implementing Query in JavaScript
DESCRIPTION: Server-side implementation of the getTasks query function that retrieves tasks from the database using Prisma client.

LANGUAGE: javascript
CODE:
export const getTasks = async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Creating a New Wasp Project with Default Template
DESCRIPTION: Shows how to create a new Wasp project using the default template by specifying the project name directly with the 'wasp new' command.

LANGUAGE: bash
CODE:
$ wasp new MyFirstProject
üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Adding Custom Route in Server Setup
DESCRIPTION: Example of adding a custom route using the server setup function, showing both JavaScript and TypeScript implementations.

LANGUAGE: javascript
CODE:
export const mySetupFunction = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

LANGUAGE: typescript
CODE:
import { ServerSetupFn } from 'wasp/server'
import { Application } from 'express'

export const mySetupFunction: ServerSetupFn = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app: Application) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

----------------------------------------

TITLE: Creating a New Wasp Project
DESCRIPTION: This command creates a new Wasp project named TodoApp.

LANGUAGE: sh
CODE:
$ wasp new TodoApp

----------------------------------------

TITLE: JavaScript Project Structure
DESCRIPTION: Directory structure of a newly created Wasp project using JavaScript, showing the main configuration files and source code organization.

LANGUAGE: plaintext
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp          # Your Wasp code goes here.
‚îú‚îÄ‚îÄ schema.prisma      # Your Prisma schema goes here.
‚îú‚îÄ‚îÄ package.json       # Your dependencies and project info go here.
‚îú‚îÄ‚îÄ public             # Your static files (e.g., images, favicon) go here.
‚îú‚îÄ‚îÄ src                # Your source code (TS/JS/CSS/HTML) goes here.
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Setting Up Custom Domain for Fly.io Deployment
DESCRIPTION: Commands to set up a custom domain for a Wasp app deployed on Fly.io. It includes creating certificates and setting environment variables.

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context client certs create mycoolapp.com

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com

----------------------------------------

TITLE: Setting Up Custom Domain for Fly.io Deployment
DESCRIPTION: Commands to set up a custom domain for a Wasp app deployed on Fly.io. It includes creating certificates and setting environment variables.

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context client certs create mycoolapp.com

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com

----------------------------------------

TITLE: Installing Rosetta for Mac M1/M2 Support
DESCRIPTION: Command to install Rosetta on Mac with Apple Silicon (M1/M2) chips to enable running x86 applications

LANGUAGE: bash
CODE:
softwareupdate --install-rosetta

----------------------------------------

TITLE: Installing Rosetta for Mac M1/M2 Support
DESCRIPTION: Command to install Rosetta on Mac with Apple Silicon (M1/M2) chips to enable running x86 applications

LANGUAGE: bash
CODE:
softwareupdate --install-rosetta

----------------------------------------

TITLE: Installing Rosetta for Mac M1/M2 Support
DESCRIPTION: Command to install Rosetta on Mac with Apple Silicon (M1/M2) chips to enable running x86 applications

LANGUAGE: bash
CODE:
softwareupdate --install-rosetta

----------------------------------------

TITLE: Client Environment Variables Configuration
DESCRIPTION: Example of defining client-side environment variables in .env.client file with required REACT_APP_ prefix.

LANGUAGE: shell
CODE:
REACT_APP_SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Running Wasp Studio Server with Data File
DESCRIPTION: This command runs the Wasp Studio server in development mode, specifying a path to a data file. The data file is a required input for the server.

LANGUAGE: bash
CODE:
npm run dev -- -- -d <path_to_data_file>

----------------------------------------

TITLE: Building Wasp Web App with Environment Variable
DESCRIPTION: This command installs dependencies and builds the React app, setting the API URL environment variable. The <url_to_wasp_backend> should be replaced with the actual URL of the deployed Wasp server.

LANGUAGE: bash
CODE:
npm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build

----------------------------------------

TITLE: Customizing GitHub Auth Configuration
DESCRIPTION: This snippet demonstrates how to customize the GitHub authentication configuration by specifying scopes and user signup fields.

LANGUAGE: javascript
CODE:
export const userSignupFields = {
  username: () => "hardcoded-username",
  displayName: (data) => data.profile.name,
};

export function getConfig() {
  return {
    scopes: ['user'],
  };
}

----------------------------------------

TITLE: Configuring Email Authentication in Wasp
DESCRIPTION: Demonstrates how to enable email authentication in the main.wasp file.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Configuring CORS for APIs in Wasp
DESCRIPTION: Demonstrates how to configure CORS for custom API endpoints using an apiNamespace declaration in the Wasp file.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@server/apis.js",
  path: "/foo"
}

----------------------------------------

TITLE: Client Environment Variables Configuration
DESCRIPTION: Example of defining client environment variables in a .env.client file.

LANGUAGE: shell
CODE:
REACT_APP_SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Direct Prisma Client Usage
DESCRIPTION: Shows how to directly interact with entities using Prisma Client in server-side code.

LANGUAGE: typescript
CODE:
import { prisma } from 'wasp/server'

prisma.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

LANGUAGE: javascript
CODE:
import { prisma } from 'wasp/server'

prisma.task.create({
    description: "Read the Entities doc",
    isDone: true // almost :)
})

----------------------------------------

TITLE: Accessing Server Environment Variables in TypeScript
DESCRIPTION: Demonstrates how to import and use server-side environment variables in a TypeScript file using the 'env' object from 'wasp/server'.

LANGUAGE: typescript
CODE:
import { env } from 'wasp/server'

console.log(env.SOME_VAR_NAME)

----------------------------------------

TITLE: Accessing Server Environment Variables in TypeScript
DESCRIPTION: Demonstrates how to import and use server-side environment variables in a TypeScript file using the 'env' object from 'wasp/server'.

LANGUAGE: typescript
CODE:
import { env } from 'wasp/server'

console.log(env.SOME_VAR_NAME)

----------------------------------------

TITLE: Creating Client-Side Authentication Pages
DESCRIPTION: This snippet shows how to create the client-side authentication pages using React components and Tailwind CSS.

LANGUAGE: jsx
CODE:
import { LoginForm } from '@wasp/auth/forms/Login'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Creating a New Wasp Project Interactively
DESCRIPTION: Demonstrates the interactive process of creating a new Wasp project using the 'wasp new' command, including project name input and template selection.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] ai-generated
    ü§ñ Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)
‚ñ∏ 1

üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Deploying Wasp Client to Netlify
DESCRIPTION: Commands to deploy the Wasp client application to Netlify using the Netlify CLI.

LANGUAGE: bash
CODE:
netlify deploy
netlify deploy --prod

----------------------------------------

TITLE: Using the Routes Object for Programmatic Navigation
DESCRIPTION: Demonstrates how to use the routes object to programmatically build type-safe URLs.

LANGUAGE: jsx
CODE:
import { routes } from 'wasp/client/router'

const linkToTask = routes.TaskRoute.build({ params: { id: 1 } })

----------------------------------------

TITLE: Implementing getRecipes Query in TypeScript
DESCRIPTION: Defines the getRecipes function in TypeScript, which retrieves recipes for the authenticated user using Prisma.

LANGUAGE: typescript
CODE:
import { type GetRecipes } from "wasp/server/operations";
import { type Recipe } from "wasp/entities";

export const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {
  return context.entities.Recipe.findMany(
    { where: { user: { id: context.user.id } } }
  );
};

export const addRecipe ...

----------------------------------------

TITLE: Refreshing OAuth Access Token
DESCRIPTION: Example of refreshing the OAuth access token using the refresh token.

LANGUAGE: javascript
CODE:
import { google } from 'wasp/server/auth'

export const onAfterLogin = async ({ oauth }) => {
  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {
    const newTokens = await google.oAuthClient.refreshAccessToken(
      oauth.tokens.refreshToken
    )
    log('new tokens', newTokens)
  }
}

----------------------------------------

TITLE: Error Handling in Queries
DESCRIPTION: Example of how to handle errors in query implementations using HttpError.

LANGUAGE: javascript
CODE:
import HttpError from '@wasp/core/HttpError.js'

export const getAllTasks = async (args, context) => {
  throw new HttpError(
    403, // status code
    "You can't do this!", // message
    { foo: 'bar' } // data
  )
}

----------------------------------------

TITLE: Creating Client-Side Login Page
DESCRIPTION: This snippet shows how to create a client-side login page component using the LoginForm from Wasp's auth module.

LANGUAGE: javascript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Creating a New Wasp Project Interactively
DESCRIPTION: Demonstrates the interactive process of creating a new Wasp project using the 'wasp new' command, including project name input and template selection.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] ai-generated
    ü§ñ Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)
‚ñ∏ 1

üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Implementing onBeforeSignup Hook
DESCRIPTION: Example of implementing the onBeforeSignup hook to perform checks before user signup.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const onBeforeSignup = async ({ providerId, prisma, req }) => {
  const count = await prisma.user.count()
  console.log('number of users before', count)
  console.log('provider name', providerId.providerName)
  console.log('provider user ID', providerId.providerUserId)

  if (count > 100) {
    throw new HttpError(403, 'Too many users')
  }

  if (
    providerId.providerName === 'email' &&
    providerId.providerUserId === 'some@email.com'
  ) {
    throw new HttpError(403, 'This email is not allowed')
  }
}

----------------------------------------

TITLE: API-Specific Middleware Configuration
DESCRIPTION: Example of customizing middleware for a specific API endpoint by replacing the JSON parser with a raw body parser.

LANGUAGE: wasp
CODE:
api webhookCallback {
  fn: import { webhookCallback } from "@src/apis",
  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from "@src/apis",
  httpRoute: (POST, "/webhook/callback"),
  auth: false
}

LANGUAGE: typescript
CODE:
import express from 'express'
import { type WebhookCallback } from 'wasp/server/api'
import { type MiddlewareConfigFn } from 'wasp/server'

export const webhookCallback: WebhookCallback = (req, res, _context) => {
  res.json({ msg: req.body.length })
}

export const webhookCallbackMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')

  middlewareConfig.delete('express.json')
  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))

  return middlewareConfig
}

----------------------------------------

TITLE: Configuring Old Auth in Wasp 0.11.X
DESCRIPTION: This code snippet demonstrates how authentication was configured in Wasp 0.11.X, including the User and SocialLogin entities.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

entity User {=psl
  id                        Int           @id @default(autoincrement())
  username                  String        @unique
  password                  String
  externalAuthAssociations  SocialLogin[]
psl=}


entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

----------------------------------------

TITLE: Opening Wasp Database Studio
DESCRIPTION: This command opens Wasp's database studio in a browser, allowing users to view and edit the data in the database, including the newly created Task entity.

LANGUAGE: sh
CODE:
wasp db studio

----------------------------------------

TITLE: Customizing Auth UI Appearance
DESCRIPTION: This snippet demonstrates how to customize the appearance of auth UI components by defining custom colors.

LANGUAGE: typescript
CODE:
import type { CustomizationOptions } from 'wasp/client/auth'

export const authAppearance: CustomizationOptions['appearance'] = {
  colors: {
    brand: '#5969b8', // blue
    brandAccent: '#de5998', // pink
    submitButtonText: 'white',
  },
}

LANGUAGE: tsx
CODE:
import { LoginForm } from 'wasp/client/auth'
import { authAppearance } from './appearance'

export function LoginPage() {
  return (
    <LoginForm
      // Pass the appearance object to the form
      appearance={authAppearance}
    />
  )
}

----------------------------------------

TITLE: Adding Custom Route in Server Setup Function (TypeScript)
DESCRIPTION: Demonstrates adding a custom route using the server setup function in TypeScript, including type annotations for the setup function and Express application.

LANGUAGE: typescript
CODE:
import { ServerSetupFn, Application } from '@wasp/types'

export const mySetupFunction: ServerSetupFn = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app: Application) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

----------------------------------------

TITLE: Configuring TypeScript Source Settings
DESCRIPTION: Configuration for TypeScript source files in a Wasp project, specifying compiler options and included files.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    ...
  },
  ...,
  "include": ["src"]
}

----------------------------------------

TITLE: Accessing Client Configuration in Wasp
DESCRIPTION: Shows how to import and access the client configuration object which contains apiUrl. This URL can be set via the REACT_APP_API_URL environment variable.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/client'

console.log(config.apiUrl)

----------------------------------------

TITLE: Implementing Custom GitHub Auth Configuration
DESCRIPTION: This code shows how to implement custom user signup fields and additional scopes for GitHub authentication in Wasp.

LANGUAGE: javascript
CODE:
export const userSignupFields = {
  username: () => 'hardcoded-username',
  displayName: (data) => data.profile.name,
}

export function getConfig() {
  return {
    scopes: ['user'],
  }
}

----------------------------------------

TITLE: Creating New Wasp Project
DESCRIPTION: Command to initialize a new Wasp project using the CLI.

LANGUAGE: shell
CODE:
wasp new

----------------------------------------

TITLE: Server Environment Variables Configuration
DESCRIPTION: Example of defining server environment variables in a .env.server file.

LANGUAGE: shell
CODE:
DATABASE_URL=postgresql://localhost:5432
SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Configuring Email Authentication in Wasp
DESCRIPTION: Basic configuration for enabling email authentication in a Wasp application's main configuration file.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Complete Wasp App Configuration Structure
DESCRIPTION: This snippet outlines the full structure of an 'app' declaration in Wasp, including all possible configuration fields such as auth, client, server, db, emailSender, and webSocket.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ],
  auth: {
    // ...
  },
  client: {
    // ...
  },
  server: {
    // ...
  },
  db: {
    // ...
  },
  emailSender: {
    // ...
  },
  webSocket: {
    // ...
  }
}

----------------------------------------

TITLE: Complete Wasp App Configuration Structure
DESCRIPTION: This snippet outlines the full structure of an 'app' declaration in Wasp, including all possible configuration fields such as auth, client, server, db, emailSender, and webSocket.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ],
  auth: {
    // ...
  },
  client: {
    // ...
  },
  server: {
    // ...
  },
  db: {
    // ...
  },
  emailSender: {
    // ...
  },
  webSocket: {
    // ...
  }
}

----------------------------------------

TITLE: Defining User Entity for Email Authentication
DESCRIPTION: Definition of the User entity with required fields for email authentication, including email, password, and verification status.

LANGUAGE: wasp
CODE:
entity User {=psl
    id                        Int           @id @default(autoincrement())
    email                     String?       @unique
    password                  String?
    isEmailVerified           Boolean       @default(false)
    emailVerificationSentAt   DateTime?
    passwordResetSentAt       DateTime?
    // Add your own fields below
    // ...
psl=}

----------------------------------------

TITLE: Error Handling in Actions
DESCRIPTION: Example of throwing custom HTTP errors in Action implementations for better error handling.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (args, context) => {
  throw new HttpError(
    403,
    "You can't do this!",
    { foo: 'bar' }
  )
}

----------------------------------------

TITLE: Server Queries Implementation
DESCRIPTION: Implementation of server-side queries to fetch excuses from API and database

LANGUAGE: javascript
CODE:
import axios from 'axios';

export const getExcuse = async () => {
  const response = await axios.get('https://api.devexcus.es/')
  return response.data
}

export const getAllSavedExcuses = async (_args, context) => {
  return context.entities.Excuse.findMany()
}

----------------------------------------

TITLE: Custom Task Creation Implementation
DESCRIPTION: Server-side implementation of the custom create operation for Tasks, showing how to connect a task to a user.

LANGUAGE: typescript
CODE:
import type { CreateAction } from '@wasp/crud/Tasks'
import type { Task } from '@wasp/entities'
import HttpError from '@wasp/core/HttpError.js'

type CreateTaskInput = { description: string; isDone: boolean }

export const createTask: CreateAction<CreateTaskInput, Task> = async (
  args,
  context
) => {
  if (!context.user) {
    throw new HttpError(401, 'User not authenticated.')
  }

  const { description, isDone } = args
  const { Task } = context.entities

  return await Task.create({
    data: {
      description,
      isDone,
      user: {
        connect: {
          id: context.user.id,
        },
      },
    },
  })
}

----------------------------------------

TITLE: Customizing Base Path in Vite Config (JavaScript)
DESCRIPTION: This snippet demonstrates how to customize the base path for serving the client application, setting it to '/my-app/' in the Vite configuration.

LANGUAGE: javascript
CODE:
export default {
  base: '/my-app/',
}

----------------------------------------

TITLE: Implementing updateTask Action in JavaScript
DESCRIPTION: Implements the updateTask Action on the server, updating a Task entity's isDone status.

LANGUAGE: javascript
CODE:
export const updateTask = async ({ id, isDone }, context) => {
  return context.entities.Task.update({
    where: { id },
    data: {
      isDone: isDone,
    },
  })
}

----------------------------------------

TITLE: Custom Signup Action in Wasp
DESCRIPTION: This snippet demonstrates how to create a custom signup action in Wasp, allowing for more control over the signup process.

LANGUAGE: wasp
CODE:
action signupUser {
  fn: import { signUp } from "@server/auth/signup.js",
  entities: [User]
}

LANGUAGE: javascript
CODE:
export const signUp = async (args, context) => {
  // Your custom code before sign-up.
  // ...

  const newUser = context.entities.User.create({
    data: {
      username: args.username,
      password: args.password // password hashed automatically by Wasp! üêù
    }
  })

  // Your custom code after sign-up.
  // ...
  return newUser
}

----------------------------------------

TITLE: Final Wasp Configuration After Cleanup
DESCRIPTION: This snippet presents the cleaned-up Wasp configuration file, showing the app declaration, root route, and main page definition after removing unnecessary components.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "TodoApp"
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Declaring a Query in Wasp Configuration
DESCRIPTION: Defining a query in the Wasp configuration file to fetch all phrases.

LANGUAGE: wasp
CODE:
app phraseTutor {
  ...
}
...

query fetchAllPhrases {
  fn: import { getAllPhrases } from "@server/queries.js",
  entities: [Phrase]
}

----------------------------------------

TITLE: Auth UI Implementation in React
DESCRIPTION: React component implementation for the login page using Wasp's authentication UI components.

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Setting Up Custom Domain for Fly.io App
DESCRIPTION: Commands to set up a custom domain for a Wasp app deployed on Fly.io. This includes creating certificates and setting environment variables.

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context client certs create mycoolapp.com

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com

----------------------------------------

TITLE: Using Actions in React Components
DESCRIPTION: Example of using Actions within React components on the client side.

LANGUAGE: typescript
CODE:
import { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'

export const TaskPage = ({ id }) => {
  const { data: task } = useQuery(getTask, { id })

  if (!task) {
    return <h1>"Loading"</h1>
  }

  return (
    <div>
      <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>
    </div>
  )
}

----------------------------------------

TITLE: Uninstalling Wasp
DESCRIPTION: Demonstrates the process of uninstalling Wasp using the 'wasp uninstall' command, showing the directories and files that will be removed and requiring user confirmation.

LANGUAGE: bash
CODE:
$ wasp uninstall

üêù --- Uninstalling Wasp ... ------------------------------------------------------

 We will remove the following directories:
   {home}/.local/share/wasp-lang/
   {home}/.cache/wasp/

 We will also remove the following files:
   {home}/.local/bin/wasp

 Are you sure you want to continue? [y/N]
 y

 ‚úÖ --- Uninstalled Wasp -----------------------------------------------------------

----------------------------------------

TITLE: OAuth Config Function - Before Migration
DESCRIPTION: Shows the previous format of the OAuth provider configuration function including client ID, secret, and scope.

LANGUAGE: typescript
CODE:
export function getConfig() {
    return {
        clientID: process.env.GOOGLE_CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        scope: ['profile', 'email'],
    }
}

----------------------------------------

TITLE: Implementing Wasp TypeScript Configuration
DESCRIPTION: A reference implementation of the main.wasp.ts file, showcasing how to configure a Wasp application using TypeScript.

LANGUAGE: typescript
CODE:
import { App } from 'wasp-config'

const app = new App('todoApp', {
  title: 'ToDo App',
  wasp: { version: '{latestWaspVersion}' },
  // head: []
});

app.webSocket({
  fn: { import: 'webSocketFn', from: '@src/webSocket' },
  // autoConnect: false
});

app.auth({
  userEntity: 'User',
  methods: {
    discord: {
      configFn: { import: 'config', from: '@src/auth/discord' },
      userSignupFields: { import: 'userSignupFields', from: '@src/auth/discord' }
    },
    google: {
      configFn: { import: 'config', from: '@src/auth/google' },
      userSignupFields: { import: 'userSignupFields', from: '@src/auth/google' }
    },
    gitHub: {
      configFn: { import: 'config', from: '@src/auth/github.js' },
      userSignupFields: { import: 'userSignupFields', from: '@src/auth/github.js' }
    },
    // keycloak: {},
    // email: {
    //   userSignupFields: { import: 'userSignupFields', from: '@src/auth/email' },
    //   fromField: {
    //     name: 'ToDO App',
    //     email: 'mihovil@ilakovac.com'
    //   },
    //   emailVerification: {
    //     getEmailContentFn: { import: 'getVerificationEmailContent', from: '@src/auth/email' },
    //     clientRoute: 'EmailVerificationRoute',
    //   },
    //   passwordReset: {
    //     getEmailContentFn: { import: 'getPasswordResetEmailContent', from: '@src/auth/email' },
    //     clientRoute: 'PasswordResetRoute'
    //   }
    // },
  },
  onAuthFailedRedirectTo: '/login',
  onAuthSucceededRedirectTo: '/profile',
  onBeforeSignup: { import: 'onBeforeSignup', from: '@src/auth/hooks.js' },
  onAfterSignup: { import: 'onAfterSignup', from: '@src/auth/hooks.js' },
  onBeforeOAuthRedirect: { import: 'onBeforeOAuthRedirect', from: '@src/auth/hooks.js' },
  onBeforeLogin: { import: 'onBeforeLogin', from: '@src/auth/hooks.js' },
  onAfterLogin: { import: 'onAfterLogin', from: '@src/auth/hooks.js' }
});

app.server({
  setupFn: { importDefault: 'setup', from: '@src/serverSetup' },
  middlewareConfigFn: { import: 'serverMiddlewareFn', from: '@src/serverSetup' },
});

app.client({
  rootComponent: { import: 'App', from: '@src/App' },
  setupFn: { importDefault: 'setup', from: '@src/clientSetup' }
});

app.db({
  seeds: [
    { import: 'devSeedSimple', from: '@src/dbSeeds' },
  ]
});

app.emailSender({
  provider: 'SMTP',
  defaultFrom: { email: 'test@test.com' }
});

const loginPage = app.page('LoginPage', {
  component: { importDefault: 'Login', from: '@src/pages/auth/Login' }
});
app.route('LoginRoute', { path: '/login', to: loginPage });

app.query('getTasks', {
  fn: { import: 'getTasks', from: '@src/queries' },
  entities: ['Task']
});

app.action('createTask', {
  fn: { import: 'createTask', from: '@src/actions' },
  entities: ['Task']
});

app.apiNamespace('bar', {
  middlewareConfigFn: { import: 'barNamespaceMiddlewareFn', from: '@src/apis' },
  path: '/bar'
});

app.api('barBaz', {
  fn: { import: 'barBaz', from: '@src/apis' },
  auth: false,
  entities: ['Task'],
  httpRoute: {
    method: 'GET',
    route: '/bar/baz',
  },
});

app.job('mySpecialJob', {
  executor: 'PgBoss',
  perform: {
    fn: { import: 'foo', from: '@src/jobs/bar' },
    executorOptions: {
      pgBoss: { retryLimit: 1 }
    }
  },
  entities: ['Task']
});

export default app;

----------------------------------------

TITLE: Configuring Environment Variable Schemas in Wasp
DESCRIPTION: Shows how to configure the client and server environment variable validation schemas in the main Wasp file.

LANGUAGE: wasp
CODE:
app myApp {
  ...
  client: {
    envValidationSchema: import { clientEnvValidationSchema } from "@src/env"
  },
  server: {
    envValidationSchema: import { serverEnvValidationSchema } from "@src/env"
  }
}

----------------------------------------

TITLE: Backend Permission Check in API Handler
DESCRIPTION: Example showing how to implement permission checks in a backend API endpoint, including both authentication and resource ownership verification.

LANGUAGE: javascript
CODE:
app.delete('/articles/:id', (req, res) => {
  if (!req.user) {
    return res.status(401).json({ error: 'Not authenticated' });
  }

  const article = await prisma.article.findFirst({
    where: { id: req.params.id, userId: req.user.id }
  });

  if (!article) {
    return res.status(403).json({ error: 'Not authorized' });
  }

  await prisma.article.delete({ where: { id: req.params.id } });
});

----------------------------------------

TITLE: Viewing Generated Dockerfile Command - Wasp CLI
DESCRIPTION: Command to display the current project's Dockerfile configuration, including any custom modifications merged with Wasp's default multi-stage Dockerfile.

LANGUAGE: shell
CODE:
wasp dockerfile

----------------------------------------

TITLE: User Entity Definition in Prisma
DESCRIPTION: Prisma schema definition for the User entity required by Keycloak authentication.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Defining a Task Entity in Wasp
DESCRIPTION: Example of defining a Task entity in a Wasp application using Prisma schema syntax.

LANGUAGE: wasp
CODE:
entity Task {=psl
  id          Int @id @default(autoincrement())
  description String
  isDone      Boolean
psl=}

----------------------------------------

TITLE: Defining a Task Entity in Wasp
DESCRIPTION: Example of defining a Task entity in a Wasp application using Prisma schema syntax.

LANGUAGE: wasp
CODE:
entity Task {=psl
  id          Int @id @default(autoincrement())
  description String
  isDone      Boolean
psl=}

----------------------------------------

TITLE: Creating a Wasp Project with Vector Similarity Search Template
DESCRIPTION: This command creates a new Wasp project using the Vector Similarity Search template. The template includes features for embeddings, vector similarity search, OpenAI Embeddings API, Vector DB (Pinecone), Tailwind, and Fullstack Type Safety.

LANGUAGE: bash
CODE:
wasp new <project-name> -t embeddings

----------------------------------------

TITLE: Accessing Client Environment Variables in JavaScript
DESCRIPTION: Demonstrates how to read client-side environment variables (prefixed with REACT_APP_) in a JavaScript file.

LANGUAGE: javascript
CODE:
console.log(import.meta.env.REACT_APP_SOME_VAR_NAME)

----------------------------------------

TITLE: Configuring Git Credentials
DESCRIPTION: Commands to set up shared Git credentials between Windows and WSL

LANGUAGE: bash
CODE:
git config --global credential.helper wincred
git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/bin/git-credential-manager.exe"

----------------------------------------

TITLE: Server Environment Configuration
DESCRIPTION: Environment variables setup for GitHub OAuth credentials.

LANGUAGE: bash
CODE:
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

----------------------------------------

TITLE: Defining Customer Schema in Prisma
DESCRIPTION: Prisma schema definition for a Customer model with basic fields including name, email, date of birth, and premium status.

LANGUAGE: sql
CODE:
model Customer {
  id    Int    @id @default(autoincrement())
  name  String
  surname String
  email String
  dateOfBirth DateTime
  premiumUser Boolean
}

----------------------------------------

TITLE: Configuring Client in Wasp (JavaScript)
DESCRIPTION: Demonstrates how to configure the client in a Wasp application using JavaScript, including setting the root component and setup function.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    rootComponent: import Root from "@src/Root.jsx",
    setupFn: import mySetupFunction from "@src/myClientSetupCode.js"
  }
}

----------------------------------------

TITLE: Configuring Client in Wasp (JavaScript)
DESCRIPTION: Demonstrates how to configure the client in a Wasp application using JavaScript, including setting the root component and setup function.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    rootComponent: import Root from "@src/Root.jsx",
    setupFn: import mySetupFunction from "@src/myClientSetupCode.js"
  }
}

----------------------------------------

TITLE: Using Social Login UI Helpers in React
DESCRIPTION: This React component demonstrates the use of Wasp's social login UI helpers, including sign-in buttons and URLs.

LANGUAGE: jsx
CODE:
import {
  GoogleSignInButton,
  googleSignInUrl,
  GitHubSignInButton,
  gitHubSignInUrl,
} from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <>
      <GoogleSignInButton />
      <GitHubSignInButton />
      {/* or */}
      <a href={googleSignInUrl}>Sign in with Google</a>
      <a href={gitHubSignInUrl}>Sign in with GitHub</a>
    </>
  )
}

----------------------------------------

TITLE: Building Web Client for Deployment
DESCRIPTION: Commands to build the web client for deployment, including setting the API URL environment variable.

LANGUAGE: bash
CODE:
cd .wasp/build/web-app
RESPONSIVE_LAYOUT=<true_or_false> REACT_APP_API_URL=<url_to_wasp_backend> npm run build

----------------------------------------

TITLE: Wasp Entity Usage Example
DESCRIPTION: Demonstrates how to use Prisma models as Wasp entities in queries, jobs, and APIs.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
}

...

query getTasks {
  fn: import { getTasks } from "@src/queries",
  // highlight-next-line
  entities: [Task]
}

job myJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  // highlight-next-line
  entities: [Task],
}

api fooBar {
  fn: import { fooBar } from "@src/apis",
  // highlight-next-line
  entities: [Task],
  httpRoute: (GET, "/foo/bar/:email")
}

----------------------------------------

TITLE: Changing App Title in Wasp
DESCRIPTION: This snippet shows how to change the title of a Wasp app, which appears in the browser tab next to the favicon.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "BookFace"
}

----------------------------------------

TITLE: Implementing End-to-End Tests with Playwright in TypeScript
DESCRIPTION: Example of an end-to-end test using Playwright to simulate user login and task creation. The test demonstrates basic user flow including authentication and UI interaction verification.

LANGUAGE: typescript
CODE:
import { expect, test } from '@playwright/test'
import { generateRandomUser, logUserIn } from './utils'

const user = generateRandomUser()

test.describe('basic user flow test', () => {
  test('log in and add task', async ({ page }) => {
    await logUserIn({ page, user })
    await expect(page).toHaveURL('/')
    await expect(page.locator('body')).toContainText('No tasks yet.')

    // Add a task
    await page.fill('input[name="description"]', 'First task')
    await page.click('input:has-text("Create task")')
    await expect(page.locator('body')).toContainText('First task')
  })
})

----------------------------------------

TITLE: Setting Up Email Sender in Wasp File
DESCRIPTION: This code demonstrates how to configure the email sender in the main.wasp file using the Dummy provider for development purposes.

LANGUAGE: wasp
CODE:
app myApp {
  // ...
  emailSender: {
    provider: Dummy,
  }
}

----------------------------------------

TITLE: Combining Custom Appearance and Logo in Auth UI
DESCRIPTION: Demonstrates how to combine custom appearance settings and a logo in the LoginForm component.

LANGUAGE: javascript
CODE:
export const appearance = {
  colors: {
    brand: '#5969b8', // blue
    brandAccent: '#de5998', // pink
    submitButtonText: 'white',
  },
}

LANGUAGE: jsx
CODE:
import { LoginForm } from 'wasp/client/auth'

import { authAppearance } from './appearance'
import todoLogo from './todoLogo.png'

export function LoginPage() {
  return <LoginForm appearance={appearance} logo={todoLogo} />
}

----------------------------------------

TITLE: Setting Server URL Environment Variable in Wasp
DESCRIPTION: Demonstrates how to set the new required WASP_SERVER_URL environment variable for OAuth functionality.

LANGUAGE: bash
CODE:
WASP_SERVER_URL=https://your-wasp-server-url.com

----------------------------------------

TITLE: Defining User Signup Fields in TypeScript for Wasp
DESCRIPTION: This snippet demonstrates how to define additional user signup fields (address and phone) in TypeScript for a Wasp project. It includes field validation for the address and handles an optional phone field.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: (data) => {
    if (!data.address) {
      throw new Error('Address is required')
    }
    return data.address
  }
  phone: (data) => data.phone,
})

----------------------------------------

TITLE: Testing React Components with Mocked APIs in JavaScript
DESCRIPTION: Demonstrates how to test React components that use API calls, including mocking the API responses and rendering the component in context.

LANGUAGE: javascript
CODE:
import { api } from "wasp/client/api";

const Todo = (_props) => {
  const [tasks, setTasks] = useState([]);
  useEffect(() => {
    api
      .get("/tasks")
      .then((res) => res.json())
      .then((tasks) => setTasks(tasks))
      .catch((err) => window.alert(err));
  });

  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import Todo from "./Todo";

const { mockApi } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockApi("/tasks", { res: mockTasks });

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: CRUD Operations Definition in Wasp
DESCRIPTION: Declaration of CRUD operations for Tasks entity, enabling getAll, get, create and update operations with custom implementation for create

LANGUAGE: wasp
CODE:
crud Tasks {
  entity: Task,
  operations: {
    getAll: {
      isPublic: true,
    },
    get: {},
    create: {
      overrideFn: import { createTask } from "@src/tasks.js",
    },
    update: {},
  },
}

----------------------------------------

TITLE: Implementing an API in NodeJS (JavaScript)
DESCRIPTION: This code demonstrates how to implement the API function in JavaScript, handling the request, response, and context objects.

LANGUAGE: javascript
CODE:
export const fooBar = (req, res, context) => {
  res.set("Access-Control-Allow-Origin", "*");
  res.json({ msg: `Hello, ${context.user ? "registered user" : "stranger"}!` });
};

----------------------------------------

TITLE: Configuring Keycloak Auth in Wasp
DESCRIPTION: Basic Wasp configuration for enabling Keycloak authentication with User entity specification and redirect settings.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      keycloak: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Implementing WebSocket Server with Wasp
DESCRIPTION: Configures a WebSocket server using the Wasp framework, defining event types and handling connection logic.

LANGUAGE: typescript
CODE:
import { getUsername } from 'wasp/auth';
import { type WebSocketDefinition } from 'wasp/server/webSocket';

type PollState = {
  question: string;
  options: {
    id: number;
    text: string;
    description: string;
    votes: string[];
  }[];
};

interface ServerToClientEvents {
  updateState: (state: PollState) => void;
}
interface ClientToServerEvents {
  vote: (optionId: number) => void;
  askForStateUpdate: () => void;
}
interface InterServerEvents {}

export const webSocketFn: WebSocketDefinition<ClientToServerEvents, ServerToClientEvents, InterServerEvents> = (
  io,
  _context
) => {
  const poll: PollState = {
    question: "What are eating for lunch ‚ú® Let's order",
    options: [
      {
        id: 1,
        text: 'Party Pizza Place',
        description: 'Best pizza in town',
        votes: [],
      },
      {
        id: 2,
        text: 'Best Burger Joint',
        description: 'Best burger in town',
        votes: [],
      },
      {
        id: 3,
        text: 'Sus Sushi Place',
        description: 'Best sushi in town',
        votes: [],
      },
    ],
  };
  io.on('connection', (socket) => {
    // ... (connection handling logic)
  });
};

----------------------------------------

TITLE: Full API Declaration in Wasp
DESCRIPTION: Provides a complete example of an API declaration in Wasp, including all available options such as authentication and middleware configuration.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@server/apis.js",
  httpRoute: (GET, "/foo/bar"),
  entities: [Task],
  auth: true,
  middlewareConfigFn: import { apiMiddleware } from "@server/apis.js"
}

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Example of declaring getAllTasks and getFilteredTasks queries in a Wasp file

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@src/queries.js"
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@src/queries.js"
}

----------------------------------------

TITLE: Customizing Auth UI Appearance
DESCRIPTION: Example of customizing the authentication UI components' appearance using Stitches theme tokens.

LANGUAGE: typescript
CODE:
import type { CustomizationOptions } from '@wasp/auth/forms/types'

export const authAppearance: CustomizationOptions['appearance'] = {
  colors: {
    brand: '#5969b8',
    brandAccent: '#de5998',
    submitButtonText: 'white',
  },
}

LANGUAGE: typescript
CODE:
import { LoginForm } from '@wasp/auth/forms/Login'
import { authAppearance } from './appearance'
import Logo from './logo.png'

export function LoginPage() {
  return <LoginForm appearance={authAppearance} logo={Logo} />
}

----------------------------------------

TITLE: Adding Email/Password Authentication in Wasp
DESCRIPTION: Wasp configuration for enabling email/password authentication with additional features.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      gitHub: {},
      email: {
        fromField: {
          name: "My App Postman",
          email: "hello@itsme.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
        emailSender: {
          provider: Dummy,
        },
      },
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: Creates the basic User entity structure in Prisma schema.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Testing a React Component with Mocked API in Wasp (JavaScript)
DESCRIPTION: Shows how to test a React component that makes API calls, mocking the API response and rendering the component in context.

LANGUAGE: jsx
CODE:
import { api } from "wasp/client/api";

const Todo = (_props) => {
  const [tasks, setTasks] = useState([]);
  useEffect(() => {
    api
      .get("/tasks")
      .then((res) => res.json())
      .then((tasks) => setTasks(tasks))
      .catch((err) => window.alert(err));
  });

  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: jsx
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import Todo from "./Todo";

const { mockApi } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockApi("/tasks", { res: mockTasks });

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Defining Client Environment Variables in .env File
DESCRIPTION: Example of defining client-side environment variables in a .env.client file for a Wasp project during development. Note the REACT_APP_ prefix.

LANGUAGE: shell
CODE:
REACT_APP_SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Using routes Object for Navigation
DESCRIPTION: Example of using the routes object to programmatically build typed URLs.

LANGUAGE: jsx
CODE:
import { routes } from 'wasp/client/router'

const linkToTask = routes.TaskRoute.build({ params: { id: 1 } })

----------------------------------------

TITLE: Global Middleware Customization
DESCRIPTION: Example of customizing global middleware by modifying CORS settings to allow additional domains.

LANGUAGE: wasp
CODE:
app todoApp {
  // ...

  server: {
    middlewareConfigFn: import { serverMiddlewareFn } from "@src/serverSetup"
  },
}

LANGUAGE: typescript
CODE:
import cors from 'cors'
import { config, type MiddlewareConfigFn } from 'wasp/server'

export const serverMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  // Example of adding an extra domains to CORS.
  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))
  return middlewareConfig
}

----------------------------------------

TITLE: Defining Entities in Wasp using Prisma Schema Language
DESCRIPTION: Defines the core data models (User, List, Card) using Prisma Schema Language within Wasp. Establishes relationships between entities and their properties.

LANGUAGE: javascript
CODE:
entity User {=psl
    id          Int     @id @default(autoincrement())
    username    String  @unique
    password    String
    lists       List[]
    cards       Card[]
psl=}

entity List {=psl
    id          Int     @id @default(autoincrement())
    name        String
    pos         Float
    user        User    @relation(fields: [userId], references: [id])
    userId      Int
    cards       Card[]
psl=}

entity Card {=psl
    id          Int     @id @default(autoincrement())
    title       String
    pos         Float
    list        List    @relation(fields: [listId], references: [id])
    listId      Int
    author      User    @relation(fields: [authorId], references: [id])
    authorId    Int
psl=}

----------------------------------------

TITLE: Defining Default Global Middleware in TypeScript
DESCRIPTION: This snippet demonstrates the default global middleware configuration in Wasp for TypeScript applications. It includes type definitions and the same middleware setup as the JavaScript version.

LANGUAGE: typescript
CODE:
export type MiddlewareConfig = Map<string, express.RequestHandler>

export type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig

const defaultGlobalMiddleware: MiddlewareConfig = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

----------------------------------------

TITLE: Enabling Google Auth in Wasp File
DESCRIPTION: This snippet shows how to configure the auth object in the main.wasp file to enable Google authentication.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Updating tsconfig.src.json for Wasp TS Config
DESCRIPTION: Rename tsconfig.json to tsconfig.src.json and add an 'include' entry to specify the source directory.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    ...
  },
  ...
  "include": ["src"]
}

----------------------------------------

TITLE: Type-Safe Server Action Configuration
DESCRIPTION: Example of setting up type-safe server actions in Wasp with TypeScript support.

LANGUAGE: tsx
CODE:
action getResponse {
  fn: import { getResponse } from "@server/actions.js",
  entities: [Response]
}

LANGUAGE: tsx
CODE:
type RespArgs = {
  hours: string;
};

const getResponse: GetResponse<RespArgs, string> = async ({ hours }) => { }

----------------------------------------

TITLE: Adding Custom Logo to Auth UI
DESCRIPTION: This snippet shows how to add a custom logo to auth UI components.

LANGUAGE: tsx
CODE:
import { LoginForm } from 'wasp/client/auth'
import Logo from './logo.png'

export function LoginPage() {
  return (
    <LoginForm
      // Pass in the path to your logo
      logo={Logo}
    />
  )
}

----------------------------------------

TITLE: Using API from Client (JavaScript)
DESCRIPTION: Illustrates how to use a custom API endpoint from the client-side JavaScript code using the Axios wrapper provided by Wasp.

LANGUAGE: javascript
CODE:
import React, { useEffect } from "react";
import api from "@wasp/api";

async function fetchCustomRoute() {
  const res = await api.get("/foo/bar");
  console.log(res.data);
}

export const Foo = () => {
  useEffect(() => {
    fetchCustomRoute();
  }, []);

  return <>// ...</>;
};

----------------------------------------

TITLE: Migrating Database Schema in Wasp
DESCRIPTION: This command updates the database schema to include the newly defined Task entity. It creates a new database migration and applies it.

LANGUAGE: shell
CODE:
wasp db migrate-dev

----------------------------------------

TITLE: Updating TypeScript Configuration
DESCRIPTION: Required changes to tsconfig.json for compatibility with Wasp's TypeScript project references.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "outDir": ".wasp/out/user"
  },
  "include": [
    "src"
  ]
}

----------------------------------------

TITLE: Routes Object Type Definition
DESCRIPTION: TypeScript type definition showing the structure and options available for the routes object

LANGUAGE: ts
CODE:
export const routes = {
  // RootRoute has a path like "/"
  RootRoute: {
    build: (options?: {
      search?: string[][] | Record<string, string> | string | URLSearchParams
      hash?: string
    }) => // ...
  },

  // DetailRoute has a path like "/task/:id/:something?"
  DetailRoute: {
    build: (
      options: {
        params: { id: ParamValue; something?: ParamValue; },
        search?: string[][] | Record<string, string> | string | URLSearchParams
        hash?: string
      }
    ) => // ...
  }
}

----------------------------------------

TITLE: Creating a React Todo Component in JavaScript
DESCRIPTION: Defines a React component that fetches and displays a list of tasks using Wasp's useQuery hook.

LANGUAGE: jsx
CODE:
import { useQuery, getTasks } from "wasp/client/operations";

const Todo = (_props) => {
  const { data: tasks } = useQuery(getTasks);
  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

----------------------------------------

TITLE: Implementing Job Worker Function
DESCRIPTION: Demonstrates how to implement the worker function that executes the job's tasks, including TypeScript type definitions.

LANGUAGE: typescript
CODE:
import { type MySpecialJob } from 'wasp/server/jobs'
import { type Task } from 'wasp/entities'

type Input = { name: string; }
type Output = { tasks: Task[]; }

export const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {
  console.log(`Hello ${name}!`)
  const tasks = await context.entities.Task.findMany({})
  return { tasks }
}

----------------------------------------

TITLE: Adding Required React Dependencies
DESCRIPTION: Shows the necessary React-related dependencies that need to be added to the package.json file during migration.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.26.2"
  }
}

----------------------------------------

TITLE: Accessing Google Auth User Data in TypeScript
DESCRIPTION: Example showing the structure of AuthUser object when user signs up with Google auth method

LANGUAGE: typescript
CODE:
const user = {
  id: 'cluqs9qyh00007cn73apj4hp7',
  address: 'Some address',
  identities: {
    email: null,
    google: {
      id: '1117XXXX1301972049448',
    },
  },
}

----------------------------------------

TITLE: Custom Signup Action in Wasp
DESCRIPTION: Example of creating a custom signup action in a Wasp application, demonstrating how to use Auth and AuthIdentity entities.

LANGUAGE: typescript
CODE:
import {
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'
import type { CustomSignup } from 'wasp/server/operations'

type CustomSignupInput = {
  username: string
  password: string
}
type CustomSignupOutput = {
  success: boolean
  message: string
}

export const signup: CustomSignup<
  CustomSignupInput,
  CustomSignupOutput
> = async (args, { entities: { User } }) => {
  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData<'username'>({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      {}
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: Configuring PostCSS for Tailwind in JavaScript
DESCRIPTION: This JavaScript snippet configures PostCSS to use Tailwind CSS and Autoprefixer in a Wasp project.

LANGUAGE: js
CODE:
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----------------------------------------

TITLE: Customizing SignupForm Component
DESCRIPTION: Shows how to customize the SignupForm component by adding additional fields.

LANGUAGE: javascript
CODE:
import {
  SignupForm,
  FormError,
  FormInput,
  FormItemGroup,
  FormLabel,
} from 'wasp/client/auth'

export const SignupPage = () => {
  return (
    <SignupForm
      additionalFields={[
        {
          name: 'address',
          label: 'Address',
          type: 'input',
          validations: {
            required: 'Address is required',
          },
        },
        (form, state) => {
          return (
            <FormItemGroup>
              <FormLabel>Phone Number</FormLabel>
              <FormInput
                {...form.register('phoneNumber', {
                  required: 'Phone number is required',
                })}
                disabled={state.isLoading}
              />
              {form.formState.errors.phoneNumber && (
                <FormError>
                  {form.formState.errors.phoneNumber.message}
                </FormError>
              )}
            </FormItemGroup>
          )
        },
      ]}
    />
  )
}

----------------------------------------

TITLE: Running Wasp Migration Script
DESCRIPTION: This bash command runs the Wasp migration script to upgrade a project named 'foo' to the new structure.

LANGUAGE: bash
CODE:
npx wasp-migrate foo

----------------------------------------

TITLE: Creating a Wasp Project
DESCRIPTION: Commands to set up a new Wasp project.

LANGUAGE: bash
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh
wasp new my-wasp-app
cd my-wasp-app

----------------------------------------

TITLE: Using Entities in APIs (JavaScript Implementation)
DESCRIPTION: Demonstrates how to use Entities in the JavaScript implementation of a custom API endpoint.

LANGUAGE: javascript
CODE:
export const fooBar = (req, res, context) => {
  res.json({ count: await context.entities.Task.count() });
};

----------------------------------------

TITLE: Checking User Signup Status in React Component
DESCRIPTION: Demonstrates how to use the useAuth hook to check if a user has completed signup and redirect if necessary.

LANGUAGE: jsx
CODE:
import { useAuth } from 'wasp/client/auth'
import { Redirect } from 'react-router-dom'

export function HomePage() {
  const { data: user } = useAuth()

  if (user.isSignupComplete === false) {
    return <Redirect to="/edit-user-details" />
  }

  // ...
}

----------------------------------------

TITLE: Using Queries with useQuery Hook
DESCRIPTION: Example of using queries with the useQuery hook in a React component.

LANGUAGE: jsx
CODE:
import React from 'react'
import { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'

const MainPage = () => {
  const { data: allTasks, error: error1 } = useQuery(getAllTasks)
  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {
    isDone: true,
  })

  if (error1 !== null || error2 !== null) {
    return <div>There was an error</div>
  }

  return (
    <div>
      <h2>All Tasks</h2>
      {allTasks && allTasks.length > 0
        ? allTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No tasks'}

      <h2>Finished Tasks</h2>
      {doneTasks && doneTasks.length > 0
        ? doneTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No finished tasks'}
    </div>
  )
}

----------------------------------------

TITLE: Using Queries with useQuery Hook
DESCRIPTION: Example of using queries with the useQuery hook in a React component.

LANGUAGE: jsx
CODE:
import React from 'react'
import { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'

const MainPage = () => {
  const { data: allTasks, error: error1 } = useQuery(getAllTasks)
  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {
    isDone: true,
  })

  if (error1 !== null || error2 !== null) {
    return <div>There was an error</div>
  }

  return (
    <div>
      <h2>All Tasks</h2>
      {allTasks && allTasks.length > 0
        ? allTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No tasks'}

      <h2>Finished Tasks</h2>
      {doneTasks && doneTasks.length > 0
        ? doneTasks.map((task) => <Task key={task.id} {...task} />)
        : 'No finished tasks'}
    </div>
  )
}

----------------------------------------

TITLE: Setting Server Environment Variables for Fly.io Deployment
DESCRIPTION: Example of how to set server-side environment variables when deploying a Wasp project to Fly.io using the flyctl CLI tool.

LANGUAGE: shell
CODE:
flyctl secrets set SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Creating a React Todo Component with API Call in TypeScript
DESCRIPTION: Defines a React component that fetches tasks using Wasp's api utility and displays them, with TypeScript types.

LANGUAGE: tsx
CODE:
import { type Task } from "wasp/entities";
import { api } from "wasp/client/api";

const Todo = (_props: {}) => {
  const [tasks, setTasks] = useState<Task>([]);
  useEffect(() => {
    api
      .get("/tasks")
      .then((res) => res.json() as Task[])
      .then((tasks) => setTasks(tasks))
      .catch((err) => window.alert(err));
  });

  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

----------------------------------------

TITLE: Enabling Username Authentication in Wasp Configuration
DESCRIPTION: This snippet shows how to enable username and password authentication in the main Wasp configuration file. It includes setting up the user entity and specifying the authentication method.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Defining User and SocialLogin Entities in Wasp
DESCRIPTION: This snippet defines the User and SocialLogin entities in Wasp's schema language. It sets up the necessary fields for storing user information and external authentication associations.

LANGUAGE: sql
CODE:
entity User {=psl
    id                        Int           @id @default(autoincrement())
    username                  String        @unique
    password                  String
    externalAuthAssociations  SocialLogin[]
psl=}

entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

----------------------------------------

TITLE: Adding Custom Logo to Wasp Auth UI
DESCRIPTION: This snippet shows how to add a custom logo to the Auth UI components by passing the logo prop to the LoginForm component.

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'
import Logo from './logo.png'

export function LoginPage() {
  return (
    <LoginForm
      // Pass in the path to your logo
      logo={Logo}
    />
  )
}

----------------------------------------

TITLE: Client-side API Usage in React
DESCRIPTION: Shows how to consume the API endpoint from a React component using Wasp's API client wrapper.

LANGUAGE: typescript
CODE:
import React, { useEffect } from "react";
import { api } from "wasp/client/api";

async function fetchCustomRoute() {
  const res = await api.get("/foo/bar");
  console.log(res.data);
}

export const Foo = () => {
  useEffect(() => {
    fetchCustomRoute();
  }, []);

  return <>// ...</>;
};

----------------------------------------

TITLE: Displaying New Project Structure in Wasp 0.12.0
DESCRIPTION: This code snippet shows the file tree of a fresh Wasp project created with version 0.12.0, illustrating the new project structure.

LANGUAGE: plaintext
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ public
‚îÇ   ‚îî‚îÄ‚îÄ .gitkeep
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ queries.ts
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îú‚îÄ‚îÄ .waspignore
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Old Auth Configuration Example - Wasp 0.11.x
DESCRIPTION: Example of authentication configuration in Wasp 0.11.x showing User and SocialLogin entities

LANGUAGE: typescript
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

entity User {=psl
  id                        Int           @id @default(autoincrement())
  username                  String        @unique
  password                  String
  externalAuthAssociations  SocialLogin[]
psl=}

entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

----------------------------------------

TITLE: Implementing onBeforeLogin Hook
DESCRIPTION: Example of implementing the onBeforeLogin hook to perform actions before user login.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const onBeforeLogin = async ({ providerId, user, prisma, req }) => {
  if (
    providerId.providerName === 'email' &&
    providerId.providerUserId === 'some@email.com'
  ) {
    throw new HttpError(403, 'You cannot log in with this email')
  }
}

----------------------------------------

TITLE: Common Layout Implementation
DESCRIPTION: Demonstrates how to create a root component that defines a common layout for the application with header and footer sections.

LANGUAGE: jsx
CODE:
export default function Root({ children }) {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      {children}
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: Creating New Wasp Project with Interactive Template Selection
DESCRIPTION: Command line interaction showing how to create a new Wasp project using the interactive template selector, which allows choosing from different starter templates like basic, todo-ts, saas, embeddings, and ai-generated.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] ai-generated
    ü§ñ Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)
 ‚ñ∏ 1

üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Configuring PostgreSQL Database Connection in Prisma
DESCRIPTION: Prisma schema configuration for PostgreSQL database connection in Wasp applications.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

----------------------------------------

TITLE: Checking Auth Identity Data in TypeScript
DESCRIPTION: Example showing how to safely check and access auth identity data

LANGUAGE: typescript
CODE:
if (user.identities.google !== null) {
  const userId = user.identities.google.id
  // ...
}

----------------------------------------

TITLE: Using Stored Values in Queries
DESCRIPTION: Demonstrates how to use values stored during server setup in query operations. Examples are shown for both JavaScript and TypeScript implementations.

LANGUAGE: javascript
CODE:
import { getSomeResource } from './myServerSetupCode.js'

export const someQuery = async (args, context) => {
  const someResource = getSomeResource()
  return queryDataFromSomeResource(args, someResource)
}

LANGUAGE: typescript
CODE:
import { type SomeQuery } from 'wasp/server/operations'
import { getSomeResource } from './myServerSetupCode.js'

export const someQuery: SomeQuery<...> = async (args, context) => {
  const someResource = getSomeResource()
  return queryDataFromSomeResource(args, someResource)
}

----------------------------------------

TITLE: Implementing Auth UI Components
DESCRIPTION: React components for authentication pages using Wasp's Auth UI components, including login, signup, email verification, and password reset forms.

LANGUAGE: jsx
CODE:
import { LoginForm } from "@wasp/auth/forms/Login";
import { SignupForm } from "@wasp/auth/forms/Signup";
import { VerifyEmailForm } from "@wasp/auth/forms/VerifyEmail";
import { ForgotPasswordForm } from "@wasp/auth/forms/ForgotPassword";
import { ResetPasswordForm } from "@wasp/auth/forms/ResetPassword";
import { Link } from "react-router-dom";

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
      <br />
      <span className="text-sm font-medium text-gray-900">
        Forgot your password? <Link to="/request-password-reset">reset it</Link>
        .
      </span>
    </Layout>
  );
}

export function Signup() {
  return (
    <Layout>
      <SignupForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </Layout>
  );
}

export function EmailVerification() {
  return (
    <Layout>
      <VerifyEmailForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        If everything is okay, <Link to="/login">go to login</Link>
      </span>
    </Layout>
  );
}

export function RequestPasswordReset() {
  return (
    <Layout>
      <ForgotPasswordForm />
    </Layout>
  );
}

export function PasswordReset() {
  return (
    <Layout>
      <ResetPasswordForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        If everything is okay, <Link to="/login">go to login</Link>
      </span>
    </Layout>
  );
}

// A layout component to center the content
export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Defining Task and User Entities in Prisma Schema
DESCRIPTION: This snippet defines the Task and User entities in the Prisma schema, establishing a relationship between them.

LANGUAGE: prisma
CODE:
model User {
  id    Int    @id @default(autoincrement())
  tasks Task[]
}

model Task {
  id          Int     @id @default(autoincrement())
  description String
  isDone      Boolean
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
}

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Required environment variables for Keycloak integration

LANGUAGE: bash
CODE:
KEYCLOAK_CLIENT_ID=your-keycloak-client-id
KEYCLOAK_CLIENT_SECRET=your-keycloak-client-secret
KEYCLOAK_REALM_URL=https://your-keycloak-url.com/realms/master

----------------------------------------

TITLE: Implementing GitHub OAuth Login in Next.js
DESCRIPTION: Code for handling GitHub OAuth login and callback in Next.js routes.

LANGUAGE: tsx
CODE:
// login/github/route.ts
import { generateState } from "arctic";
import { github } from "../../../lib/auth";
import { cookies } from "next/headers";

export async function GET(): Promise<Response> {
  const state = generateState();
  const url = await github.createAuthorizationURL(state);

  cookies().set("github_oauth_state", state, {
    path: "/",
    secure: process.env.NODE_ENV === "production",
    httpOnly: true,
    maxAge: 60 * 10,
    sameSite: "lax"
  });

  return Response.redirect(url);
}

// login/github/callback/route.ts
// ... (callback implementation)

----------------------------------------

TITLE: Configuring Wasp App with Authentication
DESCRIPTION: Defines the main configuration for a Wasp app named 'RecipeApp' with authentication enabled using username and password.

LANGUAGE: wasp
CODE:
app RecipeApp {
  title: "My Recipes",
  wasp: { version: "^0.13.0" },
  auth: {
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login",
    userEntity: User
  }
}

----------------------------------------

TITLE: Configuring Wasp App with Authentication
DESCRIPTION: Defines the main configuration for a Wasp app named 'RecipeApp' with authentication enabled using username and password.

LANGUAGE: wasp
CODE:
app RecipeApp {
  title: "My Recipes",
  wasp: { version: "^0.13.0" },
  auth: {
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login",
    userEntity: User
  }
}

----------------------------------------

TITLE: Configuring Email Provider in Wasp
DESCRIPTION: Basic configuration for setting up an email provider in the main.wasp file, including provider selection and default sender settings.

LANGUAGE: wasp
CODE:
app Example {
  ...
  emailSender: {
    provider: <provider>,
    defaultFrom: {
      name: "Example",
      email: "hello@itsme.com"
    },
  }
}

----------------------------------------

TITLE: Testing a React Todo Component with Mocked API in TypeScript
DESCRIPTION: Shows how to test the Todo component that uses an API call by mocking the API response using Wasp's testing utilities in TypeScript.

LANGUAGE: tsx
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import Todo from "./Todo";

const { mockApi } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockApi("/tasks", mockTasks);

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Defining User Entity for Username Authentication
DESCRIPTION: This snippet demonstrates how to define the User entity with the required fields for username authentication in the main.wasp file.

LANGUAGE: wasp
CODE:
// 3. Define the user entity
entity User {=psl
    id                        Int           @id @default(autoincrement())
    username                  String        @unique
    password                  String
    // Add your own fields below
    // ...
psl=}

----------------------------------------

TITLE: Rendering React Components in Tests with Wasp Helpers
DESCRIPTION: Demonstrates how to use the renderInContext function provided by Wasp to render React components in tests. This helper wraps the component in necessary providers.

LANGUAGE: javascript
CODE:
import { renderInContext } from "wasp/client/test";

renderInContext(<MainPage />);

----------------------------------------

TITLE: Custom Signup Fields Configuration
DESCRIPTION: Example of adding and validating additional fields during the signup process.

LANGUAGE: typescript
CODE:
import { defineAdditionalSignupFields } from '@wasp/auth/index.js'

export const fields = defineAdditionalSignupFields({
  address: async (data) => {
    const address = data.address
    if (typeof address !== 'string') {
      throw new Error('Address is required')
    }
    if (address.length < 5) {
      throw new Error('Address must be at least 5 characters long')
    }
    return address
  }
})

----------------------------------------

TITLE: Declaring API Endpoint in Wasp
DESCRIPTION: Shows how to declare a basic API endpoint in a Wasp configuration file, specifying the route and implementation function.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  httpRoute: (GET, "/foo/bar")
}

----------------------------------------

TITLE: Setting Client Domain Environment Variables in Wasp
DESCRIPTION: Configuration for setting up the client-side API URL environment variable during build time. This variable is essential for connecting the client to the correct server endpoint when using custom domains.

LANGUAGE: bash
CODE:
REACT_APP_API_URL=https://api.myapp.com

----------------------------------------

TITLE: Testing a React Todo Component in TypeScript
DESCRIPTION: Demonstrates how to test the Todo component using Vitest, React Testing Library, and Wasp's testing utilities in TypeScript.

LANGUAGE: tsx
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";
import Todo from "./Todo";

const { mockQuery } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockQuery(getTasks, mockTasks);

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: React Component Imports
DESCRIPTION: Import statements for React components and utilities used in the blog post

LANGUAGE: javascript
CODE:
import Link from '@docusaurus/Link';
import useBaseUrl from '@docusaurus/useBaseUrl';
import InBlogCta from './components/InBlogCta';
import WaspIntro from './_wasp-intro.md';
import ImgWithCaption from './components/ImgWithCaption'

----------------------------------------

TITLE: Simplified Wasp Configuration for a Todo App
DESCRIPTION: Shows a cleaned-up Wasp configuration file with basic app settings and a single route/page declaration.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.12.0"
  },
  title: "TodoApp"
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Implementing API in NodeJS (JavaScript)
DESCRIPTION: Demonstrates how to implement the API function in JavaScript, handling the request, response, and context objects.

LANGUAGE: javascript
CODE:
export const fooBar = (req, res, context) => {
  res.set("Access-Control-Allow-Origin", "*");
  res.json({ msg: `Hello, ${context.user ? "registered user" : "stranger"}!` });
};

----------------------------------------

TITLE: JavaScript Project Structure
DESCRIPTION: Default directory structure for a new Wasp project using JavaScript, showing the main configuration files and source code organization.

LANGUAGE: plaintext
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp          # Your Wasp code goes here.
‚îú‚îÄ‚îÄ schema.prisma      # Your Prisma schema goes here.
‚îú‚îÄ‚îÄ package.json       # Your dependencies and project info go here.
‚îú‚îÄ‚îÄ public             # Your static files (e.g., images, favicon) go here.
‚îú‚îÄ‚îÄ src                # Your source code (TS/JS/CSS/HTML) goes here.
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Authentication Configuration
DESCRIPTION: Setting up authentication in Wasp vs Django's multi-step process

LANGUAGE: jsx
CODE:
app TodoApp {
  wasp: {
    version: "^0.14.0"
  },

  title: "Todo App",

  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    }
  }

  //...

----------------------------------------

TITLE: Authentication Configuration
DESCRIPTION: Setting up authentication in Wasp vs Django's multi-step process

LANGUAGE: jsx
CODE:
app TodoApp {
  wasp: {
    version: "^0.14.0"
  },

  title: "Todo App",

  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    }
  }

  //...

----------------------------------------

TITLE: Implementing OAuth Token Refresh
DESCRIPTION: Example showing how to refresh OAuth access tokens using the Google OAuth provider.

LANGUAGE: typescript
CODE:
import type { OnAfterLoginHook } from 'wasp/server/auth'
import { google } from 'wasp/server/auth'

export const onAfterLogin: OnAfterLoginHook = async ({ oauth }) => {
  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {
    const newTokens = await google.oAuthClient.refreshAccessToken(
      oauth.tokens.refreshToken
    )
    log('new tokens', newTokens)
  }
}

----------------------------------------

TITLE: Improving Function and Variable Naming in JavaScript
DESCRIPTION: This snippet demonstrates the transformation of a poorly named function with vague variable names into a well-structured function with clear and descriptive naming.

LANGUAGE: javascript
CODE:
// Given first and last name of a person, returns the
// demographic statistics for all matching people.
async function demo (a, b) {
  const c = await users(a, b);
  return [
    avg(c.map(a => a.info[0])),
    median(c.map(a => a.info[1]))
  ];
}

LANGUAGE: javascript
CODE:
async function fetchDemographicStatsForFirstAndLastName (
  firstName, lastName
) {
  const users = await fetchUsersByFirstAndLastName(
    firstName, lastName
  );
  return {
    averageAge: avg(users.map(u => u.stats.age)),
    medianSalary: median(users.map(u => u.stats.salary))
  };
}

----------------------------------------

TITLE: Running Wasp Migration Script
DESCRIPTION: Command to run the Wasp migration script for upgrading a project named 'foo' to version 0.12.X.

LANGUAGE: bash
CODE:
npx wasp-migrate foo

----------------------------------------

TITLE: Displaying Project Structure with Tailwind Config Files
DESCRIPTION: Shows the directory structure of a Wasp project with Tailwind configuration files added.

LANGUAGE: bash
CODE:
.
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ public
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
# highlight-start
‚îú‚îÄ‚îÄ postcss.config.cjs
‚îî‚îÄ‚îÄ tailwind.config.cjs
# highlight-end

----------------------------------------

TITLE: Individual Deployment Steps for Fly.io
DESCRIPTION: Separate commands showing the individual steps that make up the launch process: setup, database creation, and deployment.

LANGUAGE: shell
CODE:
wasp deploy fly setup my-wasp-app mia
wasp deploy fly create-db mia
wasp deploy fly deploy

----------------------------------------

TITLE: Configuring Email Authentication in Wasp
DESCRIPTION: Configuration example showing how to enable email authentication in the main.wasp file.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Creating a Simple Helper Function in JavaScript
DESCRIPTION: Defines a helper function to check if there are any tasks in an array.

LANGUAGE: javascript
CODE:
export function areThereAnyTasks(tasks) {
  return tasks.length === 0;
}

----------------------------------------

TITLE: Configuring Email Authentication in Wasp
DESCRIPTION: Configuration for enabling email authentication in the main.wasp file, including user entity specification, email settings, and redirect routes.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "My App Postman",
          email: "hello@itsme.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
        allowUnverifiedLogin: false,
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

----------------------------------------

TITLE: Wasp Installation Telemetry Data Structure
DESCRIPTION: JSON structure showing the minimal telemetry data sent during Wasp installation via the install.sh script. Contains only a random ID and OS information.

LANGUAGE: json
CODE:
{
  "distinct_id": "274701613078193779564259",
  "os": "linux"
}

----------------------------------------

TITLE: Installing Node.js Using NVM
DESCRIPTION: Commands to install a specific version of Node.js using NVM (Node Version Manager) and set it as the current version.

LANGUAGE: shell
CODE:
nvm install 20
nvm use 20
node -v

----------------------------------------

TITLE: Displaying Wasp Project Templates via CLI
DESCRIPTION: Shows the available starter templates when initializing a new Wasp project using the CLI command 'wasp new'. Includes options for basic, todo-ts, saas, embeddings, and WaspAI templates.

LANGUAGE: bash
CODE:
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Google auth, ChatGPT API, Tailwind, & Stripe payments.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] WaspAI
    An AI powered code scaffolder. Tell it what kind of app you want and get a scaffolded fullstack app

----------------------------------------

TITLE: Deployment with Environment Variables
DESCRIPTION: Examples of deploying Wasp apps with both server and client environment variables.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>

LANGUAGE: shell
CODE:
REACT_APP_ANOTHER_VAR=somevalue wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Sending Emails Implementation
DESCRIPTION: Example of sending emails using the emailSender utility, demonstrating how to structure email content and recipient information.

LANGUAGE: typescript
CODE:
import { emailSender } from "@wasp/email/index.js";

// In some action handler...
const info = await emailSender.send({
  from: {
    name: "John Doe",
    email: "john@doe.com",
  },
  to: "user@domain.com",
  subject: "Saying hello",
  text: "Hello world",
  html: "Hello <strong>world</strong>",
});

----------------------------------------

TITLE: Unit Testing Helper Functions in Wasp
DESCRIPTION: Example of a simple unit test for a helper function in both JavaScript and TypeScript.

LANGUAGE: javascript
CODE:
export function areThereAnyTasks(tasks) {
  return tasks.length === 0;
}

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";

import { areThereAnyTasks } from "./helpers";

test("areThereAnyTasks", () => {
  expect(areThereAnyTasks([])).toBe(false);
});

----------------------------------------

TITLE: Task View Component with Update Functionality
DESCRIPTION: React component that displays a task and handles updating its completion status through the updateTask action.

LANGUAGE: typescript
CODE:
const TaskView = ({ task }: { task: Task }) => {
  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {
    try {
      await updateTask({
        id: task.id,
        isDone: event.target.checked,
      })
    } catch (error: any) {
      window.alert('Error while updating task: ' + error.message)
    }
  }

  return (
    <div>
      <input
        type="checkbox"
        id={String(task.id)}
        checked={task.isDone}
        onChange={handleIsDoneChange}
      />
      {task.description}
    </div>
  )
}

----------------------------------------

TITLE: Task View Component with Update Functionality
DESCRIPTION: React component that displays a task and handles updating its completion status through the updateTask action.

LANGUAGE: typescript
CODE:
const TaskView = ({ task }: { task: Task }) => {
  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {
    try {
      await updateTask({
        id: task.id,
        isDone: event.target.checked,
      })
    } catch (error: any) {
      window.alert('Error while updating task: ' + error.message)
    }
  }

  return (
    <div>
      <input
        type="checkbox"
        id={String(task.id)}
        checked={task.isDone}
        onChange={handleIsDoneChange}
      />
      {task.description}
    </div>
  )
}

----------------------------------------

TITLE: Retrieving Username from User Identity in TypeScript
DESCRIPTION: This snippet demonstrates how to access the username identity from a user object and retrieve the specific username used for sign up. It assumes the existence of a 'user' object with an 'identities' property containing username information.

LANGUAGE: typescript
CODE:
const usernameIdentity = user.identities.username

// Username that the user used to sign up, e.g. "fluffyllama"
usernameIdentity.id

----------------------------------------

TITLE: Configuring Email Authentication in Wasp
DESCRIPTION: Configuration example showing how to enable email authentication in the main.wasp file.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Implementing GitHub API Worker
DESCRIPTION: Example implementation of a worker that fetches metrics from GitHub's API using Axios.

LANGUAGE: javascript
CODE:
import axios from 'axios'

const workerFunction = async (opts) => {
  console.log('github.js workerFunction')

  const now = Date.now()

  try {
    const response = await axios.get('https://api.github.com/repos/wasp-lang/wasp')

    return [
      { name: 'Wasp GitHub Stars', value: response.data.stargazers_count, updatedAt: now },
      { name: 'Wasp GitHub Language', value: response.data.language, updatedAt: now },
      { name: 'Wasp GitHub Forks', value: response.data.forks, updatedAt: now },
      { name: 'Wasp GitHub Open Issues', value: response.data.open_issues, updatedAt: now },
    ]
  } catch (error) {
    console.error(error)
    return []
  }
}

export const githubWorker = { name: 'GitHub API', fn: workerFunction, schedule: '*/10 * * * *' }

----------------------------------------

TITLE: Wasp App Head Configuration
DESCRIPTION: Extended example demonstrating how to add multiple head elements including stylesheets, scripts, and meta tags.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.1"
  },
  title: "My App",
  head: [  // optional
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />",
    "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>",
    "<meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />"
  ]
}

----------------------------------------

TITLE: Accessing Username Identity in Typescript for Wasp
DESCRIPTION: This snippet demonstrates how to extract the username identity from a user object and access the specific username used for sign-up. It assumes the existence of a 'user' object with an 'identities' property containing username information.

LANGUAGE: typescript
CODE:
const usernameIdentity = user.identities.username

// Username that the user used to sign up, e.g. "fluffyllama"
usernameIdentity.id

----------------------------------------

TITLE: Opening Database Studio in Wasp
DESCRIPTION: This command opens the Wasp database studio in a browser, allowing users to view and edit the data in the database, including the new Task entity.

LANGUAGE: sh
CODE:
wasp db studio

----------------------------------------

TITLE: Basic Wasp Declarations Example
DESCRIPTION: Demonstrates the core declaration syntax in Wasp for defining an app, route, and page. Shows how to configure basic web application structure using Wasp's declarative approach.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app"
}

route RootRoute { path: "/", to: DashboardPage }

page DashboardPage {
  component: import { DashboardPage } from "@src/Dashboard.jsx"
}

----------------------------------------

TITLE: routes Object Type Definition
DESCRIPTION: Provides the TypeScript type definition for the routes object, showing the structure and available options for different route types.

LANGUAGE: ts
CODE:
export const routes = {
  // RootRoute has a path like "/"
  RootRoute: {
    build: (options?: {
      search?: string[][] | Record<string, string> | string | URLSearchParams
      hash?: string
    }) => // ...
  },

  // DetailRoute has a path like "/task/:id/:something?"
  DetailRoute: {
    build: (
      options: {
        params: { id: ParamValue; something?: ParamValue; },
        search?: string[][] | Record<string, string> | string | URLSearchParams
        hash?: string
      }
    ) => // ...
  }
}

----------------------------------------

TITLE: Configuring PostCSS for Tailwind in JavaScript
DESCRIPTION: Sets up the PostCSS configuration file to enable Tailwind CSS and autoprefixer in a Wasp project.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----------------------------------------

TITLE: Tailwind Configuration Setup
DESCRIPTION: Configuration file for Tailwind CSS showing content paths and theme settings.

LANGUAGE: javascript
CODE:
const { resolveProjectPath } = require('wasp/dev')

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],
  theme: {
    extend: {},
  },
  plugins: [],
}

----------------------------------------

TITLE: Creating New Wasp App via CLI
DESCRIPTION: Command to create a new Wasp application using the CLI tool with AI generation. Requires OpenAI API keys to be set as environment variables.

LANGUAGE: shell
CODE:
wasp new

----------------------------------------

TITLE: Changing App Title in Wasp
DESCRIPTION: This snippet shows how to change the title of a Wasp app, which appears in the browser tab next to the favicon.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "BookFace"
}

----------------------------------------

TITLE: Changing App Title in Wasp
DESCRIPTION: This snippet shows how to change the title of a Wasp app, which appears in the browser tab next to the favicon.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "BookFace"
}

----------------------------------------

TITLE: Railway Client Deployment Script
DESCRIPTION: Shell script to automate the process of deploying the client to Railway

LANGUAGE: bash
CODE:
#!/usr/bin/env bash

if [ -z "$REACT_APP_API_URL" ]
then
  echo "REACT_APP_API_URL is not set"
  exit 1
fi

wasp build
cd .wasp/build/web-app

npm install && REACT_APP_API_URL=$REACT_APP_API_URL npm run build

cp -r build dist

dockerfile_contents=$(cat <<EOF
FROM pierrezemb/gostatic
CMD [ "-fallback", "index.html" ]
COPY ./dist/ /srv/http/
EOF
)

dockerignore_contents=$(cat <<EOF
node_modules/
EOF
)

echo "$dockerfile_contents" > Dockerfile
echo "$dockerignore_contents" > .dockerignore

railway up

----------------------------------------

TITLE: Defining User Entity in Wasp
DESCRIPTION: Prisma schema for defining the User entity in Wasp.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
  email   String   @unique
  name    String?
  // Add your own fields below
  // ...
}

----------------------------------------

TITLE: Using Search Query and Hash with Link Component
DESCRIPTION: Demonstrates how to include search query parameters and hash fragments when using the Link component.

LANGUAGE: tsx
CODE:
<Link
  to="/task/:id"
  params={{ id: task.id }}
  search={{ sortBy: 'date' }}
  hash="comments"
>
  {task.description}
</Link>

----------------------------------------

TITLE: Using Link with Optional Segment in React
DESCRIPTION: Shows how to use the Link component with a route containing an optional static segment in a React component.

LANGUAGE: jsx
CODE:
/* You can include ... */
<Link to="/task/:id/details" params={{ id: 1 }}>
  Task 1
</Link>

/* ... or exclude the optional segment */
<Link to="/task/:id" params={{ id: 1 }}>
  Task 1
</Link>

----------------------------------------

TITLE: Embedding YouTube Video in React JSX
DESCRIPTION: This code snippet demonstrates how to embed a YouTube video player in a React component using JSX. It sets up a responsive container with centered content and includes necessary attributes for the iframe.

LANGUAGE: jsx
CODE:
<div style={{ textAlign: "center", width: "100%", height: "400px", display: "inline-block" }}>
<iframe height="100%" width ="100%" src="https://www.youtube.com/embed/ts2mQHLBnc0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="true"></iframe>
</div>

----------------------------------------

TITLE: Importing Tailwind Directives in CSS for Wasp Projects
DESCRIPTION: Demonstrates how to import Tailwind's base, components, and utilities styles into a CSS file in a Wasp project.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;

/* ... */

----------------------------------------

TITLE: Defining Authentication Routes in Wasp
DESCRIPTION: This code snippet demonstrates how to define the necessary authentication routes and pages in the main.wasp file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}

----------------------------------------

TITLE: Checking Wasp Telemetry Status
DESCRIPTION: Shows how to check the current telemetry status and related information using the telemetry command.

LANGUAGE: bash
CODE:
$ wasp telemetry

Telemetry is currently: ENABLED
Telemetry cache directory: /home/user/.cache/wasp/telemetry/
Last time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC
Our telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.

----------------------------------------

TITLE: Setting WASP_SERVER_URL Environment Variable for Wasp 0.13.0
DESCRIPTION: Defines the new WASP_SERVER_URL server environment variable required in Wasp 0.13.0. This variable specifies the URL of the Wasp server and is used to generate redirect URLs for OAuth providers.

LANGUAGE: bash
CODE:
WASP_SERVER_URL=https://your-wasp-server-url.com

----------------------------------------

TITLE: Updating Deployed Wasp App
DESCRIPTION: Command to update an already deployed Wasp application with the latest changes.

LANGUAGE: shell
CODE:
wasp deploy fly deploy

----------------------------------------

TITLE: JavaScript Implementation of getTaskInfo Query
DESCRIPTION: This code snippet shows the JavaScript implementation of the getTaskInfo query function, including error handling and task information formatting.

LANGUAGE: javascript
CODE:
import HttpError from '@wasp/core/HttpError.js'

function getInfoMessage(task) {
  const isDoneText = task.isDone ? 'is done' : 'is not done'
  return `Task '${task.description}' is ${isDoneText}.`
}

export const getTaskInfo = async ({ id }, context) => {
  const Task = context.entities.Task
  const task = await Task.findUnique({ where: { id } })
  if (!task) {
    throw new HttpError(404)
  }
  return getInfoMessage(task)
}

----------------------------------------

TITLE: JavaScript Implementation of getTaskInfo Query
DESCRIPTION: This code snippet shows the JavaScript implementation of the getTaskInfo query function, including error handling and task information formatting.

LANGUAGE: javascript
CODE:
import HttpError from '@wasp/core/HttpError.js'

function getInfoMessage(task) {
  const isDoneText = task.isDone ? 'is done' : 'is not done'
  return `Task '${task.description}' is ${isDoneText}.`
}

export const getTaskInfo = async ({ id }, context) => {
  const Task = context.entities.Task
  const task = await Task.findUnique({ where: { id } })
  if (!task) {
    throw new HttpError(404)
  }
  return getInfoMessage(task)
}

----------------------------------------

TITLE: Updating Main Page to Require Authentication
DESCRIPTION: Modifies the MainPage configuration in Wasp to require authentication for access.

LANGUAGE: wasp
CODE:
page MainPage {
  authRequired: true,
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Heroku Deployment Setup
DESCRIPTION: Commands to set up a Heroku app with PostgreSQL and deploy the Wasp app.

LANGUAGE: bash
CODE:
heroku create <app-name>
heroku addons:create --app <app-name> heroku-postgresql:essential-0
heroku config:set --app <app-name> JWT_SECRET=<random_string_at_least_32_characters_long>
heroku config:set --app <app-name> WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>
heroku config:set --app <app-name> WASP_SERVER_URL=<url_of_where_server_will_be_deployed>
cd .wasp/build
heroku container:login
heroku stack:set container --app <app-name>
heroku container:push --app <app-name> web
heroku container:release --app <app-name> web

----------------------------------------

TITLE: Accessing Server Environment Variables in JavaScript
DESCRIPTION: Illustrates how to access server environment variables in a Wasp JavaScript project using the 'env' object imported from 'wasp/server'.

LANGUAGE: javascript
CODE:
import { env } from 'wasp/server'

console.log(env.SOME_VAR_NAME)

----------------------------------------

TITLE: Displaying Wasp CLI Version
DESCRIPTION: Demonstrates how to check the current version of the Wasp CLI and provides instructions for installing or switching to different versions.

LANGUAGE: bash
CODE:
$ wasp version

0.12.0

If you wish to install/switch to the latest version of Wasp, do:
curl -sSL https://get.wasp.sh/installer.sh | sh -s

If you want specific x.y.z version of Wasp, do:
curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z

Check https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.

----------------------------------------

TITLE: Implementing getTasks Query in JavaScript
DESCRIPTION: This code implements the getTasks query function in JavaScript. It uses the Task entity to fetch all tasks from the database, ordered by id.

LANGUAGE: javascript
CODE:
export const getTasks = async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Installing Wasp on Linux/OSX/WSL
DESCRIPTION: Command to install Wasp using a shell script. Requires curl to be installed on the system.

LANGUAGE: shell
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Cleaned-up Wasp Configuration for Todo App
DESCRIPTION: This snippet presents the final, cleaned-up version of the main.wasp file, ready for building the Todo app.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "TodoApp"
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Cleaned-up Wasp Configuration for Todo App
DESCRIPTION: This snippet presents the final, cleaned-up version of the main.wasp file, ready for building the Todo app.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "TodoApp"
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Uninstalling Wasp
DESCRIPTION: Demonstrates the process of uninstalling Wasp using the 'wasp uninstall' command, including the confirmation prompt and removal of associated files and directories.

LANGUAGE: bash
CODE:
$ wasp uninstall

üêù --- Uninstalling Wasp ... ------------------------------------------------------

 We will remove the following directories:
   {home}/.local/share/wasp-lang/
   {home}/.cache/wasp/

 We will also remove the following files:
   {home}/.local/bin/wasp

 Are you sure you want to continue? [y/N]
 y

 ‚úÖ --- Uninstalled Wasp -----------------------------------------------------------

----------------------------------------

TITLE: Configuring Dashboard Query in Wasp
DESCRIPTION: Shows how to set up a query in Wasp to fetch dashboard data from the server.

LANGUAGE: wasp
CODE:
query dashboard {
  fn: import { refreshDashboardData } from "@server/dashboard.js"
}

----------------------------------------

TITLE: Wasp CLI Telemetry Data Structure
DESCRIPTION: JSON structure showing the telemetry data sent when Wasp CLI commands are invoked. Includes anonymous user ID, project hash, build status, deploy arguments, version info, and execution context.

LANGUAGE: json
CODE:
{
  "distinct_id": "bf3fa7a8-1c11-4f82-9542-ec1a2d28786b",
  "project_hash": "6d7e561d62b955d1",
  "is_build": true,
  "deploy_cmd_args": "fly;deploy",
  "wasp_version": "0.1.9.1",
  "os": "linux",
  "context": "CI"
}

----------------------------------------

TITLE: Configuring Auth and User Entity in Wasp
DESCRIPTION: Configuration code showing how to set up authentication, including GitHub auth, email verification, and password reset functionality in a Wasp application

LANGUAGE: jsx
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "My App",
  auth: {
    // 1. Specify the User entity
    userEntity: User,
    methods: {
      // 2. Enable Github Auth
      gitHub: {},
      email: {
        // 3. Specify the email from field
        fromField: {
          name: "My App Postman",
          email: "hello@itsme.com"
        },
        // 4. Specify the email verification and password reset options
        emailVerification: {
          clientRoute: EmailVerificationRoute, //this route/page should be created
        },
        passwordReset: {
          clientRoute: PasswordResetRoute, //this route/page should be created
        },
        // Add an emailSender -- Dummy just logs to console for dev purposes
        // but there are a ton of supported providers :D
        emailSender: {
          provider: Dummy,
        },
      },
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Implementing Login Page Component
DESCRIPTION: Creates a React component for the login page using Wasp's LoginForm component and React Router.

LANGUAGE: typescript
CODE:
import { Link } from 'react-router-dom'
import { LoginForm } from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <div style={{ maxWidth: '400px', margin: '0 auto' }}>
      <LoginForm />
      <br />
      <span>
        I don't have an account yet (<Link to="/signup">go to signup</Link>).
      </span>
    </div>
  )
}

----------------------------------------

TITLE: Importing Image as URL in React Component (JavaScript)
DESCRIPTION: This snippet demonstrates how to import an image as a URL in a React component using JavaScript. The imported URL is then used as the src attribute of an img element.

LANGUAGE: jsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Importing Tailwind Directives in CSS
DESCRIPTION: This CSS snippet shows how to import Tailwind's base, components, and utilities styles into a main CSS file in a Wasp project.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;

/* ... */

----------------------------------------

TITLE: Using getEmail in Operations (JavaScript)
DESCRIPTION: Implementation of getEmail helper in a task creation operation context. Shows how to access user email from the context object in an async operation.

LANGUAGE: javascript
CODE:
import { getEmail } from 'wasp/auth'

export const createTask = async (args, context) => {
  const email = getEmail(context.user)
  // ...
}

----------------------------------------

TITLE: Using the useAction Hook for Optimistic Updates
DESCRIPTION: Example of using the useAction hook for optimistic updates

LANGUAGE: jsx
CODE:
import React from 'react'
import {
  useQuery,
  useAction,
  getTask,
  markTaskAsDone,
} from 'wasp/client/operations'

const TaskPage = ({ id }) => {
  const { data: task } = useQuery(getTask, { id })
  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {
    optimisticUpdates: [
      {
        getQuerySpecifier: ({ id }) => [getTask, { id }],
        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),
      },
    ],
  })

  if (!task) {
    return <h1>"Loading"</h1>
  }

  const { description, isDone } = task
  return (
    <div>
      <p>
        <strong>Description: </strong>
        {description}
      </p>
      <p>
        <strong>Is done: </strong>
        {isDone ? 'Yes' : 'No'}
      </p>
      {isDone || (
        <button onClick={() => markTaskAsDoneOptimistically({ id })}>
          Mark as done.
        </button>
      )}
    </div>
  )
}

----------------------------------------

TITLE: Wasp Snippets Definition
DESCRIPTION: VSCode snippet definitions for Wasp code generation including pages, queries, actions, and entities

LANGUAGE: json
CODE:
https://github.com/wasp-lang/vscode-wasp/blob/main/snippets/wasp.json

----------------------------------------

TITLE: Database Model Definition
DESCRIPTION: Defining data models in Django models.py vs Wasp schema.prisma

LANGUAGE: python
CODE:
from django.db import models

class Task(models.Model):
    title = models.CharField(max_length=200)
    completed = models.BooleanField(default=False)

    def __str__(self):
        return self.title

LANGUAGE: jsx
CODE:
model Task {
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Using WebSockets in React with Wasp
DESCRIPTION: Demonstrates how to use WebSockets in a React component using Wasp's pre-configured hooks and types.

LANGUAGE: typescript
CODE:
import { type ServerToClientPayload, useSocket, useSocketListener } from 'wasp/client/webSocket';
import { useAuth } from 'wasp/client/auth';
import { useState, useMemo, useEffect } from 'react';
import { Button, Card } from 'flowbite-react';
import { getUsername } from 'wasp/auth';

const MainPage = () => {
  const { data: user } = useAuth();
  const [poll, setPoll] = useState<ServerToClientPayload<'updateState'> | null>(null);
  const totalVotes = useMemo(() => {
    return poll?.options.reduce((acc, option) => acc + option.votes.length, 0) ?? 0;
  }, [poll]);

  const { socket } = useSocket();

  const username = user ? getUsername(user) : null;

  useSocketListener('updateState', (newState) => {
    setPoll(newState);
  });

  useEffect(() => {
    socket.emit('askForStateUpdate');
  }, []);

  function handleVote(optionId: number) {
    socket.emit('vote', optionId);
  }

  // ... (rendering logic)
};
export default MainPage;

----------------------------------------

TITLE: Mailgun Environment Configuration
DESCRIPTION: Environment variables configuration for Mailgun email provider setup.

LANGUAGE: properties
CODE:
MAILGUN_API_KEY=
MAILGUN_DOMAIN=

----------------------------------------

TITLE: Implementing Username & Password Migration Function
DESCRIPTION: This TypeScript code implements the migration function for username and password authentication data to the new Wasp 0.12.X auth system.

LANGUAGE: typescript
CODE:
import { prisma } from "wasp/server";
import { type ProviderName, type UsernameProviderData } from "wasp/server/auth";
import { MigrateUsernameAndPassword } from "wasp/server/api";

export const migrateUsernameAndPasswordHandler: MigrateUsernameAndPassword =
  async (_req, res) => {
    const result = await migrateUsernameAuth();

    res.status(200).json({ message: "Migrated users to the new auth", result });
  };

async function migrateUsernameAuth(): Promise<{
  numUsersAlreadyMigrated: number;
  numUsersNotUsingThisAuthMethod: number;
  numUsersMigratedSuccessfully: number;
}> {
  const users = await prisma.user.findMany({
    include: {
      auth: true,
    },
  });

  const result = {
    numUsersAlreadyMigrated: 0,
    numUsersNotUsingThisAuthMethod: 0,
    numUsersMigratedSuccessfully: 0,
  };

  for (const user of users) {
    if (user.auth) {
      result.numUsersAlreadyMigrated++;
      console.log("Skipping user (already migrated) with id:", user.id);
      continue;
    }

    if (!user.username || !user.password) {
      result.numUsersNotUsingThisAuthMethod++;
      console.log("Skipping user (not using username auth) with id:", user.id);
      continue;
    }

    const providerData: UsernameProviderData = {
      hashedPassword: user.password,
    };
    const providerName: ProviderName = "username";

    await prisma.auth.create({
      data: {
        identities: {
          create: {
            providerName,
            providerUserId: user.username.toLowerCase(),
            providerData: JSON.stringify(providerData),
          },
        },
        user: {
          connect: {
            id: user.id,
          },
        },
      },
    });
    result.numUsersMigratedSuccessfully++;
  }

  return result;
}

----------------------------------------

TITLE: Implementing Username & Password Migration Function
DESCRIPTION: This TypeScript code implements the migration function for username and password authentication data to the new Wasp 0.12.X auth system.

LANGUAGE: typescript
CODE:
import { prisma } from "wasp/server";
import { type ProviderName, type UsernameProviderData } from "wasp/server/auth";
import { MigrateUsernameAndPassword } from "wasp/server/api";

export const migrateUsernameAndPasswordHandler: MigrateUsernameAndPassword =
  async (_req, res) => {
    const result = await migrateUsernameAuth();

    res.status(200).json({ message: "Migrated users to the new auth", result });
  };

async function migrateUsernameAuth(): Promise<{
  numUsersAlreadyMigrated: number;
  numUsersNotUsingThisAuthMethod: number;
  numUsersMigratedSuccessfully: number;
}> {
  const users = await prisma.user.findMany({
    include: {
      auth: true,
    },
  });

  const result = {
    numUsersAlreadyMigrated: 0,
    numUsersNotUsingThisAuthMethod: 0,
    numUsersMigratedSuccessfully: 0,
  };

  for (const user of users) {
    if (user.auth) {
      result.numUsersAlreadyMigrated++;
      console.log("Skipping user (already migrated) with id:", user.id);
      continue;
    }

    if (!user.username || !user.password) {
      result.numUsersNotUsingThisAuthMethod++;
      console.log("Skipping user (not using username auth) with id:", user.id);
      continue;
    }

    const providerData: UsernameProviderData = {
      hashedPassword: user.password,
    };
    const providerName: ProviderName = "username";

    await prisma.auth.create({
      data: {
        identities: {
          create: {
            providerName,
            providerUserId: user.username.toLowerCase(),
            providerData: JSON.stringify(providerData),
          },
        },
        user: {
          connect: {
            id: user.id,
          },
        },
      },
    });
    result.numUsersMigratedSuccessfully++;
  }

  return result;
}

----------------------------------------

TITLE: Adding Tailwind Plugins to Configuration in JavaScript
DESCRIPTION: Shows how to include installed Tailwind CSS plugins in the project's Tailwind configuration file.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  // ...
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
  // ...
}

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Wasp configuration for setting up GitHub authentication.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      // 2. Enable Github Auth
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Creating New Wasp Project with Default Template
DESCRIPTION: Shows how to create a new Wasp project using the default template without interactive mode.

LANGUAGE: bash
CODE:
$ wasp new MyFirstProject
üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Creating Heroku App and Database
DESCRIPTION: Commands to create a new Heroku app and PostgreSQL database for a Wasp application.

LANGUAGE: bash
CODE:
heroku create <app-name>
heroku addons:create --app <app-name> heroku-postgresql:mini

----------------------------------------

TITLE: Simplified MainPage Component
DESCRIPTION: Cleaned up version of the MainPage component showing minimal implementation.

LANGUAGE: typescript
CODE:
export const MainPage = () => {
  return <div>Hello world!</div>
}

----------------------------------------

TITLE: Running a Wasp App
DESCRIPTION: Commands to navigate to the project directory and start the Wasp app using the Wasp CLI.

LANGUAGE: shell
CODE:
cd <my-project-name>
wasp start

----------------------------------------

TITLE: Configuring Tailwind CSS for Wasp Projects
DESCRIPTION: This snippet shows the default Tailwind configuration file for Wasp projects. It specifies content sources, theme extensions, and plugins.

LANGUAGE: jsx
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

----------------------------------------

TITLE: Defining User Signup Fields in TypeScript for Wasp
DESCRIPTION: This snippet demonstrates how to define extra user signup fields in TypeScript for a Wasp project. It shows the implementation for 'address' as a required field and 'phone' as an optional field.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: (data) => {
    if (!data.address) {
      throw new Error('Address is required')
    }
    return data.address
  }
  phone: (data) => data.phone,
})

----------------------------------------

TITLE: Basic Wasp Build Command
DESCRIPTION: Command to generate deployable code for a Wasp application in the .wasp/build/ directory

LANGUAGE: bash
CODE:
wasp build

----------------------------------------

TITLE: SendGrid Environment Configuration
DESCRIPTION: Environment variables configuration for SendGrid email provider setup.

LANGUAGE: properties
CODE:
SENDGRID_API_KEY=

----------------------------------------

TITLE: SendGrid Environment Configuration
DESCRIPTION: Environment variables configuration for SendGrid email provider setup.

LANGUAGE: properties
CODE:
SENDGRID_API_KEY=

----------------------------------------

TITLE: Creating User Entity in Wasp
DESCRIPTION: Defines the User entity in the Wasp configuration file with required fields for authentication.

LANGUAGE: wasp
CODE:
entity User {=psl
    id       Int    @id @default(autoincrement())
    username String @unique
    password String
psl=}

----------------------------------------

TITLE: Defining Task Entity in Wasp
DESCRIPTION: This snippet demonstrates how to define a Task entity in the main.wasp file using Prisma Schema Language (PSL). It includes fields for id, description, and isDone status.

LANGUAGE: wasp
CODE:
entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
psl=}

----------------------------------------

TITLE: Installing Node.js and NVM
DESCRIPTION: Commands for installing Node.js and Node Version Manager (NVM) in WSL environment

LANGUAGE: bash
CODE:
sudo apt install nodejs
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash

----------------------------------------

TITLE: Cleaned Up Wasp Configuration
DESCRIPTION: Final minimal Wasp configuration after cleanup, showing basic app setup with single route and page.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "Todo app"
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage.jsx"
}

----------------------------------------

TITLE: Opening Database Studio in Wasp
DESCRIPTION: This command opens the Wasp database studio in a browser, allowing users to view and edit the data in the database, including the newly created Task entity.

LANGUAGE: sh
CODE:
wasp db studio

----------------------------------------

TITLE: PostCSS Configuration for Tailwind
DESCRIPTION: PostCSS configuration file required for Tailwind CSS processing.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----------------------------------------

TITLE: Defining Entities and Operations in Wasp
DESCRIPTION: Defines a Task entity, a query for fetching tasks, and an action for updating tasks in the main Wasp configuration file.

LANGUAGE: wasp
CODE:
entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
psl=}

query getTasks {
  fn: import { getTasks } from "@server/queries.js",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@server/actions.js",
  entities: [Task]
}

----------------------------------------

TITLE: Declaring Query in Wasp
DESCRIPTION: Defines a getTasks query in the Wasp configuration file that specifies the implementation location and entity dependencies.

LANGUAGE: wasp
CODE:
query getTasks {
  fn: import { getTasks } from "@src/queries",
  entities: [Task]
}

----------------------------------------

TITLE: Adding Tailwind Plugins to Wasp Project Configuration
DESCRIPTION: This JavaScript snippet demonstrates how to add Tailwind CSS plugins to the tailwind.config.cjs file in a Wasp project. It includes the forms and typography plugins as examples.

LANGUAGE: js
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  // ...
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
  // ...
}

----------------------------------------

TITLE: Opening Database Studio in Wasp
DESCRIPTION: This command opens the Wasp database studio in a browser, allowing users to view and edit the data in the database, including the new Task entity.

LANGUAGE: shell
CODE:
wasp db studio

----------------------------------------

TITLE: Deploying Server to Railway
DESCRIPTION: Commands to deploy the server-side of a Wasp application to Railway.

LANGUAGE: bash
CODE:
cd .wasp/build
railway link
railway up

----------------------------------------

TITLE: Configuring Authentication in Wasp Application
DESCRIPTION: This snippet shows how to configure authentication in a Wasp application. It specifies the user entity, external auth entity, and enabled authentication methods (username/password and Google).

LANGUAGE: wasp
CODE:
app authExample {
  // ...
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      usernameAndPassword: {},
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Updating User Auth Field Access
DESCRIPTION: Replace old helper functions for accessing user auth fields with new direct property access on the user object.

LANGUAGE: typescript
CODE:
// Before
import { getUsername, AuthUser } from 'wasp/auth'

const MainPage = ({ user }: { user: AuthUser }) => {
  const username = getUsername(user)
  // ...
}

// After
import { AuthUser } from 'wasp/auth'

const MainPage = ({ user }: { user: AuthUser }) => {
  const username = user.identities.username?.id
  // ...
}

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Sets up username and password authentication in the Wasp configuration file.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "TodoApp",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Sets up username and password authentication in the Wasp configuration file.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "TodoApp",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Providing Client Environment Variables for Production Build
DESCRIPTION: Shows how to provide client-side environment variables when building a Wasp project for production. These variables are embedded into the client code during the build process.

LANGUAGE: shell
CODE:
REACT_APP_SOME_VAR_NAME=somevalue npm run build

----------------------------------------

TITLE: Creating User Entity in Prisma Schema
DESCRIPTION: Defines the User entity in the Prisma schema file to keep track of task ownership.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Initializing Database Setup with Docker and Wasp CLI
DESCRIPTION: Commands for setting up a PostgreSQL database using Docker and Wasp CLI, including database migration.

LANGUAGE: bash
CODE:
wasp start db
wasp db migrate-dev

----------------------------------------

TITLE: Installing Wasp via Installer Script
DESCRIPTION: Downloads and runs the Wasp installer script for Linux, macOS, and WSL systems.

LANGUAGE: shell
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Defining Data Models in Wasp
DESCRIPTION: This snippet shows how to define User and Recipe entities using Prisma Schema Language within a Wasp configuration file.

LANGUAGE: wasp
CODE:
entity User {=psl
  id          Int @id @default(autoincrement())
  username    String @unique
  password    String
  recipes     Recipe[]
psl=}

entity Recipe {=psl
  id          Int @id @default(autoincrement())
  title       String
  description String?
  userId      Int
  user        User @relation(fields: [userId], references: [id])
psl=}

----------------------------------------

TITLE: Deploying to Fly.io
DESCRIPTION: Command to deploy the Wasp app to Fly.io.

LANGUAGE: bash
CODE:
flyctl deploy --remote-only --config ../../fly.toml

----------------------------------------

TITLE: OAuth Config Function Before Migration
DESCRIPTION: Shows the previous format of the OAuth provider configuration function that includes client ID, secret, and scope.

LANGUAGE: typescript
CODE:
export function getConfig() {
    return {
        clientID: process.env.GOOGLE_CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        scope: ['profile', 'email'],
    }
}

----------------------------------------

TITLE: OAuth Config Function Before Migration
DESCRIPTION: Shows the previous format of the OAuth provider configuration function that includes client ID, secret, and scope.

LANGUAGE: typescript
CODE:
export function getConfig() {
    return {
        clientID: process.env.GOOGLE_CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        scope: ['profile', 'email'],
    }
}

----------------------------------------

TITLE: Configuring TypeScript Source Files
DESCRIPTION: Configuration for TypeScript source files in a Wasp project, specifying source directory inclusion.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    ...
  },
  ...,
  "include": ["src"]
}

----------------------------------------

TITLE: Combining Multiple Customizations for Auth UI
DESCRIPTION: This snippet shows how to combine multiple customizations, including appearance, logo, and layout, for auth UI components.

LANGUAGE: typescript
CODE:
import type { CustomizationOptions } from 'wasp/client/auth'

export const appearance: CustomizationOptions['appearance'] = {
  colors: {
    brand: '#5969b8', // blue
    brandAccent: '#de5998', // pink
    submitButtonText: 'white',
  },
}

LANGUAGE: tsx
CODE:
import { LoginForm } from 'wasp/client/auth'

import { authAppearance } from './appearance'
import todoLogo from './todoLogo.png'

export function LoginPage() {
  return <LoginForm appearance={appearance} logo={todoLogo} />
}

----------------------------------------

TITLE: Submitting Jobs for Execution
DESCRIPTION: Shows how to submit jobs for immediate or delayed execution in Operations or setupFn contexts.

LANGUAGE: typescript
CODE:
import { mySpecialJob } from 'wasp/server/jobs'

const submittedJob = await mySpecialJob.submit({ job: "Johnny" })

// Or, if you'd prefer it to execute in the future, just add a .delay().
// It takes a number of seconds, Date, or ISO date string.
await mySpecialJob
  .delay(10)
  .submit({ name: "Johnny" })

----------------------------------------

TITLE: Adding Login Route and Page in Wasp
DESCRIPTION: This snippet demonstrates how to add the necessary login route and page for Google authentication in the main.wasp file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}

----------------------------------------

TITLE: Implementing updateTask Action in JavaScript
DESCRIPTION: Defines the updateTask function that updates a Task entity's isDone status.

LANGUAGE: javascript
CODE:
export const updateTask = async ({ id, isDone }, context) => {
  return context.entities.Task.update({
    where: { id },
    data: {
      isDone: isDone,
    },
  })
}

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: This snippet demonstrates how to define the User entity in the schema.prisma file for Google authentication.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
  // Add your own fields below
  // ...
}

----------------------------------------

TITLE: Importing Tailwind CSS Directives in Wasp Project
DESCRIPTION: This CSS snippet demonstrates how to import Tailwind CSS directives into a CSS file in a Wasp project. It includes the base, components, and utilities layers of Tailwind.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;

/* ... */

----------------------------------------

TITLE: Implementing Login Page with Google Sign-In in React
DESCRIPTION: This React component implements a login page that includes both a standard login form and a Google sign-in button. It uses Wasp's auth helpers and forms to simplify the implementation.

LANGUAGE: jsx
CODE:
import React from 'react'
import { Link } from 'react-router-dom'

import { SignInButton as GoogleSignInButton } from '@wasp/auth/helpers/Google'
import LoginForm from '@wasp/auth/forms/Login'

const Login = () => {
  return (
    <div>
      <div>
        <LoginForm/>
      </div>
      <div>
        I don't have an account yet (<Link to="/signup">go to signup</Link>).
      </div>
      <div>
        <GoogleSignInButton/>
      </div>
    </div>
  )
}

export default Login

----------------------------------------

TITLE: Implementing LangChain Sequential Chain for Idea Generation
DESCRIPTION: Function using LangChain to create a sequential chain of API calls to OpenAI for generating tweet ideas and drafts.

LANGUAGE: typescript
CODE:
import { ChatOpenAI } from 'langchain/chat_models/openai';
import { LLMChain, SequentialChain } from 'langchain/chains';
import { PromptTemplate } from 'langchain/prompts';
import { PineconeStore } from 'langchain/vectorstores/pinecone';
import { OpenAIEmbeddings } from 'langchain/embeddings/openai';
import { PineconeClient } from '@pinecone-database/pinecone';

const pinecone = new PineconeClient();
export const initPinecone = async () => {
  await pinecone.init({
    environment: process.env.PINECONE_ENV!,
    apiKey: process.env.PINECONE_API_KEY!,
  });
  return pinecone;
};

const embeddings = new OpenAIEmbeddings({
  openAIApiKey: process.env.OPENAI_API_KEY,
});

export const generateIdeas = async (exampleTweet: string, username: string) => {
  try {
    exampleTweet = exampleTweet.replace(/"/g, '');
    exampleTweet = exampleTweet.replace(/{/g, '');
    exampleTweet = exampleTweet.replace(/}/g, '');

    const pinecone = await initPinecone();

    console.log('list indexes', await pinecone.listIndexes());

    const pineconeIndex = pinecone.Index('embeds-test');

    const vectorStore = new PineconeStore(embeddings, {
      pineconeIndex: pineconeIndex,
      namespace: username,
    });

    const searchRes = await vectorStore.similaritySearchWithScore(exampleTweet, 2);
    console.log('searchRes: ', searchRes);
    let notes = searchRes
      .filter((res) => res[1] > 0.7)
      .map((res) => res[0].pageContent)
      .join(' ');

    console.log('\n\n similarity search results of our notes-> ', notes);

		if (!notes || notes.length <= 2) {
      notes = exampleTweet;
    }

    const tweetLlm = new ChatOpenAI({
      openAIApiKey: process.env.OPENAI_API_KEY,
      temperature: 0.8,
      modelName: 'gpt-3.5-turbo',
    });

    const tweetTemplate = `You are an expert idea generator. You will be given a user's notes and your goal is to use this information to brainstorm other novel ideas. 

	  Notes: {notes}
	
	  Ideas Brainstorm: 
	  -`;

    const tweetPromptTemplate = new PromptTemplate({
      template: tweetTemplate,
      inputVariables: ['notes'],
    });

    const tweetChain = new LLMChain({
      llm: tweetLlm,
      prompt: tweetPromptTemplate,
      outputKey: 'newTweetIdeas',
    });

    const interestingTweetTemplate = `You are an expert interesting tweet generator. You will be given some tweet ideas and your goal is to choose one, and write a tweet based on it. Structure the tweet in an informal yet serious tone and do NOT include hashtags in the tweet!
 
	  Tweet Ideas: {newTweetIdeas}
	  
	  Interesting Tweet:`;

    const interestingTweetLlm = new ChatOpenAI({
      openAIApiKey: process.env.OPENAI_API_KEY,
      temperature: 1.1,
      modelName: 'gpt-3.5-turbo',
    });

    const interestingTweetPrompt = new PromptTemplate({
      template: interestingTweetTemplate,
      inputVariables: ['newTweetIdeas'],
    });

    const interestingTweetChain = new LLMChain({
      llm: interestingTweetLlm,
      prompt: interestingTweetPrompt,
      outputKey: 'interestingTweet',
    });

    const overallChain = new SequentialChain({
      chains: [tweetChain, interestingTweetChain],
      inputVariables: ['notes'],
      outputVariables: ['newTweetIdeas', 'interestingTweet'],
      verbose: false,
    });

    type ChainDraftResponse = {
      newTweetIdeas: string;
      interestingTweet: string;
      notes: string;
    };

    const res1 = (await overallChain.call({
      notes,
    })) as ChainDraftResponse;

    return {
      ...res1,
      notes,
    };
  } catch (error: any) {
    throw new Error(error);
  }
};

----------------------------------------

TITLE: Todo App Implementation - TypeScript/React
DESCRIPTION: TypeScript version of the Todo app with proper type definitions and fixed errors

LANGUAGE: tsx
CODE:
type Task = {
  id: string
  description: string
  isDone: boolean
}

function MainPage() {
  const { data: tasks } = useQuery<Task, Task[]>(getTasks)

  return (
    <div>
      <h1>Todos</h1>
      {tasks && <TaskList tasks={tasks} />}
    </div>
  )
}

function TaskList({ tasks }: { tasks: Task[] }) {
  if (!tasks.length) {
    return <div>No tasks</div>
  }

  return (
    <div>
      {tasks.map((task, idx) => <Task {...task} key={idx} />)}
    </div>
  )
}

function Task({ id, isDone, description }: Task) {
  return (
    <div>
      <label>
        <input
          type='checkbox'
          id={id}
          checked={isDone}
          onChange={
            (event) => updateTask({ id, isDone: event.target.checked })
          }
        />
        <span>{description}</span>
      </label>
    </div>
  )
}

----------------------------------------

TITLE: Creating a Wasp Project with OpenSaaS.sh Template
DESCRIPTION: This command demonstrates how to create a new Wasp project using the OpenSaaS.sh template. The template includes features like Stripe Payments, OpenAI GPT API, Google Auth, SendGrid, Tailwind, and Cron Jobs.

LANGUAGE: bash
CODE:
wasp new <project-name> -t saas

----------------------------------------

TITLE: Configuring Wasp Dependencies
DESCRIPTION: Demonstrates how to add external NPM dependencies (Bull and Axios) in a Wasp application configuration file.

LANGUAGE: wasp
CODE:
app waspleau {
  title: "Waspleau",

  dependencies: [
    ("bull", "4.1.1"),
    ("axios", "^0.21.1")
  ]
}

----------------------------------------

TITLE: Configuring Tailwind CSS in Wasp Project
DESCRIPTION: Sets up the Tailwind configuration file for a Wasp project, including content paths and theme extensions.

LANGUAGE: javascript
CODE:
const { resolveProjectPath } = require('wasp/dev')

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],
  theme: {
    extend: {},
  },
  plugins: [],
}

----------------------------------------

TITLE: Configuring PostgreSQL Database Provider in Prisma Schema
DESCRIPTION: Prisma schema configuration for PostgreSQL database in Wasp applications.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

----------------------------------------

TITLE: Configuring PostgreSQL Database Provider in Prisma Schema
DESCRIPTION: Prisma schema configuration for PostgreSQL database in Wasp applications.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

----------------------------------------

TITLE: Generating PRD with ChatGPT for House Plant Tracking App
DESCRIPTION: An example prompt to generate a Product Requirement Document using ChatGPT for a house plant tracking application. This PRD can then be used as input for Wasp's GPT Web App Generator.

LANGUAGE: plaintext
CODE:
Write a Product Requirement Document for the following full-stack app:

An app where users can track their house plants and their watering schedule.

----------------------------------------

TITLE: Installing Wasp via Curl (Linux/macOS)
DESCRIPTION: This command downloads and runs the Wasp installer script using curl. It's the primary method for installing Wasp on Linux and macOS systems.

LANGUAGE: shell
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Deploying to Heroku
DESCRIPTION: Commands to build and deploy a Wasp application to Heroku using Docker.

LANGUAGE: bash
CODE:
cd .wasp/build
heroku container:login
heroku container:push --app <app-name> web
heroku container:release --app <app-name> web

----------------------------------------

TITLE: Setting Server Environment Variables on Fly.io
DESCRIPTION: Example command demonstrating how to set server environment variables when deploying to Fly.io using the flyctl CLI tool.

LANGUAGE: shell
CODE:
flyctl secrets set SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Deployment with Environment Variables
DESCRIPTION: Example of deploying with additional environment variables like OAuth secrets.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>

----------------------------------------

TITLE: Installing Node.js with NVM
DESCRIPTION: Commands to install and use a specific version of Node.js using NVM (Node Version Manager).

LANGUAGE: shell
CODE:
nvm install 20
nvm use 20
node -v

----------------------------------------

TITLE: Setting Custom Dev Server Port in Vite Config (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to set a custom dev server port in the Vite configuration. It uses the defineConfig function, modifies the 'port' option in the server configuration, and includes the necessary environment variable update.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  server: {
    port: 4000,
  },
})

LANGUAGE: plaintext
CODE:
WASP_WEB_CLIENT_URL=http://localhost:4000

----------------------------------------

TITLE: Wasp App Title Customization
DESCRIPTION: Example showing how to customize the app title that appears in the browser tab.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.1"
  },
  title: "BookFace"
}

----------------------------------------

TITLE: Wasp App Title Customization
DESCRIPTION: Example showing how to customize the app title that appears in the browser tab.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.1"
  },
  title: "BookFace"
}

----------------------------------------

TITLE: Declaring Query in Wasp Configuration
DESCRIPTION: Defines a getTasks query in the Wasp configuration file that specifies the implementation location and entity dependencies.

LANGUAGE: wasp
CODE:
query getTasks {
  fn: import { getTasks } from "@server/queries.js",
  entities: [Task]
}

----------------------------------------

TITLE: Full Wasp App Configuration API Reference
DESCRIPTION: This snippet provides a comprehensive example of all available configuration options for a Wasp app, including authentication, client, server, database, email sender, and WebSocket settings.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ],
  auth: {
    // ...
  },
  client: {
    // ...
  },
  server: {
    // ...
  },
  db: {
    // ...
  },
  emailSender: {
    // ...
  },
  webSocket: {
    // ...
  }
}

----------------------------------------

TITLE: Implementing Scheduled Jobs with Wasp
DESCRIPTION: Shows how to configure a cron job for calculating daily statistics using Wasp's job scheduler feature.

LANGUAGE: jsx
CODE:
job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@server/workers/calculateDailyStats.js"
  },
  schedule: {
    cron: "0 * * * *" 
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}

----------------------------------------

TITLE: Customizing User Signup Fields
DESCRIPTION: Demonstrates how to add and validate custom fields during the user signup process.

LANGUAGE: wasp
CODE:
app crudTesting {
  // ...
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {
        userSignupFields: import { userSignupFields } from "@src/auth/signup",
      },
    },
    onAuthFailedRedirectTo: "/login",
  },
}

LANGUAGE: javascript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: async (data) => {
    const address = data.address
    if (typeof address !== 'string') {
      throw new Error('Address is required')
    }
    if (address.length < 5) {
      throw new Error('Address must be at least 5 characters long')
    }
    return address
  },
})

----------------------------------------

TITLE: Implementing a Job Worker Function in TypeScript
DESCRIPTION: Defines the worker function 'foo' with TypeScript types, ensuring type safety for the job's input and output.

LANGUAGE: typescript
CODE:
import type { MySpecialJob } from '@wasp/jobs/mySpecialJob'
import type { Task } from '@wasp/entities'

type Input = { name: string; }
type Output = { tasks: Task[]; }

export const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {
  console.log(`Hello ${name}!`)
  const tasks = await context.entities.Task.findMany({})
  return { tasks }
}

----------------------------------------

TITLE: Using ImgWithCaption Component
DESCRIPTION: Example of using the ImgWithCaption component to display images with captions in the blog post

LANGUAGE: jsx
CODE:
<ImgWithCaption
    alt="Wasp Update Dec 22"
    source="img/update-dec-23/banner.png"
/>

----------------------------------------

TITLE: Configuring Multiple Auth Providers in Wasp
DESCRIPTION: Configuration example showing how to enable multiple authentication providers (email, Google, and Github) in the main.wasp file.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
      google: {},
      github: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Setting Up Root TypeScript Configuration
DESCRIPTION: Root TypeScript configuration file that references both source and Wasp configurations.

LANGUAGE: json
CODE:
{
  "files": [],
  "references": [
    { "path": "./tsconfig.src.json" },
    { "path": "./tsconfig.wasp.json" }
  ]
}

----------------------------------------

TITLE: Implementing a Job Worker Function in TypeScript
DESCRIPTION: Defines the worker function 'foo' with TypeScript types, ensuring type safety for the job's input and output.

LANGUAGE: typescript
CODE:
import type { MySpecialJob } from '@wasp/jobs/mySpecialJob'
import type { Task } from '@wasp/entities'

type Input = { name: string; }
type Output = { tasks: Task[]; }

export const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {
  console.log(`Hello ${name}!`)
  const tasks = await context.entities.Task.findMany({})
  return { tasks }
}

----------------------------------------

TITLE: Implementing onAfterSignup Hook
DESCRIPTION: Example of implementing the onAfterSignup hook to perform actions after user signup.

LANGUAGE: javascript
CODE:
export const onAfterSignup = async ({
  providerId,
  user,
  oauth,
  prisma,
  req,
}) => {
  const count = await prisma.user.count()
  console.log('number of users after', count)
  console.log('user object', user)

  if (oauth) {
    console.log('accessToken', oauth.tokens.accessToken)
    console.log('uniqueRequestId', oauth.uniqueRequestId)

    const id = oauth.uniqueRequestId
    const data = someKindOfStore.get(id)
    if (data) {
      console.log('saved data for the ID', data)
    }
    someKindOfStore.delete(id)
  }
}

----------------------------------------

TITLE: Installing Vector Similarity Search Template
DESCRIPTION: Command to create a new Wasp project using the embeddings template that includes vector similarity search capabilities, OpenAI Embeddings API, Pinecone Vector DB, and Tailwind.

LANGUAGE: bash
CODE:
wasp new <project-name> -t embeddings

----------------------------------------

TITLE: Updating Wasp Version Configuration
DESCRIPTION: Shows how to update the Wasp version field in the main configuration file to use version 0.15.0.

LANGUAGE: wasp
CODE:
app MyApp {
  wasp: {
    version: "^0.15.0"
  },
}

----------------------------------------

TITLE: Implementing Queries in JavaScript
DESCRIPTION: JavaScript implementation of queries to get all tasks and filtered tasks with hardcoded data.

LANGUAGE: javascript
CODE:
const tasks = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const getAllTasks = () => {
  return tasks
}

export const getFilteredTasks = (args) => {
  const { isDone } = args
  return tasks.filter((task) => task.isDone === isDone)
}

----------------------------------------

TITLE: Defining Task Entity in Prisma Schema
DESCRIPTION: This snippet shows how to define a Task entity in the Prisma schema file. It includes fields for id, description, and isDone.

LANGUAGE: prisma
CODE:
model Task {
  id          Int @id @default(autoincrement())
  description String
  isDone      Boolean
}

----------------------------------------

TITLE: Defining Task Entity in Prisma Schema
DESCRIPTION: This snippet shows how to define a Task entity in the Prisma schema file. It includes fields for id, description, and isDone.

LANGUAGE: prisma
CODE:
model Task {
  id          Int @id @default(autoincrement())
  description String
  isDone      Boolean
}

----------------------------------------

TITLE: Setting Server Environment Variables on Fly.io for Wasp Deployment
DESCRIPTION: This command shows how to set server environment variables when deploying a Wasp application to Fly.io. It uses the flyctl CLI tool to set a secret variable named SOME_VAR_NAME.

LANGUAGE: shell
CODE:
flyctl secrets set SOME_VAR_NAME=somevalue

----------------------------------------

TITLE: Mocking API Endpoints in Wasp Tests
DESCRIPTION: Demonstrates mocking an API endpoint using the mockApi function, which takes an HTTP method and path, along with the response data.

LANGUAGE: javascript
CODE:
import { HttpMethod } from "wasp/client";

mockApi({ method: HttpMethod.Get, path: "/foor/bar" }, { res: "hello" });

----------------------------------------

TITLE: Defining Wasp App Structure in DSL
DESCRIPTION: Example of a Wasp app configuration using its domain-specific language (DSL) to define routes, pages, entities, queries, and actions for a todo application.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: { version: "^0.11.1" },
  title: "ToDo App",
  auth: {
    userEntity: User,
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login"
  },
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}

route DashboardRoute { path: "/", to: Dashboard }
page DashboardPage {
  authRequired: true,
  component: import Dashboard from "@client/pages/Dashboard.jsx"
}

entity User {=psl
    id          Int       @id @default(autoincrement())
    username    String    @unique
    password    String
    tasks       Task[]
psl=}

entity Task {=psl
    id          Int       @id @default(autoincrement())
    description String
    isDone      Boolean   @default(false)
    user        User      @relation(fields: [userId], references: [id])
    userId      Int
psl=}

query getUser {
  fn: import { getUser } from "@server/queries.js",
  entities: [User]
}

query getTasks {
  fn: import { getTasks } from "@server/queries.js",
  entities: [Task]
}

action createTask {
  fn: import { createTask } from "@server/actions.js",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@server/actions.js",
  entities: [Task]
}

----------------------------------------

TITLE: NVM Node.js Version Management Commands
DESCRIPTION: Set of commands for managing Node.js installations using NVM, including installation and version switching

LANGUAGE: shell
CODE:
nvm install 20

LANGUAGE: shell
CODE:
nvm use 20

LANGUAGE: shell
CODE:
node -v

----------------------------------------

TITLE: Using the useAction Hook for Optimistic Updates
DESCRIPTION: Example of using the useAction hook to implement optimistic updates when marking a task as done.

LANGUAGE: jsx
CODE:
import React from 'react'
import {
  useQuery,
  useAction,
  getTask,
  markTaskAsDone,
} from 'wasp/client/operations'

const TaskPage = ({ id }) => {
  const { data: task } = useQuery(getTask, { id })
  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {
    optimisticUpdates: [
      {
        getQuerySpecifier: ({ id }) => [getTask, { id }],
        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),
      },
    ],
  })

  if (!task) {
    return <h1>"Loading"</h1>
  }

  const { description, isDone } = task
  return (
    <div>
      <p>
        <strong>Description: </strong>
        {description}
      </p>
      <p>
        <strong>Is done: </strong>
        {isDone ? 'Yes' : 'No'}
      </p>
      {isDone || (
        <button onClick={() => markTaskAsDoneOptimistically({ id })}>
          Mark as done.
        </button>
      )}
    </div>
  )
}

export default TaskPage

----------------------------------------

TITLE: Defining a Route in Wasp
DESCRIPTION: Demonstrates how to define a route in a Wasp configuration file.

LANGUAGE: wasp
CODE:
route TaskRoute { path: "/task/:id", to: TaskPage }
page TaskPage { ... }

----------------------------------------

TITLE: Implementing Custom Signup Action in Wasp
DESCRIPTION: This snippet shows how to create a custom signup action in Wasp, including user validation, password hashing, and user creation using Wasp's auth utilities.

LANGUAGE: wasp
CODE:
action customSignup {
  fn: import { signup } from "@src/auth/signup.js",
}

LANGUAGE: javascript
CODE:
import {
  ensurePasswordIsPresent,
  ensureValidPassword,
  ensureValidUsername,
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'

export const signup = async (args, _context) => {
  ensureValidUsername(args)
  ensurePasswordIsPresent(args)
  ensureValidPassword(args)

  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      // Any additional data you want to store on the User entity
      {},
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  // Your custom code after sign-up.
  // ...

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: Implementing Custom Signup Action in Wasp
DESCRIPTION: This snippet shows how to create a custom signup action in Wasp, including user validation, password hashing, and user creation using Wasp's auth utilities.

LANGUAGE: wasp
CODE:
action customSignup {
  fn: import { signup } from "@src/auth/signup.js",
}

LANGUAGE: javascript
CODE:
import {
  ensurePasswordIsPresent,
  ensureValidPassword,
  ensureValidUsername,
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'

export const signup = async (args, _context) => {
  ensureValidUsername(args)
  ensurePasswordIsPresent(args)
  ensureValidPassword(args)

  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      // Any additional data you want to store on the User entity
      {},
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  // Your custom code after sign-up.
  // ...

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: TypeScript Query Implementation
DESCRIPTION: Migrated TypeScript version of the getTaskInfo query with type definitions and Wasp-specific type features.

LANGUAGE: typescript
CODE:
import HttpError from 'wasp/server'
import { type Task } from '@wasp/entities'
import { type GetTaskInfo } from '@wasp/server/operations'

function getInfoMessage(task: Pick<Task, 'isDone' | 'description'>): string {
  const isDoneText = task.isDone ? 'is done' : 'is not done'
  return `Task '${task.description}' is ${isDoneText}.`
}

export const getTaskInfo: GetTaskInfo<Pick<Task, 'id'>, string> = async (
  { id },
  context
) => {
  const Task = context.entities.Task

  const task = await Task.findUnique({ where: { id } })
  if (!task) {
    throw new HttpError(404)
  }

  return getInfoMessage(task)
}

----------------------------------------

TITLE: Setting Environment Variables Post-Deploy
DESCRIPTION: Command to set environment variables after deployment using the secrets command.

LANGUAGE: shell
CODE:
wasp deploy fly cmd secrets set GOOGLE_CLIENT_ID=<...> GOOGLE_CLIENT_SECRET=<...> --context=server

----------------------------------------

TITLE: Creating a Wasp Project with Todo App TypeScript Template
DESCRIPTION: This command creates a new Wasp project using the Todo App with TypeScript template, which includes authentication and full-stack type safety features.

LANGUAGE: bash
CODE:
wasp new <project-name> -t todo-ts

----------------------------------------

TITLE: Unit Testing a Helper Function in TypeScript
DESCRIPTION: Shows how to write a unit test for the areThereAnyTasks helper function using Vitest in TypeScript.

LANGUAGE: typescript
CODE:
import { test, expect } from "vitest";

import { areThereAnyTasks } from "./helpers";

test("areThereAnyTasks", () => {
  expect(areThereAnyTasks([])).toBe(false);
});

----------------------------------------

TITLE: Installing Rosetta for Mac M1/M2
DESCRIPTION: Command to install Rosetta translation layer for running x86 applications on Apple Silicon.

LANGUAGE: bash
CODE:
softwareupdate --install-rosetta

----------------------------------------

TITLE: Authenticated Task Queries
DESCRIPTION: Implementation of task queries with user authentication checks.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'
import { HttpError } from 'wasp/server'
import { GetTasks } from 'wasp/server/operations'

export const getTasks: GetTasks<void, Task[]> = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401)
  }
  return context.entities.Task.findMany({
    where: { user: { id: context.user.id } },
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Main Wasp Configuration File
DESCRIPTION: Basic Wasp configuration file showing app declaration, routing setup, and page component definition with support for both JavaScript and TypeScript.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "{latestWaspVersion}" // Pins the version of Wasp to use.
  },
  title: "TodoApp" // Used as the browser tab title. Note that all strings in Wasp are double quoted!
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  // We specify that the React implementation of the page is exported from
  // `src/MainPage.jsx`. This statement uses standard JS import syntax.
  // Use `@src` to reference files inside the `src` folder.
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: New Project Structure in Wasp 0.12.X
DESCRIPTION: Demonstrates the updated file structure for a fresh Wasp project created with version 0.12.X, highlighting the differences from the previous version.

LANGUAGE: plaintext
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ public
‚îÇ   ‚îî‚îÄ‚îÄ .gitkeep
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ queries.ts
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îú‚îÄ‚îÄ .waspignore
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Configuring Keycloak Auth with Custom Settings
DESCRIPTION: This snippet shows how to configure Keycloak authentication with custom settings, including a config function and user signup fields.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      keycloak: {
        configFn: import { getConfig } from "@src/auth/keycloak.js",
        userSignupFields: import { userSignupFields } from "@src/auth/keycloak.js"
      }
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Defining WebSocket Server Logic in TypeScript
DESCRIPTION: Shows how to define the WebSocket server logic using Socket.IO in TypeScript, including type definitions for events and payloads to ensure full-stack type safety.

LANGUAGE: typescript
CODE:
import { v4 as uuidv4 } from 'uuid'
import { getFirstProviderUserId } from 'wasp/auth'
import { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'

export const webSocketFn: WebSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
      // You can also use your entities here:
      // await context.entities.SomeEntity.create({ someField: msg })
    })
  })
}

type WebSocketFn = WebSocketDefinition<
  ClientToServerEvents,
  ServerToClientEvents,
  InterServerEvents,
  SocketData
>

interface ServerToClientEvents {
  chatMessage: (msg: { id: string, username: string, text: string }) => void;
}

interface ClientToServerEvents {
  chatMessage: (msg: string) => void;
}

interface InterServerEvents {}

interface SocketData extends WaspSocketData {}

----------------------------------------

TITLE: Using Link Component with Optional Static Segment in React
DESCRIPTION: Shows how to use the Link component with an optional static segment route in a React component.

LANGUAGE: jsx
CODE:
/* You can include ... */
<Link to="/task/:id/details" params={{ id: 1 }}>
  Task 1
</Link>

/* ... or exclude the optional segment */
<Link to="/task/:id" params={{ id: 1 }}>
  Task 1
</Link>

----------------------------------------

TITLE: Old Auth Configuration Example
DESCRIPTION: Example showing the old authentication configuration in Wasp 0.11.X

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

entity User {=psl
  id                        Int           @id @default(autoincrement())
  username                  String        @unique
  password                  String
  externalAuthAssociations  SocialLogin[]
psl=}

entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

----------------------------------------

TITLE: Customizing Vite Base Path
DESCRIPTION: Example of how to configure a custom base path for serving the client application.

LANGUAGE: javascript
CODE:
export default {
  base: '/my-app/',
}

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  base: '/my-app/',
})

----------------------------------------

TITLE: Deploying Wasp App to Fly.io
DESCRIPTION: Basic command to deploy a new Wasp application to Fly.io platform. Requires flyctl CLI and specifies app name and region.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Deploying Wasp App to Fly.io
DESCRIPTION: Basic command to deploy a new Wasp application to Fly.io platform. Requires flyctl CLI and specifies app name and region.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Configuring Auth Hooks in Wasp App
DESCRIPTION: Basic configuration for setting up authentication hooks in a Wasp application file.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  auth: {
    userEntity: User,
    methods: {
      ...
    },
    onBeforeSignup: import { onBeforeSignup } from "@src/auth/hooks",
    onAfterSignup: import { onAfterSignup } from "@src/auth/hooks",
    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from "@src/auth/hooks",
    onBeforeLogin: import { onBeforeLogin } from "@src/auth/hooks",
    onAfterLogin: import { onAfterLogin } from "@src/auth/hooks",
  },
}

----------------------------------------

TITLE: Registering Seed Functions in Wasp Configuration
DESCRIPTION: This snippet shows how to register database seed functions in the Wasp application configuration. It demonstrates importing and specifying multiple seed functions for different environments.

LANGUAGE: jsx
CODE:
app MyApp {
  // ...
  db: {
    // ...
    seeds: [
      import { devSeedSimple } from "@server/dbSeeds.js",
      import { prodSeed } from "@server/dbSeeds.js"
    ]
  }
}

----------------------------------------

TITLE: Updating Package.json Configuration
DESCRIPTION: Demonstrates the required changes to package.json, including adding type: module and updating the Prisma version.

LANGUAGE: json
CODE:
{
  "type": "module",
  "devDependencies": {
    "prisma": "5.19.1"
  }
}

----------------------------------------

TITLE: Implementing a Query in TypeScript
DESCRIPTION: This snippet shows the implementation of the 'getRecipes' query in TypeScript, demonstrating type safety and Prisma usage.

LANGUAGE: typescript
CODE:
import type { GetRecipes } from "@wasp/queries/types";
import type { Recipe } from "@wasp/entities";

export const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {
  return context.entities.Recipe.findMany( // Prisma query
    { where: { user: { id: context.user.id } } }
  );
};

export const addRecipe ...

----------------------------------------

TITLE: Defining WebSocket Server Logic in TypeScript
DESCRIPTION: Shows how to define the WebSocket server logic using Socket.IO in TypeScript, including type definitions for events and payloads to ensure full-stack type safety.

LANGUAGE: typescript
CODE:
import { v4 as uuidv4 } from 'uuid'
import { getFirstProviderUserId } from 'wasp/auth'
import { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'

export const webSocketFn: WebSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
      // You can also use your entities here:
      // await context.entities.SomeEntity.create({ someField: msg })
    })
  })
}

type WebSocketFn = WebSocketDefinition<
  ClientToServerEvents,
  ServerToClientEvents,
  InterServerEvents,
  SocketData
>

interface ServerToClientEvents {
  chatMessage: (msg: { id: string, username: string, text: string }) => void;
}

interface ClientToServerEvents {
  chatMessage: (msg: string) => void;
}

interface InterServerEvents {}

interface SocketData extends WaspSocketData {}

----------------------------------------

TITLE: Tailwind CSS Usage Example
DESCRIPTION: Example of using Tailwind CSS classes in a React component.

LANGUAGE: jsx
CODE:
// ...

<h1 className="text-3xl font-bold underline">
  Hello world!
</h1>

// ...

----------------------------------------

TITLE: Database Seeding Implementation in JavaScript
DESCRIPTION: Example implementation of a database seed function that creates a user and associated task.

LANGUAGE: javascript
CODE:
import { createTask } from './actions.js'
import { sanitizeAndSerializeProviderData } from 'wasp/server/auth'

export const devSeedSimple = async (prisma) => {
  const user = await createUser(prisma, {
    username: 'RiuTheDog',
    password: 'bark1234',
  })

  await createTask(
    { description: 'Chase the cat' },
    { user, entities: { Task: prisma.task } }
  )
}

async function createUser(prisma, data) {
  const newUser = await prisma.user.create({
    data: {
      auth: {
        create: {
          identities: {
            create: {
              providerName: 'username',
              providerUserId: data.username,
              providerData: sanitizeAndSerializeProviderData({
                hashedPassword: data.password
              }),
            },
          },
        },
      },
    },
  })

  return newUser
}

----------------------------------------

TITLE: Implementing a Database Seed Function in JavaScript
DESCRIPTION: This example demonstrates a seed function named 'devSeedSimple' that creates a user and a task using existing action functions. It shows how to interact with the Prisma client and reuse application logic in seeding.

LANGUAGE: javascript
CODE:
import { createTask } from './actions.js'

export const devSeedSimple = async (prismaClient) => {
  const user = await createUser(prismaClient, {
      username: "RiuTheDog",
      password: "bark1234"
  })

  await createTask(
    { description: "Chase the cat" },
    { user, entities: { Task: prismaClient.task } }
  )
}

async function createUser (prismaClient, data) {
  const { password, ...newUser } = await prismaClient.user.create({ data })
  return newUser
}

----------------------------------------

TITLE: Setting Server Secrets
DESCRIPTION: Command to set environment variables for the server application.

LANGUAGE: shell
CODE:
wasp deploy fly cmd secrets set GOOGLE_CLIENT_ID=<...> GOOGLE_CLIENT_SECRET=<...> --context=server

----------------------------------------

TITLE: Setting Server Secrets
DESCRIPTION: Command to set environment variables for the server application.

LANGUAGE: shell
CODE:
wasp deploy fly cmd secrets set GOOGLE_CLIENT_ID=<...> GOOGLE_CLIENT_SECRET=<...> --context=server

----------------------------------------

TITLE: Implementing Password Migration Action
DESCRIPTION: TypeScript implementation of the password migration action, including old password verification and new password hashing.

LANGUAGE: typescript
CODE:
import SecurePassword from "secure-password";
import { HttpError } from "wasp/server";
import {
  createProviderId,
  deserializeAndSanitizeProviderData,
  findAuthIdentity,
  updateAuthIdentityProviderData,
} from "wasp/server/auth";
import { MigratePassword } from "wasp/server/operations";

type MigratePasswordInput = {
  username: string;
  password: string;
};
type MigratePasswordOutput = {
  message: string;
};

export const migratePassword: MigratePassword<
  MigratePasswordInput,
  MigratePasswordOutput
> = async ({ password, username }, _context) => {
  const providerId = createProviderId("username", username);
  const authIdentity = await findAuthIdentity(providerId);

  if (!authIdentity) {
    throw new HttpError(400, "Something went wrong");
  }

  const providerData = deserializeAndSanitizeProviderData<"username">(
    authIdentity.providerData
  );

  try {
    const SP = new SecurePassword();

    // This will verify the password using the old algorithm
    const result = await SP.verify(
      Buffer.from(password),
      Buffer.from(providerData.hashedPassword, "base64")
    );

    if (result !== SecurePassword.VALID) {
      throw new HttpError(400, "Something went wrong");
    }

    // This will hash the password using the new algorithm and update the
    // provider data in the database.
    await updateAuthIdentityProviderData<"username">(providerId, providerData, {
      hashedPassword: password,
    });
  } catch (e) {
    throw new HttpError(400, "Something went wrong");
  }

  return {
    message: "Password migrated successfully.",
  };
};

----------------------------------------

TITLE: Using Entity Types in TypeScript
DESCRIPTION: Shows how to import and use Wasp entity types in TypeScript, including type declarations and function definitions.

LANGUAGE: typescript
CODE:
import { Task } from 'wasp/entities'

const task: Task = { ... }

// You can also define functions for working with entities
function getInfoMessage(task: Task): string {
  const isDoneText = task.isDone ? "is done" : "is not done"
  return `Task '${task.description}' is ${isDoneText}.`
}

----------------------------------------

TITLE: NVM Node.js Installation
DESCRIPTION: Commands for installing and managing Node.js versions using NVM (Node Version Manager).

LANGUAGE: shell
CODE:
nvm install 20
nvm use 20
node -v

----------------------------------------

TITLE: Basic Prisma Schema Definition
DESCRIPTION: Example of a Prisma schema file defining database configuration and models with relationships.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id      Int        @id @default(autoincrement())
  tasks   Task[]
}

model Task {
  id          Int        @id @default(autoincrement())
  description String
  isDone      Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
}

----------------------------------------

TITLE: Importing React Components and Utilities in JSX
DESCRIPTION: Import statements for React components and utilities used in the blog post layout including Link, useBaseUrl, and custom components.

LANGUAGE: jsx
CODE:
import Link from '@docusaurus/Link';
import useBaseUrl from '@docusaurus/useBaseUrl';

import InBlogCta from './components/InBlogCta';
import WaspIntro from './_wasp-intro.md';
import ImgWithCaption from './components/ImgWithCaption'

----------------------------------------

TITLE: Deploying to Specific Fly.io Organization
DESCRIPTION: Command to deploy a Wasp app to a specific Fly.io organization using the Wasp CLI.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia --org hive

----------------------------------------

TITLE: Prisma Preview Features Configuration
DESCRIPTION: Shows how to enable Prisma preview features like PostgreSQL extensions in the schema configuration.

LANGUAGE: prisma
CODE:
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// ...

----------------------------------------

TITLE: Setting Up Heroku for Wasp Deployment
DESCRIPTION: Commands to create a new Heroku app, provision a PostgreSQL database, and set required environment variables for a Wasp application.

LANGUAGE: bash
CODE:
heroku create <app-name>
heroku addons:create --app <app-name> heroku-postgresql:mini
heroku config:set --app <app-name> JWT_SECRET=<random_string_at_least_32_characters_long>
heroku config:set --app <app-name> WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>
heroku config:set --app <app-name> WASP_SERVER_URL=<url_of_where_server_will_be_deployed>

----------------------------------------

TITLE: Database Seeding Configuration in Wasp
DESCRIPTION: Configuration of database seed functions in Wasp application file.

LANGUAGE: wasp
CODE:
app MyApp {
  db: {
    seeds: [
      import { devSeedSimple } from "@src/dbSeeds.js",
      import { prodSeed } from "@src/dbSeeds.js"
    ]
  }
}

----------------------------------------

TITLE: Migrating Redirect to Navigate Component
DESCRIPTION: Examples showing how to update from React Router 5's Redirect component to React Router 6's Navigate component.

LANGUAGE: tsx
CODE:
import { Redirect } from 'react-router-dom'

export function SomePage() {
  return (
    <Redirect to="/new-route" />
  )
}

LANGUAGE: tsx
CODE:
import { Navigate } from 'react-router-dom'

export function SomePage() {
  return (
    <Navigate to="/new-route" replace />
  )
}

----------------------------------------

TITLE: Accessing Server Configuration in Wasp
DESCRIPTION: Demonstrates how to import and access the server configuration object which contains frontendUrl. This URL can be set via the WASP_WEB_CLIENT_URL environment variable.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/server'

console.log(config.frontendUrl)

----------------------------------------

TITLE: Creating a New Wasp Project with Vector Similarity Search Template
DESCRIPTION: This command creates a new Wasp project using the Vector Similarity Search template. The template includes features for generating embeddings and performing vector similarity search, using OpenAI Embeddings API, Vector DB (Pinecone), Tailwind, and Full-stack Type Safety.

LANGUAGE: bash
CODE:
wasp new <project-name> -t embeddings

----------------------------------------

TITLE: Implementing Login Page in React
DESCRIPTION: Creates a React component for the login page using Wasp's LoginForm component.

LANGUAGE: jsx
CODE:
import { Link } from 'react-router-dom'
import { LoginForm } from 'wasp/client/auth'

export const LoginPage = () => {
  return (
    <div style={{ maxWidth: '400px', margin: '0 auto' }}>
      <LoginForm />
      <br />
      <span>
        I don't have an account yet (<Link to="/signup">go to signup</Link>).
      </span>
    </div>
  )
}

----------------------------------------

TITLE: Running Arbitrary Fly Commands with Wasp CLI
DESCRIPTION: Example of how to run arbitrary Fly commands using the Wasp CLI, such as listing secrets for the server app.

LANGUAGE: shell
CODE:
wasp deploy fly cmd secrets list --context server

----------------------------------------

TITLE: Running Arbitrary Fly Commands with Wasp CLI
DESCRIPTION: Example of how to run arbitrary Fly commands using the Wasp CLI, such as listing secrets for the server app.

LANGUAGE: shell
CODE:
wasp deploy fly cmd secrets list --context server

----------------------------------------

TITLE: Defining User Entity in Wasp
DESCRIPTION: Shows how to define the User entity in the Wasp file, which is required for authentication.

LANGUAGE: wasp
CODE:
entity User {=psl
    id          Int     @id @default(autoincrement())
    // ...
psl=}

----------------------------------------

TITLE: Updated Tailwind Configuration for Wasp 0.12.X
DESCRIPTION: Shows how to update the tailwind.config.cjs file to use the resolveProjectPath function for correct path resolution in Wasp 0.12.X.

LANGUAGE: javascript
CODE:
const { resolveProjectPath } = require('wasp/dev')

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}'),
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

----------------------------------------

TITLE: Implementing getAllPhrases Query in Wasp
DESCRIPTION: Server-side implementation of the getAllPhrases query using Prisma to fetch phrases with translations.

LANGUAGE: jsx
CODE:
export async function getAllPhrases(args, context) {
    return context.entities.Phrase.findMany({
        include: {
            translations: true
        }
    });
}

----------------------------------------

TITLE: Migrating Redirect to Navigate Component
DESCRIPTION: Examples showing how to update from React Router 5's Redirect component to React Router 6's Navigate component.

LANGUAGE: tsx
CODE:
import { Redirect } from 'react-router-dom'

export function SomePage() {
  return (
    <Redirect to="/new-route" />
  )
}

LANGUAGE: tsx
CODE:
import { Navigate } from 'react-router-dom'

export function SomePage() {
  return (
    <Navigate to="/new-route" replace />
  )
}

----------------------------------------

TITLE: Customizing Per-Path Middleware in Wasp and JavaScript
DESCRIPTION: This example shows how to customize middleware for all API routes under a common path in a Wasp application using JavaScript. It adds a custom middleware to the '/foo/bar' path.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@src/apis",
  path: "/foo/bar"
}

LANGUAGE: javascript
CODE:
export const fooBarNamespaceMiddlewareFn = (middlewareConfig) => {
  const customMiddleware = (_req, _res, next) => {
    console.log('fooBarNamespaceMiddlewareFn: custom middleware')
    next()
  }

  middlewareConfig.set('custom.middleware', customMiddleware)

  return middlewareConfig
}

----------------------------------------

TITLE: Implementing Server Setup with Bull Queue
DESCRIPTION: Demonstrates the implementation of server setup function using Bull for queue management and job processing.

LANGUAGE: javascript
CODE:
import Queue from 'bull'

const queue = new Queue('waspleau', process.env.REDIS_URL || 'redis://127.0.0.1:6379',
  { defaultJobOptions: { removeOnComplete: true } }
)

queue.process('*', async (job) => { ... })

export default async () => {
  // To initially populate the queue, we can do:
  await queue.add({ ... }) // first run, one-off job
  await queue.add({ ... }, { repeat: { cron: '*/10 * * * *' } }) // recurring job
}

----------------------------------------

TITLE: Creating a New Wasp Project Interactively
DESCRIPTION: Demonstrates the interactive process of creating a new Wasp project using the 'wasp new' command, including template selection and project setup.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] ai-generated
    ü§ñ Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)
‚ñ∏ 1

üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Creating a New Wasp Project Interactively
DESCRIPTION: Demonstrates the interactive process of creating a new Wasp project using the 'wasp new' command, including template selection and project setup.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] ai-generated
    ü§ñ Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)
‚ñ∏ 1

üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Implementing Login Form Component
DESCRIPTION: Example of implementing a login page using Wasp's LoginForm component, showing both route configuration and component usage.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@client/LoginPage.tsx"
}

LANGUAGE: typescript
CODE:
import { LoginForm } from '@wasp/auth/forms/Login'

export function LoginPage() {
  return <LoginForm />
}

----------------------------------------

TITLE: Configuring Discord Auth in Wasp File
DESCRIPTION: Basic configuration for enabling Discord authentication in the Wasp application file.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      discord: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: React Frontend Implementation in JavaScript
DESCRIPTION: React component implementation that uses the getTasks query to display tasks using Wasp's useQuery hook.

LANGUAGE: jsx
CODE:
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

const TaskView = ({ task }) => {
  return (
    <div>
      <input type="checkbox" id={String(task.id)} checked={task.isDone} />
      {task.description}
    </div>
  )
}

const TasksList = ({ tasks }) => {
  if (!tasks?.length) return <div>No tasks</div>

  return (
    <div>
      {tasks.map((task, idx) => (
        <TaskView task={task} key={idx} />
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Using the Link Component in React with Wasp
DESCRIPTION: Shows how to use the custom Link component from wasp/client/router to create type-safe links in a React component.

LANGUAGE: jsx
CODE:
import { Link } from 'wasp/client/router'

export const TaskList = () => {
  // ...

  return (
    <div>
      {tasks.map((task) => (
        <Link
          key={task.id}
          to="/task/:id"
          params={{ id: task.id }}>
          {task.description}
        </Link>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Updating Wasp Version Configuration
DESCRIPTION: Example of updating the Wasp version field in the main configuration file.

LANGUAGE: wasp
CODE:
app MyApp {
  wasp: {
    version: "^0.14.0"
  },
}

----------------------------------------

TITLE: Cloudflare Deployment
DESCRIPTION: Commands to deploy the client to Cloudflare Pages.

LANGUAGE: bash
CODE:
npx wrangler login
npx wrangler pages deploy ./build --commit-dirty=true --branch=main

----------------------------------------

TITLE: Task Update Implementation
DESCRIPTION: Server-side implementation of updateTask Action that modifies a task's isDone status.

LANGUAGE: typescript
CODE:
type UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>

export const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (
  { id, isDone },
  context
) => {
  return context.entities.Task.update({
    where: { id },
    data: {
      isDone: isDone,
    },
  })
}

----------------------------------------

TITLE: Defining Authentication Routes and Pages
DESCRIPTION: This code defines the necessary authentication routes and pages in the Wasp file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@client/pages/auth.jsx"
}

----------------------------------------

TITLE: Creating Auth Pages in React
DESCRIPTION: React components for login and signup pages using Wasp's auth components.

LANGUAGE: jsx
CODE:
import { LoginForm, SignupForm } from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
    </Layout>
  )
}

export function Signup() {
  return (
    <Layout>
      <SignupForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </Layout>
  )
}

// A layout component to center the content
export function Layout({ children }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Setting GitHub OAuth Environment Variables
DESCRIPTION: This snippet shows how to set the required GitHub OAuth environment variables in the .env.server file.

LANGUAGE: bash
CODE:
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

----------------------------------------

TITLE: Accessing Server Configuration in Wasp
DESCRIPTION: Demonstrates how to import and access the server configuration object, which contains the frontendUrl property that can be set via WASP_WEB_CLIENT_URL environment variable.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/server'

console.log(config.frontendUrl)

----------------------------------------

TITLE: Defining a Task Entity in Wasp
DESCRIPTION: This snippet demonstrates how to define a Task entity in Wasp using Prisma Schema Language (PSL). It creates a model with an id, description, and isDone field.

LANGUAGE: wasp
CODE:
entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
psl=}

----------------------------------------

TITLE: Setting GitHub OAuth Environment Variables
DESCRIPTION: This snippet shows how to set the required GitHub OAuth environment variables in the .env.server file.

LANGUAGE: bash
CODE:
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

----------------------------------------

TITLE: Importing React Components in Markdown
DESCRIPTION: Import statements for React components and utilities used in the blog post

LANGUAGE: javascript
CODE:
import Link from '@docusaurus/Link';
import useBaseUrl from '@docusaurus/useBaseUrl';
import InBlogCta from './components/InBlogCta';
import WaspIntro from './_wasp-intro.md';
import ImgWithCaption from './components/ImgWithCaption'

----------------------------------------

TITLE: Project Structure with Prisma Schema
DESCRIPTION: Shows the basic project structure where schema.prisma file is located in the root directory.

LANGUAGE: c
CODE:
.
‚îú‚îÄ‚îÄ main.wasp
...
// highlight-next-line
‚îú‚îÄ‚îÄ schema.prisma
‚îú‚îÄ‚îÄ src
‚îú‚îÄ‚îÄ tsconfig.json
‚îî‚îÄ‚îÄ vite.config.ts

----------------------------------------

TITLE: Rendering Task Component without Optimistic Updates in JSX
DESCRIPTION: Implements a Task component that renders a checkbox for toggling a task's status, without optimistic updates.

LANGUAGE: jsx
CODE:
import updateTask from '@wasp/queries'

function Task({ id, isDone, description }) {
  return (
    <div className="task">
      <label className="description">
        <input
          type='checkbox' id={id}
          checked={isDone}
          onChange={
            (e) => updateTask({ id, isDone: e.target.checked })
          }
        /><span>{description}</span></label>
    </div>
  )
}

----------------------------------------

TITLE: Displaying Old Project Structure in Wasp 0.11.x
DESCRIPTION: Shows the file tree of a fresh Wasp project created with version 0.11.x, illustrating the old project structure.

LANGUAGE: plaintext
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ client
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ react-app-env.d.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îÇ   ‚îú‚îÄ‚îÄ server
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îú‚îÄ‚îÄ shared
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îî‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Configuring Base Directory in Wasp
DESCRIPTION: Demonstrates how to set the base directory for serving the client application from a subdirectory.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    baseDir: "/my-app",
  }
}

----------------------------------------

TITLE: Creating Worker Template
DESCRIPTION: Shows the structure of a worker template for standardizing job processing implementation.

LANGUAGE: javascript
CODE:
const workerFunction = async (opts) => {
  return [
    { name: 'Metric 1 name', value: 'foo', updatedAt: ... },
    { name: 'Metric 2 name', value: 'bar', updatedAt: ... },
  ]
}

export const workerTemplate = { name: 'Job Name', fn: workerFunction, schedule: '*/10 * * * *' }

----------------------------------------

TITLE: OAuth Config Function - After Migration
DESCRIPTION: Shows the new format of the OAuth provider configuration function with simplified scope definition.

LANGUAGE: typescript
CODE:
export function getConfig() {
    return {
        scopes: ['profile', 'email'],
    }
}

----------------------------------------

TITLE: Migrating Entities to schema.prisma
DESCRIPTION: Move entity definitions from main.wasp to the new schema.prisma file, including datasource and generator configurations.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int @id @default(autoincrement())
  tasks    Task[]
}

model Task {
  id          Int @id @default(autoincrement())
  description String
  isDone      Boolean
  userId      Int
  user        User @relation(fields: [userId], references: [id])
}

----------------------------------------

TITLE: Implementing Actions with Entities
DESCRIPTION: Example of implementing Actions that use Entities

LANGUAGE: javascript
CODE:
export const createTask = async (args, context) => {
  const newTask = await context.entities.Task.create({
    data: {
      description: args.description,
      isDone: false,
    },
  })
  return newTask
}

export const markTaskAsDone = async (args, context) => {
  await context.entities.Task.update({
    where: { id: args.id },
    data: { isDone: true },
  })
}

----------------------------------------

TITLE: Implementing Actions with Entities
DESCRIPTION: Example of implementing Actions that use Entities

LANGUAGE: javascript
CODE:
export const createTask = async (args, context) => {
  const newTask = await context.entities.Task.create({
    data: {
      description: args.description,
      isDone: false,
    },
  })
  return newTask
}

export const markTaskAsDone = async (args, context) => {
  await context.entities.Task.update({
    where: { id: args.id },
    data: { isDone: true },
  })
}

----------------------------------------

TITLE: Starting the Wasp Development Server
DESCRIPTION: These commands navigate to the project directory and start the Wasp development server.

LANGUAGE: sh
CODE:
$ cd TodoApp
$ wasp start

----------------------------------------

TITLE: Using Link Component with Catch-All Route in React
DESCRIPTION: Shows how to use the Link component with a catch-all route in a React component.

LANGUAGE: jsx
CODE:
<Link to="/pages/*" params={{ '*': 'about' }}>
  About
</Link>

----------------------------------------

TITLE: Implementing onAfterLogin Hook
DESCRIPTION: Example of implementing the onAfterLogin hook to perform actions after user login.

LANGUAGE: javascript
CODE:
export const onAfterLogin = async ({
  providerId,
  user,
  oauth,
  prisma,
  req,
}) => {
  console.log('user object', user)

  if (oauth) {
    console.log('accessToken', oauth.tokens.accessToken)
    console.log('uniqueRequestId', oauth.uniqueRequestId)

    const id = oauth.uniqueRequestId
    const data = someKindOfStore.get(id)
    if (data) {
      console.log('saved data for the ID', data)
    }
    someKindOfStore.delete(id)
  }
}

----------------------------------------

TITLE: GitHub Actions for Netlify Deployment
DESCRIPTION: Example GitHub Actions workflow for deploying to Netlify.

LANGUAGE: yaml
CODE:
name: Deploy Client to Netlify

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Wasp
        run: curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.16.0

      - name: Wasp Build
        run: wasp build

      - name: Install dependencies and build the client
        run: |
          cd ./.wasp/build/web-app
          npm install
          REACT_APP_API_URL=${{ secrets.WASP_SERVER_URL }} npm run build

      - name: Deploy to Netlify
        run: |
          cd ./.wasp/build/web-app
          npx netlify-cli@17.36.1 deploy --prod --dir=build --auth=$NETLIFY_AUTH_TOKEN --site=$NETLIFY_SITE_NAME

    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_NAME: netlify-site-name

----------------------------------------

TITLE: Creating a Fly.io App for Wasp Deployment
DESCRIPTION: Commands to set up a new Fly.io application for deploying a Wasp app, including database provisioning and environment variable configuration.

LANGUAGE: bash
CODE:
cd .wasp/build
flyctl launch --remote-only
cp fly.toml ../../
flyctl secrets set PORT=8080
flyctl secrets set JWT_SECRET=<random_string_at_least_32_characters_long>
flyctl secrets set WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>
flyctl secrets set WASP_SERVER_URL=<url_of_where_server_will_be_deployed>

----------------------------------------

TITLE: Displaying Wasp CLI Commands and Usage
DESCRIPTION: Shows the output of running the 'wasp' command without arguments, listing all available commands, their descriptions, and usage examples.

LANGUAGE: bash
CODE:
USAGE
  wasp <command> [command-args]

COMMANDS
  GENERAL
    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.
      OPTIONS:
        -t|--template <template-name>
           Check out the templates list here: https://github.com/wasp-lang/starters

    new:ai <app-name> <app-description> [<config-json>]
      Uses AI to create a new Wasp project just based on the app name and the description.
      You can do the same thing with `wasp new` interactively.
      Run `wasp new:ai` for more info.

    version               Prints current version of CLI.
    waspls                Run Wasp Language Server. Add --help to get more info.
    completion            Prints help on bash completion.
    uninstall             Removes Wasp from your system.
  IN PROJECT
    start                 Runs Wasp app in development mode, watching for file changes.
    start db              Starts managed development database for you.
    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.
    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.
                          Wasp equivalent of 'have you tried closing and opening it again?'.
    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.
    deploy                Deploys your Wasp app to cloud hosting providers.
    telemetry             Prints telemetry status.
    deps                  Prints the dependencies that Wasp uses in your project.
    dockerfile            Prints the contents of the Wasp generated Dockerfile.
    info                  Prints basic information about the current Wasp project.
    test                  Executes tests in your project.
    studio                (experimental) GUI for inspecting your Wasp app.

EXAMPLES
  wasp new MyApp
  wasp start
  wasp db migrate-dev

Docs: https://wasp.sh/docs
Discord (chat): https://discord.gg/rzdnErX
Newsletter: https://wasp.sh/#signup

----------------------------------------

TITLE: Disabling Automatic Browser Opening in Vite Dev Server (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to modify the Vite config to stop the browser from automatically opening when starting the development server.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  server: {
    open: false,
  },
})

----------------------------------------

TITLE: Setting Up Server Setup Function in Wasp
DESCRIPTION: Shows how to configure the server setup function in Wasp configuration to initialize background processing.

LANGUAGE: wasp
CODE:
app waspleau {
  ...

  server: {
    setupFn: import serverSetup from "@server/serverSetup.js"
  }
}

----------------------------------------

TITLE: User Entity Schema Definition
DESCRIPTION: Prisma schema definition for the User entity required for email authentication.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Customizing Auth UI Component in React
DESCRIPTION: Example showing how to customize the Wasp Auth UI component through props to match brand styling. The component automatically updates when auth providers are added or removed in the .wasp configuration file.

LANGUAGE: jsx
CODE:
<Auth.AuthForm
  appearance={{
    colors: {
      brand: '#1F769A',
      brandAccent: '#155274',
      submitButtonText: 'white'
    },
    borderRadius: '10px',
    inputBorderRadius: '8px',
    gap: '12px',
    padding: '16px',
    dividerMargin: '8px'
  }}
/>

----------------------------------------

TITLE: Adding a Page with URL Parameters in Wasp
DESCRIPTION: Demonstrates how to create a route with URL parameters and link it to a React component in Wasp.

LANGUAGE: wasp
CODE:
route HelloRoute { path: "/hello/:name", to: HelloPage }
page HelloPage {
  component: import { HelloPage } from "@src/HelloPage"
}

----------------------------------------

TITLE: Configuring Dummy Email Provider
DESCRIPTION: Demonstrates how to set up the Dummy email provider for development purposes in the main.wasp file.

LANGUAGE: wasp
CODE:
app Example {
  ...
  emailSender: {
    provider: Dummy,
  }
}

----------------------------------------

TITLE: Setting Custom Dev Server Port in Vite Config (TypeScript)
DESCRIPTION: This TypeScript example shows how to set a custom dev server port (4000) in the Vite configuration, along with the required environment variable change.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  server: {
    port: 4000,
  },
})

LANGUAGE: plaintext
CODE:
WASP_WEB_CLIENT_URL=http://localhost:4000

----------------------------------------

TITLE: Customizing Global Middleware in Wasp and TypeScript
DESCRIPTION: This example demonstrates how to customize global middleware in a Wasp application using TypeScript. It modifies the CORS configuration to allow additional domains.

LANGUAGE: wasp
CODE:
app todoApp {
  // ...

  server: {
    setupFn: import setup from "@src/serverSetup",
    middlewareConfigFn: import { serverMiddlewareFn } from "@src/serverSetup"
  },
}

LANGUAGE: typescript
CODE:
import cors from 'cors'
import { config, type MiddlewareConfigFn } from 'wasp/server'

export const serverMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  // Example of adding an extra domains to CORS.
  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))
  return middlewareConfig
}

----------------------------------------

TITLE: Using Tailwind Classes in JSX
DESCRIPTION: This JSX snippet demonstrates how to use Tailwind CSS classes in a React component within a Wasp project.

LANGUAGE: jsx
CODE:
// ...

<h1 className="text-3xl font-bold underline">
  Hello world!
</h1>

// ...

----------------------------------------

TITLE: Creating New Wasp Project - Bash Commands
DESCRIPTION: Commands for creating a new Wasp project and starting the development server

LANGUAGE: bash
CODE:
wasp new myApp
wasp start
mv src/client/MainPage.jsx src/client/MainPage.tsx

----------------------------------------

TITLE: React Chat Component with WebSocket Integration
DESCRIPTION: Client-side React component implementing a chat interface using Wasp's WebSocket hooks. Shows real-time message handling and connection status.

LANGUAGE: typescript
CODE:
export const ChatPage = () => {
  const [messageText, setMessageText] = useState('')
  const [messages, setMessages] = useState([])
  const { socket, isConnected } = useSocket()

  useSocketListener('chatMessage', logMessage)

  function logMessage(msg) {
    setMessages((priorMessages) => [msg, ...priorMessages])
  }

  function handleSubmit(e) {
    e.preventDefault()
    socket.emit('chatMessage', messageText)
    setMessageText('')
  }

  return (
    <>
      <h2>Chat {isConnected ? 'üü¢' : 'üî¥'}</h2>
      <div>
        <form onSubmit={handleSubmit}>
          <div>
            <input
              type="text"
              value={messageText}
              onChange={(e) => setMessageText(e.target.value)}
            />
            <button type="submit">Submit</button>
          </div>
        </form>
        <ul>
          {messages.map((msg) => (
            <li key={msg.id}>
              <em>{msg.username}</em>: {msg.text}
            </li>
          ))}
        </ul>
      </div>
    </>
  )

----------------------------------------

TITLE: Displaying New Project Structure in Wasp 0.12.0
DESCRIPTION: Shows the file tree of a fresh Wasp project created with version 0.12.0, illustrating the new project structure.

LANGUAGE: plaintext
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ public
‚îÇ   ‚îî‚îÄ‚îÄ .gitkeep
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ queries.ts
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îú‚îÄ‚îÄ .waspignore
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Using the Link Component in React
DESCRIPTION: Shows how to use the Link component from wasp/client/router to create type-safe links in a React component.

LANGUAGE: jsx
CODE:
import { Link } from 'wasp/client/router'

export const TaskList = () => {
  // ...

  return (
    <div>
      {tasks.map((task) => (
        <Link
          key={task.id}
          to="/task/:id"
          params={{ id: task.id }}>
          {task.description}
        </Link>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Frontend Permission Check with CASL.js in React
DESCRIPTION: Example demonstrating how to conditionally render UI elements based on user permissions using the CASL.js library in React.

LANGUAGE: jsx
CODE:
<Button disabled={!ability.can('update', 'Article')}>Update</Button>

----------------------------------------

TITLE: Configuring Multiple Authentication Methods in Wasp
DESCRIPTION: This snippet demonstrates how to enable multiple authentication methods (email, Google, and GitHub) in the main.wasp file. It shows the configuration for setting up multiple authentication providers in a Wasp application.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
      google: {},
      github: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Defining a Route in Wasp
DESCRIPTION: Demonstrates how to define a route in the main.wasp file, specifying the path and associated page component.

LANGUAGE: wasp
CODE:
route TaskRoute { path: "/task/:id", to: TaskPage }
page TaskPage { ... }

----------------------------------------

TITLE: Using LoginForm Component in React
DESCRIPTION: Demonstrates how to import and use the LoginForm component in a React component file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/LoginPage.jsx"
}

LANGUAGE: jsx
CODE:
import { LoginForm } from 'wasp/client/auth'

// Use it like this
export function LoginPage() {
  return <LoginForm />
}

----------------------------------------

TITLE: Customizing Global Middleware in Wasp and TypeScript
DESCRIPTION: This example demonstrates how to customize global middleware in a Wasp application using TypeScript. It shows adding extra domains to CORS configuration with proper type annotations.

LANGUAGE: wasp
CODE:
app todoApp {
  // ...

  server: {
    setupFn: import setup from "@src/serverSetup",
    middlewareConfigFn: import { serverMiddlewareFn } from "@src/serverSetup"
  },
}

LANGUAGE: typescript
CODE:
import cors from 'cors'
import { config, type MiddlewareConfigFn } from 'wasp/server'

export const serverMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  // Example of adding an extra domains to CORS.
  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))
  return middlewareConfig
}

----------------------------------------

TITLE: Basic React Component Structure for MainPage
DESCRIPTION: This code demonstrates the basic structure of the MainPage React component, including importing CSS and image files.

LANGUAGE: jsx
CODE:
import waspLogo from './waspLogo.png'
import './Main.css'

export const MainPage = () => {
  // ...
}

----------------------------------------

TITLE: Configuring PostCSS for Tailwind CSS in Wasp
DESCRIPTION: This snippet demonstrates the PostCSS configuration required for Tailwind CSS integration in Wasp projects. It includes the necessary plugins for Tailwind and Autoprefixer.

LANGUAGE: jsx
CODE:
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----------------------------------------

TITLE: Railway Deployment - Client Setup
DESCRIPTION: Commands to build and deploy the client to Railway.

LANGUAGE: bash
CODE:
cd web-app
npm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build
railway link
railway up

----------------------------------------

TITLE: Building Wasp Web App with npm and Custom API URL
DESCRIPTION: Install dependencies and build the React app with a custom API URL for the Wasp backend. This command uses npm to manage dependencies and build the project, setting the REACT_APP_API_URL environment variable.

LANGUAGE: bash
CODE:
npm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build

----------------------------------------

TITLE: Using Link with Catch-All Route in React
DESCRIPTION: Shows how to use the Link component with a catch-all route in a React component.

LANGUAGE: jsx
CODE:
<Link to="/pages/*" params={{ '*': 'about' }}>
  About
</Link>

----------------------------------------

TITLE: Building Wasp App for Deployment
DESCRIPTION: Command to generate deployable code for a Wasp app.

LANGUAGE: bash
CODE:
wasp build

----------------------------------------

TITLE: Defining Query Operation in Wasp
DESCRIPTION: Wasp configuration for the getTaskInfo query operation with entity dependencies.

LANGUAGE: wasp
CODE:
query getTaskInfo {
  fn: import { getTaskInfo } from "@src/queries",
  entities: [Task]
}

----------------------------------------

TITLE: Configuring Keycloak Auth in Wasp
DESCRIPTION: Basic configuration for enabling Keycloak authentication in the Wasp application file

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      keycloak: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Breaking Down Complex Functions in JavaScript
DESCRIPTION: This example shows how to improve code structure by breaking down a complex function with a long name into multiple smaller, more focused functions.

LANGUAGE: javascript
CODE:
// Find a free machine and use it, or create a new machine
// if needed. Then on that machine, set up the new worker 
// with the given Docker image and setup cmd. Finally,
// start executing a job on that worker and return its id.
async function getJobId (
  machineType, machineRegion,
  workerDockerImage, workerSetupCmd,
  jobDescription
) {
  ...
}

LANGUAGE: javascript
CODE:
async function procureFreeMachine (type, region) { ... }
async function setUpDockerWorker (machineId, dockerImage, setupCmd) { ... }
async function startExecutingJob (workerId, jobDescription) { ... }

----------------------------------------

TITLE: Custom Create Task Implementation
DESCRIPTION: Custom implementation of the create operation for Tasks, showing how to connect a task to the authenticated user

LANGUAGE: typescript
CODE:
import { type Tasks } from 'wasp/server/crud'
import { type Task } from 'wasp/entities'
import { HttpError } from 'wasp/server'

type CreateTaskInput = { description: string; isDone: boolean }

export const createTask: Tasks.CreateAction<CreateTaskInput, Task> = async (
  args,
  context
) => {
  if (!context.user) {
    throw new HttpError(401, 'User not authenticated.')
  }

  const { description, isDone } = args
  const { Task } = context.entities

  return await Task.create({
    data: {
      description,
      isDone,
      user: {
        connect: {
          id: context.user.id,
        },
      },
    },
  })
}

----------------------------------------

TITLE: Defining Routes in Wasp
DESCRIPTION: Demonstrates how to define a route and page in the main Wasp configuration file.

LANGUAGE: wasp
CODE:
route TaskRoute { path: "/task/:id", to: TaskPage }
page TaskPage { ... }

----------------------------------------

TITLE: Implementing MainPage Component
DESCRIPTION: Basic React component implementation for the main page, showing imports for CSS and image assets.

LANGUAGE: typescript
CODE:
import waspLogo from './waspLogo.png'
import './Main.css'

export const MainPage = () => {
  // ...
}

----------------------------------------

TITLE: Running Wasp Studio Client
DESCRIPTION: This command runs the Wasp Studio client in development mode. After running this command, the client can be accessed in a web browser at http://localhost:5173.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Creating NewTaskForm Component in React (TypeScript)
DESCRIPTION: Implements a React component for creating new tasks using TypeScript, utilizing the createTask Action.

LANGUAGE: tsx
CODE:
import { FormEvent } from 'react'

const NewTaskForm = () => {
  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    try {
      const target = event.target as HTMLFormElement
      const description = target.description.value
      target.reset()
      await createTask({ description })
    } catch (err: any) {
      window.alert('Error: ' + err.message)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="description" type="text" defaultValue="" />
      <input type="submit" value="Create task" />
    </form>
  )
}

----------------------------------------

TITLE: Defining Password Migration Page Route in Wasp
DESCRIPTION: Defines a route and page component for the password migration page in the main.wasp file.

LANGUAGE: wasp
CODE:
route MigratePasswordRoute { path: "/migrate-password", to: MigratePassword }
page MigratePassword {
  component: import { MigratePasswordPage } from "@src/pages/MigratePassword"
}

----------------------------------------

TITLE: Creating NewTaskForm Component in React (TypeScript)
DESCRIPTION: Implements a React component for creating new tasks using TypeScript, utilizing the createTask Action.

LANGUAGE: tsx
CODE:
import { FormEvent } from 'react'

const NewTaskForm = () => {
  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    try {
      const target = event.target as HTMLFormElement
      const description = target.description.value
      target.reset()
      await createTask({ description })
    } catch (err: any) {
      window.alert('Error: ' + err.message)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="description" type="text" defaultValue="" />
      <input type="submit" value="Create task" />
    </form>
  )
}

----------------------------------------

TITLE: Inserting Phrase Data into Supabase Database
DESCRIPTION: SQL statements to insert sample phrase data into the 'phrases' table in Supabase.

LANGUAGE: sql
CODE:
INSERT INTO phrases(id,"group",translations_en,translations_it) VALUES (1,'general','Yes','Si');
INSERT INTO phrases(id,"group",translations_en,translations_it) VALUES (2,'general','No','No');
...

----------------------------------------

TITLE: Initializing Lucia Auth in Next.js
DESCRIPTION: Setting up Lucia authentication with SQLite adapter in Next.js.

LANGUAGE: jsx
CODE:
// lib/auth.ts
import { Lucia } from "lucia";
import { BetterSqlite3Adapter } from "@lucia-auth/adapter-sqlite";

const adapter = new BetterSQLite3Adapter(db); // your adapter

export const lucia = new Lucia(adapter, {
  sessionCookie: {
    // this sets cookies with super long expiration
    // since Next.js doesn't allow Lucia to extend cookie expiration when rendering pages
    expires: false,
    attributes: {
      // set to `true` when using HTTPS
      secure: process.env.NODE_ENV === "production"
    }
  }
});

// To get some good Typescript support, add this!
declare module "lucia" {
  interface Register {
    Lucia: typeof lucia;
  }
}

----------------------------------------

TITLE: Using Type-Safe Link Component in React
DESCRIPTION: Shows how to use the Link component for type-safe navigation in a React component, including path parameters.

LANGUAGE: jsx
CODE:
import { Link } from 'wasp/client/router'

export const TaskList = () => {
  // ...

  return (
    <div>
      {tasks.map((task) => (
        <Link
          key={task.id}
          to="/task/:id"
          params={{ id: task.id }}>
          {task.description}
        </Link>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Enabling Keycloak Auth in Wasp Configuration
DESCRIPTION: This snippet shows how to enable Keycloak authentication in the main Wasp configuration file. It sets up the auth object with the User entity and Keycloak method.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      keycloak: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Setting Keycloak Environment Variables
DESCRIPTION: This snippet shows the required environment variables for Keycloak authentication. These should be added to the .env.server file.

LANGUAGE: bash
CODE:
KEYCLOAK_CLIENT_ID=your-keycloak-client-id
KEYCLOAK_CLIENT_SECRET=your-keycloak-client-secret
KEYCLOAK_REALM_URL=https://your-keycloak-url.com/realms/master

----------------------------------------

TITLE: Creating Account Settings Page Component
DESCRIPTION: React component for the account settings page, allowing users to manage their favorite Twitter accounts.

LANGUAGE: typescript
CODE:
import Button from './Button';
import { ChangeEvent, useEffect, useState } from 'react';
import logout from '@wasp/auth/logout';
import type { User } from '@wasp/entities';
import updateAccount from '@wasp/actions/updateAccount'

const AccountPage = ({ user }: { user: User }) => {
  return (
    <div className='flex flex-col justify-center items-center mt-12 w-full'>
      <div className='flex flex-col items-center justify-center gap-4 border border-neutral-700 bg-neutral-100/40 rounded-xl p-1 sm:p-4 w-full'>
        <div className='flex flex-row justify-end w-full px-4 pt-2'>
          <Button onClick={logout}>Logout</Button>
        </div>
        <InputFields user={user} />
      </div>
    </div>
  );
};

export default AccountPage;

function InputFields({ user }: { user: User }) {
  const [isLoading, setIsLoading] = useState(false);
  const [fields, setFields] = useState(['']);

  useEffect(() => {
    if (user?.favUsers.length > 0) {
      setFields(user.favUsers);
    }
  }, [user?.favUsers]);

  const handleAdd = () => {
    setFields([...fields, '']);
  };

  const handleRemove = () => {
    const newFields = [...fields];
    newFields.splice(fields.length - 1, 1);
    setFields(newFields);
  };

  const handleChange = (e: ChangeEvent<HTMLInputElement>, index: number) => {
    const newFields = [...fields];
    newFields[index] = e.target.value;
    setFields(newFields);
  };

  const handleSubmit = async () => {
    try {
      setIsLoading(true);
      await updateAccount({ favUsers: fields });
    } catch (err: any) {
      alert(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className='w-full p-4'>
      <div className='flex flex-row justify-start items-start'>
        <h2 className='ml-1 font-bold'>Trend-Setting Twitter Accounts</h2>
      </div>
      {fields.map((field, index) => (
        <div key={index} className='my-2'>
          <input
            type='text'
            placeholder='Twitter Username'
            className='w-full bg-white border border-gray-300 rounded-lg py-2 px-4 text-gray-700 focus:border-blue-400 focus:outline-none'
            value={field}
            onChange={(e) => handleChange(e, index)}
          />
        </div>
      ))}
      <div className='my-2 flex flex-row justify-end gap-1'>
        {fields.length > 1 && <Button onClick={handleRemove}>-</Button>}
        {fields.length < 10 && (
          <Button onClick={handleAdd} className='bg-blue-500 text-white px-4 py-2 rounded'>
            +
          </Button>
        )}
      </div>
      <Button onClick={handleSubmit} isLoading={isLoading}>
        <span>Save</span>
      </Button>
    </div>
  );
}

----------------------------------------

TITLE: Setting Up Fly.io App
DESCRIPTION: Commands to create a new Fly.io app and set up required environment variables.

LANGUAGE: bash
CODE:
flyctl launch --remote-only

LANGUAGE: bash
CODE:
flyctl secrets set PORT=8080
flyctl secrets set JWT_SECRET=<random_string_at_least_32_characters_long>
flyctl secrets set WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>
flyctl secrets set WASP_SERVER_URL=<url_of_where_server_will_be_deployed>

----------------------------------------

TITLE: Configuring Mailgun Email Provider
DESCRIPTION: Demonstrates how to set up the Mailgun email provider in the main.wasp file and the required environment variables.

LANGUAGE: wasp
CODE:
app Example {
  ...
  emailSender: {
    provider: Mailgun,
  }
}

LANGUAGE: properties
CODE:
MAILGUN_API_KEY=
MAILGUN_DOMAIN=
MAILGUN_API_URL=https://api.eu.mailgun.net

----------------------------------------

TITLE: Defining Login Route and Page in Wasp
DESCRIPTION: This code defines the necessary login route and page in the Wasp configuration file for GitHub authentication.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}

----------------------------------------

TITLE: API-Specific Middleware Configuration
DESCRIPTION: Example of configuring middleware for a specific API endpoint, demonstrating how to replace the default JSON parser with a raw body parser.

LANGUAGE: wasp
CODE:
api webhookCallback {
  fn: import { webhookCallback } from "@src/apis",
  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from "@src/apis",
  httpRoute: (POST, "/webhook/callback"),
  auth: false
}

LANGUAGE: typescript
CODE:
import express from 'express'
import { type WebhookCallback } from 'wasp/server/api'
import { type MiddlewareConfigFn } from 'wasp/server'

export const webhookCallback: WebhookCallback = (req, res, _context) => {
  res.json({ msg: req.body.length })
}

export const webhookCallbackMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')

  middlewareConfig.delete('express.json')
  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))

  return middlewareConfig
}

----------------------------------------

TITLE: Setting Database URL Environment Variable
DESCRIPTION: This snippet shows how to set the DATABASE_URL environment variable in the .env.server file for connecting to a PostgreSQL database.

LANGUAGE: bash
CODE:
DATABASE_URL=postgresql://user:password@localhost:5432/mydb

----------------------------------------

TITLE: Configuring Email Auth in Wasp Config
DESCRIPTION: Basic configuration for enabling email authentication in the main.wasp file, including user entity specification and authentication method settings.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "My App Postman",
          email: "hello@itsme.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

----------------------------------------

TITLE: Submitting a Job in JavaScript/TypeScript
DESCRIPTION: This code snippet demonstrates how to submit a job named 'mySpecialJob' for execution, including an example of delayed execution.

LANGUAGE: javascript
CODE:
import { mySpecialJob } from 'wasp/server/jobs'

const submittedJob = await mySpecialJob.submit({ job: "Johnny" })

// Or, if you'd prefer it to execute in the future, just add a .delay().
// It takes a number of seconds, Date, or ISO date string.
await mySpecialJob
  .delay(10)
  .submit({ name: "Johnny" })

----------------------------------------

TITLE: Configuring Email Authentication in Wasp
DESCRIPTION: This snippet shows how to enable email authentication in the main.wasp file.

LANGUAGE: wasp
CODE:
app MyApp {
  //...
  auth: {
    methods: {
      email: {},
    },
    // ...
  }
}

----------------------------------------

TITLE: Creating Login Page Component
DESCRIPTION: React component for the login page with options to switch between login and signup forms.

LANGUAGE: typescript
CODE:
import { LoginForm } from '@wasp/auth/forms/Login';
import { SignupForm } from '@wasp/auth/forms/Signup';
import { useState } from 'react';

export default () => {
  const [showSignupForm, setShowSignupForm] = useState(false);

  const handleShowSignupForm = () => {
    setShowSignupForm((x) => !x);
  };

  return (
    <>
      {showSignupForm ? <SignupForm /> : <LoginForm />}
      <div onClick={handleShowSignupForm} className='underline cursor-pointer hover:opacity-80'>
        {showSignupForm ? 'Already Registered? Login!' : 'No Account? Sign up!'}
      </div>
    </>
  );
};

----------------------------------------

TITLE: Default Middleware Configuration
DESCRIPTION: Default global middleware setup in Wasp including Helmet, CORS, Morgan, express.json, express.urlencoded, and cookieParser.

LANGUAGE: javascript
CODE:
const defaultGlobalMiddleware = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

LANGUAGE: typescript
CODE:
export type MiddlewareConfig = Map<string, express.RequestHandler>

export type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig

const defaultGlobalMiddleware: MiddlewareConfig = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

----------------------------------------

TITLE: Using updateTask Action in React Task Component (TypeScript)
DESCRIPTION: This TypeScript version of the Task component includes type annotations for the props and event handling.

LANGUAGE: tsx
CODE:
import { ChangeEvent } from 'react'

const Task = ({ task }: { task: Task }) => {
  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {
    try {
      await updateTask({
        id: task.id,
        isDone: event.target.checked,
      })
    } catch (error: any) {
      window.alert('Error while updating task: ' + error.message)
    }
  }

  return (
    <div>
      <input
        type="checkbox"
        id={String(task.id)}
        checked={task.isDone}
        onChange={handleIsDoneChange}
      />
      {task.description}
    </div>
  )
}

----------------------------------------

TITLE: Accessing Server Configuration in Wasp
DESCRIPTION: Demonstrates how to import and use the server configuration object to access settings like frontendUrl. The configuration is accessed through the wasp/server import.

LANGUAGE: javascript
CODE:
import { config } from 'wasp/server'

console.log(config.frontendUrl)

----------------------------------------

TITLE: Implementing React Client Query
DESCRIPTION: Shows how to implement client-side data fetching with automatic refresh interval in React.

LANGUAGE: javascript
CODE:
const { data: dashboardData, isFetching, error } = useQuery(refreshDashboardData, null, { refetchInterval: 60 * 1000 })

----------------------------------------

TITLE: JavaScript Function Declaration Styles
DESCRIPTION: Examples of preferred and discouraged styles for declaring functions in JavaScript.

LANGUAGE: javascript
CODE:
// good
function foo(param) {
  // ...
}

// bad
const foo = (param) => {
  // ...
};

// bad
const foo = function (param) {
  // ...
};

----------------------------------------

TITLE: Defining Email Migration API in Wasp
DESCRIPTION: Defines an API endpoint in the main.wasp file for migrating email auth data to the new auth system.

LANGUAGE: wasp
CODE:
api migrateEmail {
  httpRoute: (GET, "/migrate-email"),
  fn: import { migrateEmailHandler } from "@src/migrateToNewAuth",
  entities: []
}

----------------------------------------

TITLE: Path-Based Middleware Configuration
DESCRIPTION: Example of applying middleware to all routes under a specific path using apiNamespace, showing how to add custom middleware to a specific path.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@src/apis",
  path: "/foo/bar"
}

LANGUAGE: typescript
CODE:
import express from 'express'
import { type MiddlewareConfigFn } from 'wasp/server'

export const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  const customMiddleware: express.RequestHandler = (_req, _res, next) => {
    console.log('fooBarNamespaceMiddlewareFn: custom middleware')
    next()
  }

  middlewareConfig.set('custom.middleware', customMiddleware)

  return middlewareConfig
}

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for a blog post, specifying title, authors, image path, and tags.

LANGUAGE: markdown
CODE:
---
title: 'Wasp is in Beta: Auth, TypeScript, Tailwind, LSP'
authors: [matijasos]
image: /img/beta/wasp-beta-banner.png
tags: [webdev, wasp, startups, github]
---

----------------------------------------

TITLE: Implementing Wasp TypeScript Configuration
DESCRIPTION: Reference implementation of a Wasp application configuration using TypeScript, including app setup, authentication, routes, queries, and actions.

LANGUAGE: typescript
CODE:
import { App } from 'wasp-config'

const app = new App('todoApp', {
  title: 'ToDo App',
  wasp: { version: '{latestWaspVersion}' },
});

app.webSocket({
  fn: { import: 'webSocketFn', from: '@src/webSocket' },
});

app.auth({
  userEntity: 'User',
  methods: {
    discord: {
      configFn: { import: 'config', from: '@src/auth/discord' },
      userSignupFields: { import: 'userSignupFields', from: '@src/auth/discord' }
    },
    google: {
      configFn: { import: 'config', from: '@src/auth/google' },
      userSignupFields: { import: 'userSignupFields', from: '@src/auth/google' }
    },
    gitHub: {
      configFn: { import: 'config', from: '@src/auth/github.js' },
      userSignupFields: { import: 'userSignupFields', from: '@src/auth/github.js' }
    },
  },
  onAuthFailedRedirectTo: '/login',
  onAuthSucceededRedirectTo: '/profile',
  onBeforeSignup: { import: 'onBeforeSignup', from: '@src/auth/hooks.js' },
  onAfterSignup: { import: 'onAfterSignup', from: '@src/auth/hooks.js' },
  onBeforeOAuthRedirect: { import: 'onBeforeOAuthRedirect', from: '@src/auth/hooks.js' },
  onBeforeLogin: { import: 'onBeforeLogin', from: '@src/auth/hooks.js' },
  onAfterLogin: { import: 'onAfterLogin', from: '@src/auth/hooks.js' }
});

app.server({
  setupFn: { importDefault: 'setup', from: '@src/serverSetup' },
  middlewareConfigFn: { import: 'serverMiddlewareFn', from: '@src/serverSetup' },
});

app.client({
  rootComponent: { import: 'App', from: '@src/App' },
  setupFn: { importDefault: 'setup', from: '@src/clientSetup' }
});

app.db({
  seeds: [
    { import: 'devSeedSimple', from: '@src/dbSeeds' },
  ]
});

app.emailSender({
  provider: 'SMTP',
  defaultFrom: { email: 'test@test.com' }
});

const loginPage = app.page('LoginPage', {
  component: { importDefault: 'Login', from: '@src/pages/auth/Login' }
});
app.route('LoginRoute', { path: '/login', to: loginPage });

app.query('getTasks', {
  fn: { import: 'getTasks', from: '@src/queries' },
  entities: ['Task']
});

app.action('createTask', {
  fn: { import: 'createTask', from: '@src/actions' },
  entities: ['Task']
});

app.apiNamespace('bar', {
  middlewareConfigFn: { import: 'barNamespaceMiddlewareFn', from: '@src/apis' },
  path: '/bar'
});

app.api('barBaz', {
  fn: { import: 'barBaz', from: '@src/apis' },
  auth: false,
  entities: ['Task'],
  httpRoute: ['GET', '/bar/baz']
});

app.job('mySpecialJob', {
  executor: 'PgBoss',
  perform: {
    fn: { import: 'foo', from: '@src/jobs/bar' },
    executorOptions: {
      pgBoss: { retryLimit: 1 }
    }
  },
  entities: ['Task']
});

export default app;

----------------------------------------

TITLE: Complete Wasp App Configuration Reference
DESCRIPTION: Full reference example showing all available configuration options in a Wasp app declaration including auth, client, server, database, dependencies, email, and WebSocket configurations.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.11.1"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ],
  auth: {
    // ...
  },
  client: {
    // ...
  },
  server: {
    // ...
  },
  db: {
    // ...
  },
  dependencies: [
    // ...
  ],
  emailSender: {
    // ...
  },
  webSocket: {
    // ...
  }
}

----------------------------------------

TITLE: Complete Wasp App Configuration Reference
DESCRIPTION: Full reference example showing all available configuration options in a Wasp app declaration including auth, client, server, database, dependencies, email, and WebSocket configurations.

LANGUAGE: wasp
CODE:
app todoApp {
  wasp: {
    version: "^0.11.1"
  },
  title: "ToDo App",
  head: [
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />"
  ],
  auth: {
    // ...
  },
  client: {
    // ...
  },
  server: {
    // ...
  },
  db: {
    // ...
  },
  dependencies: [
    // ...
  ],
  emailSender: {
    // ...
  },
  webSocket: {
    // ...
  }
}

----------------------------------------

TITLE: Creating a New Wasp Project with Default Template
DESCRIPTION: Shows how to create a new Wasp project using the default template without entering interactive mode, using the 'wasp new <project-name>' command.

LANGUAGE: bash
CODE:
$ wasp new MyFirstProject
üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Securing API Operations
DESCRIPTION: Updates queries and actions to check user authentication and filter data based on the logged-in user.

LANGUAGE: typescript
CODE:
export const getTasks: GetTasks<void, Task[]> = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401)
  }
  return context.entities.Task.findMany({
    where: { user: { id: context.user.id } },
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Configuring User Entity and Google Auth in Wasp
DESCRIPTION: This snippet shows how to set up the User entity and configure Google authentication in a Wasp application.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

entity User {=psl
    id                        Int           @id @default(autoincrement())
    //...
psl=}

----------------------------------------

TITLE: Installing Wasp Framework on Linux
DESCRIPTION: Command to install the Wasp framework using curl

LANGUAGE: bash
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Constructing Email Address in Haskell
DESCRIPTION: This snippet demonstrates string concatenation in Haskell to construct an email address. It uses the ++ operator for concatenation and the <> operator for monoid append.

LANGUAGE: haskell
CODE:
"martin" ++ "@" ++ concat ["wasp", "-", "lang"] <> ".dev"

----------------------------------------

TITLE: Email Data Migration Function
DESCRIPTION: Implements a data migration function for users using the Email authentication method, moving their data to the new auth system in Wasp 0.12.X.

LANGUAGE: wasp
CODE:
api migrateEmail {
  httpRoute: (GET, "/migrate-email"),
  fn: import { migrateEmailHandler } from "@src/migrateToNewAuth",
  entities: []
}

LANGUAGE: typescript
CODE:
import { prisma } from "wasp/server";
import { type ProviderName, type EmailProviderData } from "wasp/server/auth";
import { MigrateEmail } from "wasp/server/api";

export const migrateEmailHandler: MigrateEmail =
  async (_req, res) => {
    const result = await migrateEmailAuth();

    res.status(200).json({ message: "Migrated users to the new auth", result });
  };

async function migrateEmailAuth(): Promise<{
  numUsersAlreadyMigrated: number;
  numUsersNotUsingThisAuthMethod: number;
  numUsersMigratedSuccessfully: number;
}> {
  const users = await prisma.user.findMany({
    include: {
      auth: true,
    },
  });

  const result = {
    numUsersAlreadyMigrated: 0,
    numUsersNotUsingThisAuthMethod: 0,
    numUsersMigratedSuccessfully: 0,
  };

  for (const user of users) {
    if (user.auth) {
      result.numUsersAlreadyMigrated++;
      console.log("Skipping user (already migrated) with id:", user.id);
      continue;
    }

    if (!user.email || !user.password) {
      result.numUsersNotUsingThisAuthMethod++;
      console.log("Skipping user (not using email auth) with id:", user.id);
      continue;
    }

    const providerData: EmailProviderData = {
      isEmailVerified: user.isEmailVerified,
      emailVerificationSentAt:
        user.emailVerificationSentAt?.toISOString() ?? null,
      passwordResetSentAt: user.passwordResetSentAt?.toISOString() ?? null,
      hashedPassword: user.password,
    };
    const providerName: ProviderName = "email";

    await prisma.auth.create({
      data: {
        identities: {
          create: {
            providerName,
            providerUserId: user.email,
            providerData: JSON.stringify(providerData),
          },
        },
        user: {
          connect: {
            id: user.id,
          },
        },
      },
    });
    result.numUsersMigratedSuccessfully++;
  }

  return result;
}

----------------------------------------

TITLE: Creating a Basic React Component for a Wasp Page
DESCRIPTION: This code snippet shows a basic React component structure for a Wasp page. It includes imports for styles and assets, and exports a functional component.

LANGUAGE: jsx
CODE:
import waspLogo from './waspLogo.png'
import './Main.css'

export const MainPage = () => {
  // ...
}

----------------------------------------

TITLE: Defining Data Models in Wasp
DESCRIPTION: Declaring Phrase, Language, and Translation entities using Prisma PSL in the Wasp configuration file.

LANGUAGE: wasp
CODE:
entity Phrase {=psl
  id Int @id @default(autoincrement())
  group String
  phrase String
  translations Translation[]
psl=}

entity Language {=psl
  id Int @id @default(autoincrement())
  name String @unique
  emoji String
  translations Translation[]
psl=}

entity Translation {=psl
  id Int @id @default(autoincrement())
  phraseId Int
  languageId Int
  translation String
  phrase Phrase @relation(fields: [phraseId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
psl=}


----------------------------------------

TITLE: Installing Server Dependencies for Wasp Studio
DESCRIPTION: This command installs the necessary dependencies for the Wasp Studio server component.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Adding Custom Head Elements in Wasp App
DESCRIPTION: This snippet demonstrates how to add additional style sheets, scripts, and meta tags to the head of a Wasp app.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  head: [  // optional
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />",
    "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>",
    "<meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />"
  ]
}

----------------------------------------

TITLE: Accessing User Data in Client Component
DESCRIPTION: Example of using the useAuth hook to access user data in a client-side React component.

LANGUAGE: jsx
CODE:
import { useAuth, logout } from 'wasp/client/auth'
import { Link } from 'react-router-dom'
import Todo from '../Todo'

export function Main() {
  const { data: user } = useAuth()

  if (!user) {
    return (
      <span>
        Please <Link to="/login">login</Link> or{' '}
        <Link to="/signup">sign up</Link>.
      </span>
    )
  } else {
    return (
      <>
        <button onClick={logout}>Logout</button>
        <Todo />
      </>
    )
  }
}

----------------------------------------

TITLE: Sample PRD for House Plant Tracking Application
DESCRIPTION: A detailed Product Requirement Document for a house plant tracking application, including product title, purpose, features, functionality, and behavior. This PRD can be used as input for Wasp's GPT Web App Generator to create a full-stack application.

LANGUAGE: plaintext
CODE:
Product Requirements Document for a House Plants Tracking Application

1. **Product Title**: GreenLush: Your House Plant Care Companion

2. **Purpose**: 

The GreenLush app is designed to help users manage their house plants and keep track of their watering schedules. This app will serve as a reminder tool, a database for plant types, and a platform for users to know more about house plant care. 

3. **Features and Functionality**:

    3.1. **User Registration & Profile Management**: To allow users to create and manage their account.
    
    3.2. **Plant Database**: A comprehensive directory of house plants, with visuals and information about each type.
    
    3.3. **Plant Profile**: Users can create a profile for each house plant they own, fill in its type, and assign a custom nickname and photo.
    
    3.4. **Watering Schedule**: By selecting or inputting the type of plant, the app will suggest an ideal watering schedule. Users can confirm or customize this schedule and notifications will be sent when it's time to water each specific plant. 

    3.5. **House Plant Care Tips**: A section of the app that provides general care tips and recommendations for house plants.

4. **Behavior of the Product**:

    4.1. Users will be prompted to sign up when they open the app for the first time. 
  
    4.2. Once registered, users will be able to browse the plant database, create and manage plant profiles, set watering schedules, and read plant care tips. 

    4.3. Notification alerts will be sent according to the set watering schedule.

----------------------------------------

TITLE: Configuring GitHub Auth in Wasp File
DESCRIPTION: Initial Wasp configuration for enabling GitHub authentication with user entity specification.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter defining metadata for the blog post including title, authors, image and tags

LANGUAGE: yaml
CODE:
---
title: 'Wasp Beta - February 2023'
authors: [matijasos]
image: /img/update-feb-23/banner.png
tags: [webdev, wasp, startups, github]
---

----------------------------------------

TITLE: Installing a New Package with npm in Wasp
DESCRIPTION: This snippet demonstrates how to add a new package (date-fns) to a Wasp project using npm. The command will add the package to the dependencies section of package.json.

LANGUAGE: bash
CODE:
npm install date-fns

----------------------------------------

TITLE: Adding TODO Comments in Code
DESCRIPTION: Examples of how to write TODO and NOTE comments in the codebase.

LANGUAGE: haskell
CODE:
-- TODO: Wash the car.

-- NOTE: This piece of code is slow.

-- TODO(martin): Doesn't work on my machine in some unusual use cases.

----------------------------------------

TITLE: Deploying Client to Railway
DESCRIPTION: Commands to deploy the client-side of a Wasp application to Railway.

LANGUAGE: bash
CODE:
cd web-app
npm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build
railway link
cp -r build dist
railway up

----------------------------------------

TITLE: Accessing User Data in Client Component
DESCRIPTION: Example of using the useAuth hook to access user data in a client-side React component.

LANGUAGE: jsx
CODE:
import { useAuth, logout } from 'wasp/client/auth'
import { Link } from 'react-router-dom'
import Todo from '../Todo'

export function Main() {
  const { data: user } = useAuth()

  if (!user) {
    return (
      <span>
        Please <Link to="/login">login</Link> or{' '}
        <Link to="/signup">sign up</Link>.
      </span>
    )
  } else {
    return (
      <>
        <button onClick={logout}>Logout</button>
        <Todo />
      </>
    )
  }
}

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: This snippet shows how to configure authentication in Wasp, a domain-specific language for web app development. It demonstrates a higher level of abstraction for setting up authentication methods and redirects.

LANGUAGE: wasp
CODE:
auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      usernameAndPassword: {},
      google: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/dashboard"
  }

----------------------------------------

TITLE: Basic Client Configuration in Wasp
DESCRIPTION: Shows the basic client configuration structure in the Wasp app declaration, including root component and setup function imports.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  client: {
    rootComponent: import Root from "@src/Root.jsx",
    setupFn: import mySetupFunction from "@src/myClientSetupCode.js"
  }
}

----------------------------------------

TITLE: Generating Deployable Wasp Code
DESCRIPTION: Command to generate deployable code for a Wasp application. This creates the necessary files in the .wasp/build/ directory.

LANGUAGE: bash
CODE:
wasp build

----------------------------------------

TITLE: Importing and Using Image URL in React Component (JavaScript)
DESCRIPTION: This snippet demonstrates how to import an image file as a URL and use it in a React component. The imported URL will be processed differently in development and production environments.

LANGUAGE: jsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Implementing an API in NodeJS (TypeScript)
DESCRIPTION: This snippet shows the TypeScript implementation of the API function, including type annotations for better type safety.

LANGUAGE: typescript
CODE:
import { FooBar } from "wasp/server/api";

export const fooBar: FooBar = (req, res, context) => {
  res.set("Access-Control-Allow-Origin", "*");
  res.json({ msg: `Hello, ${context.user ? "registered user" : "stranger"}!` });
};

----------------------------------------

TITLE: SMTP Environment Configuration
DESCRIPTION: Environment variable configuration for SMTP email provider settings.

LANGUAGE: properties
CODE:
SMTP_HOST=
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_PORT=

----------------------------------------

TITLE: Google and GitHub Data Migration Functions
DESCRIPTION: Implements data migration functions for users using Google or GitHub authentication methods, moving their data to the new auth system in Wasp 0.12.X.

LANGUAGE: wasp
CODE:
api migrateGoogle {
  httpRoute: (GET, "/migrate-google"),
  fn: import { migrateGoogleHandler } from "@src/migrateToNewAuth",
  entities: []
}

api migrateGithub {
  httpRoute: (GET, "/migrate-github"),
  fn: import { migrateGithubHandler } from "@src/migrateToNewAuth",
  entities: []
}

LANGUAGE: typescript
CODE:
import { prisma } from "wasp/server";
import { MigrateGoogle, MigrateGithub } from "wasp/server/api";

export const migrateGoogleHandler: MigrateGoogle =
  async (_req, res) => {
    const result = await createSocialLoginMigration("google");

    res.status(200).json({ message: "Migrated users to the new auth", result });
  };

export const migrateGithubHandler: MigrateGithub =
  async (_req, res) => {
    const result = await createSocialLoginMigration("github");

    res.status(200).json({ message: "Migrated users to the new auth", result });
  };

async function createSocialLoginMigration(
  providerName: "google" | "github"
): Promise<{
  numUsersAlreadyMigrated: number;
  numUsersNotUsingThisAuthMethod: number;
  numUsersMigratedSuccessfully: number;
}> {
  const users = await prisma.user.findMany({
    include: {
      auth: true,
      externalAuthAssociations: true,
    },
  });

  const result = {
    numUsersAlreadyMigrated: 0,
    numUsersNotUsingThisAuthMethod: 0,
    numUsersMigratedSuccessfully: 0,
  };

  for (const user of users) {
    if (user.auth) {
      result.numUsersAlreadyMigrated++;
      console.log("Skipping user (already migrated) with id:", user.id);
      continue;
    }

    const provider = user.externalAuthAssociations.find(
      (provider) => provider.provider === providerName
    );

    if (!provider) {
      result.numUsersNotUsingThisAuthMethod++;
      console.log(`Skipping user (not using ${providerName} auth) with id:`, user.id);
      continue;
    }

    await prisma.auth.create({
      data: {
        identities: {
          create: {
            providerName,
            providerUserId: provider.providerId,
            providerData: JSON.stringify({}),
          },
        },
        user: {
          connect: {
            id: user.id,
          },
        },
      },
    });
    result.numUsersMigratedSuccessfully++;
  }

  return result;
}

----------------------------------------

TITLE: Adding Routes and Pages in Wasp
DESCRIPTION: Wasp configuration for adding login and signup routes and pages.

LANGUAGE: wasp
CODE:
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/LoginPage"
}

----------------------------------------

TITLE: Customizing Signup Fields in Wasp
DESCRIPTION: Demonstrates how to add custom fields to the signup process in Wasp.

LANGUAGE: wasp
CODE:
app crudTesting {
  // ...
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {
        userSignupFields: import { userSignupFields } from "@src/auth/signup",
      },
    },
    onAuthFailedRedirectTo: "/login",
  },
}

LANGUAGE: javascript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: async (data) => {
    const address = data.address
    if (typeof address !== 'string') {
      throw new Error('Address is required')
    }
    if (address.length < 5) {
      throw new Error('Address must be at least 5 characters long')
    }
    return address
  },
})

----------------------------------------

TITLE: Customizing Signup Fields in Wasp
DESCRIPTION: Demonstrates how to add custom fields to the signup process in Wasp.

LANGUAGE: wasp
CODE:
app crudTesting {
  // ...
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {
        userSignupFields: import { userSignupFields } from "@src/auth/signup",
      },
    },
    onAuthFailedRedirectTo: "/login",
  },
}

LANGUAGE: javascript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: async (data) => {
    const address = data.address
    if (typeof address !== 'string') {
      throw new Error('Address is required')
    }
    if (address.length < 5) {
      throw new Error('Address must be at least 5 characters long')
    }
    return address
  },
})

----------------------------------------

TITLE: Defining Prisma Data Models for Recipes
DESCRIPTION: Creates Prisma schema models for User and Recipe entities with a relationship between them.

LANGUAGE: prisma
CODE:
model User {
  id          Int @id @default(autoincrement())
  recipes     Recipe[]
}

model Recipe {
  id          Int @id @default(autoincrement())
  title       String
  description String?
  userId      Int
  user        User @relation(fields: [userId], references: [id])
}

----------------------------------------

TITLE: Defining Prisma Data Models for Recipes
DESCRIPTION: Creates Prisma schema models for User and Recipe entities with a relationship between them.

LANGUAGE: prisma
CODE:
model User {
  id          Int @id @default(autoincrement())
  recipes     Recipe[]
}

model Recipe {
  id          Int @id @default(autoincrement())
  title       String
  description String?
  userId      Int
  user        User @relation(fields: [userId], references: [id])
}

----------------------------------------

TITLE: Viewing Generated Dockerfile in Wasp CLI
DESCRIPTION: Command to display the complete Dockerfile that will be used for your Wasp project, including any custom modifications you've added.

LANGUAGE: shell
CODE:
wasp dockerfile

----------------------------------------

TITLE: Tailwind CSS Base Import
DESCRIPTION: CSS file showing the required Tailwind directives import.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;

/* ... */

----------------------------------------

TITLE: Tailwind CSS Base Import
DESCRIPTION: CSS file showing the required Tailwind directives import.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;

/* ... */

----------------------------------------

TITLE: Database Environment Configuration
DESCRIPTION: Environment variable configuration for PostgreSQL database connection.

LANGUAGE: env
CODE:
DATABASE_URL=postgresql://user:password@localhost:5432/mydb

----------------------------------------

TITLE: Storing Values for Later Use in Server Setup
DESCRIPTION: Shows how to store values during server setup for later use in operations. Examples are provided for both JavaScript and TypeScript.

LANGUAGE: javascript
CODE:
let someResource = undefined

export const mySetupFunction = async () => {
  someResource = await setUpSomeResource()
  startSomeCronJob()
}

export const getSomeResource = () => someResource

LANGUAGE: typescript
CODE:
import { type ServerSetupFn } from 'wasp/server'

let someResource = undefined

export const mySetupFunction: ServerSetupFn = async () => {
  someResource = await setUpSomeResource()
  startSomeCronJob()  
}

export const getSomeResource = () => someResource

----------------------------------------

TITLE: Configuring Cron Job in Wasp
DESCRIPTION: Demonstrates how to set up a scheduled cron job in Wasp that runs every hour to calculate daily statistics. The job connects to multiple database entities and executes an imported function.

LANGUAGE: c
CODE:
job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/calculateDailyStats"
  },
  schedule: {
    cron: "0 * * * *" 
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}

----------------------------------------

TITLE: Creating Phrases Table with SQL in Supabase
DESCRIPTION: SQL statement to create the 'phrases' table in Supabase, defining the structure for storing phrase data.

LANGUAGE: sql
CODE:
CREATE TABLE phrases (
    id bigint  NOT NULL,
    group character varying  NULL,
    translations_en text  NOT NULL,
    translations_it text  NOT NULL
);

----------------------------------------

TITLE: Defining Task Entity in Prisma Schema
DESCRIPTION: This snippet shows how to define a Task entity using Prisma model in the schema.prisma file. It includes fields for id, description, and isDone status.

LANGUAGE: prisma
CODE:
// ...

model Task {
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Defining Task Entity Schema in Prisma
DESCRIPTION: Prisma schema definition for a basic Task entity with ID, description and isDone fields

LANGUAGE: prisma
CODE:
model Task {
  id          Int     @id @default(autoincrement())
  description String
  isDone      Boolean
}

----------------------------------------

TITLE: Docker Build Command for Heroku Deployment
DESCRIPTION: Docker build command sequence for building and deploying to Heroku with platform specification for x86 architecture.

LANGUAGE: bash
CODE:
docker buildx build --platform linux/amd64 . -t web && docker tag web registry.heroku.com/waspleau/web && docker push registry.heroku.com/waspleau/web && heroku container:release --app waspleau web

----------------------------------------

TITLE: Deploying a Wasp App to Fly.io
DESCRIPTION: Command to deploy the built Wasp application to Fly.io.

LANGUAGE: bash
CODE:
flyctl deploy --remote-only --config ../../fly.toml

----------------------------------------

TITLE: React Frontend Implementation in TypeScript
DESCRIPTION: Type-safe React component implementation that uses the getTasks query with proper TypeScript annotations.

LANGUAGE: tsx
CODE:
import { Task } from 'wasp/entities'
import { getTasks, useQuery } from 'wasp/client/operations'

export const MainPage = () => {
  const { data: tasks, isLoading, error } = useQuery(getTasks)

  return (
    <div>
      {tasks && <TasksList tasks={tasks} />}

      {isLoading && 'Loading...'}
      {error && 'Error: ' + error}
    </div>
  )
}

const TaskView = ({ task }: { task: Task }) => {
  return (
    <div>
      <input type="checkbox" id={String(task.id)} checked={task.isDone} />
      {task.description}
    </div>
  )
}

const TasksList = ({ tasks }: { tasks: Task[] }) => {
  if (!tasks?.length) return <div>No tasks</div>

  return (
    <div>
      {tasks.map((task, idx) => (
        <TaskView task={task} key={idx} />
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Server Actions Implementation
DESCRIPTION: Implementation of server-side action to save excuses to the database

LANGUAGE: javascript
CODE:
export const saveExcuse = async (excuse, context) => {
  return context.entities.Excuse.create({
    data: { text: excuse.text }
  })
}

----------------------------------------

TITLE: Authentication Page Components
DESCRIPTION: React components for login and signup pages with TypeScript support

LANGUAGE: tsx
CODE:
import { LoginForm, SignupForm } from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
    </Layout>
  );
}

export function Signup() {
  return (
    <Layout>
      <SignupForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </Layout>
  );
}

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Authentication Page Components
DESCRIPTION: React components for login and signup pages with TypeScript support

LANGUAGE: tsx
CODE:
import { LoginForm, SignupForm } from 'wasp/client/auth'
import { Link } from 'react-router-dom'

export function Login() {
  return (
    <Layout>
      <LoginForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        Don't have an account yet? <Link to="/signup">go to signup</Link>.
      </span>
    </Layout>
  );
}

export function Signup() {
  return (
    <Layout>
      <SignupForm />
      <br />
      <span className="text-sm font-medium text-gray-900">
        I already have an account (<Link to="/login">go to login</Link>).
      </span>
    </Layout>
  );
}

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Custom Domain Certificate Creation
DESCRIPTION: Command to create SSL certificates for a custom domain on Fly.io.

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context client certs create mycoolapp.com

----------------------------------------

TITLE: Configuring Client Domain Environment Variables in Wasp
DESCRIPTION: Sets up the client-side API URL environment variable to point to a custom server domain. Required when building the client for production deployment with a custom domain.

LANGUAGE: bash
CODE:
REACT_APP_API_URL=https://api.myapp.com

----------------------------------------

TITLE: Using getEmail in React Component (JavaScript)
DESCRIPTION: Example of using the getEmail helper in a React component to retrieve the user's email. The helper is imported from wasp/auth and used with a user prop.

LANGUAGE: jsx
CODE:
import { getEmail } from 'wasp/auth'

const MainPage = ({ user }) => {
  const email = getEmail(user)
  // ...
}

----------------------------------------

TITLE: Defining a Task Entity in Prisma Schema
DESCRIPTION: Defines a Task entity in the Prisma schema file with id, description, and isDone fields.

LANGUAGE: prisma
CODE:
model Task {
  id          Int     @id @default(autoincrement())
  description String
  isDone      Boolean
}

----------------------------------------

TITLE: Basic forall Usage in Function Type Signature
DESCRIPTION: Demonstrates basic usage of forall in a function type signature with a list reversal example.

LANGUAGE: haskell
CODE:
f :: forall a. [a] -> [a]
f xs = ys ++ ys
  where ys :: [a]
        ys = reverse xs

----------------------------------------

TITLE: Creating New App via Wasp CLI
DESCRIPTION: Command to create a new application using Wasp's CLI tool with AI generation capabilities. Requires OpenAI API keys to be set as environment variables.

LANGUAGE: bash
CODE:
wasp new

----------------------------------------

TITLE: Using Entities in Actions
DESCRIPTION: Example of using Entities in Actions

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions.js",
  entities: [Task]
}

action markTaskAsDone {
  fn: import { markTaskAsDone } from "@src/actions.js",
  entities: [Task]
}

----------------------------------------

TITLE: Authentication Lifecycle Hooks in Wasp
DESCRIPTION: Implementation of auth hooks like onBeforeSignup and onAfterSignup for adding custom logic to the authentication process.



----------------------------------------

TITLE: Protecting a Page with authRequired
DESCRIPTION: Example of using the authRequired property to protect a page, ensuring only authenticated users can access it.

LANGUAGE: wasp
CODE:
page MainPage {
  component: import Main from "@src/pages/Main",
  authRequired: true
}

----------------------------------------

TITLE: Installing WSL and Ubuntu
DESCRIPTION: Commands for installing WSL and the Ubuntu distribution on Windows

LANGUAGE: bash
CODE:
wsl ‚Äîinstall
wsl --install -d Ubuntu

----------------------------------------

TITLE: Declaring Auth Hooks in Wasp Configuration
DESCRIPTION: Demonstrates how to declare authentication hooks in the Wasp configuration file.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  auth: {
    userEntity: User,
    methods: {
      ...
    },
    onBeforeSignup: import { onBeforeSignup } from "@src/auth/hooks",
    onAfterSignup: import { onAfterSignup } from "@src/auth/hooks",
    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from "@src/auth/hooks",
    onBeforeLogin: import { onBeforeLogin } from "@src/auth/hooks",
    onAfterLogin: import { onAfterLogin } from "@src/auth/hooks",
  },
}

----------------------------------------

TITLE: Updating User Signup Fields in TypeScript (Before)
DESCRIPTION: Shows the previous method of defining user signup fields in Wasp 0.12.X, using the old profile data format.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
    displayName: (data: any) => data.profile.displayName,
})

----------------------------------------

TITLE: Deploying a Wasp App to Fly.io
DESCRIPTION: Command to deploy a new Wasp application to Fly.io using the Wasp CLI. It launches the app with a specified name and region.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Defining Custom Environment Variable Validation in JavaScript
DESCRIPTION: Shows how to define custom environment variable validation using Zod in a Wasp JavaScript project for both client and server environments.

LANGUAGE: javascript
CODE:
import * as z from 'zod'

import { defineEnvValidationSchema } from 'wasp/env'

export const serverEnvValidationSchema = defineEnvValidationSchema(
  z.object({
    STRIPE_API_KEY: z.string({
      required_error: 'STRIPE_API_KEY is required.',
    }),
  })
)

export const clientEnvValidationSchema = defineEnvValidationSchema(
  z.object({
    REACT_APP_NAME: z.string().default('TODO App'),
  })
)

----------------------------------------

TITLE: MDX Front Matter Configuration
DESCRIPTION: YAML front matter configuration for a blog post, defining metadata like title, authors, image path and tags.

LANGUAGE: markdown
CODE:
---
title: 'How Michael Curry chose Wasp to build Grabbit: an internal tool for managing dev resources at StudentBeans'
authors: [matijasos]
image: /img/michael-curry-usecase/grabbit-hero-shot.png
tags: [webdev, wasp, startups, github]
---

----------------------------------------

TITLE: Equivalent Deployment Commands
DESCRIPTION: Individual commands that make up the deployment process, showing setup, database creation, and deployment steps.

LANGUAGE: shell
CODE:
wasp deploy fly setup my-wasp-app mia
wasp deploy fly create-db mia
wasp deploy fly deploy

----------------------------------------

TITLE: Implementing Login Page in React
DESCRIPTION: This snippet demonstrates how to create a Login page component using Wasp's LoginForm in a React file (JavaScript/TypeScript).

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Defining a Task Entity in Prisma Schema
DESCRIPTION: This snippet shows how to define a Task entity using Prisma schema language. It creates a model with an id, description, and isDone field.

LANGUAGE: prisma
CODE:
model Task {
  id          String  @id @default(uuid())
  description String
  isDone      Boolean @default(false)
}

----------------------------------------

TITLE: Defining a Simple Full-Stack Web App with Wasp
DESCRIPTION: This snippet demonstrates how to define a basic full-stack web application using Wasp. It includes app configuration, routing, page definition, authentication setup, and entity declaration.

LANGUAGE: css
CODE:
app todoApp {
  title: "ToDo App" /* visible in tab */
}

route "/" -> page Main
page Main {
  component: import Main from "@ext/Main.js"  /* Import your React code. */
}

auth { /* full-stack auth out-of-the-box */
  userEntity: User,
  methods: {
    usernameAndPassword: {}
  }
}

entity User {=psl
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String
psl=}

----------------------------------------

TITLE: Defining User Entity Schema
DESCRIPTION: Prisma schema definition for the User entity required by GitHub authentication.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Netlify Deployment
DESCRIPTION: Commands to deploy the client to Netlify.

LANGUAGE: bash
CODE:
npx netlify-cli deploy
npx netlify-cli deploy --prod

----------------------------------------

TITLE: Implementing getRecipes Query in TypeScript
DESCRIPTION: Defines the getRecipes query function using Prisma to fetch recipes for the authenticated user.

LANGUAGE: typescript
CODE:
import { type GetRecipes } from "wasp/server/operations";
import { type Recipe } from "wasp/entities";

export const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {
  return context.entities.Recipe.findMany( // Prisma query
    { where: { user: { id: context.user.id } } }
  );
};

----------------------------------------

TITLE: Configuring TypeScript Settings
DESCRIPTION: Updated tsconfig.json configuration for Wasp 0.14.0 with proper IDE support and TypeScript compiler settings

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "esnext",
    "target": "esnext",
    "moduleResolution": "bundler",
    "jsx": "preserve",
    "strict": true,
    "esModuleInterop": true,
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "typeRoots": [
      "node_modules/@testing-library",
      "node_modules/@types"
    ],
    "outDir": ".wasp/phantom"
  }
}

----------------------------------------

TITLE: Setting Heroku Environment Variables
DESCRIPTION: Commands to set required environment variables for a Wasp application on Heroku.

LANGUAGE: bash
CODE:
heroku config:set --app <app-name> JWT_SECRET=<random_string_at_least_32_characters_long>
heroku config:set --app <app-name> WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>
heroku config:set --app <app-name> WASP_SERVER_URL=<url_of_where_server_will_be_deployed>

----------------------------------------

TITLE: Enabling Hyper-V in Windows
DESCRIPTION: Command to enable Microsoft's Hyper-V virtualization feature, which is required for WSL

LANGUAGE: bash
CODE:
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All

----------------------------------------

TITLE: Adding a Second Page with URL Parameters in Wasp
DESCRIPTION: This snippet shows how to add a new page with URL parameters in Wasp. It defines a new route with a parameter and imports the corresponding React component.

LANGUAGE: wasp
CODE:
route HelloRoute { path: "/hello/:name", to: HelloPage }
page HelloPage {
  component: import { HelloPage } from "@src/HelloPage"
}

----------------------------------------

TITLE: Defining Cron Jobs in Wasp DSL
DESCRIPTION: This code snippet shows how to define cron jobs in the Wasp DSL. It includes two examples: one for fetching GitHub stats and another for measuring webpage load time. It demonstrates the syntax for specifying the executor, perform function, and schedule.

LANGUAGE: javascript
CODE:
// A cron job for fetching GitHub stats
job getGithubStats {
  executor: PgBoss,
  perform: {
    fn: import { workerFunction } from "@server/workers/github.js"
  },
  schedule: {
    cron: "*/10 * * * *"
  }
}

// A cron job to measure how long a webpage takes to load
job calcPageLoadTime {
  executor: PgBoss,
  perform: {
    fn: import { workerFunction } from "@server/workers/loadTime.js"
  },
  schedule: {
    cron: "*/5 * * * *",
    args: {=json {
      "url": "https://wasp.sh",
      "name": "wasp.sh Load Time"
    } json=}
  }
}

----------------------------------------

TITLE: Custom Signup Action in Wasp
DESCRIPTION: Definition of a custom signup action in a Wasp file, importing the signup function from a JavaScript file.

LANGUAGE: wasp
CODE:
action customSignup {
  fn: import { signup } from "@src/auth/signup.js",
  entities: [User]
}

----------------------------------------

TITLE: Defining Default Global Middleware in TypeScript
DESCRIPTION: This snippet demonstrates the default global middleware configuration in Wasp for TypeScript applications. It includes type definitions and the same middleware as the JavaScript version.

LANGUAGE: typescript
CODE:
export type MiddlewareConfig = Map<string, express.RequestHandler>

export type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig

const defaultGlobalMiddleware: MiddlewareConfig = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

----------------------------------------

TITLE: Opening Database Studio Interface
DESCRIPTION: Command to launch Wasp's database studio interface for viewing and editing database content in the browser.

LANGUAGE: sh
CODE:
wasp db studio

----------------------------------------

TITLE: Implementing Custom Google Auth Configuration
DESCRIPTION: This snippet shows how to implement custom configuration for Google Authentication, including specifying scopes and user signup fields.

LANGUAGE: javascript
CODE:
export const userSignupFields = {
  username: () => "hardcoded-username",
  displayName: (data) => data.profile.name,
}

export function getConfig() {
  return {
    scopes: ['profile', 'email'],
  }
}

----------------------------------------

TITLE: Updating Root Component with Outlet
DESCRIPTION: Demonstrates how to update the root component to use Outlet instead of children prop in React Router 6.

LANGUAGE: tsx
CODE:
import { Outlet } from 'react-router-dom'

export function App() {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      <Outlet />
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: Implementing Custom Server Setup in JavaScript
DESCRIPTION: Shows an example of a custom server setup function in JavaScript. This async function sets up a resource and returns an object that will be available in the server context.

LANGUAGE: javascript
CODE:
// In '@ext/serverSetup.js'
export const myCustomSetup = async () => {
  const someResource = await setupSomeResource()
  return { someResource } 
}

----------------------------------------

TITLE: Using Type-Safe Link Component
DESCRIPTION: Demonstration of using the Link component from wasp/client/router to create type-safe navigation links with required parameters.

LANGUAGE: jsx
CODE:
import { Link } from 'wasp/client/router'

export const TaskList = () => {
  // ...

  return (
    <div>
      {tasks.map((task) => (
        <Link
          key={task.id}
          to="/task/:id"
          params={{ id: task.id }}>
          {task.description}
        </Link>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Task Status Enum Example
DESCRIPTION: Shows how to define and use enums in Prisma schema for more expressive data modeling.

LANGUAGE: prisma
CODE:
enum TaskStatus {
  NotStarted
  Doing
  Done
}

model Task {
  ...
  state TaskStatus @default(NotStarted)
}

----------------------------------------

TITLE: React Meme Editor Component
DESCRIPTION: Client-side React component for editing existing memes, including form handling and API integration.

LANGUAGE: jsx
CODE:
import { useState, useEffect, FormEventHandler } from 'react';
import { useQuery } from '@wasp/queries';
import editMeme from '@wasp/actions/editMeme';
import getMeme from '@wasp/queries/getMeme';
import { useParams } from 'react-router-dom';
import { AiOutlineEdit } from 'react-icons/ai';

export function EditMemePage() {
  const { id } = useParams<{ id: string }>();
  const [text0, setText0] = useState('');
  const [text1, setText1] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const { data: meme, isLoading: isMemeLoading, error: memeError } = useQuery(getMeme, { id: id });

  useEffect(() => {
    if (meme) {
      setText0(meme.text0);
      setText1(meme.text1);
    }
  }, [meme]);

  const handleSubmit: FormEventHandler<HTMLFormElement> = async (e) => {
    e.preventDefault();
    try {
      setIsLoading(true);
      await editMeme({ id, text0, text1 });
    } catch (error: any) {
      alert('Error generating meme: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  if (isMemeLoading) return 'Loading...';
  if (memeError) return 'Error: ' + memeError.message;

  return (
    // ... JSX implementation
  );
}

----------------------------------------

TITLE: Defining getTaskInfo Query in Wasp
DESCRIPTION: This snippet demonstrates how to define a getTaskInfo query in the main.wasp file, specifying the function import and associated entities.

LANGUAGE: wasp
CODE:
query getTaskInfo {
  fn: import { getTaskInfo } from "@src/queries",
  entities: [Task]
}

----------------------------------------

TITLE: Creating Auth Pages in React
DESCRIPTION: This code creates the Login page component using Wasp's LoginForm in a React file.

LANGUAGE: javascript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Installing Wasp 0.12.x
DESCRIPTION: Command to install Wasp version 0.12.4 using the installer script.

LANGUAGE: bash
CODE:
curl -sSL https://get.wasp-lang.dev/installer.sh | sh -s -- -v 0.12.4

----------------------------------------

TITLE: Accessing Keycloak User ID in TypeScript
DESCRIPTION: This snippet demonstrates how to access the Keycloak identity and retrieve the Keycloak User ID from a user object. The Keycloak User ID is a UUID stored in the 'id' property of the keycloak identity object.

LANGUAGE: typescript
CODE:
const keycloakIdentity = user.identities.keycloak

// Keycloak User ID for example "12345678-1234-1234-1234-123456789012"
keycloakIdentity.id

----------------------------------------

TITLE: Installing Tailwind Plugins with npm in Bash
DESCRIPTION: Demonstrates how to install Tailwind CSS plugins as development dependencies in a Wasp project.

LANGUAGE: bash
CODE:
npm install -D @tailwindcss/forms
npm install -D @tailwindcss/typography

----------------------------------------

TITLE: Setting Client Environment Variables for Production Build
DESCRIPTION: Example command showing how to provide production client environment variables during the build process. These variables are injected into the client JavaScript code and should never contain secrets.

LANGUAGE: shell
CODE:
REACT_APP_API_URL=<url_to_wasp_backend> REACT_APP_SOME_OTHER_VAR_NAME=someothervalue npm run build

----------------------------------------

TITLE: Declaring a Job in Wasp
DESCRIPTION: This snippet shows how to declare a job named 'mySpecialJob' in a Wasp file. It specifies the executor, perform function, and associated entities.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  entities: [Task],
}

----------------------------------------

TITLE: Running Wasp Start Command
DESCRIPTION: The 'wasp start' command is used to automatically detect changes, regenerate code, and restart the app. It also tracks the working directory and keeps generated code and types up to date.

LANGUAGE: shell
CODE:
wasp start

----------------------------------------

TITLE: Implicit vs Explicit forall Example
DESCRIPTION: Shows how forall is implicitly present in polymorphic type signatures.

LANGUAGE: haskell
CODE:
f :: a -> a
g :: a -> (a -> b) -> b

-- Is equivalent to:
f :: forall a. a -> a
g :: forall a b. a -> (a -> b) -> b

----------------------------------------

TITLE: Configuring Authentication and Routes in Wasp
DESCRIPTION: Basic template showing the core structure for setting up authentication and routing in a Wasp application. The template includes placeholders for auth configuration and route/page definitions.

LANGUAGE: wasp
CODE:
// Configuring the social authentication
app myApp {
  auth: { ... }
}

// Defining routes and pages
route LoginRoute { ... }
page LoginPage { ... }

----------------------------------------

TITLE: Using the Link Component in React
DESCRIPTION: Shows how to use the Link component from wasp/client/router to create type-safe links in a React component.

LANGUAGE: jsx
CODE:
import { Link } from 'wasp/client/router'

export const TaskList = () => {
  // ...

  return (
    <div>
      {tasks.map((task) => (
        <Link
          key={task.id}
          to="/task/:id"
          params={{ id: task.id }}>
          {task.description}
        </Link>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Creating Database Migrations in Wasp
DESCRIPTION: Command to create a new database migration after changes to the Prisma schema. The migration will be stored in the migrations directory as SQL commands.

LANGUAGE: bash
CODE:
wasp db migrate-dev

----------------------------------------

TITLE: Creating New Wasp Project with Default Template
DESCRIPTION: Shows how to create a new Wasp project using the default template without interactive mode.

LANGUAGE: bash
CODE:
$ wasp new MyFirstProject
üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Accessing User Email Identity Properties in TypeScript
DESCRIPTION: This code demonstrates how to access various properties of a user's email identity. It includes the email address, verification status, and timestamps for email-related actions. These properties are typically used for user management and authentication flows.

LANGUAGE: typescript
CODE:
const emailIdentity = user.identities.email

// Email address the user used to sign up, e.g. "fluffyllama@app.com".
emailIdentity.id

// `true` if the user has verified their email address.
emailIdentity.isEmailVerified

// Datetime when the email verification email was sent.
emailIdentity.emailVerificationSentAt

// Datetime when the last password reset email was sent.
emailIdentity.passwordResetSentAt

----------------------------------------

TITLE: Implementing Task Fetching Query in JavaScript
DESCRIPTION: Defines the getTasks query function to fetch all tasks from the database.

LANGUAGE: javascript
CODE:
export const getTasks = async (args, context) => {
  return context.entities.Task.findMany()
}

----------------------------------------

TITLE: Accessing GitHub User ID in TypeScript for wasp
DESCRIPTION: This snippet demonstrates how to access the GitHub identity of a user and retrieve their GitHub User ID. It assumes that the user object has an identities property containing GitHub-specific information.

LANGUAGE: typescript
CODE:
const githubIdentity = user.identities.github

// GitHub User ID for example "12345678"
githubIdentity.id

----------------------------------------

TITLE: Disabling Wasp Telemetry using Environment Variable in Bash
DESCRIPTION: This bash command demonstrates how to opt-out of Wasp telemetry by setting the WASP_TELEMETRY_DISABLE environment variable to any value.

LANGUAGE: bash
CODE:
export WASP_TELEMETRY_DISABLE=1

----------------------------------------

TITLE: Extended Head Configuration
DESCRIPTION: Example demonstrating how to add multiple head elements including stylesheets, scripts, and meta tags.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.14.0"
  },
  title: "My App",
  head: [  // optional
    "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\" />",
    "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>",
    "<meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />"
  ]
}

----------------------------------------

TITLE: Changing Wasp App Title
DESCRIPTION: This snippet shows how to change the title of a Wasp app, which appears in the browser tab next to the favicon.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "BookFace"
}

----------------------------------------

TITLE: JavaScript Implementation of getTaskInfo Query
DESCRIPTION: This snippet shows the JavaScript implementation of the getTaskInfo query, including helper functions and error handling.

LANGUAGE: javascript
CODE:
import HttpError from '@wasp/core/HttpError.js'

function getInfoMessage(task) {
  const isDoneText = task.isDone ? 'is done' : 'is not done'
  return `Task '${task.description}' is ${isDoneText}.`
}

export const getTaskInfo = async ({ id }, context) => {
  const Task = context.entities.Task
  const task = await Task.findUnique({ where: { id } })
  if (!task) {
    throw new HttpError(404)
  }
  return getInfoMessage(task)
}

----------------------------------------

TITLE: Defining Routes in Wasp
DESCRIPTION: Example of defining a route and page in the main Wasp configuration file.

LANGUAGE: wasp
CODE:
route TaskRoute { path: "/task/:id", to: TaskPage }
page TaskPage { ... }

----------------------------------------

TITLE: Prisma Configuration with Preview Features
DESCRIPTION: Configuration example showing how to enable Prisma preview features and PostgreSQL extensions in Wasp.

LANGUAGE: wasp
CODE:
app MyApp {
  // ...
  db: {
    system: PostgreSQL,
    prisma: {
      clientPreviewFeatures: ["postgresqlExtensions"],
      dbExtensions: [
        { name: "hstore", schema: "myHstoreSchema" },
        { name: "pg_trgm" },
        { name: "postgis", version: "2.1" },
      ]
    }
  }
}

----------------------------------------

TITLE: Error Handling in Actions
DESCRIPTION: Example of throwing an HttpError in an Action implementation for custom error handling.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const createTask = async (args, context) => {
  throw new HttpError(
    403, // status code
    "You can't do this!", // message
    { foo: 'bar' } // data
  )
}

----------------------------------------

TITLE: Complete Discord Bot with Role Management
DESCRIPTION: Full implementation including role management functionality to remove Guest role upon successful introduction.

LANGUAGE: javascript
CODE:
const INTRODUCTIONS_CHANNEL_ID = "<YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER>"
const GUEST_ROLE_ID = "<YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER>"

bot.on('message', async msg => {
  if (msg.content.startsWith('!intro ')) {
    if (msg.channel.id.toString() !== INTRODUCTIONS_CHANNEL_ID) {
      const introductionsChannelName =
        msg.guild.channels.resolve(INTRODUCTIONS_CHANNEL_ID).name
      return msg.reply(
      `Please use !intro command in the ${introductionsChannelName} channel!`
      )
    }

    const introMsg = msg.content.substring('!intro '.length).trim()
    const minMsgLength = 20
    if (introMsg.length < minMsgLength) {
      return msg.reply(
        `Please write introduction at least ${minMsgLength} characters long!`
      )
    }

    const member = msg.guild.member(msg.author)
    try {
      if (member.roles.cache.get(GUEST_ROLE_ID)) {
        await member.roles.remove(GUEST_ROLE_ID)
        return msg.reply(
          'Nice getting to know you! You are no longer a guest' +
          ' and have full access, welcome!'
        )
      }
    } catch (error) {
      return msg.reply(`Error: ${error}`)
    }
  }
})

----------------------------------------

TITLE: Setting Up Redux Provider
DESCRIPTION: Implementation of a root component that sets up Redux provider for state management.

LANGUAGE: jsx
CODE:
import store from './store'
import { Provider } from 'react-redux'

export default function Root({ children }) {
  return <Provider store={store}>{children}</Provider>
}

----------------------------------------

TITLE: Setting Up Redux Provider
DESCRIPTION: Implementation of a root component that sets up Redux provider for state management.

LANGUAGE: jsx
CODE:
import store from './store'
import { Provider } from 'react-redux'

export default function Root({ children }) {
  return <Provider store={store}>{children}</Provider>
}

----------------------------------------

TITLE: Displaying TypeScript Project Structure
DESCRIPTION: Shows the modified file structure for a Wasp project using TypeScript, with MainPage.jsx renamed to MainPage.tsx.

LANGUAGE: css
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp          # Your Wasp code goes here.
‚îú‚îÄ‚îÄ schema.prisma      # Your Prisma schema goes here.
‚îú‚îÄ‚îÄ package.json       # Your dependencies and project info go here.
‚îú‚îÄ‚îÄ public             # Your static files (e.g., images, favicon) go here.
‚îú‚îÄ‚îÄ src                # Your source code (TS/JS/CSS/HTML) goes here.
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.tsx   # Renamed from MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Declaring API in Wasp
DESCRIPTION: Example of declaring a custom API endpoint in a Wasp file, specifying the implementation function and HTTP route.

LANGUAGE: wasp
CODE:
api fooBar {
  fn: import { fooBar } from "@src/apis",
  httpRoute: (GET, "/foo/bar")
}

----------------------------------------

TITLE: Running Playwright Tests with Debug Mode
DESCRIPTION: Commands for setting up and running Playwright headless tests with debugging enabled for the Wasp application.

LANGUAGE: sh
CODE:
$ cd headless-tests
$ npm install
$ npx playwright install --with-deps
$ DEBUG=pw:webserver npx playwright test

----------------------------------------

TITLE: Creating a New Wasp App
DESCRIPTION: Command to create a new Wasp application using the Wasp CLI.

LANGUAGE: shell
CODE:
wasp new

----------------------------------------

TITLE: User Entity Schema Definition
DESCRIPTION: Prisma schema definition for the User entity required for Discord authentication.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: Cleaning Wasp Project
DESCRIPTION: Demonstrates the output of the 'wasp clean' command, which removes all generated code, cached artifacts, and the node_modules directory. This is useful for troubleshooting and starting fresh.

LANGUAGE: bash
CODE:
$ wasp clean

üêù --- Deleting the .wasp/ directory... -------------------------------------------

‚úÖ --- Deleted the .wasp/ directory. ----------------------------------------------

üêù --- Deleting the node_modules/ directory... ------------------------------------

‚úÖ --- Deleted the node_modules/ directory. ---------------------------------------

----------------------------------------

TITLE: Retrieving Discord User ID in TypeScript
DESCRIPTION: This snippet extracts the Discord identity from a user object and accesses the Discord User ID. It assumes the user object has an 'identities' property containing Discord-specific information.

LANGUAGE: typescript
CODE:
const discordIdentity = user.identities.discord

// Discord User ID for example "80351110224678912"
discordIdentity.id

----------------------------------------

TITLE: Implementing Username & Password Migration Function
DESCRIPTION: Implements the migration function for Username & Password auth data in TypeScript.

LANGUAGE: typescript
CODE:
import { prisma } from "wasp/server";
import { type ProviderName, type UsernameProviderData } from "wasp/server/auth";
import { MigrateUsernameAndPassword } from "wasp/server/api";

export const migrateUsernameAndPasswordHandler: MigrateUsernameAndPassword =
  async (_req, res) => {
    const result = await migrateUsernameAuth();

    res.status(200).json({ message: "Migrated users to the new auth", result });
  };

async function migrateUsernameAuth(): Promise<{
  numUsersAlreadyMigrated: number;
  numUsersNotUsingThisAuthMethod: number;
  numUsersMigratedSuccessfully: number;
}> {
  const users = await prisma.user.findMany({
    include: {
      auth: true,
    },
  });

  const result = {
    numUsersAlreadyMigrated: 0,
    numUsersNotUsingThisAuthMethod: 0,
    numUsersMigratedSuccessfully: 0,
  };

  for (const user of users) {
    if (user.auth) {
      result.numUsersAlreadyMigrated++;
      console.log("Skipping user (already migrated) with id:", user.id);
      continue;
    }

    if (!user.username || !user.password) {
      result.numUsersNotUsingThisAuthMethod++;
      console.log("Skipping user (not using username auth) with id:", user.id);
      continue;
    }

    const providerData: UsernameProviderData = {
      hashedPassword: user.password,
    };
    const providerName: ProviderName = "username";

    await prisma.auth.create({
      data: {
        identities: {
          create: {
            providerName,
            providerUserId: user.username.toLowerCase(),
            providerData: JSON.stringify(providerData),
          },
        },
        user: {
          connect: {
            id: user.id,
          },
        },
      },
    });
    result.numUsersMigratedSuccessfully++;
  }

  return result;
}

----------------------------------------

TITLE: Netlify Client Deployment
DESCRIPTION: Commands for deploying the client application to Netlify, including test deployment and production deployment

LANGUAGE: bash
CODE:
netlify deploy
netlify deploy --prod

----------------------------------------

TITLE: Adding Auth Routes and Pages in Wasp
DESCRIPTION: Definition of routes and pages for authentication in the main.wasp file, including login, signup, password reset, and email verification pages.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/pages/auth.jsx"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/pages/auth.jsx",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@src/pages/auth.jsx",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@src/pages/auth.jsx",
}

----------------------------------------

TITLE: Importing Required Tag Component in TypeScript
DESCRIPTION: This code snippet imports the Required component from a local file, likely used for indicating required fields in the user interface or documentation.

LANGUAGE: typescript
CODE:
import { Required } from '@site/src/components/Tag';

----------------------------------------

TITLE: Defining Data Models with Prisma Schema in Wasp
DESCRIPTION: New feature allowing separation of Prisma schema definitions into a standalone file, enabling better syntax highlighting and auto-completion for PSL (Prisma Schema Language).



----------------------------------------

TITLE: Defining Routes and Pages for Authentication
DESCRIPTION: Configuration of routes and pages for login, signup, password reset, and email verification in the main.wasp file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@client/pages/auth.jsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@client/pages/auth.jsx"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@client/pages/auth.jsx",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@client/pages/auth.jsx",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@client/pages/auth.jsx",
}

----------------------------------------

TITLE: Auth Entity Structure in Wasp
DESCRIPTION: Internal Auth entity structure used by Wasp to connect the business logic user with login credentials.

LANGUAGE: wasp
CODE:
entity Auth {=psl
  id         String         @id @default(uuid())
  userId     Int?           @unique
  // Wasp injects this relation on the User entity as well
  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade) 
  identities AuthIdentity[]
  sessions   Session[]
psl=}

----------------------------------------

TITLE: Auth Entity Structure in Wasp
DESCRIPTION: Internal Auth entity structure used by Wasp to connect the business logic user with login credentials.

LANGUAGE: wasp
CODE:
entity Auth {=psl
  id         String         @id @default(uuid())
  userId     Int?           @unique
  // Wasp injects this relation on the User entity as well
  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade) 
  identities AuthIdentity[]
  sessions   Session[]
psl=}

----------------------------------------

TITLE: Implementing API Endpoint in TypeScript
DESCRIPTION: TypeScript implementation of an API endpoint with type safety, including request parameters and response types.

LANGUAGE: typescript
CODE:
import { FooBar } from "wasp/server/api";

export const fooBar: FooBar<
  { email: string },
  { answer: number }
> = (req, res, _context) => {
  console.log(req.params.email);
  res.json({ answer: 42 });
};

----------------------------------------

TITLE: Running Playwright Tests in UI Mode
DESCRIPTION: Command for running Playwright tests with UI interface for debugging purposes.

LANGUAGE: sh
CODE:
$ DEBUG=pw:webserver npx playwright test --ui

----------------------------------------

TITLE: Protecting Pages with Auth Required
DESCRIPTION: Example of protecting a page component by requiring authentication using the authRequired flag

LANGUAGE: wasp
CODE:
page MainPage {
  component: import Main from "@src/pages/Main",
  authRequired: true
}

----------------------------------------

TITLE: Defining User Signup Fields in JavaScript
DESCRIPTION: This snippet shows how to define additional user signup fields in JavaScript using the `defineUserSignupFields` function from Wasp. It demonstrates setting 'address' as a required field and 'phone' as an optional field.

LANGUAGE: javascript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: (data) => {
    if (!data.address) {
      throw new Error('Address is required')
    }
    return data.address
  }
  phone: (data) => data.phone,
})

----------------------------------------

TITLE: Implementing Optimistic Updates in Task Component using Wasp
DESCRIPTION: Enhances the Task component to use Wasp's optimistic update feature, providing a smoother user experience by immediately updating the UI before server confirmation.

LANGUAGE: jsx
CODE:
import updateTask from '@wasp/queries'

function Task({ id, isDone, description }) {
  const updateTaskOptimistically = useAction(updateTask, {
    optimisticUpdates: [{
      getQuerySpecifier: () => [getTasks],
      updateQuery: ({ id, isDone }, oldTasks) => oldTasks.map(
        task => task.id === id ? { ...task, isDone } : task
      )
    }]
  })

  return (
    <div className="task">
      <label className="description">
        <input
          type='checkbox' id={id}
          checked={isDone}
          onChange={
            (e) => updateTaskOptimistically({ id, isDone: e.target.checked })
          }
        /><span>{description}</span></label>
    </div>
  )
}

----------------------------------------

TITLE: Setting Client Environment Variables for Production Build
DESCRIPTION: Demonstrates how to set client-side environment variables when building for production. These variables are embedded into the client code during the build process.

LANGUAGE: shell
CODE:
REACT_APP_SOME_VAR_NAME=somevalue REACT_APP_SOME_OTHER_VAR_NAME=someothervalue npm run build

----------------------------------------

TITLE: Creating Centered Link in React JSX
DESCRIPTION: This snippet shows how to create a centered link with custom styling in React JSX. It uses inline styles to center the text and increases the font size for emphasis.

LANGUAGE: jsx
CODE:
<div style={{ textAlign: "center"}}>
  <a href="https://hackathon.wasp.sh"><span style={{ fontSize: "26px"}}> üèÜ Join the Wasp Hackathon 2.0! üèÜ</span></a>
</div>

----------------------------------------

TITLE: Discord Message Handler for Introductions
DESCRIPTION: Implements message handling logic to detect and validate member introductions in a specific channel.

LANGUAGE: javascript
CODE:
const INTRODUCTIONS_CHANNEL_ID = "<YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER>"

bot.on('message', async msg => {
  if (msg.content.startsWith('!intro ')) {
    if (msg.channel.id.toString() !== INTRODUCTIONS_CHANNEL_ID) {
      const introductionsChannelName =
        msg.guild.channels.resolve(INTRODUCTIONS_CHANNEL_ID).name
      return msg.reply(
        `Please use !intro command in the ${introductionsChannelName} channel!`
      )
    }

    const introMsg = msg.content.substring('!intro '.length).trim()
    const minMsgLength = 20
    if (introMsg.length < minMsgLength) {
      return msg.reply(
        `Please write introduction at least ${minMsgLength} characters long!`
      )
    }

    return msg.reply(`Yay successful introduction!`)
  }
})

----------------------------------------

TITLE: Running Wasp Migration Script
DESCRIPTION: Command to run the Wasp migration script for updating project structure.

LANGUAGE: bash
CODE:
npx wasp-migrate foo

----------------------------------------

TITLE: Setting up a Provider (JavaScript)
DESCRIPTION: Demonstrates how to set up a Redux provider in the root component using JavaScript.

LANGUAGE: jsx
CODE:
import store from './store'
import { Provider } from 'react-redux'

export default function Root({ children }) {
  return <Provider store={store}>{children}</Provider>
}

----------------------------------------

TITLE: Implementing Custom Signup Action in Wasp
DESCRIPTION: Creates a custom signup action with email validation, password hashing, and email verification in JavaScript/TypeScript.

LANGUAGE: javascript
CODE:
import {
  ensurePasswordIsPresent,
  ensureValidPassword,
  ensureValidEmail,
  createProviderId,
  sanitizeAndSerializeProviderData,
  deserializeAndSanitizeProviderData,
  findAuthIdentity,
  createUser,
  createEmailVerificationLink,
  sendEmailVerificationEmail,
} from 'wasp/server/auth'

export const signup = async (args, _context) => {
  ensureValidEmail(args)
  ensurePasswordIsPresent(args)
  ensureValidPassword(args)

  try {
    const providerId = createProviderId('email', args.email)
    const existingAuthIdentity = await findAuthIdentity(providerId)

    if (existingAuthIdentity) {
      const providerData = deserializeAndSanitizeProviderData(existingAuthIdentity.providerData)
      // Your custom code here
    } else {
      // sanitizeAndSerializeProviderData will hash the user's password
      const newUserProviderData = await sanitizeAndSerializeProviderData({
          hashedPassword: args.password,
          isEmailVerified: false,
          emailVerificationSentAt: null,
          passwordResetSentAt: null,
      })
      await createUser(
        providerId,
        providerData,
        // Any additional data you want to store on the User entity
        {},
      )

      // Verification link links to a client route e.g. /email-verification
      const verificationLink = await createEmailVerificationLink(args.email, '/email-verification');
      try {
          await sendEmailVerificationEmail(
              args.email,
              {
                  from: {
                    name: "My App Postman",
                    email: "hello@itsme.com",
                  },
                  to: args.email,
                  subject: "Verify your email",
                  text: `Click the link below to verify your email: ${verificationLink}`,
                  html: `
                      <p>Click the link below to verify your email</p>
                      <a href="${verificationLink}">Verify email</a>
                  `,
              }
          );
      } catch (e) {
          console.error("Failed to send email verification email:", e);
          throw new HttpError(500, "Failed to send email verification email.");
      } 
    }
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  // Your custom code after sign-up.
  // ...

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: SMTP Environment Variables Configuration
DESCRIPTION: Environment variables required for SMTP email provider configuration.

LANGUAGE: properties
CODE:
SMTP_HOST=
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_PORT=

----------------------------------------

TITLE: Refreshing OAuth Access Token
DESCRIPTION: Example of refreshing the OAuth access token using the refresh token.

LANGUAGE: javascript
CODE:
import { google } from 'wasp/server/auth'

export const onAfterLogin = async ({ oauth }) => {
  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {
    const newTokens = await google.oAuthClient.refreshAccessToken(
      oauth.tokens.refreshToken
    )
    log('new tokens', newTokens)
  }
}

----------------------------------------

TITLE: Sending Telemetry Data for Wasp Installation in JSON
DESCRIPTION: This JSON structure represents the telemetry data sent when Wasp is installed via the install.sh script. It includes a randomly generated ID and the OS information.

LANGUAGE: json
CODE:
{
  "distinct_id": "274701613078193779564259",
  "os": "linux"
}

----------------------------------------

TITLE: Implementing Asynchronous Username Validation in React Forms
DESCRIPTION: This snippet demonstrates how to implement asynchronous validation for a username field in a React form using Zod's refine function and a custom database check function.

LANGUAGE: tsx
CODE:
username: z
        .string()
        .min(1, { message: 'Username is required' })
        .refine(
          async (username) => {
            if (username === customer.username && customer.username !== '')
              return true;
            return !(await checkUsername(username));
          },
          { message: 'Username already exists' }
        ),

----------------------------------------

TITLE: Customizing Google Auth Configuration
DESCRIPTION: Shows how to override the default Google Auth configuration by specifying custom scopes and user signup fields.

LANGUAGE: javascript
CODE:
export const userSignupFields = {
  username: () => "hardcoded-username",
  displayName: (data) => data.profile.name,
}

export function getConfig() {
  return {
    scopes: ['profile', 'email'],
  }
}

----------------------------------------

TITLE: Defining Basic Web App Structure in Wasp
DESCRIPTION: This snippet demonstrates how to define a simple web app structure using Wasp declarations. It includes an app declaration, a route declaration, and a page declaration.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app"
}

route RootRoute { path: "/", to: DashboardPage }

page DashboardPage {
  component: import Dashboard from "@client/Dashboard.js"
}

----------------------------------------

TITLE: Deploying Client to Netlify
DESCRIPTION: Commands to deploy the client-side of a Wasp application to Netlify.

LANGUAGE: bash
CODE:
netlify deploy
netlify deploy --prod

----------------------------------------

TITLE: Configuring QueryClient in JavaScript
DESCRIPTION: This example shows how to configure the QueryClient in the setup function using JavaScript.

LANGUAGE: javascript
CODE:
import { configureQueryClient } from '@wasp/queryClient'

export default async function mySetupFunction() {
  // ... some setup
  configureQueryClient({
    defaultOptions: {
      queries: {
        staleTime: Infinity,
      },
    },
  })
  // ... some more setup
}

----------------------------------------

TITLE: Implementing a Job Worker Function in TypeScript
DESCRIPTION: This snippet demonstrates the implementation of a worker function for a job in TypeScript, including type annotations for input and output.

LANGUAGE: typescript
CODE:
import { type MySpecialJob } from 'wasp/server/jobs'
import { type Task } from 'wasp/entities'

type Input = { name: string; }
type Output = { tasks: Task[]; }

export const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {
  console.log(`Hello ${name}!`)
  const tasks = await context.entities.Task.findMany({})
  return { tasks }
}

----------------------------------------

TITLE: Updating Wasp Version in main.wasp
DESCRIPTION: Update the Wasp version in the main.wasp file to ^0.14.0.

LANGUAGE: wasp
CODE:
app MyApp {
  wasp: {
    version: "^0.14.0"
  },
}

----------------------------------------

TITLE: Configuring HomePage Route and Component in Wasp
DESCRIPTION: Defines the HomePage route and component in Wasp, specifying the path and authentication requirement.

LANGUAGE: wasp
CODE:
route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import { HomePage } from "@src/pages/HomePage",
  authRequired: true // Will send user to /login if not authenticated.
}

----------------------------------------

TITLE: Defining Task Entity in Wasp
DESCRIPTION: Basic entity definition for a Task model with id, description and isDone fields using Prisma Schema Language (PSL)

LANGUAGE: wasp
CODE:
entity Task {=psl
  id          Int @id @default(autoincrement())
  description String
  isDone      Boolean
psl=}

----------------------------------------

TITLE: Defining a Common Layout (TypeScript)
DESCRIPTION: Shows how to create a root component in TypeScript that defines a common layout for the application.

LANGUAGE: tsx
CODE:
export default function Root({ children }: { children: React.ReactNode }) {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      {children}
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: SendGrid Environment Configuration
DESCRIPTION: Environment variables configuration for SendGrid email provider setup in Wasp applications.

LANGUAGE: properties
CODE:
SENDGRID_API_KEY=

----------------------------------------

TITLE: Starting Wasp Development Server
DESCRIPTION: Commands to navigate to the project directory and start the Wasp development server. This initializes the client, server, and database components.

LANGUAGE: sh
CODE:
$ cd TodoApp
$ wasp start

----------------------------------------

TITLE: Installing Dependencies for Wasp Studio Client
DESCRIPTION: This command installs the necessary dependencies for the Wasp Studio Client using npm.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Adding Conditional Validation for UK Postal Codes in React Forms
DESCRIPTION: This code snippet shows how to implement conditional validation in a React form using Zod's superRefine, specifically for validating UK postal codes when the country is set to UK.

LANGUAGE: tsx
CODE:
.superRefine((data, ctx) => {
      if (data.username.includes(' ')) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'Username cannot contain spaces',
          path: ['username'],
        });
      }

      if (/^\d+$/.test(data.city)) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'City name cannot be purely numeric',
          path: ['city'],
        });
      }
      
      
     if (!isValidUKPostcode(data.postalCode, data.country)) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: 'Invalid UK postal code format (e.g., SW1A 1AA)',
        path: ['postalCode'],
      });  
    }
  });

----------------------------------------

TITLE: Defining User and SocialLogin Entities
DESCRIPTION: This snippet defines the User and SocialLogin entities required for Google authentication in Wasp.

LANGUAGE: wasp
CODE:
entity User {=psl
    id          Int     @id @default(autoincrement())
    // ...
    externalAuthAssociations  SocialLogin[]
psl=}

entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

----------------------------------------

TITLE: Extracting Google Identity and User ID in TypeScript
DESCRIPTION: This snippet demonstrates how to extract the Google identity from a user object and access the Google User ID. It assumes the user object has an 'identities' property containing a 'google' object with an 'id' field.

LANGUAGE: typescript
CODE:
const googleIdentity = user.identities.google

// Google User ID for example "123456789012345678901"
googleIdentity.id

----------------------------------------

TITLE: Installing Dependencies for Wasp Website
DESCRIPTION: Command to install the necessary npm packages for the Wasp website project.

LANGUAGE: bash
CODE:
$ npm install

----------------------------------------

TITLE: Setting Fly.io Environment Variables
DESCRIPTION: Commands to set required environment variables for a Wasp application on Fly.io.

LANGUAGE: bash
CODE:
flyctl secrets set PORT=8080
flyctl secrets set JWT_SECRET=<random_string_at_least_32_characters_long>
flyctl secrets set WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>
flyctl secrets set WASP_SERVER_URL=<url_of_where_server_will_be_deployed>

----------------------------------------

TITLE: Importing Image as URL in React Component (JavaScript)
DESCRIPTION: This snippet demonstrates how to import an image file as a URL and use it in a React component. The imported URL can be used as the src attribute of an img element.

LANGUAGE: jsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Creating Database Schema for Users and Sessions
DESCRIPTION: SQL commands to create tables for users and sessions in SQLite database.

LANGUAGE: tsx
CODE:
import sqlite from "better-sqlite3";

export const db = sqlite("main.db");

db.exec(`CREATE TABLE IF NOT EXISTS user (
    id TEXT NOT NULL PRIMARY KEY,
    github_id INTEGER UNIQUE,
    username TEXT NOT NULL
)`);

db.exec(`CREATE TABLE IF NOT EXISTS session (
    id TEXT NOT NULL PRIMARY KEY,
    expires_at INTEGER NOT NULL,
    user_id TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES user(id)
)`);

export interface DatabaseUser {
  id: string;
  username: string;
  github_id: number;
}

----------------------------------------

TITLE: Displaying Wasp Version
DESCRIPTION: Shows how to check the current version of Wasp CLI and instructions for version management.

LANGUAGE: bash
CODE:
$ wasp version

0.14.0

If you wish to install/switch to the latest version of Wasp, do:
curl -sSL https://get.wasp.sh/installer.sh | sh -s

If you want specific x.y.z version of Wasp, do:
curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z

Check https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.

----------------------------------------

TITLE: Old Project Structure Example - Wasp 0.11.x
DESCRIPTION: File tree showing the structure of a fresh Wasp project created with version 0.11.x

LANGUAGE: text
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ client
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ react-app-env.d.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îÇ   ‚îú‚îÄ‚îÄ server
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îú‚îÄ‚îÄ shared
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îî‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Implementing a Job Worker Function in TypeScript
DESCRIPTION: This snippet shows how to implement the worker function 'foo' for the 'mySpecialJob' in TypeScript, including type annotations for input and output.

LANGUAGE: typescript
CODE:
import { type MySpecialJob } from 'wasp/server/jobs'
import { type Task } from 'wasp/entities'

type Input = { name: string; }
type Output = { tasks: Task[]; }

export const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {
  console.log(`Hello ${name}!`)
  const tasks = await context.entities.Task.findMany({})
  return { tasks }
}

----------------------------------------

TITLE: Creating NPM Deploy Script for Wasp App
DESCRIPTION: JSON snippet showing how to create a deploy script in package.json for deploying a Wasp app with environment variables.

LANGUAGE: json
CODE:
{
  "scripts": {
    "deploy": "REACT_APP_ANOTHER_VAR=somevalue wasp deploy fly deploy"
  }
}

----------------------------------------

TITLE: Displaying Wasp CLI Command Overview
DESCRIPTION: Shows the complete list of available Wasp CLI commands and their descriptions, including general commands and project-specific commands.

LANGUAGE: bash
CODE:
USAGE
  wasp <command> [command-args]

COMMANDS
  GENERAL
    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.
      OPTIONS:
        -t|--template <template-name>
           Check out the templates list here: https://github.com/wasp-lang/starters

    new:ai <app-name> <app-description> [<config-json>]
      Uses AI to create a new Wasp project just based on the app name and the description.
      You can do the same thing with `wasp new` interactively.
      Run `wasp new:ai` for more info.

    version               Prints current version of CLI.
    waspls                Run Wasp Language Server. Add --help to get more info.
    completion            Prints help on bash completion.
    uninstall             Removes Wasp from your system.
  IN PROJECT
    start                 Runs Wasp app in development mode, watching for file changes.
    start db              Starts managed development database for you.
    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.
    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.
                          Wasp equivalent of 'have you tried closing and opening it again?'.
    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.
    deploy                Deploys your Wasp app to cloud hosting providers.
    telemetry             Prints telemetry status.
    deps                  Prints the dependencies that Wasp uses in your project.
    dockerfile            Prints the contents of the Wasp generated Dockerfile.
    info                  Prints basic information about the current Wasp project.
    test                  Executes tests in your project.
    studio                (experimental) GUI for inspecting your Wasp app.

----------------------------------------

TITLE: Accessing Keycloak User ID from Identity Object
DESCRIPTION: Demonstrates how to access the Keycloak identity and ID from a user object. The ID is typically a UUID string in the format "12345678-1234-1234-1234-123456789012".

LANGUAGE: typescript
CODE:
const keycloakIdentity = user.identities.keycloak

// Keycloak User ID for example "12345678-1234-1234-1234-123456789012"
keycloakIdentity.id

----------------------------------------

TITLE: Configuring SendGrid Email Provider
DESCRIPTION: Shows how to configure the SendGrid email provider in the main.wasp file and the required environment variable.

LANGUAGE: wasp
CODE:
app Example {
  ...
  emailSender: {
    provider: SendGrid,
  }
}

LANGUAGE: properties
CODE:
SENDGRID_API_KEY=

----------------------------------------

TITLE: Disabling Telemetry in Wasp using Environment Variable
DESCRIPTION: This command demonstrates how to opt out of telemetry in Wasp by setting the WASP_TELEMETRY_DISABLE environment variable to any value.

LANGUAGE: bash
CODE:
export WASP_TELEMETRY_DISABLE=1

----------------------------------------

TITLE: Installing Client Dependencies for Wasp Studio
DESCRIPTION: These commands navigate to the client directory and install the necessary dependencies for the Wasp Studio client component.

LANGUAGE: bash
CODE:
cd client
npm install

----------------------------------------

TITLE: Updated Auth Configuration in Wasp 0.12.X
DESCRIPTION: Shows the new authentication configuration in the main.wasp file for Wasp 0.12.X, which simplifies the User entity and removes the need for explicit auth fields.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.12.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

entity User {=psl
  id Int @id @default(autoincrement())
psl=}

----------------------------------------

TITLE: Importing Image Asset as URL in TypeScript React
DESCRIPTION: Demonstrates how to import and use an image asset in a React component using TypeScript. The imported URL will be transformed to include a hash in production builds.

LANGUAGE: tsx
CODE:
import imgUrl from './img.png'

function App() {
  return <img src={imgUrl} alt="img" />
}

----------------------------------------

TITLE: Starting Local Development Server for Wasp Website
DESCRIPTION: Command to start a local development server for the Wasp website, which opens a browser window and reflects most changes live.

LANGUAGE: bash
CODE:
$ npm start

----------------------------------------

TITLE: SMTP Environment Configuration
DESCRIPTION: Environment variables configuration for SMTP email provider setup in Wasp applications.

LANGUAGE: properties
CODE:
SMTP_HOST=
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_PORT=

----------------------------------------

TITLE: Running Arbitrary Fly Commands with Wasp CLI
DESCRIPTION: Example of running a Fly.io command (listing secrets) for a Wasp app's server using the Wasp CLI.

LANGUAGE: shell
CODE:
wasp deploy fly cmd secrets list --context server

----------------------------------------

TITLE: Setting Client URL Environment Variable
DESCRIPTION: Command to set the WASP_WEB_CLIENT_URL environment variable for CORS configuration.

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com

----------------------------------------

TITLE: Implementing WebSocket Client in React (JavaScript)
DESCRIPTION: Demonstrates how to use WebSockets in a React component using JavaScript. It utilizes the useSocket and useSocketListener hooks provided by Wasp for managing WebSocket connections and events.

LANGUAGE: jsx
CODE:
import React, { useState } from 'react'
import {
  useSocket,
  useSocketListener,
} from '@wasp/webSocket'

export const ChatPage = () => {
  const [messageText, setMessageText] = useState('')
  const [messages, setMessages] = useState([])
  const { socket, isConnected } = useSocket()

  useSocketListener('chatMessage', logMessage)

  function logMessage(msg) {
    setMessages((priorMessages) => [msg, ...priorMessages])
  }

  function handleSubmit(e) {
    e.preventDefault()
    socket.emit('chatMessage', messageText)
    setMessageText('')
  }

  const messageList = messages.map((msg) => (
    <li key={msg.id}>
      <em>{msg.username}</em>: {msg.text}
    </li>
  ))
  const connectionIcon = isConnected ? 'üü¢' : 'üî¥'

  return (
    <>
      <h2>Chat {connectionIcon}</h2>
      <div>
        <form onSubmit={handleSubmit}>
          <div>
            <div>
              <input
                type="text"
                value={messageText}
                onChange={(e) => setMessageText(e.target.value)}
              />
            </div>
            <div>
              <button type="submit">Submit</button>
            </div>
          </div>
        </form>
        <ul>{messageList}</ul>
      </div>
    </>
  )
}

----------------------------------------

TITLE: Displaying Project Structure with Tailwind Configuration in Wasp
DESCRIPTION: This snippet shows the directory structure of a Wasp project with Tailwind CSS configuration files added. It highlights the newly added postcss.config.cjs and tailwind.config.cjs files.

LANGUAGE: bash
CODE:
.
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ public
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
# highlight-start
‚îú‚îÄ‚îÄ postcss.config.cjs
‚îî‚îÄ‚îÄ tailwind.config.cjs
# highlight-end

----------------------------------------

TITLE: Export Analysis Results in JSON
DESCRIPTION: Shows the JSON structure of the analysis results. Each file path is mapped to an array of its exports, including both named and default exports.

LANGUAGE: json
CODE:
{
  "./src/exports.ts": [
    { "type": "named", "name": "getExportsOfFiles" },
    { "type": "default" }
  ]
}

----------------------------------------

TITLE: Defining Root Component in JavaScript
DESCRIPTION: This snippet demonstrates how to create a root component in JavaScript that defines a common layout for the application.

LANGUAGE: jsx
CODE:
export default function Root({ children }) {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      {children}
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: Deploying a Wasp App to Fly.io
DESCRIPTION: Command to deploy a new Wasp application to Fly.io using the Wasp CLI. This command launches the app, sets up the necessary infrastructure, and deploys the application.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Updating User Signup Fields for OAuth in TypeScript
DESCRIPTION: Demonstrates how to update the userSignupFields to use the new profile format provided by OAuth providers in Wasp 0.13.0. The example shows updating the displayName field.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
    displayName: (data: any) => data.profile.name,
})

----------------------------------------

TITLE: Using Login Action in React Component
DESCRIPTION: This example demonstrates how to use the login action in a custom React component for handling user login.

LANGUAGE: javascript
CODE:
import { login } from 'wasp/client/auth'

import { useState } from 'react'
import { useNavigate, Link } from 'react-router-dom'

export function LoginPage() {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState(null)
  const navigate = useNavigate()

  async function handleSubmit(event) {
    event.preventDefault()
    try {
      await login(username, password)
      navigate('/')
    } catch (error) {
      setError(error)
    }
  }

  return <form onSubmit={handleSubmit}>{/* ... */}</form>
}

----------------------------------------

TITLE: Setting Client URL Environment Variable
DESCRIPTION: Command to set the WASP_WEB_CLIENT_URL environment variable for CORS configuration.

LANGUAGE: shell
CODE:
wasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com

----------------------------------------

TITLE: Declaring Wasp Action for Task Creation
DESCRIPTION: Defines a Wasp action for creating new tasks in the main.wasp configuration file.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions",
  entities: [Task]
}

----------------------------------------

TITLE: Configuring Wasp Application in TypeScript
DESCRIPTION: Shows the structure of a main.wasp file for a TypeScript-based Wasp application, including app configuration, route definition, and page component import using a .tsx file.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.11.6" // Pins the version of Wasp to use.
  },
  title: "Todo app" // Used as the browser tab title. Note that all strings in Wasp are double quoted!
}

route RootRoute { path: "/", to: MainPage }

page MainPage {
  // We specify that the React implementation of the page is the default export
  // of `src/client/MainPage.tsx`. This statement uses standard JS import syntax.
  // Use `@client` to reference files inside the `src/client` folder.
  component: import Main from "@client/MainPage.tsx"
}

----------------------------------------

TITLE: Configuring Wasp Application in TypeScript
DESCRIPTION: Shows the structure of a main.wasp file for a TypeScript-based Wasp application, including app configuration, route definition, and page component import using a .tsx file.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "^0.11.6" // Pins the version of Wasp to use.
  },
  title: "Todo app" // Used as the browser tab title. Note that all strings in Wasp are double quoted!
}

route RootRoute { path: "/", to: MainPage }

page MainPage {
  // We specify that the React implementation of the page is the default export
  // of `src/client/MainPage.tsx`. This statement uses standard JS import syntax.
  // Use `@client` to reference files inside the `src/client` folder.
  component: import Main from "@client/MainPage.tsx"
}

----------------------------------------

TITLE: Configuring Server in Wasp App Declaration
DESCRIPTION: Demonstrates how to configure the server behavior using the 'server' field in the Wasp app declaration. It shows the setup for both JavaScript and TypeScript projects.

LANGUAGE: wasp
CODE:
app MyApp {
  title: "My app",
  // ...
  server: {
    setupFn: import { mySetupFunction } from "@src/myServerSetupCode.js",
    middlewareConfigFn: import { myMiddlewareConfigFn } from "@src/myServerSetupCode.js"
  }
}

----------------------------------------

TITLE: Creating Authentication Pages in React
DESCRIPTION: This snippet creates the Login page component using Wasp's LoginForm and a custom Layout component.

LANGUAGE: javascript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="h-full w-full bg-white">
      <div className="flex min-h-[75vh] min-w-full items-center justify-center">
        <div className="h-full w-full max-w-sm bg-white p-5">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Implementing a React Component with URL Parameters
DESCRIPTION: This code shows how to implement a React component that uses URL parameters. It demonstrates the use of the useParams hook from react-router-dom to access the 'name' parameter from the URL.

LANGUAGE: jsx
CODE:
import { useParams } from 'react-router-dom'

export const HelloPage = () => {
  const { name } = useParams()
  return <div>Here's {name}!</div>
}

----------------------------------------

TITLE: Implementing Actions in NodeJS
DESCRIPTION: Example of implementing the Action handlers in JavaScript/TypeScript with in-memory data storage

LANGUAGE: javascript
CODE:
let nextId = 4
const tasks = [
  { id: 1, description: 'Buy some eggs', isDone: true },
  { id: 2, description: 'Make an omelette', isDone: false },
  { id: 3, description: 'Eat breakfast', isDone: false },
]

export const createTask = (args) => {
  const newTask = {
    id: nextId,
    isDone: false,
    description: args.description,
  }
  nextId += 1
  tasks.push(newTask)
  return newTask
}

export const markTaskAsDone = (args) => {
  const task = tasks.find((task) => task.id === args.id)
  if (!task) {
    return
  }
  task.isDone = true
}

----------------------------------------

TITLE: Enabling WebSockets in Wasp File
DESCRIPTION: Demonstrates how to enable WebSockets in the Wasp configuration file by adding the webSocket property to the app object. It specifies the server-side function and auto-connect behavior.

LANGUAGE: wasp
CODE:
app todoApp {
  // ...

  webSocket: {
    fn: import { webSocketFn } from "@server/webSocket.js",
    autoConnect: true, // optional, default: true
  },
}

----------------------------------------

TITLE: Configuring PostgreSQL Database in Prisma Schema
DESCRIPTION: This snippet demonstrates how to set PostgreSQL as the database provider in the Prisma schema file.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ...

----------------------------------------

TITLE: Creating a Wasp Project with OpenSaaS Template
DESCRIPTION: This command creates a new Wasp project using the OpenSaaS template, which includes features like Stripe Payments, OpenAI GPT API, Google Auth, SendGrid, Tailwind, and Cron Jobs.

LANGUAGE: bash
CODE:
wasp new <project-name> -t saas

----------------------------------------

TITLE: Creating a Wasp Project with OpenSaaS Template
DESCRIPTION: This command creates a new Wasp project using the OpenSaaS template, which includes features like Stripe Payments, OpenAI GPT API, Google Auth, SendGrid, Tailwind, and Cron Jobs.

LANGUAGE: bash
CODE:
wasp new <project-name> -t saas

----------------------------------------

TITLE: Defining getTaskInfo Query in Wasp
DESCRIPTION: This snippet demonstrates how to define a getTaskInfo query in the main.wasp file, specifying the function import and associated entities.

LANGUAGE: wasp
CODE:
query getTaskInfo {
  fn: import { getTaskInfo } from "@src/queries",
  entities: [Task]
}

----------------------------------------

TITLE: Configuring Discord Auth in Wasp File
DESCRIPTION: Basic configuration for enabling Discord authentication in the Wasp application file, including user entity specification and auth method setup.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      discord: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Configuring Google Auth in Wasp
DESCRIPTION: Declaring Google authentication support in the Wasp configuration file.

LANGUAGE: wasp
CODE:
app phraseTutor {
  ...
  auth: {
    userEntity: User,
    externalAuthEntity: SocialUser,
    methods: {
      google: {
        getUserFieldsFn: import { getUserFields } from "@server/auth/google.js"
      }
    },
    onAuthFailedRedirectTo: "/"
  },
  ...
}

entity User {=psl
  id Int @id @default(autoincrement())
  username String @unique
  password String
  profilePicture String
  externalAuthAssociations SocialUser[]
  createdAt DateTime @default(now())
psl=}

entity SocialUser {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

----------------------------------------

TITLE: Installing Wasp Framework
DESCRIPTION: Command to install the Wasp framework in the WSL environment

LANGUAGE: bash
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Customizing Auth UI Appearance
DESCRIPTION: Example of customizing the authentication UI appearance using theme tokens and custom colors.

LANGUAGE: typescript
CODE:
import type { CustomizationOptions } from 'wasp/client/auth'

export const authAppearance: CustomizationOptions['appearance'] = {
  colors: {
    brand: '#5969b8',
    brandAccent: '#de5998',
    submitButtonText: 'white',
  },
}

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'
import { authAppearance } from './appearance'

export function LoginPage() {
  return (
    <LoginForm
      appearance={authAppearance}
    />
  )
}

----------------------------------------

TITLE: Customizing Auth UI Appearance
DESCRIPTION: Example of customizing the authentication UI appearance using theme tokens and custom colors.

LANGUAGE: typescript
CODE:
import type { CustomizationOptions } from 'wasp/client/auth'

export const authAppearance: CustomizationOptions['appearance'] = {
  colors: {
    brand: '#5969b8',
    brandAccent: '#de5998',
    submitButtonText: 'white',
  },
}

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'
import { authAppearance } from './appearance'

export function LoginPage() {
  return (
    <LoginForm
      appearance={authAppearance}
    />
  )
}

----------------------------------------

TITLE: Configuring Wasp Authentication
DESCRIPTION: Basic configuration for enabling username & password authentication in the main.wasp file

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Configuring Authentication and Routing in Wasp
DESCRIPTION: This snippet outlines the structure of a main.wasp file, showing how to configure social authentication for the app and define routes and pages. The actual implementation details are omitted, indicated by ellipses.

LANGUAGE: wasp
CODE:
// Configuring the social authentication
app myApp {
  auth: { ... }
}

// Defining routes and pages
route LoginRoute { ... }
page LoginPage { ... }

----------------------------------------

TITLE: Migrating Database Schema in Wasp
DESCRIPTION: This command is used to update the database schema after defining or modifying entities. It creates a new database migration and applies it.

LANGUAGE: sh
CODE:
wasp db migrate-dev

----------------------------------------

TITLE: Implementing WebSocket Server Handler in JavaScript
DESCRIPTION: Server-side WebSocket implementation using Socket.IO in JavaScript. Handles connection events and chat message broadcasting.

LANGUAGE: javascript
CODE:
export const webSocketFn = (io, context) => {
  io.on('connection', (socket) => {
    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'
    console.log('a user connected: ', username)

    socket.on('chatMessage', async (msg) => {
      console.log('message: ', msg)
      io.emit('chatMessage', { id: uuidv4(), username, text: msg })
    })
  })
}

----------------------------------------

TITLE: Defining Custom Environment Variable Validation in TypeScript
DESCRIPTION: Demonstrates how to define custom environment variable validation using Zod in a Wasp TypeScript project for both client and server environments.

LANGUAGE: typescript
CODE:
import * as z from 'zod'

import { defineEnvValidationSchema } from 'wasp/env'

export const serverEnvValidationSchema = defineEnvValidationSchema(
  z.object({
    STRIPE_API_KEY: z.string({
      required_error: 'STRIPE_API_KEY is required.',
    }),
  })
)

export const clientEnvValidationSchema = defineEnvValidationSchema(
  z.object({
    REACT_APP_NAME: z.string().default('TODO App'),
  })
)

----------------------------------------

TITLE: Submitting Jobs for Execution
DESCRIPTION: Examples of how to submit jobs for immediate or delayed execution from server-side code.

LANGUAGE: javascript
CODE:
import { mySpecialJob } from 'wasp/server/jobs'

const submittedJob = await mySpecialJob.submit({ job: "Johnny" })

// With delay
await mySpecialJob
  .delay(10)
  .submit({ name: "Johnny" })

----------------------------------------

TITLE: Defining Task Entity in Wasp
DESCRIPTION: This snippet shows how to define a Task entity in the main.wasp file using Prisma Schema Language (PSL). It includes fields for id, description, and isDone status.

LANGUAGE: wasp
CODE:
entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
psl=}

----------------------------------------

TITLE: Defining User Entity Schema
DESCRIPTION: Prisma schema definition for the User entity required for GitHub authentication.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
}

----------------------------------------

TITLE: User Entity Definition in Wasp
DESCRIPTION: Basic Prisma schema definition for the User entity that developers can customize with their own fields

LANGUAGE: prisma
CODE:
entity User {=psl
  id Int @id @default(autoincrement())
  // Any other fields you want to store about the user
psl=}

----------------------------------------

TITLE: Commenting on User Signup Fields Definition in Wasp
DESCRIPTION: This HTML comment indicates that the snippet about `defineUserSignupFields` is used in multiple Markdown files related to authentication methods like Google, GitHub, and Keycloak.

LANGUAGE: html
CODE:
<!-- This snippet is used in {overview,google,github,keycloak}.md -->

----------------------------------------

TITLE: Configuring Wasp App for Twitter Agent
DESCRIPTION: Main Wasp configuration file defining the app structure, dependencies, and database models.

LANGUAGE: typescript
CODE:
app twitterAgent {
  wasp: {
    version: "^0.10.6"
  },
  title: "twitter-agent",
	head: [
    "<script async src='https://platform.twitter.com/widgets.js' charset='utf-8'></script>"
  ],
  db: { 
    system: PostgreSQL,
  },
  auth: {
    userEntity: User,
    onAuthFailedRedirectTo: "/login",
    methods: {
      usernameAndPassword: {},
    }
  },
  dependencies: [
    ("openai", "3.2.1"),
    ("rettiwt-api", "1.1.8"),
    ("langchain", "0.0.91"),
    ("@pinecone-database/pinecone", "0.1.6"),
    ("@headlessui/react", "1.7.15"),
    ("react-icons", "4.8.0"),
		("react-twitter-embed", "4.0.4")
  ],
}

// ### Database Models

entity Tweet {=psl
	id              Int           @id @default(autoincrement())
  tweetId         String        
  authorUsername  String
  content         String
  tweetedAt       DateTime      @default(now())
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  drafts          TweetDraft[]
  ideas           GeneratedIdea[]
psl=}

entity TweetDraft {=psl
  id              Int         @id @default(autoincrement())
  content         String
  notes           String
  originalTweet   Tweet       @relation(fields: [originalTweetId], references: [id])
  originalTweetId Int
  createdAt       DateTime    @default(now())
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
psl=}

entity GeneratedIdea {=psl
  id              Int         @id @default(autoincrement())
  content         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  originalTweet   Tweet?      @relation(fields: [originalTweetId], references: [id])
  originalTweetId Int?
  isEmbedded      Boolean     @default(false)
psl=}

entity User {=psl
  id              Int         @id @default(autoincrement())
  username        String      @unique
  password        String
  createdAt       DateTime    @default(now())
  favUsers        String[]
  originalTweets  Tweet[]
  tweetDrafts     TweetDraft[]
  generatedIdeas  GeneratedIdea[]
psl=}

// <<< Client Pages & Routes

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage"
}

----------------------------------------

TITLE: Importing Required Tag Component in TypeScript
DESCRIPTION: Imports the Required component from the site's components directory, used for marking required fields in documentation.

LANGUAGE: typescript
CODE:
import { Required } from '@site/src/components/Tag';

----------------------------------------

TITLE: SendGrid Environment Variables Configuration
DESCRIPTION: Environment variable required for SendGrid email provider configuration.

LANGUAGE: properties
CODE:
SENDGRID_API_KEY=

----------------------------------------

TITLE: Defining Authentication Routes and Pages in Wasp
DESCRIPTION: Sets up routes and pages for login, signup, password reset, and email verification in the main.wasp file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/pages/auth.jsx"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/pages/auth.jsx",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@src/pages/auth.jsx",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@src/pages/auth.jsx",
}

----------------------------------------

TITLE: Importing React Components in JSX
DESCRIPTION: This snippet shows the import statements for custom React components and utility functions used in the blog post.

LANGUAGE: jsx
CODE:
import Link from '@docusaurus/Link';
import useBaseUrl from '@docusaurus/useBaseUrl';

import InBlogCta from './components/InBlogCta';
import WaspIntro from './_wasp-intro.md';
import ImgWithCaption from './components/ImgWithCaption'

----------------------------------------

TITLE: Overriding Default Google Auth Behavior in Wasp
DESCRIPTION: This snippet shows how to override the default Google authentication behavior by specifying a custom userSignupFields import in the Wasp configuration file.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {
        userSignupFields: import { userSignupFields } from "@src/auth/google.js"
      }
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Updating OAuth Provider Configuration in TypeScript (Before)
DESCRIPTION: Shows the previous format for configuring OAuth providers in Wasp 0.12.X, including client ID, client secret, and scope.

LANGUAGE: typescript
CODE:
export function getConfig() {
    return {
        clientID: process.env.GOOGLE_CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        scope: ['profile', 'email'],
    }
}

----------------------------------------

TITLE: Installing Wasp on Linux/OSX/WSL
DESCRIPTION: Command to download and run the Wasp installer script using curl

LANGUAGE: shell
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Restarting TypeScript Language Server in VS Code
DESCRIPTION: Instructions for manually restarting the TypeScript Language Server in VS Code to resolve synchronization issues. This process involves using the command palette, which can be accessed with different key combinations depending on the operating system.

LANGUAGE: markdown
CODE:
Open the command pallete with:
 - `Ctrl` + `Shift` + `P` if you're on Windows or Linux.
 - `Cmd` + `Shift` + `P` if you're on a Mac.

----------------------------------------

TITLE: Configuring Recurring Jobs with Cron
DESCRIPTION: Example of setting up a recurring job using cron schedule.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  schedule: {
    cron: "0 * * * *",
    args: {=json { "job": "args" } json=}
  }
}

----------------------------------------

TITLE: Defining a Catch-All Route in Wasp
DESCRIPTION: Demonstrates how to define a catch-all route in the main.wasp file.

LANGUAGE: wasp
CODE:
route CatchAllRoute { path: "/pages/*", to: CatchAllPage }
page CatchAllPage { ... }

----------------------------------------

TITLE: Testing a React Component with Mocked Query in Wasp (JavaScript)
DESCRIPTION: Illustrates how to test a React component that uses a Wasp query, mocking the query response and rendering the component in context.

LANGUAGE: jsx
CODE:
import { useQuery, getTasks } from "wasp/client/operations";

const Todo = (_props) => {
  const { data: tasks } = useQuery(getTasks);
  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";
import Todo from "./Todo";

const { mockQuery } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockQuery(getTasks, mockTasks);

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Adding Required Dependencies in package.json
DESCRIPTION: Updates to package.json showing the addition of required react-dom and react-router-dom dependencies.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.26.2"
  }
}

----------------------------------------

TITLE: Querying Phrases from Supabase in JavaScript
DESCRIPTION: Using Supabase JavaScript SDK to fetch all phrases from the database.

LANGUAGE: jsx
CODE:
const { data, error } = await supabase.from("phrases").select("*");

----------------------------------------

TITLE: Rendering Custom Image Component in JSX
DESCRIPTION: This snippet demonstrates the usage of a custom ImgWithCaption component to display an image with alt text and source.

LANGUAGE: jsx
CODE:
<ImgWithCaption
    alt="Wasp Update May 23"
    source="img/update-may-23/banner.png"
/>

----------------------------------------

TITLE: Client Setup Function (JavaScript)
DESCRIPTION: Illustrates a setup function in JavaScript that logs a message every hour.

LANGUAGE: javascript
CODE:
export default async function mySetupFunction() {
  let count = 1
  setInterval(
    () => console.log(`You have been online for ${count++} hours.`),
    1000 * 60 * 60
  )
}

----------------------------------------

TITLE: Using getEmail in React Component (JavaScript)
DESCRIPTION: Demonstrates how to import and use the getEmail function within a React component to retrieve the user's email address. The function is called with the user object as an argument.

LANGUAGE: jsx
CODE:
import { getEmail } from 'wasp/auth'

const MainPage = ({ user }) => {
  const email = getEmail(user)
  // ...
}

----------------------------------------

TITLE: Accessing Client Environment Variables in JavaScript/TypeScript
DESCRIPTION: Demonstrates how to access client-side environment variables (prefixed with REACT_APP_) using import.meta.env in both JavaScript and TypeScript.

LANGUAGE: javascript
CODE:
console.log(import.meta.env.REACT_APP_SOME_VAR_NAME)

LANGUAGE: typescript
CODE:
console.log(import.meta.env.REACT_APP_SOME_VAR_NAME)

----------------------------------------

TITLE: Creating NewTaskForm Component in React (JavaScript)
DESCRIPTION: Implements a React component for creating new tasks, using the createTask Action.

LANGUAGE: jsx
CODE:
const NewTaskForm = () => {
  const handleSubmit = async (event) => {
    event.preventDefault()
    try {
      const target = event.target
      const description = target.description.value
      target.reset()
      await createTask({ description })
    } catch (err) {
      window.alert('Error: ' + err.message)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="description" type="text" defaultValue="" />
      <input type="submit" value="Create task" />
    </form>
  )
}

----------------------------------------

TITLE: Importing ShowForTs Component
DESCRIPTION: Import statement for a TypeScript-specific documentation component used to show TypeScript-only content.

LANGUAGE: typescript
CODE:
import { ShowForTs } from '@site/src/components/TsJsHelpers';

----------------------------------------

TITLE: RankNTypes Example with forall
DESCRIPTION: Shows how forall is used with the RankNTypes extension to specify polymorphic function arguments.

LANGUAGE: haskell
CODE:
liftPair :: (forall x. x -> f x) -> (a, b) -> (f a, f b)

----------------------------------------

TITLE: Accessing GitHub User ID in TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve the GitHub identity from a user object and access the GitHub User ID. It assumes that the user object has an 'identities' property containing GitHub-specific information.

LANGUAGE: typescript
CODE:
const githubIdentity = user.identities.github

// GitHub User ID for example "12345678"
githubIdentity.id

----------------------------------------

TITLE: Installing Wasp
DESCRIPTION: Command to download and install the Wasp framework using a shell script.

LANGUAGE: bash
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: This code defines the User entity in the Prisma schema file, which is required for Keycloak authentication in Wasp.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
  // Add your own fields below
  // ...
}

----------------------------------------

TITLE: Importing React Components in MDX
DESCRIPTION: Front matter and import statements for a blog post written in MDX format, importing various React components and utilities.

LANGUAGE: jsx
CODE:
import Link from '@docusaurus/Link';
import useBaseUrl from '@docusaurus/useBaseUrl';

import InBlogCta from './components/InBlogCta';
import WaspIntro from './_wasp-intro.md';
import ImgWithCaption from './components/ImgWithCaption'

----------------------------------------

TITLE: Using Google Auth in Wasp React Component
DESCRIPTION: Implementing Google authentication in a React component using Wasp's auth helpers.

LANGUAGE: jsx
CODE:
import { signInUrl as googleSignInUrl } from "@wasp/auth/helpers/Google";
...
const { data: user } = useAuth();

----------------------------------------

TITLE: Sending Telemetry Data on Wasp Installation
DESCRIPTION: This JSON structure represents the telemetry data sent when Wasp is installed via the install.sh script. It includes a randomly generated ID and the operating system information.

LANGUAGE: json
CODE:
{
  "distinct_id": "274701613078193779564259",
  "os": "linux"
}

----------------------------------------

TITLE: Setting GitHub OAuth Environment Variables
DESCRIPTION: This snippet shows how to set the required GitHub OAuth environment variables in the .env.server file.

LANGUAGE: bash
CODE:
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

----------------------------------------

TITLE: Adding Custom Logo to Wasp Auth UI
DESCRIPTION: This snippet shows how to add a custom logo to the authentication UI components in Wasp. It demonstrates importing a logo image and passing it to the LoginForm component.

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'
import Logo from './logo.png'

export function LoginPage() {
  return (
    <LoginForm
      // Pass in the path to your logo
      logo={Logo}
    />
  )
}

----------------------------------------

TITLE: Generating Dockerfile for Wasp Project
DESCRIPTION: This command uses the Wasp CLI to generate and display the Dockerfile for the current Wasp project. It shows the potentially combined Dockerfile, including any custom modifications.

LANGUAGE: shell
CODE:
wasp dockerfile

----------------------------------------

TITLE: Enabling WebSockets in Wasp Configuration
DESCRIPTION: Shows how to enable WebSockets in the Wasp configuration file by adding the webSocket property to the app object. It specifies the server-side function and auto-connect behavior.

LANGUAGE: wasp
CODE:
app todoApp {
  // ...

  webSocket: {
    fn: import { webSocketFn } from "@src/webSocket",
    autoConnect: true, // optional, default: true
  },
}

----------------------------------------

TITLE: Defining Client Environment Variables in Wasp
DESCRIPTION: When setting client environment variables in a Wasp project, they must be prefixed with 'REACT_APP_' for security reasons. This prefix ensures that only intended variables are injected into the client code, preventing accidental exposure of sensitive information.

LANGUAGE: plaintext
CODE:
REACT_APP_SOME_VAR_NAME=...

----------------------------------------

TITLE: Deploying Wasp Website to Cloudflare Pages
DESCRIPTION: Series of Git commands to deploy changes from the 'release' branch to the 'deploy-web' branch, which triggers automatic deployment on Cloudflare Pages.

LANGUAGE: bash
CODE:
git checkout deploy-web
git merge release
git push
git checkout release

----------------------------------------

TITLE: Sending Telemetry Data on Wasp Installation
DESCRIPTION: This JSON structure represents the telemetry data sent when Wasp is installed via the install.sh script. It includes a randomly generated ID and the operating system information.

LANGUAGE: json
CODE:
{
  "distinct_id": "274701613078193779564259",
  "os": "linux"
}

----------------------------------------

TITLE: Adding a Page with URL Parameters in Wasp
DESCRIPTION: This snippet shows how to add a new page with a URL parameter in the main.wasp file.

LANGUAGE: wasp
CODE:
route HelloRoute { path: "/hello/:name", to: HelloPage }
page HelloPage {
  component: import { HelloPage } from "@src/HelloPage"
}

----------------------------------------

TITLE: Configuring Username Authentication in Wasp
DESCRIPTION: This snippet shows how to enable username authentication in the main.wasp file by specifying the user entity and enabling the usernameAndPassword method.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    // 1. Specify the user entity (we'll define it next)
    userEntity: User,
    methods: {
      // 2. Enable username authentication
      usernameAndPassword: {},
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Creating Initial Project Structure
DESCRIPTION: Basic commands to create new projects in Django and Wasp

LANGUAGE: sh
CODE:
django-admin startproject
python manage.py starapp Todo

LANGUAGE: sh
CODE:
wasp new Todo
wasp

----------------------------------------

TITLE: Implementing Google OAuth with Supabase SDK
DESCRIPTION: Using Supabase JavaScript SDK to initiate Google OAuth sign-in process.

LANGUAGE: jsx
CODE:
supabase.auth.signInWithOAuth({ provider: "google" });

----------------------------------------

TITLE: Protecting a Page with authRequired
DESCRIPTION: Demonstrates how to protect a page by setting the authRequired property to true in the page declaration.

LANGUAGE: wasp
CODE:
page MainPage {
  component: import Main from "@src/pages/Main",
  authRequired: true
}

----------------------------------------

TITLE: Configuring Tailwind Plugins in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to include Tailwind plugins in the Tailwind configuration file of a Wasp project.

LANGUAGE: js
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  // ...
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
  // ...
}

----------------------------------------

TITLE: Implementing onAfterSignup Hook
DESCRIPTION: Example of implementing the onAfterSignup hook to perform actions after user signup.

LANGUAGE: javascript
CODE:
export const onAfterSignup = async ({
  providerId,
  user,
  oauth,
  prisma,
  req,
}) => {
  const count = await prisma.user.count()
  console.log('number of users after', count)
  console.log('user object', user)

  if (oauth) {
    console.log('accessToken', oauth.tokens.accessToken)
    console.log('uniqueRequestId', oauth.uniqueRequestId)

    const id = oauth.uniqueRequestId
    const data = someKindOfStore.get(id)
    if (data) {
      console.log('saved data for the ID', data)
    }
    someKindOfStore.delete(id)
  }
}

----------------------------------------

TITLE: Using getEmail in React Component (TypeScript)
DESCRIPTION: TypeScript implementation of getEmail helper in a React component, including proper type definitions for the user object using AuthUser type from wasp/auth.

LANGUAGE: tsx
CODE:
import { getEmail, AuthUser } from 'wasp/auth'

const MainPage = ({ user }: { user: AuthUser }) => {
  const email = getEmail(user)
  // ...
}

----------------------------------------

TITLE: Configuring React Hook Form with Zod
DESCRIPTION: Setup of React Hook Form instance with Zod resolver and default values for form handling.

LANGUAGE: tsx
CODE:
type FormData = z.infer<typeof formSchema>
const form = useForm<FormData>({
  resolver: zodResolver(formSchema),
  defaultValues: customer,
});

----------------------------------------

TITLE: Creating New App with Wasp CLI
DESCRIPTION: Instructions for generating a new Wasp application using the CLI command 'wasp new' and selecting AI generation. Requires OpenAI API keys to be set as environment variables.

LANGUAGE: shell
CODE:
wasp new

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: Demonstrates how to define the User entity in the Prisma schema file, which is required for Google authentication.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
  // Add your own fields below
  // ...
}

----------------------------------------

TITLE: Setting Discord Environment Variables
DESCRIPTION: This snippet shows how to set the necessary Discord client ID and secret as environment variables in the .env.server file.

LANGUAGE: bash
CODE:
DISCORD_CLIENT_ID=your-discord-client-id
DISCORD_CLIENT_SECRET=your-discord-client-secret

----------------------------------------

TITLE: Defining a Todo App Structure in Wasp
DESCRIPTION: This Wasp code snippet defines the basic structure of a Todo application, including authentication methods, routing, and page components. It demonstrates Wasp's concise syntax for setting up a full-stack web application.

LANGUAGE: wasp
CODE:
app todoApp {
  title: "ToDo App",/* visible in tab */

  auth: {/* full-stack auth out-of-the-box */
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      usernameAndPassword: {},
      google: {}
    }
  }
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
	/* import your React code */
  component: import Main from "@client/Main.js"
}

----------------------------------------

TITLE: Sending Telemetry Data on CLI Command Invocation in JSON
DESCRIPTION: This snippet shows the JSON structure of telemetry data sent when a Wasp CLI command is invoked. It includes a distinct user ID, project hash, build flag, deploy command arguments, Wasp version, OS, and context.

LANGUAGE: json
CODE:
{
  "distinct_id": "bf3fa7a8-1c11-4f82-9542-ec1a2d28786b",
  "project_hash": "6d7e561d62b955d1",
  "is_build": true,
  "deploy_cmd_args": "fly;deploy",
  "wasp_version": "0.1.9.1",
  "os": "linux",
  "context": "CI"
}

----------------------------------------

TITLE: Sending Telemetry Data on CLI Command Invocation in JSON
DESCRIPTION: This snippet shows the JSON structure of telemetry data sent when a Wasp CLI command is invoked. It includes a distinct user ID, project hash, build flag, deploy command arguments, Wasp version, OS, and context.

LANGUAGE: json
CODE:
{
  "distinct_id": "bf3fa7a8-1c11-4f82-9542-ec1a2d28786b",
  "project_hash": "6d7e561d62b955d1",
  "is_build": true,
  "deploy_cmd_args": "fly;deploy",
  "wasp_version": "0.1.9.1",
  "os": "linux",
  "context": "CI"
}

----------------------------------------

TITLE: Configuring Prisma Preview Features and PostgreSQL Extensions
DESCRIPTION: Example of enabling Prisma preview features and PostgreSQL extensions in Wasp configuration

LANGUAGE: wasp
CODE:
app MyApp {
  // ...
  db: {
    system: PostgreSQL,
    prisma: {
      clientPreviewFeatures: ["postgresqlExtensions"],
      dbExtensions: [
        { name: "hstore", schema: "myHstoreSchema" },
        { name: "pg_trgm" },
        { name: "postgis", version: "2.1" }
      ]
    }
  }
}

----------------------------------------

TITLE: Implementing Custom Google Signup Fields in TypeScript
DESCRIPTION: Shows how to implement the userSignupFields function for Google authentication in TypeScript.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  isSignupComplete: () => false,
})

----------------------------------------

TITLE: Implementing Authentication UI Components
DESCRIPTION: This snippet shows how to implement the Login page component using Wasp's authentication UI components.

LANGUAGE: javascript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Implementing Zod Validation Schema
DESCRIPTION: Definition of form validation rules using Zod schema, including string validation, email format checking, and date constraints.

LANGUAGE: tsx
CODE:
const formSchema = z.object({
    name: z.string().min(1, { message: 'Name is required' }),
    surname: z.string().min(1, { message: 'Surname is required' }),
    email: z.string().email({ message: 'Invalid email address' }),
    dateOfBirth: z
      .date()
      .max(new Date(), { message: 'Date cannot be in the future' }),
    premiumUser: z.boolean(),
  });

----------------------------------------

TITLE: Defining Phrase Data Structure in JSON
DESCRIPTION: JSON structure for storing phrase data, including id, group, and translations for English and Italian.

LANGUAGE: json
CODE:
{
    "id": 1,
    "group": "general",
    "translations": {
        "en": "Yes",
        "it": "Si"
    }
}

----------------------------------------

TITLE: Customizing Discord Auth Configuration
DESCRIPTION: This snippet demonstrates how to customize the Discord authentication configuration by specifying a config function and user signup fields in the Wasp file.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      discord: {
        configFn: import { getConfig } from "@src/auth/discord.js",
        userSignupFields: import { userSignupFields } from "@src/auth/discord.js"
      }
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Importing React Components and Utilities in JSX
DESCRIPTION: Front matter and import statements for a blog post component using Docusaurus and custom components.

LANGUAGE: jsx
CODE:
import Link from '@docusaurus/Link';
import useBaseUrl from '@docusaurus/useBaseUrl';

import InBlogCta from './components/InBlogCta';
import WaspIntro from './_wasp-intro.md';
import ImgWithCaption from './components/ImgWithCaption'

----------------------------------------

TITLE: Using useParams Hook for Route Parameters
DESCRIPTION: Demonstrates how to use the useParams hook to access route parameters in React Router 6.

LANGUAGE: tsx
CODE:
import { useParams } from 'react-router-dom'

export function SomePage() {
  const { id } = useParams()
  return (
    <div>
      <h1>Item {id}</h1>
    </div>
  )
}

----------------------------------------

TITLE: Setting Environment Variables During Launch
DESCRIPTION: Example of setting multiple environment variables during the launch process.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>

----------------------------------------

TITLE: Customizing Social Buttons Layout in Wasp Auth UI
DESCRIPTION: This snippet demonstrates how to customize the layout of social authentication buttons in Wasp auth UI components. It shows how to set the socialLayout prop to 'vertical' for the LoginForm component.

LANGUAGE: typescript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function LoginPage() {
  return (
    <LoginForm
      // Pass in the socialLayout prop
      socialLayout="vertical"
    />
  )
}

----------------------------------------

TITLE: Customizing Base Path in Vite Config (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to customize the base path in the Vite configuration. It modifies the 'base' option to serve the client from a different path than the root.

LANGUAGE: javascript
CODE:
export default {
  base: '/my-app/',
}

----------------------------------------

TITLE: Complete Zod Schema for Advanced React Form Validation
DESCRIPTION: This code snippet presents the full Zod schema incorporating all advanced validation techniques, including custom, conditional, and asynchronous validations for a comprehensive React form.

LANGUAGE: tsx
CODE:
const formSchema = z
    .object({
      name: z.string().min(1, { message: 'Name is required' }),
      surname: z.string().min(1, { message: 'Surname is required' }),
      email: z
        .string()
        .email({ message: 'Invalid email address' })
        .refine(
          async (email) => {
            if (email === customer.email && customer.email !== '') return true;
            return !(await checkEmail(email));
          },
          { message: 'Email already exists' }
        ),
      dateOfBirth: z.date().max(new Date(), {
        message: 'Date of birth cannot be in the future',
      }),
      premiumUser: z.boolean(),
      username: z
        .string()
        .min(1, { message: 'Username is required' })
        .refine(
          async (username) => {
            if (username === customer.username && customer.username !== '')
              return true;
            return !(await checkUsername(username));
          },
          { message: 'Username already exists' }
        ),
      address: z.string().min(1, { message: 'Address is required' }),
      postalCode: z.string().min(1, { message: 'Postal code is required' }),
      city: z.string().min(1, { message: 'City is required' }),
      country: z.string().min(1, { message: 'Country is required' }),
    })
    .superRefine((data, ctx) => {
       if (!isValidUKPostcode(data.postalCode, data.country)) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'Invalid UK postal code format (e.g., SW1A 1AA)',
          path: ['postalCode'],
        });
      }

      if (data.username.includes(' ')) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'Username cannot contain spaces',
          path: ['username'],
        });
      }

      if (/^\d+$/.test(data.city)) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'City name cannot be purely numeric',
          path: ['city'],
        });
      }
    });

----------------------------------------

TITLE: Displaying Wasp CLI Version
DESCRIPTION: Shows how to use the 'wasp version' command to display the current version of the Wasp CLI.

LANGUAGE: bash
CODE:
$ wasp version

0.11.1

----------------------------------------

TITLE: Implementing onBeforeLogin Hook
DESCRIPTION: Example of implementing the onBeforeLogin hook to perform checks before user login.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const onBeforeLogin = async ({ providerId, user, prisma, req }) => {
  if (
    providerId.providerName === 'email' &&
    providerId.providerUserId === 'some@email.com'
  ) {
    throw new HttpError(403, 'You cannot log in with this email')
  }
}

----------------------------------------

TITLE: Implementing onBeforeLogin Hook
DESCRIPTION: Example of implementing the onBeforeLogin hook to perform checks before user login.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const onBeforeLogin = async ({ providerId, user, prisma, req }) => {
  if (
    providerId.providerName === 'email' &&
    providerId.providerUserId === 'some@email.com'
  ) {
    throw new HttpError(403, 'You cannot log in with this email')
  }
}

----------------------------------------

TITLE: Building Static Content for Wasp Website
DESCRIPTION: Command to generate static content for the Wasp website into the 'build' directory, which can be served using any static content hosting service.

LANGUAGE: bash
CODE:
$ npm build

----------------------------------------

TITLE: Accessing Keycloak User ID from Identity Object
DESCRIPTION: Demonstrates how to access a Keycloak user's identity information from a user object. The code extracts the Keycloak-specific identity and shows how to access the unique identifier (UUID format) associated with the Keycloak user.

LANGUAGE: typescript
CODE:
const keycloakIdentity = user.identities.keycloak

// Keycloak User ID for example "12345678-1234-1234-1234-123456789012"
keycloakIdentity.id

----------------------------------------

TITLE: Using the Link Component in React
DESCRIPTION: Shows how to use the custom Link component from @wasp/router to create type-safe links to other pages, including passing route parameters.

LANGUAGE: jsx
CODE:
import { Link } from '@wasp/router'

export const TaskList = () => {
  // ...

  return (
    <div>
      {tasks.map((task) => (
        <Link
          key={task.id}
          to="/task/:id"
          params={{ id: task.id }}>
          {task.description}
        </Link>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Configuring Social Auth Entities in Wasp
DESCRIPTION: Basic setup of User and SocialLogin entities for social authentication with required fields and relationships.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

entity User {=psl
    id                        Int           @id @default(autoincrement())
    externalAuthAssociations  SocialLogin[]
psl=}

entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

----------------------------------------

TITLE: Using getFirstProviderUserId Helper in JavaScript
DESCRIPTION: Demonstration of using the getFirstProviderUserId helper method to retrieve the user's ID in a Wasp application.

LANGUAGE: javascript
CODE:
const MainPage = ({ user }) => {
  const userId = user.getFirstProviderUserId()
  // ...
}

----------------------------------------

TITLE: Basic React Component Implementation
DESCRIPTION: Demonstrates the minimal React component structure referenced by the Wasp page declaration, including necessary imports.

LANGUAGE: javascript
CODE:
import waspLogo from './waspLogo.png'
import './Main.css'

const MainPage = () => {
  // ...
}
export default MainPage

----------------------------------------

TITLE: Initializing Express Server with Socket.IO
DESCRIPTION: Sets up an Express server with Socket.IO, defining types for WebSocket events and implementing connection handling logic.

LANGUAGE: typescript
CODE:
import cors from 'cors';
import express from 'express';
import { Server, Socket } from 'socket.io';

type PollState = {
  question: string;
  options: {
    id: number;
    text: string;
    description: string;
    votes: string[];
  }[];
};
interface ClientToServerEvents {
  vote: (optionId: number) => void;
  askForStateUpdate: () => void;
}
interface ServerToClientEvents {
  updateState: (state: PollState) => void;
}
interface InterServerEvents { }
interface SocketData {
  user: string;
}

const app = express();
app.use(cors({ origin: 'http://localhost:5173' }));
const server = require('http').createServer(app);
const io = new Server<
  ClientToServerEvents,
  ServerToClientEvents,
  InterServerEvents,
  SocketData
>(server, {
  cors: {
    origin: 'http://localhost:5173',
    methods: ['GET', 'POST'],
  },
});

// ... (rest of the server setup code)

----------------------------------------

TITLE: Defining Authentication Routes and Pages in Wasp
DESCRIPTION: This snippet defines the necessary authentication routes and pages in the Wasp configuration file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}

----------------------------------------

TITLE: GraphQL Schema Permission Definitions
DESCRIPTION: Example showing how to define permissions directly in GraphQL schema using directives.

LANGUAGE: graphql
CODE:
type User {
  id: ID!
  name: String!
  email: String! @hasRole(roles: [ADMIN])
  posts: [Post!]! @hasRole(roles: [ADMIN, EDITOR])
}

----------------------------------------

TITLE: Using getFirstProviderUserId Helper in JavaScript
DESCRIPTION: Demonstration of using the getFirstProviderUserId helper method to retrieve the user's ID in a Wasp application.

LANGUAGE: javascript
CODE:
const MainPage = ({ user }) => {
  const userId = user.getFirstProviderUserId()
  // ...
}

----------------------------------------

TITLE: Wasp Language Extension URL Configuration
DESCRIPTION: Link to source code of VSCode Wasp language extension's core functionality

LANGUAGE: typescript
CODE:
https://github.com/wasp-lang/vscode-wasp/blob/main/src/extension.ts

----------------------------------------

TITLE: Checking Wasp Telemetry Status
DESCRIPTION: Shows the output of the 'wasp telemetry' command, which displays the current telemetry status, cache directory, and last sent time for the Wasp project.

LANGUAGE: bash
CODE:
$ wasp telemetry

Telemetry is currently: ENABLED
Telemetry cache directory: /home/user/.cache/wasp/telemetry/
Last time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC
Our telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.

----------------------------------------

TITLE: Updating Wasp Version in main.wasp
DESCRIPTION: Updates the Wasp version field in the main.wasp file to ^0.15.0.

LANGUAGE: wasp
CODE:
app MyApp {
  wasp: {
    version: "^0.15.0"
  },
}

----------------------------------------

TITLE: Todo App Implementation - JavaScript/React
DESCRIPTION: Initial JavaScript implementation of a Todo app with React components showing potential TypeScript-catchable errors

LANGUAGE: jsx
CODE:
function MainPage() {
  const { data: tasks } = useQuery(getTasks)

  return (
    <div>
      <h1>Todos</h1>
      <TaskList tasks={tasks} />
    </div>
  )
}

function TaskList({ tasks }) {
  if (!tasks.len) {
    return <div>No tasks</div>
  }

  return (
    <div>
      {tasks.map((task, idx) => <Task {...task} key={idx}/>)}
    </div>
  )
}

function Task({ id, isdone, description }) {
  return (
    <div>
      <label>
        <input
          type='checkbox'
          id={id}
          checked={isdone}
          onChange={
            (event) => updateTask({ id, isDone: event.target.checked })
          }
        />
        <span>{description}</span>
      </label>
    </div>
  )
}

----------------------------------------

TITLE: Defining Authentication Routes and Pages
DESCRIPTION: This snippet demonstrates how to define the necessary authentication routes and pages in the Wasp file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@client/pages/auth.jsx"
}

----------------------------------------

TITLE: Opening Wasp Database Studio
DESCRIPTION: Command to launch the database studio interface for viewing and editing database contents in the browser.

LANGUAGE: sh
CODE:
wasp db studio

----------------------------------------

TITLE: Changing Wasp App Title
DESCRIPTION: This snippet demonstrates how to change the title of a Wasp app, which appears in the browser tab next to the favicon.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "BookFace"
}

----------------------------------------

TITLE: Accessing GitHub User Identity in TypeScript
DESCRIPTION: Retrieves the GitHub identity object from a user's identities collection and accesses the GitHub user ID. This is typically used in authentication flows where GitHub is used as an identity provider.

LANGUAGE: typescript
CODE:
const githubIdentity = user.identities.github

// GitHub User ID for example "12345678"
githubIdentity.id

----------------------------------------

TITLE: Defining User Entity in Wasp
DESCRIPTION: Definition of the User entity in the main.wasp file, including the required id field and placeholder for additional fields.

LANGUAGE: wasp
CODE:
entity User {=psl
    id                        Int           @id @default(autoincrement())
    // Add your own fields below
    // ...
psl=}

----------------------------------------

TITLE: Creating New Wasp Project
DESCRIPTION: Command to create a new Wasp project named TodoApp using the Wasp CLI tool.

LANGUAGE: sh
CODE:
$ wasp new TodoApp

----------------------------------------

TITLE: Using getFirstProviderUserId Helper in Wasp
DESCRIPTION: Example of using the getFirstProviderUserId helper method to retrieve the first available user ID in a Wasp application.

LANGUAGE: typescript
CODE:
const MainPage = ({ user }: { user: AuthUser }) => {
  const userId = user.getFirstProviderUserId()
  // ...
}

LANGUAGE: typescript
CODE:
export const createTask: CreateTask<...>  = async (args, context) => {
  const userId = context.user.getFirstProviderUserId()
  // ...
}

----------------------------------------

TITLE: Defining Username & Password Migration API in Wasp
DESCRIPTION: This Wasp code snippet defines an API endpoint for migrating username and password data to the new auth system.

LANGUAGE: wasp
CODE:
api migrateUsernameAndPassword {
  httpRoute: (GET, "/migrate-username-and-password"),
  fn: import { migrateUsernameAndPasswordHandler } from "@src/migrateToNewAuth",
  entities: []
}

----------------------------------------

TITLE: Implementing Task Update Action in JavaScript
DESCRIPTION: Defines the updateTask action function to update a task's isDone status in the database.

LANGUAGE: javascript
CODE:
export const updateTask = async ({ id, isDone }, context) => {
  return context.entities.Task.updateMany({
    where: { id },
    data: { isDone }
  })
}

----------------------------------------

TITLE: Adding Environment Variables for Google OAuth
DESCRIPTION: This snippet shows how to add the necessary environment variables for Google OAuth in the .env.server file.

LANGUAGE: bash
CODE:
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

----------------------------------------

TITLE: Creating a New Wasp Project with Interactive Mode
DESCRIPTION: This snippet demonstrates how to use the 'wasp new' command to create a new Wasp project using the interactive mode. It shows the prompts for project name and template selection.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
    Simple starter template with a single page.
[2] todo-ts
    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.
[3] saas
    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.
[4] embeddings
    Comes with code for generating vector embeddings and performing vector similarity search.
[5] ai-generated
    ü§ñ Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)
 ‚ñ∏ 1

üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Defining a Route in Wasp
DESCRIPTION: Demonstrates how to define a route in the main.wasp file.

LANGUAGE: wasp
CODE:
route TaskRoute { path: "/task/:id", to: TaskPage }
page TaskPage { ... }

----------------------------------------

TITLE: Using getUsername in Server Function (TypeScript)
DESCRIPTION: TypeScript version of the server-side task creation function using getUsername, with generic type CreateTask for proper type checking.

LANGUAGE: typescript
CODE:
import { getUsername } from 'wasp/auth'

export const createTask: CreateTask<...>  = async (args, context) => {
  const username = getUsername(context.user)
  // ...
}

----------------------------------------

TITLE: Implementing onBeforeLogin Hook
DESCRIPTION: Example of implementing the onBeforeLogin hook to perform actions before user login.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const onBeforeLogin = async ({ providerId, user, prisma, req }) => {
  if (
    providerId.providerName === 'email' &&
    providerId.providerUserId === 'some@email.com'
  ) {
    throw new HttpError(403, 'You cannot log in with this email')
  }
}

----------------------------------------

TITLE: Accessing Keycloak User ID in Wasp
DESCRIPTION: This snippet demonstrates how to access the Keycloak User ID from a user's identities object in a Wasp project. It assumes that the user object has been properly populated with Keycloak identity information.

LANGUAGE: typescript
CODE:
const keycloakIdentity = user.identities.keycloak

// Keycloak User ID for example "12345678-1234-1234-1234-123456789012"
keycloakIdentity.id

----------------------------------------

TITLE: Sending Emails with JavaScript
DESCRIPTION: Example of sending an email using the emailSender.send() method in JavaScript, demonstrating all required fields including from, to, subject, and content formats.

LANGUAGE: javascript
CODE:
import { emailSender } from "wasp/server/email";

// In some action handler...
const info = await emailSender.send({
  from: {
    name: "John Doe",
    email: "john@doe.com",
  },
  to: "user@domain.com",
  subject: "Saying hello",
  text: "Hello world",
  html: "Hello <strong>world</strong>",
});

----------------------------------------

TITLE: Installing Wasp 0.12.x
DESCRIPTION: This bash command installs Wasp version 0.12.4 using the installer script.

LANGUAGE: bash
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.12.4

----------------------------------------

TITLE: OAuth Config Function After Migration
DESCRIPTION: Shows the new format of the OAuth provider configuration function that only includes scopes array.

LANGUAGE: typescript
CODE:
export function getConfig() {
    return {
        scopes: ['profile', 'email'],
    }
}

----------------------------------------

TITLE: Checking Wasp Telemetry Status
DESCRIPTION: Shows the output of the 'wasp telemetry' command, which displays the current status of telemetry, the cache directory, and the last time telemetry data was sent for the project.

LANGUAGE: bash
CODE:
$ wasp telemetry

Telemetry is currently: ENABLED
Telemetry cache directory: /home/user/.cache/wasp/telemetry/
Last time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC
Our telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.

----------------------------------------

TITLE: Configuring New Auth in Wasp 0.12.X
DESCRIPTION: This code snippet shows how authentication is configured in Wasp 0.12.X, with simplified User entity and automatic auth setup.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.12.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      gitHub: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

entity User {=psl
  id Int @id @default(autoincrement())
psl=}

----------------------------------------

TITLE: Displaying Wasp CLI Version
DESCRIPTION: Shows the output of the 'wasp version' command, which displays the current version of the Wasp CLI and provides instructions for installing or updating to a specific version.

LANGUAGE: bash
CODE:
$ wasp version

0.14.0

If you wish to install/switch to the latest version of Wasp, do:
curl -sSL https://get.wasp.sh/installer.sh | sh -s

If you want specific x.y.z version of Wasp, do:
curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z

Check https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.

----------------------------------------

TITLE: Defining User Signup Fields in TypeScript
DESCRIPTION: This snippet demonstrates how to define custom user signup fields in TypeScript using the 'defineUserSignupFields' function from Wasp. It includes validation for a required address field and handling of an optional phone field.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  address: (data) => {
    if (!data.address) {
      throw new Error('Address is required')
    }
    return data.address
  }
  phone: (data) => data.phone,
})

----------------------------------------

TITLE: Public Directory Structure Example
DESCRIPTION: Shows the directory structure for storing public assets that need to be served from the root path without being processed by the build system.

LANGUAGE: plaintext
CODE:
.
‚îî‚îÄ‚îÄ public
    ‚îú‚îÄ‚îÄ favicon.ico
    ‚îî‚îÄ‚îÄ robots.txt

----------------------------------------

TITLE: Updating Wasp Version Configuration
DESCRIPTION: Demonstrates how to update the Wasp version field in the main configuration file to version 0.16.0.

LANGUAGE: wasp
CODE:
app MyApp {
  wasp: {
    version: "^0.16.0"
  },
}

----------------------------------------

TITLE: Updating Wasp Version Configuration
DESCRIPTION: Demonstrates how to update the Wasp version field in the main configuration file to version 0.16.0.

LANGUAGE: wasp
CODE:
app MyApp {
  wasp: {
    version: "^0.16.0"
  },
}

----------------------------------------

TITLE: Mailgun Environment Variables Configuration
DESCRIPTION: Environment variables required for Mailgun email provider configuration.

LANGUAGE: properties
CODE:
MAILGUN_API_KEY=
MAILGUN_DOMAIN=

----------------------------------------

TITLE: Displaying Old Project Structure in Wasp 0.11.x
DESCRIPTION: This code snippet shows the file tree of a fresh Wasp project created with version 0.11.x, illustrating the old project structure.

LANGUAGE: plaintext
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ client
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ react-app-env.d.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îÇ   ‚îú‚îÄ‚îÄ server
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îú‚îÄ‚îÄ shared
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îî‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Implementing Reset Password Page with ResetPasswordForm Component
DESCRIPTION: This snippet demonstrates how to create a reset password page using the ResetPasswordForm component provided by Wasp.

LANGUAGE: wasp
CODE:
route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { ResetPasswordPage } from "@src/ResetPasswordPage.tsx"
}

LANGUAGE: tsx
CODE:
import { ResetPasswordForm } from 'wasp/client/auth'

// Use it like this
export function ResetPasswordPage() {
  return <ResetPasswordForm />
}

----------------------------------------

TITLE: Implementing Reset Password Page with ResetPasswordForm Component
DESCRIPTION: This snippet demonstrates how to create a reset password page using the ResetPasswordForm component provided by Wasp.

LANGUAGE: wasp
CODE:
route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { ResetPasswordPage } from "@src/ResetPasswordPage.tsx"
}

LANGUAGE: tsx
CODE:
import { ResetPasswordForm } from 'wasp/client/auth'

// Use it like this
export function ResetPasswordPage() {
  return <ResetPasswordForm />
}

----------------------------------------

TITLE: Updating Root Component with Outlet
DESCRIPTION: Shows how to update the root component to use React Router 6's Outlet component instead of children prop.

LANGUAGE: tsx
CODE:
export function App({ children }: { children: React.ReactNode }) {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      {children}
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

LANGUAGE: tsx
CODE:
import { Outlet } from 'react-router-dom'

export function App() {
  return (
    <div>
      <header>
        <h1>My App</h1>
      </header>
      <Outlet />
      <footer>
        <p>My App footer</p>
      </footer>
    </div>
  )
}

----------------------------------------

TITLE: Using Link Component with Catch-All Route
DESCRIPTION: Shows how to use the Link component with a catch-all route in React.

LANGUAGE: jsx
CODE:
<Link to="/pages/*" params={{ '*': 'about' }}>
  About
</Link>

----------------------------------------

TITLE: Viewing Generated Dockerfile Contents with Wasp CLI
DESCRIPTION: Command to display the complete Dockerfile that will be used for deployment, including any custom additions and default Wasp configurations.

LANGUAGE: shell
CODE:
wasp dockerfile

----------------------------------------

TITLE: Configuring Authentication in Wasp
DESCRIPTION: Demonstrates how to set up multiple authentication methods (username/password, Google, GitHub) using Wasp's auth configuration.

LANGUAGE: jsx
CODE:
app SaaSTemplate {
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
      google: {},
      gitHub: {}
    }
  }
}

----------------------------------------

TITLE: Defining User Entity in Wasp
DESCRIPTION: Example of defining a User entity in a Wasp file, which represents the business logic user and can be customized with additional fields.

LANGUAGE: wasp
CODE:
entity User {=psl
  id Int @id @default(autoincrement())
  // Any other fields you want to store about the user
psl=}

----------------------------------------

TITLE: Creating a New Wasp Project with Default Template
DESCRIPTION: Shows how to create a new Wasp project using the default template by specifying the project name directly with the 'wasp new' command.

LANGUAGE: bash
CODE:
$ wasp new MyFirstProject
 üêù --- Creating your project from the basic template... ---------------------------

 Created new Wasp app in ./MyFirstProject directory!
 To run it, do:

     cd MyFirstProject
     wasp start

----------------------------------------

TITLE: Accessing Server Environment Variables in JavaScript/TypeScript
DESCRIPTION: Shows how to access server-side environment variables in a Wasp project using JavaScript or TypeScript. These variables can store secret values and are not publicly readable.

LANGUAGE: javascript
CODE:
console.log(process.env.SOME_VAR_NAME)

LANGUAGE: typescript
CODE:
console.log(process.env.SOME_VAR_NAME)

----------------------------------------

TITLE: Navigating to Web App Build Directory
DESCRIPTION: Changes the current directory to the web application build directory in the Wasp project structure.

LANGUAGE: bash
CODE:
cd .wasp/build/web-app

----------------------------------------

TITLE: Package.json Updates for Prisma 5
DESCRIPTION: Updates to package.json configuration including setting module type and updating Prisma version to 5.19.1.

LANGUAGE: json
CODE:
{
  "type": "module",
  "devDependencies": {
    "prisma": "5.19.1"
  }
}

----------------------------------------

TITLE: Creating a New Wasp Project with Default Template
DESCRIPTION: Shows how to create a new Wasp project using the default template without entering interactive mode.

LANGUAGE: bash
CODE:
$ wasp new MyFirstProject
üêù --- Creating your project from the "basic" template... -------------------------

Created new Wasp app in ./MyFirstProject directory!

To run your new app, do:
    cd MyFirstProject
    wasp db start

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Environment variable configuration for GitHub OAuth credentials.

LANGUAGE: bash
CODE:
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

----------------------------------------

TITLE: Configuring PostCSS for Tailwind in Wasp Project
DESCRIPTION: This snippet shows the content of the postcss.config.cjs file. It sets up PostCSS to use Tailwind CSS and autoprefixer plugins, which are necessary for Tailwind to function properly.

LANGUAGE: js
CODE:
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----------------------------------------

TITLE: Checking User Signup Status in React Component
DESCRIPTION: This React component snippet shows how to use the useAuth hook to check if a user has completed the signup process and redirect them if necessary.

LANGUAGE: jsx
CODE:
import { useAuth } from 'wasp/client/auth'
import { Navigate } from 'react-router-dom'

export function HomePage() {
  const { data: user } = useAuth()

  if (user.isSignupComplete === false) {
    return <Navigate to="/edit-user-details" />
  }

  // ...
}

----------------------------------------

TITLE: Building Wasp Web Application
DESCRIPTION: Installs npm dependencies and builds the web application with the specified backend API URL. Requires setting REACT_APP_API_URL environment variable to point to the deployed Wasp backend server.

LANGUAGE: bash
CODE:
npm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Required environment variables for Google OAuth integration.

LANGUAGE: bash
CODE:
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

----------------------------------------

TITLE: Starting Headless Test Environment
DESCRIPTION: Command to start the application in headless test mode for debugging purposes.

LANGUAGE: sh
CODE:
npm run headless:start

----------------------------------------

TITLE: Unit Testing Helper Functions in JavaScript
DESCRIPTION: Demonstrates how to write and structure unit tests for helper functions in JavaScript using Vitest.

LANGUAGE: javascript
CODE:
export function areThereAnyTasks(tasks) {
  return tasks.length === 0;
}

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";

import { areThereAnyTasks } from "./helpers";

test("areThereAnyTasks", () => {
  expect(areThereAnyTasks([])).toBe(false);
});

----------------------------------------

TITLE: Adding a Custom Route in Server Setup (TypeScript)
DESCRIPTION: Demonstrates adding a custom route in the server setup function using TypeScript. It includes type annotations for better type safety.

LANGUAGE: typescript
CODE:
import { ServerSetupFn } from 'wasp/server'
import { Application } from 'express'

export const mySetupFunction: ServerSetupFn = async ({ app }) => {
  addCustomRoute(app)
}

function addCustomRoute(app: Application) {
  app.get('/customRoute', (_req, res) => {
    res.send('I am a custom route')
  })
}

----------------------------------------

TITLE: Testing with Mocked APIs in Wasp
DESCRIPTION: Example of testing a component that uses API calls, demonstrating how to mock API responses.

LANGUAGE: javascript
CODE:
import { api } from "wasp/client/api";

const Todo = (_props) => {
  const [tasks, setTasks] = useState([]);
  useEffect(() => {
    api
      .get("/tasks")
      .then((res) => res.json())
      .then((tasks) => setTasks(tasks))
      .catch((err) => window.alert(err));
  });

  return (
    <ul>
      {tasks &&
        tasks.map((task) => (
          <li key={task.id}>
            <input type="checkbox" value={task.isDone} />
            {task.description}
          </li>
        ))}
    </ul>
  );
};

LANGUAGE: javascript
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import Todo from "./Todo";

const { mockApi } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockApi("/tasks", { res: mockTasks });

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Building Wasp Web App with NPM and Environment Variable in Bash
DESCRIPTION: Installs dependencies and builds the React web app, setting the API URL environment variable to connect to the Wasp backend. The <url_to_wasp_backend> placeholder should be replaced with the actual URL of the deployed Wasp server.

LANGUAGE: bash
CODE:
npm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build

----------------------------------------

TITLE: Installing Packages to Data Directory in Wasp Project
DESCRIPTION: This bash command compiles packages and copies them into the 'data/' directory, allowing for local testing using 'cabal run' or 'wasp-cli' after installation.

LANGUAGE: bash
CODE:
tools/install_packages_to_data_dir.sh

----------------------------------------

TITLE: Declaring Actions in Wasp
DESCRIPTION: Example of declaring Actions in a Wasp file

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions.js"
}

action markTaskAsDone {
  fn: import { markTaskAsDone } from "@src/actions.js"
}

----------------------------------------

TITLE: Creating a New Wasp Project with Todo App Typescript Template
DESCRIPTION: This command creates a new Wasp project using the Todo App with Typescript template. The template includes features like Auth (username/password) and Full-stack Type Safety.

LANGUAGE: bash
CODE:
wasp new <project-name> -t todo-ts

----------------------------------------

TITLE: Defining Root Route and Main Page in Wasp
DESCRIPTION: This snippet shows how to define the root route and main page in a Wasp file. It specifies the path for the root route and imports the React component for the main page.

LANGUAGE: wasp
CODE:
route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@src/MainPage"
}

----------------------------------------

TITLE: Testing a React Todo Component with Mocked API in JavaScript
DESCRIPTION: Shows how to test the Todo component that uses an API call by mocking the API response using Wasp's testing utilities.

LANGUAGE: jsx
CODE:
import { test, expect } from "vitest";
import { screen } from "@testing-library/react";

import { mockServer, renderInContext } from "wasp/client/test";
import Todo from "./Todo";

const { mockApi } = mockServer();

const mockTasks = [
  {
    id: 1,
    description: "test todo 1",
    isDone: true,
    userId: 1,
  },
];

test("handles mock data", async () => {
  mockApi("/tasks", { res: mockTasks });

  renderInContext(<Todo />);

  await screen.findByText("test todo 1");

  expect(screen.getByRole("checkbox")).toBeChecked();

  screen.debug();
});

----------------------------------------

TITLE: Configuring Query Client
DESCRIPTION: Example of configuring the React Query client with custom default options using the setup function.

LANGUAGE: javascript
CODE:
import { configureQueryClient } from 'wasp/client/operations'

export default async function mySetupFunction() {
  configureQueryClient({
    defaultOptions: {
      queries: {
        staleTime: Infinity,
      },
    },
  })
}

----------------------------------------

TITLE: Creating a useSocket Hook for React
DESCRIPTION: Implements a custom React hook to initialize and manage a Socket.IO client connection.

LANGUAGE: typescript
CODE:
import { useState, useEffect } from 'react';
import socketIOClient, { Socket } from 'socket.io-client';

export type PollState = {
  question: string;
  options: {
    id: number;
    text: string;
    description: string;
    votes: string[];
  }[];
};
interface ServerToClientEvents {
  updateState: (state: PollState) => void;
}
interface ClientToServerEvents {
  vote: (optionId: number) => void;
  askForStateUpdate: () => void;
}

export function useSocket({endpoint, token } : { endpoint: string, token: string }) {
  const socket: Socket<ServerToClientEvents, ClientToServerEvents>  = socketIOClient(endpoint,  {
    auth: {
      token: token
    }
  }) 
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    console.log('useSocket useEffect', endpoint, socket)

    function onConnect() {
      setIsConnected(true)
    }

    function onDisconnect() {
      setIsConnected(false)
    }

    socket.on('connect', onConnect)
    socket.on('disconnect', onDisconnect)

    return () => {
      socket.off('connect', onConnect)
      socket.off('disconnect', onDisconnect)
    }
  }, [token]);

  return {
    isConnected,
    socket,
  };
}

----------------------------------------

TITLE: Starting Wasp Database Server
DESCRIPTION: Command to initialize and run the database server in a separate terminal session for the Wasp application.

LANGUAGE: sh
CODE:
cabal run wasp-cli start db

----------------------------------------

TITLE: Creating a Wasp Project with SaaS Template
DESCRIPTION: This command creates a new Wasp project using the SaaS template. The template includes features for Stripe Payments, OpenAI GPT API, Google Auth, SendGrid, Tailwind, and Cron Jobs.

LANGUAGE: bash
CODE:
wasp new <project-name> -t saas

----------------------------------------

TITLE: Simplified MainPage Component
DESCRIPTION: This snippet shows a cleaned-up version of the MainPage component, containing only a simple 'Hello world!' message.

LANGUAGE: jsx
CODE:
export const MainPage = () => {
  return <div>Hello world!</div>
}

----------------------------------------

TITLE: Defining an Optional Static Segment Route in Wasp
DESCRIPTION: Demonstrates how to define a route with an optional static segment in a Wasp project file.

LANGUAGE: wasp
CODE:
route OptionalRoute { path: "/task/:id/details?", to: OptionalPage }
page OptionalPage { ... }

----------------------------------------

TITLE: Database Seeding Function Implementation
DESCRIPTION: Example of a database seed function that creates a user and associated task using Prisma client.

LANGUAGE: javascript
CODE:
import { createTask } from './actions.js'
import { sanitizeAndSerializeProviderData } from 'wasp/server/auth'

export const devSeedSimple = async (prisma) => {
  const user = await createUser(prisma, {
    username: 'RiuTheDog',
    password: 'bark1234',
  })

  await createTask(
    { description: 'Chase the cat' },
    { user, entities: { Task: prisma.task } }
  )
}

async function createUser(prisma, data) {
  const newUser = await prisma.user.create({
    data: {
      auth: {
        create: {
          identities: {
            create: {
              providerName: 'username',
              providerUserId: data.username,
              providerData: sanitizeAndSerializeProviderData({
                hashedPassword: data.password
              }),
            },
          },
        },
      },
    },
  })

  return newUser
}

----------------------------------------

TITLE: Configuring CORS for APIs in Wasp
DESCRIPTION: Example of configuring CORS for APIs using apiNamespace declaration in Wasp and implementing middleware function.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@src/apis",
  path: "/foo"
}

LANGUAGE: javascript
CODE:
export const apiMiddleware = (config) => {
  return config;
};

----------------------------------------

TITLE: Basic Auth Configuration Example
DESCRIPTION: Minimal example showing auth configuration in Wasp with multiple authentication methods.

LANGUAGE: c
CODE:
auth: {
  userEntity: User,
  methods: {
    usernameAndPassword: {}, 
    google: {},
  },

----------------------------------------

TITLE: Starting the Wasp Application
DESCRIPTION: Command to start the Wasp application, which also installs all dependencies.

LANGUAGE: bash
CODE:
wasp start

----------------------------------------

TITLE: Configuring Email Auth in main.wasp
DESCRIPTION: Core configuration for enabling email authentication in a Wasp application, including user entity specification and email settings.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "My App Postman",
          email: "hello@itsme.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

----------------------------------------

TITLE: Accessing Server Environment Variables in TypeScript
DESCRIPTION: Shows how to read server-side environment variables in a TypeScript file using process.env.

LANGUAGE: typescript
CODE:
console.log(process.env.SOME_VAR_NAME)

----------------------------------------

TITLE: Setting Keycloak Environment Variables
DESCRIPTION: This snippet shows the required environment variables for Keycloak authentication in the .env.server file.

LANGUAGE: bash
CODE:
KEYCLOAK_CLIENT_ID=your-keycloak-client-id
KEYCLOAK_CLIENT_SECRET=your-keycloak-client-secret
KEYCLOAK_REALM_URL=https://your-keycloak-url.com/realms/master

----------------------------------------

TITLE: Implementing React Home Page Component
DESCRIPTION: Creates a React component for the home page that fetches and displays recipes using Wasp's useQuery hook.

LANGUAGE: tsx
CODE:
import { useQuery, getRecipes } from 'wasp/client/operations'
import { type User } from 'wasp/entities'

export function HomePage({ user }: { user: User }) {
  const { data: recipes, isLoading } = useQuery(getRecipes) // Calling our query here!

  if (isLoading) {
    return <div>Loading...</div>
  }

  return (
    <div>
      <h1>Recipes</h1>
      <ul>
        {recipes
          ? recipes.map((recipe) => (
              <li key={recipe.id}>
                <div>{recipe.title}</div>
                <div>{recipe.description}</div>
              </li>
            ))
          : 'No recipes defined yet!'}
      </ul>
    </div>
  )
}

----------------------------------------

TITLE: Configuring Email Auth in main.wasp
DESCRIPTION: Core configuration for enabling email authentication in a Wasp application, including user entity specification and email settings.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "My App Postman",
          email: "hello@itsme.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

----------------------------------------

TITLE: Declaring createTask Action in Wasp
DESCRIPTION: Declares a createTask Action in the main.wasp file, specifying the implementation function and the entities it affects.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@src/actions",
  entities: [Task]
}

----------------------------------------

TITLE: Installing Wasp Framework
DESCRIPTION: Command to install the Wasp framework using the official installer script. This is required for running the application locally.

LANGUAGE: bash
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Installing Rosetta on Mac with Mx chip
DESCRIPTION: Command to install Rosetta on Mac with Apple Silicon to run x86 applications.

LANGUAGE: shell
CODE:
softwareupdate --install-rosetta

----------------------------------------

TITLE: Setting Client Environment Variables for Production Build
DESCRIPTION: Shows how to provide client-side environment variables when building a Wasp project for production deployment.

LANGUAGE: shell
CODE:
REACT_APP_SOME_VAR_NAME=somevalue npm run build

----------------------------------------

TITLE: Opening Database Studio in Wasp
DESCRIPTION: This command opens the Wasp database studio in a browser, allowing users to view and edit the data in the database, including the new Task entity.

LANGUAGE: shell
CODE:
wasp db studio

----------------------------------------

TITLE: Displaying Project Structure for TypeScript in Wasp
DESCRIPTION: Shows the file structure of a new Wasp project using TypeScript, highlighting the renamed MainPage.tsx file.

LANGUAGE: css
CODE:
.
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ main.wasp          # Your Wasp code goes here.
‚îú‚îÄ‚îÄ schema.prisma      # Your Prisma schema goes here.
‚îú‚îÄ‚îÄ package.json       # Your dependencies and project info go here.
‚îú‚îÄ‚îÄ public             # Your static files (e.g., images, favicon) go here.
‚îú‚îÄ‚îÄ src                # Your source code (TS/JS/CSS/HTML) goes here.
‚îÇ   ‚îú‚îÄ‚îÄ Main.css
‚îÇ   ‚îú‚îÄ‚îÄ MainPage.tsx   # Renamed from MainPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ vite-env.d.ts
‚îÇ   ‚îî‚îÄ‚îÄ waspLogo.png
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ .waspignore
‚îî‚îÄ‚îÄ .wasproot

----------------------------------------

TITLE: Configuring Wasp Application Structure
DESCRIPTION: This code snippet provides a skeleton for the main.wasp file, which is the central configuration file for a Wasp application. It includes placeholders for app configuration, entity definition, and routing setup.

LANGUAGE: wasp
CODE:
// Configuring the social authentication
app myApp {
  auth: { ... }
}

// Defining entities
entity User { ... }

// Defining routes and pages
route LoginRoute { ... }
page LoginPage { ... }

----------------------------------------

TITLE: Creating a New Wasp Project with Interactive Template Selection
DESCRIPTION: This snippet demonstrates the interactive process of creating a new Wasp project using the 'wasp new' command. It shows the prompts for project name and template selection, as well as the success message after project creation.

LANGUAGE: bash
CODE:
$ wasp new
Enter the project name (e.g. my-project) ‚ñ∏ MyFirstProject
Choose a starter template
[1] basic (default)
[2] saas
[3] todo-ts
‚ñ∏ 1

üêù --- Creating your project from the basic template... ---------------------------

Created new Wasp app in ./MyFirstProject directory!
To run it, do:

    cd MyFirstProject
    wasp start

----------------------------------------

TITLE: Configuring QueryClient (TypeScript)
DESCRIPTION: Shows how to configure the QueryClient in the setup function using TypeScript.

LANGUAGE: typescript
CODE:
import { configureQueryClient } from 'wasp/client/operations'

export default async function mySetupFunction(): Promise<void> {
  // ... some setup
  configureQueryClient({
    defaultOptions: {
      queries: {
        staleTime: Infinity,
      },
    },
  })
  // ... some more setup
}

----------------------------------------

TITLE: Using ResetPasswordForm Component in React
DESCRIPTION: Shows how to import and use the ResetPasswordForm component in a React component file.

LANGUAGE: wasp
CODE:
route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { ResetPasswordPage } from "@src/ResetPasswordPage.jsx"
}

LANGUAGE: jsx
CODE:
import { ResetPasswordForm } from 'wasp/client/auth'

// Use it like this
export function ResetPasswordPage() {
  return <ResetPasswordForm />
}

----------------------------------------

TITLE: SMTP Provider Configuration
DESCRIPTION: Environment variables setup for SMTP email provider in .env.server file.

LANGUAGE: properties
CODE:
SMTP_HOST=
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_PORT=

----------------------------------------

TITLE: Locating schema.prisma File in Wasp Project
DESCRIPTION: Shows the directory structure of a Wasp project, highlighting the location of the schema.prisma file.

LANGUAGE: c
CODE:
.
‚îú‚îÄ‚îÄ main.wasp
...
// highlight-next-line
‚îú‚îÄ‚îÄ schema.prisma
‚îú‚îÄ‚îÄ src
‚îú‚îÄ‚îÄ tsconfig.json
‚îî‚îÄ‚îÄ vite.config.ts

----------------------------------------

TITLE: Wasp Syntax Definition
DESCRIPTION: TextMate grammar definition for Wasp syntax highlighting in VSCode

LANGUAGE: yaml
CODE:
https://github.com/wasp-lang/vscode-wasp/blob/main/syntaxes/wasp.tmLanguage.yaml

----------------------------------------

TITLE: Configuring Basic Wasp Application with Authentication
DESCRIPTION: Initial Wasp configuration file that sets up the application name, version, and authentication settings using username/password method.

LANGUAGE: wasp
CODE:
app RecipeApp {
  title: "My Recipes",
  wasp: { version: "^0.12.0" },
  auth: {
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login",
    userEntity: User
  }
}

----------------------------------------

TITLE: Configuring Tailwind CSS for Wasp Projects
DESCRIPTION: Demonstrates the content of the tailwind.config.cjs file, including the use of Wasp's resolveProjectPath function to set the content sources.

LANGUAGE: javascript
CODE:
const { resolveProjectPath } = require('wasp/dev')

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],
  theme: {
    extend: {},
  },
  plugins: [],
}

----------------------------------------

TITLE: Updating Task Status in React Component (TypeScript)
DESCRIPTION: Implements a checkbox in a React component to update a task's status using the updateTask Action, with TypeScript type annotations.

LANGUAGE: tsx
CODE:
import { FormEvent, ChangeEvent } from 'react'
import { Task } from 'wasp/entities'

const TaskView = ({ task }: { task: Task }) => {
  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {
    try {
      await updateTask({
        id: task.id,
        isDone: event.target.checked,
      })
    } catch (error: any) {
      window.alert('Error while updating task: ' + error.message)
    }
  }

  return (
    <div>
      <input
        type="checkbox"
        id={String(task.id)}
        checked={task.isDone}
        onChange={handleIsDoneChange}
      />
      {task.description}
    </div>
  )
}

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: This snippet defines the User entity in the Prisma schema file. It includes an auto-incrementing id field as the primary key.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
  // Add your own fields below
  // ...
}

----------------------------------------

TITLE: Setting GitHub Environment Variables
DESCRIPTION: Environment variable configuration for GitHub OAuth credentials.

LANGUAGE: bash
CODE:
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

----------------------------------------

TITLE: Defining Auth Routes and Pages in Wasp
DESCRIPTION: This snippet demonstrates how to define the necessary routes and pages for authentication in the Wasp file.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}

----------------------------------------

TITLE: Customizing Base Path in Vite
DESCRIPTION: Examples showing how to configure a custom base path for serving the client application.

LANGUAGE: javascript
CODE:
export default {
  base: '/my-app/',
}

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'

export default defineConfig({
  base: '/my-app/',
})

----------------------------------------

TITLE: Adding a Page with URL Parameters in Wasp
DESCRIPTION: This snippet demonstrates how to add a new page with URL parameters in Wasp. It shows the syntax for defining a route with a parameter and the corresponding page declaration.

LANGUAGE: wasp
CODE:
route HelloRoute { path: "/hello/:name", to: HelloPage }
page HelloPage {
  component: import { HelloPage } from "@src/HelloPage"
}

----------------------------------------

TITLE: Defining Login and Signup Routes in Wasp
DESCRIPTION: Declares routes for the login and signup pages in the Wasp configuration file.

LANGUAGE: wasp
CODE:
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/LoginPage"
}

----------------------------------------

TITLE: Mailgun Provider Configuration
DESCRIPTION: Environment variables setup for Mailgun email provider in .env.server file.

LANGUAGE: properties
CODE:
MAILGUN_API_KEY=
MAILGUN_DOMAIN=

----------------------------------------

TITLE: Configuring Google Auth with Overrides
DESCRIPTION: This snippet demonstrates how to override default Google Auth settings in the main.wasp file.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {
        configFn: import { getConfig } from "@src/auth/google.js",
        userSignupFields: import { userSignupFields } from "@src/auth/google.js"
      }
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Creating Auth Pages in React
DESCRIPTION: This snippet shows how to create the authentication pages using React components, including the LoginForm from Wasp's client auth module.

LANGUAGE: javascript
CODE:
import { LoginForm } from 'wasp/client/auth'

export function Login() {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  )
}

export function Layout({ children }) {
  return (
    <div className="w-full h-full bg-white">
      <div className="min-w-full min-h-[75vh] flex items-center justify-center">
        <div className="w-full h-full max-w-sm p-5 bg-white">
          <div>{children}</div>
        </div>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Mocking Wasp APIs in Tests
DESCRIPTION: Demonstrates how to mock a Wasp API in tests, specifying the HTTP method, path, and response data.

LANGUAGE: javascript
CODE:
import { HttpMethod } from "wasp/client";

mockApi({ method: HttpMethod.Get, path: "/foor/bar" }, { res: "hello" });

----------------------------------------

TITLE: Custom Signup Action in Wasp
DESCRIPTION: Wasp configuration for a custom signup action.

LANGUAGE: wasp
CODE:
// ...

action customSignup {
  fn: import { signup } from "@src/auth/signup.js",
}

----------------------------------------

TITLE: Session Entity Structure in Wasp
DESCRIPTION: Internal Session entity structure used by Wasp to store user session information for keeping users logged in between page refreshes.

LANGUAGE: wasp
CODE:
entity Session {=psl
  id        String   @id @unique
  expiresAt DateTime
  userId    String
  auth      Auth     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
psl=}

----------------------------------------

TITLE: Structuring Export Requests in JSON
DESCRIPTION: Demonstrates the JSON structure for specifying export requests. Each request can include multiple filenames and an optional tsconfig path.

LANGUAGE: json
CODE:
[
  { "filenames": ["./src/exports.ts"] },
  {
    "tsconfig": "~/dev/wasp-todoapp/src/client/tsconfig.json",
    "filenames": ["~/dev/wasp-todoapp/src/client/MainPage.tsx"]
  }
]

----------------------------------------

TITLE: Defining Login and Signup Routes in Wasp
DESCRIPTION: Declares routes and pages for login and signup in the Wasp configuration file.

LANGUAGE: wasp
CODE:
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/SignupPage.jsx"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/LoginPage.jsx"
}

----------------------------------------

TITLE: Setting Custom Dev Server Port in Vite (JavaScript)
DESCRIPTION: This example demonstrates how to change the development server port to 4000 in the Vite configuration file. It also includes the necessary environment variable update.

LANGUAGE: javascript
CODE:
export default {
  server: {
    port: 4000,
  },
}

LANGUAGE: plaintext
CODE:
WASP_WEB_CLIENT_URL=http://localhost:4000

----------------------------------------

TITLE: Formatting PSL Schema with Prisma Format
DESCRIPTION: This code snippet demonstrates the JSON structure returned by the formatting tool. It includes the formatted PSL schema and any errors encountered during the process.

LANGUAGE: json
CODE:
{
  "formattedSchemaPsl": "<psl>",
  "errors": "<all errors as one big string>"  // undefined if no errors.
}

----------------------------------------

TITLE: Configuring PostCSS for Tailwind in Wasp Projects
DESCRIPTION: Shows the content of the postcss.config.cjs file, which is required to enable Tailwind CSS processing.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----------------------------------------

TITLE: Mocking Server and Queries in Wasp Tests
DESCRIPTION: Shows how to set up a mock server and use mockQuery to simulate query responses in tests.

LANGUAGE: javascript
CODE:
import { mockServer } from "wasp/client/test";
import { getTasks } from "wasp/client/operations";

const { mockQuery, mockApi } = mockServer();

mockQuery(getTasks, []);

----------------------------------------

TITLE: Building Production Bundle with npm
DESCRIPTION: Creates an optimized production build in the build folder with minified bundles and content hashing for optimal performance.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Environment Variables Setup
DESCRIPTION: Required environment variables for Discord OAuth configuration.

LANGUAGE: bash
CODE:
DISCORD_CLIENT_ID=your-discord-client-id
DISCORD_CLIENT_SECRET=your-discord-client-secret

----------------------------------------

TITLE: Using Cabal to Run Specific Tests
DESCRIPTION: Example of how to run specific tests using Cabal commands.

LANGUAGE: bash
CODE:
cabal test waspc-test --test-options "-p \"Some test description to match\""

----------------------------------------

TITLE: Accessing User Email Identity Properties in TypeScript (Wasp Framework)
DESCRIPTION: This code demonstrates how to access various properties of a user's email identity in the Wasp framework. It shows how to retrieve the email address, check the verification status, and access timestamps for email verification and password reset actions.

LANGUAGE: typescript
CODE:
const emailIdentity = user.identities.email

// Email address the user used to sign up, e.g. "fluffyllama@app.com".
emailIdentity.id

// `true` if the user has verified their email address.
emailIdentity.isEmailVerified

// Datetime when the email verification email was sent.
emailIdentity.emailVerificationSentAt

// Datetime when the last password reset email was sent.
emailIdentity.passwordResetSentAt

----------------------------------------

TITLE: Specifying GHC Compiler Version in Cabal Project
DESCRIPTION: Example of how to specify the GHC compiler version in the cabal.project file.

LANGUAGE: cabal
CODE:
with-compiler: ghc-x.y.z

----------------------------------------

TITLE: Initializing Database Migration in Wasp
DESCRIPTION: Command to run database migrations for the Wasp Todo app development environment. This needs to be executed before starting the application.

LANGUAGE: bash
CODE:
wasp db migrate-dev

----------------------------------------

TITLE: Configuring Google Auth in Wasp File
DESCRIPTION: Basic Wasp configuration for enabling Google authentication with user entity specification and redirect settings.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.15.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Importing React Components in Markdown Documentation
DESCRIPTION: Component imports for documentation page layout and image handling in MDX format.

LANGUAGE: markdown
CODE:
import useBaseUrl from '@docusaurus/useBaseUrl';

import ImgWithCaption from '@site/blog/components/ImgWithCaption'

----------------------------------------

TITLE: Creating a Bash Alias for the Run Script
DESCRIPTION: Example of creating a bash alias for the run script to make it easier to execute from anywhere in the Wasp codebase.

LANGUAGE: bash
CODE:
alias wrun="/home/martin/git/wasp-lang/wasp/waspc/run"

----------------------------------------

TITLE: Mocking API Calls in Wasp Tests
DESCRIPTION: Demonstrates how to use mockApi to simulate API responses in tests.

LANGUAGE: javascript
CODE:
import { HttpMethod } from "wasp/client";

mockApi({ method: HttpMethod.Get, path: "/foor/bar" }, { res: "hello" });

----------------------------------------

TITLE: Mocking API Calls in Wasp Tests
DESCRIPTION: Demonstrates how to use mockApi to simulate API responses in tests.

LANGUAGE: javascript
CODE:
import { HttpMethod } from "wasp/client";

mockApi({ method: HttpMethod.Get, path: "/foor/bar" }, { res: "hello" });

----------------------------------------

TITLE: Configuring PG Boss SSL Options for Heroku
DESCRIPTION: JSON configuration for pg-boss to handle Heroku's SSL requirements when connecting to PostgreSQL database. This setting is required to resolve SSL connection issues on Heroku deployment.

LANGUAGE: json
CODE:
{"connectionString":"<your-heroku-DATABASE_URL>","ssl":{"rejectUnauthorized":false}}

----------------------------------------

TITLE: Importing TypeScript/JavaScript Helper Component
DESCRIPTION: Import statement for a React component that conditionally renders content based on whether TypeScript is being used.

LANGUAGE: jsx
CODE:
import { ShowForTs } from '@site/src/components/TsJsHelpers';

----------------------------------------

TITLE: JavaScript Inline Function Expression Styles
DESCRIPTION: Examples of preferred and discouraged styles for inline function expressions in JavaScript.

LANGUAGE: javascript
CODE:
// good
const squares = arr.map((x) => x * x);

// bad
const squares = arr.map(function (x) {
  return x * x;
});

----------------------------------------

TITLE: Including User Data with Other Entities in Wasp
DESCRIPTION: Example of how to include full user data, including auth fields, when fetching other entities using Prisma queries in a Wasp application.

LANGUAGE: typescript
CODE:
export const getAllTasks = (async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'desc' },
    select: {
      id: true,
      title: true,
      user: {
        include: {
          auth: {
            include: {
              identities: {
                select: {
                  providerName: true,
                  providerUserId: true,
                },
              },
            },
          },
        },
      },
    },
  })
}) satisfies tasks.GetAllQuery<{}, {}>

----------------------------------------

TITLE: Including User Data with Other Entities in Wasp
DESCRIPTION: Example of how to include full user data, including auth fields, when fetching other entities using Prisma queries in a Wasp application.

LANGUAGE: typescript
CODE:
export const getAllTasks = (async (args, context) => {
  return context.entities.Task.findMany({
    orderBy: { id: 'desc' },
    select: {
      id: true,
      title: true,
      user: {
        include: {
          auth: {
            include: {
              identities: {
                select: {
                  providerName: true,
                  providerUserId: true,
                },
              },
            },
          },
        },
      },
    },
  })
}) satisfies tasks.GetAllQuery<{}, {}>

----------------------------------------

TITLE: Using getUsername in Task Handler (TypeScript)
DESCRIPTION: Demonstrates TypeScript implementation of getUsername in a task handler with proper type annotations.

LANGUAGE: typescript
CODE:
import { getUsername } from 'wasp/auth'

export const createTask: CreateTask<...>  = async (args, context) => {
  const username = getUsername(context.user)
  // ...
}

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change the current directory to the WebSockets example project folder.

LANGUAGE: bash
CODE:
cd examples/websockets-realtime-voting

----------------------------------------

TITLE: Retrieving Discord User ID in TypeScript
DESCRIPTION: This code extracts the Discord identity from a user object and accesses the user's Discord ID. The Discord User ID is a unique identifier for Discord users, typically a large number stored as a string.

LANGUAGE: typescript
CODE:
const discordIdentity = user.identities.discord

// Discord User ID for example "80351110224678912"
discordIdentity.id

----------------------------------------

TITLE: Configuring Generator in Prisma Schema
DESCRIPTION: Shows the required configuration for the generator block in the schema.prisma file for Wasp projects.

LANGUAGE: prisma
CODE:
generator client {
  provider = "prisma-client-js"
}

----------------------------------------

TITLE: Defining Default Global Middleware in JavaScript
DESCRIPTION: This snippet shows the default global middleware configuration in Wasp for JavaScript applications. It includes Helmet, CORS, Morgan logger, JSON parser, URL-encoded parser, and cookie parser.

LANGUAGE: javascript
CODE:
const defaultGlobalMiddleware = new Map([
  ['helmet', helmet()],
  ['cors', cors({ origin: config.allowedCORSOrigins })],
  ['logger', logger('dev')],
  ['express.json', express.json()],
  ['express.urlencoded', express.urlencoded({ extended: false })],
  ['cookieParser', cookieParser()]
])

----------------------------------------

TITLE: Configuring Auth in Wasp
DESCRIPTION: Configures username and password authentication in the Wasp application file.

LANGUAGE: wasp
CODE:
app TodoApp {
  wasp: {
    version: "{latestWaspVersion}"
  },
  title: "TodoApp",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  }
}

----------------------------------------

TITLE: Using routes Object with Optional Static Segment in React
DESCRIPTION: Demonstrates how to use the routes object with an optional static segment route in a React component.

LANGUAGE: tsx
CODE:
const linkToOptional = routes.OptionalRoute.build({
  path: '/task/:id/details', // or '/task/:id'
  params: { id: 1 },
})

----------------------------------------

TITLE: Installing Wasp Framework
DESCRIPTION: Command to install the Wasp framework on OSX/Linux/WSL(Win) systems using curl.

LANGUAGE: bash
CODE:
curl -sSL https://get.wasp.sh/installer.sh | sh

----------------------------------------

TITLE: Wasp Application Configuration
DESCRIPTION: Main configuration file defining the application structure, routes, entities, queries and actions

LANGUAGE: javascript
CODE:
app ItWaspsOnMyMachine {
  wasp: {
    version: "^0.6.0"
  },
  title: "It Wasps On My Machine",
  head: [
    "<script src='https://cdn.tailwindcss.com'></script>"
  ],
  dependencies: [
    ("axios", "^0.21.1")
  ]
}

route RootRoute { path: "/", to: MainPage }

page MainPage {
  component: import Main from "@client/MainPage.js"
}

entity Excuse {=psl
    id          Int     @id @default(autoincrement())
    text        String
psl=}

query getExcuse {
  fn: import { getExcuse } from "@server/queries.js",
  entities: [Excuse]
}

query getAllSavedExcuses {
  fn: import { getAllSavedExcuses } from "@server/queries.js",
  entities: [Excuse]
}

action saveExcuse {
  fn: import { saveExcuse } from "@server/actions.js",
  entities: [Excuse]
}

----------------------------------------

TITLE: URL Parameter Handling in React Component
DESCRIPTION: Shows how to access URL parameters in a React component using props.match.params, with both JavaScript and TypeScript implementations.

LANGUAGE: javascript
CODE:
const HelloPage = (props) => {
  return <div>Here's {props.match.params.name}!</div>
}

export default HelloPage

LANGUAGE: typescript
CODE:
import { RouteComponentProps } from 'react-router-dom'

const HelloPage = (props: RouteComponentProps<{ name: string }>) => {
  return <div>Here's {props.match.params.name}!</div>
}

export default HelloPage

----------------------------------------

TITLE: Setting Server Secrets
DESCRIPTION: Command to set environment variables for the server application after deployment.

LANGUAGE: shell
CODE:
wasp deploy fly cmd secrets set GOOGLE_CLIENT_ID=<...> GOOGLE_CLIENT_SECRET=<...> --context=server

----------------------------------------

TITLE: Using WebSockets in React Components (JavaScript)
DESCRIPTION: Illustrates how to use WebSockets in a React component using JavaScript. It demonstrates the usage of 'useSocket' and 'useSocketListener' hooks to manage WebSocket connections and handle events.

LANGUAGE: jsx
CODE:
import React, { useState } from 'react'
import {
  useSocket,
  useSocketListener,
} from 'wasp/client/webSocket'

export const ChatPage = () => {
  const [messageText, setMessageText] = useState('')
  const [messages, setMessages] = useState([])
  const { socket, isConnected } = useSocket()

  useSocketListener('chatMessage', logMessage)

  function logMessage(msg) {
    setMessages((priorMessages) => [msg, ...priorMessages])
  }

  function handleSubmit(e) {
    e.preventDefault()
    socket.emit('chatMessage', messageText)
    setMessageText('')
  }

  const messageList = messages.map((msg) => (
    <li key={msg.id}>
      <em>{msg.username}</em>: {msg.text}
    </li>
  ))
  const connectionIcon = isConnected ? 'üü¢' : 'üî¥'

  return (
    <>
      <h2>Chat {connectionIcon}</h2>
      <div>
        <form onSubmit={handleSubmit}>
          <div>
            <div>
              <input
                type="text"
                value={messageText}
                onChange={(e) => setMessageText(e.target.value)}
              />
            </div>
            <div>
              <button type="submit">Submit</button>
            </div>
          </div>
        </form>
        <ul>{messageList}</ul>
      </div>
    </>
  )
}

----------------------------------------

TITLE: Task Update Action Implementation
DESCRIPTION: Server-side implementation for updating a task's isDone status, demonstrating how to update existing records in the database.

LANGUAGE: typescript
CODE:
type UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>

export const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (
  { id, isDone },
  context
) => {
  return context.entities.Task.update({
    where: { id },
    data: {
      isDone: isDone,
    },
  })
}

----------------------------------------

TITLE: Deploying Wasp App with Environment Variables
DESCRIPTION: Examples of deploying a Wasp app with server-side and client-side environment variables using the Wasp CLI.

LANGUAGE: shell
CODE:
wasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>

LANGUAGE: shell
CODE:
REACT_APP_ANOTHER_VAR=somevalue wasp deploy fly launch my-wasp-app mia

----------------------------------------

TITLE: Defining Routes in Wasp
DESCRIPTION: Demonstrates how to define a route and associated page in the main Wasp configuration file

LANGUAGE: wasp
CODE:
route TaskRoute { path: "/task/:id", to: TaskPage }
page TaskPage { ... }

----------------------------------------

TITLE: Customizing Google Auth Configuration
DESCRIPTION: Shows how to customize the Google authentication configuration by specifying scopes and user signup fields.

LANGUAGE: typescript
CODE:
import { defineUserSignupFields } from 'wasp/server/auth'

export const userSignupFields = defineUserSignupFields({
  username: () => 'hardcoded-username',
  displayName: (data: any) => data.profile.name,
})

export function getConfig() {
  return {
    scopes: ['profile', 'email'],
  }
}

----------------------------------------

TITLE: Configuring Auth Routes and Pages in Wasp
DESCRIPTION: This snippet demonstrates how to set up routes and pages for login and signup in the Wasp configuration file. It includes importing React components for these pages.

LANGUAGE: wasp
CODE:
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@src/pages/auth.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/pages/auth.jsx"
}

----------------------------------------

TITLE: Configuring WebSocket in Wasp Application
DESCRIPTION: Basic configuration for enabling WebSockets in a Wasp application file. Defines the WebSocket function import and auto-connect behavior.

LANGUAGE: wasp
CODE:
app todoApp {
  webSocket: {
    fn: import { webSocketFn } from "@src/webSocket",
    autoConnect: true, // optional, default: true
  },
}

----------------------------------------

TITLE: Overriding Default Google Auth Behavior in Wasp
DESCRIPTION: This code shows how to override the default Google authentication behavior by specifying custom userSignupFields.

LANGUAGE: wasp
CODE:
app myApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "My App",
  auth: {
    userEntity: User,
    methods: {
      google: {
        userSignupFields: import { userSignupFields } from "@src/auth/google.js"
      }
    },
    onAuthFailedRedirectTo: "/login"
  },
}

----------------------------------------

TITLE: Building Wasp Application
DESCRIPTION: Command to generate deployable code for the entire Wasp application in the .wasp/build/ directory

LANGUAGE: bash
CODE:
wasp build

----------------------------------------

TITLE: Customizing Per-Path Middleware in Wasp and TypeScript
DESCRIPTION: This example demonstrates how to customize middleware for all API routes under a common path in a Wasp application using TypeScript. It adds a custom middleware to the '/foo/bar' path.

LANGUAGE: wasp
CODE:
apiNamespace fooBar {
  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from "@src/apis",
  path: "/foo/bar"
}

LANGUAGE: typescript
CODE:
import express from 'express'
import { type MiddlewareConfigFn } from 'wasp/server'

export const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {
  const customMiddleware: express.RequestHandler = (_req, _res, next) => {
    console.log('fooBarNamespaceMiddlewareFn: custom middleware')
    next()
  }

  middlewareConfig.set('custom.middleware', customMiddleware)

  return middlewareConfig
}

----------------------------------------

TITLE: Accessing Auth Fields in TypeScript
DESCRIPTION: Example of using helper functions to access auth identity information in a TypeScript React component.

LANGUAGE: typescript
CODE:
import { getFirstProviderUserId, AuthUser } from 'wasp/auth'

const MainPage = ({ user }: { user: AuthUser }) => {
  const userId = getFirstProviderUserId(user)
  // ...
}

----------------------------------------

TITLE: Submitting a Job in JavaScript/TypeScript
DESCRIPTION: This snippet shows how to submit a job for execution, including an optional delay.

LANGUAGE: javascript
CODE:
import { mySpecialJob } from 'wasp/server/jobs'

const submittedJob = await mySpecialJob.submit({ job: "Johnny" })

// Or, if you'd prefer it to execute in the future, just add a .delay().
// It takes a number of seconds, Date, or ISO date string.
await mySpecialJob
  .delay(10)
  .submit({ name: "Johnny" })

----------------------------------------

TITLE: Declaring an updateTask Action in Wasp
DESCRIPTION: This snippet shows how to declare an 'updateTask' action in the main.wasp file, similar to the createTask action.

LANGUAGE: wasp
CODE:
action updateTask {
  fn: import { updateTask } from "@server/actions.js",
  entities: [Task]
}

----------------------------------------

TITLE: Declaring Actions in Wasp
DESCRIPTION: Example showing how to declare Actions in a Wasp configuration file.

LANGUAGE: wasp
CODE:
action createTask {
  fn: import { createTask } from "@server/actions.js"
}

action markTaskAsDone {
  fn: import { markTaskAsDone } from "@server/actions.js"
}

----------------------------------------

TITLE: Updating getTasks Query with Authentication Check
DESCRIPTION: Modifies the getTasks query to check for user authentication and return only the user's tasks.

LANGUAGE: javascript
CODE:
import { HttpError } from 'wasp/server'

export const getTasks = async (args, context) => {
  if (!context.user) {
    throw new HttpError(401)
  }
  return context.entities.Task.findMany({
    where: { user: { id: context.user.id } },
    orderBy: { id: 'asc' },
  })
}

----------------------------------------

TITLE: Declaring Queries in Wasp
DESCRIPTION: Example of declaring two queries in a Wasp file - one to fetch all tasks and another to fetch filtered tasks.

LANGUAGE: wasp
CODE:
query getAllTasks {
  fn: import { getAllTasks } from "@src/queries.js"
}

query getFilteredTasks {
  fn: import { getFilteredTasks } from "@src/queries.js"
}

----------------------------------------

TITLE: Viewing Generated Dockerfile with Wasp CLI
DESCRIPTION: Command to display the project's complete Dockerfile configuration, including any custom additions merged with Wasp's default multi-stage Dockerfile.

LANGUAGE: shell
CODE:
wasp dockerfile

----------------------------------------

TITLE: Declaring a Recurring Job with Schedule
DESCRIPTION: Example of declaring a job with a recurring schedule using cron syntax.

LANGUAGE: wasp
CODE:
job mySpecialJob {
  executor: PgBoss,
  perform: {
    fn: import { foo } from "@src/workers/bar"
  },
  schedule: {
    cron: "0 * * * *",
    args: {=json { "job": "args" } json=}
  }
}

----------------------------------------

TITLE: Using Entity Types in React Components
DESCRIPTION: Demonstrates how to use Wasp entity types within React components for type-safe development.

LANGUAGE: typescript
CODE:
import { Task } from "wasp/entities"

export function ExamplePage() {
  const task: Task = {
    id: 123,
    description: "Some random task",
    isDone: false,
  }
  return <div>{task.description}</div>
}

----------------------------------------

TITLE: Uninstalling Wasp
DESCRIPTION: Demonstrates the process of removing Wasp from the system using the uninstall command.

LANGUAGE: bash
CODE:
$ wasp uninstall

üêù --- Uninstalling Wasp ... ------------------------------------------------------

 We will remove the following directories:
   {home}/.local/share/wasp-lang/
   {home}/.cache/wasp/

 We will also remove the following files:
   {home}/.local/bin/wasp

 Are you sure you want to continue? [y/N]
 y

‚úÖ --- Uninstalled Wasp -----------------------------------------------------------

----------------------------------------

TITLE: Submitting Jobs for Execution
DESCRIPTION: Examples of submitting jobs for immediate or delayed execution.

LANGUAGE: typescript
CODE:
import { mySpecialJob } from 'wasp/server/jobs'

const submittedJob = await mySpecialJob.submit({ job: "Johnny" })

// With delay
await mySpecialJob
  .delay(10)
  .submit({ name: "Johnny" })

----------------------------------------

TITLE: Defining User Entity in Prisma Schema
DESCRIPTION: This code defines the User entity in the schema.prisma file. It includes an auto-incrementing id field and allows for additional custom fields.

LANGUAGE: prisma
CODE:
model User {
  id Int @id @default(autoincrement())
  // Add your own fields below
  // ...
}

----------------------------------------

TITLE: Building Wasp Language PDF with Tectonic
DESCRIPTION: This command builds the PDF documentation for the Wasp language using Tectonic. It should be run in the project directory and will generate the PDF in the specified output path.

LANGUAGE: shell
CODE:
tectonic -X build

----------------------------------------

TITLE: Updating Cabal File for New Package in Wasp Project
DESCRIPTION: These entries should be added to the 'data-files' section inside 'waspc.cabal' when adding a new package. They specify the package.json, package-lock.json, and compiled JavaScript files to be included.

LANGUAGE: json
CODE:
packages/<package-name>/package.json
packages/<package-name>/package-lock.json
packages/<package-name>/dist/**/*.js

----------------------------------------

TITLE: Adding LLVM to PATH on macOS
DESCRIPTION: Example of how to add LLVM to PATH in shell configuration file on macOS.

LANGUAGE: bash
CODE:
export PATH="/opt/homebrew/Cellar/llvm@13/13.0.1_2/bin/:$PATH"

----------------------------------------

TITLE: Implementing Server-side Operations in TypeScript
DESCRIPTION: Implements the getRecipes query function using Prisma to fetch recipes for the authenticated user.

LANGUAGE: typescript
CODE:
import { type GetRecipes } from "wasp/server/operations";
import { type Recipe } from "wasp/entities";

export const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {
  return context.entities.Recipe.findMany( // Prisma query
    { where: { user: { id: context.user.id } } }
  );
};

export const addRecipe ...

----------------------------------------

TITLE: Initializing Wasp App Configuration
DESCRIPTION: Defines the main configuration for a Wasp app, including the app title and authentication settings.

LANGUAGE: wasp
CODE:
app RecipeApp {
  title: "My Recipes",
  wasp: { version: "{latestWaspVersion}" },
  auth: {
    methods: { usernameAndPassword: {} },
    onAuthFailedRedirectTo: "/login",
    userEntity: User
  }
}

----------------------------------------

TITLE: Implementing a Database Seed Function in JavaScript
DESCRIPTION: This snippet shows an example of a database seed function implementation in JavaScript, including user creation and task creation.

LANGUAGE: javascript
CODE:
import { createTask } from './actions.js'
import { sanitizeAndSerializeProviderData } from 'wasp/server/auth'

export const devSeedSimple = async (prisma) => {
  const user = await createUser(prisma, {
    username: 'RiuTheDog',
    password: 'bark1234',
  })

  await createTask(
    { description: 'Chase the cat' },
    { user, entities: { Task: prisma.task } }
  )
}

async function createUser(prisma, data) {
  const newUser = await prisma.user.create({
    data: {
      auth: {
        create: {
          identities: {
            create: {
              providerName: 'username',
              providerUserId: data.username,
              providerData: sanitizeAndSerializeProviderData({
                hashedPassword: data.password
              }),
            },
          },
        },
      },
    },
  })

  return newUser
}

----------------------------------------

TITLE: Custom Signup Action Implementation
DESCRIPTION: JavaScript implementation of a custom signup action using Wasp's auth utilities.

LANGUAGE: javascript
CODE:
import {
  ensurePasswordIsPresent,
  ensureValidPassword,
  ensureValidUsername,
  createProviderId,
  sanitizeAndSerializeProviderData,
  createUser,
} from 'wasp/server/auth'

export const signup = async (args, _context) => {
  ensureValidUsername(args)
  ensurePasswordIsPresent(args)
  ensureValidPassword(args)

  try {
    const providerId = createProviderId('username', args.username)
    const providerData = await sanitizeAndSerializeProviderData({
      hashedPassword: args.password,
    })

    await createUser(
      providerId,
      providerData,
      // Any additional data you want to store on the User entity
      {}
    )
  } catch (e) {
    return {
      success: false,
      message: e.message,
    }
  }

  // Your custom code after sign-up.
  // ...

  return {
    success: true,
    message: 'User created successfully',
  }
}

----------------------------------------

TITLE: Accessing AuthUser Object Fields in Wasp
DESCRIPTION: Examples of how the AuthUser object looks for users signed up with Google or Email auth methods in a Wasp application.

LANGUAGE: typescript
CODE:
const user = {
  // User data
  id: 'cluqs9qyh00007cn73apj4hp7',
  address: 'Some address',

  // Auth methods specific data
  identities: {
    email: null,
    google: {
      id: '1117XXXX1301972049448',
    },
  },
}

LANGUAGE: typescript
CODE:
const user = {
  // User data
  id: 'cluqsex9500017cn7i2hwsg17',
  address: 'Some address',

  // Auth methods specific data
  identities: {
    email: {
      id: 'user@app.com',
      isEmailVerified: true,
      emailVerificationSentAt: '2024-04-08T10:06:02.204Z',
      passwordResetSentAt: null,
    },
    google: null,
  },
}

----------------------------------------

TITLE: Implementing onBeforeSignup Hook
DESCRIPTION: Example implementation of onBeforeSignup hook to validate user signup attempts and restrict access based on conditions.

LANGUAGE: typescript
CODE:
import { HttpError } from 'wasp/server'
import type { OnBeforeSignupHook } from 'wasp/server/auth'

export const onBeforeSignup: OnBeforeSignupHook = async ({
  providerId,
  prisma,
  req,
}) => {
  const count = await prisma.user.count()
  console.log('number of users before', count)
  console.log('provider name', providerId.providerName)
  console.log('provider user ID', providerId.providerUserId)

  if (count > 100) {
    throw new HttpError(403, 'Too many users')
  }

  if (
    providerId.providerName === 'email' &&
    providerId.providerUserId === 'some@email.com'
  ) {
    throw new HttpError(403, 'This email is not allowed')
  }
}

----------------------------------------

TITLE: Route Configuration
DESCRIPTION: Configuring routes in Django vs Wasp

LANGUAGE: python
CODE:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
    path('update/<str:pk>/', views.updateTask, name='update_task'),
    path('delete/<str:pk>/', views.deleteTask, name='delete_task')]

LANGUAGE: jsx
CODE:
route TaskRoute { path: "/", to: TaskPage }
page TaskPage {
  component: import { TaskPage } from "@src/TaskPage"
}

----------------------------------------

TITLE: Setting up Next.js Project
DESCRIPTION: Commands to create a new Next.js project and install dependencies.

LANGUAGE: bash
CODE:
npx create-next-app@latest my-nextjs-app
cd my-nextjs-app
npm install
npm install lucia

----------------------------------------

TITLE: Docker Post-Installation Steps
DESCRIPTION: Commands for configuring Docker user permissions in WSL

LANGUAGE: bash
CODE:
sudo groupadd docker
sudo usermod -aG docker $USER
su -s $USER

----------------------------------------

TITLE: Server-Side Meme Generation Utilities
DESCRIPTION: Utility functions for fetching meme templates and generating memes using the ImgFlip API.

LANGUAGE: typescript
CODE:
import axios from 'axios';
import { stringify } from 'querystring';
import HttpError from '@wasp/core/HttpError.js';

type GenerateMemeArgs = {
  text0: string;
  text1: string;
  templateId: string;
};

export const fetchMemeTemplates = async () => {
  try {
    const response = await axios.get('https://api.imgflip.com/get_memes');
    return response.data.data.memes;
  } catch (error) {
    console.error(error);
    throw new HttpError(500, 'Error fetching meme templates');
  }
};

export const generateMemeImage = async (args: GenerateMemeArgs) => {
  console.log('args: ', args);

  try {
    const data = stringify({
      template_id: args.templateId,
      username: process.env.IMGFLIP_USERNAME,
      password: process.env.IMGFLIP_PASSWORD,
      text0: args.text0,
      text1: args.text1,
    });

    const res = await axios.post('https://api.imgflip.com/caption_image', data, {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    });

    const url = res.data.data.url;

    console.log('generated meme url: ', url);

    return url as string;
  } catch (error) {
    console.error(error);
    throw new HttpError(500, 'Error generating meme image');
  }
};

----------------------------------------

TITLE: Defining a User Model in Prisma Schema Language
DESCRIPTION: This snippet shows a standalone example of defining a User model using Prisma Schema Language. It demonstrates the syntax for creating a model with fields, types, and constraints.

LANGUAGE: prisma
CODE:
model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String
}

----------------------------------------

TITLE: Using Tailwind Classes in Wasp React Components
DESCRIPTION: This example demonstrates how to use Tailwind CSS classes in a React component within a Wasp project. It applies text size, font weight, and underline styles to a heading.

LANGUAGE: jsx
CODE:
<h1 className="text-3xl font-bold underline">
  Hello world!
</h1>

----------------------------------------

TITLE: Initializing Wasp Project
DESCRIPTION: Command to create a new Wasp project named 'farnance', which sets up a full-stack React & Node.js application with authentication and CRUD capabilities.

LANGUAGE: bash
CODE:
wasp new farnance

----------------------------------------

TITLE: Implementing Lazy Fibonacci Sequence in Haskell
DESCRIPTION: Demonstrates Haskell's lazy evaluation by creating an infinite Fibonacci sequence using self-referential list definition. The example shows how to define the sequence and take the first 10 numbers.

LANGUAGE: haskell
CODE:
fibs :: [Integer]
fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

take 10 fibs -- [0,1,1,2,3,5,8,13,21,34]

----------------------------------------

TITLE: Implementing GitHub Metrics Worker Function in JavaScript
DESCRIPTION: This code snippet defines a worker function that fetches GitHub metrics for the Wasp repository and stores them in the database. It demonstrates how to write an async function that can be used as a job in Wasp.

LANGUAGE: javascript
CODE:
import axios from 'axios'
import { upsertMetric } from './utils.js'

export async function workerFunction() {
  const response = await axios.get('https://api.github.com/repos/wasp-lang/wasp')

  const metrics = [
    { name: 'Wasp GitHub Stars', value: response.data.stargazers_count },
    { name: 'Wasp GitHub Language', value: response.data.language },
    { name: 'Wasp GitHub Forks', value: response.data.forks },
    { name: 'Wasp GitHub Open Issues', value: response.data.open_issues },
  ]

  await Promise.all(metrics.map(upsertMetric))

  return metrics
}

----------------------------------------

TITLE: Embedding React Components in Markdown
DESCRIPTION: Usage of imported React components within the markdown content.

LANGUAGE: markdown
CODE:
<WaspIntro />
<InBlogCta />

----------------------------------------

TITLE: Basic Discord Bot Setup in NodeJS
DESCRIPTION: Initial setup of a Discord bot using discord.js library. Establishes connection and logs in using a bot token.

LANGUAGE: javascript
CODE:
const Discord = require('discord.js')

const BOT_TOKEN = process.env.BOT_TOKEN

const bot = new Discord.Client()
bot.login(BOT_TOKEN)

bot.on('ready', function (evt) {
  console.log(`Logged in as: ${bot.user.tag}.`)
})

----------------------------------------

TITLE: Running Database Migrations
DESCRIPTION: Command to execute database migrations for the Wasp project.

LANGUAGE: bash
CODE:
wasp db migrate-dev

----------------------------------------

TITLE: Navigating to Web App Build Directory
DESCRIPTION: Changes current directory to the web application build directory in a Wasp project.

LANGUAGE: bash
CODE:
cd .wasp/build/web-app

----------------------------------------

TITLE: Importing Required Tag Component in JSX
DESCRIPTION: Imports the Required component from the site's components directory, used for marking required fields in the documentation.

LANGUAGE: jsx
CODE:
import { Required } from '@site/src/components/Tag';

----------------------------------------

TITLE: Importing ShowForTs Component in TypeScript
DESCRIPTION: This snippet imports the ShowForTs component from a specific path, likely used for conditional rendering of TypeScript-specific content.

LANGUAGE: typescript
CODE:
import { ShowForTs } from '@site/src/components/TsJsHelpers';

----------------------------------------

TITLE: Importing ShowForTs Component in TypeScript
DESCRIPTION: This snippet imports the ShowForTs component from a specific path, likely used for conditional rendering of TypeScript-specific content.

LANGUAGE: typescript
CODE:
import { ShowForTs } from '@site/src/components/TsJsHelpers';

----------------------------------------

TITLE: Updating package.json for Prisma 5
DESCRIPTION: Updates the package.json file to include the new Prisma version and adds the 'type': 'module' field.

LANGUAGE: json
CODE:
{
  ...
  "type": "module",
  "devDependencies": {
    ....
    "prisma": "5.19.1"
  }
  ...
}

----------------------------------------

TITLE: Creating NewTaskForm React Component in TypeScript
DESCRIPTION: Defines a React component for creating new tasks in TypeScript, with proper type annotations for the form event.

LANGUAGE: tsx
CODE:
import { FormEvent } from 'react'

const NewTaskForm = () => {
  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    try {
      const target = event.target as HTMLFormElement
      const description = target.description.value
      target.reset()
      await createTask({ description })
    } catch (err: any) {
      window.alert('Error: ' + err.message)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input name="description" type="text" defaultValue="" />
      <input type="submit" value="Create task" />
    </form>
  )
}