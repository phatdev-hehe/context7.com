TITLE: Command Palette Implementation with React Aria Components
DESCRIPTION: Complete implementation of a command palette using React Aria Components. This example includes a modal dialog triggered by a keyboard shortcut, an autocomplete search field, and a filterable command menu styled with Tailwind CSS.

LANGUAGE: tsx
CODE:
import {
  Autocomplete,
  TextField,
  Menu,
  MenuItem,
  useFilter,
  Input,
  Dialog,
  DialogTrigger,
  Modal,
  ModalOverlay,
  Button
} from 'react-aria-components';
import {useEffect, useMemo, useState} from 'react';

function CommandPaletteExample() {
  let commands = [
    {id: 'new-file', label: 'Create new file…'},
    {id: 'new-folder', label: 'Create new folder…'},
    {id: 'assign', label: 'Assign to…'},
    {id: 'assign-me', label: 'Assign to me'},
    {id: 'status', label: 'Change status…'},
    {id: 'priority', label: 'Change priority…'},
    {id: 'label-add', label: 'Add label…'},
    {id: 'label-remove', label: 'Remove label…'}
  ];

  let [isOpen, setOpen] = useState(false);
  let {contains} = useFilter({sensitivity: 'base'});
  let isMac = useMemo(() => /Mac/.test(navigator.platform), []);

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'k' && (isMac ? e.metaKey : e.ctrlKey)) {
        e.preventDefault();
        setOpen((prev) => !prev);
      } else if (e.key === 'Escape') {
        e.preventDefault();
        setOpen(false);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  })

  return (
    <div className="bg-linear-to-r from-indigo-500 to-violet-500 p-4 sm:p-8 h-[340px] rounded-lg flex items-center justify-center">
      <DialogTrigger isOpen={isOpen} onOpenChange={setOpen}>
        <Button className="inline-flex items-center justify-center rounded-xl bg-black/20 bg-clip-padding border border-white/20 px-3 py-2 font-medium font-[inherit] text-sm sm:text-base text-white hover:bg-black/30 pressed:bg-black/40 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75">
          <span className="block sm:hidden">Tap to open</span>
          <span className="hidden sm:block">
            Type <kbd className="px-2 py-1 m-1 text-xs font-semibold border border-gray-200 rounded-lg">{isMac ? '⌘' : 'Ctrl'}</kbd> + <kbd className="px-2 py-1 m-1 text-xs font-semibold border border-gray-200 rounded-lg">K</kbd> or press here to open
          </span>
        </Button>
        <ModalOverlay
          isDismissable
          className={({ isEntering, isExiting }) => `
          fixed inset-0 z-10 overflow-y-auto bg-black/25 flex min-h-full items-start sm:items-center justify-center p-4 text-center
          ${isEntering ? 'animate-in fade-in duration-300 ease-out' : ''}
          ${isExiting ? 'animate-out fade-out duration-200 ease-in' : ''}
        `}
        >
          <Modal
            className={({ isEntering, isExiting }) => `
            ${isEntering ? 'animate-in zoom-in-95 ease-out duration-300' : ''}
            ${isExiting ? 'animate-out zoom-out-95 ease-in duration-200' : ''}
          `}
          >
            <Dialog className="outline-hidden relative">
              <div className="flex flex-col gap-1 w-[95vw] sm:w-[500px] max-w-full rounded-xl bg-white shadow-lg p-2">
                <Autocomplete filter={contains}>
                  <TextField
                    aria-label="Search commands"
                    className="flex flex-col px-3 py-2 rounded-md outline-none placeholder-white/70"
                  >
                    <Input
                      autoFocus
                      placeholder="Search commands…"
                      className="border-none py-2 px-3 leading-5 text-gray-900 bg-transparent outline-hidden text-base focus-visible:ring-2 focus-visible:ring-violet-500 rounded-lg"
                    />
                  </TextField>
                  <Menu
                    items={commands}
                    className="mt-2 p-1 max-h-44 overflow-auto"
                  >
                    {({ label }) => <CommandItem>{label}</CommandItem>}
                  </Menu>
                </Autocomplete>
              </div>
            </Dialog>
          </Modal>
        </ModalOverlay>
      </DialogTrigger>
    </div>
  );
}

function CommandItem(props) {
  return (
    <MenuItem
      {...props}
      className="group flex w-full items-center rounded-md px-3 py-2 box-border outline-none cursor-default text-gray-900 hover:bg-violet-100 pressed:bg-violet-200 focus:bg-violet-500 focus:text-white"
    />
  );
}

----------------------------------------

TITLE: Building Calendar Component for DatePicker
DESCRIPTION: A Calendar component that implements a month grid view shown within the DatePicker popover. It uses useCalendar, useCalendarGrid, and useCalendarCell hooks to manage state, navigation, and selection of dates.

LANGUAGE: tsx
CODE:
import {useCalendarState} from '@react-stately/calendar';
import {useCalendar, useCalendarGrid, useCalendarCell} from '@react-aria/calendar';
import {createCalendar, getWeeksInMonth} from '@internationalized/date';

function Calendar(props) {
  let {locale} = useLocale();
  let state = useCalendarState({
    ...props,
    locale,
    createCalendar
  });

  let {calendarProps, prevButtonProps, nextButtonProps, title} = useCalendar(props, state);

  return (
    <div {...calendarProps} className="calendar">
      <div className="header">
        <h2>{title}</h2>
        <Button {...prevButtonProps}>&lt;</Button>
        <Button {...nextButtonProps}>&gt;</Button>
      </div>
      <CalendarGrid state={state} firstDayOfWeek={props.firstDayOfWeek} />
    </div>
  );
}

function CalendarGrid({state, ...props}) {
  let {locale} = useLocale();
  let {gridProps, headerProps, weekDays} = useCalendarGrid(props, state);

  // Get the number of weeks in the month so we can render the proper number of rows.
  let weeksInMonth = getWeeksInMonth(state.visibleRange.start, locale);

  return (
    <table {...gridProps}>
      <thead {...headerProps}>
        <tr>
          {weekDays.map((day, index) =>
            <th key={index}>{day}</th>
          )}
        </tr>
      </thead>
      <tbody>
        {[...new Array(weeksInMonth).keys()].map(weekIndex => (
          <tr key={weekIndex}>
            {state.getDatesInWeek(weekIndex).map((date, i) => (
              date ? (
                <CalendarCell
                  key={i}
                  state={state}
                  date={date} />
              ) : <td key={i} />
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
}

function CalendarCell({state, date}) {
  let ref = React.useRef(null);
  let {
    cellProps,
    buttonProps,
    isSelected,
    isOutsideVisibleRange,
    isDisabled,
    isUnavailable,
    formattedDate
  } = useCalendarCell({date}, state, ref);

  return (
    <td {...cellProps}>
      <div
        {...buttonProps}
        ref={ref}
        hidden={isOutsideVisibleRange}
        className={`cell ${isSelected ? 'selected' : ''} ${isDisabled ? 'disabled' : ''} ${isUnavailable ? 'unavailable' : ''}`}>
        {formattedDate}
      </div>
    </td>
  );
}

LANGUAGE: css
CODE:
.calendar {
  width: 220px;
}

.header {
  display: flex;
  align-items: center;
  gap: 4px;
  margin: 0 8px;
}

.header h2 {
  flex: 1;
  margin: 0;
}

.calendar table {
  width: 100%;
}

.cell {
  cursor: default;
  text-align: center;
}

.selected {
  background: var(--blue);
  color: white;
}

.unavailable {
  color: var(--spectrum-global-color-red-600);
}

.disabled {
  color: gray;
}

----------------------------------------

TITLE: Creating Framer Motion Wrappers for React Aria Components
DESCRIPTION: Demonstrates how to create wrapper components using Framer Motion's motion function to enable animation capabilities on React Aria Components like Modal and ModalOverlay.

LANGUAGE: tsx
CODE:
import {Modal, ModalOverlay} from 'react-aria-components';
import {motion} from 'framer-motion';

// Create Framer Motion wrappers.
const MotionModal = motion(Modal);
const MotionModalOverlay = motion(ModalOverlay);

----------------------------------------

TITLE: Creating a Shipping Options Radio Group with Tailwind CSS
DESCRIPTION: Implements a complete shipping options selection interface using RadioGroup and Radio components from React Aria Components, styled with Tailwind CSS. The example includes custom styling for different states (selected, focused, pressed) and a responsive layout.

LANGUAGE: tsx
CODE:
import {RadioGroup, Radio, Label} from 'react-aria-components';
import CheckCircleIcon from '@spectrum-icons/workflow/CheckmarkCircle';

function RadioGroupExample() {
  return (
    <div className="bg-linear-to-r from-blue-300 to-indigo-300 p-2 sm:p-8 rounded-lg flex justify-center">
      <RadioGroup className="flex flex-col gap-2 w-full max-w-[300px]" defaultValue="Standard">
        <Label className="text-xl text-slate-900 font-semibold font-serif">Shipping</Label>
        <ShippingOption name="Standard" time="4-10 business days" price="$4.99" />
        <ShippingOption name="Express" time="2-5 business days" price="$15.99" />
        <ShippingOption name="Lightning" time="1 business day" price="$24.99" />
      </RadioGroup>
    </div>
  );
}

function ShippingOption({name, time, price}) {
  return (
    <Radio value={name} className={({isFocusVisible, isSelected, isPressed}) => `
      group relative flex cursor-default rounded-lg px-4 py-3 shadow-lg outline-hidden bg-clip-padding border border-solid
      ${isFocusVisible ? 'ring-2 ring-blue-600 ring-offset-1 ring-offset-white/80' : ''}
      ${isSelected ? 'bg-blue-600 border-white/30 text-white' : 'border-transparent'}
      ${isPressed && !isSelected ? 'bg-blue-50' : ''}
      ${!isSelected && !isPressed ? 'bg-white' : ''}
    `}>
      <div className="flex w-full items-center justify-between gap-3">
        <div className="flex items-center shrink-0 text-blue-100 group-selected:text-white">
          <CheckCircleIcon size="M" />
        </div>
        <div className="flex flex-1 flex-col">
          <div className="text-lg font-serif font-semibold text-gray-900 group-selected:text-white">{name}</div>
          <div className="inline text-gray-500 group-selected:text-sky-100">
            {time}
          </div>
        </div>
        <div className="font-medium font-mono text-gray-900 group-selected:text-white">{price}</div>
      </div>
    </Radio>
  );
}

----------------------------------------

TITLE: Implementing Gesture Driven Modal Sheet with Framer Motion
DESCRIPTION: Complete implementation of an iOS-style modal sheet using React Aria Components and Framer Motion. Includes animation configurations, gesture handling for dragging, and styling with Tailwind CSS classes.

LANGUAGE: tsx
CODE:
import {
  AnimatePresence,
  motion,
  animate,
  useMotionTemplate,
  useMotionValue,
  useTransform,
  useMotionValueEvent
} from 'framer-motion';
import {
  Dialog,
  ModalOverlay,
  Modal,
  Button,
  Heading
} from 'react-aria-components';
import { useState } from 'react';

// Wrap React Aria modal components so they support framer-motion values.
const MotionModal = motion(Modal);
const MotionModalOverlay = motion(ModalOverlay);

const inertiaTransition = {
  type: "inertia" as const,
  bounceStiffness: 300,
  bounceDamping: 40,
  timeConstant: 300
};

const staticTransition = {
  duration: 0.5,
  ease: [0.32, 0.72, 0, 1]
};

const SHEET_MARGIN = 34;
const SHEET_RADIUS = 12;

const root = document.body.firstChild as HTMLElement;

function Sheet() {
  let [isOpen, setOpen] = useState(false);
  let h = window.innerHeight - SHEET_MARGIN;
  let y = useMotionValue(h);
  let bgOpacity = useTransform(y, [0, h], [0.4, 0]);
  let bg = useMotionTemplate`rgba(0, 0, 0, ${bgOpacity})`;

  // Scale the body down and adjust the border radius when the sheet is open.
  let bodyScale = useTransform(
    y,
    [0, h],
    [(window.innerWidth - SHEET_MARGIN) / window.innerWidth, 1]
  );
  let bodyTranslate = useTransform(y, [0, h], [SHEET_MARGIN - SHEET_RADIUS, 0]);
  let bodyBorderRadius = useTransform(y, [0, h], [SHEET_RADIUS, 0]);

  useMotionValueEvent(bodyScale, 'change', v => root.style.scale = `${v}`);
  useMotionValueEvent(bodyTranslate, 'change', v => root.style.translate = `0 ${v}px`);
  useMotionValueEvent(bodyBorderRadius, 'change', v => root.style.borderRadius = `${v}px`);

  return (
    <>
      <Button
        className="text-blue-600 text-lg font-semibold outline-hidden rounded-sm bg-transparent border-none pressed:text-blue-700 focus-visible:ring-3"
        onPress={() => setOpen(true)}>
        Open sheet
      </Button>
      <AnimatePresence>
        {isOpen && (
          <MotionModalOverlay
            // Force the modal to be open when AnimatePresence renders it.
            isOpen
            onOpenChange={setOpen}
            className="fixed inset-0 z-10"
            style={{ backgroundColor: bg as any }}>
            <MotionModal
              className="bg-(--page-background) absolute bottom-0 w-full rounded-t-xl shadow-lg will-change-transform"
              initial={{ y: h }}
              animate={{ y: 0 }}
              exit={{ y: h }}
              transition={staticTransition}
              style={{
                y,
                top: SHEET_MARGIN,
                // Extra padding at the bottom to account for rubber band scrolling.
                paddingBottom: window.screen.height
              }}
              drag="y"
              dragConstraints={{ top: 0 }}
              onDragEnd={(e, { offset, velocity }) => {
                if (offset.y > window.innerHeight * 0.75 || velocity.y > 10) {
                  setOpen(false);
                } else {
                  animate(y, 0, { ...inertiaTransition, min: 0, max: 0 });
                }
              }}>
              {/* drag affordance */}
              <div className="mx-auto w-12 mt-2 h-1.5 rounded-full bg-gray-400" />
              <Dialog className="px-4 pb-4 outline-hidden">
                <div className="flex justify-end">
                  <Button
                    className="text-blue-600 text-lg font-semibold mb-8 outline-hidden rounded-sm bg-transparent border-none pressed:text-blue-700 focus-visible:ring-3"
                    onPress={() => setOpen(false)}>
                    Done
                  </Button>
                </div>
                <Heading slot="title" className="text-3xl font-semibold mb-4">
                  Modal sheet
                </Heading>
                <p className="text-lg mb-4">
                  This is a dialog with a custom modal overlay built with React Aria Components and Framer Motion.
                </p>
                <p className="text-lg">
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sit amet nisl blandit, pellentesque eros eu, scelerisque eros. Sed cursus urna at nunc lacinia dapibus.
                </p>
              </Dialog>
            </MotionModal>
          </MotionModalOverlay>
        )}
      </AnimatePresence>
    </>
  );
}

----------------------------------------

TITLE: Implementing a DatePicker Component with Tailwind CSS
DESCRIPTION: A complete implementation of a DatePicker component using React Aria Components with Tailwind CSS styling. The example includes a date input field with segments, a popover dialog, and a calendar for date selection with custom styling for all elements.

LANGUAGE: tsx
CODE:
import {DatePicker, Label, Group, Heading, DateInput, DateSegment, Button, Popover, Dialog, Calendar, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell} from 'react-aria-components';
import type {ButtonProps, PopoverProps} from 'react-aria-components';
import ChevronUpDownIcon from '@spectrum-icons/workflow/ChevronUpDown';
import ChevronLeftIcon from '@spectrum-icons/workflow/ChevronLeft';
import ChevronRightIcon from '@spectrum-icons/workflow/ChevronRight';

function DatePickerExample() {
  return (
    <div className="bg-linear-to-r from-violet-500 to-fuchsia-600 p-12 sm:h-[400px] rounded-lg flex items-start justify-center">
      <DatePicker className="group flex flex-col gap-1 w-[200px]">
        <Label className="text-white cursor-default">Date</Label>
        <Group className="flex rounded-lg bg-white/90 focus-within:bg-white group-open:bg-white transition pl-3 shadow-md text-gray-700 focus-visible:ring-2 ring-black">
          <DateInput className="flex flex-1 py-2">
            {(segment) => <DateSegment segment={segment} className="px-0.5 tabular-nums outline-hidden rounded-xs focus:bg-violet-700 focus:text-white caret-transparent placeholder-shown:italic" />}
          </DateInput>
          <Button className="outline-hidden px-3 flex items-center text-gray-700 transition border-0 border-solid border-l border-l-purple-200 bg-transparent rounded-r-lg pressed:bg-purple-100 focus-visible:ring-2 ring-black">
            <ChevronUpDownIcon size="XS" />
          </Button>
        </Group>
        <MyPopover>
          <Dialog className="p-6 text-gray-600">
            <Calendar>
              <header className="flex items-center gap-1 pb-4 px-1 font-serif w-full">
                <Heading className="flex-1 font-semibold text-2xl ml-2" />
                <RoundButton slot="previous"><ChevronLeftIcon /></RoundButton>
                <RoundButton slot="next"><ChevronRightIcon /></RoundButton>
              </header>
              <CalendarGrid className="border-spacing-1 border-separate">
                <CalendarGridHeader>
                  {day => <CalendarHeaderCell className="text-xs text-gray-500 font-semibold">{day}</CalendarHeaderCell>}
                </CalendarGridHeader>
                <CalendarGridBody>
                  {date => <CalendarCell date={date} className="w-9 h-9 outline-hidden cursor-default rounded-full flex items-center justify-center outside-month:text-gray-300 hover:bg-gray-100 pressed:bg-gray-200 selected:bg-violet-700 selected:text-white focus-visible:ring-3 ring-violet-600/70 ring-offset-2" />}
                </CalendarGridBody>
              </CalendarGrid>
            </Calendar>
          </Dialog>
        </MyPopover>
      </DatePicker>
    </div>
  );
}

function RoundButton(props: ButtonProps) {
  return <Button {...props} className="w-9 h-9 outline-hidden cursor-default bg-transparent text-gray-600 border-0 rounded-full flex items-center justify-center hover:bg-gray-100 pressed:bg-gray-200 focus-visible:ring-3 ring-violet-600/70 ring-offset-2" />;
}

function MyPopover(props: PopoverProps) {
  return (
    <Popover
      {...props}
      className={({isEntering, isExiting}) => `
        overflow-auto rounded-lg drop-shadow-lg ring-1 ring-black/10 bg-white
        ${isEntering ? 'animate-in fade-in placement-bottom:slide-in-from-top-1 placement-top:slide-in-from-bottom-1 ease-out duration-200' : ''}
        ${isExiting ? 'animate-out fade-out placement-bottom:slide-out-to-top-1 placement-top:slide-out-to-bottom-1 ease-in duration-150' : ''}
      `} />
  );
}

----------------------------------------

TITLE: Implementing a Ripple Button Component with React Aria
DESCRIPTION: Creates a button component with a ripple effect animation when pressed. Uses React Aria's Button component combined with useState and useRef hooks to track press coordinates and manage animation timing.

LANGUAGE: tsx
CODE:
import {Button} from 'react-aria-components';
import {useEffect, useRef, useState} from 'react';
import Airplane from '@spectrum-icons/workflow/Airplane';

function RippleButton(props) {
  const [coords, setCoords] = useState(null);

  let timeout = useRef<ReturnType<typeof setTimeout> | null>(null);
  let onPress = (e) => {
    setCoords({x: e.x, y: e.y});
    if (e.x !== -1 && e.y !== -1) {
      clearTimeout(timeout.current);
      timeout.current = setTimeout(() => setCoords(null), 600);
    }
  };

  useEffect(() => {
    return () => {
      clearTimeout(timeout.current);
    };
  }, []);

  return (
    <div className="bg-linear-to-r from-teal-300 to-cyan-500 p-12 rounded-lg flex justify-center">
      <Button
        onPress={onPress}
        className={`
      relative overflow-hidden
      inline-flex items-center justify-center rounded-md bg-black/50 bg-clip-padding border border-white/20 px-6 py-4 text-white text-lg
      hover:bg-black/60 pressed:bg-black/70 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75`}>
      {coords && (
        <div
          key={`${coords.x},${coords.y}`}
          className="absolute h-8 w-8 rounded-full opacity-100 bg-white/60"
          style={{
            animation: 'ripple 600ms linear',
            left: coords.x - 15,
            top: coords.y - 15
          }} />)}
        <span className="flex items-center gap-4">{props.children}</span>
      </Button>
    </div>
  )
}

<RippleButton><Airplane size="S" /> Book flight</RippleButton>

----------------------------------------

TITLE: Implementing a Searchable Select Component with React Aria Components and Tailwind CSS
DESCRIPTION: Creates a fully functional searchable select component for language selection using React Aria Components. Implements autocomplete filtering, accessible keyboard navigation, and custom styling with Tailwind CSS. The component includes a select trigger button, popover with search field, and filterable list of options.

LANGUAGE: tsx
CODE:
import type {ListBoxItemProps} from 'react-aria-components';
import {Autocomplete, Select, Label, Button, SelectValue, Popover, ListBox, ListBoxItem, SearchField, Input, useFilter} from 'react-aria-components';
import {ChevronsUpDownIcon, CheckIcon, CheckIcon, SearchIcon, XIcon} from 'lucide-react';

function SelectExample() {
  let {contains} = useFilter({sensitivity: 'base'});

  return (
    <div className="bg-linear-to-br from-cyan-200 to-blue-400 p-8 sm:h-[350px] rounded-lg flex justify-center">
      <Select className="flex flex-col gap-1 w-[200px]">
        <Label className="text-black cursor-default">Language</Label>
        <Button className="flex items-center cursor-default rounded-lg border-0 bg-white/90 pressed:bg-white transition py-2 pl-5 pr-2 text-base text-left leading-normal ring-1 ring-black/5 shadow-md text-gray-700 focus:outline-hidden focus-visible:outline-2 outline-black outline-offset-3 focus-visible:ring-black/25">
          <SelectValue className="flex-1 truncate" />
          <ChevronsUpDownIcon className="w-4 h-4" />
        </Button>
        <Popover className="!max-h-80 w-(--trigger-width) flex flex-col rounded-md bg-white text-base shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out">
          <Autocomplete filter={contains}>
            <SearchField aria-label="Search" autoFocus className="group flex items-center bg-white forced-colors:bg-[Field] border-2 border-gray-300 has-focus:border-sky-600 rounded-full m-1">
              <SearchIcon aria-hidden className="w-4 h-4 ml-2 text-gray-600 forced-colors:text-[ButtonText]" />
              <Input placeholder="Search languages" className="px-2 py-1 flex-1 min-w-0 border-none outline outline-0 bg-white text-base text-gray-800 placeholder-gray-500 font-[inherit] [&::-webkit-search-cancel-button]:hidden" />
              <Button className="text-sm text-center transition rounded-full border-0 p-1 flex items-center justify-center text-gray-600 bg-transparent hover:bg-black/[5%] pressed:bg-black/10 mr-1 w-6 group-empty:invisible">
                <XIcon aria-hidden className="w-4 h-4" />
              </Button>
            </SearchField>
            <ListBox items={languages} className="outline-hidden p-1 overflow-auto flex-1 scroll-pb-1">
              {item => <SelectItem>{item.name}</SelectItem>}
            </ListBox>
          </Autocomplete>
        </Popover>
      </Select>
    </div>
  );
}

function SelectItem(props: ListBoxItemProps & {children: string}) {
  return (
    <ListBoxItem
      {...props}
      textValue={props.children}
      className="group flex items-center gap-2 cursor-default select-none py-2 px-4 outline-hidden rounded-sm text-gray-900 focus:bg-sky-600 focus:text-white">
      {({ isSelected }) => (
        <>
          <span className="flex-1 flex items-center gap-2 truncate font-normal group-selected:font-medium">{props.children}</span>
          <span className="w-5 flex items-center text-sky-600 group-focus:text-white">
            {isSelected && <CheckIcon size="S" />}
          </span>
        </>
      )}
    </ListBoxItem>
  );
}

----------------------------------------

TITLE: Implementing StockRow Component with Tailwind CSS in React Spectrum
DESCRIPTION: A custom Row component implementation with Tailwind CSS styling for alternating row colors, selection states, and focus states. It extends the base RowProps interface for type safety.

LANGUAGE: tsx
CODE:
function StockRow<T extends object>(props: RowProps<T>) {
  return <Row {...props} className="even:bg-slate-100 selected:bg-slate-600 selected:text-white cursor-default group outline-hidden focus-visible:outline focus-visible:outline-2 focus-visible:outline-slate-600 focus-visible:-outline-offset-4 selected:focus-visible:outline-white" />;
}

----------------------------------------

TITLE: Implementing Reorderable Table Rows with Drag and Drop in React
DESCRIPTION: A basic example of a table that allows users to reorder rows via drag and drop using the useDragAndDrop hook. The implementation includes row selection, custom drag handles, and uses useListData to manage the item list state.

LANGUAGE: tsx
CODE:
import {useListData} from 'react-stately';
import {useDragAndDrop, Button} from 'react-aria-components';

function Example() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},
      {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},
      {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},
      {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}
    ]
  });

  let {dragAndDropHooks} = useDragAndDrop({
    getItems: (keys) => [...keys].map(key => ({
      'text/plain': list.getItem(key).name
    })),
    onReorder(e) {
      if (e.target.dropPosition === 'before') {
        list.moveBefore(e.target.key, e.keys);
      } else if (e.target.dropPosition === 'after') {
        list.moveAfter(e.target.key, e.keys);
      }
    }
  });

  return (
    <Table
      aria-label="Files"
      selectionMode="multiple"
      dragAndDropHooks={dragAndDropHooks}
    >
      <TableHeader>
        <Column></Column>
        <Column><MyCheckbox slot="selection" /></Column>
        <Column isRowHeader>Name</Column>
        <Column>Type</Column>
        <Column>Date Modified</Column>
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            <Cell><Button slot="drag">≡</Button></Cell>
            <Cell><MyCheckbox slot="selection" /></Cell>
            <Cell>{item.name}</Cell>
            <Cell>{item.type}</Cell>
            <Cell>{item.date}</Cell>
          </Row>
        )}
      </TableBody>
    </Table>
  );
}

LANGUAGE: css
CODE:
.react-aria-Row {
  &[data-dragging] {
    opacity: 0.6;
    transform: translateZ(0);
  }

  [slot=drag] {
    all: unset;
    width: 15px;
    text-align: center;

    &[data-focus-visible] {
      border-radius: 4px;
      outline: 2px solid var(--focus-ring-color);
    }
  }
}

.react-aria-DropIndicator[data-drop-target] {
  outline: 1px solid var(--highlight-background);
  transform: translateZ(0);
}

----------------------------------------

TITLE: Implementing a Custom 4-5-4 Calendar in TypeScript
DESCRIPTION: This code demonstrates how to implement a custom 4-5-4 calendar system by extending the GregorianCalendar class. It overrides key methods to handle the custom week pattern, including getDaysInMonth, fromJulianDay, and toJulianDay to enable date conversions between calendar systems.

LANGUAGE: tsx
CODE:
import type {AnyCalendarDate, Calendar} from '@internationalized/date';
import {CalendarDate, GregorianCalendar, startOfWeek} from '@internationalized/date';

const weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];

class Custom454 extends GregorianCalendar {
  // Months always have either 4 or 5 full weeks.
  getDaysInMonth(date) {
    return weekPattern[date.month - 1] * 7;
  }

  // Enable conversion between calendar systems.
  fromJulianDay(jd: number): CalendarDate {
    let gregorian = super.fromJulianDay(jd);

    // Start from the beginning of the first week of the gregorian year
    // and add weeks until we find the month.
    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');
    for (let months = 0; months < weekPattern.length; months++) {
      let weeksInMonth = weekPattern[months];
      let monthEnd = monthStart.add({weeks: weeksInMonth});
      if (monthEnd.compare(gregorian) > 0) {
        let days = gregorian.compare(monthStart);
        return new CalendarDate(this, monthStart.year, months + 1, days + 1);
      }
      monthStart = monthEnd;
    }

    throw Error('Date is not in any month somehow!');
  }

  toJulianDay(date: AnyCalendarDate): number {
    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');
    for (let month = 1; month < date.month; month++) {
      monthStart = monthStart.add({weeks: weekPattern[month - 1]});
    }

    let gregorian = monthStart.add({days: date.day - 1});
    return super.toJulianDay(gregorian);
  }

  isEqual(other: Calendar) {
    return other instanceof Custom454;
  }
}

----------------------------------------

TITLE: Using useLocale Hook for Setting Language and Direction
DESCRIPTION: Example showing how to use the useLocale hook to set the lang and dir attributes on the root element of an application. This ensures the browser knows which language and direction to render the user interface.

LANGUAGE: TSX
CODE:
import {useLocale} from 'react-aria-components';

function YourApp() {
  let {locale, direction} = useLocale();

  return (
    <div lang={locale} dir={direction}>
      {/* your app here */}
    </div>
  );
}

----------------------------------------

TITLE: Loading Asynchronous Data with useAsyncList in React Spectrum
DESCRIPTION: Demonstrates how to fetch data asynchronously from an API using the useAsyncList hook and display it in a Select component. This example retrieves a list of Pokemon from the PokeAPI.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

let list = useAsyncList({
  async load({signal}) {
    let res = await fetch('https://pokeapi.co/api/v2/pokemon', {signal});
    let json = await res.json();
    return {items: json.results};
  }
});

<Select>
  <Label>Pick a Pokemon</Label>
  <Button>
    <SelectValue />
  </Button>
  <Popover>
    <ListBox items={list.items}>
      {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
    </ListBox>
  </Popover>
</Select>

----------------------------------------

TITLE: Implementing File Drop Handling in React Tables
DESCRIPTION: Example demonstrating how to accept and process dropped image files in a Table component. It filters for specific MIME types, creates object URLs for the files, and displays them along with metadata.

LANGUAGE: tsx
CODE:
import {isFileDropItem} from 'react-aria-components';

interface ImageItem {
  id: number,
  url: string,
  name: string,
  type: string,
  lastModified: number
}

function Example() {
  let [items, setItems] = React.useState<ImageItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    acceptedDragTypes: ['image/jpeg', 'image/png'],
    async onRootDrop(e) {
      let items = await Promise.all(
        e.items.filter(isFileDropItem).map(async item => {
          let file = await item.getFile();
          return {
            id: Math.random(),
            url: URL.createObjectURL(file),
            name: item.name,
            type: file.type,
            lastModified: file.lastModified
          };
        })
      );
      setItems(items);
    }
  });

  return (
    <Table
      aria-label="Droppable table"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader>
        <Column>Image</Column>
        <Column isRowHeader>Name</Column>
        <Column>Type</Column>
        <Column>Last Modified</Column>
      </TableHeader>
      <TableBody items={items} renderEmptyState={() => 'Drop images here'}>
        {item => (
          <Row>
            <Cell><img src={item.url} /></Cell>
            <Cell>{item.name}</Cell>
            <Cell>{item.type}</Cell>
            <Cell>{new Date(item.lastModified).toLocaleString()}</Cell>
          </Row>
        )}
      </TableBody>
    </Table>
  );
}

----------------------------------------

TITLE: Simulating User Interactions with user-event Library
DESCRIPTION: This snippet demonstrates how to properly simulate realistic user interactions with React Spectrum components using the user-event library, which fires all the appropriate events that would occur in real user interactions.

LANGUAGE: tsx
CODE:
import {render} from '@testing-library/react';
import userEvent from '@testing-library/user-event';

let tree = render(<LoginForm />);

// Click on the username field to focus it, and enter the value.
userEvent.click(tree.getByLabelText('Username'));
userEvent.type(document.activeElement, 'devon');

// Tab to the password field, and enter the value.
userEvent.tab();
userEvent.type(document.activeElement, 'Pas$w0rd');

// Tab to the submit button and click it.
userEvent.tab();
userEvent.click(document.activeElement);

----------------------------------------

TITLE: Implementing a Basic Selectable Table with React Aria Components
DESCRIPTION: This example demonstrates how to create a basic table with multiple selection functionality using React Aria Components. The table includes checkboxes for row selection and displays file information with columns for name, type, and date modified.

LANGUAGE: tsx
CODE:
import {Table, TableHeader, TableBody, Column, Row, Cell} from 'react-aria-components';
import {MyCheckbox} from './Checkbox';

<Table aria-label="Files" selectionMode="multiple">
  <TableHeader>
    <Column><MyCheckbox slot="selection" /></Column>
    <Column isRowHeader>Name</Column>
    <Column>Type</Column>
    <Column>Date Modified</Column>
  </TableHeader>
  <TableBody>
    <Row>
      <Cell><MyCheckbox slot="selection" /></Cell>
      <Cell>Games</Cell>
      <Cell>File folder</Cell>
      <Cell>6/7/2020</Cell>
    </Row>
    <Row>
      <Cell><MyCheckbox slot="selection" /></Cell>
      <Cell>Program Files</Cell>
      <Cell>File folder</Cell>
      <Cell>4/7/2021</Cell>
    </Row>
    <Row>
      <Cell><MyCheckbox slot="selection" /></Cell>
      <Cell>bootmgr</Cell>
      <Cell>System file</Cell>
      <Cell>11/20/2010</Cell>
    </Row>
    <Row>
      <Cell><MyCheckbox slot="selection" /></Cell>
      <Cell>log.txt</Cell>
      <Cell>Text Document</Cell>
      <Cell>1/18/2016</Cell>
    </Row>
  </TableBody>
</Table>

----------------------------------------

TITLE: Creating Styled Button Components with Panda CSS in React Aria
DESCRIPTION: This snippet demonstrates how to use Panda CSS with React Aria to create a styled button component. It defines base styles and variants (primary and secondary) with different background colors and pressed states using data attributes.

LANGUAGE: tsx
CODE:
import {Button} from 'react-aria-components';
import {styled} from '../styled-system/jsx';

const StyledButton = styled(Button, {
  base: {
    /* ... */
  },
  variants: {
    variant: {
      primary: {
        background: 'blue.600',
        '&[data-pressed]': {
          background: 'blue.700',
        }
      },
      secondary: {
        background: 'gray.300',
        '&[data-pressed]': {
          background: 'gray.400',
        }
      }
    }
  }
});

<StyledButton variant="primary">
  Initiate launch sequence…
</StyledButton>

----------------------------------------

TITLE: Implementing Action Menu with React Aria Components and Tailwind CSS
DESCRIPTION: A complete implementation of an Action Menu using React Aria Components. This includes a MenuTrigger with a Button, Popover, and Menu components, all styled with Tailwind CSS classes. The component features animations for entering and exiting states.

LANGUAGE: tsx
CODE:
import {MenuTrigger, Button, Popover, Menu, MenuItem, Separator} from 'react-aria-components';
import type {MenuItemProps} from 'react-aria-components';
import RailIcon from '@spectrum-icons/workflow/Rail';

function MenuExample() {
  return (
    <div className="bg-linear-to-r to-blue-500 from-violet-500 p-8 h-[250px] rounded-lg">
      <MenuTrigger>
        <Button aria-label="Menu" className="inline-flex items-center justify-center rounded-md bg-black/20 bg-clip-padding border border-white/20 px-3 py-2 text-white hover:bg-black/30 pressed:bg-black/40 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75"><RailIcon size="S" /></Button>
        <Popover className="p-1 w-56 overflow-auto rounded-md bg-white shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in entering:zoom-in-95 exiting:animate-out exiting:fade-out exiting:zoom-out-95 fill-mode-forwards origin-top-left">
          <Menu className="outline-hidden">
            <ActionItem id="new">New…</ActionItem>
            <ActionItem id="open">Open…</ActionItem>
            <Separator className="bg-gray-300 h-[1px] mx-3 my-1" />
            <ActionItem id="save">Save</ActionItem>
            <ActionItem id="save-as">Save as…</ActionItem>
            <Separator className="bg-gray-300 h-[1px] mx-3 my-1" />
            <ActionItem id="print">Print…</ActionItem>
          </Menu>
        </Popover>
      </MenuTrigger>
    </div>
  );
}

function ActionItem(props: MenuItemProps) {
  return <MenuItem {...props} className="group flex w-full items-center rounded-md px-3 py-2 box-border outline-hidden cursor-default text-gray-900 focus:bg-violet-500 focus:text-white" />;
}

----------------------------------------

TITLE: Implementing Drag Between Lists in React Spectrum
DESCRIPTION: A comprehensive example showing bidirectional drag and drop between two lists using React Spectrum components. The implementation supports moving items between lists, reordering items within a list, and handling drops on empty lists, with custom drag preview rendering.

LANGUAGE: tsx
CODE:
import {isTextDropItem} from 'react-aria-components';

interface FileItem {
  id: string,
  name: string,
  type: string
}

interface DndListBoxProps {
  initialItems: FileItem[],
  'aria-label': string
}

function DndListBox(props: DndListBoxProps) {
  let list = useListData({
    initialItems: props.initialItems
  });

  let { dragAndDropHooks } = useDragAndDrop({
    ///- begin collapse -///
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    ///- end collapse -///
    // Provide drag data in a custom format as well as plain text.
    getItems(keys) {
      return [...keys].map((key) => {
        let item = list.getItem(key);
        return {
          'custom-app-type': JSON.stringify(item),
          'text/plain': item.name
        };
      });
    },

    // Accept drops with the custom format.
    acceptedDragTypes: ['custom-app-type'],

    // Ensure items are always moved rather than copied.
    getDropOperation: () => 'move',

    // Handle drops between items from other lists.
    async onInsert(e) {
      let processedItems = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('custom-app-type')))
      );
      if (e.target.dropPosition === 'before') {
        list.insertBefore(e.target.key, ...processedItems);
      } else if (e.target.dropPosition === 'after') {
        list.insertAfter(e.target.key, ...processedItems);
      }
    },

    // Handle drops on the collection when empty.
    async onRootDrop(e) {
      let processedItems = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('custom-app-type')))
      );
      list.append(...processedItems);
    },

    // Handle reordering items within the same list.
    onReorder(e) {
      if (e.target.dropPosition === 'before') {
        list.moveBefore(e.target.key, e.keys);
      } else if (e.target.dropPosition === 'after') {
        list.moveAfter(e.target.key, e.keys);
      }
    },

    // Remove the items from the source list on drop
    // if they were moved to a different list.
    onDragEnd(e) {
      if (e.dropOperation === 'move' && !e.isInternal) {
        list.remove(...e.keys);
      }
    }
  });

  return (
    <ListBox
      aria-label={props['aria-label']}
      selectionMode="multiple"
      selectedKeys={list.selectedKeys}
      onSelectionChange={list.setSelectedKeys}
      items={list.items}
      dragAndDropHooks={dragAndDropHooks}
      renderEmptyState={() => 'Drop items here'}>
      {item => <ListBoxItem>{item.name}</ListBoxItem>}
    </ListBox>
  );
}

<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
  <DndListBox
    initialItems={[
      { id: '1', type: 'file', name: 'Adobe Photoshop' },
      { id: '2', type: 'file', name: 'Adobe XD' },
      { id: '3', type: 'folder', name: 'Documents' },
      { id: '4', type: 'file', name: 'Adobe InDesign' },
      { id: '5', type: 'folder', name: 'Utilities' },
      { id: '6', type: 'file', name: 'Adobe AfterEffects' }
    ]}
    aria-label="First ListBox"
  />
  <DndListBox
    initialItems={[
      { id: '7', type: 'folder', name: 'Pictures' },
      { id: '8', type: 'file', name: 'Adobe Fresco' },
      { id: '9', type: 'folder', name: 'Apps' },
      { id: '10', type: 'file', name: 'Adobe Illustrator' },
      { id: '11', type: 'file', name: 'Adobe Lightroom' },
      { id: '12', type: 'file', name: 'Adobe Dreamweaver' }
    ]}
    aria-label="Second ListBox"
  />
</div>

----------------------------------------

TITLE: Implementing Sortable Table Component with React Aria Components
DESCRIPTION: Creates a sortable stock table using React Aria Components with column sorting functionality. Uses useState and useMemo hooks to handle sorting logic, and implements custom table components with Tailwind CSS styling for a responsive, accessible UI.

LANGUAGE: tsx
CODE:
import {Table, TableHeader, TableBody, Column, Row, Cell, ResizableTableContainer, ColumnResizer, Group} from 'react-aria-components';
import type {ColumnProps, RowProps, CellProps, SortDescriptor} from 'react-aria-components';
import ArrowUpIcon from '@spectrum-icons/ui/ArrowUpSmall';
import {useState, useMemo} from 'react';

function StockTableExample() {
  let [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({column: 'symbol', direction: 'ascending'});
  let sortedItems = useMemo(() => {
    return stocks.sort((a, b) => {
      let first = a[sortDescriptor.column];
      let second = b[sortDescriptor.column];
      let cmp = first.localeCompare(second);
      if (sortDescriptor.direction === 'descending') {
        cmp *= -1;
      }
      return cmp;
    })
  }, [sortDescriptor]);

  return (
    <div className="bg-linear-to-r from-indigo-500 to-violet-500 p-8 rounded-lg flex items-center justify-center md:col-span-2">
      <ResizableTableContainer className="max-h-[280px] w-full overflow-auto scroll-pt-[2.321rem] relative bg-white rounded-lg shadow-sm text-gray-600">
        <Table aria-label="Stocks" selectionMode="multiple" selectionBehavior="replace" sortDescriptor={sortDescriptor} onSortChange={setSortDescriptor} className="border-separate border-spacing-0">
          <TableHeader>
            <StockColumn id="symbol" allowsSorting>Symbol</StockColumn>
            <StockColumn id="name" isRowHeader allowsSorting defaultWidth="3fr">Name</StockColumn>
            <StockColumn id="marketCap" allowsSorting>Market Cap</StockColumn>
            <StockColumn id="sector" allowsSorting>Sector</StockColumn>
            <StockColumn id="industry" allowsSorting defaultWidth="2fr">Industry</StockColumn>
          </TableHeader>
          <TableBody items={sortedItems}>
            {item => (
              <StockRow>
                <StockCell><span className="font-mono bg-slate-100 border border-slate-200 rounded-sm px-1 group-selected:bg-slate-700 group-selected:border-slate-800">${item.symbol}</span></StockCell>
                <StockCell className="font-semibold">{item.name}</StockCell>
                <StockCell>{item.marketCap}</StockCell>
                <StockCell>{item.sector}</StockCell>
                <StockCell>{item.industry}</StockCell>
              </StockRow>
            )}
          </TableBody>
        </Table>
      </ResizableTableContainer>
    </div>
  );
}

function StockColumn(props: ColumnProps & {children: React.ReactNode}) {
  return (
    <Column {...props} className="sticky top-0 p-0 border-0 border-b border-solid border-slate-300 bg-slate-200 font-bold text-left cursor-default first:rounded-tl-lg last:rounded-tr-lg whitespace-nowrap outline-hidden">
      {({allowsSorting, sortDirection}) => (
        <div className="flex items-center pl-4 py-1">
          <Group role="presentation" tabIndex={-1} className="flex flex-1 items-center overflow-hidden outline-hidden rounded-sm focus-visible:ring-2 ring-slate-600">

----------------------------------------

TITLE: Form with Valid Validation State in React Spectrum
DESCRIPTION: Shows a form with validation state set to "valid", providing visual confirmation that all form values are correctly entered.

LANGUAGE: tsx
CODE:
<Form
  validationState="valid"
  aria-label="Valid validationState example"
  maxWidth="size-3600">
  <TextField label="Name" />
  <RadioGroup label="Favorite pet">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: Creating a Reusable ComboBox Component with TypeScript and React Aria
DESCRIPTION: Example implementation of a reusable ComboBox component that wraps React Aria components with customized styling. The component accepts label, description, and error message props, and demonstrates how to structure the component hierarchy.

LANGUAGE: tsx
CODE:
import type {ComboBoxProps, ListBoxItemProps, ValidationResult} from 'react-aria-components';
import {Text, FieldError} from 'react-aria-components';

interface MyComboBoxProps<T extends object> extends Omit<ComboBoxProps<T>, 'children'> {
  label?: string,
  description?: string | null,
  errorMessage?: string | ((validation: ValidationResult) => string),
  children: React.ReactNode | ((item: T) => React.ReactNode)
}

function MyComboBox<T extends object>({label, description, errorMessage, children, ...props}: MyComboBoxProps<T>) {
  return (
    <ComboBox {...props}>
      <Label>{label}</Label>
      <div className="my-combobox-container">
        <Input />
        <Button>▼</Button>
      </div>
      {description && <Text slot="description">{description}</Text>}
      <FieldError>{errorMessage}</FieldError>
      <Popover>
        <ListBox>
          {children}
        </ListBox>
      </Popover>
    </ComboBox>
  );
}

function MyItem(props: ListBoxItemProps) {
  return <ListBoxItem {...props} className={({isFocused, isSelected}) => `my-item ${isFocused ? 'focused' : ''} ${isSelected ? 'selected' : ''}`} />
}

<MyComboBox label="Ice cream flavor">
  <MyItem>Chocolate</MyItem>
  <MyItem>Mint</MyItem>
  <MyItem>Strawberry</MyItem>
  <MyItem>Vanilla</MyItem>
</MyComboBox>

----------------------------------------

TITLE: Building a Radio Group Component with useRadioGroupState
DESCRIPTION: Complete example of building a simple radio group component using the useRadioGroupState hook to manage selection state and handle uncontrolled behavior.

LANGUAGE: tsx
CODE:
import {useRadioGroupState} from '@react-stately/radio';

function RadioGroup(props) {
  let state = useRadioGroupState(props);

  return (
    <>
      <label>
        <input
          type="radio"
          name={state.name}
          checked={state.selectedValue === 'dogs'}
          onChange={() => state.setSelectedValue('dogs')} />
        Dogs
      </label>
      <label>
        <input
          type="radio"
          name={state.name}
          checked={state.selectedValue === 'cats'}
          onChange={() => state.setSelectedValue('cats')} />
        Cats
      </label>
    </>
  );
}

<RadioGroup
  defaultValue="dogs"
  onChange={value => alert(`Selected ${value}`)} />

----------------------------------------

TITLE: Testing ComboBox with React Aria Test Utils
DESCRIPTION: Example of how to test a ComboBox component using the @react-aria/test-utils package. It shows how to create a ComboBox tester, open the dropdown, and select an option using keyboard interactions.

LANGUAGE: ts
CODE:
// Combobox.test.ts
import {render} from '@testing-library/react';
import {User} from '@react-aria/test-utils';

let testUtilUser = new User({interactionType: 'mouse'});
// ...

it('ComboBox can select an option via keyboard', async function () {
  // Render your test component/app and initialize the combobox tester
  let {getByTestId} = render(
    <ComboBox data-testid="test-combobox">
      ...
    </ComboBox>
  );
  let comboboxTester = testUtilUser.createTester('ComboBox', {root: getByTestId('test-combobox'), interactionType: 'keyboard'});

  await comboboxTester.open();
  expect(comboboxTester.listbox).toBeInTheDocument();

  let options = comboboxTester.options();
  await comboboxTester.selectOption({option: options[0]});
  expect(comboboxTester.combobox.value).toBe('One');
  expect(comboboxTester.listbox).not.toBeInTheDocument();
});

----------------------------------------

TITLE: Creating Custom Table Header and Row Components with Selection Features
DESCRIPTION: Implements custom TableHeader and Row components that automatically include selection checkboxes and drag handles based on the table's configuration. Uses the useTableOptions hook to retrieve selection behavior, selection mode, and drag-and-drop settings.

LANGUAGE: tsx
CODE:
import type {TableHeaderProps, RowProps} from 'react-aria-components';
import {Collection, useTableOptions} from 'react-aria-components';

export function MyTableHeader<T extends object>({columns, children}: TableHeaderProps<T>) {
  let {selectionBehavior, selectionMode, allowsDragging} = useTableOptions();

  return (
    <TableHeader>
      {/* Add extra columns for drag and drop and selection. */}
      {allowsDragging && <Column />}
      {selectionBehavior === 'toggle' && <Column>{selectionMode === 'multiple' && <MyCheckbox slot="selection" />}</Column>}
      <Collection items={columns}>
        {children}
      </Collection>
    </TableHeader>
  );
}

export function MyRow<T extends object>({id, columns, children, ...otherProps}: RowProps<T>) {
  let {selectionBehavior, allowsDragging} = useTableOptions();

  return (
    <Row id={id} {...otherProps}>
      {allowsDragging && <Cell><Button slot="drag">≡</Button></Cell>}
      {selectionBehavior === 'toggle' && <Cell><MyCheckbox slot="selection" /></Cell>}
      <Collection items={columns}>
        {children}
      </Collection>
    </Row>
  );
}

----------------------------------------

TITLE: Implementing a DateRangePicker Component with React Aria
DESCRIPTION: Complete example of a DateRangePicker component implementation using useDateRangePicker and useDateRangePickerState hooks. The component combines DateField, Popover, Dialog, RangeCalendar, and Button components to create a fully accessible date range selector.

LANGUAGE: TSX
CODE:
import {useDateRangePickerState} from '@react-stately/datepicker';
import {useDateRangePicker} from '@react-aria/datepicker';

// Reuse the DateField, Popover, Dialog, RangeCalendar, and Button from your component library.
import {DateField, Popover, Dialog, RangeCalendar, Button} from 'your-component-library';

function DateRangePicker(props) {
  let state = useDateRangePickerState(props);
  let ref = React.useRef(null);
  let {labelProps, groupProps, startFieldProps, endFieldProps, buttonProps, dialogProps, calendarProps} = useDateRangePicker(props, state, ref);

  return (
    <div style={{display: 'inline-flex', flexDirection: 'column'}}>
      <span {...labelProps}>{props.label}</span>
      <div {...groupProps} ref={ref} style={{display: 'flex'}}>
        <div className="field">
          <DateField {...startFieldProps} />
          <span style={{padding: '0 4px'}}>–</span>
          <DateField {...endFieldProps} />
          {state.isInvalid &&
            <span aria-hidden="true">🚫</span>
          }
        </div>
        <Button {...buttonProps}>🗓</Button>
      </div>
      {state.isOpen &&
        <Popover state={state} triggerRef={ref} placement="bottom start">
          <Dialog {...dialogProps}>
            <RangeCalendar {...calendarProps} firstDayOfWeek={props.firstDayOfWeek} />
          </Dialog>
        </Popover>
      }
    </div>
  );
}

<DateRangePicker label="Event date" />

----------------------------------------

TITLE: Creating a Basic ComboBox with React Aria Components
DESCRIPTION: A basic example of a ComboBox component that displays a dropdown list of animal options. The component includes a label, input field, dropdown button, and a popover containing a list of selectable items.

LANGUAGE: tsx
CODE:
import {ComboBox, Label, Input, Button, Popover, ListBox, ListBoxItem} from 'react-aria-components';

<ComboBox>
  <Label>Favorite Animal</Label>
  <div>
    <Input />
    <Button>▼</Button>
  </div>
  <Popover>
    <ListBox>
      <ListBoxItem>Aardvark</ListBoxItem>
      <ListBoxItem>Cat</ListBoxItem>
      <ListBoxItem>Dog</ListBoxItem>
      <ListBoxItem>Kangaroo</ListBoxItem>
      <ListBoxItem>Panda</ListBoxItem>
      <ListBoxItem>Snake</ListBoxItem>
    </ListBox>
  </Popover>
</ComboBox>

----------------------------------------

TITLE: Implementing Controlled Multiple Selection in React Spectrum ListBox Component
DESCRIPTION: This example demonstrates how to implement controlled multiple selection behavior on a static collection using React hooks. It shows how to track selected keys using a Set and update them via the onSelectionChange callback.

LANGUAGE: tsx
CODE:
let [selectedKeys, setSelectedKeys] = useState(new Set());

<ListBox selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>
  <Item key="one">One</Item>
  <Item key="two">Two</Item>
  <Item key="three">Three</Item>
</ListBox>

----------------------------------------

TITLE: Using a Selection Toggle Component with a Table
DESCRIPTION: Demonstrates how to use the Selectable component to make a table's selection mode controllable via a toggle button.

LANGUAGE: tsx
CODE:
import {ToggleButton} from 'react-aria-components';

<Selectable>
  <ToggleButton>Select</ToggleButton>
  <PokemonTable />
</Selectable>

----------------------------------------

TITLE: ComboBox Anatomy and Component Structure
DESCRIPTION: Example showing the complete structure of a ComboBox component with all possible child elements, including label, input, button, description, error message, and popover with list items and sections.

LANGUAGE: tsx
CODE:
import {ComboBox, Label, Input, Button, Popover, ListBox, ListBoxItem, ListBoxSection, Header, Text, FieldError} from 'react-aria-components';

<ComboBox>
  <Label />
  <Input />
  <Button />
  <Text slot="description" />
  <FieldError />
  <Popover>
    <ListBox>
      <ListBoxItem>
        <Text slot="label" />
        <Text slot="description" />
      </ListBoxItem>
      <ListBoxSection>
        <Header />
        <ListBoxItem />
      </ListBoxSection>
    </ListBox>
  </Popover>
</ComboBox>

----------------------------------------

TITLE: Configuring Tailwind CSS for React Aria Components
DESCRIPTION: Provides setup instructions for Tailwind CSS plugins required by the searchable select component. Details the configuration for both Tailwind v4 and v3 using the tailwindcss-react-aria-components and tailwindcss-animate plugins.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";
@plugin "tailwindcss-animate";

----------------------------------------

TITLE: Full Component Structure for DateRangePicker
DESCRIPTION: Detailed component structure showing all possible subcomponents of the DateRangePicker including accessibility features like description and error messages. This example demonstrates the complete component hierarchy for reference implementations.

LANGUAGE: tsx
CODE:
import {DateRangePicker, Label, Group, Popover, Dialog, RangeCalendar, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Button, Heading, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';

<DateRangePicker>
  <Label />
  <Group>
    <DateInput slot="start">
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <DateInput slot="end">
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <Button />
  </Group>
  <Text slot="description" />
  <FieldError />
  <Popover>
    <Dialog>
      <RangeCalendar>
        <Button slot="previous" />
        <Heading />
        <Button slot="next" />
        <CalendarGrid>
          <CalendarGridHeader>
            {day => <CalendarHeaderCell />}
          </CalendarGridHeader>
          <CalendarGridBody>
            {date => <CalendarCell date={date} />}
          </CalendarGridBody>
        </CalendarGrid>
        <Text slot="errorMessage" />
      </RangeCalendar>
    </Dialog>
  </Popover>
</DateRangePicker>

----------------------------------------

TITLE: Creating an Uncontrolled Form with FormData API in React Spectrum
DESCRIPTION: This example shows how to handle form submission using the browser's FormData API. The form data is collected on submit, converted to a JavaScript object, and could be sent to a backend API.

LANGUAGE: tsx
CODE:
import {Form, TextField, ButtonGroup, Button} from '@adobe/react-spectrum';

function Example() {
  let [submitted, setSubmitted] = React.useState(null);

  /*- begin highlight -*/
  let onSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    // Prevent default browser page refresh.
    e.preventDefault();

    // Get form data as an object.
    let data = Object.fromEntries(new FormData(e.currentTarget));

    // Submit to your backend API...
    setSubmitted(data);
  };
  /*- end highlight -*/

  return (
    <Form onSubmit={onSubmit} maxWidth="size-3000">
      <TextField name="name" label="Name" />
      <ButtonGroup>
        <Button type="submit" variant="primary">Submit</Button>
        <Button type="reset" variant="secondary">Reset</Button>
      </ButtonGroup>
      {submitted && <div>You submitted: <code>{JSON.stringify(submitted)}</code></div>}
    </Form>
  );
}

----------------------------------------

TITLE: Implementing TableRow with React Aria
DESCRIPTION: Creates a table row component using useTableRow hook that supports selection, focus, and keyboard navigation. The component applies appropriate styling based on selection and focus states.

LANGUAGE: tsx
CODE:
import {useTableRow} from '@react-aria/table';

function TableRow({item, children, state}) {
  let ref = useRef<HTMLTableRowElement | null>(null);
  let isSelected = state.selectionManager.isSelected(item.key);
  let {rowProps, isPressed} = useTableRow({
    node: item
  }, state, ref);
  let {isFocusVisible, focusProps} = useFocusRing();

  return (
    <tr
      style={{
        background: isSelected
          ? 'blueviolet'
          : isPressed
            ? 'var(--spectrum-global-color-gray-400)'
            : item.index % 2
              ? 'var(--spectrum-alias-highlight-hover)'
              : 'none',
        color: isSelected ? 'white' : null,
        outline: 'none',
        boxShadow: isFocusVisible ? 'inset 0 0 0 2px orange' : 'none',
        cursor: 'default'
      }}
      {...mergeProps(rowProps, focusProps)}
      ref={ref}>
      {children}
    </tr>
  );
}

----------------------------------------

TITLE: Full Select Component Anatomy in React Aria Components
DESCRIPTION: A comprehensive example showing the complete structure of the Select component, including optional elements like description and error messages, and section support in the listbox.

LANGUAGE: tsx
CODE:
import {Select, SelectValue, Label, Button, Popover, ListBox, ListBoxItem, ListBoxSection, Header, Text, FieldError} from 'react-aria-components';

<Select>
  <Label />
  <Button>
    <SelectValue />
  </Button>
  <Text slot="description" />
  <FieldError />
  <Popover>
    <ListBox>
      <ListBoxItem>
        <Text slot="label" />
        <Text slot="description" />
      </ListBoxItem>
      <ListBoxSection>
        <Header />
        <ListBoxItem />
      </ListBoxSection>
    </ListBox>
  </Popover>
</Select>

----------------------------------------

TITLE: Implementing Resizable Columns in React Spectrum Table
DESCRIPTION: Example demonstrating how to create resizable columns in a Table using ResizableTableContainer and ColumnResizer components, with different width constraints.

LANGUAGE: tsx
CODE:
import {ResizableTableContainer, ColumnResizer} from 'react-aria-components';

<ResizableTableContainer>
  <Table aria-label="Table with resizable columns">
    <TableHeader>
      {/*- begin highlight -*/}
      <Column id="file" isRowHeader maxWidth={500}>
        <div className="flex-wrapper">
          <span tabIndex={-1} className="column-name">File Name</span>
          <ColumnResizer />
        </div>
      </Column>
      <Column id="size" width={80}>Size</Column>
      <Column id="date" minWidth={100}>
        <div className="flex-wrapper">
          <span tabIndex={-1} className="column-name">Date Modified</span>
          <ColumnResizer />
        </div>
      </Column>
      {/*- end highlight -*/}
    </TableHeader>
    <TableBody>
      <Row>
        <Cell>2022-Roadmap-Proposal-Revision-012822-Copy(2)</Cell>
        <Cell>214 KB</Cell>
        <Cell>November 27, 2022 at 4:56PM</Cell>
      </Row>
      <Row>
        <Cell>62259692_p0_master1200</Cell>
        <Cell>120 KB</Cell>
        <Cell>January 27, 2021 at 1:56AM</Cell>
      </Row>
    </TableBody>
  </Table>
</ResizableTableContainer>

----------------------------------------

TITLE: Implementing DateField Component with React Aria Hooks in TypeScript/JSX
DESCRIPTION: A complete implementation of a DateField component using useDateFieldState, useDateField, and useDateSegment hooks. This component displays a date input with editable segments for each date unit.

LANGUAGE: tsx
CODE:
import {useDateFieldState} from '@react-stately/datepicker';
import {useDateField, useDateSegment} from '@react-aria/datepicker';
import {createCalendar} from '@internationalized/date';
import {useLocale} from '@react-aria/i18n';

export function DateField(props) {
  let {locale} = useLocale();
  let state = useDateFieldState({
    ...props,
    locale,
    createCalendar
  });

  let ref = React.useRef(null);
  let {labelProps, fieldProps} = useDateField(props, state, ref);

  return (
    <div className="wrapper">
      <span {...labelProps}>{props.label}</span>
      <div {...fieldProps} ref={ref} className="field">
        {state.segments.map((segment, i) =>
          <DateSegment key={i} segment={segment} state={state} />
        )}
        {state.isInvalid &&
          <span aria-hidden="true">🚫</span>
        }
      </div>
    </div>
  );
}

function DateSegment({segment, state}) {
  let ref = React.useRef(null);
  let {segmentProps} = useDateSegment(segment, state, ref);

  return (
    <span
      {...segmentProps}
      ref={ref}
      className={`segment ${segment.isPlaceholder ? 'placeholder' : ''}`}>
      {segment.text}
    </span>
  );
}

<DateField label="Event date" />

----------------------------------------

TITLE: Implementing Exit Animations with Framer Motion and React Aria Components
DESCRIPTION: A complete example showing how to implement exit animations for overlay components using Framer Motion variants and the isExiting prop. The code tracks animation state and prevents the component from unmounting until the animation completes.

LANGUAGE: tsx
CODE:
type AnimationState = 'unmounted' | 'hidden' | 'visible';

function Example() {
  /*- begin highlight -*/
  // Track animation state.
  let [animation, setAnimation] = React.useState<AnimationState>('unmounted');
  /*- end highlight -*/

  return (
    <DialogTrigger
      /*- begin highlight -*/
      // Start animation when open state changes.
      onOpenChange={isOpen => setAnimation(isOpen ? 'visible' : 'hidden')}
      /*- end highlight -*/
    >
      <Button>Open dialog</Button>
      <MotionModalOverlay
        /*- begin highlight -*/
        // Prevent modal from unmounting during animation.
        isExiting={animation === 'hidden'}
        // Reset animation state once it is complete.
        onAnimationComplete={animation => {
          setAnimation(a => animation === 'hidden' && a === 'hidden' ? 'unmounted' : a)
        }}
        /*- end highlight -*/
        variants={{
          hidden: {opacity: 0},
          visible: {opacity: 1}
        }}
        initial="hidden"
        animate={animation}>
        <MotionModal
          variants={{
            hidden: {opacity: 0, y: 32},
            visible: {opacity: 1, y: 0}
          }}>
          {/* ... */}
        </MotionModal>
      </MotionModalOverlay>
    </DialogTrigger>
  );
}

----------------------------------------

TITLE: Using Composition in NumberField with React Aria Components
DESCRIPTION: Example showing how React Aria Components uses composition where standalone components like Button are reused within NumberField. This approach reduces duplicate styling code and provides powerful composition capabilities.

LANGUAGE: tsx
CODE:
<NumberField>
  <Label>Width</Label>
  <Group>
    <Input />
    <Button slot="increment">+</Button>
    <Button slot="decrement">-</Button>
  </Group>
</NumberField>

----------------------------------------

TITLE: Working with Time Zones in DateRangePicker
DESCRIPTION: Demonstrates using parseZonedDateTime to create a DateRangePicker with dates in a specific time zone (America/Los_Angeles).

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

<DateRangePicker
  label="Date range"
  defaultValue={{
    start: parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]'),
    end: parseZonedDateTime('2022-11-08T11:15[America/Los_Angeles]')
  }} />

----------------------------------------

TITLE: Asynchronous Loading with Picker in React Spectrum
DESCRIPTION: Example showing how to load data asynchronously in a Picker using the useAsyncList hook. This implementation fetches Pokemon data from an API and supports infinite scrolling.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Pokemon {
  name: string
}

function AsyncLoadingExample() {
  let list = useAsyncList<Pokemon>({
    async load({signal, cursor}) {
      // If no cursor is available, then we're loading the first page.
      // Otherwise, the cursor is the next URL to load, as returned from the previous page.
      let res = await fetch(cursor || 'https://pokeapi.co/api/v2/pokemon', {signal});
      let json = await res.json();
      return {
        items: json.results,
        cursor: json.next
      };
    }
  });

  return (
    <Picker
      label="Pick a Pokemon"
      items={list.items}
      isLoading={list.isLoading}
      onLoadMore={list.loadMore}>
      {item => <Item key={item.name}>{item.name}</Item>}
    </Picker>
  );
}

----------------------------------------

TITLE: Setting Custom Locale with I18nProvider
DESCRIPTION: Demonstrates how to override the default browser language detection using the I18nProvider component. This allows specifying an application-specific locale setting.

LANGUAGE: TSX
CODE:
import {I18nProvider} from 'react-aria-components';

<I18nProvider locale="fr-FR">
  <YourApp />
</I18nProvider>

----------------------------------------

TITLE: Implementing a Custom Calendar Picker with Context
DESCRIPTION: Creates a composite component using CalendarContext to manage state and connect a calendar with preset date buttons. Demonstrates context provider implementation and state management.

LANGUAGE: tsx
CODE:
import {CalendarContext, useSlottedContext} from 'react-aria-components';

function CalendarPicker({children}) {
  let [value, onChange] = React.useState(null);
  let [focusedValue, onFocusChange] = React.useState(null);

  return (
    /*- begin highlight -*/
    <CalendarContext.Provider value={{value, onChange, focusedValue, onFocusChange}}>
    {/*- end highlight -*/}
      <div className="calendar-picker">
        {children}
      </div>
    </CalendarContext.Provider>
  );
}

interface PresetProps {
  date: CalendarDate,
  children: React.ReactNode
}

function Preset({date, children}: PresetProps) {
  /*- begin highlight -*/
  let context = useSlottedContext(CalendarContext)!;
  /*- end highlight -*/
  let onPress = () => {
    context.onFocusChange(date);
    context.onChange(date);
  };

  return (
    <Button onPress={onPress}>{children}</Button>
  );
}

----------------------------------------

TITLE: Implementing HSBA Color Picker with ColorWheel in React Spectrum
DESCRIPTION: This example shows how to build an HSBA color picker using ColorArea, ColorWheel, and ColorSlider components. It manages color state and displays the current HSBA color string.

LANGUAGE: tsx
CODE:
import {ColorArea, ColorSlider, ColorWheel} from '@react-spectrum/color';
import {Flex, Grid} from '@react-spectrum/layout';
import {Label} from '@react-spectrum/label';
import {parseColor} from '@react-stately/color';
import {View} from '@react-spectrum/view';

function Example() {
  let [color, setColor] = React.useState(parseColor('hsba(0, 100%, 50%, 0.5)'));
  let [, saturationChannel, brightnessChannel] = color.getColorChannels();
  return (
    <fieldset style={{border: 0}}>
      <legend>HSBA Example</legend>
      <Flex
        direction="column">
        <View
          position="relative"
          width="size-2400">
          <Grid
            position="absolute"
            justifyContent="center"
            alignContent="center"
            width="100%"
            height="100%">
            <ColorArea
              xChannel={saturationChannel}
              yChannel={brightnessChannel}
              value={color}
              onChange={setColor}
              size="size-1200" />
          </Grid>
          <ColorWheel
            value={color}
            onChange={setColor}
            size="size-2400" />
        </View>
        <ColorSlider channel="alpha" value={color} onChange={setColor} />
        <p>Current value: {color.toString('hsba')}</p>
      </Flex>
    </fieldset>
  );
}

----------------------------------------

TITLE: Importing CSS Styles in React Components
DESCRIPTION: Imports a global CSS file for Tailwind styling that is needed for the swipeable tabs component.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Implementing Controlled Selection in React Spectrum Table
DESCRIPTION: Creates a table with programmatically controlled selection using the selectedKeys prop and onSelectionChange callback. The example defines a PokemonTable component with state management for selections.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-stately';

function PokemonTable(props) {
  let columns = [
    {name: 'Name', uid: 'name'},
    {name: 'Type', uid: 'type'},
    {name: 'Level', uid: 'level'}
  ];

  let rows = [
    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},
    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},
    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},
    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}
  ];

  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));

  return (
    <Table aria-label="Table with controlled selection" selectionMode="multiple" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys} {...props}>
      <TableHeader columns={columns}>
        {column => (
          <Column key={column.uid}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={rows}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </Table>
  );
}

----------------------------------------

TITLE: Basic Focus Containment Example with FocusScope in React
DESCRIPTION: Demonstrates a basic implementation of FocusScope that contains focus within a component, auto-focuses the first element on mount, and restores focus when unmounted. The example shows a pattern useful for modal dialogs.

LANGUAGE: tsx
CODE:
import {FocusScope} from '@react-aria/focus';

function Example() {
  let [isOpen, setOpen] = React.useState(false);
  return (
    <>
      <button onClick={() => setOpen(true)}>Open</button>
      {isOpen &&
        <FocusScope contain restoreFocus autoFocus>
          <label htmlFor="first-input">First Input</label>
          <input id="first-input" />
          <label htmlFor="second-input">Second Input</label>
          <input id="second-input" />
          <button onClick={() => setOpen(false)}>Close</button>
        </FocusScope>
      }
    </>
  );
}

----------------------------------------

TITLE: Tree Component Structure and Anatomy
DESCRIPTION: Example showing the basic structure and anatomy of a Tree component with TreeItems, including selection checkboxes and expansion toggle buttons. Demonstrates the hierarchical structure of components.

LANGUAGE: tsx
CODE:
import {Tree, TreeItem, TreeItemContent, Button, Checkbox} from 'react-aria-components';

<Tree>
  <TreeItem>
    <TreeItemContent>
      <Button slot="chevron" />
      <Checkbox slot="selection" />
    </TreeItemContent>
    <TreeItem>
      {/* ... */}
    </TreeItem>
  </TreeItem>
</Tree>

----------------------------------------

TITLE: Implementing Status Select Dropdown with React Aria Components and Tailwind CSS
DESCRIPTION: Creates a fully styled issue status dropdown component using React Aria Components with Tailwind CSS classes. The component includes a select button, popover, and styled list items with status indicators.

LANGUAGE: tsx
CODE:
import {Select, Label, Button, SelectValue, Popover, ListBox, ListBoxItem} from 'react-aria-components';
import type {ListBoxItemProps} from 'react-aria-components';
import ChevronUpDownIcon from '@spectrum-icons/workflow/ChevronUpDown';
import CheckIcon from '@spectrum-icons/workflow/Checkmark';

function SelectExample() {
  return (
    <div className="bg-linear-to-tl from-amber-500 to-rose-700 p-8 sm:h-[250px] rounded-lg flex justify-center">
      <Select className="flex flex-col gap-1 w-[200px]">
        <Label className="text-white cursor-default">Status</Label>
        <Button className="flex items-center cursor-default rounded-lg border-0 bg-white/90 pressed:bg-white transition py-2 pl-5 pr-2 text-base text-left leading-normal shadow-md text-gray-700 focus:outline-hidden focus-visible:ring-2 ring-white ring-offset-2 ring-offset-rose-700">
          <SelectValue className="flex-1 truncate placeholder-shown:italic" />
          <ChevronUpDownIcon size="XS" />
        </Button>
        <Popover className="max-h-60 w-(--trigger-width) overflow-auto rounded-md bg-white text-base shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out">
          <ListBox className="outline-hidden p-1">
            <StatusItem textValue="Backlog">
              <Status className="bg-gray-500" />
              Backlog
            </StatusItem>
            <StatusItem textValue="In Progress">
              <Status className="bg-blue-500" />
              In Progress
            </StatusItem>
            <StatusItem textValue="In Review">
              <Status className="bg-yellow-500" />
              In Review
            </StatusItem>
            <StatusItem textValue="Done">
              <Status className="bg-green-500" />
              Done
            </StatusItem>
            <StatusItem textValue="Won't Do">
              <Status className="bg-red-500" />
              Won't Do
            </StatusItem>
          </ListBox>
        </Popover>
      </Select>
    </div>
  );
}

function StatusItem(props: ListBoxItemProps & {children: React.ReactNode}) {
  return (
    <ListBoxItem
      {...props}
      className="group flex items-center gap-2 cursor-default select-none py-2 px-4 outline-hidden rounded-sm text-gray-900 focus:bg-rose-600 focus:text-white">
      {({ isSelected }) => (
        <>
          <span className="flex-1 flex items-center gap-2 truncate font-normal group-selected:font-medium">{props.children}</span>
          <span className="w-5 flex items-center text-rose-600 group-focus:text-white">
            {isSelected && <CheckIcon size="S" />}
          </span>
        </>
      )}
    </ListBoxItem>
  );
}

function Status({className}: {className: string}) {
  return <span className={`w-3 h-3 rounded-full border border-solid border-white ${className}`} />;
}

----------------------------------------

TITLE: Creating Animated Button with React Aria Hooks and Framer Motion
DESCRIPTION: This example demonstrates using useButton hook with Framer Motion to create an AnimatedButton component that animates based on pressed state. It shows advanced customization while maintaining compatibility with React Aria Components.

LANGUAGE: tsx
CODE:
import type {ButtonProps} from 'react-aria-components';
import {ButtonContext, useContextProps} from 'react-aria-components';
import {useButton} from 'react-aria';
import {motion} from 'framer-motion';

const AnimatedButton = React.forwardRef((props: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, ButtonContext);

  let {buttonProps, isPressed} = useButton(props, ref);
  return (
    <motion.button
      {...buttonProps}
      ref={ref}
      animate={{
        scale: isPressed ? 0.9 : 1
      }}>
      {props.children}
    </motion.button>
  );
});

----------------------------------------

TITLE: Implementing Form Validation in ComboBox
DESCRIPTION: This example shows how to implement validation in a ComboBox using the isRequired prop and the FieldError component to display validation errors in a form context.

LANGUAGE: tsx
CODE:
import {Form, FieldError} from 'react-aria-components';

<Form>
  <ComboBox name="animal" isRequired>
    <Label>Favorite Animal</Label>
    <div>
      <Input />
      <Button>▼</Button>
    </div>
    <FieldError />
    <Popover>
      <ListBox>
        <ListBoxItem>Aardvark</ListBoxItem>
        <ListBoxItem>Cat</ListBoxItem>
        <ListBoxItem>Dog</ListBoxItem>
        <ListBoxItem>Kangaroo</ListBoxItem>
        <ListBoxItem>Panda</ListBoxItem>
        <ListBoxItem>Snake</ListBoxItem>
      </ListBox>
    </Popover>
  </ComboBox>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Accessing Form Properties with useSlottedContext Hook in React Aria Components
DESCRIPTION: This snippet shows how to access form properties like validationBehavior from a nested component using the useSlottedContext hook with FormContext. This allows child components to read properties from their parent Form component.

LANGUAGE: tsx
CODE:
import {FormContext, useSlottedContext} from 'react-aria-components';

function MyFormField() {
  let {validationBehavior} = useSlottedContext(FormContext);
  // ...
}

<Form validationBehavior="aria">
  <MyFormField />
</Form>

----------------------------------------

TITLE: Creating a Router Component with LinkContext in React Aria Components
DESCRIPTION: This example demonstrates how to create a Router component that tracks which Link was last clicked using the LinkContext provider. The LinkContext allows passing the onPress handler to all Link components within the Router.

LANGUAGE: tsx
CODE:
import type {PressEvent} from 'react-aria-components';
import {LinkContext} from 'react-aria-components';

function Router({children}) {
  let [clicked, setClicked] = React.useState(null);
  let onPress = (e: PressEvent) => {
    setClicked(e.target.textContent);
  };

  return (
    /*- begin highlight -*/
    <LinkContext.Provider value={{onPress}}>
    {/*- end highlight -*/}
      {children}
      {clicked && `You clicked ${clicked}`}
    </LinkContext.Provider>
  );
}

----------------------------------------

TITLE: Using useSlottedContext for Direct Context Access
DESCRIPTION: Example of using useSlottedContext to consume context values without merging with existing props, supporting both default and slotted contexts.

LANGUAGE: tsx
CODE:
import {useSlottedContext} from 'react-aria-components';

// Consume the un-slotted value.
let buttonContext = useSlottedContext(ButtonContext);

// Consume the value for a specific slot name.
let incrementButtonContext = useSlottedContext(ButtonContext, 'increment');

----------------------------------------

TITLE: Managing Selection in ComboBox Components
DESCRIPTION: Example showing how to implement selection in ComboBox using both controlled and uncontrolled approaches. Demonstrates setting default selected keys and handling selection change events.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, name: 'Adobe Photoshop'},
    {id: 2, name: 'Adobe XD'},
    {id: 3, name: 'Adobe InDesign'},
    {id: 4, name: 'Adobe AfterEffects'},
    {id: 5, name: 'Adobe Illustrator'},
    {id: 6, name: 'Adobe Lightroom'},
    {id: 7, name: 'Adobe Premiere Pro'},
    {id: 8, name: 'Adobe Fresco'},
    {id: 9, name: 'Adobe Dreamweaver'}
  ];
  let [productId, setProductId] = React.useState<Key>(9);

  return (
    <div style={{display: 'flex', gap: 16, flexWrap: 'wrap'}}>
      <MyComboBox
        label="Pick an Adobe product (uncontrolled)"
        defaultItems={options}
        defaultSelectedKey={9}
      >
        {item => <ListBoxItem>{item.name}</ListBoxItem>}
      </MyComboBox>

      <MyComboBox
        label="Pick an Adobe product (controlled)"
        defaultItems={options}
        selectedKey={productId}
        onSelectionChange={selected => setProductId(selected)}
      >
        {item => <ListBoxItem>{item.name}</ListBoxItem>}
      </MyComboBox>
    </div>
  );
}

----------------------------------------

TITLE: Creating Controlled Resizable Columns with localStorage Persistence
DESCRIPTION: This example demonstrates how to implement controlled column resizing with state management and localStorage persistence. It uses onResize and onResizeEnd event handlers to update column widths and save them between page refreshes.

LANGUAGE: tsx
CODE:
let items = [
  {id: '1', file: '2022-Roadmap-Proposal-Revision-012822-Copy(2)', size: '214 KB', date: 'November 27, 2022 at 4:56PM'},
  {id: '2', file: '62259692_p0_master1200', size: '120 KB', date: 'January 27, 2021 at 1:56AM'}
];

let columnsData = [
  {name: 'File Name', id: 'file', width: '1fr'},
  {name: 'Size', id: 'size', width: 80},
  {name: 'Date', id: 'date', width: 100}
];

function ResizableTable() {
  let [columns, setColumns] = React.useState(() => {
    let localStorageWidths = localStorage.getItem('RSPWidths');
    if (localStorageWidths) {
      let widths = JSON.parse(localStorageWidths);
      return columnsData.map(col => ({...col, width: widths[col.id]}));
    } else {
      return columnsData;
    }
  });

  let onResize = (widths) => {
    setColumns(columns => columns.map(col => ({...col, width: widths.get(col.id)})));
  };

  let onResizeEnd = (widths) => {
    localStorage.setItem('RSPWidths', JSON.stringify(Object.fromEntries(widths)));
  };

  return (
    <TableView
      onResize={onResize}
      onResizeEnd={onResizeEnd}
      aria-label="TableView with controlled, resizable columns saved in local storage"
      maxWidth={320}
      height={200} >
      <TableHeader columns={columns}>
        {(column) => {
          const {name, id, width} = column;
          return <Column allowsResizing key={id} width={width}>{name}</Column>;
        }}
      </TableHeader>
      <TableBody items={items}>
        {(item) => (
          <Row key={item.id}>{(key) => <Cell>{item[key]}</Cell>}</Row>
        )}
      </TableBody>
    </TableView>
  );
}

<ResizableTable />

----------------------------------------

TITLE: Creating Dynamic Nested Columns in React Spectrum Table
DESCRIPTION: This example demonstrates how to define nested columns dynamically in a Table component. It uses TypeScript interfaces to define column structure and renders the same nested column layout as the static example, but using a data-driven approach.

LANGUAGE: tsx
CODE:
interface ColumnDefinition {
  name: string,
  key: string,
  children?: ColumnDefinition[],
  isRowHeader?: boolean
}

let columns: ColumnDefinition[] = [
  {name: 'Name', key: 'name', children: [
    {name: 'First Name', key: 'first', isRowHeader: true},
    {name: 'Last Name', key: 'last', isRowHeader: true}
  ]},
  {name: 'Information', key: 'info', children: [
    {name: 'Age', key: 'age'},
    {name: 'Birthday', key: 'birthday'}
  ]}
];

let rows = [
  {id: 1, first: 'Sam', last: 'Smith', age: 36, birthday: 'May 3'},
  {id: 2, first: 'Julia', last: 'Jones', age: 24, birthday: 'February 10'},
  {id: 3, first: 'Peter', last: 'Parker', age: 28, birthday: 'September 7'},
  {id: 4, first: 'Bruce', last: 'Wayne', age: 32, birthday: 'December 18'}
];

<Table aria-label="Example table with dynamic nested columns">
  <TableHeader columns={columns}>
    {column => (
      <Column isRowHeader={column.isRowHeader} childColumns={column.children}>
        {column.name}
      </Column>
    )}
  </TableHeader>
  <TableBody items={rows}>
    {item => (
      <Row>
        {columnKey => <Cell>{item[columnKey]}</Cell>}
      </Row>
    )}
  </TableBody>
</Table>

----------------------------------------

TITLE: Advanced ColorPicker Customization with EyeDropper API
DESCRIPTION: This example demonstrates advanced ColorPicker customization using ColorPickerStateContext. It implements an eye dropper button that leverages the browser's EyeDropper API to allow users to sample on-screen colors and update the ColorPicker value.

LANGUAGE: tsx
CODE:
import {ColorPickerStateContext, parseColor} from 'react-aria-components';
import SamplerIcon from '@spectrum-icons/workflow/Sampler';

function EyeDropperButton() {
  let state = React.useContext(ColorPickerStateContext)!;

  // Check browser support.
  // @ts-ignore
  if (typeof EyeDropper === 'undefined') {
    return 'EyeDropper is not supported in your browser.';
  }

  return (
    <Button
      aria-label="Eye dropper"
      style={{alignSelf: 'start'}}
      onPress={() => {
        // @ts-ignore
        new EyeDropper().open().then(result => state.setColor(parseColor(result.sRGBHex)));
      }}>
      <SamplerIcon size="S" />
    </Button>
  );
}

<MyColorPicker label="Color" defaultValue="#345">
  <MyColorArea colorSpace="hsb" xChannel="saturation" yChannel="brightness" />
  <MyColorSlider colorSpace="hsb" channel="hue" />
  <EyeDropperButton />
</MyColorPicker>

----------------------------------------

TITLE: Form with Side Label Position and End Alignment in React Spectrum
DESCRIPTION: Visual configuration example showing a form with labels positioned beside fields (side) and aligned to the end of the container.

LANGUAGE: tsx
CODE:
<Form
  labelPosition="side"
  labelAlign="end"
  aria-label="Side position, end alignment example"
  maxWidth="size-3600">
  <TextField label="Name" />
  <RadioGroup label="Favorite pet">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: Creating a Reusable ColorPicker Component
DESCRIPTION: Implementation of a reusable wrapper component for ColorPicker that encapsulates all child components and styling into a single, customizable component with default and configurable behavior.

LANGUAGE: tsx
CODE:
import type {ColorPickerProps} from 'react-aria-components';
import {Button, ColorPicker, Dialog, DialogTrigger, Popover} from 'react-aria-components';
import {MyColorSwatch} from './ColorSwatch';
import {MyColorArea} from './ColorArea';
import {MyColorSlider} from './ColorSlider';
import {MyColorField} from './ColorField';

interface MyColorPickerProps extends ColorPickerProps {
  label?: string,
  children?: React.ReactNode
}

function MyColorPicker({label, children, ...props}: MyColorPickerProps) {
  return (
    <ColorPicker {...props}>
      <DialogTrigger>
        <Button className="color-picker">
          <MyColorSwatch />
          <span>{label}</span>
        </Button>
        <Popover placement="bottom start">
          <Dialog className="color-picker-dialog">
            {children || <>
              <MyColorArea colorSpace="hsb" xChannel="saturation" yChannel="brightness" />
              <MyColorSlider colorSpace="hsb" channel="hue" />
              <MyColorField label="Hex" />
            </>}
          </Dialog>
        </Popover>
      </DialogTrigger>
    </ColorPicker>
  );
}

<MyColorPicker label="Fill color" defaultValue="#f00" />

----------------------------------------

TITLE: Implementing HSB Color Selection with ColorArea in React
DESCRIPTION: This example demonstrates implementing a color picker using the HSB (Hue, Saturation, Brightness) color model with ColorArea component. It shows three different channel combinations with corresponding sliders for the remaining channel.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-stately/color';

function Example() {
  let [
    color,
    setColor
  ] = React.useState(parseColor('hsb(219, 58%, 93%)'));
  let [
    hChannel,
    sChannel,
    bChannel
  ] = color.getColorChannels();
  return (
    <>
      <div style={{display: 'inline-flex', flexWrap: 'wrap'}}>
        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>
          <label id="sbh-label-id-1">x: {color.getChannelName(sChannel, 'en-US')}, y: {color.getChannelName(bChannel, 'en-US')}</label>
          <ColorArea
            aria-labelledby="sbh-label-id-1"
            value={color}
            onChange={setColor}
            xChannel={sChannel}
            yChannel={bChannel} />
          <ColorSlider
              channel={hChannel}
              value={color}
              onChange={setColor} />
        </div>
        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>
          <label id="bhs-label-id-1">x: {color.getChannelName(hChannel, 'en-US')}, y: {color.getChannelName(bChannel, 'en-US')}</label>
          <ColorArea
            aria-labelledby="bhs-label-id-1"
            value={color}
            onChange={setColor}
            xChannel={hChannel}
            yChannel={bChannel} />
          <ColorSlider
              channel={sChannel}
              value={color}
              onChange={setColor} />
        </div>
        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>
          <label id="hsb-label-id-2">x: {color.getChannelName(hChannel, 'en-US')}, y: {color.getChannelName(sChannel, 'en-US')}</label>
          <ColorArea
            aria-labelledby="hsb-label-id-2"
            value={color}
            onChange={setColor}
            xChannel={hChannel}
            yChannel={sChannel} />
          <ColorSlider
              channel={bChannel}
              value={color}
              onChange={setColor} />
        </div>
      </div>
      <p>Current HSB color value: <ColorSwatch color={color} style={{width: '16px', height: '16px', verticalAlign: 'text-bottom'}} /> {color.toString('hsb')}</p>
    </>
  );
}

----------------------------------------

TITLE: Schema Validation for Server-Side Form Validation with Zod
DESCRIPTION: This example demonstrates how to use Zod for server-side form validation with React Spectrum. It shows how to flatten Zod validation errors to be compatible with React Spectrum's validationErrors prop format.

LANGUAGE: tsx
CODE:
// In your server...
import {z} from 'zod';

const schema = z.object({
  name: z.string().min(1),
  age: z.coerce.number().positive()
});

function handleRequest(formData: FormData) {
  let result = schema.safeParse(Object.fromEntries(formData));
  if (!result.success) {
    return {
      errors: result.error.flatten().fieldErrors
    };
  }

  // Do stuff...

  return {
    errors: {}
  };
}

----------------------------------------

TITLE: Server-Side Action Implementation for React Spectrum Form
DESCRIPTION: This example shows the server-side implementation of a React Server Action that provides validation errors to a React Spectrum form. It demonstrates how to structure the error response for compatibility with validationErrors.

LANGUAGE: tsx
CODE:
// app/actions.ts
'use server';

export async function createTodo(prevState: any, formData: FormData) {
  try {
    // Create the todo...
  } catch (err) {
    return {
      errors: {
        todo: 'Invalid todo.'
      }
    };
  }
}

----------------------------------------

TITLE: Implementing Dynamic Sections in Menu Component
DESCRIPTION: An example of creating a menu with dynamic sections populated from a hierarchical data structure. This implementation allows selection of individual items within sections and handles state management.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-stately';

function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set([1,3]));
  let openWindows = [
    {
      name: 'Left Panel',
      id: 'left',
      children: [
        {id: 1, name: 'Final Copy (1)'}
      ]
    },
    {
      name: 'Right Panel',
      id: 'right',
      children: [
        {id: 2, name: 'index.ts'},
        {id: 3, name: 'package.json'},
        {id: 4, name: 'license.txt'}
      ]
    }
  ];

  return (
    <MenuButton
      label="Window"
      items={openWindows}
      selectionMode="multiple"
      selectedKeys={selected}
      onSelectionChange={setSelected}>
      {item => (
        <Section items={item.children} title={item.name}>
          {item => <Item>{item.name}</Item>}
        </Section>
      )}
    </MenuButton>
  );
}

----------------------------------------

TITLE: Creating a Reusable TextField Component in React
DESCRIPTION: Example of creating a reusable TextField wrapper component that accepts label, description, and error message props, providing a consistent interface for text input across an application.

LANGUAGE: tsx
CODE:
import type {TextFieldProps, ValidationResult} from 'react-aria-components';
import {Text, FieldError} from 'react-aria-components';

interface MyTextFieldProps extends TextFieldProps {
  label?: string,
  description?: string,
  errorMessage?: string | ((validation: ValidationResult) => string)
}

function MyTextField({label, description, errorMessage, ...props}: MyTextFieldProps) {
  return (
    <TextField {...props}>
      <Label>{label}</Label>
      <Input />
      {description && <Text slot="description">{description}</Text>}
      <FieldError>{errorMessage}</FieldError>
    </TextField>
  );
}

<MyTextField label="Name" />

----------------------------------------

TITLE: Handling Focusable Content in Tab Panels
DESCRIPTION: Example showing how the Tabs component automatically manages focus behavior for tab panels with and without focusable elements. When a panel has no focusable content, the panel itself becomes focusable for keyboard navigation.

LANGUAGE: tsx
CODE:
<Tabs aria-label="Notes app">
  <Item key="item1" title="Jane Doe">
    <label>Leave a note for Jane: <input type="text" /></label>
  </Item>
  <Item key="item2" title="John Doe">Senatus Populusque Romanus.</Item>
  <Item key="item3" title="Joe Bloggs">Alea jacta est.</Item>
</Tabs>

----------------------------------------

TITLE: Implementing a Basic DatePicker in React Aria Components
DESCRIPTION: This example demonstrates how to implement a basic DatePicker with React Aria Components, including a label, date input with segments, dropdown button, and calendar popover.

LANGUAGE: tsx
CODE:
import {DatePicker, Label, Group, Popover, Dialog, Calendar, CalendarGrid, CalendarCell, Button, Heading, DateInput, DateSegment} from 'react-aria-components';

<DatePicker>
  <Label>Date</Label>
  <Group>
    <DateInput>
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <Button>▼</Button>
  </Group>
  <Popover>
    <Dialog>
      <Calendar>
        <header>
          <Button slot="previous">◀</Button>
          <Heading />
          <Button slot="next">▶</Button>
        </header>
        <CalendarGrid>
          {date => <CalendarCell date={date} />}
        </CalendarGrid>
      </Calendar>
    </Dialog>
  </Popover>
</DatePicker>

----------------------------------------

TITLE: Implementing Root-Level Drop Target in React ListBox
DESCRIPTION: This example shows how to enable dropping on the ListBox as a whole using the onRootDrop event handler. It accepts dragged items, extracts their names, and adds them to the component's state, while providing visual feedback for valid drop targets.

LANGUAGE: tsx
CODE:
interface Item {
  id: number,
  name: string
}

function Example() {
  let [items, setItems] = React.useState<Item[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    async onRootDrop(e) {
      let items = await Promise.all(e.items.map(async (item, i) => {
        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;
        return {id: i, name};
      }));
      setItems(items);
    }
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      <DraggableListBox />
      <ListBox aria-label="Droppable list" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => 'Drop items here'}>
        {item => <ListBoxItem>{item.name}</ListBoxItem>}
      </ListBox>
    </div>
  );
}

LANGUAGE: css
CODE:
.react-aria-ListBox[data-drop-target] {
  outline: 2px solid var(--highlight-background);
  outline-offset: -1px;
  background: var(--highlight-overlay)
}

----------------------------------------

TITLE: Implementing onDragEnd for Drop Operations in React Spectrum
DESCRIPTION: This code demonstrates how to handle drag end events and respond to different drop operations. When a 'move' operation is completed, the dragged items are removed from the source list.

LANGUAGE: tsx
CODE:
function Example() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Adobe Photoshop'},
      {id: 2, name: 'Adobe XD'},
      {id: 3, name: 'Adobe Dreamweaver'},
      {id: 4, name: 'Adobe InDesign'},
      {id: 5, name: 'Adobe Connect'}
    ]
  });

  let { dragAndDropHooks } = useDragAndDrop({
    ///- begin collapse -///
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    getItems(keys) {
      return [...keys].map(key => {
        let item = list.getItem(key);
        return {
          'text/plain': item.name,
          'custom-app-type': JSON.stringify(item)
        };
      });
    },
    ///- end collapse -///
    // ...
    /*- begin highlight -*/
    onDragEnd(e) {
      if (e.dropOperation === 'move') {
        list.remove(...e.keys);
      }
    }
    /*- end highlight -*/
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      <ListBox aria-label="Draggable list" selectionMode="multiple" items={list.items} dragAndDropHooks={dragAndDropHooks}>
        {item => <ListBoxItem>{item.name}</ListBoxItem>}
      </ListBox>
      <DroppableListBox />
    </div>
  );
}

----------------------------------------

TITLE: Implementing File System Tree with React Aria Components and Tailwind CSS
DESCRIPTION: Creates a file system tree component using React Aria Components with multiple selection, custom styling with Tailwind CSS, and a recursive rendering pattern for nested items. The tree includes expandable items with chevron indicators and focus/selection states.

LANGUAGE: tsx
CODE:
import {Button, Collection, Tree, TreeItem, TreeItemContent} from 'react-aria-components';
import ChevronIcon from '@spectrum-icons/ui/ChevronRightMedium';

function FileSystemExample() {
  return (
    <div className="bg-linear-to-r from-indigo-500 to-violet-500 p-8 rounded-lg flex items-center justify-center">
      <Tree aria-label="File system" selectionMode="multiple" selectionBehavior="replace" items={filesystem} defaultExpandedKeys={['documents']} className={`
        border-separate border-spacing-0 w-60 h-100 bg-slate-900
        overflow-auto rounded-lg shadow-lg`}>
          {function renderItem(item) {
            return (
              <TreeItem
                textValue={item.name}
                className={`selected:bg-slate-500 text-white
                  cursor-default group outline-hidden focus-visible:outline focus-visible:outline-2
                  focus-visible:outline-slate-600 focus-visible:-outline-offset-4
                  selected:focus-visible:outline-white`}>
                <TreeItemContent>
                  {({hasChildItems}) => (
                    <div className="flex items-center space-x-2 py-2 ps-[calc(calc(var(--tree-item-level)_-_1)_*_calc(var(--spacing)_*_3))]">
                      {hasChildItems ? <Button slot="chevron" className={`shrink-0 w-8 h-8
                        group-data-[expanded=true]:rotate-90 transition-rotate duration-200
                        inline-flex items-center justify-center bg-transparent border-0 me-0
                        cursor-default outline-hidden text-white`}><ChevronIcon /></Button> : <div className="shrink-0 w-8 h-8" />}
                      <div>{item.name}</div>
                    </div>
                  )}
                </TreeItemContent>
                <Collection items={item.children}>
                  {renderItem}
                </Collection>
              </TreeItem>
            )
          }}
        </Tree>
    </div>
  );
}

----------------------------------------

TITLE: Creating a Custom Select Component with FormValidationContext Integration
DESCRIPTION: This example shows how to create a custom form input component (NativeSelect) that consumes FormValidationContext to display validation errors. It demonstrates integrating a native HTML select element with the React Aria Components validation system.

LANGUAGE: tsx
CODE:
import type {SelectHTMLAttributes} from 'react';
import {useContext} from 'react';
import {useId} from 'react-aria';

function NativeSelect(props: SelectHTMLAttributes<HTMLSelectElement> & {label: string}) {
  let errors = useContext(FormValidationContext);
  let error = errors?.[props.name];
  let id = useId();
  let descriptionId = useId();

  return (
    <div className="flex">
      <label htmlFor={id}>{props.label}</label>
      <select {...props} id={id} aria-describedby={descriptionId} />
      <small className="invalid" id={descriptionId}>{error}</small>
    </div>
  );
}

<Form validationErrors={{frequency: 'Please select a frequency.'}}>
  <NativeSelect label="Frequency" name="frequency">
    <option value="">Select an option...</option>
    <option>Always</option>
    <option>Sometimes</option>
    <option>Never</option>
  </NativeSelect>
</Form>

----------------------------------------

TITLE: Mock File System Data Structure for Tree Component
DESCRIPTION: Creates a mock filesystem data structure with nested items up to 4 levels deep, totaling 50 items. This structure will be used to populate the Tree component in the example.

LANGUAGE: tsx
CODE:
const filesystem = [
  // mock up a file system with 50 items total and nested children up to 4 levels deep
  {'id': 'documents', name: 'Documents', children: [
    {'id': 'photos', name: 'Photos', children: [
      {'id': 'summer', name: 'Summer', children: [
        {'id': 'beach', name: 'Beach'},
        {'id': 'mountains', name: 'Mountains'},
        {'id': 'forest', name: 'Forest'},
        {'id': 'desert', name: 'Desert'}
      ]},
      {'id': 'winter', name: 'Winter', children: [
        {'id': 'skiing', name: 'Skiing'},
        {'id': 'snowboarding', name: 'Snowboarding'},
        {'id': 'snowmobiling', name: 'Snowmobiling'},
        {'id': 'snowshoeing', name: 'Snowshoeing'}
      ]}
    ]},
    {'id': 'videos', name: 'Videos', children: [
      {'id': 'family', name: 'Family'},
      {'id': 'friends', name: 'Friends'},
      {'id': 'pets', name: 'Pets'},
      {'id': 'vacations', name: 'Vacations'}
    ]},
    {'id': 'music', name: 'Music', children: [
      {'id': 'rock', name: 'Rock', children: [
        {'id': 'classic', name: 'Classic'},
        {'id': 'alternative', name: 'Alternative'},
        {'id': 'punk', name: 'Punk'},
        {'id': 'metal', name: 'Metal'}
      ]},
      {'id': 'pop', name: 'Pop', children: [
        {'id': 'dance', name: 'Dance'},
        {'id': 'hip-hop', name: 'Hip Hop'},
        {'id': 'r&b', name: 'R&B'},
        {'id': 'soul', name: 'Soul'}
      ]}
    ]},
    {'id': 'movies', name: 'Movies', children: [
      {'id': 'action', name: 'Action'},
      {'id': 'comedy', name: 'Comedy'},
      {'id': 'drama', name: 'Drama'},
      {'id': 'horror', name: 'Horror'}
    ]}
  ]}
];

----------------------------------------

TITLE: Implementing Asynchronous Loading in SearchAutocomplete with useAsyncList
DESCRIPTION: Example demonstrating how to handle asynchronous loading and filtering of data from a server in a SearchAutocomplete component using the useAsyncList hook from @react-stately/data. The component fetches Star Wars character data from an API based on the input text.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

function AsyncLoadingExample() {
  let list = useAsyncList({
    async load({signal, filterText}) {
      let res = await fetch(
        `https://swapi.py4e.com/api/people/?search=${filterText}`,
        {signal}
      );
      let json = await res.json();

      return {
        items: json.results
      };
    }
  });

  return (
    <SearchAutocomplete
      label="Search Star Wars Characters"
      items={list.items}
      inputValue={list.filterText}
      onInputChange={list.setFilterText}>
      {(item) => <Item key={item.name}>{item.name}</Item>}
    </SearchAutocomplete>
  );
}

----------------------------------------

TITLE: Using Test IDs with React Spectrum Components
DESCRIPTION: This example shows how to add data-testid attributes to React Spectrum components and query them in tests, which is useful when you need to target specific instances of components that can't be easily identified by their semantic roles or text content.

LANGUAGE: tsx
CODE:
import {render} from '@testing-library/react';
import {TextField} from '@react-spectrum/textfield';

function LoginForm() {
  return (
    <>
      <TextField label="Username" data-testid="username" />
      <TextField label="Password" data-testid="password" />
    </>
  );
}

let tree = render(<LoginForm />);
let username = tree.getByTestId('username');
let password = tree.getByTestId('password');

----------------------------------------

TITLE: Implementing a Dynamic Data Table with React Aria Components
DESCRIPTION: Creates a reusable FileTable component that renders data from dynamic collections. Both columns and rows are provided via data arrays, demonstrating how to integrate external data sources with the Table component.

LANGUAGE: tsx
CODE:
import type {TableProps} from 'react-aria-components';

function FileTable(props: TableProps) {
  let columns = [
    {name: 'Name', id: 'name', isRowHeader: true},
    {name: 'Type', id: 'type'},
    {name: 'Date Modified', id: 'date'}
  ];

  let rows = [
    {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},
    {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},
    {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},
    {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}
  ];

  return (
    <Table aria-label="Files" {...props}>
      <MyTableHeader columns={columns}>
        {column => (
          <Column isRowHeader={column.isRowHeader}>
            {column.name}
          </Column>
        )}
      </MyTableHeader>
      <TableBody items={rows}>
        {item => (
          <MyRow columns={columns}>
            {column => <Cell>{item[column.id]}</Cell>}
          </MyRow>
        )}
      </TableBody>
    </Table>
  );
}

----------------------------------------

TITLE: Implementing Custom Validation Logic in React Spectrum Forms
DESCRIPTION: This snippet demonstrates how to implement custom validation using the validate prop, which receives the current field value and returns an error message when the validation fails. In this case, it prevents using 'admin' as a username.

LANGUAGE: tsx
CODE:
<Form validationBehavior="native" maxWidth="size-3000">
  <TextField
    label="Username"
    /*- begin highlight -*/
    validate={value => value === 'admin' ? 'Nice try!' : null}
    /*- end highlight -*/
  />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Creating a Custom Column Component with Sort Indicators
DESCRIPTION: Shows how to create a reusable Column component with sort indicators. The component displays an upwards arrow when sorted in ascending order and a downward arrow otherwise, enhancing the visual feedback for sorted columns.

LANGUAGE: tsx
CODE:
import type {ColumnProps} from 'react-aria-components';

export function MyColumn(props: ColumnProps) {
  return (
    <Column {...props}>
      {({allowsSorting, sortDirection}) => <>
        {props.children}
        {allowsSorting && (
          <span aria-hidden="true" className="sort-indicator">
            {sortDirection === 'ascending' ? '▲' : '▼'}
          </span>
        )}
      </>}
    </Column>
  );
}

----------------------------------------

TITLE: Building a Select Component with React Aria
DESCRIPTION: Example of how to compose React Aria components to build a custom Select component. It demonstrates the compositional API where each component maps to a DOM element, making styling and layout control straightforward.

LANGUAGE: tsx
CODE:
import {Select, SelectValue, Label, Button, Popover, ListBox, ListBoxItem} from 'react-aria-components';

<Select>
  <Label>Favorite Animal</Label>
  <Button>
    <SelectValue />
    <span aria-hidden="true">▼</span>
  </Button>
  <Popover>
    <ListBox>
      <ListBoxItem>Cat</ListBoxItem>
      <ListBoxItem>Dog</ListBoxItem>
      <ListBoxItem>Kangaroo</ListBoxItem>
    </ListBox>
  </Popover>
</Select>

----------------------------------------

TITLE: Implementing a Fully Controlled ComboBox in React
DESCRIPTION: This example demonstrates how to implement a fully controlled ComboBox component with separate state management for inputValue and selectedKey. It includes handlers for updating state on selection and input changes.

LANGUAGE: tsx
CODE:
function ControlledComboBox() {
  let options = [
    {id: 1, name: 'Aerospace'},
    {id: 2, name: 'Mechanical'},
    {id: 3, name: 'Civil'},
    {id: 4, name: 'Biomedical'},
    {id: 5, name: 'Nuclear'},
    {id: 6, name: 'Industrial'},
    {id: 7, name: 'Chemical'},
    {id: 8, name: 'Agricultural'},
    {id: 9, name: 'Electrical'}
  ];

  let [fieldState, setFieldState] = React.useState({
    selectedKey: null,
    inputValue: ''
  });

  let onSelectionChange = (id: Key) => {
    setFieldState({
      inputValue: options.find(o => o.id === id)?.name ?? '',
      selectedKey: id
    });
  };

  let onInputChange = (value: string) => {
    setFieldState(prevState => ({
      inputValue: value,
      selectedKey: value === '' ? null : prevState.selectedKey
    }));
  };

  return (
     <>
      <p>Current selected major id: {fieldState.selectedKey}</p>
      <p>Current input text: {fieldState.inputValue}</p>
       <MyComboBox
        label="Pick a engineering major"
        defaultItems={options}
        selectedKey={fieldState.selectedKey}
        inputValue={fieldState.inputValue}
        onSelectionChange={onSelectionChange}
        onInputChange={onInputChange}>
        {item => <ListBoxItem>{item.name}</ListBoxItem>}
      </MyComboBox>
     </>
  );
}

----------------------------------------

TITLE: Creating a Custom Render Function with Provider Wrapper
DESCRIPTION: This code creates a custom render function that automatically wraps components in a React Spectrum Provider, solving common testing errors related to missing Provider context. It extends the standard React Testing Library render function.

LANGUAGE: tsx
CODE:
import {RenderOptions as BaseRenderOptions, render} from '@testing-library/react';
import {Provider, defaultTheme} from '@adobe/react-spectrum';
import React, {ReactElement} from 'react';

// export everything from React Testing Library
export * from '@testing-library/react';

function ProviderWrapper(props) {
  let {children, ...providerProps} = props;
  return (
    <Provider theme={defaultTheme} scale="medium" {...providerProps}>
      {props.children}
    </Provider>
  );
}

interface RenderOptions extends BaseRenderOptions {
  providerProps: Omit<ProviderProps, 'children'>
}

function customRender(ui: ReactElement, options?: RenderOptions) {
  let rendered = render(ui, {wrapper: (props) => <ProviderWrapper {...props} {...options?.providerProps} />, ...options});
  return {
    ...rendered,
    rerender: (ui, options) => providerWrapperRender(ui, {container: rendered.container, ...options})
  };
}

// override render method
export {customRender as render};

----------------------------------------

TITLE: Referencing the @react-aria/dialog Package in Markdown
DESCRIPTION: A simple markdown header referencing the @react-aria/dialog package, which is part of the react-spectrum library. This header serves as documentation for the package.

LANGUAGE: markdown
CODE:
# @react-aria/dialog

----------------------------------------

TITLE: Managing Hierarchical Data with useTreeData Hook
DESCRIPTION: Shows how to use the useTreeData hook from @react-stately/data to manage hierarchical data for sections. Includes an example of appending a new item to a specific section.

LANGUAGE: tsx
CODE:
import {useTreeData} from '@react-stately/data';

let tree = useTreeData({
  initialItems: [
    {
      name: 'People',
      items: [
        {name: 'David'},
        {name: 'Sam'},
        {name: 'Jane'}
      ]
    },
    {
      name: 'Animals',
      items: [
        {name: 'Aardvark'},
        {name: 'Kangaroo'},
        {name: 'Snake'}
      ]
    }
  ],
  getKey: item => item.name,
  getChildren: item => item.items
});

function addPerson(name) {
  tree.append('People', {name});
}

<ListBox items={tree.items}>
  {node =>
    <Section title={node.value.name} items={node.children}>
      {node => <Item>{node.value.name}</Item>}
    </Section>
  }
</ListBox>

----------------------------------------

TITLE: Implementing Swipeable List Item with Framer Motion in React
DESCRIPTION: This component renders a list item that can be swiped horizontally to reveal a delete button. It supports multiple interaction modes including dragging, selection, and keyboard focus. When dragged past a threshold, it automatically triggers the delete action.

LANGUAGE: JSX
CODE:
// Take item out of the flow if it is being removed.
style={{ position: isPresent ? "relative" : "absolute" }}
>
  {/* @ts-ignore - Framer Motion's types don't handle functions properly. */}
  {({ selectionMode, isSelected }) => (
    // Content of the item can be swiped to reveal the delete button, or fully swiped to delete.
    <motion.div
      ref={ref}
      style={{ x, "--x": xPx } as CSSProperties}
      className="flex items-center"
      drag={selectionMode === "none" ? "x" : undefined}
      dragConstraints={{ right: 0 }}
      onDragEnd={(e, { offset }) => {
        // If the user dragged past 80% of the width, remove the item
        // otherwise animate back to the nearest snap point.
        let v = offset.x > -20 ? 0 : -100;
        if (x.get() < -ref.current.offsetWidth * 0.8) {
          v = -ref.current.offsetWidth;
          onRemove();
        }
        animate(x, v, { ...inertiaTransition, min: v, max: v });
      }}
      onDragStart={() => {
        // Cancel react-aria press event when dragging starts.
        document.dispatchEvent(new PointerEvent("pointercancel"));
      }}
    >
      {selectionMode === "multiple" && (
        <SelectionCheckmark isSelected={isSelected} />
      )}
      <motion.div
        layout
        layoutDependency={selectionMode}
        transition={{ duration: 0.25 }}
        className="relative flex items-center px-4 py-2 z-10"
      >
        {children}
      </motion.div>
      {selectionMode === "none" && (
        <Button
          className="bg-red-600 pressed:bg-red-700 cursor-default text-lg outline-hidden border-none transition-colors text-white flex items-center absolute top-0 left-[100%] py-2 h-full z-0 isolate focus-visible:outline focus-visible:outline-blue-600 focus-visible:-outline-offset-2"
          style={{
            // Calculate the size of the button based on the drag position,
            // which is stored in a CSS variable above.
            width: "max(100px, calc(-1 * var(--x)))",
            justifyContent: align
          }}
          onPress={onRemove}
          // Move the button into view when it is focused with the keyboard
          // (e.g. via the arrow keys).
          onFocus={() => x.set(-100)}
          onBlur={() => x.set(0)}
        >
          <motion.span
            initial={false}
            className="px-4"
            animate={{
              // Whenever the alignment changes, perform a keyframe animation
              // between the previous position and new position. This is done
              // by calculating a transform for the previous alignment and
              // animating it back to zero.
              transform:
                align === "start"
                  ? ["translateX(calc(-100% - var(--x)))", "translateX(0)"]
                  : ["translateX(calc(100% + var(--x)))", "translateX(0)"]
            }}
          >
            Delete
          </motion.span>
        </Button>
      )}
    </motion.div>
  )}
</MotionItem>
);

----------------------------------------

TITLE: Configuring Column Alignment in React Spectrum TableView
DESCRIPTION: Example showing how to align columns differently (start, center, end) in a TableView component to control text positioning within cells.

LANGUAGE: tsx
CODE:
<TableView aria-label="Example table for column alignment">
  <TableHeader>
    <Column align="start">Name</Column>
    <Column align="center">Type</Column>
    <Column align="end">Size</Column>
  </TableHeader>
  <TableBody>
    <Row>
      <Cell>2021406_Proposal</Cell>
      <Cell>PDF</Cell>
      <Cell>86 KB</Cell>
    </Row>
    <Row>
      <Cell>Budget Template</Cell>
      <Cell>XLS</Cell>
      <Cell>120 KB</Cell>
    </Row>
    <Row>
      <Cell>Onboarding</Cell>
      <Cell>PPT</Cell>
      <Cell>472 KB</Cell>
    </Row>
    <Row>
      <Cell>Welcome</Cell>
      <Cell>TXT</Cell>
      <Cell>24 KB</Cell>
    </Row>
  </TableBody>
</TableView>

----------------------------------------

TITLE: Importing Tailwind CSS for Command Palette
DESCRIPTION: Imports the Tailwind CSS global styles needed for styling the command palette component.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Creating a Reusable DatePicker Component in React
DESCRIPTION: This example demonstrates how to create a reusable DatePicker component in React that wraps the base DatePicker and its child components. It accepts props for labels, descriptions, and error messages, and handles proper composition of the underlying components.

LANGUAGE: tsx
CODE:
import type {DatePickerProps, DateValue, ValidationResult} from 'react-aria-components';
import {Text, FieldError} from 'react-aria-components';

interface MyDatePickerProps<T extends DateValue> extends DatePickerProps<T> {
  label?: string,
  description?: string,
  errorMessage?: string | ((validation: ValidationResult) => string)
}

function MyDatePicker<T extends DateValue>({label, description, errorMessage, firstDayOfWeek, ...props}: MyDatePickerProps<T>) {
  return (
    <DatePicker {...props}>
      <Label>{label}</Label>
      <Group>
        <DateInput>
          {segment => <DateSegment segment={segment} />}
        </DateInput>
        <Button>▼</Button>
      </Group>
      {description && <Text slot="description">{description}</Text>}
      <FieldError>{errorMessage}</FieldError>
      <Popover>
        <Dialog>
          <Calendar firstDayOfWeek={firstDayOfWeek}>
            <header>
              <Button slot="previous">◀</Button>
              <Heading />
              <Button slot="next">▶</Button>
            </header>
            <CalendarGrid>
              {date => <CalendarCell date={date} />}
            </CalendarGrid>
          </Calendar>
        </Dialog>
      </Popover>
    </DatePicker>

  );
}

<MyDatePicker label="Event date" />

----------------------------------------

TITLE: Dynamic Styling with Function-based className
DESCRIPTION: Example of using a function for the className prop to dynamically apply styles based on component state.

LANGUAGE: jsx
CODE:
<ColorThumb className={({isDragging}) => isDragging ? 'scale-150' : 'scale-100'} />

----------------------------------------

TITLE: Implementing Client-Side Sorting in React Spectrum Table with useAsyncList
DESCRIPTION: This example demonstrates how to implement sorting in a Table component using useAsyncList hook. It fetches Star Wars character data and allows sorting by different columns (name, height, mass, birth year) when the user clicks column headers.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Character {
  name: string,
  height: number,
  mass: number,
  birth_year: number
}

function AsyncSortTable() {
  let list = useAsyncList<Character>({
    async load({signal}) {
      let res = await fetch(`https://swapi.py4e.com/api/people/?search`, {signal});
      let json = await res.json();
      return {
        items: json.results
      };
    },
    async sort({items, sortDescriptor}) {
      return {
        items: items.sort((a, b) => {
          let first = a[sortDescriptor.column];
          let second = b[sortDescriptor.column];
          let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1;
          if (sortDescriptor.direction === 'descending') {
            cmp *= -1;
          }
          return cmp;
        })
      };
    }
  });

  return (
    <Table aria-label="Example table with client side sorting" sortDescriptor={list.sortDescriptor} onSortChange={list.sort}>
      <TableHeader>
        <Column key="name" allowsSorting>Name</Column>
        <Column key="height" allowsSorting>Height</Column>
        <Column key="mass" allowsSorting>Mass</Column>
        <Column key="birth_year" allowsSorting>Birth Year</Column>
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row key={item.name}>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </Table>
  );
}

----------------------------------------

TITLE: Implementing an Async Image Gallery with ListBox in React
DESCRIPTION: A complete example of an async-loaded image gallery with selectable items built using React Aria Components. It features grid layout, selection highlighting, loading states, and accessible UI.

LANGUAGE: tsx
CODE:
import {ListBox, ListBoxItem, Text, ProgressBar} from 'react-aria-components';
import {useAsyncList} from 'react-stately';
import CheckCircleIcon from '@spectrum-icons/workflow/CheckmarkCircle';

type Item = {
  user: { name: string },
  urls: { regular: string },
  alt_description: string
};

function ImageGridExample() {
  let list = useAsyncList<Item, number>({
    async load({ signal, cursor }) {
      let page = cursor || 1;
      let res = await fetch(
        `https://api.unsplash.com/photos?page=${page}&per_page=25&client_id=AJuU-FPh11hn7RuumUllp4ppT8kgiLS7LtOHp_sp4nc`,
        { signal }
      );
      let items = await res.json();
      return { items, cursor: page + 1 };
    }
  });

  let renderEmptyState = () => {
    if (list.isLoading) {
      return <ProgressCircle />;
    }
  };

  return (
    <div className="bg-linear-to-r from-sky-500 to-teal-500 p-2 sm:p-8 rounded-lg flex justify-center">
      <ListBox aria-label="Images" items={list.items} selectionMode="multiple" layout="grid" renderEmptyState={renderEmptyState} className="overflow-auto outline-hidden bg-white rounded-lg shadow-sm p-2 h-[350px] w-full max-w-[372px] grid grid-cols-3 gap-3 empty:flex">
        {item => (
          <ListBoxItem textValue={item.user.name} className="relative rounded-sm outline-hidden group cursor-default">
            <img src={item.urls.regular} alt={item.alt_description} className="h-[80px] w-full object-cover rounded-sm group-selected:ring-2 group-focus-visible:ring-4 group-selected:group-focus-visible:ring-4 ring-offset-2 ring-sky-600" />
            <Text slot="label" className="text-[11px] text-gray-700 font-semibold overflow-hidden text-ellipsis whitespace-nowrap max-w-full block mt-1">{item.user.name}</Text>
            <div className="absolute top-2 left-2 text-sky-800 rounded-full leading-0 bg-white border border-white border-solid hidden group-selected:block">
              <CheckCircleIcon size="S" />
            </div>
          </ListBoxItem>
        )}
      </ListBox>
    </div>
  );
}

function ProgressCircle() {
  return (
    <ProgressBar aria-label="Loading…" isIndeterminate className="flex items-center justify-center w-full">
      <svg className="animate-spin h-5 w-5 text-sky-800" fill="none" viewBox="0 0 24 24">
        <circle className="opacity-25 stroke-current stroke-[4px]" cx="12" cy="12" r="10" />
        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </ProgressBar>
  );
}

----------------------------------------

TITLE: Basic ToggleButton Implementation in React Aria Components
DESCRIPTION: A minimal example showing how to implement a ToggleButton component from React Aria Components.

LANGUAGE: tsx
CODE:
import {ToggleButton} from 'react-aria-components';

<ToggleButton>Pin</ToggleButton>

----------------------------------------

TITLE: Implementing a Draggable Component with React Aria
DESCRIPTION: Creates a draggable component using the useDrag hook. The component allows users to drag text content and supports custom data formats. It provides visual feedback during dragging by applying a 'dragging' class.

LANGUAGE: tsx
CODE:
import {useDrag} from '@react-aria/dnd';
import {mergeProps} from '@react-aria/utils';
import {useButton} from '@react-aria/button';

function Draggable({children}) {
  let {dragProps, dragButtonProps, isDragging} = useDrag({
    getAllowedDropOperations: () => ['copy'],
    getItems() {
      return [{
        'text/plain': children,
        'my-app-custom-type': JSON.stringify({message: children})
      }];
    }
  });

  let ref = React.useRef(null);
  let {buttonProps} = useButton({...dragButtonProps, elementType: 'div'}, ref);

  return (
    <div {...mergeProps(dragProps, buttonProps)} ref={ref} className={`draggable ${isDragging ? 'dragging' : ''}`}>
      <span aria-hidden="true">≡</span>{' '}
      {children}
    </div>
  );
}

LANGUAGE: css
CODE:
.draggable {
  display: inline-block;
  vertical-align: top;
  border: 1px solid gray;
  padding: 5px 10px;
  margin-right: 20px;
}

.draggable.dragging {
  opacity: 0.5;
}

----------------------------------------

TITLE: Import and Export Layout Component for Documentation
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export for use in documentation.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Tailwind CSS Configuration for Animation in v4
DESCRIPTION: CSS import statements for Tailwind v4 that include the necessary plugins for React Aria Components and animations used in the command palette.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";
@plugin "tailwindcss-animate";

----------------------------------------

TITLE: Using Context to Synchronize ColorSwatchPicker with ColorField
DESCRIPTION: Advanced example demonstrating how to use ColorSwatchPickerContext to synchronize the state between a ColorSwatchPicker and a ColorField component.

LANGUAGE: tsx
CODE:
import {ColorSwatchPickerContext} from 'react-aria-components';
import {MyColorField} from './ColorField';

function ColorSelector({children}) {
  let [value, setValue] = React.useState(parseColor('#A00'));
  return (
    <div style={{display: 'flex', flexDirection: 'column', gap: 8}}>
      <MyColorField label="Color" value={value} onChange={setValue} />
      <ColorSwatchPickerContext.Provider value={{value, onChange: setValue}}>
        {children}
      </ColorSwatchPickerContext.Provider>
    </div>
  );
}

<ColorSelector>
  <MyColorSwatchPicker>
    <MyColorSwatchPickerItem color="#A00" />
    <MyColorSwatchPickerItem color="#f80" />
    <MyColorSwatchPickerItem color="#080" />
  </MyColorSwatchPicker>
</ColorSelector>

----------------------------------------

TITLE: Implementing a Table with Sortable and Resizable Columns in React Spectrum
DESCRIPTION: This example demonstrates how to use the ResizableTableColumn component to create a table that supports both sorting and resizing columns through a dropdown menu. It includes state management for the sort descriptor and applies sorting to the items array.

LANGUAGE: tsx
CODE:
import type {SortDescriptor} from 'react-aria-components';

function Example() {
  let [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>({
    column: 'file',
    direction: 'ascending'
  });

  let items = [
    // ...
    ///- begin collapse -////
    {
      id: 1,
      file: '2022-Roadmap-Proposal-Revision-012822-Copy(2)',
      size: '214 KB',
      date: 'November 27, 2022 at 4:56PM'
    },
    {
      id: 2,
      file: '62259692_p0_master1200',
      size: '120 KB',
      date: 'January 27, 2021 at 1:56AM'
    }
    ///- end collapse -///
  ].sort((a, b) => {
    let d = a[sortDescriptor.column].localeCompare(b[sortDescriptor.column]);
    return sortDescriptor.direction === 'descending' ? -d : d;
  });

  return (
    <ResizableTableContainer>
      <Table aria-label="Table with resizable columns" sortDescriptor={sortDescriptor} onSortChange={setSortDescriptor}>
        <TableHeader>
          <ResizableTableColumn id="file" isRowHeader allowsSorting>File Name</ResizableTableColumn>
          <ResizableTableColumn id="size" allowsSorting>Size</ResizableTableColumn>
          <ResizableTableColumn id="date" allowsSorting>Date Modified</ResizableTableColumn>
        </TableHeader>
        <TableBody items={items}>
          {item => (
            <Row>
              <Cell>{item.file}</Cell>
              <Cell>{item.size}</Cell>
              <Cell>{item.date}</Cell>
            </Row>
          )}
        </TableBody>
      </Table>
    </ResizableTableContainer>
  );
}

----------------------------------------

TITLE: Implementing Custom Option Menu Trigger with React Aria Hooks
DESCRIPTION: Creates a custom OptionMenuTrigger component that intercepts keyboard and press events so the menu only opens when users hold the Alt key. This allows a button to have a default action with additional options for power users.

LANGUAGE: tsx
CODE:
import {ButtonContext, OverlayTriggerStateContext, PopoverContext, MenuContext, Provider} from 'react-aria-components';
import {useMenuTriggerState} from 'react-stately';
import {useMenuTrigger} from 'react-aria';

function OptionMenuTrigger(props: MenuTriggerProps) {
  let state = useMenuTriggerState(props);
  let ref = React.useRef(null);
  let {menuTriggerProps, menuProps} = useMenuTrigger(props, state, ref);

  return (
    // Provider is a utility that renders multiple context providers without nesting.
    <Provider
      values={[
        [ButtonContext, {
          ...menuTriggerProps,
          // Intercept events and only forward to useMenuTrigger if alt key is held.
          onPressStart: e => e.altKey && menuTriggerProps.onPressStart(e),
          onPress: e => (e.pointerType !== 'mouse' || e.altKey) && menuTriggerProps.onPress(e),
          onKeyDown: e => e.altKey && menuTriggerProps.onKeyDown(e),
          ref,
          isPressed: state.isOpen
        }],
        [OverlayTriggerStateContext, state],
        [PopoverContext, {triggerRef: ref, placement: 'bottom start'}],
        [MenuContext, menuProps]
      ]}>
      {props.children}
    </Provider>
  );
}

----------------------------------------

TITLE: Using routerOptions with Link Components in React Spectrum
DESCRIPTION: An example of passing router-specific options to a link component using the routerOptions prop. This allows for controlling router behaviors like replacing history entries instead of pushing new ones.

LANGUAGE: tsx
CODE:
<Item href="/login" routerOptions={{replace: true}}>{/* ...*/}</Item>

----------------------------------------

TITLE: Implementing a ComboBox Component with React Aria
DESCRIPTION: Creates a ComboBox component using React Aria hooks for accessibility. This component combines an input field with a dropdown list, featuring text filtering and keyboard navigation support. It requires dependencies from React Aria and React Stately libraries.

LANGUAGE: tsx
CODE:
import {Item} from '@react-stately/collections';
import {useButton} from '@react-aria/button';
import {useComboBoxState} from '@react-stately/combobox'
import {useComboBox} from '@react-aria/combobox';
import {useFilter} from '@react-aria/i18n';

// Reuse the ListBox, Popover, and Button from your component library. See below for details.
import {ListBox, Popover, Button} from 'your-component-library';

function ComboBox(props) {
  // Setup filter function and state.
  let {contains} = useFilter({sensitivity: 'base'});
  let state = useComboBoxState({...props, defaultFilter: contains});

  // Setup refs and get props for child elements.
  let buttonRef = React.useRef(null);
  let inputRef = React.useRef(null);
  let listBoxRef = React.useRef(null);
  let popoverRef = React.useRef(null);

  let {buttonProps, inputProps, listBoxProps, labelProps} = useComboBox(
    {
      ...props,
      inputRef,
      buttonRef,
      listBoxRef,
      popoverRef,
    },
    state
  );

  return (
    <div style={{display: 'inline-flex', flexDirection: 'column'}}>
      <label {...labelProps}>{props.label}</label>
      <div>
        <input
          {...inputProps}
          ref={inputRef}
          style={{
            height: 24,
            boxSizing: 'border-box',
            marginRight: 0,
            fontSize: 16
          }} />
        <Button
          {...buttonProps}
          buttonRef={buttonRef}
          style={{
            height: 24,
            marginLeft: 0
          }}>
          <span
            aria-hidden="true"
            style={{padding: '0 2px'}}>
            ▼
          </span>
        </Button>
        {state.isOpen &&
          <Popover state={state} triggerRef={inputRef} popoverRef={popoverRef} isNonModal placement="bottom start">
            <ListBox
              {...listBoxProps}
              listBoxRef={listBoxRef}
              state={state} />
          </Popover>
        }
      </div>
    </div>
  );
}

<ComboBox label="Favorite Animal">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Creating a Custom Label with useContextProps
DESCRIPTION: Implementation of a custom label component that uses useContextProps to merge local props with those provided via LabelContext, making it compatible with React Aria Components.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef(
  (props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
    // Merge the local props and ref with the ones provided via context.
    [props, ref] = useContextProps(props, ref, LabelContext);

    // ... your existing Label component
    return <label {...props} ref={ref} />;
  }
);

----------------------------------------

TITLE: Implementing Section-Level Selection in Menu
DESCRIPTION: Example showing how to implement independent selection states for each section in a menu. Each MenuSection can have its own selectionMode, selectedKeys, and onSelectionChange handler.

LANGUAGE: tsx
CODE:
function Example() {
  let [style, setStyle] = React.useState<Selection>(new Set(['bold']));
  let [align, setAlign] = React.useState<Selection>(new Set(['left']));
  return (
    <MyMenuButton label="Edit">
      <MenuSection>
        <Header>Actions</Header>
        <MenuItem>Cut</MenuItem>
        <MenuItem>Copy</MenuItem>
        <MenuItem>Paste</MenuItem>
      </MenuSection>
      <MenuSection selectionMode="multiple" selectedKeys={style} onSelectionChange={setStyle}>
        <Header>Text style</Header>
        <MenuItem id="bold">Bold</MenuItem>
        <MenuItem id="italic">Italic</MenuItem>
        <MenuItem id="underline">Underline</MenuItem>
      </MenuSection>
      <MenuSection selectionMode="single" selectedKeys={align} onSelectionChange={setAlign}>
        <Header>Text alignment</Header>
        <MenuItem id="left">Left</MenuItem>
        <MenuItem id="center">Center</MenuItem>
        <MenuItem id="right">Right</MenuItem>
      </MenuSection>
    </MyMenuButton>
  );
}

----------------------------------------

TITLE: Implementing Basic Modal Dialog in React Aria Components
DESCRIPTION: Basic example of using Modal and Dialog components to create a sign-up form in a modal dialog, triggered by a button.

LANGUAGE: tsx
CODE:
import {DialogTrigger, Modal, Dialog, Button, Heading, TextField, Label, Input} from 'react-aria-components';

<DialogTrigger>
  <Button>Sign up…</Button>
  <Modal>
    <Dialog>
      <form>
        <Heading slot="title">Sign up</Heading>
        <TextField autoFocus>
          <Label>First Name: </Label>
          <Input />
        </TextField>
        <TextField>
          <Label>Last Name: </Label>
          <Input />
        </TextField>
        <Button slot="close">
          Submit
        </Button>
      </form>
    </Dialog>
  </Modal>
</DialogTrigger>

----------------------------------------

TITLE: Implementing a React Spectrum ComboBox Component Using Hooks-Based Architecture
DESCRIPTION: This example demonstrates how to structure a ComboBox component using the proposed architecture with separate hooks for state management (@react-state/autocomplete) and behavior (@react-aria/combo-box). The component itself remains small and mostly stateless while rendering the DOM structure required by the Spectrum theme.

LANGUAGE: jsx
CODE:
import {useAutocomplete} from '@react-state/autocomplete';
import {useComboBox} from '@react-aria/combo-box';
import {Textfield} from '@react-spectrum/textfield';
import {Button} from '@react-spectrum/button';
import {AutocompleteMenu} from '@react-spectrum/autocomplete';

function ComboBox(props) {
  let autocomplete = useAutocomplete(props);
  let {
    wrapperProps,
    textfieldProps,
    buttonProps,
    menuProps
  } = useComboBox(props, autocomplete);
  
  return (
    <div {...wrapperProps} className="spectrum-InputGroup">
      <Textfield
        {...textfieldProps}
        className="spectrum-InputGroup-field" />
      <Button
        {...buttonProps}
        variant="field" />
      <AutocompleteMenu
        {...menuProps} />
    </div>
  );
}

----------------------------------------

TITLE: Setting Up Basic React Spectrum Application
DESCRIPTION: Example showing how to initialize a React Spectrum application using Provider with a theme and a basic Button component. Demonstrates the minimal required setup for React Spectrum components.

LANGUAGE: tsx
CODE:
import {Provider} from '@react-spectrum/provider';
import {theme} from '@react-spectrum/theme-default';
import {Button} from '@react-spectrum/button';

function App() {
  return (
    <Provider theme={theme}>
      <Button
        variant="accent"
        onPress={() => alert('Hey there!')}>
        Hello React Spectrum!
      </Button>
    </Provider>
  );
}

----------------------------------------

TITLE: Implementing Pending Button with Delayed Visual Feedback in React
DESCRIPTION: This example shows how to create a button with a pending state that includes a delayed visual spinner while maintaining accessibility. It demonstrates how to keep the button content in the DOM while providing visual feedback to users.

LANGUAGE: tsx
CODE:
function PendingDelayed(props) {
  let [isPending, setPending] = useState(false);

  let handlePress = (e) => {
    setPending(true);
    setTimeout(() => {
      setPending(false);
    }, 5000);
  };

  return (
    <Button
      {...props}
      isPending={isPending}
      onPress={handlePress}
      style={{position: 'relative'}}>
        {({isPending}) => (
          <>
            <span className={isPending ? 'pending' : undefined}>Save</span>
            {isPending && (
              <MyProgressCircle aria-label="in progress" isIndeterminate className="spinner" />
            )}
          </>
        )}
    </Button>
  );
}

LANGUAGE: css
CODE:
@keyframes toggle {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

.spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  animation: toggle 1s steps(1);
  opacity: 1;
}

.pending {
  animation: toggle 1s reverse steps(1, jump-start);
  opacity: 0;
}

----------------------------------------

TITLE: Handling Unavailable Dates in DateRangePicker
DESCRIPTION: Example showing how to mark certain dates as unavailable in the DateRangePicker component using the isDateUnavailable callback and implementing validation to prevent selection of ranges containing unavailable dates.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

function Example() {
  let now = today(getLocalTimeZone());
  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  let isDateUnavailable = (date) => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);
  let [value, setValue] = React.useState(null);
  let isInvalid = value && disabledRanges.some(interval => value.end.compare(interval[0]) >= 0 && value.start.compare(interval[1]) <= 0);

  return (
    <DateRangePicker
      label="Trip dates"
      minValue={today(getLocalTimeZone())}
      isDateUnavailable={isDateUnavailable}
      value={value}
      onChange={setValue}
      isInvalid={isInvalid} />
  );
}

----------------------------------------

TITLE: Implementing Static Sections in a ListBox
DESCRIPTION: This example shows how to create a ListBox with statically defined sections using the Section component from @react-stately/collections. Each section has a title and contains grouped items.

LANGUAGE: tsx
CODE:
import {Section} from '@react-stately/collections';

<ListBox label="Choose sandwich contents" selectionMode="multiple">
  <Section title="Veggies">
    <Item key="lettuce">Lettuce</Item>
    <Item key="tomato">Tomato</Item>
    <Item key="onion">Onion</Item>
  </Section>
  <Section title="Protein">
    <Item key="ham">Ham</Item>
    <Item key="tuna">Tuna</Item>
    <Item key="tofu">Tofu</Item>
  </Section>
  <Section title="Condiments">
    <Item key="mayo">Mayonaise</Item>
    <Item key="mustard">Mustard</Item>
    <Item key="ranch">Ranch</Item>
  </Section>
</ListBox>

----------------------------------------

TITLE: Implementing Asynchronous Data Loading in ListBox
DESCRIPTION: This example demonstrates how to use the useAsyncList hook to load data asynchronously from an API (Pokémon API) and display it in a ListBox component. The data fetching happens when the component mounts.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Pokemon {
  name: string
}

function AsyncLoadingExample() {
  let list = useAsyncList<Pokemon>({
    async load({signal}) {
      let res = await fetch(
        `https://pokeapi.co/api/v2/pokemon`,
        {signal}
      );
      let json = await res.json();

      return {
        items: json.results
      };
    }
  });

  return (
    <ListBox label="Pick a Pokemon" items={list.items} selectionMode="single">
      {(item) => <Item key={item.name}>{item.name}</Item>}
    </ListBox>
  );
}

----------------------------------------

TITLE: Implementing a Single Thumb Slider Component in React with useSlider
DESCRIPTION: This code demonstrates how to build an accessible single-thumb slider with React Aria's useSlider hook. It includes proper ARIA attributes, keyboard navigation, and visual feedback using the useFocusRing hook.

LANGUAGE: tsx
CODE:
import {useSlider, useSliderThumb} from '@react-aria/slider';
import {useSliderState} from '@react-stately/slider';
import {useFocusRing} from '@react-aria/focus';
import {VisuallyHidden} from '@react-aria/visually-hidden';
import {mergeProps} from '@react-aria/utils';
import {useNumberFormatter} from '@react-aria/i18n';

function Slider(props) {
  let trackRef = React.useRef(null);
  let numberFormatter = useNumberFormatter(props.formatOptions);
  let state = useSliderState({...props, numberFormatter});
  let {
    groupProps,
    trackProps,
    labelProps,
    outputProps
  } = useSlider(props, state, trackRef);

  return (
    <div {...groupProps} className={`slider ${state.orientation}`}>
      {/* Create a container for the label and output element. */}
      {props.label &&
        <div className="label-container">
          <label {...labelProps}>{props.label}</label>
          <output {...outputProps}>
            {state.getThumbValueLabel(0)}
          </output>
        </div>
      }
      {/* The track element holds the visible track line and the thumb. */}
      <div {...trackProps} ref={trackRef} className={`track ${state.isDisabled ? 'disabled' : ''}`}>
        <Thumb index={0} state={state} trackRef={trackRef} name={props.name} />
      </div>
    </div>
  );
}

function Thumb(props) {
  let {state, trackRef, index, name} = props;
  let inputRef = React.useRef(null);
  let {thumbProps, inputProps, isDragging} = useSliderThumb({
    index,
    trackRef,
    inputRef,
    name
  }, state);

  let {focusProps, isFocusVisible} = useFocusRing();
  return (
    <div
      {...thumbProps}
      className={`thumb ${isFocusVisible ? 'focus' : ''} ${isDragging ? 'dragging' : ''}`}>
      <VisuallyHidden>
        <input ref={inputRef} {...mergeProps(inputProps, focusProps)} />
      </VisuallyHidden>
    </div>
  );
}

<Slider label="Opacity" />

----------------------------------------

TITLE: Implementing a Dynamic TableView with Data-Driven Content
DESCRIPTION: Advanced example showing how to create a TableView with dynamic content using data arrays. This demonstrates column alignment, column rendering functions, and row/cell generation based on data objects.

LANGUAGE: tsx
CODE:
let columns = [
  {name: 'Name', uid: 'name'},
  {name: 'Type', uid: 'type'},
  {name: 'Date Modified', uid: 'date'}
];

let rows = [
  {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},
  {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},
  {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},
  {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}
];

<TableView
  aria-label="Example table with dynamic content"
  maxWidth="size-6000">
  <TableHeader columns={columns}>
    {column => (
      <Column
        key={column.uid}
        align={column.uid === 'date' ? 'end' : 'start'}>
        {column.name}
      </Column>
    )}
  </TableHeader>
  <TableBody items={rows}>
    {item => (
      <Row>
        {columnKey => <Cell>{item[columnKey]}</Cell>}
      </Row>
    )}
  </TableBody>
</TableView>

----------------------------------------

TITLE: Creating Asynchronous Loading TableView with useAsyncList
DESCRIPTION: Example of a TableView that loads data asynchronously using the useAsyncList hook from @react-stately/data. This implementation fetches Star Wars character data and supports infinite scrolling.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Character {
  name: string,
  height: number,
  mass: number,
  birth_year: number
}

function AsyncTable() {
  let columns = [
    {name: 'Name', key: 'name'},
    {name: 'Height', key: 'height'},
    {name: 'Mass', key: 'mass'},
    {name: 'Birth Year', key: 'birth_year'}
  ];

  let list = useAsyncList<Character>({
    async load({signal, cursor}) {
      if (cursor) {
        cursor = cursor.replace(/^http:\/\//i, 'https://');
      }

      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=`, {signal});
      let json = await res.json();

      return {
        items: json.results,
        cursor: json.next
      };
    }
  });

  return (
    <TableView aria-label="example async loading table" height="size-3000">
      <TableHeader columns={columns}>
        {(column) => (
          <Column align={column.key !== 'name' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody
        items={list.items}
        loadingState={list.loadingState}
        onLoadMore={list.loadMore}>
        {(item) => (
          <Row key={item.name}>{(key) => <Cell>{item[key]}</Cell>}</Row>
        )}
      </TableBody>
    </TableView>
  );
}

----------------------------------------

TITLE: Creating a Complete Droppable ListView Component in React Spectrum
DESCRIPTION: Implements a complete droppable ListView with useDragAndDrop. This component initializes list data, configures drop operations with acceptedDragTypes, onInsert, onItemDrop handlers, and renders the ListView with special handling for folder items.

LANGUAGE: tsx
CODE:
import type {TextDropItem} from '@react-spectrum/dnd';
import Folder from '@spectrum-icons/illustrations/Folder';
import {Text} from '@react-spectrum/text';
import {useDragAndDrop} from '@react-spectrum/dnd';

function DroppableList() {
  let list = useListData({
    initialItems: [
      {id: 'f', type: 'file', name: 'Adobe AfterEffects'},
      {id: 'g', type: 'file', name: 'Adobe Illustrator'},
      {id: 'h', type: 'file', name: 'Adobe Lightroom'},
      {id: 'i', type: 'file', name: 'Adobe Premiere Pro'},
      {id: 'j', type: 'file', name: 'Adobe Fresco'},
      {id: 'k', type: 'folder', name: 'Apps',  childNodes: []}
    ]
  });

  let {dragAndDropHooks} = useDragAndDrop({
    acceptedDragTypes: ['adobe-app'],
    shouldAcceptItemDrop: (target) => !!list.getItem(target.key).childNodes,
    onInsert: async (e) => {
      let {
        items,
        target
      } = e;
      let processedItems = await Promise.all(
        items.map(async (item: TextDropItem) => JSON.parse(await item.getText('adobe-app')))
      );

      if (target.dropPosition === 'before') {
        list.insertBefore(target.key, ...processedItems);
      } else if (target.dropPosition === 'after') {
        list.insertAfter(target.key, ...processedItems);
      }
    },
    onItemDrop: async (e) => {
      let {
        items,
        target
      } = e;
      let processedItems = await Promise.all(
        items.map(async (item: TextDropItem) => JSON.parse(await item.getText('adobe-app')))
      );
      let targetItem = list.getItem(target.key);
      list.update(target.key, {...targetItem, childNodes: [...targetItem.childNodes, ...processedItems]});
    }
  });

  return (
    <ListView
      aria-label="Droppable list view example"
      width="size-3600"
      height="size-3600"
      selectionMode="multiple"
      items={list.items}
      dragAndDropHooks={dragAndDropHooks}>
      {item => (
        <Item textValue={item.name} hasChildItems={item.type === 'folder'}>
          {item.type === 'folder' && <Folder />}
          <Text>{item.name}</Text>
          {item.type === 'folder' &&
            <Text slot="description">{`contains ${item.childNodes.length} dropped item(s)`}</Text>
          }
        </Item>
      )}
    </ListView>
  );
}

----------------------------------------

TITLE: Implementing Asynchronous Loading in Autocomplete with useAsyncList
DESCRIPTION: This example demonstrates how to implement asynchronous loading in an Autocomplete component using the useAsyncList hook. It fetches Star Wars character data from an API based on the user's input and displays the results in a menu.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

function AsyncLoadingExample() {
  let list = useAsyncList<{name: string}>({
    async load({signal, filterText}) {
      let res = await fetch(
        `https://swapi.py4e.com/api/people/?search=${filterText}`,
        {signal}
      );
      let json = await res.json();

      return {
        items: json.results
      };
    }
  });

  return (
    <div className="my-autocomplete">
      <Autocomplete
        inputValue={list.filterText}
        onInputChange={list.setFilterText}>
        <MySearchField label="Star Wars Character Search" />
        <Menu items={list.items} renderEmptyState={() => 'No results found.'}>
          {(item) => <MenuItem id={item.name} href={`https://www.starwars.com/databank/${item.name.toLowerCase().replace(/\s/g, '-')}`} target="_blank">{item.name}</MenuItem>}
        </Menu>
      </Autocomplete>
    </div>
  );
}

----------------------------------------

TITLE: Form with Custom Validation Focus Management
DESCRIPTION: Example demonstrating how to override default focus behavior on validation errors to focus a custom alert element.

LANGUAGE: tsx
CODE:
function Example() {
  let [isInvalid, setInvalid] = React.useState(false);

  return (
    <Form
      onInvalid={e => {
        e.preventDefault();
        setInvalid(true);
      }}
      onSubmit={e => {
        e.preventDefault();
        setInvalid(false);
      }}
      onReset={() => setInvalid(false)}>
      {isInvalid &&
        <div role="alert" tabIndex={-1} ref={e => e?.focus()}>
          <h3>Unable to submit</h3>
          <p>Please fix the validation errors below, and re-submit the form.</p>
        </div>
      }
      <TextField name="firstName" isRequired>
        <Label>First Name</Label>
        <Input />
        <FieldError />
      </TextField>
      <TextField name="lastName" isRequired>
        <Label>Last Name</Label>
        <Input />
        <FieldError />
      </TextField>
      <div style={{display: 'flex', gap: 8}}>
        <Button type="submit">Submit</Button>
        <Button type="reset">Reset</Button>
      </div>
    </Form>
  );
}

----------------------------------------

TITLE: Implementing Multiple Selection in ListBox with React
DESCRIPTION: This example shows how to implement controlled multiple selection in a ListBox. It uses React state to track selected items and updates the selection when items are clicked, with custom IDs for each item.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-aria-components';

function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set(['cheese']));

  return (
    <>
      <ListBox
        aria-label="Sandwich contents"
        /*- begin highlight -*/
        selectionMode="multiple"
        selectedKeys={selected}
        onSelectionChange={setSelected}
        /*- end highlight -*/
      >
        <ListBoxItem id="lettuce">Lettuce</ListBoxItem>
        <ListBoxItem id="tomato">Tomato</ListBoxItem>
        <ListBoxItem id="cheese">Cheese</ListBoxItem>
        <ListBoxItem id="tuna">Tuna Salad</ListBoxItem>
        <ListBoxItem id="egg">Egg Salad</ListBoxItem>
        <ListBoxItem id="ham">Ham</ListBoxItem>
      </ListBox>
      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>
    </>
  );
}

----------------------------------------

TITLE: Keyboard Interaction Example with Navigation Keys in Menus
DESCRIPTION: Outlines how Home, End, character keys, Escape, and Tab keys should behave when navigating menu components.

LANGUAGE: markdown
CODE:
- <kbd>Home</kbd>: If arrow key wrapping is not supported, moves focus to the first item in the current <code>menu</code> or <code>menubar</code>.
- <kbd>End</kbd>: If arrow key wrapping is not supported, moves focus to the last item in the current <code>menu</code> or <code>menubar</code>.
- Any key that corresponds to a printable character (Optional): Move focus to the next menu item in the current menu whose label begins with that printable character.
- <kbd>Escape</kbd>: Close the <code>menu</code> that contains focus and return focus to the element or context, e.g., menu button or parent `menuitem`, from which the menu was opened.
- <kbd>Tab</kbd>: Moves focus to the next element in the tab sequence, and if the item that had focus is not in a <code>menubar</code>, closes its <code>menu</code> and all open parent <code>menu</code> containers.
- <kbd>Shift + Tab</kbd>: Moves focus to the previous element in the tab sequence, and if the item that had focus is not in a <code>menubar</code>, closes its <code>menu</code> and all open parent <code>menu</code> containers.

----------------------------------------

TITLE: Building ListBox and Option Components for ComboBox
DESCRIPTION: Creates ListBox and Option components for displaying the filtered list of selectable options in the ComboBox. These components manage focus, selection, and keyboard navigation for the dropdown list. They can be shared with other components like Select that need similar list functionality.

LANGUAGE: tsx
CODE:
import {useListBox, useOption} from '@react-aria/listbox';

function ListBox(props) {
  let ref = React.useRef(null);
  let {listBoxRef = ref, state} = props;
  let {listBoxProps} = useListBox(props, state, listBoxRef);

  return (
    <ul
      {...listBoxProps}
      ref={listBoxRef}
      style={{
        margin: 0,
        padding: 0,
        listStyle: "none",
        maxHeight: 150,
        overflow: "auto",
        minWidth: 200
      }}>
      {[...state.collection].map(item => (
        <Option
          key={item.key}
          item={item}
          state={state} />
      ))}
    </ul>
  );
}

function Option({item, state}) {
  let ref = React.useRef(null);
  let {optionProps, isSelected, isFocused, isDisabled} = useOption({key: item.key}, state, ref);

  let backgroundColor;
  let color = 'black';

  if (isSelected) {
    backgroundColor = 'blueviolet';
    color = 'white';
  } else if (isFocused) {
    backgroundColor = 'gray';
  } else if (isDisabled) {
    backgroundColor = 'transparent';
    color = 'gray';
  }

  return (
    <li
      {...optionProps}
      ref={ref}
      style={{
        background: backgroundColor,
        color: color,
        padding: '2px 5px',
        outline: 'none',
        cursor: 'pointer'
      }}>
      {item.rendered}
    </li>
  );
}

----------------------------------------

TITLE: Implementing a Draggable Element with useDrag Hook
DESCRIPTION: A reusable Draggable component that provides draggable content using the useDrag hook. It supports both plain text and custom data types, with visual feedback during the drag operation.

LANGUAGE: tsx
CODE:
import {useDrag} from '@react-aria/dnd';

function Draggable() {
  let {dragProps, isDragging} = useDrag({
    getItems() {
      return [{
        'text/plain': 'hello world',
        'my-app-custom-type': JSON.stringify({message: 'hello world'})
      }];
    }
  });

  return (
    <div {...dragProps} role="button" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>
      Drag me
    </div>
  );
}

----------------------------------------

TITLE: Implementing Unavailable Dates in Calendar Component with React Spectrum
DESCRIPTION: Example showing how to mark certain dates as unavailable in a Calendar component using the isDateUnavailable prop. This includes highlighting weekends and specific date ranges as unavailable, while also preventing selection of dates before today.

LANGUAGE: tsx
CODE:
import {today, isWeekend} from '@internationalized/date';
import {useLocale} from '@react-aria/i18n';

function Example() {
  let now = today(getLocalTimeZone());
  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  let {locale} = useLocale();
  let isDateUnavailable = (date) => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);

  return <Calendar aria-label="Appointment date" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />
}

----------------------------------------

TITLE: Basic Calendar Component Implementation in React Aria Components
DESCRIPTION: Example of a basic Calendar component implementation using React Aria Components. The example includes the main Calendar component with header, navigation buttons, and calendar grid.

LANGUAGE: tsx
CODE:
import {Calendar, Heading, Button, CalendarGrid, CalendarCell} from 'react-aria-components';

<Calendar aria-label="Appointment date">
  <header>
    <Button slot="previous">◀</Button>
    <Heading />
    <Button slot="next">▶</Button>
  </header>
  <CalendarGrid>
    {date => <CalendarCell date={date} />}
  </CalendarGrid>
</Calendar>

----------------------------------------

TITLE: Configuring Disabled Rows in React Spectrum ListView
DESCRIPTION: This example shows how to disable specific rows in the ListView by providing an array of keys to the disabledKeys prop. This prevents all interactions with the disabled rows by default.

LANGUAGE: tsx
CODE:
// Using the same list as above
<PokemonList disabledKeys={[3]} aria-label="ListView with disabled rows" />

----------------------------------------

TITLE: Implementing Keyboard-navigable Landmarks using useLandmark in React
DESCRIPTION: This example demonstrates how to implement navigable landmarks using the useLandmark hook. It creates Navigation, Region, and Search components that register themselves as landmarks, enabling keyboard navigation between them with F6, Shift+F6, and Alt+F6.

LANGUAGE: tsx
CODE:
import {useLandmark} from '@react-aria/landmark';
import {useRef} from 'react';

function Navigation(props) {
  let ref = useRef<HTMLElement | null>(null);
  let {landmarkProps} = useLandmark({...props, role: 'navigation'}, ref);
  return (
    <nav ref={ref} {...props} {...landmarkProps}>
      {props.children}
    </nav>
  );
}

function Region(props) {
  let ref = useRef<HTMLElement | null>(null);
  let {landmarkProps} = useLandmark({...props, role: 'region'}, ref);
  return (
    <article ref={ref} {...props} {...landmarkProps}>
      {props.children}
    </article>
  );
}

function Search(props) {
  let ref = useRef<HTMLFormElement | null>(null);
  let {landmarkProps} = useLandmark({...props, role: 'search'}, ref);
  return (
    <form ref={ref} {...props} {...landmarkProps}>
      <h2 id="search-header">Search</h2>
      <input aria-labelledby="search-header" type="search" />
    </form>
  );
}

<div>
  <Navigation>
    <h2>Navigation</h2>
    <ul>
      <li><a href="#">Link 1</a></li>
      <li><a href="#">Link 2</a></li>
    </ul>
  </Navigation>
  <Search />
  <Region aria-label="Example region">
    <h2>Region</h2>
    <p>Example region with no focusable children.</p>
  </Region>
</div>

----------------------------------------

TITLE: Creating a Custom Router with Breadcrumbs Context
DESCRIPTION: Implementation of a Router component that uses BreadcrumbsContext and LinkContext to manage navigation history and automatically update breadcrumbs based on link clicks.

LANGUAGE: tsx
CODE:
import type {PressEvent} from 'react-aria-components';
import {BreadcrumbsContext, LinkContext} from 'react-aria-components';

interface RouterItem {
  id: number,
  label: string
}

function Router({children}) {
  let [items, setItems] = React.useState<RouterItem[]>([
    {id: 0, label: 'Home'},
    {id: 1, label: 'React Aria'},
  ]);

  // Pop stack when a breadcrumb item is clicked.
  let onAction = (id: Key) => {
    let i = items.findIndex(item => item.id === id);
    setItems(items.slice(0, i + 1));
  };

  // Push stack when a link is clicked.
  let onPress = (e: PressEvent) => {
    let label = e.target.textContent;
    setItems(items.concat({id: items.length, label}));
  };

  return (
    <BreadcrumbsContext.Provider value={{items, onAction}}>
      <LinkContext.Provider value={{onPress}}>
        {children}
      </LinkContext.Provider>
    </BreadcrumbsContext.Provider>
  );
}

----------------------------------------

TITLE: Integrating React Hook Form with React Spectrum Components
DESCRIPTION: This example shows how to integrate React Hook Form with React Spectrum components. It uses the Controller component from React Hook Form to connect form state with React Spectrum's TextField component, including validation state management.

LANGUAGE: tsx
CODE:
import {useForm, Controller} from 'react-hook-form'
import {Form, TextField, Button} from '@adobe/react-spectrum';

function App() {
  let {handleSubmit, control} = useForm({
    defaultValues: {
      name: '',
    },
  });
  let onSubmit = (data) => {
    // Call your API here...
  };

  return (
    <Form onSubmit={handleSubmit(onSubmit)}>
      <Controller
        control={control}
        name="name"
        rules={{ required: 'Name is required.' }}
        render={({
          field: { name, value, onChange, onBlur, ref },
          fieldState: { invalid, error },
        }) => (
          <TextField
            label="Name"
            name={name}
            value={value}
            onChange={onChange}
            onBlur={onBlur}
            ref={ref}
            isRequired
            validationState={invalid ? 'invalid' : undefined}
            errorMessage={error?.message}
          />
        )}
      />
      <Button type="submit" variant="cta">Submit</Button>
    </Form>
  );
}

----------------------------------------

TITLE: Individual Checkbox Validation in React Spectrum
DESCRIPTION: Demonstrates how to implement required validation on individual checkboxes within a CheckboxGroup using the isRequired prop on each Checkbox component. This allows for fine-grained control over which selections are mandatory.

LANGUAGE: tsx
CODE:
<form>
  <CheckboxGroup label="Agree to the following" validationBehavior="native">
    <Checkbox value="terms" isRequired>Terms and conditions</Checkbox>
    <Checkbox value="privacy" isRequired>Privacy policy</Checkbox>
    <Checkbox value="cookies" isRequired>Cookie policy</Checkbox>
  </CheckboxGroup>
  <input type="submit" style={{marginTop: 8}} />
</form>

----------------------------------------

TITLE: CSS Styling for Table Empty State
DESCRIPTION: CSS code for styling the empty state in a table, applying text alignment and italic font style when the table has no data.

LANGUAGE: css
CODE:
.react-aria-TableBody {
  &[data-empty] {
    text-align: center;
    font-style: italic;
  }
}

----------------------------------------

TITLE: Managing DatePicker Value States in React
DESCRIPTION: This code shows how to implement both controlled and uncontrolled DatePicker components using React state. It demonstrates parsing date values from strings using the @internationalized/date package and handling state management.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState(parseDate('2020-02-03'));

  return (
    <>
      <MyDatePicker
        label="Date (uncontrolled)"
        defaultValue={parseDate('2020-02-03')} />
      <MyDatePicker
        label="Date (controlled)"
        value={value}
        onChange={setValue} />
    </>
  );
}

----------------------------------------

TITLE: Implementing Collection-Level Drop Support in ListBox
DESCRIPTION: Creates a ListBox that supports dropping items on the entire collection or specific items. It uses useDroppableCollectionState for managing drop state and implements handlers for root drops and item-specific drops with conditional acceptance.

LANGUAGE: tsx
CODE:
function ListBox(props) {
  // ...
  let isDropTarget = dropState.isDropTarget({type: 'root'});

  return (
    <ul
      {...mergeProps(listBoxProps, collectionProps)}
      ref={ref}
      className={isDropTarget ? 'drop-target' : ''}
    >
      <DropIndicator target={{type: 'root'}} dropState={dropState} />
      {[...state.collection].map((item) => (
        <Option
          key={item.key}
          item={item}
          state={state}
          dropState={dropState}
        />
      ))}
    </ul>
  );
}

<Draggable>budget.xls</Draggable>
<ListBox
  aria-label="Files"
  selectionMode="single"
  onRootDrop={() => alert('Dropped on root')}
  onItemDrop={e => alert(`Dropped on ${e.target.key}`)}
  shouldAcceptItemDrop={target => target.key === 'documents'}
>
  <Item key="documents">Documents</Item>
  <Item>proposal.doc</Item>
  <Item>presentation.ppt</Item>
</ListBox>

LANGUAGE: css
CODE:
[role=listbox].drop-target {
  box-shadow: inset 0 0 0 2px var(--blue);
}

----------------------------------------

TITLE: Basic SearchField Component Implementation in React Aria Components
DESCRIPTION: Example of a basic SearchField component implementation with Label, Input, and Button components from React Aria Components. This creates a simple search input with a clear button.

LANGUAGE: tsx
CODE:
import {SearchField, Label, Input, Button} from 'react-aria-components';

<SearchField>
  <Label>Search</Label>
  <Input />
  <Button>✕</Button>
</SearchField>

----------------------------------------

TITLE: Implementing Modal Component with useModalOverlay in React
DESCRIPTION: Creates a Modal component using useModalOverlay hook to handle accessibility, focus management, and scroll locking. The component renders content in a portal with an underlay.

LANGUAGE: tsx
CODE:
import {Overlay, useModalOverlay} from '@react-aria/overlays';

function Modal({state, children, ...props}) {
  let ref = React.useRef(null);
  let {modalProps, underlayProps} = useModalOverlay(props, state, ref);

  return (
    <Overlay>
      <div
        style={{
          position: 'fixed',
          zIndex: 100,
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          background: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'
        }}
        {...underlayProps}>
        <div
          {...modalProps}
          ref={ref}
          style={{
            background: 'var(--page-background)',
            border: '1px solid gray'
          }}>
          {children}
        </div>
      </div>
    </Overlay>
  );
}

----------------------------------------

TITLE: Creating Custom ListBox Component with React Aria Hooks
DESCRIPTION: Shows how to implement a custom ListBox component that works within ComboBox or Select patterns by leveraging context and hooks. This enables advanced customization while maintaining compatibility with the component system.

LANGUAGE: jsx
CODE:
import {ListBoxContext, useContextProps} from 'react-aria-components';
import {useListBox} from 'react-aria';

function MyListBox(props) {
  // Merge local props and ref with props from context.
  let ref = React.useRef();
  [props, ref] = useContextProps(props, ref, ListBoxContext);

  // Get state sent from ComboBox via context, and call useListBox.
  let {state} = React.useContext(ListBoxContext);
  let {listBoxProps} = useListBox(props, state, ref);

  // Render stuff
  return (
    <div {...listBoxProps}>
      {/* ... */}
    </div>
  );
}

----------------------------------------

TITLE: FileTrigger with Specific File Type Restrictions
DESCRIPTION: Example showing how to limit the file selection to specific MIME types, in this case only allowing PNG images.

LANGUAGE: tsx
CODE:
<FileTrigger acceptedFileTypes={['image/png']}>
  <Button variant="primary">Select files</Button>
</FileTrigger>

----------------------------------------

TITLE: Setting Up SSRProvider for React 16/17 Compatibility
DESCRIPTION: Demonstrates the required setup for server-side rendering with React Spectrum when using React 16 or 17. The SSRProvider component ensures proper HTML matching between server and client.

LANGUAGE: tsx
CODE:
import {SSRProvider, Provider, defaultTheme} from '@adobe/react-spectrum';

// SSRProvider is only needed if you are using React 16 or 17.
<SSRProvider>
  <Provider theme={defaultTheme} locale={yourLocaleHere}>
    <App />
  </Provider>
</SSRProvider>

----------------------------------------

TITLE: Defining Provider Component Types in TypeScript for React Spectrum
DESCRIPTION: This snippet defines TypeScript interfaces and types for the Provider component. It includes toast placement options, color scheme variants, scale options, and the full props interface that extends context properties and DOM properties.

LANGUAGE: typescript
CODE:
type ToastPlacement = 'top' | 'top left' | 'top center' | 'top right'
  | 'bottom' | 'bottom left' | 'bottom center' | 'bottom right';

export type ColorScheme = 'light' | 'dark';
export type Scale = 'medium' | 'large';

interface ContextProps {
  toastPlacement?: ToastPlacement,
  isQuiet?: boolean,
  isEmphasized?: boolean,
  isDisabled?: boolean,
  isRequired?: boolean,
  isReadOnly?: boolean
}

export interface ProviderProps extends ContextProps, DOMProps {
  children: ReactNode,
  theme?: Theme,
  colorScheme?: ColorScheme, // by default, chooses based on OS setting
  defaultColorScheme?: ColorScheme, // if no OS setting, which to choose
  scale?: Scale, // by default, chooses based on touch/mouse
  locale?: string
}

----------------------------------------

TITLE: Implementing Dynamic Nested Columns in TableView with React Spectrum
DESCRIPTION: Example of creating a TableView with dynamically defined nested columns using TypeScript interfaces. The column structure is defined as data objects with a childColumns prop, allowing for a more programmatic approach to defining complex table structures.

LANGUAGE: tsx
CODE:
interface ColumnDefinition {
  name: string,
  key: string,
  children?: ColumnDefinition[],
  isRowHeader?: boolean
}

let columns: ColumnDefinition[] = [
  {name: 'Name', key: 'name', children: [
    {name: 'First Name', key: 'first', isRowHeader: true},
    {name: 'Last Name', key: 'last', isRowHeader: true}
  ]},
  {name: 'Information', key: 'info', children: [
    {name: 'Age', key: 'age'},
    {name: 'Birthday', key: 'birthday'}
  ]}
];

let rows = [
  {id: 1, first: 'Sam', last: 'Smith', age: 36, birthday: 'May 3'},
  {id: 2, first: 'Julia', last: 'Jones', age: 24, birthday: 'February 10'},
  {id: 3, first: 'Peter', last: 'Parker', age: 28, birthday: 'September 7'},
  {id: 4, first: 'Bruce', last: 'Wayne', age: 32, birthday: 'December 18'}
];

<TableView aria-label="Example table for nested columns">
  <TableHeader columns={columns}>
    {column => (
      <Column isRowHeader={column.isRowHeader} childColumns={column.children}>
        {column.name}
      </Column>
    )}
  </TableHeader>
  <TableBody items={rows}>
    {item => (
      <Row>
        {columnKey => <Cell>{item[columnKey]}</Cell>}
      </Row>
    )}
  </TableBody>
</TableView>

----------------------------------------

TITLE: Importing useSeparator from React Aria
DESCRIPTION: Example of importing the useSeparator hook from the @react-aria/separator package.

LANGUAGE: tsx
CODE:
import {useSeparator} from '@react-aria/separator';

----------------------------------------

TITLE: Implementing a ListBox component using React Aria hooks
DESCRIPTION: This example demonstrates how to create an accessible ListBox component with useListBox and useOption hooks. It renders a list with selectable options using proper ARIA attributes and keyboard accessibility.

LANGUAGE: tsx
CODE:
import type {AriaListBoxProps} from '@react-aria/listbox';
import {useListBox, useOption} from '@react-aria/listbox';
import {useListState} from '@react-stately/list';
import {Item} from '@react-stately/collections';
import {useFocusRing} from '@react-aria/focus';
import {mergeProps} from '@react-aria/utils';

function ListBox<T extends object>(props: AriaListBoxProps<T>) {
  // Create state based on the incoming props
  let state = useListState(props);

  // Get props for the listbox element
  let ref = React.useRef(null);
  let {listBoxProps, labelProps} = useListBox(props, state, ref);

  return (
    <>
      <div {...labelProps}>{props.label}</div>
      <ul {...listBoxProps} ref={ref}>
        {[...state.collection].map(item => (
          item.type === 'section'
            ? <ListBoxSection key={item.key} section={item} state={state} />
            : <Option key={item.key} item={item} state={state} />
        ))}
      </ul>
    </>
  );
}

function Option({item, state}) {
  // Get props for the option element
  let ref = React.useRef(null);
  let {optionProps} = useOption({key: item.key}, state, ref);

  // Determine whether we should show a keyboard
  // focus ring for accessibility
  let {isFocusVisible, focusProps} = useFocusRing();

  return (
    <li
      {...mergeProps(optionProps, focusProps)}
      ref={ref}
      data-focus-visible={isFocusVisible}>
      {item.rendered}
    </li>
  );
}

<ListBox label="Alignment" selectionMode="single">
  <Item>Left</Item>
  <Item>Middle</Item>
  <Item>Right</Item>
</ListBox>

----------------------------------------

TITLE: Implementing Static Submenus with SubmenuTrigger in React Spectrum
DESCRIPTION: This example shows how to create nested submenus using the SubmenuTrigger component. Each submenu can have its own event handlers, allowing for customized behavior at different levels of the menu hierarchy.

LANGUAGE: tsx
CODE:
import {SubmenuTrigger} from '@react-spectrum/menu';

<MenuTrigger>
  <ActionButton>Actions</ActionButton>
  <Menu onAction={(key) => alert(`Root menu ${key} action`)}>
    <Item key="Copy">Copy</Item>
    <Item key="Cut">Cut</Item>
    <Item key="Paste">Paste</Item>
      <SubmenuTrigger>
        <Item key="Share">Share</Item>
        <Menu onAction={(key) => alert(`Share menu ${key} action`)}>
          <Item key="Copy Link">Copy Link</Item>
          <SubmenuTrigger>
            <Item key="Email">Email</Item>
            <Menu onAction={(key) => alert(`Email menu ${key} action`)}>
              <Item key="Attachment">Email as Attachment</Item>
              <Item key="Link">Email as Link</Item>
            </Menu>
          </SubmenuTrigger>
          <Item key="SMS">SMS</Item>
        </Menu>
      </SubmenuTrigger>
    <Item key="Delete">Delete</Item>
  </Menu>
</MenuTrigger>

----------------------------------------

TITLE: Creating Reusable Select Component in React Aria Components
DESCRIPTION: A reusable wrapper implementation for Select components that accepts props for label, description, error messages, and items. It includes proper typing for TypeScript and demonstrates how to structure a customizable Select component.

LANGUAGE: tsx
CODE:
import type {SelectProps, ListBoxItemProps, ValidationResult} from 'react-aria-components';
import {Text, FieldError} from 'react-aria-components';

interface MySelectProps<T extends object> extends Omit<SelectProps<T>, 'children'> {
  label?: string,
  description?: string,
  errorMessage?: string | ((validation: ValidationResult) => string),
  items?: Iterable<T>,
  children: React.ReactNode | ((item: T) => React.ReactNode)
}

export function MySelect<T extends object>({label, description, errorMessage, children, items, ...props}: MySelectProps<T>) {
  return (
    <Select {...props}>
      <Label>{label}</Label>
      <Button>
        <SelectValue />
        <span aria-hidden="true">▼</span>
      </Button>
      {description && <Text slot="description">{description}</Text>}
      <FieldError>{errorMessage}</FieldError>
      <Popover>
        <ListBox items={items}>
          {children}
        </ListBox>
      </Popover>
    </Select>
  );
}

export function MyItem(props: ListBoxItemProps) {
  return <ListBoxItem {...props} className={({isFocused, isSelected}) => `my-item ${isFocused ? 'focused' : ''} ${isSelected ? 'selected' : ''}`} />
}

<MySelect label="Ice cream flavor">
  <MyItem>Chocolate</MyItem>
  <MyItem>Mint</MyItem>
  <MyItem>Strawberry</MyItem>
  <MyItem>Vanilla</MyItem>
</MySelect>

----------------------------------------

TITLE: Handling Custom Data Formats in Drop Targets
DESCRIPTION: Example showing how to handle custom application-specific data formats when dropping items, extracting data from a custom mime type.

LANGUAGE: TSX
CODE:
function DropTarget() {
  let [dropped, setDropped] = React.useState(null);
  let ref = React.useRef(null);
  let {dropProps, isDropTarget} = useDrop({
    ref,
    async onDrop(e) {
      let item = e.items.find(item => item.kind === 'text' && item.types.has('my-app-custom-type')) as TextDropItem;
      if (item) {
        setDropped(await item.getText('my-app-custom-type'));
      }
    }
  });

  return (
    <div {...dropProps} role="button" tabIndex={0} ref={ref} className={`droppable ${isDropTarget ? 'target' : ''}`}>
      {dropped || 'Drop here'}
    </div>
  );
}

----------------------------------------

TITLE: Implementing Drag Between Lists with React Aria Components
DESCRIPTION: This comprehensive example shows how to implement bidirectional drag and drop between two lists using React Aria Components. It includes handling drag data formatting, drop operations, item reordering, and state management for both lists.

LANGUAGE: tsx
CODE:
import {isTextDropItem} from 'react-aria-components';

interface FileItem {
  id: string,
  name: string,
  type: string
}

interface DndGridListProps {
  initialItems: FileItem[],
  'aria-label': string
}

function DndGridList(props: DndGridListProps) {
  let list = useListData({
    initialItems: props.initialItems
  });

  let { dragAndDropHooks } = useDragAndDrop({
    ///- begin collapse -///
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    ///- end collapse -///
    // Provide drag data in a custom format as well as plain text.
    getItems(keys) {
      return [...keys].map((key) => {
        let item = list.getItem(key);
        return {
          'custom-app-type': JSON.stringify(item),
          'text/plain': item.name
        };
      });
    },

    // Accept drops with the custom format.
    acceptedDragTypes: ['custom-app-type'],

    // Ensure items are always moved rather than copied.
    getDropOperation: () => 'move',

    // Handle drops between items from other lists.
    async onInsert(e) {
      let processedItems = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('custom-app-type')))
      );
      if (e.target.dropPosition === 'before') {
        list.insertBefore(e.target.key, ...processedItems);
      } else if (e.target.dropPosition === 'after') {
        list.insertAfter(e.target.key, ...processedItems);
      }
    },

    // Handle drops on the collection when empty.
    async onRootDrop(e) {
      let processedItems = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('custom-app-type')))
      );
      list.append(...processedItems);
    },

    // Handle reordering items within the same list.
    onReorder(e) {
      if (e.target.dropPosition === 'before') {
        list.moveBefore(e.target.key, e.keys);
      } else if (e.target.dropPosition === 'after') {
        list.moveAfter(e.target.key, e.keys);
      }
    },

    // Remove the items from the source list on drop
    // if they were moved to a different list.
    onDragEnd(e) {
      if (e.dropOperation === 'move' && !e.isInternal) {
        list.remove(...e.keys);
      }
    }
  });

  return (
    <MyGridList
      aria-label={props['aria-label']}
      selectionMode="multiple"
      selectedKeys={list.selectedKeys}
      onSelectionChange={list.setSelectedKeys}
      items={list.items}
      dragAndDropHooks={dragAndDropHooks}
      renderEmptyState={() => 'Drop items here'}>
      {item => <MyItem>{item.name}</MyItem>}
    </MyGridList>
  );
}

<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
  <DndGridList
    initialItems={[
      { id: '1', type: 'file', name: 'Adobe Photoshop' },
      { id: '2', type: 'file', name: 'Adobe XD' },
      { id: '3', type: 'folder', name: 'Documents' },
      { id: '4', type: 'file', name: 'Adobe InDesign' },
      { id: '5', type: 'folder', name: 'Utilities' },
      { id: '6', type: 'file', name: 'Adobe AfterEffects' }
    ]}
    aria-label="First GridList"
  />
  <DndGridList
    initialItems={[
      { id: '7', type: 'folder', name: 'Pictures' },
      { id: '8', type: 'file', name: 'Adobe Fresco' },
      { id: '9', type: 'folder', name: 'Apps' },
      { id: '10', type: 'file', name: 'Adobe Illustrator' },
      { id: '11', type: 'file', name: 'Adobe Lightroom' },
      { id: '12', type: 'file', name: 'Adobe Dreamweaver' }
    ]}
    aria-label="Second GridList"
  />
</div>

----------------------------------------

TITLE: Implementing ComboBox Clear Button with ComboBoxStateContext in React
DESCRIPTION: This example demonstrates how to create a clear button component for a ComboBox by accessing the component state through ComboBoxStateContext. The button allows users to clear the selected value in the ComboBox.

LANGUAGE: tsx
CODE:
import {ComboBoxStateContext} from 'react-aria-components';

function ComboBoxClearButton() {
  /*- begin highlight -*/
  let state = React.useContext(ComboBoxStateContext);
  /*- end highlight -*/
  return (
    <Button
      // Don't inherit default Button behavior from ComboBox.
      slot={null}
      className="clear-button"
      aria-label="Clear"
      onPress={() => state?.setSelectedKey(null)}>
      ✕
    </Button>
  );
}

<ComboBox defaultSelectedKey="cat">
  <Label>Favorite Animal</Label>
  <div>
    <Input />
    {/*- begin highlight -*/}
    <ComboBoxClearButton />
    {/*- end highlight -*/}
    <Button>▼</Button>
  </div>
  <Popover>
    <ListBox>
      <ListBoxItem id="cat">Cat</ListBoxItem>
      <ListBoxItem id="dog">Dog</ListBoxItem>
      <ListBoxItem id="kangaroo">Kangaroo</ListBoxItem>
    </ListBox>
  </Popover>
</ComboBox>

----------------------------------------

TITLE: Basic MenuTrigger Example in React
DESCRIPTION: Simple example of using MenuTrigger with ActionButton and Menu components to create a dropdown menu with Cut, Copy, and Paste options.

LANGUAGE: tsx
CODE:
<MenuTrigger>
  <ActionButton>
    Edit
  </ActionButton>
  <Menu>
    <Item>Cut</Item>
    <Item>Copy</Item>
    <Item>Paste</Item>
  </Menu>
</MenuTrigger>

----------------------------------------

TITLE: Implementing Swipeable Tabs with React Aria and Framer Motion
DESCRIPTION: A complete implementation of swipeable tabs using React Aria Components and Framer Motion. The component features animated selection indicators, scroll-based tab selection, and touch/swipe navigation with smooth animations.

LANGUAGE: tsx
CODE:
import {
  Tabs,
  TabList,
  Tab,
  TabPanel,
  Collection
} from "react-aria-components";
import { motion, animate, useScroll, useTransform, useMotionValueEvent } from "framer-motion";
import { useCallback, useEffect, useRef, useState } from "react";

let tabs = [
  { id: "world", label: "World" },
  { id: "ny", label: "N.Y." },
  { id: "business", label: "Business" },
  { id: "arts", label: "Arts" },
  { id: "science", label: "Science" }
];

function AnimatedTabs() {
  let [selectedKey, setSelectedKey] = useState(tabs[0].id);

  let tabListRef = useRef(null);
  let tabPanelsRef = useRef(null);

  // Track the scroll position of the tab panel container.
  let { scrollXProgress } = useScroll({
    container: tabPanelsRef
  });

  // Find all the tab elements so we can use their dimensions.
  let [tabElements, setTabElements] = useState([]);
  useEffect(() => {
    if (tabElements.length === 0) {
      let tabs = tabListRef.current.querySelectorAll("[role=tab]");
      setTabElements(tabs);
    }
  }, [tabElements]);

  // This function determines which tab should be selected
  // based on the scroll position.
  let getIndex = useCallback(
    (x) => Math.max(0, Math.floor((tabElements.length - 1) * x)),
    [tabElements]
  );

  // This function transforms the scroll position into the X position
  // or width of the selected tab indicator.
  let transform = (x, property) => {
    if (!tabElements.length) return 0;

    // Find the tab index for the scroll X position.
    let index = getIndex(x);

    // Get the difference between this tab and the next one.
    let difference =
      index < tabElements.length - 1
        ? tabElements[index + 1][property] - tabElements[index][property]
        : tabElements[index].offsetWidth;

    // Get the percentage between tabs.
    // This is the difference between the integer index and fractional one.
    let percent = (tabElements.length - 1) * x - index;

    // Linearly interpolate to calculate the position of the selection indicator.
    let value = tabElements[index][property] + difference * percent;

    // iOS scrolls weird when translateX is 0 for some reason. 🤷‍♂️
    return value || 0.1;
  };

  let x = useTransform(scrollXProgress, (x) => transform(x, "offsetLeft"));
  let width = useTransform(scrollXProgress, (x) => transform(x, "offsetWidth"));

  // When the user scrolls, update the selected key
  // so that the correct tab panel becomes interactive.
  useMotionValueEvent(scrollXProgress, "change", (x) => {
    if (animationRef.current || !tabElements.length) return;
    setSelectedKey(tabs[getIndex(x)].id);
  });

  // When the user clicks on a tab perform an animation of
  // the scroll position to the newly selected tab panel.
  let animationRef = useRef(null);
  let onSelectionChange = (selectedKey) => {
    setSelectedKey(selectedKey);

    // If the scroll position is already moving but we aren't animating
    // then the key changed as a result of a user scrolling. Ignore.
    if (scrollXProgress.getVelocity() && !animationRef.current) {
      return;
    }

    let tabPanel = tabPanelsRef.current;
    let index = tabs.findIndex((tab) => tab.id === selectedKey);
    animationRef.current?.stop();
    animationRef.current = animate(
      tabPanel.scrollLeft,
      tabPanel.scrollWidth * (index / tabs.length),
      {
        type: "spring",
        bounce: 0.2,
        duration: 0.6,
        onUpdate: (v) => {
          tabPanel.scrollLeft = v;
        },
        onPlay: () => {
          // Disable scroll snap while the animation is going or weird things happen.
          tabPanel.style.scrollSnapType = "none";
        },
        onComplete: () => {
          tabPanel.style.scrollSnapType = "";
          animationRef.current = null;
        }
      }
    );
  };

  return (
    <Tabs
      className="w-fit max-w-[min(100%,350px)]"
      selectedKey={selectedKey}
      onSelectionChange={onSelectionChange}>
      <div className="relative">
        <TabList ref={tabListRef} className="flex -mx-1" items={tabs}>
          {(tab) =>
            <Tab className="cursor-default px-3 py-1.5 text-md transition outline-hidden touch-none">
              {({ isSelected, isFocusVisible }) => <>
                {tab.label}
                {isFocusVisible && isSelected && (
                  // Focus ring.
                  <motion.span
                    className="absolute inset-0 z-10 rounded-full ring-2 ring-black ring-offset-2"
                    style={{ x, width }}
                  />
                )}
              </>}
            </Tab>
          }
        </TabList>
        {/* Selection indicator. */}
        <motion.span
          className="absolute inset-0 z-10 bg-white rounded-full mix-blend-difference"
          style={{ x, width }} />
      </div>
      <div
        ref={tabPanelsRef}
        className="my-4 overflow-auto snap-x snap-mandatory no-scrollbar flex">
        <Collection items={tabs}>
          {(tab) => (
            <TabPanel
              shouldForceMount
              className="shrink-0 w-full px-2 box-border snap-start outline-hidden -outline-offset-2 rounded-sm focus-visible:outline-black">
              <h2>{tab.label} contents...</h2>
              <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sit amet nisl blandit, pellentesque eros eu, scelerisque eros. Sed cursus urna at nunc lacinia dapibus.</p>
            </TabPanel>
          )}
        </Collection>
      </div>
    </Tabs>
  );
}

----------------------------------------

TITLE: Implementing Infinite Loading with useAsyncList in React
DESCRIPTION: Example demonstrating infinite loading with pagination using useAsyncList. It uses cursors to track and load subsequent pages of data as the user scrolls through the Picker component.

LANGUAGE: tsx
CODE:
let list = useAsyncList({
  async load({signal, cursor}) {
    // If no cursor is available, then we're loading the first page.
    // Otherwise, the cursor is the next URL to load, as returned from the previous page.
    let res = await fetch(cursor || 'https://pokeapi.co/api/v2/pokemon', {signal});
    let json = await res.json();
    return {
      items: json.results,
      cursor: json.next
    };
  }
});

<Picker
  label="Pick a Pokemon"
  items={list.items}
  isLoading={list.isLoading}
  onLoadMore={list.loadMore}>
  {item => <Item key={item.name}>{item.name}</Item>}
</Picker>

----------------------------------------

TITLE: Implementing Client-Side Sorting in TableView with useAsyncList
DESCRIPTION: This example shows how to implement sortable columns in TableView using the useAsyncList hook for client-side sorting. It fetches Star Wars character data and allows sorting by different character attributes using a collator for proper numeric comparison.

LANGUAGE: tsx
CODE:
import {useCollator} from '@adobe/react-spectrum';

interface Character {
  name: string,
  height: number,
  mass: number,
  birth_year: number
}

function AsyncSortTable() {
  let collator = useCollator({numeric: true});

  let list = useAsyncList<Character>({
    async load({signal}) {
      let res = await fetch(`https://swapi.py4e.com/api/people/?search`, {signal});
      let json = await res.json();
      return {
        items: json.results
      };
    },
    async sort({items, sortDescriptor}) {
      return {
        items: items.sort((a, b) => {
          let first = a[sortDescriptor.column];
          let second = b[sortDescriptor.column];
          let cmp = collator.compare(first, second);
          if (sortDescriptor.direction === 'descending') {
            cmp *= -1;
          }
          return cmp;
        })
      };
    }
  });

  return (
    <TableView aria-label="Example table with client side sorting" sortDescriptor={list.sortDescriptor} onSortChange={list.sort} height="size-3000">
      <TableHeader>
        <Column key="name" allowsSorting>Name</Column>
        <Column key="height" allowsSorting>Height</Column>
        <Column key="mass" allowsSorting>Mass</Column>
        <Column key="birth_year" allowsSorting>Birth Year</Column>
      </TableHeader>
      <TableBody
        items={list.items}
        loadingState={list.loadingState}>
        {item => (
          <Row key={item.name}>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </TableView>
  );
}

----------------------------------------

TITLE: Implementing a DatePicker Component with React Aria
DESCRIPTION: A complete implementation of a DatePicker component using the useDatePicker hook from React Aria. This component combines DateField, Button, Popover, Dialog, and Calendar components to create an accessible date picker with a calendar popover.

LANGUAGE: tsx
CODE:
import {useDatePickerState} from '@react-stately/datepicker';
import {useDatePicker} from '@react-aria/datepicker';

// Reuse the DateField, Popover, Dialog, Calendar, and Button from your component library.
import {DateField, Popover, Dialog, Calendar, Button} from 'your-component-library';

function DatePicker(props) {
  let state = useDatePickerState(props);
  let ref = React.useRef(null);
  let {groupProps, labelProps, fieldProps, buttonProps, dialogProps, calendarProps} = useDatePicker(props, state, ref);

  return (
    <div style={{display: 'inline-flex', flexDirection: 'column'}}>
      <div {...labelProps}>{props.label}</div>
      <div {...groupProps} ref={ref} style={{display: 'flex'}}>
        <DateField {...fieldProps} />
        <Button {...buttonProps}>🗓</Button>
      </div>
      {state.isOpen &&
        <Popover state={state} triggerRef={ref} placement="bottom start">
          <Dialog {...dialogProps}>
            <Calendar {...calendarProps} firstDayOfWeek={props.firstDayOfWeek} />
          </Dialog>
        </Popover>
      }
    </div>
  );
}

<DatePicker label="Event date" />

----------------------------------------

TITLE: Creating a Reusable DateRangePicker Component in React with TypeScript
DESCRIPTION: This example demonstrates how to create a reusable wrapper component for DateRangePicker that encapsulates the DOM structure, styling, and logic. It shows how to handle labels, descriptions, and validation errors in a consistent way across an application.

LANGUAGE: tsx
CODE:
import type {DateRangePickerProps, DateValue, ValidationResult} from 'react-aria-components';
import {Text, FieldError} from 'react-aria-components';

interface MyDateRangePickerProps<T extends DateValue> extends DateRangePickerProps<T> {
  label?: string,
  description?: string,
  errorMessage?: string | ((validation: ValidationResult) => string)
}

function MyDateRangePicker<T extends DateValue>({label, description, errorMessage, firstDayOfWeek, ...props}: MyDateRangePickerProps<T>) {
  return (
    <DateRangePicker {...props}>
      <Label>{label}</Label>
      <Group>
        <DateInput slot="start">
          {segment => <DateSegment segment={segment} />}
        </DateInput>
        <span aria-hidden="true">–</span>
        <DateInput slot="end">
          {segment => <DateSegment segment={segment} />}
        </DateInput>
        <Button>▼</Button>
      </Group>
      {description && <Text slot="description">{description}</Text>}
      <FieldError>{errorMessage}</FieldError>
      <Popover>
        <Dialog>
          <RangeCalendar firstDayOfWeek={firstDayOfWeek}>
            <header>
              <Button slot="previous">◀</Button>
              <Heading />
              <Button slot="next">▶</Button>
            </header>
            <CalendarGrid>
              {date => <CalendarCell date={date} />}
            </CalendarGrid>
          </RangeCalendar>
        </Dialog>
      </Popover>
    </DateRangePicker>
  );
}

<MyDateRangePicker label="Event date" />

----------------------------------------

TITLE: Defining Avatar Component Interfaces in TypeScript
DESCRIPTION: TypeScript interfaces for the Avatar component system, including individual Avatar, AvatarGroup for collecting multiple avatars, and AvatarGroupOverflow for handling excess avatars. These interfaces define properties like size, disabled state, orientation, and overflow behavior.

LANGUAGE: typescript
CODE:
interface Avatar {
  src: string,
  alt?: string,
  size?: 'S' | 'M' | 'L',
  isDisabled?: boolean
}

interface AvatarGroup {
  children: ReactElement<Avatar>[],
  isDisabled?: boolean,
  onOverflowClick?: () => void,
  orientation?: 'horizontal' | 'vertical',
  shouldExpand?: boolean,
  overflowMode?: 'remaining' | 'total',
  size?: 'S' | 'M' | 'L',
  stackTop?: boolean,
  visibleItems?: number
}

interface AvatarGroupOverflow {
  children?: ReactNode
}

----------------------------------------

TITLE: Creating Custom FieldGroup Component with TextFieldContext
DESCRIPTION: Implementation of a custom FieldGroup component that uses TextFieldContext to pass the isDisabled prop to all child text fields. This demonstrates how to build custom compositional APIs using React Aria contexts.

LANGUAGE: tsx
CODE:
import {TextFieldContext} from 'react-aria-components';

interface FieldGroupProps {
  children?: React.ReactNode,
  isDisabled?: boolean
}

function FieldGroup({children, isDisabled}: FieldGroupProps) {
  return (
    <TextFieldContext.Provider value={{isDisabled}}>
      {children}
    </TextFieldContext.Provider>
  );
}

----------------------------------------

TITLE: Implementing DateRangePicker Component in React
DESCRIPTION: A basic implementation of the DateRangePicker component showing how to compose it from smaller components including Label, Group, DateInput, Button, Popover, Dialog, and RangeCalendar. This example demonstrates the complete structure needed for a functional date range picker.

LANGUAGE: tsx
CODE:
import {DateRangePicker, Label, Group, Popover, Dialog, RangeCalendar, CalendarGrid, CalendarCell, Button, Heading, DateInput, DateSegment} from 'react-aria-components';

<DateRangePicker>
  <Label>Trip dates</Label>
  <Group>
    <DateInput slot="start">
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <span aria-hidden="true">–</span>
    <DateInput slot="end">
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <Button>▼</Button>
  </Group>
  <Popover>
    <Dialog>
      <RangeCalendar>
        <header>
          <Button slot="previous">◀</Button>
          <Heading />
          <Button slot="next">▶</Button>
        </header>
        <CalendarGrid>
          {date => <CalendarCell date={date} />}
        </CalendarGrid>
      </RangeCalendar>
    </Dialog>
  </Popover>
</DateRangePicker>

----------------------------------------

TITLE: Creating Dynamic Submenus with Recursive Rendering in React Spectrum
DESCRIPTION: This example demonstrates how to dynamically generate nested menus from a data structure using a recursive function. The approach allows for easy creation of complex menu hierarchies from structured data.

LANGUAGE: tsx
CODE:
import {SubmenuTrigger} from '@react-spectrum/menu';

let items = [
  {name: 'Copy'},
  {name: 'Cut'},
  {name: 'Paste'},
  {name: 'Share', children: [
    {name: 'Copy Link'},
    {name: 'Email', children: [
      {name: 'Email as Attachment'},
      {name: 'Email as Link'},
    ]},
    {name: 'SMS'},
  ]},
  {name: 'Delete'}
];

<MenuTrigger>
  <ActionButton>Actions</ActionButton>
  <Menu items={items}>
    {function renderSubmenu(item) {
      if (item.children) {
        return (
          <SubmenuTrigger>
            <Item key={item.name}>{item.name}</Item>
            <Menu items={item.children}>
              {(item) => renderSubmenu(item)}
            </Menu>
          </SubmenuTrigger>
        );
      } else {
        return <Item key={item.name}>{item.name}</Item>;
      }
    }}
  </Menu>
</MenuTrigger>

----------------------------------------

TITLE: TextField with Validation and Error Display
DESCRIPTION: Example demonstrating validation capabilities of TextField using HTML constraint validation props like isRequired and type, along with error message display using FieldError.

LANGUAGE: tsx
CODE:
import {Form, FieldError, Button} from 'react-aria-components';

<Form>
  <TextField name="email" type="email" isRequired>
    <Label>Email</Label>
    <Input />
    <FieldError />
  </TextField>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Creating a Reorderable TableView with Drag and Drop in React Spectrum
DESCRIPTION: This code implements a self-contained reorderable TableView component where rows can be reordered using drag and drop. It uses the useDragAndDrop hook with onReorder callback to handle moving rows within the same table, making it both a drag source and drop target.

LANGUAGE: tsx
CODE:
function ReorderableTable() {
  let columns = [
    {name: 'Name', id: 'name'},
    {name: 'Type', id: 'type'},
    {name: 'Date Modified', id: 'date'}
  ];

  let list = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/3/2020'},
      {id: '2', type: 'file', name: 'Adobe XD', date: '2/2/2020'},
      {id: '3', type: 'folder', name: 'Documents', date: '5/1/2020', childNodes: []},
      {id: '4', type: 'file', name: 'Adobe InDesign', date: '5/9/2020'},
      {id: '5', type: 'folder', name: 'Utilities', date: '12/7/2020', childNodes: []},
      {id: '6', type: 'file', name: 'Adobe AfterEffects', date: '6/1/2020'}
    ]
  });

  let {dragAndDropHooks} = useDragAndDrop({
    getItems(keys) {
      return [...keys].map(key => {
        let item = list.getItem(key);
        // Setup the drag types and associated info for each dragged item.
        return {
          'custom-app-type-reorder': JSON.stringify(item),
          'text/plain': item.name
        };
      });
    },
    acceptedDragTypes: ['custom-app-type-reorder'],
    /*- begin highlight -*/
    onReorder: async (e) => {
      let {keys, target} = e;

      if (target.dropPosition === 'before') {
        list.moveBefore(target.key, [...keys]);
      } else if (target.dropPosition === 'after') {
        list.moveAfter(target.key, [...keys]);
      }
    },
    getAllowedDropOperations: () => ['move']
    /*- end highlight -*/
  });

  return (
    <TableView
      aria-label="Reorderable TableView"
      selectionMode="multiple"
      height="size-3600"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader columns={columns}>
        {column => (
          <Column
            key={column.id}
            align={column.id === 'date' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </TableView>
  );

----------------------------------------

TITLE: Implementing a Basic Meter Component with React Aria's useMeter Hook
DESCRIPTION: Example implementation of a basic meter component using the useMeter hook from React Aria. The component displays a progress bar with an optional label and value display, calculating the width as a percentage of the value range.

LANGUAGE: TSX
CODE:
import {useMeter} from '@react-aria/meter';

function Meter(props) {
  let {
    label,
    showValueLabel = !!label,
    value,
    minValue = 0,
    maxValue = 100
  } = props;
  let {
    meterProps,
    labelProps
  } = useMeter(props);

  // Calculate the width of the progress bar as a percentage
  let percentage = (value - minValue) / (maxValue - minValue);
  let barWidth = `${Math.round(percentage * 100)}%`;

  return (
    <div {...meterProps} style={{width: 200}}>
      <div style={{display: 'flex', justifyContent: 'space-between'}}>
        {label &&
          <span {...labelProps}>
            {label}
          </span>
        }
        {showValueLabel &&
          <span>
            {meterProps['aria-valuetext']}
          </span>
        }
      </div>
      <div style={{height: 10, background: 'lightgray'}}>
        <div style={{width: barWidth, height: 10, background: 'green'}} />
      </div>
    </div>
  );
}

<Meter
  label="Storage space"
  value={25} />

----------------------------------------

TITLE: Video Component Usage for Drag and Drop Hero Demonstration
DESCRIPTION: Renders a hero video component showcasing React Spectrum and React Aria drag and drop implementation features. The video is muted, looping, and autoplay with accessibility attributes.

LANGUAGE: JSX
CODE:
<Video
  src={heroVideo}
  id="heroVideo"
  muted
  loop
  autoPlay
  tabIndex={0}
  aria-label="Video showing features of the React Spectrum and React Aria drag and drop implementation"
  style={{maxWidth: 'min(100%, 1920px)', display: 'block', margin: '40px auto'}} />

----------------------------------------

TITLE: Creating Reusable ListBox Components with Custom Styling
DESCRIPTION: Shows how to create reusable wrapper components for ListBox and ListBoxItem with custom styling applied based on the component's state, such as focus and selection.

LANGUAGE: tsx
CODE:
import type {ListBoxProps, ListBoxItemProps} from 'react-aria-components';

function MyListBox<T extends object>({children, ...props}: ListBoxProps<T>) {
  return (
    <ListBox {...props} className="my-listbox">
      {children}
    </ListBox>
  );
}

function MyItem(props: ListBoxItemProps) {
  return <ListBoxItem {...props} className={({isFocusVisible, isSelected}) => `my-item ${isFocusVisible ? 'focused' : ''} ${isSelected ? 'selected' : ''}`} />
}

<MyListBox aria-label="Ice cream flavor" selectionMode="single">
  <MyItem>Chocolate</MyItem>
  <MyItem>Mint</MyItem>
  <MyItem>Strawberry</MyItem>
  <MyItem>Vanilla</MyItem>
</MyListBox>

----------------------------------------

TITLE: Handling onDragEnd for Move Operations
DESCRIPTION: This example demonstrates how to implement onDragEnd to update the UI after a successful drag operation. It specifically removes items from the source list when a move operation is completed, while preserving them during copy operations.

LANGUAGE: tsx
CODE:
function Example() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Adobe Photoshop'},
      {id: 2, name: 'Adobe XD'},
      {id: 3, name: 'Adobe Dreamweaver'},
      {id: 4, name: 'Adobe InDesign'},
      {id: 5, name: 'Adobe Connect'}
    ]
  });

  let { dragAndDropHooks } = useDragAndDrop({
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    getItems(keys) {
      return [...keys].map(key => {
        let item = list.getItem(key);
        return {
          'text/plain': item.name,
          'custom-app-type': JSON.stringify(item)
        };
      });
    },
    // ...
    onDragEnd(e) {
      if (e.dropOperation === 'move') {
        list.remove(...e.keys);
      }
    }
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      <MyGridList aria-label="Draggable list" selectionMode="multiple" items={list.items} dragAndDropHooks={dragAndDropHooks}>
        {item => <MyItem>{item.name}</MyItem>}
      </MyGridList>
      <DroppableGridList />
    </div>
  );
}

----------------------------------------

TITLE: Controlled and Uncontrolled Calendar Value Management
DESCRIPTION: Example demonstrating both controlled and uncontrolled value management in Calendar components using the @internationalized/date package for date handling.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState(parseDate('2020-02-03'));

  return (
    <div style={{display: 'flex', gap: 20, flexWrap: 'wrap'}}>
      <MyCalendar
        aria-label="Date (uncontrolled)"
        defaultValue={parseDate('2020-02-03')} />
      <MyCalendar
        aria-label="Date (controlled)"
        value={value}
        onChange={setValue} />
    </div>
  );
}

----------------------------------------

TITLE: Customizing Pagination Behavior in Multi-Month Calendar
DESCRIPTION: This example demonstrates how to customize the pagination behavior of a Calendar component with multiple visible months. Setting pageBehavior to 'single' makes the next/previous buttons advance by one month instead of by the number of visible months.

LANGUAGE: tsx
CODE:
<div style={{maxWidth: '100%', overflow: 'auto'}}>
  <Calendar aria-label="Event date" visibleMonths={3} pageBehavior="single" />
</div>

----------------------------------------

TITLE: Validation with DatePicker in a Form in React Spectrum
DESCRIPTION: Demonstrates how to use DatePicker with form validation by setting isRequired and integrating with Form component that uses native validation behavior.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  {/*- begin highlight -*/}
  <DatePicker label="Appointment date" name="date" isRequired />
  {/*- end highlight -*/}
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Implementing Reorderable ListBox with Drag and Drop in React
DESCRIPTION: This example demonstrates how to create a reorderable list with drag and drop functionality using the useDragAndDrop hook from React Aria Components. It manages item state with useListData and implements reordering through the onReorder event handler.

LANGUAGE: tsx
CODE:
import {useListData} from 'react-stately';
import {useDragAndDrop} from 'react-aria-components';

function Example() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Adobe Photoshop'},
      {id: 2, name: 'Adobe XD'},
      {id: 3, name: 'Adobe Dreamweaver'},
      {id: 4, name: 'Adobe InDesign'},
      {id: 5, name: 'Adobe Connect'}
    ]
  });

  let {dragAndDropHooks} = useDragAndDrop({
    getItems: (keys) => [...keys].map(key => ({'text/plain': list.getItem(key).name})),
    onReorder(e) {
      if (e.target.dropPosition === 'before') {
        list.moveBefore(e.target.key, e.keys);
      } else if (e.target.dropPosition === 'after') {
        list.moveAfter(e.target.key, e.keys);
      }
    }
  });

  return (
    <ListBox
      aria-label="Reorderable list"
      selectionMode="multiple"
      items={list.items}
      dragAndDropHooks={dragAndDropHooks}
    >
      {item => <ListBoxItem>{item.name}</ListBoxItem>}
    </ListBox>
  );
}

LANGUAGE: css
CODE:
.react-aria-ListBoxItem {
  &[data-dragging] {
    opacity: 0.6;
  }
}

.react-aria-DropIndicator[data-drop-target] {
  outline: 1px solid var(--highlight-background);
}

----------------------------------------

TITLE: Implementing ToastContainer API in TypeScript for React Spectrum
DESCRIPTION: TypeScript interfaces for the ToastContainer component and its state management. This defines the queuing system for toasts, including methods for adding, removing, and prioritizing toast notifications in the application.

LANGUAGE: typescript
CODE:
interface ToastContainerProps {
  /**
    Some prop that allow the user to specify where the container should be located on the page. Open questions are as follows:
      - Where to position the ToastContainer? Would the toast appear at the bottom of the container it was placed in or portalled out so it is at the bottom of the screen?
      - Should there be an option to portal?
      - How would this affect theming? Would we get the theme from the nearest container or should it receive the theming from the top most Provider?
  */
  positioning: ?
}

interface ToastContainerState {
  // Returns what toast is currently displayed.
  visibleToast: ToastElement,

  // Setter for what toast to display. Returned here in case user wants to ignore priority logic and set what toast should be visible.
  setVisibleToastProps: (ToastElement) => void,

  // Flat array that contains the current toast queue.
  toastQueue: Array<ToastElement>,

  // Setter to modify toast queue. Returned here if the user want to modify the queue directly (wipe the queue, etc).
  setToastQueue: (Array<ToastElement>) => void,

  // Adds a toast to the queue. Needs a unique identifier so toast look up can happen via removeToast.
  addToast: (ToastElement, id/key) => void,

  // Removes a toast regardless if it is visible or in queue. Uses the provided id/key to find what toast to remove.
  removeToast: (id/key) => void,

  // Function that overrides the default priority logic. Consumes toast props and returns a priority number.
  determinePriorityFn: (props) => number
}

function useToastContainerState(): ToastContainerState;

interface ToastContainerAria {
  // TODO: Accesibility review
  role: 'region',
  aria-label: 'Notifications'
}

function useToastContainer(): ToastContainerAria;

----------------------------------------

TITLE: Implementing Dynamic Sectioned Items in ComboBox
DESCRIPTION: Creates a ComboBox with sections generated from hierarchical data. Uses Collection component to render children items within sections, allowing for dynamic data rendering.

LANGUAGE: tsx
CODE:
import {Collection} from 'react-aria-components';

function Example() {
  let options = [
    {name: 'Fruit', children: [
      {name: 'Apple'},
      {name: 'Banana'},
      {name: 'Orange'},
      {name: 'Honeydew'},
      {name: 'Grapes'},
      {name: 'Watermelon'},
      {name: 'Cantaloupe'},
      {name: 'Pear'}
    ]},
    {name: 'Vegetable', children: [
      {name: 'Cabbage'},
      {name: 'Broccoli'},
      {name: 'Carrots'},
      {name: 'Lettuce'},
      {name: 'Spinach'},
      {name: 'Bok Choy'},
      {name: 'Cauliflower'},
      {name: 'Potatoes'}
    ]}
  ];

  return (
    <MyComboBox label="Preferred fruit or vegetable" defaultItems={options}>
      {section => (
        <ListBoxSection id={section.name}>
          <Header>{section.name}</Header>
          <Collection items={section.children}>
            {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
          </Collection>
        </ListBoxSection>
      )}
    </MyComboBox>
  );
}

----------------------------------------

TITLE: Creating a Reusable Popover Wrapper Component
DESCRIPTION: Example of creating a reusable wrapper component for Popover to encapsulate styling, structure and behavior in one place.

LANGUAGE: tsx
CODE:
import type {PopoverProps} from 'react-aria-components';

interface MyPopoverProps extends Omit<PopoverProps, 'children'> {
  children: React.ReactNode
}

function MyPopover({children, ...props}: MyPopoverProps) {
  return (
    <Popover {...props}>
      <OverlayArrow>
        <svg width={12} height={12} viewBox="0 0 12 12"><path d="M0 0 L6 6 L12 0" /></svg>
      </OverlayArrow>
      <Dialog>
        {children}
      </Dialog>
    </Popover>
  );
}

<DialogTrigger>
  <Button aria-label="Help">ⓘ</Button>
  <MyPopover>
    <Heading slot="title">Help</Heading>
    <p>For help accessing your account, please contact support.</p>
  </MyPopover>
</DialogTrigger>

----------------------------------------

TITLE: Implementing Drag and Drop in JavaScript
DESCRIPTION: Defines comprehensive interfaces for drag and drop functionality in React Spectrum. Includes enums for drop operations and positions, interfaces for drag and drop targets, and delegates for handling data transfer, clipboard operations, and drag/drop events.

LANGUAGE: javascript
CODE:
interface DndBase {
  dragDelegate?: DragDelegate,
  dropDelegate?: DropDelegate
};

enum DropOperation {
  NONE = 0,
  MOVE = 1 << 0,
  COPY = 1 << 1,
  LINK = 1 << 2,
  ALL = MOVE | COPY | LINK
};

enum DropPosition {
  ON = 1 << 0,
  BETWEEN = 1 << 1,
  ANY = ON | BETWEEN
};

interface DragTarget {
  value: any
}

interface DropTarget {
  value: null | any, // if null, represents the entire tree/table
  index: number, // todo: figure out tableview sections
  dropPosition: DropPosition
}

// drag and drop + copy/paste
interface DataTransferDelegate {
  write?(dataTransfer: DataTransfer, items: any[]): void,
  read?(dataTransfer: DataTransfer): any[]
}

interface ClipboardDelegate {
  copy?(dataTransfer: DataTransfer, items: any[]): void,
  cut?(dataTransfer: DataTransfer, items: any[],
  paste?(dataTransfer: DataTransfer): void
}

interface DragDelegate {
  shouldAllowDrag?(target: DragTarget): boolean,
  prepareDragData(target: DragTarget, dataTransfer: DataTransfer): void,
  getAllowedDropOperations?(target: DropTarget): DropOperation,
  renderDragView(items: any[]) => ReactNode,
  onDragEnd?(target: DropTarget, dropOperation: DropOperation): void
}

interface DropDelegate {
  shouldAcceptDrop?(target: DropTarget, types: Set<string>): boolean,
  getAllowedDropPositions?(target: DropTarget): DropPosition, // NEW
  overrideDropTarget?(target: DropTarget): DropTarget,
  getDropOperation?(target: DropTarget, allowedOperations: DropOperation): DropOperation,
  onDropTargetChange?(target: DropTarget): void,
  onDrop(target: DropTarget, dataTransfer: DataTransfer, dropOperation: DropOperation): void,

  // TODO: what to do about this??
  onReorder?(items: any[], dropTarget: DropTarget, dropOperation: DropOperation): void
}

----------------------------------------

TITLE: Implementing Removable Tags with useListData Hook
DESCRIPTION: Example showing how to implement a Tag Group with removable tags using the useListData hook from React Stately to manage the collection state. The onRemove callback is used to handle tag removal.

LANGUAGE: tsx
CODE:
import {useListData} from '@react-stately/data';

function Example() {
  let list = useListData({
    initialItems: [
      { id: 1, name: "News" },
      { id: 2, name: "Travel" },
      { id: 3, name: "Gaming" },
      { id: 4, name: "Shopping" }
    ]
  });

  return (
    <TagGroup
      label="Categories"
      items={list.items}
      onRemove={(keys) => list.remove(...keys)}>
      {(item) => <Item>{item.name}</Item>}
    </TagGroup>
  );
}

----------------------------------------

TITLE: Implementing Asynchronous Loading in ListBox with useAsyncList
DESCRIPTION: Example of using the useAsyncList hook to handle asynchronous data loading from an API and displaying the results in a ListBox component.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Character {
  name: string
}

function AsyncLoadingExample() {
  let list = useAsyncList<Character>({
    async load({signal, filterText}) {
      let res = await fetch(
        `https://pokeapi.co/api/v2/pokemon`,
        {signal}
      );
      let json = await res.json();

      return {
        items: json.results
      };
    }
  });

  return (
    <ListBox aria-label="Pick a Pokemon" items={list.items} selectionMode="single">
      {(item) => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
    </ListBox>
  );
}

----------------------------------------

TITLE: Conditional Rendering with Render Props in GridListItem
DESCRIPTION: This snippet shows how to use render props to conditionally render elements based on component state. In this example, a checkbox is only rendered when selection mode is enabled.

LANGUAGE: jsx
CODE:
<GridListItem>
  {({selectionMode}) => (
    <>
      {selectionMode !== 'none' && <Checkbox />}
      Item
    </>
  )}
</GridListItem>

----------------------------------------

TITLE: Initializing Modal Polyfill with Default Settings in JavaScript
DESCRIPTION: Sets up the modal polyfill by watching the entire document body for aria-modal elements. This should be included once at the top level of your application before any modals are rendered.

LANGUAGE: javascript
CODE:
import {watchModals} from '@react-aria/aria-modal-polyfill';
watchModals();

----------------------------------------

TITLE: Implementing Bidirectional Drag and Drop Between Lists in React Spectrum
DESCRIPTION: This example demonstrates how to implement drag and drop functionality between two ListView components. It uses useDragAndDrop hook to enable moving items between lists, with support for different drop positions (before, after, and root). The implementation includes handling of drag operations, insertion logic, and proper cleanup when items are moved.

LANGUAGE: tsx
CODE:
import {Flex, ListView, Item, Text, useListData} from '@adobe/react-spectrum';
import {useDragAndDrop} from '@react-spectrum/dnd';
import File from '@spectrum-icons/illustrations/File';
import Folder from '@spectrum-icons/illustrations/Folder';

function BidirectionalDnDListView(props) {
  let {list} = props;
  let {dragAndDropHooks} = useDragAndDrop({
    acceptedDragTypes: ['custom-app-type-bidirectional'],
    // Only allow move operations
    getAllowedDropOperations: () => ['move'],
    getItems(keys) {
      return [...keys].map(key => {
        let item = list.getItem(key);
        // Setup the drag types and associated info for each dragged item.
        return {
          'custom-app-type-bidirectional': JSON.stringify(item),
          'text/plain': item.name
        };
      });
    },
    onInsert: async (e) => {
      let {
        items,
        target
      } = e;
      let processedItems = await Promise.all(
        items.map(async item => JSON.parse(await item.getText('custom-app-type-bidirectional')))
      );
      if (target.dropPosition === 'before') {
        list.insertBefore(target.key, ...processedItems);
      } else if (target.dropPosition === 'after') {
        list.insertAfter(target.key, ...processedItems);
      }
    },
    onReorder: async (e) => {
      let {
        keys,
        target
      } = e;

      if (target.dropPosition === 'before') {
        list.moveBefore(target.key, [...keys]);
      } else if (target.dropPosition === 'after') {
        list.moveAfter(target.key, [...keys]);
      }
    },
    onRootDrop: async (e) => {
      let {
        items
      } = e;
      let processedItems = await Promise.all(
        items.map(async item => JSON.parse(await item.getText('custom-app-type-bidirectional')))
      );
      list.append(...processedItems);
    },
    /*- begin highlight -*/
    onDragEnd: (e) => {
      let {
        dropOperation,
        keys,
        isInternal
      } = e;
      // Only remove the dragged items if they aren't dropped inside the source list
      if (dropOperation === 'move' && !isInternal) {
        list.remove(...keys);
      }
    }
    /*- end highlight -*/
  });

  return (
    <ListView
      aria-label={props['aria-label']}
      selectionMode="multiple"
      width="size-3600"
      height="size-3600"
      items={list.items}
      dragAndDropHooks={dragAndDropHooks}>
      {item => (
        <Item textValue={item.name}>
          {item.type === 'folder' ? <Folder /> : <File />}
          <Text>{item.name}</Text>
        </Item>
      )}
    </ListView>
  );
}

function DragBetweenListsExample() {
  let list1 = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop'},
      {id: '2', type: 'file', name: 'Adobe XD'},
      {id: '3', type: 'folder', name: 'Documents'},
      {id: '4', type: 'file', name: 'Adobe InDesign'},
      {id: '5', type: 'folder', name: 'Utilities'},
      {id: '6', type: 'file', name: 'Adobe AfterEffects'}
    ]
  });

  let list2 = useListData({
    initialItems: [
      {id: '7', type: 'folder', name: 'Pictures'},
      {id: '8', type: 'file', name: 'Adobe Fresco'},
      {id: '9', type: 'folder', name: 'Apps'},
      {id: '10', type: 'file', name: 'Adobe Illustrator'},
      {id: '11', type: 'file', name: 'Adobe Lightroom'},
      {id: '12', type: 'file', name: 'Adobe Dreamweaver'}
    ]
  });


  return (
    <Flex wrap gap="size-300">
      <BidirectionalDnDListView list={list1} aria-label="First ListView in drag between list example" />
      <BidirectionalDnDListView list={list2} aria-label="Second ListView in drag between list example" />
    </Flex>
  );
}

<DragBetweenListsExample />

----------------------------------------

TITLE: ActionGroup with Single Selection in React Spectrum
DESCRIPTION: Implements a single-selection ActionGroup for text alignment that displays the selected item in the menu button when collapsed. It ensures an item is always selected with disallowEmptySelection.

LANGUAGE: tsx
CODE:
<ActionGroup
  aria-label="Text alignment"
  overflowMode="collapse"
  selectionMode="single"
  defaultSelectedKeys={['left']}
  disallowEmptySelection
  buttonLabelBehavior="hide"
  isEmphasized
  maxWidth={100}>
  <Item key="left">
    <TextAlignLeft />
    <Text>Align Left</Text>
  </Item>
  <Item key="center">
    <TextAlignCenter />
    <Text>Align Center</Text>
  </Item>
  <Item key="right">
    <TextAlignRight />
    <Text>Align Right</Text>
  </Item>
  <Item key="justify">
    <TextAlignJustify />
    <Text>Justify</Text>
  </Item>
</ActionGroup>

----------------------------------------

TITLE: Implementing Empty State in ListBox with renderEmptyState
DESCRIPTION: Example of using the renderEmptyState prop to customize what the ListBox displays when there are no items, providing better user feedback for empty collections.

LANGUAGE: tsx
CODE:
<ListBox
  aria-label="Search results"
  /*- begin highlight -*/
  renderEmptyState={() => 'No results found.'}
  /*- end highlight -*/
>
  {[]}
</ListBox>

----------------------------------------

TITLE: Implementing Reorderable ListView with Drag and Drop in React Spectrum
DESCRIPTION: Creates a ListView component that allows users to reorder its rows via drag and drop. It uses useListData to manage the list and useDragAndDrop to enable drag-and-drop functionality with custom reordering behavior.

LANGUAGE: tsx
CODE:
function ReorderableList() {
  let list = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop'},
      {id: '2', type: 'file', name: 'Adobe XD'},
      {id: '3', type: 'folder', name: 'Documents', childNodes: []},
      {id: '4', type: 'file', name: 'Adobe InDesign'},
      {id: '5', type: 'folder', name: 'Utilities', childNodes: []},
      {id: '6', type: 'file', name: 'Adobe AfterEffects'}
    ]
  });

  let {dragAndDropHooks} = useDragAndDrop({
    getItems(keys) {
      return [...keys].map(key => {
        let item = list.getItem(key);
        // Setup the drag types and associated info for each dragged item.
        return {
          'custom-app-type-reorder': JSON.stringify(item),
          'text/plain': item.name
        };
      });
    },
    acceptedDragTypes: ['custom-app-type-reorder'],
    /*- begin highlight -*/
    onReorder: async (e) => {
      let {keys, target} = e;

      if (target.dropPosition === 'before') {
        list.moveBefore(target.key, [...keys]);
      } else if (target.dropPosition === 'after') {
        list.moveAfter(target.key, [...keys]);
      }
    },
    getAllowedDropOperations: () => ['move']
    /*- end highlight -*/
  });

  return (
    <ListView
      aria-label="Reorderable ListView"
      selectionMode="multiple"
      width="size-3600"
      height="size-3600"
      items={list.items}
      dragAndDropHooks={dragAndDropHooks}>
      {item => (
        <Item textValue={item.name}>
          {item.type === 'folder' && <Folder />}
          <Text>{item.name}</Text>
        </Item>
      )}
    </ListView>
  );
}

----------------------------------------

TITLE: Creating Custom Components Compatible with React Aria Context
DESCRIPTION: Example of consuming context from KeyboardContext to make an existing styled keyboard shortcut component compatible with React Aria Components using the useContextProps hook.

LANGUAGE: tsx
CODE:
import {KeyboardContext, useContextProps} from 'react-aria-components';

const MyKeyboard = React.forwardRef((props: React.HTMLAttributes<HTMLElement>, ref: React.ForwardedRef<HTMLElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, KeyboardContext);

  // ... your existing Keyboard component
  return <kbd {...props} ref={ref} />;
});

----------------------------------------

TITLE: Basic React Spectrum Application Setup in JSX
DESCRIPTION: This example demonstrates how to create a simple React Spectrum application with a Provider component for theming and a CTA Button with an event handler. It showcases the basic structure needed to start using React Spectrum components.

LANGUAGE: jsx
CODE:
import {Provider, defaultTheme, Button} from '@adobe/react-spectrum';

// Render it in your app!
function App() {
  return (
    <Provider theme={theme}>
      <Button
        variant="cta"
        onPress={() => alert('Hey there!')}>
        Hello React Spectrum!
      </Button>
    </Provider>
  );
}

----------------------------------------

TITLE: Controlled and Uncontrolled Switch States
DESCRIPTION: Illustrates both controlled and uncontrolled state management for Switch components using React hooks.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelection] = React.useState(false);

  return (
    <>
      <Switch
        defaultSelected>
        Low power mode (uncontrolled)
      </Switch>

      <Switch
        isSelected={selected}
        onChange={setSelection}>
        Low power mode (controlled)
      </Switch>
    </>
  )
}

----------------------------------------

TITLE: Implementing Server Validation in React Spectrum Forms
DESCRIPTION: This example shows how to display server-side validation errors in a React Spectrum form. It demonstrates setting and clearing validation errors after form submission by using the validationErrors prop on the Form component.

LANGUAGE: tsx
CODE:
function Example() {
  let [errors, setErrors] = React.useState({});
  let onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    let data = Object.fromEntries(new FormData(e.currentTarget));
    let result = await callServer(data)
    setErrors(result.errors);
  };

  return (
    <Form
      validationBehavior="native"
      maxWidth="size-3000"
      onSubmit={onSubmit}
      validationErrors={errors}
    >
      <TextField label="Username" name="username" isRequired />
      <TextField label="Password" name="password" type="password" isRequired />
      <ButtonGroup>
        <Button type="submit" variant="primary">Submit</Button>
        <Button type="reset" variant="secondary">Reset</Button>
      </ButtonGroup>
    </Form>
  );
}

// Fake server used in this example.
function callServer(data) {
  return {
    errors: {
      username: 'Sorry, this username is taken.'
    }
  };
}

----------------------------------------

TITLE: Handling ComboBox Selection and Input Events
DESCRIPTION: Demonstrates using onSelectionChange and onInputChange event handlers to track selected values and input text in React state, providing controlled component functionality.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, name: 'Aerospace'},
    {id: 2, name: 'Mechanical'},
    {id: 3, name: 'Civil'},
    {id: 4, name: 'Biomedical'},
    {id: 5, name: 'Nuclear'},
    {id: 6, name: 'Industrial'},
    {id: 7, name: 'Chemical'},
    {id: 8, name: 'Agricultural'},
    {id: 9, name: 'Electrical'}
  ];

  let [value, setValue] = React.useState('');
  let [majorId, setMajorId] = React.useState('');

  let onSelectionChange = (id) => {
    setMajorId(id);
  };

  let onInputChange = (value) => {
    setValue(value)
  };

  return (
    <>
      <p>Current selected major id: {majorId}</p>
      <p>Current input text: {value}</p>
      <MyComboBox
        label="Pick a engineering major"
        defaultItems={options}
        selectedKey={majorId}
        /*- begin highlight -*/
        onSelectionChange={onSelectionChange}
        onInputChange={onInputChange}
        /*- end highlight -*/
      >
        {item => <ListBoxItem>{item.name}</ListBoxItem>}
      </MyComboBox>
    </>
  );
}

----------------------------------------

TITLE: Implementing Date Validation in RangeCalendar
DESCRIPTION: Shows how to use minValue and maxValue props to restrict date selection to a specific range. This example only accepts dates after today by using the today function from @internationalized/date.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<MyRangeCalendar aria-label="Trip dates" minValue={today(getLocalTimeZone())} />

----------------------------------------

TITLE: Implementing Resizable Table Columns with Local Storage Persistence in React Spectrum
DESCRIPTION: This code demonstrates a table with resizable columns that persist state in localStorage. It uses onResize and onResizeEnd event handlers to update column widths in real-time and save final dimensions between page refreshes.

LANGUAGE: tsx
CODE:
let initialColumns = [
  {name: 'File Name', id: 'file', width: '1fr'},
  {name: 'Size', id: 'size', width: 80},
  {name: 'Date', id: 'date', width: 100}
];

function ResizableTable() {
  /*- begin highlight -*/
  let [columns, setColumns] = React.useState(() => {
    let localStorageWidths = localStorage.getItem('table-widths');
    if (localStorageWidths) {
      let widths = JSON.parse(localStorageWidths);
      return initialColumns.map(col => ({...col, width: widths[col.id]}));
    } else {
      return initialColumns;
    }
  });

  let onResize = (widths) => {
    setColumns(columns => columns.map(col => ({...col, width: widths.get(col.id)})));
  };

  let onResizeEnd = (widths) => {
    localStorage.setItem('table-widths', JSON.stringify(Object.fromEntries(widths)));
  };
  /*- end highlight -*/

  return (
    <ResizableTableContainer
      /*- begin highlight -*/
      onResize={onResize}
      onResizeEnd={onResizeEnd}
      /*- end highlight -*/
    >
      <Table aria-label="Table with controlled, resizable columns saved in local storage">
        <TableHeader columns={columns}>
          {(column) => (
            <Column isRowHeader={column.id === 'file'} width={column.width}>
              <div className="flex-wrapper">
                <span tabIndex={-1} className="column-name">{column.name}</span>
                <ColumnResizer />
              </div>
            </Column>
          )}
        </TableHeader>
        <TableBody>
          <Row>
            <Cell>2022-Roadmap-Proposal-Revision-012822-Copy(2)</Cell>
            <Cell>214 KB</Cell>
            <Cell>November 27, 2022 at 4:56PM</Cell>
          </Row>
          <Row>
            <Cell>62259692_p0_master1200</Cell>
            <Cell>120 KB</Cell>
            <Cell>January 27, 2021 at 1:56AM</Cell>
          </Row>
        </TableBody>
      </Table>
    </ResizableTableContainer>
  );
}

----------------------------------------

TITLE: Basic Provider Setup with Theme
DESCRIPTION: Shows how to set up a basic Provider component as the root of a React Spectrum application, including theme configuration and a button component.

LANGUAGE: tsx
CODE:
import {Provider} from '@react-spectrum/provider';
import {theme} from '@react-spectrum/theme-default';
import {Button} from '@react-spectrum/button';

function App() {
  return (
    <Provider theme={theme}>
      <Button variant="accent">
        Hello React Spectrum!
      </Button>
    </Provider>
  );
}

----------------------------------------

TITLE: Implementing DateRangePicker with Unavailable Dates in React Spectrum
DESCRIPTION: This example demonstrates how to implement a DateRangePicker with unavailable date ranges using the isDateUnavailable prop and validating selections to prevent ranges that include unavailable dates. It creates disabled ranges for specific date intervals.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

function Example() {
  let now = today(getLocalTimeZone());
  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  return (
    <DateRangePicker
      label="Trip dates"
      minValue={today(getLocalTimeZone())}
      /*- begin highlight -*/
      isDateUnavailable={date => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0)}
      validate={value => disabledRanges.some(interval => value && value.end.compare(interval[0]) >= 0 && value.start.compare(interval[1]) <= 0) ? 'Selected date range may not include unavailable dates.' : null}
      /*- end highlight -*/
      validationBehavior="native" />
  );
}

----------------------------------------

TITLE: Styling a ComboBox with CSS
DESCRIPTION: Custom CSS styling for the ComboBox component and its child elements. The styles define appearance for the input field, dropdown button, popover, and list items, including states like focus, pressed, and selected.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-ComboBox {
  color: var(--text-color);

  .react-aria-Input {
    margin: 0;
    font-size: 1.072rem;
    background: var(--field-background);
    color: var(--field-text-color);
    border: 1px solid var(--border-color);
    border-radius: 6px;
    padding: 0.286rem 2rem 0.286rem 0.571rem;
    vertical-align: middle;
    outline: none;

    &[data-focused] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -1px;
    }
  }

  .react-aria-Button {
    background: var(--highlight-background);
    color: var(--highlight-foreground);
    forced-color-adjust: none;
    border-radius: 4px;
    border: none;
    margin-left: -1.714rem;
    width: 1.429rem;
    height: 1.429rem;
    padding: 0;
    font-size: 0.857rem;
    cursor: default;

    &[data-pressed] {
      box-shadow: none;
      background: var(--highlight-background);
    }
  }
}

.react-aria-Popover[data-trigger=ComboBox] {
  width: var(--trigger-width);

  .react-aria-ListBox {
    display: block;
    width: unset;
    max-height: inherit;
    min-height: unset;
    border: none;

    .react-aria-Header {
      padding-left: 1.571rem;
    }
  }

  .react-aria-ListBoxItem {
    padding: 0 0.571rem 0 1.571rem;

    &[data-focus-visible] {
      outline: none;
    }

    &[data-selected] {
      font-weight: 600;
      background: unset;
      color: var(--text-color);

      &::before {
        content: '✓';
        content: '✓' / '';
        alt: ' ';
        position: absolute;
        top: 4px;
        left: 4px;
      }
    }

    &[data-focused],
    &[data-pressed] {
      background: var(--highlight-background);
      color: var(--highlight-foreground);
    }
  }
}

----------------------------------------

TITLE: Implementing a Color Area Component with useColorArea in React
DESCRIPTION: This code demonstrates how to build a complete, accessible color area component with a draggable thumb to adjust color channel values. It uses useColorArea and useColorAreaState hooks to manage state and handle interactions.

LANGUAGE: TSX
CODE:
import {useColorArea} from '@react-aria/color';
import {useColorAreaState} from '@react-stately/color';
import {useFocusRing} from '@react-aria/focus';

const SIZE = 192;
const FOCUSED_THUMB_SIZE = 28;
const THUMB_SIZE = 20;
const BORDER_RADIUS = 4;

function ColorArea(props) {
  let inputXRef = React.useRef(null);
  let inputYRef = React.useRef(null);
  let containerRef = React.useRef(null);

  let state = useColorAreaState(props);

  let {isDisabled} = props;

  let {
    colorAreaProps,
    xInputProps,
    yInputProps,
    thumbProps
  } = useColorArea({...props, inputXRef, inputYRef, containerRef}, state);

  let {focusProps, isFocusVisible} = useFocusRing();

  return (
    <div
      ref={containerRef}
      {...colorAreaProps}
      style={{
        ...colorAreaProps.style,
        width: SIZE,
        height: SIZE,
        borderRadius: BORDER_RADIUS,
        background: isDisabled ? 'rgb(142, 142, 142)' : colorAreaProps.style.background,
        opacity: isDisabled ? 0.3 : undefined
      }}>
      <div
        {...thumbProps}
        style={{
          ...thumbProps.style,
          background: isDisabled ? 'rgb(142, 142, 142)' : state.getDisplayColor().toString('css'),
          border: `2px solid ${isDisabled ? 'rgb(142, 142, 142)' : 'white'}`,
          borderRadius: '50%',
          boxShadow: '0 0 0 1px black, inset 0 0 0 1px black',
          boxSizing: 'border-box',
          height: isFocusVisible ? FOCUSED_THUMB_SIZE + 4 : THUMB_SIZE,
          width: isFocusVisible ? FOCUSED_THUMB_SIZE + 4 : THUMB_SIZE
        }}>
        <input ref={inputXRef} {...xInputProps} {...focusProps} />
        <input ref={inputYRef} {...yInputProps} {...focusProps} />
      </div>
    </div>
  );
};

<ColorArea />

----------------------------------------

TITLE: RadioGroup Integration with HTML Forms
DESCRIPTION: Example showing how to integrate RadioGroup with HTML forms using the name prop for form submission functionality.

LANGUAGE: tsx
CODE:
<MyRadioGroup label="Favorite pet" name="pet">
  <Radio value="dogs">Dogs</Radio>
  <Radio value="cats">Cats</Radio>
</MyRadioGroup>

----------------------------------------

TITLE: Creating a Reusable Disclosure Component in React Aria
DESCRIPTION: Example of a reusable Disclosure component that abstracts the structure and styling. This custom component accepts title, children, and other props, making it easier to create consistent disclosures throughout an application.

LANGUAGE: tsx
CODE:
import type {DisclosureProps} from 'react-aria-components';

interface MyDisclosureProps extends Omit<DisclosureProps, 'children'> {
  title?: string,
  children?: React.ReactNode
}

function MyDisclosure({title, children, ...props}: MyDisclosureProps) {
  return (
    <Disclosure {...props}>
      <Heading>
        <Button slot="trigger">
          <svg viewBox="0 0 24 24">
            <path d="m8.25 4.5 7.5 7.5-7.5 7.5" />
          </svg>
          {title}
        </Button>
      </Heading>
      <DisclosurePanel>
        <p>{children}</p>
      </DisclosurePanel>
    </Disclosure>
  )
}

<DisclosureGroup defaultExpandedKeys={["system"]}>
  <MyDisclosure id="system" title="System Requirements" >
    Details about system requirements here
  </MyDisclosure>
  <MyDisclosure id="personal" title="Personal Information" >
    Details about personal information here
  </MyDisclosure>
</DisclosureGroup>

----------------------------------------

TITLE: Implementing ListBox with Disabled Items
DESCRIPTION: Example showing how to disable specific items in a ListBox using the disabledKeys prop. This demonstrates disabling items across multiple sections while maintaining the overall structure.

LANGUAGE: tsx
CODE:
<ListBox width="size-2400" aria-label="Pick your favorite" disabledKeys={["Snake", "Ross"]} selectionMode="single">
  <Section title="Animals">
    <Item key="Aardvark">Aardvark</Item>
    <Item key="Kangaroo">Kangaroo</Item>
    <Item key="Snake">Snake</Item>
  </Section>
  <Section title="People">
    <Item key="Danni">Danni</Item>
    <Item key="Devon">Devon</Item>
    <Item key="Ross">Ross</Item>
  </Section>
</ListBox>

----------------------------------------

TITLE: Implementing Dynamic Submenus with Recursive Rendering
DESCRIPTION: Example of dynamically generating nested menus by using a recursive function to render items with children as submenus.

LANGUAGE: tsx
CODE:
import {Menu, Popover, SubmenuTrigger} from 'react-aria-components';

let items = [
  {id: 'cut', name: 'Cut'},
  {id: 'copy', name: 'Copy'},
  {id: 'delete', name: 'Delete'},
  {id: 'share', name: 'Share', children: [
    {id: 'sms', name: 'SMS'},
    {id: 'x', name: 'X'},
    {id: 'email', name: 'Email', children: [
      {id: 'work', name: 'Work'},
      {id: 'personal', name: 'Personal'},
    ]}
  ]}
];

<MyMenuButton label="Actions" items={items}>
  {function renderSubmenu(item) {
    if (item.children) {
      return (
        <SubmenuTrigger>
          <MyItem key={item.name}>{item.name}</MyItem>
          <Popover>
            <Menu items={item.children}>
              {(item) => renderSubmenu(item)}
            </Menu>
          </Popover>
        </SubmenuTrigger>
      );
    } else {
      return <MyItem key={item.name}>{item.name}</MyItem>;
    }
  }}
</MyMenuButton>

----------------------------------------

TITLE: Building a Complete RGBA Color Picker
DESCRIPTION: Demonstrates how to create a complete RGBA color picker by combining ColorArea for adjusting two channels (red and green) with ColorSliders for the third channel (blue) and alpha transparency.

LANGUAGE: tsx
CODE:
import {ColorArea, ColorSlider} from '@react-spectrum/color';
import {Flex} from '@react-spectrum/layout';
import {Label} from '@react-spectrum/label';
import {parseColor} from '@react-stately/color';

function Example() {
  let [color, setColor] = React.useState(parseColor('#ff00ff'));
  let [redChannel, greenChannel, blueChannel] = color.getColorChannels();
  return (
    <fieldset style={{border: 0}}>
      <legend>{color.getColorSpace().toUpperCase()}A Example</legend>
      <Flex direction="column">
        <ColorArea xChannel={redChannel} yChannel={greenChannel} value={color} onChange={setColor} />
        <ColorSlider channel={blueChannel} value={color} onChange={setColor} />
        <ColorSlider channel="alpha" value={color} onChange={setColor} />
        <p>Current value: {color.toString('css')}</p>
      </Flex>
    </fieldset>
  );
}

----------------------------------------

TITLE: Implementing Swipable Email List with Framer Motion and React Aria Components
DESCRIPTION: This component creates an interactive email list with swipable functionality using Framer Motion for animations and React Aria Components for accessibility. It supports item selection, deletion, and smooth visual transitions when items are removed from the list.

LANGUAGE: tsx
CODE:
import { Button, GridListItem, GridList } from "react-aria-components";
import type {Selection, SelectionMode} from 'react-aria-components';
import {
  motion,
  animate,
  AnimatePresence,
  useMotionValue,
  useIsPresent,
  useMotionTemplate,
  useMotionValueEvent
} from "framer-motion";
import { useRef, useState } from "react";
import type {CSSProperties} from 'react';

const MotionItem = motion(GridListItem);
const inertiaTransition = {
  type: "inertia" as const,
  bounceStiffness: 300,
  bounceDamping: 40,
  timeConstant: 300
};

function SwipableList() {
  let [items, setItems] = useState(messages.emails);
  let [selectedKeys, setSelectedKeys] = useState<Selection>(new Set());
  let [selectionMode, setSelectionMode] = useState<SelectionMode>("none");
  let onDelete = () => {
    setItems(items.filter((i) => selectedKeys !== 'all' && !selectedKeys.has(i.id)));
    setSelectedKeys(new Set());
    setSelectionMode("none");
  };

  return (
    <div className="flex flex-col h-full max-h-[500px] sm:w-[400px] -mx-[14px] sm:mx-0">
      {/* Toolbar */}
      <div className="flex pb-4 justify-between">
        <Button
          className="text-blue-600 text-lg outline-hidden bg-transparent border-none transition pressed:text-blue-700 focus-visible:ring-3 disabled:text-gray-400"
          style={{ opacity: selectionMode === "none" ? 0 : 1 }}
          isDisabled={selectedKeys !== 'all' && selectedKeys.size === 0}
          onPress={onDelete}
        >
          Delete
        </Button>
        <Button
          className="text-blue-600 text-lg outline-hidden bg-transparent border-none transition pressed:text-blue-700 focus-visible:ring-3"
          onPress={() => {
            setSelectionMode((m) => (m === "none" ? "multiple" : "none"));
            setSelectedKeys(new Set());
          }}
        >
          {selectionMode === "none" ? "Edit" : "Cancel"}
        </Button>
      </div>
      <GridList
        className="relative flex-1 overflow-auto"
        aria-label="Inbox"
        onAction={selectionMode === "none" ? () => {} : undefined}
        selectionMode={selectionMode}
        selectedKeys={selectedKeys}
        onSelectionChange={setSelectedKeys}
      >
        <AnimatePresence>
          {items.map((item) => (
            <ListItem
              key={item.id}
              id={item.id}
              textValue={[item.sender, item.date, item.subject, item.message].join('\n')}
              onRemove={() => setItems(items.filter((i) => i !== item))}
            >
              <div className="flex flex-col text-md cursor-default">
                <div className="flex justify-between">
                  <p className="font-bold text-lg m-0">{item.sender}</p>
                  <p className="text-gray-500 m-0">{item.date}</p>
                </div>
                <p className="m-0">{item.subject}</p>
                <p className="line-clamp-2 text-gray-500 dark:text-gray-400 m-0">{item.message}</p>
              </div>
            </ListItem>
          ))}
        </AnimatePresence>
      </GridList>
    </div>
  );
}

function ListItem({ id, children, textValue, onRemove }) {
  let ref = useRef(null);
  let x = useMotionValue(0);
  let isPresent = useIsPresent();
  let xPx = useMotionTemplate`${x}px`;

  // Align the text in the remove button to the left if the
  // user has swiped at least 80% of the width.
  let [align, setAlign] = useState("end");
  useMotionValueEvent(x, "change", (x) => {
    let a = x < -ref.current?.offsetWidth * 0.8 ? "start" : "end";
    setAlign(a);
  });

  return (
    <MotionItem
      id={id}
      textValue={textValue}
      className="outline-hidden group relative overflow-clip border-t border-0 border-solid last:border-b border-gray-200 dark:border-gray-800 pressed:bg-gray-200 dark:pressed:bg-gray-800 selected:bg-gray-200 dark:selected:bg-gray-800 focus-visible:outline focus-visible:outline-blue-600 focus-visible:-outline-offset-2"
      layout
      transition={{ duration: 0.25 }}
      exit={{ opacity: 0 }}


----------------------------------------

TITLE: Implementing Dynamic Collections with Menu in React Spectrum
DESCRIPTION: Example showing how to use a dynamic collection with the Menu component by passing an iterable list of items using the 'items' prop. Each item has an id property which is used by the onAction callback.

LANGUAGE: tsx
CODE:
function Example() {
  let items = [
    {id: 1, name: 'New'},
    {id: 2, name: 'Open'},
    {id: 3, name: 'Close'},
    {id: 4, name: 'Save'},
    {id: 5, name: 'Duplicate'},
    {id: 6, name: 'Rename'},
    {id: 7, name: 'Move'}
  ];

  return (
    <MyMenuButton label="Actions" items={items} onAction={id => alert(id)}>
      {(item) => <MenuItem>{item.name}</MenuItem>}
    </MyMenuButton>
  );
}

----------------------------------------

TITLE: Handling DatePicker onChange Events
DESCRIPTION: Example showing how to use the onChange event to update a separate element with a formatted version of the selected date in the user's locale and local time zone.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@react-aria/i18n';

function Example() {
  let [date, setDate] = React.useState(parseDate('1985-07-03'));
  let formatter = useDateFormatter({dateStyle: 'full'});

  return (
    <>
      <MyDatePicker label="Birth date" value={date} onChange={setDate} />
      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}</p>
    </>
  );
}

----------------------------------------

TITLE: Creating a Static TableView with Multiple Selection
DESCRIPTION: Example of implementing a basic TableView with static content. This table has three columns with text alignment options and demonstrates the selectionMode property.

LANGUAGE: tsx
CODE:
<TableView aria-label="Example table with static contents" selectionMode="multiple">
  <TableHeader>
    <Column>Name</Column>
    <Column>Type</Column>
    <Column align="end">Date Modified</Column>
  </TableHeader>
  <TableBody>
    <Row>
      <Cell>Games</Cell>
      <Cell>File folder</Cell>
      <Cell>6/7/2020</Cell>
    </Row>
    <Row>
      <Cell>Program Files</Cell>
      <Cell>File folder</Cell>
      <Cell>4/7/2021</Cell>
    </Row>
    <Row>
      <Cell>bootmgr</Cell>
      <Cell>System file</Cell>
      <Cell>11/20/2010</Cell>
    </Row>
    <Row>
      <Cell>log.txt</Cell>
      <Cell>Text Document</Cell>
      <Cell>1/18/2016</Cell>
    </Row>
  </TableBody>
</TableView>

----------------------------------------

TITLE: Defining Card Component Interfaces in TypeScript
DESCRIPTION: TypeScript interfaces defining the structure and props for the Card component and its subcomponents including CardCoverPhoto, CardPreview, CardBody, and CardFooter. Specifies available variants, sizes, selection capabilities, and content structure options.

LANGUAGE: typescript
CODE:
interface Card {
  variant?: 'quiet' | 'gallery', // Change to layout names instead?
  size?: 'L' | 'S',
  allowsSelection?: boolean,
  isSelected?: boolean,
  onSelectionChange?: (isSelected: boolean) => void,
  quickActions?: ReactElement<QuickActions>,
  actionMenu?: ReactElement<ActionMenu>
}

interface CardCoverPhoto {
  src: string,
  children?: ReactNode
}

interface CardPreview {
  children: ReactNode
}

interface CardBody {
  title?: ReactNode,
  subtitle?: ReactNode,
  description?: ReactNode
}

interface CardFooter {
  children: ReactNode
}

----------------------------------------

TITLE: Creating Custom Drag Previews with useDragAndDrop in React
DESCRIPTION: This example demonstrates how to create a custom drag preview for dragged items by implementing the renderDragPreview function in the useDragAndDrop hook. The custom preview shows the name of the first item and a badge with the total count of dragged items.

LANGUAGE: tsx
CODE:
import {useListData} from 'react-stately';
import {useDragAndDrop} from 'react-aria-components';

function Example() {
  let {dragAndDropHooks} = useDragAndDrop({
    // ...
    getItems: (keys) => [...keys].map(key => ({
      'text/plain': list.getItem(key).name
    })),
    onReorder(e) {
      if (e.target.dropPosition === 'before') {
        list.moveBefore(e.target.key, e.keys);
      } else if (e.target.dropPosition === 'after') {
        list.moveAfter(e.target.key, e.keys);
      }
    },
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    }
  });

  let list = useListData({
    initialItems: [
      {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},
      {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},
      {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},
      {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}
    ]
  });

  return (
    <Table
      aria-label="Files"
      selectionMode="multiple"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader>
        <Column></Column>
        <Column><MyCheckbox slot="selection" /></Column>
        <Column isRowHeader>Name</Column>
        <Column>Type</Column>
        <Column>Date Modified</Column>
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            <Cell><Button slot="drag">≡</Button></Cell>
            <Cell><MyCheckbox slot="selection" /></Cell>
            <Cell>{item.name}</Cell>
            <Cell>{item.type}</Cell>
            <Cell>{item.date}</Cell>
          </Row>
        )}
      </TableBody>
    </Table>
  );
  // ...
}

LANGUAGE: css
CODE:
.drag-preview {
  width: 150px;
  padding: 4px 8px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 4px;
  background: var(--highlight-background);
  color: white;
  border-radius: 4px;

  .badge {
    background: var(--highlight-foreground);
    color: var(--highlight-background);
    padding: 0 8px;
    border-radius: 4px;
  }
}

----------------------------------------

TITLE: Basic Checkbox Implementation with React Aria
DESCRIPTION: A simple implementation of a checkbox component using the useCheckbox hook from React Aria and useToggleState from React Stately. This creates an accessible checkbox with a visible label.

LANGUAGE: tsx
CODE:
import {useCheckbox} from '@react-aria/checkbox';
import {useToggleState} from '@react-stately/toggle';

function Checkbox(props) {
  let {children} = props;
  let state = useToggleState(props);
  let ref = React.useRef(null);
  let {inputProps} = useCheckbox(props, state, ref);

  return (
    <label style={{display: 'block'}}>
      <input {...inputProps} ref={ref} />
      {children}
    </label>
  );
}

<Checkbox>Unsubscribe</Checkbox>

----------------------------------------

TITLE: Using React Server Actions with React Spectrum Form Components
DESCRIPTION: This example shows how to integrate React Server Actions with React Spectrum's Form component using useFormState hook to handle server-side validation errors.

LANGUAGE: tsx
CODE:
// app/add-form.tsx
'use client';

import {useFormState} from 'react-dom';
import {Form, TextField, Label, Input, FieldError, Button} from 'react-aria-components';
import {createTodo} from '@/app/actions';

export function AddForm() {
  let [{errors}, formAction] = useFormState(createTodo, {errors: {}});

  return (
    <Form action={formAction} validationErrors={errors}>
      <TextField name="todo">
        <Label>Task</Label>
        <Input />
        <FieldError />
      </TextField>
      <Button type="submit">Add</Button>
    </Form>
  );
}

----------------------------------------

TITLE: Example Table with Multi-Selection
DESCRIPTION: Demonstrates a table with multiple selection enabled, showing how to use the selectionMode prop to add selection checkboxes automatically to a table.

LANGUAGE: tsx
CODE:
<Table aria-label="Table with selection" selectionMode="multiple">
  <TableHeader>
    <Column>Name</Column>
    <Column>Type</Column>
    <Column>Level</Column>
  </TableHeader>
  <TableBody>
    <Row key="1">
      <Cell>Charizard</Cell>
      <Cell>Fire, Flying</Cell>
      <Cell>67</Cell>
    </Row>
    <Row key="2">
      <Cell>Blastoise</Cell>
      <Cell>Water</Cell>
      <Cell>56</Cell>
    </Row>
    <Row key="3">
      <Cell>Venusaur</Cell>
      <Cell>Grass, Poison</Cell>
      <Cell>83</Cell>
    </Row>
    <Row key="4">
      <Cell>Pikachu</Cell>
      <Cell>Electric</Cell>
      <Cell>100</Cell>
    </Row>
  </TableBody>
</Table>

----------------------------------------

TITLE: DatePicker with Unavailable Dates
DESCRIPTION: Shows how to mark certain dates as unavailable using the isDateUnavailable callback. This example makes weekends and specific date ranges unavailable for selection.

LANGUAGE: tsx
CODE:
import {today, isWeekend} from '@internationalized/date';
import {useLocale} from '@react-aria/i18n';

function Example() {
  let now = today(getLocalTimeZone());
  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  let {locale} = useLocale();
  let isDateUnavailable = (date: DateValue) => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);

  return (
    <MyDatePicker
      label="Appointment date"
      minValue={today(getLocalTimeZone())}
      /*- begin highlight -*/
      isDateUnavailable={isDateUnavailable}
      /*- end highlight -*/
    />
  );
}

----------------------------------------

TITLE: Implementing Text Paste Functionality in React with useClipboard
DESCRIPTION: This code demonstrates a component that can receive pasted text content with fallback support for different text formats. It processes both custom app-specific formats and standard plain text, parsing JSON when available.

LANGUAGE: tsx
CODE:
function Pasteable() {
  let [pasted, setPasted] = React.useState(null);
  let {clipboardProps} = useClipboard({
    async onPaste(items) {
      let pasted = await Promise.all(
        items
          .filter(item => item.kind === 'text' && (item.types.has('text/plain') || item.types.has('my-app-custom-type')))
          .map(async (item: TextDropItem) => {
            if (item.types.has('my-app-custom-type')) {
              return JSON.parse(await item.getText('my-app-custom-type'));
            } else {
              return {message: await item.getText('text/plain')};
            }
          })
      );
      setPasted(pasted);
    }
  });

  let message = ['Paste here'];
  if (pasted) {
    message = pasted.map(d => {
      let message = d.message;
      if (d.style === 'bold') {
        message = <strong>{message}</strong>;
      } else if (d.style === 'italic') {
        message = <em>{message}</em>;
      }
      return <div>{message}</div>;
    });
  }

  return (
    <div role="textbox" tabIndex={0} {...clipboardProps}>
      <div>{message || 'Paste here'}</div>
      <kbd>⌘V</kbd>
    </div>
  );
}

----------------------------------------

TITLE: Implementing Asynchronous Loading in ComboBox
DESCRIPTION: Demonstrates how to handle asynchronous loading of data in a ComboBox using the useAsyncList hook to fetch and filter data from a server based on user input.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

function AsyncLoadingExample() {
  let list = useAsyncList({
    async load({signal, filterText}) {
      let res = await fetch(
        `https://swapi.py4e.com/api/people/?search=${filterText}`,
        {signal}
      );
      let json = await res.json();

      return {
        items: json.results
      };
    }
  });

  return (
    <ComboBox
      label="Star Wars Character Lookup"
      items={list.items}
      inputValue={list.filterText}
      onInputChange={list.setFilterText}>
      {(item) => <Item key={item.name}>{item.name}</Item>}
    </ComboBox>
  );
}

----------------------------------------

TITLE: Implementing a Range Calendar Example
DESCRIPTION: A simple implementation of a RangeCalendar component that demonstrates the usage of the CalendarGrid and CalendarCell components defined earlier. This example renders a calendar that allows selecting a date range.

LANGUAGE: tsx
CODE:
<RangeCalendar aria-label="Trip dates" />

----------------------------------------

TITLE: Tailwind CSS Configuration for React Aria Components
DESCRIPTION: Configuration instructions for using the tailwindcss-react-aria-components plugin with both Tailwind CSS v4 and v3. Shows how to import the plugin in CSS for v4 or add it to the Tailwind config file for v3.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components')
  ]
};

----------------------------------------

TITLE: Implementing Server Action Logic for Form Validation
DESCRIPTION: This server-side code example shows the implementation of a React Server Action that validates form data and returns appropriate error messages for use with React Spectrum components.

LANGUAGE: tsx
CODE:
// app/actions.ts
'use server';

export async function createTodo(prevState: any, formData: FormData) {
  try {
    // Create the todo...
  } catch (err) {
    return {
      errors: {
        todo: 'Invalid todo.'
      }
    };
  }
}

----------------------------------------

TITLE: Implementing a JPEG-only DropZone with Visual Feedback in React Spectrum
DESCRIPTION: This example demonstrates a DropZone component that only accepts JPEG images. It shows how to use the getDropOperation prop to provide visual feedback when a compatible file is dragged over the drop zone, and how to handle the dropped files using onDrop. The example also includes a FileTrigger component for browsing files.

LANGUAGE: tsx
CODE:
import {FileTrigger} from '@adobe/react-spectrum';

function Example() {
  let [filledSrc, setFilledSrc] = React.useState(null);

  return (
    <>
      <Draggable />
      <DraggableImage />
      <DropZone
        maxWidth="size-3000"
        isFilled={!!filledSrc}
        getDropOperation={(types) => types.has('image/jpeg') ? 'copy' : 'cancel'}
        onDrop={async (e) => {
          e.items.find(async (item) => {
            if (item.kind === 'file') {
              if (item.type === 'image/jpeg') {
                let file = await item.getFile();
                setFilledSrc({
                  type: file.type,
                  name: file.name
                })
              }
            } else if (item.kind === 'text') {
              let file = await item.getText('image/jpeg');
              setFilledSrc({
                type: 'image/jpeg',
                name: file
              })
            }
          });
        }}>
        <IllustratedMessage>
          <Upload />
          <Heading>
            {filledSrc ? `${filledSrc.type} ${filledSrc.name}` : 'Drag and drop here'}
          </Heading>
          <Content>
            <FileTrigger
              acceptedFileTypes={['image/jpeg']}
              onSelect={(e) => {
                let file = (Array.from(e)).find((file) => file.type === "image/jpeg")
                if (file) {
                  setFilledSrc({
                    type: file.type,
                    name: file.name
                  })
                }
              }}>
              <Button variant="primary">Browse</Button>
            </FileTrigger>
          </Content>
        </IllustratedMessage>
      </DropZone>
    </>
  );
}

----------------------------------------

TITLE: Multiple Expanded Sections in Accordion
DESCRIPTION: Demonstrates how to allow multiple expanded sections simultaneously using the allowsMultipleExpanded prop with both personal and billing sections expanded by default.

LANGUAGE: tsx
CODE:
<Accordion allowsMultipleExpanded defaultExpandedKeys={['personal', 'billing']}>
  <Disclosure id="personal">
    <DisclosureTitle>Personal Information</DisclosureTitle>
    <DisclosurePanel>
      Personal information form here.
    </DisclosurePanel>
  </Disclosure>
  <Disclosure id="billing">
    <DisclosureTitle>Billing Address</DisclosureTitle>
    <DisclosurePanel>
      Billing address form here.
    </DisclosurePanel>
  </Disclosure>
</Accordion>

----------------------------------------

TITLE: Using DatePicker with Hindi-Indian Calendar System in React Spectrum
DESCRIPTION: This example demonstrates how to implement a DatePicker with the Hindi language using the Indian calendar system. The selected dates are displayed in the Indian calendar but are converted to Gregorian calendar format when accessed via the onChange event.

LANGUAGE: tsx
CODE:
import {Provider} from '@adobe/react-spectrum';

function Example() {
  let [date, setDate] = React.useState(null);
  return (
    <Provider locale="hi-IN-u-ca-indian">
      <DatePicker label="Date" value={date} onChange={setDate} />
      <p>Selected date: {date?.toString()}</p>
    </Provider>
  );
}

----------------------------------------

TITLE: Implementing Asynchronous Loading in ComboBox with useAsyncList
DESCRIPTION: This example shows how to implement asynchronous data loading in a ComboBox using the useAsyncList hook. The component displays a progress indicator based on the loading state and supports filtering based on user input.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Character {
  name: string
}

function AsyncLoadingExample() {
  let list = useAsyncList<Character>({
    async load({signal, cursor, filterText}) {
      if (cursor) {
        cursor = cursor.replace(/^http:\/\//i, 'https://');
      }

      // If no cursor is available, then we're loading the first page,
      // filtering the results returned via a query string that
      // mirrors the ComboBox input text.
      // Otherwise, the cursor is the next URL to load,
      // as returned from the previous page.
      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=${filterText}`, {signal});
      let json = await res.json();

      return {
        items: json.results,
        cursor: json.next
      };
    }
  });

  return (
    <ComboBox
      label="Star Wars Character Lookup"
      items={list.items}
      inputValue={list.filterText}
      onInputChange={list.setFilterText}
      loadingState={list.loadingState}
      onLoadMore={list.loadMore}>
      {item => <Item key={item.name}>{item.name}</Item>}
    </ComboBox>
  );
}

----------------------------------------

TITLE: Implementing Single Selection in ActionGroup with React
DESCRIPTION: Demonstrates how to use the selectionMode prop set to 'single' with defaultSelectedKeys to create an ActionGroup with single selection capability.

LANGUAGE: tsx
CODE:
<ActionGroup selectionMode="single" defaultSelectedKeys={['list']}>
  <Item key="grid">Grid view</Item>
  <Item key="list">List view</Item>
  <Item key="gallery">Gallery view</Item>
</ActionGroup>

----------------------------------------

TITLE: Implementing ComboBox Using React Aria Components in JSX
DESCRIPTION: Example showing how to compose React Aria Components to create a ComboBox with Label, Input, Button, Popover, ListBox, and Item components. Demonstrates the compositional API design where each component maps to a single DOM element.

LANGUAGE: JSX
CODE:
import {Button, ComboBox, Input, Item, Label, ListBox, Popover} from 'react-aria-components';

<ComboBox>
  <Label>Favorite Animal</Label>
  <div>
    <Input />
    <Button>▼</Button>
  </div>
  <Popover>
    <ListBox>
      <Item>Cat</Item>
      <Item>Dog</Item>
      <Item>Kangaroo</Item>
    </ListBox>
  </Popover>
</ComboBox>

----------------------------------------

TITLE: Implementing Basic Table Structure with React Aria Components
DESCRIPTION: Demonstrates the basic structure of a Table component using React Aria Components, including the ResizableTableContainer, TableHeader, TableBody, Columns, Rows, and Cells. Also shows how to implement selection checkboxes and drag buttons.

LANGUAGE: tsx
CODE:
import {Table, TableHeader, TableBody, Column, Row, Cell, Button, Checkbox, ResizableTableContainer, ColumnResizer} from 'react-aria-components';

<ResizableTableContainer>
  <Table>
    <TableHeader>
      <Column />
      <Column><Checkbox slot="selection" /></Column>
      <Column><ColumnResizer /></Column>
      <Column>
        <Column />
        <Column />
      </Column>
    </TableHeader>
    <TableBody>
      <Row>
        <Cell><Button slot="drag" /></Cell>
        <Cell><Checkbox slot="selection" /></Cell>
        <Cell />
        <Cell />
        <Cell />
      </Row>
    </TableBody>
  </Table>
</ResizableTableContainer>

----------------------------------------

TITLE: Configuring Toast Placement
DESCRIPTION: Shows how to configure the placement of toast notifications by setting the placement prop on the ToastContainer.

LANGUAGE: tsx
CODE:
<ToastContainer placement="bottom end" />

----------------------------------------

TITLE: Form with Submit and Reset Event Handlers
DESCRIPTION: Example demonstrating form submission and reset event handling, including retrieving form data with FormData API.

LANGUAGE: tsx
CODE:
function Example() {
  let [action, setAction] = React.useState(null);
  return (
    <Form
      onSubmit={e => {
        e.preventDefault();
        let data = Object.fromEntries(new FormData(e.currentTarget));
        setAction(`submit ${JSON.stringify(data)}`);
      }}
      onReset={() => setAction('reset')}
    >
      <TextField name="username" isRequired>
        <Label>Username</Label>
        <Input />
        <FieldError />
      </TextField>
      <TextField name="password" type="password" isRequired>
        <Label>Password</Label>
        <Input />
        <FieldError />
      </TextField>
      <div style={{display: 'flex', gap: 8}}>
        <Button type="submit">Submit</Button>
        <Button type="reset">Reset</Button>
      </div>
      {action && <div>Action: <code>{action}</code></div>}
    </Form>
  );
}

----------------------------------------

TITLE: Updating Items in a List in React
DESCRIPTION: Demonstrates how to modify an existing item in the list using the update method, which requires the item's key and the new item data.

LANGUAGE: tsx
CODE:
list.update('Snake', {name: 'Rattle Snake'});

----------------------------------------

TITLE: Integrating ComboBox with HTML Forms
DESCRIPTION: Demonstrates how to use ComboBox in HTML forms by setting the name property. Shows two approaches: submitting item IDs (default) and submitting the input text value by setting formValue="text".

LANGUAGE: tsx
CODE:
<div style={{display: 'flex', gap: 16, flexWrap: 'wrap'}}>
  <MyComboBox
    label="Favorite Animal"
    name="favoriteAnimalId"
  >
    <ListBoxItem id="panda">Panda</ListBoxItem>
    <ListBoxItem id="cat">Cat</ListBoxItem>
    <ListBoxItem id="dog">Dog</ListBoxItem>
  </MyComboBox>
  <MyComboBox
    label="Ice cream flavor"
    name="iceCream"
    formValue="text"
    allowsCustomValue
  >
    <ListBoxItem>Chocolate</ListBoxItem>
    <ListBoxItem>Mint</ListBoxItem>
    <ListBoxItem>Strawberry</ListBoxItem>
    <ListBoxItem>Vanilla</ListBoxItem>
  </MyComboBox>
</div>

----------------------------------------

TITLE: Server-Side Filtering with useAsyncList in React
DESCRIPTION: Implementation of server-side filtering with useAsyncList. This example uses the Star Wars API and connects the filtering to a ComboBox component, managing both the input value and loading states.

LANGUAGE: tsx
CODE:
let list = useAsyncList({
  async load({signal, filterText}) {
    let res = await fetch(`https://swapi.py4e.com/api/people/?search=${filterText}`, {signal});
    let json = await res.json();

    return {
      items: json.results
    };
  }
});

<ComboBox
  label="Star Wars Character Lookup"
  items={list.items}
  inputValue={list.filterText}
  onInputChange={list.setFilterText}
  loadingState={list.loadingState}>
  {item => <Item key={item.name}>{item.name}</Item>}
</ComboBox>

----------------------------------------

TITLE: Dynamic Menu Items with Data Collection
DESCRIPTION: Shows how to create a Menu with dynamic items from a data collection. The items are passed as an array to the Menu component, which improves performance through automatic caching of rendered items.

LANGUAGE: tsx
CODE:
function Example() {
  let menuItems = [
    {name: 'Cut'},
    {name: 'Copy'},
    {name: 'Paste'},
    {name: 'Replace'}
  ];

  return (
    <MenuTrigger>
      <ActionButton>
        Edit
      </ActionButton>
      <Menu items={menuItems}>
        {item => <Item key={item.name}>{item.name}</Item>}
      </Menu>
    </MenuTrigger>
  );
}

----------------------------------------

TITLE: Styling React Aria Components with CSS Class Names
DESCRIPTION: Example of targeting React Aria components using their default class names in CSS. Each component includes a default class name following the react-aria-ComponentName convention when no custom className is provided.

LANGUAGE: css
CODE:
.react-aria-Select {
  /* ... */
}

----------------------------------------

TITLE: Implementing Complex Menu Items with useMenuItem in React Spectrum
DESCRIPTION: This example shows how to implement menu items with complex content including titles, descriptions, and keyboard shortcuts using the useMenuItem hook to improve accessibility. The MenuItem component applies ARIA properties to the appropriate elements.

LANGUAGE: tsx
CODE:
function MenuItem({item, state}) {
  // Get props for the menu item element and child elements
  let ref = React.useRef(null);
  let {
    menuItemProps,
    labelProps,
    descriptionProps,
    keyboardShortcutProps
  } = useMenuItem({key: item.key}, state, ref);

  // Pull out the three expected children. We will clone them
  // and add the necessary props for accessibility.
  let [title, description, shortcut] = item.rendered;

  return (
    <li {...menuItemProps} ref={ref}>
      <div>
        {React.cloneElement(title, labelProps)}
        {React.cloneElement(description, descriptionProps)}
      </div>
      {React.cloneElement(shortcut, keyboardShortcutProps)}
    </li>
  );
}

<MenuButton label="Actions" onAction={alert}>
  <Item textValue="Copy" key="copy">
    <div><strong>Copy</strong></div>
    <div>Copy the selected text</div>
    <kbd>⌘C</kbd>
  </Item>
  <Item textValue="Cut" key="cut">
    <div><strong>Cut</strong></div>
    <div>Cut the selected text</div>
    <kbd>⌘X</kbd>
  </Item>
  <Item textValue="Paste" key="paste">
    <div><strong>Paste</strong></div>
    <div>Paste the copied text</div>
    <kbd>⌘V</kbd>
  </Item>
</MenuButton>

----------------------------------------

TITLE: Extending DatePicker with a Custom Clear Button in TSX
DESCRIPTION: This example shows how to extend a DatePicker component with a custom clear button. It demonstrates accessing and manipulating component state through React Aria's context system, allowing developers to customize components with new features.

LANGUAGE: tsx
CODE:
// Add a clear button to a DatePicker.
function DatePickerClearButton() {
  /*- begin highlight -*/
  let state = useContext(DatePickerStateContext);
  /*- end highlight -*/

  return (
    <Button
      slot={null}
      aria-label="Clear"
      onPress={() => state.setValue(null)}>
      ✕
    </Button>
  );
}

<DatePicker>
  <Label>Date</Label>
  <Group>
    <DateInput>
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    {/*- begin highlight -*/}
    <DatePickerClearButton />
    {/*- end highlight -*/}
    <Button>▼</Button>
  </Group>
  <Popover>
    <Dialog>
      <Calendar>
        <header>
          <Button slot="previous">◀</Button>
          <Heading />
          <Button slot="next">▶</Button>
        </header>
        <CalendarGrid>
          {date => <CalendarCell date={date} />}
        </CalendarGrid>
      </Calendar>
    </Dialog>
  </Popover>
</DatePicker>

----------------------------------------

TITLE: Implementing ComboBox with React Aria Components in TSX
DESCRIPTION: An example of a React Aria ComboBox component that provides an editable input with dropdown options. It demonstrates how React Aria enables sharing common components between different patterns while maintaining a consistent API.

LANGUAGE: tsx
CODE:
<ComboBox>
  <Label>Permissions</Label>
  <Group>
    <Input />
    <Button>▼</Button>
  </Group>
  <Popover>
    <ListBox>
      <ListBoxItem>Read Only</ListBoxItem>
      <ListBoxItem>Edit</ListBoxItem>
      <ListBoxItem>Admin</ListBoxItem>
    </ListBox>
  </Popover>
</ComboBox>

----------------------------------------

TITLE: Dialog with Custom Event Handling
DESCRIPTION: Example demonstrating how to handle custom events in a Dialog by chaining the close function with user-defined callbacks for save and cancel actions.

LANGUAGE: tsx
CODE:
function Example() {
  let alertSave = (close) => {
    close();
    alert('Profile saved!');
  }

  let alertCancel = (close) => {
    close();
    alert('Profile not saved!');
  }

  return (
    <DialogTrigger>
      <ActionButton>Set Profile</ActionButton>
      {(close) => (
        <Dialog>
          <Heading>Profile</Heading>
          <Divider />
          <ButtonGroup>
            <Button variant="secondary" onPress={() => alertCancel(close)}>Cancel</Button>
            <Button autoFocus variant="accent" onPress={() => alertSave(close)}>Save</Button>
          </ButtonGroup>
          <Content>
            <Form>
              <TextField label="Name" />
              <Checkbox>Make private</Checkbox>
            </Form>
          </Content>
        </Dialog>
      )}
    </DialogTrigger>
  );
}

----------------------------------------

TITLE: Implementing a Basic Dialog with React Aria Components
DESCRIPTION: A basic example of using DialogTrigger, Modal, Dialog, and Button components to create a signup form dialog that opens when a button is clicked.

LANGUAGE: tsx
CODE:
import {DialogTrigger, Modal, Dialog, Button, Heading, TextField, Label, Input} from 'react-aria-components';

<DialogTrigger>
  <Button>Sign up…</Button>
  <Modal>
    <Dialog>
      <form>
        <Heading slot="title">Sign up</Heading>
        <TextField autoFocus>
          <Label>First Name</Label>
          <Input />
        </TextField>
        <TextField>
          <Label>Last Name</Label>
          <Input />
        </TextField>
        <Button slot="close" style={{marginTop: 8}}>
          Submit
        </Button>
      </form>
    </Dialog>
  </Modal>
</DialogTrigger>

----------------------------------------

TITLE: EditDialog Reusable Component Definition
DESCRIPTION: Reusable EditDialog component implementation that uses the useDialogContainer hook to access dismiss functionality. Used in multiple examples throughout the documentation.

LANGUAGE: tsx
CODE:
function EditDialog() {
  let dialog = useDialogContainer();

  return (
    <Dialog>
      <Heading>Edit</Heading>
      <Divider />
      <Content>
        <Form width="100%">
          <TextField autoFocus label="First Name" defaultValue="John" />
          <TextField label="Last Name" defaultValue="Smith" />
        </Form>
      </Content>
      <ButtonGroup>
        <Button variant="secondary" onPress={dialog.dismiss}>Cancel</Button>
        <Button variant="accent" onPress={dialog.dismiss}>Save</Button>
      </ButtonGroup>
    </Dialog>
  );
}

----------------------------------------

TITLE: Basic Switch Component Usage in React Aria Components
DESCRIPTION: A simple example showing how to use the Switch component from react-aria-components with basic styling.

LANGUAGE: tsx
CODE:
import {Switch} from 'react-aria-components';

<Switch>
  <div className="indicator" />
  Low power mode
</Switch>

----------------------------------------

TITLE: Implementing Custom Drag Preview in React Spectrum TableView
DESCRIPTION: Demonstrates how to create a custom drag preview for draggable items in a TableView using the renderPreview prop. This implementation shows how to extract information about dragged items and render a custom UI component as the drag preview.

LANGUAGE: tsx
CODE:
import {View} from '@react-spectrum/view';

function CustomDragPreviewExample() {
  let columns = [
    {name: 'Name', id: 'name'},
    {name: 'Type', id: 'type'},
    {name: 'Date Modified', id: 'date'}
  ];

  let list = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/3/2020'},
      {id: '2', type: 'file', name: 'Adobe XD', date: '2/2/2020'},
      {id: '3', type: 'folder', name: 'Documents', date: '5/1/2020', childNodes: []},
      {id: '4', type: 'file', name: 'Adobe InDesign', date: '5/9/2020'},
      {id: '5', type: 'folder', name: 'Utilities', date: '12/7/2020', childNodes: []},
      {id: '6', type: 'file', name: 'Adobe AfterEffects', date: '6/1/2020'}
    ]
  });
  let {dragAndDropHooks} = useDragAndDrop({
    getItems: (keys) => [...keys].map(key => {
      let item = list.getItem(key);
      return {
        'custom-app-type': JSON.stringify(item),
        'text/plain': item.name
      };
    }),
    /*- begin highlight -*/
    renderPreview: (keys, draggedKey) => (
      <View backgroundColor="gray-50" padding="size-100" borderRadius="medium" borderWidth="thin" borderColor="blue-500">
        <strong>Custom Preview</strong>
        <div>Keys: [{[...keys].join(', ')}]</div>
        <div>Dragged: {draggedKey}</div>
      </View>
    )
    /*- end highlight -*/
  });
  return (
    <TableView
      aria-label="Draggable TableView example with custom drag preview"
      selectionMode="multiple"
      height="size-3600"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader columns={columns}>
        {column => (
          <Column
            key={column.id}
            align={column.id === 'date' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </TableView>
  );
}

----------------------------------------

TITLE: Implementing a CalendarValue Component Using Context
DESCRIPTION: Creates a component that displays the currently selected date as a formatted string by accessing the Calendar's state through CalendarStateContext.

LANGUAGE: tsx
CODE:
import {CalendarStateContext} from 'react-aria-components';
import {useDateFormatter} from 'react-aria';

function CalendarValue() {
  /*- begin highlight -*/
  let state = React.useContext(CalendarStateContext)!;
  /*- end highlight -*/
  let date = state.value?.toDate(getLocalTimeZone());
  let {format} = useDateFormatter();
  let formatted = date ? format(date) : 'None';
  return <small>Selected date: {formatted}</small>;
}

<Calendar>
  <header>
    <Button slot="previous">◀</Button>
    <Heading />
    <Button slot="next">▶</Button>
  </header>
  <CalendarGrid>
    {date => <CalendarCell date={date} />}
  </CalendarGrid>
  {/*- begin highlight -*/}
  <CalendarValue />
  {/*- end highlight -*/}
</Calendar>

----------------------------------------

TITLE: Creating Reusable GridList Components in React Aria
DESCRIPTION: Demonstrates how to create reusable GridList and GridListItem components that can be used consistently throughout an application. Includes support for multi-selection, drag and drop, and custom checkboxes.

LANGUAGE: tsx
CODE:
import type {GridListProps, GridListItemProps} from 'react-aria-components';

export function MyGridList<T extends object>({children, ...props}: GridListProps<T>) {
  return (
    <GridList {...props}>
      {children}
    </GridList>
  );
}

export function MyItem({children, ...props}: GridListItemProps) {
  let textValue = typeof children === 'string' ? children : undefined;
  return (
    <GridListItem textValue={textValue} {...props}>
      {({selectionMode, selectionBehavior, allowsDragging}) => <>
        {/* Add elements for drag and drop and selection. */}
        {allowsDragging && <Button slot="drag">≡</Button>}
        {selectionMode === 'multiple' && selectionBehavior === 'toggle' && <MyCheckbox slot="selection" />}
        {children}
      </>}
    </GridListItem>
  );
}

<MyGridList aria-label="Ice cream flavors" selectionMode="multiple">
  <MyItem>Chocolate</MyItem>
  <MyItem>Mint</MyItem>
  <MyItem>Strawberry</MyItem>
  <MyItem>Vanilla</MyItem>
</MyGridList>

----------------------------------------

TITLE: Implementing Controlled Open State in Select
DESCRIPTION: Example demonstrating how to control the open state of a Select component using isOpen and onOpenChange props with React state.

LANGUAGE: tsx
CODE:
function Example() {
  let [open, setOpen] = React.useState(false);

  return (
    <>
      <p>Select is {open ? 'open' : 'closed'}</p>
      <MySelect label="Choose frequency" isOpen={open} onOpenChange={setOpen}>
        <ListBoxItem id="rarely">Rarely</ListBoxItem>
        <ListBoxItem id="sometimes">Sometimes</ListBoxItem>
        <ListBoxItem id="always">Always</ListBoxItem>
      </MySelect>
    </>
  );
}

----------------------------------------

TITLE: Implementing a SliderNumberField Component with SliderStateContext in React
DESCRIPTION: This example demonstrates how to create a custom SliderNumberField component that accesses the Slider's state via SliderStateContext. The component allows users to directly input a numeric value that updates the slider position.

LANGUAGE: tsx
CODE:
import {SliderStateContext, LabelContext, NumberField, Input, useSlottedContext} from 'react-aria-components';

function SliderNumberField() {
  /*- begin highlight -*/
  let state = React.useContext(SliderStateContext)!;
  /*- end highlight -*/
  let labelProps = useSlottedContext(LabelContext)!;
  return (
    <NumberField
      aria-labelledby={labelProps.id}
      value={state.values[0]}
      onChange={v => state.setThumbValue(0, v)}>
      <Input />
    </NumberField>
  );
}

<Slider defaultValue={30}>
  <Label>Opacity</Label>
  {/*- begin highlight -*/}
  <SliderNumberField />
  {/*- end highlight -*/}
  <SliderTrack>
    <SliderThumb />
  </SliderTrack>
</Slider>

----------------------------------------

TITLE: Basic RangeCalendar Implementation in React Aria Components
DESCRIPTION: Demonstrates a basic implementation of the RangeCalendar component with header, buttons, and calendar grid. This example shows the minimum required structure for a functional date range picker.

LANGUAGE: tsx
CODE:
import {RangeCalendar, Heading, Button, CalendarGrid, CalendarCell} from 'react-aria-components';

<RangeCalendar aria-label="Trip dates">
  <header>
    <Button slot="previous">◀</Button>
    <Heading />
    <Button slot="next">▶</Button>
  </header>
  <CalendarGrid>
    {date => <CalendarCell date={date} />}
  </CalendarGrid>
</RangeCalendar>

----------------------------------------

TITLE: Using aria-label for Icon-Only ActionGroup in React
DESCRIPTION: Shows how to implement an icon-only ActionGroup with proper accessibility by using aria-label attributes on each item.

LANGUAGE: tsx
CODE:
<ActionGroup>
  <Item key="brush" aria-label="Brush"><Brush /></Item>
  <Item key="select" aria-label="Select"><Select /></Item>
  <Item key="regionSelect" aria-label="Select Region"><RegionSelect /></Item>
</ActionGroup>

----------------------------------------

TITLE: Implementing Client-Side Sorting in React Spectrum Table
DESCRIPTION: Example showing how to implement client-side sorting in a React Spectrum Table component using the useAsyncList hook. The code demonstrates sorting Star Wars character data by different columns.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Character {
  name: string,
  height: number,
  mass: number,
  birth_year: number
}

function AsyncSortTable() {
  let list = useAsyncList<Character>({
    async load({signal}) {
      let res = await fetch(`https://swapi.py4e.com/api/people/?search`, {signal});
      let json = await res.json();
      return {
        items: json.results
      };
    },
    async sort({items, sortDescriptor}) {
      return {
        items: items.sort((a, b) => {
          let first = a[sortDescriptor.column];
          let second = b[sortDescriptor.column];
          let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1;
          if (sortDescriptor.direction === 'descending') {
            cmp *= -1;
          }
          return cmp;
        })
      };
    }
  });

  return (
    <Table
      aria-label="Example table with client side sorting"
      /*- begin highlight -*/
      sortDescriptor={list.sortDescriptor}
      onSortChange={list.sort}
      /*- end highlight -*/
    >
      <TableHeader>
        <MyColumn id="name" isRowHeader allowsSorting>Name</MyColumn>
        <MyColumn id="height" allowsSorting>Height</MyColumn>
        <MyColumn id="mass" allowsSorting>Mass</MyColumn>
        <MyColumn id="birth_year" allowsSorting>Birth Year</MyColumn>
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row id={item.name}>
            <Cell>{item.name}</Cell>
            <Cell>{item.height}</Cell>
            <Cell>{item.mass}</Cell>
            <Cell>{item.birth_year}</Cell>
          </Row>
        )}
      </TableBody>
    </Table>
  );
}

----------------------------------------

TITLE: Multiple Selection Mode with Menu in React Spectrum
DESCRIPTION: Example of controlled multiple selection in a Menu component using the selectionMode prop set to 'multiple'. The selection state is tracked using React's useState hook and passed via selectedKeys prop.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-aria-components';

function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set(['sidebar', 'console']));

  return (
    <>
      <MyMenuButton label="View" selectionMode="multiple" selectedKeys={selected} onSelectionChange={setSelected}>
        <MenuItem id='sidebar'>Sidebar</MenuItem>
        <MenuItem id='searchbar'>Searchbar</MenuItem>
        <MenuItem id='tools'>Tools</MenuItem>
        <MenuItem id='console'>Console</MenuItem>
      </MyMenuButton>
      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>
    </>
  );
}

----------------------------------------

TITLE: Managing ComboBox Value with Controlled and Uncontrolled Modes
DESCRIPTION: Shows two approaches for managing ComboBox input values: uncontrolled with defaultInputValue and controlled with inputValue. Demonstrates how to provide initial values and respond to changes.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, name: 'Adobe Photoshop'},
    {id: 2, name: 'Adobe XD'},
    {id: 3, name: 'Adobe InDesign'},
    {id: 4, name: 'Adobe AfterEffects'},
    {id: 5, name: 'Adobe Illustrator'},
    {id: 6, name: 'Adobe Lightroom'},
    {id: 7, name: 'Adobe Premiere Pro'},
    {id: 8, name: 'Adobe Fresco'},
    {id: 9, name: 'Adobe Dreamweaver'}
  ];
  let [value, setValue] = React.useState('Adobe XD');

  return (
    <div style={{display: 'flex', gap: 16, flexWrap: 'wrap'}}>
      <MyComboBox
        label="Adobe product (Uncontrolled)"
        defaultItems={options}
        defaultSelectedKey={2}
        defaultInputValue="Adobe XD">
        {item => <ListBoxItem>{item.name}</ListBoxItem>}
      </MyComboBox>

      <MyComboBox
        label="Pick an Adobe product (Controlled)"
        defaultItems={options}
        defaultSelectedKey={2}
        inputValue={value}
        onInputChange={setValue}>
        {item => <ListBoxItem>{item.name}</ListBoxItem>}
      </MyComboBox>
    </div>
  );
}

----------------------------------------

TITLE: Category Tabs Implementation with Tailwind CSS
DESCRIPTION: Complete implementation of a category tabs component using React Aria Components and Tailwind CSS. Includes custom tab styling, tab panels for different content categories, and article link components.

LANGUAGE: TypeScript
CODE:
import {Tabs, TabList, Tab, TabPanel, Link} from 'react-aria-components';
import type {TabProps, TabPanelProps} from 'react-aria-components';

function TabsExample() {
  return (
    <div className="bg-linear-to-r from-lime-600 to-emerald-600 py-8 px-2 sm:px-8 rounded-lg flex justify-center">
      <Tabs className="w-full max-w-[300px]">
        <TabList aria-label="Feeds" className="flex space-x-1 rounded-full bg-green-900/40 bg-clip-padding p-1 border border-solid border-white/30">
          <MyTab id="blog">Blog</MyTab>
          <MyTab id="releases">Releases</MyTab>
          <MyTab id="docs">Docs</MyTab>
        </TabList>
        <MyTabPanel id="blog">
          <div className="flex flex-col">
            <Article title="Taming the dragon: Accessible drag and drop" summary="We are excited to announce the release of drag and drop support in React Aria and React Spectrum! This includes a suite of hooks for implementing drag and drop interactions, with support for both mouse and touch, as well as full parity for keyboard and screen reader input." />
            <Article title="Date and Time Pickers for All" summary="We are very excited to announce the release of the React Aria and React Spectrum date and time picker components! This includes a full suite of fully featured components and hooks including calendars, date and time fields, and range pickers, all with a focus on internationalization and accessibility. It also includes @internationalized/date, a brand new framework-agnostic library for locale-aware date and time manipulation." />
            <Article title="Creating an accessible autocomplete experience" summary="After many months of research, development, and testing, we're excited to announce that the React Spectrum ComboBox component and React Aria useComboBox hook are now available! In this post we'll take a deeper look into some of the challenges we faced when building an accessible and mobile friendly ComboBox." />
          </div>
        </MyTabPanel>
        <MyTabPanel id="releases">
          <div className="flex flex-col">
            <Article title="February 23, 2023 Release" summary="In this release, we have added support for Node ESM to all of our packages. We have also been busy at work on our pre-releases and improving our focus management in collections." />
            <Article title="December 16, 2022 Release" summary="It is our last release of the year and we are happy to share a new TableView feature, now in beta. Using the new allowsResizing prop on a Column in TableView gives users the ability to dynamically adjust the width of that column. TableView column resizing supports mouse, keyboard, touch, and screen reader interactions to allow all users to take advantage of a customizable table." />
            <Article title="November 15, 2022 Release" summary="We are excited to announce the release of drag and drop support in React Aria and React Spectrum! This includes a suite of hooks for implementing drag and drop interactions. There is also an update to all Spectrum colors, aligning React Spectrum with the latest Spectrum designs. Finally, React Aria includes a new simplified API for overlays such as popovers and modals." />
          </div>
        </MyTabPanel>
        <MyTabPanel id="docs">
          <div className="flex flex-col">
            <Article title="React Stately" summary="A library of React Hooks that provides cross-platform state management for your design system." />
            <Article title="React Aria" summary="A library of React Hooks that provides accessible UI primitives for your design system." />
            <Article title="React Spectrum" summary="A React implementation of Spectrum, Adobe's design system." />
          </div>
        </MyTabPanel>
      </Tabs>
    </div>
  );
}

function MyTab(props: TabProps) {
  return (
    <Tab
      {...props}
      className={({isSelected}) => `
        w-full rounded-full py-2.5 font-medium text-[1.1em] text-center cursor-default ring-black outline-hidden transition-colors focus-visible:ring-2
        ${isSelected ? 'text-emerald-700 bg-white shadow-sm' : 'text-white hover:bg-white/10 pressed:bg-white/10'}
      `} />
  );
}

function MyTabPanel(props: TabPanelProps) {
  return <TabPanel {...props} className="mt-2 text-gray-700 font-serif rounded-2xl bg-white p-2 shadow-sm ring-black outline-hidden focus-visible:ring-2" />;
}

function Article({title, summary}: {title: string, summary: string}) {
  return (
    <Link href="#" className="p-2 rounded-lg hover:bg-gray-100 pressed:bg-gray-100 text-[inherit] no-underline outline-hidden focus-visible:ring-2 ring-emerald-500">
      <h3 className="text-base mt-0 mb-0.5 font-semibold overflow-hidden text-ellipsis whitespace-nowrap">{title}</h3>
      <p className="text-sm m-0 overflow-hidden text-ellipsis line-clamp-2">{summary}</p>
    </Link>
  );
}

----------------------------------------

TITLE: Creating an Application Layout with Grid in React Spectrum
DESCRIPTION: Shows how to define a complete application layout with header, sidebar, content area, and footer using the Grid component with named areas, responsive columns and rows.

LANGUAGE: tsx
CODE:
<Grid
  areas={[
    'header  header',
    'sidebar content',
    'footer  footer'
  ]}
  columns={['1fr', '3fr']}
  rows={['size-1000', 'auto', 'size-1000']}
  height="size-6000"
  gap="size-100">
  <View backgroundColor="celery-600" gridArea="header" />
  <View backgroundColor="blue-600" gridArea="sidebar" />
  <View backgroundColor="purple-600" gridArea="content" />
  <View backgroundColor="magenta-600" gridArea="footer" />
</Grid>

----------------------------------------

TITLE: Configuring Disabled Rows in a List Component
DESCRIPTION: This example demonstrates how to disable specific rows in a List component using the disabledKeys prop, which prevents interactions with those rows.

LANGUAGE: tsx
CODE:
// Using the example above
<PokemonList aria-label="List with disabled rows" selectionMode="multiple" disabledKeys={[3]} />

----------------------------------------

TITLE: Implementing Basic Draggable and Droppable ListViews with React Spectrum
DESCRIPTION: This example creates a draggable ListView and a droppable ListView using the useDragAndDrop hook. The DraggableListView allows items to be moved from one list to another, while the DroppableListView accepts custom drag types and handles item insertion.

LANGUAGE: tsx
CODE:
import type {DragAndDropOptions, TextDropItem} from '@react-spectrum/dnd';
import type {ListData} from '@adobe/react-spectrum';
import {useDragAndDrop} from '@react-spectrum/dnd';
import {useListData} from '@adobe/react-spectrum';

interface Item {
  name: string,
  type?: string,
  childNodes?: Item[]
}

interface DndListViewProps extends DragAndDropOptions {
  list: ListData<Item>
}

function DraggableListView(props: DndListViewProps) {
  let {list, ...otherProps} = props;
  /*- begin highlight -*/
  let {dragAndDropHooks} = useDragAndDrop({
    // Only allow move operations when dropping items from this list
    getAllowedDropOperations: () => ['move'],
    getItems: (keys) => [...keys].map(key => {
      let item = list.getItem(key);
      // Setup the drag types and associated info for each dragged item.
      return {
        'custom-app-type': JSON.stringify(item),
        'text/plain': item.name
      };
    }),
    onDragEnd: (e) => {
      let {
        dropOperation,
        keys
      } = e;

      if (dropOperation === 'move') {
        list.remove(...keys);
      }
    },
    ...otherProps
  });
  /*- end highlight -*/

  return (
    <ListView
      aria-label="Draggable ListView in drag into list example"
      selectionMode="multiple"
      width="size-3600"
      height="size-2400"
      /*- begin highlight -*/
      dragAndDropHooks={dragAndDropHooks}
      /*- end highlight -*/
      items={list.items}>
      {item => (
        <Item textValue={item.name}>
          <Text>{item.name}</Text>
        </Item>
      )}
    </ListView>
  );
}

function DroppableListView(props: DndListViewProps) {
  let {list, ...otherProps} = props;
  /*- begin highlight -*/
  let {dragAndDropHooks} = useDragAndDrop({
    // Only accept items with the following drag type
    acceptedDragTypes: ['custom-app-type'],
    onInsert: async (e) => {
      let {
        items,
        target
      } = e;

      let processedItems = await Promise.all(
        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type')))
      );

      if (target.dropPosition === 'before') {
        list.insertBefore(target.key, ...processedItems);
      } else if (target.dropPosition === 'after') {
        list.insertAfter(target.key, ...processedItems);
      }
    },
    onRootDrop: async (e) => {
      let {
        items
      } = e;
      let processedItems = await Promise.all(
        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type')))
      );
      list.append(...processedItems);
    },
    ...otherProps
  });
  /*- end highlight -*/

  return (
    <ListView
      aria-label="Droppable ListView in drag into list example"
      width="size-3600"
      height="size-2400"
      /*- begin highlight -*/
      dragAndDropHooks={dragAndDropHooks}
      /*- end highlight -*/
      items={list.items}>
      {item => (
        <Item textValue={item.name}>
          <Text>{item.name}</Text>
        </Item>
      )}
    </ListView>
  );
}

function DragIntoList() {
  let sourceList = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop'},
      {id: '2', type: 'file', name: 'Adobe XD'},
      {id: '3', type: 'file', name: 'Adobe InDesign'},
      {id: '4', type: 'file', name: 'Adobe AfterEffects'}
    ]
  });

  let targetList = useListData({
    initialItems: [
      {id: '5', type: 'file', name: 'Adobe Dreamweaver'},
      {id: '6', type: 'file', name: 'Adobe Fresco'},
      {id: '7', type: 'file', name: 'Adobe Connect'},
      {id: '8', type: 'file', name: 'Adobe Lightroom'}
    ]
  });


  return (
    <Flex wrap gap="size-300">
      <DraggableListView list={sourceList} />
      <DroppableListView list={targetList} />
    </Flex>
  );
}

----------------------------------------

TITLE: Styling Drop Targets with CSS
DESCRIPTION: CSS styles for drag and drop interaction elements, including visual feedback for dragging and dropping states.

LANGUAGE: CSS
CODE:
.draggable {
  display: inline-block;
  vertical-align: top;
  border: 1px solid gray;
  padding: 10px;
  margin-right: 20px;
}

.draggable.dragging {
  opacity: 0.5;
}

.droppable {
  width: 100px;
  height: 80px;
  border-radius: 6px;
  display: inline-block;
  padding: 20px;
  border: 2px dotted gray;
  white-space: pre-wrap;
  overflow: auto;
}

.droppable.target {
  border: 2px solid var(--blue);
}

----------------------------------------

TITLE: Basic DatePicker Implementation in React Spectrum
DESCRIPTION: Demonstrates the simplest implementation of the DatePicker component with just a label property.

LANGUAGE: tsx
CODE:
<DatePicker label="Event date" />

----------------------------------------

TITLE: Initializing Tree Data Structure with useTreeData in React
DESCRIPTION: Example showing how to initialize a tree data structure with useTreeData hook, including setting up initial items and selection state for a ListBox component with sections.

LANGUAGE: tsx
CODE:
interface ItemValue {
  name: string;
  items?: Array<ItemValue>;
}

let tree = useTreeData<ItemValue>({
  initialItems: [
    {
      name: 'People',
      items: [
        {name: 'David'},
        {name: 'Sam'},
        {name: 'Jane'}
      ]
    },
    {
      name: 'Animals',
      items: [
        {name: 'Aardvark'},
        {name: 'Kangaroo'},
        {name: 'Snake'}
      ]
    }
  ],
  initialSelectedKeys: ['Sam', 'Kangaroo'],
  getKey: item => item.name,
  getChildren: item => item.items || []
});

<ListBox
  aria-label="List organisms"
  items={tree.items}
  selectionMode="multiple"
  selectedKeys={tree.selectedKeys}
  onSelectionChange={(keys) => {
    if (keys !== 'all') {
      tree.setSelectedKeys(keys);
    }
  }}>
  {node =>
    <Section title={node.value.name} items={node.children}>
      {node => <Item>{node.value.name}</Item>}
    </Section>
  }
</ListBox>

----------------------------------------

TITLE: Creating a Controlled Switch Component
DESCRIPTION: Example of creating a controlled Switch component using React state, with feedback text that changes based on the selection state.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState(false);

  return (
    <>
      <MySwitch isSelected={selected} onChange={setSelected}>Low power mode</MySwitch>
      <p>{selected ? 'Low' : 'High'} power mode active.</p>
    </>
  );
}

----------------------------------------

TITLE: Consuming LabelContext in Custom Label Component with TypeScript
DESCRIPTION: This code snippet demonstrates how to create a custom label component that can integrate with React Aria Components' SearchField. It uses the useContextProps hook to merge local props and ref with those provided via LabelContext, making an existing label component compatible with the React Aria Components ecosystem.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  ///- begin highlight -///
  [props, ref] = useContextProps(props, ref, LabelContext);
  ///- end highlight -///

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Implementing Folder Drop Handling in React Spectrum TableView
DESCRIPTION: This code demonstrates how to implement drag and drop functionality for folders in TableView components. It includes a source table with draggable items and a target table that accepts drops into folder items. The example uses useDragAndDrop hook with custom handling for item drops into folders.

LANGUAGE: tsx
CODE:
function DraggableTableViewFolder(props: DndTableViewProps) {
  let {list, columns, ...otherProps} = props;
  let {dragAndDropHooks} = useDragAndDrop({
    // Only allow move operations when dropping items from this table
    getAllowedDropOperations: () => ['move'],
    getItems: (keys) => [...keys].map(key => {
      let item = list.getItem(key);
      // Setup the drag types and associated info for each dragged item.
      return {
        'custom-app-type-folder-drop': JSON.stringify(item),
        'text/plain': item.name
      };
    }),
    onDragEnd: (e) => {
      let {
        dropOperation,
        keys
      } = e;

      if (dropOperation === 'move') {
        list.remove(...keys);
      }
    },

    ...otherProps
  });

  return (
    <TableView
      aria-label="Draggable TableView in drag onto folder example"
      selectionMode="multiple"
      width="size-5000"
      height="size-3600"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader columns={columns}>
        {column => (
          <Column
            key={column.id}
            align={column.id === 'date' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </TableView>
  );
}

function DroppableTableViewFolder(props: DndTableViewProps) {
  let {list, columns, ...otherProps} = props;
  let {dragAndDropHooks} = useDragAndDrop({
    /*- begin highlight -*/
    // Only allow drops on items with childNodes aka folders
    shouldAcceptItemDrop: (target) => !!list.getItem(target.key).childNodes,
    /*- end highlight -*/
    // Only accept items with the following drag type
    acceptedDragTypes: ['custom-app-type-folder-drop'],
    onInsert: async (e) => {
      let {
        items,
        target
      } = e;

      let processedItems = await Promise.all(
        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-folder-drop')))
      );

      if (target.dropPosition === 'before') {
        list.insertBefore(target.key, ...processedItems);
      } else if (target.dropPosition === 'after') {
        list.insertAfter(target.key, ...processedItems);
      }
    },
    onRootDrop: async (e) => {
      let {
        items
      } = e;
      let processedItems = await Promise.all(
        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-folder-drop')))
      );
      list.append(...processedItems);
    },
    /*- begin highlight -*/
    onItemDrop: async (e) => {
      let {
        items,
        target
      } = e;

      let processedItems = await Promise.all(
        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-folder-drop')))
      );

      let targetItem = list.getItem(target.key);
      list.update(target.key, {...targetItem, childNodes: [...targetItem.childNodes, ...processedItems]});
    },
    /*- end highlight -*/
    ...otherProps
  });

  return (
    <TableView
      aria-label="Droppable TableView in drop into folder example"
      width="size-5000"
      height="size-3600"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader columns={columns}>
        {column => (
          <Column
            key={column.id}
            align={column.id === 'date' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            {columnKey => (
              <Cell>
                {item[columnKey]}
                {columnKey === 'type' && item[columnKey] === 'folder' && item.childNodes.length > 0 &&
                 ` (${item.childNodes?.length} dropped item(s)`
                }
              </Cell>
            )}
          </Row>
        )}
      </TableBody>
    </TableView>
  );
}

function DragIntoTableFolder() {
  let columns = [
    {name: 'Name', id: 'name'},
    {name: 'Type', id: 'type'},
    {name: 'Date Modified', id: 'date'}
  ];

  let sourceList = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '2/1/2020'},
      {id: '2', type: 'file', name: 'Adobe XD', date: '6/7/2020'},
      {id: '3', type: 'folder', name: 'Documents', date: '6/13/2020', childNodes: []},
      {id: '4', type: 'file', name: 'Adobe InDesign', date: '2/4/2020'},
      {id: '5', type: 'folder', name: 'Utilities', date: '12/3/2020', childNodes: []},
      {id: '6', type: 'file', name: 'Adobe AfterEffects', date: '3/12/2020'}
    ]
  });

  let targetList = useListData({
    initialItems: [
      {id: '7', type: 'folder', name: 'Pictures', date: '6/17/2020', childNodes: []},
      {id: '8', type: 'file', name: 'Adobe Fresco', date: '1/27/2020'},
      {id: '9', type: 'folder', name: 'Apps', date: '12/23/2020', childNodes: []}
    ]
  });

  return (
    <Flex wrap gap="size-300">
      <DraggableTableViewFolder list={sourceList} columns={columns} />
      <DroppableTableViewFolder list={targetList} columns={columns} />
    </Flex>
  );
}

----------------------------------------

TITLE: Creating ComboBox Behavior with React Hooks
DESCRIPTION: A theme-agnostic behavior hook that implements keyboard navigation, accessibility attributes, and event handling for a ComboBox component. It returns props for wrapper, textfield, button, menu, and menu items that can be applied to any theme implementation.

LANGUAGE: jsx
CODE:
import { useRef } from "react";
import { useId } from "./utils";

export function useComboBox(props, autocomplete) {
  let id = useId(props.id);
  let listboxId = useId();
  let textfieldRef = useRef();
  let values = { ...autocomplete, id, listboxId, textfieldRef };
  return {
    wrapperProps: getWrapperProps(values),
    textfieldProps: getTextfieldProps(values),
    buttonProps: getButtonProps(values),
    menuProps: getMenuProps(values),
    getMenuItemProps: index => getMenuItemProps(values, index)
  };
}

function getWrapperProps({ listboxId, showMenu }) {
  return {
    role: "combobox",
    "aria-controls": showMenu ? listboxId : undefined,
    "aria-owns": showMenu ? listboxId : undefined,
    "aria-expanded": showMenu,
    "aria-haspopup": "true"
  };
}

function getTextfieldProps({
  selectedIndex,
  setSelectedIndex,
  completions,
  value,
  setValue,
  selectItem,
  listboxId,
  showMenu,
  setShowMenu,
  textfieldRef
}) {
  let onKeyDown = e => {
    switch (e.key) {
      case "ArrowDown":
        setSelectedIndex(
          selectedIndex == null ? 0 : (selectedIndex + 1) % completions.length
        );
        break;
      case "ArrowUp":
        setSelectedIndex(
          selectedIndex == null
            ? completions.length - 1
            : (selectedIndex - 1 + completions.length) % completions.length
        );
        break;
      case "Enter":
        selectItem(selectedIndex);
        break;
      case "Escape":
        setShowMenu(false);
        break;
    }
  };
  
  return {
    value,
    ref: textfieldRef,
    onChange: e => setValue(e.target.value),
    "aria-controls": showMenu ? listboxId : undefined,
    "aria-autocomplete": "list",
    "aria-activedescendant":
      showMenu && selectedIndex !== null
        ? listboxId + "-option-" + selectedIndex
        : undefined,
    role: "textbox",
    autoComplete: "off",
    onKeyDown: onKeyDown,
    onBlur: () => setShowMenu(false),
    onFocus: () => {
      if (value) {
        setShowMenu(true);
      }
    }
  };
}

function getButtonProps({ toggleMenu, textfieldRef }) {
  return {
    tabIndex: "-1",
    onMouseDown: e => e.preventDefault(),
    onMouseUp: e => e.preventDefault(),
    onClick: () => {
      textfieldRef.current.focus();
      toggleMenu();
    }
  };
}

function getMenuProps({ listboxId }) {
  return {
    id: listboxId,
    role: "listbox"
  };
}

function getMenuItemProps(
  { listboxId, selectedIndex, setSelectedIndex, selectItem },
  index
) {
  return {
    role: "option",
    id: listboxId + "-option-" + index,
    tabIndex: selectedIndex === index ? 0 : -1,
    "aria-selected": selectedIndex === index,
    onMouseEnter: () => setSelectedIndex(index),
    onMouseDown: e => e.preventDefault(),
    onClick: () => selectItem(index)
  };
}

----------------------------------------

TITLE: Creating MenuSection Component for Sectioned Menus
DESCRIPTION: Implementation of a MenuSection component that supports sections with separators and headings to group menu options. Uses useMenuSection hook and useSeparator for proper accessibility and semantic structure.

LANGUAGE: tsx
CODE:
import {useMenuSection} from '@react-aria/menu';
import {useSeparator} from '@react-aria/separator';

function MenuSection({section, state}) {
  let {itemProps, headingProps, groupProps} = useMenuSection({
    heading: section.rendered,
    'aria-label': section['aria-label']
  });

  let {separatorProps} = useSeparator({
    elementType: 'li'
  });

  // If the section is not the first, add a separator element.
  // The heading is rendered inside an <li> element, which contains
  // a <ul> with the child items.
  return <>
    {section.key !== state.collection.getFirstKey() &&
      <li
        {...separatorProps}
        style={{
          borderTop: '1px solid gray',
          margin: '2px 5px'
        }} />
    }
    <li {...itemProps}>
      {section.rendered &&
        <span
          {...headingProps}
          style={{
            fontWeight: 'bold',
            fontSize: '1.1em',
            padding: '2px 5px',
          }}>
          {section.rendered}
        </span>
      }
      <ul
        {...groupProps}
        style={{
          padding: 0,
          listStyle: 'none'
        }}>
        {[...section.childNodes].map(node =>
          <MenuItem
            key={node.key}
            item={node}
            state={state} />
        )}
      </ul>
    </li>
  </>;
}

----------------------------------------

TITLE: Creating a Circular ProgressBar with SVG
DESCRIPTION: Example of a circular progress indicator using SVG. This implementation uses stroke-dasharray and stroke-dashoffset to create a circular progress visualization that reflects the current progress value.

LANGUAGE: tsx
CODE:
let center = 16;
let strokeWidth = 4;
let r = 16 - strokeWidth;
let c = 2 * r * Math.PI;

<ProgressBar aria-label="Loading…" value={60}>
  {({percentage}) => <>
    <svg width={64} height={64} viewBox="0 0 32 32" fill="none" strokeWidth={strokeWidth}>
      <circle cx={center} cy={center} r={r - (strokeWidth / 2 - 0.25)} stroke="var(--border-color)" strokeWidth={0.5} />
      <circle cx={center} cy={center} r={r + (strokeWidth / 2 - 0.25)} stroke="var(--border-color)" strokeWidth={0.5} />
      <circle
        cx={center}
        cy={center}
        r={r}
        stroke="var(--highlight-background)"
        strokeDasharray={`${c} ${c}`}
        strokeDashoffset={c - percentage / 100 * c}
        strokeLinecap="round"
        transform="rotate(-90 16 16)" />
    </svg>
  </>}
</ProgressBar>

----------------------------------------

TITLE: Creating ColorPicker with Channel Fields in React Aria
DESCRIPTION: This example demonstrates how to use ColorField components to allow users to edit color channel values as numbers. It includes a ColorArea for visual color selection, a ColorSlider for hue adjustment, and numeric fields for precise color editing.

LANGUAGE: tsx
CODE:
import type {ColorSpace} from 'react-aria-components';
import {getColorChannels} from 'react-aria-components';
import {MyColorArea} from './ColorArea';
import {MyColorSlider} from './ColorSlider';
import {MySelect, MyItem} from './Select';
import {MyColorField} from './ColorField';

function Example() {
  let [space, setSpace] = React.useState<ColorSpace>('rgb');

  return (
    <MyColorPicker label="Color" defaultValue="#f80">
      <MyColorArea colorSpace="hsb" xChannel="saturation" yChannel="brightness" />
      <MyColorSlider colorSpace="hsb" channel="hue" />
      <MySelect aria-label="Color space" selectedKey={space} onSelectionChange={s => setSpace(s as ColorSpace)}>
        <MyItem id="rgb">RGB</MyItem>
        <MyItem id="hsl">HSL</MyItem>
        <MyItem id="hsb">HSB</MyItem>
      </MySelect>
      <div style={{display: 'flex', gap: 4, width: 192}}>
        {getColorChannels(space).map(channel => (
          <MyColorField key={channel} colorSpace={space} channel={channel} style={{flex: 1}} />
        ))}
      </div>
    </MyColorPicker>
  );
}

----------------------------------------

TITLE: Implementing Item Drop Functionality in React Spectrum Table
DESCRIPTION: Code showing how to enable dropping on items in a Table component using the onItemDrop event. When a valid drag hovers over an item, it receives the isDropTarget state that can be styled with CSS.

LANGUAGE: tsx
CODE:
function Example() {
  let { dragAndDropHooks } = useDragAndDrop({
    onItemDrop(e) {
      alert(`Dropped on ${e.target.key}`);
    }
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      {/* see above */}
      <DraggableTable />
      <FileTable dragAndDropHooks={dragAndDropHooks} />
    </div>
  );
}

----------------------------------------

TITLE: Creating Popover with ListBox Component in React Aria
DESCRIPTION: This snippet demonstrates how to create a Popover with a ListBox component inside, featuring animations, custom styling with Tailwind CSS classes, and conditional rendering based on selection state. It uses render props pattern to customize UI elements based on component state.

LANGUAGE: tsx
CODE:
<Popover className="w-(--trigger-width) ... entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out">
  <ListBox items={people}>
    {item => (
      <ListBoxItem textValue={item.name} className="group text-gray-900 ... focus:bg-blue-600 focus:text-white">
        {/* Use render props to customize children based on state. */}
        {({ isSelected }) => <>
          <img alt="" src={item.avatar} />
          <span className="... font-normal group-selected:font-semibold">{item.name}</span>
          {isSelected &&
            <CheckIcon />
          }
        </>}
      </ListBoxItem>
    )}
  </ListBox>
</Popover>
</ComboBox>

----------------------------------------

TITLE: Implementing Bi-directional Drag and Drop Between TableViews in React Spectrum
DESCRIPTION: This code demonstrates creating a pair of TableViews that support dragging and dropping items between each table. The implementation includes custom drag and drop hooks to handle bidirectional movement of items, with logic to prevent dropping into folders and to maintain internal reordering capabilities.

LANGUAGE: tsx
CODE:
function BidirectionalDnDTableView(props: DndTableViewProps) {
  let {list, columns} = props;
  let {dragAndDropHooks} = useDragAndDrop({
    acceptedDragTypes: ['custom-app-type-bidirectional'],
    // Only allow move operations
    getAllowedDropOperations: () => ['move'],
    getItems(keys) {
      return [...keys].map(key => {
        let item = list.getItem(key);
        // Setup the drag types and associated info for each dragged item.
        return {
          'custom-app-type-bidirectional': JSON.stringify(item),
          'text/plain': item.name
        };
      });
    },
    onInsert: async (e) => {
      let {
        items,
        target
      } = e;
      let processedItems = await Promise.all(
        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-bidirectional')))
      );
      if (target.dropPosition === 'before') {
        list.insertBefore(target.key, ...processedItems);
      } else if (target.dropPosition === 'after') {
        list.insertAfter(target.key, ...processedItems);
      }
    },
    onReorder: async (e) => {
      let {
        keys,
        target
      } = e;

      if (target.dropPosition === 'before') {
        list.moveBefore(target.key, [...keys]);
      } else if (target.dropPosition === 'after') {
        list.moveAfter(target.key, [...keys]);
      }
    },
    onRootDrop: async (e) => {
      let {
        items
      } = e;
      let processedItems = await Promise.all(
        items.map(async item => JSON.parse(await (item as TextDropItem).getText('custom-app-type-bidirectional')))
      );
      list.append(...processedItems);
    },
    /*- begin highlight -*/
    onDragEnd: (e) => {
      let {
        dropOperation,
        keys,
        isInternal
      } = e;
      // Only remove the dragged items if they aren't dropped inside the source list
      if (dropOperation === 'move' && !isInternal) {
        list.remove(...keys);
      }
    }
    /*- end highlight -*/
  });

  return (
    <TableView
      aria-label={props['aria-label']}
      selectionMode="multiple"
      width="size-5000"
      height="size-3600"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader columns={columns}>
        {column => (
          <Column
            key={column.id}
            align={column.id === 'date' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </TableView>
  );
}

function DragBetweenTablesExample() {
  let columns = [
    {name: 'Name', id: 'name'},
    {name: 'Type', id: 'type'},
    {name: 'Date Modified', id: 'date'}
  ];

  let list1 = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/7/2020'},
      {id: '2', type: 'file', name: 'Adobe XD', date: '4/7/2021'},
      {id: '3', type: 'folder', name: 'Documents', date: '4/9/2021'},
      {id: '4', type: 'file', name: 'Adobe InDesign', date: '11/20/2010'},
      {id: '5', type: 'folder', name: 'Utilities', date: '9/18/2016'},
      {id: '6', type: 'file', name: 'Adobe AfterEffects', date: '1/18/2016'}
    ]
  });

  let list2 = useListData({
    initialItems: [
      {id: '7', type: 'folder', name: 'Pictures', date: '6/7/2020'},
      {id: '8', type: 'file', name: 'Adobe Fresco', date: '4/2/2020'},
      {id: '9', type: 'folder', name: 'Apps', date: '2/3/2020'},
      {id: '10', type: 'file', name: 'Adobe Illustrator', date: '6/5/2020'},
      {id: '11', type: 'file', name: 'Adobe Lightroom', date: '3/7/2020'},
      {id: '12', type: 'file', name: 'Adobe Dreamweaver', date: '3/9/2020'}
    ]
  });


  return (
    <Flex wrap gap="size-300">
      <BidirectionalDnDTableView list={list1} columns={columns} aria-label="First TableView in drag between table example" />
      <BidirectionalDnDTableView list={list2} columns={columns} aria-label="Second TableView in drag between table example" />
    </Flex>
  );
}

----------------------------------------

TITLE: Reusable Calendar Component Wrapper in React Aria
DESCRIPTION: Example of creating a reusable Calendar component wrapper that includes all necessary parts and supports error messages. This approach ensures consistency across multiple instances.

LANGUAGE: tsx
CODE:
import type {CalendarProps, DateValue} from 'react-aria-components';
import {Text} from 'react-aria-components';

interface MyCalendarProps<T extends DateValue> extends CalendarProps<T> {
  errorMessage?: string
}

function MyCalendar<T extends DateValue>({errorMessage, ...props}: MyCalendarProps<T>) {
  return (
    <Calendar {...props}>
      <header>
        <Button slot="previous">◀</Button>
        <Heading />
        <Button slot="next">▶</Button>
      </header>
      <CalendarGrid>
        {date => <CalendarCell date={date} />}
      </CalendarGrid>
      {errorMessage && <Text slot="errorMessage">{errorMessage}</Text>}
    </Calendar>
  );
}

<MyCalendar aria-label="Event date" />

----------------------------------------

TITLE: Implementing Draggable Element with useMove in React
DESCRIPTION: A complete example showing how to implement a draggable ball element using the useMove hook. The example demonstrates handling mouse, touch, and keyboard interactions with event logging and position clamping to keep the element within bounds.

LANGUAGE: tsx
CODE:
import {useMove} from '@react-aria/interactions';

function Example() {
  const CONTAINER_SIZE = 200;
  const BALL_SIZE = 30;

  let [events, setEvents] = React.useState([]);
  let [color, setColor] = React.useState('black');
  let [position, setPosition] = React.useState({
    x: 0,
    y: 0
  });

  let clamp = pos => Math.min(Math.max(pos, 0), CONTAINER_SIZE - BALL_SIZE);
  let {moveProps} = useMove({
    onMoveStart(e) {
      setColor('red');
      setEvents(events => [`move start with pointerType = ${e.pointerType}`, ...events]);
    },
    onMove(e) {
      setPosition(({x, y}) => {
        // Normally, we want to allow the user to continue
        // dragging outside the box such that they need to
        // drag back over the ball again before it moves.
        // This is handled below by clamping during render.
        // If using the keyboard, however, we need to clamp
        // here so that dragging outside the container and
        // then using the arrow keys works as expected.
        if (e.pointerType === 'keyboard') {
          x = clamp(x);
          y = clamp(y);
        }

        x += e.deltaX;
        y += e.deltaY;
        return {x, y};
      });

      setEvents(events => [`move with pointerType = ${e.pointerType}, deltaX = ${e.deltaX}, deltaY = ${e.deltaY}`, ...events]);
    },
    onMoveEnd(e) {
      setPosition(({x, y}) => {
        // Clamp position on mouse up
        x = clamp(x);
        y = clamp(y);
        return {x, y};
      });
      setColor('black');
      setEvents(events => [`move end with pointerType = ${e.pointerType}`, ...events]);
    }
  });

  return (
    <>
      <div
        style={{
          width: CONTAINER_SIZE,
          height: CONTAINER_SIZE,
          background: 'white',
          border: '1px solid black',
          position: 'relative',
          touchAction: 'none'
        }}>
        <div
          {...moveProps}
          tabIndex={0}
          style={{
            width: BALL_SIZE,
            height: BALL_SIZE,
            borderRadius: '100%',
            position: 'absolute',
            left: clamp(position.x),
            top: clamp(position.y),
            background: color
          }} />
      </div>
      <ul
        style={{
          maxHeight: '200px',
          overflow: 'auto'
        }}>
        {events.map((e, i) => <li key={i}>{e}</li>)}
      </ul>
    </>
  );
}

----------------------------------------

TITLE: Importing and Configuring React Spectrum Documentation Components
DESCRIPTION: Sets up the documentation layout by importing necessary components from React Spectrum documentation packages and exporting a default layout component.

LANGUAGE: JSX
CODE:
import {ExampleLayout} from '@react-spectrum/docs';
export default ExampleLayout;

----------------------------------------

TITLE: Creating a SwitchDescription Component with Context API in React Aria
DESCRIPTION: This example demonstrates how to create a SwitchDescription component that uses SwitchContext to associate a description with a Switch component via aria-describedby. It shows how to use the useId hook to generate a unique ID for accessibility purposes.

LANGUAGE: tsx
CODE:
import {SwitchContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface SwitchDescriptionProps {
  children?: React.ReactNode,
  description?: string
}

function SwitchDescription({children, description}: SwitchDescriptionProps) {
  let descriptionId = useId();
  return (
    <div>
      <SwitchContext.Provider value={{'aria-describedby': descriptionId}}>
        {children}
      </SwitchContext.Provider>
      <small id={descriptionId}>{description}</small>
    </div>
  );
}

<SwitchDescription description="Connected to 'Starbucks Wifi'.">
  <MySwitch defaultSelected>Wi-Fi</MySwitch>
</SwitchDescription>

----------------------------------------

TITLE: Adding Error Validation to RangeCalendar Selection
DESCRIPTION: Shows how to implement custom validation logic for a RangeCalendar. This example validates that the selected date range is no longer than one week and displays an error message if the validation fails.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

function Example() {
  let [range, setRange] = React.useState({
    start: today(getLocalTimeZone()),
    end: today(getLocalTimeZone()).add({ weeks: 1, days: 3 })
  });
  let isInvalid = range.end.compare(range.start) > 7;

  return (
    <MyRangeCalendar
      aria-label="Trip dates"
      value={range}
      onChange={setRange}
      /*- begin highlight -*/
      isInvalid={isInvalid}
      errorMessage={isInvalid ? 'Maximum stay duration is 1 week' : undefined}
      /*- end highlight -*/
    />
  );
}

----------------------------------------

TITLE: DatePicker Validation Error Styling
DESCRIPTION: CSS styling for DatePicker validation error states, including an invalid icon indicator and error message formatting.

LANGUAGE: css
CODE:
.react-aria-DatePicker {
  &[data-invalid] {
    .react-aria-DateInput:after {
      content: '🚫' / '';
      content: '🚫';
      alt: ' ';
      flex: 1;
      text-align: end;
    }
  }

  .react-aria-FieldError {
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: Implementing Accessible TableView with Row Headers in React Spectrum
DESCRIPTION: Example of a TableView with isRowHeader applied to multiple columns to improve accessibility. This ensures screen readers announce the row headers properly when navigating through rows.

LANGUAGE: tsx
CODE:
<TableView aria-label="Example table with static contents">
  <TableHeader>
    <Column isRowHeader>First Name</Column>
    <Column isRowHeader>Last Name</Column>
    <Column align="end">Age</Column>
  </TableHeader>
  <TableBody>
    <Row>
      <Cell>John</Cell>
      <Cell>Doe</Cell>
      <Cell>45</Cell>
    </Row>
    <Row>
      <Cell>Jane</Cell>
      <Cell>Doe</Cell>
      <Cell>37</Cell>
    </Row>
    <Row>
      <Cell>Joe</Cell>
      <Cell>Schmoe</Cell>
      <Cell>67</Cell>
    </Row>
  </TableBody>
</TableView>

----------------------------------------

TITLE: Implementing a basic CheckboxGroup in React Aria Components
DESCRIPTION: This example demonstrates how to create a basic CheckboxGroup with Checkbox components, including a label and custom checkbox styling with SVG icons.

LANGUAGE: tsx
CODE:
import {CheckboxGroup, Checkbox, Label} from 'react-aria-components';

<CheckboxGroup>
  <Label>Favorite sports</Label>
  <Checkbox value="soccer">
    <div className="checkbox" aria-hidden="true">
      <svg viewBox="0 0 18 18"><polyline points="1 9 7 14 15 4" /></svg>
    </div>
    Soccer
  </Checkbox>
  <Checkbox value="baseball">
    <div className="checkbox" aria-hidden="true">
      <svg viewBox="0 0 18 18"><polyline points="1 9 7 14 15 4" /></svg>
    </div>
    Baseball
  </Checkbox>
  <Checkbox value="basketball">
    <div className="checkbox" aria-hidden="true">
      <svg viewBox="0 0 18 18"><polyline points="1 9 7 14 15 4" /></svg>
    </div>
    Basketball
  </Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Implementing Client-Side Routing with Tabs and React Router
DESCRIPTION: Example showing how to integrate Tabs with React Router for client-side routing. This setup synchronizes tab selection with URL paths and handles navigation between routes.

LANGUAGE: tsx
CODE:
import {useLocation, useNavigate, BrowserRouter, Routes, Route, Outlet} from 'react-router-dom';
import {RouterProvider} from '@adobe/react-spectrum';

function AppTabs() {
  let {pathname} = useLocation();

  return (
    <Tabs selectedKey={pathname}>
      <TabList aria-label="Tabs">
        <Item key="/" href="/">Home</Item>
        <Item key="/shared" href="/shared">Shared</Item>
        <Item key="/deleted" href="/deleted">Deleted</Item>
      </TabList>
      <TabPanels>
        <Item key="/"><Outlet /></Item>
        <Item key="/shared"><Outlet /></Item>
        <Item key="/deleted"><Outlet /></Item>
      </TabPanels>
    </Tabs>
  );
}

function App() {
  let navigate = useNavigate();
  return (
    <RouterProvider navigate={navigate}>
      <Routes>
        <Route path="/" element={<AppTabs />}>
          <Route index element={<HomePage />} />
          <Route path="/shared" element={<SharedPage />} />
          <Route path="/deleted" element={<DeletedPage />} />
        </Route>
      </Routes>
    </RouterProvider>
  );
}

<BrowserRouter>
  <App />
</BrowserRouter>

----------------------------------------

TITLE: SearchField Component Structure with Accessibility Features
DESCRIPTION: Example showing the complete structure of a SearchField component with Label, Input, Button, Text description, and FieldError components. This demonstrates how to create a fully accessible search field with description and error handling.

LANGUAGE: tsx
CODE:
import {SearchField, Label, Input, Button, Text, FieldError} from 'react-aria-components';

<SearchField>
  <Label />
  <Input />
  <Button />
  <Text slot="description" />
  <FieldError />
</SearchField>

----------------------------------------

TITLE: Implementing HSL Color Selection with ColorArea in React
DESCRIPTION: This example shows how to implement a color picker using the HSL (Hue, Saturation, Lightness) color model with ColorArea component. It displays three different channel combinations with corresponding sliders for the remaining channel.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-stately/color';

function Example() {
  let [
    color,
    setColor
  ] = React.useState(parseColor('hsl(219, 79%, 66%)'));
  let [
    hChannel,
    sChannel,
    lChannel
  ] = color.getColorChannels();
  return (
    <>
      <div style={{display: 'inline-flex', flexWrap: 'wrap'}}>
        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>
          <label id="slh-label-id-1">x: {color.getChannelName(sChannel, 'en-US')}, y: {color.getChannelName(lChannel, 'en-US')}</label>
          <ColorArea
            aria-labelledby="slh-label-id-1"
            value={color}
            onChange={setColor}
            xChannel={sChannel}
            yChannel={lChannel} />
          <ColorSlider
              channel={hChannel}
              value={color}
              onChange={setColor} />
        </div>
        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>
          <label id="lhs-label-id-1">x: {color.getChannelName(hChannel, 'en-US')}, y: {color.getChannelName(lChannel, 'en-US')}</label>
          <ColorArea
            aria-labelledby="lhs-label-id-1"
            value={color}
            onChange={setColor}
            xChannel={hChannel}
            yChannel={lChannel} />
          <ColorSlider
              channel={sChannel}
              value={color}
              onChange={setColor} />
        </div>
        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>
          <label id="hsl-label-id-1">x: {color.getChannelName(hChannel, 'en-US')}, y: {color.getChannelName(sChannel, 'en-US')}</label>
          <ColorArea
            aria-labelledby="hsl-label-id-1"
            value={color}
            onChange={setColor}
            xChannel={hChannel}
            yChannel={sChannel} />
          <ColorSlider
              channel={lChannel}
              value={color}
              onChange={setColor} />
        </div>
      </div>
      <p>Current HSL color value: <ColorSwatch color={color} aria-hidden="true" style={{width: '16px', height: '16px', verticalAlign: 'text-bottom'}} /> {color.toString('hsl')}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing Custom Drag Preview in React Spectrum ListView
DESCRIPTION: Example showing how to create a ListView with custom drag previews using the renderPreview prop. The example defines a list of file items that can be dragged with a custom preview that displays the dragged keys and the primary dragged key.

LANGUAGE: tsx
CODE:
import {View} from '@react-spectrum/view';

function CustomDragPreviewExample() {
  let list = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop'},
      {id: '2', type: 'file', name: 'Adobe XD'},
      {id: '3', type: 'file', name: 'Adobe InDesign'},
      {id: '4', type: 'file', name: 'Adobe AfterEffects'}
    ]
  });

  let {dragAndDropHooks} = useDragAndDrop({
    getItems: (keys) => [...keys].map(key => {
      let item = list.getItem(key);
      return {
        'custom-app-type': JSON.stringify(item),
        'text/plain': item.name
      };
    }),
    /*- begin highlight -*/
    renderPreview: (keys, draggedKey) => (
      <View backgroundColor="gray-50" padding="size-100" borderRadius="medium" borderWidth="thin" borderColor="blue-500">
        <strong>Custom Preview</strong>
        <div>Keys: [{[...keys].join(', ')}]</div>
        <div>Dragged: {draggedKey}</div>
      </View>
    )
    /*- end highlight -*/
  });

  return (
    <ListView
      aria-label="Draggable ListView with custom drag preview"
      selectionMode="multiple"
      width="size-3600"
      height="size-2400"
      dragAndDropHooks={dragAndDropHooks}
      items={list.items}>
      {item => (
        <Item textValue={item.name}>
          {item.name}
        </Item>
      )}
    </ListView>
  );
}

----------------------------------------

TITLE: Implementing Realtime Password Validation with TextField in React Spectrum
DESCRIPTION: This example demonstrates how to implement realtime validation for a password field using controlled state. It validates password length, uppercase letters, and symbols as the user types, displaying errors immediately.

LANGUAGE: tsx
CODE:
function Example() {
  let [password, setPassword] = React.useState('');
  let errors = [];
  if (password.length < 8) {
    errors.push('Password must be 8 characters or more.');
  }
  if ((password.match(/[A-Z]/g) ?? []).length < 2) {
    errors.push('Password must include at least 2 upper case letters');
  }
  if ((password.match(/[^a-z]/ig) ?? []).length < 2) {
    errors.push('Password must include at least 2 symbols.');
  }

  return (
    <TextField isInvalid={errors.length > 0} value={password} onChange={setPassword}>
      <Label>Name</Label>
      <Input />
      <FieldError>
        <ul>{errors.map((error, i) => <li key={i}>{error}</li>)}</ul>
      </FieldError>
    </TextField>
  );
}

----------------------------------------

TITLE: Dynamic Styling with Class Name Functions in React Spectrum
DESCRIPTION: Shows how to apply conditional classes to OverlayArrow components based on placement states.

LANGUAGE: jsx
CODE:
<OverlayArrow className={({placement}) => placement === 'left' || placement === 'right' ? 'rotate-90' : 'rotate-0'}>
  {/* ... */}
</OverlayArrow>

----------------------------------------

TITLE: Basic Checkbox Implementation in React Spectrum
DESCRIPTION: Demonstrates the simplest implementation of a Checkbox component with a text label.

LANGUAGE: tsx
CODE:
<Checkbox>Unsubscribe</Checkbox>

----------------------------------------

TITLE: Creating a Complete Draggable ListView Component in React Spectrum
DESCRIPTION: Implements a complete draggable ListView with useDragAndDrop. This component initializes list data, configures drag operations with getItems and onDragEnd handlers, and renders the ListView with appropriate props.

LANGUAGE: tsx
CODE:
import {Item, ListView, useListData} from '@adobe/react-spectrum';
import {useDragAndDrop} from '@react-spectrum/dnd';

function DraggableList() {
  let list = useListData({
    initialItems: [
      {id: 'a', type: 'file', name: 'Adobe Photoshop'},
      {id: 'b', type: 'file', name: 'Adobe XD'},
      {id: 'c', type: 'file', name: 'Adobe Dreamweaver'},
      {id: 'd', type: 'file', name: 'Adobe InDesign'},
      {id: 'e', type: 'file', name: 'Adobe Connect'}
    ]
  });

  let {dragAndDropHooks} = useDragAndDrop({
    getItems: (keys) => [...keys].map(key => {
      let item = list.getItem(key);
      return {
        'adobe-app': JSON.stringify(item)
      };
    }),
    onDragEnd: (e) => {
      if (e.dropOperation === 'move') {
        list.remove(...e.keys);
      }
    }
  });

  return (
    <ListView
      aria-label="Draggable list view example"
      width="size-3600"
      height="size-3600"
      selectionMode="multiple"
      items={list.items}
      dragAndDropHooks={dragAndDropHooks}>
      {item => (
        <Item textValue={item.name}>
          {item.name}
        </Item>
      )}
    </ListView>
  );
}

----------------------------------------

TITLE: Form with Server-Side Validation Errors
DESCRIPTION: Example showing how to display server-side validation errors using the validationErrors prop.

LANGUAGE: tsx
CODE:
<Form validationErrors={{username: 'Sorry, this username is taken.'}}>
  <TextField name="username">
    <Label>Username</Label>
    <Input />
    <FieldError />
  </TextField>
</Form>

----------------------------------------

TITLE: Implementing ListBox with Replace Selection Behavior for Links
DESCRIPTION: This example demonstrates how to implement a ListBox with the 'replace' selection behavior, allowing items to be selected with a single click and navigate to the link on double-click or Enter key press.

LANGUAGE: tsx
CODE:
<ListBox aria-label="Links" selectionMode="multiple" selectionBehavior="replace">
  <Item href="https://adobe.com/" target="_blank">Adobe</Item>
  <Item href="https://apple.com/" target="_blank">Apple</Item>
  <Item href="https://google.com/" target="_blank">Google</Item>
  <Item href="https://microsoft.com/" target="_blank">Microsoft</Item>
</ListBox>

----------------------------------------

TITLE: DateField Component Structure with Accessibility Features
DESCRIPTION: Full anatomy of a DateField component with support for labels, descriptions, and error messages. Shows the complete structure for building an accessible date input with proper ARIA attributes.

LANGUAGE: tsx
CODE:
import {DateField, Label, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';

<DateField>
  <Label />
  <DateInput>
    {segment => <DateSegment segment={segment} />}
  </DateInput>
  <Text slot="description" />
  <FieldError />
</DateField>

----------------------------------------

TITLE: Building a RangeCalendar Component for DateRangePicker
DESCRIPTION: A RangeCalendar component that implements the month grid shown in the DateRangePicker popover. It uses React Aria's calendar hooks and React Stately for state management. The component displays a navigable calendar that allows selecting date ranges.

LANGUAGE: tsx
CODE:
import {useRangeCalendarState} from '@react-stately/calendar';
import {useRangeCalendar, useCalendarGrid, useCalendarCell} from '@react-aria/calendar';
import {createCalendar, getWeeksInMonth} from '@internationalized/date';

function RangeCalendar(props) {
  let {locale} = useLocale();
  let state = useRangeCalendarState({
    ...props,
    locale,
    createCalendar
  });

  let ref = React.useRef(null);
  let {calendarProps, prevButtonProps, nextButtonProps, title} = useRangeCalendar(props, state, ref);

  return (
    <div {...calendarProps} ref={ref} className="calendar">
      <div className="header">
        <h2>{title}</h2>
        <Button {...prevButtonProps}>&lt;</Button>
        <Button {...nextButtonProps}>&gt;</Button>
      </div>
      <CalendarGrid state={state} firstDayOfWeek={props.firstDayOfWeek} />
    </div>
  );
}

function CalendarGrid({state, ...props}) {
  let {locale} = useLocale();
  let {gridProps, headerProps, weekDays} = useCalendarGrid(props, state);

  // Get the number of weeks in the month so we can render the proper number of rows.
  let weeksInMonth = getWeeksInMonth(state.visibleRange.start, locale, props.firstDayOfWeek);

  return (
    <table {...gridProps}>
      <thead {...headerProps}>
        <tr>
          {weekDays.map((day, index) =>
            <th key={index}>{day}</th>
          )}
        </tr>
      </thead>
      <tbody>
        {[...new Array(weeksInMonth).keys()].map(weekIndex => (
          <tr key={weekIndex}>
            {state.getDatesInWeek(weekIndex).map((date, i) => (
              date ? (
                <CalendarCell
                  key={i}
                  state={state}
                  date={date} />
              ) : <td key={i} />
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
}

function CalendarCell({state, date}) {
  let ref = React.useRef(null);
  let {
    cellProps,
    buttonProps,
    isSelected,
    isOutsideVisibleRange,
    isDisabled,
    isUnavailable,
    formattedDate
  } = useCalendarCell({date}, state, ref);

  return (
    <td {...cellProps}>
      <div
        {...buttonProps}
        ref={ref}
        hidden={isOutsideVisibleRange}
        className={`cell ${isSelected ? 'selected' : ''} ${isDisabled ? 'disabled' : ''} ${isUnavailable ? 'unavailable' : ''}`}>
        {formattedDate}
      </div>
    </td>
  );
}

----------------------------------------

TITLE: Icon-Only ToggleButton with Accessibility Label
DESCRIPTION: Shows how to implement an accessible icon-only ToggleButton by providing an aria-label for screen readers.

LANGUAGE: tsx
CODE:
<ToggleButton aria-label="Icon only">
  <Pin />
</ToggleButton>

----------------------------------------

TITLE: CSS Styling for React Aria Checkbox Component
DESCRIPTION: Comprehensive CSS styling for the Checkbox component, including styles for different states like hover, focus, selected, and indeterminate. The CSS handles transitions and animations for the checkmark.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Checkbox {
  --selected-color: var(--highlight-background);
  --selected-color-pressed: var(--highlight-background-pressed);
  --checkmark-color: var(--highlight-foreground);

  display: flex;
  align-items: center;
  gap: 0.571rem;
  font-size: 1.143rem;
  color: var(--text-color);
  forced-color-adjust: none;

  .checkbox {
    width: 1.143rem;
    height: 1.143rem;
    border: 2px solid var(--border-color);
    border-radius: 4px;
    transition: all 200ms;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  svg {
    width: 1rem;
    height: 1rem;
    fill: none;
    stroke: var(--checkmark-color);
    stroke-width: 3px;
    stroke-dasharray: 22px;
    stroke-dashoffset: 66;
    transition: all 200ms;
  }

  &[data-pressed] .checkbox {
    border-color: var(--border-color-pressed);
  }

  &[data-focus-visible] .checkbox {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: 2px;
  }

  &[data-selected],
  &[data-indeterminate] {
    .checkbox {
      border-color: var(--selected-color);
      background: var(--selected-color);
    }

    &[data-pressed] .checkbox {
      border-color: var(--selected-color-pressed);
      background: var(--selected-color-pressed);
    }

    svg {
      stroke-dashoffset: 44;
    }
  }

  &[data-indeterminate] {
    & svg {
      stroke: none;
      fill: var(--checkmark-color);
    }
  }
}

----------------------------------------

TITLE: Implementing Responsive Styles with Breakpoints
DESCRIPTION: Shows how to use object syntax for responsive styling in React Spectrum. The TextField width changes based on the viewport size using t-shirt sized breakpoints.

LANGUAGE: tsx
CODE:
<TextField label="Name" width={{base: 'size-2000', L: 'size-5000'}} />

----------------------------------------

TITLE: Tray DialogTrigger Example in React Spectrum
DESCRIPTION: Shows how to create a tray dialog commonly used for mobile devices or smaller screens, displaying a message notification example.

LANGUAGE: tsx
CODE:
<DialogTrigger type="tray">
  <ActionButton>Check Messages</ActionButton>
  <Dialog>
    <Heading>New Messages</Heading>
    <Divider />
    <Content>
      <Text>
        You have 5 new messages.
      </Text>
    </Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Formatting DateRangePicker Values for Display in React
DESCRIPTION: This example demonstrates how to handle the onChange event from a DateRangePicker, converting the specialized date objects into native JavaScript Date objects for localized formatting.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@react-aria/i18n';

function Example() {
  let [range, setRange] = React.useState({
    start: parseDate('2020-07-03'),
    end: parseDate('2020-07-10')
  });
  let formatter = useDateFormatter({dateStyle: 'long'});

  return (
    <>
      <MyDateRangePicker label="Date range" value={range} onChange={setRange} />
      <p>Selected date: {range ? formatter.formatRange(range.start.toDate(getLocalTimeZone()), range.end.toDate(getLocalTimeZone())) : '--'}</p>
    </>
  );
}

----------------------------------------

TITLE: Handling Button Press Events with React Hooks
DESCRIPTION: Demonstrates how to use the Button component with press events, showing feedback about the type of interaction (mouse, touch, keyboard) being used.

LANGUAGE: tsx
CODE:
function Example() {
  let [pointerType, setPointerType] = React.useState('');

  return (
    <>
      <Button
        onPressStart={e => setPointerType(e.pointerType)}
        onPressEnd={() => setPointerType('')}>
        Press me
      </Button>
      <p>{pointerType ? `You are pressing the button with a ${pointerType}!` : 'Ready to be pressed.'}</p>
    </>
  )
}

----------------------------------------

TITLE: Implementing a Basic ColorField Component with React Aria
DESCRIPTION: Example showing how to implement a basic ColorField component using the useColorField hook from React Aria and useColorFieldState from React Stately.

LANGUAGE: tsx
CODE:
import {useColorField} from '@react-aria/color';
import {useColorFieldState} from '@react-stately/color';

function ColorField(props) {
  let state = useColorFieldState(props);
  let inputRef = React.useRef(null);
  let {
    labelProps,
    inputProps
  } = useColorField(props, state, inputRef);

  return (
    <div style={{display: 'inline-flex', flexDirection: 'column'}}>
      <label {...labelProps}>{props.label}</label>
      <input {...inputProps} ref={inputRef} />
    </div>
  );
}

<ColorField label="Color" />

----------------------------------------

TITLE: Read-only Form in React Spectrum
DESCRIPTION: Demonstrates a read-only form where users can see but not edit the form values, useful for displaying information without allowing changes.

LANGUAGE: tsx
CODE:
<Form
  isReadOnly
  aria-label="isReadOnly example"
  maxWidth="size-3600">
  <TextField label="Name" value="John Smith" />
  <RadioGroup label="Favorite pet">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: Implementing Multi-Format Drag Data for Cross-Application Compatibility
DESCRIPTION: This example shows how to provide drag data in multiple formats (plain text, HTML, and custom JSON) to enable interoperability between your application and external applications. Each item can be represented in different ways depending on where it's dropped.

LANGUAGE: tsx
CODE:
function DraggableTable() {
  let items = [
    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},
    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},
    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},
    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}
  ];

  let { dragAndDropHooks } = useDragAndDrop({
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    getItems(keys) {
      return [...keys].map(key => {
        let item = items.find(item => item.id === key)!;
        return {
          'text/plain': `${item.name} – ${item.type}`,
          'text/html': `<strong>${item.name}</strong> – <em>${item.type}</em>`,
          'pokemon': JSON.stringify(item)
        };
      });
    },
  });

  return (
    <PokemonTable
      items={items}
      selectionMode="multiple"
      dragAndDropHooks={dragAndDropHooks} />
  );
}

<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
  <DraggableTable />
  {/* see below */}
  <DroppableTable />
</div>

----------------------------------------

TITLE: Creating a FieldGroup Component with TextFieldContext
DESCRIPTION: Advanced example of using TextFieldContext to create a group of text fields with shared validation state and error messaging.

LANGUAGE: tsx
CODE:
import {TextFieldContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface FieldGroupProps {
  title?: string,
  children?: React.ReactNode,
  errorMessage?: string
}

function FieldGroup({title, children, errorMessage}: FieldGroupProps) {
  let errorId = useId();
  return (
    <fieldset>
      <legend>{title}</legend>
      <TextFieldContext.Provider value={{
        isInvalid: !!errorMessage,
        'aria-describedby': errorMessage ? errorId : undefined
      }}>
        {children}
      </TextFieldContext.Provider>
      {errorMessage && <small id={errorId} className="invalid">{errorMessage}</small>}
    </fieldset>
  );
}

<FieldGroup title="Account details" errorMessage="Invalid account details.">
  <MyTextField label="Name" defaultValue="Devon" />
  <MyTextField label="Email" defaultValue="devon@example.com" />
</FieldGroup>

----------------------------------------

TITLE: Creating a Custom Tab Navigation Component with TabListStateContext
DESCRIPTION: Example of accessing and manipulating tab list state via context to create a custom navigation component for tabs.

LANGUAGE: tsx
CODE:
import {TabListStateContext, Button} from 'react-aria-components';

function TabNavigation() {
  /*- begin highlight -*/
  let state = React.useContext(TabListStateContext);
  /*- end highlight -*/
  let prevKey = state?.collection.getKeyBefore(state.selectedKey);
  let nextKey = state?.collection.getKeyAfter(state.selectedKey);
  let onPrev = prevKey != null ? () => state.setSelectedKey(prevKey) : null;
  let onNext = nextKey != null ? () => state.setSelectedKey(nextKey) : null;
  return (
    <div className="button-group">
      <Button aria-label="Previous tab" onPress={onPrev}>←</Button>
      <Button aria-label="Next tab" onPress={onNext}>→</Button>
    </div>
  );
}

<Tabs>
  <div style={{display: 'flex'}}>
    <TabList aria-label="Tabs" style={{flex: 1}}>
      <Tab id="home">Home</Tab>
      <Tab id="projects">Projects</Tab>
      <Tab id="search">Search</Tab>
    </TabList>
    {/*- begin highlight -*/}
    <TabNavigation />
    {/*- end highlight -*/}
  </div>
  <TabPanel id="home">Home</TabPanel>
  <TabPanel id="projects">Projects</TabPanel>
  <TabPanel id="search">Search</TabPanel>
</Tabs>

----------------------------------------

TITLE: Button Events Handling with useButton in React
DESCRIPTION: Shows how to handle press events with the Button component. This example demonstrates tracking the pointer type during button interactions using onPressStart and onPressEnd events.

LANGUAGE: tsx
CODE:
function Example() {
  let [pointerType, setPointerType] = React.useState(null);

  return (
    <>
      <Button
        onPressStart={e => setPointerType(e.pointerType)}
        onPressEnd={e => setPointerType(null)}>
        Press me
      </Button>
      <p>{pointerType ? `You are pressing the button with a ${pointerType}!` : 'Ready to be pressed.'}</p>
    </>
  )
}

----------------------------------------

TITLE: Implementing a Dynamic Collection Table in React Spectrum
DESCRIPTION: Creates a table with dynamic columns and rows where data is defined programmatically rather than hard-coded in JSX. The example demonstrates how to render columns and rows using function props.

LANGUAGE: tsx
CODE:
function ExampleTable(props) {
  let columns = [
    {name: 'Name', key: 'name'},
    {name: 'Type', key: 'type'},
    {name: 'Date Modified', key: 'date'}
  ];

  let rows = [
    {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},
    {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},
    {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},
    {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}
  ];

  return (
    <Table aria-label="Example dynamic collection table" {...props}>
      <TableHeader columns={columns}>
        {column => (
          <Column>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={rows}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </Table>
  );
}

----------------------------------------

TITLE: Styling Tree Component with CSS
DESCRIPTION: Comprehensive CSS styling for the Tree component, including states like focus, selection, hover, and expansion. Includes styling for tree items, chevron buttons, nested items, and accessibility-focused visual cues.

LANGUAGE: css
CODE:
.react-aria-Tree {
  display: flex;
  flex-direction: column;
  gap: 2px;
  overflow: auto;
  padding: 4px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: var(--overlay-background);
  forced-color-adjust: none;
  outline: none;
  width: 250px;
  max-height: 300px;
  box-sizing: border-box;

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: -1px;
  }

  .react-aria-TreeItem {
    display: flex;
    align-items: center;
    gap: 0.571rem;
    min-height: 28px;
    padding: 0.286rem 0.286rem 0.286rem 0.571rem;
    --padding: 8px;
    border-radius: 6px;
    outline: none;
    cursor: default;
    color: var(--text-color);
    font-size: 1.072rem;
    position: relative;
    transform: translateZ(0);

    .react-aria-Button[slot=chevron] {
      all: unset;
      display: flex;
      visibility: hidden;
      align-items: center;
      justify-content: center;
      width: 1.3rem;
      height: 100%;
      padding-left: calc((var(--tree-item-level) - 1) * var(--padding));

      svg {
        rotate: 0deg;
        transition: rotate 200ms;
        width: 12px;
        height: 12px;
        fill: none;
        stroke: currentColor;
        stroke-width: 3px;
      }
    }

    &[data-has-child-items] .react-aria-Button[slot=chevron] {
      visibility: visible;
    }

    &[data-expanded] .react-aria-Button[slot=chevron] svg {
      rotate: 90deg;
    }

    &[data-focus-visible] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -2px;
    }

    &[data-pressed] {
      background: var(--gray-100);
    }

    &[data-selected] {
      background: var(--highlight-background);
      color: var(--highlight-foreground);
      --focus-ring-color: var(--highlight-foreground);

      &[data-focus-visible] {
        outline-color: var(--highlight-foreground);
        outline-offset: -4px;
      }

      .react-aria-Button {
        color: var(--highlight-foreground);
        --highlight-hover: rgb(255 255 255 / 0.1);
        --highlight-pressed: rgb(255 255 255 / 0.2);
      }
    }

    &[data-disabled] {
      color: var(--text-color-disabled);
    }

    .react-aria-Button:not([slot]) {
      margin-left: auto;
      background: transparent;
      border: none;
      font-size: 1.2rem;
      line-height: 1.2em;
      padding: 0.286rem 0.429rem;
      transition: background 200ms;

      &[data-hovered] {
        background: var(--highlight-hover);
      }

      &[data-pressed] {
        background: var(--highlight-pressed);
        box-shadow: none;
      }
    }
  }

  /* join selected items if :has selector is supported */
  @supports selector(:has(.foo)) {
    gap: 0;

    .react-aria-TreeItem[data-selected]:has(+ [data-selected]) {
      border-end-start-radius: 0;
      border-end-end-radius: 0;
    }

    .react-aria-TreeItem[data-selected] + [data-selected] {
      border-start-start-radius: 0;
      border-start-end-radius: 0;
    }
  }

  :where(.react-aria-TreeItem) .react-aria-Checkbox {
    --selected-color: var(--highlight-foreground);
    --selected-color-pressed: var(--highlight-foreground-pressed);
    --checkmark-color: var(--highlight-background);
    --background-color: var(--highlight-background);
  }
}

----------------------------------------

TITLE: Overriding First Day of Week for startOfWeek Function
DESCRIPTION: Shows how to override the default first day of the week in the startOfWeek function by providing an optional firstDayOfWeek parameter in addition to the locale.

LANGUAGE: tsx
CODE:
startOfWeek(date, 'en-US', 'mon'); // 2022-01-31T09:45[America/Los_Angeles]

----------------------------------------

TITLE: Calendar Component Full Anatomy Structure
DESCRIPTION: Example showing the complete anatomy of a Calendar component with all possible subcomponents including header, grid, cells, and error message support.

LANGUAGE: tsx
CODE:
import {Calendar, Heading, Button, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Text} from 'react-aria-components';

<Calendar>
  <Button slot="previous" />
  <Heading />
  <Button slot="next" />
  <CalendarGrid>
    <CalendarGridHeader>
      {day => <CalendarHeaderCell />}
    </CalendarGridHeader>
    <CalendarGridBody>
      {date => <CalendarCell date={date} />}
    </CalendarGridBody>
  </CalendarGrid>
  <Text slot="errorMessage" />
</Calendar>

----------------------------------------

TITLE: Allowing Non-Contiguous Ranges in DateRangePicker
DESCRIPTION: Example demonstrating how to use the allowsNonContiguousRanges prop to enable selection of date ranges that include unavailable dates, specifically for selecting weekday-only ranges across multiple weeks.

LANGUAGE: tsx
CODE:
import {isWeekend} from '@internationalized/date';

function Example() {
  let {locale} = useLocale();

  return <DateRangePicker label="Time off request" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />
}

----------------------------------------

TITLE: Programmatic Focus Management with useFocusManager in React
DESCRIPTION: Shows how to use the useFocusManager hook to implement keyboard navigation within a toolbar component. Arrow keys move focus between buttons with wrapping enabled, demonstrating programmatic focus control within a FocusScope.

LANGUAGE: tsx
CODE:
import {useFocusManager} from '@react-aria/focus';

function Toolbar(props) {
  return (
    <div role="toolbar">
      <FocusScope>
        {props.children}
      </FocusScope>
    </div>
  );
}

function ToolbarButton(props) {
  let focusManager = useFocusManager();
  let onKeyDown = (e) => {
    switch (e.key) {
      case 'ArrowRight':
        focusManager.focusNext({wrap: true});
        break;
      case 'ArrowLeft':
        focusManager.focusPrevious({wrap: true});
        break;
    }
  };

  return (
    <button
      onKeyDown={onKeyDown}>
      {props.children}
    </button>
  );
}

<Toolbar>
  <ToolbarButton>Cut</ToolbarButton>
  <ToolbarButton>Copy</ToolbarButton>
  <ToolbarButton>Paste</ToolbarButton>
</Toolbar>

----------------------------------------

TITLE: Image DropZone with Type Filtering and Preview
DESCRIPTION: Advanced DropZone implementation for handling image files. This example filters for specific image types, creates object URLs for previews, and renders dropped images within the zone.

LANGUAGE: tsx
CODE:
function Example() {
  let [filledSrc, setFilledSrc] = React.useState(null);

  return (
    <>
      <DraggableImage />
      <DropZone
        isFilled={!!filledSrc}
        maxWidth="size-3000"
        height="size-2400"
        getDropOperation={(types) =>  (types.has('image/png') || types.has('image/jpeg')) ? 'copy' : 'cancel'}
        onDrop={async (e) => {
          e.items.find(async (item) => {
            if (item.kind === 'file') {
              if (item.type === 'image/jpeg' || item.type === 'image/png') {
                setFilledSrc(URL.createObjectURL(await item.getFile()));
              }
            } else if (item.kind === 'text') {
              setFilledSrc(await item.getText('image/jpeg'));
            }
          });
        }}>
        {filledSrc
          ? <img className="images" alt="" src={filledSrc} />
          : (
            <IllustratedMessage>
              <Upload />
              <Heading>
                Drag and drop photos
              </Heading>
            </IllustratedMessage>
          )}
      </DropZone>
    </>
  );
}

----------------------------------------

TITLE: Adapting Custom Components with LabelContext in React Aria Components
DESCRIPTION: This example shows how to make an existing custom label component compatible with React Aria Components by consuming the LabelContext. The useContextProps hook merges local props and ref with those provided via context by ColorSlider.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Menu with Static Sections
DESCRIPTION: Demonstrates how to organize menu items into sections using the Section component. This example shows static sections with grouped items and supports multiple selection mode.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set(['bold', 'left']));

  return (
    <MenuTrigger>
      <ActionButton>
        Edit
      </ActionButton>
      <Menu selectionMode="multiple" selectedKeys={selected} onSelectionChange={setSelected}>
        <Section title="Styles">
          <Item key="bold">Bold</Item>
          <Item key="underline">Underline</Item>
        </Section>
        <Section title="Align">
          <Item key="left">Left</Item>
          <Item key="middle">Middle</Item>
          <Item key="right">Right</Item>
        </Section>
      </Menu>
    </MenuTrigger>
  );
}

----------------------------------------

TITLE: Implementing a Dialog with Popover
DESCRIPTION: Example showing how to use Dialog within a Popover to display contextual information with an arrow pointing to the trigger element.

LANGUAGE: tsx
CODE:
import {Popover, OverlayArrow} from 'react-aria-components';

<DialogTrigger>
  <Button aria-label="Help">ⓘ</Button>
  <Popover>
    <OverlayArrow>
      <svg width={12} height={12} viewBox="0 0 12 12"><path d="M0 0 L6 6 L12 0" /></svg>
    </OverlayArrow>
    <Dialog>
      <Heading slot="title">Help</Heading>
      <p>For help accessing your account, please contact support.</p>
    </Dialog>
  </Popover>
</DialogTrigger>

----------------------------------------

TITLE: Implementing Asynchronous Loading in SearchAutocomplete with useAsyncList
DESCRIPTION: Shows how to implement asynchronous data loading in a SearchAutocomplete component using the useAsyncList hook. This example fetches Star Wars character data from an API as the user types.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Character {
  name: string
}

function AsyncLoadingExample() {
  let list = useAsyncList<Character>({
    async load({signal, cursor, filterText}) {
      if (cursor) {
        cursor = cursor.replace(/^http:\/\//i, 'https://');
      }

      // If no cursor is available, then we're loading the first page,
      // filtering the results returned via a query string that
      // mirrors the SearchAutocomplete input text.
      // Otherwise, the cursor is the next URL to load,
      // as returned from the previous page.
      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=${filterText}`, {signal});
      let json = await res.json();

      return {
        items: json.results,
        cursor: json.next
      };
    }
  });

  return (
    <SearchAutocomplete
      label="Star Wars Character Lookup"
      items={list.items}
      inputValue={list.filterText}
      onInputChange={list.setFilterText}
      loadingState={list.loadingState}
      onLoadMore={list.loadMore}>
      {item => <Item key={item.name}>{item.name}</Item>}
    </SearchAutocomplete>
  );
}

----------------------------------------

TITLE: Creating a Reusable ColorArea Component in React
DESCRIPTION: Example of wrapping the ColorArea and ColorThumb components into a reusable component for consistency across an application. The wrapper accepts all ColorAreaProps and sets a default color value.

LANGUAGE: tsx
CODE:
import type {ColorAreaProps} from 'react-aria-components';

export function MyColorArea(props: ColorAreaProps) {
  return (
    <ColorArea {...props}>
      <ColorThumb />
    </ColorArea>
  );
}

<MyColorArea defaultValue="hsl(30, 100%, 50%)" />

----------------------------------------

TITLE: Implementing Insert Between Items Functionality in React Tables
DESCRIPTION: Implementation of dropping between table items using the onInsert event. This example processes JSON data from dropped text items and inserts them before or after the target item in the list.

LANGUAGE: tsx
CODE:
import {isTextDropItem} from 'react-aria-components';

function Example() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Bulbasaur', type: 'Grass, Poison', level: '65'},
      {id: 2, name: 'Charmander', type: 'Fire', level: '89'},
      {id: 3, name: 'Squirtle', type: 'Water', level: '77'},
      {id: 4, name: 'Caterpie', type: 'Bug', level: '46'}
    ]
  });

  let { dragAndDropHooks } = useDragAndDrop({
    async onInsert(e) {
      let items = await Promise.all(e.items.filter(isTextDropItem).map(async item => {
        let {name, type, level} = JSON.parse(await item.getText('pokemon'));
        return {id: Math.random(), name, type, level};
      }));

      if (e.target.dropPosition === 'before') {
        list.insertBefore(e.target.key, ...items);
      } else if (e.target.dropPosition === 'after') {
        list.insertAfter(e.target.key, ...items);
      }
    }
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      <DraggableTable />
      <PokemonTable items={list.items} dragAndDropHooks={dragAndDropHooks} />
    </div>
  );
}

----------------------------------------

TITLE: ListBox with Link Items
DESCRIPTION: Shows how to create a ListBox with items that act as links to external websites. Link items use the href prop and can open in new tabs with the target attribute.

LANGUAGE: tsx
CODE:
<ListBox aria-label="Links">
  <Item href="https://adobe.com/" target="_blank">Adobe</Item>
  <Item href="https://apple.com/" target="_blank">Apple</Item>
  <Item href="https://google.com/" target="_blank">Google</Item>
  <Item href="https://microsoft.com/" target="_blank">Microsoft</Item>
</ListBox>

----------------------------------------

TITLE: Implementing a Dialog with Custom Trigger
DESCRIPTION: Example showing how to use a custom trigger element with DialogTrigger by wrapping it with the Pressable component to ensure accessibility and proper interaction.

LANGUAGE: tsx
CODE:
import {Pressable} from 'react-aria-components';

<DialogTrigger>
  <Pressable>
    <span role="button">Custom trigger</span>
  </Pressable>
  <Modal>
    <Dialog>
      <Heading slot="title">Dialog</Heading>
      <p>This dialog was triggered by a custom button.</p>
      <Button slot="close">Close</Button>
    </Dialog>
  </Modal>
</DialogTrigger>

----------------------------------------

TITLE: Creating Bi-directional Draggable ListViews in React Spectrum
DESCRIPTION: Implements a pair of ListViews that support dragging and dropping items between each list while maintaining internal reordering capability. The solution handles moving items between lists and removing them from the source list when appropriate.

LANGUAGE: tsx
CODE:
function BidirectionalDnDListView(props: DndListViewProps) {
  let {list} = props;
  let {dragAndDropHooks} = useDragAndDrop({
    acceptedDragTypes: ['custom-app-type-bidirectional'],
    // Only allow move operations
    getAllowedDropOperations: () => ['move'],
    getItems(keys) {
      return [...keys].map(key => {
        let item = list.getItem(key);
        // Setup the drag types and associated info for each dragged item.
        return {
          'custom-app-type-bidirectional': JSON.stringify(item),
          'text/plain': item.name
        };
      });
    },
    onInsert: async (e) => {
      let {
        items,
        target
      } = e;
      let processedItems = await Promise.all(
        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-bidirectional')))
      );
      if (target.dropPosition === 'before') {
        list.insertBefore(target.key, ...processedItems);
      } else if (target.dropPosition === 'after') {
        list.insertAfter(target.key, ...processedItems);
      }
    },
    onReorder: async (e) => {
      let {
        keys,
        target
      } = e;

      if (target.dropPosition === 'before') {
        list.moveBefore(target.key, [...keys]);
      } else if (target.dropPosition === 'after') {
        list.moveAfter(target.key, [...keys]);
      }
    },
    onRootDrop: async (e) => {
      let {
        items
      } = e;
      let processedItems = await Promise.all(
        items.map(async item => JSON.parse(await (item as TextDropItem).getText('custom-app-type-bidirectional')))
      );
      list.append(...processedItems);
    },
    /*- begin highlight -*/
    onDragEnd: (e) => {
      let {
        dropOperation,
        keys,
        isInternal
      } = e;
      // Only remove the dragged items if they aren't dropped inside the source list
      if (dropOperation === 'move' && !isInternal) {
        list.remove(...keys);
      }
    }
    /*- end highlight -*/
  });

  return (
    <ListView
      aria-label={props['aria-label']}
      selectionMode="multiple"
      width="size-3600"
      height="size-3600"
      items={list.items}
      dragAndDropHooks={dragAndDropHooks}>
      {item => (
        <Item textValue={item.name}>
          {item.type === 'folder' && <Folder />}
          <Text>{item.name}</Text>
        </Item>
      )}
    </ListView>
  );
}

function DragBetweenListsExample() {
  let list1 = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop'},
      {id: '2', type: 'file', name: 'Adobe XD'},
      {id: '3', type: 'folder', name: 'Documents'},
      {id: '4', type: 'file', name: 'Adobe InDesign'},
      {id: '5', type: 'folder', name: 'Utilities'},
      {id: '6', type: 'file', name: 'Adobe AfterEffects'}
    ]
  });

  let list2 = useListData({
    initialItems: [
      {id: '7', type: 'folder', name: 'Pictures'},
      {id: '8', type: 'file', name: 'Adobe Fresco'},
      {id: '9', type: 'folder', name: 'Apps'},
      {id: '10', type: 'file', name: 'Adobe Illustrator'},
      {id: '11', type: 'file', name: 'Adobe Lightroom'},
      {id: '12', type: 'file', name: 'Adobe Dreamweaver'}
    ]
  });


  return (
    <Flex wrap gap="size-300">
      <BidirectionalDnDListView list={list1} aria-label="First ListView in drag between list example" />
      <BidirectionalDnDListView list={list2} aria-label="Second ListView in drag between list example" />
    </Flex>
  );
}

----------------------------------------

TITLE: Styling React Spectrum Components with Style Macros
DESCRIPTION: Example of applying style macros to React Spectrum components using the styles prop instead of className.

LANGUAGE: jsx
CODE:
<Button styles={style({marginStart: 16})}>
  Hello Spectrum 2!
</Button>

----------------------------------------

TITLE: Configuring Selection Behavior in React Spectrum Table
DESCRIPTION: This example shows how to configure the selection behavior in a Table component to use the 'replace' mode instead of the default 'toggle' mode. In 'replace' mode, clicking a row replaces the selection, while modifier keys can be used for multiple selection.

LANGUAGE: tsx
CODE:
<PokemonTable selectionMode="multiple" selectionBehavior="replace" />

----------------------------------------

TITLE: Using disabledKeys Prop for Dynamic Collections in React Spectrum Table
DESCRIPTION: This example demonstrates how to use the disabledKeys prop at the Table level to disable specific rows based on their keys. This approach is convenient for dynamic collections and accepts an array of row IDs to be disabled.

LANGUAGE: tsx
CODE:
<PokemonTable selectionMode="multiple" disabledKeys={[3]} />

----------------------------------------

TITLE: Basic ColorArea Component Implementation in React
DESCRIPTION: A simple example of implementing the ColorArea component with a ColorThumb for selecting colors. The component displays a color area that the user can interact with to select a two-dimensional color value.

LANGUAGE: tsx
CODE:
import {ColorArea, ColorThumb} from 'react-aria-components';

<ColorArea>
  <ColorThumb />
</ColorArea>

----------------------------------------

TITLE: Implementing Selection Checkbox Component for List Items
DESCRIPTION: Adds support for selection checkboxes to list items using the useGridListSelectionCheckbox hook. The checkbox allows users to explicitly select items in the list.

LANGUAGE: tsx
CODE:
import {useGridListSelectionCheckbox} from '@react-aria/gridlist';

// Reuse the Checkbox from your component library. See below for details.
import {Checkbox} from 'your-component-library';

function ListCheckbox({ item, state }) {
  let { checkboxProps } = useGridListSelectionCheckbox({ key: item.key }, state);
  return <Checkbox {...checkboxProps} />;
}

----------------------------------------

TITLE: Creating Color Channel Sliders with ColorPicker in React Aria
DESCRIPTION: This example demonstrates how to implement channel sliders in a ColorPicker. It uses ColorSlider components to adjust each channel of a color value and a Select component to switch between different color spaces (RGB, HSL, HSB).

LANGUAGE: tsx
CODE:
import type {ColorSpace} from 'react-aria-components';
import {getColorChannels} from 'react-aria-components';
import {MyColorSlider} from './ColorSlider';
import {MySelect, MyItem} from './Select';

function Example() {
  let [space, setSpace] = React.useState<ColorSpace>('rgb');

  return (
    <MyColorPicker label="Fill color" defaultValue="#184">
      <MySelect aria-label="Color space" selectedKey={space} onSelectionChange={s => setSpace(s as ColorSpace)}>
        <MyItem id="rgb">RGB</MyItem>
        <MyItem id="hsl">HSL</MyItem>
        <MyItem id="hsb">HSB</MyItem>
      </MySelect>
      {getColorChannels(space).map(channel => (
        <MyColorSlider key={channel} colorSpace={space} channel={channel} />
      ))}
      <MyColorSlider channel="alpha" />
    </MyColorPicker>
  );
}

----------------------------------------

TITLE: Icon-only Button Implementation in React Spectrum
DESCRIPTION: Demonstrates how to create Buttons that only contain icons, with proper accessibility attributes for screen readers.

LANGUAGE: tsx
CODE:
<Flex direction="row" gap={8}>
  <Button variant="accent" aria-label="Ring for service"><Bell /></Button>
  <Button variant="primary" aria-label="Ring for service"><Bell /></Button>
  <Button variant="secondary" aria-label="Ring for service"><Bell /></Button>
</Flex>

----------------------------------------

TITLE: Implementing Drop Zone Functionality on Table Root in React
DESCRIPTION: This example shows how to enable dropping on the entire table using the onRootDrop event handler. When valid items are dragged over the table, it receives the isDropTarget state and can be styled accordingly using CSS.

LANGUAGE: tsx
CODE:
import {isTextDropItem} from 'react-aria-components';

function Example() {
  let [items, setItems] = React.useState<Pokemon[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    async onRootDrop(e) {
      let items = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => (
        JSON.parse(await item.getText('pokemon'))
      )));
      setItems(items);
    }
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      <DraggableTable />
      <PokemonTable
        items={items}
        dragAndDropHooks={dragAndDropHooks}
        renderEmptyState={() => 'Drop items here'} />
    </div>
  );
}

LANGUAGE: css
CODE:
.react-aria-Table[data-drop-target] {
  outline: 2px solid var(--highlight-background);
  outline-offset: -1px;
  background: var(--highlight-overlay)
}

----------------------------------------

TITLE: Implementing TableLayout with Virtualizer in React Aria Components
DESCRIPTION: Example showing how to implement a virtualized table using TableLayout with React Aria Components. The TableLayout handles both horizontal and vertical scrolling with configurable row heights, heading heights, padding, and gaps.

LANGUAGE: tsx
CODE:
import {TableLayout, Table, TableHeader, Column, TableBody, Row, Cell} from 'react-aria-components';
import {MyCheckbox} from './Checkbox';

let rows = [];
for (let i = 0; i < 1000; i++) {
  rows.push({id: i, foo: `Foo ${i}`, bar: `Bar ${i}`, baz: `Baz ${i}`});
}

function Example() {
  return (
    <Virtualizer
      /*- begin highlight -*/
      layout={TableLayout}
      layoutOptions={{
        rowHeight: 32,
        headingHeight: 32,
        padding: 4,
        gap: 4
      }}
      /*- end highlight -*/
    >
      <Table aria-label="Virtualized Table" selectionMode="multiple">
        <TableHeader>
          <Column width={40} minWidth={0}><MyCheckbox slot="selection" /></Column>
          <Column isRowHeader>Foo</Column>
          <Column>Bar</Column>
          <Column>Baz</Column>
        </TableHeader>
        <TableBody items={rows}>
          {item => (
            <Row style={{width: 'inherit', height: 'inherit'}}>
              <Cell><MyCheckbox slot="selection" /></Cell>
              <Cell>{item.foo}</Cell>
              <Cell>{item.bar}</Cell>
              <Cell>{item.baz}</Cell>
            </Row>
          )}
        </TableBody>
      </Table>
    </Virtualizer>
  );
}

----------------------------------------

TITLE: Styling Select Items with CSS
DESCRIPTION: CSS for styling the Select component items, including focus and selection states with proper accessibility support. It includes proper styling for high-contrast mode using forced-colors media query.

LANGUAGE: css
CODE:
.my-item {
  margin: 2px;
  padding: 4px 8px 4px 22px;
  border-radius: 6px;
  outline: none;
  cursor: default;
  color: var(--text-color);
  font-size: 1.072rem;
  position: relative;

  &.selected {
    font-weight: 600;
    background: none;

    &::before {
      content: '✓';
      content: '✓' / '';
      alt: ' ';
      position: absolute;
      top: 4px;
      left: 4px;
    }
  }

  &.focused {
    background: #e70073;
    color: white;
  }
}

@media (forced-colors: active) {
  .my-item.focused {
    background: Highlight;
    color: HighlightText;
  }
}

----------------------------------------

TITLE: Common Prop Names in ReactSpectrum Components
DESCRIPTION: Example of standardized prop names used across ReactSpectrum components. This code snippet demonstrates the expected format and common values for various props such as variant, density, orientation, size, and alignment options.

LANGUAGE: javascript
CODE:
variant = 'a' | 'b' // options dependent on component
isQuiet, isEmphasized
density = 'compact' | 'regular' | 'spacious'
orientation = 'horizontal' | 'vertical'
size = 'XS' | 'S' | 'M' | 'L' | 'XL'
align = 'start' | 'end'
labelPosition = 'top' | 'side'
isIndeterminate

----------------------------------------

TITLE: Adding Help Text and Error Messages to DateField
DESCRIPTION: Shows how to add description text and error messages to a DateField component using description and errorMessage props with validationState.

LANGUAGE: tsx
CODE:
<Flex gap="size-100" wrap>
  <DateField label="Date" defaultValue={today(getLocalTimeZone())} validationState="valid" description="Select a meeting date." />
  <DateField label="Date" validationState="invalid" errorMessage="Empty input is not allowed." />
</Flex>

----------------------------------------

TITLE: Importing React Spectrum Layout Component
DESCRIPTION: Imports the Layout component from React Spectrum docs and exports it as the default export.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Implementing Complex Items in SearchAutocomplete with Icons and Descriptions in React Spectrum
DESCRIPTION: This example shows how to create a SearchAutocomplete component with complex items containing icons and descriptive text. Items are organized into sections for productivity and internet applications.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Search apps">
  <Section title="Productivity">
    <Item textValue="Mail">
      <Email size="S" />
      <Text>Mail</Text>
      <Text slot="description">Send and recieve emails</Text>
    </Item>
    <Item textValue="File Explorer">
      <Folder size="S" />
      <Text>File Explorer</Text>
      <Text slot="description">Navigate directories and open files</Text>
    </Item>
    <Item textValue="Document Editor">
      <Document size="S" />
      <Text>Document Editor</Text>
      <Text slot="description">Edit documents</Text>
    </Item>
  </Section>
  <Section title="Internet">
    <Item textValue="Web Browser">
      <WebPages size="S" />
      <Text>Web Browser</Text>
      <Text slot="description">Browse the internet</Text>
    </Item>
    <Item textValue="Social Media">
      <SocialNetwork size="S" />
      <Text>Social Media</Text>
      <Text slot="description">Connect with friends</Text>
    </Item>
    <Item textValue="Shopping">
      <ShoppingCart size="S" />
      <Text>Shopping</Text>
      <Text slot="description">Shop online</Text>
    </Item>
  </Section>
</SearchAutocomplete>

----------------------------------------

TITLE: Disabling Individual Items in ActionBar with disabledKeys in React Spectrum
DESCRIPTION: This example demonstrates how to disable specific action items in an ActionBar component by providing a list of keys to the disabledKeys prop. The example shows a ListView with multiple selection enabled, connected to an ActionBar where the 'edit' action is disabled while keeping 'copy' and 'delete' actions enabled.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function Example() {
  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['photoshop']));

  return (
    <ActionBarContainer height={300} width="size-5000">
      <ListView aria-label="ListView with action bar" selectionMode="multiple" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>
        <Item key="photoshop">Adobe Photoshop</Item>
        <Item key="illustrator">Adobe Illustrator</Item>
        <Item key="xd">Adobe XD</Item>
      </ListView>
      <ActionBar
        /*- begin highlight -*/
        disabledKeys={['edit']}
        /*- end highlight -*/
        isEmphasized={true}
        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}
        onAction={(key) => alert(`Performing ${key} action...`)}
        onClearSelection={() => setSelectedKeys(new Set())}>
        <Item key="edit">
          <Edit />
          <Text>Edit</Text>
        </Item>
        <Item key="copy">
          <Copy />
          <Text>Copy</Text>
        </Item>
        <Item key="delete">
          <Delete />
          <Text>Delete</Text>
        </Item>
      </ActionBar>
    </ActionBarContainer>
  );
}

<Example />

----------------------------------------

TITLE: Creating Custom NumberField with Provider and Context
DESCRIPTION: Implements a custom NumberField component using hooks and Provider to supply context values to child components, allowing reuse of existing React Aria Component implementations.

LANGUAGE: tsx
CODE:
import type {NumberFieldProps} from 'react-aria-components';
import {Provider, GroupContext, InputContext, LabelContext, ButtonContext} from 'react-aria-components';
import {useNumberFieldState} from 'react-stately';
import {useNumberField, useLocale} from 'react-aria';

function CustomNumberField(props: NumberFieldProps) {
  // Follow the hook docs...
  let {locale} = useLocale();
  let state = useNumberFieldState({...props, locale});
  let ref = useRef<HTMLInputElement>(null);
  let {
    labelProps,
    groupProps,
    inputProps,
    incrementButtonProps,
    decrementButtonProps
  } = useNumberField(props, state, ref);

  // Provide values for the child components via context.
  return (
    /*- begin highlight -*/
    <Provider
      values={[
        [GroupContext, groupProps],
        [InputContext, {...inputProps, ref}],
        [LabelContext, labelProps],
        [ButtonContext, {
          slots: {
            increment: incrementButtonProps,
            decrement: decrementButtonProps
          }
        }]
      ]}>
      {props.children}
    </Provider>
    /*- end highlight -*/
  );
}

----------------------------------------

TITLE: Configuring Selection Behavior in React ListBox
DESCRIPTION: This example demonstrates how to set the selection behavior to 'replace' in a ListBox. With this setting, clicking a row replaces the entire selection, and modifier keys can be used for multiple selection.

LANGUAGE: tsx
CODE:
<ListBox
  aria-label="Sandwich contents"
  selectionMode="multiple"
  /*- begin highlight -*/
  selectionBehavior="replace"
  /*- end highlight -*/
>
  <ListBoxItem id="lettuce">Lettuce</ListBoxItem>
  <ListBoxItem id="tomato">Tomato</ListBoxItem>
  <ListBoxItem id="cheese">Cheese</ListBoxItem>
  <ListBoxItem id="tuna">Tuna Salad</ListBoxItem>
  <ListBoxItem id="egg">Egg Salad</ListBoxItem>
  <ListBoxItem id="ham">Ham</ListBoxItem>
</ListBox>

----------------------------------------

TITLE: Creating Menu Sections with Static Items in React Spectrum
DESCRIPTION: Example demonstrating how to group menu items into sections using the MenuSection component with Headers. This allows organizing related menu items into logical groups with labels.

LANGUAGE: tsx
CODE:
import {MenuSection, Header} from 'react-aria-components';

<MyMenuButton label="Actions">
  <MenuSection>
    <Header>Styles</Header>
    <MenuItem>Bold</MenuItem>
    <MenuItem>Underline</MenuItem>
  </MenuSection>
  <MenuSection>
    <Header>Align</Header>
    <MenuItem>Left</MenuItem>
    <MenuItem>Middle</MenuItem>
    <MenuItem>Right</MenuItem>
  </MenuSection>
</MyMenuButton>

----------------------------------------

TITLE: Styling Menu Items Based on State with CSS Selectors
DESCRIPTION: Example of how to target different UI states in React Aria components using data attributes in CSS selectors, specifically for MenuItem components.

LANGUAGE: css
CODE:
.react-aria-MenuItem[data-selected] {
  /* ... */
}

.react-aria-MenuItem[data-focused] {
  /* ... */
}

----------------------------------------

TITLE: Implementing RGBA Color Slider in React Spectrum
DESCRIPTION: This example demonstrates building an RGBA color picker using four color sliders bound to the same color value in state. The parseColor function parses the initial hex color value.

LANGUAGE: tsx
CODE:
function Example() {
  let [color, setColor] = React.useState(parseColor('#ff00ff'));

  return (
    <>
      <MyColorSlider channel="red" value={color} onChange={setColor} />
      <MyColorSlider channel="green" value={color} onChange={setColor} />
      <MyColorSlider channel="blue" value={color} onChange={setColor} />
      <MyColorSlider channel="alpha" value={color} onChange={setColor} />
    </>
  );
}

----------------------------------------

TITLE: Hiding Time Zone Display in DateRangePicker
DESCRIPTION: Example showing how to hide the time zone abbreviation when using ZonedDateTime objects with the hideTimeZone prop.

LANGUAGE: tsx
CODE:
<MyDateRangePicker
  label="Date range"
  defaultValue={{
    start: parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]'),
    end: parseZonedDateTime('2022-11-08T19:45[America/Los_Angeles]')
  }}
  hideTimeZone />

----------------------------------------

TITLE: Creating a Disabled Button
DESCRIPTION: Shows how to create a disabled button using the isDisabled prop, which prevents user interaction with the button.

LANGUAGE: tsx
CODE:
<Button isDisabled>Pin</Button>

----------------------------------------

TITLE: Creating a HelpTrigger Component with React Aria Contexts
DESCRIPTION: Advanced example demonstrating how to use ButtonContext and PopoverContext to create a custom HelpTrigger component that shows a popover when the user presses the ? key, showcasing component composition.

LANGUAGE: tsx
CODE:
import {ButtonContext, PopoverContext} from 'react-aria-components';

interface HelpTriggerProps {
  children?: React.ReactNode
}

function HelpTrigger({children}: HelpTriggerProps) {
  let triggerRef = React.useRef(null);
  let [isOpen, setOpen] = React.useState(false);
  let onKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === '?') {
      setOpen(true);
    }
  };

  return (
    <ButtonContext.Provider value={{onKeyDown, ref: triggerRef}}>
      <PopoverContext.Provider value={{triggerRef, isOpen, onOpenChange: setOpen}}>
        {children}
      </PopoverContext.Provider>
    </ButtonContext.Provider>
  );
}

<HelpTrigger>
  <Button>Press ? for help</Button>
  <MyPopover>
    <Heading slot="title">Help</Heading>
    <div>Do you need help?</div>
  </MyPopover>
</HelpTrigger>

----------------------------------------

TITLE: Basic Implementation of useAsyncList with Pokemon API in React
DESCRIPTION: Example showing how to use useAsyncList to fetch Pokemon data from an API and display them in a Picker component. The hook handles loading state and data fetching using the browser's fetch API.

LANGUAGE: tsx
CODE:
let list = useAsyncList({
  async load({signal}) {
    let res = await fetch('https://pokeapi.co/api/v2/pokemon', {signal});
    let json = await res.json();
    return {items: json.results};
  }
});

<Picker
  label="Pick a Pokemon"
  items={list.items}
  isLoading={list.isLoading}>
  {item => <Item key={item.name}>{item.name}</Item>}
</Picker>

----------------------------------------

TITLE: Implementing a Popover Component with React Aria in TypeScript
DESCRIPTION: This code creates a Popover component used to contain the popup listbox for a Select. It utilizes the usePopover hook from React Aria to handle proper positioning and overlay behavior, with a dismissible container that closes when clicking outside.

LANGUAGE: tsx
CODE:
import type {AriaPopoverProps} from 'react-aria';
import type {OverlayTriggerState} from 'react-stately';
import {usePopover, Overlay, DismissButton} from '@react-aria/overlays';

interface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef'> {
  children: React.ReactNode,
  state: OverlayTriggerState
}

function Popover({children, state, ...props}: PopoverProps) {
  let popoverRef = React.useRef(null);
  let {popoverProps, underlayProps} = usePopover({
    ...props,
    popoverRef
  }, state);

  return (
    <Overlay>
      <div {...underlayProps} style={{position: 'fixed', inset: 0}} />
      <div
        {...popoverProps}
        ref={popoverRef}
        style={{
          ...popoverProps.style,
          background: 'var(--page-background)',
          border: '1px solid gray'
        }}>
        <DismissButton onDismiss={state.close} />
        {children}
        <DismissButton onDismiss={state.close} />
      </div>
    </Overlay>
  );
}

----------------------------------------

TITLE: Implementing Reorderable ListBox with Drag and Drop in React Spectrum
DESCRIPTION: This code creates a custom ReorderableListBox component that combines useDraggableCollection and useDroppableCollection hooks to enable reordering items. It includes setup for both drag and drop state management and implements the necessary item components.

LANGUAGE: tsx
CODE:
import {useDraggableCollectionState} from '@react-stately/dnd';
import {useDraggableCollection, useDraggableItem} from '@react-aria/dnd';

function ReorderableListBox(props) {
  // See useListBox docs for more details.
  let state = useListState(props);
  let ref = React.useRef(null);
  let { listBoxProps } = useListBox({
    ...props,
    shouldSelectOnPressUp: true
  }, state, ref);

  let dropState = useDroppableCollectionState({
    ...props,
    collection: state.collection,
    selectionManager: state.selectionManager
  });

  let {collectionProps} = useDroppableCollection({
    ...props,
    keyboardDelegate: new ListKeyboardDelegate(state.collection, state.disabledKeys, ref),
    dropTargetDelegate: new ListDropTargetDelegate(state.collection, ref)
  }, dropState, ref);

  // Setup drag state for the collection.
  let dragState = useDraggableCollectionState({
    ...props,
    // Collection and selection manager come from list state.
    collection: state.collection,
    selectionManager: state.selectionManager,
    // Provide data for each dragged item. This function could
    // also be provided by the user of the component.
    getItems: props.getItems || ((keys) => {
      return [...keys].map(key => {
        let item = state.collection.getItem(key);

        return {
          'text/plain': item.textValue
        };
      });
    }),
  });

  useDraggableCollection(props, dragState, ref);

  return (
    <ul
      {...mergeProps(listBoxProps, collectionProps)}
      ref={ref}>
      {[...state.collection].map((item) => (
        <ReorderableOption
          key={item.key}
          item={item}
          state={state}
          dragState={dragState}
          dropState={dropState}
        />
      ))}
    </ul>
  );
}

function ReorderableOption({ item, state, dragState, dropState }) {
  let ref = React.useRef(null);
  let { optionProps } = useOption({key: item.key}, state, ref);
  let { isFocusVisible, focusProps } = useFocusRing();

  let {dropProps, isDropTarget} = useDroppableItem({
    target: {type: 'item', key: item.key, dropPosition: 'on'}
  }, dropState, ref);
  // ...

  // Register the item as a drag source.
  let {dragProps} = useDraggableItem({
    key: item.key
  }, dragState);

  return (
    <>
      <DropIndicator
        target={{type: 'item', key: item.key, dropPosition: 'before'}}
        dropState={dropState} />
      <li
        {...mergeProps(optionProps, dragProps, dropProps, focusProps)}
        ref={ref}
        className={`option ${isFocusVisible ? 'focus-visible' : ''} ${isDropTarget ? 'drop-target' : ''}`}>
        {item.rendered}
      </li>
      {state.collection.getKeyAfter(item.key) == null &&
        <DropIndicator
          target={{type: 'item', key: item.key, dropPosition: 'after'}}
          dropState={dropState} />
      }
    </>
  );
}

----------------------------------------

TITLE: Advanced LabeledGroup Component Using Context
DESCRIPTION: Advanced example creating a custom LabeledGroup component that uses React Aria Contexts to connect a label with a group. It uses useId to generate a unique ID for the label which is then provided to the group via context.

LANGUAGE: tsx
CODE:
import {LabelContext, GroupContext} from 'react-aria-components';
import {useId} from 'react-aria';

function LabeledGroup({children}) {
  let labelId = useId();

  return (
    <LabelContext.Provider value={{id: labelId, elementType: 'span'}}>
      <GroupContext.Provider value={{'aria-labelledby': labelId}}>
        {children}
      </GroupContext.Provider>
    </LabelContext.Provider>
  );
}

<LabeledGroup>
  <Label>Expiration date</Label>
  <Group>
    <Input size={3} aria-label="Month" placeholder="mm" />
    /
    <Input size={4} aria-label="Year" placeholder="yyyy" />
  </Group>
</LabeledGroup>

----------------------------------------

TITLE: Creating a Reusable DateField Component Wrapper
DESCRIPTION: Example of creating a reusable wrapper component for DateField that encapsulates the structure and styling. This wrapper accepts props for label, description, and error handling to simplify implementation throughout an application.

LANGUAGE: tsx
CODE:
import type {DateFieldProps, DateValue, ValidationResult} from 'react-aria-components';
import {Text, FieldError} from 'react-aria-components';

interface MyDateFieldProps<T extends DateValue> extends DateFieldProps<T> {
  label?: string,
  description?: string,
  errorMessage?: string | ((validation: ValidationResult) => string)
}

function MyDateField<T extends DateValue>({label, description, errorMessage, ...props}: MyDateFieldProps<T>) {
  return (
    <DateField {...props}>
      <Label>{label}</Label>
      <DateInput>
        {segment => <DateSegment segment={segment} />}
      </DateInput>
      {description && <Text slot="description">{description}</Text>}
      <FieldError>{errorMessage}</FieldError>
    </DateField>
  );
}

<MyDateField label="Event date" />

----------------------------------------

TITLE: Importing Video Assets in React
DESCRIPTION: Imports video assets for hover demonstrations on different devices using URL imports in React.

LANGUAGE: jsx
CODE:
import hoverVideoUrl from 'url:../assets/button-hover.mp4';
import hoveriPadVideoUrl from 'url:../assets/button-hover-ipad.mp4';

----------------------------------------

TITLE: International Calendar Implementation in React with Hindi/Indian Calendar
DESCRIPTION: Demonstrates how to use I18nProvider to display a Calendar in Hindi language using the Indian calendar system while maintaining Gregorian dates for application logic.

LANGUAGE: tsx
CODE:
import {I18nProvider} from '@react-aria/i18n';

function Example() {
  let [date, setDate] = React.useState<DateValue | null>(null);
  return (
    <I18nProvider locale="hi-IN-u-ca-indian">
      <MyCalendar aria-label="Date" value={date} onChange={setDate} />
      <p>Selected date: {date?.toString()}</p>
    </I18nProvider>
  );
}

----------------------------------------

TITLE: Import Types and Functions for Custom Calendar Systems
DESCRIPTION: Imports necessary types and utility functions from @internationalized/date package to work with custom calendar implementations.

LANGUAGE: tsx
CODE:
import type {AnyCalendarDate} from '@internationalized/date';
import {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';

----------------------------------------

TITLE: Creating a Custom Label Component Compatible with Slider
DESCRIPTION: Example showing how to make an existing custom label component compatible with React Aria Components by using the useContextProps hook to merge local props with those provided via context.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Creating a DateFormat Component Using DateFieldStateContext
DESCRIPTION: This example creates a DateFormat component that displays the expected date format by accessing the DateField's state through context.

LANGUAGE: tsx
CODE:
import {DateFieldStateContext} from 'react-aria-components';
import {useLocale} from 'react-aria';

function DateFormat() {
  let state = React.useContext(DateFieldStateContext)!;
  let {locale} = useLocale();
  let displayNames = new Intl.DisplayNames(locale, {type: 'dateTimeField'});
  let format = state.segments.map(segment => segment.type === 'literal' ? segment.text : displayNames.of(segment.type)).join(' ');
  return <small>{format}</small>;
}

<DateField defaultValue={today(getLocalTimeZone())}>
  <Label>Date</Label>
  <DateInput>
    {segment => <DateSegment segment={segment} />}
  </DateInput>
  <DateFormat />
</DateField>

----------------------------------------

TITLE: Implementing Responsive Collapse Behavior for Tabs
DESCRIPTION: Example demonstrating the automatic collapse behavior of tabs when there isn't enough horizontal space. The tabs collapse into a dropdown picker when the container width is reduced.

LANGUAGE: tsx
CODE:
function Example() {
  let [collapse, setCollapse] = React.useState(false)

  return (
    <>
      <div style={{width: collapse ? '150px' : '300px', marginBottom: '50px', height: '150px', maxWidth: '100%'}}>
        <Tabs aria-label="Chat log collapse example">
          <TabList>
            <Item key="item1">
              John Doe
            </Item>
            <Item key="item2">
              Jane Doe
            </Item>
            <Item key="item3">
              Joe Bloggs
            </Item>
          </TabList>
          <TabPanels>
            <Item key="item1">
              There is no prior chat history with John Doe.
            </Item>
            <Item key="item2">
              There is no prior chat history with Jane Doe.
            </Item>
            <Item key="item3">
              There is no prior chat history with Joe Bloggs.
            </Item>
          </TabPanels>
        </Tabs>
      </div>
      <Button variant="primary" onPress={() => setCollapse((collapse) => !collapse)}>
        Toggle tab container size.
      </Button>
    </>
  );
}

----------------------------------------

TITLE: Creating a Reusable ColorSwatch Component
DESCRIPTION: Shows how to create a customized reusable ColorSwatch component that supports transparent colors with a checkerboard background pattern.

LANGUAGE: tsx
CODE:
import type {ColorSwatchProps} from 'react-aria-components';

export function MyColorSwatch(props: ColorSwatchProps) {
  return (
    <ColorSwatch 
      {...props}
      style={({color}) => ({
        background: `linear-gradient(${color}, ${color}),
          repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`
      })} />
  );
}

<MyColorSwatch color="#f00a" />

----------------------------------------

TITLE: CSS Styling for RadioGroup and Radio Components
DESCRIPTION: CSS styling for the RadioGroup and Radio components, including layout, colors, and interactive states. The CSS uses custom properties for theming and handles various states like selected, pressed, and focused.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-RadioGroup {
  display: flex;
  flex-direction: column;
  gap: 8px;
  color: var(--text-color);
}

.react-aria-Radio {
  display: flex;
  align-items: center;
  gap: 0.571rem;
  font-size: 1.143rem;
  color: var(--text-color);
  forced-color-adjust: none;

  &:before {
    content: '';
    display: block;
    width: 1.286rem;
    height: 1.286rem;
    box-sizing: border-box;
    border: 0.143rem solid var(--border-color);
    background: var(--field-background);
    border-radius: 1.286rem;
    transition: all 200ms;
  }

  &[data-pressed]:before {
    border-color: var(--border-color-pressed);
  }

  &[data-selected] {
    &:before {
      border-color: var(--highlight-background);
      border-width: 0.429rem;
    }

    &[data-pressed]:before {
      border-color: var(--highlight-background-pressed);
    }
  }

  &[data-focus-visible]:before {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: 2px;
  }
}

----------------------------------------

TITLE: CSS for Disabled Button State
DESCRIPTION: Shows the CSS styling specifically for the disabled state of the Button component, applying different colors for border and text.

LANGUAGE: css
CODE:
.react-aria-Button {
  &[data-disabled]{
    border-color: var(--border-color-disabled);
    color: var(--text-color-disabled);
  }
}

----------------------------------------

TITLE: Full DatePicker Component Anatomy in React Aria Components
DESCRIPTION: This code demonstrates the complete structure of a DatePicker component, including optional elements like description and error messages, and the full calendar grid implementation.

LANGUAGE: tsx
CODE:
import {DatePicker, Label, Group, Popover, Dialog, Calendar, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Button, Heading, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';

<DatePicker>
  <Label />
  <Group>
    <DateInput>
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <Button />
  </Group>
  <Text slot="description" />
  <FieldError />
  <Popover>
    <Dialog>
      <Calendar>
        <Button slot="previous" />
        <Heading />
        <Button slot="next" />
        <CalendarGrid>
          <CalendarGridHeader>
            {day => <CalendarHeaderCell />}
          </CalendarGridHeader>
          <CalendarGridBody>
            {date => <CalendarCell date={date} />}
          </CalendarGridBody>
        </CalendarGrid>
        <Text slot="errorMessage" />
      </Calendar>
    </Dialog>
  </Popover>
</DatePicker>

----------------------------------------

TITLE: Controlled Tabs with State Management in React Aria Components
DESCRIPTION: Example of controlled tabs where selection state is managed by the parent component using the selectedKey and onSelectionChange props. This demonstrates how to integrate tabs with component state.

LANGUAGE: tsx
CODE:
import type {Key} from 'react-aria-components';

function Example() {
  let [timePeriod, setTimePeriod] = React.useState<Key>('triassic');

  return (
    <>
      <p>Selected time period: {timePeriod}</p>
      <Tabs selectedKey={timePeriod} onSelectionChange={setTimePeriod}>
        <TabList aria-label="Mesozoic time periods">
          <Tab id="triassic">Triassic</Tab>
          <Tab id="jurassic">Jurassic</Tab>
          <Tab id="cretaceous">Cretaceous</Tab>
        </TabList>
        <TabPanel id="triassic">
          The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.
        </TabPanel>
        <TabPanel id="jurassic">
          The Jurassic ranges from 200 million years to 145 million years ago.
        </TabPanel>
        <TabPanel id="cretaceous">
          The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.
        </TabPanel>
      </Tabs>
    </>
  );
}

----------------------------------------

TITLE: Creating a Disclosure Group (Accordion) Pattern
DESCRIPTION: Implementation of a disclosure group or accordion pattern where only one disclosure item can be expanded at a time, using useDisclosureGroupState and context APIs to manage the shared state.

LANGUAGE: tsx
CODE:
import {useDisclosureGroupState} from '@react-stately/disclosure';
import {useId} from '@react-aria/utils';

const DisclosureGroupStateContext = React.createContext(null);

function DisclosureGroup(props) {
  let state = useDisclosureGroupState(props);

  return (
    <div className="group">
      <DisclosureGroupStateContext.Provider value={state}>
        {props.children}
      </DisclosureGroupStateContext.Provider>
    </div>
  );
}

function DisclosureItem(props) {
  let defaultId = useId();
  let id = props.id || defaultId;
  let groupState = React.useContext(DisclosureGroupStateContext);
  let isExpanded = groupState ? groupState.expandedKeys.has(id) : props.isExpanded;
  let state = useDisclosureState({
    ...props,
    isExpanded,
    onExpandedChange(isExpanded) {
      if (groupState) {
        groupState.toggleKey(id);
      }

      props.onExpandedChange?.(isExpanded);
    }
  });

  let panelRef = React.useRef<HTMLDivElement | null>(null);
  let triggerRef = React.useRef<HTMLButtonElement | null>(null);
  let isDisabled = props.isDisabled || groupState?.isDisabled || false;
  let {buttonProps: triggerProps, panelProps} = useDisclosure({
    ...props,
    isExpanded,
    isDisabled
  }, state, panelRef);
  let {buttonProps} = useButton(triggerProps, triggerRef);
  let {isFocusVisible, focusProps} = useFocusRing();

  return (
    <div className="disclosure">
      <h3>
        <button 
          className="trigger" 
          ref={triggerRef}
          {...mergeProps(buttonProps, focusProps)}
          style={{outline: isFocusVisible ? '2px solid dodgerblue' : 'none'}}>
          <svg viewBox="0 0 24 24">
            <path d="m8.25 4.5 7.5 7.5-7.5 7.5" />
          </svg>
          {props.title}
        </button>
      </h3>
      <div className="panel" ref={panelRef} {...panelProps}>
        <p>
          {props.children}
        </p>
      </div>
    </div>
  );
};

----------------------------------------

TITLE: Basic ColorSwatchPicker Implementation
DESCRIPTION: A simple example showing how to implement ColorSwatchPicker with multiple color swatches.

LANGUAGE: tsx
CODE:
<ColorSwatchPicker>
  <ColorSwatch color="#A00" />
  <ColorSwatch color="#f80" />
  <ColorSwatch color="#080" />
  <ColorSwatch color="#08f" />
  <ColorSwatch color="#088" />
  <ColorSwatch color="#008" />
</ColorSwatchPicker>

----------------------------------------

TITLE: Implementing the Contact List Component with React Aria Components
DESCRIPTION: Implements a contact list using React Aria Components with Tailwind CSS styling. The component features sections for favorites and all contacts, with sticky headers and multiple selection support.

LANGUAGE: tsx
CODE:
import {ListBox, ListBoxItem, ListBoxSection, Header, Collection, Text} from 'react-aria-components';

function ContactListExample() {
  return (
    <div className="bg-linear-to-r from-blue-500 to-sky-500 p-8 rounded-lg flex justify-center">
      <ListBox aria-label="Contacts" selectionMode="multiple" selectionBehavior="replace" className="w-72 max-h-[290px] overflow-auto outline-hidden bg-white text-gray-700 p-2 flex flex-col gap-2 rounded-lg shadow-sm scroll-pb-2 scroll-pt-7">
        <ContactSection title="Favorites" items={favorites}>
          {item => <Contact item={item} />}
        </ContactSection>
        <ContactSection title="All Contacts" items={people}>
          {item => <Contact item={item} />}
        </ContactSection>
      </ListBox>
    </div>
  );
}

function ContactSection({title, children, items}) {
  return (
    <ListBoxSection>
      <Header className="sticky -top-2 bg-white z-10 font-bold font-serif px-2 mb-1 text-slate-700">{title}</Header>
      <Collection items={items}>
        {children}
      </Collection>
    </ListBoxSection>
  );
}

function Contact({item}) {
  return (
    <ListBoxItem id={item.id} textValue={item.name} className="group relative py-1 px-2 outline-hidden cursor-default grid grid-rows-2 grid-flow-col auto-cols-max gap-x-3 rounded-sm selected:bg-blue-500 text-slate-700 selected:text-white [&:has(+[data-selected])]:selected:rounded-b-none [&[data-selected]+[data-selected]]:rounded-t-none focus-visible:ring-2 ring-offset-2 ring-blue-500">
      <img src={item.avatar} alt="" className="row-span-2 place-self-center h-8 w-8 rounded-full" />
      <Text slot="label" className="font-semibold truncate">{item.name}</Text>
      <Text slot="description" className="truncate text-sm text-slate-600 group-selected:text-white">{item.username}</Text>
      <div className="absolute left-12 right-2 bottom-0 h-px bg-gray-200 group-selected:bg-blue-400 [.group[data-selected]:has(+:not([data-selected]))_&]:hidden [.group:not([data-selected]):has(+[data-selected])_&]:hidden [.group[data-selected]:last-child_&]:hidden" />
    </ListBoxItem>
  );
}

----------------------------------------

TITLE: Creating a Custom HorizontalLayout for Virtualizer in React Aria Components
DESCRIPTION: Implementation of a custom horizontal scrolling layout by extending the Layout abstract base class. The example demonstrates implementing the required methods for determining visible items, calculating item positions, and content size.

LANGUAGE: tsx
CODE:
import {Layout, LayoutInfo, Rect, Size, Key} from 'react-aria-components';

class HorizontalLayout extends Layout {
  // Determine which items are visible within the given rectangle.
  getVisibleLayoutInfos(rect: Rect): LayoutInfo[] {
    let virtualizer = this.virtualizer!;
    let keys = Array.from(virtualizer.collection.getKeys());
    let startIndex = Math.max(0, Math.floor(rect.x / 100));
    let endIndex = Math.min(keys.length - 1, Math.ceil(rect.maxX / 100));
    let layoutInfos = [];
    for (let i = startIndex; i <= endIndex; i++) {
      layoutInfos.push(this.getLayoutInfo(keys[i]));
    }

    // Always add persisted keys (e.g. the focused item), even when out of view.
    for (let key of virtualizer.persistedKeys) {
      let item = virtualizer.collection.getItem(key);
      if (item?.index < startIndex) {
        layoutInfos.unshift(this.getLayoutInfo(key));
      } else if (item?.index > endIndex) {
        layoutInfos.push(this.getLayoutInfo(key));
      }
    }
    
    return layoutInfos;
  }

  // Provide a LayoutInfo for a specific item.
  getLayoutInfo(key: Key): LayoutInfo | null {
    let node = this.virtualizer!.collection.getItem(key);
    if (!node) {
      return null;
    }

    let rect = new Rect(node.index * 100, 0, 100, 100);
    return new LayoutInfo(node.type, node.key, rect);
  }

  // Provide the total size of all items.
  getContentSize(): Size {
    let numItems = this.virtualizer!.collection.size;
    return new Size(numItems * 100, 100);
  }
}

function Example() {
  let items = [];
  for (let i = 0; i < 200; i++) {
    items.push({id: i, name: `Item ${i}`});
  }

  return (
    <Virtualizer layout={HorizontalLayout}>
      <ListBox aria-label="Favorite animal" items={items} orientation="horizontal" style={{height: 'fit-content'}}>
        {item => <ListBoxItem className="item">{item.name}</ListBoxItem>}
      </ListBox>
    </Virtualizer>
  );
}

----------------------------------------

TITLE: HTML form integration with CheckboxGroup
DESCRIPTION: Example showing how to integrate CheckboxGroup with HTML forms using the name prop on CheckboxGroup and value props on individual Checkbox components.

LANGUAGE: tsx
CODE:
<MyCheckboxGroup label="Favorite sports" name="sports">
  <MyCheckbox value="soccer">Soccer</MyCheckbox>
  <MyCheckbox value="baseball">Baseball</MyCheckbox>
  <MyCheckbox value="basketball">Basketball</MyCheckbox>
</MyCheckboxGroup>

----------------------------------------

TITLE: Styling Modal and Modal Overlay in CSS
DESCRIPTION: CSS styling for Modal component including animations for entrance and exit transitions, positioning, and visual styling.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-ModalOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: var(--visual-viewport-height);
  background: rgba(0 0 0 / .5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 100;

  &[data-entering] {
    animation: modal-fade 200ms;
  }

  &[data-exiting] {
    animation: modal-fade 150ms reverse ease-in;
  }
}

.react-aria-Modal {
  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);
  border-radius: 6px;
  background: var(--overlay-background);
  color: var(--text-color);
  border: 1px solid var(--gray-400);
  outline: none;
  max-width: 300px;

  &[data-entering] {
    animation: modal-zoom 300ms cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }

  .react-aria-TextField {
    margin-bottom: 8px;
  }
}

@keyframes modal-fade {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes modal-zoom {
  from {
    transform: scale(0.8);
  }

  to {
    transform: scale(1);
  }
}

----------------------------------------

TITLE: Basic TimeField Implementation in React Aria Components
DESCRIPTION: A simple example showing how to implement a TimeField component with Label, DateInput, and DateSegment components to create an accessible time input field.

LANGUAGE: tsx
CODE:
import {TimeField, Label, DateInput, DateSegment} from 'react-aria-components';

<TimeField>
  <Label>Event time</Label>
  <DateInput>
    {segment => <DateSegment segment={segment} />}
  </DateInput>
</TimeField>

----------------------------------------

TITLE: Picker with Alignment and Direction Control
DESCRIPTION: Example demonstrating how to control the alignment of the dropdown menu and its opening direction using the align and direction props.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-150">
  <Picker label="Choose frequency" align="end" menuWidth="size-3000">
    <Item key="rarely">Rarely</Item>
    <Item key="sometimes">Sometimes</Item>
    <Item key="always">Always</Item>
  </Picker>

  <Picker label="Choose animal" direction="top">
    <Item key="Emu">Emu</Item>
    <Item key="Kangaroo">Kangaroo</Item>
    <Item key="Platypus">Platypus</Item>
  </Picker>
</Flex>

----------------------------------------

TITLE: LabeledValue with Custom Label Alignment
DESCRIPTION: Demonstrates how to customize label position and alignment using labelPosition and labelAlign props.

LANGUAGE: tsx
CODE:
<LabeledValue label="File name" value="Onboarding.pdf" labelPosition="side" labelAlign="end" />

----------------------------------------

TITLE: Calendar with Formatted Date Display using useDateFormatter
DESCRIPTION: Showcases how to handle onChange events from Calendar and display the selected date in a localized format using useDateFormatter from @react-aria/i18n.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@react-aria/i18n';

function Example() {
  let [date, setDate] = React.useState(parseDate('2022-07-04'));
  let formatter = useDateFormatter({dateStyle: 'full'});

  return (
    <>
      <MyCalendar aria-label="Event date" value={date} onChange={setDate} />
      <p>Selected date: {formatter.format(date.toDate(getLocalTimeZone()))}</p>
    </>
  );
}

----------------------------------------

TITLE: Adding Descriptions to Radio Groups in React Spectrum
DESCRIPTION: This example shows how to add descriptive help text to a RadioGroup using the description prop, which provides additional context for users.

LANGUAGE: tsx
CODE:
<RadioGroup label="Favorite pet" description="Select your favorite pet.">
  <Radio value="dogs">Dogs</Radio>
  <Radio value="cats">Cats</Radio>
</RadioGroup>

----------------------------------------

TITLE: Controlled DisclosureGroup with State Management
DESCRIPTION: Implementation of a controlled DisclosureGroup using React state hooks. This example manages expanded keys with useState and displays the currently expanded sections, demonstrating how to create a fully controlled component.

LANGUAGE: tsx
CODE:
import {Key} from "@react-types/shared";

function ControlledExpanded(){
  let [expandedKeys, setExpandedKeys] = React.useState<Set<Key>>(new Set(["system"]));

  return (
    <>
    <DisclosureGroup expandedKeys={expandedKeys} onExpandedChange={setExpandedKeys}>
      <MyDisclosure id="system" title="System Requirements" >
        Details about system requirements here
      </MyDisclosure>
      <MyDisclosure id="personal" title="Personal Information" >
        Details about personal information here
      </MyDisclosure>
    </DisclosureGroup>
    <div style={{ marginTop: '20px' }}>You have expanded: {expandedKeys}</div>
    </>
  )
}

----------------------------------------

TITLE: MenuTrigger with Long Press Behavior
DESCRIPTION: Implementation of a MenuTrigger with long press behavior that displays a menu of icon options when the trigger is pressed and held.

LANGUAGE: tsx
CODE:
import CloneStamp from '@spectrum-icons/workflow/CloneStamp';
import Crop from '@spectrum-icons/workflow/Crop';
import CropRotate from '@spectrum-icons/workflow/CropRotate';
import Slice from '@spectrum-icons/workflow/Slice';
import {Text} from '@react-spectrum/text';

<MenuTrigger trigger="longPress">
  <ActionButton
    aria-label="Crop tool"
    onPress={() => alert('Cropping!')}>
    <Crop />
  </ActionButton>
  <Menu>
    <Item textValue="Crop Rotate">
      <CropRotate />
      <Text>Crop Rotate</Text>
    </Item>
    <Item textValue="Slice">
      <Slice />
      <Text>Slice</Text>
    </Item>
    <Item textValue="Clone stamp">
      <CloneStamp />
      <Text>Clone Stamp</Text>
    </Item>
  </Menu>
</MenuTrigger>

----------------------------------------

TITLE: Dynamic Styling with className Function in ListBoxItem
DESCRIPTION: Example of using a function for the className prop to dynamically apply styles based on component states, useful with utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<ListBoxItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>
  Item
</ListBoxItem>

----------------------------------------

TITLE: Single Selection Mode with Menu in React Spectrum
DESCRIPTION: Demonstrates controlled single selection in a Menu component using the selectionMode prop set to 'single'. The selection state is managed using React useState hook and passed via selectedKeys prop.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-aria-components';

function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set(['center']));

  return (
    <>
      <MyMenuButton label="Align" selectionMode="single" selectedKeys={selected} onSelectionChange={setSelected}>
        <MenuItem id="left">Left</MenuItem>
        <MenuItem id="center">Center</MenuItem>
        <MenuItem id="right">Right</MenuItem>
      </MyMenuButton>
      <p>Current selection (controlled): {[...selected].join(', ')}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing a Select Component with useSelect in React
DESCRIPTION: A complete example showing how to create an accessible select dropdown component using useSelect hook from React Aria. The component includes a hidden native select for browser form autofill support and proper accessibility attributes.

LANGUAGE: TSX
CODE:
import {HiddenSelect, useSelect} from '@react-aria/select';
import {Item} from '@react-stately/collections';
import {useSelectState} from '@react-stately/select';

// Reuse the ListBox, Popover, and Button from your component library. See below for details.
import {ListBox, Popover, Button} from 'your-component-library';

function Select(props) {
  // Create state based on the incoming props
  let state = useSelectState(props);

  // Get props for child elements from useSelect
  let ref = React.useRef(null);
  let {
    labelProps,
    triggerProps,
    valueProps,
    menuProps
  } = useSelect(props, state, ref);

  return (
    <div style={{display: 'inline-block'}}>
      <div {...labelProps}>{props.label}</div>
      <HiddenSelect
        isDisabled={props.isDisabled}
        state={state}
        triggerRef={ref}
        label={props.label}
        name={props.name} />
      <Button
        {...triggerProps}
        buttonRef={ref}
        style={{height: 30, fontSize: 14}}>
        <span {...valueProps}>
          {state.selectedItem
            ? state.selectedItem.rendered
            : 'Select an option'
          }
        </span>
        <span
          aria-hidden="true"
          style={{paddingLeft: 5}}>
          ▼
        </span>
      </Button>
      {state.isOpen &&
        <Popover state={state} triggerRef={ref} placement="bottom start">
          <ListBox
            {...menuProps}
            state={state} />
        </Popover>
      }
    </div>
  );
}

<Select label="Favorite Color">
  <Item>Red</Item>
  <Item>Orange</Item>
  <Item>Yellow</Item>
  <Item>Green</Item>
  <Item>Blue</Item>
  <Item>Purple</Item>
  <Item>Black</Item>
  <Item>White</Item>
  <Item>Lime</Item>
  <Item>Fushsia</Item>
</Select>

----------------------------------------

TITLE: Basic Button Implementation with useButton in React
DESCRIPTION: Creates a basic Button component using the useButton hook with a native button element. The hook handles accessibility and interaction features while allowing for custom styling and event handling.

LANGUAGE: tsx
CODE:
import {useButton} from '@react-aria/button';
import {useRef} from 'react';

function Button(props) {
  let ref = useRef<HTMLButtonElement | null>(null);
  let {buttonProps} = useButton(props, ref);
  let {children} = props;

  return (
    <button {...buttonProps} ref={ref}>
      {children}
    </button>
  );
}

<Button onPress={() => alert('Button pressed!')}>Test</Button>

----------------------------------------

TITLE: Implementing a Color Viewer Component with React Spectrum
DESCRIPTION: This code creates a ColorViewer component that displays all available Spectrum color values. It allows users to toggle between light and dark color schemes, as well as between color versions 5 and 6, displaying the colors in a responsive grid format.

LANGUAGE: tsx
CODE:
function ColorViewer() {
  let [selectedKey, setSelectedKey] = useState();
  let [colorVersion, setColorVersion] = useState('5');
  let colors = colorVersion === '6'
    ? dnaDocs.exports.ColorValueV6.id
    : dnaDocs.exports.ColorValue.id;

  return (
    <Example colorScheme={selectedKey}>
      <Flex gap="size-100">
        <Picker label="Color Scheme" selectedKey={selectedKey} onSelectionChange={setSelectedKey}>
          <Item key="light">Light</Item>
          <Item key="dark">Dark</Item>
        </Picker>
        <Picker label="Color Version" selectedKey={colorVersion} onSelectionChange={setColorVersion}>
          <Item key="5">v5 (default)</Item>
          <Item key="6">v6</Item>
        </Picker>
      </Flex>
      <ul style={{columnWidth: 160, listStyle: 'none', padding: 0}}>
        {dnaDocs.links[colors].value.elements.filter(v => v.value && !v.value.startsWith('static')).map(v =>
          <li key={v.value}>
            <Flex alignItems="center" marginBottom="size-25">
              <View colorVersion={+colorVersion} backgroundColor={v.value} width="size-250" height="size-250" marginEnd="size-100" flexShrink={0} />
              {v.value}
            </Flex>
          </li>
        )}
      </ul>
    </Example>
  );
}

ReactDOM.createRoot(document.getElementById('color-viewer')).render(<ColorViewer />);

----------------------------------------

TITLE: Importing Layout Component for Documentation
DESCRIPTION: Imports and exports the Layout component from React Spectrum docs to structure the documentation page.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Basic Breadcrumbs Implementation in React Spectrum
DESCRIPTION: A basic example of implementing the Breadcrumbs component with multiple navigation items. Each Item requires a unique key prop for identification.

LANGUAGE: tsx
CODE:
<Breadcrumbs>
  <Item key="home">Home</Item>
  <Item key="trendy">Trendy</Item>
  <Item key="march 2020 assets">March 2020 Assets</Item>
</Breadcrumbs>

----------------------------------------

TITLE: Building an RGBA Color Picker with ColorSlider in React
DESCRIPTION: Creates an RGBA color picker using four color sliders bound to the same color value in state. Uses parseColor to parse the initial hex color value and implements controlled components with value and onChange props.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-stately/color';

function Example() {
  let [color, setColor] = React.useState(parseColor('#7f007f'));
  return (
    <>
      <ColorSlider channel="red" value={color} onChange={setColor} />
      <ColorSlider channel="green" value={color} onChange={setColor} />
      <ColorSlider channel="blue" value={color} onChange={setColor} />
      <ColorSlider channel="alpha" value={color} onChange={setColor} />
    </>
  );
}

----------------------------------------

TITLE: Adding Row Actions Directly to Rows in React Spectrum Table
DESCRIPTION: This example shows how to apply row actions directly to individual rows using the onAction prop. Each row in the table has a unique action that displays an alert message specific to that row when triggered.

LANGUAGE: tsx
CODE:
<Table aria-label="Table with onAction applied on the rows directly" selectionMode="multiple">
  <MyTableHeader>
    <Column isRowHeader>Name</Column>
    <Column>Type</Column>
    <Column>Level</Column>
  </MyTableHeader>
  <TableBody>
    <MyRow onAction={() => alert(`Opening Charizard`)}>
      <Cell>Charizard</Cell>
      <Cell>Fire, Flying</Cell>
      <Cell>67</Cell>
    </MyRow>
    <MyRow onAction={() => alert(`Opening Blastoise`)}>
      <Cell>Blastoise</Cell>
      <Cell>Water</Cell>
      <Cell>56</Cell>
    </MyRow>
    <MyRow onAction={() => alert(`Opening Venusaur`)}>
      <Cell>Venusaur</Cell>
      <Cell>Grass, Poison</Cell>
      <Cell>83</Cell>
    </MyRow>
    <MyRow onAction={() => alert(`Opening Pikachu`)}>
      <Cell>Pikachu</Cell>
      <Cell>Electric</Cell>
      <Cell>100</Cell>
    </MyRow>
  </TableBody>
</Table>

----------------------------------------

TITLE: Controlled and Uncontrolled CheckboxGroup Value Management
DESCRIPTION: Shows how to implement both controlled and uncontrolled CheckboxGroup components using useState hook for state management.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState(['soccer', 'baseball']);

  return (
    <Flex gap="size-300">
      <CheckboxGroup label="Favorite sports (uncontrolled)" defaultValue={['soccer', 'baseball']}>
        <Checkbox value="soccer">Soccer</Checkbox>
        <Checkbox value="baseball">Baseball</Checkbox>
        <Checkbox value="basketball">Basketball</Checkbox>
      </CheckboxGroup>

      <CheckboxGroup label="Favorite sports (controlled)" value={selected} onChange={setSelected}>
        <Checkbox value="soccer">Soccer</Checkbox>
        <Checkbox value="baseball">Baseball</Checkbox>
        <Checkbox value="basketball">Basketball</Checkbox>
      </CheckboxGroup>
    </Flex>
  );
}

----------------------------------------

TITLE: Implementing Removable Tags with onRemove Handler in TSX
DESCRIPTION: Example of a TagGroup with removable tags using the onRemove event handler to filter items from state when tags are removed.

LANGUAGE: tsx
CODE:
function Example() {
  let defaultItems = [
    {id: 1, name: 'News'},
    {id: 2, name: 'Travel'},
    {id: 3, name: 'Gaming'},
    {id: 4, name: 'Shopping'}
  ];

  let [items, setItems] = React.useState(defaultItems);

  let onRemove = (keys) => {
    setItems(prevItems => prevItems.filter((item) => !keys.has(item.id)));
  };

  return (
    <TagGroup
      items={items}
      /*- begin highlight -*/
      onRemove={onRemove}
      /*- end highlight -*/
      aria-label="Removable TagGroup example">
      {item => <Item>{item.name}</Item>}
    </TagGroup>
  );
}

----------------------------------------

TITLE: Creating Complex Submenu Content with Autocomplete
DESCRIPTION: Example showing how to create a submenu with searchable content using Autocomplete component within a submenu popover.

LANGUAGE: tsx
CODE:
import {Menu, Popover, SubmenuTrigger, Autocomplete, useFilter} from 'react-aria-components';
import {MySearchField} from './SearchField';

function Example() {
  let {contains} = useFilter({sensitivity: 'base'});

  return (
    <MyMenuButton label="Actions">
      <MyItem>Cut</MyItem>
      <MyItem>Copy</MyItem>
      <MyItem>Delete</MyItem>
      <SubmenuTrigger>
        <MyItem>Add tag...</MyItem>
        <Popover>
          <Autocomplete filter={contains}>
            <MySearchField label="Search tags" autoFocus />
            <Menu>
              <MyItem>News</MyItem>
              <MyItem>Travel</MyItem>
              <MyItem>Shopping</MyItem>
              <MyItem>Business</MyItem>
              <MyItem>Entertainment</MyItem>
              <MyItem>Food</MyItem>
              <MyItem>Technology</MyItem>
              <MyItem>Health</MyItem>
              <MyItem>Science</MyItem>
            </Menu>
          </Autocomplete>
        </Popover>
      </SubmenuTrigger>
    </MyMenuButton>
  );
}

----------------------------------------

TITLE: Controlled ColorSwatchPicker with HSL Color
DESCRIPTION: Shows how to implement a controlled ColorSwatchPicker using HSL color values with the parseColor function to maintain consistent type handling.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-spectrum/color';

function Example() {
  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 33.33%)'));

  return (
    <ColorSwatchPicker value={color} onChange={setColor}>
      <ColorSwatch color="#A00" />
      <ColorSwatch color="#f80" />
      <ColorSwatch color="#080" />
    </ColorSwatchPicker>
  );
}

----------------------------------------

TITLE: Implementing Calendar Component with React Aria Hooks in TypeScript
DESCRIPTION: This code demonstrates how to create a Calendar component using the useCalendarState and useCalendar hooks. It sets up the main calendar structure with navigation buttons and renders a calendar grid.

LANGUAGE: tsx
CODE:
import {useCalendarState} from '@react-stately/calendar';
import {useCalendar} from '@react-aria/calendar';
import {useLocale} from '@react-aria/i18n';
import {createCalendar} from '@internationalized/date';

// Reuse the Button from your component library. See below for details.
import {Button} from 'your-component-library';

function Calendar(props) {
  let {locale} = useLocale();
  let state = useCalendarState({
    createCalendar,
    ...props,
    locale
  });

  let {calendarProps, prevButtonProps, nextButtonProps, title} = useCalendar(props, state);

  return (
    <div {...calendarProps} className="calendar">
      <div className="header">
        <h2>{title}</h2>
        <Button {...prevButtonProps}>&lt;</Button>
        <Button {...nextButtonProps}>&gt;</Button>
      </div>
      <CalendarGrid state={state} firstDayOfWeek={props.firstDayOfWeek} />
    </div>
  );
}

----------------------------------------

TITLE: Implementing Drag and Drop Between TableView Components in React Spectrum
DESCRIPTION: This example demonstrates creating draggable and droppable TableView components using React Spectrum's useDragAndDrop hook. It shows how to set up drag operations to move items from one table to another, including proper handling of custom data types, insertion logic, and UI updates.

LANGUAGE: tsx
CODE:
import type {DragAndDropOptions, TextDropItem} from '@react-spectrum/dnd';
import type {ListData} from '@adobe/react-spectrum';
import {useDragAndDrop} from '@react-spectrum/dnd';
import {useListData} from '@adobe/react-spectrum';

interface Item {
  name: string,
  type?: string,
  date?: string,
  childNodes?: Item[]
}

interface DndTableViewProps extends DragAndDropOptions {
  list: ListData<Item>,
  columns: { name: string; id: string; }[]
}

function DraggableTableView(props: DndTableViewProps) {
  let {list, columns, ...otherProps} = props;
  /*- begin highlight -*/
  let {dragAndDropHooks} = useDragAndDrop({
    // Only allow move operations when dropping items from this table
    getAllowedDropOperations: () => ['move'],
    getItems: (keys) => [...keys].map(key => {
      let item = list.getItem(key);
      // Setup the drag types and associated info for each dragged item.
      return {
        'custom-app-type': JSON.stringify(item),
        'text/plain': item.name
      };
    }),
    onDragEnd: (e) => {
      let {
        dropOperation,
        keys
      } = e;

      if (dropOperation === 'move') {
        list.remove(...keys);
      }
    },
    ...otherProps
  });
  /*- end highlight -*/

  return (
    <TableView
      aria-label="Draggable TableView in drag into table example"
      selectionMode="multiple"
      width="size-5000"
      height="size-2400"
      /*- begin highlight -*/
      dragAndDropHooks={dragAndDropHooks}
      /*- end highlight -*/>
      <TableHeader columns={columns}>
        {column => (
          <Column
            key={column.id}
            align={column.id === 'date' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </TableView>
  );
}

function DroppableTableView(props: DndTableViewProps) {
  let {list, columns, ...otherProps} = props;
  /*- begin highlight -*/
  let {dragAndDropHooks} = useDragAndDrop({
    // Only accept items with the following drag type
    acceptedDragTypes: ['custom-app-type'],
    onInsert: async (e) => {
      let {
        items,
        target
      } = e;

      let processedItems = await Promise.all(
        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type')))
      );

      if (target.dropPosition === 'before') {
        list.insertBefore(target.key, ...processedItems);
      } else if (target.dropPosition === 'after') {
        list.insertAfter(target.key, ...processedItems);
      }
    },
    onRootDrop: async (e) => {
      let {
        items
      } = e;
      let processedItems = await Promise.all(
        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type')))
      );
      list.append(...processedItems);
    },
    ...otherProps
  });
  /*- end highlight -*/

  return (
    <TableView
      aria-label="Droppable TableView in drag into table example"
      width="size-5000"
      height="size-2400"
      /*- begin highlight -*/
      dragAndDropHooks={dragAndDropHooks}
      /*- end highlight -*/>
      <TableHeader columns={columns}>
        {column => (
          <Column
            key={column.id}
            align={column.id === 'date' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </TableView>
  );
}

function DragIntoTable() {
  let columns = [
    {name: 'Name', id: 'name'},
    {name: 'Type', id: 'type'},
    {name: 'Date Modified', id: 'date'}
  ];

  let sourceList = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/7/2020'},
      {id: '2', type: 'file', name: 'Adobe XD', date: '4/7/2021'},
      {id: '3', type: 'file', name: 'Adobe InDesign', date: '11/20/2010'},
      {id: '4', type: 'file', name: 'Adobe AfterEffects', date: '1/18/2016'}
    ]
  });

  let targetList = useListData({
    initialItems: [
      {id: '5', type: 'file', name: 'Adobe Dreamweaver', date: '1/18/2016'},
      {id: '6', type: 'file', name: 'Adobe Fresco', date: '11/20/2010'},
      {id: '7', type: 'file', name: 'Adobe Connect', date: '4/7/2021'},
      {id: '8', type: 'file', name: 'Adobe Lightroom', date: '6/7/2020'}
    ]
  });

  return (
    <Flex wrap gap="size-300">
      <DraggableTableView list={sourceList} columns={columns} />
      <DroppableTableView list={targetList} columns={columns} />
    </Flex>
  );
}

----------------------------------------

TITLE: ComboBox with HTML Form Integration
DESCRIPTION: Demonstrates how to integrate ComboBox with HTML forms using the name prop, with examples of submitting the input text value by default or using the formValue="key" option to submit selected item keys.

LANGUAGE: tsx
CODE:
<Flex gap="size-200" wrap>
  <ComboBox
    label="Ice cream flavor"
    ///- begin highlight -///
    name="iceCream"
    allowsCustomValue
    ///- end highlight -///
  >
    <Item>Chocolate</Item>
    <Item>Mint</Item>
    <Item>Strawberry</Item>
    <Item>Vanilla</Item>
  </ComboBox>
  <ComboBox
    label="Favorite Animal"
    ///- begin highlight -///
    name="favoriteAnimalId"
    formValue="key"
    ///- end highlight -///
  >
    <Item key="panda">Panda</Item>
    <Item key="cat">Cat</Item>
    <Item key="dog">Dog</Item>
  </ComboBox>
</Flex>

----------------------------------------

TITLE: Configuring DatePicker Granularity in React Spectrum
DESCRIPTION: This example shows how to configure DatePicker granularity to control date and time display. Two synchronized DatePickers display the same value with different granularity settings (seconds vs. day).

LANGUAGE: tsx
CODE:
function Example() {
  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));

  return (
    <>
      <MyDatePicker
        label="Date and time"
        /*- begin highlight -*/
        granularity="second"
        /*- end highlight -*/
        value={date}
        onChange={setDate} />
      <MyDatePicker
        label="Date"
        /*- begin highlight -*/
        granularity="day"
        /*- end highlight -*/
        value={date}
        onChange={setDate} />
    </>
  );
}

----------------------------------------

TITLE: Implementing HSBA Color Slider in React Spectrum
DESCRIPTION: This example demonstrates how to build an HSBA color picker. It uses the brightness parameter instead of lightness from the HSLA model, providing control over hue, saturation, brightness, and alpha.

LANGUAGE: tsx
CODE:
function Example() {
  let [color, setColor] = React.useState(parseColor('hsba(0, 100%, 50%, 0.5)'));
  return (
    <>
      <MyColorSlider channel="hue" value={color} onChange={setColor} />
      <MyColorSlider channel="saturation" value={color} onChange={setColor} />
      <MyColorSlider channel="brightness" value={color} onChange={setColor} />
      <MyColorSlider channel="alpha" value={color} onChange={setColor} />
    </>
  );
}

----------------------------------------

TITLE: Customizing Value Scale with minValue and maxValue Props in React Slider
DESCRIPTION: Demonstrates how to customize the value scale of a slider by setting the minValue and maxValue props instead of using the default percentage scale from 0 to 100.

LANGUAGE: tsx
CODE:
<MySlider
  label="Cookies to buy"
  minValue={50}
  maxValue={150}
  defaultValue={100} />

----------------------------------------

TITLE: Implementing Form Validation with React Spectrum ComboBox
DESCRIPTION: This example demonstrates how to implement form validation with ComboBox using the Form component's native validation behavior. The ComboBox is marked as required, preventing form submission until a value is selected.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  <ComboBox label="Favorite animal" name="animal" isRequired>
    <Item>Aardvark</Item>
    <Item>Cat</Item>
    <Item>Dog</Item>
    <Item>Kangaroo</Item>
    <Item>Panda</Item>
    <Item>Snake</Item>
  </ComboBox>
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Tailwind CSS Configuration for React Aria Components in v4
DESCRIPTION: CSS import configuration for using the tailwindcss-react-aria-components plugin with Tailwind CSS v4, which is added directly to the CSS file.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";

----------------------------------------

TITLE: Combining DropZone with FileTrigger for File Selection
DESCRIPTION: This example demonstrates how to integrate DropZone with FileTrigger to allow users to either drop files or select them using a button. It processes the files and displays their names.

LANGUAGE: tsx
CODE:
import {FileTrigger, Button} from 'react-aria-components';
import type {FileDropItem} from 'react-aria'

function Example() {
  let [files, setFiles] = React.useState(null);

  return(
    <DropZone
      onDrop={(e) => {
        let files = e.items.filter((file) => file.kind === 'file') as FileDropItem[];
        let filenames = files.map((file) => file.name);
        setFiles(filenames.join(', '));
      }}>
      <FileTrigger
        allowsMultiple
        onSelect={(e) => {
          let files = Array.from(e);
          let filenames = files.map((file) => file.name);
          setFiles(filenames.join(', '));
        }}>
        <Button>Select files</Button>
      </FileTrigger>
      <Text slot="label" style={{display: 'block'}}>
        {files || 'Drop files here'}
      </Text>
    </DropZone>
  );
}

----------------------------------------

TITLE: Implementing CheckboxGroup with Help Text in React Spectrum
DESCRIPTION: This example demonstrates a CheckboxGroup with description and error message functionality. It validates that only 'dogs' and 'dragons' are selected and displays appropriate error messages based on validation.

LANGUAGE: tsx
CODE:
function Example() {
  let [checked, setChecked] = React.useState(['dogs', 'dragons']);
  let isValid = checked.length === 2 && checked.includes('dogs') && checked.includes('dragons');

  return (
    <CheckboxGroup
      label="Pets"
      onChange={setChecked}
      value={checked}
      isInvalid={!isValid}
      description="Select your pets."
      errorMessage={
        checked.includes('cats')
          ? 'No cats allowed.'
          : 'Select only dogs and dragons.'
      }>
      <Checkbox value="dogs">Dogs</Checkbox>
      <Checkbox value="cats">Cats</Checkbox>
      <Checkbox value="dragons">Dragons</Checkbox>
    </CheckboxGroup>
  );
}

----------------------------------------

TITLE: Implementing ComboBox with Avatar Components in React Spectrum
DESCRIPTION: This example demonstrates how to create a ComboBox with Avatar components for each selectable item. Each item contains both an Avatar with an image source and a Text component to display the user's name.

LANGUAGE: tsx
CODE:
<ComboBox label="Select a user">
  <Item textValue="User 1">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 1</Text>
  </Item>
  <Item textValue="User 2">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 2</Text>
  </Item>
  <Item textValue="User 3">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 3</Text>
  </Item>
  <Item textValue="User 4">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 4</Text>
  </Item>
</ComboBox>

----------------------------------------

TITLE: CSS Animation for Toast View Transitions
DESCRIPTION: CSS animation styles for toast transitions, defining slide-in and slide-out effects for toast components.

LANGUAGE: css
CODE:
.react-aria-Toast {
  view-transition-class: toast;
}

::view-transition-new(.toast):only-child {
  animation: slide-in 400ms;
}

::view-transition-old(.toast):only-child {
  animation: slide-out 400ms;
}

@keyframes slide-out {
  to {
    translate: 100% 0;
    opacity: 0;
  }
}

@keyframes slide-in {
  from {
    translate: 100% 0;
    opacity: 0;
  }
}

----------------------------------------

TITLE: Implementing Drag and Drop with Reordering in GridList
DESCRIPTION: Example of implementing drag and drop functionality in a GridList to allow users to reorder items using the useDragAndDrop hook with onReorder handler.

LANGUAGE: tsx
CODE:
import {useListData} from 'react-stately';
import {useDragAndDrop} from 'react-aria-components';

function Example() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Adobe Photoshop'},
      {id: 2, name: 'Adobe XD'},
      {id: 3, name: 'Adobe Dreamweaver'},
      {id: 4, name: 'Adobe InDesign'},
      {id: 5, name: 'Adobe Connect'}
    ]
  });

  let {dragAndDropHooks} = useDragAndDrop({
    getItems: (keys) => [...keys].map(key => ({'text/plain': list.getItem(key).name})),
    onReorder(e) {
      if (e.target.dropPosition === 'before') {
        list.moveBefore(e.target.key, e.keys);
      } else if (e.target.dropPosition === 'after') {
        list.moveAfter(e.target.key, e.keys);
      }
    }
  });

  return (
    <MyGridList
      aria-label="Reorderable list"
      selectionMode="multiple"
      items={list.items}
      dragAndDropHooks={dragAndDropHooks}
    >
      {item => <MyItem>{item.name}</MyItem>}
    </MyGridList>
  );
}

----------------------------------------

TITLE: Displaying React Spectrum Released Packages with Version Numbers
DESCRIPTION: A comprehensive list showing all released packages from the React Spectrum ecosystem. The list includes core libraries such as @adobe/react-spectrum, @react-aria packages, @react-spectrum components, @react-stately state management libraries, @react-types type definitions, and various icon libraries with their specific version numbers.

LANGUAGE: markdown
CODE:
 - @adobe/react-spectrum@3.38.0
 - @internationalized/date@3.6.0
 - @internationalized/message@3.1.6
 - @internationalized/number@3.6.0
 - @internationalized/string-compiler@3.2.6
 - @internationalized/string@3.2.5
 - @react-aria/accordion@3.0.0-alpha.36
 - @react-aria/actiongroup@3.7.11
 - @react-aria/aria-modal-polyfill@3.7.13
 - @react-aria/autocomplete@3.0.0-alpha.36
 - @react-aria/breadcrumbs@3.5.19
 - @react-aria/button@3.11.0
 - @react-aria/calendar@3.6.0
 - @react-aria/checkbox@3.15.0
 - @react-aria/collections@3.0.0-alpha.6
 - @react-aria/color@3.0.2
 - @react-aria/combobox@3.11.0
 - @react-aria/datepicker@3.12.0
 - @react-aria/dialog@3.5.20
 - @react-aria/disclosure@3.0.0
 - @react-aria/dnd@3.8.0
 - @react-aria/example-theme@1.0.5
 - @react-aria/focus@3.19.0
 - @react-aria/form@3.0.11
 - @react-aria/grid@3.11.0
 - @react-aria/gridlist@3.10.0
 - @react-aria/i18n@3.12.4
 - @react-aria/interactions@3.22.5
 - @react-aria/label@3.7.13
 - @react-aria/landmark@3.0.0-beta.17
 - @react-aria/link@3.7.7
 - @react-aria/listbox@3.13.6
 - @react-aria/live-announcer@3.4.1
 - @react-aria/menu@3.16.0
 - @react-aria/meter@3.4.18
 - @react-aria/numberfield@3.11.9
 - @react-aria/overlays@3.24.0
 - @react-aria/progress@3.4.18
 - @react-aria/radio@3.10.10
 - @react-aria/searchfield@3.7.11
 - @react-aria/select@3.15.0
 - @react-aria/selection@3.21.0
 - @react-aria/separator@3.4.4
 - @react-aria/slider@3.7.14
 - @react-aria/spinbutton@3.6.10
 - @react-aria/ssr@3.9.7
 - @react-aria/steplist@3.0.0-alpha.12
 - @react-aria/switch@3.6.10
 - @react-aria/table@3.16.0
 - @react-aria/tabs@3.9.8
 - @react-aria/tag@3.4.8
 - @react-aria/test-utils@1.0.0-alpha.3
 - @react-aria/textfield@3.15.0
 - @react-aria/toast@3.0.0-beta.18
 - @react-aria/toggle@3.10.10
 - @react-aria/toolbar@3.0.0-beta.11
 - @react-aria/tooltip@3.7.10
 - @react-aria/tree@3.0.0-beta.2
 - @react-aria/utils@3.26.0
 - @react-aria/virtualizer@4.1.0
 - @react-aria/visually-hidden@3.8.18
 - @react-spectrum/accordion@3.0.0
 - @react-spectrum/actionbar@3.6.2
 - @react-spectrum/actiongroup@3.10.10
 - @react-spectrum/autocomplete@3.0.0-alpha.38
 - @react-spectrum/avatar@3.0.17
 - @react-spectrum/badge@3.1.18
 - @react-spectrum/breadcrumbs@3.9.12
 - @react-spectrum/button@3.16.9
 - @react-spectrum/buttongroup@3.6.17
 - @react-spectrum/calendar@3.5.0
 - @react-spectrum/card@3.0.0-alpha.38
 - @react-spectrum/checkbox@3.9.11
 - @react-spectrum/color@3.0.2
 - @react-spectrum/combobox@3.14.0
 - @react-spectrum/contextualhelp@3.6.16
 - @react-spectrum/datepicker@3.11.0
 - @react-spectrum/dialog@3.8.16
 - @react-spectrum/divider@3.5.18
 - @react-spectrum/dnd@3.5.0
 - @react-spectrum/dropzone@3.0.6
 - @react-spectrum/filetrigger@3.0.6
 - @react-spectrum/form@3.7.10
 - @react-spectrum/icon@3.8.0
 - @react-spectrum/illustratedmessage@3.5.5
 - @react-spectrum/image@3.5.6
 - @react-spectrum/inlinealert@3.2.10
 - @react-spectrum/label@3.16.10
 - @react-spectrum/labeledvalue@3.1.18
 - @react-spectrum/layout@3.6.10
 - @react-spectrum/link@3.6.12
 - @react-spectrum/list@3.9.0
 - @react-spectrum/listbox@3.14.0
 - @react-spectrum/menu@3.21.0
 - @react-spectrum/meter@3.5.5
 - @react-spectrum/numberfield@3.9.8
 - @react-spectrum/overlays@5.7.0
 - @react-spectrum/picker@3.15.4
 - @react-spectrum/progress@3.7.11
 - @react-spectrum/provider@3.10.0
 - @react-spectrum/radio@3.7.11
 - @react-spectrum/s2@0.5.0
 - @react-spectrum/searchfield@3.8.11
 - @react-spectrum/slider@3.7.0
 - @react-spectrum/statuslight@3.5.17
 - @react-spectrum/steplist@3.0.0-alpha.10
 - @react-spectrum/style-macro-s1@3.0.0-alpha.2
 - @react-spectrum/switch@3.5.10
 - @react-spectrum/table@3.15.0
 - @react-spectrum/tabs@3.8.15
 - @react-spectrum/tag@3.2.11
 - @react-spectrum/test-utils@1.0.0-alpha.3
 - @react-spectrum/text@3.5.10
 - @react-spectrum/textfield@3.12.7
 - @react-spectrum/theme-dark@3.5.14
 - @react-spectrum/theme-default@3.5.14
 - @react-spectrum/theme-express@3.0.0-alpha.16
 - @react-spectrum/theme-light@3.4.14
 - @react-spectrum/toast@3.0.0-beta.17
 - @react-spectrum/tooltip@3.7.0
 - @react-spectrum/tree@3.0.0-beta.2
 - @react-spectrum/utils@3.12.0
 - @react-spectrum/view@3.6.14
 - @react-spectrum/well@3.4.18
 - @react-stately/calendar@3.6.0
 - @react-stately/checkbox@3.6.10
 - @react-stately/collections@3.12.0
 - @react-stately/color@3.8.1
 - @react-stately/combobox@3.10.1
 - @react-stately/data@3.12.0
 - @react-stately/datepicker@3.11.0
 - @react-stately/disclosure@3.0.0
 - @react-stately/dnd@3.5.0
 - @react-stately/flags@3.0.5
 - @react-stately/form@3.1.0
 - @react-stately/grid@3.10.0
 - @react-stately/layout@4.1.0
 - @react-stately/list@3.11.1
 - @react-stately/menu@3.9.0
 - @react-stately/numberfield@3.9.8
 - @react-stately/overlays@3.6.12
 - @react-stately/radio@3.10.9
 - @react-stately/searchfield@3.5.8
 - @react-stately/select@3.6.9
 - @react-stately/selection@3.18.0
 - @react-stately/slider@3.6.0
 - @react-stately/steplist@3.0.0-alpha.10
 - @react-stately/table@3.13.0
 - @react-stately/tabs@3.7.0
 - @react-stately/toast@3.0.0-beta.7
 - @react-stately/toggle@3.8.0
 - @react-stately/tooltip@3.5.0
 - @react-stately/tree@3.8.6
 - @react-stately/utils@3.10.5
 - @react-stately/virtualizer@4.2.0
 - @react-types/accordion@3.0.0-alpha.25
 - @react-types/actionbar@3.1.11
 - @react-types/actiongroup@3.4.13
 - @react-types/autocomplete@3.0.0-alpha.27
 - @react-types/avatar@3.0.11
 - @react-types/badge@3.1.13
 - @react-types/breadcrumbs@3.7.9
 - @react-types/button@3.10.1
 - @react-types/buttongroup@3.3.13
 - @react-types/calendar@3.5.0
 - @react-types/card@3.0.0-alpha.31
 - @react-types/checkbox@3.9.0
 - @react-types/color@3.0.1
 - @react-types/combobox@3.13.1
 - @react-types/contextualhelp@3.2.14
 - @react-types/datepicker@3.9.0
 - @react-types/dialog@3.5.14
 - @react-types/divider@3.3.13
 - @react-types/form@3.7.8
 - @react-types/grid@3.2.10
 - @react-types/illustratedmessage@3.3.13
 - @react-types/image@3.4.5
 - @react-types/label@3.9.7
 - @react-types/layout@3.3.19
 - @react-types/link@3.5.9
 - @react-types/list@3.2.22
 - @react-types/listbox@3.5.3
 - @react-types/menu@3.9.13
 - @react-types/meter@3.4.5
 - @react-types/numberfield@3.8.7
 - @react-types/overlays@3.8.11
 - @react-types/progress@3.5.8
 - @react-types/provider@3.8.5
 - @react-types/radio@3.8.5
 - @react-types/searchfield@3.5.10
 - @react-types/select@3.9.8
 - @react-types/shared@3.26.0
 - @react-types/slider@3.7.7
 - @react-types/statuslight@3.3.13
 - @react-types/switch@3.5.7
 - @react-types/table@3.10.3
 - @react-types/tabs@3.3.11
 - @react-types/text@3.3.13
 - @react-types/textfield@3.10.0
 - @react-types/tooltip@3.4.13
 - @react-types/view@3.4.13
 - @react-types/well@3.3.13
 - @spectrum-icons/color@3.5.17
 - @spectrum-icons/express@3.0.0-alpha.21
 - @spectrum-icons/illustrations@3.6.17
 - @spectrum-icons/ui@3.6.11
 - @spectrum-icons/workflow@4.2.16
 - @react-spectrum/codemods@0.3.0
 - @react-aria/optimize-locales-plugin@1.1.3
 - @react-aria/parcel-resolver-optimize-locales@1.2.0
 - @react-spectrum/parcel-transformer-s2-icon@0.2.0
 - @react-spectrum/s2-icon-builder@0.2.0
 - @react-spectrum/ts-plugin@0.1.0
 - react-aria@3.36.0
 - react-aria-components@1.5.0
 - react-stately@3.34.0
 - tailwindcss-react-aria-components@1.2.0

----------------------------------------

TITLE: Creating Custom Drag Previews with DragPreview Component
DESCRIPTION: This snippet shows how to implement a custom drag preview using the DragPreview component. It displays either the number of dragged items or the content of a single item during drag operations.

LANGUAGE: tsx
CODE:
import {DragPreview} from '@react-aria/dnd';

function ListBox(props) {
  // Setup listbox as normal. See the useListBox docs for more details.
  let state = useListState(props);
  let ref = React.useRef(null);
  let {listBoxProps} = useListBox({
    ...props,
    shouldSelectOnPressUp: true
  }, state, ref);
  // ...

  let preview = React.useRef(null);
  let dragState = useDraggableCollectionState({
    collection: state.collection,
    selectionManager: state.selectionManager,
    preview,
    getItems(keys) {
      return [...keys].map(key => {
        let item = state.collection.getItem(key);
        return {
          'text/plain': item.textValue
        };
      });
    },
  });

  useDraggableCollection(props, dragState, ref);

  return (
    <ul {...listBoxProps} ref={ref}>
      {[...state.collection].map((item) => (
        <Option
          key={item.key}
          item={item}
          state={state}
          dragState={dragState}
        />
      ))}
      <DragPreview ref={preview}>
        {items => (
          <div style={{background: 'green', color: 'white'}}>
            {items.length > 1 ? `${items.length} items` : items[0]['text/plain']}
          </div>
        )}
      </DragPreview>
    </ul>
  );
}
function Option({ item, state, dragState }) {
  // Setup listbox option as normal. See useListBox docs for details.
  let ref = React.useRef(null);
  let {optionProps} = useOption({key: item.key}, state, ref);
  let {isFocusVisible, focusProps} = useFocusRing();

  // Register the item as a drag source.
  let {dragProps} = useDraggableItem({
    key: item.key
  }, dragState);

  // Merge option props and dnd props, and render the item.
  return (
    <li
      {...mergeProps(optionProps, dragProps, focusProps)}
      ref={ref}
      className={`option ${isFocusVisible ? 'focus-visible' : ''}`}>
      {item.rendered}
    </li>
  );
}

<ListBox aria-label="Categories" selectionMode="multiple">
  <Item>Animals</Item>
  <Item>People</Item>
  <Item>Plants</Item>
</ListBox>
<DropTarget />

----------------------------------------

TITLE: ListBox with Multiple Selection Modes
DESCRIPTION: Demonstrates how to implement ListBox with multiple selection mode. It shows both controlled and uncontrolled selection patterns with defaultSelectedKeys and selectedKeys props.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function Example() {
  let options = [
    {name: 'Koala'},
    {name: 'Kangaroo'},
    {name: 'Platypus'},
    {name: 'Bald Eagle'},
    {name: 'Bison'},
    {name: 'Skunk'}
  ];
  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['Bison']));

  return (
    <Flex direction="row" gap="size-350">
      <ListBox
        selectionMode="multiple"
        aria-label="Pick an animal"
        items={options}
        defaultSelectedKeys={['Bison', 'Koala']}
        width="size-2400">
        {item => <Item key={item.name}>{item.name}</Item>}
      </ListBox>

      <ListBox
        selectionMode="multiple"
        aria-label="Pick an animal"
        items={options}
        selectedKeys={selectedKeys}
        onSelectionChange={setSelectedKeys}
        width="size-2400">
        {item => <Item key={item.name}>{item.name}</Item>}
      </ListBox>
    </Flex>
  );
}

----------------------------------------

TITLE: TypeScript Interfaces for Radio Components in React Spectrum
DESCRIPTION: Defines the TypeScript interfaces for RadioGroup and Radio components, specifying their props and behavior. The RadioGroup interface extends multiple base interfaces to handle values, input behavior, styling and DOM properties, while the Radio interface defines individual radio button properties.

LANGUAGE: typescript
CODE:
interface RadioGroup extends ValueBase<string>, InputBase, Labelable, DOMProps, StyleProps {
  orientation?: 'horizontal' | 'vertical', // default vertical
  labelPosition?: 'side' | 'bottom', // default side
  children: ReactElement<Radio> | ReactElement<Radio>[],
  name?: string, // HTML form name. Not displayed.
  isEmphasized?: boolean
}

interface Radio extends FocusableProps, DOMProps, StyleProps {
  value: string, // HTML form value. Not displayed.
  children?: ReactNode, // pass in children to render label
  'aria-label'?: string, // if no children, aria-label is required
  isDisabled?: boolean
}

----------------------------------------

TITLE: Basic Autocomplete Implementation with SearchField and Menu in React
DESCRIPTION: This example demonstrates a basic implementation of an Autocomplete component with a SearchField input and Menu for suggestions. It includes a filter function for case-insensitive filtering and displays a list of command options.

LANGUAGE: tsx
CODE:
import {Autocomplete, Button, Input, Label, Menu, MenuItem, SearchField, useFilter} from 'react-aria-components';

function Example() {
  let {contains} = useFilter({sensitivity: 'base'});
  return (
    <div className="autocomplete">
      <Autocomplete filter={contains}>
        <SearchField>
          <Label>Commands</Label>
          <Input placeholder="Search commands...." />
          <Button>✕</Button>
        </SearchField>
        <Menu>
          <MenuItem>Create new file...</MenuItem>
          <MenuItem>Create new folder...</MenuItem>
          <MenuItem>Assign to...</MenuItem>
          <MenuItem>Assign to me</MenuItem>
          <MenuItem>Change status...</MenuItem>
          <MenuItem>Change priority...</MenuItem>
          <MenuItem>Add label...</MenuItem>
          <MenuItem>Remove label...</MenuItem>
        </Menu>
      </Autocomplete>
    </div>
  );
}

----------------------------------------

TITLE: Implementing Autocomplete State Management with React Hooks
DESCRIPTION: A platform-agnostic state hook for autocomplete functionality that manages controlled and uncontrolled input states, filtering options, and selection. It provides methods for showing/hiding menus, setting values, and handling item selection.

LANGUAGE: jsx
CODE:
import { useState, useMemo } from "react";

export function useAutocomplete(props) {
  let [showMenu, setShowMenu] = useState(false);
  let [value, setValue] = useState(props.value || "");
  let [selectedIndex, setSelectedIndex] = useState(null);
  let completions = useMemo(
    () =>
      props.options.filter(option =>
        option.toLowerCase().startsWith(value.toLowerCase())
      ),
    [props.options, value]
  );
  
  return {
    showMenu: showMenu && completions.length > 0,
    setShowMenu,
    toggleMenu: () => setShowMenu(!showMenu),
    value,
    setValue: value => {
      if (value && !showMenu) {
        setShowMenu(true);
      }
      setSelectedIndex(null);
      setValue(value);
      props.onChange(value);
    },
    selectedIndex,
    setSelectedIndex,
    completions,
    selectItem: index => {
      setValue(completions[index]);
      setShowMenu(false);
      props.onChange(completions[index]);
    }
  };
}

----------------------------------------

TITLE: Styling ComboBox Items with CSS
DESCRIPTION: CSS styles for ComboBox items to handle visual states including selected, focused, and accessible high contrast mode. Includes styling for the checkmark indicator for selected items.

LANGUAGE: css
CODE:
.my-item {
  margin: 2px;
  padding: 4px 8px 4px 22px;
  border-radius: 6px;
  outline: none;
  cursor: default;
  color: var(--text-color);
  font-size: 1.072rem;
  position: relative;

  &.selected {
    font-weight: 600;
    background: none;

    &::before {
      content: '✓';
      content: '✓' / '';
      alt: ' ';
      position: absolute;
      top: 4px;
      left: 4px;
    }
  }

  &.focused {
    background: #e70073;
    color: white;
  }
}

@media (forced-colors: active) {
  .my-item.focused {
    background: Highlight;
    color: HighlightText;
  }
}

----------------------------------------

TITLE: Rendering Highlights Component with Library Features
DESCRIPTION: Renders the Highlights component with descriptions of the available internationalization packages, including links to their documentation pages and explanations of their functionality.

LANGUAGE: JSX
CODE:
<Highlights items={[
  {
    title: 'Dates and times',
    description: <>The  <a href="./date/index.html">@internationalized/date</a> package provides utilities for representing and manipulating dates and times in a locale-aware manner across calendar systems, time zones, and more.</>
  },
  {
    title: 'Numbers',
    description: <>The <a href="./number/index.html">@internationalized/number</a> package implements international number formatting and parsing, including support for multiple numbering systems, currencies, percentages, units, and other formatting options.</>,
  },
  // {
  //  title: 'Time zones',
  //  description: 'The @internationalized/timezone package includes data about time zones, including their geography, translated city names, etc.'
  // },
]} />

----------------------------------------

TITLE: Implementing Help Text and Validation in NumberField
DESCRIPTION: This example demonstrates how to implement description text and dynamic error messages with NumberField. It validates that the entered value is positive and shows appropriate error messages based on the validation state.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState(1);
  let isValid = React.useMemo(() => value > 0 || Number.isNaN(value), [value]);

  return (
    <NumberField
      validationState={Number.isNaN(value) ? undefined : (isValid ? 'valid' : 'invalid')}
      value={value}
      onChange={setValue}
      label="Positive numbers only"
      description="Enter a positive number."
      errorMessage={value === 0 ? 'Is zero positive?' : 'Positive numbers are bigger than 0.'}
    />
  );
}

----------------------------------------

TITLE: Implementing a ColorSwatch Component with useColorSwatch in React
DESCRIPTION: This example demonstrates how to create a basic ColorSwatch component using the useColorSwatch hook. It renders a color preview with proper accessibility attributes and includes a checkerboard pattern background for transparent colors.

LANGUAGE: tsx
CODE:
import {useColorSwatch, AriaColorSwatchProps} from '@react-aria/color';

function ColorSwatch(props: AriaColorSwatchProps) {
  let {colorSwatchProps, color} = useColorSwatch(props);

  return (
    <div 
      {...colorSwatchProps}
      style={{
        ...colorSwatchProps.style,
        width: 32,
        height: 32,
        borderRadius: 4,
        background: `linear-gradient(${color}, ${color}),
          repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`
      }} />
  );
}

<ColorSwatch color="#f00a" />

----------------------------------------

TITLE: TextArea with Help Text and Error Messages in React Spectrum
DESCRIPTION: Demonstrates how to add description text and error messages to TextArea components for different validation states.

LANGUAGE: tsx
CODE:
<Flex gap="size-100" wrap>
  <TextArea label="Comment" defaultValue="Awesome!" validationState="valid" description="Enter a comment." />
  <TextArea label="Comment" validationState="invalid" errorMessage="Empty input is not allowed." />
</Flex>

----------------------------------------

TITLE: Implementing getDropOperation for Drop Target Control in React Spectrum
DESCRIPTION: This example demonstrates how to customize drop behavior on target elements by implementing getDropOperation. It restricts the drop target to only accept PNG images with a 'copy' operation, providing appropriate visual feedback to users.

LANGUAGE: tsx
CODE:
///- begin collapse -///
interface ImageItem {
  id: number,
  url: string,
  name: string
}
///- end collapse -///
function Example() {
  let [items, setItems] = React.useState<ImageItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    /*- begin highlight -*/
    getDropOperation: () => 'copy',
    /*- end highlight -*/
    acceptedDragTypes: ['image/png'],
    async onRootDrop(e) {
      ///- begin collapse -///
      let items = await Promise.all(
        e.items.filter(isFileDropItem).map(async item => ({
          id: Math.random(),
          url: URL.createObjectURL(await item.getFile()),
          name: item.name
        }))
      );
      setItems(items);
      ///- end collapse -///
      // ...
    }
  });

  ///- begin collapse -///
  return (
    <ListBox aria-label="Droppable list" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => "Drop items here"}>
      {item => (
        <ListBoxItem textValue={item.name}>
          <div className="image-item">
            <img src={item.url} />
            <span>{item.name}</span>
          </div>
        </ListBoxItem>
      )}
    </ListBox>
  );
  ///- end collapse -///
  // See "Files" example above...
}

----------------------------------------

TITLE: Styling Submenu Popovers with CSS
DESCRIPTION: CSS styling for submenu popovers that adjusts margins based on placement to create a more natural visual connection between parent and child menus.

LANGUAGE: css
CODE:
.react-aria-Popover[data-trigger=SubmenuTrigger][data-placement="right"] {
  margin-left: -5px;
}

.react-aria-Popover[data-trigger=SubmenuTrigger][data-placement="left"] {
  margin-right: -5px;
}

----------------------------------------

TITLE: Implementing Removable Tags with React Spectrum
DESCRIPTION: This example demonstrates how to implement a tag group with removable tags using the onRemove prop and useListData from React Stately.

LANGUAGE: tsx
CODE:
import {useListData} from '@react-stately/data';

function Example() {
  let list = useListData({
    initialItems: [
      { id: 1, name: "News" },
      { id: 2, name: "Travel" },
      { id: 3, name: "Gaming" },
      { id: 4, name: "Shopping" }
    ]
  });

  return (
    <MyTagGroup
      label="Categories"
      items={list.items}
      ///- begin highlight -///
      onRemove={keys => list.remove(...keys)}
      ///- end highlight -///
    >
      {(item) => <MyTag>{item.name}</MyTag>}
    </MyTagGroup>
  );
}

----------------------------------------

TITLE: Processing Directory Drops with useDrop in React
DESCRIPTION: This example demonstrates how to handle dropped directories using the useDrop hook. It reads the contents of a directory and displays file names in a grid, differentiating between files and sub-directories with appropriate icons.

LANGUAGE: tsx
CODE:
import type {DirectoryDropItem} from '@react-aria/dnd';
import File from '@spectrum-icons/workflow/FileTxt';
import Folder from '@spectrum-icons/workflow/Folder';

function DropTarget() {
  let [files, setFiles] = React.useState(null);
  let ref = React.useRef(null);
  let {dropProps, isDropTarget} = useDrop({
    ref,
    /*- begin highlight -*/
    async onDrop(e) {
      // Find the first dropped item that is a directory.
      let dir = e.items.find(item => item.kind === 'directory') as DirectoryDropItem;
      if (dir) {
        // Read entries in directory and update state with relevant info.
        let files = [];
        for await (let entry of dir.getEntries()) {
          files.push({
            name: entry.name,
            kind: entry.kind
          });
        }
        setFiles(files);
      }
    }
    /*- end highlight -*/
  });

  let contents = <>Drop directory here</>;
  if (files) {
    contents = (
      <ul>
        {files.map(f => (
          <li key={f.name}>
            {f.kind === 'directory' ? <Folder /> : <File />}
            <span>{f.name}</span>
          </li>
        ))}
      </ul>
    );
  }

  return (
    <div {...dropProps} role="button" tabIndex={0} ref={ref} className={`droppable grid ${isDropTarget ? 'target' : ''}`}>
      {contents}
    </div>
  );
}

----------------------------------------

TITLE: Implementing a Pokemon Evolution Tree with Controlled Selection
DESCRIPTION: Creates a specialized tree component for displaying Pokemon evolutions with controlled selection state using React hooks to track selected items.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-aria-components';

interface Pokemon {
  id: number,
  name: string,
  children?: Pokemon[]
}

interface PokemonEvolutionTreeProps<T> extends TreeProps<T> {
  items?: T[],
  renderEmptyState?: () => string
}

function PokemonEvolutionTree(
  props: PokemonEvolutionTreeProps<Pokemon>
) {
  let items: Pokemon[] = props.items ?? [
    {id: 1, name: 'Bulbasaur', children: [
      {id: 2, name: 'Ivysaur', children: [
        {id: 3, name: 'Venusaur'}
      ]}
    ]},
    {id: 4, name: 'Charmander', children: [
      {id: 5, name: 'Charmeleon', children: [
        {id: 6, name: 'Charizard'}
      ]}
    ]},
    {id: 7, name: 'Squirtle', children: [
      {id: 8, name: 'Wartortle', children: [
        {id: 9, name: 'Blastoise'}
      ]}
    ]}
  ];

  let [selectedKeys, setSelectedKeys] =
    React.useState<Selection>(new Set());

  return (
    <Tree
      aria-label="Pokemon evolution tree"
      style={{height: '300px'}}
      items={items}
      defaultExpandedKeys={[1, 2]}
      selectedKeys={selectedKeys}
      onSelectionChange={setSelectedKeys}
      {...props}
    >
      {function renderItem(item) {
        return (
          <MyTreeItem title={item.name}>
            <Collection items={item.children}>
              {renderItem}
            </Collection>
          </MyTreeItem>
        );
      }}
    </Tree>
  );
}

<PokemonEvolutionTree selectionMode="multiple" />

----------------------------------------

TITLE: Importing Global Tailwind CSS in React
DESCRIPTION: Imports the global Tailwind CSS stylesheet for use in the component example.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Defining Form and Label TypeScript Interfaces in React Spectrum
DESCRIPTION: TypeScript interfaces that define the props for Form and Label components. The Form interface extends DOMProps, StyleProps, and LabelableProps with properties for controlling form state. The Label interface supports positioning, alignment, and necessity indicators.

LANGUAGE: typescript
CODE:
interface Form extends DOMProps, StyleProps, LabelableProps {
  children: ReactElement<FormItem> | ReactElement<FormItem>[]
  isQuiet?: boolean,
  isEmphasized?: boolean,
  isDisabled?: boolean,
  isRequired?: boolean,
  isReadOnly?: boolean,
  validationState?: ValidationState
}

interface Label extends DOMProps, StyleProps {
  children?: ReactNode,
  htmlFor?: string, // for compatibility with React
  for?: string,
  labelPosition?: LabelPosition, // default top
  labelAlign?: Alignment, // default start
  isRequired?: boolean,
  necessityIndicator?: NecessityIndicator // default icon
}

----------------------------------------

TITLE: Testing React Aria Tree Components with Test Utils
DESCRIPTION: This example shows how to test Tree components using the @react-aria/test-utils library. It demonstrates setting up a test for keyboard selection in a Tree component.

LANGUAGE: ts
CODE:
// Tree.test.ts
import {render, within} from '@testing-library/react';
import {User} from '@react-aria/test-utils';

let testUtilUser = new User({interactionType: 'mouse'});
// ...

it('Tree can select a item via keyboard', async function () {
  // Render your test component/app and initialize the Tree tester
  let {getByTestId} = render(
     <Tree data-testid="test-tree" selectionMode="multiple">
      ...
    </Tree>
  );
  let treeTester = testUtilUser.createTester('Tree', {root: getByTestId('test-tree'), interactionType: 'keyboard'});

  await treeTester.toggleRowSelection({row: 0});
  expect(treeTester.selectedRows).toHaveLength(1);
  expect(within(treeTester.rows[0]).getByRole('checkbox')).toBeChecked();

  await treeTester.toggleRowSelection({row: 1});
  expect(treeTester.selectedRows).toHaveLength(2);
  expect(within(treeTester.rows[1]).getByRole('checkbox')).toBeChecked();

  await treeTester.toggleRowSelection({row: 0});
  expect(treeTester.selectedRows).toHaveLength(1);
  expect(within(treeTester.rows[0]).getByRole('checkbox')).not.toBeChecked();
});

----------------------------------------

TITLE: Multi-Format and Multi-Item Drag Implementation
DESCRIPTION: Example showing how to provide multiple data formats for drag items (plain text, HTML, custom format) and how to drag multiple items simultaneously for different applications.

LANGUAGE: tsx
CODE:
function Draggable() {
  let {dragProps, isDragging} = useDrag({
    getItems() {
      return [{
        'text/plain': 'hello world',
        'text/html': '<strong>hello world</strong>',
        'my-app-custom-type': JSON.stringify({
          message: 'hello world',
          style: 'bold'
        })
      }, {
        'text/plain': 'foo bar',
        'text/html': '<em>foo bar</em>',
        'my-app-custom-type': JSON.stringify({
          message: 'foo bar',
          style: 'italic'
        })
      }];
    }
  });

  // ...
  ///- begin collapse -///

  return (
    <div {...dragProps} role="button" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>
      Drag me
    </div>
  );
  ///- end collapse -///
}
///- begin collapse -///
<Draggable />
<DropTarget />
///- end collapse -///

----------------------------------------

TITLE: HTML Form Integration with RangeSlider
DESCRIPTION: Shows how to integrate a RangeSlider with HTML forms using the startName and endName props.

LANGUAGE: tsx
CODE:
<RangeSlider
  label="Range"
  defaultValue={{start: 12, end: 36}}
  startName="start"
  endName="end" />

----------------------------------------

TITLE: Custom Styled Checkbox with Visual Focus Ring
DESCRIPTION: An advanced implementation of a checkbox using SVG for custom styling with the VisuallyHidden component to maintain accessibility. Includes focus ring functionality for keyboard users and supports all checkbox states.

LANGUAGE: tsx
CODE:
import {VisuallyHidden} from '@react-aria/visually-hidden';
import {useFocusRing} from '@react-aria/focus';
import {mergeProps} from '@react-aria/utils';

function Checkbox(props) {
  let state = useToggleState(props);
  let ref = React.useRef(null);
  let {inputProps} = useCheckbox(props, state, ref);
  let {isFocusVisible, focusProps} = useFocusRing();
  let isSelected = state.isSelected && !props.isIndeterminate;

  return (
    <label style={{display: 'flex', alignItems: 'center', opacity: props.isDisabled ? 0.4 : 1}}>
      <VisuallyHidden>
        <input {...mergeProps(inputProps, focusProps)} ref={ref} />
      </VisuallyHidden>
      <svg
        width={24}
        height={24}
        aria-hidden="true"
        style={{marginRight: 4}}>
        <rect
          x={isSelected ? 4 : 5}
          y={isSelected ? 4 : 5}
          width={isSelected ? 16 : 14}
          height={isSelected ? 16 : 14}
          fill={isSelected ? 'orange' : 'none'}
          stroke={isSelected ? 'none' : 'gray'}
          strokeWidth={2}/>
        {isSelected &&
          <path
            transform="translate(7 7)"
            d={`M3.788 9A.999.999 0 0 1 3 8.615l-2.288-3a1 1 0 1 1
            1.576-1.23l1.5 1.991 3.924-4.991a1 1 0 1 1 1.576 1.23l-4.712
            6A.999.999 0 0 1 3.788 9z`} />
        }
        {props.isIndeterminate &&
          <rect x={7} y={11} width={10} height={2} fill="gray" />
        }
        {isFocusVisible &&
          <rect
            x={1}
            y={1}
            width={22}
            height={22}
            fill="none"
            stroke="orange"
            strokeWidth={2} />
        }
      </svg>
      {props.children}
    </label>
  );
}

<Checkbox>Unsubscribe</Checkbox>

----------------------------------------

TITLE: Implementing ToastProvider Component with useToastState
DESCRIPTION: Shows how to create a ToastProvider component that manages toast state using the useToastState hook. It renders the ToastRegion only when there are visible toasts.

LANGUAGE: tsx
CODE:
import {useToastState} from '@react-stately/toast';

function ToastProvider({children, ...props}) {
  let state = useToastState({
    maxVisibleToasts: 5
  });

  return (
    <>
      {children(state)}
      {state.visibleToasts.length > 0 && <ToastRegion {...props} state={state} />}
    </>
  );
}

----------------------------------------

TITLE: Adding Item Actions to TreeView Components
DESCRIPTION: This example shows how to implement item actions in TreeView components using the onAction prop. It demonstrates both checkbox and highlight selection styles with action handling.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-300">
  <ExampleTree
    aria-label="Example tree with item actions and checkbox selection"
    defaultExpandedKeys={['projects', 'project-2']}
    /*- begin highlight -*/
    selectionMode="multiple"
    onAction={key => alert(`Opening item ${key}...`)}
    /*- end highlight -*/
  />
  <ExampleTree
    aria-label="Example tree with item actions and highlight selection"
    defaultExpandedKeys={['projects', 'project-2']}
    /*- begin highlight -*/
    selectionMode="multiple"
    selectionStyle="highlight"
    onAction={key => alert(`Opening item ${key}...`)}
    /*- end highlight -*/
  />
</Flex>

----------------------------------------

TITLE: Building an HSBA Color Picker with ColorSlider in React
DESCRIPTION: Creates an HSBA color picker using four color sliders for hue, saturation, brightness, and alpha channels. Shows how to initialize with an HSB color value and bind multiple sliders to the same state.

LANGUAGE: tsx
CODE:
function Example() {
  let [color, setColor] = React.useState(parseColor('hsb(0, 100%, 50%)'));
  return (
    <>
      <ColorSlider channel="hue" value={color} onChange={setColor} />
      <ColorSlider channel="saturation" value={color} onChange={setColor} />
      <ColorSlider channel="brightness" value={color} onChange={setColor} />
      <ColorSlider channel="alpha" value={color} onChange={setColor} />
    </>
  );
}

----------------------------------------

TITLE: Implementing Asynchronous Loading in ListBox with useAsyncList
DESCRIPTION: Example demonstrating asynchronous data loading in ListBox with progress indication and infinite scrolling. It uses the useAsyncList hook to fetch data from an API and load more items as the user scrolls.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Pokemon {
  name: string
}

function AsyncLoadingExample() {
  let list = useAsyncList<Pokemon>({
    async load({signal, cursor}) {
      // If no cursor is available, then we're loading the first page.
      // Otherwise, the cursor is the next URL to load, as returned from the previous page.
      let res = await fetch(cursor || 'https://pokeapi.co/api/v2/pokemon', {signal});
      let json = await res.json();
      return {
        items: json.results,
        cursor: json.next
      };
    }
  });

  return (
    <Flex maxHeight="size-2400">
      <ListBox
        aria-label="Pick a Pokemon"
        items={list.items}
        isLoading={list.isLoading}
        onLoadMore={list.loadMore}
        width="size-2400">
        {item => <Item key={item.name}>{item.name}</Item>}
      </ListBox>
    </Flex>
  );
}

----------------------------------------

TITLE: Importing Layout Component for React Spectrum Documentation
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default component for the page layout.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Styled SearchField with Clear Button
DESCRIPTION: A more advanced SearchField implementation with custom styling and a clear button. The component uses useSearchField to manage state and accessibility, and includes a button for clearing the input.

LANGUAGE: TypeScript
CODE:
// Reuse the Button from your component library. See below for details.
import {Button} from 'your-component-library';

function SearchField(props) {
  let {label} = props;
  let state = useSearchFieldState(props);
  let ref = React.useRef(null);
  let {labelProps, inputProps, clearButtonProps} = useSearchField(props, state, ref);

  return (
    <div className="search-field">
      <label {...labelProps}>{label}</label>
      <div>
        <input {...inputProps} ref={ref} />
        {state.value !== '' &&
          <Button {...clearButtonProps}>❎</Button>
        }
      </div>
    </div>
  );
}

<SearchField
  label="Search"
  onSubmit={text => alert(text)} />

----------------------------------------

TITLE: Custom Styling for Menu Items with CSS
DESCRIPTION: CSS styling for custom MenuItem components with states for focus, selection, and open states, including high contrast mode support.

LANGUAGE: css
CODE:
.my-item {
  margin: 2px;
  padding: 0.286rem 0.571rem;
  border-radius: 6px;
  outline: none;
  cursor: default;
  color: var(--text-color);
  font-size: 1.072rem;
  position: relative;

  &.focused {
    background: #e70073;
    color: white;
  }
  &.open:not(.focused) {
    background: rgba(192, 192, 192, 0.3);
    color: var(--text-color);
  }
  .chevron {
    width: 20;
    height: 20;
    fill: none;
    stroke: currentColor;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-width: 2;
    position: absolute;
    right: 0;
    top: 0;
    height: 100%;
  }
}

@media (forced-colors: active) {
  .my-item.focused {
    forced-color-adjust: none;
    background: Highlight;
    color: HighlightText;
  }
}

----------------------------------------

TITLE: Importing and Exporting BlogPostLayout Component in JSX
DESCRIPTION: Imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and exports the BlogPostLayout as the default export.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Creating Unavailable Menu Items with ContextualHelpTrigger in React Spectrum
DESCRIPTION: This example demonstrates how to use ContextualHelpTrigger to disable menu items and provide contextual information on why they're unavailable. The snippet shows how to structure dialogs within menu items and control their availability programmatically.

LANGUAGE: tsx
CODE:
import {Content, Dialog, Heading} from '@adobe/react-spectrum';
import {ContextualHelpTrigger} from '@react-spectrum/menu';

<MenuTrigger>
  <ActionButton>Edit</ActionButton>
  <Menu>
    <Item key="undo">Undo</Item>
    <Item key="redo">Redo</Item>
    <ContextualHelpTrigger isUnavailable>
      <Item key="cut">Cut</Item>
      <Dialog>
        <Heading>Cut</Heading>
        <Content>Please select text for 'Cut' to be enabled.</Content>
      </Dialog>
    </ContextualHelpTrigger>
    <ContextualHelpTrigger isUnavailable>
      <Item key="copy">Copy</Item>
      <Dialog>
        <Heading>Copy</Heading>
        <Content>Please select text for 'Copy' to be enabled.</Content>
      </Dialog>
    </ContextualHelpTrigger>
    <ContextualHelpTrigger>
      <Item key="paste">Paste</Item>
      <Dialog>
        <Heading>Paste</Heading>
        <Content>You have nothing to 'Paste'.</Content>
      </Dialog>
    </ContextualHelpTrigger>
  </Menu>
</MenuTrigger>

----------------------------------------

TITLE: CSS Styling for Droppable ListBox
DESCRIPTION: CSS styles for the droppable ListBox component, including styling for the listbox container, options, selected items, focus states, and drop target indicators.

LANGUAGE: css
CODE:
[role=listbox] {
  padding: 0;
  margin: 5px 0;
  list-style: none;
  box-shadow: inset 0 0 0 1px gray;
  max-width: 250px;
  outline: none;
  min-height: 50px;
  overflow: auto;
}

[role=listbox]:empty {
  box-sizing: border-box;
  border: 1px dashed gray;
  box-shadow: none;
}

.option {
  padding: 3px 6px;
  outline: none;
}

.option[aria-selected=true] {
  background: blueviolet;
  color: white;
}

.option.focus-visible {
  box-shadow: inset 0 0 0 2px orange;
}

.option.drop-target {
  border-color: transparent;
  box-shadow: inset 0 0 0 2px var(--blue);
}

----------------------------------------

TITLE: Controlled and Uncontrolled Tabs Selection Examples
DESCRIPTION: Demonstrates how to implement both controlled and uncontrolled selection in Tabs using selectedKey and defaultSelectedKey props, with state management for the controlled example.

LANGUAGE: tsx
CODE:
function Example() {
  let tabs = [
    {id: 1, name: 'Keyboard Settings', children: 'No keyboard detected.'},
    {id: 2, name: 'Mouse Settings', children: 'No mouse detected.'},
    {id: 3, name: 'Gamepad Settings', children: 'No gamepad detected'}
  ];
  type Tab = typeof tabs[0];
  let [tab, setTab] = React.useState<Key>(2);

  return (
    <Flex gap="size-150" wrap>
      <span id="label-2">Settings (uncontrolled)</span>
      <Tabs aria-labelledby="label-2" items={tabs} defaultSelectedKey={2} marginBottom="size-400">
        <TabList>
          {(item: Tab) => (
            <Item>
              {item.name}
            </Item>
          )}
        </TabList>
        <TabPanels>
          {(item: Tab) => (
            <Item>
              {item.children}
            </Item>
          )}
        </TabPanels>
      </Tabs>
      <span id="label-3">Settings (controlled)</span>
      <Tabs aria-labelledby="label-3" items={tabs} selectedKey={tab} onSelectionChange={setTab}>
        <TabList>
          {(item: Tab) => (
            <Item>
              {item.name}
            </Item>
          )}
        </TabList>
        <TabPanels>
          {(item: Tab) => (
            <Item>
              {item.children}
            </Item>
          )}
        </TabPanels>
      </Tabs>
    </Flex>
  );
}

----------------------------------------

TITLE: Basic Dialog Example with Connectivity Check
DESCRIPTION: A simple example of a Dialog triggered by an ActionButton that shows a connectivity status and provides confirm/cancel actions.

LANGUAGE: tsx
CODE:
import {ActionButton, Button} from '@react-spectrum/button';
import {ButtonGroup} from '@react-spectrum/buttongroup';
import {Content, Header} from '@react-spectrum/view';
import {Dialog, DialogTrigger} from '@react-spectrum/dialog';
import {Divider} from '@react-spectrum/divider';
import {Heading, Text} from '@react-spectrum/text';

<DialogTrigger>
  <ActionButton>Check connectivity</ActionButton>
  {(close) => (
    <Dialog>
      <Heading>Internet Speed Test</Heading>
      <Header>Connection status: Connected</Header>
      <Divider />
      <Content>
        <Text>
          Start speed test?
        </Text>
      </Content>
      <ButtonGroup>
        <Button variant="secondary" onPress={close}>Cancel</Button>
        <Button variant="accent" onPress={close}>Confirm</Button>
      </ButtonGroup>
    </Dialog>
  )}
</DialogTrigger>

----------------------------------------

TITLE: Configuring Allowed Drop Operations in React Spectrum
DESCRIPTION: This code shows how to restrict allowed drop operations by implementing the getAllowedDropOperations function. It limits drop operations to only 'copy', preventing move operations and showing a copy cursor affordance by default.

LANGUAGE: tsx
CODE:
function Example() {
  ///- begin collapse -///
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Adobe Photoshop'},
      {id: 2, name: 'Adobe XD'},
      {id: 3, name: 'Adobe Dreamweaver'},
      {id: 4, name: 'Adobe InDesign'},
      {id: 5, name: 'Adobe Connect'}
    ]
  });
  ///- end collapse -///
  // ...

  let { dragAndDropHooks } = useDragAndDrop({
    ///- begin collapse -///
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    getItems(keys) {
      return [...keys].map(key => {
        let item = list.getItem(key);
        return {
          'text/plain': item.name,
          'custom-app-type': JSON.stringify(item)
        };
      });
    },
    ///- end collapse -///
    // ...
    /*- begin highlight -*/
    getAllowedDropOperations: () => ['copy']
    /*- end highlight -*/
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      <ListBox aria-label="Draggable list" selectionMode="multiple" items={list.items} dragAndDropHooks={dragAndDropHooks}>
        {item => <ListBoxItem>{item.name}</ListBoxItem>}
      </ListBox>
      <DroppableListBox />
    </div>
  );
}

----------------------------------------

TITLE: Implementing User Search ComboBox with Tailwind CSS
DESCRIPTION: Complete implementation of a user search ComboBox component using React Aria Components with Tailwind CSS styling. Includes a custom UserItem component for rendering individual user entries with avatars and selection indicators.

LANGUAGE: TSX
CODE:
import {ComboBox, Label, Input, Group, Button, Popover, ListBox, ListBoxItem} from 'react-aria-components';
import type {ListBoxItemProps} from 'react-aria-components';
import ChevronUpDownIcon from '@spectrum-icons/workflow/ChevronUpDown';
import CheckIcon from '@spectrum-icons/workflow/Checkmark';

function ComboBoxExample() {
  return (
    <div className="bg-linear-to-r from-sky-300 to-cyan-300 p-8 sm:h-[300px] rounded-lg flex justify-center">
      <ComboBox className="group flex flex-col gap-1 w-[200px]">
        <Label className="text-black cursor-default">Assignee</Label>
        <Group className="flex rounded-lg bg-white/90 focus-within:bg-white transition shadow-md ring-1 ring-black/10 focus-visible:ring-2 focus-visible:ring-black">
          <Input className="flex-1 w-full border-none py-2 px-3 leading-5 text-gray-900 bg-transparent outline-hidden text-base" />
          <Button className="px-3 flex items-center text-gray-700 transition border-0 border-solid border-l border-l-sky-200 bg-transparent rounded-r-lg pressed:bg-sky-100">
            <ChevronUpDownIcon size="XS" />
          </Button>
        </Group>
        <Popover className="max-h-60 w-(--trigger-width) overflow-auto rounded-md bg-white text-base shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out">
          <ListBox className="outline-hidden p-1" items={people}>
            {item => (
              <UserItem textValue={item.name}>
                <img alt="" src={item.avatar} className="w-6 h-6 rounded-full" />
                <span className="truncate">{item.name}</span>
              </UserItem>
            )}
          </ListBox>
        </Popover>
      </ComboBox>
    </div>
  );
}

function UserItem(props: ListBoxItemProps & {children: React.ReactNode}) {
  return (
    <ListBoxItem
      {...props}
      className="group flex items-center gap-2 cursor-default select-none py-2 pl-2 pr-4 outline-hidden rounded-sm text-gray-900 focus:bg-sky-600 focus:text-white">
      {({ isSelected }) => (
        <>
          <span className="flex-1 flex items-center gap-3 truncate font-normal group-selected:font-medium">{props.children}</span>
          {isSelected &&
            <span className="w-5 flex items-center text-sky-600 group-focus:text-white">
              <CheckIcon size="S" />
            </span>
          }
        </>
      )}
    </ListBoxItem>
  );
}

----------------------------------------

TITLE: Importing React Spectrum Card Package
DESCRIPTION: Shows the package name for the Card component in React Spectrum. The package is part of the larger React Spectrum component library developed by Adobe.

LANGUAGE: markdown
CODE:
# @react-spectrum/card

----------------------------------------

TITLE: Creating an Alert Dialog with React Aria Components
DESCRIPTION: Example of creating an alert dialog using the Dialog component with role="alertdialog" prop, which presents a critical prompt that requires user confirmation.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <Button>Delete…</Button>
  <Modal>
    <Dialog role="alertdialog">
      {({close}) => (
        <>
          <Heading slot="title">Delete file</Heading>
          <p>This will permanently delete the selected file. Continue?</p>
          <div style={{display: 'flex', gap: 8}}>
            <Button onPress={close}>Cancel</Button>
            <Button onPress={close}>Delete</Button>
          </div>
        </>
      )}
    </Dialog>
  </Modal>
</DialogTrigger>

----------------------------------------

TITLE: Configuring a ComboBox with Focus Menu Trigger
DESCRIPTION: This example shows how to set up a ComboBox with 'focus' as the menuTrigger value, causing the menu to open when the user focuses the input field rather than when typing begins.

LANGUAGE: tsx
CODE:
<MyComboBox label="Favorite Animal" menuTrigger="focus">
  <ListBoxItem id="red panda">Red Panda</ListBoxItem>
  <ListBoxItem id="cat">Cat</ListBoxItem>
  <ListBoxItem id="dog">Dog</ListBoxItem>
  <ListBoxItem id="aardvark">Aardvark</ListBoxItem>
  <ListBoxItem id="kangaroo">Kangaroo</ListBoxItem>
  <ListBoxItem id="snake">Snake</ListBoxItem>
</MyComboBox>

----------------------------------------

TITLE: Basic ColorField Implementation in React Aria Components
DESCRIPTION: A simple example showing how to implement a ColorField with a label and input using React Aria Components with default values.

LANGUAGE: tsx
CODE:
import {ColorField, Label, Input} from 'react-aria-components';

<ColorField defaultValue="#ff0">
  <Label>Primary Color</Label>
  <Input />
</ColorField>

----------------------------------------

TITLE: Implementing Complex Menu Items with Icons and Descriptions in React Spectrum
DESCRIPTION: This example shows how to create menu items with icons, text, and keyboard shortcuts. The snippet demonstrates the structured layout for menu items with additional content to better communicate options.

LANGUAGE: tsx
CODE:
import {Keyboard, Text} from '@react-spectrum/text';
<MenuTrigger>
  <ActionButton>
    Edit
  </ActionButton>
  <Menu>
    <Item key="cut" textValue="cut">
      <Cut />
      <Text>Cut</Text>
      <Keyboard>⌘X</Keyboard>
    </Item>
    <Item key="copy" textValue="copy">
      <Copy />
      <Text>Copy</Text>
      <Keyboard>⌘C</Keyboard>
    </Item>
    <Item key="paste" textValue="paste">
      <Paste />
      <Text>Paste</Text>
      <Keyboard>⌘V</Keyboard>
    </Item>
  </Menu>
</MenuTrigger>

----------------------------------------

TITLE: Implementing Empty State Rendering in React Spectrum ListView
DESCRIPTION: Example showing how to create a custom empty state for a ListView using the renderEmptyState prop. The empty state includes an illustration, heading, and descriptive text when no items are present.

LANGUAGE: tsx
CODE:
import {Content} from '@react-spectrum/view';
import {IllustratedMessage} from '@react-spectrum/illustratedmessage';
import NotFound from '@spectrum-icons/illustrations/NotFound';
import {Heading} from '@react-spectrum/text';

function renderEmptyState() {
  return (
    <IllustratedMessage>
      <NotFound />
      <Heading>No results</Heading>
      <Content>No results found</Content>
    </IllustratedMessage>
  );
}

<ListView
  selectionMode="multiple"
  aria-label="Example ListView for empty state"
  maxWidth="size-6000"
  height="size-3000"
  renderEmptyState={renderEmptyState}>
  {[]}
</ListView>

----------------------------------------

TITLE: TimeField with Custom Validation Logic
DESCRIPTION: Example showing how to implement custom validation for a TimeField that ensures the selected time falls on 15-minute increments.

LANGUAGE: tsx
CODE:
<Form validationBehavior="native" maxWidth="size-3000">
  <TimeField
    label="Meeting time"
    /*- begin highlight -*/
    validate={time => time?.minute % 15 !== 0 ? 'Meetings start every 15 minutes.' : null}
    /*- end highlight -*/
    defaultValue={new Time(9, 25)} />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Implementing Resizable Columns in React Spectrum Table
DESCRIPTION: This example demonstrates how to add column resizing functionality to a Table component. It uses useTableColumnResizeState to track column widths and shows the necessary modifications to support resizable columns, including wrapper divs for scrolling behavior.

LANGUAGE: tsx
CODE:
import {useCallback} from 'react';
import {useTableColumnResizeState} from '@react-stately/table';

function ResizableColumnsTable(props) {
  let state = useTableState(props);
  let scrollRef = useRef<HTMLDivElement | null>(null);
  let ref = useRef<HTMLTableElement | null>(null);
  let {collection} = state;
  let {gridProps} = useTable(
    {
      ...props,
      // The table wrapper is scrollable rather than just the body
      scrollRef
    },
    state,
    ref
  );

  // Set the minimum width of the columns to 40px
  let getDefaultMinWidth = useCallback(() => {
    return 40;
  }, []);

  let layoutState = useTableColumnResizeState({
    // Matches the width of the table itself
    tableWidth: 300,
    getDefaultMinWidth
  }, state);

  return (
    <div className="aria-table-wrapper" ref={scrollRef}>
      <table
        {...gridProps}
        className="aria-table"
        ref={ref}>
        <TableRowGroup type="thead">
          {collection.headerRows.map(headerRow => (
            <TableHeaderRow key={headerRow.key} item={headerRow} state={state}>
              {[...headerRow.childNodes].map(column => (
                <ResizableTableColumnHeader
                  key={column.key}
                  column={column}
                  state={state}
                  layoutState={layoutState}
                  onResizeStart={props.onResizeStart}
                  onResize={props.onResize}
                  onResizeEnd={props.onResizeEnd}
                />
              ))}
            </TableHeaderRow>
          ))}
        </TableRowGroup>
        <TableRowGroup type="tbody">
          {[...collection.body.childNodes].map(row => (
            <TableRow key={row.key} item={row} state={state}>
              {[...row.childNodes].map(cell => (
                <TableCell key={cell.key} cell={cell} state={state} />
              ))}
            </TableRow>
          ))}
        </TableRowGroup>
      </table>
    </div>
  );

----------------------------------------

TITLE: Form Validation for React Aria Select Component
DESCRIPTION: Example demonstrating form validation in a Select component using isRequired and FieldError to display validation errors.

LANGUAGE: tsx
CODE:
import {Form, FieldError} from 'react-aria-components';

<Form>
  <Select name="animal" isRequired>
    <Label>Favorite Animal</Label>
    <Button>
      <SelectValue />
      <span aria-hidden="true">▼</span>
    </Button>
    <FieldError />
    <Popover>
      <ListBox>
        <ListBoxItem>Aardvark</ListBoxItem>
        <ListBoxItem>Cat</ListBoxItem>
        <ListBoxItem>Dog</ListBoxItem>
        <ListBoxItem>Kangaroo</ListBoxItem>
        <ListBoxItem>Panda</ListBoxItem>
        <ListBoxItem>Snake</ListBoxItem>
      </ListBox>
    </Popover>
  </Select>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Customizing SelectValue Rendering
DESCRIPTION: Example showing how to customize the display of the selected value in a Select component by using the SelectValue render props.

LANGUAGE: tsx
CODE:
<Select>
  <Label>Favorite Animal</Label>
  <Button>
    <SelectValue>
      {({defaultChildren, isPlaceholder}) => {
        return isPlaceholder ? <><b>Animal</b> selection</> : defaultChildren;
      }}
    </SelectValue>
    <span aria-hidden="true">▼</span>
  </Button>
  <Popover>
    <ListBox>
      <ListBoxItem>Aardvark</ListBoxItem>
      <ListBoxItem>Cat</ListBoxItem>
      <ListBoxItem>Dog</ListBoxItem>
      <ListBoxItem>Kangaroo</ListBoxItem>
      <ListBoxItem>Panda</ListBoxItem>
      <ListBoxItem>Snake</ListBoxItem>
    </ListBox>
  </Popover>
</Select>

----------------------------------------

TITLE: Defining Ripple Animation Keyframes in CSS
DESCRIPTION: Implements the ripple animation keyframes used by the RippleButton component. The animation scales the ripple effect from 0 to 6x while fading out over 600ms.

LANGUAGE: css
CODE:
@keyframes ripple {
  from {
    transform: scale(0);
    opacity: 1;
  }
  to {
    transform: scale(6);
    opacity: 0;
  }
}

----------------------------------------

TITLE: Internationalized Calendar with Hindi Locale and Indian Calendar
DESCRIPTION: Shows how to use the Provider component to create a Calendar with Hindi language and Indian calendar system, while maintaining Gregorian dates in the onChange handler.

LANGUAGE: tsx
CODE:
import {Provider} from '@adobe/react-spectrum';

function Example() {
  let [date, setDate] = React.useState(null);
  return (
    <Provider locale="hi-IN-u-ca-indian">
      <Calendar aria-label="Date" value={date} onChange={setDate} />
      <p>Selected date: {date?.toString()}</p>
    </Provider>
  );
}

----------------------------------------

TITLE: Implementing Entry and Exit Animations for Modals
DESCRIPTION: CSS example showing how to implement entry and exit animations for Modals using data attributes. This demonstrates targeting states exposed as DOM attributes for animation effects.

LANGUAGE: css
CODE:
.react-aria-Modal[data-entering] {
  animation: slide 300ms;
}

.react-aria-Modal[data-exiting] {
  animation: slide 300ms reverse;
}

@keyframes slide {
  /* ... */
}

----------------------------------------

TITLE: Implementing useDrop Hook in TypeScript
DESCRIPTION: The useDrop hook makes an element a drop target and handles drop events. It returns props for the drop target element and indicates whether the element is currently an active drop target for visual state changes.

LANGUAGE: typescript
CODE:
interface DropEnterEvent extends DragDropEvent {
  type: 'dropenter'
}

interface DropMoveEvent extends DragDropEvent {
  type: 'dropmove'
}

interface DropActivateEvent extends DragDropEvent {
  type: 'dropactivate'
}

interface DropExitEvent extends DragDropEvent {
  type: 'dropexit'
}

interface DropItem {
  /** The list of drag types that are available for this item. */
  types: Set<string>,
  /** Retrieves the item data for a given drag type */
  getData(type: string): Promise<string>
}

interface DropEvent extends DragDropEvent {
  type: 'drop',
  dropOperation: DropOperation,
  items: DropItem[]
}

interface DropOptions {
  /** A ref to the drop target element. */
  ref: RefObject<HTMLElement>,
  /** 
   * A function that returns the drop operation that will be performed
   * if items of the given types are dropped. A list of operations that
   * are allowed by the drag source are provided. If an operation is
   * returned that is not allowed, the drag will be canceled.
   */
  getDropOperation?: (types: string[], allowedOperations: DropOperation[]) => DropOperation,
  /** 
   * Similar to getDropOperation, this function should be provided if the drop
   * operation can vary depending on the point within it that the drag is over.
   */
  getDropOperationForPoint?: (types: string[], allowedOperations: DropOperation[], x: number, y: number) => DropOperation,
  /** Fired when a valid drag enters the drop target. */
  onDropEnter?: (e: DropEnterEvent) => void,
  /** Fired when a drag moves while over the drop target. */
  onDropMove?: (e: DropMoveEvent) => void,
  /**
   * Fired when the user hovers over the drop target for a period of time.
   * Typically, this opens or navigates to that item.
   */
  onDropActivate?: (e: DropActivateEvent) => void,
  /** Fired when a drag exits the drop target. */
  onDropExit?: (e: DropExitEvent) => void,
  /** Fired when a drop occurs on the drop target. */
  onDrop?: (e: DropEvent) => void
}

interface DropResult {
  /** Props for the drop target element. */
  dropProps: HTMLAttributes<HTMLElement>,
  /** Whether the element is currently an active drop target. */
  isDropTarget: boolean
}

declare function useDrop(options: DropOptions): DropResult;

----------------------------------------

TITLE: Dynamic ListView with Data-Driven Items
DESCRIPTION: Example of ListView with dynamically generated items from an array of data objects. Each item has a unique key defined by the id property of the data object.

LANGUAGE: tsx
CODE:
const items = [
  {id: 1, name: 'Adobe Photoshop'},
  {id: 2, name: 'Adobe XD'},
  {id: 3, name: 'Adobe InDesign'},
  {id: 4, name: 'Adobe AfterEffects'},
  {id: 5, name: 'Adobe Illustrator'},
  {id: 6, name: 'Adobe Lightroom'},
  {id: 7, name: 'Adobe Premiere Pro'},
  {id: 8, name: 'Adobe Fresco'},
  {id: 9, name: 'Adobe Dreamweaver'}
];

<ListView items={items} selectionMode="multiple" maxWidth="size-6000" height="250px" aria-label="Dynamic ListView items example">
  {(item) => <Item>{item.name}</Item>}
</ListView>

----------------------------------------

TITLE: Implementing Dialog Component with useDialog in React
DESCRIPTION: Example showing how to implement a Dialog component using the useDialog hook from React Aria. The component accepts title and children props, and applies the appropriate ARIA attributes for accessibility.

LANGUAGE: tsx
CODE:
import type {AriaDialogProps} from '@react-aria/dialog';
import {useDialog} from '@react-aria/dialog';

// Reuse the Button and Modal from your component library. See below for details.
import {Button, Modal, ModalTrigger} from 'your-component-library';

interface DialogProps extends AriaDialogProps {
  title?: React.ReactNode,
  children: React.ReactNode
}

function Dialog({title, children, ...props}: DialogProps) {
  let ref = React.useRef(null);
  let {dialogProps, titleProps} = useDialog(props, ref);

  return (
    <div {...dialogProps} ref={ref} style={{padding: 30}}>
      {title &&
        <h3 {...titleProps} style={{marginTop: 0}}>
          {title}
        </h3>
      }
      {children}
    </div>
  );
}

<ModalTrigger label="Open Dialog">
  {close =>
    <Dialog title="Enter your name">
      <form style={{display: 'flex', flexDirection: 'column'}}>
        <label htmlFor="first-name">First Name:</label>
        <input id="first-name" />
        <label htmlFor="last-name">Last Name:</label>
        <input id="last-name" />
        <Button
          onPress={close}
          style={{marginTop: 10}}>
          Submit
        </Button>
      </form>
    </Dialog>
  }
</ModalTrigger>

----------------------------------------

TITLE: DateRangePicker with Time Zone Support
DESCRIPTION: Shows how to use DateRangePicker with time zone-aware date objects using parseZonedDateTime from @internationalized/date.

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

<DateRangePicker
  label="Date range"
  defaultValue={{
    start: parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]'),
    end: parseZonedDateTime('2022-11-08T11:15[America/Los_Angeles]')
  }} />

----------------------------------------

TITLE: Calendar with onChange Event Handler and Date Formatting
DESCRIPTION: Demonstrates using the onChange event to update a separate element with a formatted version of the selected date using the user's locale.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@adobe/react-spectrum';

function Example() {
  let [date, setDate] = React.useState(parseDate('2022-07-04'));
  let formatter = useDateFormatter({dateStyle: 'full'});

  return (
    <>
      <Calendar aria-label="Event date" value={date} onChange={setDate} />
      <p>Selected date: {formatter.format(date.toDate(getLocalTimeZone()))}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing Dynamic Sections in React ListBox
DESCRIPTION: This example demonstrates how to create a ListBox with dynamically generated sections from hierarchical data. It uses the Collection component to render child items within each section and implements single selection with state management.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-aria-components';
import {Collection} from 'react-aria-components';

function Example() {
  let options = [
    {name: 'Australian', children: [
      {id: 2, name: 'Koala'},
      {id: 3, name: 'Kangaroo'},
      {id: 4, name: 'Platypus'}
    ]},
    {name: 'American', children: [
      {id: 6, name: 'Bald Eagle'},
      {id: 7, name: 'Bison'},
      {id: 8, name: 'Skunk'}
    ]}
  ];
  let [selected, setSelected] = React.useState<Selection>(new Set());

  return (
    <ListBox
      aria-label="Pick an animal"
      items={options}
      selectedKeys={selected}
      selectionMode="single"
      onSelectionChange={setSelected}>
      {section => (
        <ListBoxSection id={section.name}>
          <Header>{section.name}</Header>
          <Collection items={section.children}>
            {item => <ListBoxItem>{item.name}</ListBoxItem>}
          </Collection>
        </ListBoxSection>
      )}
    </ListBox>
  );
}

----------------------------------------

TITLE: Implementing Form Validation with Radio Groups in React Spectrum
DESCRIPTION: This example demonstrates how to implement form validation with RadioGroup using the isRequired and validationBehavior props. The native validation behavior will block form submission until a value is selected.

LANGUAGE: tsx
CODE:
<form>
  <RadioGroup label="Favorite pet" name="pet" isRequired validationBehavior="native">
    <Radio value="dogs">Dog</Radio>
    <Radio value="cats">Cat</Radio>
    <Radio value="dragon">Dragon</Radio>
  </RadioGroup>
  <input type="submit" style={{marginTop: 8}} />
</form>

----------------------------------------

TITLE: Complex Item Rendering in ListView
DESCRIPTION: Advanced ListView example showing complex item layouts with illustrations, descriptions, and action menus. Demonstrates how to use slots for descriptions and various interactive elements within items.

LANGUAGE: tsx
CODE:
import File from '@spectrum-icons/illustrations/File';
import Folder from '@spectrum-icons/illustrations/Folder';

<ListView selectionMode="multiple" maxWidth="size-6000" aria-label="ListView example with complex items" onAction={key => alert(`Triggering action on item ${key}`)}>
  <Item key="1" textValue="Utilities" hasChildItems>
    <Folder />
    <Text>Utilities</Text>
    <Text slot="description">16 items</Text>
    <ActionMenu>
      <Item key="edit" textValue="Edit">
        <Edit />
        <Text>Edit</Text>
      </Item>
      <Item key="delete" textValue="Delete">
        <Delete />
        <Text>Delete</Text>
      </Item>
    </ActionMenu>
  </Item>
  <Item key="2" textValue="Glasses Dog">
    <Image
      src="https://random.dog/1a0535a6-ca89-4059-9b3a-04a554c0587b.jpg"
      alt="Shiba Inu with glasses" />
    <Text>Glasses Dog</Text>
    <Text slot="description">JPG</Text>
    <ActionMenu>
      <Item key="edit" textValue="Edit">
        <Edit />
        <Text>Edit</Text>
      </Item>
      <Item key="delete" textValue="Delete">
        <Delete />
        <Text>Delete</Text>
      </Item>
    </ActionMenu>
  </Item>
  <Item key="3" textValue="readme">
    <File />
    <Text>readme.txt</Text>
    <Text slot="description">TXT</Text>
    <ActionMenu>
      <Item key="edit" textValue="Edit">
        <Edit />
        <Text>Edit</Text>
      </Item>
      <Item key="delete" textValue="Delete">
        <Delete />
        <Text>Delete</Text>
      </Item>
    </ActionMenu>
  </Item>
  <Item key="4" textValue="Onboarding">
    <File />
    <Text>Onboarding</Text>
    <Text slot="description">PDF</Text>
    <ActionMenu>
      <Item key="edit" textValue="Edit">
        <Edit />
        <Text>Edit</Text>
      </Item>
      <Item key="delete" textValue="Delete">
        <Delete />
        <Text>Delete</Text>
      </Item>
    </ActionMenu>
  </Item>
</ListView>

----------------------------------------

TITLE: Modal DialogTrigger Example in React Spectrum
DESCRIPTION: Shows how to create a modal dialog that blocks the UI until dismissed, implementing a confirmation dialog for unlinking an email from a user profile.

LANGUAGE: tsx
CODE:
<DialogTrigger type="modal">
  <ActionButton>Unlink</ActionButton>
  {(close) => (
    <Dialog>
      <Heading>Unlinking email</Heading>
      <Divider />
      <Content>
        <Text>
          This will unlink your email from your profile "TestUser". Are you sure?
        </Text>
      </Content>
      <ButtonGroup>
        <Button variant="secondary" onPress={close}>Cancel</Button>
        <Button variant="accent" onPress={close} autoFocus>Confirm</Button>
      </ButtonGroup>
    </Dialog>
  )}
</DialogTrigger>

----------------------------------------

TITLE: Setting Custom First Day of Week in React Spectrum Calendar
DESCRIPTION: This example shows how to customize which day of the week appears first in the Calendar component by setting the firstDayOfWeek prop to 'mon' (Monday) instead of using the locale default.

LANGUAGE: tsx
CODE:
<div style={{maxWidth: '100%', overflow: 'auto'}}>
  <Calendar aria-label="Event date" firstDayOfWeek="mon" />
</div>

----------------------------------------

TITLE: Implementing a Droppable ListBox with React Aria
DESCRIPTION: This example demonstrates how to implement a ListBox that supports drag and drop functionality using React Aria hooks. It combines useListBox with useDroppableCollection, allowing items to be dropped onto the collection or individual items.

LANGUAGE: tsx
CODE:
import {useListBox, useOption} from '@react-aria/listbox';
import {useListState} from '@react-stately/list';
import {Item} from '@react-stately/collections';
import {useFocusRing} from '@react-aria/focus';
import {mergeProps} from '@react-aria/utils';
import {useDroppableCollectionState} from '@react-stately/dnd';
import {useDroppableCollection, useDroppableItem, ListDropTargetDelegate} from '@react-aria/dnd';
import {ListKeyboardDelegate} from '@react-aria/selection';

function ListBox(props) {
  // Setup listbox as normal. See the useListBox docs for more details.
  let state = useListState(props);
  let ref = React.useRef(null);
  let {listBoxProps} = useListBox(props, state, ref);

  // Setup react-stately and react-aria hooks for drag and drop.
  let dropState = useDroppableCollectionState({
    ...props,
    // Collection and selection manager come from list state.
    collection: state.collection,
    selectionManager: state.selectionManager
  });

  let {collectionProps} = useDroppableCollection({
    ...props,
    // Provide drop targets for keyboard and pointer-based drag and drop.
    keyboardDelegate: new ListKeyboardDelegate(state.collection, state.disabledKeys, ref),
    dropTargetDelegate: new ListDropTargetDelegate(state.collection, ref)
  }, dropState, ref);

  // Merge listbox props and dnd props, and render the items as normal.
  return (
    <ul {...mergeProps(listBoxProps, collectionProps)} ref={ref}>
      {[...state.collection].map((item) => (
        <Option
          key={item.key}
          item={item}
          state={state}
          dropState={dropState}
        />
      ))}
    </ul>
  );
}

function Option({ item, state, dropState }) {
  // Setup listbox option as normal. See useListBox docs for details.
  let ref = React.useRef(null);
  let {optionProps} = useOption({key: item.key}, state, ref);
  let {isFocusVisible, focusProps} = useFocusRing();

  // Register the item as a drop target.
  let {dropProps, isDropTarget} = useDroppableItem({
    target: {type: 'item', key: item.key, dropPosition: 'on'}
  }, dropState, ref);

  // Merge option props and dnd props, and render the item.
  return (
    <li
      {...mergeProps(optionProps, dropProps, focusProps)}
      ref={ref}
      // Apply a class when the item is the active drop target.
      className={`option ${isFocusVisible ? 'focus-visible' : ''} ${isDropTarget ? 'drop-target' : ''}`}
    >
      {item.rendered}
    </li>
  );
}

<Draggable>Octopus</Draggable>
<ListBox aria-label="Categories" selectionMode="single" onItemDrop={e => alert(`Dropped on ${e.target.key}`)}>
  <Item key="animals">Animals</Item>
  <Item key="people">People</Item>
  <Item key="plants">Plants</Item>
</ListBox>

----------------------------------------

TITLE: Configuring DateRangePicker Granularity in React
DESCRIPTION: This example shows how to configure different granularity settings for DateRangePicker components that share the same state, allowing one to display seconds while another only shows dates.

LANGUAGE: tsx
CODE:
function Example() {
  let [date, setDate] = React.useState({
    start: parseAbsoluteToLocal('2021-04-07T18:45:22Z'),
    end: parseAbsoluteToLocal('2021-04-08T20:00:00Z')
  });

  return (
    <>
      <MyDateRangePicker
        label="Date and time range"
        /*- begin highlight -*/
        granularity="second"
        /*- end highlight -*/
        value={date}
        onChange={setDate} />
      <MyDateRangePicker
        label="Date range"
        /*- begin highlight -*/
        granularity="day"
        /*- end highlight -*/
        value={date}
        onChange={setDate} />
    </>
  );
}

----------------------------------------

TITLE: Page Metadata in Markdown
DESCRIPTION: Defines the page title metadata using Markdown frontmatter syntax, which sets the title for the 404 page.

LANGUAGE: markdown
CODE:
---
title: Page not found
---

----------------------------------------

TITLE: Implementing Empty State in React Spectrum Table
DESCRIPTION: Example showing how to customize the empty state display in a Table when no items are available, using the renderEmptyState prop on TableBody.

LANGUAGE: tsx
CODE:
<Table aria-label="Search results">
  <TableHeader>
    <Column isRowHeader>Name</Column>
    <Column>Type</Column>
    <Column>Date Modified</Column>
  </TableHeader>
  {/*- begin highlight -*/}
  <TableBody renderEmptyState={() => 'No results found.'}>
  {/*- end highlight -*/}
    {[]}
  </TableBody>
</Table>

----------------------------------------

TITLE: Importing the LabeledValue Package in React Spectrum
DESCRIPTION: The package name reference for the LabeledValue component in React Spectrum. This component is part of the React Spectrum library maintained by Adobe.

LANGUAGE: markdown
CODE:
@react-spectrum/labeledvalue

----------------------------------------

TITLE: SearchAutocomplete with Static Sections
DESCRIPTION: Example showing how to organize SearchAutocomplete items into sections using the Section component with static items for fruits and vegetables.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Preferred fruit or vegetable">
  <Section title="Fruit">
    <Item key="Apple">Apple</Item>
    <Item key="Banana">Banana</Item>
    <Item key="Orange">Orange</Item>
    <Item key="Honeydew">Honeydew</Item>
    <Item key="Grapes">Grapes</Item>
    <Item key="Watermelon">Watermelon</Item>
    <Item key="Cantaloupe">Cantaloupe</Item>
    <Item key="Pear">Pear</Item>
  </Section>
  <Section title="Vegetable">
    <Item key="Cabbage">Cabbage</Item>
    <Item key="Broccoli">Broccoli</Item>
    <Item key="Carrots">Carrots</Item>
    <Item key="Lettuce">Lettuce</Item>
    <Item key="Spinach">Spinach</Item>
    <Item key="Bok Choy">Bok Choy</Item>
    <Item key="Cauliflower">Cauliflower</Item>
    <Item key="Potatoes">Potatoes</Item>
  </Section>
</SearchAutocomplete>

----------------------------------------

TITLE: Implementing Custom Menu Trigger with Pressable Component
DESCRIPTION: Example showing how to create a custom menu trigger using the Pressable component to wrap any element or third-party component.

LANGUAGE: tsx
CODE:
import {Pressable} from 'react-aria-components';

<MenuTrigger>
  <Pressable>
    <span role="button">Custom trigger</span>
  </Pressable>
  <Popover>
    <Menu>
      <MenuItem>Open</MenuItem>
      <MenuItem>Rename…</MenuItem>
      <MenuItem>Duplicate</MenuItem>
      <MenuItem>Delete…</MenuItem>
    </Menu>
  </Popover>
</MenuTrigger>

----------------------------------------

TITLE: Creating Dynamic Tabs with Collection Component
DESCRIPTION: Example demonstrating dynamic tabs that can be added or removed at runtime. Uses the items prop and Collection component to generate tabs from a dynamic data source, with each item having an id property for selection tracking.

LANGUAGE: tsx
CODE:
import {Collection, Button} from 'react-aria-components';

function Example() {
  let [tabs, setTabs] = React.useState([
    {id: 1, title: 'Tab 1', content: 'Tab body 1'},
    {id: 2, title: 'Tab 2', content: 'Tab body 2'},
    {id: 3, title: 'Tab 3', content: 'Tab body 3'}
  ]);

  let addTab = () => {
    setTabs(tabs => [
      ...tabs,
      {
        id: tabs.length + 1,
        title: `Tab ${tabs.length + 1}`,
        content: `Tab body ${tabs.length + 1}`
      }
    ]);
  };

  let removeTab = () => {
    if (tabs.length > 1) {
      setTabs(tabs => tabs.slice(0, -1));
    }
  };

  return (
    <Tabs>
      <div style={{display: 'flex'}}>
        <TabList aria-label="Dynamic tabs" items={tabs} style={{flex: 1}}>
          {item => <Tab>{item.title}</Tab>}
        </TabList>
        <div className="button-group">
          <Button onPress={addTab}>Add tab</Button>
          <Button onPress={removeTab}>Remove tab</Button>
        </div>
      </div>
      <Collection items={tabs}>
        {item => <TabPanel>{item.content}</TabPanel>}
      </Collection>
    </Tabs>
  );
}

----------------------------------------

TITLE: Creating Static Submenus with SubmenuTrigger
DESCRIPTION: Example showing how to create nested submenus using SubmenuTrigger component with statically defined menu items.

LANGUAGE: tsx
CODE:
import {Menu, Popover, SubmenuTrigger} from 'react-aria-components';

<MyMenuButton label="Actions">
  <MyItem>Cut</MyItem>
  <MyItem>Copy</MyItem>
  <MyItem>Delete</MyItem>
  <SubmenuTrigger>
    <MyItem>Share</MyItem>
    <Popover>
      <Menu>
        <MyItem>SMS</MyItem>
        <MyItem>X</MyItem>
        <SubmenuTrigger>
          <MyItem>Email</MyItem>
          <Popover>
            <Menu>
              <MyItem>Work</MyItem>
              <MyItem>Personal</MyItem>
            </Menu>
          </Popover>
        </SubmenuTrigger>
      </Menu>
    </Popover>
  </SubmenuTrigger>
</MyMenuButton>

----------------------------------------

TITLE: Creating a Reusable NumberField Wrapper Component
DESCRIPTION: Example of creating a reusable NumberField wrapper component that encapsulates the DOM structure, styling, and logic. This custom component accepts a label prop and supports description text and validation error messages.

LANGUAGE: tsx
CODE:
import type {NumberFieldProps, ValidationResult} from 'react-aria-components';
import {Text, FieldError} from 'react-aria-components';

interface MyNumberFieldProps extends NumberFieldProps {
  label?: string,
  description?: string,
  errorMessage?: string | ((validation: ValidationResult) => string)
}

function MyNumberField({label, description, errorMessage, ...props}: MyNumberFieldProps) {
  return (
    <NumberField {...props}>
      <Label>{label}</Label>
      <Group>
        <Button slot="decrement">-</Button>
        <Input />
        <Button slot="increment">+</Button>
      </Group>
      {description && <Text slot="description">{description}</Text>}
      <FieldError>{errorMessage}</FieldError>
    </NumberField>
  );
}

<MyNumberField label="Cookies" />

----------------------------------------

TITLE: Styling Drop Indicators for Reorderable Collections
DESCRIPTION: CSS styles for the drop indicators in a reorderable collection. It defines the appearance of drop indicators, including their size, positioning, and a visual highlight when they are active drop targets.

LANGUAGE: css
CODE:
.drop-indicator {
  width: 100%;
  margin-left: 0;
  height: 2px;
  margin-bottom: -2px;
  outline: none;
  background: transparent;
}

.drop-indicator:last-child {
  margin-bottom: 0;
  margin-top: -2px;
}

.drop-indicator.drop-target {
  background: var(--blue);
}

----------------------------------------

TITLE: Tooltip Interaction with Delay
DESCRIPTION: Demonstration of tooltip delay behavior where the first tooltip appears after a delay but subsequent tooltips appear immediately if hovered quickly. This is achieved using a global timer shared by all tooltips.

LANGUAGE: tsx
CODE:
<div style={{display: 'flex', gap: 8}}>
  <TooltipTrigger>
    <Button>Hover me</Button>
    <MyTooltip>I come up after a delay.</MyTooltip>
  </TooltipTrigger>
  <TooltipTrigger>
    <Button>Then hover me</Button>
    <MyTooltip>If you did it quickly, I appear immediately.</MyTooltip>
  </TooltipTrigger>
</div>

----------------------------------------

TITLE: Blog Post Metadata Definition with YAML Frontmatter
DESCRIPTION: This YAML frontmatter defines metadata for the blog post, including a description of the release and the publication date.

LANGUAGE: yaml
CODE:
---
description: In this release, we have added support for Node ESM to all of our packages. We have also been busy at work on our pre-releases and improving our focus management in collections.
date: 2023-02-23
---

----------------------------------------

TITLE: Implementing Tabs with Focusable Content in React Aria Components
DESCRIPTION: Example showing how to implement tabs where some panels contain focusable content like form inputs. When a tab panel contains focusable content, the tabIndex is omitted since the content itself can receive focus.

LANGUAGE: tsx
CODE:
<Tabs>
  <TabList aria-label="Notes app">
    <Tab id="1">Jane Doe</Tab>
    <Tab id="2">John Doe</Tab>
    <Tab id="3">Joe Bloggs</Tab>
  </TabList>
  <TabPanel id="1">
    <label>Leave a note for Jane: <input type="text" /></label>
  </TabPanel>
  <TabPanel id="2">Senatus Populusque Romanus.</TabPanel>
  <TabPanel id="3">Alea jacta est.</TabPanel>
</Tabs>

----------------------------------------

TITLE: Using Text Slots in React ListBox for Accessibility
DESCRIPTION: This example demonstrates how to use the Text component with 'label' and 'description' slots to improve screen reader announcements and provide styling hooks. The textValue prop ensures proper accessibility labeling.

LANGUAGE: tsx
CODE:
import {Text} from 'react-aria-components';

<ListBox aria-label="Permissions" selectionMode="single">
  <ListBoxItem textValue="Read">
    <Text slot="label">Read</Text>
    <Text slot="description">Read only</Text>
  </ListBoxItem>
  <ListBoxItem textValue="Write">
    <Text slot="label">Write</Text>
    <Text slot="description">Read and write only</Text>
  </ListBoxItem>
  <ListBoxItem textValue="Admin">
    <Text slot="label">Admin</Text>
    <Text slot="description">Full access</Text>
  </ListBoxItem>
</ListBox>

----------------------------------------

TITLE: Implementing ResizableTableColumnHeader Component with TypeScript and React Aria
DESCRIPTION: A React component that renders a table column header with resizing capability. It uses the useTableColumnHeader hook and applies the computed width from the layout state. The component includes a Button for the header title and a Resizer element for columns that allow resizing.

LANGUAGE: tsx
CODE:
// Reuse the Button from your component library. See below for details.
import {Button} from 'your-component-library';

function ResizableTableColumnHeader({column, state, layoutState, onResizeStart, onResize, onResizeEnd}) {
  let allowsResizing = column.props.allowsResizing;
  let ref = useRef<HTMLTableCellElement | null>(null);
  let {columnHeaderProps} = useTableColumnHeader({node: column}, state, ref);

  return (
    <th
      {...columnHeaderProps}
      className="aria-table-headerCell"
      style={{width: layoutState.getColumnWidth(column.key)}}
      ref={ref}>
      <div style={{display: 'flex', position: 'relative'}}>
        <Button className="aria-table-headerTitle">
          {column.rendered}
        </Button>
        {allowsResizing &&
          <Resizer column={column} layoutState={layoutState} onResizeStart={onResizeStart} onResize={onResize} onResizeEnd={onResizeEnd} />
        }
      </div>
    </th>
  );
}

----------------------------------------

TITLE: Creating a Vertical Slider in React
DESCRIPTION: Example of configuring a vertical slider by setting the orientation prop to 'vertical'. This slider has no visible label, using aria-label for accessibility, and accepts decimal values with a step of 0.01.

LANGUAGE: tsx
CODE:
<MySlider
  orientation="vertical"
  aria-label="Opacity"
  maxValue={1}
  step={0.01} />

----------------------------------------

TITLE: Basic ComboBox Implementation with Static Options
DESCRIPTION: Simple example of ComboBox usage with static Item elements as children, each with a unique key. This demonstrates the basic pattern for creating a dropdown selection list.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Implementing Custom Date Validation in React Spectrum DatePicker
DESCRIPTION: Example showing how to validate that the selected date is a weekday using the validate function. The function checks if the date falls on a weekend according to the current locale and returns an error message if true.

LANGUAGE: tsx
CODE:
import {isWeekend} from '@internationalized/date';
import {useLocale} from '@adobe/react-spectrum';

function Example() {
  let {locale} = useLocale();

  return (
    <Form validationBehavior="native" maxWidth="size-3000">
      <DatePicker
        label="Appointment date"
        /*- begin highlight -*/
        validate={date => date && isWeekend(date, locale) ? 'We are closed on weekends.' : null}
        /*- end highlight -*/
        defaultValue={parseDate('2023-10-28')} />
      <ButtonGroup>
        <Button type="submit" variant="primary">Submit</Button>
        <Button type="reset" variant="secondary">Reset</Button>
      </ButtonGroup>
    </Form>
  );
}

----------------------------------------

TITLE: Styling a NumberField with CSS
DESCRIPTION: CSS styling for the NumberField component, including layout, focus states, and button appearance. The styling provides a cohesive look for the number field's various parts including input and increment/decrement buttons.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-NumberField {
  margin-bottom: 8px;
  color: var(--text-color);

  .react-aria-Group {
    display: flex;
    width: fit-content;
    border-radius: 4px;

    &[data-focus-within] {
      outline: 1px solid var(--focus-ring-color);
      .react-aria-Input,
      .react-aria-Button {
        border-color: var(--focus-ring-color);
      }
    }
  }

  .react-aria-Button {
    font-size: 1.4rem;
    width: 2.3rem;
    padding: 0;

    &[slot=decrement] {
      border-start-end-radius: 0;
      border-end-end-radius: 0;
    }

    &[slot=increment] {
      border-start-start-radius: 0;
      border-end-start-radius: 0;
    }
  }

  .react-aria-Input {
    background: var(--field-background);
    border: 1px solid var(--border-color);
    border-radius: 0;
    color: var(--field-text-color);
    margin: 0 -1px;
    z-index: 1;
    font-size: 1rem;
    padding: 0.429rem 0.571rem;
    outline: none;
    width: 6rem;
    flex: 1;
  }
}

----------------------------------------

TITLE: Importing DateFormatter Layout Component in React Spectrum
DESCRIPTION: Sets up the page layout by importing the Layout component from React Spectrum docs and exporting it as the default component.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Implementing useDropIndicator Hook for Insertion Indicators in TypeScript
DESCRIPTION: This hook works with useDroppableCollection to provide props for an insertion indicator between items in a collection. It includes accessibility features like labels identifying elements and descriptions for drop operations.

LANGUAGE: typescript
CODE:
interface DropIndicatorProps {
  /** The drop target represented by the drop indicator. */
  target: DropTarget
}

interface DropIndicatorAria {
  /** Props for the drop indicator element. */
  dropIndicatorProps: HTMLAttributes<HTMLElement>
}

declare function useInsertionIndicator(props: InsertionIndicatorProps, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DropIndicatorAria;

----------------------------------------

TITLE: Implementing useFocusRing with a Button in React Aria
DESCRIPTION: Example showing how to use the useFocusRing hook to conditionally display an outline focus indicator for a button when keyboard focus is active. The hook returns isFocusVisible and focusProps which are applied to manage focus state.

LANGUAGE: tsx
CODE:
import {useFocusRing} from '@react-aria/focus';

function Example() {
  let {isFocusVisible, focusProps} = useFocusRing();

  return (
    <button
      {...focusProps}
      style={{
        WebkitAppearance: 'none',
        appearance: 'none',
        background: 'green',
        border: 'none',
        color: 'white',
        fontSize: 14,
        padding: '4px 8px',
        outline: isFocusVisible ? '2px solid dodgerblue' : 'none',
        outlineOffset: 2
      }}>
      Test
    </button>
  );
}

----------------------------------------

TITLE: Implementing Form Validation with DateField Component
DESCRIPTION: Example showing how to implement validation in a DateField component using Form, FieldError, and Button components from react-aria-components.

LANGUAGE: tsx
CODE:
import {Form, FieldError, Button} from 'react-aria-components';

<Form>
  <DateField name="date" isRequired>
    <Label>Appointment date</Label>
    <DateInput>
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <FieldError />
  </DateField>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Basic ColorSwatchPicker Implementation in React
DESCRIPTION: A simple example of implementing a ColorSwatchPicker component with multiple color options. This shows the basic structure with ColorSwatchPickerItem and ColorSwatch components.

LANGUAGE: tsx
CODE:
import {ColorSwatchPicker, ColorSwatchPickerItem, ColorSwatch} from 'react-aria-components';

<ColorSwatchPicker>
  <ColorSwatchPickerItem color="#A00"><ColorSwatch /></ColorSwatchPickerItem>
  <ColorSwatchPickerItem color="#f80"><ColorSwatch /></ColorSwatchPickerItem>
  <ColorSwatchPickerItem color="#080"><ColorSwatch /></ColorSwatchPickerItem>
  <ColorSwatchPickerItem color="#08f"><ColorSwatch /></ColorSwatchPickerItem>
  <ColorSwatchPickerItem color="#088"><ColorSwatch /></ColorSwatchPickerItem>
  <ColorSwatchPickerItem color="#008"><ColorSwatch /></ColorSwatchPickerItem>
</ColorSwatchPicker>

----------------------------------------

TITLE: Creating a Basic Drop Target with React Aria
DESCRIPTION: A code example showing how to implement a simple drop target that accepts plain text data with keyboard accessibility support.

LANGUAGE: TSX
CODE:
import type {TextDropItem} from '@react-aria/dnd';
import {useDrop} from '@react-aria/dnd';

function DropTarget() {
  let [dropped, setDropped] = React.useState(null);
  let ref = React.useRef(null);
  let {dropProps, isDropTarget} = useDrop({
    ref,
    async onDrop(e) {
      let items = await Promise.all(
        e.items
          .filter(item => item.kind === 'text' && item.types.has('text/plain'))
          .map((item: TextDropItem) => item.getText('text/plain'))
      );
      setDropped(items.join('\n'));
    }
  });

  return (
    <div {...dropProps} role="button" tabIndex={0} ref={ref} className={`droppable ${isDropTarget ? 'target' : ''}`}>
      {dropped || 'Drop here'}
    </div>
  );
}

<Draggable />
<DropTarget />

----------------------------------------

TITLE: Demonstrating Tooltip Warmup and Cooldown Behavior
DESCRIPTION: Example showing the warmup and cooldown behavior between multiple tooltips, where subsequent tooltips appear faster when hovering between elements.

LANGUAGE: tsx
CODE:
<Flex gap="size-200">
  <TooltipTrigger>
    <ActionButton>Hover me</ActionButton>
    <Tooltip>I come up after a delay.</Tooltip>
  </TooltipTrigger>
  <TooltipTrigger>
    <ActionButton>Then hover me</ActionButton>
    <Tooltip>If you did it quickly, I appear immediately.</Tooltip>
  </TooltipTrigger>
</Flex>

----------------------------------------

TITLE: Creating a Composite Calendar Component with Context
DESCRIPTION: Example showing how to use RangeCalendarContext to create a composite component that combines a calendar with preset date buttons, demonstrating advanced component composition.

LANGUAGE: tsx
CODE:
import {RangeCalendarContext, useSlottedContext} from 'react-aria-components';

function CalendarPicker({children}) {
  let [value, onChange] = React.useState(null);
  let [focusedValue, onFocusChange] = React.useState(null);

  return (
    /*- begin highlight -*/
    <RangeCalendarContext.Provider value={{value, onChange, focusedValue, onFocusChange}}>
    {/*- end highlight -*/}
      <div className="calendar-picker">
        {children}
      </div>
    </RangeCalendarContext.Provider>
  );
}

interface PresetProps {
  value: {start: CalendarDate, end: CalendarDate},
  children: React.ReactNode
}

function Preset({value, children}: PresetProps) {
  /*- begin highlight -*/
  let context = useSlottedContext(RangeCalendarContext)!;
  /*- end highlight -*/
  let onPress = () => {
    context.onFocusChange(value.start);
    context.onChange(value);
  };

  return (
    <Button onPress={onPress}>{children}</Button>
  );
}

----------------------------------------

TITLE: Implementing Resizable Columns in TableView with Width Constraints
DESCRIPTION: This example shows how to create resizable columns using the allowsResizing prop along with size constraints. It illustrates how different width props (width, maxWidth, minWidth) affect column resize behavior.

LANGUAGE: tsx
CODE:
<TableView
  aria-label="TableView with resizable columns"
  maxWidth={320}
  height={210} >
  <TableHeader>
    <Column key="file" allowsResizing maxWidth={500}>File Name</Column>
    <Column key="size" width={80}>Size</Column>
    <Column key="date" allowsResizing minWidth={100}>Date Modified</Column>
  </TableHeader>
  <TableBody>
    <Row>
      <Cell>2022-Roadmap-Proposal-Revision-012822-Copy(2)</Cell>
      <Cell>214 KB</Cell>
      <Cell>November 27, 2022 at 4:56PM</Cell>
    </Row>
    <Row>
      <Cell>62259692_p0_master1200</Cell>
      <Cell>120 KB</Cell>
      <Cell>January 27, 2021 at 1:56AM</Cell>
    </Row>
    <Row>
      <Cell colSpan={3}>Total space: 334 KB</Cell>
    </Row>
  </TableBody>
</TableView>

----------------------------------------

TITLE: Dialog Triggered by Menu Item with useDialogContainer
DESCRIPTION: Implementation of dialogs triggered by menu items using DialogContainer. Shows how to use the useDialogContainer hook to allow dialogs to dismiss themselves and handle menu-triggered dialogs.

LANGUAGE: tsx
CODE:
import {useDialogContainer} from '@react-spectrum/dialog';

function Example() {
  let [dialog, setDialog] = React.useState(null);

  return (
    <>
      <MenuTrigger>
        <ActionButton aria-label="Actions"><More /></ActionButton>
        <Menu onAction={setDialog}>
          <Item key="edit">Edit...</Item>
          <Item key="delete">Delete...</Item>
        </Menu>
      </MenuTrigger>
      <DialogContainer onDismiss={() => setDialog(null)}>
        {dialog === 'edit' &&
          <EditDialog />
        }
        {dialog === 'delete' &&
          <AlertDialog
            title="Delete"
            variant="destructive"
            primaryActionLabel="Delete">
            Are you sure you want to delete this item?
          </AlertDialog>
        }
      </DialogContainer>
    </>
  );
}

function EditDialog() {
  // This hook allows us to dismiss the dialog when the user
  // presses one of the buttons (below).
  let dialog = useDialogContainer();

  return (
    <Dialog>
      <Heading>Edit</Heading>
      <Divider />
      <Content>
        <Form labelPosition="side" width="100%">
          <TextField autoFocus label="First Name" defaultValue="John" />
          <TextField label="Last Name" defaultValue="Smith" />
        </Form>
      </Content>
      <ButtonGroup>
        <Button variant="secondary" onPress={dialog.dismiss}>Cancel</Button>
        <Button variant="accent" onPress={dialog.dismiss}>Save</Button>
      </ButtonGroup>
    </Dialog>
  );
}

----------------------------------------

TITLE: Creating a Dynamic File Tree with Custom Content
DESCRIPTION: Demonstrates how to build a tree component that renders data from an external source using a render function pattern, supporting dynamic content updates.

LANGUAGE: tsx
CODE:
import type {TreeProps} from 'react-aria-components';
import {MyCheckbox} from './Checkbox';

let items = [
  {id: 1, title: 'Documents', children: [
    {id: 2, title: 'Project', children: [
      {id: 3, title: 'Weekly Report', children: []}
    ]}
  ]},
  {id: 4, title: 'Photos', children: [
    {id: 5, title: 'Image 1', children: []},
    {id: 6, title: 'Image 2', children: []}
  ]}
];

interface FileType {
  id: number,
  title: string,
  children: FileType[]
}

function FileTree(props: TreeProps<FileType>) {
  return (
    <Tree
      aria-label="Files"
      defaultExpandedKeys={[1, 4]}
      items={items}
      selectionMode="multiple"
      {...props}>
      {function renderItem(item) {
        return (
          <TreeItem textValue={item.title}>
            <MyTreeItemContent>
              {item.title}
              <Button
                aria-label="Info"
                onPress={() => alert(`Info for ${item.title}...`)}>
                ⓘ
              </Button>
            </MyTreeItemContent>
            <Collection items={item.children}>
              {/* recursively render children */}
              {renderItem}
            </Collection>
          </TreeItem>
        );
      }}
    </Tree>
  )
}

----------------------------------------

TITLE: Creating Disabled Rows in React Spectrum Table
DESCRIPTION: This example demonstrates how to disable individual rows in a table using the isDisabled prop. The disabled row is unselectable while other rows remain interactive.

LANGUAGE: tsx
CODE:
<Table aria-label="Table with disabled rows" selectionMode="multiple">
  <MyTableHeader>
    <Column isRowHeader>Name</Column>
    <Column>Type</Column>
    <Column>Level</Column>
  </MyTableHeader>
  <TableBody>
    <MyRow>
      <Cell>Charizard</Cell>
      <Cell>Fire, Flying</Cell>
      <Cell>67</Cell>
    </MyRow>
    <MyRow isDisabled>
      <Cell>Venusaur</Cell>
      <Cell>Grass, Poison</Cell>
      <Cell>83</Cell>
    </MyRow>
    <MyRow>
      <Cell>Pikachu</Cell>
      <Cell>Electric</Cell>
      <Cell>100</Cell>
    </MyRow>
  </TableBody>
</Table>

----------------------------------------

TITLE: Implementing a Custom 4-5-4 Calendar System for DatePicker in React Spectrum
DESCRIPTION: Example implementation of a custom 4-5-4 calendar system that extends the GregorianCalendar. This allows DatePicker to display dates according to a fiscal year format where months don't follow standard Gregorian calendar patterns.

LANGUAGE: tsx
CODE:
import {GregorianCalendar} from '@internationalized/date';

function Example() {
  return <DatePicker createCalendar={() => new Custom454()} />;
}

class Custom454 extends GregorianCalendar {
  // See @internationalized/date docs linked above...
  ///- begin collapse -///
  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];
  getDaysInMonth(date) {
    return this.weekPattern[date.month - 1] * 7;
  }

  fromJulianDay(jd: number): CalendarDate {
    let gregorian = super.fromJulianDay(jd);

    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');
    for (let months = 0; months < this.weekPattern.length; months++) {
      let weeksInMonth = this.weekPattern[months];
      let monthEnd = monthStart.add({weeks: weeksInMonth});
      if (monthEnd.compare(gregorian) > 0) {
        let days = gregorian.compare(monthStart);
        return new CalendarDate(this, monthStart.year, months + 1, days + 1);
      }
      monthStart = monthEnd;
    }

    throw Error('Date is not in any month somehow!');
  }

  toJulianDay(date: AnyCalendarDate): number {
    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');
    for (let month = 1; month < date.month; month++) {
      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});
    }

    let gregorian = monthStart.add({days: date.day - 1});
    return super.toJulianDay(gregorian);
  }

  getFormattableMonth(date) {
    let gregorian = toCalendar(date, new GregorianCalendar());
    return gregorian.set({month: date.month, day: 1});
  }

  isEqual(other) {
    return other instanceof Custom454;
  }
 ///- end collapse -///
}

----------------------------------------

TITLE: Hiding Time Zone in TimeField with ZonedDateTime
DESCRIPTION: Shows how to hide the time zone abbreviation when using a ZonedDateTime object as the value in a TimeField component.

LANGUAGE: tsx
CODE:
<MyTimeField
  label="Appointment time"
  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}
  hideTimeZone />

----------------------------------------

TITLE: Styling ComboBox Clear Button with CSS
DESCRIPTION: CSS styles for the ComboBox clear button that define its appearance, including size, color, hover and focus states, and positioning relative to other elements in the ComboBox.

LANGUAGE: css
CODE:
.clear-button {
  width: 1.143rem;
  height: 1.143rem;
  border-radius: 1.143rem;
  margin-left: -3.143rem;
  font-size: 0.857rem;
  line-height: 0.857rem;
  vertical-align: middle;
  text-align: center;
  background: gray;
  color: white;
  border: none;
  padding: 0;
  outline: none;

  &[data-pressed] {
    background: dimgray;
  }

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: 2px;
  }

  + .react-aria-Button {
    margin-left: 4px;
  }
}

----------------------------------------

TITLE: Dynamic Styling with Render Props in React Aria Components
DESCRIPTION: Using render props with the className property to dynamically apply styling based on component state.

LANGUAGE: jsx
CODE:
<Button className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />

----------------------------------------

TITLE: Calendar with Unavailable Dates and Weekend Restrictions
DESCRIPTION: Implements a calendar with complex date availability rules using isDateUnavailable callback to mark specific date ranges and all weekends as unavailable for selection.

LANGUAGE: tsx
CODE:
import {today, isWeekend} from '@internationalized/date';
import {useLocale} from '@react-aria/i18n';

function Example() {
  let now = today(getLocalTimeZone());
  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  let {locale} = useLocale();
  let isDateUnavailable = (date: DateValue) => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);

  return <MyCalendar aria-label="Appointment date" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />
}

----------------------------------------

TITLE: Implementing a TimeField Component with React Aria Hooks
DESCRIPTION: This example demonstrates how to create a TimeField component using the useTimeFieldState and useTimeField hooks. It includes a DateSegment sub-component that renders individual time segments.

LANGUAGE: tsx
CODE:
import {useTimeFieldState} from '@react-stately/datepicker';
import {useTimeField, useDateSegment} from '@react-aria/datepicker';
import {useLocale} from '@react-aria/i18n';

export function TimeField(props) {
  let {locale} = useLocale();
  let state = useTimeFieldState({
    ...props,
    locale
  });

  let ref = React.useRef(null);
  let {labelProps, fieldProps} = useTimeField(props, state, ref);

  return (
    <div className="wrapper">
      <span {...labelProps}>{props.label}</span>
      <div {...fieldProps} ref={ref} className="field">
        {state.segments.map((segment, i) =>
          <DateSegment key={i} segment={segment} state={state} />
        )}
        {state.isInvalid &&
          <span aria-hidden="true">🚫</span>
        }
      </div>
    </div>
  );
}

// Note: this component is the same as in the useDateField docs.
function DateSegment({segment, state}) {
  let ref = React.useRef(null);
  let {segmentProps} = useDateSegment(segment, state, ref);

  return (
    <div
      {...segmentProps}
      ref={ref}
      className={`segment ${segment.isPlaceholder ? 'placeholder' : ''}`}>
      {segment.text}
    </div>
  );
}

<TimeField label="Event date" />

----------------------------------------

TITLE: Implementing Controlled Multiple Selection in a ListBox Component (TSX)
DESCRIPTION: Example showing how to implement controlled selection behavior in a static ListBox collection, using useState to manage selected keys and passing the selection state via props.

LANGUAGE: tsx
CODE:
let [selectedKeys, setSelectedKeys] = useState(new Set());

<ListBox selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>
  <ListBoxItem id="one">One</ListBoxItem>
  <ListBoxItem id="two">Two</ListBoxItem>
  <ListBoxItem id="three">Three</ListBoxItem>
</ListBox>

----------------------------------------

TITLE: Implementing Event Handling with Tabs in React Spectrum
DESCRIPTION: Example showing how to manage tab selection state using the onSelectionChange prop. This component displays different time periods and their descriptions, updating the selection based on user interaction.

LANGUAGE: tsx
CODE:
function Example() {
  let tabs = [
    {name: 'Triassic', children: 'The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.'},
    {name: 'Jurassic', children: 'The Jurassic ranges from 200 million years to 145 million years ago.'},
    {name: 'Cretaceous', children: 'The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.'}
  ];
  type Tab = typeof tabs[0];
  let [timePeriod, setTimePeriod] = React.useState<Key>('Triassic');

  return (
    <>
      <p>Selected time period: {timePeriod}</p>
      <Tabs aria-label="Mesozoic time periods" items={tabs} selectedKey={timePeriod} onSelectionChange={setTimePeriod}>
        <TabList>
          {(item: Tab) => (
            <Item key={item.name}>
              {item.name}
            </Item>
          )}
        </TabList>
        <TabPanels>
          {(item: Tab) => (
            <Item key={item.name}>
              {item.children}
            </Item>
          )}
        </TabPanels>
      </Tabs>
    </>
  );
}

----------------------------------------

TITLE: Importing Heading Component from React Spectrum
DESCRIPTION: Shows how to import the Heading component from the @react-spectrum/text package.

LANGUAGE: jsx
CODE:
import {Heading} from '@react-spectrum/text';

----------------------------------------

TITLE: Displaying Different Types of Toast Notifications
DESCRIPTION: Example showing how to display neutral, positive, negative, and info toast notifications using buttons.

LANGUAGE: tsx
CODE:
<ButtonGroup>
  <Button
    onPress={() => ToastQueue.neutral('Toast available')}
    variant="secondary">
    Show Neutral Toast
  </Button>
  <Button
    onPress={() => ToastQueue.positive('Toast is done!')}
    variant="primary">
    Show Positive Toast
  </Button>
  <Button
    onPress={() => ToastQueue.negative('Toast is burned!')}
    variant="negative">
    Show Negative Toast
  </Button>
  <Button
    onPress={() => ToastQueue.info('Toasting…')}
    variant="accent"
    style="outline">
    Show Info Toast
  </Button>
</ButtonGroup>

----------------------------------------

TITLE: Dynamic Class Names with State Functions in React Aria
DESCRIPTION: Illustrates how to use function-based className props to dynamically apply classes based on component states, useful for utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<Row className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>
  {/* ... */}
</Row>

----------------------------------------

TITLE: Implementing Column Resizer Component with useTableColumnResize Hook
DESCRIPTION: A Resizer component that provides column resizing functionality using the useTableColumnResize hook. It handles mouse drag, keyboard, and screen reader interactions for resizing table columns, with appropriate visual feedback for different states.

LANGUAGE: tsx
CODE:
import {useTableColumnResize} from '@react-aria/table';

function Resizer(props) {
  let {column, layoutState, onResizeStart, onResize, onResizeEnd} = props;
  let ref = useRef<HTMLInputElement | null>(null);
  let {resizerProps, inputProps, isResizing} = useTableColumnResize({
    column,
    'aria-label': 'Resizer',
    onResizeStart,
    onResize,
    onResizeEnd
  }, layoutState, ref);
  let {focusProps, isFocusVisible} = useFocusRing();

  return (
    <div
      role="presentation"
      className={`aria-table-resizer ${isFocusVisible ? 'focus' : ''} ${isResizing ? 'resizing' : ''}`}
      {...resizerProps}>
      <input
        ref={ref}
        {...mergeProps(inputProps, focusProps)} />
    </div>
  );
};

----------------------------------------

TITLE: Using the Selectable Component with Tree and ToggleButton in React
DESCRIPTION: This example shows how to use the custom Selectable component to control a Tree's selection mode with a ToggleButton. It combines both components as children of the Selectable wrapper.

LANGUAGE: tsx
CODE:
import {ToggleButton} from 'react-aria-components';

<Selectable>
  <ToggleButton>Select</ToggleButton>
  <PokemonEvolutionTree />
</Selectable>

----------------------------------------

TITLE: Using Custom Label Component in SearchField
DESCRIPTION: This example shows how to use a custom label component within a SearchField component. The MyCustomLabel component replaces the default Label component from React Aria Components while maintaining the same functionality through context integration.

LANGUAGE: tsx
CODE:
<SearchField>
  {/*- begin highlight -*/}
  <MyCustomLabel>Name</MyCustomLabel>
  {/*- end highlight -*/}
  <Input />
</SearchField>

----------------------------------------

TITLE: Creating ListBox with Complex Items and Icons
DESCRIPTION: Example showing how to create ListBox items with icons and descriptions. It demonstrates using the Section component for grouping items and adding descriptions with the slot="description" attribute.

LANGUAGE: tsx
CODE:
<ListBox width="size-2400" aria-label="Options" selectionMode="single">
  <Section title="Permission">
    <Item textValue="Read">
      <Book size="S" />
      <Text>Read</Text>
      <Text slot="description">Read Only</Text>
    </Item>
    <Item textValue="Write">
      <Draw size="S" />
      <Text>Write</Text>
      <Text slot="description">Read and Write Only</Text>
    </Item>
    <Item textValue="Admin">
      <BulkEditUsers size="S" />
      <Text>Admin</Text>
      <Text slot="description">Full access</Text>
    </Item>
  </Section>
</ListBox>

----------------------------------------

TITLE: Using disabledBehavior Property for Selection-Only Limitations
DESCRIPTION: Example of using the disabledBehavior="selection" setting to allow interactions like focus, dragging, or actions on disabled items while still preventing selection.

LANGUAGE: tsx
CODE:
<Tree
  aria-label="Tree with disabled items"
  style={{height: '100px'}}
  selectionMode="multiple"
  defaultExpandedKeys={['bulbasaur']}
  disabledBehavior="selection"
>
  <MyTreeItem id="bulbasaur" title="Bulbasaur">
    <MyTreeItem id="ivysaur" title="Ivysaur" isDisabled>
      <MyTreeItem id="venisaur" title="Venisaur" />
    </MyTreeItem>
  </MyTreeItem>
</Tree>

----------------------------------------

TITLE: 403 Forbidden Error IllustratedMessage Example
DESCRIPTION: Example showing how to display a 403 error message with the Unauthorized illustration to indicate access is not allowed.

LANGUAGE: tsx
CODE:
import Unauthorized from '@spectrum-icons/illustrations/Unauthorized';

<IllustratedMessage>
  <Unauthorized />
  <Heading>Error 403: Access not allowed</Heading>
  <Content>You do not have permission to access this page. Try checking the URL or visit a different page.</Content>
</IllustratedMessage>

----------------------------------------

TITLE: Creating a Custom DateSegment Wrapper Component in React Aria
DESCRIPTION: Example showing how to customize a DateSegment component by creating a wrapper component that passes along all props while adding a custom className.

LANGUAGE: tsx
CODE:
function MyDateSegment(props) {
  return <MyDateSegment {...props} className="my-date-segment" />
}

----------------------------------------

TITLE: RadioGroup with Default Value Implementation
DESCRIPTION: Example of using the defaultValue prop to set an initial, uncontrolled value for a RadioGroup component.

LANGUAGE: tsx
CODE:
<MyRadioGroup label="Are you a wizard?" defaultValue="yes">
  <Radio value="yes">Yes</Radio>
  <Radio value="no">No</Radio>
</MyRadioGroup>

----------------------------------------

TITLE: Implementing Selection with ComboBox in React Spectrum
DESCRIPTION: Example demonstrating how to use ComboBox with both controlled and uncontrolled selection using defaultSelectedKey and selectedKey props. Shows how to manage selection state with React useState.

LANGUAGE: tsx
CODE:
import type {Key} from '@adobe/react-spectrum';

function Example() {
  let options = [
    {id: 1, name: 'Adobe Photoshop'},
    {id: 2, name: 'Adobe XD'},
    {id: 3, name: 'Adobe InDesign'},
    {id: 4, name: 'Adobe AfterEffects'},
    {id: 5, name: 'Adobe Illustrator'},
    {id: 6, name: 'Adobe Lightroom'},
    {id: 7, name: 'Adobe Premiere Pro'},
    {id: 8, name: 'Adobe Fresco'},
    {id: 9, name: 'Adobe Dreamweaver'}
  ];
  let [productId, setProductId] = React.useState<Key>(9);

  return (
    <Flex gap="size-150" wrap>
      <ComboBox
        label="Pick an Adobe product (uncontrolled)"
        defaultItems={options}
        defaultSelectedKey={9}>
        {item => <Item>{item.name}</Item>}
      </ComboBox>

      <ComboBox
        label="Pick an Adobe product (controlled)"
        defaultItems={options}
        selectedKey={productId}
        onSelectionChange={selected => setProductId(selected)}>
        {item => <Item>{item.name}</Item>}
      </ComboBox>
    </Flex>
  );
}

----------------------------------------

TITLE: Basic Virtualizer Example with ListBox
DESCRIPTION: Shows how to implement virtualized scrolling with a ListBox component using the Virtualizer and ListLayout. This example renders 5000 items efficiently.

LANGUAGE: tsx
CODE:
import {Virtualizer, ListLayout, ListBox, ListBoxItem} from 'react-aria-components';

let items = [];
for (let i = 0; i < 5000; i++) {
  items.push({id: i, name: `Item ${i}`});
}

function Example() {
  return (
    <Virtualizer 
      layout={ListLayout}
      layoutOptions={{
        rowHeight: 32,
        padding: 4,
        gap: 4
      }}>
      <ListBox aria-label="Virtualized ListBox" selectionMode="multiple" items={items}>
        {item => <ListBoxItem>{item.name}</ListBoxItem>}
      </ListBox>
    </Virtualizer>
  );
}

----------------------------------------

TITLE: Setting Granularity and Time Zone with placeholderValue in DateRangePicker
DESCRIPTION: This snippet demonstrates how to use the granularity prop to control the precision of date inputs and how to use placeholderValue to set a default time zone for new selections.

LANGUAGE: tsx
CODE:
import {now} from '@internationalized/date';

<MyDateRangePicker
  label="Date range"
  granularity="second" />
<MyDateRangePicker
  label="Date range"
  placeholderValue={now('America/New_York')}
  granularity="second" />

----------------------------------------

TITLE: Implementing Global Toast Queue in React
DESCRIPTION: Creates a global toast queue that exists outside the React component tree, allowing toasts to be triggered from anywhere in the application. Uses ToastQueue from @react-stately/toast and React portals to render toasts in the document body.

LANGUAGE: tsx
CODE:
import {ToastQueue, useToastQueue} from '@react-stately/toast';
import {createPortal} from 'react-dom';

// Create a global toast queue.
const toastQueue = new ToastQueue({
  maxVisibleToasts: 5
});

function GlobalToastRegion(props) {
  // Subscribe to it.
  let state = useToastQueue(toastQueue);

  // Render toast region.
  return state.visibleToasts.length > 0
    ? createPortal(<ToastRegion {...props} state={state} />, document.body)
    : null;
}

// Render it somewhere in your app.
<GlobalToastRegion />

----------------------------------------

TITLE: Creating a Custom Trigger Component with React forwardRef
DESCRIPTION: Example of creating a custom trigger component that properly forwards refs and props to a DOM element, which is necessary for accessibility and proper functionality in React Aria Components.

LANGUAGE: tsx
CODE:
const CustomTrigger = React.forwardRef((props, ref) => (
  <button {...props} ref={ref} />
));

----------------------------------------

TITLE: CSS Styling for Horizontal Grid ListBox Layout
DESCRIPTION: Complex CSS for styling a horizontal grid layout in a ListBox, configuring grid flow, template areas, and responsive item display.

LANGUAGE: css
CODE:
.react-aria-ListBox[data-layout=grid][data-orientation=horizontal] {
  width: 100%;
  max-width: none;
  display: grid;
  grid-auto-flow: column;
  grid-template-rows: 58px 58px;
  grid-template-columns: none;
  grid-auto-columns: 250px;
  max-height: 200px;
  gap: 8px;

  .react-aria-ListBoxItem {
    display: grid;
    grid-template-areas: "image ."
                         "image title"
                         "image description"
                         "image .";
    grid-template-columns: auto 1fr;
    grid-template-rows: 1fr auto auto 1fr;
    column-gap: 8px;

    & img {
      width: 50px;
      height: 50px;
      grid-area: image;
      margin-bottom: 0;
    }

    [slot=label] {
      grid-area: title;
    }

    [slot=description] {
      grid-area: description;
    }
  }
}

----------------------------------------

TITLE: Implementing Individual Disabled Tabs
DESCRIPTION: Example showing how to disable individual tabs using the isDisabled prop on specific Tab components, making them non-focusable, non-selectable, and not keyboard navigable.

LANGUAGE: tsx
CODE:
<Tabs>
  <TabList aria-label="Input settings">
    <Tab id="mouse">Mouse Settings</Tab>
    <Tab id="keyboard">Keyboard Settings</Tab>
    <Tab id="gamepad" isDisabled>Gamepad Settings</Tab>
  </TabList>
  <TabPanel id="mouse">Mouse Settings</TabPanel>
  <TabPanel id="keyboard">Keyboard Settings</TabPanel>
  <TabPanel id="gamepad">Gamepad Settings</TabPanel>
</Tabs>

----------------------------------------

TITLE: ColorPicker with onChange Event Handler
DESCRIPTION: Demonstrates how to use the onChange event to update a separate element with the current color value.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-spectrum/color';

function Example() {
  let [value, setValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));

  return (
    <div>
      <ColorPicker
        label="Color"
        value={value}
        onChange={setValue}>
        <ColorEditor />
      </ColorPicker>
      <p>Selected color: {value.toString('hsl')}</p>
    </div>
  );
}

----------------------------------------

TITLE: Customizing Label Position and Alignment in CheckboxGroup
DESCRIPTION: Demonstrates how to position the label to the side of the CheckboxGroup and align it to the end using labelPosition and labelAlign props.

LANGUAGE: tsx
CODE:
<CheckboxGroup label="Favorite sports" labelPosition="side" labelAlign="end">
  <Checkbox value="soccer">Soccer</Checkbox>
  <Checkbox value="baseball">Baseball</Checkbox>
  <Checkbox value="basketball">Basketball</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Importing Tailwind CSS for React Aria Components
DESCRIPTION: Imports the Tailwind CSS global styles needed for the radio group component example.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Importing Tailwind CSS for React Aria Components
DESCRIPTION: Imports the Tailwind CSS global styles needed for the radio group component example.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Defining Blog Page Content with Markdown and JSX
DESCRIPTION: Defines the content of the blog page using a combination of Markdown and JSX. It includes category and description metadata, a header, and the PostListing component that displays blog posts.

LANGUAGE: markdown
CODE:
---
category: Foundation
description: React Spectrum blog
---

# Blog

<PostListing type="blog" />

----------------------------------------

TITLE: Importing ToggleButton and Related Components in React Spectrum
DESCRIPTION: Demonstrates how to import the ToggleButton component along with supporting components like Flex and View that are used in examples throughout the documentation.

LANGUAGE: jsx
CODE:
import {Flex} from '@react-spectrum/layout';
import {ToggleButton} from '@react-spectrum/button';
import {View} from '@react-spectrum/view';

----------------------------------------

TITLE: Implementing Multi-Format Drag Data in React
DESCRIPTION: Example showing how to provide multiple data formats for drag operations, including plain text, HTML, and custom application-specific formats. This enables interoperability with external applications and enhanced functionality within the app.

LANGUAGE: tsx
CODE:
function DraggableGridList() {
  let items = new Map([
    ['ps', {name: 'Photoshop', style: 'strong'}],
    ['xd', {name: 'XD', style: 'strong'}],
    ['id', {name: 'InDesign', style: 'strong'}],
    ['dw', {name: 'Dreamweaver', style: 'em'}],
    ['co', {name: 'Connect', style: 'em'}]
  ]);

  let { dragAndDropHooks } = useDragAndDrop({
    ///- begin collapse -///
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    ///- end collapse -///
    /*- begin highlight -*/
    getItems(keys) {
      return [...keys].map(key => {
        let item = items.get(key as string)!;
        return {
          'text/plain': item.name,
          'text/html': `<${item.style}>${item.name}</${item.style}>`,
          'custom-app-type': JSON.stringify({id: key, ...item})
        };
      });
    },
    /*- end highlight -*/
  });

  return (
    <MyGridList aria-label="Draggable list" selectionMode="multiple" items={items} dragAndDropHooks={dragAndDropHooks}>
      {([id, item]) => <MyItem id={id} textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</MyItem>}
    </MyGridList>
  );
}

<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
  <DraggableGridList />
  {/* see below */}
  <DroppableGridList />
</div>

----------------------------------------

TITLE: Managing Controlled and Uncontrolled DateRangePicker Values in React
DESCRIPTION: This example shows how to work with DateRangePicker values in both controlled and uncontrolled states. It demonstrates importing and using date parsing functions from @internationalized/date to handle calendar dates properly.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState({
    start: parseDate('2020-02-03'),
    end: parseDate('2020-02-08')
  });

  return (
    <>
      <MyDateRangePicker
        label="Date range (uncontrolled)"
        defaultValue={{
          start: parseDate('2020-02-03'),
          end: parseDate('2020-02-08')
        }} />
      <MyDateRangePicker
        label="Date range (controlled)"
        value={value}
        onChange={setValue} />
    </>
  );
}

----------------------------------------

TITLE: Implementing Validation with ColorField in React Aria
DESCRIPTION: This example demonstrates how to add validation to a ColorField component using the isRequired prop and FieldError element for displaying validation messages.

LANGUAGE: tsx
CODE:
import {Form, FieldError, Button} from 'react-aria-components';

<Form>
  <ColorField name="color" isRequired>
    <Label>Color</Label>
    <Input />
    <FieldError />
  </ColorField>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Creating a Circular Progress Indicator with SVG in React Aria
DESCRIPTION: This example shows how to implement a circular progress indicator using SVG graphics with the useProgressBar hook. It supports both determinate and indeterminate states with animation for the latter.

LANGUAGE: tsx
CODE:
function ProgressCircle(props) {
  let {isIndeterminate, value, minValue = 0, maxValue = 100} = props;
  let {progressBarProps} = useProgressBar(props);

  let center = 16;
  let strokeWidth = 4;
  let r = 16 - strokeWidth;
  let c = 2 * r * Math.PI;
  let percentage = isIndeterminate ? 0.25 : (value - minValue) / (maxValue - minValue);
  let offset = c - percentage * c;

  return (
    <svg
      {...progressBarProps}
      width={32}
      height={32}
      viewBox="0 0 32 32"
      fill="none"
      strokeWidth={strokeWidth}>
      <circle
        role="presentation"
        cx={center}
        cy={center}
        r={r}
        stroke="gray" />
      <circle
        role="presentation"
        cx={center}
        cy={center}
        r={r}
        stroke="orange"
        strokeDasharray={`${c} ${c}`}
        strokeDashoffset={offset}
        transform="rotate(-90 16 16)">
        {props.isIndeterminate &&
          <animateTransform
            attributeName="transform"
            type="rotate"
            begin="0s"
            dur="1s"
            from="0 16 16"
            to="360 16 16"
            repeatCount="indefinite" />
        }
      </circle>
    </svg>
  );
}

<ProgressCircle aria-label="Loading…" value={60} />

----------------------------------------

TITLE: Styling React Spectrum Components with Style Macro
DESCRIPTION: Example of applying Spectrum 2 styles to a React Spectrum Button component using the styles prop with the style macro.

LANGUAGE: jsx
CODE:
<Button styles={style({marginStart: 16})}>
  Hello Spectrum 2!
</Button>

----------------------------------------

TITLE: Implementing Directory Drop Functionality with React Aria Components
DESCRIPTION: This example demonstrates accepting directory drops, processing directory entries, and displaying them in a list. It uses DIRECTORY_DRAG_TYPE and isDirectoryDropItem from React Aria Components to handle directory drops specifically.

LANGUAGE: tsx
CODE:
import File from '@spectrum-icons/workflow/FileTxt';
import Folder from '@spectrum-icons/workflow/Folder';
import {DIRECTORY_DRAG_TYPE, isDirectoryDropItem} from 'react-aria-components';

interface DirItem {
  name: string,
  kind: string
}

function Example() {
  let [files, setFiles] = React.useState<DirItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    acceptedDragTypes: [DIRECTORY_DRAG_TYPE],
    async onRootDrop(e) {
      // Read entries in directory and update state with relevant info.
      let dir = e.items.find(isDirectoryDropItem)!;
      let files = [];
      for await (let entry of dir.getEntries()) {
        files.push({
          name: entry.name,
          kind: entry.kind
        });
      }
      setFiles(files);
    }
  });

  return (
    <MyGridList aria-label="Droppable list" items={files} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => "Drop directory here"}>
      {item => (
        <MyItem id={item.name} textValue={item.name}>
          <div className="dir-item">
            {item.kind === 'directory' ? <Folder /> : <File />}
            <span>{item.name}</span>
          </div>
        </MyItem>
      )}
    </MyGridList>
  );
}

----------------------------------------

TITLE: Implementing Sections in React ListBox with Static Items
DESCRIPTION: This example shows how to group ListBox items into sections using the ListBoxSection component. Each section has a Header component to label the group, improving organization and accessibility.

LANGUAGE: tsx
CODE:
import {ListBoxSection, Header} from 'react-aria-components';

<ListBox aria-label="Sandwich contents" selectionMode="multiple">
  <ListBoxSection>
    <Header>Veggies</Header>
    <ListBoxItem id="lettuce">Lettuce</ListBoxItem>
    <ListBoxItem id="tomato">Tomato</ListBoxItem>
    <ListBoxItem id="onion">Onion</ListBoxItem>
  </ListBoxSection>
  <ListBoxSection>
    <Header>Protein</Header>
    <ListBoxItem id="ham">Ham</ListBoxItem>
    <ListBoxItem id="tuna">Tuna</ListBoxItem>
    <ListBoxItem id="tofu">Tofu</ListBoxItem>
  </ListBoxSection>
  <ListBoxSection>
    <Header>Condiments</Header>
    <ListBoxItem id="mayo">Mayonaise</ListBoxItem>
    <ListBoxItem id="mustard">Mustard</ListBoxItem>
    <ListBoxItem id="ranch">Ranch</ListBoxItem>
  </ListBoxSection>
</ListBox>

----------------------------------------

TITLE: Configuring Column Widths in TableView with Different Units
DESCRIPTION: This example demonstrates how to set different column width configurations using pixel values, fractions, and percentages. It shows how to use defaultWidth, width, minWidth, and maxWidth props to control column sizing behavior.

LANGUAGE: tsx
CODE:
<TableView aria-label="Example table for column widths" maxWidth={320}>
  <TableHeader>
    <Column defaultWidth="1fr" align="start">Name</Column>
    <Column maxWidth={80}>Type</Column>
    <Column width={80}>Size</Column>
    <Column minWidth={100} align="end">Date Modified</Column>
  </TableHeader>
  <TableBody>
    <Row>
      <Cell>2021406_Proposal</Cell>
      <Cell>PDF</Cell>
      <Cell>86 KB</Cell>
      <Cell>April 12</Cell>
    </Row>
    <Row>
      <Cell>Budget Template</Cell>
      <Cell>XLS</Cell>
      <Cell>120 KB</Cell>
      <Cell>November 27</Cell>
    </Row>
    <Row>
      <Cell>Onboarding</Cell>
      <Cell>PPT</Cell>
      <Cell>472 KB</Cell>
      <Cell>January 7</Cell>
    </Row>
    <Row>
      <Cell>Welcome</Cell>
      <Cell>TXT</Cell>
      <Cell>24 KB</Cell>
      <Cell>February 11</Cell>
    </Row>
  </TableBody>
</TableView>

----------------------------------------

TITLE: Dynamic Content in Select Component
DESCRIPTION: Example showing how to use dynamic collections with the Select component. It demonstrates populating the Select with items from an array of objects, where each item has an id and name property.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, name: 'Aerospace'},
    {id: 2, name: 'Mechanical'},
    {id: 3, name: 'Civil'},
    {id: 4, name: 'Biomedical'},
    {id: 5, name: 'Nuclear'},
    {id: 6, name: 'Industrial'},
    {id: 7, name: 'Chemical'},
    {id: 8, name: 'Agricultural'},
    {id: 9, name: 'Electrical'}
  ];

  return (
    <MySelect label="Pick an engineering major" items={options}>
      {(item) => <ListBoxItem>{item.name}</ListBoxItem>}
    </MySelect>
  );
}

----------------------------------------

TITLE: Form Validation with TextArea in React Spectrum
DESCRIPTION: Shows how to use TextArea with form validation, including required fields and minimum length constraints within a Form component.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  {/*- begin highlight -*/}
  <TextArea label="Comment" name="comment" isRequired minLength={10} />
  {/*- end highlight -*/}
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Creating TableSelectAllCell for Multi-Selection
DESCRIPTION: Implements a header checkbox cell that enables selecting all rows at once using useTableSelectAllCheckbox hook. It handles indeterminate states and provides accessibility support.

LANGUAGE: tsx
CODE:
import {useTableSelectAllCheckbox} from '@react-aria/table';
import {VisuallyHidden} from '@react-aria/visually-hidden';

function TableSelectAllCell({column, state}) {
  let ref = useRef<HTMLTableCellElement | null>(null);
  let {columnHeaderProps} = useTableColumnHeader({node: column}, state, ref);
  let {checkboxProps} = useTableSelectAllCheckbox(state);

  return (
    <th
      {...columnHeaderProps}
      ref={ref}>
      {state.selectionManager.selectionMode === 'single'
        ? <VisuallyHidden>{checkboxProps['aria-label']}</VisuallyHidden>
        : <Checkbox {...checkboxProps} />
      }
    </th>
  );
}

----------------------------------------

TITLE: Implementing Controlled ColorArea with React State in React Spectrum
DESCRIPTION: This example demonstrates a controlled ColorArea component that uses React state to manage color values. It shows integration with ColorSlider and ColorSwatch components to provide a complete color selection interface with real-time updates.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-stately/color';

function Example() {
  let [
    color,
    setColor
  ] = React.useState(parseColor('hsba(219, 58%, 93%, 0.75)'));
  let [
    endColor,
    setEndColor
  ] = React.useState(color);
  let [
    xChannel,
    yChannel,
    zChannel
  ] = color.getColorChannels();
  return (
    <>
      <label id="hsb-label-id-1">x: {color.getChannelName(xChannel, 'en-US')}, y: {color.getChannelName(yChannel, 'en-US')}</label>
      <div
        style={{
          display: 'flex',
          flexWrap: 'wrap',
          gap: '1rem'
        }}>
        <div
          style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '1rem'
          }}>
          <ColorArea
            aria-labelledby="hsb-label-id-1"
            value={color}
            onChange={setColor}
            onChangeEnd={setEndColor}
            xChannel={xChannel}
            yChannel={yChannel} />
          <ColorSlider
            channel={zChannel}
            value={color}
            onChange={setColor}
            onChangeEnd={setEndColor} />
          <ColorSlider
            channel="alpha"
            value={color}
            onChange={setColor}
            onChangeEnd={setEndColor} />
        </div>
        <div
          style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '1rem'
          }}>
          <div
            style={{
              display: 'flex',
              gap: '6px'
            }}>
            <ColorSwatch
              color={color.withChannelValue('alpha', 1)}
              aria-label={`current color swatch: ${color.toString('hsl')}`} />
            <ColorSwatch
              color={color}
              aria-label={`current color swatch with alpha channel: ${color.toString('hsla')}`} />
          </div>
          <div
            style={{
              display: 'flex',
              gap: '6px'
            }}>
            <ColorSwatch
              color={endColor.withChannelValue('alpha', 1)}
              aria-label={`end color swatch: ${endColor.toString('hsb')}`} />
            <ColorSwatch
              color={endColor}
              aria-label={`end color swatch with alpha channel: ${endColor.toString('hsba')}`} />
          </div>
        </div>
      </div>
      <p>Current color value: {color.toString('hsba')}</p>
      <p>End color value: {endColor.toString('hsba')}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing Root Collection Drop Target in React
DESCRIPTION: Example showing how to handle drops on the entire collection using onRootDrop event. When items are dropped, they are processed and added to the component's state, with visual feedback provided during the drag operation.

LANGUAGE: tsx
CODE:
interface Item {
  id: number,
  name: string
}

function Example() {
  let [items, setItems] = React.useState<Item[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    /*- begin highlight -*/
    async onRootDrop(e) {
      let items = await Promise.all(e.items.map(async (item, i) => {
        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;
        return {id: i, name};
      }));
      setItems(items);
    }
    /*- end highlight -*/
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      <DraggableGridList />
      <MyGridList aria-label="Droppable list" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => 'Drop items here'}>
        {item => <GridListItem>{item.name}</GridListItem>}
      </MyGridList>
    </div>
  );
}

----------------------------------------

TITLE: Creating a Reusable RangeCalendar Wrapper Component
DESCRIPTION: Implements a reusable MyRangeCalendar component that encapsulates all the structural pieces of a RangeCalendar. This wrapper allows for consistent styling and behavior across an application while supporting custom props like error messages.

LANGUAGE: tsx
CODE:
import type {RangeCalendarProps, DateValue} from 'react-aria-components';
import {Text} from 'react-aria-components';

interface MyRangeCalendarProps<T extends DateValue> extends RangeCalendarProps<T> {
  errorMessage?: string
}

function MyRangeCalendar<T extends DateValue>({errorMessage, ...props}: MyRangeCalendarProps<T>) {
  return (
    <RangeCalendar {...props}>
      <header>
        <Button slot="previous">◀</Button>
        <Heading />
        <Button slot="next">▶</Button>
      </header>
      <CalendarGrid>
        {date => <CalendarCell date={date} />}
      </CalendarGrid>
      {errorMessage && <Text slot="errorMessage">{errorMessage}</Text>}
    </RangeCalendar>
  );
}

<MyRangeCalendar aria-label="Trip dates" />

----------------------------------------

TITLE: Implementing Color Wheel and Color Area in ColorPicker
DESCRIPTION: This example shows how to combine a ColorWheel and ColorArea component to build an HSB color picker. The ColorArea is positioned at the center of the ColorWheel to provide a complete color selection UI.

LANGUAGE: tsx
CODE:
import {MyColorWheel} from './ColorWheel';
import {MyColorArea} from './ColorArea';

<MyColorPicker label="Stroke color" defaultValue="#345">
  <MyColorWheel />
  <MyColorArea 
    colorSpace="hsb"
    xChannel="saturation"
    yChannel="brightness"
    style={{width: '100px', height: '100px', position: 'absolute', top: 'calc(50% - 50px)', left: 'calc(50% - 50px)'}} />
</MyColorPicker>

----------------------------------------

TITLE: Targeting Slot Elements in CSS
DESCRIPTION: Example of using CSS selectors to target elements with specific slots, allowing for different styling of components that share the same type but different roles.

LANGUAGE: css
CODE:
.react-aria-NumberField {
  [slot=increment] {
    border-radius: 4px 4px 0 0;
  }

  [slot=decrement] {
    border-radius: 0 0 4px 4px;
  }
}

----------------------------------------

TITLE: Group with Region Role for Landmarks
DESCRIPTION: Example showing how to use the Group component with a 'region' ARIA role when the group content is important enough to be included in page landmarks. This requires an aria-label for accessibility.

LANGUAGE: tsx
CODE:
<Group role="region" aria-label="Object details">
  {/* ... */}
</Group>

----------------------------------------

TITLE: Controlling DateField Granularity
DESCRIPTION: This example demonstrates how to control the granularity of a DateField, showing how the same date can be displayed with different levels of detail (seconds vs day only) while maintaining the same underlying value.

LANGUAGE: tsx
CODE:
function Example() {
  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));

  return (
    <>
      <DateField
        label="Date and time"
        granularity="second"
        value={date}
        onChange={setDate} />
      <DateField
        label="Date"
        granularity="day"
        value={date}
        onChange={setDate} />
    </>
  );
}

----------------------------------------

TITLE: Implementing an Animated Wi-Fi Switch with Tailwind CSS and React Aria Components
DESCRIPTION: Creates a custom styled Wi-Fi Switch component using React Aria Components with Tailwind CSS for styling. The component includes animation effects and appropriate states for interaction.

LANGUAGE: tsx
CODE:
import {Switch} from 'react-aria-components';

<div className="bg-linear-to-r from-yellow-300 to-orange-300 p-12 rounded-lg flex justify-center">
  <Switch className="group flex gap-2 items-center text-black font-semibold text-lg">
    <div className="flex h-[26px] w-[44px] shrink-0 cursor-default rounded-full shadow-inner bg-clip-padding border border-solid border-white/30 p-[3px] box-border transition duration-200 ease-in-out bg-yellow-600 group-pressed:bg-yellow-700 group-selected:bg-amber-800 group-selected:group-pressed:bg-amber-900 outline-hidden group-focus-visible:ring-2 ring-black">
      <span className="h-[18px] w-[18px] transform rounded-full bg-white shadow-sm transition duration-200 ease-in-out translate-x-0 group-selected:translate-x-[100%]" />
    </div>
    Wi-Fi
  </Switch>
</div>

----------------------------------------

TITLE: Using ToggleGroupStateContext to Create a ClearButton in React Aria Components
DESCRIPTION: This example demonstrates how to access and manipulate the toggle button group's state using ToggleGroupStateContext. It creates a ClearButton component that clears the selected keys in a ToggleButtonGroup when pressed.

LANGUAGE: tsx
CODE:
import {ToggleGroupStateContext, Button} from 'react-aria-components';

function ClearButton() {
  /*- begin highlight -*/
  let state = React.useContext(ToggleGroupStateContext);
  /*- end highlight -*/
  return (
    <Button onPress={() => state?.setSelectedKeys(new Set())}>
      Clear
    </Button>
  );
}

<ToggleButtonGroup selectionMode="multiple" defaultSelectedKeys={['bold', 'italic']}>
  <ToggleButton id="bold">Bold</ToggleButton>
  <ToggleButton id="italic">Italic</ToggleButton>
  <ToggleButton id="underline">Underline</ToggleButton>
  {/*- begin highlight -*/}
  <ClearButton />
  {/*- end highlight -*/}
</ToggleButtonGroup>

----------------------------------------

TITLE: Generating Color Array for Flex Wrapping Example
DESCRIPTION: Creates an array of color values based on Spectrum color variables for use in the flex wrapping example.

LANGUAGE: tsx
CODE:
let baseColors = ['celery', 'chartreuse', 'yellow', 'magenta', 'fuchsia', 'purple', 'indigo', 'seafoam', 'red', 'orange', 'green', 'blue'];
let colors = [];
for (let color of baseColors) {
  for (let i = 4; i <= 7; i++) {
    colors.push(`${color}-${i}00`);
  }
}

----------------------------------------

TITLE: Creating a Button Component with React Aria's useButton Hook
DESCRIPTION: A reusable Button component implementation that leverages React Aria's useButton hook. This component can be used as a trigger for the Menu and can be shared with many other components.

LANGUAGE: tsx
CODE:
import {useButton} from '@react-aria/button';

function Button(props) {
  let ref = props.buttonRef;
  let {buttonProps} = useButton(props, ref);
  return <button {...buttonProps} ref={ref} style={props.style}>{props.children}</button>;
}

----------------------------------------

TITLE: Creating Linked Rows in React Spectrum Table
DESCRIPTION: This example demonstrates how to create table rows that act as links to external websites using the href prop. The example shows a bookmark table with rows linking to different websites that open in new tabs.

LANGUAGE: tsx
CODE:
<Table aria-label="Bookmarks" selectionMode="multiple">
  <MyTableHeader>
    <Column isRowHeader>Name</Column>
    <Column>URL</Column>
    <Column>Date added</Column>
  </MyTableHeader>
  <TableBody>
    <MyRow href="https://adobe.com/" target="_blank">
      <Cell>Adobe</Cell>
      <Cell>https://adobe.com/</Cell>
      <Cell>January 28, 2023</Cell>
    </MyRow>
    <MyRow href="https://google.com/" target="_blank">
      <Cell>Google</Cell>
      <Cell>https://google.com/</Cell>
      <Cell>April 5, 2023</Cell>
    </MyRow>
    <MyRow href="https://nytimes.com/" target="_blank">
      <Cell>New York Times</Cell>
      <Cell>https://nytimes.com/</Cell>
      <Cell>July 12, 2023</Cell>
    </MyRow>
  </TableBody>
</Table>

----------------------------------------

TITLE: Implementing Basic Select Component with React Aria Components
DESCRIPTION: A basic implementation of the Select component with a label, button, and listbox containing multiple selectable items. This demonstrates the core structure and functionality of the component.

LANGUAGE: tsx
CODE:
import {Select, SelectValue, Label, Button, Popover, ListBox, ListBoxItem} from 'react-aria-components';

<Select>
  <Label>Favorite Animal</Label>
  <Button>
    <SelectValue />
    <span aria-hidden="true">▼</span>
  </Button>
  <Popover>
    <ListBox>
      <ListBoxItem>Aardvark</ListBoxItem>
      <ListBoxItem>Cat</ListBoxItem>
      <ListBoxItem>Dog</ListBoxItem>
      <ListBoxItem>Kangaroo</ListBoxItem>
      <ListBoxItem>Panda</ListBoxItem>
      <ListBoxItem>Snake</ListBoxItem>
    </ListBox>
  </Popover>
</Select>

----------------------------------------

TITLE: Implementing Tabs with Icons Using Slots
DESCRIPTION: Example of Tabs with icons displayed alongside text labels using React Spectrum Slots pattern, which provides consistent styling for icons and text within tab items.

LANGUAGE: tsx
CODE:
<Tabs aria-label="History of Ancient Rome">
  <TabList>
    <Item key="FoR" textValue="FoR"><Bookmark /><Text>Founding of Rome</Text></Item>
    <Item key="MaR" textValue="MaR"><Calendar /><Text>Monarchy and Republic</Text></Item>
    <Item key="Emp" textValue="Emp"><Dashboard /><Text>Empire</Text></Item>
  </TabList>
  <TabPanels>
    <Item key="FoR">
      Arma virumque cano, Troiae qui primus ab oris.
    </Item>
    <Item key="MaR">
      Senatus Populusque Romanus.
    </Item>
    <Item key="Emp">
      Alea jacta est.
    </Item>
  </TabPanels>
</Tabs>

----------------------------------------

TITLE: Implementing a Basic Tree Component with Reusable Components
DESCRIPTION: Shows how to use the custom MyTreeItem components to render a tree structure with significantly less code while maintaining full functionality.

LANGUAGE: tsx
CODE:
<Tree aria-label="Files" style={{height: '300px'}} defaultExpandedKeys={['documents', 'photos', 'project']}>
  <MyTreeItem title="Documents">
    <MyTreeItem title="Project">
      <MyTreeItem title="Weekly Report" />
    </MyTreeItem>
  </MyTreeItem>
  <MyTreeItem title="Photos">
    <MyTreeItem title="Image 1" />
    <MyTreeItem title="Image 2" />
  </MyTreeItem>
</Tree>

----------------------------------------

TITLE: Creating Reusable Menu Components in React Aria
DESCRIPTION: Demonstrates how to create customized, reusable menu components by wrapping the basic React Aria Components into a higher-level component with consistent styling and behavior.

LANGUAGE: tsx
CODE:
import type {MenuProps, MenuTriggerProps, MenuItemProps} from 'react-aria-components';

interface MyMenuButtonProps<T> extends MenuProps<T>, Omit<MenuTriggerProps, 'children'> {
  label?: string
}

function MyMenuButton<T extends object>({label, children, ...props}: MyMenuButtonProps<T>) {
  return (
    <MenuTrigger {...props}>
      <Button>{label}</Button>
      <Popover>
        <Menu {...props}>
          {children}
        </Menu>
      </Popover>
    </MenuTrigger>
  );
}

export function MyItem(props: MenuItemProps) {
  let textValue = props.textValue || (typeof props.children === 'string' ? props.children : undefined);
  return (
    <MenuItem
      {...props}
      textValue={textValue}
      className={({isFocused, isSelected, isOpen}) => `my-item ${isFocused ? 'focused' : ''} ${isOpen ? 'open' : ''}`}>
      {({hasSubmenu}) => (
        <>
          {props.children}
          {hasSubmenu && (
            <svg className="chevron" viewBox="0 0 24 24"><path d="m9 18 6-6-6-6" /></svg>
          )}
        </>
      )}
    </MenuItem>
  );
}

<MyMenuButton label="Edit">
  <MyItem>Cut</MyItem>
  <MyItem>Copy</MyItem>
  <MyItem>Paste</MyItem>
</MyMenuButton>

----------------------------------------

TITLE: Creating Disabled Menu Items with isDisabled Prop
DESCRIPTION: Shows how to disable specific MenuItems using the isDisabled prop, which prevents focus, keyboard navigation, and action triggering.

LANGUAGE: tsx
CODE:
<MyMenuButton label="Actions">
  <MenuItem>Copy</MenuItem>
  <MenuItem>Cut</MenuItem>
  <MenuItem isDisabled>Paste</MenuItem>
</MyMenuButton>

----------------------------------------

TITLE: CSS Styling for Switch Component
DESCRIPTION: Comprehensive CSS styling for the Switch component, including states like pressed, selected, and focus.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Switch {
  display: flex;
  align-items: center;
  gap: 0.571rem;
  font-size: 1.143rem;
  color: var(--text-color);
  forced-color-adjust: none;

  .indicator {
    width: 2rem;
    height: 1.143rem;
    border: 2px solid var(--border-color);
    background: var(--background-color);
    border-radius: 1.143rem;
    transition: all 200ms;

    &:before {
      content: '';
      display: block;
      margin: 0.143rem;
      width: 0.857rem;
      height: 0.857rem;
      background: var(--highlight-background);
      border-radius: 16px;
      transition: all 200ms;
    }
  }

  &[data-pressed] .indicator {
    border-color: var(--border-color-pressed);

    &:before {
      background: var(--highlight-background-pressed);
    }
  }

  &[data-selected] {
    .indicator {
      border-color: var(--highlight-background);
      background: var(--highlight-background);

      &:before {
        background: var(--field-background);
        transform: translateX(100%);
      }
    }

    &[data-pressed] {
      .indicator {
        border-color: var(--highlight-background-pressed);
        background: var(--highlight-background-pressed);
      }
    }
  }

  &[data-focus-visible] .indicator {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: 2px;
  }
}

----------------------------------------

TITLE: Creating a Disabled ComboBox Component
DESCRIPTION: This example shows how to fully disable a ComboBox using the isDisabled prop, preventing all interaction with the component.

LANGUAGE: tsx
CODE:
<MyComboBox label="Favorite Animal" isDisabled>
  <ListBoxItem id="red panda">Panda</ListBoxItem>
  <ListBoxItem id="cat">Cat</ListBoxItem>
  <ListBoxItem id="dog">Dog</ListBoxItem>
</MyComboBox>

----------------------------------------

TITLE: Creating FieldGroup Component with SearchFieldContext
DESCRIPTION: Advanced example showing how to create a custom FieldGroup component that can disable multiple SearchField components simultaneously using SearchFieldContext provider.

LANGUAGE: tsx
CODE:
import {SearchFieldContext} from 'react-aria-components';

interface FieldGroupProps {
  title?: string,
  children?: React.ReactNode,
  isDisabled?: boolean
}

function FieldGroup({title, children, isDisabled}: FieldGroupProps) {
  return (
    <fieldset>
      <legend>{title}</legend>
      <SearchFieldContext.Provider value={{isDisabled}}>
        {children}
      </SearchFieldContext.Provider>
    </fieldset>
  );
}

<FieldGroup title="Filters" isDisabled>
  <MySearchField label="Name" defaultValue="Devon" />
  <MySearchField label="Email" defaultValue="devon@example.com" />
</FieldGroup>

----------------------------------------

TITLE: Implementing Dismissable Modal in React Aria
DESCRIPTION: Example of creating a dismissable modal that can be closed by clicking outside of it, using the isDismissable prop.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <Button>Open dialog</Button>
  <Modal isDismissable>
    <Dialog>
      <Heading slot="title">Notice</Heading>
      <p>Click outside to close this dialog.</p>
    </Dialog>
  </Modal>
</DialogTrigger>

----------------------------------------

TITLE: TagGroup with Icons in TSX
DESCRIPTION: Shows how to create tags with icons by combining Icon components with Text components inside Item elements.

LANGUAGE: tsx
CODE:
<TagGroup aria-label="TagGroup with icons example">
  <Item textValue="News">
    <News />
    <Text>News</Text>
  </Item>
  <Item textValue="Travel">
    <Airplane />
    <Text>Travel</Text>
  </Item>
  <Item textValue="Gaming">
    <Game />
    <Text>Gaming</Text>
  </Item>
  <Item textValue="Shopping">
    <ShoppingCart />
    <Text>Shopping</Text>
  </Item>
</TagGroup>

----------------------------------------

TITLE: Breadcrumbs with Root Context in React Spectrum
DESCRIPTION: Example demonstrating how to always show the root item even when other items are truncated into the overflow menu, using the showRoot prop in a space-constrained container.

LANGUAGE: tsx
CODE:
<View overflow="hidden" width="200px">
  <Breadcrumbs showRoot>
    <Item key="home">Home</Item>
    <Item key="trendy">Trendy</Item>
    <Item key="2020 assets">March 2020 Assets</Item>
    <Item key="winter">Winter</Item>
    <Item key="holiday">Holiday</Item>
  </Breadcrumbs>
</View>

----------------------------------------

TITLE: Implementing Controlled Selection in GridList with React Aria
DESCRIPTION: Demonstrates how to create a GridList with controlled selection using the selectedKeys prop and onSelectionChange callback. This allows for programmatic control of the selected items in the list.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-aria-components';

function PokemonList(props: GridListProps<ItemValue>) {
  let rows = [
    {id: 1, name: 'Charizard'},
    {id: 2, name: 'Blastoise'},
    {id: 3, name: 'Venusaur'},
    {id: 4, name: 'Pikachu'}
  ];

  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));

  return (
    <MyGridList
      aria-label="List with controlled selection"
      items={rows}
      selectionMode="multiple"
      /*- begin highlight -*/
      selectedKeys={selectedKeys}
      onSelectionChange={setSelectedKeys}
      /*- end highlight -*/
      {...props}>
      {item => <MyItem>{item.name}</MyItem>}
    </MyGridList>
  );
}

----------------------------------------

TITLE: Handling Unavailable Dates in DateRangePicker
DESCRIPTION: Example showing how to mark certain dates as unavailable and implement validation to prevent selecting ranges that include unavailable dates.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

function Example() {
  let now = today(getLocalTimeZone());
  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  return (
    <MyDateRangePicker
      label="Trip dates"
      minValue={today(getLocalTimeZone())}
      isDateUnavailable={date => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0)}
      validate={value => disabledRanges.some(interval => value && value.end.compare(interval[0]) >= 0 && value.start.compare(interval[1]) <= 0) ? 'Selected date range may not include unavailable dates.' : null}
     />
  );
}

----------------------------------------

TITLE: Implementing Controlled and Uncontrolled DateField Components in React
DESCRIPTION: This example demonstrates how to create both controlled and uncontrolled DateField components using the parseDate function from @internationalized/date to set initial values.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState(parseDate('2020-02-03'));

  return (
    <>
      <MyDateField
        label="Date (uncontrolled)"
        defaultValue={parseDate('2020-02-03')} />
      <MyDateField
        label="Date (controlled)"
        value={value}
        onChange={setValue} />
    </>
  );
}

----------------------------------------

TITLE: DropZone with Type-Specific Visual Feedback
DESCRIPTION: An example showing how to provide visual feedback only for specific file types using the getDropOperation prop. This ensures users get appropriate feedback based on the content they're trying to drop.

LANGUAGE: tsx
CODE:
function Example() {
  let [dropped, setDropped] = React.useState(false);

  return (
    <DropZone
      getDropOperation={(types) => types.has('image/png') ? 'copy' : 'cancel'}
      onDrop={() => setDropped(true)}>
      {dropped ? 'Successful drop!' : 'Drop files here'}
    </DropZone>
  );
}

----------------------------------------

TITLE: DialogTrigger with Close Function for Interactive Elements
DESCRIPTION: Demonstrates how to pass the close function to buttons within a dialog to enable closing the dialog when buttons are pressed, using a function child pattern.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Checkout</ActionButton>
  {(close) => (
    <Dialog>
      <Heading>Confirm checkout?</Heading>
      <Divider />
      <Content>
        <Text>
          You have 5 items in your cart. Proceed to checkout?
        </Text>
      </Content>
      <ButtonGroup>
        <Button variant="secondary" onPress={close}>Cancel</Button>
        <Button variant="accent" onPress={close} autoFocus>Confirm</Button>
      </ButtonGroup>
    </Dialog>
  )}
</DialogTrigger>

----------------------------------------

TITLE: Configuring Tooltip with Zero Delay in TSX
DESCRIPTION: Example showing how to set a tooltip with zero delay, making it appear instantly on hover.

LANGUAGE: tsx
CODE:
<TooltipButton tooltip="Save" delay={0}>💾</TooltipButton>

----------------------------------------

TITLE: AlertDialog with Error Variant
DESCRIPTION: Shows the error variant of AlertDialog, which is used to display error messages to users with appropriate styling and often retry or recovery options.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Login</ActionButton>
  <AlertDialog
    variant="error"
    title="Unable to connect"
    primaryActionLabel="Retry"
    cancelLabel="Cancel">
    Something went wrong while connecting to the server.
    Please try again in a couple minutes.
  </AlertDialog>
</DialogTrigger>

----------------------------------------

TITLE: Creating a Custom Checkbox Compatible with React Aria Components
DESCRIPTION: Shows how to create a custom checkbox component that integrates with React Aria's context system, making it usable within Table's selection system.

LANGUAGE: tsx
CODE:
import type {CheckboxProps} from 'react-aria-components';
import {CheckboxContext, useContextProps} from 'react-aria-components';
import {useToggleState} from 'react-stately';
import {useCheckbox} from 'react-aria';

const MyCustomCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {
  // Merge the local props and ref with the ones provided via context.
  ///- begin highlight -///
  [props, ref] = useContextProps(props, ref, CheckboxContext);
  ///- end highlight -///

  let state = useToggleState(props);
  let {inputProps} = useCheckbox(props, state, ref);
  return <input {...inputProps} ref={ref} />;
});

----------------------------------------

TITLE: Creating Reusable Tree Item Component in React Aria Components
DESCRIPTION: Implements a custom TreeItem component that simplifies tree item creation by accepting a title prop and automatically rendering the TreeItemContent.

LANGUAGE: tsx
CODE:
import {TreeItemProps} from 'react-aria-components';

interface MyTreeItemProps extends Partial<TreeItemProps> {
  title: string
}

function MyTreeItem(props: MyTreeItemProps) {
  return (
    <TreeItem textValue={props.title} {...props}>
      <MyTreeItemContent>
        {props.title}
      </MyTreeItemContent>
      {props.children}
    </TreeItem>
  );
}

----------------------------------------

TITLE: Handling Different Drop Operations in React
DESCRIPTION: This example demonstrates how to handle different drop operations (move, copy, link) by checking the dropOperation property in the onDrop event. It uses a switch statement to perform different actions based on the operation type.

LANGUAGE: tsx
CODE:
function DropTarget(props) {
  let ref = React.useRef(null);
  let {dropProps, isDropTarget} = useDrop({
    ref,
    async onDrop(e) {
      let item = e.items.find(item => item.kind === 'text' && item.types.has('my-app-file')) as TextDropItem;
      if (!item) {
        return;
      }

      let data = JSON.parse(await item.getText('my-app-file'));
      /*- begin highlight -*/
      switch (e.dropOperation) {
        case 'move':
          MyAppFileService.move(data.filePath, props.filePath);
          break;
        case 'copy':
          MyAppFileService.copy(data.filePath, props.filePath);
          break;
        case 'link':
          MyAppFileService.link(data.filePath, props.filePath);
          break;
      }
      /*- end highlight -*/
    }
  });

  // ...

----------------------------------------

TITLE: Accessing CheckboxGroup State with CheckboxGroupStateContext
DESCRIPTION: This example creates a SelectionCount component that uses the CheckboxGroupStateContext to access the CheckboxGroup's state and display the number of selected items.

LANGUAGE: tsx
CODE:
import {CheckboxGroupStateContext} from 'react-aria-components';

function SelectionCount() {
  let state = React.useContext(CheckboxGroupStateContext)!;
  return <small>{state.value.length} items selected.</small>;
}

<MyCheckboxGroup label="Sandwich condiments">
  <MyCheckbox value="lettuce">Lettuce</MyCheckbox>
  <MyCheckbox value="tomato">Tomato</MyCheckbox>
  <MyCheckbox value="onion">Onion</MyCheckbox>
  <MyCheckbox value="sprouts">Sprouts</MyCheckbox>
  <SelectionCount />
</MyCheckboxGroup>

----------------------------------------

TITLE: Form with ARIA Validation Behavior
DESCRIPTION: Example of setting validation behavior to use ARIA attributes instead of native HTML validation, providing real-time feedback.

LANGUAGE: tsx
CODE:
<Form validationBehavior="aria">
  <TextField
    name="username"
    defaultValue="admin"
    isRequired
    validate={value => value === 'admin' ? 'Nice try.' : null}>
    <Label>Username</Label>
    <Input />
    <FieldError />
  </TextField>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Implementing Menu Component with React Aria Hooks
DESCRIPTION: A Menu component that renders menu items and sections using useMenu and useTreeState hooks. It manages menu state and provides proper ARIA attributes for accessibility.

LANGUAGE: tsx
CODE:
import type {AriaMenuProps} from '@react-aria/menu';
import {useMenu} from '@react-aria/menu';
import {useTreeState} from '@react-stately/tree';

function Menu<T extends object>(props: AriaMenuProps<T>) {
  // Create menu state based on the incoming props
  let state = useTreeState(props);

  // Get props for the menu element
  let ref = React.useRef(null);
  let {menuProps} = useMenu(props, state, ref);

  return (
    <ul {...menuProps} ref={ref}>
      {[...state.collection].map(item => (
        item.type === 'section'
          ? <MenuSection key={item.key} section={item} state={state} />
          : <MenuItem key={item.key} item={item} state={state} />
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Styling Menu Separators with CSS
DESCRIPTION: CSS styles for the Separator component in a Menu, creating a thin horizontal line with appropriate margins to visually divide groups of menu items.

LANGUAGE: css
CODE:
.react-aria-Menu {
  .react-aria-Separator {
    height: 1px;
    background: var(--border-color);
    margin: 2px 4px;
  }
}

----------------------------------------

TITLE: Importing ListBox and Related Components in React Spectrum
DESCRIPTION: Shows how to import the ListBox component and related components like Section, Item, Flex, and various icons from React Spectrum packages.

LANGUAGE: jsx
CODE:
import {ListBox, Section, Item} from '@react-spectrum/listbox';
import {Flex} from '@react-spectrum/layout';
import Book from '@spectrum-icons/workflow/Book';
import BulkEditUsers from '@spectrum-icons/workflow/BulkEditUsers';
import Draw from '@spectrum-icons/workflow/Draw';
import {Text} from '@react-spectrum/text';
import {Avatar} from "@react-spectrum/avatar";

----------------------------------------

TITLE: Creating a Quiet ListView Example in React Spectrum
DESCRIPTION: Function that creates a reusable ListView component with the quiet visual style. It accepts props to be passed to the ListView and renders a basic list with multiple selection enabled.

LANGUAGE: tsx
CODE:
function ListExample(props) {
  return (
    <ListView selectionMode="multiple" aria-label="Quiet ListView example" width="size-3000" {...props}>
      <Item>Adobe AfterEffects</Item>
      <Item>Adobe Dreamweaver</Item>
      <Item>Adobe Acrobat</Item>
    </ListView>
  );
}

<ListExample isQuiet />

----------------------------------------

TITLE: CSS Styling for Reusable Autocomplete Component
DESCRIPTION: CSS styles for the reusable MyAutocomplete component, providing consistent layout and appearance. It includes styling for the container, search field, menu with empty state handling, and labels.

LANGUAGE: css
CODE:
.my-autocomplete {
  display: flex;
  flex-direction: column;
  gap: 12px;
  max-width: 300px;
  height: 180px;
  border: 1px solid var(--border-color);
  padding: 16px;
  border-radius: 10px;
  background: var(--overlay-background);
}

.react-aria-SearchField {
  width: 100%;
}

.react-aria-Label {
  margin-bottom: .5em;
}

.react-aria-Menu {
  &[data-empty] {
    align-items: center;
    justify-content: center;
    font-style: italic;
  }
}

----------------------------------------

TITLE: Implementing TableView with Flex Layout in React Spectrum
DESCRIPTION: This example demonstrates how to use a Flex component to create a layout with a fixed header and a TableView that fills the remaining vertical space. The TableView displays a list of users with their first name, last name, and city, with an Add button positioned above it.

LANGUAGE: tsx
CODE:
///- begin collapse -///
let columns = [
  {name: 'First name', id: 'first_name'},
  {name: 'Last name', id: 'last_name'},
  {name: 'City', id: 'city'}
];

let rows = [
{"id":1,"first_name":"Andras","last_name":"Rodmell","city":"Tilburg"},
{"id":2,"first_name":"Hansiain","last_name":"Muino","city":"Hollola"},
{"id":3,"first_name":"Northrop","last_name":"Adnet","city":"Lai Cách"},
{"id":4,"first_name":"Giana","last_name":"Phython","city":"Laspezia"},
{"id":5,"first_name":"Maud","last_name":"Jaram","city":"Tipaz"},
{"id":6,"first_name":"Gasparo","last_name":"Wiggin","city":"Feuknoni"},
{"id":7,"first_name":"Phillie","last_name":"Lezemere","city":"Krajan Sidodadi"},
{"id":8,"first_name":"Kailey","last_name":"Du Plantier","city":"Shangping"},
{"id":9,"first_name":"Brady","last_name":"Oxtarby","city":"Bang Mun Nak"},
{"id":10,"first_name":"Ekaterina","last_name":"Crennan","city":"Santo Antônio do Amparo"},
{"id":11,"first_name":"Jaine","last_name":"Trembey","city":"Manūjān"},
{"id":12,"first_name":"Emmey","last_name":"Dunguy","city":"Garhi Yāsīn"},
{"id":13,"first_name":"Camille","last_name":"Millwall","city":"Orion"},
{"id":14,"first_name":"Staci","last_name":"Glusby","city":"Alofi"},
{"id":15,"first_name":"Ned","last_name":"Crumbleholme","city":"Ban Bueng"},
{"id":16,"first_name":"Tana","last_name":"Beardsworth","city":"Puerto Aisén"},
{"id":17,"first_name":"Dewain","last_name":"Fladgate","city":"London"},
{"id":18,"first_name":"Thurstan","last_name":"Trembath","city":"Orléans"},
{"id":19,"first_name":"Vaclav","last_name":"Fitzpayn","city":"Huangchen"},
{"id":20,"first_name":"Keven","last_name":"Monkeman","city":"Medenychi"},
{"id":21,"first_name":"Talia","last_name":"Ryman","city":"Piteå"},
{"id":22,"first_name":"Percy","last_name":"Le Teve","city":"Terny"},
{"id":23,"first_name":"Jackson","last_name":"Anten","city":"Beiling"},
{"id":24,"first_name":"Jakob","last_name":"Goullee","city":"Pelym"},
{"id":25,"first_name":"Dru","last_name":"Klainer","city":"Zavrč"},
{"id":26,"first_name":"Lucie","last_name":"Donahue","city":"Kiryū"},
{"id":27,"first_name":"Marc","last_name":"McPeck","city":"Nong Muang Khai"},
{"id":28,"first_name":"Vivianna","last_name":"Allport","city":"Kajatian"},
{"id":29,"first_name":"Drud","last_name":"Hurn","city":"Bambuí"},
{"id":30,"first_name":"Trever","last_name":"Ambrodi","city":"Xiangtan"},
{"id":31,"first_name":"Gwennie","last_name":"Kingswold","city":"San Benito"},
{"id":32,"first_name":"Karlan","last_name":"Tilby","city":"Patrída"},
{"id":33,"first_name":"Heddie","last_name":"Sneath","city":"Esperanza"},
{"id":34,"first_name":"Harlen","last_name":"Sandells","city":"Harrismith"},
{"id":35,"first_name":"Gavan","last_name":"Halward","city":"Al Ḩayfah"},
{"id":36,"first_name":"Andre","last_name":"Everest","city":"Bahui"},
{"id":37,"first_name":"Merilyn","last_name":"Rowbrey","city":"Imishli"},
{"id":38,"first_name":"Abe","last_name":"Pecht","city":"Pangkalan Kasai"},
{"id":39,"first_name":"Britt","last_name":"Collingridge","city":"Érd"},
{"id":40,"first_name":"Leticia","last_name":"Thorndycraft","city":"Paita"},
{"id":41,"first_name":"Eward","last_name":"Tigwell","city":"Aral"},
{"id":42,"first_name":"Torrie","last_name":"Curzon","city":"Stockholm"},
{"id":43,"first_name":"Jenifer","last_name":"Swalwel","city":"Jinniu"},
{"id":44,"first_name":"Marianna","last_name":"Radley","city":"Hedi"},
{"id":45,"first_name":"Antoine","last_name":"Tyers","city":"Hewa"},
{"id":46,"first_name":"Darline","last_name":"Gallehawk","city":"København"},
{"id":47,"first_name":"Rikki","last_name":"Rosenzveig","city":"Affery"},
{"id":48,"first_name":"Debera","last_name":"Vedenichev","city":"Żywiec"},
{"id":49,"first_name":"Morena","last_name":"Hewins","city":"Las Lajas"},
{"id":50,"first_name":"Cordy","last_name":"Reimer","city":"Derbent"},
{"id":51,"first_name":"Quint","last_name":"Thoresbie","city":"Guyang"},
{"id":52,"first_name":"Christean","last_name":"Deere","city":"Waegwan"},
{"id":53,"first_name":"Moyra","last_name":"Battelle","city":"Villa Presidente Frei, Ñuñoa, Santiago, Chile"},
{"id":54,"first_name":"Fayth","last_name":"Gallafant","city":"Kedungharjo"},
{"id":55,"first_name":"Thedrick","last_name":"Duddy","city":"Thị Trấn Mường Lát"},
{"id":56,"first_name":"George","last_name":"Rickerd","city":"Zarqa"},
{"id":57,"first_name":"Nikos","last_name":"Rideout","city":"Yuanqiao"},
{"id":58,"first_name":"Alejandra","last_name":"Le Port","city":"Il'ichëvo"},
{"id":59,"first_name":"Eleonora","last_name":"Gibberd","city":"Sua"},
{"id":60,"first_name":"Archibaldo","last_name":"Place","city":"Sidayu"},
{"id":61,"first_name":"Helen","last_name":"Brenton","city":"Kuressaare"},
{"id":62,"first_name":"Leyla","last_name":"Armstead","city":"Haifa"},
{"id":63,"first_name":"Bridget","last_name":"Strotone","city":"Karasuk"},
{"id":64,"first_name":"Jarid","last_name":"Packer","city":"Студеничани"},
{"id":65,"first_name":"Christos","last_name":"Natt","city":"Nova Russas"},
{"id":66,"first_name":"Alwyn","last_name":"Mingaud","city":"Conde"},
{"id":67,"first_name":"Archy","last_name":"Thorneywork","city":"Gulu"},
{"id":68,"first_name":"Iolanthe","last_name":"Spurgeon","city":"Ayrihuanca"},
{"id":69,"first_name":"Rossy","last_name":"Axford","city":"Ledeč nad Sázavou"},
{"id":70,"first_name":"Consuela","last_name":"Lillegard","city":"Finote Selam"},
{"id":71,"first_name":"Salomon","last_name":"Buckney","city":"Kampokpok"},
{"id":72,"first_name":"Celene","last_name":"Espley","city":"Sinubong"},
{"id":73,"first_name":"Kristos","last_name":"Denyukhin","city":"Las Palmas"},
{"id":74,"first_name":"Bertha","last_name":"Mallabon","city":"Vera"},
{"id":75,"first_name":"Jorry","last_name":"Yuryev","city":"Carletonville"},
{"id":76,"first_name":"Holly-anne","last_name":"Wagstaffe","city":"Sukadana"},
{"id":77,"first_name":"Lara","last_name":"Shears","city":"Gambēla"},
{"id":78,"first_name":"Romonda","last_name":"Glanville","city":"Donglu"},
{"id":79,"first_name":"Felice","last_name":"Pryde","city":"Sapadun"},
{"id":80,"first_name":"Nick","last_name":"Kidney","city":"Chernigovka"},
{"id":81,"first_name":"Hermina","last_name":"Dooley","city":"New Agutaya"},
{"id":82,"first_name":"Ketty","last_name":"FitzGeorge","city":"Abaza"},
{"id":83,"first_name":"Patrizio","last_name":"Bovingdon","city":"'Ayn al 'Arab"},
{"id":84,"first_name":"Caitrin","last_name":"Braine","city":"Il'inskiy"},
{"id":85,"first_name":"Ian","last_name":"De Few","city":"Jatinagara"},
{"id":86,"first_name":"Eben","last_name":"Adan","city":"Bolong"},
{"id":87,"first_name":"Peder","last_name":"Innott","city":"Gampaha"},
{"id":88,"first_name":"Selie","last_name":"Cruise","city":"Mariscala"},
{"id":89,"first_name":"Melania","last_name":"Meredyth","city":"La'ershan"},
{"id":90,"first_name":"Antonina","last_name":"Proby","city":"Shantoudian"},
{"id":91,"first_name":"Sabra","last_name":"Dreng","city":"Dzhankoy"},
{"id":92,"first_name":"Sibeal","last_name":"Hall-Gough","city":"Mengxi"},
{"id":93,"first_name":"Fidel","last_name":"Maisey","city":"Gus'-Khrustal'nyy"},
{"id":94,"first_name":"Alejandro","last_name":"Devey","city":"Charata"},
{"id":95,"first_name":"Norina","last_name":"Stoyle","city":"Malaya Dubna"},
{"id":96,"first_name":"Lari","last_name":"Kiezler","city":"Guaíba"},
{"id":97,"first_name":"Percival","last_name":"Geffinger","city":"Ngeni"},
{"id":98,"first_name":"Jo","last_name":"Spoure","city":"Karata"},
{"id":99,"first_name":"Karlie","last_name":"Gooddy","city":"Pelem"},
{"id":100,"first_name":"Edmon","last_name":"Alsopp","city":"Sandu"}];
///- end collapse -///

<Flex height="size-5000" width="100%" direction="column" gap="size-150">
  <ActionButton alignSelf="start">Add</ActionButton>
  <TableView
    flex
    aria-label="Example table with dynamic content">
    <TableHeader columns={columns}>
      {column => (
        <Column
          key={column.id}>
          {column.name}
        </Column>
      )}
    </TableHeader>
    <TableBody items={rows}>
      {item => (
        <Row>
          {columnKey => <Cell>{item[columnKey]}</Cell>}
        </Row>
      )}
    </TableBody>
  </TableView>
</Flex>

----------------------------------------

TITLE: Setting Placeholder Value in DateField with TypeScript
DESCRIPTION: Shows how to set a placeholder value for a DateField component. The placeholderValue prop influences both the displayed placeholder and default segment values when users interact with the field.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

<DateField label="Birth date" placeholderValue={new CalendarDate(1980, 1, 1)} />

----------------------------------------

TITLE: CSS Styling for Form Components with Validation Error Display
DESCRIPTION: CSS styles used to format form components with validation errors. The styles create a flex column layout with appropriate spacing and styling for error messages.

LANGUAGE: css
CODE:
.flex {
  display: flex;
  flex-direction: column;
  gap: 4px;

  .invalid {
    margin: 0;
  }
}

----------------------------------------

TITLE: Setting Placeholder Value in DateField with TypeScript
DESCRIPTION: Shows how to set a placeholder value for a DateField component. The placeholderValue prop influences both the displayed placeholder and default segment values when users interact with the field.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

<DateField label="Birth date" placeholderValue={new CalendarDate(1980, 1, 1)} />

----------------------------------------

TITLE: Controlled and Uncontrolled ColorField Examples
DESCRIPTION: Demonstrates both controlled and uncontrolled ColorField components with different ways to set and manage color values using state and the parseColor utility.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-stately/color';

function Example() {
  let [value, setValue] = React.useState(parseColor('#e73623'));

  return (
    <Flex gap="size-150" wrap>
      <ColorField
        label="Primary Color (Uncontrolled)"
        defaultValue="#e21" />

      <ColorField
        label="Primary Color (Controlled)"
        value={value}
        onChange={setValue} />
    </Flex>
  );
}

----------------------------------------

TITLE: Implementing Form Validation with TextField
DESCRIPTION: Example showing how to use native HTML validation with TextField by setting validationBehavior="native" along with validation constraints like type="email" and isRequired.

LANGUAGE: TSX
CODE:
<form>
  <TextField
    label="Email"
    name="email"
    /*- begin highlight -*/
    type="email"
    isRequired
    validationBehavior="native"
    /*- end highlight -*/
  />
  <input type="submit" style={{marginTop: 8}} />
</form>

----------------------------------------

TITLE: Form with Side Label Position and Start Alignment in React Spectrum
DESCRIPTION: Visual configuration example showing a form with labels positioned beside fields (side) and aligned to the start of the container.

LANGUAGE: tsx
CODE:
<Form
  labelPosition="side"
  labelAlign="start"
  aria-label="Side position, start alignment example"
  maxWidth="size-3600">
  <TextField label="Name" />
  <RadioGroup label="Favorite pet">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: Implementing Basic TextField Component with React Aria
DESCRIPTION: Example implementation of a basic TextField component using the useTextField hook. This snippet demonstrates how to create an accessible text input with a label, description, and validation error messages.

LANGUAGE: TSX
CODE:
import type {AriaTextFieldProps} from '@react-aria/textfield';
import {useTextField} from '@react-aria/textfield';

function TextField(props: AriaTextFieldProps) {
  let {label} = props;
  let ref = React.useRef(null);
  let {labelProps, inputProps, descriptionProps, errorMessageProps, isInvalid, validationErrors} = useTextField(props, ref);

  return (
    <div style={{display: 'flex', flexDirection: 'column', width: 200}}>
      <label {...labelProps}>{label}</label>
      <input {...inputProps} ref={ref} />
      {props.description && <div {...descriptionProps} style={{fontSize: 12}}>{props.description}</div>}
      {isInvalid && <div {...errorMessageProps} style={{color: 'red', fontSize: 12}}>{validationErrors.join(' ')}</div>}
    </div>
  );
}

<TextField label="Email" />

----------------------------------------

TITLE: Setting Placeholder Value in DateField with TypeScript
DESCRIPTION: Shows how to set a placeholder value for a DateField component. The placeholderValue prop influences both the displayed placeholder and default segment values when users interact with the field.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

<DateField label="Birth date" placeholderValue={new CalendarDate(1980, 1, 1)} />

----------------------------------------

TITLE: Creating a Custom Modal Overlay
DESCRIPTION: Example of implementing a custom modal overlay with custom styling and animations, showing how to customize the backdrop appearance.

LANGUAGE: tsx
CODE:
import {ModalOverlay} from 'react-aria-components';

<DialogTrigger>
  <Button>Open modal</Button>
  <ModalOverlay className="my-overlay">
    <Modal className="my-modal">
      <Dialog>
        <Heading slot="title">Notice</Heading>
        <p>This is a modal with a custom modal overlay.</p>
        <Button slot="close">Close</Button>
      </Dialog>
    </Modal>
  </ModalOverlay>
</DialogTrigger>

----------------------------------------

TITLE: Implementing Asynchronous Data Loading in List Component
DESCRIPTION: This example demonstrates how to use the useAsyncList hook to handle asynchronous loading of data from a server for a List component, fetching Star Wars character data from an API.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

function AsyncList() {

  let list = useAsyncList({
    async load({signal, cursor}) {
      if (cursor) {
        cursor = cursor.replace(/^http:\/\//i, 'https://');
      }

      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=`, {signal});
      let json = await res.json();

      return {
        items: json.results,
        cursor: json.next
      };
    }
  });

  return (
    <List
      selectionMode="multiple"
      aria-label="Async loading ListView example"
      items={list.items}>
      {(item) => (
        <Item key={item.name}>{item.name}</Item>
      )}
    </List>
  );
}

----------------------------------------

TITLE: Implementing Required CheckboxGroup Validation with FieldError
DESCRIPTION: This example demonstrates how to implement validation on a CheckboxGroup using the isRequired prop to ensure at least one checkbox is selected. It shows how to use FieldError to display validation messages.

LANGUAGE: tsx
CODE:
import {Form, FieldError, Button} from 'react-aria-components';

<Form>
  <CheckboxGroup name="condiments" isRequired>
    <Label>Sandwich condiments</Label>
    <MyCheckbox value="lettuce">Lettuce</MyCheckbox>
    <MyCheckbox value="tomato">Tomato</MyCheckbox>
    <MyCheckbox value="onion">Onion</MyCheckbox>
    <MyCheckbox value="sprouts">Sprouts</MyCheckbox>
    <FieldError />
  </CheckboxGroup>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Adding Contextual Help to DatePicker in React Spectrum
DESCRIPTION: Shows how to add contextual help information to a DatePicker using the ContextualHelp component, which provides additional information in a popup when clicked.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<DatePicker
  label="Appointment date"
  contextualHelp={
    <ContextualHelp variant="info">
      <Heading>Appointment changes</Heading>
      <Content>Your appointment date cannot be changed once it is scheduled.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Implementing Controlled Disclosure Component in React
DESCRIPTION: Example of a controlled Disclosure component whose expanded state is managed through React state with isExpanded and onExpandedChange props.

LANGUAGE: tsx
CODE:
function ControlledExpanded() {
  let [isExpanded, setIsExpanded] = React.useState(true);

  return (
    <MyDisclosure title="Download, Install, and Set Up" isExpanded={isExpanded} onExpandedChange={setIsExpanded}>
      Instructions on how to download, install, and set up
    </MyDisclosure>
  )
}

<ControlledExpanded />

----------------------------------------

TITLE: Required Picker with Label Indicator in React Spectrum
DESCRIPTION: Demonstrates a required Picker field with a label necessity indicator. The necessityIndicator prop is set to "label" to show the required state in text form.

LANGUAGE: tsx
CODE:
<Picker label="Choose frequency" isRequired necessityIndicator="label">
  <Item key="rarely">Rarely</Item>
  <Item key="sometimes">Sometimes</Item>
  <Item key="always">Always</Item>
</Picker>

----------------------------------------

TITLE: Implementing Text Drop Data Handling in React Tables
DESCRIPTION: Example demonstrating how to accept specific drag types using acceptedDragTypes and process custom formatted text data from dropped items. This filters for items containing the specified drag types.

LANGUAGE: tsx
CODE:
import {isTextDropItem} from 'react-aria-components';

function DroppableTable() {
  let [items, setItems] = React.useState<Pokemon[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    acceptedDragTypes: ['pokemon'],
    async onRootDrop(e) {
      let items = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('pokemon')))
      );
      setItems(items);
    }
  });

  return (
    <PokemonTable
      items={items}
      dragAndDropHooks={dragAndDropHooks}
      renderEmptyState={() => 'Drop items here'} />
  );
}

<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
  {/* see above */}
  <DraggableTable />
  <DroppableTable />
</div>

----------------------------------------

TITLE: Creating Large Size Modal Dialog in React Spectrum
DESCRIPTION: Shows how to implement a large (L) size dialog with a form. This example follows the same pattern as the other size examples, using the render prop to access the close function for dismissal.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Large</ActionButton>
  {(close) => (
    <Dialog size="L">
      <Heading>Profile</Heading>
      <Divider />
      <ButtonGroup>
        <Button variant="secondary" onPress={close}>Cancel</Button>
        <Button autoFocus variant="accent" onPress={close}>Save</Button>
      </ButtonGroup>
      <Content>
        <Form>
          <TextField label="Name" />
          <Checkbox>Make private</Checkbox>
        </Form>
      </Content>
    </Dialog>
  )}
</DialogTrigger>

----------------------------------------

TITLE: Configuring DateRangePicker for Non-Contiguous Ranges
DESCRIPTION: This example shows how to enable selection of date ranges that include unavailable dates using the allowsNonContiguousRanges prop. It prevents selecting weekends but allows selecting ranges that span multiple weeks.

LANGUAGE: tsx
CODE:
import {isWeekend} from '@internationalized/date';
import {useLocale} from '@adobe/react-spectrum';

function Example() {
  let {locale} = useLocale();

  return <DateRangePicker label="Time off request" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />
}

----------------------------------------

TITLE: Using onChangeEnd Event with React Aria Slider
DESCRIPTION: Example showing how to use the onChangeEnd event to capture the final value when a user finishes dragging. This is useful when you want to perform an action only after the user completes their interaction.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState(25);
  return (
    <>
      <MySlider<number>
        label="Cookies to buy"
        defaultValue={value}
        onChangeEnd={setValue} />
      <p>Current value: {value}</p>
    </>
  );
}

----------------------------------------

TITLE: Basic TimeField Implementation in React Spectrum
DESCRIPTION: Demonstrates the simplest implementation of a TimeField component with just a label property.

LANGUAGE: tsx
CODE:
<TimeField label="Event time" />

----------------------------------------

TITLE: Implementing a Custom Trigger Component with Ref Forwarding
DESCRIPTION: Example of creating a custom trigger component that forwards refs and props to a DOM element, which is necessary for compatibility with DialogTrigger in React Aria Components.

LANGUAGE: tsx
CODE:
const CustomTrigger = React.forwardRef((props, ref) => (
  <button {...props} ref={ref} />
));

----------------------------------------

TITLE: Implementing Popover Component for React Spectrum Menu
DESCRIPTION: A reusable Popover component implementation that serves as a container for menus in components like ComboBox and Select. It uses React Aria's usePopover hook and handles overlay and dismissal functionality.

LANGUAGE: tsx
CODE:
import type {AriaPopoverProps} from 'react-aria';
import type {OverlayTriggerState} from 'react-stately';
import {usePopover, Overlay, DismissButton} from '@react-aria/overlays';

interface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef'> {
  children: React.ReactNode,
  state: OverlayTriggerState
}

function Popover({children, state, ...props}: PopoverProps) {
  let popoverRef = React.useRef(null);
  let {popoverProps, underlayProps} = usePopover({
    ...props,
    popoverRef
  }, state);

  return (
    <Overlay>
      <div {...underlayProps} style={{position: 'fixed', inset: 0}} />
      <div
        {...popoverProps}
        ref={popoverRef}
        style={{
          ...popoverProps.style,
          background: 'lightgray',
          border: '1px solid gray'
        }}>
        <DismissButton onDismiss={state.close} />
        {children}
        <DismissButton onDismiss={state.close} />
      </div>
    </Overlay>
  );
}

----------------------------------------

TITLE: TextField with Description Text
DESCRIPTION: Example showing how to add descriptive help text to a TextField using the description slot, providing additional context for the input field.

LANGUAGE: tsx
CODE:
<TextField>
  <Label>Email</Label>
  <Input />
  <Text slot="description">Enter an email for us to contact you about your order.</Text>
</TextField>

----------------------------------------

TITLE: Controlled Multi-Thumb Slider in React Aria
DESCRIPTION: Implementation of a controlled slider with multiple thumbs. This example demonstrates how to manage an array of values for a range slider and update state when values change.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState([25, 75]);
  return (
    <>
      <MySlider<number[]>
        label="Range"
        thumbLabels={['start', 'end']}
        value={value}
        onChange={setValue} />
      <p>Current value: {value.join(' – ')}</p>
    </>
  );
}

----------------------------------------

TITLE: Allowing Non-Contiguous Ranges in RangeCalendar
DESCRIPTION: This example shows how to enable selection of date ranges that contain unavailable dates by using the allowsNonContiguousRanges prop, specifically allowing ranges that span across weekends while marking weekends as unavailable.

LANGUAGE: tsx
CODE:
import {isWeekend} from '@internationalized/date';
import {useLocale} from '@adobe/react-spectrum';

function Example() {
  let {locale} = useLocale();

  return <RangeCalendar aria-label="Time off request" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />
}

----------------------------------------

TITLE: Importing Documentation Resources for useComboBox
DESCRIPTION: Imports various documentation resources, package information, and visual assets needed for the useComboBox documentation page.

LANGUAGE: JSX
CODE:
import docs from 'docs:@react-aria/combobox';
import collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';
import {FunctionAPI, HeaderInfo, InterfaceType, TypeContext, TypeLink, PageDescription} from '@react-spectrum/docs';
import i18nDocs from 'docs:@react-aria/i18n';
import listboxDocs from 'docs:@react-aria/listbox';
import overlaysDocs from 'docs:@react-aria/overlays';
import packageData from '@react-aria/combobox/package.json';
import selectionDocs from 'docs:@react-stately/selection';
import statelyDocs from 'docs:@react-stately/combobox';
import Anatomy from './anatomy.svg';
import ChevronRight from '@spectrum-icons/workflow/ChevronRight';
import {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';
import examplePreview from 'url:./example.png';
import searchExamplePreview from 'url:./search.png';
import materialExamplePreview from 'url:./material.png';
import styledExamplePreview from 'url:./styled-components.png';
import chakraExamplePreview from 'url:./chakra.png';

----------------------------------------

TITLE: Setting Container Padding for Popovers
DESCRIPTION: This example demonstrates how to set minimum padding between a popover and the browser window edge using the containerPadding prop, ensuring the popover maintains at least 50px distance from window boundaries.

LANGUAGE: tsx
CODE:
<PopoverTrigger placement="top" containerPadding={50} label="Trigger">
  <Dialog>
    This is a popover.
  </Dialog>
</PopoverTrigger>

----------------------------------------

TITLE: Creating a Button Group with Context in React Aria Components
DESCRIPTION: This example shows how to create a ButtonGroup component that shares properties (like disabled state) with child buttons using ButtonContext provider.

LANGUAGE: tsx
CODE:
import {ButtonContext} from 'react-aria-components';

interface ButtonGroupProps {
  children?: React.ReactNode,
  isDisabled?: boolean
}

function ButtonGroup({children, isDisabled}: ButtonGroupProps) {
  return (
    <div style={{display: 'flex', gap: 8}}>
      <ButtonContext.Provider value={{isDisabled}}>
        {children}
      </ButtonContext.Provider>
    </div>
  );
}

<ButtonGroup isDisabled>
  <Button>Save</Button>
  <Button>Publish</Button>
</ButtonGroup>

----------------------------------------

TITLE: Fully Controlled SearchAutocomplete Implementation
DESCRIPTION: Example of a fully controlled SearchAutocomplete where both inputValue and items are controlled props. Implements custom filtering with a 'starts with' strategy and handles open state changes, input changes, and item selection.

LANGUAGE: tsx
CODE:
function ControlledSearchAutocomplete() {
  let optionList = [
    {name: 'Red Panda', id: '1'},
    {name: 'Cat', id: '2'},
    {name: 'Dog', id: '3'},
    {name: 'Aardvark', id: '4'},
    {name: 'Kangaroo', id: '5'},
    {name: 'Snake', id: '6'}
  ];

  // Store SearchAutocomplete input value, selected option, open state, and items
  // in a state tracker
  let [fieldState, setFieldState] = React.useState({
    inputValue: '',
    items: optionList
  });

  // Implement custom filtering logic and control what items are
  // available to the SearchAutocomplete.
  let {startsWith} = useFilter({sensitivity: 'base'});

  // Specify how each of the SearchAutocomplete values should change when an
  // option is selected from the list box
  let onSubmit = (value, key) => {
    setFieldState(prevState => {
      let selectedItem = prevState.items.find(option => option.id === key);
      return ({
        inputValue: selectedItem?.name ?? '',
        items: optionList.filter(item => startsWith(item.name, selectedItem?.name ?? ''))
      })
    });
  };

  // Specify how each of the SearchAutocomplete values should change when the input
  // field is altered by the user
  let onInputChange = (value) => {
    setFieldState(prevState => ({
      inputValue: value,
      items: optionList.filter(item => startsWith(item.name, value))
    }));
  };

  // Show entire list if user opens the menu manually
  let onOpenChange = (isOpen, menuTrigger) => {
    if (menuTrigger === 'manual' && isOpen) {
      setFieldState(prevState => ({
        inputValue: prevState.inputValue,
        items: optionList
      }));
    }
  };

  // Pass each controlled prop to useSearchAutocomplete along with their
  // change handlers
  return (
    <SearchAutocomplete
      label="Search Animals"
      items={fieldState.items}
      inputValue={fieldState.inputValue}
      onOpenChange={onOpenChange}
      onSubmit={onSubmit}
      onInputChange={onInputChange}>
      {item => <Item>{item.name}</Item>}
    </SearchAutocomplete>
  )
}

<ControlledSearchAutocomplete />

----------------------------------------

TITLE: Setting Minimum Date Value in DatePicker in React Spectrum
DESCRIPTION: Example of using minValue prop to set a minimum date constraint in DatePicker, ensuring users can only select dates after today.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<Form validationBehavior="native" maxWidth="size-3000">
  <DatePicker
    label="Appointment date"
    /*- begin highlight -*/
    minValue={today(getLocalTimeZone())}
    /*- end highlight -*/
    defaultValue={parseDate('2022-02-03')} />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Implementing onDragEnd for Move Operations in React Spectrum
DESCRIPTION: Example demonstrating how to implement the onDragEnd event handler to respond to drop operations. This showcases removing dragged items from a list when a move operation is completed, while preserving them when a copy operation is performed.

LANGUAGE: tsx
CODE:
function Example() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},
      {id: 2, name: 'Blastoise', type: 'Water', level: '56'},
      {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},
      {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}
    ]
  });

  let { dragAndDropHooks } = useDragAndDrop({
    // ...
    ///- begin collapse -///
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    getItems(keys) {
      return [...keys].map(key => {
        let item = list.getItem(key);
        return {
          'text/plain': item.name,
          'pokemon': JSON.stringify(item)
        };
      });
    },
    ///- end collapse -///
    /*- begin highlight -*/
    onDragEnd(e) {
      if (e.dropOperation === 'move') {
        list.remove(...e.keys);
      }
    }
    /*- end highlight -*/
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      <PokemonTable
        items={list.items}
        selectionMode="multiple"
        dragAndDropHooks={dragAndDropHooks} />
      <DroppableTable />
    </div>
  );
}

----------------------------------------

TITLE: Configuring Vertical Orientation for Tabs in React Spectrum
DESCRIPTION: Example demonstrating how to create vertically oriented tabs using the orientation prop set to 'vertical'. This changes the layout direction without affecting keyboard navigation.

LANGUAGE: tsx
CODE:
<Tabs aria-label="Chat log orientation example" orientation="vertical">
  <TabList>
    <Item key="item1">
      John Doe
    </Item>
    <Item key="item2">
      Jane Doe
    </Item>
    <Item key="item3">
      Joe Bloggs
    </Item>
  </TabList>
  <TabPanels>
    <Item key="item1">
      There is no prior chat history with John Doe.
    </Item>
    <Item key="item2">
      There is no prior chat history with Jane Doe.
    </Item>
    <Item key="item3">
      There is no prior chat history with Joe Bloggs.
    </Item>
  </TabPanels>
</Tabs>

----------------------------------------

TITLE: Implementing a Vertical Toolbar with Icon Buttons
DESCRIPTION: Example of a vertically oriented toolbar with icon buttons grouped by functionality, including imports for SVG icons and appropriate ARIA labels.

LANGUAGE: tsx
CODE:
import Move from '@spectrum-icons/workflow/Move';
import Select from '@spectrum-icons/workflow/Select';
import Polygon from '@spectrum-icons/workflow/PolygonSelect';
import Brush from '@spectrum-icons/workflow/Brush';
import Pencil from '@spectrum-icons/workflow/Edit';

<Toolbar aria-label="Tools" orientation="vertical">
  <Group aria-label="Select">
    <Button aria-label="Move"><Move size="S" /></Button>
    <Button aria-label="Rectangle"><Select size="S" /></Button>
    <Button aria-label="Polygon"><Polygon size="S" /></Button>
  </Group>
  <Separator orientation="horizontal" />
  <Group aria-label="Draw">
    <Button aria-label="Brush"><Brush size="S" /></Button>
    <Button aria-label="Pencil"><Pencil size="S" /></Button>
  </Group>
</Toolbar>

----------------------------------------

TITLE: Custom Component Implementation with Hooks
DESCRIPTION: Shows how to create a custom checkbox component using the lower-level Hook-based API with useContextProps to maintain compatibility with other React Aria Components.

LANGUAGE: tsx
CODE:
import type {CheckboxProps} from 'react-aria-components';
import {CheckboxContext, useContextProps} from 'react-aria-components';
import {useToggleState} from 'react-stately';
import {useCheckbox} from 'react-aria';

const MyCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, CheckboxContext);

  let state = useToggleState(props);
  let {inputProps} = useCheckbox(props, state, ref);
  return <input {...inputProps} ref={ref} />;
});

----------------------------------------

TITLE: Pending State Button Implementation in React Spectrum
DESCRIPTION: Shows how to implement a Button with a pending state that displays a spinner and disables interactions while a process is running.

LANGUAGE: tsx
CODE:
function Example() {
  let [isLoading, setIsLoading] = React.useState(false);

  let handlePress = () => {
    // Trigger button pending state
    setIsLoading(true);

    setTimeout(() => {
      // Cancel button pending state
      setIsLoading(false);
    }, 3000);
  };

  return (
    <Button variant="primary" isPending={isLoading} onPress={handlePress}>Click me!</Button>
  );
}

----------------------------------------

TITLE: Multi-Month Calendar Implementation with CalendarGrid
DESCRIPTION: Demonstrates how to create a multi-month calendar view by using multiple CalendarGrid components with offset props, specifying visibleDuration to control the visible range.

LANGUAGE: tsx
CODE:
<Calendar aria-label="Appointment date" visibleDuration={{months: 3}}>
  <header>
    <Button slot="previous">◀</Button>
    <Heading />
    <Button slot="next">▶</Button>
  </header>
  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>
    <CalendarGrid>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
    <CalendarGrid offset={{months: 1}}>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
    <CalendarGrid offset={{months: 2}}>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
  </div>
</Calendar>

----------------------------------------

TITLE: Installing @react-aria/selection Package
DESCRIPTION: This code snippet shows the package name for @react-aria/selection, which is part of the React Spectrum library. It indicates that the package is available for installation and use in React projects.

LANGUAGE: markdown
CODE:
# @react-aria/selection

----------------------------------------

TITLE: Basic TextField Usage Example
DESCRIPTION: Demonstrates the most basic implementation of a TextField component with a label.

LANGUAGE: tsx
CODE:
<TextField label="Name" />

----------------------------------------

TITLE: Dynamic Class Names with State Functions
DESCRIPTION: Demonstrates using a function to determine class names based on component state, which is useful when using utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<ListBoxItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>
  Item
</ListBoxItem>

----------------------------------------

TITLE: Implementing Controlled Selection in TreeView with React Spectrum
DESCRIPTION: This example demonstrates how to implement controlled selection in a TreeView component using the selectedKeys prop and onSelectionChange callback. It maintains the selection state in a React useState hook.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function ControlledSelection() {
  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['document-a', 'document-b']));

  return (
    <ExampleTree
      aria-label="Example tree with controlled selection"
      defaultExpandedKeys={['projects', 'project-2']}
      /*- begin highlight -*/
      selectionMode="multiple"
      selectedKeys={selectedKeys}
      onSelectionChange={setSelectedKeys}
      /*- end highlight -*/
    />
  );
}

----------------------------------------

TITLE: Implementing Asynchronous Loading in GridList with useAsyncList
DESCRIPTION: Example of using the useAsyncList hook to handle asynchronous data loading from a server, displaying Star Wars characters from an API.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Character {
  name: string
}

function AsyncList() {
  let list = useAsyncList<Character>({
    async load({signal, cursor}) {
      if (cursor) {
        cursor = cursor.replace(/^http:\/\//i, 'https://');
      }

      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=`, {signal});
      let json = await res.json();

      return {
        items: json.results,
        cursor: json.next
      };
    }
  });

  return (
    <MyGridList
      selectionMode="multiple"
      aria-label="Async loading ListView example"
      items={list.items}>
      {(item) => (
        <MyItem id={item.name}>{item.name}</MyItem>
      )}
    </MyGridList>
  );
}

----------------------------------------

TITLE: Basic TextField Example in React Aria Components
DESCRIPTION: A basic example showing how to implement a TextField component with Label and Input elements from React Aria Components.

LANGUAGE: tsx
CODE:
import {TextField, Label, Input} from 'react-aria-components';

<TextField>
  <Label>First name</Label>
  <Input />
</TextField>

----------------------------------------

TITLE: Implementing a Button Component for ComboBox Trigger
DESCRIPTION: Creates a reusable Button component used to toggle the ComboBox dropdown. It leverages the useButton hook from React Aria for accessibility and keyboard interaction support. This component can be shared across various UI elements that need button functionality.

LANGUAGE: tsx
CODE:
import {useButton} from '@react-aria/button';

function Button(props) {
  let ref = props.buttonRef;
  let {buttonProps} = useButton(props, ref);
  return <button {...buttonProps} ref={ref} style={props.style}>{props.children}</button>;
}

----------------------------------------

TITLE: Importing Dialog-Related Components in React Spectrum
DESCRIPTION: Import statements for various components used in dialog examples, including icons, form elements, and layout components.

LANGUAGE: jsx
CODE:
import Book from '@spectrum-icons/workflow/Book';
import {Footer} from '@react-spectrum/view';
import {Checkbox} from '@react-spectrum/checkbox';
import {Flex} from '@react-spectrum/layout';
import {Form} from '@react-spectrum/form';
import {Link} from '@react-spectrum/link';
import {Image} from '@react-spectrum/image';
import {TextField} from '@react-spectrum/textfield';

----------------------------------------

TITLE: Using Custom NumberField with Standard React Aria Components
DESCRIPTION: Demonstrates how to use a custom NumberField implementation while reusing the standard Group, Input, Label, and Button components from React Aria Components.

LANGUAGE: tsx
CODE:
<CustomNumberField>
  <Label>Width</Label>
  <Group>
    <Input />
    <Button slot="increment">+</Button>
    <Button slot="decrement">-</Button>
  </Group>
</CustomNumberField>

----------------------------------------

TITLE: Importing Tailwind Global CSS for Modal Sheet
DESCRIPTION: Imports the global Tailwind CSS styles required for styling the modal sheet component.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Form Validation with TextField
DESCRIPTION: Shows how to implement form validation with TextField in a Form component using native validation behavior.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  <TextField label="Email" name="email" type="email" isRequired />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Implementing ListBox with Avatar Components
DESCRIPTION: Example showing how to enhance ListBox items with avatar images. This demonstrates integrating the Avatar component within ListBox items for user selection interfaces.

LANGUAGE: tsx
CODE:
<ListBox width="size-2400" aria-label="Options" selectionMode="single">
  <Section title="Users">
    <Item textValue="User 1">
      <Avatar src="https://i.imgur.com/kJOwAdv.png" />
      <Text>User 1</Text>
    </Item>
    <Item textValue="User 2">
      <Avatar src="https://i.imgur.com/kJOwAdv.png" />
      <Text>User 2</Text>
    </Item>
    <Item textValue="User 3">
      <Avatar src="https://i.imgur.com/kJOwAdv.png" />
      <Text>User 3</Text>
    </Item>
    <Item textValue="User 4">
      <Avatar src="https://i.imgur.com/kJOwAdv.png" />
      <Text>User 4</Text>
    </Item>
  </Section>
</ListBox>

----------------------------------------

TITLE: Basic DropZone Implementation with State Management
DESCRIPTION: Example implementation of a DropZone component with a Draggable element. The component uses React state to track whether content has been dropped and displays appropriate messaging.

LANGUAGE: tsx
CODE:
import Upload from '@spectrum-icons/illustrations/Upload';

function Example() {
  let [isFilled, setIsFilled] = React.useState(false);

  return (
    <>
      <Draggable />
      <DropZone
        maxWidth="size-3000"
        isFilled={isFilled}
        onDrop={() => setIsFilled(true)}>
        <IllustratedMessage>
          <Upload />
          <Heading>
            {isFilled ? 'You dropped something!' : 'Drag and drop your file'}
          </Heading>
        </IllustratedMessage>
      </DropZone>
    </>
  )
}

----------------------------------------

TITLE: Implementing Custom Validation for DateField
DESCRIPTION: Example showing how to implement custom validation for a DateField to ensure the selected date is a weekday and not a weekend.

LANGUAGE: tsx
CODE:
import {isWeekend} from '@internationalized/date';
import {useLocale} from 'react-aria';

function Example() {
  let {locale} = useLocale();

  return (
    <Form>
      <MyDateField
        label="Appointment date"
        validate={date => date && isWeekend(date, locale) ? 'We are closed on weekends.' : null}
        defaultValue={parseDate('2023-10-28')} />
      <Button type="submit">Submit</Button>
    </Form>
  );
}

----------------------------------------

TITLE: Using disabledKeys for Dynamic Tag Collections
DESCRIPTION: Example of using the disabledKeys prop at the TagGroup level to disable specific tags in a dynamic collection based on their IDs.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    { id: 1, name: "News" },
    { id: 2, name: "Travel" },
    { id: 3, name: "Gaming" },
    { id: 4, name: "Shopping" }
  ];

  return (
    <MyTagGroup
      label="Categories"
      items={options}
      selectionMode="multiple"
      /*- begin highlight -*/
      disabledKeys={[2, 4]}
      /*- end highlight -*/
    >
      {(item) => <MyTag>{item.name}</MyTag>}
    </MyTagGroup>
  );
}

----------------------------------------

TITLE: Implementing Event Handlers in React SearchField Component
DESCRIPTION: This example demonstrates how to use onChange, onSubmit, and onClear event handlers in a SearchField component to update and display text entered by the user in real-time.

LANGUAGE: tsx
CODE:
function Example() {
  let [currentText, setCurrentText] = React.useState('');
  let [submittedText, setSubmittedText] = React.useState('');

  return (
    <div>
      <MySearchField
        onClear={() => setCurrentText('')}
        onChange={setCurrentText}
        onSubmit={setSubmittedText}
        label="Your text"
        value={currentText}
      />
      <p>Mirrored text: {currentText}</p>
      <p>Submitted text: {submittedText}</p>
    </div>
  );
}

----------------------------------------

TITLE: Creating a Controlled Radio Group in React Spectrum
DESCRIPTION: This example demonstrates how to implement a controlled RadioGroup component where the selected value is managed by React state. The onChange event updates the state when the user selects a different radio option.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState(null);

  return (
    <>
      <RadioGroup label="Favorite avatar" value={selected} onChange={setSelected}>
        <Radio value="wizard">Wizard</Radio>
        <Radio value="dragon">Dragon</Radio>
      </RadioGroup>
      <p>You have selected: {selected}</p>
    </>
  );
}

----------------------------------------

TITLE: Configuring a Read-only DateRangePicker in React Spectrum
DESCRIPTION: This example shows how to create a read-only DateRangePicker using the isReadOnly prop. Unlike the disabled state, the component remains focusable but the value cannot be changed by the user.

LANGUAGE: tsx
CODE:
<DateRangePicker label="Date range" value={{start: today(getLocalTimeZone()), end: today(getLocalTimeZone()).add({weeks: 1})}} isReadOnly />

----------------------------------------

TITLE: Programmatically Dismissing Toast Notifications
DESCRIPTION: Example of how to programmatically dismiss a toast notification by capturing and using the close function returned by ToastQueue methods.

LANGUAGE: tsx
CODE:
function Example() {
  let [close, setClose] = React.useState(null);

  return (
    <Button
      onPress={() => {
        if (!close) {
          let close = ToastQueue.negative('Unable to save', {onClose: () => setClose(null)});
          setClose(() => close);
        } else {
          close();
        }
      }}
      variant="primary">
      {close ? 'Hide' : 'Show'} Toast
    </Button>
  );
}

----------------------------------------

TITLE: Styling Menu Components with CSS Selectors in React Aria
DESCRIPTION: Example of how to style React Aria components using CSS selectors. The components follow the 'react-aria-ComponentName' naming convention for their default class names.

LANGUAGE: css
CODE:
.react-aria-Menu {
  /* ... */
}

----------------------------------------

TITLE: Creating a Controlled Checkbox Component with React Aria
DESCRIPTION: Implementation of a controlled checkbox component where the selection state is managed by React state and updated through the onChange handler.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelection] = React.useState(false);

  return (
    <>
      <MyCheckbox isSelected={selected} onChange={setSelection}>
        Subscribe
      </MyCheckbox>
      <p>{`You are ${selected ? 'subscribed' : 'unsubscribed'}`}</p>
    </>
  );
}

----------------------------------------

TITLE: Creating a Multi-Month RangeCalendar Display
DESCRIPTION: Shows how to render multiple CalendarGrid elements to display multiple months at once. The visibleDuration prop specifies how many months are visible, and each CalendarGrid accepts an offset prop to specify its starting date.

LANGUAGE: tsx
CODE:
<RangeCalendar aria-label="Trip dates" visibleDuration={{months: 3}}>
  <header>
    <Button slot="previous">◀</Button>
    <Heading />
    <Button slot="next">▶</Button>
  </header>
  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>
    <CalendarGrid>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
    <CalendarGrid offset={{months: 1}}>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
    <CalendarGrid offset={{months: 2}}>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
  </div>
</RangeCalendar>

----------------------------------------

TITLE: Emphasized ToggleButton with Default Selection
DESCRIPTION: Shows how to create an emphasized ToggleButton that is selected by default, giving it visual prominence in the interface.

LANGUAGE: tsx
CODE:
<ToggleButton isEmphasized defaultSelected>Pin</ToggleButton>

----------------------------------------

TITLE: Building an HSBA Color Picker with ColorSlider
DESCRIPTION: Creates a complete HSBA color picker using ColorSlider components for hue, saturation, brightness, and alpha channels.

LANGUAGE: tsx
CODE:
function Example() {
  let [color, setColor] = React.useState(parseColor('hsba(0, 100%, 50%, 0.5)'));
  return (
    <>
      <ColorSlider channel="hue" value={color} onChange={setColor} />
      <ColorSlider channel="saturation" value={color} onChange={setColor} />
      <ColorSlider channel="brightness" value={color} onChange={setColor} />
      <ColorSlider channel="alpha" value={color} onChange={setColor} />
    </>
  );
}

----------------------------------------

TITLE: Setting a Custom First Day of the Week in Calendar
DESCRIPTION: Example showing how to change the first day of the week in a Calendar component from the locale default using the firstDayOfWeek prop.

LANGUAGE: tsx
CODE:
<MyCalendar aria-label="Event date" value={today(getLocalTimeZone())} firstDayOfWeek="mon" />

----------------------------------------

TITLE: Handling Custom Text Format Drops in React Spectrum ListBox
DESCRIPTION: This example shows how to accept and process text drops with a custom format. The acceptedDragTypes prop filters for items with a specific custom format, which is then parsed to create new list items.

LANGUAGE: tsx
CODE:
import {isTextDropItem} from 'react-aria-components';

interface TextItem {
  id: string,
  name: string,
  style: string
}

function DroppableListBox() {
  let [items, setItems] = React.useState<TextItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    acceptedDragTypes: ['custom-app-type'],
    async onRootDrop(e) {
      let items = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('custom-app-type')))
      );
      setItems(items);
    }
  });

  return (
    <ListBox aria-label="Droppable list" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => "Drop items here"}>
      {item => <ListBoxItem textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</ListBoxItem>}
    </ListBox>
  );
}

<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
  {/* see above */}
  <DraggableListBox />
  <DroppableListBox />
</div>

----------------------------------------

TITLE: Indeterminate ProgressCircle in React Spectrum
DESCRIPTION: Shows an indeterminate ProgressCircle, used when progress is happening but completion time can't be determined.

LANGUAGE: tsx
CODE:
<ProgressCircle aria-label="Loading…" isIndeterminate />

----------------------------------------

TITLE: Creating a Controlled Toggle Button in React
DESCRIPTION: This example shows how to implement a controlled toggle button component using React state. The selection state is managed by the parent component through the isSelected prop and onChange handler.

LANGUAGE: tsx
CODE:
function Example() {
  let [isSelected, setSelected] = React.useState(false);

  return (
    <ToggleButton
      isSelected={isSelected}
      onChange={setSelected}
      aria-label="Star">
      ★
    </ToggleButton>
  );
}

----------------------------------------

TITLE: Configuring Drop Operation in React Spectrum Table
DESCRIPTION: This example demonstrates how to use getDropOperation with useDragAndDrop to provide feedback when dragging over a drop target. The drop target only accepts PNG images with a 'copy' operation, providing visual feedback accordingly.

LANGUAGE: tsx
CODE:
function Example() {
  let [items, setItems] = React.useState<ImageItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    /*- begin highlight -*/
    getDropOperation: () => 'copy',
    /*- end highlight -*/
    acceptedDragTypes: ['image/png'],
    async onRootDrop(e) {
      ///- begin collapse -///
      let items = await Promise.all(
        e.items.filter(isFileDropItem).map(async item => {
          let file = await item.getFile();
          return {
            id: Math.random(),
            url: URL.createObjectURL(file),
            name: item.name,
            type: file.type,
            lastModified: file.lastModified
          };
        })
      );
      setItems(items);
      ///- end collapse -///
      // ...
    }
  });

  ///- begin collapse -///
  return (
    <Table
      aria-label="Droppable table"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader>
        <Column>Image</Column>
        <Column isRowHeader>Name</Column>
        <Column>Type</Column>
        <Column>Last Modified</Column>
      </TableHeader>
      <TableBody items={items} renderEmptyState={() => 'Drop PNGs here'}>
        {item => (
          <Row>
            <Cell><img src={item.url} /></Cell>
            <Cell>{item.name}</Cell>
            <Cell>{item.type}</Cell>
            <Cell>{new Date(item.lastModified).toLocaleString()}</Cell>
          </Row>
        )}
      </TableBody>
    </Table>
  );
  ///- end collapse -///
  // See "Files" example above...
}

----------------------------------------

TITLE: Internationalized RangeCalendar with Hindi/Indian Calendar
DESCRIPTION: Example showing a RangeCalendar with internationalization support using I18nProvider. The calendar is displayed in Hindi using the Indian calendar system while emitting Gregorian dates in the onChange handler.

LANGUAGE: tsx
CODE:
import {I18nProvider} from '@react-aria/i18n';

function Example() {
  let [range, setRange] = React.useState(null);
  return (
    <I18nProvider locale="hi-IN-u-ca-indian">
      <RangeCalendar aria-label="Date range" value={range} onChange={setRange} />
      <p>Start date: {range?.start.toString()}</p>
      <p>End date: {range?.end.toString()}</p>
    </I18nProvider>
  );
}

----------------------------------------

TITLE: Creating an Indeterminate Checkbox State in React Aria
DESCRIPTION: Example showing how to create a checkbox with an indeterminate state using the isIndeterminate prop. This state visually overrides the checked/unchecked appearance.

LANGUAGE: tsx
CODE:
<MyCheckbox isIndeterminate>Subscribe</MyCheckbox>

----------------------------------------

TITLE: Styling DatePicker Popover with CSS
DESCRIPTION: CSS example showing how to make the DatePicker popover match the width of the input group using the --trigger-width CSS custom property.

LANGUAGE: css
CODE:
.react-aria-Popover[data-trigger=DatePicker] {
  width: var(--trigger-width);
}

----------------------------------------

TITLE: Styling Description Slot with CSS
DESCRIPTION: CSS styling for the description slot in a DatePicker component, setting a smaller font size for the description text.

LANGUAGE: css
CODE:
.react-aria-DatePicker {
  [slot=description] {
    font-size: 12px;
  }
}

----------------------------------------

TITLE: CSS Styling for Week Calendar Layout
DESCRIPTION: CSS styles for the week calendar layout, using CSS Grid to position heading, navigation buttons, and calendar grid elements with proper spacing and alignment.

LANGUAGE: css
CODE:
.week {
  display: grid;
  grid-template-areas:
    "heading heading heading"
    "previous grid next";
  align-items: center;
  justify-items: center;
  gap: 8px;

  .react-aria-Heading {
    grid-area: heading;
    margin: 0;
    font-size: 1.2rem;
  }

  .react-aria-CalendarCell[data-outside-month] {
    display: block;
  }
}

----------------------------------------

TITLE: HTML Form Integration with React Aria Checkbox
DESCRIPTION: Example demonstrating how to integrate a checkbox with HTML forms using the name and value props, which enable form submission with the checkbox data.

LANGUAGE: tsx
CODE:
<MyCheckbox name="newsletter" value="subscribe">Subscribe</MyCheckbox>

----------------------------------------

TITLE: Configuring Drop Operations for Image Files
DESCRIPTION: Example showing how to customize drop operations for a ListBox that only accepts PNG images. The getDropOperation function is used to specify that only copy operations are allowed, and acceptedDragTypes limits drops to PNG files only.

LANGUAGE: tsx
CODE:
function Example() {
  ///- begin collapse -///
  let list = useListData({});
  let onRootDrop = async e => {
    let items = await Promise.all(
      e.items
        .map(async item => ({
          id: Math.random(),
          url: URL.createObjectURL(await item.getFile()),
          name: item.name
        }))
    );

    list.prepend(...items);
  };
  ///- end collapse -///
  // ...

  return (
    <ListBox
      aria-label="Images"
      items={list.items}
      /*- begin highlight -*/
      getDropOperation={() => 'copy'}
      /*- end highlight -*/
      acceptedDragTypes={['image/png']}
      onRootDrop={onRootDrop}>
      {item => (
        <Item textValue={item.name}>
          <div className="image-item">
            <img src={item.url} />
            <span>{item.name}</span>
          </div>
        </Item>
      )}
    </ListBox>
  );
}

----------------------------------------

TITLE: TextField with onChange Event Handler
DESCRIPTION: Demonstrates how to use the onChange event with TextField to mirror the entered text in another element.

LANGUAGE: tsx
CODE:
function Example() {
  let [text, setText] = React.useState('');

  return (
    <Flex direction="column" gap="size-150">
      <TextField
        onChange={setText}
        label="Your text" />
      <pre>Mirrored text: {text}</pre>
    </Flex>
  );
}

----------------------------------------

TITLE: Implementing List and ListItem Components with React Aria
DESCRIPTION: Defines the core List and ListItem components using useGridList and useGridListItem hooks from React Aria. The List component renders a collection of items while the ListItem component handles row rendering with proper ARIA attributes and focus states.

LANGUAGE: tsx
CODE:
import {useListState} from '@react-stately/list';
import {mergeProps} from '@react-aria/utils';
import {useRef} from 'react';
import {useFocusRing} from '@react-aria/focus';
import {useGridList, useGridListItem} from '@react-aria/gridlist';

function List(props) {
  let state = useListState(props);
  let ref = useRef<HTMLUListElement | null>(null);
  let { gridProps } = useGridList(props, state, ref);

  return (
    <ul {...gridProps} ref={ref} className="list">
      {[...state.collection].map((item) => (
        <ListItem key={item.key} item={item} state={state} />
      ))}
    </ul>
  );
}

function ListItem({ item, state }) {
  let ref = React.useRef(null);
  let {rowProps, gridCellProps, isPressed} = useGridListItem(
    {node: item},
    state,
    ref
  );

  let {isFocusVisible, focusProps} = useFocusRing();
  let showCheckbox = state.selectionManager.selectionMode !== 'none' && state.selectionManager.selectionBehavior === 'toggle';

  return (
    <li
      {...mergeProps(rowProps, focusProps)}
      ref={ref}
      className={`${isPressed ? 'pressed' : ''} ${isFocusVisible ? 'focus-visible' : ''}`}>
      <div {...gridCellProps}>
        {showCheckbox && <ListCheckbox item={item} state={state} />}
        {item.rendered}
      </div>
    </li>
  );
}

----------------------------------------

TITLE: Using Router Component with Tabs and Links
DESCRIPTION: Example demonstrating how to use the custom Router component to navigate between tabs when links are clicked.

LANGUAGE: tsx
CODE:
import {Link} from 'react-aria-components';

<Router>
  <Tabs>
    <TabList aria-label="Mesozoic time periods">
      <Tab id="triassic">Triassic</Tab>
      <Tab id="jurassic">Jurassic</Tab>
      <Tab id="cretaceous">Cretaceous</Tab>
    </TabList>
    <TabPanel id="triassic">
      The Triassic ranges roughly from 252 million to 201 million years ago,
      preceding the <Link data-href="jurassic">Jurassic Period</Link>.
    </TabPanel>
    <TabPanel id="jurassic">
      The Jurassic ranges from 200 million years to 145 million years ago,
      preceding the <Link data-href="cretaceous">Cretaceous Period</Link>.
    </TabPanel>
    <TabPanel id="cretaceous">
      The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.
    </TabPanel>
  </Tabs>
</Router>

----------------------------------------

TITLE: Implementing Dynamic Menu Sections with Hierarchical Data
DESCRIPTION: Example showing how to create menu sections from a hierarchical data structure. Each section has its own items array, and the Collection component is used to render child items within sections.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-aria-components';
import {Collection} from 'react-aria-components';

function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set([1,3]));
  let openWindows = [
    {
      name: 'Left Panel',
      id: 'left',
      children: [
        {id: 1, name: 'Final Copy (1)'}
      ]
    },
    {
      name: 'Right Panel',
      id: 'right',
      children: [
        {id: 2, name: 'index.ts'},
        {id: 3, name: 'package.json'},
        {id: 4, name: 'license.txt'}
      ]
    }
  ];

  return (
    <MyMenuButton
      label="Window"
      items={openWindows}
      selectionMode="multiple"
      selectedKeys={selected}
      onSelectionChange={setSelected}>
      {section => (
        <MenuSection>
          <Header>{section.name}</Header>
          <Collection items={section.children}>
            {item => <MenuItem>{item.name}</MenuItem>}
          </Collection>
        </MenuSection>
      )}
    </MyMenuButton>
  );
}

----------------------------------------

TITLE: Implementing Custom Validation Logic for DateRangePicker
DESCRIPTION: Example of using the validate function to implement custom validation logic that restricts date ranges to a maximum of one week duration.

LANGUAGE: tsx
CODE:
<Form>
  <MyDateRangePicker
    label="Trip dates"
    validate={range => range?.end.compare(range.start) > 7 ? 'Maximum stay duration is 1 week.' : null}
    defaultValue={{
      start: today(getLocalTimeZone()),
      end: today(getLocalTimeZone()).add({ weeks: 1, days: 3 })
    }} />
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Breadcrumbs with Custom Icon Separators
DESCRIPTION: Implementation of breadcrumbs with custom SVG icons as separators instead of CSS-based separators.

LANGUAGE: tsx
CODE:
import ChevronIcon from '@spectrum-icons/workflow/ChevronDoubleRight';

<Breadcrumbs>
  <Breadcrumb className="my-item">
    <Link href="/">Home</Link>
    <ChevronIcon size="S" />
  </Breadcrumb>
  <Breadcrumb><Link>React Aria</Link></Breadcrumb>
</Breadcrumbs>

----------------------------------------

TITLE: LabeledValue with DateTime Value
DESCRIPTION: Shows how to display the current date and time using the now function from @internationalized/date.

LANGUAGE: tsx
CODE:
import {now, getLocalTimeZone} from '@internationalized/date';

<LabeledValue label="Page load time" value={now(getLocalTimeZone())} />

----------------------------------------

TITLE: Applying Semantic Colors to Workflow Icons
DESCRIPTION: This example shows how to use the color prop to apply Spectrum's semantic colors (negative, notice, positive, informative) to icons for different contextual meanings.

LANGUAGE: tsx
CODE:
import Alert from '@spectrum-icons/workflow/Alert';

<Flex gap="size-100">
  <Alert aria-label="Default Alert" />
  <Alert aria-label="Negative Alert" color="negative" />
  <Alert aria-label="Notification Alert" color="notice" />
  <Alert aria-label="Positive Alert" color="positive" />
  <Alert aria-label="Informative Alert" color="informative" />
</Flex>

----------------------------------------

TITLE: SearchAutocomplete with Dynamic Sectioned Items
DESCRIPTION: Example demonstrating how to use SearchAutocomplete with dynamic sections from a hierarchical data structure, using items prop for Section components.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {name: 'Fruit', children: [
      {name: 'Apple'},
      {name: 'Banana'},
      {name: 'Orange'},
      {name: 'Honeydew'},
      {name: 'Grapes'},
      {name: 'Watermelon'},
      {name: 'Cantaloupe'},
      {name: 'Pear'}
    ]},
    {name: 'Vegetable', children: [
      {name: 'Cabbage'},
      {name: 'Broccoli'},
      {name: 'Carrots'},
      {name: 'Lettuce'},
      {name: 'Spinach'},
      {name: 'Bok Choy'},
      {name: 'Cauliflower'},
      {name: 'Potatoes'}
    ]}
  ];

  return (
    <SearchAutocomplete label="Preferred fruit or vegetable" defaultItems={options}>
      {item => (
        <Section key={item.name} items={item.children} title={item.name}>
          {item => <Item key={item.name}>{item.name}</Item>}
        </Section>
      )}
    </SearchAutocomplete>
  );
}

----------------------------------------

TITLE: Using a Custom Week Calendar Grid Component
DESCRIPTION: Example showing how to use the custom WeekCalendarGrid component within a Calendar, setting the visible duration to one week and providing a default value.

LANGUAGE: tsx
CODE:
<Calendar visibleDuration={{weeks: 1}} defaultValue={today(getLocalTimeZone())}>
  <div className="week">
    <Heading />
    <Button slot="previous">◀</Button>
    <WeekCalendarGrid />
    <Button slot="next">▶</Button>
  </div>
</Calendar>

----------------------------------------

TITLE: Nested Providers for Complex Property Groups
DESCRIPTION: Shows how to use nested Providers to create a form with quiet styling and conditional disabling based on user input.

LANGUAGE: tsx
CODE:
function Register() {
  let [email, setEmail] = React.useState('');

  return (
    <Flex direction="column" gap="size-100" alignItems="start">
      <Provider isQuiet>
        <TextField
          label="Email"
          value={email}
          onChange={setEmail} />
        <Provider isDisabled={email.length === 0}>
          <Picker label="Favorite color">
            <Item key="magenta">Magenta</Item>
            <Item key="indigo">Indigo</Item>
            <Item key="chartreuse">Chartreuse</Item>
          </Picker>
          <Button variant="primary">Submit</Button>
        </Provider>
      </Provider>
    </Flex>
  );
}

----------------------------------------

TITLE: Controlled ColorField with State Management
DESCRIPTION: Implementation of a controlled ColorField that uses state to manage the color value, with parseColor to convert hex strings to Color objects and display the current value.

LANGUAGE: tsx
CODE:
import {parseColor} from 'react-aria-components';

function Example() {
  let [color, setColor] = React.useState(parseColor('#7f007f'));
  return (
    <>
      <MyColorField label="Color" value={color} onChange={setColor} />
      <p>Current color value: {color?.toString('hex')}</p>
    </>
  );
}

----------------------------------------

TITLE: Defining QuickActions and QuickActionsItem Interfaces in TypeScript
DESCRIPTION: TypeScript interface definitions for QuickActions and QuickActionsItem components. QuickActions supports icon or text variants with configurable visibility, while QuickActionsItem represents individual action items with optional icons and event handlers.

LANGUAGE: typescript
CODE:
interface QuickActions {
  variant?: 'icon' | 'text',
  maxVisibleItems?: number,
  children: ReactElement<QuickActionsItem> | ReactElement<QuickActionsItem>[]
}

interface QuickActionsItem {
  children: ReactNode, // label. In icon variant this is displayed as a tooltip.
  icon?: ReactNode,
  isDisabled?: boolean,
  onPress?: (e: Event) => void
}

----------------------------------------

TITLE: Creating a Customized Menu Component in React Aria
DESCRIPTION: Example of how to create a wrapper component to customize props such as className for a Menu component, enabling component composition.

LANGUAGE: tsx
CODE:
function MyMenu(props) {
  return <Menu {...props} className="my-menu" />
}

----------------------------------------

TITLE: RangeCalendar with Formatted Date Output
DESCRIPTION: Example demonstrating how to use the onChange event from RangeCalendar to display the selected date range in a localized format using the useDateFormatter hook from React Aria.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@react-aria/i18n';

function Example() {
  let [range, setRange] = React.useState({
    start: parseDate('2020-07-03'),
    end: parseDate('2020-07-10')
  });
  let formatter = useDateFormatter({dateStyle: 'long'});

  return (
    <>
      <RangeCalendar aria-label="Date range" value={range} onChange={setRange} />
      <p>
        Selected date:{' '}
        {formatter.formatRange(
          range.start.toDate(getLocalTimeZone()),
          range.end.toDate(getLocalTimeZone())
        )}
      </p>
    </>
  );
}

----------------------------------------

TITLE: Implementing FocusRing Component in React
DESCRIPTION: Example showing how to implement the FocusRing component around a button element to apply a focus ring class when the button receives keyboard focus.

LANGUAGE: tsx
CODE:
import {FocusRing} from '@react-aria/focus';

<FocusRing focusRingClass="focus-ring">
  <button className="button">Test</button>
</FocusRing>

----------------------------------------

TITLE: CSS for Disabled Switch State
DESCRIPTION: CSS styling for the disabled state of a Switch component.

LANGUAGE: css
CODE:
.react-aria-Switch {
  &[data-disabled] {
    color: var(--text-color-disabled);

    .indicator {
      border-color: var(--border-color-disabled);

      &:before {
        background: var(--border-color-disabled);
      }
    }
  }
}

----------------------------------------

TITLE: Using Custom ComboBox with Standard Components
DESCRIPTION: Demonstrates using a custom ComboBox implementation while reusing standard components from react-aria-components, showcasing the flexibility of the component architecture.

LANGUAGE: jsx
CODE:
import {Button, Input, Item, Label, ListBox, Popover} from 'react-aria-components';
import {MyComboBox} from './MyComboBox';

<MyComboBox>
  <Label>Favorite Animal</Label>
  <div>
    <Input />
    <Button>▼</Button>
  </div>
  <Popover>
    <ListBox>
      <Item>Cat</Item>
      <Item>Dog</Item>
    </ListBox>
  </Popover>
</MyComboBox>

----------------------------------------

TITLE: Simple Text Well Example in React Spectrum
DESCRIPTION: Shows a simple example of using the Well component with a playful text content.

LANGUAGE: tsx
CODE:
<Well>Well, well, well</Well>

----------------------------------------

TITLE: ColorArea with onChange and onChangeEnd Event Handlers
DESCRIPTION: Example demonstrating event handling in ColorArea. It uses onChange to track current value during dragging and onChangeEnd to capture the final value when the user releases the handle.

LANGUAGE: tsx
CODE:
function Example() {
  let [currentValue, setCurrentValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));
  let [finalValue, setFinalValue] = React.useState(currentValue);

  return (
    <div>
      <MyColorArea
        value={currentValue}
        onChange={setCurrentValue}
        onChangeEnd={setFinalValue} />
      <p>Current value: {currentValue.toString('hsl')}</p>
      <p>Final value: {finalValue.toString('hsl')}</p>
    </div>
  );
}

----------------------------------------

TITLE: Formatting Meter Value Display
DESCRIPTION: Shows how to use formatOptions to customize the display format of the Meter value, using Intl.NumberFormat options to show a currency value.

LANGUAGE: tsx
CODE:
<Meter
  label="Currency"
  formatOptions={{style: 'currency', currency: 'JPY'}}
  value={60} />

----------------------------------------

TITLE: Controlled and Uncontrolled DateField Examples
DESCRIPTION: Demonstrates both controlled and uncontrolled implementations of DateField with the parseDate function from @internationalized/date to convert string representations to date objects.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState(parseDate('2020-02-03'));

  return (
    <Flex gap="size-150" wrap>
      <DateField
        label="Date (uncontrolled)"
        defaultValue={parseDate('2020-02-03')} />
      <DateField
        label="Date (controlled)"
        value={value}
        onChange={setValue} />
    </Flex>
  );
}

----------------------------------------

TITLE: DatePicker with Time Zone Support
DESCRIPTION: Demonstrates how to use DatePicker with time zone awareness by providing a ZonedDateTime object as the value using parseZonedDateTime.

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

<DatePicker
  label="Event date"
  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />

----------------------------------------

TITLE: Static Sections in Select Component
DESCRIPTION: Implementation of grouped options in a Select component using sections. This example shows how to organize items into logical groups with headers using ListBoxSection and Header components.

LANGUAGE: tsx
CODE:
import {ListBoxSection, Header} from 'react-aria-components';

<MySelect label="Preferred fruit or vegetable">
  <ListBoxSection>
    <Header>Fruit</Header>
    <ListBoxItem id="Apple">Apple</ListBoxItem>
    <ListBoxItem id="Banana">Banana</ListBoxItem>
    <ListBoxItem id="Orange">Orange</ListBoxItem>
    <ListBoxItem id="Honeydew">Honeydew</ListBoxItem>
    <ListBoxItem id="Grapes">Grapes</ListBoxItem>
    <ListBoxItem id="Watermelon">Watermelon</ListBoxItem>
    <ListBoxItem id="Cantaloupe">Cantaloupe</ListBoxItem>
    <ListBoxItem id="Pear">Pear</ListBoxItem>
  </ListBoxSection>
  <ListBoxSection>
    <Header>Vegetable</Header>
    <ListBoxItem id="Cabbage">Cabbage</ListBoxItem>
    <ListBoxItem id="Broccoli">Broccoli</ListBoxItem>
    <ListBoxItem id="Carrots">Carrots</ListBoxItem>
    <ListBoxItem id="Lettuce">Lettuce</ListBoxItem>
    <ListBoxItem id="Spinach">Spinach</ListBoxItem>
    <ListBoxItem id="Bok Choy">Bok Choy</ListBoxItem>
    <ListBoxItem id="Cauliflower">Cauliflower</ListBoxItem>
    <ListBoxItem id="Potatoes">Potatoes</ListBoxItem>
  </ListBoxSection>
</MySelect>

----------------------------------------

TITLE: Using FormContext.Provider for Global Form Submission Handling in React Aria Components
DESCRIPTION: This example demonstrates how to add a global form submission handler using FormContext.Provider. The handler prevents the default form submission behavior and could be used to centralize API submission logic for all forms within its scope.

LANGUAGE: tsx
CODE:
let onSubmit = e => {
  e.preventDefault();
  // Submit form data to an API...
};

<FormContext.Provider value={{onSubmit}}>
  <Form>
    {/* ... */}
  </Form>
</FormContext.Provider>

----------------------------------------

TITLE: ColorField Anatomy with Label, Input, Text, and Error
DESCRIPTION: Demonstrates the complete structure of a ColorField component including optional description and error message elements for providing context and validation feedback.

LANGUAGE: tsx
CODE:
import {ColorField, Label, Input, Text, FieldError} from 'react-aria-components';

<ColorField>
  <Label />
  <Input />
  <Text slot="description" />
  <FieldError />
</ColorField>

----------------------------------------

TITLE: Building an HSLA Color Picker with ColorSlider
DESCRIPTION: Creates a complete HSLA color picker using ColorSlider components for hue, saturation, lightness, and alpha channels.

LANGUAGE: tsx
CODE:
function Example() {
  let [color, setColor] = React.useState(parseColor('hsla(0, 100%, 50%, 0.5)'));

  return (
    <Flex direction="column">
      <ColorSlider channel="hue" value={color} onChange={setColor} />
      <ColorSlider channel="saturation" value={color} onChange={setColor} />
      <ColorSlider channel="lightness" value={color} onChange={setColor} />
      <ColorSlider channel="alpha" value={color} onChange={setColor} />
    </Flex>
  );
}

----------------------------------------

TITLE: Creating Complex Items with Icons and Descriptions in ComboBox
DESCRIPTION: Shows how to create ComboBox items with rich content including icons and descriptions. Uses the slot prop to distinguish different Text elements within the Item component.

LANGUAGE: tsx
CODE:
<ComboBox label="Select action">
  <Item textValue="Add to queue">
    <Add />
    <Text>Add to queue</Text>
    <Text slot="description">Add to current watch queue.</Text>
  </Item>
  <Item textValue="Add review">
    <Draw />
    <Text>Add review</Text>
    <Text slot="description">Post a review for the episode.</Text>
  </Item>
    <Item textValue="Subscribe to series">
    <Bell />
    <Text>Subscribe to series</Text>
    <Text slot="description">Add series to your subscription list and be notified when a new episode airs.</Text>
  </Item>
  <Item textValue="Report">
    <Alert />
    <Text>Report</Text>
    <Text slot="description">Report an issue/violation.</Text>
  </Item>
</ComboBox>

----------------------------------------

TITLE: Basic Form Component Example in React Spectrum
DESCRIPTION: A simple example of the Form component containing TextField and Checkbox elements with a maximum width constraint.

LANGUAGE: tsx
CODE:
<Form maxWidth="size-3600">
  <TextField label="Email" />
  <TextField label="Password" />
  <Checkbox>Remember me</Checkbox>
</Form>

----------------------------------------

TITLE: Setting Unavailable Dates in DatePicker in React Spectrum
DESCRIPTION: Demonstrates how to mark certain dates as unavailable in DatePicker using the isDateUnavailable prop. This example disables weekends and specific date ranges while also setting a minimum date value.

LANGUAGE: tsx
CODE:
import {today, isWeekend} from '@internationalized/date';
import {useLocale} from '@adobe/react-spectrum';

function Example() {
  let now = today(getLocalTimeZone());
  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  let {locale} = useLocale();
  return (
    <DatePicker
      label="Appointment date"
      minValue={today(getLocalTimeZone())}
      /*- begin highlight -*/
      isDateUnavailable={date => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0)}
      /*- end highlight -*/
      validationBehavior="native" />
  );
}

----------------------------------------

TITLE: Importing Tailwind CSS in React
DESCRIPTION: Imports the Tailwind CSS global styles for the image grid example.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Controlled ToggleButton with State Management
DESCRIPTION: Demonstrates how to implement a controlled ToggleButton component by managing its selection state with React hooks and handling state changes through the onChange event.

LANGUAGE: tsx
CODE:
function Example() {
  let [isSelected, setSelected] = React.useState(false);

  return (
    <ToggleButton
      isEmphasized
      isSelected={isSelected}
      onChange={setSelected}
      aria-label="Pin">
      <Pin />
    </ToggleButton>
  );
}

----------------------------------------

TITLE: Multiline Breadcrumbs in React Spectrum
DESCRIPTION: Example showing how to create multiline Breadcrumbs where the last item is placed below the others for emphasis, using the isMultiline prop.

LANGUAGE: tsx
CODE:
<Breadcrumbs isMultiline>
  <Item key="home">Home</Item>
  <Item key="trendy">Trendy</Item>
  <Item key="march 2020 assets">March 2020 Assets</Item>
</Breadcrumbs>

----------------------------------------

TITLE: Creating a Reusable Switch Component
DESCRIPTION: Example of creating a reusable Switch component by wrapping the core Switch functionality into a custom component with TypeScript interfaces.

LANGUAGE: tsx
CODE:
import type {SwitchProps} from 'react-aria-components';

interface MySwitchProps extends Omit<SwitchProps, 'children'> {
  children: React.ReactNode
}

function MySwitch({children, ...props}: MySwitchProps) {
  return (
    <Switch {...props}>
      <div className="indicator" />
      {children}
    </Switch>
  );
}

<MySwitch>Wi-Fi</MySwitch>

----------------------------------------

TITLE: Setting Minimum and Maximum Time Values
DESCRIPTION: Example demonstrating how to set minimum and maximum time constraints on a TimeField to limit selections within business hours.

LANGUAGE: tsx
CODE:
<Form>
  <MyTimeField
    label="Meeting time"
    /*- begin highlight -*/
    minValue={new Time(9)}
    maxValue={new Time(17)}
    /*- end highlight -*/
    defaultValue={new Time(8)} />
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: AlertDialog with Multiple Action Buttons
DESCRIPTION: Shows an AlertDialog with primary, secondary, and cancel buttons, displaying an information message about profile registration.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Exit</ActionButton>
  <AlertDialog
    variant="information"
    title="Register profile"
    primaryActionLabel="Register"
    secondaryActionLabel="Remind me later"
    cancelLabel="Cancel">
    You have not saved your profile information
    for this account. Would you like to register now?
  </AlertDialog>
</DialogTrigger>

----------------------------------------

TITLE: Targeting React Aria Component States with Data Attributes
DESCRIPTION: Examples of using data attributes to target different UI states of React Aria components in CSS selectors.

LANGUAGE: css
CODE:
.react-aria-Tab[data-selected] {
  /* ... */
}

.react-aria-Tab[data-focus-visible] {
  /* ... */
}

----------------------------------------

TITLE: Example Usage of mergeProps with Event Handlers and Class Names
DESCRIPTION: Demonstrates how to use mergeProps to combine two objects containing className and onKeyDown event handlers. Shows how multiple event handlers and class names are properly merged.

LANGUAGE: tsx
CODE:
let a = {
  className: 'foo',
  onKeyDown(e) {
    if (e.key === 'Enter') {
      console.log('enter')
    }
  }
};

let b = {
  className: 'bar',
  onKeyDown(e) {
    if (e.key === ' ') {
      console.log('space')
    }
  }
};

let merged = mergeProps(a, b);

----------------------------------------

TITLE: RadioGroup with Horizontal Orientation
DESCRIPTION: Shows how to change the default vertical orientation of RadioGroup to horizontal using the orientation prop.

LANGUAGE: tsx
CODE:
<RadioGroup label="Favorite avatar" orientation="horizontal">
  <Radio value="wizard">Wizard</Radio>
  <Radio value="dragon">Dragon</Radio>
</RadioGroup>

----------------------------------------

TITLE: Configuring ProgressBar with Static Colors for Different Backgrounds
DESCRIPTION: This example demonstrates how to use the staticColor prop to ensure ProgressBar is visible on dark or light backgrounds by setting appropriate contrast colors.

LANGUAGE: tsx
CODE:
<View backgroundColor="static-blue-700" padding="size-300">
  <ProgressBar label="Loading…" staticColor="white" value={5} />
</View>
<View backgroundColor="static-yellow-400" padding="size-300">
  <ProgressBar label="Loading…" staticColor="black" value={5} />
</View>

----------------------------------------

TITLE: Accessible Form with ARIA Labeling in React Spectrum
DESCRIPTION: Example showing how to make a Form accessible by using aria-labelledby to associate it with a heading element for assistive technology.

LANGUAGE: tsx
CODE:
<h3 id="label-3">Personal Information</h3>
<Form maxWidth="size-3600" aria-labelledby="label-3">
  <TextField label="First Name" />
  <TextField label="Last Name" />
  <RadioGroup label="Favorite pet">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
    <Radio value="dragons">Dragons</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: Validating Partial Number Input with NumberParser
DESCRIPTION: Shows how to use isValidPartialNumber method to validate incomplete user input during typing, accepting potential valid inputs while rejecting invalid ones.

LANGUAGE: tsx
CODE:
let parser = new NumberParser('en-US', {style: 'unit', unit: 'inch'});
parser.isValidPartialNumber('.'); // true
parser.isValidPartialNumber('.2'); // true
parser.isValidPartialNumber('10 in'); // true
parser.isValidPartialNumber('10 i'); // false
parser.isValidPartialNumber('10 x'); // false

----------------------------------------

TITLE: TagGroup with Row Limiting in TSX
DESCRIPTION: Demonstrates how to limit the number of visible rows in a TagGroup with the maxRows prop, which adds a 'show more' action button.

LANGUAGE: tsx
CODE:
<View maxWidth="size-3400" minHeight="size-2000" padding="size-150" borderWidth="thin" borderColor="dark" borderRadius="medium">
  <TagGroup
    /*- begin highlight -*/
    maxRows={2}
    /*- end highlight -*/
    aria-label="Static TagGroup items example with maxRows set">
    <Item>News</Item>
    <Item>Travel</Item>
    <Item>Gaming</Item>
    <Item>Shopping</Item>
    <Item>Business</Item>
    <Item>Entertainment</Item>
    <Item>Food</Item>
    <Item>Technology</Item>
    <Item>Politics</Item>
    <Item>Health</Item>
    <Item>Science</Item>
  </TagGroup>
</View>

----------------------------------------

TITLE: Creating a Controlled Selection TableView Component
DESCRIPTION: Implementation of a reusable TableView component with controlled selection using useState. The component displays Pokémon data and allows controlling selection state programmatically.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function PokemonTable(props) {
  let columns = [
    {name: 'Name', uid: 'name'},
    {name: 'Type', uid: 'type'},
    {name: 'Level', uid: 'level'}
  ];

  let rows = [
    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},
    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},
    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},
    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}
  ];

  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));

  return (
    <TableView aria-label="Table with controlled selection" selectionMode="multiple" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys} {...props}>
      <TableHeader columns={columns}>
        {column => (
          <Column key={column.uid} align={column.uid === 'level' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={rows}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </TableView>
  );
}

----------------------------------------

TITLE: Using the SelectAllListBox Component with Checkbox and ListBox
DESCRIPTION: This example shows how to use the SelectAllListBox component with a Checkbox for toggling selection and a ListBox with multiple selectable items.

LANGUAGE: tsx
CODE:
import {Checkbox} from 'react-aria-components';

<SelectAllListBox>
  <Checkbox style={{marginBottom: '8px'}}>
    <div className="checkbox">
      <svg viewBox="0 0 18 18" aria-hidden="true">
        <polyline points="1 9 7 14 15 4" />
      </svg>
    </div>
    Unsubscribe
  </Checkbox>
  <ListBox selectionMode="multiple" aria-label="Ice cream flavors">
    <ListBoxItem>Chocolate</ListBoxItem>
    <ListBoxItem>Mint</ListBoxItem>
    <ListBoxItem>Strawberry</ListBoxItem>
    <ListBoxItem>Vanilla</ListBoxItem>
  </ListBox>
</SelectAllListBox>

----------------------------------------

TITLE: Basic AlertDialog Example with Warning Variant
DESCRIPTION: Shows a basic implementation of an AlertDialog with a warning variant, triggered by an ActionButton. The dialog displays a low disk space warning with a confirm button.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Save</ActionButton>
  <AlertDialog
    title="Low Disk Space"
    variant="warning"
    primaryActionLabel="Confirm">
    You are running low on disk space.
    Delete unnecessary files to free up space.
  </AlertDialog>
</DialogTrigger>

----------------------------------------

TITLE: Styling Invalid NumberField States
DESCRIPTION: CSS for styling NumberField in invalid states, applying specific border colors to inputs and buttons when validation fails.

LANGUAGE: css
CODE:
.react-aria-NumberField {
  &[data-invalid] {
    .react-aria-Input,
    .react-aria-Button {
      border-color: var(--invalid-color);
    }

    &:focus-within {
      .react-aria-Input,
      .react-aria-Button {
        border-color: var(--focus-ring-color);
      }
    }
  }

  .react-aria-FieldError {
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: Basic Heading Component Example in React Spectrum
DESCRIPTION: Demonstrates basic usage of the Heading component with a level 4 heading. The level prop determines the semantic heading level (h1-h6).

LANGUAGE: tsx
CODE:
<Heading level={4}>Edit</Heading>

----------------------------------------

TITLE: ColorPicker with Customizable Channel Sliders
DESCRIPTION: Implements a color picker with customizable channel sliders and color space selection via a Picker component.

LANGUAGE: tsx
CODE:
import type {ColorSpace} from '@react-spectrum/color';
import {ColorSlider, getColorChannels} from '@react-spectrum/color';
import {Picker, Item} from '@react-spectrum/picker';

function Example() {
  let [space, setSpace] = React.useState<ColorSpace>('rgb');

  return (
    <ColorPicker label="Color" defaultValue="#184">
      <Flex direction="column" gap="size-100">
        <Picker aria-label="Color space" isQuiet selectedKey={space} onSelectionChange={s => setSpace(s as ColorSpace)}>
          <Item key="rgb">RGB</Item>
          <Item key="hsl">HSL</Item>
          <Item key="hsb">HSB</Item>
        </Picker>
        {getColorChannels(space).map(channel => (
          <ColorSlider key={channel} colorSpace={space} channel={channel} />
        ))}
        <ColorSlider channel="alpha" />
      </Flex>
    </ColorPicker>
  );
}

----------------------------------------

TITLE: Using Time Zones with DatePicker and ZonedDateTime
DESCRIPTION: This example demonstrates how to use DatePicker with explicit time zone information. It shows parsing a date string with a specific time zone using parseZonedDateTime from the @internationalized/date package.

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

<MyDatePicker
  label="Event date"
  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />

----------------------------------------

TITLE: Controlling the Focused Date in RangeCalendar
DESCRIPTION: This example demonstrates how to control which date is focused in a RangeCalendar using the focusedValue and onFocusChange props, with a button to reset the focused date to the initial value.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

function Example() {
  let defaultDate = new CalendarDate(2021, 7, 1);
  let [focusedDate, setFocusedDate] = React.useState(defaultDate);

  return (
    <Flex direction="column" alignItems="start" gap="size-200">
      <ActionButton onPress={() => setFocusedDate(defaultDate)}>Reset focused date</ActionButton>
      <RangeCalendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />
    </Flex>
  );
}

----------------------------------------

TITLE: SearchField with HTML Form Integration
DESCRIPTION: Example showing how to integrate a SearchField with HTML forms using the name prop and other input attributes that pass through to the underlying element.

LANGUAGE: TypeScript
CODE:
<SearchField label="Email" name="email" type="email" />

----------------------------------------

TITLE: Basic InlineAlert Example in React Spectrum
DESCRIPTION: Demonstrates the basic usage of the InlineAlert component with a heading and content.

LANGUAGE: tsx
CODE:
<InlineAlert>
  <Heading>Payment Information</Heading>
  <Content>Enter your billing address, shipping address, and payment method to complete your purchase.</Content>
</InlineAlert>

----------------------------------------

TITLE: Building a FieldGroup Component with NumberFieldContext
DESCRIPTION: Creating a FieldGroup component that leverages NumberFieldContext to provide shared properties to multiple NumberField components.

LANGUAGE: tsx
CODE:
import {NumberFieldContext} from 'react-aria-components';

interface FieldGroupProps {
  title?: string,
  children?: React.ReactNode,
  isReadOnly?: boolean
}

function FieldGroup({title, children, isReadOnly}: FieldGroupProps) {
  return (
    <fieldset>
      <legend>{title}</legend>
      <NumberFieldContext.Provider value={{isReadOnly}}>
        {children}
      </NumberFieldContext.Provider>
    </fieldset>
  );
}

<FieldGroup title="Dimensions" isReadOnly>
  <MyNumberField label="Width" defaultValue={1024} />
  <MyNumberField label="Height" defaultValue={768} />
</FieldGroup>

----------------------------------------

TITLE: Creating a Custom Label Component for CheckboxGroup using Context
DESCRIPTION: This snippet demonstrates how to create a custom label component that works with CheckboxGroup by consuming the LabelContext. It uses the useContextProps hook to merge local props with those from context.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Controlled Tooltip Open State
DESCRIPTION: Example of implementing a controlled tooltip with React state to manage when the tooltip is displayed. This allows for programmatic control of the tooltip's visibility.

LANGUAGE: tsx
CODE:
function Example() {
  let [isOpen, setOpen] = React.useState(false);

  return (
    <>
      <TooltipTrigger isOpen={isOpen} onOpenChange={setOpen}>
        <Button>📣</Button>
        <MyTooltip>Notifications</MyTooltip>
      </TooltipTrigger>
      <p>Tooltip is {isOpen ? 'showing' : 'not showing'}</p>
    </>
  );
}

----------------------------------------

TITLE: Adding Wrapper Elements to TooltipTrigger
DESCRIPTION: Shows how to add a custom wrapper element with styling around tooltip trigger content.

LANGUAGE: jsx
CODE:
<TooltipTrigger>
  <div className="my-tooltip-trigger">
    {/* ... */}
  </div>
</TooltipTrigger>

----------------------------------------

TITLE: Creating a Custom Icon Component in React Spectrum
DESCRIPTION: Example of creating a star icon by wrapping an SVG inside the Icon component. The implementation shows proper usage of viewBox and path attributes for the SVG.

LANGUAGE: tsx
CODE:
function CustomIcon(props) {
  return(
    <Icon {...props}>
      <svg viewBox="0 0 36 36">
        <path d="M18.477.593,22.8,12.029l12.212.578a.51.51,0,0,1,.3.908l-9.54,7.646,3.224,11.793a.51.51,0,0,1-.772.561L18,26.805,7.78,33.515a.51.51,0,0,1-.772-.561l3.224-11.793L.692,13.515a.51.51,0,0,1,.3-.908L13.2,12.029,17.523.593A.51.51,0,0,1,18.477.593Z" />
      </svg>
    </Icon>
  );
}

<CustomIcon aria-label="Star" />

----------------------------------------

TITLE: CSS for Disabled Tabs
DESCRIPTION: CSS styles for disabled tabs, including color adjustments for the disabled state and selected disabled tabs.

LANGUAGE: css
CODE:
.react-aria-Tab {
  &[data-disabled] {
    color: var(--text-color-disabled);
    &[data-selected] {
      --border-color: var(--border-color-disabled);
    }
  }
}

----------------------------------------

TITLE: Implementing Heading Semantic Element with Context Consumption
DESCRIPTION: Example implementation of a Heading semantic element that consumes styles from the SlotContext provided by its parent container.

LANGUAGE: JSX
CODE:
export const Heading = (props) => {
  let { heading } = useSlotProvider();

  return (
    <h1 className={classNames(styles, heading, props.className)}>
      <SlotContext.Provider
        value={{
          avatar: null,
          heading: null,
          text: null,
          section: null,
          spacer: null,
          item: null
        }}>
        {props.children}
      </SlotContext.Provider>
    </h1>
  );
};

----------------------------------------

TITLE: Dynamic TagGroup with Data Source in TSX
DESCRIPTION: Demonstrates how to implement a TagGroup with items from an external data source, using the items prop and a mapping function.

LANGUAGE: tsx
CODE:
const items = [
  {id: 1, name: 'News'},
  {id: 2, name: 'Travel'},
  {id: 3, name: 'Gaming'},
  {id: 4, name: 'Shopping'}
];

<TagGroup items={items} aria-label="Dynamic TagGroup items example">
  {item => <Item>{item.name}</Item>}
</TagGroup>

----------------------------------------

TITLE: Creating a Wrapper Component for Customization
DESCRIPTION: Shows how to create a wrapper component to customize props passed to a React Aria component, enabling advanced customization through composition.

LANGUAGE: tsx
CODE:
function MyCalendarCell(props) {
  return <CalendarCell {...props} className="my-item" />
}

----------------------------------------

TITLE: Creating a Custom Week Calendar Grid with useCalendarGrid Hook
DESCRIPTION: Implements a custom WeekCalendarGrid component using the lower-level useCalendarGrid hook to create a calendar that displays only a single week.

LANGUAGE: tsx
CODE:
import type {CalendarGridProps} from 'react-aria-components';
import {CalendarStateContext} from 'react-aria-components';
import {useCalendarGrid} from 'react-aria';

function WeekCalendarGrid(props: CalendarGridProps) {
  let state = React.useContext(CalendarStateContext)!;
  let {gridProps} = useCalendarGrid(props, state);

  return (
    <table {...gridProps}>
      <tbody>
        <tr>
          {state.getDatesInWeek(0).map((date, i) => <CalendarCell key={i} date={date} />)}
        </tr>
      </tbody>
    </table>
  );
}

----------------------------------------

TITLE: Client-Side Routing with Provider
DESCRIPTION: Shows how to set up client-side routing in Provider by passing a router prop with a navigate function.

LANGUAGE: tsx
CODE:
let navigate = useNavigateFromYourRouter();

<Provider theme={theme} router={{navigate}}>
  <YourApp />
</Provider>

----------------------------------------

TITLE: Custom Value Label Formatting in RangeSlider
DESCRIPTION: Shows various ways to customize how values are displayed in RangeSlider, including hiding labels, percentage formatting, and custom label functions.

LANGUAGE: tsx
CODE:
<Flex direction="column" maxWidth="size-3000" gap="size-300">
  <RangeSlider
    label="Level range"
    showValueLabel={false}
    defaultValue={{start: 75, end: 100}} />

  <RangeSlider
    label="Cacao percentage"
    maxValue={1}
    step={0.001}
    formatOptions={{style: 'percent', minimumFractionDigits: 1}}
    defaultValue={{start: .75, end: 1}} />

  <RangeSlider
    label="Search radius"
    maxValue={200}
    getValueLabel={meters => `${meters.start}m to ${meters.end}m away`}
    defaultValue={{start: 15, end: 60}} />
</Flex>

----------------------------------------

TITLE: Configuring DateField Labels and Requirement Indicators
DESCRIPTION: Shows different ways to label a DateField component and indicate whether it's required or optional using the isRequired and necessityIndicator props.

LANGUAGE: tsx
CODE:
<Flex gap="size-150" wrap>
  <DateField label="Birth date" />
  <DateField label="Birth date" isRequired necessityIndicator="icon" />
  <DateField label="Birth date" isRequired necessityIndicator="label" />
  <DateField label="Birth date" necessityIndicator="label" />
</Flex>

----------------------------------------

TITLE: Installing @react-spectrum/text Package
DESCRIPTION: This code snippet shows the package name for the React Spectrum text component that can be installed from npm.

LANGUAGE: markdown
CODE:
@react-spectrum/text

----------------------------------------

TITLE: Creating Reusable ColorSwatchPicker Components
DESCRIPTION: Example of creating reusable wrapper components for ColorSwatchPicker and ColorSwatchPickerItem to ensure consistent styling and behavior across an application.

LANGUAGE: tsx
CODE:
import type {ColorSwatchPickerProps, ColorSwatchPickerItemProps} from 'react-aria-components';
import {MyColorSwatch} from './ColorSwatch';

export function MyColorSwatchPicker({children, ...props}: ColorSwatchPickerProps) {
  return (
    <ColorSwatchPicker {...props}>
      {children}
    </ColorSwatchPicker>
  );
}

export function MyColorSwatchPickerItem(props: ColorSwatchPickerItemProps) {
  return (
    <ColorSwatchPickerItem {...props}>
      <MyColorSwatch />
    </ColorSwatchPickerItem>
  );
}

<MyColorSwatchPicker>
  <MyColorSwatchPickerItem color="#A00" />
  <MyColorSwatchPickerItem color="#f80" />
  <MyColorSwatchPickerItem color="#080" />
  <MyColorSwatchPickerItem color="#08f" />
  <MyColorSwatchPickerItem color="#088" />
  <MyColorSwatchPickerItem color="#008" />
</MyColorSwatchPicker>

----------------------------------------

TITLE: Implementing RGB Color Selection with ColorArea in React
DESCRIPTION: This example demonstrates how to implement a color picker using the RGB color model with ColorArea component. It shows three different channel combinations (Green-Blue, Blue-Red, Red-Green) with corresponding sliders for the remaining channel.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-stately/color';

function Example() {
  let [
    color,
    setColor
  ] = React.useState(parseColor('rgb(100, 149, 237)'));
  let [
    rChannel,
    gChannel,
    bChannel
  ] = color.getColorChannels();
  return (
    <>
      <div style={{display: 'inline-flex', flexWrap: 'wrap'}}>
        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>
          <label id="gbr-label-id-1">x: {color.getChannelName(gChannel, 'en-US')}, y: {color.getChannelName(bChannel, 'en-US')}</label>
          <ColorArea
            aria-labelledby="gbr-label-id-1"
            value={color}
            onChange={setColor}
            xChannel={gChannel}
            yChannel={bChannel} />
          <ColorSlider
              channel={rChannel}
              value={color}
              onChange={setColor} />
        </div>
        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>
          <label id="brg-label-id-1">x: {color.getChannelName(bChannel, 'en-US')}, y: {color.getChannelName(rChannel, 'en-US')}</label>
          <ColorArea
            aria-labelledby="brg-label-id-1"
            value={color}
            onChange={setColor}
            xChannel={bChannel}
            yChannel={rChannel} />
          <ColorSlider
              channel={gChannel}
              value={color}
              onChange={setColor} />
        </div>
        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>
          <label id="rgb-label-id-1">x: {color.getChannelName(rChannel, 'en-US')}, y: {color.getChannelName(gChannel, 'en-US')}</label>
          <ColorArea
            aria-labelledby="rgb-label-id-1"
            value={color}
            onChange={setColor}
            xChannel={rChannel}
            yChannel={gChannel} />
          <ColorSlider
              channel={bChannel}
              value={color}
              onChange={setColor} />
        </div>
      </div>
      <p>Current RGB color value: <ColorSwatch color={color} style={{width: '16px', height: '16px', verticalAlign: 'text-bottom'}} /> {color.toString('rgb')}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing a FieldGroup Component with DateRangePickerContext
DESCRIPTION: Implementation of a FieldGroup component that groups DateRangePicker components with a common title and error message. Uses DateRangePickerContext to propagate validity state and accessibility attributes to child pickers.

LANGUAGE: tsx
CODE:
import {DateRangePickerContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface FieldGroupProps {
  title?: string,
  children?: React.ReactNode,
  errorMessage?: string
}

function FieldGroup({title, children, errorMessage}: FieldGroupProps) {
  let errorId = useId();
  return (
    <fieldset>
      <legend>{title}</legend>
      <DateRangePickerContext.Provider value={{
        isInvalid: !!errorMessage,
        'aria-describedby': errorMessage ? errorId : undefined
      }}>
        {children}
      </DateRangePickerContext.Provider>
      {errorMessage && <small id={errorId} className="invalid">{errorMessage}</small>}
    </fieldset>
  );
}

<FieldGroup title="Dates" errorMessage="Ticket sale and event dates cannot overlap.">
  <MyDateRangePicker label="Ticket sale dates" defaultValue={{start: parseDate('2023-07-12'), end: parseDate('2023-08-04')}} />
  <MyDateRangePicker label="Event dates" defaultValue={{start: parseDate('2023-08-01'), end: parseDate('2023-08-10')}} />
</FieldGroup>

----------------------------------------

TITLE: Formatting Currency Values in NumberField
DESCRIPTION: Example of configuring NumberField to display currency values with various formatting options including currency code, display format, and accounting notation for negative numbers.

LANGUAGE: tsx
CODE:
<MyNumberField
  label="Transaction amount"
  defaultValue={45}
  formatOptions={{
    style: 'currency',
    currency: 'EUR',
    currencyDisplay: 'code',
    currencySign: 'accounting'
  }} />

----------------------------------------

TITLE: Implementing Custom Tooltip Component with React Aria Hooks in TSX
DESCRIPTION: This example demonstrates how to create a custom tooltip component using useTooltipTrigger, useTooltip, and useTooltipTriggerState hooks. It includes two button examples to show delayed and immediate tooltip behaviors.

LANGUAGE: tsx
CODE:
import {useTooltip, useTooltipTrigger} from '@react-aria/tooltip';
import {useTooltipTriggerState} from '@react-stately/tooltip';
import {mergeProps} from '@react-aria/utils';

function Tooltip({state, ...props}) {
  let {tooltipProps} = useTooltip(props, state);

  return (
    <span
      style={{
        position: 'absolute',
        left: '5px',
        top: '100%',
        maxWidth: 150,
        marginTop: '10px',
        backgroundColor: 'white',
        color: 'black',
        padding: '5px',
        border: '1px solid gray'
      }}
      {...mergeProps(props, tooltipProps)} >
      {props.children}
    </span>
  );
}

function TooltipButton(props) {
  let state = useTooltipTriggerState(props);
  let ref = React.useRef(null);

  // Get props for the trigger and its tooltip
  let {triggerProps, tooltipProps} = useTooltipTrigger(props, state, ref);

  return (
    <span style={{position: 'relative'}}>
      <button ref={ref} {...triggerProps} style={{fontSize: 18}} onClick={() => alert('Pressed button')}>{props.children}</button>
      {state.isOpen && (
        <Tooltip state={state} {...tooltipProps}>{props.tooltip}</Tooltip>
      )}
    </span>
  );
}

<TooltipButton tooltip="Edit">✏️</TooltipButton>
<TooltipButton tooltip="Delete">🚮</TooltipButton>

----------------------------------------

TITLE: ActionGroup with Collapsing Button Labels in React Spectrum
DESCRIPTION: Shows an ActionGroup with buttonLabelBehavior set to collapse, which automatically hides labels when space is limited while showing more buttons before collapsing into a menu.

LANGUAGE: tsx
CODE:
<ActionGroup overflowMode="collapse" buttonLabelBehavior="collapse" maxWidth={180}>
  <Item key="edit">
    <Draw />
    <Text>Edit</Text>
  </Item>
  <Item key="copy">
    <Copy />
    <Text>Copy</Text>
  </Item>
  <Item key="delete">
    <Delete />
    <Text>Delete</Text>
  </Item>
  <Item key="move">
    <Move />
    <Text>Move</Text>
  </Item>
  <Item key="duplicate">
    <Duplicate />
    <Text>Duplicate</Text>
  </Item>
</ActionGroup>

----------------------------------------

TITLE: Rendering ReorderableTable Component in React Spectrum
DESCRIPTION: This code renders the ReorderableTable component which demonstrates self-contained drag and drop reordering functionality for TableView rows.

LANGUAGE: tsx
CODE:
<ReorderableTable />

----------------------------------------

TITLE: Implementing Modal Dialog in React Spectrum
DESCRIPTION: Demonstrates how to create a modal dialog using the DialogTrigger component. The dialog is dismissable and contains basic content structure with a heading and text.

LANGUAGE: tsx
CODE:
<DialogTrigger isDismissable type="modal">
  <ActionButton>Trigger Modal</ActionButton>
  <Dialog>
    <Heading>Modal</Heading>
    <Divider />
    <Content>
      <Text>
        This is a modal.
      </Text>
    </Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Implementing Controlled Open State for React Aria Popovers
DESCRIPTION: Example of manually managing a popover's open state with useState and positioning it relative to a custom element using triggerRef, allowing programmatic control rather than relying on DialogTrigger.

LANGUAGE: tsx
CODE:
function Example() {
  let [isOpen, setOpen] = React.useState(false);
  let triggerRef = React.useRef(null);

  return (
    <>
      <Button onPress={() => setOpen(true)}>Trigger</Button>
      <span ref={triggerRef} style={{paddingLeft: 12}}>Popover will be positioned relative to me</span>
      <MyPopover triggerRef={triggerRef} isOpen={isOpen} onOpenChange={setOpen}>
        <Heading slot="title">Popover</Heading>
        <div>I'm over here!</div>
      </MyPopover>
    </>
  );
}

----------------------------------------

TITLE: Styling FieldGroup Component with CSS
DESCRIPTION: CSS example showing how to style a custom FieldGroup component with appropriate padding and width settings.

LANGUAGE: css
CODE:
fieldset {
  padding: 1.5em;
  width: fit-content;
}

----------------------------------------

TITLE: ActionButton with Icon and Label in React
DESCRIPTION: Shows how to create an ActionButton with both an icon and a text label. Uses the Text component for the label and an Edit icon.

LANGUAGE: tsx
CODE:
import {Text} from '@react-spectrum/text';
import Edit from '@spectrum-icons/workflow/Edit';

<ActionButton>
  <Edit />
  <Text>Icon + Label</Text>
</ActionButton>

----------------------------------------

TITLE: ToggleButton with Icon and Label in React Spectrum
DESCRIPTION: Demonstrates how to create a ToggleButton with both an icon and a text label, importing necessary components for the implementation.

LANGUAGE: tsx
CODE:
import {Text} from '@react-spectrum/text';
import Pin from '@spectrum-icons/workflow/PinOff';

<ToggleButton>
  <Pin />
  <Text>Icon + Label</Text>
</ToggleButton>

----------------------------------------

TITLE: Controlling Focused Date in Calendar Component with React
DESCRIPTION: This example demonstrates how to control which date is focused in a Calendar component using the focusedValue and onFocusChange props. It sets a default focused date of July 1, 2021, allows user interaction to change the focus, and includes a reset button to return to the default date.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

function Example() {
  let defaultDate = new CalendarDate(2021, 7, 1);
  let [focusedDate, setFocusedDate] = React.useState(defaultDate);

  return (
    <Flex direction="column" alignItems="start" gap="size-200">
      <ActionButton onPress={() => setFocusedDate(defaultDate)}>Reset focused date</ActionButton>
      <Calendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />
    </Flex>
  );
}

----------------------------------------

TITLE: Interactive ActionButton with State Management
DESCRIPTION: Shows an ActionButton that updates a counter stored in React state when pressed, demonstrating event handling.

LANGUAGE: tsx
CODE:
function Example() {
  let [count, setCount] = React.useState(0);

  return (
   <ActionButton onPress={() => setCount(c => c + 1)}>{count} Edits</ActionButton>
  );
}

----------------------------------------

TITLE: Basic Component Structure for ToggleButtonGroup
DESCRIPTION: The fundamental structure of implementing a ToggleButtonGroup with its child ToggleButton components.

LANGUAGE: tsx
CODE:
import {ToggleButtonGroup, ToggleButton} from 'react-aria-components';

<ToggleButtonGroup>
  <ToggleButton />
</ToggleButtonGroup>

----------------------------------------

TITLE: Basic Workflow Icon Usage Example
DESCRIPTION: This example shows the basic implementation of a Workflow icon (Airplane) with proper accessibility labeling using aria-label.

LANGUAGE: tsx
CODE:
import Airplane from '@spectrum-icons/workflow/Airplane';

<Airplane aria-label="Airplane" />

----------------------------------------

TITLE: Creating a Custom Label Component Compatible with React Aria Components
DESCRIPTION: This example shows how to make an existing label component compatible with React Aria by using the useContextProps hook to merge local props with those provided via context.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Setting Hour Cycle Format in DatePicker
DESCRIPTION: This example demonstrates how to force a specific hour cycle (12 or 24 hour format) in a DatePicker using the hourCycle prop, regardless of the user's locale preferences.

LANGUAGE: tsx
CODE:
<DatePicker
  label="Appointment time"
  granularity="minute"
  hourCycle={24} />

----------------------------------------

TITLE: Controlling Menu Open State with React State
DESCRIPTION: Example demonstrating how to use the isOpen and onOpenChange props to create a controlled menu component with React state.

LANGUAGE: tsx
CODE:
function Example() {
  let [open, setOpen] = React.useState(false);

  return (
    <>
      <p>Menu is {open ? 'open' : 'closed'}</p>
      <MyMenuButton
        label="View"
        isOpen={open}
        onOpenChange={setOpen}>
        <MenuItem id="side">Side bar</MenuItem>
        <MenuItem id="options">Page options</MenuItem>
        <MenuItem id="edit">Edit Panel</MenuItem>
      </MyMenuButton>
    </>
  );
}

----------------------------------------

TITLE: Setting Min/Max Value Constraints on DateRangePicker
DESCRIPTION: Example showing how to restrict date selection using the minValue prop. In this case, only dates after today are accepted, ensuring users can't select past dates.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<Form validationBehavior="native" maxWidth="size-3000">
  <DateRangePicker
    label="Trip dates"
    /*- begin highlight -*/
    minValue={today(getLocalTimeZone())}
    /*- end highlight -*/
    defaultValue={{
      start: parseDate('2022-02-03'),
      end: parseDate('2022-05-03')
    }} />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Disabled Button in React Spectrum
DESCRIPTION: Shows how to implement a disabled Button that prevents user interaction.

LANGUAGE: tsx
CODE:
<Button variant="accent" isDisabled>Save</Button>

----------------------------------------

TITLE: FileTrigger Accepting Specific File Types
DESCRIPTION: Example showing how to configure a FileTrigger to accept only specific file types (PNG images in this case) using the acceptedFileTypes prop.

LANGUAGE: tsx
CODE:
<FileTrigger acceptedFileTypes={['image/png']}>
  <Button>Select files</Button>
</FileTrigger>

----------------------------------------

TITLE: Complete RangeCalendar Component Anatomy
DESCRIPTION: Demonstrates the full structure of a RangeCalendar component, including the header, grid, header cells, body, and error message. This example shows all possible subcomponents and their nesting structure.

LANGUAGE: tsx
CODE:
import {RangeCalendar, Heading, Button, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Text} from 'react-aria-components';

<RangeCalendar>
  <Button slot="previous" />
  <Heading />
  <Button slot="next" />
  <CalendarGrid>
    <CalendarGridHeader>
      {day => <CalendarHeaderCell />}
    </CalendarGridHeader>
    <CalendarGridBody>
      {date => <CalendarCell date={date} />}
    </CalendarGridBody>
  </CalendarGrid>
  <Text slot="errorMessage" />
</RangeCalendar>

----------------------------------------

TITLE: Using Time Zones with DateField Component
DESCRIPTION: This example shows how to use the parseZonedDateTime function to create a DateField with a specific time zone. The time is displayed in Pacific Standard Time based on the America/Los_Angeles time zone.

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

<MyDateField
  label="Event date"
  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />

----------------------------------------

TITLE: Overriding Default Class Names in React Aria Components
DESCRIPTION: Example of providing a custom className to a React Aria component, which overrides the default className.

LANGUAGE: jsx
CODE:
<Select className="my-select">
  {/* ... */}
</Select>

----------------------------------------

TITLE: RangeSlider Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This table compares RangeSlider properties between versions, showing that Spectrum 2 supports size, labelAlign, isEmphasized, trackStyle, thumbStyle, and slot, while RSP v3 has showValueLabel, getValueLabel, and orientation properties not yet implemented in S2.

LANGUAGE: typescript
CODE:
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | –
labelAlign | 🟢 `Alignment` | –
isEmphasized | 🟢 `boolean` | –
trackStyle | 🟢 `'thick' \| 'thin'` | –
thumbStyle | 🟢 `'default' \| 'precise'` | –
slot | 🟢 `null \| string` | –
showValueLabel | – | 🔴 `boolean`
getValueLabel | – | 🔴 `(RangeValue<number>) => string`
orientation | – | 🔴 `Orientation`

----------------------------------------

TITLE: Disabled StatusLight Component in React Spectrum
DESCRIPTION: Demonstrates a StatusLight component in a disabled state using the isDisabled prop.

LANGUAGE: tsx
CODE:
<StatusLight variant="yellow" isDisabled >Yellow</StatusLight>

----------------------------------------

TITLE: Dynamic Picker with Data Items in React Spectrum
DESCRIPTION: Example showing how to use Picker with a dynamic data array. This example uses the 'id' property from each item as the selection value without needing explicit key props.

LANGUAGE: tsx
CODE:
function DynamicExample() {
  let [animalId, setAnimalId] = React.useState(null);
  let options = [
    {id: 1, name: 'Aardvark'},
    {id: 2, name: 'Cat'},
    {id: 3, name: 'Dog'},
    {id: 4, name: 'Kangaroo'},
    {id: 5, name: 'Koala'},
    {id: 6, name: 'Penguin'},
    {id: 7, name: 'Snake'},
    {id: 8, name: 'Turtle'},
    {id: 9, name: 'Wombat'}
  ];

  return (
    <>
      <Picker label="Pick an animal" items={options} onSelectionChange={selected => setAnimalId(selected)}>
        {item => <Item>{item.name}</Item>}
      </Picker>
      <p>Your favorite animal has id: {animalId}</p>
    </>
  );
}

----------------------------------------

TITLE: Controlled ColorArea with State Management in React
DESCRIPTION: Implementation of a controlled ColorArea component that tracks and updates its value using React state. It also specifies custom channel mappings for the X and Y axes.

LANGUAGE: tsx
CODE:
import {parseColor} from 'react-aria-components';

function Example() {
  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));
  return (
    <>
      <MyColorArea
        value={value}
        onChange={setValue}
        xChannel="saturation"
        yChannel="lightness" />
      <p>Value: {value.toString('hex')}</p>
    </>
  );
}

----------------------------------------

TITLE: Styling Disabled Menu Items with CSS
DESCRIPTION: CSS styling for disabled menu items using the data-disabled attribute to visually indicate the disabled state.

LANGUAGE: css
CODE:
.react-aria-MenuItem {
  &[data-disabled] {
    color: var(--text-color-disabled);
  }
}

----------------------------------------

TITLE: Handling Events in ComboBox with onSelectionChange and onInputChange
DESCRIPTION: Example showing how to handle selection and input events in ComboBox using onSelectionChange and onInputChange props. Updates React state based on user interactions.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, name: 'Aerospace'},
    {id: 2, name: 'Mechanical'},
    {id: 3, name: 'Civil'},
    {id: 4, name: 'Biomedical'},
    {id: 5, name: 'Nuclear'},
    {id: 6, name: 'Industrial'},
    {id: 7, name: 'Chemical'},
    {id: 8, name: 'Agricultural'},
    {id: 9, name: 'Electrical'}
  ];

  let [value, setValue] = React.useState('');
  let [majorId, setMajorId] = React.useState('');

  let onSelectionChange = (id) => {
    setMajorId(id);
  };

  let onInputChange = (value) => {
    setValue(value)
  };

  return (
    <>
      <p>Current selected major id: {majorId}</p>
      <p>Current input text: {value}</p>
      <ComboBox
        label="Pick a engineering major"
        defaultItems={options}
        selectedKey={majorId}
        onSelectionChange={onSelectionChange}
        onInputChange={onInputChange}>
        {item => <Item>{item.name}</Item>}
      </ComboBox>
    </>
  );
}

----------------------------------------

TITLE: Targeting UI States with Data Attributes in CSS
DESCRIPTION: Examples showing how to use data attributes to target different UI states of React Aria components in CSS selectors, specifically for the CalendarCell component.

LANGUAGE: css
CODE:
.react-aria-CalendarCell[data-selected] {
  /* ... */
}

.react-aria-CalendarCell[data-invalid] {
  /* ... */
}

----------------------------------------

TITLE: RadioGroup Anatomy Structure Example in React Aria
DESCRIPTION: Example showing the component structure of a RadioGroup with all possible elements including Label, Radio buttons, description text, and error messages.

LANGUAGE: tsx
CODE:
import {RadioGroup, Radio, Label, Text, FieldError} from 'react-aria-components';

<RadioGroup>
  <Label />
  <Radio />
  <Text slot="description" />
  <FieldError />
</RadioGroup>

----------------------------------------

TITLE: Creating a Custom Input Component for TextField
DESCRIPTION: Example of creating a wrapper component to customize the Input component within a TextField while preserving functionality.

LANGUAGE: tsx
CODE:
function MyInput(props) {
  return <Input {...props} className="my-input" />
}

----------------------------------------

TITLE: HTML Form Integration with React Spectrum Checkbox
DESCRIPTION: Shows how to integrate the Checkbox component with HTML forms using the name and value props for form submission.

LANGUAGE: tsx
CODE:
<Checkbox name="newsletter" value="subscribe">Subscribe</Checkbox>

----------------------------------------

TITLE: Creating reusable CheckboxGroup and Checkbox wrappers
DESCRIPTION: Implementation of reusable wrapper components for CheckboxGroup and Checkbox that encapsulate the DOM structure, styling, and logic into single components for consistency throughout an application.

LANGUAGE: tsx
CODE:
import type {CheckboxGroupProps, CheckboxProps, ValidationResult} from 'react-aria-components';
import {Text, FieldError} from 'react-aria-components';

interface MyCheckboxGroupProps extends Omit<CheckboxGroupProps, 'children'> {
  children?: React.ReactNode,
  label?: string,
  description?: string,
  errorMessage?: string | ((validation: ValidationResult) => string)
}

function MyCheckboxGroup({
  label,
  description,
  errorMessage,
  children,
  ...props
}: MyCheckboxGroupProps) {
  return (
    <CheckboxGroup {...props}>
      {label && <Label>{label}</Label>}
      {children}
      {description && <Text slot="description">{description}</Text>}
      <FieldError>{errorMessage}</FieldError>
    </CheckboxGroup>
  );
}

interface MyCheckboxProps extends Omit<CheckboxProps, 'children'> {
  children?: React.ReactNode
}

function MyCheckbox({children, ...props}: MyCheckboxProps) {
  return (
    <Checkbox {...props}>
      <div className="checkbox" aria-hidden="true">
        <svg viewBox="0 0 18 18"><polyline points="1 9 7 14 15 4" /></svg>
      </div>
      {children}
    </Checkbox>
  );
}

<MyCheckboxGroup label="Favorite sports">
  <MyCheckbox value="soccer">Soccer</MyCheckbox>
  <MyCheckbox value="baseball">Baseball</MyCheckbox>
  <MyCheckbox value="basketball">Basketball</MyCheckbox>
</MyCheckboxGroup>

----------------------------------------

TITLE: Creating a Keyboard Modal Trigger with Context API
DESCRIPTION: Implementation of a custom KeyboardModalTrigger component using ModalContext to control a modal from keyboard shortcuts. This demonstrates advanced compositional patterns with React Aria Components.

LANGUAGE: tsx
CODE:
import {ModalContext} from 'react-aria-components';

interface KeyboardModalTriggerProps {
  keyboardShortcut: string,
  children: React.ReactNode
}

function KeyboardModalTrigger(props: KeyboardModalTriggerProps) {
  let [isOpen, setOpen] = React.useState(false);
  React.useEffect(() => {
    let onKeyDown = (e: KeyboardEvent) => {
      if (e.key === props.keyboardShortcut) {
        setOpen(true);
      }
    };

    document.addEventListener('keydown', onKeyDown);
    return () => document.removeEventListener('keydown', onKeyDown);
  }, [props.keyboardShortcut]);

  return (
    <ModalContext.Provider value={{isOpen, onOpenChange: setOpen}}>
      {props.children}
    </ModalContext.Provider>
  );
}

----------------------------------------

TITLE: Implementing Basic Disclosure Component with React Aria
DESCRIPTION: This example shows how to create a basic disclosure component with a toggle button and panel using the useDisclosure hook from React Aria and useDisclosureState from React Stately. The component supports keyboard interactions and focus management.

LANGUAGE: tsx
CODE:
import {useDisclosureState} from '@react-stately/disclosure';
import {useDisclosure} from '@react-aria/disclosure';
import {useButton} from '@react-aria/button';
import {mergeProps, useFocusRing} from 'react-aria';

function Disclosure(props) {
  let state = useDisclosureState(props);
  let panelRef = React.useRef<HTMLDivElement | null>(null);
  let triggerRef = React.useRef<HTMLButtonElement | null>(null);
  let {buttonProps: triggerProps, panelProps} = useDisclosure(props, state, panelRef);
  let {buttonProps} = useButton(triggerProps, triggerRef);
  let {isFocusVisible, focusProps} = useFocusRing();

  return (
    <div className="disclosure">
      <h3>
        <button 
          className="trigger" 
          ref={triggerRef}
          {...mergeProps(buttonProps, focusProps)}
          style={{outline: isFocusVisible ? '2px solid dodgerblue' : 'none'}}>
          <svg viewBox="0 0 24 24">
            <path d="m8.25 4.5 7.5 7.5-7.5 7.5" />
          </svg>
          {props.title}
        </button>
      </h3>
      <div className="panel" ref={panelRef} {...panelProps}>
        <p>
          {props.children}
        </p>
      </div>
    </div>
  );
};

<Disclosure title="System Requirements">
  Details about system requirements here.
</Disclosure>

----------------------------------------

TITLE: Adding Contextual Help to DateRangePicker
DESCRIPTION: This example shows how to add contextual help to a DateRangePicker using the ContextualHelp component. It provides additional information about trip dates that appears when the user interacts with the help icon.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<DateRangePicker
  label="Trip dates"
  contextualHelp={
    <ContextualHelp variant="info">
      <Heading>Date changes</Heading>
      <Content>Your trip dates cannot be changed once scheduled.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Configuring Maximum Visible Months in DateRangePicker
DESCRIPTION: This example shows how to display multiple months in the DateRangePicker calendar popover using the maxVisibleMonths prop. It allows displaying up to 3 months simultaneously if screen space permits.

LANGUAGE: tsx
CODE:
<DateRangePicker label="Date range" maxVisibleMonths={3} />

----------------------------------------

TITLE: Using useNumberFormatter Hook for Currency Formatting in React
DESCRIPTION: Example demonstrating how to use the useNumberFormatter hook from @react-aria/i18n to format currency values for different locales. The example shows formatting for both USD in US locale and EUR in German locale using I18nProvider to specify the locale context.

LANGUAGE: tsx
CODE:
import {I18nProvider, useNumberFormatter} from '@react-aria/i18n';

function Currency({value, currency}) {
  let formatter = useNumberFormatter({
    style: 'currency',
    currency,
    minimumFractionDigits: 0
  });

  return (
    <p>{formatter.format(value)}</p>
  );
}

<>
  <I18nProvider locale="en-US">
    <Currency value={125000} currency="USD" />
  </I18nProvider>
  <I18nProvider locale="de-DE">
    <Currency value={350000} currency="EUR" />
  </I18nProvider>
</>

----------------------------------------

TITLE: Setting Minimum Date Validation in RangeCalendar
DESCRIPTION: Demonstrates how to set a minimum date validation using the minValue prop, limiting selections to dates after today.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<RangeCalendar aria-label="Trip dates" minValue={today(getLocalTimeZone())} />

----------------------------------------

TITLE: Implementing Disallow Empty Selection in React Spectrum Table
DESCRIPTION: Demonstrates how to force users to always have at least one row selected by using the disallowEmptySelection prop. This prevents deselection when only one row is selected.

LANGUAGE: tsx
CODE:
// Using the example above
<ExampleTable selectionMode="single" defaultSelectedKeys={[2]} disallowEmptySelection />

----------------------------------------

TITLE: Implementing a Toolbar Component with useToolbar in React Aria
DESCRIPTION: This code demonstrates how to create a basic toolbar component using the useToolbar hook. It handles accessibility features like keyboard navigation and ARIA attributes, wrapping interactive children like buttons.

LANGUAGE: TypeScript
CODE:
import {useToolbar} from '@react-aria/toolbar';
import {useRef} from 'react';

// Reuse the Button from your component library. See below for details.
import {Button} from 'your-component-library';

function Toolbar(props) {
  let ref = useRef<HTMLDivElement | null>(null);
  // Get props for the toolbar element
  let {toolbarProps} = useToolbar(props, ref);

  return (
    <div {...toolbarProps} ref={ref}>
      {props.children}
    </div>
  );
}

<Toolbar aria-label="Actions">
  <Button>Copy</Button>
  <Button>Cut</Button>
  <Button>Paste</Button>
</Toolbar>

----------------------------------------

TITLE: Accessible Group Example with Labeled Inputs
DESCRIPTION: Example showing how to create an accessible group of inputs with proper ARIA labeling. The group is labeled using aria-labelledby to provide context, and each input has its own aria-label for individual accessibility.

LANGUAGE: tsx
CODE:
<span id="label-id">Serial number</span>
<Group aria-labelledby="label-id">
  <Input size={3} aria-label="First 3 digits" placeholder="000" />
  –
  <Input size={2} aria-label="Middle 2 digits" placeholder="00" />
  –
  <Input size={4} aria-label="Last 4 digits" placeholder="0000" />
</Group>

----------------------------------------

TITLE: Implementing Tray Dialog in React Spectrum
DESCRIPTION: Demonstrates how to create a tray dialog that slides in from the edge of the screen. Trays are commonly used for mobile interfaces or when you need a panel that doesn't block the entire screen.

LANGUAGE: tsx
CODE:
<DialogTrigger type="tray">
  <ActionButton>Trigger Tray</ActionButton>
  <Dialog>
    <Heading>Tray</Heading>
    <Divider />
    <Content>
      <Text>
        This is a tray.
      </Text>
    </Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Slider Component CSS Styling
DESCRIPTION: CSS styles for both horizontal and vertical slider components, including track styling, thumb appearance, focus and drag states, and disabled state styling.

LANGUAGE: css
CODE:
.slider {
  display: flex;
}

.slider.horizontal {
  flex-direction: column;
  width: 300px;
}

.slider.vertical {
  height: 150px;
}

.label-container {
  display: flex;
  justify-content: space-between;
}

.slider.horizontal .track {
  height: 30px;
  width: 100%;
}

/* track line */
.track:before {
  content: attr(x);
  display: block;
  position: absolute;
  background: gray;
}

.slider.horizontal .track:before {
  height: 3px;
  width: 100%;
  top: 50%;
  transform: translateY(-50%);
}

.slider.vertical .track {
  width: 30px;
  height: 100%;
}

.slider.vertical .track:before {
  width: 3px;
  height: 100%;
  left: 50%;
  transform: translateX(-50%);
}

.thumb {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: gray;
}

.thumb.dragging {
  background: dimgray;
}

.thumb.focus {
  background: orange;
}

.slider.horizontal .thumb {
  top: 50%;
}

.slider.vertical .thumb {
  left: 50%;
}

.track.disabled {
  opacity: 0.4;
}

----------------------------------------

TITLE: Basic Group Component Example with TextField in React Aria Components
DESCRIPTION: Demonstrates how to use the Group component within a TextField to combine an Input component with a Button. The Group provides semantic structure and visual containment for these related elements.

LANGUAGE: tsx
CODE:
import {TextField, Label, Group, Input, Button} from 'react-aria-components';

<TextField>
  <Label>Email</Label>
  <Group>
    <Input />
    <Button aria-label="Add email">+</Button>
  </Group>
</TextField>

----------------------------------------

TITLE: Using Quiet Mode in React Spectrum TableView
DESCRIPTION: Demonstrates how to implement the quiet visual style for a TableView by setting the isQuiet prop.

LANGUAGE: tsx
CODE:
// Using same setup as hide header example
<TableExample isQuiet />

----------------------------------------

TITLE: Controlled ColorSwatchPicker with Value State
DESCRIPTION: Implementation of a controlled ColorSwatchPicker using React state to manage the selected color value. This example demonstrates using parseColor to maintain consistent color object types.

LANGUAGE: tsx
CODE:
import {parseColor} from 'react-aria-components';

function Example() {
  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 33.33%)'));

  return (
    <MyColorSwatchPicker value={color} onChange={setColor}>
      <MyColorSwatchPickerItem color="#A00" />
      <MyColorSwatchPickerItem color="#f80" />
      <MyColorSwatchPickerItem color="#080" />
    </MyColorSwatchPicker>
  );
}

----------------------------------------

TITLE: Using RangeCalendar with International Calendar Systems
DESCRIPTION: Demonstrates using RangeCalendar with the Indian calendar system while displaying text in Hindi. The selected dates are emitted in the Gregorian calendar for consistent handling across users.

LANGUAGE: tsx
CODE:
import type {DateRange} from 'react-aria-components';
import {I18nProvider} from '@react-aria/i18n';

function Example() {
  let [range, setRange] = React.useState<DateRange | null>(null);
  return (
    <I18nProvider locale="hi-IN-u-ca-indian">
      <MyRangeCalendar aria-label="Date range" value={range} onChange={setRange} />
      <p>Start date: {range?.start.toString()}</p>
      <p>End date: {range?.end.toString()}</p>
    </I18nProvider>
  );
}

----------------------------------------

TITLE: DropZone with Custom Replace Message
DESCRIPTION: Example of DropZone with a customized replace message that appears when dragging over a filled zone. The custom message can be used for internationalization or more specific user instructions.

LANGUAGE: tsx
CODE:
function Example() {
  let [isFilled, setIsFilled] = React.useState(false);

  return (
    <>
      <Draggable />
      <DropZone
        isFilled={isFilled}
        maxWidth="size-3000"
        replaceMessage="This is a custom message"
        onDrop={() => setIsFilled(true)}>
        <IllustratedMessage>
          <Upload />
          <Heading>
            {isFilled ? 'You dropped something!' : 'Drag and drop here'}
          </Heading>
        </IllustratedMessage>
      </DropZone>
    </>
  );
}

----------------------------------------

TITLE: Anatomy of NumberField Component Structure
DESCRIPTION: Code example demonstrating the complete structure of the NumberField component, including all supported child elements like Label, Group, Input, Button, description text, and error messages.

LANGUAGE: tsx
CODE:
import {NumberField, Label, Group, Input, Button, Text, FieldError} from 'react-aria-components';

<NumberField>
  <Label />
  <Group>
    <Input />
    <Button slot="increment" />
    <Button slot="decrement" />
  </Group>
  <Text slot="description" />
  <FieldError />
</NumberField>

----------------------------------------

TITLE: Using DateRangePicker with HTML Forms
DESCRIPTION: Example showing how to integrate DateRangePicker with HTML forms using startName and endName props, which enable the component to submit date range values to a server.

LANGUAGE: tsx
CODE:
<DateRangePicker label="Trip dates" startName="startDate" endName="endDate" />

----------------------------------------

TITLE: ListBox with Dynamic Sections
DESCRIPTION: Shows how to implement a ListBox with dynamic sections from a hierarchical data structure. Each section has its own set of items rendered from an array of data.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function Example() {
  let options = [
    {name: 'Australian', children: [
      {id: 2, name: 'Koala'},
      {id: 3, name: 'Kangaroo'},
      {id: 4, name: 'Platypus'}
    ]},
    {name: 'American', children: [
      {id: 6, name: 'Bald Eagle'},
      {id: 7, name: 'Bison'},
      {id: 8, name: 'Skunk'}
    ]}
  ];
  let [selected, setSelected] = React.useState<Selection>(new Set());

  return (
    <ListBox
      aria-label="Pick an animal"
      items={options}
      selectedKeys={selected}
      selectionMode="single"
      onSelectionChange={setSelected}
      width="size-2400">
      {item => (
        <Section key={item.name} items={item.children} title={item.name}>
          {item => <Item>{item.name}</Item>}
        </Section>
      )}
    </ListBox>
  );
}

----------------------------------------

TITLE: International Calendars with DatePicker
DESCRIPTION: Example showing DatePicker with the Indian calendar in Hindi language. The component displays dates in the local calendar system while emitting onChange values in the Gregorian calendar.

LANGUAGE: tsx
CODE:
import {I18nProvider} from '@react-aria/i18n';

function Example() {
  let [date, setDate] = React.useState<DateValue | null>(null);
  return (
    /*- begin highlight -*/
    <I18nProvider locale="hi-IN-u-ca-indian">
    {/*- end highlight -*/}
      <MyDatePicker label="Date" value={date} onChange={setDate} />
      <p>Selected date: {date?.toString()}</p>
    </I18nProvider>
  );
}

----------------------------------------

TITLE: Disabling Keyboard Dismiss for Modal
DESCRIPTION: Example showing how to disable the default Escape key behavior for closing a modal by using the isKeyboardDismissDisabled prop.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <Button>Open dialog</Button>
  <Modal isKeyboardDismissDisabled>
    <Dialog>
      <Heading slot="title">Notice</Heading>
      <p>You must close this dialog using the button below.</p>
      <Button slot="close">Close</Button>
    </Dialog>
  </Modal>
</DialogTrigger>

----------------------------------------

TITLE: Anatomy of NumberField Component Structure
DESCRIPTION: Code example demonstrating the complete structure of the NumberField component, including all supported child elements like Label, Group, Input, Button, description text, and error messages.

LANGUAGE: tsx
CODE:
import {NumberField, Label, Group, Input, Button, Text, FieldError} from 'react-aria-components';

<NumberField>
  <Label />
  <Group>
    <Input />
    <Button slot="increment" />
    <Button slot="decrement" />
  </Group>
  <Text slot="description" />
  <FieldError />
</NumberField>

----------------------------------------

TITLE: CSS Styling for ColorThumb State-Based Appearance
DESCRIPTION: Demonstrates how to target the ColorThumb component's different states using data attributes in CSS selectors, allowing for styling based on dragging and focus states.

LANGUAGE: css
CODE:
.react-aria-ColorThumb[data-dragging] {
  /* ... */
}

.react-aria-ColorThumb[data-focused] {
  /* ... */
}

----------------------------------------

TITLE: Handling Item Drops on Folders in React Spectrum
DESCRIPTION: Implements onItemDrop handler and shouldAcceptItemDrop validator for folder drops. This allows dropping items directly on folders to add them as child nodes, with validation to only allow drops on items that have childNodes property.

LANGUAGE: tsx
CODE:
let onItemDrop = async (e) => {
  let {
    items,
    target
  } = e;
  let processedItems = await Promise.all(
    items.map(async item => JSON.parse(await item.getText('adobe-app')))
  );
  let targetItem = list.getItem(target.key);
  list.update(target.key, {...targetItem, childNodes: [...targetItem.childNodes, ...processedItems]});
}

let shouldAcceptItemDrop = (target) => !!list.getItem(target.key).childNodes;

----------------------------------------

TITLE: Implementing Menu Items with Text Slots in React Aria Components
DESCRIPTION: Example of using the Text component with slots for label, description, and keyboard shortcuts in MenuItems to improve accessibility and styling.

LANGUAGE: tsx
CODE:
import {Text, Keyboard} from 'react-aria-components';

<MyMenuButton label="Actions">
  <MenuItem textValue="Copy">
    <Text slot="label">Copy</Text>
    <Text slot="description">Copy the selected text</Text>
    <Keyboard>⌘C</Keyboard>
  </MenuItem>
  <MenuItem textValue="Cut">
    <Text slot="label">Cut</Text>
    <Text slot="description">Cut the selected text</Text>
    <Keyboard>⌘X</Keyboard>
  </MenuItem>
  <MenuItem textValue="Paste">
    <Text slot="label">Paste</Text>
    <Text slot="description">Paste the copied text</Text>
    <Keyboard>⌘V</Keyboard>
  </MenuItem>
</MyMenuButton>

----------------------------------------

TITLE: Using I18nProvider to Override Locale
DESCRIPTION: Example showing how to wrap an application with I18nProvider to set a French locale for all child components, overriding the browser/system default.

LANGUAGE: tsx
CODE:
<I18nProvider locale="fr-FR">
  <YourApp />
</I18nProvider>

----------------------------------------

TITLE: Implementing Dynamic Selection in ListBox with React Spectrum
DESCRIPTION: Example showing how to use ListBox with dynamic items from an array. This demonstrates how ListBox can use the id property from each item in the data array for selection tracking without explicitly setting key props.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function DynamicExample() {
  let [animalId, setAnimalId] = React.useState<Selection>(new Set());
  let options = [
    {id: 1, name: 'Aardvark'},
    {id: 2, name: 'Cat'},
    {id: 3, name: 'Dog'},
    {id: 4, name: 'Kangaroo'},
    {id: 5, name: 'Koala'},
    {id: 6, name: 'Penguin'},
    {id: 7, name: 'Snake'},
    {id: 8, name: 'Turtle'},
    {id: 9, name: 'Wombat'}
  ];

  return (
    <>
      <ListBox
        selectionMode="single"
        aria-label="Pick an animal"
        items={options}
        onSelectionChange={selected => setAnimalId(selected)}
        width="size-2400">
        {item => <Item>{item.name}</Item>}
      </ListBox>
      <p>Your favorite animal has id: {[...animalId][0]}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing Dynamic Collections with Menu Component
DESCRIPTION: An example of using dynamic collections with the Menu component where items are provided as an array of objects. Each item has an id property which is used automatically for keys in selection handling.

LANGUAGE: tsx
CODE:
function Example() {
  let items = [
    {id: 1, name: 'New'},
    {id: 2, name: 'Open'},
    {id: 3, name: 'Close'},
    {id: 4, name: 'Save'},
    {id: 5, name: 'Duplicate'},
    {id: 6, name: 'Rename'},
    {id: 7, name: 'Move'}
  ];

  return (
    <MenuButton label="Actions" items={items} onAction={alert}>
      {(item) => <Item>{item.name}</Item>}
    </MenuButton>
  );
}

----------------------------------------

TITLE: Basic Checkbox Implementation in React Aria Components
DESCRIPTION: A simple example showing how to implement a basic checkbox using React Aria Components, including the SVG checkmark for the visual indicator.

LANGUAGE: tsx
CODE:
import {Checkbox} from 'react-aria-components';

<Checkbox>
  <div className="checkbox">
    <svg viewBox="0 0 18 18" aria-hidden="true">
      <polyline points="1 9 7 14 15 4" />
    </svg>
  </div>
  Unsubscribe
</Checkbox>

----------------------------------------

TITLE: NumberField with Percentage Formatting
DESCRIPTION: Demonstrates how to format a NumberField as a percentage, which automatically handles conversion between decimal values and percentage display.

LANGUAGE: tsx
CODE:
<NumberField
  label="Sales tax"
  formatOptions={{style: 'percent'}}
  minValue={0}
  defaultValue={0.05} />

----------------------------------------

TITLE: Basic ActionBar Implementation with ListView
DESCRIPTION: Example showing how to implement an ActionBar with a ListView component. It demonstrates selection handling, action callbacks, and icon usage in the action buttons.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function Example() {
  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['photoshop']));

  return (
    <ActionBarContainer height={300} maxWidth="size-6000">
      <ListView aria-label="ListView with action bar" selectionMode="multiple" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>
        <Item key="photoshop">Adobe Photoshop</Item>
        <Item key="illustrator">Adobe Illustrator</Item>
        <Item key="xd">Adobe XD</Item>
      </ListView>
      <ActionBar
        isEmphasized
        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}
        onAction={(key) => alert(`Performing ${key} action...`)}
        onClearSelection={() => setSelectedKeys(new Set())}>
        <Item key="edit">
          <Edit />
          <Text>Edit</Text>
        </Item>
        <Item key="copy">
          <Copy />
          <Text>Copy</Text>
        </Item>
        <Item key="delete">
          <Delete />
          <Text>Delete</Text>
        </Item>
      </ActionBar>
    </ActionBarContainer>
  );
}

<Example />

----------------------------------------

TITLE: CSS Styling for Disabled ListBox Items
DESCRIPTION: CSS for styling disabled items in a ListBox component, typically using a muted text color.

LANGUAGE: css
CODE:
.react-aria-ListBoxItem {
  &[data-disabled] {
    color: var(--text-color-disabled);
  }
}

----------------------------------------

TITLE: Implementing a Basic TagGroup in React Aria Components
DESCRIPTION: A basic implementation of a TagGroup with multiple selection mode, showing how to structure the component with Label, TagList, and Tag components.

LANGUAGE: tsx
CODE:
import {TagGroup, TagList, Tag, Label} from 'react-aria-components';

<TagGroup selectionMode="multiple">
  <Label>Categories</Label>
  <TagList>
    <Tag>News</Tag>
    <Tag>Travel</Tag>
    <Tag>Gaming</Tag>
    <Tag>Shopping</Tag>
  </TagList>
</TagGroup>

----------------------------------------

TITLE: Using Function-based className for Dynamic Styling
DESCRIPTION: Demonstrates how to use a function that receives component states to dynamically determine class names, which is useful with utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<Disclosure className={({isExpanded}) => isExpanded ? 'border-blue-500' : 'border-gray-600'} />

----------------------------------------

TITLE: Tooltip with Vertical Offset
DESCRIPTION: Example of adjusting a tooltip's position using the offset prop, which controls spacing along the main axis. This tooltip is positioned 50px above its trigger element.

LANGUAGE: tsx
CODE:
<TooltipTrigger>
  <Button>☝️</Button>
  <MyTooltip offset={50}>This will shift up.</MyTooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Focus-Only Tooltip Trigger
DESCRIPTION: Example of configuring a tooltip to display only on focus and not on hover by setting the trigger prop to 'focus'. This can be useful for certain accessibility scenarios.

LANGUAGE: tsx
CODE:
<TooltipTrigger trigger="focus">
  <Button>💿</Button>
  <MyTooltip>Burn CD</MyTooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Basic ProgressBar Implementation in React Spectrum
DESCRIPTION: A simple example showing the basic implementation of a ProgressBar with a label and a value of 50%.

LANGUAGE: tsx
CODE:
<ProgressBar label="Loading…" value={50} />

----------------------------------------

TITLE: Implementing DateRangePicker with International Calendar Support in React
DESCRIPTION: Example showing a DateRangePicker using the Indian calendar system with Hindi language. Even though dates are displayed using the Indian calendar, the onChange handler receives dates in the Gregorian calendar.

LANGUAGE: tsx
CODE:
import {Provider} from '@adobe/react-spectrum';

function Example() {
  let [range, setRange] = React.useState(null);
  return (
    <Provider locale="hi-IN-u-ca-indian">
      <DateRangePicker label="Date range" value={range} onChange={setRange} />
      <p>Start date: {range?.start.toString()}</p>
      <p>End date: {range?.end.toString()}</p>
    </Provider>
  );
}

----------------------------------------

TITLE: Using Text Slots in React Aria Select Components
DESCRIPTION: Example showing how to use the 'label' and 'description' slots in ListBoxItems to improve accessibility and styling in a Select component.

LANGUAGE: tsx
CODE:
import {Text} from 'react-aria-components';

<MySelect label="Permissions">
  <ListBoxItem textValue="Read">
    <Text slot="label">Read</Text>
    <Text slot="description">Read only</Text>
  </ListBoxItem>
  <ListBoxItem textValue="Write">
    <Text slot="label">Write</Text>
    <Text slot="description">Read and write only</Text>
  </ListBoxItem>
  <ListBoxItem textValue="Admin">
    <Text slot="label">Admin</Text>
    <Text slot="description">Full access</Text>
  </ListBoxItem>
</MySelect>

----------------------------------------

TITLE: Implementing Custom Drag Preview in React Spectrum
DESCRIPTION: This example demonstrates how to implement a custom drag preview that shows the number of items being dragged, using the useDragAndDrop hook from react-aria-components.

LANGUAGE: tsx
CODE:
import {useListData} from 'react-stately';
import {useDragAndDrop} from 'react-aria-components';

function Example() {
  let {dragAndDropHooks} = useDragAndDrop({
    // ...
    ///- begin collapse -///
    getItems: (keys) => [...keys].map(key => ({'text/plain': list.getItem(key).name})),
    onReorder(e) {
      if (e.target.dropPosition === 'before') {
        list.moveBefore(e.target.key, e.keys);
      } else if (e.target.dropPosition === 'after') {
        list.moveAfter(e.target.key, e.keys);
      }
    },
    ///- end collapse -///
    ///- begin highlight -///
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    }
    ///- end highlight -///
  });

  ///- begin collapse -///
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Adobe Photoshop'},
      {id: 2, name: 'Adobe XD'},
      {id: 3, name: 'Adobe Dreamweaver'},
      {id: 4, name: 'Adobe InDesign'},
      {id: 5, name: 'Adobe Connect'}
    ]
  });

  return (
    <MyGridList aria-label="Reorderable list" selectionMode="multiple" items={list.items} dragAndDropHooks={dragAndDropHooks}>
      {item => <MyItem>{item.name}</MyItem>}
    </MyGridList>
  );
  ///- end collapse -///
  // ...
}

----------------------------------------

TITLE: Styling Description Text in SearchField with CSS
DESCRIPTION: CSS example showing how to style the description text in a SearchField. It positions the text in the help grid area and applies appropriate font sizing.

LANGUAGE: css
CODE:
.react-aria-SearchField {
  [slot=description] {
    grid-area: help;
    font-size: 12px;
  }
}

----------------------------------------

TITLE: Rollup Configuration for Optimizing Locales
DESCRIPTION: Configuration for using the locales optimization plugin with Rollup. This helps reduce bundle size by including only the specified locales.

LANGUAGE: JavaScript
CODE:
// rollup.config.js
import optimizeLocales from '@react-aria/optimize-locales-plugin';

export default {
  plugins: [
    optimizeLocales.rollup({
      locales: ['en-US', 'fr-FR']
    })
  ]
};

----------------------------------------

TITLE: CSS for Indeterminate ProgressBar Animation
DESCRIPTION: CSS animation for the indeterminate state of the ProgressBar. Creates a moving fill that slides from left to right to indicate ongoing progress without a specific value.

LANGUAGE: css
CODE:
.react-aria-ProgressBar {
  &:not([aria-valuenow]) {
    .fill {
      width: 120px;
      border-radius: inherit;
      animation: indeterminate 1.5s infinite ease-in-out;
      will-change: transform;
    }
  }
}

@keyframes indeterminate {
  from {
    transform: translateX(-100%);
  }

  to {
    transform: translateX(250px);
  }
}

----------------------------------------

TITLE: Provider for Shared Component Properties
DESCRIPTION: Demonstrates using Provider to apply shared properties (isDisabled) to a group of components, making them all disabled together.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-100" alignItems="start">
  <Provider isDisabled>
    <RadioGroup label="Favorite animal">
      <Radio value="dogs">Dogs</Radio>
      <Radio value="cats">Cats</Radio>
      <Radio value="horses">Horses</Radio>
    </RadioGroup>
    <Checkbox>I agree</Checkbox>
    <Button variant="primary">Submit</Button>
  </Provider>
</Flex>

----------------------------------------

TITLE: Managing Selected Keys with Asynchronous Loading in ComboBox
DESCRIPTION: This example demonstrates managing both inputValue and selectedKey in a controlled ComboBox with asynchronously loaded data. It handles initial selection and updates the input value to match selected items after loading.

LANGUAGE: tsx
CODE:
interface Character {
  name: string
}

function AsyncLoadingExample() {
  let isFocused = React.useRef(false);
  let list = useAsyncList<Character>({
    async load({signal, cursor, filterText, selectedKeys}) {
      if (cursor) {
        cursor = cursor.replace(/^http:\/\//i, 'https://');
      }

      // If no cursor is available, then we're loading the first page,
      // filtering the results returned via a query string that
      // mirrors the ComboBox input text.
      // Otherwise, the cursor is the next URL to load,
      // as returned from the previous page.
      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=${filterText}`, {signal});
      let json = await res.json();

      let selectedText;
      let selectedKey = selectedKeys !== 'all' && selectedKeys.values().next().value;

      // If selectedKey exists and combobox is not focused, update the input value with the selected key text
      // This allows the input value to be up to date when items load for the first time or the selected key text is updated server side.
      if (!isFocused.current && selectedKey) {
        let selectedItemName = json.results.find(item => item.name === selectedKey)?.name;
        if (selectedItemName != null && selectedItemName !== filterText) {
          selectedText = selectedItemName;
        }
      }

      return {
        items: json.results,
        cursor: json.next,
        filterText: selectedText ?? filterText
      };
    },
    initialSelectedKeys: ['Luke Skywalker'],
    getKey: (item) => item.name
  });

  let onSelectionChange = (key) => {
    let itemText = list.getItem(key)?.name;
    list.setSelectedKeys(new Set([key]));
    list.setFilterText(itemText);
  };

  let onInputChange = (value) => {
    // Clear key if user deletes all text in the field
    if (value === '') {
      list.setSelectedKeys(new Set([null]));
    }
    list.setFilterText(value);
  };

  let selectedKey = list.selectedKeys !== 'all' && list.selectedKeys.values().next().value;
  return (
    <ComboBox
      label="Star Wars Character Lookup"
      onFocusChange={(focus) => isFocused.current = focus}
      selectedKey={selectedKey}
      onSelectionChange={onSelectionChange}
      items={list.items}
      inputValue={list.filterText}
      onInputChange={onInputChange}
      loadingState={list.loadingState}
      onLoadMore={list.loadMore}>
      {item => <Item key={item.name}>{item.name}</Item>}
    </ComboBox>
  );
}

----------------------------------------

TITLE: Implementing Cross Offset for Popover Dialog in React Spectrum
DESCRIPTION: Shows how to use the 'crossOffset' prop to position a popover dialog 100px to the right of its default horizontal position.

LANGUAGE: tsx
CODE:
<DialogTrigger type="popover" placement="top" crossOffset={100}>
  <ActionButton>Trigger</ActionButton>
  <Dialog>
    <Heading>Cross offset</Heading>
    <Divider />
    <Content>
      <Text>
        Offset by an additional 100px.
      </Text>
    </Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Implementing Controlled Selection in React Spectrum ListView with TypeScript
DESCRIPTION: This snippet demonstrates how to implement controlled selection in a ListView component using the selectedKeys prop with onSelectionChange callback. It creates a reusable PokemonList component that can handle different selection modes and styles.

LANGUAGE: tsx
CODE:
import type {SpectrumListViewProps} from '@react-spectrum/list';

function PokemonList<T>(props: Omit<SpectrumListViewProps<T>, 'children'>) {
  let rows = [
    {id: 1, name: 'Charizard'},
    {id: 2, name: 'Blastoise'},
    {id: 3, name: 'Venusaur'},
    {id: 4, name: 'Pikachu'}
  ];

  let [selectedKeys, setSelectedKeys] = React.useState(props.defaultSelectedKeys || new Set([2]));

  return (
    <ListView maxWidth="size-6000" aria-label="ListView with controlled selection" selectionMode="multiple" {...props} items={rows} selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>
      {(item) => (
        <Item>
          {item.name}
        </Item>
      )}
    </ListView>
  );
}

----------------------------------------

TITLE: Dismissable Modal DialogTrigger Example in React Spectrum
DESCRIPTION: Demonstrates a dismissable modal dialog that includes a close button, allowing users to dismiss the dialog without making a selection.

LANGUAGE: tsx
CODE:
<DialogTrigger isDismissable type="modal">
  <ActionButton>User Status</ActionButton>
  <Dialog>
    <Heading>Status: Bob</Heading>
    <Divider />
    <Content>
      <Text>
        Last Login: December 12, 1989
      </Text>
    </Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Implementing a FieldGroup Component with DateField Context in React Aria
DESCRIPTION: This example demonstrates how to create a FieldGroup component that provides error handling for multiple DateFields using the DateFieldContext provider. It applies validation states and accessibility attributes to all child components.

LANGUAGE: tsx
CODE:
import {DateFieldContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface FieldGroupProps {
  title?: string,
  children?: React.ReactNode,
  errorMessage?: string
}

function FieldGroup({title, children, errorMessage}: FieldGroupProps) {
  let errorId = useId();
  return (
    <fieldset>
      <legend>{title}</legend>
      <DateFieldContext.Provider value={{
        isInvalid: !!errorMessage,
        'aria-describedby': errorMessage ? errorId : undefined
      }}>
        {children}
      </DateFieldContext.Provider>
      {errorMessage && <small id={errorId} className="invalid">{errorMessage}</small>}
    </fieldset>
  );
}

<FieldGroup title="Dates" errorMessage="Tickets must go on sale before event.">
  <MyDateField label="Event date" defaultValue={parseDate('2023-07-12')} />
  <MyDateField label="Ticket sale date" defaultValue={parseDate('2023-08-03')} />
</FieldGroup>

----------------------------------------

TITLE: Creating a FieldGroup with SelectContext
DESCRIPTION: Example of using SelectContext to create a FieldGroup component that can disable multiple Select components together, demonstrating context usage for prop sharing.

LANGUAGE: tsx
CODE:
import {SelectContext} from 'react-aria-components';

interface FieldGroupProps {
  title?: string,
  children?: React.ReactNode,
  isDisabled?: boolean
}

function FieldGroup({title, children, isDisabled}: FieldGroupProps) {
  return (
    <fieldset>
      <legend>{title}</legend>
      <SelectContext.Provider value={{isDisabled}}>
        {children}
      </SelectContext.Provider>
    </fieldset>
  );
}

<FieldGroup title="Filters" isDisabled>
  <MySelect label="Status" defaultSelectedKey="published">
    <ListBoxItem id="draft">Draft</ListBoxItem>
    <ListBoxItem id="published">Published</ListBoxItem>
    <ListBoxItem id="deleted">Deleted</ListBoxItem>
  </MySelect>
  <MySelect label="Author" defaultSelectedKey="emma">
    <ListBoxItem id="john">John</ListBoxItem>
    <ListBoxItem id="emma">Emma</ListBoxItem>
    <ListBoxItem id="tim">Tim</ListBoxItem>
  </MySelect>
</FieldGroup>

----------------------------------------

TITLE: Controlling Popover Flipping Behavior
DESCRIPTION: This example compares the default automatic flipping behavior of popovers with the option to disable flipping using shouldFlip={false}, which affects how popovers behave when they would render outside the viewport.

LANGUAGE: tsx
CODE:
<PopoverTrigger placement="bottom" label="Default">
  <Dialog>
    This is a popover that will flip if it can't fully render below the button.
  </Dialog>
</PopoverTrigger>

<PopoverTrigger placement="bottom" shouldFlip={false} label="shouldFlip=false">
  <Dialog>
    This is a popover that won't flip if it can't fully render below the button.
  </Dialog>
</PopoverTrigger>

----------------------------------------

TITLE: Implementing Pagination Component for a Carousel
DESCRIPTION: This snippet imports and renders a Pagination component that controls a carousel. It shows how to integrate pagination with interactive elements in a mobile-focused interface using React Aria.

LANGUAGE: tsx
CODE:
import {Pagination} from './home/Pagination';

<Pagination carousel={document.getElementById('interactions-carousel')} className="md:hidden" />

----------------------------------------

TITLE: Implementing Item Actions in Tree Component with Toggle and Replace Selection Behavior
DESCRIPTION: Example showing how to add item actions to a Tree component with both toggle and replace selection behaviors. When onAction is provided, clicking items can trigger actions based on the selection behavior.

LANGUAGE: tsx
CODE:
<div style={{display: 'flex', flexWrap: 'wrap', gap: '24px'}}>
  <PokemonEvolutionTree
    aria-label="Pokemon tree with item actions and toggle selection behavior"
    onAction={key => alert(`Opening item ${key}...`)}
    selectionMode="multiple" />
  <PokemonEvolutionTree
    aria-label="Pokemon tree with item actions and replace selection behavior"
    onAction={key => alert(`Opening item ${key}...`)}
    selectionBehavior="replace"
    selectionMode="multiple" />
</div>

----------------------------------------

TITLE: Fullscreen DialogTrigger Example in React Spectrum
DESCRIPTION: Demonstrates a fullscreen dialog variant that reveals just a small portion of the page behind it, used for more complex workflows that don't fit in standard modal sizes.

LANGUAGE: tsx
CODE:
<DialogTrigger type="fullscreen">
  <ActionButton>See Details</ActionButton>
  {(close) => (
    <Dialog>
      <Heading>Package details</Heading>
      <Divider />
      <Content>
        <Text>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sit amet tristique risus. In sit amet suscipit lorem. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In condimentum imperdiet metus non condimentum. Duis eu velit et quam accumsan tempus at id velit. Duis elementum elementum purus, id tempus mauris posuere a. Nunc vestibulum sapien pellentesque lectus commodo ornare.
        </Text>
      </Content>
      <ButtonGroup>
        <Button variant="secondary" onPress={close}>Cancel</Button>
        <Button variant="accent" onPress={close} autoFocus>Buy</Button>
      </ButtonGroup>
    </Dialog>
  )}
</DialogTrigger>

----------------------------------------

TITLE: Testing Menu Interactions Using React Aria Test Utils
DESCRIPTION: Shows how to use the @react-aria/test-utils package to test menu interactions including opening submenus via keyboard. Demonstrates creating a menu tester and performing operations like opening menus and selecting options.

LANGUAGE: ts
CODE:
// Menu.test.ts
import {render} from '@testing-library/react';
import {User} from '@react-aria/test-utils';

let testUtilUser = new User({interactionType: 'mouse'});
// ...

it('Menu can open its submenu via keyboard', async function () {
  // Render your test component/app and initialize the menu tester
  let {getByTestId} = render(
    <MenuTrigger>
      <Button data-testid="test-menutrigger">Menu trigger</Button>
      ...
    </MenuTrigger>
  );
  let menuTester = testUtilUser.createTester('Menu', {root: getByTestId('test-menutrigger'), interactionType: 'keyboard'});

  await menuTester.open();
  expect(menuTester.menu).toBeInTheDocument();
  let submenuTriggers = menuTester.submenuTriggers;
  expect(submenuTriggers).toHaveLength(1);

  let submenuTester = await menuTester.openSubmenu({submenuTrigger: 'Share…'});
  expect(submenuTester.menu).toBeInTheDocument();

  await submenuTester.selectOption({option: submenuTester.options()[0]});
  expect(submenuTester.menu).not.toBeInTheDocument();
  expect(menuTester.menu).not.toBeInTheDocument();
});

----------------------------------------

TITLE: Implementing Disallow Empty Selection in React Spectrum ListView
DESCRIPTION: This snippet demonstrates how to force the user to have at least one row selected at all times using the disallowEmptySelection prop. When this prop is used, selecting the only selected item will not deselect it.

LANGUAGE: tsx
CODE:
// Using the same list as above
<PokemonList disallowEmptySelection aria-label="ListView with empty selection disallowed" />

----------------------------------------

TITLE: Implementing Unavailable Dates in RangeCalendar
DESCRIPTION: This example demonstrates how to mark certain date ranges as unavailable in a RangeCalendar component using the isDateUnavailable prop, preventing users from selecting dates within specific ranges.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

function Example() {
  let now = today(getLocalTimeZone());
  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  let isDateUnavailable = (date) => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);

  return <RangeCalendar aria-label="Trip dates" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />
}

----------------------------------------

TITLE: Implementing Controlled NumberField in React
DESCRIPTION: Example of a controlled NumberField component that stores and updates its value in React state, displaying the current value below the field.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState(6);

  return (
    <>
      <MyNumberField
        label="Controlled value"
        value={value}
        onChange={setValue} />
      <div>Current value prop: {value}</div>
    </>
  );
}

----------------------------------------

TITLE: Form Validation with Picker in React Spectrum
DESCRIPTION: Example showing form validation with Picker. The validationBehavior="native" prop ensures validation errors block form submission and display as help text automatically.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  <Picker label="Favorite animal" name="animal" isRequired>
    <Item>Aardvark</Item>
    <Item>Cat</Item>
    <Item>Dog</Item>
    <Item>Kangaroo</Item>
    <Item>Panda</Item>
    <Item>Snake</Item>
  </Picker>
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Using disabledKeys for Dynamic Collections
DESCRIPTION: Example of using the disabledKeys prop at the Tree level for dynamic collections, which accepts a list of item ids that should be disabled rather than applying isDisabled individually.

LANGUAGE: tsx
CODE:
<PokemonEvolutionTree selectionMode="multiple" disabledKeys={[3]} />

----------------------------------------

TITLE: Adding Accessible Labels to ColorWheel Components
DESCRIPTION: Example showing how to add accessible labels to ColorWheel components using aria-label and aria-labelledby attributes. This improves accessibility by providing more context about the purpose of the component.

LANGUAGE: tsx
CODE:
<div style={{display: 'flex', gap: 8, alignItems: 'end', flexWrap: 'wrap'}}>
  <MyColorWheel
    /*- begin highlight -*/
    aria-label="Background color"
    /*- end highlight -*/
    defaultValue="hsl(0, 100%, 50%)" />
  <div>
    {/*- begin highlight -*/}
    <label id="hsl-aria-labelledby-id">Background color</label>
    {/*- end highlight -*/}
    <MyColorWheel
      /*- begin highlight -*/
      aria-labelledby="hsl-aria-labelledby-id"
      /*- end highlight -*/
      defaultValue="hsl(0, 100%, 50%)" />
  </div>
</div>

----------------------------------------

TITLE: Form with Propagated and Overridden Properties in React Spectrum
DESCRIPTION: Demonstrates how Form properties like isRequired and necessityIndicator are propagated to children, with individual overrides on specific children.

LANGUAGE: tsx
CODE:
<Form maxWidth="size-3600" isRequired necessityIndicator="label">
  <TextField label="Name" />
  <TextField label="Email" />
  <TextField label="Address" isRequired={false} />
</Form>

----------------------------------------

TITLE: Configuring TimeField Granularity to Seconds
DESCRIPTION: Example showing how to configure the TimeField to display and edit seconds by setting the granularity prop.

LANGUAGE: tsx
CODE:
<MyTimeField
  label="Event time"
  /*- begin highlight -*/
  granularity="second"
  /*- end highlight -*/
  defaultValue={parseAbsoluteToLocal('2021-04-07T18:45:22Z')} />

----------------------------------------

TITLE: Implementing Static Sections in Menu Component
DESCRIPTION: An example showing how to create a menu with multiple static sections using the Section component from @react-stately/collections. Each section has a title and contains Item components.

LANGUAGE: tsx
CODE:
import {Section} from '@react-stately/collections';

<MenuButton label="Actions" onAction={alert}>
  <Section title="Styles">
    <Item key="bold">Bold</Item>
    <Item key="underline">Underline</Item>
  </Section>
  <Section title="Align">
    <Item key="left">Left</Item>
    <Item key="middle">Middle</Item>
    <Item key="right">Right</Item>
  </Section>
</MenuButton>

----------------------------------------

TITLE: Styling Dynamic Tabs with CSS
DESCRIPTION: CSS styles for the dynamic tabs example, focusing on the button group that contains the add and remove buttons.

LANGUAGE: css
CODE:
.button-group {
  border-bottom: 1px solid gray;
  display: flex;
  align-items: center;
  gap: 8px;
}

----------------------------------------

TITLE: Styling Remove Buttons in Tags with CSS
DESCRIPTION: CSS styling for tag removal buttons, including hover states and selected tag styling for the remove button.

LANGUAGE: css
CODE:
.react-aria-Tag {
  [slot=remove] {
    background: none;
    border: none;
    padding: 0;
    margin-left: 8px;
    color: var(--text-color-base);
    transition: color 200ms;
    outline: none;
    font-size: 0.95em;

    &[data-hovered] {
      color: var(--text-color-hover);
    }
  }

  &[data-selected] {
    [slot=remove] {
      color: inherit;
    }
  }
}

----------------------------------------

TITLE: Creating a ListBoxSection Component for Grouped Options
DESCRIPTION: This implementation creates a ListBoxSection component that renders a section with a heading and items. It includes proper HTML semantics with separators between sections and applies appropriate ARIA properties.

LANGUAGE: tsx
CODE:
import {useListBoxSection} from '@react-aria/listbox';

function ListBoxSection({section, state}) {
  let {itemProps, headingProps, groupProps} = useListBoxSection({
    heading: section.rendered,
    'aria-label': section['aria-label']
  });

  // If the section is not the first, add a separator element to provide visual separation.
  // The heading is rendered inside an <li> element, which contains
  // a <ul> with the child items.
  return <>
    {section.key !== state.collection.getFirstKey() &&
      <li
        role="presentation"
        style={{
          borderTop: '1px solid gray',
          margin: '2px 5px'
        }} />
    }
    <li {...itemProps}>
      {section.rendered &&
        <span
          {...headingProps}
          style={{
            fontWeight: 'bold',
            fontSize: '1.1em',
            padding: '2px 5px',
          }}>
          {section.rendered}
        </span>
      }
      <ul
        {...groupProps}
        style={{
          padding: 0,
          listStyle: 'none'
        }}>
        {[...section.childNodes].map(node =>
          <Option
            key={node.key}
            item={node}
            state={state} />
        )}
      </ul>
    </li>
  </>;
}

----------------------------------------

TITLE: Using useProvider Hook for Adaptive Components
DESCRIPTION: Demonstrates using the useProvider hook to access the current colorScheme and conditionally render different icons based on light or dark mode.

LANGUAGE: tsx
CODE:
import Light from '@spectrum-icons/workflow/Light';
import Moon from '@spectrum-icons/workflow/Moon';
import {useProvider} from '@react-spectrum/provider';

function Example() {
  let {colorScheme} = useProvider();

  return colorScheme === 'dark'
    ? <Moon aria-label="In dark theme" />
    : <Light aria-label="In light theme" />
}

<Example />

----------------------------------------

TITLE: Creating an Indeterminate ProgressBar
DESCRIPTION: Example of an indeterminate progress bar using the isIndeterminate prop. This is useful when the progress duration is unknown or cannot be calculated.

LANGUAGE: tsx
CODE:
<MyProgressBar
  aria-label="Loading…"
  isIndeterminate />

----------------------------------------

TITLE: Setting Minimum Date Value in DatePicker Component
DESCRIPTION: This example demonstrates how to set a minimum allowed date in a DatePicker using the minValue prop. It prevents users from selecting dates before today.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<DatePicker
  label="Appointment date"
  minValue={today(getLocalTimeZone())}
  defaultValue={parseDate('2022-02-03')} />

----------------------------------------

TITLE: Creating TableCheckboxCell for Row Selection
DESCRIPTION: Implements a checkbox cell for table row selection using useTableSelectionCheckbox hook. This component allows users to select individual rows in the table.

LANGUAGE: tsx
CODE:
import {useTableSelectionCheckbox} from '@react-aria/table';

// Reuse the Checkbox from your component library. See below for details.
import {Checkbox} from 'your-component-library';

function TableCheckboxCell({cell, state}) {
  let ref = useRef<HTMLTableCellElement | null>(null);
  let {gridCellProps} = useTableCell({node: cell}, state, ref);
  let {checkboxProps} = useTableSelectionCheckbox({key: cell.parentKey}, state);

  return (
    <td
      {...gridCellProps}
      ref={ref}>
      <Checkbox {...checkboxProps} />
    </td>
  );
}

----------------------------------------

TITLE: Handling DateRangePicker Events with Formatted Display
DESCRIPTION: Example showing how to use the onChange event to update UI with a formatted version of the selected date range. Uses useDateFormatter to display the range in the user's locale and time zone.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@adobe/react-spectrum';

function Example() {
  let [range, setRange] = React.useState({
    start: parseDate('2020-07-03'),
    end: parseDate('2020-07-10')
  });
  let formatter = useDateFormatter({dateStyle: 'long'});

  return (
    <>
      <DateRangePicker label="Date range" value={range} onChange={setRange} />
      <p>Selected date: {range ? formatter.formatRange(range.start.toDate(getLocalTimeZone()), range.end.toDate(getLocalTimeZone())) : '--'}</p>
    </>
  );
}

----------------------------------------

TITLE: Styling Link Items in GridList with CSS
DESCRIPTION: CSS styling for GridListItem elements that have an href attribute, setting the cursor to pointer for better user experience.

LANGUAGE: css
CODE:
.react-aria-GridListItem[data-href] {
  cursor: pointer;
}

----------------------------------------

TITLE: CSS Styling for React Aria Link Component
DESCRIPTION: CSS styles for the Link component, including styling for different states like hover, pressed, and focus.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Link {
  color: var(--link-color);
  font-size: 18px;
  transition: all 200ms;
  text-decoration: underline;
  cursor: pointer;
  outline: none;
  position: relative;

  &[data-hovered] {
    text-decoration-style: wavy;
  }

  &[data-pressed] {
    color: var(--link-color-pressed);
  }

  &[data-focus-visible]:after {
    content: '';
    position: absolute;
    inset: -3px -6px;
    border-radius: 6px;
    border: 2px solid var(--focus-ring-color);
  }
}

----------------------------------------

TITLE: Applying Custom Class Names to Tooltip Components
DESCRIPTION: Shows how to override the default class names with custom ones for styling tooltips.

LANGUAGE: jsx
CODE:
<Tooltip className="my-tooltip">
  {/* ... */}
</Tooltip>

----------------------------------------

TITLE: Implementing MenuItem Component with React Aria Hooks
DESCRIPTION: A MenuItem component that uses useMenuItem hook to manage individual menu item behavior, including selection state, keyboard navigation, and accessibility properties.

LANGUAGE: tsx
CODE:
import {useMenuItem} from '@react-aria/menu';

function MenuItem({item, state}) {
  // Get props for the menu item element
  let ref = React.useRef(null);
  let {menuItemProps, isSelected} = useMenuItem({key: item.key}, state, ref);

  return (
    <li {...menuItemProps} ref={ref}>
      {item.rendered}
      {isSelected && <span aria-hidden="true">✅</span>}
    </li>
  );
}

----------------------------------------

TITLE: Positive Variant InlineAlert Success Message Example
DESCRIPTION: Shows an example of using the positive variant for successful completion messages.

LANGUAGE: tsx
CODE:
<InlineAlert variant="positive">
  <Heading>Purchase completed</Heading>
  <Content>You'll get a confirmation email with your order details shortly.</Content>
</InlineAlert>

----------------------------------------

TITLE: Dynamic Class Names with State Functions
DESCRIPTION: Shows how to use a function for the className prop that receives state information and returns appropriate class names, useful with utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<Checkbox className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />

----------------------------------------

TITLE: Implementing a Custom Checkbox Component Compatible with React Aria Components
DESCRIPTION: This example shows how to create a custom checkbox component that works with React Aria Components' context system. It uses useContextProps to merge local props with those provided via CheckboxContext.

LANGUAGE: tsx
CODE:
import type {CheckboxProps, useContextProps} from 'react-aria-components';
import {CheckboxContext} from 'react-aria-components';
import {useToggleState} from 'react-stately';
import {useCheckbox} from 'react-aria';

const MyCustomCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, CheckboxContext);

  let state = useToggleState(props);
  let {inputProps} = useCheckbox(props, state, ref);
  return <input {...inputProps} ref={ref} />;
});

----------------------------------------

TITLE: DropZone with FileTrigger Integration
DESCRIPTION: Example of DropZone with integrated FileTrigger component, allowing users to either drag and drop or browse for files. The component updates its state based on file selection.

LANGUAGE: tsx
CODE:
import {FileTrigger} from '@adobe/react-spectrum';

function Example() {
  let [isFilled, setIsFilled] = React.useState(false);

  return (
    <>
      <Draggable />
      <DropZone
        maxWidth="size-3000"
        isFilled={isFilled}
        onDrop={() => setIsFilled(true)}>
        <IllustratedMessage>
          <Upload />
          <Heading>
            {isFilled ? 'You dropped something!' : 'Drag and drop here'}
          </Heading>
          <Content>
            <FileTrigger
              onSelect={()=> setIsFilled(true)}>
              <Button variant="primary">Browse</Button>
            </FileTrigger>
          </Content>
        </IllustratedMessage>
      </DropZone>
    </>
  )
}

----------------------------------------

TITLE: Form with Custom Focus Management for Validation in React Spectrum
DESCRIPTION: Advanced example showing how to prevent default focus behavior on form validation errors and instead focus on an InlineAlert component.

LANGUAGE: tsx
CODE:
import {InlineAlert, Heading, Content} from '@adobe/react-spectrum';

function Example() {
  let [isInvalid, setInvalid] = React.useState(false);

  return (
    <Form
      validationBehavior="native"
      onInvalid={e => {
        e.preventDefault();
        setInvalid(true);
      }}
      onSubmit={e => {
        e.preventDefault();
        setInvalid(false);
      }}
      onReset={() => setInvalid(false)}
      maxWidth="size-3600">
      {isInvalid &&
        <InlineAlert variant="negative" autoFocus>
          <Heading>Unable to submit</Heading>
          <Content>
            Please fix the validation errors below, and re-submit the form.
          </Content>
        </InlineAlert>
      }
      <TextField label="First Name" isRequired />
      <TextField label="Last Name" isRequired />
      <ButtonGroup>
        <Button type="submit" variant="primary">Submit</Button>
        <Button type="reset" variant="secondary">Reset</Button>
      </ButtonGroup>
    </Form>
  );
}

----------------------------------------

TITLE: Importing Keyboard Component from React Spectrum
DESCRIPTION: Shows how to import the Keyboard component from the @react-spectrum/text package.

LANGUAGE: jsx
CODE:
import {Keyboard} from '@react-spectrum/text';

----------------------------------------

TITLE: Implementing Horizontal Grid Layout in ListBox with React
DESCRIPTION: Example of combining layout='grid' and orientation='horizontal' props to create a horizontally scrolling grid with items grouped into columns.

LANGUAGE: tsx
CODE:
<ListBox
  aria-label="Albums"
  ///- begin highlight -///
  layout="grid"
  orientation="horizontal"
  ///- end highlight -///
  items={albums}
  selectionMode="multiple">
  {item => (
    <ListBoxItem textValue={item.title}>
      <img src={item.image} alt="" />
      <Text slot="label">{item.title}</Text>
      <Text slot="description">{item.artist}</Text>
    </ListBoxItem>
  )}
</ListBox>

----------------------------------------

TITLE: Setting Hour Cycle Format in DateField
DESCRIPTION: Example showing how to override the default hour format in DateField to force 24-hour time display regardless of locale.

LANGUAGE: tsx
CODE:
<MyDateField
  label="Appointment time"
  granularity="minute"
  hourCycle={24} />

----------------------------------------

TITLE: Using Description Slot with DatePicker in React
DESCRIPTION: Example showing how to add a description to a DatePicker using the description slot, which provides additional help text for users.

LANGUAGE: tsx
CODE:
<DatePicker granularity="hour">
  <Label>Appointment time</Label>
  <Group>
    <DateInput>
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <Button>▼</Button>
  </Group>
  {/*- begin highlight -*/}
  <Text slot="description">Please select a weekday between 9 AM and 5 PM.</Text>
  {/*- end highlight -*/}
  <Popover>
    <Dialog>
      <Calendar>
        <header>
          <Button slot="previous">◀</Button>
          <Heading />
          <Button slot="next">▶</Button>
        </header>
        <CalendarGrid>
          {date => <CalendarCell date={date} />}
        </CalendarGrid>
      </Calendar>
    </Dialog>
  </Popover>
</DatePicker>

----------------------------------------

TITLE: Using TimeField with User's Local Time Zone
DESCRIPTION: Example showing how to parse an absolute time into the user's local time zone using parseAbsoluteToLocal function.

LANGUAGE: tsx
CODE:
import {parseAbsoluteToLocal} from '@internationalized/date';

<MyTimeField
  label="Event time"
  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}
/>

----------------------------------------

TITLE: Disabled TimeField Implementation
DESCRIPTION: Example showing a TimeField in disabled state, preventing user interaction.

LANGUAGE: tsx
CODE:
<TimeField label="Event time" isDisabled />

----------------------------------------

TITLE: ComboBox with Required State and Label Indicator
DESCRIPTION: Example showing how to configure a ComboBox as a required field with a text label indicator, using isRequired and necessityIndicator="label" props.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal" isRequired necessityIndicator="label">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Implementing Empty State Rendering
DESCRIPTION: Example of using the renderEmptyState prop to customize what the Tree will display when there are no items in the collection.

LANGUAGE: tsx
CODE:
<Tree aria-label="Search results" renderEmptyState={() => 'No results found.'} style={{height: '100px'}}>
  {[]}
</Tree>

----------------------------------------

TITLE: Creating a Reusable Disclosure Component in React
DESCRIPTION: Example of creating a reusable Disclosure component that wraps all necessary elements and provides a consistent interface for reuse throughout an application.

LANGUAGE: tsx
CODE:
import type {DisclosureProps} from 'react-aria-components';

interface MyDisclosureProps extends Omit<DisclosureProps, 'children'> {
  title?: string,
  children?: React.ReactNode
}

function MyDisclosure({title, children, ...props}: MyDisclosureProps) {
  return (
    <Disclosure {...props}>
      <Heading>
        <Button slot="trigger">
          <svg viewBox="0 0 24 24">
            <path d="m8.25 4.5 7.5 7.5-7.5 7.5" />
          </svg>
          {title}
        </Button>
      </Heading>
      <DisclosurePanel>
        <p>{children}</p>
      </DisclosurePanel>
    </Disclosure>
  )
}

<MyDisclosure title="Manage your account">
  Details on managing your account
</MyDisclosure>

----------------------------------------

TITLE: Creating a Read-Only TextField
DESCRIPTION: Example showing how to make a TextField read-only using the isReadOnly prop, which keeps the field focusable and allows copying content but prevents editing.

LANGUAGE: TSX
CODE:
<TextField label="Email" defaultValue="abc@adobe.com" isReadOnly />

----------------------------------------

TITLE: Conditional Rendering with Render Props in ListBoxItem
DESCRIPTION: Example of using render props to conditionally render elements based on component state, such as showing a checkmark icon when an item is selected.

LANGUAGE: jsx
CODE:
<ListBoxItem>
  {({isSelected}) => (
    <>
      {isSelected && <CheckmarkIcon />}
      Item
    </>
  )}
</ListBoxItem>

----------------------------------------

TITLE: Basic IllustratedMessage Example with NotFound Illustration
DESCRIPTION: A simple example showing how to use IllustratedMessage with an illustration, heading, and content for a 'No results' message.

LANGUAGE: tsx
CODE:
import NotFound from '@spectrum-icons/illustrations/NotFound';

<IllustratedMessage>
  <NotFound />
  <Heading>No results</Heading>
  <Content>Try another search</Content>
</IllustratedMessage>

----------------------------------------

TITLE: Initializing Draggable List Data with useListData in React Spectrum
DESCRIPTION: Sets up initial data for a draggable list using useListData hook. This creates a list of Adobe applications with unique IDs that will be made draggable.

LANGUAGE: tsx
CODE:
let list = useListData({
  initialItems: [
    {id: 'a', type: 'file', name: 'Adobe Photoshop'},
    {id: 'b', type: 'file', name: 'Adobe XD'},
    {id: 'c', type: 'file', name: 'Adobe Dreamweaver'},
    {id: 'd', type: 'file', name: 'Adobe InDesign'},
    {id: 'e', type: 'file', name: 'Adobe Connect'}
  ]
});

----------------------------------------

TITLE: Basic ColorField Example
DESCRIPTION: Shows a simple implementation of the ColorField component with just a label property.

LANGUAGE: tsx
CODE:
<ColorField label="Primary Color" />

----------------------------------------

TITLE: CSS Styling for Horizontal and Grid ListBoxes
DESCRIPTION: CSS for styling horizontal and grid layouts in ListBox components, including item appearance, focus states, and selection indicators.

LANGUAGE: css
CODE:
.react-aria-ListBox[data-orientation=horizontal],
.react-aria-ListBox[data-layout=grid] {
  flex-direction: row;
  width: fit-content;
  max-width: 100%;
  padding: 4px;

  .react-aria-ListBoxItem {
    position: relative;
    margin: 0;
    padding: 4px;

    & img {
      object-fit: cover;
      aspect-ratio: 1/1;
      max-width: 150px;
      margin-bottom: 4px;
      border-radius: 4px;
    }

    &[data-selected] {
      background: none;
      color: inherit;

      &:after {
        content: '✓';
        content: '✓' / '';
        alt: ' ';
        position: absolute;
        top: 8px;
        right: 8px;
        background: var(--highlight-background);
        border: 2px solid var(--highlight-foreground);
        color: var(--highlight-foreground);
        width: 22px;
        height: 22px;
        border-radius: 22px;
        box-sizing: border-box;
        font-size: 14px;
        line-height: 1em;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 0 8px rgb(0 0 0 / .5);
      }
    }

    &[data-focus-visible] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -2px;
    }
  }
}

----------------------------------------

TITLE: Implementing Toast Region and Component Structure in React Aria
DESCRIPTION: Example showing the basic implementation of ToastRegion and Toast components, including the creation of a global ToastQueue for managing toast notifications.

LANGUAGE: tsx
CODE:
import {UNSTABLE_ToastRegion as ToastRegion, UNSTABLE_Toast as Toast, UNSTABLE_ToastQueue as ToastQueue, UNSTABLE_ToastContent as ToastContent, Button, Text} from 'react-aria-components';

// Define the type for your toast content.
interface MyToastContent {
  title: string,
  description?: string
}

// Create a global ToastQueue.
export const queue = new ToastQueue<MyToastContent>();

// Render a <ToastRegion> in the root of your app.
export function App() {
  return (
    <>
      <ToastRegion queue={queue}>
        {({toast}) => (
          <Toast toast={toast}>
            <ToastContent>
              <Text slot="title">{toast.content.title}</Text>
              <Text slot="description">{toast.content.description}</Text>
            </ToastContent>
            <Button slot="close">x</Button>
          </Toast>
        )}
      </ToastRegion>
      {/* Your app here */}
    </>
  );
}

----------------------------------------

TITLE: Styling React Aria ComboBox with Tailwind CSS
DESCRIPTION: Demonstrates how to style React Aria components using Tailwind CSS classes. The example shows applying utility classes and handling interactive states.

LANGUAGE: tsx
CODE:
<ComboBox className="group flex ...">
  <Label>Assignee</Label>
  {/* Tailwind plugin for all UI states. */}
  <Group className="... focus-visible:outline-blue-600">
    <Input className="flex-1 ..." />
    <Button className="... pressed:bg-gray-100">
      <ChevronsUpDownIcon />
    </Button>
  </Group>
  {/* Built-in entry and exit animation states. */}

----------------------------------------

TITLE: Implementing Breadcrumbs with Hyperlinks in React Spectrum
DESCRIPTION: Example showing how to use the Breadcrumbs component with navigation links. Each Item can have an href prop to direct users to different pages.

LANGUAGE: tsx
CODE:
<Breadcrumbs>
  <Item href="/">Home</Item>
  <Item href="/react-spectrum/">React Spectrum</Item>
  <Item href="/react-spectrum/Breadcrumbs.html">Breadcrumbs</Item>
</Breadcrumbs>

----------------------------------------

TITLE: Creating ListBox with Multiple Drag Data Formats in React
DESCRIPTION: This example demonstrates providing multiple data formats for draggable items using the getItems function. It supports plain text, HTML, and a custom app-specific format, enabling interoperability between applications and rich formatting options.

LANGUAGE: tsx
CODE:
function DraggableListBox() {
  let items = new Map([
    ['ps', {name: 'Photoshop', style: 'strong'}],
    ['xd', {name: 'XD', style: 'strong'}],
    ['id', {name: 'InDesign', style: 'strong'}],
    ['dw', {name: 'Dreamweaver', style: 'em'}],
    ['co', {name: 'Connect', style: 'em'}]
  ]);

  let { dragAndDropHooks } = useDragAndDrop({
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    getItems(keys) {
      return [...keys].map(key => {
        let item = items.get(key as string)!;
        return {
          'text/plain': item.name,
          'text/html': `<${item.style}>${item.name}</${item.style}>`,
          'custom-app-type': JSON.stringify({id: key, ...item})
        };
      });
    },
  });

  return (
    <ListBox aria-label="Draggable list" selectionMode="multiple" items={items} dragAndDropHooks={dragAndDropHooks}>
      {([id, item]) => <ListBoxItem id={id} textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</ListBoxItem>}
    </ListBox>
  );
}

<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
  <DraggableListBox />
  {/* see below */}
  <DroppableListBox />
</div>

----------------------------------------

TITLE: Basic Static TreeView Example in React Spectrum
DESCRIPTION: Demonstrates a basic TreeView with static content, showing a hierarchical file structure with folders and documents. Uses defaultExpandedKeys to initially expand specific nodes.

LANGUAGE: tsx
CODE:
<TreeView aria-label="Example tree with static contents" defaultExpandedKeys={['documents', 'photos']} height="size-4600" maxWidth="size-6000">
  <TreeViewItem id="documents" textValue="Documents">
    <TreeViewItemContent>
      <Text>Documents</Text>
      <Folder />
    </TreeViewItemContent>
    <TreeViewItem id="project-a" textValue="Project A">
      <TreeViewItemContent>
        <Text>Project A</Text>
        <Folder />
      </TreeViewItemContent>
      <TreeViewItem id="weekly-report" textValue="Weekly-Report">
        <TreeViewItemContent>
          <Text>Weekly Report</Text>
          <FileTxt />
        </TreeViewItemContent>
      </TreeViewItem>
    </TreeViewItem>
    <TreeViewItem id="document-1" textValue="Document 1">
      <TreeViewItemContent>
        <Text>Document 1</Text>
        <FileTxt />
      </TreeViewItemContent>
    </TreeViewItem>
    <TreeViewItem id="document-2" textValue="Document 2">
      <TreeViewItemContent>
        <Text>Document 2</Text>
        <FileTxt />
      </TreeViewItemContent>
    </TreeViewItem>
  </TreeViewItem>
  <TreeViewItem id="photos" textValue="Photos">
    <TreeViewItemContent>
      <Text>Photos</Text>
      <Folder />
    </TreeViewItemContent>
    <TreeViewItem id="image-1" textValue="Image 1">
      <TreeViewItemContent>
        <Text>Image 1</Text>
        <Image />
      </TreeViewItemContent>
    </TreeViewItem>
    <TreeViewItem id="image-2" textValue="Image 2">
      <TreeViewItemContent>
        <Text>Image 2</Text>
        <Image />
      </TreeViewItemContent>
    </TreeViewItem>
    <TreeViewItem id="image-3" textValue="Image 3">
      <TreeViewItemContent>
        <Text>Image 3</Text>
        <Image />
      </TreeViewItemContent>
    </TreeViewItem>
  </TreeViewItem>
</TreeView>

----------------------------------------

TITLE: Basic useListData Implementation with ListBox in React
DESCRIPTION: Creates a list using useListData with initial items and selection, then renders it using ListBox component. This demonstrates the basic setup with the name property used as the unique key.

LANGUAGE: tsx
CODE:
let list = useListData({
  initialItems: [
    {name: 'Aardvark'},
    {name: 'Kangaroo'},
    {name: 'Snake'}
  ],
  initialSelectedKeys: ['Kangaroo'],
  getKey: item => item.name
});

<ListBox
  items={list.items}
  selectedKeys={list.selectedKeys}
  onSelectionChange={list.setSelectedKeys}>
  {item => <Item key={item.name}>{item.name}</Item>}
</ListBox>

----------------------------------------

TITLE: Handling File Drops in GridList for Images
DESCRIPTION: Example of a GridList that accepts JPEG and PNG image files. The component filters file types, creates object URLs for the images, and displays them in the list with their filenames.

LANGUAGE: tsx
CODE:
import {isFileDropItem} from 'react-aria-components';

interface ImageItem {
  id: number,
  url: string,
  name: string
}

function Example() {
  let [items, setItems] = React.useState<ImageItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    acceptedDragTypes: ['image/jpeg', 'image/png'],
    async onRootDrop(e) {
      let items = await Promise.all(
        e.items.filter(isFileDropItem).map(async item => ({
          id: Math.random(),
          url: URL.createObjectURL(await item.getFile()),
          name: item.name
        }))
      );
      setItems(items);
    }
  });

  return (
    <MyGridList aria-label="Droppable list" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => "Drop images here"}>
      {item => (
        <MyItem textValue={item.name}>
          <div className="image-item">
            <img src={item.url} />
            <span>{item.name}</span>
          </div>
        </MyItem>
      )}
    </MyGridList>
  );
}

----------------------------------------

TITLE: Implementing Disabled Options in Select Component
DESCRIPTION: Example showing how to disable specific options within a Select component using the disabledKeys prop.

LANGUAGE: tsx
CODE:
<MySelect label="Favorite Animal" disabledKeys={['cat', 'kangaroo']}>
  <ListBoxItem id="red panda">Red Panda</ListBoxItem>
  <ListBoxItem id="cat">Cat</ListBoxItem>
  <ListBoxItem id="dog">Dog</ListBoxItem>
  <ListBoxItem id="aardvark">Aardvark</ListBoxItem>
  <ListBoxItem id="kangaroo">Kangaroo</ListBoxItem>
  <ListBoxItem id="snake">Snake</ListBoxItem>
</MySelect>

----------------------------------------

TITLE: Setting Custom First Day of Week in DatePicker
DESCRIPTION: Example demonstrating how to change the first day of the week in a DatePicker calendar from the locale default to Monday.

LANGUAGE: tsx
CODE:
<MyDatePicker aria-label="Appointment time" firstDayOfWeek="mon" />

----------------------------------------

TITLE: Styling Linked Rows in React Spectrum Table
DESCRIPTION: This CSS snippet shows how to style table rows that have href attributes to indicate they are clickable links. It applies a pointer cursor to rows with the data-href attribute.

LANGUAGE: css
CODE:
.react-aria-Row[data-href] {
  cursor: pointer;
}

----------------------------------------

TITLE: CSS Styling for DateField Validation
DESCRIPTION: CSS styles for customizing the appearance of DateSegment and FieldError components when validation errors occur.

LANGUAGE: css
CODE:
.react-aria-DateSegment {
  &[data-invalid] {
    color: var(--invalid-color);

    &:focus {
      background: var(--highlight-background-invalid);
      color: var(--highlight-foreground);
    }
  }
}

.react-aria-DateField {
  .react-aria-FieldError {
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: Controlled Selection in ActionGroup with React
DESCRIPTION: Shows how to implement controlled selection in ActionGroup using the selectedKeys and onSelectionChange props with the 'single' selection mode.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set(['list']));

  return (
    <>
      <ActionGroup selectionMode="single" selectedKeys={selected} onSelectionChange={setSelected}>
        <Item key="grid">Grid view</Item>
        <Item key="list">List view</Item>
        <Item key="gallery">Gallery view</Item>
      </ActionGroup>
      <p>Current selection (controlled): {[...selected]}</p>
    </>
  );
}

----------------------------------------

TITLE: Adding Description Text to a TextField
DESCRIPTION: Example showing how to add helpful description text to a TextField using the description prop, which is associated with the input via ARIA attributes.

LANGUAGE: TSX
CODE:
<TextField
  label="Email"
  description="Enter an email for us to contact you about your order." />

----------------------------------------

TITLE: RadioGroup with Custom Label Position and Alignment
DESCRIPTION: Demonstrates how to customize the position and alignment of the RadioGroup label using labelPosition and labelAlign props.

LANGUAGE: tsx
CODE:
<RadioGroup label="Favorite avatar" labelPosition="side" labelAlign="end">
  <Radio value="wizard">Wizard</Radio>
  <Radio value="dragon">Dragon</Radio>
</RadioGroup>

----------------------------------------

TITLE: ColorSlider with Contextual Help
DESCRIPTION: Implements a ColorSlider with contextual help information using the ContextualHelp component from React Spectrum.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<ColorSlider
  label="Accent Color"
  channel="hue"
  defaultValue="hsl(120, 100%, 50%)"
  contextualHelp={
    <ContextualHelp>
      <Heading>What is an accent color?</Heading>
      <Content>An accent color is the primary foreground color for your theme, used across all components.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Using Links with a Router Component in React Aria Components
DESCRIPTION: This example shows how to use the Router component with multiple Link components. Each Link will update the Router's state when clicked, demonstrating the propagation of the onPress handler via context.

LANGUAGE: tsx
CODE:
<Router>
  <ul>
    <li><Link>Breadcrumbs</Link></li>
    <li><Link>Button</Link></li>
    <li><Link>Calendar</Link></li>
  </ul>
</Router>

----------------------------------------

TITLE: Creating a Reusable ColorWheel Component
DESCRIPTION: Example of creating a reusable MyColorWheel component that wraps the ColorWheel and its subcomponents with predefined properties. This pattern helps ensure consistency across the application.

LANGUAGE: tsx
CODE:
import type {ColorWheelProps} from 'react-aria-components';

interface MyColorWheelProps extends Omit<ColorWheelProps, 'outerRadius' | 'innerRadius'> {}

export function MyColorWheel(props: MyColorWheelProps) {
  return (
    <ColorWheel {...props} outerRadius={100} innerRadius={74}>
      <ColorWheelTrack />
      <ColorThumb />
    </ColorWheel>
  );
}

<MyColorWheel defaultValue="hsl(30, 100%, 50%)" />

----------------------------------------

TITLE: Tailwind v3 Configuration with React Aria Components Plugin
DESCRIPTION: Configuration for Tailwind CSS v3 that adds the tailwindcss-react-aria-components plugin to the Tailwind configuration file.

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components')
  ]
};

----------------------------------------

TITLE: Handling DateField Change Events with Formatting
DESCRIPTION: Example showing how to handle onChange events from DateField and format the selected date according to the user's locale using the useDateFormatter hook.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@adobe/react-spectrum';

function Example() {
  let [date, setDate] = React.useState(parseDate('1985-07-03'));
  let formatter = useDateFormatter({dateStyle: 'full'});

  return (
    <>
      <DateField label="Birth date" value={date} onChange={setDate} />
      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())): '--'}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing Linked Rows in TableView with React Spectrum
DESCRIPTION: This example demonstrates how to create table rows that act as links to external websites by using the href prop on the Row component. Each row opens a different website in a new tab when clicked.

LANGUAGE: tsx
CODE:
<TableView aria-label="Bookmarks" selectionMode="multiple">
  <TableHeader>
    <Column>Name</Column>
    <Column>URL</Column>
    <Column>Date added</Column>
  </TableHeader>
  <TableBody>
    <Row href="https://adobe.com/" target="_blank">
      <Cell>Adobe</Cell>
      <Cell>https://adobe.com/</Cell>
      <Cell>January 28, 2023</Cell>
    </Row>
    <Row href="https://google.com/" target="_blank">
      <Cell>Google</Cell>
      <Cell>https://google.com/</Cell>
      <Cell>April 5, 2023</Cell>
    </Row>
    <Row href="https://nytimes.com/" target="_blank">
      <Cell>New York Times</Cell>
      <Cell>https://nytimes.com/</Cell>
      <Cell>July 12, 2023</Cell>
    </Row>
  </TableBody>
</TableView>

----------------------------------------

TITLE: Importing ActionMenu Component in React Spectrum
DESCRIPTION: Basic imports needed for using the ActionMenu component and related icons from the React Spectrum library.

LANGUAGE: jsx
CODE:
import {ActionMenu, Item, Section} from '@react-spectrum/menu';
import Copy from '@spectrum-icons/workflow/Copy';
import Cut from '@spectrum-icons/workflow/Cut';
import {Flex} from '@react-spectrum/layout';
import Paste from '@spectrum-icons/workflow/Paste';

----------------------------------------

TITLE: Integrating Action Groups with TreeView Items
DESCRIPTION: This snippet demonstrates how to embed ActionGroup components within TreeViewItem content to provide multiple actionable buttons for each tree item.

LANGUAGE: tsx
CODE:
<TreeView aria-label="Example tree with action groups" height="size-3000" maxWidth="size-6000" items={items}>
  {function renderItem(item: MyItem) {
    return (
      <TreeViewItem textValue={item.name}>
        <TreeViewItemContent>
          <Text>{item.name}</Text>
          {item.icon}
          <ActionGroup onAction={(key) => alert(`Item: ${item.id}, Action: ${key}`)}>
            <Item key="edit" textValue="Edit">
              <Edit />
              <Text>Edit</Text>
            </Item>
            <Item key="delete" textValue="Delete">
              <Delete />
              <Text>Delete</Text>
            </Item>
          </ActionGroup>
        </TreeViewItemContent>
        <Collection items={item.childItems}>
          {renderItem}
        </Collection>
      </TreeViewItem>
    )
  }}
</TreeView>

----------------------------------------

TITLE: Basic Slider Component Implementation in React Aria
DESCRIPTION: A basic implementation of a Slider component with Label, SliderOutput, SliderTrack, and SliderThumb components. This example shows the minimum required structure for a functional slider.

LANGUAGE: tsx
CODE:
import {Slider, Label, SliderOutput, SliderTrack, SliderThumb} from 'react-aria-components';

<Slider defaultValue={30}>
  <Label>Opacity</Label>
  <SliderOutput />
  <SliderTrack>
    <SliderThumb />
  </SliderTrack>
</Slider>

----------------------------------------

TITLE: DatePicker Validation with FieldError
DESCRIPTION: Shows how to add validation to a DatePicker component with a FieldError element to display error messages. This example uses the isRequired prop to ensure a value is entered.

LANGUAGE: tsx
CODE:
import {Form, FieldError} from 'react-aria-components';

<Form>
  {/*- begin highlight -*/}
  <DatePicker name="date" isRequired>
  {/*- end highlight -*/}
    <Label>Appointment date</Label>
    <Group>
      <DateInput>
        {segment => <DateSegment segment={segment} />}
      </DateInput>
      <Button>▼</Button>
    </Group>
    {/*- begin highlight -*/}
    <FieldError />
    {/*- end highlight -*/}
    <Popover>
      <Dialog>
        <Calendar>
          <header>
            <Button slot="previous">◀</Button>
            <Heading />
            <Button slot="next">▶</Button>
          </header>
          <CalendarGrid>
            {date => <CalendarCell date={date} />}
          </CalendarGrid>
        </Calendar>
      </Dialog>
    </Popover>
  </DatePicker>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Basic ListBox Component Example with Single Selection
DESCRIPTION: Demonstrates a simple ListBox implementation with single selection mode, showing a list of animals the user can select from.

LANGUAGE: tsx
CODE:
import {ListBox, ListBoxItem} from 'react-aria-components';

<ListBox aria-label="Favorite animal" selectionMode="single">
  <ListBoxItem>Aardvark</ListBoxItem>
  <ListBoxItem>Cat</ListBoxItem>
  <ListBoxItem>Dog</ListBoxItem>
  <ListBoxItem>Kangaroo</ListBoxItem>
  <ListBoxItem>Panda</ListBoxItem>
  <ListBoxItem>Snake</ListBoxItem>
</ListBox>

----------------------------------------

TITLE: Customizing Labels in ColorSlider
DESCRIPTION: Examples showing how to hide or customize labels in ColorSlider components with different configuration options.

LANGUAGE: tsx
CODE:
<Flex gap="size-300" wrap alignItems="end">
  <ColorSlider channel="saturation" defaultValue="hsl(0, 100%, 50%)" label={null} />
  <ColorSlider channel="lightness" defaultValue="hsl(0, 100%, 50%)" showValueLabel={false} />
</Flex>

----------------------------------------

TITLE: Implementing Sections with Static Items in ComboBox
DESCRIPTION: Demonstrates how to group options in a ComboBox using Sections with static items. Each Section requires a title and key prop to properly organize and display grouped options.

LANGUAGE: tsx
CODE:
<ComboBox label="Preferred fruit or vegetable">
  <Section title="Fruit">
    <Item key="Apple">Apple</Item>
    <Item key="Banana">Banana</Item>
    <Item key="Orange">Orange</Item>
    <Item key="Honeydew">Honeydew</Item>
    <Item key="Grapes">Grapes</Item>
    <Item key="Watermelon">Watermelon</Item>
    <Item key="Cantaloupe">Cantaloupe</Item>
    <Item key="Pear">Pear</Item>
  </Section>
  <Section title="Vegetable">
    <Item key="Cabbage">Cabbage</Item>
    <Item key="Broccoli">Broccoli</Item>
    <Item key="Carrots">Carrots</Item>
    <Item key="Lettuce">Lettuce</Item>
    <Item key="Spinach">Spinach</Item>
    <Item key="Bok Choy">Bok Choy</Item>
    <Item key="Cauliflower">Cauliflower</Item>
    <Item key="Potatoes">Potatoes</Item>
  </Section>
</ComboBox>

----------------------------------------

TITLE: Creating a Quiet DateRangePicker in React Spectrum
DESCRIPTION: This example shows how to use the isQuiet prop to create a DateRangePicker with a simplified visual appearance, which is useful for forms that need a more compact layout.

LANGUAGE: tsx
CODE:
<DateRangePicker label="Date range" isQuiet />

----------------------------------------

TITLE: Conditional Rendering with Render Props in React Aria Column
DESCRIPTION: Shows how to use render props to conditionally render elements based on component state, such as displaying a sort indicator in sortable columns.

LANGUAGE: jsx
CODE:
<Column>
  {({allowsSorting, sortDirection}) => (
    <>
      Column Title
      {allowsSorting && <MySortIndicator direction={sortDirection} />}
    </>
  )}
</Column>

----------------------------------------

TITLE: Styling ColorThumb with CSS Selectors
DESCRIPTION: Example of targeting the ColorWheel component using CSS selectors with the default className pattern.

LANGUAGE: css
CODE:
.react-aria-ColorWheel {
  /* ... */
}

----------------------------------------

TITLE: Implementing a Reusable Button Component with useButton Hook
DESCRIPTION: A reusable Button component built with the useButton hook from React Aria. It handles focus states and merges props for accessibility. This component is used for the table column header titles.

LANGUAGE: tsx
CODE:
import {useButton} from '@react-aria/button';

function Button(props) {
  let ref = useRef<HTMLButtonElement | null>(null);
  let {focusProps, isFocusVisible} = useFocusRing();
  let {buttonProps} = useButton(props, ref);
  return <button {...mergeProps(buttonProps, focusProps)} ref={ref} className={`${props.className} ${isFocusVisible ? 'focus' : ''}`}>{props.children}</button>;
}

----------------------------------------

TITLE: Implementing Quiet Mode NumberField in React Spectrum
DESCRIPTION: This example shows how to create a NumberField with the quiet styling variant by using the isQuiet prop. The quiet variant has a minimal visual footprint with just a bottom border.

LANGUAGE: tsx
CODE:
<NumberField label="Cookies" isQuiet minValue={0} />

----------------------------------------

TITLE: Determinate ProgressCircle in React Spectrum
DESCRIPTION: Example of a determinate ProgressCircle showing 50% progress, suitable when progress can be calculated against a specific goal.

LANGUAGE: tsx
CODE:
<ProgressCircle aria-label="Loading…" value={50} />

----------------------------------------

TITLE: Using disabledKeys for Dynamic Disabled Items in ListBox
DESCRIPTION: Example of using the disabledKeys prop at the ListBox level to disable specific items by their ID, an alternative to using isDisabled on individual items.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    { id: 1, name: 'Aardvark' },
    { id: 2, name: 'Cat' },
    { id: 3, name: 'Dog' },
    { id: 4, name: 'Kangaroo' },
    { id: 5, name: 'Koala' },
    { id: 6, name: 'Penguin' },
    { id: 7, name: 'Snake' },
    { id: 8, name: 'Turtle' },
    { id: 9, name: 'Wombat' }
  ];

  return (
    <ListBox
      aria-label="Animals with disabledKeys"
      items={options}
      selectionMode="single"
      /*- begin highlight -*/
      disabledKeys={[4, 6]}
      /*- end highlight -*/
    >
      {(item) => <ListBoxItem>{item.name}</ListBoxItem>}
    </ListBox>
  );
}

----------------------------------------

TITLE: Basic GridList Implementation with Selection and Buttons in React Aria Components
DESCRIPTION: Example showing a GridList with multiple selection mode, checkbox selection, and info buttons for each item. Demonstrates the core functionality of a GridList with interactive elements.

LANGUAGE: tsx
CODE:
import {GridList, GridListItem, Button} from 'react-aria-components';
import {MyCheckbox} from './Checkbox';

<GridList aria-label="Favorite pokemon" selectionMode="multiple">
  <GridListItem textValue="Charizard">
    <MyCheckbox slot="selection" />
    Charizard
    <Button aria-label="Info">ⓘ</Button>
  </GridListItem>
  <GridListItem textValue="Blastoise">
    <MyCheckbox slot="selection" />
    Blastoise
    <Button aria-label="Info">ⓘ</Button>
  </GridListItem>
  <GridListItem textValue="Venusaur">
    <MyCheckbox slot="selection" />
    Venusaur
    <Button aria-label="Info">ⓘ</Button>
  </GridListItem>
  <GridListItem textValue="Pikachu">
    <MyCheckbox slot="selection" />
    Pikachu
    <Button aria-label="Info">ⓘ</Button>
  </GridListItem>
</GridList>

----------------------------------------

TITLE: Custom Width ColorField
DESCRIPTION: Shows how to set a custom width for the ColorField component using Spectrum dimension tokens.

LANGUAGE: tsx
CODE:
<ColorField label="Primary Color" width="size-3600" maxWidth="100%" />

----------------------------------------

TITLE: Creating Link Items in React ListBox
DESCRIPTION: This example shows how to create ListBox items that function as links. The href prop is passed to ListBoxItem to create navigation links that open in a new tab when clicked.

LANGUAGE: tsx
CODE:
<ListBox aria-label="Links">
  <ListBoxItem href="https://adobe.com/" target="_blank">Adobe</ListBoxItem>
  <ListBoxItem href="https://apple.com/" target="_blank">Apple</ListBoxItem>
  <ListBoxItem href="https://google.com/" target="_blank">Google</ListBoxItem>
  <ListBoxItem href="https://microsoft.com/" target="_blank">Microsoft</ListBoxItem>
</ListBox>

----------------------------------------

TITLE: Styling Invalid ColorField States with CSS
DESCRIPTION: CSS styling for invalid ColorField states, including input border color and error message styling.

LANGUAGE: css
CODE:
.react-aria-ColorField {
  &[data-invalid] {
    .react-aria-Input {
      border-color: var(--invalid-color);
    }
  }

  .react-aria-FieldError {
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: Configuring Drag Item Data Serialization in React Spectrum
DESCRIPTION: Creates a function that serializes dragged items to a custom drag type. This function maps selected keys to their corresponding items and converts them to a JSON string with the 'adobe-app' type identifier.

LANGUAGE: tsx
CODE:
let getItems = (keys) => [...keys].map(key => {
  let item = list.getItem(key);
  return {
    'adobe-app': JSON.stringify(item)
  };
})

----------------------------------------

TITLE: ContextualHelp with Info Variant in React Spectrum
DESCRIPTION: Example of the ContextualHelp component using the 'info' variant, which is best for supplemental information with an instructive tone.

LANGUAGE: tsx
CODE:
<ContextualHelp variant="info">
  <Heading>Permission required</Heading>
  <Content><Text>Your admin must grant you permission before you can create a segment.</Text></Content>
</ContextualHelp>

----------------------------------------

TITLE: Restricting Allowed Drop Operations
DESCRIPTION: Example demonstrating how to limit allowed drop operations using getAllowedDropOperations. This implementation restricts drops to only copy operations, preventing move operations even when modifier keys are pressed.

LANGUAGE: tsx
CODE:
function Example() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Adobe Photoshop'},
      {id: 2, name: 'Adobe XD'},
      {id: 3, name: 'Adobe Dreamweaver'},
      {id: 4, name: 'Adobe InDesign'},
      {id: 5, name: 'Adobe Connect'}
    ]
  });
  // ...

  let { dragAndDropHooks } = useDragAndDrop({
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    getItems(keys) {
      return [...keys].map(key => {
        let item = list.getItem(key);
        return {
          'text/plain': item.name,
          'custom-app-type': JSON.stringify(item)
        };
      });
    },
    // ...
    getAllowedDropOperations: () => ['copy']
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      <MyGridList aria-label="Draggable list" selectionMode="multiple" items={list.items} dragAndDropHooks={dragAndDropHooks}>
        {item => <MyItem>{item.name}</MyItem>}
      </MyGridList>
      <DroppableGridList />
    </div>
  );
}

----------------------------------------

TITLE: Filtering Drag Operations with getDropOperation
DESCRIPTION: This example shows how to implement the getDropOperation function to control what types of files can be dropped on a target. It only accepts PNG images and returns 'copy' for those files while rejecting all other file types with 'cancel'.

LANGUAGE: tsx
CODE:
function DropTarget() {
  let [file, setFile] = React.useState(null);
  let ref = React.useRef(null);
  let {dropProps, isDropTarget} = useDrop({
    ref,
    /*- begin highlight -*/
    getDropOperation(types, allowedOperations) {
      return types.has('image/png') ? 'copy' : 'cancel';
    },
    /*- end highlight -*/
    async onDrop(e) {
      let item = e.items.find(item => item.kind === 'file' && item.type === 'image/png') as FileDropItem;
      if (item) {
        setFile(URL.createObjectURL(await item.getFile()));
      }
    }
  });

  // ...

----------------------------------------

TITLE: Building an HSLA Color Picker with ColorSlider in React
DESCRIPTION: Creates an HSLA color picker using four color sliders for hue, saturation, lightness, and alpha channels. Demonstrates binding multiple sliders to the same HSL color value in state.

LANGUAGE: tsx
CODE:
function Example() {
  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));
  return (
    <>
      <ColorSlider channel="hue" value={color} onChange={setColor} />
      <ColorSlider channel="saturation" value={color} onChange={setColor} />
      <ColorSlider channel="lightness" value={color} onChange={setColor} />
      <ColorSlider channel="alpha" value={color} onChange={setColor} />
    </>
  );
}

----------------------------------------

TITLE: Adding Contextual Help to NumberField in React Spectrum
DESCRIPTION: This example shows how to add contextual help to a NumberField using the ContextualHelp component. It provides additional information about the field's purpose in a popover that appears when the user clicks the help icon.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<NumberField
  label="Exposure"
  formatOptions={{
    signDisplay: 'exceptZero',
    minimumFractionDigits: 1,
    maximumFractionDigits: 2
  }}
  defaultValue={0}
  contextualHelp={
    <ContextualHelp>
      <Heading>What is exposure?</Heading>
      <Content>Exposure adjusts how bright the image is.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Moving Items within Tree Data Structure
DESCRIPTION: Examples showing how to move items within a tree data structure, including moving within the same parent, to different parents, or to the root level.

LANGUAGE: tsx
CODE:
// Move an item within the same parent
tree.move('Sam', 'People', 0);

// Move an item to a different parent
tree.move('Sam', 'Animals', 1);

// Move an item to the root
tree.move('Sam', null, 1);

----------------------------------------

TITLE: Basic Tooltip Implementation in React Spectrum
DESCRIPTION: A simple example of implementing a tooltip for an Edit button using TooltipTrigger and Tooltip components.

LANGUAGE: tsx
CODE:
<TooltipTrigger>
  <ActionButton aria-label="Edit Name"><Edit /></ActionButton>
  <Tooltip>Change Name</Tooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Dynamic ListBox Example with Selection Handling
DESCRIPTION: Shows how to implement a ListBox with dynamic items loaded from a data source. It demonstrates selection handling with the onSelectionChange prop and displays the selected animal ID.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, name: 'Aardvark'},
    {id: 2, name: 'Cat'},
    {id: 3, name: 'Dog'},
    {id: 4, name: 'Kangaroo'},
    {id: 5, name: 'Koala'},
    {id: 6, name: 'Penguin'},
    {id: 7, name: 'Snake'},
    {id: 8, name: 'Turtle'},
    {id: 9, name: 'Wombat'}
  ];
  let [animalId, setAnimalId] = React.useState(null);

  return (
    <>
      <ListBox width="size-2400" aria-label="Animals" items={options} selectionMode="single" onSelectionChange={setAnimalId}>
        {item => <Item>{item.name}</Item>}
      </ListBox>
      <p>Animal id: {animalId}</p>
    </>
  );
}

----------------------------------------

TITLE: RadioGroup with Help Text and Error Messages
DESCRIPTION: Shows how to add description and error messages to a RadioGroup based on validation state using isInvalid prop.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState('dogs');
  let isValid = selected === 'dogs';

  return (
    <RadioGroup
      aria-label="Favorite pet"
      onChange={setSelected}
      isInvalid={!isValid}
      description="Please select a pet."
      errorMessage={
        selected === 'cats'
          ? 'No cats allowed.'
          : 'Please select dogs.'
      }>
      <Radio value="dogs">
        Dogs
      </Radio>
      <Radio value="cats">
        Cats
      </Radio>
      <Radio value="dragons">
        Dragons
      </Radio>
    </RadioGroup>
  );
}

----------------------------------------

TITLE: Controlled RadioGroup Component with React State
DESCRIPTION: Example of implementing a controlled RadioGroup using React state. This demonstrates how to manage the selected value and handle change events.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState(null);

  return (
    <>
      <MyRadioGroup label="Favorite avatar" value={selected} onChange={setSelected}>
        <Radio value="wizard">Wizard</Radio>
        <Radio value="dragon">Dragon</Radio>
      </MyRadioGroup>
      <p>You have selected: {selected ?? ''}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing Row Actions in TableView with Different Selection Styles
DESCRIPTION: Example of TableView with row actions using both checkbox and highlight selection styles. The onAction callback is triggered when rows are clicked or activated via keyboard.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-300">
  <PokemonTable aria-label="Pokemon table with row actions and checkbox selection" selectionMode="multiple" onAction={key => alert(`Opening item ${key}...`)} />
  <PokemonTable aria-label="Pokemon table with row actions and highlight selection" selectionMode="multiple" selectionStyle="highlight" onAction={key => alert(`Opening item ${key}...`)} />
</Flex>

----------------------------------------

TITLE: TextField CSS Styling
DESCRIPTION: CSS styling for the TextField component, including state variations like focus. The styling provides a cohesive look consistent with the React Aria theme.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-TextField {
  display: flex;
  flex-direction: column;
  width: fit-content;
  color: var(--text-color);

  .react-aria-Input,
  .react-aria-TextArea {
    padding: 0.286rem;
    margin: 0;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--field-background);
    font-size: 1.143rem;
    color: var(--field-text-color);

    &[data-focused] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -1px;
    }
  }
}

----------------------------------------

TITLE: TagGroup with Avatars in TSX
DESCRIPTION: Demonstrates how to create tags with avatars by combining Avatar components with Text components inside Item elements.

LANGUAGE: tsx
CODE:
<TagGroup aria-label="TagGroup with avatars example">
  <Item textValue="Person 1">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>Person 1</Text>
  </Item>
  <Item textValue="Person 2">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>Person 2</Text>
  </Item>
  <Item textValue="Person 3">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>Person 3</Text>
  </Item>
  <Item textValue="Person 4">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>Person 4</Text>
  </Item>
</TagGroup>

----------------------------------------

TITLE: Tabs Component Basic Structure in React Aria Components
DESCRIPTION: The basic structure and import statement for creating a Tabs component using React Aria Components. This shows the essential component composition pattern.

LANGUAGE: tsx
CODE:
import {Tabs, TabList, Tab, TabPanel} from 'react-aria-components';

<Tabs>
  <TabList>
    <Tab />
  </TabList>
  <TabPanel />
</Tabs>

----------------------------------------

TITLE: Styling Invalid Date Segments and Error Messages
DESCRIPTION: CSS for styling invalid date segments and error messages in the TimeField component.

LANGUAGE: css
CODE:
.react-aria-DateSegment {
  &[data-invalid] {
    color: var(--invalid-color);

    &:focus {
      background: var(--highlight-background-invalid);
      color: var(--highlight-foreground);
    }
  }
}

.react-aria-TimeField {
  .react-aria-FieldError {
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: Creating Custom ComboBox with Context Providers
DESCRIPTION: Shows how to implement a custom ComboBox component that provides necessary contexts for child components, allowing reuse of standard react-aria-components within a custom implementation.

LANGUAGE: jsx
CODE:
import {useComboBox} from 'react-aria';
import {ButtonContext, InputContext, LabelContext, ListBoxContext, Provider} from 'react-aria-components';

function MyComboBox(props) {
  // ...
  let {
    buttonProps,
    inputProps,
    listBoxProps,
    labelProps
  } = useComboBox({/* ... */});

  return (
    <Provider
      values={[
        [LabelContext, labelProps],
        [ButtonContext, buttonProps],
        [InputContext, inputProps],
        [ListBoxContext, listBoxProps]
      ]}
    >
      {props.children}
    </Provider>
  );
}

----------------------------------------

TITLE: Styling TextField States with CSS Data Attributes
DESCRIPTION: Example of using data attributes to target different states of input components within a TextField.

LANGUAGE: css
CODE:
input[data-hovered] {
  /* ... */
}

input[data-disabled] {
  /* ... */
}

----------------------------------------

TITLE: Creating a Custom DateSegment Wrapper Component
DESCRIPTION: Demonstrates how to create a wrapper component to customize props passed to a DateSegment component.

LANGUAGE: tsx
CODE:
function MyDateSegment(props) {
  return <MyDateSegment {...props} className="my-date-segment" />
}

----------------------------------------

TITLE: Importing the Link Component in React Spectrum
DESCRIPTION: Shows how to import the Link component from React Spectrum along with the View component.

LANGUAGE: jsx
CODE:
import {Link} from '@react-spectrum/link';
import {View} from '@react-spectrum/view';

----------------------------------------

TITLE: Creating Multi-line TextField with TextArea Component
DESCRIPTION: Example of using the TextArea component inside a TextField to enable multi-line text input functionality.

LANGUAGE: tsx
CODE:
import {TextField, Label, TextArea} from 'react-aria-components';

<TextField>
  <Label>Comment</Label>
  <TextArea />
</TextField>

----------------------------------------

TITLE: Styling FieldError Component with CSS
DESCRIPTION: CSS styling for the FieldError component within a CheckboxGroup to display validation errors with custom styling. Sets font size and color for error messages.

LANGUAGE: css
CODE:
.react-aria-CheckboxGroup {
  .react-aria-FieldError {
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: Quiet ColorField
DESCRIPTION: Shows the quiet visual variant of the ColorField component.

LANGUAGE: tsx
CODE:
<ColorField label="Primary Color" isQuiet />

----------------------------------------

TITLE: Accessible Well Component with ARIA Attributes
DESCRIPTION: Demonstrates how to make a Well component accessible by adding semantic roles and ARIA attributes, suitable for content that has semantic meaning.

LANGUAGE: tsx
CODE:
<Well role="region" aria-labelledby="wellLabel">
  <h3 id="wellLabel">Shipping Address</h3>
  <p>601 Townsend Street<br /> San Francisco, CA 94103</p>
</Well>

----------------------------------------

TITLE: ComboBox with Controlled and Uncontrolled Input Values
DESCRIPTION: Demonstrates two ComboBox implementations - one with an uncontrolled input value using defaultInputValue, and another with a controlled input value using inputValue and onInputChange.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, name: 'Adobe Photoshop'},
    {id: 2, name: 'Adobe XD'},
    {id: 3, name: 'Adobe InDesign'},
    {id: 4, name: 'Adobe AfterEffects'},
    {id: 5, name: 'Adobe Illustrator'},
    {id: 6, name: 'Adobe Lightroom'},
    {id: 7, name: 'Adobe Premiere Pro'},
    {id: 8, name: 'Adobe Fresco'},
    {id: 9, name: 'Adobe Dreamweaver'}
  ];
  let [value, setValue] = React.useState('Adobe XD');

  return (
    <Flex gap="size-150" wrap>
      <ComboBox
        label="Adobe product (Uncontrolled)"
        defaultItems={options}
        defaultInputValue="Adobe XD">
        {item => <Item>{item.name}</Item>}
      </ComboBox>

      <ComboBox
        label="Pick an Adobe product (Controlled)"
        defaultItems={options}
        inputValue={value}
        onInputChange={setValue}>
        {item => <Item>{item.name}</Item>}
      </ComboBox>
    </Flex>
  );
}

----------------------------------------

TITLE: Meter Component with Custom Value Formatting
DESCRIPTION: Using the formatOptions prop to customize how the value is displayed, in this case formatting the value as Japanese currency.

LANGUAGE: tsx
CODE:
<MyMeter
  label="Currency"
  formatOptions={{style: 'currency', currency: 'JPY'}}
  value={60} />

----------------------------------------

TITLE: Setting Placeholder Value for DatePicker
DESCRIPTION: Example demonstrating how to set a custom placeholder value for a DatePicker, which controls both the displayed placeholder and default calendar date.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

<MyDatePicker label="Birth date" placeholderValue={new CalendarDate(1980, 1, 1)} />

----------------------------------------

TITLE: Handling RangeCalendar onChange Events with Formatting
DESCRIPTION: Demonstrates using the onChange event to update a separate element with a formatted version of the selected date range in the user's locale. It converts the date to a native JavaScript Date object to pass to the formatter.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@react-aria/i18n';

function Example() {
  let [range, setRange] = React.useState({
    start: parseDate('2020-07-03'),
    end: parseDate('2020-07-10')
  });
  let formatter = useDateFormatter({dateStyle: 'long'});

  return (
    <>
      <MyRangeCalendar aria-label="Date range" value={range} onChange={setRange} />
      <p>
        Selected date:{' '}
        {formatter.formatRange(
          range.start.toDate(getLocalTimeZone()),
          range.end.toDate(getLocalTimeZone())
        )}
      </p>
    </>
  );
}

----------------------------------------

TITLE: Highlights Component Implementation for React Spectrum Libraries
DESCRIPTION: Implements the Highlights component that displays cards for the four main libraries in the React Spectrum collection: React Spectrum, React Aria, React Stately, and Internationalized. Each card includes a title, description, and accessible link.

LANGUAGE: JSX
CODE:
<Highlights items={[
  {
    title: 'React Spectrum',
    description: 'A React implementation of Spectrum, Adobe's design system. Spectrum provides adaptive, accessible, and cohesive experiences for all Adobe applications.',
    url: './react-spectrum/index.html',
    urlText: <>Explore<VisuallyHidden elementType="span"> React Spectrum</VisuallyHidden></>
  },
  {
    title: 'React Aria',
    description: 'A library of unstyled React components and hooks that helps you build accessible, high quality UI components for your application or design system.',
    url: './react-aria/index.html',
    urlText: <>Learn more<VisuallyHidden elementType="span"> about React Aria</VisuallyHidden></>
  },
  {
    title: 'React Stately',
    description: 'A library of React Hooks that provides cross-platform state management for your design system.',
    url: './react-stately/index.html',
    urlText: <>Get Started<VisuallyHidden elementType="span"> with React Stately</VisuallyHidden></>
  },
  {
    title: 'Internationalized',
    description: 'A collection of framework-agnostic internationalization libraries for the web.',
    url: './internationalized/index.html',
    urlText: <>Show <VisuallyHidden elementType="span">Internationalized</VisuallyHidden> Packages</>
  }
]} />

----------------------------------------

TITLE: ProgressCircle with Specific Value in React Spectrum
DESCRIPTION: Shows a ProgressCircle with 25% progress value, demonstrating how to control the component with the value prop.

LANGUAGE: tsx
CODE:
<ProgressCircle aria-label="Loading…" value={25} />

----------------------------------------

TITLE: Referencing React Spectrum Tag Package in Markdown
DESCRIPTION: Shows the markdown header for the @react-spectrum/tag package documentation, which identifies this component as part of the React Spectrum library and refers to the main repository for more information.

LANGUAGE: markdown
CODE:
# @react-spectrum/tag

----------------------------------------

TITLE: Importing Breadcrumbs Component in React Spectrum
DESCRIPTION: Code showing how to import the Breadcrumbs and Item components from the React Spectrum library, along with the View component which is used in some examples.

LANGUAGE: jsx
CODE:
import {Breadcrumbs, Item} from '@react-spectrum/breadcrumbs';
import {View} from '@react-spectrum/view';

----------------------------------------

TITLE: Using the Removable Component with TagGroup and ToggleButton
DESCRIPTION: Example showing how to use the Removable component to wrap a TagGroup and ToggleButton, creating an editable tag interface where edit mode is toggled by the button.

LANGUAGE: tsx
CODE:
import {ToggleButton} from 'react-aria-components';

<Removable onRemove={ids => alert(`Remove ${[...ids]}`)}>
  <MyTagGroup label="Ice cream flavor">
    <MyTag id="chocolate">Chocolate</MyTag>
    <MyTag id="mint">Mint</MyTag>
    <MyTag id="strawberry">Strawberry</MyTag>
    <MyTag id="vanilla">Vanilla</MyTag>
  </MyTagGroup>
  <ToggleButton style={{marginTop: '8px'}}>Edit</ToggleButton>
</Removable>

----------------------------------------

TITLE: Using FieldGroup to Control Multiple Text Fields
DESCRIPTION: Example of using the custom FieldGroup component to disable multiple TextField components at once. Any TextField within the FieldGroup will receive the isDisabled prop from the group context.

LANGUAGE: tsx
CODE:
<FieldGroup isDisabled={isSubmitting}>
  <MyTextField label="Name" />
  <MyTextField label="Email" />
  <CreditCardFields />
</FieldGroup>

----------------------------------------

TITLE: Tailwind Configuration for React Aria Components in Tailwind v3
DESCRIPTION: JavaScript configuration for Tailwind v3, showing how to add the required plugins for React Aria Components and animations in the tailwind.config.js file.

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components'),
    require('tailwindcss-animate')
  ]
};

----------------------------------------

TITLE: Auto-Dismissing Toast Notification
DESCRIPTION: Shows how to create a toast notification that automatically dismisses after a specified timeout (minimum 5 seconds).

LANGUAGE: tsx
CODE:
<Button
  onPress={() => ToastQueue.positive('Toast is done!', {timeout: 5000})}
  variant="primary">
  Show toast
</Button>

----------------------------------------

TITLE: Quiet ToggleButton Styling in React Spectrum
DESCRIPTION: Shows how to create a quiet variant of the ToggleButton using the isQuiet prop, which has a more subtle visual appearance.

LANGUAGE: tsx
CODE:
<ToggleButton isQuiet>Pin</ToggleButton>

----------------------------------------

TITLE: Referencing React Spectrum Tag Package in Markdown
DESCRIPTION: Shows the markdown header for the @react-spectrum/tag package documentation, which identifies this component as part of the React Spectrum library and refers to the main repository for more information.

LANGUAGE: markdown
CODE:
# @react-spectrum/tag

----------------------------------------

TITLE: Building an RGBA Color Picker with ColorSlider
DESCRIPTION: Creates a complete RGBA color picker by combining multiple ColorSlider components for each channel, all connected to the same state value.

LANGUAGE: tsx
CODE:
function Example() {
  let [color, setColor] = React.useState(parseColor('#ff00ff'));

  return (
    <Flex direction="column">
      <ColorSlider channel="red" value={color} onChange={setColor} />
      <ColorSlider channel="green" value={color} onChange={setColor} />
      <ColorSlider channel="blue" value={color} onChange={setColor} />
      <ColorSlider channel="alpha" value={color} onChange={setColor} />
    </Flex>
  );
}

----------------------------------------

TITLE: Creating a Custom Label Compatible with ColorField
DESCRIPTION: Example showing how to create a custom label component that works with ColorField by consuming the LabelContext and using useContextProps.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Implementing Selection with disallowEmptySelection Option
DESCRIPTION: Shows how to use the disallowEmptySelection prop to enforce that at least one row is selected at all times. When this option is enabled, the last selected row cannot be deselected.

LANGUAGE: tsx
CODE:
// Using the example above
<FileTable selectionMode="single" defaultSelectedKeys={[2]} disallowEmptySelection />

----------------------------------------

TITLE: Dismissable Dialog Implementation
DESCRIPTION: A dismissable Dialog that has a close button at the top right instead of a button group at the bottom, used for displaying status information.

LANGUAGE: tsx
CODE:
<DialogTrigger isDismissable>
  <ActionButton>Status</ActionButton>
  <Dialog>
    <Heading>Status</Heading>
    <Divider />
    <Content>Printer Status: Connected</Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Styling ColorSwatch with CSS
DESCRIPTION: Provides basic CSS styling for the ColorSwatch component, setting dimensions, border-radius, and a subtle shadow.

LANGUAGE: css
CODE:
.react-aria-ColorSwatch {
  width: 32px;
  height: 32px;
  border-radius: 4px;
  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);
}

----------------------------------------

TITLE: Customizing Empty State in TreeView Component
DESCRIPTION: This example demonstrates how to provide a custom empty state display when a TreeView has no items, using the renderEmptyState prop with an IllustratedMessage component.

LANGUAGE: tsx
CODE:
import {Content} from '@react-spectrum/view';
import {IllustratedMessage} from '@react-spectrum/illustratedmessage';
import NotFound from '@spectrum-icons/illustrations/NotFound';
import {Heading} from '@react-spectrum/text';

function renderEmptyState() {
  return (
    <IllustratedMessage>
      <NotFound />
      <Heading>No results</Heading>
      <Content>No results found</Content>
    </IllustratedMessage>
  );
}

<TreeView aria-label="Example tree for empty state" height="size-2400" maxWidth="size-6000" renderEmptyState={renderEmptyState}>
  {[]}
</TreeView>

----------------------------------------

TITLE: Using the Calendar Picker Component with Preset Dates
DESCRIPTION: Example showing how to use the custom CalendarPicker component with preset date buttons. Imports date utilities and creates clickable buttons for common date selections.

LANGUAGE: tsx
CODE:
import {startOfWeek, startOfMonth} from '@internationalized/date';
import {useLocale} from 'react-aria';

function Example() {
  let {locale} = useLocale();
  let now = today(getLocalTimeZone());

  return (
    <CalendarPicker>
      <Preset date={now}>Today</Preset>
      <Preset date={startOfWeek(now.add({weeks: 1}), locale)}>Next week</Preset>
      <Preset date={startOfMonth(now.add({months: 1}))}>Next month</Preset>
      <MyCalendar aria-label="Meeting date" />
    </CalendarPicker>
  );
}

----------------------------------------

TITLE: Creating a Read-Only RangeCalendar Component
DESCRIPTION: Demonstrates creating a read-only RangeCalendar using the isReadOnly prop. Unlike disabled calendars, read-only calendars remain focusable but their values cannot be changed.

LANGUAGE: tsx
CODE:
<MyRangeCalendar aria-label="Trip dates" value={{start: today(getLocalTimeZone()), end: today(getLocalTimeZone()).add({ weeks: 1 })}} isReadOnly />

----------------------------------------

TITLE: Creating Custom Collection Renderers with CollectionRendererContext
DESCRIPTION: Demonstrates how to implement custom collection rendering behavior by providing a custom CollectionRenderer to CollectionRendererContext. This advanced technique allows for customized rendering of collection items and sections.

LANGUAGE: tsx
CODE:
import type {CollectionRenderer} from 'react-aria-components';
import {CollectionRendererContext} from 'react-aria-components';

const renderer: CollectionRenderer = {
  CollectionRoot({collection}) {
    let items = [];
    for (let item of collection) {
      items.push(item.render(item));
    }
    return items;
  },
  CollectionBranch({collection, parent}) {
    let items = [];
    for (let item of collection.getChildren(parent.key)) {
      items.push(item.render(item));
    }
    return items;
  }
};

<CollectionRendererContext.Provider value={renderer}>
  <ListBox>
    {/* ... */}
  </ListBox>
</CollectionRendererContext.Provider>

----------------------------------------

TITLE: Implementing Disabled Menu Items in React Spectrum
DESCRIPTION: This example shows how to disable specific menu items using the disabledKeys prop. The snippet demonstrates creating a menu with items generated from an array, where selected items are disabled based on their IDs.

LANGUAGE: tsx
CODE:
<MenuTrigger>
  <ActionButton>
    Filter
  </ActionButton>
  <Menu
    items={[
      {name: 'tiff', id: 'a1b2c3'},
      {name: 'png', id: 'g5h1j9'},
      {name: 'jpg', id: 'p8k3i4'},
      {name: 'PDF', id: 'j7i3a0'}
    ]}
    disabledKeys={['a1b2c3', 'p8k3i4']}>
    {item => <Item>{item.name}</Item>}
  </Menu>
</MenuTrigger>

----------------------------------------

TITLE: Importing the Badge Component in React Spectrum
DESCRIPTION: This snippet demonstrates how to import the Badge component from the React Spectrum library.

LANGUAGE: jsx
CODE:
import {Badge} from '@react-spectrum/badge';

----------------------------------------

TITLE: Initializing Droppable List Data with useListData in React Spectrum
DESCRIPTION: Sets up initial data for a droppable list using useListData hook. This creates a list of Adobe applications and a folder, where the folder can accept dropped items.

LANGUAGE: tsx
CODE:
let list = useListData({
  initialItems: [
    {id: 'f', type: 'file', name: 'Adobe AfterEffects'},
    {id: 'g', type: 'file', name: 'Adobe Illustrator'},
    {id: 'h', type: 'file', name: 'Adobe Lightroom'},
    {id: 'i', type: 'file', name: 'Adobe Premiere Pro'},
    {id: 'j', type: 'file', name: 'Adobe Fresco'},
    {id: 'k', type: 'folder', name: 'Apps', childNodes: []}
  ]
});

----------------------------------------

TITLE: Integrating DatePicker with HTML Forms in React Spectrum
DESCRIPTION: Example showing how to integrate DatePicker with HTML forms using the name prop. The value will be submitted as an ISO 8601 formatted string according to the granularity of the value.

LANGUAGE: tsx
CODE:
<DatePicker label="Birth date" name="birthday" />

----------------------------------------

TITLE: Importing Tailwind CSS for Notifications Popover in React
DESCRIPTION: Imports the Tailwind CSS global styles to be used with the notifications popover component. This enables the use of Tailwind's utility classes throughout the component.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Implementing Horizontal Stack Layout in ListBox with React
DESCRIPTION: Example of using the orientation prop set to 'horizontal' to create a horizontal list of albums with multiple selection.

LANGUAGE: tsx
CODE:
<ListBox
  aria-label="Albums"
  ///- begin highlight -///
  orientation="horizontal"
  ///- end highlight -///
  items={albums}
  selectionMode="multiple">
  {item => (
    <ListBoxItem textValue={item.title}>
      <img src={item.image} alt="" />
      <Text slot="label">{item.title}</Text>
      <Text slot="description">{item.artist}</Text>
    </ListBoxItem>
  )}
</ListBox>

----------------------------------------

TITLE: Static Color ActionGroup in React Spectrum
DESCRIPTION: Demonstrates ActionGroups with staticColor prop for use over colored backgrounds. Shows both white text on dark background and black text on light background examples.

LANGUAGE: tsx
CODE:
<Flex wrap gap="size-250">
  <View backgroundColor="static-blue-700" padding="size-500">
    <ActionGroup staticColor="white">
      <Item key="edit">
        <Draw />
        <Text>Edit</Text>
      </Item>
      <Item key="copy">
        <Copy />
        <Text>Copy</Text>
      </Item>
      <Item key="delete">
        <Delete />
        <Text>Delete</Text>
      </Item>
    </ActionGroup>
  </View>
  <View backgroundColor="static-yellow-400" padding="size-500">
    <ActionGroup
      staticColor="black"
      isQuiet
      buttonLabelBehavior="hide"
      selectionMode="single"
      disallowEmptySelection
      defaultSelectedKeys={['list']}>
      <Item key="list">
        <ViewList />
        <Text>List view</Text>
      </Item>
      <Item key="grid">
        <ViewGrid />
        <Text>Grid view</Text>
      </Item>
      <Item key="gallery">
        <ViewCard />
        <Text>Gallery view</Text>
      </Item>
    </ActionGroup>
  </View>
</Flex>

----------------------------------------

TITLE: ActionMenu with Different Alignment and Direction Options
DESCRIPTION: Shows various combinations of align and direction props to control the positioning of the ActionMenu relative to its trigger button.

LANGUAGE: tsx
CODE:
<Flex gap="size-100">
  <ActionMenu align="start">
    <Item key="cut">Cut</Item>
    <Item key="copy">Copy</Item>
    <Item key="paste">Paste</Item>
  </ActionMenu>
  <ActionMenu align="end" direction="top" shouldFlip={false}>
    <Item key="cut">Cut</Item>
    <Item key="copy">Copy</Item>
    <Item key="paste">Paste</Item>
  </ActionMenu>
  <ActionMenu direction="start" align="start">
    <Item key="cut">Cut</Item>
    <Item key="copy">Copy</Item>
    <Item key="paste">Paste</Item>
  </ActionMenu>
  <ActionMenu direction="end" align="end">
    <Item key="cut">Cut</Item>
    <Item key="copy">Copy</Item>
    <Item key="paste">Paste</Item>
  </ActionMenu>
</Flex>

----------------------------------------

TITLE: Controlled Disclosure with Event Handling
DESCRIPTION: Implements a controlled Disclosure component that uses React state to manage expansion state and the onExpandedChange event to update it.

LANGUAGE: tsx
CODE:
function ControlledExpansion() {
  let [isExpanded, setIsExpanded] = React.useState<boolean>(false);

  return (
    <>
      <Disclosure isExpanded={isExpanded} onExpandedChange={setIsExpanded}>
        <DisclosureTitle>System Requirements</DisclosureTitle>
        <DisclosurePanel>
          Details about system requirements here.
        </DisclosurePanel>
      </Disclosure>
      <div style={{marginTop: '20px'}}>{isExpanded ? 'The disclosure is expanded' : 'The disclosure is collapsed'}</div>
    </>
  )
}

----------------------------------------

TITLE: Link Items in Select Component
DESCRIPTION: Example demonstrating how to use items with links in a Select component. This allows navigation directly from the dropdown menu by setting the href prop on ListBoxItem elements.

LANGUAGE: tsx
CODE:
<MySelect label="Project">
  <ListBoxItem href="https://example.com/" target="_blank">Create new…</ListBoxItem>
  <ListBoxItem>Proposal</ListBoxItem>
  <ListBoxItem>Budget</ListBoxItem>
  <ListBoxItem>Onboarding</ListBoxItem>
</MySelect>

----------------------------------------

TITLE: TagGroup with Action Button in TSX
DESCRIPTION: Shows how to add an action button to a TagGroup using the actionLabel and onAction props to enable additional functionality.

LANGUAGE: tsx
CODE:
<TagGroup
  /*- begin highlight -*/
  actionLabel="Clear"
  onAction={() => alert('Clear action pressed.')}
  /*- end highlight -*/
  aria-label="TagGroup with action">
  <Item>News</Item>
  <Item>Travel</Item>
  <Item>Gaming</Item>
  <Item>Shopping</Item>
</TagGroup>

----------------------------------------

TITLE: Setting Placeholder Value in TimeField
DESCRIPTION: Example showing how to set a custom placeholder value for a TimeField, which controls the default values of each segment when the user first interacts with them.

LANGUAGE: tsx
CODE:
<TimeField label="Meeting time" placeholderValue={new Time(9)} />

----------------------------------------

TITLE: CSS Styling for ToggleButton Component
DESCRIPTION: CSS styling for the ToggleButton component, including styles for different states like pressed, selected, focused, and disabled.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-ToggleButton {
  color: var(--text-color);
  background: var(--button-background);
  border: 1px solid var(--border-color);
  forced-color-adjust: none;
  border-radius: 4px;
  appearance: none;
  vertical-align: middle;
  font-size: 1rem;
  text-align: center;
  margin: 0;
  outline: none;
  padding: 6px 10px;

  &[data-pressed] {
    box-shadow: inset 0 1px 2px rgb(0 0 0 / 0.1);
    background: var(--button-background-pressed);
    border-color: var(--border-color-pressed);
  }

  &[data-selected] {
    background: var(--highlight-background);
    border-color: var(--highlight-background);
    color: var(--highlight-foreground);

    &[data-pressed] {
      background: var(--highlight-background-pressed);
      border-color: var(--highlight-background-pressed);
    }
  }

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: 2px;
  }
}

----------------------------------------

TITLE: Controlled Selection in Select Component
DESCRIPTION: Implementation of a controlled Select component using React state. This example shows how to control the selected value and respond to selection changes, setting up a fully controlled component.

LANGUAGE: tsx
CODE:
import type {Key} from 'react-aria-components';

function Example() {
  let options = [
    {name: 'Koala'},
    {name: 'Kangaroo'},
    {name: 'Platypus'},
    {name: 'Bald Eagle'},
    {name: 'Bison'},
    {name: 'Skunk'}
  ];
  let [animal, setAnimal] = React.useState<Key>("Bison");

  return (
    <MySelect
      label="Pick an animal (controlled)"
      items={options}
      selectedKey={animal}
      onSelectionChange={selected => setAnimal(selected)}>
      {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
    </MySelect>
  );
}

----------------------------------------

TITLE: Using ColorField with Different Color Channels
DESCRIPTION: Demonstrates how to use multiple ColorField components to edit different channels of a color in HSL color space.

LANGUAGE: tsx
CODE:
function Example() {
  let [color, setColor] = React.useState(parseColor('#7f007f'));
  return (
    <>
      <div style={{display: 'flex', gap: 8}}>
        <ColorField label="Hue" value={color} onChange={setColor} colorSpace="hsl" channel="hue" />
        <ColorField label="Saturation" value={color} onChange={setColor} colorSpace="hsl" channel="saturation" />
        <ColorField label="Lightness" value={color} onChange={setColor} colorSpace="hsl" channel="lightness" />
      </div>
      <p>Current color value: {color?.toString('hex')}</p>
    </>
  );
}

----------------------------------------

TITLE: Handling Select All Functionality in a ListBox Component (TSX)
DESCRIPTION: Example showing how to handle 'Select All' functionality where the selection state can be either a Set of keys or the string 'all' to represent all items in the collection, including those not yet loaded.

LANGUAGE: tsx
CODE:
let [selectedKeys, setSelectedKeys] = useState(new Set());

function performBulkAction() {
  /*- begin highlight -*/
  if (selectedKeys === 'all') {
  /*- end highlight -*/
    // perform action on all items
  } else {
    // perform action on selected items in selectedKeys
  }
}

<ListBox
  items={items}
  selectedKeys={selectedKeys}
  onSelectionChange={setSelectedKeys}>
  {item => <ListBoxItem>{item.name}</ListBoxItem>}
</ListBox>

----------------------------------------

TITLE: MenuTrigger Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This simple comparison shows that RSP v3 supports a closeOnSelect property for MenuTrigger that is not yet implemented in Spectrum 2.

LANGUAGE: typescript
CODE:
closeOnSelect | – | 🔴 `boolean`

----------------------------------------

TITLE: Collapsing ActionGroup with overflowMode in React
DESCRIPTION: Demonstrates how to implement a collapsing ActionGroup using the overflowMode prop set to 'collapse', which automatically moves overflow items into a menu when space is limited.

LANGUAGE: tsx
CODE:
<ActionGroup overflowMode="collapse" maxWidth={250}>
  <Item key="edit">
    <Draw />
    <Text>Edit</Text>
  </Item>
  <Item key="copy">
    <Copy />
    <Text>Copy</Text>
  </Item>
  <Item key="delete">
    <Delete />
    <Text>Delete</Text>
  </Item>
  <Item key="move">
    <Move />
    <Text>Move</Text>
  </Item>
  <Item key="duplicate">
    <Duplicate />
    <Text>Duplicate</Text>
  </Item>
</ActionGroup>

----------------------------------------

TITLE: Implementing Empty State for TagList
DESCRIPTION: Example of using the renderEmptyState prop to customize what a TagList displays when there are no items.

LANGUAGE: tsx
CODE:
<TagGroup>
  <Label>Categories</Label>
  {/*- begin highlight -*/}
  <TagList renderEmptyState={() => 'No categories.'}>
  {/*- end highlight -*/}
    {[]}
  </TagList>
</TagGroup>

----------------------------------------

TITLE: Initializing Sample Email Data in TypeScript/React
DESCRIPTION: Defines a sample dataset containing email messages with various properties such as subject, sender, date, and message content. This data serves as the foundation for the swipable email list demonstration.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

let messages = {
  "emails": [
    {
      "id": 1,
      "subject": "Meeting Reminder: Project Kickoff",
      "sender": "Emma Johnson",
      "date": "9:40 AM",
      "message": "Dear Devon,\n\nThis is a friendly reminder of the upcoming project kickoff meeting scheduled for tomorrow at 9am. The meeting will be held in [location]. It's essential that all team members attend to ensure a successful start to the project.\n\nPlease come prepared with any necessary materials or information relevant to the project. If you have any questions or need further clarification, don't hesitate to reach out to me.\n\nLooking forward to seeing you at the meeting.\n\nBest regards,\nEmma"
    },
    {
      "id": 2,
      "subject": "Important Account Update",
      "sender": "support@company.com",
      "date": "8:23 AM",
      "message": "Dear Devon,\n\nWe hope this email finds you well. We are writing to inform you about an important update regarding your account with us. As part of our ongoing efforts to enhance security, we have implemented a new two-factor authentication process.\n\nTo ensure continued access to your account, please follow the instructions provided in the attached document to set up the two-factor authentication feature. If you have any questions or need assistance, please don't hesitate to contact our support team.\n\nThank you for your cooperation.\n\nBest regards,\nThe [Company] Team"
    },
    {
      "id": 3,
      "subject": "Promotion Announcement",
      "sender": "Liam Thompson",
      "date": "Yesterday",
      "message": "Dear Devon,\n\nWe are pleased to inform you that based on your exceptional performance, dedication, and contributions to the company, you have been promoted to the position of [new position]. This promotion is a recognition of your hard work and the value you bring to our organization.\n\nPlease accept our heartfelt congratulations on this well-deserved achievement. We believe that you will excel in your new role and contribute to the continued success of our team.\n\nIf you have any questions or need any support during this transition, please don't hesitate to contact the HR department.\n\nBest regards,\nThe HR Team"
    },
    {
      "id": 4,
      "subject": "Invitation to Exclusive Networking Event",
      "sender": "events@company.com",
      "date": "Yesterday",
      "message": "Dear Devon,\n\nYou are cordially invited to our upcoming exclusive networking event, where industry leaders, professionals, and enthusiasts gather to exchange ideas and forge valuable connections. This event will take place on [date] at [venue], starting at [time].\n\nPlease RSVP by [RSVP date] to secure your spot. We anticipate a high demand for attendance, so we encourage you to respond promptly. We look forward to welcoming you to this exciting event!\n\nBest regards,\nThe [Company] Events Team"
    },
    {
      "id": 5,
      "subject": "Thank You for Your Recent Purchase",
      "sender": "sales@company.com",
      "date": "Friday",
      "message": "Dear Devon,\n\nThank you for your recent purchase from our online store. We appreciate your business and are delighted to let you know that your order has been successfully processed and is now being prepared for shipment.\n\nYou will receive a confirmation email with tracking details as soon as your package is dispatched. If you have any questions regarding your order or need further assistance, please don't hesitate to reach out to our customer support team.\n\nOnce again, thank you for choosing us as your preferred shopping destination.\n\nBest regards,\nThe [Company] Team"
    },
    {
      "id": 6,
      "sender": "Jane Doe",
      "subject": "New Project Proposal",
      "date": "Friday",
      "message": "Hi Devon,\n\nI've attached a new project proposal for your review. Please let me know what you think.\n\nThanks,\nJane"
    },
    {
      "id": 7,
      "sender": "Susan Smith",
      "subject": "Status Update",
      "date": "Friday",
      "message": "Hi Devon,\n\nI'm just sending a quick status update on the project we're working on together. I'm on track to meet my deadlines, and I'll keep you updated on my progress.\n\nThanks,\nSusan"
    },
    {
      "id": 8,
      "sender": "Michael Jones",
      "subject": "Question about the presentation",
      "date": "Thursday",
      "message": "Hi Devon,\n\nI had a question about the presentation you gave last week. I was wondering if you could send me the slides so I can review them in more detail.\n\nThanks,\nMichael"
    },
    {
      "id": 9,
      "sender": "Customer Service",
      "subject": "Order Confirmation",
      "date": "Thursday",
      "message": "Hi Devon,\n\nWe just wanted to confirm that your order has been shipped. Your order number is 1234567890, and it should arrive at your home address within 2-3 business days.\n\nThanks for your purchase!\n\nCustomer Service"
    },
    {
      "id": 10,
      "sender": "Your Bank",
      "subject": "Account Statement",
      "date": "Wednesday",
      "message": "Hi Devon,\n\nWe're writing to you today to provide you with your monthly account statement. As you can see, your account balance is currently $1,000.00.\n\nPlease let us know if you have any questions.\n\nThanks,\nYour Bank"
    },
    {
      "id": 11,
      "sender": "hr@company2.com",
      "subject": "Employee Benefits Update",
      "date": "Tuesday",
      "message": "Dear Devon,\n\nWe wanted to inform you about the recent updates to our employee benefits package. We have enhanced the healthcare coverage options and added additional wellness programs to support your well-being.\n\nPlease review the attached document for detailed information on the updated benefits. If you have any questions or need further assistance, feel free to contact the HR department.\n\nBest regards,\nThe HR Team"
    }
  ]
}

----------------------------------------

TITLE: TextArea with onChange Event Handler in React Spectrum
DESCRIPTION: Demonstrates how to use the onChange event handler to update state when the user changes the text in the TextArea.

LANGUAGE: tsx
CODE:
function Example() {
  let [text, setText] = React.useState('');

  return (
    <Flex direction="column">
      <TextArea
        onChange={setText}
        label="Your text"
      />
      <pre>Mirrored text: {text}</pre>
    </Flex>
  );
}

----------------------------------------

TITLE: Setting Placeholder Value in DateField
DESCRIPTION: Example demonstrating how to set a custom placeholder value for a DateField, which influences the default values when a user first interacts with the field.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

<MyDateField
  label="Birth date"
  placeholderValue={new CalendarDate(1980, 1, 1)} />

----------------------------------------

TITLE: TextArea with Custom Width in React Spectrum
DESCRIPTION: Demonstrates how to customize the width of a TextArea component using width and maxWidth props.

LANGUAGE: tsx
CODE:
<TextArea label="Email" width="size-3600" maxWidth="100%" />

----------------------------------------

TITLE: Referencing React Stately DND Package in Markdown
DESCRIPTION: A simple markdown header that identifies the @react-stately/dnd package name. This serves as the title of the documentation file.

LANGUAGE: markdown
CODE:
# @react-stately/dnd

----------------------------------------

TITLE: ColorField with HTML Form Integration
DESCRIPTION: Shows how ColorField can be integrated with HTML forms using the name prop, which enables the value to be submitted to a server.

LANGUAGE: tsx
CODE:
<MyColorField label="Color" name="color" />

----------------------------------------

TITLE: Using ColorFieldContext for Component Composition
DESCRIPTION: Example demonstrating how to use ColorFieldContext to create a FieldGroup component that can set properties on child ColorField components.

LANGUAGE: tsx
CODE:
import {ColorFieldContext} from 'react-aria-components';

interface FieldGroupProps {
  title?: string,
  children?: React.ReactNode,
  isReadOnly?: boolean
}

function FieldGroup({title, children, isReadOnly}: FieldGroupProps) {
  return (
    <fieldset>
      <legend>{title}</legend>
      <ColorFieldContext.Provider value={{isReadOnly}}>
        {children}
      </ColorFieldContext.Provider>
    </fieldset>
  );
}

<FieldGroup title="Colors" isReadOnly>
  <MyColorField label="Background" defaultValue="#fff" />
  <MyColorField label="Foreground" defaultValue="#000" />
</FieldGroup>

----------------------------------------

TITLE: Hiding Time Zone in TimeField
DESCRIPTION: Example showing how to hide the time zone abbreviation in a TimeField when using a ZonedDateTime value.

LANGUAGE: tsx
CODE:
<TimeField
  label="Appointment time"
  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}
  hideTimeZone />

----------------------------------------

TITLE: Basic CheckboxGroup Implementation Example
DESCRIPTION: Demonstrates a simple implementation of a CheckboxGroup with multiple checkbox options for selecting favorite sports.

LANGUAGE: tsx
CODE:
<CheckboxGroup label="Favorite sports">
  <Checkbox value="soccer">Soccer</Checkbox>
  <Checkbox value="baseball">Baseball</Checkbox>
  <Checkbox value="basketball">Basketball</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Disabled ToggleButton in React Spectrum
DESCRIPTION: Demonstrates how to create a disabled ToggleButton that cannot be interacted with by users.

LANGUAGE: tsx
CODE:
<ToggleButton isDisabled>Pin</ToggleButton>

----------------------------------------

TITLE: Disallowing Empty Selection in TreeView Component
DESCRIPTION: This example demonstrates how to force users to always have at least one item selected in the TreeView by using the disallowEmptySelection prop.

LANGUAGE: tsx
CODE:
<ExampleTree
  aria-label="Example tree with disallowed empty selection"
  defaultExpandedKeys={['projects', 'project-2']}
  selectionMode="single"
  defaultSelectedKeys={['document-a']}
  /*- begin highlight -*/
  disallowEmptySelection
  /*- end highlight -*/
/>

----------------------------------------

TITLE: Hiding Time Zone in DateRangePicker
DESCRIPTION: This example shows how to hide the time zone abbreviation in a DateRangePicker when using ZonedDateTime values by using the hideTimeZone prop, which is useful when the time zone is displayed elsewhere or implicit.

LANGUAGE: tsx
CODE:
<DateRangePicker
  label="Date range"
  defaultValue={{
    start: parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]'),
    end: parseZonedDateTime('2022-11-08T19:45[America/Los_Angeles]')
  }}
  hideTimeZone />

----------------------------------------

TITLE: Importing Tailwind CSS Plugin for React Aria Components (v4)
DESCRIPTION: Example of importing the Tailwind CSS plugin for React Aria Components in Tailwind v4, which provides shorter names and autocomplete for component states.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";

----------------------------------------

TITLE: Using a Custom Dictionary with LocalizedStringProvider
DESCRIPTION: Demonstrates how to pass a custom localized string dictionary to the LocalizedStringProvider component, allowing for optimized bundle size with only the required strings.

LANGUAGE: tsx
CODE:
<LocalizedStringProvider locale={locale} dictionary={dictionary} />

----------------------------------------

TITLE: Compact Density ActionGroup in React Spectrum
DESCRIPTION: Demonstrates an ActionGroup with compact density, which reduces the margins between buttons and merges borders of neighboring buttons in the default style.

LANGUAGE: tsx
CODE:
<ActionGroup density="compact">
  <Item key="brush" aria-label="Brush"><Brush /></Item>
  <Item key="select" aria-label="Select"><Select /></Item>
  <Item key="regionSelect" aria-label="Select Region"><RegionSelect /></Item>
</ActionGroup>

----------------------------------------

TITLE: Optional SearchAutocomplete with Label Indicator
DESCRIPTION: Example of an optional SearchAutocomplete field with a necessity indicator showing it's optional via a text label.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Favorite Animal" necessityIndicator="label">
  <Item>Red Panda</Item>
  <Item>Cat</Item>
  <Item>Dog</Item>
  <Item>Aardvark</Item>
  <Item>Kangaroo</Item>
  <Item>Snake</Item>
</SearchAutocomplete>

----------------------------------------

TITLE: Basic Menu Implementation Example
DESCRIPTION: Demonstrates a basic implementation of a Menu with a trigger button and four menu items. When an item is selected, it triggers an alert with the key of the selected item.

LANGUAGE: tsx
CODE:
<MenuTrigger>
  <ActionButton>
    Edit
  </ActionButton>
  <Menu onAction={(key) => alert(key)}>
    <Item key="cut">Cut</Item>
    <Item key="copy">Copy</Item>
    <Item key="paste">Paste</Item>
    <Item key="replace">Replace</Item>
  </Menu>
</MenuTrigger>

----------------------------------------

TITLE: Implementing Directory Drop Support in React Spectrum
DESCRIPTION: This code demonstrates how to implement directory drop functionality in a React Spectrum ListBox component. It accepts directory drops, iterates through the directory contents using the async getEntries method, and displays the files and folders in a list.

LANGUAGE: tsx
CODE:
import File from '@spectrum-icons/workflow/FileTxt';
import Folder from '@spectrum-icons/workflow/Folder';
///- begin highlight -///
import {DIRECTORY_DRAG_TYPE, isDirectoryDropItem} from 'react-aria-components';
///- end highlight -///

interface DirItem {
  name: string,
  kind: string
}

function Example() {
  let [files, setFiles] = React.useState<DirItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    /*- begin highlight -*/
    acceptedDragTypes: [DIRECTORY_DRAG_TYPE],
    async onRootDrop(e) {
      // Read entries in directory and update state with relevant info.
      let dir = e.items.find(isDirectoryDropItem)!;
      let files = [];
      for await (let entry of dir.getEntries()) {
        files.push({
          name: entry.name,
          kind: entry.kind
        });
      }
      setFiles(files);
    }
    /*- end highlight -*/
  });

  return (
    <ListBox aria-label="Droppable list" items={files} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => "Drop items here"}>
      {item => (
        <ListBoxItem id={item.name} textValue={item.name}>
          <div className="dir-item">
            {item.kind === 'directory' ? <Folder /> : <File />}
            <span>{item.name}</span>
          </div>
        </ListBoxItem>
      )}
    </ListBox>
  );
}

----------------------------------------

TITLE: Basic Disclosure Group Usage Example
DESCRIPTION: Example showing the basic usage of a DisclosureGroup component with multiple DisclosureItem children, creating an accordion-like interface where only one panel can be open at a time.

LANGUAGE: tsx
CODE:
<DisclosureGroup>
  <DisclosureItem title="Personal Information">
    Personal information form here.
  </DisclosureItem>
  <DisclosureItem title="Billing Address">
    Billing address form here.
  </DisclosureItem>
</DisclosureGroup>

----------------------------------------

TITLE: Creating Disabled CheckboxGroup in React Spectrum
DESCRIPTION: This example demonstrates a fully disabled CheckboxGroup where all checkboxes are non-interactive. The isDisabled prop is applied to the entire group, making all child checkboxes disabled.

LANGUAGE: tsx
CODE:
<CheckboxGroup label="Favorite sports" isDisabled>
  <Checkbox value="soccer">Soccer</Checkbox>
  <Checkbox value="baseball">Baseball</Checkbox>
  <Checkbox value="basketball">Basketball</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Configuring Accepted Drag Types for Droppable List in React Spectrum
DESCRIPTION: Defines an array of accepted drag types for the droppable list. This ensures the list will only accept items with the 'adobe-app' drag type that is set by the draggable list.

LANGUAGE: tsx
CODE:
let acceptedDragTypes = ['adobe-app'];

----------------------------------------

TITLE: JavaScript-handled Link in React Spectrum
DESCRIPTION: Demonstrates a link without an href that uses the onPress prop for JavaScript event handling.

LANGUAGE: tsx
CODE:
<Link onPress={() => alert('Pressed link')}>Adobe</Link>

----------------------------------------

TITLE: Importing Dependencies for Contact List Example
DESCRIPTION: Imports required components from React Aria Components, CSS styles, and SVG assets for the documentation page.

LANGUAGE: tsx
CODE:
import {ExampleLayout} from '@react-spectrum/docs';
export default ExampleLayout;

import docs from 'docs:react-aria-components';
import {TypeLink} from '@react-spectrum/docs';
import styles from '@react-spectrum/docs/src/docs.css';
import ListBox from '@react-spectrum/docs/pages/assets/component-illustrations/ListBox.svg';
import {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';
import ChevronRight from '@spectrum-icons/workflow/ChevronRight';

----------------------------------------

TITLE: Controlled Open State in ActionMenu
DESCRIPTION: Example showing how to implement controlled behavior for the open state of an ActionMenu using React state and the isOpen and onOpenChange props.

LANGUAGE: tsx
CODE:
function Example() {
  let [open, setOpen] = React.useState(false);

  return (
    <ActionMenu
      isOpen={open}
      onOpenChange={setOpen}>
      <Item key="cut">Cut</Item>
      <Item key="copy">Copy</Item>
      <Item key="paste">Paste</Item>
    </ActionMenu>
  );
}

----------------------------------------

TITLE: Implementing Basic Drag and Drop Layout with React Spectrum
DESCRIPTION: This code snippet demonstrates how to create a basic drag and drop interface by combining a draggable list and a droppable list with proper spacing using the Flex component from React Spectrum's layout module.

LANGUAGE: tsx
CODE:
import {Flex} from '@react-spectrum/layout';

<Flex gap="size-300">
  <DraggableList />
  <DroppableList />
</Flex>

----------------------------------------

TITLE: Controlled and Uncontrolled TextField Values
DESCRIPTION: Shows how to implement both controlled and uncontrolled TextField components with default and state-managed values.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState('me@email.com');

  return (
    <Flex gap="size-150" wrap>
      <TextField
        label="Email (Uncontrolled)"
        defaultValue="me@email.com" />

      <TextField
        label="Email (Controlled)"
        value={value}
        onChange={setValue} />
    </Flex>
  );
}

----------------------------------------

TITLE: Handling DateRangePicker Events with Formatting
DESCRIPTION: Shows how to handle the onChange event from a DateRangePicker and format the selected date range using the useDateFormatter hook and converting to local timezone.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@react-aria/i18n';

function Example() {
  let [range, setRange] = React.useState({
    start: parseDate('2020-07-03'),
    end: parseDate('2020-07-10')
  });
  let formatter = useDateFormatter({dateStyle: 'long'});

  return (
    <>
      <DateRangePicker label="Date range" value={range} onChange={setRange} />
      <p>Selected date: {range ? formatter.formatRange(range.start.toDate(getLocalTimeZone()), range.end.toDate(getLocalTimeZone())) : '--'}</p>
    </>
  );
}

----------------------------------------

TITLE: Secondary Variant Button Styles in React Spectrum
DESCRIPTION: Demonstrates the secondary variant of Button with both fill and outline styles.

LANGUAGE: tsx
CODE:
<Flex wrap gap="size-250">
  <Button variant="secondary" style="fill">Save</Button>
  <Button variant="secondary" style="outline">Save</Button>
</Flex>

----------------------------------------

TITLE: Implementing Link Items in React ComboBox with ListBoxItem
DESCRIPTION: Creates a ComboBox component with ListBoxItem elements that function as links to external websites. Each item has an href property and target attribute to open in a new tab.

LANGUAGE: tsx
CODE:
<MyComboBox label="Tech company websites">
  <ListBoxItem href="https://adobe.com/" target="_blank">Adobe</ListBoxItem>
  <ListBoxItem href="https://apple.com/" target="_blank">Apple</ListBoxItem>
  <ListBoxItem href="https://google.com/" target="_blank">Google</ListBoxItem>
  <ListBoxItem href="https://microsoft.com/" target="_blank">Microsoft</ListBoxItem>
</MyComboBox>

----------------------------------------

TITLE: Center-aligned ButtonGroup in React Spectrum
DESCRIPTION: Example of a ButtonGroup with center alignment, recommended for use in empty state contexts.

LANGUAGE: tsx
CODE:
<ButtonGroup orientation="vertical" align="center">
  <Button variant="secondary">No, thanks</Button>
  <Button variant="secondary">Remind me later</Button>
  <Button variant="primary">Rate Now</Button>
</ButtonGroup>

----------------------------------------

TITLE: Creating Reusable TagGroup and Tag Components
DESCRIPTION: Implementation of reusable wrapper components for TagGroup and Tag that encapsulate the DOM structure, styling, and logic for consistent use throughout an application.

LANGUAGE: tsx
CODE:
import type {TagGroupProps, TagListProps, TagProps} from 'react-aria-components';
import {Button, Text} from 'react-aria-components';

interface MyTagGroupProps<T> extends Omit<TagGroupProps, 'children'>, Pick<TagListProps<T>, 'items' | 'children' | 'renderEmptyState'> {
  label?: string,
  description?: string,
  errorMessage?: string
}

function MyTagGroup<T extends object>({label, description, errorMessage, items, children, renderEmptyState, ...props}: MyTagGroupProps<T>) {
  return (
    <TagGroup {...props}>
      <Label>{label}</Label>
      <TagList items={items} renderEmptyState={renderEmptyState}>
        {children}
      </TagList>
      {description && <Text slot="description">{description}</Text>}
      {errorMessage && <Text slot="errorMessage">{errorMessage}</Text>}
    </TagGroup>
  );
}

function MyTag({children, ...props}: TagProps) {
  let textValue = typeof children === 'string' ? children : undefined;
  return (
    <Tag textValue={textValue} {...props}>
      {({allowsRemoving}) => (<>
        {children}
        {allowsRemoving && <Button slot="remove">ⓧ</Button>}
      </>)}
    </Tag>
  );
}

<MyTagGroup label="Ice cream flavor" selectionMode="single">
  <MyTag>Chocolate</MyTag>
  <MyTag>Mint</MyTag>
  <MyTag>Strawberry</MyTag>
  <MyTag>Vanilla</MyTag>
</MyTagGroup>

----------------------------------------

TITLE: Creating Reusable Tree Item Content Component in React Aria Components
DESCRIPTION: Defines a reusable TreeItemContent component that standardizes the rendering of tree items with support for different selection modes and child item indicators.

LANGUAGE: tsx
CODE:
import type {TreeItemContentProps, TreeItemContentRenderProps} from 'react-aria-components';
import {Button} from 'react-aria-components';

function MyTreeItemContent(props: TreeItemContentProps) {
  return (
    <TreeItemContent>
      {({hasChildItems, selectionBehavior, selectionMode}: TreeItemContentRenderProps) => (
        <>
          {selectionBehavior === 'toggle' && selectionMode !== 'none' && <MyCheckbox slot="selection" />}
          <Button slot="chevron">
            <svg viewBox="0 0 24 24">
              <path d="m8.25 4.5 7.5 7.5-7.5 7.5" />
            </svg>
          </Button>
          {props.children}
        </>
      )}
    </TreeItemContent>
  );
}

----------------------------------------

TITLE: TagGroup with Contextual Help in TSX
DESCRIPTION: Shows how to add contextual help information to a TagGroup using the ContextualHelp component to provide additional guidance to users.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<TagGroup
  label="Categories"
  contextualHelp={
    <ContextualHelp>
      <Heading>What are tags?</Heading>
      <Content>Tags allow users to categorize content.</Content>
    </ContextualHelp>
  }>
  <Item>News</Item>
  <Item>Travel</Item>
  <Item>Gaming</Item>
  <Item>Shopping</Item>
</TagGroup>

----------------------------------------

TITLE: ColorArea with Custom Accessibility Labels
DESCRIPTION: Demonstrates how to properly label a ColorArea component for accessibility using both aria-label and aria-labelledby approaches.

LANGUAGE: tsx
CODE:
import {ColorArea} from '@react-spectrum/color';
import {Flex} from '@react-spectrum/layout';
import {Label} from '@react-spectrum/label';

<Flex gap="size-300" wrap alignItems="end">
  <ColorArea
    aria-label="Background color"
    defaultValue="hsl(0, 100%, 50%)"
    xChannel="saturation"
    yChannel="lightness" />
  <div>
    <Label
      id="hsl-aria-labelledby-id">Background color</Label>
    <ColorArea
      aria-labelledby="hsl-aria-labelledby-id"
      defaultValue="hsl(0, 100%, 50%)"
      xChannel="saturation"
      yChannel="lightness" />
  </div>
</Flex>

----------------------------------------

TITLE: TextField with Custom Label Position
DESCRIPTION: Demonstrates how to adjust the label position and alignment of a TextField component.

LANGUAGE: tsx
CODE:
<TextField label="Search" labelPosition="side" labelAlign="end" />

----------------------------------------

TITLE: Disabled Slider Example
DESCRIPTION: Example showing a disabled Slider that users cannot interact with.

LANGUAGE: tsx
CODE:
<Slider label="Cookies to share" defaultValue={25} isDisabled />

----------------------------------------

TITLE: Creating a FieldGroup Component with TimeFieldContext
DESCRIPTION: Shows how to create a FieldGroup component that manages multiple TimeField components with shared state using the TimeFieldContext provider.

LANGUAGE: tsx
CODE:
import {TimeFieldContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface FieldGroupProps {
  title?: string,
  children?: React.ReactNode,
  errorMessage?: string
}

function FieldGroup({title, children, errorMessage}: FieldGroupProps) {
  let errorId = useId();
  return (
    <fieldset>
      <legend>{title}</legend>
      <TimeFieldContext.Provider value={{
        isInvalid: !!errorMessage,
        'aria-describedby': errorMessage ? errorId : undefined
      }}>
        {children}
      </TimeFieldContext.Provider>
      {errorMessage && <small id={errorId} className="invalid">{errorMessage}</small>}
    </fieldset>
  );
}

<FieldGroup title="Schedule meeting time" errorMessage="End time must be after start time.">
  <MyTimeField label="Start" defaultValue={new Time(13)} />
  <MyTimeField label="End" defaultValue={new Time(9)} />
</FieldGroup>

----------------------------------------

TITLE: Importing and Rendering KanbanBoard Component for Drag and Drop
DESCRIPTION: This snippet imports a KanbanBoard component from a home directory and renders it. This demonstrates the integration of a drag and drop interface within a React application using React Aria.

LANGUAGE: tsx
CODE:
import {KanbanBoard} from './home/KanbanExample';

<KanbanBoard />

----------------------------------------

TITLE: DateField Component CSS Styling
DESCRIPTION: CSS styling for the DateField component that defines the appearance of the date input field and its segments. Includes styles for wrapper, field, segments, placeholder states, and focus states.

LANGUAGE: css
CODE:
.wrapper {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

.field {
  display: inline-flex;
  padding: 2px 4px;
  border-radius: 2px;
  border: 1px solid var(--gray);
  background: var(--spectrum-global-color-gray-50);
  max-width: 100%;
  overflow: auto;
}

.field:focus-within {
  border-color: var(--blue);
}

.field .field {
  all: initial;
  display: inline-flex;
  color: inherit;
}

.segment {
  padding: 0 2px;
  font-variant-numeric: tabular-nums;
  text-align: end;
}

.segment.placeholder {
  color: var(--spectrum-gray-600);
}

.segment:focus {
  color: white;
  background: var(--blue);
  outline: none;
  border-radius: 2px;
}

----------------------------------------

TITLE: Disabled Disclosure Example
DESCRIPTION: Example showing how to disable a disclosure component using the isDisabled prop, which prevents the panel from being opened or closed.

LANGUAGE: tsx
CODE:
<Disclosure title="System Requirements" isDisabled>
  Details about system requirements here.
</Disclosure>

----------------------------------------

TITLE: Importing Header Component from React Spectrum
DESCRIPTION: Shows how to import the Header component from the @react-spectrum/view package for use in React applications.

LANGUAGE: jsx
CODE:
import {Header} from '@react-spectrum/view';

----------------------------------------

TITLE: Styling Tooltips Based on Placement Data Attributes
DESCRIPTION: Demonstrates targeting tooltips with specific placements using data attributes in CSS selectors.

LANGUAGE: css
CODE:
.react-aria-Tooltip[data-placement=left] {
  /* ... */
}

----------------------------------------

TITLE: Implementing Controlled Selection in React Spectrum Table
DESCRIPTION: This example demonstrates how to implement controlled selection in a Table component using the selectedKeys prop and onSelectionChange callback. It creates a PokemonTable component that allows users to select rows with Pokemon data.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-aria-components';

interface Pokemon {
  id: number,
  name: string,
  type: string,
  level: string
}

interface PokemonTableProps extends TableProps {
  items?: Pokemon[],
  renderEmptyState?: () => string
}

function PokemonTable(props: PokemonTableProps) {
  let items = props.items || [
    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},
    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},
    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},
    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}
  ];

  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set());

  return (
    <Table
      aria-label="Pokemon table"
      {...props}
      selectedKeys={selectedKeys}
      onSelectionChange={setSelectedKeys}
    >
      <MyTableHeader>
        <Column isRowHeader>Name</Column>
        <Column>Type</Column>
        <Column>Level</Column>
      </MyTableHeader>
      <TableBody items={items} renderEmptyState={props.renderEmptyState}>
        {item => (
          <MyRow>
            <Cell>{item.name}</Cell>
            <Cell>{item.type}</Cell>
            <Cell>{item.level}</Cell>
          </MyRow>
        )}
      </TableBody>
    </Table>
  );
}

<PokemonTable selectionMode="multiple" />

----------------------------------------

TITLE: Importing LogicButton in React Spectrum
DESCRIPTION: Shows how to import the LogicButton component from the React Spectrum button package.

LANGUAGE: jsx
CODE:
import {LogicButton} from '@react-spectrum/button';

----------------------------------------

TITLE: End-aligned ButtonGroup in React Spectrum
DESCRIPTION: Example of a ButtonGroup with end alignment, typically used inside container components like dialogs, popovers, or cards. In right-to-left languages, alignment is automatically flipped.

LANGUAGE: tsx
CODE:
<ButtonGroup orientation="vertical" align="end">
  <Button variant="secondary">No, thanks</Button>
  <Button variant="secondary">Remind me later</Button>
  <Button variant="primary">Rate Now</Button>
</ButtonGroup>

----------------------------------------

TITLE: Displaying Button Components Section in React Spectrum Documentation
DESCRIPTION: Creates a section displaying various button-related components (Button, ActionButton, ToggleButton, ButtonGroup, ActionGroup, FileTrigger) with illustrations and descriptions.

LANGUAGE: JSX
CODE:
<section className={styles.cardGroup}>

<ExampleCard
  url="Button.html"
  title="Button"
  description="A button allows a user to perform an action or to navigate to another page.">
  <Button />
</ExampleCard>

<ExampleCard
  url="ActionButton.html"
  title="ActionButton"
  description="An action button allows a user to perform an action.">
  <ActionButton />
</ExampleCard>

<ExampleCard
  url="ToggleButton.html"
  title="ToggleButton"
  description="A toggle button allows a user to toggle between two states.">
  <ToggleButton />
</ExampleCard>

<ExampleCard
  url="ButtonGroup.html"
  title="ButtonGroup"
  description="A button group is a grouping of buttons whose actions are related to each other.">
  <ButtonGroup />
</ExampleCard>

<ExampleCard
  url="ActionGroup.html"
  title="ActionGroup"
  description="An action group is a grouping of action buttons that are related to each other.">
  <ActionGroup />
</ExampleCard>

<ExampleCard
  url="FileTrigger.html"
  title="FileTrigger"
  description="A file trigger allows a user to access the file system with a Button.">
  <FileTrigger />
</ExampleCard>

</section>

----------------------------------------

TITLE: Using the useVisuallyHidden Hook in React
DESCRIPTION: This example demonstrates how to use the useVisuallyHidden hook to create visually hidden elements that remain accessible to screen readers. The hook returns props that can be spread onto any element to hide it visually while maintaining accessibility.

LANGUAGE: tsx
CODE:
import {useVisuallyHidden} from '@react-aria/visually-hidden';

let {visuallyHiddenProps} = useVisuallyHidden();

<div {...visuallyHiddenProps}>I am hidden</div>

----------------------------------------

TITLE: Importing Disclosure Components from React Spectrum
DESCRIPTION: Shows how to import the Disclosure, DisclosureTitle, and DisclosurePanel components from the React Spectrum accordion package.

LANGUAGE: jsx
CODE:
import {Disclosure, DisclosureTitle, DisclosurePanel} from '@react-spectrum/accordion';

----------------------------------------

TITLE: Semantic Variant Examples of Badge in React Spectrum
DESCRIPTION: Demonstrates the four semantic variants of Badge (positive, info, negative, and neutral) with appropriate usage guidelines for each color.

LANGUAGE: tsx
CODE:
import {Flex} from '@react-spectrum/layout';

<Flex direction="column" gap={8}>
  <Badge variant="positive">Green: Approved, Complete, Success, New, Purchased, Licensed</Badge>
  <Badge variant="info">Blue: Active, In Use, Live, Published</Badge>
  <Badge variant="negative">Red: Error, Alert, Rejected, Failed</Badge>
  <Badge variant="neutral">Gray: Archived, Deleted, Paused, Draft, Not Started, Ended</Badge>
</Flex>

----------------------------------------

TITLE: Importing Layout Component in React Spectrum
DESCRIPTION: Imports the Layout component from React Spectrum docs and exports it as the default component for page structure.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Required SearchAutocomplete with Label Indicator
DESCRIPTION: Example of a required SearchAutocomplete field using a text label to indicate the required status.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Favorite Animal" isRequired necessityIndicator="label">
  <Item>Red Panda</Item>
  <Item>Cat</Item>
  <Item>Dog</Item>
  <Item>Aardvark</Item>
  <Item>Kangaroo</Item>
  <Item>Snake</Item>
</SearchAutocomplete>

----------------------------------------

TITLE: Partial Comparison of Dates Across Calendar Systems
DESCRIPTION: Shows how to use functions like isSameMonth to compare dates, including across different calendar systems where the second date is converted to the calendar system of the first date before comparison.

LANGUAGE: tsx
CODE:
import {isSameMonth, IslamicUmalquraCalendar} from '@internationalized/date';

isSameMonth(new CalendarDate(2021, 4, 16), new CalendarDate(2021, 4, 30)); // true
isSameMonth(new CalendarDate(2021, 4, 16), new CalendarDate(2021, 8, 2)); // false
isSameMonth(new CalendarDate(2021, 4, 16), new CalendarDate(new IslamicUmalquraCalendar(), 1442, 9, 4)); // true

----------------------------------------

TITLE: Implementing Read-only TextField in React Aria Components
DESCRIPTION: Example of using the isReadOnly prop to create a read-only TextField that remains focusable but prevents editing.

LANGUAGE: tsx
CODE:
<MyTextField label="Email" defaultValue="abc@adobe.com" isReadOnly />

----------------------------------------

TITLE: Tailwind CSS Configuration for React Aria Components
DESCRIPTION: Configuration code for using the tailwindcss-react-aria-components plugin with Tailwind CSS v4, showing how to import the plugin in CSS.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";

----------------------------------------

TITLE: Link with External URL in React Spectrum
DESCRIPTION: Shows how to create a link to an external website with the target set to open in a new tab.

LANGUAGE: tsx
CODE:
<Link href="https://adobe.com" target="_blank">Adobe.com</Link>

----------------------------------------

TITLE: Reusable SearchField Component Wrapper Implementation
DESCRIPTION: Creating a reusable SearchField wrapper component that encapsulates the SearchField, Label, Input, Button, description text, and error handling. This pattern ensures consistency across multiple instances of SearchField in an application.

LANGUAGE: tsx
CODE:
import type {SearchFieldProps, ValidationResult} from 'react-aria-components';
import {Text, FieldError} from 'react-aria-components';

interface MySearchFieldProps extends SearchFieldProps {
  label?: string,
  description?: string,
  errorMessage?: string | ((validation: ValidationResult) => string),
  placeholder?: string
}

export function MySearchField({label, description, errorMessage, placeholder, ...props}: MySearchFieldProps) {
  return (
    <SearchField {...props}>
      {label && <Label>{label}</Label>}
      <Input placeholder={placeholder} />
      <Button>✕</Button>
      {description && <Text slot="description">{description}</Text>}
      <FieldError>{errorMessage}</FieldError>
    </SearchField>
  );
}

<MySearchField label="Search" />

----------------------------------------

TITLE: Custom Sized ColorSlider Components
DESCRIPTION: Shows how to create ColorSlider components with custom dimensions using width and height properties.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-300">
  <ColorSlider defaultValue="#7f0000" channel="red" orientation="vertical" height="size-3600" />
  <ColorSlider defaultValue="#7f0000" channel="red" width="size-3600" maxWidth="100%" />
</Flex>

----------------------------------------

TITLE: Custom Drop Indicator Styling
DESCRIPTION: CSS styles for a custom drop indicator. The styles add a pink outline when the indicator is active and include a fallback for browsers that don't support the :has selector.

LANGUAGE: css
CODE:
.my-drop-indicator {
  &.active {
    outline: 1px solid #e70073;
  }

  @supports not selector(:has(.foo)) {
    /* Undo gap in browsers that don't support :has */
    margin-bottom: -2px;
  }
}

----------------------------------------

TITLE: DropZone with Accessible Labeling
DESCRIPTION: Example showing how to properly label a DropZone for accessibility using the Text component with a label slot. The label dynamically updates to provide feedback when items are dropped.

LANGUAGE: tsx
CODE:
import {Text} from 'react-aria-components';

function Example() {
  let [dropped, setDropped] = React.useState(false);

  return (
    <DropZone
      onDrop={() => setDropped(true)}>
      <Text slot="label">
        {dropped ? 'Successful drop!' : 'Drop files here'}
      </Text>
    </DropZone>
  );
}

----------------------------------------

TITLE: Styling ColorThumb Based on Component States
DESCRIPTION: Demonstrates targeting the ColorThumb component's states using CSS data attributes for different visual presentations.

LANGUAGE: css
CODE:
.react-aria-ColorThumb[data-dragging] {
  /* ... */
}

.react-aria-ColorThumb[data-focused] {
  /* ... */
}

----------------------------------------

TITLE: Implementing Dismissable Modal Dialog in React
DESCRIPTION: Example showing how to create a dismissable modal dialog that closes when users click outside of it by using the isDismissable prop.

LANGUAGE: tsx
CODE:
<ModalTrigger isDismissable label="Open Dialog">
  {() =>
    <Dialog title="Notice">
      Click outside to close this dialog.
    </Dialog>
  }
</ModalTrigger>

----------------------------------------

TITLE: Implementing Highlight Selection Style in React Spectrum ListView
DESCRIPTION: This example shows how to use the highlight selection style which hides checkboxes and displays selected rows with a highlighted background. This also changes the selection behavior to use arrow keys for both focus and selection.

LANGUAGE: tsx
CODE:
// Using the same list as above
<PokemonList selectionStyle="highlight" aria-label="Highlight selection ListView" />

----------------------------------------

TITLE: Importing TagGroup Component and Related Dependencies in JSX
DESCRIPTION: Demonstrates how to import the TagGroup component along with supporting components and icons from React Spectrum packages.

LANGUAGE: jsx
CODE:
import {Item, TagGroup} from '@react-spectrum/tag';
import News from '@spectrum-icons/workflow/News';
import Airplane from '@spectrum-icons/workflow/Airplane';
import Game from '@spectrum-icons/workflow/Game';
import ShoppingCart from '@spectrum-icons/workflow/ShoppingCart';
import {Text} from '@react-spectrum/text';
import {Avatar} from '@react-spectrum/avatar';
import {View} from '@react-spectrum/view';

----------------------------------------

TITLE: Keyboard Interaction Example with Space Key in Menus
DESCRIPTION: Details the optional behaviors when the Space key is pressed in different menu contexts, including handling checkboxes, radio items, and menu items with submenus.

LANGUAGE: markdown
CODE:
- <kbd>Space</kbd>:

  - (Optional): When focus is on a `menuitemcheckbox`, changes the state without closing the menu.
  - (Optional): When focus is on a `menuitemradio` that is not checked, without closing the menu, checks the focused `menuitemradio` and unchecks any other checked `menuitemradio` element in the same group.
  - (Optional): When focus is on a `menuitem` that has a submenu, opens the submenu and places focus on its first item.
  - (Optional): When focus is on a `menuitem` that does not have a submenu, activates the `menuitem` and closes the menu.

----------------------------------------

TITLE: Handling Custom Text Format Drops in GridList
DESCRIPTION: Implementation of a droppable GridList that accepts items with a custom app-specific format. The example filters accepted drag types and processes items to render them with custom styling.

LANGUAGE: tsx
CODE:
import {isTextDropItem} from 'react-aria-components';

interface TextItem {
  id: string,
  name: string,
  style: string
}

function DroppableGridList() {
  let [items, setItems] = React.useState<TextItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    acceptedDragTypes: ['custom-app-type'],
    async onRootDrop(e) {
      let items = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('custom-app-type')))
      );
      setItems(items);
    }
  });

  return (
    <MyGridList aria-label="Droppable list" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => "Drop items here"}>
      {item => <MyItem textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</MyItem>}
    </MyGridList>
  );
}

<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
  {/* see above */}
  <DraggableGridList />
  <DroppableGridList />
</div>

----------------------------------------

TITLE: Specifying Supported Locales in package.json
DESCRIPTION: This snippet demonstrates how to specify the supported locales in the package.json file. By adding a "locales" field with an array of locale codes, you tell the plugin which translations to include in the bundle.

LANGUAGE: json
CODE:
{
  "locales": ["en-US", "fr-FR"]
}

----------------------------------------

TITLE: Implementing a MenuSection with Header in React Spectrum
DESCRIPTION: Demonstrates how to use the MenuSection component with a Header that includes both a Heading and descriptive Text. This pattern replaces the previous Section component with title prop in v3.

LANGUAGE: jsx
CODE:
<MenuSection>
  <Header>
    <Heading>Publish and export</Heading>
    <Text slot="description">Social media, other formats</Text>
  </Header>
  <MenuItem>Item</MenuItem>
</MenuSection>

----------------------------------------

TITLE: Converting Between Calendar Systems in TypeScript
DESCRIPTION: Demonstrates how to convert a ZonedDateTime from the Gregorian calendar system to the Hebrew calendar system using the toCalendar function.

LANGUAGE: tsx
CODE:
import {toCalendar, HebrewCalendar} from '@internationalized/date';

let gregorianDate = new ZonedDateTime(
  2020, 9, 19,
  'America/Los_Angeles', -28800000,
  10, 30
);

let hebrewDate = toCalendar(gregorianDate, new HebrewCalendar());

----------------------------------------

TITLE: RadioGroup with Event Handling
DESCRIPTION: Demonstrates how to handle selection changes in a RadioGroup using the onChange event handler and React state.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState(null);

  return (
    <>
      <RadioGroup label="Favorite avatar" value={selected} onChange={setSelected}>
        <Radio value="wizard">Wizard</Radio>
        <Radio value="dragon">Dragon</Radio>
      </RadioGroup>
      <div>You have selected: {selected}</div>
    </>
  );
}

----------------------------------------

TITLE: Basic ListView with Static Items
DESCRIPTION: A simple example of ListView with statically defined items. This demonstrates the basic implementation with multiple selection mode.

LANGUAGE: tsx
CODE:
<ListView selectionMode="multiple" aria-label="Static ListView items example" maxWidth="size-6000">
  <Item>Adobe Photoshop</Item>
  <Item>Adobe InDesign</Item>
  <Item>Adobe AfterEffects</Item>
  <Item>Adobe Illustrator</Item>
  <Item>Adobe Lightroom</Item>
</ListView>

----------------------------------------

TITLE: Implementing a Decorative Image in React Spectrum
DESCRIPTION: Demonstrates how to implement a decorative image that should be ignored by screen readers by setting an empty alt attribute, wrapped in a Flex container with fixed width.

LANGUAGE: tsx
CODE:
<Flex width="200px">
  <Image src="https://i.imgur.com/c3gTKSJ.jpg" alt="" />
</Flex>

----------------------------------------

TITLE: Styling Invalid DateRangePicker States with CSS
DESCRIPTION: CSS for styling the DateRangePicker when in an invalid state, including adding an error icon and styling the FieldError component.

LANGUAGE: css
CODE:
.react-aria-DateRangePicker {
  &[data-invalid] {
    [slot=end]:after {
      content: '🚫' / '';
      content: '🚫';
      alt: ' ';
      flex: 1;
      text-align: end;
      margin-left: 1.5rem;
      margin-right: -1.5rem;
    }
  }

  .react-aria-FieldError {
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: CSS for Custom Icon Separators in Breadcrumbs
DESCRIPTION: CSS styles for aligning custom SVG icon separators in breadcrumbs navigation.

LANGUAGE: css
CODE:
.my-item svg {
  vertical-align: middle;
  padding: 0 5px;
  margin-top: -2px;
}

----------------------------------------

TITLE: Importing InlineAlert Component in React Spectrum
DESCRIPTION: Shows how to import the InlineAlert component along with supporting components like Content and Heading from React Spectrum libraries.

LANGUAGE: jsx
CODE:
import {InlineAlert} from '@react-spectrum/inlinealert';
import {Content} from '@adobe/react-spectrum';
import {Heading} from '@react-spectrum/text';

----------------------------------------

TITLE: Controlled TextField with State Management
DESCRIPTION: Example of a controlled TextField component where the value is managed by React state and updated through the onChange event handler.

LANGUAGE: tsx
CODE:
function Example() {
  let [text, setText] = React.useState('');

  return (
    <>
      <MyTextField label="Your text" onChange={setText} />
      <p>Mirrored text: {text}</p>
    </>
  );
}

----------------------------------------

TITLE: Mobile-Specific DialogTrigger Type in React Spectrum
DESCRIPTION: Shows how to specify a different dialog type for mobile devices using the mobileType prop, rendering as a popover on desktop but switching to a tray on mobile.

LANGUAGE: tsx
CODE:
<DialogTrigger type="popover" mobileType="tray">
  <ActionButton>Info</ActionButton>
  <Dialog>
    <Heading>Version Info</Heading>
    <Divider />
    <Content>
      <Text>
        Version 1.0.0, Copyright 2020
      </Text>
    </Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Rendering DragIntoTableFolder Component in React Spectrum
DESCRIPTION: This code renders the DragIntoTableFolder component which demonstrates folder drop functionality in action between two TableView components.

LANGUAGE: tsx
CODE:
<DragIntoTableFolder />

----------------------------------------

TITLE: Form Basic Structure with Submit and Reset Buttons
DESCRIPTION: Example showing the basic anatomy of a Form component with submit and reset buttons.

LANGUAGE: tsx
CODE:
import {Form, Button} from 'react-aria-components';

<Form>
  {/* ... */}
  <Button type="submit" />
  <Button type="reset" />
</Form>

----------------------------------------

TITLE: Read-only Switch Component
DESCRIPTION: Shows how to create a read-only Switch component that displays a state but cannot be changed by the user.

LANGUAGE: tsx
CODE:
<Switch isReadOnly isSelected>Switch Label</Switch>

----------------------------------------

TITLE: Implementing a Filterable List Using useFilter with React
DESCRIPTION: This example demonstrates how to implement a filterable list of composers using the useFilter hook with a 'contains' matching strategy that ignores both case and diacritics. It shows how to use the hook to filter an array of strings based on user input.

LANGUAGE: tsx
CODE:
import {useFilter} from '@react-aria/i18n';

function Example() {
  const composers = [
    'Wolfgang Amadeus Mozart',
    'Johann Sebastian Bach',
    'Ludwig van Beethoven',
    'Claude Debussy',
    'George Frideric Handel',
    'Frédéric Chopin',
    'Johannes Brahms',
    'Pyotr Ilyich Tchaikovsky',
    'Antonín Dvořák',
    'Felix Mendelssohn',
    'Béla Bartók',
    'Niccolò Paganini'
  ];

  let {contains} = useFilter({
    sensitivity: 'base'
  });

  let [value, setValue] = React.useState('');
  let matchedComposers = composers.filter(composer => contains(composer, value));

  return (
    <>
      <label htmlFor="search-input">Filter: </label>
      <input type="search" id="search-input" value={value} onChange={e => setValue(e.target.value)} />
      <ul style={{height: 300}}>
        {matchedComposers.map((composer, i) =>
          <li key={i}>{composer}</li>)
        }
      </ul>
    </>
  );
}

----------------------------------------

TITLE: Setting Minimum Value in DateField Component
DESCRIPTION: Example demonstrating how to set a minimum date value constraint on a DateField component to only accept dates after today.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<Form>
  <MyDateField
    label="Appointment date"
    minValue={today(getLocalTimeZone())}
    defaultValue={parseDate('2022-02-03')} />
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Using Start Date Functions with ZonedDateTime in TypeScript
DESCRIPTION: Demonstrates how to use startOfYear, startOfMonth, and startOfWeek functions to find the beginning of various time units. The startOfWeek function is locale-aware, showing different results for US and French locales.

LANGUAGE: tsx
CODE:
import {startOfYear, startOfMonth, startOfWeek} from '@internationalized/date';

let date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');

startOfYear(date); // 2022-01-01T09:45[America/Los_Angeles]
startOfMonth(date); // 2022-02-01T09:45[America/Los_Angeles]
startOfWeek(date, 'en-US'); // 2022-01-30T09:45[America/Los_Angeles]
startOfWeek(date, 'fr-FR'); // 2022-01-31T09:45[America/Los_Angeles]

----------------------------------------

TITLE: Popover DialogTrigger Example in React Spectrum
DESCRIPTION: Demonstrates a popover dialog without an underlay, showing version information when an Info button is clicked. Popovers automatically render as modals on mobile devices.

LANGUAGE: tsx
CODE:
<DialogTrigger type="popover">
  <ActionButton>Info</ActionButton>
  <Dialog>
    <Heading>Version Info</Heading>
    <Divider />
    <Content>
      <Text>
        Version 1.0.0, Copyright 2020
      </Text>
    </Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Creating a Custom Heading Component Compatible with React Aria
DESCRIPTION: Demonstrates how to adapt an existing heading component to work with React Aria Components by using the useContextProps hook to merge local and context-provided props.

LANGUAGE: tsx
CODE:
import type {HeadingProps} from 'react-aria-components';
import {HeadingContext, useContextProps} from 'react-aria-components';

const MyCustomHeading = React.forwardRef((props: HeadingProps, ref: React.ForwardedRef<HTMLHeadingElement>) => {
  // Merge the local props and ref with the ones provided via context.
  ///- begin highlight -///
  [props, ref] = useContextProps(props, ref, HeadingContext);
  ///- end highlight -///

  // ... your existing Heading component
  return <h2 {...props} ref={ref} />;
});

----------------------------------------

TITLE: TextField with Default Value
DESCRIPTION: Example showing how to initialize a TextField with a default value using the defaultValue prop.

LANGUAGE: tsx
CODE:
<MyTextField
  label="Email"
  defaultValue="me@email.com" />

----------------------------------------

TITLE: Basic SearchAutocomplete Example
DESCRIPTION: A simple implementation of the SearchAutocomplete component with static items showing animals as options.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Search with Autocomplete">
  <Item>Aardvark</Item>
  <Item>Kangaroo</Item>
  <Item>Snake</Item>
</SearchAutocomplete>

----------------------------------------

TITLE: Creating ZonedDateTime from Date Object or Epoch Time in TypeScript
DESCRIPTION: Shows how to create ZonedDateTime objects from JavaScript Date objects or Unix epoch timestamps using the fromDate and fromAbsolute functions.

LANGUAGE: tsx
CODE:
import {fromDate, fromAbsolute} from '@internationalized/date';

let date = fromDate(new Date(), 'America/Los_Angeles');
let date = fromAbsolute(1688023843144, 'America/Los_Angeles');

----------------------------------------

TITLE: Displaying Format Help Text in React Spectrum DatePicker
DESCRIPTION: Example showing how to enable automatic display of date format help text using the showFormatHelpText prop, which shows the expected date format for the user's locale.

LANGUAGE: tsx
CODE:
<DatePicker label="Birth date" showFormatHelpText />

----------------------------------------

TITLE: Meter Visual Variants
DESCRIPTION: Demonstrates the different visual variants of the Meter component, including informative, positive, critical, and warning styles.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-300">
  <Meter label="Space used" value={25} variant="informative" />
  <Meter label="Space used" value={25} variant="positive" />
  <Meter label="Space used" value={90} variant="critical" />
  <Meter label="Space used" value={70} variant="warning" />
</Flex>

----------------------------------------

TITLE: Using ListBox Test Utils in React Testing Library
DESCRIPTION: Example showing how to use the ListBox test utilities from @react-spectrum/test-utils for testing ListBox interactions in test suites. This demonstrates keyboard selection testing with the User and ListBoxTester classes.

LANGUAGE: ts
CODE:
// ListBox.test.ts
import {render} from '@testing-library/react';
import {theme} from '@react-spectrum/theme-default';
import {User} from '@react-spectrum/test-utils';

let testUtilUser = new User({interactionType: 'mouse'});
// ...

it('ListBox can select an option via keyboard', async function () {
  // Render your test component/app and initialize the listbox tester
  let {getByTestId} = render(
    <Provider theme={defaultTheme}>
      <ListBox selectionMode="single" data-testid="test-listbox">
        ...
      </ListBox>
    </Provider>
  );
  let listboxTester = testUtilUser.createTester('ListBox', {root: getByTestId('test-listbox'), interactionType: 'keyboard'});

  await listboxTester.toggleOptionSelection({option: 4});
  expect(listboxTester.options()[4]).toHaveAttribute('aria-selected', 'true');
});

----------------------------------------

TITLE: Creating Link Items in React Spectrum ListView
DESCRIPTION: This example shows how to create items in a ListView that function as links to external pages. Each Item component receives an href prop and target attribute to define the link destination and behavior.

LANGUAGE: tsx
CODE:
<ListView aria-label="Links" selectionMode="multiple">
  <Item href="https://adobe.com/" target="_blank">Adobe</Item>
  <Item href="https://apple.com/" target="_blank">Apple</Item>
  <Item href="https://google.com/" target="_blank">Google</Item>
  <Item href="https://microsoft.com/" target="_blank">Microsoft</Item>
</ListView>

----------------------------------------

TITLE: Creating Disabled Tabs in React Spectrum
DESCRIPTION: Example showing how to disable individual tabs using the disabledKeys prop and all tabs using the isDisabled prop. This prevents user interaction with the disabled items.

LANGUAGE: tsx
CODE:
<Flex direction="column" rowGap="size-150">
  <Tabs aria-label="Chat log single tab disabled example" disabledKeys={['item2']}>
    <TabList>
      <Item key="item1">
        John Doe
      </Item>
      <Item key="item2">
        Jane Doe
      </Item>
      <Item key="item3">
        Joe Bloggs
      </Item>
    </TabList>
    <TabPanels>
      <Item key="item1">
        There is no prior chat history with John Doe.
      </Item>
      <Item key="item2">
        There is no prior chat history with Jane Doe.
      </Item>
      <Item key="item3">
        There is no prior chat history with Joe Bloggs.
      </Item>
    </TabPanels>
  </Tabs>
  <Tabs aria-label="Chat log all tabs disabled example" isDisabled>
    <TabList>
      <Item key="item1">
        John Doe
      </Item>
      <Item key="item2">
        Jane Doe
      </Item>
      <Item key="item3">
        Joe Bloggs
      </Item>
    </TabList>
    <TabPanels>
      <Item key="item1">
        There is no prior chat history with John Doe.
      </Item>
      <Item key="item2">
        There is no prior chat history with Jane Doe.
      </Item>
      <Item key="item3">
        There is no prior chat history with Joe Bloggs.
      </Item>
    </TabPanels>
  </Tabs>
</Flex>

----------------------------------------

TITLE: Menu with Single Selection Mode
DESCRIPTION: Shows how to implement a controlled Menu with single selection mode. The selected item is tracked in state and displayed below the menu, demonstrating the controlled selection pattern.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set(['middle']));

  return (
    <>
      <MenuTrigger>
        <ActionButton>
          Align
        </ActionButton>
        <Menu selectionMode="single" selectedKeys={selected} onSelectionChange={setSelected}>
          <Item key="left">Left</Item>
          <Item key="middle">Middle</Item>
          <Item key="right">Right</Item>
        </Menu>
      </MenuTrigger>
      <p>Current selection (controlled): {[...selected]}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing SSRProvider in a React Application
DESCRIPTION: Example showing how to wrap a React application with SSRProvider to ensure consistent ID generation during server side rendering. This is required for React 16 and 17 applications but can be removed when using React 18+.

LANGUAGE: tsx
CODE:
import {SSRProvider} from '@react-aria/ssr';

<SSRProvider>
  <YourApp />
</SSRProvider>

----------------------------------------

TITLE: Accessible Labeled Toggle Button Group Example
DESCRIPTION: Example showing how to make a ToggleButtonGroup accessible by adding an aria-label to describe its purpose for screen readers.

LANGUAGE: tsx
CODE:
<ToggleButtonGroup aria-label="Text style">
  <ToggleButton id="bold">Bold</ToggleButton>
  <ToggleButton id="italic">Italic</ToggleButton>
  <ToggleButton id="underline">Underline</ToggleButton>
</ToggleButtonGroup>

----------------------------------------

TITLE: Breadcrumbs with Root Context and Overflow in React Spectrum
DESCRIPTION: Example showing Breadcrumbs with the root item always visible and overflow handling for additional items using both showRoot prop and multiple items.

LANGUAGE: tsx
CODE:
<Breadcrumbs showRoot>
  <Item key="shared">My Shared Documents</Item>
  <Item key="catalogue">North America Spring Catalogue</Item>
  <Item key="march 2020">March 2020</Item>
  <Item key="assets">Downloaded Screenshots and Assets (approval required)</Item>
</Breadcrumbs>

----------------------------------------

TITLE: Handling Calendar Events with Formatted Date Display
DESCRIPTION: Shows how to use onChange event with a Calendar component to update and display the selected date in a localized format.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@react-aria/i18n';

function Example() {
  let [date, setDate] = React.useState(parseDate('2022-07-04'));
  let formatter = useDateFormatter({dateStyle: 'full'});

  return (
    <>
      <Calendar aria-label="Event date" value={date} onChange={setDate} />
      <p>Selected date: {formatter.format(date.toDate(getLocalTimeZone()))}</p>
    </>
  );
}

----------------------------------------

TITLE: CSS Styling for Disabled Checkbox State
DESCRIPTION: CSS styling for the disabled state of a checkbox, including specific text and border colors to visually indicate that the checkbox cannot be interacted with.

LANGUAGE: css
CODE:
.react-aria-Checkbox {
  &[data-disabled] {
    color: var(--text-color-disabled);

    .checkbox {
      border-color: var(--border-color-disabled);
    }
  }
}

----------------------------------------

TITLE: Creating a Disabled NumberField in React Spectrum
DESCRIPTION: This example shows how to create a disabled NumberField using the isDisabled prop. A disabled NumberField prevents user interaction and appears visually muted.

LANGUAGE: tsx
CODE:
<NumberField label="Cookies" isDisabled minValue={0} />

----------------------------------------

TITLE: Styling FieldGroup Component with CSS
DESCRIPTION: CSS styling for the FieldGroup component that wraps multiple ComboBox components.

LANGUAGE: css
CODE:
fieldset {
  padding: 1.5em;
  width: fit-content;
}

----------------------------------------

TITLE: Implementing Custom Trigger Component with React forwardRef
DESCRIPTION: Shows how to create a custom trigger component that properly forwards refs and props for use with TooltipTrigger.

LANGUAGE: tsx
CODE:
const CustomTrigger = React.forwardRef((props, ref) => (
  <button {...props} ref={ref} />
));

----------------------------------------

TITLE: Breadcrumbs Basic Structure Definition
DESCRIPTION: Code showing the basic structure and component imports required to create breadcrumbs navigation.

LANGUAGE: tsx
CODE:
import {Breadcrumbs, Breadcrumb, Link} from 'react-aria-components';

<Breadcrumbs>
  <Breadcrumb><Link /></Breadcrumb>
</Breadcrumbs>

----------------------------------------

TITLE: Quiet Compact ActionGroup in React Spectrum
DESCRIPTION: Shows a quiet ActionGroup with compact density, which reduces the margins between buttons without merging borders since they're in the quiet style.

LANGUAGE: tsx
CODE:
<ActionGroup isQuiet density="compact">
  <Item key="brush" aria-label="Brush"><Brush /></Item>
  <Item key="select" aria-label="Select"><Select /></Item>
  <Item key="regionSelect" aria-label="Select Region"><RegionSelect /></Item>
</ActionGroup>

----------------------------------------

TITLE: Implementing Empty State in React Spectrum TableView
DESCRIPTION: Shows how to customize the empty state display of a TableView when no rows are available using the renderEmptyState prop to provide a custom UI component.

LANGUAGE: tsx
CODE:
import {Content} from '@react-spectrum/view';
import {IllustratedMessage} from '@react-spectrum/illustratedmessage';
import NotFound from '@spectrum-icons/illustrations/NotFound';
import {Heading} from '@react-spectrum/text';

function renderEmptyState() {
  return (
    <IllustratedMessage>
      <NotFound />
      <Heading>No results</Heading>
      <Content>No results found</Content>
    </IllustratedMessage>
  );
}

<TableView aria-label="Example table for empty state" height="size-3000" renderEmptyState={renderEmptyState}>
  <TableHeader>
    <Column>Name</Column>
    <Column>Type</Column>
    <Column>Size</Column>
  </TableHeader>
  <TableBody>
    {[]}
  </TableBody>
</TableView>

----------------------------------------

TITLE: Handling File Drops in React Spectrum ListBox
DESCRIPTION: This example demonstrates accepting and displaying image files dropped onto a ListBox. It uses acceptedDragTypes to filter for specific image types, retrieves File objects using getFile(), creates object URLs, and adds the images to the list with proper positioning.

LANGUAGE: tsx
CODE:
function Example() {
  let list = useListData({});
  let getItems = e => {
    return Promise.all(
      e.items.map(async item => ({
        id: Math.random(),
        url: URL.createObjectURL(await item.getFile()),
        name: item.name
      }))
    );
  };

  let onRootDrop = async e => {
    list.prepend(...await getItems(e));
  };

  let onInsert = async e => {
    if (e.target.dropPosition === 'before') {
      list.insertBefore(e.target.key, ...await getItems(e));
    } else if (e.target.dropPosition === 'after') {
      list.insertAfter(e.target.key, ...await getItems(e));
    }
  };

  return (
    <ListBox
      aria-label="Images"
      items={list.items}
      acceptedDragTypes={['image/jpeg', 'image/png']}
      onRootDrop={onRootDrop}
      onInsert={onInsert}>
      {item => (
        <Item textValue={item.name}>
          <div className="image-item">
            <img src={item.url} />
            <span>{item.name}</span>
          </div>
        </Item>
      )}
    </ListBox>
  );
}

----------------------------------------

TITLE: ContextualHelp with Footer Link in React Spectrum
DESCRIPTION: Example of a ContextualHelp component with the 'help' variant that includes a footer with a link for additional resources.

LANGUAGE: tsx
CODE:
<ContextualHelp variant="help">
  <Heading>What is a segment?</Heading>
  <Content><Text>Segments identify who your visitors are, what devices and services they use, where they navigated from, and much more.</Text></Content>
  <Footer><Link>Learn more about segments</Link></Footer>
</ContextualHelp>

----------------------------------------

TITLE: Meter Component with Different Label Positions
DESCRIPTION: Demonstrates different label positioning options for the Meter component, including default position, side position, and hidden value label.

LANGUAGE: tsx
CODE:
<Flex direction="column" maxWidth="size-3000" gap="size-300">
  <Meter label="Label" value={25} variant="warning" />
  <Meter label="Label" labelPosition="side" value={25} variant="warning" />
  <Meter label="Label" showValueLabel={false} value={25} variant="warning" />
</Flex>

----------------------------------------

TITLE: SearchField with Event Handlers
DESCRIPTION: Example demonstrating the use of event handlers (onChange, onSubmit, onClear) with a SearchField component. Shows how to track both the current input and submitted values.

LANGUAGE: TypeScript
CODE:
function Example() {
  let [currentText, setCurrentText] = React.useState('');
  let [submittedText, setSubmittedText] = React.useState('');

  return (
    <div>
      <SearchField
        onClear={() => setCurrentText('')}
        onChange={setCurrentText}
        onSubmit={setSubmittedText}
        label="Your text"
        value={currentText}
      />
      <p>Mirrored text: {currentText}</p>
      <p>Submitted text: {submittedText}</p>
    </div>
  );
}

----------------------------------------

TITLE: ListBox Component Anatomy with Sections and Text Elements
DESCRIPTION: Demonstrates the structure of a ListBox with sections, headers, and text elements for labels and descriptions, showing the component hierarchy.

LANGUAGE: tsx
CODE:
import {ListBox, ListBoxItem, ListBoxSection, Header, Text} from 'react-aria-components';

<ListBox>
  <ListBoxItem>
    <Text slot="label" />
    <Text slot="description" />
  </ListBoxItem>
  <ListBoxSection>
    <Header />
    <ListBoxItem />
  </ListBoxSection>
</ListBox>

----------------------------------------

TITLE: CSS for Reusable ListBox Components
DESCRIPTION: CSS styling for the custom reusable ListBox components, providing styling for the container, items, selection, and focus states with support for forced colors.

LANGUAGE: css
CODE:
.my-listbox {
  max-height: inherit;
  overflow: auto;
  padding: 4px;
  gap: 4px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: var(--overlay-background);
  outline: none;
  max-width: 250px;
  max-height: 300px;
  box-sizing: border-box;
}

.my-item {
  --highlight: #e70073;

  padding: 0.286rem 0.571rem;
  border-radius: 6px;
  outline: none;
  cursor: default;
  color: var(--text-color);
  font-size: 1.072rem;

  &.selected {
    background: var(--highlight);
    color: var(--highlight-foreground);
  }

  &.focused {
    outline: 2px solid var(--highlight);
    outline-offset: 2px;
  }
}

@media (forced-colors: active) {
  .my-item {
    forced-color-adjust: none;
    --highlight: Highlight;
  }
}

----------------------------------------

TITLE: Displaying Error Messages in TagGroup Component
DESCRIPTION: Example showing how to display validation error messages in a TagGroup using the errorMessage prop. This helps users understand and fix input issues.

LANGUAGE: tsx
CODE:
<TagGroup label="Categories" errorMessage="Invalid set of categories.">
  <Item key="news">News</Item>
  <Item key="travel">Travel</Item>
  <Item key="gaming">Gaming</Item>
  <Item key="shopping">Shopping</Item>
</TagGroup>

----------------------------------------

TITLE: Using a Custom Heading Component in Calendar
DESCRIPTION: Example showing how to use a custom heading component within a Calendar, replacing the default React Aria Components Heading.

LANGUAGE: tsx
CODE:
<Calendar>
  {/*- begin highlight -*/}
  <MyCustomHeading />
  {/*- end highlight -*/}
  {/* ... */}
</Calendar>

----------------------------------------

TITLE: AlertDialog with Destructive Variant
DESCRIPTION: Demonstrates the destructive variant of AlertDialog, which is used for actions that will delete or permanently alter data, featuring a more prominent warning style.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Delete</ActionButton>
  <AlertDialog
    variant="destructive"
    title="Delete file"
    primaryActionLabel="Delete"
    cancelLabel="Cancel">
    This will permanently delete the selected file. Continue?
  </AlertDialog>
</DialogTrigger>

----------------------------------------

TITLE: Implementing Server Validation with React Spectrum Form Component
DESCRIPTION: This example shows how to handle server-side validation errors by setting the validationErrors prop on the Form component. It submits form data to a server and displays returned validation errors.

LANGUAGE: tsx
CODE:
function Example() {
  let [errors, setErrors] = React.useState({});
  let onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    let data = Object.fromEntries(new FormData(e.currentTarget));
    let result = await callServer(data)
    setErrors(result.errors);
  };

  return (
    <Form validationErrors={errors} onSubmit={onSubmit}>
      <TextField name="username" isRequired>
        <Label>Username</Label>
        <Input />
        <FieldError />
      </TextField>
      <TextField name="password" type="password" isRequired>
        <Label>Password</Label>
        <Input />
        <FieldError />
      </TextField>
      <Button type="submit">Submit</Button>
    </Form>
  );
}

// Fake server used in this example.
function callServer(data) {
  return {
    errors: {
      username: 'Sorry, this username is taken.'
    }
  };
}

----------------------------------------

TITLE: Handling Checkbox State Changes in React Spectrum
DESCRIPTION: Demonstrates how to handle checkbox state changes using the onChange event handler, displaying the current selection state to the user.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelection] = React.useState(false);

  return (
    <Flex direction="column">
      <Checkbox isSelected={selected} onChange={setSelection}>
        Subscribe
      </Checkbox>
      <View>{`You are ${selected ? 'subscribed' : 'unsubscribed'}`}</View>
    </Flex>
  );
 }

----------------------------------------

TITLE: FileTrigger with Multiple File Selection
DESCRIPTION: Demonstrates how to enable multiple file selection by using the allowsMultiple prop.

LANGUAGE: tsx
CODE:
<FileTrigger allowsMultiple>
  <Button variant="primary">Upload your files</Button>
</FileTrigger>

----------------------------------------

TITLE: Manually Nesting Multiple Context Providers
DESCRIPTION: Equivalent implementation of nested context providers without using the Provider utility, showing the verbosity that the Provider component helps to avoid.

LANGUAGE: tsx
CODE:
<ButtonContext.Provider value={{/* ... */}}>
  <InputContext.Provider value={{/* ... */}}>
    {/* ... */}
  </InputContext.Provider>
</ButtonContext.Provider>

----------------------------------------

TITLE: Setting Custom Width for NumberField in React Spectrum
DESCRIPTION: This example demonstrates how to set a custom width for the NumberField component using the width and maxWidth props. This allows for more precise control over the component's dimensions in the layout.

LANGUAGE: tsx
CODE:
<NumberField label="Cookies" width="size-3600" maxWidth="100%" minValue={0} />

----------------------------------------

TITLE: Implementing Quiet Styling for Tabs in React Spectrum
DESCRIPTION: Example demonstrating the quiet styling variant of Tabs using the isQuiet prop. This creates a more subtle, less visually dominant tab interface.

LANGUAGE: tsx
CODE:
<Tabs aria-label="Chat log quiet example" isQuiet>
  <TabList>
    <Item key="item1">
      John Doe
    </Item>
    <Item key="item2">
      Jane Doe
    </Item>
    <Item key="item3">
      Joe Bloggs
    </Item>
  </TabList>
  <TabPanels>
    <Item key="item1">
      There is no prior chat history with John Doe.
    </Item>
    <Item key="item2">
      There is no prior chat history with Jane Doe.
    </Item>
    <Item key="item3">
      There is no prior chat history with Joe Bloggs.
    </Item>
  </TabPanels>
</Tabs>

----------------------------------------

TITLE: Event Handling with RangeCalendar and Date Formatting
DESCRIPTION: Shows how to handle onChange events from RangeCalendar and format the selected date range using useDateFormatter for display in the user's locale.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@adobe/react-spectrum';

function Example() {
  let [range, setRange] = React.useState({
    start: parseDate('2020-07-03'),
    end: parseDate('2020-07-10')
  });
  let formatter = useDateFormatter({dateStyle: 'long'});

  return (
    <>
      <RangeCalendar aria-label="Date range" value={range} onChange={setRange} />
      <p>
        Selected date:{' '}
        {formatter.formatRange(
          range.start.toDate(getLocalTimeZone()),
          range.end.toDate(getLocalTimeZone())
        )}
      </p>
    </>
  );
}

----------------------------------------

TITLE: Disabling Tooltip While Keeping Trigger Functional
DESCRIPTION: Example showing how to disable a tooltip while maintaining the functionality of its trigger button using the isDisabled prop.

LANGUAGE: tsx
CODE:
<TooltipTrigger isDisabled>
  <ActionButton aria-label="Danger Will Robinson" onPress={() => alert('pressed trigger')}><Delete /></ActionButton>
  <Tooltip variant="negative" showIcon>Dangerous action.</Tooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Checkbox Group with Default Values in React
DESCRIPTION: Demonstrates setting an initial uncontrolled value for a checkbox group using the defaultValue prop, which accepts an array of selected item values.

LANGUAGE: tsx
CODE:
<CheckboxGroup label="Favorite sports (uncontrolled)" defaultValue={['soccer', 'baseball']}>
  <Checkbox value="soccer">Soccer</Checkbox>
  <Checkbox value="baseball">Baseball</Checkbox>
  <Checkbox value="basketball">Basketball</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Creating a Custom Router with React Aria Contexts
DESCRIPTION: Implementation of a Router component that uses TabsContext and LinkContext to create a custom navigation system between tabs and links.

LANGUAGE: tsx
CODE:
import type {PressEvent} from 'react-aria-components';
import {TabsContext, LinkContext} from 'react-aria-components';

function Router({children}) {
  let [selectedKey, onSelectionChange] = React.useState(null);
  let onPress = (e: PressEvent) => {
    onSelectionChange(e.target.getAttribute('data-href'));
  };

  return (
    /*- begin highlight -*/
    <TabsContext.Provider value={{selectedKey, onSelectionChange}}>
    {/*- end highlight -*/}
      <LinkContext.Provider value={{onPress}}>
        {children}
      </LinkContext.Provider>
    </TabsContext.Provider>
  );
}

----------------------------------------

TITLE: CSS Styling for Toggle Button Group Components
DESCRIPTION: CSS styling for the ToggleButtonGroup and ToggleButton components, handling different states like pressed, selected, disabled, and vertical orientation.

LANGUAGE: css
CODE:
.toggle-group {
  display: flex;
  gap: 4px;

  &[aria-orientation=vertical] {
    flex-direction: column;
    width: fit-content;
  }
}

.toggle-button {
  background: lightgray;
  color: black;
  padding: 10px;
  font-size: 16px;
  user-select: none;
  border: none;

  &[data-pressed=true] {
    background: gray;
  }

  &[data-selected=true] {
    background: green;
    color: white;

    &[data-pressed=true] {
      background: darkgreen;
    }
  }

  &:disabled {
    opacity: 0.5;
  }
}

----------------------------------------

TITLE: Importing the React Spectrum TextField Package
DESCRIPTION: This snippet shows the package name for importing the TextField component from the React Spectrum library in a React application.

LANGUAGE: markdown
CODE:
# @react-spectrum/textfield

----------------------------------------

TITLE: Basic ColorSlider Example
DESCRIPTION: A simple implementation of the ColorSlider component to adjust the red channel of a color with a default value.

LANGUAGE: tsx
CODE:
<ColorSlider defaultValue="#7f0000" channel="red" />

----------------------------------------

TITLE: Integrating TimeField with HTML Forms
DESCRIPTION: Example demonstrating how to use the name prop for integrating TimeField with HTML forms for server submission.

LANGUAGE: tsx
CODE:
<MyTimeField label="Meeting time" name="meetingTime" />

----------------------------------------

TITLE: Using Custom Label Components with ColorSlider in React
DESCRIPTION: This snippet demonstrates how to use a custom label component within a ColorSlider component, replacing the built-in React Aria Components Label.

LANGUAGE: tsx
CODE:
<ColorSlider>
  <MyCustomLabel>Opacity</MyCustomLabel>
  <SliderTrack>
    <ColorThumb />
  </SliderTrack>
</ColorSlider>

----------------------------------------

TITLE: Disabled ColorField
DESCRIPTION: Demonstrates a disabled ColorField with a default value.

LANGUAGE: tsx
CODE:
<ColorField label="Primary Color" isDisabled defaultValue="#e73623" />

----------------------------------------

TITLE: Implementing International Calendar Support
DESCRIPTION: Demonstrates using I18nProvider to display a Calendar component in Hindi using the Indian calendar system while maintaining Gregorian dates in the onChange handler.

LANGUAGE: tsx
CODE:
import {I18nProvider} from '@react-aria/i18n';

function Example() {
  let [date, setDate] = React.useState(null);
  return (
    <I18nProvider locale="hi-IN-u-ca-indian">
      <Calendar aria-label="Date" value={date} onChange={setDate} />
      <p>Selected date: {date?.toString()}</p>
    </I18nProvider>
  );
}

----------------------------------------

TITLE: Picker with Contextual Help in React Spectrum
DESCRIPTION: Example showing how to add a ContextualHelp component next to the Picker label. This provides additional information in a popover that appears when the user interacts with the help icon.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<Picker
  label="Engineering major"
  contextualHelp={
    <ContextualHelp variant="info">
      <Heading>Major changes</Heading>
      <Content>Once you have changed your major, you cannot change it back.</Content>
    </ContextualHelp>
  }>
  <Item>Aerospace</Item>
  <Item>Mechanical</Item>
  <Item>Civil</Item>
  <Item>Nuclear</Item>
  <Item>Industrial</Item>
  <Item>Chemical</Item>
  <Item>Agricultural</Item>
  <Item>Electrical</Item>
</Picker>

----------------------------------------

TITLE: Using Custom Label Component within NumberField
DESCRIPTION: Example of using a custom label component that's compatible with React Aria Components within a NumberField.

LANGUAGE: tsx
CODE:
<NumberField>
  <MyCustomLabel>Value</MyCustomLabel>
  <Group>
    <Button slot="decrement">-</Button>
    <Input />
    <Button slot="increment">+</Button>
  </Group>
</NumberField>

----------------------------------------

TITLE: MenuTrigger with onOpenChange Event Handler
DESCRIPTION: Example showing how to use the onOpenChange event handler with MenuTrigger to track when the menu is opened or closed using React state.

LANGUAGE: tsx
CODE:
function Example() {
  let [isOpen, setIsOpen] = React.useState(false);

  return (
    <Flex gap="size-100" alignItems="center">
      <MenuTrigger onOpenChange={setIsOpen}>
        <ActionButton>
            Edit
        </ActionButton>
        <Menu>
          <Item key="cut">Cut</Item>
          <Item key="copy">Copy</Item>
          <Item key="paste">Paste</Item>
        </Menu>
      </MenuTrigger>
      <div>Currently open: {isOpen.toString()}</div>
    </Flex>
  );
}

----------------------------------------

TITLE: Configuring Tailwind CSS for React Aria Components
DESCRIPTION: Instructions for setting up Tailwind CSS with the required plugins for the ComboBox example, including tailwindcss-react-aria-components and tailwindcss-animate for both Tailwind v4 and v3.

LANGUAGE: CSS
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";
@plugin "tailwindcss-animate";

LANGUAGE: JavaScript
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components'),
    require('tailwindcss-animate')
  ]
};

----------------------------------------

TITLE: Styling React Aria Components with CSS Selectors
DESCRIPTION: Example of targeting React Aria components using their default CSS class names, which follow the 'react-aria-ComponentName' naming convention.

LANGUAGE: css
CODE:
.react-aria-ProgressBar {
  /* ... */
}

----------------------------------------

TITLE: Styling Select Components with CSS Selectors
DESCRIPTION: Example of targeting React Aria Select components using CSS selectors. Components follow the naming convention 'react-aria-ComponentName'.

LANGUAGE: css
CODE:
.react-aria-Select {
  /* ... */
}

----------------------------------------

TITLE: Vertical Orientation ActionGroup in React Spectrum
DESCRIPTION: Shows an ActionGroup with vertical orientation, aligning items along the y-axis instead of the default horizontal layout.

LANGUAGE: tsx
CODE:
<ActionGroup orientation="vertical">
  <Item key="brush" aria-label="Brush"><Brush /></Item>
  <Item key="select" aria-label="Select"><Select /></Item>
  <Item key="regionSelect" aria-label="Select Region"><RegionSelect /></Item>
</ActionGroup>

----------------------------------------

TITLE: Implementing Vertical Divider in React Spectrum
DESCRIPTION: Shows how to create a vertical divider that separates content horizontally using the orientation prop.

LANGUAGE: tsx
CODE:
<Flex gap="size-125">
  <Text>Content left</Text>
  <Divider orientation="vertical" />
  <Text>Content right</Text>
</Flex>

----------------------------------------

TITLE: Using Custom Label Component in DateRangePicker
DESCRIPTION: Example of using a custom label component within a DateRangePicker in place of the built-in Label component.

LANGUAGE: tsx
CODE:
<DateRangePicker>
  <MyCustomLabel>Name</MyCustomLabel>
  {/* ... */}
</DateRangePicker>

----------------------------------------

TITLE: Importing Form-related Components in React Spectrum
DESCRIPTION: Import statement for Form and related form components from React Spectrum libraries for use in React applications.

LANGUAGE: jsx
CODE:
import {Checkbox} from '@react-spectrum/checkbox';
import {Form} from '@react-spectrum/form';
import {Radio, RadioGroup} from '@react-spectrum/radio';
import {TextField} from '@react-spectrum/textfield';

----------------------------------------

TITLE: Implementing a Custom 4-5-4 Calendar System for RangeCalendar
DESCRIPTION: Demonstrates how to create a custom calendar system extending GregorianCalendar to implement a fiscal 4-5-4 format calendar for use with RangeCalendar.

LANGUAGE: tsx
CODE:
import {GregorianCalendar} from '@internationalized/date';

function Example() {
  return <RangeCalendar firstDayOfWeek="sun" createCalendar={() => new Custom454()} />;
}

class Custom454 extends GregorianCalendar {
  // See @internationalized/date docs linked above...
  ///- begin collapse -///
  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];
  getDaysInMonth(date) {
    return this.weekPattern[date.month - 1] * 7;
  }

  fromJulianDay(jd: number): CalendarDate {
    let gregorian = super.fromJulianDay(jd);

    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');
    for (let months = 0; months < this.weekPattern.length; months++) {
      let weeksInMonth = this.weekPattern[months];
      let monthEnd = monthStart.add({weeks: weeksInMonth});
      if (monthEnd.compare(gregorian) > 0) {
        let days = gregorian.compare(monthStart);
        return new CalendarDate(this, monthStart.year, months + 1, days + 1);
      }
      monthStart = monthEnd;
    }

    throw Error('Date is not in any month somehow!');
  }

  toJulianDay(date: AnyCalendarDate): number {
    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');
    for (let month = 1; month < date.month; month++) {
      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});
    }

    let gregorian = monthStart.add({days: date.day - 1});
    return super.toJulianDay(gregorian);
  }

  getFormattableMonth(date) {
    let gregorian = toCalendar(date, new GregorianCalendar());
    return gregorian.set({month: date.month, day: 1});
  }

  isEqual(other) {
    return other instanceof Custom454;
  }
 ///- end collapse -///

----------------------------------------

TITLE: Importing Tabs and Related Components in React Spectrum
DESCRIPTION: Import statements for Tabs and related components from React Spectrum library, including ActionGroup, Button, icons, and layout components.

LANGUAGE: jsx
CODE:
import {ActionGroup} from '@react-spectrum/actiongroup';
import Bookmark from '@spectrum-icons/workflow/Bookmark';
import {Button} from '@react-spectrum/button';
import Calendar from '@spectrum-icons/workflow/Calendar';
import Dashboard from '@spectrum-icons/workflow/Dashboard';
import {Flex} from '@react-spectrum/layout';
import {Text} from '@react-spectrum/text';
import {Item, Tabs, TabList, TabPanels} from '@react-spectrum/tabs';

----------------------------------------

TITLE: Controlled and Uncontrolled TimeField Examples
DESCRIPTION: Shows how to implement both controlled and uncontrolled TimeField components using the Time object from @internationalized/date package.

LANGUAGE: tsx
CODE:
import {Time} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState(new Time(11, 45));

  return (
    <Flex gap="size-150" wrap>
      <TimeField
        label="Time (uncontrolled)"
        defaultValue={new Time(11, 45)} />
      <TimeField
        label="Time (controlled)"
        value={value}
        onChange={setValue} />
    </Flex>
  );
}

----------------------------------------

TITLE: DatePicker with International Calendar Support
DESCRIPTION: Shows how to configure DatePicker with the Indian calendar system using I18nProvider while maintaining Gregorian calendar dates in the onChange handler.

LANGUAGE: tsx
CODE:
import {I18nProvider} from '@react-aria/i18n';

function Example() {
  let [date, setDate] = React.useState(null);
  return (
    <I18nProvider locale="hi-IN-u-ca-indian">
      <DatePicker label="Date" value={date} onChange={setDate} />
      <p>Selected date: {date?.toString()}</p>
    </I18nProvider>
  );
}

----------------------------------------

TITLE: Implementing a RangeCalendar with Disabled Date Ranges in React Spectrum
DESCRIPTION: This snippet demonstrates how to create a RangeCalendar component with disabled date ranges. It utilizes the @internationalized/date library for date handling and the useLocale hook from React Spectrum. The example shows how to specify unavailable dates and set default values for a date range picker.

LANGUAGE: tsx
CODE:
import {today, getLocalTimeZone} from '@internationalized/date';
import {useLocale} from '@adobe/react-spectrum';

function Example() {
  let now = today(getLocalTimeZone()).set({day: 8});
  let disabledRanges = [
    [now, now.add({days: 2})],
    [now.add({days: 10}), now.add({days: 14})],
    [now.add({days: 23}), now.add({days: 28})],
  ];

  let {locale} = useLocale();
  let isDateUnavailable = (date) => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);

  return (
    <Flex direction="column" alignItems="center">
      <RangeCalendar
        aria-label="Trip dates"
        minValue={now}
        isDateUnavailable={isDateUnavailable}
        defaultValue={{start: now.add({days: 5}), end: now.add({days: 8})}} />
    </Flex>
  );
}

----------------------------------------

TITLE: Importing TextArea Component in React Spectrum
DESCRIPTION: Shows how to import the TextArea component from @react-spectrum/textfield and the Flex component from @react-spectrum/layout for layout purposes.

LANGUAGE: jsx
CODE:
import {TextArea} from '@react-spectrum/textfield';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Styling a Custom FieldGroup Component
DESCRIPTION: CSS styling for the custom FieldGroup component that contains multiple ColorField components.

LANGUAGE: css
CODE:
fieldset {
  padding: 1.5em;
  width: fit-content;
}

----------------------------------------

TITLE: Controlled Checkbox Group in React
DESCRIPTION: Shows how to implement a controlled checkbox group component where the selected values are managed by React state and updated via the onChange callback.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState(['soccer', 'baseball']);

  return (
    <CheckboxGroup label="Favorite sports (controlled)" value={selected} onChange={setSelected}>
      <Checkbox value="soccer">Soccer</Checkbox>
      <Checkbox value="baseball">Baseball</Checkbox>
      <Checkbox value="basketball">Basketball</Checkbox>
    </CheckboxGroup>
  );
}

----------------------------------------

TITLE: Adding Descriptive Text to CheckboxGroup
DESCRIPTION: Example demonstrating how to associate additional help text with a checkbox group using the description slot. This provides users with contextual information about the group.

LANGUAGE: tsx
CODE:
<CheckboxGroup>
  <Label>Pets</Label>
  <MyCheckbox value="dogs">Dogs</MyCheckbox>
  <MyCheckbox value="cats">Cats</MyCheckbox>
  <MyCheckbox value="dragons">Dragons</MyCheckbox>
  <Text slot="description">Select your pets.</Text>
</CheckboxGroup>

----------------------------------------

TITLE: ActionMenu with Static Sections
DESCRIPTION: Example showing how to group menu items into logical sections using the Section component with static items and section titles.

LANGUAGE: tsx
CODE:
<ActionMenu>
  <Section title="File">
    <Item key="new">New</Item>
    <Item key="open">Open...</Item>
  </Section>
  <Section title="Save">
    <Item key="save">Save</Item>
    <Item key="saveAs">Save As...</Item>
    <Item key="saveAll">Save All</Item>
  </Section>
</ActionMenu>

----------------------------------------

TITLE: Styling ColorPicker Components with CSS
DESCRIPTION: CSS styles for the ColorPicker button and dialog components, providing styling for the button appearance, focus states, and dialog layout.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.color-picker {
  background: none;
  border: none;
  padding: 0;
  display: flex;
  align-items: center;
  gap: 8px;
  outline: none;
  border-radius: 4px;
  appearance: none;
  vertical-align: middle;
  font-size: 1rem;
  color: var(--text-color);

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: 2px;
  }
}

.color-picker-dialog {
  outline: none;
  padding: 15px;
  display: flex;
  flex-direction: column;
  gap: 8px;
  min-width: 192px;
  max-height: inherit;
  box-sizing: border-box;
  overflow: auto;
}

----------------------------------------

TITLE: Setting Overflow Mode in React Spectrum TableView
DESCRIPTION: Demonstrates how to handle text overflow in cells by using the overflowMode prop with value 'wrap' to make content wrap instead of truncating.

LANGUAGE: tsx
CODE:
// Using same setup as hide header example
<TableExample overflowMode="wrap" />

----------------------------------------

TITLE: Implementing Row Actions in React Spectrum ListView
DESCRIPTION: This snippet demonstrates how to handle row actions in both checkbox and highlight selection styles using the onAction prop. It shows side-by-side examples that display alerts when rows are activated.

LANGUAGE: tsx
CODE:
<Flex wrap gap="size-300">
  <PokemonList onAction={key => alert(`Opening item ${key}...`)} aria-label="Checkbox selection ListView with row actions" width="size-2400" />
  <PokemonList selectionStyle="highlight" onAction={key => alert(`Opening item ${key}...`)} aria-label="Highlight selection ListView with row actions" width="size-2400" />
</Flex>

----------------------------------------

TITLE: Importing NumberField Components in React Spectrum
DESCRIPTION: Shows how to import the NumberField component from React Spectrum's library along with the Flex layout component.

LANGUAGE: jsx
CODE:
import {NumberField} from '@react-spectrum/numberfield';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. After running these commands, the application will be accessible at localhost:3000.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev

----------------------------------------

TITLE: Setting Background Styles for Modal Sheet
DESCRIPTION: CSS that sets the background color and positioning for the body and container elements to ensure proper rendering of the modal sheet.

LANGUAGE: css
CODE:
body {
  background: black;
}

body > div {
  background: var(--page-background);
  translate: 0;
  transform-origin: center 0;
  overflow: auto;
  height: 100vh;
}

----------------------------------------

TITLE: Form with Invalid Validation State in React Spectrum
DESCRIPTION: Shows a form with validation state set to "invalid", providing visual indication that the form contains errors that need correction.

LANGUAGE: tsx
CODE:
<Form
  validationState="invalid"
  aria-label="Invalid validationState example"
  maxWidth="size-3600"
  marginBottom="size-300">
  <TextField label="Name" />
  <RadioGroup label="Favorite pet">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: Implementing Controlled and Uncontrolled DateRangePicker
DESCRIPTION: Demonstrates using both controlled and uncontrolled versions of DateRangePicker with parsed date objects from @internationalized/date.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState({
    start: parseDate('2020-02-03'),
    end: parseDate('2020-02-08')
  });

  return (
    <Flex gap="size-150" wrap>
      <DateRangePicker
        label="Date range (uncontrolled)"
        defaultValue={{
          start: parseDate('2020-02-03'),
          end: parseDate('2020-02-08')
        }} />
      <DateRangePicker
        label="Date range (controlled)"
        value={value}
        onChange={setValue} />
    </Flex>
  );
}

----------------------------------------

TITLE: Implementing getDropOperation for Filtering Accepted Files
DESCRIPTION: This example shows how to use getDropOperation to accept only PNG images and provide appropriate visual feedback. The function specifically restricts the operation to 'copy', rejecting other drop operations requested via modifier keys.

LANGUAGE: tsx
CODE:
function Example() {
  let [items, setItems] = React.useState<ImageItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    getDropOperation: () => 'copy',
    acceptedDragTypes: ['image/png'],
    async onRootDrop(e) {
      let items = await Promise.all(
        e.items.filter(isFileDropItem).map(async item => ({
          id: Math.random(),
          url: URL.createObjectURL(await item.getFile()),
          name: item.name
        }))
      );
      setItems(items);
      // ...
    }
  });

  return (
    <MyGridList aria-label="Droppable list" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => "Drop PNGs here"}>
      {item => (
        <MyItem textValue={item.name}>
          <div className="image-item">
            <img src={item.url} />
            <span>{item.name}</span>
          </div>
        </MyItem>
      )}
    </MyGridList>
  );
  // See "Files" example above...
}

----------------------------------------

TITLE: Implementing Row Actions in React Spectrum ListView
DESCRIPTION: This snippet demonstrates how to handle row actions in both checkbox and highlight selection styles using the onAction prop. It shows side-by-side examples that display alerts when rows are activated.

LANGUAGE: tsx
CODE:
<Flex wrap gap="size-300">
  <PokemonList onAction={key => alert(`Opening item ${key}...`)} aria-label="Checkbox selection ListView with row actions" width="size-2400" />
  <PokemonList selectionStyle="highlight" onAction={key => alert(`Opening item ${key}...`)} aria-label="Highlight selection ListView with row actions" width="size-2400" />
</Flex>

----------------------------------------

TITLE: Cycling Hours During Daylight Saving Transitions in TypeScript
DESCRIPTION: Shows how cycling hours handles daylight saving time transitions. During spring forward, 2 AM is skipped, and during fall back, 1 AM is repeated, with the UTC offset changing under the hood.

LANGUAGE: tsx
CODE:
// A "spring forward" transition
let date = parseZonedDateTime('2020-03-08T01:00-08:00[America/Los_Angeles]');
date.cycle('hour', 1); // 2020-03-08T03:00-07:00[America/Los_Angeles]

// A "fall back" transition
let date = parseZonedDateTime('2020-11-01T01:00-07:00[America/Los_Angeles]');
date.cycle('hour', 1); // 2020-11-01T01:00-08:00[America/Los_Angeles]

----------------------------------------

TITLE: Handling CheckboxGroup Change Events with State Updates
DESCRIPTION: Demonstrates how to use the onChange event handler to track selected values in a CheckboxGroup and display them.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState([]);

  return (
    <>
      <CheckboxGroup label="Favorite sports" value={selected} onChange={setSelected}>
        <Checkbox value="soccer">Soccer</Checkbox>
        <Checkbox value="baseball">Baseball</Checkbox>
        <Checkbox value="basketball">Basketball</Checkbox>
      </CheckboxGroup>
      <div>You have selected: {selected.join(', ')}</div>
    </>
  );
}

----------------------------------------

TITLE: Basic ActionMenu Implementation in React Spectrum
DESCRIPTION: A simple example showing how to create an ActionMenu with basic menu items for Cut, Copy, and Paste operations.

LANGUAGE: tsx
CODE:
<ActionMenu>
  <Item>Cut</Item>
  <Item>Copy</Item>
  <Item>Paste</Item>
</ActionMenu>

----------------------------------------

TITLE: Emphasized Checkbox in React Spectrum
DESCRIPTION: Shows how to create a visually emphasized Checkbox using the isEmphasized prop for greater visual prominence.

LANGUAGE: tsx
CODE:
<Checkbox isEmphasized defaultSelected>Subscribe</Checkbox>

----------------------------------------

TITLE: Calendar with Date Range Validation
DESCRIPTION: Creates a Calendar that only accepts dates after today by using the minValue prop with the today function.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<Calendar aria-label="Appointment date" minValue={today(getLocalTimeZone())} />

----------------------------------------

TITLE: Testing Tabs Component with React Spectrum Test Utils
DESCRIPTION: Example showing how to set up tests for the Tabs component using the TabsTester utility from @react-spectrum/test-utils. This demonstrates keyboard interaction testing for tab selection changes.

LANGUAGE: ts
CODE:
// Tabs.test.ts
import {render} from '@testing-library/react';
import {theme} from '@react-spectrum/theme-default';
import {User} from '@react-spectrum/test-utils';

let testUtilUser = new User({interactionType: 'mouse'});
// ...

it('Tabs can change selection via keyboard', async function () {
  // Render your test component/app and initialize the listbox tester
  let {getByTestId} = render(
    <Provider theme={defaultTheme}>
      <Tabs data-testid="test-tabs">
        ...
      </Tabs>
    </Provider>
  );
  let tabsTester = testUtilUser.createTester('Tabs', {root: getByTestId('test-tabs'), interactionType: 'keyboard'});

  let tabs = tabsTester.tabs;
  expect(tabsTester.selectedTab).toBe(tabs[0]);

  await tabsTester.triggerTab({tab: 1});
  expect(tabsTester.selectedTab).toBe(tabs[1]);
});

----------------------------------------

TITLE: Implementing a Loading ProgressBar with Tailwind CSS in React
DESCRIPTION: Creates a loading ProgressBar component with a gradient background, percentage display, and animated progress indicator. The component uses React Aria Components for accessibility and Tailwind CSS for styling.

LANGUAGE: tsx
CODE:
import {ProgressBar, Label} from 'react-aria-components';

<div className="bg-linear-to-r from-blue-600 to-purple-600 p-12 rounded-lg flex justify-center">
  <ProgressBar value={30} className="flex flex-col gap-3 w-56 text-white">
    {({percentage, valueText}) => <>
      <div className="flex">
        <Label className="flex-1">Loading…</Label>
        <span>{valueText}</span>
      </div>
      <div className="h-2 top-[50%] transform translate-y-[-50%] w-full rounded-full bg-white/40">
        <div className="absolute h-2 top-[50%] transform translate-y-[-50%] rounded-full bg-white" style={{width: percentage + '%'}} />
      </div>
    </>}
  </ProgressBar>
</div>

----------------------------------------

TITLE: Multiple Selection in ActionGroup with React
DESCRIPTION: Demonstrates how to implement multiple selection in ActionGroup by setting the selectionMode prop to 'multiple' and tracking selected items.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set(['list']));

  return (
    <>
      <ActionGroup selectionMode="multiple" selectedKeys={selected} onSelectionChange={setSelected}>
        <Item key="grid">Grid view</Item>
        <Item key="list">List view</Item>
        <Item key="gallery">Gallery view</Item>
      </ActionGroup>
      <p>Current selections (controlled): {[...selected].join(', ')}</p>
    </>
  );
}

----------------------------------------

TITLE: HTML Form Integration with DatePicker
DESCRIPTION: Demonstrates how to integrate DatePicker with HTML forms using the name prop. The value is submitted as an ISO 8601 formatted string.

LANGUAGE: tsx
CODE:
<MyDatePicker label="Birth date" name="birthday" />

----------------------------------------

TITLE: Applying Custom Class Names to React Aria Components
DESCRIPTION: Example showing how to override the default className on a React Aria Tabs component with a custom one.

LANGUAGE: jsx
CODE:
<Tabs className="my-tabs">
  {/* ... */}
</Tabs>

----------------------------------------

TITLE: ActionGroup with Multiple Selection in React Spectrum
DESCRIPTION: Demonstrates a multi-selectable ActionGroup for text styles that collapses into a dropdown menu when space is limited. It uses the TextStyle icon as a summary icon for the collapsed state.

LANGUAGE: tsx
CODE:
import TextStyle from '@spectrum-icons/workflow/TextStyle';

<ActionGroup
  aria-label="Text style"
  overflowMode="collapse"
  selectionMode="multiple"
  isEmphasized
  summaryIcon={<TextStyle />}
  maxWidth={100}>
  <Item key="bold">
    <TagBold />
    <Text>Bold</Text>
  </Item>
  <Item key="italic">
    <TagItalic />
    <Text>Italic</Text>
  </Item>
  <Item key="underline">
    <TagUnderline />
    <Text>Underline</Text>
  </Item>
  <Item key="strike">
    <TextStrikethrough />
    <Text>Strikethrough</Text>
  </Item>
</ActionGroup>

----------------------------------------

TITLE: Setting up Layout Component in React with Import Statements
DESCRIPTION: This snippet shows the import statements and default export setting up the Layout component for the documentation page. It imports various documentation components and test utility modules.

LANGUAGE: JSX
CODE:
import {Layout, VersionBadge} from '@react-spectrum/docs';
export default Layout;
import testUtilDocs from 'docs:@react-aria/test-utils';
import combobox from 'docs:@react-aria/test-utils/src/combobox.ts';
import gridlist from 'docs:@react-aria/test-utils/src/gridlist.ts';
import menu from 'docs:@react-aria/test-utils/src/menu.ts';
import select from 'docs:@react-aria/test-utils/src/select.ts';
import table from 'docs:@react-aria/test-utils/src/table.ts';
import {ClassAPI, FunctionAPI, InterfaceType, TypeContext, TypeLink} from '@react-spectrum/docs';

----------------------------------------

TITLE: NumberField with Step Value Configurations
DESCRIPTION: Demonstrates different step value configurations for NumberField, including steps with min/max value constraints.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-150">
  <NumberField
    label="Step"
    step={10} />
  <NumberField
    label="Step + minValue"
    minValue={2}
    step={3} />
  <NumberField
    label="Step + minValue + maxValue"
    minValue={2}
    maxValue={21}
    step={3} />
</Flex>

----------------------------------------

TITLE: Importing LabeledValue from React Spectrum
DESCRIPTION: Shows how to import the LabeledValue component from the React Spectrum library.

LANGUAGE: jsx
CODE:
import {LabeledValue} from '@react-spectrum/labeledvalue';

----------------------------------------

TITLE: Using Native Data Types for Keys with Implicit Key Specification
DESCRIPTION: This example demonstrates how to use the native data type (numbers) for keys when specifying keys within the items array rather than on the Item component. The selectedKey state uses the native number type.

LANGUAGE: tsx
CODE:
let items = [
  {name: 'Aardvark', key: 1},
  {name: 'Kangaroo', key: 2},
  {name: 'Snake', key: 3}
];

let [selectedKey, setSelectedKey] = useState(2);
<ComboBox selectedKey={selectedKey} onSelectionChange={setSelectedKey}>
  {item => <Item>{item.name}</Item>}
</ComboBox>

----------------------------------------

TITLE: TimeField with Help Text and Error Messages
DESCRIPTION: Example showing how to add descriptive help text and error messages to TimeField components based on validation state.

LANGUAGE: tsx
CODE:
<Flex gap="size-100" wrap>
  <TimeField label="Time" defaultValue={new Time(9)} validationState="valid" description="Select a meeting time." />
  <TimeField label="Time" validationState="invalid" errorMessage="Empty input is not allowed." />
</Flex>

----------------------------------------

TITLE: CSS for Tab Links
DESCRIPTION: CSS styles for tabs that are rendered as links, removing text decoration and setting an appropriate cursor.

LANGUAGE: css
CODE:
.react-aria-Tab[href] {
  text-decoration: none;
  cursor: pointer;
}

----------------------------------------

TITLE: Setting Placeholder Value in TimeField with React Aria Components
DESCRIPTION: Demonstrates how to set a placeholder value for a TimeField component, which controls the default values of each segment when the user first interacts with them.

LANGUAGE: tsx
CODE:
<MyTimeField label="Meeting time" placeholderValue={new Time(9)} />

----------------------------------------

TITLE: Implementing Row Actions in React Spectrum Table
DESCRIPTION: Shows how to add row actions to tables using the onRowAction prop. The example demonstrates both toggle and replace selection behaviors with row actions enabled.

LANGUAGE: tsx
CODE:
<div style={{display: 'flex', flexWrap: 'wrap', gap: '24px'}}>
  <PokemonTable aria-label="Pokemon table with row actions and toggle selection behavior" selectionMode="multiple" onRowAction={key => alert(`Opening item ${key}...`)} />
  <PokemonTable aria-label="Pokemon table with row actions and replace selection behavior" selectionMode="multiple" selectionBehavior="replace" onRowAction={key => alert(`Opening item ${key}...`)} />
</div>

----------------------------------------

TITLE: Disabling DateField Interaction
DESCRIPTION: Demonstrates how to create a disabled DateField that prevents user interaction using the isDisabled prop.

LANGUAGE: tsx
CODE:
<DateField label="Birth date" isDisabled />

----------------------------------------

TITLE: Creating Disabled DatePicker in React Spectrum
DESCRIPTION: Shows how to create a disabled DatePicker using the isDisabled prop, which prevents user interaction with the component.

LANGUAGE: tsx
CODE:
<DatePicker label="Birth date" isDisabled />

----------------------------------------

TITLE: Styling ComboBox Popover with Custom Properties
DESCRIPTION: Example of styling a Popover component within a ComboBox using CSS custom properties to match the width of the trigger element.

LANGUAGE: css
CODE:
.react-aria-Popover[data-trigger=ComboBox] {
  width: var(--trigger-width);
}

----------------------------------------

TITLE: Using an Uncontrolled ColorArea with Custom Default Value
DESCRIPTION: Example showing how to use the ColorArea component in an uncontrolled manner with a custom default value in HSB color space and a custom accessibility label.

LANGUAGE: TSX
CODE:
<label id="hsb-label-id">x: Hue, y: Saturation</label>
<ColorArea
  aria-labelledby="hsb-label-id"
  defaultValue="hsb(219, 58%, 93%)" />

----------------------------------------

TITLE: CSS Styling for Disabled Calendar Dates
DESCRIPTION: CSS styles that apply a disabled text color to calendar cells that have the data-disabled attribute set.

LANGUAGE: css
CODE:
.react-aria-Calendar {
  .react-aria-CalendarCell {
    &[data-disabled] {
      color: var(--text-color-disabled);
    }
  }
}

----------------------------------------

TITLE: CSS Styling for Invalid Checkbox State
DESCRIPTION: CSS styling for the invalid state of a checkbox, including specific styles for the checkbox border, background, and pressed states when validation fails.

LANGUAGE: css
CODE:
.react-aria-Checkbox {
  &[data-invalid] {
    .checkbox {
      --checkmark-color: var(--gray-50);
      border-color: var(--invalid-color);
    }

    &[data-pressed] .checkbox {
      border-color: var(--invalid-color-pressed);
    }

    &[data-selected],
    &[data-indeterminate] {
      .checkbox {
        background: var(--invalid-color);
      }

      &[data-pressed] .checkbox {
        background: var(--invalid-color-pressed);
      }
    }
  }
}

----------------------------------------

TITLE: Menu with Dynamic Sections
DESCRIPTION: Shows how to create menu sections dynamically from hierarchical data. Each section is generated from a parent item in the data structure, with its children becoming the section's menu items.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set([1,3]));
  let openWindows = [
    {
      name: 'Left Panel',
      id: 'left',
      children: [
        {id: 1, name: 'Final Copy (1)'}
      ]
    },
    {
      name: 'Right Panel',
      id: 'right',
      children: [
        {id: 2, name: 'index.ts'},
        {id: 3, name: 'package.json'},
        {id: 4, name: 'license.txt'}
      ]
    }
  ];

  return (
    <MenuTrigger>
      <ActionButton>
        Window
      </ActionButton>
      <Menu
        items={openWindows}
        selectionMode="multiple"
        selectedKeys={selected}
        onSelectionChange={setSelected}>
        {item => (
          <Section items={item.children} title={item.name}>
            {item => <Item>{item.name}</Item>}
          </Section>
        )}
      </Menu>
    </MenuTrigger>
  );
}

----------------------------------------

TITLE: Adding onAction to Individual TreeItems
DESCRIPTION: Example of applying onAction directly to TreeItem components, which is useful for static collections. Both the tree's and individual item's onAction handlers can be called if both are provided.

LANGUAGE: tsx
CODE:
<Tree aria-label="Tree with onAction applied on the items directly" style={{height: '300px'}} defaultExpandedKeys={['bulbasaur', 'ivysaur']}>
  <MyTreeItem
    onAction={() => alert(`Opening Bulbasaur...`)}
    id="bulbasaur"
    title="Bulbasaur">
    <MyTreeItem
      onAction={() => alert(`Opening Ivysaur...`)}
      id="ivysaur"
      title="Ivysaur">
      <MyTreeItem
        onAction={() => alert(`Opening Venisaur...`)}
        id="venisaur"
        title="Venisaur" />
    </MyTreeItem>
  </MyTreeItem>
</Tree>

----------------------------------------

TITLE: Creating a Custom Label Component Compatible with React Aria Components
DESCRIPTION: Shows how to adapt an existing custom label component to work with React Aria Components by using the useContextProps hook to merge local props with context props.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Configuring Compact Density for Tabs in React Spectrum
DESCRIPTION: Example showing how to apply compact density to Tabs using the density prop. This reduces the size of the tabs for more compact UI layouts.

LANGUAGE: tsx
CODE:
<Tabs aria-label="Chat log density example" density="compact">
  <TabList>
    <Item key="item1">
      John Doe
    </Item>
    <Item key="item2">
      Jane Doe
    </Item>
    <Item key="item3">
      Joe Bloggs
    </Item>
  </TabList>
  <TabPanels>
    <Item key="item1">
      There is no prior chat history with John Doe.
    </Item>
    <Item key="item2">
      There is no prior chat history with Jane Doe.
    </Item>
    <Item key="item3">
      There is no prior chat history with Joe Bloggs.
    </Item>
  </TabPanels>
</Tabs>

----------------------------------------

TITLE: Configuring Manual Keyboard Activation in Tabs
DESCRIPTION: Example demonstrating how to configure tabs with manual keyboard activation, requiring users to press Enter or Space to confirm tab selection after navigating with arrow keys.

LANGUAGE: tsx
CODE:
function Example() {
  let tabs = [
    {name: 'Triassic', children: 'The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.'},
    {name: 'Jurassic', children: 'The Jurassic ranges from 200 million years to 145 million years ago.'},
    {name: 'Cretaceous', children: 'The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.'}
  ];
  type Tab = typeof tabs[0];

  return (
    <Tabs aria-label="Mesozoic time periods" items={tabs} keyboardActivation="manual">
      <TabList>
        {(item: Tab) => (
          <Item key={item.name}>
            {item.name}
          </Item>
        )}
      </TabList>
      <TabPanels>
        {(item: Tab) => (
          <Item key={item.name}>
            {item.children}
          </Item>
        )}
      </TabPanels>
    </Tabs>
  );
}

----------------------------------------

TITLE: Implementing Item Insertion with onInsert in GridList
DESCRIPTION: Example showing how to implement drag and drop insertion between items in a GridList using the onInsert event handler. The handler processes dropped items and inserts them before or after the target based on drop position.

LANGUAGE: tsx
CODE:
function Example() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Illustrator'},
      {id: 2, name: 'Premiere'},
      {id: 3, name: 'Acrobat'}
    ]
  });

  let { dragAndDropHooks } = useDragAndDrop({
    async onInsert(e) {
      let items = await Promise.all(e.items.map(async item => {
        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;
        return {id: Math.random(), name};
      }));

      if (e.target.dropPosition === 'before') {
        list.insertBefore(e.target.key, ...items);
      } else if (e.target.dropPosition === 'after') {
        list.insertAfter(e.target.key, ...items);
      }
    }
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      <DraggableGridList />
      <MyGridList aria-label="Droppable list" items={list.items} dragAndDropHooks={dragAndDropHooks}>
        {item => <GridListItem>{item.name}</GridListItem>}
      </MyGridList>
    </div>
  );
}

----------------------------------------

TITLE: Configuring TableView with Disallowed Empty Selection
DESCRIPTION: Example of using the disallowEmptySelection prop with the PokemonTable component to ensure at least one row is always selected.

LANGUAGE: tsx
CODE:
// Using the same table as above
<PokemonTable disallowEmptySelection />

----------------------------------------

TITLE: MenuTrigger with Various Alignment and Direction Options
DESCRIPTION: Example demonstrating different alignment and direction options for MenuTrigger using align and direction props.

LANGUAGE: tsx
CODE:
<Flex gap="size-100">
  <MenuTrigger align="start">
    <ActionButton>Edit</ActionButton>
    <Menu>
      <Item key="cut">Cut</Item>
      <Item key="copy">Copy</Item>
      <Item key="paste">Paste</Item>
    </Menu>
  </MenuTrigger>
  <MenuTrigger align="end" direction="top" shouldFlip={false}>
    <ActionButton>View</ActionButton>
    <Menu>
      <Item key="side">Side bar</Item>
      <Item key="options">Page options</Item>
      <Item key="edit">Edit Panel</Item>
    </Menu>
  </MenuTrigger>
  <MenuTrigger direction="start" align="start">
    <ActionButton>Edit</ActionButton>
    <Menu>
      <Item key="cut">Cut</Item>
      <Item key="copy">Copy</Item>
      <Item key="paste">Paste</Item>
    </Menu>
  </MenuTrigger>
  <MenuTrigger direction="end" align="end">
    <ActionButton>View</ActionButton>
    <Menu>
      <Item key="side">Side bar</Item>
      <Item key="options">Page options</Item>
      <Item key="edit">Edit Panel</Item>
    </Menu>
  </MenuTrigger>
</Flex>

----------------------------------------

TITLE: AlertDialog with Warning Variant
DESCRIPTION: Demonstrates the warning variant of AlertDialog, which alerts users about potential issues or cautions them before proceeding with an action.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Enter</ActionButton>
  <AlertDialog
    variant="warning"
    title="Raid instance"
    primaryActionLabel="Confirm"
    cancelLabel="Cancel">
    The following encounter meant for parties of 4 or more. Enter anyways?
  </AlertDialog>
</DialogTrigger>

----------------------------------------

TITLE: Complex Picker Items with Icons and Descriptions
DESCRIPTION: Example demonstrating how to create Picker items with icons and descriptions. The slot="description" prop is used to distinguish descriptive text elements.

LANGUAGE: tsx
CODE:
<Picker label="Options">
  <Section title="Permission">
    <Item textValue="Read">
      <Book size="S" />
      <Text>Read</Text>
      <Text slot="description">Read Only</Text>
    </Item>
    <Item textValue="Write">
      <Draw size="S" />
      <Text>Write</Text>
      <Text slot="description">Read and Write Only</Text>
    </Item>
    <Item textValue="Admin">
      <BulkEditUsers size="S" />
      <Text>Admin</Text>
      <Text slot="description">Full access</Text>
    </Item>
  </Section>
</Picker>

----------------------------------------

TITLE: Implementing Read-only CheckboxGroup in React Spectrum
DESCRIPTION: This example demonstrates a read-only CheckboxGroup where selections cannot be changed but the group remains focusable. It uses the isReadOnly prop with a defaultValue to set an immutable selection.

LANGUAGE: tsx
CODE:
<CheckboxGroup label="Favorite sports" defaultValue={['baseball']} isReadOnly>
  <Checkbox value="soccer">Soccer</Checkbox>
  <Checkbox value="baseball">Baseball</Checkbox>
  <Checkbox value="basketball">Basketball</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Adding Description Text to DateRangePicker
DESCRIPTION: Example showing how to add descriptive help text to a DateRangePicker using the description slot.

LANGUAGE: tsx
CODE:
<DateRangePicker>
  <Label>Trip dates</Label>
  <Group>
    <DateInput slot="start">
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <span aria-hidden="true">–</span>
    <DateInput slot="end">
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <Button>▼</Button>
  </Group>
  <Text slot="description">Please your vacation dates.</Text>
  <Popover>
    <Dialog>
      <RangeCalendar>
        <header>
          <Button slot="previous">◀</Button>
          <Heading />
          <Button slot="next">▶</Button>
        </header>
        <CalendarGrid>
          {date => <CalendarCell date={date} />}
        </CalendarGrid>
      </RangeCalendar>
    </Dialog>
  </Popover>
</DateRangePicker>

----------------------------------------

TITLE: Targeting Component States with Data Attributes
DESCRIPTION: Shows how to use data attributes for targeting specific UI states of a component in CSS selectors.

LANGUAGE: css
CODE:
.react-aria-DropZone[data-drop-target] {
  /* ... */
}

----------------------------------------

TITLE: Handling Breadcrumbs Actions with onAction Callback
DESCRIPTION: Example demonstrating how to handle user interactions with Breadcrumbs using the onAction callback. This shows creating a dynamic breadcrumb trail from a data array and tracking which item was clicked.

LANGUAGE: tsx
CODE:
function Example() {
  let folders = [
    {id: 1, label: 'Home'},
    {id: 2, label: 'Trendy'},
    {id: 3, label: 'March 2020 Assets'}
  ];
  let [folderId, setFolderId] = React.useState(null);
  return (
    <div>
      <Breadcrumbs onAction={(a) => setFolderId(a)}>
        {folders.map(f => <Item key={f.id}>{f.label}</Item>)}
      </Breadcrumbs>
      <p>You pressed folder ID: {folderId}</p>
    </div>
  );
}

----------------------------------------

TITLE: Using the useCollator Hook for Internationalized String Comparison in React
DESCRIPTION: This example demonstrates how to use the useCollator hook to compare two strings according to the current locale. It creates a simple form with two text inputs and displays the comparison result dynamically as the user types.

LANGUAGE: tsx
CODE:
import {useCollator} from '@react-aria/i18n';

function Example() {
  let [first, setFirst] = React.useState('');
  let [second, setSecond] = React.useState('');

  let collator = useCollator();
  let result = collator.compare(first, second);

  return (
    <>
      <div>
        <label htmlFor="first-string">First string</label>
        <input
          id="first-string"
          value={first}
          onChange={e => setFirst(e.target.value)} />
        <label htmlFor="second-string">Second string</label>
        <input
          id="second-string"
          value={second}
          onChange={e => setSecond(e.target.value)} />
      </div>
      <p>
        {result === 0
          ? 'The strings are the same'
          : result < 0
            ? 'First comes before second'
            : 'Second comes before first'
        }
      </p>
    </>
  );
}

----------------------------------------

TITLE: Disabled ButtonGroup in React Spectrum
DESCRIPTION: Example showing a ButtonGroup in a disabled state, which disables all buttons within the group.

LANGUAGE: tsx
CODE:
<ButtonGroup isDisabled>
  <Button variant="secondary">No, thanks</Button>
  <Button variant="secondary">Remind me later</Button>
  <Button variant="primary">Rate Now</Button>
</ButtonGroup>

----------------------------------------

TITLE: Basic Image Component Implementation in React Spectrum
DESCRIPTION: Shows a simple implementation of the Image component with required src and alt attributes.

LANGUAGE: tsx
CODE:
<Image src="https://i.imgur.com/Z7AzH2c.png" alt="Sky and roof" />

----------------------------------------

TITLE: Disabled RadioGroup Component
DESCRIPTION: Shows how to disable an entire RadioGroup or individual Radio components using the isDisabled prop.

LANGUAGE: tsx
CODE:
<RadioGroup label="Favorite avatar" isDisabled>
  <Radio value="wizard">Wizard</Radio>
  <Radio value="dragon">Dragon</Radio>
</RadioGroup>

----------------------------------------

TITLE: Handling File Drops for Images
DESCRIPTION: Example demonstrating how to accept image file drops (JPEG and PNG), creating object URLs to display the dropped images.

LANGUAGE: TSX
CODE:
import type {FileDropItem} from '@react-aria/dnd';

function DropTarget() {
  let [file, setFile] = React.useState(null);
  let ref = React.useRef(null);
  let {dropProps, isDropTarget} = useDrop({
    ref,
    async onDrop(e) {
      let item = e.items.find(item => item.kind === 'file' && (item.type === 'image/jpeg' || item.type === 'image/png')) as FileDropItem;
      if (item) {
        setFile(URL.createObjectURL(await item.getFile()));
      }
    }
  });

  return (
    <div {...dropProps} role="button" tabIndex={0} ref={ref} className={`droppable ${isDropTarget ? 'target' : ''}`}>
      {file ? <img src={file} style={{width: '100%', height: '100%', objectFit: 'contain'}} /> : 'Drop image here'}
    </div>
  );
}

----------------------------------------

TITLE: Handling Drop Operations in React Spectrum
DESCRIPTION: This example demonstrates how to process different drop operations (move, copy, link) within an onItemDrop event handler. The code parses data from the dropped item and executes different actions based on the dropOperation value.

LANGUAGE: tsx
CODE:
let onItemDrop = async (e) => {
  let data = JSON.parse(await e.items[0].getText('my-app-file'));
  /*- begin highlight -*/
  switch (e.dropOperation) {
    case 'move':
      MyAppFileService.move(data.filePath, props.filePath);
      break;
    case 'copy':
      MyAppFileService.copy(data.filePath, props.filePath);
      break;
    case 'link':
      MyAppFileService.link(data.filePath, props.filePath);
      break;
  }
  /*- end highlight -*/
};

----------------------------------------

TITLE: Basic Button Implementation in React Spectrum
DESCRIPTION: Demonstrates the basic implementation of an accent variant Button component.

LANGUAGE: tsx
CODE:
<Button variant="accent">Save</Button>

----------------------------------------

TITLE: Importing ColorPicker Components in React Spectrum
DESCRIPTION: Shows how to import the ColorPicker and ColorEditor components from React Spectrum, along with the Flex component for layout.

LANGUAGE: jsx
CODE:
import {ColorPicker, ColorEditor} from '@react-spectrum/color';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: SearchField with Contextual Help
DESCRIPTION: Demonstrates adding contextual help to a SearchField to provide additional information or guidance to users.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<SearchField
  label="Search"
  contextualHelp={
    <ContextualHelp variant="info">
      <Heading>Search tips</Heading>
      <Content>You can use modifiers like "date:" and "from:" to search by specific attributes.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Displaying Format Help Text in DateField
DESCRIPTION: Shows how to display format help text that automatically shows the expected date format for the user's locale using the showFormatHelpText prop.

LANGUAGE: tsx
CODE:
<DateField label="Birth date" showFormatHelpText />

----------------------------------------

TITLE: Using ColorWheel with a Default Value in React
DESCRIPTION: Example of using the ColorWheel component in an uncontrolled manner with a specified default hue value provided as an HSL color string.

LANGUAGE: tsx
CODE:
<ColorWheel defaultValue="hsl(80, 100%, 50%)" />

----------------------------------------

TITLE: Customizing DateInput Component with Custom Class Name
DESCRIPTION: Demonstrates how to override the default class name on a DateInput component with a custom one.

LANGUAGE: jsx
CODE:
<DateInput className="my-date-input">
  {/* ... */}
</DateInput>

----------------------------------------

TITLE: LabeledValue with Formatted Date
DESCRIPTION: Shows how to use formatOptions to customize date formatting with a JavaScript Date object.

LANGUAGE: tsx
CODE:
<LabeledValue label="Appointment date" value={new Date(2022, 6, 5)} formatOptions={{dateStyle: 'short'}} />

----------------------------------------

TITLE: Creating Custom Input Component with Wrapper
DESCRIPTION: Example showing how to create a custom wrapper for the Input component within SearchField, allowing customization while maintaining the original functionality.

LANGUAGE: tsx
CODE:
function MyInput(props) {
  return <Input {...props} className="my-input" />
}

----------------------------------------

TITLE: Creating Custom Input Component with Wrapper
DESCRIPTION: Example showing how to create a custom wrapper for the Input component within SearchField, allowing customization while maintaining the original functionality.

LANGUAGE: tsx
CODE:
function MyInput(props) {
  return <Input {...props} className="my-input" />
}

----------------------------------------

TITLE: Disabled Breadcrumbs in React Spectrum
DESCRIPTION: Example showing Breadcrumbs in a disabled state where navigation is not available but layout is maintained, using the isDisabled prop.

LANGUAGE: tsx
CODE:
<Breadcrumbs isDisabled>
  <Item key="home">Home</Item>
  <Item key="trendy">Trendy</Item>
  <Item key="march 2020 assets">March 2020 Assets</Item>
</Breadcrumbs>

----------------------------------------

TITLE: Implementing Disabled Items in ListBox with isDisabled Prop
DESCRIPTION: Example of using the isDisabled prop on individual ListBoxItem components to disable specific items, making them non-focusable and non-selectable.

LANGUAGE: tsx
CODE:
<ListBox
  aria-label="Choose sandwich contents with disabled items"
  selectionMode="multiple">
  <ListBoxItem>Lettuce</ListBoxItem>
  <ListBoxItem>Tomato</ListBoxItem>
  <ListBoxItem>Cheese</ListBoxItem>
  {/*- begin highlight -*/}
  <ListBoxItem isDisabled>Tuna Salad</ListBoxItem>
  {/*- end highlight -*/}
  <ListBoxItem>Egg Salad</ListBoxItem>
  <ListBoxItem>Ham</ListBoxItem>
</ListBox>

----------------------------------------

TITLE: Implementing Dynamic Sections in a ListBox with Hierarchical Data
DESCRIPTION: This example demonstrates how to create a ListBox with dynamically generated sections from hierarchical data. It uses controlled selection and renders each section based on the nested data structure.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-stately';

function Example() {
  let options = [
    {name: 'Australian', children: [
      {id: 2, name: 'Koala'},
      {id: 3, name: 'Kangaroo'},
      {id: 4, name: 'Platypus'}
    ]},
    {name: 'American', children: [
      {id: 6, name: 'Bald Eagle'},
      {id: 7, name: 'Bison'},
      {id: 8, name: 'Skunk'}
    ]}
  ];
  let [selected, setSelected] = React.useState<Selection>(new Set());

  return (
    <ListBox
      label="Pick an animal"
      items={options}
      selectedKeys={selected}
      selectionMode="single"
      onSelectionChange={setSelected}>
      {item => (
        <Section key={item.name} items={item.children} title={item.name}>
          {item => <Item>{item.name}</Item>}
        </Section>
      )}
    </ListBox>
  );
}

----------------------------------------

TITLE: HTML Form Integration with ColorSlider
DESCRIPTION: Example showing how to integrate a ColorSlider with HTML forms using the name prop. The value will be submitted as a number between the minimum and maximum value for the displayed channel.

LANGUAGE: tsx
CODE:
<MyColorSlider
  defaultValue="#7f0000"
  channel="red"
  name="red" />

----------------------------------------

TITLE: Creating a Popover Component for ComboBox Dropdown
DESCRIPTION: Implements a Popover component for displaying the dropdown menu in the ComboBox. This component is reusable across various UI components that need popover functionality, such as Select, Menu, and more. It uses React Aria's overlay hooks for positioning and accessibility.

LANGUAGE: tsx
CODE:
import type {AriaPopoverProps} from 'react-aria';
import type {OverlayTriggerState} from 'react-stately';
import {usePopover, Overlay, DismissButton} from '@react-aria/overlays';

interface PopoverProps extends AriaPopoverProps {
  children: React.ReactNode,
  state: OverlayTriggerState
}

function Popover({children, state, ...props}: PopoverProps) {
  let {popoverProps} = usePopover(props, state);

  return (
    <Overlay>
      <div
        {...popoverProps}
        ref={props.popoverRef as React.RefObject<HTMLDivElement>}
        style={{
          ...popoverProps.style,
          background: 'lightgray',
          border: '1px solid gray'
        }}>
        {children}
        <DismissButton onDismiss={state.close} />
      </div>
    </Overlay>
  );
}

----------------------------------------

TITLE: Basic DateField Usage Example
DESCRIPTION: Shows the most basic implementation of a DateField with just a label property.

LANGUAGE: tsx
CODE:
<DateField label="Event date" />

----------------------------------------

TITLE: Implementing a Pending State Button with Progress Indicator
DESCRIPTION: Demonstrates how to create a button with a pending state that shows a progress indicator when clicked, useful for long-running operations.

LANGUAGE: tsx
CODE:
import {useState} from 'react';

function PendingButton(props) {
  let [isPending, setPending] = useState(false);

  let handlePress = (e) => {
    setPending(true);
    setTimeout(() => {
      setPending(false);
    }, 5000);
  };

  return (
    <Button
      {...props}
      isPending={isPending}
      onPress={handlePress}>
        {({isPending}) => (
          <>
            {!isPending && <span>Save</span>}
            {isPending && (
              // See below
              <MyProgressCircle aria-label="Saving..." isIndeterminate />
            )}
          </>
        )}
    </Button>
  );
}

----------------------------------------

TITLE: Implementing HSLA Color Picker with ColorWheel in React Spectrum
DESCRIPTION: This example demonstrates how to create an HSLA color picker using ColorArea, ColorWheel, and ColorSlider components. It uses state to manage the color value and displays the current HSLA color string.

LANGUAGE: tsx
CODE:
import {ColorArea, ColorSlider, ColorWheel} from '@react-spectrum/color';
import {Flex, Grid} from '@react-spectrum/layout';
import {Label} from '@react-spectrum/label';
import {parseColor} from '@react-stately/color';
import {View} from '@react-spectrum/view';

function Example() {
  let [color, setColor] = React.useState(parseColor('hsla(0, 100%, 50%, 0.5)'));
  let [, saturationChannel, lightnessChannel] = color.getColorChannels();
  return (
    <fieldset style={{border: 0}}>
      <legend>HSLA Example</legend>
      <Flex
        direction="column">
        <View
          position="relative"
          width="size-2400">
          <Grid
            position="absolute"
            justifyContent="center"
            alignContent="center"
            width="100%"
            height="100%">
            <ColorArea
              xChannel={saturationChannel}
              yChannel={lightnessChannel}
              value={color}
              onChange={setColor}
              size="size-1200" />
          </Grid>
          <ColorWheel
            value={color}
            onChange={setColor}
            size="size-2400" />
        </View>
        <ColorSlider channel="alpha" value={color} onChange={setColor} />
        <p>Current value: {color.toString('hsla')}</p>
      </Flex>
    </fieldset>
  );
}

----------------------------------------

TITLE: SearchField with Form Validation
DESCRIPTION: Demonstrates using SearchField with native form validation through the Form component, showing how validation errors are displayed.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  {/*- begin highlight -*/}
  <SearchField label="Search" name="search" isRequired />
  {/*- end highlight -*/}
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Implementing Custom Time Validation Logic
DESCRIPTION: Example showing how to implement custom validation logic that ensures a time is selected on 15-minute increments.

LANGUAGE: tsx
CODE:
<Form>
  <MyTimeField
    label="Meeting time"
    /*- begin highlight -*/
    validate={time => time?.minute % 15 !== 0 ? 'Meetings start every 15 minutes.' : null}
    /*- end highlight -*/
    defaultValue={new Time(9, 25)} />
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Disabled Picker in React Spectrum
DESCRIPTION: Example of a disabled Picker using the isDisabled prop, which prevents user interaction and displays the component in a visually muted state.

LANGUAGE: tsx
CODE:
<Picker label="Choose frequency" isDisabled>
  <Item key="rarely">Rarely</Item>
  <Item key="sometimes">Sometimes</Item>
  <Item key="always">Always</Item>
</Picker>

----------------------------------------

TITLE: Creating Filled Sliders with Offset
DESCRIPTION: Examples of filled sliders: one showing opacity as a percentage and another showing exposure with a zero offset point.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-300">
  <Slider label="Opacity" maxValue={1} formatOptions={{style: 'percent'}} defaultValue={0.9} step={0.01} isFilled />
  <Slider label="Exposure" minValue={-5} maxValue={5} defaultValue={1.83} formatOptions={{signDisplay: 'always'}} step={0.01} fillOffset={0} isFilled />
</Flex>

----------------------------------------

TITLE: Creating a Read-only RadioGroup
DESCRIPTION: Example of using the isReadOnly prop to make a RadioGroup immutable while maintaining focusability, unlike disabled state.

LANGUAGE: tsx
CODE:
<MyRadioGroup label="Favorite avatar" defaultValue="wizard" isReadOnly>
  <Radio value="wizard">Wizard</Radio>
  <Radio value="dragon">Dragon</Radio>
</MyRadioGroup>

----------------------------------------

TITLE: TimeField with Custom Hour Cycle Format
DESCRIPTION: Example showing how to override the default hour cycle format to use 24-hour time regardless of the user's locale.

LANGUAGE: tsx
CODE:
<TimeField
  label="Appointment time"
  hourCycle={24} />

----------------------------------------

TITLE: Creating a Reusable Tooltip Component
DESCRIPTION: Example of creating a reusable tooltip component by wrapping Tooltip and its children. This pattern ensures consistent styling and structure across the application while simplifying usage.

LANGUAGE: tsx
CODE:
import type {TooltipProps} from 'react-aria-components';

interface MyTooltipProps extends Omit<TooltipProps, 'children'> {
  children: React.ReactNode
}

function MyTooltip({children, ...props}: MyTooltipProps) {
  return (
    <Tooltip {...props}>
      <OverlayArrow>
        <svg width={8} height={8} viewBox="0 0 8 8"><path d="M0 0 L4 4 L8 0" /></svg>
      </OverlayArrow>
      {children}
    </Tooltip>
  );
}

<TooltipTrigger>
  <Button>💾</Button>
  <MyTooltip>Save</MyTooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Creating Disabled Menu Items in React Spectrum
DESCRIPTION: This example demonstrates how to disable specific menu items using the disabledKeys prop which corresponds with the key prop passed to each Item component. Disabled items cannot be focused or selected.

LANGUAGE: tsx
CODE:
<MenuButton label="Actions" onAction={alert} disabledKeys={['paste']}>
  <Item key="copy">Copy</Item>
  <Item key="cut">Cut</Item>
  <Item key="paste">Paste</Item>
</MenuButton>

----------------------------------------

TITLE: Positive Variant InlineAlert Example in React Spectrum
DESCRIPTION: Shows how to create an InlineAlert with the positive semantic variant, which includes an icon and is used for success messages.

LANGUAGE: tsx
CODE:
<InlineAlert variant="positive">
  <Heading>Payment Information</Heading>
  <Content>Enter your billing address, shipping address, and payment method to complete your purchase.</Content>
</InlineAlert>

----------------------------------------

TITLE: Strict Partial Comparison of CalendarDateTime Objects Without Calendar Conversion
DESCRIPTION: Using utility functions for strict partial date comparisons that require the same calendar system. These functions return false when comparing dates from different calendar systems.

LANGUAGE: tsx
CODE:
import {isEqualMonth, IslamicUmalquraCalendar} from '@internationalized/date';

isEqualMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(2021, 4, 30, 5, 15)); // true
isEqualMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(2021, 8, 2, 5, 15)); // false
isEqualMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(new IslamicUmalquraCalendar(), 1442, 9, 4, 5, 15)); // false

----------------------------------------

TITLE: Creating a TextArea Component with useTextField
DESCRIPTION: Implementation of a multi-line text input component using the useTextField hook with the inputElementType prop set to 'textarea'.

LANGUAGE: TSX
CODE:
import type {AriaTextFieldProps} from '@react-aria/textfield';
import {useTextField} from '@react-aria/textfield';

function TextArea(props: AriaTextFieldProps<HTMLTextAreaElement>) {
  let {label} = props;
  let ref = React.useRef(null);
  let {labelProps, inputProps} = useTextField({...props, inputElementType: 'textarea'}, ref);

  return (
    <div style={{display: 'flex', flexDirection: 'column', width: 200}}>
      <label {...labelProps}>{label}</label>
      <textarea {...inputProps} ref={ref} />
    </div>
  );
}

<TextArea label="Description" />

----------------------------------------

TITLE: Using List with Disallowed Empty Selection
DESCRIPTION: Shows how to configure the List component to disallow empty selection, forcing users to keep at least one item selected at all times.

LANGUAGE: tsx
CODE:
<ExampleList aria-label="List with disallowed empty selection" selectionMode="multiple" defaultSelectedKeys={[2]} disallowEmptySelection />

----------------------------------------

TITLE: LabeledValue with Formatted Number Value
DESCRIPTION: Demonstrates using formatOptions to customize how a numeric value is displayed, in this case as a unit value.

LANGUAGE: tsx
CODE:
<LabeledValue label="File size" value={1.2} formatOptions={{style: 'unit', unit: 'megabyte'}} />

----------------------------------------

TITLE: ActionButton with Static Color for Different Backgrounds
DESCRIPTION: Demonstrates using the staticColor prop to ensure proper contrast when ActionButtons are displayed over colored backgrounds.

LANGUAGE: tsx
CODE:
<Flex wrap gap="size-250">
  <View backgroundColor="static-blue-700" padding="size-500">
    <ActionButton staticColor="white">
      <Edit />
      <Text>Edit</Text>
    </ActionButton>
  </View>
  <View backgroundColor="static-yellow-400" padding="size-500">
    <ActionButton staticColor="black" isQuiet>
      <Edit />
      <Text>Edit</Text>
    </ActionButton>
  </View>
</Flex>

----------------------------------------

TITLE: Configuring Custom First Day of Week in DateRangePicker
DESCRIPTION: Example showing how to set a custom first day of the week in a DateRangePicker calendar using the firstDayOfWeek prop.

LANGUAGE: tsx
CODE:
<MyDateRangePicker label="Date range" firstDayOfWeek="mon" />

----------------------------------------

TITLE: Using the TimeField Component with Controlled and Uncontrolled Values
DESCRIPTION: Example showing how to use the TimeField component with both controlled and uncontrolled time values using the @internationalized/date package for proper time representation.

LANGUAGE: tsx
CODE:
import {Time} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState(new Time(11, 45));

  return (
    <>
      <TimeField
        label="Time (uncontrolled)"
        defaultValue={new Time(11, 45)} />
      <TimeField
        label="Time (controlled)"
        value={value}
        onChange={setValue} />
    </>
  );
}

----------------------------------------

TITLE: CSS Styling for Drop Targets in Table Rows
DESCRIPTION: CSS styles to highlight rows when they become drop targets. The selector targets rows with the data-drop-target attribute and applies an outline and background change.

LANGUAGE: css
CODE:
.react-aria-Row[data-drop-target] {
  outline: 2px solid var(--highlight-background);
  background: var(--highlight-overlay)
}

----------------------------------------

TITLE: ComboBox with Dynamic Options and Selection Tracking
DESCRIPTION: Example showing how to use ComboBox with dynamic data from an array of objects. This demonstrates selection handling with the onSelectionChange callback and automatic ID usage.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, name: 'Aerospace'},
    {id: 2, name: 'Mechanical'},
    {id: 3, name: 'Civil'},
    {id: 4, name: 'Biomedical'},
    {id: 5, name: 'Nuclear'},
    {id: 6, name: 'Industrial'},
    {id: 7, name: 'Chemical'},
    {id: 8, name: 'Agricultural'},
    {id: 9, name: 'Electrical'}
  ];
  let [majorId, setMajorId] = React.useState(null);

  return (
    <>
      <p>Topic id: {majorId}</p>
      <ComboBox
        label="Pick an engineering major"
        defaultItems={options}
        onSelectionChange={setMajorId}>
        {item => <Item>{item.name}</Item>}
      </ComboBox>
    </>
  );
}

----------------------------------------

TITLE: Adding Custom Wrapper for MenuTrigger in React Aria
DESCRIPTION: Example showing how to add a custom wrapper element with styling around a MenuTrigger component, since MenuTrigger itself doesn't render any DOM elements.

LANGUAGE: jsx
CODE:
<MenuTrigger>
  <div className="my-menu-trigger">
    {/* ... */}
  </div>
</MenuTrigger>

----------------------------------------

TITLE: Setting Locale in Provider
DESCRIPTION: Shows how to set the locale for internationalization in a Provider component using application settings.

LANGUAGE: tsx
CODE:
<Provider theme={theme} locale={appSettings.locale}>
  <YourApp />
</Provider>

----------------------------------------

TITLE: ActionMenu with Complex Menu Items Including Icons and Keyboard Shortcuts
DESCRIPTION: Demonstrates how to create more complex menu items with icons and keyboard shortcuts to enhance the visual communication of options.

LANGUAGE: tsx
CODE:
import {Keyboard, Text} from '@react-spectrum/text';
<ActionMenu>
  <Item key="cut" textValue="cut">
    <Cut />
    <Text>Cut</Text>
    <Keyboard>⌘X</Keyboard>
  </Item>
  <Item key="copy" textValue="copy">
    <Copy />
    <Text>Copy</Text>
    <Keyboard>⌘C</Keyboard>
  </Item>
  <Item key="paste" textValue="paste">
    <Paste />
    <Text>Paste</Text>
    <Keyboard>⌘V</Keyboard>
  </Item>
</ActionMenu>

----------------------------------------

TITLE: ActionMenu with Complex Menu Items Including Icons and Keyboard Shortcuts
DESCRIPTION: Demonstrates how to create more complex menu items with icons and keyboard shortcuts to enhance the visual communication of options.

LANGUAGE: tsx
CODE:
import {Keyboard, Text} from '@react-spectrum/text';
<ActionMenu>
  <Item key="cut" textValue="cut">
    <Cut />
    <Text>Cut</Text>
    <Keyboard>⌘X</Keyboard>
  </Item>
  <Item key="copy" textValue="copy">
    <Copy />
    <Text>Copy</Text>
    <Keyboard>⌘C</Keyboard>
  </Item>
  <Item key="paste" textValue="paste">
    <Paste />
    <Text>Paste</Text>
    <Keyboard>⌘V</Keyboard>
  </Item>
</ActionMenu>

----------------------------------------

TITLE: Picker with Avatar Components in Items
DESCRIPTION: Example showing how to incorporate Avatar components in Picker items for user selection. Each item displays a user avatar alongside text.

LANGUAGE: tsx
CODE:
<Picker label="Select a user">
  <Item textValue="User 1">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 1</Text>
  </Item>
  <Item textValue="User 2">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 2</Text>
  </Item>
  <Item textValue="User 3">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 3</Text>
  </Item>
  <Item textValue="User 4">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 4</Text>
  </Item>
</Picker>

----------------------------------------

TITLE: Removing Selected Items from Tree
DESCRIPTION: Example demonstrating how to remove all currently selected items from a tree data structure using the removeSelectedItems method.

LANGUAGE: tsx
CODE:
// Remove all selected items
list.removeSelectedItems();

----------------------------------------

TITLE: Using Slots for Targeting Specific Component Parts
DESCRIPTION: Example of using the slot prop to distinguish between multiple instances of the same component, and targeting them in CSS for styling purposes.

LANGUAGE: tsx
CODE:
<NumberField>
  <Label>Width</Label>
  <Group>
    <Input />
    <Button slot="increment">+</Button>
    <Button slot="decrement">-</Button>
  </Group>
</NumberField>

----------------------------------------

TITLE: Styling Link-based Menu Items with CSS
DESCRIPTION: CSS styling for link-based menu items to ensure they have appropriate cursor and text decoration.

LANGUAGE: css
CODE:
[role=menuitem][href] {
  cursor: pointer;
  text-decoration: none;
}

----------------------------------------

TITLE: HTML Form Integration with Switch Component
DESCRIPTION: Demonstrates how to integrate a Switch component with HTML forms using name and value props.

LANGUAGE: tsx
CODE:
<Switch name="power" value="low">Low power mode</Switch>

----------------------------------------

TITLE: Setting Up Select Testing with React Aria Test Utils
DESCRIPTION: This code snippet shows how to use the testing utilities from @react-aria/test-utils to test Select components. It demonstrates initializing a user interaction model and creating a select tester to test keyboard-based option selection.

LANGUAGE: ts
CODE:
// Select.test.ts
import {render} from '@testing-library/react';
import {User} from '@react-aria/test-utils';

let testUtilUser = new User({interactionType: 'mouse'});
// ...

it('Select can select an option via keyboard', async function () {
  // Render your test component/app and initialize the select tester
  let {getByTestId} = render(
    <Select data-testid="test-select">
     ...
    </Select>
  );
  let selectTester = testUtilUser.createTester('Select', {root: getByTestId('test-select'), interactionType: 'keyboard'});
  let trigger = selectTester.trigger;
  expect(trigger).toHaveTextContent('Select an item');

  await selectTester.selectOption({option: 'Cat'});
  expect(trigger).toHaveTextContent('Cat');
});

----------------------------------------

TITLE: Testing TableView Components with React Spectrum Test Utils
DESCRIPTION: Example of using the TableTester utility from @react-spectrum/test-utils to test TableView functionality. The code demonstrates how to set up tests for row selection toggling in a TableView component, including checking the selected state of rows.

LANGUAGE: ts
CODE:
// TableView.test.ts
import {render, within} from '@testing-library/react';
import {theme} from '@react-spectrum/theme-default';
import {User} from '@react-spectrum/test-utils';

let testUtilUser = new User({interactionType: 'mouse', advanceTimer: jest.advanceTimersByTime});
// ...

it('TableView can toggle row selection', async function () {
  // Render your test component/app and initialize the table tester
  let {getByTestId} = render(
    <Provider theme={defaultTheme}>
      <TableView data-testid="test-table" selectionMode="multiple">
      ...
      </TableView>
    </Provider>
  );
  let tableTester = testUtilUser.createTester('Table', {root: getByTestId('test-table')});
  expect(tableTester.selectedRows).toHaveLength(0);

  await tableTester.toggleSelectAll();
  expect(tableTester.selectedRows).toHaveLength(10);

  await tableTester.toggleRowSelection({row: 2});
  expect(tableTester.selectedRows).toHaveLength(9);
  let checkbox = within(tableTester.rows[2]).getByRole('checkbox');
  expect(checkbox).not.toBeChecked();

  await tableTester.toggleSelectAll();
  expect(tableTester.selectedRows).toHaveLength(10);
  expect(checkbox).toBeChecked();

  await tableTester.toggleSelectAll();
  expect(tableTester.selectedRows).toHaveLength(0);
});

----------------------------------------

TITLE: Configuring TableView with Highlight Selection Style
DESCRIPTION: Example of using the highlight selection style in the PokemonTable component, which hides checkboxes and displays selected rows with a highlighted background.

LANGUAGE: tsx
CODE:
<PokemonTable selectionMode="multiple" selectionStyle="highlight" />

----------------------------------------

TITLE: TextField with Help Text and Validation
DESCRIPTION: Shows how to add description and error messages to TextField components with different validation states.

LANGUAGE: tsx
CODE:
<Flex gap="size-100" wrap>
  <TextField label="Name" defaultValue="John" validationState="valid" description="Enter your name." />
  <TextField label="Name" validationState="invalid" errorMessage="Empty input is not allowed." />
</Flex>

----------------------------------------

TITLE: Over Background Link in React Spectrum
DESCRIPTION: Demonstrates a link designed to be used over a colored background using the View component.

LANGUAGE: tsx
CODE:
<View backgroundColor="positive" padding="size-300">
  <Link variant="overBackground">Learn more here!</Link>
</View>

----------------------------------------

TITLE: RangeSlider Labeling Options
DESCRIPTION: Demonstrates different label positioning options for RangeSlider including default, side, and hidden value labels.

LANGUAGE: tsx
CODE:
<Flex direction="column" maxWidth="size-5000" gap="size-300">
  <RangeSlider label="Jeans price range" formatOptions={{style: 'currency', currency: 'USD'}} defaultValue={{start: 75, end: 100}} />
  <RangeSlider label="Shoes price range" formatOptions={{style: 'currency', currency: 'USD'}} labelPosition="side" defaultValue={{start: 50, end: 100}} />
  <RangeSlider label="Hats price range" formatOptions={{style: 'currency', currency: 'USD'}} showValueLabel={false} defaultValue={{start: 15, end: 30}} />
</Flex>

----------------------------------------

TITLE: Overriding First Day of Week for getWeeksInMonth
DESCRIPTION: Demonstrates how to override the locale's default first day of the week when calculating weeks in a month by providing an explicit firstDayOfWeek parameter.

LANGUAGE: tsx
CODE:
getWeeksInMonth(date, 'en-US', 'mon'); // 5

----------------------------------------

TITLE: Using Custom Text Component within a ListBox
DESCRIPTION: This snippet demonstrates how to use a custom Text component within a ListBox item, replacing the built-in React Aria Components Text component.

LANGUAGE: tsx
CODE:
<ListBox>
  <ListBoxItem>
    <MyText slot="label">Option</MyText>
  </ListBoxItem>
  {/* ... */}
</ListBox>

----------------------------------------

TITLE: Implementing Single Selection in React Spectrum ComboBox Component
DESCRIPTION: This example shows how to implement controlled single selection behavior using the singular selectedKey and onSelectionChange props. It demonstrates the pattern for components that only support selecting one item at a time.

LANGUAGE: tsx
CODE:
let [selectedKey, setSelectedKey] = useState(null);

<ComboBox selectedKey={selectedKey} onSelectionChange={setSelectedKey}>
  <Item key="one">One</Item>
  <Item key="two">Two</Item>
  <Item key="three">Three</Item>
</ComboBox>

----------------------------------------

TITLE: Creating a Read-Only DateField
DESCRIPTION: Shows how to make a DateField read-only using the isReadOnly prop, which makes the value immutable but keeps the field focusable.

LANGUAGE: tsx
CODE:
<DateField label="Birth date" value={today(getLocalTimeZone())} isReadOnly />

----------------------------------------

TITLE: TimeField with Local Time Conversion
DESCRIPTION: Shows how to parse an absolute time into the user's local time zone using parseAbsoluteToLocal.

LANGUAGE: tsx
CODE:
import {parseAbsoluteToLocal} from '@internationalized/date';

<TimeField
  label="Event time"
  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}
/>

----------------------------------------

TITLE: Creating a SelectAllListBox Component with React Aria Contexts
DESCRIPTION: This snippet demonstrates how to create a SelectAllListBox component that leverages CheckboxContext and ListBoxContext to enable selecting or deselecting all items in a ListBox with a checkbox.

LANGUAGE: tsx
CODE:
import {CheckboxContext, ListBoxContext} from 'react-aria-components';

function SelectAllListBox({children}) {
  let [selectedKeys, onSelectionChange] = React.useState<Selection>(new Set());
  let isSelected = selectedKeys === 'all';
  let onChange = (isSelected: boolean) => {
    onSelectionChange(isSelected ? 'all' : new Set());
  };

  return (
    <CheckboxContext.Provider value={{isSelected, onChange}}>
      <ListBoxContext.Provider value={{selectedKeys, onSelectionChange}}>
        {children}
      </ListBoxContext.Provider>
    </CheckboxContext.Provider>
  );
}

----------------------------------------

TITLE: TagGroup Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This extensive comparison shows that Spectrum 2 supports many properties for TagGroup including size, isEmphasized, groupActionLabel, onGroupAction, selectionBehavior, disabledKeys, selectionMode, disallowEmptySelection, selectedKeys, defaultSelectedKeys, onSelectionChange, and slot, while RSP v3 has actionLabel, onAction, and validationState properties not available in S2.

LANGUAGE: typescript
CODE:
size | 🟢 `'L' \| 'M' \| 'S'` | –
isEmphasized | 🟢 `boolean` | –
actionLabel | – | 🔴 `string`
onAction | – | 🔴 `() => void`
groupActionLabel | 🟢 `string` | –
onGroupAction | 🟢 `() => void` | –
selectionBehavior | 🟢 `SelectionBehavior` | –
disabledKeys | 🟢 `Iterable<Key>` | –
selectionMode | 🟢 `SelectionMode` | –
disallowEmptySelection | 🟢 `boolean` | –
selectedKeys | 🟢 `'all' \| Iterable<Key>` | –
defaultSelectedKeys | 🟢 `'all' \| Iterable<Key>` | –
onSelectionChange | 🟢 `(Selection) => void` | –
slot | 🟢 `null \| string` | –
validationState | – | 🔴 `ValidationState`

----------------------------------------

TITLE: Package Reference in Markdown
DESCRIPTION: A simple markdown reference to the @react-spectrum/meter package, indicating it is part of the React Spectrum library and directing users to the main repository for additional information.

LANGUAGE: markdown
CODE:
# @react-spectrum/meter

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: LabeledValue with Numeric Range
DESCRIPTION: Shows how to display a range of numeric values with currency formatting options.

LANGUAGE: tsx
CODE:
<LabeledValue label="Price range" value={{start: 150, end: 400}} formatOptions={{style: 'currency', currency: 'USD', minimumFractionDigits: 0}} />

----------------------------------------

TITLE: HTML Form Integration with ColorField
DESCRIPTION: Shows how to integrate ColorField with HTML forms using the name property for server submission.

LANGUAGE: tsx
CODE:
<ColorField label="Color" name="color" />

----------------------------------------

TITLE: Package Reference in Markdown
DESCRIPTION: A simple markdown reference to the @react-spectrum/meter package, indicating it is part of the React Spectrum library and directing users to the main repository for additional information.

LANGUAGE: markdown
CODE:
# @react-spectrum/meter

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Creating ModalTrigger Component with useOverlayTrigger in React
DESCRIPTION: Implements a ModalTrigger component using useOverlayTriggerState and useOverlayTrigger hooks to manage state and event handling for showing/hiding modal overlays.

LANGUAGE: tsx
CODE:
import {useOverlayTriggerState} from '@react-stately/overlays';
import {useOverlayTrigger} from '@react-aria/overlays';

// Reuse the Button from your component library. See below for details.
import {Button} from 'your-component-library';

function ModalTrigger({label, children, ...props}) {
  let state = useOverlayTriggerState(props);
  let {triggerProps, overlayProps} = useOverlayTrigger({type: 'dialog'}, state);

  return <>
    <Button {...triggerProps}>Open Dialog</Button>
    {state.isOpen &&
      <Modal {...props} state={state}>
        {React.cloneElement(children(state.close), overlayProps)}
      </Modal>
    }
  </>;
}

----------------------------------------

TITLE: ActionMenu with Dynamic Sections from Hierarchical Data
DESCRIPTION: Shows how to create sections dynamically from a hierarchical data structure, mapping parent items to sections and their children to menu items.

LANGUAGE: tsx
CODE:
function Example() {
  let openWindows = [
    {
      name: 'Reversion',
      id: 'reversion',
      children: [
        {id: 'undo', name: 'Undo'},
        {id: 'redo', name: 'Redo'}
      ]
    },
    {
      name: 'Clipboard',
      id: 'clipboard',
      children: [
        {id: 'cut', name: 'Cut'},
        {id: 'copy', name: 'Copy'},
        {id: 'paste', name: 'Paste'}
      ]
    }
  ];

  return (
    <ActionMenu
      items={openWindows}>
      {item => (
        <Section items={item.children} title={item.name}>
          {item => <Item>{item.name}</Item>}
        </Section>
      )}
    </ActionMenu>
  );
}

----------------------------------------

TITLE: Basic Badge Example in React Spectrum
DESCRIPTION: A simple example showing a Badge with positive variant and a text label.

LANGUAGE: tsx
CODE:
<Badge variant="positive">Licensed</Badge>

----------------------------------------

TITLE: Converting CalendarDateTime to String
DESCRIPTION: Converting a CalendarDateTime object to an ISO 8601 formatted string using the toString method. This produces a standard date-time representation.

LANGUAGE: tsx
CODE:
let date = new CalendarDateTime(2022, 2, 3, 9, 45);
date.toString(); // '2022-02-03T09:45:00'

----------------------------------------

TITLE: Importing DropZone and Related Components in React
DESCRIPTION: Basic imports for using the DropZone component along with supporting components like Heading, Content, IllustratedMessage, and Button.

LANGUAGE: jsx
CODE:
import {DropZone} from '@react-spectrum/dropzone';
import {Heading} from '@react-spectrum/text';
import {Content} from '@react-spectrum/view';
import {IllustratedMessage} from '@react-spectrum/illustratedmessage';
import {Button} from '@react-spectrum/button';

----------------------------------------

TITLE: Using a Custom Value Scale with the Meter Component
DESCRIPTION: Example showing how to customize the value scale of the Meter component by setting different minimum and maximum values instead of using the default 0-100 range.

LANGUAGE: TSX
CODE:
<Meter
  label="Widgets Used"
  minValue={50}
  maxValue={150}
  value={100} />

----------------------------------------

TITLE: Basic ListBox Example with Static Items
DESCRIPTION: Demonstrates a simple ListBox implementation with static Item elements for alignment options. It shows how to create a basic list with selectable options.

LANGUAGE: tsx
CODE:
<ListBox width="size-2400" aria-label="Alignment">
  <Item>Left</Item>
  <Item>Middle</Item>
  <Item>Right</Item>
</ListBox>

----------------------------------------

TITLE: Disabled ActionButton
DESCRIPTION: Shows how to render a disabled ActionButton which cannot be interacted with.

LANGUAGE: tsx
CODE:
<ActionButton isDisabled>Action!</ActionButton>

----------------------------------------

TITLE: ColorSwatch with Different Sizes
DESCRIPTION: Example demonstrating the available size options for ColorSwatch components.

LANGUAGE: tsx
CODE:
<Flex gap="size-100">
  <ColorSwatch color="#ff0" size="XS" />
  <ColorSwatch color="#ff0" size="S" />
  <ColorSwatch color="#ff0" size="M" />
  <ColorSwatch color="#ff0" size="L" />
</Flex>

----------------------------------------

TITLE: Setting Granularity and Placeholder Time Zone
DESCRIPTION: Demonstrates how to configure the granularity of a DateRangePicker and set a specific time zone for the placeholder value using the now function.

LANGUAGE: tsx
CODE:
import {now} from '@internationalized/date';

<DateRangePicker
  label="Date range"
  granularity="second" />
<DateRangePicker
  label="Date range"
  placeholderValue={now('America/New_York')}
  granularity="second" />

----------------------------------------

TITLE: Targeting Component States with CSS Data Attributes
DESCRIPTION: Example of styling a Link component based on its current state using CSS data attributes.

LANGUAGE: css
CODE:
.react-aria-Link[data-current] {
  /* ... */
}

----------------------------------------

TITLE: Rendering ExampleList Component with Styling
DESCRIPTION: Renders the ExampleList component with a top margin of 80 pixels. This component will display a list of examples related to styling and animating React Aria Components.

LANGUAGE: JSX
CODE:
<ExampleList style={{marginTop: 80}} />

----------------------------------------

TITLE: Styling Directory Items with CSS
DESCRIPTION: CSS styles for directory items in the list, providing a proper layout with icons and text. Styles handle alignment, spacing, and text overflow.

LANGUAGE: css
CODE:
.dir-item {
  display: flex;
  align-items: center;
  gap: 8px;
}

.dir-item {
  flex: 0 0 auto;
}

.dir-item {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

----------------------------------------

TITLE: Customizing Pagination Behavior in RangeCalendar
DESCRIPTION: This example demonstrates how to customize the pagination behavior of a RangeCalendar with multiple visible months by setting the pageBehavior prop to 'single'.

LANGUAGE: tsx
CODE:
<div style={{maxWidth: '100%', overflow: 'auto'}}>
  <RangeCalendar aria-label="Trip dates" visibleMonths={3} pageBehavior="single" />
</div>

----------------------------------------

TITLE: NumberField with Minimum Value Constraint
DESCRIPTION: Shows how to set a minimum value constraint on a NumberField to limit input to non-negative values.

LANGUAGE: tsx
CODE:
<NumberField
  label="Enter your age"
  minValue={0} />

----------------------------------------

TITLE: Custom Label Position in React Spectrum Picker
DESCRIPTION: Example showing how to change label alignment and position with the labelPosition and labelAlign props. This allows placing the label to the side and aligning it to the end.

LANGUAGE: tsx
CODE:
<Picker label="Choose frequency" labelPosition="side" labelAlign="end">
  <Item key="rarely">Rarely</Item>
  <Item key="sometimes">Sometimes</Item>
  <Item key="always">Always</Item>
</Picker>

----------------------------------------

TITLE: Handling Daylight Saving Transitions in toZoned Conversions
DESCRIPTION: Examples of handling ambiguous times during daylight saving transitions when converting to ZonedDateTime. This shows how to use the disambiguation parameter to control the behavior for spring forward and fall back transitions.

LANGUAGE: tsx
CODE:
// A "spring forward" transition
let date = new CalendarDateTime(2020, 3, 8, 2);
toZoned(date, 'America/Los_Angeles'); // 2020-03-08T03:00:00-07:00[America/Los_Angeles]
toZoned(date, 'America/Los_Angeles', 'earlier'); // 2020-03-08T01:00:00-08:00[America/Los_Angeles]
toZoned(date, 'America/Los_Angeles', 'later'); // 2020-03-08T03:00:00-07:00[America/Los_Angeles]

// A "fall back" transition
let date = new CalendarDateTime(2020, 11, 1, 1);
toZoned(date, 'America/Los_Angeles'); // 2020-11-01T01:00:00-07:00[America/Los_Angeles]
toZoned(date, 'America/Los_Angeles', 'earlier'); // 2020-11-01T01:00:00-07:00[America/Los_Angeles]
toZoned(date, 'America/Los_Angeles', 'later'); // 2020-11-01T01:00:00-08:00[America/Los_Angeles]

----------------------------------------

TITLE: Informative Variant InlineAlert Example in React Spectrum
DESCRIPTION: Demonstrates the informative variant of InlineAlert, used when providing general information to users.

LANGUAGE: tsx
CODE:
<InlineAlert variant="info">
  <Heading>Accepted Payment Methods</Heading>
  <Content>Only major credit cards are accepted for payment. Direct debit is currently unavailable.</Content>
</InlineAlert>

----------------------------------------

TITLE: Creating a Horizontal Stack Layout with Flex in React Spectrum
DESCRIPTION: Shows how to create a horizontal stack layout using the Flex component with row direction.

LANGUAGE: tsx
CODE:
<Flex direction="row" height="size-800" gap="size-100">
  <View backgroundColor="celery-600" width="size-800" />
  <View backgroundColor="blue-600" width="size-800" />
  <View backgroundColor="magenta-600" width="size-800" />
</Flex>

----------------------------------------

TITLE: Controlling Menu State with React Hooks in Picker Component
DESCRIPTION: Example demonstrating how to control the open state of a Picker component using React's useState hook. The component allows selecting frequency options and ties the open state to a state variable.

LANGUAGE: tsx
CODE:
function Example() {
  let [open, setOpen] = React.useState(false);

  return (
    <Picker
      label="Frequency"
      isOpen={open}
      onOpenChange={setOpen}>
      <Item key="rarely">Rarely</Item>
      <Item key="sometimes">Sometimes</Item>
      <Item key="always">Always</Item>
    </Picker>
  );
}

----------------------------------------

TITLE: Implementing an Accessible Contact Picker Component with useField in React
DESCRIPTION: This example demonstrates how to use the useField hook to create an accessible form field component with a label, description, and error message. The hook generates the proper ARIA attributes to associate these elements and provides props to be spread onto the respective elements.

LANGUAGE: tsx
CODE:
import {useField} from '@react-aria/label';

function ContactPicker(props) {
  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField(props);

  return (
    <div style={{display: 'flex', flexDirection: 'column', width: 200, marginBottom: 20}}>
      <label {...labelProps}>{props.label}</label>
      <select {...fieldProps}>
        <option>Email</option>
        <option>Phone</option>
        <option>Fax</option>
        <option>Carrier pigeon</option>
      </select>
      {props.description &&
        <div {...descriptionProps} style={{fontSize: 12}}>{props.description}</div>
      }
      {props.errorMessage &&
        <div {...errorMessageProps} style={{color: 'red', fontSize: 12}}>{props.errorMessage}</div>
      }
    </div>
  );
}

<ContactPicker
  label="Preferred contact method"
  description="Select the best way to contact you about issues with your account." />

<ContactPicker
  label="Preferred contact method"
  errorMessage="Select a contact method." />

----------------------------------------

TITLE: Adding Validation to SearchField with FieldError Component
DESCRIPTION: This example shows how to implement form validation in a SearchField by adding a FieldError component as a child. It requires the field to be filled and displays appropriate error messages.

LANGUAGE: tsx
CODE:
import {Form, FieldError} from 'react-aria-components';

<Form>
  <SearchField name="search" isRequired>
    <Label>Search</Label>
    <Input />
    <Button>✕</Button>
    <FieldError />
  </SearchField>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Customizing Value Formatting in the Meter Component
DESCRIPTION: Example demonstrating how to use the formatOptions prop to change how the value is displayed in the Meter component, using Intl.NumberFormat options to show the value as Japanese Yen.

LANGUAGE: TSX
CODE:
<Meter
  label="Currency"
  formatOptions={{style: 'currency', currency: 'JPY'}}
  value={60} />

----------------------------------------

TITLE: Form Component CSS Styling
DESCRIPTION: CSS styling for the Form component, displaying children in a column layout with spacing.

LANGUAGE: css
CODE:
.react-aria-Form {
  display: flex;
  flex-direction: column;
  align-items: start;
  gap: 8px;
}

----------------------------------------

TITLE: Implementing a Removable Context Provider for TagGroup
DESCRIPTION: A component that provides context to both ToggleButton and TagGroup, enabling edit mode functionality. The component toggles the onRemove handler based on the button's selected state.

LANGUAGE: tsx
CODE:
import {ToggleButtonContext, TagGroupContext} from 'react-aria-components';

function Removable({children, onRemove}) {
  let [isSelected, onChange] = React.useState(false);
  return (
    <ToggleButtonContext.Provider value={{isSelected, onChange}}>
      <TagGroupContext.Provider value={{onRemove: isSelected && onRemove}}>
        {children}
      </TagGroupContext.Provider>
    </ToggleButtonContext.Provider>
  );
}

----------------------------------------

TITLE: Disabled Switch Component
DESCRIPTION: Shows how to render a disabled Switch component that cannot be interacted with.

LANGUAGE: tsx
CODE:
<Switch isDisabled>Switch Label</Switch>

----------------------------------------

TITLE: Configuring Object Fit for Images in React Spectrum
DESCRIPTION: Shows how to use the objectFit property to control how the image fits within its container, with the image set to cover the available space.

LANGUAGE: tsx
CODE:
<Flex width="100%" height="200px">
  <Image
    src="https://i.imgur.com/c3gTKSJ.jpg"
    alt="Eiffel Tower at sunset"
    objectFit="cover" />
</Flex>

----------------------------------------

TITLE: Switch Component with Event Handling
DESCRIPTION: Shows how to use the onChange event handler with a Switch component to respond to state changes.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelection] = React.useState(false);

  return (
    <>
      <Switch onChange={setSelection}>
        Switch Label
      </Switch>
      <div>The Switch is on: {selected.toString()}</div>
    </>
  );
}

----------------------------------------

TITLE: Importing and Basic Usage of Button Component in React
DESCRIPTION: Demonstrates how to import and use the Button component from React Aria Components with a simple press handler that shows an alert.

LANGUAGE: tsx
CODE:
import {Button} from 'react-aria-components';

<Button onPress={() => alert('Hello world!')}>Press me</Button>

----------------------------------------

TITLE: Adding Links to Table Rows in React Spectrum
DESCRIPTION: Demonstrates how to make table rows function as links by adding the href prop to Row components. The example creates a bookmarks table with clickable rows that open external websites.

LANGUAGE: tsx
CODE:
<Table aria-label="Bookmarks" selectionMode="multiple">
  <TableHeader>
    <Column isRowHeader>Name</Column>
    <Column>URL</Column>
    <Column>Date added</Column>
  </TableHeader>
  <TableBody>
    <Row href="https://adobe.com/" target="_blank">
      <Cell>Adobe</Cell>
      <Cell>https://adobe.com/</Cell>
      <Cell>January 28, 2023</Cell>
    </Row>
    <Row href="https://google.com/" target="_blank">
      <Cell>Google</Cell>
      <Cell>https://google.com/</Cell>
      <Cell>April 5, 2023</Cell>
    </Row>
    <Row href="https://nytimes.com/" target="_blank">
      <Cell>New York Times</Cell>
      <Cell>https://nytimes.com/</Cell>
      <Cell>July 12, 2023</Cell>
    </Row>
  </TableBody>
</Table>

----------------------------------------

TITLE: Link with HTML Navigation in React Aria
DESCRIPTION: Example of a Link component with an href property that renders as a native HTML anchor element with external navigation.

LANGUAGE: tsx
CODE:
<Link href="https://adobe.com" target="_blank">Adobe.com</Link>

----------------------------------------

TITLE: Implementing ComboBox with Validation and Help Text
DESCRIPTION: Example of a ComboBox with validation states, description, and error messages that change based on the selected option, demonstrating the validationState prop's behavior.

LANGUAGE: tsx
CODE:
function Example() {
    let [animalId, setAnimalId] = React.useState(null);
    let options = [
      {id: 1, name: 'Aardvark'},
      {id: 2, name: 'Cat'},
      {id: 3, name: 'Dog'},
      {id: 4, name: 'Kangaroo'},
      {id: 5, name: 'Koala'},
      {id: 6, name: 'Penguin'},
      {id: 7, name: 'Snake'},
      {id: 8, name: 'Turtle'},
      {id: 9, name: 'Wombat'}
    ];
  let isValid = React.useMemo(() => animalId !== 2 && animalId !== 7, [animalId]);

  return (
    <ComboBox
      validationState={!animalId ? undefined : isValid ? 'valid' : 'invalid'}
      label="Favorite animal"
      description="Pick your favorite animal, you will be judged."
      errorMessage={animalId === 2 ? 'The author of this example is a dog person.' : 'Oh no it\'s a snake! Choose anything else.'}
      items={options}
      selectedKey={animalId}
      onSelectionChange={selected => setAnimalId(selected)}>
      {item => <Item>{item.name}</Item>}
    </ComboBox>
  );
}

----------------------------------------

TITLE: Importing StatusLight Component in React Spectrum
DESCRIPTION: Shows how to import the StatusLight component from the React Spectrum library.

LANGUAGE: jsx
CODE:
import {StatusLight} from '@react-spectrum/statuslight';

----------------------------------------

TITLE: Converting CalendarDateTime to String
DESCRIPTION: Demonstrates converting a CalendarDateTime object to an ISO 8601 formatted string using the toString method.

LANGUAGE: tsx
CODE:
let date = new CalendarDateTime(2022, 2, 3, 9, 15);
date.toString(); // '2022-02-03T09:15:00'

----------------------------------------

TITLE: ContextualHelp with Custom Placement in React Spectrum
DESCRIPTION: Example showing how to customize the placement of the ContextualHelp popover using the 'placement' prop set to 'top start'.

LANGUAGE: tsx
CODE:
<ContextualHelp variant="info" placement="top start">
  <Heading>Placement</Heading>
  <Content><Text>The placement of this contextual help popover has been customized to use top start.</Text></Content>
</ContextualHelp>

----------------------------------------

TITLE: ContextualHelp with Event Handling in React Spectrum
DESCRIPTION: Example demonstrating the use of the onOpenChange event handler to track the open/closed state of the ContextualHelp popover.

LANGUAGE: tsx
CODE:
function Example() {
  let [state, setState] = React.useState(false);

  return (
    <Flex alignItems="center" gap="size-100">
      <ContextualHelp variant="info" onOpenChange={(isOpen) => setState(isOpen)}>
        <Heading>Permission required</Heading>
        <Content><Text>Your admin must grant you permission before you can create a segment.</Text></Content>
      </ContextualHelp>
      <Text>Current open state: {state.toString()}</Text>
    </Flex>
  );
}

----------------------------------------

TITLE: Setting Minimum Date Validation with DateField
DESCRIPTION: This example demonstrates how to use the minValue prop for date validation, accepting only dates after today. This provides built-in validation that marks the field as invalid when an out-of-range date is entered.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<DateField
  label="Appointment date"
  minValue={today(getLocalTimeZone())}
  defaultValue={parseDate('2022-02-03')} />

----------------------------------------

TITLE: Customizing Hour Cycle in DatePicker
DESCRIPTION: Example showing how to override the default hour format in a DatePicker by setting the hourCycle prop to force 24-hour time display.

LANGUAGE: tsx
CODE:
<MyDatePicker
  label="Appointment time"
  granularity="minute"
  hourCycle={24} />

----------------------------------------

TITLE: Creating Nested Flex Layouts in React Spectrum
DESCRIPTION: Demonstrates how to nest Flex components to create more complex layouts, using the flex prop to expand an element to fill remaining space.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-100">
  <View backgroundColor="celery-600" height="size-800" />
  <Flex direction="row" height="size-3000" gap="size-100">
    <View backgroundColor="indigo-600" width="size-2000" />
    <View backgroundColor="seafoam-600" flex />
  </Flex>
  <View backgroundColor="magenta-600" height="size-800" />
</Flex>

----------------------------------------

TITLE: Styling Horizontal RadioGroup with CSS
DESCRIPTION: CSS for styling a RadioGroup with horizontal orientation using flexbox direction and alignment properties.

LANGUAGE: css
CODE:
.react-aria-RadioGroup {
  &[data-orientation=horizontal] {
    flex-direction: row;
    align-items: center;
  }
}

----------------------------------------

TITLE: Quiet Variant of ActionButton
DESCRIPTION: Demonstrates the quiet visual variant of the ActionButton, which has a more subtle appearance.

LANGUAGE: tsx
CODE:
<ActionButton isQuiet>Action!</ActionButton>

----------------------------------------

TITLE: CSS Styling for Meter Component
DESCRIPTION: CSS styles for the Meter component defining layout, colors, and responsive behavior including support for high contrast mode.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Meter {
  --fill-color: forestgreen;

  display: grid;
  grid-template-areas: "label value"
                       "bar bar";
  grid-template-columns: 1fr auto;
  gap: 4px;
  width: 250px;
  color: var(--text-color);

  .value {
    grid-area: value;
  }

  .bar {
    grid-area: bar;
    box-shadow: inset 0px 0px 0px 1px var(--border-color);
    forced-color-adjust: none;
    height: 10px;
    border-radius: 5px;
    overflow: hidden;
  }

  .fill {
    background: var(--fill-color);
    height: 100%;
  }
}

@media (forced-colors: active) {
  .react-aria-Meter {
    --fill-color: Highlight;
  }
}

----------------------------------------

TITLE: Implementing a FieldGroup Component with DatePickerContext
DESCRIPTION: Example demonstrating how to create a FieldGroup component that provides shared properties to multiple DatePickers using context, including validation states and ARIA attributes.

LANGUAGE: tsx
CODE:
import {DatePickerContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface FieldGroupProps {
  title?: string,
  children?: React.ReactNode,
  errorMessage?: string
}

function FieldGroup({title, children, errorMessage}: FieldGroupProps) {
  let errorId = useId();
  return (
    <fieldset>
      <legend>{title}</legend>
      <DatePickerContext.Provider value={{
        isInvalid: !!errorMessage,
        'aria-describedby': errorMessage ? errorId : undefined
      }}>
        {children}
      </DatePickerContext.Provider>
      {errorMessage && <small id={errorId} className="invalid">{errorMessage}</small>}
    </fieldset>
  );
}

<FieldGroup title="Dates" errorMessage="Tickets must go on sale before event.">
  <MyDatePicker label="Event date" defaultValue={parseDate('2023-07-12')} />
  <MyDatePicker label="Ticket sale date" defaultValue={parseDate('2023-08-03')} />
</FieldGroup>

----------------------------------------

TITLE: LabeledValue with Contextual Help
DESCRIPTION: Shows how to add contextual help information to a LabeledValue using the ContextualHelp component.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<LabeledValue
  label="Aperture"
  value="f/1.5"
  contextualHelp={
    <ContextualHelp>
      <Heading>What is the aperture?</Heading>
      <Content>The aperture setting controls the amount of light reaching the image sensor.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Setting Minimum Value Constraints on DateRangePicker
DESCRIPTION: Example demonstrating how to use the minValue prop to restrict date selection to dates after today, implementing built-in validation that prevents users from selecting invalid dates.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<DateRangePicker
  label="Trip dates"
  minValue={today(getLocalTimeZone())}
  defaultValue={{
    start: parseDate('2022-02-03'),
    end: parseDate('2022-05-03')
  }} />

----------------------------------------

TITLE: Importing and Basic Usage of Button Component in React
DESCRIPTION: Demonstrates how to import and use the Button component from React Aria Components with a simple press handler that shows an alert.

LANGUAGE: tsx
CODE:
import {Button} from 'react-aria-components';

<Button onPress={() => alert('Hello world!')}>Press me</Button>

----------------------------------------

TITLE: Implementing Hover Interactions with useHover in React
DESCRIPTION: Example demonstrating how to use the useHover hook to handle hover events and update UI based on hover state. The component logs hover start and end events with the pointer type and changes background color when hovered.

LANGUAGE: tsx
CODE:
import {useHover} from '@react-aria/interactions';

function Example() {
  let [events, setEvents] = React.useState([]);
  let {hoverProps, isHovered} = useHover({
    onHoverStart: e => setEvents(
      events => [...events, `hover start with ${e.pointerType}`]
    ),
    onHoverEnd: e => setEvents(
      events => [...events, `hover end with ${e.pointerType}`]
    )
  });

  return (
    <>
      <div
        {...hoverProps}
        style={{
          background: isHovered ? 'darkgreen' : 'green',
          color: 'white',
          display: 'inline-block',
          padding: 4,
          cursor: 'pointer'
        }}
        role="button"
        tabIndex={0}>
        Hover me!
      </div>
      <ul
        style={{
          maxHeight: '200px',
          overflow: 'auto'
        }}>
        {events.map((e, i) => <li key={i}>{e}</li>)}
      </ul>
    </>
  );
}

----------------------------------------

TITLE: Large Size Breadcrumbs in React Spectrum
DESCRIPTION: Implementation of Breadcrumbs with the default large size variation using the size prop with value 'L'.

LANGUAGE: tsx
CODE:
<Breadcrumbs size="L">
  <Item key="home">Home</Item>
  <Item key="trendy">Trendy</Item>
</Breadcrumbs>

----------------------------------------

TITLE: Implementing Modal and ModalTrigger Components for Dialog Overlays
DESCRIPTION: Implementation of Modal and ModalTrigger components that work with the Dialog component. The Modal uses useModalOverlay to handle overlay behavior, while ModalTrigger manages the state and trigger interactions.

LANGUAGE: tsx
CODE:
import {useOverlayTriggerState} from '@react-stately/overlays';
import {Overlay, useModalOverlay, useOverlayTrigger} from '@react-aria/overlays';

function Modal({state, children, ...props}) {
  let ref = React.useRef(null);
  let {modalProps, underlayProps} = useModalOverlay(props, state, ref);

  return (
    <Overlay>
      <div
        style={{
          position: 'fixed',
          zIndex: 100,
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          background: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'
        }}
        {...underlayProps}>
        <div
          {...modalProps}
          ref={ref}
          style={{
            background: 'var(--page-background)',
            border: '1px solid gray'
          }}>
          {children}
        </div>
      </div>
    </Overlay>
  );
}

function ModalTrigger({label, children, ...props}) {
  let state = useOverlayTriggerState(props);
  let {triggerProps, overlayProps} = useOverlayTrigger({type: 'dialog'}, state);

  return <>
    <Button {...triggerProps}>{label}</Button>
    {state.isOpen &&
      <Modal state={state}>
        {React.cloneElement(children(state.close), overlayProps)}
      </Modal>
    }
  </>;
}

----------------------------------------

TITLE: Hiding Time Zone in DatePicker
DESCRIPTION: Example showing how to hide the time zone abbreviation in a DatePicker when working with ZonedDateTime values.

LANGUAGE: tsx
CODE:
<MyDatePicker
  label="Appointment time"
  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}
  hideTimeZone />

----------------------------------------

TITLE: Accessible Icon Labeling for Screen Readers
DESCRIPTION: This example demonstrates how to make a standalone icon accessible to screen readers by providing an appropriate aria-label attribute.

LANGUAGE: tsx
CODE:
import LockClosed from '@spectrum-icons/workflow/LockClosed';

<LockClosed aria-label="Locked" />

----------------------------------------

TITLE: Importing Flex Component in React Spectrum
DESCRIPTION: Shows how to import the Flex component from React Spectrum layout package along with the View component for use in layouts.

LANGUAGE: jsx
CODE:
import {Flex} from '@react-spectrum/layout';
import {View} from '@react-spectrum/view';

----------------------------------------

TITLE: Creating a Reusable ColorSlider Component
DESCRIPTION: Example of creating a reusable ColorSlider wrapper component that encapsulates the DOM structure, styling, and logic. It includes a customizable label prop and demonstrates how to create a checkerboard pattern for transparency visualization.

LANGUAGE: tsx
CODE:
import type {ColorSliderProps} from 'react-aria-components';

interface MyColorSliderProps extends ColorSliderProps {
  label?: string
}

export function MyColorSlider({label, ...props}: MyColorSliderProps) {
  return (
    <ColorSlider {...props}>
      <Label>{label}</Label>
      <SliderOutput />
      <SliderTrack 
        style={({defaultStyle}) => ({
          background: `${defaultStyle.background},
            repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`
        })}>
        <ColorThumb />
      </SliderTrack>
    </ColorSlider>
  );
}

<MyColorSlider label="Red Opacity" defaultValue="#f00" channel="alpha" />

----------------------------------------

TITLE: Getting Calendar Identifiers from Locale Information
DESCRIPTION: Demonstrates how to obtain calendar identifiers from locale strings using the Intl.DateTimeFormat API and create corresponding Calendar objects.

LANGUAGE: tsx
CODE:
// Get the calendar identifier for the current user.
let calendarIdentifier = new Intl.DateTimeFormat().resolvedOptions().calendar; // e.g. 'gregory'
createCalendar(calendarIdentifier); // new GregorianCalendar()

// Language and region provided, calendar inferred.
let calendarIdentifier = new Intl.DateTimeFormat('th-TH').resolvedOptions().calendar; // 'buddhist'
createCalendar(calendarIdentifier); // new BuddhistCalendar()

// Calendar system set explicitly.
let calendarIdentifier = new Intl.DateTimeFormat('hi-IN-u-ca-indian').resolvedOptions().calendar; // 'indian'
createCalendar(calendarIdentifier); // new IndianCalendar()

----------------------------------------

TITLE: Importing Menu Components from React Spectrum
DESCRIPTION: Shows the necessary imports for using the Menu components in React Spectrum, including ActionButton, icons, and the Menu-related components.

LANGUAGE: jsx
CODE:
import {ActionButton} from '@react-spectrum/button'
import Copy from '@spectrum-icons/workflow/Copy';
import Cut from '@spectrum-icons/workflow/Cut';
import {Item, Menu, MenuTrigger, Section} from '@react-spectrum/menu';
import Paste from '@spectrum-icons/workflow/Paste';

----------------------------------------

TITLE: Importing ListView Component in React Spectrum
DESCRIPTION: Import statements for ListView component and related components used in examples.

LANGUAGE: jsx
CODE:
import {ActionMenu} from '@react-spectrum/menu';
import Delete from '@spectrum-icons/workflow/Delete';
import Edit from '@spectrum-icons/workflow/Edit';
import {Flex} from '@react-spectrum/layout';
import {Heading, Text} from '@react-spectrum/text';
import {Image} from '@react-spectrum/image';
import {Item, ListView} from '@react-spectrum/list';

----------------------------------------

TITLE: Creating a CalendarDate with Constructor in TypeScript
DESCRIPTION: Creates a CalendarDate object representing February 3rd, 2022 in the Gregorian calendar system using the constructor approach.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

let date = new CalendarDate(2022, 2, 3);

----------------------------------------

TITLE: Basic RangeSlider Implementation in React Spectrum
DESCRIPTION: Shows a simple implementation of the RangeSlider component with a label and default start and end values.

LANGUAGE: tsx
CODE:
<RangeSlider label="Range" defaultValue={{start: 12, end: 36}} />

----------------------------------------

TITLE: Styling Popovers with CSS
DESCRIPTION: CSS styles for the popover component, including styles for the underlay, popover container, and directional arrow. The styles handle different arrow placements (top, bottom, left, right).

LANGUAGE: css
CODE:
.underlay {
  position: fixed;
  inset: 0;
}

.popover {
  background: var(--page-background);
  border: 1px solid var(--spectrum-global-color-gray-400);
  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);
  border-radius: 6px;
}

.arrow {
  position: absolute;
  fill: var(--page-background);
  stroke: var(--spectrum-global-color-gray-400);
  stroke-width: 1px;
  width: 12px;
  height: 12px;
}

.arrow[data-placement=top] {
  top: 100%;
  transform: translateX(-50%);
}

.arrow[data-placement=bottom] {
  bottom: 100%;
  transform: translateX(-50%) rotate(180deg);
}

.arrow[data-placement=left] {
  left: 100%;
  transform: translateY(-50%) rotate(-90deg);
}

.arrow[data-placement=right] {
  right: 100%;
  transform: translateY(-50%) rotate(90deg);
}

----------------------------------------

TITLE: Accessible Switch Without Visible Label
DESCRIPTION: Shows how to create an accessible Switch component using aria-label when a visible label is not needed.

LANGUAGE: tsx
CODE:
<Switch aria-label="Low power mode" />

----------------------------------------

TITLE: SearchField with Event Handling
DESCRIPTION: Shows how to implement onChange, onSubmit, and onClear handlers to update state based on user interactions with the SearchField.

LANGUAGE: tsx
CODE:
function Example() {
  let [currentText, setCurrentText] = React.useState('');
  let [submittedText, setSubmittedText] = React.useState('');

  return (
    <div>
      <SearchField
        onClear={() => setCurrentText('')}
        onChange={setCurrentText}
        onSubmit={setSubmittedText}
        label="Your text"
        value={currentText}
      />
      <pre>Mirrored text: {currentText}</pre>
      <pre>Submitted text: {submittedText}</pre>
    </div>
  );
}

----------------------------------------

TITLE: LabeledValue with Formatted List
DESCRIPTION: Demonstrates using formatOptions to control how a list is displayed, in this case as a unit-type list.

LANGUAGE: tsx
CODE:
<LabeledValue label="Interests" value={['Travel', 'Hiking', 'Snorkeling', 'Camping']} formatOptions={{type: 'unit'}} />

----------------------------------------

TITLE: Setting Custom Hour Cycle in DateRangePicker
DESCRIPTION: Example showing how to override the default hour format in DateRangePicker by setting the hourCycle prop to force 24-hour time display regardless of locale settings.

LANGUAGE: tsx
CODE:
<DateRangePicker
  label="Date range"
  granularity="minute"
  hourCycle={24} />

----------------------------------------

TITLE: Creating Link Buttons with React Aria Components
DESCRIPTION: This example demonstrates how to create a link that visually appears as a button using the Link component with Button styling.

LANGUAGE: tsx
CODE:
import {Link} from 'react-aria-components';

<Link className="react-aria-Button" href="https://adobe.com/" target="_blank">
  Adobe
</Link>

----------------------------------------

TITLE: DatePicker Granularity with Placeholder Values
DESCRIPTION: Example showing how granularity affects emitted values from onChange events. Setting placeholderValue explicitly determines the time zone for emitted values.

LANGUAGE: tsx
CODE:
import {now} from '@internationalized/date';

<MyDatePicker
  label="Event date"
  granularity="second" />
<MyDatePicker
  label="Event date"
  placeholderValue={now('America/New_York')}
  granularity="second" />

----------------------------------------

TITLE: Vertical ToggleButtonGroup Example
DESCRIPTION: An example of a ToggleButtonGroup with vertical orientation for a different layout and arrow key navigation behavior.

LANGUAGE: tsx
CODE:
<ToggleButtonGroup orientation="vertical">
  <ToggleButton id="grid">Grid</ToggleButton>
  <ToggleButton id="list">List</ToggleButton>
  <ToggleButton id="gallery">Gallery</ToggleButton>
</ToggleButtonGroup>

----------------------------------------

TITLE: TimeField with Hidden Time Zone
DESCRIPTION: Example showing how to hide the time zone abbreviation when using a ZonedDateTime object as the TimeField value.

LANGUAGE: tsx
CODE:
<TimeField
  label="Appointment time"
  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}
  hideTimeZone />

----------------------------------------

TITLE: Importing the mergeProps Utility in React
DESCRIPTION: Shows how to import the mergeProps utility function from the @react-aria/utils package.

LANGUAGE: tsx
CODE:
import {mergeProps} from '@react-aria/utils';

----------------------------------------

TITLE: ProgressCircle Size Variants in React Spectrum
DESCRIPTION: Shows different size variants of the ProgressCircle component (small, medium, large) with different progress values and spacing.

LANGUAGE: tsx
CODE:
<ProgressCircle aria-label="Loading…" marginEnd="size-300" size="S" value={15} />
<ProgressCircle aria-label="Loading…" marginEnd="size-300" value={30} />
<ProgressCircle aria-label="Loading…" size="L" value={60} />

----------------------------------------

TITLE: TagGroup Component Structure
DESCRIPTION: The basic structure of the TagGroup component, showing how to organize Label, TagList, Tag, Button, and Text components together.

LANGUAGE: tsx
CODE:
import {TagGroup, TagList, Tag, Label, Button, Text} from 'react-aria-components';

<TagGroup>
  <Label />
  <TagList>
    <Tag>
      <Button slot="remove" />
    </Tag>
  </TagList>
  <Text slot="description" />
  <Text slot="errorMessage" />
</TagGroup>

----------------------------------------

TITLE: Implementing Drag and Drop with Custom Default Copy Operation in React Spectrum
DESCRIPTION: This example shows how to override the default drop operation in TableView to use 'copy' instead of 'move'. It uses getDropOperation to specify that drops should result in copying items rather than moving them, and generates random IDs to allow multiple copies of the same item.

LANGUAGE: tsx
CODE:
function DraggableTableViewDefaultCopy(props: DndTableViewProps) {
  let {list, columns} = props;
  let {dragAndDropHooks} = useDragAndDrop({
    getItems: (keys) => [...keys].map(key => {
      let item = list.getItem(key);
      // Setup the drag types and associated info for each dragged item.
      return {
        'custom-app-type-copy-default': JSON.stringify(item),
        'text/plain': item.name
      };
    }),
    onDragEnd: (e) => {
      let {
        dropOperation,
        keys
      } = e;

      if (dropOperation === 'move') {
        list.remove(...keys);
      }
    }
  });

  return (
    <TableView
      aria-label="Draggable TableView in default copy operation example"
      selectionMode="multiple"
      width="size-5000"
      height="size-2400"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader columns={columns}>
        {column => (
          <Column
            key={column.id}
            align={column.id === 'date' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </TableView>
  );
}

function DroppableTableViewDefaultCopy(props: DndTableViewProps) {
  let {list, columns} = props;
  let {dragAndDropHooks} = useDragAndDrop({
    acceptedDragTypes: ['custom-app-type-copy-default'],
    /*- begin highlight -*/
    getDropOperation: () => 'copy',
    /*- end highlight -*/
    onInsert: async (e) => {
      let {
        items,
        target
      } = e;

      /*- begin highlight -*/
      // Create random id to allow for multiple copies of the same item
      let processedItems = await Promise.all(
        items.map(async (item) => (
          {...JSON.parse(await (item as TextDropItem).getText('custom-app-type-copy-default')), id: Math.random().toString(36).slice(2)}
        ))
      );
      /*- end highlight -*/
      if (target.dropPosition === 'before') {
        list.insertBefore(target.key, ...processedItems);
      } else if (target.dropPosition === 'after') {
        list.insertAfter(target.key, ...processedItems);
      }
    },
    onRootDrop: async (e) => {
      let {
        items
      } = e;

      /*- begin highlight -*/
      // Create random id to allow for multiple copies of the same item
      let processedItems = await Promise.all(
        items.map(async (item) => (
          {...JSON.parse(await (item as TextDropItem).getText('custom-app-type-copy-default')), id: Math.random().toString(36).slice(2)}
        ))
      );
      /*- end highlight -*/
      list.append(...processedItems);
    }
  });


  return (
    <TableView
      aria-label="Droppable TableView in default copy operation example"
      width="size-5000"
      height="size-2400"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader columns={columns}>
        {column => (
          <Column
            key={column.id}
            align={column.id === 'date' ? 'end' : 'start'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={list.items}>
        {item => (
          <Row>
            {columnKey => <Cell>{item[columnKey]}</Cell>}
          </Row>
        )}
      </TableBody>
    </TableView>
  );
}

function DragIntoTablesDefaultCopy() {
  let columns = [
    {name: 'Name', id: 'name'},
    {name: 'Type', id: 'type'},
    {name: 'Date Modified', id: 'date'}
  ];

  let sourceList = useListData({
    initialItems: [
      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/7/2020'},
      {id: '2', type: 'file', name: 'Adobe XD', date: '4/7/2021'},
      {id: '3', type: 'file', name: 'Adobe InDesign', date: '11/20/2010'},
      {id: '4', type: 'file', name: 'Adobe AfterEffects', date: '1/18/2016'}
    ]
  });

  let targetList = useListData({
    initialItems: [
      {id: '5', type: 'file', name: 'Adobe Dreamweaver', date: '6/7/2020'},
      {id: '6', type: 'file', name: 'Adobe Fresco', date: '2/17/2020'},
      {id: '7', type: 'file', name: 'Adobe Connect', date: '1/23/2020'},
      {id: '8', type: 'file', name: 'Adobe Lightroom', date: '12/17/2020'}
    ]
  });


  return (
    <Flex wrap gap="size-300">
      <DraggableTableViewDefaultCopy list={sourceList} columns={columns} />
      <DroppableTableViewDefaultCopy list={targetList} columns={columns} />
    </Flex>
  );
}

----------------------------------------

TITLE: TimeField with Custom Placeholder Value
DESCRIPTION: Example showing how to set a custom placeholder value for a TimeField, which sets the initial values when the user interacts with the field.

LANGUAGE: tsx
CODE:
<TimeField label="Appointment time" placeholderValue={new Time(9)} />

----------------------------------------

TITLE: Basic RangeCalendar Implementation in React
DESCRIPTION: Shows a simple implementation of the RangeCalendar component with an aria-label for accessibility.

LANGUAGE: tsx
CODE:
<RangeCalendar aria-label="Trip dates" />

----------------------------------------

TITLE: Configuring Density in React Spectrum TableView
DESCRIPTION: Shows how to control the vertical padding of table rows using the density prop with values 'compact' and 'spacious' to modify the spacing between rows.

LANGUAGE: tsx
CODE:
// Using same setup as hide header example
<Flex direction="column" gap="size-300">
  <TableExample density="compact" />
  <TableExample density="spacious" />
</Flex>

----------------------------------------

TITLE: Implementing a Disabled Toggle Button in React
DESCRIPTION: This example demonstrates how to create a disabled toggle button by using the isDisabled prop, which prevents user interaction with the button.

LANGUAGE: tsx
CODE:
<ToggleButton isDisabled>Pin</ToggleButton>

----------------------------------------

TITLE: Adding Pagination to Carousel in React Components
DESCRIPTION: This snippet shows how to implement pagination for a carousel component. It imports a Pagination component and connects it to a carousel element by its ID, with specific styling classes for responsive design.

LANGUAGE: tsx
CODE:
import {Pagination} from './home/Pagination';

<Pagination carousel={document.getElementById('customizable-carousel')} className="max-w-3xl lg:hidden" />

----------------------------------------

TITLE: Handling Change Events in ColorWheel
DESCRIPTION: Example demonstrating how to use the onChange and onChangeEnd events to track both the current value during interaction and the final value when interaction ends. Both events receive a Color object.

LANGUAGE: tsx
CODE:
function Example() {
  let [currentValue, setCurrentValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));
  let [finalValue, setFinalValue] = React.useState(currentValue);

  return (
    <div>
      <MyColorWheel
        value={currentValue}
        onChange={setCurrentValue}
        onChangeEnd={setFinalValue}
      />
      <p>Current value: {currentValue.toString('hsl')}</p>
      <p>Final value: {finalValue.toString('hsl')}</p>
    </div>
  );
}

----------------------------------------

TITLE: ComboBox with Required State and Icon Indicator
DESCRIPTION: Example showing how to configure a ComboBox as a required field with an icon indicator, using the isRequired and necessityIndicator props.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal" isRequired necessityIndicator="icon">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Basic Usage Example of Footer Component in React Spectrum
DESCRIPTION: Demonstrates a basic implementation of the Footer component with copyright text content.

LANGUAGE: tsx
CODE:
<Footer>&copy; All rights reserved.</Footer>

----------------------------------------

TITLE: NumberField with Currency Formatting
DESCRIPTION: Shows how to format a NumberField for currency values with various display options.

LANGUAGE: tsx
CODE:
<NumberField
  label="Transaction amount"
  defaultValue={45}
  formatOptions={{
    style: 'currency',
    currency: 'EUR',
    currencyDisplay: 'code',
    currencySign: 'accounting'
  }} />

----------------------------------------

TITLE: Setting Custom First Day of Week in RangeCalendar
DESCRIPTION: Shows how to customize the first day of the week in a RangeCalendar component using the firstDayOfWeek prop. This example sets Monday as the first day of the week.

LANGUAGE: tsx
CODE:
<MyRangeCalendar aria-label="Trip dates" firstDayOfWeek="mon" />

----------------------------------------

TITLE: Running Verdaccio for Package Testing
DESCRIPTION: Commands for setting up Verdaccio, a private registry for testing packages in example apps, including instructions for Intel and Apple silicon chips.

LANGUAGE: bash
CODE:
./scripts/verdaccio.sh

----------------------------------------

TITLE: ActionBar with Dynamic Items Using Function Children
DESCRIPTION: Example showing how to create an ActionBar with dynamic items using a function that returns Item elements. This pattern allows for more flexibility in generating action buttons.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function Example() {
  let barItems = [
    {key: 'edit', label: 'Edit'},
    {key: 'copy', label: 'Copy'},
    {key: 'delete', label: 'Delete'}
  ];

  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['photoshop']));

  return (
    <ActionBarContainer height={300} maxWidth="size-6000">
      <ListView aria-label="ListView with action bar" selectionMode="multiple" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>
        <Item key="photoshop">Adobe Photoshop</Item>
        <Item key="illustrator">Adobe Illustrator</Item>
        <Item key="xd">Adobe XD</Item>
      </ListView>
      <ActionBar
        items={barItems}
        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}
        onAction={(key) => alert(`Performing ${key} action...`)}
        onClearSelection={() => setSelectedKeys(new Set())}
        isEmphasized>
        {item => (
          <Item key={item.key}>
            {item.label}
          </Item>
        )}
      </ActionBar>
    </ActionBarContainer>
  );
}

<Example />

----------------------------------------

TITLE: ActionMenu with Link Items
DESCRIPTION: Demonstrates how to create menu items that function as links to external websites using the href prop.

LANGUAGE: tsx
CODE:
<ActionMenu>
  <Item href="https://adobe.com/" target="_blank">Adobe</Item>
  <Item href="https://apple.com/" target="_blank">Apple</Item>
  <Item href="https://google.com/" target="_blank">Google</Item>
  <Item href="https://microsoft.com/" target="_blank">Microsoft</Item>
</ActionMenu>

----------------------------------------

TITLE: Adding a Description to a ComboBox
DESCRIPTION: This example demonstrates how to provide additional help text for a ComboBox using the description slot, which associates descriptive text with the component.

LANGUAGE: tsx
CODE:
<ComboBox>
  <Label>Favorite Animal</Label>
  <div>
    <Input />
    <Button>▼</Button>
  </div>
  <Text slot="description">Please select an animal.</Text>
  <Popover>
    <ListBox>
      <ListBoxItem>Aardvark</ListBoxItem>
      <ListBoxItem>Cat</ListBoxItem>
      <ListBoxItem>Dog</ListBoxItem>
      <ListBoxItem>Kangaroo</ListBoxItem>
      <ListBoxItem>Panda</ListBoxItem>
      <ListBoxItem>Snake</ListBoxItem>
    </ListBox>
  </Popover>
</ComboBox>

----------------------------------------

TITLE: Basic TimeField Validation in React Spectrum Form
DESCRIPTION: Example showing how to implement a required TimeField within a Form component using native validation behavior. The form includes submit and reset buttons.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  {/*- begin highlight -*/}
  <TimeField label="Meeting time" name="time" isRequired />
  {/*- end highlight -*/}
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Generating Color Arrays for Grid Examples
DESCRIPTION: Helper code that generates an array of color values by combining base colors with different intensity levels for use in the grid examples.

LANGUAGE: tsx
CODE:
let baseColors = ['celery', 'chartreuse', 'yellow', 'magenta', 'fuchsia', 'purple', 'indigo', 'seafoam', 'red', 'orange', 'green', 'blue'];
let colors = [];
for (let color of baseColors) {
  for (let i = 4; i <= 7; i++) {
    colors.push(`${color}-${i}00`);
  }
}

----------------------------------------

TITLE: Building a Complete Color Picker with ColorArea and ColorSlider
DESCRIPTION: Example of combining ColorArea with ColorSlider to create a full color picker. The ColorArea controls saturation and lightness while the ColorSlider adjusts the hue, allowing complete color selection.

LANGUAGE: tsx
CODE:
import {ColorSlider, Label, SliderOutput, SliderTrack} from 'react-aria-components';

function Example() {
  let [color, setColor] = React.useState(parseColor('hsl(50, 100%, 50%)'));

  return (
    <div>
      <MyColorArea
        value={color}
        onChange={setColor}
        xChannel="saturation"
        yChannel="lightness" />
      <ColorSlider channel="hue" value={color} onChange={setColor} style={{width: 192, marginTop: 8}}>
        <Label />
        <SliderOutput />
        <SliderTrack>
          <ColorThumb />
        </SliderTrack>
      </ColorSlider>
      <p>Current value: {color.toString('hsl')}</p>
    </div>
  );
}

----------------------------------------

TITLE: Adding Durations to Time Objects in TypeScript
DESCRIPTION: Demonstrates adding time durations to Time objects using the add method, which returns a new Time instance with the adjusted values.

LANGUAGE: tsx
CODE:
let time = new Time(9, 45);
time.add({hours: 1}); // 10:45:00
time.add({minutes: 1}); // 09:46:00
time.add({seconds: 1}); // 09:45:01

----------------------------------------

TITLE: Basic LabeledValue Usage Example
DESCRIPTION: Demonstrates basic usage of the LabeledValue component with a string value.

LANGUAGE: tsx
CODE:
<LabeledValue label="File name" value="Budget.xls" />

----------------------------------------

TITLE: Converting ZonedDateTime to Time in TypeScript
DESCRIPTION: Shows how to convert a ZonedDateTime to a Time object using the toTime function when only the time component is needed.

LANGUAGE: tsx
CODE:
import {toTime} from '@internationalized/date';

let date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');
toTime(date); // 09:45

----------------------------------------

TITLE: Justifying Content in a Flex Container in React Spectrum
DESCRIPTION: Shows how to use the justifyContent prop to control main-axis alignment, in this case vertically centering items within a container.

LANGUAGE: tsx
CODE:
<View height="size-3000" borderWidth="thin" borderColor="dark">
  <Flex direction="column" gap="size-100" justifyContent="center" height="100%">
    <View backgroundColor="celery-600" width="size-800" height="size-800" />
    <View backgroundColor="blue-600" width="size-2000" height="size-800" />
    <View backgroundColor="magenta-600" width="size-800" height="size-800" />
  </Flex>
</View>

----------------------------------------

TITLE: Implementing Move Drop Operation with React Aria useDrag
DESCRIPTION: Example showing how to handle different drop operations using the onDragEnd event handler. When a move operation is performed, the dragged element is removed from the UI.

LANGUAGE: tsx
CODE:
function Draggable() {
  let [moved, setMoved] = React.useState(false);
  let {dragProps, isDragging} = useDrag({
    getItems() {
      return [{
        'text/plain': 'hello world'
      }];
    },
    /*- begin highlight -*/
    onDragEnd(e) {
      if (e.dropOperation === 'move') {
        setMoved(true);
      }
    }
    /*- end highlight -*/
  });

  if (moved) {
    return null;
  }

  // ...
  ///- begin collapse -///
  return (
    <div {...dragProps} role="button" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>
      Drag me
    </div>
  );
  ///- end collapse -///
}
///- begin collapse -///
<Draggable />
<DropTarget />
///- end collapse -///

----------------------------------------

TITLE: Cycling Date Fields with Rounding in TypeScript
DESCRIPTION: Shows how to use the round option with the cycle method to round values to specific increments. This example demonstrates rounding minutes to 15-minute increments when cycling.

LANGUAGE: tsx
CODE:
let date = parseZonedDateTime('2022-02-03T09:22[America/Los_Angeles]');

date.cycle('minute', 15); // 2022-02-03T09:37:00-08:00[America/Los_Angeles]
date.cycle('minute', 15, {round: true}); // 2022-02-03T09:30:00-08:00[America/Los_Angeles]

date.cycle('minute', -15); // 2022-02-03T09:07:00-08:00[America/Los_Angeles]
date.cycle('minute', -15, {round: true}); // 2022-02-03T09:15:00-08:00[America/Los_Angeles]

----------------------------------------

TITLE: Importing Switch Component in React Spectrum
DESCRIPTION: Shows how to import the Switch component from the React Spectrum library.

LANGUAGE: jsx
CODE:
import {Switch} from '@react-spectrum/switch';

----------------------------------------

TITLE: Handling Daylight Saving Transitions in toDate Conversions
DESCRIPTION: Example of handling ambiguous times during daylight saving transitions when converting to a native Date object. This shows how to use the disambiguation parameter to control the behavior.

LANGUAGE: tsx
CODE:
// A "spring forward" transition
let date = new CalendarDateTime(2020, 3, 8, 2);
date.toDate('America/Los_Angeles', 'earlier');
// => Sun Mar 08 2020 01:00:00 GMT-0800 (Pacific Daylight Time)

----------------------------------------

TITLE: Implementing Date Formatting with useDateFormatter in React
DESCRIPTION: This example demonstrates how to use the useDateFormatter hook to display the current date in different locales. It creates a CurrentDate component that formats the current date using the locale provided through I18nProvider.

LANGUAGE: tsx
CODE:
import {I18nProvider, useDateFormatter} from '@react-aria/i18n';

function CurrentDate() {
  let formatter = useDateFormatter();

  return (
    <p>{formatter.format(new Date())}</p>
  );
}

<>
  <I18nProvider locale="en-US">
    <CurrentDate />
  </I18nProvider>
  <I18nProvider locale="ru-RU">
    <CurrentDate />
  </I18nProvider>
</>

----------------------------------------

TITLE: Implementing GridLayout with Virtualizer and ListBox in TSX
DESCRIPTION: Example showing how to use GridLayout with a Virtualizer component and ListBox in React Aria Components. It demonstrates setting minimum item size and spacing options for the layout, and configuring the ListBox with grid layout mode for proper keyboard navigation.

LANGUAGE: tsx
CODE:
import {GridLayout, Size, Text} from 'react-aria-components';

function Example() {
  return (
    <div className="resizable">
      <Virtualizer
        /*- begin highlight -*/
        layout={GridLayout}
        layoutOptions={{
          minItemSize: new Size(100, 140),
          minSpace: new Size(8, 8)
        }}
        /*- end highlight -*/
      >
        <ListBox
          /*- begin highlight -*/
          layout="grid"
          /*- end highlight -*/
          aria-label="Virtualized grid layout"
          selectionMode="multiple"
          items={albums}>
          {item => (
            <ListBoxItem textValue={item.title}>
              <img src={item.image} alt="" />
              <Text slot="label">{item.title}</Text>
              <Text slot="description">{item.artist}</Text>
            </ListBoxItem>
          )}
        </ListBox>
      </Virtualizer>
    </div>
  );
}

----------------------------------------

TITLE: Adding Description to TagGroup in React Spectrum
DESCRIPTION: Example demonstrating how to add a descriptive help text to a TagGroup component using the description prop. This provides additional context about the group's purpose.

LANGUAGE: tsx
CODE:
<TagGroup label="Categories" description="Your selected categories.">
  <Item key="news">News</Item>
  <Item key="travel">Travel</Item>
  <Item key="gaming">Gaming</Item>
  <Item key="shopping">Shopping</Item>
</TagGroup>

----------------------------------------

TITLE: Controlled MenuTrigger Component
DESCRIPTION: Example demonstrating a controlled MenuTrigger component where the open state is managed through React state and the onOpenChange handler.

LANGUAGE: tsx
CODE:
function Example() {
  let [open, setOpen] = React.useState(false);

  return (
    <MenuTrigger
      isOpen={open}
      onOpenChange={setOpen}>
      <ActionButton>
        View
      </ActionButton>
      <Menu selectionMode="multiple">
        <Item key="side">Side bar</Item>
        <Item key="options">Page options</Item>
        <Item key="edit">Edit Panel</Item>
      </Menu>
    </MenuTrigger>
  );
}

----------------------------------------

TITLE: Custom Class Name for ColorSwatchPicker
DESCRIPTION: Example showing how to override the default class name of a ColorSwatchPicker with a custom one for styling purposes.

LANGUAGE: jsx
CODE:
<ColorSwatchPicker className="my-color-swatch-picker">
  {/* ... */}
</ColorSwatchPicker>

----------------------------------------

TITLE: Button with Icon and Label in React Spectrum
DESCRIPTION: Shows how to create a Button component that includes both an icon and text label.

LANGUAGE: tsx
CODE:
import {Text} from '@react-spectrum/text';

<Button variant="primary">
  <Bell />
  <Text>Icon + Label</Text>
</Button>

----------------------------------------

TITLE: Basic Switch Component Implementation
DESCRIPTION: Demonstrates the simplest implementation of a Switch component with a text label.

LANGUAGE: tsx
CODE:
<Switch>Low power mode</Switch>

----------------------------------------

TITLE: Creating Read-Only CheckboxGroup
DESCRIPTION: Example demonstrating the isReadOnly prop to make a CheckboxGroup's selection immutable while keeping it focusable, unlike the disabled state.

LANGUAGE: tsx
CODE:
<MyCheckboxGroup label="Favorite sports" defaultValue={['baseball']} isReadOnly>
  <MyCheckbox value="soccer">Soccer</MyCheckbox>
  <MyCheckbox value="baseball">Baseball</MyCheckbox>
  <MyCheckbox value="basketball">Basketball</MyCheckbox>
</MyCheckboxGroup>

----------------------------------------

TITLE: Picker with Dynamic Sections from Hierarchical Data
DESCRIPTION: Demonstrates how to create sections in a Picker using dynamic hierarchical data. Each section represents a category and contains items from that category's children array.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {name: 'Australian', children: [
      {id: 2, name: 'Koala'},
      {id: 3, name: 'Kangaroo'},
      {id: 4, name: 'Platypus'}
    ]},
    {name: 'American', children: [
      {id: 6, name: 'Bald Eagle'},
      {id: 7, name: 'Bison'},
      {id: 8, name: 'Skunk'}
    ]}
  ];

  return (
    <Picker label="Pick an animal" items={options} onSelectionChange={selected => alert(selected)}>
      {item => (
        <Section key={item.name} items={item.children} title={item.name}>
          {item => <Item>{item.name}</Item>}
        </Section>
      )}
    </Picker>
  );
}

----------------------------------------

TITLE: Disabled ColorSlider Example
DESCRIPTION: Shows how to create a disabled ColorSlider component using the isDisabled prop.

LANGUAGE: tsx
CODE:
<ColorSlider defaultValue="#7f0000"  channel="red" isDisabled />

----------------------------------------

TITLE: Disabled TextField
DESCRIPTION: Demonstrates how to create a disabled TextField that cannot be interacted with.

LANGUAGE: tsx
CODE:
<TextField label="Email" isDisabled />

----------------------------------------

TITLE: RadioGroup with Contextual Help
DESCRIPTION: Demonstrates how to add contextual help to a RadioGroup using the ContextualHelp component for additional information.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<RadioGroup
  label="T-shirt size"
  contextualHelp={
    <ContextualHelp variant="info">
      <Heading>Size and fit</Heading>
      <Content>Our sizes run on the small side. Choose a size up from your usual.</Content>
    </ContextualHelp>
  }>
  <Radio value="S">Small</Radio>
  <Radio value="M">Medium</Radio>
  <Radio value="L">Large</Radio>
</RadioGroup>

----------------------------------------

TITLE: Styling Invalid SearchField Input with CSS
DESCRIPTION: CSS example showing how to style a SearchField when it contains invalid input. It applies custom border color to the input and formats the error message text.

LANGUAGE: css
CODE:
.react-aria-SearchField {
  .react-aria-Input{
    &[data-invalid] {
      border-color: var(--invalid-color);
    }
  }

  .react-aria-FieldError {
    grid-area: help;
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: Creating a Toast with Action Button
DESCRIPTION: Example of creating a toast notification with an action button, action handler, and auto-close functionality.

LANGUAGE: tsx
CODE:
<Button
  onPress={() => ToastQueue.info('An update is available', {
    actionLabel: 'Update',
    onAction: () => alert('Updating!'),
    shouldCloseOnAction: true
  })}
  variant="primary">
  Show toast
</Button>

----------------------------------------

TITLE: Initializing Image Array Data for WaterfallLayout in TSX
DESCRIPTION: This code snippet initializes an array of image objects that can be used with the WaterfallLayout component. Each object contains metadata about an image including id, title, user, image URL, and aspectRatio which is critical for the WaterfallLayout to calculate appropriate column heights.

LANGUAGE: tsx
CODE:
let images = [
    {
        "id": "8SXaMMWCTGc",
        "title": "A Ficus Lyrata Leaf in the sunlight (2/2) (IG: @clay.banks)",
        "user": "Clay Banks",
        "image": "https://images.unsplash.com/photo-1580133318324-f2f76d987dd8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.6666"
    },
    {
        "id": "pYjCqqDEOFo",
        "title": "beach of Italy",
        "user": "alan bajura",
        "image": "https://images.unsplash.com/photo-1737100522891-e8946ac97fd1?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.6666666666666666"
    },
    {
        "id": "CF-2tl6MQj0",
        "title": "A winding road in the middle of a forest",
        "user": "Artem Stoliar",
        "image": "https://images.unsplash.com/photo-1738249034651-1896f689be58?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "1.3333333333333333"
    },
    {
        "id": "OW97sLU0cOw",
        "title": "A green and purple aurora over a snow covered forest",
        "user": "Janosch Diggelmann",
        "image": "https://images.unsplash.com/photo-1738189669835-61808a9d5981?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.6669921875"
    },
    {
        "id": "WfeLZ02IhkM",
        "title": "A blue and white firework is seen from above",
        "user": "Janosch Diggelmann",
        "image": "https://images.unsplash.com/photo-1738168601630-1c1f3ef5a95a?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "1.3353596757852078"
    },
    {
        "id": "w1GpST72Bg8",
        "title": "A snow covered mountain with a sky background",
        "user": "Daniil Silantev",
        "image": "https://images.unsplash.com/photo-1738165170747-ecc6e3a4d97c?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "1.4978580171358629"
    },
    {
        "id": "0iN0KIt6lYI",
        "title": "\"Pastel Sunset\"",
        "user": "Marek Piwnicki",
        "image": "https://images.unsplash.com/photo-1737917818689-f3b3708de5d7?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.6249763481551561"
    },
    {
        "id": "-mFKPfXXUG0",
        "title": "Leave the weight behind! You must make yourself light to strive upwards — to reach the light. (A serene winter landscape featuring a dense collection of bare, white trees.)",
        "user": "Simon Berger",
        "image": "https://images.unsplash.com/photo-1737972970322-cc2e255021bd?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "1"
    },
    {
        "id": "MOk6URQ28R4",
        "title": "A snow covered tree with a sky background",
        "user": "Daniil Silantev",
        "image": "https://images.unsplash.com/photo-1738081359113-a7a33c509cf9?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.666598611678236"
    },
    {
        "id": "y36Nj_edtRE",
        "title": "A lake surrounded by trees covered in snow",
        "user": "Daniel Seßler",
        "image": "https://images.unsplash.com/photo-1736018545810-3de4c7ec25fa?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.667"
    },
    {
        "id": "NvBV-YwlgBw",
        "title": "The night sky with stars above a rock formation",
        "user": "Dennis Haug",
        "image": "https://images.unsplash.com/photo-1735528655501-cf671a3323c3?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "1"
    },
    {
        "id": "UthQdrPFxt0",
        "title": "A pine tree covered in snow in a forest",
        "user": "Anita Austvika",
        "image": "https://images.unsplash.com/photo-1737312905026-5dfdff1097bc?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.6666666666666666"
    },
    {
        "id": "2k74xaf8dfc",
        "title": "The sun shines through the trees in the forest",
        "user": "Joyce G",
        "image": "https://images.unsplash.com/photo-1736185597807-371cae1c7e4e?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.6666666666666666"
    },
    {
        "id": "Yje5kgfvCm0",
        "title": "A blurry photo of a field of flowers",
        "user": "Eugene Golovesov",
        "image": "https://images.unsplash.com/photo-1736483065204-e55e62092780?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.6661569826707442"
    },
    {
        "id": "G2bsj2LVttI",
        "title": "A foggy road lined with trees and grass",
        "user": "Ingmar H",
        "image": "https://images.unsplash.com/photo-1737903071772-4d20348b4d81?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.7499509707785841"
    },
    {
        "id": "ppyNBOkfiuY",
        "title": "A close up of a green palm tree",
        "user": "Junel Mujar",
        "image": "https://images.unsplash.com/photo-1736849544918-6ddb5cfc2c42?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.7507507507507507"
    },
    {
        "id": "UcWUMqIsld8",
        "title": "A green leaf floating on top of a body of water",
        "user": "Allec Gomes",
        "image": "https://images.unsplash.com/photo-1737559217439-a5703e9b65cb?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.6666666666666666"
    },
    {
        "id": "xHqOVq9w8OI",
        "title": "green-leafed plant",
        "user": "Joshua Michaels",
        "image": "https://images.unsplash.com/photo-1563364664-399838d1394c?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "1.504"
    },
    {
        "id": "uWx3_XEc-Jw",
        "title": "A view of a mountain covered in fog",
        "user": "iuliu illes",
        "image": "https://images.unsplash.com/photo-1737403428945-c584529b7b17?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "1.3430962343096233"
    },
    {
        "id": "2_3lhGt8i-Y",
        "title": "A field with tall grass and fog in the background",
        "user": "Ingmar H",
        "image": "https://images.unsplash.com/photo-1737439987404-a3ee9fb95351?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.6666666666666666"
    },
    {
        "id": "FV-__IOxb08",
        "title": "A close up of a wave on a sandy beach",
        "user": "Jonathan Borba",
        "image": "https://images.unsplash.com/photo-1726502102472-2108ef2a5cae?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.6666666666666666"
    },
    {
        "id": "_BS-vK3boOU",
        "title": "Desert textures",
        "user": "Braden Jarvis",
        "image": "https://images.unsplash.com/photo-1722359546494-8e3a00f88e95?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.7135258358662614"
    },
    {
        "id": "LjAcS9lJdBg",
        "title": "Tew Falls, waterfall, in Hamilton, Canada.",
        "user": "Andre Portolesi",
        "image": "https://images.unsplash.com/photo-1705021246536-aecfad654893?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "0.8"
    },
    {
        "id": "hlj6xJG30FE",
        "title": "Find me on Instagram! @intricateexplorer",
        "user": "Intricate Explorer",
        "image": "https://images.unsplash.com/photo-1631641551473-fbe46919289d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400",
        "aspectRatio": "1.4992510164776376"
    },
    {


----------------------------------------

TITLE: Implementing Custom Validation Logic for DateRangePicker
DESCRIPTION: Example demonstrating custom validation using the validate prop, which applies a business rule limiting the date range to a maximum of one week duration.

LANGUAGE: tsx
CODE:
<Form validationBehavior="native" maxWidth="size-3000">
  <DateRangePicker
    label="Trip dates"
    /*- begin highlight -*/
    validate={range => range?.end.compare(range.start) > 7 ? 'Maximum stay duration is 1 week.' : null}
    /*- end highlight -*/
    defaultValue={{
      start: today(getLocalTimeZone()),
      end: today(getLocalTimeZone()).add({ weeks: 1, days: 3 })
    }} />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Implementing Custom Validation Logic for DateRangePicker
DESCRIPTION: Example demonstrating custom validation using the validate prop, which applies a business rule limiting the date range to a maximum of one week duration.

LANGUAGE: tsx
CODE:
<Form validationBehavior="native" maxWidth="size-3000">
  <DateRangePicker
    label="Trip dates"
    /*- begin highlight -*/
    validate={range => range?.end.compare(range.start) > 7 ? 'Maximum stay duration is 1 week.' : null}
    /*- end highlight -*/
    defaultValue={{
      start: today(getLocalTimeZone()),
      end: today(getLocalTimeZone()).add({ weeks: 1, days: 3 })
    }} />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Importing React Aria Components for File System Tree Example
DESCRIPTION: Imports the necessary components and layout utilities from React Aria Components and other dependencies for the file system tree example.

LANGUAGE: tsx
CODE:
import {ExampleLayout} from '@react-spectrum/docs';
export default ExampleLayout;

import docs from 'docs:react-aria-components';
import {TypeLink} from '@react-spectrum/docs';
import styles from '@react-spectrum/docs/src/docs.css';
import Tree from '@react-spectrum/docs/pages/assets/component-illustrations/Tree.svg';
import {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';
import ChevronRight from '@spectrum-icons/workflow/ChevronRight';

----------------------------------------

TITLE: Creating a Custom Label Component Compatible with React Aria Components
DESCRIPTION: Example showing how to make an existing label component work with React Aria Components by consuming from LabelContext and using the useContextProps hook.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Implementing Card Component with Semantic Element Support
DESCRIPTION: Example of a Card component that provides context values for child semantic elements to consume, enabling proper styling within the Card context.

LANGUAGE: JSX
CODE:
export const Card = (props) => {

  return (
    <div className={classNames(styles, 'spectrum-Card')}>
      <SlotContext.Provider
        value={{
          heading: classNames(styles, 'heading'),
          description: classNames(styles, 'description')
        }}>
        {props.children}
      </SlotContext.Provider>
    </div>
  );
};

----------------------------------------

TITLE: Implementing Controlled Modal State in React
DESCRIPTION: Example demonstrating how to manage a Modal's open state programmatically using React state, without relying on DialogTrigger.

LANGUAGE: tsx
CODE:
function Example() {
  let [isOpen, setOpen] = React.useState(false);

  return (
    <>
      <Button onPress={() => setOpen(true)}>Open dialog</Button>
      <Modal isDismissable isOpen={isOpen} onOpenChange={setOpen}>
        <Dialog>
          <Heading slot="title">Notice</Heading>
          <p>Click outside to close this dialog.</p>
        </Dialog>
      </Modal>
    </>
  );
}

----------------------------------------

TITLE: Converting Between Time Zones in TypeScript
DESCRIPTION: Shows how to convert a ZonedDateTime to a different time zone using toTimeZone and toLocalTimeZone functions. This maintains the same instant in time while changing the time zone representation.

LANGUAGE: tsx
CODE:
import {toTimeZone, toLocalTimeZone} from '@internationalized/date';

let date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');
toTimeZone(date, 'America/Chicago'); // 2022-02-03T11:45[America/Chicago]
toLocalTimeZone(date); // e.g. 2022-02-03T12:45[America/New_York]

----------------------------------------

TITLE: Basic Text Component Example in React Spectrum
DESCRIPTION: Demonstrates a simple implementation of the Text component displaying the word 'Paste'. The Text component provides no styling by itself but receives styling from its parent container.

LANGUAGE: tsx
CODE:
<Text>Paste</Text>

----------------------------------------

TITLE: Importing Icon Component in React Spectrum
DESCRIPTION: Basic import statements for using the Icon component along with Flex from React Spectrum's layout package.

LANGUAGE: jsx
CODE:
import {Flex} from '@react-spectrum/layout';
import {Icon} from '@react-spectrum/icon';

----------------------------------------

TITLE: CSS for Custom Card Layout
DESCRIPTION: CSS implementation for a custom card layout that rearranges the components in a completely different structure. This demonstrates how the same components can be reused in various layouts by only changing the CSS.

LANGUAGE: css
CODE:
.container {
  display: grid;
  grid-template-columns: 14px auto 1fr 1fr 14px;
  grid-template-rows: 5px auto auto auto auto 5px;
  grid-template-areas:
    ".       .          .        .         ."
    ".       avatar     title    title     ."
    ".       body       body     body      ."
    "preview preview    preview  preview   preview"
    ".       footer     footer   footer    ."
    ".       .          .        .         .";
}


.avatar {
  grid-area: avatar;
  align-self: center;
  height: 48px;
  width: 48px;
}

.title {
  grid-area: title;
  align-self: center;
}

.body {
  grid-area: body;
}

.preview {
  grid-area: preview;
  height: 200px;
}

.footer {
  grid-area: footer;
}

----------------------------------------

TITLE: Creating Informational Variant Tooltip with Icon
DESCRIPTION: Example showing how to create an informational tooltip with an icon using the info variant and showIcon prop.

LANGUAGE: tsx
CODE:
<TooltipTrigger>
  <ActionButton aria-label="Information"><Question /></ActionButton>
  <Tooltip variant="info" showIcon>More information menu.</Tooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Creating a Disabled ColorWheel
DESCRIPTION: Example showing how to disable a ColorWheel component using the isDisabled prop. This prevents user interaction with the component.

LANGUAGE: tsx
CODE:
<MyColorWheel defaultValue="hsl(80, 100%, 50%)" isDisabled />

----------------------------------------

TITLE: Individual Checkbox Validation within CheckboxGroup
DESCRIPTION: Demonstrates how to require specific checkboxes to be checked by setting isRequired at the individual Checkbox level instead of the group level.

LANGUAGE: tsx
CODE:
<Form validationBehavior="native">
  <CheckboxGroup label="Agree to the following" isRequired>
    {/*- begin highlight -*/}
    <Checkbox value="terms" isRequired>Terms and conditions</Checkbox>
    <Checkbox value="privacy" isRequired>Privacy policy</Checkbox>
    <Checkbox value="cookies" isRequired>Cookie policy</Checkbox>
    {/*- end highlight -*/}
  </CheckboxGroup>
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Individual Checkbox Validation within CheckboxGroup
DESCRIPTION: Demonstrates how to require specific checkboxes to be checked by setting isRequired at the individual Checkbox level instead of the group level.

LANGUAGE: tsx
CODE:
<Form validationBehavior="native">
  <CheckboxGroup label="Agree to the following" isRequired>
    {/*- begin highlight -*/}
    <Checkbox value="terms" isRequired>Terms and conditions</Checkbox>
    <Checkbox value="privacy" isRequired>Privacy policy</Checkbox>
    <Checkbox value="cookies" isRequired>Cookie policy</Checkbox>
    {/*- end highlight -*/}
  </CheckboxGroup>
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: CSS Styling for Disabled ColorSwatchPickerItems
DESCRIPTION: CSS styling for disabled state of ColorSwatchPickerItem components, applying reduced opacity to visually indicate the disabled state.

LANGUAGE: css
CODE:
.react-aria-ColorSwatchPickerItem {
  &[data-disabled] {
    opacity: 0.2;
  }
}

----------------------------------------

TITLE: Overriding First Day of Week with getWeeksInMonth Function
DESCRIPTION: Demonstrates how to override the default first day of the week when calculating weeks in a month by providing an optional firstDayOfWeek parameter to the getWeeksInMonth function.

LANGUAGE: tsx
CODE:
getWeeksInMonth(date, 'en-US', 'mon'); // 5

----------------------------------------

TITLE: CSS for Disabled Select Component
DESCRIPTION: CSS styling for disabled state of the Select component, including support for forced-colors mode.

LANGUAGE: css
CODE:
.react-aria-Select {
  .react-aria-Button {
    &[data-disabled] {
      border-color: var(--border-color-disabled);
      color: var(--text-color-disabled);
      span[aria-hidden] {
        background: var(--border-color-disabled);
        color: var(--text-color-disabled);
      }

      .react-aria-SelectValue {
        &[data-placeholder] {
          color: var(--text-color-disabled);
        }
      }
    }
  }
}

@media (forced-colors: active) {
  .react-aria-Select {
    .react-aria-Button {
      &[data-disabled] span[aria-hidden] {
        background: 0 0;
      }
    }
  }
}

----------------------------------------

TITLE: CSS for Disabled Select Component
DESCRIPTION: CSS styling for disabled state of the Select component, including support for forced-colors mode.

LANGUAGE: css
CODE:
.react-aria-Select {
  .react-aria-Button {
    &[data-disabled] {
      border-color: var(--border-color-disabled);
      color: var(--text-color-disabled);
      span[aria-hidden] {
        background: var(--border-color-disabled);
        color: var(--text-color-disabled);
      }

      .react-aria-SelectValue {
        &[data-placeholder] {
          color: var(--text-color-disabled);
        }
      }
    }
  }
}

@media (forced-colors: active) {
  .react-aria-Select {
    .react-aria-Button {
      &[data-disabled] span[aria-hidden] {
        background: 0 0;
      }
    }
  }
}

----------------------------------------

TITLE: Importing RadioGroup and Radio Components in React Spectrum
DESCRIPTION: Shows how to import the Radio and RadioGroup components from React Spectrum along with the Flex layout component.

LANGUAGE: jsx
CODE:
import {Radio, RadioGroup} from '@react-spectrum/radio';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Adding Custom ClassName to NumberField Component
DESCRIPTION: Example of providing a custom className to the NumberField component to override the default styling.

LANGUAGE: jsx
CODE:
<NumberField className="my-number-field">
  {/* ... */}
</NumberField>

----------------------------------------

TITLE: Custom Rendering for DateSegment Component with Render Props
DESCRIPTION: Shows how to use render props to customize the rendering of a DateSegment component based on its current state.

LANGUAGE: jsx
CODE:
<DateSegment>
  {({text, placeholder, isPlaceholder}) => (
    <>
      <span style={{visibility: isPlaceholder ? 'visible' : 'hidden'}}>{placeholder}</span>
      {isPlaceholder ? '' : text}
    </>
  )}
</DateSegment>

----------------------------------------

TITLE: Styling a Toolbar Component with CSS
DESCRIPTION: CSS styles for the Toolbar component, including layout, spacing, and styling for contained elements like groups, toggle buttons, and separators.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Toolbar {
  display: flex;
  flex-wrap: wrap;
  gap: 5px;

  &[data-orientation=horizontal] {
    flex-direction: row;
  }

  .react-aria-Group {
    display: contents;
  }

  .react-aria-ToggleButton {
    width: 32px;
  }
}

.react-aria-Separator {
  align-self: stretch;
  background-color: var(--border-color);

  &[aria-orientation=vertical] {
    width: 1px;
    margin: 0px 10px;
  }
}

----------------------------------------

TITLE: Formatting Slider Values with Intl.NumberFormat
DESCRIPTION: Example of applying custom formatting to the slider value using the formatOptions prop, which accepts options compatible with Intl.NumberFormat. This example formats the value as Japanese Yen.

LANGUAGE: tsx
CODE:
<Slider
  label="Currency"
  formatOptions={{style: 'currency', currency: 'JPY'}}
  defaultValue={60} />

----------------------------------------

TITLE: Setting Minimum Date Constraint in DateRangePicker
DESCRIPTION: Example of using the minValue prop to restrict date selection to dates after today, ensuring users cannot select past dates.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<Form>
  <MyDateRangePicker
    label="Trip dates"
    minValue={today(getLocalTimeZone())}
    defaultValue={{
      start: parseDate('2022-02-03'),
      end: parseDate('2022-05-03')
    }} />
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Implementing controlled CheckboxGroup with React state
DESCRIPTION: Example showing how to create a controlled CheckboxGroup component using React state to manage the selected values and the onChange handler to update the state.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState(['soccer', 'baseball']);

  return (
    <MyCheckboxGroup label="Favorite sports (controlled)" value={selected} onChange={setSelected}>
      <MyCheckbox value="soccer">Soccer</MyCheckbox>
      <MyCheckbox value="baseball">Baseball</MyCheckbox>
      <MyCheckbox value="basketball">Basketball</MyCheckbox>
    </MyCheckboxGroup>
  );
}

----------------------------------------

TITLE: Implementing Controlled Open State for Menu in React Spectrum
DESCRIPTION: This example demonstrates how to control the open state of a menu using React state. The isOpen and onOpenChange props allow for explicit control of when the menu is displayed.

LANGUAGE: tsx
CODE:
function Example() {
  let [open, setOpen] = React.useState(false);

  return (
    <>
      <p>Menu is {open ? 'open' : 'closed'}</p>
      <MenuButton
        label="View"
        isOpen={open}
        onOpenChange={setOpen}>
        <Item key="side">Side bar</Item>
        <Item key="options">Page options</Item>
        <Item key="edit">Edit Panel</Item>
      </MenuButton>
    </>
  );
}

----------------------------------------

TITLE: Running Jest Tests
DESCRIPTION: Command to execute Jest tests for the project.

LANGUAGE: bash
CODE:
yarn jest

----------------------------------------

TITLE: Creating Positive Variant Tooltip with Icon
DESCRIPTION: Example showing how to create a tooltip with positive styling and an icon using the variant and showIcon props.

LANGUAGE: tsx
CODE:
<TooltipTrigger>
  <ActionButton aria-label="Approve"><ThumbUp /></ActionButton>
  <Tooltip variant="positive" showIcon>Approve workflow.</Tooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Using Router Component with Breadcrumbs and Links
DESCRIPTION: Example showing how to use the custom Router component with Breadcrumbs and Link components to create a navigation system with history tracking.

LANGUAGE: tsx
CODE:
<Router>
  <Breadcrumbs>
    {(item: RouterItem) => <Breadcrumb><Link>{item.label}</Link></Breadcrumb>}
  </Breadcrumbs>
  <ul>
    <li><Link>Breadcrumbs</Link></li>
    <li><Link>Button</Link></li>
    <li><Link>Calendar</Link></li>
  </ul>
</Router>

----------------------------------------

TITLE: Importing ColorSlider Component in React
DESCRIPTION: Basic import statement for the ColorSlider component from React Spectrum's color package along with Flex from the layout package.

LANGUAGE: jsx
CODE:
import {ColorSlider} from '@react-spectrum/color';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Configuring Disabled Behavior in React Spectrum Table
DESCRIPTION: This example shows how to configure the disabledBehavior prop to disable all interactions on disabled rows, not just selection. When set to 'all', focus, dragging, and actions are also disabled on rows marked as disabled.

LANGUAGE: tsx
CODE:
<Table
  aria-label="Table with disabled rows"
  selectionMode="multiple"
  disabledBehavior="all"
>
  <MyTableHeader>
    <Column isRowHeader>Name</Column>
    <Column>Type</Column>
    <Column>Level</Column>
  </MyTableHeader>
  <TableBody>
    <MyRow>
      <Cell>Charizard</Cell>
      <Cell>Fire, Flying</Cell>
      <Cell>67</Cell>
    </MyRow>
    <MyRow isDisabled>
      <Cell>Venusaur</Cell>
      <Cell>Grass, Poison</Cell>
      <Cell>83</Cell>
    </MyRow>
    <MyRow>
      <Cell>Pikachu</Cell>
      <Cell>Electric</Cell>
      <Cell>100</Cell>
    </MyRow>
  </TableBody>
</Table>

----------------------------------------

TITLE: TextArea with Contextual Help in React Spectrum
DESCRIPTION: Shows how to add contextual help to a TextArea component using the ContextualHelp component.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<TextArea
  label="Comment"
  contextualHelp={
    <ContextualHelp variant="info">
      <Heading>Comment tips</Heading>
      <Content>Comments will be screened prior to being published. Please be nice!</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Referencing React Aria Link Package in Markdown
DESCRIPTION: A simple markdown reference to the @react-aria/link package, indicating it is part of the React Spectrum project with a link to the main repository.

LANGUAGE: markdown
CODE:
# @react-aria/link

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Controlled Checkbox with React State
DESCRIPTION: An example demonstrating a controlled checkbox component where the selection state is managed by React state and updated via the onChange handler.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelection] = React.useState(false);

  return (
    <>
      <Checkbox isSelected={selected} onChange={setSelection}>
        Subscribe
      </Checkbox>
      <p>{`You are ${selected ? 'subscribed' : 'unsubscribed'}`}</p>
    </>
  );
 }

----------------------------------------

TITLE: Listing Released React Spectrum Ecosystem Packages with Versions
DESCRIPTION: A comprehensive list of all packages released in the React Spectrum ecosystem, including React Aria, React Stately, React Spectrum components, React Types, and Spectrum Icons packages. Each package is listed with its corresponding version number, representing a specific release state.

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum@3.32.0
- @internationalized/number@3.4.0
- @react-aria/accordion@3.0.0-alpha.24
- @react-aria/actiongroup@3.7.0
- @react-aria/aria-modal-polyfill@3.7.7
- @react-aria/autocomplete@3.0.0-alpha.23
- @react-aria/breadcrumbs@3.5.8
- @react-aria/button@3.9.0
- @react-aria/calendar@3.5.3
- @react-aria/checkbox@3.12.0
- @react-aria/color@3.0.0-beta.27
- @react-aria/combobox@3.8.0
- @react-aria/datepicker@3.9.0
- @react-aria/dialog@3.5.8
- @react-aria/dnd@3.5.0
- @react-aria/focus@3.15.0
- @react-aria/form@3.0.0
- @react-aria/grid@3.8.5
- @react-aria/gridlist@3.7.2
- @react-aria/i18n@3.9.0
- @react-aria/interactions@3.20.0
- @react-aria/label@3.7.3
- @react-aria/landmark@3.0.0-beta.7
- @react-aria/link@3.6.2
- @react-aria/listbox@3.11.2
- @react-aria/menu@3.11.2
- @react-aria/meter@3.4.8
- @react-aria/numberfield@3.10.0
- @react-aria/overlays@3.19.0
- @react-aria/progress@3.4.8
- @react-aria/radio@3.9.0
- @react-aria/searchfield@3.6.0
- @react-aria/select@3.14.0
- @react-aria/selection@3.17.2
- @react-aria/separator@3.3.8
- @react-aria/slider@3.7.3
- @react-aria/spinbutton@3.6.0
- @react-aria/ssr@3.9.0
- @react-aria/steplist@3.0.0-alpha.0
- @react-aria/switch@3.5.7
- @react-aria/table@3.13.2
- @react-aria/tabs@3.8.2
- @react-aria/tag@3.3.0
- @react-aria/textfield@3.13.0
- @react-aria/toast@3.0.0-beta.7
- @react-aria/toggle@3.9.0
- @react-aria/toolbar@3.0.0-beta.0
- @react-aria/tooltip@3.6.5
- @react-aria/utils@3.22.0
- @react-aria/virtualizer@3.9.5
- @react-aria/visually-hidden@3.8.7
- @react-spectrum/accordion@3.0.0-alpha.26
- @react-spectrum/actionbar@3.4.0
- @react-spectrum/actiongroup@3.10.0
- @react-spectrum/autocomplete@3.0.0-alpha.24
- @react-spectrum/avatar@3.0.7
- @react-spectrum/badge@3.1.8
- @react-spectrum/breadcrumbs@3.9.2
- @react-spectrum/button@3.15.0
- @react-spectrum/buttongroup@3.6.8
- @react-spectrum/calendar@3.4.3
- @react-spectrum/card@3.0.0-alpha.25
- @react-spectrum/checkbox@3.9.0
- @react-spectrum/color@3.0.0-beta.28
- @react-spectrum/combobox@3.11.0
- @react-spectrum/contextualhelp@3.6.5
- @react-spectrum/datepicker@3.9.0
- @react-spectrum/dialog@3.8.5
- @react-spectrum/divider@3.5.8
- @react-spectrum/dnd@3.3.5
- @react-spectrum/dropzone@3.0.0-beta.0
- @react-spectrum/form@3.7.0
- @react-spectrum/icon@3.7.8
- @react-spectrum/illustratedmessage@3.4.8
- @react-spectrum/image@3.4.8
- @react-spectrum/inlinealert@3.2.0
- @react-spectrum/label@3.16.0
- @react-spectrum/labeledvalue@3.1.8
- @react-spectrum/layout@3.6.0
- @react-spectrum/link@3.6.2
- @react-spectrum/list@3.7.2
- @react-spectrum/listbox@3.12.2
- @react-spectrum/menu@3.16.0
- @react-spectrum/meter@3.4.8
- @react-spectrum/numberfield@3.8.0
- @react-spectrum/overlays@5.5.2
- @react-spectrum/picker@3.13.0
- @react-spectrum/progress@3.7.2
- @react-spectrum/provider@3.9.2
- @react-spectrum/radio@3.7.0
- @react-spectrum/searchfield@3.8.0
- @react-spectrum/slider@3.6.4
- @react-spectrum/statuslight@3.5.8
- @react-spectrum/steplist@3.0.0-alpha.0
- @react-spectrum/switch@3.5.0
- @react-spectrum/table@3.12.2
- @react-spectrum/tabs@3.8.2
- @react-spectrum/tag@3.2.0
- @react-spectrum/text@3.5.0
- @react-spectrum/textfield@3.11.0
- @react-spectrum/theme-dark@3.5.7
- @react-spectrum/theme-default@3.5.7
- @react-spectrum/theme-express@3.0.0-alpha.9
- @react-spectrum/theme-light@3.4.7
- @react-spectrum/toast@3.0.0-beta.7
- @react-spectrum/tooltip@3.6.2
- @react-spectrum/utils@3.11.2
- @react-spectrum/view@3.6.5
- @react-spectrum/well@3.4.8
- @react-stately/calendar@3.4.2
- @react-stately/checkbox@3.6.0
- @react-stately/collections@3.10.3
- @react-stately/color@3.5.0
- @react-stately/combobox@3.8.0
- @react-stately/data@3.11.0
- @react-stately/datepicker@3.9.0
- @react-stately/dnd@3.2.6
- @react-stately/form@3.0.0
- @react-stately/grid@3.8.3
- @react-stately/layout@3.13.4
- @react-stately/list@3.10.1
- @react-stately/menu@3.5.7
- @react-stately/numberfield@3.7.0
- @react-stately/overlays@3.6.4
- @react-stately/radio@3.10.0
- @react-stately/searchfield@3.5.0
- @react-stately/select@3.6.0
- @react-stately/selection@3.14.1
- @react-stately/slider@3.4.5
- @react-stately/steplist@3.0.0-alpha.0
- @react-stately/table@3.11.3
- @react-stately/tabs@3.6.2
- @react-stately/toggle@3.7.0
- @react-stately/tooltip@3.4.6
- @react-stately/tree@3.7.4
- @react-stately/utils@3.9.0
- @react-stately/virtualizer@3.6.5
- @react-types/accordion@3.0.0-alpha.18
- @react-types/actionbar@3.1.4
- @react-types/actiongroup@3.4.6
- @react-types/autocomplete@3.0.0-alpha.18
- @react-types/avatar@3.0.4
- @react-types/badge@3.1.6
- @react-types/breadcrumbs@3.7.2
- @react-types/button@3.9.1
- @react-types/buttongroup@3.3.6
- @react-types/calendar@3.4.2
- @react-types/card@3.0.0-alpha.21
- @react-types/checkbox@3.6.0
- @react-types/color@3.0.0-beta.21
- @react-types/combobox@3.9.0
- @react-types/contextualhelp@3.2.7
- @react-types/datepicker@3.7.0
- @react-types/dialog@3.5.7
- @react-types/divider@3.3.6
- @react-types/form@3.6.0
- @react-types/grid@3.2.3
- @react-types/illustratedmessage@3.3.6
- @react-types/image@3.3.6
- @react-types/label@3.9.0
- @react-types/layout@3.3.12
- @react-types/link@3.5.2
- @react-types/list@3.2.9
- @react-types/listbox@3.4.6
- @react-types/menu@3.9.6
- @react-types/meter@3.3.6
- @react-types/numberfield@3.7.0
- @react-types/overlays@3.8.4
- @react-types/progress@3.5.1
- @react-types/provider@3.7.1
- @react-types/radio@3.6.0
- @react-types/searchfield@3.5.2
- @react-types/select@3.9.0
- @react-types/shared@3.22.0
- @react-types/slider@3.7.0
- @react-types/statuslight@3.3.6
- @react-types/switch@3.5.0
- @react-types/table@3.9.1
- @react-types/tabs@3.3.4
- @react-types/text@3.3.6
- @react-types/textfield@3.9.0
- @react-types/tooltip@3.4.6
- @react-types/view@3.4.6
- @react-types/well@3.3.6
- @spectrum-icons/color@3.5.8
- @spectrum-icons/express@3.0.0-alpha.12
- @spectrum-icons/illustrations@3.6.8
- @spectrum-icons/ui@3.6.2
- @spectrum-icons/workflow@4.2.7
- react-aria@3.30.0
- react-aria-components@1.0.0-rc.0
- react-stately@3.28.0
- tailwindcss-react-aria-components@1.0.0-rc.0

----------------------------------------

TITLE: Icon-only ActionButton with Accessibility Label
DESCRIPTION: Demonstrates how to create an icon-only ActionButton with proper accessibility through the aria-label attribute.

LANGUAGE: tsx
CODE:
<ActionButton aria-label="Icon only">
  <Edit />
</ActionButton>

----------------------------------------

TITLE: Menu Testing Example with React Spectrum Test Utils
DESCRIPTION: Example of how to test MenuTrigger components using the React Spectrum test utilities, including menu opening and submenu interactions.

LANGUAGE: ts
CODE:
// Menu.test.ts
import {render} from '@testing-library/react';
import {theme} from '@react-spectrum/theme-default';
import {User} from '@react-spectrum/test-utils';

let testUtilUser = new User({interactionType: 'mouse'});
// ...

it('Menu can open its submenu via keyboard', async function () {
  // Render your test component/app and initialize the menu tester
  let {getByTestId} = render(
    <Provider theme={defaultTheme}>
      <MenuTrigger>
        <Button data-testid="test-menutrigger">Menu trigger</Button>
        ...
      </MenuTrigger>
    </Provider>
  );
  let menuTester = testUtilUser.createTester('Menu', {root: getByTestId('test-menutrigger'), interactionType: 'keyboard'});

  await menuTester.open();
  expect(menuTester.menu).toBeInTheDocument();
  let submenuTriggers = menuTester.submenuTriggers;
  expect(submenuTriggers).toHaveLength(1);

  let submenuTester = await menuTester.openSubmenu({submenuTrigger: 'Share…'});
  expect(submenuTester.menu).toBeInTheDocument();

  await submenuTester.selectOption({option: submenuTester.options()[0]});
  expect(submenuTester.menu).not.toBeInTheDocument();
  expect(menuTester.menu).not.toBeInTheDocument();
});

----------------------------------------

TITLE: Creating and Manipulating CalendarDate with Internationalized Date Library in TSX
DESCRIPTION: Example demonstrating how to construct a CalendarDate object, add a week to it, find the start of the week according to US locale rules, and convert it to a string representation. This illustrates the basic workflow for date manipulation using the library.

LANGUAGE: tsx
CODE:
import {CalendarDate, startOfWeek} from '@internationalized/date';

let date = new CalendarDate(2022, 2, 3);
date = date.add({weeks: 1});
date = startOfWeek(date, 'en-US');
date.toString(); // 2022-02-06

----------------------------------------

TITLE: Integrating Slider with HTML Forms
DESCRIPTION: Example showing how to use the name prop to integrate a slider with HTML forms. This allows the slider value to be included when submitting the form.

LANGUAGE: tsx
CODE:
<Slider
  label="Opacity"
  defaultValue={50}
  name="opacity" />

----------------------------------------

TITLE: Installing React Aria Test Utils
DESCRIPTION: This code snippet shows how to install the @react-aria/test-utils package using yarn. This package provides specialized testing utilities for React Aria components.

LANGUAGE: bash
CODE:
yarn add --dev @react-aria/test-utils

----------------------------------------

TITLE: Creating Disabled Tooltip in TSX
DESCRIPTION: Example showing how to disable a tooltip without disabling its trigger using the isDisabled prop.

LANGUAGE: tsx
CODE:
<TooltipButton tooltip="Print" isDisabled>🖨</TooltipButton>

----------------------------------------

TITLE: Allowing Non-Contiguous Date Ranges with Weekend Restrictions
DESCRIPTION: Demonstrates how to allow selecting date ranges that span unavailable dates using the allowsNonContiguousRanges prop, with weekends marked as unavailable.

LANGUAGE: tsx
CODE:
import {isWeekend} from '@internationalized/date';

function Example() {
  let {locale} = useLocale();

  return <RangeCalendar aria-label="Time off request" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />
}

----------------------------------------

TITLE: Implementing Press Interaction Handling with usePress Hook in React
DESCRIPTION: This example demonstrates how to use the usePress hook to handle press events in a React component. It tracks press states and logs events to a list, while also using the isPressed state to update the visual appearance of the target element.

LANGUAGE: tsx
CODE:
import {usePress} from '@react-aria/interactions';

function Example() {
  let [events, setEvents] = React.useState([]);
  let {pressProps, isPressed} = usePress({
    onPressStart: e => setEvents(
      events => [...events, `press start with ${e.pointerType}`]
    ),
    onPressEnd: e => setEvents(
      events => [...events, `press end with ${e.pointerType}`]
    ),
    onPress: e => setEvents(
      events => [...events, `press with ${e.pointerType}`]
    )
  });

  return (
    <>
      <div
        {...pressProps}
        style={{
          background: isPressed ? 'darkgreen' : 'green',
          color: 'white',
          display: 'inline-block',
          padding: 4,
          cursor: 'pointer'
        }}
        role="button"
        tabIndex={0}>
        Press me!
      </div>
      <ul
        style={{
          maxHeight: '200px',
          overflow: 'auto'
        }}>
        {events.map((e, i) => <li key={i}>{e}</li>)}
      </ul>
    </>
  );
}

----------------------------------------

TITLE: Implementing Controlled and Uncontrolled Autocomplete in React Spectrum
DESCRIPTION: This example demonstrates how to implement both controlled and uncontrolled Autocomplete components with default and managed input values. It shows a list of Adobe products with both value management approaches.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, name: 'Adobe Photoshop'},
    {id: 2, name: 'Adobe XD'},
    {id: 3, name: 'Adobe InDesign'},
    {id: 4, name: 'Adobe AfterEffects'},
    {id: 5, name: 'Adobe Illustrator'},
    {id: 6, name: 'Adobe Lightroom'},
    {id: 7, name: 'Adobe Premiere Pro'},
    {id: 8, name: 'Adobe Fresco'},
    {id: 9, name: 'Adobe Dreamweaver'}
  ];
  let [value, setValue] = React.useState('Adobe XD');

  return (
    <div style={{display: 'flex', gap: 16, flexWrap: 'wrap'}}>
      <MyAutocomplete
        label="Adobe products (Uncontrolled)"
        items={options}
        /*- begin highlight -*/
        defaultInputValue="Adobe XD">
        {/*- end highlight -*/}
        {item => <MenuItem>{item.name}</MenuItem>}
      </MyAutocomplete>

      <MyAutocomplete
        label="Adobe products (Controlled)"
        items={options}
        /*- begin highlight -*/
        inputValue={value}
        onInputChange={setValue}>
        {/*- end highlight -*/}
        {item => <MenuItem>{item.name}</MenuItem>}
      </MyAutocomplete>
    </div>
  );
}

----------------------------------------

TITLE: Using Data Attributes for State-Based Styling
DESCRIPTION: Demonstrates how to target different UI states of a React Aria component using data attributes in CSS selectors.

LANGUAGE: css
CODE:
.react-aria-Checkbox[data-pressed] {
  /* ... */
}

----------------------------------------

TITLE: Importing ColorArea component in React Spectrum
DESCRIPTION: Shows how to import the ColorArea component along with other related layout components from React Spectrum libraries.

LANGUAGE: jsx
CODE:
import {ColorArea, ColorSlider, ColorWheel} from '@react-spectrum/color';
import {Flex, Grid} from '@react-spectrum/layout';
import {Label} from '@react-spectrum/label';
import {View} from '@react-spectrum/view';

----------------------------------------

TITLE: Importing TableView Components from React Spectrum
DESCRIPTION: Basic imports needed to use the TableView component and related elements from the React Spectrum library.

LANGUAGE: jsx
CODE:
import {ActionButton} from '@react-spectrum/button';
import Add from '@spectrum-icons/workflow/Add';
import {Cell, Column, Row, TableView, TableBody, TableHeader} from '@react-spectrum/table';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: LabeledValue with List Values
DESCRIPTION: Shows how to display an array of strings as a comma-separated list according to the user's locale.

LANGUAGE: tsx
CODE:
<LabeledValue label="Pizza toppings" value={['Pepperoni', 'Pineapple', 'Mushroom', 'Garlic']} />

----------------------------------------

TITLE: Quiet TextArea in React Spectrum
DESCRIPTION: Demonstrates the quiet variant of the TextArea component with minimal visual styling.

LANGUAGE: tsx
CODE:
<TextArea label="Email" isQuiet />

----------------------------------------

TITLE: CSS Styling for Menu Components
DESCRIPTION: CSS styles for menu, menu items, radio items, and checkbox items with proper hover and focus styles for accessibility.

LANGUAGE: css
CODE:
[role=menu] {
  margin: 0;
  padding: 0;
  list-style: none;
  width: 200px;
}

[role=menuitem],
[role=menuitemradio],
[role=menuitemcheckbox] {
  padding: 2px 5px;
  outline: none;
  cursor: default;
  display: flex;
  justify-content: space-between;
  color: black;

  &:focus {
    background: gray;
    color: white;
  }

  &[aria-disabled] {
    color: gray;
  }
}

----------------------------------------

TITLE: Customizing First Day of Week in Calendar Component
DESCRIPTION: Example demonstrating how to customize the first day of the week in a Calendar component using the firstDayOfWeek prop. This can be set to any day from 'sun' to 'sat'.

LANGUAGE: tsx
CODE:
<Calendar aria-label="Event date" value={today(getLocalTimeZone())} firstDayOfWeek="mon" />

----------------------------------------

TITLE: Using Custom Heading Component Within RangeCalendar
DESCRIPTION: Example showing how to use a custom heading component within a RangeCalendar in place of the built-in React Aria Components Heading.

LANGUAGE: tsx
CODE:
<RangeCalendar>
  {/*- begin highlight -*/}
  <MyCustomHeading />
  {/*- end highlight -*/}
  {/* ... */}
</RangeCalendar>

----------------------------------------

TITLE: Handling Drop Operations with Switch Statement in TypeScript React
DESCRIPTION: This snippet demonstrates how to handle different drop operations (move, copy, link) in a TypeScript React component. It parses data from the drop event and calls appropriate service methods based on the dropOperation property.

LANGUAGE: tsx
CODE:
let onItemDrop = async (e) => {
  let data = JSON.parse(await e.items[0].getText('my-app-file'));
  /*- begin highlight -*/
  switch (e.dropOperation) {
    case 'move':
      MyAppFileService.move(data.filePath, props.filePath);
      break;
    case 'copy':
      MyAppFileService.copy(data.filePath, props.filePath);
      break;
    case 'link':
      MyAppFileService.link(data.filePath, props.filePath);
      break;
  }
  /*- end highlight -*/
};

----------------------------------------

TITLE: Creating the ToastRegion Component with useToastRegion
DESCRIPTION: Implements a ToastRegion component using the useToastRegion hook to create an accessible landmark region for toast notifications, mapping through the visible toasts.

LANGUAGE: tsx
CODE:
import type {AriaToastRegionProps} from '@react-aria/toast';
import type {ToastState} from '@react-stately/toast';
import {useToastRegion} from '@react-aria/toast';

interface ToastRegionProps<T> extends AriaToastRegionProps {
  state: ToastState<T>
}

function ToastRegion<T extends React.ReactNode>({state, ...props}: ToastRegionProps<T>) {
  let ref = React.useRef(null);
  let {regionProps} = useToastRegion(props, state, ref);

  return (
    <div {...regionProps} ref={ref} className="toast-region">
      {state.visibleToasts.map(toast => (
        <Toast key={toast.key} toast={toast} state={state} />
      ))}
    </div>
  );
}

----------------------------------------

TITLE: Custom 4-5-4 Calendar System Implementation
DESCRIPTION: Creates a custom fiscal calendar that follows a 4-5-4 week format by extending the GregorianCalendar class from @internationalized/date, implementing custom date calculations.

LANGUAGE: tsx
CODE:
import {GregorianCalendar} from '@internationalized/date';

function Example() {
  return <MyCalendar firstDayOfWeek="sun" createCalendar={() => new Custom454()} />;
}

class Custom454 extends GregorianCalendar {
  // See @internationalized/date docs linked above...
  ///- begin collapse -///
  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];
  getDaysInMonth(date) {
    return this.weekPattern[date.month - 1] * 7;
  }

  fromJulianDay(jd: number): CalendarDate {
    let gregorian = super.fromJulianDay(jd);

    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');
    for (let months = 0; months < this.weekPattern.length; months++) {
      let weeksInMonth = this.weekPattern[months];
      let monthEnd = monthStart.add({weeks: weeksInMonth});
      if (monthEnd.compare(gregorian) > 0) {
        let days = gregorian.compare(monthStart);
        return new CalendarDate(this, monthStart.year, months + 1, days + 1);
      }
      monthStart = monthEnd;
    }

    throw Error('Date is not in any month somehow!');
  }

  toJulianDay(date: AnyCalendarDate): number {
    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');
    for (let month = 1; month < date.month; month++) {
      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});
    }

    let gregorian = monthStart.add({days: date.day - 1});
    return super.toJulianDay(gregorian);
  }

  getFormattableMonth(date) {
    let gregorian = toCalendar(date, new GregorianCalendar());
    return gregorian.set({month: date.month, day: 1});
  }

  isEqual(other) {
    return other instanceof Custom454;
  }
 ///- end collapse -///
}

----------------------------------------

TITLE: Custom 4-5-4 Calendar System Implementation
DESCRIPTION: Creates a custom fiscal calendar that follows a 4-5-4 week format by extending the GregorianCalendar class from @internationalized/date, implementing custom date calculations.

LANGUAGE: tsx
CODE:
import {GregorianCalendar} from '@internationalized/date';

function Example() {
  return <MyCalendar firstDayOfWeek="sun" createCalendar={() => new Custom454()} />;
}

class Custom454 extends GregorianCalendar {
  // See @internationalized/date docs linked above...
  ///- begin collapse -///
  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];
  getDaysInMonth(date) {
    return this.weekPattern[date.month - 1] * 7;
  }

  fromJulianDay(jd: number): CalendarDate {
    let gregorian = super.fromJulianDay(jd);

    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');
    for (let months = 0; months < this.weekPattern.length; months++) {
      let weeksInMonth = this.weekPattern[months];
      let monthEnd = monthStart.add({weeks: weeksInMonth});
      if (monthEnd.compare(gregorian) > 0) {
        let days = gregorian.compare(monthStart);
        return new CalendarDate(this, monthStart.year, months + 1, days + 1);
      }
      monthStart = monthEnd;
    }

    throw Error('Date is not in any month somehow!');
  }

  toJulianDay(date: AnyCalendarDate): number {
    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');
    for (let month = 1; month < date.month; month++) {
      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});
    }

    let gregorian = monthStart.add({days: date.day - 1});
    return super.toJulianDay(gregorian);
  }

  getFormattableMonth(date) {
    let gregorian = toCalendar(date, new GregorianCalendar());
    return gregorian.set({month: date.month, day: 1});
  }

  isEqual(other) {
    return other instanceof Custom454;
  }
 ///- end collapse -///
}

----------------------------------------

TITLE: Implementing Disabled ColorArea Component in React Spectrum
DESCRIPTION: This example demonstrates how to create a disabled ColorArea component. When disabled, users cannot interact with or change the color value.

LANGUAGE: tsx
CODE:
import {ColorArea} from '@react-spectrum/color';

<ColorArea defaultValue="#7f0000" isDisabled />

----------------------------------------

TITLE: Disabled Link in React Aria
DESCRIPTION: Example showing a disabled Link component that prevents navigation and interaction.

LANGUAGE: tsx
CODE:
<Link isDisabled href="https://adobe.com" target="_blank">Disabled link</Link>

----------------------------------------

TITLE: Implementing Tree Component with React Aria Components
DESCRIPTION: Example showing how to implement a Tree component with multiple hierarchical items, selection functionality, and interactive buttons. Uses React Aria Components library with default expanded and selected keys.

LANGUAGE: tsx
CODE:
import {
  Tree,
  TreeItem,
  TreeItemContent,
  Button,
  Collection
} from 'react-aria-components';

<Tree aria-label="Files" style={{height: '300px'}} defaultExpandedKeys={['documents', 'photos', 'project']} selectionMode="multiple" defaultSelectedKeys={['photos']}>
  <TreeItem id="documents" textValue="Documents">
    <MyTreeItemContent>
      Documents
      <Button aria-label="Info">ⓘ</Button>
    </MyTreeItemContent>
    <TreeItem id="project" textValue="Project">
      <MyTreeItemContent>
        Project
        <Button aria-label="Info">ⓘ</Button>
      </MyTreeItemContent>
      <TreeItem id="report" textValue="Weekly Report">
        <MyTreeItemContent>
          Weekly Report
          <Button aria-label="Info">ⓘ</Button>
        </MyTreeItemContent>
      </TreeItem>
    </TreeItem>
  </TreeItem>
  <TreeItem id="photos" textValue="Photos">
    <MyTreeItemContent>
      Photos
      <Button aria-label="Info">ⓘ</Button>
    </MyTreeItemContent>
    <TreeItem id="one" textValue="Image 1">
      <MyTreeItemContent>
        Image 1
        <Button aria-label="Info">ⓘ</Button>
      </MyTreeItemContent>
    </TreeItem>
    <TreeItem id="two" textValue="Image 2">
      <MyTreeItemContent>
        Image 2
        <Button aria-label="Info">ⓘ</Button>
      </MyTreeItemContent>
    </TreeItem>
  </TreeItem>
</Tree>

----------------------------------------

TITLE: Implementing Validation with Field Error in TimeField
DESCRIPTION: Example showing how to implement validation in a TimeField using isRequired prop and the FieldError component to display validation messages.

LANGUAGE: tsx
CODE:
import {Form, FieldError, Button} from 'react-aria-components';

<Form>
  {/*- begin highlight -*/}
  <TimeField name="time" isRequired>
  {/*- end highlight -*/}
    <Label>Meeting time</Label>
    <DateInput>
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    {/*- begin highlight -*/}
    <FieldError />
    {/*- end highlight -*/}
  </TimeField>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Implementing Validation with Field Error in TimeField
DESCRIPTION: Example showing how to implement validation in a TimeField using isRequired prop and the FieldError component to display validation messages.

LANGUAGE: tsx
CODE:
import {Form, FieldError, Button} from 'react-aria-components';

<Form>
  {/*- begin highlight -*/}
  <TimeField name="time" isRequired>
  {/*- end highlight -*/}
    <Label>Meeting time</Label>
    <DateInput>
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    {/*- begin highlight -*/}
    <FieldError />
    {/*- end highlight -*/}
  </TimeField>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Styling Tabs with CSS in React Aria Components
DESCRIPTION: CSS styling for the Tabs component, including styles for different states like hover, focus, selected, and disabled. The CSS handles both horizontal and vertical orientations with appropriate visual indicators.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Tabs {
  display: flex;
  color: var(--text-color);

  &[data-orientation=horizontal] {
    flex-direction: column;
  }
}

.react-aria-TabList {
  display: flex;

  &[data-orientation=horizontal] {
    border-bottom: 1px solid var(--border-color);

    .react-aria-Tab {
      border-bottom: 3px solid var(--border-color);
    }
  }
}

.react-aria-Tab {
  padding: 10px;
  cursor: default;
  outline: none;
  position: relative;
  color: var(--text-color-base);
  transition: color 200ms;
  --border-color: transparent;
  forced-color-adjust: none;

  &[data-hovered],
  &[data-focused] {
    color: var(--text-color-hover);
  }

  &[data-selected] {
    --border-color: var(--highlight-background);
    color: var(--text-color);
  }

  &[data-disabled] {
    color: var(--text-color-disabled);
    &[data-selected] {
      --border-color: var(--text-color-disabled);
    }
  }

  &[data-focus-visible]:after {
    content: '';
    position: absolute;
    inset: 4px;
    border-radius: 4px;
    border: 2px solid var(--focus-ring-color);
  }
}

.react-aria-TabPanel {
  margin-top: 4px;
  padding: 10px;
  border-radius: 4px;
  outline: none;

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
  }
}

----------------------------------------

TITLE: ProgressBar Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This comparison shows differences in ProgressBar support between versions, with Spectrum 2 supporting slot property and more size options, and RSP v3 having variant, labelPosition, and showValueLabel properties not available in S2.

LANGUAGE: typescript
CODE:
slot | 🟢 `null \| string` | –
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | 🔴 `'L' \| 'S'`
variant | – | 🔴 `'overBackground'`
labelPosition | – | 🔴 `LabelPosition`
showValueLabel | – | 🔴 `boolean`

----------------------------------------

TITLE: Quiet TimeField Implementation
DESCRIPTION: Example showing a TimeField in quiet mode, which provides a more minimal visual appearance.

LANGUAGE: tsx
CODE:
<TimeField label="Event time" isQuiet />

----------------------------------------

TITLE: Importing Documentation Dependencies for React Spectrum
DESCRIPTION: Imports documentation components and data needed to render the documentation page for the useToggleState hook, including package metadata and API documentation utilities.

LANGUAGE: JavaScript
CODE:
import docs from 'docs:@react-stately/toggle';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/toggle/package.json';

----------------------------------------

TITLE: Basic Disclosure Component Example
DESCRIPTION: Demonstrates a basic implementation of the Disclosure component with a title and content panel about system requirements.

LANGUAGE: tsx
CODE:
<Disclosure>
  <DisclosureTitle>System Requirements</DisclosureTitle>
  <DisclosurePanel>
    Details about system requirements here.
  </DisclosurePanel>
</Disclosure>

----------------------------------------

TITLE: Using Tabs with Default Selection in React
DESCRIPTION: Example showing how to specify a default selected tab using the defaultSelectedKey prop. This prop should match one of the key values provided to the Item components that make up the tab list.

LANGUAGE: tsx
CODE:
<Tabs aria-label="Input settings" defaultSelectedKey="keyboard">
  <Item key="mouse">Mouse Settings</Item>
  <Item key="keyboard">Keyboard Settings</Item>
  <Item key="gamepad">Gamepad Settings</Item>
</Tabs>

----------------------------------------

TITLE: Setting ListView Overflow Mode to Wrap in React Spectrum
DESCRIPTION: Example demonstrating how to configure a ListView to wrap overflowing text instead of truncating it by using the overflowMode prop set to 'wrap'.

LANGUAGE: tsx
CODE:
<ListExample overflowMode="wrap" aria-label="Text wrapping ListView example" width="size-2000" />

----------------------------------------

TITLE: Using List with Multiple Selection Mode
DESCRIPTION: Demonstrates using the List component with multiple selection mode. This example sets multiple default selected keys to show how multiple items can be pre-selected.

LANGUAGE: tsx
CODE:
<ExampleList aria-label="List with multiple selection" selectionMode="multiple" defaultSelectedKeys={[2, 4]} />

----------------------------------------

TITLE: Implementing a Card Component with Grid and Slots in React
DESCRIPTION: Implementation of a Card component using the proposed Grid component with slots. The component defines default slot mappings and renders a grid container with predefined areas for children.

LANGUAGE: jsx
CODE:
export const Card = (props) => {
  let defaults = {slots: {
      container: {UNSAFE_className: classNames(styles, 'container')},
      preview: {UNSAFE_className: classNames(styles, 'preview')},
      avatar: {UNSAFE_className: classNames(styles, 'avatar')},
      title: {UNSAFE_className: classNames(styles, 'title')},
      footer: {UNSAFE_className: classNames(styles, 'footer')},
      divider: {UNSAFE_className: classNames(styles, 'divider')},
      buttonGroup: {UNSAFE_className: classNames(styles, 'buttonGroup')}
    }};
  let {slots} = {...defaults, ...props};

  return (
    <div className={classNames(styles, 'spectrum-Card')}>
      <Grid slots={slots}>
        <Image slot="preview" />
        <Avatar slot="avatar" />
        <Flex slot="title">
          <Title>Title</Title>
          <Button>More</Button>
        </Flex>
        <Description slot="description">Description</Description>
        <ButtonGroup slot="footer">Final remarks</ButtonGroup>
      </Grid>
    </div>
  );
};

----------------------------------------

TITLE: Importing Documentation Dependencies
DESCRIPTION: Imports necessary components and data for rendering the API documentation, including hooks documentation, component classes, and package metadata.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/table';
import {ClassAPI, HeaderInfo, FunctionAPI, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/table/package.json';

----------------------------------------

TITLE: Creating Static Nested Columns in React Spectrum Table
DESCRIPTION: This example shows how to create nested column structures in a Table component with static column definitions. It demonstrates the use of hierarchical column grouping and the isRowHeader prop to include columns in row accessibility names.

LANGUAGE: tsx
CODE:
<Table aria-label="Example table with nested columns">
  <TableHeader>
    <Column title="Name">
      <Column isRowHeader>First Name</Column>
      <Column isRowHeader>Last Name</Column>
    </Column>
    <Column title="Information">
      <Column>Age</Column>
      <Column>Birthday</Column>
    </Column>
  </TableHeader>
  <TableBody>
    <Row>
      <Cell>Sam</Cell>
      <Cell>Smith</Cell>
      <Cell>36</Cell>
      <Cell>May 3</Cell>
    </Row>
    <Row>
      <Cell>Julia</Cell>
      <Cell>Jones</Cell>
      <Cell>24</Cell>
      <Cell>February 10</Cell>
    </Row>
    <Row>
      <Cell>Peter</Cell>
      <Cell>Parker</Cell>
      <Cell>28</Cell>
      <Cell>September 7</Cell>
    </Row>
    <Row>
      <Cell>Bruce</Cell>
      <Cell>Wayne</Cell>
      <Cell>32</Cell>
      <Cell>December 18</Cell>
    </Row>
  </TableBody>
</Table>

----------------------------------------

TITLE: Listing Released React Spectrum Ecosystem Packages with Versions
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem, including component libraries, accessibility hooks, state management utilities, type definitions, and icons. Each package is specified with its current version number.

LANGUAGE: markdown
CODE:
 - @adobe/react-spectrum@3.18.0
 - @internationalized/date@3.0.0-rc.1
 - @internationalized/message@3.0.7
 - @internationalized/number@3.1.1
 - @react-aria/accordion@3.0.0-alpha.8
 - @react-aria/actiongroup@3.3.0
 - @react-aria/aria-modal-polyfill@3.5.0
 - @react-aria/autocomplete@3.0.0-alpha.7
 - @react-aria/breadcrumbs@3.2.0
 - @react-aria/button@3.5.0
 - @react-aria/calendar@3.0.0-rc.1
 - @react-aria/checkbox@3.4.0
 - @react-aria/color@3.0.0-beta.12
 - @react-aria/combobox@3.3.0
 - @react-aria/datepicker@3.0.0-rc.1
 - @react-aria/dialog@3.2.0
 - @react-aria/dnd@3.0.0-alpha.9
 - @react-aria/focus@3.6.0
 - @react-aria/grid@3.3.0
 - @react-aria/i18n@3.4.0
 - @react-aria/interactions@3.9.0
 - @react-aria/label@3.3.0
 - @react-aria/link@3.3.0
 - @react-aria/list@3.0.0-alpha.0
 - @react-aria/listbox@3.5.0
 - @react-aria/live-announcer@3.1.0
 - @react-aria/menu@3.5.0
 - @react-aria/meter@3.2.0
 - @react-aria/numberfield@3.2.0
 - @react-aria/overlays@3.9.0
 - @react-aria/progress@3.2.0
 - @react-aria/radio@3.2.0
 - @react-aria/searchfield@3.3.0
 - @react-aria/select@3.7.0
 - @react-aria/selection@3.9.0
 - @react-aria/separator@3.2.0
 - @react-aria/slider@3.1.0
 - @react-aria/spinbutton@3.1.0
 - @react-aria/ssr@3.2.0
 - @react-aria/switch@3.2.0
 - @react-aria/table@3.3.0
 - @react-aria/tabs@3.2.0
 - @react-aria/tag@3.0.0-alpha.6
 - @react-aria/textfield@3.6.0
 - @react-aria/toggle@3.3.0
 - @react-aria/tooltip@3.2.0
 - @react-aria/utils@3.13.0
 - @react-aria/virtualizer@3.4.0
 - @react-aria/visually-hidden@3.3.0
 - @react-spectrum/accordion@3.0.0-alpha.9
 - @react-spectrum/actionbar@3.0.0-alpha.9
 - @react-spectrum/actiongroup@3.5.0
 - @react-spectrum/autocomplete@3.0.0-alpha.7
 - @react-spectrum/avatar@3.0.0-alpha.6
 - @react-spectrum/breadcrumbs@3.4.0
 - @react-spectrum/button@3.8.0
 - @react-spectrum/buttongroup@3.3.0
 - @react-spectrum/calendar@3.0.0-rc.1
 - @react-spectrum/card@3.0.0-alpha.8
 - @react-spectrum/checkbox@3.4.0
 - @react-spectrum/color@3.0.0-beta.12
 - @react-spectrum/combobox@3.4.0
 - @react-spectrum/contextualhelp@3.1.0
 - @react-spectrum/datepicker@3.0.0-rc.1
 - @react-spectrum/dialog@3.4.0
 - @react-spectrum/divider@3.3.0
 - @react-spectrum/dnd@3.0.0-alpha.3
 - @react-spectrum/form@3.3.0
 - @react-spectrum/icon@3.4.0
 - @react-spectrum/illustratedmessage@3.2.0
 - @react-spectrum/image@3.2.0
 - @react-spectrum/label@3.6.0
 - @react-spectrum/layout@3.3.0
 - @react-spectrum/link@3.3.0
 - @react-spectrum/list@3.0.0-alpha.11
 - @react-spectrum/listbox@3.6.0
 - @react-spectrum/menu@3.7.0
 - @react-spectrum/meter@3.2.0
 - @react-spectrum/numberfield@3.3.0
 - @react-spectrum/overlays@3.6.0
 - @react-spectrum/picker@3.6.0
 - @react-spectrum/progress@3.2.0
 - @react-spectrum/provider@3.4.0
 - @react-spectrum/radio@3.2.0
 - @react-spectrum/searchfield@3.4.0
 - @react-spectrum/searchwithin@3.0.0-alpha.7
 - @react-spectrum/slider@3.1.0
 - @react-spectrum/statuslight@3.3.0
 - @react-spectrum/switch@3.2.0
 - @react-spectrum/table@3.2.0
 - @react-spectrum/tabs@3.2.0
 - @react-spectrum/tag@3.0.0-alpha.6
 - @react-spectrum/text@3.2.0
 - @react-spectrum/textfield@3.5.0
 - @react-spectrum/theme-dark@3.3.0
 - @react-spectrum/theme-default@3.3.0
 - @react-spectrum/theme-light@3.2.0
 - @react-spectrum/tooltip@3.2.0
 - @react-spectrum/utils@3.7.0
 - @react-spectrum/view@3.2.0
 - @react-spectrum/well@3.2.0
 - @react-stately/calendar@3.0.0-rc.1
 - @react-stately/checkbox@3.1.0
 - @react-stately/collections@3.4.0
 - @react-stately/color@3.0.0-beta.11
 - @react-stately/combobox@3.1.0
 - @react-stately/data@3.5.0
 - @react-stately/datepicker@3.0.0-rc.1
 - @react-stately/dnd@3.0.0-alpha.7
 - @react-stately/grid@3.2.0
 - @react-stately/layout@3.5.0
 - @react-stately/list@3.5.0
 - @react-stately/menu@3.3.0
 - @react-stately/numberfield@3.1.0
 - @react-stately/overlays@3.3.0
 - @react-stately/radio@3.4.0
 - @react-stately/searchfield@3.2.0
 - @react-stately/select@3.2.0
 - @react-stately/selection@3.10.0
 - @react-stately/slider@3.1.0
 - @react-stately/table@3.2.0
 - @react-stately/tabs@3.1.0
 - @react-stately/toggle@3.3.0
 - @react-stately/tooltip@3.1.0
 - @react-stately/tree@3.3.0
 - @react-stately/utils@3.5.0
 - @react-stately/virtualizer@3.2.0
 - @react-types/accordion@3.0.0-alpha.6
 - @react-types/actionbar@3.0.0-alpha.6
 - @react-types/actiongroup@3.3.0
 - @react-types/autocomplete@3.0.0-alpha.5
 - @react-types/avatar@3.0.0-alpha.5
 - @react-types/breadcrumbs@3.4.0
 - @react-types/button@3.5.0
 - @react-types/buttongroup@3.2.0
 - @react-types/calendar@3.0.0-rc.1
 - @react-types/card@3.0.0-alpha.6
 - @react-types/checkbox@3.3.0
 - @react-types/color@3.0.0-beta.9
 - @react-types/combobox@3.5.0
 - @react-types/contextualhelp@3.1.0
 - @react-types/datepicker@3.0.0-rc.1
 - @react-types/dialog@3.4.0
 - @react-types/divider@3.2.0
 - @react-types/form@3.3.0
 - @react-types/grid@3.1.0
 - @react-types/illustratedmessage@3.2.0
 - @react-types/image@3.2.0
 - @react-types/label@3.6.0
 - @react-types/layout@3.3.0
 - @react-types/link@3.3.0
 - @react-types/list@3.0.0-alpha.0
 - @react-types/listbox@3.3.0
 - @react-types/menu@3.6.0
 - @react-types/meter@3.2.0
 - @react-types/numberfield@3.3.0
 - @react-types/overlays@3.6.0
 - @react-types/progress@3.2.0
 - @react-types/provider@3.5.0
 - @react-types/radio@3.2.0
 - @react-types/searchfield@3.3.0
 - @react-types/searchwithin@3.0.0-alpha.5
 - @react-types/select@3.6.0
 - @react-types/shared@3.13.0
 - @react-types/slider@3.1.0
 - @react-types/statuslight@3.2.0
 - @react-types/switch@3.2.0
 - @react-types/table@3.2.0
 - @react-types/tabs@3.1.0
 - @react-types/tag@3.0.0-alpha.4
 - @react-types/text@3.2.0
 - @react-types/textfield@3.5.0
 - @react-types/tooltip@3.2.0
 - @react-types/view@3.2.0
 - @react-types/well@3.2.0
 - @spectrum-icons/color@3.4.0
 - @spectrum-icons/illustrations@3.3.0
 - @spectrum-icons/ui@3.3.0
 - @spectrum-icons/workflow@4.0.0
 - react-aria@3.16.0
 - react-stately@3.14.0

----------------------------------------

TITLE: Avatar Component with Different Sizes in React Spectrum
DESCRIPTION: Demonstrates different sizing options for the Avatar component, including predefined size variables and a custom pixel size.

LANGUAGE: tsx
CODE:
<Flex gap="size-100" wrap>
  {[50, 75, 100, 200, 300, 400, 500, 600, 700].map(size => (
    <Avatar key={size} src="https://i.imgur.com/kJOwAdv.png" alt="default Adobe avatar" size={`avatar-size-${size}`} />
  ))}
  <Avatar src="https://i.imgur.com/kJOwAdv.png" alt="avatar with custom size" size={50} />
</Flex>

----------------------------------------

TITLE: MenuTrigger with Flipping Configuration
DESCRIPTION: Example of MenuTrigger with shouldFlip prop controlling whether the menu automatically flips direction when space is limited.

LANGUAGE: tsx
CODE:
<Flex gap="size-100">
  <MenuTrigger shouldFlip>
    <ActionButton>
      View
    </ActionButton>
    <Menu>
      <Item key="side">Side bar</Item>
      <Item key="options">Page options</Item>
      <Item key="edit">Edit Panel</Item>
    </Menu>
  </MenuTrigger>
  <MenuTrigger shouldFlip={false}>
    <ActionButton>
      Edit
    </ActionButton>
    <Menu>
      <Item key="cut">Cut</Item>
      <Item key="copy">Copy</Item>
      <Item key="paste">Paste</Item>
    </Menu>
  </MenuTrigger>
</Flex>

----------------------------------------

TITLE: Meter Component with Custom Value Scale
DESCRIPTION: Configuring the Meter component with custom minimum and maximum values to represent a different scale than the default 0-100 percent range.

LANGUAGE: tsx
CODE:
<MyMeter
  label="Widgets Used"
  minValue={50}
  maxValue={150}
  value={100} />

----------------------------------------

TITLE: Creating a Disabled Slider in React Spectrum
DESCRIPTION: Example of creating a disabled slider using the isDisabled prop. When disabled, the slider cannot be interacted with by the user.

LANGUAGE: tsx
CODE:
<Slider
  label="Cookies to share"
  defaultValue={25}
  isDisabled />

----------------------------------------

TITLE: Integrating RouterProvider with TanStack Router in React Aria Components
DESCRIPTION: This code demonstrates how to integrate TanStack Router with React Aria Components. It configures the RouterProvider to use TanStack Router's navigation and href building functions, and extends TypeScript types for proper autocompletion.

LANGUAGE: tsx
CODE:
import {useRouter, type NavigateOptions, type ToOptions} from '@tanstack/react-router';
import {RouterProvider} from 'react-aria-components';

declare module 'react-aria-components' {
  interface RouterConfig {
    href: ToOptions['to'];
    routerOptions: Omit<NavigateOptions, keyof ToOptions>;
  }
}

function RootRoute() {
  let router = useRouter();
  return (
    <RouterProvider 
      navigate={(to, options) => router.navigate({to, ...options})}
      useHref={to => router.buildLocation({to}).href}>
      {/* ...*/}
    </RouterProvider>
  );
}

----------------------------------------

TITLE: Custom Label Alignment and Position for ColorField
DESCRIPTION: Demonstrates how to customize the label position and alignment for the ColorField component.

LANGUAGE: tsx
CODE:
<ColorField label="Primary Color" labelPosition="side" labelAlign="end" />

----------------------------------------

TITLE: Customizing Drop Indicators in React Tables
DESCRIPTION: Example showing how to customize the drop indicator using the renderDropIndicator function. This allows for custom DOM structure and CSS classes on the drop indicator.

LANGUAGE: tsx
CODE:
import {DropIndicator} from 'react-aria-components';

function Example() {
  let { dragAndDropHooks } = useDragAndDrop({
    // ...
    renderDropIndicator(target) {
      return (
        <DropIndicator
          target={target}
          className={({isDropTarget}) => `my-drop-indicator ${isDropTarget ? 'active' : ''}`} />
      );
    }
  });

  // ...
}

----------------------------------------

TITLE: Slider Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This comparison shows that Spectrum 2 supports more properties for Slider including size, labelAlign, isEmphasized, trackStyle, thumbStyle, and slot, while RSP v3 has properties like isFilled, trackGradient, showValueLabel, getValueLabel, and orientation not yet implemented in S2.

LANGUAGE: typescript
CODE:
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | –
labelAlign | 🟢 `Alignment` | –
isEmphasized | 🟢 `boolean` | –
trackStyle | 🟢 `'thick' \| 'thin'` | –
thumbStyle | 🟢 `'default' \| 'precise'` | –
slot | 🟢 `null \| string` | –
isFilled | – | 🔴 `boolean`
trackGradient | – | 🔴 `Array<string>`
showValueLabel | – | 🔴 `boolean`
getValueLabel | – | 🔴 `(number) => string`
orientation | – | 🔴 `Orientation`

----------------------------------------

TITLE: Switch Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This table shows that Spectrum 2 supports inputRef, slot, and size properties for the Switch component which are not present in RSP v3.

LANGUAGE: typescript
CODE:
inputRef | 🟢 `RefObject<HTMLInputElement \| null>` | –
slot | 🟢 `null \| string` | –
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | –

----------------------------------------

TITLE: Importing Documentation Resources for useStepListState
DESCRIPTION: Imports various resources needed for the documentation page, including the API documentation, component information, and package data for the useStepListState hook.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/steplist';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/steplist/package.json';

----------------------------------------

TITLE: Creating a Read-Only Checkbox in React Aria
DESCRIPTION: Example showing how to create a read-only checkbox using the isReadOnly prop, which makes the selection state immutable while keeping the checkbox focusable.

LANGUAGE: tsx
CODE:
<MyCheckbox isSelected isReadOnly>Agree</MyCheckbox>

----------------------------------------

TITLE: Vertical ActionGroup with Collapsing Behavior in React Spectrum
DESCRIPTION: Demonstrates a vertical ActionGroup that collapses when height is limited. This is supported for non-selectable vertical ActionGroups, with positioning of tooltips and menu adjusted accordingly.

LANGUAGE: tsx
CODE:
<ActionGroup overflowMode="collapse" orientation="vertical" buttonLabelBehavior="hide" maxHeight={150}>
  <Item key="edit">
    <Draw />
    <Text>Edit</Text>
  </Item>
  <Item key="copy">
    <Copy />
    <Text>Copy</Text>
  </Item>
  <Item key="delete">
    <Delete />
    <Text>Delete</Text>
  </Item>
  <Item key="move">
    <Move />
    <Text>Move</Text>
  </Item>
  <Item key="duplicate">
    <Duplicate />
    <Text>Duplicate</Text>
  </Item>
</ActionGroup>

----------------------------------------

TITLE: Implementing CalendarGrid Component with React Aria
DESCRIPTION: A reusable CalendarGrid component that renders a month calendar as an HTML table using the useCalendarGrid hook. It handles rendering weekday headers and calendar cells for each date in the month, with proper ARIA attributes for accessibility.

LANGUAGE: tsx
CODE:
import {useCalendarGrid} from '@react-aria/calendar';

function CalendarGrid({state, ...props}) {
  let {gridProps, headerProps, weekDays, weeksInMonth} = useCalendarGrid(props, state);

  return (
    <table {...gridProps}>
      <thead {...headerProps}>
        <tr>
          {weekDays.map((day, index) =>
            <th key={index}>{day}</th>
          )}
        </tr>
      </thead>
      <tbody>
        {[...new Array(weeksInMonth).keys()].map(weekIndex => (
          <tr key={weekIndex}>
            {state.getDatesInWeek(weekIndex).map((date, i) => (
              date ? (
                <CalendarCell
                  key={i}
                  state={state}
                  date={date} />
              ) : <td key={i} />
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
}

----------------------------------------

TITLE: Disabled RangeSlider Component
DESCRIPTION: Shows how to disable a RangeSlider component using the isDisabled prop.

LANGUAGE: tsx
CODE:
<RangeSlider label="Price filter" defaultValue={{start: 25, end: 50}} isDisabled />

----------------------------------------

TITLE: Styling Directory Items with CSS
DESCRIPTION: CSS styles for formatting directory items in a list. It creates a flex layout to align the icon and file/folder name horizontally with proper spacing, and handles text overflow with ellipsis.

LANGUAGE: css
CODE:
.dir-item {
  display: flex;
  align-items: center;
  gap: 8px;
}

.dir-item {
  flex: 0 0 auto;
}

.dir-item {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

----------------------------------------

TITLE: HTML Form Integration with TextField
DESCRIPTION: Demonstrates how to use TextField in HTML forms with the name and type attributes for proper form submission.

LANGUAGE: tsx
CODE:
<TextField label="Email" name="email" type="email" />

----------------------------------------

TITLE: Configuring a Prefix for React Aria Component Modifiers in Tailwind CSS (v4)
DESCRIPTION: Example of configuring a prefix for all React Aria Components modifiers in the Tailwind CSS plugin (Tailwind v4).

LANGUAGE: css
CODE:
@plugin "tailwindcss-react-aria-components" { prefix: rac };

----------------------------------------

TITLE: Read-only RadioGroup Component
DESCRIPTION: Shows how to create a read-only RadioGroup using the isReadOnly prop, which makes the selection immutable but still focusable.

LANGUAGE: tsx
CODE:
<RadioGroup label="Favorite avatar" defaultValue="wizard" isReadOnly>
  <Radio value="wizard">Wizard</Radio>
  <Radio value="dragon">Dragon</Radio>
</RadioGroup>

----------------------------------------

TITLE: Inserting Items with useListData in React
DESCRIPTION: Demonstrates the insert method to add new items at a specific position in the list. Shows how to insert both single and multiple items at once using an index.

LANGUAGE: tsx
CODE:
// Insert an item after the first one
list.insert(1, {name: 'Horse'});

// Insert multiple items
list.insert(1, {name: 'Horse'}, {name: 'Giraffe'});

----------------------------------------

TITLE: Reducing Bundle Size with Custom Calendar Implementation
DESCRIPTION: Advanced technique for reducing bundle size by providing a custom createCalendar function that only includes specific calendar implementations. This example only includes the Gregorian calendar system.

LANGUAGE: jsx
CODE:
import {useCalendarState} from '@react-stately/datepicker';
import {useLocale} from '@react-aria/i18n';
import {GregorianCalendar} from '@internationalized/date';

function createCalendar(identifier) {
  switch (identifier) {
    case 'gregory':
      return new GregorianCalendar();
    default:
      throw new Error(`Unsupported calendar ${identifier}`);
  }
}

function Calendar(props) {
  let {locale} = useLocale();
  let state = useCalendarState({
    ...props,
    locale,
    createCalendar
  });

  // ...
}

----------------------------------------

TITLE: Styling Toast Components with CSS
DESCRIPTION: CSS styles for Toast components including the region, toast container, content, and close button, with focus and interaction states.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-ToastRegion {
  position: fixed;
  bottom: 16px;
  right: 16px;
  display: flex;
  flex-direction: column-reverse;
  gap: 8px;
  border-radius: 8px;
  outline: none;

  &[data-focus-visible] {
    outline: 2px solid slateblue;
    outline-offset: 2px;
  }
}

.react-aria-Toast {
  display: flex;
  align-items: center;
  gap: 16px;
  background: slateblue;
  color: white;
  padding: 12px 16px;
  border-radius: 8px;
  outline: none;

  &[data-focus-visible] {
    outline: 2px solid slateblue;
    outline-offset: 2px;
  }

  .react-aria-ToastContent {
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    min-width: 0px;

    [slot=title] {
      font-weight: bold;
    }
  }

  .react-aria-Button[slot=close] {
    flex: 0 0 auto;
    background: none;
    border: none;
    appearance: none;
    border-radius: 50%;
    height: 32px;
    width: 32px;
    font-size: 16px;
    border: 1px solid white;
    color: white;
    padding: 0;
    outline: none;

    &[data-focus-visible] {
      box-shadow: 0 0 0 2px slateblue, 0 0 0 4px white;
    }

    &[data-pressed] {
      background: rgba(255, 255, 255, 0.2);
    }
  }
}

----------------------------------------

TITLE: TextField with Description and Error in React Aria Components
DESCRIPTION: Example of a TextField component structure with Label, Input, description text, and error message elements, showing the complete component hierarchy.

LANGUAGE: tsx
CODE:
import {TextField, Label, Input, FieldError, Text} from 'react-aria-components';

<TextField>
  <Label />
  <Input />
  <Text slot="description" />
  <FieldError />
</TextField>

----------------------------------------

TITLE: Controlled and Uncontrolled TextArea Values in React Spectrum
DESCRIPTION: Shows how to use TextArea in both controlled and uncontrolled modes. The uncontrolled component uses defaultValue while the controlled component uses value and onChange props.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState('This is on a wait list');

  return (
    <Flex gap="size-150" wrap>
      <TextArea
        label="Notes (Uncontrolled)"
        defaultValue="This is on a wait list" />

      <TextArea
        label="Notes (Controlled)"
        value={value}
        onChange={setValue} />
    </Flex>
  );
}

----------------------------------------

TITLE: Styling a DropZone with CSS
DESCRIPTION: CSS styling for the DropZone component, demonstrating how to apply different visual states based on focus and drop target status. The styles provide visual feedback during user interactions.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-DropZone {
  color: var(--text-color);
  background: var(--overlay-background);
  border: 1px solid var(--border-color);
  forced-color-adjust: none;
  border-radius: 4px;
  appearance: none;
  vertical-align: middle;
  font-size: 1.2rem;
  text-align: center;
  margin: 0;
  outline: none;
  padding: 24px 12px;
  width: 25%;
  display: inline-block;

  &[data-focus-visible],
  &[data-drop-target] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: -1px;
  }

  &[data-drop-target] {
    background: var(--highlight-overlay);
  }
}

----------------------------------------

TITLE: Referencing React Stately Datepicker Package in Markdown
DESCRIPTION: Markdown code that shows the package name with styling. This is used in the documentation to clearly identify the package name.

LANGUAGE: markdown
CODE:
# @react-stately/datepicker

----------------------------------------

TITLE: Basic RadioGroup Example in React Spectrum
DESCRIPTION: Demonstrates a simple implementation of a RadioGroup with Radio components for selecting a favorite pet.

LANGUAGE: tsx
CODE:
<RadioGroup label="Favorite pet">
  <Radio value="dogs">Dogs</Radio>
  <Radio value="cats">Cats</Radio>
</RadioGroup>

----------------------------------------

TITLE: Implementing Table Row Groups with React Aria
DESCRIPTION: This snippet demonstrates how to create table row groups (thead and tbody) using the useTableRowGroup hook. It handles proper accessibility attributes and styling for the header and body sections.

LANGUAGE: tsx
CODE:
import {useTableRowGroup} from '@react-aria/table';

function TableRowGroup({type: Element, children}) {
  let {rowGroupProps} = useTableRowGroup();
  return (
    <Element
      {...rowGroupProps}
      style={Element === 'thead' ? {borderBottom: '2px solid var(--spectrum-global-color-gray-800)'} : null}>
      {children}
    </Element>
  );
}

----------------------------------------

TITLE: Listing Released Packages for React Spectrum May 2022 Release
DESCRIPTION: This code block lists all the packages released in the May 3, 2022 release of React Spectrum, including their version numbers. It covers React Spectrum components, React Aria hooks, React Stately, React Types, and Spectrum Icons packages.

LANGUAGE: JavaScript
CODE:
- @adobe/react-spectrum@3.17.0
- @internationalized/date@3.0.0-rc.0
- @internationalized/message@3.0.6
- @internationalized/number@3.1.0
- @react-aria/accordion@3.0.0-alpha.7
- @react-aria/actiongroup@3.2.6
- @react-aria/aria-modal-polyfill@3.4.4
- @react-aria/autocomplete@3.0.0-alpha.6
- @react-aria/breadcrumbs@3.1.10
- @react-aria/button@3.4.4
- @react-aria/calendar@3.0.0-rc.0
- @react-aria/checkbox@3.3.4
- @react-aria/color@3.0.0-beta.11
- @react-aria/combobox@3.2.6
- @react-aria/datepicker@3.0.0-rc.0
- @react-aria/dialog@3.1.9
- @react-aria/dnd@3.0.0-alpha.8
- @react-aria/focus@3.5.5
- @react-aria/grid@3.2.6
- @react-aria/i18n@3.3.9
- @react-aria/interactions@3.8.4
- @react-aria/label@3.2.5
- @react-aria/link@3.2.5
- @react-aria/listbox@3.4.5
- @react-aria/live-announcer@3.0.6
- @react-aria/menu@3.4.4
- @react-aria/meter@3.1.8
- @react-aria/numberfield@3.1.6
- @react-aria/overlays@3.8.2
- @react-aria/progress@3.1.8
- @react-aria/radio@3.1.11
- @react-aria/searchfield@3.2.7
- @react-aria/select@3.6.5
- @react-aria/selection@3.8.2
- @react-aria/separator@3.1.7
- @react-aria/slider@3.0.8
- @react-aria/spinbutton@3.0.6
- @react-aria/switch@3.1.8
- @react-aria/tabs@3.1.5
- @react-aria/tag@3.0.0-alpha.5
- @react-aria/textfield@3.5.5
- @react-aria/toggle@3.2.4
- @react-aria/tooltip@3.1.8
- @react-aria/utils@3.12.0
- @react-aria/virtualizer@3.3.10
- @react-aria/visually-hidden@3.2.8
- @react-spectrum/accordion@3.0.0-alpha.8
- @react-spectrum/actionbar@3.0.0-alpha.8
- @react-spectrum/actiongroup@3.4.4
- @react-spectrum/autocomplete@3.0.0-alpha.6
- @react-spectrum/avatar@3.0.0-alpha.5
- @react-spectrum/breadcrumbs@3.3.0
- @react-spectrum/button@3.7.4
- @react-spectrum/buttongroup@3.2.8
- @react-spectrum/calendar@3.0.0-rc.0
- @react-spectrum/card@3.0.0-alpha.7
- @react-spectrum/checkbox@3.3.4
- @react-spectrum/color@3.0.0-beta.11
- @react-spectrum/combobox@3.3.0
- @react-spectrum/contextualhelp@3.0.4
- @react-spectrum/datepicker@3.0.0-rc.0
- @react-spectrum/dialog@3.3.9
- @react-spectrum/divider@3.2.4
- @react-spectrum/dnd@3.0.0-alpha.2
- @react-spectrum/form@3.2.9
- @react-spectrum/icon@3.3.7
- @react-spectrum/illustratedmessage@3.1.9
- @react-spectrum/image@3.1.9
- @react-spectrum/label@3.5.0
- @react-spectrum/layout@3.2.6
- @react-spectrum/link@3.2.5
- @react-spectrum/list@3.0.0-alpha.10
- @react-spectrum/listbox@3.5.8
- @react-spectrum/menu@3.6.4
- @react-spectrum/meter@3.1.8
- @react-spectrum/numberfield@3.2.0
- @react-spectrum/overlays@3.5.0
- @react-spectrum/picker@3.5.5
- @react-spectrum/progress@3.1.8
- @react-spectrum/provider@3.3.4
- @react-spectrum/radio@3.1.10
- @react-spectrum/searchfield@3.3.0
- @react-spectrum/searchwithin@3.0.0-alpha.6
- @react-spectrum/slider@3.0.9
- @react-spectrum/statuslight@3.2.7
- @react-spectrum/switch@3.1.8
- @react-spectrum/tabs@3.1.6
- @react-spectrum/tag@3.0.0-alpha.5
- @react-spectrum/text@3.1.8
- @react-spectrum/textfield@3.4.0
- @react-spectrum/theme-dark@3.2.7
- @react-spectrum/theme-default@3.2.7
- @react-spectrum/theme-light@3.1.7
- @react-spectrum/tooltip@3.1.9
- @react-spectrum/utils@3.6.8
- @react-spectrum/view@3.1.8
- @react-spectrum/well@3.1.8
- @react-stately/calendar@3.0.0-rc.0
- @react-stately/checkbox@3.0.7
- @react-stately/collections@3.3.8
- @react-stately/color@3.0.0-beta.10
- @react-stately/combobox@3.0.5
- @react-stately/data@3.4.7
- @react-stately/datepicker@3.0.0-rc.0
- @react-stately/dnd@3.0.0-alpha.6
- @react-stately/grid@3.1.4
- @react-stately/list@3.4.5
- @react-stately/menu@3.2.7
- @react-stately/numberfield@3.0.7
- @react-stately/overlays@3.2.0
- @react-stately/radio@3.3.6
- @react-stately/searchfield@3.1.7
- @react-stately/select@3.1.7
- @react-stately/selection@3.9.4
- @react-stately/slider@3.0.8
- @react-stately/tabs@3.0.5
- @react-stately/toggle@3.2.7
- @react-stately/tooltip@3.0.9
- @react-stately/tree@3.2.4
- @react-stately/virtualizer@3.1.9
- @react-types/accordion@3.0.0-alpha.5
- @react-types/actionbar@3.0.0-alpha.5
- @react-types/actiongroup@3.2.5
- @react-types/autocomplete@3.0.0-alpha.4
- @react-types/avatar@3.0.0-alpha.4
- @react-types/breadcrumbs@3.3.0
- @react-types/button@3.4.5
- @react-types/buttongroup@3.1.6
- @react-types/calendar@3.0.0-rc.0
- @react-types/card@3.0.0-alpha.5
- @react-types/checkbox@3.2.7
- @react-types/color@3.0.0-beta.8
- @react-types/combobox@3.4.0
- @react-types/contextualhelp@3.0.3
- @react-types/datepicker@3.0.0-rc.0
- @react-types/dialog@3.3.5
- @react-types/divider@3.1.6
- @react-types/form@3.2.6
- @react-types/grid@3.0.4
- @react-types/illustratedmessage@3.1.6
- @react-types/image@3.1.7
- @react-types/label@3.5.4
- @react-types/layout@3.2.4
- @react-types/link@3.2.5
- @react-types/listbox@3.2.5
- @react-types/menu@3.5.3
- @react-types/meter@3.1.6
- @react-types/numberfield@3.2.0
- @react-types/overlays@3.5.5
- @react-types/progress@3.1.6
- @react-types/provider@3.4.3
- @react-types/radio@3.1.6
- @react-types/searchfield@3.2.0
- @react-types/searchwithin@3.0.0-alpha.4
- @react-types/select@3.5.5
- @react-types/shared@3.12.0
- @react-types/slider@3.0.6
- @react-types/statuslight@3.1.6
- @react-types/switch@3.1.6
- @react-types/tabs@3.0.5
- @react-types/tag@3.0.0-alpha.3
- @react-types/text@3.1.7
- @react-types/textfield@3.4.0
- @react-types/tooltip@3.1.6
- @react-types/view@3.1.6
- @react-types/well@3.1.6
- @spectrum-icons/color@3.3.6
- @spectrum-icons/ui@3.2.6
- @spectrum-icons/workflow@3.2.5
- react-aria@3.15.0
- react-stately@3.13.0

----------------------------------------

TITLE: ProgressCircle Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This table shows that Spectrum 2 supports slot property for ProgressCircle, while RSP v3 has a variant property that should be replaced with staticColor in S2.

LANGUAGE: typescript
CODE:
slot | 🟢 `null \| string` | –
variant | – | 🔴 `'overBackground'`

----------------------------------------

TITLE: CSS for Disabled Link State in React Aria
DESCRIPTION: CSS styling specific to the disabled state of the Link component using the data-disabled attribute.

LANGUAGE: css
CODE:
.react-aria-Link {
  &[data-disabled] {
    cursor: default;
    color: var(--text-color-disabled);
  }
}

----------------------------------------

TITLE: TimeField Labeling Options
DESCRIPTION: Demonstrates different labeling options including required fields and necessity indicators.

LANGUAGE: tsx
CODE:
<Flex gap="size-150" wrap>
  <TimeField label="Event time" />
  <TimeField label="Event time" isRequired necessityIndicator="icon" />
  <TimeField label="Event time" isRequired necessityIndicator="label" />
  <TimeField label="Event time" necessityIndicator="label" />
</Flex>

----------------------------------------

TITLE: Importing Documentation Dependencies for useMenuTriggerState
DESCRIPTION: Imports necessary components and data for documenting the useMenuTriggerState hook, including component documentation, UI components for rendering the docs, and package metadata.

LANGUAGE: JavaScript
CODE:
import docs from 'docs:@react-stately/menu';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/menu/package.json';

----------------------------------------

TITLE: Specifying Custom className on Components
DESCRIPTION: Demonstrates how to override the default className with a custom one on a DropZone component.

LANGUAGE: jsx
CODE:
<DropZone className="my-dropzone">
  {/* ... */}
</DropZone>

----------------------------------------

TITLE: Adding and Subtracting Durations with ZonedDateTime in TSX
DESCRIPTION: Examples of using the add() and subtract() methods on ZonedDateTime objects to adjust dates by durations. These methods handle time fields like weeks, months, years, hours, and minutes, returning new date objects without mutating the original.

LANGUAGE: tsx
CODE:
let date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');

date.add({weeks: 1}); // 2022-02-10T09:45[America/Los_Angeles]
date.add({months: 1}); // 2022-03-03T09:45[America/Los_Angeles]
date.add({years: 1, months: 1, days: 1}); // 2023-03-04T09:45[America/Los_Angeles]
date.add({hours: 1}); // 2022-02-03T10:45[America/Los_Angeles]
date.add({minutes: 30}); // 2022-02-03T10:15[America/Los_Angeles]

date.subtract({weeks: 1}); // 2022-01-27T09:45[America/Los_Angeles]
date.subtract({months: 1}); // 2022-01-03T09:45[America/Los_Angeles]
date.subtract({years: 1, months: 1, days: 1}); // 2021-01-02T09:45[America/Los_Angeles]
date.subtract({hours: 1}); // 2022-02-03T8:45[America/Los_Angeles]
date.subtract({minutes: 30}); // 2022-02-03T09:15[America/Los_Angeles]

----------------------------------------

TITLE: Integrating ColorSlider with HTML Forms in React
DESCRIPTION: Demonstrates how to integrate ColorSlider with HTML forms using the name prop. The value will be submitted as a number between the minimum and maximum value for the displayed channel.

LANGUAGE: tsx
CODE:
<ColorSlider
  defaultValue="#7f0000"
  channel="red"
  name="red" />

----------------------------------------

TITLE: Integrating Next.js Pages Router with React Spectrum
DESCRIPTION: This example shows how to integrate Next.js Pages Router with React Spectrum in the _app.tsx file. It uses the useRouter hook from next/router to handle navigation.

LANGUAGE: tsx
CODE:
// pages/_app.tsx
import type {AppProps} from 'next/app';
import {useRouter, type NextRouter} from 'next/router';
import {Provider, defaultTheme} from '@adobe/react-spectrum';

declare module '@adobe/react-spectrum' {
  interface RouterConfig {
    routerOptions: NonNullable<Parameters<NextRouter['push']>[2]>
  }
}

export default function MyApp({Component, pageProps}: AppProps) {
  let router = useRouter();

  return (
    <Provider 
      theme={defaultTheme}
      router={{
        navigate: (href, opts) => router.push(href, undefined, opts),
      }}>
      <Component {...pageProps} />
    </Provider>
  );
}

----------------------------------------

TITLE: Customizing ColorWheel with a Custom Class Name
DESCRIPTION: Shows how to override the default className with a custom one on the ColorWheel component.

LANGUAGE: jsx
CODE:
<ColorWheel className="my-color-wheel">
  {/* ... */}
</ColorWheel>

----------------------------------------

TITLE: Using ClientProviders in Next.js App Router Layout
DESCRIPTION: Shows how to apply the ClientProviders component in a Next.js App Router layout to enable client-side routing for all pages.

LANGUAGE: tsx
CODE:
// app/layout.tsx
import {ClientProviders} from './provider';

export default function RootLayout({children}) {
  return (
    <html>
      <body>
        <ClientProviders>{children}</ClientProviders>
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Secondary Variant Link in React Spectrum
DESCRIPTION: Shows the secondary variant styling for a Link component within a paragraph.

LANGUAGE: tsx
CODE:
<p>Would you like to <Link variant="secondary">learn more</Link> about this fine component?</p>

----------------------------------------

TITLE: Hiding Time Zone in React Spectrum DatePicker
DESCRIPTION: Demonstrates how to hide the time zone abbreviation when using ZonedDateTime values by setting the hideTimeZone prop to true.

LANGUAGE: tsx
CODE:
<DatePicker
  label="Appointment time"
  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}
  hideTimeZone />

----------------------------------------

TITLE: Conditional Rendering with Render Props in Breadcrumbs
DESCRIPTION: Using render props to conditionally render different elements based on the current state of breadcrumb items.

LANGUAGE: jsx
CODE:
<Breadcrumbs items={items}>
  {(item) => (
    <Breadcrumb>
      {({isCurrent}) => isCurrent ? <strong>{item.label}</strong> : <Link>{item.label}</Link>}
    </Breadcrumb>
  )}
</Breadcrumbs>

----------------------------------------

TITLE: Handling 'Select All' Functionality in ListBox Component
DESCRIPTION: This example demonstrates how to handle the special 'all' selection state, which represents selection of all items in a collection (even those not yet loaded). It shows how to conditionally process bulk actions based on selection type.

LANGUAGE: tsx
CODE:
let [selectedKeys, setSelectedKeys] = useState(new Set());

function performBulkAction() {
  if (selectedKeys === 'all') {
    // perform action on all items
  } else {
    // perform action on selected items in selectedKeys
  }
}

<ListBox
  items={items}
  selectedKeys={selectedKeys}
  onSelectionChange={setSelectedKeys}>
  {item => <Item>{item.name}</Item>}
</ListBox>

----------------------------------------

TITLE: ColorSwatch with Different Rounding Options
DESCRIPTION: Example showing the available corner rounding options for ColorSwatch components.

LANGUAGE: tsx
CODE:
<Flex gap="size-100">
  <ColorSwatch color="#0ff" rounding="none" />
  <ColorSwatch color="#0ff" rounding="default" />
  <ColorSwatch color="#0ff" rounding="full" />
</Flex>

----------------------------------------

TITLE: Importing and Exporting Layout Component in React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export for the file structure.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Detecting Numbering Systems with NumberParser in JavaScript
DESCRIPTION: Illustrates how to use the NumberParser to detect the numbering system used in a string. This functionality helps in handling different international numbering systems like Arabic numerals.

LANGUAGE: javascript
CODE:
import {NumberParser} from '@internationalized/number';

let parser = new NumberParser('en-US', {style: 'decimal'});
parser.getNumberingSystem('١٢') // -> 'arabic'

----------------------------------------

TITLE: Creating a Multi-thumb Range Slider in React Spectrum
DESCRIPTION: Example of implementing a range slider with multiple thumbs using an array of values. The component uses RangeSlider instead of Slider and maintains an array of values in state.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState([25, 75]);
  return (
    <>
      <RangeSlider
        label="Range"
        value={value}
        onChange={setValue} />
      <p>Current value: {value.join(' – ')}</p>
    </>
  );
}

----------------------------------------

TITLE: Handling Custom Text Drop Types in React Spectrum
DESCRIPTION: This example shows how to accept and process custom app-specific drag types. It uses acceptedDragTypes to filter dropped items and getText to retrieve the custom type data, which is then parsed as JSON and added to the list.

LANGUAGE: tsx
CODE:
function Example() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Cat'},
      {id: 2, name: 'Dog'},
      {id: 3, name: 'Kangaroo'}
    ]
  });

  let onInsert = async e => {
    let value = JSON.parse(await e.items[0].getText('my-app-custom-type'));
    let item = {id: list.items.length + 1, name: value.message};

    if (e.target.dropPosition === 'before') {
      list.insertBefore(e.target.key, item);
    } else if (e.target.dropPosition === 'after') {
      list.insertAfter(e.target.key, item);
    }
  };

  return (
    <>
      <Draggable>Octopus</Draggable>
      <ListBox
        aria-label="Favorite animals"
        selectionMode="single"
        items={list.items}
        acceptedDragTypes={['my-app-custom-type']}
        onInsert={onInsert}>
        {item => <Item>{item.name}</Item>}
      </ListBox>
    </>
  );
}

----------------------------------------

TITLE: Native Number Input Element in HTML
DESCRIPTION: The standard HTML number input that was avoided due to limitations in formatting options, internationalization support, and inconsistent browser implementations.

LANGUAGE: html
CODE:
<input type="number">

----------------------------------------

TITLE: Using List with Single Selection Mode
DESCRIPTION: Shows how to use the List component with single selection mode. This example sets a default selected key and demonstrates the replace selection behavior.

LANGUAGE: tsx
CODE:
// Using the example above
<ExampleList aria-label="List with single selection" selectionMode="single" selectionBehavior="replace" defaultSelectedKeys={[2]} />

----------------------------------------

TITLE: Defining Blog Post Metadata in JSX Frontmatter
DESCRIPTION: Specifies the metadata for the blog post using frontmatter syntax, including the description and publication date. This information is used by the BlogPostLayout component to display the post correctly.

LANGUAGE: JSX
CODE:
---
description: This release includes the new `Tooltip`, `TooltipTrigger`, and `DialogContainer` components, a new light theme, and mono-packages for react-aria and react-stately. Thanks to all of the contributors!
date: 2020-10-01
---

----------------------------------------

TITLE: Configuring Label Alignment and Position in ComboBox
DESCRIPTION: Example showing how to position the label to the side of the ComboBox using 'labelPosition' prop and align it to the end using 'labelAlign' prop.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal" labelPosition="side" labelAlign="end">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Form with Server-side Validation Errors in React Spectrum
DESCRIPTION: Shows how to provide server-side validation errors to a form field using the validationErrors prop, which maps field names to error messages.

LANGUAGE: tsx
CODE:
<Form validationErrors={{username: 'Sorry, this username is taken.'}} maxWidth="size-3000">
  <TextField label="Username" name="username" />
</Form>

----------------------------------------

TITLE: Implementing Basic ToggleButtonGroup with React Aria Components
DESCRIPTION: A simple example showing a ToggleButtonGroup with three toggle button options for alignment selection.

LANGUAGE: tsx
CODE:
import {ToggleButtonGroup, ToggleButton} from 'react-aria-components';

<ToggleButtonGroup>
  <ToggleButton id="left">Left</ToggleButton>
  <ToggleButton id="center">Center</ToggleButton>
  <ToggleButton id="right">Right</ToggleButton>
</ToggleButtonGroup>

----------------------------------------

TITLE: Converting ZonedDateTime to Native Date Object in TypeScript
DESCRIPTION: Shows how to convert a ZonedDateTime to a native JavaScript Date object using the toDate method. This is useful when interacting with APIs that require Date objects.

LANGUAGE: tsx
CODE:
let date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');
date.toDate('America/Los_Angeles'); // Thu Feb 03 2022 09:45:00 GMT-0800 (Pacific Standard Time)

----------------------------------------

TITLE: Using the Tailwind CSS Plugin with React Aria Components
DESCRIPTION: Example of using the Tailwind CSS plugin for React Aria Components, which allows accessing component states without the data- prefix and provides editor autocomplete.

LANGUAGE: jsx
CODE:
<ListBoxItem className="selected:bg-blue-400 disabled:bg-gray-100">
  Item
</ListBoxItem>

----------------------------------------

TITLE: Quiet Link in React Spectrum
DESCRIPTION: Shows a quiet link style that removes the visible underline, to be used only when context makes the link's purpose clear.

LANGUAGE: tsx
CODE:
<p>Would you like to <Link isQuiet>learn more</Link> about this fine component?</p>

----------------------------------------

TITLE: Setting Hour Cycle in React Spectrum DatePicker
DESCRIPTION: Shows how to override the default hour format using the hourCycle prop to force 24-hour time display regardless of the user's locale.

LANGUAGE: tsx
CODE:
<DatePicker
  label="Appointment time"
  granularity="minute"
  hourCycle={24} />

----------------------------------------

TITLE: Referencing React Spectrum Label Package
DESCRIPTION: A markdown reference to the @react-spectrum/label package, indicating it's part of the larger React Spectrum component library and directing users to the main repository for detailed documentation.

LANGUAGE: markdown
CODE:
# @react-spectrum/label

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Default Expanded Disclosure Example
DESCRIPTION: Example showing how to set a disclosure to be expanded by default using the defaultExpanded prop on the Disclosure component.

LANGUAGE: tsx
CODE:
<Disclosure title="System Requirements" defaultExpanded>
  Details about system requirements here.
</Disclosure>

----------------------------------------

TITLE: Controlling the Focused Date in Calendar Component
DESCRIPTION: Example demonstrating how to control which date is focused in a Calendar component using focusedValue and onFocusChange props. It includes a reset button to return to a default focused date.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

function Example() {
  let defaultDate = new CalendarDate(2021, 7, 1);
  let [focusedDate, setFocusedDate] = React.useState(defaultDate);

  return (
    <>
      <button style={{marginBottom: 20}} onClick={() => setFocusedDate(defaultDate)}>Reset focused date</button>
      <MyCalendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />
    </>
  );
}

----------------------------------------

TITLE: Detecting and Using Numbering Systems with NumberParser
DESCRIPTION: Demonstrates how to detect the numbering system from input and use it with NumberFormatter to maintain consistent formatting across different numbering systems.

LANGUAGE: tsx
CODE:
import {NumberParser, NumberFormatter} from '@internationalized/number';

let parser = new NumberParser('en-US', {style: 'decimal'});
let numberingSystem = parser.getNumberingSystem('١٢'); // -> 'arab'

let formatter = new NumberFormatter('en-US', {style: 'decimal', numberingSystem});
formatter.format(12); // '١٢'

----------------------------------------

TITLE: Importing Toast Components in React Spectrum
DESCRIPTION: Shows how to import the ButtonGroup, Button, ToastContainer, and ToastQueue components from React Spectrum libraries.

LANGUAGE: tsx
CODE:
import {ButtonGroup, Button} from '@adobe/react-spectrum';
import {ToastContainer, ToastQueue} from '@react-spectrum/toast';

----------------------------------------

TITLE: Getting Day of Week with Locale Consideration
DESCRIPTION: Demonstrates how to get the day of the week for a date using getDayOfWeek, which returns values 0-6 where 0 represents the first day of the week in the given locale.

LANGUAGE: tsx
CODE:
import {getDayOfWeek} from '@internationalized/date';

let date = new CalendarDate(2022, 2, 6); // a Sunday

getDayOfWeek(date, 'en-US'); // 0
getDayOfWeek(date, 'fr-FR'); // 6

----------------------------------------

TITLE: Basic ProgressCircle Example in React Spectrum
DESCRIPTION: A basic example of a ProgressCircle component with 50% progress value and an accessibility label.

LANGUAGE: tsx
CODE:
<ProgressCircle aria-label="Loading…" value={50} />

----------------------------------------

TITLE: Basic LogicButton Example with AND Variant
DESCRIPTION: Demonstrates a basic usage of the LogicButton component with the 'and' variant and a text label.

LANGUAGE: tsx
CODE:
<LogicButton variant="and">And</LogicButton>

----------------------------------------

TITLE: Converting Time Object to String in TypeScript
DESCRIPTION: Shows how to convert a Time object to an ISO 8601 formatted string representation using the toString method.

LANGUAGE: tsx
CODE:
let time = new Time(9, 45);
time.toString(); // '09:45:00'

----------------------------------------

TITLE: Calendar Component Styling with CSS
DESCRIPTION: CSS styling for the Calendar component, including styling for the header, buttons, calendar cells, and various states like pressed, focused, and selected.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Calendar {
  width: fit-content;
  max-width: 100%;
  color: var(--text-color);

  header {
    display: flex;
    align-items: center;
    margin: 0 4px .5rem 4px;

    .react-aria-Heading {
      flex: 1;
      margin: 0;
      text-align: center;
      font-size: 1.375rem;
    }
  }

  .react-aria-Button {
    width: 2rem;
    height: 2rem;
    padding: 0;
  }

  .react-aria-CalendarCell {
    width: 2rem;
    line-height: 2rem;
    text-align: center;
    border-radius: 6px;
    cursor: default;
    outline: none;
    margin: 1px;
    forced-color-adjust: none;

    &[data-outside-month] {
      display: none;
    }

    &[data-pressed] {
      background: var(--gray-100);
    }

    &[data-focus-visible] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: 2px;
    }

    &[data-selected] {
      background: var(--highlight-background);
      color: var(--highlight-foreground);
    }
  }
}

----------------------------------------

TITLE: Configuring Decimal Formatting in NumberField
DESCRIPTION: Example of using formatOptions to configure decimal display, including sign display and fraction digits. This enables advanced number formatting via Intl.NumberFormat.

LANGUAGE: tsx
CODE:
<MyNumberField
  label="Adjust exposure"
  defaultValue={0}
  formatOptions={{
    signDisplay: 'exceptZero',
    minimumFractionDigits: 1,
    maximumFractionDigits: 2
  }} />

----------------------------------------

TITLE: Implementing a ListBox with Dynamic Collections in React
DESCRIPTION: This example demonstrates how to create a ListBox component with a dynamic collection of items. It uses an array of objects with id and name properties, passing them through the items prop and rendering each option with ListBoxItem.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    { id: 1, name: 'Aardvark' },
    { id: 2, name: 'Cat' },
    { id: 3, name: 'Dog' },
    { id: 4, name: 'Kangaroo' },
    { id: 5, name: 'Koala' },
    { id: 6, name: 'Penguin' },
    { id: 7, name: 'Snake' },
    { id: 8, name: 'Turtle' },
    { id: 9, name: 'Wombat' }
  ];

  return (
    <ListBox aria-label="Animals" items={options} selectionMode="single">
      {(item) => <ListBoxItem>{item.name}</ListBoxItem>}
    </ListBox>
  );
}

----------------------------------------

TITLE: Styling Text Slots in React ListBox with CSS
DESCRIPTION: This CSS example shows how to style the 'label' and 'description' slots in ListBox items. Labels are displayed in bold text, while descriptions are shown in a smaller font size for visual hierarchy.

LANGUAGE: css
CODE:
.react-aria-ListBoxItem {
  [slot=label] {
    font-weight: bold;
  }

  [slot=description] {
    font-size: small;
  }
}

----------------------------------------

TITLE: CSS Styling for Unclassed Lists in React Aria Components
DESCRIPTION: This CSS snippet removes padding from unclassed lists. It's hidden in the example but included to ensure proper styling of the demo.

LANGUAGE: css
CODE:
ul:not([class]) {
  padding: 0px;
}

----------------------------------------

TITLE: CSS Styling for ListBox Empty State
DESCRIPTION: CSS for styling the empty state of a ListBox, typically centering the empty state message and applying italic styling for visual distinction.

LANGUAGE: css
CODE:
.react-aria-ListBox {
  &[data-empty] {
    align-items: center;
    justify-content: center;
    font-style: italic;
  }
}

----------------------------------------

TITLE: Referencing React Spectrum S2 Package in Markdown
DESCRIPTION: A simple markdown code block that identifies the package name @react-spectrum/s2 as part of the React Spectrum library, with a reference to check the main repository for more information.

LANGUAGE: markdown
CODE:
# @react-spectrum/s2

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Basic Link Implementation with useLink in React Aria
DESCRIPTION: Example showing how to implement a basic link using the useLink hook with a native <a> element. The hook provides the necessary accessibility properties to be spread onto the link element.

LANGUAGE: tsx
CODE:
import {useLink} from '@react-aria/link';

function Link(props) {
  let ref = React.useRef(null);
  let {linkProps} = useLink(props, ref);

  return (
    <a
      {...linkProps}
      ref={ref}
      style={{color: 'var(--blue)'}}>
      {props.children}
    </a>
  );
}

<Link href="https://adobe.com" target="_blank">Adobe</Link>

----------------------------------------

TITLE: Controlling Disabled Row Behavior in React Spectrum ListView
DESCRIPTION: This snippet demonstrates how to use the disabledBehavior prop to control which interactions are disabled for disabled rows. It compares 'all' (default) vs 'selection' behaviors in a side-by-side example.

LANGUAGE: tsx
CODE:
<Flex wrap gap="size-300">
  <PokemonList
    disabledKeys={[3]}
    defaultSelectedKeys={[]}
    disabledBehavior="all"
    aria-label="ListView with all interaction disabled for disabled rows"
    width="size-2400"
    onAction={key => alert(`Opening item ${key}...`)}
  />
  <PokemonList
    disabledKeys={[3]}
    defaultSelectedKeys={[]}
    disabledBehavior="selection"
    aria-label="ListView with selection disabled for disabled rows"
    width="size-2400"
    onAction={key => alert(`Opening item ${key}...`)}
  />
</Flex>

----------------------------------------

TITLE: Setting Placeholder Value in React Spectrum DatePicker
DESCRIPTION: Demonstrates setting a custom placeholder value using the placeholderValue prop, which controls the default value shown when empty and the default month in the calendar popover.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

<DatePicker label="Birth date" placeholderValue={new CalendarDate(1980, 1, 1)} />

----------------------------------------

TITLE: Implementing Reusable Button Component with useButton Hook
DESCRIPTION: Implementation of a reusable Button component using the useButton hook from React Aria. This component can be used for dialog triggers and actions within the dialog.

LANGUAGE: tsx
CODE:
import {useButton} from '@react-aria/button';

function Button(props) {
  let ref = React.useRef(null);
  let {buttonProps} = useButton(props, ref);
  return <button {...buttonProps} ref={ref} style={props.style}>{props.children}</button>;
}

----------------------------------------

TITLE: Setting Container Padding for DialogTrigger in React Spectrum
DESCRIPTION: Demonstrates how to configure the minimum padding between a popover dialog and the browser window using the 'containerPadding' prop. This affects when the dialog will attempt to flip positions.

LANGUAGE: tsx
CODE:
<DialogTrigger type="popover" placement="top" containerPadding={50}>
  <ActionButton>Trigger</ActionButton>
  <Dialog>
    <Heading>The Heading</Heading>
    <Divider />
    <Content>
      <Text>
        This is a popover.
      </Text>
    </Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Installing React Spectrum Searchfield Package
DESCRIPTION: NPM package identifier for the searchfield component in the React Spectrum library. This is used to install the package as a dependency in a React project.

LANGUAGE: markdown
CODE:
@react-spectrum/searchfield

----------------------------------------

TITLE: Converting CalendarDateTime to Time
DESCRIPTION: Using the toTime function to extract just the time component from a CalendarDateTime object. This is useful when only the time portion is needed.

LANGUAGE: tsx
CODE:
import {toTime} from '@internationalized/date';

let date = new CalendarDateTime(2022, 2, 3, 9, 45);
toTime(date); // 09:45:00

----------------------------------------

TITLE: Styling the Resizer Component with CSS
DESCRIPTION: CSS styles for the table column resizer, including visual states for focus and active resizing. Styles handle cursor appearance, touch interactions, and visual feedback during different resize states.

LANGUAGE: css
CODE:
.aria-table-resizer {
  width: 15px;
  background-color: grey;
  cursor: col-resize;
  height: 30px;
  touch-action: none;
  flex: 0 0 auto;
  box-sizing: border-box;
  border: 5px;
  border-style: none solid;
  border-color: transparent;
  background-clip: content-box;
}

.aria-table-resizer.focus {
  background-color: orange;
}

.aria-table-resizer.resizing {
  border-color: orange;
  background-color: transparent;
}

----------------------------------------

TITLE: CSS Styling for ColorSwatchPicker Components
DESCRIPTION: Styling implementation for ColorSwatchPicker and ColorSwatchPickerItem components, including focus states, selection indicators, and layout properties.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-ColorSwatchPicker {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.react-aria-ColorSwatchPickerItem {
  position: relative;
  outline: none;
  border-radius: 4px;
  width: fit-content;
  forced-color-adjust: none;

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: 2px;
  }

  &[data-selected]::after {
    content: '';
    position: absolute;
    inset: 0;
    border: 2px solid black;
    outline: 2px solid white;
    outline-offset: -4px;
    border-radius: inherit;
  }
}

----------------------------------------

TITLE: Importing Assets and Components for Documentation Page
DESCRIPTION: Imports necessary components and assets for building the documentation page, including the Highlights and Hero components, various image assets at different resolutions, and CSS styling modules.

LANGUAGE: JavaScript
CODE:
import {Highlights, Hero} from '@react-spectrum/docs';
import heroNarrow from 'url:../assets/internationalized_mobile@2x.png?width=976';
import heroNarrow2x from 'url:../assets/internationalized_mobile@2x.png?width=1952';
import heroNarrowWebp from 'url:../assets/internationalized_mobile@2x.png?as=webp&width=976';
import heroNarrow2xWebp from 'url:../assets/internationalized_mobile@2x.png?as=webp&width=1952';
import heroWide from 'url:../assets/internationalized@2x.png?width=976';
import heroWide2x from 'url:../assets/internationalized@2x.png?width=1952';
import heroWideWebp from 'url:../assets/internationalized@2x.png?as=webp&width=976';
import heroWide2xWebp from 'url:../assets/internationalized@2x.png?as=webp&width=1952';
import clsx from 'clsx';
import linkStyle from '@adobe/spectrum-css-temp/components/link/vars.css';
import styles from '@react-spectrum/docs/src/docs.css';
import typographyStyles from '@adobe/spectrum-css-temp/components/typography/vars.css';

----------------------------------------

TITLE: Importing Components for React Spectrum Theming
DESCRIPTION: Imports the Provider component from React Spectrum along with ActionButton for demonstration purposes.

LANGUAGE: tsx
CODE:
import {Provider} from '@react-spectrum/provider';
import {ActionButton} from '@react-spectrum/button';

----------------------------------------

TITLE: Styling the Draggable ListBox with CSS
DESCRIPTION: CSS styles for the draggable ListBox component and its options. Includes styles for normal state, selected state, focus state, and drop target indication.

LANGUAGE: css
CODE:
[role=listbox] {
  padding: 0;
  margin: 5px 0;
  list-style: none;
  box-shadow: inset 0 0 0 1px gray;
  max-width: 250px;
  outline: none;
  min-height: 50px;
  overflow: auto;
}

.option {
  padding: 3px 6px;
  outline: none;
}

.option[aria-selected=true] {
  background: blueviolet;
  color: white;
}

.option.focus-visible {
  box-shadow: inset 0 0 0 2px orange;
}

.option.drop-target {
  border-color: transparent;
  box-shadow: inset 0 0 0 2px var(--blue);
}

----------------------------------------

TITLE: Implementing a Switch Component with React Aria
DESCRIPTION: Demonstrates how to build a custom toggle switch component using React Aria hooks like useToggleState, useSwitch, and useFocusRing. The component includes accessibility features and visual state indicators.

LANGUAGE: tsx
CODE:
function Switch(props) {
  let state = useToggleState(props);
  let {inputProps} = useSwitch(props, state);
  let {isFocusVisible, focusProps} = useFocusRing();

  return (
    <label style={{display: 'flex', alignItems: 'center'}}>
      <VisuallyHidden>
        <input {...inputProps} {...focusProps} />
      </VisuallyHidden>
      <svg width={40} height={24} aria-hidden="true" style={{marginRight: 4}}>
        <rect x={4} y={4} width={32} height={16} rx={8} fill={state.isSelected ? 'orange' : 'gray'} />
        <circle cx={state.isSelected ? 28 : 12} cy={12} r={5} fill="white" />
        {isFocusVisible &&
          <rect x={1} y={1} width={38} height={22} rx={11} fill="none" stroke="orange" strokeWidth={2} />
        }
      </svg>
      {props.children}
    </label>
  );
}

<Switch>Test</Switch>

----------------------------------------

TITLE: Customizing Value Labels in ProgressBar
DESCRIPTION: This example shows how to customize the value label of a ProgressBar by hiding it, providing a custom string, or formatting the percentage with specific decimal places.

LANGUAGE: tsx
CODE:
<Flex direction="column" maxWidth="size-3000" gap="size-300">
  <ProgressBar label="Loading…" showValueLabel={false} value={30} />
  <ProgressBar label="Loading…" valueLabel="30 of 60 dogs" value={30} />
  <ProgressBar label="Loading…" formatOptions={{style: 'percent', minimumFractionDigits: 2}} value={30.123} />
</Flex>

----------------------------------------

TITLE: Basic Link Example in React Spectrum
DESCRIPTION: Demonstrates a basic implementation of the Link component with an external URL.

LANGUAGE: tsx
CODE:
<Link href="https://www.imdb.com/title/tt6348138/" target="_blank">The missing link.</Link>

----------------------------------------

TITLE: Configuring Tailwind CSS for React Aria Components (v4)
DESCRIPTION: Shows how to import and configure the tailwindcss-react-aria-components plugin for Tailwind CSS v4 by adding it to your CSS file.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";

----------------------------------------

TITLE: Converting ZonedDateTime to CalendarDateTime in TypeScript
DESCRIPTION: Demonstrates converting a ZonedDateTime to a CalendarDateTime using toCalendarDateTime. This is useful for representing times that occur at the same local time regardless of time zone.

LANGUAGE: tsx
CODE:
import {toCalendarDateTime} from '@internationalized/date';

let date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');
toCalendarDateTime(date); // 2022-02-03T09:45:00

----------------------------------------

TITLE: Rendering Accessibility Demonstration Component
DESCRIPTION: This snippet imports and renders an A11y component that demonstrates React Aria's accessibility features. It showcases how React Aria components are built to work with assistive technologies across different devices.

LANGUAGE: tsx
CODE:
import {A11y} from './home/A11y';

<A11y />

----------------------------------------

TITLE: Basic SearchWithin Component Example in React Spectrum
DESCRIPTION: A basic implementation of the SearchWithin component with a SearchField and a Picker containing multiple options.

LANGUAGE: tsx
CODE:
<SearchWithin label="Search">
  <SearchField />
  <Picker defaultSelectedKey="all">
    <Item key="all">All</Item>
    <Item key="campaigns">Campaigns</Item>
    <Item key="audiences">Audiences</Item>
    <Item key="tags">Tags</Item>
  </Picker>
</SearchWithin>

----------------------------------------

TITLE: Disabling Specific Items in TreeView
DESCRIPTION: This snippet shows how to make specific items in a TreeView non-selectable by providing an array of keys to the disabledKeys prop.

LANGUAGE: tsx
CODE:
<ExampleTree
  aria-label="Example tree with disabled items"
  defaultExpandedKeys={['projects', 'project-2']}
  selectionMode="single"
  /*- begin highlight -*/
  disabledKeys={['document-a', 'document-b']}
  /*- end highlight -*/
/>

----------------------------------------

TITLE: LabeledValue with Time Range
DESCRIPTION: Demonstrates formatting a time range using start and end time objects.

LANGUAGE: tsx
CODE:
import {Time} from '@internationalized/date';

<LabeledValue label="Business hours" value={{start: new Time(8, 30), end: new Time(18)}} />

----------------------------------------

TITLE: Importing Dialog Components and Related UI Elements in React Spectrum
DESCRIPTION: Demonstrates the necessary imports for using Dialog-related components along with supporting UI elements like buttons, form components, and layout utilities.

LANGUAGE: jsx
CODE:
import {ActionButton, Button} from '@react-spectrum/button';
import {ButtonGroup} from '@react-spectrum/buttongroup';
import {Checkbox} from '@react-spectrum/checkbox';
import {Content} from '@react-spectrum/view';
import {Dialog, DialogTrigger} from '@react-spectrum/dialog';
import {Divider} from '@react-spectrum/divider';
import {Form} from '@react-spectrum/form';
import {Heading, Text} from '@react-spectrum/text';
import {TextField} from '@react-spectrum/textfield';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Creating a Fully Controlled ComboBox Component
DESCRIPTION: Shows how to create a fully controlled ComboBox by managing selected key, input value, and items list with custom change handlers for each controlled aspect.

LANGUAGE: tsx
CODE:
function ControlledComboBox() {
  let optionList = [
    {name: 'Red Panda', id: '1'},
    {name: 'Cat', id: '2'},
    {name: 'Dog', id: '3'},
    {name: 'Aardvark', id: '4'},
    {name: 'Kangaroo', id: '5'},
    {name: 'Snake', id: '6'}
  ];

  // Store ComboBox input value, selected option, open state, and items
  // in a state tracker
  let [fieldState, setFieldState] = React.useState({
    selectedKey: '',
    inputValue: '',
    items: optionList
  });

  // Implement custom filtering logic and control what items are
  // available to the ComboBox.
  let {startsWith} = useFilter({sensitivity: 'base'});

  // Specify how each of the ComboBox values should change when an
  // option is selected from the list box
  let onSelectionChange = (key) => {
    setFieldState(prevState => {
      let selectedItem = prevState.items.find(option => option.id === key);
      return ({
        inputValue: selectedItem?.name ?? '',
        selectedKey: key,
        items: optionList.filter(item => startsWith(item.name, selectedItem?.name ?? ''))
      })
    });
  };

  // Specify how each of the ComboBox values should change when the input
  // field is altered by the user
  let onInputChange = (value) => {
    setFieldState(prevState => ({
      inputValue: value,
      selectedKey: value === '' ? null : prevState.selectedKey,
      items: optionList.filter(item => startsWith(item.name, value))
    }));
  };

  // Show entire list if user opens the menu manually
  let onOpenChange = (isOpen, menuTrigger) => {
    if (menuTrigger === 'manual' && isOpen) {
      setFieldState(prevState => ({
        inputValue: prevState.inputValue,
        selectedKey: prevState.selectedKey,
        items: optionList
      }));
    }
  };

  // Pass each controlled prop to useComboBox along with their
  // change handlers
  return (
    <ComboBox
      label="Favorite Animal"
      items={fieldState.items}
      selectedKey={fieldState.selectedKey}
      inputValue={fieldState.inputValue}
      onOpenChange={onOpenChange}
      onSelectionChange={onSelectionChange}
      onInputChange={onInputChange}>
      {item => <Item>{item.name}</Item>}
    </ComboBox>
  )
}

<ControlledComboBox />

----------------------------------------

TITLE: Importing ProgressBar Components in React Spectrum
DESCRIPTION: This snippet shows how to import the necessary components for working with ProgressBar in React Spectrum, including the ProgressBar itself along with layout components.

LANGUAGE: jsx
CODE:
import {Flex} from '@react-spectrum/layout';
import {ProgressBar} from '@react-spectrum/progress';
import {View} from '@react-spectrum/view';

----------------------------------------

TITLE: CheckboxGroup Labeling Options with Necessity Indicators
DESCRIPTION: Shows different ways to label a CheckboxGroup including required state indicators with both icon and text formats.

LANGUAGE: tsx
CODE:
<Flex gap="size-300" wrap>
  <CheckboxGroup label="Favorite sports">
    <Checkbox value="soccer">Soccer</Checkbox>
    <Checkbox value="baseball">Baseball</Checkbox>
    <Checkbox value="basketball">Basketball</Checkbox>
  </CheckboxGroup>
  <CheckboxGroup label="Favorite sports" isRequired necessityIndicator="icon">
    <Checkbox value="soccer">Soccer</Checkbox>
    <Checkbox value="baseball">Baseball</Checkbox>
    <Checkbox value="basketball">Basketball</Checkbox>
  </CheckboxGroup>
  <CheckboxGroup label="Favorite sports" isRequired necessityIndicator="label">
    <Checkbox value="soccer">Soccer</Checkbox>
    <Checkbox value="baseball">Baseball</Checkbox>
    <Checkbox value="basketball">Basketball</Checkbox>
  </CheckboxGroup>
  <CheckboxGroup label="Favorite sports" necessityIndicator="label">
    <Checkbox value="soccer">Soccer</Checkbox>
    <Checkbox value="baseball">Baseball</Checkbox>
    <Checkbox value="basketball">Basketball</Checkbox>
  </CheckboxGroup>
</Flex>

----------------------------------------

TITLE: Implementing Hidden Headers in React Spectrum TableView
DESCRIPTION: Shows how to hide specific column headers using the hideHeader prop, particularly useful for columns containing action buttons instead of text. Includes example of conditionally rendering different cell content based on column type.

LANGUAGE: tsx
CODE:
function TableExample(props) {
  let columns = [
    {name: 'First Name', key: 'firstName'},
    {name: 'Last Name', key: 'lastName'},
    {name: 'Add Info', key: 'addInfo'},
    {name: 'Age', key: 'age'}
  ];

  let rows = [
    {id: '1', firstName: 'John', lastName: 'Doe', age: '45'},
    {id: '2', firstName: 'Jane', lastName: 'Doe', age: '37'},
    {id: '3', firstName: 'Joe', lastName: 'Schmoe', age: '67'},
    {id: '4', firstName: 'Joe', lastName: 'Bloggs', age: '12'},
    {id: '5', firstName: 'Taylor', lastName: 'Rodriguez Lloyd-Atkinson', age: '83'}
  ];

  return (
    <TableView aria-label="Example table with hidden headers" maxWidth="size-6000" {...props}>
      <TableHeader columns={columns}>
        {column => (
          <Column
            hideHeader={column.key === 'addInfo'}
            align={column.key === 'age' ? 'end' : 'start'}
            showDivider={column.key === 'addInfo'}>
            {column.name}
          </Column>
        )}
      </TableHeader>
      <TableBody items={rows}>
        {item =>
          (<Row key={item.id}>
            {key =>
              key === 'addInfo'
              ? <Cell><ActionButton aria-label="Add Info" isQuiet><Add /></ActionButton></Cell>
              : <Cell>{item[key]}</Cell>
            }
          </Row>)
        }
      </TableBody>
    </TableView>
  );
}

----------------------------------------

TITLE: Styling HTML Elements with Spectrum 2 Style Macro
DESCRIPTION: Example of using the style macro to apply Spectrum 2 styles to a standard HTML div element. The style macro is applied within the className prop.

LANGUAGE: jsx
CODE:
<div className={style({marginStart: 16})}>
  Hello Spectrum 2!
</div>

----------------------------------------

TITLE: Creating Negative Variant Tooltip with Icon
DESCRIPTION: Example showing how to create a warning/negative tooltip with an icon using the negative variant and showIcon prop.

LANGUAGE: tsx
CODE:
<TooltipTrigger>
  <ActionButton aria-label="Danger Will Robinson"><Delete /></ActionButton>
  <Tooltip variant="negative" showIcon>Dangerous action.</Tooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Conditional Rendering in Menu Items Based on State
DESCRIPTION: Example of using render props to conditionally render elements based on the component's state, such as showing a checkmark icon when an item is selected.

LANGUAGE: jsx
CODE:
<MenuItem>
  {({isSelected}) => (
    <>
      {isSelected && <CheckmarkIcon />}
      Item
    </>
  )}
</MenuItem>

----------------------------------------

TITLE: Creating a Wrapping Flex Layout in React Spectrum
DESCRIPTION: Shows how to enable wrapping of items in a Flex container so they reflow into multiple rows when there's not enough space.

LANGUAGE: tsx
CODE:
<Flex direction="row" gap="size-100" wrap>
  {colors.map(color =>
    <View key={color} backgroundColor={color} width="size-800" height="size-800" />
  )}
</Flex>

----------------------------------------

TITLE: TextField Labeling and Required State Options
DESCRIPTION: Shows different ways to display required state indicators on TextField components through various property combinations.

LANGUAGE: tsx
CODE:
<Flex gap="size-150" wrap>
  <TextField label="Street address" />
  <TextField label="Street address" isRequired necessityIndicator="icon" />
  <TextField label="Street address" isRequired necessityIndicator="label" />
  <TextField label="Street address" necessityIndicator="label" />
</Flex>

----------------------------------------

TITLE: CSS Styling Example for Group Component States
DESCRIPTION: Shows how to target Group component states using CSS selectors with data attributes. This example demonstrates styling for hover and focus-visible states.

LANGUAGE: css
CODE:
.react-aria-Group[data-hovered] {
  /* ... */
}

.react-aria-Group[data-focus-visible] {
  /* ... */
}

----------------------------------------

TITLE: Styling Link Items in Select
DESCRIPTION: CSS styling specifically for ListBoxItem elements that function as links, removing text decoration and setting the cursor to pointer for better usability.

LANGUAGE: css
CODE:
.react-aria-ListBoxItem[href] {
  text-decoration: none;
  cursor: pointer;
}

----------------------------------------

TITLE: Targeting Components with Data Attributes for States
DESCRIPTION: Shows how to use data attributes to target specific UI states of React Aria components in CSS selectors, with an example of targeting disabled state.

LANGUAGE: css
CODE:
.react-aria-DisclosureGroup[data-disabled] {
  /* ... */
}

----------------------------------------

TITLE: Importing Types for Custom Calendar Implementation
DESCRIPTION: Imports necessary types and functions from @internationalized/date for implementing a custom calendar system.

LANGUAGE: tsx
CODE:
import type {AnyCalendarDate} from '@internationalized/date';
import {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';

----------------------------------------

TITLE: Styling for FieldGroup Component with CSS
DESCRIPTION: CSS styles for the FieldGroup component, defining the fieldset padding, width, and error message appearance.

LANGUAGE: css
CODE:
fieldset {
  padding: 1.5em;
  width: fit-content;
}

.invalid {
  color: var(--invalid-color);
  margin-top: 1em;
  display: block;
}

----------------------------------------

TITLE: Configuring Next.js basePath with Environment Variables
DESCRIPTION: Setup for Next.js configuration with basePath, exposing it as an environment variable to be used in the client-side code.

LANGUAGE: tsx
CODE:
// next.config.js
const basePath = '...';
const nextConfig = {
  basePath,
  env: {
    BASE_PATH: basePath
  }
};

----------------------------------------

TITLE: Implementing onChange Event Handler with NumberField in React
DESCRIPTION: This example demonstrates how to use the onChange event with NumberField to update a separate element with the entered value. The component manages state and displays the current number of cookies being ordered.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState(null);

  return (
    <Flex direction="column" gap="size-150">
      <NumberField
        onChange={setValue}
        label="Number of cookies to buy"
        minValue={0} />
      <pre>How many cookies you are ordering: {isNaN(value) ? 0 : value}</pre>
    </Flex>
  );
}

----------------------------------------

TITLE: Importing Documentation Dependencies
DESCRIPTION: Imports various documentation components and data needed for rendering the NumberFormatter documentation page.

LANGUAGE: jsx
CODE:
import docs from 'docs:@internationalized/number';
import {HeaderInfo, FunctionAPI, ClassAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@internationalized/number/package.json';

----------------------------------------

TITLE: Button Component Implementation for SearchField
DESCRIPTION: Implementation of a reusable Button component using the useButton hook from React Aria. This component is used for the clear button in the SearchField examples.

LANGUAGE: TypeScript
CODE:
import {useButton} from '@react-aria/button';

function Button(props) {
  let ref = React.useRef(null);
  let {buttonProps} = useButton(props, ref);
  return <button {...buttonProps} ref={ref}>{props.children}</button>;
}

----------------------------------------

TITLE: Using Text Input for Number Fields in React
DESCRIPTION: Using a text input with inputMode attribute instead of a native number input element to overcome browser limitations in number formatting and internationalization support.

LANGUAGE: html
CODE:
<input type="text">

----------------------------------------

TITLE: Formatting Units of Measurement in NumberField
DESCRIPTION: Demonstrates how to configure NumberField to display values with units of measurement. Note that Safari requires a polyfill for this feature.

LANGUAGE: tsx
CODE:
<MyNumberField
  label="Package width"
  defaultValue={4}
  formatOptions={{
    style: 'unit',
    unit: 'inch',
    unitDisplay: 'long'
  }} />

----------------------------------------

TITLE: AlertDialog with Disabled Secondary Action
DESCRIPTION: Demonstrates how to disable the secondary action button in an AlertDialog using the isSecondaryActionDisabled prop, limiting available options for users.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Upgrade</ActionButton>
  <AlertDialog
    isSecondaryActionDisabled
    variant="confirmation"
    title="Upgrade subscription"
    primaryActionLabel="Upgrade"
    secondaryActionLabel="Apply Coupon"
    cancelLabel="Cancel">
    Upgrade subscription for an additional $14.99 a month?
  </AlertDialog>
</DialogTrigger>

----------------------------------------

TITLE: Importing AlertDialog Components in React Spectrum
DESCRIPTION: Demonstrates how to import the ActionButton and AlertDialog components from their respective React Spectrum packages.

LANGUAGE: jsx
CODE:
import {ActionButton} from '@react-spectrum/button';
import {AlertDialog, DialogTrigger} from '@react-spectrum/dialog';

----------------------------------------

TITLE: Tailwind Configuration for React Aria Components with Tailwind v3
DESCRIPTION: Shows how to configure Tailwind v3 to work with React Aria Components by adding the required plugins to the tailwind.config.js file. Notes the version compatibility between the plugin and Tailwind versions.

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components'),
    require('tailwindcss-animate')
  ]
};

----------------------------------------

TITLE: Creating Medium Size Modal Dialog in React Spectrum
DESCRIPTION: Demonstrates a medium (M) size dialog implementation with a form. It includes action buttons with the ability to programmatically close the dialog using the close function from the render prop.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Medium</ActionButton>
  {(close) => (
    <Dialog size="M">
      <Heading>Profile</Heading>
      <Divider />
      <ButtonGroup>
        <Button variant="secondary" onPress={close}>Cancel</Button>
        <Button autoFocus variant="accent" onPress={close}>Save</Button>
      </ButtonGroup>
      <Content>
        <Form>
          <TextField label="Name" />
          <Checkbox>Make private</Checkbox>
        </Form>
      </Content>
    </Dialog>
  )}
</DialogTrigger>

----------------------------------------

TITLE: Converting Between Calendar Systems in TypeScript
DESCRIPTION: Demonstrates how to create a date in the Hebrew calendar and convert it to the Gregorian calendar using the toCalendar function.

LANGUAGE: tsx
CODE:
import {HebrewCalendar, GregorianCalendar, toCalendar} from '@internationalized/date';

let hebrewDate = new CalendarDate(new HebrewCalendar(), 5781, 1, 1);
toCalendar(hebrewDate, new GregorianCalendar());
// => new CalendarDate(new GregorianCalendar(), 2020, 9, 19);

----------------------------------------

TITLE: Disabled ActionMenu
DESCRIPTION: Shows how to disable the entire ActionMenu, preventing any user interaction with the menu trigger and its items.

LANGUAGE: tsx
CODE:
<ActionMenu
  items={[
    {name: 'Undo', id: 'undo'},
    {name: 'Redo', id: 'redo'},
    {name: 'Cut', id: 'cut'},
    {name: 'Copy', id: 'copy'},
    {name: 'Paste', id: 'paste'}
  ]}
  isDisabled>
  {item => <Item>{item.name}</Item>}
</ActionMenu>

----------------------------------------

TITLE: Implementing a Table Component with React Aria
DESCRIPTION: This snippet shows how to create a main Table component using useTable and useTableState hooks. It handles selection modes, renders table structure, and manages the collection of rows and columns with proper accessibility.

LANGUAGE: tsx
CODE:
import {Cell, Column, Row, TableBody, TableHeader, useTableState} from '@react-stately/table';
import {mergeProps} from '@react-aria/utils';
import {useRef} from 'react';
import {useFocusRing} from '@react-aria/focus';
import {useTable} from '@react-aria/table';

function Table(props) {
  let {selectionMode, selectionBehavior} = props;
  let state = useTableState({
    ...props,
    showSelectionCheckboxes: selectionMode === 'multiple' && selectionBehavior !== 'replace'
  });

  let ref = useRef<HTMLTableElement | null>(null);
  let {collection} = state;
  let {gridProps} = useTable(props, state, ref);

  return (
    <table {...gridProps} ref={ref} style={{borderCollapse: 'collapse'}}>
      <TableRowGroup type="thead">
        {collection.headerRows.map(headerRow => (
          <TableHeaderRow key={headerRow.key} item={headerRow} state={state}>
            {[...headerRow.childNodes].map(column =>
              column.props.isSelectionCell
                ? <TableSelectAllCell key={column.key} column={column} state={state} />
                : <TableColumnHeader key={column.key} column={column} state={state} />
            )}
          </TableHeaderRow>
        ))}
      </TableRowGroup>
      <TableRowGroup type="tbody">
        {[...collection.body.childNodes].map(row => (
          <TableRow key={row.key} item={row} state={state}>
            {[...row.childNodes].map(cell =>
              cell.props.isSelectionCell
                ? <TableCheckboxCell key={cell.key} cell={cell} state={state} />
                : <TableCell key={cell.key} cell={cell} state={state} />
            )}
          </TableRow>
        ))}
      </TableRowGroup>
    </table>
  );
}

----------------------------------------

TITLE: Rendering ListBox Example for Keyboard Navigation Demonstration
DESCRIPTION: This snippet imports and renders a ListBox example component to demonstrate keyboard navigation features in React Aria, such as arrow key navigation, typeahead, and multiple selection modifiers.

LANGUAGE: tsx
CODE:
import {ListBoxExample} from './home/ListBoxExample';
<ListBoxExample />

----------------------------------------

TITLE: Creating Dynamic Collection with React State
DESCRIPTION: Demonstrates how to create a dynamic collection using the items prop and a render function with React state.

LANGUAGE: TSX
CODE:
let [animals, setAnimals] = useState([
  {id: 1, name: 'Aardvark'},
  {id: 2, name: 'Kangaroo'},
  {id: 3, name: 'Snake'}
]);

<ListBox items={animals}>
  {item => <Item>{item.name}</Item>}
</ListBox>

----------------------------------------

TITLE: Hiding Time Zone Display in DateField Component
DESCRIPTION: This example demonstrates how to hide the time zone abbreviation in a DateField component when using a ZonedDateTime object as the value. The hideTimeZone prop is used to suppress the display of the time zone that would otherwise appear by default.

LANGUAGE: tsx
CODE:
<DateField
  label="Appointment time"
  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}
  hideTimeZone />

----------------------------------------

TITLE: Installing and Running React Aria Storybook
DESCRIPTION: Commands to install dependencies and launch the Storybook environment for React Aria examples. This allows you to explore and modify components and their CSS files.

LANGUAGE: shell
CODE:
yarn
yarn storybook

----------------------------------------

TITLE: Read-only Checkbox Example
DESCRIPTION: Example showing a read-only checkbox that remains focusable but cannot be changed by the user.

LANGUAGE: tsx
CODE:
<Checkbox isSelected isReadOnly>Agree</Checkbox>

----------------------------------------

TITLE: Picker Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This table compares Picker component props, showing that Spectrum 2 takes menuWidth as a number (pixels) while RSP v3 uses DimensionValue, and that RSP v3 has isQuiet, validationState, isLoading and onLoadMore properties not yet implemented in S2.

LANGUAGE: typescript
CODE:
menuWidth | 🟢 `number` | 🔴 `DimensionValue`
slot | 🟢 `null \| string` | –
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | –
isQuiet | – | 🔴 `boolean`
validationState | – | 🔴 `ValidationState`
isLoading | – | 🔴 `boolean`
onLoadMore | – | 🔴 `() => any`

----------------------------------------

TITLE: DateField with Different Granularity Settings
DESCRIPTION: Demonstrates how to display the same date value with different granularities, one showing seconds and one showing only the date part.

LANGUAGE: tsx
CODE:
function Example() {
  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));

  return (
    <Flex gap="size-150" wrap>
      <DateField
        label="Date and time"
        granularity="second"
        value={date}
        onChange={setDate} />
      <DateField
        label="Date"
        granularity="day"
        value={date}
        onChange={setDate} />
    </Flex>
  );
}

----------------------------------------

TITLE: Importing SearchAutocomplete and Related Components
DESCRIPTION: Import statements for the SearchAutocomplete component and related utilities from React Spectrum packages, including icons and supporting components.

LANGUAGE: jsx
CODE:
import {SearchAutocomplete, Section, Item} from '@react-spectrum/autocomplete';
import {useFilter} from '@react-aria/i18n';
import Email from '@spectrum-icons/workflow/Email';
import Document from '@spectrum-icons/workflow/Document';
import WebPages from '@spectrum-icons/workflow/WebPages';
import SocialNetwork from '@spectrum-icons/workflow/SocialNetwork';
import ShoppingCart from '@spectrum-icons/workflow/ShoppingCart';
import Folder from '@spectrum-icons/workflow/Folder';
import {Text} from '@react-spectrum/text';
import {Avatar} from "@react-spectrum/avatar";

----------------------------------------

TITLE: Development Server Failure in React Spectrum
DESCRIPTION: Example of a development server failure due to missing exports. This can occur after running a build, and can be resolved by cleaning all build artifacts with the provided command, or by deleting the Parcel cache.

LANGUAGE: bash
CODE:
@parcel/core: packages/@react-aria/virtualizer/src/index.ts does not export 'useVirtualizer'

----------------------------------------

TITLE: Styling DateRangePicker Components with CSS Classes
DESCRIPTION: Demonstrates how to target React Aria components using the default CSS class names that follow the 'react-aria-ComponentName' convention.

LANGUAGE: css
CODE:
.react-aria-DateRangePicker {
  /* ... */
}

----------------------------------------

TITLE: Creating a Vertical Stack Layout with Flex in React Spectrum
DESCRIPTION: Demonstrates how to create a vertical stack layout with the Flex component, defining width and gap using Spectrum dimension variables.

LANGUAGE: tsx
CODE:
<Flex direction="column" width="size-2000" gap="size-100">
  <View backgroundColor="celery-600" height="size-800" />
  <View backgroundColor="blue-600" height="size-800" />
  <View backgroundColor="magenta-600" height="size-800" />
</Flex>

----------------------------------------

TITLE: Using LocalizedStringProvider with Custom Dictionary
DESCRIPTION: Demonstrates how to pass a custom dictionary to the LocalizedStringProvider component to optimize bundle size by including only the necessary localization strings.

LANGUAGE: tsx
CODE:
<LocalizedStringProvider locale={locale} dictionary={dictionary} />

----------------------------------------

TITLE: Configuring Popover Placement with PopoverTrigger
DESCRIPTION: This example shows how to use the PopoverTrigger component with different placement options (start, top, bottom, end) to position popover dialogs relative to trigger buttons.

LANGUAGE: tsx
CODE:
<div style={{ display: 'flex', gap: 8 }}>
  <PopoverTrigger placement="start" label="⬅️">
    <Dialog>In left-to-right, this is on the left. In right-to-left, this is on the right.</Dialog>
  </PopoverTrigger>
  <PopoverTrigger placement="top" label="⬆️">
    <Dialog>This popover is above the button.</Dialog>
  </PopoverTrigger>
  <PopoverTrigger placement="bottom" label="⬇️">
    <Dialog>This popover is below the button.</Dialog>
  </PopoverTrigger>
  <PopoverTrigger placement="end" label="➡️">
    <Dialog>In left-to-right, this is on the right. In right-to-left, this is on the left.</Dialog>
  </PopoverTrigger>
</div>

----------------------------------------

TITLE: Rendering Hero Component with Responsive Images
DESCRIPTION: Implements the Hero component with various image sources for different screen sizes, resolutions, and image formats to optimize loading performance.

LANGUAGE: JSX
CODE:
<Hero
  narrow={heroNarrow}
  narrow2x={heroNarrow2x}
  narrowWebp={heroNarrowWebp}
  narrow2xWebp={heroNarrow2xWebp}
  wide={heroWide}
  wide2x={heroWide2x}
  wideWebp={heroWideWebp}
  wide2xWebp={heroWide2xWebp}
  alt="React Stately hero image" />

----------------------------------------

TITLE: Implementing Read-only SearchAutocomplete in React Spectrum
DESCRIPTION: This example shows how to create a read-only SearchAutocomplete component by using the isReadOnly property. The component contains a list of animal names as selectable items.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Search Animals" isReadOnly>
  <Item>Red Panda</Item>
  <Item>Cat</Item>
  <Item>Dog</Item>
  <Item>Aardvark</Item>
  <Item>Kangaroo</Item>
  <Item>Snake</Item>
</SearchAutocomplete>

----------------------------------------

TITLE: Disabled Avatar Component in React Spectrum
DESCRIPTION: Shows how to render a disabled Avatar component using the isDisabled prop.

LANGUAGE: tsx
CODE:
<Avatar src="https://i.imgur.com/kJOwAdv.png" alt="default Adobe avatar" isDisabled />

----------------------------------------

TITLE: Rendering Color Components Section in React
DESCRIPTION: Displays documentation for color-related components using ExampleCard components with illustrations and descriptions.

LANGUAGE: JSX
CODE:
<section className={styles.cardGroup}>

<ExampleCard
  url="ColorPicker.html"
  title="ColorPicker"
  description="A color picker synchronizes a color value between multiple React Aria color components.">
  <ColorPicker />
</ExampleCard>

<ExampleCard
  url="ColorArea.html"
  title="ColorArea"
  description="A color area allows users to adjust two channels of a color value.">
  <ColorArea />
</ExampleCard>

<ExampleCard
  url="ColorSlider.html"
  title="ColorSlider"
  description="A color slider allows users to adjust an individual channel of a color value.">
  <ColorSlider />
</ExampleCard>

<ExampleCard
  url="ColorWheel.html"
  title="ColorWheel"
  description="A color wheel allows users to adjust the hue of a color value on a circular track.">
  <ColorWheel />
</ExampleCard>

<ExampleCard
  url="ColorField.html"
  title="ColorField"
  description="A color field allows users to edit a hex color or individual color channel value.">
  <ColorField />
</ExampleCard>

<ExampleCard
  url="ColorSwatch.html"
  title="ColorSwatch"
  description="A color swatch displays a preview of a selected color.">
  <ColorSwatch />
</ExampleCard>

<ExampleCard
  url="ColorSwatchPicker.html"
  title="ColorSwatchPicker"
  description="A color swatch picker displays a list of color swatches and allows a user to select one of them.">
  <ColorSwatchPicker />
</ExampleCard>

</section>

----------------------------------------

TITLE: Processing Directory Paste Operations in React with useClipboard
DESCRIPTION: This component handles pasting directory structures from the clipboard. It uses the DirectoryDropItem interface to iterate through the directory's contents asynchronously and displays file and folder icons in a grid layout.

LANGUAGE: tsx
CODE:
import type {DirectoryDropItem} from '@react-aria/dnd';
import File from '@spectrum-icons/workflow/FileTxt';
import Folder from '@spectrum-icons/workflow/Folder';

function Pasteable() {
  let [files, setFiles] = React.useState(null);
  let {clipboardProps} = useClipboard({
    async onPaste(items) {
      // Find the first dropped item that is a directory.
      let dir = items.find(item => item.kind === 'directory') as DirectoryDropItem;
      if (dir) {
        // Read entries in directory and update state with relevant info.
        let files = [];
        for await (let entry of dir.getEntries()) {
          files.push({
            name: entry.name,
            kind: entry.kind
          });
        }
        setFiles(files);
      }
    }
  });

  let contents = <>Paste directory here</>;
  if (files) {
    contents = (
      <ul>
        {files.map(f => (
          <li key={f.name}>
            {f.kind === 'directory' ? <Folder /> : <File />}
            <span>{f.name}</span>
          </li>
        ))}
      </ul>
    );
  }

  return (
    <div role="textbox" tabIndex={0} {...clipboardProps} className="grid">
      {contents}
    </div>
  );
}

----------------------------------------

TITLE: Tabs Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This table shows that Spectrum 2 supports slot property for Tabs, while RSP v3 has items, isQuiet, isEmphasized, and disallowEmptySelection properties not supported in S2.

LANGUAGE: typescript
CODE:
slot | 🟢 `null \| string` | –
items | – | 🔴 `Iterable<{}>`
isQuiet | – | 🔴 `boolean`
isEmphasized | – | 🔴 `boolean`
disallowEmptySelection | – | 🔴 `boolean`

----------------------------------------

TITLE: Setting Custom Keys in Dynamic Collections
DESCRIPTION: Shows how to set custom keys for items in a dynamic collection when items don't have id or key properties.

LANGUAGE: TSX
CODE:
let [animals, setAnimals] = useState([
  {name: 'Aardvark'},
  {name: 'Kangaroo'},
  {name: 'Snake'}
]);

<ListBox items={animals}>
  {item => <Item key={item.name}>{item.name}</Item>}
</ListBox>

----------------------------------------

TITLE: DateRangePicker with Placeholder Values and Custom Granularity
DESCRIPTION: Shows how to set placeholderValue with a specific time zone while configuring granularity to control the value types emitted from onChange events.

LANGUAGE: tsx
CODE:
import {now} from '@internationalized/date';

<Flex gap="size-150" wrap>
  <DateRangePicker
    label="Date range"
    granularity="second" />
  <DateRangePicker
    label="Date range"
    placeholderValue={now('America/New_York')}
    granularity="second" />
</Flex>

----------------------------------------

TITLE: Creating a Time Object with Constructor in TypeScript
DESCRIPTION: Creates a Time object representing 9:45 AM using the Time constructor from @internationalized/date package.

LANGUAGE: tsx
CODE:
import {Time} from '@internationalized/date';

let time = new Time(9, 45);

----------------------------------------

TITLE: IllustratedMessage Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This comparison shows that Spectrum 2 supports size and orientation properties for the IllustratedMessage component which are not present in RSP v3.

LANGUAGE: typescript
CODE:
size | 🟢 `'L' \| 'M' \| 'S'` | –
orientation | 🟢 `'horizontal' \| 'vertical'` | –

----------------------------------------

TITLE: Setting a Custom First Day of Week in RangeCalendar
DESCRIPTION: Shows how to customize the first day of the week in the calendar by using the firstDayOfWeek prop instead of using the locale default.

LANGUAGE: tsx
CODE:
<RangeCalendar aria-label="Trip dates" firstDayOfWeek="mon" />

----------------------------------------

TITLE: Configuring Selection in TreeView
DESCRIPTION: Shows how to enable item selection in a TreeView using the selectionMode prop and set default selected items with defaultSelectedKeys. This example demonstrates multiple selection mode.

LANGUAGE: tsx
CODE:
<ExampleTree
  aria-label="Example tree with selection"
  defaultExpandedKeys={['projects', 'project-2']}
  /*- begin highlight -*/
  selectionMode="multiple"
  defaultSelectedKeys={['document-a', 'document-b']}
  /*- end highlight -*/
/>

----------------------------------------

TITLE: Setting Hour Cycle in TimeField Component
DESCRIPTION: Demonstrates how to override the default hour format (12 or 24 hour) in a TimeField component by using the hourCycle prop.

LANGUAGE: tsx
CODE:
<MyTimeField
  label="Appointment time"
  hourCycle={24} />

----------------------------------------

TITLE: Disabled Form in React Spectrum
DESCRIPTION: Shows a fully disabled form where all child elements inherit the disabled state, preventing user interaction with any form controls.

LANGUAGE: tsx
CODE:
<Form
  isDisabled
  aria-label="Disabled example"
  maxWidth="size-3600">
  <TextField label="Name" />
  <RadioGroup label="Favorite pet">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: NumberField with Currency Formatting
DESCRIPTION: Example of NumberField with currency formatting options. It demonstrates how to use the formatOptions prop to apply currency-specific formatting using the Intl.NumberFormat API.

LANGUAGE: tsx
CODE:
<NumberField
  label="Transaction amount"
  defaultValue={45}
  minValue={0}
  formatOptions={{
    style: 'currency',
    currency: 'EUR'
  }} />

----------------------------------------

TITLE: Frontmatter Metadata for Documentation Page
DESCRIPTION: Defines metadata for the documentation page including category and keywords to help with search and navigation.

LANGUAGE: jsx
CODE:
---
category: Drag and Drop
keywords: [lists, state, dragging, dropping, drag, drop]
---

----------------------------------------

TITLE: MenuTrigger with closeOnSelect Set to False
DESCRIPTION: Example showing how to keep the menu open after item selection by setting the closeOnSelect prop to false, useful for multiple selection menus.

LANGUAGE: tsx
CODE:
<MenuTrigger closeOnSelect={false}>
  <ActionButton>
    View
  </ActionButton>
  <Menu selectionMode="multiple">
    <Item key="side">Side bar</Item>
    <Item key="options">Page options</Item>
    <Item key="edit">Edit Panel</Item>
  </Menu>
</MenuTrigger>

----------------------------------------

TITLE: RouterProvider Implementation for Next.js Pages Router
DESCRIPTION: Integration of RouterProvider with the Next.js Pages Router in _app.tsx, including TypeScript type definitions for router options.

LANGUAGE: tsx
CODE:
// pages/_app.tsx
import type { AppProps } from 'next/app';
import {useRouter, type NextRouter} from 'next/router';
import {RouterProvider} from 'react-aria-components';

declare module 'react-aria-components' {
  interface RouterConfig {
    routerOptions: NonNullable<Parameters<NextRouter['push']>[2]>
  }
}

export default function MyApp({Component, pageProps}: AppProps) {
  let router = useRouter();

  return (
    <RouterProvider navigate={(href, opts) => router.push(href, undefined, opts)}>
      <Component {...pageProps} />
    </RouterProvider>
  );
}

----------------------------------------

TITLE: Creating Custom Context-based Components
DESCRIPTION: Implementation of a custom ColorWheelDescription component that uses ColorWheelContext to associate a description with a color wheel.

LANGUAGE: tsx
CODE:
import {ColorWheelContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface ColorWheelDescriptionProps {
  children?: React.ReactNode,
  description?: string
}

function ColorWheelDescription({children, description}: ColorWheelDescriptionProps) {
  let descriptionId = useId();
  return (
    <div>
      <ColorWheelContext.Provider value={{'aria-describedby': descriptionId}}>
        {children}
      </ColorWheelContext.Provider>
      <small id={descriptionId}>{description}</small>
    </div>
  );
}

<ColorWheelDescription description="Choose a background color for your profile.">
  <MyColorWheel />
</ColorWheelDescription>

----------------------------------------

TITLE: Adding Description Text to NumberField
DESCRIPTION: Example of adding descriptive help text to a NumberField using the description slot, providing additional context for the field.

LANGUAGE: tsx
CODE:
<NumberField>
  <Label>Width</Label>
  <Group>
    <Button slot="decrement">-</Button>
    <Input />
    <Button slot="increment">+</Button>
  </Group>
  {/*- begin highlight -*/}
  <Text slot="description">Enter a width in centimeters.</Text>
  {/*- end highlight -*/}
</NumberField>

----------------------------------------

TITLE: Defining Component Documentation Metadata in React
DESCRIPTION: Sets metadata for the documentation page, including category, navigation title, description, and order.

LANGUAGE: JSX
CODE:
---
category: Introduction
navigationTitle: Components
description: Craft world-class accessible components with custom styles.
order: 5
---

----------------------------------------

TITLE: Styling with Tailwind CSS using Render Props
DESCRIPTION: Example of using render props with Tailwind CSS to apply multiple classes based on component states.

LANGUAGE: jsx
CODE:
<Radio
  className={({isFocusVisible, isSelected}) => `
    flex rounded-lg p-4
    ${isFocusVisible ? 'ring-2 ring-blue-600 ring-offset-1' : ''}
    ${isSelected ? 'bg-blue-600 border-white/30 text-white' : ''}
  `}>
  {/* ... */}
</Radio>

----------------------------------------

TITLE: Styling with Tailwind CSS using Render Props
DESCRIPTION: Example of using render props with Tailwind CSS to apply multiple classes based on component states.

LANGUAGE: jsx
CODE:
<Radio
  className={({isFocusVisible, isSelected}) => `
    flex rounded-lg p-4
    ${isFocusVisible ? 'ring-2 ring-blue-600 ring-offset-1' : ''}
    ${isSelected ? 'bg-blue-600 border-white/30 text-white' : ''}
  `}>
  {/* ... */}
</Radio>

----------------------------------------

TITLE: Required Form with Label Indicator in React Spectrum
DESCRIPTION: Example showing a required form with "(required)" text beside form labels using the isRequired and necessityIndicator props.

LANGUAGE: tsx
CODE:
<Form
  isRequired
  necessityIndicator="label"
  aria-label="Required with label example"
  maxWidth="size-3600">
  <TextField label="Name" />
  <RadioGroup label="Favorite pet">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: Creating a Custom Label Compatible with React Aria Components
DESCRIPTION: Example of integrating an existing label component with React Aria Components by consuming the LabelContext.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Implementing International Calendar Support in DateRangePicker
DESCRIPTION: This example demonstrates how to configure a DateRangePicker to use the Indian calendar system with Hindi language, while still getting Gregorian calendar dates from the onChange event.

LANGUAGE: tsx
CODE:
import type {DateRange} from 'react-aria-components';
import {I18nProvider} from '@react-aria/i18n';

function Example() {
  let [range, setRange] = React.useState<DateRange | null>(null);
  return (
    /*- begin highlight -*/
    <I18nProvider locale="hi-IN-u-ca-indian">
    {/*- end highlight -*/}
      <MyDateRangePicker label="Date range" value={range} onChange={setRange} />
      <p>Start date: {range?.start.toString()}</p>
      <p>End date: {range?.end.toString()}</p>
    </I18nProvider>
  );
}

----------------------------------------

TITLE: Calculating Weeks in a Month with Locale Awareness
DESCRIPTION: Shows how to use getWeeksInMonth to determine the number of weeks in a month, demonstrating how the result depends on the locale's first day of week configuration.

LANGUAGE: tsx
CODE:
import {getWeeksInMonth} from '@internationalized/date';

let date = new CalendarDateTime(2021, 1, 1, 8, 30);

getWeeksInMonth(date, 'en-US'); // 6
getWeeksInMonth(date, 'fr-FR'); // 5

----------------------------------------

TITLE: Creating Calendar Objects Using Calendar Identifiers
DESCRIPTION: Shows how to create Calendar objects using string identifiers with the createCalendar function for common calendar systems.

LANGUAGE: tsx
CODE:
import {createCalendar} from '@internationalized/date';

createCalendar('gregory');
createCalendar('hebrew');
createCalendar('japanese');

----------------------------------------

TITLE: Controlled ColorSlider with React State
DESCRIPTION: Example of a controlled ColorSlider component where the value is managed using React state. It demonstrates parsing a color from an HSL string and updating the state on slider changes.

LANGUAGE: tsx
CODE:
import {parseColor} from 'react-aria-components';

function Example() {
  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));
  return (
    <>
      <MyColorSlider
        label="Hue (controlled)"
        value={value}
        onChange={setValue}
        channel="hue" />
      <p>Value: {value.toString('hex')}</p>
    </>
  );
}

----------------------------------------

TITLE: Different Labeling Options for DatePicker in React Spectrum
DESCRIPTION: Demonstrates various labeling options for DatePicker, including standard labels, required fields with different necessity indicators, and optional fields.

LANGUAGE: tsx
CODE:
<Flex gap="size-150" wrap>
  <DatePicker label="Birth date" />
  <DatePicker label="Birth date" isRequired necessityIndicator="icon" />
  <DatePicker label="Birth date" isRequired necessityIndicator="label" />
  <DatePicker label="Birth date" necessityIndicator="label" />
</Flex>

----------------------------------------

TITLE: Markdown Frontmatter for React Spectrum Blog Post
DESCRIPTION: Markdown frontmatter defining metadata for the blog post, including a description of the July 2024 release focusing on virtualization improvements, color components, and React 19 compatibility, along with the publication date.

LANGUAGE: Markdown
CODE:
---

description: For this summer release, we have been busy working on improving virtualization in many of our Spectrum components including TableView, ListView, and ListBox. Our Color components are moving to RC, Toast focus management has been improved, we have been preparing for React 19 release along with many bug fixes and improvements.

date: 2024-07-22
---

----------------------------------------

TITLE: Using Custom Checkbox Component in GridList
DESCRIPTION: Demonstrates how to use the custom checkbox component within a GridList component. The custom checkbox replaces the built-in React Aria Components Checkbox by using the slot="selection" attribute.

LANGUAGE: tsx
CODE:
<GridList>
  <GridListItem>
    {/*- begin highlight -*/}
    <MyCustomCheckbox slot="selection" />
    {/*- end highlight -*/}
    {/* ... */}
  </GridListItem>
</GridList>

----------------------------------------

TITLE: Client Provider Component for Next.js App Router
DESCRIPTION: This code creates a client component that provides React Spectrum's Provider with Next.js App Router integration. It uses the useRouter hook from next/navigation for client-side navigation.

LANGUAGE: tsx
CODE:
// app/provider.tsx
"use client";

import {useRouter} from 'next/navigation';
import {Provider, defaultTheme} from '@adobe/react-spectrum';

declare module '@adobe/react-spectrum' {
  interface RouterConfig {
    routerOptions: NonNullable<Parameters<ReturnType<typeof useRouter>['push']>[1]>
  }
}

export function ClientProviders({children}) {
  let router = useRouter();

  return (
    <Provider theme={defaultTheme} router={{navigate: router.push}}>
      {children}
    </Provider>
  );
}

----------------------------------------

TITLE: Configuring Custom Widths for SearchAutocomplete in React Spectrum
DESCRIPTION: This example demonstrates how to set custom width specifications for a SearchAutocomplete component using the width and maxWidth properties. The component is set to a specific size with a maximum constraint.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Favorite Animal" width="size-6000" maxWidth="100%">
  <Item>Red Panda</Item>
  <Item>Cat</Item>
  <Item>Dog</Item>
  <Item>Aardvark</Item>
  <Item>Kangaroo</Item>
  <Item>Snake</Item>
</SearchAutocomplete>

----------------------------------------

TITLE: Controlled Expansion with Accordion Component
DESCRIPTION: Shows how to implement controlled expansion in the Accordion component using React state and the onExpandedChange callback to track and display which sections are expanded.

LANGUAGE: tsx
CODE:
import {Key} from "@react-types/shared";

function ControlledExpansion() {
  let [expandedKeys, setExpandedKeys] = React.useState<Set<Key>>(new Set(['personal']))

  return (
    <>
      <Accordion expandedKeys={expandedKeys} onExpandedChange={setExpandedKeys}>
        <Disclosure id="personal">
          <DisclosureTitle>Personal Information</DisclosureTitle>
          <DisclosurePanel>
            Personal information form here.
          </DisclosurePanel>
        </Disclosure>
        <Disclosure id="billing">
          <DisclosureTitle>Billing Address</DisclosureTitle>
          <DisclosurePanel>
            Billing address form here.
          </DisclosurePanel>
        </Disclosure>
      </Accordion>
      <div style={{marginTop: '20px'}}>You have expanded: {expandedKeys}</div>
    </>
  )
}

----------------------------------------

TITLE: Configuring React Spectrum with TanStack Router
DESCRIPTION: This snippet shows how to integrate React Spectrum with TanStack Router. It demonstrates how to configure the Provider component using TanStack Router's navigation functions and type declarations for TypeScript support.

LANGUAGE: tsx
CODE:
import {useRouter, type NavigateOptions, type ToOptions} from '@tanstack/react-router';
import {Provider, defaultTheme} from '@adobe/react-spectrum';

declare module '@adobe/react-spectrum' {
  interface RouterConfig {
    href: ToOptions['to'];
    routerOptions: Omit<NavigateOptions, keyof ToOptions>;
  }
}

function RootRoute() {
  let router = useRouter();
  return (
    <Provider
      theme={defaultTheme}
      router={{
        navigate: (to, options) => router.navigate({to, ...options}),
        useHref: to => router.buildLocation({to}).href
      }}>
      {/* ...*/}
    </Provider>
  );
}

----------------------------------------

TITLE: Styling TimeField Components with CSS
DESCRIPTION: Shows how to style TimeField components using CSS selectors that target the default class names provided by React Aria.

LANGUAGE: css
CODE:
.react-aria-TimeField {
  /* ... */
}

----------------------------------------

TITLE: StatusLight Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This comparison shows differences in StatusLight variant options between versions, with Spectrum 2 supporting more color variants and size property, while RSP v3 has an isDisabled property not supported in S2 design.

LANGUAGE: typescript
CODE:
variant | 🟢 `'brown' \| 'celery' \| 'chartreuse' \| 'cinnamon' \| 'cyan' \| 'fuchsia' \| 'indigo' \| 'informative' \| 'magenta' \| 'negative' \| 'neutral' \| 'notice' \| 'pink' \| 'positive' \| 'purple' \| 'seafoam' \| 'silver' \| 'turquoise' \| 'yellow'` | 🔴 `'celery' \| 'chartreuse' \| 'fuchsia' \| 'indigo' \| 'info' \| 'magenta' \| 'negative' \| 'neutral' \| 'notice' \| 'positive' \| 'purple' \| 'seafoam' \| 'yellow'`
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | –
isDisabled | – | 🔴 `boolean`

----------------------------------------

TITLE: Using Array Map for Dynamic Collections (Less Performant)
DESCRIPTION: Demonstrates an alternative approach using array.map() to create a dynamic collection, which is less performant than the items prop approach.

LANGUAGE: TSX
CODE:
let [animals, setAnimals] = useState([
  {name: 'Aardvark'},
  {name: 'Kangaroo'},
  {name: 'Snake'}
]);

<ListBox>
  {animals.map(item =>
    <Item key={item.name}>{item.name}</Item>
  )}
</ListBox>

----------------------------------------

TITLE: Handling Dialog State Changes with onOpenChange in React Spectrum
DESCRIPTION: Shows how to use the 'onOpenChange' event handler to track and display the open state of a dialog in a separate text component.

LANGUAGE: tsx
CODE:
function Example() {
  let [state, setState] = React.useState(false);

  return (
    <Flex alignItems="center" gap="size-100">
      <DialogTrigger type="popover" placement="top" onOpenChange={(isOpen) => setState(isOpen)}>
        <ActionButton>Whispers</ActionButton>
        <Dialog>
          <Heading>Whispers and DMs</Heading>
          <Divider />
          <Content>
            <Text>
              You have 0 new messages.
            </Text>
          </Content>
        </Dialog>
      </DialogTrigger>
      <Text>Current open state: {state.toString()}</Text>
    </Flex>
  );
}

----------------------------------------

TITLE: Referencing React Spectrum Repository
DESCRIPTION: A markdown heading and description referencing that the package is part of the react-spectrum repository, directing users to the main repository for more detailed information.

LANGUAGE: markdown
CODE:
# @react-aria/calendar

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Displaying Format Help Text in DateRangePicker
DESCRIPTION: This example demonstrates how to show format help text in a DateRangePicker using the showFormatHelpText prop, which automatically displays the expected date format based on the user's locale.

LANGUAGE: tsx
CODE:
<DateRangePicker label="Date range" showFormatHelpText />

----------------------------------------

TITLE: Cycling Fields with Rounding in CalendarDateTime
DESCRIPTION: Using the cycle method with the round option to round values to increments of a specified amount. This enables cycling a field like minutes in specific increments such as 15-minute intervals.

LANGUAGE: tsx
CODE:
let date = new CalendarDateTime(2022, 2, 3, 9, 22);

date.cycle('minute', 15); // 2027-02-03T09:37
date.cycle('minute', 15, {round: true}); // 2025-02-03T09:30

date.cycle('minute', -15); // 2017-02-03T09:07
date.cycle('minute', -15, {round: true}); // 2020-02-03T09:15

----------------------------------------

TITLE: Setting Menu Direction for SearchAutocomplete in React Spectrum
DESCRIPTION: This example shows how to change the direction in which the SearchAutocomplete dropdown menu appears using the direction property. Setting direction to "top" makes the menu open upward instead of the default downward behavior.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Favorite Animal" direction="top">
  <Item>Red Panda</Item>
  <Item>Cat</Item>
  <Item>Dog</Item>
  <Item>Aardvark</Item>
  <Item>Kangaroo</Item>
  <Item>Snake</Item>
</SearchAutocomplete>

----------------------------------------

TITLE: CSS Styling for SearchField Component
DESCRIPTION: CSS styling for the SearchField component that defines grid layout, styling for the input field, clear button, and focus states. The styling uses CSS variables for colors and includes responsive behaviors.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-SearchField {
  display: grid;
  grid-template-areas: "label label"
                       "input button"
                       "help  help";
  grid-template-columns: 1fr auto;
  align-items: center;
  width: fit-content;
  color: var(--text-color);

  .react-aria-Input {
    grid-area: input;
    width: 100%;
    padding: 0.286rem 1.714rem 0.286rem 0.286rem;
    margin: 0;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--field-background);
    font-size: 1.143rem;
    color: var(--field-text-color);
    outline: none;

    &::-webkit-search-cancel-button,
    &::-webkit-search-decoration {
      -webkit-appearance: none;
    }

    &::placeholder {
      color: var(--text-color-placeholder);
      opacity: 1;
    }

    &[data-focused] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -1px;
    }
  }

  .react-aria-Button {
    grid-area: button;
    width: 1.143rem;
    height: 1.143rem;
    border-radius: 1.143rem;
    margin-left: -1.429rem;
    font-size: 0.857rem;
    line-height: 0.857rem;
    vertical-align: middle;
    text-align: center;
    background: var(--gray-500);
    color: var(--gray-50);
    border: none;
    padding: 0;

    &[data-pressed] {
      background: var(--gray-600);
    }
  }

  &[data-empty] button {
    display: none;
  }
}

----------------------------------------

TITLE: Hero Component Implementation for React Spectrum Homepage
DESCRIPTION: Renders the Hero component with responsive image sources for different screen sizes and formats (PNG and WebP), providing an optimized hero image for the homepage.

LANGUAGE: JSX
CODE:
<Hero
  narrow={heroNarrow}
  narrow2x={heroNarrow2x}
  narrowWebp={heroNarrowWebp}
  narrow2xWebp={heroNarrow2xWebp}
  wide={heroWide}
  wide2x={heroWide2x}
  wideWebp={heroWideWebp}
  wide2xWebp={heroWide2xWebp}
  alt="React Spectrum hero image" />

----------------------------------------

TITLE: Basic ActionButton Implementation in React
DESCRIPTION: Demonstrates the simplest implementation of an ActionButton with just text content.

LANGUAGE: tsx
CODE:
<ActionButton>Edit</ActionButton>

----------------------------------------

TITLE: Importing Flex Component from React Spectrum Layout
DESCRIPTION: This snippet demonstrates how to import the Flex component from the React Spectrum layout package, which is used in examples to arrange icons.

LANGUAGE: jsx
CODE:
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Importing Calendar Types and Utilities in React Spectrum
DESCRIPTION: Import statements for the required types and utilities from @internationalized/date package needed to work with calendar dates and custom calendar systems.

LANGUAGE: tsx
CODE:
import type {AnyCalendarDate} from '@internationalized/date';
import {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';

----------------------------------------

TITLE: Formatting Slider Values with formatOptions
DESCRIPTION: Example showing how to use the formatOptions prop to display the slider value as Japanese currency.

LANGUAGE: tsx
CODE:
<Slider
  label="Currency"
  formatOptions={{style: 'currency', currency: 'JPY'}}
  defaultValue={60} />

----------------------------------------

TITLE: Implementing Internationalization Component
DESCRIPTION: This snippet imports and renders an I18n component to demonstrate React Aria's internationalization capabilities. It showcases features like translations, localized formatting, different calendar systems, and right-to-left layout support.

LANGUAGE: tsx
CODE:
import {I18n} from './home/I18n';

<I18n />

----------------------------------------

TITLE: Using a Custom Label in ColorField
DESCRIPTION: Example showing how to use a custom label component within a ColorField.

LANGUAGE: tsx
CODE:
<ColorField>
  <MyCustomLabel>Value</MyCustomLabel>
  <Input />
</ColorField>

----------------------------------------

TITLE: Implementing Dynamic Content in GridList with React Aria
DESCRIPTION: Shows how to create a dynamic GridList that renders items from an external data source using the items prop. The example demonstrates mapping over data objects and rendering them as GridListItems.

LANGUAGE: tsx
CODE:
interface ItemValue {
  id: number,
  name: string
}

function ExampleList(props: GridListProps<ItemValue>) {
  let rows = [
    {id: 1, name: 'Games'},
    {id: 2, name: 'Program Files'},
    {id: 3, name: 'bootmgr'},
    {id: 4, name: 'log.txt'}
  ];

  return (
    <MyGridList
      aria-label="Example dynamic collection List"
      selectionMode="multiple"
      /*- begin highlight -*/
      items={rows}
      /*- end highlight -*/
      {...props}>
      {item => (
        <MyItem textValue={item.name}>
          {item.name}
          <Button aria-label="Info" onPress={() => alert(`Info for ${item.name}...`)}>ⓘ</Button>
        </MyItem>
      )}
    </MyGridList>
  );
}

----------------------------------------

TITLE: Displaying Picker Components Section in React Spectrum Documentation
DESCRIPTION: Creates a section showing picker-related components (ComboBox and Picker) with illustrations and descriptions for user selection interfaces.

LANGUAGE: JSX
CODE:
<section className={styles.cardGroup}>

<ExampleCard
  url="ComboBox.html"
  title="ComboBox"
  description="A combobox combines a text input with a listbox, and allows a user to filter a list of options.">
  <ComboBoxAnatomy />
</ExampleCard>

<ExampleCard
  url="Picker.html"
  title="Picker"
  description="A picker displays a collapsible list of options, and allows a user to select one of them.">
  <SelectAnatomy />
</ExampleCard>

</section>

----------------------------------------

TITLE: Styling a RangeCalendar Component with CSS
DESCRIPTION: Provides comprehensive CSS styling for the RangeCalendar component including header, buttons, cells, and various states like selected, focused, and pressed. The stylesheet covers responsive layout and accessibility indicators.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-RangeCalendar {
  width: fit-content;
  max-width: 100%;
  color: var(--text-color);

  & header {
    display: flex;
    align-items: center;
    margin: 0 4px .5rem 4px;

    .react-aria-Heading {
      flex: 1;
      margin: 0;
      text-align: center;
      font-size: 1.375rem;
    }
  }

  .react-aria-Button {
    width: 2rem;
    height: 2rem;
    padding: 0;
  }

  & table {
    border-collapse: collapse;

    & td {
      padding: 2px 0;
    }
  }

  .react-aria-CalendarCell {
    width: 2.286rem;
    line-height: 2.286rem;
    text-align: center;
    border-radius: 6px;
    cursor: default;
    outline: none;
    forced-color-adjust: none;

    &[data-outside-month] {
      display: none;
    }

    &[data-pressed] {
      background: var(--gray-100);
    }

    &[data-focus-visible] {
      outline: 2px solid var(--highlight-background);
      outline-offset: -2px;
    }

    &[data-selected] {
      background: var(--highlight-background);
      color: var(--highlight-foreground);
      border-radius: 0;

      &[data-focus-visible] {
        outline-color: var(--highlight-foreground);
        outline-offset: -3px;
      }
    }

    &[data-selection-start] {
      border-start-start-radius: 6px;
      border-end-start-radius: 6px;
    }

    &[data-selection-end] {
      border-start-end-radius: 6px;
      border-end-end-radius: 6px;
    }
  }
}

----------------------------------------

TITLE: Importing BlogPostLayout and Hero Components from React Spectrum
DESCRIPTION: This code imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and exports BlogPostLayout as the default export of the file.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: NumberField Labeling and Requirement Indicators
DESCRIPTION: Demonstrates different ways to label NumberField components and indicate whether they're required.

LANGUAGE: tsx
CODE:
<Flex gap="size-150" wrap>
  <NumberField label="Cookies" minValue={0} />
  <NumberField label="Cookies" isRequired necessityIndicator="icon" minValue={0}  />
  <NumberField label="Cookies" isRequired necessityIndicator="label" minValue={0}  />
  <NumberField label="Cookies" necessityIndicator="label" minValue={0}  />
</Flex>

----------------------------------------

TITLE: Creating a PopoverTrigger Component with React Aria
DESCRIPTION: Implementation of a PopoverTrigger component that uses useOverlayTrigger hook to manage the state and accessibility of a popover trigger button. This component handles opening and closing the popover and ensures the button and popover are semantically connected.

LANGUAGE: tsx
CODE:
import {useOverlayTriggerState} from '@react-stately/overlays';
import {useOverlayTrigger} from '@react-aria/overlays';

// Reuse the Button from your component library. See below for details.
import {Button} from 'your-component-library';

function PopoverTrigger({label, children, ...props}) {
  let ref = React.useRef(null);
  let state = useOverlayTriggerState(props);
  let {triggerProps, overlayProps} = useOverlayTrigger({type: 'dialog'}, state, ref);

  return <>
    <Button {...triggerProps} buttonRef={ref}>{label}</Button>
    {state.isOpen &&
      <Popover {...props} triggerRef={ref} state={state}>
        {React.cloneElement(children, overlayProps)}
      </Popover>
    }
  </>;
}

----------------------------------------

TITLE: Implementing Virtualized Scrolling with Virtualizer Component
DESCRIPTION: Shows how to optimize performance for large lists by using virtualized scrolling with the Virtualizer component and ListLayout. This technique only renders visible items instead of the entire collection.

LANGUAGE: tsx
CODE:
import {Virtualizer, ListLayout} from 'react-aria-components';

let layout = useMemo(() => new ListLayout({
  rowHeight: 50
}), []);

<Virtualizer layout={layout}>
  <ListBox items={items}>
    {item => <ListBoxItem>{item}</ListBoxItem>}
  </ListBox>
</Virtualizer>

----------------------------------------

TITLE: Configuring Popover Placement
DESCRIPTION: Demonstrates different placement options for positioning popovers relative to their trigger elements.

LANGUAGE: tsx
CODE:
<div style={{display: 'flex', gap: 8}}>
  <DialogTrigger>
    <Button>⬅️</Button>
    <MyPopover placement="start">In left-to-right, this is on the left. In right-to-left, this is on the right.</MyPopover>
  </DialogTrigger>
  <DialogTrigger>
    <Button>⬆️</Button>
    <MyPopover placement="top">This popover is above the button.</MyPopover>
  </DialogTrigger>
  <DialogTrigger>
    <Button>⬇️</Button>
    <MyPopover placement="bottom">This popover is below the button.</MyPopover>
  </DialogTrigger>
  <DialogTrigger>
    <Button>➡️</Button>
    <MyPopover placement="end">In left-to-right, this is on the right. In right-to-left, this is on the left.</MyPopover>
  </DialogTrigger>
</div>

----------------------------------------

TITLE: Read-only ColorField
DESCRIPTION: Shows how to create a read-only ColorField where the value cannot be changed but remains focusable and copyable.

LANGUAGE: tsx
CODE:
<ColorField label="Primary Color" isReadOnly defaultValue="#e73623" />

----------------------------------------

TITLE: Overriding First Day of Week for getDayOfWeek
DESCRIPTION: Shows how to override the locale's default first day of the week in the getDayOfWeek function by providing an explicit firstDayOfWeek parameter.

LANGUAGE: tsx
CODE:
getDayOfWeek(date, 'en-US', 'mon'); // 6

----------------------------------------

TITLE: Rendering GitHub Link with Styling
DESCRIPTION: Renders a styled link to the GitHub repository using CSS classes from Spectrum design system and custom styling.

LANGUAGE: JSX
CODE:
<p className={clsx(typographyStyles['spectrum-Body2'], styles.homeLinks)}>
  <a href="https://github.com/adobe/react-spectrum" className={clsx(linkStyle['spectrum-Link'], styles.link)}>GitHub</a>
</p>

----------------------------------------

TITLE: Custom Tabs Layout with Additional Controls
DESCRIPTION: Advanced Tabs implementation featuring custom layout with additional UI controls. Shows how to add and remove tabs dynamically while maintaining proper structure.

LANGUAGE: tsx
CODE:
function Example () {
  let [tabs, setTabs] = React.useState([
    {name: 'Tab 1', children: 'Tab Body 1'},
    {name: 'Tab 2', children: 'Tab Body 2'},
    {name: 'Tab 3', children: 'Tab Body 3'}
  ]);
  type Tab = typeof tabs[0];

  let addTab = () => {
    let newTabs = [...tabs];
    newTabs.push({
      name: `Tab ${tabs.length + 1}`,
      children: `Tab Body ${tabs.length + 1}`
    });

    setTabs(newTabs);
  };

  let removeTab = () => {
    if (tabs.length > 1) {
      let newTabs = [...tabs];
      newTabs.pop();
      setTabs(newTabs);
    }
  };

  return (
    <Tabs aria-label="Tab example" items={tabs}>
      <Flex>
        <TabList flex="1 1 auto" minWidth="0px">
          {(item: Tab) => (
            <Item key={item.name}>
              {item.name}
            </Item>
          )}
        </TabList>
        <div style={{display: 'flex', flex: '0 0 auto', borderBottom: 'var(--spectrum-alias-border-size-thick) solid var(--spectrum-global-color-gray-300)'}}>
          <ActionGroup disabledKeys={tabs.length === 1 ? ['remove'] : undefined} onAction={val => val === 'add' ? addTab() : removeTab()}>
            <Item key="add">
              Add Tab
            </Item>
            <Item key="remove">
              Remove Tab
            </Item>
          </ActionGroup>
        </div>
      </Flex>
      <TabPanels>
        {(item: Tab) => (
          <Item key={item.name}>
            {item.children}
          </Item>
        )}
      </TabPanels>
    </Tabs>
  );
}

----------------------------------------

TITLE: Styling Description Text in NumberField
DESCRIPTION: CSS for styling the description text in a NumberField to appear smaller than the main text.

LANGUAGE: css
CODE:
.react-aria-NumberField {
  [slot=description] {
    font-size: 12px;
  }
}

----------------------------------------

TITLE: Adding Contextual Help to DateField
DESCRIPTION: Demonstrates how to add contextual help to a DateField using the ContextualHelp component to provide additional information about the field.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<DateField
  label="Appointment date"
  contextualHelp={
    <ContextualHelp variant="info">
      <Heading>Appointment changes</Heading>
      <Content>Your appointment date cannot be changed once it is scheduled.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Creating Custom TimeZoneName Component with TimeFieldStateContext in React Aria
DESCRIPTION: This example demonstrates how to create a custom TimeZoneName component that accesses TimeFieldStateContext to display the full time zone name within a TimeField. It uses React.useContext to access the state and useDateFormatter to format the time zone information.

LANGUAGE: tsx
CODE:
import {TimeFieldStateContext} from 'react-aria-components';
import {useDateFormatter} from 'react-aria';

function TimeZoneName() {
  /*- begin highlight -*/
  let state = React.useContext(TimeFieldStateContext)!;
  /*- end highlight -*/
  if ('timeZone' in state.value) {
    let formatter = useDateFormatter({timeZoneName: 'long', timeZone: state.value.timeZone});
    let timeZone = formatter
      .formatToParts(state.value.toDate())
      .find(p => p.type === 'timeZoneName').value;
    return <small>{timeZone}</small>;
  }
  return null;
}

<TimeField value={parseAbsoluteToLocal('2021-04-07T18:45:22Z')}>
  <Label>Time</Label>
  <DateInput>
    {segment => <DateSegment segment={segment} />}
  </DateInput>
  {/*- begin highlight -*/}
  <TimeZoneName />
  {/*- end highlight -*/}
</TimeField>

----------------------------------------

TITLE: Listing Released Packages for React Spectrum Project
DESCRIPTION: A comprehensive list of all packages released as part of the React Spectrum project update, including core components, utilities, and supporting libraries with their respective version numbers.

LANGUAGE: markdown
CODE:
```
 - @adobe/react-spectrum@3.29.0
 - @internationalized/date@3.4.0
 - @react-aria/accordion@3.0.0-alpha.20
 - @react-aria/actiongroup@3.6.1
 - @react-aria/aria-modal-polyfill@3.7.4
 - @react-aria/autocomplete@3.0.0-alpha.19
 - @react-aria/breadcrumbs@3.5.4
 - @react-aria/button@3.8.1
 - @react-aria/calendar@3.4.1
 - @react-aria/checkbox@3.10.0
 - @react-aria/color@3.0.0-beta.23
 - @react-aria/combobox@3.6.3
 - @react-aria/datepicker@3.6.0
 - @react-aria/dialog@3.5.4
 - @react-aria/dnd@3.4.0
 - @react-aria/focus@3.14.0
 - @react-aria/grid@3.8.1
 - @react-aria/gridlist@3.5.1
 - @react-aria/i18n@3.8.1
 - @react-aria/interactions@3.17.0
 - @react-aria/label@3.6.1
 - @react-aria/landmark@3.0.0-beta.3
 - @react-aria/link@3.5.3
 - @react-aria/listbox@3.10.1
 - @react-aria/menu@3.10.1
 - @react-aria/meter@3.4.4
 - @react-aria/numberfield@3.7.0
 - @react-aria/overlays@3.16.0
 - @react-aria/progress@3.4.4
 - @react-aria/radio@3.7.0
 - @react-aria/searchfield@3.5.4
 - @react-aria/select@3.12.0
 - @react-aria/selection@3.16.1
 - @react-aria/separator@3.3.4
 - @react-aria/slider@3.6.0
 - @react-aria/spinbutton@3.5.1
 - @react-aria/ssr@3.7.1
 - @react-aria/switch@3.5.3
 - @react-aria/table@3.11.0
 - @react-aria/tabs@3.6.2
 - @react-aria/tag@3.1.1
 - @react-aria/textfield@3.11.0
 - @react-aria/toast@3.0.0-beta.3
 - @react-aria/toggle@3.7.0
 - @react-aria/tooltip@3.6.1
 - @react-aria/utils@3.19.0
 - @react-aria/virtualizer@3.9.1
 - @react-aria/visually-hidden@3.8.3
 - @react-spectrum/accordion@3.0.0-alpha.22
 - @react-spectrum/actionbar@3.1.1
 - @react-spectrum/actiongroup@3.9.1
 - @react-spectrum/autocomplete@3.0.0-alpha.20
 - @react-spectrum/avatar@3.0.3
 - @react-spectrum/badge@3.1.4
 - @react-spectrum/breadcrumbs@3.8.1
 - @react-spectrum/button@3.12.4
 - @react-spectrum/buttongroup@3.6.4
 - @react-spectrum/calendar@3.3.1
 - @react-spectrum/card@3.0.0-alpha.21
 - @react-spectrum/checkbox@3.7.4
 - @react-spectrum/color@3.0.0-beta.24
 - @react-spectrum/combobox@3.10.0
 - @react-spectrum/contextualhelp@3.6.1
 - @react-spectrum/datepicker@3.7.0
 - @react-spectrum/dialog@3.8.1
 - @react-spectrum/divider@3.5.4
 - @react-spectrum/dnd@3.3.1
 - @react-spectrum/form@3.6.4
 - @react-spectrum/icon@3.7.4
 - @react-spectrum/illustratedmessage@3.4.4
 - @react-spectrum/image@3.4.4
 - @react-spectrum/inlinealert@3.0.0
 - @react-spectrum/label@3.13.1
 - @react-spectrum/labeledvalue@3.1.4
 - @react-spectrum/layout@3.5.4
 - @react-spectrum/link@3.5.4
 - @react-spectrum/list@3.6.1
 - @react-spectrum/listbox@3.11.1
 - @react-spectrum/menu@3.13.0
 - @react-spectrum/meter@3.4.4
 - @react-spectrum/numberfield@3.7.0
 - @react-spectrum/overlays@5.3.0
 - @react-spectrum/picker@3.11.1
 - @react-spectrum/progress@3.6.1
 - @react-spectrum/provider@3.8.1
 - @react-spectrum/radio@3.5.4
 - @react-spectrum/searchfield@3.7.4
 - @react-spectrum/slider@3.6.0
 - @react-spectrum/statuslight@3.5.4
 - @react-spectrum/switch@3.4.4
 - @react-spectrum/table@3.11.0
 - @react-spectrum/tabs@3.7.1
 - @react-spectrum/tag@3.1.1
 - @react-spectrum/text@3.4.4
 - @react-spectrum/textfield@3.10.4
 - @react-spectrum/theme-dark@3.5.4
 - @react-spectrum/theme-default@3.5.4
 - @react-spectrum/theme-express@3.0.0-alpha.6
 - @react-spectrum/theme-light@3.4.4
 - @react-spectrum/toast@3.0.0-beta.3
 - @react-spectrum/tooltip@3.5.3
 - @react-spectrum/utils@3.10.1
 - @react-spectrum/view@3.6.1
 - @react-spectrum/well@3.4.4
 - @react-stately/calendar@3.3.1
 - @react-stately/checkbox@3.4.4
 - @react-stately/collections@3.10.0
 - @react-stately/color@3.4.1
 - @react-stately/combobox@3.6.0
 - @react-stately/data@3.10.1
 - @react-stately/datepicker@3.6.0
 - @react-stately/dnd@3.2.3
 - @react-stately/flags@3.0.0
 - @react-stately/grid@3.8.0
 - @react-stately/layout@3.13.0
 - @react-stately/list@3.9.1
 - @react-stately/menu@3.5.4
 - @react-stately/numberfield@3.6.0
 - @react-stately/overlays@3.6.1
 - @react-stately/radio@3.8.3
 - @react-stately/searchfield@3.4.4
 - @react-stately/select@3.5.3
 - @react-stately/selection@3.13.3
 - @react-stately/slider@3.4.1
 - @react-stately/table@3.11.0
 - @react-stately/tabs@3.5.1
 - @react-stately/toggle@3.6.1
 - @react-stately/tooltip@3.4.3
 - @react-stately/tree@3.7.1
 - @react-stately/virtualizer@3.6.1
 - @react-types/accordion@3.0.0-alpha.15
 - @react-types/actionbar@3.1.1
 - @react-types/actiongroup@3.4.3
 - @react-types/autocomplete@3.0.0-alpha.15
 - @react-types/avatar@3.0.1
 - @react-types/badge@3.1.3
 - @react-types/breadcrumbs@3.6.1
 - @react-types/button@3.7.4
 - @react-types/buttongroup@3.3.3
 - @react-types/calendar@3.3.1
 - @react-types/card@3.0.0-alpha.17
 - @react-types/checkbox@3.5.0
 - @react-types/color@3.0.0-beta.18
 - @react-types/combobox@3.7.0
 - @react-types/contextualhelp@3.2.4
 - @react-types/datepicker@3.5.0
 - @react-types/dialog@3.5.4
 - @react-types/divider@3.3.3
 - @react-types/form@3.5.2
 - @react-types/grid@3.2.0
 - @react-types/illustratedmessage@3.3.3
 - @react-types/image@3.3.3
 - @react-types/label@3.7.5
 - @react-types/layout@3.3.9
 - @react-types/link@3.4.4
 - @react-types/list@3.2.5
 - @react-types/listbox@3.4.3
 - @react-types/menu@3.9.3
 - @react-types/meter@3.3.3
 - @react-types/numberfield@3.5.0
 - @react-types/overlays@3.8.1
 - @react-types/progress@3.4.2
 - @react-types/provider@3.6.3
 - @react-types/radio@3.5.0
 - @react-types/searchfield@3.4.3
 - @react-types/select@3.8.2
 - @react-types/shared@3.19.0
 - @react-types/slider@3.6.0
 - @react-types/statuslight@3.3.3
 - @react-types/switch@3.4.0
 - @react-types/table@3.8.0
 - @react-types/tabs@3.3.1
 - @react-types/text@3.3.3
 - @react-types/textfield@3.7.3
 - @react-types/tooltip@3.4.3
 - @react-types/view@3.4.3
 - @react-types/well@3.3.3
 - @spectrum-icons/color@3.5.4
 - @spectrum-icons/express@3.0.0-alpha.8
 - @spectrum-icons/illustrations@3.6.4
 - @spectrum-icons/ui@3.5.4
 - @spectrum-icons/workflow@4.2.3
 - react-aria@3.27.0
 - react-aria-components@1.0.0-alpha.6
 - react-stately@3.25.0
```

----------------------------------------

TITLE: Implementing View Component with Spectrum DNA Variables
DESCRIPTION: Example of the proposed View component that would replace standard div/span elements and provide access to Spectrum DNA variables for styling custom UI components.

LANGUAGE: jsx
CODE:
<View
  backgroundColor="negative"
  width="single-line-width"
  height="size-500"
  elementType="span" />

----------------------------------------

TITLE: AlertDialog with Disabled Primary Action
DESCRIPTION: Shows how to disable the primary action button in an AlertDialog using the isPrimaryActionDisabled prop, which prevents users from selecting that option.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Upgrade</ActionButton>
  <AlertDialog
    isPrimaryActionDisabled
    variant="confirmation"
    title="Upgrade subscription"
    primaryActionLabel="Upgrade"
    cancelLabel="Cancel">
    Upgrade subscription for an additional $14.99 a month?
  </AlertDialog>
</DialogTrigger>

----------------------------------------

TITLE: Using Dynamic Items with ActionGroup in React
DESCRIPTION: Demonstrates how to use the collection pattern to dynamically generate ActionGroup items from an array of data objects.

LANGUAGE: tsx
CODE:
const items = [
  {label: 'React', name: 'React'},
  {label: 'Add', name: 'Add'},
  {label: 'Delete', name: 'Delete'}
];

<ActionGroup items={items}>
  {item => <Item key={item.name}>{item.label}</Item>}
</ActionGroup>

----------------------------------------

TITLE: Dynamic Collections in SearchAutocomplete
DESCRIPTION: Example of using dynamic collections with SearchAutocomplete following the Collection Components API. It shows how to use the defaultItems prop with an iterable list of options and handling selection via the onSubmit handler.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, name: 'Aerospace'},
    {id: 2, name: 'Mechanical'},
    {id: 3, name: 'Civil'},
    {id: 4, name: 'Biomedical'},
    {id: 5, name: 'Nuclear'},
    {id: 6, name: 'Industrial'},
    {id: 7, name: 'Chemical'},
    {id: 8, name: 'Agricultural'},
    {id: 9, name: 'Electrical'}
  ];
  let [major, setMajor] = React.useState(null);

  let onSubmit = (value, key) => {
    if (value) {
      setMajor(value);
    } else if (key) {
      setMajor(options.find(o => o.id === key).name);
    }
  };

  return (
    <>
      <SearchAutocomplete
        label="Search engineering majors"
        defaultItems={options}
        onSubmit={onSubmit}>
        {(item) => <Item>{item.name}</Item>}
      </SearchAutocomplete>
      <p>Results for: {major}</p>
    </>
  );
}

----------------------------------------

TITLE: Starting the Parcel development server
DESCRIPTION: Commands for installing dependencies and starting the development server for a Parcel-based React project.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Installing @react-types/slider Package Reference
DESCRIPTION: Package reference for @react-types/slider which is part of the React Spectrum library. The reference points to the GitHub repository for more comprehensive documentation.

LANGUAGE: markdown
CODE:
# @react-types/slider

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Cycling Fields with Rounding in TypeScript
DESCRIPTION: Demonstrates cycling fields with the round option to adjust values in specific increments.

LANGUAGE: tsx
CODE:
let date = new CalendarDate(2022, 2, 3);

date.cycle('year', 5); // 2027-02-03
date.cycle('year', 5, {round: true}); // 2025-02-03

date.cycle('year', -5); // 2017-02-03
date.cycle('year', -5, {round: true}); // 2020-02-03

----------------------------------------

TITLE: CSS for TextField Description Styling
DESCRIPTION: CSS styling for the description text in TextField components, typically making the text smaller to differentiate it from the main label and input.

LANGUAGE: css
CODE:
.react-aria-TextField {
  [slot=description] {
    font-size: 12px;
  }
}

----------------------------------------

TITLE: DatePicker with Different Granularity Settings
DESCRIPTION: Demonstrates how to control the granularity of DatePicker by synchronizing two pickers with different granularity settings but the same value.

LANGUAGE: tsx
CODE:
function Example() {
  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));

  return (
    <Flex gap="size-150" wrap>
      <DatePicker
        label="Date and time"
        granularity="second"
        value={date}
        onChange={setDate} />
      <DatePicker
        label="Date"
        granularity="day"
        value={date}
        onChange={setDate} />
    </Flex>
  );
}

----------------------------------------

TITLE: Importing and Exporting BlogPostLayout Component in JSX
DESCRIPTION: Imports BlogPostLayout and Hero components from the @react-spectrum/docs package and exports BlogPostLayout as the default export. This is the layout component used for rendering the blog post.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Applying Custom Class Names to React Aria Table Components
DESCRIPTION: Demonstrates how to override the default class name of a React Aria component with a custom class name.

LANGUAGE: jsx
CODE:
<Table className="my-table">
  {/* ... */}
</Table>

----------------------------------------

TITLE: Listing React Spectrum Package Releases with Version Numbers
DESCRIPTION: A complete list of released packages in the React Spectrum ecosystem including version numbers. This covers React Spectrum UI components, React Aria hooks, React Stately state management utilities, React Types definitions, and internationalization packages.

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum@3.15.0
- @internationalized/date@3.0.0-alpha.0
- @react-aria/autocomplete@3.0.0-alpha.1
- @react-aria/calendar@3.0.0-alpha.0
- @react-aria/color@3.0.0-beta.5
- @react-aria/combobox@3.2.0
- @react-aria/datepicker@3.0.0-alpha.0
- @react-aria/grid@3.1.0
- @react-aria/i18n@3.3.3
- @react-aria/interactions@3.7.0
- @react-aria/label@3.2.1
- @react-aria/link@3.2.0
- @react-aria/listbox@3.4.0
- @react-aria/menu@3.3.0
- @react-aria/numberfield@3.1.1
- @react-aria/overlays@3.7.3
- @react-aria/radio@3.1.6
- @react-aria/searchfield@3.2.1
- @react-aria/select@3.6.0
- @react-aria/selection@3.7.0
- @react-aria/table@3.1.0
- @react-aria/tabs@3.1.0
- @react-aria/textfield@3.5.0
- @react-aria/toggle@3.1.5
- @react-aria/utils@3.10.0
- @react-aria/virtualizer@3.3.5
- @react-spectrum/accordion@3.0.0-alpha.3
- @react-spectrum/actiongroup@3.3.1
- @react-spectrum/autocomplete@3.0.0-alpha.1
- @react-spectrum/breadcrumbs@3.2.4
- @react-spectrum/buttongroup@3.2.3
- @react-spectrum/calendar@3.0.0-alpha.0
- @react-spectrum/card@3.0.0-alpha.1
- @react-spectrum/color@3.0.0-beta.5
- @react-spectrum/combobox@3.2.0
- @react-spectrum/datepicker@3.0.0-alpha.0
- @react-spectrum/form@3.2.4
- @react-spectrum/label@3.4.1
- @react-spectrum/list@3.0.0-alpha.4
- @react-spectrum/numberfield@3.1.1
- @react-spectrum/picker@3.5.0
- @react-spectrum/radio@3.1.5
- @react-spectrum/searchfield@3.2.1
- @react-spectrum/searchwithin@3.0.0-alpha.1
- @react-spectrum/table@3.1.0
- @react-spectrum/tabs@3.1.0
- @react-spectrum/textfield@3.3.0
- @react-spectrum/utils@3.6.3
- @react-stately/calendar@3.0.0-alpha.0
- @react-stately/color@3.0.0-beta.5
- @react-stately/data@3.4.3
- @react-stately/datepicker@3.0.0-alpha.0
- @react-stately/grid@3.1.0
- @react-stately/list@3.4.0
- @react-stately/selection@3.8.0
- @react-stately/table@3.1.0
- @react-stately/utils@3.3.0
- @react-stately/virtualizer@3.1.6
- @react-types/calendar@3.0.0-alpha.0
- @react-types/card@3.0.0-alpha.1
- @react-types/combobox@3.2.0
- @react-types/datepicker@3.0.0-alpha.0
- @react-types/link@3.2.0
- @react-types/select@3.5.0
- @react-types/shared@3.10.0
- @react-types/table@3.1.0
- react-aria@3.11.0
- react-stately@3.10.0

----------------------------------------

TITLE: Controlled and Uncontrolled RangeSlider Examples
DESCRIPTION: Demonstrates both controlled and uncontrolled implementations of the RangeSlider component using React state for the controlled version.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState({start: 25, end: 75});
  return (
    <Flex gap="size-150" wrap>
      <RangeSlider
        label="Range (uncontrolled)"
        defaultValue={{start: 25, end: 75}} />
      <RangeSlider
        label="Range (controlled)"
        value={value}
        onChange={setValue} />
    </Flex>
  );
}

----------------------------------------

TITLE: Importing Layout Component for Documentation Structure in React
DESCRIPTION: Imports and exports the Layout component from @react-spectrum/docs to structure the documentation page.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Styling Drop Target Items in ListBox with CSS
DESCRIPTION: CSS styling for ListBox items that are valid drop targets. The [data-drop-target] attribute selector is used to apply visual feedback when an item becomes a drop target.

LANGUAGE: css
CODE:
.react-aria-ListBoxItem[data-drop-target] {
  outline: 2px solid var(--highlight-background);
  background: var(--highlight-overlay)
}

----------------------------------------

TITLE: Released React Spectrum Packages with Versions
DESCRIPTION: A complete list of all packages released in the React Spectrum ecosystem, including React Aria, React Stately, React Spectrum components, React Types, and Spectrum icons, each with its corresponding version number.

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum@3.21.0
- @react-aria/accordion@3.0.0-alpha.11
- @react-aria/actiongroup@3.4.1
- @react-aria/aria-modal-polyfill@3.5.3
- @react-aria/autocomplete@3.0.0-alpha.10
- @react-aria/breadcrumbs@3.3.1
- @react-aria/button@3.6.1
- @react-aria/calendar@3.0.2
- @react-aria/checkbox@3.5.1
- @react-aria/color@3.0.0-beta.15
- @react-aria/combobox@3.4.1
- @react-aria/datepicker@3.1.1
- @react-aria/dialog@3.3.1
- @react-aria/dnd@3.0.0-alpha.12
- @react-aria/focus@3.8.0
- @react-aria/grid@3.4.1
- @react-aria/gridlist@3.0.0
- @react-aria/i18n@3.6.0
- @react-aria/interactions@3.11.0
- @react-aria/label@3.4.1
- @react-aria/landmark@3.0.0-alpha.2
- @react-aria/link@3.3.3
- @react-aria/listbox@3.6.1
- @react-aria/menu@3.6.1
- @react-aria/meter@3.3.1
- @react-aria/numberfield@3.3.1
- @react-aria/overlays@3.10.1
- @react-aria/progress@3.3.1
- @react-aria/radio@3.3.1
- @react-aria/searchfield@3.4.1
- @react-aria/select@3.8.1
- @react-aria/selection@3.10.1
- @react-aria/separator@3.2.3
- @react-aria/slider@3.2.1
- @react-aria/spinbutton@3.1.3
- @react-aria/switch@3.2.3
- @react-aria/table@3.4.1
- @react-aria/tabs@3.3.1
- @react-aria/tag@3.0.0-alpha.9
- @react-aria/textfield@3.7.1
- @react-aria/toggle@3.3.3
- @react-aria/tooltip@3.3.1
- @react-aria/utils@3.13.3
- @react-aria/virtualizer@3.5.0
- @react-aria/visually-hidden@3.4.1
- @react-spectrum/accordion@3.0.0-alpha.12
- @react-spectrum/actionbar@3.0.0-alpha.12
- @react-spectrum/actiongroup@3.6.1
- @react-spectrum/autocomplete@3.0.0-alpha.10
- @react-spectrum/avatar@3.0.0-alpha.9
- @react-spectrum/breadcrumbs@3.5.1
- @react-spectrum/button@3.9.1
- @react-spectrum/buttongroup@3.4.1
- @react-spectrum/calendar@3.1.1
- @react-spectrum/card@3.0.0-alpha.11
- @react-spectrum/checkbox@3.5.1
- @react-spectrum/color@3.0.0-beta.15
- @react-spectrum/combobox@3.5.1
- @react-spectrum/contextualhelp@3.2.1
- @react-spectrum/datepicker@3.1.1
- @react-spectrum/dialog@3.5.1
- @react-spectrum/divider@3.4.1
- @react-spectrum/dnd@3.0.0-alpha.6
- @react-spectrum/form@3.4.1
- @react-spectrum/icon@3.6.0
- @react-spectrum/illustratedmessage@3.3.1
- @react-spectrum/image@3.3.1
- @react-spectrum/label@3.7.1
- @react-spectrum/layout@3.4.1
- @react-spectrum/link@3.4.1
- @react-spectrum/list@3.0.0
- @react-spectrum/listbox@3.7.1
- @react-spectrum/menu@3.8.1
- @react-spectrum/meter@3.3.1
- @react-spectrum/numberfield@3.4.1
- @react-spectrum/overlays@3.7.1
- @react-spectrum/picker@3.7.1
- @react-spectrum/progress@3.3.1
- @react-spectrum/provider@3.5.1
- @react-spectrum/radio@3.3.1
- @react-spectrum/searchfield@3.5.1
- @react-spectrum/searchwithin@3.0.0-alpha.10
- @react-spectrum/slider@3.2.1
- @react-spectrum/statuslight@3.4.1
- @react-spectrum/switch@3.3.1
- @react-spectrum/table@3.3.1
- @react-spectrum/tabs@3.3.1
- @react-spectrum/tag@3.0.0-alpha.9
- @react-spectrum/text@3.3.1
- @react-spectrum/textfield@3.7.0
- @react-spectrum/theme-dark@3.3.3
- @react-spectrum/theme-default@3.3.3
- @react-spectrum/theme-light@3.2.3
- @react-spectrum/tooltip@3.3.1
- @react-spectrum/utils@3.7.3
- @react-spectrum/view@3.3.1
- @react-spectrum/well@3.3.1
- @react-stately/calendar@3.0.2
- @react-stately/checkbox@3.2.1
- @react-stately/collections@3.4.3
- @react-stately/color@3.1.1
- @react-stately/combobox@3.2.1
- @react-stately/data@3.6.1
- @react-stately/datepicker@3.0.2
- @react-stately/dnd@3.0.0-alpha.10
- @react-stately/grid@3.3.1
- @react-stately/layout@3.7.0
- @react-stately/list@3.5.3
- @react-stately/menu@3.4.1
- @react-stately/numberfield@3.2.1
- @react-stately/overlays@3.4.1
- @react-stately/radio@3.5.1
- @react-stately/searchfield@3.3.1
- @react-stately/select@3.3.1
- @react-stately/selection@3.10.3
- @react-stately/slider@3.2.1
- @react-stately/table@3.4.0
- @react-stately/tabs@3.2.1
- @react-stately/toggle@3.4.1
- @react-stately/tooltip@3.2.1
- @react-stately/tree@3.3.3
- @react-stately/virtualizer@3.3.0
- @react-types/accordion@3.0.0-alpha.9
- @react-types/actionbar@3.0.0-alpha.9
- @react-types/actiongroup@3.3.3
- @react-types/autocomplete@3.0.0-alpha.8
- @react-types/avatar@3.0.0-alpha.8
- @react-types/breadcrumbs@3.4.3
- @react-types/button@3.6.1
- @react-types/buttongroup@3.2.3
- @react-types/calendar@3.0.2
- @react-types/card@3.0.0-alpha.9
- @react-types/checkbox@3.3.3
- @react-types/color@3.0.0-beta.12
- @react-types/combobox@3.5.3
- @react-types/contextualhelp@3.1.3
- @react-types/datepicker@3.1.1
- @react-types/dialog@3.4.3
- @react-types/divider@3.2.3
- @react-types/form@3.3.3
- @react-types/grid@3.1.3
- @react-types/illustratedmessage@3.2.3
- @react-types/image@3.2.3
- @react-types/label@3.6.3
- @react-types/layout@3.3.3
- @react-types/link@3.3.3
- @react-types/list@3.0.0
- @react-types/listbox@3.3.3
- @react-types/menu@3.7.1
- @react-types/meter@3.2.3
- @react-types/numberfield@3.3.3
- @react-types/overlays@3.6.3
- @react-types/progress@3.2.3
- @react-types/provider@3.5.3
- @react-types/radio@3.2.3
- @react-types/searchfield@3.3.3
- @react-types/searchwithin@3.0.0-alpha.8
- @react-types/select@3.6.3
- @react-types/shared@3.14.1
- @react-types/slider@3.2.1
- @react-types/statuslight@3.2.3
- @react-types/switch@3.2.3
- @react-types/table@3.3.1
- @react-types/tabs@3.1.3
- @react-types/tag@3.0.0-alpha.7
- @react-types/text@3.2.3
- @react-types/textfield@3.5.3
- @react-types/tooltip@3.2.3
- @react-types/view@3.2.3
- @react-types/well@3.2.3
- @spectrum-icons/color@3.4.2
- @spectrum-icons/illustrations@3.4.0
- @spectrum-icons/ui@3.3.2
- @spectrum-icons/workflow@4.0.2
- react-aria@3.19.0
- react-stately@3.17.0

----------------------------------------

TITLE: Implementing CSS Modules in React Components
DESCRIPTION: Example of how CSS Modules can be used in React Spectrum components to prevent class name conflicts. It demonstrates importing CSS class names from Spectrum CSS and using them in a Button component, allowing each component to have unique class names per build.

LANGUAGE: JSX
CODE:
import styles from '@adobe/spectrum-css/dist/components/button/vars.css';

function Button(props) {
  // ...
  return (
    <button className={styles['spectrum-Button']}>
      {props.children}
    </button>
  );
}

----------------------------------------

TITLE: TimeField with Min and Max Value Constraints
DESCRIPTION: Example demonstrating how to set minimum and maximum time values for a TimeField, limiting selection between 9 AM and 5 PM.

LANGUAGE: tsx
CODE:
<Form validationBehavior="native" maxWidth="size-3000">
  <TimeField
    label="Meeting time"
    /*- begin highlight -*/
    minValue={new Time(9)}
    maxValue={new Time(17)}
    /*- end highlight -*/
    defaultValue={new Time(8)} />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Checking Weekdays and Weekends with Locale Awareness
DESCRIPTION: Demonstrates the isWeekday and isWeekend functions which determine if a date falls on a weekday or weekend based on locale. Shows how results differ between US and Israeli locales.

LANGUAGE: tsx
CODE:
import {isWeekday, isWeekend} from '@internationalized/date';

let date = parseZonedDateTime('2022-02-06T08:30[America/Los_Angeles]'); // a Sunday

isWeekday(date, 'en-US'); // false
isWeekday(date, 'he-IL'); // true

isWeekend(date, 'en-US'); // true
isWeekend(date, 'he-IL'); // false

----------------------------------------

TITLE: Demonstrating tabIndex handling for interactive elements in TableView rows
DESCRIPTION: This code snippet shows how to handle tabIndex for interactive controls within table rows. Elements within the focused row should have tabIndex={0} while elements in non-focused rows should have tabIndex={-1}.

LANGUAGE: jsx
CODE:
tabIndex={0} // For interactive controls within the row that has focus
tabIndex={-1} // For interactive controls within rows that do not contain focus

----------------------------------------

TITLE: Disabled SearchWithin Component Example in React Spectrum
DESCRIPTION: An example showing how to disable the SearchWithin component and all its child components.

LANGUAGE: tsx
CODE:
<SearchWithin label="Search" isDisabled>
  <SearchField />
  <Picker defaultSelectedKey="all">
    <Item key="all">All</Item>
    <Item key="campaigns">Campaigns</Item>
    <Item key="audiences">Audiences</Item>
    <Item key="tags">Tags</Item>
  </Picker>
</SearchWithin>

----------------------------------------

TITLE: LogicButton with OR Variant
DESCRIPTION: Shows how to create a LogicButton with the 'or' variant and a text label.

LANGUAGE: tsx
CODE:
<LogicButton variant="or">Or</LogicButton>

----------------------------------------

TITLE: Converting CalendarDateTime to ZonedDateTime in TypeScript
DESCRIPTION: Demonstrates creating a CalendarDateTime by combining a Time with a CalendarDate, then converting it to a ZonedDateTime with a specific time zone.

LANGUAGE: tsx
CODE:
import {toZoned, toCalendarDateTime, CalendarDate} from '@internationalized/date';

let date = new CalendarDate(2022, 2, 3);
let time = new Time(8, 30);

let dateTime = toCalendarDateTime(date, time); // 2022-02-03T08:30:00
toZoned(dateTime, 'America/Los_Angeles'); // 2021-02-03T08:30-07:00[America/Los_Angeles]

----------------------------------------

TITLE: Importing ContextualHelp Components in React Spectrum
DESCRIPTION: Import statements for the ContextualHelp component and related components from React Spectrum packages for use in React applications.

LANGUAGE: jsx
CODE:
import {ContextualHelp} from '@react-spectrum/contextualhelp';
import {Content, Footer} from '@react-spectrum/view';
import {Heading, Text} from '@react-spectrum/text';
import {Link} from '@react-spectrum/link';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Controlled and Uncontrolled RadioGroup Examples
DESCRIPTION: Shows how to create both controlled and uncontrolled RadioGroup components with React state for managing selection.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState('yes');

  return (
    <Flex gap="size-300">
      <RadioGroup label="Are you a wizard? (uncontrolled)" defaultValue="yes">
        <Radio value="yes">Yes</Radio>
        <Radio value="no">No</Radio>
      </RadioGroup>

      <RadioGroup label="Are you a wizard? (controlled)" value={selected} onChange={setSelected}>
        <Radio value="yes">Yes</Radio>
        <Radio value="no">No</Radio>
      </RadioGroup>
    </Flex>
  );
}

----------------------------------------

TITLE: Basic CSS Styling for ColorSwatchPicker
DESCRIPTION: Example showing how to target and style the ColorSwatchPicker component using its default class name.

LANGUAGE: css
CODE:
.react-aria-ColorSwatchPicker {
  /* ... */
}

----------------------------------------

TITLE: Triggering a Toast Notification in React Aria
DESCRIPTION: Example showing how to trigger a toast notification using the global queue instance.

LANGUAGE: tsx
CODE:
<Button
  onPress={() => queue.add({
    title: 'Toast complete!',
    description: 'Great success.'
  })}>
  Toast
</Button>

----------------------------------------

TITLE: Popover with Cross Offset
DESCRIPTION: Demonstrates using the crossOffset prop to adjust a popover's position along the cross axis relative to its trigger.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <Button>Cross offset</Button>
  <MyPopover placement="top" crossOffset={100}>
    Offset by an additional 100px.
  </MyPopover>
</DialogTrigger>

----------------------------------------

TITLE: Controlled and Uncontrolled SearchField Values
DESCRIPTION: Demonstrates the difference between controlled and uncontrolled SearchField components, showing how to use defaultValue for uncontrolled and value/onChange for controlled fields.

LANGUAGE: tsx
CODE:
function Example() {
  let [searchValue, setSearchValue] = React.useState('puppies');
  return (
    <Flex gap="size-300">
      <SearchField
        defaultValue="puppies"
        label="Search (uncontrolled)" />

      <SearchField
        value={searchValue}
        onChange={setSearchValue}
        label="Search (controlled)" />
    </Flex>
  );
}

----------------------------------------

TITLE: Implementing CSS Grid for Slot-Based Layouts
DESCRIPTION: CSS implementation for a card component using grid layout with named areas. The CSS defines the grid structure with specific regions for different elements like preview, avatar, title, body, and footer.

LANGUAGE: css
CODE:
.spectrum-Card {
  border: 1px solid lightgrey;
  border-radius: 4px;
  background: white;
}

/* example grid css https://css-tricks.com/snippets/css/complete-guide-grid/ */
.container {
  display: grid;
  grid-template-columns: 14px auto 1fr 1fr 14px;
  grid-template-rows: auto 32px 16px minmax(30px, auto) auto auto 10px;
  grid-template-areas:
    "preview preview    preview  preview   preview"
    ".       avatar     .        .         ."
    ".       avatar     .        .         ."
    ".       title      title    title     ."
    ".       body       body     body      ."
    ".       divider    divider  divider   ."
    ".       footer     footer   footer    ."
    ".       .          .        .         .";
}

.preview {
  grid-area: preview-start / preview-start / span 2 /preview-end;
  height: 200px; /* build into grid template? minmax? */
}

.avatar {
  grid-area: avatar;
  z-index: 1;
  height: 48px; /* this would ideally be off in avatar land */
  width: 48px;
}

.title {
  grid-area: title;
}

.body {
  grid-area: body;
}

.divider {
  grid-area: divider;
}

.footer {
  grid-area: footer; /* this might be an issue because footer is a reserved word */
}

----------------------------------------

TITLE: Styling a React Aria Slider with CSS
DESCRIPTION: CSS styling for the Slider component, including styles for track, thumb, focus states, and orientation handling. This CSS provides a complete styling solution with support for different states like dragging and focus.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Slider {
  display: grid;
  grid-template-areas: "label output"
                       "track track";
  grid-template-columns: 1fr auto;
  max-width: 300px;
  color: var(--text-color);

  .react-aria-Label {
    grid-area: label;
  }

  .react-aria-SliderOutput {
    grid-area: output;
  }

  .react-aria-SliderTrack {
    grid-area: track;
    position: relative;

    /* track line */
    &:before {
      content: '';
      display: block;
      position: absolute;
      background: var(--border-color);
    }
  }

  .react-aria-SliderThumb {
    width: 1.429rem;
    height: 1.429rem;
    border-radius: 50%;
    background: var(--highlight-background);
    border: 2px solid var(--background-color);
    forced-color-adjust: none;

    &[data-dragging] {
      background: var(--highlight-background-pressed);
    }

    &[data-focus-visible] {
      outline: 2px solid var(--focus-ring-color);
    }
  }

  &[data-orientation=horizontal] {
    flex-direction: column;
    width: 300px;

    .react-aria-SliderTrack {
      height: 30px;
      width: 100%;

      &:before {
        height: 3px;
        width: 100%;
        top: 50%;
        transform: translateY(-50%);
      }
    }

    .react-aria-SliderThumb {
      top: 50%;
    }
  }
}

----------------------------------------

TITLE: Configuring Parcel Resolver in .parcelrc
DESCRIPTION: This snippet shows how to configure the @react-aria/parcel-resolver-optimize-locales plugin in the .parcelrc file. It extends the default Parcel configuration and adds the locale optimization resolver to the resolvers list.

LANGUAGE: json
CODE:
{
  "extends": "@parcel/config-default",
  "resolvers": ["@react-aria/parcel-resolver-optimize-locales", "..."]
}

----------------------------------------

TITLE: Modal Component Structure with ModalOverlay
DESCRIPTION: Demonstrates the basic structure of Modal with ModalOverlay for creating the foundation of a modal dialog.

LANGUAGE: tsx
CODE:
import {Modal, ModalOverlay} from 'react-aria-components';

<ModalOverlay>
  <Modal />
</ModalOverlay>

----------------------------------------

TITLE: Controlled vs Uncontrolled NumberField Implementation
DESCRIPTION: Shows how to implement both controlled and uncontrolled NumberField components with React state management.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState(15);

  return (
    <Flex gap="size-150" wrap>
      <NumberField
        label="Cookies (Uncontrolled)"
        defaultValue={15}
        minValue={0} />

      <NumberField
        label="Cookies (Controlled)"
        value={value}
        onChange={setValue}
        minValue={0} />
    </Flex>
  );
}

----------------------------------------

TITLE: Implementing a Vertical Stack with Flex Layout in React Spectrum
DESCRIPTION: Demonstrates creating a simple vertical stack using the Flex component with column direction and consistent spacing via Spectrum dimension variables.

LANGUAGE: tsx
CODE:
<Flex direction="column" width="size-2000" gap="size-100">
  <View backgroundColor="celery-600" height="size-800" />
  <View backgroundColor="blue-600" height="size-800" />
  <View backgroundColor="magenta-600" height="size-800" />
</Flex>

----------------------------------------

TITLE: AlertDialog with Information Variant
DESCRIPTION: Shows the information variant of AlertDialog, used for providing informational messages to users that may require acknowledgment.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>New file</ActionButton>
  <AlertDialog
    variant="information"
    title="Connect your account"
    primaryActionLabel="Continue"
    cancelLabel="Cancel">
    Please connect an existing account to sync any new files.
  </AlertDialog>
</DialogTrigger>

----------------------------------------

TITLE: Keyboard Interaction for MenuTrigger Focus
DESCRIPTION: Defines the required keyboard interactions when focus is on the MenuTrigger button component. This includes key combinations for opening the menu and navigating to menu items.

LANGUAGE: markdown
CODE:
With focus on the button:
 - <kbd>Enter</kbd>: opens the menu and places focus on the first menu item.
 - <kbd>Space</kbd>: Opens the menu and places focus on the first menu item.
 - (Optional) <kbd>ArrowDown</kbd>: opens the menu and moves focus to the first menu item.
 - (Optional) <kbd>ArrowUp</kbd>: opens the menu and moves focus to the last menu item. Note that v2, does not implement this behavior.

----------------------------------------

TITLE: Creating a Date in Buddhist Calendar System in TypeScript
DESCRIPTION: Creates a date in the Buddhist calendar system, equivalent to April 4th, 2020 in the Gregorian calendar.

LANGUAGE: tsx
CODE:
import {BuddhistCalendar} from '@internationalized/date';

let date = new CalendarDate(new BuddhistCalendar(), 2563, 4, 30);

----------------------------------------

TITLE: Conditional Rendering Based on Component State in React Aria
DESCRIPTION: Using render props to conditionally render elements based on component state, such as showing an indicator when a tab is selected.

LANGUAGE: jsx
CODE:
<Tab>
  {({isSelected}) => (
    <>
      {isSelected && <SelectionIndicator />}
      Item
    </>
  )}
</Tab>

----------------------------------------

TITLE: Adding and Subtracting Durations with CalendarDateTime
DESCRIPTION: Demonstrates adding and subtracting DateTimeDuration objects to/from a CalendarDateTime using the add and subtract methods, which return new instances.

LANGUAGE: tsx
CODE:
let date = new CalendarDateTime(2022, 2, 3, 9, 45);

date.add({weeks: 1}); // 2022-02-10T09:45
date.add({months: 1}); // 2022-03-03T09:45
date.add({years: 1, months: 1, days: 1}); // 2023-03-04T09:45
date.add({hours: 1}); // 2022-02-03T10:45
date.add({minutes: 30}); // 2022-02-03T10:15

date.subtract({weeks: 1}); // 2022-01-27T09:45
date.subtract({months: 1}); // 2022-01-03T09:45
date.subtract({years: 1, months: 1, days: 1}); // 2021-01-02T09:45
date.subtract({hours: 1}); // 2022-02-03T8:45
date.subtract({minutes: 30}); // 2022-02-03T09:15

----------------------------------------

TITLE: Implementing Offset for Popover Dialog in React Spectrum
DESCRIPTION: Demonstrates how to use the 'offset' prop to position a popover dialog 50px further above its trigger button than the default placement.

LANGUAGE: tsx
CODE:
<DialogTrigger type="popover" placement="top" offset={50}>
  <ActionButton>Trigger</ActionButton>
  <Dialog>
    <Heading>Offset</Heading>
    <Divider />
    <Content>
      <Text>
        Offset by an additional 50px.
      </Text>
    </Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Importing Test Utils Package Reference in Markdown
DESCRIPTION: A reference to the @react-spectrum/test-utils package, indicating it is part of the React Spectrum library with a link to the main repository for more information.

LANGUAGE: markdown
CODE:
# @react-spectrum/test-utils

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Styling Image Items in a Droppable GridList
DESCRIPTION: CSS styles for displaying image items in a GridList. The styles ensure proper layout with fixed height images and text overflow handling for filenames.

LANGUAGE: css
CODE:
.image-item {
  display: flex;
  height: 50px;
  gap: 10px;
  align-items: center;
}

.image-item img {
  height: 100%;
  aspect-ratio: 1/1;
  object-fit: contain;
}

.image-item span {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

----------------------------------------

TITLE: Released Packages List for React Spectrum Ecosystem
DESCRIPTION: A complete list of all released packages in the React Spectrum ecosystem, including version numbers. The list encompasses React Spectrum components, React Aria hooks, React Stately state management libraries, React Types type definitions, and related icon packages.

LANGUAGE: markdown
CODE:
 - @adobe/react-spectrum@3.36.0
 - @internationalized/date@3.5.5
 - @react-aria/accordion@3.0.0-alpha.30
 - @react-aria/actiongroup@3.7.6
 - @react-aria/aria-modal-polyfill@3.7.11
 - @react-aria/autocomplete@3.0.0-alpha.30
 - @react-aria/breadcrumbs@3.5.14
 - @react-aria/button@3.9.6
 - @react-aria/calendar@3.5.9
 - @react-aria/checkbox@3.14.4
 - @react-aria/collections@3.0.0-alpha.2
 - @react-aria/color@3.0.0-rc.0
 - @react-aria/combobox@3.10.0
 - @react-aria/datepicker@3.11.0
 - @react-aria/dialog@3.5.15
 - @react-aria/dnd@3.7.0
 - @react-aria/focus@3.18.0
 - @react-aria/form@3.0.6
 - @react-aria/grid@3.10.0
 - @react-aria/gridlist@3.9.0
 - @react-aria/i18n@3.12.0
 - @react-aria/interactions@3.22.0
 - @react-aria/label@3.7.9
 - @react-aria/link@3.7.2
 - @react-aria/listbox@3.13.0
 - @react-aria/menu@3.15.0
 - @react-aria/meter@3.4.14
 - @react-aria/numberfield@3.11.4
 - @react-aria/overlays@3.23.0
 - @react-aria/progress@3.4.14
 - @react-aria/radio@3.10.5
 - @react-aria/searchfield@3.7.6
 - @react-aria/select@3.14.6
 - @react-aria/selection@3.19.0
 - @react-aria/separator@3.4.0
 - @react-aria/slider@3.7.9
 - @react-aria/spinbutton@3.6.6
 - @react-aria/ssr@3.9.5
 - @react-aria/steplist@3.0.0-alpha.6
 - @react-aria/switch@3.6.5
 - @react-aria/table@3.15.0
 - @react-aria/tabs@3.9.2
 - @react-aria/tag@3.4.2
 - @react-aria/textfield@3.14.6
 - @react-aria/toast@3.0.0-beta.13
 - @react-aria/toggle@3.10.5
 - @react-aria/toolbar@3.0.0-beta.6
 - @react-aria/tooltip@3.7.5
 - @react-aria/tree@3.0.0-alpha.2
 - @react-aria/utils@3.25.0
 - @react-aria/virtualizer@4.0.0
 - @react-aria/visually-hidden@3.8.13
 - @react-spectrum/accordion@3.0.0-alpha.32
 - @react-spectrum/actionbar@3.5.0
 - @react-spectrum/actiongroup@3.10.6
 - @react-spectrum/autocomplete@3.0.0-alpha.33
 - @react-spectrum/avatar@3.0.13
 - @react-spectrum/badge@3.1.14
 - @react-spectrum/breadcrumbs@3.9.8
 - @react-spectrum/button@3.16.5
 - @react-spectrum/buttongroup@3.6.14
 - @react-spectrum/calendar@3.4.10
 - @react-spectrum/card@3.0.0-alpha.34
 - @react-spectrum/checkbox@3.9.7
 - @react-spectrum/color@3.0.0-rc.0
 - @react-spectrum/combobox@3.13.0
 - @react-spectrum/contextualhelp@3.6.12
 - @react-spectrum/datepicker@3.10.0
 - @react-spectrum/dialog@3.8.12
 - @react-spectrum/divider@3.5.14
 - @react-spectrum/dnd@3.4.0
 - @react-spectrum/dropzone@3.0.2
 - @react-spectrum/filetrigger@3.0.2
 - @react-spectrum/form@3.7.7
 - @react-spectrum/icon@3.7.14
 - @react-spectrum/illustratedmessage@3.5.2
 - @react-spectrum/image@3.5.2
 - @react-spectrum/inlinealert@3.2.6
 - @react-spectrum/label@3.16.7
 - @react-spectrum/labeledvalue@3.1.15
 - @react-spectrum/layout@3.6.6
 - @react-spectrum/link@3.6.8
 - @react-spectrum/list@3.8.0
 - @react-spectrum/listbox@3.13.0
 - @react-spectrum/menu@3.20.0
 - @react-spectrum/meter@3.5.2
 - @react-spectrum/numberfield@3.9.4
 - @react-spectrum/overlays@5.6.2
 - @react-spectrum/picker@3.15.0
 - @react-spectrum/progress@3.7.8
 - @react-spectrum/provider@3.9.8
 - @react-spectrum/radio@3.7.7
 - @react-spectrum/searchfield@3.8.7
 - @react-spectrum/slider@3.6.10
 - @react-spectrum/statuslight@3.5.14
 - @react-spectrum/steplist@3.0.0-alpha.6
 - @react-spectrum/switch@3.5.6
 - @react-spectrum/table@3.13.0
 - @react-spectrum/tabs@3.8.11
 - @react-spectrum/tag@3.2.7
 - @react-spectrum/text@3.5.6
 - @react-spectrum/textfield@3.12.2
 - @react-spectrum/theme-dark@3.5.11
 - @react-spectrum/theme-default@3.5.11
 - @react-spectrum/theme-express@3.0.0-alpha.13
 - @react-spectrum/theme-light@3.4.11
 - @react-spectrum/toast@3.0.0-beta.13
 - @react-spectrum/tooltip@3.6.8
 - @react-spectrum/tree@3.0.0-alpha.2
 - @react-spectrum/utils@3.11.8
 - @react-spectrum/view@3.6.11
 - @react-spectrum/well@3.4.14
 - @react-stately/calendar@3.5.2
 - @react-stately/checkbox@3.6.6
 - @react-stately/collections@3.10.8
 - @react-stately/color@3.7.0
 - @react-stately/combobox@3.9.0
 - @react-stately/data@3.11.5
 - @react-stately/datepicker@3.10.0
 - @react-stately/dnd@3.4.0
 - @react-stately/form@3.0.4
 - @react-stately/grid@3.9.0
 - @react-stately/layout@4.0.0
 - @react-stately/list@3.10.6
 - @react-stately/menu@3.8.0
 - @react-stately/numberfield@3.9.4
 - @react-stately/overlays@3.6.8
 - @react-stately/radio@3.10.5
 - @react-stately/searchfield@3.5.4
 - @react-stately/select@3.6.5
 - @react-stately/selection@3.16.0
 - @react-stately/slider@3.5.5
 - @react-stately/steplist@3.0.0-alpha.6
 - @react-stately/table@3.12.0
 - @react-stately/tabs@3.6.7
 - @react-stately/toast@3.0.0-beta.5
 - @react-stately/toggle@3.7.5
 - @react-stately/tooltip@3.4.10
 - @react-stately/tree@3.8.2
 - @react-stately/utils@3.10.2
 - @react-stately/virtualizer@4.0.0
 - @react-types/accordion@3.0.0-alpha.22
 - @react-types/actionbar@3.1.8
 - @react-types/actiongroup@3.4.10
 - @react-types/autocomplete@3.0.0-alpha.23
 - @react-types/avatar@3.0.8
 - @react-types/badge@3.1.10
 - @react-types/breadcrumbs@3.7.6
 - @react-types/button@3.9.5
 - @react-types/buttongroup@3.3.10
 - @react-types/calendar@3.4.7
 - @react-types/card@3.0.0-alpha.27
 - @react-types/checkbox@3.8.2
 - @react-types/color@3.0.0-rc.0
 - @react-types/combobox@3.12.0
 - @react-types/contextualhelp@3.2.11
 - @react-types/datepicker@3.8.0
 - @react-types/dialog@3.5.11
 - @react-types/divider@3.3.10
 - @react-types/form@3.7.5
 - @react-types/grid@3.2.7
 - @react-types/illustratedmessage@3.3.10
 - @react-types/image@3.4.2
 - @react-types/label@3.9.4
 - @react-types/layout@3.3.16
 - @react-types/link@3.5.6
 - @react-types/list@3.2.18
 - @react-types/listbox@3.5.0
 - @react-types/menu@3.9.10
 - @react-types/meter@3.4.2
 - @react-types/numberfield@3.8.4
 - @react-types/overlays@3.8.8
 - @react-types/progress@3.5.5
 - @react-types/provider@3.8.2
 - @react-types/radio@3.8.2
 - @react-types/searchfield@3.5.6
 - @react-types/select@3.9.5
 - @react-types/shared@3.24.0
 - @react-types/slider@3.7.4
 - @react-types/statuslight@3.3.10
 - @react-types/switch@3.5.4
 - @react-types/table@3.10.0
 - @react-types/tabs@3.3.8
 - @react-types/text@3.3.10
 - @react-types/textfield@3.9.4
 - @react-types/tooltip@3.4.10
 - @react-types/view@3.4.10
 - @react-types/well@3.3.10
 - @spectrum-icons/color@3.5.14
 - @spectrum-icons/express@3.0.0-alpha.18
 - @spectrum-icons/illustrations@3.6.14
 - @spectrum-icons/ui@3.6.8
 - @spectrum-icons/workflow@4.2.13
 - react-aria@3.34.0
 - react-aria-components@1.3.0
 - react-stately@3.32.0
 - tailwindcss-react-aria-components@1.1.4

----------------------------------------

TITLE: ColorSwatch with Custom Width
DESCRIPTION: Example showing how to create a ColorSwatch with a custom width.

LANGUAGE: tsx
CODE:
<ColorSwatch color="#00f" width="size-1000" />

----------------------------------------

TITLE: React Spectrum Released Packages List
DESCRIPTION: A code block showing all the packages that were released in the September 13, 2021 update, including version numbers for React Spectrum components, React Aria hooks, and React Stately utilities.

LANGUAGE: text
CODE:
- @adobe/react-spectrum@3.14.0
- @internationalized/number@3.0.3
- @react-aria/button@3.3.4
- @react-aria/color@3.0.0-beta.4
- @react-aria/combobox@3.1.0
- @react-aria/focus@3.5.0
- @react-aria/grid@3.0.0
- @react-aria/interactions@3.6.0
- @react-aria/label@3.2.0
- @react-aria/numberfield@3.1.0
- @react-aria/searchfield@3.2.0
- @react-aria/select@3.5.0
- @react-aria/selection@3.6.0
- @react-aria/ssr@3.1.0
- @react-aria/table@3.0.0
- @react-aria/tabs@3.0.2
- @react-aria/textfield@3.4.0
- @react-aria/utils@3.9.0
- @react-spectrum/actionbar@3.0.0-alpha.3
- @react-spectrum/actiongroup@3.3.0
- @react-spectrum/button@3.6.0
- @react-spectrum/color@3.0.0-beta.4
- @react-spectrum/combobox@3.1.0
- @react-spectrum/label@3.4.0
- @react-spectrum/link@3.2.0
- @react-spectrum/listbox@3.5.2
- @react-spectrum/menu@3.5.0
- @react-spectrum/numberfield@3.1.0
- @react-spectrum/picker@3.4.0
- @react-spectrum/searchfield@3.2.0
- @react-spectrum/table@3.0.0
- @react-spectrum/textfield@3.2.0
- @react-stately/color@3.0.0-beta.4
- @react-stately/data@3.4.2
- @react-stately/grid@3.0.0
- @react-stately/layout@3.4.2
- @react-stately/table@3.0.0
- @react-types/color@3.0.0-beta.3
- @react-types/combobox@3.1.0
- @react-types/grid@3.0.0
- @react-types/label@3.5.0
- @react-types/layout@3.2.0
- @react-types/menu@3.4.0
- @react-types/numberfield@3.1.0
- @react-types/select@3.4.0
- @react-types/shared@3.9.0
- @react-types/table@3.0.0
- @react-types/textfield@3.3.0
- react-aria@3.10.0
- react-stately@3.9.0

----------------------------------------

TITLE: Creating Custom Label Component with LabelContext
DESCRIPTION: Example of implementing a custom Label component that works with TextField by consuming the LabelContext.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Using Built-in Form Validation in React Spectrum
DESCRIPTION: This snippet demonstrates how to use HTML constraint validation with React Spectrum form components. It shows a required email field that will be validated by the browser when the user submits the form.

LANGUAGE: tsx
CODE:
<Form validationBehavior="native" maxWidth="size-3000">
  {/*- begin highlight -*/}
  <TextField label="Email" name="email" type="email" isRequired />
  {/*- end highlight -*/}
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Importing Tailwind CSS for React Aria Components
DESCRIPTION: Imports the Tailwind CSS global styles required for the Action Menu component.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Using onChangeEnd Event Handler with ColorWheel Component
DESCRIPTION: Example demonstrating how to use the onChangeEnd event handler to update state only when the user completes a drag operation on the color wheel, rather than during the drag.

LANGUAGE: tsx
CODE:
function Example() {
  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));
  return (
    <>
      <ColorWheel defaultValue={color} onChangeEnd={setColor} />
      <p>Current color value: {color.toString('hsl')}</p>
    </>
  );
}

----------------------------------------

TITLE: Disabled Checkbox in React Spectrum
DESCRIPTION: Demonstrates how to create a disabled Checkbox that users cannot interact with using the isDisabled prop.

LANGUAGE: tsx
CODE:
<Checkbox isDisabled>Subscribe</Checkbox>

----------------------------------------

TITLE: Importing from Individual React Stately Packages
DESCRIPTION: Example of importing a hook from an individual React Stately package.

LANGUAGE: tsx
CODE:
// Individual packages
import {useRadioGroupState} from '@react-stately/radio';

----------------------------------------

TITLE: Manipulating Calendar Dates with internationalized/date
DESCRIPTION: Demonstrates how to use the CalendarDate object to create a date, add a duration, find the start of the week in a specific locale, and convert to a string representation.

LANGUAGE: TypeScript
CODE:
import {CalendarDate, startOfWeek} from '@internationalized/date';

let date = new CalendarDate(2022, 2, 3);
date = date.add({weeks: 1});
date = startOfWeek(date, 'en-US');
date.toString(); // 2022-02-06

----------------------------------------

TITLE: RangeSlider with Contextual Help
DESCRIPTION: Demonstrates how to add contextual help to a RangeSlider for providing additional information to users.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<RangeSlider
  label="Search radius"
  formatOptions={{style: 'unit', unit: 'mile'}}
  defaultValue={{start: 15, end: 60}}
  contextualHelp={
    <ContextualHelp variant="info">
      <Heading>Ranking</Heading>
      <Content>Search results are sorted by distance from city center.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Implementing Long Press Trigger for MenuTrigger
DESCRIPTION: Example showing how to configure a MenuTrigger to open on long press instead of immediate click, enabling a separate default action on regular press.

LANGUAGE: tsx
CODE:
<MenuTrigger trigger="longPress">
  <Button onPress={() => alert('crop')}>Crop</Button>
  <Popover>
    <Menu>
      <MenuItem>Rotate</MenuItem>
      <MenuItem>Slice</MenuItem>
      <MenuItem>Clone stamp</MenuItem>
    </Menu>
  </Popover>
</MenuTrigger>

----------------------------------------

TITLE: Styling React Aria Components with CSS Selectors
DESCRIPTION: Example of using the default CSS class naming convention with react-aria-ComponentName to style React Aria components.

LANGUAGE: css
CODE:
.react-aria-Tabs {
  /* ... */
}

----------------------------------------

TITLE: Rendering Calendar Interface Documentation in JSX
DESCRIPTION: This code renders the Calendar interface documentation using the ClassAPI component. It passes the necessary links and class references from the docs object.

LANGUAGE: JSX
CODE:
<ClassAPI links={docs.links} class={docs.exports.Calendar} />

----------------------------------------

TITLE: Creating a Read-Only RangeCalendar
DESCRIPTION: This example demonstrates a read-only RangeCalendar using the isReadOnly prop, which makes the calendar's value immutable while still allowing focus.

LANGUAGE: tsx
CODE:
<RangeCalendar aria-label="Trip dates" value={{start: today(getLocalTimeZone()), end: today(getLocalTimeZone()).add({ weeks: 1 })}} isReadOnly />

----------------------------------------

TITLE: Implementing a Controlled ColorField with React State
DESCRIPTION: Example showing how to create a controlled ColorField component using React state to manage the color value, with parseColor to handle color conversion.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-stately/color';

function Example() {
  let [color, setColor] = React.useState(parseColor('#7f007f'));
  return (
    <>
      <ColorField aria-label="Color" value={color} onChange={setColor} />
      <p>Current color value: {color.toString('hex')}</p>
    </>
  );
}

----------------------------------------

TITLE: Small Size Breadcrumbs in React Spectrum
DESCRIPTION: Implementation of Breadcrumbs with a small size variation using the size prop with value 'S'.

LANGUAGE: tsx
CODE:
<Breadcrumbs size="S">
  <Item key="home">Home</Item>
  <Item key="trendy">Trendy</Item>
</Breadcrumbs>

----------------------------------------

TITLE: Converting CalendarDate to ZonedDateTime
DESCRIPTION: Shows how to convert a CalendarDate to a ZonedDateTime using the toZoned function, which sets the time to midnight in the specified time zone. Also demonstrates converting to a CalendarDateTime first to set a specific time.

LANGUAGE: tsx
CODE:
import {toZoned, toCalendarDateTime, Time} from '@internationalized/date';

let date = new CalendarDate(2022, 2, 3);
toZoned(date, 'America/Los_Angeles'); // 2021-02-03T00:00-07:00[America/Los_Angeles]

let dateTime = toCalendarDateTime(date, new Time(8, 30));
toZoned(dateTime, 'America/Los_Angeles'); // 2021-02-03T08:30-07:00[America/Los_Angeles]

----------------------------------------

TITLE: CSS for Empty State Styling
DESCRIPTION: CSS for styling the empty state of a Tree component using the data-empty attribute, centering the content and applying italic styling.

LANGUAGE: css
CODE:
.react-aria-Tree {
  &[data-empty] {
    display: flex;
    align-items: center;
    justify-content: center;
    font-style: italic;
  }
}

----------------------------------------

TITLE: Basic ToggleButton Implementation in React Spectrum
DESCRIPTION: Shows the simplest implementation of a ToggleButton with just a text label.

LANGUAGE: tsx
CODE:
<ToggleButton>Pin</ToggleButton>

----------------------------------------

TITLE: Importing CSS for Tailwind in React Component
DESCRIPTION: Imports the Tailwind global CSS file for styling the component.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Configuring Next.js for React Spectrum
DESCRIPTION: Configuration for Next.js to properly transpile and handle React Spectrum packages. This setup ensures CSS is loaded correctly when using React Spectrum with Next.js.

LANGUAGE: tsx
CODE:
const glob = require('glob');

module.exports = {
  transpilePackages: [
    '@adobe/react-spectrum',
    '@react-spectrum/*',
    '@spectrum-icons/*',
  ].flatMap((spec) => glob.sync(`${spec}`, { cwd: 'node_modules/' })),
};

----------------------------------------

TITLE: Implementing Auto-dismiss for Toast Notifications
DESCRIPTION: Example showing how to configure a toast to automatically dismiss after a specified timeout period.

LANGUAGE: tsx
CODE:
<Button
  onPress={() => queue.add({title: 'Toast is done!'}, {timeout: 5000})}
>
  Show toast
</Button>

----------------------------------------

TITLE: Implementing useDroppableItem Hook for Individual Collection Items in TypeScript
DESCRIPTION: This hook works with useDroppableCollection to handle drops for individual items within a collection. It provides props to be applied to the item, including accessibility descriptions for screen readers.

LANGUAGE: typescript
CODE:
interface DroppableItemOptions {
  /** The drop target represented by this element. */
  target: DropTarget,
}


interface DroppableItemResult {
  /** Props for the item element. */
  dropProps: HTMLAttributes<HTMLElement>
}

declare function useDroppableItem(options: DroppableItemOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DroppableItemResult;

----------------------------------------

TITLE: Setting Meter Value
DESCRIPTION: Shows how to set the value property of the Meter component to represent progress percentage.

LANGUAGE: tsx
CODE:
<Meter
  label="Storage space"
  value={25} />

----------------------------------------

TITLE: Custom CSS Styling for ToggleButton in Tree Component
DESCRIPTION: CSS styling for the ToggleButton used in the Tree selection example, providing margin to separate the button from the tree below it.

LANGUAGE: css
CODE:
.react-aria-ToggleButton {
  margin-bottom: 8px;
}

----------------------------------------

TITLE: Released React Spectrum Packages with Version Numbers
DESCRIPTION: A complete list of all released packages in the React Spectrum ecosystem, including core components, internationalization utilities, React Aria hooks, React Stately state managers, and React Types definitions. Each package is listed with its current version number.

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum@3.19.0
- @internationalized/date@3.0.0
- @internationalized/message@3.0.8
- @react-aria/accordion@3.0.0-alpha.9
- @react-aria/actiongroup@3.3.1
- @react-aria/aria-modal-polyfill@3.5.1
- @react-aria/autocomplete@3.0.0-alpha.8
- @react-aria/breadcrumbs@3.2.1
- @react-aria/button@3.5.1
- @react-aria/calendar@3.0.0
- @react-aria/checkbox@3.4.1
- @react-aria/color@3.0.0-beta.13
- @react-aria/combobox@3.3.1
- @react-aria/datepicker@3.0.0
- @react-aria/dialog@3.2.1
- @react-aria/dnd@3.0.0-alpha.10
- @react-aria/focus@3.6.1
- @react-aria/grid@3.3.1
- @react-aria/i18n@3.4.1
- @react-aria/interactions@3.9.1
- @react-aria/label@3.3.1
- @react-aria/landmark@3.0.0-alpha.0
- @react-aria/link@3.3.1
- @react-aria/list@3.0.0-beta.0
- @react-aria/listbox@3.5.1
- @react-aria/menu@3.5.1
- @react-aria/meter@3.2.1
- @react-aria/numberfield@3.2.1
- @react-aria/overlays@3.9.1
- @react-aria/progress@3.2.1
- @react-aria/radio@3.2.1
- @react-aria/searchfield@3.3.1
- @react-aria/select@3.7.1
- @react-aria/selection@3.9.1
- @react-aria/separator@3.2.1
- @react-aria/slider@3.1.1
- @react-aria/spinbutton@3.1.1
- @react-aria/switch@3.2.1
- @react-aria/tabs@3.2.1
- @react-aria/tag@3.0.0-alpha.7
- @react-aria/textfield@3.6.1
- @react-aria/toggle@3.3.1
- @react-aria/tooltip@3.2.1
- @react-aria/utils@3.13.1
- @react-aria/virtualizer@3.4.1
- @react-aria/visually-hidden@3.3.1
- @react-spectrum/accordion@3.0.0-alpha.10
- @react-spectrum/actionbar@3.0.0-alpha.10
- @react-spectrum/actiongroup@3.5.1
- @react-spectrum/autocomplete@3.0.0-alpha.8
- @react-spectrum/avatar@3.0.0-alpha.7
- @react-spectrum/breadcrumbs@3.4.1
- @react-spectrum/button@3.8.1
- @react-spectrum/buttongroup@3.3.1
- @react-spectrum/calendar@3.0.0
- @react-spectrum/card@3.0.0-alpha.9
- @react-spectrum/checkbox@3.4.1
- @react-spectrum/color@3.0.0-beta.13
- @react-spectrum/combobox@3.4.1
- @react-spectrum/contextualhelp@3.1.1
- @react-spectrum/datepicker@3.0.0
- @react-spectrum/dialog@3.4.1
- @react-spectrum/divider@3.3.1
- @react-spectrum/dnd@3.0.0-alpha.4
- @react-spectrum/form@3.3.1
- @react-spectrum/icon@3.4.1
- @react-spectrum/illustratedmessage@3.2.1
- @react-spectrum/image@3.2.1
- @react-spectrum/label@3.6.1
- @react-spectrum/layout@3.3.1
- @react-spectrum/link@3.3.1
- @react-spectrum/list@3.0.0-beta.0
- @react-spectrum/listbox@3.6.1
- @react-spectrum/menu@3.7.1
- @react-spectrum/meter@3.2.1
- @react-spectrum/numberfield@3.3.1
- @react-spectrum/overlays@3.6.1
- @react-spectrum/picker@3.6.1
- @react-spectrum/progress@3.2.1
- @react-spectrum/provider@3.4.1
- @react-spectrum/radio@3.2.1
- @react-spectrum/searchfield@3.4.1
- @react-spectrum/searchwithin@3.0.0-alpha.8
- @react-spectrum/slider@3.1.1
- @react-spectrum/statuslight@3.3.1
- @react-spectrum/switch@3.2.1
- @react-spectrum/tabs@3.2.1
- @react-spectrum/tag@3.0.0-alpha.7
- @react-spectrum/text@3.2.1
- @react-spectrum/textfield@3.5.1
- @react-spectrum/theme-dark@3.3.1
- @react-spectrum/theme-default@3.3.1
- @react-spectrum/theme-light@3.2.1
- @react-spectrum/tooltip@3.2.1
- @react-spectrum/utils@3.7.1
- @react-spectrum/view@3.2.1
- @react-spectrum/well@3.2.1
- @react-stately/calendar@3.0.0
- @react-stately/checkbox@3.1.1
- @react-stately/collections@3.4.1
- @react-stately/color@3.0.0
- @react-stately/combobox@3.1.1
- @react-stately/data@3.5.1
- @react-stately/datepicker@3.0.0
- @react-stately/dnd@3.0.0-alpha.8
- @react-stately/grid@3.2.1
- @react-stately/list@3.5.1
- @react-stately/menu@3.3.1
- @react-stately/numberfield@3.1.1
- @react-stately/overlays@3.3.1
- @react-stately/radio@3.4.1
- @react-stately/searchfield@3.2.1
- @react-stately/select@3.2.1
- @react-stately/selection@3.10.1
- @react-stately/slider@3.1.1
- @react-stately/tabs@3.1.1
- @react-stately/toggle@3.3.1
- @react-stately/tooltip@3.1.1
- @react-stately/tree@3.3.1
- @react-stately/virtualizer@3.2.1
- @react-types/accordion@3.0.0-alpha.7
- @react-types/actionbar@3.0.0-alpha.7
- @react-types/actiongroup@3.3.1
- @react-types/autocomplete@3.0.0-alpha.6
- @react-types/avatar@3.0.0-alpha.6
- @react-types/breadcrumbs@3.4.1
- @react-types/button@3.5.1
- @react-types/buttongroup@3.2.1
- @react-types/calendar@3.0.0
- @react-types/card@3.0.0-alpha.7
- @react-types/checkbox@3.3.1
- @react-types/color@3.0.0-beta.10
- @react-types/combobox@3.5.1
- @react-types/contextualhelp@3.1.1
- @react-types/datepicker@3.0.0
- @react-types/dialog@3.4.1
- @react-types/divider@3.2.1
- @react-types/form@3.3.1
- @react-types/grid@3.1.1
- @react-types/illustratedmessage@3.2.1
- @react-types/image@3.2.1
- @react-types/label@3.6.1
- @react-types/layout@3.3.1
- @react-types/link@3.3.1
- @react-types/list@3.0.0-alpha.1
- @react-types/listbox@3.3.1
- @react-types/menu@3.6.1
- @react-types/meter@3.2.1
- @react-types/numberfield@3.3.1
- @react-types/overlays@3.6.1
- @react-types/progress@3.2.1
- @react-types/provider@3.5.1
- @react-types/radio@3.2.1
- @react-types/searchfield@3.3.1
- @react-types/searchwithin@3.0.0-alpha.6
- @react-types/select@3.6.1
- @react-types/shared@3.13.1
- @react-types/slider@3.1.1
- @react-types/statuslight@3.2.1
- @react-types/switch@3.2.1
- @react-types/tabs@3.1.1
- @react-types/tag@3.0.0-alpha.5
- @react-types/text@3.2.1
- @react-types/textfield@3.5.1
- @react-types/tooltip@3.2.1
- @react-types/view@3.2.1
- @react-types/well@3.2.1
- react-aria@3.17.0
- react-stately@3.15.0

----------------------------------------

TITLE: Slider Component Structure in React Aria
DESCRIPTION: Demonstration of the complete structure of a Slider component, showing how multiple thumbs can be implemented and how labels can be associated with specific thumbs.

LANGUAGE: tsx
CODE:
import {Slider, Label, SliderOutput, SliderTrack, SliderThumb} from 'react-aria-components';

<Slider>
  <Label />
  <SliderOutput />
  <SliderTrack>
    <SliderThumb />
    <SliderThumb>
      <Label />
    </SliderThumb>
  </SliderTrack>
</Slider>

----------------------------------------

TITLE: Adding Help Text and Validation State to DateRangePicker
DESCRIPTION: This example shows how to provide help text and validation states to a DateRangePicker. It demonstrates both a valid state with description and an invalid state with an error message.

LANGUAGE: tsx
CODE:
<Flex gap="size-100" wrap>
  <DateRangePicker label="Date range" defaultValue={{start: today(getLocalTimeZone()), end: today(getLocalTimeZone()).add({weeks: 1})}} validationState="valid" description="Select your trip dates." />
  <DateRangePicker label="Date range" validationState="invalid" errorMessage="Empty input is not allowed." />
</Flex>

----------------------------------------

TITLE: Configuring TypeScript for Router Options in React Spectrum
DESCRIPTION: This snippet shows how to configure TypeScript to provide type safety and autocompletion for routerOptions by extending the RouterConfig interface globally with your router's options type.

LANGUAGE: tsx
CODE:
import type {RouterOptions} from 'your-router';

declare module '@adobe/react-spectrum' {
  interface RouterConfig {
    routerOptions: RouterOptions
  }
}

----------------------------------------

TITLE: Importing and Exporting Blog Post Layout in JSX
DESCRIPTION: Imports the BlogPostLayout and Hero components from React Spectrum docs package and exports the BlogPostLayout as the default component for rendering the blog post.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Using the Custom OptionMenuTrigger Component
DESCRIPTION: Demonstrates how to use the custom OptionMenuTrigger component with existing React Aria Components like Button, Popover, and Menu.

LANGUAGE: tsx
CODE:
<OptionMenuTrigger>
  <Button>Save</Button>
  <Popover>
    <Menu>
      <MenuItem>Save</MenuItem>
      <MenuItem>Save as…</MenuItem>
      <MenuItem>Rename…</MenuItem>
      <MenuItem>Delete…</MenuItem>
    </Menu>
  </Popover>
</OptionMenuTrigger>

----------------------------------------

TITLE: Using the Custom OptionMenuTrigger Component
DESCRIPTION: Demonstrates how to use the custom OptionMenuTrigger component with existing React Aria Components like Button, Popover, and Menu.

LANGUAGE: tsx
CODE:
<OptionMenuTrigger>
  <Button>Save</Button>
  <Popover>
    <Menu>
      <MenuItem>Save</MenuItem>
      <MenuItem>Save as…</MenuItem>
      <MenuItem>Rename…</MenuItem>
      <MenuItem>Delete…</MenuItem>
    </Menu>
  </Popover>
</OptionMenuTrigger>

----------------------------------------

TITLE: Creating a Custom Label Compatible with React Aria Components
DESCRIPTION: Demonstrates how to make an existing label component compatible with React Aria Components by consuming from LabelContext and using useContextProps.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Importing Well Component in React Spectrum
DESCRIPTION: Shows how to import the Well component from the React Spectrum library.

LANGUAGE: jsx
CODE:
import {Well} from '@react-spectrum/well';

----------------------------------------

TITLE: Basic Menu Implementation with React Aria Components
DESCRIPTION: A simple example demonstrating how to create a menu with the MenuTrigger, Button, Popover, Menu, and MenuItem components from React Aria Components.

LANGUAGE: tsx
CODE:
import {MenuTrigger, Button, Popover, Menu, MenuItem} from 'react-aria-components';

<MenuTrigger>
  <Button aria-label="Menu">☰</Button>
  <Popover>
    <Menu>
      <MenuItem onAction={() => alert('open')}>Open</MenuItem>
      <MenuItem onAction={() => alert('rename')}>Rename…</MenuItem>
      <MenuItem onAction={() => alert('duplicate')}>Duplicate</MenuItem>
      <MenuItem onAction={() => alert('share')}>Share…</MenuItem>
      <MenuItem onAction={() => alert('delete')}>Delete…</MenuItem>
    </Menu>
  </Popover>
</MenuTrigger>

----------------------------------------

TITLE: Basic Menu Implementation with React Aria Components
DESCRIPTION: A simple example demonstrating how to create a menu with the MenuTrigger, Button, Popover, Menu, and MenuItem components from React Aria Components.

LANGUAGE: tsx
CODE:
import {MenuTrigger, Button, Popover, Menu, MenuItem} from 'react-aria-components';

<MenuTrigger>
  <Button aria-label="Menu">☰</Button>
  <Popover>
    <Menu>
      <MenuItem onAction={() => alert('open')}>Open</MenuItem>
      <MenuItem onAction={() => alert('rename')}>Rename…</MenuItem>
      <MenuItem onAction={() => alert('duplicate')}>Duplicate</MenuItem>
      <MenuItem onAction={() => alert('share')}>Share…</MenuItem>
      <MenuItem onAction={() => alert('delete')}>Delete…</MenuItem>
    </Menu>
  </Popover>
</MenuTrigger>

----------------------------------------

TITLE: Implementing URL Redirection with Meta Refresh in HTML
DESCRIPTION: This code implements a meta refresh tag that redirects to index.html with no delay (0 seconds). The meta refresh is used to maintain backward compatibility with old URLs in the reactspectrum project.

LANGUAGE: html
CODE:
<meta http-equiv="refresh" content="0; url=index.html" />

----------------------------------------

TITLE: Tailwind Config for v3 with React Aria Components
DESCRIPTION: Tailwind configuration for version 3 showing how to add the required plugins to tailwind.config.js. This includes the React Aria Components plugin and the animation plugin with a note about version compatibility.

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components'),
    require('tailwindcss-animate')
  ]
};

----------------------------------------

TITLE: TimeField with HTML Form Integration
DESCRIPTION: Shows how to integrate TimeField with HTML forms using the name prop for server submission.

LANGUAGE: tsx
CODE:
<TimeField label="Meeting time" name="meetingTime" />

----------------------------------------

TITLE: Custom Range Values in RangeSlider
DESCRIPTION: Shows how to customize the minimum and maximum values for a RangeSlider beyond the default 0-100 range.

LANGUAGE: tsx
CODE:
<RangeSlider
  label="Range"
  minValue={50}
  maxValue={150}
  defaultValue={{start: 75, end: 100}} />

----------------------------------------

TITLE: Importing React Spectrum Blog Components in JSX
DESCRIPTION: Imports and exports components from the React Spectrum documentation library to set up the blog post layout.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Starting Storybook for Development
DESCRIPTION: Command to run Storybook for local development, which will be available at http://localhost:9003.

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Validating Partial Number Input with NumberParser in JavaScript
DESCRIPTION: Shows how to validate partial user input for numbers with units using the NumberParser. The isValidPartialNumber method checks if the current input could potentially be completed to form a valid number in the specified format.

LANGUAGE: javascript
CODE:
import {NumberParser} from '@internationalized/number';

let parser = new NumberParser('en-US', {style: 'unit', unit: 'inch'});
parser.isValidPartialNumber('10 '); // -> true
parser.isValidPartialNumber('10 in'); // -> true
parser.isValidPartialNumber('10 i'); // -> false
parser.isValidPartialNumber('10 x'); // -> false

----------------------------------------

TITLE: Basic Link Component Example in React Aria
DESCRIPTION: A simple example of using the Link component from React Aria Components to create a hyperlink that opens in a new tab.

LANGUAGE: tsx
CODE:
import {Link} from 'react-aria-components';

<Link href="https://www.imdb.com/title/tt6348138/" target="_blank">
  The missing link
</Link>

----------------------------------------

TITLE: Blog Post Frontmatter in Markdown
DESCRIPTION: Defines the frontmatter for the blog post, including a description and publication date. The description summarizes the key updates in the February 13, 2024 release.

LANGUAGE: markdown
CODE:
---
description: Welcome to the first release of the new year! We have had a great response to our GA release of React Aria Components. If you haven't tried it out, visit our docs to explore the examples. To help get you started, we have also created a few starter kits. These downloadable starter kits contain beautifully styled implementations of every available component and includes a working storybook. Available in vanilla and Tailwind CSS. We have been busy working on our new Submenu feature which we are excited to release as an alpha. We have also made improvements to our overlay positioning code to better handle pinch zooming and spatial awareness.

date: 2024-02-13
---

----------------------------------------

TITLE: Configuring Focus Trigger for SearchAutocomplete in React Spectrum
DESCRIPTION: Shows how to configure a SearchAutocomplete component to open its menu when focused using the menuTrigger='focus' property. This is useful when immediate options viewing is desired upon focusing the field.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Favorite Animal" menuTrigger="focus">
  <Item>Red Panda</Item>
  <Item>Cat</Item>
  <Item>Dog</Item>
  <Item>Aardvark</Item>
  <Item>Kangaroo</Item>
  <Item>Snake</Item>
</SearchAutocomplete>

----------------------------------------

TITLE: Creating a Custom Input Wrapper Component
DESCRIPTION: Example of creating a wrapper component to customize the Input component within a NumberField.

LANGUAGE: tsx
CODE:
function MyInput(props) {
  return <Input {...props} className="my-input" />
}

----------------------------------------

TITLE: Using Custom Card Layout with Slots
DESCRIPTION: Example of how an end user would use the Card component with custom slots. The user imports custom styles and assigns slots to each child component to position them in the grid.

LANGUAGE: jsx
CODE:
import styles from './CustomCardStyles.css';

<Card slots={styles}>
  <Image slot="preview" />
  <Avatar slot="avatar" />
  <Flex slot="title">
    <Title>Title</Title>
    <Button>More</Button>
  </Flex>
  <Description slot="description">Description</Description>
  <Footer slot="footer">Final remarks</Footer>
</Card>

----------------------------------------

TITLE: Setting Custom First Day of Week in RangeCalendar
DESCRIPTION: This example shows how to customize the first day of the week in a RangeCalendar by setting the firstDayOfWeek prop to 'mon'.

LANGUAGE: tsx
CODE:
<div style={{maxWidth: '100%', overflow: 'auto'}}>
  <RangeCalendar aria-label="Trip dates" firstDayOfWeek="mon" />
</div>

----------------------------------------

TITLE: Importing and Exporting Blog Layout Components in JSX
DESCRIPTION: Imports the BlogLayout and PostListing components from the React Spectrum docs package and exports BlogLayout as the default component. The code includes a JSX comment block with Apache 2.0 license information.

LANGUAGE: jsx
CODE:
{/* Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License. */}

import {BlogLayout, PostListing} from '@react-spectrum/docs';
export default BlogLayout;

----------------------------------------

TITLE: CSS Styling for FieldGroup Component
DESCRIPTION: CSS styles for the FieldGroup component, including padding for the fieldset and styling for the error message.

LANGUAGE: css
CODE:
fieldset {
  padding: 1.5em;
  width: fit-content;
}

.invalid {
  color: var(--invalid-color);
  margin-top: 1em;
  display: block;
}

----------------------------------------

TITLE: Using Dictionary with Remix's getLocalizationScript
DESCRIPTION: Shows how to pass a custom dictionary to the getLocalizationScript function when using Remix for server-side rendering with React Aria components.

LANGUAGE: tsx
CODE:
getLocalizationScript(locale, dictionary)

----------------------------------------

TITLE: Dynamic Class Names Based on Component State in React Aria
DESCRIPTION: Example of using a function for the className prop to dynamically apply different classes based on the component's state, which is useful with utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<MenuItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>
  Item
</MenuItem>

----------------------------------------

TITLE: Creating Links in TreeView Items
DESCRIPTION: This example demonstrates how to make tree items function as links to other pages by using the href prop on TreeViewItem components.

LANGUAGE: tsx
CODE:
<TreeView aria-label="Example tree with links" defaultExpandedKeys={new Set(['bookmarks'])} height="size-2000" maxWidth="size-6000">
  <TreeViewItem id="bookmarks" textValue="Bookmarks">
    <TreeViewItemContent>
      <Text>Bookmarks</Text>
      <Folder />
    </TreeViewItemContent>
    <TreeViewItem href="https://adobe.com/" target="_blank" id="adobe" textValue="Adobe">
      <TreeViewItemContent>
        <Text>Adobe</Text>
        <GlobeOutline />
      </TreeViewItemContent>
    </TreeViewItem>
    <TreeViewItem href="https://google.com/" target="_blank" id="google" textValue="Google">
      <TreeViewItemContent>
        <Text>Google</Text>
        <GlobeOutline />
      </TreeViewItemContent>
    </TreeViewItem>
    <TreeViewItem href="https://nytimes.com/" target="_blank" id="nytimes" textValue="New York Times">
      <TreeViewItemContent>
        <Text>New York Times</Text>
        <GlobeOutline />
      </TreeViewItemContent>
    </TreeViewItem>
  </TreeViewItem>
</TreeView>

----------------------------------------

TITLE: Customizing ProgressBar Scale with Min and Max Values
DESCRIPTION: This example demonstrates how to set custom minimum and maximum values for the ProgressBar, creating a different scale than the default 0-100 range.

LANGUAGE: tsx
CODE:
<ProgressBar label="Loading…" minValue={50} maxValue={150} value={100} />

----------------------------------------

TITLE: 503 Service Unavailable IllustratedMessage Example
DESCRIPTION: Example showing how to display a 503 error message with the Unavailable illustration to indicate the service is unavailable.

LANGUAGE: tsx
CODE:
import Unavailable from '@spectrum-icons/illustrations/Unavailable';

<IllustratedMessage>
  <Unavailable />
  <Heading>Error 503: Service unavailable</Heading>
  <Content>This page isn't working. Try a different page or try again later.</Content>
</IllustratedMessage>

----------------------------------------

TITLE: Targeting DateSegment States with CSS Data Attributes
DESCRIPTION: Demonstrates how to style different states of DateSegment components using data attributes provided by React Aria components.

LANGUAGE: css
CODE:
.react-aria-DateSegment[data-placeholder] {
  /* ... */
}

.react-aria-DateSegment[data-readonly] {
  /* ... */
}

----------------------------------------

TITLE: Rendering useSearchFieldState Documentation
DESCRIPTION: Renders the documentation page for useSearchFieldState, including the description, package information, API details, interface documentation, and a link to an example.

LANGUAGE: jsx
CODE:
# useSearchFieldState

<PageDescription>{docs.exports.useSearchFieldState.description}</PageDescription>

<HeaderInfo
  packageData={packageData}
  componentNames={['useSearchFieldState']} />

## API

<FunctionAPI function={docs.exports.useSearchFieldState} links={docs.links} />

## Interface

<ClassAPI links={docs.links} class={docs.links[docs.exports.useSearchFieldState.return.id]} />

## Example

See the docs for [useSearchField](/react-aria/useSearchField.html) in react-aria for an example of `useSearchField`.

----------------------------------------

TITLE: Implementing Disabled Rows in React Spectrum Table
DESCRIPTION: Shows how to disable specific rows in a table using the disabledKeys prop. Disabled rows are prevented from being selected, and their checkboxes are automatically disabled.

LANGUAGE: tsx
CODE:
// Using the same table as above
<PokemonTable selectionMode="multiple" disabledKeys={[3]} />

----------------------------------------

TITLE: Basic Calendar Component Example
DESCRIPTION: Simple implementation of the Calendar component with an aria-label for accessibility.

LANGUAGE: tsx
CODE:
<Calendar aria-label="Event date" />

----------------------------------------

TITLE: Tailwind CSS Configuration for React Aria Components
DESCRIPTION: Shows how to configure Tailwind CSS to work with React Aria Components, using the tailwindcss-react-aria-components plugin. Includes instructions for both Tailwind v4 and v3.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components')
  ]
};

----------------------------------------

TITLE: Clearing Yarn Cache for Verdaccio Issues
DESCRIPTION: Commands to clear Yarn cache when encountering issues with package installation during Verdaccio testing.

LANGUAGE: bash
CODE:
rm -r ~/.yarn/berry/metadata/npm
yarn cache clean --all

----------------------------------------

TITLE: HTML Form Integration with ColorArea
DESCRIPTION: Shows how to integrate ColorArea with HTML forms using xName and yName props for form submission.

LANGUAGE: tsx
CODE:
<ColorArea xName="red" yName="green" />

----------------------------------------

TITLE: HTML Form Integration with React Aria Slider
DESCRIPTION: Demonstrates how to integrate a Slider component with HTML forms using the name attribute. This enables the slider value to be included in form submissions.

LANGUAGE: tsx
CODE:
<Slider defaultValue={50}>
  <Label>Opacity</Label>
  <SliderOutput />
  <SliderTrack>
    <SliderThumb name="opacity" />
  </SliderTrack>
</Slider>

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default component for the documentation page layout.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Displaying Under Construction Warning in Markdown
DESCRIPTION: A markdown heading and warning about the @react-stately scope being under construction. The warning is emphasized with emoji characters.

LANGUAGE: markdown
CODE:
# @react-stately

⚠️ Under Construction  ⚠️

This folder is for packages in the `@react-stately` scope, which React Hooks that implement shared cross-platform state management for common components.

----------------------------------------

TITLE: Using ButtonGroup with Vertical Orientation in React Spectrum
DESCRIPTION: Example showing how to set a vertical orientation for the ButtonGroup component, which prevents dynamic orientation changes and keeps buttons stacked vertically.

LANGUAGE: tsx
CODE:
<ButtonGroup orientation="vertical">
  <Button variant="secondary">No, thanks</Button>
  <Button variant="secondary">Remind me later</Button>
  <Button variant="primary">Rate Now</Button>
</ButtonGroup>

----------------------------------------

TITLE: Tailwind v3 Configuration for React Aria Components
DESCRIPTION: Shows how to add the tailwindcss-react-aria-components plugin to Tailwind v3 configuration file.

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components')
  ]
};

----------------------------------------

TITLE: Parsing ZonedDateTime for DateRangePicker in React
DESCRIPTION: This snippet demonstrates how to use parseZonedDateTime to create ZonedDateTime objects from ISO strings with explicit time zones for a DateRangePicker component.

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

<MyDateRangePicker
  label="Date range"
  defaultValue={{
    start: parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]'),
    end: parseZonedDateTime('2022-11-08T11:15[America/Los_Angeles]')
  }} />

----------------------------------------

TITLE: Importing and Exporting React Spectrum Blog Components in JSX
DESCRIPTION: Imports the BlogPostLayout and Hero components from the React Spectrum docs package and exports the BlogPostLayout as the default component for this file.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Running ESLint for Code Linting
DESCRIPTION: Command to run ESLint for checking code quality and enforcing style guidelines.

LANGUAGE: bash
CODE:
yarn lint

----------------------------------------

TITLE: Customizing Drop Indicators in React Spectrum ListBox
DESCRIPTION: This example demonstrates how to create a custom drop indicator using the renderDropIndicator function. This allows customizing the DOM structure and CSS classes applied to the drop indicator.

LANGUAGE: tsx
CODE:
import {DropIndicator} from 'react-aria-components';

function Example() {
  let { dragAndDropHooks } = useDragAndDrop({
    // ...
    renderDropIndicator(target) {
      return (
        <DropIndicator
          target={target}
          className={({isDropTarget}) => `my-drop-indicator ${isDropTarget ? 'active' : ''}`} />
      );
    }
  });

  // ...
}

----------------------------------------

TITLE: Implementing a Clear Button for DateRangePicker Using State Context
DESCRIPTION: Implementation of a DateRangePickerClearButton component that accesses the picker's state through DateRangePickerStateContext to clear the selected value.

LANGUAGE: tsx
CODE:
import {DateRangePickerStateContext} from 'react-aria-components';

function DateRangePickerClearButton() {
  let state = React.useContext(DateRangePickerStateContext)!;
  return (
    <Button
      // Don't inherit default Button behavior from DateRangePicker.
      slot={null}
      className="clear-button"
      aria-label="Clear"
      onPress={() => state.setValue(null)}>
      ✕
    </Button>
  );
}

<DateRangePicker defaultValue={{start: parseDate('2023-07-12'), end: parseDate('2023-08-04')}}>
  <Label>Trip dates</Label>
  <Group>
    <DateInput slot="start">
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <span aria-hidden="true">–</span>
    <DateInput slot="end">
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <DateRangePickerClearButton />
    <Button>▼</Button>
  </Group>
  <Popover>
    <Dialog>
      <RangeCalendar>
        <header>
          <Button slot="previous">◀</Button>
          <Heading />
          <Button slot="next">▶</Button>
        </header>
        <CalendarGrid>
          {date => <CalendarCell date={date} />}
        </CalendarGrid>
      </RangeCalendar>
    </Dialog>
  </Popover>
</DateRangePicker>

----------------------------------------

TITLE: Creating Disabled Disclosure Component in React
DESCRIPTION: Example of a Disclosure component that is disabled using the isDisabled prop, preventing user interaction.

LANGUAGE: tsx
CODE:
<MyDisclosure title="Introduction to Knitting" isDisabled>
  Details about knitting here
</MyDisclosure>

----------------------------------------

TITLE: Initializing User for ARIA pattern testing in React Spectrum
DESCRIPTION: This snippet demonstrates how to initialize a User object from @react-spectrum/test-utils and create a tester for a Table component. The User object requires an interaction type and a timer advancement function, which is used for simulating interactions in tests.

LANGUAGE: typescript
CODE:
// YourTest.test.ts
import {screen} from '@testing-library/react';
import {User} from '@react-spectrum/test-utils';

// Provide whatever method of advancing timers you use in your test, this example assumes Jest with fake timers.
// 'interactionType' specifies what mode of interaction should be simulated by the tester
// 'advanceTimer' is used by the tester to advance the timers in the tests for specific interactions (e.g. long press)
let testUtilUser = new User({interactionType: 'mouse', advanceTimer: jest.advanceTimersByTime});
// ...

it('my test case', async function () {
  // Render your test component/app
  render();
  // Initialize the table tester via providing the 'Table' pattern name and the root element of said table
  let table = testUtilUser.createTester('Table', {root: screen.getByTestId('test_table')});

  // ...
});

----------------------------------------

TITLE: Creating an Emphasized RadioGroup in React Spectrum
DESCRIPTION: This example shows how to create an emphasized RadioGroup with Radio buttons. The isEmphasized prop is applied to the RadioGroup to give the radio buttons a more prominent appearance, making them more visually distinct in the interface.

LANGUAGE: tsx
CODE:
<RadioGroup label="Favorite avatar" defaultValue="dragon" isEmphasized>
  <Radio value="wizard">Wizard</Radio>
  <Radio value="dragon">Dragon</Radio>
</RadioGroup>

----------------------------------------

TITLE: Importing Documentation Resources for useColorAreaState
DESCRIPTION: Imports necessary documentation components, hook documentation data, and package information for rendering the useColorAreaState documentation page.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/color';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/color/package.json';

----------------------------------------

TITLE: Styling Disclosure Components with CSS
DESCRIPTION: CSS styling for Disclosure components, including animation for the disclosure chevron and proper panel spacing.

LANGUAGE: css
CODE:
.react-aria-Disclosure {
  .react-aria-Button[slot=trigger] {
    background: none;
    border: none;
    box-shadow: none;
    font-weight: bold;
    font-size: 16px;
    display: flex;
    align-items: center;
    gap: 8px;

    svg {
      rotate: 0deg;
      transition: rotate 200ms;
      width: 12px;
      height: 12px;
      fill: none;
      stroke: currentColor;
      stroke-width: 3px;
    }
  }

  &[data-expanded] .react-aria-Button[slot=trigger] svg {
    rotate: 90deg;
  }
}

.react-aria-DisclosurePanel {
  margin-left: 32px;
}

----------------------------------------

TITLE: Initializing Modal Polyfill with Custom Selector in JavaScript
DESCRIPTION: Sets up the modal polyfill by watching a specific DOM element identified by a CSS selector. This is useful when modals are rendered within a specific container rather than directly in the body.

LANGUAGE: javascript
CODE:
watchModals('.my-modal-root');

----------------------------------------

TITLE: Using Custom Components within React Aria Menu
DESCRIPTION: Example of using a custom keyboard component within a Menu that's compatible with React Aria Components thanks to context integration.

LANGUAGE: tsx
CODE:
<Menu>
  <MenuItem textValue="Paste">
    <Text slot="label">Paste</Text>
    <MyKeyboard>⌘V</MyKeyboard>
  </MenuItem>
  {/* ... */}
</Menu>

----------------------------------------

TITLE: Setting Default Checkbox Selection in React Aria
DESCRIPTION: Example showing how to set the default selected state of a checkbox using the defaultSelected prop.

LANGUAGE: tsx
CODE:
<MyCheckbox defaultSelected>Subscribe</MyCheckbox>

----------------------------------------

TITLE: Importing Documentation Dependencies
DESCRIPTION: Imports various documentation-related components and data including the API docs for the searchfield package, documentation display components, and package metadata.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/searchfield';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/searchfield/package.json';

----------------------------------------

TITLE: Using routerOptions with React Aria Link Components
DESCRIPTION: Shows how to pass router-specific options to navigation links using the routerOptions prop, which is forwarded to the router's navigate function.

LANGUAGE: tsx
CODE:
<MenuItem href="/login" routerOptions={{replace: true}}>{/* ...*/}</MenuItem>

----------------------------------------

TITLE: Configuring Web Crawler Access with robots.txt
DESCRIPTION: This robots.txt configuration allows all web crawlers complete access to the website. It includes a reference to the robots.txt standard and uses the wildcard User-agent with no Disallow directives to grant full access.

LANGUAGE: robots.txt
CODE:
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

----------------------------------------

TITLE: ActionMenu with Disabled Items
DESCRIPTION: Demonstrates how to selectively disable specific menu items using the disabledKeys prop while keeping the menu itself interactive.

LANGUAGE: tsx
CODE:
<ActionMenu
  items={[
    {name: 'Undo', id: 'undo'},
    {name: 'Redo', id: 'redo'},
    {name: 'Cut', id: 'cut'},
    {name: 'Copy', id: 'copy'},
    {name: 'Paste', id: 'paste'}
  ]}
  disabledKeys={['redo', 'paste']}>
  {item => <Item>{item.name}</Item>}
</ActionMenu>

----------------------------------------

TITLE: Styling Menu Items with CSS Grid for Text Slots
DESCRIPTION: CSS styling for MenuItems that uses grid areas to position label, description, and keyboard shortcut elements in a structured layout.

LANGUAGE: css
CODE:
.react-aria-MenuItem {
  [slot=label] {
    font-weight: bold;
    grid-area: label;
  }

  [slot=description] {
    font-size: small;
    grid-area: desc;
  }

  kbd {
    grid-area: kbd;
    font-family: monospace;
    text-align: end;
  }
}

----------------------------------------

TITLE: Controlled and Uncontrolled Slider Value Example
DESCRIPTION: Example demonstrating the difference between controlled and uncontrolled Slider components, using React state for the controlled version.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState(25);
  return (
    <Flex gap="size-150" wrap>
      <Slider
        label="Cookies to buy (Uncontrolled)"
        defaultValue={25} />
      <Slider
        label="Cookies to buy (Controlled)"
        value={value}
        onChange={setValue} />
    </Flex>
  );
}

----------------------------------------

TITLE: StatusLight Component with Semantic Colors in React Spectrum
DESCRIPTION: Demonstrates StatusLight components using semantic color variants for different statuses such as neutral, positive, notice, negative, and info.

LANGUAGE: tsx
CODE:
<StatusLight variant="neutral">Gray: Archived, Deleted, Paused, Draft, Not Started, Ended</StatusLight>
<StatusLight variant="positive">Green: Approved, Complete, Success, New, Purchased, Licensed</StatusLight>
<StatusLight variant="notice">Orange: Needs Approval, Pending, Scheduled, Syncing, Indexing, Processing</StatusLight>
<StatusLight variant="negative">Red: Error, Alert, Rejected, Failed</StatusLight>
<StatusLight variant="info">Blue: Active, In Use, Live, Published</StatusLight>

----------------------------------------

TITLE: Copying Multiple Items with Multiple Data Formats in React
DESCRIPTION: Example showing how to copy multiple items, each with representations in different formats (plain text, HTML, and a custom app-specific format). This allows for rich data transfer between applications.

LANGUAGE: tsx
CODE:
function Copyable() {
  let {clipboardProps} = useClipboard({
    getItems() {
      return [{
        'text/plain': 'hello world',
        'text/html': '<strong>hello world</strong>',
        'my-app-custom-type': JSON.stringify({
          message: 'hello world',
          style: 'bold'
        })
      }, {
        'text/plain': 'foo bar',
        'text/html': '<em>foo bar</em>',
        'my-app-custom-type': JSON.stringify({
          message: 'foo bar',
          style: 'italic'
        })
      }];
    }
  });

  return (
    <div role="textbox" tabIndex={0} {...clipboardProps}>
      <div>
        <div><strong>hello world</strong></div>
        <div><em>foo bar</em></div>
      </div>
      <kbd>⌘C</kbd>
    </div>
  );
}

----------------------------------------

TITLE: Installing @react-stately/disclosure Package Reference
DESCRIPTION: Package name reference for the @react-stately/disclosure component from the react-spectrum library. This would be used for installation via npm or yarn.

LANGUAGE: markdown
CODE:
# @react-stately/disclosure

----------------------------------------

TITLE: Installing @react-stately/toast Package
DESCRIPTION: Reference to the @react-stately/toast package which is part of the React Spectrum library. This is a markdown link to the main repository.

LANGUAGE: markdown
CODE:
# @react-stately/toast

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Importing and Exporting Blog Post Layout Components in React
DESCRIPTION: Imports BlogPostLayout and Hero components from the @react-spectrum/docs package and sets the default export to BlogPostLayout. This is the setup code for the blog post page structure.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: ColorSwatch with Custom Labeling
DESCRIPTION: Example showing how to add custom accessibility labels to a ColorSwatch component.

LANGUAGE: tsx
CODE:
<ColorSwatch color="#f00" aria-label="Background color" colorName="Fire truck red" />

----------------------------------------

TITLE: CSS Styling for ColorArea and ColorThumb Components
DESCRIPTION: CSS styles defining the appearance of ColorArea and ColorThumb components. The ColorArea is given specific dimensions and border radius, while the ColorThumb has styling for its appearance and focus state.

LANGUAGE: css
CODE:
.react-aria-ColorArea {
  width: 192px;
  height: 192px;
  border-radius: 4px;
  flex-shrink: 0;
}

.react-aria-ColorThumb {
  border: 2px solid white;
  box-shadow: 0 0 0 1px black, inset 0 0 0 1px black;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  box-sizing: border-box;

  &[data-focus-visible] {
    width: 24px;
    height: 24px;
  }
}

----------------------------------------

TITLE: Running Jest Timers After Each Test
DESCRIPTION: A Jest afterEach hook that runs all timers to completion, helping avoid leftover transitions or timeouts that a component may have set up during its lifecycle.

LANGUAGE: tsx
CODE:
afterEach(() => {
  act(() => jest.runAllTimers());
});

----------------------------------------

TITLE: Read-only SearchField
DESCRIPTION: Shows how to create a read-only SearchField where the content is visible and can be copied but not edited.

LANGUAGE: tsx
CODE:
<SearchField label="Search" defaultValue="abc@adobe.com" isReadOnly />

----------------------------------------

TITLE: Primary Variant Link in React Spectrum
DESCRIPTION: Demonstrates the primary variant styling for a Link component within a paragraph.

LANGUAGE: tsx
CODE:
<p>Would you like to <Link variant="primary">learn more</Link> about this fine component?</p>

----------------------------------------

TITLE: Creating Custom Tooltip Triggers with Focusable Component
DESCRIPTION: Demonstrates how to create custom tooltip triggers using the Focusable component to wrap non-standard elements.

LANGUAGE: tsx
CODE:
import {Focusable} from 'react-aria-components';

<TooltipTrigger>
  <Focusable>
    <span role="button">Custom trigger</span>
  </Focusable>
  <MyTooltip>Tooltip</MyTooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Installing React Spectrum S2 Icon Builder Package Reference
DESCRIPTION: Reference to the @react-spectrum/s2-icon-builder package which is part of the React Spectrum library. This package is likely used for generating and managing icon components within the S2 design system.

LANGUAGE: markdown
CODE:
# @react-spectrum/s2-icon-builder

----------------------------------------

TITLE: Importing CSS for Tailwind Configuration in React Component
DESCRIPTION: Imports the global Tailwind CSS styles required for the Wi-Fi Switch component.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Implementing Single Selection Mode in TableView
DESCRIPTION: Example of using single selection mode with the PokemonTable component, which restricts users to selecting only one row at a time.

LANGUAGE: tsx
CODE:
// Using the same table as above
<PokemonTable selectionMode="single" />

----------------------------------------

TITLE: Defining Interfaces for ProgressBar, Meter, and ProgressCircle in TypeScript
DESCRIPTION: TypeScript interfaces defining the props for ProgressBar, ProgressCircle, and Meter components. The interfaces include properties for values, sizes, labels, formatting options, and visual variants.

LANGUAGE: typescript
CODE:
interface ProgressBar {
  value?: number,
  minValue?: number,
  maxValue?: number,
  size?: 'S' | 'L',
  label?: ReactNode,
  'aria-label'?: string,
  labelPosition?: 'top' | 'side',
  showValueLabel?: boolean, // true by default if label, false by default if not
  formatOptions?: Intl.NumberFormatOptions, // defaults to formatting as a percentage.
  valueLabel?: ReactNode, // custom value label (e.g. 1 of 4)
  variant?: 'overBackground',
  isIndeterminate?: boolean
}

interface ProgressCircle {
  value?: number,
  minValue?: number,
  maxValue?: number,
  size?: 'S' | 'M' | 'L',
  variant?: 'overBackground',
  isCentered?: boolean,
  isIndeterminate?: boolean
}

interface Meter extends ProgressBar {
  variant: 'positive' | 'warning' | 'critical'
}

----------------------------------------

TITLE: Styling Drop Indicators in ListBox with CSS
DESCRIPTION: CSS styling for the drop indicator that appears between ListBox items. The [data-drop-target] attribute selector is used to apply visual feedback when the indicator becomes active.

LANGUAGE: css
CODE:
.react-aria-DropIndicator[data-drop-target] {
  outline: 1px solid var(--highlight-background);
}

----------------------------------------

TITLE: Creating Custom Components with Context
DESCRIPTION: Example of using CheckboxContext to build a custom composite component that adds a description to a checkbox, properly associated with aria-describedby.

LANGUAGE: tsx
CODE:
import {CheckboxContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface CheckboxDescriptionProps {
  children?: React.ReactNode,
  description?: string
}

function CheckboxDescription({children, description}: CheckboxDescriptionProps) {
  let descriptionId = useId();
  return (
    <div>
      <CheckboxContext.Provider value={{'aria-describedby': descriptionId}}>
        {children}
      </CheckboxContext.Provider>
      <small id={descriptionId}>{description}</small>
    </div>
  );
}

<CheckboxDescription description="You will receive our newsletter once per week. Unsubscribe at any time.">
  <MyCheckbox defaultSelected>Subscribe</MyCheckbox>
</CheckboxDescription>

----------------------------------------

TITLE: Calendar Component with Controlled and Uncontrolled Values
DESCRIPTION: Demonstrates both controlled and uncontrolled value patterns for the Calendar component, using the parseDate function to create date objects.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState(parseDate('2020-02-03'));

  return (
    <Flex gap="size-300" wrap>
      <Calendar
        aria-label="Date (uncontrolled)"
        defaultValue={parseDate('2020-02-03')} />
      <Calendar
        aria-label="Date (controlled)"
        value={value}
        onChange={setValue} />
    </Flex>
  );
}

----------------------------------------

TITLE: ListView with Selection Mode and Default Selected Keys
DESCRIPTION: Example showing how to implement a ListView with multiple selection enabled and default selected keys. The selected keys must match the key prop of the Items.

LANGUAGE: tsx
CODE:
<ListView maxWidth="size-6000" selectionMode="multiple" defaultSelectedKeys={["Charizard", "Venusaur"]} aria-label="ListView multiple selection example">
  <Item key="Charizard">
    Charizard
  </Item>
  <Item key="Blastoise">
    Blastoise
  </Item>
  <Item key="Venusaur">
    Venusaur
  </Item>
  <Item key="Pikachu">
    Pikachu
  </Item>
</ListView>

----------------------------------------

TITLE: Defining Markdown Frontmatter for Documentation
DESCRIPTION: Sets up the markdown frontmatter with category and keywords metadata for the documentation page.

LANGUAGE: markdown
CODE:
---
category: Collections
keywords: [lists, state]
---

----------------------------------------

TITLE: Initializing User and Creating ARIA Pattern Testers in TypeScript
DESCRIPTION: This snippet demonstrates how to import and initialize the User object from @react-aria/test-utils and create a pattern tester for testing ARIA components. It shows configuration for interaction type and timer advancement, which is useful for simulating different user behaviors and time-dependent interactions.

LANGUAGE: typescript
CODE:
// YourTest.test.ts
import {screen} from '@testing-library/react';
import {User} from '@react-aria/test-utils';

// Provide whatever method of advancing timers you use in your test, this example assumes Jest with fake timers.
// 'interactionType' specifies what mode of interaction should be simulated by the tester
// 'advanceTimer' is used by the tester to advance the timers in the tests for specific interactions (e.g. long press)
let testUtilUser = new User({interactionType: 'mouse', advanceTimer: jest.advanceTimersByTime});
// ...

it('my test case', async function () {
  // Render your test component/app
  render();
  // Initialize the table tester via providing the 'Table' pattern name and the root element of said table
  let table = testUtilUser.createTester('Table', {root: screen.getByTestId('test_table')});

  // ...
});

----------------------------------------

TITLE: Implementing Disabled ColorArea in React
DESCRIPTION: Shows how to create a disabled color area component using the isDisabled prop, which prevents the color picker thumb from being focused or dragged.

LANGUAGE: tsx
CODE:
<MyColorArea defaultValue="#ff0" isDisabled />

----------------------------------------

TITLE: ComboBox with Optional Label Indicator
DESCRIPTION: Example showing how to configure a ComboBox with an "optional" label indicator, using only the necessityIndicator="label" prop without the isRequired prop.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal" necessityIndicator="label">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Rendering React Application with ExampleApp Component
DESCRIPTION: Imports and renders the ExampleApp component into a root element with ID 'example-app'. This demonstrates the basic setup for a React Aria application.

LANGUAGE: tsx
CODE:
import {ExampleApp} from './home/ExampleApp';

ReactDOM.createRoot(document.getElementById('example-app')).render(<ExampleApp />);

----------------------------------------

TITLE: Individually Disabled Toggle Buttons Example
DESCRIPTION: Example showing how to disable individual toggle buttons within a group by applying the isDisabled prop to specific buttons.

LANGUAGE: tsx
CODE:
<ToggleButtonGroup>
  <ToggleButton id="grid">Grid view</ToggleButton>
  <ToggleButton id="list" isDisabled>List view</ToggleButton>
  <ToggleButton id="gallery">Gallery view</ToggleButton>
</ToggleButtonGroup>

----------------------------------------

TITLE: Styling HTML Elements with Spectrum 2 Style Macros
DESCRIPTION: Example of using style macros with regular HTML elements in JSX. The style macro is applied to the className prop.

LANGUAGE: jsx
CODE:
<div className={style({marginStart: 16})}>
  Hello Spectrum 2!
</div>

----------------------------------------

TITLE: Creating a Disabled TextField
DESCRIPTION: Example showing how to disable a TextField using the isDisabled prop, preventing user interaction with the input.

LANGUAGE: TSX
CODE:
<TextField label="Email" isDisabled />

----------------------------------------

TITLE: Moving Items within a List in React
DESCRIPTION: Shows how to change the position of an item within a list using the move method, which takes an item key and the target index position.

LANGUAGE: tsx
CODE:
list.move('Snake', 0);

----------------------------------------

TITLE: Importing and Setting Up Layout for React Spectrum Docs
DESCRIPTION: Sets up the documentation layout by importing and exporting the Layout component from @react-spectrum/docs.

LANGUAGE: tsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Installing @react-types/progress Package Reference
DESCRIPTION: Reference to the @react-types/progress package, which is a component of the React Spectrum library. The package likely contains TypeScript type definitions for progress components.

LANGUAGE: markdown
CODE:
# @react-types/progress

----------------------------------------

TITLE: ColorField with Help Text and Validation
DESCRIPTION: Shows how to add description and error messages to ColorField components with different validation states.

LANGUAGE: tsx
CODE:
<Flex gap="size-100" wrap>
  <ColorField label="Color" defaultValue="#abc" validationState="valid" description="Enter your favorite color." />
  <ColorField label="Color" validationState="invalid" errorMessage="Empty input is not allowed." />
</Flex>

----------------------------------------

TITLE: Defining ToastProps and ToastAria Interfaces in TypeScript for React Spectrum
DESCRIPTION: TypeScript interfaces defining the props and ARIA attributes for the Toast component in React Spectrum v3. ToastProps includes options for variant, dismissal behavior, and action buttons, while ToastAria provides accessibility attributes for toast elements.

LANGUAGE: typescript
CODE:
interface ToastProps {
  // Variant of the toast, default is 'neutral'.
  variant?: 'neutral' | 'informative' | 'positive' | 'negative',

  // Whether or not the toast is closable via a 'x' button. Note: this is a carry over from previous versions.
  isDismissible?: boolean,

  // Callback when toast is dismissed.
  onDismiss? () => void,

  // Sets how long the toast remains on screen before being automatically dismissed. If undefined, the toast remains indefinitely.
  autoDismissDuration? number,

  // The contents of the toast.
  children: ReactNode,

  // The label for the optional action button.
  actionLabel?: ReactNode,

  // Callback triggered when toast action button is pressed.
  onAction? () => void,

  // Unique identifier for the toast, autogenerated if not provided by the user.
  key?: string,

  // Callback  triggered when the toast has fully transitioned out
  onExit?: () => void
}

interface ToastAria {
  // Props for the Toast div (e.g. role="alert").
  toastProps: HTMLAttributes<HTMLDivElement>,

  // Props for close button (e.g. aria-label = "close", press handlers that call props.onDismiss).
  closeButtonProps: ButtonHTMLAttributes<HTMLButtonElement>,

  // Props for action button (e.g. press handlers that call props.onAction)
  actionButtonProps: ButtonHTMLAttributes<HTMLButtonElement>
}

function useToast(props: ToastProps, state: ToastState): ToastAria;

----------------------------------------

TITLE: Styling TimeField Components with CSS
DESCRIPTION: CSS styles for TimeField and related components, including styling for different states like focus, hover, and placeholder text. The styles provide visual feedback and ensure accessibility.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-TimeField {
  color: var(--text-color);
  display: flex;
  flex-direction: column;
}

.react-aria-DateInput {
  display: inline;
  padding: 4px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: var(--field-background);
  width: fit-content;
  min-width: 150px;
  white-space: nowrap;
  forced-color-adjust: none;

  &[data-focus-within] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: -1px;
  }
}

.react-aria-DateSegment {
  padding: 0 2px;
  font-variant-numeric: tabular-nums;
  text-align: end;
  color: var(--text-color);

  &[data-type=literal] {
    padding: 0;
  }

  &[data-placeholder] {
    color: var(--text-color-placeholder);
    font-style: italic;
  }

  &:focus {
    color: var(--highlight-foreground);
    background: var(--highlight-background);
    outline: none;
    border-radius: 4px;
    caret-color: transparent;
  }
}

----------------------------------------

TITLE: Importing Documentation Resources for ReactSpectrum Collections
DESCRIPTION: Imports various documentation resources for collection-related components and interfaces from multiple packages within the ReactSpectrum ecosystem.

LANGUAGE: JavaScript
CODE:
import docs from 'docs:@react-stately/collections';
import collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';
import treeDocs from 'docs:@react-stately/tree';
import listDocs from 'docs:@react-stately/list';
import listboxDocs from 'docs:@react-aria/listbox';
import selectDocs from 'docs:@react-aria/select';
import {HeaderInfo, TypeContext, InterfaceType, ClassAPI, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';

----------------------------------------

TITLE: Implementing LocalizedStringProvider in Next.js App Router
DESCRIPTION: Example of adding the LocalizedStringProvider component to a Next.js App Router layout component. This injects the required language strings into the initial HTML and passes the locale to the client.

LANGUAGE: tsx
CODE:
// app/[lang]/layout.tsx
import {LocalizedStringProvider} from 'react-aria-components/i18n';

export default function RootLayout(
  {children, params: {lang}}:
  {children: React.ReactNode, params: {lang: string}}
) {
  return (
    <html lang={lang}>
      <body>
        <LocalizedStringProvider locale={lang} />
        {children}
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Dialog with Hero Image
DESCRIPTION: An example showing how to add a hero image to a Dialog using the 'hero' slot, providing a visual element at the top of the dialog.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Upload</ActionButton>
  {(close) => (
    <Dialog>
      <Image slot="hero" alt="" src="https://i.imgur.com/Z7AzH2c.png" objectFit="cover" />
      <Heading>Upload file</Heading>
      <Divider />
      <Content>Are you sure you want to upload this file?</Content>
      <ButtonGroup>
        <Button variant="secondary" onPress={close}>Cancel</Button>
        <Button variant="accent" onPress={close} autoFocus>Confirm</Button>
      </ButtonGroup>
    </Dialog>
  )}
</DialogTrigger>

----------------------------------------

TITLE: Notice Variant InlineAlert Example in React Spectrum
DESCRIPTION: Shows how to use the notice variant for important but non-critical information that needs user attention.

LANGUAGE: tsx
CODE:
<InlineAlert variant="notice">
  <Heading>Update payment information</Heading>
  <Content>The saved credit card for your account has expired. Update your payment information to complete the purchase.</Content>
</InlineAlert>

----------------------------------------

TITLE: Importing React Aria hooks from different sources
DESCRIPTION: Examples showing how to import React Aria hooks from either the monopackage or individual packages.

LANGUAGE: tsx
CODE:
// Monopackage
import {useButton} from 'react-aria';

LANGUAGE: tsx
CODE:
// Individual packages
import {useButton} from '@react-aria/button';

----------------------------------------

TITLE: Defining Documentation Metadata
DESCRIPTION: Sets metadata for the documentation page, including category and keywords for search and organization purposes.

LANGUAGE: jsx
CODE:
---
category: Forms
keywords: [search field, input, state]
---

----------------------------------------

TITLE: Pre-selecting Items Before Loading with useAsyncList in React
DESCRIPTION: Example showing how to pre-select items before data is loaded from the server using the initialSelectedKeys option in useAsyncList.

LANGUAGE: tsx
CODE:
let list = useAsyncList({
  initialSelectedKeys: ['foo', 'bar'],
  async load({signal}) {
    // Same load function as before
  }
});

----------------------------------------

TITLE: Setting Hour Cycle Format in DateField
DESCRIPTION: Shows how to override the default hour format in DateField. The hourCycle prop can force 12 or 24 hour time format regardless of the user's locale settings.

LANGUAGE: tsx
CODE:
<DateField
  label="Appointment time"
  granularity="minute"
  hourCycle={24} />

----------------------------------------

TITLE: Simulating Long Press in React Spectrum Components
DESCRIPTION: Code example demonstrating how to simulate a long press interaction using installPointerEvent and triggerLongPress utilities from @react-spectrum/test-utils, or manually with fireEvent.

LANGUAGE: tsx
CODE:
import {fireEvent} from '@testing-library/react';
import {installPointerEvent, triggerLongPress} from '@react-spectrum/test-utils';
installPointerEvent();

// In test case
let button = getByRole('button');

// With fireEvent and specific timing control
fireEvent.pointerDown(el, {pointerType: 'touch'});
act(() => jest.advanceTimersByTime(800));
fireEvent.up(el, {pointerType: 'touch'});

// With triggerLongPress
triggerLongPress(button);

----------------------------------------

TITLE: CSS Styling for Breadcrumbs Component
DESCRIPTION: CSS styles for the Breadcrumbs component, including styling for links, separators, hover states, and focus indicators.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Breadcrumbs {
  display: flex;
  align-items: center;
  list-style: none;
  margin: 0;
  padding: 0;
  font-size: 18px;
  color: var(--text-color);

  .react-aria-Breadcrumb:not(:last-child)::after {
    content: '›';
    content: '›' / '';
    alt: ' ';
    padding: 0 5px;
  }

  .react-aria-Link {
    color: var(--link-color-secondary);
    outline: none;
    position: relative;
    text-decoration: none;
    cursor: pointer;

    &[data-hovered] {
      text-decoration: underline;
    }

    &[data-current] {
      color: var(--text-color);
      font-weight: bold;
    }

    &[data-focus-visible]:after {
      content: '';
      position: absolute;
      inset: -2px -4px;
      border-radius: 6px;
      border: 2px solid var(--focus-ring-color);
    }
  }
}

----------------------------------------

TITLE: Creating a Disabled ColorWheel Component
DESCRIPTION: Example showing how to create a disabled color wheel using the isDisabled prop, which prevents user interaction and applies disabled styling.

LANGUAGE: tsx
CODE:
<ColorWheel defaultValue="hsl(80, 100%, 50%)" isDisabled />

----------------------------------------

TITLE: Custom Labeling for Color Sliders in React Spectrum
DESCRIPTION: Examples of customizing labels for color sliders, either by providing children to the Label component or by using the aria-label prop for more specific labeling.

LANGUAGE: tsx
CODE:
<ColorSlider channel="hue" defaultValue="hsl(0, 100%, 50%)">
  <Label>Background Hue</Label>
  <SliderOutput />
  <SliderTrack>
    <ColorThumb />
  </SliderTrack>
</ColorSlider>
<ColorSlider
  aria-label="Background Saturation"
  channel="saturation"
  defaultValue="hsl(0, 100%, 50%)">
  <SliderTrack>
    <ColorThumb />
  </SliderTrack>
</ColorSlider>

----------------------------------------

TITLE: ColorSwatchPicker with Full Rounding
DESCRIPTION: Shows how to apply full corner rounding to the ColorSwatchPicker, recommended only for single-row displays.

LANGUAGE: tsx
CODE:
<ColorSwatchPicker rounding="full">
  <ColorSwatch color="#A00" />
  <ColorSwatch color="#f80" />
  <ColorSwatch color="#080" />
  <ColorSwatch color="#08f" />
</ColorSwatchPicker>

----------------------------------------

TITLE: Tailwind CSS v3 Configuration for React Aria Components
DESCRIPTION: JavaScript configuration for adding the tailwindcss-react-aria-components plugin to Tailwind CSS v3 in the tailwind.config.js file.

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components')
  ]
};

----------------------------------------

TITLE: Importing Virtualizer Component in React
DESCRIPTION: Demonstrates how to import the Layout component and export it as the default export.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Using CSS Variables with Tailwind CSS Arbitrary Values
DESCRIPTION: Example of accessing React Aria component CSS variables in Tailwind CSS using the arbitrary value syntax.

LANGUAGE: jsx
CODE:
<Popover className="w-[--trigger-width]">
  {/* ... */}
</Popover>

----------------------------------------

TITLE: Using CSS Variables with Tailwind CSS Arbitrary Values
DESCRIPTION: Example of accessing React Aria component CSS variables in Tailwind CSS using the arbitrary value syntax.

LANGUAGE: jsx
CODE:
<Popover className="w-[--trigger-width]">
  {/* ... */}
</Popover>

----------------------------------------

TITLE: Basic Meter Component Implementation
DESCRIPTION: Demonstrates a simple implementation of the Meter component with a label and value property.

LANGUAGE: tsx
CODE:
<Meter label="Storage space" value={35} />

----------------------------------------

TITLE: Creating Link-based Menu Items in React Spectrum
DESCRIPTION: This example shows how to implement menu items that function as links by updating the MenuItem component to render an <a> element when an href prop is passed. The menu is rendered as a <div> instead of a <ul> for valid HTML structure.

LANGUAGE: tsx
CODE:
function MenuItem({item, state}) {
  // Get props for the menu item element and child elements
  let ref = React.useRef(null);
  let {menuItemProps} = useMenuItem({key: item.key}, state, ref);
  /*- begin highlight -*/
  let ElementType: React.ElementType = item.props.href ? 'a' : 'div';
  /*- end highlight -*/

  return (
    <ElementType {...menuItemProps} ref={ref}>
      {item.rendered}
    </ElementType>
  );
}

<MenuButton label="Links">
  <Item href="https://adobe.com/" target="_blank">Adobe</Item>
  <Item href="https://apple.com/" target="_blank">Apple</Item>
  <Item href="https://google.com/" target="_blank">Google</Item>
  <Item href="https://microsoft.com/" target="_blank">Microsoft</Item>
</MenuButton>

----------------------------------------

TITLE: Styling Link Menu Items with CSS
DESCRIPTION: CSS styles for menu items that act as links, removing the default text decoration and setting the cursor to a pointer for better usability.

LANGUAGE: css
CODE:
.react-aria-MenuItem[href] {
  text-decoration: none;
  cursor: pointer;
}

----------------------------------------

TITLE: Defining Blog Post Metadata in Markdown Front Matter
DESCRIPTION: Sets up the metadata for the blog post, including keywords, description, publication date, and author information in markdown front matter format. This metadata helps with SEO and provides context for the post.

LANGUAGE: Markdown
CODE:
---
keywords: [combobox, accessibility, mobile, react spectrum, react, spectrum, interactions, touch]
description: After many months of research, development, and testing, we're excited to announce that the React Spectrum [ComboBox](../react-spectrum/ComboBox.html) component and React Aria [useComboBox](../react-aria/useComboBox.html) hook are now available! In this post we'll take a deeper look into some of the challenges we faced when building an accessible and mobile friendly ComboBox.
date: 2021-07-13
author: '[Daniel Lu](https://github.com/LFDanLu)'
---

----------------------------------------

TITLE: Importing Layout Component for Documentation in React
DESCRIPTION: Imports the Layout component from React Spectrum docs and sets it as the default export for documentation structure.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Importing and Exporting BlogPostLayout Component in JSX
DESCRIPTION: Sets up the import of BlogPostLayout and Hero components from the @react-spectrum/docs package and exports BlogPostLayout as the default export. This is used for structuring the blog post about React Spectrum releases.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Setting Minimum Value Validation in NumberField
DESCRIPTION: Example of using the minValue prop to restrict input to non-negative numbers, which also enables numeric keyboard on iOS devices.

LANGUAGE: tsx
CODE:
<MyNumberField
  label="Enter your age"
  minValue={0} />

----------------------------------------

TITLE: Referencing React Aria Menu Package in Markdown
DESCRIPTION: A simple markdown reference to the @react-aria/menu package, indicating it's part of the react-spectrum GitHub repository.

LANGUAGE: markdown
CODE:
# @react-aria/menu

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: ColorWheel with Event Handling
DESCRIPTION: Example showing how to use onChange and onChangeEnd events with the ColorWheel to track both current and final color values during user interaction.

LANGUAGE: tsx
CODE:
function Example() {
  let [currentValue, setCurrentValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));
  let [finalValue, setFinalValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));

  return (
    <div>
      <ColorWheel
        value={currentValue}
        onChange={setCurrentValue}
        onChangeEnd={setFinalValue}
      />
      <pre>Current value: {currentValue.toString('hsl')}</pre>
      <pre>Final value: {finalValue.toString('hsl')}</pre>
    </div>
  );
}

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from React Spectrum docs and sets it as the default export. This component provides the structure for the documentation page.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Creating a Disabled Switch Component
DESCRIPTION: Example showing how to create a disabled Switch component using the isDisabled prop.

LANGUAGE: tsx
CODE:
<MySwitch isDisabled>Airplane Mode</MySwitch>

----------------------------------------

TITLE: Importing Layout Component in React Documentation
DESCRIPTION: Imports and exports the Layout component from @react-spectrum/docs, which is used as the default export for the documentation page layout.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Setting Up SSRProvider for React 16/17
DESCRIPTION: Shows how to wrap an application in an SSRProvider when using React 16 or 17 to ensure proper server-side rendering compatibility with React Aria components.

LANGUAGE: tsx
CODE:
// Only needed if you are using React 16 or 17.
import {SSRProvider} from '@react-aria/ssr';

<SSRProvider>
  <App />
</SSRProvider>

----------------------------------------

TITLE: Basic TextArea Example in React Spectrum
DESCRIPTION: Demonstrates the basic usage of the TextArea component with a label.

LANGUAGE: tsx
CODE:
<TextArea label="Description" />

----------------------------------------

TITLE: Rendering Button Components Section in React
DESCRIPTION: Displays documentation for button-related components using ExampleCard components with illustrations and descriptions.

LANGUAGE: JSX
CODE:
<section className={styles.cardGroup}>

<ExampleCard
  url="Button.html"
  title="Button"
  description="A button allows a user to perform an action with a mouse, touch, or keyboard.">
  <Button />
</ExampleCard>

<ExampleCard
  url="ToggleButton.html"
  title="ToggleButton"
  description="A toggle button allows a user to toggle between two states.">
  <ToggleButton />
</ExampleCard>

<ExampleCard
  url="ToggleButtonGroup.html"
  title="ToggleButtonGroup"
  description="A toggle button group allows a user to toggle multiple options, with single or multiple selection.">
  <ToggleButtonGroup />
</ExampleCard>

<ExampleCard
  url="FileTrigger.html"
  title="FileTrigger"
  description="A file trigger allows a user to access the file system with a Button.">
  <FileTrigger />
</ExampleCard>

</section>

----------------------------------------

TITLE: Implementing Focus Event Handling with useFocus in React
DESCRIPTION: This example demonstrates how to use the useFocus hook to handle focus events for an input element. It tracks focus, blur, and focus change events and displays them in a list below the input.

LANGUAGE: tsx
CODE:
import {useFocus} from '@react-aria/interactions';

function Example() {
  let [events, setEvents] = React.useState([]);
  let {focusProps} = useFocus({
    onFocus: e => setEvents(
      events => [...events, 'focus']
    ),
    onBlur: e => setEvents(
      events => [...events, 'blur']
    ),
    onFocusChange: isFocused => setEvents(
      events => [...events, `focus change: ${isFocused}`]
    )
  });

  return (
    <>
      <label htmlFor="example">Example</label>
      <input
        {...focusProps}
        id="example" />
      <ul
        style={{
          maxHeight: '200px',
          overflow: 'auto'
        }}>
        {events.map((e, i) => <li key={i}>{e}</li>)}
      </ul>
    </>
  );
}

----------------------------------------

TITLE: Importing Assets and Components for React Spectrum Homepage
DESCRIPTION: Imports various UI components and image assets needed for the homepage, including hero images in different resolutions and formats, along with styling utilities.

LANGUAGE: JavaScript
CODE:
import {Highlights, Hero} from '@react-spectrum/docs';
import heroNarrow from 'url:./assets/ReactSpectrumHome_Mobile_976x1025_1x.png';
import heroNarrow2x from 'url:./assets/ReactSpectrumHome_Mobile_976x1025_2x.png';
import heroNarrowWebp from 'url:./assets/ReactSpectrumHome_Mobile_976x1025_1x.webp';
import heroNarrow2xWebp from 'url:./assets/ReactSpectrumHome_Mobile_976x1025_2x.webp';
import heroWide from 'url:./assets/ReactSpectrumHome_976x445_1x.png';
import heroWide2x from 'url:./assets/ReactSpectrumHome_976x445_2x.png';
import heroWideWebp from 'url:./assets/ReactSpectrumHome_976x445_1x.webp';
import heroWide2xWebp from 'url:./assets/ReactSpectrumHome_976x445_2x.webp';
import {VisuallyHidden} from '@react-aria/visually-hidden';
import clsx from 'clsx';
import linkStyle from '@adobe/spectrum-css-temp/components/link/vars.css';
import styles from '@react-spectrum/docs/src/docs.css';
import typographyStyles from '@adobe/spectrum-css-temp/components/typography/vars.css';

----------------------------------------

TITLE: Importing @react-spectrum/form Package Reference
DESCRIPTION: References the @react-spectrum/form package which provides form functionality within the React Spectrum component library.

LANGUAGE: markdown
CODE:
# @react-spectrum/form

----------------------------------------

TITLE: Implementing Vertical Grid Layout in ListBox with React
DESCRIPTION: Example of using the layout prop set to 'grid' to create a vertical grid of album items with two-dimensional keyboard navigation.

LANGUAGE: tsx
CODE:
<ListBox
  aria-label="Albums"
  ///- begin highlight -///
  layout="grid"
  ///- end highlight -///
  items={albums}
  selectionMode="multiple">
  {item => (
    <ListBoxItem textValue={item.title}>
      <img src={item.image} alt="" />
      <Text slot="label">{item.title}</Text>
      <Text slot="description">{item.artist}</Text>
    </ListBoxItem>
  )}
</ListBox>

----------------------------------------

TITLE: Handling Drop Operations with onDragEnd in React Spectrum
DESCRIPTION: This example demonstrates how to handle drop operations using the onDragEnd event. It detects move operations and removes dragged items from the source list when they are moved to a target.

LANGUAGE: tsx
CODE:
import {useListData} from '@react-stately/data';

function Example() {
  let list = useListData({
    initialItems: [
      {id: 'a', textValue: 'Photoshop'},
      {id: 'b', textValue: 'XD'},
      {id: 'c', textValue: 'Dreamweaver'},
      {id: 'd', textValue: 'InDesign'},
      {id: 'e', textValue: 'Connect'}
    ]
  });

  let onDragEnd = e => {
    if (e.dropOperation === 'move') {
      list.remove(...e.keys);
    }
  };

  return <>
    <ListBox aria-label="Adobe apps" items={list.items} onDragEnd={onDragEnd} selectionMode="multiple">
      {item => <Item>{item.textValue}</Item>}
    </ListBox>
    <DropTarget />
  </>;
}

----------------------------------------

TITLE: Creating a Disabled DisclosureGroup Component
DESCRIPTION: This example demonstrates how to disable an entire DisclosureGroup by using the isDisabled prop. When disabled, all trigger buttons are disabled and users cannot open or close any panels.

LANGUAGE: tsx
CODE:
<DisclosureGroup isDisabled>
  <DisclosureItem title="Personal Information">
    Personal information form here.
  </DisclosureItem>
  <DisclosureItem title="Billing Address">
    Billing address form here.
  </DisclosureItem>
</DisclosureGroup>

----------------------------------------

TITLE: Implementing a Draggable Component with useDrag
DESCRIPTION: Implementation of a draggable component that provides both plain text and custom format data for drag operations.

LANGUAGE: TSX
CODE:
import {useDrag} from '@react-aria/dnd';

function Draggable() {
  let {dragProps, isDragging} = useDrag({
    getItems() {
      return [{
        'text/plain': 'hello world',
        'my-app-custom-type': JSON.stringify({message: 'hello world'})
      }];
    }
  });

  return (
    <div {...dragProps} role="button" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>
      Drag me
    </div>
  );
}

----------------------------------------

TITLE: Importing Documentation and Dependencies for useGridList
DESCRIPTION: Imports documentation resources, icon components, and utility functions required for the useGridList documentation page.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-aria/gridlist';
import ChevronRight from '@spectrum-icons/workflow/ChevronRight';
import collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';
import selectionDocs from 'docs:@react-stately/selection';
import statelyDocs from 'docs:@react-stately/list';
import focusDocs from 'docs:@react-aria/focus';
import checkboxDocs from 'docs:@react-aria/checkbox';
import utilsDocs from 'docs:@react-aria/utils';
import {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';
import {Keyboard} from '@react-spectrum/text';
import packageData from '@react-aria/gridlist/package.json';
import Anatomy from './anatomy.svg';

----------------------------------------

TITLE: Importing React Spectrum Documentation Components in JSX
DESCRIPTION: Imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and exports BlogPostLayout as the default export for a blog post page.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Installing React Aria with yarn
DESCRIPTION: Commands for installing React Aria using yarn, showing both the monopackage and individual package installation approaches.

LANGUAGE: bash
CODE:
yarn add react-aria

LANGUAGE: bash
CODE:
yarn add @react-aria/button

----------------------------------------

TITLE: CSS Styling for ColorSlider Component
DESCRIPTION: CSS code that styles the ColorSlider component, including its track, thumb, label, and output elements. The styles include grid layout, color configurations, and responsive behaviors.

LANGUAGE: css
CODE:
.react-aria-ColorSlider {
  display: grid;
  grid-template-areas: "label output"
                       "track track";
  grid-template-columns: 1fr auto;
  gap: 4px;
  max-width: 300px;

  .react-aria-Label {
    grid-area: label;
  }

  .react-aria-SliderOutput {
    grid-area: output;
  }

  .react-aria-SliderTrack {
    grid-area: track;
    border-radius: 4px;
  }

  &[data-orientation=horizontal] {
    .react-aria-SliderTrack {
      height: 28px;
    }

    .react-aria-ColorThumb {
      top: 50%;
    }
  }
}

.react-aria-ColorThumb {
  border: 2px solid white;
  box-shadow: 0 0 0 1px black, inset 0 0 0 1px black;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  box-sizing: border-box;

  &[data-focus-visible] {
    width: 24px;
    height: 24px;
  }
}

----------------------------------------

TITLE: Importing @react-spectrum/provider Package Reference
DESCRIPTION: Displays the package name as a code reference within a Markdown heading, indicating this is the documentation for the @react-spectrum/provider package.

LANGUAGE: markdown
CODE:
# @react-spectrum/provider

----------------------------------------

TITLE: ColorSwatchPicker with onChange Event Handler
DESCRIPTION: Example showing how to use the onChange event to update and display the selected color value.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-spectrum/color';

function Example() {
  let [value, setValue] = React.useState(parseColor('#A00'));

  return (
    <div>
      <ColorSwatchPicker value={value} onChange={setValue}>
        <ColorSwatch color="#A00" />
        <ColorSwatch color="#f80" />
        <ColorSwatch color="#080" />
        <ColorSwatch color="#08f" />
        <ColorSwatch color="#088" />
        <ColorSwatch color="#008" />
      </ColorSwatchPicker>
      <p>Selected color: {value.toString('rgb')}</p>
    </div>
  );
}

----------------------------------------

TITLE: Using Custom Icon in a Button Component
DESCRIPTION: Demonstrates how to use a custom icon within a Button component from React Spectrum. The example shows proper component composition with Text and Button components.

LANGUAGE: tsx
CODE:
import {Button, Text} from '@adobe/react-spectrum';

<Button variant="primary">
  <CustomIcon />
  <Text>Favorite</Text>
</Button>

----------------------------------------

TITLE: Testing React Aria Tabs with Test Utils
DESCRIPTION: Example of using @react-aria/test-utils to test tab interactions in a React Aria Tabs component within a testing framework.

LANGUAGE: ts
CODE:
// Tabs.test.ts
import {render} from '@testing-library/react';
import {User} from '@react-aria/test-utils';

let testUtilUser = new User({interactionType: 'mouse'});
// ...

it('Tabs can change selection via keyboard', async function () {
  // Render your test component/app and initialize the listbox tester
  let {getByTestId} = render(
     <Tabs data-testid="test-tabs">
      ...
    </Tabs>
  );
  let tabsTester = testUtilUser.createTester('Tabs', {root: getByTestId('test-tabs'), interactionType: 'keyboard'});

  let tabs = tabsTester.tabs;
  expect(tabsTester.selectedTab).toBe(tabs[0]);

  await tabsTester.triggerTab({tab: 1});
  expect(tabsTester.selectedTab).toBe(tabs[1]);
});

----------------------------------------

TITLE: Installing @react-spectrum/numberfield Package
DESCRIPTION: Package reference for the NumberField component in React Spectrum, showing the package name as it would appear in a package.json file or installation command.

LANGUAGE: markdown
CODE:
@react-spectrum/numberfield

----------------------------------------

TITLE: Styling Description and Error Text in TagGroup
DESCRIPTION: CSS styling for the description and errorMessage slots in a TagGroup, setting font sizes and colors.

LANGUAGE: css
CODE:
.react-aria-TagGroup {
  [slot=description] {
    font-size: 12px;
  }

  [slot=errorMessage] {
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: Slider with Contextual Help
DESCRIPTION: Example demonstrating how to add contextual help information to a Slider using the ContextualHelp component.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<Slider
  label="Exposure"
  minValue={-100}
  maxValue={100}
  defaultValue={0}
  formatOptions={{signDisplay: 'always'}}
  isFilled
  fillOffset={0}
  contextualHelp={
    <ContextualHelp>
      <Heading>What is exposure?</Heading>
      <Content>Exposure adjusts how bright the image is.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Cloning and Installing React Spectrum Repository
DESCRIPTION: Commands for forking, cloning the React Spectrum repository, and installing dependencies. Requires Node.js (v14.15.0+) and Yarn (v1.22.0+).

LANGUAGE: bash
CODE:
git clone https://github.com/YOUR-USERNAME/react-spectrum
cd react-spectrum
yarn install

----------------------------------------

TITLE: CheckboxGroup component anatomy with import statements
DESCRIPTION: Example showing the basic structure of a CheckboxGroup component including optional description and error message elements that provide accessibility context.

LANGUAGE: tsx
CODE:
import {CheckboxGroup, Checkbox, Label, Text, FieldError} from 'react-aria-components';

<CheckboxGroup>
  <Label />
  <Checkbox />
  <Text slot="description" />
  <FieldError />
</CheckboxGroup>

----------------------------------------

TITLE: Setting Horizontal Orientation for RadioGroup
DESCRIPTION: Example of changing the default vertical orientation of a RadioGroup to horizontal using the orientation prop.

LANGUAGE: tsx
CODE:
<MyRadioGroup label="Favorite avatar" orientation="horizontal">
  <Radio value="wizard">Wizard</Radio>
  <Radio value="dragon">Dragon</Radio>
</MyRadioGroup>

----------------------------------------

TITLE: Setting Custom Width for ComboBox in React Spectrum
DESCRIPTION: Example of a ComboBox with custom width using the width and maxWidth props to control the component's dimensions, providing more precise layout control.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal" width="size-6000" maxWidth="100%">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Styling the Select Component with CSS
DESCRIPTION: CSS styling for the Select component, including styles for the button, select value, dropdown indicator, popover, and listbox items. Includes styling for various states like focus, selected, and disabled.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Select {
  color: var(--text-color);

  .react-aria-Button {
    box-shadow: 0 1px 2px rgba(0 0 0 / 0.1);
    border-radius: 6px;
    font-size: 1.072rem;
    padding: 0.286rem 0.286rem 0.286rem 0.571rem;
    display: flex;
    align-items: center;
    max-width: 250px;

    &[data-focus-visible] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -1px;
    }
  }

  .react-aria-SelectValue {
    &[data-placeholder] {
      font-style: italic;
      color: var(--text-color-placeholder);
    }
  }

  span[aria-hidden] {
    width: 1.5rem;
    line-height: 1.375rem;
    margin-left: 1rem;
    padding: 1px;
    background: var(--highlight-background);
    color: var(--highlight-foreground);
    forced-color-adjust: none;
    border-radius: 4px;
    font-size: 0.857rem;
  }
}

.react-aria-Popover[data-trigger=Select] {
  min-width: var(--trigger-width);

  .react-aria-ListBox {
    display: block;
    width: unset;
    max-height: inherit;
    min-height: unset;
    border: none;

    .react-aria-Header {
      padding-left: 1.571rem;
    }
  }

  .react-aria-ListBoxItem {
    padding: 0 0.571rem 0 1.571rem;

    &[data-focus-visible] {
      outline: none;
    }

    &[data-selected] {
      font-weight: 600;
      background: unset;
      color: var(--text-color);

      &::before {
        content: '✓';
        content: '✓' / '';
        alt: ' ';
        position: absolute;
        top: 4px;
        left: 4px;
      }
    }

    &[data-focused],
    &[data-pressed] {
      background: var(--highlight-background);
      color: var(--highlight-foreground);
    }
  }
}

----------------------------------------

TITLE: Implementing an Accessible Button with useButton Hook in React Aria
DESCRIPTION: This example demonstrates how to create a basic accessible button component using the useButton hook from React Aria. The hook handles accessibility properties, and the component returns a standard button element with all necessary props applied.

LANGUAGE: jsx
CODE:
import {useButton} from '@react-aria/button';

function Button(props) {
  let ref = React.useRef();
  let {buttonProps} = useButton(props, ref);

  return (
    <button {...buttonProps} ref={ref}>
      {props.children}
    </button>
  );
}

<Button onPress={() => alert('Button pressed!')}>Press me</Button>

----------------------------------------

TITLE: Integrating React Server Actions with React Spectrum Forms
DESCRIPTION: This example shows how to use React Server Actions with React Spectrum forms. It demonstrates using the useFormState hook to handle validation errors returned from a server action and displaying them in the form.

LANGUAGE: tsx
CODE:
// app/add-form.tsx
'use client';

import {useFormState} from 'react-dom';
import {Form, TextField, ActionButton} from '@adobe/react-spectrum';
import {createTodo} from '@/app/actions';

export function AddForm() {
  let [{errors}, formAction] = useFormState(createTodo, {errors: {}});

  return (
    <Form action={formAction} validationErrors={errors}>
      <TextField label="Task" name="todo" />
      <ActionButton type="submit">Add</ActionButton>
    </Form>
  );
}

----------------------------------------

TITLE: Styling Popover for Menu Using CSS Custom Properties
DESCRIPTION: Example of CSS to make a popover match the width of the menu button trigger by using the --trigger-width CSS custom property that's set on the popover.

LANGUAGE: css
CODE:
.react-aria-Popover[data-trigger=MenuTrigger] {
  width: var(--trigger-width);
}

----------------------------------------

TITLE: Implementing a Form Field with useLabel in React
DESCRIPTION: This example demonstrates how to use the useLabel hook to associate a label with a select field. The hook automatically handles creating an ID for the field and associates the label with it.

LANGUAGE: tsx
CODE:
import {useLabel} from '@react-aria/label';

function ColorField(props) {
  let {labelProps, fieldProps} = useLabel(props);

  return (
    <>
      <label {...labelProps}>{props.label}</label>
      <select {...fieldProps}>
        <option>Indigo</option>
        <option>Maroon</option>
        <option>Chartreuse</option>
      </select>
    </>
  );
}

<ColorField label="Favorite color" />

----------------------------------------

TITLE: Alternative Array Map Approach for Collections
DESCRIPTION: Example of using array.map() instead of the items prop for creating collections. This approach is less performant for large collections and requires manually specifying both key and id props.

LANGUAGE: tsx
CODE:
let [animals, setAnimals] = useState([
  {name: 'Aardvark'},
  {name: 'Kangaroo'},
  {name: 'Snake'}
]);

<ListBox>
  {animals.map(item =>
    <ListBoxItem key={item.name} id={item.name}>{item.name}</ListBoxItem>
  )}
</ListBox>

----------------------------------------

TITLE: Importing from React Stately Monopackage
DESCRIPTION: Example of importing a hook from the React Stately monopackage.

LANGUAGE: tsx
CODE:
// Monopackage
import {useRadioGroupState} from 'react-stately';

----------------------------------------

TITLE: Cycling Time Fields with Rounding in TypeScript
DESCRIPTION: Demonstrates cycling time fields with the round option to increment or decrement in specific increments while rounding to those increments.

LANGUAGE: tsx
CODE:
let time = new Time(9, 22);

time.cycle('minute', 15); // 09:37
time.cycle('minute', 15, {round: true}); // 09:30

time.cycle('minute', -15); // 09:07
time.cycle('minute', -15, {round: true}); // 09:15

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default component for the current file.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Implementing Disabled TreeItems
DESCRIPTION: Example showing how to disable individual TreeItems using the isDisabled prop, which prevents all interactions with the item unless modified by the disabledBehavior prop.

LANGUAGE: tsx
CODE:
<Tree aria-label="Tree with disabled items" style={{height: '100px'}} defaultExpandedKeys={['bulbasaur']}>
  <MyTreeItem id="bulbasaur" title="Bulbasaur">
    <MyTreeItem id="ivysaur" title="Ivysaur" isDisabled>
      <MyTreeItem id="venisaur" title="Venisaur" />
    </MyTreeItem>
  </MyTreeItem>
</Tree>

----------------------------------------

TITLE: Configuring Macros Plugin for Esbuild
DESCRIPTION: Configuration code to add the unplugin-parcel-macros plugin to Esbuild settings. The macros plugin should be added as the first plugin in the plugins array.

LANGUAGE: javascript
CODE:
import macrosPlugin from 'unplugin-parcel-macros';
...
  plugins: [
    macrosPlugin.esbuild(),
    esbuildPluginTsc({
      force: true
    }),
  ]

----------------------------------------

TITLE: Importing Grid Components in React Spectrum
DESCRIPTION: Demonstrates how to import the Grid and repeat functions from React Spectrum layout package, along with the View component.

LANGUAGE: jsx
CODE:
import {Grid, repeat} from '@react-spectrum/layout';
import {View} from '@react-spectrum/view';

----------------------------------------

TITLE: Importing StepList Package from React Spectrum
DESCRIPTION: Package reference for the @react-spectrum/steplist component within the React Spectrum library. The package name indicates it implements a step list or multi-step interface component.

LANGUAGE: markdown
CODE:
# @react-spectrum/steplist

----------------------------------------

TITLE: Styling Tooltips with CSS Selectors
DESCRIPTION: Demonstrates how to target and style tooltip components using the default class names provided by React Aria.

LANGUAGE: css
CODE:
.react-aria-Tooltip {
  /* ... */
}

----------------------------------------

TITLE: Referencing React Spectrum Package in Markdown
DESCRIPTION: A markdown reference to the @react-types/provider package, indicating it is part of the React Spectrum repository with a link to the main repository for additional information.

LANGUAGE: markdown
CODE:
# @react-types/provider

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Rendering Key Features of React Spectrum with Highlights Component
DESCRIPTION: Uses the Highlights component to display four key features of React Spectrum: accessibility, adaptability, color scheme support, and internationalization.

LANGUAGE: JSX
CODE:
<Highlights items={[
  {
    title: 'Accessible',
    description: 'React Spectrum components are designed with accessibility top-of-mind and include full screen reader and keyboard navigation support.',
  },
  {
    title: 'Adaptive',
    description: 'React Spectrum components are designed to work with mouse, touch, and keyboard interactions. They're built with responsive design principles to deliver a great experience, no matter the device.',
  },
  {
    title: 'Color schemes',
    description: 'React Spectrum includes automatic support for dark and light mode based on operating system settings.'
  },
  {
    title: 'International',
    description: 'React Spectrum components are designed to support over 30 languages, including support for right-to-left languages, date and number formatting, and more.'
  }
]} />

----------------------------------------

TITLE: Customizing Page Behavior in DateRangePicker Calendar
DESCRIPTION: This example demonstrates how to customize the paging behavior of a DateRangePicker calendar by setting the pageBehavior prop to 'single'. This changes navigation to advance by single months instead of the maxVisibleMonths value.

LANGUAGE: tsx
CODE:
<DateRangePicker label="Date range" maxVisibleMonths={3} pageBehavior="single" />

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports and exports the Layout component from React Spectrum documentation library, which provides the structure for the documentation page.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Global Toast Queue Alternative Implementation
DESCRIPTION: Shows a simpler ToastProvider implementation that uses a global toast queue instead of component-level state management.

LANGUAGE: tsx
CODE:
// Actual implementation we use in the docs, using global queue.
function ToastProvider({children}) {
  return children(toastQueue);
}

----------------------------------------

TITLE: Importing @react-aria/grid Package Reference
DESCRIPTION: Shows the package name for @react-aria/grid, which is part of the react-spectrum library. This is a reference to the grid component package rather than actual code.

LANGUAGE: markdown
CODE:
# @react-aria/grid

----------------------------------------

TITLE: Hiding Time Zone Display in DatePicker
DESCRIPTION: This example shows how to hide the time zone abbreviation in a DatePicker when using a ZonedDateTime value. This is useful when the time zone is displayed elsewhere or is implicit based on the use case.

LANGUAGE: tsx
CODE:
<DatePicker
  label="Appointment time"
  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}
  hideTimeZone />

----------------------------------------

TITLE: Basic ColorSlider Implementation in React
DESCRIPTION: A basic example showing how to implement a ColorSlider component with Label, SliderOutput, SliderTrack, and ColorThumb elements to create a hue selection slider.

LANGUAGE: tsx
CODE:
import {ColorSlider, ColorThumb, Label, SliderOutput, SliderTrack} from 'react-aria-components';

<ColorSlider channel="hue" defaultValue="hsl(0, 100%, 50%)">
  <Label />
  <SliderOutput />
  <SliderTrack>
    <ColorThumb />
  </SliderTrack>
</ColorSlider>

----------------------------------------

TITLE: Managing Selection with Dynamic Data using useListData Hook (TSX)
DESCRIPTION: Example demonstrating how to use the useListData hook to automatically manage selection state when data in a collection changes, such as when removing a selected item.

LANGUAGE: tsx
CODE:
import {useListData} from 'react-stately';

let list = useListData({
  initialItems: [
    {name: 'Aardvark'},
    {name: 'Kangaroo'},
    {name: 'Snake'}
  ],
  initialSelectedKeys: ['Kangaroo'],
  getKey: item => item.name
});

function removeItem() {
  /*- begin highlight -*/
  // Removing the list item will also remove it from the selection state.
  list.remove('Kangaroo');
  /*- end highlight -*/
}

<ListBox
  items={list.items}
  selectedKeys={list.selectedKeys}
  onSelectionChange={list.setSelectedKeys}>
  {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
</ListBox>

----------------------------------------

TITLE: Setting Zero Delay for Tooltips
DESCRIPTION: Example of removing the display delay for tooltips by setting the delay prop to 0. This causes the tooltip to appear immediately on hover instead of after the default delay.

LANGUAGE: tsx
CODE:
<TooltipTrigger delay={0}>
  <Button>💾</Button>
  <MyTooltip>Save</MyTooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Provider with Color Scheme Override
DESCRIPTION: Demonstrates how to override the default color scheme detection by explicitly setting the colorScheme prop to 'light'.

LANGUAGE: tsx
CODE:
<Provider theme={theme} colorScheme="light">
  <ActionButton margin="size-100">I'm a light button</ActionButton>
</Provider>

----------------------------------------

TITLE: Importing @react-spectrum/menu Package Reference
DESCRIPTION: Shows the package name for the menu component in React Spectrum library with a link to the main repository.

LANGUAGE: markdown
CODE:
# @react-spectrum/menu

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Adding Contextual Help to CheckboxGroup in React Spectrum
DESCRIPTION: This example shows how to add contextual help to a CheckboxGroup using the ContextualHelp component. It includes a heading and content explaining how the user's selection will be used.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<CheckboxGroup
  label="Favorite genres"
  contextualHelp={
    <ContextualHelp>
      <Heading>What does this do?</Heading>
      <Content>Your musical taste is used to train our machine learning recommendation algorithm.</Content>
    </ContextualHelp>
  }>
  <Checkbox value="rock">Rock</Checkbox>
  <Checkbox value="pop">Pop</Checkbox>
  <Checkbox value="classical">Classical</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Quiet Form in React Spectrum
DESCRIPTION: Demonstrates the isQuiet property which renders a form with a more subtle, minimalist appearance by removing borders and backgrounds.

LANGUAGE: tsx
CODE:
<Form
  isQuiet
  aria-label="Quiet example"
  maxWidth="size-3600">
  <TextField label="Name" />
  <TextField label="Address" />
</Form>

----------------------------------------

TITLE: Tailwind CSS Configuration for React Aria Components (v4)
DESCRIPTION: Shows how to configure Tailwind CSS v4 to work with React Aria Components by importing the plugin in your CSS file.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";

----------------------------------------

TITLE: Implementing Disabled Clipboard Operations with useClipboard
DESCRIPTION: This example shows how to disable copy and paste functionality by setting the isDisabled prop to true in the useClipboard hook configuration. Both the Copyable and Pasteable components demonstrate this feature.

LANGUAGE: tsx
CODE:
import type {TextDropItem} from '@react-aria/dnd';
import {useClipboard} from '@react-aria/dnd';

function Copyable() {
  let {clipboardProps} = useClipboard({
    getItems() {
      return [{
        'text/plain': 'Hello world'
      }];
    },
    isDisabled: true
  });

  return (
    <div role="textbox" tabIndex={0} {...clipboardProps}>
      Hello world
      <kbd>⌘C</kbd>
    </div>
  );
}

function Pasteable() {
  let [pasted, setPasted] = React.useState(null);
  let {clipboardProps} = useClipboard({
    async onPaste(items) {
      let pasted = await Promise.all(
        items
          .filter((item) =>
            item.kind === 'text' && item.types.has('text/plain')
          )
          .map((item: TextDropItem) => item.getText('text/plain'))
      );
      setPasted(pasted.join('\n'));
    },
    isDisabled: true
  });

  return (
    <div role="textbox" tabIndex={0} {...clipboardProps}>
      {pasted || 'Paste here'}
      <kbd>⌘V</kbd>
    </div>
  );
}

----------------------------------------

TITLE: Importing @react-spectrum/menu Package Reference
DESCRIPTION: Shows the package name for the menu component in React Spectrum library with a link to the main repository.

LANGUAGE: markdown
CODE:
# @react-spectrum/menu

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Handling TimeField OnChange Events with Formatting
DESCRIPTION: Example showing how to use the onChange event to update a separate element with a formatted version of the time in the user's locale.

LANGUAGE: tsx
CODE:
import {useDateFormatter} from '@react-aria/i18n';

function Example() {
  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));
  let formatter = useDateFormatter({dateStyle: 'long', timeStyle: 'long'});

  return (
    <>
      <MyTimeField label="Time" value={date} onChange={setDate} />
      <p>Selected date and time: {(date?.toDate && formatter.format(date.toDate())) || (date && date.toString()) || '--'}</p>
    </>
  );
}

----------------------------------------

TITLE: Styling Selected Menu Items with CSS
DESCRIPTION: CSS rules for styling menu items in different selection modes. Adds checkmarks for multiple selection mode and bullets for single selection mode using the ::before pseudo-element.

LANGUAGE: css
CODE:
.react-aria-MenuItem {
  &[data-selection-mode] {
    padding-left: 24px;

    &::before {
      position: absolute;
      left: 4px;
      font-weight: 600;
    }

    &[data-selection-mode=multiple][data-selected]::before {
      content: '✓';
      content: '✓' / '';
      alt: ' ';
      position: absolute;
      left: 4px;
      font-weight: 600;
    }

    &[data-selection-mode=single][data-selected]::before {
      content: '●';
      content: '●' / '';
      transform: scale(0.7)
    }
  }
}

----------------------------------------

TITLE: Configuring Next.js basePath with Environment Variable
DESCRIPTION: This configuration sets up a basePath in Next.js and exposes it as an environment variable that can be used in the client-side code for routing purposes.

LANGUAGE: tsx
CODE:
// next.config.js
const basePath = '...';
const nextConfig = {
  basePath,
  env: {
    BASE_PATH: basePath
  }
};

----------------------------------------

TITLE: Constraining Time Field Values in TypeScript
DESCRIPTION: Demonstrates how setting a field to a value outside the valid range causes it to be constrained to the maximum or minimum valid value.

LANGUAGE: tsx
CODE:
let time = new Time(9, 45);
time.set({hour: 36}); // 23:45
time.set({minute: 75}); // 09:59

----------------------------------------

TITLE: Rendering 404 Page UI with React Spectrum Components
DESCRIPTION: Creates a centered error message display using Flex layout with the NotFound illustration, error heading, and descriptive content to guide users when they encounter a missing page.

LANGUAGE: jsx
CODE:
<Flex alignItems="center" direction="row" height="50vh" justifyContent="center">
  <IllustratedMessage>
    <NotFound />
    <Heading>Error 404: Page not found</Heading>
    <Content>This page isn't available. Try checking the URL or visit a different page.</Content>
  </IllustratedMessage>
</Flex>

----------------------------------------

TITLE: Applying Custom CSS Classes to DateInput Components
DESCRIPTION: Shows how to override the default className on a DateInput component with a custom one for styling purposes.

LANGUAGE: jsx
CODE:
<DateInput className="my-date-input">
  {/* ... */}
</DateInput>

----------------------------------------

TITLE: Running the React Spectrum Upgrade Assistant CLI
DESCRIPTION: Command to execute the React Spectrum codemods tool using npx. This command should be run from the directory containing the components you want to upgrade from Spectrum 1 to Spectrum 2.

LANGUAGE: bash
CODE:
npx @react-spectrum/codemods s1-to-s2

----------------------------------------

TITLE: ActionMenu with Flipping Behavior Control
DESCRIPTION: Demonstrates the shouldFlip prop which controls whether the menu automatically flips direction when there's limited space in the viewport.

LANGUAGE: tsx
CODE:
<Flex gap="size-100">
  <ActionMenu shouldFlip>
    <Item key="cut">Cut</Item>
    <Item key="copy">Copy</Item>
    <Item key="paste">Paste</Item>
  </ActionMenu>
  <ActionMenu shouldFlip={false}>
    <Item key="cut">Cut</Item>
    <Item key="copy">Copy</Item>
    <Item key="paste">Paste</Item>
  </ActionMenu>
</Flex>

----------------------------------------

TITLE: Disabled Breadcrumbs Implementation
DESCRIPTION: Example showing how to disable the entire breadcrumbs navigation using the isDisabled prop.

LANGUAGE: tsx
CODE:
<Breadcrumbs isDisabled>
  <Breadcrumb><Link href="/">Home</Link></Breadcrumb>
  <Breadcrumb><Link href="/react-aria/">React Aria</Link></Breadcrumb>
  <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>
</Breadcrumbs>

----------------------------------------

TITLE: Importing Content Component in React Spectrum
DESCRIPTION: Shows how to import the Content component from the @react-spectrum/view package for use in React applications.

LANGUAGE: jsx
CODE:
import {Content} from '@react-spectrum/view';

----------------------------------------

TITLE: Importing Layout Components in React Spectrum
DESCRIPTION: Shows how to import various layout components from React Spectrum packages including Flex, Grid, View, Picker, and icons.

LANGUAGE: tsx
CODE:
import {Flex, Grid} from '@react-spectrum/layout';
import {View} from '@react-spectrum/view';
import {Picker, Item} from '@react-spectrum/picker';
import Book from '@spectrum-icons/workflow/Book';
import BulkEditUsers from '@spectrum-icons/workflow/BulkEditUsers';
import Draw from '@spectrum-icons/workflow/Draw';
import {Text} from '@react-spectrum/text';

----------------------------------------

TITLE: Checkbox Group with Form Validation in React
DESCRIPTION: Implements form validation for a checkbox group using the isRequired prop and native validation behavior to ensure at least one item is selected.

LANGUAGE: tsx
CODE:
<form>
  <CheckboxGroup
    label="Sandwich condiments"
    name="condiments"
    /*- begin highlight -*/
    isRequired
    validationBehavior="native"
    /*- end highlight -*/
  >
    <Checkbox value="lettuce">Lettuce</Checkbox>
    <Checkbox value="tomato">Tomato</Checkbox>
    <Checkbox value="onion">Onion</Checkbox>
    <Checkbox value="sprouts">Sprouts</Checkbox>
  </CheckboxGroup>
  <input type="submit" style={{marginTop: 8}} />
</form>

----------------------------------------

TITLE: Creating Popover Component for DatePicker
DESCRIPTION: A Popover component that contains the popup calendar for the DatePicker. It uses usePopover hook to manage positioning and overlay behavior, and can be shared with other components like Select and Menu.

LANGUAGE: tsx
CODE:
import type {AriaPopoverProps} from 'react-aria';
import type {OverlayTriggerState} from 'react-stately';
import {usePopover, Overlay, DismissButton} from '@react-aria/overlays';

interface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef'> {
  children: React.ReactNode,
  state: OverlayTriggerState
}

function Popover({children, state, ...props}: PopoverProps) {
  let popoverRef = React.useRef(null);
  let {popoverProps, underlayProps} = usePopover({
    ...props,
    popoverRef
  }, state);

  return (
    <Overlay>
      <div {...underlayProps} style={{position: 'fixed', inset: 0}} />
      <div
        {...popoverProps}
        ref={popoverRef}
        style={{
          ...popoverProps.style,
          background: 'var(--page-background)',
          border: '1px solid gray'
        }}>
        <DismissButton onDismiss={state.close} />
        {children}
        <DismissButton onDismiss={state.close} />
      </div>
    </Overlay>
  );
}

----------------------------------------

TITLE: Importing BlogPostLayout Component in React
DESCRIPTION: Basic import statement for the BlogPostLayout component from React Spectrum docs, which is then exported as the default component for this blog post page.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Disabling Dropping Functionality with isDisabled
DESCRIPTION: This example demonstrates how to disable drop functionality using the isDisabled property in the useDrop hook. When set to true, the drop target will not accept any drops until re-enabled.

LANGUAGE: tsx
CODE:
import type {TextDropItem} from '@react-aria/dnd';
import {useDrop} from '@react-aria/dnd';

function DropTarget() {
  let [dropped, setDropped] = React.useState(null);
  let ref = React.useRef(null);
  let {dropProps, isDropTarget} = useDrop({
    ref,
    async onDrop(e) {
      let items = await Promise.all(
        e.items
          .filter(item => item.kind === 'text' && item.types.has('text/plain'))
          .map((item: TextDropItem) => item.getText('text/plain'))
      );
      setDropped(items.join('\n'));
    },
    /*- begin highlight -*/
    isDisabled: true
    /*- end highlight -*/
  });

  return (
    <div {...dropProps} role="button" tabIndex={0} ref={ref} className={`droppable ${isDropTarget ? 'target' : ''}`}>
      {dropped || 'Drop here'}
    </div>
  );
}

<Draggable />
<DropTarget />

----------------------------------------

TITLE: Configuring Container Padding for React Aria Popovers
DESCRIPTION: Example demonstrating how to control the minimum padding between a popover and its surrounding container using the containerPadding prop, which affects positioning breakpoints for flipping behavior.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <Button>Container padding</Button>
  <MyPopover placement="top" containerPadding={50}>
    This is a popover.
  </MyPopover>
</DialogTrigger>

----------------------------------------

TITLE: Overriding Default First Day of Week
DESCRIPTION: Shows how to override the locale's default first day of the week in the startOfWeek function by providing an explicit firstDayOfWeek parameter.

LANGUAGE: tsx
CODE:
startOfWeek(date, 'en-US', 'mon'); // 2022-01-31

----------------------------------------

TITLE: Installing and Running the Development Server with Yarn
DESCRIPTION: Commands to install dependencies and start the Webpack development server. After running these commands, you can access the application at http://localhost:8080.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Using PopoverTrigger with Dialog Example
DESCRIPTION: Example of using the PopoverTrigger component with a Dialog component to create a complete, accessible popover interface. This demonstrates how to compose the components together.

LANGUAGE: tsx
CODE:
// Reuse the Dialog from your component library. See below for details.
import {Dialog} from 'your-component-library';

<PopoverTrigger label="Open Popover">
  <Dialog title="Popover title">
    This is the content of the popover.
  </Dialog>
</PopoverTrigger>

----------------------------------------

TITLE: Using an Uncontrolled ComboBox Component
DESCRIPTION: Demonstrates how to use the ComboBox component in an uncontrolled manner. The input value, selected option, and open state are managed internally by the component, with an initial input value set via the defaultInputValue prop. This is useful for simple form scenarios.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal" defaultInputValue="red">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Formatting ProgressBar Values as Currency
DESCRIPTION: This snippet shows how to use the formatOptions prop to display the ProgressBar value as Japanese Yen currency instead of the default percentage format.

LANGUAGE: tsx
CODE:
<ProgressBar label="Loading…" formatOptions={{style: 'currency', currency: 'JPY'}} value={60} />

----------------------------------------

TITLE: Importing @react-stately/tooltip Package Reference
DESCRIPTION: Demonstrates the package name reference for the tooltip state management component in React Spectrum library.

LANGUAGE: markdown
CODE:
# @react-stately/tooltip

----------------------------------------

TITLE: Adding Custom className to Select Component
DESCRIPTION: Example showing how to override the default className on a Select component with a custom one.

LANGUAGE: jsx
CODE:
<Select className="my-select">
  {/* ... */}
</Select>

----------------------------------------

TITLE: Integrating TextField with HTML Forms
DESCRIPTION: Example demonstrating HTML form integration for TextField using the name prop and additional HTML input attributes like type.

LANGUAGE: TSX
CODE:
<TextField label="Email" name="email" type="email" />

----------------------------------------

TITLE: Creating a NumberField Component with React Aria Hooks
DESCRIPTION: Example implementation of a NumberField component using useNumberField and useNumberFieldState hooks. It includes input element, increment/decrement buttons, and supports internationalized formatting.

LANGUAGE: tsx
CODE:
import {useNumberField} from '@react-aria/numberfield';
import {useNumberFieldState} from '@react-stately/numberfield';
import {useLocale} from '@react-aria/i18n';

// Reuse the Button from your component library. See below for details.
import {Button} from 'your-component-library';

function NumberField(props) {
  let {locale} = useLocale();
  let state = useNumberFieldState({...props, locale});
  let inputRef = React.useRef(null);
  let {
    labelProps,
    groupProps,
    inputProps,
    incrementButtonProps,
    decrementButtonProps
  } = useNumberField(props, state, inputRef);

  return (
    <div>
      <label {...labelProps}>{props.label}</label>
      <div {...groupProps}>
        <Button {...decrementButtonProps}>-</Button>
        <input {...inputProps} ref={inputRef} />
        <Button {...incrementButtonProps}>+</Button>
      </div>
    </div>
  );
}

<NumberField
  label="Price"
  defaultValue={6}
  formatOptions={{
    style: 'currency',
    currency: 'USD'
  }} />

----------------------------------------

TITLE: Required Picker with Icon Indicator in React Spectrum
DESCRIPTION: Shows how to create a required Picker field with an icon necessity indicator. The isRequired and necessityIndicator props are used to indicate the required state.

LANGUAGE: tsx
CODE:
<Picker label="Choose frequency" isRequired necessityIndicator="icon">
  <Item key="rarely">Rarely</Item>
  <Item key="sometimes">Sometimes</Item>
  <Item key="always">Always</Item>
</Picker>

----------------------------------------

TITLE: Variable Height Items Data Generation
DESCRIPTION: Helper code that generates sample data with variable text lengths for testing variable height virtualized lists.

LANGUAGE: tsx
CODE:
let lorem = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sit amet tristique risus. In sit amet suscipit lorem. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In condimentum imperdiet metus non condimentum. Duis eu velit et quam accumsan tempus at id velit. Duis elementum elementum purus, id tempus mauris posuere a. Nunc vestibulum sapien pellentesque lectus commodo ornare.'.split(' ');
let items = [];
for (let i = 0; i < 5000; i++) {
  let words = Math.max(2, Math.floor(Math.random() * 25));
  let name = lorem.slice(0, words).join(' ');
  items.push({id: i, name});
}

----------------------------------------

TITLE: Configuring React Spectrum Blog Post Components
DESCRIPTION: Sets up the blog post layout components from React Spectrum documentation system and exports the default layout.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Video} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: CSS Styling for Unavailable Calendar Dates
DESCRIPTION: CSS styles that apply a strikethrough and invalid color to calendar cells that have the data-unavailable attribute set, visually indicating dates that cannot be selected.

LANGUAGE: css
CODE:
.react-aria-Calendar {
  .react-aria-CalendarCell {
    &[data-unavailable] {
      text-decoration: line-through;
      color: var(--invalid-color);
    }
  }
}

----------------------------------------

TITLE: HTML Form Integration with NumberField
DESCRIPTION: Shows how to integrate NumberField with HTML forms using the name prop and currency formatting options.

LANGUAGE: tsx
CODE:
<NumberField
  label="Transaction amount"
  name="amount"
  defaultValue={45}
  formatOptions={{
    style: 'currency',
    currency: 'USD'
  }} />

----------------------------------------

TITLE: Customizing Calendar Grid Header Styling
DESCRIPTION: Example showing how to customize the styling of Calendar grid headers by manually rendering CalendarGridHeader and CalendarGridBody components with custom styling applied to header cells.

LANGUAGE: tsx
CODE:
import {CalendarGridHeader, CalendarHeaderCell, CalendarGridBody} from 'react-aria-components';

<Calendar aria-label="Appointment date">
  <header>
    <Button slot="previous">◀</Button>
    <Heading />
    <Button slot="next">▶</Button>
  </header>
  <CalendarGrid>
    <CalendarGridHeader>
      {day => <CalendarHeaderCell style={{color: 'var(--blue)'}}>{day}</CalendarHeaderCell>}
    </CalendarGridHeader>
    <CalendarGridBody>
      {date => <CalendarCell date={date} />}
    </CalendarGridBody>
  </CalendarGrid>
</Calendar>

----------------------------------------

TITLE: Customizing Calendar Grid Header Styling
DESCRIPTION: Example showing how to customize the styling of Calendar grid headers by manually rendering CalendarGridHeader and CalendarGridBody components with custom styling applied to header cells.

LANGUAGE: tsx
CODE:
import {CalendarGridHeader, CalendarHeaderCell, CalendarGridBody} from 'react-aria-components';

<Calendar aria-label="Appointment date">
  <header>
    <Button slot="previous">◀</Button>
    <Heading />
    <Button slot="next">▶</Button>
  </header>
  <CalendarGrid>
    <CalendarGridHeader>
      {day => <CalendarHeaderCell style={{color: 'var(--blue)'}}>{day}</CalendarHeaderCell>}
    </CalendarGridHeader>
    <CalendarGridBody>
      {date => <CalendarCell date={date} />}
    </CalendarGridBody>
  </CalendarGrid>
</Calendar>

----------------------------------------

TITLE: Rendering Drag and Drop Anatomy Diagram
DESCRIPTION: Displays an anatomy diagram visualization of drag and drop interactions, showing the relationships between drag source, drag preview, and drop target components with proper accessibility attributes.

LANGUAGE: JSX
CODE:
<Anatomy role="img" aria-label="Drag and drop anatomy diagram, showing drag source, drag preview, and drop target." />

----------------------------------------

TITLE: Referencing @react-spectrum/radio Package in Markdown
DESCRIPTION: A markdown heading that identifies the @react-spectrum/radio package, part of the React Spectrum component library.

LANGUAGE: markdown
CODE:
# @react-spectrum/radio

----------------------------------------

TITLE: Basic ColorArea Implementation
DESCRIPTION: A simple example showing how to create an uncontrolled ColorArea component with a default color value.

LANGUAGE: tsx
CODE:
<ColorArea defaultValue="#7f0000" />

----------------------------------------

TITLE: Adding basePath Support to Next.js App Router Provider
DESCRIPTION: This code extends the ClientProviders component to support Next.js basePath configuration by adding a useHref function that prepends the base path to all href values.

LANGUAGE: tsx
CODE:
// app/provider.tsx
// ...

export function ClientProviders({children}) {
  let router = useRouter();
  /*- begin highlight -*/
  let useHref = (href: string) => process.env.BASE_PATH + href;
  /*- end highlight -*/

  return (
    <Provider theme={defaultTheme} router={{navigate: router.push, useHref}}>
      {children}
    </Provider>
  );
}

----------------------------------------

TITLE: Implementing ReadOnly ColorField
DESCRIPTION: Example of a read-only ColorField using the isReadOnly prop, which keeps the field focusable but prevents editing.

LANGUAGE: tsx
CODE:
<MyColorField label="Read only" isReadOnly value="#7f007f" />

----------------------------------------

TITLE: Expanded Disclosure Component
DESCRIPTION: Demonstrates creating a Disclosure component that is expanded by default upon rendering using the defaultExpanded prop.

LANGUAGE: tsx
CODE:
<Disclosure defaultExpanded>
  <DisclosureTitle>System Requirements</DisclosureTitle>
  <DisclosurePanel>
    Details about system requirements here.
  </DisclosurePanel>
</Disclosure>

----------------------------------------

TITLE: Parsing ZonedDateTime for TimeField in React Spectrum
DESCRIPTION: Example of using parseZonedDateTime to create a TimeField with a specific time zone. This preserves the exact local time and time zone information.

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

<TimeField
  label="Event time"
  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />

----------------------------------------

TITLE: Configuring Vite for React Spectrum Macros
DESCRIPTION: Vite configuration to enable the unplugin-parcel-macros plugin which is necessary for React Spectrum style macros to work properly. This setup should be placed in vite.config.ts.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vite'
import macrosPlugin from 'unplugin-parcel-macros';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    // ...
    macrosPlugin.vite()
    // ..
  ],
})

----------------------------------------

TITLE: Disabled Calendar Component Example
DESCRIPTION: Example showing how to make a Calendar component disabled using the isDisabled prop. When disabled, calendar cells cannot be focused or selected by the user.

LANGUAGE: tsx
CODE:
<Calendar aria-label="Event date" isDisabled />

----------------------------------------

TITLE: Using CSS Functions with Spectrum Dimension Values
DESCRIPTION: Demonstrates how to use Spectrum dimension variables inside CSS functions like calc(). This example creates a View with a width calculated relative to its container.

LANGUAGE: tsx
CODE:
<View width="calc(100% - size-2000)" height="single-line-height" backgroundColor="green-500" />

----------------------------------------

TITLE: Organizing React Spectrum Components with ExampleCard in JSX
DESCRIPTION: This code snippet demonstrates the structure used throughout the file to organize and display React Spectrum components. Components are grouped into semantic sections and displayed using ExampleCard components with consistent props for URL, title, and description.

LANGUAGE: JSX
CODE:
<section className={styles.cardGroup}>

<ExampleCard
  url="Dialog.html"
  title="Dialog"
  description="A dialog is an overlay shown above other content in an application.">
  <Dialog />
</ExampleCard>

<ExampleCard
  url="Popover.html"
  title="Popover"
  description="A popover displays interactive content in context with a trigger element.">
  <Popover />
</ExampleCard>

<ExampleCard
  url="Tooltip.html"
  title="Tooltip"
  description="A tooltip displays a description of an element on hover or focus.">
  <Tooltip />
</ExampleCard>

</section>

----------------------------------------

TITLE: Parsing ISO 8601 Duration Strings in TSX
DESCRIPTION: Examples of using the parseDuration function to convert ISO 8601 duration strings into DateTimeDuration objects. Shows parsing standard, negative, and decimal durations.

LANGUAGE: tsx
CODE:
parseDuration('P3Y6M6W4DT12H30M5S');
// => {years: 3, months: 6, weeks: 6, days: 4, hours: 12, minutes: 30, seconds: 5}

parseDuration('-P3Y6M6W4DT12H30M5S');
// => {years: -3, months: -6, weeks: -6, days: -4, hours: -12, minutes: -30, seconds: -5}

parseDuration('P3Y6M6W4DT12H30M5.5S');
// => {years: 3, months: 6, weeks: 6, days: 4, hours: 12, minutes: 30, seconds: 5.5}

----------------------------------------

TITLE: Importing Media Assets for Color Picker Documentation
DESCRIPTION: Imports image and video assets used in the blog post to demonstrate color picker functionality and bundle size issues.

LANGUAGE: jsx
CODE:
import bundleSizeImageUrl from 'url:../assets/bundle-size.webp';
import initialVideoUrl from 'url:../assets/color-picker-initial.mp4';
import finalVideoUrl from 'url:../assets/color-picker-final.mp4';

----------------------------------------

TITLE: Configuring Optimize Locales Plugin with Vite
DESCRIPTION: Configuration example for using the optimize-locales-plugin with Vite. This setup only includes English (US) and French (France) locale strings in the final bundle.

LANGUAGE: javascript
CODE:
// vite.config.js
import optimizeLocales from '@react-aria/optimize-locales-plugin';

export default {
  plugins: [
    optimizeLocales.vite({
      locales: ['en-US', 'fr-FR']
    })
  ]
};

----------------------------------------

TITLE: Using Default Slot with ButtonContext
DESCRIPTION: Demonstration of using the DEFAULT_SLOT constant to provide props to components without a specified slot name, allowing for both default and named slot usage in the same component.

LANGUAGE: tsx
CODE:
import {Button, ButtonContext, DEFAULT_SLOT} from 'react-aria-components';

function MyCustomComponent({children}) {
  return (
    <ButtonContext.Provider
      value={{
        slots: {
          [DEFAULT_SLOT]: {
            className: "left-button"
          },
          end: {
            className: "right-button"
          }
        }
      }}>
      {children}
    </ButtonContext.Provider>
  );
}

<MyCustomComponent>
  {/* Consumes the props passed to the default slot */}
  <Button>Click me</Button>
</MyCustomComponent>

<MyCustomComponent>
  {/* Consumes the props passed to the "end" slot */}
  <Button slot="end">Click me</Button>
</MyCustomComponent>

----------------------------------------

TITLE: Implementing ListBox and Option Components for SearchAutocomplete in React Aria
DESCRIPTION: Implementation of ListBox and Option components used to display the filtered options in a SearchAutocomplete. Uses the useListBox and useOption hooks from React Aria to handle accessibility and interactions.

LANGUAGE: tsx
CODE:
import {useListBox, useOption} from '@react-aria/listbox';

function ListBox(props) {
  let ref = React.useRef(null);
  let {listBoxRef = ref, state} = props;
  let {listBoxProps} = useListBox(props, state, listBoxRef);

  return (
    <ul
      {...listBoxProps}
      ref={listBoxRef}
      style={{
        margin: 0,
        padding: 0,
        listStyle: "none",
        maxHeight: 150,
        overflow: "auto",
        minWidth: 200
      }}>
      {[...state.collection].map(item => (
        <Option
          key={item.key}
          item={item}
          state={state} />
      ))}
    </ul>
  );
}

function Option({item, state}) {
  let ref = React.useRef(null);
  let {optionProps, isSelected, isFocused, isDisabled} = useOption({key: item.key}, state, ref);

  let backgroundColor;
  let color = 'black';

  if (isSelected) {
    backgroundColor = 'blueviolet';
    color = 'white';
  } else if (isFocused) {
    backgroundColor = 'gray';
  } else if (isDisabled) {
    backgroundColor = 'transparent';
    color = 'gray';
  }

  return (
    <li
      {...optionProps}
      ref={ref}
      style={{
        background: backgroundColor,
        color: color,
        padding: '2px 5px',
        outline: 'none',
        cursor: 'pointer'
      }}>
      {item.rendered}
    </li>
  );
}

----------------------------------------

TITLE: Implementing a Reusable Checkbox Component
DESCRIPTION: Creates a reusable Checkbox component using useCheckbox and useToggleState hooks that can be used for row selection in tables and other contexts.

LANGUAGE: tsx
CODE:
import {useToggleState} from '@react-stately/toggle';
import {useCheckbox} from '@react-aria/checkbox';

function Checkbox(props) {
  let ref = React.useRef<HTMLInputElement | null>(null);
  let state = useToggleState(props);
  let {inputProps} = useCheckbox(props, state, ref);
  return <input {...inputProps} ref={ref} style={props.style} />;
}

----------------------------------------

TITLE: Cycling Days During Daylight Saving Transitions in TypeScript
DESCRIPTION: Demonstrates how changing the date around a daylight saving time transition may adjust the hour if it would be invalid in the target date. During spring forward, 2 AM is skipped.

LANGUAGE: tsx
CODE:
// A "spring forward" transition
let date = parseZonedDateTime('2020-03-07T02:00-08:00[America/Los_Angeles]');
date.cycle('day', 1); // 2020-03-08T03:00-07:00[America/Los_Angeles]

----------------------------------------

TITLE: Configuring Single Selection Mode in React Spectrum ListView
DESCRIPTION: This example shows how to configure the ListView to allow only single selection using the selectionMode prop set to 'single'. It reuses the PokemonList component defined earlier with specific selection configurations.

LANGUAGE: tsx
CODE:
// Using the same list as above
<PokemonList selectionMode="single" selectionStyle="highlight" aria-label="ListView with single selection" />

----------------------------------------

TITLE: Controlled Disclosure Example
DESCRIPTION: Example of a controlled disclosure component where the expanded state is managed by the parent component using React state and the onExpandedChange event handler.

LANGUAGE: tsx
CODE:
function ControlledDisclosure(props) {
  let [isExpanded, setExpanded] = React.useState(false);

  return (
    <Disclosure title="System Requirements" isExpanded={isExpanded} onExpandedChange={setExpanded}>
      Details about system requirements here.
    </Disclosure>
  );
}

----------------------------------------

TITLE: Multiple Selection Toggle Button Group Example
DESCRIPTION: Example of a ToggleButtonGroup with multiple selection mode, allowing users to select multiple buttons simultaneously.

LANGUAGE: tsx
CODE:
<ToggleButtonGroup selectionMode="multiple">
  <ToggleButton id="bold">Bold</ToggleButton>
  <ToggleButton id="italic">Italic</ToggleButton>
  <ToggleButton id="underline">Underline</ToggleButton>
</ToggleButtonGroup>

----------------------------------------

TITLE: TagGroup with Visual Label in TSX
DESCRIPTION: Shows how to add a visible label to a TagGroup using the label prop instead of just an aria-label.

LANGUAGE: tsx
CODE:
<TagGroup label="Categories">
  <Item>News</Item>
  <Item>Travel</Item>
  <Item>Gaming</Item>
  <Item>Shopping</Item>
</TagGroup>

----------------------------------------

TITLE: Importing React Spectrum Component in JSX
DESCRIPTION: Example of how to import a component from the React Spectrum library. This is typically placed at the top of a file where the component will be used.

LANGUAGE: jsx
CODE:
import {Component} from '@react-spectrum/COMPONENT_NAME';

----------------------------------------

TITLE: Setting Different Sizes for ProgressBar
DESCRIPTION: This example shows how to create ProgressBars in different sizes (Small and Large) using the size prop.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-300">
  <ProgressBar label="Small" size="S" value={70} />
  <ProgressBar label="Large" size="L" value={70} />
</Flex>

----------------------------------------

TITLE: Styling Link Items in ComboBox with CSS
DESCRIPTION: CSS that styles ListBoxItem elements with href attributes to remove text decoration and set cursor to pointer for better usability.

LANGUAGE: css
CODE:
.react-aria-ListBoxItem[href] {
  text-decoration: none;
  cursor: pointer;
}

----------------------------------------

TITLE: Example of Number Parsing and Formatting Across Locales
DESCRIPTION: Demonstrates how to use NumberParser and NumberFormatter from the @internationalized/number package to parse a percentage in Arabic numbering system and format it as a Latin number. Shows cross-locale number handling capability.

LANGUAGE: tsx
CODE:
import {NumberParser, NumberFormatter} from '@internationalized/number';

let parser = new NumberParser('ar-SA', {style: 'percent'});
let number = parser.parse('٤٥٪'); // 0.45

let formatter = new NumberFormatter('en-US', {style: 'percent'});
formatter.format(number); // '45%'

----------------------------------------

TITLE: Vertical ColorSlider Orientation
DESCRIPTION: Demonstrates changing the ColorSlider orientation to vertical instead of the default horizontal layout.

LANGUAGE: tsx
CODE:
<ColorSlider defaultValue="#7f0000" channel="red" orientation="vertical" />

----------------------------------------

TITLE: Importing View Component in React Spectrum
DESCRIPTION: Example of importing the View component from React Spectrum along with TextField for demonstration purposes.

LANGUAGE: jsx
CODE:
import {View} from '@react-spectrum/view';
import {TextField} from '@react-spectrum/textfield';

----------------------------------------

TITLE: Styling Boolean States with Tailwind CSS Plugin
DESCRIPTION: Example of styling boolean states like data-pressed using the Tailwind CSS plugin for React Aria Components.

LANGUAGE: jsx
CODE:
<Button className="pressed:bg-blue">
  {/* ... */}
</Button>

----------------------------------------

TITLE: Converting ZonedDateTime to Absolute UTC String in TypeScript
DESCRIPTION: Demonstrates using toAbsoluteString() to convert a ZonedDateTime to a UTC string. This format is useful when the exact time regardless of time zone is needed.

LANGUAGE: tsx
CODE:
date.toAbsoluteString(); // '2022-02-03T20:24:45.000Z'

----------------------------------------

TITLE: Implementing a Dimension Viewer Component with React Spectrum
DESCRIPTION: Creates a component to visualize Spectrum dimension values that adapts to different scales (desktop vs mobile). Uses Provider, Picker, View, and Flex components.

LANGUAGE: tsx
CODE:
import {View} from '@react-spectrum/view';
import {Flex} from '@react-spectrum/layout';
import {Picker, Item} from '@react-spectrum/picker';
import {Provider} from '@react-spectrum/provider';
import {Example} from '@react-spectrum/docs/src/ThemeSwitcher';
import {useState} from 'react';
import dnaDocs from 'docs:@react-types/shared/src/dna.d.ts';

function DimensionViewer() {
  let [selectedKey, setSelectedKey] = useState('medium');

  return (
    <Example>
      <Picker label="Scale" selectedKey={selectedKey} onSelectionChange={setSelectedKey}>
        <Item key="medium">Medium (desktop)</Item>
        <Item key="large">Large (mobile)</Item>
      </Picker>
      <Provider scale={selectedKey}>
        <ul style={{listStyle: 'none', padding: 0, overflow: 'auto'}}>
          {dnaDocs.links[dnaDocs.exports.DimensionValue.id].value.elements.filter(v => v.value && !v.value.startsWith('static')).map(v =>
            <li key={v.value}>
              <Flex alignItems="center" marginBottom="size-25">
                <View backgroundColor="blue-400" width={v.value} height="size-250" marginEnd="size-100" flexShrink={0} />
                {v.value}
              </Flex>
            </li>
          )}
        </ul>
      </Provider>
    </Example>
  );
}

ReactDOM.createRoot(document.getElementById('dimension-viewer')).render(<DimensionViewer />);

----------------------------------------

TITLE: Handling Locale-Specific Date Queries with @internationalized/date
DESCRIPTION: This example shows how to use the @internationalized/date library's locale-specific functions like isWeekend and startOfWeek. These functions handle differences in which days are considered weekends or the first day of the week across different locales.

LANGUAGE: tsx
CODE:
import {isWeekend, startOfWeek} from '@internationalized/date';

// a Sunday
let date = new CalendarDate(2022, 2, 6);

isWeekend(date, 'en-US');
// => true
isWeekend(date, 'he-IL');
// => false
startOfWeek(date, 'en-US');
// => 2022-02-06
startOfWeek(date, 'fr-FR');
// => 2022-01-31

----------------------------------------

TITLE: Converting Time to ISO 8601 String in TypeScript
DESCRIPTION: Demonstrates converting a Time object to an ISO 8601 formatted string using the toString method.

LANGUAGE: tsx
CODE:
let date = new Time(9, 45);
date.toString(); // '09:45:00'

----------------------------------------

TITLE: Importing Documentation Components and Assets in React Spectrum
DESCRIPTION: Imports documentation components, hero images, and various SVG assets for component illustrations in the React Spectrum documentation.

LANGUAGE: JSX
CODE:
import {Highlights, Hero} from '@react-spectrum/docs';
import heroNarrow from 'url:../assets/ReactSpectrum_Mobile_976x1025_1x.png';
import heroNarrow2x from 'url:../assets/ReactSpectrum_Mobile_976x1025_2x.png';
import heroNarrowWebp from 'url:../assets/ReactSpectrum_Mobile_976x1025_1x.webp';
import heroNarrow2xWebp from 'url:../assets/ReactSpectrum_Mobile_976x1025_2x.webp';
import heroWide from 'url:../assets/ReactSpectrum_976x445_1x.png';
import heroWide2x from 'url:../assets/ReactSpectrum_976x445_2x.png';
import heroWideWebp from 'url:../assets/ReactSpectrum_976x445_1x.webp';
import heroWide2xWebp from 'url:../assets/ReactSpectrum_976x445_2x.webp';
import clsx from 'clsx';
import linkStyle from '@adobe/spectrum-css-temp/components/link/vars.css';
import styles from '@react-spectrum/docs/src/docs.css';
import typographyStyles from '@adobe/spectrum-css-temp/components/typography/vars.css';

----------------------------------------

TITLE: Disabled Disclosure Component
DESCRIPTION: Shows how to create a disabled Disclosure component that cannot be interacted with by using the isDisabled prop.

LANGUAGE: tsx
CODE:
<Disclosure isDisabled>
  <DisclosureTitle>System Requirements</DisclosureTitle>
  <DisclosurePanel>
    Details about system requirements here.
  </DisclosurePanel>
</Disclosure>

----------------------------------------

TITLE: Vertical Orientation Toggle Button Group Example
DESCRIPTION: Example demonstrating a vertically oriented ToggleButtonGroup by setting the orientation prop to 'vertical'.

LANGUAGE: tsx
CODE:
<ToggleButtonGroup orientation="vertical">
  <ToggleButton id="grid">Grid</ToggleButton>
  <ToggleButton id="list">List</ToggleButton>
  <ToggleButton id="gallery">Gallery</ToggleButton>
</ToggleButtonGroup>

----------------------------------------

TITLE: Overriding First Day of Week with startOfWeek Function
DESCRIPTION: Shows how to override the default first day of the week determined by locale when using the startOfWeek function by providing an optional third parameter with a weekday abbreviation.

LANGUAGE: tsx
CODE:
startOfWeek(date, 'en-US', 'mon'); // 2022-01-31T09:45

----------------------------------------

TITLE: Calculating Weeks in Month with Locale Awareness
DESCRIPTION: Shows how to use the getWeeksInMonth function to determine the number of weeks in a given month based on locale. The result varies depending on the first day of the week in the locale.

LANGUAGE: tsx
CODE:
import {getWeeksInMonth} from '@internationalized/date';

let date = parseZonedDateTime('2023-01-01T08:30[America/Los_Angeles]');

getWeeksInMonth(date, 'en-US'); // 5
getWeeksInMonth(date, 'fr-FR'); // 6

----------------------------------------

TITLE: Creating a Disabled Select Component
DESCRIPTION: Example showing how to fully disable a Select component using the isDisabled prop.

LANGUAGE: tsx
CODE:
<MySelect label="Choose frequency" isDisabled>
  <ListBoxItem id="rarely">Rarely</ListBoxItem>
  <ListBoxItem id="sometimes">Sometimes</ListBoxItem>
  <ListBoxItem id="always">Always</ListBoxItem>
</MySelect>

----------------------------------------

TITLE: Converting ZonedDateTime to ISO String in TypeScript
DESCRIPTION: Shows how to convert a ZonedDateTime object to an ISO 8601 formatted string using toString(). This preserves the time zone and UTC offset information, useful for calendar events or location-specific times.

LANGUAGE: tsx
CODE:
let date = new ZonedDateTime(
  2022, 2, 3,
  'America/Los_Angeles', -28800000,
  12, 24, 45
);

date.toString(); // '2022-02-03T12:24:45-08:00[America/Los_Angeles]'

----------------------------------------

TITLE: Inserting Items Before Other Items in Tree
DESCRIPTION: Examples showing how to insert items before other items in a tree data structure using the insertAfter method, including inserting single or multiple items.

LANGUAGE: tsx
CODE:
// Insert an item before another item
tree.insertAfter('Kangaroo', {name: 'Horse'});

// Insert multiple items before another item
tree.insertAfter('Kangaroo', {name: 'Horse'}, {name: 'Giraffe'});

----------------------------------------

TITLE: Cycling Fields in CalendarDateTime
DESCRIPTION: Examples of using the cycle method to increment or decrement single fields with wrapping behavior. When a field reaches its minimum or maximum value, it wraps around rather than affecting other fields.

LANGUAGE: tsx
CODE:
let date = new CalendarDateTime(2022, 12, 31, 23, 59);
date.cycle('day', 1); // 2022-12-01T23:59
date.cycle('month', 1); // 2022-01-31T23:59
date.cycle('hour', 1); // 2022-12-31T00:59
date.cycle('minute', 1); // 2022-12-31T23:00

let date = new CalendarDateTime(2022, 1, 1, 0, 0);
date.cycle('day', -1); // 2022-01-31T00:00
date.cycle('month', -1); // 2022-12-01T00:00
date.cycle('hour', -1); // 2022-01-01T23:00
date.cycle('minute', -1); // 2022-01-01T00:59

----------------------------------------

TITLE: Multiple Expanded Sections in DisclosureGroup
DESCRIPTION: Example showing how to allow multiple disclosures to be expanded simultaneously using the allowsMultipleExpanded prop. This overrides the default behavior where only one disclosure can be open at a time.

LANGUAGE: tsx
CODE:
<DisclosureGroup defaultExpandedKeys={["system", "personal"]} allowsMultipleExpanded>
  <MyDisclosure id="system" title="System Requirements" >
    Details about system requirements here
  </MyDisclosure>
  <MyDisclosure id="personal" title="Personal Information" >
    Details about personal information here
  </MyDisclosure>
</DisclosureGroup>

----------------------------------------

TITLE: Link Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This comparison shows Link component differences with Spectrum 2 supporting slot, staticColor, and isStandalone properties not in v3, while v3 has an 'overBackground' variant option that should be replaced with staticColor in S2.

LANGUAGE: typescript
CODE:
slot | 🟢 `null \| string` | –
variant | 🟢 `'primary' \| 'secondary'` | 🔴 `'overBackground' \| 'primary' \| 'secondary'`
staticColor | 🟢 `'black' \| 'white'` | –
isStandalone | 🟢 `boolean` | –

----------------------------------------

TITLE: Implementing Disabled ComboBox in React Spectrum
DESCRIPTION: Example of a ComboBox with the isDisabled prop, which renders the component in a non-interactive state that cannot be focused or changed.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal" isDisabled>
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: DateField with User's Local Time Zone
DESCRIPTION: Demonstrates how to parse an absolute date and time into the user's local time zone using the parseAbsoluteToLocal function.

LANGUAGE: tsx
CODE:
import {parseAbsoluteToLocal} from '@internationalized/date';

<DateField
  label="Event date"
  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}
/>

----------------------------------------

TITLE: Controlled and Uncontrolled RangeCalendar with Date Values
DESCRIPTION: Demonstrates how to use both controlled and uncontrolled values in RangeCalendar components. Uses parseDate from @internationalized/date to create date objects for the calendar ranges.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState({
    start: parseDate('2020-02-03'),
    end: parseDate('2020-02-12')
  });

  return (
    <Flex gap="size-300" wrap>
      <RangeCalendar
        aria-label="Date range (uncontrolled)"
        defaultValue={{
          start: parseDate('2020-02-03'),
          end: parseDate('2020-02-12')
        }} />
      <RangeCalendar
        aria-label="Date range (controlled)"
        value={value}
        onChange={setValue} />
    </Flex>
  );
}

----------------------------------------

TITLE: Configuring Label Positions in ProgressBar
DESCRIPTION: This example demonstrates different label positioning options for ProgressBar, including default top position, side position, and hiding the value label.

LANGUAGE: tsx
CODE:
<Flex direction="column" maxWidth="size-3000" gap="size-300">
  <ProgressBar label="Loading…" value={30} />
  <ProgressBar label="Loading…" labelPosition="side" value={30} />
  <ProgressBar label="Loading…" showValueLabel={false} value={30} />
</Flex>

----------------------------------------

TITLE: Form with Top Label Position and Start Alignment in React Spectrum
DESCRIPTION: Visual configuration example showing a form with labels positioned above fields (top) and aligned to the start of the container.

LANGUAGE: tsx
CODE:
<Form
  labelPosition="top"
  labelAlign="start"
  aria-label="Top position, start alignment example"
  maxWidth="size-3600">
  <TextField label="Name" />
  <RadioGroup label="Favorite pet">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: Configuring Provider with Client Side Router in React Spectrum
DESCRIPTION: This example demonstrates the basic pattern for setting up the Provider component with a client-side router. It shows how to pass the navigate and useHref functions from your router to the Provider.

LANGUAGE: tsx
CODE:
import {Provider, defaultTheme} from '@adobe/react-spectrum';
import {useNavigate, useHref} from 'your-router';

function App() {
  let navigate = useNavigate();

  return (
    <Provider theme={defaultTheme} router={{navigate, useHref}}>
      {/* ... */}
    </Provider>
  );
}

----------------------------------------

TITLE: Creating ZonedDateTime with Japanese Calendar and Era in TypeScript
DESCRIPTION: Creates a ZonedDateTime using the Japanese calendar system with a specific era (Heisei), representing a date equivalent to April 30th, 2019 in the Gregorian calendar.

LANGUAGE: tsx
CODE:
import {JapaneseCalendar} from '@internationalized/date';

let date = new ZonedDateTime(
  new JapaneseCalendar(), 'heisei', 31, 4, 30,
  'America/Los_Angeles', -28800000,
  9, 15
);

----------------------------------------

TITLE: Using Time Zones with DatePicker Component
DESCRIPTION: Example of DatePicker with time zone support using parseZonedDateTime to create a date with a specific time zone (America/Los_Angeles).

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

<DatePicker
  label="Event date"
  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />

----------------------------------------

TITLE: CSS for Horizontal Card Layout
DESCRIPTION: CSS implementation for a horizontal card layout using the same slot names but with a different grid structure. This shows how the design can be changed without modifying the React components.

LANGUAGE: css
CODE:
.container {
  display: grid;
  grid-template-columns: auto 5px 200px;
  grid-template-rows: auto 1fr;
  grid-template-areas:
    "preview . title"
    "preview . body";
}

.preview {
  grid-area: preview;
}

.title {
  grid-area: title;
  margin: 5px 5px 5px 0; /* ideally off in heading land */
}

.body {
  grid-area: body;
}

/* these have no place in the grid, hide them :) */
.avatar, .divider, .footer {
  display: none;
}

----------------------------------------

TITLE: Implementing Stack Layout for ColorSwatchPicker in React
DESCRIPTION: Example showing how to use the 'layout' prop to display ColorSwatchPicker items in a vertical stack instead of the default horizontal arrangement.

LANGUAGE: tsx
CODE:
<MyColorSwatchPicker layout="stack">
  <MyColorSwatchPickerItem color="#A00" />
  <MyColorSwatchPickerItem color="#f80" />
  <MyColorSwatchPickerItem color="#080" />
  <MyColorSwatchPickerItem color="#08f" />
  <MyColorSwatchPickerItem color="#088" />
  <MyColorSwatchPickerItem color="#008" />
</MyColorSwatchPicker>

----------------------------------------

TITLE: Implementing Mouse Animation Component for Desktop Interactions
DESCRIPTION: This snippet imports and renders a MouseAnimation component to demonstrate mouse-specific interactions in React Aria. It's used to showcase features like hover effects and cursor feedback that enhance desktop user experience.

LANGUAGE: tsx
CODE:
import {MouseAnimation} from './home/MouseAnimation';
<MouseAnimation />

----------------------------------------

TITLE: Enabling Backward Compatibility for Spectrum CSS Class Names
DESCRIPTION: Example of using the UNSAFE_keepSpectrumClassNames prop on the Provider component to maintain backward compatibility. This opt-in flag retains the original Spectrum CSS class names alongside CSS module class names during the transition period.

LANGUAGE: jsx
CODE:
<Provider UNSAFE_keepSpectrumClassNames={true}>
  {/* ... */}
</Provider>

----------------------------------------

TITLE: Styling Non-Boolean States with Tailwind CSS Plugin
DESCRIPTION: Example of styling non-boolean states using the name-value pattern with the Tailwind CSS plugin for React Aria Components.

LANGUAGE: jsx
CODE:
<Tabs className="orientation-vertical:flex-row">
  {/* ... */}
</Tabs>

----------------------------------------

TITLE: Setting Custom Hour Cycle Format in DateField Component
DESCRIPTION: This example shows how to override the default hour format in a DateField component. By setting the hourCycle prop to 24, the component will display time in 24-hour format regardless of the user's locale preferences.

LANGUAGE: tsx
CODE:
<DateField
  label="Appointment time"
  granularity="minute"
  hourCycle={24} />

----------------------------------------

TITLE: Targeting UI States with Data Attributes in CSS
DESCRIPTION: Shows how to use data attributes to target different UI states of React Aria components in CSS selectors.

LANGUAGE: css
CODE:
.react-aria-Row[data-selected] {
  /* ... */
}

.react-aria-Row[data-focused] {
  /* ... */
}

----------------------------------------

TITLE: Read-only Calendar Component Example
DESCRIPTION: Example showing how to make a Calendar component read-only using the isReadOnly prop. This makes the calendar's value immutable while still allowing it to remain focusable.

LANGUAGE: tsx
CODE:
<Calendar aria-label="Event date" value={today(getLocalTimeZone())} isReadOnly />

----------------------------------------

TITLE: Importing Documentation Resources for useDraggableCollectionState
DESCRIPTION: Imports documentation resources, component utilities, and package data needed to build the documentation page for the useDraggableCollectionState hook.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/dnd';
import {HeaderInfo, TypeContext, InterfaceType, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/dnd/package.json';

----------------------------------------

TITLE: Converting CalendarDate to Native JavaScript Date Object
DESCRIPTION: Shows how to convert a CalendarDate to a JavaScript Date object using the toDate method with time zone identifiers. This requires specifying a time zone since Date objects represent exact moments in time.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';

let date = new CalendarDate(2022, 2, 3);
date.toDate('America/Los_Angeles'); // Thu Feb 03 2022 00:00:00 GMT-0800 (Pacific Standard Time)
date.toDate(getLocalTimeZone()); // e.g. Thu Feb 03 2022 00:00:00 GMT-0500 (Eastern Standard Time)

----------------------------------------

TITLE: Creating a Localized String Dictionary for React Aria Components
DESCRIPTION: Creates a customized localized string dictionary containing only the strings for specific React Aria components to minimize bundle size. This example shows how to include strings for just the datepicker component.

LANGUAGE: tsx
CODE:
import {createLocalizedStringDictionary} from 'react-aria-components/i18n';

const dictionary = createLocalizedStringDictionary(['@react-aria/datepicker']);

----------------------------------------

TITLE: Creating ZonedDateTime with Buddhist Calendar in TypeScript
DESCRIPTION: Creates a ZonedDateTime using the Buddhist calendar system, representing a date equivalent to April 30th, 2020 at 9:15 AM in the Gregorian calendar.

LANGUAGE: tsx
CODE:
import {BuddhistCalendar} from '@internationalized/date';

let date = new ZonedDateTime(
  new BuddhistCalendar(), 2563, 4, 30,
  'America/Los_Angeles', -28800000,
  9, 15
);

----------------------------------------

TITLE: Implementing Card and Dialog Components with Specialized Child Components
DESCRIPTION: Example of the traditional approach with specialized child components for different containers, showing the pattern of having container-specific child components.

LANGUAGE: JSX
CODE:
<Card>
  <CardHeader />
  <CardDescription />
  <CardFooter />
</Card>

LANGUAGE: JSX
CODE:
<Dialog>
  <DialogHeader />
  <DialogDescription />
  <DialogFooter />
</Dialog>

----------------------------------------

TITLE: Styling React Aria Components with CSS
DESCRIPTION: Shows how to style React Aria components using CSS. The example includes targeting default class names and using data attributes for different component states.

LANGUAGE: css
CODE:
/* Consistent default classes for each component */
.react-aria-DatePicker {
  /* ... */

  .react-aria-Group {
    border: 2px solid var(--gray-300);
  }
}

.react-aria-CalendarCell {
  color: var(--gray-900);

  /* Style interactive states with data attributes */
  &[data-pressed] {
    background: var(--gray-100);
  }

  &[data-selected] {
    color: var(--gray-50);
    background: var(--blue-600);
  }
}

----------------------------------------

TITLE: Referencing React Spectrum List Package in Markdown
DESCRIPTION: A simple markdown reference to the @react-spectrum/list package, indicating it's part of the main React Spectrum repository.

LANGUAGE: markdown
CODE:
# @react-spectrum/list

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Optimizing Bundle Size with Custom Calendar Creation Function
DESCRIPTION: Demonstrates how to reduce bundle size by providing a custom createCalendar function that only includes the Gregorian calendar implementation instead of all supported calendars.

LANGUAGE: jsx
CODE:
import {useRangeCalendarState} from '@react-stately/datepicker';
import {useLocale} from '@react-aria/i18n';
import {GregorianCalendar} from '@internationalized/date';

function createCalendar(identifier) {
  switch (identifier) {
    case 'gregory':
      return new GregorianCalendar();
    default:
      throw new Error(`Unsupported calendar ${identifier}`);
  }
}

function RangeCalendar(props) {
  let {locale} = useLocale();
  let state = useRangeCalendarState({
    ...props,
    locale,
    createCalendar
  });

  // ...
}

----------------------------------------

TITLE: Using Start Date Functions with CalendarDateTime in TypeScript
DESCRIPTION: Demonstrates how to use startOfYear, startOfMonth, and startOfWeek functions to get the beginning of different time periods while preserving time components. The examples show how locale affects the startOfWeek results.

LANGUAGE: tsx
CODE:
import {startOfYear, startOfMonth, startOfWeek} from '@internationalized/date';

let date = new CalendarDateTime(2022, 2, 3, 9, 45);

startOfYear(date); // 2022-01-01T09:45
startOfMonth(date); // 2022-02-01T09:45
startOfWeek(date, 'en-US'); // 2022-01-30T09:45
startOfWeek(date, 'fr-FR'); // 2022-01-31T09:45

----------------------------------------

TITLE: Nesting Color Schemes in React Spectrum
DESCRIPTION: Shows how to nest Provider components with different color schemes, allowing different parts of an application to have different appearances.

LANGUAGE: tsx
CODE:
<Provider colorScheme="light">
  <ActionButton margin="size-200">I'm a light button</ActionButton>
  <Provider colorScheme="dark">
    <ActionButton margin="size-200">I'm a dark button</ActionButton>
  </Provider>
</Provider>

----------------------------------------

TITLE: Starting the Development Server with Yarn in a Vite Project
DESCRIPTION: Commands to install dependencies and start the Vite development server. After running these commands, the application will be accessible at http://localhost:5173.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Overriding First Day of Week with getDayOfWeek Function
DESCRIPTION: Shows how to override the default first day of the week when using the getDayOfWeek function by providing an optional firstDayOfWeek parameter with a weekday abbreviation.

LANGUAGE: tsx
CODE:
getDayOfWeek(date, 'en-US', 'mon'); // 6

----------------------------------------

TITLE: Quiet TextField Variant
DESCRIPTION: Shows how to use the quiet variant of the TextField component with simplified visual styling.

LANGUAGE: tsx
CODE:
<TextField label="Email" isQuiet />

----------------------------------------

TITLE: Adding Icons to ActionGroup Items in React
DESCRIPTION: Shows how to add icons to ActionGroup items by placing them alongside Text components. This pattern allows for combined icon and text buttons.

LANGUAGE: tsx
CODE:
import Draw from '@spectrum-icons/workflow/Draw';
import Copy from '@spectrum-icons/workflow/Copy';
import Delete from '@spectrum-icons/workflow/Delete';
import {Text} from '@react-spectrum/text';

<ActionGroup>
  <Item key="edit">
    <Draw />
    <Text>Edit</Text>
  </Item>
  <Item key="copy">
    <Copy />
    <Text>Copy</Text>
  </Item>
  <Item key="delete">
    <Delete />
    <Text>Delete</Text>
  </Item>
</ActionGroup>

----------------------------------------

TITLE: CSS for Image Preview in DropZone
DESCRIPTION: CSS styling for displaying dropped images within a DropZone, ensuring the image covers the entire zone while maintaining proper border radius.

LANGUAGE: css
CODE:
.images {
  position: absolute;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: var(--spectrum-alias-border-radius-small);
}

----------------------------------------

TITLE: Importing ColorWheel Component in React
DESCRIPTION: Basic imports needed to use the ColorWheel component from the React Spectrum library along with the Flex layout component.

LANGUAGE: jsx
CODE:
import {ColorWheel} from '@react-spectrum/color';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Importing Meter Component in React Spectrum
DESCRIPTION: Shows how to import the Meter component from the @react-spectrum/meter package along with Flex from @react-spectrum/layout for layout purposes.

LANGUAGE: jsx
CODE:
import {Flex} from '@react-spectrum/layout';
import {Meter} from '@react-spectrum/meter';

----------------------------------------

TITLE: Hiding Time Zone Display in DateRangePicker
DESCRIPTION: Example demonstrating how to hide the time zone abbreviation in DateRangePicker when using ZonedDateTime objects, useful when the time zone is implicit or displayed elsewhere in the interface.

LANGUAGE: tsx
CODE:
<DateRangePicker
  label="Date range"
  defaultValue={{
    start: parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]'),
    end: parseZonedDateTime('2022-11-08T19:45[America/Los_Angeles]')
  }}
  hideTimeZone />

----------------------------------------

TITLE: Styling with Tailwind CSS using Data Attributes
DESCRIPTION: Example of using Tailwind CSS data attribute modifiers to style different states of React Aria components.

LANGUAGE: jsx
CODE:
<ListBoxItem className="data-[selected]:bg-blue-400 data-[disabled]:bg-gray-100">
  Item
</ListBoxItem>

----------------------------------------

TITLE: Styling with Tailwind CSS using Data Attributes
DESCRIPTION: Example of using Tailwind CSS data attribute modifiers to style different states of React Aria components.

LANGUAGE: jsx
CODE:
<ListBoxItem className="data-[selected]:bg-blue-400 data-[disabled]:bg-gray-100">
  Item
</ListBoxItem>

----------------------------------------

TITLE: Styling React Spectrum Components with Style Macros
DESCRIPTION: Example of styling a React Spectrum Button component using the style() macro. For React Spectrum components, the styles prop is used instead of className.

LANGUAGE: jsx
CODE:
<Button styles={style({marginStart: 16})}>
  Hello Spectrum 2!
</Button>

----------------------------------------

TITLE: Creating Default Expanded Disclosure in React
DESCRIPTION: Example of an uncontrolled Disclosure component that is expanded by default using the defaultExpanded prop.

LANGUAGE: tsx
CODE:
<MyDisclosure title="Download, Install, and Set Up" defaultExpanded>
  Instructions on how to download, install, and set up
</MyDisclosure>

----------------------------------------

TITLE: Styling ModalOverlay with CSS Variable for Mobile Viewport
DESCRIPTION: CSS example for styling the ModalOverlay component, showing how to use the --visual-viewport-height CSS custom property to account for virtual keyboards on mobile devices.

LANGUAGE: css
CODE:
.react-aria-ModalOverlay {
  position: fixed;
  height: var(--visual-viewport-height);
}

----------------------------------------

TITLE: Importing Documentation Dependencies for useDisclosureState
DESCRIPTION: Imports necessary components and data for rendering documentation, including docs metadata, UI components for documentation display, and package information.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/disclosure';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/disclosure/package.json';

----------------------------------------

TITLE: Basic CSS Styling for React Aria Components
DESCRIPTION: CSS example showing how to style React Aria components using the default class names and data attributes for different states. This approach allows for styling without having to specify custom class names.

LANGUAGE: css
CODE:
.react-aria-ListBoxItem {
  color: black;

  &[data-selected] {
    background: slateblue;
    color: white;
  }
}

----------------------------------------

TITLE: NumberField with Stepping Configuration
DESCRIPTION: Implementation of NumberField with custom step and formatting configurations. This example shows how to create a field with sign display, fraction digits constraints, and step increment value.

LANGUAGE: tsx
CODE:
<NumberField
  label="Exposure"
  formatOptions={{
    signDisplay: 'exceptZero',
    minimumFractionDigits: 1,
    maximumFractionDigits: 2
  }}
  defaultValue={0}
  step={0.1} />

----------------------------------------

TITLE: Importing React Spectrum Core CSS for Theming
DESCRIPTION: Code to import the required CSS file at the application root level to support light and dark themes in React Spectrum.

LANGUAGE: javascript
CODE:
import "@react-spectrum/s2/page.css";

----------------------------------------

TITLE: Configuring Webpack for Parcel Macros in Next.js
DESCRIPTION: Configuration for Next.js to support the unplugin-parcel-macros webpack plugin, which is necessary for using style macros with React Spectrum.

LANGUAGE: javascript
CODE:
import macrosPlugin from 'unplugin-parcel-macros';

/** @type {import('next').NextConfig} */
const nextConfig = {
  webpack(config, {}) {
    config.plugins.push(macrosPlugin.webpack());

    return config;
  }
};

export default nextConfig;

----------------------------------------

TITLE: TabPanels Component Removal in Spectrum 2
DESCRIPTION: This note explains that the TabPanels component has been removed in Spectrum 2, and developers should instead provide TabPanel elements as direct children of the Tabs component.

LANGUAGE: typescript
CODE:
This component has been removed in S2. Provide `<TabPanel>` elements as direct children of `<Tabs>` instead.

----------------------------------------

TITLE: Using useKeyboard Hook for Keyboard Event Handling in React
DESCRIPTION: Demonstrates how to use the useKeyboard hook to handle keyboard events in a React component. The example creates an input field that logs key down and key up events to a list.

LANGUAGE: TSX
CODE:
import {useKeyboard} from '@react-aria/interactions';

function Example() {
  let [events, setEvents] = React.useState([]);
  let {keyboardProps} = useKeyboard({
    onKeyDown: e => setEvents(
      events => [`key down: ${e.key}`, ...events]
    ),
    onKeyUp: e => setEvents(
      events => [`key up: ${e.key}`, ...events]
    )
  });

  return (
    <>
      <label htmlFor="example">Example</label>
      <input
        {...keyboardProps}
        id="example" />
      <ul style={{
        height: 100,
        overflow: 'auto',
        border: '1px solid gray',
        width: 200
      }}>
        {events.map((e, i) => <li key={i}>{e}</li>)}
      </ul>
    </>
  );
}

----------------------------------------

TITLE: Released Packages List in React Spectrum Project
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem, including React Aria Components, React Spectrum components, React Stately, React Types, and Spectrum Icons with their corresponding version numbers.

LANGUAGE: markdown
CODE:
```
- @adobe/react-spectrum@3.30.0
- @internationalized/date@3.5.0
- @react-aria/accordion@3.0.0-alpha.21
- @react-aria/actiongroup@3.6.2
- @react-aria/aria-modal-polyfill@3.7.5
- @react-aria/autocomplete@3.0.0-alpha.20
- @react-aria/breadcrumbs@3.5.5
- @react-aria/button@3.8.2
- @react-aria/calendar@3.5.0
- @react-aria/checkbox@3.11.0
- @react-aria/color@3.0.0-beta.24
- @react-aria/combobox@3.6.4
- @react-aria/datepicker@3.7.0
- @react-aria/dialog@3.5.5
- @react-aria/dnd@3.4.1
- @react-aria/focus@3.14.1
- @react-aria/grid@3.8.2
- @react-aria/gridlist@3.6.0
- @react-aria/i18n@3.8.2
- @react-aria/interactions@3.18.0
- @react-aria/label@3.7.0
- @react-aria/landmark@3.0.0-beta.4
- @react-aria/link@3.5.4
- @react-aria/listbox@3.10.2
- @react-aria/menu@3.10.2
- @react-aria/meter@3.4.5
- @react-aria/numberfield@3.8.0
- @react-aria/overlays@3.17.0
- @react-aria/progress@3.4.5
- @react-aria/radio@3.8.0
- @react-aria/searchfield@3.5.5
- @react-aria/select@3.12.1
- @react-aria/selection@3.16.2
- @react-aria/separator@3.3.5
- @react-aria/slider@3.7.0
- @react-aria/spinbutton@3.5.2
- @react-aria/ssr@3.8.0
- @react-aria/switch@3.5.4
- @react-aria/table@3.12.0
- @react-aria/tabs@3.7.0
- @react-aria/tag@3.1.2
- @react-aria/textfield@3.12.0
- @react-aria/toast@3.0.0-beta.4
- @react-aria/toggle@3.8.0
- @react-aria/tooltip@3.6.2
- @react-aria/utils@3.20.0
- @react-aria/virtualizer@3.9.2
- @react-aria/visually-hidden@3.8.4
- @react-spectrum/accordion@3.0.0-alpha.23
- @react-spectrum/actionbar@3.2.0
- @react-spectrum/actiongroup@3.9.2
- @react-spectrum/autocomplete@3.0.0-alpha.21
- @react-spectrum/avatar@3.0.4
- @react-spectrum/badge@3.1.5
- @react-spectrum/breadcrumbs@3.8.2
- @react-spectrum/button@3.13.0
- @react-spectrum/buttongroup@3.6.5
- @react-spectrum/calendar@3.4.0
- @react-spectrum/card@3.0.0-alpha.22
- @react-spectrum/checkbox@3.8.0
- @react-spectrum/color@3.0.0-beta.25
- @react-spectrum/combobox@3.10.1
- @react-spectrum/contextualhelp@3.6.2
- @react-spectrum/datepicker@3.7.1
- @react-spectrum/dialog@3.8.2
- @react-spectrum/divider@3.5.5
- @react-spectrum/dnd@3.3.2
- @react-spectrum/form@3.6.5
- @react-spectrum/icon@3.7.5
- @react-spectrum/illustratedmessage@3.4.5
- @react-spectrum/image@3.4.5
- @react-spectrum/inlinealert@3.1.0
- @react-spectrum/label@3.14.0
- @react-spectrum/labeledvalue@3.1.5
- @react-spectrum/layout@3.5.5
- @react-spectrum/link@3.5.5
- @react-spectrum/list@3.6.2
- @react-spectrum/listbox@3.11.2
- @react-spectrum/menu@3.14.0
- @react-spectrum/meter@3.4.5
- @react-spectrum/numberfield@3.7.1
- @react-spectrum/overlays@5.4.0
- @react-spectrum/picker@3.12.0
- @react-spectrum/progress@3.6.2
- @react-spectrum/provider@3.8.2
- @react-spectrum/radio@3.6.0
- @react-spectrum/searchfield@3.7.5
- @react-spectrum/slider@3.6.1
- @react-spectrum/statuslight@3.5.5
- @react-spectrum/switch@3.4.5
- @react-spectrum/table@3.11.1
- @react-spectrum/tabs@3.7.2
- @react-spectrum/tag@3.1.2
- @react-spectrum/text@3.4.5
- @react-spectrum/textfield@3.10.5
- @react-spectrum/theme-dark@3.5.5
- @react-spectrum/theme-default@3.5.5
- @react-spectrum/theme-express@3.0.0-alpha.7
- @react-spectrum/theme-light@3.4.5
- @react-spectrum/toast@3.0.0-beta.4
- @react-spectrum/tooltip@3.5.4
- @react-spectrum/utils@3.10.2
- @react-spectrum/view@3.6.2
- @react-spectrum/well@3.4.5
- @react-stately/calendar@3.4.0
- @react-stately/checkbox@3.5.0
- @react-stately/collections@3.10.1
- @react-stately/color@3.4.2
- @react-stately/combobox@3.7.0
- @react-stately/data@3.10.2
- @react-stately/datepicker@3.7.0
- @react-stately/dnd@3.2.4
- @react-stately/grid@3.8.1
- @react-stately/layout@3.13.1
- @react-stately/list@3.9.2
- @react-stately/menu@3.5.5
- @react-stately/numberfield@3.6.1
- @react-stately/overlays@3.6.2
- @react-stately/radio@3.9.0
- @react-stately/searchfield@3.4.5
- @react-stately/select@3.5.4
- @react-stately/selection@3.13.4
- @react-stately/slider@3.4.2
- @react-stately/table@3.11.1
- @react-stately/tabs@3.6.0
- @react-stately/toggle@3.6.2
- @react-stately/tooltip@3.4.4
- @react-stately/tree@3.7.2
- @react-stately/virtualizer@3.6.2
- @react-types/accordion@3.0.0-alpha.16
- @react-types/actionbar@3.1.2
- @react-types/actiongroup@3.4.4
- @react-types/autocomplete@3.0.0-alpha.16
- @react-types/avatar@3.0.2
- @react-types/badge@3.1.4
- @react-types/breadcrumbs@3.6.2
- @react-types/button@3.8.0
- @react-types/buttongroup@3.3.4
- @react-types/calendar@3.4.0
- @react-types/card@3.0.0-alpha.18
- @react-types/checkbox@3.5.1
- @react-types/color@3.0.0-beta.19
- @react-types/combobox@3.8.0
- @react-types/contextualhelp@3.2.5
- @react-types/datepicker@3.6.0
- @react-types/dialog@3.5.5
- @react-types/divider@3.3.4
- @react-types/form@3.5.3
- @react-types/grid@3.2.1
- @react-types/illustratedmessage@3.3.4
- @react-types/image@3.3.4
- @react-types/label@3.8.0
- @react-types/layout@3.3.10
- @react-types/link@3.4.5
- @react-types/list@3.2.6
- @react-types/listbox@3.4.4
- @react-types/menu@3.9.4
- @react-types/meter@3.3.4
- @react-types/numberfield@3.6.0
- @react-types/overlays@3.8.2
- @react-types/progress@3.4.3
- @react-types/provider@3.6.4
- @react-types/radio@3.5.1
- @react-types/searchfield@3.5.0
- @react-types/select@3.8.3
- @react-types/shared@3.20.0
- @react-types/slider@3.6.1
- @react-types/statuslight@3.3.4
- @react-types/switch@3.4.1
- @react-types/table@3.8.1
- @react-types/tabs@3.3.2
- @react-types/text@3.3.4
- @react-types/textfield@3.8.0
- @react-types/tooltip@3.4.4
- @react-types/view@3.4.4
- @react-types/well@3.3.4
- @spectrum-icons/color@3.5.5
- @spectrum-icons/express@3.0.0-alpha.9
- @spectrum-icons/illustrations@3.6.5
- @spectrum-icons/ui@3.5.5
- @spectrum-icons/workflow@4.2.4
- react-aria@3.28.0
- react-aria-components@1.0.0-beta.0
- react-stately@3.26.0
- tailwindcss-react-aria-components@1.0.0-beta.0
```

----------------------------------------

TITLE: Comparing CalendarDateTime Objects
DESCRIPTION: Using the compare method to determine the chronological relationship between two CalendarDateTime objects. Returns a negative number if the first date is before the second, zero if equal, or a positive number if after.

LANGUAGE: tsx
CODE:
let a = new CalendarDateTime(2022, 2, 3, 9, 45);
let b = new CalendarDateTime(2022, 3, 4, 12, 20);

a.compare(b) < 0; // true
b.compare(a) > 0; // true

----------------------------------------

TITLE: Comparing CalendarDateTime Objects
DESCRIPTION: Using the compare method to determine the chronological relationship between two CalendarDateTime objects. Returns a negative number if the first date is before the second, zero if equal, or a positive number if after.

LANGUAGE: tsx
CODE:
let a = new CalendarDateTime(2022, 2, 3, 9, 45);
let b = new CalendarDateTime(2022, 3, 4, 12, 20);

a.compare(b) < 0; // true
b.compare(a) > 0; // true

----------------------------------------

TITLE: Styling ListBox Sections with CSS
DESCRIPTION: This CSS example shows how to style ListBox sections with proper spacing between sections and formatting for section headers. It adds margin to all sections except the first and applies bold styling to headers.

LANGUAGE: css
CODE:
.react-aria-ListBox {
  .react-aria-ListBoxSection:not(:first-child) {
    margin-top: 12px;
  }

  .react-aria-Header {
    font-size: 1.143rem;
    font-weight: bold;
    padding: 0 0.714rem;
  }
}

----------------------------------------

TITLE: Importing Documentation Resources for useSingleSelectListState
DESCRIPTION: Imports necessary documentation components, API information, and package data needed to generate the documentation page for useSingleSelectListState.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/list';
import {HeaderInfo, TypeContext, InterfaceType, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/list/package.json';

----------------------------------------

TITLE: Importing and Exporting React Spectrum Blog Components
DESCRIPTION: Imports BlogPostLayout and Hero components from React Spectrum docs package and exports the BlogPostLayout component as the default export.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Listing Released React Spectrum Ecosystem Packages with Versions in Markdown
DESCRIPTION: This snippet provides a complete inventory of all released packages in the React Spectrum ecosystem with their version numbers. It includes core component libraries (@adobe/react-spectrum), accessibility hooks (@react-aria/*), state management utilities (@react-stately/*), TypeScript interfaces (@react-types/*), and icon packages (@spectrum-icons/*).

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum@3.22.0
- @react-aria/accordion@3.0.0-alpha.12
- @react-aria/actiongroup@3.4.2
- @react-aria/aria-modal-polyfill@3.6.0
- @react-aria/autocomplete@3.0.0-alpha.11
- @react-aria/breadcrumbs@3.3.2
- @react-aria/button@3.6.2
- @react-aria/calendar@3.0.3
- @react-aria/checkbox@3.6.0
- @react-aria/color@3.0.0-beta.16
- @react-aria/combobox@3.4.2
- @react-aria/datepicker@3.1.2
- @react-aria/dialog@3.4.0
- @react-aria/dnd@3.0.0-rc.0
- @react-aria/focus@3.9.0
- @react-aria/grid@3.5.0
- @react-aria/gridlist@3.1.0
- @react-aria/i18n@3.6.1
- @react-aria/interactions@3.12.0
- @react-aria/label@3.4.2
- @react-aria/landmark@3.0.0-alpha.3
- @react-aria/link@3.3.4
- @react-aria/listbox@3.7.0
- @react-aria/menu@3.6.2
- @react-aria/meter@3.3.2
- @react-aria/numberfield@3.3.2
- @react-aria/overlays@3.11.0
- @react-aria/progress@3.3.2
- @react-aria/radio@3.4.0
- @react-aria/searchfield@3.4.2
- @react-aria/select@3.8.2
- @react-aria/selection@3.11.0
- @react-aria/separator@3.2.4
- @react-aria/slider@3.2.2
- @react-aria/spinbutton@3.1.4
- @react-aria/switch@3.2.4
- @react-aria/table@3.5.0
- @react-aria/tabs@3.3.2
- @react-aria/tag@3.0.0-alpha.10
- @react-aria/textfield@3.7.2
- @react-aria/toggle@3.4.0
- @react-aria/tooltip@3.3.2
- @react-aria/utils@3.14.0
- @react-aria/virtualizer@3.5.1
- @react-aria/visually-hidden@3.5.0
- @react-spectrum/accordion@3.0.0-alpha.13
- @react-spectrum/actionbar@3.0.0-alpha.13
- @react-spectrum/actiongroup@3.7.0
- @react-spectrum/autocomplete@3.0.0-alpha.11
- @react-spectrum/avatar@3.0.0-alpha.10
- @react-spectrum/badge@3.0.0
- @react-spectrum/breadcrumbs@3.5.2
- @react-spectrum/button@3.10.0
- @react-spectrum/buttongroup@3.4.2
- @react-spectrum/calendar@3.1.2
- @react-spectrum/card@3.0.0-alpha.12
- @react-spectrum/checkbox@3.6.0
- @react-spectrum/color@3.0.0-beta.16
- @react-spectrum/combobox@3.6.0
- @react-spectrum/contextualhelp@3.3.0
- @react-spectrum/datepicker@3.2.0
- @react-spectrum/dialog@3.5.2
- @react-spectrum/divider@3.4.2
- @react-spectrum/dnd@3.0.0-rc.0
- @react-spectrum/form@3.5.0
- @react-spectrum/icon@3.6.1
- @react-spectrum/illustratedmessage@3.3.2
- @react-spectrum/image@3.3.2
- @react-spectrum/label@3.8.0
- @react-spectrum/labeledvalue@3.0.0
- @react-spectrum/layout@3.4.2
- @react-spectrum/link@3.4.2
- @react-spectrum/list@3.1.0
- @react-spectrum/listbox@3.8.0
- @react-spectrum/menu@3.8.2
- @react-spectrum/meter@3.3.2
- @react-spectrum/numberfield@3.4.2
- @react-spectrum/overlays@3.8.0
- @react-spectrum/picker@3.8.0
- @react-spectrum/progress@3.3.2
- @react-spectrum/provider@3.5.2
- @react-spectrum/radio@3.4.0
- @react-spectrum/searchfield@3.5.2
- @react-spectrum/searchwithin@3.0.0-alpha.11
- @react-spectrum/slider@3.3.0
- @react-spectrum/statuslight@3.4.2
- @react-spectrum/switch@3.3.2
- @react-spectrum/table@3.4.0
- @react-spectrum/tabs@3.3.2
- @react-spectrum/tag@3.0.0-alpha.10
- @react-spectrum/text@3.3.2
- @react-spectrum/textfield@3.8.0
- @react-spectrum/theme-dark@3.3.4
- @react-spectrum/theme-default@3.3.4
- @react-spectrum/theme-light@3.2.4
- @react-spectrum/tooltip@3.3.2
- @react-spectrum/utils@3.7.4
- @react-spectrum/view@3.3.2
- @react-spectrum/well@3.3.2
- @react-stately/calendar@3.0.3
- @react-stately/checkbox@3.3.0
- @react-stately/collections@3.4.4
- @react-stately/color@3.2.0
- @react-stately/combobox@3.2.2
- @react-stately/data@3.7.0
- @react-stately/datepicker@3.1.0
- @react-stately/dnd@3.0.0-rc.0
- @react-stately/grid@3.4.0
- @react-stately/layout@3.8.0
- @react-stately/list@3.5.4
- @react-stately/menu@3.4.2
- @react-stately/numberfield@3.2.2
- @react-stately/overlays@3.4.2
- @react-stately/radio@3.6.0
- @react-stately/searchfield@3.3.2
- @react-stately/select@3.3.2
- @react-stately/selection@3.11.0
- @react-stately/slider@3.2.2
- @react-stately/table@3.5.0
- @react-stately/tabs@3.2.2
- @react-stately/toggle@3.4.2
- @react-stately/tooltip@3.2.2
- @react-stately/tree@3.3.4
- @react-stately/virtualizer@3.3.1
- @react-types/accordion@3.0.0-alpha.10
- @react-types/actionbar@3.0.0-alpha.10
- @react-types/actiongroup@3.3.4
- @react-types/autocomplete@3.0.0-alpha.9
- @react-types/avatar@3.0.0-alpha.9
- @react-types/badge@3.0.0
- @react-types/breadcrumbs@3.4.4
- @react-types/button@3.6.2
- @react-types/buttongroup@3.2.4
- @react-types/calendar@3.0.3
- @react-types/card@3.0.0-alpha.10
- @react-types/checkbox@3.4.0
- @react-types/color@3.0.0-beta.13
- @react-types/combobox@3.5.4
- @react-types/contextualhelp@3.1.4
- @react-types/datepicker@3.1.2
- @react-types/dialog@3.4.4
- @react-types/divider@3.2.4
- @react-types/form@3.4.0
- @react-types/grid@3.1.4
- @react-types/illustratedmessage@3.2.4
- @react-types/image@3.2.4
- @react-types/label@3.7.0
- @react-types/layout@3.3.4
- @react-types/link@3.3.4
- @react-types/list@3.1.0
- @react-types/listbox@3.3.4
- @react-types/menu@3.7.2
- @react-types/meter@3.2.4
- @react-types/numberfield@3.3.4
- @react-types/overlays@3.6.4
- @react-types/progress@3.2.4
- @react-types/provider@3.5.4
- @react-types/radio@3.3.0
- @react-types/searchfield@3.3.4
- @react-types/searchwithin@3.0.0-alpha.9
- @react-types/select@3.6.4
- @react-types/shared@3.15.0
- @react-types/slider@3.3.0
- @react-types/statuslight@3.2.4
- @react-types/switch@3.2.4
- @react-types/table@3.3.2
- @react-types/tabs@3.1.4
- @react-types/tag@3.0.0-alpha.8
- @react-types/text@3.2.4
- @react-types/textfield@3.6.0
- @react-types/tooltip@3.2.4
- @react-types/view@3.2.4
- @react-types/well@3.2.4
- @spectrum-icons/color@3.4.3
- @spectrum-icons/illustrations@3.5.0
- @spectrum-icons/ui@3.3.3
- @spectrum-icons/workflow@4.0.3
- react-aria@3.20.0
- react-stately@3.18.0

----------------------------------------

TITLE: Parsing ISO 8601 Duration Strings in TypeScript
DESCRIPTION: Uses the parseDuration function to convert ISO 8601 duration strings into DateTimeDuration objects, supporting decimal values and negative durations.

LANGUAGE: tsx
CODE:
parseDuration('PT20H35M15S')
// => {hours: 20, minutes: 35, seconds: 15}

parseDuration('-PT20H35M15S')
// =>  {hours: -20, minutes: -35, seconds: -15}

parseDuration('PT20H35M15,75S')
// => {hours: 20, minutes: 35, seconds: 15.75}

----------------------------------------

TITLE: Importing ExampleList Component for Documentation
DESCRIPTION: Imports the ExampleList component from React Spectrum docs, which will be used to display a list of examples related to styling and animating React Aria Components.

LANGUAGE: JSX
CODE:
import {ExampleList} from '@react-spectrum/docs/src/ExampleList';

----------------------------------------

TITLE: Creating Focus-Only Tooltip in TSX
DESCRIPTION: Example showing how to create a tooltip that only appears on focus and not on hover by setting the trigger prop to "focus".

LANGUAGE: tsx
CODE:
<TooltipButton tooltip="Burn CD" trigger="focus">💿</TooltipButton>

----------------------------------------

TITLE: Implementing Basic Draggable Element with React Aria useDrag Hook
DESCRIPTION: This example demonstrates a simple draggable element that provides plain text data. It supports mouse, touch, keyboard, and screen reader interactions through the useDrag hook.

LANGUAGE: tsx
CODE:
import {useDrag} from '@react-aria/dnd';

function Draggable() {
  let {dragProps, isDragging} = useDrag({
    getItems() {
      return [{
        'text/plain': 'hello world'
      }];
    }
  });

  return (
    <div {...dragProps} role="button" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>
      Drag me
    </div>
  );
}

<Draggable />
<DropTarget />

----------------------------------------

TITLE: Importing Tailwind CSS for React Aria Components
DESCRIPTION: Imports the Tailwind CSS global styles needed for styling the dialog component.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Importing TimeField Component in React Spectrum
DESCRIPTION: Shows how to import the TimeField component from React Spectrum's datepicker package along with the Flex layout component.

LANGUAGE: jsx
CODE:
import {TimeField} from '@react-spectrum/datepicker';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Form with Native HTML Validation Behavior in React Spectrum
DESCRIPTION: Demonstrates setting validationBehavior to "native" to enable HTML form validation that prevents submission when fields are invalid.

LANGUAGE: tsx
CODE:
import {ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  <TextField label="Email" name="email" type="email" isRequired />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Installing React Aria Components with Package Manager
DESCRIPTION: Command to install the React Aria Components package using yarn. This single package contains all available components for ease of dependency management.

LANGUAGE: bash
CODE:
yarn add react-aria-components

----------------------------------------

TITLE: Setting Second Granularity in TimeField
DESCRIPTION: Example showing how to configure a TimeField with second-level granularity instead of the default minute granularity.

LANGUAGE: tsx
CODE:
<TimeField
  label="Event time"
  granularity="second"
  defaultValue={parseAbsoluteToLocal('2021-04-07T18:45:22Z')} />

----------------------------------------

TITLE: Running Next.js Development Server with Package Managers
DESCRIPTION: Commands to start the Next.js development server using various JavaScript package managers. This allows you to run the application locally for development purposes on the default port 3000.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Importing Documentation Components and Package Data
DESCRIPTION: Imports necessary documentation components, color documentation data, and package information for the useColorFieldState documentation page.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/color';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/color/package.json';

----------------------------------------

TITLE: Configuring Rollup for React Spectrum and Macros Support
DESCRIPTION: Complete Rollup configuration file that includes setup for React, style macros, and other necessary plugins to support React Spectrum components.

LANGUAGE: javascript
CODE:
import macrosPlugin from 'unplugin-parcel-macros';

export default {
  input: 'src/main.js',
  output: {
    file: 'public/bundle.js',
    format: 'iife', // immediately-invoked function expression — suitable for <script> tags
    sourcemap: true
  },
  plugins: [
    nodeResolve({
      extensions: ['.js', '.jsx', '.mjs']
    }), // from https://www.codeguage.com/blog/setup-rollup-for-react
    macrosPlugin.rollup(), // added for style macros, has to be before babel
    babel({
      babelHelpers: 'bundled',
      presets: ['@babel/preset-react'],
      extensions: ['.js', '.jsx']
    }), // from https://www.codeguage.com/blog/setup-rollup-for-react
    commonjs(), // converts date-fns to ES modules
    replace({
      preventAssignment: false,
      'process.env.NODE_ENV': '"development"'
    }), // from https://www.codeguage.com/blog/setup-rollup-for-react
    css({
      output: 'bundle.css'
    }), // added to bundle React Spectrum's Spectrum 2 css
    reactSvg(), // added for illustration svg's
    production && terser() // minify, but only in production
  ]
};

----------------------------------------

TITLE: Styling Spectrum Button with style macro
DESCRIPTION: Example of using the style() macro to apply additional styling to a React Spectrum Button component via the styles prop.

LANGUAGE: jsx
CODE:
<Button styles={style({marginStart: 16})}>
  Hello Spectrum 2!
</Button>

----------------------------------------

TITLE: Importing Button Component in React Spectrum
DESCRIPTION: Shows how to import the Button component and related components for use in a React application.

LANGUAGE: jsx
CODE:
import {Button} from '@react-spectrum/button';
import Bell from '@spectrum-icons/workflow/Bell';
import {View} from '@react-spectrum/view';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Displaying Package Information in Markdown
DESCRIPTION: Simple markdown snippet that identifies the package name and directs users to the main React Spectrum repository for more detailed information.

LANGUAGE: markdown
CODE:
# @react-spectrum/slider

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Disabling Individual Checkboxes
DESCRIPTION: Example showing how to disable individual checkboxes within a CheckboxGroup by applying the isDisabled prop to specific checkboxes rather than the entire group.

LANGUAGE: tsx
CODE:
<MyCheckboxGroup label="Favorite sports">
  <MyCheckbox value="soccer">Soccer</MyCheckbox>
  <MyCheckbox value="baseball" isDisabled>Baseball</MyCheckbox>
  <MyCheckbox value="basketball">Basketball</MyCheckbox>
</MyCheckboxGroup>

----------------------------------------

TITLE: Implementing Card Component with SlotContext
DESCRIPTION: Example implementation of a Card component that provides class names through a SlotContext for semantic elements to consume.

LANGUAGE: JSX
CODE:
import styles from '@adobe/spectrum-css/components/card/vars.css';
export const Card = (props) => {

  return (
    <div className={classNames(styles, 'spectrum-Card')}>
      <SlotContext.Provider
        value={{
          title: classNames(styles, 'spectrum-Card-title')
        }}>
        {props.children}
      </SlotContext.Provider>
    </div>
  );
};

----------------------------------------

TITLE: Importing Layout Component for Documentation
DESCRIPTION: Imports and exports the Layout component from @react-spectrum/docs to structure the documentation page.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Defining Blog Post Metadata in Markdown Frontmatter
DESCRIPTION: Frontmatter section defining metadata for the blog post, including a description of the release and the publication date. This information is used to generate the blog post's metadata.

LANGUAGE: Markdown
CODE:
---
description: This release includes a new `useMove` interaction hook for handling drags across mouse, touch, and keyboard! In addition, we've fixed many bugs since our last release, and worked on several new components to be released soon. Thanks to all of the contributors!
date: 2020-10-29
---

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports and exports the Layout component from the React Spectrum documentation package for page structure.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Installing Remix with Unstable Vite Template
DESCRIPTION: Command to create a new Remix project using the unstable Vite template. This uses npx with create-remix to scaffold a new project using the template from the Remix GitHub repository.

LANGUAGE: shellscript
CODE:
npx create-remix@latest --template remix-run/remix/templates/unstable-vite

----------------------------------------

TITLE: Basic Well Component Example in React Spectrum
DESCRIPTION: Demonstrates the basic usage of the Well component with text content.

LANGUAGE: tsx
CODE:
<Well>Better a little which is well done, than a great deal imperfectly.</Well>

----------------------------------------

TITLE: Rendering a Modal Dialog with ModalTrigger in React
DESCRIPTION: Example showing how to use the ModalTrigger component to render a dialog with form fields and a submit button that closes the modal when clicked.

LANGUAGE: tsx
CODE:
// Reuse the Dialog from your component library. See below for details.
import {Dialog} from 'your-component-library';

<ModalTrigger label="Open Dialog">
  {close =>
    <Dialog title="Enter your name">
      <form style={{display: 'flex', flexDirection: 'column'}}>
        <label htmlFor="first-name">First Name:</label>
        <input id="first-name" />
        <label htmlFor="last-name">Last Name:</label>
        <input id="last-name" />
        <Button
          onPress={close}
          style={{marginTop: 10}}>
          Submit
        </Button>
      </form>
    </Dialog>
  }
</ModalTrigger>

----------------------------------------

TITLE: Converting CalendarDateTime to Native Date Object
DESCRIPTION: Using the toDate method to convert a CalendarDateTime to a native JavaScript Date object. This requires specifying a time zone and can handle daylight saving time transitions.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';

let date = new CalendarDateTime(2022, 2, 3, 9, 45);
date.toDate('America/Los_Angeles'); // Thu Feb 03 2022 09:45:00 GMT-0800 (Pacific Standard Time)
date.toDate(getLocalTimeZone()); // e.g. Thu Feb 03 2022 09:45:00 GMT-0500 (Eastern Standard Time)

----------------------------------------

TITLE: Importing BlogPostLayout Component in React Spectrum Documentation
DESCRIPTION: This code snippet shows how to import the BlogPostLayout and Hero components from the React Spectrum docs package and export the BlogPostLayout as the default component. This is used for structuring blog post pages in the React Spectrum documentation.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Querying Elements by Role in React Testing Library
DESCRIPTION: This example demonstrates how to query elements by their ARIA role using React Testing Library, which is the recommended approach for testing React Aria components.

LANGUAGE: TypeScript
CODE:
import {render} from '@testing-library/react';

let tree = render(<MyComponent />);
let option = tree.getByRole('button');

----------------------------------------

TITLE: Using International Calendars with DateField
DESCRIPTION: This example demonstrates how to use I18nProvider to display a DateField using the Indian calendar system in Hindi language, while still emitting Gregorian dates through the onChange handler.

LANGUAGE: tsx
CODE:
import {I18nProvider} from '@react-aria/i18n';

function Example() {
  let [date, setDate] = React.useState(null);
  return (
    <I18nProvider locale="hi-IN-u-ca-indian">
      <DateField label="Date" value={date} onChange={setDate} />
      <p>Selected date: {date?.toString()}</p>
    </I18nProvider>
  );
}

----------------------------------------

TITLE: Styling TagGroup with CSS
DESCRIPTION: CSS styling for TagGroup, TagList, and Tag components, providing basic visual appearance and interaction states like hover, focus, and selection.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-TagGroup {
  display: flex;
  flex-direction: column;
  gap: 2px;
  font-size: small;
  color: var(--text-color);
}

.react-aria-TagList {
  display: flex;
  flex-wrap: wrap;
  gap: 4px;
}

.react-aria-Tag {
  color: var(--text-color);
  border: 1px solid var(--border-color);
  forced-color-adjust: none;
  border-radius: 4px;
  padding: 2px 8px;
  font-size: 0.929rem;
  outline: none;
  cursor: default;
  display: flex;
  align-items: center;
  transition: border-color 200ms;

  &[data-hovered] {
    border-color: var(--border-color-hover);
  }

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: 2px;
  }

  &[data-selected] {
    border-color: var(--highlight-background);
    background: var(--highlight-background);
    color: var(--highlight-foreground);
  }
}

----------------------------------------

TITLE: Implementing Static Selection in ListBox with React Spectrum
DESCRIPTION: Example demonstrating how to use onSelectionChange handler to update React state with the selected item in a static ListBox component. The example shows single selection mode with fixed items.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function StaticExample() {
  let [frequency, setFrequency] = React.useState<Selection>(new Set());

  return (
    <>
      <ListBox
        aria-label="Choose frequency"
        selectionMode="single"
        onSelectionChange={selected => setFrequency(selected)}
        width="size-2400">
        <Item key="Rarely">Rarely</Item>
        <Item key="Sometimes">Sometimes</Item>
        <Item key="Always">Always</Item>
      </ListBox>
      <p>You selected: {[...frequency][0]}</p>
    </>
  );
}

----------------------------------------

TITLE: Importing and Exporting React Spectrum Blog Components in JSX
DESCRIPTION: Imports the BlogLayout and PostListing components from the @react-spectrum/docs package and exports BlogLayout as the default export. These components are used to structure the blog page of React Spectrum.

LANGUAGE: jsx
CODE:
import {BlogLayout, PostListing} from '@react-spectrum/docs';
export default BlogLayout;

----------------------------------------

TITLE: Importing and Rendering Contributing Documentation in React Spectrum
DESCRIPTION: This code snippet imports the Layout component from React Spectrum docs and the Contributing content from the project's CONTRIBUTING.md file. It then exports a Layout component that renders the Contributing guide with additional metadata for documentation categorization.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
import Contributing from '../../../../CONTRIBUTING.md';
export default Layout;

---
category: Foundation
title: Contribute
description: How to contribute features, report bugs, or make suggestions to improve React Spectrum.
keywords: [react spectrum contributions, bug reports, feature requests]
---

<Contributing />

----------------------------------------

TITLE: Date Range Validation with minValue in RangeCalendar
DESCRIPTION: Demonstrates how to set a minimum date value for the RangeCalendar using the minValue prop, preventing selection of dates before today.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<RangeCalendar aria-label="Trip dates" minValue={today(getLocalTimeZone())} />

----------------------------------------

TITLE: Styling for Drag and Drop Components
DESCRIPTION: CSS styles for draggable and droppable elements, including visual feedback during drag operations and drop target highlighting.

LANGUAGE: css
CODE:
.draggable {
  display: inline-block;
  vertical-align: top;
  border: 1px solid gray;
  padding: 10px;
}

.draggable.dragging {
  opacity: 0.5;
}

.droppable {
  width: 100px;
  height: 80px;
  border-radius: 6px;
  display: inline-block;
  padding: 20px;
  margin-left: 20px;
  border: 2px dotted gray;
  white-space: pre-wrap;
}

.droppable.target {
  border: 2px solid var(--blue);
}

----------------------------------------

TITLE: Module Import and Export for React Spectrum Documentation
DESCRIPTION: Sets up the layout for the documentation page by importing and exporting the Layout component from React Spectrum docs.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Installing and Running Next.js Development Server
DESCRIPTION: Commands to install dependencies and start the Next.js development server for a React Spectrum project.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Styling Unavailable Dates in RangeCalendar with CSS
DESCRIPTION: CSS styles for the RangeCalendar component to visually represent unavailable dates with line-through text and a different color, and to style invalid dates with a highlighted background.

LANGUAGE: css
CODE:
.react-aria-RangeCalendar {
  .react-aria-CalendarCell {

    &[data-unavailable] {
      text-decoration: line-through;
      color: var(--invalid-color);
    }

    &[data-invalid] {
      background: var(--invalid-color);
      color: var(--highlight-foreground);
    }
  }
}

----------------------------------------

TITLE: Styling Description Text in DateRangePicker
DESCRIPTION: CSS for styling the description text in a DateRangePicker component.

LANGUAGE: css
CODE:
.react-aria-DateRangePicker {
  [slot=description] {
    font-size: 12px;
  }
}

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default component for this documentation page.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Markdown Frontmatter for Documentation Organization
DESCRIPTION: YAML frontmatter defining the documentation category and keywords for the useListState hook documentation.

LANGUAGE: YAML
CODE:
---
category: Collections
keywords: [lists, state]
---

----------------------------------------

TITLE: Configuring Optimize Locales Plugin with Next.js
DESCRIPTION: Configuration example for using the optimize-locales-plugin with Next.js. This modifies the webpack configuration to include only English (US) and French (France) locale strings.

LANGUAGE: javascript
CODE:
// next.config.js
const optimizeLocales = require('@react-aria/optimize-locales-plugin');

module.exports = {
  webpack(config) {
    config.plugins.push(
      optimizeLocales.webpack({
        locales: ['en-US', 'fr-FR']
      })
    );
    return config;
  }
};

----------------------------------------

TITLE: Importing and Exporting Layout Component for React Spectrum Documentation
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export for the documentation page structure.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Basic CSS Styling for ColorArea Component
DESCRIPTION: Shows the basic CSS selector pattern for styling a ColorArea component using the default class name provided by React Aria.

LANGUAGE: css
CODE:
.react-aria-ColorArea {
  /* ... */
}

----------------------------------------

TITLE: Importing Date Components from React Spectrum
DESCRIPTION: Imports essential date and time picker components from the React Spectrum library, including DateField from @react-spectrum/datepicker and Calendar/RangeCalendar from @react-spectrum/calendar.

LANGUAGE: jsx
CODE:
import {DateField} from '@react-spectrum/datepicker';
import {Calendar, RangeCalendar} from '@react-spectrum/calendar';

----------------------------------------

TITLE: Checking for Weekdays and Weekends
DESCRIPTION: Demonstrates how to use isWeekday and isWeekend functions to determine if a date falls on a weekday or weekend, with consideration for locale-specific definitions of weekends.

LANGUAGE: tsx
CODE:
import {isWeekday, isWeekend} from '@internationalized/date';

let date = new CalendarDate(2022, 2, 6); // a Sunday

isWeekday(date, 'en-US'); // false
isWeekday(date, 'he-IL'); // true

isWeekend(date, 'en-US'); // true
isWeekend(date, 'he-IL'); // false

----------------------------------------

TITLE: Applying Custom Class Names to Modal Components
DESCRIPTION: Example of applying a custom class name to a Modal component, which overrides the default className provided by React Aria with your own custom class.

LANGUAGE: jsx
CODE:
<Modal className="my-modal">
  {/* ... */}
</Modal>

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Workflow Icons Rename Example in JavaScript
DESCRIPTION: Shows the renamed icons due to typo fixes in the workflow icons package. This is part of a breaking change in the major version update to the icons package.

LANGUAGE: javascript
CODE:
SelectSubstract -> SelectSubtract
SubstractBackPath -> SubtractBackPath
SubstractFromSelection -> SubtractFromSelection

----------------------------------------

TITLE: Scaffolding New Components with Plop
DESCRIPTION: Command to run the plop tool for scaffolding new components or hooks, which guides users through a series of prompts to generate template files.

LANGUAGE: bash
CODE:
yarn plop

----------------------------------------

TITLE: Using Localization with Remix Framework
DESCRIPTION: Shows how to use the getLocalizationScript function with a custom dictionary when implementing React Spectrum with the Remix framework.

LANGUAGE: tsx
CODE:
getLocalizationScript(locale, dictionary)

----------------------------------------

TITLE: Breadcrumbs with Navigation Landmark
DESCRIPTION: Example showing breadcrumbs wrapped in a navigation landmark for improved accessibility with screen readers.

LANGUAGE: tsx
CODE:
<nav aria-label="Breadcrumbs">
  <Breadcrumbs>
    <Breadcrumb><Link href="/">Home</Link></Breadcrumb>
    <Breadcrumb><Link href="/react-aria/">React Aria</Link></Breadcrumb>
    <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>
  </Breadcrumbs>
</nav>

----------------------------------------

TITLE: Implementing Disabled TextField in React Aria Components
DESCRIPTION: Example of using the isDisabled prop to create a disabled TextField component, preventing user interaction.

LANGUAGE: tsx
CODE:
<MyTextField label="Email" isDisabled />

----------------------------------------

TITLE: Released Packages List in React Spectrum Project
DESCRIPTION: A comprehensive list of all packages released as part of the React Spectrum update, including version numbers for React Spectrum components, React Aria hooks, React Stately state managers, and related utilities.

LANGUAGE: markdown
CODE:
```
 - @adobe/react-spectrum@3.37.0
 - @internationalized/date@3.5.6
 - @internationalized/message@3.1.5
 - @internationalized/number@3.5.4
 - @internationalized/string-compiler@3.2.5
 - @internationalized/string@3.2.4
 - @react-aria/accordion@3.0.0-alpha.34
 - @react-aria/actiongroup@3.7.9
 - @react-aria/aria-modal-polyfill@3.7.12
 - @react-aria/autocomplete@3.0.0-alpha.34
 - @react-aria/breadcrumbs@3.5.17
 - @react-aria/button@3.10.0
 - @react-aria/calendar@3.5.12
 - @react-aria/checkbox@3.14.7
 - @react-aria/collections@3.0.0-alpha.5
 - @react-aria/color@3.0.0
 - @react-aria/combobox@3.10.4
 - @react-aria/datepicker@3.11.3
 - @react-aria/dialog@3.5.18
 - @react-aria/disclosure@3.0.0-alpha.0
 - @react-aria/dnd@3.7.3
 - @react-aria/example-theme@1.0.4
 - @react-aria/focus@3.18.3
 - @react-aria/form@3.0.9
 - @react-aria/grid@3.10.4
 - @react-aria/gridlist@3.9.4
 - @react-aria/i18n@3.12.3
 - @react-aria/interactions@3.22.3
 - @react-aria/label@3.7.12
 - @react-aria/landmark@3.0.0-beta.16
 - @react-aria/link@3.7.5
 - @react-aria/listbox@3.13.4
 - @react-aria/live-announcer@3.4.0
 - @react-aria/menu@3.15.4
 - @react-aria/meter@3.4.17
 - @react-aria/numberfield@3.11.7
 - @react-aria/optimize-locales-plugin@1.1.2
 - @react-aria/overlays@3.23.3
 - @react-aria/parcel-resolver-optimize-locales@1.1.2
 - @react-aria/progress@3.4.17
 - @react-aria/radio@3.10.8
 - @react-aria/searchfield@3.7.9
 - @react-aria/select@3.14.10
 - @react-aria/selection@3.20.0
 - @react-aria/separator@3.4.3
 - @react-aria/slider@3.7.12
 - @react-aria/spinbutton@3.6.9
 - @react-aria/ssr@3.9.6
 - @react-aria/steplist@3.0.0-alpha.10
 - @react-aria/switch@3.6.8
 - @react-aria/table@3.15.4
 - @react-aria/tabs@3.9.6
 - @react-aria/tag@3.4.6
 - @react-aria/test-utils@1.0.0-alpha.2
 - @react-aria/textfield@3.14.9
 - @react-aria/toast@3.0.0-beta.16
 - @react-aria/toggle@3.10.8
 - @react-aria/toolbar@3.0.0-beta.9
 - @react-aria/tooltip@3.7.8
 - @react-aria/tree@3.0.0-alpha.6
 - @react-aria/tree@3.0.0-beta.0
 - @react-aria/utils@3.25.3
 - @react-aria/virtualizer@4.0.3
 - @react-aria/visually-hidden@3.8.16
 - @react-spectrum/accordion@3.0.0-alpha.34
 - @react-spectrum/actionbar@3.6.0
 - @react-spectrum/actiongroup@3.10.8
 - @react-spectrum/autocomplete@3.0.0-alpha.36
 - @react-spectrum/avatar@3.0.16
 - @react-spectrum/badge@3.1.16
 - @react-spectrum/breadcrumbs@3.9.10
 - @react-spectrum/button@3.16.7
 - @react-spectrum/buttongroup@3.6.16
 - @react-spectrum/calendar@3.4.12
 - @react-spectrum/card@3.0.0-alpha.36
 - @react-spectrum/checkbox@3.9.9
 - @react-spectrum/codemods@0.2.0
 - @react-spectrum/color@3.0.0
 - @react-spectrum/combobox@3.13.3
 - @react-spectrum/contextualhelp@3.6.14
 - @react-spectrum/datepicker@3.10.2
 - @react-spectrum/dialog@3.8.14
 - @react-spectrum/divider@3.5.17
 - @react-spectrum/dnd@3.4.2
 - @react-spectrum/dropzone@3.0.4
 - @react-spectrum/filetrigger@3.0.4
 - @react-spectrum/form@3.7.9
 - @react-spectrum/icon@3.7.16
 - @react-spectrum/illustratedmessage@3.5.4
 - @react-spectrum/image@3.5.5
 - @react-spectrum/inlinealert@3.2.8
 - @react-spectrum/label@3.16.9
 - @react-spectrum/labeledvalue@3.1.17
 - @react-spectrum/layout@3.6.9
 - @react-spectrum/link@3.6.10
 - @react-spectrum/list@3.8.2
 - @react-spectrum/listbox@3.13.2
 - @react-spectrum/menu@3.20.4
 - @react-spectrum/meter@3.5.4
 - @react-spectrum/numberfield@3.9.6
 - @react-spectrum/overlays@5.6.4
 - @react-spectrum/parcel-transformer-s2-icon@0.1.1
 - @react-spectrum/picker@3.15.2
 - @react-spectrum/progress@3.7.10
 - @react-spectrum/provider@3.9.11
 - @react-spectrum/radio@3.7.9
 - @react-spectrum/s2-icon-builder@0.1.1
 - @react-spectrum/s2@0.4.0
 - @react-spectrum/searchfield@3.8.9
 - @react-spectrum/slider@3.6.12
 - @react-spectrum/statuslight@3.5.16
 - @react-spectrum/steplist@3.0.0-alpha.8
 - @react-spectrum/style-macro-s1@3.0.0-alpha.1
 - @react-spectrum/switch@3.5.8
 - @react-spectrum/table@3.14.0
 - @react-spectrum/tabs@3.8.13
 - @react-spectrum/tag@3.2.9
 - @react-spectrum/test-utils@1.0.0-alpha.2
 - @react-spectrum/text@3.5.8
 - @react-spectrum/textfield@3.12.5
 - @react-spectrum/theme-dark@3.5.13
 - @react-spectrum/theme-default@3.5.13
 - @react-spectrum/theme-express@3.0.0-alpha.15
 - @react-spectrum/theme-light@3.4.13
 - @react-spectrum/toast@3.0.0-beta.15
 - @react-spectrum/tooltip@3.6.10
 - @react-spectrum/tree@3.0.0-beta.0
 - @react-spectrum/utils@3.11.11
 - @react-spectrum/view@3.6.13
 - @react-spectrum/well@3.4.17
 - @react-stately/calendar@3.5.5
 - @react-stately/checkbox@3.6.9
 - @react-stately/collections@3.11.0
 - @react-stately/color@3.8.0
 - @react-stately/combobox@3.10.0
 - @react-stately/data@3.11.7
 - @react-stately/datepicker@3.10.3
 - @react-stately/disclosure@3.0.0-alpha.0
 - @react-stately/dnd@3.4.3
 - @react-stately/flags@3.0.4
 - @react-stately/form@3.0.6
 - @react-stately/grid@3.9.3
 - @react-stately/layout@4.0.3
 - @react-stately/list@3.11.0
 - @react-stately/menu@3.8.3
 - @react-stately/numberfield@3.9.7
 - @react-stately/overlays@3.6.11
 - @react-stately/radio@3.10.8
 - @react-stately/searchfield@3.5.7
 - @react-stately/select@3.6.8
 - @react-stately/selection@3.17.0
 - @react-stately/slider@3.5.8
 - @react-stately/steplist@3.0.0-alpha.9
 - @react-stately/table@3.12.3
 - @react-stately/tabs@3.6.10
 - @react-stately/toast@3.0.0-beta.6
 - @react-stately/toggle@3.7.8
 - @react-stately/tooltip@3.4.13
 - @react-stately/tree@3.8.5
 - @react-stately/utils@3.10.4
 - @react-stately/virtualizer@4.1.0
 - @react-types/accordion@3.0.0-alpha.24
 - @react-types/actionbar@3.1.10
 - @react-types/actiongroup@3.4.12
 - @react-types/autocomplete@3.0.0-alpha.26
 - @react-types/avatar@3.0.10
 - @react-types/badge@3.1.12
 - @react-types/breadcrumbs@3.7.8
 - @react-types/button@3.10.0
 - @react-types/buttongroup@3.3.12
 - @react-types/calendar@3.4.10
 - @react-types/card@3.0.0-alpha.30
 - @react-types/checkbox@3.8.4
 - @react-types/color@3.0.0
 - @react-types/combobox@3.13.0
 - @react-types/contextualhelp@3.2.13
 - @react-types/datepicker@3.8.3
 - @react-types/dialog@3.5.13
 - @react-types/divider@3.3.12
 - @react-types/form@3.7.7
 - @react-types/grid@3.2.9
 - @react-types/illustratedmessage@3.3.12
 - @react-types/image@3.4.4
 - @react-types/label@3.9.6
 - @react-types/layout@3.3.18
 - @react-types/link@3.5.8
 - @react-types/list@3.2.20
 - @react-types/listbox@3.5.2
 - @react-types/menu@3.9.12
 - @react-types/meter@3.4.4
 - @react-types/numberfield@3.8.6
 - @react-types/overlays@3.8.10
 - @react-types/progress@3.5.7
 - @react-types/provider@3.8.4
 - @react-types/radio@3.8.4
 - @react-types/searchfield@3.5.9
 - @react-types/select@3.9.7
 - @react-types/shared@3.25.0
 - @react-types/slider@3.7.6
 - @react-types/statuslight@3.3.12
 - @react-types/switch@3.5.6
 - @react-types/table@3.10.2
 - @react-types/tabs@3.3.10
 - @react-types/text@3.3.12
 - @react-types/textfield@3.9.7
 - @react-types/tooltip@3.4.12
 - @react-types/view@3.4.12
 - @react-types/well@3.3.12
 - @spectrum-icons/color@3.5.16
 - @spectrum-icons/express@3.0.0-alpha.20
 - @spectrum-icons/illustrations@3.6.16
 - @spectrum-icons/ui@3.6.10
 - @spectrum-icons/workflow@4.2.15
 - react-aria-components@1.4.0
 - react-aria@3.35.0
 - react-stately@3.33.0
 - tailwindcss-react-aria-components@1.1.6
```

----------------------------------------

TITLE: SearchWithin Component with Side Label in React Spectrum
DESCRIPTION: An example showing how to position the label to the side of the SearchWithin component rather than above it.

LANGUAGE: tsx
CODE:
<SearchWithin label="Search" labelPosition="side">
  <SearchField />
  <Picker defaultSelectedKey="all">
    <Item key="all">All</Item>
    <Item key="campaigns">Campaigns</Item>
    <Item key="audiences">Audiences</Item>
    <Item key="tags">Tags</Item>
  </Picker>
</SearchWithin>

----------------------------------------

TITLE: Referencing React Spectrum ButtonGroup Package
DESCRIPTION: Shows the npm package name for the ButtonGroup component that is part of the React Spectrum library.

LANGUAGE: markdown
CODE:
# @react-spectrum/buttongroup

----------------------------------------

TITLE: Setting Hour Cycle in DateRangePicker
DESCRIPTION: This example demonstrates how to override the default time format in a DateRangePicker using the hourCycle prop. It forces the component to use 24-hour time format regardless of the user's locale.

LANGUAGE: tsx
CODE:
<DateRangePicker
  label="Date range"
  granularity="minute"
  hourCycle={24} />

----------------------------------------

TITLE: Markdown Frontmatter for useCheckboxGroupState Documentation
DESCRIPTION: Defines the metadata for the documentation page including category and relevant keywords to improve searchability and organization.

LANGUAGE: markdown
CODE:
---
category: Forms
keywords: [toggle, checkbox, switch, input, state]
---

----------------------------------------

TITLE: Vite Configuration for Optimizing Locales
DESCRIPTION: Configuration for the Vite bundler to optimize locale data. This setup includes the plugin with enforce: 'pre' to ensure it runs before other plugins.

LANGUAGE: JavaScript
CODE:
// vite.config.js
import optimizeLocales from '@react-aria/optimize-locales-plugin';

export default {
  plugins: [
    {
      ...optimizeLocales.vite({
        locales: ['en-US', 'fr-FR']
      }),
      enforce: 'pre'
    }
  ]
};

----------------------------------------

TITLE: Importing React Spectrum Components in TSX
DESCRIPTION: Demonstrates importing TextField and ActionButton components from React Spectrum packages for use in a React application.

LANGUAGE: tsx
CODE:
import {TextField} from '@react-spectrum/textfield';
import {ActionButton} from '@react-spectrum/button';

----------------------------------------

TITLE: Dismissable Dialog with onDismiss Callback
DESCRIPTION: An example showing how to handle the onDismiss event in a dismissable Dialog, which is triggered when the close button is clicked.

LANGUAGE: tsx
CODE:
function Example() {
  let alertDismiss = (close) => {
    close();
    alert('Dialog dismissed.');
  }
  return (
    <DialogTrigger isDismissable>
      <ActionButton>Info</ActionButton>
      {(close) => (
        <Dialog onDismiss={() => alertDismiss(close)}>
          <Heading>Version Info</Heading>
          <Divider />
          <Content>
            <Text>
              Version 1.0.0, Copyright 2020
            </Text>
          </Content>
        </Dialog>
        )}
    </DialogTrigger>
  );
}

----------------------------------------

TITLE: Configuring Locale Optimization with Esbuild and @react-aria/optimize-locales-plugin
DESCRIPTION: Setup for optimizing locales in an Esbuild configuration using the @react-aria/optimize-locales-plugin. This snippet demonstrates how to import the plugin and configure it with specific locales to include in the build.

LANGUAGE: typescript
CODE:
import {build} from 'esbuild';
import optimizeLocales from '@react-aria/optimize-locales-plugin';

build({
  plugins: [
    optimizeLocales.esbuild({
      locales: ['en-US', 'fr-FR']
    })
  ]
});

----------------------------------------

TITLE: Customizing Slider Value Labels
DESCRIPTION: Examples showing various ways to customize the value label display: hiding, formatting with percent style, and using a custom formatter function.

LANGUAGE: tsx
CODE:
<Flex direction="column" maxWidth="size-3000" gap="size-300">
  <Slider
    label="Cookies to buy"
    showValueLabel={false}
    defaultValue={90} />
  <Slider
    label="Percent donus eaten"
    maxValue={1}
    step={0.001}
    formatOptions={{style: 'percent', minimumFractionDigits: 1}}
    defaultValue={0.891} />
  <Slider
    label="Donuts to buy"
    maxValue={60}
    getValueLabel={donuts => `${donuts} of 60 Donuts`} />
</Flex>

----------------------------------------

TITLE: Importing Documentation Dependencies for useCalendarState
DESCRIPTION: Imports necessary components and data for building the documentation page, including docs data, UI components, and package information.

LANGUAGE: JSX
CODE:
import docs from 'docs:@react-stately/calendar';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/calendar/package.json';

----------------------------------------

TITLE: Using Render Props for State-Based Element Rendering
DESCRIPTION: Example demonstrating how to use render props to conditionally render elements based on component state, such as showing an icon for unavailable dates.

LANGUAGE: jsx
CODE:
<CalendarCell>
  {({formattedDate, isUnavailable}) => (
    <>
      {isUnavailable && <UnavailableIcon />}
      <span>{formattedDate}</span>
    </>
  )}
</CalendarCell>

----------------------------------------

TITLE: Dynamic Styling with Class Name Function in ColorThumb
DESCRIPTION: Shows how to use a function for the className prop to dynamically apply styles based on component state, which is useful when working with utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<ColorThumb className={({isDragging}) => isDragging ? 'scale-150' : 'scale-100'} />

----------------------------------------

TITLE: Importing and Exporting Blog Post Layout Components in JSX
DESCRIPTION: Imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and exports BlogPostLayout as the default export. This serves as the layout wrapper for the blog post.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Importing TreeView Dependencies in React Spectrum
DESCRIPTION: Imports the necessary components and utilities for implementing a TreeView component in React Spectrum, including UI icons, layout components, and tree-related components.

LANGUAGE: jsx
CODE:
import Folder from '@spectrum-icons/workflow/Folder';
import {Flex} from '@react-spectrum/layout';
import FileTxt from '@spectrum-icons/workflow/FileTxt';
import GlobeOutline from '@spectrum-icons/workflow/GlobeOutline';
import Image from '@spectrum-icons/workflow/Image';
import Edit from '@spectrum-icons/workflow/Edit';
import Delete from '@spectrum-icons/workflow/Delete';
import {Text} from '@react-spectrum/text';
import {Collection, TreeView, TreeViewItem, TreeViewItemContent} from '@react-spectrum/tree';
import {JSX} from "react";
import {Key} from "@react-types/shared";
import {ActionGroup, Item} from '@react-spectrum/actiongroup';
import {ActionMenu} from '@react-spectrum/menu';

----------------------------------------

TITLE: Importing @react-aria/interactions Package
DESCRIPTION: Reference to the @react-aria/interactions package in the React Spectrum project, linking to the main repository for more detailed information.

LANGUAGE: markdown
CODE:
# @react-aria/interactions

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Importing BlogPostLayout Component in React
DESCRIPTION: Imports and exports the BlogPostLayout component from the @react-spectrum/docs package for use in a blog post page layout. This code sets up the structure for the React Spectrum release notes.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Handling Type Errors During Build Process in React Spectrum
DESCRIPTION: Example of common TypeScript type errors that occur during the build process using yarn build. These errors are expected and the build should complete successfully despite them.

LANGUAGE: bash
CODE:
@parcel/transformer-typescript-types: Property 'style' does not exist on type 'Element'.
@parcel/transformer-typescript-types: Property 'type' does not exist on type 'EventTarget'.
@parcel/transformer-typescript-types: Property 'isContentEditable' does not exist on type 'EventTarget'

----------------------------------------

TITLE: useCheckboxGroupState Documentation Structure in JSX
DESCRIPTION: Defines the component structure for the documentation page, including the title, description, package information, API references, and interface details.

LANGUAGE: jsx
CODE:
# useCheckboxGroupState

<PageDescription>{docs.exports.useCheckboxGroupState.description}</PageDescription>

<HeaderInfo
  packageData={packageData}
  componentNames={['useCheckboxGroupState']} />

## API

<FunctionAPI function={docs.exports.useCheckboxGroupState} links={docs.links} />

## Interface

<ClassAPI links={docs.links} class={docs.links[docs.exports.useCheckboxGroupState.return.id]} />

----------------------------------------

TITLE: Popover Component Anatomy Example
DESCRIPTION: Shows the basic structure of a popover with its trigger element, overlay, and dialog components.

LANGUAGE: tsx
CODE:
import {DialogTrigger, Popover, Dialog, Button, OverlayArrow} from 'react-aria-components';

<DialogTrigger>
  <Button />
  <Popover>
    <OverlayArrow />
    <Dialog />
  </Popover>
</DialogTrigger>

----------------------------------------

TITLE: Finding Start and End Dates of Time Units
DESCRIPTION: Demonstrates how to use functions like startOfYear, startOfMonth, and startOfWeek to find the beginning of a particular unit of time, with locale-specific considerations for weeks.

LANGUAGE: tsx
CODE:
import {startOfYear, startOfMonth, startOfWeek} from '@internationalized/date';

let date = new CalendarDate(2022, 2, 3);

startOfYear(date); // 2022-01-01
startOfMonth(date); // 2022-02-01
startOfWeek(date, 'en-US'); // 2022-01-30
startOfWeek(date, 'fr-FR'); // 2022-01-31

----------------------------------------

TITLE: Importing and Exporting React Spectrum Blog Post Layout Components in JSX
DESCRIPTION: Sets up the blog post layout by importing BlogPostLayout and Hero components from @react-spectrum/docs and exporting BlogPostLayout as the default export. This is the standard setup for React Spectrum blog posts.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Importing Workflow Icons in React Spectrum
DESCRIPTION: Examples of importing workflow icons from the @spectrum-icons/workflow package. Shows different import naming conventions and explains how icons with numeric names are handled in React Inspector.

LANGUAGE: jsx
CODE:
import Add from '@spectrum-icons/workflow/Add'
import IconAdd from '@spectrum-icons/workflow/Add'

LANGUAGE: jsx
CODE:
import _123 from '@spectrum-icons/workflow/123'
import Icon123 from '@spectrum-icons/workflow/123'

----------------------------------------

TITLE: Using Render Props for Dynamic Class Names Based on State
DESCRIPTION: Example of using a function for the className prop that receives component states and returns appropriate class names based on those states.

LANGUAGE: jsx
CODE:
<ListBoxItem className={({isSelected}) => isSelected ? 'selected' : 'unselected'}>
  Item
</ListBoxItem>

----------------------------------------

TITLE: Implementing Quiet DatePicker in React Spectrum
DESCRIPTION: Example of a DatePicker with the isQuiet prop enabled, which provides a more minimal visual appearance for the component.

LANGUAGE: tsx
CODE:
<DatePicker label="Birth date" isQuiet />

----------------------------------------

TITLE: Listing Released Package Versions in Markdown
DESCRIPTION: A markdown code block listing all the packages released in the December 22, 2020 update with their respective version numbers.

LANGUAGE: Markdown
CODE:
```
 - @adobe/react-spectrum@3.7.0
 - @react-aria/breadcrumbs@3.1.2
 - @react-aria/slider@3.0.0
 - @react-aria/utils@3.5.0
 - @react-spectrum/slider@3.0.0
 - @react-stately/slider@3.0.0
 - @react-types/breadcrumbs@3.2.0
 - @react-types/slider@3.0.0
 - react-aria@3.3.0
 - react-stately@3.2.0
 ```

----------------------------------------

TITLE: Importing Tooltip Components in React Spectrum
DESCRIPTION: Example of importing various React Spectrum components including the Tooltip and TooltipTrigger components along with other supporting components and icons.

LANGUAGE: jsx
CODE:
import {ActionButton} from '@react-spectrum/button';
import Delete from '@spectrum-icons/workflow/Delete';
import Edit from '@spectrum-icons/workflow/Edit';
import {Flex} from '@react-spectrum/layout';
import Question from '@spectrum-icons/workflow/Question';
import Resize from '@spectrum-icons/workflow/Resize';
import Save from '@spectrum-icons/workflow/SaveTo';
import {Text} from '@react-spectrum/text';
import ThumbUp from '@spectrum-icons/workflow/ThumbUp';
import { Tooltip, TooltipTrigger } from '@react-spectrum/tooltip';

----------------------------------------

TITLE: Displaying Package Information in Markdown
DESCRIPTION: A markdown heading and description for the @react-types/sidenav package, noting it is part of the React Spectrum library and directing readers to the main repository for more information.

LANGUAGE: markdown
CODE:
# @react-types/sidenav

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Setting Vertical Offset for Popovers with the offset Prop
DESCRIPTION: This example demonstrates how to use the offset prop to adjust the distance between a popover and its trigger button along the main axis, creating a 50px gap above the trigger.

LANGUAGE: tsx
CODE:
<PopoverTrigger placement="top" offset={50} label="Trigger">
  <Dialog>
    Offset by an additional 50px.
  </Dialog>
</PopoverTrigger>

----------------------------------------

TITLE: React Spectrum Blog Post Layout Import and Export in JSX
DESCRIPTION: Imports the BlogPostLayout component from @react-spectrum/docs and exports it as the default export for the blog post page.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Creating a Disabled ColorSlider in React
DESCRIPTION: Shows how to disable a ColorSlider using the isDisabled prop, which prevents the thumb from being focused or dragged. Styling the disabled state is left to the developer.

LANGUAGE: tsx
CODE:
<ColorSlider channel="red" defaultValue="#7f007f" isDisabled />

----------------------------------------

TITLE: Customizing Placeholder Value in DateField
DESCRIPTION: Shows how to customize the placeholder value in a DateField, which influences both the displayed placeholder and the default values when the user interacts with segments.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

<DateField label="Birth date" placeholderValue={new CalendarDate(1980, 1, 1)} />

----------------------------------------

TITLE: Using a Custom Label Component with TextField
DESCRIPTION: Example of using a custom label component that consumes LabelContext within a TextField, demonstrating how custom components can replace built-in ones in React Aria Components.

LANGUAGE: tsx
CODE:
<TextField>
  <MyCustomLabel>Name</MyCustomLabel>
  <Input />
</TextField>

----------------------------------------

TITLE: Importing and Exporting Blog Post Layout Components in JSX
DESCRIPTION: Imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and exports the BlogPostLayout as the default export for the file.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Adding Explicit Drag Button for Accessibility with React Aria
DESCRIPTION: Example showing how to add an explicit drag button for better accessibility. This separates keyboard interactions to a dedicated drag button while maintaining mouse/touch dragging on the main element.

LANGUAGE: tsx
CODE:
import {useButton} from '@react-aria/button';

function Draggable() {
  let {dragProps, dragButtonProps, isDragging} = useDrag({
    /*- begin highlight -*/
    hasDragButton: true,
    /*- end highlight -*/
    getItems() {
      return [{
        'text/plain': 'hello world'
      }];
    }
  });

  /*- begin highlight -*/
  let ref = React.useRef(null);
  let {buttonProps} = useButton({...dragButtonProps, elementType: 'div'}, ref);
  /*- end highlight -*/

  return (
    <div {...dragProps} className={`draggable ${isDragging ? 'dragging' : ''}`} style={{display: 'inline-flex', alignItems: 'center', gap: 5}}>
      {/*- begin highlight -*/}
      <span {...buttonProps} aria-label="Drag" ref={ref} style={{fontSize: 18}}>≡</span>
      {/*- end highlight -*/}
      <span>Some text</span>
      <button onClick={() => alert('action')}>Action</button>
    </div>
  );
}

<Draggable />
<DropTarget />

----------------------------------------

TITLE: CSS Styling for Button Component
DESCRIPTION: Shows the CSS styling for the Button component including normal, pressed, and focus states. Imports styles from a theme package and defines various visual states.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Button {
  color: var(--text-color);
  background: var(--button-background);
  border: 1px solid var(--border-color);
  border-radius: 4px;
  appearance: none;
  vertical-align: middle;
  font-size: 1rem;
  text-align: center;
  margin: 0;
  outline: none;
  padding: 6px 10px;
  text-decoration: none;

  &[data-pressed] {
    box-shadow: inset 0 1px 2px rgb(0 0 0 / 0.1);
    background: var(--button-background-pressed);
    border-color: var(--border-color-pressed);
  }

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: -1px;
  }
}

----------------------------------------

TITLE: Importing BlogPostLayout and Hero Components from React Spectrum Docs
DESCRIPTION: This code imports the BlogPostLayout and Hero components from the React Spectrum documentation package and exports the BlogPostLayout as the default component.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Introducing @react-stately/list Package
DESCRIPTION: A simple markdown header introducing the @react-stately/list package with a note that it's part of the react-spectrum repository.

LANGUAGE: markdown
CODE:
# @react-stately/list

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: CSS Styling for Button Component
DESCRIPTION: Shows the CSS styling for the Button component including normal, pressed, and focus states. Imports styles from a theme package and defines various visual states.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Button {
  color: var(--text-color);
  background: var(--button-background);
  border: 1px solid var(--border-color);
  border-radius: 4px;
  appearance: none;
  vertical-align: middle;
  font-size: 1rem;
  text-align: center;
  margin: 0;
  outline: none;
  padding: 6px 10px;
  text-decoration: none;

  &[data-pressed] {
    box-shadow: inset 0 1px 2px rgb(0 0 0 / 0.1);
    background: var(--button-background-pressed);
    border-color: var(--border-color-pressed);
  }

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: -1px;
  }
}

----------------------------------------

TITLE: Setting Default Selection State for Switch
DESCRIPTION: Example showing how to set a default selection state for a Switch component.

LANGUAGE: tsx
CODE:
<MySwitch defaultSelected>Wi-Fi</MySwitch>

----------------------------------------

TITLE: Parsing Unit Values with NumberParser
DESCRIPTION: Demonstrates parsing values with units of measurement, showing how the parser handles different unit formats and rejects invalid or mismatched units.

LANGUAGE: tsx
CODE:
let parser = new NumberParser('en-US', {
  style: 'unit',
  unit: 'inch',
  unitDisplay: 'long'
});

parser.parse('12'); // 12
parser.parse('12 inches'); // 12
parser.parse('1 inch'); // 1
parser.parse('12 in'); // NaN (partial unit)
parser.parse('23 ft'); // NaN (different unit)

----------------------------------------

TITLE: Using Function-based className for Dynamic Styling
DESCRIPTION: Illustrates how to use a function for the className prop that receives component states for dynamic styling, useful with utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<DropZone className={({isDropTarget}) => isDropTarget ? 'bg-gray-700' : 'bg-gray-600'} />

----------------------------------------

TITLE: Release Packages List in JavaScript
DESCRIPTION: A multi-line string representing all the packages released in this update, including their versions. This shows all the React Spectrum, React Aria, React Stately, and related packages that were updated.

LANGUAGE: JavaScript
CODE:
```
     - @adobe/react-spectrum@3.6.0
     - @react-aria/button@3.3.0
     - @react-aria/combobox@3.0.0-alpha.0
     - @react-aria/i18n@3.2.0
     - @react-aria/interactions@3.3.2
     - @react-aria/listbox@3.2.3
     - @react-aria/live-announcer@3.0.0-alpha.0
     - @react-aria/menu@3.1.3
     - @react-aria/overlays@3.6.0
     - @react-aria/select@3.2.3
     - @react-aria/selection@3.3.1
     - @react-aria/tabs@3.0.0-alpha.2
     - @react-aria/textfield@3.2.2
     - @react-aria/tooltip@3.1.0
     - @react-aria/utils@3.4.1
     - @react-aria/virtualizer@3.3.1
     - @react-spectrum/breadcrumbs@3.2.0
     - @react-spectrum/button@3.3.0
     - @react-spectrum/buttongroup@3.2.0
     - @react-spectrum/combobox@3.0.0-alpha.0
     - @react-spectrum/label@3.3.0
     - @react-spectrum/listbox@3.4.0
     - @react-spectrum/overlays@3.4.0
     - @react-spectrum/searchfield@3.1.2
     - @react-spectrum/table@3.0.0-alpha.9
     - @react-spectrum/tabs@3.0.0-alpha.3
     - @react-spectrum/textfield@3.1.4
     - @react-spectrum/tooltip@3.1.0
     - @react-spectrum/utils@3.5.0
     - @react-stately/collections@3.3.0
     - @react-stately/combobox@3.0.0-alpha.0
     - @react-stately/data@3.1.2
     - @react-stately/list@3.2.2
     - @react-stately/tabs@3.0.0-alpha.0
     - @react-stately/tooltip@3.0.1
     - @react-types/button@3.3.0
     - @react-types/combobox@3.0.0-alpha.0
     - @react-types/label@3.3.0
     - @react-types/overlays@3.4.0
     - @react-types/tabs@3.0.0-alpha.2
     - @react-types/textfield@3.2.2
     - @react-types/tooltip@3.1.0
     - @spectrum-icons/illustrations@3.2.1
     - react-aria@3.2.0
     - react-stately@3.1.0
```

----------------------------------------

TITLE: Importing React Spectrum Blog Post Layout Components
DESCRIPTION: Imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and exports BlogPostLayout as the default export. This is used to define the layout for the React Spectrum release notes blog post.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Importing React Spectrum Tabs Package in Markdown
DESCRIPTION: A simple markdown heading that identifies the @react-spectrum/tabs package, which is part of the React Spectrum component library.

LANGUAGE: markdown
CODE:
# @react-spectrum/tabs

----------------------------------------

TITLE: Implementing Popover Component with React Aria
DESCRIPTION: A reusable Popover component implementation using the usePopover hook. The component creates an overlay with proper positioning, accessibility features, and an optional arrow indicator.

LANGUAGE: tsx
CODE:
import type {AriaPopoverProps} from 'react-aria';
import type {OverlayTriggerState} from 'react-stately';
import {usePopover, Overlay, DismissButton} from '@react-aria/overlays';

interface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef'> {
  children: React.ReactNode,
  state: OverlayTriggerState
}

function Popover({children, state, offset = 8, ...props}: PopoverProps) {
  let popoverRef = React.useRef(null);
  let {popoverProps, underlayProps, arrowProps, placement} = usePopover({
    ...props,
    offset,
    popoverRef
  }, state);

  return (
    <Overlay>
      <div {...underlayProps} className="underlay" />
      <div
        {...popoverProps}
        ref={popoverRef}
        className="popover">
        <svg {...arrowProps} className="arrow" data-placement={placement} viewBox="0 0 12 12">
          <path d="M0 0 L6 6 L12 0" />
        </svg>
        <DismissButton onDismiss={state.close} />
        {children}
        <DismissButton onDismiss={state.close} />
      </div>
    </Overlay>
  );
}

----------------------------------------

TITLE: Implementing Popover Component with React Aria
DESCRIPTION: A reusable Popover component implementation using the usePopover hook. The component creates an overlay with proper positioning, accessibility features, and an optional arrow indicator.

LANGUAGE: tsx
CODE:
import type {AriaPopoverProps} from 'react-aria';
import type {OverlayTriggerState} from 'react-stately';
import {usePopover, Overlay, DismissButton} from '@react-aria/overlays';

interface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef'> {
  children: React.ReactNode,
  state: OverlayTriggerState
}

function Popover({children, state, offset = 8, ...props}: PopoverProps) {
  let popoverRef = React.useRef(null);
  let {popoverProps, underlayProps, arrowProps, placement} = usePopover({
    ...props,
    offset,
    popoverRef
  }, state);

  return (
    <Overlay>
      <div {...underlayProps} className="underlay" />
      <div
        {...popoverProps}
        ref={popoverRef}
        className="popover">
        <svg {...arrowProps} className="arrow" data-placement={placement} viewBox="0 0 12 12">
          <path d="M0 0 L6 6 L12 0" />
        </svg>
        <DismissButton onDismiss={state.close} />
        {children}
        <DismissButton onDismiss={state.close} />
      </div>
    </Overlay>
  );
}

----------------------------------------

TITLE: Basic ProgressBar Component Structure
DESCRIPTION: The basic structure of a ProgressBar component with a Label child. This shows the minimum required elements to create an accessible progress bar.

LANGUAGE: tsx
CODE:
import {ProgressBar, Label} from 'react-aria-components';

<ProgressBar>
  <Label />
</ProgressBar>

----------------------------------------

TITLE: Listing Released Packages in React Spectrum ComboBox Release
DESCRIPTION: This code block displays all the packages that were released as part of the ComboBox component launch, including version numbers for React Spectrum, React Aria, React Stately, and related type packages.

LANGUAGE: bash
CODE:
- @adobe/react-spectrum@3.12.0
- @react-aria/aria-modal-polyfill@3.3.2
- @react-aria/combobox@3.0.0
- @react-aria/listbox@3.3.0
- @react-aria/overlays@3.7.1
- @react-aria/searchfield@3.1.4
- @react-aria/select@3.4.0
- @react-spectrum/combobox@3.0.0
- @react-spectrum/listbox@3.5.0
- @react-spectrum/picker@3.3.0
- @react-stately/combobox@3.0.0
- @react-types/combobox@3.0.0
- @react-types/listbox@3.2.0
- @react-types/select@3.3.0
- react-aria@3.8.0
- react-stately@3.7.0

----------------------------------------

TITLE: Using ContextualHelp with Disabled Elements
DESCRIPTION: Example showing how to use ContextualHelp as an alternative to tooltips when targeting disabled elements, providing accessible additional context.

LANGUAGE: tsx
CODE:
import {ContextualHelp, Flex, Heading, Content} from '@adobe/react-spectrum';

<Flex gap="size-100" alignItems="center">
  <TooltipTrigger>
    <ActionButton isDisabled>Delete resource</ActionButton>
    <Tooltip variant="negative" showIcon>Dangerous action.</Tooltip>
  </TooltipTrigger>
  <ContextualHelp variant="info">
      <Heading>Permission required</Heading>
      <Content>Your admin must grant you permission before you can delete resources.</Content>
  </ContextualHelp>
</Flex>

----------------------------------------

TITLE: Referencing React Aria Utils Package in Markdown
DESCRIPTION: Shows the package name for the React Aria Utils package that is part of the React Spectrum project.

LANGUAGE: markdown
CODE:
# @react-aria/utils

----------------------------------------

TITLE: Using DateField with International Calendar Systems in React
DESCRIPTION: Example of using DateField with the Indian calendar system in Hindi language. The component displays dates in the local calendar system while emitting standardized Gregorian dates through onChange.

LANGUAGE: tsx
CODE:
import {Provider} from '@adobe/react-spectrum';

function Example() {
  let [date, setDate] = React.useState(null);
  return (
    <Provider locale="hi-IN-u-ca-indian">
      <DateField label="Date" value={date} onChange={setDate} />
      <p>Selected date: {date?.toString()}</p>
    </Provider>
  );
}

----------------------------------------

TITLE: Setting Hour Cycle in TimeField
DESCRIPTION: Example demonstrating how to override the default hour format (12 or 24 hour) by explicitly setting the hourCycle prop to 24.

LANGUAGE: tsx
CODE:
<TimeField
  label="Appointment time"
  hourCycle={24} />

----------------------------------------

TITLE: Controlled SearchField Component
DESCRIPTION: Implementation of a controlled SearchField component using React state. The component's value is controlled by React state, and updates are managed through the onChange handler.

LANGUAGE: TypeScript
CODE:
function Example() {
  let [text, setText] = React.useState('');

  return (
    <>
      <SearchField label="Search" onChange={setText} />
      <p>Mirrored text: {text}</p>
    </>
  );
}

----------------------------------------

TITLE: List of Released React Spectrum Packages
DESCRIPTION: A comprehensive list of all the React Spectrum, React Aria, React Stately, React Types, and Spectrum Icons packages that were released as part of the July 23, 2020 update, each with version number 3.1.0 (with a few exceptions for alpha/rc versions).

LANGUAGE: Shell
CODE:
- @adobe/react-spectrum@3.1.0
- @react-aria/actiongroup@3.1.0
- @react-aria/aria-modal-polyfill@3.1.0
- @react-aria/breadcrumbs@3.1.0
- @react-aria/button@3.1.0
- @react-aria/checkbox@3.1.0
- @react-aria/dialog@3.1.0
- @react-aria/focus@3.1.0
- @react-aria/i18n@3.1.0
- @react-aria/interactions@3.1.0
- @react-aria/label@3.1.0
- @react-aria/link@3.1.0
- @react-aria/listbox@3.1.0
- @react-aria/menu@3.1.0
- @react-aria/meter@3.1.0
- @react-aria/overlays@3.1.0
- @react-aria/progress@3.1.0
- @react-aria/radio@3.1.0
- @react-aria/searchfield@3.1.0
- @react-aria/select@3.1.0
- @react-aria/selection@3.1.0
- @react-aria/separator@3.1.0
- @react-aria/switch@3.1.0
- @react-aria/table@3.0.0-alpha.5
- @react-aria/textfield@3.1.0
- @react-aria/toggle@3.1.0
- @react-aria/utils@3.1.0
- @react-aria/virtualizer@3.1.0
- @react-aria/visually-hidden@3.1.0
- @react-spectrum/actiongroup@3.1.0
- @react-spectrum/breadcrumbs@3.1.0
- @react-spectrum/button@3.1.0
- @react-spectrum/buttongroup@3.1.0
- @react-spectrum/checkbox@3.1.0
- @react-spectrum/dialog@3.1.0
- @react-spectrum/divider@3.1.0
- @react-spectrum/form@3.1.0
- @react-spectrum/icon@3.1.0
- @react-spectrum/illustratedmessage@3.1.0
- @react-spectrum/image@3.1.0
- @react-spectrum/label@3.1.0
- @react-spectrum/layout@3.1.0
- @react-spectrum/link@3.1.0
- @react-spectrum/listbox@3.1.0
- @react-spectrum/menu@3.1.0
- @react-spectrum/meter@3.1.0
- @react-spectrum/overlays@3.1.0
- @react-spectrum/picker@3.1.0
- @react-spectrum/progress@3.1.0
- @react-spectrum/provider@3.1.0
- @react-spectrum/radio@3.1.0
- @react-spectrum/searchfield@3.1.0
- @react-spectrum/statuslight@3.1.0
- @react-spectrum/switch@3.1.0
- @react-spectrum/table@3.0.0-alpha.5
- @react-spectrum/text@3.1.0
- @react-spectrum/textfield@3.1.0
- @react-spectrum/theme-dark@3.1.0
- @react-spectrum/theme-default@3.1.0
- @react-spectrum/utils@3.1.0
- @react-spectrum/view@3.1.0
- @react-spectrum/well@3.1.0
- @react-stately/collections@3.1.0
- @react-stately/data@3.1.0
- @react-stately/layout@3.1.0
- @react-stately/list@3.1.0
- @react-stately/menu@3.1.0
- @react-stately/overlays@3.1.0
- @react-stately/radio@3.1.0
- @react-stately/searchfield@3.1.0
- @react-stately/select@3.1.0
- @react-stately/selection@3.1.0
- @react-stately/table@3.0.0-alpha.5
- @react-stately/toggle@3.1.0
- @react-stately/tree@3.1.0
- @react-stately/utils@3.1.0
- @react-stately/virtualizer@3.1.0
- @react-types/actiongroup@3.1.0
- @react-types/breadcrumbs@3.1.0
- @react-types/button@3.1.0
- @react-types/buttongroup@3.1.0
- @react-types/checkbox@3.1.0
- @react-types/dialog@3.1.0
- @react-types/divider@3.1.0
- @react-types/form@3.1.0
- @react-types/illustratedmessage@3.1.0
- @react-types/image@3.1.0
- @react-types/label@3.1.0
- @react-types/layout@3.1.0
- @react-types/link@3.1.0
- @react-types/listbox@3.1.0
- @react-types/menu@3.1.0
- @react-types/meter@3.1.0
- @react-types/overlays@3.1.0
- @react-types/progress@3.1.0
- @react-types/provider@3.1.0
- @react-types/radio@3.1.0
- @react-types/searchfield@3.1.0
- @react-types/select@3.1.0
- @react-types/shared@3.1.0
- @react-types/statuslight@3.1.0
- @react-types/switch@3.1.0
- @react-types/table@3.0.0-rc.4
- @react-types/text@3.1.0
- @react-types/textfield@3.1.0
- @react-types/view@3.1.0
- @react-types/well@3.1.0
- @spectrum-icons/color@3.1.0
- @spectrum-icons/illustrations@3.1.0
- @spectrum-icons/ui@3.1.0
- @spectrum-icons/workflow@3.1.0

----------------------------------------

TITLE: Importing Footer Component in React Spectrum
DESCRIPTION: Shows how to import the Footer component from the React Spectrum view package.

LANGUAGE: jsx
CODE:
import {Footer} from '@react-spectrum/view';

----------------------------------------

TITLE: Importing Layout Component from ReactSpectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs package and exports it as the default export for the current file.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Disabling Drag Functionality with React Aria useDrag
DESCRIPTION: Example demonstrating how to temporarily disable dragging by setting the isDisabled option to true in the useDrag hook configuration.

LANGUAGE: tsx
CODE:
import {useDrag} from '@react-aria/dnd';

function Draggable() {
  let {dragProps, isDragging} = useDrag({
    getItems() {
      return [{
        'text/plain': 'hello world'
      }];
    },
    /*- begin highlight -*/
    isDisabled: true
    /*- end highlight -*/
  });

  return (
    <div {...dragProps} role="button" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>
      Drag me
    </div>
  );
}

<Draggable />

----------------------------------------

TITLE: Read-only SearchWithin Component Example in React Spectrum
DESCRIPTION: An example of a SearchWithin component with a read-only SearchField component, preventing user input while still showing the value.

LANGUAGE: tsx
CODE:
<SearchWithin label="Search">
  <SearchField value="Read Only" isReadOnly />
  <Picker defaultSelectedKey="all">
    <Item key="all">All</Item>
    <Item key="campaigns">Campaigns</Item>
    <Item key="audiences">Audiences</Item>
    <Item key="tags">Tags</Item>
  </Picker>
</SearchWithin>

----------------------------------------

TITLE: Styling Disabled ColorArea with CSS
DESCRIPTION: CSS styling for the disabled state of a ColorArea component. It changes the background color to gray for both the color area and the thumb when the component is disabled.

LANGUAGE: css
CODE:
.react-aria-ColorArea {
  &[data-disabled] {
    background: gray !important;

    .react-aria-ColorThumb {
      background: gray !important;
    }
  }
}

----------------------------------------

TITLE: Implementing a DatePickerClearButton with DatePickerStateContext
DESCRIPTION: Example demonstrating how to create a custom clear button component that accesses and manipulates the DatePicker's state to clear the selected value.

LANGUAGE: tsx
CODE:
import {DatePickerStateContext} from 'react-aria-components';

function DatePickerClearButton() {
  let state = React.useContext(DatePickerStateContext)!;
  return (
    <Button
      // Don't inherit default Button behavior from DatePicker.
      slot={null}
      className="clear-button"
      aria-label="Clear"
      onPress={() => state.setValue(null)}>
      ✕
    </Button>
  );
}

<DatePicker defaultValue={today(getLocalTimeZone())}>
  <Label>Date</Label>
  <Group>
    <DateInput>
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <DatePickerClearButton />
    <Button>▼</Button>
  </Group>
  <Popover>
    <Dialog>
      <Calendar>
        <header>
          <Button slot="previous">◀</Button>
          <Heading />
          <Button slot="next">▶</Button>
        </header>
        <CalendarGrid>
          {date => <CalendarCell date={date} />}
        </CalendarGrid>
      </Calendar>
    </Dialog>
  </Popover>
</DatePicker>

----------------------------------------

TITLE: Additional CSS for Link Tags
DESCRIPTION: CSS style for link tags to set the cursor to pointer when a tag has an href attribute, providing visual indication that the tag is clickable.

LANGUAGE: css
CODE:
.tag-group [role="row"][data-href] {
  cursor: pointer;
}

----------------------------------------

TITLE: Importing and Exporting Blog Post Layout Components in JSX
DESCRIPTION: This code imports the BlogPostLayout and Hero components from the '@react-spectrum/docs' package and sets the BlogPostLayout as the default export for the current module. This is used to structure the blog post content.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Setting Up Controlled and Uncontrolled DateRangePicker in React
DESCRIPTION: Demonstrates how to create both controlled and uncontrolled DateRangePicker components using the parseDate function to format date values.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState({
    start: parseDate('2020-02-03'),
    end: parseDate('2020-02-08')
  });

  return (
    <>
      <DateRangePicker
        label="Date range (uncontrolled)"
        defaultValue={{
          start: parseDate('2020-02-03'),
          end: parseDate('2020-02-08')
        }} />
      <DateRangePicker
        label="Date range (controlled)"
        value={value}
        onChange={setValue} />
    </>
  );
}

----------------------------------------

TITLE: Defining Markdown Frontmatter for React Spectrum Releases Page
DESCRIPTION: Sets up the frontmatter for the React Spectrum releases page, specifying the category as Foundation and providing a description. The markdown section uses the PostListing component to display release information.

LANGUAGE: markdown
CODE:
---
category: Foundation
description: React Spectrum releases
---

# Releases

<PostListing type="releases" />

----------------------------------------

TITLE: Rendering useColorWheelState Documentation
DESCRIPTION: Renders the documentation for useColorWheelState component, including the description, package information, API details, and interface specifications with JSX components.

LANGUAGE: jsx
CODE:
# useColorWheelState

<PageDescription>{docs.exports.useColorWheelState.description}</PageDescription>

<HeaderInfo
  packageData={packageData}
  componentNames={['useColorSliderState']} />

## API

<FunctionAPI function={docs.exports.useColorWheelState} links={docs.links} />

## Interface

<ClassAPI links={docs.links} class={docs.links[docs.exports.useColorWheelState.return.id]} />

## Example

See the docs for [useColorWheel](/react-aria/useColorWheel.html) in react-aria for an example of `useColorWheelState`.

----------------------------------------

TITLE: Implementing a Controlled ColorWheel with State
DESCRIPTION: Example of a controlled ColorWheel component that uses React state to manage its value. The component parses an initial HSL color string and updates the state when the user interacts with the wheel.

LANGUAGE: tsx
CODE:
import {parseColor} from 'react-aria-components';

function Example() {
  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));
  return (
    <>
      <MyColorWheel value={color} onChange={setColor} />
      <p>Current color value: {color.toString('hsl')}</p>
    </>
  );
}

----------------------------------------

TITLE: Formatting Percentage Values in NumberField
DESCRIPTION: Shows how to configure NumberField to handle percentage values. The value is multiplied by 100 for display and divided by 100 when entered, with automatic step adjustment.

LANGUAGE: tsx
CODE:
<MyNumberField
  label="Sales tax"
  defaultValue={0.05}
  formatOptions={{
    style: 'percent'
  }} />

----------------------------------------

TITLE: Importing and Exporting Layout Component in React Spectrum Documentation
DESCRIPTION: This code imports the Layout component from @react-spectrum/docs and re-exports it as the default export. This pattern is used for page layout in React Spectrum documentation files.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Released Packages List for React Spectrum Ecosystem
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem with their current version numbers. The list includes packages from @adobe/react-spectrum, @internationalized, @react-aria, @react-spectrum, @react-stately, @react-types, and @spectrum-icons namespaces.

LANGUAGE: plaintext
CODE:
 - @adobe/react-spectrum@3.39.0
 - @internationalized/date@3.7.0
 - @react-aria/accordion@3.0.0-alpha.37
 - @react-aria/actiongroup@3.7.12
 - @react-aria/autocomplete@3.0.0-alpha.37
 - @react-aria/breadcrumbs@3.5.20
 - @react-aria/button@3.11.1
 - @react-aria/calendar@3.7.0
 - @react-aria/checkbox@3.15.1
 - @react-aria/collections@3.0.0-alpha.7
 - @react-aria/color@3.0.3
 - @react-aria/combobox@3.11.1
 - @react-aria/datepicker@3.13.0
 - @react-aria/dialog@3.5.21
 - @react-aria/disclosure@3.0.1
 - @react-aria/dnd@3.8.1
 - @react-aria/focus@3.19.1
 - @react-aria/form@3.0.12
 - @react-aria/grid@3.11.1
 - @react-aria/gridlist@3.10.1
 - @react-aria/i18n@3.12.5
 - @react-aria/interactions@3.23.0
 - @react-aria/label@3.7.14
 - @react-aria/landmark@3.0.0-beta.18
 - @react-aria/link@3.7.8
 - @react-aria/listbox@3.14.0
 - @react-aria/menu@3.17.0
 - @react-aria/meter@3.4.19
 - @react-aria/numberfield@3.11.10
 - @react-aria/overlays@3.25.0
 - @react-aria/progress@3.4.19
 - @react-aria/radio@3.10.11
 - @react-aria/searchfield@3.8.0
 - @react-aria/select@3.15.1
 - @react-aria/selection@3.22.0
 - @react-aria/separator@3.4.5
 - @react-aria/slider@3.7.15
 - @react-aria/spinbutton@3.6.11
 - @react-aria/steplist@3.0.0-alpha.13
 - @react-aria/switch@3.6.11
 - @react-aria/table@3.16.1
 - @react-aria/tabs@3.9.9
 - @react-aria/tag@3.4.9
 - @react-aria/test-utils@1.0.0-alpha.4
 - @react-aria/textfield@3.16.0
 - @react-aria/toast@3.0.0-beta.19
 - @react-aria/toggle@3.10.11
 - @react-aria/toolbar@3.0.0-beta.12
 - @react-aria/tooltip@3.7.11
 - @react-aria/tree@3.0.0-beta.3
 - @react-aria/utils@3.27.0
 - @react-aria/virtualizer@4.1.1
 - @react-aria/visually-hidden@3.8.19
 - @react-spectrum/accordion@3.0.2
 - @react-spectrum/actionbar@3.6.3
 - @react-spectrum/actiongroup@3.10.11
 - @react-spectrum/autocomplete@3.0.0-alpha.39
 - @react-spectrum/avatar@3.0.18
 - @react-spectrum/badge@3.1.19
 - @react-spectrum/breadcrumbs@3.9.13
 - @react-spectrum/button@3.16.10
 - @react-spectrum/buttongroup@3.6.18
 - @react-spectrum/calendar@3.6.0
 - @react-spectrum/card@3.0.0-alpha.39
 - @react-spectrum/checkbox@3.9.12
 - @react-spectrum/color@3.0.3
 - @react-spectrum/combobox@3.14.1
 - @react-spectrum/contextualhelp@3.6.17
 - @react-spectrum/datepicker@3.12.0
 - @react-spectrum/dialog@3.8.17
 - @react-spectrum/divider@3.5.19
 - @react-spectrum/dnd@3.5.1
 - @react-spectrum/dropzone@3.0.7
 - @react-spectrum/filetrigger@3.0.7
 - @react-spectrum/form@3.7.11
 - @react-spectrum/icon@3.8.1
 - @react-spectrum/illustratedmessage@3.5.6
 - @react-spectrum/image@3.5.7
 - @react-spectrum/inlinealert@3.2.11
 - @react-spectrum/label@3.16.11
 - @react-spectrum/labeledvalue@3.1.19
 - @react-spectrum/layout@3.6.11
 - @react-spectrum/link@3.6.13
 - @react-spectrum/list@3.9.1
 - @react-spectrum/listbox@3.14.1
 - @react-spectrum/menu@3.21.1
 - @react-spectrum/meter@3.5.6
 - @react-spectrum/numberfield@3.9.9
 - @react-spectrum/overlays@5.7.1
 - @react-spectrum/picker@3.15.5
 - @react-spectrum/progress@3.7.12
 - @react-spectrum/provider@3.10.1
 - @react-spectrum/radio@3.7.12
 - @react-spectrum/s2@0.6.0
 - @react-spectrum/searchfield@3.8.12
 - @react-spectrum/slider@3.7.1
 - @react-spectrum/statuslight@3.5.18
 - @react-spectrum/steplist@3.0.0-alpha.11
 - @react-spectrum/switch@3.5.11
 - @react-spectrum/table@3.15.1
 - @react-spectrum/tabs@3.8.16
 - @react-spectrum/tag@3.2.12
 - @react-spectrum/test-utils@1.0.0-alpha.4
 - @react-spectrum/text@3.5.11
 - @react-spectrum/textfield@3.12.8
 - @react-spectrum/theme-dark@3.5.15
 - @react-spectrum/theme-default@3.5.15
 - @react-spectrum/theme-express@3.0.0-alpha.17
 - @react-spectrum/theme-light@3.4.15
 - @react-spectrum/toast@3.0.0-beta.18
 - @react-spectrum/tooltip@3.7.1
 - @react-spectrum/tree@3.0.0-beta.3
 - @react-spectrum/utils@3.12.1
 - @react-spectrum/view@3.6.15
 - @react-spectrum/well@3.4.19
 - @react-stately/autocomplete@3.0.0-alpha.0
 - @react-stately/calendar@3.7.0
 - @react-stately/checkbox@3.6.11
 - @react-stately/collections@3.12.1
 - @react-stately/color@3.8.2
 - @react-stately/combobox@3.10.2
 - @react-stately/data@3.12.1
 - @react-stately/datepicker@3.12.0
 - @react-stately/disclosure@3.0.1
 - @react-stately/dnd@3.5.1
 - @react-stately/form@3.1.1
 - @react-stately/grid@3.10.1
 - @react-stately/layout@4.1.1
 - @react-stately/list@3.11.2
 - @react-stately/menu@3.9.1
 - @react-stately/numberfield@3.9.9
 - @react-stately/overlays@3.6.13
 - @react-stately/radio@3.10.10
 - @react-stately/searchfield@3.5.9
 - @react-stately/select@3.6.10
 - @react-stately/selection@3.19.0
 - @react-stately/slider@3.6.1
 - @react-stately/steplist@3.0.0-alpha.11
 - @react-stately/table@3.13.1
 - @react-stately/tabs@3.7.1
 - @react-stately/toggle@3.8.1
 - @react-stately/tooltip@3.5.1
 - @react-stately/tree@3.8.7
 - @react-stately/virtualizer@4.2.1
 - @react-types/accordion@3.0.0-alpha.26
 - @react-types/actionbar@3.1.12
 - @react-types/actiongroup@3.4.14
 - @react-types/autocomplete@3.0.0-alpha.28
 - @react-types/avatar@3.0.12
 - @react-types/badge@3.1.14
 - @react-types/breadcrumbs@3.7.10
 - @react-types/button@3.10.2
 - @react-types/buttongroup@3.3.14
 - @react-types/calendar@3.6.0
 - @react-types/card@3.0.0-alpha.32
 - @react-types/checkbox@3.9.1
 - @react-types/color@3.0.2
 - @react-types/combobox@3.13.2
 - @react-types/contextualhelp@3.2.15
 - @react-types/datepicker@3.10.0
 - @react-types/dialog@3.5.15
 - @react-types/divider@3.3.14
 - @react-types/form@3.7.9
 - @react-types/grid@3.2.11
 - @react-types/illustratedmessage@3.3.14
 - @react-types/image@3.4.6
 - @react-types/label@3.9.8
 - @react-types/layout@3.3.20
 - @react-types/link@3.5.10
 - @react-types/list@3.2.23
 - @react-types/listbox@3.5.4
 - @react-types/menu@3.9.14
 - @react-types/meter@3.4.6
 - @react-types/numberfield@3.8.8
 - @react-types/overlays@3.8.12
 - @react-types/progress@3.5.9
 - @react-types/provider@3.8.6
 - @react-types/radio@3.8.6
 - @react-types/searchfield@3.5.11
 - @react-types/select@3.9.9
 - @react-types/shared@3.27.0
 - @react-types/slider@3.7.8
 - @react-types/statuslight@3.3.14
 - @react-types/switch@3.5.8
 - @react-types/table@3.10.4
 - @react-types/tabs@3.3.12
 - @react-types/text@3.3.14
 - @react-types/textfield@3.11.0
 - @react-types/tooltip@3.4.14
 - @react-types/view@3.4.14
 - @react-types/well@3.3.14
 - @spectrum-icons/color@3.5.18
 - @spectrum-icons/express@3.0.0-alpha.22
 - @spectrum-icons/illustrations@3.6.18
 - @spectrum-icons/ui@3.6.12
 - @spectrum-icons/workflow@4.2.17
 - @react-spectrum/codemods@0.4.0
 - @react-aria/optimize-locales-plugin@1.1.4
 - @react-spectrum/s2-icon-builder@0.2.1
 - react-aria@3.37.0
 - react-aria-components@1.6.0
 - react-stately@3.35.0

----------------------------------------

TITLE: Custom ColorPicker with ColorWheel and ColorArea
DESCRIPTION: Shows how to create a custom color picker layout using ColorWheel and ColorArea components.

LANGUAGE: tsx
CODE:
import {ColorWheel, ColorArea} from '@react-spectrum/color';

<ColorPicker label="Fill" defaultValue="#08f">
  <ColorWheel />
  <ColorArea
    colorSpace="hsb"
    xChannel="saturation"
    yChannel="brightness"
    size="size-400"
    position="absolute"
    top="calc(50% - size-400)"
    left="calc(50% - size-400)" />
</ColorPicker>

----------------------------------------

TITLE: Getting Current Time in Different Time Zones with TypeScript
DESCRIPTION: Retrieves the current time in a specific time zone and the user's local time zone using the now and getLocalTimeZone functions.

LANGUAGE: tsx
CODE:
import {now, getLocalTimeZone} from '@internationalized/date';

let nyTime = now('America/New_York');
let localTime = now(getLocalTimeZone());

----------------------------------------

TITLE: CheckboxGroup Integration with HTML Forms in React Spectrum
DESCRIPTION: Demonstrates how to integrate a CheckboxGroup with HTML forms by using the name prop on the CheckboxGroup and value props on individual Checkbox components. This enables proper form submission with the selected checkbox values.

LANGUAGE: tsx
CODE:
<CheckboxGroup label="Favorite sports" name="sports">
  <Checkbox value="soccer">Soccer</Checkbox>
  <Checkbox value="baseball">Baseball</Checkbox>
  <Checkbox value="basketball">Basketball</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Release Metadata in YAML Front Matter
DESCRIPTION: Defines metadata for the blog post including a description of the release and the publication date using YAML front matter syntax.

LANGUAGE: Markdown
CODE:
---
description: This month we have been concentrating on updating our pre-released components along with some improvements to our Slider hooks and general bug fixes. Thank you to all those who reported issues and contributed fixes in this release!
date: 2022-03-07
---

----------------------------------------

TITLE: Controlled and Uncontrolled Checkbox States in React Spectrum
DESCRIPTION: Shows both controlled and uncontrolled implementations of the Checkbox component. The uncontrolled example uses defaultSelected while the controlled example uses isSelected with a state setter.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState(true);

  return (
    <Flex direction="row">
      <Checkbox defaultSelected>Subscribe (uncontrolled)</Checkbox>
      <Checkbox isSelected={selected} onChange={setSelected}>Subscribe (controlled)</Checkbox>
    </Flex>
  );
}

----------------------------------------

TITLE: Importing useSearchField React Components
DESCRIPTION: Import statements for the useSearchField hook and related components from React Aria and React Stately libraries.

LANGUAGE: TypeScript
CODE:
import {useSearchField} from '@react-aria/searchfield';
import {useSearchFieldState} from '@react-stately/searchfield';

----------------------------------------

TITLE: Implementing a Controlled Slider with React Hooks
DESCRIPTION: Example of creating a controlled slider using React's useState hook. The value prop is updated through the onChange handler, and the current value is displayed below the slider.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState(25);
  return (
    <>
      <Slider
        label="Cookies to buy"
        value={value}
        onChange={setValue} />
      <p>Current value: {value}</p>
    </>
  );
}

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from the React Spectrum documentation library and exports it as the default export for this documentation page.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Configuring I18nProvider with Explicit Locale for SSR
DESCRIPTION: Example showing how to set up internationalization in a server-rendered React Aria application. The code demonstrates wrapping an app with I18nProvider using an explicit locale and setting HTML lang and dir attributes.

LANGUAGE: tsx
CODE:
import {I18nProvider, useLocale} from 'react-aria-components';

function App() {
  let {locale, direction} = useLocale();

  return (
    <html lang={locale} dir={direction}>
      {/* your app here */}
    </html>
  );
}

<I18nProvider locale={locale}>
  <App />
</I18nProvider>

----------------------------------------

TITLE: Logging Drag and Drop Events in React
DESCRIPTION: This example logs all drag and drop events that occur within a drop target. It registers handlers for onDropEnter, onDropMove, onDropExit, and onDrop events, and displays the event data in a list for debugging purposes.

LANGUAGE: tsx
CODE:
function DropTarget() {
  let [events, setEvents] = React.useState([]);
  let onEvent = e => setEvents(events => [JSON.stringify(e), ...events]);
  let ref = React.useRef(null);
  let {dropProps, isDropTarget} = useDrop({
    ref,
    onDropEnter: onEvent,
    onDropMove: onEvent,
    onDropExit: onEvent,
    onDrop: onEvent
  });

  return (
    <ul {...dropProps} role="button" tabIndex={0} ref={ref} className={`droppable ${isDropTarget ? 'target' : ''}`} style={{display: 'block', width: 'auto'}}>
      {events.map((e, i) => <li key={i}>{e}</li>)}
    </ul>
  );
}

<Draggable />
<DropTarget />

----------------------------------------

TITLE: Implementing Controlled Tooltip State in TSX
DESCRIPTION: Example demonstrating how to control the open state of a tooltip using React state, allowing programmatic control of when the tooltip appears.

LANGUAGE: tsx
CODE:
function Example() {
  let [isOpen, setOpen] = React.useState(false);

  return (
    <>
      <p>Tooltip is {isOpen ? 'showing' : 'not showing'}</p>
      <TooltipButton tooltip="Notifications" isOpen={isOpen} onOpenChange={setOpen}>📣</TooltipButton>
    </>
  );
}

----------------------------------------

TITLE: Importing React Spectrum Components and Hooks in TSX
DESCRIPTION: Imports various React Spectrum components, React Aria hooks, and React Stately hooks that would be used in the blog post examples. Includes components for UI elements and hooks for accessibility and state management.

LANGUAGE: TSX
CODE:
import {Picker, Item, Section} from '@react-spectrum/picker';
import {Text} from '@react-spectrum/text';
import Book from '@spectrum-icons/workflow/Book';
import BulkEditUsers from '@spectrum-icons/workflow/BulkEditUsers';
import Draw from '@spectrum-icons/workflow/Draw';
import {useSwitch} from '@react-aria/switch';
import {VisuallyHidden} from '@react-aria/visually-hidden';
import {useToggleState} from '@react-stately/toggle';
import {useFocusRing} from '@react-aria/focus';

----------------------------------------

TITLE: Optimizing Bundle Size with Custom Calendar Implementation
DESCRIPTION: Demonstrates how to reduce bundle size by creating a custom implementation of the createCalendar function that only includes required calendar systems. This example shows implementation for Gregorian calendar only.

LANGUAGE: jsx
CODE:
import {useDateFieldState} from '@react-stately/datepicker';
import {useLocale} from '@react-aria/i18n';
import {GregorianCalendar} from '@internationalized/date';

function createCalendar(identifier) {
  switch (identifier) {
    case 'gregory':
      return new GregorianCalendar();
    default:
      throw new Error(`Unsupported calendar ${identifier}`);
  }
}

export function DateField(props) {
  let {locale} = useLocale();
  let state = useDateFieldState({
    ...props,
    locale,
    createCalendar
  });

  // ...
}

----------------------------------------

TITLE: Selecting Items with React Aria Select Component in TSX
DESCRIPTION: This example shows a React Aria Select component with a dropdown list of permission options. The component is composed of Label, Button, SelectValue, Popover, and ListBox parts, demonstrating React Aria's compositional design.

LANGUAGE: tsx
CODE:
<Select>
  <Label>Permissions</Label>
  <Button>
    <SelectValue />
    <span>▼</span>
  </Button>
  <Popover>
    <ListBox>
      <ListBoxItem>Read Only</ListBoxItem>
      <ListBoxItem>Edit</ListBoxItem>
      <ListBoxItem>Admin</ListBoxItem>
    </ListBox>
  </Popover>
</Select>

----------------------------------------

TITLE: Frontmatter Configuration for Documentation Page
DESCRIPTION: Defines metadata for the documentation page including category and keywords to improve discoverability.

LANGUAGE: jsx
CODE:
---
category: Color
keywords: [color picker, color area, state]
---

----------------------------------------

TITLE: Custom Formatting for ProgressBar Values
DESCRIPTION: Example of using the formatOptions prop to customize the value display format. This formats the progress value as Japanese Yen currency.

LANGUAGE: tsx
CODE:
<MyProgressBar
  label="Sending…"
  formatOptions={{style: 'currency', currency: 'JPY'}}
  value={60} />

----------------------------------------

TITLE: Creating Simple Static Collection with Menu Items
DESCRIPTION: Demonstrates how to create a basic static collection using Menu and Item components in JSX.

LANGUAGE: TSX
CODE:
<Menu>
  <Item>Open</Item>
  <Item>Edit</Item>
  <Item>Delete</Item>
</Menu>

----------------------------------------

TITLE: Importing and Exporting Blog Post Layout Components in React
DESCRIPTION: Imports BlogPostLayout and Hero components from @react-spectrum/docs, and exports BlogPostLayout as the default export. This is the base setup for a React Spectrum blog post layout.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Custom Styled Group with Class Name
DESCRIPTION: Example showing how to override the default class name for the Group component with a custom one for styling purposes.

LANGUAGE: jsx
CODE:
<Group className="my-group">
  {/* ... */}
</Group>

----------------------------------------

TITLE: Styling React Spectrum Components
DESCRIPTION: Example of applying styling to a React Spectrum Button component using the style() macro with the styles prop rather than className.

LANGUAGE: jsx
CODE:
<Button styles={style({marginStart: 16})}>
  Hello Spectrum 2!
</Button>

----------------------------------------

TITLE: Migrating Border Radius Style Props in React Spectrum
DESCRIPTION: This example shows how to update the 'borderRadius' style prop from React Spectrum v3 to S2, replacing named values with the corresponding S2 token values.

LANGUAGE: diff
CODE:
- <View borderRadius="small"  />
+ <div className={style({borderRadius: 'sm'})} />

----------------------------------------

TITLE: Using MutationObserver for DOM Change Detection
DESCRIPTION: Reference to the MutationObserver API for tracking DOM changes while the ComboBox listbox is open, ensuring newly added elements are properly hidden from screen readers.

LANGUAGE: javascript
CODE:
MutationObserver

----------------------------------------

TITLE: Importing NumberField Component in React Spectrum
DESCRIPTION: Basic import statement for the NumberField component from React Spectrum package. This snippet shows how to import the necessary components for implementing number fields.

LANGUAGE: jsx
CODE:
import {NumberField} from '@react-spectrum/numberfield';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: 500 Internal Server Error IllustratedMessage Example
DESCRIPTION: Example showing how to display a 500 error message with the Error illustration to indicate an internal server error.

LANGUAGE: tsx
CODE:
import Error from '@spectrum-icons/illustrations/Error';

<IllustratedMessage>
  <Error />
  <Heading>Error 500: Internal server error</Heading>
  <Content>Something went wrong. Please try again later.</Content>
</IllustratedMessage>

----------------------------------------

TITLE: Importing ExampleCard and Component Illustrations for React Spectrum Documentation
DESCRIPTION: Imports the ExampleCard component and numerous SVG illustrations for different React Spectrum components to be displayed in the documentation.

LANGUAGE: JSX
CODE:
import {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';
import ComboBoxAnatomy from '../assets/component-illustrations/ComboBox.svg';
import SelectAnatomy from '../assets/component-illustrations/Picker.svg';
import Button from '../assets/component-illustrations/Button.svg';
import ToggleButton from '../assets/component-illustrations/ToggleButton.svg';
import ActionButton from '../assets/component-illustrations/ActionButton.svg';
import ActionGroup from '../assets/component-illustrations/ActionGroup.svg';
import ButtonGroup from '../assets/component-illustrations/ButtonGroup.svg';
import Checkbox from '../assets/component-illustrations/Checkbox.svg';
import CheckboxGroup from '../assets/component-illustrations/CheckboxGroup.svg';
import RadioGroup from '../assets/component-illustrations/RadioGroup.svg';
import Switch from '../assets/component-illustrations/Switch.svg';
import TextField from '../assets/component-illustrations/TextField.svg';
import TextArea from '../assets/component-illustrations/TextArea.svg';
import NumberField from '../assets/component-illustrations/NumberField.svg';
import SearchField from '../assets/component-illustrations/SearchField.svg';
import Form from '../assets/component-illustrations/Form.svg';
import Meter from '../assets/component-illustrations/Meter.svg';
import ProgressCircle from '../assets/component-illustrations/ProgressCircle.svg';
import ProgressBar from '../assets/component-illustrations/ProgressBar.svg';
import StatusLight from '../assets/component-illustrations/StatusLight.svg';
import Tabs from '../assets/component-illustrations/Tabs.svg';
import Link from '../assets/component-illustrations/Link.svg';
import Breadcrumbs from '../assets/component-illustrations/Breadcrumbs.svg';
import Slider from '../assets/component-illustrations/Slider.svg';
import RangeSlider from '../assets/component-illustrations/RangeSlider.svg';
import Dialog from '../assets/component-illustrations/Dialog.svg';
import Tooltip from '../assets/component-illustrations/Tooltip.svg';
import Popover from '../assets/component-illustrations/Popover.svg';
import ContextualHelp from '../assets/component-illustrations/ContextualHelp.svg';
import Menu from '../assets/component-illustrations/Menu.svg';
import ListBox from '../assets/component-illustrations/ListBox.svg';
import ListView from '../assets/component-illustrations/ListView.svg';
import Table from '../assets/component-illustrations/Table.svg';
import Tree from '../assets/component-illustrations/Tree.svg';
import Calendar from '../assets/component-illustrations/Calendar.svg';
import RangeCalendar from '../assets/component-illustrations/RangeCalendar.svg';
import DateField from '../assets/component-illustrations/DateField.svg';
import TimeField from '../assets/component-illustrations/TimeField.svg';
import DatePicker from '../assets/component-illustrations/DatePicker.svg';
import DateRangePicker from '../assets/component-illustrations/DateRangePicker.svg';
import LabeledValue from '../assets/component-illustrations/LabeledValue.svg';
import Badge from '../assets/component-illustrations/Badge.svg';
import TagGroup from '../assets/component-illustrations/TagGroup.svg';
import DropZone from '../assets/component-illustrations/DropZone.svg';
import FileTrigger from '../assets/component-illustrations/FileTrigger.svg'
import ColorSlider from '../assets/component-illustrations/ColorSlider.svg';
import ColorWheel from '../assets/component-illustrations/ColorWheel.svg';
import ColorArea from '../assets/component-illustrations/ColorArea.svg';
import ColorField from '../assets/component-illustrations/ColorField.svg';
import ColorSwatch from '../assets/component-illustrations/ColorSwatch.svg';
import ColorSwatchPicker from '../assets/component-illustrations/ColorSwatchPicker.svg';
import ColorPicker from '../assets/component-illustrations/ColorPicker.svg';
import Disclosure from '../assets/component-illustrations/Disclosure.svg';
import Accordion from '../assets/component-illustrations/DisclosureGroup.svg';
import Toast from '../assets/component-illustrations/Toast.svg';

----------------------------------------

TITLE: Implementing StockCell Component with Tailwind CSS in React Spectrum
DESCRIPTION: A custom Cell component implementation with Tailwind CSS styling for padding, text truncation, and focus states. It extends the base CellProps interface and preserves any additional class names passed via props.

LANGUAGE: tsx
CODE:
function StockCell(props: CellProps) {
  return <Cell {...props} className={`px-4 py-2 truncate ${props.className} focus-visible:outline focus-visible:outline-2 focus-visible:outline-slate-600 focus-visible:-outline-offset-4 group-selected:focus-visible:outline-white`} />;
}

----------------------------------------

TITLE: Importing and Exporting BlogPostLayout Component in JSX
DESCRIPTION: Imports BlogPostLayout and Hero components from @react-spectrum/docs and sets the default export to BlogPostLayout. This code is part of the blog post setup structure.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Creating Small Size Modal Dialog in React Spectrum
DESCRIPTION: Shows how to create a small (S) size dialog with a form inside. This example uses a render prop pattern to access the close function, allowing the dialog to be dismissed programmatically.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Small</ActionButton>
  {(close) => (
    <Dialog size="S">
      <Heading>Profile</Heading>
      <Divider />
      <ButtonGroup>
        <Button variant="secondary" onPress={close}>Cancel</Button>
        <Button autoFocus variant="accent" onPress={close}>Save</Button>
      </ButtonGroup>
      <Content>
        <Form>
          <TextField label="Name" />
          <Checkbox>Make private</Checkbox>
        </Form>
      </Content>
    </Dialog>
  )}
</DialogTrigger>

----------------------------------------

TITLE: Importing Documentation Dependencies for React Spectrum
DESCRIPTION: Imports necessary components and documentation data for rendering the API documentation page for the useAutocomplete hook.

LANGUAGE: JavaScript
CODE:
import docs from 'docs:@react-aria/autocomplete';
import {FunctionAPI, HeaderInfo, InterfaceType, TypeContext, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-aria/autocomplete/package.json';
import statelyDocs from 'docs:@react-stately/autocomplete';
import {InlineAlert, Content, Heading} from '@adobe/react-spectrum';

----------------------------------------

TITLE: CSS Styling for Tabs Component
DESCRIPTION: CSS styles for the Tabs component, including styling for horizontal and vertical orientations, tab selection indicators, and tab panels. The styles provide visual cues for tab states including selected and disabled tabs.

LANGUAGE: css
CODE:
.tabs {
  height: 150px;
  display: flex;
  flex-direction: column;
}

.tabs.vertical {
  flex-direction: row;
}

[role=tablist] {
  display: flex;
}

[role=tablist][aria-orientation=horizontal] {
  border-bottom: 1px solid gray;
}

[role=tablist][aria-orientation=vertical] {
  flex-direction: column;
  border-right: 1px solid gray;
}

[role=tab] {
  padding: 10px;
  cursor: default;
}

[role=tablist][aria-orientation=horizontal] [role=tab] {
  border-bottom: 3px solid transparent;
}

[role=tablist][aria-orientation=vertical] [role=tab] {
  border-right: 3px solid transparent;
}

[role=tablist] [role=tab][aria-selected=true] {
  border-color: var(--blue);
}

[role=tab][aria-disabled] {
  opacity: 0.5;
}

[role=tabpanel] {
  padding: 10px;
}

----------------------------------------

TITLE: Managing Hierarchical Data with useTreeData Hook
DESCRIPTION: Example of using the useTreeData hook to manage hierarchical collection data. This hook provides methods for manipulating tree-structured data while maintaining selection state and parent-child relationships.

LANGUAGE: tsx
CODE:
import {useTreeData} from '@react-stately/data';

let tree = useTreeData({
  initialItems: [
    {
      name: 'People',
      items: [
        {name: 'David'},
        {name: 'Sam'},
        {name: 'Jane'}
      ]
    },
    {
      name: 'Animals',
      items: [
        {name: 'Aardvark'},
        {name: 'Kangaroo'},
        {name: 'Snake'}
      ]
    }
  ],
  getKey: item => item.name,
  getChildren: item => item.items
});

function addPerson(name) {
  tree.append('People', {name});
}

<ListBox items={tree.items}>
  {node =>
    <Section id={section.name} items={node.children}>
      <Header>{section.name}</Header>
      <Collection items={section.children}>
        {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
      </Collection>
    </Section>
  }
</ListBox>

----------------------------------------

TITLE: Basic Content Component Example in React Spectrum
DESCRIPTION: Demonstrates a simple implementation of the Content component with text content. The component serves as a semantic container that receives styling from parent Spectrum containers.

LANGUAGE: tsx
CODE:
<Content>Content is king</Content>

----------------------------------------

TITLE: Importing Documentation Dependencies for useDatePickerState
DESCRIPTION: Imports necessary documentation components, type information, and package data for rendering the useDatePickerState API documentation.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/datepicker';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/datepicker/package.json';

----------------------------------------

TITLE: Listing Released React Spectrum Packages
DESCRIPTION: A comprehensive list of all released packages within the React Spectrum ecosystem, organized by package namespace. Includes version numbers for React Aria, React Stately, React Spectrum components, type definitions, and icon collections.

LANGUAGE: markdown
CODE:
 - @adobe/react-spectrum@3.40.0
 - @react-aria/actiongroup@3.7.13
 - @react-aria/autocomplete@3.0.0-beta.0
 - @react-aria/breadcrumbs@3.5.21
 - @react-aria/button@3.12.0
 - @react-aria/calendar@3.7.1
 - @react-aria/checkbox@3.15.2
 - @react-aria/collections@3.0.0-beta.0
 - @react-aria/color@3.0.4
 - @react-aria/combobox@3.12.0
 - @react-aria/datepicker@3.14.0
 - @react-aria/dialog@3.5.22
 - @react-aria/disclosure@3.0.2
 - @react-aria/dnd@3.9.0
 - @react-aria/focus@3.20.0
 - @react-aria/form@3.0.13
 - @react-aria/grid@3.12.0
 - @react-aria/gridlist@3.11.0
 - @react-aria/i18n@3.12.6
 - @react-aria/interactions@3.24.0
 - @react-aria/label@3.7.15
 - @react-aria/landmark@3.0.0
 - @react-aria/link@3.7.9
 - @react-aria/listbox@3.14.1
 - @react-aria/menu@3.18.0
 - @react-aria/meter@3.4.20
 - @react-aria/numberfield@3.11.11
 - @react-aria/overlays@3.26.0
 - @react-aria/progress@3.4.20
 - @react-aria/radio@3.11.0
 - @react-aria/searchfield@3.8.1
 - @react-aria/select@3.15.2
 - @react-aria/selection@3.23.0
 - @react-aria/separator@3.4.6
 - @react-aria/slider@3.7.16
 - @react-aria/spinbutton@3.6.12
 - @react-aria/steplist@3.0.0-alpha.14
 - @react-aria/switch@3.7.0
 - @react-aria/table@3.17.0
 - @react-aria/tabs@3.10.0
 - @react-aria/tag@3.5.0
 - @react-aria/test-utils@1.0.0-alpha.5
 - @react-aria/textfield@3.17.0
 - @react-aria/toast@3.0.0
 - @react-aria/toggle@3.11.0
 - @react-aria/toolbar@3.0.0-beta.13
 - @react-aria/tooltip@3.8.0
 - @react-aria/tree@3.0.0
 - @react-aria/utils@3.28.0
 - @react-aria/virtualizer@4.1.2
 - @react-aria/visually-hidden@3.8.20
 - @react-spectrum/accordion@3.0.3
 - @react-spectrum/actionbar@3.6.4
 - @react-spectrum/actiongroup@3.10.12
 - @react-spectrum/autocomplete@3.0.0-alpha.40
 - @react-spectrum/avatar@3.0.19
 - @react-spectrum/badge@3.1.20
 - @react-spectrum/breadcrumbs@3.9.14
 - @react-spectrum/button@3.16.11
 - @react-spectrum/buttongroup@3.6.19
 - @react-spectrum/calendar@3.6.1
 - @react-spectrum/card@3.0.0-alpha.40
 - @react-spectrum/checkbox@3.9.13
 - @react-spectrum/color@3.0.4
 - @react-spectrum/combobox@3.15.0
 - @react-spectrum/contextualhelp@3.6.18
 - @react-spectrum/datepicker@3.13.0
 - @react-spectrum/dialog@3.8.18
 - @react-spectrum/divider@3.5.20
 - @react-spectrum/dnd@3.5.2
 - @react-spectrum/dropzone@3.0.8
 - @react-spectrum/filetrigger@3.0.8
 - @react-spectrum/form@3.7.12
 - @react-spectrum/icon@3.8.2
 - @react-spectrum/illustratedmessage@3.5.7
 - @react-spectrum/image@3.5.8
 - @react-spectrum/inlinealert@3.2.12
 - @react-spectrum/label@3.16.12
 - @react-spectrum/labeledvalue@3.2.0
 - @react-spectrum/layout@3.6.12
 - @react-spectrum/link@3.6.14
 - @react-spectrum/list@3.9.2
 - @react-spectrum/listbox@3.14.2
 - @react-spectrum/menu@3.21.2
 - @react-spectrum/meter@3.5.7
 - @react-spectrum/numberfield@3.9.10
 - @react-spectrum/overlays@5.7.2
 - @react-spectrum/picker@3.15.6
 - @react-spectrum/progress@3.7.13
 - @react-spectrum/provider@3.10.2
 - @react-spectrum/radio@3.7.13
 - @react-spectrum/s2@0.7.0
 - @react-spectrum/searchfield@3.8.13
 - @react-spectrum/slider@3.7.2
 - @react-spectrum/statuslight@3.5.19
 - @react-spectrum/steplist@3.0.0-alpha.12
 - @react-spectrum/style-macro-s1@3.0.0-alpha.3
 - @react-spectrum/switch@3.5.12
 - @react-spectrum/table@3.16.0
 - @react-spectrum/tabs@3.8.17
 - @react-spectrum/tag@3.2.13
 - @react-spectrum/test-utils@1.0.0-alpha.5
 - @react-spectrum/text@3.5.12
 - @react-spectrum/textfield@3.13.0
 - @react-spectrum/theme-dark@3.5.16
 - @react-spectrum/theme-default@3.5.16
 - @react-spectrum/theme-express@3.0.0-alpha.18
 - @react-spectrum/theme-light@3.4.16
 - @react-spectrum/toast@3.0.0
 - @react-spectrum/tooltip@3.7.2
 - @react-spectrum/tree@3.0.0
 - @react-spectrum/utils@3.12.2
 - @react-spectrum/view@3.6.16
 - @react-spectrum/well@3.4.20
 - @react-stately/autocomplete@3.0.0-beta.0
 - @react-stately/calendar@3.7.1
 - @react-stately/checkbox@3.6.12
 - @react-stately/collections@3.12.2
 - @react-stately/color@3.8.3
 - @react-stately/combobox@3.10.3
 - @react-stately/data@3.12.2
 - @react-stately/datepicker@3.13.0
 - @react-stately/disclosure@3.0.2
 - @react-stately/dnd@3.5.2
 - @react-stately/flags@3.1.0
 - @react-stately/form@3.1.2
 - @react-stately/grid@3.11.0
 - @react-stately/layout@4.2.0
 - @react-stately/list@3.12.0
 - @react-stately/menu@3.9.2
 - @react-stately/numberfield@3.9.10
 - @react-stately/overlays@3.6.14
 - @react-stately/radio@3.10.11
 - @react-stately/searchfield@3.5.10
 - @react-stately/select@3.6.11
 - @react-stately/selection@3.20.0
 - @react-stately/slider@3.6.2
 - @react-stately/steplist@3.0.0-alpha.12
 - @react-stately/table@3.14.0
 - @react-stately/tabs@3.8.0
 - @react-stately/toast@3.0.0
 - @react-stately/toggle@3.8.2
 - @react-stately/tooltip@3.5.2
 - @react-stately/tree@3.8.8
 - @react-stately/virtualizer@4.3.0
 - @react-types/actionbar@3.1.13
 - @react-types/actiongroup@3.4.15
 - @react-types/autocomplete@3.0.0-alpha.29
 - @react-types/avatar@3.0.13
 - @react-types/badge@3.1.15
 - @react-types/breadcrumbs@3.7.11
 - @react-types/button@3.11.0
 - @react-types/buttongroup@3.3.15
 - @react-types/calendar@3.6.1
 - @react-types/card@3.0.0-alpha.33
 - @react-types/checkbox@3.9.2
 - @react-types/color@3.0.3
 - @react-types/combobox@3.13.3
 - @react-types/contextualhelp@3.2.16
 - @react-types/datepicker@3.11.0
 - @react-types/dialog@3.5.16
 - @react-types/divider@3.3.15
 - @react-types/form@3.7.10
 - @react-types/grid@3.3.0
 - @react-types/illustratedmessage@3.3.15
 - @react-types/image@3.4.7
 - @react-types/label@3.9.9
 - @react-types/layout@3.3.21
 - @react-types/link@3.5.11
 - @react-types/list@3.2.24
 - @react-types/listbox@3.5.5
 - @react-types/menu@3.9.15
 - @react-types/meter@3.4.7
 - @react-types/numberfield@3.8.9
 - @react-types/overlays@3.8.13
 - @react-types/progress@3.5.10
 - @react-types/provider@3.8.7
 - @react-types/radio@3.8.7
 - @react-types/searchfield@3.6.0
 - @react-types/select@3.9.10
 - @react-types/shared@3.28.0
 - @react-types/slider@3.7.9
 - @react-types/statuslight@3.3.15
 - @react-types/switch@3.5.9
 - @react-types/table@3.11.0
 - @react-types/tabs@3.3.13
 - @react-types/text@3.3.15
 - @react-types/textfield@3.12.0
 - @react-types/tooltip@3.4.15
 - @react-types/view@3.4.15
 - @react-types/well@3.3.15
 - @spectrum-icons/color@3.5.19
 - @spectrum-icons/express@3.0.0-alpha.23
 - @spectrum-icons/illustrations@3.6.19
 - @spectrum-icons/ui@3.6.13
 - @spectrum-icons/workflow@4.2.18
 - @react-spectrum/codemods@0.5.0
 - @react-spectrum/parcel-transformer-s2-icon@0.2.1
 - @react-spectrum/s2-icon-builder@0.2.2
 - react-aria@3.38.0
 - react-aria-components@1.7.0
 - react-stately@3.36.0
 - tailwindcss-react-aria-components@2.0.0

----------------------------------------

TITLE: CSS for Link-Based TreeItems
DESCRIPTION: CSS to style TreeItems that have an href attribute, applying a pointer cursor to indicate they are clickable links.

LANGUAGE: css
CODE:
.react-aria-TreeItem[data-href] {
  cursor: pointer;
}

----------------------------------------

TITLE: Styling Tooltips with CSS
DESCRIPTION: CSS styles for tooltips, including positioning, animations, and arrow styling. The CSS handles different placements (top, bottom, right, left) and includes transitions for entering and exiting states.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Tooltip {
  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);
  border-radius: 4px;
  background: var(--highlight-background);
  color: var(--highlight-foreground);
  forced-color-adjust: none;
  outline: none;
  padding: 2px 8px;
  max-width: 150px;
  /* fixes FF gap */
  transform: translate3d(0, 0, 0);
  transition: transform 200ms, opacity 200ms;

  &[data-entering],
  &[data-exiting] {
    transform: var(--origin);
    opacity: 0;
  }

  &[data-placement=top] {
    margin-bottom: 8px;
    --origin: translateY(4px);
  }

  &[data-placement=bottom] {
    margin-top: 8px;
    --origin: translateY(-4px);
    & .react-aria-OverlayArrow svg {
      transform: rotate(180deg);
    }
  }

  &[data-placement=right] {
    margin-left: 8px;
    --origin: translateX(-4px);
    & .react-aria-OverlayArrow svg {
      transform: rotate(90deg);
    }
  }

  &[data-placement=left] {
    margin-right: 8px;
    --origin: translateX(4px);
    & .react-aria-OverlayArrow svg {
      transform: rotate(-90deg);
    }
  }

  & .react-aria-OverlayArrow svg {
    display: block;
    fill: var(--highlight-background);
  }
}

----------------------------------------

TITLE: Disabling Individual Checkboxes in React Spectrum
DESCRIPTION: Demonstrates how to disable specific checkboxes within a group by applying the isDisabled prop to individual Checkbox components rather than the entire group. This allows for selective disabling while keeping other options interactive.

LANGUAGE: tsx
CODE:
<CheckboxGroup label="Favorite sports">
  <Checkbox value="soccer">Soccer</Checkbox>
  <Checkbox value="baseball" isDisabled>Baseball</Checkbox>
  <Checkbox value="basketball">Basketball</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Using Link Component with Different Child Elements in JSX
DESCRIPTION: Examples of using the Link component in JSX with different children. Shows three use cases: wrapping text, wrapping an anchor tag, and wrapping a GatsbyLink component.

LANGUAGE: jsx
CODE:
// If only text, then we will wrap in a span with the spectrum class.
// Otherwise, we will clone the element and add the class/event handlers.
<Link>Hello</Link>
<Link><a href="pdofj">Hello</a></Link>
<Link><GatsbyLink to="oidhjf">dpofjd</GatsbyLink></Link>

----------------------------------------

TITLE: Running Remix Development Server with Vite
DESCRIPTION: Command to start the Vite development server for a Remix application. This runs the development server with hot reloading enabled.

LANGUAGE: shellscript
CODE:
npm run dev

----------------------------------------

TITLE: Handling Daylight Saving Time Transitions with Duration Operations in TSX
DESCRIPTION: Examples of adding hours to ZonedDateTime objects during daylight saving time transitions. Shows how 'spring forward' skips the 2 AM hour while 'fall back' repeats the 1 AM hour, adjusting UTC offsets accordingly.

LANGUAGE: tsx
CODE:
// A "spring forward" transition
let date = parseZonedDateTime('2020-03-08T01:00-08:00[America/Los_Angeles]');
date.add({hours: 1}); // 2020-03-08T03:00-07:00[America/Los_Angeles]

// A "fall back" transition
let date = parseZonedDateTime('2020-11-01T01:00-07:00[America/Los_Angeles]');
date.add({hours: 1}); // 2020-11-01T01:00-08:00[America/Los_Angeles]
date.add({hours: 2}); // 2020-11-01T02:00-08:00[America/Los_Angeles]

----------------------------------------

TITLE: Managing Collection Data with useListData Hook
DESCRIPTION: Example of using the useListData hook from @react-stately/data to manage collection data and state. This hook provides methods for adding, removing, and updating items while maintaining selection state.

LANGUAGE: tsx
CODE:
import {useListData} from '@react-stately/data';

let list = useListData({
  initialItems: [
    {name: 'Aardvark'},
    {name: 'Kangaroo'},
    {name: 'Snake'}
  ],
  initialSelectedKeys: ['Kangaroo'],
  getKey: item => item.name
});

function addAnimal(name) {
  list.append({name});
}

<ListBox items={list.items}>
  {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
</ListBox>

----------------------------------------

TITLE: Setting Up Documentation Imports for useAutocompleteState
DESCRIPTION: Imports necessary documentation components and data for rendering the useAutocompleteState API documentation page, including docs metadata, UI components, and package information.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/autocomplete';
import {ClassAPI, HeaderInfo, FunctionAPI, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/autocomplete/package.json';
import {InlineAlert, Content, Heading} from '@adobe/react-spectrum';

----------------------------------------

TITLE: Calendar Component Import and Export Configuration
DESCRIPTION: Import statements and default export configuration for the Calendar component documentation page, including related utilities and documentation components.

LANGUAGE: tsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

import docs from 'docs:react-aria-components';
import i18nDocs from 'docs:@internationalized/date';
import ariaDocs from 'docs:@react-aria/calendar';
import statelyDocs from 'docs:@react-stately/calendar';
import {PropTable, HeaderInfo, TypeLink, PageDescription, StateTable, ContextTable} from '@react-spectrum/docs';
import styles from '@react-spectrum/docs/src/docs.css';
import packageData from 'react-aria-components/package.json';
import Anatomy from '@react-aria/calendar/docs/calendar-anatomy.svg';
import ChevronRight from '@spectrum-icons/workflow/ChevronRight';
import {Divider} from '@react-spectrum/divider';
import {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';
import Button from '@react-spectrum/docs/pages/assets/component-illustrations/ActionButton.svg';
import InternationalizedDate from '@react-spectrum/docs/pages/assets/component-illustrations/InternationalizedDate.svg';
import {StarterKits} from '@react-spectrum/docs/src/StarterKits';

----------------------------------------

TITLE: Released Package List with Versions
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem, including React Spectrum components, React Aria hooks, React Stately state managers, React Types definitions, and Spectrum icons. Each package is displayed with its current version number.

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum@3.27.0
- @react-aria/accordion@3.0.0-alpha.18
- @react-aria/actiongroup@3.5.3
- @react-aria/aria-modal-polyfill@3.7.2
- @react-aria/autocomplete@3.0.0-alpha.17
- @react-aria/breadcrumbs@3.5.2
- @react-aria/button@3.7.2
- @react-aria/calendar@3.3.0
- @react-aria/checkbox@3.9.1
- @react-aria/color@3.0.0-beta.21
- @react-aria/combobox@3.6.1
- @react-aria/datepicker@3.4.1
- @react-aria/dialog@3.5.2
- @react-aria/dnd@3.2.1
- @react-aria/focus@3.12.1
- @react-aria/grid@3.7.1
- @react-aria/gridlist@3.4.0
- @react-aria/i18n@3.7.2
- @react-aria/interactions@3.15.1
- @react-aria/label@3.5.2
- @react-aria/landmark@3.0.0-beta.1
- @react-aria/link@3.5.1
- @react-aria/listbox@3.9.1
- @react-aria/menu@3.9.1
- @react-aria/meter@3.4.2
- @react-aria/numberfield@3.5.1
- @react-aria/overlays@3.14.1
- @react-aria/progress@3.4.2
- @react-aria/radio@3.6.1
- @react-aria/searchfield@3.5.2
- @react-aria/select@3.10.1
- @react-aria/selection@3.15.0
- @react-aria/separator@3.3.2
- @react-aria/slider@3.4.1
- @react-aria/spinbutton@3.4.1
- @react-aria/switch@3.5.1
- @react-aria/table@3.9.1
- @react-aria/tabs@3.6.0
- @react-aria/tag@3.0.0
- @react-aria/textfield@3.9.2
- @react-aria/toast@3.0.0-beta.1
- @react-aria/toggle@3.6.1
- @react-aria/tooltip@3.5.1
- @react-aria/utils@3.17.0
- @react-aria/virtualizer@3.8.1
- @react-aria/visually-hidden@3.8.1
- @react-spectrum/accordion@3.0.0-alpha.20
- @react-spectrum/actionbar@3.0.0
- @react-spectrum/actiongroup@3.8.3
- @react-spectrum/autocomplete@3.0.0-alpha.18
- @react-spectrum/avatar@3.0.1
- @react-spectrum/badge@3.1.2
- @react-spectrum/breadcrumbs@3.7.3
- @react-spectrum/button@3.12.2
- @react-spectrum/buttongroup@3.6.2
- @react-spectrum/calendar@3.2.2
- @react-spectrum/card@3.0.0-alpha.19
- @react-spectrum/checkbox@3.7.2
- @react-spectrum/color@3.0.0-beta.22
- @react-spectrum/combobox@3.8.3
- @react-spectrum/contextualhelp@3.5.2
- @react-spectrum/datepicker@3.5.1
- @react-spectrum/dialog@3.7.2
- @react-spectrum/divider@3.5.2
- @react-spectrum/dnd@3.2.0
- @react-spectrum/form@3.6.2
- @react-spectrum/icon@3.7.2
- @react-spectrum/illustratedmessage@3.4.2
- @react-spectrum/image@3.4.2
- @react-spectrum/label@3.12.1
- @react-spectrum/labeledvalue@3.1.2
- @react-spectrum/layout@3.5.2
- @react-spectrum/link@3.5.2
- @react-spectrum/list@3.5.0
- @react-spectrum/listbox@3.10.1
- @react-spectrum/menu@3.11.1
- @react-spectrum/meter@3.4.2
- @react-spectrum/numberfield@3.6.2
- @react-spectrum/overlays@5.1.1
- @react-spectrum/picker@3.10.3
- @react-spectrum/progress@3.5.1
- @react-spectrum/provider@3.7.2
- @react-spectrum/radio@3.5.2
- @react-spectrum/searchfield@3.7.2
- @react-spectrum/slider@3.5.2
- @react-spectrum/statuslight@3.5.2
- @react-spectrum/switch@3.4.2
- @react-spectrum/table@3.9.0
- @react-spectrum/tabs@3.6.0
- @react-spectrum/tag@3.0.0
- @react-spectrum/text@3.4.2
- @react-spectrum/textfield@3.10.2
- @react-spectrum/theme-dark@3.5.2
- @react-spectrum/theme-default@3.5.2
- @react-spectrum/theme-express@3.0.0-alpha.4
- @react-spectrum/theme-light@3.4.2
- @react-spectrum/toast@3.0.0-beta.1
- @react-spectrum/tooltip@3.5.1
- @react-spectrum/utils@3.9.2
- @react-spectrum/view@3.5.2
- @react-spectrum/well@3.4.2
- @react-stately/calendar@3.2.1
- @react-stately/checkbox@3.4.2
- @react-stately/collections@3.8.0
- @react-stately/color@3.3.2
- @react-stately/combobox@3.5.1
- @react-stately/data@3.9.2
- @react-stately/datepicker@3.4.1
- @react-stately/dnd@3.2.1
- @react-stately/grid@3.6.1
- @react-stately/layout@3.12.1
- @react-stately/list@3.8.1
- @react-stately/menu@3.5.2
- @react-stately/numberfield@3.4.2
- @react-stately/overlays@3.5.2
- @react-stately/radio@3.8.1
- @react-stately/searchfield@3.4.2
- @react-stately/select@3.5.1
- @react-stately/selection@3.13.1
- @react-stately/slider@3.3.2
- @react-stately/table@3.9.1
- @react-stately/tabs@3.4.1
- @react-stately/toggle@3.5.2
- @react-stately/tooltip@3.4.1
- @react-stately/tree@3.6.1
- @react-stately/virtualizer@3.5.2
- @react-types/accordion@3.0.0-alpha.14
- @react-types/actionbar@3.0.0
- @react-types/actiongroup@3.4.2
- @react-types/autocomplete@3.0.0-alpha.14
- @react-types/avatar@3.0.0
- @react-types/badge@3.1.2
- @react-types/breadcrumbs@3.5.2
- @react-types/button@3.7.3
- @react-types/buttongroup@3.3.2
- @react-types/calendar@3.2.1
- @react-types/card@3.0.0-alpha.15
- @react-types/checkbox@3.4.4
- @react-types/color@3.0.0-beta.17
- @react-types/combobox@3.6.2
- @react-types/contextualhelp@3.2.2
- @react-types/datepicker@3.3.1
- @react-types/dialog@3.5.2
- @react-types/divider@3.3.2
- @react-types/form@3.5.1
- @react-types/grid@3.1.8
- @react-types/illustratedmessage@3.3.2
- @react-types/image@3.3.2
- @react-types/label@3.7.4
- @react-types/layout@3.3.8
- @react-types/link@3.4.2
- @react-types/list@3.2.3
- @react-types/listbox@3.4.2
- @react-types/menu@3.9.1
- @react-types/meter@3.3.2
- @react-types/numberfield@3.4.2
- @react-types/overlays@3.7.2
- @react-types/progress@3.4.1
- @react-types/provider@3.6.2
- @react-types/radio@3.4.2
- @react-types/searchfield@3.4.2
- @react-types/select@3.8.1
- @react-types/shared@3.18.1
- @react-types/slider@3.5.1
- @react-types/statuslight@3.3.2
- @react-types/switch@3.3.2
- @react-types/table@3.6.1
- @react-types/tabs@3.3.0
- @react-types/text@3.3.2
- @react-types/textfield@3.7.2
- @react-types/tooltip@3.4.1
- @react-types/view@3.4.2
- @react-types/well@3.3.2
- @spectrum-icons/color@3.5.2
- @spectrum-icons/express@3.0.0-alpha.6
- @spectrum-icons/illustrations@3.6.2
- @spectrum-icons/ui@3.5.2
- @spectrum-icons/workflow@4.2.1
- react-aria@3.25.0
- react-aria-components@1.0.0-alpha.4
- react-stately@3.23.0

----------------------------------------

TITLE: Managing Daylight Saving Time Ambiguity with @internationalized/date
DESCRIPTION: This snippet demonstrates how @internationalized/date handles daylight saving time ambiguity. It shows the explicit control over resolving ambiguous times during DST transitions using the 'earlier' and 'later' options when setting date fields.

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

// A "fall back" transition
let date = parseZonedDateTime('2020-10-01T01:00-07:00[America/Los_Angeles]');

date.set({ month: 11 }, 'earlier');
// => 2020-11-01T01:00:00-07:00[America/Los_Angeles]

date.set({ month: 11 }, 'later');
// => 2020-11-01T01:00:00-08:00[America/Los_Angeles]

----------------------------------------

TITLE: DatePicker with Customized Placeholder Values and Granularity
DESCRIPTION: Shows how to use the placeholderValue prop to specify a time zone for values emitted from onChange when no initial value is provided.

LANGUAGE: tsx
CODE:
import {now} from '@internationalized/date';

<Flex gap="size-150" wrap>
  <DatePicker
    label="Event date"
    granularity="second" />
  <DatePicker
    label="Event date"
    placeholderValue={now('America/New_York')}
    granularity="second" />
</Flex>

----------------------------------------

TITLE: Using Slots in Picker Component
DESCRIPTION: Example showing how to use slots in a Picker component to create complex items with icons, text, and descriptions. The layout and styling is handled automatically by the component.

LANGUAGE: tsx
CODE:
<Picker label="Permission" defaultSelectedKey="read">
  <Item textValue="Read" key="read">
    <Book />
    <Text>Read</Text>
    <Text slot="description">Read only</Text>
  </Item>
  <Item textValue="Write" key="write">
    <Draw />
    <Text>Write</Text>
    <Text slot="description">Read and write only</Text>
  </Item>
  <Item textValue="Admin" key="admin">
    <BulkEditUsers />
    <Text>Admin</Text>
    <Text slot="description">Full access</Text>
  </Item>
</Picker>

----------------------------------------

TITLE: Creating a Controlled NumberField Component
DESCRIPTION: Example showing how to implement a controlled NumberField component where the value is managed by the parent component's state.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState(6);

  return (
    <>
      <NumberField
        label="Controlled value"
        value={value}
        onChange={setValue} />
      <div>Current value prop: {value}</div>
    </>
  );
}

----------------------------------------

TITLE: Configuring Next.js Webpack for Locale Optimization
DESCRIPTION: Modifies the Next.js webpack configuration to exclude all translation strings from the JavaScript bundle at build time, reducing bundle size for SSR applications.

LANGUAGE: ts
CODE:
// next.config.js
const localesPlugin = require('@react-aria/optimize-locales-plugin');

module.exports = {
  // ...
  webpack(config, {isServer}) {
    if (!isServer) {
      // Don't include any locale strings in the client JS bundle.
      config.plugins.push(localesPlugin.webpack({locales: []}));
    }
    return config;
  }
};

----------------------------------------

TITLE: FileTrigger with Directory Selection
DESCRIPTION: Demonstrates how to enable directory selection instead of files, showing the selected directory contents in a list.

LANGUAGE: tsx
CODE:
function Example () {
  let [files, setFiles] = React.useState([]);

  return (
    <>
      <FileTrigger
        acceptDirectory
        onSelect={(e) => {
          if (e) {
            let fileList = [...e].map(file => file.webkitRelativePath !== "" ? file.webkitRelativePath : file.name);
            setFiles(fileList);
          }
        }} >
        <Button variant="accent">Upload</Button>
      </FileTrigger>
      {files && <ul>
        {files.map((file, index) => (
          <li key={index}>{file}</li>
        ))}
      </ul>}
    </>
  );
}

----------------------------------------

TITLE: Installing React Spectrum with Yarn
DESCRIPTION: Command to install the React Spectrum package using the Yarn package manager.

LANGUAGE: bash
CODE:
yarn add @adobe/react-spectrum

----------------------------------------

TITLE: Disabling All Tabs in React Spectrum
DESCRIPTION: This example shows how to disable the entire Tabs component using the isDisabled prop, preventing user interaction with any of the tabs.

LANGUAGE: tsx
CODE:
<Tabs aria-label="Input settings" isDisabled>
  <Item key="mouse">Mouse Settings</Item>
  <Item key="keyboard">Keyboard Settings</Item>
  <Item key="gamepad">Gamepad Settings</Item>
</Tabs>

----------------------------------------

TITLE: HTML Form Integration Example
DESCRIPTION: Example showing how to integrate a checkbox with HTML forms using the name and value props.

LANGUAGE: tsx
CODE:
<Checkbox name="newsletter" value="subscribe">Subscribe</Checkbox>

----------------------------------------

TITLE: Listing React Spectrum Released Packages with Versions
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem including their version numbers. The list includes components from @adobe/react-spectrum, @internationalized packages, @react-aria components, @react-spectrum components, @react-stately packages, @react-types definitions, and @spectrum-icons packages.

LANGUAGE: markdown
CODE:
```
- @adobe/react-spectrum@3.35.0
- @internationalized/date@3.5.3
- @internationalized/message@3.1.3
- @internationalized/number@3.5.2
- @internationalized/string-compiler@3.2.3
- @internationalized/string@3.2.2
- @react-aria/accordion@3.0.0-alpha.28
- @react-aria/actiongroup@3.7.4
- @react-aria/aria-modal-polyfill@3.7.9
- @react-aria/autocomplete@3.0.0-alpha.28
- @react-aria/breadcrumbs@3.5.12
- @react-aria/button@3.9.4
- @react-aria/calendar@3.5.7
- @react-aria/checkbox@3.14.2
- @react-aria/color@3.0.0-beta.32
- @react-aria/combobox@3.9.0
- @react-aria/datepicker@3.10.0
- @react-aria/dialog@3.5.13
- @react-aria/dnd@3.6.0
- @react-aria/example-theme@1.0.2
- @react-aria/focus@3.17.0
- @react-aria/form@3.0.4
- @react-aria/grid@3.9.0
- @react-aria/gridlist@3.8.0
- @react-aria/i18n@3.11.0
- @react-aria/interactions@3.21.2
- @react-aria/label@3.7.7
- @react-aria/landmark@3.0.0-beta.11
- @react-aria/link@3.7.0
- @react-aria/listbox@3.12.0
- @react-aria/live-announcer@3.3.3
- @react-aria/menu@3.14.0
- @react-aria/meter@3.4.12
- @react-aria/numberfield@3.11.2
- @react-aria/overlays@3.22.0
- @react-aria/progress@3.4.12
- @react-aria/radio@3.10.3
- @react-aria/searchfield@3.7.4
- @react-aria/select@3.14.4
- @react-aria/selection@3.18.0
- @react-aria/separator@3.3.12
- @react-aria/slider@3.7.7
- @react-aria/spinbutton@3.6.4
- @react-aria/ssr@3.9.3
- @react-aria/steplist@3.0.0-alpha.4
- @react-aria/switch@3.6.3
- @react-aria/table@3.14.0
- @react-aria/tabs@3.9.0
- @react-aria/tag@3.4.0
- @react-aria/test-utils@1.0.0-alpha.0
- @react-aria/textfield@3.14.4
- @react-aria/toast@3.0.0-beta.11
- @react-aria/toggle@3.10.3
- @react-aria/toolbar@3.0.0-beta.4
- @react-aria/tooltip@3.7.3
- @react-aria/tree@3.0.0-alpha.0
- @react-aria/utils@3.24.0
- @react-aria/virtualizer@3.10.0
- @react-aria/visually-hidden@3.8.11
- @react-spectrum/accordion@3.0.0-alpha.30
- @react-spectrum/actionbar@3.4.4
- @react-spectrum/actiongroup@3.10.4
- @react-spectrum/autocomplete@3.0.0-alpha.31
- @react-spectrum/avatar@3.0.11
- @react-spectrum/badge@3.1.12
- @react-spectrum/breadcrumbs@3.9.6
- @react-spectrum/button@3.16.3
- @react-spectrum/buttongroup@3.6.12
- @react-spectrum/calendar@3.4.8
- @react-spectrum/card@3.0.0-alpha.32
- @react-spectrum/checkbox@3.9.5
- @react-spectrum/color@3.0.0-beta.33
- @react-spectrum/combobox@3.12.4
- @react-spectrum/contextualhelp@3.6.10
- @react-spectrum/datepicker@3.9.5
- @react-spectrum/dialog@3.8.10
- @react-spectrum/divider@3.5.12
- @react-spectrum/dnd@3.3.9
- @react-spectrum/dropzone@3.0.0
- @react-spectrum/filetrigger@3.0.0
- @react-spectrum/form@3.7.5
- @react-spectrum/icon@3.7.12
- @react-spectrum/illustratedmessage@3.5.0
- @react-spectrum/image@3.5.0
- @react-spectrum/inlinealert@3.2.4
- @react-spectrum/label@3.16.5
- @react-spectrum/labeledvalue@3.1.13
- @react-spectrum/layout@3.6.4
- @react-spectrum/link@3.6.6
- @react-spectrum/list@3.7.9
- @react-spectrum/listbox@3.12.8
- @react-spectrum/menu@3.19.0
- @react-spectrum/meter@3.5.0
- @react-spectrum/numberfield@3.9.2
- @react-spectrum/overlays@5.6.0
- @react-spectrum/picker@3.14.4
- @react-spectrum/progress@3.7.6
- @react-spectrum/provider@3.9.6
- @react-spectrum/radio@3.7.5
- @react-spectrum/searchfield@3.8.5
- @react-spectrum/slider@3.6.8
- @react-spectrum/statuslight@3.5.12
- @react-spectrum/steplist@3.0.0-alpha.4
- @react-spectrum/switch@3.5.4
- @react-spectrum/table@3.12.9
- @react-spectrum/tabs@3.8.9
- @react-spectrum/tag@3.2.5
- @react-spectrum/test-utils@1.0.0-alpha.0
- @react-spectrum/text@3.5.4
- @react-spectrum/textfield@3.12.0
- @react-spectrum/theme-dark@3.5.9
- @react-spectrum/theme-default@3.5.9
- @react-spectrum/theme-express@3.0.0-alpha.11
- @react-spectrum/theme-light@3.4.9
- @react-spectrum/toast@3.0.0-beta.11
- @react-spectrum/tooltip@3.6.6
- @react-spectrum/tree@3.0.0-alpha.0
- @react-spectrum/utils@3.11.6
- @react-spectrum/view@3.6.9
- @react-spectrum/well@3.4.12
- @react-stately/calendar@3.5.0
- @react-stately/checkbox@3.6.4
- @react-stately/collections@3.10.6
- @react-stately/color@3.6.0
- @react-stately/combobox@3.8.3
- @react-stately/data@3.11.3
- @react-stately/datepicker@3.9.3
- @react-stately/dnd@3.3.0
- @react-stately/flags@3.0.2
- @react-stately/form@3.0.2
- @react-stately/grid@3.8.6
- @react-stately/layout@3.13.8
- @react-stately/list@3.10.4
- @react-stately/menu@3.7.0
- @react-stately/numberfield@3.9.2
- @react-stately/overlays@3.6.6
- @react-stately/radio@3.10.3
- @react-stately/searchfield@3.5.2
- @react-stately/select@3.6.3
- @react-stately/selection@3.15.0
- @react-stately/slider@3.5.3
- @react-stately/steplist@3.0.0-alpha.4
- @react-stately/table@3.11.7
- @react-stately/tabs@3.6.5
- @react-stately/toast@3.0.0-beta.3
- @react-stately/toggle@3.7.3
- @react-stately/tooltip@3.4.8
- @react-stately/tree@3.8.0
- @react-stately/utils@3.10.0
- @react-stately/virtualizer@3.7.0
- @react-types/accordion@3.0.0-alpha.20
- @react-types/actionbar@3.1.6
- @react-types/actiongroup@3.4.8
- @react-types/autocomplete@3.0.0-alpha.21
- @react-types/avatar@3.0.6
- @react-types/badge@3.1.8
- @react-types/breadcrumbs@3.7.4
- @react-types/button@3.9.3
- @react-types/buttongroup@3.3.8
- @react-types/calendar@3.4.5
- @react-types/card@3.0.0-alpha.25
- @react-types/checkbox@3.8.0
- @react-types/color@3.0.0-beta.24
- @react-types/combobox@3.11.0
- @react-types/contextualhelp@3.2.9
- @react-types/datepicker@3.7.3
- @react-types/dialog@3.5.9
- @react-types/divider@3.3.8
- @react-types/form@3.7.3
- @react-types/grid@3.2.5
- @react-types/illustratedmessage@3.3.8
- @react-types/image@3.4.0
- @react-types/label@3.9.2
- @react-types/layout@3.3.14
- @react-types/link@3.5.4
- @react-types/list@3.2.16
- @react-types/listbox@3.4.8
- @react-types/menu@3.9.8
- @react-types/meter@3.4.0
- @react-types/numberfield@3.8.2
- @react-types/overlays@3.8.6
- @react-types/progress@3.5.3
- @react-types/provider@3.8.0
- @react-types/radio@3.8.0
- @react-types/searchfield@3.5.4
- @react-types/select@3.9.3
- @react-types/shared@3.23.0
- @react-types/slider@3.7.2
- @react-types/statuslight@3.3.8
- @react-types/switch@3.5.2
- @react-types/table@3.9.4
- @react-types/tabs@3.3.6
- @react-types/text@3.3.8
- @react-types/textfield@3.9.2
- @react-types/tooltip@3.4.8
- @react-types/view@3.4.8
- @react-types/well@3.3.8
- @spectrum-icons/color@3.5.12
- @spectrum-icons/express@3.0.0-alpha.16
- @spectrum-icons/illustrations@3.6.12
- @spectrum-icons/ui@3.6.6
- @spectrum-icons/workflow@4.2.11
- @react-aria/optimize-locales-plugin@1.1.0
- @react-aria/parcel-resolver-optimize-locales@1.1.0
- react-aria@3.33.0
- react-aria-components@1.2.0
- react-stately@3.31.0
- tailwindcss-react-aria-components@1.1.2
```

----------------------------------------

TITLE: Running Development Server for Next.js
DESCRIPTION: Commands to start the Next.js development server using different package managers. The server can be started with npm, yarn, pnpm, or bun, depending on your preference.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Controlling Focused Date in RangeCalendar Component
DESCRIPTION: Shows how to control which date is focused in the calendar using the focusedValue and onFocusChange props, with a reset button to return to the initial focused date.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

function Example() {
  let defaultDate = new CalendarDate(2021, 7, 1);
  let [focusedDate, setFocusedDate] = React.useState(defaultDate);

  return (
    <div style={{flexDirection: 'column', alignItems: 'start', gap: 20}}>
      <button onClick={() => setFocusedDate(defaultDate)}>Reset focused date</button>
      <RangeCalendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />
    </div>
  );
}

----------------------------------------

TITLE: Running Jest Tests with Coverage Report
DESCRIPTION: Command to execute Jest tests and generate a code coverage report.

LANGUAGE: bash
CODE:
yarn jest --coverage

----------------------------------------

TITLE: Getting Day of Week with Locale Awareness in TypeScript
DESCRIPTION: Demonstrates the getDayOfWeek function which returns the day of the week (0-6) for a given date based on locale. Shows how the same date returns different values in US vs French locales.

LANGUAGE: tsx
CODE:
import {getDayOfWeek} from '@internationalized/date';

let date = parseZonedDateTime('2022-02-06T08:30[America/Los_Angeles]'); // a Sunday

getDayOfWeek(date, 'en-US'); // 0
getDayOfWeek(locale, 'fr-FR'); // 6

----------------------------------------

TITLE: Importing Component Illustrations in React
DESCRIPTION: Imports various SVG illustrations used for component examples throughout the documentation.

LANGUAGE: JSX
CODE:
import {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';
import ComboBoxAnatomy from '../assets/component-illustrations/ComboBox.svg';
import SelectAnatomy from '../assets/component-illustrations/Picker.svg';
import Button from '../assets/component-illustrations/Button.svg';
import ToggleButton from '../assets/component-illustrations/ToggleButton.svg';
import ToggleButtonGroup from '../assets/component-illustrations/ActionGroup.svg';
import Checkbox from '../assets/component-illustrations/Checkbox.svg';
import CheckboxGroup from '../assets/component-illustrations/CheckboxGroup.svg';
import RadioGroup from '../assets/component-illustrations/RadioGroup.svg';
import Switch from '../assets/component-illustrations/Switch.svg';
import TextField from '../assets/component-illustrations/TextField.svg';
import NumberField from '../assets/component-illustrations/NumberField.svg';
import SearchField from '../assets/component-illustrations/SearchField.svg';
import Meter from '../assets/component-illustrations/Meter.svg';
import ProgressBar from '../assets/component-illustrations/ProgressCircle.svg';
import Tabs from '../assets/component-illustrations/Tabs.svg';
import Link from '../assets/component-illustrations/Link.svg';
import Breadcrumbs from '../assets/component-illustrations/Breadcrumbs.svg';
import Slider from '../assets/component-illustrations/Slider.svg';
import Dialog from '../assets/component-illustrations/Dialog.svg';
import Tooltip from '../assets/component-illustrations/Tooltip.svg';
import Popover from '../assets/component-illustrations/Popover.svg';
import Menu from '../assets/component-illustrations/Menu.svg';
import ListBox from '../assets/component-illustrations/ListBox.svg';
import ListView from '../assets/component-illustrations/ListView.svg';
import Table from '../assets/component-illustrations/Table.svg';
import Tree from '../assets/component-illustrations/Tree.svg';
import Calendar from '../assets/component-illustrations/Calendar.svg';
import RangeCalendar from '../assets/component-illustrations/RangeCalendar.svg';
import DateField from '../assets/component-illustrations/DateField.svg';
import TimeField from '../assets/component-illustrations/TimeField.svg';
import DatePicker from '../assets/component-illustrations/DatePicker.svg';
import DateRangePicker from '../assets/component-illustrations/DateRangePicker.svg';
import Press from '../assets/component-illustrations/usePress.svg';
import LongPress from '../assets/component-illustrations/useLongPress.svg';
import Hover from '../assets/component-illustrations/useHover.svg';
import Move from '../assets/component-illustrations/useMove.svg';
import Keyboard from '../assets/component-illustrations/useKeyboard.svg';
import FocusRing from '../assets/component-illustrations/useFocusRing.svg';
import FocusScope from '../assets/component-illustrations/FocusScope.svg';
import FocusWithin from '../assets/component-illustrations/useFocusWithin.svg';
import Focus from '../assets/component-illustrations/useFocus.svg';
import TagGroup from '../assets/component-illustrations/TagGroup.svg';
import DropZone from '../assets/component-illustrations/DropZone.svg';
import FileTrigger from '../assets/component-illustrations/FileTrigger.svg'
import Form from '../assets/component-illustrations/Form.svg';
import ColorSlider from '../assets/component-illustrations/ColorSlider.svg';
import ColorWheel from '../assets/component-illustrations/ColorWheel.svg';
import ColorArea from '../assets/component-illustrations/ColorArea.svg';
import ColorField from '../assets/component-illustrations/ColorField.svg';
import ColorSwatch from '../assets/component-illustrations/ColorSwatch.svg';
import ColorSwatchPicker from '../assets/component-illustrations/ColorSwatchPicker.svg';
import ColorPicker from '../assets/component-illustrations/ColorPicker.svg';
import Disclosure from '../assets/component-illustrations/Disclosure.svg';
import DisclosureGroup from '../assets/component-illustrations/DisclosureGroup.svg';
import Toast from '../assets/component-illustrations/Toast.svg';

----------------------------------------

TITLE: Referencing React Spectrum Illustrated Message Package
DESCRIPTION: Shows the package name as it would be imported or referenced in a project. This package is part of the React Spectrum library.

LANGUAGE: markdown
CODE:
@react-spectrum/illustratedmessage

----------------------------------------

TITLE: Importing Documentation and Component Dependencies
DESCRIPTION: Importing various documentation resources and components required for rendering the useSelect documentation page, including API docs, icons, and example previews.

LANGUAGE: JavaScript
CODE:
import docs from 'docs:@react-aria/select';
import collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';
import selectionDocs from 'docs:@react-stately/selection';
import statelyDocs from 'docs:@react-stately/select';
import overlaysDocs from 'docs:@react-aria/overlays';
import focusDocs from 'docs:@react-aria/focus';
import listboxDocs from 'docs:@react-aria/listbox';
import {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-aria/select/package.json';
import Anatomy from './anatomy.svg';
import ChevronRight from '@spectrum-icons/workflow/ChevronRight';
import {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';
import examplePreview from 'url:./example.png';
import styledExamplePreview from 'url:./styled-components.png';
import popupExamplePreview from 'url:./popup-example.png';

----------------------------------------

TITLE: Released React Spectrum Packages with Version Numbers
DESCRIPTION: A comprehensive list of all released packages within the React Spectrum ecosystem, including their current version numbers. The list includes core packages, internationalization utilities, accessibility hooks (React Aria), component libraries (React Spectrum), state management tools (React Stately), and TypeScript definitions (React Types).

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum => 3.11.0
- @internationalized/message => 3.0.1
- @internationalized/number => 3.0.1
- @react-aria/actiongroup => 3.2.0
- @react-aria/combobox => 3.0.0-rc.0
- @react-aria/dnd => 3.0.0-alpha.2
- @react-aria/focus => 3.4.0
- @react-aria/grid => 3.0.0-beta.0
- @react-aria/interactions => 3.5.0
- @react-aria/menu => 3.2.2
- @react-aria/overlays => 3.7.0
- @react-aria/selection => 3.5.0
- @react-aria/table => 3.0.0-beta.0
- @react-aria/tabs => 3.0.0
- @react-aria/utils => 3.8.1
- @react-spectrum/actionbar => 3.0.0-alpha.0
- @react-spectrum/actiongroup => 3.2.0
- @react-spectrum/button => 3.5.0
- @react-spectrum/combobox => 3.0.0-rc.0
- @react-spectrum/layout => 3.2.0
- @react-spectrum/list => 3.0.0-alpha.0
- @react-spectrum/listbox => 3.4.3
- @react-spectrum/menu => 3.3.0
- @react-spectrum/overlays => 3.4.2
- @react-spectrum/provider => 3.2.0
- @react-spectrum/table => 3.0.0-beta.0
- @react-spectrum/tabs => 3.0.0
- @react-spectrum/utils => 3.6.0
- @react-stately/combobox => 3.0.0-rc.0
- @react-stately/grid => 3.0.0-beta.0
- @react-stately/layout => 3.3.0
- @react-stately/numberfield => 3.0.1
- @react-stately/selection => 3.6.0
- @react-stately/table => 3.0.0-beta.0
- @react-stately/tabs => 3.0.0
- @react-types/actionbar => 3.0.0-alpha.0
- @react-types/actiongroup => 3.2.0
- @react-types/button => 3.4.0
- @react-types/combobox => 3.0.0-rc.0
- @react-types/grid => 3.0.0-beta.0
- @react-types/menu => 3.2.0
- @react-types/overlays => 3.5.0
- @react-types/provider => 3.3.0
- @react-types/select => 3.2.1
- @react-types/shared => 3.7.0
- @react-types/table => 3.0.0-beta.0
- @react-types/tabs => 3.0.0
- react-aria => 3.7.0
- react-stately => 3.6.0

----------------------------------------

TITLE: Adding Description Text to RadioGroup
DESCRIPTION: Example of using the description slot to associate help text with a radio group to provide additional context for users.

LANGUAGE: tsx
CODE:
<RadioGroup>
  <Label>Favorite avatar</Label>
  <Radio value="wizard">Wizard</Radio>
  <Radio value="dragon">Dragon</Radio>
  <Text slot="description">Please select an avatar.</Text>
</RadioGroup>

----------------------------------------

TITLE: Importing React Spectrum Dark Theme Package in Markdown
DESCRIPTION: A markdown reference to the @react-spectrum/theme-dark package that is part of the react-spectrum repository.

LANGUAGE: markdown
CODE:
# @react-spectrum/theme-dark

----------------------------------------

TITLE: Importing CSS Styles for DatePicker Example
DESCRIPTION: Imports the global Tailwind CSS styles needed for the DatePicker component example.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Defining Metadata for iOS List View Documentation
DESCRIPTION: Specifies metadata for the iOS List View component documentation including keywords, component type, image, and description. This metadata helps with documentation organization and searchability.

LANGUAGE: Markdown
CODE:
---
keywords: [example, gridlist, aria, accessibility, react, component]
type: component
image: ios-list.png
description: A GridList with swipe gestures, layout animations, and multi selection.
---

----------------------------------------

TITLE: Setting Placeholder Value in DateRangePicker
DESCRIPTION: This example demonstrates how to set a custom placeholder value for a DateRangePicker using the placeholderValue prop, which controls both the displayed placeholder and the default month shown in the calendar.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

<DateRangePicker label="Date range" placeholderValue={new CalendarDate(1980, 1, 1)} />

----------------------------------------

TITLE: Setting Placeholder Value in DateRangePicker
DESCRIPTION: This example demonstrates how to set a custom placeholder value for a DateRangePicker using the placeholderValue prop, which controls both the displayed placeholder and the default month shown in the calendar.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

<DateRangePicker label="Date range" placeholderValue={new CalendarDate(1980, 1, 1)} />

----------------------------------------

TITLE: Setting Time Fields Immutably in TypeScript
DESCRIPTION: Shows how to update fields in a Time object using the set method, which returns a new Time instance with the modified values rather than mutating the original.

LANGUAGE: tsx
CODE:
let time = new Time(9, 45);
time.set({hour: 12}); // 12:45
time.set({minute: 5}); // 9:05

----------------------------------------

TITLE: Dynamic Styling with Tailwind in DateSegment Component
DESCRIPTION: Demonstrates how to dynamically apply classes based on component states using a function with the className prop, useful with utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<DateSegment className={({isPlaceholder}) => isPlaceholder ? 'bg-gray-300' : 'bg-gray-600'} />

----------------------------------------

TITLE: Querying React Spectrum Components by Role Using React Testing Library
DESCRIPTION: This snippet demonstrates how to render a React component and query elements by their ARIA role using React Testing Library, which is the recommended semantic approach for testing React Spectrum components.

LANGUAGE: tsx
CODE:
import {render} from '@testing-library/react';

let tree = render(<MyComponent />);
let option = tree.getByRole('button');

----------------------------------------

TITLE: ColorPicker with ColorSwatchPicker
DESCRIPTION: Shows how to combine ColorEditor with ColorSwatchPicker to provide predefined color selection.

LANGUAGE: tsx
CODE:
import {ColorSwatchPicker, ColorSwatch} from '@react-spectrum/color';

<ColorPicker label="Color" defaultValue="#A00">
  <Flex direction="column" gap="size-300">
    <ColorEditor />
    <ColorSwatchPicker>
      <ColorSwatch color="#A00" />
      <ColorSwatch color="#f80" />
      <ColorSwatch color="#080" />
      <ColorSwatch color="#08f" />
      <ColorSwatch color="#088" />
      <ColorSwatch color="#008" />
    </ColorSwatchPicker>
  </Flex>
</ColorPicker>

----------------------------------------

TITLE: Rendering Calendar Implementations Table in JSX/HTML
DESCRIPTION: This code renders a table displaying various calendar implementation classes available in React Spectrum. Each row represents a different calendar system with its class reference, string identifier, and description.

LANGUAGE: JSX
CODE:
<table className={`${tableStyles['spectrum-Table']} ${tableStyles['spectrum-Table--quiet']} ${styles.propTable}`}>
  <thead>
    <tr>
      <th className={tableStyles['spectrum-Table-headCell']}>Class</th>
      <th className={tableStyles['spectrum-Table-headCell']}>Identifier</th>
      <th className={tableStyles['spectrum-Table-headCell']}>Description</th>
    </tr>
  </thead>
  <tbody className={tableStyles['spectrum-Table-body']}>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.GregorianCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'gregory'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{docs.exports.GregorianCalendar.description}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.BuddhistCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'buddhist'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{docs.exports.BuddhistCalendar.description}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.EthiopicCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'ethiopic'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{docs.exports.EthiopicCalendar.description}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.EthiopicAmeteAlemCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'ethioaa'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{docs.exports.EthiopicAmeteAlemCalendar.description}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.CopticCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'coptic'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{docs.exports.CopticCalendar.description}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.HebrewCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'hebrew'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{docs.exports.HebrewCalendar.description}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.IndianCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'indian'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{docs.exports.IndianCalendar.description}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.IslamicCivilCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'islamic-civil'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{renderHTMLfromMarkdown(docs.exports.IslamicCivilCalendar.description)}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.IslamicTabularCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'islamic-tbla'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{renderHTMLfromMarkdown(docs.exports.IslamicTabularCalendar.description)}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.IslamicUmalquraCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'islamic-umalqura'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{renderHTMLfromMarkdown(docs.exports.IslamicUmalquraCalendar.description)}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.JapaneseCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'japanese'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{renderHTMLfromMarkdown(docs.exports.JapaneseCalendar.description)}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.PersianCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'persian'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{renderHTMLfromMarkdown(docs.exports.PersianCalendar.description)}</td>
    </tr>
    <tr className={tableStyles['spectrum-Table-row']}>
      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.TaiwanCalendar} /></td>
      <td className={tableStyles['spectrum-Table-cell']}>
        <code className={typographyStyles['spectrum-Code4']}>
          <span className="token hljs-string">'roc'</span>
        </code>
      </td>
      <td className={tableStyles['spectrum-Table-cell']}>{renderHTMLfromMarkdown(docs.exports.TaiwanCalendar.description)}</td>
    </tr>
  </tbody>
</table>

----------------------------------------

TITLE: Implementing Table Header Rows with React Aria
DESCRIPTION: This snippet shows how to create table header rows using the useTableHeaderRow hook. It provides proper accessibility attributes for header rows and manages references for DOM interaction.

LANGUAGE: tsx
CODE:
import {useTableHeaderRow} from '@react-aria/table';

function TableHeaderRow({item, state, children}) {
  let ref = useRef<HTMLTableRowElement | null>(null);
  let {rowProps} = useTableHeaderRow({node: item}, state, ref);

  return (
    <tr {...rowProps} ref={ref}>
      {children}
    </tr>
  );
}

----------------------------------------

TITLE: Importing Video Assets and Components in React
DESCRIPTION: Imports video and image assets along with React Spectrum components needed for blog post content about keyboard focus behavior. The imports include media assets and UI components required for the documentation.

LANGUAGE: jsx
CODE:
import focusRingVideoUrl from 'url:../assets/focus-ring.mp4';
import keyboardSettingsImageUrl from 'url:../assets/keyboard-settings.png';

import {BlogPostLayout, Video, Image} from '@react-spectrum/docs';
import {Keyboard} from '@react-spectrum/text';
export default BlogPostLayout;

----------------------------------------

TITLE: Implementing Basic Form Field with Help Text in React Spectrum
DESCRIPTION: This snippet demonstrates how to create a password text field with a label and description text. The description provides additional context that is accessible to screen readers.

LANGUAGE: tsx
CODE:
import {TextField} from '@adobe/react-spectrum';

<TextField type="password" label="Password" description="Password must be at least 8 characters." />

----------------------------------------

TITLE: Implementing Basic Form Field with Help Text in React Spectrum
DESCRIPTION: This snippet demonstrates how to create a password text field with a label and description text. The description provides additional context that is accessible to screen readers.

LANGUAGE: tsx
CODE:
import {TextField} from '@adobe/react-spectrum';

<TextField type="password" label="Password" description="Password must be at least 8 characters." />

----------------------------------------

TITLE: Importing the SearchWithin Component in React Spectrum
DESCRIPTION: Import statements for using the SearchWithin component along with its required child components SearchField and Picker.

LANGUAGE: jsx
CODE:
import {SearchWithin} from '@react-spectrum/searchwithin';
import {SearchField} from '@react-spectrum/searchfield';
import {Picker, Item} from '@react-spectrum/picker';

----------------------------------------

TITLE: Blog Post Metadata Configuration in Markdown
DESCRIPTION: This snippet defines the metadata for the blog post using YAML frontmatter in markdown. It includes a description of the release and the publication date that will be used by the blog post layout.

LANGUAGE: markdown
CODE:
---
description: This month TagGroup and TableView column resizing and ActionBar are all being released to 3.0.0! We have also been making many improvements and bug fixes to the new React Aria Components we announced last release. Lastly, our documentation website now has search functionality! We hope this will aid in discoverability for our components and hooks.
date: 2023-05-24
---

----------------------------------------

TITLE: Building React App for Production
DESCRIPTION: Creates an optimized production build of the React application in the build folder with minified bundles and hashed filenames.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Importing the @react-spectrum/progress Package
DESCRIPTION: Reference to the progress component package that is part of the React Spectrum library. This package likely contains progress bar and indicator components.

LANGUAGE: markdown
CODE:
# @react-spectrum/progress

----------------------------------------

TITLE: Disabled Toggle Button Group Example
DESCRIPTION: Example showing how to disable an entire ToggleButtonGroup by applying the isDisabled prop to the group component.

LANGUAGE: tsx
CODE:
<ToggleButtonGroup isDisabled>
  <ToggleButton id="grid">Grid view</ToggleButton>
  <ToggleButton id="list">List view</ToggleButton>
  <ToggleButton id="gallery">Gallery view</ToggleButton>
</ToggleButtonGroup>

----------------------------------------

TITLE: CSS Styling for Calendar Picker Component
DESCRIPTION: CSS styles for the CalendarPicker component, targeting buttons within the calendar picker container with specific margins.

LANGUAGE: css
CODE:
.calendar-picker {
  > .react-aria-Button {
    margin: 0 4px 8px 4px;
  }
}

----------------------------------------

TITLE: Referencing @internationalized/string-compiler Package in Markdown
DESCRIPTION: A Markdown reference to the @internationalized/string-compiler package, indicating it is part of the React Spectrum library and directing users to the GitHub repository for additional information.

LANGUAGE: markdown
CODE:
# @internationalized/string-compiler

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Converting Between Calendar Systems
DESCRIPTION: Uses the toCalendar function to convert a CalendarDateTime from the Gregorian calendar system to the Hebrew calendar system.

LANGUAGE: tsx
CODE:
import {toCalendar, HebrewCalendar} from '@internationalized/date';

let gregorianDate = new CalendarDateTime(2020, 9, 19, 10, 30);
let hebrewDate = toCalendar(gregorianDate, new HebrewCalendar());
// => new CalendarDateTime(new HebrewCalendar(), 5781, 1, 1, 10, 30)

----------------------------------------

TITLE: Installing @react-types/tooltip Package Reference
DESCRIPTION: Package reference showing the name of the React Spectrum tooltip types package. This indicates where to find TypeScript definitions for tooltip-related components.

LANGUAGE: markdown
CODE:
# @react-types/tooltip

----------------------------------------

TITLE: Importing DatePicker Component in React Spectrum
DESCRIPTION: Shows how to import the DatePicker component from the React Spectrum library along with the Flex layout component.

LANGUAGE: jsx
CODE:
import {DatePicker} from '@react-spectrum/datepicker';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Defining Input Component Interfaces in TypeScript
DESCRIPTION: Defines base TypeScript interfaces for input components in React Spectrum, including common properties for all inputs, value handling, text input specifics, range inputs, and label configuration options.

LANGUAGE: typescript
CODE:
interface InputBase {
  isDisabled?: boolean,
  isRequired?: boolean,
  validationState?: 'valid' | 'invalid',
  isReadOnly?: boolean,
  autoFocus?: boolean
}

interface ValueBase<T> {
  value?: T,
  defaultValue?: T,
  onChange?: (value: T, e?: Event) => void,
}

interface TextInputBase {
  placeholder?: string
}

interface RangeValue<T> {
  start: T,
  end: T
}

interface RangeInputBase<T> {
  minValue?: T,
  maxValue?: T,
  step?: T // ??
}

type LabelPosition = 'top' | 'side';
type Alignment = 'start' | 'end';
type NecessityIndicator = 'icon' | 'label';

interface Labelable {
  label?: ReactNode,
  isRequired?: boolean,
  labelPosition?: LabelPosition,
  labelAlign?: Alignment,
  necessityIndicator?: NecessityIndicator
}

----------------------------------------

TITLE: NumberField Migration Guide from v2 to v3
DESCRIPTION: Markdown table showing the changes between v2 and v3 of the number input component, including renamed properties and newly added features.

LANGUAGE: markdown
CODE:
## NumberField Changes
| **v2**           | **v3**               | **Notes** |
| ---------------- | -------------------- | --------- |
| `<NumberInput>`  | `<NumberField>`      |           |
| `min`            | `minValue`           |           |
| `max`            | `maxValue`           |           |
| `decrementTitle` | `decrementAriaLabel` |           |
| `incrementTitle` | `incrementAriaLabel` |           |
| -                | `hideStepper`        | added     |
| -                | `formatOptions`      | added     |

----------------------------------------

TITLE: Installing Specific Pre-release Version of React Spectrum Component
DESCRIPTION: Command for installing a specific pre-release version of a React Spectrum component using Yarn.

LANGUAGE: bash
CODE:
yarn add @react-spectrum/button@3.0.0-rc.2

----------------------------------------

TITLE: Setting up React Spectrum Documentation Layout for iOS List View Component
DESCRIPTION: Imports and configures the ExampleLayout component from React Spectrum docs to display documentation for an iOS List View implementation. Includes license information and metadata for the component example.

LANGUAGE: JSX
CODE:
{/* Copyright 2023 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License. */}

import {ExampleLayout} from '@react-spectrum/docs';
export default ExampleLayout;

import docs from 'docs:react-aria-components';
import {TypeLink} from '@react-spectrum/docs';
import styles from '@react-spectrum/docs/src/docs.css';
import Button from '@react-spectrum/docs/pages/assets/component-illustrations/ActionButton.svg';
import ListView from '@react-spectrum/docs/pages/assets/component-illustrations/ListView.svg';
import {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';
import ChevronRight from '@spectrum-icons/workflow/ChevronRight';

----------------------------------------

TITLE: Disabled ColorWheel Component
DESCRIPTION: Example of a disabled ColorWheel component that prevents user interaction.

LANGUAGE: tsx
CODE:
<ColorWheel isDisabled />

----------------------------------------

TITLE: Implementing Disabled Tooltip in React Spectrum
DESCRIPTION: Shows how to disable a tooltip using the isDisabled prop on TooltipTrigger while keeping the trigger button active.

LANGUAGE: tsx
CODE:
<TooltipTrigger isDisabled>
  <Button>🖨</Button>
  <MyTooltip>Print</MyTooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Setting ZonedDateTime Fields in TSX
DESCRIPTION: Examples of using the set() method to modify specific fields in ZonedDateTime objects. Shows how to set day, month, year, hour, and minute fields, returning new objects without mutating the original.

LANGUAGE: tsx
CODE:
let date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');
date.set({day: 10}); // 2022-02-10T09:45[America/Los_Angeles]
date.set({month: 5}); // // 2022-05-03T09:45[America/Los_Angeles]
date.set({year: 2023, month: 10, day: 16}); // 2023-10-16T09:45[America/Los_Angeles]
date.set({hour: 18}); // 2022-02-03T18:45[America/Los_Angeles]
date.set({minute: 15}); // 2022-02-03T09:15[America/Los_Angeles]

----------------------------------------

TITLE: Creating a Selectable Tree Component with ToggleButton using Context Providers in React
DESCRIPTION: This example demonstrates how to create a component that lets users toggle selection mode for a Tree using a ToggleButton. It uses context providers to pass selection state to both components.

LANGUAGE: tsx
CODE:
import type {SelectionMode} from 'react-aria-components';
import {ToggleButtonContext, TreeContext} from 'react-aria-components';

function Selectable({children}) {
  let [isSelected, onChange] = React.useState(false);
  let selectionMode: SelectionMode = isSelected ? 'multiple' : 'none';
  return (
    <ToggleButtonContext.Provider value={{isSelected, onChange}}>
      <TreeContext.Provider value={{selectionMode}}>
        {children}
      </TreeContext.Provider>
    </ToggleButtonContext.Provider>
  );
}

----------------------------------------

TITLE: Importing Color Components from React Spectrum and React Aria
DESCRIPTION: Demonstrates the import statements for color-related components from both React Spectrum and React Aria Component libraries that are used in the documentation.

LANGUAGE: jsx
CODE:
import {ColorEditor, ColorSwatch} from '@react-spectrum/color';
import {ColorPicker} from 'react-aria-components';

----------------------------------------

TITLE: Importing ActionBar Components in React Spectrum
DESCRIPTION: Import statements for ActionBar and related components from React Spectrum packages, including icons and layout components.

LANGUAGE: jsx
CODE:
import {ActionBar, ActionBarContainer, Item} from '@react-spectrum/actionbar';
import {ListView} from '@react-spectrum/list';
import Edit from '@spectrum-icons/workflow/Edit';
import Copy from '@spectrum-icons/workflow/Copy';
import Delete from '@spectrum-icons/workflow/Delete';
import {Flex} from '@react-spectrum/layout';
import {Text} from '@react-spectrum/text';
import {TableView, TableHeader, TableBody, Row, Column, Cell} from '@react-spectrum/table';

----------------------------------------

TITLE: Button with Event Handling in React Spectrum
DESCRIPTION: Demonstrates how to implement a Button with an onPress event handler to update state when clicked.

LANGUAGE: tsx
CODE:
function Example() {
  let [count, setCount] = React.useState(0);

  return (
    <Button variant="primary" onPress={() => setCount(c => c + 1)}>{count} Dogs</Button>
  );
}

----------------------------------------

TITLE: Button with Event Handling in React Spectrum
DESCRIPTION: Demonstrates how to implement a Button with an onPress event handler to update state when clicked.

LANGUAGE: tsx
CODE:
function Example() {
  let [count, setCount] = React.useState(0);

  return (
    <Button variant="primary" onPress={() => setCount(c => c + 1)}>{count} Dogs</Button>
  );
}

----------------------------------------

TITLE: React Spectrum Ecosystem Released Packages List
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem, including React Aria, React Stately, React Types, and Spectrum Icons packages with their version numbers.

LANGUAGE: markdown
CODE:
```
- @adobe/react-spectrum@3.23.0
- @react-aria/accordion@3.0.0-alpha.13
- @react-aria/actiongroup@3.4.3
- @react-aria/aria-modal-polyfill@3.6.1
- @react-aria/autocomplete@3.0.0-alpha.12
- @react-aria/breadcrumbs@3.4.0
- @react-aria/button@3.6.3
- @react-aria/calendar@3.0.4
- @react-aria/checkbox@3.7.0
- @react-aria/color@3.0.0-beta.17
- @react-aria/combobox@3.4.3
- @react-aria/datepicker@3.2.0
- @react-aria/dialog@3.4.1
- @react-aria/dnd@3.0.0
- @react-aria/focus@3.10.0
- @react-aria/grid@3.5.1
- @react-aria/gridlist@3.1.1
- @react-aria/i18n@3.6.2
- @react-aria/interactions@3.13.0
- @react-aria/label@3.4.3
- @react-aria/landmark@3.0.0-alpha.4
- @react-aria/link@3.3.5
- @react-aria/listbox@3.7.1
- @react-aria/menu@3.7.0
- @react-aria/meter@3.3.3
- @react-aria/numberfield@3.3.3
- @react-aria/overlays@3.12.0
- @react-aria/progress@3.3.3
- @react-aria/radio@3.4.1
- @react-aria/searchfield@3.4.3
- @react-aria/select@3.8.3
- @react-aria/selection@3.12.0
- @react-aria/separator@3.2.5
- @react-aria/slider@3.2.3
- @react-aria/spinbutton@3.2.0
- @react-aria/ssr@3.4.0
- @react-aria/switch@3.3.0
- @react-aria/table@3.6.0
- @react-aria/tabs@3.3.3
- @react-aria/tag@3.0.0-beta.0
- @react-aria/textfield@3.8.0
- @react-aria/toggle@3.4.1
- @react-aria/tooltip@3.3.3
- @react-aria/utils@3.14.1
- @react-aria/virtualizer@3.6.0
- @react-aria/visually-hidden@3.6.0
- @react-spectrum/accordion@3.0.0-alpha.14
- @react-spectrum/actionbar@3.0.0-alpha.14
- @react-spectrum/actiongroup@3.7.1
- @react-spectrum/autocomplete@3.0.0-alpha.12
- @react-spectrum/avatar@3.0.0-alpha.11
- @react-spectrum/badge@3.0.1
- @react-spectrum/breadcrumbs@3.6.0
- @react-spectrum/button@3.11.0
- @react-spectrum/buttongroup@3.5.0
- @react-spectrum/calendar@3.1.3
- @react-spectrum/card@3.0.0-alpha.13
- @react-spectrum/checkbox@3.6.1
- @react-spectrum/color@3.0.0-beta.17
- @react-spectrum/combobox@3.7.0
- @react-spectrum/contextualhelp@3.4.0
- @react-spectrum/datepicker@3.3.0
- @react-spectrum/dialog@3.6.0
- @react-spectrum/divider@3.4.3
- @react-spectrum/dnd@3.0.0
- @react-spectrum/form@3.5.1
- @react-spectrum/icon@3.6.2
- @react-spectrum/illustratedmessage@3.3.3
- @react-spectrum/image@3.3.3
- @react-spectrum/label@3.9.0
- @react-spectrum/labeledvalue@3.0.1
- @react-spectrum/layout@3.4.3
- @react-spectrum/link@3.4.3
- @react-spectrum/list@3.2.0
- @react-spectrum/listbox@3.8.1
- @react-spectrum/menu@3.9.0
- @react-spectrum/meter@3.3.3
- @react-spectrum/numberfield@3.5.0
- @react-spectrum/overlays@4.0.0
- @react-spectrum/picker@3.9.0
- @react-spectrum/progress@3.3.3
- @react-spectrum/provider@3.6.0
- @react-spectrum/radio@3.4.1
- @react-spectrum/searchfield@3.6.0
- @react-spectrum/searchwithin@3.0.0-alpha.12
- @react-spectrum/slider@3.4.0
- @react-spectrum/statuslight@3.4.3
- @react-spectrum/switch@3.3.3
- @react-spectrum/table@3.5.0
- @react-spectrum/tabs@3.3.3
- @react-spectrum/tag@3.0.0-beta.0
- @react-spectrum/text@3.3.3
- @react-spectrum/textfield@3.9.0
- @react-spectrum/theme-dark@3.4.0
- @react-spectrum/theme-default@3.4.0
- @react-spectrum/theme-express@3.0.0-alpha.0
- @react-spectrum/theme-light@3.3.0
- @react-spectrum/tooltip@3.3.3
- @react-spectrum/utils@3.8.0
- @react-spectrum/view@3.4.0
- @react-spectrum/well@3.3.3
- @react-stately/calendar@3.0.4
- @react-stately/checkbox@3.3.1
- @react-stately/collections@3.5.0
- @react-stately/color@3.2.1
- @react-stately/combobox@3.3.0
- @react-stately/data@3.8.0
- @react-stately/datepicker@3.2.0
- @react-stately/dnd@3.0.0
- @react-stately/grid@3.4.1
- @react-stately/layout@3.9.0
- @react-stately/list@3.6.0
- @react-stately/menu@3.4.3
- @react-stately/numberfield@3.3.0
- @react-stately/overlays@3.4.3
- @react-stately/radio@3.6.1
- @react-stately/searchfield@3.3.3
- @react-stately/select@3.3.3
- @react-stately/selection@3.11.1
- @react-stately/slider@3.2.3
- @react-stately/table@3.6.0
- @react-stately/tabs@3.2.3
- @react-stately/toggle@3.4.3
- @react-stately/tooltip@3.2.3
- @react-stately/tree@3.4.0
- @react-stately/virtualizer@3.4.0
- @react-types/accordion@3.0.0-alpha.11
- @react-types/actionbar@3.0.0-alpha.11
- @react-types/actiongroup@3.3.5
- @react-types/autocomplete@3.0.0-alpha.10
- @react-types/avatar@3.0.0-alpha.10
- @react-types/badge@3.0.1
- @react-types/breadcrumbs@3.4.5
- @react-types/button@3.7.0
- @react-types/buttongroup@3.2.5
- @react-types/calendar@3.0.4
- @react-types/card@3.0.0-alpha.11
- @react-types/checkbox@3.4.1
- @react-types/color@3.0.0-beta.14
- @react-types/combobox@3.5.5
- @react-types/contextualhelp@3.1.5
- @react-types/datepicker@3.1.3
- @react-types/dialog@3.4.5
- @react-types/divider@3.2.5
- @react-types/form@3.4.1
- @react-types/grid@3.1.5
- @react-types/illustratedmessage@3.2.5
- @react-types/image@3.2.5
- @react-types/label@3.7.1
- @react-types/layout@3.3.5
- @react-types/link@3.3.5
- @react-types/list@3.1.1
- @react-types/listbox@3.3.5
- @react-types/menu@3.7.3
- @react-types/meter@3.2.5
- @react-types/numberfield@3.3.5
- @react-types/overlays@3.6.5
- @react-types/progress@3.2.5
- @react-types/provider@3.5.5
- @react-types/radio@3.3.1
- @react-types/searchfield@3.3.5
- @react-types/searchwithin@3.0.0-alpha.10
- @react-types/select@3.6.5
- @react-types/shared@3.16.0
- @react-types/slider@3.3.1
- @react-types/statuslight@3.2.5
- @react-types/switch@3.2.5
- @react-types/table@3.3.3
- @react-types/tabs@3.1.5
- @react-types/tag@3.0.0-beta.0
- @react-types/text@3.2.5
- @react-types/textfield@3.6.1
- @react-types/tooltip@3.2.5
- @react-types/view@3.3.0
- @react-types/well@3.2.5
- @spectrum-icons/color@3.4.4
- @spectrum-icons/express@3.0.0-alpha.0
- @spectrum-icons/illustrations@3.5.1
- @spectrum-icons/ui@3.4.0
- @spectrum-icons/workflow@4.0.4
- react-aria@3.21.0
- react-stately@3.19.0
```

----------------------------------------

TITLE: Converting ZonedDateTime to CalendarDate in TypeScript
DESCRIPTION: Demonstrates converting a ZonedDateTime to a CalendarDate object using the toCalendarDate function when only the date component is needed.

LANGUAGE: tsx
CODE:
import {toCalendarDate} from '@internationalized/date';

let date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');
toCalendarDate(date); // 2022-02-03

----------------------------------------

TITLE: DialogTrigger Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This table compares the properties available for the DialogTrigger component in Spectrum 2 and React Spectrum v3, highlighting additions like mobileType and targetRef in v3, and differences in children implementation.

LANGUAGE: typescript
CODE:
type | 🟢 `'fullscreen' \| 'fullscreenTakeover' \| 'modal' \| 'popover'` | 🔴 `'fullscreen' \| 'fullscreenTakeover' \| 'modal' \| 'popover' \| 'tray'`
mobileType | – | 🔴 `'fullscreen' \| 'fullscreenTakeover' \| 'modal' \| 'tray'`
targetRef | – | 🔴 `RefObject<HTMLElement>`
children | 🟢 `ReactNode` | 🔴 `[ReactElement, ReactElement \| SpectrumDialogClose]`

----------------------------------------

TITLE: Importing CSS for Tailwind in React Aria Components
DESCRIPTION: Imports the global Tailwind CSS file needed for styling the components.

LANGUAGE: TypeScript
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Calculating Weeks in a Month
DESCRIPTION: Shows how to use getWeeksInMonth to determine the number of weeks in a given month, which depends on the month's length, start day, and locale-specific first day of the week.

LANGUAGE: tsx
CODE:
import {getWeeksInMonth} from '@internationalized/date';

let date = new CalendarDate(2021, 1, 1);

getWeeksInMonth(date, 'en-US'); // 6
getWeeksInMonth(date, 'fr-FR'); // 5

----------------------------------------

TITLE: Installing React Spectrum ComboBox Package
DESCRIPTION: Reference to the @react-spectrum/combobox package name as it would appear in a package manager.

LANGUAGE: markdown
CODE:
@react-spectrum/combobox

----------------------------------------

TITLE: Using defaultValue with CheckboxGroup
DESCRIPTION: Example demonstrating how to use the defaultValue prop with CheckboxGroup to set an initial uncontrolled value for selected checkboxes.

LANGUAGE: tsx
CODE:
<MyCheckboxGroup label="Favorite sports (uncontrolled)" defaultValue={['soccer', 'baseball']}>
  <MyCheckbox value="soccer">Soccer</MyCheckbox>
  <MyCheckbox value="baseball">Baseball</MyCheckbox>
  <MyCheckbox value="basketball">Basketball</MyCheckbox>
</MyCheckboxGroup>

----------------------------------------

TITLE: Creating Flexible JSX Card Layouts with Slot Props
DESCRIPTION: This code demonstrates how child components can be positioned consistently regardless of their order in JSX by using a slot-based approach. Both examples produce the same visual result despite having different component ordering.

LANGUAGE: jsx
CODE:
<Card>
  <Image />
  <Avatar />
</Card>

LANGUAGE: jsx
CODE:
<Card>
  <Avatar />
  <Image />
</Card>

----------------------------------------

TITLE: Applying a Theme to a React Spectrum Application
DESCRIPTION: Demonstrates how to import and apply a theme to an entire application using the Provider component.

LANGUAGE: tsx
CODE:
import {theme} from '@react-spectrum/theme-default';

<Provider theme={theme}>
  <YourApp />
</Provider>

----------------------------------------

TITLE: Basic Group Component Implementation in React Aria
DESCRIPTION: Simple implementation example of the Group component, showing the basic import and usage pattern. This represents the minimal code required to use the component.

LANGUAGE: tsx
CODE:
import {Group} from 'react-aria-components';

<Group>
  {/* ... */}
</Group>

----------------------------------------

TITLE: Webpack Configuration for Optimizing Locales
DESCRIPTION: Configuration for a webpack plugin that optimizes bundle size by including only specified locales. This reduces the overall bundle size by eliminating unused translations.

LANGUAGE: JavaScript
CODE:
// webpack.config.js
const optimizeLocales = require('@react-aria/optimize-locales-plugin');

module.exports = {
  // ...
  plugins: [
    optimizeLocales.webpack({
      locales: ['en-US', 'fr-FR']
    })
  ]
};

----------------------------------------

TITLE: Implementing Selection Checkmark Component with Framer Motion
DESCRIPTION: A component that displays a checkmark for selected items in a list. It uses Framer Motion for animation and shows either an empty circle or a filled checkmark based on the selection state.

LANGUAGE: JSX
CODE:
function SelectionCheckmark({ isSelected }) {
  return (
    <motion.svg
      aria-hidden="true"
      viewBox="0 0 24 24"
      fill="currentColor"
      className="w-6 h-6 shrink-0 ml-4"
      initial={{ x: -40 }}
      animate={{ x: 0 }}
      transition={{ duration: 0.25 }}
    >
      {!isSelected && (
        <circle
          r={9}
          cx={12}
          cy={12}
          stroke="currentColor"
          fill="none"
          strokeWidth={1}
          className="text-gray-400"
        />
      )}
      {isSelected && (
        <path
          className="text-blue-600"
          fillRule="evenodd"
          d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm13.36-1.814a.75.75 0 10-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 00-1.06 1.06l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z"
          clipRule="evenodd"
        />
      )}
    </motion.svg>
  );
}

----------------------------------------

TITLE: Creating a CalendarDateTime with Buddhist Calendar
DESCRIPTION: Creates a CalendarDateTime in the Buddhist calendar system, equivalent to April 4th, 2020 at 9:15 AM in the Gregorian calendar.

LANGUAGE: tsx
CODE:
import {BuddhistCalendar} from '@internationalized/date';

let date = new CalendarDateTime(new BuddhistCalendar(), 2563, 4, 30, 9, 15);

----------------------------------------

TITLE: Converting CalendarDate to CalendarDateTime
DESCRIPTION: Demonstrates converting a CalendarDate to CalendarDateTime using the toCalendarDateTime function, with an optional Time parameter to set a specific time instead of the default midnight.

LANGUAGE: tsx
CODE:
import {toCalendarDateTime, Time} from '@internationalized/date';

let date = new CalendarDate(2022, 2, 3);

toCalendarDateTime(date); // 2022-02-03T00:00:00
toCalendarDateTime(date, new Time(8, 30)); // 2022-02-03T08:30:00

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports and exports the Layout component from the @react-spectrum/docs package, which is used to structure the documentation page.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Implementing Accessible Labels for ColorArea in React
DESCRIPTION: Demonstrates how to provide accessible labels for ColorArea components using aria-label and aria-labelledby props. The example shows both inline labeling and referencing an external label element.

LANGUAGE: tsx
CODE:
<div style={{display: 'flex', gap: 8, alignItems: 'end', flexWrap: 'wrap'}}>
  <MyColorArea
    /*- begin highlight -*/
    aria-label="Background color"
    /*- end highlight -*/
    defaultValue="hsl(0, 100%, 50%)"
    xChannel="saturation"
    yChannel="lightness" />
  <div>
    {/*- begin highlight -*/}
    <label id="hsl-aria-labelledby-id">Background color</label>
    {/*- end highlight -*/}
    <MyColorArea
      /*- begin highlight -*/
      aria-labelledby="hsl-aria-labelledby-id"
      /*- end highlight -*/
      defaultValue="hsl(0, 100%, 50%)"
      xChannel="saturation"
      yChannel="lightness" />
  </div>
</div>

----------------------------------------

TITLE: Importing Media Assets for React Spectrum Documentation
DESCRIPTION: Imports video URLs for demonstrating button interactions in various scenarios including dragging, mobile usage, and text selection. These videos are used to illustrate touch interaction behavior in the blog post.

LANGUAGE: jsx
CODE:
import draggingVideoUrl from 'url:../assets/button-dragging.mp4';
import buttonVideoUrl from 'url:../assets/button-mobile.mp4';
import textSelectionVideoUrl from 'url:../assets/button-text-selection.mp4';

----------------------------------------

TITLE: Basic ColorPicker Implementation Example
DESCRIPTION: Demonstrates a simple implementation of the ColorPicker component with a ColorEditor and default color value.

LANGUAGE: tsx
CODE:
<ColorPicker label="Fill" defaultValue="#5100FF">
  <ColorEditor />
</ColorPicker>

----------------------------------------

TITLE: Listing Released React Spectrum Ecosystem Packages with Version Numbers
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem, organized by package namespace. Includes version numbers for each package, covering React Aria accessibility hooks, React Stately state management utilities, React Types TypeScript definitions, and Spectrum icon packages.

LANGUAGE: markdown
CODE:
```
- @adobe/react-spectrum@3.16.0
- @internationalized/date@3.0.0-alpha.2
- @internationalized/message@3.0.4
- @internationalized/number@3.0.4
- @react-aria/accordion@3.0.0-alpha.3
- @react-aria/actiongroup@3.2.2
- @react-aria/aria-modal-polyfill@3.4.1
- @react-aria/autocomplete@3.0.0-alpha.2
- @react-aria/breadcrumbs@3.1.6
- @react-aria/button@3.4.0
- @react-aria/calendar@3.0.0-alpha.2
- @react-aria/checkbox@3.3.0
- @react-aria/color@3.0.0-beta.7
- @react-aria/combobox@3.2.2
- @react-aria/datepicker@3.0.0-alpha.3
- @react-aria/dialog@3.1.5
- @react-aria/dnd@3.0.0-alpha.4
- @react-aria/focus@3.5.1
- @react-aria/grid@3.2.1
- @react-aria/i18n@3.3.5
- @react-aria/interactions@3.8.0
- @react-aria/label@3.2.2
- @react-aria/link@3.2.1
- @react-aria/listbox@3.4.1
- @react-aria/live-announcer@3.0.2
- @react-aria/menu@3.4.0
- @react-aria/meter@3.1.4
- @react-aria/numberfield@3.1.2
- @react-aria/overlays@3.7.4
- @react-aria/progress@3.1.4
- @react-aria/radio@3.1.7
- @react-aria/searchfield@3.2.3
- @react-aria/select@3.6.1
- @react-aria/selection@3.7.2
- @react-aria/separator@3.1.4
- @react-aria/slider@3.0.4
- @react-aria/spinbutton@3.0.2
- @react-aria/ssr@3.1.1
- @react-aria/switch@3.1.4
- @react-aria/table@3.2.1
- @react-aria/tabs@3.1.1
- @react-aria/tag@3.0.0-alpha.0
- @react-aria/textfield@3.5.1
- @react-aria/toggle@3.2.0
- @react-aria/tooltip@3.1.4
- @react-aria/utils@3.11.1
- @react-aria/virtualizer@3.3.6
- @react-aria/visually-hidden@3.2.4
- @react-spectrum/accordion@3.0.0-alpha.4
- @react-spectrum/actionbar@3.0.0-alpha.4
- @react-spectrum/actiongroup@3.4.0
- @react-spectrum/autocomplete@3.0.0-alpha.2
- @react-spectrum/avatar@3.0.0-alpha.1
- @react-spectrum/breadcrumbs@3.2.5
- @react-spectrum/button@3.7.0
- @react-spectrum/buttongroup@3.2.4
- @react-spectrum/calendar@3.0.0-alpha.2
- @react-spectrum/card@3.0.0-alpha.2
- @react-spectrum/checkbox@3.3.0
- @react-spectrum/color@3.0.0-beta.7
- @react-spectrum/combobox@3.2.1
- @react-spectrum/contextualhelp@3.0.0
- @react-spectrum/datepicker@3.0.0-alpha.3
- @react-spectrum/dialog@3.3.5
- @react-spectrum/divider@3.2.0
- @react-spectrum/form@3.2.5
- @react-spectrum/icon@3.3.3
- @react-spectrum/illustratedmessage@3.1.5
- @react-spectrum/image@3.1.5
- @react-spectrum/label@3.4.2
- @react-spectrum/layout@3.2.2
- @react-spectrum/link@3.2.1
- @react-spectrum/list@3.0.0-alpha.6
- @react-spectrum/listbox@3.5.4
- @react-spectrum/menu@3.6.0
- @react-spectrum/meter@3.1.4
- @react-spectrum/numberfield@3.1.2
- @react-spectrum/overlays@3.4.5
- @react-spectrum/picker@3.5.1
- @react-spectrum/progress@3.1.4
- @react-spectrum/provider@3.3.0
- @react-spectrum/radio@3.1.6
- @react-spectrum/searchfield@3.2.2
- @react-spectrum/searchwithin@3.0.0-alpha.2
- @react-spectrum/slider@3.0.5
- @react-spectrum/statuslight@3.2.3
- @react-spectrum/switch@3.1.4
- @react-spectrum/table@3.1.2
- @react-spectrum/tabs@3.1.2
- @react-spectrum/tag@3.0.0-alpha.0
- @react-spectrum/text@3.1.4
- @react-spectrum/textfield@3.3.1
- @react-spectrum/theme-dark@3.2.4
- @react-spectrum/theme-default@3.2.4
- @react-spectrum/theme-light@3.1.4
- @react-spectrum/tooltip@3.1.5
- @react-spectrum/utils@3.6.4
- @react-spectrum/view@3.1.4
- @react-spectrum/well@3.1.4
- @react-stately/calendar@3.0.0-alpha.2
- @react-stately/checkbox@3.0.4
- @react-stately/collections@3.3.5
- @react-stately/color@3.0.0-beta.6
- @react-stately/combobox@3.0.2
- @react-stately/data@3.4.4
- @react-stately/datepicker@3.0.0-alpha.2
- @react-stately/dnd@3.0.0-alpha.3
- @react-stately/grid@3.1.1
- @react-stately/layout@3.4.3
- @react-stately/list@3.4.2
- @react-stately/menu@3.2.4
- @react-stately/numberfield@3.0.3
- @react-stately/overlays@3.1.4
- @react-stately/radio@3.3.3
- @react-stately/searchfield@3.1.4
- @react-stately/select@3.1.4
- @react-stately/selection@3.9.1
- @react-stately/slider@3.0.4
- @react-stately/table@3.1.1
- @react-stately/tabs@3.0.2
- @react-stately/toggle@3.2.4
- @react-stately/tooltip@3.0.6
- @react-stately/tree@3.2.1
- @react-stately/utils@3.4.0
- @react-stately/virtualizer@3.1.7-alpha.0
- @react-types/accordion@3.0.0-alpha.2
- @react-types/actionbar@3.0.0-alpha.2
- @react-types/actiongroup@3.2.2
- @react-types/autocomplete@3.0.0-alpha.1
- @react-types/avatar@3.0.0-alpha.1
- @react-types/breadcrumbs@3.2.2
- @react-types/button@3.4.2
- @react-types/buttongroup@3.1.3
- @react-types/calendar@3.0.0-alpha.2
- @react-types/card@3.0.0-alpha.2
- @react-types/checkbox@3.2.4
- @react-types/color@3.0.0-beta.4
- @react-types/combobox@3.2.2
- @react-types/contextualhelp@3.0.0
- @react-types/datepicker@3.0.0-alpha.2
- @react-types/dialog@3.3.2
- @react-types/divider@3.1.3
- @react-types/form@3.2.3
- @react-types/grid@3.0.1
- @react-types/illustratedmessage@3.1.3
- @react-types/image@3.1.4
- @react-types/label@3.5.1
- @react-types/layout@3.2.1
- @react-types/link@3.2.1
- @react-types/listbox@3.2.2
- @react-types/menu@3.5.0
- @react-types/meter@3.1.3
- @react-types/numberfield@3.1.1
- @react-types/overlays@3.5.2
- @react-types/progress@3.1.3
- @react-types/provider@3.4.0
- @react-types/radio@3.1.3
- @react-types/searchfield@3.1.3
- @react-types/searchwithin@3.0.0-alpha.1
- @react-types/select@3.5.2
- @react-types/shared@3.11.0
- @react-types/slider@3.0.3
- @react-types/statuslight@3.1.3
- @react-types/switch@3.1.3
- @react-types/table@3.1.1
- @react-types/tabs@3.0.2
- @react-types/tag@3.0.0-alpha.0
- @react-types/text@3.1.4
- @react-types/textfield@3.3.1
- @react-types/tooltip@3.1.3
- @react-types/view@3.1.3
- @react-types/well@3.1.3
- @spectrum-icons/color@3.3.2
- @spectrum-icons/illustrations@3.2.3
- @spectrum-icons/ui@3.2.2
- @spectrum-icons/workflow@3.2.2
- react-aria@3.13.0
- react-stately@3.12.0
```

----------------------------------------

TITLE: Accent Variant Button Styles in React Spectrum
DESCRIPTION: Demonstrates the accent variant of Button with both fill and outline styles.

LANGUAGE: tsx
CODE:
<Flex wrap gap="size-250">
  <Button variant="accent" style="fill">Save</Button>
  <Button variant="accent" style="outline">Save</Button>
</Flex>

----------------------------------------

TITLE: Installing React Stately Overlays Package
DESCRIPTION: This markdown shows the package name for the React Stately Overlays module, which is part of the larger react-spectrum project.

LANGUAGE: markdown
CODE:
# @react-stately/overlays

----------------------------------------

TITLE: Configuring DateField Granularity and Placeholder Values
DESCRIPTION: This example demonstrates how to set the granularity to seconds and how to provide a placeholder value with a specific time zone that will be used in onChange events.

LANGUAGE: tsx
CODE:
import {now} from '@internationalized/date';

<MyDateField
  label="Event date"
  granularity="second" />
<MyDateField
  label="Event date"
  placeholderValue={now('America/New_York')}
  granularity="second" />

----------------------------------------

TITLE: StatusLight Component with Different Labels in React Spectrum
DESCRIPTION: Shows StatusLight components with different variant colors and custom label text.

LANGUAGE: tsx
CODE:
<StatusLight variant="positive">Semantic color</StatusLight>
<StatusLight variant="yellow">Label color</StatusLight>

----------------------------------------

TITLE: React Spectrum Released Packages List in Markdown
DESCRIPTION: Lists all packages released in the March 21, 2022 update of React Spectrum, showing version numbers for each package.

LANGUAGE: Markdown
CODE:
```
- @adobe/react-spectrum@3.16.5
- @internationalized/date@3.0.0-alpha.4
- @internationalized/number@3.0.6
- @react-aria/accordion@3.0.0-alpha.6
- @react-aria/actiongroup@3.2.5
- @react-aria/autocomplete@3.0.0-alpha.5
- @react-aria/breadcrumbs@3.1.9
- @react-aria/button@3.4.3
- @react-aria/calendar@3.0.0-alpha.4
- @react-aria/checkbox@3.3.3
- @react-aria/color@3.0.0-beta.10
- @react-aria/combobox@3.2.5
- @react-aria/datepicker@3.0.0-alpha.5
- @react-aria/dialog@3.1.8
- @react-aria/dnd@3.0.0-alpha.7
- @react-aria/focus@3.5.4
- @react-aria/grid@3.2.5
- @react-aria/i18n@3.3.8
- @react-aria/interactions@3.8.3
- @react-aria/link@3.2.4
- @react-aria/listbox@3.4.4
- @react-aria/live-announcer@3.0.5
- @react-aria/menu@3.4.3
- @react-aria/meter@3.1.7
- @react-aria/numberfield@3.1.5
- @react-aria/overlays@3.8.1
- @react-aria/progress@3.1.7
- @react-aria/radio@3.1.10
- @react-aria/searchfield@3.2.6
- @react-aria/select@3.6.4
- @react-aria/selection@3.8.1
- @react-aria/slider@3.0.7
- @react-aria/spinbutton@3.0.5
- @react-aria/switch@3.1.7
- @react-aria/tabs@3.1.4
- @react-aria/tag@3.0.0-alpha.4
- @react-aria/textfield@3.5.4
- @react-aria/toggle@3.2.3
- @react-aria/tooltip@3.1.7
- @react-aria/virtualizer@3.3.9
- @react-aria/visually-hidden@3.2.7
- @react-spectrum/accordion@3.0.0-alpha.7
- @react-spectrum/actionbar@3.0.0-alpha.7
- @react-spectrum/actiongroup@3.4.3
- @react-spectrum/autocomplete@3.0.0-alpha.5
- @react-spectrum/avatar@3.0.0-alpha.4
- @react-spectrum/button@3.7.3
- @react-spectrum/buttongroup@3.2.7
- @react-spectrum/calendar@3.0.0-alpha.4
- @react-spectrum/card@3.0.0-alpha.6
- @react-spectrum/checkbox@3.3.3
- @react-spectrum/color@3.0.0-beta.10
- @react-spectrum/combobox@3.2.4
- @react-spectrum/contextualhelp@3.0.3
- @react-spectrum/datepicker@3.0.0-alpha.5
- @react-spectrum/dialog@3.3.8
- @react-spectrum/divider@3.2.3
- @react-spectrum/dnd@3.0.0-alpha.1
- @react-spectrum/form@3.2.8
- @react-spectrum/icon@3.3.6
- @react-spectrum/illustratedmessage@3.1.8
- @react-spectrum/image@3.1.8
- @react-spectrum/label@3.4.5
- @react-spectrum/layout@3.2.5
- @react-spectrum/link@3.2.4
- @react-spectrum/listbox@3.5.7
- @react-spectrum/menu@3.6.3
- @react-spectrum/meter@3.1.7
- @react-spectrum/numberfield@3.1.5
- @react-spectrum/overlays@3.4.8
- @react-spectrum/picker@3.5.4
- @react-spectrum/progress@3.1.7
- @react-spectrum/provider@3.3.3
- @react-spectrum/radio@3.1.9
- @react-spectrum/searchfield@3.2.5
- @react-spectrum/searchwithin@3.0.0-alpha.5
- @react-spectrum/slider@3.0.8
- @react-spectrum/statuslight@3.2.6
- @react-spectrum/switch@3.1.7
- @react-spectrum/tabs@3.1.5
- @react-spectrum/tag@3.0.0-alpha.4
- @react-spectrum/text@3.1.7
- @react-spectrum/textfield@3.3.4
- @react-spectrum/tooltip@3.1.8
- @react-spectrum/utils@3.6.7
- @react-spectrum/view@3.1.7
- @react-spectrum/well@3.1.7
- @react-stately/calendar@3.0.0-alpha.4
- @react-stately/color@3.0.0-beta.9
- @react-stately/datepicker@3.0.0-alpha.4
- @react-stately/numberfield@3.0.6
- @react-stately/slider@3.0.7
- @react-types/calendar@3.0.0-alpha.4
- @react-types/color@3.0.0-beta.7
- @react-types/datepicker@3.0.0-alpha.4
- @react-types/link@3.2.4
- @spectrum-icons/color@3.3.5
- @spectrum-icons/ui@3.2.5
- react-aria@3.14.1
```

----------------------------------------

TITLE: ColorPicker with Accessibility Label
DESCRIPTION: Shows how to use aria-label for accessibility when a visible label isn't provided for the ColorPicker.

LANGUAGE: tsx
CODE:
<ColorPicker aria-label="Fill color" defaultValue="#184">
  <ColorEditor />
</ColorPicker>

----------------------------------------

TITLE: Integrating DropIndicators in List Items
DESCRIPTION: Demonstrates how to render DropIndicator components between list items. The snippet shows the placement of indicators before and after each item in a list, enabling users to drop items between existing list entries.

LANGUAGE: tsx
CODE:
function Option({ item, state, dropState }) {
  // ...

  return (
    <>
      <DropIndicator
        target={{type: 'item', key: item.key, dropPosition: 'before'}}
        dropState={dropState} />
      <li
        {...mergeProps(optionProps, dropProps, focusProps)}
        ref={ref}
        className={`option ${isFocusVisible ? 'focus-visible' : ''} ${isDropTarget ? 'drop-target' : ''}`}>
        {item.rendered}
      </li>
      {state.collection.getKeyAfter(item.key) == null &&
        <DropIndicator
          target={{type: 'item', key: item.key, dropPosition: 'after'}}
          dropState={dropState} />
      }
    </>
  );
}

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from the React Spectrum documentation package and exports it as the default component for the current file.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Creating a Customized ColorSwatchPickerItem Component
DESCRIPTION: Example showing how to create a wrapper component for ColorSwatchPickerItem to customize its properties while preserving its functionality.

LANGUAGE: tsx
CODE:
function MyColorSwatchPickerItem(props) {
  return <ColorSwatchPickerItem {...props} className="my-swatch" />
}

----------------------------------------

TITLE: Importing BlogPostLayout and Hero Components from React Spectrum
DESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and exports the BlogPostLayout as the default export. This is used for structuring the blog post layout in React Spectrum documentation.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Importing Documentation Dependencies for useNumberFieldState
DESCRIPTION: Imports various components and documentation resources needed to generate the API documentation for the useNumberFieldState hook, including component metadata and UI components for rendering the documentation.

LANGUAGE: JSX
CODE:
import docs from 'docs:@react-stately/numberfield';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/numberfield/package.json';

----------------------------------------

TITLE: Referencing React Aria Table Package in Markdown
DESCRIPTION: A markdown heading that identifies the @react-aria/table package, which is part of the React Spectrum library. The snippet includes a link to the main repository for further information.

LANGUAGE: markdown
CODE:
# @react-aria/table

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Integrating NumberField with HTML Forms
DESCRIPTION: Shows how to integrate NumberField with HTML forms using the name prop. The value will be submitted as a raw number rather than a formatted string.

LANGUAGE: tsx
CODE:
<MyNumberField
  label="Transaction amount"
  /*- begin highlight -*/
  name="amount"
  /*- end highlight -*/
  defaultValue={45}
  formatOptions={{
    style: 'currency',
    currency: 'USD'
  }} />

----------------------------------------

TITLE: Setting up Default Layout Export for React Spectrum Documentation
DESCRIPTION: This code imports and re-exports the Layout component from @react-spectrum/docs to be used as the default layout for the documentation page.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Configuring Vite for Locale Optimization in Remix
DESCRIPTION: Sets up a Vite configuration for Remix applications to optimize localization by excluding locale strings from the client JavaScript bundle using React Aria's locales plugin.

LANGUAGE: ts
CODE:
// vite.config.ts
import { unstable_vitePlugin as remix } from '@remix-run/dev';
import { defineConfig } from 'vite';
import localesPlugin from '@react-aria/optimize-locales-plugin';

export default defineConfig({
  plugins: [
    remix(),
    // Don't include any locale strings in the client JS bundle.
    {...localesPlugin.vite({locales: []}), enforce: 'pre'}
  ],
});

----------------------------------------

TITLE: Styling React Aria Table Components with CSS
DESCRIPTION: Shows how to target React Aria components using their default class names with CSS selectors.

LANGUAGE: css
CODE:
.react-aria-Table {
  /* ... */
}

----------------------------------------

TITLE: Cycling Fields on CalendarDate in TypeScript
DESCRIPTION: Uses the cycle method to increment or decrement a single field with wrapping behavior at boundaries.

LANGUAGE: tsx
CODE:
let date = new CalendarDate(2022, 12, 31);
date.cycle('day', 1); // 2022-12-01
date.cycle('month', 1); // 2022-01-31

let date = new CalendarDate(2022, 1, 1);
date.cycle('day', -1); // 2022-01-31
date.cycle('month', -1); // 2022-12-01

----------------------------------------

TITLE: Parsing ISO 8601 String to CalendarDateTime
DESCRIPTION: Uses the parseDateTime function to create a CalendarDateTime by parsing an ISO 8601 formatted date-time string.

LANGUAGE: tsx
CODE:
import {parseDateTime} from '@internationalized/date';

let date = parseDateTime('2022-02-03T09:15');

----------------------------------------

TITLE: Creating a Reusable Slider Component in React Aria
DESCRIPTION: A reusable wrapper component for Slider that includes proper typing for single and multi-thumb sliders. This example shows how to create a custom slider component with support for labels and multiple thumbs.

LANGUAGE: tsx
CODE:
import type {SliderProps} from 'react-aria-components';

interface MySliderProps<T> extends SliderProps<T> {
  label?: string,
  thumbLabels?: string[]
}

function MySlider<T extends number | number[]>({label, thumbLabels, ...props}: MySliderProps<T>) {
  return (
    <Slider {...props}>
      {label && <Label>{label}</Label>}
      <SliderOutput>
        {({state}) => state.values.map((_, i) => state.getThumbValueLabel(i)).join(' – ')}
      </SliderOutput>
      <SliderTrack>
        {({state}) => state.values.map((_, i) => (
          <SliderThumb key={i} index={i} aria-label={thumbLabels?.[i]} />
        ))}
      </SliderTrack>
    </Slider>
  );
}

<MySlider label="Range" defaultValue={[30, 60]} thumbLabels={['start', 'end']} />

----------------------------------------

TITLE: Rendering Picker Components Section in React
DESCRIPTION: Displays documentation for picker-related components using ExampleCard components with illustrations and descriptions.

LANGUAGE: JSX
CODE:
<section className={styles.cardGroup}>

<ExampleCard
  url="ComboBox.html"
  title="ComboBox"
  description="A combobox combines a text input with a listbox, and allows a user to filter a list of options.">
  <ComboBoxAnatomy />
</ExampleCard>

<ExampleCard
  url="Select.html"
  title="Select"
  description="A select displays a collapsible list of options, and allows a user to select one of them.">
  <SelectAnatomy />
</ExampleCard>

</section>

----------------------------------------

TITLE: Importing ButtonGroup in React Spectrum
DESCRIPTION: Basic import statement for the ButtonGroup component from the React Spectrum package.

LANGUAGE: tsx
CODE:
import {ButtonGroup} from '@react-spectrum/buttongroup';
import {Button} from '@react-spectrum/button';

<ButtonGroup>
  <Button variant="primary">Rate Now</Button>
  <Button variant="secondary">No, thanks</Button>
  <Button variant="secondary">Remind me later</Button>
</ButtonGroup>

----------------------------------------

TITLE: Processing Text Drops with DropZone
DESCRIPTION: This example shows how to handle dropped text items by filtering for a specific MIME type and extracting the text content. It also includes a draggable element to demonstrate the full drag and drop interaction.

LANGUAGE: tsx
CODE:
import type {TextDropItem} from '@react-aria/dnd';

function Example() {
  let [dropped, setDropped] = React.useState(null);

  return (
    <>
      <Draggable />
      <DropZone
        onDrop={async(e) => {
          let items = await Promise.all(
            e.items
              .filter(item => item.kind === 'text' && item.types.has('text/plain'))
              .map((item: TextDropItem) => item.getText('text/plain'))
          );
          setDropped(items.join('\n'));
        }}>
        <Text slot="label">
          {dropped || 'Drop here'}
        </Text>
      </ DropZone>
    </>
  );
}

----------------------------------------

TITLE: Importing BlogPostLayout Components in React
DESCRIPTION: Imports the BlogPostLayout and Hero components from @react-spectrum/docs and exports BlogPostLayout as the default component for the page layout.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Removing Selected Items from a List in React
DESCRIPTION: Demonstrates how to remove all currently selected items from a list with a single method call using removeSelectedItems.

LANGUAGE: tsx
CODE:
// Remove all selected items
list.removeSelectedItems();

----------------------------------------

TITLE: Defining Text Field Component Interfaces in TypeScript for React Spectrum
DESCRIPTION: TypeScript interface definitions for text input components including TextField, TextArea, SearchField, SearchWithin, and InlineEditor. Each interface extends various base interfaces to inherit common properties like input behavior, DOM attributes, styling, and accessibility features.

LANGUAGE: typescript
CODE:
interface TextField extends InputBase, TextInputBase, TextInputDOM, ValueBase<string>, Labelable, TextInputDOMProps, StyleProps {
  icon?: ReactNode,
  isQuiet?: boolean,
  validationTooltip?: ReactNode
}

type TextArea = TextField;

interface SearchField extends TextField {
  onSubmit?: (value: string) => void,
  onClear?: () => void
}

interface SearchWithin extends InputBase, TextInputBase, Labelable, DOMProps, StyleProps {
  // not extending from ValueBase because we want onValueChange instead of onChange
  value?: string,
  defaultValue?: string,
  onValueChange: (value: string) => void,
  onSubmit: (value: string) => void,

  scope?: string,
  defaultScope?: string,
  onScopeChange: (scope: string) => void,
  children: ReactElement<MenuItem> | ReactElement<MenuItem>[],
}

// should this contain a textfield or other input instead of specifically being a textfield?
interface InlineEditor extends TextField {
  onCancel?: () => void
}

----------------------------------------

TITLE: Dynamic Styling with Function-based className in ColorSwatchPickerItem
DESCRIPTION: Example showing how to use a function that receives state variables to dynamically apply classes to a ColorSwatchPickerItem, useful for utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<ColorSwatchPickerItem className={({isSelected}) => isSelected ? 'border-black' : 'border-transparent'} />

----------------------------------------

TITLE: Dynamic Styling with State-Based className Function in JSX
DESCRIPTION: Example demonstrating how to apply conditional styling using a function that receives component states. This is particularly useful when using utility CSS libraries like Tailwind CSS.

LANGUAGE: JSX
CODE:
<Item className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>
  Item
</Item>

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from React Spectrum documentation package and exports it as the default component for the page layout.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: CSS Styling for SearchField Component
DESCRIPTION: CSS rules for styling the SearchField component, including input field, container, and button styling. This removes default browser styles and applies custom formatting.

LANGUAGE: CSS
CODE:
/* css */
.search-field {
  display: flex;
  flex-direction: column;
}

.search-field div {
  background: slategray;
  padding: 4px 0 4px 4px;
  border-radius: 4px;
  width: 250px;
  display: flex;
}

.search-field input {
  flex: 1;
  color: white;
  font-size: 15px;
  padding: 2px 0;
}

.search-field input, .search-field button {
  -webkit-appearance: none;
  border: none;
  outline: none;
  background: none;
}

.search-field input::-webkit-search-cancel-button,
.search-field input::-webkit-search-decoration {
  -webkit-appearance: none;
}

----------------------------------------

TITLE: Creating Custom Compatible Components with Context
DESCRIPTION: Example showing how to make existing components compatible with React Aria Components by using the useContextProps hook to merge local props with ones provided via context.

LANGUAGE: tsx
CODE:
import type {HeadingProps} from 'react-aria-components';
import {HeadingContext, useContextProps} from 'react-aria-components';

const MyCustomHeading = React.forwardRef((props: HeadingProps, ref: React.ForwardedRef<HTMLHeadingElement>) => {
  // Merge the local props and ref with the ones provided via context.
  ///- begin highlight -///
  [props, ref] = useContextProps(props, ref, HeadingContext);
  ///- end highlight -///

  // ... your existing Heading component
  return <h2 {...props} ref={ref} />;
});

----------------------------------------

TITLE: Importing Documentation Components and Package Data
DESCRIPTION: This code imports documentation-related components and data needed to generate the API documentation for the useField hook, including function documentation and package metadata.

LANGUAGE: javascript
CODE:
import docs from 'docs:@react-aria/label';
import {FunctionAPI, HeaderInfo, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-aria/label/package.json';

----------------------------------------

TITLE: Implementing LocalizedStringProvider in Next.js Pages Router
DESCRIPTION: Adds a LocalizedStringProvider to the _document.tsx file in Next.js Pages Router to include only the necessary translation strings for the user's language before the NextScript element.

LANGUAGE: tsx
CODE:
// pages/_document.tsx
import {Html, Head, Main, NextScript, DocumentProps} from 'next/document'
import {LocalizedStringProvider} from '@adobe/react-spectrum/i18n';

export default function Document(props: DocumentProps) {
  return (
    <Html lang={props.locale}>
      <Head />
      <body>
        <Main />
        <LocalizedStringProvider locale={props.locale} />
        <NextScript />
      </body>
    </Html>
  );
}

----------------------------------------

TITLE: Using ColorSwatchContext for Prop Injection
DESCRIPTION: Demonstrates using ColorSwatchContext to provide props to a ColorSwatch component from a parent component.

LANGUAGE: tsx
CODE:
import {ColorSwatchContext} from 'react-aria-components';

<ColorSwatchContext.Provider value={{color: '#ff0'}}>
  <ColorSwatch />
</ColorSwatchContext.Provider>

----------------------------------------

TITLE: Importing Dialog Components in React Spectrum
DESCRIPTION: Import statement for various React Spectrum components needed for dialog implementation, including Content, Form, Dialog components, Buttons, and icons.

LANGUAGE: jsx
CODE:
import {Content} from '@react-spectrum/view';
import {Form} from '@react-spectrum/form';
import {Heading, Text} from '@react-spectrum/text';
import {TextField} from '@react-spectrum/textfield';
import {Divider} from '@react-spectrum/divider';
import {DialogContainer, Dialog, AlertDialog} from '@react-spectrum/dialog';
import {ActionButton, Button} from '@react-spectrum/button';
import {ButtonGroup} from '@react-spectrum/buttongroup';
import {MenuTrigger, Menu, Item} from '@react-spectrum/menu';
import More from '@spectrum-icons/workflow/More';
import Delete from '@spectrum-icons/workflow/Delete';
import Edit from '@spectrum-icons/workflow/Edit';

----------------------------------------

TITLE: Creating a Date in Japanese Calendar System with Era in TypeScript
DESCRIPTION: Creates a date in the Japanese calendar system using an era identifier, equivalent to April 4th, 2020 in the Gregorian calendar.

LANGUAGE: tsx
CODE:
import {JapaneseCalendar} from '@internationalized/date';

let date = new CalendarDate(new JapaneseCalendar(), 'heisei', 31, 4, 30)

----------------------------------------

TITLE: Implementing a Basic NumberField in React Aria Components
DESCRIPTION: Example showing how to create a basic number field with increment/decrement buttons using React Aria Components. The component includes a label, input field, and control buttons.

LANGUAGE: tsx
CODE:
import {NumberField, Label, Group, Input, Button} from 'react-aria-components';

<NumberField defaultValue={1024} minValue={0}>
  <Label>Width</Label>
  <Group>
    <Button slot="decrement">-</Button>
    <Input />
    <Button slot="increment">+</Button>
  </Group>
</NumberField>

----------------------------------------

TITLE: Cycling Hours with 12/24 Hour Formats in TypeScript
DESCRIPTION: Shows how to cycle the hour field with either a 12-hour or 24-hour clock using the hourCycle option to preserve AM/PM when formatting.

LANGUAGE: tsx
CODE:
let time = new Time(11);
time.cycle('hour', 1); // 12:00
time.cycle('hour', 1, {hourCycle: 12}); // 00:00

let time = new Time(23);
time.cycle('hour', 1); // 00:00
time.cycle('hour', 1, {hourCycle: 12}); // 12:00

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default component for the documentation page.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Dynamic Collection Tabs Example with Selection Handling
DESCRIPTION: Implementation of Tabs using dynamic collections with the items prop. Demonstrates how to track selected tab state and handle selection changes.

LANGUAGE: tsx
CODE:
import type {Key} from '@adobe/react-spectrum';

function Example() {
  let tabs = [
    {id: 1, name: 'Founding of Rome', children: 'Arma virumque cano, Troiae qui primus ab oris.'},
    {id: 2, name: 'Monarchy and Republic', children: 'Senatus Populusque Romanus.'},
    {id: 3, name: 'Empire', children: 'Alea jacta est.'}
  ];
  type Tab = typeof tabs[0];
  let [tabId, setTabId] = React.useState<Key>(1);

  return (
    <>
      <p>Current tab id: {tabId}</p>
      <Tabs aria-label="History of Ancient Rome" items={tabs} onSelectionChange={setTabId}>
        <TabList>
          {(item: Tab) => (
            <Item>
              {item.name}
            </Item>
          )}
        </TabList>
        <TabPanels>
          {(item: Tab) => (
            <Item>
              {item.children}
            </Item>
          )}
        </TabPanels>
      </Tabs>
    </>
  );
}

----------------------------------------

TITLE: Targeting Component States with CSS Selectors
DESCRIPTION: Examples of CSS selectors targeting component states using ARIA and data attributes. Shows how to style selected and focused items, as well as how to apply styles based on component placement.

LANGUAGE: CSS
CODE:
.react-aria-Item[aria-selected=true] {
  /* ... */
}

.react-aria-Item[data-focused] {
  /* ... */
}

.react-aria-Popover[data-placement=left] {
  /* ... */
}

----------------------------------------

TITLE: Validation State for Checkbox in React Spectrum
DESCRIPTION: Shows how to display a validation state on a Checkbox to communicate to the user that the current value is invalid using the isInvalid prop.

LANGUAGE: tsx
CODE:
<Checkbox isInvalid>I accept the terms and conditions</Checkbox>

----------------------------------------

TITLE: Defining NumberField TypeScript Interface for React Spectrum
DESCRIPTION: TypeScript interface definition for the NumberField component, extending multiple base interfaces and specifying properties for number input handling with internationalization support.

LANGUAGE: typescript
CODE:
interface NumberField extends InputBase, TextInputBase, ValueBase<number>, RangeInputBase<number>, Labelable, DOMProps, StyleProps {
  isQuiet?: boolean,
  decrementAriaLabel?: string,
  incrementAriaLabel?: string,
  hideStepper?: boolean,
  formatOptions?: Intl.NumberFormatOptions
}

----------------------------------------

TITLE: Implementing Horizontal Divider in React Spectrum
DESCRIPTION: Demonstrates how to create a horizontal divider that separates content vertically using the Flex component for layout.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-125">
  <Text>Content above</Text>
  <Divider />
  <Text>Content below</Text>
</Flex>

----------------------------------------

TITLE: Importing Documentation Resources for useDateFieldState
DESCRIPTION: Imports various documentation components, type information, and package data needed to generate the API documentation for the useDateFieldState hook.

LANGUAGE: JavaScript
CODE:
import docs from 'docs:@react-stately/datepicker';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/datepicker/package.json';

----------------------------------------

TITLE: Using Render Props for Conditional Rendering Based on State
DESCRIPTION: Example of using a render prop as children to conditionally render elements based on component states, such as showing a checkmark icon when an item is selected.

LANGUAGE: jsx
CODE:
<ListBoxItem>
  {({isSelected}) => (
    <>
      {isSelected && <CheckmarkIcon />}
      <span>Item</span>
    </>
  )}
</ListBoxItem>

----------------------------------------

TITLE: Using Render Props for Conditional Rendering Based on State
DESCRIPTION: Example of using a render prop as children to conditionally render elements based on component states, such as showing a checkmark icon when an item is selected.

LANGUAGE: jsx
CODE:
<ListBoxItem>
  {({isSelected}) => (
    <>
      {isSelected && <CheckmarkIcon />}
      <span>Item</span>
    </>
  )}
</ListBoxItem>

----------------------------------------

TITLE: Implementing a Checkbox Group with useCheckboxGroup in React
DESCRIPTION: Creates a complete, accessible checkbox group component implementation using React Aria's useCheckboxGroup and useCheckboxGroupItem hooks, with context for state sharing between the group and its checkboxes.

LANGUAGE: tsx
CODE:
import {useCheckboxGroup, useCheckboxGroupItem} from '@react-aria/checkbox';
import {useCheckboxGroupState} from '@react-stately/checkbox';

let CheckboxGroupContext = React.createContext(null);

function CheckboxGroup(props) {
  let {children, label, description} = props;
  let state = useCheckboxGroupState(props);
  let {groupProps, labelProps, descriptionProps, errorMessageProps, isInvalid, validationErrors} = useCheckboxGroup(props, state);

  return (
    <div {...groupProps}>
      <span {...labelProps}>{label}</span>
      <CheckboxGroupContext.Provider value={state}>
        {children}
      </CheckboxGroupContext.Provider>
      {description && <div {...descriptionProps} style={{fontSize: 12}}>{description}</div>}
      {isInvalid &&
        <div {...errorMessageProps} style={{color: 'red', fontSize: 12}}>{validationErrors.join(' ')}</div>
      }
    </div>
  );
}

function Checkbox(props) {
  let {children} = props;
  let state = React.useContext(CheckboxGroupContext);
  let ref = React.useRef(null);
  let {inputProps} = useCheckboxGroupItem(props, state, ref);

  let isDisabled = state.isDisabled || props.isDisabled;
  let isSelected = state.isSelected(props.value);

  return (
    <label
      style={{
        display: 'block',
        color: (isDisabled && 'var(--gray)') || (isSelected && 'var(--blue)'),
      }}>
      <input {...inputProps} ref={ref} />
      {children}
    </label>
  );
}

<CheckboxGroup label="Favorite sports">
  <Checkbox value="soccer" isDisabled>Soccer</Checkbox>
  <Checkbox value="baseball">Baseball</Checkbox>
  <Checkbox value="basketball">Basketball</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Blog Post Metadata Configuration
DESCRIPTION: Defines the blog post metadata including keywords, description, publication date, author information, and featured image. This is used by the BlogPostLayout component.

LANGUAGE: jsx
CODE:
---
keywords: [react aria, react spectrum, react, spectrum, interactions, button, touch]
description: Buttons seem like simple components at first, but they hide a lot of complexity under the hood. In the first part of this series, we'll look at how React Spectrum and React Aria implement adaptive press interactions that work across a wide variety of devices and interaction models.
date: 2020-08-12
author: '[Devon Govett](https://x.com/devongovett)'
image: ../assets/ReactAria_976x445_2x.png
---

----------------------------------------

TITLE: Implementing Row Actions in List Component with Different Selection Behaviors
DESCRIPTION: This example shows how to handle row actions using the onAction prop with both toggle and replace selection behaviors, demonstrating different interaction patterns for selection and action triggering.

LANGUAGE: tsx
CODE:
<div style={{ display: 'flex', flexWrap: 'wrap', gap: 24 }}>
  <ExampleList aria-label="Checkbox selection list with row actions" selectionMode="multiple" selectionBehavior="toggle" onAction={key => alert(`Opening item ${key}...`)} />
  <ExampleList aria-label="Highlight selection list with row actions" selectionMode="multiple" selectionBehavior="replace" onAction={key => alert(`Opening item ${key}...`)} />
</div>

----------------------------------------

TITLE: Creating a Reusable Column Component with Menu in React Spectrum
DESCRIPTION: This code shows how to create a reusable component that wraps Column to include a dropdown menu for sorting and resizing operations. It uses MenuTrigger, Button, Popover, and Menu components to provide a better touch screen experience.

LANGUAGE: tsx
CODE:
import {MenuTrigger, Button, Popover, Menu, MenuItem} from 'react-aria-components';

interface ResizableTableColumnProps<T> extends Omit<ColumnProps, 'children'> {
  children: React.ReactNode
}

function ResizableTableColumn<T extends object>(props: ResizableTableColumnProps<T>) {
  return (
    <Column {...props}>
      {({startResize, sort, allowsSorting, sortDirection}) => (
        <div className="flex-wrapper">
          <MenuTrigger>
            <Button>{props.children}</Button>
            <Popover>
              <Menu onAction={(action) => {
                if (action === 'sortAscending') {
                  sort('ascending');
                } else if (action === 'sortDescending') {
                  sort('descending');
                } else if (action === 'resize') {
                  startResize();
                }
              }}>
                <MenuItem id="sortAscending">Sort Ascending</MenuItem>
                <MenuItem id="sortDescending">Sort Descending</MenuItem>
                <MenuItem id="resize">Resize</MenuItem>
              </Menu>
            </Popover>
          </MenuTrigger>
          {allowsSorting && (
            <span aria-hidden="true" className="sort-indicator">
              {sortDirection === 'ascending' ? '▲' : '▼'}
            </span>
          )}
          <ColumnResizer />
        </div>
      )}
    </Column>
  );
}

----------------------------------------

TITLE: Defining Pagination Component Interfaces in TypeScript for ReactSpectrum
DESCRIPTION: TypeScript interfaces for pagination components in ReactSpectrum. Defines a base interface that extends ValueBase<number> with common pagination properties, and specialized interfaces for different pagination types: PaginationButton, PaginationList, and PaginationField.

LANGUAGE: typescript
CODE:
interface PaginationBase extends ValueBase<number> {
  maxValue: number,
  onPrevious?: (value: number, e: Event) => void,
  onNext?: (value: number, e: Event) => void,
  isDisabled?: boolean
}

interface PaginationButton extends Button, PaginationBase {}
interface PaginationList extends PaginationBase {}
interface PaginationField extends PaginationBase {}

----------------------------------------

TITLE: Package Reference for React Spectrum Accordion
DESCRIPTION: Markdown reference to the @react-spectrum/accordion package, directing users to the main repository for more details.

LANGUAGE: markdown
CODE:
# @react-spectrum/accordion

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: NumberField Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This comparison shows that Spectrum 2 supports size, isInvalid, and slot properties for NumberField, while RSP v3 has isQuiet and validationState properties not supported in S2 design.

LANGUAGE: typescript
CODE:
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | –
isInvalid | 🟢 `boolean` | –
slot | 🟢 `null \| string` | –
isQuiet | – | 🔴 `boolean`
validationState | – | 🔴 `ValidationState`

----------------------------------------

TITLE: Installing React Stately with yarn
DESCRIPTION: Command to install the React Stately package using yarn package manager.

LANGUAGE: bash
CODE:
yarn add react-stately

----------------------------------------

TITLE: Importing Layout Component in JSX Documentation
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export for the documentation page structure.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Installing @react-aria/actiongroup Package
DESCRIPTION: Markdown reference to the @react-aria/actiongroup package within the React Spectrum library, providing a link to the main repository for more information.

LANGUAGE: markdown
CODE:
# @react-aria/actiongroup

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Adding Description Text to TimeField
DESCRIPTION: Example showing how to add descriptive help text to a TimeField using the description slot.

LANGUAGE: tsx
CODE:
<TimeField>
  <Label>Appointment time</Label>
  <DateInput>
    {segment => <DateSegment segment={segment} />}
  </DateInput>
  {/*- begin highlight -*/}
  <Text slot="description">Please select a time between 9 AM and 5 PM.</Text>
  {/*- end highlight -*/}
</TimeField>

----------------------------------------

TITLE: Referencing React-Aria Combobox Package in Markdown
DESCRIPTION: A markdown header that identifies the package name '@react-aria/combobox' and a brief note mentioning this package is part of the React Spectrum library with a link to the main repository.

LANGUAGE: markdown
CODE:
# @react-aria/combobox

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Rendering Hero Component with Responsive Images for React Spectrum
DESCRIPTION: Implements the Hero component with responsive images for different device sizes and formats (PNG and WebP), complete with alt text for accessibility.

LANGUAGE: JSX
CODE:
<Hero
  narrow={heroNarrow}
  narrow2x={heroNarrow2x}
  narrowWebp={heroNarrowWebp}
  narrow2xWebp={heroNarrow2xWebp}
  wide={heroWide}
  wide2x={heroWide2x}
  wideWebp={heroWideWebp}
  wide2xWebp={heroWide2xWebp}
  alt="React Spectrum hero image" />

----------------------------------------

TITLE: Parsing ISO 8601 Duration Strings
DESCRIPTION: Uses the parseDuration function to convert ISO 8601 duration strings into DateTimeDuration objects, including support for negative and decimal values.

LANGUAGE: tsx
CODE:
parseDuration('P3Y6M6W4DT12H30M5S');
// => {years: 3, months: 6, weeks: 6, days: 4, hours: 12, minutes: 30, seconds: 5}

parseDuration('-P3Y6M6W4DT12H30M5S');
// => {years: -3, months: -6, weeks: -6, days: -4, hours: -12, minutes: -30, seconds: -5}

parseDuration('P3Y6M6W4DT12H30M5.5S');
// => {years: 3, months: 6, weeks: 6, days: 4, hours: 12, minutes: 30, seconds: 5.5}

----------------------------------------

TITLE: Implementing CalendarCell Component with React Aria
DESCRIPTION: A CalendarCell component that renders an individual date cell within a calendar. It uses the useCalendarCell hook to handle selection states, formatting, and accessibility properties based on the date's status (selected, disabled, unavailable, etc).

LANGUAGE: tsx
CODE:
import {useCalendarCell} from '@react-aria/calendar';

function CalendarCell({state, date}) {
  let ref = React.useRef(null);
  let {
    cellProps,
    buttonProps,
    isSelected,
    isOutsideVisibleRange,
    isDisabled,
    isUnavailable,
    formattedDate
  } = useCalendarCell({date}, state, ref);

  return (
    <td {...cellProps}>
      <div
        {...buttonProps}
        ref={ref}
        hidden={isOutsideVisibleRange}
        className={`cell ${isSelected ? 'selected' : ''} ${isDisabled ? 'disabled' : ''} ${isUnavailable ? 'unavailable' : ''}`}>
        {formattedDate}
      </div>
    </td>
  );
}

----------------------------------------

TITLE: Parsing Currency Values with NumberParser
DESCRIPTION: Configures NumberParser for currency parsing with options for currency code, display format, and accounting notation, showing various valid and invalid inputs.

LANGUAGE: tsx
CODE:
let parser = new NumberParser('en-US', {
  style: 'currency',
  currency: 'EUR',
  currencyDisplay: 'code',
  currencySign: 'accounting'
});

parser.parse('45'); // 45
parser.parse('EUR 45'); // 45
parser.parse('EUR 26.45'); // 26.45
parser.parse('EUR -25'); // -25
parser.parse('(EUR 25)'); // -25
parser.parse('EU 45'); // NaN (partial currency symbol)
parser.parse('$45'); // NaN (different currency symbol)

----------------------------------------

TITLE: Defining Documentation Metadata
DESCRIPTION: Defines metadata for the documentation page including category and keywords for search and navigation purposes.

LANGUAGE: jsx
CODE:
---
category: Color
keywords: [color wheel, color picker, state]
---

----------------------------------------

TITLE: Implementing a SelectClearButton Component with SelectStateContext in React Aria
DESCRIPTION: This example demonstrates how to create a SelectClearButton component that accesses the Select's state via SelectStateContext and allows users to clear the current selection. The component is integrated within the Select component structure.

LANGUAGE: tsx
CODE:
import {SelectStateContext} from 'react-aria-components';

function SelectClearButton() {
  /*- begin highlight -*/
  let state = React.useContext(SelectStateContext);
  /*- end highlight -*/
  return (
    <Button
      // Don't inherit behavior from Select.
      slot={null}
      style={{fontSize: 'small', marginTop: 6, padding: 4}}
      onPress={() => state?.setSelectedKey(null)}>
      Clear
    </Button>
  );
}

<Select>
  <Label>Favorite Animal</Label>
  <Button>
    <SelectValue />
    <span aria-hidden="true">▼</span>
  </Button>
  {/*- begin highlight -*/}
  <SelectClearButton />
  {/*- end highlight -*/}
  <Popover>
    <ListBox>
      <ListBoxItem>Cat</ListBoxItem>
      <ListBoxItem>Dog</ListBoxItem>
      <ListBoxItem>Kangaroo</ListBoxItem>
    </ListBox>
  </Popover>
</Select>

----------------------------------------

TITLE: Component CSS with Variable Fallback Pattern
DESCRIPTION: Example of how component CSS is structured to support theming with variable fallbacks. This allows components to use overridden values when available or fall back to global variables, enabling minimal theme definitions by default.

LANGUAGE: css
CODE:
.spectrum-Button {
  background: var(
    --spectrum-button-background-color,   // original
    var(--spectrum-global-color-gray-100) // fallback
  );
}

----------------------------------------

TITLE: Required Form with Asterisk Indicator in React Spectrum
DESCRIPTION: Example showing a required form with asterisk symbols beside form labels using the isRequired and necessityIndicator props set to "icon".

LANGUAGE: tsx
CODE:
<Form
  isRequired
  necessityIndicator="icon"
  aria-label="Required with asterisk example"
  maxWidth="size-3600">
  <TextField label="Name" />
  <RadioGroup label="Favorite pet">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: React Spectrum Document Component Import
DESCRIPTION: Initial import for the Layout component from React Spectrum docs that sets up the documentation page structure.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Importing Assets for ComboBox Documentation in React
DESCRIPTION: Imports various media assets including videos and images that demonstrate ComboBox functionality and accessibility features. These assets are used throughout the documentation to visually explain implementation details and user experience considerations.

LANGUAGE: JSX
CODE:
import comboboxAccessibilityUrl from 'url:../assets/combobox-accessibility.mp4';
import comboboxScrollingUrl from 'url:../assets/combobox-scrolling-safari.mp4';
import comboboxVisualViewportUrl from 'url:../assets/combobox-visual-viewport.mp4';
import comboboxExampleImageUrl from 'url:../assets/combobox-example.png';
import screenreaderSpreadsheetImageUrl from 'url:../assets/screenreader-spreadsheet-combobox.png';
import comboboxVideoUrl from 'url:../assets/combobox.mp4';

----------------------------------------

TITLE: Implementing a RadioGroup Component with useRadioGroupState Hook in React
DESCRIPTION: This example demonstrates how to create a basic RadioGroup component using the useRadioGroupState hook from React Stately. The hook manages the component's state including the selected value and provides methods to update it. The example shows both the component implementation and its usage with default values and change handlers.

LANGUAGE: jsx
CODE:
import {useRadioGroupState} from '@react-stately/radio';

function RadioGroup(props) {
  let state = useRadioGroupState(props);

  return (
    <>
      <label>
        <input
          type="radio"
          name={state.name}
          checked={state.selectedValue === 'dogs'}
          onChange={() => state.setSelectedValue('dogs')}
        />
        Dogs
      </label>
      <label>
        <input
          type="radio"
          name={state.name}
          checked={state.selectedValue === 'cats'}
          onChange={() => state.setSelectedValue('cats')}
        />
        Cats
      </label>
    </>
  );
}

<RadioGroup
  defaultValue="dogs"
  onChange={(value) => alert(`Selected ${value}`)}
/>

----------------------------------------

TITLE: Implementing a RadioGroup Component with useRadioGroupState Hook in React
DESCRIPTION: This example demonstrates how to create a basic RadioGroup component using the useRadioGroupState hook from React Stately. The hook manages the component's state including the selected value and provides methods to update it. The example shows both the component implementation and its usage with default values and change handlers.

LANGUAGE: jsx
CODE:
import {useRadioGroupState} from '@react-stately/radio';

function RadioGroup(props) {
  let state = useRadioGroupState(props);

  return (
    <>
      <label>
        <input
          type="radio"
          name={state.name}
          checked={state.selectedValue === 'dogs'}
          onChange={() => state.setSelectedValue('dogs')}
        />
        Dogs
      </label>
      <label>
        <input
          type="radio"
          name={state.name}
          checked={state.selectedValue === 'cats'}
          onChange={() => state.setSelectedValue('cats')}
        />
        Cats
      </label>
    </>
  );
}

<RadioGroup
  defaultValue="dogs"
  onChange={(value) => alert(`Selected ${value}`)}
/>

----------------------------------------

TITLE: ColorField with Contextual Help
DESCRIPTION: Demonstrates how to add contextual help to a ColorField using the ContextualHelp component.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<ColorField
  label="Accent Color"
  defaultValue="#e73623"
  contextualHelp={
    <ContextualHelp>
      <Heading>What is an accent color?</Heading>
      <Content>An accent color is the primary foreground color for your theme, used across all components.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Styling Links in List Component with CSS
DESCRIPTION: CSS styling that applies a pointer cursor to list items that have a data-href attribute, providing a visual indication that the items are clickable links.

LANGUAGE: css
CODE:
.list li[data-href] {
  cursor: pointer;
}

----------------------------------------

TITLE: Using Framer Motion's AnimatePresence with Collection Components
DESCRIPTION: Shows how to use Framer Motion's AnimatePresence component with React Aria collection components like GridList. The example demonstrates animating items when they are added or removed from a collection.

LANGUAGE: tsx
CODE:
import {GridList, GridListItem} from 'react-aria-components';
import {motion, AnimatePresence} from 'framer-motion';

const MotionItem = motion(GridListItem);

<GridList>
  <AnimatePresence>
    {items.map(item => (
      <MotionItem
        key={item.id}
        id={item.id}
        layout
        exit={{opacity: 0}}>
        {/* ... */}
      </MotionItem>
    ))}
  </AnimatePresence>
</GridList>

----------------------------------------

TITLE: Importing Documentation Resources for useRangeCalendarState
DESCRIPTION: Imports necessary components and data for documenting the useRangeCalendarState hook, including API documentation and package metadata.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/calendar';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/calendar/package.json';

----------------------------------------

TITLE: Importing Documentation Dependencies for DateFormatter
DESCRIPTION: Imports various documentation components, class information, and package data needed to generate the DateFormatter documentation page.

LANGUAGE: jsx
CODE:
import docs from 'docs:@internationalized/date';
import {HeaderInfo, FunctionAPI, ClassAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@internationalized/date/package.json';

----------------------------------------

TITLE: Styling DateSegment Components with Data Attributes
DESCRIPTION: Shows how to target different UI states of DateSegment components using CSS selectors with data attributes.

LANGUAGE: css
CODE:
.react-aria-DateSegment[data-placeholder] {
  /* ... */
}

.react-aria-DateSegment[data-readonly] {
  /* ... */
}

----------------------------------------

TITLE: Installing React Aria Checkbox Package
DESCRIPTION: Package reference for @react-aria/checkbox, which is part of the React Spectrum library.

LANGUAGE: markdown
CODE:
# @react-aria/checkbox

----------------------------------------

TITLE: Importing and Rendering Styles Component
DESCRIPTION: This simple snippet imports a Styles component from a home directory and renders it. It demonstrates how to include custom styling components in a React application.

LANGUAGE: tsx
CODE:
import {Styles} from './home/Styles';
<Styles />

----------------------------------------

TITLE: Creating an Empty State for GridList
DESCRIPTION: Example showing how to customize what the GridList will display when there are no items using the renderEmptyState prop.

LANGUAGE: tsx
CODE:
<GridList
  aria-label="Search results"
  renderEmptyState={() => 'No results found.'}
>
  {[]}
</GridList>

----------------------------------------

TITLE: Converting CalendarDateTime to CalendarDate
DESCRIPTION: Using the toCalendarDate function to extract just the date component from a CalendarDateTime object. This is useful when only the date portion is needed.

LANGUAGE: tsx
CODE:
import {toCalendarDate} from '@internationalized/date';

let date = new CalendarDateTime(2022, 2, 3, 9, 45);
toCalendarDate(date); // 2022-02-03

----------------------------------------

TITLE: CSS Styling for Custom Horizontal Layout in React Aria Components
DESCRIPTION: CSS styles for the custom horizontal layout example, setting the appearance of list items with background color, padding, and proper box sizing for consistent height.

LANGUAGE: css
CODE:
.item {
  background: gray;
  padding: 4px;
  background-clip: content-box;
  height: 100%;
  box-sizing: border-box;
}

----------------------------------------

TITLE: Parsing Percentage Values with NumberParser
DESCRIPTION: Shows how to configure NumberParser for percentage values, where inputs are divided by 100 and rounded according to specified maximum fraction digits.

LANGUAGE: tsx
CODE:
let parser = new NumberParser('en-US', {
  style: 'percent',
  maximumFractionDigits: 2
});

parser.parse('45%'); // 0.45
parser.parse('62.3333%'); // 0.6233

----------------------------------------

TITLE: Result of mergeProps Operation
DESCRIPTION: Shows the equivalent result of the mergeProps operation from the previous example, illustrating how class names are combined and event handlers are chained together.

LANGUAGE: tsx
CODE:
let merged = {
  className: 'foo bar',
  onKeyDown(e) {
    a.onKeyDown(e);
    b.onKeyDown(e);
  }
};

----------------------------------------

TITLE: TimeField Component Anatomy with Supporting Elements
DESCRIPTION: Shows the complete structure of a TimeField component including Label, DateInput, DateSegment, Text for description, and FieldError for validation messages, with proper ARIA relationships.

LANGUAGE: tsx
CODE:
import {TimeField, Label, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';

<TimeField>
  <Label />
  <DateInput>
    {segment => <DateSegment segment={segment} />}
  </DateInput>
  <Text slot="description" />
  <FieldError />
</TimeField>

----------------------------------------

TITLE: Form Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This table compares Form component props between versions, showing that Spectrum 2 supports size property while RSP v3 has additional properties like isQuiet, isReadOnly, validationState, and validationBehavior that are not yet implemented in S2.

LANGUAGE: typescript
CODE:
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | –
isQuiet | – | 🔴 `boolean`
isReadOnly | – | 🔴 `boolean`
validationState | – | 🔴 `ValidationState`
validationBehavior | – | 🔴 `'aria' \| 'native'`

----------------------------------------

TITLE: Badge with Icon and Label in React Spectrum
DESCRIPTION: Example showing how to create a Badge with both an icon and a text label. The CheckmarkCircle icon is used alongside text content.

LANGUAGE: tsx
CODE:
import {Text} from '@react-spectrum/text';
import CheckmarkCircle from '@spectrum-icons/workflow/CheckmarkCircle';

<Badge variant="positive">
  <CheckmarkCircle aria-label="Done" />
  <Text>Icon + Label</Text>
</Badge>

----------------------------------------

TITLE: Optional Picker with Label Indicator in React Spectrum
DESCRIPTION: Shows a Picker with an optional label indicator. The necessityIndicator prop is set to "label" without isRequired to indicate the field is optional.

LANGUAGE: tsx
CODE:
<Picker label="Choose frequency" necessityIndicator="label">
  <Item key="rarely">Rarely</Item>
  <Item key="sometimes">Sometimes</Item>
  <Item key="always">Always</Item>
</Picker>

----------------------------------------

TITLE: Defining Markdown Page Metadata for useComboBox Documentation
DESCRIPTION: Sets the metadata for the useComboBox documentation page, including category, keywords, and version information.

LANGUAGE: Markdown
CODE:
---
category: Pickers
keywords: [combobox, autocomplete, autosuggest, typeahead, search, aria]
after_version: 3.0.0-alpha.0
---

----------------------------------------

TITLE: Styling Popovers with CSS
DESCRIPTION: CSS styling for the Popover component including background, borders, shadows, animations, and positioning for different placements.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Popover {
  --background-color: var(--overlay-background);

  border: 1px solid var(--border-color);
  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);
  border-radius: 6px;
  background: var(--background-color);
  color: var(--text-color);
  outline: none;
  max-width: 250px;
  transition: transform 200ms, opacity 200ms;

  .react-aria-OverlayArrow svg {
    display: block;
    fill: var(--background-color);
    stroke: var(--border-color);
    stroke-width: 1px;
  }

  &[data-entering],
  &[data-exiting] {
    transform: var(--origin);
    opacity: 0;
  }

  &[data-placement=top] {
    --origin: translateY(8px);

    &:has(.react-aria-OverlayArrow) {
      margin-bottom: 6px;
    }
  }

  &[data-placement=bottom] {
    --origin: translateY(-8px);

    &:has(.react-aria-OverlayArrow) {
      margin-top: 6px;
    }

    .react-aria-OverlayArrow svg {
      transform: rotate(180deg);
    }
  }

  &[data-placement=right] {
    --origin: translateX(-8px);

    &:has(.react-aria-OverlayArrow) {
      margin-left: 6px;
    }

    .react-aria-OverlayArrow svg {
      transform: rotate(90deg);
    }
  }

  &[data-placement=left] {
    --origin: translateX(8px);

    &:has(.react-aria-OverlayArrow) {
      margin-right: 6px;
    }

    .react-aria-OverlayArrow svg {
      transform: rotate(-90deg);
    }
  }
}

----------------------------------------

TITLE: Styling Popovers with CSS
DESCRIPTION: CSS styling for the Popover component including background, borders, shadows, animations, and positioning for different placements.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Popover {
  --background-color: var(--overlay-background);

  border: 1px solid var(--border-color);
  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);
  border-radius: 6px;
  background: var(--background-color);
  color: var(--text-color);
  outline: none;
  max-width: 250px;
  transition: transform 200ms, opacity 200ms;

  .react-aria-OverlayArrow svg {
    display: block;
    fill: var(--background-color);
    stroke: var(--border-color);
    stroke-width: 1px;
  }

  &[data-entering],
  &[data-exiting] {
    transform: var(--origin);
    opacity: 0;
  }

  &[data-placement=top] {
    --origin: translateY(8px);

    &:has(.react-aria-OverlayArrow) {
      margin-bottom: 6px;
    }
  }

  &[data-placement=bottom] {
    --origin: translateY(-8px);

    &:has(.react-aria-OverlayArrow) {
      margin-top: 6px;
    }

    .react-aria-OverlayArrow svg {
      transform: rotate(180deg);
    }
  }

  &[data-placement=right] {
    --origin: translateX(-8px);

    &:has(.react-aria-OverlayArrow) {
      margin-left: 6px;
    }

    .react-aria-OverlayArrow svg {
      transform: rotate(90deg);
    }
  }

  &[data-placement=left] {
    --origin: translateX(8px);

    &:has(.react-aria-OverlayArrow) {
      margin-right: 6px;
    }

    .react-aria-OverlayArrow svg {
      transform: rotate(-90deg);
    }
  }
}

----------------------------------------

TITLE: Implementing a Basic DateField Component in React
DESCRIPTION: Demonstrates a simple implementation of the DateField component with a label, wrapped in a Flex container for proper alignment. This example shows the standalone usage of DateField for inputting dates.

LANGUAGE: tsx
CODE:
<Flex direction="column" alignItems="center">
  <DateField label="Birth date" />
</Flex>

----------------------------------------

TITLE: Styling HTML Elements with style() Macro in React Spectrum
DESCRIPTION: Example of using the style() macro to add Spectrum 2 styling to HTML elements via the className prop.

LANGUAGE: jsx
CODE:
<div className={style({marginStart: 16})}>
  Hello Spectrum 2!
</div>

----------------------------------------

TITLE: Styling a Vertical Toolbar with CSS
DESCRIPTION: CSS styles specific to vertical toolbars, including layout adjustments and styling for horizontal separators to create visual divisions between tool groups.

LANGUAGE: css
CODE:
.react-aria-Toolbar {
  width: fit-content;

  &[data-orientation=vertical] {
    flex-direction: column;
    align-items: start;
  }
}

.react-aria-Separator {
  &:not([aria-orientation=vertical]) {
    border: none;
    height: 1px;
    width: 100%;
    margin: 10px 0;
  }
}

----------------------------------------

TITLE: SearchField with Custom Width
DESCRIPTION: Shows how to specify a custom width for a SearchField component.

LANGUAGE: tsx
CODE:
<SearchField label="Search" width="size-3600" />

----------------------------------------

TITLE: Importing @react-spectrum/table Package Reference
DESCRIPTION: Shows how to reference the @react-spectrum/table package in documentation or code. This component is part of the larger React Spectrum component library.

LANGUAGE: markdown
CODE:
# @react-spectrum/table

----------------------------------------

TITLE: Importing and Exporting Layout Component in React Spectrum Documentation
DESCRIPTION: Imports the Layout component from React Spectrum docs and exports it as the default export for the documentation page structure.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Implementing WaterfallLayout with Virtualizer in React Aria Components
DESCRIPTION: Example showing how to implement a waterfall layout for image gallery using Virtualizer with WaterfallLayout. The layout displays images of varying aspect ratios in a masonry-style grid with specified minimum item size and spacing.

LANGUAGE: tsx
CODE:
import {WaterfallLayout, Size, Text} from 'react-aria-components';

function Example() {
  return (
    <Virtualizer 
      /*- begin highlight -*/
      layout={WaterfallLayout}
      layoutOptions={{
        minItemSize: new Size(150, 150),
        minSpace: new Size(8, 8)
      }}
      /*- end highlight -*/
    >
      <ListBox
        layout="grid"
        aria-label="Virtualized waterfall layout"
        selectionMode="multiple"
        items={images}>
        {item => (
          <ListBoxItem textValue={item.title}>
            <img src={item.image} alt="" style={{aspectRatio: item.aspectRatio}} />
            <Text slot="label">{item.title}</Text>
            <Text slot="description">{item.user}</Text>
          </ListBoxItem>
        )}
      </ListBox>
    </Virtualizer>
  );
}

----------------------------------------

TITLE: Composing React Aria DatePicker Component with Slots
DESCRIPTION: Demonstrates how to compose a DatePicker component using React Aria's slot-based architecture. Each part of the component can be individually styled and customized.

LANGUAGE: tsx
CODE:
<DatePicker>
  <Label>Date Planted</Label>
  <Group>
    <DateInput>
      {segment => <DateSegment segment={segment} />}
    </DateInput>
    <Button><CalendarIcon /></Button>
  </Group>
  <Popover>
    <Dialog>
      <Calendar>
        <Button slot="previous"><LeftIcon /></Button>
        <Heading />
        <Button slot="next"><RightIcon /></Button>
        <CalendarGrid>
          {date => <CalendarCell date={date} />}
        </CalendarGrid>
      </Calendar>
    </Dialog>
  </Popover>
</DatePicker>

----------------------------------------

TITLE: Disambiguating Times During Daylight Saving Transitions in TSX
DESCRIPTION: Examples of using the disambiguation parameter with set() to resolve ambiguous times during daylight saving transitions. Shows options for 'earlier', 'later', and the default 'compatible' behavior for both 'spring forward' and 'fall back' scenarios.

LANGUAGE: tsx
CODE:
// A "spring forward" transition
let date = parseZonedDateTime('2020-03-01T02:00-08:00[America/Los_Angeles]');
date.set({day: 8}); // 2020-03-08T03:00:00-07:00[America/Los_Angeles]
date.set({day: 8}, 'earlier'); // 2020-03-08T01:00:00-08:00[America/Los_Angeles]
date.set({day: 8}, 'later'); // 2020-03-08T03:00:00-07:00[America/Los_Angeles]

// A "fall back" transition
let date = parseZonedDateTime('2020-10-01T01:00-07:00[America/Los_Angeles]');
date.set({month: 11}); // 2020-11-01T01:00:00-07:00[America/Los_Angeles]
date.set({month: 11}, 'earlier'); // 2020-11-01T01:00:00-07:00[America/Los_Angeles]
date.set({month: 11}, 'later'); // 2020-11-01T01:00:00-08:00[America/Los_Angeles]

----------------------------------------

TITLE: Using a Custom Checkbox Component within a React Aria Tree
DESCRIPTION: This snippet demonstrates how to use a custom checkbox component within a Tree component by placing it in the selection slot of a TreeItemContent.

LANGUAGE: tsx
CODE:
<Tree>
  <TreeItem>
    <TreeItemContent>
      <MyCustomCheckbox slot="selection" />
      {/* ... */}
    </TreeItemContent>
  </TreeItem>
</Tree>

----------------------------------------

TITLE: Importing ColorSwatch in React Spectrum
DESCRIPTION: Basic import statements for using ColorSwatch component along with Flex layout component.

LANGUAGE: jsx
CODE:
import {ColorSwatch} from '@react-spectrum/color';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Importing ColorSwatch in React Spectrum
DESCRIPTION: Basic import statements for using ColorSwatch component along with Flex layout component.

LANGUAGE: jsx
CODE:
import {ColorSwatch} from '@react-spectrum/color';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Triggering Toasts from Global Queue
DESCRIPTION: Shows how to add a toast to the global queue from anywhere in the application using the add method of the ToastQueue instance.

LANGUAGE: tsx
CODE:
<Button onPress={() => toastQueue.add('Toast is done!')}>Show toast</Button>

----------------------------------------

TITLE: Implementing Built-in Form Validation in React Aria
DESCRIPTION: Demonstrates HTML constraint validation with React Aria components. This example shows a required email field that uses the FieldError component to display validation errors with custom styling.

LANGUAGE: tsx
CODE:
import {FieldError} from 'react-aria-components';

<Form>
  <TextField name="email" type="email" isRequired>
    <Label>Email</Label>
    <Input />
    <FieldError />
  </TextField>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Configuring ButtonGroup with manageTabIndex prop in React Spectrum
DESCRIPTION: This code snippet demonstrates how to configure a ButtonGroup with manageTabIndex set to false, which overrides the default roving tab index behavior so that all buttons are included in the tab navigation order. The example includes three buttons with icons and labels.

LANGUAGE: jsx
CODE:
<ButtonGroup
  aria-label="Tools"
  selectionMode="none"
  manageTabIndex={false}>
  <Button
    label="Brush"
    value="Brush"
    icon={<Brush />} />
  <Button
    label="Bell"
    value="Bell"
    icon={<Bell />} />
  <Button
    label="AddCircle"
    value="Add"
    icon={<AddCircle />} />
</ButtonGroup>

----------------------------------------

TITLE: Picker with Custom Widths in React Spectrum
DESCRIPTION: Example showing how to customize both the Picker component width and its dropdown menu width using the width and menuWidth props respectively.

LANGUAGE: tsx
CODE:
<Flex direction="column" rowGap="size-150">
  <Picker label="Choose frequency" width="size-3600" maxWidth="100%">
    <Item key="rarely">Rarely</Item>
    <Item key="sometimes">Sometimes</Item>
    <Item key="always">Always</Item>
  </Picker>

  <Picker label="Choose animal" menuWidth="size-6000">
    <Item key="Emu">Emu</Item>
    <Item key="Kangaroo">Kangaroo</Item>
    <Item key="Platypus">Platypus</Item>
  </Picker>
</Flex>

----------------------------------------

TITLE: Customizing Label Position in NumberField in React Spectrum
DESCRIPTION: This example shows how to position the label to the side of the NumberField and align it to the end using the labelPosition and labelAlign props. This allows for more flexible form layouts.

LANGUAGE: tsx
CODE:
<NumberField label="Cookies" labelPosition="side" labelAlign="end" minValue={0} />

----------------------------------------

TITLE: Importing Drag and Drop Media Assets and Components in React
DESCRIPTION: Imports video, VTT captions, SVG illustrations, and documentation components for a blog post about drag and drop functionality. The imports include video demonstrations, anatomical illustrations, and React Spectrum documentation components.

LANGUAGE: JSX
CODE:
import dndMobile from 'url:../assets/dnd-mobile.mp4';
import dndMobileVTT from 'url:../assets/dnd-mobile.vtt';
import dndKeyboard from 'url:../assets/dnd-keyboard.mp4';
import heroVideo from 'url:../assets/dnd.mp4';
import BetweenDropPosition from '@react-aria/dnd/docs/BetweenDropPosition.svg';
import OnDropPosition from '@react-aria/dnd/docs/OnDropPosition.svg';
import RootDropPosition from '@react-aria/dnd/docs/RootDropPosition.svg';
import Anatomy from '@react-aria/dnd/docs/Anatomy.svg';

import {BlogPostLayout, Video, Track, Image} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Tailwind CSS Configuration for v3
DESCRIPTION: Configuration for Tailwind v3 showing how to add the React Aria Components and animation plugins to the tailwind.config.js file.

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components'),
    require('tailwindcss-animate')
  ]
};

----------------------------------------

TITLE: TabList Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This comparison shows that Spectrum 2 supports various ARIA properties and dependencies and items properties for TabList, while RSP v3 has an id property not found in S2.

LANGUAGE: typescript
CODE:
aria-label | 🟢 `string` | –
aria-labelledby | 🟢 `string` | –
aria-describedby | 🟢 `string` | –
aria-details | 🟢 `string` | –
dependencies | 🟢 `Array<any>` | –
items | 🟢 `Iterable<T>` | –
id | – | 🔴 `string`

----------------------------------------

TITLE: Toast Styling with CSS
DESCRIPTION: Provides CSS for styling the toast region and individual toasts, including positioning, colors, and interactive states.

LANGUAGE: css
CODE:
.toast-region {
  position: fixed;
  bottom: 16px;
  right: 16px;
  display: flex;
  flex-direction: column-reverse;
  gap: 8px;
}

.toast {
  display: flex;
  align-items: center;
  gap: 16px;
  background: slateblue;
  color: white;
  padding: 12px 16px;
  border-radius: 8px;
}

.toast button {
  background: none;
  border: none;
  appearance: none;
  border-radius: 50%;
  height: 32px;
  width: 32px;
  font-size: 16px;
  border: 1px solid white;
  color: white;
  padding: 0;
}

.toast button:focus-visible {
  outline: none;
  box-shadow: 0 0 0 2px slateblue, 0 0 0 4px white;
}

.toast button:active {
  background: rgba(255, 255, 255, 0.2);
}

----------------------------------------

TITLE: Building a NumberField Component with Stateful Hooks
DESCRIPTION: Example of creating a stateful number field component by combining React Aria's useNumberField hook with React Stately's useNumberFieldState hook for state management.

LANGUAGE: tsx
CODE:
import {useNumberFieldState} from 'react-stately';
import {useLocale, useNumberField} from 'react-aria';

function NumberField(props) {
  let {locale} = useLocale();
  let state = useNumberFieldState({...props, locale});
  let inputRef = React.useRef(null);
  let {
    labelProps,
    groupProps,
    inputProps,
    incrementButtonProps,
    decrementButtonProps
  } = useNumberField(props, state, inputRef);

  return (
    <div>
      <label {...labelProps}>{props.label}</label>
      <div {...groupProps} style={{display: 'flex', gap: 4}}>
        <Button {...decrementButtonProps}>-</Button>
        <input {...inputProps} ref={inputRef} />
        <Button {...incrementButtonProps}>+</Button>
      </div>
    </div>
  );
}

<NumberField
  label="Price"
  defaultValue={6}
  formatOptions={{
    style: 'currency',
    currency: 'USD'
  }}
/>

----------------------------------------

TITLE: Using disabledKeys Prop for Dynamic Collection Items
DESCRIPTION: Example demonstrating how to use the disabledKeys prop at the GridList level to disable specific items by their keys instead of using isDisabled on individual items.

LANGUAGE: tsx
CODE:
// Using the example above
<PokemonList
  aria-label="List with disabled rows"
  selectionMode="multiple"
  disabledKeys={[3]}
/>

----------------------------------------

TITLE: Setting Up Parcel Configuration for Locale Optimization
DESCRIPTION: Configuration for .parcelrc to use the @react-aria/parcel-resolver-optimize-locales resolver. This snippet shows how to extend the default Parcel configuration with the locale optimization resolver.

LANGUAGE: json
CODE:
{
  "extends": "@parcel/config-default",
  "resolvers": ["@react-aria/parcel-resolver-optimize-locales", "..."]
}

----------------------------------------

TITLE: ProgressCircle with Custom Scale in React Spectrum
DESCRIPTION: Demonstrates how to customize the scale of a ProgressCircle by setting minValue and maxValue props, with value in the middle of the range.

LANGUAGE: tsx
CODE:
<ProgressCircle aria-label="Loading…" minValue={50} maxValue={150} value={100} />

----------------------------------------

TITLE: Installing @react-spectrum/color Package
DESCRIPTION: Package name reference for the color component package within the React Spectrum library.

LANGUAGE: markdown
CODE:
# @react-spectrum/color

----------------------------------------

TITLE: Client-Side Handled Link with useLink in React Aria
DESCRIPTION: Example demonstrating a client-handled link using press events with useLink. Uses a span element and properly applies ARIA attributes to make it accessible as a link. Also showcases using the isPressed state for styling.

LANGUAGE: tsx
CODE:
function Link(props) {
  let ref = React.useRef(null);
  let {linkProps, isPressed} = useLink({...props, elementType: 'span'}, ref);

  return (
    <span
      {...linkProps}
      ref={ref}
      style={{
        color: isPressed ? 'var(--blue)' : 'var(--spectrum-global-color-blue-700)',
        textDecoration: 'underline',
        cursor: 'pointer'
      }}>
      {props.children}
    </span>
  );
}

<Link onPress={() => alert('Pressed link')}>Adobe</Link>

----------------------------------------

TITLE: Documentation Imports for React Aria Table Components
DESCRIPTION: Imports documentation resources for various React Aria and React Stately components needed for the table documentation page. Includes imports for documentation utilities, SVG icons, and example assets.

LANGUAGE: JavaScript
CODE:
import docs from 'docs:@react-aria/table';
import collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';
import selectionDocs from 'docs:@react-stately/selection';
import statelyDocs from 'docs:@react-stately/table';
import focusDocs from 'docs:@react-aria/focus';
import checkboxDocs from 'docs:@react-aria/checkbox';
import utilsDocs from 'docs:@react-aria/utils';
import {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';
import {Keyboard} from '@react-spectrum/text';
import packageData from '@react-aria/table/package.json';
import Anatomy from './TableAnatomy.svg';
import ChevronRight from '@spectrum-icons/workflow/ChevronRight';
import {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';
import tailwindExample from 'url:./Table-tailwind.png';

----------------------------------------

TITLE: Implementing an Accessible Tooltip with OverlayTrigger in React Spectrum
DESCRIPTION: This code snippet demonstrates how to implement an accessible tooltip using the OverlayTrigger component which ensures proper ARIA attributes are automatically added to the trigger element. The tooltip is positioned to the right of a CTA button.

LANGUAGE: JSX
CODE:
<OverlayTrigger placement="right">
  <Button label="Tooltip" variant="cta" />
  <Tooltip variant="info">
    Displays a tooltip
  </Tooltip>
</OverlayTrigger>

----------------------------------------

TITLE: Disabled ActionGroup in React Spectrum
DESCRIPTION: Shows an ActionGroup with the isDisabled prop to disable the entire group of buttons.

LANGUAGE: tsx
CODE:
<ActionGroup isDisabled>
  <Item key="add">Add</Item>
  <Item key="delete">Delete</Item>
  <Item key="edit">Edit</Item>
</ActionGroup>

----------------------------------------

TITLE: Emphasized Switch Component
DESCRIPTION: Demonstrates how to create a visually emphasized Switch component for higher visual prominence.

LANGUAGE: tsx
CODE:
<Switch isEmphasized defaultSelected>Switch Label</Switch>

----------------------------------------

TITLE: Creating a Custom SliderOutput Component in React
DESCRIPTION: Example of creating a wrapper component around the SliderOutput component to customize its appearance or behavior while maintaining compatibility with the Slider component.

LANGUAGE: tsx
CODE:
function MySliderOutput(props) {
  return <SliderOutput {...props} className="my-slider-output" />
}

----------------------------------------

TITLE: Importing Documentation Resources for useDisclosureGroupState
DESCRIPTION: Imports necessary documentation components, API documentation for the disclosure package, and package data for rendering the component documentation.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/disclosure';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/disclosure/package.json';

----------------------------------------

TITLE: Defining StatusLight Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the StatusLight component, extending DOMProps and StyleProps. It specifies required children and variant props along with an optional isDisabled flag.

LANGUAGE: typescript
CODE:
interface StatusLight extends DOMProps, StyleProps {
  children: ReactNode,
  variant: 'positive' | 'negative' | 'notice' | 'info' | 'neutral' | 'celery' | 'chartreuse' | 'yellow' | 'magenta' | 'fuchsia' | 'purple' | 'indigo' | 'seafoam',
  isDisabled?: boolean
}

----------------------------------------

TITLE: Handling DatePicker onChange Events with Formatting
DESCRIPTION: Shows how to handle date change events and format the selected date using useDateFormatter from @react-aria/i18n with the local time zone.

LANGUAGE: tsx
CODE:
import {getLocalTimeZone} from '@internationalized/date';
import {useDateFormatter} from '@react-aria/i18n';

function Example() {
  let [date, setDate] = React.useState(parseDate('1985-07-03'));
  let formatter = useDateFormatter({dateStyle: 'full'});

  return (
    <>
      <DatePicker label="Birth date" value={date} onChange={setDate} />
      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}</p>
    </>
  );
}

----------------------------------------

TITLE: RadioGroup with Form Validation
DESCRIPTION: Shows how to integrate RadioGroup with React Spectrum's Form component using native validation behavior.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native">
  <RadioGroup label="Favorite pet" name="pet" isRequired>
    <Radio value="dogs">Dog</Radio>
    <Radio value="cats">Cat</Radio>
    <Radio value="dragon">Dragon</Radio>
  </RadioGroup>
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Setting Placeholder Value in DatePicker
DESCRIPTION: This example demonstrates how to set a custom placeholder value for a DatePicker. The placeholderValue controls the default values shown in the field when empty and influences the default month shown in the calendar popover.

LANGUAGE: tsx
CODE:
import {CalendarDate} from '@internationalized/date';

<DatePicker label="Birth date" placeholderValue={new CalendarDate(1980, 1, 1)} />

----------------------------------------

TITLE: Accessing Validation Information from React Aria Hooks
DESCRIPTION: This snippet shows how to access validation information from React Aria hooks like useTextField. The hook returns validation state that can be used to render custom error messages.

LANGUAGE: tsx
CODE:
let {isInvalid, validationErrors, validationDetails} = useTextField(props, ref);

----------------------------------------

TITLE: Basic Avatar Component Usage in React Spectrum
DESCRIPTION: Example of a basic Avatar component implementation with a source image URL and alt text for accessibility.

LANGUAGE: tsx
CODE:
<Avatar src="https://i.imgur.com/kJOwAdv.png" alt="default Adobe avatar" />

----------------------------------------

TITLE: Basic FileTrigger Example with React Spectrum
DESCRIPTION: A basic example of using FileTrigger with a Button to allow file selection and display the selected filename.

LANGUAGE: tsx
CODE:
import {FileTrigger, Button} from '@adobe/react-spectrum';

function Example(){
  let [file, setFile] = React.useState(null);

  return (
    <>
      <FileTrigger
        onSelect={(e) => {
          let files = Array.from(e);
          let filenames = files.map((file) => file.name);
          setFile(filenames);
        }}>
        <Button variant="accent">Select a file</Button>
      </FileTrigger>
      {file && file}
    </>
  )
}

----------------------------------------

TITLE: Installing @react-spectrum/calendar Package Reference
DESCRIPTION: Package reference for the @react-spectrum/calendar component from the React Spectrum library.

LANGUAGE: markdown
CODE:
# @react-spectrum/calendar

----------------------------------------

TITLE: Importing React Aria Drag and Drop Components and SVG Assets
DESCRIPTION: Imports necessary components for the drag and drop documentation page, including SVG illustrations and the Keyboard component from React Spectrum.

LANGUAGE: JSX
CODE:
import {Keyboard} from '@react-spectrum/text';
import DropOperation from './DropOperation.svg';
import BetweenDropPosition from './BetweenDropPosition.svg';
import OnDropPosition from './OnDropPosition.svg';
import RootDropPosition from './RootDropPosition.svg';
import Anatomy from './Anatomy.svg';
import DragAffordance from './DragAffordance.svg';

import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: StatusLight Component with Label Colors in React Spectrum
DESCRIPTION: Shows StatusLight components using label color variants for data visualization categories, recommended for 8 or fewer categories.

LANGUAGE: tsx
CODE:
<StatusLight variant="indigo">Indigo</StatusLight>
<StatusLight variant="celery">Celery</StatusLight>
<StatusLight variant="magenta">Magenta</StatusLight>
<StatusLight variant="yellow">Yellow</StatusLight>
<StatusLight variant="fuchsia">Fuchsia</StatusLight>
<StatusLight variant="seafoam">Seafoam</StatusLight>
<StatusLight variant="chartreuse">Chartreuse</StatusLight>
<StatusLight variant="purple">Purple</StatusLight>

----------------------------------------

TITLE: Implementing Multiple Selection in TableView with defaultSelectedKeys
DESCRIPTION: Example of a TableView with multiple selection mode enabled using defaultSelectedKeys to pre-select specific rows. This setup allows users to select multiple rows simultaneously.

LANGUAGE: tsx
CODE:
<TableView aria-label="Example table with multiple selection" selectionMode="multiple" defaultSelectedKeys={['2', '4']}>
  <TableHeader>
    <Column>Name</Column>
    <Column>Type</Column>
    <Column align="end">Level</Column>
  </TableHeader>
  <TableBody>
    <Row key="1">
      <Cell>Charizard</Cell>
      <Cell>Fire, Flying</Cell>
      <Cell>67</Cell>
    </Row>
    <Row key="2">
      <Cell>Blastoise</Cell>
      <Cell>Water</Cell>
      <Cell>56</Cell>
    </Row>
    <Row key="3">
      <Cell>Venusaur</Cell>
      <Cell>Grass, Poison</Cell>
      <Cell>83</Cell>
    </Row>
    <Row key="4">
      <Cell>Pikachu</Cell>
      <Cell>Electric</Cell>
      <Cell>100</Cell>
    </Row>
  </TableBody>
</TableView>

----------------------------------------

TITLE: Creating an Explicit Grid Layout with Areas in React Spectrum
DESCRIPTION: Example of building an application layout with header, sidebar, content, and footer using the Grid component with explicit areas, columns, and rows defined.

LANGUAGE: tsx
CODE:
<Grid
  areas={[
    'header  header',
    'sidebar content',
    'footer  footer'
  ]}
  columns={['1fr', '3fr']}
  rows={['size-1000', 'auto', 'size-1000']}
  height="size-6000"
  gap="size-100">
  <View backgroundColor="celery-600" gridArea="header" />
  <View backgroundColor="blue-600" gridArea="sidebar" />
  <View backgroundColor="purple-600" gridArea="content" />
  <View backgroundColor="magenta-600" gridArea="footer" />
</Grid>

----------------------------------------

TITLE: Front Matter for Documentation Page
DESCRIPTION: Defines metadata for the documentation page including category and keywords for search and navigation purposes.

LANGUAGE: markdown
CODE:
---
category: Color
keywords: [color, input, color picker, state]
---

----------------------------------------

TITLE: LabeledValue with Component Value
DESCRIPTION: Shows how to use a React component (Link) as the value for a LabeledValue.

LANGUAGE: tsx
CODE:
import {Link} from '@adobe/react-spectrum';

<LabeledValue label="Website" value={<Link href="https://www.adobe.com/">Adobe.com</Link>} />

----------------------------------------

TITLE: Adding basePath Support to Next.js Pages Router
DESCRIPTION: This snippet extends the Next.js Pages Router integration to support the basePath configuration by adding a useHref function that prepends the router's basePath to all href values.

LANGUAGE: tsx
CODE:
// pages/_app.tsx
// ...

export default function MyApp({Component, pageProps}: AppProps) {
  let router = useRouter();

  return (
    <Provider 
      theme={defaultTheme}
      router={{
        navigate: (href, opts) => router.push(href, undefined, opts),
        /*- begin highlight -*/
        useHref: (href: string) => router.basePath + href
        /*- end highlight -*/
      }}>
      <Component {...pageProps} />
    </Provider>
  );
}

----------------------------------------

TITLE: Modifying Default Values with Render Props
DESCRIPTION: Example of using render props to modify the default values provided by React Aria, such as wrapping default children in an additional element.

LANGUAGE: jsx
CODE:
<SelectValue>
  {({defaultChildren}) => <span>{defaultChildren}</span>}
</SelectValue>

----------------------------------------

TITLE: Importing CSS for React Aria Components
DESCRIPTION: CSS imports for theming and component styles in React Aria, including the example theme and specific component styles for TextField and Button.

LANGUAGE: css
CODE:
@import '@react-aria/example-theme';
@import 'react-aria-components/docs/TextField.mdx';
@import 'react-aria-components/docs/Button.mdx';

----------------------------------------

TITLE: Targeting React Aria Components with CSS Selectors
DESCRIPTION: Shows how to target React Aria components using their default CSS class names following the react-aria-ComponentName naming convention.

LANGUAGE: css
CODE:
.react-aria-DisclosureGroup {
  /* ... */
}

----------------------------------------

TITLE: Medium Size Breadcrumbs in React Spectrum
DESCRIPTION: Implementation of Breadcrumbs with a medium size variation using the size prop with value 'M'.

LANGUAGE: tsx
CODE:
<Breadcrumbs size="M">
  <Item key="home">Home</Item>
  <Item key="trendy">Trendy</Item>
</Breadcrumbs>

----------------------------------------

TITLE: Controlled Selection Toggle Button Group Example
DESCRIPTION: Example of implementing a controlled ToggleButtonGroup component using React useState to manage selection state externally.

LANGUAGE: tsx
CODE:
import type {Key} from 'react-stately';

function Example() {
  let [selected, setSelected] = React.useState(new Set<Key>(['bold']));

  return (
    <>
      <ToggleButtonGroup selectionMode="multiple" selectedKeys={selected} onSelectionChange={setSelected}>
        <ToggleButton id="bold">Bold</ToggleButton>
        <ToggleButton id="italic">Italic</ToggleButton>
        <ToggleButton id="underline">Underline</ToggleButton>
      </ToggleButtonGroup>
      <p>Current selections (controlled): {[...selected].join(', ')}</p>
    </>
  );
}

----------------------------------------

TITLE: Installing @react-aria/label Package
DESCRIPTION: A code reference to the @react-aria/label package within the React Spectrum project. This is a package name mention rather than executable code.

LANGUAGE: markdown
CODE:
@react-aria/label

----------------------------------------

TITLE: Strict Comparison of Dates Within Same Calendar System
DESCRIPTION: Shows how to use functions like isEqualMonth for strict comparison that requires dates to be in the same calendar system, without automatic conversion between calendars.

LANGUAGE: tsx
CODE:
import {isEqualMonth, IslamicUmalquraCalendar} from '@internationalized/date';

isEqualMonth(new CalendarDate(2021, 4, 16), new CalendarDate(2021, 4, 30)); // true
isEqualMonth(new CalendarDate(2021, 4, 16), new CalendarDate(2021, 8, 2)); // false
isEqualMonth(new CalendarDate(2021, 4, 16), new CalendarDate(new IslamicUmalquraCalendar(), 1442, 9, 4)); // false

----------------------------------------

TITLE: Front Matter Metadata for Collection Interface Documentation
DESCRIPTION: YAML front matter defining metadata for the documentation page, including category and keywords for search optimization.

LANGUAGE: YAML
CODE:
---
category: Collections
keywords: [state]
---

----------------------------------------

TITLE: Basic Virtualizer Import and Usage
DESCRIPTION: Demonstrates the basic import and usage pattern for the Virtualizer component with ListLayout and ListBox.

LANGUAGE: tsx
CODE:
import {Virtualizer, ListLayout} from 'react-aria-components';

<Virtualizer layout={ListLayout}>
  <ListBox>
    {/* ... */}
  </ListBox>
</Virtualizer>

----------------------------------------

TITLE: Importing Layout and Setting Default Export in React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and sets it as the default export for the current documentation page.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Creating a Reusable Meter Component in React Aria
DESCRIPTION: A reusable wrapper for the Meter component that encapsulates the structure, styling, and logic into a single component with a customizable label prop.

LANGUAGE: tsx
CODE:
import type {MeterProps} from 'react-aria-components';

interface MyMeterProps extends MeterProps {
  label?: string
}

function MyMeter({label, ...props}: MyMeterProps) {
  return (
    <Meter {...props}>
      {({percentage, valueText}) => <>
        <Label>{label}</Label>
        <span className="value">{valueText}</span>
        <div className="bar">
          <div className="fill" style={{width: percentage + '%'}} />
        </div>
      </>}
    </Meter>
  );
}

<MyMeter label="Storage space" value={80} />

----------------------------------------

TITLE: Styling ToggleButtonGroup with CSS
DESCRIPTION: CSS code for styling the toggle button group with proper borders, z-index for different states, and horizontal orientation.

LANGUAGE: css
CODE:
.react-aria-ToggleButtonGroup {
  display: flex;

  > button {
    border-radius: 0;
    z-index: 1;

    &[data-disabled] {
      z-index: 0;
    }

    &[data-selected],
    &[data-focus-visible] {
      z-index: 2;
    }
  }
}

.react-aria-ToggleButtonGroup[data-orientation=horizontal] {
  flex-direction: row;

  > button {
    margin-inline-start: -1px;
    
    &:first-child {
      border-radius: 4px 0 0 4px;
      margin-inline-start: 0;
    }

    &:last-child {
      border-radius: 0 4px 4px 0;
    }
  }
}

----------------------------------------

TITLE: Implementing LocalizedStringProvider in Next.js App Router
DESCRIPTION: Adds a LocalizedStringProvider to the root layout component in Next.js App Router to include only the necessary translation strings for the user's language in the initial HTML.

LANGUAGE: tsx
CODE:
// app/[lang]/layout.tsx
import {LocalizedStringProvider} from '@adobe/react-spectrum/i18n';

export default function RootLayout(
  {children, params: {lang}}:
  {children: React.ReactNode, params: {lang: string}}
) {
  return (
    <html lang={lang}>
      <body>
        <LocalizedStringProvider locale={lang} />
        {children}
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Styling FieldGroup Component with CSS
DESCRIPTION: CSS styles for customizing a FieldGroup component that contains NumberField components.

LANGUAGE: css
CODE:
fieldset {
  padding: 1.5em;
  width: fit-content;
}

----------------------------------------

TITLE: Implementing Dynamic Collections with Items Prop and Render Function
DESCRIPTION: Example of creating a dynamic collection using the items prop and a render function. This approach maps over an array of data stored in React state to generate ListBoxItems.

LANGUAGE: tsx
CODE:
let [animals, setAnimals] = useState([
  {id: 1, name: 'Aardvark'},
  {id: 2, name: 'Kangaroo'},
  {id: 3, name: 'Snake'}
]);

<ListBox items={animals}>
  {item => <ListBoxItem>{item.name}</ListBoxItem>}
</ListBox>

----------------------------------------

TITLE: Form Validation with ColorField
DESCRIPTION: Demonstrates how to use ColorField with form validation in a React Spectrum Form component.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  {/*- begin highlight -*/}
  <ColorField label="Color" name="color" isRequired />
  {/*- end highlight -*/}
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Form Validation with ColorField
DESCRIPTION: Demonstrates how to use ColorField with form validation in a React Spectrum Form component.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  {/*- begin highlight -*/}
  <ColorField label="Color" name="color" isRequired />
  {/*- end highlight -*/}
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Negative Variant InlineAlert Example in React Spectrum
DESCRIPTION: Demonstrates the negative variant for error messages or critical issues that require user attention.

LANGUAGE: tsx
CODE:
<InlineAlert variant="negative">
  <Heading>Unable to process payment</Heading>
  <Content>There was an error processing your payment. Please check that your credit card information is correct, then try again.</Content>
</InlineAlert>

----------------------------------------

TITLE: Importing from React Spectrum Mono-package
DESCRIPTION: Example of importing a Button component from the main React Spectrum package.

LANGUAGE: tsx
CODE:
import {Button} from '@adobe/react-spectrum';

----------------------------------------

TITLE: Installing React Spectrum Switch Package
DESCRIPTION: Package name reference for the Switch component in React Spectrum library. This indicates the NPM package name that would be used for installation.

LANGUAGE: markdown
CODE:
@react-spectrum/switch

----------------------------------------

TITLE: Comparing ZonedDateTime Objects in TypeScript
DESCRIPTION: Demonstrates using the compare method to determine if one date is before or after another. Returns a negative number if the first date is before the second, zero if equal, or a positive number if after.

LANGUAGE: tsx
CODE:
let a = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');
let b = parseZonedDateTime('2022-03-04T09:45[America/Los_Angeles]');

a.compare(b) < 0; // true
b.compare(a) > 0; // true

----------------------------------------

TITLE: Documentation Page Structure for useDraggableCollectionState
DESCRIPTION: Renders the main documentation components including page description, header info, API documentation, interface details, and example reference.

LANGUAGE: jsx
CODE:
# useDraggableCollectionState

<PageDescription>{docs.exports.useDraggableCollectionState.description}</PageDescription>

<HeaderInfo
  packageData={packageData}
  componentNames={['useDraggableCollectionState']} />

## API

<FunctionAPI function={docs.exports.useDraggableCollectionState} links={docs.links} />

## Interface

<TypeContext.Provider value={docs.links}>
  <InterfaceType properties={docs.links[docs.exports.useDraggableCollectionState.return.id].properties} />
</TypeContext.Provider>

## Example

See the docs for [useDraggableCollection](/react-aria/useDraggableCollection.html) in react-aria for an example of `useDraggableCollectionState`.

----------------------------------------

TITLE: Styling the Input Component in HueField
DESCRIPTION: CSS styling for the Input component used within the HueField example, setting a specific width.

LANGUAGE: css
CODE:
.react-aria-Input {
  width: 4ch;
}

----------------------------------------

TITLE: Importing Documentation Dependencies for useCheckboxGroupState
DESCRIPTION: Imports necessary components and data for building the documentation page, including API documentation, component metadata, and styling components.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/checkbox';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/checkbox/package.json';

----------------------------------------

TITLE: Implementing a Linear Progress Bar with useProgressBar in React Aria
DESCRIPTION: This snippet demonstrates how to create a basic linear progress bar component using the useProgressBar hook. It includes label support, percentage calculation, and proper ARIA attributes for accessibility.

LANGUAGE: tsx
CODE:
import {useProgressBar} from '@react-aria/progress';

function ProgressBar(props) {
  let {
    label,
    showValueLabel = !!label,
    value,
    minValue = 0,
    maxValue = 100
  } = props;
  let {
    progressBarProps,
    labelProps
  } = useProgressBar(props);

  // Calculate the width of the progress bar as a percentage
  let percentage = (value - minValue) / (maxValue - minValue);
  let barWidth = `${Math.round(percentage * 100)}%`;

  return (
    <div {...progressBarProps} style={{width: 200}}>
      <div style={{display: 'flex', justifyContent: 'space-between'}}>
        {label &&
          <span {...labelProps}>
            {label}
          </span>
        }
        {showValueLabel &&
          <span>
            {progressBarProps['aria-valuetext']}
          </span>
        }
      </div>
      <div style={{height: 10, background: 'lightgray'}}>
        <div style={{width: barWidth, height: 10, background: 'orange'}} />
      </div>
    </div>
  );
}

<ProgressBar label="Loading…" value={80} />

----------------------------------------

TITLE: Rendering Navigation Links in React Spectrum Documentation Header
DESCRIPTION: Creates navigation links for 'Get started' and 'GitHub' within the React Spectrum documentation header, applying appropriate styling.

LANGUAGE: JSX
CODE:
<p className={clsx(typographyStyles['spectrum-Body2'], styles.homeLinks)}>
  <a href="getting-started.html" className={clsx(linkStyle['spectrum-Link'], styles.link)}>Get started</a>
  <span aria-hidden="true">•</span>
  <a href="https://github.com/adobe/react-spectrum" className={clsx(linkStyle['spectrum-Link'], styles.link)}>GitHub</a>
</p>

----------------------------------------

TITLE: Creating Sectioned Collections with Header Components
DESCRIPTION: Example of organizing menu items into sections with headers. This approach uses the Section and Header components to create a grouped structure within a collection.

LANGUAGE: tsx
CODE:
<Menu>
  <Section>
    <Header>Styles</Header>
    <MenuItem>Bold</MenuItem>
    <MenuItem>Underline</MenuItem>
  </Section>
  <Section>
    <Header>Align</Header>
    <MenuItem>Left</MenuItem>
    <MenuItem>Middle</MenuItem>
    <MenuItem>Right</MenuItem>
  </Section>
</Menu>

----------------------------------------

TITLE: Disabled DisclosureGroup Implementation
DESCRIPTION: Example of disabling an entire DisclosureGroup using the isDisabled prop. When disabled, users cannot interact with any disclosures within the group, preventing expansion or collapse actions.

LANGUAGE: tsx
CODE:
<DisclosureGroup isDisabled>
  <MyDisclosure id="system" title="System Requirements" >
    Details about system requirements here
  </MyDisclosure>
  <MyDisclosure id="personal" title="Personal Information" >
    Details about personal information here"
  </MyDisclosure>
</DisclosureGroup>

----------------------------------------

TITLE: Controlled vs Uncontrolled ColorPicker Implementation
DESCRIPTION: Shows how to implement both controlled and uncontrolled ColorPicker components using React state and the parseColor function.

LANGUAGE: tsx
CODE:
import {ColorPicker} from '@react-spectrum/color';
import {Flex} from '@react-spectrum/layout';
import {parseColor} from '@react-spectrum/color';

function Example() {
  let [value, setValue] = React.useState(parseColor('hsl(25, 100%, 50%)'));
  return (
    <Flex gap="size-300" wrap>
      <ColorPicker
        label="Color Picker (uncontrolled)"
        /*- begin highlight -*/
        defaultValue="hsl(25, 100%, 50%)">
        {/*- end highlight -*/}
        <ColorEditor />
      </ColorPicker>
      <ColorPicker
        label="Color Picker (controlled)"
        /*- begin highlight -*/
        value={value}
        onChange={setValue}>
        {/*- end highlight -*/}
        <ColorEditor />
      </ColorPicker>
    </Flex>
  );
}

----------------------------------------

TITLE: RadioGroup with Individual Disabled Radio
DESCRIPTION: Demonstrates how to disable individual Radio options within a RadioGroup while keeping others enabled.

LANGUAGE: tsx
CODE:
<RadioGroup label="Favorite avatar">
  <Radio value="wizard">Wizard</Radio>
  <Radio value="dragon" isDisabled>Dragon</Radio>
</RadioGroup>

----------------------------------------

TITLE: Detecting Server-Side Rendering with useIsSSR Hook
DESCRIPTION: Demonstrates how to use the useIsSSR hook to determine if a component is running in a server-side rendering context. This is useful for conditionally rendering content based on the rendering environment.

LANGUAGE: tsx
CODE:
import {useIsSSR} from '@react-aria/ssr';

function MyComponent() {
  let isSSR = useIsSSR();
  return <span>{isSSR ? 'Server' : 'Client'}</span>
}

----------------------------------------

TITLE: Migrating Border Width Style Props in React Spectrum
DESCRIPTION: This example demonstrates how to convert the 'borderWidth' style prop from React Spectrum v3 to the S2 style macro syntax using pixel values instead of named values.

LANGUAGE: diff
CODE:
- <View borderWidth="thin"  />
+ <div className={style({borderWidth: 1})} />

----------------------------------------

TITLE: Importing Layout Component in JSX
DESCRIPTION: Imports the Layout component from React Spectrum docs package and sets it as the default export for the current file.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Using onChangeEnd Event in React Spectrum Slider
DESCRIPTION: Example showing how to use the onChangeEnd event to handle value changes only when the user finishes dragging, rather than during the drag operation.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState(25);
  return (
    <>
      <Slider
        label="Cookies to buy"
        defaultValue={value}
        onChangeEnd={setValue} />
      <p>Current value: {value}</p>
    </>
  );
}

----------------------------------------

TITLE: Using Video Component to Demonstrate Text Selection Issues
DESCRIPTION: Implements the Video component to illustrate the text selection behavior on iOS when long-pressing a button. This demonstrates the challenge that React Aria solves with text selection during button interactions.

LANGUAGE: jsx
CODE:
<Video src={textSelectionVideoUrl} loop autoPlay muted />

----------------------------------------

TITLE: Limiting Allowed Drop Operations in React Spectrum
DESCRIPTION: This snippet shows how to limit which drop operations are allowed for draggable items using the getAllowedDropOperations function. It restricts operations to copy-only, preventing move operations.

LANGUAGE: tsx
CODE:
<ListBox
  aria-label="Categories"
  getAllowedDropOperations={() => ['copy']}
  selectionMode="multiple"
 >
  <Item>Animals</Item>
  <Item>People</Item>
  <Item>Plants</Item>
</ListBox>
<DropTarget />

----------------------------------------

TITLE: Importing Documentation Components
DESCRIPTION: Imports documentation resources and UI components needed for the documentation page.

LANGUAGE: JavaScript
CODE:
import docs from 'docs:@react-stately/collections';
import dataDocs from 'docs:@react-stately/data';
import {HeaderInfo, PropTable, TypeLink} from '@react-spectrum/docs';

----------------------------------------

TITLE: Implementing Unavailable Date Ranges in RangeCalendar
DESCRIPTION: Shows how to mark specific date ranges as unavailable in the calendar by using the isDateUnavailable callback function.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

function Example() {
  let now = today(getLocalTimeZone());
  let disabledRanges = [
    [now, now.add({days: 5})],
    [now.add({days: 14}), now.add({days: 16})],
    [now.add({days: 23}), now.add({days: 24})],
  ];

  let isDateUnavailable = (date) => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);

  return <RangeCalendar aria-label="Trip dates" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />
}

----------------------------------------

TITLE: Applying Custom Class Names to React Aria Components
DESCRIPTION: Demonstrates how to override the default class name with a custom one on a DisclosureGroup component.

LANGUAGE: jsx
CODE:
<DisclosureGroup className="my-accordion">
  {/* ... */}
</DisclosureGroup>

----------------------------------------

TITLE: Rendering Hero Component with Responsive Images
DESCRIPTION: Renders the Hero component with various image sources for different screen sizes and formats (WebP and standard), providing responsive imagery for the documentation page.

LANGUAGE: JSX
CODE:
<Hero
  narrow={heroNarrow}
  narrow2x={heroNarrow2x}
  narrowWebp={heroNarrowWebp}
  narrow2xWebp={heroNarrow2xWebp}
  wide={heroWide}
  wide2x={heroWide2x}
  wideWebp={heroWideWebp}
  wide2xWebp={heroWide2xWebp}
  alt="Internationalized hero image" />

----------------------------------------

TITLE: ColorSwatch with Transparency Display
DESCRIPTION: Example showing how ColorSwatch displays transparent colors with a special visual indicator.

LANGUAGE: tsx
CODE:
import {parseColor, ColorSlider} from '@react-spectrum/color';

function Example() {
  let [color, setColor] = React.useState(parseColor('hsla(0, 100%, 50%, 0)'));
  return (
    <Flex direction="column" gap="size-100">
      <ColorSlider value={color} onChange={setColor} channel="alpha" />
      <ColorSwatch color={color} />
    </Flex>
  );
}

----------------------------------------

TITLE: Managing Selection with Dynamic Data Using useListData Hook
DESCRIPTION: This example shows how to handle selection state automatically when data changes using the useListData hook. The hook manages both the item data and selection state, and updates selection when items are removed.

LANGUAGE: tsx
CODE:
let list = useListData({
  initialItems: [
    {name: 'Aardvark'},
    {name: 'Kangaroo'},
    {name: 'Snake'}
  ],
  initialSelectedKeys: ['Kangaroo'],
  getKey: item => item.name
});

function removeItem() {
  // Removing the list item will also remove it from the selection state.
  list.remove('Kangaroo');
}

<ListBox
  items={list.items}
  selectedKeys={list.selectedKeys}
  onSelectionChange={list.setSelectedKeys}>
  {item => <Item key={item.name}>{item.name}</Item>}
</ListBox>

----------------------------------------

TITLE: Configuring Vite with React Aria Locales Plugin for Remix
DESCRIPTION: Configuration for Remix with Vite build system to optimize locale bundle size. This setup uses the React Aria locales plugin to exclude translation strings from the client bundle.

LANGUAGE: ts
CODE:
// vite.config.ts
import { unstable_vitePlugin as remix } from '@remix-run/dev';
import { defineConfig } from 'vite';
import localesPlugin from '@react-aria/optimize-locales-plugin';

export default defineConfig({
  plugins: [
    remix(),
    // Don't include any locale strings in the client JS bundle.
    {...localesPlugin.vite({locales: []}), enforce: 'pre'}
  ],
});

----------------------------------------

TITLE: Using Video Component to Demonstrate Touch Interactions
DESCRIPTION: Integrates the Video component to show a demonstration of touch interaction behavior when dragging a finger off a button. The video illustrates how the active state persists even when the finger is no longer over the button.

LANGUAGE: jsx
CODE:
<Video src={draggingVideoUrl} loop autoPlay muted />

----------------------------------------

TITLE: Category Color Variants of Badge in React Spectrum
DESCRIPTION: Shows the category color variants for Badge components used for color coding up to 8 categories, including seafoam, indigo, purple, fuchsia, magenta, and yellow.

LANGUAGE: tsx
CODE:
import {Flex} from '@react-spectrum/layout';

<Flex direction="column" gap={8}>
  <Badge variant="seafoam">Seafoam</Badge>
  <Badge variant="indigo">Indigo</Badge>
  <Badge variant="purple">Purple</Badge>
  <Badge variant="fuchsia">Fuchsia</Badge>
  <Badge variant="magenta">Magenta</Badge>
  <Badge variant="yellow">Yellow</Badge>
</Flex>

----------------------------------------

TITLE: Importing Layout Component for React Spectrum Documentation
DESCRIPTION: Imports the Layout component from React Spectrum docs package and exports it as the default component for this page's layout.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Styling ListBoxItem States with CSS
DESCRIPTION: Example of targeting different UI states of a ListBoxItem component using data attributes in CSS selectors.

LANGUAGE: css
CODE:
.react-aria-ListBoxItem[data-selected] {
  /* ... */
}

.react-aria-ListBoxItem[data-focused] {
  /* ... */
}

----------------------------------------

TITLE: CSS Styling for Input Component in ColorNumberField
DESCRIPTION: This CSS snippet sets the width of the React Aria Input component to 4 characters, providing appropriate sizing for the numeric input in ColorNumberField.

LANGUAGE: css
CODE:
.react-aria-Input {
  width: 4ch;
}

----------------------------------------

TITLE: Uncontrolled ColorArea with Custom Default Value
DESCRIPTION: Example of using ColorArea as an uncontrolled component with a specific HSB color value. The component will use the color space of the provided default value.

LANGUAGE: tsx
CODE:
<MyColorArea defaultValue="hsb(219, 58%, 93%)" />

----------------------------------------

TITLE: Importing UI Components for 404 Page
DESCRIPTION: Imports necessary React Spectrum components for building the 404 page, including Content, Flex, Heading, IllustratedMessage, and the NotFound illustration.

LANGUAGE: jsx
CODE:
import {Content} from '@react-spectrum/view';
import {Flex} from '@react-spectrum/layout';
import {Heading} from '@react-spectrum/text';
import {IllustratedMessage} from '@react-spectrum/illustratedmessage';
import NotFound from '@spectrum-icons/illustrations/NotFound';

----------------------------------------

TITLE: Converting UTC Dates to Local Time Zone in DatePicker
DESCRIPTION: This snippet shows how to parse an absolute date and time in UTC format into the user's local time zone using parseAbsoluteToLocal from the @internationalized/date package and display it in a DatePicker.

LANGUAGE: tsx
CODE:
import {parseAbsoluteToLocal} from '@internationalized/date';

<MyDatePicker
  label="Event date"
  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}
/>

----------------------------------------

TITLE: Referencing React Spectrum Tooltip Package in Markdown
DESCRIPTION: A simple Markdown code block indicating the package name @react-spectrum/tooltip and stating that it is part of the React Spectrum library, with a link to the GitHub repository for more information.

LANGUAGE: markdown
CODE:
# @react-spectrum/tooltip

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Basic CSS Transitions for Overlay Components
DESCRIPTION: Demonstrates a simple opacity transition for overlay components using data-entering and data-exiting states. The transition is applied in the default state, with opacity set to 0 in both the entering and exiting states.

LANGUAGE: css
CODE:
.react-aria-Popover {
  transition: opacity 300ms;

  &[data-entering],
  &[data-exiting] {
    opacity: 0;
  }
}

----------------------------------------

TITLE: Implementing LocalizedStringProvider in Next.js Pages Document
DESCRIPTION: Example of adding the LocalizedStringProvider to a Next.js _document.tsx file. This injects the required language strings before the NextScript component to ensure they're available to the client.

LANGUAGE: tsx
CODE:
// pages/_document.tsx
import {Html, Head, Main, NextScript, DocumentProps} from 'next/document'
import {LocalizedStringProvider} from 'react-aria-components/i18n';

export default function Document(props: DocumentProps) {
  return (
    <Html lang={props.locale}>
      <Head />
      <body>
        <Main />
        <LocalizedStringProvider locale={props.locale} />
        <NextScript />
      </body>
    </Html>
  );
}

----------------------------------------

TITLE: Demonstrating Proposed Monorepo Folder Structure for React Spectrum v3
DESCRIPTION: This folder structure illustration shows how individual component packages would be organized within a Lerna monorepo. Each component has its own package with source, tests, and documentation, while the main react-spectrum package contains re-export files pointing to the individual packages.

LANGUAGE: text
CODE:
packages
├── button
│   ├── package.json
│   ├── src
│   │   └── Button.js
│   ├── test
│   │   └── Button.test.js
│   └── docs
│       └── Button.mdx
├── combo-box
│   ├── package.json
│   ├── src
│   │   └── ComboBox.js
│   ├── test
│   │   └── ComboBox.test.js
│   └── docs
│       └── ComboBox.mdx
├── ...
└── react-spectrum
    ├── Button.js
    ├── ComboBox.js
    ├── ...
    └── package.json

----------------------------------------

TITLE: Implementing Horizontal and Vertical Separators with React Aria
DESCRIPTION: Complete example demonstrating how to create both horizontal and vertical separators using the useSeparator hook. The example includes a Separator component that accepts an orientation prop and applies appropriate styling.

LANGUAGE: tsx
CODE:
import {useSeparator} from '@react-aria/separator';

function Separator(props) {
  let {separatorProps} = useSeparator(props);

  return (
    <div
      {...separatorProps}
      style={{
        background: 'gray',
        width: props.orientation === 'vertical' ? '1px' : '100%',
        height: props.orientation === 'vertical' ? '100%' : '1px',
        margin: props.orientation === 'vertical' ? '0 5px' : '5px 0'
      }} />
  );
}

<>
  <div style={{display: 'flex', flexDirection: 'column'}}>
    Content above
    <Separator />
    Content below
  </div>

  <div style={{display: 'flex', flexDirection: 'row', marginTop: 20, height: 40, alignItems: 'center'}}>
    Content left
    <Separator orientation="vertical" />
    Content right
  </div>
</>

----------------------------------------

TITLE: Importing useIsSSR Hook from React Aria SSR Package
DESCRIPTION: Shows how to import the useIsSSR hook from the @react-aria/ssr package and use it to conditionally render content based on whether the code is running on the server or client.

LANGUAGE: tsx
CODE:
import {useIsSSR} from '@react-aria/ssr';

function MyComponent() {
  let isSSR = useIsSSR();
  return <span>{isSSR ? 'Server' : 'Client'}</span>;
}

----------------------------------------

TITLE: Creating a Custom Stepper Component with React Context in TSX
DESCRIPTION: This snippet demonstrates how to build a custom Stepper component using React Aria's context providers. It shows how to create custom patterns with compositional APIs by leveraging ButtonContext and TextContext to manage state and create interactive UI elements.

LANGUAGE: tsx
CODE:
// A Stepper component with customizable buttons.
function Stepper({children}) {
  let [value, setValue] = useState(0);

  return (
    <ButtonContext.Provider value={{
      slots: {
        decrement: {onPress: () => setValue(value - 1)},
        increment: {onPress: () => setValue(value + 1)}
      }
    }}>
      <TextContext.Provider value={{children: value}}>
        {children}
      </TextContext.Provider>
    </ButtonContext.Provider>
  );
}

<Stepper>
  <Button slot="decrement">-</Button>
  <Text />
  <Button slot="increment">+</Button>
</Stepper>

----------------------------------------

TITLE: Meter Component with Default Value Scale
DESCRIPTION: Example of using the custom Meter component with a standard percentage value scale (0-100).

LANGUAGE: tsx
CODE:
<MyMeter
  label="Storage space"
  value={25} />

----------------------------------------

TITLE: Using Custom Value Label in ProgressBar
DESCRIPTION: Example of using the valueLabel prop to provide a custom text representation of the progress value instead of the default percentage format.

LANGUAGE: tsx
CODE:
<MyProgressBar
  label="Feeding…"
  valueLabel="30 of 100 dogs"
  value={30} />

----------------------------------------

TITLE: Importing Types and Utilities for Custom Calendars
DESCRIPTION: Imports necessary types and utility functions from the internationalized date package for custom calendar implementation.

LANGUAGE: tsx
CODE:
import type {AnyCalendarDate} from '@internationalized/date';
import {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';

----------------------------------------

TITLE: Importing Assets for React Spectrum Blog Post in JavaScript
DESCRIPTION: Imports various image assets for the blog post hero section, including standard and WebP formats in different resolutions for responsive design.

LANGUAGE: JavaScript
CODE:
import heroNarrow from 'url:../assets/ReactAria_Mobile_976x1025_1x.png';
import heroNarrow2x from 'url:../assets/ReactAria_Mobile_976x1025_2x.png';
import heroNarrowWebp from 'url:../assets/ReactAria_Mobile_976x1025_1x.webp';
import heroNarrow2xWebp from 'url:../assets/ReactAria_Mobile_976x1025_2x.webp';
import heroWide from 'url:../assets/ReactAria_976x445_1x.png';
import heroWide2x from 'url:../assets/ReactAria_976x445_2x.png';
import heroWideWebp from 'url:../assets/ReactAria_976x445_1x.webp';
import heroWide2xWebp from 'url:../assets/ReactAria_976x445_2x.webp';

import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Advanced ColorArea Customization with Context
DESCRIPTION: Creates a custom ColorAreaDescription component that uses the ColorAreaContext to associate a description with the color area via aria-describedby, demonstrating component composition patterns.

LANGUAGE: tsx
CODE:
import {ColorAreaContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface ColorAreaDescriptionProps {
  children?: React.ReactNode,
  description?: string
}

function ColorAreaDescription({children, description}: ColorAreaDescriptionProps) {
  let descriptionId = useId();
  return (
    <div>
      {/*- begin highlight -*/}
      <ColorAreaContext.Provider value={{'aria-describedby': descriptionId}}>
      {/*- end highlight -*/}
        {children}
      </ColorAreaContext.Provider>
      <small id={descriptionId}>{description}</small>
    </div>
  );
}

<ColorAreaDescription description="Choose a background color for your profile.">
  <MyColorArea />
</ColorAreaDescription>

----------------------------------------

TITLE: Meter Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This table compares Meter component props between versions, showing differences in variant options and size options, and that Spectrum 2 supports staticColor while v3 has labelPosition and showValueLabel properties not implemented in S2.

LANGUAGE: typescript
CODE:
slot | 🟢 `null \| string` | –
variant | 🟢 `'informative' \| 'negative' \| 'notice' \| 'positive'` | 🔴 `'critical' \| 'informative' \| 'positive' \| 'warning'`
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | 🔴 `'L' \| 'S'`
staticColor | 🟢 `'black' \| 'white'` | –
labelPosition | – | 🔴 `LabelPosition`
showValueLabel | – | 🔴 `boolean`

----------------------------------------

TITLE: Embedding YouTube Video with React JSX
DESCRIPTION: JSX code for embedding a responsive YouTube video about design systems and accessibility, featuring Devon Govett at ReactEurope 2020. The video is wrapped in a responsive container with appropriate title, dimensions, and attributes.

LANGUAGE: jsx
CODE:
<div className={style.responsiveVideo}>
  <iframe
    title="YouTube embedded video: Design system and accessibility - Devon Govett aka @devongovett at @ReactEurope 2020"
    width="840"
    height="471"
    src="https://www.youtube.com/embed/dxDcBB7Xoxs"
    frameBorder="0"
    allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen />
</div>

----------------------------------------

TITLE: Using Slots in React Aria Components with NumberField in JSX
DESCRIPTION: Example showing how to use the slot prop to distinguish between multiple instances of the same component within a pattern. This demonstrates a NumberField with increment and decrement buttons designated by slots.

LANGUAGE: JSX
CODE:
<NumberField>
  <Label>Width</Label>
  <Group>
    <Button slot="decrement">-</Button>
    <Input />
    <Button slot="increment">+</Button>
  </Group>
</NumberField>

----------------------------------------

TITLE: Conditional Rendering with State-Based Render Props in JSX
DESCRIPTION: Example showing how to use render props to conditionally render elements based on component states. This demonstrates rendering a checkmark icon when an item is selected.

LANGUAGE: JSX
CODE:
<Item>
  {({isSelected}) => (
    <>
      {isSelected && <CheckmarkIcon />}
      Item
    </>
  )}
</Item>

----------------------------------------

TITLE: Integrating RouterProvider with Remix in React Aria Components
DESCRIPTION: This snippet demonstrates how to set up the RouterProvider at the root level of a Remix application. It leverages Remix's useNavigate and useHref hooks to enable routing functionality for React Aria Components.

LANGUAGE: tsx
CODE:
// app/root.tsx
import {useNavigate, useHref, Outlet} from '@remix-run/react';
import type {NavigateOptions} from 'react-router-dom';
import {RouterProvider} from 'react-aria-components';

declare module 'react-aria-components' {
  interface RouterConfig {
    routerOptions: NavigateOptions
  }
}

export default function App() {
  let navigate = useNavigate();

  return (
    <html lang="en">
      <head>
        {/* ... */}
      </head>
      <body>
        <RouterProvider navigate={navigate} useHref={useHref}>
          <Outlet />
        </RouterProvider>
        {/* ... */}
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Setting Up Blog Post Layout Components in React
DESCRIPTION: Imports and exports layout components used for structuring the blog post, including BlogPostLayout, Video, and Image components from the React Spectrum documentation package.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Video, Image} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Integrating Action Menus with TreeView Items
DESCRIPTION: This example shows how to incorporate ActionMenu components within TreeViewItem to provide dropdown menu actions for each item in the tree.

LANGUAGE: tsx
CODE:
import {Collection} from '@adobe/react-spectrum';

<TreeView aria-label="Example tree with action menus" height="size-3000" maxWidth="size-6000" items={items}>
  {function renderItem(item: MyItem) {
    return (
      <TreeViewItem textValue={item.name}>
        <TreeViewItemContent>
          <Text>{item.name}</Text>
          {item.icon}
          <ActionMenu onAction={(key) => alert(`Item: ${item.id}, Action: ${key}`)}>
            <Item key="edit" textValue="Edit">
              <Edit />
              <Text>Edit</Text>
            </Item>
            <Item key="delete" textValue="Delete">
              <Delete />
              <Text>Delete</Text>
            </Item>
          </ActionMenu>
        </TreeViewItemContent>
        <Collection items={item.childItems}>
          {renderItem}
        </Collection>
      </TreeViewItem>
    )
  }}
</TreeView>

----------------------------------------

TITLE: Creating an Uncontrolled ColorField with Default Value
DESCRIPTION: Example demonstrating an uncontrolled ColorField component with a default color value set using the defaultValue prop.

LANGUAGE: tsx
CODE:
<ColorField aria-label="Color" defaultValue="#7f007f" />

----------------------------------------

TITLE: Using JavaScript parseFloat for Number Parsing
DESCRIPTION: Reference to JavaScript's parseFloat function which is used after converting localized numerals to Latin equivalents in the custom number parsing implementation.

LANGUAGE: javascript
CODE:
parseFloat

----------------------------------------

TITLE: Creating a Custom DateSegment Wrapper Component in React
DESCRIPTION: A simple example showing how to create a wrapper component for DateSegment to customize its properties, such as adding a custom className.

LANGUAGE: tsx
CODE:
function MyDateSegment(props) {
  return <MyDateSegment {...props} className="my-date-segment" />
}

----------------------------------------

TITLE: Basic ColorSwatch Component Usage in React
DESCRIPTION: Demonstrates the basic implementation of a ColorSwatch component with a red color value.

LANGUAGE: tsx
CODE:
import {ColorSwatch} from 'react-aria-components';

<ColorSwatch color="#f00" />

----------------------------------------

TITLE: Visualizing Implementation Packages with React Components
DESCRIPTION: This code creates a visual representation of the three implementation packages (React Spectrum, React Aria, and React Stately) that correspond to the architectural layers described in the documentation.

LANGUAGE: jsx
CODE:
<figure className={style.float}>
  <Flex direction="column" gap="size-125">
    <View backgroundColor="static-magenta-600" height="size-900">
      <Flex alignItems="center" justifyContent="center" height="100%">
        <span style={{color: 'white', fontSize: 18}}>React Spectrum</span>
      </Flex>
    </View>
    <View backgroundColor="static-green-600" height="size-900">
      <Flex alignItems="center" justifyContent="center" height="100%">
        <span style={{color: 'white', fontSize: 18}}>React Aria</span>
      </Flex>
    </View>
    <View backgroundColor="static-blue-600" height="size-900">
      <Flex alignItems="center" justifyContent="center" height="100%">
        <span style={{color: 'white', fontSize: 18}}>React Stately</span>
      </Flex>
    </View>
  </Flex>
</figure>

----------------------------------------

TITLE: Configuring Provider Component with Explicit Locale for SSR
DESCRIPTION: Sets up a React Spectrum Provider component with an explicitly defined locale for server side rendering instead of relying on automatic locale detection. This ensures the server-rendered content matches the client's expected locale.

LANGUAGE: tsx
CODE:
import {Provider, defaultTheme} from '@adobe/react-spectrum';

function App() {
  return (
    <Provider theme={defaultTheme} locale={yourLocaleHere}>
      {/* your app here */}
    </Provider>
  );
}

----------------------------------------

TITLE: Defining Well Component Interface in TypeScript for React Spectrum
DESCRIPTION: TypeScript interface definition for the Well component that extends DOMProps and StyleProps interfaces. The component requires children to be passed as a ReactNode property.

LANGUAGE: typescript
CODE:
interface Well extends DOMProps, StyleProps {
  children: ReactNode
}

----------------------------------------

TITLE: Customizing Slider Min and Max Values
DESCRIPTION: Example showing how to set custom minimum and maximum values for a Slider instead of the default 0-100 range.

LANGUAGE: tsx
CODE:
<Slider
  label="Cookies to buy"
  minValue={50}
  maxValue={150}
  defaultValue={100} />

----------------------------------------

TITLE: Configuring Replace Selection Behavior in List Component
DESCRIPTION: This example demonstrates the 'replace' selection behavior where clicking a row replaces the current selection instead of toggling it, allowing for modifier keys to select multiple rows.

LANGUAGE: tsx
CODE:
<PokemonList aria-label="List with replace selection behavior" selectionMode="multiple" selectionBehavior="replace" />

----------------------------------------

TITLE: Creating Custom Components with View
DESCRIPTION: Demonstrates building a custom container component using the View component with Spectrum styling variables for border, color, and padding properties.

LANGUAGE: tsx
CODE:
<View
  borderWidth="thin"
  borderColor="dark"
  borderRadius="medium"
  padding="size-250">
  <TextField label="Name" />
</View>

----------------------------------------

TITLE: Implementing a Custom Trigger Component with Ref Forwarding
DESCRIPTION: Example of creating a custom trigger component for use with DialogTrigger, which properly forwards refs and spreads props to ensure compatibility.

LANGUAGE: tsx
CODE:
const CustomTrigger = React.forwardRef((props, ref) => (
  <button {...props} ref={ref} />
));

----------------------------------------

TITLE: Implementing a Custom Trigger Component with Ref Forwarding
DESCRIPTION: Example of creating a custom trigger component for use with DialogTrigger, which properly forwards refs and spreads props to ensure compatibility.

LANGUAGE: tsx
CODE:
const CustomTrigger = React.forwardRef((props, ref) => (
  <button {...props} ref={ref} />
));

----------------------------------------

TITLE: Installing @react-aria/gridlist Package Reference in Markdown
DESCRIPTION: A markdown header that identifies the @react-aria/gridlist package, with a note that it is part of the react-spectrum repository.

LANGUAGE: markdown
CODE:
# @react-aria/gridlist

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: ColorPicker with Different Size Options
DESCRIPTION: Shows how to set different sizes for the ColorPicker component using the size prop.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-100">
  <ColorPicker label="Extra small" size="XS" defaultValue="#A00">
    <ColorEditor />
  </ColorPicker>
  <ColorPicker label="Small" size="S" defaultValue="#080">
    <ColorEditor />
  </ColorPicker>
  <ColorPicker label="Medium" size="M" defaultValue="#FB0">
    <ColorEditor />
  </ColorPicker>
  <ColorPicker label="Large" size="L" defaultValue="#00F">
    <ColorEditor />
  </ColorPicker>
</Flex>

----------------------------------------

TITLE: CSS Styling for DateField Component
DESCRIPTION: CSS styles for the DateField component, including styles for the wrapper, field container, and individual date segments with focus states and placeholder styling.

LANGUAGE: css
CODE:
.wrapper {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

.field {
  display: block;
  padding: 2px 4px;
  border-radius: 2px;
  border: 1px solid var(--gray);
  background: var(--spectrum-global-color-gray-50);
}

.field:focus-within {
  border-color: var(--blue);
}

.segment {
  padding: 0 2px;
  font-variant-numeric: tabular-nums;
  text-align: end;
}

.segment.placeholder {
  color: var(--spectrum-gray-600);
}

.segment:focus {
  color: white;
  background: var(--blue);
  outline: none;
  border-radius: 2px;
}

----------------------------------------

TITLE: Removing Items from Tree Data Structure
DESCRIPTION: Examples showing how to remove single or multiple items from a tree data structure by their keys.

LANGUAGE: tsx
CODE:
// Remove an item
list.remove('Kangaroo');

// Remove multiple items
list.remove('Kangaroo', 'Snake');

----------------------------------------

TITLE: Implementing Custom Filtering in ComboBox
DESCRIPTION: Shows how to implement custom filtering logic by controlling the items prop and input value. Uses the startsWith filter function from useFilter to filter options as the user types.

LANGUAGE: tsx
CODE:
import {useFilter} from '@react-aria/i18n';

function Example() {
  let options = [
    {id: 1, email: 'fake@email.com'},
    {id: 2, email: 'anotherfake@email.com'},
    {id: 3, email: 'bob@email.com'},
    {id: 4, email: 'joe@email.com'},
    {id: 5, email: 'yourEmail@email.com'},
    {id: 6, email: 'valid@email.com'},
    {id: 7, email: 'spam@email.com'},
    {id: 8, email: 'newsletter@email.com'},
    {id: 9, email: 'subscribe@email.com'}
  ];

  let {startsWith} = useFilter({sensitivity: 'base'});
  let [filterValue, setFilterValue] = React.useState('');
  let filteredItems = React.useMemo(
    () => options.filter((item) => startsWith(item.email, filterValue)),
    [options, filterValue]
  );

  return (
    <MyComboBox
      label="To:"
      /*- begin highlight -*/
      items={filteredItems}
      inputValue={filterValue}
      onInputChange={setFilterValue}
      /*- end highlight -*/
      allowsCustomValue>
      {(item) => <ListBoxItem>{item.email}</ListBoxItem>}
    </MyComboBox>
  );
}

----------------------------------------

TITLE: Implementing Basic Tabs with React Aria Hooks in TypeScript
DESCRIPTION: A complete example demonstrating how to create a custom Tabs component using useTabList, useTab, and useTabPanel hooks from React Aria. This implementation follows accessibility best practices and includes the proper ARIA attributes for screen readers.

LANGUAGE: tsx
CODE:
import {Item} from '@react-stately/collections';
import {useTab, useTabList, useTabPanel} from '@react-aria/tabs';
import {useTabListState} from '@react-stately/tabs';

function Tabs(props) {
  let state = useTabListState(props);
  let ref = React.useRef(null);
  let {tabListProps} = useTabList(props, state, ref);
  return (
    <div className={`tabs ${props.orientation || ''}`}>
      <div {...tabListProps} ref={ref}>
        {[...state.collection].map((item) => (
          <Tab key={item.key} item={item} state={state} />
        ))}
      </div>
      <TabPanel key={state.selectedItem?.key} state={state} />
    </div>
  );
}

function Tab({item, state}) {
  let {key, rendered} = item;
  let ref = React.useRef(null);
  let {tabProps} = useTab({key}, state, ref);
  return (
    <div {...tabProps} ref={ref}>
      {rendered}
    </div>
  );
}

function TabPanel({state, ...props}) {
  let ref = React.useRef(null);
  let {tabPanelProps} = useTabPanel(props, state, ref);
  return (
    <div {...tabPanelProps} ref={ref}>
      {state.selectedItem?.props.children}
    </div>
  );
}

<Tabs aria-label="History of Ancient Rome">
  <Item key="FoR" title="Founding of Rome">Arma virumque cano, Troiae qui primus ab oris.</Item>
  <Item key="MaR" title="Monarchy and Republic">Senatus Populusque Romanus.</Item>
  <Item key="Emp" title="Empire">Alea jacta est.</Item>
</Tabs>

----------------------------------------

TITLE: Importing Components from React Spectrum docs
DESCRIPTION: Imports the BlogPostLayout, Hero, and Image components from the React Spectrum documentation package, and sets the default export to BlogPostLayout.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero, Image} from '@react-spectrum/docs';
export default BlogPostLayout;

import datepickerImage from 'url:../assets/datepicker-rtl.png';

----------------------------------------

TITLE: Building a Button Component with useButton Hook
DESCRIPTION: Complete example of building a simple button component using the useButton hook from React Aria, showing how to connect the hook with DOM elements.

LANGUAGE: tsx
CODE:
import {useButton} from '@react-aria/button';

function Button(props) {
  let ref = React.useRef(null);
  let {buttonProps, isPressed} = useButton(props, ref);

  return (
    <button
      ref={ref}
      {...buttonProps}
      style={{
        background: isPressed ? '#444' : '#666',
        color: 'white',
        padding: '6px 12px',
        borderRadius: 4,
        border: 'none'
      }}>
      {props.children}
    </button>
  );
}

<Button onPress={() => alert('Button pressed!')}>
  Press me
</Button>

----------------------------------------

TITLE: React Stately Documentation Header with Navigation Links
DESCRIPTION: Renders the React Stately section header with the library description and navigation links to getting started documentation and GitHub repository.

LANGUAGE: JSX
CODE:
<p className={clsx(typographyStyles['spectrum-Body2'], styles.homeLinks)}>
  <a href="getting-started.html" className={clsx(linkStyle['spectrum-Link'], styles.link)}>Get started</a>
  <span aria-hidden="true">•</span>
  <a href="https://github.com/adobe/react-spectrum" className={clsx(linkStyle['spectrum-Link'], styles.link)}>GitHub</a>
</p>

----------------------------------------

TITLE: Basic ActionGroup Implementation in React
DESCRIPTION: Shows a simple implementation of ActionGroup with text items and action handling. It demonstrates how to capture and display the selected action.

LANGUAGE: tsx
CODE:
function Example() {
  let [action, setAction] = React.useState(null);

  return (
    <>
      <ActionGroup onAction={setAction}>
        <Item key="add">Add</Item>
        <Item key="delete">Delete</Item>
        <Item key="edit">Edit</Item>
      </ActionGroup>
      <p>Action: {action}</p>
    </>
  );
}

----------------------------------------

TITLE: Basic ActionGroup Implementation in React
DESCRIPTION: Shows a simple implementation of ActionGroup with text items and action handling. It demonstrates how to capture and display the selected action.

LANGUAGE: tsx
CODE:
function Example() {
  let [action, setAction] = React.useState(null);

  return (
    <>
      <ActionGroup onAction={setAction}>
        <Item key="add">Add</Item>
        <Item key="delete">Delete</Item>
        <Item key="edit">Edit</Item>
      </ActionGroup>
      <p>Action: {action}</p>
    </>
  );
}

----------------------------------------

TITLE: Importing and Setting Up Layout Component for React Spectrum Docs
DESCRIPTION: Imports and exports the Layout component from React Spectrum docs to structure the documentation page.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Popover with Custom Offset
DESCRIPTION: Shows how to adjust a popover's position using the offset prop to move it farther from the trigger element.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <Button>Offset</Button>
  <MyPopover placement="top" offset={50}>
    Offset by an additional 50px.
  </MyPopover>
</DialogTrigger>

----------------------------------------

TITLE: ColorSwatchPicker with Compact Density
DESCRIPTION: Demonstrates how to set a compact density for the ColorSwatchPicker following Spectrum design guidelines.

LANGUAGE: tsx
CODE:
<ColorSwatchPicker density="compact">
  <ColorSwatch color="#A00" />
  <ColorSwatch color="#f80" />
  <ColorSwatch color="#080" />
  <ColorSwatch color="#08f" />
</ColorSwatchPicker>

----------------------------------------

TITLE: Inserting Items into Tree Data Structure
DESCRIPTION: Examples demonstrating how to insert items into a tree data structure using the insert method, with options to insert at root level or within parent nodes at specific positions.

LANGUAGE: tsx
CODE:
// Insert an item into the root, after 'People'
tree.insert(null, 1, {name: 'Plants'});

// Insert an item into the 'People' node, after 'David'
tree.insert('People', 1, {name: 'Judy'});

----------------------------------------

TITLE: Styling GridList with CSS
DESCRIPTION: CSS styling for the GridList component, including styling for states like focus, selected, disabled, and hover. Also includes styling for buttons within list items and handling of selected item groups.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-GridList {
  display: flex;
  flex-direction: column;
  gap: 2px;
  max-height: inherit;
  overflow: auto;
  padding: 4px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: var(--overlay-background);
  forced-color-adjust: none;
  outline: none;
  width: 250px;
  max-height: 300px;
  min-height: 100px;
  box-sizing: border-box;

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: -1px;
  }

  .react-aria-GridListItem {
    display: flex;
    align-items: center;
    gap: 0.571rem;
    min-height: 28px;
    padding: 0.286rem 0.286rem 0.286rem 0.571rem;
    border-radius: 6px;
    outline: none;
    cursor: default;
    color: var(--text-color);
    font-size: 1.072rem;
    position: relative;
    transform: translateZ(0);

    &[data-focus-visible] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -2px;
    }

    &[data-pressed] {
      background: var(--gray-100);
    }

    &[data-selected] {
      background: var(--highlight-background);
      color: var(--highlight-foreground);
      --focus-ring-color: var(--highlight-foreground);

      &[data-focus-visible] {
        outline-color: var(--highlight-foreground);
        outline-offset: -4px;
      }

      .react-aria-Button {
        color: var(--highlight-foreground);
        --highlight-hover: rgb(255 255 255 / 0.1);
        --highlight-pressed: rgb(255 255 255 / 0.2);
      }
    }

    &[data-disabled] {
      color: var(--text-color-disabled);
    }

    .react-aria-Button:not([slot]) {
      margin-left: auto;
    }

    .react-aria-Button {
      background: transparent;
      border: none;
      font-size: 1.2rem;
      line-height: 1.2em;
      padding: 0.286rem 0.429rem;
      transition: background 200ms;

      &[data-hovered] {
        background: var(--highlight-hover);
      }

      &[data-pressed] {
        background: var(--highlight-pressed);
        box-shadow: none;
      }
    }
  }

  /* join selected items if :has selector is supported */
  @supports selector(:has(.foo)) {
    gap: 0;

    .react-aria-GridListItem[data-selected]:has(+ [data-selected]),
    .react-aria-GridListItem[data-selected]:has(+ .react-aria-DropIndicator + [data-selected]) {
      border-end-start-radius: 0;
      border-end-end-radius: 0;
    }

    .react-aria-GridListItem[data-selected] + [data-selected],
    .react-aria-GridListItem[data-selected] + .react-aria-DropIndicator + [data-selected] {
      border-start-start-radius: 0;
      border-start-end-radius: 0;
    }
  }

  :where(.react-aria-GridListItem) .react-aria-Checkbox {
    --selected-color: var(--highlight-foreground);
    --selected-color-pressed: var(--highlight-foreground-pressed);
    --checkmark-color: var(--highlight-background);
    --background-color: var(--highlight-background);
  }
}

----------------------------------------

TITLE: Creating a Custom ListBox Wrapper Component
DESCRIPTION: Example of creating a wrapper component to customize properties of a ListBox component for advanced customization needs.

LANGUAGE: tsx
CODE:
function MyListBox(props) {
  return <ListBox {...props} className="my-listbox" />
}

----------------------------------------

TITLE: Basic SearchField Component Implementation
DESCRIPTION: A simple implementation of a SearchField component using useSearchField and useSearchFieldState hooks. The component renders a labeled input field with search functionality.

LANGUAGE: TypeScript
CODE:
function SearchField(props) {
  let {label} = props;
  let state = useSearchFieldState(props);
  let ref = React.useRef(null);
  let {labelProps, inputProps} = useSearchField(props, state, ref);

  return (
    <div style={{display: 'flex', flexDirection: 'column', width: 200}}>
      <label {...labelProps}>{label}</label>
      <input {...inputProps} ref={ref} />
    </div>
  );
}

<SearchField
  label="Search"
  onSubmit={text => alert(text)} />

----------------------------------------

TITLE: Importing and Exporting Blog Post Layout Components in React Spectrum
DESCRIPTION: Imports BlogPostLayout and Hero components from the React Spectrum docs package and exports BlogPostLayout as the default export for the file.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Customizing Drop Indicators with renderDropIndicator
DESCRIPTION: Example showing how to create a custom drop indicator using the renderDropIndicator function. This allows for custom DOM structure and CSS classes for the drop indicator component.

LANGUAGE: tsx
CODE:
import {DropIndicator} from 'react-aria-components';

function Example() {
  let { dragAndDropHooks } = useDragAndDrop({
    // ...
    renderDropIndicator(target) {
      return (
        <DropIndicator
          target={target}
          className={({isDropTarget}) => `my-drop-indicator ${isDropTarget ? 'active' : ''}`} />
      );
    }
  });

  // ...
}

----------------------------------------

TITLE: Using ColorSwatch with HSL Color Values in React
DESCRIPTION: This example shows how to use the ColorSwatch component with an HSL color value. It uses the parseColor function from @react-stately/color to convert an HSL string into a Color object.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-stately/color';

<ColorSwatch color={parseColor('hsl(35, 100%, 50%)')} />

----------------------------------------

TITLE: Rendering Highlights Component with Feature List
DESCRIPTION: Displays a list of key features and benefits of React Stately using the Highlights component, emphasizing its foundational nature, React Hooks implementation, cross-platform capabilities, and design agnosticism.

LANGUAGE: JSX
CODE:
<Highlights items={[
  {
    title: 'Foundational',
    description: 'React Stately provides the foundation and core logic for your component library. It handles state management for common components through an easy-to-use interface.',
  },
  {
    title: 'Powered by React Hooks',
    description: 'React Stately is implemented as a library of React Hooks, which allows you to adapt them to your needs through composition.',
  },
  {
    title: 'Cross-platform',
    description: 'React Stately only provides state management, with no assumptions about the DOM or other view systems.'
  },
  {
    title: 'Design agnostic',
    description: 'React Stately doesn't make any assumptions about your design. It provides state management that's intrinsic to the functionality of the component.'
  }
]} />

----------------------------------------

TITLE: Creating Custom Calendar Cell Component with TypeScript
DESCRIPTION: Shows how to create a wrapper component for CalendarCell that applies custom props like a className, enabling customization while maintaining core functionality.

LANGUAGE: tsx
CODE:
function MyCalendarCell(props) {
  return <CalendarCell {...props} className="my-item" />
}

----------------------------------------

TITLE: Tailwind CSS v3 Configuration for React Aria Components
DESCRIPTION: Configuration for Tailwind CSS v3 to work with React Aria Components by adding the plugin to the tailwind.config.js file. Includes a note about version compatibility.

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components')
  ]
};

----------------------------------------

TITLE: Importing BlogPostLayout Components in React
DESCRIPTION: Imports the BlogPostLayout and Hero components from @react-spectrum/docs and sets the default export to BlogPostLayout. This is used for rendering the blog post layout for the release notes page.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Tailwind CSS Configuration for React Aria Components v4
DESCRIPTION: CSS import configuration for Tailwind v4, importing the core Tailwind CSS and required plugins for React Aria Components and animations.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";
@plugin "tailwindcss-animate";

----------------------------------------

TITLE: Importing Layout component from React Spectrum docs
DESCRIPTION: Imports the Layout component from React Spectrum docs and sets it as the default export for the current file.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Adding Description Text to DateField Component
DESCRIPTION: Example showing how to add a description text to a DateField using the description slot for providing additional help text.

LANGUAGE: tsx
CODE:
<DateField granularity="hour">
  <Label>Appointment time</Label>
  <DateInput>
    {segment => <DateSegment segment={segment} />}
  </DateInput>
  <Text slot="description">Please select a weekday between 9 AM and 5 PM.</Text>
</DateField>

----------------------------------------

TITLE: Creating a Required TextField
DESCRIPTION: Example showing how to mark a TextField as required using the isRequired prop, which adds the appropriate ARIA attributes for accessibility.

LANGUAGE: TSX
CODE:
<TextField label="Email" isRequired />

----------------------------------------

TITLE: Listing Released React Spectrum Packages with Version Numbers
DESCRIPTION: A comprehensive list of all React Spectrum packages that have been released, including their version numbers. This includes packages from @adobe/react-spectrum, @internationalized, @react-aria, @react-spectrum, @react-stately, @react-types, and @spectrum-icons namespaces.

LANGUAGE: markdown
CODE:
```
- @adobe/react-spectrum@3.26.0
- @internationalized/date@3.2.0
- @internationalized/string-compiler@3.2.0
- @react-aria/accordion@3.0.0-alpha.17
- @react-aria/actiongroup@3.5.2
- @react-aria/aria-modal-polyfill@3.7.1
- @react-aria/autocomplete@3.0.0-alpha.16
- @react-aria/breadcrumbs@3.5.1
- @react-aria/button@3.7.1
- @react-aria/calendar@3.2.0
- @react-aria/checkbox@3.9.0
- @react-aria/color@3.0.0-beta.20
- @react-aria/combobox@3.6.0
- @react-aria/datepicker@3.4.0
- @react-aria/dialog@3.5.1
- @react-aria/dnd@3.2.0
- @react-aria/focus@3.12.0
- @react-aria/grid@3.7.0
- @react-aria/gridlist@3.3.0
- @react-aria/i18n@3.7.1
- @react-aria/interactions@3.15.0
- @react-aria/label@3.5.1
- @react-aria/landmark@3.0.0-beta.0
- @react-aria/link@3.5.0
- @react-aria/listbox@3.9.0
- @react-aria/live-announcer@3.3.0
- @react-aria/menu@3.9.0
- @react-aria/meter@3.4.1
- @react-aria/numberfield@3.5.0
- @react-aria/overlays@3.14.0
- @react-aria/progress@3.4.1
- @react-aria/radio@3.6.0
- @react-aria/searchfield@3.5.1
- @react-aria/select@3.10.0
- @react-aria/selection@3.14.0
- @react-aria/separator@3.3.1
- @react-aria/slider@3.4.0
- @react-aria/spinbutton@3.4.0
- @react-aria/ssr@3.6.0
- @react-aria/switch@3.5.0
- @react-aria/table@3.9.0
- @react-aria/tabs@3.5.0
- @react-aria/tag@3.0.0-rc.0
- @react-aria/textfield@3.9.1
- @react-aria/toast@3.0.0-beta.0
- @react-aria/toggle@3.6.0
- @react-aria/tooltip@3.5.0
- @react-aria/utils@3.16.0
- @react-aria/virtualizer@3.8.0
- @react-aria/visually-hidden@3.8.0
- @react-spectrum/accordion@3.0.0-alpha.19
- @react-spectrum/actionbar@3.0.0-rc.0
- @react-spectrum/actiongroup@3.8.2
- @react-spectrum/autocomplete@3.0.0-alpha.17
- @react-spectrum/avatar@3.0.0
- @react-spectrum/badge@3.1.1
- @react-spectrum/breadcrumbs@3.7.2
- @react-spectrum/button@3.12.1
- @react-spectrum/buttongroup@3.6.1
- @react-spectrum/calendar@3.2.1
- @react-spectrum/card@3.0.0-alpha.18
- @react-spectrum/checkbox@3.7.1
- @react-spectrum/color@3.0.0-beta.21
- @react-spectrum/combobox@3.8.2
- @react-spectrum/contextualhelp@3.5.1
- @react-spectrum/datepicker@3.5.0
- @react-spectrum/dialog@3.7.1
- @react-spectrum/divider@3.5.1
- @react-spectrum/dnd@3.1.1
- @react-spectrum/form@3.6.1
- @react-spectrum/icon@3.7.1
- @react-spectrum/illustratedmessage@3.4.1
- @react-spectrum/image@3.4.1
- @react-spectrum/label@3.12.0
- @react-spectrum/labeledvalue@3.1.1
- @react-spectrum/layout@3.5.1
- @react-spectrum/link@3.5.1
- @react-spectrum/list@3.4.0
- @react-spectrum/listbox@3.10.0
- @react-spectrum/menu@3.11.0
- @react-spectrum/meter@3.4.1
- @react-spectrum/numberfield@3.6.1
- @react-spectrum/overlays@5.1.0
- @react-spectrum/picker@3.10.2
- @react-spectrum/progress@3.5.0
- @react-spectrum/provider@3.7.1
- @react-spectrum/radio@3.5.1
- @react-spectrum/searchfield@3.7.1
- @react-spectrum/slider@3.5.1
- @react-spectrum/statuslight@3.5.1
- @react-spectrum/switch@3.4.1
- @react-spectrum/table@3.8.0
- @react-spectrum/tabs@3.5.2
- @react-spectrum/tag@3.0.0-rc.0
- @react-spectrum/text@3.4.1
- @react-spectrum/textfield@3.10.1
- @react-spectrum/theme-dark@3.5.1
- @react-spectrum/theme-default@3.5.1
- @react-spectrum/theme-express@3.0.0-alpha.3
- @react-spectrum/theme-light@3.4.1
- @react-spectrum/toast@3.0.0-beta.0
- @react-spectrum/tooltip@3.5.0
- @react-spectrum/utils@3.9.1
- @react-spectrum/view@3.5.1
- @react-spectrum/well@3.4.1
- @react-stately/calendar@3.2.0
- @react-stately/checkbox@3.4.1
- @react-stately/collections@3.7.0
- @react-stately/color@3.3.1
- @react-stately/combobox@3.5.0
- @react-stately/data@3.9.1
- @react-stately/datepicker@3.4.0
- @react-stately/dnd@3.2.0
- @react-stately/grid@3.6.0
- @react-stately/layout@3.12.0
- @react-stately/list@3.8.0
- @react-stately/menu@3.5.1
- @react-stately/numberfield@3.4.1
- @react-stately/overlays@3.5.1
- @react-stately/radio@3.8.0
- @react-stately/searchfield@3.4.1
- @react-stately/select@3.5.0
- @react-stately/selection@3.13.0
- @react-stately/slider@3.3.1
- @react-stately/table@3.9.0
- @react-stately/tabs@3.4.0
- @react-stately/tag@3.0.0-rc.0
- @react-stately/toast@3.0.0-beta.0
- @react-stately/toggle@3.5.1
- @react-stately/tooltip@3.4.0
- @react-stately/tree@3.6.0
- @react-stately/virtualizer@3.5.1
- @react-types/accordion@3.0.0-alpha.13
- @react-types/actionbar@3.0.0-rc.0
- @react-types/actiongroup@3.4.1
- @react-types/autocomplete@3.0.0-alpha.13
- @react-types/avatar@3.0.0-beta.1
- @react-types/badge@3.1.1
- @react-types/breadcrumbs@3.5.1
- @react-types/button@3.7.2
- @react-types/buttongroup@3.3.1
- @react-types/calendar@3.2.0
- @react-types/card@3.0.0-alpha.14
- @react-types/checkbox@3.4.3
- @react-types/color@3.0.0-beta.16
- @react-types/combobox@3.6.1
- @react-types/contextualhelp@3.2.1
- @react-types/datepicker@3.3.0
- @react-types/dialog@3.5.1
- @react-types/divider@3.3.1
- @react-types/form@3.5.0
- @react-types/grid@3.1.7
- @react-types/illustratedmessage@3.3.1
- @react-types/image@3.3.1
- @react-types/label@3.7.3
- @react-types/layout@3.3.7
- @react-types/link@3.4.1
- @react-types/list@3.2.2
- @react-types/listbox@3.4.1
- @react-types/menu@3.9.0
- @react-types/meter@3.3.1
- @react-types/numberfield@3.4.1
- @react-types/overlays@3.7.1
- @react-types/progress@3.4.0
- @react-types/provider@3.6.1
- @react-types/radio@3.4.1
- @react-types/searchfield@3.4.1
- @react-types/select@3.8.0
- @react-types/shared@3.18.0
- @react-types/slider@3.5.0
- @react-types/statuslight@3.3.1
- @react-types/switch@3.3.1
- @react-types/table@3.6.0
- @react-types/tabs@3.2.1
- @react-types/tag@3.0.0-rc.0
- @react-types/text@3.3.1
- @react-types/textfield@3.7.1
- @react-types/tooltip@3.4.0
- @react-types/view@3.4.1
- @react-types/well@3.3.1
- @spectrum-icons/color@3.5.1
- @spectrum-icons/express@3.0.0-alpha.5
- @spectrum-icons/illustrations@3.6.1
- @spectrum-icons/ui@3.5.1
- @spectrum-icons/workflow@4.2.0
- react-aria@3.24.0
- react-aria-components@1.0.0-alpha.1
- react-stately@3.22.0
```

----------------------------------------

TITLE: Styling DateRangePicker Popover to Match Trigger Width
DESCRIPTION: CSS example showing how to make a popover in a DateRangePicker match the width of the trigger using CSS custom properties provided by the component.

LANGUAGE: css
CODE:
.react-aria-Popover[data-trigger=DateRangePicker] {
  width: var(--trigger-width);
}

----------------------------------------

TITLE: Importing and Exporting Blog Post Layout in JSX
DESCRIPTION: Imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and exports the BlogPostLayout as the default export. This sets up the layout structure for the release notes blog post.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Configuring Menu Trigger Behavior in ComboBox
DESCRIPTION: Demonstrates how to configure when the ComboBox menu opens by setting the menuTrigger prop to 'focus' to open the menu when the user focuses on the input.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal" menuTrigger="focus">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Hidden CSS Imports for Styling DisclosureGroup
DESCRIPTION: CSS imports to style the DisclosureGroup component, including a theme and specific styles for Button and Disclosure components using CSS layers.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";
@import './Button.mdx' layer(button);
@import './Disclosure.mdx' layer(disclosure);

----------------------------------------

TITLE: CSS for Disabled ToggleButton State
DESCRIPTION: CSS styling specifically for the disabled state of a ToggleButton component.

LANGUAGE: css
CODE:
.react-aria-ToggleButton {
  &[data-disabled] {
    border-color: var(--border-color-disabled);
    background: var(--button-background);
    color: var(--text-color-disabled);
  }
}

----------------------------------------

TITLE: Integrating DateField with HTML Forms
DESCRIPTION: This example demonstrates how to use the name prop to integrate a DateField component with HTML forms, which will submit the date value as an ISO 8601 formatted string.

LANGUAGE: tsx
CODE:
<MyDateField label="Birth date" name="birthday" />

----------------------------------------

TITLE: TextField with Custom Width
DESCRIPTION: Shows how to customize the width of a TextField component using size tokens and maximum width constraints.

LANGUAGE: tsx
CODE:
<TextField label="Email" width="size-3600" maxWidth="100%" />

----------------------------------------

TITLE: Implementing Custom Label Component with React Aria Components Context
DESCRIPTION: Creates a custom label component that consumes the LabelContext from React Aria Components, making it compatible with RadioGroup. The useContextProps hook merges local props and ref with those provided via context.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Basic Form Component Usage Example in React Aria
DESCRIPTION: A basic example of using the Form component with a TextField and Button for submission.

LANGUAGE: tsx
CODE:
import {Form, TextField, Label, Input, FieldError, Button} from 'react-aria-components';

<Form>
  <TextField name="email" type="email" isRequired>
    <Label>Email</Label>
    <Input />
    <FieldError />
  </TextField>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: CSS Styling for Table Sort Indicator
DESCRIPTION: CSS code for styling the sort indicator in a sortable table column. Includes styles for showing/hiding the indicator based on sort state.

LANGUAGE: css
CODE:
.react-aria-Column {
  .sort-indicator {
    padding: 0 2px;
  }

  &:not([data-sort-direction]) .sort-indicator {
    visibility: hidden;
  }
}

----------------------------------------

TITLE: Importing and Exporting Blog Post Layout in React Spectrum Documentation
DESCRIPTION: Imports the BlogPostLayout and Hero components from React Spectrum docs and exports the BlogPostLayout as default. This is the setup for the blog post containing the release notes.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Implementing Dynamic Tabs in React Spectrum
DESCRIPTION: This example demonstrates how to create a Tabs component with dynamic items, where users can add and remove tabs. The component renders tabs based on a state array, with each tab having an id, title, and content.

LANGUAGE: tsx
CODE:
function Example() {
  let [tabs, setTabs] = React.useState([
    {id: 1, title: 'Tab 1', content: 'Tab body 1'},
    {id: 2, title: 'Tab 2', content: 'Tab body 2'},
    {id: 3, title: 'Tab 3', content: 'Tab body 3'}
  ]);

  let addTab = () => {
    setTabs(tabs => [
      ...tabs,
      {
        id: tabs.length + 1,
        title: `Tab ${tabs.length + 1}`,
        content: `Tab Body ${tabs.length + 1}`
      }
    ]);
  };

  let removeTab = () => {
    if (tabs.length > 1) {
      setTabs(tabs => tabs.slice(0, -1));
    }
  };

  return (
    <>
      <button onClick={addTab}>Add tab</button>
      <button onClick={removeTab}>Remove tab</button>
      <Tabs aria-label="Dynamic tabs" items={tabs}>
        {item => <Item title={item.title}>{item.content}</Item>}
      </Tabs>
    </>
  );
}

----------------------------------------

TITLE: Custom Element Button with useButton in React
DESCRIPTION: Demonstrates creating a button using a non-button element (span) with useButton. The hook applies necessary ARIA attributes and properly handles the pressed state for styling based on user interaction.

LANGUAGE: tsx
CODE:
function Button(props) {
  let {children} = props;
  let ref = useRef<HTMLButtonElement | null>(null);
  let {buttonProps, isPressed} = useButton({
    ...props,
    elementType: 'span'
  }, ref);

  return (
    <span
      {...buttonProps}
      style={{
        background: isPressed ? 'darkgreen' : 'green',
        color: 'white',
        padding: 10,
        cursor: 'pointer',
        userSelect: 'none',
        WebkitUserSelect: 'none'
      }}
      ref={ref}>
      {children}
    </span>
  );
}

<Button onPress={() => alert('Button pressed!')}>Test</Button>

----------------------------------------

TITLE: New Icons Added in JavaScript
DESCRIPTION: Lists the new icons added in the workflow icons package update. Two new icons were introduced: CircleFilled and Invite.

LANGUAGE: javascript
CODE:
CircleFilled
Invite

----------------------------------------

TITLE: ActionBar with TableView and Event Handling
DESCRIPTION: Example demonstrating the ActionBar with TableView, showing how to handle selection clearing and action events. It includes custom data rows and column configurations.

LANGUAGE: tsx
CODE:
import type {Selection} from '@adobe/react-spectrum';

function ActionBarActions(props) {
  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));
  let rows = [
    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},
    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},
    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},
    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}
  ];

  return (
    <ActionBarContainer height="size-5000">
      <TableView aria-label="Table with action bar and controlled selection" selectionMode="multiple" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>
        <TableHeader>
          <Column key="name">Name</Column>
          <Column key="type">Type</Column>
          <Column key="level" align="end">Level</Column>
        </TableHeader>
        <TableBody items={rows}>
          {item => (
            <Row>
              {columnKey => <Cell>{item[columnKey]}</Cell>}
            </Row>
          )}
        </TableBody>
      </TableView>
      <ActionBar
        isEmphasized
        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}
        /*- begin highlight -*/
        onClearSelection={() => {
          setSelectedKeys(new Set());
        }}
        onAction={key => alert(`Performing ${key} action...`)}
        /*- end highlight -*/>
        <Item key="edit">
          <Edit />
          <Text>Edit</Text>
        </Item>
        <Item key="delete">
          <Delete />
          <Text>Delete</Text>
        </Item>
      </ActionBar>
    </ActionBarContainer>
  );
}

----------------------------------------

TITLE: CSS Styling for DateRangePickerClearButton
DESCRIPTION: CSS styles for the clear button component, including size, appearance, hover and focus states, and spacing.

LANGUAGE: css
CODE:
.clear-button {
  width: 1.143rem;
  height: 1.143rem;
  border-radius: 1.143rem;
  font-size: 0.857rem;
  line-height: 0.857rem;
  vertical-align: middle;
  text-align: center;
  background: gray;
  color: white;
  border: none;
  padding: 0;
  outline: none;

  &[data-pressed] {
    background: dimgray;
  }

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: 2px;
  }

  + .react-aria-Button {
    margin-left: 4px;
  }
}

----------------------------------------

TITLE: Importing Layout Component in React Spectrum Documentation
DESCRIPTION: Imports the Layout component from the React Spectrum documentation package and exports it as the default component for page layout.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Creating a Reusable ProgressBar Component
DESCRIPTION: A reusable wrapper for the ProgressBar component that encapsulates the DOM structure, styling, and logic. It accepts a label prop and other ProgressBar props to be reused consistently throughout an application.

LANGUAGE: tsx
CODE:
import type {ProgressBarProps} from 'react-aria-components';

interface MyProgressBarProps extends ProgressBarProps {
  label?: string
}

function MyProgressBar({label, ...props}: MyProgressBarProps) {
  return (
    <ProgressBar {...props}>
      {({percentage, valueText}) => <>
        <Label>{label}</Label>
        <span className="value">{valueText}</span>
        <div className="bar">
          <div className="fill" style={{width: percentage + '%'}} />
        </div>
      </>}
    </ProgressBar>
  );
}

<MyProgressBar label="Loading…" value={80} />

----------------------------------------

TITLE: TextArea with Custom Label Alignment and Position in React Spectrum
DESCRIPTION: Shows how to customize the position and alignment of the TextArea label using labelPosition and labelAlign props.

LANGUAGE: tsx
CODE:
<TextArea label="Search" labelPosition="side" labelAlign="end" />

----------------------------------------

TITLE: CSS Styling for Vertical Grid ListBox Layout
DESCRIPTION: CSS for styling a vertical grid layout with two columns in a ListBox component.

LANGUAGE: css
CODE:
.react-aria-ListBox[data-layout=grid] {
  display: grid;
  grid-template-columns: 1fr 1fr;
  scrollbar-gutter: stable;
}

----------------------------------------

TITLE: Styling FieldGroup Component
DESCRIPTION: CSS for styling a FieldGroup component with proper padding and error message styling.

LANGUAGE: css
CODE:
fieldset {
  padding: 1.5em;
  width: fit-content;
}

.invalid {
  color: var(--invalid-color);
  margin-top: 1em;
  display: block;
}

----------------------------------------

TITLE: Importing and Exporting React Spectrum Documentation Components in JSX
DESCRIPTION: Imports BlogPostLayout and Hero components from the React Spectrum docs package and exports BlogPostLayout as the default export. This is the basic setup for a React Spectrum blog post page.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Basic Picker Example with Static Options in React Spectrum
DESCRIPTION: Demonstrates a simple Picker component with static options. Each option is represented by an Item component with a unique key and display text.

LANGUAGE: tsx
CODE:
<Picker label="Choose frequency">
  <Item key="rarely">Rarely</Item>
  <Item key="sometimes">Sometimes</Item>
  <Item key="always">Always</Item>
</Picker>

----------------------------------------

TITLE: React Spectrum Released Packages Version List
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem with their current version numbers. The list includes packages from multiple namespaces including @adobe/react-spectrum, @internationalized, @react-aria, @react-spectrum, @react-stately, @react-types, and @spectrum-icons.

LANGUAGE: markdown
CODE:
 - @adobe/react-spectrum@3.31.0
 - @internationalized/number@3.3.0
 - @react-aria/accordion@3.0.0-alpha.22
 - @react-aria/actiongroup@3.6.3
 - @react-aria/aria-modal-polyfill@3.7.6
 - @react-aria/autocomplete@3.0.0-alpha.21
 - @react-aria/breadcrumbs@3.5.6
 - @react-aria/button@3.8.3
 - @react-aria/calendar@3.5.1
 - @react-aria/checkbox@3.11.1
 - @react-aria/color@3.0.0-beta.25
 - @react-aria/combobox@3.7.0
 - @react-aria/datepicker@3.8.0
 - @react-aria/dialog@3.5.6
 - @react-aria/dnd@3.4.2
 - @react-aria/focus@3.14.2
 - @react-aria/grid@3.8.3
 - @react-aria/gridlist@3.7.0
 - @react-aria/i18n@3.8.3
 - @react-aria/interactions@3.19.0
 - @react-aria/label@3.7.1
 - @react-aria/landmark@3.0.0-beta.5
 - @react-aria/link@3.6.0
 - @react-aria/listbox@3.11.0
 - @react-aria/menu@3.11.0
 - @react-aria/meter@3.4.6
 - @react-aria/numberfield@3.9.0
 - @react-aria/overlays@3.18.0
 - @react-aria/progress@3.4.6
 - @react-aria/radio@3.8.1
 - @react-aria/searchfield@3.5.6
 - @react-aria/select@3.13.0
 - @react-aria/selection@3.17.0
 - @react-aria/separator@3.3.6
 - @react-aria/slider@3.7.1
 - @react-aria/spinbutton@3.5.3
 - @react-aria/switch@3.5.5
 - @react-aria/table@3.13.0
 - @react-aria/tabs@3.8.0
 - @react-aria/tag@3.2.0
 - @react-aria/textfield@3.12.1
 - @react-aria/toast@3.0.0-beta.5
 - @react-aria/toggle@3.8.1
 - @react-aria/tooltip@3.6.3
 - @react-aria/utils@3.21.0
 - @react-aria/virtualizer@3.9.3
 - @react-aria/visually-hidden@3.8.5
 - @react-spectrum/accordion@3.0.0-alpha.24
 - @react-spectrum/actionbar@3.3.0
 - @react-spectrum/actiongroup@3.9.3
 - @react-spectrum/autocomplete@3.0.0-alpha.22
 - @react-spectrum/avatar@3.0.5
 - @react-spectrum/badge@3.1.6
 - @react-spectrum/breadcrumbs@3.9.0
 - @react-spectrum/button@3.14.0
 - @react-spectrum/buttongroup@3.6.6
 - @react-spectrum/calendar@3.4.1
 - @react-spectrum/card@3.0.0-alpha.23
 - @react-spectrum/checkbox@3.8.1
 - @react-spectrum/color@3.0.0-beta.26
 - @react-spectrum/combobox@3.10.2
 - @react-spectrum/contextualhelp@3.6.3
 - @react-spectrum/datepicker@3.8.0
 - @react-spectrum/dialog@3.8.3
 - @react-spectrum/divider@3.5.6
 - @react-spectrum/dnd@3.3.3
 - @react-spectrum/form@3.6.6
 - @react-spectrum/icon@3.7.6
 - @react-spectrum/illustratedmessage@3.4.6
 - @react-spectrum/image@3.4.6
 - @react-spectrum/inlinealert@3.1.1
 - @react-spectrum/label@3.15.0
 - @react-spectrum/labeledvalue@3.1.6
 - @react-spectrum/layout@3.5.6
 - @react-spectrum/link@3.6.0
 - @react-spectrum/list@3.7.0
 - @react-spectrum/listbox@3.12.0
 - @react-spectrum/menu@3.15.0
 - @react-spectrum/meter@3.4.6
 - @react-spectrum/numberfield@3.7.2
 - @react-spectrum/overlays@5.5.0
 - @react-spectrum/picker@3.12.1
 - @react-spectrum/progress@3.7.0
 - @react-spectrum/provider@3.9.0
 - @react-spectrum/radio@3.6.1
 - @react-spectrum/searchfield@3.7.6
 - @react-spectrum/slider@3.6.2
 - @react-spectrum/statuslight@3.5.6
 - @react-spectrum/switch@3.4.6
 - @react-spectrum/table@3.12.0
 - @react-spectrum/tabs@3.8.0
 - @react-spectrum/tag@3.1.3
 - @react-spectrum/text@3.4.6
 - @react-spectrum/textfield@3.10.6
 - @react-spectrum/theme-dark@3.5.6
 - @react-spectrum/theme-default@3.5.6
 - @react-spectrum/theme-express@3.0.0-alpha.8
 - @react-spectrum/theme-light@3.4.6
 - @react-spectrum/toast@3.0.0-beta.5
 - @react-spectrum/tooltip@3.6.0
 - @react-spectrum/utils@3.11.0
 - @react-spectrum/view@3.6.3
 - @react-spectrum/well@3.4.6
 - @react-stately/calendar@3.4.1
 - @react-stately/checkbox@3.5.1
 - @react-stately/collections@3.10.2
 - @react-stately/color@3.4.3
 - @react-stately/combobox@3.7.1
 - @react-stately/data@3.10.3
 - @react-stately/datepicker@3.8.0
 - @react-stately/dnd@3.2.5
 - @react-stately/grid@3.8.2
 - @react-stately/layout@3.13.2
 - @react-stately/list@3.10.0
 - @react-stately/menu@3.5.6
 - @react-stately/numberfield@3.6.2
 - @react-stately/overlays@3.6.3
 - @react-stately/radio@3.9.1
 - @react-stately/searchfield@3.4.6
 - @react-stately/select@3.5.5
 - @react-stately/selection@3.14.0
 - @react-stately/slider@3.4.3
 - @react-stately/table@3.11.2
 - @react-stately/tabs@3.6.1
 - @react-stately/toggle@3.6.3
 - @react-stately/tooltip@3.4.5
 - @react-stately/tree@3.7.3
 - @react-stately/utils@3.8.0
 - @react-stately/virtualizer@3.6.3
 - @react-types/accordion@3.0.0-alpha.17
 - @react-types/actionbar@3.1.3
 - @react-types/actiongroup@3.4.5
 - @react-types/autocomplete@3.0.0-alpha.17
 - @react-types/avatar@3.0.3
 - @react-types/badge@3.1.5
 - @react-types/breadcrumbs@3.7.0
 - @react-types/button@3.9.0
 - @react-types/buttongroup@3.3.5
 - @react-types/calendar@3.4.1
 - @react-types/card@3.0.0-alpha.19
 - @react-types/checkbox@3.5.2
 - @react-types/color@3.0.0-beta.20
 - @react-types/combobox@3.8.1
 - @react-types/contextualhelp@3.2.6
 - @react-types/datepicker@3.6.1
 - @react-types/dialog@3.5.6
 - @react-types/divider@3.3.5
 - @react-types/form@3.5.4
 - @react-types/grid@3.2.2
 - @react-types/illustratedmessage@3.3.5
 - @react-types/image@3.3.5
 - @react-types/label@3.8.1
 - @react-types/layout@3.3.11
 - @react-types/link@3.5.0
 - @react-types/list@3.2.7
 - @react-types/listbox@3.4.5
 - @react-types/menu@3.9.5
 - @react-types/meter@3.3.5
 - @react-types/numberfield@3.6.1
 - @react-types/overlays@3.8.3
 - @react-types/progress@3.5.0
 - @react-types/provider@3.7.0
 - @react-types/radio@3.5.2
 - @react-types/searchfield@3.5.1
 - @react-types/select@3.8.4
 - @react-types/shared@3.21.0
 - @react-types/slider@3.6.2
 - @react-types/statuslight@3.3.5
 - @react-types/switch@3.4.2
 - @react-types/table@3.9.0
 - @react-types/tabs@3.3.3
 - @react-types/text@3.3.5
 - @react-types/textfield@3.8.1
 - @react-types/tooltip@3.4.5
 - @react-types/view@3.4.5
 - @react-types/well@3.3.5
 - @spectrum-icons/color@3.5.6
 - @spectrum-icons/express@3.0.0-alpha.10
 - @spectrum-icons/illustrations@3.6.6
 - @spectrum-icons/ui@3.6.0
 - @spectrum-icons/workflow@4.2.5
 - react-aria@3.29.0
 - react-aria-components@1.0.0-beta.1
 - react-stately@3.27.0
 - tailwindcss-react-aria-components@1.0.0-beta.1

----------------------------------------

TITLE: Dynamic Items in ActionMenu with Collection Components API
DESCRIPTION: Example demonstrating how to use dynamic collections with ActionMenu by providing an array of items that are mapped to Item components.

LANGUAGE: tsx
CODE:
function Example() {
  let actionMenuItems = [
    {name: 'Cut'},
    {name: 'Copy'},
    {name: 'Paste'},
    {name: 'Select All'}
  ];

  return (
    <ActionMenu items={actionMenuItems}>
      {item => <Item key={item.name}>{item.name}</Item>}
    </ActionMenu>
  );
}

----------------------------------------

TITLE: CSS Styling for FieldGroup Component
DESCRIPTION: CSS styles for the FieldGroup component example, including fieldset padding and error message styling.

LANGUAGE: css
CODE:
fieldset {
  padding: 1.5em;
  width: fit-content;
}

.invalid {
  color: var(--invalid-color);
  margin-top: 1em;
  display: block;
}

----------------------------------------

TITLE: Tailwind CSS Configuration for Animations and React Aria Components
DESCRIPTION: CSS import example for Tailwind v4, showing how to include the tailwindcss-react-aria-components and tailwindcss-animate plugins for animation effects and React Aria Components styling.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";
@plugin "tailwindcss-animate";

----------------------------------------

TITLE: Implementing Focus Visibility Management with useFocusVisible in React
DESCRIPTION: This example demonstrates how to use the useFocusVisible hook to track focus visibility state based on user interaction. The component displays the current focus visible state and includes text inputs that respond to the focus management logic.

LANGUAGE: tsx
CODE:
import {useFocusVisible} from '@react-aria/interactions';

function Example() {
  let {isFocusVisible} = useFocusVisible({isTextInput: true});

  return (
    <>
      <div>Focus visible: {String(isFocusVisible)}</div>
      <label style={{display: 'block'}}>
        First Name: <input />
      </label>
      <label style={{display: 'block'}}>
        Last Name: <input />
      </label>
    </>
  );
}

----------------------------------------

TITLE: Configuring Tooltip Placement in React Spectrum
DESCRIPTION: Example demonstrating how to control tooltip placement relative to its trigger using the placement prop, which adapts to reading direction.

LANGUAGE: tsx
CODE:
<TooltipTrigger placement="end">
  <ActionButton aria-label="Foo">Placement</ActionButton>
  <Tooltip>In left-to-right, this is on the right. In right-to-left, this is on the left.</Tooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Creating Custom Radio Description Component with Context
DESCRIPTION: Advanced example demonstrating how to create a custom RadioDescription component that associates descriptions with radio buttons using React context and aria-describedby.

LANGUAGE: tsx
CODE:
import {RadioContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface RadioDescriptionProps {
  children?: React.ReactNode,
  description?: string
}

function RadioDescription({children, description}: RadioDescriptionProps) {
  let descriptionId = useId();
  return (
    <div>
      <RadioContext.Provider value={{'aria-describedby': descriptionId}}>
        {children}
      </RadioContext.Provider>
      <small id={descriptionId}>{description}</small>
    </div>
  );
}

<MyRadioGroup label="Show scrollbars" defaultValue="automatic">
  <RadioDescription description="Scrollbars will always be visible when using a mouse, and only while scrolling when using a trackpad.">
    <Radio value="automatic">Automatic</Radio>
  </RadioDescription>
  <RadioDescription description="Scrollbars will appear only while you are scrolling.">
    <Radio value="scrolling">While scrolling</Radio>
  </RadioDescription>
  <RadioDescription description="Scrollbars will always be visible.">
    <Radio value="always">Always</Radio>
  </RadioDescription>
</MyRadioGroup>

----------------------------------------

TITLE: Handling File Drops in React Spectrum ListBox
DESCRIPTION: This example demonstrates accepting image file drops with specific mime types (JPEG and PNG). It filters file drop items, creates object URLs from them, and renders the images in the list.

LANGUAGE: tsx
CODE:
import {isFileDropItem} from 'react-aria-components';

interface ImageItem {
  id: number,
  url: string,
  name: string
}

function Example() {
  let [items, setItems] = React.useState<ImageItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    acceptedDragTypes: ['image/jpeg', 'image/png'],
    async onRootDrop(e) {
      let items = await Promise.all(
        e.items.filter(isFileDropItem).map(async item => ({
          id: Math.random(),
          url: URL.createObjectURL(await item.getFile()),
          name: item.name
        }))
      );
      setItems(items);
    }
  });

  return (
    <ListBox aria-label="Droppable list" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => "Drop items here"}>
      {item => (
        <ListBoxItem textValue={item.name}>
          <div className="image-item">
            <img src={item.url} />
            <span>{item.name}</span>
          </div>
        </ListBoxItem>
      )}
    </ListBox>
  );
}

----------------------------------------

TITLE: Integrating ColorArea with HTML Forms in React
DESCRIPTION: This example demonstrates how to integrate the ColorArea component with HTML forms using xName and yName props. The values will be submitted as numbers between the minimum and maximum value for the corresponding channels.

LANGUAGE: tsx
CODE:
<ColorArea xName="red" yName="green" />

----------------------------------------

TITLE: Importing and Exporting Blog Post Layout Components in React
DESCRIPTION: A simple JSX snippet that imports the BlogPostLayout and Hero components from @react-spectrum/docs package and exports the BlogPostLayout as the default export. This is part of the blog post template structure.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: TimeField with Contextual Help
DESCRIPTION: Example showing how to add contextual help to a TimeField using the ContextualHelp component to provide additional information about the field.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<TimeField
  label="Appointment time"
  contextualHelp={
    <ContextualHelp variant="info">
      <Heading>Appointment changes</Heading>
      <Content>Your appointment time cannot be changed once it is scheduled.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: SearchAutocomplete with Focus Menu Trigger
DESCRIPTION: Example showing how to configure the SearchAutocomplete with a different menu trigger behavior. This example uses the 'focus' trigger, which opens the menu when the input is focused rather than when typing begins.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Search Animals" menuTrigger="focus">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</SearchAutocomplete>

----------------------------------------

TITLE: Importing and Using SubmenuAnimation Component in React
DESCRIPTION: A simple code snippet demonstrating how to import and render a SubmenuAnimation component, which likely visualizes the submenu interaction behavior discussed in the article.

LANGUAGE: tsx
CODE:
import {SubmenuAnimation} from './SubmenuAnimation';
<SubmenuAnimation />

----------------------------------------

TITLE: Styling Grid Layout for Directory Contents Display
DESCRIPTION: CSS styling for the directory paste example. It creates a responsive grid layout for files and folders with appropriate spacing, icon alignment, and text overflow handling.

LANGUAGE: css
CODE:
.grid {
  display: block;
  width: auto;
  height: auto;
  min-height: 80px;
}

.grid ul {
  display: grid;
  grid-template-columns: repeat(auto-fit, 100px);
  list-style: none;
  margin: 0;
  padding: 0;
  gap: 20px;
}

.grid li {
  display: flex;
  align-items: center;
  gap: 8px;
}

.grid li svg {
  flex: 0 0 auto;
}

.grid li span {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

----------------------------------------

TITLE: Comparing Time Objects in TypeScript
DESCRIPTION: Shows how to compare Time objects using the compare method to determine which time is before or after another.

LANGUAGE: tsx
CODE:
let a = new Time(9, 45);
let b = new Time(12, 20);

a.compare(b) < 0; // true
b.compare(a) > 0; // true

----------------------------------------

TITLE: DateRangePicker with Local Time Zone Conversion
DESCRIPTION: Example of using DateRangePicker with dates converted to the user's local time zone using parseAbsoluteToLocal.

LANGUAGE: tsx
CODE:
import {parseAbsoluteToLocal} from '@internationalized/date';

<DateRangePicker
  label="Date range"
  defaultValue={{
    start: parseAbsoluteToLocal('2021-11-07T07:45:00Z'),
    end: parseAbsoluteToLocal('2021-11-08T14:25:00Z')
  }}
/>

----------------------------------------

TITLE: Implementing Zero-Delay Tooltip in React Spectrum
DESCRIPTION: Example showing how to configure a tooltip to appear immediately on hover with no delay using the delay prop set to 0.

LANGUAGE: tsx
CODE:
<TooltipTrigger delay={0}>
  <ActionButton aria-label="Save"><Save /></ActionButton>
  <Tooltip>Saving applies your new settings right away.</Tooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Menu and MenuItem Styling with CSS
DESCRIPTION: CSS styling for the Menu and MenuItem components, including hover states, focus states, and layout configuration.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-Menu {
  max-height: inherit;
  box-sizing: border-box;
  overflow: auto;
  padding: 2px;
  min-width: 150px;
  box-sizing: border-box;
  outline: none;
}

.react-aria-MenuItem {
  margin: 2px;
  padding: 0.286rem 0.571rem;
  border-radius: 6px;
  outline: none;
  cursor: default;
  color: var(--text-color);
  font-size: 1.072rem;
  position: relative;
  display: grid;
  grid-template-areas: "label kbd"
                      "desc  kbd";
  align-items: center;
  column-gap: 20px;
  forced-color-adjust: none;

  &[data-focused] {
    background: var(--highlight-background);
    color: var(--highlight-foreground);
  }
}

----------------------------------------

TITLE: Conditional Rendering with Render Props
DESCRIPTION: Demonstrates how to use render props to conditionally render elements based on component state, such as showing an icon when a checkbox is selected.

LANGUAGE: jsx
CODE:
<Checkbox>
  {({isSelected}) => (
    <>
      {isSelected && <CheckIcon />}
      Subscribe
    </>
  )}
</Checkbox>

----------------------------------------

TITLE: Configuring Web Crawler Access Control in robots.txt
DESCRIPTION: This robots.txt configuration instructs all web crawlers ('User-agent: *') to not access any part of the website ('Disallow: /'). This effectively prevents search engines and other crawlers from indexing the site content.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow: /

----------------------------------------

TITLE: ToggleButtons with Static Color on Different Backgrounds
DESCRIPTION: Demonstrates how to use the staticColor prop to ensure proper contrast when ToggleButtons appear on colored backgrounds, with examples for both white text on dark backgrounds and black text on light backgrounds.

LANGUAGE: tsx
CODE:
<Flex wrap gap="size-250">
  <View backgroundColor="static-blue-700" padding="size-500">
    <ToggleButton staticColor="white">
      <Pin />
      <Text>Pin</Text>
    </ToggleButton>
  </View>
  <View backgroundColor="static-yellow-400" padding="size-500">
    <ToggleButton staticColor="black" isQuiet defaultSelected>
      <Pin />
      <Text>Pin</Text>
    </ToggleButton>
  </View>
</Flex>

----------------------------------------

TITLE: Importing React Spectrum CSS for Theme Support
DESCRIPTION: Required CSS import statement to include page-level styles that configure and support light and dark themes in React Spectrum applications.

LANGUAGE: javascript
CODE:
import "@react-spectrum/s2/page.css";

----------------------------------------

TITLE: Implementing Reusable Button Component with React Aria
DESCRIPTION: A reusable Button component implemented using the useButton hook from React Aria. This component is used for month navigation in the calendar examples.

LANGUAGE: tsx
CODE:
import {useButton} from '@react-aria/button';

function Button(props) {
  let ref = React.useRef(null);
  let {buttonProps} = useButton(props, ref);
  return <button {...buttonProps} ref={ref}>{props.children}</button>;
}

----------------------------------------

TITLE: Inserting Items After a Reference Item in React
DESCRIPTION: Demonstrates the insertAfter method to add items after a specific item in the list. Shows adding both single and multiple items using a reference item's key.

LANGUAGE: tsx
CODE:
// Insert an item after another item
list.insertAfter('Kangaroo', {name: 'Horse'});

// Insert multiple items after another item
list.insertAfter('Kangaroo', {name: 'Horse'}, {name: 'Giraffe'});

----------------------------------------

TITLE: Importing and Using useId Hook in React
DESCRIPTION: This example demonstrates how to import the useId hook from @react-aria/utils and use it in two ways: generating a completely new ID and creating an ID that falls back to the autogenerated one only when props.id is not provided.

LANGUAGE: tsx
CODE:
import {useId} from '@react-aria/utils';

let elementId = useId();
let componentId = useId(props.id);

----------------------------------------

TITLE: Defining @react-spectrum/statuslight Package Description in Markdown
DESCRIPTION: A markdown header and brief description of the @react-spectrum/statuslight package, indicating it is part of the larger React Spectrum project.

LANGUAGE: markdown
CODE:
# @react-spectrum/statuslight

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Implementing Basic Breadcrumbs with Event Handling in React Aria
DESCRIPTION: Creates a Breadcrumbs component using the useBreadcrumbs hook, with BreadcrumbItem components that handle interactions via onPress events. Demonstrates how to use spans with proper ARIA attributes.

LANGUAGE: TSX
CODE:
import {useBreadcrumbs, useBreadcrumbItem} from '@react-aria/breadcrumbs';

function Breadcrumbs(props) {
  let {navProps} = useBreadcrumbs(props);
  let childCount = React.Children.count(props.children);

  return (
    <nav {...navProps}>
      <ol style={{display: 'flex', listStyle: 'none', margin: 0, padding: 0}}>
        {React.Children.map(props.children, (child, i) =>
          React.cloneElement(child, {isCurrent: i === childCount - 1})
        )}
      </ol>
    </nav>
  )
}

function BreadcrumbItem(props) {
  let ref = React.useRef(null);
  let {itemProps} = useBreadcrumbItem({...props, elementType: 'span'}, ref);
  return (
    <li>
      <span
        {...itemProps}
        ref={ref}
        style={{
          color: props.isDisabled ? 'var(--gray)' : 'var(--blue)',
          textDecoration: props.isCurrent || props.isDisabled ? 'none' : 'underline',
          fontWeight: props.isCurrent ? 'bold' : null,
          cursor: props.isCurrent || props.isDisabled ? 'default' : 'pointer'
        }}>
        {props.children}
      </span>
      {!props.isCurrent &&
        <span aria-hidden="true" style={{padding: '0 5px'}}>{'›'}</span>
      }
    </li>
  );
}

<Breadcrumbs>
  <BreadcrumbItem onPress={() => alert('Pressed Folder 1')}>Folder 1</BreadcrumbItem>
  <BreadcrumbItem onPress={() => alert('Pressed Folder 2')}>Folder 2</BreadcrumbItem>
  <BreadcrumbItem>Folder 3</BreadcrumbItem>
</Breadcrumbs>

----------------------------------------

TITLE: Adding Separators Between Menu Items
DESCRIPTION: Example demonstrating how to use the Separator component to create visual divisions between menu items or sections, creating logical groupings without using labeled headers.

LANGUAGE: tsx
CODE:
import {Separator} from 'react-aria-components';

<MyMenuButton label="Actions">
  <MenuItem>New…</MenuItem>
  <MenuItem>Open…</MenuItem>
  <Separator />
  <MenuItem>Save</MenuItem>
  <MenuItem>Save as…</MenuItem>
  <MenuItem>Rename…</MenuItem>
  <Separator />
  <MenuItem>Page setup…</MenuItem>
  <MenuItem>Print…</MenuItem>
</MyMenuButton>

----------------------------------------

TITLE: Importing Checkbox and Related Components in React Spectrum
DESCRIPTION: Shows how to import the Checkbox component along with View and Flex components that are commonly used in conjunction with it.

LANGUAGE: jsx
CODE:
import {Checkbox} from '@react-spectrum/checkbox';
import {View} from '@react-spectrum/view';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev

----------------------------------------

TITLE: Creating a Custom Label Component with Context Integration
DESCRIPTION: Example of creating a custom Label component that integrates with React Aria Components by consuming the LabelContext and using useContextProps to merge props.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Using View Component with Spectrum Styling in React
DESCRIPTION: Example demonstrating how to use the View component with Spectrum styling variables for border and padding, containing a TextField component. The example shows how View adapts to color scheme and scale changes.

LANGUAGE: tsx
CODE:
<View
  borderWidth="thin"
  borderColor="dark"
  borderRadius="medium"
  padding="size-250">
  <TextField label="Name" />
</View>

----------------------------------------

TITLE: Importing Components and Icons for React Spectrum ComboBox
DESCRIPTION: Import statements for the ComboBox component and related utilities, including icons, layout components, and text components from the React Spectrum library.

LANGUAGE: jsx
CODE:
import Add from '@spectrum-icons/workflow/Add';
import Alert from '@spectrum-icons/workflow/Alert';
import Bell from '@spectrum-icons/workflow/Bell';
import {ComboBox, Item, Section} from '@react-spectrum/combobox';
import Draw from '@spectrum-icons/workflow/Draw';
import {Flex} from '@react-spectrum/layout';
import {Text} from '@react-spectrum/text';
import {useFilter} from '@react-aria/i18n';
import {Avatar} from "@react-spectrum/avatar";

----------------------------------------

TITLE: Configuring Step Values in NumberField
DESCRIPTION: Examples of using the step prop to snap values to specific increments, with various combinations of minValue and maxValue to control the valid range and stepping behavior.

LANGUAGE: tsx
CODE:
<MyNumberField
  label="Step"
  step={10} />
<MyNumberField
  label="Step + minValue"
  minValue={2}
  step={3} />
<MyNumberField
  label="Step + minValue + maxValue"
  minValue={2}
  maxValue={21}
  step={3} />

----------------------------------------

TITLE: Rendering a Calendar Component
DESCRIPTION: Simple implementation of the Calendar component with an aria-label for accessibility.

LANGUAGE: tsx
CODE:
<Calendar aria-label="Event date" />

----------------------------------------

TITLE: Creating Sectioned Collection with ListBox
DESCRIPTION: Shows how to create a sectioned static collection using ListBox, Section, and Item components.

LANGUAGE: TSX
CODE:
<ListBox>
  <Section title="People">
    <Item>David</Item>
    <Item>Sam</Item>
    <Item>Jane</Item>
  </Section>
  <Section title="Animals">
    <Item>Aardvark</Item>
    <Item>Kangaroo</Item>
    <Item>Snake</Item>
  </Section>
</ListBox>

----------------------------------------

TITLE: Importing Components and Icons for React Spectrum ComboBox
DESCRIPTION: Import statements for the ComboBox component and related utilities, including icons, layout components, and text components from the React Spectrum library.

LANGUAGE: jsx
CODE:
import Add from '@spectrum-icons/workflow/Add';
import Alert from '@spectrum-icons/workflow/Alert';
import Bell from '@spectrum-icons/workflow/Bell';
import {ComboBox, Item, Section} from '@react-spectrum/combobox';
import Draw from '@spectrum-icons/workflow/Draw';
import {Flex} from '@react-spectrum/layout';
import {Text} from '@react-spectrum/text';
import {useFilter} from '@react-aria/i18n';
import {Avatar} from "@react-spectrum/avatar";

----------------------------------------

TITLE: Importing StepList Component from React Spectrum
DESCRIPTION: Shows how to import the StepList component from the React Spectrum library for use in React applications.

LANGUAGE: jsx
CODE:
import {StepList} from '@react-spectrum/steplist';

----------------------------------------

TITLE: Using Custom Value Scale in ProgressBar
DESCRIPTION: Example of using a custom value scale by setting the minValue and maxValue props. This configures the ProgressBar to work with values between 50 and 150, with 100 representing the halfway point.

LANGUAGE: tsx
CODE:
<MyProgressBar
  label="Loading…"
  minValue={50}
  maxValue={150}
  value={100} />

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default component for this documentation page.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Mocking DOM Measurements for Virtualized Components
DESCRIPTION: Setup code to mock DOM element measurements in Jest to properly test virtualized components that rely on clientHeight, clientWidth, scrollHeight, and scrollWidth calculations.

LANGUAGE: tsx
CODE:
beforeAll(function () {
  // The virtualizer will now think it has a visible area of 1000px x 1000px and that the items within it are 40px x 40px
  jest.spyOn(window.HTMLElement.prototype, 'clientWidth', 'get').mockImplementation(() => 1000);
  jest.spyOn(window.HTMLElement.prototype, 'clientHeight', 'get').mockImplementation(() => 1000);
  jest.spyOn(window.HTMLElement.prototype, 'scrollHeight', 'get').mockImplementation(() => 40);
  jest.spyOn(window.HTMLElement.prototype, 'scrollWidth', 'get').mockImplementation(() => 40);
});

afterAll(() => {
  jest.restoreAllMocks();
});

----------------------------------------

TITLE: Importing Blog Post Layout Components in React
DESCRIPTION: This code snippet imports BlogPostLayout and Hero components from the @react-spectrum/docs package and exports the BlogPostLayout as the default export. This is part of the setup for the blog post page.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Defining Button Interfaces in TypeScript for ReactSpectrum
DESCRIPTION: Defines the TypeScript interfaces for different button types in ReactSpectrum. Includes a base interface with common properties and specialized interfaces for standard buttons, action buttons, and logic buttons with their specific props and variants.

LANGUAGE: typescript
CODE:
interface ButtonBase extends DOMProps, StyleProps, PressEvents, FocusableProps {
  isDisabled?: boolean,
  elementType?: string | JSXElementConstructor<any>,
  children?: ReactNode,
  href?: string
}

interface Button extends ButtonBase {
  variant: 'cta' | 'overBackground' | 'primary' | 'secondary' | 'negative', // no default, must choose
  isQuiet?: boolean
}

interface ActionButton extends ButtonBase {
  isQuiet?: boolean,
  isSelected?: boolean,
  holdAffordance?: boolean,
  isEmphasized?: boolean
}

interface LogicButton extends ButtonBase {
  variant: 'and' | 'or'
}

----------------------------------------

TITLE: Defining Button Interfaces in TypeScript for ReactSpectrum
DESCRIPTION: Defines the TypeScript interfaces for different button types in ReactSpectrum. Includes a base interface with common properties and specialized interfaces for standard buttons, action buttons, and logic buttons with their specific props and variants.

LANGUAGE: typescript
CODE:
interface ButtonBase extends DOMProps, StyleProps, PressEvents, FocusableProps {
  isDisabled?: boolean,
  elementType?: string | JSXElementConstructor<any>,
  children?: ReactNode,
  href?: string
}

interface Button extends ButtonBase {
  variant: 'cta' | 'overBackground' | 'primary' | 'secondary' | 'negative', // no default, must choose
  isQuiet?: boolean
}

interface ActionButton extends ButtonBase {
  isQuiet?: boolean,
  isSelected?: boolean,
  holdAffordance?: boolean,
  isEmphasized?: boolean
}

interface LogicButton extends ButtonBase {
  variant: 'and' | 'or'
}

----------------------------------------

TITLE: Implementing Selection Interface in JavaScript
DESCRIPTION: Defines interfaces for implementing selection behavior in React Spectrum components. Includes options for configuring selection behavior and separate interfaces for single and multiple selection patterns.

LANGUAGE: javascript
CODE:
interface SelectionOptions {
  allowsSelection?: boolean,
  allowsMultipleSelection?: boolean,
  allowsEmptySelection?: boolean,
  typeToSelect?: boolean // ???
}

interface MultipleSelectionBase extends SelectionOptions {
  selectedItems?: Array<any>,
  defaultSelectedItems?: Array<any>,
  onSelectionChange?: (selectedItems: Array<any>) => void
}

interface SingleSelectionBase {
  selectedItem?: any,
  defaultSelectedItem?: any,
  onSelectionChange?: (selectedItem: any) => void,
  typeToSelect?: boolean // or is it really typeToFocus?
}

----------------------------------------

TITLE: Released Packages List in React Spectrum Ecosystem
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem, including React Aria, React Stately, React Spectrum component libraries, internationalization utilities, and icon packages. Each package is listed with its current version number.

LANGUAGE: markdown
CODE:
 - @adobe/react-spectrum@3.33.0
 - @internationalized/date@3.5.1
 - @internationalized/number@3.5.0
 - @internationalized/string@3.2.0
 - @react-aria/accordion@3.0.0-alpha.25
 - @react-aria/actiongroup@3.7.1
 - @react-aria/autocomplete@3.0.0-alpha.24
 - @react-aria/breadcrumbs@3.5.9
 - @react-aria/button@3.9.1
 - @react-aria/calendar@3.5.4
 - @react-aria/checkbox@3.13.0
 - @react-aria/color@3.0.0-beta.28
 - @react-aria/combobox@3.8.1
 - @react-aria/datepicker@3.9.1
 - @react-aria/dialog@3.5.9
 - @react-aria/dnd@3.5.1
 - @react-aria/example-theme@1.0.0
 - @react-aria/focus@3.16.0
 - @react-aria/form@3.0.1
 - @react-aria/grid@3.8.6
 - @react-aria/gridlist@3.7.3
 - @react-aria/i18n@3.10.0
 - @react-aria/interactions@3.20.1
 - @react-aria/label@3.7.4
 - @react-aria/landmark@3.0.0-beta.8
 - @react-aria/link@3.6.3
 - @react-aria/listbox@3.11.3
 - @react-aria/menu@3.12.0
 - @react-aria/meter@3.4.9
 - @react-aria/numberfield@3.10.1
 - @react-aria/overlays@3.20.0
 - @react-aria/progress@3.4.9
 - @react-aria/radio@3.10.0
 - @react-aria/searchfield@3.7.0
 - @react-aria/select@3.14.1
 - @react-aria/selection@3.17.3
 - @react-aria/separator@3.3.9
 - @react-aria/slider@3.7.4
 - @react-aria/spinbutton@3.6.1
 - @react-aria/ssr@3.9.1
 - @react-aria/steplist@3.0.0-alpha.1
 - @react-aria/switch@3.6.0
 - @react-aria/table@3.13.3
 - @react-aria/tabs@3.8.3
 - @react-aria/tag@3.3.1
 - @react-aria/textfield@3.14.0
 - @react-aria/toast@3.0.0-beta.8
 - @react-aria/toggle@3.10.0
 - @react-aria/toolbar@3.0.0-beta.1
 - @react-aria/tooltip@3.7.0
 - @react-aria/utils@3.23.0
 - @react-aria/virtualizer@3.9.8
 - @react-aria/visually-hidden@3.8.8
 - @react-spectrum/accordion@3.0.0-alpha.27
 - @react-spectrum/actionbar@3.4.1
 - @react-spectrum/actiongroup@3.10.1
 - @react-spectrum/autocomplete@3.0.0-alpha.27
 - @react-spectrum/avatar@3.0.8
 - @react-spectrum/badge@3.1.9
 - @react-spectrum/breadcrumbs@3.9.3
 - @react-spectrum/button@3.16.0
 - @react-spectrum/buttongroup@3.6.9
 - @react-spectrum/calendar@3.4.4
 - @react-spectrum/card@3.0.0-alpha.28
 - @react-spectrum/checkbox@3.9.1
 - @react-spectrum/color@3.0.0-beta.29
 - @react-spectrum/combobox@3.12.0
 - @react-spectrum/contextualhelp@3.6.6
 - @react-spectrum/datepicker@3.9.1
 - @react-spectrum/dialog@3.8.6
 - @react-spectrum/divider@3.5.9
 - @react-spectrum/dnd@3.3.6
 - @react-spectrum/dropzone@3.0.0-rc.0
 - @react-spectrum/form@3.7.1
 - @react-spectrum/icon@3.7.9
 - @react-spectrum/illustratedmessage@3.4.9
 - @react-spectrum/image@3.4.9
 - @react-spectrum/inlinealert@3.2.1
 - @react-spectrum/label@3.16.1
 - @react-spectrum/labeledvalue@3.1.9
 - @react-spectrum/layout@3.6.1
 - @react-spectrum/link@3.6.3
 - @react-spectrum/list@3.7.5
 - @react-spectrum/listbox@3.12.5
 - @react-spectrum/menu@3.17.0
 - @react-spectrum/meter@3.4.9
 - @react-spectrum/numberfield@3.8.1
 - @react-spectrum/overlays@5.5.3
 - @react-spectrum/picker@3.14.0
 - @react-spectrum/progress@3.7.3
 - @react-spectrum/provider@3.9.3
 - @react-spectrum/radio@3.7.1
 - @react-spectrum/searchfield@3.8.1
 - @react-spectrum/slider@3.6.5
 - @react-spectrum/statuslight@3.5.9
 - @react-spectrum/steplist@3.0.0-alpha.1
 - @react-spectrum/switch@3.5.1
 - @react-spectrum/table@3.12.5
 - @react-spectrum/tabs@3.8.5
 - @react-spectrum/tag@3.2.1
 - @react-spectrum/text@3.5.1
 - @react-spectrum/textfield@3.11.1
 - @react-spectrum/toast@3.0.0-beta.8
 - @react-spectrum/tooltip@3.6.3
 - @react-spectrum/utils@3.11.3
 - @react-spectrum/view@3.6.6
 - @react-spectrum/well@3.4.9
 - @react-stately/calendar@3.4.3
 - @react-stately/checkbox@3.6.1
 - @react-stately/collections@3.10.4
 - @react-stately/color@3.5.1
 - @react-stately/combobox@3.8.1
 - @react-stately/datepicker@3.9.1
 - @react-stately/dnd@3.2.7
 - @react-stately/grid@3.8.4
 - @react-stately/layout@3.13.5
 - @react-stately/list@3.10.2
 - @react-stately/menu@3.6.0
 - @react-stately/numberfield@3.8.0
 - @react-stately/radio@3.10.1
 - @react-stately/select@3.6.1
 - @react-stately/selection@3.14.2
 - @react-stately/slider@3.5.0
 - @react-stately/steplist@3.0.0-alpha.1
 - @react-stately/table@3.11.4
 - @react-stately/tabs@3.6.3
 - @react-stately/tree@3.7.5
 - @react-stately/virtualizer@3.6.6
 - @react-types/autocomplete@3.0.0-alpha.19
 - @react-types/calendar@3.4.3
 - @react-types/card@3.0.0-alpha.22
 - @react-types/combobox@3.10.0
 - @react-types/datepicker@3.7.1
 - @react-types/form@3.7.0
 - @react-types/list@3.2.12
 - @react-types/radio@3.7.0
 - @react-types/select@3.9.1
 - @react-types/table@3.9.2
 - @spectrum-icons/color@3.5.9
 - @spectrum-icons/express@3.0.0-alpha.13
 - @spectrum-icons/illustrations@3.6.9
 - @spectrum-icons/ui@3.6.3
 - @spectrum-icons/workflow@4.2.8
 - @react-aria/optimize-locales-plugin@1.0.0
 - @react-aria/parcel-resolver-optimize-locales@1.0.0
 - react-aria@3.31.0
 - react-aria-components@1.0.0
 - react-stately@3.29.0
 - tailwindcss-react-aria-components@1.0.0

----------------------------------------

TITLE: Importing Accordion Components in React Spectrum
DESCRIPTION: Shows how to import the Accordion, Disclosure, DisclosureTitle, and DisclosurePanel components from the React Spectrum accordion package.

LANGUAGE: jsx
CODE:
import {Accordion, Disclosure, DisclosureTitle, DisclosurePanel} from '@react-spectrum/accordion';

----------------------------------------

TITLE: Using A4u Packaged Custom Icons Directly in React Spectrum
DESCRIPTION: Demonstrates how to use A4u packaged custom icons directly in React Spectrum applications without wrapping them in an Icon component. This approach works with the React Spectrum Provider for proper scaling.

LANGUAGE: jsx
CODE:
import CustomSVGComponent from 'path/to/custom-icons/CustomSVGComponent';

<CustomSVGComponent />

----------------------------------------

TITLE: Importing Layout from React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and sets it as the default export.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Targeting React Aria Components with CSS Selectors
DESCRIPTION: Example showing how to style React Aria components using CSS selectors that follow the react-aria-ComponentName naming convention.

LANGUAGE: css
CODE:
.react-aria-RangeCalendar {
  /* ... */
}

----------------------------------------

TITLE: Overriding First Day of Week for getWeeksInMonth Function
DESCRIPTION: Demonstrates how to override the default first day of the week in the getWeeksInMonth function with an optional firstDayOfWeek parameter.

LANGUAGE: tsx
CODE:
getWeeksInMonth(date, 'en-US', 'mon'); // 6

----------------------------------------

TITLE: MenuTrigger TypeScript Interface Definition
DESCRIPTION: Defines the TypeScript interface for the MenuTrigger component, specifying props for trigger behavior, alignment, direction, and open state management. It includes types for children elements, trigger events, alignment options, and direction of menu appearance.

LANGUAGE: typescript
CODE:
interface MenuTrigger {
  children: ReactNode, // figure out if we can type the children
  trigger: 'press' | 'longPress',
  align?: 'start' | 'end',
  direction?: 'bottom' | 'top', // left right?
  isOpen?: boolean,
  defaultOpen?: boolean,
  onOpenChange?: (isOpen: boolean) => void
}


----------------------------------------

TITLE: Tailwind CSS Animations with React Aria Components
DESCRIPTION: Shows how to use the tailwindcss-animate plugin to apply animations to React Aria Components. The example demonstrates fade-in and fade-out animations on a Popover component.

LANGUAGE: jsx
CODE:
<Popover className="data-[entering]:animate-in data-[entering]:fade-in data-[exiting]:animate-out data-[exiting]:fade-out">
  {/* ... */}
</Popover>

----------------------------------------

TITLE: Cycling Time Fields with Wraparound in TypeScript
DESCRIPTION: Uses the cycle method to increment or decrement time fields with wraparound behavior when reaching minimum or maximum values.

LANGUAGE: tsx
CODE:
let time = new Time(23, 59);
time.cycle('hour', 1); // 00:59
time.cycle('minute', 1); // 23:00

let time = new Time(0, 0);
time.cycle('hour', -1); // 23:00
time.cycle('minute', -1); // 00:59

----------------------------------------

TITLE: Referencing @react-aria/dnd Package in Markdown
DESCRIPTION: A simple markdown reference to the @react-aria/dnd package, indicating it is part of the react-spectrum library, with a link to the main repository for additional details.

LANGUAGE: markdown
CODE:
# @react-aria/dnd

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Importing and Exporting Layout Component in JSX
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export for the current file.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Implementing Link Support in ListBox Option Component with TypeScript
DESCRIPTION: This example shows how to modify the Option component to render an anchor element when an href prop is passed to the item, enabling link navigation while maintaining accessibility features.

LANGUAGE: tsx
CODE:
function Option({item, state}) {
  let ref = React.useRef(null);
  let {optionProps} = useOption({key: item.key}, state, ref);
  let {isFocusVisible, focusProps} = useFocusRing();
  /*- begin highlight -*/
  let ElementType: React.ElementType = item.props.href ? 'a' : 'div';
  /*- end highlight -*/

  return (
    <ElementType
      {...mergeProps(optionProps, focusProps)}
      ref={ref}
      data-focus-visible={isFocusVisible}>
      {item.rendered}
    </ElementType>
  );
}

<ListBox aria-label="Links">
  <Item href="https://adobe.com/" target="_blank">Adobe</Item>
  <Item href="https://apple.com/" target="_blank">Apple</Item>
  <Item href="https://google.com/" target="_blank">Google</Item>
  <Item href="https://microsoft.com/" target="_blank">Microsoft</Item>
</ListBox>

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports and exports the Layout component from the @react-spectrum/docs package, used for documentation page layout.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Configuring Optimize Locales Plugin with Webpack
DESCRIPTION: Configuration example for using the optimize-locales-plugin with Webpack. This setup removes all locale strings except for English (US) and French (France) from the bundle.

LANGUAGE: javascript
CODE:
// webpack.config.js
const optimizeLocales = require('@react-aria/optimize-locales-plugin');

module.exports = {
  // ...
  plugins: [
    optimizeLocales.webpack({
      locales: ['en-US', 'fr-FR']
    })
  ]
};

----------------------------------------

TITLE: TimeField with Custom Label Positioning
DESCRIPTION: Example demonstrating how to customize label position and alignment for a TimeField component.

LANGUAGE: tsx
CODE:
<TimeField label="Event time" labelPosition="side" labelAlign="end" />

----------------------------------------

TITLE: Styling Disabled SearchField Input with CSS
DESCRIPTION: CSS example showing how to style a disabled SearchField input with custom colors for the border and text to visually indicate its disabled state.

LANGUAGE: css
CODE:
.react-aria-SearchField {
  .react-aria-Input {
    &[data-disabled] {
      border-color: var(--border-color-disabled);
      color: var(--text-color-disabled);
    }
  }
}

----------------------------------------

TITLE: Implementing Selectable Tags with Controlled Selection State
DESCRIPTION: Example demonstrating how to implement a Tag Group with multiple selection using a controlled selection state. Shows how to track and update the selected keys.

LANGUAGE: tsx
CODE:
import type {Selection} from 'react-stately';

function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set(['parking']));

  return (
    <>
      <TagGroup label="Amenities" selectionMode="multiple" selectedKeys={selected} onSelectionChange={setSelected}>
        <Item key="laundry">Laundry</Item>
        <Item key="fitness">Fitness center</Item>
        <Item key="parking">Parking</Item>
        <Item key="pool">Swimming pool</Item>
        <Item key="breakfast">Breakfast</Item>
      </TagGroup>
      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing ButtonGroup with Single Selection Mode in React
DESCRIPTION: Example of a ButtonGroup with single selection mode (radio button behavior) that allows users to select one text alignment option. This implementation follows the WAI-ARIA RadioGroup design pattern.

LANGUAGE: jsx
CODE:
<ButtonGroup
  aria-label="Text Alignment"
  selectionMode="single">
  <Button
    value="TextAlignLeft"
    aria-label="Left"
    icon={<TextAlignLeft />} />
  <Button
    value="TextAlignCenter"
    aria-label="Center"
    icon={<TextAlignCenter />} />
  <Button
    value="TextAlignRight"
    aria-label="Right"
    icon={<TextAlignRight />} />
  <Button
    value="TextAlignJustify"
    aria-label="Justify"
    icon={<TextAlignJustify />} />
</ButtonGroup>

----------------------------------------

TITLE: Implementing Link Tags with href Property
DESCRIPTION: Example showing how to create tags that function as links by passing the href property to Item components. These tags navigate to external websites when clicked.

LANGUAGE: tsx
CODE:
<TagGroup label="Links">
  <Item href="https://adobe.com/" target="_blank">Adobe</Item>
  <Item href="https://apple.com/" target="_blank">Apple</Item>
  <Item href="https://google.com/" target="_blank">Google</Item>
  <Item href="https://microsoft.com/" target="_blank">Microsoft</Item>
</TagGroup>

----------------------------------------

TITLE: Displaying Package Information in Markdown
DESCRIPTION: A simple markdown header and description explaining that the @react-aria/tooltip package is part of the React Spectrum library.

LANGUAGE: markdown
CODE:
# @react-aria/tooltip

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Basic CSS Styling for TextField Components
DESCRIPTION: Example of targeting TextField components with CSS selectors using the default class naming convention.

LANGUAGE: css
CODE:
.react-aria-TextField {
  /* ... */
}

----------------------------------------

TITLE: CSS for Image Item Display in ListBox
DESCRIPTION: CSS styles for the image item display in the file drop example. It formats the layout with flexbox, constrains image height, and handles text overflow with ellipsis.

LANGUAGE: css
CODE:
.image-item {
  display: flex;
  height: 50px;
  gap: 10px;
}

.image-item img {
  height: 100%;
  object-fit: contain;
}

.image-item span {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

----------------------------------------

TITLE: Importing ProgressCircle in React Spectrum
DESCRIPTION: Shows how to import the ProgressCircle component and View component from React Spectrum packages.

LANGUAGE: jsx
CODE:
import {ProgressCircle} from '@react-spectrum/progress';
import {View} from '@react-spectrum/view';

----------------------------------------

TITLE: Using Function-Based Styling with React Aria Components
DESCRIPTION: Example demonstrating how to use function-based className prop to apply dynamic styles based on component states, which is useful when using utility CSS libraries like Tailwind.

LANGUAGE: jsx
CODE:
<ProgressBar className={({percentage}) => percentage > 50 ? 'bg-green-400' : 'bg-yellow-100'}>
  Item
</ProgressBar>

----------------------------------------

TITLE: Disabled Link Implementation with useLink in React Aria
DESCRIPTION: Example showing how to implement a disabled link using the isDisabled property with useLink. The hook ensures navigation is disabled and the link is properly exposed as disabled to assistive technology.

LANGUAGE: tsx
CODE:
function Link(props) {
  let ref = React.useRef(null);
  let {linkProps} = useLink(props, ref);

  return (
    <a
      {...linkProps}
      ref={ref}
      style={{
        color: props.isDisabled ? 'var(--gray)' : 'var(--blue)',
        cursor: props.isDisabled ? 'default' : 'pointer'
      }}>
      {props.children}
    </a>
  );
}

<Link href="https://adobe.com" target="_blank" isDisabled>Disabled link</Link>

----------------------------------------

TITLE: Using Custom Label Component in Select
DESCRIPTION: Example showing how to use a custom Label component within a Select component.

LANGUAGE: tsx
CODE:
<Select>
  <MyCustomLabel>Name</MyCustomLabel>
  {/* ... */}
</Select>

----------------------------------------

TITLE: SearchField Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This table compares SearchField props between versions, showing that Spectrum 2 supports size, isInvalid, and slot properties, while RSP v3 has placeholder, icon, isQuiet, and validationState properties not available in S2.

LANGUAGE: typescript
CODE:
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | –
isInvalid | 🟢 `boolean` | –
slot | 🟢 `null \| string` | –
placeholder | – | 🔴 `string`
icon | – | 🔴 `ReactElement \| null`
isQuiet | – | 🔴 `boolean`
validationState | – | 🔴 `ValidationState`

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default for this documentation page.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Creating a CalendarDateTime with Japanese Calendar Using Era
DESCRIPTION: Creates a CalendarDateTime in the Japanese calendar system with a specific era, equivalent to April 4th, 2020 at 9:15 AM in the Gregorian calendar.

LANGUAGE: tsx
CODE:
import {JapaneseCalendar} from '@internationalized/date';

let date = new CalendarDateTime(
  new JapaneseCalendar(),
  'heisei', 31, 4, 30, 9, 15
);

----------------------------------------

TITLE: Referencing React Aria Autocomplete Package
DESCRIPTION: Shows the package name for @react-aria/autocomplete and mentions it's part of the React Spectrum project.

LANGUAGE: markdown
CODE:
# @react-aria/autocomplete

----------------------------------------

TITLE: Implementing Bidirectional Drag Between Tables in React Spectrum
DESCRIPTION: This example demonstrates a complete implementation of drag and drop between two tables. It supports bidirectional movement of items, reordering within the same table, and handles empty tables. The implementation uses custom data formats and ensures items are always moved rather than copied.

LANGUAGE: tsx
CODE:
import {isTextDropItem} from 'react-aria-components';

interface FileItem {
  id: string,
  name: string,
  type: string
}

interface DndTableProps {
  initialItems: FileItem[],
  'aria-label': string
}

function DndTable(props: DndTableProps) {
  let list = useListData({
    initialItems: props.initialItems
  });

  let { dragAndDropHooks } = useDragAndDrop({
    ///- begin collapse -///
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    ///- end collapse -///
    // Provide drag data in a custom format as well as plain text.
    getItems(keys) {
      return [...keys].map((key) => {
        let item = list.getItem(key);
        return {
          'custom-app-type': JSON.stringify(item),
          'text/plain': item.name
        };
      });
    },

    // Accept drops with the custom format.
    acceptedDragTypes: ['custom-app-type'],

    // Ensure items are always moved rather than copied.
    getDropOperation: () => 'move',

    // Handle drops between items from other lists.
    async onInsert(e) {
      let processedItems = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('custom-app-type')))
      );
      if (e.target.dropPosition === 'before') {
        list.insertBefore(e.target.key, ...processedItems);
      } else if (e.target.dropPosition === 'after') {
        list.insertAfter(e.target.key, ...processedItems);
      }
    },

    // Handle drops on the collection when empty.
    async onRootDrop(e) {
      let processedItems = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('custom-app-type')))
      );
      list.append(...processedItems);
    },

    // Handle reordering items within the same list.
    onReorder(e) {
      if (e.target.dropPosition === 'before') {
        list.moveBefore(e.target.key, e.keys);
      } else if (e.target.dropPosition === 'after') {
        list.moveAfter(e.target.key, e.keys);
      }
    },

    // Remove the items from the source list on drop
    // if they were moved to a different list.
    onDragEnd(e) {
      if (e.dropOperation === 'move' && !e.isInternal) {
        list.remove(...e.keys);
      }
    }
  });

  return (
    <Table
      aria-label={props['aria-label']}
      selectionMode="multiple"
      selectedKeys={list.selectedKeys}
      onSelectionChange={list.setSelectedKeys}
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader>
        <Column />
        <Column><MyCheckbox slot="selection" /></Column>
        <Column>ID</Column>
        <Column isRowHeader>Name</Column>
        <Column>Type</Column>
      </TableHeader>
      <TableBody items={list.items} renderEmptyState={() => 'Drop items here'}>
        {item => (
          <Row>
            <Cell><Button slot="drag">≡</Button></Cell>
            <Cell><MyCheckbox slot="selection" /></Cell>
            <Cell>{item.id}</Cell>
            <Cell>{item.name}</Cell>
            <Cell>{item.type}</Cell>
          </Row>
        )}
      </TableBody>
    </Table>
  );
}

<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
  <DndTable
    initialItems={[
      { id: '1', type: 'file', name: 'Adobe Photoshop' },
      { id: '2', type: 'file', name: 'Adobe XD' },
      { id: '3', type: 'folder', name: 'Documents' },
      { id: '4', type: 'file', name: 'Adobe InDesign' },
      { id: '5', type: 'folder', name: 'Utilities' },
      { id: '6', type: 'file', name: 'Adobe AfterEffects' }
    ]}
    aria-label="First Table"
  />
  <DndTable
    initialItems={[
      { id: '7', type: 'folder', name: 'Pictures' },
      { id: '8', type: 'file', name: 'Adobe Fresco' },
      { id: '9', type: 'folder', name: 'Apps' },
      { id: '10', type: 'file', name: 'Adobe Illustrator' },
      { id: '11', type: 'file', name: 'Adobe Lightroom' },
      { id: '12', type: 'file', name: 'Adobe Dreamweaver' }
    ]}
    aria-label="Second Table"
  />
</div>

----------------------------------------

TITLE: Implementing Bidirectional Drag Between Tables in React Spectrum
DESCRIPTION: This example demonstrates a complete implementation of drag and drop between two tables. It supports bidirectional movement of items, reordering within the same table, and handles empty tables. The implementation uses custom data formats and ensures items are always moved rather than copied.

LANGUAGE: tsx
CODE:
import {isTextDropItem} from 'react-aria-components';

interface FileItem {
  id: string,
  name: string,
  type: string
}

interface DndTableProps {
  initialItems: FileItem[],
  'aria-label': string
}

function DndTable(props: DndTableProps) {
  let list = useListData({
    initialItems: props.initialItems
  });

  let { dragAndDropHooks } = useDragAndDrop({
    ///- begin collapse -///
    renderDragPreview(items) {
      return (
        <div className="drag-preview">
          {items[0]['text/plain']}
          <span className="badge">{items.length}</span>
        </div>
      );
    },
    ///- end collapse -///
    // Provide drag data in a custom format as well as plain text.
    getItems(keys) {
      return [...keys].map((key) => {
        let item = list.getItem(key);
        return {
          'custom-app-type': JSON.stringify(item),
          'text/plain': item.name
        };
      });
    },

    // Accept drops with the custom format.
    acceptedDragTypes: ['custom-app-type'],

    // Ensure items are always moved rather than copied.
    getDropOperation: () => 'move',

    // Handle drops between items from other lists.
    async onInsert(e) {
      let processedItems = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('custom-app-type')))
      );
      if (e.target.dropPosition === 'before') {
        list.insertBefore(e.target.key, ...processedItems);
      } else if (e.target.dropPosition === 'after') {
        list.insertAfter(e.target.key, ...processedItems);
      }
    },

    // Handle drops on the collection when empty.
    async onRootDrop(e) {
      let processedItems = await Promise.all(
        e.items
          .filter(isTextDropItem)
          .map(async item => JSON.parse(await item.getText('custom-app-type')))
      );
      list.append(...processedItems);
    },

    // Handle reordering items within the same list.
    onReorder(e) {
      if (e.target.dropPosition === 'before') {
        list.moveBefore(e.target.key, e.keys);
      } else if (e.target.dropPosition === 'after') {
        list.moveAfter(e.target.key, e.keys);
      }
    },

    // Remove the items from the source list on drop
    // if they were moved to a different list.
    onDragEnd(e) {
      if (e.dropOperation === 'move' && !e.isInternal) {
        list.remove(...e.keys);
      }
    }
  });

  return (
    <Table
      aria-label={props['aria-label']}
      selectionMode="multiple"
      selectedKeys={list.selectedKeys}
      onSelectionChange={list.setSelectedKeys}
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader>
        <Column />
        <Column><MyCheckbox slot="selection" /></Column>
        <Column>ID</Column>
        <Column isRowHeader>Name</Column>
        <Column>Type</Column>
      </TableHeader>
      <TableBody items={list.items} renderEmptyState={() => 'Drop items here'}>
        {item => (
          <Row>
            <Cell><Button slot="drag">≡</Button></Cell>
            <Cell><MyCheckbox slot="selection" /></Cell>
            <Cell>{item.id}</Cell>
            <Cell>{item.name}</Cell>
            <Cell>{item.type}</Cell>
          </Row>
        )}
      </TableBody>
    </Table>
  );
}

<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
  <DndTable
    initialItems={[
      { id: '1', type: 'file', name: 'Adobe Photoshop' },
      { id: '2', type: 'file', name: 'Adobe XD' },
      { id: '3', type: 'folder', name: 'Documents' },
      { id: '4', type: 'file', name: 'Adobe InDesign' },
      { id: '5', type: 'folder', name: 'Utilities' },
      { id: '6', type: 'file', name: 'Adobe AfterEffects' }
    ]}
    aria-label="First Table"
  />
  <DndTable
    initialItems={[
      { id: '7', type: 'folder', name: 'Pictures' },
      { id: '8', type: 'file', name: 'Adobe Fresco' },
      { id: '9', type: 'folder', name: 'Apps' },
      { id: '10', type: 'file', name: 'Adobe Illustrator' },
      { id: '11', type: 'file', name: 'Adobe Lightroom' },
      { id: '12', type: 'file', name: 'Adobe Dreamweaver' }
    ]}
    aria-label="Second Table"
  />
</div>

----------------------------------------

TITLE: Multiple Selection ToggleButtonGroup Example
DESCRIPTION: An example of a ToggleButtonGroup configured for multiple selection to allow selecting multiple formatting options.

LANGUAGE: tsx
CODE:
<ToggleButtonGroup selectionMode="multiple">
  <ToggleButton id="bold">Bold</ToggleButton>
  <ToggleButton id="italic">Italic</ToggleButton>
  <ToggleButton id="underline">Underline</ToggleButton>
</ToggleButtonGroup>

----------------------------------------

TITLE: Importing RangeSlider Component in React Spectrum
DESCRIPTION: Demonstrates how to import the RangeSlider component and the Flex layout component from React Spectrum libraries.

LANGUAGE: jsx
CODE:
import {Flex} from '@react-spectrum/layout';
import {RangeSlider} from '@react-spectrum/slider';

----------------------------------------

TITLE: Styling React Aria Popovers with CSS
DESCRIPTION: Examples of different styling approaches for React Aria Popovers, including targeting the default class names, applying custom class names, and using data attributes for state-based styling.

LANGUAGE: css
CODE:
.react-aria-Popover {
  /* ... */
}

LANGUAGE: css
CODE:
.react-aria-Popover[data-placement=left] {
  /* ... */
}

LANGUAGE: css
CODE:
.react-aria-Popover {
  transition: opacity 300ms;

  &[data-entering],
  &[data-exiting] {
    opacity: 0;
  }
}

----------------------------------------

TITLE: Custom CSS for Drop Indicators in Tables
DESCRIPTION: Custom CSS styling for a drop indicator with the 'my-drop-indicator' class. The 'active' class is applied when the indicator is a potential drop target.

LANGUAGE: css
CODE:
.my-drop-indicator.active {
  outline: 1px solid #e70073;
  transform: translateZ(0);
}

----------------------------------------

TITLE: Referencing React Aria Virtualizer Package in Markdown
DESCRIPTION: A markdown heading and description that identifies the @react-aria/virtualizer package and states that it's part of the React Spectrum project, with a reference to the main repository for more information.

LANGUAGE: markdown
CODE:
# @react-aria/virtualizer

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Importing Layout Component for React Spectrum Documentation
DESCRIPTION: Imports the Layout component from React Spectrum docs and exports it as the default component for the page structure.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Importing React Stately Select Package
DESCRIPTION: Reference to the @react-stately/select package as part of the React Spectrum library. This package likely provides state management functionality for select components.

LANGUAGE: markdown
CODE:
# @react-stately/select

----------------------------------------

TITLE: Stabilizing IDs for Snapshot Tests
DESCRIPTION: Example of wrapping components in SSRProvider to stabilize generated IDs for snapshot tests in React 16 or 17, preventing IDs from changing on every test run.

LANGUAGE: tsx
CODE:
import {SSRProvider, Provider, lightTheme} from '@adobe/react-spectrum';

<SSRProvider>
  <Provider theme={lightTheme}>
    <YourApp />
  </Provider>
</SSRProvider>

----------------------------------------

TITLE: Basic Breadcrumbs Implementation in React Aria Components
DESCRIPTION: Example of basic implementation of Breadcrumbs component with static items showing home, React Aria, and Breadcrumbs path.

LANGUAGE: tsx
CODE:
import {Breadcrumbs, Breadcrumb, Link} from 'react-aria-components';

<Breadcrumbs>
  <Breadcrumb><Link href="/">Home</Link></Breadcrumb>
  <Breadcrumb><Link href="/react-aria/">React Aria</Link></Breadcrumb>
  <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>
</Breadcrumbs>

----------------------------------------

TITLE: Referencing React Aria Color Package in Markdown
DESCRIPTION: A simple markdown heading that identifies the @react-aria/color package, which is part of the React Spectrum library. The file directs readers to the main repository for additional information.

LANGUAGE: markdown
CODE:
# @react-aria/color

----------------------------------------

TITLE: ListBox Component CSS Styling
DESCRIPTION: CSS styling for the ListBox component, including focus states, selected states, and general appearance including dimensions, borders, and spacing.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-ListBox {
  display: flex;
  flex-direction: column;
  gap: 4px;
  max-height: inherit;
  overflow: auto;
  padding: 4px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: var(--overlay-background);
  forced-color-adjust: none;
  outline: none;
  width: 250px;
  max-height: 300px;
  min-height: 100px;
  box-sizing: border-box;

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: -1px;
  }
}

.react-aria-ListBoxItem {
  padding: 0 0.571rem;
  border-radius: 6px;
  outline: none;
  cursor: default;
  color: var(--text-color);
  font-size: 1.072rem;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  min-height: 32px;

  &[data-focus-visible] {
    outline: 2px solid var(--focus-ring-color);
    outline-offset: -2px;
  }

  &[data-selected] {
    background: var(--highlight-background);
    color: var(--highlight-foreground);

    &[data-focus-visible] {
      outline-color: var(--highlight-foreground);
      outline-offset: -4px;
    }
  }
}

----------------------------------------

TITLE: Using a Custom Value Label with the Meter Component
DESCRIPTION: Example showing how to replace the automatic formatted value with a custom string using the valueLabel prop in the Meter component.

LANGUAGE: TSX
CODE:
<Meter
  label="Space used"
  valueLabel="54 of 60GB"
  value={90} />

----------------------------------------

TITLE: Implementing Directory Drag and Drop in React Spectrum Component
DESCRIPTION: Example showing how to accept directory drops in a React Spectrum Table component. It imports the DIRECTORY_DRAG_TYPE constant, uses the isDirectoryDropItem utility, and processes directory contents as they're dropped to display in the table.

LANGUAGE: tsx
CODE:
import File from '@spectrum-icons/workflow/FileTxt';
import Folder from '@spectrum-icons/workflow/Folder';
///- begin highlight -///
import {DIRECTORY_DRAG_TYPE, isDirectoryDropItem} from 'react-aria-components';
///- end highlight -///

interface DirItem {
  name: string,
  kind: string,
  type: string
}

function Example() {
  let [files, setFiles] = React.useState<DirItem[]>([]);

  let { dragAndDropHooks } = useDragAndDrop({
    /*- begin highlight -*/
    acceptedDragTypes: [DIRECTORY_DRAG_TYPE],
    async onRootDrop(e) {
      // Read entries in directory and update state with relevant info.
      let dir = e.items.find(isDirectoryDropItem)!;
      let files = [];
      for await (let entry of dir.getEntries()) {
        files.push({
          name: entry.name,
          kind: entry.kind,
          type: entry.kind === 'directory' ? 'Directory' : entry.type
        });
      }
      setFiles(files);
    }
    /*- end highlight -*/
  });

  return (
    <Table
      aria-label="Droppable table"
      dragAndDropHooks={dragAndDropHooks}>
      <TableHeader>
        <Column>Kind</Column>
        <Column isRowHeader>Name</Column>
        <Column>Type</Column>
      </TableHeader>
      <TableBody items={files} renderEmptyState={() => 'Drop directory here'}>
        {item => (
          <Row id={item.name}>
            <Cell>{item.kind === 'directory' ? <Folder /> : <File />}</Cell>
            <Cell>{item.name}</Cell>
            <Cell>{item.type}</Cell>
          </Row>
        )}
      </TableBody>
    </Table>
  );
}

----------------------------------------

TITLE: Styling the SliderNumberField Input with CSS
DESCRIPTION: CSS styling for the React Aria Input component used within the SliderNumberField. The styles set a border radius and define a width of 3 characters for the input field.

LANGUAGE: css
CODE:
.react-aria-Input {
  border-radius: 6px;
  width: 3ch;
}

----------------------------------------

TITLE: Importing Tailwind CSS for React Aria Components Styling
DESCRIPTION: Imports a global Tailwind CSS file for styling React Aria Components.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Creating a CalendarDateTime in Gregorian Calendar
DESCRIPTION: Creates a CalendarDateTime representing February 3rd, 2022 at 9:15 AM in the Gregorian calendar system.

LANGUAGE: tsx
CODE:
import {CalendarDateTime} from '@internationalized/date';

let date = new CalendarDateTime(2022, 2, 3, 9, 15);

----------------------------------------

TITLE: Cycling Hours with 12-hour or 24-hour Format in TypeScript
DESCRIPTION: Demonstrates using the hourCycle option to cycle hours in either 12-hour or 24-hour format. With hourCycle set to 12, the AM/PM value is preserved when formatted.

LANGUAGE: tsx
CODE:
let date = parseZonedDateTime('2022-02-03T11:00[America/Los_Angeles]');
date.cycle('hour', 1); // 2022-02-03T12:00[America/Los_Angeles]
date.cycle('hour', 1, {hourCycle: 12}); // 2022-02-03T00:00[America/Los_Angeles]

let date = parseZonedDateTime('2022-02-03T23:00[America/Los_Angeles]');
date.cycle('hour', 1); // 2022-02-03T00:00[America/Los_Angeles]
date.cycle('hour', 1, {hourCycle: 12}); // 2022-02-03T12:00[America/Los_Angeles]

----------------------------------------

TITLE: Implementing Basic Form Validation with DateRangePicker
DESCRIPTION: Example of using DateRangePicker in a Form with native validation behavior. The isRequired prop ensures the user must select a date range before submitting the form.

LANGUAGE: tsx
CODE:
import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';

<Form validationBehavior="native" maxWidth="size-3000">
  {/*- begin highlight -*/}
  <DateRangePicker label="Date range" startName="startDate" endName="endDate" isRequired />
  {/*- end highlight -*/}
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: CSS Implementation for Card and Dialog Components
DESCRIPTION: Example CSS showing how styles can be defined for semantic elements in different container contexts, with different styling for the same semantic element.

LANGUAGE: CSS
CODE:
/* @adobe/spectrum-css/components/card/vars.css */
.spectrum-Card {
  border: 1px solid lightgrey;
  border-radius: 4px;
  background: white;
}

.spectrum-Card-title {
    font-size: 14px;
}
-------------------------------------
/* @adobe/spectrum-css/components/dialog/vars.css */
.spectrum-Dialog {
  border: 1px solid lightgrey;
  border-radius: 4px;
  background: white;
}

.spectrum-Dialog-title {
    font-size: 18px;
}

----------------------------------------

TITLE: Importing @react-aria/toggle Package Reference
DESCRIPTION: A code snippet showing the package name as a heading in markdown format. This indicates the package being documented in this file.

LANGUAGE: markdown
CODE:
# @react-aria/toggle

----------------------------------------

TITLE: Hidden CSS Imports for FileTrigger Examples
DESCRIPTION: CSS imports needed for the FileTrigger examples, including a theme and Button component styles.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";
@import './Button.mdx' layer(button);

----------------------------------------

TITLE: Adding Error Messages to TagGroup
DESCRIPTION: Example of using the errorMessage slot to provide validation error feedback to the user in a TagGroup.

LANGUAGE: tsx
CODE:
<TagGroup>
  <Label>Categories</Label>
  <TagList>
    <Tag>News</Tag>
    <Tag>Travel</Tag>
    <Tag>Gaming</Tag>
    <Tag>Shopping</Tag>
  </TagList>
  {/*- begin highlight -*/}
  <Text slot="errorMessage">Invalid set of categories.</Text>
  {/*- end highlight -*/}
</TagGroup>

----------------------------------------

TITLE: Tailwind CSS Configuration for Animation Plugins
DESCRIPTION: CSS import statements for Tailwind and required plugins when using Tailwind v4. This includes the tailwindcss-react-aria-components plugin for React Aria Components integration and tailwindcss-animate for animation utilities.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";
@plugin "tailwindcss-animate";

----------------------------------------

TITLE: Importing Documentation Components from React Spectrum
DESCRIPTION: Imports various documentation components from the @react-spectrum/docs package and package data for the @internationalized/number package.

LANGUAGE: jsx
CODE:
import {HeaderInfo, FunctionAPI, ClassAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@internationalized/number/package.json';

----------------------------------------

TITLE: Adding Links to Menu Items in React Spectrum
DESCRIPTION: Example showing how to create MenuItem components as links by passing the 'href' prop. These items can navigate to external URLs and target new browser windows using the 'target' attribute.

LANGUAGE: tsx
CODE:
<MyMenuButton label="Links">
  <MenuItem href="https://adobe.com/" target="_blank">Adobe</MenuItem>
  <MenuItem href="https://apple.com/" target="_blank">Apple</MenuItem>
  <MenuItem href="https://google.com/" target="_blank">Google</MenuItem>
  <MenuItem href="https://microsoft.com/" target="_blank">Microsoft</MenuItem>
</MyMenuButton>

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export for document structure.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Installing @react-stately/color Package
DESCRIPTION: Package name reference for the React Stately color module within the React Spectrum library.

LANGUAGE: markdown
CODE:
# @react-stately/color

----------------------------------------

TITLE: Adding Interactive Elements to Disclosure Component
DESCRIPTION: Example showing how to add interactive elements like buttons adjacent to the disclosure heading, ensuring proper accessibility and interaction.

LANGUAGE: tsx
CODE:
<Disclosure>
  <div style={{display: 'flex', alignItems: 'center'}}>
    <Heading>
      <Button slot="trigger">
        <svg viewBox="0 0 24 24">
          <path d="m8.25 4.5 7.5 7.5-7.5 7.5" />
        </svg>
        System Requirements
      </Button>
    </Heading>
    <Button>Click me</Button>
  </div>
  <DisclosurePanel>
    <p>Details about system requirements here.</p>
  </DisclosurePanel>
</Disclosure>

----------------------------------------

TITLE: Custom Toast Types with TypeScript
DESCRIPTION: Demonstrates how to use TypeScript generics with toast components to create custom toast content types. This example implements a custom toast interface with title and description properties.

LANGUAGE: tsx
CODE:
import type {QueuedToast} from '@react-stately/toast';

interface MyToast {
  title: string,
  description: string
}

function ToastProvider() {
  let state = useToastState<MyToast>();

  // ...
}

interface ToastProps {
  toast: QueuedToast<MyToast>
}

function Toast(props: ToastProps) {
  // ...

  let {toastProps, titleProps, descriptionProps, closeButtonProps} = useToast(props, state, ref);

  return (
    <div {...toastProps} ref={ref} className="toast">
      <div>
        <div {...titleProps}>{props.toast.content.title}</div>
        <div {...descriptionProps}>{props.toast.content.description}</div>
      </div>
      <Button {...closeButtonProps}>x</Button>
    </div>
  );
}

// Queuing a toast
state.add({title: 'Success!', description: 'Toast is done.'});

----------------------------------------

TITLE: Styling GridLayout ListBox with CSS
DESCRIPTION: CSS styling for the GridLayout example, including styles for the resizable container and the ListBox with grid layout. The CSS makes the container horizontally resizable within constraints and adjusts the width and font size of the grid items.

LANGUAGE: css
CODE:
.resizable {
  resize: horizontal;
  width: 400px;
  min-width: 240px;
  max-width: 100%;
  overflow: hidden;
}

.react-aria-ListBox[data-layout=grid] {
  max-width: none;
  width: 100%;

  [slot=label] {
    font-size: 12px;
  }
}

----------------------------------------

TITLE: Implementing Read-only NumberField in React Spectrum
DESCRIPTION: This example demonstrates how to create a read-only NumberField using the isReadOnly prop. Unlike disabled fields, read-only fields remain focusable and their contents can be copied but not modified.

LANGUAGE: tsx
CODE:
<NumberField label="Cookies" defaultValue={15} isReadOnly minValue={0} />

----------------------------------------

TITLE: Adding and Subtracting Durations from CalendarDate in TypeScript
DESCRIPTION: Demonstrates adding and subtracting DateDuration objects from CalendarDate objects to manipulate dates.

LANGUAGE: tsx
CODE:
let date = new CalendarDate(2022, 2, 3);

date.add({weeks: 1}); // 2022-02-10
date.add({months: 1}); // 2022-03-03
date.add({years: 1, months: 1, days: 1}); // 2023-03-04

date.subtract({weeks: 1}); // 2022-01-27
date.subtract({months: 1}); // 2022-01-03
date.subtract({years: 1, months: 1, days: 1}); // 2021-01-02

----------------------------------------

TITLE: Quiet ActionGroup in React Spectrum
DESCRIPTION: Shows an ActionGroup with the isQuiet prop, which applies a subtle visual style to the buttons group.

LANGUAGE: tsx
CODE:
<ActionGroup isQuiet>
  <Item key="add">Add</Item>
  <Item key="delete">Delete</Item>
  <Item key="edit">Edit</Item>
</ActionGroup>

----------------------------------------

TITLE: Implementing Custom Values in ComboBox
DESCRIPTION: Shows how to allow users to enter custom values in a ComboBox by using the allowsCustomValue prop, which prevents reverting to predefined options on blur.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal" allowsCustomValue>
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Importing CSS Dependencies for ProgressBar Example
DESCRIPTION: Imports the Tailwind CSS global styles needed for the ProgressBar component styling.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Package Import Reference for @react-stately/autocomplete
DESCRIPTION: Shows the package name for importing from React Spectrum's autocomplete state management package.

LANGUAGE: markdown
CODE:
# @react-stately/autocomplete

----------------------------------------

TITLE: Implementing Basic Disclosure Component in React Aria
DESCRIPTION: Basic example of implementing a Disclosure component with React Aria Components, including a trigger button and expandable panel.

LANGUAGE: tsx
CODE:
import {Disclosure, Button, DisclosurePanel, Heading} from 'react-aria-components';

<Disclosure>
  <Heading>
    <Button slot="trigger">
      <svg viewBox="0 0 24 24">
        <path d="m8.25 4.5 7.5 7.5-7.5 7.5" />
      </svg>
      System Requirements
    </Button>
  </Heading>
  <DisclosurePanel>
    <p>Details about system requirements here.</p>
  </DisclosurePanel>
</Disclosure>

----------------------------------------

TITLE: Markdown Frontmatter for React Spectrum Blog Post
DESCRIPTION: Markdown frontmatter defining metadata for the blog post, including the description and publication date for the February 15, 2022 release notes.

LANGUAGE: markdown
CODE:
---
description: We are back with a new year and a new component! The Contextual Help component has been added to React Spectrum thanks to @arumsey. This component is handy for showing users more information in forms and other views. We also have some new features including long press support for `MenuTrigger`, additional keyboard support in `Combobox` and `useMove`, and plenty of bug fixes.
date: 2022-02-15
---

----------------------------------------

TITLE: Implementing a Custom 4-5-4 Calendar System
DESCRIPTION: Creates a custom calendar implementation that follows a 4-5-4 format fiscal year calendar by extending the GregorianCalendar class and overriding key methods.

LANGUAGE: tsx
CODE:
import {GregorianCalendar} from '@internationalized/date';

function Example() {
  return <RangeCalendar firstDayOfWeek="sun" createCalendar={() => new Custom454()} />;
}

class Custom454 extends GregorianCalendar {
  // See @internationalized/date docs linked above...
  ///- begin collapse -///
  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];
  getDaysInMonth(date) {
    return this.weekPattern[date.month - 1] * 7;
  }

  fromJulianDay(jd: number): CalendarDate {
    let gregorian = super.fromJulianDay(jd);

    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');
    for (let months = 0; months < this.weekPattern.length; months++) {
      let weeksInMonth = this.weekPattern[months];
      let monthEnd = monthStart.add({weeks: weeksInMonth});
      if (monthEnd.compare(gregorian) > 0) {
        let days = gregorian.compare(monthStart);
        return new CalendarDate(this, monthStart.year, months + 1, days + 1);
      }
      monthStart = monthEnd;
    }

    throw Error('Date is not in any month somehow!');
  }

  toJulianDay(date: AnyCalendarDate): number {
    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');
    for (let month = 1; month < date.month; month++) {
      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});
    }

    let gregorian = monthStart.add({days: date.day - 1});
    return super.toJulianDay(gregorian);
  }

  getFormattableMonth(date) {
    let gregorian = toCalendar(date, new GregorianCalendar());
    return gregorian.set({month: date.month, day: 1});
  }

  isEqual(other) {
    return other instanceof Custom454;
  }
 ///- end collapse -///
}

----------------------------------------

TITLE: Custom Drag Preview Implementation with DragPreview Component
DESCRIPTION: Example showing how to create a custom drag preview that appears under the user's pointer while dragging, using the DragPreview component from React Aria's drag and drop system.

LANGUAGE: tsx
CODE:
/*- begin highlight -*/
import {DragPreview} from '@react-aria/dnd';
/*- end highlight -*/

function Draggable() {
  /*- begin highlight -*/
  let preview = React.useRef(null);
  /*- end highlight -*/
  let {dragProps, isDragging} = useDrag({
    /*- begin highlight -*/
    preview,
    /*- end highlight -*/
    getItems() {
      return [{
        'text/plain': 'hello world'
      }];
    }
  });

  return (
    <>
      <div {...dragProps} role="button" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>
        Drag me
      </div>
      {/*- begin highlight -*/}
      <DragPreview ref={preview}>
        {items => <div style={{background: 'green', color: 'white'}}>{items[0]['text/plain']}</div>}
      </DragPreview>
      {/*- end highlight -*/}
    </>
  );
}

<Draggable />
<DropTarget />

----------------------------------------

TITLE: Defining Divider Component Interface in TypeScript
DESCRIPTION: TypeScript interface for the Divider component that defines available props. It includes size options (S, M, L with L as default) and orientation options (horizontal or vertical with horizontal as default).

LANGUAGE: typescript
CODE:
interface Divider {
  size?: 'S' | 'M' | 'L', // Default L
  orientation?: 'horizontal' | 'vertical' // Default horizontal
}

----------------------------------------

TITLE: Importing and Exporting BlogPostLayout in React Spectrum Documentation
DESCRIPTION: This code imports BlogPostLayout and Hero components from the @react-spectrum/docs package and sets up the default export for the blog post layout template.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Creating a ColorSliderDescription Component with ColorSliderContext in React
DESCRIPTION: This example demonstrates creating a ColorSliderDescription component that uses ColorSliderContext to associate a description with a color slider via aria-describedby. It uses the useId hook to generate a unique ID for the description element.

LANGUAGE: tsx
CODE:
import {ColorSliderContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface ColorSliderDescriptionProps {
  children?: React.ReactNode,
  description?: string
}

function ColorSliderDescription({children, description}: ColorSliderDescriptionProps) {
  let descriptionId = useId();
  return (
    <div>
      <ColorSliderContext.Provider value={{'aria-describedby': descriptionId}}>
        {children}
      </ColorSliderContext.Provider>
      <small id={descriptionId}>{description}</small>
    </div>
  );
}

<ColorSliderDescription description="It's not easy being green.">
  <MyColorSlider channel="green" defaultValue="#006" />
</ColorSliderDescription>

----------------------------------------

TITLE: Creating a Controlled TextField Component
DESCRIPTION: Example demonstrating how to implement a controlled TextField component where the value is managed by React state and updated through the onChange handler.

LANGUAGE: TSX
CODE:
function Example() {
  let [text, setText] = React.useState('');

  return (
    <>
      <TextField label="Your text" onChange={setText} />
      <p>Mirrored text: {text}</p>
    </>
  );
}

----------------------------------------

TITLE: Implementing Popover Dialog in React Spectrum
DESCRIPTION: Shows how to create a popover dialog using DialogTrigger. Popovers are displayed as overlays anchored to their trigger element, but will display as modals on mobile devices.

LANGUAGE: tsx
CODE:
<DialogTrigger type="popover">
  <ActionButton>Trigger Popover</ActionButton>
  <Dialog>
    <Heading>Popover</Heading>
    <Divider />
    <Content>
      <Text>
        This is a popover.
      </Text>
    </Content>
  </Dialog>
</DialogTrigger>

----------------------------------------

TITLE: Defining TypeScript Interfaces for DatePicker, Calendar and Time Components
DESCRIPTION: TypeScript interface definitions for DatePicker, DateRangePicker, Calendar, and RangeCalendar components. These interfaces define the props and value types for date-related components, including shared properties like min/max values and formatting options.

LANGUAGE: javascript
CODE:
type DateValue = string | number | Date;
interface DatePickerBase extends InputBase {
  minValue?: DateValue,
  maxValue?: DateValue,
  formatOptions?: Intl.DateTimeFormatOptions,
  placeholderDate?: DateValue,
  isQuiet?: boolean,
  hideCalendar?: boolean
}

interface DatePicker extends DatePickerBase, ValueBase<DateValue> {}

type DateRange = RangeValue<DateValue>;
interface DateRangePicker extends DatePickerBase, ValueBase<DateRange> {}

interface CalendarBase {
  minValue?: DateValue,
  maxValue?: DateValue,
  isDisabled?: boolean,
  isReadOnly?: boolean,
  autoFocus?: boolean
}

interface Calendar extends CalendarBase, ValueBase<DateValue> {}
interface RangeCalendar extends CalendarBase, ValueBase<DateRange> {}

----------------------------------------

TITLE: Configuring Selection-Only Disabled Behavior in List Component
DESCRIPTION: This example shows how to configure disabled rows to only disable selection while still allowing other interactions like focus, dragging, or actions using the disabledBehavior prop set to 'selection'.

LANGUAGE: tsx
CODE:
<PokemonList aria-label="List with selection disabled for disabled rows" selectionMode="multiple" disabledKeys={[3]} disabledBehavior="selection" />

----------------------------------------

TITLE: Styling React Aria GridList Components with CSS
DESCRIPTION: These CSS examples show how to target React Aria GridList components using their default class names and data attributes. The selectors can be used to style components based on different states like selection or focus.

LANGUAGE: css
CODE:
.react-aria-GridList {
  /* ... */
}

LANGUAGE: css
CODE:
.react-aria-GridListItem[data-selected] {
  /* ... */
}

.react-aria-GridListItem[data-focused] {
  /* ... */
}

----------------------------------------

TITLE: Styling Error Messages in RangeCalendar with CSS
DESCRIPTION: CSS styles for displaying error messages in the RangeCalendar component. The error message is styled with a smaller font size and uses the invalid color variable.

LANGUAGE: css
CODE:
.react-aria-RangeCalendar {
  [slot=errorMessage] {
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: Styling ColorField with CSS
DESCRIPTION: CSS styling for the ColorField component, including input appearance, focus states, and layout. Demonstrates the structure of styling for React Aria Components.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-ColorField {
  display: flex;
  flex-direction: column;
  color: var(--text-color);

  .react-aria-Input {
    padding: 0.286rem;
    margin: 0;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--field-background);
    font-size: 1.143rem;
    color: var(--field-text-color);
    width: 100%;
    max-width: 12ch;
    box-sizing: border-box;

    &[data-focused] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -1px;
    }
  }
}

----------------------------------------

TITLE: Importing the Slider Component in React Spectrum
DESCRIPTION: Code showing how to import the Slider component and Flex layout component from React Spectrum library.

LANGUAGE: jsx
CODE:
import {Flex} from '@react-spectrum/layout';
import {Slider} from '@react-spectrum/slider';

----------------------------------------

TITLE: Importing Calendar Utilities for Custom Calendars
DESCRIPTION: Import statement for required types and functions from @internationalized/date package needed for implementing custom calendar systems.

LANGUAGE: tsx
CODE:
import type {AnyCalendarDate} from '@internationalized/date';
import {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';

----------------------------------------

TITLE: Creating a ColorNumberField Component with ColorSliderStateContext in React
DESCRIPTION: This example creates a ColorNumberField component that integrates with a ColorSlider by accessing its state through ColorSliderStateContext. It allows users to enter a number to update the color channel value.

LANGUAGE: tsx
CODE:
import {ColorSliderStateContext, LabelContext, NumberField, Input, useSlottedContext} from 'react-aria-components';

function ColorNumberField({channel}) {
  let state = React.useContext(ColorSliderStateContext)!;
  let labelProps = useSlottedContext(LabelContext)!;
  return (
    <NumberField
      aria-labelledby={labelProps.id}
      value={state.value.getChannelValue(channel)}
      minValue={state.value.getChannelRange(channel).minValue}
      maxValue={state.value.getChannelRange(channel).maxValue}
      onChange={v => state.setValue(state.value.withChannelValue(channel, v))}
      formatOptions={state.value.getChannelFormatOptions(channel)}>
      <Input />
    </NumberField>
  );
}

<ColorSlider channel="hue" defaultValue="hsl(0, 100%, 50%)">
  <Label />
  <ColorNumberField channel="hue" />
  <SliderTrack>
    <ColorThumb />
  </SliderTrack>
</ColorSlider>

----------------------------------------

TITLE: Importing Calendar Component in React Spectrum
DESCRIPTION: Imports the Calendar component from @react-spectrum/calendar along with supporting components like Flex and ActionButton.

LANGUAGE: jsx
CODE:
import {Calendar} from '@react-spectrum/calendar';
import {Flex} from '@react-spectrum/layout';
import {ActionButton} from '@adobe/react-spectrum';

----------------------------------------

TITLE: Dynamic Styling with Class Name Functions
DESCRIPTION: Using a function for the className prop to apply different classes based on component states, useful for utility CSS frameworks like Tailwind.

LANGUAGE: jsx
CODE:
<Link className={({isCurrent}) => isCurrent ? 'bg-gray-700' : 'bg-gray-600'} />

----------------------------------------

TITLE: ActionGroup with Disabled Items in React Spectrum
DESCRIPTION: Demonstrates an ActionGroup with specific items disabled using the disabledKeys prop, which accepts an array of item keys to disable.

LANGUAGE: tsx
CODE:
<ActionGroup disabledKeys={['add', 'delete']}>
  <Item key="add">Add</Item>
  <Item key="delete">Delete</Item>
  <Item key="edit">Edit</Item>
</ActionGroup>

----------------------------------------

TITLE: Menu Component Structure and Anatomy
DESCRIPTION: Illustrates the structure and composition of Menu components, showing how MenuTrigger, Button, Popover, Menu, MenuItem, and other components work together.

LANGUAGE: tsx
CODE:
import {MenuTrigger, Button, Popover, Menu, MenuItem, MenuSection, Separator, Header, Text, Keyboard} from 'react-aria-components';

<MenuTrigger>
  <Button />
  <Popover>
    <Menu>
      <MenuItem>
        <Text slot="label" />
        <Text slot="description" />
        <Keyboard />
      </MenuItem>
      <Separator />
      <MenuSection>
        <Header />
        <MenuItem />
      </MenuSection>
    </Menu>
  </Popover>
</MenuTrigger>

----------------------------------------

TITLE: Implementing useDrag Hook in TypeScript
DESCRIPTION: The useDrag hook makes an element draggable and provides the data to drag. It returns props for the draggable element and a drag affordance button, along with the dragging state to update visual appearance.

LANGUAGE: typescript
CODE:
interface DragItem {
  /** A list of mime types or custom drag types that this item provides. */
  types: Iterable<string>,
  /** A function that the item data for a given drag type. */
  getData: (type: string) => string
}

interface DragDropEvent {
  // Relative to the target element's position
  x: number,
  y: number
}

interface DragStartEvent extends DragDropEvent {
  type: 'dragstart'
}

interface DragMoveEvent extends DragDropEvent {
  type: 'dragmove'
}

type DropOperation = 'copy' | 'link' | 'move' | 'cancel';
interface DragEndEvent extends DragDropEvent {
  type: 'dragend',
  /** 
   * The operation that was performed by the drop target. 
   * Allows the drag target to respond accordingly, e.g. by removing the
   * dragged items if they were moved.
   */
  dropOperation: DropOperation
}

interface DragOptions {
  /** Fired when a drag begins. */
  onDragStart?: (e: DragStartEvent) => void,
  /** Fired when the position of the drag moves. */
  onDragMove?: (e: DragMoveEvent) => void,
  /** Fired when the drag ends, either as a result of a drop or a cancelation. */
  onDragEnd?: (e: DragEndEvent) => void,
  /** Called when a drag starts to get the items to drag. */
  getItems: () => DragItem[],
  /** Function that is called to render a preview to display while dragging. */
  renderPreview?: (items: DragItem[]) => JSX.Element,
  /** 
   * Optional function to return the drop operations that are allowed for
   * the dragged items. If not provided, all drop operations are allowed.
   */
  getAllowedDropOperations?: () => DropOperation[]
}

interface DragResult {
  /** Props for the draggable element. */
  dragProps: HTMLAttributes<HTMLElement>,
  /** Props for the drag affordance button. */
  dragButtonProps: ButtonHTMLAttributes<HTMLButtonElement>,
  /** Whether the element is currently being dragged. */
  isDragging: boolean
}

declare function useDrag(options: DragOptions): DragResult;

----------------------------------------

TITLE: Importing Documentation Resources for useTimeFieldState
DESCRIPTION: Imports necessary documentation components, type definitions, and package metadata to build the API documentation page for useTimeFieldState.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/datepicker';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/datepicker/package.json';

----------------------------------------

TITLE: Using Video Component for Focus Ring Demonstration in React
DESCRIPTION: Demonstrates how to embed a video showing focus ring behavior using the Video component from React Spectrum. The video auto-plays, loops, and is muted with specific styling applied for proper display.

LANGUAGE: jsx
CODE:
<Video src={focusRingVideoUrl} loop autoPlay muted style={{maxWidth: 'min(100%, 640px)', display: 'block', margin: '20px auto'}} />

----------------------------------------

TITLE: Prepending Items to a List in React
DESCRIPTION: Demonstrates adding items to the beginning of a list using the prepend method. Shows prepending both single and multiple items at once.

LANGUAGE: tsx
CODE:
// Prepend an item
list.prepend({name: 'Horse'});

// Prepend multiple items
list.prepend({name: 'Horse'}, {name: 'Giraffe'});

----------------------------------------

TITLE: Styling Breadcrumbs with CSS Classes
DESCRIPTION: Example of targeting the Breadcrumbs component using CSS selectors with the default class name provided by React Aria.

LANGUAGE: css
CODE:
.react-aria-Breadcrumbs {
  /* ... */
}

----------------------------------------

TITLE: Fullscreen Takeover Dialog Example
DESCRIPTION: Example demonstrating a fullscreen takeover dialog that covers the entire screen. Uses the 'fullscreenTakeover' type with DialogContainer.

LANGUAGE: tsx
CODE:
function Example(props) {
  let [isOpen, setOpen] = React.useState(false);

  return (
    <>
      <ActionButton onPress={() => setOpen(true)}>
        <Edit />
        <Text>Edit</Text>
      </ActionButton>
      <DialogContainer type="fullscreenTakeover" onDismiss={() => setOpen(false)} {...props}>
        {isOpen &&
          <EditDialog />
        }
      </DialogContainer>
    </>
  );
}

----------------------------------------

TITLE: Basic Tooltip Implementation with React Aria Components
DESCRIPTION: A basic implementation of a tooltip using TooltipTrigger, Tooltip, OverlayArrow, and Button components from react-aria-components. The tooltip displays 'Edit' when hovering over a button with a pencil icon.

LANGUAGE: tsx
CODE:
import {TooltipTrigger, Tooltip, OverlayArrow, Button} from 'react-aria-components';

<TooltipTrigger>
  <Button>✏️</Button>
  <Tooltip>
    <OverlayArrow>
      <svg width={8} height={8} viewBox="0 0 8 8"><path d="M0 0 L4 4 L8 0" /></svg>
    </OverlayArrow>
    Edit
  </Tooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Defining Link Component Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the Link component that extends DOMProps, StyleProps, and PressEvents interfaces. It specifies the component's props including variant options, children requirements, and quiet mode toggle.

LANGUAGE: typescript
CODE:
interface Link extends DOMProps, StyleProps, PressEvents {
  variant?: 'primary' | 'secondary' | 'overBackground', // default primary
  children: ReactNode,
  isQuiet?: boolean
}

----------------------------------------

TITLE: Handling Actions in Non-Selectable ActionGroup with React
DESCRIPTION: Shows how to handle actions in a non-selectable ActionGroup using the onAction prop to track which item was activated.

LANGUAGE: tsx
CODE:
import type {Key} from '@adobe/react-spectrum';

function Example() {
  let [actionKey, setActionKey] = React.useState<Key>('');
  return (
    <>
      <ActionGroup onAction={setActionKey}>
        <Item key="add">Add</Item>
        <Item key="delete">Delete</Item>
        <Item key="edit">Edit</Item>
      </ActionGroup>
      <p>Action: {actionKey}</p>
    </>
  );
}

----------------------------------------

TITLE: Using MeterContext for Shared Configuration
DESCRIPTION: Using the MeterContext provider to apply shared formatting options to multiple Meter components.

LANGUAGE: tsx
CODE:
import {MeterContext} from 'react-aria-components';

<MeterContext.Provider value={{formatOptions: {style: 'decimal'}}}>
  <MyMeter label="Widgets" value={28.5} />
  <MyMeter label="Cookies" value={68.75} />
</MeterContext.Provider>

----------------------------------------

TITLE: Customizing Component Child Elements with childElementProps
DESCRIPTION: Example of using the childElementProps prop to customize child elements of a component. This allows adding custom class names and attributes to specific parts of a component without relying on Spectrum CSS class names.

LANGUAGE: jsx
CODE:
<SplitButton
  {/* ... */}
  childElementProps={{
    menu: {
      className: 'my-custom-class-name',
      'data-test-id': 'my-split-button-menu'
    }
  }} />

----------------------------------------

TITLE: Read-only TimeField Implementation
DESCRIPTION: Example showing a TimeField in read-only mode, which allows focusing but prevents value modification.

LANGUAGE: tsx
CODE:
<TimeField label="Event time" value={new Time(11)} isReadOnly />

----------------------------------------

TITLE: Importing and Exporting BlogPostLayout Component in React
DESCRIPTION: This code imports BlogPostLayout and Hero components from the @react-spectrum/docs package and exports BlogPostLayout as the default export for the file. This is part of the setup for a blog post page.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Styling Empty State for GridList with CSS
DESCRIPTION: CSS styling for the empty state of a GridList, centering the content and applying italic styling.

LANGUAGE: css
CODE:
.react-aria-GridList {
  &[data-empty] {
    align-items: center;
    justify-content: center;
    font-style: italic;
  }
}

----------------------------------------

TITLE: Applying Dark Color Scheme with React Spectrum Provider
DESCRIPTION: Demonstrates how to override the default system color scheme by explicitly setting the colorScheme prop to 'dark' in the Provider component.

LANGUAGE: tsx
CODE:
<Provider colorScheme="dark">
  <ActionButton margin="size-200">I'm a dark button</ActionButton>
</Provider>

----------------------------------------

TITLE: Ejecting from Create React App Configuration
DESCRIPTION: Extracts all configuration files and transitive dependencies into the project for full control, but cannot be reversed once executed.

LANGUAGE: bash
CODE:
npm run eject

----------------------------------------

TITLE: Referencing React Spectrum ActionGroup Package in Markdown
DESCRIPTION: A simple markdown reference to the @react-spectrum/actiongroup package, indicating it's part of the React Spectrum library and directing users to the GitHub repository for more information.

LANGUAGE: markdown
CODE:
# @react-spectrum/actiongroup

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: HTML Form Integration with Select Component
DESCRIPTION: Example showing how to integrate a Select component with HTML forms by using the name prop. The id of the selected item will be submitted to the server when the form is submitted.

LANGUAGE: tsx
CODE:
<MySelect
  label="Favorite Animal"
  ///- begin highlight -///
  name="favoriteAnimalId"
  ///- end highlight -///
>
  <ListBoxItem id="panda">Panda</ListBoxItem>
  <ListBoxItem id="cat">Cat</ListBoxItem>
  <ListBoxItem id="dog">Dog</ListBoxItem>
</MySelect>

----------------------------------------

TITLE: Defining Blog Post Frontmatter in Markdown
DESCRIPTION: This code defines the frontmatter for the blog post, including a description of the release and the publication date in YAML format.

LANGUAGE: markdown
CODE:
---
description: After a small break, we are back with another release. This one is jam packed with fixes and new features. We have improved Picker, Tooltip, ComboBox and updated a number of our aria hooks. Also check out our new components currently under construction including a Color package. A special thanks to all of our contributors for a very active new year.
date: 2021-02-17
---

----------------------------------------

TITLE: Implementing Resizable Columns in TableView with JSX
DESCRIPTION: Example showing how to configure a TableView with resizable columns using the allowsResizing, defaultWidth, minWidth, and maxWidth props. The example demonstrates different width configurations including pixel values, fractional units, and percentages.

LANGUAGE: JSX
CODE:
<TableView width={800} onColumnResize={onResize} onColumnResizeEnd={onResizeEnd}>
    <TableHeader>
        <Column allowsResizing defaultWidth={200} minWidth={175}>File Name</Column>
        <Column allowsResizing defaultWidth="1fr" maxWidth={500}>Size</Column>
        <Column allowsResizing defaultWidth="20%">Type</Column>
    </TableHeader>
    ...
</TableView>

----------------------------------------

TITLE: Building and Starting Remix Production Server with Vite
DESCRIPTION: Commands to build a Remix application for production and start the production server. The build command creates optimized production assets while the start command runs the compiled application.

LANGUAGE: shellscript
CODE:
npm run build
npm run start

----------------------------------------

TITLE: Creating a Read-only Calendar Component
DESCRIPTION: Example demonstrating how to create a read-only Calendar component that remains focusable but has an immutable value using the isReadOnly prop.

LANGUAGE: tsx
CODE:
<MyCalendar aria-label="Event date" value={today(getLocalTimeZone())} isReadOnly />

----------------------------------------

TITLE: Installing and Running the Development Server with Esbuild
DESCRIPTION: Commands to install dependencies, start the Esbuild development server, and run a simple HTTP server to serve the built files.

LANGUAGE: bash
CODE:
yarn install
yarn start
python -m http.server

----------------------------------------

TITLE: Customizing Label Alignment in SearchAutocomplete
DESCRIPTION: Demonstrates how to customize the label position and alignment in a SearchAutocomplete component. This example positions the label at the side and aligns it to the end of the component.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Favorite Animal" labelPosition="side" labelAlign="end">
  <Item>Red Panda</Item>
  <Item>Cat</Item>
  <Item>Dog</Item>
  <Item>Aardvark</Item>
  <Item>Kangaroo</Item>
  <Item>Snake</Item>
</SearchAutocomplete>

----------------------------------------

TITLE: Basic FileTrigger Implementation
DESCRIPTION: Shows the basic import and structure for implementing a FileTrigger component with a Button child.

LANGUAGE: tsx
CODE:
import {FileTrigger, Button} from '@adobe/react-spectrum';

<FileTrigger>
  <Button />
</FileTrigger>

----------------------------------------

TITLE: Listing Released React Spectrum Packages and Versions
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem, organized by their namespace (@adobe/react-spectrum, react-aria, react-stately, @react-aria/*, @react-spectrum/*, @react-stately/*, @react-types/*, and @spectrum-icons/*) with their corresponding version numbers.

LANGUAGE: markdown
CODE:
 - @adobe/react-spectrum@3.4.0
 - react-aria@3.0.0
 - react-stately@3.0.0
 - @react-aria/actiongroup@3.1.1
 - @react-aria/aria-modal-polyfill@3.2.1
 - @react-aria/breadcrumbs@3.1.1
 - @react-aria/button@3.2.2
 - @react-aria/checkbox@3.2.1
 - @react-aria/dialog@3.1.2
 - @react-aria/focus@3.2.2
 - @react-aria/i18n@3.1.2
 - @react-aria/interactions@3.2.1
 - @react-aria/label@3.1.1
 - @react-aria/link@3.1.2
 - @react-aria/listbox@3.2.1
 - @react-aria/menu@3.1.2
 - @react-aria/meter@3.1.1
 - @react-aria/overlays@3.4.0
 - @react-aria/progress@3.1.1
 - @react-aria/radio@3.1.2
 - @react-aria/searchfield@3.1.1
 - @react-aria/select@3.2.1
 - @react-aria/selection@3.2.1
 - @react-aria/separator@3.1.1
 - @react-aria/slider@3.0.0-alpha.2
 - @react-aria/ssr@3.0.1
 - @react-aria/switch@3.1.1
 - @react-aria/table@3.0.0-alpha.7
 - @react-aria/tabs@3.0.0-alpha.1
 - @react-aria/textfield@3.2.1
 - @react-aria/toggle@3.1.1
 - @react-aria/tooltip@3.0.0
 - @react-aria/utils@3.3.0
 - @react-aria/virtualizer@3.2.0
 - @react-aria/visually-hidden@3.2.1
 - @react-spectrum/actiongroup@3.1.1
 - @react-spectrum/breadcrumbs@3.1.3
 - @react-spectrum/button@3.2.1
 - @react-spectrum/buttongroup@3.1.2
 - @react-spectrum/checkbox@3.2.1
 - @react-spectrum/dialog@3.3.0
 - @react-spectrum/divider@3.1.1
 - @react-spectrum/form@3.2.1
 - @react-spectrum/icon@3.2.0
 - @react-spectrum/illustratedmessage@3.1.1
 - @react-spectrum/image@3.1.1
 - @react-spectrum/label@3.2.1
 - @react-spectrum/layout@3.1.3
 - @react-spectrum/link@3.1.1
 - @react-spectrum/listbox@3.2.1
 - @react-spectrum/menu@3.2.1
 - @react-spectrum/meter@3.1.1
 - @react-spectrum/overlays@3.2.2
 - @react-spectrum/picker@3.2.1
 - @react-spectrum/progress@3.1.1
 - @react-spectrum/provider@3.1.2
 - @react-spectrum/radio@3.1.1
 - @react-spectrum/searchfield@3.1.1
 - @react-spectrum/statuslight@3.1.1
 - @react-spectrum/switch@3.1.1
 - @react-spectrum/table@3.0.0-alpha.7
 - @react-spectrum/tabs@3.0.0-alpha.2
 - @react-spectrum/text@3.1.1
 - @react-spectrum/textfield@3.1.3
 - @react-spectrum/theme-light@3.0.0
 - @react-spectrum/tooltip@3.0.0
 - @react-spectrum/utils@3.3.0
 - @react-spectrum/view@3.1.1
 - @react-spectrum/well@3.1.1
 - @react-stately/checkbox@3.0.1
 - @react-stately/collections@3.2.1
 - @react-stately/data@3.1.1
 - @react-stately/layout@3.1.2
 - @react-stately/list@3.2.1
 - @react-stately/menu@3.2.1
 - @react-stately/overlays@3.1.1
 - @react-stately/radio@3.2.1
 - @react-stately/searchfield@3.1.1
 - @react-stately/select@3.1.1
 - @react-stately/selection@3.2.1
 - @react-stately/slider@3.0.0-alpha.2
 - @react-stately/table@3.0.0-alpha.6
 - @react-stately/toggle@3.2.1
 - @react-stately/tooltip@3.0.0
 - @react-stately/tree@3.1.2
 - @react-stately/utils@3.1.1
 - @react-stately/virtualizer@3.1.2
 - @react-types/actiongroup@3.1.1
 - @react-types/breadcrumbs@3.1.1
 - @react-types/button@3.2.1
 - @react-types/buttongroup@3.1.1
 - @react-types/checkbox@3.2.1
 - @react-types/dialog@3.3.0
 - @react-types/divider@3.1.1
 - @react-types/form@3.2.1
 - @react-types/illustratedmessage@3.1.1
 - @react-types/image@3.1.1
 - @react-types/label@3.2.1
 - @react-types/layout@3.1.1
 - @react-types/link@3.1.1
 - @react-types/listbox@3.1.1
 - @react-types/menu@3.1.1
 - @react-types/meter@3.1.1
 - @react-types/overlays@3.2.1
 - @react-types/progress@3.1.1
 - @react-types/provider@3.1.1
 - @react-types/radio@3.1.1
 - @react-types/searchfield@3.1.1
 - @react-types/select@3.1.1
 - @react-types/shared@3.2.1
 - @react-types/slider@3.0.0-alpha.1
 - @react-types/statuslight@3.1.1
 - @react-types/switch@3.1.1
 - @react-types/table@3.0.0-rc.5
 - @react-types/tabs@3.0.0-alpha.1
 - @react-types/text@3.1.1
 - @react-types/textfield@3.2.1
 - @react-types/tooltip@3.0.0
 - @react-types/view@3.1.1
 - @react-types/well@3.1.1
 - @spectrum-icons/color@3.2.0
 - @spectrum-icons/illustrations@3.2.0
 - @spectrum-icons/ui@3.2.0
 - @spectrum-icons/workflow@3.2.0

----------------------------------------

TITLE: Including Custom Icons with React Spectrum Icon Component
DESCRIPTION: Shows how to wrap custom SVG components with the Icon component from @react-spectrum/icon. This approach allows custom icons to inherit the scale property from the React Spectrum Provider.

LANGUAGE: jsx
CODE:
import CustomSVGComponent from '@a4u/product/custom-icons/CustomSVGComponent';

<Icon><CustomSVGComponent /></Icon>

----------------------------------------

TITLE: Importing BlogPostLayout and Hero Components in React
DESCRIPTION: Import statement for BlogPostLayout and Hero components from the @react-spectrum/docs package, and default export of BlogPostLayout.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Setting Markdown Frontmatter for Documentation Page
DESCRIPTION: Defines metadata for the documentation page including category, keywords, and order in the documentation hierarchy.

LANGUAGE: Markdown
CODE:
---
category: Concepts
keywords: [drag, drop, dnd, drag and drop, aria, accessibility]
order: 10
---

----------------------------------------

TITLE: SearchAutocomplete with Link Items
DESCRIPTION: Implementation of SearchAutocomplete with items that act as links to external websites using the href prop on Item components.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Tech company websites">
  <Item href="https://adobe.com/" target="_blank">Adobe</Item>
  <Item href="https://apple.com/" target="_blank">Apple</Item>
  <Item href="https://google.com/" target="_blank">Google</Item>
  <Item href="https://microsoft.com/" target="_blank">Microsoft</Item>
</SearchAutocomplete>

----------------------------------------

TITLE: Styling Disabled Calendar Cells with CSS
DESCRIPTION: CSS styling for disabled dates in the RangeCalendar component. It targets cells with the data-disabled attribute and applies a disabled text color to them.

LANGUAGE: css
CODE:
.react-aria-RangeCalendar {
  .react-aria-CalendarCell {
    &[data-disabled] {
      color: var(--text-color-disabled);
    }
  }
}

----------------------------------------

TITLE: Importing Layout Component from React Spectrum Docs
DESCRIPTION: Imports and exports the Layout component from the React Spectrum documentation library to structure the page.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Styling the DatePicker Component with CSS
DESCRIPTION: This CSS snippet shows how to style a DatePicker component, including its group container, buttons, and date input. It handles various states like pressed and focused elements.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.react-aria-DatePicker {
  color: var(--text-color);

  .react-aria-Group {
    display: flex;
    width: fit-content;
    align-items: center;
  }

  .react-aria-Button {
    background: var(--highlight-background);
    color: var(--highlight-foreground);
    border: 2px solid var(--field-background);
    forced-color-adjust: none;
    border-radius: 4px;
    border: none;
    margin-left: -1.929rem;
    width: 1.429rem;
    height: 1.429rem;
    padding: 0;
    font-size: 0.857rem;
    box-sizing: content-box;

    &[data-pressed] {
      box-shadow: none;
      background: var(--highlight-background);
    }

    &[data-focus-visible] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: 2px;
    }
  }

  .react-aria-DateInput {
    padding: 4px 2.5rem 4px 8px;
  }
}

.react-aria-Popover[data-trigger=DatePicker] {
  max-width: unset;
}

----------------------------------------

TITLE: Rendering Video Components in React
DESCRIPTION: Demonstrates how to use the Video component to display hover interaction examples with autoplay and looping enabled.

LANGUAGE: jsx
CODE:
<Video src={hoverVideoUrl} loop autoPlay muted />

LANGUAGE: jsx
CODE:
<Video src={hoveriPadVideoUrl} loop autoPlay muted />

----------------------------------------

TITLE: Setting Minimum Date Value Constraint in DateField
DESCRIPTION: Shows how to restrict date selection to only allow dates after today using the minValue prop with the today() function from @internationalized/date.

LANGUAGE: tsx
CODE:
import {today} from '@internationalized/date';

<Form validationBehavior="native" maxWidth="size-3000">
  <DateField
    label="Appointment date"
    minValue={today(getLocalTimeZone())}
    defaultValue={parseDate('2022-02-03')} />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Creating Responsive Grid Layout with Breakpoints
DESCRIPTION: Complex example demonstrating a responsive layout using Grid with different area configurations and column definitions across breakpoints. The layout adapts from a stacked mobile view to multi-column layouts at medium and large breakpoints.

LANGUAGE: tsx
CODE:
<Grid
  areas={{
    base: [
      'header',
      'nav',
      'content',
      'footer'
    ],
    M: [
      'header   header',
      'nav      content',
      'nav      content',
      'footer   footer'
    ],
    L: [
      'header header  header',
      'nav    content toc',
      'nav    content toc',
      'footer footer  footer'
    ],
  }}
  columns={{
    M: ['size-2000', '1fr'],
    L: ['size-2000', '1fr', 'size-2000']
  }}
  gap="size-100">
  <View
    backgroundColor="celery-600"
    gridArea="header"
    height="size-1000" />
  <View
    backgroundColor="blue-600"
    gridArea="nav">
    <Flex direction={{base: 'row', M: 'column'}} gap="size-100" margin="size-100">
      <View backgroundColor="static-gray-50" height="size-250" minWidth="size-900" />
      <View backgroundColor="static-gray-50" height="size-250" minWidth="size-900" />
      <View backgroundColor="static-gray-50" height="size-250" minWidth="size-900" />
    </Flex>
  </View>
  <View
    backgroundColor="purple-600"
    gridArea="content"
    height="size-4600" />
  <View
    backgroundColor="magenta-600"
    gridArea="toc"
    minHeight="size-1000"
    isHidden={{base: true, L: false}} />
  <View
    backgroundColor="seafoam-600"
    gridArea="footer"
    height="size-1000" />
</Grid>

----------------------------------------

TITLE: Checkbox Group with Description in React
DESCRIPTION: Shows how to add a description to a checkbox group to provide additional context or help text for users.

LANGUAGE: tsx
CODE:
<CheckboxGroup label="Favorite sports" description="Select your favorite sports.">
  <Checkbox value="soccer">Soccer</Checkbox>
  <Checkbox value="baseball">Baseball</Checkbox>
  <Checkbox value="basketball">Basketball</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: ListBox with Static Sections
DESCRIPTION: Demonstrates how to group ListBox options into sections using the Section component with static items. Each section has a title and contains related items.

LANGUAGE: tsx
CODE:
<ListBox width="size-2400" aria-label="Pick your favorite" selectionMode="single">
  <Section title="Animals">
    <Item key="Aardvark">Aardvark</Item>
    <Item key="Kangaroo">Kangaroo</Item>
    <Item key="Snake">Snake</Item>
  </Section>
  <Section title="People">
    <Item key="Danni">Danni</Item>
    <Item key="Devon">Devon</Item>
    <Item key="Ross">Ross</Item>
  </Section>
</ListBox>

----------------------------------------

TITLE: Customizing First Day of Week in React Spectrum DatePicker
DESCRIPTION: Example showing how to set a custom first day of the week using the firstDayOfWeek prop, overriding the default behavior based on locale.

LANGUAGE: tsx
CODE:
<DatePicker label="Appointment date" firstDayOfWeek="mon" />

----------------------------------------

TITLE: Importing React Spectrum Documentation Components in JSX
DESCRIPTION: Sets up the layout and styling imports for the documentation page from React Spectrum. This imports the necessary CSS and Layout component, then exports the Layout as the default export.

LANGUAGE: jsx
CODE:
import style from '@react-spectrum/docs/src/docs.css';
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Implementing a Custom 4-5-4 Calendar System
DESCRIPTION: Shows how to create a custom calendar system that follows a 4-5-4 format where month ranges don't follow the usual Gregorian calendar. This example extends the GregorianCalendar class and overrides its methods.

LANGUAGE: tsx
CODE:
import {GregorianCalendar} from '@internationalized/date';

function Example() {
  return <MyRangeCalendar firstDayOfWeek="sun" createCalendar={() => new Custom454()} />;
}

class Custom454 extends GregorianCalendar {
  // See @internationalized/date docs linked above...
  ///- begin collapse -///
  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];
  getDaysInMonth(date) {
    return this.weekPattern[date.month - 1] * 7;
  }

  fromJulianDay(jd: number): CalendarDate {
    let gregorian = super.fromJulianDay(jd);

    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');
    for (let months = 0; months < this.weekPattern.length; months++) {
      let weeksInMonth = this.weekPattern[months];
      let monthEnd = monthStart.add({weeks: weeksInMonth});
      if (monthEnd.compare(gregorian) > 0) {
        let days = gregorian.compare(monthStart);
        return new CalendarDate(this, monthStart.year, months + 1, days + 1);
      }
      monthStart = monthEnd;
    }

    throw Error('Date is not in any month somehow!');
  }

  toJulianDay(date: AnyCalendarDate): number {
    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');
    for (let month = 1; month < date.month; month++) {
      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});
    }

    let gregorian = monthStart.add({days: date.day - 1});
    return super.toJulianDay(gregorian);
  }

  getFormattableMonth(date) {
    let gregorian = toCalendar(date, new GregorianCalendar());
    return gregorian.set({month: date.month, day: 1});
  }

  isEqual(other) {
    return other instanceof Custom454;
  }
 ///- end collapse -///

----------------------------------------

TITLE: Showing Loading State in ListBox
DESCRIPTION: Example demonstrating how to display a loading state in a ListBox component by setting the isLoading prop to true. This shows a progress indicator while content is being loaded.

LANGUAGE: tsx
CODE:
<ListBox
  isLoading
  aria-label="Choose frequency"
  selectionMode="single"
  width="size-1200">
  {[]}
</ListBox>

----------------------------------------

TITLE: Customizing Label Alignment and Position in React Spectrum DatePicker
DESCRIPTION: Example showing how to adjust label position and alignment using the labelPosition and labelAlign props to place the label to the side and align it to the end.

LANGUAGE: tsx
CODE:
<DatePicker label="Birth date" labelPosition="side" labelAlign="end" />

----------------------------------------

TITLE: Creating a Sectioned Picker with React Spectrum
DESCRIPTION: Shows how to create a dropdown picker component with sections and complex options using React Spectrum. The example demonstrates item grouping, icons, and descriptive text within the dropdown.

LANGUAGE: tsx
CODE:
<Picker label="Options">
  <Section title="Permission">
    <Item textValue="Read">
      <Book />
      <Text>Read</Text>
      <Text slot="description">Read Only</Text>
    </Item>
    <Item textValue="Write">
      <Draw />
      <Text>Write</Text>
      <Text slot="description">Read and Write Only</Text>
    </Item>
    <Item textValue="Admin">
      <BulkEditUsers />
      <Text>Admin</Text>
      <Text slot="description">Full access</Text>
    </Item>
  </Section>
</Picker>

----------------------------------------

TITLE: Converting ZonedDateTime to String Representation in TypeScript
DESCRIPTION: Creates a ZonedDateTime and demonstrates converting it to an ISO 8601 string format using the toString method.

LANGUAGE: tsx
CODE:
let date = new ZonedDateTime(
  2022, 2, 3,
  'America/Los_Angeles', -28800000,
  12, 24, 45
);

date.toString(); // '2022-02-03T12:24:45-08:00[America/Los_Angeles]'

----------------------------------------

TITLE: Listing Released React Spectrum Packages with Version Numbers
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem, including React Spectrum components, React Aria hooks, React Stately, internationalization utilities, and React Types packages. Each package is listed with its corresponding version number.

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum@3.9.0
- @internationalized/message@3.0.0-rc.0
- @internationalized/number@3.0.0-rc.0
- @react-aria/accordion@3.0.0-alpha.0
- @react-aria/actiongroup@3.1.2
- @react-aria/aria-modal-polyfill@3.3.0
- @react-aria/breadcrumbs@3.1.3
- @react-aria/color@3.0.0-beta.0
- @react-aria/combobox@3.0.0-beta.0
- @react-aria/dnd@3.0.0-alpha.0
- @react-aria/focus@3.2.4
- @react-aria/grid@3.0.0-alpha.0
- @react-aria/interactions@3.3.4
- @react-aria/live-announcer@3.0.0-rc.0
- @react-aria/menu@3.2.0
- @react-aria/numberfield@3.0.0-rc.0
- @react-aria/overlays@3.6.2
- @react-aria/searchfield@3.1.2
- @react-aria/select@3.3.1
- @react-aria/selection@3.4.0
- @react-aria/spinbutton@3.0.0-rc.0
- @react-aria/table@3.0.0-alpha.9
- @react-aria/tabs@3.0.0-beta.0
- @react-aria/utils@3.7.0
- @react-aria/virtualizer@3.3.2
- @react-spectrum/accordion@3.0.0-alpha.0
- @react-spectrum/breadcrumbs@3.2.1
- @react-spectrum/color@3.0.0-beta.0
- @react-spectrum/combobox@3.0.0-beta.0
- @react-spectrum/dialog@3.3.1
- @react-spectrum/label@3.3.2
- @react-spectrum/listbox@3.4.1
- @react-spectrum/menu@3.2.2
- @react-spectrum/numberfield@3.0.0-rc.0
- @react-spectrum/picker@3.2.3
- @react-spectrum/provider@3.1.3
- @react-spectrum/slider@3.0.2
- @react-spectrum/table@3.0.0-alpha.10
- @react-spectrum/tabs@3.0.0-beta.0
- @react-spectrum/theme-dark@3.2.0
- @react-spectrum/theme-default@3.2.0
- @react-spectrum/theme-light@3.1.0
- @react-spectrum/tooltip@3.1.2
- @react-stately/collections@3.3.1
- @react-stately/color@3.0.0-beta.0
- @react-stately/combobox@3.0.0-beta.0
- @react-stately/data@3.3.0
- @react-stately/dnd@3.0.0-alpha.0
- @react-stately/grid@3.0.0-alpha.0
- @react-stately/layout@3.2.1
- @react-stately/numberfield@3.0.0-rc.0
- @react-stately/selection@3.4.0
- @react-stately/table@3.0.0-alpha.8
- @react-stately/tabs@3.0.0-beta.0
- @react-stately/tooltip@3.0.3
- @react-stately/tree@3.1.3
- @react-stately/virtualizer@3.1.3
- @react-types/accordion@3.0.0-alpha.0
- @react-types/color@3.0.0-beta.0
- @react-types/combobox@3.0.0-beta.0
- @react-types/grid@3.0.0-alpha.0
- @react-types/numberfield@3.0.0-rc.0
- @react-types/shared@3.5.0
- @react-types/table@3.0.0-alpha.0
- @react-types/tabs@3.0.0-beta.0
- react-aria@3.5.0
- react-stately@3.4.0

----------------------------------------

TITLE: Importing Types for Custom Calendar Implementation in React Spectrum
DESCRIPTION: Imports necessary types and functions from the @internationalized/date package to implement a custom calendar system for DatePicker.

LANGUAGE: tsx
CODE:
import type {AnyCalendarDate} from '@internationalized/date';
import {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';

----------------------------------------

TITLE: Converting Style Props to Style Macro in React Spectrum S2
DESCRIPTION: This example shows how to replace the old style prop syntax with the new style macro syntax, including importing the required components and the style macro from the S2 package.

LANGUAGE: diff
CODE:
- import {ActionButton} from '@adobe/react-spectrum';
+ import {ActionButton} from '@react-spectrum/s2';
+ import {style} from '@react-spectrum/s2/style' with {type: 'macro'};

- <ActionButton marginStart="size-100">
+ <ActionButton styles={style({marginStart: 8})}>
  Edit
</ActionButton>

----------------------------------------

TITLE: AlertDialog with Auto-Focus Button Specification
DESCRIPTION: Demonstrates how to set focus on a specific button (primary in this case) when the AlertDialog opens, enhancing accessibility.

LANGUAGE: tsx
CODE:
<DialogTrigger>
  <ActionButton>Save</ActionButton>
  <AlertDialog
    variant="confirmation"
    title="Save file"
    primaryActionLabel="Save"
    cancelLabel="Cancel"
    autoFocusButton="primary">
    A file with the same name already exists. Overwrite?
  </AlertDialog>
</DialogTrigger>

----------------------------------------

TITLE: Waiting for Dialog to Appear with React Testing Library
DESCRIPTION: An example of using React Testing Library's waitFor function to wait for a dialog element to appear in the DOM, useful when testing with real timers instead of fake ones.

LANGUAGE: tsx
CODE:
await waitFor(() => {
  expect(getByRole('dialog')).toBeInTheDocument();
});

----------------------------------------

TITLE: Emphasized Form in React Spectrum
DESCRIPTION: Example showing the isEmphasized property which provides stronger visual styling to form elements for higher contrast and visibility.

LANGUAGE: tsx
CODE:
<Form
  isEmphasized
  aria-label="Emphasized example"
  maxWidth="size-3600">
  <TextField label="Name"/>
  <RadioGroup label="Favorite pet" defaultValue="dogs">
    <Radio value="dogs">Dogs</Radio>
    <Radio value="cats">Cats</Radio>
  </RadioGroup>
</Form>

----------------------------------------

TITLE: Starting Documentation Server
DESCRIPTION: Command to run the documentation server locally, which will be available at http://localhost:1234/.

LANGUAGE: bash
CODE:
yarn start:docs

----------------------------------------

TITLE: Quiet SearchField Variant
DESCRIPTION: Shows how to create a quiet variant of the SearchField with a minimalist appearance.

LANGUAGE: tsx
CODE:
<SearchField label="Search" isQuiet />

----------------------------------------

TITLE: Styling Image Items in ListBox with CSS
DESCRIPTION: CSS styling for displaying image items in a ListBox. It creates a layout with a fixed-height thumbnail and text label, ensuring proper image aspect ratio and text overflow handling.

LANGUAGE: css
CODE:
.image-item {
  display: flex;
  height: 50px;
  gap: 10px;
  align-items: center;
}

.image-item img {
  height: 100%;
  aspect-ratio: 1/1;
  object-fit: contain;
}

.image-item span {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

----------------------------------------

TITLE: Accessible IllustratedMessage Without Heading
DESCRIPTION: Example showing how to make an IllustratedMessage accessible when no Heading is provided by adding aria-label to the illustration.

LANGUAGE: tsx
CODE:
<IllustratedMessage>
  <NotFound aria-label="No results" />
</IllustratedMessage>

----------------------------------------

TITLE: Creating a Read-Only SearchField
DESCRIPTION: Example of creating a read-only SearchField using the isReadOnly prop. The field remains focusable and content can be copied, but it cannot be edited.

LANGUAGE: tsx
CODE:
<MySearchField label="Email" defaultValue="abc@adobe.com" isReadOnly />

----------------------------------------

TITLE: Referencing React Spectrum Repository in Markdown
DESCRIPTION: A markdown code snippet showing the package name and providing a link to the main React Spectrum repository for further details.

LANGUAGE: markdown
CODE:
# @react-types/divider

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Installing React Spectrum Inline Alert Package
DESCRIPTION: Package reference for the @react-spectrum/inlinealert component which is part of the React Spectrum library.

LANGUAGE: markdown
CODE:
# @react-spectrum/inlinealert

----------------------------------------

TITLE: Importing Image Component in React Spectrum
DESCRIPTION: Demonstrates how to import the Image component along with Flex from the React Spectrum layout package for use in React applications.

LANGUAGE: jsx
CODE:
import {Flex} from '@react-spectrum/layout';
import {Image} from '@react-spectrum/image';

----------------------------------------

TITLE: Importing I18nProvider Component in React
DESCRIPTION: Demonstrates how to import the I18nProvider component from the @react-aria/i18n package.

LANGUAGE: tsx
CODE:
import {I18nProvider} from '@react-aria/i18n';

----------------------------------------

TITLE: Implementing ColorPicker with Color Description Feature in React Spectrum
DESCRIPTION: This code snippet demonstrates how to use the ColorPicker component with a color description feature. It renders a color picker with a default value, displays a color swatch alongside a color editor, and shows the color name using the getColorName method with the user's language preference.

LANGUAGE: tsx
CODE:
<ColorPicker label="Fill" defaultValue="#5100FF">
  {({color}) =>
    <div style={{display: 'flex', flexWrap: 'wrap', gap: 24}}>
      <ColorEditor />
      <div style={{display: 'flex', flexDirection: 'column', gap: 8}}>
        <ColorSwatch size="L" />
        <span>{color.getColorName(navigator.language || 'en-US')}</span>
      </div>
    </div>
  }
</ColorPicker>

----------------------------------------

TITLE: Accessibility Example with onPress Handler
DESCRIPTION: Shows how to create an accessible link with JavaScript handling that alerts the link's text content.

LANGUAGE: tsx
CODE:
<Link onPress={e => alert(`clicked "${e.target.textContent}" Link`)}>
  I forgot my password
</Link>

----------------------------------------

TITLE: Dynamic Sections in Select Component
DESCRIPTION: Implementation of a Select component with dynamically generated sections from a hierarchical data structure. Uses the Collection component to render child items from the nested data structure.

LANGUAGE: tsx
CODE:
import {Collection} from 'react-aria-components';

function Example() {
  let options = [
    {name: 'Fruit', children: [
      {name: 'Apple'},
      {name: 'Banana'},
      {name: 'Orange'},
      {name: 'Honeydew'},
      {name: 'Grapes'},
      {name: 'Watermelon'},
      {name: 'Cantaloupe'},
      {name: 'Pear'}
    ]},
    {name: 'Vegetable', children: [
      {name: 'Cabbage'},
      {name: 'Broccoli'},
      {name: 'Carrots'},
      {name: 'Lettuce'},
      {name: 'Spinach'},
      {name: 'Bok Choy'},
      {name: 'Cauliflower'},
      {name: 'Potatoes'}
    ]}
  ];

  return (
    <MySelect label="Preferred fruit or vegetable" items={options}>
      {section => (
        <ListBoxSection id={section.name}>
          <Header>{section.name}</Header>
          <Collection items={section.children}>
            {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
          </Collection>
        </ListBoxSection>
      )}
    </MySelect>
  );
}

----------------------------------------

TITLE: Menu with Action Callback
DESCRIPTION: Demonstrates how to handle action events from a Menu component. The example shows tracking the selected action in a state variable and displaying it below the menu.

LANGUAGE: tsx
CODE:
function Example() {
  let [action, setAction] = React.useState(null);

  return (
    <>
      <MenuTrigger>
        <ActionButton>
          Edit
        </ActionButton>
        <Menu onAction={setAction}>
          <Item key="cut">Cut</Item>
          <Item key="copy">Copy</Item>
          <Item key="paste">Paste</Item>
        </Menu>
      </MenuTrigger>
      <p>Action: {action}</p>
    </>
  );
}

----------------------------------------

TITLE: Menu with Multiple Selection Mode
DESCRIPTION: Demonstrates a Menu with multiple selection mode, allowing users to select multiple items simultaneously. The menu is configured to stay open after selection with closeOnSelect={false}.

LANGUAGE: tsx
CODE:
function Example() {
  let [selected, setSelected] = React.useState<Selection>(new Set(['Sidebar', 'Console']));

  return (
    <>
      <MenuTrigger closeOnSelect={false}>
        <ActionButton>
          Show
        </ActionButton>
        <Menu selectionMode="multiple" selectedKeys={selected} onSelectionChange={setSelected}>
          <Item key='Sidebar'>Sidebar</Item>
          <Item key='Searchbar'>Searchbar</Item>
          <Item key='Tools'>Tools</Item>
          <Item key='Console'>Console</Item>
        </Menu>
      </MenuTrigger>
      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>
    </>
  );
}

----------------------------------------

TITLE: Overriding First Day of Week for getDayOfWeek Function
DESCRIPTION: Shows how to override the default first day of the week in the getDayOfWeek function by providing an optional firstDayOfWeek parameter.

LANGUAGE: tsx
CODE:
getDayOfWeek(date, 'en-US', 'mon'); // 6

----------------------------------------

TITLE: Creating Fully Disabled Tabs Component
DESCRIPTION: Example of disabling an entire Tabs component using the isDisabled prop, which prevents interaction with all tabs and panels.

LANGUAGE: tsx
CODE:
<Tabs isDisabled>
  <TabList aria-label="Input settings">
    <Tab id="mouse">Mouse Settings</Tab>
    <Tab id="keyboard">Keyboard Settings</Tab>
    <Tab id="gamepad">Gamepad Settings</Tab>
  </TabList>
  <TabPanel id="mouse">Mouse Settings</TabPanel>
  <TabPanel id="keyboard">Keyboard Settings</TabPanel>
  <TabPanel id="gamepad">Gamepad Settings</TabPanel>
</Tabs>

----------------------------------------

TITLE: Value Label Customization Options
DESCRIPTION: Demonstrates different ways to customize the value label display, including hiding it, providing a custom string, and formatting the numeric value.

LANGUAGE: tsx
CODE:
<Flex direction="column" maxWidth="size-3000" gap="size-300">
  <Meter
    label="Space used"
    showValueLabel={false}
    value={90}
    variant="critical" />

  <Meter
    label="Space used"
    valueLabel="54 of 60GB"
    value={90} variant="critical" />

  <Meter
    label="Space used"
    formatOptions={{style: 'percent', minimumFractionDigits: 2}}
    value={89.123}
    variant="critical" />
</Flex>

----------------------------------------

TITLE: Customizing Meter Scale with minValue and maxValue
DESCRIPTION: Demonstrates how to customize the scale of the Meter by setting the minValue and maxValue props for a different range than the default 0-100.

LANGUAGE: tsx
CODE:
<Meter
  label="Widgets Used"
  minValue={50}
  maxValue={150}
  value={100} />

----------------------------------------

TITLE: Custom Breakpoints for Responsive Design
DESCRIPTION: Demonstrates how to define custom breakpoints for responsive layouts and have a View component respond to those breakpoints with different background colors.

LANGUAGE: tsx
CODE:
<Provider theme={theme} breakpoints={{tablet: 640, desktop: 1024}}>
  <View height="size-1000" backgroundColor={{base: 'celery-600', tablet: 'blue-600', desktop: 'magenta-600'}} />
</Provider>

----------------------------------------

TITLE: RadioGroup Labeling Options with Necessity Indicators
DESCRIPTION: Demonstrates different labeling options for RadioGroup including required fields with various necessity indicators.

LANGUAGE: tsx
CODE:
<Flex gap="size-300" wrap>
  <RadioGroup label="Favorite avatar">
    <Radio value="wizard">Wizard</Radio>
    <Radio value="dragon">Dragon</Radio>
  </RadioGroup>

  <RadioGroup label="Favorite avatar" isRequired necessityIndicator="icon">
    <Radio value="wizard">Wizard</Radio>
    <Radio value="dragon">Dragon</Radio>
  </RadioGroup>

  <RadioGroup label="Favorite avatar" isRequired necessityIndicator="label">
    <Radio value="wizard">Wizard</Radio>
    <Radio value="dragon">Dragon</Radio>
  </RadioGroup>

  <RadioGroup label="Favorite avatar" necessityIndicator="label">
   <Radio value="wizard">Wizard</Radio>
   <Radio value="dragon">Dragon</Radio>
  </RadioGroup>
</Flex>

----------------------------------------

TITLE: Basic SearchField Example with Submit Handling
DESCRIPTION: Shows a basic implementation of SearchField with label and submission handling, displaying the submitted text below the field.

LANGUAGE: tsx
CODE:
function Example() {
  let [submittedText, setSubmittedText] = React.useState(null);

  return (
    <>
      <SearchField
        label="Search"
        onSubmit={setSubmittedText} />
      <p>Submitted text: {submittedText}</p>
    </>
  );
}

----------------------------------------

TITLE: Basic Slider Implementation Example
DESCRIPTION: A basic example showing how to create a Slider with a label and default value.

LANGUAGE: tsx
CODE:
<Slider label="Cookies to buy" defaultValue={12} />

----------------------------------------

TITLE: Disabled TextArea in React Spectrum
DESCRIPTION: Shows how to disable a TextArea component using the isDisabled prop.

LANGUAGE: tsx
CODE:
<TextArea label="Email" isDisabled />

----------------------------------------

TITLE: TextField with Contextual Help
DESCRIPTION: Demonstrates how to add contextual help to a TextField component for providing additional information to users.

LANGUAGE: tsx
CODE:
import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';

<TextField
  label="Password"
  type="password"
  contextualHelp={
    <ContextualHelp>
      <Heading>Need help?</Heading>
      <Content>If you're having trouble accessing your account, contact our customer support team for help.</Content>
    </ContextualHelp>
  } />

----------------------------------------

TITLE: Read-only TextField
DESCRIPTION: Shows how to create a read-only TextField where content cannot be edited but can still be focused and copied.

LANGUAGE: tsx
CODE:
<TextField label="Email" defaultValue="abc@adobe.com" isReadOnly />

----------------------------------------

TITLE: Handling Tooltip Open State with Event Callbacks
DESCRIPTION: Example demonstrating how to track and display a tooltip's open state using the onOpenChange callback and React state.

LANGUAGE: tsx
CODE:
function Example() {
  let [isOpen, setOpen] = React.useState(false);

  return (
    <Flex alignItems="center" gap="size-100">
      <TooltipTrigger isOpen={isOpen} onOpenChange={setOpen}>
        <ActionButton aria-label="Resize"><Resize /></ActionButton>
        <Tooltip>Resize text.</Tooltip>
      </TooltipTrigger>
      <Text>Tooltip is {isOpen ? 'showing' : 'not showing'}</Text>
    </Flex>
  );
}

----------------------------------------

TITLE: Setting Default Expanded Items in TreeView
DESCRIPTION: Shows how to set default expanded items in a TreeView using the defaultExpandedKeys prop. The keys must match the id prop of the TreeViewItems to be expanded.

LANGUAGE: tsx
CODE:
<ExampleTree
  aria-label="Example tree with default expanded items"
  /*- begin highlight -*/
  defaultExpandedKeys={['projects', 'reports']}
  /*- end highlight -*/
/>

----------------------------------------

TITLE: Reloading Data with useAsyncList in React
DESCRIPTION: Simple example showing how to trigger a data reload using the reload method provided by useAsyncList.

LANGUAGE: tsx
CODE:
list.reload();

----------------------------------------

TITLE: Creating a Custom Calendar Factory Function for Tree-Shaking
DESCRIPTION: Demonstrates how to create a custom calendar factory function that only imports desired calendar implementations to reduce bundle size through tree-shaking.

LANGUAGE: tsx
CODE:
import {GregorianCalendar, JapaneseCalendar} from '@internationalized/date';

function createCalendar(identifier) {
  switch (identifier) {
    case 'gregory':
      return new GregorianCalendar();
    case 'japanese':
      return new JapaneseCalendar();
    default:
      throw new Error(`Unsupported calendar ${identifier}`);
  }
}

----------------------------------------

TITLE: Comparing CalendarDate Objects
DESCRIPTION: Demonstrates how to compare CalendarDate objects using the compare method to determine if one date is before, equal to, or after another date.

LANGUAGE: tsx
CODE:
let a = new CalendarDate(2022, 2, 3);
let b = new CalendarDate(2022, 3, 4);

a.compare(b) < 0; // true
b.compare(a) > 0; // true

----------------------------------------

TITLE: Converting Between Calendar Systems in TypeScript
DESCRIPTION: Converts a date from the Gregorian calendar to the Hebrew calendar using the toCalendar function.

LANGUAGE: tsx
CODE:
import {toCalendar, HebrewCalendar} from '@internationalized/date';

let gregorianDate = new CalendarDate(2020, 9, 19);
let hebrewDate = toCalendar(gregorianDate, new HebrewCalendar());
// => new CalendarDate(new HebrewCalendar(), 5781, 1, 1)

----------------------------------------

TITLE: Converting CalendarDate to String in TypeScript
DESCRIPTION: Demonstrates converting a CalendarDate object to an ISO 8601 formatted string using the toString method.

LANGUAGE: tsx
CODE:
let date = new CalendarDate(2022, 2, 3);
date.toString(); // '2022-02-03'

----------------------------------------

TITLE: Getting Today's Date with Time Zone in TypeScript
DESCRIPTION: Retrieves today's date using the today function with a specific time zone or the local time zone.

LANGUAGE: tsx
CODE:
import {today, getLocalTimeZone} from '@internationalized/date';

let nyDate = today('America/New_York');
let localDate = today(getLocalTimeZone());

----------------------------------------

TITLE: Checking Weekdays and Weekends Across Locales
DESCRIPTION: Demonstrates using isWeekday and isWeekend functions to determine if a date falls on a weekday or weekend, showing how results differ between US and Israeli locales where weekend days vary.

LANGUAGE: tsx
CODE:
import {isWeekday, isWeekend} from '@internationalized/date';

let date = new CalendarDateTime(2022, 2, 6, 8, 30); // a Sunday

isWeekday(date, 'en-US'); // false
isWeekday(date, 'he-IL'); // true

isWeekend(date, 'en-US'); // true
isWeekend(date, 'he-IL'); // false

----------------------------------------

TITLE: Getting Day of Week with Locale Awareness
DESCRIPTION: Demonstrates using getDayOfWeek function to get the day of week (0-6) for a date, where 0 is the first day of the week in the given locale. Shows how results differ between US and French locales.

LANGUAGE: tsx
CODE:
import {getDayOfWeek} from '@internationalized/date';

let date = new CalendarDateTime(2022, 2, 6, 8, 30); // a Sunday

getDayOfWeek(date, 'en-US'); // 0
getDayOfWeek(date, 'fr-FR'); // 6

----------------------------------------

TITLE: Handling Out-of-Range Values when Setting Fields
DESCRIPTION: Shows how the set method handles values outside the valid range by constraining them to the nearest valid value.

LANGUAGE: tsx
CODE:
let date = new CalendarDateTime(2022, 2, 3, 9, 45);
date.set({day: 100}); // 2022-02-28T09:45
date.set({month: 20}); // 2022-12-03T09:45
date.set({hour: 30}); // 2022-02-03T23:45

----------------------------------------

TITLE: Setting Fields in CalendarDateTime
DESCRIPTION: Demonstrates using the set method to create new CalendarDateTime instances with modified field values while preserving other fields.

LANGUAGE: tsx
CODE:
let date = new CalendarDateTime(2022, 2, 3, 9, 45);
date.set({day: 10}); // 2022-02-10T09:45
date.set({month: 5}); // 2022-05-03T09:45
date.set({year: 2023, month: 10, day: 16}); // 2023-10-16T09:45
date.set({hour: 18}); // 2022-02-03T18:45
date.set({minute: 15}); // 2022-02-03T09:15

----------------------------------------

TITLE: Partially Comparing ZonedDateTime Objects in TypeScript
DESCRIPTION: Shows how to perform partial comparisons between dates using helper functions like isSameMonth. These functions can compare dates in different calendar systems by converting as needed.

LANGUAGE: tsx
CODE:
import {isSameMonth} from '@internationalized/date';

isSameMonth(
  parseZonedDateTime('2022-04-16T09:45[America/Los_Angeles]'),
  parseZonedDateTime('2022-04-30T05:15[America/Los_Angeles]'),
); // true

isSameMonth(
  parseZonedDateTime('2022-04-16T09:45[America/Los_Angeles]'),
  parseZonedDateTime('2022-08-020T05:15[America/Los_Angeles]'),
); // false

----------------------------------------

TITLE: Cycling Date Fields with ZonedDateTime in TypeScript
DESCRIPTION: Demonstrates the cycle method for incrementing or decrementing date fields with wrapping behavior when values reach minimum or maximum. When a field reaches its limit, it wraps around instead of affecting other fields.

LANGUAGE: tsx
CODE:
let date = parseZonedDateTime('2022-12-31T23:59[America/Los_Angeles]');
date.cycle('day', 1); // 2022-12-01T23:59[America/Los_Angeles]
date.cycle('month', 1); // 2022-01-31T23:59[America/Los_Angeles]
date.cycle('hour', 1); // 2022-12-31T00:59[America/Los_Angeles]
date.cycle('minute', 1); // 2022-12-31T23:00[America/Los_Angeles]

let date = parseZonedDateTime('2022-01-01T00:00[America/Los_Angeles]');
date.cycle('day', -1); // 2022-01-31T00:00[America/Los_Angeles]
date.cycle('month', -1); // 2022-12-01T00:00[America/Los_Angeles]
date.cycle('hour', -1); // 2022-01-01T23:00[America/Los_Angeles]
date.cycle('minute', -1); // 2022-01-01T00:59[America/Los_Angeles]

----------------------------------------

TITLE: Parsing ISO 8601 Strings to ZonedDateTime in TypeScript
DESCRIPTION: Demonstrates three different methods for parsing ISO 8601 formatted strings into ZonedDateTime objects, including parseZonedDateTime, parseAbsolute, and parseAbsoluteToLocal.

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

let date = parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]');
let date = parseAbsolute('2021-11-07T07:45:00Z', 'America/Los_Angeles');
let date = parseAbsoluteToLocal('2021-11-07T07:45:00Z');

----------------------------------------

TITLE: Creating a ZonedDateTime with Constructor in TypeScript
DESCRIPTION: Creates a ZonedDateTime object representing February 3rd, 2022 at 9:15 AM in the America/Los_Angeles time zone using the constructor method.

LANGUAGE: tsx
CODE:
import {ZonedDateTime} from '@internationalized/date';

let date = new ZonedDateTime(
  // Date
  2022, 2, 3,
  // Time zone and UTC offset
  'America/Los_Angeles', -28800000,
  // Time
  9, 15, 0
);

----------------------------------------

TITLE: Converting Breakpoint Values in React Spectrum Style Props
DESCRIPTION: This example illustrates how to migrate responsive breakpoint values from React Spectrum v3 to S2, using the updated breakpoint keys and corresponding pixel values for width specifications.

LANGUAGE: diff
CODE:
- <View width={{ base: 'size-2000', L: 'size-5000' }} />
+ <div className={style({width: {default: 160, lg: '[400px]'}) />

----------------------------------------

TITLE: Basic NumberField Implementation
DESCRIPTION: Simple implementation of a NumberField component with label, default value, and minimum value constraints. This demonstrates the basic usage pattern for the component.

LANGUAGE: tsx
CODE:
<NumberField label="Width" defaultValue={1024} minValue={0}  />

----------------------------------------

TITLE: Configuring Axe Rules to Suppress False Positives in React Aria
DESCRIPTION: Configuration example showing how to suppress known accessibility false positives in React Aria components using data-a11y-ignore attributes and custom Axe rule selectors. This helps reduce noise in accessibility audits.

LANGUAGE: tsx
CODE:
{
  rules: [
    {
      id: 'aria-hidden-focus',
      selector: 'body *:not([data-a11y-ignore="aria-hidden-focus"])'
    }
  ]
}

----------------------------------------

TITLE: Rendering Date and Time Components Section in React
DESCRIPTION: Displays documentation for date and time-related components using ExampleCard components with illustrations and descriptions.

LANGUAGE: JSX
CODE:
<section className={styles.cardGroup}>

<ExampleCard
  url="DatePicker.html"
  title="DatePicker"
  description="A date picker combines a DateField and a Calendar popover.">
  <DatePicker />
</ExampleCard>

<ExampleCard
  url="DateRangePicker.html"
  title="DateRangePicker"
  description="A date range picker combines two DateFields and a RangeCalendar popover.">
  <DateRangePicker />
</ExampleCard>

<ExampleCard
  url="DateField.html"
  title="DateField"
  description="A date field allows a user to enter and edit date values using a keyboard.">
  <DateField />
</ExampleCard>

<ExampleCard
  url="TimeField.html"
  title="TimeField"
  description="A time field allows a user to enter and edit time values using a keyboard.">
  <TimeField />
</ExampleCard>

<ExampleCard
  url="Calendar.html"
  title="Calendar"
  description="A calendar allows a user to select a single date from a date grid.">
  <Calendar />
</ExampleCard>

<ExampleCard
  url="RangeCalendar.html"
  title="RangeCalendar"
  description="A range calendar allows a user to select a contiguous range of dates.">
  <RangeCalendar />
</ExampleCard>

</section>

----------------------------------------

TITLE: Released Package Versions in React Spectrum Ecosystem
DESCRIPTION: A comprehensive list of the latest released package versions in the React Spectrum ecosystem, including React Aria, React Spectrum, React Stately, and related component libraries. The list includes package names and their corresponding version numbers.

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum@3.34.0
- @react-aria/accordion@3.0.0-alpha.26
- @react-aria/actiongroup@3.7.2
- @react-aria/autocomplete@3.0.0-alpha.26
- @react-aria/breadcrumbs@3.5.10
- @react-aria/button@3.9.2
- @react-aria/calendar@3.5.5
- @react-aria/checkbox@3.14.0
- @react-aria/color@3.0.0-beta.30
- @react-aria/combobox@3.8.3
- @react-aria/datepicker@3.9.2
- @react-aria/dialog@3.5.11
- @react-aria/dnd@3.5.2
- @react-aria/focus@3.16.1
- @react-aria/form@3.0.2
- @react-aria/grid@3.8.7
- @react-aria/gridlist@3.7.4
- @react-aria/i18n@3.10.1
- @react-aria/interactions@3.21.0
- @react-aria/label@3.7.5
- @react-aria/landmark@3.0.0-beta.9
- @react-aria/link@3.6.4
- @react-aria/listbox@3.11.4
- @react-aria/menu@3.13.0
- @react-aria/meter@3.4.10
- @react-aria/numberfield@3.11.0
- @react-aria/overlays@3.21.0
- @react-aria/progress@3.4.10
- @react-aria/radio@3.10.1
- @react-aria/searchfield@3.7.2
- @react-aria/select@3.14.2
- @react-aria/selection@3.17.4
- @react-aria/separator@3.3.10
- @react-aria/slider@3.7.5
- @react-aria/spinbutton@3.6.2
- @react-aria/steplist@3.0.0-alpha.2
- @react-aria/switch@3.6.1
- @react-aria/table@3.13.4
- @react-aria/tabs@3.8.4
- @react-aria/tag@3.3.2
- @react-aria/textfield@3.14.2
- @react-aria/toast@3.0.0-beta.9
- @react-aria/toggle@3.10.1
- @react-aria/toolbar@3.0.0-beta.2
- @react-aria/tooltip@3.7.1
- @react-aria/utils@3.23.1
- @react-aria/virtualizer@3.9.9
- @react-aria/visually-hidden@3.8.9
- @react-spectrum/accordion@3.0.0-alpha.28
- @react-spectrum/actionbar@3.4.2
- @react-spectrum/actiongroup@3.10.2
- @react-spectrum/autocomplete@3.0.0-alpha.29
- @react-spectrum/avatar@3.0.9
- @react-spectrum/badge@3.1.10
- @react-spectrum/breadcrumbs@3.9.4
- @react-spectrum/button@3.16.1
- @react-spectrum/buttongroup@3.6.10
- @react-spectrum/calendar@3.4.6
- @react-spectrum/card@3.0.0-alpha.30
- @react-spectrum/checkbox@3.9.3
- @react-spectrum/color@3.0.0-beta.31
- @react-spectrum/combobox@3.12.2
- @react-spectrum/contextualhelp@3.6.8
- @react-spectrum/datepicker@3.9.3
- @react-spectrum/dialog@3.8.8
- @react-spectrum/divider@3.5.10
- @react-spectrum/dnd@3.3.7
- @react-spectrum/dropzone@3.0.0-rc.2
- @react-spectrum/form@3.7.3
- @react-spectrum/icon@3.7.10
- @react-spectrum/illustratedmessage@3.4.10
- @react-spectrum/image@3.4.10
- @react-spectrum/inlinealert@3.2.2
- @react-spectrum/label@3.16.3
- @react-spectrum/labeledvalue@3.1.11
- @react-spectrum/layout@3.6.2
- @react-spectrum/link@3.6.4
- @react-spectrum/list@3.7.7
- @react-spectrum/listbox@3.12.6
- @react-spectrum/menu@3.18.0
- @react-spectrum/meter@3.4.10
- @react-spectrum/numberfield@3.9.0
- @react-spectrum/overlays@5.5.4
- @react-spectrum/picker@3.14.2
- @react-spectrum/progress@3.7.4
- @react-spectrum/provider@3.9.4
- @react-spectrum/radio@3.7.3
- @react-spectrum/searchfield@3.8.3
- @react-spectrum/slider@3.6.6
- @react-spectrum/statuslight@3.5.10
- @react-spectrum/steplist@3.0.0-alpha.2
- @react-spectrum/switch@3.5.2
- @react-spectrum/table@3.12.7
- @react-spectrum/tabs@3.8.7
- @react-spectrum/tag@3.2.3
- @react-spectrum/text@3.5.2
- @react-spectrum/textfield@3.11.3
- @react-spectrum/toast@3.0.0-beta.9
- @react-spectrum/tooltip@3.6.4
- @react-spectrum/utils@3.11.4
- @react-spectrum/view@3.6.7
- @react-spectrum/well@3.4.10
- @react-stately/checkbox@3.6.2
- @react-stately/color@3.5.2
- @react-stately/data@3.11.1
- @react-stately/layout@3.13.6
- @react-stately/numberfield@3.9.0
- @react-stately/slider@3.5.1
- @react-stately/steplist@3.0.0-alpha.2
- @react-stately/table@3.11.5
- @react-stately/toggle@3.7.1
- @react-stately/virtualizer@3.6.7
- @react-types/card@3.0.0-alpha.23
- @react-types/checkbox@3.7.0
- @react-types/color@3.0.0-beta.22
- @react-types/list@3.2.14
- @react-types/numberfield@3.8.0
- @spectrum-icons/color@3.5.10
- @spectrum-icons/express@3.0.0-alpha.14
- @spectrum-icons/illustrations@3.6.10
- @spectrum-icons/ui@3.6.4
- @spectrum-icons/workflow@4.2.9
- react-aria@3.32.0
- react-aria-components@1.1.0
- react-stately@3.30.0
- tailwindcss-react-aria-components@1.1.0

----------------------------------------

TITLE: Styling HTML elements with style macro
DESCRIPTION: Example of using the style() macro to apply Spectrum styling to a standard HTML div element via the className prop.

LANGUAGE: jsx
CODE:
<div className={style({marginStart: 16})}>
  Hello Spectrum 2!
</div>

----------------------------------------

TITLE: Styling React Spectrum Components with style() Macro
DESCRIPTION: Example of applying Spectrum 2 styling to React Spectrum components using the styles prop with the style() macro.

LANGUAGE: jsx
CODE:
<Button styles={style({marginStart: 16})}>
  Hello Spectrum 2!
</Button>

----------------------------------------

TITLE: Importing React Spectrum Page-Level CSS for Theming
DESCRIPTION: Import statement that should be included at the root of the application to enable and configure React Spectrum light and dark themes. This is essential for proper theming support.

LANGUAGE: javascript
CODE:
import "@react-spectrum/s2/page.css";

----------------------------------------

TITLE: Styling HTML Elements with Spectrum Macros
DESCRIPTION: Example of applying Spectrum 2 styling to a standard HTML div element using the style() macro within the className property.

LANGUAGE: jsx
CODE:
<div className={style({marginStart: 16})}>
  Hello Spectrum 2!
</div>

----------------------------------------

TITLE: Configuring Webpack for Parcel Macros
DESCRIPTION: Configuration for adding the unplugin-parcel-macros plugin to a Webpack project. This enables style macros for React Spectrum components.

LANGUAGE: javascript
CODE:
const macros = require("unplugin-parcel-macros");

module.exports = {
  // ...
  plugins: [
    // ...
    macros.webpack(),
    // ...
  ],
};

----------------------------------------

TITLE: Build Failure Examples in React Spectrum
DESCRIPTION: Example of build failures that occur when using incompatible Node.js versions. The solution is to use Node.js 18 and clean the environment by deleting node_modules and reinstalling dependencies.

LANGUAGE: bash
CODE:
parcel build packages/@react-{spectrum,aria,stately}/*/ packages/@internationalized/{message,string,date,number}/ packages/react-aria-components --no-optimize --config .parcelrc-build
libc++abi: terminating due to uncaught exception of type std::__1::system_error: mutex lock failed: Invalid argument
make: *** [build] Abort trap: 6
parcel build packages/@react-{spectrum,aria,stately}/*/ packages/@internationalized/{message,string,date,number}/ packages/react-aria-components --no-optimize --config .parcelrc-build
make: *** [build] Segmentation fault: 11

----------------------------------------

TITLE: Implementing Form Validation with RadioGroup in React Aria Components
DESCRIPTION: Example showing how to add validation to a RadioGroup using the isRequired prop and FieldError component for displaying validation errors.

LANGUAGE: tsx
CODE:
import {Form, FieldError, Button} from 'react-aria-components';

<Form>
  <RadioGroup name="pet" isRequired>
    <Label>Favorite pet</Label>
    <Radio value="dogs">Dog</Radio>
    <Radio value="cats">Cat</Radio>
    <Radio value="dragon">Dragon</Radio>
    <FieldError />
  </RadioGroup>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Controlling Calendar Page Behavior
DESCRIPTION: Demonstrates how to control how the calendar navigates between months using the pageBehavior prop. Setting pageBehavior to 'single' makes pagination navigate by one month rather than the default visibleDuration.

LANGUAGE: tsx
CODE:
<RangeCalendar aria-label="Trip dates" visibleDuration={{months: 3}} pageBehavior="single">
  <header>
    <Button slot="previous">◀</Button>
    <Heading />
    <Button slot="next">▶</Button>
  </header>
  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>
    <CalendarGrid>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
    <CalendarGrid offset={{months: 1}}>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
    <CalendarGrid offset={{months: 2}}>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
  </div>
</RangeCalendar>

----------------------------------------

TITLE: Implementing Asynchronous Loading in React Aria Select
DESCRIPTION: Example demonstrating how to use the useAsyncList hook to handle asynchronous data loading from a server in a Select component.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

interface Character {
  name: string
}

function AsyncLoadingExample() {
  let list = useAsyncList<Character>({
    async load({signal, filterText}) {
      let res = await fetch(
        `https://pokeapi.co/api/v2/pokemon`,
        {signal}
      );
      let json = await res.json();

      return {
        items: json.results
      };
    }
  });

  return (
    <MySelect label="Pick a Pokemon" items={list.items}>
      {(item) => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
    </MySelect>
  );
}

----------------------------------------

TITLE: Configuring Menu Direction for ComboBox in React Spectrum
DESCRIPTION: Example of a ComboBox with the direction prop set to 'top', making the dropdown menu open upward instead of the default downward direction.

LANGUAGE: tsx
CODE:
<ComboBox label="Favorite Animal" direction="top">
  <Item key="red panda">Red Panda</Item>
  <Item key="cat">Cat</Item>
  <Item key="dog">Dog</Item>
  <Item key="aardvark">Aardvark</Item>
  <Item key="kangaroo">Kangaroo</Item>
  <Item key="snake">Snake</Item>
</ComboBox>

----------------------------------------

TITLE: Using Custom Label Component with TagGroup
DESCRIPTION: Example of using a custom label component within a TagGroup, replacing the built-in React Aria Components Label.

LANGUAGE: tsx
CODE:
<TagGroup>
  <MyCustomLabel>Name</MyCustomLabel>
  {/* ... */}
</TagGroup>

----------------------------------------

TITLE: Installing Individual React Stately Packages
DESCRIPTION: Command to install individual React Stately packages from the @react-stately scope on npm.

LANGUAGE: bash
CODE:
yarn add @react-stately/radio

----------------------------------------

TITLE: Quiet Picker Styling in React Spectrum
DESCRIPTION: Example of a Picker with the isQuiet prop applied, which gives the component a more minimal visual style with less prominent borders.

LANGUAGE: tsx
CODE:
<Picker label="Choose frequency" isQuiet>
  <Item key="rarely">Rarely</Item>
  <Item key="sometimes">Sometimes</Item>
  <Item key="always">Always</Item>
</Picker>

----------------------------------------

TITLE: Using Custom Link Component in Breadcrumbs
DESCRIPTION: Example of using a custom link component within Breadcrumbs instead of the built-in React Aria Components Link.

LANGUAGE: tsx
CODE:
<Breadcrumbs>
  <Breadcrumb><MyCustomLink>Custom link</MyCustomLink></Breadcrumb>
  {/* ... */}
</Breadcrumbs>

----------------------------------------

TITLE: Released React Spectrum Ecosystem Packages with Version Numbers
DESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem, including the core React Spectrum package, internationalization utilities, React Aria hooks, React Stately state managers, React Types type definitions, and Spectrum Icons packages. Each package is listed with its current version number.

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum@3.25.0
- @internationalized/date@3.1.0
- @internationalized/message@3.1.0
- @internationalized/number@3.2.0
- @internationalized/string-compiler@3.1.0
- @internationalized/string@3.1.0
- @react-aria/accordion@3.0.0-alpha.15
- @react-aria/actiongroup@3.5.0
- @react-aria/aria-modal-polyfill@3.7.0
- @react-aria/autocomplete@3.0.0-alpha.14
- @react-aria/breadcrumbs@3.5.0
- @react-aria/button@3.7.0
- @react-aria/calendar@3.1.0
- @react-aria/checkbox@3.8.0
- @react-aria/color@3.0.0-beta.19
- @react-aria/combobox@3.5.0
- @react-aria/datepicker@3.3.0
- @react-aria/dialog@3.5.0
- @react-aria/dnd@3.1.0
- @react-aria/focus@3.11.0
- @react-aria/grid@3.6.0
- @react-aria/gridlist@3.2.0
- @react-aria/i18n@3.7.0
- @react-aria/interactions@3.14.0
- @react-aria/label@3.5.0
- @react-aria/landmark@3.0.0-alpha.6
- @react-aria/link@3.4.0
- @react-aria/listbox@3.8.0
- @react-aria/live-announcer@3.2.0
- @react-aria/menu@3.8.0
- @react-aria/meter@3.4.0
- @react-aria/numberfield@3.4.0
- @react-aria/overlays@3.13.0
- @react-aria/progress@3.4.0
- @react-aria/radio@3.5.0
- @react-aria/searchfield@3.5.0
- @react-aria/select@3.9.0
- @react-aria/selection@3.13.0
- @react-aria/separator@3.3.0
- @react-aria/slider@3.3.0
- @react-aria/spinbutton@3.3.0
- @react-aria/ssr@3.5.0
- @react-aria/switch@3.4.0
- @react-aria/table@3.8.0
- @react-aria/tabs@3.4.0
- @react-aria/tag@3.0.0-beta.2
- @react-aria/textfield@3.9.0
- @react-aria/toast@3.0.0-alpha.0
- @react-aria/toggle@3.5.0
- @react-aria/tooltip@3.4.0
- @react-aria/utils@3.15.0
- @react-aria/virtualizer@3.7.0
- @react-aria/visually-hidden@3.7.0
- @react-spectrum/accordion@3.0.0-alpha.17
- @react-spectrum/actionbar@3.0.0-beta.0
- @react-spectrum/actiongroup@3.8.0
- @react-spectrum/autocomplete@3.0.0-alpha.15
- @react-spectrum/avatar@3.0.0-beta.0
- @react-spectrum/badge@3.1.0
- @react-spectrum/breadcrumbs@3.7.0
- @react-spectrum/button@3.12.0
- @react-spectrum/buttongroup@3.6.0
- @react-spectrum/calendar@3.2.0
- @react-spectrum/card@3.0.0-alpha.16
- @react-spectrum/checkbox@3.7.0
- @react-spectrum/color@3.0.0-beta.20
- @react-spectrum/combobox@3.8.0
- @react-spectrum/contextualhelp@3.5.0
- @react-spectrum/datepicker@3.4.0
- @react-spectrum/dialog@3.7.0
- @react-spectrum/divider@3.5.0
- @react-spectrum/dnd@3.1.0
- @react-spectrum/form@3.6.0
- @react-spectrum/icon@3.7.0
- @react-spectrum/illustratedmessage@3.4.0
- @react-spectrum/image@3.4.0
- @react-spectrum/label@3.11.0
- @react-spectrum/labeledvalue@3.1.0
- @react-spectrum/layout@3.5.0
- @react-spectrum/link@3.5.0
- @react-spectrum/list@3.3.0
- @react-spectrum/listbox@3.9.0
- @react-spectrum/menu@3.10.0
- @react-spectrum/meter@3.4.0
- @react-spectrum/numberfield@3.6.0
- @react-spectrum/overlays@5.0.0
- @react-spectrum/picker@3.10.0
- @react-spectrum/progress@3.4.0
- @react-spectrum/provider@3.7.0
- @react-spectrum/radio@3.5.0
- @react-spectrum/searchfield@3.7.0
- @react-spectrum/slider@3.5.0
- @react-spectrum/statuslight@3.5.0
- @react-spectrum/switch@3.4.0
- @react-spectrum/table@3.7.0
- @react-spectrum/tabs@3.5.0
- @react-spectrum/tag@3.0.0-beta.3
- @react-spectrum/text@3.4.0
- @react-spectrum/textfield@3.10.0
- @react-spectrum/theme-dark@3.5.0
- @react-spectrum/theme-default@3.5.0
- @react-spectrum/theme-express@3.0.0-alpha.2
- @react-spectrum/theme-light@3.4.0
- @react-spectrum/toast@3.0.0-alpha.0
- @react-spectrum/tooltip@3.4.0
- @react-spectrum/utils@3.9.0
- @react-spectrum/view@3.5.0
- @react-spectrum/well@3.4.0
- @react-stately/calendar@3.1.0
- @react-stately/checkbox@3.4.0
- @react-stately/collections@3.6.0
- @react-stately/color@3.3.0
- @react-stately/combobox@3.4.0
- @react-stately/data@3.9.0
- @react-stately/datepicker@3.3.0
- @react-stately/dnd@3.1.0
- @react-stately/grid@3.5.0
- @react-stately/layout@3.11.0
- @react-stately/list@3.7.0
- @react-stately/menu@3.5.0
- @react-stately/numberfield@3.4.0
- @react-stately/overlays@3.5.0
- @react-stately/radio@3.7.0
- @react-stately/searchfield@3.4.0
- @react-stately/select@3.4.0
- @react-stately/selection@3.12.0
- @react-stately/slider@3.3.0
- @react-stately/table@3.8.0
- @react-stately/tabs@3.3.0
- @react-stately/tag@3.0.0-beta.0
- @react-stately/toast@3.0.0-alpha.0
- @react-stately/toggle@3.5.0
- @react-stately/tooltip@3.3.0
- @react-stately/tree@3.5.0
- @react-stately/utils@3.6.0
- @react-stately/virtualizer@3.5.0
- @react-types/accordion@3.0.0-alpha.12
- @react-types/actionbar@3.0.0-beta.0
- @react-types/actiongroup@3.4.0
- @react-types/autocomplete@3.0.0-alpha.12
- @react-types/avatar@3.0.0-beta.0
- @react-types/badge@3.1.0
- @react-types/breadcrumbs@3.5.0
- @react-types/button@3.7.1
- @react-types/buttongroup@3.3.0
- @react-types/calendar@3.1.0
- @react-types/card@3.0.0-alpha.13
- @react-types/checkbox@3.4.2
- @react-types/color@3.0.0-beta.15
- @react-types/combobox@3.6.0
- @react-types/contextualhelp@3.2.0
- @react-types/datepicker@3.2.0
- @react-types/dialog@3.5.0
- @react-types/divider@3.3.0
- @react-types/form@3.4.2
- @react-types/grid@3.1.6
- @react-types/illustratedmessage@3.3.0
- @react-types/image@3.3.0
- @react-types/label@3.7.2
- @react-types/layout@3.3.6
- @react-types/link@3.4.0
- @react-types/list@3.2.0
- @react-types/listbox@3.4.0
- @react-types/menu@3.8.0
- @react-types/meter@3.3.0
- @react-types/numberfield@3.4.0
- @react-types/overlays@3.7.0
- @react-types/progress@3.3.0
- @react-types/provider@3.6.0
- @react-types/radio@3.4.0
- @react-types/searchfield@3.4.0
- @react-types/select@3.7.0
- @react-types/shared@3.17.0
- @react-types/slider@3.4.0
- @react-types/statuslight@3.3.0
- @react-types/switch@3.3.0
- @react-types/table@3.5.0
- @react-types/tabs@3.2.0
- @react-types/tag@3.0.0-beta.2
- @react-types/text@3.3.0
- @react-types/textfield@3.7.0
- @react-types/tooltip@3.3.0
- @react-types/view@3.4.0
- @react-types/well@3.3.0
- @spectrum-icons/color@3.5.0
- @spectrum-icons/express@3.0.0-alpha.4
- @spectrum-icons/illustrations@3.6.0
- @spectrum-icons/ui@3.5.0
- @spectrum-icons/workflow@4.1.0
- react-aria@3.23.0
- react-stately@3.21.0

----------------------------------------

TITLE: Custom Dialog Anchor with targetRef in React Spectrum
DESCRIPTION: Demonstrates how to override the default dialog anchor (the trigger) by providing a separate ref to the targetRef prop, anchoring the popover to a different element.

LANGUAGE: tsx
CODE:
function Example() {
  let ref = React.useRef(null)

  return (
    <Flex gap="size-1000">
      <DialogTrigger type="popover" targetRef={ref}>
        <ActionButton>Trigger</ActionButton>
        <Dialog>
          <Heading>The Heading</Heading>
          <Divider />
          <Content>
            <Text>
              This is a popover anchored to the span.
            </Text>
          </Content>
        </Dialog>
      </DialogTrigger>
      <span
        ref={ref}
        style={{width: '100px'}}>
        Popover appears over here
      </span>
    </Flex>
  );
}

----------------------------------------

TITLE: Implementing Static Nested Columns in TableView with React Spectrum
DESCRIPTION: Example of creating a TableView with statically defined nested column groups. The columns are structured in a hierarchical manner where 'Name' and 'Information' are parent columns containing child columns. The isRowHeader property designates certain columns as row headers for accessibility.

LANGUAGE: tsx
CODE:
<TableView aria-label="Example table for nested columns">
  <TableHeader>
    <Column title="Name">
      <Column isRowHeader>First Name</Column>
      <Column isRowHeader>Last Name</Column>
    </Column>
    <Column title="Information">
      <Column>Age</Column>
      <Column>Birthday</Column>
    </Column>
  </TableHeader>
  <TableBody>
    <Row>
      <Cell>Sam</Cell>
      <Cell>Smith</Cell>
      <Cell>36</Cell>
      <Cell>May 3</Cell>
    </Row>
    <Row>
      <Cell>Julia</Cell>
      <Cell>Jones</Cell>
      <Cell>24</Cell>
      <Cell>February 10</Cell>
    </Row>
    <Row>
      <Cell>Peter</Cell>
      <Cell>Parker</Cell>
      <Cell>28</Cell>
      <Cell>September 7</Cell>
    </Row>
    <Row>
      <Cell>Bruce</Cell>
      <Cell>Wayne</Cell>
      <Cell>32</Cell>
      <Cell>December 18</Cell>
    </Row>
  </TableBody>
</TableView>

----------------------------------------

TITLE: Video Component with Caption Tracks for Mobile Screen Reader Demo
DESCRIPTION: Renders a video with captions demonstrating drag and drop using VoiceOver on iOS. The component includes a Track element for English captions and proper accessibility attributes.

LANGUAGE: JSX
CODE:
<Video
  src={dndMobile + '#t=0.1'}
  preload="metadata"
  controls
  aria-label="Demo of drag and drop using VoiceOver on iOS"
  style={{maxHeight: '600px', maxWidth: 'min(100%, 1920px)', display: 'block', margin: '40px auto'}}>
  <Track src={dndMobileVTT} default kind="captions" label="English Captions" srclang="en-us" type="text/vtt" />
</Video>

----------------------------------------

TITLE: Creating a General Container Card Component with Children
DESCRIPTION: Alternative implementation of a Card component that passes its children to the Grid component, allowing for more flexible usage where the content is provided by the consumer.

LANGUAGE: jsx
CODE:
export const Card = (props) => {
  let defaults = {slots: {
      container: {UNSAFE_className: classNames(styles, 'container')},
      preview: {UNSAFE_className: classNames(styles, 'preview')},
      avatar: {UNSAFE_className: classNames(styles, 'avatar')},
      title: {UNSAFE_className: classNames(styles, 'title')},
      footer: {UNSAFE_className: classNames(styles, 'footer')},
      divider: {UNSAFE_className: classNames(styles, 'divider')},
      buttonGroup: {UNSAFE_className: classNames(styles, 'buttonGroup')}
    }};
  let {slots} = {...defaults, ...props};

  return (
    <div className={classNames(styles, 'spectrum-Card')}>
      <Grid slots={slots}>
        {props.children}
      </Grid>
    </div>
  );
};

----------------------------------------

TITLE: Using Client Provider in Next.js App Router Layout
DESCRIPTION: This snippet shows how to use the ClientProviders component in a Next.js App Router layout file. The server component imports and wraps its children with the client component.

LANGUAGE: tsx
CODE:
// app/layout.tsx
import {ClientProviders} from './provider';

export default function RootLayout({children}) {
  return (
    <html>
      <body>
        <ClientProviders>{children}</ClientProviders>
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Importing Documentation Components for React Spectrum
DESCRIPTION: Imports necessary documentation components and metadata for the useComboBoxState hook documentation.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/combobox';
import {ClassAPI, HeaderInfo, FunctionAPI, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/combobox/package.json';

----------------------------------------

TITLE: CSS Styling for Calendar Error States
DESCRIPTION: CSS styling for Calendar component that highlights invalid dates with a specific background color and provides a custom style for error messages to improve visual feedback.

LANGUAGE: css
CODE:
.react-aria-Calendar {
  .react-aria-CalendarCell {
    &[data-invalid] {
      background: var(--invalid-color);
      color: var(--highlight-foreground);
    }
  }

  [slot=errorMessage] {
    font-size: 12px;
    color: var(--invalid-color);
  }
}

----------------------------------------

TITLE: Implementing Single Selection Mode in a Table
DESCRIPTION: Shows how to implement single selection mode in a Table component using the selectionMode and defaultSelectedKeys props. Users can select a single row at a time, or deselect by clicking the selected row again.

LANGUAGE: tsx
CODE:
// Using the example above
<FileTable selectionMode="single" defaultSelectedKeys={[2]} />

----------------------------------------

TITLE: Importing Layout Component in JSX
DESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default. This is used for the documentation page structure.

LANGUAGE: jsx
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Setting Fields on CalendarDate in TypeScript
DESCRIPTION: Sets specific fields on a CalendarDate object using the set method, returning a new date with updated values.

LANGUAGE: tsx
CODE:
let date = new CalendarDate(2022, 2, 3);
date.set({day: 10}); // 2022-02-10
date.set({month: 5}); // 2022-05-03
date.set({year: 2023, month: 10, day: 16}); // 2023-10-16

----------------------------------------

TITLE: Styling Collection Drop Target in React Spectrum
DESCRIPTION: CSS styling for a collection drop target, providing visual feedback when a valid drag is hovering over the GridList component using the data-drop-target attribute selector.

LANGUAGE: css
CODE:
.react-aria-GridList[data-drop-target] {
  outline: 2px solid var(--highlight-background);
  outline-offset: -1px;
  background: var(--highlight-overlay);
}

----------------------------------------

TITLE: Restricting Drop Operations with React Aria useDrag
DESCRIPTION: Example demonstrating how to restrict allowed drop operations using the getAllowedDropOperations function. This example only allows copy operations and prevents move operations.

LANGUAGE: tsx
CODE:
function Draggable() {
  let {dragProps, isDragging} = useDrag({
    getItems() {
      return [{
        'text/plain': 'hello world'
      }];
    },
    /*- begin highlight -*/
    getAllowedDropOperations() {
      return ['copy'];
    }
    /*- end highlight -*/
  });

  // ...
  ///- begin collapse -///

  return (
    <div {...dragProps} className={`draggable ${isDragging ? 'dragging' : ''}`}>
      Drag me
    </div>
  );
  ///- end collapse -///
}
///- begin collapse -///
<Draggable />
<DropTarget />
///- end collapse -///

----------------------------------------

TITLE: Creating Linked Items in a List Component
DESCRIPTION: This example demonstrates how to create list items that function as links by passing the href prop to the Item component, making items navigate to external pages when activated.

LANGUAGE: tsx
CODE:
<List aria-label="Links" selectionMode="multiple">
  <Item href="https://adobe.com/" target="_blank">Adobe</Item>
  <Item href="https://apple.com/" target="_blank">Apple</Item>
  <Item href="https://google.com/" target="_blank">Google</Item>
  <Item href="https://microsoft.com/" target="_blank">Microsoft</Item>
</List>

----------------------------------------

TITLE: Styling Stack Layout for ColorSwatchPicker with CSS
DESCRIPTION: CSS example showing how to style the ColorSwatchPicker component when using the stack layout configuration by targeting the data-layout attribute.

LANGUAGE: css
CODE:
.react-aria-ColorSwatchPicker {
  &[data-layout=stack] {
    flex-direction: column;
  }
}

----------------------------------------

TITLE: DisclosureGroup with Interactive Elements
DESCRIPTION: Example of adding interactive elements like buttons alongside disclosure headings. This demonstrates how to properly structure elements as siblings of the Heading rather than children to maintain accessibility.

LANGUAGE: tsx
CODE:
<DisclosureGroup>
  <Disclosure id="system">
    <div style={{display: 'flex', alignItems: 'center'}}>
      <Heading>
        <Button slot="trigger">
          <svg viewBox="0 0 24 24">
            <path d="m8.25 4.5 7.5 7.5-7.5 7.5" />
          </svg>
          System Requirements
        </Button>
      </Heading>
      <Button>Click me</Button>
    </div>
    <DisclosurePanel>
      <p>Details about system requirements here.</p>
    </DisclosurePanel>
  </Disclosure>
  <Disclosure id="personal">
    <div style={{display: 'flex', alignItems: 'center'}}>
      <Heading>
        <Button slot="trigger">
          <svg viewBox="0 0 24 24">
            <path d="m8.25 4.5 7.5 7.5-7.5 7.5" />
          </svg>
          Personal Information
        </Button>
      </Heading>
      <Button>Click me</Button>
    </div>
    <DisclosurePanel>
      <p>Details about personal information here.</p>
    </DisclosurePanel>
  </Disclosure>
</DisclosureGroup>

----------------------------------------

TITLE: Horizontal Orientation for CheckboxGroup
DESCRIPTION: Shows how to change a CheckboxGroup's orientation from the default vertical to horizontal layout.

LANGUAGE: tsx
CODE:
<CheckboxGroup label="Favorite sports" orientation="horizontal">
  <Checkbox value="soccer">Soccer</Checkbox>
  <Checkbox value="baseball">Baseball</Checkbox>
  <Checkbox value="basketball">Basketball</Checkbox>
</CheckboxGroup>

----------------------------------------

TITLE: Conditional Rendering with Render Props
DESCRIPTION: Shows how to conditionally render elements based on component state using render props pattern, such as displaying a checkmark icon for selected items.

LANGUAGE: jsx
CODE:
<ListBoxItem>
  {({isSelected}) => (
    <>
      {isSelected && <CheckmarkIcon />}
      Item
    </>
  )}
</ListBoxItem>

----------------------------------------

TITLE: Styling Disabled Tags with CSS
DESCRIPTION: CSS styling for disabled tags, modifying border color and text color to indicate the disabled state.

LANGUAGE: css
CODE:
.react-aria-TagList {
  .react-aria-Tag {
    &[data-disabled] {
      border-color: var(--border-color-disabled);
      color: var(--text-color-disabled);
    }
  }
}

----------------------------------------

TITLE: Accessing ColorWheel State for Custom Components
DESCRIPTION: Example of a HueField component that accesses the ColorWheel's state via context to display and modify the hue value.

LANGUAGE: tsx
CODE:
import {ColorWheelStateContext, NumberField, Input, useLocale} from 'react-aria-components';

function HueField() {
  let state = React.useContext(ColorWheelStateContext)!;
  let {locale} = useLocale();
  return (
    <NumberField
      aria-label={state.value.getChannelName('hue', locale)}
      value={state.value.getChannelValue('hue')}
      onChange={v => state.setValue(state.value.withChannelValue('hue', v))}
      formatOptions={state.value.getChannelFormatOptions('hue')}>
      <Input />
    </NumberField>
  );
}

<ColorWheel outerRadius={100} innerRadius={74}>
  <ColorWheelTrack />
  <ColorThumb />
  <HueField />
</ColorWheel>

----------------------------------------

TITLE: Styling Description Text in CheckboxGroup
DESCRIPTION: CSS styling for description text within a CheckboxGroup. Sets font size for elements with the description slot.

LANGUAGE: css
CODE:
.react-aria-CheckboxGroup {
  [slot=description] {
    font-size: 12px;
  }
}

----------------------------------------

TITLE: Applying Themes with the Provider Component
DESCRIPTION: Example of how to apply themes and scales using the Provider component. It demonstrates importing theme and scale CSS modules and passing them as props to the Provider, which applies them to all child components.

LANGUAGE: jsx
CODE:
import dark from '@adobe/spectrum-css/dist/vars/spectrum-dark-unique.css';
import medium from '@adobe/spectrum-css/dist/vars/spectrum-medium-unique.css';
import {Provider} from '@react-spectrum/provider';

function App() {
  return (
    <Provider theme={dark} scale={medium}>
      {/* YOUR APP HERE */}
    </Provider>
  );
}

----------------------------------------

TITLE: Adding Description to Select Component
DESCRIPTION: Example showing how to add a description to a Select component using the description slot for providing additional help text.

LANGUAGE: tsx
CODE:
<Select>
  <Label>Favorite Animal</Label>
  <Button>
    <SelectValue />
    <span aria-hidden="true">▼</span>
  </Button>
  <Text slot="description">Please select an animal.</Text>
  <Popover>
    <ListBox>
      <ListBoxItem>Aardvark</ListBoxItem>
      <ListBoxItem>Cat</ListBoxItem>
      <ListBoxItem>Dog</ListBoxItem>
      <ListBoxItem>Kangaroo</ListBoxItem>
      <ListBoxItem>Panda</ListBoxItem>
      <ListBoxItem>Snake</ListBoxItem>
    </ListBox>
  </Popover>
</Select>

----------------------------------------

TITLE: Implementing Fully Controlled ComboBox with useTreeData
DESCRIPTION: Demonstrates how to create a fully controlled ComboBox where inputValue, selectedKey, and items are all managed. Uses useTreeData hook to initialize and manage the list of options.

LANGUAGE: tsx
CODE:
import {useTreeData} from '@react-stately/data';

function Example() {
  let options = [
    {id: 1, name: 'Aerospace'},
    {id: 2, name: 'Mechanical'},
    {id: 3, name: 'Civil'},
    {id: 4, name: 'Biomedical'},
    {id: 5, name: 'Nuclear'},
    {id: 6, name: 'Industrial'},
    {id: 7, name: 'Chemical'},
    {id: 8, name: 'Agricultural'},
    {id: 9, name: 'Electrical'}
  ];

  let [fieldState, setFieldState] = React.useState({
    selectedKey: '',
    inputValue: ''
  });

  let list = useTreeData({
    initialItems: options
  });

  let onSelectionChange = (key) => {
    setFieldState({
      inputValue: list.getItem(key)?.value.name ?? '',
      selectedKey: key
    });
  };

  let onInputChange = (value) => {
    setFieldState(prevState => ({
      inputValue: value,
      selectedKey: value === '' ? null : prevState.selectedKey
    }));
  };

  return (
     <>
      <p>Current selected major id: {fieldState.selectedKey}</p>
      <p>Current input text: {fieldState.inputValue}</p>
       <ComboBox
        label="Pick a engineering major"
        defaultItems={list.items}
        selectedKey={fieldState.selectedKey}
        inputValue={fieldState.inputValue}
        onSelectionChange={onSelectionChange}
        onInputChange={onInputChange}>
        {item => <Item>{item.value.name}</Item>}
      </ComboBox>
     </>
  );
}

----------------------------------------

TITLE: Appending Items to Tree Nodes
DESCRIPTION: Examples demonstrating how to append items to the end of a tree node or root level using the append method.

LANGUAGE: tsx
CODE:
// Append an item to the root
tree.append(null, {name: 'Plants'});

// Append an item to the 'People' node
tree.append('People', {name: 'Plants'});

----------------------------------------

TITLE: Customizing Page Behavior in React Spectrum DatePicker
DESCRIPTION: Example of customizing the pagination behavior of the calendar navigation using the pageBehavior prop to move one month at a time instead of by the maxVisibleMonths value.

LANGUAGE: tsx
CODE:
<DatePicker label="Appointment date" maxVisibleMonths={3} pageBehavior="single" />

----------------------------------------

TITLE: Importing the Text Component in React Spectrum
DESCRIPTION: Shows how to import the Text component from the @react-spectrum/text package. This component is used to represent text with no specific semantic meaning within Spectrum containers.

LANGUAGE: jsx
CODE:
import {Text} from '@react-spectrum/text';

----------------------------------------

TITLE: Multi-Month Calendar with Single Month Navigation
DESCRIPTION: Shows how to configure a multi-month calendar with the pageBehavior prop set to 'single', which makes navigation buttons move by one month at a time rather than by the entire visible duration.

LANGUAGE: tsx
CODE:
<Calendar aria-label="Appointment date" visibleDuration={{months: 3}} pageBehavior="single">
  <header>
    <Button slot="previous">◀</Button>
    <Heading />
    <Button slot="next">▶</Button>
  </header>
  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>
    <CalendarGrid>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
    <CalendarGrid offset={{months: 1}}>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
    <CalendarGrid offset={{months: 2}}>
      {date => <CalendarCell date={date} />}
    </CalendarGrid>
  </div>
</Calendar>

----------------------------------------

TITLE: Custom Size ColorWheel Component
DESCRIPTION: Example showing how to customize the size of the ColorWheel component using the size prop.

LANGUAGE: tsx
CODE:
<ColorWheel size="size-1600" />

----------------------------------------

TITLE: Implementing TableCell with React Aria
DESCRIPTION: Creates a table cell component using useTableCell hook that supports keyboard navigation and focus management. The component displays the cell's content with appropriate styling.

LANGUAGE: tsx
CODE:
import {useTableCell} from '@react-aria/table';

function TableCell({cell, state}) {
  let ref = useRef<HTMLTableCellElement | null>(null);
  let {gridCellProps} = useTableCell({node: cell}, state, ref);
  let {isFocusVisible, focusProps} = useFocusRing();

  return (
    <td
      {...mergeProps(gridCellProps, focusProps)}
      style={{
        padding: '5px 10px',
        outline: 'none',
        boxShadow: isFocusVisible ? 'inset 0 0 0 2px orange' : 'none'
      }}
      ref={ref}>
      {cell.rendered}
    </td>
  );
}

----------------------------------------

TITLE: Implementing Controlled and Uncontrolled DatePicker in React
DESCRIPTION: Demonstrates both controlled and uncontrolled implementations of the DatePicker component using the parseDate function from @internationalized/date package.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState(parseDate('2020-02-03'));

  return (
    <>
      <DatePicker
        label="Date (uncontrolled)"
        defaultValue={parseDate('2020-02-03')} />
      <DatePicker
        label="Date (controlled)"
        value={value}
        onChange={setValue} />
    </>
  );
}

----------------------------------------

TITLE: CSS Keyframe Animations for Overlay Components
DESCRIPTION: Implements more complex animations using CSS keyframes. The example shows a slide-in animation for entry and the same animation in reverse for exit, with corresponding opacity changes.

LANGUAGE: css
CODE:
.react-aria-Popover[data-entering] {
  animation: slide 300ms;
}

.react-aria-Popover[data-exiting] {
  animation: slide 300ms reverse;
}

@keyframes slide {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}

----------------------------------------

TITLE: Install Reference for @react-spectrum/autocomplete Package
DESCRIPTION: Shows the package name as it would appear in package.json dependencies or in an npm install command.

LANGUAGE: markdown
CODE:
@react-spectrum/autocomplete

----------------------------------------

TITLE: DateField with Time Zone Support
DESCRIPTION: Shows how to use DateField with a time zone aware date value using the parseZonedDateTime function from the @internationalized/date package.

LANGUAGE: tsx
CODE:
import {parseZonedDateTime} from '@internationalized/date';

<DateField
  label="Event date"
  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />

----------------------------------------

TITLE: Styling React Aria Component States with Data Attributes
DESCRIPTION: Example of using data attributes to target different UI states in React Aria components, similar to CSS pseudo-classes but with more consistent behavior across devices.

LANGUAGE: css
CODE:
.react-aria-ListBoxItem[data-selected] {
  /* ... */
}

.react-aria-ListBoxItem[data-focused] {
  /* ... */
}

----------------------------------------

TITLE: 404 Not Found Error IllustratedMessage Example
DESCRIPTION: Example showing how to display a 404 error message with the NotFound illustration to indicate the page was not found.

LANGUAGE: tsx
CODE:
<IllustratedMessage>
  <NotFound />
  <Heading>Error 404: Page not found</Heading>
  <Content>This page isn't available. Try checking the URL or visit a different page.</Content>
</IllustratedMessage>

----------------------------------------

TITLE: CSS Styling for React Aria Toolbar
DESCRIPTION: CSS styles for the toolbar component that define the layout as a flexible container with proper spacing between child elements and a custom separator color.

LANGUAGE: CSS
CODE:
[role=toolbar] {
  --separator-color: var(--spectrum-global-color-gray-500);
  display: flex;
  flex-wrap: wrap;
  gap: 5px;
}

----------------------------------------

TITLE: Implementing Nested DOM Structure with Semantic Elements
DESCRIPTION: Example showing how semantic elements can maintain proper styling even when nested within arbitrary DOM structures.

LANGUAGE: JSX
CODE:
<Card>
  <div>
    <Header>Title</Header>
    <Button>X</Button>
  </div>
  <Description>Description goes here</Description>
</Card>

----------------------------------------

TITLE: Tooltip with Horizontal Cross Offset
DESCRIPTION: Example of using the crossOffset prop to adjust a tooltip's position along the cross axis. This tooltip is shifted 60px to the right while maintaining its vertical placement.

LANGUAGE: tsx
CODE:
<TooltipTrigger>
  <Button>👉</Button>
  <MyTooltip crossOffset={60} placement="bottom">This will shift over to the right.</MyTooltip>
</TooltipTrigger>

----------------------------------------

TITLE: Implementing a Horizontal Color Slider with React Aria
DESCRIPTION: This code demonstrates how to build an accessible horizontal color slider using the useColorSlider hook. It includes proper labeling, thumb focusing behavior, and formatting of color values according to locale settings.

LANGUAGE: tsx
CODE:
import {useColorSlider} from '@react-aria/color';
import {useColorSliderState} from '@react-stately/color';
import {useLocale} from '@react-aria/i18n';
import {useFocusRing} from '@react-aria/focus';

const TRACK_THICKNESS = 28;
const THUMB_SIZE = 20;

function ColorSlider(props) {
  let {isDisabled} = props;
  let {locale} = useLocale();
  let state = useColorSliderState({...props, locale});
  let trackRef = React.useRef(null);
  let inputRef = React.useRef(null);

  // Default label to the channel name in the current locale
  let label = props.label || state.value.getChannelName(props.channel, locale);

  let {trackProps, thumbProps, inputProps, labelProps, outputProps} = useColorSlider({
    ...props,
    label,
    trackRef,
    inputRef
  }, state);

  let {focusProps, isFocusVisible} = useFocusRing();

  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        width: 300
      }}>
      {/* Create a flex container for the label and output element. */}
      <div style={{display: 'flex', alignSelf: 'stretch'}}>
        <label {...labelProps}>{label}</label>
        <output {...outputProps} style={{flex: '1 0 auto', textAlign: 'end'}}>
          {state.value.formatChannelValue(props.channel, locale)}
        </output>
      </div>
      {/* The track element holds the visible track line and the thumb. */}
      <div
        {...trackProps}
        ref={trackRef}
        style={{
          ...trackProps.style,
          height: TRACK_THICKNESS,
          width: '100%',
          borderRadius: 4,
          background: isDisabled ? 'rgb(142, 142, 142)' : trackProps.style.background
        }}>
        <div
          {...thumbProps}
          style={{
            ...thumbProps.style,
            top: TRACK_THICKNESS / 2,
            background: isDisabled ? 'rgb(142, 142, 142)' : state.getDisplayColor().toString('css'),
            border: `2px solid ${isDisabled ? 'rgb(142, 142, 142)' : 'white'}`,
            boxShadow: '0 0 0 1px black, inset 0 0 0 1px black',
            width: isFocusVisible ? TRACK_THICKNESS + 4 : THUMB_SIZE,
            height: isFocusVisible ? TRACK_THICKNESS + 4 : THUMB_SIZE,
            borderRadius: '50%',
            boxSizing: 'border-box'
          }}>
          <input ref={inputRef} {...inputProps} {...focusProps} />
        </div>
      </div>
    </div>
  );
}

<ColorSlider channel="hue" defaultValue="hsl(0, 100%, 50%)" />

----------------------------------------

TITLE: ActionMenu with Event Handling
DESCRIPTION: Shows how to handle user actions with the onAction prop, which is called when a menu item is selected, and displays the selected action.

LANGUAGE: tsx
CODE:
function Example() {
  let [action, setAction] = React.useState(null);

  return (
    <>
      <ActionMenu onAction={setAction}>
        <Item key="cut">Cut</Item>
        <Item key="copy">Copy</Item>
        <Item key="paste">Paste</Item>
      </ActionMenu>
      <p>Action: {action}</p>
    </>
  );
}

----------------------------------------

TITLE: Basic ColorWheel Example with Default Value
DESCRIPTION: Simple implementation of the ColorWheel component with a default hue value of 30 degrees.

LANGUAGE: tsx
CODE:
<ColorWheel defaultValue="hsl(30, 100%, 50%)" />

----------------------------------------

TITLE: Styling Tag Group Components with CSS
DESCRIPTION: CSS styles for the Tag Group component to provide proper layout, focus states, and visual appearance. Includes styling for the grid layout, individual tags, remove buttons, and descriptive text.

LANGUAGE: css
CODE:
.tag-group {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.tag-group [role="grid"] {
  display: flex;
  flex-wrap: wrap;
  gap: 4px;
}

.tag-group [role="row"] {
  display: flex;
  align-items: center;
  border: 1px solid gray;
  border-radius: 4px;
  padding: 2px 5px;
  cursor: default;
  outline: none;

  &[data-focus-visible=true] {
    outline: 2px solid slateblue;
    outline-offset: 2px;
  }

  &[aria-selected=true] {
    background: var(--spectrum-gray-900);
    border-color: var(--spectrum-gray-900);
    color: var(--spectrum-gray-50);
  }

  &[aria-disabled] {
    opacity: 0.4;
  }
}

.tag-group [role="gridcell"] {
  margin: 0 5px;
}

.tag-group [role="row"] button {
  background: none;
  border: none;
  padding-right: 0;
}

.tag-group .description {
  font-size: 12px;
}

.tag-group .error-message {
  color: red;
  font-size: 12px;
}

----------------------------------------

TITLE: Applying Custom Class Names to Breadcrumbs
DESCRIPTION: Shows how to override the default class name with a custom one on the Breadcrumbs component.

LANGUAGE: jsx
CODE:
<Breadcrumbs className="my-breadcrumbs">
  {/* ... */}
</Breadcrumbs>

----------------------------------------

TITLE: Importing Tailwind CSS for React Aria Components
DESCRIPTION: Imports a tailwind global CSS file for styling React Aria Components.

LANGUAGE: tsx
CODE:
import './tailwind.global.css';

----------------------------------------

TITLE: Implementing Error Validation in Calendar Component with React Spectrum
DESCRIPTION: This example demonstrates how to validate dates in a Calendar component to ensure weekdays are selected rather than weekends. It uses the isInvalid prop and errorMessage slot to provide user feedback when an invalid date is selected.

LANGUAGE: tsx
CODE:
import {today, isWeekend} from '@internationalized/date';
import {useLocale} from 'react-aria';

function Example() {
  let [date, setDate] = React.useState(today(getLocalTimeZone()));
  let {locale} = useLocale();
  let isInvalid = isWeekend(date, locale);

  return (
    <MyCalendar
      aria-label="Appointment date"
      value={date}
      onChange={setDate}
      /*- begin highlight -*/
      isInvalid={isInvalid}
      errorMessage={isInvalid ? 'We are closed on weekends' : undefined}
      /*- end highlight -*/
    />
  );
}

----------------------------------------

TITLE: Implementing Static Collections in React Aria Menu Component
DESCRIPTION: A simple example of a static collection using the Menu component with MenuItems. This pattern is useful for collections that don't change over time, such as application menu actions.

LANGUAGE: tsx
CODE:
<Menu>
  <MenuItem>Open</MenuItem>
  <MenuItem>Edit</MenuItem>
  <MenuItem>Delete</MenuItem>
</Menu>

----------------------------------------

TITLE: Displaying Multiple Calendar Systems with React Spectrum Picker and Provider
DESCRIPTION: This example demonstrates how to create a UI that lets users select different calendar systems (Gregorian, Japanese, Buddhist, etc.) and displays a calendar component with the selected calendar system. It uses React Spectrum's Picker and Provider components to handle the locale formatting.

LANGUAGE: tsx
CODE:
import {Picker, Item} from '@react-spectrum/picker';
import {Flex} from '@react-spectrum/layout';
import {Provider} from '@react-spectrum/provider';

function Example() {
  let [calendar, setCalendar] = React.useState('gregory');
  let {locale} = useLocale();
  const calendars = [
    {key: 'gregory', name: 'Gregorian'},
    {key: 'japanese', name: 'Japanese'},
    {key: 'buddhist', name: 'Buddhist'},
    {key: 'roc', name: 'Taiwan'},
    {key: 'persian', name: 'Persian'},
    {key: 'indian', name: 'Indian'},
    {key: 'islamic-umalqura', name: 'Islamic (Umm al-Qura)'},
    {key: 'islamic-civil', name: 'Islamic Civil'},
    {key: 'islamic-tbla', name: 'Islamic Tabular'},
    {key: 'hebrew', name: 'Hebrew'},
    {key: 'coptic', name: 'Coptic'},
    {key: 'ethiopic', name: 'Ethiopic'},
    {key: 'ethioaa', name: 'Ethiopic (Amete Alem)'}
  ];

  return (
    <Flex direction="column" alignItems="center" gap="size-200">
      <Picker label="Calendar system" items={calendars} selectedKey={calendar} onSelectionChange={setCalendar}>
        {item => <Item>{item.name}</Item>}
      </Picker>
      <Provider locale={`${locale}-u-ca-${calendar}`}>
        <Calendar aria-label="Date" />
      </Provider>
    </Flex>
  )
}

----------------------------------------

TITLE: Styling the ColorThumb Component with CSS
DESCRIPTION: CSS rules for styling the color thumb element of the ColorWheel, including border, shadow, and focus state styling. The thumb is styled as a circular element with proper visual indicators.

LANGUAGE: css
CODE:
.react-aria-ColorThumb {
  border: 2px solid white;
  box-shadow: 0 0 0 1px black, inset 0 0 0 1px black;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  box-sizing: border-box;

  &[data-focus-visible] {
    width: 24px;
    height: 24px;
  }
}

----------------------------------------

TITLE: Primary Variant Button Styles in React Spectrum
DESCRIPTION: Demonstrates the primary variant of Button with both fill and outline styles.

LANGUAGE: tsx
CODE:
<Flex wrap gap="size-250">
  <Button variant="primary" style="fill">Save</Button>
  <Button variant="primary" style="outline">Save</Button>
</Flex>

----------------------------------------

TITLE: Animating Tooltips with CSS Transitions
DESCRIPTION: Demonstrates how to implement entry and exit animations for tooltips using data attributes and CSS transitions.

LANGUAGE: css
CODE:
.react-aria-Tooltip {
  transition: opacity 300ms;

  &[data-entering],
  &[data-exiting] {
    opacity: 0;
  }
}

----------------------------------------

TITLE: React Spectrum Shared Types Package Reference
DESCRIPTION: A markdown reference to the @react-types/shared package, indicating it is part of the React Spectrum library and directing users to the main repository for further details.

LANGUAGE: markdown
CODE:
# @react-types/shared

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Configuring Manual Keyboard Activation for Tabs
DESCRIPTION: This example shows how to configure the Tabs component with manual keyboard activation, requiring an Enter or Space key press to confirm tab selection after navigating with arrow keys.

LANGUAGE: tsx
CODE:
<Tabs aria-label="Input settings" keyboardActivation="manual">
  <Item key="mouse">Mouse Settings</Item>
  <Item key="keyboard">Keyboard Settings</Item>
  <Item key="gamepad">Gamepad Settings</Item>
</Tabs>

----------------------------------------

TITLE: Implementing Custom Filtering for ComboBox in React Spectrum
DESCRIPTION: This example demonstrates how to implement custom filtering for a ComboBox using the useFilter hook. It uses a 'startsWith' filtering strategy and handles special cases when the menu is opened via different trigger methods.

LANGUAGE: tsx
CODE:
function Example() {
  let options = [
    {id: 1, email: 'fake@email.com'},
    {id: 2, email: 'anotherfake@email.com'},
    {id: 3, email: 'bob@email.com'},
    {id: 4, email: 'joe@email.com'},
    {id: 5, email: 'yourEmail@email.com'},
    {id: 6, email: 'valid@email.com'},
    {id: 7, email: 'spam@email.com'},
    {id: 8, email: 'newsletter@email.com'},
    {id: 9, email: 'subscribe@email.com'}
  ];

  let [showAll, setShowAll] = React.useState(false);
  let [filterValue, setFilterValue] = React.useState('');
  let {startsWith} = useFilter({sensitivity: 'base'});
  let filteredItems = React.useMemo(() => options.filter(item => startsWith(item.email, filterValue)), [options, filterValue]);

  return (
    <ComboBox
      onOpenChange={(isOpen, menuTrigger) => {
        // Show all items if menu is opened manually
        // i.e. by the arrow keys or trigger button
        if (menuTrigger === 'manual' && isOpen) {
          setShowAll(true);
        }
      }}
      width="size-3000"
      label="To:"
      items={showAll ? options : filteredItems}
      inputValue={filterValue}
      onInputChange={(value) => {
        setShowAll(false);
        setFilterValue(value);
      }}
      allowsCustomValue>
      {item => <Item>{item.email}</Item>}
    </ComboBox>
  );
}

----------------------------------------

TITLE: Styling HTML Elements with React Spectrum Style Macros
DESCRIPTION: Example of styling an HTML div element using React Spectrum's style() macro. This approach applies Spectrum design system spacing properties to regular HTML elements.

LANGUAGE: jsx
CODE:
<div className={style({marginStart: 16})}>
  Hello Spectrum 2!
</div>

----------------------------------------

TITLE: Controlled vs Uncontrolled ColorSlider Example
DESCRIPTION: Demonstrates both controlled and uncontrolled ColorSlider components side by side, using React state for the controlled version.

LANGUAGE: tsx
CODE:
import {parseColor} from '@react-stately/color';

function Example() {
  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));
  return (
    <Flex gap="size-300" wrap>
      <ColorSlider
        label="Hue (uncontrolled)"
        defaultValue="hsl(0, 100%, 50%)"
        channel="hue" />
      <ColorSlider
        label="Hue (controlled)"
        value={value}
        onChange={setValue}
        channel="hue" />
    </Flex>
  );
}

----------------------------------------

TITLE: Handling ColorPicker Events with onChange in React Aria
DESCRIPTION: This example shows how to use the onChange event handler with a ColorPicker to update a separate element with the color value as a string. The selected color is displayed in HSL format.

LANGUAGE: tsx
CODE:
function Example() {
  let [value, setValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));

  return (
    <div>
      <MyColorPicker
        label="Color"
        value={value}
        onChange={setValue} />
      <p>Selected color: {value.toString('hsl')}</p>
    </div>
  );
}

----------------------------------------

TITLE: Using Custom IDs for Collection Items
DESCRIPTION: Example of specifying custom IDs for collection items when the data doesn't have a default id property. This approach uses another unique property from the data as the ID.

LANGUAGE: tsx
CODE:
let [animals, setAnimals] = useState([
  {name: 'Aardvark'},
  {name: 'Kangaroo'},
  {name: 'Snake'}
]);

<ListBox items={animals}>
  {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
</ListBox>

----------------------------------------

TITLE: Styling Drag and Drop Items in GridList with CSS
DESCRIPTION: CSS styling for drag and drop functionality in GridList, including styles for draggable items, drag handles, drop indicators, and focus states.

LANGUAGE: css
CODE:
.react-aria-GridListItem {
  &[data-allows-dragging] {
    padding-left: 4px;
  }

  &[data-dragging] {
    opacity: 0.6;
  }

  [slot=drag] {
    all: unset;
    width: 15px;
    text-align: center;

    &[data-focus-visible] {
      border-radius: 4px;
      outline: 2px solid var(--focus-ring-color);
    }
  }
}

.react-aria-DropIndicator {
  &[data-drop-target] {
    outline: 1px solid var(--highlight-background);
  }

  @supports not selector(:has(.foo)) {
    /* Undo gap in browsers that don't support :has */
    margin-bottom: -2px;
  }
}

----------------------------------------

TITLE: Implementing Dialog with Focus Management in React Aria
DESCRIPTION: This snippet creates a dialog triggered by a button with focus management capabilities. It demonstrates how React Aria automatically handles focus containment within overlays, focus restoration on dialog close, and keyboard focus indicators for accessibility.

LANGUAGE: tsx
CODE:
import {TextField} from 'tailwind-starter/TextField';
import {Popover} from 'tailwind-starter/Popover';
import {Button} from 'tailwind-starter/Button';
import {Dialog, DialogTrigger, Heading} from 'react-aria-components';
import {CircleUser} from 'lucide-react';

<div className="flex items-center justify-center h-full">
  <DialogTrigger>
    <Button variant="secondary" className="w-9 h-9 p-0" aria-label="Account"><CircleUser aria-hidden className="inline w-5 h-5" /></Button>
    <Popover showArrow className="w-[250px]">
      <Dialog className="outline outline-0 p-4 overflow-auto flex flex-col gap-2">
        <Heading slot="title" className="text-lg font-semibold mb-2">Your Account</Heading>
        <TextField label="First Name" defaultValue="Devon" autoFocus={navigator.maxTouchPoints === 0} />
        <TextField label="Last Name" defaultValue="Govett" />
      </Dialog>
    </Popover>
  </DialogTrigger>
</div>

----------------------------------------

TITLE: GridList Anatomy Implementation in React Aria Components
DESCRIPTION: Shows the basic structure of a GridList component with drag and selection functionality. This demonstrates how to build the anatomy of a GridList with proper slot usage.

LANGUAGE: tsx
CODE:
import {GridList, GridListItem, Checkbox, Button} from 'react-aria-components';

<GridList>
  <GridListItem>
    <Button slot="drag" />
    <Checkbox slot="selection" />
  </GridListItem>
</GridList>

----------------------------------------

TITLE: Importing and Configuring Blog Post Layout in React
DESCRIPTION: Imports and exports the BlogPostLayout component from the React Spectrum docs package. This sets up the structure for the release notes blog post with metadata including description and date.

LANGUAGE: JSX
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

---
description: In this release, we have many updates for our pre-release components including TagGroup and Table column resizing, and Avatar has moved to GA. We are also releasing the first alpha of React Aria Components, brand new component library built on top of our React Aria hooks! It provides a simpler way to build accessible components with custom styles, while offering the flexibility to drop down to hooks for even more customizability where needed.
date: 2023-04-05
---

----------------------------------------

TITLE: Creating a Reusable Button Component with useButton
DESCRIPTION: Implementation of a reusable Button component using the useButton hook, which can be used as the trigger for the DateRangePicker calendar popover.

LANGUAGE: TSX
CODE:
import {useButton} from '@react-aria/button';

function Button(props) {
  let ref = React.useRef(null);
  let {buttonProps} = useButton(props, ref);
  return <button {...buttonProps} ref={ref}>{props.children}</button>;
}

----------------------------------------

TITLE: Referencing React Aria i18n Package
DESCRIPTION: Shows the package name and its relationship to the React Spectrum project. This is a simple reference to the package name in markdown format.

LANGUAGE: markdown
CODE:
# @react-aria/i18n

----------------------------------------

TITLE: Using Function-Based className Props with State in React Aria
DESCRIPTION: Example of using a function for the className prop that receives component states, useful for applying conditional utility classes like Tailwind.

LANGUAGE: jsx
CODE:
<Tab className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>
  Settings
</Tab>

----------------------------------------

TITLE: Importing and Rendering a Basic ColorWheel Component in React
DESCRIPTION: A basic example showing how to import and render a ColorWheel component with its track and thumb subcomponents. The example sets outer and inner radius properties to define the wheel's dimensions.

LANGUAGE: tsx
CODE:
import {ColorWheel, ColorWheelTrack, ColorThumb} from 'react-aria-components';

<ColorWheel outerRadius={100} innerRadius={74}>
  <ColorWheelTrack />
  <ColorThumb />
</ColorWheel>

----------------------------------------

TITLE: Using a React Spectrum Button Component in TSX
DESCRIPTION: Example showing how to use a Button component from React Spectrum with the accent variant. This demonstrates basic component usage with properties.

LANGUAGE: tsx
CODE:
<Button variant="accent">Button</Button>

----------------------------------------

TITLE: Hiding Scrollbars with CSS
DESCRIPTION: CSS utility classes to hide scrollbars across different browsers, used for the tabs panel container.

LANGUAGE: css
CODE:
.no-scrollbar::-webkit-scrollbar {
  display: none;
}

.no-scrollbar {
  scrollbar-width: none;
}

----------------------------------------

TITLE: Adding Help Text to DatePicker in React Spectrum
DESCRIPTION: Shows how to add description text and error messages to a DatePicker. The description is shown by default, while error messages are displayed when validationState is 'invalid'.

LANGUAGE: tsx
CODE:
<Flex gap="size-100" wrap>
  <DatePicker label="Date" defaultValue={today(getLocalTimeZone())} validationState="valid" description="Select a meeting date." />
  <DatePicker label="Date" validationState="invalid" errorMessage="Empty input is not allowed." />
</Flex>

----------------------------------------

TITLE: Creating Sectioned Dynamic Collections
DESCRIPTION: Example of building a sectioned collection with dynamic data using the Section and Collection components. This approach allows for nested data structures with headers and items within each section.

LANGUAGE: tsx
CODE:
let [sections, setSections] = useState([
  {
    name: 'People',
    items: [
      {name: 'David'},
      {name: 'Same'},
      {name: 'Jane'}
    ]
  },
  {
    name: 'Animals',
    items: [
      {name: 'Aardvark'},
      {name: 'Kangaroo'},
      {name: 'Snake'}
    ]
  }
]);

<ListBox items={sections}>
  {section =>
    <Section id={section.name}>
      <Header>{section.name}</Header>
      <Collection items={section.children}>
        {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}
      </Collection>
    </Section>
  }
</ListBox>

----------------------------------------

TITLE: Importing Layout Component in React Spectrum Documentation
DESCRIPTION: Imports the Layout component from the @react-spectrum/docs package and exports it as the default export for the documentation page.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Implementing Tabs as Navigation Links with React Router
DESCRIPTION: Example showing how to implement tabs as navigation links using React Router, synchronizing the selected tab with the URL. Requires setting up RouterProvider and handling route changes.

LANGUAGE: tsx
CODE:
import {useLocation, useNavigate, BrowserRouter, Routes, Route} from 'react-router-dom';
import {RouterProvider} from 'react-aria-components';

function AppTabs() {
  let {pathname} = useLocation();

  return (
    <Tabs selectedKey={pathname}>
      <TabList aria-label="Tabs">
        <Tab id="/" href="/">Home</Tab>
        <Tab id="/shared" href="/shared">Shared</Tab>
        <Tab id="/deleted" href="/deleted">Deleted</Tab>
      </TabList>
      <TabPanel id={pathname}>
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/shared" element={<SharedPage />} />
          <Route path="/deleted" element={<DeletedPage />} />
        </Routes>
      </TabPanel>
    </Tabs>
  );
}

function App() {
  let navigate = useNavigate();
  return (
    <RouterProvider navigate={navigate}>
      <Routes>
        <Route path="/*" element={<AppTabs />} />
      </Routes>
    </RouterProvider>
  );
}

<BrowserRouter>
  <App />
</BrowserRouter>

----------------------------------------

TITLE: Picker with Static Sections in React Spectrum
DESCRIPTION: Shows how to organize Picker options into sections using the Section component. Each section has a title and contains related Item components.

LANGUAGE: tsx
CODE:
<Picker label="Pick your favorite">
  <Section title="Animals">
    <Item key="Aardvark">Aardvark</Item>
    <Item key="Kangaroo">Kangaroo</Item>
    <Item key="Snake">Snake</Item>
  </Section>
  <Section title="People">
    <Item key="Danni">Danni</Item>
    <Item key="Devon">Devon</Item>
    <Item key="Ross">Ross</Item>
  </Section>
</Picker>

----------------------------------------

TITLE: Configuring Tailwind CSS for React Aria Components in v4
DESCRIPTION: Instructions for importing the tailwindcss-react-aria-components plugin in Tailwind CSS v4 via CSS import.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "tailwindcss-react-aria-components";

----------------------------------------

TITLE: CSS Styling for Waterfall Layout in React Aria Components
DESCRIPTION: CSS styles for the waterfall layout example, setting the ListBox height and ensuring images maintain their proper dimensions without constraints on max-width.

LANGUAGE: css
CODE:
.react-aria-ListBox[aria-label~=waterfall] {
  height: 400px;
  max-height: none;
  .react-aria-ListBoxItem img {
    max-width: none;
  }
}

----------------------------------------

TITLE: Implementing Card and Dialog Components with Reusable Semantic Elements
DESCRIPTION: Example of the proposed approach using semantic elements that can be reused across different container components, reducing duplication.

LANGUAGE: JSX
CODE:
<Card>
  <Header />
  <Description />
  <Footer />
</Card>

LANGUAGE: JSX
CODE:
<Dialog>
  <Header />
  <Description />
  <Footer />
</Dialog>

----------------------------------------

TITLE: Basic RadioGroup Implementation in React Aria Components
DESCRIPTION: Example of implementing a basic RadioGroup with multiple Radio options. This code demonstrates the fundamental component structure with a label and three radio button options.

LANGUAGE: tsx
CODE:
import {RadioGroup, Radio, Label} from 'react-aria-components';

<RadioGroup>
  <Label>Favorite pet</Label>
  <Radio value="dogs">Dog</Radio>
  <Radio value="cats">Cat</Radio>
  <Radio value="dragon">Dragon</Radio>
</RadioGroup>

----------------------------------------

TITLE: Running React Development Server
DESCRIPTION: Starts the development server for the React application, enabling real-time preview and hot-reloading in the browser at localhost:3000.

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Importing from Individual React Spectrum Component Package
DESCRIPTION: Example of importing a Button component directly from its individual package instead of the mono-package.

LANGUAGE: tsx
CODE:
import {Button} from '@react-spectrum/button';

----------------------------------------

TITLE: Implementing Non-Contiguous Date Ranges in RangeCalendar
DESCRIPTION: Demonstrates how to allow selection of non-contiguous date ranges that may contain unavailable dates, such as weekends. Uses the allowsNonContiguousRanges prop with a function to detect weekends.

LANGUAGE: tsx
CODE:
import {isWeekend} from '@internationalized/date';
import {useLocale} from '@react-aria/i18n';

function Example() {
  let {locale} = useLocale();

  return <MyRangeCalendar aria-label="Time off request" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />
}

----------------------------------------

TITLE: Using Custom Label Component in TextField
DESCRIPTION: Example showing how to use a custom label component inside a TextField in place of the built-in Label component.

LANGUAGE: tsx
CODE:
<TextField>
  <MyCustomLabel>Name</MyCustomLabel>
  <Input />
</TextField>

----------------------------------------

TITLE: Installing Individual React Spectrum Component with Yarn
DESCRIPTION: Command for installing an individual React Spectrum component package using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add @react-spectrum/button

----------------------------------------

TITLE: Using Custom Component within Calendar Structure
DESCRIPTION: Shows how to place the custom CalendarValue component inside a Calendar to display the current value, leveraging the parent component's context.

LANGUAGE: tsx
CODE:
<Calendar>
  {/* ... */}
  {/*- begin highlight -*/}
  <CalendarValue />
  {/*- end highlight -*/}
</Calendar>

----------------------------------------

TITLE: Setting Custom Hour Cycle in DateRangePicker
DESCRIPTION: Example demonstrating how to force 24-hour time format in a DateRangePicker regardless of the user's locale settings.

LANGUAGE: tsx
CODE:
<MyDateRangePicker
  label="Date range"
  granularity="minute"
  hourCycle={24} />

----------------------------------------

TITLE: Basic Accordion Implementation in React Spectrum
DESCRIPTION: Demonstrates a basic implementation of the Accordion component with two disclosure sections, where the 'personal' section is expanded by default.

LANGUAGE: tsx
CODE:
<Accordion defaultExpandedKeys={['personal']}>
  <Disclosure id="personal">
    <DisclosureTitle>Personal Information</DisclosureTitle>
    <DisclosurePanel>
      Personal information form here.
    </DisclosurePanel>
  </Disclosure>
  <Disclosure id="billing">
    <DisclosureTitle>Billing Address</DisclosureTitle>
    <DisclosurePanel>
      Billing address form here.
    </DisclosurePanel>
  </Disclosure>
</Accordion>

----------------------------------------

TITLE: Using Disabled Breadcrumbs in React Aria
DESCRIPTION: Demonstrates how to create disabled breadcrumb items using the isDisabled prop, which makes breadcrumbs non-interactive and appropriately styled with aria-disabled for accessibility.

LANGUAGE: TSX
CODE:
<Breadcrumbs>
  <BreadcrumbItem href="/" isDisabled>Home</BreadcrumbItem>
  <BreadcrumbItem href="/react-aria/">React Aria</BreadcrumbItem>
  <BreadcrumbItem>useBreadcrumbs</BreadcrumbItem>
</Breadcrumbs>

----------------------------------------

TITLE: Adding Column Dividers in React Spectrum TableView
DESCRIPTION: Demonstrates how to add visual dividers between columns in a TableView by using the showDivider prop on Column components.

LANGUAGE: tsx
CODE:
<TableView aria-label="Example table for column dividers">
  <TableHeader>
    <Column align="start" showDivider>Name</Column>
    <Column showDivider>Type</Column>
    <Column align="end" showDivider>Size</Column>
  </TableHeader>
  <TableBody>
    <Row>
      <Cell>2021406_Proposal</Cell>
      <Cell>PDF</Cell>
      <Cell>86 KB</Cell>
    </Row>
    <Row>
      <Cell>Budget Template</Cell>
      <Cell>XLS</Cell>
      <Cell>120 KB</Cell>
    </Row>
    <Row>
      <Cell>Onboarding</Cell>
      <Cell>PPT</Cell>
      <Cell>472 KB</Cell>
    </Row>
    <Row>
      <Cell>Welcome</Cell>
      <Cell>TXT</Cell>
      <Cell>24 KB</Cell>
    </Row>
  </TableBody>
</TableView>

----------------------------------------

TITLE: Creating an Implicit Grid Layout in React Spectrum
DESCRIPTION: Example of creating a responsive implicit grid using the repeat function for automatic column generation based on available space, with auto-rows and consistent spacing.

LANGUAGE: tsx
CODE:
<Grid
  columns={repeat('auto-fit', 'size-800')}
  autoRows="size-800"
  justifyContent="center"
  gap="size-100">
  {colors.map(color =>
    <View key={color} backgroundColor={color} />
  )}
</Grid>

----------------------------------------

TITLE: Documentation Imports for React Aria Autocomplete
DESCRIPTION: Imports various documentation resources, component APIs, and utilities needed to generate the React Aria useSearchAutocomplete documentation page.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-aria/autocomplete';
import collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';
import {FunctionAPI, HeaderInfo, InterfaceType, TypeContext, TypeLink, PageDescription} from '@react-spectrum/docs';
import i18nDocs from 'docs:@react-aria/i18n';
import overlaysDocs from 'docs:@react-aria/overlays';
import packageData from '@react-aria/autocomplete/package.json';
import selectionDocs from 'docs:@react-stately/selection';
import statelyDocs from 'docs:@react-stately/combobox';
import Anatomy from './anatomy.svg';
import ChevronRight from '@spectrum-icons/workflow/ChevronRight';
import {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';

----------------------------------------

TITLE: Listing Released Packages in React Spectrum Ecosystem with Versions
DESCRIPTION: A markdown code block containing the complete list of all released packages in the React Spectrum ecosystem with their corresponding version numbers. This includes packages from @adobe/react-spectrum, @internationalized, @react-aria, @react-spectrum, @react-stately, @react-types, @spectrum-icons, react-aria, and react-stately families.

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum => 3.13.0
- @internationalized/message => 3.0.2
- @internationalized/number => 3.0.2
- @react-aria/accordion => 3.0.0-alpha.2
- @react-aria/actiongroup => 3.2.1
- @react-aria/aria-modal-polyfill => 3.4.0
- @react-aria/breadcrumbs => 3.1.5
- @react-aria/button => 3.3.3
- @react-aria/checkbox => 3.2.3
- @react-aria/color => 3.0.0-beta.3
- @react-aria/combobox => 3.0.1
- @react-aria/dialog => 3.1.4
- @react-aria/dnd => 3.0.0-alpha.3
- @react-aria/focus => 3.4.1
- @react-aria/grid => 3.0.0-rc.0
- @react-aria/i18n => 3.3.2
- @react-aria/interactions => 3.5.1
- @react-aria/label => 3.1.3
- @react-aria/link => 3.1.4
- @react-aria/listbox => 3.3.1
- @react-aria/live-announcer => 3.0.1
- @react-aria/menu => 3.2.3
- @react-aria/meter => 3.1.3
- @react-aria/numberfield => 3.0.1
- @react-aria/overlays => 3.7.2
- @react-aria/progress => 3.1.3
- @react-aria/radio => 3.1.5
- @react-aria/searchfield => 3.1.5
- @react-aria/select => 3.4.1
- @react-aria/selection => 3.5.1
- @react-aria/separator => 3.1.3
- @react-aria/slider => 3.0.3
- @react-aria/spinbutton => 3.0.1
- @react-aria/ssr => 3.0.3
- @react-aria/switch => 3.1.3
- @react-aria/table => 3.0.0-rc.0
- @react-aria/tabs => 3.0.1
- @react-aria/textfield => 3.3.1
- @react-aria/toggle => 3.1.4
- @react-aria/tooltip => 3.1.3
- @react-aria/utils => 3.8.2
- @react-aria/virtualizer => 3.3.4
- @react-aria/visually-hidden => 3.2.3
- @react-spectrum/accordion => 3.0.0-alpha.2
- @react-spectrum/actionbar => 3.0.0-alpha.2
- @react-spectrum/actiongroup => 3.2.2
- @react-spectrum/breadcrumbs => 3.2.3
- @react-spectrum/button => 3.5.1
- @react-spectrum/buttongroup => 3.2.2
- @react-spectrum/checkbox => 3.2.4
- @react-spectrum/color => 3.0.0-beta.3
- @react-spectrum/combobox => 3.0.1
- @react-spectrum/dialog => 3.3.3
- @react-spectrum/divider => 3.1.3
- @react-spectrum/form => 3.2.3
- @react-spectrum/icon => 3.3.2
- @react-spectrum/illustratedmessage => 3.1.3
- @react-spectrum/image => 3.1.3
- @react-spectrum/label => 3.3.4
- @react-spectrum/layout => 3.2.1
- @react-spectrum/link => 3.1.3
- @react-spectrum/list => 3.0.0-alpha.2
- @react-spectrum/listbox => 3.5.1
- @react-spectrum/menu => 3.4.0
- @react-spectrum/meter => 3.1.3
- @react-spectrum/numberfield => 3.0.1
- @react-spectrum/overlays => 3.4.4
- @react-spectrum/picker => 3.3.1
- @react-spectrum/progress => 3.1.3
- @react-spectrum/provider => 3.2.2
- @react-spectrum/radio => 3.1.4
- @react-spectrum/searchfield => 3.1.5
- @react-spectrum/searchwithin => 3.0.0-alpha.0
- @react-spectrum/slider => 3.0.4
- @react-spectrum/statuslight => 3.2.2
- @react-spectrum/switch => 3.1.3
- @react-spectrum/table => 3.0.0-rc.0
- @react-spectrum/tabs => 3.0.2
- @react-spectrum/text => 3.1.3
- @react-spectrum/textfield => 3.1.7
- @react-spectrum/theme-dark => 3.2.2
- @react-spectrum/theme-default => 3.2.2
- @react-spectrum/theme-light => 3.1.2
- @react-spectrum/tooltip => 3.1.4
- @react-spectrum/utils => 3.6.2
- @react-spectrum/view => 3.1.3
- @react-spectrum/well => 3.1.3
- @react-stately/checkbox => 3.0.3
- @react-stately/collections => 3.3.3
- @react-stately/color => 3.0.0-beta.3
- @react-stately/combobox => 3.0.1
- @react-stately/data => 3.4.1
- @react-stately/dnd => 3.0.0-alpha.2
- @react-stately/grid => 3.0.0-rc.0
- @react-stately/layout => 3.4.0
- @react-stately/list => 3.3.0
- @react-stately/menu => 3.2.3
- @react-stately/numberfield => 3.0.2
- @react-stately/overlays => 3.1.3
- @react-stately/radio => 3.3.2
- @react-stately/searchfield => 3.1.3
- @react-stately/select => 3.1.3
- @react-stately/selection => 3.7.0
- @react-stately/slider => 3.0.3
- @react-stately/table => 3.0.0-rc.0
- @react-stately/tabs => 3.0.1
- @react-stately/toggle => 3.2.3
- @react-stately/tooltip => 3.0.5
- @react-stately/tree => 3.2.0
- @react-stately/utils => 3.2.2
- @react-stately/virtualizer => 3.1.5
- @react-types/accordion => 3.0.0-alpha.1
- @react-types/actionbar => 3.0.0-alpha.1
- @react-types/actiongroup => 3.2.1
- @react-types/breadcrumbs => 3.2.1
- @react-types/button => 3.4.1
- @react-types/buttongroup => 3.1.2
- @react-types/checkbox => 3.2.3
- @react-types/color => 3.0.0-beta.2
- @react-types/combobox => 3.0.1
- @react-types/dialog => 3.3.1
- @react-types/divider => 3.1.2
- @react-types/form => 3.2.2
- @react-types/grid => 3.0.0-rc.0
- @react-types/illustratedmessage => 3.1.2
- @react-types/image => 3.1.2
- @react-types/label => 3.4.1
- @react-types/layout => 3.1.2
- @react-types/link => 3.1.3
- @react-types/listbox => 3.2.1
- @react-types/menu => 3.3.0
- @react-types/meter => 3.1.2
- @react-types/numberfield => 3.0.1
- @react-types/overlays => 3.5.1
- @react-types/progress => 3.1.2
- @react-types/provider => 3.3.2
- @react-types/radio => 3.1.2
- @react-types/searchfield => 3.1.2
- @react-types/searchwithin => 3.0.0-alpha.0
- @react-types/select => 3.3.1
- @react-types/shared => 3.8.0
- @react-types/slider => 3.0.2
- @react-types/statuslight => 3.1.2
- @react-types/switch => 3.1.2
- @react-types/tabs => 3.0.1
- @react-types/text => 3.1.3
- @react-types/textfield => 3.2.3
- @react-types/tooltip => 3.1.2
- @react-types/view => 3.1.2
- @react-types/well => 3.1.2
- @spectrum-icons/color => 3.3.1
- @spectrum-icons/illustrations => 3.2.2
- @spectrum-icons/ui => 3.2.1
- @spectrum-icons/workflow => 3.2.1
- react-aria => 3.9.0
- react-stately => 3.8.0

----------------------------------------

TITLE: Styling Disabled ColorField States
DESCRIPTION: CSS styling for disabled state of a ColorField, focusing on the input element appearance.

LANGUAGE: css
CODE:
.react-aria-ColorField {
  .react-aria-Input {
    &[data-disabled] {
      border-color: var(--border-color-disabled);
      color: var(--text-color-disabled);
    }
  }
}

----------------------------------------

TITLE: Using Custom Checkbox in GridList Component
DESCRIPTION: Shows how to utilize a custom checkbox implementation within other React Aria Components like GridList, replacing the built-in Checkbox component.

LANGUAGE: tsx
CODE:
<GridList>
  <GridListItem>
    {/*- begin highlight -*/}
    <MyCheckbox slot="selection" />
    {/*- end highlight -*/}
    {/* ... */}
  </GridListItem>
</GridList>

----------------------------------------

TITLE: Implementing Disabled Tags in React Spectrum
DESCRIPTION: Example of implementing disabled tags using the isDisabled prop. Disabled tags are not focusable, selectable, or keyboard navigable.

LANGUAGE: tsx
CODE:
<MyTagGroup
 label="Sandwich contents"
 selectionMode="multiple"
>
  <MyTag>Lettuce</MyTag>
  <MyTag>Tomato</MyTag>
  <MyTag>Cheese</MyTag>
  {/*- begin highlight -*/}
  <MyTag isDisabled>Tuna Salad</MyTag>
  {/*- end highlight -*/}
  <MyTag>Egg Salad</MyTag>
  <MyTag>Ham</MyTag>
</MyTagGroup>

----------------------------------------

TITLE: Setting Default Value in a TextField
DESCRIPTION: Example showing how to set an initial uncontrolled value in a TextField component using the defaultValue prop.

LANGUAGE: TSX
CODE:
<TextField
  label="Email"
  defaultValue="me@email.com" />

----------------------------------------

TITLE: Default Selected Checkbox Example
DESCRIPTION: Example showing how to set a checkbox to be selected by default using the defaultSelected prop.

LANGUAGE: tsx
CODE:
<Checkbox defaultSelected>Subscribe</Checkbox>

----------------------------------------

TITLE: AlertDialog with Event Handlers for All Actions
DESCRIPTION: Shows how to implement event handlers for primary, secondary, and cancel actions in an AlertDialog, displaying different alerts based on which button was pressed.

LANGUAGE: tsx
CODE:
function Example() {
  let onPrimaryAction = () => alert('Primary button pressed.');
  let onSecondaryAction = () => alert('Secondary button pressed.');
  let alertCancel = () => alert('Cancel button pressed.');

  return (
    <DialogTrigger>
      <ActionButton>
        Publish
      </ActionButton>
      <AlertDialog
        variant="confirmation"
        title="Confirm Publish"
        primaryActionLabel="Publish"
        secondaryActionLabel="Save as draft"
        cancelLabel="Cancel"
        onCancel={alertCancel}
        onPrimaryAction={onPrimaryAction}
        onSecondaryAction={onSecondaryAction}>
        Are you sure you want to publish this document?
      </AlertDialog>
    </DialogTrigger>
  );
}

----------------------------------------

TITLE: Importing RangeCalendar Component in React Spectrum
DESCRIPTION: Demonstrates how to import the necessary components for working with RangeCalendar, including the RangeCalendar itself, Flex for layout, and ActionButton.

LANGUAGE: jsx
CODE:
import {RangeCalendar} from '@react-spectrum/calendar';
import {Flex} from '@react-spectrum/layout';
import {ActionButton} from '@adobe/react-spectrum';

----------------------------------------

TITLE: Hiding Stepper Buttons in NumberField in React Spectrum
DESCRIPTION: This example demonstrates how to hide the increment/decrement stepper buttons in a NumberField by using the hideStepper prop. This creates a cleaner interface when steppers aren't needed.

LANGUAGE: tsx
CODE:
<NumberField label="Cookies" hideStepper minValue={0} />

----------------------------------------

TITLE: Implementing Toast Animations with CSS View Transitions
DESCRIPTION: Example showing how to animate toast entry and exit using CSS view transitions by configuring the ToastQueue's wrapUpdate option.

LANGUAGE: tsx
CODE:
import {flushSync} from 'react-dom';

const queue = new ToastQueue<MyToastContent>({
  // Wrap state updates in a CSS view transition.
  wrapUpdate(fn) {
    if ('startViewTransition' in document) {
      document.startViewTransition(() => {
        flushSync(fn);
      });
    } else {
      fn();
    }
  }
});

<ToastRegion queue={queue}>
  {({toast}) => (
    <Toast
      style={{viewTransitionName: toast.key}}
      toast={toast}>
      <ToastContent>
        <Text slot="title">{toast.content.title}</Text>
        <Text slot="description">{toast.content.description}</Text>
      </ToastContent>
      <Button slot="close">x</Button>
    </Toast>
  )}
</ToastRegion>
<Button onPress={() => queue.add({title: 'Toasted!'})}>Toast</Button>

----------------------------------------

TITLE: Picker Items with Links in React Spectrum
DESCRIPTION: Demonstrates how to create Picker items that function as links using the href prop. Link items in a Picker are not selectable and can open in the current window or a new window using the target prop.

LANGUAGE: tsx
CODE:
<Picker label="Project">
  <Item href="https://example.com/" target="_blank">Create new…</Item>
  <Item>Proposal</Item>
  <Item>Budget</Item>
  <Item>Onboarding</Item>
</Picker>

----------------------------------------

TITLE: Running React Tests in Watch Mode
DESCRIPTION: Launches the test runner in interactive watch mode, which automatically reruns tests when files are changed.

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Referencing @react-stately/table Package in Markdown
DESCRIPTION: A simple markdown heading that identifies the @react-stately/table package, which is part of the React Spectrum library. The snippet includes a reference to the main project repository.

LANGUAGE: markdown
CODE:
# @react-stately/table

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Referencing React Spectrum DatePicker Package
DESCRIPTION: This code snippet shows the package name for the DatePicker component in React Spectrum. The package is part of the larger React Spectrum component library.

LANGUAGE: markdown
CODE:
# @react-spectrum/datepicker

----------------------------------------

TITLE: Creating a Selection Count Component Using TagGroup State
DESCRIPTION: Demonstrates how to access the TagGroup's internal state via ListStateContext to create a component that displays the number of selected tags.

LANGUAGE: tsx
CODE:
import {ListStateContext} from 'react-aria-components';

function SelectionCount() {
  let state = React.useContext(ListStateContext);
  let selected = state?.selectionManager.selectedKeys.size ?? 0;
  return <small>{selected} tags selected.</small>;
}

<TagGroup selectionMode="multiple">
  <Label>Tags</Label>
  <TagList>
    <Tag>News</Tag>
    <Tag>Travel</Tag>
    <Tag>Gaming</Tag>
    <Tag>Shopping</Tag>
  </TagList>
  <SelectionCount />
</TagGroup>

----------------------------------------

TITLE: Labeled ColorSwatch with Custom Color Name
DESCRIPTION: Shows how to add accessibility labels to a ColorSwatch, including a custom color name and context label.

LANGUAGE: tsx
CODE:
<MyColorSwatch color="#f00" aria-label="Background color" colorName="Fire truck red" />

----------------------------------------

TITLE: Creating Disabled Color Slider in React Spectrum
DESCRIPTION: Example of a disabled color slider using the isDisabled prop. This prevents the thumb from being focused or dragged while applying appropriate visual styling.

LANGUAGE: tsx
CODE:
<MyColorSlider channel="red" defaultValue="#7f007f" isDisabled />

----------------------------------------

TITLE: ActionMenu Props Comparison Between Spectrum 2 and RSP v3
DESCRIPTION: This table compares ActionMenu props, showing that Spectrum 2 supports size property, while RSP v3 has closeOnSelect and trigger properties not yet implemented in S2.

LANGUAGE: typescript
CODE:
size | 🟢 `'L' \| 'M' \| 'S' \| 'XL'` | –
closeOnSelect | – | 🔴 `boolean`
trigger | – | 🔴 `MenuTriggerType`

----------------------------------------

TITLE: SearchField with Default Value Setting
DESCRIPTION: Example showing how to set a default value for an uncontrolled SearchField component. This initializes the search field with the text 'Puppies'.

LANGUAGE: tsx
CODE:
<MySearchField
  label="Search"
  defaultValue="Puppies" />

----------------------------------------

TITLE: Importing Blog Post Layout Components in React Spectrum
DESCRIPTION: Imports the BlogPostLayout and Hero components from the React Spectrum docs package and exports the BlogPostLayout as the default export. This is used for the blog post layout structure.

LANGUAGE: jsx
CODE:
import {BlogPostLayout, Hero} from '@react-spectrum/docs';
export default BlogPostLayout;

----------------------------------------

TITLE: Adding Custom Labeling to ColorSwatch for Accessibility
DESCRIPTION: This example demonstrates how to customize the accessible name of a ColorSwatch by providing a specific color name and additional context label. The resulting accessible name will combine both values for screen readers.

LANGUAGE: tsx
CODE:
<ColorSwatch color="#f00" aria-label="Background color" colorName="Fire truck red" />

----------------------------------------

TITLE: Implementing Server Entry with Localization in Remix
DESCRIPTION: Example of a Remix entry.server.tsx file that injects React Aria localization data. This implementation uses getLocalizationScript to include the required language strings in the initial HTML response.

LANGUAGE: tsx
CODE:
// app/entry.server.tsx
import type {EntryContext} from '@remix-run/node';
import {PassThrough} from 'node:stream';
import {createReadableStreamFromReadable} from '@remix-run/node';
import {RemixServer} from '@remix-run/react';
import {renderToPipeableStream} from 'react-dom/server';
import {getLocalizationScript} from 'react-aria-components/i18n';

const ABORT_DELAY = 5000;

export default async function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext,
) {
  // Get the requested language (e.g. from headers, URL param, database, etc.)
  let lang = await getRequestedLanguageSomehow(request);

  return new Promise((resolve, reject) => {
    let {pipe, abort} = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        bootstrapScriptContent: getLocalizationScript(lang),
        onShellReady() {
          let body = new PassThrough();
          let stream = createReadableStreamFromReadable(body);

          responseHeaders.set('Content-Type', 'text/html');
          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          console.error(error);
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

----------------------------------------

TITLE: Accessible ToggleButtonGroup Example
DESCRIPTION: An example showing how to make a ToggleButtonGroup accessible by adding an aria-label for screen readers.

LANGUAGE: tsx
CODE:
<ToggleButtonGroup aria-label="Text style">
  <ToggleButton id="bold">Bold</ToggleButton>
  <ToggleButton id="italic">Italic</ToggleButton>
  <ToggleButton id="underline">Underline</ToggleButton>
</ToggleButtonGroup>

----------------------------------------

TITLE: Displaying Multiple Months in RangeCalendar
DESCRIPTION: This example shows how to display multiple months at once in a RangeCalendar by using the visibleMonths prop set to 3.

LANGUAGE: tsx
CODE:
<div style={{maxWidth: '100%', overflow: 'auto'}}>
  <RangeCalendar aria-label="Trip dates" visibleMonths={3} />
</div>

----------------------------------------

TITLE: Implementing an Opacity Slider with React Aria Components and Tailwind CSS
DESCRIPTION: Creates a custom opacity slider using React Aria Components with Tailwind CSS classes. The slider includes a label, output display, track with fill visualization, and a customized thumb that responds to interaction states.

LANGUAGE: tsx
CODE:
import {Slider, Label, SliderOutput, SliderTrack, SliderThumb} from 'react-aria-components';

<div className="bg-linear-to-r from-purple-600 to-pink-600 p-12 rounded-lg flex justify-center">
  <Slider defaultValue={30} className="w-[250px]">
    <div className="flex text-white">
      <Label className="flex-1">Opacity</Label>
      <SliderOutput />
    </div>
    <SliderTrack className="relative w-full h-7">
      {({state}) => <>
        {/* track */}
        <div className="absolute h-2 top-[50%] translate-y-[-50%] w-full rounded-full bg-white/40" />
        {/* fill */}
        <div className="absolute h-2 top-[50%] translate-y-[-50%] rounded-full bg-white" style={{width: state.getThumbPercent(0) * 100 + '%'}} />
        <SliderThumb className="h-7 w-7 top-[50%] rounded-full border border-solid border-purple-800/75 bg-white transition dragging:bg-purple-100 outline-hidden focus-visible:ring-2 ring-black" />
      </>}
    </SliderTrack>
  </Slider>
</div>

----------------------------------------

TITLE: Implementing Low-Level Drag and Drop API in a React Spectrum ListView
DESCRIPTION: This code example demonstrates how to use the low-level useDragAndDrop API to implement complex drop operations in a ListView. It shows how to handle dropping external directories at the root level or between items, and restrict file drops to specific directories based on file types.

LANGUAGE: tsx
CODE:
import type {FileDropItem, DirectoryDropItem} from '@react-spectrum/dnd';
import {DIRECTORY_DRAG_TYPE} from '@react-spectrum/dnd';

function DroppableListLowLevelAPI() {
  let list = useListData({
    initialItems: [
      {id: 1, name: 'Images', contains: 0, accept: ['image/png', 'image/jpeg']},
      {id: 2, name: 'Videos', contains: 0, accept: ['video/mp4']},
      {id: 3, name: 'Documents', contains: 0, accept: ['text/plain', 'application/pdf']}
    ]
  });

  let {dragAndDropHooks} = useDragAndDrop({
    onDrop: async (e) => {
      let items = await Promise.all(
        e.items
          .filter((item) => {
            // Check if dropped item is accepted.
            if (item.kind === 'file' && e.target.type === 'item' && e.target.dropPosition === 'on') {
              let folder = list.getItem(e.target.key);
              return folder.accept.includes(item.type);
            }

            return item.kind === 'directory';
          })
          .map(async (item: FileDropItem | DirectoryDropItem) => {
            // Collect child count from dropped directories.
            let contains = 0;
            let accept;
            if (item.kind === 'directory') {
              for await (let _ of item.getEntries()) {
                contains++;
                accept = [];
              }
            }

            return {
              id: Math.random(),
              name: item.name,
              contains,
              accept
            };
          })
      );

      // Update item count if dropping on an item, otherwise insert the new items in the list.
      if (e.target.type === 'item') {
        if (e.target.dropPosition === 'on') {
          let item = list.getItem(e.target.key);
          list.update(e.target.key, {
            ...item,
            contains: item.contains + items.length
          });
        } else if (e.target.dropPosition === 'before') {
          list.insertBefore(e.target.key, ...items);
        } else if (e.target.dropPosition === 'after') {
          list.insertAfter(e.target.key, ...items);
        }
      } else {
        // If dropping on the root, append the directory to the bottom of the list
        list.append(...items);
      }
    },
    getDropOperation: (target, types, allowedOperations) => {
      // When dropping on an item, check whether the item accepts the drag types and cancel if not.
      if (target.type === 'item' && target.dropPosition === 'on') {
        let item = list.getItem(target.key);
        return item.accept && item.accept.some((type) => types.has(type))
          ? allowedOperations[0]
          : 'cancel';
      }

      // If dropping a directory between items, support a copy operation.
      return types.has(DIRECTORY_DRAG_TYPE) ? 'copy' : 'cancel';
    }
  });

  return (
    <ListView
      aria-label="Low-level api droppable list view example"
      width="size-3600"
      height="size-3600"
      selectionMode="multiple"
      items={list.items}
      dragAndDropHooks={dragAndDropHooks}>
      {item => (
        <Item textValue={item.name} hasChildItems>
          <Folder />
          <Text>{item.name}</Text>
          <Text slot="description">{`contains ${item.contains} item(s)`}</Text>
        </Item>
      )}
    </ListView>
  );
}

----------------------------------------

TITLE: Targeting Button States with CSS Selectors
DESCRIPTION: Example of using data attributes to style different states of buttons within a NumberField component.

LANGUAGE: css
CODE:
.react-aria-Button[data-pressed] {
  /* ... */
}

----------------------------------------

TITLE: Custom Label Component with Context Integration
DESCRIPTION: Shows how to create a custom Label component that integrates with React Aria Components by consuming the LabelContext and using useContextProps.

LANGUAGE: tsx
CODE:
import type {LabelProps} from 'react-aria-components';
import {LabelContext, useContextProps} from 'react-aria-components';

const MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, LabelContext);

  // ... your existing Label component
  return <label {...props} ref={ref} />;
});

----------------------------------------

TITLE: Basic DropZone Implementation in React Aria Components
DESCRIPTION: A simple example showing how to create a DropZone component that updates its text when an item is dropped on it. This demonstrates the basic usage pattern with state management.

LANGUAGE: tsx
CODE:
import {DropZone, Text} from 'react-aria-components';

function Example() {
  let [dropped, setDropped] = React.useState(false);

  return (
    <DropZone
      onDrop={() => {
        setDropped(true);
      }}>
      <Text slot="label">
        {dropped ? "You dropped something" : "Drop object here"}
      </Text>
    </DropZone>
  );
}

----------------------------------------

TITLE: Styling Link Tags with CSS
DESCRIPTION: CSS styling for tags that function as links, removing text decoration and setting the cursor to pointer.

LANGUAGE: css
CODE:
.react-aria-Tag[data-href] {
  text-decoration: none;
  cursor: pointer;
}

----------------------------------------

TITLE: Specifying Components to Upgrade with CLI Options
DESCRIPTION: Command option for the React Spectrum upgrade tool that allows you to specify a comma-separated list of components to upgrade rather than upgrading all available components.

LANGUAGE: bash
CODE:
-c, --components <components>

----------------------------------------

TITLE: Styling Linked Table Rows with CSS
DESCRIPTION: Provides custom CSS styling for table rows with data-href attribute to display a pointer cursor, improving the UX by indicating clickable rows.

LANGUAGE: css
CODE:
tr[data-href] {
  cursor: pointer !important;
}

----------------------------------------

TITLE: Fullscreen Takeover DialogTrigger Example in React Spectrum
DESCRIPTION: Shows a fullscreen takeover dialog that covers the entire screen, implementing a user registration form with form elements and confirmation buttons.

LANGUAGE: tsx
CODE:
<DialogTrigger type="fullscreenTakeover">
  <ActionButton>Register</ActionButton>
  {(close) => (
    <Dialog>
      <Heading>Register a new account</Heading>
      <Divider />
      <Content>
        <Form>
          <TextField label="Name" />
          <TextField label="Email address" />
          <Checkbox>Make profile private</Checkbox>
        </Form>
      </Content>
      <ButtonGroup>
        <Button variant="secondary" onPress={close}>Cancel</Button>
        <Button variant="accent" onPress={close} autoFocus>Confirm</Button>
      </ButtonGroup>
    </Dialog>
  )}
</DialogTrigger>

----------------------------------------

TITLE: Enabling Non-Contiguous Date Ranges in DateRangePicker
DESCRIPTION: Example demonstrating how to allow selection of date ranges that span across unavailable dates (like weekends) using the allowsNonContiguousRanges prop.

LANGUAGE: tsx
CODE:
import {isWeekend} from '@internationalized/date';
import {useLocale} from '@react-aria/i18n';

function Example() {
  let {locale} = useLocale();

  return (
    <MyDateRangePicker
      label="Time off request"
      isDateUnavailable={date => isWeekend(date, locale)}
      allowsNonContiguousRanges />
  );
}

----------------------------------------

TITLE: Creating a Reusable Button Component with useButton
DESCRIPTION: Implements a simple Button component using the useButton hook from @react-aria/button that can be reused for toast close buttons and other interactions.

LANGUAGE: tsx
CODE:
import {useButton} from '@react-aria/button';

function Button(props) {
  let ref = React.useRef(null);
  let {buttonProps} = useButton(props, ref);
  return <button {...buttonProps} ref={ref}>{props.children}</button>;
}

----------------------------------------

TITLE: Implementing ColorPicker with Color Swatches in React Aria
DESCRIPTION: This example demonstrates how to use a ColorSwatchPicker to provide color presets for a ColorPicker. It includes a ColorArea for visual color selection, a ColorSlider for hue adjustment, and a set of predefined color swatches.

LANGUAGE: tsx
CODE:
import {MyColorSwatchPicker, MyColorSwatchPickerItem} from './ColorSwatchPicker';

<MyColorPicker label="Color" defaultValue="#A00">
  <MyColorArea colorSpace="hsb" xChannel="saturation" yChannel="brightness" />
  <MyColorSlider colorSpace="hsb" channel="hue" />
  <MyColorSwatchPicker>
    <MyColorSwatchPickerItem color="#A00" />
    <MyColorSwatchPickerItem color="#f80" />
    <MyColorSwatchPickerItem color="#080" />
    <MyColorSwatchPickerItem color="#08f" />
    <MyColorSwatchPickerItem color="#008" />
  </MyColorSwatchPicker>
</MyColorPicker>

----------------------------------------

TITLE: Handling Image File Paste in React with useClipboard
DESCRIPTION: This component handles pasting image files (JPEG and PNG) from the clipboard. It filters clipboard items by file type, converts the file to an object URL, and displays the image when a valid file is pasted.

LANGUAGE: tsx
CODE:
import type {FileDropItem} from '@react-aria/dnd';

function Pasteable() {
  let [file, setFile] = React.useState(null);
  let {clipboardProps} = useClipboard({
    async onPaste(items) {
      let item = items.find(item => item.kind === 'file' && (item.type === 'image/jpeg' || item.type === 'image/png')) as FileDropItem;
      if (item) {
        setFile(URL.createObjectURL(await item.getFile()));
      }
    }
  });

  return (
    <div role="textbox" tabIndex={0} {...clipboardProps} style={{width: 150, height: 100}}>
      {file ? <img src={file} style={{width: '100%', height: '100%', objectFit: 'contain'}} /> : 'Paste image here'}
    </div>
  );
}

----------------------------------------

TITLE: Implementing Controlled and Uncontrolled Calendar Values
DESCRIPTION: Demonstrates using calendars with both controlled and uncontrolled values using the internationalized date package for proper date handling.

LANGUAGE: tsx
CODE:
import {parseDate} from '@internationalized/date';

function Example() {
  let [value, setValue] = React.useState(parseDate('2020-02-03'));

  return (
    <div style={{display: 'flex', gap: 20, flexWrap: 'wrap'}}>
      <Calendar
        aria-label="Date (uncontrolled)"
        defaultValue={parseDate('2020-02-03')} />
      <Calendar
        aria-label="Date (controlled)"
        value={value}
        onChange={setValue} />
    </div>
  );
}

----------------------------------------

TITLE: Controlled and Uncontrolled ColorArea with Custom Channels
DESCRIPTION: Demonstrates both controlled and uncontrolled implementations of the ColorArea component with custom X and Y channels for saturation and lightness in HSL color space.

LANGUAGE: tsx
CODE:
import {ColorArea} from '@react-spectrum/color';
import {Flex} from '@react-spectrum/layout';
import {Label} from '@react-spectrum/label';
import {parseColor} from '@react-stately/color';

function Example() {
  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));
  return (
    <Flex gap="size-300" wrap>
      <div>
        <Label id="hsl-uncontrolled-id">x: Saturation, y: Lightness (uncontrolled)</Label>
        <ColorArea
          aria-labelledby="hsl-uncontrolled-id"
          defaultValue={value}
          xChannel="saturation"
          yChannel="lightness" />
      </div>
      <div>
        <Label id="hsl-controlled-id">x: Saturation, y: Lightness (controlled)</Label>
        <ColorArea
          aria-labelledby="hsl-controlled-id"
          value={value}
          onChange={setValue}
          xChannel="saturation"
          yChannel="lightness" />
      </div>
    </Flex>
  );
}

----------------------------------------

TITLE: Partial Comparison of CalendarDateTime Objects with Calendar Conversion
DESCRIPTION: Using utility functions for partial date comparisons that convert between different calendar systems. These functions allow comparing parts of dates without requiring the entire date to match.

LANGUAGE: tsx
CODE:
import {isSameMonth, IslamicUmalquraCalendar} from '@internationalized/date';

isSameMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(2021, 4, 30, 5, 15)); // true
isSameMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(2021, 8, 2, 5, 15)); // false
isSameMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(new IslamicUmalquraCalendar(), 1442, 9, 4, 5, 15)); // true

----------------------------------------

TITLE: Implementing Validation Errors in NumberField
DESCRIPTION: Shows how to add validation error handling to NumberField using the FieldError component, supporting required fields, custom validation, and integration with form libraries.

LANGUAGE: tsx
CODE:
import {Form, FieldError} from 'react-aria-components';

<Form>
  {/*- begin highlight -*/}
  <NumberField name="width" isRequired>
  {/*- end highlight -*/}
    <Label>Width</Label>
    <Group>
       <Button slot="decrement">-</Button>
       <Input />
       <Button slot="increment">+</Button>
     </Group>
    {/*- begin highlight -*/}
    <FieldError />
    {/*- end highlight -*/}
  </NumberField>
  <Button type="submit">Submit</Button>
</Form>

----------------------------------------

TITLE: Setting up the Layout for React Spectrum Documentation
DESCRIPTION: Import statement for the Layout component from the React Spectrum documentation package and exporting it as the default component for the documentation page.

LANGUAGE: JavaScript
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Importing ActionGroup and Related Components in React
DESCRIPTION: Demonstrates how to import the ActionGroup component, Item component, and various icons from the React Spectrum library.

LANGUAGE: jsx
CODE:
import {ActionGroup, Item} from '@react-spectrum/actiongroup';
import Brush from '@spectrum-icons/workflow/Brush';
import RegionSelect from '@spectrum-icons/workflow/RegionSelect';
import Select from '@spectrum-icons/workflow/Select';
import {Flex} from '@react-spectrum/layout';
import {View} from '@react-spectrum/view';
import ViewList from '@spectrum-icons/workflow/ViewList';
import ViewGrid from '@spectrum-icons/workflow/ViewGrid';
import ViewCard from '@spectrum-icons/workflow/ViewCard';
import Move from '@spectrum-icons/workflow/Move';
import Duplicate from '@spectrum-icons/workflow/Duplicate';
import TagBold from '@spectrum-icons/workflow/TagBold';
import TagItalic from '@spectrum-icons/workflow/TagItalic';
import TagUnderline from '@spectrum-icons/workflow/TagUnderline';
import TextStrikethrough from '@spectrum-icons/workflow/TextStrikethrough';
import TextAlignCenter from '@spectrum-icons/workflow/TextAlignCenter';
import TextAlignJustify from '@spectrum-icons/workflow/TextAlignJustify';
import TextAlignLeft from '@spectrum-icons/workflow/TextAlignLeft';
import TextAlignRight from '@spectrum-icons/workflow/TextAlignRight';

----------------------------------------

TITLE: Setting up Development Environment for Rollup Project
DESCRIPTION: Commands to install dependencies and start the development server for a Rollup-based React Spectrum project.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Creating a ColorSlider Component with useColorSlider Hook in React Spectrum
DESCRIPTION: Implementation of a ColorSlider component using the useColorSlider hook from React Aria. This component allows users to adjust specific color channels and provides accessibility features like screen reader support and keyboard navigation.

LANGUAGE: tsx
CODE:
import {useColorSlider} from '@react-aria/color';
import {useColorSliderState} from '@react-stately/color';
import {VisuallyHidden} from '@react-aria/visually-hidden';
import {useLocale} from '@react-aria/i18n';
import {useFocusRing} from '@react-aria/focus';

function ColorSlider(props) {
  let {locale} = useLocale();
  let state = useColorSliderState({...props, locale});
  let trackRef = React.useRef(null);
  let inputRef = React.useRef(null);

  // Default label to the channel name in the current locale
  let label = props.label || state.value.getChannelName(props.channel, locale);

  let {trackProps, thumbProps, inputProps, labelProps, outputProps} = useColorSlider({
    ...props,
    label,
    trackRef,
    inputRef
  }, state);

  let {focusProps, isFocusVisible} = useFocusRing();

  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        width: SIZE
      }}>
      {/* Create a flex container for the label and output element. */}
      <div style={{display: 'flex', alignSelf: 'stretch'}}>
        <label {...labelProps}>{label}</label>
        <output {...outputProps} style={{flex: '1 0 auto', textAlign: 'end'}}>
          {state.value.formatChannelValue(props.channel, locale)}
        </output>
      </div>
      {/* The track element holds the visible track line and the thumb. */}
      <div
        className="color-slider-track"
        {...trackProps}
        ref={trackRef}
        style={{
          height: FOCUSED_THUMB_SIZE
        }}>
        <div className="color-slider-track-background"></div>
        <div
          className="color-slider-track-color"
          style={{
          ...trackProps.style
          }}></div>
        <div
          className={`color-slider-thumb${isFocusVisible ? ' is-focused' : ''}`}
          {...thumbProps}
          style={{
            ...thumbProps.style
          }}>
          <div className="color-slider-thumb-background"></div>
          <div
            className="color-slider-thumb-color"
            style={{
              background: state.getDisplayColor().toString('css')
            }}></div>
          <VisuallyHidden>
            <input ref={inputRef} {...inputProps} {...focusProps} />
          </VisuallyHidden>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Setting Up Documentation Imports for useTooltipTriggerState
DESCRIPTION: Imports necessary documentation components and data for the useTooltipTriggerState hook documentation, including the API references and package data.

LANGUAGE: JavaScript
CODE:
import docs from 'docs:@react-stately/tooltip';
import {ClassAPI, HeaderInfo, FunctionAPI, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/tooltip/package.json';

----------------------------------------

TITLE: Hidden CSS for Form Styling in React Aria
DESCRIPTION: CSS styles for the React Aria Form component, defining flex layout with column direction, start alignment, and consistent spacing between form elements.

LANGUAGE: css
CODE:
.react-aria-Form {
  display: flex;
  flex-direction: column;
  align-items: start;
  gap: 8px;
}

----------------------------------------

TITLE: Importing Documentation Dependencies for React Spectrum
DESCRIPTION: Imports necessary components and utilities for building the documentation page, including the API docs for the useTreeState hook, UI components for rendering documentation, and package metadata.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/tree';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/tree/package.json';

----------------------------------------

TITLE: Implementing a Basic ColorPicker with Dialog in React Aria Components
DESCRIPTION: Example of implementing a ColorPicker component with a button trigger, popover, and various color selection tools including ColorArea, ColorSlider, and ColorField.

LANGUAGE: tsx
CODE:
import {ColorPicker, Button, Popover, Dialog, DialogTrigger} from 'react-aria-components';
import {MyColorSwatch} from './ColorSwatch';
import {MyColorSlider} from './ColorSlider';
import {MyColorArea} from './ColorArea';
import {MyColorField} from './ColorField';

<ColorPicker defaultValue="#5100FF">
  <DialogTrigger>
    <Button className="color-picker">
      <MyColorSwatch />
      <span>Fill color</span>
    </Button>
    <Popover placement="bottom start">
      <Dialog className="color-picker-dialog">
        <MyColorArea colorSpace="hsb" xChannel="saturation" yChannel="brightness" />
        <MyColorSlider colorSpace="hsb" channel="hue" />
        <MyColorField label="Hex" />
      </Dialog>
    </Popover>
  </DialogTrigger>
</ColorPicker>

----------------------------------------

TITLE: Styling Slider Components with Styled Components in React Aria
DESCRIPTION: This snippet shows how to style React Aria Slider components using the styled-components library. It defines styled variants for the slider track and thumb with custom CSS properties, including interactive states like the dragging state.

LANGUAGE: tsx
CODE:
const StyledSlider = styled(Slider)`
  display: grid;
  /* ... */
`;

const StyledSliderTrack = styled(SliderTrack)`
  background: var(--gray-300);
`;

const StyledSliderThumb = styled(SliderThumb)`
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: var(--gray-50);
  border: 2px solid var(--gray-600);

  &[data-dragging] {
    background: var(--gray-600);
  }
`;

<StyledSlider defaultValue={30}>
  <Label>Opacity</Label>
  <SliderOutput />
  <StyledSliderTrack>
    <StyledSliderThumb />
  </StyledSliderTrack>
</StyledSlider>

----------------------------------------

TITLE: HTML Form Integration with ColorArea Component
DESCRIPTION: Example showing how to integrate ColorArea with HTML forms using the xName and yName props. The values will be submitted as numbers representing the red and green channels.

LANGUAGE: tsx
CODE:
<MyColorArea xName="red" yName="green" />

----------------------------------------

TITLE: Configuring Legacy Next.js (13.0.x and below) for React Spectrum
DESCRIPTION: Legacy configuration for Next.js 13.0.x and below to properly handle React Spectrum packages using the next-transpile-modules plugin.

LANGUAGE: tsx
CODE:
const glob = require('glob');

const withTM = require('next-transpile-modules')([
  '@adobe/react-spectrum',
  '@react-spectrum/*',
  '@spectrum-icons/*',
].flatMap((spec) => glob.sync(`${spec}`, { cwd: 'node_modules/' })));

module.exports = withTM({
  // Your Next.js configuration
});

----------------------------------------

TITLE: Customizing First Day of Week in DateRangePicker
DESCRIPTION: This example shows how to set a custom first day of the week in a DateRangePicker calendar using the firstDayOfWeek prop. It overrides the locale-based default to start the week on Monday.

LANGUAGE: tsx
CODE:
<DateRangePicker label="Date range" firstDayOfWeek="mon" />

----------------------------------------

TITLE: Styling React Aria Components with CSS
DESCRIPTION: Example showing how to style React Aria Components using CSS selectors that target the default class names. Components follow the .react-aria-ComponentName naming convention for styling.

LANGUAGE: CSS
CODE:
.react-aria-Select {
  /* ... */
}

----------------------------------------

TITLE: CSS for Disabled Breadcrumbs
DESCRIPTION: CSS styles defining the appearance of disabled breadcrumbs and links within them.

LANGUAGE: css
CODE:
.react-aria-Breadcrumbs {
  .react-aria-Link {
    &[data-disabled] {
      cursor: default;

      &:not([data-current]) {
        color: var(--text-color-disabled);
      }
    }
  }
}

----------------------------------------

TITLE: Creating a Custom Wrapper Component for GridListItem
DESCRIPTION: This example demonstrates how to create a wrapper component for GridListItem to customize its props. This approach allows for component reuse while maintaining consistent styling.

LANGUAGE: tsx
CODE:
function MyItem(props) {
  return <GridListItem {...props} className="my-item" />
}

----------------------------------------

TITLE: Styling Link Items in ListBox with CSS
DESCRIPTION: This CSS snippet styles link items in a ListBox by removing text decoration, setting the cursor to pointer, and disabling touch callout on mobile devices for a better user experience.

LANGUAGE: css
CODE:
.react-aria-ListBoxItem[href] {
  text-decoration: none;
  cursor: pointer;
  -webkit-touch-callout: none;
}

----------------------------------------

TITLE: Importing ColorField Component in React Spectrum
DESCRIPTION: Demonstrates how to import the ColorField component from the React Spectrum library along with the Flex component for layout.

LANGUAGE: jsx
CODE:
import {ColorField} from '@react-spectrum/color';
import {Flex} from '@react-spectrum/layout';

----------------------------------------

TITLE: Importing Spectrum page CSS
DESCRIPTION: Required import statement for the Spectrum 2 page-level CSS that enables light and dark theme support in the application.

LANGUAGE: jsx
CODE:
import "@react-spectrum/s2/page.css";

----------------------------------------

TITLE: Disabling Touch Callout for Link Elements
DESCRIPTION: CSS rule to disable touch callout for anchor elements with href="#" to improve mobile experience.

LANGUAGE: CSS
CODE:
a[href="#"] {
  -webkit-touch-callout: none;
}

----------------------------------------

TITLE: YAML Front Matter for Blog Post Configuration
DESCRIPTION: Defines metadata for the blog post including the description and publication date. This information is used by the blog framework to display post information.

LANGUAGE: YAML
CODE:
---
description: We are excited to announce the release of drag and drop support in React Aria and React Spectrum! This includes a suite of hooks for implementing drag and drop interactions. There is also an update to all Spectrum colors, aligning React Spectrum with the latest Spectrum designs. Finally, React Aria includes a new simplified API for overlays such as popovers and modals.
date: 2022-11-15
---

----------------------------------------

TITLE: Implementing a Reorderable ListBox Component with React Aria
DESCRIPTION: This code defines a ReorderableListBox component using React Aria's drag and drop hooks. It implements the necessary drag and drop functionality to allow items to be reordered within the collection, including drop indicators and proper event handling.

LANGUAGE: tsx
CODE:
import {useDroppableCollectionState} from '@react-stately/dnd';
import {useDroppableCollection, useDropIndicator, ListDropTargetDelegate} from '@react-aria/dnd';
import {ListKeyboardDelegate} from '@react-aria/selection';

function ReorderableListBox(props) {
  ///- begin collapse -///
  // See useListBox docs for more details.
  let state = useListState(props);
  let ref = React.useRef(null);
  let { listBoxProps } = useListBox({
    ...props,
    shouldSelectOnPressUp: true
  }, state, ref);

  // Setup drag state for the collection.
  let dragState = useDraggableCollectionState({
    ...props,
    // Collection and selection manager come from list state.
    collection: state.collection,
    selectionManager: state.selectionManager,
    // Provide data for each dragged item. This function could
    // also be provided by the user of the component.
    getItems: props.getItems || ((keys) => {
      return [...keys].map(key => {
        let item = state.collection.getItem(key);

        return {
          'text/plain': item.textValue
        };
      });
    }),
  });

  useDraggableCollection(props, dragState, ref);
  ///- end collapse -///
  // ...

  ///- begin highlight -///
   // Setup react-stately and react-aria hooks for dropping.
  let dropState = useDroppableCollectionState({
    ...props,
    collection: state.collection,
    selectionManager: state.selectionManager
  });

  let {collectionProps} = useDroppableCollection({
    ...props,
    // Provide drop targets for keyboard and pointer-based drag and drop.
    keyboardDelegate: new ListKeyboardDelegate(state.collection, state.disabledKeys, ref),
    dropTargetDelegate: new ListDropTargetDelegate(state.collection, ref)
  }, dropState, ref);
  ///- end highlight -///

  return (
    /*- begin highlight -*/
    <ul
      {...mergeProps(listBoxProps, collectionProps)}
      /*- end highlight -*/
      ref={ref}>
      {[...state.collection].map((item) => (
        <ReorderableOption
          key={item.key}
          item={item}
          state={state}
          dragState={dragState}
          /*- begin highlight -*/
          dropState={dropState}
          /*- end highlight -*/
        />
      ))}
    </ul>
  );
}

function ReorderableOption({ item, state, dragState, dropState }) {
  ///- begin collapse -///
  let ref = React.useRef(null);
  let { optionProps } = useOption({key: item.key}, state, ref);
  let { isFocusVisible, focusProps } = useFocusRing();

  // Register the item as a drag source.
  let {dragProps} = useDraggableItem({
    key: item.key
  }, dragState);
  ///- end collapse -///
  // ...

  return (
    <>
      {/*- begin highlight -*/}
      <DropIndicator
        target={{type: 'item', key: item.key, dropPosition: 'before'}}
        dropState={dropState} />
      {/*- end highlight -*/}
      <li
        {...mergeProps(optionProps, dragProps, focusProps)}
        ref={ref}
        className={`option ${isFocusVisible ? 'focus-visible' : ''}`}>
        {item.rendered}
      </li>
      {/*- begin highlight -*/}
      {state.collection.getKeyAfter(item.key) == null &&
        <DropIndicator
          target={{type: 'item', key: item.key, dropPosition: 'after'}}
          dropState={dropState} />
      }
      {/*- end highlight -*/}
    </>
  );
}

///- begin highlight -///
function DropIndicator(props) {
  let ref = React.useRef(null);
  let {dropIndicatorProps, isHidden, isDropTarget} = useDropIndicator(props, props.dropState, ref);
  if (isHidden) {
    return null;
  }

  return (
    <li
      {...dropIndicatorProps}
      role="option"
      ref={ref}
      className={`drop-indicator ${isDropTarget ? 'drop-target' : ''}`} />
  );
}
///- end highlight -///

----------------------------------------

TITLE: Implementing Account Menu Component with React Aria Components
DESCRIPTION: Creates an accessible account menu with an interactive header using MenuTrigger, Button, Popover, Menu, and other React Aria Components. The menu displays user information, a dark mode toggle, and account-related actions.

LANGUAGE: tsx
CODE:
import {MenuTrigger, Button, Popover, Menu, MenuItem, Separator, Switch, composeRenderProps} from 'react-aria-components';
import type {MenuItemProps, SwitchProps} from 'react-aria-components';

function AccountMenuExample() {
  return (
    <div className="p-8 bg-gray-50 dark:bg-zinc-900 rounded-lg flex items-start justify-center">
      <MenuTrigger>
        <Button aria-label="Account" className="inline-flex items-center justify-center rounded-md p-1.5 text-white bg-transparent border-none hover:bg-gray-200 pressed:bg-gray-300 dark:hover:bg-zinc-800 dark:pressed:bg-zinc-700 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-blue-600">
          <img alt="" src="https://i.imgur.com/xIe7Wlb.png" className="w-7 h-7 rounded-full" />
        </Button>
        <Popover className="p-2 overflow-auto outline-hidden rounded-lg bg-white dark:bg-zinc-950 shadow-lg ring-1 ring-black/10 dark:ring-white/15 entering:animate-in entering:fade-in entering:placement-bottom:slide-in-from-top-1 entering:placement-top:slide-in-from-bottom-1 exiting:animate-out exiting:fade-out exiting:placement-bottom:slide-out-to-top-1 exiting:placement-top:slide-out-to-bottom-1 fill-mode-forwards origin-top-left">
          <div className="flex gap-2 items-center mx-3 mt-2">
            <img alt="" src="https://i.imgur.com/xIe7Wlb.png" className="w-16 h-16 rounded-full" />
            <div className="flex flex-col gap-1">
              <div className="text-[15px] font-bold text-gray-900 dark:text-gray-100 leading-none">Marissa Whitaker</div>
              <div className="text-base text-gray-900 dark:text-gray-100 leading-none mb-1">user@example.com</div>
              <MySwitch>Dark Mode</MySwitch>
            </div>
          </div>
          <Separator className="border-none bg-gray-300 dark:bg-zinc-600 h-[1px] mx-3 mt-4 mb-2" />
          <Menu className="outline-hidden">
            <MyMenuItem id="new">Account Settings</MyMenuItem>
            <MyMenuItem id="open">Support</MyMenuItem>
            <Separator className="bg-gray-300 dark:bg-zinc-600 h-[1px] mx-3 my-2" />
            <MyMenuItem id="save">Legal notices</MyMenuItem>
            <MyMenuItem id="save-as">About</MyMenuItem>
            <Separator className="bg-gray-300 dark:bg-zinc-600 h-[1px] mx-3 my-2" />
            <MyMenuItem id="print">Sign out</MyMenuItem>
          </Menu>
        </Popover>
      </MenuTrigger>
    </div>
  );
}

function MyMenuItem(props: MenuItemProps) {
  return <MenuItem {...props} className="group flex w-full items-center rounded-md px-3 py-2 box-border outline-hidden cursor-default text-gray-900 dark:text-gray-100 focus:bg-blue-500 focus:text-white" />;
}

function MySwitch(props: SwitchProps) {
  return (
    <Switch className="group flex gap-2 items-center text-gray-800 dark:text-zinc-200 text-base transition">
      {composeRenderProps(props.children, children => <>
        <div className="flex h-3 w-6 p-[2px] items-center shrink-0 cursor-default rounded-full transition duration-200 ease-in-out shadow-inner border border-transparent bg-gray-400 dark:bg-zinc-400 group-pressed:bg-gray-500 dark:group-pressed:bg-zinc-300 group-selected:bg-gray-700 group-selected:dark:bg-zinc-300 group-selected:forced-colors:bg-[Highlight]! group-selected:group-pressed:bg-gray-800 group-selected:dark:group-pressed:bg-zinc-200 outline outline-0 outline-blue-600 dark:outline-blue-500 forced-colors:outline-[Highlight] outline-offset-2 group-focus-visible:outline-2">
          <div className="h-3 w-3 transform rounded-full bg-white dark:bg-zinc-900 outline outline-1 -outline-offset-1 outline-transparent shadow-sm transition duration-200 ease-in-out translate-x-0 group-selected:translate-x-[100%]" />
        </div>
        {children}
      </>)}
    </Switch>
  );
}

----------------------------------------

TITLE: Creating a SliderDescription Component with Context API
DESCRIPTION: Advanced example of building a custom SliderDescription component that uses React Context to associate a description with a slider via aria-describedby, improving accessibility.

LANGUAGE: tsx
CODE:
import {SliderContext} from 'react-aria-components';
import {useId} from 'react-aria';

interface SliderDescriptionProps {
  children?: React.ReactNode,
  description?: string
}

function SliderDescription({children, description}: SliderDescriptionProps) {
  let descriptionId = useId();
  return (
    <div>
      <SliderContext.Provider value={{'aria-describedby': descriptionId}}>
        {children}
      </SliderContext.Provider>
      <small id={descriptionId}>{description}</small>
    </div>
  );
}

<SliderDescription description="Keeping your display on may shorten its life.">
  <MySlider label="Turn off display after" minValue={10} maxValue={60} defaultValue={45} formatOptions={{style: 'unit', unit: 'minute'}} />
</SliderDescription>

----------------------------------------

TITLE: Parsing an ISO 8601 Time String in TypeScript
DESCRIPTION: Demonstrates parsing an ISO 8601 formatted time string into a Time object using the parseTime function.

LANGUAGE: tsx
CODE:
import {parseTime} from '@internationalized/date';

let time = parseTime('09:45');

----------------------------------------

TITLE: Setting Zero Close Delay for Tooltips in TSX
DESCRIPTION: Example demonstrating how to configure a tooltip to disappear immediately when no longer hovering by setting closeDelay to zero.

LANGUAGE: tsx
CODE:
<TooltipButton tooltip="Refresh" closeDelay={0}>🔄</TooltipButton>

----------------------------------------

TITLE: Implementing SearchAutocomplete with Avatars in React Spectrum
DESCRIPTION: Demonstrates how to create a SearchAutocomplete component with avatar images for each user item. This configuration enhances visual recognition in user selection interfaces.

LANGUAGE: tsx
CODE:
<SearchAutocomplete label="Search users">
  <Item textValue="User 1">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 1</Text>
  </Item>
  <Item textValue="User 2">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 2</Text>
  </Item>
  <Item textValue="User 3">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 3</Text>
  </Item>
  <Item textValue="User 4">
    <Avatar src="https://i.imgur.com/kJOwAdv.png" />
    <Text>User 4</Text>
  </Item>
</SearchAutocomplete>

----------------------------------------

TITLE: TextField with HTML Form Integration
DESCRIPTION: Example showing how to integrate TextField with HTML forms using the name and type attributes, which are passed through to the underlying input element.

LANGUAGE: tsx
CODE:
<MyTextField label="Email" name="email" type="email" />

----------------------------------------

TITLE: Styling Modal Components with CSS Selectors
DESCRIPTION: Example of how to target and style Modal components using CSS selectors. This uses the default class names that follow the react-aria-ComponentName naming convention.

LANGUAGE: css
CODE:
.react-aria-Modal {
  /* ... */
}

----------------------------------------

TITLE: Setting Fields Across Daylight Saving Transitions in TSX
DESCRIPTION: Example showing how setting date fields across daylight saving transitions adjusts UTC offsets automatically while maintaining the same time.

LANGUAGE: tsx
CODE:
let date = parseZonedDateTime('2020-03-01T10:00-08:00[America/Los_Angeles]');
date.set({day: 14}); // 2020-03-14T10:00-07:00[America/Los_Angeles]

----------------------------------------

TITLE: Implementing Tag Group Component in React with useTagGroup and useTag Hooks
DESCRIPTION: This example demonstrates how to implement a basic Tag Group component using the useTagGroup and useTag hooks from React Aria. It shows the structure for proper accessibility, including grid roles and keyboard navigation support.

LANGUAGE: tsx
CODE:
import type {AriaTagGroupProps, AriaTagProps} from '@react-aria/tag';
import type {ListState} from '@react-stately/list';
import {useTag, useTagGroup} from '@react-aria/tag';
import {useListState} from '@react-stately/list';
import {Item} from '@react-stately/collections';
import {useFocusRing} from '@react-aria/focus';

// Reuse the Button from your component library. See below for details.
import {Button} from 'your-component-library';

function TagGroup<T extends object>(props: AriaTagGroupProps<T>) {
  let { label, description, errorMessage } = props;
  let ref = React.useRef(null);

  let state = useListState(props);
  let {
    gridProps,
    labelProps,
    descriptionProps,
    errorMessageProps
  } = useTagGroup(props, state, ref);

  return (
    <div className="tag-group">
      <div {...labelProps}>{label}</div>
      <div {...gridProps} ref={ref}>
        {[...state.collection].map((item) => (
          <Tag
            key={item.key}
            item={item}
            state={state} />
        ))}
      </div>
      {description && (
        <div {...descriptionProps} className="description">
          {description}
        </div>
      )}
      {errorMessage && (
        <div {...errorMessageProps} className="error-message">
          {errorMessage}
        </div>
      )}
    </div>
  );
}

interface TagProps<T> extends AriaTagProps<T> {
  state: ListState<T>
}

function Tag<T>(props: TagProps<T>) {
  let {item, state} = props;
  let ref = React.useRef(null);
  let {focusProps, isFocusVisible} = useFocusRing({within: true});
  let {rowProps, gridCellProps, removeButtonProps, allowsRemoving} = useTag(props, state, ref);

  return (
    <div ref={ref} {...rowProps} {...focusProps} data-focus-visible={isFocusVisible}>
      <div {...gridCellProps}>
        {item.rendered}
        {allowsRemoving && <Button {...removeButtonProps}>❎</Button>}
      </div>
    </div>
  );
}

<TagGroup label="Categories">
  <Item key="news">News</Item>
  <Item key="travel">Travel</Item>
  <Item key="gaming">Gaming</Item>
  <Item key="shopping">Shopping</Item>
</TagGroup>

----------------------------------------

TITLE: Creating a Reusable ColorField Component
DESCRIPTION: Example of creating a reusable wrapper component for ColorField that encapsulates the DOM structure, styling, and includes support for labels, descriptions, and validation error messages.

LANGUAGE: tsx
CODE:
import type {ColorFieldProps, ValidationResult} from 'react-aria-components';
import {Text, FieldError} from 'react-aria-components';

interface MyColorFieldProps extends ColorFieldProps {
  label?: string,
  description?: string,
  errorMessage?: string | ((validation: ValidationResult) => string)
}

export function MyColorField({label, description, errorMessage, ...props}: MyColorFieldProps) {
  return (
    <ColorField {...props}>
      {label && <Label>{label}</Label>}
      <Input />
      {description && <Text slot="description">{description}</Text>}
      <FieldError>{errorMessage}</FieldError>
    </ColorField>
  );
}

<MyColorField label="Color" />

----------------------------------------

TITLE: Creating Custom Checkbox with Hooks and Context
DESCRIPTION: Demonstrates building a custom checkbox implementation using useContextProps to connect with CheckboxContext, allowing the component to work within React Aria Components like Table or GridList.

LANGUAGE: tsx
CODE:
import type {CheckboxProps} from 'react-aria-components';
import {CheckboxContext, useContextProps} from 'react-aria-components';
import {useToggleState} from 'react-stately';
import {useCheckbox} from 'react-aria';

const MyCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {
  // Merge the local props and ref with the ones provided via context.
  ///- begin highlight -///
  [props, ref] = useContextProps(props, ref, CheckboxContext);
  ///- end highlight -///

  // Follow the hook docs and implement your customizations...
  let state = useToggleState(props);
  let {inputProps} = useCheckbox(props, state, ref);
  return <input {...inputProps} ref={ref} />;
});

----------------------------------------

TITLE: Using disabledKeys for Dynamic Collections in Menu
DESCRIPTION: Example of using the disabledKeys prop at the Menu level to disable specific items in a dynamic collection based on their IDs.

LANGUAGE: tsx
CODE:
function Example() {
  let items = [
    {id: 1, name: 'New'},
    {id: 2, name: 'Open'},
    {id: 3, name: 'Close'},
    {id: 4, name: 'Save'},
    {id: 5, name: 'Duplicate'},
    {id: 6, name: 'Rename'},
    {id: 7, name: 'Move'}
  ];

  return (
    <MyMenuButton
      label="Actions"
      items={items}
      disabledKeys={[4, 6]}
    >
      {(item) => <MenuItem>{item.name}</MenuItem>}
    </MyMenuButton>
  );
}

----------------------------------------

TITLE: Using Custom Table Components with Built-in Selection
DESCRIPTION: Example showing how to use custom table components with built-in selection functionality. The table includes row headers and demonstrates how the custom components handle selection automatically.

LANGUAGE: tsx
CODE:
<Table aria-label="Files" selectionMode="multiple">
  <MyTableHeader>
    <MyColumn isRowHeader>Name</MyColumn>
    <MyColumn>Type</MyColumn>
    <MyColumn>Date Modified</MyColumn>
  </MyTableHeader>
  <TableBody>
    <MyRow>
      <Cell>Games</Cell>
      <Cell>File folder</Cell>
      <Cell>6/7/2020</Cell>
    </MyRow>
    <MyRow>
      <Cell>Program Files</Cell>
      <Cell>File folder</Cell>
      <Cell>4/7/2021</Cell>
    </MyRow>
    <MyRow>
      <Cell>bootmgr</Cell>
      <Cell>System file</Cell>
      <Cell>11/20/2010</Cell>
    </MyRow>
  </TableBody>
</Table>

----------------------------------------

TITLE: Cycling Hours with hourCycle Option in CalendarDateTime
DESCRIPTION: Using the hourCycle option when cycling hours to specify whether to use a 12-hour or 24-hour clock. This preserves AM/PM values when using a 12-hour clock.

LANGUAGE: tsx
CODE:
let date = new CalendarDateTime(2022, 2, 3, 11);
date.cycle('hour', 1); // 2022-02-03T12:00
date.cycle('hour', 1, {hourCycle: 12}); // 2022-02-03T00:00

let date = new CalendarDateTime(2022, 2, 3, 23);
date.cycle('hour', 1); // 2022-02-03T00:00
date.cycle('hour', 1, {hourCycle: 12}); // 2022-02-03T12:00

----------------------------------------

TITLE: Importing React Spectrum Layout Component
DESCRIPTION: Imports and exports the Layout component from React Spectrum docs for documentation page structure.

LANGUAGE: JSX
CODE:
import {Layout} from '@react-spectrum/docs';
export default Layout;

----------------------------------------

TITLE: Implementing a Multi-Thumb Range Slider Component in React
DESCRIPTION: This code shows how to create a range slider with multiple thumbs using React Aria hooks. It renders two thumbs and displays their values as a range in the output element with proper number formatting.

LANGUAGE: tsx
CODE:
function RangeSlider(props) {
  let trackRef = React.useRef(null);

  let numberFormatter = useNumberFormatter(props.formatOptions);
  let state = useSliderState({...props, numberFormatter});
  let {
    groupProps,
    trackProps,
    labelProps,
    outputProps
  } = useSlider(props, state, trackRef);

  return (
    <div {...groupProps} className={`slider ${state.orientation}`}>
      {props.label &&
        <div className="label-container">
          <label {...labelProps}>{props.label}</label>
          <output {...outputProps}>
            {`${state.getThumbValueLabel(0)} - ${state.getThumbValueLabel(1)}`}
          </output>
        </div>
      }
      <div {...trackProps} ref={trackRef} className={`track ${state.isDisabled ? 'disabled' : ''}`}>
        <Thumb index={0} state={state} trackRef={trackRef} />
        <Thumb index={1} state={state} trackRef={trackRef} />
      </div>
    </div>
  );
}

<RangeSlider
  label="Price Range"
  formatOptions={{style: 'currency', currency: 'USD'}}
  maxValue={500}
  defaultValue={[100, 350]}
  step={10} />

----------------------------------------

TITLE: TimeField with Second Granularity
DESCRIPTION: Demonstrates setting the granularity prop to 'second' to allow more precise time selection.

LANGUAGE: tsx
CODE:
<TimeField
  label="Event time"
  granularity="second"
  defaultValue={parseAbsoluteToLocal('2021-04-07T18:45:22Z')} />

----------------------------------------

TITLE: Disabling an Entire RadioGroup
DESCRIPTION: Example of disabling an entire RadioGroup with the isDisabled prop, making all radio buttons in the group non-interactive.

LANGUAGE: tsx
CODE:
<MyRadioGroup label="Favorite sport" isDisabled>
  <Radio value="soccer">Soccer</Radio>
  <Radio value="baseball">Baseball</Radio>
  <Radio value="basketball">Basketball</Radio>
</MyRadioGroup>

----------------------------------------

TITLE: Integrating Radio Groups with HTML Forms in React Spectrum
DESCRIPTION: This example demonstrates how to integrate RadioGroup with HTML forms using the name prop, which works with the value prop of each Radio to create proper form data submission.

LANGUAGE: tsx
CODE:
<RadioGroup label="Favorite pet" name="pet">
  <Radio value="dogs">Dogs</Radio>
  <Radio value="cats">Cats</Radio>
</RadioGroup>

----------------------------------------

TITLE: Basic ColorPicker with Visual Label
DESCRIPTION: Demonstrates how to provide a visual label for the ColorPicker using the label prop.

LANGUAGE: tsx
CODE:
<ColorPicker label="Stroke color" defaultValue="#345">
  <ColorEditor />
</ColorPicker>

----------------------------------------

TITLE: Customizing Validation Error Messages in React Spectrum Forms
DESCRIPTION: This example shows how to customize validation error messages by providing an errorMessage function that receives validation details and returns a custom error message based on the validation state.

LANGUAGE: tsx
CODE:
<Form validationBehavior="native" maxWidth="size-3000">
  <TextField
    label="Name"
    name="name"
    isRequired
    /*- begin highlight -*/
    errorMessage={({validationDetails}) => (
      validationDetails.valueMissing ? 'Please enter a name.' : ''
    )}
    /*- end highlight -*/
  />
  <ButtonGroup>
    <Button type="submit" variant="primary">Submit</Button>
    <Button type="reset" variant="secondary">Reset</Button>
  </ButtonGroup>
</Form>

----------------------------------------

TITLE: Asynchronous Data Loading in ListView
DESCRIPTION: Implementation of ListView with asynchronous data loading using the useAsyncList hook. Demonstrates loading states and infinite scrolling with onLoadMore.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@adobe/react-spectrum';

interface Character {
  name: string
}

function AsyncList() {
  let list = useAsyncList<Character>({
    async load({signal, cursor}) {
      if (cursor) {
        cursor = cursor.replace(/^http:\/\//i, 'https://');
      }

      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=`, {signal});
      let json = await res.json();

      return {
        items: json.results,
        cursor: json.next
      };
    }
  });

  return (
    <ListView
      selectionMode="multiple"
      aria-label="Async loading ListView example"
      maxWidth="size-6000"
      height="size-3000"
      items={list.items}
      loadingState={list.loadingState}
      onLoadMore={list.loadMore}>
      {(item) => (
        <Item key={item.name}>{item.name}</Item>
      )}
    </ListView>
  );
}

----------------------------------------

TITLE: Customizing Label Position and Alignment in DateField
DESCRIPTION: Demonstrates how to position the label to the side of the field and align it to the end using labelPosition and labelAlign props.

LANGUAGE: tsx
CODE:
<DateField label="Birth date" labelPosition="side" labelAlign="end" />

----------------------------------------

TITLE: Keyboard Interaction Example with Enter Key in Menus
DESCRIPTION: Shows the expected behavior when the Enter key is pressed while navigating menus, including opening submenus and activating items.

LANGUAGE: markdown
CODE:
- <kbd>Enter</kbd>:

  - When focus is on a `menuitem` that has a submenu, opens the submenu and places focus on its first item.
  - Otherwise, activates the item and closes the menu.

----------------------------------------

TITLE: React Spectrum Released Packages List with Version Numbers
DESCRIPTION: A complete list of all React Spectrum ecosystem packages that have been released, including their current version numbers. This includes UI components, hooks, utilities, state management, and type definitions across multiple package namespaces.

LANGUAGE: markdown
CODE:
- @adobe/react-spectrum@3.8.0
- @internationalized/message@3.0.0-alpha.0
- @internationalized/number@3.0.0-alpha.0
- @react-aria/button@3.3.1
- @react-aria/color@3.0.0-alpha.0
- @react-aria/combobox@3.0.0-alpha.1
- @react-aria/i18n@3.3.0
- @react-aria/interactions@3.3.3
- @react-aria/listbox@3.2.4
- @react-aria/menu@3.1.4
- @react-aria/numberfield@3.0.0-alpha.0
- @react-aria/overlays@3.6.1
- @react-aria/radio@3.1.3
- @react-aria/select@3.3.0
- @react-aria/selection@3.3.2
- @react-aria/slider@3.0.1
- @react-aria/spinbutton@3.0.0-alpha.0
- @react-aria/tabs@3.0.0-alpha.3
- @react-aria/toggle@3.1.2
- @react-aria/tooltip@3.1.1
- @react-aria/utils@3.6.0
- @react-spectrum/button@3.4.0
- @react-spectrum/checkbox@3.2.2
- @react-spectrum/color@3.0.0-alpha.0
- @react-spectrum/combobox@3.0.0-alpha.1
- @react-spectrum/label@3.3.1
- @react-spectrum/numberfield@3.0.0-alpha.0
- @react-spectrum/picker@3.2.2
- @react-spectrum/radio@3.1.2
- @react-spectrum/searchfield@3.1.3
- @react-spectrum/slider@3.0.1
- @react-spectrum/statuslight@3.2.0
- @react-spectrum/tabs@3.0.0-alpha.4
- @react-spectrum/textfield@3.1.5
- @react-spectrum/tooltip@3.1.1
- @react-spectrum/utils@3.5.1
- @react-stately/color@3.0.0-alpha.0
- @react-stately/combobox@3.0.0-alpha.1
- @react-stately/data@3.2.0
- @react-stately/numberfield@3.0.0-alpha.0
- @react-stately/radio@3.3.0
- @react-stately/slider@3.0.1
- @react-stately/tabs@3.0.0-alpha.1
- @react-stately/tooltip@3.0.2
- @react-stately/utils@3.2.0
- @react-types/button@3.3.1
- @react-types/checkbox@3.2.2
- @react-types/color@3.0.0-alpha.0
- @react-types/combobox@3.0.0-alpha.1
- @react-types/label@3.4.0
- @react-types/numberfield@3.0.0-alpha.0
- @react-types/select@3.2.0
- @react-types/shared@3.4.0
- @react-types/slider@3.0.1
- @react-types/text@3.1.2
- @react-types/tooltip@3.1.1
- @spectrum-icons/color@3.3.0
- react-aria@3.4.0
- react-stately@3.3.0

----------------------------------------

TITLE: Implementing Disabled Rows in TableView
DESCRIPTION: Example of using the disabledKeys prop with the PokemonTable component to prevent specific rows from being selectable.

LANGUAGE: tsx
CODE:
// Using the same table as above
<PokemonTable selectionMode="multiple" disabledKeys={[3]} />

----------------------------------------

TITLE: Using Test IDs with React Aria Components
DESCRIPTION: This code snippet shows how to add test IDs to React Aria Components and query them in tests using React Testing Library. Test IDs help identify specific instances of components in the test environment.

LANGUAGE: TypeScript
CODE:
import {render} from '@testing-library/react';
import {Input, Label, TextField} from 'react-aria-components';

function LoginForm() {
  return (
    <>
      <TextField data-testid="username">
        <Label>Username</Label>
        <Input />
      </TextField>
      <TextField data-testid="password">
        <Label>Username</Label>
        <Input />
      </TextField>
    </>
  );
}

let tree = render(<LoginForm />);
let username = tree.getByTestId('username');
let password = tree.getByTestId('password');

----------------------------------------

TITLE: Basic Asynchronous Data Loading with useAsyncList
DESCRIPTION: Demonstrates how to use the useAsyncList hook to load data asynchronously from an API and display it in a Picker component, showing loading states while data is being fetched.

LANGUAGE: tsx
CODE:
import {useAsyncList} from '@react-stately/data';

let list = useAsyncList({
  async load({signal}) {
    let res = await fetch('https://pokeapi.co/api/v2/pokemon', {signal});
    let json = await res.json();
    return {items: json.results};
  }
});

<Picker
  label="Pick a Pokemon"
  items={list.items}
  isLoading={list.isLoading}>
  {item => <Item key={item.name}>{item.name}</Item>}
</Picker>

----------------------------------------

TITLE: Implementing Manual-triggered ComboBox Menu in React Spectrum
DESCRIPTION: Example of a ComboBox with menuTrigger set to 'manual', where the menu only opens when clicking the field button. This shows the same items as the previous example but with different trigger behavior.

LANGUAGE: tsx
CODE:
<ComboBox label="Select action" menuTrigger="manual">
  <Item textValue="Add to queue">
    <Add />
    <Text>Add to queue</Text>
    <Text slot="description">Add to current watch queue.</Text>
  </Item>
  <Item textValue="Add review">
    <Draw />
    <Text>Add review</Text>
    <Text slot="description">Post a review for the episode.</Text>
  </Item>
    <Item textValue="Subscribe to series">
    <Bell />
    <Text>Subscribe to series</Text>
    <Text slot="description">Add series to your subscription list and be notified when a new episode airs.</Text>
  </Item>
  <Item textValue="Report">
    <Alert />
    <Text>Report</Text>
    <Text slot="description">Report an issue/violation.</Text>
  </Item>
</ComboBox>

----------------------------------------

TITLE: ColorPicker with Different Rounding Options
DESCRIPTION: Demonstrates different rounding options for the color swatch in the ColorPicker component.

LANGUAGE: tsx
CODE:
<Flex direction="column" gap="size-100">
  <ColorPicker label="None" rounding="none" defaultValue="#A00">
    <ColorEditor />
  </ColorPicker>
  <ColorPicker label="Default" rounding="default" defaultValue="#080">
    <ColorEditor />
  </ColorPicker>
  <ColorPicker label="Full" rounding="full" defaultValue="#00F">
    <ColorEditor />
  </ColorPicker>
</Flex>

----------------------------------------

TITLE: Referencing @react-spectrum/image package in Markdown
DESCRIPTION: Simple reference to the @react-spectrum/image package which is part of the React Spectrum library, with a link to the main repository for additional details.

LANGUAGE: markdown
CODE:
# @react-spectrum/image

This package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.

----------------------------------------

TITLE: Basic Picker with Selection Change Handling in React Spectrum
DESCRIPTION: Example of a Picker component that updates React state when a selection is made. The selected value is displayed below the component.

LANGUAGE: tsx
CODE:
function StaticExample() {
  let [frequency, setFrequency] = React.useState(null);

  return (
    <>
      <Picker label="Choose frequency" onSelectionChange={selected => setFrequency(selected)}>
        <Item key="Rarely">Rarely</Item>
        <Item key="Sometimes">Sometimes</Item>
        <Item key="Always">Always</Item>
      </Picker>
      <p>You selected {frequency}</p>
    </>
  );
}

----------------------------------------

TITLE: Configuring Tailwind CSS for React Aria Components (v3)
DESCRIPTION: JavaScript configuration for Tailwind v3 that adds the necessary plugins for React Aria Components and animations in the tailwind.config.js file.

LANGUAGE: tsx
CODE:
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-react-aria-components'),
    require('tailwindcss-animate')
  ]
};

----------------------------------------

TITLE: Using useContextProps with Custom Heading Component in React Aria Components
DESCRIPTION: Demonstrates how to create a custom heading component that is compatible with React Aria Components by consuming from HeadingContext and using the useContextProps hook to merge local props with context-provided props.

LANGUAGE: tsx
CODE:
import type {HeadingProps} from 'react-aria-components';
import {HeadingContext, useContextProps} from 'react-aria-components';

const MyCustomHeading = React.forwardRef((props: HeadingProps, ref: React.ForwardedRef<HTMLHeadingElement>) => {
  // Merge the local props and ref with the ones provided via context.
  [props, ref] = useContextProps(props, ref, HeadingContext);

  // ... your existing Heading component
  return <h2 {...props} ref={ref} />;
});

----------------------------------------

TITLE: CSS Styling for Disclosure Component
DESCRIPTION: CSS styles for the disclosure component, including styling for the trigger button with rotation animation for the chevron icon when expanded, and styling for the content panel.

LANGUAGE: css
CODE:
@import "@react-aria/example-theme";

.disclosure {
  .trigger {
    background: none;
    border: none;
    box-shadow: none;
    font-weight: bold;
    font-size: 16px;
    display: flex;
    align-items: center;
    gap: 8px;
    color: var(--text-color);

    svg {
      rotate: 0deg;
      transition: rotate 200ms;
      width: 12px;
      height: 12px;
      fill: none;
      stroke: currentColor;
      stroke-width: 3px;
    }

    &[aria-expanded="true"] svg {
      rotate: 90deg;
    }

    &:disabled {
      color: var(--gray-300);
    }
  }
}

.panel {
  margin-left: 32px;
}

----------------------------------------

TITLE: Using CSS Variables Provided by React Aria Components
DESCRIPTION: Example of using CSS variables provided by React Aria components in styling code, such as using --trigger-width to make a popover match the width of its trigger button.

LANGUAGE: css
CODE:
.react-aria-Popover {
  width: var(--trigger-width);
}

----------------------------------------

TITLE: Importing Documentation Resources in JSX
DESCRIPTION: Imports various documentation components and resources needed for the useTabListState hook documentation page, including metadata and UI components for rendering API information.

LANGUAGE: jsx
CODE:
import docs from 'docs:@react-stately/tabs';
import {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';
import packageData from '@react-stately/tabs/package.json';

----------------------------------------

TITLE: Implementing Item-Level Drop Handling in React
DESCRIPTION: Example demonstrating how to handle drops on individual items within a collection using the onItemDrop event. When items are dropped on a target item, an alert is shown with the target's key.

LANGUAGE: tsx
CODE:
function Example() {
  let { dragAndDropHooks } = useDragAndDrop({
    ///- begin highlight -///
    onItemDrop(e) {
      alert(`Dropped on ${e.target.key}`);
    }
    ///- end highlight -///
  });

  return (
    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>
      {/* see above */}
      <DraggableGridList />
      <MyGridList aria-label="Droppable list" dragAndDropHooks={dragAndDropHooks}>
        <MyItem id="applications">Applications</MyItem>
        <MyItem id="documents">Documents</MyItem>
        <MyItem id="pictures">Pictures</MyItem>
      </MyGridList>
    </div>
  );
}

----------------------------------------

TITLE: LogicButton Variant Examples
DESCRIPTION: Shows both 'or' and 'and' variants of LogicButton side by side with margin spacing between them.

LANGUAGE: tsx
CODE:
<LogicButton variant="or" marginEnd="20px">Or</LogicButton>
<LogicButton variant="and">And</LogicButton>

----------------------------------------

TITLE: Building an Accessible Switch Component with React Aria
DESCRIPTION: Creates a custom Switch component using useSwitch, useToggleState, and useFocusRing hooks. This implementation includes proper accessibility features with a visually hidden input element and SVG-based visual representation.

LANGUAGE: tsx
CODE:
import {useSwitch} from '@react-aria/switch';
import {VisuallyHidden} from '@react-aria/visually-hidden';
import {useToggleState} from '@react-stately/toggle';
import {useFocusRing} from '@react-aria/focus';

function Switch(props) {
  let state = useToggleState(props);
  let ref = React.useRef(null);
  let {inputProps} = useSwitch(props, state, ref);
  let {isFocusVisible, focusProps} = useFocusRing();

  return (
    <label style={{display: 'flex', alignItems: 'center', opacity: props.isDisabled ? 0.4 : 1}}>
      <VisuallyHidden>
        <input {...inputProps} {...focusProps} ref={ref} />
      </VisuallyHidden>
      <svg
        width={40}
        height={24}
        aria-hidden="true"
        style={{marginRight: 4}}>
        <rect
          x={4}
          y={4}
          width={32}
          height={16}
          rx={8}
          fill={state.isSelected ? 'orange' : 'gray'} />
        <circle
          cx={state.isSelected ? 28 : 12}
          cy={12}
          r={5}
          fill="white" />
        {isFocusVisible &&
          <rect
            x={1}
            y={1}
            width={38}
            height={22}
            rx={11}
            fill="none"
            stroke="orange"
            strokeWidth={2} />
        }
      </svg>
      {props.children}
    </label>
  );
}

<Switch>Low power mode</Switch>

----------------------------------------

TITLE: Using Custom Heading Component within Dialog
DESCRIPTION: Shows how to use the custom heading component within a Dialog component, replacing the built-in React Aria Components Heading.

LANGUAGE: tsx
CODE:
<Dialog>
  <MyCustomHeading>Dialog title</MyCustomHeading>
  {/* ... */}
</Dialog>