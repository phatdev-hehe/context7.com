TITLE: Initializing Speckle Viewer with TypeScript
DESCRIPTION: Implements the main viewer setup logic including initialization, extension loading, and model loading from a Speckle stream. Uses @speckle/viewer package for core functionality and includes camera control and selection extensions.

LANGUAGE: typescript
CODE:
import {
  Viewer,
  DefaultViewerParams,
  SpeckleLoader,
  UrlHelper,
} from "@speckle/viewer";
import { CameraController, SelectionExtension } from "@speckle/viewer";

async function main() {
  /** Get the HTML container */
  const container = document.getElementById("renderer");

  /** Configure the viewer params */
  const params = DefaultViewerParams;
  params.showStats = true;
  params.verbose = true;

  /** Create Viewer instance */
  const viewer = new Viewer(container, params);
  /** Initialise the viewer */
  await viewer.init();

  /** Add the stock camera controller extension */
  viewer.createExtension(CameraController);
  /** Add the selection extension for extra interactivity */
  viewer.createExtension(SelectionExtension);

  /** Create a loader for the speckle stream */
  const urls = await UrlHelper.getResourceUrls(
    "https://app.speckle.systems/projects/7591c56179/models/32213f5381"
  );
  for (const url of urls) {
    const loader = new SpeckleLoader(viewer.getWorldTree(), url, "");
    /** Load the speckle data */
    await viewer.loadObject(loader, true);
  }
}

main();

----------------------------------------

TITLE: Attaching Annotations to Objects in Python
DESCRIPTION: Demonstrates how to use AutomateContext to attach error, warning, and info annotations to objects in Python. This snippet shows the syntax for each annotation type and how to specify object IDs and messages.

LANGUAGE: python
CODE:
from speckle_automate import AutomateContext

def automate_function(runCtx: AutomateContext):
    # Example: Structural validation
    runCtx.attach_error_to_objects(
        "Structural Analysis",
        ["obj_id_1", "obj_id_2"],
        "Beam span exceeds maximum allowable length"
    )
    
    runCtx.attach_warning_to_objects(
        "Load Analysis",
        ["obj_id_3"],
        "Load approaching maximum capacity"
    )
    
    runCtx.attach_info_to_objects(
        "Cost Analysis",
        ["obj_id_4", "obj_id_5"],
        "Material cost optimized"
    )

----------------------------------------

TITLE: Initializing and Authenticating SpeckleClient in Python
DESCRIPTION: This snippet demonstrates how to create and authenticate a SpeckleClient using either local accounts or a Personal Access Token. It shows how to connect to a Speckle server and authenticate the client for further API interactions.

LANGUAGE: python
CODE:
from specklepy.api.client import SpeckleClient
from specklepy.api.credentials import get_default_account

# initialise the client
client = SpeckleClient(host="your-server.com") # or whatever your host is
# client = SpeckleClient(host="localhost:3000", use_ssl=False) or use local server

# authenticate the client with a token
account = get_default_account()
client.authenticate_with_account(account)

# if you're in an environment without accounts, you can construct an Account object yourself
# or authenticate with just a token
# client.authenticate_with_token("YOUR_TOKEN")

----------------------------------------

TITLE: Initializing Speckle Viewer with Measurement Extension in TypeScript
DESCRIPTION: Example showing how to set up a Speckle Viewer instance with measurement tool functionality. The code demonstrates importing required components, initializing the viewer, adding extensions, and loading Speckle data from a URL.

LANGUAGE: typescript
CODE:
import {
  Viewer,
  DefaultViewerParams,
  SpeckleLoader,
  UrlHelper,
  CameraController,
  MeasurementsExtension
} from "@speckle/viewer";


async function main() {
  /** Get the HTML container */
  const container = document.getElementById("renderer") as HTMLElement;

  /** Configure the viewer params */
  const params = DefaultViewerParams;
  params.verbose = true;

  /** Create Viewer instance */
  const viewer = new Viewer(container, params);
  /** Initialise the viewer */
  await viewer.init();

  /** Add the stock camera controller extension */
  viewer.createExtension(CameraController);
  /** Add mesurements extension */
  const measurements = viewer.createExtension(MeasurementsExtension);

  const urls = await UrlHelper.getResourceUrls(
    "https://app.speckle.systems/projects/7591c56179/models/32213f5381"
  );
  for (const url of urls) {
    const loader = new SpeckleLoader(viewer.getWorldTree(), url, "");
    /** Load the speckle data */
    await viewer.loadObject(loader, true);
  }

  measurements.enabled = true;
}

main();

----------------------------------------

TITLE: Building Speckle Viewer
DESCRIPTION: Commands to build the Speckle Viewer component. This involves navigating to the viewer directory, installing dependencies, and running the build script.

LANGUAGE: sh
CODE:
cd packages/viewer
npm install
npm run build

----------------------------------------

TITLE: Sending and Committing Objects in Speckle Python SDK
DESCRIPTION: This snippet demonstrates how to send a custom Block object to a Speckle server using a ServerTransport, and then create a commit on the stream with the sent object. It showcases the process of serializing and sending data in the Speckle Python SDK.

LANGUAGE: python
CODE:
from specklepy.transports.server import ServerTransport
from specklepy.api import operations

# here's the data you want to send
block = Block(length=2, height=4)

# next create a server transport - this is the vehicle through which you will send and receive
transport = ServerTransport(client=client, stream_id=new_stream_id)

# this serialises the block and sends it to the transport
hash = operations.send(base=block, transports=[transport])

# you can now create a commit on your stream with this object
commid_id = client.commit.create(
    stream_id=new_stream_id, 
    object_id=hash, 
    message="this is a block I made in speckle-py",
    )

----------------------------------------

TITLE: Structuring Data with Speckle Base Object in C#
DESCRIPTION: Demonstrates how to create and populate a Speckle Base object with custom properties. This flexible approach allows for organic data composition.

LANGUAGE: csharp
CODE:
using Speckle.Core.Models;

var myBuilding = new Base()

myBuilding[ "@floors" ] = myFloors;
myBuilding[ "@walls" ] = myWalls;
myBuilding[ "name" ] = "Southwood Park"


----------------------------------------

TITLE: Defining Function Inputs in Python for Speckle Automate
DESCRIPTION: This snippet demonstrates how to define function inputs using a Python class that subclasses AutomateBase. It shows various input types including text, numerical, selection, and read-only fields using Pydantic Field objects.

LANGUAGE: python
CODE:
class FunctionInputs(AutomateBase):
		text_input: str = Field(
			title="Text Input",
			description="Values given in this field will be available with the `text_input` key."
		)
		
		scalar_value: float = Field(
			default=25.0,
			title="Numerical value",
			description=( "Annotating a field and providing a default value will tell the " 
											"Automate UI to treat the input field as a number" )
		)
		
		selection: str = Field(
			default=Selection.default,
			title="Select an option",
			description=( "Specifying a class and value as the default will provide the "
											"UI with a drop-down selection, preselecting the default value",
			json_scheme_extra={
				"examples": ["default", "option 2", "option 3"]
			}
		)
		
		read_only: str = Field(
			default="Placeholder",
			title="Disabled Input Field",
			description=( "Marking a field as readOnly will disable the UI input,"
											"which can be used to mock input UI for future revision "
											"or pass values specific to a function revision." ) 
		) 

----------------------------------------

TITLE: Receiving Objects in Speckle Python SDK
DESCRIPTION: This code snippet shows how to receive an object back from a Speckle server using the operations.receive function. It demonstrates how to deserialize and reconstruct the object from the server.

LANGUAGE: python
CODE:
# this receives the object back from the transport.
# the received data will be deserialised back into a `Block` 
received_base = operations.receive(obj_id=hash, remote_transport=transport)

----------------------------------------

TITLE: Using StreamWrapper in Speckle Python SDK
DESCRIPTION: This example demonstrates how to use the StreamWrapper helper to easily get an authenticated client and transport from a stream URL. It simplifies the process of connecting to a specific stream, branch, commit, or object in Speckle.

LANGUAGE: python
CODE:
from specklepy.api.wrapper import StreamWrapper

# provide any stream, branch, commit, object, or globals url
wrapper = StreamWrapper("https://app.speckle.systems/streams/3073b96e86/commits/604bea8cc6")

# get an authenticated SpeckleClient if you have a local account for the server
client = wrapper.get_client()

# get an authenticated ServerTransport if you have a local account for the server
transport = wrapper.get_transport()

----------------------------------------

TITLE: Implementing ITransport Interface in C#
DESCRIPTION: Core interface definition for creating custom transport layers in Speckle 2.0. Includes methods for saving and retrieving objects, and copying objects with their children between transports. The interface defines the contract for implementing data transfer functionality.

LANGUAGE: csharp
CODE:
public interface ITransport
{
  public string TransportName { get; set; }

  /// <summary>
  /// Saves an object.
  /// </summary>
  /// <param name="id">The hash of the object.</param>
  /// <param name="serializedObject">The full string representation of the object.</param>
  public void SaveObject(string id, string serializedObject);

  /// <summary>
  /// Saves an object, retrieving its serialised version from the provided transport.
  /// </summary>
  /// <param name="id">The hash of the object.</param>
  /// <param name="sourceTransport">The transport from where to retrieve it.</param>
  public void SaveObject(string id, ITransport sourceTransport);

  /// <summary>
  /// Gets an object.
  /// </summary>
  /// <param name="id">The object's hash.</param>
  public string GetObject(string id);

  /// <summary>
  /// Copies the parent object and all its children to the provided transport.
  /// </summary>
  /// <param name="id">The id of the object you want to copy.</param>
  /// <param name="targetTransport">The transport you want to copy the object to.</param>
  public Task<string> CopyObjectAndChildren(string id, ITransport targetTransport);
}

----------------------------------------

TITLE: Advanced Data Sending to Speckle Stream in C#
DESCRIPTION: Demonstrates a more controlled approach to sending data to a Speckle stream, including transport setup and commit creation. This method provides more flexibility and control over the sending process.

LANGUAGE: csharp
CODE:
using Speckle.Core.Api;
using Speckle.Core.Models;
using Speckle.Core.Transports;



var streamId = "streamId";
var branchName = "main";
var client = new Client(account);

var transport = new ServerTransport(account, streamId);

var objectId = await Operations.Send(
  data,
  new List<ITransport> { transport },
  useDefaultCache,
  onProgressAction,
  onErrorAction, disposeTransports: true);

var commitId = await client.CommitCreate(
  new CommitCreateInput
  {
    streamId = sw.StreamId,
    branchName = branchName,
    objectId = objectId,
    message = message,
    sourceApplication = sourceApplication,
    totalChildrenCount = totalChildrenCount,
  });

----------------------------------------

TITLE: Loading Speckle Data with SpeckleLoader
DESCRIPTION: Demonstrates how to load Speckle data into the viewer using the built-in SpeckleLoader. The code fetches resource URLs and loads each object into the viewer's world tree.

LANGUAGE: typescript
CODE:
const urls = await UrlHelper.getResourceUrls(
  "https://app.speckle.systems/projects/7591c56179/models/32213f5381"
);
for (const url of urls) {
  const loader = new SpeckleLoader(viewer.getWorldTree(), url, "");
  /** Load the speckle data */
  await viewer.loadObject(loader, true);
}

----------------------------------------

TITLE: Loading Speckle Model Data in TypeScript
DESCRIPTION: This snippet demonstrates how to load data from a Speckle model into the viewer. It uses the UrlHelper to parse Speckle URL formats, creates a SpeckleLoader, and loads the object into the viewer.

LANGUAGE: typescript
CODE:
/** Create a loader for the speckle stream */
const urls = await UrlHelper.getResourceUrls(
  "https://app.speckle.systems/projects/24c98619ac/models/38639656b8"
);
for (const url of urls) {
  const loader = new SpeckleLoader(viewer.getWorldTree(), url, "");
  /** Load the speckle data */
  await viewer.loadObject(loader, true);
}

----------------------------------------

TITLE: Sending and Receiving Objects with Speckle Python SDK
DESCRIPTION: This snippet demonstrates how to send and receive objects using the operations module and a MemoryTransport in the Speckle Python SDK. It shows the process of serializing, sending, and then receiving and deserializing objects.

LANGUAGE: python
CODE:
from specklepy.transports.memory import MemoryTransport
from specklepy.api import operations

transport = MemoryTransport()
base_obj = Base()

# this serialises the object and sends it to the transport
hash = operations.send(base=base_obj, transports=[transport])

# if the object had detached objects, you can see these as well
saved_objects = transport.objects # a dict with the obj hash as the key

# this receives an object from the given transport, deserialises it,
# and recomposes it into a base object.
# you can optionally provide a local_transport which will default to
# the `SQLiteTransport` pointing at your local cache
received_base = operations.receive(obj_id=hash, remote_transport=transport)

----------------------------------------

TITLE: Using Speckle .NET SDK without Manager in C#
DESCRIPTION: Illustrates how to use the Speckle .NET SDK in environments where SpeckleManager is not available, such as serverless functions. It shows how to create an Account object with a personal access token and use it with the Client class.

LANGUAGE: csharp
CODE:
using Speckle.Core.Api;
using Speckle.Core.Credentials;
using System;

namespace SpeckleSampleApp
{
  class Program
  {
    static void Main(string[] args)
    {
      var account = new Account();
      account.token = "YOUR-PERSONAL-ACCESS-TOKEN";
      account.serverInfo = new ServerInfo
      {
        url = "https://app.speckle.systems/"
      };

      var client = new Client(account);
      var stream = client.StreamGet("5dfbeb49c9").Result;
    }
  }
}


----------------------------------------

TITLE: Subclassing Base in Speckle Python SDK
DESCRIPTION: This example shows how to subclass the Base object to create custom objects in the Speckle Python SDK. It demonstrates defining typed attributes, overriding the speckle_type, and adding dynamic attributes to custom objects.

LANGUAGE: python
CODE:
from specklepy.objects import Base
from specklepy.objects.geometry import Point

class Line(Base):
    start: Point = None
    end: Point = None

class AlternativeLine(Base, speckle_type="Line_Two"):
    """
    The `speckle_type` is automatically populated by the class name.
    You can override this behaviour as demonstrated here.
    """
    a: Point = None
    b: Point = None

# look, a new custom line!
line = Line(end=Point(x=1, y=0, z=2))

# adding dynamic attributes as normal
line.blah = "blah"
line["colour"] = "blue"

----------------------------------------

TITLE: Working with Base Objects in Speckle Python SDK
DESCRIPTION: This snippet demonstrates how to create and manipulate Base objects in the Speckle Python SDK. It shows how to add attributes using dot notation and dictionary notation, as well as nesting Base objects within each other.

LANGUAGE: python
CODE:
from specklepy.objects import Base

# creating a base we will nest within a parent base
detached_base = Base()
detached_base.name = "a detached base"

# creating our parent base object
base_obj = Base()

# attributes can be added using dot or dict notation
base_obj.name = "my base"
base_obj["colour"] = "lilac"

# other base objects can be nested within.
# prepending the attribute name with `@` will detach the nested base when sending
base_obj["@nested"] = detached_base

----------------------------------------

TITLE: Implementing Box Class in Speckle Objects
DESCRIPTION: Example of implementing a basic Box geometry class that inherits from Base and implements multiple interfaces. Shows required properties and constructors.

LANGUAGE: csharp
CODE:
public class Box : Base, IHasVolume, IHasArea, IHasBoundingBox
{
  public Plane basePlane { get; set; }

  public Interval xSize { get; set; }

  public Interval ySize { get; set; }

  public Interval zSize { get; set; }

  public Box bbox { get; }

  public double area { get; set; }

  public double volume { get; set; }

  public Box() { }

  public Box(Plane basePlane, Interval xSize, Interval ySize, Interval zSize, string units = Units.Meters, string applicationId = null)
  {
    this.basePlane = basePlane;
    this.xSize = xSize;
    this.ySize = ySize;
    this.zSize = zSize;
    this.applicationId = applicationId;
    this.units = units;
  }
}

----------------------------------------

TITLE: Implementing Advanced Transports in C#
DESCRIPTION: Demonstrates how to use custom transports for specific use cases, such as storing data next to a project file. It shows creating custom SQLite and Server transports and using them in Send and Receive operations.

LANGUAGE: csharp
CODE:
var customLocalTransport = new SQLiteTransport( basePath: @"{localFolderPath}/.speckle" );
var serverTransport = new ServerTransport(...);

var myDataId = await Operations.Send(
  myData,
  transports: new ITransport[] { customLocalTransport, serverTransport },
  useDefaultCache: false
);

var myData = await Operations.Receive(
  objectId: myDataId,
  remoteTransport: serverTransport,
  localTransport: customLocalTransport
);

----------------------------------------

TITLE: Defining Run Entry Point in C# for Speckle Automate
DESCRIPTION: This snippet demonstrates the template executable method for a C# function using the Speckle Automate .NET SDK. It uses the AutomationRunner to execute the main function with the defined inputs.

LANGUAGE: csharp
CODE:
return await AutomationRunner
  .Main<FunctionInputs>(args, AutomateFunction.Run)
  .ConfigureAwait(false);

----------------------------------------

TITLE: Defining Base Object Class Structure in C#
DESCRIPTION: Core class definition showing the fundamental properties of the Base object including id, applicationId, speckle_type, and totalChildrenCount.

LANGUAGE: csharp
CODE:
public class Base {
	public string id { get; set; } // this is the unique hash, generated from the serialized object
    	public string applicationId { get; set; } // a secondary (optional) identity value, for example the host application object id
	public string speckle_type { get; } // this is the discriminator comprised of assembly name and inheritance
	public long totalChildrenCount { get; } // this is the total number of detachable objects
}

----------------------------------------

TITLE: Defining Function Inputs in C# for Speckle Automate
DESCRIPTION: This snippet shows how to define function inputs using a C# struct. It demonstrates various input types including required string, float with range, and decorated input with custom title and description.

LANGUAGE: csharp
CODE:
struct FunctionInputs
{
	[Required]
	public string TextInput; // A required string input. UI will infer the Property Title

	[Range(0.0, 100.0)]
	public float ScalarValue; // A float variable between 0 and 100

	[DisplayName("Specific Input Title")]
	[Description("This is a description for the example input.")]
	public string DecoratedInput; // A range of Attributes applied.	
}

----------------------------------------

TITLE: Initializing WorldTree Class in TypeScript
DESCRIPTION: Constructor for creating a new WorldTree instance. Returns a WorldTree object.

LANGUAGE: typescript
CODE:
new WorldTree();

----------------------------------------

TITLE: Defining Basic Text and Number Inputs in Python
DESCRIPTION: Demonstrates how to create text and number input fields with validation using Pydantic in Python. It shows setting up a project name field and a maximum length field with constraints.

LANGUAGE: python
CODE:
class FunctionInputs(AutomateBase):
    project_name: str = Field(
        title="Project Name",
        description="Enter the project identifier"
    )
    
    max_length: float = Field(
        default=10.0,
        title="Maximum Length",
        description="Maximum allowed length in meters",
        gt=0,
        lt=100  # Prevents users entering unrealistic values
    )

----------------------------------------

TITLE: Implementing Base Object Flattening Extension in C#
DESCRIPTION: Extension method that flattens a Speckle Base object into its constituent parts by recursively traversing the object graph and yielding all nested Base objects. Handles dictionaries, enumerables, and nested Base objects.

LANGUAGE: csharp
CODE:
public static class Extensions
{
  // Flattens a base object into all its constituent parts.
  public static IEnumerable<Base> Flatten(this Base obj)
  {
    yield return obj;

    var props = obj.GetDynamicMemberNames();
    foreach (var prop in props)
    {
      var value = obj[prop];
      if (value == null) continue;

      if (value is Base b)
      {
        var nested = b.Flatten();
        foreach (var child in nested) yield return child;
      }

      if (value is IDictionary dict)
      {
        foreach (var dictValue in dict.Values)
        {
          if (dictValue is Base lb)
          {
            foreach (var lbChild in lb.Flatten()) yield return lbChild;
          }
        }
      }

      if (value is IEnumerable enumerable)
      {
        foreach (var listValue in enumerable)
        {
          if (listValue is Base lb)
          {
            foreach (var lbChild in lb.Flatten()) yield return lbChild;
          }
        }
      }
    }
  }

----------------------------------------

TITLE: Serializing and Sending Objects via GraphQL in Speckle Python SDK
DESCRIPTION: This example shows how to serialize a Base object and send it to a Speckle server using the GraphQL API. It demonstrates the process of creating a test object, serializing it, and then sending and retrieving it from the server.

LANGUAGE: python
CODE:
from specklepy.objects import Base
from specklepy.serialization.base_object_serializer import BaseObjectSerializer

# create a test base object
test_base = Base()
test_base.testing = "a test base obj"

# run it through the serialiser
s = BaseObjectSerializer()
hash, obj = s.traverse_base(test_base)

# send it to the server
objCreate = client.object.create(stream_id="stream id", objects=[obj])

received_base = client.object.get("stream id", hash)

----------------------------------------

TITLE: Fetching RenderViews and Applying Materials in TypeScript
DESCRIPTION: This snippet demonstrates how to get RenderViews for a specific node, define material parameters, and apply the material to the RenderViews using the viewer object.

LANGUAGE: typescript
CODE:
const nodeId = "2f1bd7295481641c888f09b5fbb6dc2b";
const renderTree = worldTree.getRenderTree(nodeId);
// Get all render views starting from the root of the render tree
const node = worldTree.findId(nodeId);
const rvs = renderTree.getRenderViewsForNode(node);
// Define some material parameters
const materialData = {
  color: 0xee0022,
  opacity: 1,
  roughness: 1,
  metalness: 0,
  vertexColors: false,
};
// Apply material
viewer.setMaterial(rvs, materialData);

----------------------------------------

TITLE: Defining Run Entry Point in Python for Speckle Automate
DESCRIPTION: This snippet shows the essential execution entry point for a Python SDK function in Speckle Automate. It uses the execute_automate_function to run the main function with the defined inputs.

LANGUAGE: python
CODE:
if __name__ == "__main__":
    execute_automate_function(automate_function, FunctionInputs)

----------------------------------------

TITLE: Installing SpecklePy using pip
DESCRIPTION: This command installs the SpecklePy package using pip, the Python package installer. It allows users to easily add the Speckle Python SDK to their Python environment.

LANGUAGE: console
CODE:
pip install specklepy

----------------------------------------

TITLE: Sending Data to Speckle Stream in C#
DESCRIPTION: Shows how to send data to a Speckle stream using the Helpers.Send method. This is a simplified approach assuming SpeckleManager is set up locally.

LANGUAGE: csharp
CODE:
using Speckle.Core.Api;

var commitId = Helpers.Send("Stream URL or ID", data, "My commit message").Result;

----------------------------------------

TITLE: Initializing Speckle Viewer Instance in TypeScript
DESCRIPTION: This snippet demonstrates how to create and initialize a Speckle viewer instance. It selects the HTML container, creates a new Viewer object, and initializes it.

LANGUAGE: typescript
CODE:
/** Get the HTML container */
const container = document.getElementById("renderer");

/** Create Viewer instance */
const viewer = new Viewer(container);
/** Initialise the viewer */
await viewer.init();

----------------------------------------

TITLE: Implementing Async Status Reporting in Python
DESCRIPTION: Demonstrates asynchronous execution status reporting in Python using AutomateContext. Includes error handling with try-except blocks and explicit success/failure messaging for automation workflows.

LANGUAGE: python
CODE:
async def automate_function(runCtx: AutomateContext):
    try:
        # Function logic
        results = process_data()
        if results.is_valid:
            await runCtx.mark_run_success(
                "Analysis completed successfully: Found 5 valid elements"
            )
        else:
            await runCtx.mark_run_failed(
                "Analysis completed but found invalid elements"
            )
    except Exception as ex:
        await runCtx.mark_run_failed(str(ex))
        raise

----------------------------------------

TITLE: Receiving Data from Speckle Stream in C#
DESCRIPTION: Illustrates how to receive data from a Speckle stream using the Helpers.Receive method. This simplified approach assumes SpeckleManager is set up locally.

LANGUAGE: csharp
CODE:
using Speckle.Core.Api;

var data = Helpers.Receive("Stream URL or ID").Result;

----------------------------------------

TITLE: Sending Data with Default Transport in C#
DESCRIPTION: Demonstrates how to send data using the default Speckle local transport (SQLite). It creates a Base object, populates it with data, and sends it using the Operations.Send method.

LANGUAGE: csharp
CODE:
var myData = new Base();
myData["@columns"] = new List<Columns>() { ... the columns };
myData["@rooms"] = new List<Rooms>() { ... the rooms};

var myDataId = await Operations.Send( myData );

----------------------------------------

TITLE: Docker Compose Configuration for Speckle Server
DESCRIPTION: YAML configuration for deploying Speckle server and its dependencies using Docker Compose. Includes services for PostgreSQL, Redis, MinIO, and various Speckle components.

LANGUAGE: yaml
CODE:
version: "2.3"
name: "speckle-server"

services:
  ####
  # Speckle Server dependencies
  #######
  postgres:
    image: "postgres:14.5-alpine"
    restart: always
    environment:
      POSTGRES_DB: speckle
      POSTGRES_USER: speckle
      POSTGRES_PASSWORD: speckle
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    healthcheck:
      # the -U user has to match the POSTGRES_USER value
      test: ["CMD-SHELL", "pg_isready -U speckle"]
      interval: 5s
      timeout: 5s
      retries: 30

  redis:
    image: "redis:7-alpine"
    restart: always
    volumes:
      - redis-data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 30

  minio:
    image: "minio/minio"
    command: server /data --console-address ":9001"
    restart: always
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  ####
  # Speckle Server
  #######
  speckle-ingress:
    image: speckle/speckle-docker-compose-ingress:2
    restart: always
    ports:
      - "0.0.0.0:80:8080"
    environment:
      FILE_SIZE_LIMIT_MB: "100"
      NGINX_ENVSUBST_OUTPUT_DIR: "/etc/nginx"

  speckle-frontend-2:
    image: speckle/speckle-frontend-2:2
    restart: always
    environment:
      NUXT_PUBLIC_SERVER_NAME: "local"
      # TODO: Change NUXT_PUBLIC_API_ORIGIN to the URL of the speckle server, as accessed from the network. This is the same value as should be used for the CANONICAL_URL in the server section below.
      NUXT_PUBLIC_API_ORIGIN: "http://127.0.0.1"
      NUXT_PUBLIC_BACKEND_API_ORIGIN: "http://speckle-server:3000"
      # TODO: Change NUXT_PUBLIC_BASE_URL to the URL of the speckle frontend, as accessed from the network. This is the same value as should be used for the CANONICAL_URL in the server section below.
      NUXT_PUBLIC_BASE_URL: "http://127.0.0.1"
      NUXT_PUBLIC_LOG_LEVEL: 'warn'
      NUXT_REDIS_URL: "redis://redis"

  speckle-server:
    image: speckle/speckle-server:2
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "/nodejs/bin/node",
          "-e",
          "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }",
        ]
      interval: 10s
      timeout: 3s
      retries: 30

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # TODO: Change this to the URL of the speckle server, as accessed from the network
      CANONICAL_URL: "http://127.0.0.1"
      SPECKLE_AUTOMATE_URL: "http://127.0.0.1:3030"

      REDIS_URL: "redis://redis"

      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      S3_BUCKET: "speckle-server"
      S3_CREATE_BUCKET: "true"

      FILE_SIZE_LIMIT_MB: 100

      # TODO: Change this to a unique secret for this server
      SESSION_SECRET: "TODO:ReplaceWithLongString"

      STRATEGY_LOCAL: "true"
      DEBUG: "speckle:*"

      POSTGRES_URL: "postgres"
      POSTGRES_USER: "speckle"
      POSTGRES_PASSWORD: "speckle"
      POSTGRES_DB: "speckle"
      ENABLE_MP: "false"

      # TODO: Change this to the URL of the speckle server, as accessed from the network
      FRONTEND_ORIGIN: "http://127.0.0.1"

  preview-service:
    image: speckle/speckle-preview-service:2
    restart: always
    depends_on:
      speckle-server:
        condition: service_healthy
    mem_limit: "1000m"
    memswap_limit: "1000m"
    environment:
      DEBUG: "preview-service:*"
      PG_CONNECTION_STRING: "postgres://speckle:speckle@postgres/speckle"

  webhook-service:
    image: speckle/speckle-webhook-service:2
    restart: always
    depends_on:
      speckle-server:
        condition: service_healthy
    environment:
      DEBUG: "webhook-service:*"
      PG_CONNECTION_STRING: "postgres://speckle:speckle@postgres/speckle"
      WAIT_HOSTS: postgres:5432

  fileimport-service:
    image: speckle/speckle-fileimport-service:2
    restart: always
    depends_on:
      speckle-server:
        condition: service_healthy
    environment:
      DEBUG: "fileimport-service:*"
      PG_CONNECTION_STRING: "postgres://speckle:speckle@postgres/speckle"
      WAIT_HOSTS: postgres:5432

      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      S3_BUCKET: "speckle-server"

      SPECKLE_SERVER_URL: "http://speckle-server:3000"

networks:
  default:
    name: speckle-server

volumes:
  postgres-data:
  redis-data:
  minio-data:

----------------------------------------

TITLE: Implementing ConvertToSpeckle Method in Revit Converter
DESCRIPTION: Example of a conversion method that handles different Revit element types and converts them to Speckle objects.

LANGUAGE: csharp
CODE:
public Base ConvertToSpeckle(object @object)
{
  Base returnObject = null;
  switch (@object)
  {
    case DB.DetailCurve o:
      returnObject = DetailCurveToSpeckle(o);
      break;
    case DB.DirectShape o:
      returnObject = DirectShapeToSpeckle(o);
      break;
    case DB.FamilyInstance o:
      returnObject = FamilyInstanceToSpeckle(o);
      break;
    case DB.Floor o:
      returnObject = FloorToSpeckle(o);
      break;
    // etc ...
    default:
      ConversionErrors.Add(new Error("Type not supported", $"Cannot convert {@object.GetType()} to Speckle"));
      returnObject = null;
      break;
  }

  return returnObject;
}

----------------------------------------

TITLE: Advanced Data Receiving from Speckle Stream in C#
DESCRIPTION: Shows a more detailed approach to receiving data from a Speckle stream, including client setup, branch retrieval, and transport configuration. This method offers more control over the receiving process.

LANGUAGE: csharp
CODE:
using Speckle.Core.Api;
using Speckle.Core.Models;
using Speckle.Core.Transports;



var streamId = "streamId";
var branchName = "main";
var client = new Client(account);
var branch = await client.BranchGet(streamId, branchName, 1);
var objectId = branch.commits.items[0].referencedObject; // take last commit

var transport = new ServerTransport(account, streamId);

var data = await Operations.Receive(
  objectId,
  remoteTransport: transport,
  onErrorAction: onErrorAction,
  onProgressAction: onProgressAction,
  onTotalChildrenCountKnown: onTotalChildrenCountKnown,
  disposeTransports: true
);

----------------------------------------

TITLE: Stream Operations with SpeckleClient in Python
DESCRIPTION: This code snippet showcases various stream operations using the SpeckleClient in Python. It includes examples of listing streams, searching streams, creating a new stream, and retrieving a specific stream.

LANGUAGE: python
CODE:
# get a list of your most recent streams
stream_list = client.stream.list()

# search your streams
results = client.stream.search("mech")

# create a stream
new_stream_id = client.stream.create(name="a shiny new stream")

# get a stream
new_stream = client.stream.get(id=new_stream_id)

----------------------------------------

TITLE: RenderMaterial Interface Definition for SpeckleMaterial
DESCRIPTION: Defines the Speckle model for material properties of meshes, including color, opacity, roughness, metalness, and vertexColors.

LANGUAGE: TypeScript
CODE:
interface RenderMaterial {
  id: string;
  color: number;
  opacity: number;
  roughness: number;
  metalness: number;
  vertexColors: boolean;
}

----------------------------------------

TITLE: Querying Timber Walls from Flattened Speckle Data
DESCRIPTION: Example showing how to receive Speckle data, flatten it, and query for specific timber walls using LINQ

LANGUAGE: csharp
CODE:
var data = Helpers.Receive("https://app.speckle.systems/streams/0d3cb7cb52/commits/681cdd572c").Result;
var flatData = data.Flatten().ToList();

var timberWalls = flatData.FindAll(obj => obj is Objects.BuiltElements.Revit.RevitWall wall && wall.type == "Wall - Timber Clad");

----------------------------------------

TITLE: Viewer Core Method Definitions
DESCRIPTION: Core methods for loading, unloading objects and handling viewer lifecycle.

LANGUAGE: typescript
CODE:
cancelLoad(url: string, unload?: boolean): Promise<void>

LANGUAGE: typescript
CODE:
createExtension<T extends Extension>(type: new () => T): T

LANGUAGE: typescript
CODE:
dispose(): void

----------------------------------------

TITLE: Serializing and Deserializing Speckle Data in C#
DESCRIPTION: Demonstrates how to serialize Speckle data to JSON and deserialize it back to objects using the Operations class methods.

LANGUAGE: csharp
CODE:
using Speckle.Core.Api;
using Speckle.Core.Models;

var json = Operations.Serialize(data);

var data = Operations.Deserialize(json);

----------------------------------------

TITLE: Camera Control Methods in TypeScript
DESCRIPTION: Illustrates various methods for controlling the camera, including disabling/enabling rotations, event handling, setting camera planes and views, and toggling between camera types.

LANGUAGE: typescript
CODE:
disableRotations(): void

enableRotations(): void

on<T extends CameraEvent>(
  eventType: T,
  listener: (arg: CameraEventPayload[T]) => void
): void

removeListener(e: CameraEvent, handler: (data: unknown) => void)

setCameraPlanes(targetVolume: Box3, offsetScale: number = 1)

setCameraView(objectIds: string[], transition: boolean, fit?: number): void

setOrthoCameraOn(): void

setPerspectiveCameraOn(): void

toggleCameras(): void

----------------------------------------

TITLE: Sending Data with Multiple Transports in C#
DESCRIPTION: Shows how to send data using multiple transports simultaneously. It uses two ServerTransports and a custom transport to persist the object across different storage layers.

LANGUAGE: csharp
CODE:
var myRevisionId = await Operations.Send(
	myData,
	transports: new ITransport[] {
	  new ServerTransport( args ),
	  new ServerTransport( args ),
	  new MyCustomTransport( args )
  }
);

----------------------------------------

TITLE: Generating PDF Report in Python for Speckle Automate
DESCRIPTION: This function generates a PDF report using the FPDF library and stores it as a file artifact in Speckle Automate. It creates a temporary file, writes analysis results to the PDF, and then stores the file using the automation context.

LANGUAGE: python
CODE:
import os
import tempfile
from fpdf import FPDF

def generate_pdf_report(data, filename):
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_file_path = os.path.join(temp_dir, filename)
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt="Analysis Report", ln=True, align="C")
        pdf.cell(200, 10, txt="Results Summary", ln=True)
        
        for key, value in data.items():
            pdf.cell(200, 10, txt=f"{key}: {value}", ln=True)
        
        pdf.output(temp_file_path)
        automation_context.store_file_result(temp_file_path, "application/pdf")

----------------------------------------

TITLE: Hiding Revit Walls in Speckle Viewer (TypeScript)
DESCRIPTION: This code demonstrates how to hide all Revit wall objects in the Speckle Viewer. It first finds all nodes with the 'RevitWall' speckle type, then uses the FilteringExtension to hide these objects.

LANGUAGE: typescript
CODE:
const wallNodes = viewer.getWorldTree().findAll((node: TreeNode) => {
  if (!node.model.raw.speckle_type) return;
  return node.model.raw.speckle_type.includes("RevitWall");
});

const filteringState = filtering.hideObjects(
  wallNodes.map((node: TreeNode) => node.model.id)
);

----------------------------------------

TITLE: Querying Revit Parameters for Specific Object in GraphQL
DESCRIPTION: This GraphQL query retrieves Revit parameters (family, category, etc.) for a specific object in a given stream. It demonstrates how to use variables and select specific fields in the query.

LANGUAGE: graphql
CODE:
query($myQuery:[JSONObject!]){
    stream(id:"c6b0c4077a"){
        object(id:"0d0a4abc6a5fcc763e6c850dd3d5ecab"){
            totalChildrenCount
            children(query: $myQuery select:["parameters", "speckle_type", "type", "family", "category"]){
                totalCount
                cursor
                objects{
                    id
                    data
                }
            }
        }
    }
}

----------------------------------------

TITLE: Querying Streams Count Using Personal Access Token in JavaScript
DESCRIPTION: Demonstrates how to make an authenticated GraphQL request to the Speckle API using a personal access token to retrieve the total count of user streams. The token must be included in the Authorization header with 'Bearer' prefix.

LANGUAGE: javascript
CODE:
let res = await fetch('/graphql', {
  method: 'POST',
  headers: {
    Authorization: 'Bearer ' + token, // <- Passing in the token!
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({ query: `{ user { id streams { totalCount } } }` })
})

----------------------------------------

TITLE: Creating New Model Version in C# for Speckle Automate
DESCRIPTION: This code snippet demonstrates how to create a new model version in Speckle using C#. It includes functions for creating the version, linking source and target models, and finding the target model ID.

LANGUAGE: csharp
CODE:
var newVersion = await CreateNewVersion(
                           automationContext,
                           versionCollection,
                           targetModelName,
                           revitCategory,
                           objects.Count
                       );

LANGUAGE: csharp
CODE:
// Link source and target models
await LinkSourceAndTargetModels(automationContext, targetModelName, newVersion);

LANGUAGE: csharp
CODE:
private static async Task LinkSourceAndTargetModels(
     AutomationContext context,
     string targetModelName,
     string newVersion
 )
 {
     var targetModelId = await FindTargetModelId(context, targetModelName);

     if (!string.IsNullOrEmpty(targetModelId))
     {
         var modelVersionIdentifier = $"{targetModelId}@{newVersion}";
         context.SetContextView([modelVersionIdentifier], false);
     }
 }
 
 private static async Task<string> FindTargetModelId(
     AutomationContext context,
     string targetModelName
 )
 {
     var project = await context.SpeckleClient.Project.GetWithModels(
         projectId: context.AutomationRunData.ProjectId,
         modelsLimit: 1,
         modelsFilter: new ProjectModelsFilter(
             search: targetModelName,
             contributors: null,
             sourceApps: null,
             ids: null,
             excludeIds: null,
             onlyWithVersions: false
         )
     );

     return project.models?.items.FirstOrDefault()?.id ?? string.Empty;
 }

----------------------------------------

TITLE: Comparing Speckle Models with diff() Method
DESCRIPTION: Diffs two Speckle models provided as URLs. Loads models if not already loaded and supports different visual diff modes.

LANGUAGE: typescript
CODE:
async diff(
    urlA: string,
    urlB: string,
    mode: VisualDiffMode,
    authToken?: string
  ): Promise<DiffResult>

----------------------------------------

TITLE: Asynchronous Tree Traversal in TypeScript
DESCRIPTION: Asynchronously walks the tree, executing a predicate for each node. Yields every 16ms after 100ms of execution to prevent blocking. Returns a Promise resolving to a boolean indicating if the entire tree was walked.

LANGUAGE: typescript
CODE:
async walkAsync(predicate: SearchPredicate, node?: TreeNode): Promise<boolean>

----------------------------------------

TITLE: Grouping Elements by Level in Speckle Data
DESCRIPTION: Complex LINQ query to group and count elements by level, creating a summary of elements per level

LANGUAGE: csharp
CODE:
var elementsByLevel = flatData.FindAll(obj => obj["level"] != null).GroupBy(obj => ((Base)obj["level"])["name"]);
foreach(var grouping in elementsByLevel) {
  Console.WriteLine($"On level {grouping.Key} there are {grouping.Count()} elements.");
}

----------------------------------------

TITLE: Initializing Speckle Viewer Constructor
DESCRIPTION: Constructor for creating a new Viewer instance with container element and parameters.

LANGUAGE: typescript
CODE:
new Viewer(container: HTMLElement, params: ViewerParams)

----------------------------------------

TITLE: Building RenderTree Structure
DESCRIPTION: Asynchronous method to build the render tree using a GeometryConverter. Constructs NodeRenderViews, prepares geometry and materials, and executes transformations.

LANGUAGE: typescript
CODE:
buildRenderTree(geometryConverter: GeometryConverter): Promise<boolean>

----------------------------------------

TITLE: Serializing and Deserializing Base Objects in Speckle Python SDK
DESCRIPTION: This example shows how to use the BaseObjectSerializer to manually serialize and deserialize Base objects in the Speckle Python SDK. It demonstrates traversing a Base object, writing it to JSON, and then reading it back.

LANGUAGE: python
CODE:
from specklepy.objects import Base
from specklepy.serialization.base_object_serializer import BaseObjectSerializer

detached_base = Base()
detached_base.name = "a detached base"

base_obj = Base()
base_obj.name = "my base"
base_obj["@nested"] = detached_base

serializer = BaseObjectSerializer()
hash, obj_dict = serializer.traverse_base(base_obj)

hash, serialized = serializer.write_json(base_obj)
deserialized = serializer.read_json(serialized)

----------------------------------------

TITLE: Filtering Rooms in Speckle Data
DESCRIPTION: LINQ query to filter rooms from flattened Speckle data using type checking

LANGUAGE: csharp
CODE:
var rooms = flatData.FindAll(obj => obj is Objects.BuiltElements.Room);

----------------------------------------

TITLE: Setting up Vue.js App with Speckle Authentication
DESCRIPTION: This code snippet demonstrates how to set up a Vue.js application with Speckle authentication. It includes functions for redirecting to the Speckle auth page, exchanging access codes for tokens, and logging out.

LANGUAGE: JavaScript
CODE:
export const APP_NAME = process.env.VUE_APP_SPECKLE_NAME
export const SERVER_URL = process.env.VUE_APP_SERVER_URL
export const TOKEN = `${APP_NAME}.AuthToken`
export const REFRESH_TOKEN = `${APP_NAME}.RefreshToken`
export const CHALLENGE = `${APP_NAME}.Challenge`

export function goToSpeckleAuthPage() {
  var challenge =
    Math.random()
      .toString(36)
      .substring(2, 15) +
    Math.random()
      .toString(36)
      .substring(2, 15)
  localStorage.setItem(CHALLENGE, challenge)
  window.location = `${SERVER_URL}/authn/verify/${process.env.VUE_APP_SPECKLE_ID}/${challenge}`
}

export function speckleLogOut() {
  localStorage.removeItem(TOKEN)
  localStorage.removeItem(REFRESH_TOKEN)
}

export async function exchangeAccessCode(accessCode) {
  var res = await fetch(`${SERVER_URL}/auth/token/`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      accessCode: accessCode,
      appId: process.env.VUE_APP_SPECKLE_ID,
      appSecret: process.env.VUE_APP_SPECKLE_SECRET,
      challenge: localStorage.getItem(CHALLENGE)
    })
  })
  var data = await res.json()
  if (data.token) {
    localStorage.removeItem(CHALLENGE)
    localStorage.setItem(TOKEN, data.token)
    localStorage.setItem(REFRESH_TOKEN, data.refreshToken)
  }
  return data
}

----------------------------------------

TITLE: Viewer Utility Accessors
DESCRIPTION: Getter methods for accessing Utils and World instances.

LANGUAGE: typescript
CODE:
get Utils(): Utils

LANGUAGE: typescript
CODE:
get World(): World

----------------------------------------

TITLE: Constructor Implementation - TopLevelAccelerationStructure
DESCRIPTION: Constructor that initializes the top level acceleration structure with a group of BatchObjects

LANGUAGE: typescript
CODE:
constructor(batchObjects: BatchObject[])

----------------------------------------

TITLE: Coloring Objects by Properties in Speckle Viewer (TypeScript)
DESCRIPTION: This code demonstrates how to color objects based on their properties in the Speckle Viewer. It first retrieves the object properties, then finds a specific property ('level.name') and sets a color filter based on this property.

LANGUAGE: typescript
CODE:
const properties: PropertyInfo[] = await viewer.getObjectProperties();

/** Find the 'level.name' property info*/
const propertyInfo: PropertyInfo = properties.find((value) => {
  return value.key === "level.name";
}) as PropertyInfo;

const filteringState = filtering.setColorFilter(propertyInfo);

----------------------------------------

TITLE: Implementing Speckle Stream Search in Vue.js
DESCRIPTION: This code snippet shows how to implement a stream search functionality in a Vue.js component. It includes an autocomplete input field that fetches and displays stream search results from a Speckle server.

LANGUAGE: Vue.js
CODE:
<template>
  <v-autocomplete
    v-model="selectedSearchResult"
    :items="streams.items"
    :search-input.sync="search"
    no-filter
    counter="2"
    rounded
    filled
    dense
    flat
    hide-no-data
    hide-details
    placeholder="Streams Search"
    item-text="name"
    item-value="id"
    return-object
    clearable
    append-icon=""
    @update:search-input="debounceInput"
  >
    <template #item="{ item }">
      <v-list-item-content>
        <v-list-item-title>
          <v-row class="pa-0 ma-0">
            {{ item.name }}
            <v-spacer></v-spacer>
            <span class="streamid">{{ item.id }}</span>
          </v-row>
        </v-list-item-title>
        <v-list-item-subtitle class="caption">
          Updated
          <time-ago :datetime="item.updatedAt"></time-ago>
        </v-list-item-subtitle>
      </v-list-item-content>
    </template>
  </v-autocomplete>
</template>

<script>
import { debounce } from "debounce"
import { searchStreams } from "@/speckleUtils"
import { TimeAgo } from 'vue2-timeago'

export default {
  name: "StreamSearch",
  data: () => ({
    search: "",
    streams: { items: [] },
    selectedSearchResult: null
  }),
  components: { TimeAgo },
  watch: {
    selectedSearchResult(val) {
      this.search = ""
      this.streams.items = []
      if (val) this.$emit("selected", val)
    }
  },
  methods: {
    async fetchSearchResults(e) {
      if (!e || e?.length < 3) return
      var json = await searchStreams(e)
      this.streams = json.data.streams
    },
    debounceInput: debounce(function(e) {
      this.fetchSearchResults(e)
    }, 300)
  }
}
</script>

----------------------------------------

TITLE: Computing Node Transformations
DESCRIPTION: Computes the final world space transformation matrix for a given TreeNode. Only affects instanced nodes as non-instanced nodes use world space coordinates.

LANGUAGE: typescript
CODE:
computeTransform(node: TreeNode): Matrix4

----------------------------------------

TITLE: Finding Nodes in WorldTree Using Predicate in TypeScript
DESCRIPTION: Searches the tree starting at a specified node (or root if not provided) using a predicate function. Returns an array of TreeNodes that satisfy the predicate.

LANGUAGE: typescript
CODE:
findAll(predicate: SearchPredicate, node?: TreeNode): TreeNode[]

----------------------------------------

TITLE: Filtering State Type Definition
DESCRIPTION: Type definition for the filtering state object that tracks selected, hidden, isolated objects and color groups.

LANGUAGE: typescript
CODE:
type FilteringState = {
  selectedObjects?: string[];
  hiddenObjects?: string[];
  isolatedObjects?: string[];
  colorGroups?: Record<string, string>[];
  userColorGroups?: { ids: string[]; color: string }[];
  activePropFilterKey?: string;
  passMin?: number | null;
  passMax?: number | null;
};

----------------------------------------

TITLE: Defining Chunkable and Detachable Attributes in Speckle Python SDK
DESCRIPTION: This snippet demonstrates how to define chunkable and detachable attributes when subclassing Base in the Speckle Python SDK. It shows how to set up chunking for large datasets and mark specific attributes for detachment during serialization.

LANGUAGE: python
CODE:
from specklepy.objects import Base
from typing import List

# members that are chunked upon sending are stored in a dictionary
# with the name as the key and the maximum chunk size as the value
CHUNKABLE_PROPS = {
    "vertices": 1000,
    "faces": 100,
    "colors": 100,
    "textureCoordinates": 100,
    "test_bases": 10,
}

# detachable members are just added to an internal set by name
DETACHABLE = {"detach_this", "origin"}

# you can pass a chunkables dict and a detachables as keyword arguments when writing your class
class FakeMesh(Base, chunkable=CHUNKABLE_PROPS, detachable=DETACHABLE):
    vertices: List[float] = None
    faces: List[int] = None
    colors: List[int] = None
    textureCoordinates: List[float] = None
    test_bases: List[Base] = None
    detach_this: Base = None
    _origin: Point = None

    # properties are also picked up and serialised as you'd expect
    @property
    def origin(self):
        return self._origin

    @origin.setter
    def origin(self, value: Point):
        self._origin = value

----------------------------------------

TITLE: Initializing RenderTree Constructor
DESCRIPTION: Constructor for creating a new RenderTree instance from a WorldTree and subtree root node. Recommended to use getRenderTree method from WorldTree instead of direct construction.

LANGUAGE: typescript
CODE:
constructor(tree: WorldTree, subtreeRoot: TreeNode)

----------------------------------------

TITLE: Fast Copying Material Properties in SpeckleMaterial
DESCRIPTION: Copies properties from one Material to another, restricted to what the viewer needs for optimal performance.

LANGUAGE: TypeScript
CODE:
fastCopy(from: Material, to: Material)

----------------------------------------

TITLE: Isolate Objects Method
DESCRIPTION: Method to isolate specified objects in the viewer while optionally hiding or ghosting others.

LANGUAGE: typescript
CODE:
isolateObjects(
    objectIds: string[],
    stateKey: string = null,
    includeDescendants = true,
    ghost = true
  ): FilteringState

----------------------------------------

TITLE: Implementing Ray Intersection Methods in TypeScript
DESCRIPTION: Defines two overloaded intersectRay methods for scene intersection using a provided Ray. Utilizes acceleration structures for optimized performance.

LANGUAGE: typescript
CODE:
intersectRay(
    scene: Scene,
    camera: Camera,
    ray: Ray,
    castLayers: ObjectLayers.STREAM_CONTENT_MESH,
    nearest?: boolean,
    bounds?: Box3,
    firstOnly?: boolean,
    tasOnly?: boolean
  ): Array<ExtendedMeshIntersection> | null
intersectRay(
    scene: Scene,
    camera: Camera,
    ray: Ray,
    castLayers?: Array<ObjectLayers>,
    nearest?: boolean,
    bounds?: Box3,
    firstOnly?: boolean,
    tasOnly?: boolean
  ): Array<ExtendedIntersection> | null

----------------------------------------

TITLE: Defining NodeData Interface in TypeScript
DESCRIPTION: Interface defining the data payload for each TreeNode, including properties like id, raw data, children, atomic flag, and optional rendering information.

LANGUAGE: typescript
CODE:
interface NodeData {
  id: string;
  raw: { [prop: string]: any };
  children: TreeNode[];
  atomic: boolean;
  subtreeId?: number;
  renderView?: NodeRenderView;
  instanced?: boolean;
}

----------------------------------------

TITLE: Accessing Base Uniforms in SpeckleMaterial
DESCRIPTION: Gets the base three.js uniforms for this material. For example, SpeckleStandardMaterial has the base uniforms as ShaderLib.standard.uniforms.

LANGUAGE: TypeScript
CODE:
protected get baseUniforms(): { [uniform: string]: IUniform }

----------------------------------------

TITLE: Hide Objects Method
DESCRIPTION: Method to hide specified objects in the viewer with options for including descendants and ghosting other objects.

LANGUAGE: typescript
CODE:
hideObjects(
    objectIds: string[],
    stateKey: string = null,
    includeDescendants = false,
    ghost = false
  ): FilteringState

----------------------------------------

TITLE: Implementing Scene Intersection Methods in TypeScript
DESCRIPTION: Defines two overloaded intersect methods for scene intersection using NDC points. Uses acceleration structures for optimized performance compared to standard Three.js raycasters.

LANGUAGE: typescript
CODE:
intersect(
    scene: Scene,
    camera: Camera,
    point: Vector2,
    castLayers: ObjectLayers.STREAM_CONTENT_MESH,
    nearest?: boolean,
    bounds?: Box3,
    firstOnly?: boolean,
    tasOnly?: boolean
  ): Array<ExtendedMeshIntersection> | null

intersect(
    scene: Scene,
    camera: Camera,
    point: Vector2,
    castLayers?: Array<ObjectLayers>,
    nearest?: boolean,
    bounds?: Box3,
    firstOnly?: boolean,
    tasOnly?: boolean
  ): Array<ExtendedIntersection> | null

----------------------------------------

TITLE: Shapecast Implementation
DESCRIPTION: Method for performing complex shape-based intersection tests against the BVH.

LANGUAGE: typescript
CODE:
shapecast(
    callbacks: {
      intersectsBounds: (
        box: Box3,
        isLeaf: boolean,
        score: number | undefined,
        depth: number,
        nodeIndex: number
      ) => ShapecastIntersection | boolean

      traverseBoundsOrder?: (box: Box3) => number
    } & (
      | {
          intersectsRange: (
            triangleOffset: number,
            triangleCount: number,
            contained: boolean,
            depth: number,
            nodeIndex: number,
            box: Box3
          ) => boolean
        }
      | {
          intersectsTriangle: (
            triangle: ExtendedTriangle,
            triangleIndex: number,
            contained: boolean,
            depth: number
          ) => boolean | void
        }
    )
  ): boolean

----------------------------------------

TITLE: Updating SpeckleControls
DESCRIPTION: Abstract method for the control's update loop, optionally accepting a frame delta time.

LANGUAGE: typescript
CODE:
abstract update(delta?: number): boolean

----------------------------------------

TITLE: Reset Filters Method
DESCRIPTION: Method to remove all active filters from the viewer.

LANGUAGE: typescript
CODE:
resetFilters(): FilteringState

----------------------------------------

TITLE: Set Color Filter Method
DESCRIPTION: Method to apply a color filter based on property information with optional ghosting.

LANGUAGE: typescript
CODE:
setColorFilter(prop: PropertyInfo, ghost = true): FilteringState

----------------------------------------

TITLE: Initializing BatchObject Constructor
DESCRIPTION: Constructor for creating a new BatchObject instance, which populates/constructs a batch object with a render view and batch index.

LANGUAGE: typescript
CODE:
constructor(renderView: NodeRenderView, batchIndex: number)

----------------------------------------

TITLE: Attaching Annotations to Objects in C#
DESCRIPTION: Shows how to use AutomationContext to attach error, warning, and info annotations to objects in C#. This example demonstrates the C# syntax for each annotation type, including specifying object IDs and messages.

LANGUAGE: csharp
CODE:
public static void Run(AutomationContext context)
{
    context.AttachErrorToObjects(
        "Structural Analysis",
        new[] { "obj_id_1", "obj_id_2" },
        "Beam span exceeds maximum allowable length"
    );
    
    context.AttachWarningToObjects(
        "Load Analysis",
        new[] { "obj_id_3" },
        "Load approaching maximum capacity"
    );
    
    context.AttachInfoToObjects(
        "Cost Analysis",
        new[] { "obj_id_4", "obj_id_5" },
        "Material cost optimized"
    );
}

----------------------------------------

TITLE: Initializing FilteringExtension in Speckle Viewer (TypeScript)
DESCRIPTION: This snippet shows how to create and add the FilteringExtension to the Speckle Viewer. The extension must be added at initialization time.

LANGUAGE: typescript
CODE:
const filteringExtension = viewer.createExtension(FilteringExtension);

----------------------------------------

TITLE: Set User Object Colors Method
DESCRIPTION: Method to apply custom colors to groups of objects, optimized for performance.

LANGUAGE: typescript
CODE:
setUserObjectColors(
    groups: { objectIds: string[]; color: string }[]
): FilteringState

----------------------------------------

TITLE: GeometryAttributes Enum Definition
DESCRIPTION: Enumerates the supported geometry attributes like position, color, normal, UV, tangent and index.

LANGUAGE: typescript
CODE:
enum GeometryAttributes {
  POSITION = "POSITION",
  COLOR = "COLOR",
  NORMAL = "NORMAL",
  UV = "UV",
  TANGENT = "TANGENT",
  INDEX = "INDEX",
}

----------------------------------------

TITLE: Fitting SpeckleControls to Sphere
DESCRIPTION: Abstract method for positioning and orienting controls according to an input Sphere.

LANGUAGE: typescript
CODE:
abstract fitToSphere(sphere: Sphere): void

----------------------------------------

TITLE: Viewer Type Definitions
DESCRIPTION: TypeScript interfaces and enums defining viewer configuration options and events.

LANGUAGE: typescript
CODE:
interface LightConfiguration {
  enabled?: boolean;
  castShadow?: boolean;
  intensity?: number;
  color?: number;
  indirectLightIntensity?: number;
  shadowcatcher?: boolean;
}

LANGUAGE: typescript
CODE:
enum ObjectLayers {
  STREAM_CONTENT_MESH = 10,
  STREAM_CONTENT_LINE = 11,
  STREAM_CONTENT_POINT = 12,
  STREAM_CONTENT_TEXT = 13,
  STREAM_CONTENT_POINT_CLOUD = 14,

  NONE = 0,
  STREAM_CONTENT = 1,
  PROPS = 2,
  SHADOWCATCHER = 3,
  OVERLAY = 4,
  MEASUREMENTS = 5,
}

----------------------------------------

TITLE: Defining a Speckle Box Class in C#
DESCRIPTION: Implementation of a Box class inheriting from Base and implementing multiple interfaces for volume, area, and bounding box functionality.

LANGUAGE: csharp
CODE:
public class Box : Base, IHasVolume, IHasArea, IHasBoundingBox
{
  public Plane basePlane { get; set; }

  public Interval xSize { get; set; }

  public Interval ySize { get; set; }

  public Interval zSize { get; set; }

  public Box bbox { get; }

  public double area { get; set; }

  public double volume { get; set; }

  public Box() { }

  public Box(Plane basePlane, Interval xSize, Interval ySize, Interval zSize, string units = Units.Meters, string applicationId = null)
  {
    this.basePlane = basePlane;
    this.xSize = xSize;
    this.ySize = ySize;
    this.zSize = zSize;
    this.applicationId = applicationId;
    this.units = units;
  }
}

----------------------------------------

TITLE: GeometryType Enum Definition
DESCRIPTION: Defines the supported geometry types in the viewer including mesh, line, point, point cloud and text.

LANGUAGE: typescript
CODE:
enum GeometryType {
  MESH,
  LINE,
  POINT,
  POINT_CLOUD,
  TEXT,
}

----------------------------------------

TITLE: Setting Point Size in SpeckleMaterial
DESCRIPTION: Sets the point size for point materials.

LANGUAGE: TypeScript
CODE:
protected set pointSize(value: number)

----------------------------------------

TITLE: Searching WorldTree by ID in TypeScript
DESCRIPTION: Demonstrates how to search for nodes in the WorldTree using a specific ID. This method returns an array of nodes to handle instances.

LANGUAGE: typescript
CODE:
const nodes = viewer.getWorldTree().findId('6ddd42ca007461a3a33375b193bdf9b0')

----------------------------------------

TITLE: Converting Revit Beam to Speckle Object
DESCRIPTION: Specialized conversion method for transforming Revit beam elements into Speckle beam objects with properties and geometry.

LANGUAGE: csharp
CODE:
private RevitBeam BeamToSpeckle(DB.FamilyInstance revitBeam)
{
  var baseGeometry = LocationToSpeckle(revitBeam);
  var baseLine = baseGeometry as ICurve;
  if (baseLine == null)
  {
    throw new Exception("Only line based Beams are currently supported.");
  }

  var speckleBeam = new RevitBeam();
  speckleBeam.type = Doc.GetElement(revitBeam.GetTypeId()).Name;
  speckleBeam.baseLine = baseLine;
  speckleBeam.level = ConvertAndCacheLevel(revitBeam, BuiltInParameter.INSTANCE_REFERENCE_LEVEL_PARAM);
  speckleBeam["@displayMesh"] = GetElementMesh(revitBeam);

  GetAllRevitParamsAndIds(speckleBeam, revitBeam);

  return speckleBeam;
}

----------------------------------------

TITLE: NodeRenderData Interface Definition
DESCRIPTION: Defines the core data structure for renderable objects in the viewer, including geometry, materials and display properties.

LANGUAGE: typescript
CODE:
interface NodeRenderData {
  id: string;
  subtreeId: number;
  speckleType: SpeckleType;
  geometry: GeometryData;
  renderMaterial: RenderMaterial;
  displayStyle: DisplayStyle;
}

----------------------------------------

TITLE: Default Selection Extension Options in TypeScript
DESCRIPTION: Default configuration for selection appearance including color, opacity, and material properties.

LANGUAGE: typescript
CODE:
const DefaultSelectionExtensionOptions: SelectionExtensionOptions = {
  selectionMaterialData: {
    id: MathUtils.generateUUID(),
    color: 0x047efb,
    opacity: 1,
    roughness: 1,
    metalness: 0,
    vertexColors: false,
    lineWeight: 1,
    stencilOutlines: true,
    pointSize: 4,
  },
};

----------------------------------------

TITLE: Generic Node Search in WorldTree using TypeScript
DESCRIPTION: Demonstrates how to perform a generic search in the WorldTree using a custom predicate function to find nodes meeting specific criteria.

LANGUAGE: typescript
CODE:
const nodes = viewer.getWorldTree().findAll((node: TreeNode) => {
    if(<criteria>) return true
})

----------------------------------------

TITLE: Revit Converter Implementation
DESCRIPTION: Example of implementing conversion methods in the Revit converter, showing type checking and conversion routing.

LANGUAGE: csharp
CODE:
public Base ConvertToSpeckle(object @object)
{
  Base returnObject = null;
  switch (@object)
  {
    case DB.DetailCurve o:
      returnObject = DetailCurveToSpeckle(o);
      break;
    case DB.DirectShape o:
      returnObject = DirectShapeToSpeckle(o);
      break;
    case DB.FamilyInstance o:
      returnObject = FamilyInstanceToSpeckle(o);
      break;
    case DB.Floor o:
      returnObject = FloorToSpeckle(o);
      break;
    default:
      ConversionErrors.Add(new Error("Type not supported", $"Cannot convert {@object.GetType()} to Speckle"));
      returnObject = null;
      break;
  }

  return returnObject;
}

----------------------------------------

TITLE: Initializing NodeRenderView Constructor
DESCRIPTION: Creates a new NodeRenderView instance using NodeRenderData to populate/construct the node render view.

LANGUAGE: typescript
CODE:
constructor(data: NodeRenderData)

----------------------------------------

TITLE: FilterMaterialType Enum Definition for SpeckleMaterial
DESCRIPTION: Enumerates the available filter material types: GHOST, GRADIENT, COLORED, and HIDDEN.

LANGUAGE: TypeScript
CODE:
enum FilterMaterialType {
  GHOST,
  GRADIENT,
  COLORED,
  HIDDEN,
}

----------------------------------------

TITLE: Abstract Loader Class Definition (TypeScript)
DESCRIPTION: Defines the abstract Loader class with methods for loading, canceling, and disposing of data.

LANGUAGE: typescript
CODE:
public abstract load(): Promise<boolean>
public abstract cancel()
public abstract dispose()

----------------------------------------

TITLE: Schema Attributes Example for Beam Class
DESCRIPTION: Shows how to add schema information attributes to classes for documentation and parameters. Includes example of handling schema deprecation.

LANGUAGE: csharp
CODE:
[SchemaInfo("Beam", "Creates a Speckle beam", "BIM", "Structure")]
public Beam([SchemaMainParam] ICurve baseLine)
{
    this.baseLine = baseLine;
}

public double width;
public double height;

[SchemaDeprecated, SchemaInfo("Beam", "Creates a Speckle beam", "BIM", "Structure")]
public Beam([SchemaMainParam] ICurve baseLine)
{
    this.baseLine = baseLine;
    this.height = 1.0;
    this.width = 1.0;
}

[SchemaInfo("Beam", "Creates a Speckle beam", "BIM", "Structure")]
public Beam([SchemaMainParam] ICurve baseLine, double height, double width)
{
    this.baseLine = baseLine;
    this.height = height;
    this.width = width;
}

----------------------------------------

TITLE: Implementing Object Accessors
DESCRIPTION: Getter methods for accessing various properties of the batch object including bounds, acceleration structure, and render view.

LANGUAGE: typescript
CODE:
get aabb(): Box3

LANGUAGE: typescript
CODE:
get accelerationStructure(): AccelerationStructure

LANGUAGE: typescript
CODE:
get batchIndex(): number

LANGUAGE: typescript
CODE:
get localOrigin(): Vector3

LANGUAGE: typescript
CODE:
get renderView(): NodeRenderView

----------------------------------------

TITLE: Geometric Query Methods
DESCRIPTION: Methods for querying the BVH structure including bounding box and vertex position retrieval.

LANGUAGE: typescript
CODE:
getBoundingBox(target?: Box3): Box3

LANGUAGE: typescript
CODE:
getVertexAtIndex(index: number): Vector3

----------------------------------------

TITLE: Loading OBJ Data from String or ArrayBuffer
DESCRIPTION: Demonstrates loading OBJ data directly from a string or ArrayBuffer content instead of a URL. Uses ObjLoader with a user-defined ID to load the data.

LANGUAGE: typescript
CODE:
const objData:string | ArrayBuffer = '<your OBJ resource data>'
/** Create a loader for the .obj data */
const loader = new ObjLoader(viewer.getWorldTree(), '<user defined id>', objData);
/** Load the obj data */
await viewer.loadObject(loader, true);

----------------------------------------

TITLE: Defining Automation Run Metadata Schema in JSON
DESCRIPTION: JSON schema specification that defines the structure and requirements for automation function run metadata. Includes properties for Speckle token, function inputs, and detailed automation run data including project, model, and version information.

LANGUAGE: json
CODE:
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://automate.speckle.systems/automationfunctionrunmetadata.schema.json",
  "title": "Automation Run Metadata",
  "description": "The metadata describing an Automation Function Run.",
  "type": "object",
  "properties": {
    "speckleToken": {
      "type": "string",
      "description": "The token for accessing the Speckle API. This Token SHALL be limited in scope to the Speckle model which triggered the Function to run as part of an Automation."
    },
    "functionInputs": {
      "type": "object",
      "description": "The configuration values for a Function within an Automation.",
      "properties": {
        "additionalProperties": "true"
      }
    },
    "automationRunData": {
      "type": "object",
      "description": "The metadata describing the Automation Run.",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "The ID of the Speckle project which contains the Speckle model which is associated with the Automation."
        },
        "modelId": {
          "type": "string",
          "description": "The ID of the Speckle model which is associated with the Automation. A change to this model may have caused the Automation to run."
        },
        "branchName": {
          "type": "string",
          "description": "The name of the Speckle branch. 'Branch' is now known as 'model' except in the Speckle API, where 'branch' wording is retained to provide backwards compatibility and ensure ongoing stability of the API."
        },
        "versionId": {
          "type": "string",
          "description": "The version of the Speckle model. This is the version which was created as a result of the change which triggered the Automation to run. Or, in the case of an Automation being manually triggered by a user, it is the current version of the Speckle model."
        },
        "speckleServerUrl": {
          "type": "string",
          "description": "The URL of the Speckle Server which contains the Speckle project and Speckle model which is associated with the Automation."
        },
        "automationId": {
          "type": "string",
          "description": "The ID of the Automation which is being run."
        },
        "automationRevisionId": {
          "type": "string",
          "description": "The ID of the revision of the Automation which is being run."
        },
        "automationRunId": {
          "type": "string",
          "description": "The ID which defines the current run of the Automation. This is a unique ID which is generated for each run of an Automation."
        },
        "functionName": {
          "type": "string",
          "description": "The name of the Function which is being run."
        },
        "functionId": {
          "type": "string",
          "description": "A unique id of the Function which is being run. This includes a hyphen concatenated string containing the Automation ID, the Automation version ID, the Function Id, the Function Version ID, and a unique number which identifies this running instance within the context of the running Automation."
        },
        "functionLogo": {
          "type": "string",
          "description": "Base64 encoded string of the Function logo."
        }
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Transformation Methods
DESCRIPTION: Methods for building acceleration structures and performing TRS (Translation, Rotation, Scale) transformations on the object.

LANGUAGE: typescript
CODE:
buildAccelerationStructure(bvh?: MeshBVH)

LANGUAGE: typescript
CODE:
public transformTRS(
    translation: VectorLike,
    euler?: VectorLike,
    scale?: VectorLike,
    pivot?: VectorLike
  )

----------------------------------------

TITLE: Getting SpeckleControls Target
DESCRIPTION: Abstract method for getting the current goal look position of the control's target camera.

LANGUAGE: typescript
CODE:
abstract getTarget(): Vector3

----------------------------------------

TITLE: LoaderEventPayload Interface in TypeScript
DESCRIPTION: Interface defining the payload types for different loader events, mapping event types to their respective argument structures.

LANGUAGE: typescript
CODE:
interface LoaderEventPayload {
  [LoaderEvent.LoadProgress]: { progress: number; id: string }
  [LoaderEvent.LoadCancelled]: string
  [LoaderEvent.LoadWarning]: { message: string }
}

----------------------------------------

TITLE: StencilOutlineType Enum Definition for SpeckleMaterial
DESCRIPTION: Enumerates the types of stencil outlines: NONE, OVERLAY, and OUTLINE_ONLY.

LANGUAGE: TypeScript
CODE:
enum StencilOutlineType {
  NONE,
  OVERLAY,
  OUTLINE_ONLY,
}

----------------------------------------

TITLE: Defining Type Definitions
DESCRIPTION: Type definitions for vector-like objects and instanced batch objects used throughout the class.

LANGUAGE: typescript
CODE:
type VectorLike = { x: number; y: number; z?: number; w?: number };

LANGUAGE: typescript
CODE:
class InstancedBatchObject extends BatchObject

----------------------------------------

TITLE: Set Section Box Method
DESCRIPTION: Method to set the section box bounds with an optional offset tolerance.

LANGUAGE: typescript
CODE:
setBox(targetBox: Box3, offset = 0): void

----------------------------------------

TITLE: Abstract Dispose Method in TypeScript
DESCRIPTION: Abstract method for disposing of the loader and its allocated resources.

LANGUAGE: typescript
CODE:
abstract dispose()

----------------------------------------

TITLE: DisplayStyle Interface Definition for SpeckleMaterial
DESCRIPTION: Defines the Speckle model for material properties on lines, including id, color, lineWeight, and optional opacity.

LANGUAGE: TypeScript
CODE:
interface DisplayStyle {
  id: string;
  color: number;
  lineWeight: number;
  opacity?: number;
}

----------------------------------------

TITLE: Filtering State Accessor
DESCRIPTION: Getter method that returns the current filtering state object.

LANGUAGE: typescript
CODE:
get filteringState(): FilteringState

----------------------------------------

TITLE: DiffResult Interface Definition
DESCRIPTION: Defines the structure for diff comparison results, containing arrays of unchanged, added, removed, and modified nodes.

LANGUAGE: typescript
CODE:
interface DiffResult {
  unchanged: Array<TreeNode>;
  added: Array<TreeNode>;
  removed: Array<TreeNode>;
  modified: Array<Array<TreeNode>>;
}

----------------------------------------

TITLE: Abstract Load Method in TypeScript
DESCRIPTION: Abstract method that handles resource loading. Returns a Promise resolving to a boolean indicating success or failure of the loading process.

LANGUAGE: typescript
CODE:
abstract load(): Promise<boolean>

----------------------------------------

TITLE: Defining Custom Uniforms in SpeckleMaterial
DESCRIPTION: Defines the custom uniforms for the material.

LANGUAGE: TypeScript
CODE:
protected get uniformsDef(): Uniforms

----------------------------------------

TITLE: Remove Color Filter Method
DESCRIPTION: Method to remove any active color filters from the viewer.

LANGUAGE: typescript
CODE:
removeColorFilter(): FilteringState

----------------------------------------

TITLE: Defining IntersectionQuery Interface in TypeScript
DESCRIPTION: Defines the structure for intersection queries, including point coordinates, optional tolerance, and operation type (Occlusion or Pick).

LANGUAGE: typescript
CODE:
interface IntersectionQuery extends Query {
  point: { x: number; y: number; z?: number; w?: number }
  tolerance?: number
  operation: 'Occlusion' | 'Pick'
}

----------------------------------------

TITLE: Implementing enabled accessor in Extension class (TypeScript)
DESCRIPTION: Defines a getter and setter for the 'enabled' property, which all extensions should implement to handle enabling/disabling themselves.

LANGUAGE: typescript
CODE:
get enabled(): boolean
set enabled(value: boolean)

----------------------------------------

TITLE: Accessing Vertex Program in SpeckleMaterial
DESCRIPTION: Gets the vertex program source code for the material.

LANGUAGE: TypeScript
CODE:
protected get vertexProgram(): string

----------------------------------------

TITLE: Remove User Object Colors Method
DESCRIPTION: Method to remove any user-defined color filters from objects.

LANGUAGE: typescript
CODE:
removeUserObjectColors(): FilteringState

----------------------------------------

TITLE: Defining Transform Properties
DESCRIPTION: Properties for handling object transformations including the immediate transformation matrix and its inverse.

LANGUAGE: typescript
CODE:
transform: Matrix4;

LANGUAGE: typescript
CODE:
transformInv: Matrix4;

----------------------------------------

TITLE: Implementing onLateUpdate method in Extension class (TypeScript)
DESCRIPTION: Defines the onLateUpdate method, which is called after the viewer's update. It takes an optional deltaTime parameter.

LANGUAGE: typescript
CODE:
onLateUpdate(deltaTime?: number)

----------------------------------------

TITLE: Implementing onResize method in Extension class (TypeScript)
DESCRIPTION: Defines the onResize method, which is called whenever a resize event occurs in the viewer.

LANGUAGE: typescript
CODE:
onResize()

----------------------------------------

TITLE: Show Objects Method
DESCRIPTION: Method to make specified objects visible in the viewer.

LANGUAGE: typescript
CODE:
showObjects(
    objectIds: string[],
    stateKey: string = null,
    includeDescendants = false
  ): FilteringState

----------------------------------------

TITLE: Defining Enabled Accessor in SpeckleControls
DESCRIPTION: Abstract accessor for getting and setting the enabled state of the controls.

LANGUAGE: typescript
CODE:
abstract get enabled(): boolean
abstract set enabled(value: boolean)

----------------------------------------

TITLE: Adding Camera Controller to Speckle Viewer in TypeScript
DESCRIPTION: This snippet shows how to add a camera controller extension to the Speckle viewer, allowing user control over the camera.

LANGUAGE: typescript
CODE:
/** Add the stock camera controller extension */
viewer.createExtension(CameraController);

----------------------------------------

TITLE: Implementing onEarlyUpdate method in Extension class (TypeScript)
DESCRIPTION: Defines the onEarlyUpdate method, which is called before the viewer's update. It takes an optional deltaTime parameter.

LANGUAGE: typescript
CODE:
onEarlyUpdate(deltaTime?: number)

----------------------------------------

TITLE: Un-Isolate Objects Method
DESCRIPTION: Method to remove isolation from specified objects and restore visibility to others.

LANGUAGE: typescript
CODE:
unIsolateObjects(
    objectIds: string[],
    stateKey: string = null,
    includeDescendants = true,
    ghost = true
  ): FilteringState

----------------------------------------

TITLE: Defining Options Accessor in SpeckleControls
DESCRIPTION: Abstract accessor for getting and setting options for the controls implementation.

LANGUAGE: typescript
CODE:
abstract get options(): Partial<Record<string, unknown>>
abstract set options(value: Partial<Record<string, unknown>>)

----------------------------------------

TITLE: Defining Batch-Related Types in TypeScript
DESCRIPTION: Declares types and interfaces related to the Batch interface, including BatchUpdateRange, DrawGroup, and various Batch implementations.

LANGUAGE: TypeScript
CODE:
interface BatchUpdateRange {
  offset: number;
  count: number;
  material?: Material;
  materialOptions?: FilterMaterialOptions;
}

interface DrawGroup {
  start: number;
  count: number;
  materialIndex?: number;
}

class LineBatch implements Batch {}
class MeshBatch implements Batch {}
class InstancedMeshBatch implements Batch {}
class PointBatch implements Batch {}
class TextBatch implements Batch {}

----------------------------------------

TITLE: Defining viewer property in Extension class (TypeScript)
DESCRIPTION: Declares a protected property 'viewer' of type IViewer, which holds a reference to the viewer implementation instance that spawned the extension.

LANGUAGE: typescript
CODE:
protected viewer: IViewer

----------------------------------------

TITLE: Configuring Selection Extension Options in TypeScript
DESCRIPTION: Getter and setter for configuring the selection extension options including materials and visual styles.

LANGUAGE: typescript
CODE:
get options(): SelectionExtensionOptions
set options(value: SelectionExtensionOptions)

----------------------------------------

TITLE: Passes Accessor Implementation
DESCRIPTION: Getter that returns the current ordered pass list.

LANGUAGE: typescript
CODE:
get passes(): Array<GPass>;

----------------------------------------

TITLE: Implementing Batch Accessors in TypeScript
DESCRIPTION: Defines accessor methods for the Batch interface, including bounds, drawCalls, groups, materials, minDrawCalls, triCount, and vertCount.

LANGUAGE: TypeScript
CODE:
get bounds(): Box3
get drawCalls(): number
get groups(): DrawGroup[]
get materials(): Material[]
get minDrawCalls(): number
get triCount(): number
get vertCount(): number

----------------------------------------

TITLE: LoaderEvent Enum Definition in TypeScript
DESCRIPTION: Enumeration of basic events that Loader implementations should use, including load progress, cancellation, and warnings.

LANGUAGE: typescript
CODE:
enum LoaderEvent {
  LoadProgress = 'load-progress',
  LoadCancelled = 'load-cancelled',
  LoadWarning = 'load-warning'
}

----------------------------------------

TITLE: Retrieving Selected Objects in TypeScript
DESCRIPTION: Method to get the currently selected raw objects.

LANGUAGE: typescript
CODE:
getSelectedObjects(): Array<Record<string, unknown>>

----------------------------------------

TITLE: SpeckleRenderer Property Definition
DESCRIPTION: Protected property referencing the hosting speckle renderer instance.

LANGUAGE: typescript
CODE:
protected speckleRenderer: SpeckleRenderer;

----------------------------------------

TITLE: Get Pass Method Implementation
DESCRIPTION: Method that retrieves all passes with a specified name.

LANGUAGE: typescript
CODE:
getPass(name: string): GPass[]

----------------------------------------

TITLE: Abstract Cancel Method in TypeScript
DESCRIPTION: Abstract method for canceling any ongoing loading process and performing cleanup.

LANGUAGE: typescript
CODE:
abstract cancel()

----------------------------------------

TITLE: Selection Extension Options Interface in TypeScript
DESCRIPTION: Interface defining configuration options for selection and hover visual effects.

LANGUAGE: typescript
CODE:
interface SelectionExtensionOptions {
  selectionMaterialData: RenderMaterial & DisplayStyle & MaterialOptions;
  hoverMaterialData?: RenderMaterial & DisplayStyle & MaterialOptions;
}

----------------------------------------

TITLE: Copying Backup File from pgAdmin Container
DESCRIPTION: This command copies a backup file from the pgAdmin container to the local machine using Docker's cp command.

LANGUAGE: shell
CODE:
docker cp speckle-server-pgadmin-1:'/var/lib/pgadmin/storage/admin_localhost.com/BACKUP_FILE_NAME' .

----------------------------------------

TITLE: Pipeline Render Lifecycle Methods
DESCRIPTION: Methods for handling pipeline render lifecycle events.

LANGUAGE: typescript
CODE:
onAfterPipelineRender(): void

LANGUAGE: typescript
CODE:
onBeforePipelineRender(): void

----------------------------------------

TITLE: Defining Measurement Base Class in TypeScript
DESCRIPTION: Abstract base class that extends Object3D for all measurement types.

LANGUAGE: typescript
CODE:
abstract class Measurement extends Object3D

----------------------------------------

TITLE: Accessing Camera Controller Properties in TypeScript
DESCRIPTION: Demonstrates how to access various properties of the CameraController, including aspect ratio, controls, enabled state, field of view, options, and rendering camera.

LANGUAGE: typescript
CODE:
get aspect(): number

get controls(): SpeckleControls

get enabled(): boolean
set enabled(val: boolean)

get fieldOfView(): number
set fieldOfView(value: number)

get options(): CameraControllerOptions
set options(value: CameraControllerOptions)

get renderingCamera(): PerspectiveCamera | OrthographicCamera
set renderingCamera(value: PerspectiveCamera | OrthographicCamera)

----------------------------------------

TITLE: Clearing Render Targets in BaseGPass
DESCRIPTION: Protected method for clearing render targets in a rendering pass. It takes a WebGLRenderer as a parameter and is provided for extending types to implement.

LANGUAGE: typescript
CODE:
protected clear(renderer: WebGLRenderer)

----------------------------------------

TITLE: Create Multiple Render Target Method
DESCRIPTION: Static method that creates an MRT enabled three.js render target with configurable color attachments and options.

LANGUAGE: typescript
CODE:
static createMultipleRenderTarget(
    count: number,
    options?: WebGLRenderTargetOptions,
    width?: number,
    height?: number
  ): WebGLMultipleRenderTargets

----------------------------------------

TITLE: Defining Remove Measurement Method in TypeScript
DESCRIPTION: Method to remove any ongoing measurements.

LANGUAGE: typescript
CODE:
removeMeasurement(): void

----------------------------------------

TITLE: SmoothOrbitControls Configuration Interface
DESCRIPTION: TypeScript interface defining all available configuration options for SmoothOrbitControls including sensitivity settings, angle constraints, and behavior flags.

LANGUAGE: typescript
CODE:
export interface SmoothOrbitControlsOptions {
  enableOrbit?: boolean
  enableZoom?: boolean
  enablePan?: boolean
  orbitSensitivity?: number
  zoomSensitivity?: number
  panSensitivity?: number
  inputSensitivity?: number
  minimumRadius?: number
  maximumRadius?: number
  minimumPolarAngle?: number
  maximumPolarAngle?: number
  minimumAzimuthalAngle?: number
  maximumAzimuthalAngle?: number
  infiniteZoom?: boolean
  zoomToCursor?: boolean
  damperDecay?: number
  orbitAroundCursor?: boolean
  showOrbitPoint?: boolean
}

----------------------------------------

TITLE: Defining Intersection Type Interfaces in TypeScript
DESCRIPTION: Defines extended interfaces for Three.js intersections including ExtendedIntersection, ExtendedMeshIntersection, and MeshIntersection types.

LANGUAGE: typescript
CODE:
interface ExtendedIntersection extends Intersection {
  batchObject?: BatchObject;
  pointOnLine?: Material;
}

interface ExtendedMeshIntersection extends MeshIntersection {
  batchObject: BatchObject
  object: SpeckleMesh | SpeckleInstancedMesh
}

interface MeshIntersection extends Intersection {
  face: Face
  faceIndex: number
}

----------------------------------------

TITLE: Pipeline Control Methods
DESCRIPTION: Core methods for controlling pipeline execution including render, reset, resize and clipping plane management.

LANGUAGE: typescript
CODE:
render(): boolean

LANGUAGE: typescript
CODE:
reset(): void

LANGUAGE: typescript
CODE:
resize(width: number, height: number): void

LANGUAGE: typescript
CODE:
setClippingPlanes(planes: Plane[]): void

----------------------------------------

TITLE: Defining Measurement Accessor in TypeScript
DESCRIPTION: Getter method that returns the currently active measurement being created.

LANGUAGE: typescript
CODE:
get activeMeasurement(): Measurement

----------------------------------------

TITLE: Section Tool Visibility Accessor
DESCRIPTION: Accessor for getting and setting the visibility of the section box.

LANGUAGE: typescript
CODE:
get visible(): boolean
set visible(value: boolean)

----------------------------------------

TITLE: Stopping Postgres Container
DESCRIPTION: This command stops the running Postgres container, which is necessary before upgrading the database.

LANGUAGE: shell
CODE:
docker stop speckle-server-postgres-1

----------------------------------------

TITLE: Initializing GeometryConverter in TypeScript
DESCRIPTION: Default constructor for the GeometryConverter abstract class. This class is used for converting geometry data in the Speckle viewer.

LANGUAGE: typescript
CODE:
constructor();

----------------------------------------

TITLE: Purging RenderTree
DESCRIPTION: Purges the render tree making it unusable afterwards.

LANGUAGE: typescript
CODE:
purge(): void

----------------------------------------

TITLE: Defining Selected Measurement Accessor in TypeScript
DESCRIPTION: Getter method that returns the currently selected measurement.

LANGUAGE: typescript
CODE:
get selectedMeasurement(): Measurement

----------------------------------------

TITLE: Jumping to Goal in SpeckleControls
DESCRIPTION: Abstract method for immediately setting the control's target camera position and rotation to their goal values.

LANGUAGE: typescript
CODE:
abstract jumpToGoal(): void

----------------------------------------

TITLE: Disposing NodeData GeometryData in TypeScript
DESCRIPTION: Abstract method to dispose of the explicit node data geometry. It takes a NodeData object as input and returns void.

LANGUAGE: typescript
CODE:
abstract disposeNodeGeometryData(node: NodeData): void

----------------------------------------

TITLE: Getting RenderViews by Node ID
DESCRIPTION: Gets all displayable NodeRenderViews descending from a node with the specified ID.

LANGUAGE: typescript
CODE:
getRenderViewsForNodeId(id: string): NodeRenderView[]

----------------------------------------

TITLE: Defining Clear Measurements Method in TypeScript
DESCRIPTION: Method to remove all measurements, including both finished and ongoing ones.

LANGUAGE: typescript
CODE:
clearMeasurements(): void

----------------------------------------

TITLE: Implementing ProgressivePipeline Stage Transition Methods
DESCRIPTION: Methods that handle transitions between different rendering stages and accumulation completion.

LANGUAGE: typescript
CODE:
onStationaryBegin(): void

LANGUAGE: typescript
CODE:
onStationaryEnd(): void

LANGUAGE: typescript
CODE:
onAccumulationComplete(): void

----------------------------------------

TITLE: Converting NodeData to GeometryData in TypeScript
DESCRIPTION: Abstract method to convert NodeData into viewer-defined geometry data. It takes a NodeData object as input and returns a GeometryData object.

LANGUAGE: typescript
CODE:
abstract convertNodeToGeometryData(node: NodeData): GeometryData

----------------------------------------

TITLE: Programmatic Object Deselection in TypeScript
DESCRIPTION: Method to programmatically unselect objects by their IDs or clear all selections if no IDs provided.

LANGUAGE: typescript
CODE:
unselectObjects(ids?: Array<string>): void

----------------------------------------

TITLE: Updating Visual Diff Display
DESCRIPTION: Updates the current visual diff with optional time interpolation and mode parameters.

LANGUAGE: typescript
CODE:
updateVisualDiff(time?: number, mode?: VisualDiffMode): void

----------------------------------------

TITLE: Initializing ProgressivePipeline Constructor
DESCRIPTION: Constructor for creating a new ProgressivePipeline instance that takes a SpeckleRenderer parameter.

LANGUAGE: typescript
CODE:
constructor(speckleRenderer: SpeckleRenderer)

----------------------------------------

TITLE: Defining SpeckleType Enum in TypeScript
DESCRIPTION: Enum definition for viewer-recognized object types in Speckle. It includes various geometry types such as View3D, BlockInstance, Mesh, Point, Line, and more.

LANGUAGE: typescript
CODE:
enum SpeckleType {
  View3D = "View3D",
  BlockInstance = "BlockInstance",
  Pointcloud = "Pointcloud",
  Brep = "Brep",
  Mesh = "Mesh",
  Point = "Point",
  Line = "Line",
  Polyline = "Polyline",
  Box = "Box",
  Polycurve = "Polycurve",
  Curve = "Curve",
  Circle = "Circle",
  Arc = "Arc",
  Ellipse = "Ellipse",
  RevitInstance = "RevitInstance",
  Text = "Text",
  Transform = "Transform",
  Unknown = "Unknown",
}

----------------------------------------

TITLE: Retrieving Selected Nodes in TypeScript
DESCRIPTION: Method to get the currently selected tree nodes.

LANGUAGE: typescript
CODE:
getSelectedNodes(): Array<TreeNode>

----------------------------------------

TITLE: Implementing inject accessor in Extension class (TypeScript)
DESCRIPTION: Defines a getter for the 'inject' property, which returns an array of Extension constructors that need to be injected on creation time.

LANGUAGE: typescript
CODE:
get inject(): Array<Constructor<Extension>>

----------------------------------------

TITLE: Defining TreeNode Structure in TypeScript
DESCRIPTION: Defines the structure of a TreeNode in the WorldTree, including its model data, children, and parent reference.

LANGUAGE: typescript
CODE:
{
    model: NodeData
    children: Array<TreeNode>
    parent: TreeNode
}

----------------------------------------

TITLE: Getting SpeckleType from NodeData in TypeScript
DESCRIPTION: Abstract method to get an opinionated SpeckleType based on the node's data. It takes a NodeData object as input and returns a SpeckleType.

LANGUAGE: typescript
CODE:
abstract getSpeckleType(node: NodeData): SpeckleType

----------------------------------------

TITLE: Programmatic Object Selection in TypeScript
DESCRIPTION: Method to programmatically select objects by their IDs with optional multi-select functionality.

LANGUAGE: typescript
CODE:
selectObjects(ids: Array<string>, multiSelect = false): void

----------------------------------------

TITLE: Defining NodeData Structure in TypeScript
DESCRIPTION: Defines the structure of NodeData, which represents the payload of a TreeNode, including raw data, children, and rendering properties.

LANGUAGE: typescript
CODE:
{
    raw: { [prop: string]: any }
    children: TreeNode[]
    atomic: boolean
    subtreeId?: number
    renderView?: NodeRenderView
    instanced?: boolean
}

----------------------------------------

TITLE: BVH Construction Method
DESCRIPTION: Static method to build a BVH from geometry data with optional transformation.

LANGUAGE: typescript
CODE:
static buildBVH(
    indices: number[],
    position: Float32Array,
    options: BVHOptions = DefaultBVHOptions,
    transform?: Matrix4
): MeshBVH

----------------------------------------

TITLE: Defining PointQueryResult Interface in TypeScript
DESCRIPTION: Specifies the structure for point query results, representing a point with variable component length.

LANGUAGE: typescript
CODE:
interface PointQueryResult {
  x: number
  y: number
  z?: number
  w?: number
}

----------------------------------------

TITLE: Setting Orbital Goal in TypeScript
DESCRIPTION: Method to set absolute orbital goals for the camera with dampened transitions.

LANGUAGE: typescript
CODE:
setOrbit(
    goalTheta?: number,
    goalPhi?: number,
    goalRadius?: number
): boolean

----------------------------------------

TITLE: Constructor Implementation in TypeScript
DESCRIPTION: Creates an AccelerationStructure instance with a provided MeshBVH object.

LANGUAGE: typescript
CODE:
constructor(bvh: MeshBVH)

----------------------------------------

TITLE: Defining Query Interface in TypeScript
DESCRIPTION: Defines the base structure for all queries, including an optional ID and required operation type.

LANGUAGE: typescript
CODE:
interface Query {
  id?: string 
  operation: string
}

----------------------------------------

TITLE: Defining IntersectionQueryResult Interface in TypeScript
DESCRIPTION: Specifies the structure for intersection query results, including an array of intersected objects with their GUIDs, optional raw data, and intersection points.

LANGUAGE: typescript
CODE:
interface IntersectionQueryResult {
  objects: Array<{
    guid: string
    object?: Record<string, unknown>
    point: { x: number; y: number; z: number }
  }> | null
}

----------------------------------------

TITLE: Setting Radius in TypeScript
DESCRIPTION: Method to set the radius value for the camera position.

LANGUAGE: typescript
CODE:
setRadius(radius: number): void

----------------------------------------

TITLE: Raycasting Methods
DESCRIPTION: Methods for performing raycast operations against the BVH structure.

LANGUAGE: typescript
CODE:
raycast(
    ray: Ray,
    materialOrSide: Side | Material | Material[] = FrontSide
): Intersection<Object3D<Event>>[]

LANGUAGE: typescript
CODE:
raycastFirst(
    ray: Ray,
    materialOrSide: Side | Material | Material[] = FrontSide
): Intersection<Object3D<Event>>[]

----------------------------------------

TITLE: Branch and Commit Operations in Speckle Python SDK
DESCRIPTION: This example demonstrates various branch and commit operations using the SpeckleClient in Python. It includes creating, listing, and retrieving commits and branches, as well as deleting a commit.

LANGUAGE: python
CODE:
# get list of commits
commits = client.commit.list("stream_id")

# get a specific commit
commit = client.commit.get("stream_id", "commit_id")

# create a commit
commit_id = client.commit.create(
    stream_id="stream_id", object_id="object_id", message="this is a commit message to describe the commit")

# delete a commit
deleted = client.commit.delete("stream_id", "commit_id")

# get a list of branches
branches = client.branch.list("stream_id")

# create a branch
branch_id = client.branch.create("stream_id", "branch name", "a description of the branch")

# get a specific branch
branch = client.branch.get("stream_id", "branch name")

----------------------------------------

TITLE: Defining QueryArgsResultMap Type in TypeScript
DESCRIPTION: Creates a mapping between query types and their corresponding result types, including Project, Unproject, Occlusion, and Pick operations.

LANGUAGE: typescript
CODE:
type QueryArgsResultMap = {
  Project: PointQueryResult
  Unproject: PointQueryResult
  Occlusion: IntersectionQueryResult
  Pick: IntersectionQueryResult
} & { [key: string]: unknown }

----------------------------------------

TITLE: Section Tool Events Enum
DESCRIPTION: Enumeration of events that can be emitted by the section tool extension.

LANGUAGE: typescript
CODE:
enum SectionToolEvent {
  DragStart = "section-box-drag-start",
  DragEnd = "section-box-drag-end",
  Updated = "section-box-changed",
}

----------------------------------------

TITLE: BVH Refit Method
DESCRIPTION: Method to rebuild the top level acceleration structure when batch objects update their transformation

LANGUAGE: typescript
CODE:
refit(): void

----------------------------------------

TITLE: Defining Custom Block Object in Speckle Python SDK
DESCRIPTION: This example shows how to create a custom Block object by extending the Base class in the Speckle Python SDK. It demonstrates how to define properties and initialize the object with default values.

LANGUAGE: python
CODE:
from specklepy.objects import Base
from specklepy.objects.geometry import Point

class Block(Base):
    length: float
    width: float
    height: float
    origin: Point = None

    def __init__(self, length=1.0, width=1.0, height=1.0, origin=Point(), **kwargs) -> None:
        super().__init__(**kwargs)
        # mark the origin as a detachable attribute
        self.add_detachable_attrs({"origin"})

        self.length = length
        self.width = width
        self.height = height
        self.origin = origin

----------------------------------------

TITLE: Defining QueryOperation Type in TypeScript
DESCRIPTION: Specifies the allowed values for query operation types: Project, Unproject, Occlusion, and Pick.

LANGUAGE: typescript
CODE:
type QueryOperation = 'Project' | 'Unproject' | 'Occlusion' | 'Pick'

----------------------------------------

TITLE: Get Section Box Method
DESCRIPTION: Method to get the current section box bounds as a Three.js Box3 object.

LANGUAGE: typescript
CODE:
getBox(): Box3

----------------------------------------

TITLE: Defining Options Property in TypeScript
DESCRIPTION: Getter and setter methods for accessing and modifying measurement options.

LANGUAGE: typescript
CODE:
get options(): MeasurementOptions
set options(value: MeasurementOptions)

----------------------------------------

TITLE: Property Info Interface Definition
DESCRIPTION: Interface definition for property information used in filtering, including key, object count and type.

LANGUAGE: typescript
CODE:
interface PropertyInfo {
  key: string;
  objectCount: number;
  type: "number" | "string";
}

----------------------------------------

TITLE: Setting SpeckleControls Position and Target
DESCRIPTION: Abstract method for setting the controller's goal position and rotation based on given position and target vectors.

LANGUAGE: typescript
CODE:
abstract fromPositionAndTarget(position: Vector3, target: Vector3): void

----------------------------------------

TITLE: Event Subscription Method
DESCRIPTION: Method for subscribing to camera events with a handler function.

LANGUAGE: typescript
CODE:
on(e: CameraEvent, handler: (data: boolean) => void)

----------------------------------------

TITLE: Defining Enabled Property in TypeScript
DESCRIPTION: Getter and setter methods for enabling/disabling the measurement extension.

LANGUAGE: typescript
CODE:
get enabled(): boolean
set enabled(value: boolean)

----------------------------------------

TITLE: Filtering and Coloring Objects in Speckle Viewer
DESCRIPTION: Examples of applying filters and colors to objects in the Speckle Viewer. The first example filters and colors levels by name, while the second colors objects based on a numeric property.

LANGUAGE: js
CODE:
v.applyFilter({filterBy: {'level.name': ['3FL', '4FL', '7FL']}, colorBy: { property: 'level.name', type: 'category', values: {'3FL': '#F0FFFF', '4FL': '#6495ED', '7FL': '#7B68EE'} }, ghostOthers: true } )

LANGUAGE: js
CODE:
v.applyFilter({colorBy: { property: 'baseLine.start.x', type: 'gradient', minValue: -7200, maxValue: 33000, 'gradientColors': ['white', 'CornflowerBlue', 'BlueViolet'] } } )

----------------------------------------

TITLE: Getting SpeckleControls Position
DESCRIPTION: Abstract method for getting the current goal position of the control's target camera.

LANGUAGE: typescript
CODE:
abstract getPosition(): Vector3

----------------------------------------

TITLE: Event Unsubscription Method
DESCRIPTION: Method for unsubscribing from camera events.

LANGUAGE: typescript
CODE:
removeListener(e: CameraEvent, handler: (data: unknown) => void)

----------------------------------------

TITLE: Defining Default Measurement Options in TypeScript
DESCRIPTION: Constant defining the default options for measurements including visibility, type, snapping, units and precision.

LANGUAGE: typescript
CODE:
const DefaultMeasurementsOptions = {
  visible: true,
  type: MeasurementType.POINTTOPOINT,
  vertexSnap: true,
  units: "m",
  precision: 2,
};

----------------------------------------

TITLE: Building Speckle Viewer Library
DESCRIPTION: Command to build the Speckle Viewer library for production use.

LANGUAGE: console
CODE:
npm run build

----------------------------------------

TITLE: FilterMaterial Interface Definition for SpeckleMaterial
DESCRIPTION: Defines pre-defined materials that can be applied with minimal configuration, including filterType and optional ramp properties.

LANGUAGE: TypeScript
CODE:
interface FilterMaterial {
  filterType: FilterMaterialType;
  rampIndex?: number;
  rampIndexColor?: Color;
  rampTexture?: Texture;
}

----------------------------------------

TITLE: Point Distance Calculation Method
DESCRIPTION: Method to find the closest point on the BVH to a given point in space

LANGUAGE: typescript
CODE:
closestPointToPoint(point: Vector3): HitPointInfo | null

----------------------------------------

TITLE: Defining MeasurementOptions Interface in TypeScript
DESCRIPTION: Interface defining configuration options for measurements including visibility, type, vertex snapping, units and precision.

LANGUAGE: typescript
CODE:
interface MeasurementOptions {
  visible: boolean;
  type?: MeasurementType;
  vertexSnap?: boolean;
  units?: string;
  precision?: number;
}

----------------------------------------

TITLE: Pipeline Constructor Implementation
DESCRIPTION: Constructor that initializes a new Pipeline instance with a SpeckleRenderer parameter.

LANGUAGE: typescript
CODE:
constructor(speckleRenderer: SpeckleRenderer)

----------------------------------------

TITLE: MaterialOptions Interface Definition for SpeckleMaterial
DESCRIPTION: Defines custom options for materials, including stencilOutlines, pointSize, and depthWrite properties.

LANGUAGE: TypeScript
CODE:
interface MaterialOptions {
  stencilOutlines?: StencilOutlineType;
  pointSize?: number;
  depthWrite?: number;
}

----------------------------------------

TITLE: Shape Casting Implementation
DESCRIPTION: Generic method for intersecting the BVH with various shapes using callback-based intersection testing

LANGUAGE: typescript
CODE:
shapecast(callbacks: ExtendedShapeCastCallbacks): boolean

----------------------------------------

TITLE: Defining MeasurementType Enum in TypeScript
DESCRIPTION: Enum defining the available measurement types: perpendicular and point-to-point.

LANGUAGE: typescript
CODE:
enum MeasurementType {
  PERPENDICULAR,
  POINTTOPOINT,
}

----------------------------------------

TITLE: Defining ProgressivePipeline Properties
DESCRIPTION: Core properties that control the pipeline's state and behavior including accumulation flags, frame counts, and stage definitions.

LANGUAGE: typescript
CODE:
protected accumulating: boolean;

LANGUAGE: typescript
CODE:
protected accumulationFrameCount: number;

LANGUAGE: typescript
CODE:
protected accumulationFrameIndex: number;

LANGUAGE: typescript
CODE:
protected dynamicStage: Array<GPass>;

LANGUAGE: typescript
CODE:
protected progressiveStage: Array<GPass>;

LANGUAGE: typescript
CODE:
protected passthroughStage: Array<GPass>;

----------------------------------------

TITLE: Defining Batch Properties in TypeScript
DESCRIPTION: Defines the core properties of the Batch interface, including batchMaterial, geometryType, id, renderObject, renderViews, and subtreeId.

LANGUAGE: TypeScript
CODE:
batchMaterial: Material;
geometryType: GeometryType;
id: string;
renderObject: Object3D;
renderViews: NodeRenderView[]
subtreeId: number;

----------------------------------------

TITLE: Raycast Implementation
DESCRIPTION: Method that performs raycast intersection tests against both top-level and bottom-level BVHs

LANGUAGE: typescript
CODE:
raycast(
    ray: Ray,
    materialOrSide: Side | Material | Material[] = FrontSide
): ExtendedIntersection[]

----------------------------------------

TITLE: Getting RenderTree ID Accessor
DESCRIPTION: Accessor method to get the ID of the render tree's root node.

LANGUAGE: typescript
CODE:
get id(): string

----------------------------------------

TITLE: Implementing ProgressivePipeline Accessor
DESCRIPTION: Getter method that combines passes from all three stages into a single array.

LANGUAGE: typescript
CODE:
get passes(): Array<GPass>;

----------------------------------------

TITLE: Defining Batch Methods in TypeScript
DESCRIPTION: Declares methods for the Batch interface, including buildBatch, getCount, getDepth, getMaterial, and others for managing and rendering batches.

LANGUAGE: TypeScript
CODE:
buildBatch();
getCount(): number
getDepth(): BatchUpdateRange
getMaterial(renderView: NodeRenderView): Material
getMaterialAtIndex(index: number): Material
getOpaque(): BatchUpdateRange
getRenderView(index: number): NodeRenderView
getStencil(): BatchUpdateRange
getTransparent(): BatchUpdateRange
getVisibleRange(): BatchUpdateRange
onRender(renderer: WebGLRenderer): void
onUpdate(deltaTime: number): void
purge(): void
resetDrawRanges: void
setBatchBuffers(range: BatchUpdateRange[]): void
setBatchMaterial(material: Material): void
setDrawRanges(ranges: BatchUpdateRange[]): void
setVisibleRange(range: BatchUpdateRange[]): void

----------------------------------------

TITLE: Defining QueryResult Type in TypeScript
DESCRIPTION: Creates a union type for query results, which can be either PointQueryResult or IntersectionQueryResult.

LANGUAGE: typescript
CODE:
type QueryResult = PointQueryResult | IntersectionQueryResult

----------------------------------------

TITLE: Getting Atomic Parent Node
DESCRIPTION: Retrieves the closest atomic parent node that represents a standalone object for a given node.

LANGUAGE: typescript
CODE:
getAtomicParent(node: TreeNode): TreeNode

----------------------------------------

TITLE: RenderingStats Type Definition in SpeckleRenderer
DESCRIPTION: Defines the structure for rendering statistics, including object counts, batch details, and draw call information.

LANGUAGE: TypeScript
CODE:
{
  objects: number
  batchCount: number
  drawCalls: number
  trisCount: number
  vertCount: number
  batchDetails: Array<{
    drawCalls: number
    minDrawCalls: number
    tris: number
    verts: number
  }>
}

----------------------------------------

TITLE: Canceling RenderTree Build
DESCRIPTION: Method to cancel any ongoing tree building operations.

LANGUAGE: typescript
CODE:
cancelBuild(): void

----------------------------------------

TITLE: Type Definitions
DESCRIPTION: Type definitions for vector-like objects and BVH configuration options.

LANGUAGE: typescript
CODE:
type VectorLike = { x: number; y: number; z?: number; w?: number };

LANGUAGE: typescript
CODE:
interface BVHOptions {
  strategy: SplitStrategy
  maxDepth: number
  maxLeafTris: number
  verbose: boolean
  useSharedArrayBuffer: boolean
  setBoundingBox: boolean
  onProgress?: () => void
  [SKIP_GENERATION]: boolean
}

----------------------------------------

TITLE: Retrieving Node Instances
DESCRIPTION: Gets all instances from the underlying WorldTree using the render tree's ID.

LANGUAGE: typescript
CODE:
getInstances(): { [id: string]: Record<string, TreeNode> }

----------------------------------------

TITLE: Adding RenderTree in SpeckleRenderer
DESCRIPTION: Generator function which takes the id of a render tree, builds the batches, then adds the batches to the scene. Yields after each batch creation for user-defined code execution.

LANGUAGE: TypeScript
CODE:
async *addRenderTree(subtreeId: string): AsyncGenerator<any, void, unknown>

----------------------------------------

TITLE: Getting Renderable Views
DESCRIPTION: Gets all NodeRenderViews for renderable nodes of specified SpeckleTypes.

LANGUAGE: typescript
CODE:
getRenderableRenderViews(...types: SpeckleType[]): NodeRenderView[]

----------------------------------------

TITLE: Searching WorldTree by ID with Subtree in TypeScript
DESCRIPTION: Shows how to search for nodes in a specific subtree of the WorldTree using both an ID and a subtree ID.

LANGUAGE: typescript
CODE:
const subtreeId = 1
const nodes = viewer.getWorldTree().findId('6ddd42ca007461a3a33375b193bdf9b0', subtreeId)

----------------------------------------

TITLE: Getting RenderView Nodes
DESCRIPTION: Returns all TreeNodes with displayable NodeRenderViews descending from a given node.

LANGUAGE: typescript
CODE:
getRenderViewNodesForNode(node: TreeNode): TreeNode[]

----------------------------------------

TITLE: Setting Target Position in TypeScript
DESCRIPTION: Method to set the origin point of the spherical coordinate system.

LANGUAGE: typescript
CODE:
setTarget(x: number, y: number, z: number): void

----------------------------------------

TITLE: Adding Node to WorldTree in TypeScript
DESCRIPTION: Adds a TreeNode as a child of the provided parent node. Takes two parameters: the node to add and the parent node.

LANGUAGE: typescript
CODE:
addNode(node: TreeNode, parent: TreeNode): void

----------------------------------------

TITLE: Getting RenderViews for Node
DESCRIPTION: Retrieves all displayable NodeRenderViews descending from a given node.

LANGUAGE: typescript
CODE:
getRenderViewsForNode(node: TreeNode): NodeRenderView[]

----------------------------------------

TITLE: Defining PointQuery Interface in TypeScript
DESCRIPTION: Defines the structure for point queries, including point coordinates and operation type (Project or Unproject).

LANGUAGE: typescript
CODE:
interface PointQuery extends Query {
  point: { x: number; y: number; z?: number; w?: number }
  operation: 'Project' | 'Unproject'
}

----------------------------------------

TITLE: Setting Damper Decay Time in TypeScript
DESCRIPTION: Method to set the dampening values for the camera control, affecting movement smoothness.

LANGUAGE: typescript
CODE:
setDamperDecayTime(decayMilliseconds: number)

----------------------------------------

TITLE: Accessor Methods for BVH and Geometry
DESCRIPTION: Getter methods to access the underlying BVH and BufferGeometry objects.

LANGUAGE: typescript
CODE:
get bvh(): MeshBVH

LANGUAGE: typescript
CODE:
get geometry(): BufferGeometry

----------------------------------------

TITLE: Getting Renderable Nodes
DESCRIPTION: Retrieves all renderable nodes of specified SpeckleTypes.

LANGUAGE: typescript
CODE:
getRenderableNodes(...types: SpeckleType[]): TreeNode[]

----------------------------------------

TITLE: Defining InputEvent Enum in TypeScript for Speckle Viewer
DESCRIPTION: This enumeration defines the various input event types supported by the Speckle viewer, including pointer events, clicks, and key events.

LANGUAGE: typescript
CODE:
enum InputEvent {
  PointerDown,
  PointerUp,
  PointerMove,
  Click,
  DoubleClick,
  KeyUp,
}

----------------------------------------

TITLE: Setting Target Camera in SpeckleControls
DESCRIPTION: Abstract setter for the target camera, accepting PerspectiveCamera or OrthographicCamera instances.

LANGUAGE: typescript
CODE:
abstract set targetCamera(target: PerspectiveCamera | OrthographicCamera)

----------------------------------------

TITLE: Space Transformation Methods
DESCRIPTION: Methods for transforming geometric entities between world space and acceleration structure space.

LANGUAGE: typescript
CODE:
transformInput<T extends Vector3 | Ray | Box3>(input: T): T

LANGUAGE: typescript
CODE:
transformOutput<T extends Vector3 | Ray | Box3>(output: T): T

----------------------------------------

TITLE: Initializing RenderTree for Specific Object in TypeScript
DESCRIPTION: This code shows how to get a RenderTree instance for a specific part of the model by providing an object ID.

LANGUAGE: typescript
CODE:
const renderTree = worldTree.getRenderTree("2f1bd7295481641c888f09b5fbb6dc2b");

----------------------------------------

TITLE: Adding Event Handler in TypeScript for Speckle Viewer Input
DESCRIPTION: This method adds a handler to the event type call list. It takes an InputEvent type and a handler function as parameters.

LANGUAGE: typescript
CODE:
on(eventType: InputEvent, handler: (arg) => void): void

----------------------------------------

TITLE: Section Tool Event Payload Interface
DESCRIPTION: Interface mapping section tool events to their handler argument types.

LANGUAGE: typescript
CODE:
interface SectionToolEventPayload {
  [SectionToolEvent.DragStart]: void
  [SectionToolEvent.DragEnd]: void
  [SectionToolEvent.Updated]: Plane[]
}

----------------------------------------

TITLE: First Raycast Hit Implementation
DESCRIPTION: Method that performs raycast intersection tests but returns only the first intersection found

LANGUAGE: typescript
CODE:
raycastFirst(
    ray: Ray,
    materialOrSide: Side | Material | Material[] = FrontSide
): ExtendedIntersection

----------------------------------------

TITLE: Accessing AllObjects in SpeckleRenderer
DESCRIPTION: Gets the parent three.js object for all loaded scene content.

LANGUAGE: TypeScript
CODE:
get allObjects(): Object3D

----------------------------------------

TITLE: Camera Controller Type Definitions in TypeScript
DESCRIPTION: Defines various types and enums used in the CameraController, including event types, payload structures, options, projections, and view types.

LANGUAGE: typescript
CODE:
enum CameraEvent {
  Stationary = 'stationary',
  Dynamic = 'dynamic',
  FrameUpdate = 'frame-update',
  ProjectionChanged = 'projection-changed'
}

interface CameraEventPayload {
  [CameraEvent.Stationary]: void
  [CameraEvent.Dynamic]: void
  [CameraEvent.FrameUpdate]x: boolean
  [CameraEvent.ProjectionChanged]: CameraProjection
}

type CameraControllerOptions = SmoothOrbitControlsOptions &
  { nearPlaneCalculation?: NearPlaneCalculation }

enum CameraProjection {
  PERSPECTIVE,
  ORTHOGRAPHIC,
}

type CanonicalView =
  | "front"
  | "back"
  | "up"
  | "top"
  | "down"
  | "bottom"
  | "right"
  | "left"
  | "3d"
  | "3D";

type InlineView = {
  position: Vector3;
  target: Vector3;
};

type PolarView = {
  azimuth: number;
  polar: number;
  radius?: number;
  origin?: Vector3;
};

----------------------------------------

TITLE: Accessing Section Tool Outlines Enabled Property - TypeScript
DESCRIPTION: Accessor property for enabling/disabling the Section Tool Outlines extension. Returns and accepts a boolean value to control the extension's state.

LANGUAGE: typescript
CODE:
get enabled(): boolean
set enabled(value: boolean)

----------------------------------------

TITLE: Extended Shapecast Callbacks Interface
DESCRIPTION: Type definition for the extended shapecast callbacks including both top-level and bottom-level BVH intersection stages

LANGUAGE: typescript
CODE:
type ExtendedShapeCastCallbacks = {
  intersectsTAS?: (
    box: Box3,
    isLeaf: boolean,
    score: number | undefined,
    depth: number,
    nodeIndex: number
  ) => ShapecastIntersection | boolean;
  intersectTASRange?: (
    batchObject: BatchObject
  ) => ShapecastIntersection | boolean;
  intersectsBounds: (
    box: Box3,
    isLeaf: boolean,
    score: number | undefined,
    depth: number,
    nodeIndex: number
  ) => ShapecastIntersection | boolean;

  traverseBoundsOrder?: (box: Box3) => number;
} & (
  | {
      intersectsRange: (
        triangleOffset: number,
        triangleCount: number,
        contained: boolean,
        depth: number,
        nodeIndex: number,
        box: Box3
      ) => boolean;
    }
  | {
      intersectsTriangle: (
        triangle: ExtendedTriangle,
        triangleIndex: number,
        contained: boolean,
        depth: number,
        batchObject?: BatchObject
      ) => boolean | void;
    }
);

----------------------------------------

TITLE: Setting Materials in SpeckleRenderer
DESCRIPTION: Sets the material instance to the specified render views. Multiple overloads are provided for different material types.

LANGUAGE: TypeScript
CODE:
setMaterial(rvs: NodeRenderView[], material: Material): void

setMaterial(
    rvs: NodeRenderView[],
    material: RenderMaterial & DisplayStyle & MaterialOptions
): void

setMaterial(rvs: NodeRenderView[], material: FilterMaterial): void

----------------------------------------

TITLE: Defining Up Vector Accessor in SpeckleControls
DESCRIPTION: Accessor for getting and setting the up vector used to compute camera position and rotation.

LANGUAGE: typescript
CODE:
public get up() 
public set up(value: Vector3)

----------------------------------------

TITLE: Creating Dropdown Inputs Using Enums in Python
DESCRIPTION: Illustrates how to create a dropdown input using enums in Python. It defines an AnalysisType enum and uses it in a FunctionInputs class with a default value.

LANGUAGE: python
CODE:
class AnalysisType(str, Enum):
    STRUCTURAL = "structural"
    THERMAL = "thermal" 
    COST = "cost"

class FunctionInputs(AutomateBase):
    analysis_type: AnalysisType = Field(
        default=AnalysisType.STRUCTURAL,
        title="Analysis Type", 
        description="Select analysis method"
    )

----------------------------------------

TITLE: Loading OBJ Data from URL
DESCRIPTION: Shows how to load OBJ format data from a URL using the ObjLoader. Creates a loader instance and loads the object into the viewer.

LANGUAGE: typescript
CODE:
const objUrl: string = '<your OBJ resource URL>'
/** Create a loader for the .obj data */
const loader = new ObjLoader(viewer.getWorldTree(), objUrl);
/** Load the obj data */
await viewer.loadObject(loader, true);

----------------------------------------

TITLE: Accessing Selection Extension Enabled State in TypeScript
DESCRIPTION: Getter and setter for enabling/disabling the selection extension functionality.

LANGUAGE: typescript
CODE:
get enabled(): boolean
set enabled(value: boolean)

----------------------------------------

TITLE: Checking SpeckleControls Stationary State
DESCRIPTION: Abstract method for determining whether the control's camera target is stationary or not.

LANGUAGE: typescript
CODE:
abstract isStationary(): boolean

----------------------------------------

TITLE: Creating Dropdown Inputs Using Enums in C#
DESCRIPTION: Shows how to create a dropdown input using enums in C#. It defines an AnalysisType enum with description attributes and uses it in a FunctionInputs class with a default value.

LANGUAGE: csharp
CODE:
public enum AnalysisType
{
    [Description("Structural Analysis")]  // What users see in the dropdown
    Structural,                          // What your code receives
    [Description("Thermal Analysis")]
    Thermal,
    [Description("Cost Analysis")]
    Cost
}

public class FunctionInputs
{
    [DisplayName("Analysis Type")]
    public AnalysisType Type { get; set; } = AnalysisType.Structural;
}

----------------------------------------

TITLE: Initial Setup Commands for Speckle Server
DESCRIPTION: Core commands needed to clone, build and start the Speckle Server in development mode. These commands handle repository setup, dependency installation, and service initialization.

LANGUAGE: bash
CODE:
git clone git@github.com:specklesystems/speckle-server.git
cd speckle-server
corepack enable
yarn
yarn build
yarn dev:docker:up
cp packages/server/.env-example packages/server/.env
cp packages/server/.env.test-example packages/server/.env.test
cp packages/frontend-2/.env.example packages/frontend-2/.env
cp packages/dui3/.env.example packages/dui3/.env
yarn dev

----------------------------------------

TITLE: Resource Accessor in TypeScript
DESCRIPTION: Getter method that returns the loader's resource string identifier.

LANGUAGE: typescript
CODE:
get resource(): string

----------------------------------------

TITLE: Disposing SpeckleControls
DESCRIPTION: Abstract method for disposing of the controls implementation.

LANGUAGE: typescript
CODE:
abstract dispose(): void

----------------------------------------

TITLE: Creating Dropdown Inputs Using JSON Schema in Python
DESCRIPTION: Demonstrates how to create a dropdown input using JSON schema in Python for more flexibility. It defines a report_type field with custom options.

LANGUAGE: python
CODE:
report_type: str = Field(
    default="detailed",
    title="Report Type",
    json_schema_extra={
        "oneOf": [
            {"const": "detailed", "title": "Detailed Report"},
            {"const": "summary", "title": "Summary Report"}
        ]
    }
)

----------------------------------------

TITLE: Simplified Docker Compose for Speckle Server Without Dependencies
DESCRIPTION: YAML configuration for deploying Speckle server without included dependencies, assuming external PostgreSQL, Redis, and S3-compatible storage.

LANGUAGE: yaml
CODE:
version: "2.3"
services:
  speckle-ingress:
    image: speckle/speckle-docker-compose-ingress:2
    restart: always
    ports:
      - "0.0.0.0:80:8080"
    environment:
      FILE_SIZE_LIMIT_MB: "100"
      NGINX_ENVSUBST_OUTPUT_DIR: "/etc/nginx"

  speckle-frontend-2:
    image: speckle/speckle-frontend-2:2
    restart: always
    environment:
      NUXT_PUBLIC_SERVER_NAME: "local"
      # TODO: Change NUXT_PUBLIC_API_ORIGIN to the URL of the speckle server, as accessed from the network. This is the same value as should be used for the CANONICAL_URL in the server section below.
      NUXT_PUBLIC_API_ORIGIN: "http://127.0.0.1"
      NUXT_PUBLIC_BACKEND_API_ORIGIN: "http://speckle-server:3000"
      # TODO: Change NUXT_PUBLIC_BASE_URL to the URL of the speckle frontend, as accessed from the network. This is the same value as should be used for the CANONICAL_URL in the server section below.
      NUXT_PUBLIC_BASE_URL: "http://127.0.0.1"
      NUXT_PUBLIC_LOG_LEVEL: 'warn'
      NUXT_REDIS_URL: "redis://redis"

  speckle-server:
    image: speckle/speckle-server:2
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "/nodejs/bin/node",
          "-e",
          "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }",
        ]
      interval: 10s
      timeout: 3s
      retries: 30
    environment:
      # TODO: Change this to the URL of the speckle server, as accessed from the network
      CANONICAL_URL: "http://127.0.0.1"

      # TODO: Change this to a unique secret for this server
      SESSION_SECRET: "TODO:ReplaceWithLongString"

      STRATEGY_LOCAL: "true"
      DEBUG: "speckle:*"

      # TODO: Change to PostgreSQL connection details:
      POSTGRES_URL: "postgres"
      POSTGRES_USER: "speckle"
      POSTGRES_PASSWORD: "speckle"
      POSTGRES_DB: "speckle"

      # TODO: Change to redis connection string:
      REDIS_URL: "redis://redis"

      # TODO: Change to ObjectStorage connection information (s3-compatible):
      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      S3_BUCKET: "speckle-server"

      # TODO: Change this to the URL of the speckle server, as accessed from the network
      FRONTEND_ORIGIN: "http://127.0.0.1"

  preview-service:
    image: speckle/speckle-preview-service:2
    restart: always
    depends_on:
      speckle-server:
        condition: service_healthy
    mem_limit: "1000m"
    memswap_limit: "1000m"
    environment:
      DEBUG: "preview-service:*"

      # TODO: Change to PostgreSQL connection string:
      PG_CONNECTION_STRING: "postgres://speckle:speckle@postgres/speckle"

  webhook-service:
    image: speckle/speckle-webhook-service:2
    restart: always
    depends_on:
      speckle-server:
        condition: service_healthy
    environment:
      DEBUG: "webhook-service:*"

      # TODO: Change to PostgreSQL connection string:
      PG_CONNECTION_STRING: "postgres://speckle:speckle@postgres/speckle"

  fileimport-service:
    image: speckle/speckle-fileimport-service:2
    restart: always
    depends_on:
      speckle-server:
        condition: service_healthy
    environment:
      DEBUG: "fileimport-service:*"
      SPECKLE_SERVER_URL: "http://speckle-server:3000"

      # TODO: Change to PostgreSQL connection string:
      PG_CONNECTION_STRING: "postgres://speckle:speckle@postgres/speckle"

      # TODO: Change to ObjectStorage connection information (s3-compatible):
      S3_ENDPOINT: "http://minio:9000"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      S3_BUCKET: "speckle-server"

----------------------------------------

TITLE: Initializing Loader Constructor in TypeScript
DESCRIPTION: Constructor for the Loader class that accepts a resource identifier and optional resource data. The resource can be either a URL or resource ID.

LANGUAGE: typescript
CODE:
constructor(resource: string, resourceData?: string | ArrayBuffer)

----------------------------------------

TITLE: Adjusting Orbit Parameters in TypeScript
DESCRIPTION: Method to adjust the camera's spherical coordinates by providing delta values for theta, phi, and zoom.

LANGUAGE: typescript
CODE:
adjustOrbit(deltaTheta: number, deltaPhi: number, deltaZoom: number): void

----------------------------------------

TITLE: Handling Sensitive Data Inputs in Python
DESCRIPTION: Shows how to create a secure input field for sensitive data like API keys in Python using Pydantic's SecretStr type.

LANGUAGE: python
CODE:
from pydantic import SecretStr

class FunctionInputs(AutomateBase):
    api_key: SecretStr = Field(
        title="API Key",
        description="Enter your API key"
    )

----------------------------------------

TITLE: Deleting Postgres Volume
DESCRIPTION: This command removes the Docker volume associated with the Postgres database, which is a necessary step before upgrading.

LANGUAGE: shell
CODE:
docker volume rm speckle-server_postgres-data

----------------------------------------

TITLE: Implementing onRender method in Extension class (TypeScript)
DESCRIPTION: Defines the onRender method, which is called after the viewer's render.

LANGUAGE: typescript
CODE:
onRender()

----------------------------------------

TITLE: Setting Field of View in TypeScript
DESCRIPTION: Method to set the field of view for PerspectiveCamera.

LANGUAGE: typescript
CODE:
setFieldOfView(fov: number)

----------------------------------------

TITLE: Implementing Async Status Reporting in C#
DESCRIPTION: Shows implementation of asynchronous execution status reporting in C# using AutomationContext. Features Task-based async operations and structured error handling with try-catch blocks.

LANGUAGE: csharp
CODE:
public static async Task Run(AutomationContext context)
{
    try
    {
        // Function logic
        var results = ProcessData();
        if (results.IsValid)
        {
            await context.MarkRunSuccess(
                "Analysis completed successfully: Found 5 valid elements"
            );
        }
        else
        {
            await context.MarkRunFailed(
                "Analysis completed but found invalid elements"
            );
        }
    }
    catch (Exception ex)
    {
        await context.MarkRunFailed(ex.Message);
        throw;
    }
}

----------------------------------------

TITLE: Deploying Updated Docker Compose Configuration
DESCRIPTION: This command deploys the updated Docker Compose configuration with the new Postgres version.

LANGUAGE: shell
CODE:
docker compose -f ./docker-compose-deps.yml up --detach

----------------------------------------

TITLE: AccelerationStructure Property Definition
DESCRIPTION: Property definition for the top-level acceleration structure that operates in world space

LANGUAGE: typescript
CODE:
accelerationStructure: AccelerationStructure;

----------------------------------------

TITLE: Toggle Section Tool Method
DESCRIPTION: Method to toggle the section tool enabled state.

LANGUAGE: typescript
CODE:
toggle(): void

----------------------------------------

TITLE: Implementing Gradient Visualization in Python
DESCRIPTION: Demonstrates how to use metadata to enable gradient-based visualization for annotations in Python. This snippet shows how to set the gradient flag and specify gradient values for objects.

LANGUAGE: python
CODE:
runCtx.attach_info_to_objects(
    "Gradient Visualization",
    all_object_ids,
    "Values applied to objects in list order",
    metadata={"gradient": True, "gradientValues": gradient_values}
)

----------------------------------------

TITLE: Validating Webhook Signature in Node.js
DESCRIPTION: This code snippet shows how to validate the X-WEBHOOK-SIGNATURE header in Node.js to ensure the authenticity of incoming webhook requests.

LANGUAGE: javascript
CODE:
const * as crypto from 'crypto'

const secret = 'YOUR_SECRET_HERE'
const expectedSignature = crypto
    .createHmac('sha256', secret)
    .update(request.body.payload)
    .digest('hex')
const signatureFromHeader = request.headers['x-webhook-signature']

if (signatureFromHeader != expectedSignature) response.status(401).send('Ignoring request with invalid signature')

----------------------------------------

TITLE: Creating HTML Container for Speckle Viewer
DESCRIPTION: This snippet shows the basic HTML structure required to create a container for the Speckle viewer. It includes a div element with an id of 'renderer' where the viewer will be initialized.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    ...
  </head>

  <body>
    ...
    <div id="renderer">
    ...
  </body>
</html>

----------------------------------------

TITLE: Section Tool Enabled Accessor
DESCRIPTION: Accessor for enabling/disabling the section tool extension.

LANGUAGE: typescript
CODE:
get enabled(): boolean
set enabled(value: boolean)

----------------------------------------

TITLE: Adding Metadata to Annotations in Python
DESCRIPTION: Illustrates how to include additional metadata when attaching annotations to objects in Python. This example shows how to add currency and cost information to an info annotation.

LANGUAGE: python
CODE:
runCtx.attach_info_to_objects(
    "Cost Analysis",
    ["obj_id_4", "obj_id_5"],
    "Material cost optimized",
    metadata={"currency": "USD", "cost_saved": 5000}
)

----------------------------------------

TITLE: Displaying Speckle Object Preview Image in Markdown
DESCRIPTION: Example of embedding an object preview image using Markdown image syntax. Shows how to reference a specific object preview from the Speckle preview endpoint.

LANGUAGE: markdown
CODE:
![speckle haus object](https://app.speckle.systems/preview/3073b96e86/objects/1a2a5fd7ff5c6e6b2382f513d19eb3d5)

----------------------------------------

TITLE: Rendering Implementation in ProgressiveGPass
DESCRIPTION: Base class render implementation that handles progressive rendering based on frame accumulation. Returns true while frameIndex is less than accumulationFrames, false otherwise.

LANGUAGE: typescript
CODE:
render(
    renderer: WebGLRenderer,
    camera?: PerspectiveCamera | OrthographicCamera | null,
    scene?: Scene
  ): boolean

----------------------------------------

TITLE: Managing Clipping Planes in SpeckleRenderer
DESCRIPTION: Gets or sets the clipping planes for the scene. Anything outside the volume determined by the clipping planes will get visually clipped.

LANGUAGE: TypeScript
CODE:
get clippingPlanes(): Plane[]
set clippingPlanes(value: Plane[])

----------------------------------------

TITLE: Implementing Secret Inputs in C# for Speckle Automate
DESCRIPTION: This snippet shows how to define a secret input field in C# using the [Secret] attribute. This ensures the input is obfuscated in the UI and stored securely by Automate.

LANGUAGE: csharp
CODE:
struct FunctionInputs
{
	[Secret]
	public string SecretInput; // Mark a field as secret for passwords and 3rd party tokens
}

----------------------------------------

TITLE: Querying Objects by Parameter Value in GraphQL
DESCRIPTION: This GraphQL query demonstrates how to retrieve objects based on a specific parameter value. It uses a variable to define the query criteria and selects specific fields from the parameters.

LANGUAGE: graphql
CODE:
query($myQuery:[JSONObject!]){
    stream(id:"c6b0c4077a"){
        object(id:"0d0a4abc6a5fcc763e6c850dd3d5ecab"){
            totalChildrenCount
            children(query: $myQuery select:["parameters[0]".value, "parameters[0].name"]){
                totalCount
                cursor
                objects{
                    id
                    data
                }
            }
        }
    }
}

----------------------------------------

TITLE: Create Render Target Method
DESCRIPTION: Static method that creates a three.js render target with optional configuration parameters.

LANGUAGE: typescript
CODE:
static createRenderTarget(
    options?: WebGLRenderTargetOptions,
    width?: number,
    height?: number
  ): WebGLRenderTarget

----------------------------------------

TITLE: Accessing Fragment Program in SpeckleMaterial
DESCRIPTION: Gets the fragment program source code for the material.

LANGUAGE: TypeScript
CODE:
protected get fragmentProgram(): string

----------------------------------------

TITLE: Implementing Secret Inputs in Python for Speckle Automate
DESCRIPTION: This snippet demonstrates how to define a secret input field in Python using the SecretStr type from Pydantic. This ensures the input is obfuscated in the UI and stored securely by Automate.

LANGUAGE: python
CODE:
from Pydantic import SecretStr

class FunctionInputs(AutomateBase):

		secret_input: SecretStr = Field(
			title="Secret Input",
			description=( "Marking a field as readOnly will disable the UI input,"
											"which can be used to mock input UI for future revision "
											"or pass values specific to a function revision." ) 
		) 

----------------------------------------

TITLE: Implementing Post-Deserialization Logic in C#
DESCRIPTION: Example of handling reference loops after deserialization using the OnDeserialized attribute to rebuild object relationships.

LANGUAGE: csharp
CODE:
  [OnDeserialized]
  internal void onDeserialized(StreamingContext context)
  {
    Edges.ForEach(e => e.Brep = this);
    Loops.ForEach(l => l.Brep = this);
    Trims.ForEach(t => t.Brep = this);
    Faces.ForEach(f => f.Brep = this);
  }

----------------------------------------

TITLE: Drawing Size Property Definition
DESCRIPTION: Protected property that stores the final display size for the pipeline in pixels, with DPR factored in.

LANGUAGE: typescript
CODE:
protected drawingSize: Vector2;

----------------------------------------

TITLE: Enabling Stencil Outlines in SpeckleMaterial
DESCRIPTION: Enables the material to have stencil outlines.

LANGUAGE: TypeScript
CODE:
protected set stencilOutline(value: boolean)

----------------------------------------

TITLE: Asynchronous Tree Walking in WorldTree using TypeScript
DESCRIPTION: Demonstrates how to perform an asynchronous walk through the WorldTree, allowing for potentially time-consuming operations on each node.

LANGUAGE: typescript
CODE:
await viewer.getWorldTree().walkAsync((node: TreeNode) => {
    // do whatever is needed
    return true
})

----------------------------------------

TITLE: Using KitManager for Kit and Converter Loading
DESCRIPTION: Example of using KitManager to load Speckle kits and their associated converters for specific applications.

LANGUAGE: csharp
CODE:
// Get a list of all available kits
var kits = KitManager.Kits

// Get a specific kit by name or from the assembly full name
var kitByName = KitManager.Kits.FirstOrDefault(kit => kit.Name == "CoreKit");
var kitFromAssembly = KitManager.GetKit(typeof(CoreKit).Assembly.FullName);

// Load the default Objects kit and the included Revit converter
var kit = KitManager.GetDefaultKit();
var converter = kit.LoadConverter(ConnectorRevitUtils.RevitAppName);
converter.SetContextDocument(CurrentDoc.Document);

----------------------------------------

TITLE: Enabling Object Layers in BaseGPass
DESCRIPTION: Method to enable or disable specific object layers on the rendering pass. It takes an ObjectLayers enum value and a boolean flag as parameters.

LANGUAGE: typescript
CODE:
enableLayer(layer: ObjectLayers, value: boolean): void

----------------------------------------

TITLE: Accessing Accumulation Frames in ProgressiveGPass
DESCRIPTION: Getter and setter for managing the total number of frames needed for pass convergence/accumulation.

LANGUAGE: typescript
CODE:
get accumulationFrames(): number 
set accumulationFrames(value: number) 

----------------------------------------

TITLE: Synchronous Tree Walking in WorldTree using TypeScript
DESCRIPTION: Shows how to perform a synchronous walk through the WorldTree, executing a function for each node encountered.

LANGUAGE: typescript
CODE:
viewer.getWorldTree().walk((node: TreeNode) => {
    // do whatever is needed
    return true
})

----------------------------------------

TITLE: Dynamic Property Detachment Example in C#
DESCRIPTION: Shows how to dynamically detach properties using the '@' prefix convention, demonstrating the relationship between building levels and shared slabs.

LANGUAGE: csharp
CODE:
// We're grossly simplifying in this example. Here are our two building levels:
var level_1, level_2;

// The philosophical slab instance. Does it belong to level 1 or level 2?
var slab_between_1_and_2 = new Slab();

// Well, it belongs to both! Notice the "@" character at the beginning of
// the dynamic property assignment - it's the Speckle convention for "detaching"
// dynamically added properties.
level_1["@topSlab"] = slab_between_1_and_2;
level_2["@bottomSlab"] = slab_between_1_and_2;

----------------------------------------

TITLE: Installing Speckle Unity Package via Git URL
DESCRIPTION: Instructions for installing the Speckle Unity package using the Package Manager and a Git URL.

LANGUAGE: plaintext
CODE:
https://github.com/specklesystems/speckle-unity.git?path=/Packages/systems.speckle.speckle-unity

----------------------------------------

TITLE: Managing Frame Index in ProgressiveGPass
DESCRIPTION: Getter and setter for tracking the current frame index in the convergence/accumulation cycle.

LANGUAGE: typescript
CODE:
get frameIndex(): number 
set frameIndex(value: number) 

----------------------------------------

TITLE: Loading Objects in Speckle Viewer (TypeScript)
DESCRIPTION: Demonstrates the method signature for loading objects in the Speckle viewer using a Loader object.

LANGUAGE: typescript
CODE:
loadObject(loader: Loader): Promise<void>

----------------------------------------

TITLE: Basic Traversal Implementation in C#
DESCRIPTION: Example showing how to use DefaultTraversal to iterate through a Speckle object tree while maintaining hierarchical context.

LANGUAGE: csharp
CODE:
async Task Foo(string myStream, ISpeckleConverter myConverter)
{
    var traversalFunc = DefaultTraversal.CreateTraverseFunc(myConverter);
    Base commitObject = await Helpers.Receive(myStream);
    foreach (TraversalContext context in traversalFunc.Traverse(commitObject))
    {
        Base current = context.current;
        TraversalContext? parent = context.parent;
        DoWork(current);
    }

----------------------------------------

TITLE: Receiving Data in Unity Game Time
DESCRIPTION: Example of how to receive data from Speckle during game time using the Receiver component.

LANGUAGE: csharp
CODE:
var receiver = myGameObject.AddComponent<Receiver>();
receiver.Init(projectId);
receiver.Receive();

----------------------------------------

TITLE: Accessing Clear Alpha Value in TypeScript
DESCRIPTION: This getter retrieves the current alpha clear value for the pass. If undefined, the pass will not clear alpha.

LANGUAGE: typescript
CODE:
get clearAlpha(): number | undefined

----------------------------------------

TITLE: Building RenderTree with GeometryConverter (TypeScript)
DESCRIPTION: Shows how to build a RenderTree using a custom GeometryConverter implementation.

LANGUAGE: typescript
CODE:
const geometryConverter = new MyGeometryConverter();
renderTree.buildRenderTree(geometryConverter);

----------------------------------------

TITLE: Beam Conversion Implementation
DESCRIPTION: Shows implementation of converting a Revit beam to a Speckle beam object, including property mapping and geometry conversion.

LANGUAGE: csharp
CODE:
private RevitBeam BeamToSpeckle(DB.FamilyInstance revitBeam)
{
  var baseGeometry = LocationToSpeckle(revitBeam);
  var baseLine = baseGeometry as ICurve;
  if (baseLine == null)
  {
    throw new Exception("Only line based Beams are currently supported.");
  }

  var speckleBeam = new RevitBeam();
  speckleBeam.type = Doc.GetElement(revitBeam.GetTypeId()).Name;
  speckleBeam.baseLine = baseLine;
  speckleBeam.level = ConvertAndCacheLevel(revitBeam, BuiltInParameter.INSTANCE_REFERENCE_LEVEL_PARAM);
  speckleBeam["@displayMesh"] = GetElementMesh(revitBeam);

  GetAllRevitParamsAndIds(speckleBeam, revitBeam);

  return speckleBeam;
}

----------------------------------------

TITLE: Installing Speckle Unreal via Git
DESCRIPTION: Command to clone the Speckle Unreal repository into your project's Plugins directory

LANGUAGE: bash
CODE:
git clone https://github.com/specklesystems/speckle-unreal

----------------------------------------

TITLE: Setting Clear Color and Alpha in TypeScript
DESCRIPTION: This method sets the pass's clear color and alpha. The color is represented as a number, and alpha is in the range of [0,1]. It warns that clearing will be executed on the current outputTarget.

LANGUAGE: typescript
CODE:
setClearColor(color: number, alpha: number): void

----------------------------------------

TITLE: Constructing Visualization Data with Pandas
DESCRIPTION: Functions to extract geometry vertices and calculate material metrics into Pandas DataFrames for visualization.

LANGUAGE: python
CODE:
def construct_points_df(levels: List[Base]):
    df_vertices = pd.DataFrame(columns=("x", "y", "z", "element"))

    vertices = []
    for level in levels:
        columns = level["@columns"]
        for column in columns:
            points = column.Vertices
            for p in points:
                vertices.append({"x": p.x, "y": p.y, "z": p.z, "element": "columns"})
        floorslab = level["@floorSlab"]
        points = floorslab.Vertices
        for p in points:
            vertices.append({"x": p.x, "y": p.y, "z": p.z, "element": "floorSlab"})

    return df_vertices.append(vertices)

----------------------------------------

TITLE: Receiving Data with Default Transport in C#
DESCRIPTION: Demonstrates how to receive data using the default SQLite Transport. It uses the Operations.Receive method with an object ID to retrieve the data.

LANGUAGE: csharp
CODE:
var myDataId = await Operations.Send( myData );

var myData = await Operations.Receive( myDataId );

----------------------------------------

TITLE: Custom Speckle Converter Class in C++
DESCRIPTION: Implementation of a custom converter class that implements the ISpeckleConverter interface

LANGUAGE: cpp
CODE:
UCLASS(BlueprintType, Blueprintable)
class SPECKLEUNREAL_API UMyConverter : public UObject, public ISpeckleConverter
{
	GENERATED_BODY()

public:
	virtual UObject* ConvertToNative_Implementation(const UBase* SpeckleBase, UWorld*, TScriptInterface<ISpeckleConverter>&) override;
	
	virtual bool CanConvertToNative_Implementation(TSubclassOf<UBase> BaseType) override;

}

----------------------------------------

TITLE: Applying Layers in BaseGPass
DESCRIPTION: Protected method for applying object layers in a rendering pass. It takes a Camera object as a parameter and is provided for extending types to implement.

LANGUAGE: typescript
CODE:
protected applyLayers(camera: Camera | null)

----------------------------------------

TITLE: Receiving Objects from Speckle Server in Python
DESCRIPTION: Code for authenticating with Speckle server, retrieving commit data and receiving objects using SpeckleClient and ServerTransport.

LANGUAGE: python
CODE:
from specklepy.api import operations
from specklepy.api.client import SpeckleClient
from specklepy.api.credentials import get_default_account
from specklepy.transports.server import ServerTransport

# create and authenticate a client
client = SpeckleClient(host=HOST)
account = get_default_account()
client.authenticate_with_account(account)

# get the specified commit data
commit = client.commit.get(STREAM_ID, COMMIT_ID)

# create an authenticated server transport from the client and receive the commit obj
transport = ServerTransport(client=client, stream_id=STREAM_ID)
res = operations.receive(commit.referencedObject, transport)

# get the list of levels from the received object
levels = res["data"]

----------------------------------------

TITLE: Creating and Retrieving Streams in Speckle Python SDK
DESCRIPTION: This code snippet shows how to create a new stream and retrieve it using the SpeckleClient. It demonstrates basic stream operations using the Speckle Python SDK.

LANGUAGE: python
CODE:
# create a new stream. this returns the stream id
new_stream_id = client.stream.create(name="a shiny new stream")

# use that stream id to get the stream from the server
new_stream = client.stream.get(id=new_stream_id)

----------------------------------------

TITLE: Navigating to UI Directory
DESCRIPTION: Command to change the current directory to the UI folder within the cloned repository.

LANGUAGE: bash
CODE:
cd speckle-sketchup/ui

----------------------------------------

TITLE: Initializing RenderTree for Entire Model in TypeScript
DESCRIPTION: This snippet demonstrates how to get a RenderTree instance for the entire model using the worldTree object.

LANGUAGE: typescript
CODE:
const renderTree = worldTree.getRenderTree();

----------------------------------------

TITLE: Defining Material Classes with Speckle Base
DESCRIPTION: Implementation of material classes by subclassing Speckle Base to add material properties like density and embodied carbon.

LANGUAGE: python
CODE:
class Concrete(Base):
    density: str = 2400
    embodied_carbon = 0.159

class Glass(Base):
    density: str = 2500
    embodied_carbon = 0.85

class Steel(Base):
    density: str = 7800
    embodied_carbon = 1.37

MATERIALS_MAPPING = {
    "@floorSlab": "Concrete",
    "@banister": "Glass",
    "@facade": "Glass",
    "@columns": "Steel",
}

----------------------------------------

TITLE: Starting Webpack Live Reload Server for Speckle Viewer Development
DESCRIPTION: Command to start a webpack live reload server for development purposes. This allows access to an example at http://localhost:9000/example.html.

LANGUAGE: console
CODE:
npm run serve

----------------------------------------

TITLE: Cloning Speckle SketchUp Repository
DESCRIPTION: Command to clone the Speckle SketchUp connector repository using git. This creates a local copy of the connector files.

LANGUAGE: bash
CODE:
git clone https://github.com/specklesystems/speckle-sketchup

----------------------------------------

TITLE: Setting Explosion Effect in TypeScript
DESCRIPTION: This method updates the explosion translation of objects. It linearly interpolates object positions between their current position and a maximum position based on the scene size. The time parameter controls the interpolation.

LANGUAGE: typescript
CODE:
setExplode(time: number): void

----------------------------------------

TITLE: Creating Dash Dashboard Layout
DESCRIPTION: Implementation of the Dash application layout with multiple visualization components and styling.

LANGUAGE: python
CODE:
import dash
import dash_core_components as dcc
import dash_html_components as html

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
app.title = "speckle-py demo"

app.layout = html.Div(
    children=[
        html.Div(
            children=[
                html.H1(children="speckle-py example", className="header-title"),
                html.P(
                    children="""Speckle is the open source data platform for AEC.""",
                    className="header-description",
                ),
            ],
            className="header",
        ),
        html.Div(
            children=[
                html.Div(
                    children=[
                        dcc.Graph(id="example-3d-scatter", figure=figures["vertices"])
                    ],
                    className="card",
                )
            ],
            className="wrapper",
        ),
    ],
)

----------------------------------------

TITLE: Loading Object in Speckle Viewer
DESCRIPTION: Example of how to load a 3D object into the Speckle Viewer using its URL.

LANGUAGE: js
CODE:
v.loadObject( 'https://app.speckle.systems/streams/3073b96e86/objects/e05c5834368931c9d9a4e2087b4da670' )

----------------------------------------

TITLE: Building SketchUp Connector UI
DESCRIPTION: Commands to navigate to the UI directory, install dependencies, and build the user interface files.

LANGUAGE: bash
CODE:
cd speckle-sketchup/ui
npm install
npm run build

----------------------------------------

TITLE: VisualDiffMode Enum Definition
DESCRIPTION: Defines visual diff display modes - PLAIN for transparency-based diff and COLORED for color-coded diff visualization.

LANGUAGE: typescript
CODE:
enum VisualDiffMode {
  PLAIN,
  COLORED,
}

----------------------------------------

TITLE: Mesh Property Optimization Examples in C#
DESCRIPTION: Demonstrates two approaches to defining mesh properties, showing both inefficient and optimized implementations for handling vertex data.

LANGUAGE: csharp
CODE:
public class Mesh : Base
{
    public List<Point> vertices { get; set; }
    // ...
}

LANGUAGE: csharp
CODE:
public class Mesh : Base
{
  // Typed array of 3
    public List<double> vertices { get; set; }
    // ...
}

----------------------------------------

TITLE: Bootstrapping Speckle Frontend with Viewer
DESCRIPTION: Commands to bootstrap the Speckle Frontend with the Viewer and install packages using Lerna. This step is necessary after building the Viewer.

LANGUAGE: sh
CODE:
cd packages/frontend
lerna bootstrap

----------------------------------------

TITLE: Accessing Nested Record Fields in Power BI
DESCRIPTION: Formula demonstrating how to access deeply nested fields within Speckle record objects, specifically accessing a parameter value from within a parameters collection.

LANGUAGE: powerquery
CODE:
[data][parameters][parameter_name_1][value]

----------------------------------------

TITLE: Removing Visual Diff with undiff() Method
DESCRIPTION: Removes any visual diffing and unloads models previously loaded for diffing.

LANGUAGE: typescript
CODE:
async undiff(): Promise<void>

----------------------------------------

TITLE: Implementing Chunkable Mesh Properties in C#
DESCRIPTION: Shows how to implement chunking for large mesh data properties using the [Chunkable] attribute along with [DetachProperty] to manage memory efficiently.

LANGUAGE: csharp
CODE:
public class Mesh : Base
{
    [DetachProperty]
    [Chunkable(20000)] // Chunks this array into batches of 20k numbers
    public List<double> vertices { get; set; } = new List<double>();

    [DetachProperty]
    [Chunkable(20000)] // Chunks this array into batches of 20k numbers
    public List<int> faces { get; set; } = new List<int>();

    [DetachProperty]
    [Chunkable(20000)] // Chunks this array into batches of 20k numbers
    public List<int> colors { get; set; } = new List<int>();

    [DetachProperty]
    [Chunkable(20000)] // Chunks this array into batches of 20k numbers
    public List<double> textureCoordinates { get; set; } = new List<double>();
}

----------------------------------------

TITLE: Displaying Speckle Stream Commits in Vue.js
DESCRIPTION: This code snippet demonstrates how to display Speckle stream commits in a Vue.js component. It includes a data table with pagination and column selection functionality.

LANGUAGE: Vue.js
CODE:
<template lang="html">
  <WelcomeView v-if="!$store.getters.isAuthenticated" />
  <v-container v-else class="home pa-6">
    <stream-search
      @selected="$store.dispatch('handleStreamSelection', $event)"
    />
    <h2 class="pt-6 primary--text">
      <span v-if="selectedStream">
        {{ selectedStream.name }} — {{ selectedStream.id }}
        <v-btn
          outlined
          text
          small
          class="ml-3"
          :href="serverUrl + '/streams/' + selectedStream.id"
        >
          View in server
        </v-btn>
        <v-btn
          outlined
          text
          small
          class="ml-3"
          color="error"
          @click="$store.dispatch('clearStreamSelection')"
        >
          Clear selection
        </v-btn>
      </span>
      <span v-else>
        <em>No stream selected. Find one using the search bar 👆🏼</em>
      </span>
    </h2>

    <div class="pt-6">
      <v-select
        v-model="selectedKeys"
        :items="availableKeys"
        chips
        label="Select data to display"
        multiple
      ></v-select>
      <h3 class="pa-2 primary--text">Stream commits:</h3>
      <v-data-table
        :loading="loading"
        :headers="filteredHeaders"
        :items="commits ? commits.items : []"
        :options.sync="options"
        :server-items-length="commits ? commits.totalCount : null"
        disable-sort
        disable-filtering
        :disable-pagination="loading"
        class="elevation-1"
      ></v-data-table>
    </div>
  </v-container>
</template>

<script>
import StreamSearch from "@/components/StreamSearch"
import WelcomeView from "@/components/WelcomeView"

export default {
  name: "HomeView",
  components: { WelcomeView, StreamSearch },
  data: () => ({
    loading: false,
    options: {
      itemsPerPage: 5
    },
    serverUrl: process.env.VUE_APP_SERVER_URL,
    selectedKeys: ["id", "message", "branchName", "authorName"]
  }),
  mounted() {
    var storedOpts = this.$store.state.tableOptions
    if (storedOpts) this.options = storedOpts
  },
  computed: {
    selectedStream() {
      return this.$store.state.currentStream
    },
    previousCursors() {
      return this.$store.state.previousCursors || [null]
    },
    commits() {
      return this.$store.state.latestCommits
    },
    availableKeys() {
      var keys = {}
      this.commits?.items.forEach(obj => {
        Object.keys(obj).forEach(key => {
          if (!keys[key]) {
            keys[key] = true
          }
        })
      })
      return Object.keys(keys)
    },
    filteredHeaders() {
      return this.selectedKeys.map(key => ({
        text: key,
        value: key
      }))
    }
  },
  watch: {
    options: {
      async handler(val, oldval) {
        this.$store.commit("setTableOptions", val)
        if (oldval.page && val.page != oldval.page) {
          if (val.page > oldval.page) {
            this.loading = true
            var cursor = this.$store.state.latestCommits.cursor
            await this.$store.dispatch("getCommits", cursor)
            this.$store.commit("addCursorToPreviousList", cursor)
            this.loading = false
          } else {
            console.log("page down")
            this.loading = true
            await this.$store.dispatch(
              "getCommits",
              this.previousCursors[val.page - 1]
            )
            this.loading = false
          }
        }
      },
      deep: true
    }
  }
}
</script>

----------------------------------------

TITLE: Displaying Banner Ribbon with Important Information in HTML
DESCRIPTION: This HTML snippet creates a banner ribbon to display important information about the PowerBI data connector and model viewer visual. It includes a note about an upcoming 'Next Gen' version that will change how the connector works.

LANGUAGE: html
CODE:
<div class="banner-ribbon">
  <span><b>Important</b>: This guide features the V2 PowerBI data connector and model viewer visual.</span>
  <span class="next-gen">Next Gen is on its way, radically changing how the PowerBI connector works!</span>
</div>

----------------------------------------

TITLE: Validating Webhook Signature in Python
DESCRIPTION: This code snippet demonstrates how to validate the X-WEBHOOK-SIGNATURE header in Python to ensure the authenticity of incoming webhook requests.

LANGUAGE: python
CODE:
import hmac
# ...

expected_signature = hmac.new(SHARED_SECRET.encode(), payload_json.encode(), 'sha256').hexdigest()
if not hmac.compare_digest(expected_signature, SIGNATURE_FROM_HEADER):
    print('Ignoring request with invalid signature')
    return

----------------------------------------

TITLE: Inherited Usage of Base Object in C#
DESCRIPTION: Example showing how to create custom classes inheriting from Base with strongly typed properties while maintaining dynamic capability.

LANGUAGE: csharp
CODE:
public class Point : Base {
  // define a set of strongly typed properties
  public double x { get; set; }
  public double y { get; set; }
  public double z { get; set; }
}

// Strongly typed props behave as you would expect them to:
var myPt = new Point();
myPt.x = 10;
var whatIsX = myPt.x;

// With a dynamic property, things are a bit more verbose, but still manageable:
((dynamic)myPt).bar = "baz";
var whatIsBar = ((dynamic)myPt).bar as string; // "baz"

// Alternative syntax, if you actually pass the property name at runtime:
var whatIsBar = myPt["bar"] as string; // "baz"

----------------------------------------

TITLE: Dashboard CSS Styling
DESCRIPTION: CSS styles for the Dash dashboard layout including cards, headers and general styling.

LANGUAGE: css
CODE:
body {
  font-family: "Roboto", sans-serif;
  margin: 0;
  background-color: #f0f0f0;
}

.header {
  background-color: #0a2948;
  height: 256px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.header-title {
  color: #fafafa;
  font-size: 48px;
  font-weight: bold;
  text-align: center;
  font-family: "Space Mono";
  margin: 0 auto;
}

----------------------------------------

TITLE: Displaying Rounded Drop Shadow Image in HTML
DESCRIPTION: This HTML snippet embeds an image with a rounded drop shadow effect, likely demonstrating the object tooltip functionality in the PowerBI viewer.

LANGUAGE: html
CODE:
<img class="rounded-dropshadow" src="./img-powerbi-visual/14-object-tooltip.gif">

----------------------------------------

TITLE: Displaying Speckle Commit Preview Image in Markdown
DESCRIPTION: Example of embedding a commit preview image using Markdown image syntax. Shows how to reference a specific commit preview from the Speckle preview endpoint.

LANGUAGE: markdown
CODE:
![speckle haus commit](https://app.speckle.systems/preview/3073b96e86/commits/604bea8cc6)

----------------------------------------

TITLE: Detaching Properties Example in C#
DESCRIPTION: Demonstration of how to detach properties in Base objects using the @ symbol prefix for property names.

LANGUAGE: csharp
CODE:
public class Foo : Base { }
public class Bar : Base { }

var foo = new Foo();
var bar = new Bar();

foo["@bar"] = bar;

----------------------------------------

TITLE: Handling Sensitive Data Inputs in C#
DESCRIPTION: Illustrates how to create a secure input field for sensitive data like API keys in C# using the [Secret] attribute.

LANGUAGE: csharp
CODE:
public class FunctionInputs
{
    [Secret]  // Marks this as sensitive data
    [DisplayName("API Key")]
    public string ApiKey { get; set; }
}

----------------------------------------

TITLE: Creating Manual Account Configuration in JSON
DESCRIPTION: JSON structure for manually adding a Speckle account without using Manager. Includes token, server info, and user info fields.

LANGUAGE: json
CODE:
{
  "token": "YOUR-TOKEN-HERE",
  "serverInfo": {
    "name": "Server Name",
    "company": "Company Name",
    "url": "https://YOUR-SERVE-URL-HERE"
  },
  "userInfo": {
    "id": "YOUR-USER-ID",
    "name": "First Last",
    "email": "firstlast@email.com"
  }
}

----------------------------------------

TITLE: Listing Kubernetes Nodes
DESCRIPTION: Command to verify node provisioning in the Kubernetes cluster

LANGUAGE: shell
CODE:
kubectl get nodes --context "${YOUR_CLUSTER_CONTEXT_NAME}"

----------------------------------------

TITLE: Filtering Windows in Speckle Data
DESCRIPTION: LINQ query to filter windows from flattened Speckle data based on category

LANGUAGE: csharp
CODE:
var windows = flatData.FindAll(obj => (string)obj["category"] == "Windows");

----------------------------------------

TITLE: Sending Data in Unity Game Time
DESCRIPTION: Example of how to send data to Speckle during game time using the Sender component.

LANGUAGE: csharp
CODE:
var sender = myGameObject.AddComponent<Sender>();
sender.Send(projectId, objs);

----------------------------------------

TITLE: Creating a Custom Speckle Object in C#
DESCRIPTION: C# code snippet for creating a custom Speckle object with properties inside a Grasshopper C# script node.

LANGUAGE: C#
CODE:
var speckleObject = new Speckle.Core.Models.Base();
speckleObject["aProperty"] = "A property value";
speckleObject["aListProperty"] = new List<double>{ 1, 2, 3, 4, 5 };
A = speckleObject;

----------------------------------------

TITLE: Creating Kubernetes Namespace
DESCRIPTION: Command to create a dedicated namespace for Speckle deployment

LANGUAGE: shell
CODE:
kubectl create namespace speckle --context "${YOUR_CLUSTER_CONTEXT_NAME}"

----------------------------------------

TITLE: Creating a Stream with Google Apps Scripts and Speckle API
DESCRIPTION: This function demonstrates how to make a GraphQL mutation to create a new stream using Google Apps Scripts. It requires a personal access token and server address.

LANGUAGE: javascript
CODE:
function createStream() {
  let url = "https://YOUR_SERVER_ADDRESS/graphql";
  let graphql = JSON.stringify({
    query: `mutation streamCreate($myStream: StreamCreateInput!) { streamCreate(stream: $myStream) }`,
    variables: {
      myStream: {
        name: "Sample Stream",
        description: "Created from Google Sheets!",
      },
    },
  });
  let params = {
    method: "POST",
    payload: graphql,
    headers: {
      "Content-Type": "application/json",
      Authorization: "Bearer YOUR_PERSONAL_TOKEN",
    },
  };
  var response = UrlFetchApp.fetch(url, params);

  Logger.log(response);
}

----------------------------------------

TITLE: Accessing Speckle Properties in Unity
DESCRIPTION: Demonstrates how to access and modify Speckle properties attached to GameObjects.

LANGUAGE: csharp
CODE:
SpeckleProperties props = myGameObject.GetComponent<SpeckleProperties>();

// props.Data is a IDictionary<string, object>

// you can check for a property like this:
if(pros.Data.ContainsKey("area")
   && Data["area"] is int area)
{
    Debug.Log(area);
}

//And Add a property like this
pros.Data.Add("area", 250);

----------------------------------------

TITLE: Installing Speckle Blender Development Environment
DESCRIPTION: Commands for setting up a local development environment for the Speckle Blender connector using Poetry package manager.

LANGUAGE: shell
CODE:
git clone https://github.com/specklesystems/speckle-blender
cd ./speckle-blender

LANGUAGE: shell
CODE:
poetry lock --no-update
poetry install --with dev

----------------------------------------

TITLE: Configuring Speckle Server on DigitalOcean Droplet
DESCRIPTION: Command to run the setup script for reconfiguring an existing Speckle Server installation on a DigitalOcean droplet.

LANGUAGE: shell
CODE:
/opt/speckle-server/setup.py

----------------------------------------

TITLE: Fetching User Data with Google Apps Scripts and Speckle API
DESCRIPTION: This function demonstrates how to make a GraphQL query to fetch the currently logged-in user's data using Google Apps Scripts. It requires a personal access token and server address.

LANGUAGE: javascript
CODE:
function getMe() {
  let url = "https://YOUR_SERVER_ADDRESS/graphql";
  let graphql = JSON.stringify({
    query: `query User {
                      user{
                        id,
                        email,
                        name
                      }
                    }`,
    variables: null,
  });
  let params = {
    method: "POST",
    payload: graphql,
    headers: {
      "Content-Type": "application/json",
      Authorization: "Bearer YOUR_PERSONAL_TOKEN",
    },
  };
  var response = UrlFetchApp.fetch(url, params);

  Logger.log(response);
}

----------------------------------------

TITLE: Running Speckle Command in Rhino
DESCRIPTION: Command to open the Speckle Desktop UI panel in Rhino. The command 'Speckle' replaces the legacy 'SpecklePanel' command.

LANGUAGE: text
CODE:
Speckle

----------------------------------------

TITLE: Formatting Layer Names for Received Data in AutoCAD/Civil 3D
DESCRIPTION: Describes the format used for layer names when receiving data in AutoCAD or Civil 3D through the Speckle connector. The layer name includes the project, model, and version information as a prefix.

LANGUAGE: text
CODE:
project[ model @ version id ]

----------------------------------------

TITLE: Creating Directory for Speckle Deployment
DESCRIPTION: Creates a directory to store the Speckle server deployment files.

LANGUAGE: bash
CODE:
mkdir /opt/speckle/

----------------------------------------

TITLE: Wall Class Definition in C#
DESCRIPTION: Example class showing the structure of a Wall object in Speckle, demonstrating various properties including baseline curve and display value representations.

LANGUAGE: csharp
CODE:
public class Wall : Base
{
    public double height { get; set; }

    public ICurve baseLine { get; set; }

    public string units { get; set; }

    [DetachProperty]
    public List<Base> elements { get; set; }

    [DetachProperty]
    public List<Mesh> displayValue { get; set; }
}

----------------------------------------

TITLE: Opening Speckle Mapper in Rhino
DESCRIPTION: Command to open the Rhino Mapper panel for BIM element mapping. Can be accessed via toolbar or command line.

LANGUAGE: text
CODE:
SpeckleMappings

----------------------------------------

TITLE: Implementing Vue Component Redirect to Speckle Community
DESCRIPTION: Vue component markup that redirects the browser to the Speckle community website. Uses frontmatter to disable the sidebar and includes a Redirect component with the target URL.

LANGUAGE: vue
CODE:
---
sidebar: false
---

<Redirect url="https://speckle.community/" />

----------------------------------------

TITLE: JSON Variable for Revit Parameter Query in GraphQL
DESCRIPTION: This JSON object defines the 'myQuery' variable used in the GraphQL query for Revit parameters. It specifies the search criteria for the applicationId field.

LANGUAGE: json
CODE:
{
    "myQuery": [
        {
            "field":"applicationId",
            "value":"6cbabf1d-e8d0-47f0-ac4d-9a7923128d37-0006fb07",
            "operator":"="
        }
    ]
}

----------------------------------------

TITLE: Initializing Avalonia Desktop UI for Speckle Connector
DESCRIPTION: Code for instantiating and launching the Speckle Desktop UI using Avalonia framework. Includes setup of the main window and application builder configuration.

LANGUAGE: csharp
CODE:
public static Window MainWindow { get; private set; }

public static AppBuilder BuildAvaloniaApp() => AppBuilder.Configure<DesktopUI2.App>()
  .UsePlatformDetect()
  .With(new SkiaOptions { MaxGpuResourceSizeBytes = 8096000 })
  .With(new Win32PlatformOptions { AllowEglInitialization = true, EnableMultitouch = false })
  .LogToTrace()
  .UseReactiveUI();

protected override Result Command()
{
  CreateOrFocusSpeckle();
  return Result.Success;
}

public static void CreateOrFocusSpeckle()
{
  if (MainWindow == null)
  {
    BuildAvaloniaApp().Start(AppMain, null);
  }

  MainWindow.Show();
}

private static void AppMain(Application app, string[] args)
{
  var viewModel = new MainWindowViewModel();
  MainWindow = new MainWindow
  {
    DataContext = viewModel
  };

  Task.Run(() => app.Run(MainWindow));
}

----------------------------------------

TITLE: Custom Object Model Parsing in C++
DESCRIPTION: Example of implementing a custom Object Model class with JSON parsing logic for Speckle objects

LANGUAGE: cpp
CODE:
bool UMyObjectModel::Parse(const TSharedPtr<FJsonObject> Obj, const TScriptInterface<ITransport> ReadTransport)
{
	if(!Super::Parse(Obj, ReadTransport)) return false;

	// Add your own JSON parsing here!
	// Remove explicit properties from DynamicProperties array
	
	// Simple example of parsing an optional number property:
	if(Obj->TryGetNumberField("myProperty", MyProperty)) DynamicProperties.Remove("myProperty");
	
	// Simple example of parsing an required number property:
	if(!Obj->TryGetNumberField("myProperty", MyProperty)) return false; // Return false on error, rather than fatal assertions
	DynamicProperties.Remove("myProperty");
	
	//Return true if parsed successfully
	return true;
}

----------------------------------------

TITLE: Python Default Traversal Implementation
DESCRIPTION: Python implementation of the default traversal function, showing equivalent functionality to the C# version.

LANGUAGE: python
CODE:
def get_default_traversal_func(can_convert_to_native: Callable[[Base], bool]) -> GraphTraversal:
    convertible_rule = TraversalRule(
      [can_convert_to_native],
      lambda _: {"elements", "@elements"},
    )

    default_rule = TraversalRule(
      [lambda _: True],
      lambda o: o.get_member_names(),
    )

    return GraphTraversal([convertible_rule, default_rule])

----------------------------------------

TITLE: Displaying Speckle Sharp Repository Structure
DESCRIPTION: This code snippet illustrates the directory structure of the Speckle Sharp repository, which includes the .NET SDK, various connectors (Rhino, Revit, Grasshopper, Dynamo, AutoCAD Civil), desktop UI, and Objects (the default interoperability kit).

LANGUAGE: text
CODE:
└── speckle-sharp
    ├── core
    ├── connector revit
    ├── connector rhino
    ├── connector dynamo
    ├── connector grasshopper
    ├── connector autocadcivil
    ├── desktopui
    └── objects
        ├── objects
        └── converters
            ├── revit
            ├── rhinogh
            ├── dynamo
            └── autocadcivil

----------------------------------------

TITLE: Implementing Custom Stream Menu Items
DESCRIPTION: Example of implementing custom menu items for streams in the Speckle UI.

LANGUAGE: csharp
CODE:
public override List<MenuItem> GetCustomStreamMenuItems()
{
  var menuItems = new List<MenuItem>
  {
    new MenuItem { Header="Test link", Icon="Home", Action =OpenLink},
    new MenuItem { Header="More items", Icon="List", Items = new List<MenuItem>
    {
      new MenuItem { Header="Sub item 1", Icon="Account" },
      new MenuItem { Header="Sub item 2", Icon="Clock" },
    }
    },
  };
  return menuItems;
}

public void OpenLink(StreamState state)
{
  Process.Start(new ProcessStartInfo(state.ServerUrl) { UseShellExecute = true });
}

----------------------------------------

TITLE: Speckle Converter Implementation in C++
DESCRIPTION: Example implementation of ConvertToNative method for a custom converter

LANGUAGE: cpp
CODE:
UObject* UMyConverter::ConvertToNative_Implementation(const UBase* SpeckleBase, UWorld* World, TScriptInterface<ISpeckleConverter>& AvailableConverters)
{
	const UMyObjectModel* m = Cast<UMyObjectModel>(SpeckleBase);
	
	if(m == nullptr) return nullptr;
	
	return MyObjectToNative(m);
}

AActor* UMyConverter::MyObjectToNative(const UMyObjectModel* MyObject, UWorld* World)
{
	// Conversion logic here!!
	// Convert MyObject into an Actor that we return
}

----------------------------------------

TITLE: Receiving Data with Custom Transport in C#
DESCRIPTION: Shows how to receive data using a custom transport, specifically a ServerTransport. It demonstrates passing the custom transport to the Operations.Receive method.

LANGUAGE: csharp
CODE:
var myData = await Operations.Receive(
	myDataId,
	remoteTransport: new ServerTransport( ... )
);

----------------------------------------

TITLE: Defining Detachable Building Structure Classes in C#
DESCRIPTION: Example showing how to define building-related classes with detachable properties using the [DetachProperty] attribute. Demonstrates the relationship between Building, Site and Level classes.

LANGUAGE: csharp
CODE:
public class Building : Base {
  [DetachProperty] // this attribute tells Speckle to store the value of the Site separately.
  public Site Site { get; set; }
  public List<Level> Levels { get; set; }
  public Owner { get; set; }
}

public class Level : Base {
  public double height { get; set; } = 3.2;
  public double baseElevation {get; set; } = 0;

  [DetachProperty]
  public List<Base> Elements { get; set; } // The actual walls, floors, columns, etc.
}

// Define a site globally
var mySite = new Site();

// Reference the same site in both buildings.
buildingA.Site = mySite;
buildingB.Site = mySite;

----------------------------------------

TITLE: Docker Compose Configuration for pgAdmin
DESCRIPTION: This YAML configuration sets up a pgAdmin container with specified environment variables, volume mapping, and network settings for use with Speckle.

LANGUAGE: yaml
CODE:
version: '3'
services:
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: 'admin@localhost.com'
      PGADMIN_DEFAULT_PASSWORD: 'admin'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - '127.0.0.1:16543:80'

networks:
  default:
    name: speckle-server

volumes:
  pgadmin-data:

----------------------------------------

TITLE: Building Speckle SketchUp UI
DESCRIPTION: Commands to install dependencies and build the user interface for the Speckle SketchUp connector. This creates the necessary HTML files for the connector.

LANGUAGE: bash
CODE:
npm install
npm run build

----------------------------------------

TITLE: Checking Kubernetes Cluster Contexts
DESCRIPTION: Command to list available Kubernetes cluster contexts to verify configuration

LANGUAGE: shell
CODE:
kubectl config get-contexts

----------------------------------------

TITLE: Implementing Connector Bindings Interface
DESCRIPTION: Implementation template for the ConnectorBindings abstract class that handles interactions between the host application and Speckle UI.

LANGUAGE: csharp
CODE:
public class ConnectorBindingsAECApp : ConnectorBindings
  {
    public override string GetActiveViewName()
    {
      throw new NotImplementedException();
    }

    public override List<MenuItem> GetCustomStreamMenuItems()
    {
      throw new NotImplementedException();
    }

    public override string GetDocumentId()
    {
      throw new NotImplementedException();
    }

    public override string GetDocumentLocation()
    {
      throw new NotImplementedException();
    }

    public override string GetFileName()
    {
      throw new NotImplementedException();
    }

    public override string GetHostAppName()
    {
      throw new NotImplementedException();
    }

    public override List<string> GetObjectsInView()
    {
      throw new NotImplementedException();
    }

    public override List<string> GetSelectedObjects()
    {
      throw new NotImplementedException();
    }

    public override List<ISelectionFilter> GetSelectionFilters()
    {
      throw new NotImplementedException();
    }

    public override List<StreamState> GetStreamsInFile()
    {
      throw new NotImplementedException();
    }

    public override Task<StreamState> ReceiveStream(StreamState state, ProgressViewModel progress)
    {
      throw new NotImplementedException();
    }

    public override void SelectClientObjects(string args)
    {
      throw new NotImplementedException();
    }

    public override Task SendStream(StreamState state, ProgressViewModel progress)
    {
      throw new NotImplementedException();
    }

    public override void WriteStreamsToFile(List<StreamState> streams)
    {
      throw new NotImplementedException();
    }
  }

----------------------------------------

TITLE: Checking pgAdmin Container Status with Docker
DESCRIPTION: This command filters Docker processes to show only those related to pgAdmin, which helps verify if pgAdmin is running.

LANGUAGE: shell
CODE:
docker ps --filter name='pgadmin'

----------------------------------------

TITLE: Locating SketchUp Plugins Folder on Windows
DESCRIPTION: Example path for the SketchUp Plugins folder on Windows. Users need to replace {YOU} with their username and {SketchUp_VERSION} with their SketchUp version.

LANGUAGE: bash
CODE:
C:\Users\{YOU}\AppData\Roaming\SketchUp\{SketchUp_VERSION}\SketchUp\Plugins

----------------------------------------

TITLE: Creating Kubernetes Secrets
DESCRIPTION: Command to create secrets for storing sensitive configuration data

LANGUAGE: shell
CODE:
kubectl create secret generic server-vars \
  --context "${YOUR_CLUSTER_CONTEXT_NAME}" \
  --namespace speckle \
  --from-literal=redis_url="${YOUR_REDIS_CONNECTION_STRING}" \
  --from-literal=postgres_url="${YOUR_POSTGRES_CONNECTION_STRING}" \
  --from-literal=s3_secret_key="${YOUR_SPACES_SECRET}" \
  --from-literal=session_secret="${YOUR_SECRET}" \
  --from-literal=email_password="${YOUR_EMAIL_SERVER_PASSWORD}"

----------------------------------------

TITLE: Direct Usage of Base Object in C#
DESCRIPTION: Examples showing how to use a raw Base object as a dynamic data structure, demonstrating both dot notation and dictionary-style property access.

LANGUAGE: csharp
CODE:
var myObject = new Base();

// setting properties using dot notation requires cast to dynamic
((dynamic)myObject).myNewProperty = "foo";

// alternatively, just pretend it's a dictionary!
myObject["myNewProperty2"] = "bar";

----------------------------------------

TITLE: Starting pgAdmin with Docker Compose
DESCRIPTION: This command starts the pgAdmin container in detached mode using the specified Docker Compose configuration file.

LANGUAGE: shell
CODE:
docker compose --file docker-compose-pgadmin.yml up --detach

----------------------------------------

TITLE: Accessing Basic Record Fields in Power BI
DESCRIPTION: Formula to extract a specific field from a Speckle record object. Used in custom column creation to access the 'category' field from the data record.

LANGUAGE: powerquery
CODE:
[data][category]

----------------------------------------

TITLE: Uploading Batch of Objects in JSON Format
DESCRIPTION: Example of the JSON format for uploading a batch of objects to the Speckle server. This shows the structure of a single object within the batch array.

LANGUAGE: json
CODE:
[{"id": "9b2cdb21da092dbd3558a4bc55b2cf7e", "speckle_type": "Base", "totalChildrenCount": 0, "numbers": [0.04667752874618203, 0.16370857295385177, 0.1008153029515465]}]

----------------------------------------

TITLE: Embedding 3D Viewer in HTML
DESCRIPTION: Example of embedding the Speckle 3D viewer in a webpage using an iframe element

LANGUAGE: html
CODE:
<iframe src="https://app.speckle.systems/projects/a632e7a784/models/1b47b19207#embed=%7B%22isEnabled%22%3Atrue%7D" width=600 height=400></iframe>

----------------------------------------

TITLE: GeometryData Interface Definition
DESCRIPTION: Defines the structure for raw geometry information including vertex attributes, transformations and metadata.

LANGUAGE: typescript
CODE:
interface GeometryData {
  attributes: Partial<Record<GeometryAttributes, number[]>>;
  bakeTransform: Matrix4;
  transform: Matrix4;
  metaData?: Record<string, any>;
  instanced?: boolean;
}

----------------------------------------

TITLE: Banner HTML Structure for PowerBI Documentation
DESCRIPTION: HTML markup for displaying an important notice banner about the V2 PowerBI data connector and model viewer visual, with styling for emphasis and next generation announcement.

LANGUAGE: html
CODE:
<div class="banner-ribbon">
  <span><b>Important</b>: This guide features the V2 PowerBI data connector and model viewer visual.</span>
  <span class="next-gen">Next Gen is on its way, radically changing how the PowerBI connector works!</span>
</div>

----------------------------------------

TITLE: Building and Running Custom Speckle Server Code
DESCRIPTION: Command to build and run a custom Speckle server implementation using Docker Compose.

LANGUAGE: bash
CODE:
cd [PATH_TO_SPECKLE-SERVER_REPOSITORY]
docker compose -f docker-compose-speckle.yml up --build -d

----------------------------------------

TITLE: Fetching Globals with Python Client
DESCRIPTION: Example of how to receive the latest version of stream globals using the Speckle Python client. The code demonstrates client initialization, authentication, and retrieving globals from a specific stream.

LANGUAGE: python
CODE:
# initialise and authenticate your client
stream_id = "62e5ff6a2b"
account = get_default_account()
client = SpeckleClient(host=account.serverInfo.url)
client.authenticate_with_account(account)
transport = ServerTransport(client=client, stream_id=stream_id)

# get the `globals` branch
branch = client.branch.get(stream_id, "globals")

# get the latest commit
latest_commit = branch.commits.items[0]

# receive the globals object
globs = operations.receive(latest_commit.referencedObject, transport)

----------------------------------------

TITLE: Initializing Section Tool and Outlines in Speckle Viewer (TypeScript)
DESCRIPTION: This snippet demonstrates how to create and initialize the Section Tool and Section Outlines extensions in the Speckle viewer. These tools provide customizable section planes and outline displays.

LANGUAGE: typescript
CODE:
const sections = viewer.createExtension(SectionTool);
viewer.createExtension(SectionOutlines);

----------------------------------------

TITLE: Creating HTML Container for Speckle Viewer
DESCRIPTION: Sets up the basic HTML structure with a full-viewport container div for the Speckle viewer and links to the TypeScript source file.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <title>Parcel Sandbox</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>

  <body>
    <div id="renderer" style="width:100%;height:100%;left:0px;top:0px;position:absolute" />

    <script src="src/index.ts"></script>
  </body>
</html>

----------------------------------------

TITLE: Running Speckle Server Dependencies for Development
DESCRIPTION: Command to start the required dependencies (PostgreSQL, Redis, MinIO) for a Speckle server development environment using Docker Compose.

LANGUAGE: bash
CODE:
cd [PATH_TO_SPECKLE-SERVER_REPOSITORY]
docker compose -f docker-compose-deps.yml up -d

----------------------------------------

TITLE: Cloning SketchUp Connector Repository
DESCRIPTION: Command to clone the Speckle SketchUp connector repository from GitHub to your local machine using git.

LANGUAGE: bash
CODE:
git clone https://github.com/specklesystems/speckle-sketchup

----------------------------------------

TITLE: Element Collection and Filtering in Python
DESCRIPTION: Implementation of filtering logic to collect specific elements from a Speckle model based on custom criteria. Demonstrates efficient querying patterns for element selection.

LANGUAGE: python
CODE:
def collect_elements(base):
    # Define reusable conditions
    is_beam = lambda obj: obj.speckle_type == "Objects.BuiltElements.Beam"
    is_long = lambda obj: getattr(obj, "length", 0) > 10.0
    has_material = lambda obj: "material" in obj.parameters
    
    # Combine for complex queries
    return base.query(lambda obj: 
        is_beam(obj) and is_long(obj) and has_material(obj)
    )

----------------------------------------

TITLE: Starting Speckle Server with Docker Compose
DESCRIPTION: Commands to start the Speckle server and its dependencies using Docker Compose.

LANGUAGE: bash
CODE:
cd /opt/speckle
docker compose up -d

----------------------------------------

TITLE: Installing Speckle Manager with Command-line Arguments
DESCRIPTION: Command-line arguments for silent and system-wide installation of Speckle Manager. These options allow for programmatic installation and specify whether to install for all users or the current user only.

LANGUAGE: bash
CODE:
/SILENT /SUPPRESSMSGBOXES /ALLUSERS

LANGUAGE: bash
CODE:
/SILENT /SUPPRESSMSGBOXES /CURRENTUSER

----------------------------------------

TITLE: Implementing Speckle Model Flattening in C#
DESCRIPTION: C# implementation for flattening a Speckle model's hierarchy into a linear list. Provides utility methods for traversing and collecting all Base objects in a model.

LANGUAGE: csharp
CODE:
using System.Collections.Generic;
using Speckle.Core.Models;

public static class SpeckleUtils
{
    public static List<Base> Flatten(Base baseObject)
    {
        var flattened = new List<Base>();

        void Traverse(Base obj)
        {
            if (obj == null) return;
            flattened.Add(obj);

            foreach (var prop in obj.GetDynamicMembers())
            {
                var value = obj[prop];

                if (value is List<Base> list)
                {
                    foreach (var item in list)
                        Traverse(item);
                }
                else if (value is Base nestedObj)
                {
                    Traverse(nestedObj);
                }
            }
        }

        Traverse(baseObject);
        return flattened;
    }
}

----------------------------------------

TITLE: JSON Variable for Parameter Value Query in GraphQL
DESCRIPTION: This JSON object defines the 'myQuery' variable used in the GraphQL query for filtering objects by parameter value. It specifies a condition where the parameter value should be less than 5.

LANGUAGE: json
CODE:
{
    "myQuery": [
        {
            "field":"parameters[0].value",
            "value":5,
            "operator":"<"
        }
    ]
}

----------------------------------------

TITLE: Creating a Custom Speckle Object in Python
DESCRIPTION: Python code snippet for creating a custom Speckle object with properties inside a Grasshopper Python script node.

LANGUAGE: Python
CODE:
import clr
clr.AddReferenceToFileAndPath("C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\netstandard\\v4.0_2.0.0.0__cc7b13ffcd2ddd51\\netstandard.dll")
clr.AddReferenceToFileAndPath("C:\\Users\\USERNAME\\AppData\\Roaming\\Grasshopper\\Libraries\\SpeckleGrasshopper2\\SpeckleCore2.dll")
import Speckle.Core.Models.Base as Base

speckleObject = Base()
speckleObject["aProperty"] = "A single item value"
speckleObject["aListProperty"] = [ 1, 2, 3, 4, 5 ]
a = speckleObject

----------------------------------------

TITLE: Implementing Speckle Model Flattening in Python
DESCRIPTION: Recursively flattens a Speckle model's hierarchical structure into a single list. Useful for bulk operations and simple queries without maintaining parent-child relationships.

LANGUAGE: python
CODE:
def flatten(base):
    """Recursively flattens all objects in a Speckle model into a list."""
    flattened = []

    def traverse(obj):
        if obj is None:
            return
        flattened.append(obj)
        for key, value in obj.__dict__.items():
            if isinstance(value, list):
                for item in value:
                    traverse(item)
            elif hasattr(value, "__dict__"):  # Check if it's a nested object
                traverse(value)

    traverse(base)
    return flattened

----------------------------------------

TITLE: Copying Backup File to pgAdmin Container
DESCRIPTION: This command copies a backup file from the local machine to the pgAdmin container for restoration.

LANGUAGE: shell
CODE:
docker cp BACKUP_FILE_NAME speckle-server-pgadmin-1:'/var/lib/pgadmin/storage/admin_localhost.com/'

----------------------------------------

TITLE: Implementing Vue Redirect Component
DESCRIPTION: A Vue component that performs a redirect to the Sketchup connector documentation page on speckle.systems website.

LANGUAGE: vue
CODE:
<Redirect url="https://www.speckle.systems/connectors/sketchup" />

----------------------------------------

TITLE: Starting Speckle Server in Development Mode
DESCRIPTION: Command to start the Speckle Server in development mode. This should be run in the server package directory after setting up the environment file.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Removing Postgres Container
DESCRIPTION: This command removes the stopped Postgres container, detaching it from its volume in preparation for upgrade.

LANGUAGE: shell
CODE:
docker rm speckle-server-postgres-1

----------------------------------------

TITLE: Starting Speckle Frontend in Development Mode
DESCRIPTION: Command to start the Speckle Frontend in development mode. This should be run in the frontend package directory after starting the server.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Defining Core Module Scopes in JavaScript
DESCRIPTION: This snippet defines an array of core module scopes for Speckle, including their names and descriptions. These scopes control access levels for various API operations.

LANGUAGE: javascript
CODE:
let coreModuleScopes = [
  {
    name: "server:setup",
    description: "Edit server information.",
  },
  {
    name: "tokens:read",
    description: `Access your api tokens.`,
  },
  {
    name: "tokens:write",
    description: `Create and delete api tokens on your behalf.`,
  },
  {
    name: "streams:read",
    description:
      "Read your streams & and any associated information (branches, tags, comments, objects, etc.)",
  },
  {
    name: "streams:write",
    description:
      "Create streams on your behalf and read your streams & any associated information (any associated information (branches, tags, comments, objects, etc.)",
  },
  {
    name: "profile:read",
    description: `Read your profile information`,
  },
  {
    name: "profile:email",
    description: `Access your email.`,
  },
  {
    name: "users:read",
    description: `Read other users' profile on your behalf.`,
  },
  {
    name: "users:email",
    description: "Access the emails of other users.",
  },
];

----------------------------------------

TITLE: Displaying Speckle Server Repository Structure
DESCRIPTION: This code snippet shows the directory structure of the Speckle Server repository, which contains the server backend, frontend web application, and 3D viewer.

LANGUAGE: text
CODE:
└── speckle-server
    ├── server
    ├── frontend
    └── viewer

----------------------------------------

TITLE: Configuring Section Tool Programmatically in Speckle Viewer (TypeScript)
DESCRIPTION: This code shows how to programmatically control the Section Tool in the Speckle viewer. It demonstrates toggling the tool and setting a custom section box size based on the scene dimensions.

LANGUAGE: typescript
CODE:
/** Enable the section tool */
sections.toggle();

/** Programatically apply a section box */
const box = new Box3().copy(viewer.getRenderer().sceneBox);
box.max.z *= 0.6;
sections.setBox(box);

----------------------------------------

TITLE: Displaying HTML Banner for Important Information in Markdown
DESCRIPTION: This snippet shows how to create an HTML banner within a Markdown file to highlight important information about the PowerBI connector version and upcoming changes.

LANGUAGE: markdown
CODE:
<div class="banner-ribbon">
  <span><b>Important</b>: This guide features the V2 PowerBI data connector and model viewer visual.</span>
  <span class="next-gen">Next Gen is on its way, radically changing how the PowerBI connector works!</span>
</div>

----------------------------------------

TITLE: Defining Basic Text and Number Inputs in C#
DESCRIPTION: Shows how to create text and number input fields with validation using attributes in C#. It includes a project name field and a maximum length field with a range constraint.

LANGUAGE: csharp
CODE:
public class FunctionInputs
{
    [DisplayName("Project Name")]
    [Description("Enter the project identifier")]
    public string ProjectName { get; set; }

    [Range(0, 100)]  // Validates user input
    [DisplayName("Maximum Length")]
    [Description("Maximum allowed length in meters")] 
    public double MaxLength { get; set; } = 10.0;
}

----------------------------------------

TITLE: Bounding Box Calculation Method
DESCRIPTION: Method to get the axis-aligned bounding box (AABB) of the entire top level BVH

LANGUAGE: typescript
CODE:
getBoundingBox(target?: Box3): Box3

----------------------------------------

TITLE: Reusable Component Classes for Speckle Elements
DESCRIPTION: Defines utility classes for common element checks and actions, providing a reusable framework for Speckle data manipulation and validation.

LANGUAGE: python
CODE:
class ElementChecks:
    @staticmethod
    def is_type(type_name: str):
        return lambda obj: obj.speckle_type == type_name
    
    @staticmethod
    def has_property(prop_name: str, min_value: float = None):
        def check(obj):
            value = getattr(obj, prop_name, None)
            return value is not None and (min_value is None or value > min_value)
        return check
    
    @staticmethod
    def meets_criteria(criteria: dict):
        return lambda obj: all(
            getattr(obj, prop) == value 
            for prop, value in criteria.items()
        )

class ElementActions:
    @staticmethod
    def tag_for_review(elem: Base, reason: str):
        if "review_notes" not in elem.parameters:
            elem.parameters["review_notes"] = []
        elem.parameters["review_notes"].append(reason)
    
    @staticmethod
    def calculate_metrics(elem: Base) -> dict:
        return {
            "volume": getattr(elem, "volume", 0),
            "material": elem.parameters.get("material", "unknown"),
            "level": getattr(elem, "level", "unknown")
        }

----------------------------------------

TITLE: Attaching Gradient Information to Objects in Python
DESCRIPTION: Demonstrates how to use the attach_info_to_objects method to add gradient visualization metadata to objects. This is an experimental feature that affects the model view UI.

LANGUAGE: python
CODE:
automate_context.attach_info_to_objects(
    category="Gradient Visualization",
    metadata={"gradient": True, "gradientValues": gradient_values},
    message="Values applied to objects in list order",
    object_ids=all_object_ids,
)