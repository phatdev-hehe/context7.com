TITLE: Listing Python Package Dependencies for FastGPT Project
DESCRIPTION: This snippet specifies the required Python packages and their versions for the FastGPT project. It includes FastAPI for web framework, NumPy and scikit-learn for numerical computing and machine learning, sentence-transformers and transformers for NLP tasks, and other utility libraries.

LANGUAGE: plaintext
CODE:
fastapi==0.101.1
numpy==1.24.3
pydantic==1.10.7
scikit_learn==1.2.2
sentence_transformers==2.2.2
sse_starlette==1.6.5
starlette==0.27.0
tiktoken==0.4.0
torch==2.0.1
transformers==4.31.0
uvicorn==0.23.2

----------------------------------------

TITLE: Python Package Dependencies
DESCRIPTION: List of Python package dependencies with specific version requirements needed to run the FastGPT project. Includes core ML libraries like transformers and PyTorch, web framework FastAPI, and utility packages for text processing and optimization.

LANGUAGE: text
CODE:
protobuf
transformers==4.30.2
cpm_kernels
torch>=2.0
gradio
mdtex2html
sentencepiece
accelerate
sse-starlette
fastapi==0.99.1
pydantic==1.10.7
uvicorn==0.21.1
xformers
bitsandbytes

----------------------------------------

TITLE: Python Package Dependencies List
DESCRIPTION: Detailed listing of Python packages and their specific versions required for the fastgpt project. Includes core ML libraries like torch and transformers, web framework FastAPI, and various utility packages for PDF processing, data handling, and computations.

LANGUAGE: plaintext
CODE:
acres==0.1.0
aiofiles==24.1.0
annotated-types==0.7.0
anyio==4.6.2.post1
certifi==2024.8.30
charset-normalizer==3.4.0
ci-info==0.3.0
click==8.1.7
coloredlogs==15.0.1
configobj==5.0.9
configparser==7.1.0
dol==0.2.83
etelemetry==0.3.1
fastapi==0.115.5
filelock==3.16.1
filetype==1.2.0
flatbuffers==24.3.25
frontend==0.0.3
fsspec==2024.10.0
ftfy==6.3.1
h11==0.14.0
httplib2==0.22.0
huggingface-hub==0.26.2
humanfriendly==10.0
i2==0.1.36
idna==3.10
importlib_resources==6.4.5
isodate==0.6.1
itsdangerous==2.2.0
Jinja2==3.1.4
joblib==1.4.2
loguru==0.7.2
looseversion==1.3.0
lxml==5.3.0
marker-pdf==0.3.10
MarkupSafe==3.0.2
mpmath==1.3.0
networkx==3.4.2
nibabel==5.3.2
nipype==1.9.1
numpy==2.1.3
nvidia-cublas-cu12==12.4.5.8
nvidia-cuda-cupti-cu12==12.4.127
nvidia-cuda-nvrtc-cu12==12.4.127
nvidia-cuda-runtime-cu12==12.4.127
nvidia-cudnn-cu12==9.1.0.70
nvidia-cufft-cu12==11.2.1.3
nvidia-curand-cu12==10.3.5.147
nvidia-cusolver-cu12==11.6.1.9
nvidia-cusparse-cu12==12.3.1.170
nvidia-nccl-cu12==2.21.5
nvidia-nvjitlink-cu12==12.4.127
nvidia-nvtx-cu12==12.4.127
onnxruntime==1.20.1
opencv-python==4.10.0.84
opencv-python-headless==4.10.0.84
packaging==24.2
pandas==2.2.3
pathlib==1.0.1
pdftext==0.3.19
pillow==10.4.0
pip==24.3.1
protobuf==5.28.3
prov==2.0.1
puremagic==1.28
pydantic==2.10.0
pydantic_core==2.27.0
pydantic-settings==2.6.1
pydot==3.0.2
PyMuPDF==1.24.14
pyparsing==3.2.0
pypdfium2==4.30.0
python-dateutil==2.9.0.post0
python-dotenv==1.0.1
python-multipart==0.0.17
pytz==2024.2
pyxnat==1.6.2
PyYAML==6.0.2
RapidFuzz==3.10.1
rdflib==6.3.2
regex==2024.11.6
requests==2.32.3
safetensors==0.4.5
scikit-learn==1.5.2
scipy==1.14.1
setuptools==75.6.0
simplejson==3.19.3
six==1.16.0
sniffio==1.3.1
starlette==0.41.3
surya-ocr==0.6.13
sympy==1.13.1
tabled-pdf==0.1.4
tabulate==0.9.0
texify==0.2.1
threadpoolctl==3.5.0
tokenizers==0.20.3
torch==2.5.1
tqdm==4.67.0
traits==6.4.3
transformers==4.46.3
triton==3.1.0
typing_extensions==4.12.2
tzdata==2024.2
urllib3==2.2.3
uvicorn==0.32.1
wcwidth==0.2.13
wheel==0.45.0

----------------------------------------

TITLE: Configuring Python Dependencies for FastGPT Project
DESCRIPTION: Comprehensive requirements file that specifies necessary Python packages and their versions. Includes PyTorch CUDA support, deep learning frameworks, audio processing libraries, and API dependencies with platform-specific conditions.

LANGUAGE: txt
CODE:
--extra-index-url https://download.pytorch.org/whl/cu118
conformer==0.3.2
deepspeed==0.15.1; sys_platform == 'linux'
diffusers==0.27.2
gdown==5.1.0
gradio==5.11.0
grpcio==1.57.0
grpcio-tools==1.57.0
hydra-core==1.3.2
HyperPyYAML==1.2.2
inflect==7.3.1
librosa==0.10.2
lightning==2.3.3
matplotlib==3.7.5
modelscope==1.15.0
networkx==3.1
omegaconf==2.3.0
onnxruntime-gpu; sys_platform == 'linux'
onnxruntime; sys_platform == 'darwin' or sys_platform == 'windows'
openai-whisper==20231117
protobuf==4.25
pydantic==2.7.0
rich==13.7.1
soundfile==0.12.1
tensorboard
wget==3.2
fastapi==0.111.0
fastapi-cli==0.0.4
WeTextProcessing==1.0.3

----------------------------------------

TITLE: Specifying Python Package Dependencies for FastGPT
DESCRIPTION: This snippet lists the required Python packages and their versions for the FastGPT project. It includes web framework, machine learning, embedding, validation, server, and utility libraries.

LANGUAGE: Text
CODE:
fastapi==0.104.1
transformers[sentencepiece]
FlagEmbedding==1.2.8
pydantic==1.10.13
uvicorn==0.17.6
itsdangerous
protobuf

----------------------------------------

TITLE: 发起基础对话请求
DESCRIPTION: 向FastGPT的对话接口发送基础的POST请求,包含chatId、stream、detail等参数。该请求会返回AI助手的回复内容。

LANGUAGE: bash
CODE:
curl --location --request POST 'http://localhost:3000/api/v1/chat/completions' \
--header 'Authorization: Bearer fastgpt-xxxxxx' \
--header 'Content-Type: application/json' \
--data-raw '{
    "chatId": "my_chatId",
    "stream": false,
    "detail": false,
    "responseChatItemId": "my_responseChatItemId",
    "variables": {
        "uid": "asdfadsfasfd2323",
        "name": "张三"
    },
    "messages": [
        {
            "role": "user",
            "content": "导演是谁"
        }
    ]
}'

----------------------------------------

TITLE: Configuring Cloudflare Worker for API Proxy in JavaScript
DESCRIPTION: This code sets up a Cloudflare Worker to proxy requests to the OpenAI API. It includes authentication, request modification, and CORS headers. The worker intercepts fetch events, validates an auth code, and forwards the request to the OpenAI API endpoint.

LANGUAGE: javascript
CODE:
const TELEGRAPH_URL = 'https://api.openai.com';

addEventListener('fetch', (event) => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  // 安全校验
  if (request.headers.get('auth') !== 'auth_code') {
    return new Response('UnAuthorization', { status: 403 });
  }

  const url = new URL(request.url);
  url.host = TELEGRAPH_URL.replace(/^https?:\/\//, '');

  const modifiedRequest = new Request(url.toString(), {
    headers: request.headers,
    method: request.method,
    body: request.body,
    redirect: 'follow'
  });

  const response = await fetch(modifiedRequest);
  const modifiedResponse = new Response(response.body, response);

  // 添加允许跨域访问的响应头
  modifiedResponse.headers.set('Access-Control-Allow-Origin', '*');

  return modifiedResponse;
}

----------------------------------------

TITLE: Installing Dependencies and Development Setup for FastGPT
DESCRIPTION: Commands for setting up the development environment, including permission setup and dependency installation. Includes special handling for Node >= 20.

LANGUAGE: shell
CODE:
# Give automatic script code execution permission (on non-Linux systems, you can manually execute the postinstall.sh file content)
chmod -R +x ./scripts/
# Executing under the code root directory installs all dependencies within the root package, projects, and packages
pnpm i

# Not make cmd
cd projects/app
pnpm dev

# Make cmd
make dev name=app

LANGUAGE: shell
CODE:
NODE_OPTIONS=--no-node-snapshot pnpm i

----------------------------------------

TITLE: Upgrading PgVector and Creating HNSW Index in PostgreSQL
DESCRIPTION: SQL commands to upgrade the PgVector extension, configure database parameters, and create an HNSW index for improved vector search performance. This includes updating the extension, setting maintenance_work_mem, reindexing the database, and creating a concurrent HNSW index on the modeldata table.

LANGUAGE: sql
CODE:
-- 升级插件名
ALTER EXTENSION vector UPDATE;
-- 插件是否升级成功，成功的话，vector插件版本为 0.5.0，旧版的为 0.4.1
\dx

-- 下面两个语句会设置 pg 在构建索引时可用的内存大小，需根据自身的数据库规格来动态配置，可配置为 1/4 的内存大小
alter system set maintenance_work_mem = '2400MB'; 
select pg_reload_conf();

-- 重构数据库索引和排序
REINDEX DATABASE postgres;

-- 开始构建索引，该索引构建时间非常久，直接点击右上角的叉，退出 Terminal 即可
CREATE INDEX CONCURRENTLY vector_index ON modeldata USING hnsw (vector vector_ip_ops) WITH (m = 16, ef_construction = 64);
-- 可以再次点击一键链接，进入 Terminal，输入下方命令，如果看到 "vector_index" hnsw (vector vector_ip_ops) WITH (m='16', ef_construction='64') 则代表构建完成（注意，后面没有 INVALID）
\d modeldata

----------------------------------------

TITLE: Helm Chart Values Configuration
DESCRIPTION: Comprehensive configuration values for the FastGPT Helm chart, including deployment options, database settings, and infrastructure parameters.

LANGUAGE: yaml
CODE:
| Key | Type | Default | Description |
|-----|------|---------|-------------|
| affinity | object | `{}` |  |
| autoscaling.enabled | bool | `false` |  |
| autoscaling.maxReplicas | int | `100` |  |
| autoscaling.minReplicas | int | `1` |  |
| autoscaling.targetCPUUtilizationPercentage | int | `80` |  |
| fullnameOverride | string | `""` |  |
| image.pullPolicy | string | `"IfNotPresent"` |  |
| image.repository | string | `"ghcr.io/labring/fastgpt"` |  |
| image.tag | string | `""` |  |
| imagePullSecrets | list | `[]` |  |
| ingress.annotations | object | `{}` |  |
| ingress.className | string | `""` |  |
| ingress.enabled | bool | `false` |  |
| ingress.hosts[0].host | string | `"chart-example.local"` |  |
| ingress.hosts[0].paths[0].path | string | `"/"` |  |
| ingress.hosts[0].paths[0].pathType | string | `"ImplementationSpecific"` |  |
| ingress.tls | list | `[]` |  |
| livenessProbe.httpGet.path | string | `"/"` |  |
| livenessProbe.httpGet.port | string | `"http"` |  |
| mongodb.architecture | string | `"replicaset"` |  |
| mongodb.auth.rootPassword | string | `"123456"` |  |
| mongodb.auth.rootUser | string | `"root"` |  |
| mongodb.enabled | bool | `true` | Enable or disable the built-in MangoDB |
| nameOverride | string | `""` |  |
| nodeSelector | object | `{}` |  |
| podAnnotations | object | `{}` |  |
| podLabels | object | `{}` |  |
| podSecurityContext | object | `{}` |  |
| postgresql.enabled | bool | `true` | Enable or disable the built-in PostgreSQL |
| postgresql.global.postgresql.auth.database | string | `"postgres"` | The default database of PostgreSQL |
| postgresql.global.postgresql.auth.postgresPassword | string | `"postgres"` | The password of PostgreSQL, default username is `postgres` |
| postgresql.image.repository | string | `"linuxsuren/pgvector"` | The PostgreSQL image which include the pgvector extension. See also the source code from https://github.com/LinuxSuRen/pgvector-docker |
| postgresql.image.tag | string | `"v0.0.1"` |  |
| readinessProbe.httpGet.path | string | `"/"` |  |
| readinessProbe.httpGet.port | string | `"http"` |  |
| replicaCount | int | `1` |  |
| resources | object | `{}` |  |
| securityContext | object | `{}` |  |
| service.port | int | `3000` |  |
| service.type | string | `"ClusterIP"` |  |
| serviceAccount.annotations | object | `{}` |  |
| serviceAccount.automount | bool | `true` |  |
| serviceAccount.create | bool | `true` |  |
| serviceAccount.name | string | `""` |  |
| tolerations | list | `[]` |  |
| volumeMounts | list | `[]` |  |
| volumes | list | `[]` |  |

----------------------------------------

TITLE: Setting FastGPT Environment Variables for API Proxy
DESCRIPTION: These environment variables configure FastGPT to use the Cloudflare Worker as a proxy for OpenAI API requests. OPENAI_BASE_URL specifies the worker's URL, and OPENAI_BASE_URL_AUTH sets the authentication code.

LANGUAGE: bash
CODE:
OPENAI_BASE_URL=https://xxxxxx/v1
OPENAI_BASE_URL_AUTH=auth_code

----------------------------------------

TITLE: Adding Environment Variables for FastGPT Pro and FastGPT Docker Images
DESCRIPTION: Configuration of environment variables for the FastGPT Pro and FastGPT Docker images to enable sandbox functionality and improve system logging.

LANGUAGE: bash
CODE:
LOG_LEVEL=debug
STORE_LOG_LEVEL=warn

----------------------------------------

TITLE: Configuring ReRank Models in FastGPT
DESCRIPTION: This JSON configuration snippet shows how to set up ReRank models in FastGPT, specifically for integrating Cohere's rerank model. It includes the model name, request URL, and authentication key.

LANGUAGE: json
CODE:
{
    "reRankModels": [
        {
            "model": "rerank-multilingual-v2.0",
            "name": "检索重排",
            "requestUrl": "https://api.cohere.ai/v1/rerank",
            "requestAuth": "Coherer上申请的key"
        }
    ]
}

----------------------------------------

TITLE: I18N Implementation in Next.js Pages
DESCRIPTION: Examples of implementing internationalization in Next.js pages using next-i18next, including server-side translation loading and client-side usage.

LANGUAGE: typescript
CODE:
// pages/yourPage.tsx
export async function getServerSideProps(context: any) {
  return {
    props: {
      currentTab: context?.query?.currentTab || TabEnum.info,
      ...(await serverSideTranslations(context.locale, ['publish', 'user']))
    }
  };
}

LANGUAGE: typescript
CODE:
// pages/yourPage.tsx
import { useTranslation } from 'next-i18next';

const YourComponent = () => {
  const { t } = useTranslation();

  return (
    <Button
      variant="outline"
      size="sm"
      mr={2}
      onClick={() => setShowSelected(false)}
    >
      {t('common:close')}
    </Button>
  );
};

export default YourComponent;

LANGUAGE: typescript
CODE:
// utils/i18n.ts
import { i18nT } from '@fastgpt/web/i18n/utils';

const staticContent = {
  id: 'simpleChat',
  avatar: 'core/workflow/template/aiChat',
  name: i18nT('app:template.simple_robot'),
};

export default staticContent;

----------------------------------------

TITLE: 发起包含图片/文件的对话请求
DESCRIPTION: 向FastGPT的对话接口发送包含图片或文件URL的POST请求。该请求允许用户在对话中包含图片和文件链接。

LANGUAGE: bash
CODE:
curl --location --request POST 'http://localhost:3000/api/v1/chat/completions' \
--header 'Authorization: Bearer fastgpt-xxxxxx' \
--header 'Content-Type: application/json' \
--data-raw '{
    "chatId": "abcd",
    "stream": false,
    "messages": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "导演是谁"
                },
                {
                    "type": "image_url",
                    "image_url": {
                        "url": "图片链接"
                    }
                },
                {
                    "type": "file_url",
                    "name": "文件名",
                    "url": "文档链接，支持 txt md html word pdf ppt csv excel"
                }
            ]
        }
    ]
}'

----------------------------------------

TITLE: 获取应用历史记录
DESCRIPTION: 获取某个应用的历史对话记录,包括chatId、更新时间、标题等信息。

LANGUAGE: bash
CODE:
curl --location --request POST 'http://localhost:3000/api/core/chat/getHistories' \
--header 'Authorization: Bearer {{apikey}}' \
--header 'Content-Type: application/json' \
--data-raw '{
    "appId": "appId",
    "offset": 0,
    "pageSize": 20,
    "source": "api"
}'

----------------------------------------

TITLE: Extracting Subtitle Information in JavaScript
DESCRIPTION: This function extracts number, time, and text information from subtitle content. It splits the input text into lines and categorizes each line based on its content type.

LANGUAGE: javascript
CODE:
function main({text}){
  const lines = text.split('\n');
  const timePattern = /\d{2}:\d{2}:\d{2},\d{3} --> \d{2}:\d{2}:\d{2},\d{3}/;
  const numberInfo = [];
  const timeInfo = [];
  const textInfo = [];
  let currentText = [];

  // 提取序号、时间戳和文本信息
  lines.forEach(line => {
    if (/^\d+$/.test(line.trim())) {
      numberInfo.push(line.trim());
    } else if (timePattern.test(line)) {
      timeInfo.push(line);
      if (currentText.length > 0) {
        textInfo.push(currentText.join(' '));
        currentText = [];
      }
    } else if (line.trim() === '') {
      // Skip empty lines
    } else {
      currentText.push(line.trim());
    }
  });

  if (currentText.length > 0) {
    textInfo.push(currentText.join(' '));
  }

  return { numberInfo, timeInfo, textInfo };
}

----------------------------------------

TITLE: Splitting Text into Chunks in JavaScript
DESCRIPTION: This function splits the input text array into chunks of a specified size, joining each chunk with a delimiter. It's used to prepare text for translation in manageable portions.

LANGUAGE: javascript
CODE:
function main({textArray}){
 const groupSize = 20
 const delimiter = '<T>'

  const result = [];

  for (let i = 0; i < textArray.length; i += groupSize) {
    result.push(textArray.slice(i, i + groupSize).join(delimiter));
  }

  return {result};
}

----------------------------------------

TITLE: 获取猜你想问推荐
DESCRIPTION: 根据当前对话上下文,获取AI推荐的后续问题列表。

LANGUAGE: bash
CODE:
curl --location --request POST 'http://localhost:3000/api/core/ai/agent/v2/createQuestionGuide' \
--header 'Authorization: Bearer {{apikey}}' \
--header 'Content-Type: application/json' \
--data-raw '{
    "appId": "appId",
    "chatId": "chatId",
    "questionGuide": {
        "open": true,
        "model": "GPT-4o-mini",
        "customPrompt": "你是一个智能助手，请根据用户的问题生成猜你想问。"
    }
}'

----------------------------------------

TITLE: 清空所有历史记录
DESCRIPTION: 清空通过API创建的所有对话历史记录。

LANGUAGE: bash
CODE:
curl --location --request DELETE 'http://localhost:3000/api/core/chat/clearHistories?appId={{appId}}' \
--header 'Authorization: Bearer {{apikey}}'

----------------------------------------

TITLE: 获取对话记录列表
DESCRIPTION: 获取某个对话的记录列表,包括每条记录的内容、反馈等信息。

LANGUAGE: bash
CODE:
curl --location --request POST 'http://localhost:3000/api/core/chat/getPaginationRecords' \
--header 'Authorization: Bearer {{apikey}}' \
--header 'Content-Type: application/json' \
--data-raw '{
    "appId": "appId",
    "chatId": "chatId",
    "offset": 0,
    "pageSize": 10,
    "loadCustomFeedbacks": true
}'

----------------------------------------

TITLE: Initializing FastGPT V4.6 - Step 1
DESCRIPTION: This cURL command initializes the first part of FastGPT V4.6 upgrade. It sends a POST request to the '/api/admin/initv46' endpoint with the rootkey for authentication.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv46' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Initializing FastGPT V4.6 - Step 2
DESCRIPTION: This cURL command initializes the second part of FastGPT V4.6 upgrade. It sends a POST request to the '/api/admin/initv46-2' endpoint with the rootkey for authentication.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv46-2' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Fixing FastGPT V4.6 Data Display Issue
DESCRIPTION: This cURL command fixes a data display issue in FastGPT V4.6 related to file imports. It sends a POST request to the '/api/admin/initv46-fix' endpoint with the rootkey for authentication.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv46-fix' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Executing FastGPT V4.8.5 Initialization Script
DESCRIPTION: This cURL command initializes FastGPT V4.8.5 by sending a POST request to the initialization endpoint. It requires the rootkey for authentication and merges plugin data into the application table.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv485' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Executing FastGPT V4.8.5 Commercial Version Initialization Script
DESCRIPTION: This cURL command initializes the commercial version of FastGPT V4.8.5 by sending a POST request to a specific endpoint. It requires the rootkey for authentication and resets the knowledge base permission system.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/init/485' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Executing Data Cleanup Script for FastGPT V4.7.1 Upgrade
DESCRIPTION: This cURL command sends a POST request to clean up invalid data in FastGPT. It removes invalid files, images, knowledge base collections, and vectors. The script requires the rootkey from environment variables and the FastGPT domain.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/clearInvalidData' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Initializing FastGPT v4.8.9 Commercial Version
DESCRIPTION: HTTP POST request to initialize multi-tenant notification settings in FastGPT v4.8.9 commercial version. Requires rootkey from environment variables and FastGPT commercial version domain.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/init/489' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: 删除单条对话记录
DESCRIPTION: 删除某个对话中的单条记录。

LANGUAGE: bash
CODE:
curl --location --request DELETE 'http://localhost:3000/api/core/chat/item/delete?contentId={{contentId}}&chatId={{chatId}}&appId={{appId}}' \
--header 'Authorization: Bearer {{apikey}}'

----------------------------------------

TITLE: Docker Build Commands for FastGPT
DESCRIPTION: Docker build commands for creating FastGPT images with and without proxy settings

LANGUAGE: shell
CODE:
# Docker cmd: Build image, not proxy
docker build -f ./projects/app/Dockerfile -t registry.cn-hangzhou.aliyuncs.com/fastgpt/fastgpt:v4.8.1 . --build-arg name=app
# Make cmd: Build image, not proxy
make build name=app image=registry.cn-hangzhou.aliyuncs.com/fastgpt/fastgpt:v4.8.1

# Docker cmd: Build image with proxy
docker build -f ./projects/app/Dockerfile -t registry.cn-hangzhou.aliyuncs.com/fastgpt/fastgpt:v4.8.1 . --build-arg name=app --build-arg proxy=taobao
# Make cmd: Build image with proxy
make build name=app image=registry.cn-hangzhou.aliyuncs.com/fastgpt/fastgpt:v4.8.1 proxy=taobao

----------------------------------------

TITLE: Initializing FastGPT Commercial Version with cURL Command
DESCRIPTION: cURL command to initialize the FastGPT commercial version. Requires replacing placeholders for rootkey and host with actual values.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/init/4811' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Commercial Version Initialization API Call
DESCRIPTION: cURL command for initializing the commercial version of FastGPT using rootkey authentication.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/init/v468' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: MongoDB Docker Container Restart Commands
DESCRIPTION: Commands to restart the MongoDB container after configuration updates.

LANGUAGE: bash
CODE:
# 重启 Mongo
docker-compose down
docker-compose up -d

----------------------------------------

TITLE: Configuring MongoDB Docker Container
DESCRIPTION: Docker compose configuration for MongoDB 5.0.18 with replica set initialization and authentication setup. Includes commands for key file generation and replica set configuration.

LANGUAGE: yml
CODE:
mongo:
    image: mongo:5.0.18
    # image: registry.cn-hangzhou.aliyuncs.com/fastgpt/mongo:5.0.18 # 阿里云
    container_name: mongo
    ports:
      - 27017:27017
    networks:
      - fastgpt
    command: mongod --keyFile /data/mongodb.key --replSet rs0
    environment:
      # 这里密码注意要和以前的一致
      - MONGO_INITDB_ROOT_USERNAME=username
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./mongo/data:/data/db
    entrypoint:
      - bash
      - -c
      - |
        openssl rand -base64 128 > /data/mongodb.key
        chmod 400 /data/mongodb.key
        chown 999:999 /data/mongodb.key
        echo 'const isInited = rs.status().ok === 1
        if(!isInited){
          rs.initiate({
              _id: "rs0",
              members: [
                  { _id: 0, host: "mongo:27017" }
              ]
          })
        }' > /data/initReplicaSet.js
        # 启动MongoDB服务
        exec docker-entrypoint.sh "$@" &

        # 等待MongoDB服务启动
        until mongo -u myusername -p mypassword --authenticationDatabase admin --eval "print('waited for connection')" > /dev/null 2>&1; do
          echo "Waiting for MongoDB to start..."
          sleep 2
        done

        # 执行初始化副本集的脚本
        mongo -u myusername -p mypassword --authenticationDatabase admin /data/initReplicaSet.js

        # 等待docker-entrypoint.sh脚本执行的MongoDB服务进程
        wait $!

----------------------------------------

TITLE: Setting Environment Variable for Commercial Version in JSON
DESCRIPTION: This snippet shows how to set the PRO_URL environment variable for the commercial version of FastGPT. It specifies the base URL for the commercial version image, which no longer needs to end with '/api'.

LANGUAGE: json
CODE:
PRO_URL=http://fastgpt-plugin.ns-hsss5d.svc.cluster.local:3000

----------------------------------------

TITLE: Executing V4.6.9 Initialization Script
DESCRIPTION: HTTP POST request to initialize V4.6.9 updates, including meter reset and data cleanup. Requires rootkey authentication and host domain replacement.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv469' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Configuring OneAPI Environment Variables
DESCRIPTION: Environment variable configuration for commercial version adding OneAPI URL and token settings.

LANGUAGE: plaintext
CODE:
OPENAI_BASE_URL=http://oneapi:3000/v1
CHAT_API_KEY=sk-fastgpt

----------------------------------------

TITLE: 配置Laf平台定义的系统提示词
DESCRIPTION: 这段代码展示了如何为Laf平台提供定义，以便在问题分类时更好地理解Laf相关问题。这些定义被放置在对话的最前面，作为系统提示词。

LANGUAGE: plaintext
CODE:
Laf 是云开发平台，可以快速的开发应用
Laf 是一个开源的 BaaS 开发平台（Backend as a Service)
Laf 是一个开箱即用的 serverless 开发平台
Laf 是一个集「函数计算」、「数据库」、「对象存储」等于一身的一站式开发平台
Laf 可以是开源版的腾讯云开发、开源版的 Google Firebase、开源版的 UniCloud

----------------------------------------

TITLE: 定义问题分类的Agent Function
DESCRIPTION: 这段代码定义了一个Agent Function，用于判断用户问题的类型。它包含了函数名称、描述、参数定义和返回值枚举。这个函数将用户问题分为三类：打招呼、Laf常见问题和其他问题。

LANGUAGE: javascript
CODE:
const agentFunction = {
    name: agentFunName,
    description: '判断用户问题的类型属于哪方面，返回对应的枚举字段',
    parameters: {
      type: 'object',
      properties: {
        type: {
          type: 'string',
          description: `打招呼，返回: abc；Laf 常见问题，返回：vvv；其他问题，返回：aaa`
          enum: ["abc","vvv","aaa"]
        }
      },
      required: ['type']
    }
};

----------------------------------------

TITLE: 删除历史记录
DESCRIPTION: 删除某个特定的历史对话记录。

LANGUAGE: bash
CODE:
curl --location --request DELETE 'http://localhost:3000/api/core/chat/delHistory?chatId={{chatId}}&appId={{appId}}' \
--header 'Authorization: Bearer {{apikey}}'

----------------------------------------

TITLE: 点赞/取消点赞对话记录
DESCRIPTION: 对某条对话记录进行点赞或取消点赞操作。

LANGUAGE: bash
CODE:
curl --location --request POST 'http://localhost:3000/api/core/chat/feedback/updateUserFeedback' \
--header 'Authorization: Bearer {{apikey}}' \
--header 'Content-Type: application/json' \
--data-raw '{
    "appId": "appId",
    "chatId": "chatId",
    "dataId": "dataId",
    "userGoodFeedback": "yes"
}'

----------------------------------------

TITLE: Initializing FastGPT V4.8.6 with HTTP Request
DESCRIPTION: This curl command initializes the application's inherited permissions for FastGPT V4.8.6. It requires replacing {{rootkey}} with the environment variable 'rootkey' and {{host}} with the FastGPT domain.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv486' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Updating LLMModel and VectorModel Configuration in JSON
DESCRIPTION: This snippet demonstrates how to update the configuration file for LLMModel and VectorModel by adding a 'provider' field. It includes an example of a complete model configuration with the new field.

LANGUAGE: json
CODE:
{
    "provider": "OpenAI", // 这是新增的
    "model": "gpt-4o",
    "name": "gpt-4o",
    "maxContext": 125000,
    "maxResponse": 4000,
    "quoteMaxToken": 120000,
    "maxTemperature": 1.2,
    "charsPointsPrice": 0,
    "censor": false,
    "vision": true,
    "datasetProcess": true,
    "usedInClassify": true,
    "usedInExtractFields": true,
    "usedInToolCall": true,
    "usedInQueryExtension": true,
    "toolChoice": true,
    "functionCall": false,
    "customCQPrompt": "",
    "customExtractPrompt": "",
    "defaultSystemChatPrompt": "",
    "defaultConfig": {},
    "fieldMap": {}
}

----------------------------------------

TITLE: Executing FastGPT V4.8.15 Upgrade Script
DESCRIPTION: This cURL command initiates the upgrade process for FastGPT v4.8.15. It sends a POST request to the FastGPT API endpoint, requiring the rootkey for authentication. This script resets application timing fields to reduce index size.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv4815' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Refreshing Free User Calculations for FastGPT Pro
DESCRIPTION: This cURL command recalculates the duration for free version users in FastGPT Pro. It sends a POST request to the FastGPT Pro API endpoint, requiring the rootkey for authentication. This script addresses an issue where user durations were not properly recalculated during previous version upgrades.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/init/refreshFreeUser' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Cleaning Invalid Data in FastGPT
DESCRIPTION: HTTP POST request to clean invalid data from FastGPT database. Addresses issues with previous cleanup timer by manually executing data cleanup. Requires rootkey and FastGPT host domain.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/clearInvalidData' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Initializing FastGPT v4.8.1 Database Tables
DESCRIPTION: HTTP POST request to initialize FastGPT v4.8.1 database tables. Requires rootkey from environment variables and FastGPT host domain. Should be executed when dataset.trainings table is empty to avoid data conflicts.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv481' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: 点踩/取消点踩对话记录
DESCRIPTION: 对某条对话记录进行点踩或取消点踩操作。

LANGUAGE: bash
CODE:
curl --location --request POST 'http://localhost:3000/api/core/chat/feedback/updateUserFeedback' \
--header 'Authorization: Bearer {{apikey}}' \
--header 'Content-Type: application/json' \
--data-raw '{
    "appId": "appId",
    "chatId": "chatId",
    "dataId": "dataId",
    "userBadFeedback": "yes"
}'

----------------------------------------

TITLE: 获取对话初始化信息
DESCRIPTION: 获取单个对话的初始化信息,包括chatId、appId、变量等。

LANGUAGE: bash
CODE:
curl --location --request GET 'http://localhost:3000/api/core/chat/init?appId={{appId}}&chatId={{chatId}}' \
--header 'Authorization: Bearer {{apikey}}'

----------------------------------------

TITLE: Executing FastGPT V4.8.17 Upgrade Script via cURL
DESCRIPTION: This cURL command sends a POST request to initiate the FastGPT v4.8.17 upgrade process. It requires the FastGPT host URL and the rootkey for authentication. The script moves user-bound OpenAI accounts to teams.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv4817' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Executing FastGPT V4.8.20 Upgrade Script via HTTP Request
DESCRIPTION: This cURL command sends a POST request to initiate the FastGPT v4.8.20 upgrade process. It requires the rootkey for authentication and the FastGPT domain. The script automatically loads the original configuration file models into the new model configuration.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv4820' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Executing Initialization API for FastGPT V4.4.7 Upgrade (Bash)
DESCRIPTION: This cURL command initiates the initialization process for FastGPT V4.4.7. It sends a POST request to the specified host with the rootkey for authentication. This process initializes PG indexes and converts empty file_id objects to manual objects.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv447' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Formatting Translated Subtitles in JavaScript
DESCRIPTION: This function combines the original subtitle information (numbers and timestamps) with the translated text to create a complete, formatted subtitle file. It maintains the original structure while inserting the translated content.

LANGUAGE: javascript
CODE:
function main({combinedText, transedText, timeInfo, currentIndex=0,numberInfo}){
  const textLines = combinedText.split('<T>');
  const resultLines = transedText.split('<T>');
  const combinedLines = [];

  resultLines.forEach((line, index) => {
    combinedLines.push(numberInfo[currentIndex+index]);
    combinedLines.push(timeInfo[currentIndex+index]);
    combinedLines.push(line)
    combinedLines.push(textLines[index]);
    combinedLines.push('');
  });

  const srtContent = combinedLines.join('\n');
  

    return {
        srtContent,
        currentIndex: currentIndex+textLines.length
    }
}

----------------------------------------

TITLE: 修改对话标题
DESCRIPTION: 修改某个对话的自定义标题。

LANGUAGE: bash
CODE:
curl --location --request POST 'http://localhost:3000/api/core/chat/updateHistory' \
--header 'Authorization: Bearer {{apikey}}' \
--header 'Content-Type: application/json' \
--data-raw '{
    "appId": "appId",
    "chatId": "chatId",
    "customTitle": "自定义标题"
}'

----------------------------------------

TITLE: 置顶/取消置顶对话
DESCRIPTION: 将某个对话置顶或取消置顶。

LANGUAGE: bash
CODE:
curl --location --request POST 'http://localhost:3000/api/core/chat/updateHistory' \
--header 'Authorization: Bearer {{apikey}}' \
--header 'Content-Type: application/json' \
--data-raw '{
    "appId": "appId",
    "chatId": "chatId",
    "top": true
}'

----------------------------------------

TITLE: Executing FastGPT V4.5.1 Initialization API Call
DESCRIPTION: This curl command initiates the initialization process for FastGPT V4.5.1. It sends a POST request to the specified host with the required rootkey for authentication. The initialization process includes renaming database fields, initializing knowledge base fields in the Mongo APP table, and setting up collections in both PG and Mongo databases.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv451' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Executing FastGPT V4.7 Initialization Script via cURL
DESCRIPTION: This bash command sends a POST request to initialize FastGPT V4.7. It requires replacing {{rootkey}} with the environment variable 'rootkey' and {{host}} with the user's domain.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv47' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Initializing FastGPT V4.8.4 Commercial Version
DESCRIPTION: HTTP POST request to initialize the commercial version of FastGPT V4.8.4. Replace {{rootkey}} with the environment variable 'rootkey' and {{host}} with the FastGPT commercial version domain.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/init/484' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: Executing FastGPT v4.8.8 Initialization Command
DESCRIPTION: cURL command to initialize FastGPT v4.8.8 upgrade process. Requires replacing {{rootkey}} with environment variable rootkey and {{host}} with FastGPT domain name. This command initializes knowledge base inheritance permissions.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://{{host}}/api/admin/initv488' \
--header 'rootkey: {{rootkey}}' \
--header 'Content-Type: application/json'

----------------------------------------

TITLE: 获取单个对话记录运行详情
DESCRIPTION: 获取单个对话记录的运行详情,包括各模块的运行时间、使用的模型等信息。

LANGUAGE: bash
CODE:
curl --location --request GET 'http://localhost:3000/api/core/chat/getResData?appId={{appId}}&chatId={{chatId}}&dataId={{dataId}}' \
--header 'Authorization: Bearer {{apikey}}'

----------------------------------------

TITLE: Adding OpenAI O1 Model Configuration in JSON
DESCRIPTION: JSON configuration for adding OpenAI O1 mini and preview models to FastGPT. Includes model specifications, token limits, and default settings.

LANGUAGE: json
CODE:
[
    {
        "model": "o1-mini",
        "name": "o1-mini",
        "avatar": "/imgs/model/openai.svg",
        "maxContext": 125000,
        "maxResponse": 65000,
        "quoteMaxToken": 120000,
        "maxTemperature": 1.2,
        "charsPointsPrice": 0,
        "censor": false,
        "vision": false,
        "datasetProcess": true,
        "usedInClassify": true,
        "usedInExtractFields": true,
        "usedInToolCall": true,
        "toolChoice": false,
        "functionCall": false,
        "customCQPrompt": "",
        "customExtractPrompt": "",
        "defaultSystemChatPrompt": "",
        "defaultConfig": {
            "temperature": 1
        }
    },
    {
        "model": "o1-preview",
        "name": "o1-preview",
        "avatar": "/imgs/model/openai.svg",
        "maxContext": 125000,
        "maxResponse": 32000,
        "quoteMaxToken": 120000,
        "maxTemperature": 1.2,
        "charsPointsPrice": 0,
        "censor": false,
        "vision": false,
        "datasetProcess": true,
        "usedInClassify": true,
        "usedInExtractFields": true,
        "usedInToolCall": true,
        "toolChoice": false,
        "functionCall": false,
        "customCQPrompt": "",
        "customExtractPrompt": "",
        "defaultSystemChatPrompt": "",
        "defaultConfig": {
            "temperature": 1
        }
    }
]

----------------------------------------

TITLE: Python Package Dependencies
DESCRIPTION: Specifies required Python packages and their versions needed to run the FastGPT project. Includes web framework FastAPI, machine learning libraries like transformers and FlagEmbedding, and utility packages.

LANGUAGE: txt
CODE:
fastapi==0.104.1
transformers[sentencepiece]
FlagEmbedding==1.2.8
pydantic==1.10.13
uvicorn==0.17.6
itsdangerous
protobuf

----------------------------------------

TITLE: Specifying Python Package Dependencies for FastGPT
DESCRIPTION: This snippet lists the required Python packages and their versions for the FastGPT project. It includes surya-ocr for optical character recognition, FastAPI for building APIs, and uvicorn as the ASGI server.

LANGUAGE: plaintext
CODE:
surya-ocr==0.5.0
fastapi==0.104.1
uvicorn==0.17.6

----------------------------------------

TITLE: Defining API Metadata and Types for FASTGPT NextAPI Template
DESCRIPTION: This snippet defines the API metadata, query and body types, and response type for a template API. It includes type definitions for the request parameters and the expected response structure.

LANGUAGE: typescript
CODE:
import type { ApiRequestProps, ApiResponseType } from '@fastgpt/service/type/next';
import { NextAPI } from '@/service/middleware/entry';

// This should be at the top of the file after the imports
export const ApiMetadata = {
  name: 'template example api',
  author: 'Finley',
  version: '0.1.0',
}

export type TemplateQuery = {
  // The App's ID
  appId?: string[],
  // The App's Name
  name: string,
  // The App's Description
  description: string | Something<AppDetailType>,
};

export type TemplateBody = {
  // The App's Name
  name: string,
};

// This is the response type for the API
export type TemplateResponse = AppDetailType;

----------------------------------------

TITLE: Implementing FASTGPT NextAPI Handler Function
DESCRIPTION: This snippet defines the handler function for the FASTGPT NextAPI template. It takes in the request and response objects as parameters and returns a Promise of the TemplateResponse type. The function is then wrapped with the NextAPI middleware.

LANGUAGE: typescript
CODE:
// This is the template API for FASTGPT NextAPI
async function handler(
  req: ApiRequestProps<TemplateBody, TemplateQuery>,
  res: ApiResponseType<any>,
): Promise<TemplateResponse> {

  return {}
}

export default NextAPI(handler);

----------------------------------------

TITLE: Retrieving FastGPT Application URL in Kubernetes
DESCRIPTION: Template logic that generates appropriate commands to access the FastGPT application URL based on the service type configuration. Handles Ingress, NodePort, LoadBalancer, and ClusterIP service types with specific commands for each scenario.

LANGUAGE: helm
CODE:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "fastgpt.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "fastgpt.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "fastgpt.fullname" . }} --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "fastgpt.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

----------------------------------------

TITLE: Defining Python Package Dependencies
DESCRIPTION: Lists the required Python packages and their version constraints needed for the FastGPT project. Includes deep learning frameworks and API libraries.

LANGUAGE: plaintext
CODE:
torch>=1.13
torchaudio
funasr>=1.1.1
fastapi
modelscope

----------------------------------------

TITLE: Inference Using ModelScope Pipeline
DESCRIPTION: Demonstrates how to perform inference using the ModelScope pipeline API for speech recognition tasks.

LANGUAGE: python
CODE:
from modelscope.pipelines import pipeline
from modelscope.utils.constant import Tasks

inference_pipeline = pipeline(
    task=Tasks.auto_speech_recognition,
    model='iic/SenseVoiceSmall',
    model_revision="master")

rec_result = inference_pipeline('https://isv-data.oss-cn-hangzhou.aliyuncs.com/ics/MaaS/ASR/test_audio/asr_example_zh.wav')
print(rec_result)

----------------------------------------

TITLE: Direct Model Inference
DESCRIPTION: Shows how to perform direct inference using the SenseVoiceSmall model class.

LANGUAGE: python
CODE:
from model import SenseVoiceSmall

model_dir = "iic/SenseVoiceSmall"
m, kwargs = SenseVoiceSmall.from_pretrained(model=model_dir)

res = m.inference(
    data_in="https://isv-data.oss-cn-hangzhou.aliyuncs.com/ics/MaaS/ASR/test_audio/asr_example_zh.wav",
    language="auto", # "zn", "en", "yue", "ja", "ko", "nospeech"
    use_itn=False,
    **kwargs,
)

print(res)

----------------------------------------

TITLE: Inference Using FunASR
DESCRIPTION: Examples of using FunASR for inference, including VAD model integration and batch processing capabilities.

LANGUAGE: python
CODE:
from funasr import AutoModel

model_dir = "iic/SenseVoiceSmall"
input_file = (
    "https://isv-data.oss-cn-hangzhou.aliyuncs.com/ics/MaaS/ASR/test_audio/asr_example_zh.wav"
)

model = AutoModel(model=model_dir,
                  vad_model="fsmn-vad",
                  vad_kwargs={"max_single_segment_time": 30000},
                  trust_remote_code=True, device="cuda:0")

res = model.generate(
    input=input_file,
    cache={},
    language="auto", # "zn", "en", "yue", "ja", "ko", "nospeech"
    use_itn=False,
    batch_size_s=0,
)

print(res)

----------------------------------------

TITLE: Model Download and Installation
DESCRIPTION: Instructions for downloading and installing the model using ModelScope SDK or Git.

LANGUAGE: python
CODE:
#SDK模型下载
from modelscope import snapshot_download
model_dir = snapshot_download('iic/SenseVoiceSmall')

LANGUAGE: bash
CODE:
#安装ModelScope
pip install modelscope

#Git模型下载
git clone https://www.modelscope.cn/iic/SenseVoiceSmall.git

----------------------------------------

TITLE: Installing Dependencies for NestJS Project using PNPM
DESCRIPTION: This command installs the necessary dependencies for a NestJS project using the PNPM package manager.

LANGUAGE: bash
CODE:
$ pnpm install

----------------------------------------

TITLE: Running NestJS Application in Different Modes
DESCRIPTION: These commands demonstrate how to run a NestJS application in development, watch, and production modes using PNPM.

LANGUAGE: bash
CODE:
# development
$ pnpm run start

# watch mode
$ pnpm run start:dev

# production mode
$ pnpm run start:prod

----------------------------------------

TITLE: Running Tests for NestJS Application
DESCRIPTION: These commands show how to run unit tests, end-to-end tests, and generate test coverage for a NestJS application using PNPM.

LANGUAGE: bash
CODE:
# unit tests
$ pnpm run test

# e2e tests
$ pnpm run test:e2e

# test coverage
$ pnpm run test:cov

----------------------------------------

TITLE: Formatting Original Text for Translation in JavaScript
DESCRIPTION: This function prepares the text for translation by adding XML-like tags to distinguish the current chunk to be translated from the context. It ensures the LLM has enough context while focusing on the specific portion to translate.

LANGUAGE: javascript
CODE:
function main({source_text_chunks, i=0}){
    let before = source_text_chunks.slice(0, i).join("");
    let current = " <TRANSLATE_THIS>" + source_text_chunks[i] + "</TRANSLATE_THIS>";
    let after = source_text_chunks.slice(i + 1).join("");
    let tagged_text = before + current + after;

    return {
        tagged_text,
        chunk_to_translate: source_text_chunks[i],
    }
}

----------------------------------------

TITLE: Extracting Translated Text from LLM Response in JavaScript
DESCRIPTION: This function extracts the final translated text from the LLM's response. It splits the response by code block markers and returns the last non-empty block, which should contain the refined translation.

LANGUAGE: javascript
CODE:
function main({data1}){
    const result = data1.split("```").filter(item => !!item.trim())

    if(result[result.length-1]) {
        return {
            result: result[result.length-1].trim() 
        }
    }

    return {
        result: '未截取到翻译内容'
    }
}

----------------------------------------

TITLE: Checking Translation Completion in JavaScript
DESCRIPTION: This function determines whether the translation process has reached the end of the subtitle file. It compares the current chunk index with the total number of chunks to decide if further processing is needed.

LANGUAGE: javascript
CODE:
function main({chunks, currentChunk}){
    const findIndex = chunks.findIndex((item) => item === currentChunk)

    return {
        isEnd: chunks.length-1 === findIndex,
        i: findIndex + 1,
    }
}

----------------------------------------

TITLE: Helm Chart Requirements Configuration
DESCRIPTION: Specifies the required dependencies for the FastGPT Helm chart, including MongoDB and PostgreSQL with their respective versions.

LANGUAGE: yaml
CODE:
| Repository | Name | Version |
|------------|------|----------|
| oci://registry-1.docker.io/bitnamicharts | mongodb | 15.0.1 |
| oci://registry-1.docker.io/bitnamicharts | postgresql | 15.0.0 |

----------------------------------------

TITLE: Generating Hugo Front Matter with Go Template
DESCRIPTION: This snippet demonstrates how to create a Hugo front matter template using Go's text/template syntax. It automatically generates a title by replacing hyphens with spaces and capitalizing words, sets the current date, and marks the content as a draft.

LANGUAGE: markdown
CODE:
---
title: "{{ replace .Name "-" " " | title }}"
date: {{ .Date }}
draft: true
---