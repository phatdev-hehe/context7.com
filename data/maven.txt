TITLE: Basic Maven Command Syntax
DESCRIPTION: The fundamental syntax for running Maven commands with options, goals and phases.

LANGUAGE: bash
CODE:
mvn [options] [<goal(s)>] [<phase(s)>]

----------------------------------------

TITLE: Maven Proxy Configuration
DESCRIPTION: Configuring proxy settings for Maven to access remote repositories through a proxy server.

LANGUAGE: xml
CODE:
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
  ...
  <proxies>
    <proxy>
      <id>myproxy</id>
      <active>true</active>
      <protocol>http</protocol>
      <host>proxy.somewhere.com</host>
      <port>8080</port>
      <username>proxyuser</username>
      <password>somepassword</password>
      <nonProxyHosts>*.google.com|ibiblio.org</nonProxyHosts>
    </proxy>
  </proxies>
  ...
</settings>

----------------------------------------

TITLE: Configuring Project Encoding in Maven POM
DESCRIPTION: Sets the source encoding for the project to UTF-8 to prevent platform-dependent build warnings. This configuration is added to the project's properties in the POM file.

LANGUAGE: xml
CODE:
<project>
  <!-- ... -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <!-- ... -->
</project>

----------------------------------------

TITLE: Setting Java Compiler Source and Target in Maven POM
DESCRIPTION: Configures the Maven Compiler Plugin to use Java 7 as both the source and target version. This ensures the project is compiled with Java 7 compatibility.

LANGUAGE: xml
CODE:
<project>
  <!-- ... -->
  <properties>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>
  <!-- ... -->
</project>

----------------------------------------

TITLE: Basic Maven Settings Structure
DESCRIPTION: The basic structure of a Maven settings.xml file showing all top-level elements that can be configured.

LANGUAGE: xml
CODE:
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
  <localRepository/>
  <interactiveMode/>
  <offline/>
  <pluginGroups/>
  <servers/>
  <mirrors/>
  <proxies/>
  <profiles/>
  <activeProfiles/>
</settings>

----------------------------------------

TITLE: Defining Parent and Dependency Without Version in Maven 4.1.0
DESCRIPTION: Example of parent and dependency definition without version tags using Maven 4.1.0 model version. This demonstrates the new automatic versioning feature for subprojects.

LANGUAGE: xml
CODE:
<project xmlns="http://maven.apache.org/POM/4.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd">
  <modelVersion>4.1.0</modelVersion>

  <parent>
    <groupId>my.parents.groupId</groupId>
    <artifactId>my.parents.artifactId</artifactId>
  </parent>

  <artifactId>myOwnSubprojectArtifactId</artifactId>

  <dependencies>
    <dependency>
      <groupId>the.dependent.subproject.groupId</groupId>
      <artifactId>the.dependent.subproject.artifactId</artifactId>
    </dependency>
  </dependencies>
</project>

----------------------------------------

TITLE: Installing a File in Local Maven Repository
DESCRIPTION: Demonstrates how to install a file in the local Maven repository along with a generic or custom POM.

LANGUAGE: Shell
CODE:
mvn install:install-file
      -DgroupId=<group-id>
      -DartifactId=<artifact-id>
      -Dversion=<version>
      -Dfile=<path-to-file>
      -Dpackaging=<packaging> (i.e. jar)
      -DgeneratePom=true

LANGUAGE: Shell
CODE:
mvn install:install-file
      -DgroupId=<group-id>
      -DartifactId=<artifact-id>
      -Dversion=<version>
      -Dfile=<path-to-file>
      -Dpackaging=<packaging> (i.e. jar)
      -DpomFile=<path-to-pom>

----------------------------------------

TITLE: Defining Maven Extensions in XML
DESCRIPTION: This XML snippet demonstrates how to define Maven extensions in the .mvn/extensions.xml file. It allows for easier integration of extensions without modifying the Maven installation.

LANGUAGE: xml
CODE:
<extensions xmlns="http://maven.apache.org/EXTENSIONS/1.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/EXTENSIONS/1.1.0 https://maven.apache.org/xsd/core-extensions-1.0.0.xsd">
  <extension>
    <groupId/>
    <artifactId/>
    <version/>
  </extension>
</extensions>

----------------------------------------

TITLE: Maven Mirror Configuration
DESCRIPTION: Setting up repository mirrors to redirect Maven to alternative download locations.

LANGUAGE: xml
CODE:
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
  ...
  <mirrors>
    <mirror>
      <id>planetmirror.com</id>
      <name>PlanetMirror Australia</name>
      <url>http://downloads.planetmirror.com/pub/maven2</url>
      <mirrorOf>central</mirrorOf>
    </mirror>
  </mirrors>
  ...
</settings>

----------------------------------------

TITLE: Defining Basic Maven Dependency in XML
DESCRIPTION: This snippet demonstrates how to define a basic Maven dependency for the Guava library with a test scope. It includes the groupId, artifactId, version, and scope elements.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>com.google.guava</groupId>
  <artifactId>guava</artifactId>
  <version>33.4.0-jre</version>
  <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Configuring Resolver Properties in Maven Settings
DESCRIPTION: This XML snippet shows how to set global Resolver configuration properties in the Maven settings file. It demonstrates setting the dependency collector implementation and enabling preemptive authentication for all repositories.

LANGUAGE: xml
CODE:
<settings>
  <profiles>
    <profile>
      <id>resolver-config</id>
      <properties>
        <aether.dependencyCollector.impl>bf</aether.dependencyCollector.impl>
        <!-- set preemptiveAuth for all repositories -->
        <aether.connector.http.preemptiveAuth>true</aether.connector.http.preemptiveAuth>
      </properties>
    </profile>
  </profiles>

  <activeProfiles>
    <!-- profile with configuration properties must be activated here -->
    <activeProfile>resolver-config</activeProfile>
  </activeProfiles>
</settings>

----------------------------------------

TITLE: Maven Server Authentication Configuration
DESCRIPTION: Configuration for server authentication including username/password and SSH private key settings.

LANGUAGE: xml
CODE:
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
  ...
  <servers>
    <server>
      <id>server001</id>
      <username>my_login</username>
      <password>my_password</password>
      <privateKey>${user.home}/.ssh/id_dsa</privateKey>
      <passphrase>some_passphrase</passphrase>
      <filePermissions>664</filePermissions>
      <directoryPermissions>775</directoryPermissions>
      <configuration></configuration>
    </server>
  </servers>
  ...
</settings>

----------------------------------------

TITLE: Setting Root Project Attribute in Maven POM
DESCRIPTION: To explicitly define a project as the root of a multi-module setup, you can set the root attribute to true in the POM file. This helps Maven identify the project structure.

LANGUAGE: xml
CODE:
<project root="true">

----------------------------------------

TITLE: Configuring Maven Command Line Options
DESCRIPTION: This snippet shows the content of a .mvn/maven.config file used to define default command line options for Maven. Each option must be on a new line in Maven 3.9.0 and later.

LANGUAGE: plaintext
CODE:
-T3
-U 
--fail-at-end

----------------------------------------

TITLE: Multi-Module Child POM Configuration
DESCRIPTION: Configuration for a child module POM in a multi-module Maven project showing proper dependency version management.

LANGUAGE: xml
CODE:
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.apache.maven.ci</groupId>
    <artifactId>ci-parent</artifactId>
    <version>${revision}</version>
  </parent>
  <groupId>org.apache.maven.ci</groupId>
  <artifactId>ci-child</artifactId>
  ...
  <dependencies>
    <dependency>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>child2</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>
</project>

----------------------------------------

TITLE: Setting JVM Configuration for Maven
DESCRIPTION: This snippet demonstrates the content of a .mvn/jvm.config file, which is used to specify JVM options for Maven on a per-project basis. It includes memory settings and other JVM parameters.

LANGUAGE: plaintext
CODE:
-Xmx2048m -Xms1024m -XX:MaxPermSize=512m -Djava.awt.headless=true

----------------------------------------

TITLE: Defining Project Group Identifiers in Maven
DESCRIPTION: Examples of valid groupId formats for Maven projects. These follow Java's package naming conventions, starting with a reversed domain name.

LANGUAGE: plaintext
CODE:
org.apache.maven
org.apache.commons
com.google.guava

----------------------------------------

TITLE: Setting Connection Timeouts in Maven Settings
DESCRIPTION: This XML configuration shows how to set connection and request timeouts for a specific server in the Maven settings file. It allows controlling how long Maven should wait for connections and requests to complete.

LANGUAGE: xml
CODE:
<settings>
  <servers>
    <server>
      <id>my-server</id>
      <configuration>
        <connectTimeout>10000</connectTimeout> <!-- milliseconds -->
        <requestTimeout>1800000</requestTimeout> <!-- milliseconds -->
      </configuration>
    </server>
  </servers>
</settings>

----------------------------------------

TITLE: Maven Security Model Description - Markdown
DESCRIPTION: Explains Maven's security model and trust assumptions when building projects. It emphasizes that Maven executes actions defined in pom.xml and assumes trust in the build configuration and dependencies.

LANGUAGE: markdown
CODE:
## Security Model

The purpose of Maven is to perform the actions defined in the supplied
`pom.xml`, which commonly includes compiling and running the associated
code and using plugins and dependencies downloaded from the configured
repositories.

As such, the Maven security model assumes you trust the `pom.xml` and
the code, dependencies and repositories that are used in your build.
If you want to use Maven to build untrusted code, it is up to you to
provide the required isolation.

----------------------------------------

TITLE: Maven POM with Flatten Plugin Configuration
DESCRIPTION: Complete Maven POM configuration including the flatten-maven-plugin setup required for proper installation and deployment of CI-friendly versions.

LANGUAGE: xml
CODE:
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.apache</groupId>
    <artifactId>apache</artifactId>
    <version>18</version>
  </parent>
  <groupId>org.apache.maven.ci</groupId>
  <artifactId>ci-parent</artifactId>
  <name>First CI Friendly</name>
  <version>${revision}</version>
  ...
  <properties>
    <revision>1.0.0-SNAPSHOT</revision>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>1.1.0</version>
        <configuration>
          <updatePomFile>true</updatePomFile>
          <flattenMode>resolveCiFriendliesOnly</flattenMode>
        </configuration>
        <executions>
          <execution>
            <id>flatten</id>
            <phase>process-resources</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
          </execution>
          <execution>
            <id>flatten.clean</id>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <modules>
    <module>child1</module>
    ..
  </modules>
</project>

----------------------------------------

TITLE: Markdown Documentation for Maven IDE Integration
DESCRIPTION: Comprehensive documentation detailing Maven integration features across major Java IDEs including Apache NetBeans, Eclipse (via M2Eclipse), and IntelliJ IDEA. Includes license information and detailed feature lists for each IDE's Maven support.

LANGUAGE: markdown
CODE:
# Apache Maven IDE Integration

<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

All popular development environments for the Java platform support Apache Maven.

## Apache NetBeans IDE

Apache NetBeans has included full Maven support since version 6.7.
You can open any Maven project in the IDE and start coding immediately.

For more information see the [NetBeans.org wiki page](http://wiki.netbeans.org/Maven).

## Eclipse IDE - M2Eclipse

[M2Eclipse](https://www.eclipse.org/m2e/) is
the official Eclipse project for Maven integration for the Eclipse IDE.

Features include:

- Launching Maven builds from within Eclipse
- Dependency management for Eclipse build path based on Maven's pom.xml
- Resolving Maven dependencies from the Eclipse workspace without installing to local Maven repository
- Automatic downloading of the required dependencies and sources from the remote Maven repositories
- Wizards for creating new Maven projects, pom.xml and to enable Maven support on existing projects
- Quick search for dependencies in remote Maven repositories
- Quick fixes in the Java editor for looking up required dependencies/jars by the class or package name
- Integration with other Eclipse tools, such as WTP, AJDT, Mylyn, Subclipse and others.

M2E dynamically integrates with your Maven projects with Eclipse while you make changes in the IDE. As
you change dependencies, or configurations of Maven plugins in your POMs M2E, will synchronize the
Eclipse workspace with those changes.

## JetBrains IntelliJ IDEA

IntelliJ IDEA has a [feature-rich integration for Maven](https://www.jetbrains.com/idea/help/maven.html).

----------------------------------------

TITLE: Maven Verify Command
DESCRIPTION: Typical command for building and verifying a Maven project.

LANGUAGE: bash
CODE:
mvn verify

----------------------------------------

TITLE: Configuring Maven POM for JSR-330 Plugin Development
DESCRIPTION: This XML snippet demonstrates how to set up a Maven POM file for developing a plugin using JSR-330. It includes necessary dependencies, plugin configurations, and build settings.

LANGUAGE: xml
CODE:
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-jsr330-plugin</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>maven-plugin</packaging>

  <name>maven-jsr330-plugin Maven Plugin</name>
  <description>As sample Maven Plugin that uses JSR-330 components</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <mavenVersion>3.0.4</mavenVersion>
    <mavenPluginPluginVersion>3.2</mavenPluginPluginVersion>
  </properties>

  <dependencies>
    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <version>1</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <version>${mavenVersion}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.plugin-tools</groupId>
      <artifactId>maven-plugin-annotations</artifactId>
      <version>${mavenPluginPluginVersion}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-plugin-plugin</artifactId>
        <version>${mavenPluginPluginVersion}</version>
        <configuration>
          <skipErrorNoDescriptorsFound>true</skipErrorNoDescriptorsFound>
        </configuration>
        <executions>
          <execution>
            <id>mojo-descriptor</id>
            <goals>
              <goal>descriptor</goal>
            </goals>
          </execution>
          <execution>
            <id>help-goal</id>
            <goals>
              <goal>helpmojo</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.eclipse.sisu</groupId>
        <artifactId>sisu-maven-plugin</artifactId>
        <version>0.3.5</version>
        <executions>
          <execution>
            <id>generate-index</id>
            <goals>
              <goal>main-index</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>

----------------------------------------

TITLE: Maven Plugin Goal Commands
DESCRIPTION: Examples of running specific plugin goals in Maven.

LANGUAGE: bash
CODE:
mvn archetype:generate

LANGUAGE: bash
CODE:
mvn checkstyle:check

----------------------------------------

TITLE: Installing Artifacts to Remote Repository
DESCRIPTION: Shows how to install artifacts to a remote repository using the maven-deploy-plugin.

LANGUAGE: Shell
CODE:
mvn deploy:deploy-file
    -DgroupId=<groupId>
    -DartifactId=<artifactId>
    -Dversion=<version>
    -Dpackaging=<packaging>
    -Dfile=<path-to-file>
    -DrepositoryId=<id-to-map-on-server>
    -Durl=<url-of-remote-repo>

----------------------------------------

TITLE: Creating Subgroups in Maven Project Structure
DESCRIPTION: Demonstration of how to create subgroups within a Maven project structure by appending identifiers to the parent groupId.

LANGUAGE: plaintext
CODE:
// Parent project group
org.apache.maven

// Subgroups
org.apache.maven.plugins
org.apache.maven.reporting

----------------------------------------

TITLE: Executing Java Program from Maven
DESCRIPTION: Demonstrates how to execute a Java program from within a Maven build using the exec-maven-plugin.

LANGUAGE: XML
CODE:
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>exec-maven-plugin</artifactId>
  <version>1.2.1</version>
  <executions>
    <execution>
      <goals>
        <goal>java</goal>
      </goals>
    </execution>
  </executions>
  <configuration>
    <mainClass>com.example.Main</mainClass>
    <arguments>
      <argument>argument1</argument>
    </arguments>
  </configuration>
</plugin>

----------------------------------------

TITLE: Defining Artifact Identifiers in Maven
DESCRIPTION: Examples of valid artifactId formats for Maven projects. These should consist of lowercase letters, digits, and hyphens.

LANGUAGE: plaintext
CODE:
commons-math
maven-clean-plugin

----------------------------------------

TITLE: Merging Configuration Items in Parent and Child POMs
DESCRIPTION: Demonstrates how to use the combine.children attribute to merge configuration items between parent and child POMs.

LANGUAGE: XML
CODE:
<configuration>
  <items>
      <item>one</item>
      <item>two</item>
  </items>
</configuration>

LANGUAGE: XML
CODE:
<configuration>
  <items combine.children="append">
    <item>three</item>
  </items>
</configuration>

LANGUAGE: XML
CODE:
<configuration>
  <items>
    <item>one</item>
    <item>two</item>
    <item>three</item>
  </items>
</configuration>

----------------------------------------

TITLE: Versioning Maven Artifacts Using Semantic Versioning
DESCRIPTION: Examples of version identifiers following Semantic Versioning 1.0.0 rules, including major, minor, and patch versions.

LANGUAGE: plaintext
CODE:
1.0.0
2.3.2
3.5.42

----------------------------------------

TITLE: Analyzing G Level Metadata XML Structure for Maven Plugins
DESCRIPTION: G level metadata is used for Maven Plugins and contains mapping of plugin prefix to artifactId. It is located in the path corresponding to the groupId in both Release and Snapshots repositories.

LANGUAGE: XML
CODE:
<metadata>
  <plugins>
    <plugin>
      <!-- Plugin prefix to artifactId mapping -->
    </plugin>
  </plugins>
</metadata>

----------------------------------------

TITLE: Versioning Pre-releases and Build Metadata in Maven
DESCRIPTION: Examples of version identifiers for pre-releases and build metadata in Maven, including beta, milestone, and release candidate versions.

LANGUAGE: plaintext
CODE:
// Pre-releases
1.0.0-beta
1.0.0-M1
1.0.0-rc2

// Build metadata
1.2.3+dfc0c87
2.3.4+15433

----------------------------------------

TITLE: Analyzing V Level Metadata XML Structure for Snapshot Resolution
DESCRIPTION: V level metadata is used for snapshot timestamped version resolution. It exists only in Snapshot repositories and is located in the path corresponding to the baseVersion.

LANGUAGE: XML
CODE:
<metadata>
  <groupId>...</groupId>
  <artifactId>...</artifactId>
  <versioning>
    <snapshot>
      <!-- Snapshot-specific information -->
    </snapshot>
    <snapshotVersions>
      <!-- Snapshot versions information -->
    </snapshotVersions>
  </versioning>
</metadata>

----------------------------------------

TITLE: Minimal Maven Dependency XML with Default Values
DESCRIPTION: This example shows a minimal Maven dependency definition with default values for classifier, type, optionality, and scope. It adds the XOM library to all project classpaths as a required dependency.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>nu.xom</groupId>
  <artifactId>xom</artifactId>
  <version>1.3.9</version>
</dependency>

----------------------------------------

TITLE: Demonstrating Snapshot Version Transformation for Deployment in Maven
DESCRIPTION: This snippet illustrates how Maven transforms a snapshot version during deployment. It shows the conversion from a local snapshot version to a timestamped version on the remote repository.

LANGUAGE: markdown
CODE:
```
1.0-SNAPSHOT -> Maven (on the fly) -> 1.0-${YYYYMMDD.HHMMSS}-${counter}
```

----------------------------------------

TITLE: Specifying POM Type in Maven Dependency XML
DESCRIPTION: This snippet demonstrates how to specify a POM type in a Maven dependency. This is used when the dependency is on a project's POM file rather than its JAR or other artifact.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>com.google.guava</groupId>
  <artifactId>guava</artifactId>
  <version>31.0.0</version>
  <type>pom</type>
</dependency>

----------------------------------------

TITLE: Maven Plugin Groups Configuration
DESCRIPTION: Example of configuring plugin groups in settings.xml to allow shortened plugin references on the command line.

LANGUAGE: xml
CODE:
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
  ...
  <pluginGroups>
    <pluginGroup>org.eclipse.jetty</pluginGroup>
  </pluginGroups>
  ...
</settings>

----------------------------------------

TITLE: Explicit Classifier in Maven Dependency XML
DESCRIPTION: This example shows how to explicitly specify a classifier in a Maven dependency. It's used here to depend on the tests artifact of a project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.project</groupId>
  <artifactId>reusable-test-support</artifactId>
  <version>1.0</version>
  <classifier>tests</classifier>
</dependency>

----------------------------------------

TITLE: Using CI-Friendly Variables for Versioning in Maven 4
DESCRIPTION: Example of using CI-friendly variables like ${revision} for versioning in Maven 4 POM files. This feature is now fully supported without additional plugins.

LANGUAGE: xml
CODE:
<groupId>my.groupId</groupId>
<artifactId>my.artifactId</artifactId>
<version>${revision}</version>

----------------------------------------

TITLE: Implicit Classifier using Type in Maven Dependency XML
DESCRIPTION: This snippet demonstrates how to use the type element to implicitly specify a classifier in a Maven dependency. It's equivalent to the previous example but uses the test-jar type instead of an explicit classifier.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.project</groupId>
  <artifactId>reusable-test-support</artifactId>
  <version>1.0</version>
  <type>test-jar</type>
</dependency>

----------------------------------------

TITLE: Maven Local Install Command
DESCRIPTION: Command for building and installing the package in the local repository.

LANGUAGE: bash
CODE:
mvn install

----------------------------------------

TITLE: Maven Path Template Without Classifier
DESCRIPTION: Template showing the standard path construction pattern for Maven artifacts without a classifier component.

LANGUAGE: plaintext
CODE:
${groupId as directory}/${artifactId}/${baseVersion}/${artifactId}-${version}.${extension}

----------------------------------------

TITLE: Configuring Transitive Dependency Excludes in Maven POM
DESCRIPTION: Demonstrates how to exclude all transitive dependencies from a Maven dependency using wildcard excludes. This example shows excluding all transitive dependencies from maven-embedder artifact.

LANGUAGE: xml
CODE:
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  ...
  <dependencies>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-embedder</artifactId>
      <version>3.1.0</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    ...
  </dependencies>
  ...
</project>

----------------------------------------

TITLE: Maven Path Template With Classifier
DESCRIPTION: Template showing the path construction pattern for Maven artifacts that include a classifier component.

LANGUAGE: plaintext
CODE:
${groupId as directory}/${artifactId}/${baseVersion}/${artifactId}-${version}-${classifier}.${extension}

----------------------------------------

TITLE: Configuring Maven Core Extensions
DESCRIPTION: XML configuration for defining Maven core extensions in .mvn/extensions.xml. This allows specifying extensions using Maven coordinates that will be downloaded from plugin repositories.

LANGUAGE: xml
CODE:
<extensions xmlns="http://maven.apache.org/EXTENSIONS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/EXTENSIONS/1.0.0 http://maven.apache.org/xsd/core-extensions-1.0.0.xsd">
  <extension>
    <groupId/>
    <artifactId/>
    <version/>
  </extension>
</extensions>

----------------------------------------

TITLE: Maven GAV Coordinate Example
DESCRIPTION: Example of a Maven artifact coordinate specification using GroupId:ArtifactId:Version:Classifier:Extension format.

LANGUAGE: plaintext
CODE:
org.apache.maven:apache-maven:3.8.4:bin:tar.gz

----------------------------------------

TITLE: Configuring Maven Properties in maven.config File
DESCRIPTION: Demonstrates the usage of new session properties for configuration interpolation in the maven.config file. These properties allow referencing the reactor top directory and project root directory.

LANGUAGE: XML
CODE:
-Dsome.property=${session.topDirectory}/somefile
-Dother.property=${session.rootDirectory}/otherfile

----------------------------------------

TITLE: Examining A Level Metadata XML Structure for Version Discovery
DESCRIPTION: A level metadata is used for version discovery of all artifacts. It is located in the path corresponding to the artifactId in both Release and Snapshots repositories.

LANGUAGE: XML
CODE:
<metadata>
  <groupId>...</groupId>
  <artifactId>...</artifactId>
  <versioning>
    <latest>...</latest>
    <release>...</release>
    <versions>
      <version>...</version>
    </versions>
    <lastUpdated>...</lastUpdated>
  </versioning>
</metadata>

----------------------------------------

TITLE: Maven Central Repository Declaration in Super POM
DESCRIPTION: XML snippet showing the renamed 'Central Repository' to 'Maven Central Repository' in the Maven 4.0.0 super POM.

LANGUAGE: XML
CODE:
<repository>
  <id>central</id>
  <name>Maven Central Repository</name>
  <url>https://repo.maven.apache.org/maven2</url>
  <layout>default</layout>
  <snapshots>
    <enabled>false</enabled>
  </snapshots>
</repository>

----------------------------------------

TITLE: Excluding Plugins from Maven Validation
DESCRIPTION: Command-line example demonstrating how to exclude specific plugins from Maven's validation process using the maven.plugin.validation.excludes property.

LANGUAGE: shell
CODE:
mvn -Dmaven.plugin.validation.excludes=plugin1-goupId:plugin1-artifactId:plugin1-version,plugin2-goupId:plugin2-artifactId:plugin2-version

----------------------------------------

TITLE: Accessing Project Sources in a Mojo
DESCRIPTION: Demonstrates how to access a project's source directories from within a Mojo class.

LANGUAGE: Java
CODE:
public class MyMojo
  extends AbstractMojo {
  /**
   * @parameter expression="${project.compileSourceRoots}"
   * @required
   */
  private List sourceRoots;

  public void execute()
    throws MojoExecutionException {
    // ...
    for (Iterator i = sourceRoots.iterator(); i.hasNext(); ) {
      String sourceRoot = (String) i.next();

      // Do what you want with these directories
    }
  }
}

----------------------------------------

TITLE: Setting Maven Plugin Validation Verbosity
DESCRIPTION: Command-line example showing how to set the verbosity level for Maven's plugin validation using the maven.plugin.validation property.

LANGUAGE: shell
CODE:
mvn -Dmaven.plugin.validation=verbose ...

----------------------------------------

TITLE: Adding Properties to POM
DESCRIPTION: Demonstrates how to add custom properties to a Maven POM.

LANGUAGE: XML
CODE:
<properties>
  <myproperty>propertyvalue</myproperty>
</properties>

----------------------------------------

TITLE: Explicit Maven Compiler Plugin Configuration
DESCRIPTION: Explicitly configures the Maven Compiler Plugin to use Java 7 as both the source and target version. This is useful when parent POMs override default compiler settings.

LANGUAGE: xml
CODE:
<project>
  <!-- ... -->
  <build>
    <!-- ... -->
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
    </plugins>
    <!-- ... -->
  </build>
  <!-- ... -->
</project>

----------------------------------------

TITLE: Example Maven Artifact Naming
DESCRIPTION: Demonstrates the recommended format for Maven artifact naming, using lowercase letters, digits, and hyphens. The example shows how to structure group IDs and artifact IDs for consistency and clarity.

LANGUAGE: text
CODE:
maven : maven-core
maven : wagon-api

----------------------------------------

TITLE: Maven Install File Command
DESCRIPTION: Command to install a local JAR file into the Maven repository. It requires specifying the file path, group ID, artifact ID, version, and packaging type.

LANGUAGE: shell
CODE:
mvn install:install-file
  -Dfile=<path-to-file>
  -DgroupId=<group-id>
  -DartifactId=<artifact-id>
  -Dversion=<version>
  -Dpackaging=<packaging>
  -DgeneratePom=true

----------------------------------------

TITLE: Maven Repository Path Example
DESCRIPTION: Example showing the final repository path after applying the transformation rules to the GAV coordinates.

LANGUAGE: plaintext
CODE:
org/apache/maven/apache-maven/3.8.4/apache-maven-3.8.4-bin.tar.gz

----------------------------------------

TITLE: Configuring Site Plugin Output Encoding
DESCRIPTION: Sets the output encoding for the Maven Site Plugin to UTF-8. This configuration is added directly to the plugin configuration in the POM file.

LANGUAGE: xml
CODE:
<project>
  <!-- ... -->
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-site-plugin</artifactId>
    <version>3.6</version>
    <configuration>
      <outputEncoding>UTF-8</outputEncoding>
    </configuration>
  </plugin>
  <!-- ... -->
</project>

----------------------------------------

TITLE: Configuring Custom HTTP Headers in Maven Settings
DESCRIPTION: This XML snippet demonstrates how to add custom HTTP headers to a server configuration in the Maven settings file. It allows specifying additional headers for HTTP requests made to a specific server.

LANGUAGE: xml
CODE:
<settings>
  <servers>
    <server>
      <id>my-server</id>
      <configuration>
        <httpHeaders>
          <property>
            <name>Foo</name>
            <value>Bar</value>
          </property>
        </httpHeaders>
      </configuration>
    </server>
  </servers>
</settings>

----------------------------------------

TITLE: Maven Project XSD Configuration
DESCRIPTION: Specifies the XML Schema Definition (XSD) for a Maven project file (pom.xml). This allows IDEs to provide schema validation and auto-completion for Maven POM files.

LANGUAGE: xml
CODE:
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      https://maven.apache.org/xsd/maven-4.0.0.xsd">

  <!-- ... -->
</project>

----------------------------------------

TITLE: Maven Help Command
DESCRIPTION: Command to access Maven's built-in help documentation.

LANGUAGE: bash
CODE:
mvn -h

----------------------------------------

TITLE: Maven Settings XSD Configuration
DESCRIPTION: Specifies the XML Schema Definition (XSD) for a Maven settings file (settings.xml). This allows IDEs to provide schema validation and auto-completion for Maven settings files.

LANGUAGE: xml
CODE:
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      https://maven.apache.org/xsd/settings-1.0.0.xsd">

  <!-- ... -->
</settings>

----------------------------------------

TITLE: Initializing Maven Source Repository with Google Repo Tool
DESCRIPTION: Commands to initialize and sync a new workspace containing all Maven source code using the Google repo tool.

LANGUAGE: bash
CODE:
repo init -u https://github.com/apache/maven-sources.git
repo sync
repo start master --all

----------------------------------------

TITLE: Single Project Maven POM with Basic Revision Property
DESCRIPTION: Basic Maven POM configuration showing the use of ${revision} placeholder for version management in a single project setup.

LANGUAGE: xml
CODE:
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.apache</groupId>
    <artifactId>apache</artifactId>
    <version>18</version>
  </parent>
  <groupId>org.apache.maven.ci</groupId>
  <artifactId>ci-parent</artifactId>
  <name>First CI Friendly</name>
  <version>${revision}</version>
  ...
</project>

----------------------------------------

TITLE: Displaying Maven Distribution Directory Structure
DESCRIPTION: Shows the layout of a standard Maven distribution, highlighting the location of logging-related files such as simplelogger.properties and SLF4J JARs.

LANGUAGE: plaintext
CODE:
apache-maven-3.x.y
├── LICENSE.txt
├── NOTICE.txt
├── README.txt
├── bin
│   └── ...
├── boot
│   └── ...
├── conf
│   ├── logging
│   │   └── simplelogger.properties
│   └── settings.xml
└── lib
    ├── ...
    ├── slf4j-api-x.y.z.jar
    ├── slf4j-simple-x.y.z.jar or maven-slf4j-provider-3.x.y.jar
    └── ...

----------------------------------------

TITLE: Single Project Maven POM with Defined Revision Property
DESCRIPTION: Maven POM configuration demonstrating how to define the revision property value within the properties section.

LANGUAGE: xml
CODE:
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.apache</groupId>
    <artifactId>apache</artifactId>
    <version>18</version>
  </parent>
  <groupId>org.apache.maven.ci</groupId>
  <artifactId>ci-parent</artifactId>
  <name>First CI Friendly</name>
  <version>${revision}</version>
  ...
  <properties>
    <revision>1.0.0-SNAPSHOT</revision>
  </properties>
</project>

----------------------------------------

TITLE: Configuring Maven Core Extensions
DESCRIPTION: XML configuration for Maven core extensions specified in .mvn/extensions.xml. Defines extension dependencies with groupId, artifactId and version.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<extensions>
  <extension>
    <groupId>...</groupId>
    <artifactId>...</artifactId>
    <version>...</version>
  </extension>
  <extension>...</extension>
  ...
</extensions>

----------------------------------------

TITLE: Multi-Module Parent POM Configuration
DESCRIPTION: Configuration for a parent POM in a multi-module Maven project using CI-friendly versions.

LANGUAGE: xml
CODE:
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.apache</groupId>
    <artifactId>apache</artifactId>
    <version>18</version>
  </parent>
  <groupId>org.apache.maven.ci</groupId>
  <artifactId>ci-parent</artifactId>
  <name>First CI Friendly</name>
  <version>${revision}</version>
  ...
  <properties>
    <revision>1.0.0-SNAPSHOT</revision>
  </properties>
  <modules>
    <module>child1</module>
    ..
  </modules>
</project>

----------------------------------------

TITLE: Displaying Plugin Validation Warning in Maven
DESCRIPTION: Example of a warning message displayed when plugin validation issues are detected during a Maven build.

LANGUAGE: plaintext
CODE:
[WARNING] Plugin validation issues were detected in x plugin(s)

----------------------------------------

TITLE: Defining Maven Plugin Project Packaging in POM
DESCRIPTION: Specifies the packaging element in the project's POM to declare it as a Maven plugin project. This is a crucial configuration for developing Maven plugins.

LANGUAGE: xml
CODE:
<packaging>maven-plugin</packaging>

----------------------------------------

TITLE: Simplified Build Success Output
DESCRIPTION: Shows the new simplified build success output format after removing System.gc() call information.

LANGUAGE: text
CODE:
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.111 s
[INFO] Finished at: 2018-02-25T15:34:10+01:00
[INFO] ------------------------------------------------------------------------

----------------------------------------

TITLE: Implementing a Maven Mojo with JSR-330 Dependency Injection
DESCRIPTION: This Java code snippet shows how to implement a Maven Mojo using JSR-330 annotations for dependency injection. It demonstrates constructor injection and the use of the @Mojo annotation.

LANGUAGE: java
CODE:
package org.apache.maven.plugins;

import javax.inject.Inject;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;

@Mojo( name = "hello", defaultPhase = LifecyclePhase.VALIDATE, requiresProject = false )
public class Jsr330Mojo
    extends AbstractMojo
{

    private Jsr330Component component;

    @Inject
    public Jsr330Mojo( Jsr330Component component )
    {
        this.component = component;    
    }

    public void execute()
        throws MojoExecutionException
    {    
        //
        // Say hello to the world, my little constructor injected component!
        //
        component.hello();
    }
}

----------------------------------------

TITLE: Enhanced Module Build Information Display
DESCRIPTION: Demonstrates the new module build information format showing project coordinates and packaging type.

LANGUAGE: text
CODE:
[INFO] ------------------< com.soebes.examples.j2ee:parent >-------------------
[INFO] Building parent 5.0.1-SNAPSHOT                                     [1/9]
[INFO] --------------------------------[ pom ]---------------------------------
[INFO]

----------------------------------------

TITLE: Configuring JVM Options
DESCRIPTION: Example JVM configuration options that can be specified in .mvn/jvm.config file for project-specific JVM settings.

LANGUAGE: text
CODE:
-Xmx2048m -Xms1024m -XX:MaxPermSize=512m -Djava.awt.headless=true

----------------------------------------

TITLE: Maven Configuration File Syntax Example
DESCRIPTION: Demonstrates the change in interpreting .mvn/maven.config file, where each line is now considered a single argument. This change may require users to adjust their configuration files.

LANGUAGE: plaintext
CODE:
.mvn/maven.config

----------------------------------------

TITLE: Plugin Goal Configuration with Default CLI Execution
DESCRIPTION: Maven POM configuration showing how to define default command-line execution configuration for a plugin using the default-cli execution ID.

LANGUAGE: xml
CODE:
<project...>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.3.2</version>
        <executions>
          <execution>
            <id>default-cli</id>
            <configuration>
              <mainClass>com.soebes.test.First</mainClass>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>

----------------------------------------

TITLE: Configuring Maven Arguments in .mvn/maven.config
DESCRIPTION: Each line in the .mvn/maven.config file is now interpreted as a single argument. Multiple arguments must be placed on separate lines.

LANGUAGE: plaintext
CODE:
.mvn/maven.config

----------------------------------------

TITLE: Plugin Goal Configuration with Multiple CLI Executions
DESCRIPTION: Maven POM configuration demonstrating multiple command-line execution configurations for a plugin using different execution IDs.

LANGUAGE: xml
CODE:
<project...>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.3.2</version>
        <executions>
          <execution>
            <id>default-cli</id>
            <configuration>
              <mainClass>com.soebes.test.First</mainClass>
            </configuration>
          </execution>
          <execution>
            <id>second-cli</id>
            <configuration>
              <mainClass>com.soebes.test.Second</mainClass>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>

----------------------------------------

TITLE: Maven Configuration File Format Change
DESCRIPTION: Starting with Maven 3.9.7, each line in .mvn/maven.config file must contain a single argument, with multiple arguments placed on separate lines. This change affects how Maven processes command line arguments from the config file.

LANGUAGE: text
CODE:
.mvn/maven.config

----------------------------------------

TITLE: Demonstrating Version Ranges in Parent Elements in Maven POM
DESCRIPTION: This XML snippet shows how to use version ranges in parent elements within a Maven POM file. It demonstrates the new feature in Maven 3.2.2 that allows specifying a version range for the parent project.

LANGUAGE: XML
CODE:
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.apache</groupId>
    <artifactId>apache</artifactId>
    <version>[3.0,4.0)</version>
  </parent>
  <groupId>org.apache.maven.its.mng2199</groupId>
  <artifactId>valid</artifactId>
  <version>1</version>
  <packaging>pom</packaging>
</project>

----------------------------------------

TITLE: Maven Configuration File Syntax Example
DESCRIPTION: Example showing the new line-based argument parsing in .mvn/maven.config file where each argument must be on a separate line, as per MNG-7684.

LANGUAGE: text
CODE:
--quiet\n--batch-mode\n--errors

----------------------------------------

TITLE: Configuring Maven Plugin Plugin in POM
DESCRIPTION: This XML configuration demonstrates how to set up the maven-plugin-plugin in a Maven POM file. It shows the previously required configuration to run the descriptor generator on compiled classes and avoid errors, which is no longer necessary in Maven 3.2.2+.

LANGUAGE: XML
CODE:
<pluginManagement>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-plugin-plugin</artifactId>
      <version>${mavenPluginPluginVersion}</version>
      <configuration>
        <skipErrorNoDescriptorsFound>true</skipErrorNoDescriptorsFound>
      </configuration>
      <executions>
        <execution>
          <id>mojo-descriptor</id>
          <phase>process-classes</phase>
          <goals>
            <goal>descriptor</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
  </plugins>
</pluginManagement>

----------------------------------------

TITLE: Moving Release Archives to Production
DESCRIPTION: SVN command to move the release archives from dev to release directory after successful vote.

LANGUAGE: bash
CODE:
svn mv https://dist.apache.org/repos/dist/dev/maven/maven-3/$VERSION https://dist.apache.org/repos/dist/release/maven/maven-3 -m "Publish Maven $VERSION Distribution Archives"

----------------------------------------

TITLE: Maven Prerequisites Warning Message Example
DESCRIPTION: Example warning message shown when prerequisites element is used in a non-plugin project, recommending the use of maven-enforcer-plugin instead.

LANGUAGE: text
CODE:
[INFO] Scanning for projects...
[WARNING] The project org.apache.maven:maven:pom:3.5.0-SNAPSHOT uses prerequisites which is only intended for maven-plugin projects but not for non maven-plugin projects. For such purposes you should use the maven-enforcer-plugin. See https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html

----------------------------------------

TITLE: Directory Structure for Maven Release
DESCRIPTION: Shows the required directory structure for Maven release files including binaries and source files with their corresponding signature and checksum files.

LANGUAGE: text
CODE:
https://dist.apache.org/repos/dist/dev/maven/maven-3/
  `-- $VERSION/
      |-- binaries/
      |   |-- apache-maven-$VERSION-bin.tar.gz
      |   |-- apache-maven-$VERSION-bin.tar.gz.asc
      |   |-- apache-maven-$VERSION-bin.tar.gz.sha512
      |   |-- apache-maven-$VERSION-bin.zip
      |   |-- apache-maven-$VERSION-bin.zip.asc
      |   `-- apache-maven-$VERSION-bin.zip.sha512
      `-- source/ (notice: singular...)
          |-- apache-maven-$VERSION-src.tar.gz
          |-- apache-maven-$VERSION-src.tar.gz.asc
          |-- apache-maven-$VERSION-src.tar.gz.sha512
          |-- apache-maven-$VERSION-src.zip
          |-- apache-maven-$VERSION-src.zip.asc
          `-- apache-maven-$VERSION-src.zip.sha512

----------------------------------------

TITLE: Maven Prerequisites Warning Output
DESCRIPTION: Example of warning message shown when using prerequisites tag in non-maven-plugin projects. The message advises using maven-enforcer-plugin instead.

LANGUAGE: shell
CODE:
[INFO] Scanning for projects...
[WARNING] The project org.apache.maven:maven:pom:3.5.0-SNAPSHOT uses prerequisites which is only intended for maven-plugin projects but not for non maven-plugin projects. For such purposes you should use the maven-enforcer-plugin. See https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html

----------------------------------------

TITLE: Configuring SVN Auto-Properties for File Types
DESCRIPTION: This snippet defines Subversion auto-properties for different file extensions and specific files. It sets the end-of-line style and keywords for version control, as well as mime-types for certain file formats.

LANGUAGE: properties
CODE:
[miscellany]
enable-auto-props = yes

[auto-props]
INSTALL = svn:eol-style=native;svn:keywords=Author Date Id Revision
KEYS = svn:eol-style=native;svn:keywords=Author Date Id Revision
Makefile = svn:eol-style=native;svn:keywords=Author Date Id Revision
README = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.aart = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ac = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.aj = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.am = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.apt = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.bat = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.bsh = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.c = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cat = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cgi = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.classpath = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cmd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cpp = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.css = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cs = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.cwiki = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.data = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.dcl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.doc = svn:mime-type=application/msword
*.dsp = svn:eol-style=CRLF
*.dsw = svn:eol-style=CRLF
*.dtd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.egrm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ent = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ft = svn:eol-style=native;svn:keywords=Author Date Id Revision 
*.fml = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.fn = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.fv = svn:eol-style=native;svn:keywords=Author Date Id Revision 
*.grm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.g = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.groovy = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.h = svn:eol-style=native;svn:keywords=Author Date Id Revision
.htaccess = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.html = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.ico = svn:mime-type=image/x-icon
*.ihtml = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.in = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.java = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.jpg = svn:mime-type=image/jpeg
*.jsp = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.js = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.junit = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.m4 = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mdo = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.mod = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pdf = svn:mime-type=application/pdf
*.pen = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.png = svn:mime-type=image/png
*.pod = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.pom = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.project = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.properties = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.py = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rb = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rdf = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.resx = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rnc = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rng = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rnx = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.rss = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.sh = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.svg = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.tld = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.txt = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.types = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.vm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xcat = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xconf = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xdoc = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xegrm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xgrm = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xlex = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xmap = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xml = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsd = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsl = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xslt = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xsp = svn:eol-style=native;svn:keywords=Author Date Id Revision
*.xul = svn:eol-style=native;svn:keywords=Author Date Id Revision

----------------------------------------

TITLE: Build Progress Module Information Display
DESCRIPTION: Shows the new build progress indicator format that displays current module number out of total modules being built.

LANGUAGE: text
CODE:
[INFO] Building parent 5.0.1-SNAPSHOT                                     [1/9]

----------------------------------------

TITLE: Including tools.jar in Dependencies
DESCRIPTION: Shows how to include tools.jar as a dependency in a Maven project.

LANGUAGE: XML
CODE:
<!-- ... -->
<profiles>
  <profile>
    <id>default-tools.jar</id>
    <activation>
      <property>
        <name>java.vendor</name>
        <value>Sun Microsystems Inc.</value>
      </property>
    </activation>
    <dependencies>
      <dependency>
        <groupId>com.sun</groupId>
        <artifactId>tools</artifactId>
        <version>1.4.2</version>
        <scope>system</scope>
        <systemPath>${java.home}/../lib/tools.jar</systemPath>
      </dependency>
    </dependencies>
  </profile>
</profiles>
  <!-- ... -->

----------------------------------------

TITLE: Reactor Build Summary Output
DESCRIPTION: Shows the enhanced reactor summary format including version information for build modules.

LANGUAGE: text
CODE:
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] parent 5.0.1-SNAPSHOT .............................. SUCCESS [  0.238 s]
[INFO] domain ............................................. SUCCESS [  0.014 s]
[INFO] service-client ..................................... SUCCESS [  0.008 s]
[INFO] webgui ............................................. SUCCESS [  0.010 s]
[INFO] service ............................................ SUCCESS [  0.007 s]
[INFO] app ................................................ SUCCESS [  0.005 s]
[INFO] appasm ............................................. SUCCESS [  0.005 s]
[INFO] shade .............................................. SUCCESS [  0.006 s]
[INFO] assembly 5.0.1-SNAPSHOT ............................ SUCCESS [  0.005 s]
[INFO] ------------------------------------------------------------------------

----------------------------------------

TITLE: Maven 3.8.8 Release Notes Content
DESCRIPTION: Markdown documentation containing the release notes for Maven 3.8.8, including license header, overview of changes, and relevant resource links.

LANGUAGE: markdown
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/modules/index.html#Markdown
-->

# Release Notes &#x2013; Maven 3.8.8

The Apache Maven team would like to announce the release of Maven 3.8.8.

Maven 3.8.8 is [available for download][0].

Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting, and documentation from a central place.

The core release is independent of plugin releases. Further releases of plugins will be made separately. See the [PluginList][1] for more information.

If you have any questions, please consult:

- the web site: [https://maven.apache.org/][2]
- the maven-user mailing list: [https://maven.apache.org/mailing-lists.html](/mailing-lists.html)
- the reference documentation: [https://maven.apache.org/ref/3.8.8/](/ref/3.8.8/)

## Overview About the Changes

* Regression fixes from Maven 3.8.7
* General fixes
* Non-functional backports and improvements from 3.9.0

The full list of changes can be found in our [issue management system][4].

## Known Issues

*none*

## Complete Release Notes

See [complete release notes for all versions][5]

[0]: ../../download.html
[1]: ../../plugins/index.html
[2]: https://maven.apache.org/
[4]: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12316922&version=12352869
[5]: ../../docs/history.html

----------------------------------------

TITLE: Maven XML Configuration Comment
DESCRIPTION: XML comment block containing license information and a reference to the Apache Maven documentation for file syntax help.

LANGUAGE: XML
CODE:
<!-- 
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/references/apt-format.html
-->

----------------------------------------

TITLE: Maven License Header Comment
DESCRIPTION: Standard Apache Software Foundation (ASF) license header comment block describing the licensing terms under Apache License 2.0

LANGUAGE: markdown
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/modules/index.html#Markdown
-->

----------------------------------------

TITLE: Displaying Maven Reactor Summary Output with Single Version
DESCRIPTION: Example of improved reactor build summary output format when all modules share the same version number. Shows build status and timing for each module in a multi-module project.

LANGUAGE: text
CODE:
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for parent 5.0.4-SNAPSHOT:
[INFO]
[INFO] parent ............................................. SUCCESS [  1.559 s]
[INFO] domain ............................................. SUCCESS [  1.238 s]
[INFO] service-client ..................................... SUCCESS [  0.108 s]
[INFO] webgui ............................................. SUCCESS [  0.652 s]
[INFO] service ............................................ SUCCESS [  0.379 s]
[INFO] app ................................................ SUCCESS [  0.304 s]
[INFO] appasm ............................................. SUCCESS [  0.265 s]
[INFO] shade .............................................. SUCCESS [  0.440 s]
[INFO] assembly ........................................... SUCCESS [  1.531 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  6.824 s
[INFO] Finished at: 2018-11-01T12:20:16+01:00
[INFO] ------------------------------------------------------------------------

----------------------------------------

TITLE: Markdown Release Notes for Maven 4.0.0-alpha-4
DESCRIPTION: A markdown document detailing the release notes for Maven 4.0.0-alpha-4, including license header, overview of changes, known issues, and reference links.

LANGUAGE: markdown
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/modules/index.html#Markdown
-->

# Release Notes &#x2013; Maven 4.0.0-alpha-4

----------------------------------------

TITLE: Displaying Maven Reactor Summary Output with Multiple Versions
DESCRIPTION: Example of reactor build summary output format when modules have different version numbers. Shows build status and timing for each module with their individual versions.

LANGUAGE: text
CODE:
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] Apache Maven ACR Plugin 3.0.1-SNAPSHOT ............. SUCCESS [  0.221 s]
[INFO] Apache Maven AntRun Plugin 3.0.0-SNAPSHOT .......... SUCCESS [  0.004 s]
[INFO] Apache Maven Changelog Plugin 2.4-SNAPSHOT ......... SUCCESS [  0.005 s]
[INFO] Apache Maven Changes Plugin 3.0.0-SNAPSHOT ......... SUCCESS [  0.487 s]
[INFO] Apache Maven Clean Plugin 3.0.1-SNAPSHOT ........... SUCCESS [  0.003 s]
[INFO] Apache Maven Compiler Plugin 3.7.1-SNAPSHOT ........ SUCCESS [  0.026 s]
[INFO] Apache Maven Deploy Plugin 3.0.0-SNAPSHOT .......... SUCCESS [  0.005 s]
[INFO] Apache Maven Documentation Checker Plugin 1.2-SNAPSHOT SUCCESS [  0.058 s]
[INFO] Apache Maven EAR Plugin 3.0.0-SNAPSHOT ............. SUCCESS [  0.003 s]
[INFO] Apache Maven EJB Plugin 3.0.1-SNAPSHOT ............. SUCCESS [  0.004 s]

----------------------------------------

TITLE: Maven License Header Comment
DESCRIPTION: Standard Apache Software Foundation (ASF) license header comment block for Maven documentation files

LANGUAGE: xml
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/modules/index.html#Markdown
-->

----------------------------------------

TITLE: Configuring URL Inheritance in Maven POM
DESCRIPTION: Example of configuring URL inheritance behavior in Maven POM for multi-module builds using the new child.project.url.inherit.append.path attribute and related SCM settings.

LANGUAGE: XML
CODE:
<project child.project.url.inherit.append.path="false">
  <url>...</url>

  <scm child.scm.connection.inherit.append.path="false"
       child.scm.developerConnection.inherit.append.path="false"
       child.scm.url.inherit.append.path="false">
    <connection>...</connection>
    <developerConnection>...</developerConnection>
    <url>...</url>
  </scm>

  <distributionManagement>
    <site child.site.url.inherit.append.path="false">
      <url>...</url>
    </site>
  </distributionManagement>
</project>

----------------------------------------

TITLE: Maven Configuration File Comments
DESCRIPTION: XML comment block containing Apache License 2.0 information and documentation reference for Maven configuration file syntax.

LANGUAGE: xml
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/modules/index.html#Markdown
-->

----------------------------------------

TITLE: Maven Error Stack Trace Example
DESCRIPTION: Example of an error stack trace showing a NullPointerException that occurs when using reportSet without a report element in Maven reporting.

LANGUAGE: text
CODE:
[INFO] Scanning for projects...
[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]
org.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:120)
...
Caused by: java.lang.NullPointerException
    at org.apache.maven.model.plugin.DefaultReportingConverter.convert (DefaultReportingConverter.java:243)
...

----------------------------------------

TITLE: Apache License Header Comment Block
DESCRIPTION: Standard Apache License 2.0 header comment block included at the top of the file, providing licensing information and reference to APT format documentation.

LANGUAGE: xml
CODE:
<!-- 
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/references/apt-format.html
-->

----------------------------------------

TITLE: Maven Reproducible Build Command for Windows
DESCRIPTION: Command to build Maven 3.6.3 from source on Windows with JDK 8 to produce bit-by-bit identical output matching the official release binaries.

LANGUAGE: shell
CODE:
mvn -DbuildNumber=cecedd343002696d0abb50b32b541b8a6ba2883f package

----------------------------------------

TITLE: Creating HTML Grid Layout for Maven Action Card Thumbnails
DESCRIPTION: This HTML snippet creates a responsive grid layout using Bootstrap classes to display thumbnails of Maven action cards. Each thumbnail is a clickable link to the full-size image.

LANGUAGE: HTML
CODE:
<ul class="thumbnails">
<li class="span12"></li> <!--  hack to align grid -->

<li class="span3">
<a href="/images/branding/i_am_a_proud_maven_user_1.png"><img src="/images/branding/i_am_a_proud_maven_user_1.png" class="thumbnail" alt="" /></a>
</li>
<li class="span3">
<a href="/images/branding/im_a_grateful_maven_user_1.png"><img src="/images/branding/im_a_grateful_maven_user_1.png" class="thumbnail" alt="" /></a>
</li>
<li class="span3">
<a href="/images/branding/im_a_happy_maven_user_1.png"><img src="/images/branding/im_a_happy_maven_user_1.png" class="thumbnail" alt="" /></a>
</li>

<li class="span3">
<a href="/images/branding/i_sumbitted_my_first_maven_pull_request_1.png"><img src="/images/branding/i_sumbitted_my_first_maven_pull_request_1.png" class="thumbnail" alt="" /></a>
</li>
<li class="span3">
<a href="/images/branding/my_first_maven_pr_was_merged_1.png"><img src="/images/branding/my_first_maven_pr_was_merged_1.png" class="thumbnail" alt="" /></a>
</li>
<li class="span3">
<a href="/images/branding/i_am_a_maven_contributor_1.png"><img src="/images/branding/i_am_a_maven_contributor_1.png" class="thumbnail" alt="" /></a>
</li>

<li class="span3">
<a href="/images/branding/i_am_a_maven_content_contributor_1.png"><img src="/images/branding/i_am_a_maven_content_contributor_1.png" class="thumbnail" alt="" /></a>
</li>
<li class="span3">
<a href="/images/branding/i_maintain_maven_plugins_1.png"><img src="/images/branding/i_maintain_maven_plugins_1.png" class="thumbnail" alt="" /></a>
</li>
<li class="span3">
<a href="/images/branding/i_am_a_maven_committer_1.png"><img src="/images/branding/i_am_a_maven_committer_1.png" class="thumbnail" alt="" /></a>
</li>

</ul>

----------------------------------------

TITLE: Error Message for Blocked HTTP Repository in Maven
DESCRIPTION: This snippet shows an example error message that occurs when Maven blocks an HTTP repository. It includes details about the failed dependency resolution and the blocked repository.

LANGUAGE: text
CODE:
[ERROR] Failed to execute goal on project test: Could not resolve dependencies for project xxx: Failed to collect dependencies at my.test:dependency:version -> my.test.transitive:transitive:version: Failed to read artifact descriptor for my.test.transitive:transitive:jar:version: Could not transfer artifact my.test.transitive:transitive:pom:version from/to maven-default-http-blocker (http://0.0.0.0/): Blocked mirror for repositories: [blocked-repository-id (http://blocked.repository.org, default, releases+snapshots)]

----------------------------------------

TITLE: Referencing Project Base Directory in Maven Profile Activation
DESCRIPTION: Maven 3.9.5 adds support for using ${project.basedir} in file profile activation, allowing for more flexible profile configurations.

LANGUAGE: xml
CODE:
${project.basedir}

----------------------------------------

TITLE: Maven Config File Format Change
DESCRIPTION: New format requirement for .mvn/maven.config file where each argument must be on a separate line, as introduced in MNG-7684.

LANGUAGE: text
CODE:
.mvn/maven.config

----------------------------------------

TITLE: Maven License Header
DESCRIPTION: Standard Apache License 2.0 header used in Maven project files

LANGUAGE: xml
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

----------------------------------------

TITLE: Apache License Header
DESCRIPTION: Standard Apache License 2.0 header included at the top of the documentation file, specifying the terms under which the content is licensed.

LANGUAGE: xml
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

----------------------------------------

TITLE: Maven License Header
DESCRIPTION: Standard Apache License 2.0 header used in Maven project files

LANGUAGE: xml
CODE:
<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n-->

----------------------------------------

TITLE: Configuration File Format Change for Maven
DESCRIPTION: Starting with Maven 3.9.9, each line in .mvn/maven.config file must contain a single argument. Multiple arguments need to be placed on separate lines as per MNG-7684.

LANGUAGE: plaintext
CODE:
.mvn/maven.config

----------------------------------------

TITLE: Apache License Header Comment in Markdown
DESCRIPTION: Standard Apache License 2.0 header comment block for Maven documentation files, including reference to Markdown syntax help.

LANGUAGE: markdown
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/modules/index.html#Markdown
-->

----------------------------------------

TITLE: Maven XML License Header
DESCRIPTION: Standard Apache License 2.0 header included in Maven project files, providing copyright and usage terms for the software.

LANGUAGE: xml
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/modules/index.html#Markdown
-->

----------------------------------------

TITLE: Markdown Documentation for Maven 4.0.0-rc-1 Release
DESCRIPTION: Markdown formatted release notes document containing license information, release announcements, system requirements, and notable changes for Maven 4.0.0-rc-1 release candidate.

LANGUAGE: markdown
CODE:
# Release Notes &#x2013; Maven 4.0.0-rc-1

The Apache Maven team would like to announce the release of Maven 4.0.0-rc-1.

Maven 4 release **requires Java 17 for runtime**.

This is release candidate release, **is not suitable for production**.

Maven 4.0.0-rc-1 is [available for download][0].

Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting, and documentation from a central place.

The core release is independent of plugin releases. Further releases of plugins will be made separately. See the [PluginList][1] for more information.

----------------------------------------

TITLE: Defining Maven Project License in XML
DESCRIPTION: XML comment block defining the Apache License 2.0 for the Maven project. It includes the full license text and a link to the license file.

LANGUAGE: XML
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/modules/index.html#Markdown
-->

----------------------------------------

TITLE: Configuring Maven Project Info Reports Plugin
DESCRIPTION: Shows how to configure the maven-project-info-reports-plugin to generate an index.html page for the project website.

LANGUAGE: XML
CODE:
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-project-info-reports-plugin</artifactId>
  <reportSets>
     <reportSet>
        <reports>
           <report>index</report>
           <report>dependencies</report>
           <report>cim</report>
           <report>scm-list</report>
           <report>issue-tracking</report>
        </reports>
     </reportSet>
  </reportSets>
</plugin>

----------------------------------------

TITLE: Accessing Plugin Dependencies in a Mojo
DESCRIPTION: Shows how to access a plugin's dependencies from within a Mojo class.

LANGUAGE: Java
CODE:
public class MyMojo
    extends AbstractMojo
{
    /**
     * @parameter expression="${plugin.artifacts}"
     * @required
     */
    private List pluginArtifacts;

    public void execute()
        throws MojoExecutionException
    {
        ...
        for ( Iterator i = pluginArtifacts.iterator(); i.hasNext(); )
        {
            Artifact pluginArtifact = (Artifact) i.next();
        }
        ...
    }
}

----------------------------------------

TITLE: Generating SHA1 Checksums for Repository Files
DESCRIPTION: Shell script to generate SHA1 checksums for JAR, XML, and POM files in a Maven repository.

LANGUAGE: Shell
CODE:
#!/usr/bin/bash

gensum(){
   shaname=$1.sha1

   sum=`sha1sum $1 | cut -f1 -d" "`
   echo $sum > $shaname
}

processFile(){
   while read oneline
   do
      gensum $oneline


   done < "$1"
}

tmpFile=$TMP/shagen.list

echo "Generating sha1 sums for XML files"
find . -name "*.xml" > "$tmpFile"

processFile "$tmpFile"

echo "Generating sha1 sums for POM files"
find . -name "*.pom" > "$tmpFile"

processFile "$tmpFile"

echo "Generating sha1 sums for JAR files"
find . -name "*.jar" > "$tmpFile"

processFile "$tmpFile"

rm "$tmpFile"

----------------------------------------

TITLE: Configuring Antrun Plugin for On-Demand Execution
DESCRIPTION: Shows how to configure the Antrun plugin to be executed on demand with a variable target.

LANGUAGE: XML
CODE:
<plugin>
  <artifactId>maven-antrun-plugin</artifactId>
  <executions>
    <execution>
      <id>one</id>
      <phase>generate-sources</phase>
      <configuration>
        <tasks>
          <echo message="generate-sources!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"/>
        </tasks>
      </configuration>
      <goals>
        <goal>run</goal>
      </goals>
    </execution>

    <execution>
      <id>two</id>
      <phase>package</phase>
      <configuration>
        <tasks>
          <echo message="package!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"/>
        </tasks>
      </configuration>
      <goals>
        <goal>run</goal>
      </goals>
    </execution>
  </executions>
</plugin>

----------------------------------------

TITLE: Configuring Surefire Plugin to Prevent Double Test Execution
DESCRIPTION: Demonstrates how to configure the Surefire plugin to prevent tests from running twice after adding a configuration.

LANGUAGE: XML
CODE:
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-surefire-plugin</artifactId>
  <version>2.0</version>
  <configuration>
    <systemProperties>
      <property>
        <name>net.sourceforge.cobertura.datafile</name>
        <value>C:\cobertura.ser</value>
      </property>
    </systemProperties>
  </configuration>
</plugin>

----------------------------------------

TITLE: Integrating Static HTML into Maven Site
DESCRIPTION: Shows how to integrate static HTML pages into a Maven-generated site.

LANGUAGE: XML
CODE:
<project name="Maven War Plugin">
  <bannerLeft>
    <name>Maven War Plugin</name>
    <src>http://maven.apache.org/images/apache-maven-project.png</src>
    <href>http://maven.apache.org/</href>
  </bannerLeft>
  <bannerRight>
    <src>http://maven.apache.org/images/maven-small.gif</src>
  </bannerRight>
  <body>
    <links>
      <item name="Maven 2" href="http://maven.apache.org/maven2/"/>
    </links>

    <menu name="Overview">
      <item name="Introduction" href="introduction.html"/>
      <item name="How to Use" href="howto.html"/>
    </menu>
    ${reports}
  </body>
</project>

----------------------------------------

TITLE: Adding Main Class to Generated JAR Manifest
DESCRIPTION: Demonstrates how to add a main class entry to the manifest of a generated JAR file.

LANGUAGE: XML
CODE:
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-jar-plugin</artifactId>
  <configuration>
    <archive>
      <manifest>
   <mainClass>com.mycompany.app.App</mainClass>
      </manifest>
    </archive>
  </configuration>
</plugin>

----------------------------------------

TITLE: Using Current Date in POM
DESCRIPTION: Shows how to use the current date in a Maven POM using the buildnumber plugin.

LANGUAGE: XML
CODE:
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>maven-buildnumber-plugin</artifactId>
  <version>0.9.4</version>
  <configuration>
    <format>{0,date,yyyy-MM-dd HH:mm:ss}</format>
    <items>
      <item>timestamp</item>
    </items>
    <doCheck>false</doCheck>
    <doUpdate>false</doUpdate>
  </configuration>
  <executions>
    <execution>
      <phase>validate</phase>
      <goals>
        <goal>create</goal>
      </goals>
    </execution>
  </executions>
</plugin>

----------------------------------------

TITLE: Encrypting Values for Maven 4 Settings
DESCRIPTION: This snippet demonstrates the format of encrypted values used in Maven 4's settings.xml file. It includes the dispatcher name, version, and the encrypted value itself.

LANGUAGE: plaintext
CODE:
{[name=<dispatcher name>,<dispatcher-specific attributes>,version=4.0]<the encrypted value>}

----------------------------------------

TITLE: Specifying Subprojects in Maven POM
DESCRIPTION: In a multi-module Maven project, the parent POM uses the <subproject> element to define its subprojects. This allows for recursive nesting of subprojects within aggregators.

LANGUAGE: xml
CODE:
<subproject>subproject-name</subproject>

----------------------------------------

TITLE: Maven End of Life License Header
DESCRIPTION: Apache Software Foundation license header for Maven 2.x end of life documentation.

LANGUAGE: markdown
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

----------------------------------------

TITLE: Overriding SLF4J Simple Logger Properties in Maven
DESCRIPTION: Demonstrates how to override SLF4J Simple logger properties using Maven's JVM system properties with the -D flag in MAVEN_OPTS. These examples show how to add thread name and logger name to logging lines.

LANGUAGE: properties
CODE:
MAVEN_OPTS=-Dorg.slf4j.simpleLogger.showThreadName=true mvn <goals>
MAVEN_OPTS=-Dorg.slf4j.simpleLogger.showLogName=true mvn <goals>

----------------------------------------

TITLE: Executing Maven Daemon Command in Bash
DESCRIPTION: Demonstrates how to use the Maven Daemon command 'mvnd' instead of the standard 'mvn' command for running Maven builds. This command will keep the daemon alive in the background for faster subsequent builds.

LANGUAGE: bash
CODE:
mvnd clean verify

----------------------------------------

TITLE: HTML Header Configuration for Maven Central Documentation
DESCRIPTION: HTML head section defining the page title and authors for the Maven Central Repository documentation.

LANGUAGE: html
CODE:
<head>
   <title>Maven Central Repository</title>
   <meta name="author" content="Brett Porter" />
   <meta name="author" content="Hervé Boutemy" />
</head>

----------------------------------------

TITLE: HTML Image Map for Maven Central Repository Navigation
DESCRIPTION: Interactive image map definition providing navigation links to various sections of Maven Central Repository documentation and related resources.

LANGUAGE: html
CODE:
<map name="map">
<area shape="rect" coords="0,0,189,128"     alt="standalone public artifact repositories" href="/guides/introduction/introduction-to-repositories.html" />
<area shape="rect" coords="264,76,354,111"  alt="Apache"   href="https://repository.apache.org/content/groups/public/" />
<area shape="rect" coords="378,76,468,111"  alt="OSSRH"    href="https://central.sonatype.org/pages/ossrh-guide.html" />
<area shape="rect" coords="490,75,520,111"  alt="Producers" href="https://central.sonatype.org/pages/producers.html" />
<area shape="rect" coords="329,274,426,312" alt="central index" href="./central-index.html" />
<area shape="rect" coords="39,274,205,314"  alt="archetype" href="/archetype/archetype-models/archetype-catalog/archetype-catalog.html" />
<area shape="rect" coords="65,348,205,383"  alt="repo"     href="https://repo.maven.apache.org/maven2/" />
<area shape="rect" coords="292,356,365,391" alt="ibiblio"  href="http://mirrors.ibiblio.org/pub/mirrors/maven2/" />
<area shape="rect" coords="373,356,447,391" alt="Google"   href="https://storage-download.googleapis.com/maven-central/index.html" />
<area shape="rect" coords="100,126,424,239" alt="Central Upload"                href="./guide-central-repository-upload.html" />
</map>

----------------------------------------

TITLE: Illustrating Maven2 Repository Directory Structure
DESCRIPTION: This code snippet demonstrates the standard directory and file structure of a Maven2 repository, including groupId and artifactId organization, version directories, and various artifact files with their associated checksums and signatures.

LANGUAGE: plaintext
CODE:
Repository root
|-- archetype-catalog.xml
`-- ${groupId as directory}/
    |-- maven-metadata.xml
    |--                   .${checksums}
    `-- ${artifactId}/
        |-- maven-metadata.xml
        |--                   .${checksums}
        `-- ${version}/
            |-- ${artifactId}-${version}.pom
            |--                             .asc
            |--                             .${checksums}
            |-- ${artifactId}-${version}.${extension}
            |--                                     .asc
            |--                                     .${checksums}
            |-- ${artifactId}-${version}-${classifier}.${extension}
            |--                                                    .asc
            `--                                                    .${checksums}

----------------------------------------

TITLE: Rendering Maven Repositories Diagram in HTML/Markdown
DESCRIPTION: This snippet demonstrates how to embed an image with an image map in HTML/Markdown, providing clickable areas that link to various Maven-related resources.

LANGUAGE: markdown
CODE:
<p align="center">
<img src="../repository/maven-repositories.png" border="0" usemap="#map" />

<map name="map">
<area shape="rect" coords="596,326,666,363" alt="JBoss"                         href="http://repository.jboss.org/maven2/" />
<area shape="rect" coords="0,184,460,421"   alt="central (default)"             href="../repository/index.html" />
<area shape="rect" coords="187,593,277,629" alt="Maven"                         href="/what-is-maven.html" />
<area shape="rect" coords="280,628,403,649" alt="local repository"              href="/guides/mini/guide-configuring-maven.html" />
<area shape="rect" coords="364,498,570,534" alt="Repository Manager"            href="/repository-management.html" />
<area shape="rect" coords="303,545,451,584" alt="settings.xml &lt;mirrorOf&gt;" href="/guides/mini/guide-mirror-settings.html" />
<area shape="rect" coords="407,589,628,653" alt="pom.xml &lt;repository&gt;"    href="/guides/mini/guide-multiple-repositories.html" />
</map>

</p>

----------------------------------------

TITLE: Illustrating Snapshot Version Resolution for Consumption in Maven
DESCRIPTION: This snippet demonstrates how Maven resolves a snapshot version when consuming snapshot artifacts. It shows the process of mapping a snapshot version to its corresponding timestamped version using remote repository metadata.

LANGUAGE: markdown
CODE:
```
1.0-SNAPSHOT -> Remote V Level Repository Metadata -> 1.0-YYYYMMDD.HHMMS-X
```

----------------------------------------

TITLE: Defining Dependency with Explicit Classifier in Maven POM
DESCRIPTION: This XML snippet shows how to define a dependency with an explicit classifier in a Maven POM file. It specifies the groupId, artifactId, version, and classifier for a test support artifact.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.project</groupId>
  <artifactId>reusable-test-support</artifactId>
  <version>1.0</version>
  <classifier>tests</classifier>
</dependency>

----------------------------------------

TITLE: Defining Dependency with Implicit Classifier in Maven POM
DESCRIPTION: This XML snippet demonstrates an alternative way to define the same dependency as above, but using the type element instead of an explicit classifier. The type 'test-jar' implicitly sets the classifier to 'tests'.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.project</groupId>
  <artifactId>reusable-test-support</artifactId>
  <version>1.0</version>
  <type>test-jar</type>
</dependency>

----------------------------------------

TITLE: Apache License Header Comment in HTML
DESCRIPTION: Standard Apache License 2.0 header comment block defining the usage terms and conditions for the file.

LANGUAGE: html
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

----------------------------------------

TITLE: HTML Page Header
DESCRIPTION: Basic HTML head section defining the page title for Maven Tools documentation.

LANGUAGE: html
CODE:
<head>
   <title>Maven Tools</title>
</head>

----------------------------------------

TITLE: Setting Artifact File in Maven Packaging Plugins
DESCRIPTION: Demonstrates the required method call for packaging plugins to set the generated artifact file. This ensures proper functioning within the Maven reactor.

LANGUAGE: java
CODE:
project.getArtifact().setFile(fileYouGenerated)

----------------------------------------

TITLE: Maven Parent POM Configuration for Single Source Tree
DESCRIPTION: Parent POM configuration that enables Maven to work with a non-standard single source tree structure. Sets up source directory and resource locations for child modules.

LANGUAGE: xml
CODE:
<project>
   <modelVersion>4.0.0</modelVersion>
   <groupId>com.acme</groupId>
   <artifactId>app</artifactId>
   <packaging>pom</packaging>
   <version>1.0-SNAPSHOT</version>
   <name>Acme Application</name>
   <modules>
     <module>util</module>
     <module>gui</module>
   </modules>
   <build>
     <sourceDirectory>.</sourceDirectory>
     <resources>
       <resource>
         <directory>resources</directory>
       </resource>
     </resources>
   </build>
</project>

----------------------------------------

TITLE: Maven Plugin Configuration Example
DESCRIPTION: Proposed plugin configuration for encapsulating non-standard project structure settings into a reusable Maven plugin.

LANGUAGE: xml
CODE:
<build>
   <plugins>
     <plugin>
       <groupId>com.maven.plugins</groupId>
       <artifactId>project-structure</artifactId>
       <version>1.0</version>
       <configuration>
         <method>one-tree</method>
       </configuration>
     </plugin>
   </plugins>
</build>

----------------------------------------

TITLE: Generating SVN Commands for Maven Component Release Documentation in JavaScript
DESCRIPTION: This JavaScript function generates SVN commands for publishing Maven component release documentation. It takes into account the component category, artifact ID, version, and handles special cases for different component types.

LANGUAGE: JavaScript
CODE:
function instructions() {
  var category = document.location.search.substring(1);
  var artifactId = document.getElementById('artifactId').value;
  var version = document.getElementById('version').value;
  var v4x = document.getElementById('v4x').checked;
  var v4xBox = document.getElementById('v4x-box');
  var svnmucc = svnmuccTemplate;
  if (category == "core") {
    artifactId = "Maven";
    svnmucc = svnmucc.substring(0, svnmucc.indexOf("  rm "));
    svnmucc = replaceAll(svnmucc, '${artifactId}-LATEST', '3-LATEST');
    svnmucc = replaceAll(svnmucc, '${category}-archives', 'ref');
    svnmucc = replaceAll(svnmucc, '${artifactId}-${version} \\', '${version}\n\n');
    v4x = false;
    v4xBox.style.display = 'none';
  }
  if (category.indexOf("doxia") == 0) {
    svnmucc = replaceAll(svnmucc, 'maven/website/components', 'maven/doxia/website/components');
    if (category != "doxia-tools") {
      document.getElementById('artifactId').value = category;
    }
  }
  if (category == "resolver" || category == "others" || category == "doxia" || category == "doxia-sitetools") {
    // category directory is based on artifactId
    svnmucc = replaceAll(svnmucc, '${category}/${artifactId}', '${artifactId}');
    svnmucc = replaceAll(svnmucc, '${category}', '${artifactId}');
  }
  svnmucc = replaceAll(svnmucc, '${category}', category);
  if (artifactId) {
    svnmucc = replaceAll(svnmucc, '${artifactId}', artifactId);
  }
  if (version) {
    svnmucc = replaceAll(svnmucc, '${version}', version);
  }
  if (v4x) {
    svnmucc = replaceAll(svnmucc, '${vSuffix}', '-4.x');
  } else {
    svnmucc = replaceAll(svnmucc, '${vSuffix}', '');
  }
  document.getElementById('svnmucc').innerHTML = svnmucc;
}

----------------------------------------

TITLE: Selecting Maven Component Category and Updating UI in JavaScript
DESCRIPTION: This JavaScript function updates the UI based on the selected Maven component category. It sets the appropriate URLs for the index page and archives directory, and calls the instructions function to generate SVN commands.

LANGUAGE: JavaScript
CODE:
function selectCategory(index, archive) {
  var indexPage = document.getElementById('index-page');
  var linkIndexPage = document.getElementById('link-index-page');
  var archives = document.getElementById('archives');
  var indexUrl = index ? ('https://maven.apache.org/' + index) : '';
  indexPage.setAttribute('src', indexUrl);
  archives.setAttribute('src', 'https://maven.apache.org/' + archive + '?C=M;O=D');
  instructions();
}

----------------------------------------

TITLE: Staging Maven Documentation
DESCRIPTION: Commands to stage the Maven site documentation before the release vote.

LANGUAGE: bash
CODE:
mvn -Preporting site site:stage
mvn scm-publish:publish-scm

----------------------------------------

TITLE: Copying Reference Documentation
DESCRIPTION: SVN command to copy the staged documentation to its final versioned location.

LANGUAGE: bash
CODE:
svn cp https://svn.apache.org/repos/asf/maven/website/components/ref/3-LATEST https://svn.apache.org/repos/asf/maven/website/components/ref/$VERSION -m "Maven $VERSION released"

----------------------------------------

TITLE: HTML Header Configuration
DESCRIPTION: Basic HTML head section defining the page title and authors for the Maven documentation page

LANGUAGE: xml
CODE:
<head>
   <title>External Resources on Maven</title>
   <meta name="author" content="Brett Porter" />
   <meta name="author" content="Vincent Massol" />
</head>

----------------------------------------

TITLE: Maven License Header in XML
DESCRIPTION: This XML comment block contains the Apache License 2.0 header, which is required for all Apache Software Foundation projects. It outlines the terms under which the software is distributed.

LANGUAGE: xml
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

----------------------------------------

TITLE: Apache License Header Comment in Markdown
DESCRIPTION: Standard Apache License 2.0 header comment block included in the release notes documentation.

LANGUAGE: markdown
CODE:
<!-- 
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

NOTE: For help with the syntax of this file, see:
http://maven.apache.org/doxia/references/apt-format.html
-->

----------------------------------------

TITLE: Running Maven Site Locally
DESCRIPTION: Command to run the Maven website locally on port 8080 for development and testing purposes

LANGUAGE: shell
CODE:
$ mvn site:run

----------------------------------------

TITLE: Maven Configuration File Example
DESCRIPTION: Example showing the Apache License header format for Maven configuration files. This demonstrates the standard header format required for Maven-related files.

LANGUAGE: XML
CODE:
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
-->