TITLE: Installing PHP and Laravel on Different Operating Systems
DESCRIPTION: Commands for installing PHP, Composer, and Laravel installer on macOS, Windows, and Linux systems. These commands set up the complete development environment.

LANGUAGE: shell
CODE:
/bin/bash -c "$(curl -fsSL https://php.new/install/mac/8.4)"

LANGUAGE: shell
CODE:
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://php.new/install/windows/8.4'))

LANGUAGE: shell
CODE:
/bin/bash -c "$(curl -fsSL https://php.new/install/linux/8.4)"

----------------------------------------

TITLE: Generating a Basic Controller in Laravel
DESCRIPTION: Shows how to use Artisan to create a new controller class.

LANGUAGE: shell
CODE:
php artisan make:controller UserController

----------------------------------------

TITLE: Defining a Basic Controller Method in Laravel
DESCRIPTION: Demonstrates how to create a controller method that responds to HTTP requests and returns a view.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\View\View;

class UserController extends Controller
{
    /**
     * Show the profile for a given user.
     */
    public function show(string $id): View
    {
        return view('user.profile', [
            'user' => User::findOrFail($id)
        ]);
    }
}

----------------------------------------

TITLE: API Route Example
DESCRIPTION: Example of defining an API route with authentication middleware

LANGUAGE: php
CODE:
Route::get('/user', function (Request $request) {
    return $request->user();
})->middleware('auth:sanctum');

----------------------------------------

TITLE: Creating and Starting a New Laravel Application
DESCRIPTION: Commands for creating a new Laravel application and starting the development environment with npm installation and server initialization.

LANGUAGE: shell
CODE:
laravel new example-app
cd example-app
npm install && npm run build
composer run dev

----------------------------------------

TITLE: Laravel Optimization Commands
DESCRIPTION: Collection of Artisan commands for optimizing Laravel application performance including config, event, route, and view caching.

LANGUAGE: shell
CODE:
php artisan optimize
php artisan optimize:clear
php artisan config:cache
php artisan event:cache
php artisan route:cache
php artisan view:cache

----------------------------------------

TITLE: Manually Authenticating Users
DESCRIPTION: Shows how to manually authenticate users by checking credentials against the database using the Auth attempt method.

LANGUAGE: PHP
CODE:
if (Auth::attempt(['email' => $email, 'password' => $password])) {
    $request->session()->regenerate();
    return redirect()->intended('dashboard');
}

----------------------------------------

TITLE: Basic Request Handling in Laravel Controller
DESCRIPTION: Example of handling an HTTP request in a Laravel controller using dependency injection to access the Request object

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class UserController extends Controller
{
    /**
     * Store a new user.
     */
    public function store(Request $request): RedirectResponse
    {
        $name = $request->input('name');

        // Store the user...

        return redirect('/users');
    }
}

----------------------------------------

TITLE: Configuring Nginx Server for Laravel
DESCRIPTION: Nginx server configuration for serving Laravel applications. Includes settings for routing requests to public/index.php, security headers, and PHP-FPM configuration.

LANGUAGE: nginx
CODE:
server {
    listen 80;
    listen [::]:80;
    server_name example.com;
    root /srv/example.com/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ ^/index\.php(/|$) {
        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
        fastcgi_hide_header X-Powered-By;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}

----------------------------------------

TITLE: Basic Route Definition
DESCRIPTION: Example of defining a basic GET route with a closure in Laravel using the Route facade

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Route;

Route::get('/greeting', function () {
    return 'Hello World';
});

----------------------------------------

TITLE: Creating a Basic Blade View in Laravel
DESCRIPTION: Demonstrates how to create a simple Blade view template with a dynamic variable. The view is stored in the resources/views directory and uses Blade syntax for variable interpolation.

LANGUAGE: blade
CODE:
<!-- View stored in resources/views/greeting.blade.php -->

<html>
    <body>
        <h1>Hello, {{ $name }}</h1>
    </body>
</html>

----------------------------------------

TITLE: Creating a Feature Test in Laravel
DESCRIPTION: This snippet demonstrates how to create a new feature test using Laravel's Artisan command. The test will be placed in the tests/Feature directory by default.

LANGUAGE: shell
CODE:
php artisan make:test UserTest

----------------------------------------

TITLE: Sending Mail in Laravel
DESCRIPTION: Example of sending an email using the Mail facade in a Laravel controller, demonstrating how to specify recipients and send a mailable.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Mail;
use App\Mail\OrderShipped;

Mail::to($request->user())
    ->cc($moreUsers)
    ->bcc($evenMoreUsers)
    ->send(new OrderShipped($order));

----------------------------------------

TITLE: Route with Controller Action
DESCRIPTION: Example of defining a route that points to a controller action

LANGUAGE: php
CODE:
use App\Http\Controllers\UserController;

Route::get('/user', [UserController::class, 'index']);

----------------------------------------

TITLE: Running a Select Query in Laravel
DESCRIPTION: Demonstrates how to execute a SELECT SQL query using Laravel's DB facade. It includes parameter binding for protection against SQL injection.

LANGUAGE: php
CODE:
$users = DB::select('select * from users where active = ?', [1]);

----------------------------------------

TITLE: Creating a Controller for Validation
DESCRIPTION: Example of a simple controller handling incoming requests for validation.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class PostController extends Controller
{
    /**
     * Show the form to create a new blog post.
     */
    public function create(): View
    {
        return view('post.create');
    }

    /**
     * Store a new blog post.
     */
    public function store(Request $request): RedirectResponse
    {
        // Validate and store the blog post...

        $post = /** ... */

        return to_route('post.show', ['post' => $post->id]);
    }
}

----------------------------------------

TITLE: Resetting Database with RefreshDatabase Trait in Laravel Tests
DESCRIPTION: Demonstrates how to use the RefreshDatabase trait to reset the database after each test in both Pest and PHPUnit test frameworks.

LANGUAGE: php
CODE:
<?php

use Illuminate\Foundation\Testing\RefreshDatabase;

uses(RefreshDatabase::class);

test('basic example', function () {
    $response = $this->get('/');

    // ...
});

LANGUAGE: php
CODE:
<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    use RefreshDatabase;

    /**
     * A basic functional test example.
     */
    public function test_basic_example(): void
    {
        $response = $this->get('/');

        // ...
    }
}

----------------------------------------

TITLE: Writing Validation Logic in Controller
DESCRIPTION: Example of implementing validation logic in a Laravel controller's store method.

LANGUAGE: php
CODE:
/**
 * Store a new blog post.
 */
public function store(Request $request): RedirectResponse
{
    $validated = $request->validate([
        'title' => 'required|unique:posts|max:255',
        'body' => 'required',
    ]);

    // The blog post is valid...

    return redirect('/posts');
}

----------------------------------------

TITLE: Using Array Syntax for Validation Rules
DESCRIPTION: Example of specifying validation rules as arrays instead of strings.

LANGUAGE: php
CODE:
$validatedData = $request->validate([
    'title' => ['required', 'unique:posts', 'max:255'],
    'body' => ['required'],
]);

----------------------------------------

TITLE: Handling Database Transactions in Laravel
DESCRIPTION: Demonstrates the use of database transactions in Laravel. The transaction method automatically handles commits and rollbacks based on the execution of the closure.

LANGUAGE: php
CODE:
DB::transaction(function () {
    DB::update('update users set votes = 1');
    DB::delete('delete from posts');
});

----------------------------------------

TITLE: Encrypting User Token in Laravel Controller
DESCRIPTION: Shows how to encrypt a user's DigitalOcean API token using Laravel's Crypt facade before storing it in the database. This ensures sensitive data is securely stored.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Crypt;

class DigitalOceanTokenController extends Controller
{
    /**
     * Store a DigitalOcean API token for the user.
     */
    public function store(Request $request): RedirectResponse
    {
        $request->user()->fill([
            'token' => Crypt::encryptString($request->token),
        ])->save();

        return redirect('/secrets');
    }
}

----------------------------------------

TITLE: Defining Basic User Factory in Laravel
DESCRIPTION: Example of a basic Laravel model factory for creating User models with default attributes using Faker data generation.

LANGUAGE: php
CODE:
namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class UserFactory extends Factory
{
    protected static ?string $password;

    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}

----------------------------------------

TITLE: Creating a Table Schema in Laravel Migration
DESCRIPTION: Define a new database table schema using the Laravel Schema facade and Blueprint class.

LANGUAGE: php
CODE:
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('flights', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('airline');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::drop('flights');
    }
};

----------------------------------------

TITLE: Creating a Custom Validation Rule
DESCRIPTION: Example of creating a custom validation rule using a rule object.

LANGUAGE: php
CODE:
<?php

namespace App\Rules;

use Closure;
use Illuminate\Contracts\Validation\ValidationRule;

class Uppercase implements ValidationRule
{
    /**
     * Run the validation rule.
     */
    public function validate(string $attribute, mixed $value, Closure $fail): void
    {
        if (strtoupper($value) !== $value) {
            $fail('The :attribute must be uppercase.');
        }
    }
}

----------------------------------------

TITLE: Writing a Basic PHPUnit Test in Laravel
DESCRIPTION: This snippet shows how to write a simple test using PHPUnit in Laravel. It defines a test class extending TestCase and includes a basic test method asserting that a condition is true.

LANGUAGE: php
CODE:
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_basic_test(): void
    {
        $this->assertTrue(true);
    }
}

----------------------------------------

TITLE: Basic Database Query with Get
DESCRIPTION: Example of performing a basic database query using Laravel's query builder to retrieve all users from a table.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\DB;
use Illuminate\View\View;

class UserController extends Controller
{
    /**
     * Show a list of all of the application's users.
     */
    public function index(): View
    {
        $users = DB::table('users')->get();

        return view('user.index', ['users' => $users]);
    }
}

----------------------------------------

TITLE: Retrieving Authenticated User
DESCRIPTION: Demonstrates how to access the currently authenticated user through the Auth facade and request object.

LANGUAGE: PHP
CODE:
use Illuminate\Support\Facades\Auth;

$user = Auth::user();
$id = Auth::id();

----------------------------------------

TITLE: Mocking Objects with Laravel's Service Container in PHP
DESCRIPTION: This snippet demonstrates how to mock an object that is injected via Laravel's service container. It uses Mockery to create a mock instance and binds it to the container.

LANGUAGE: php
CODE:
use App\Service;
use Mockery;
use Mockery\MockInterface;

test('something can be mocked', function () {
    $this->instance(
        Service::class,
        Mockery::mock(Service::class, function (MockInterface $mock) {
            $mock->shouldReceive('process')->once();
        })
    );
});

----------------------------------------

TITLE: Validating Nested Attributes
DESCRIPTION: Example of validating nested field data using dot notation.

LANGUAGE: php
CODE:
$request->validate([
    'title' => 'required|unique:posts|max:255',
    'author.name' => 'required',
    'author.description' => 'required',
]);

----------------------------------------

TITLE: Implementing HasApiTokens Trait in User Model
DESCRIPTION: Adding Sanctum's HasApiTokens trait to the User model to enable API token functionality.

LANGUAGE: php
CODE:
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;
}

----------------------------------------

TITLE: Defining Basic Gate Authorization in Laravel
DESCRIPTION: Example of defining a basic gate in the AppServiceProvider to authorize post updates by comparing user IDs

LANGUAGE: php
CODE:
use App\Models\Post;
use App\Models\User;
use Illuminate\Support\Facades\Gate;

/**
 * Bootstrap any application services.
 */
public function boot(): void
{
    Gate::define('update-post', function (User $user, Post $post) {
        return $user->id === $post->user_id;
    });
}

----------------------------------------

TITLE: Monitoring Database Query Time in Laravel
DESCRIPTION: Example of setting up a listener to monitor cumulative query time in Laravel. This can help identify performance bottlenecks related to database queries.

LANGUAGE: php
CODE:
DB::whenQueryingForLongerThan(500, function (Connection $connection, QueryExecuted $event) {
    // Notify development team...
});

----------------------------------------

TITLE: Basic Laravel Facade Usage Example
DESCRIPTION: Demonstrates basic usage of Laravel facades for cache and routing functionality using static-like interface.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Route;

Route::get('/cache', function () {
    return Cache::get('key');
});

----------------------------------------

TITLE: Making a GET Request with Laravel's HTTP Client
DESCRIPTION: Demonstrates how to make a basic GET request using Laravel's HTTP client and access the response data.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Http;

$response = Http::get('http://example.com');

$response->body() : string;
$response->json($key = null, $default = null) : mixed;
$response->object() : object;
$response->collect($key = null) : Illuminate\Support\Collection;
$response->status() : int;
$response->successful() : bool;
$response->failed() : bool;
$response->header($header) : string;
$response->headers() : array;

----------------------------------------

TITLE: Configuring Exception Reporting in Laravel
DESCRIPTION: Demonstrates how to register a custom exception reporting callback for a specific exception type using the 'report' method in the application's bootstrap/app.php file.

LANGUAGE: php
CODE:
->withExceptions(function (Exceptions $exceptions) {
    $exceptions->report(function (InvalidOrderException $e) {
        // ...
    });
})

----------------------------------------

TITLE: Implementing Token Validation Middleware in Laravel
DESCRIPTION: Example of a middleware class that checks for a valid token in the request.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class EnsureTokenIsValid
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if ($request->input('token') !== 'my-secret-token') {
            return redirect('/home');
        }

        return $next($request);
    }
}

----------------------------------------

TITLE: Generating a Resource Controller in Laravel
DESCRIPTION: Demonstrates how to create a resource controller using Artisan.

LANGUAGE: shell
CODE:
php artisan make:controller PhotoController --resource

----------------------------------------

TITLE: Queueing Mail in Laravel
DESCRIPTION: Example of queueing an email for background sending using Laravel's queue system, including delayed queueing and specifying queue connections.

LANGUAGE: php
CODE:
Mail::to($request->user())
    ->cc($moreUsers)
    ->bcc($evenMoreUsers)
    ->queue(new OrderShipped($order));

Mail::to($request->user())
    ->cc($moreUsers)
    ->bcc($evenMoreUsers)
    ->later(now()->addMinutes(10), new OrderShipped($order));

$message = (new OrderShipped($order))
    ->onConnection('sqs')
    ->onQueue('emails');

Mail::to($request->user())
    ->cc($moreUsers)
    ->bcc($evenMoreUsers)
    ->queue($message);

----------------------------------------

TITLE: Defining One to One Relationship
DESCRIPTION: Example of defining a one-to-one relationship between User and Phone models using hasOne and belongsTo relationships.

LANGUAGE: php
CODE:
public function phone(): HasOne
{
    return $this->hasOne(Phone::class);
}

----------------------------------------

TITLE: Defining Many to Many Relationship
DESCRIPTION: Example of defining a many-to-many relationship between User and Role models with pivot table.

LANGUAGE: php
CODE:
public function roles(): BelongsToMany
{
    return $this->belongsToMany(Role::class);
}

----------------------------------------

TITLE: Creating a Collection with the collect() Helper
DESCRIPTION: Example of using the collect() helper to create a new collection instance from an array, run the strtoupper function on each element, and remove empty elements.

LANGUAGE: php
CODE:
$collection = collect(['taylor', 'abigail', null])->map(function (?string $name) {
    return strtoupper($name);
})->reject(function (string $name) {
    return empty($name);
});

----------------------------------------

TITLE: Defining One to Many Relationship
DESCRIPTION: Example of defining a one-to-many relationship between Post and Comment models.

LANGUAGE: php
CODE:
public function comments(): HasMany
{
    return $this->hasMany(Comment::class);
}

----------------------------------------

TITLE: Creating Middleware with Artisan Command in Laravel
DESCRIPTION: Use the Laravel Artisan command to generate a new middleware class.

LANGUAGE: shell
CODE:
php artisan make:middleware EnsureTokenIsValid

----------------------------------------

TITLE: Supervisor Configuration for Queue Workers
DESCRIPTION: Example configuration file for setting up Supervisor to monitor Laravel queue workers

LANGUAGE: ini
CODE:
[program:laravel-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /home/forge/app.com/artisan queue:work sqs --sleep=3 --tries=3 --max-time=3600
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=forge
numprocs=8
redirect_stderr=true
stdout_logfile=/home/forge/app.com/worker.log
stopwaitsecs=3600

----------------------------------------

TITLE: Registering a Resource Route in Laravel
DESCRIPTION: Shows how to define a resource route that maps to a resource controller.

LANGUAGE: php
CODE:
use App\Http\Controllers\PhotoController;

Route::resource('photos', PhotoController::class);

----------------------------------------

TITLE: Basic Cache Operations
DESCRIPTION: Example showing basic cache operations using Laravel's Cache facade in a controller

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Cache;

class UserController extends Controller
{
    public function index(): array
    {
        $value = Cache::get('key');

        return [
            // ...
        ];
    }
}

----------------------------------------

TITLE: Running Parallel Tests in Laravel
DESCRIPTION: This snippet shows how to run tests in parallel using Laravel's Artisan command with the --parallel option, which can significantly reduce test execution time.

LANGUAGE: shell
CODE:
php artisan test --parallel

----------------------------------------

TITLE: Implementing Basic Service Provider in Laravel
DESCRIPTION: Demonstrates the implementation of a basic service provider in Laravel. This example shows how to define a register method to bind a service into the container.

LANGUAGE: php
CODE:
<?php

namespace App\Providers;

use App\Services\Riak\Connection;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Support\ServiceProvider;

class RiakServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        $this->app->singleton(Connection::class, function (Application $app) {
            return new Connection(config('riak'));
        });
    }
}

----------------------------------------

TITLE: Running Tests with Pest in Laravel
DESCRIPTION: This snippet demonstrates how to run tests using the Pest testing framework in Laravel via the command line.

LANGUAGE: shell
CODE:
./vendor/bin/pest

----------------------------------------

TITLE: Basic Job Class Definition in PHP
DESCRIPTION: Example of defining a basic job class in Laravel with constructor and handle method

LANGUAGE: php
CODE:
<?php

namespace App\Jobs;

use App\Models\Podcast;
use App\Services\AudioProcessor;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Queue\Queueable;

class ProcessPodcast implements ShouldQueue
{
    use Queueable;

    /**
     * Create a new job instance.
     */
    public function __construct(
        public Podcast $podcast,
    ) {}

    /**
     * Execute the job.
     */
    public function handle(AudioProcessor $processor): void
    {
        // Process uploaded podcast...
    }
}

----------------------------------------

TITLE: Configuring Mailgun Driver for Laravel Mail
DESCRIPTION: Steps to configure the Mailgun driver for sending emails in Laravel, including required packages, configuration settings, and environment variables.

LANGUAGE: shell
CODE:
composer require symfony/mailgun-mailer symfony/http-client

LANGUAGE: php
CODE:
'default' => env('MAIL_MAILER', 'mailgun'),

'mailgun' => [
    'transport' => 'mailgun',
    // 'client' => [
    //     'timeout' => 5,
    // ],
],

'mailgun' => [
    'domain' => env('MAILGUN_DOMAIN'),
    'secret' => env('MAILGUN_SECRET'),
    'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),
    'scheme' => 'https',
],

----------------------------------------

TITLE: Zero Configuration Resolution Example in PHP
DESCRIPTION: Shows how Laravel can automatically resolve class dependencies without explicit configuration when using concrete classes.

LANGUAGE: php
CODE:
<?php

class Service
{
    // ...
}

Route::get('/', function (Service $service) {
    die($service::class);
});

----------------------------------------

TITLE: Creating a Unit Test in Laravel
DESCRIPTION: This snippet shows how to create a new unit test in Laravel using the Artisan command with the --unit option. The test will be placed in the tests/Unit directory.

LANGUAGE: shell
CODE:
php artisan make:test UserTest --unit

----------------------------------------

TITLE: Accessing Configuration Values in Laravel
DESCRIPTION: Use the Config facade or global 'config' function to access configuration values using dot notation.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Config;

$value = Config::get('app.timezone');

$value = config('app.timezone');

// Retrieve a default value if the configuration value does not exist...
$value = config('app.timezone', 'Asia/Seoul');

----------------------------------------

TITLE: Creating Middleware Groups in Laravel
DESCRIPTION: Grouping multiple middleware under a single key for easier assignment to routes.

LANGUAGE: php
CODE:
use App\Http\Middleware\First;
use App\Http\Middleware\Second;

->withMiddleware(function (Middleware $middleware) {
    $middleware->appendToGroup('group-name', [
        First::class,
        Second::class,
    ]);
})

----------------------------------------

TITLE: Basic HTTP Authentication Middleware
DESCRIPTION: Implementation of a middleware for stateless HTTP Basic Authentication.

LANGUAGE: PHP
CODE:
public function handle(Request $request, Closure $next): Response
{
    return Auth::onceBasic() ?: $next($request);
}

----------------------------------------

TITLE: Implementing MustVerifyEmail Interface in User Model
DESCRIPTION: This snippet shows how to implement the MustVerifyEmail interface in the User model, which is necessary for enabling email verification.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable implements MustVerifyEmail
{
    use Notifiable;

    // ...
}

----------------------------------------

TITLE: Basic File Storage Operations in Laravel
DESCRIPTION: Example of storing and retrieving files using Laravel's Storage facade with the local disk driver

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Storage;

Storage::disk('local')->put('example.txt', 'Contents');

----------------------------------------

TITLE: Writing a Basic Pest Test in Laravel
DESCRIPTION: This snippet demonstrates how to write a simple test using the Pest testing framework in Laravel. It uses the 'test' function and an expectation to assert that a condition is true.

LANGUAGE: php
CODE:
<?php

test('basic', function () {
    expect(true)->toBeTrue();
});

----------------------------------------

TITLE: Basic HTTP Test in Laravel using PHPUnit
DESCRIPTION: A simple test that makes a GET request to the root URL and asserts a successful response using PHPUnit syntax.

LANGUAGE: php
CODE:
<?php

namespace Tests\Feature;

use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}

----------------------------------------

TITLE: Basic HTTP Authentication Middleware
DESCRIPTION: Implementation of a middleware for stateless HTTP Basic Authentication.

LANGUAGE: PHP
CODE:
public function handle(Request $request, Closure $next): Response
{
    return Auth::onceBasic() ?: $next($request);
}

----------------------------------------

TITLE: Configuring Laravel Log Channels
DESCRIPTION: Example configuration for log channels in Laravel's config/logging.php file, demonstrating the stack driver with syslog and slack channels.

LANGUAGE: php
CODE:
'channels' => [
    'stack' => [
        'driver' => 'stack',
        'channels' => ['syslog', 'slack'],
        'ignore_exceptions' => false,
    ],

    'syslog' => [
        'driver' => 'syslog',
        'level' => env('LOG_LEVEL', 'debug'),
        'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
        'replace_placeholders' => true,
    ],

    'slack' => [
        'driver' => 'slack',
        'url' => env('LOG_SLACK_WEBHOOK_URL'),
        'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
        'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
        'level' => env('LOG_LEVEL', 'critical'),
        'replace_placeholders' => true,
    ],
],

----------------------------------------

TITLE: Basic Artisan Command Structure
DESCRIPTION: Illustrates the basic structure of an Artisan command class, including signature, description, and handle method.

LANGUAGE: php
CODE:
<?php

namespace App\Console\Commands;

use App\Models\User;
use App\Support\DripEmailer;
use Illuminate\Console\Command;

class SendEmails extends Command
{
    protected $signature = 'mail:send {user}';
    protected $description = 'Send a marketing email to a user';

    public function handle(DripEmailer $drip): void
    {
        $drip->send(User::find($this->argument('user')));
    }
}

----------------------------------------

TITLE: Laravel Blade Template Syntax
DESCRIPTION: Demonstrates Laravel's Blade templating syntax for displaying and iterating over data with cleaner, more readable syntax.

LANGUAGE: blade
CODE:
<div>
    @foreach ($users as $user)
        Hello, {{ $user->name }} <br />
    @endforeach
</div>

----------------------------------------

TITLE: File Upload Handling
DESCRIPTION: Example controller method for handling file uploads using Laravel's file storage

LANGUAGE: php
CODE:
public function update(Request $request): string
{
    $path = $request->file('avatar')->store('avatars');
    return $path;
}

----------------------------------------

TITLE: Executing an Insert Statement in Laravel
DESCRIPTION: Shows how to perform an INSERT operation using Laravel's DB facade. The method accepts the SQL query and parameter bindings.

LANGUAGE: php
CODE:
DB::insert('insert into users (id, name) values (?, ?)', [1, 'Marc']);

----------------------------------------

TITLE: Deferring Concurrent Tasks in Laravel
DESCRIPTION: This snippet demonstrates how to use the Concurrency facade's defer method to execute closures concurrently after the HTTP response has been sent to the user.

LANGUAGE: php
CODE:
use App\Services\Metrics;
use Illuminate\Support\Facades\Concurrency;

Concurrency::defer([
    fn () => Metrics::report('users'),
    fn () => Metrics::report('orders'),
]);

----------------------------------------

TITLE: Invoking a Basic Synchronous Process in Laravel
DESCRIPTION: Demonstrates how to run a simple synchronous process using Laravel's Process facade and retrieve its output.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Process;

$result = Process::run('ls -la');

return $result->output();

----------------------------------------

TITLE: Sending a Notification
DESCRIPTION: Demonstrates how to send a notification to a user

LANGUAGE: php
CODE:
use App\Notifications\InvoicePaid;

$user->notify(new InvoicePaid($invoice));

----------------------------------------

TITLE: Generating a Migration in Laravel
DESCRIPTION: Use the Artisan command to generate a new database migration file.

LANGUAGE: shell
CODE:
php artisan make:migration create_flights_table

----------------------------------------

TITLE: Displaying Validation Errors in View
DESCRIPTION: Example of displaying validation errors in a Blade template.

LANGUAGE: php
CODE:
<!-- /resources/views/post/create.blade.php -->

<h1>Create Post</h1>

@if ($errors->any())
    <div class="alert alert-danger">
        <ul>
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif

<!-- Create Post Form -->

----------------------------------------

TITLE: Basic HTTP Test in Laravel using Pest
DESCRIPTION: A simple test that makes a GET request to the root URL and asserts a successful response.

LANGUAGE: php
CODE:
<?php

test('the application returns a successful response', function () {
    $response = $this->get('/');

    $response->assertStatus(200);
});

----------------------------------------

TITLE: Configuring SQLite Database in Laravel
DESCRIPTION: Example of configuring a SQLite database connection in Laravel's environment file. It sets the database connection type and file path.

LANGUAGE: ini
CODE:
DB_CONNECTION=sqlite
DB_DATABASE=/absolute/path/to/database.sqlite

----------------------------------------

TITLE: Defining Environment Variables in Laravel
DESCRIPTION: Example of defining environment variables in the .env file, including handling values with spaces using double quotes.

LANGUAGE: ini
CODE:
APP_NAME="My Application"

----------------------------------------

TITLE: Writing Log Messages in Laravel
DESCRIPTION: Examples of writing log messages using different log levels with the Log facade in a Laravel controller.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Support\Facades\Log;
use Illuminate\View\View;

class UserController extends Controller
{
    /**
     * Show the profile for the given user.
     */
    public function show(string $id): View
    {
        Log::info('Showing the user profile for user: {id}', ['id' => $id]);

        return view('user.profile', [
            'user' => User::findOrFail($id)
        ]);
    }
}

----------------------------------------

TITLE: Displaying Variables in Blade Templates
DESCRIPTION: Demonstrates how to echo variables and PHP expressions in Blade templates using {{ }} syntax

LANGUAGE: blade
CODE:
Hello, {{ $name }}.

The current UNIX timestamp is {{ time() }}.

----------------------------------------

TITLE: Using Model Factories in Laravel Tests
DESCRIPTION: Shows how to use model factories to create test data in Laravel tests using both Pest and PHPUnit frameworks.

LANGUAGE: php
CODE:
use App\Models\User;

test('models can be instantiated', function () {
    $user = User::factory()->create();

    // ...
});

LANGUAGE: php
CODE:
use App\Models\User;

public function test_models_can_be_instantiated(): void
{
    $user = User::factory()->create();

    // ...
}

----------------------------------------

TITLE: Retrying Failed HTTP Requests
DESCRIPTION: Shows how to configure automatic retries for failed HTTP requests using Laravel's HTTP client.

LANGUAGE: php
CODE:
$response = Http::retry(3, 100)->post(/* ... */);

----------------------------------------

TITLE: Installing Laravel MongoDB Package
DESCRIPTION: Command to install the official MongoDB package for Laravel via Composer

LANGUAGE: shell
CODE:
composer require mongodb/laravel-mongodb

----------------------------------------

TITLE: Generating a New Artisan Command
DESCRIPTION: Shows how to create a new Artisan command using the make:command Artisan command.

LANGUAGE: shell
CODE:
php artisan make:command SendEmails

----------------------------------------

TITLE: Testing Mailable Content in Laravel
DESCRIPTION: Example of testing mailable content using Laravel's testing assertions for email structure and content.

LANGUAGE: php
CODE:
use App\Mail\InvoicePaid;
use App\Models\User;

test('mailable content', function () {
    $user = User::factory()->create();

    $mailable = new InvoicePaid($user);

    $mailable->assertFrom('jeffrey@example.com');
    $mailable->assertTo('taylor@example.com');
    $mailable->assertHasCc('abigail@example.com');
    $mailable->assertHasBcc('victoria@example.com');
    $mailable->assertHasReplyTo('tyler@example.com');
    $mailable->assertHasSubject('Invoice Paid');
    $mailable->assertHasTag('example-tag');
    $mailable->assertHasMetadata('key', 'value');

    $mailable->assertSeeInHtml($user->email);
    $mailable->assertSeeInHtml('Invoice Paid');
    $mailable->assertSeeInOrderInHtml(['Invoice Paid', 'Thanks']);

    $mailable->assertSeeInText($user->email);
    $mailable->assertSeeInOrderInText(['Invoice Paid', 'Thanks']);

    $mailable->assertHasAttachment('/path/to/file');
    $mailable->assertHasAttachment(Attachment::fromPath('/path/to/file'));
    $mailable->assertHasAttachedData($pdfData, 'name.pdf', ['mime' => 'application/pdf']);
    $mailable->assertHasAttachmentFromStorage('/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);
    $mailable->assertHasAttachmentFromStorageDisk('s3', '/path/to/file', 'name.pdf', ['mime' => 'application/pdf']);
});

----------------------------------------

TITLE: Using a Custom Validation Rule
DESCRIPTION: Example of using a custom validation rule in a validator.

LANGUAGE: php
CODE:
use App\Rules\Uppercase;

$request->validate([
    'name' => ['required', 'string', new Uppercase],
]);

----------------------------------------

TITLE: Retrieving Environment Configuration in Laravel
DESCRIPTION: Use the 'env' function to retrieve environment variable values in configuration files, with an optional default value.

LANGUAGE: php
CODE:
'debug' => env('APP_DEBUG', false),

----------------------------------------

TITLE: Using Model Factories in Seeders
DESCRIPTION: Example showing how to use model factories to generate multiple related records

LANGUAGE: php
CODE:
use App\Models\User;

/**
 * Run the database seeders.
 */
public function run(): void
{
    User::factory()
        ->count(50)
        ->hasPosts(1)
        ->create();
}

----------------------------------------

TITLE: Basic Database Seeder Implementation
DESCRIPTION: Example of a DatabaseSeeder class that inserts a random user record using Laravel's query builder

LANGUAGE: php
CODE:
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeders.
     */
    public function run(): void
    {
        DB::table('users')->insert([
            'name' => Str::random(10),
            'email' => Str::random(10).'@example.com',
            'password' => Hash::make('password'),
        ]);
    }
}

----------------------------------------

TITLE: Scheduling a Database Query in Laravel
DESCRIPTION: Demonstrates how to schedule a closure to be called daily at midnight to execute a database query that clears a table.

LANGUAGE: php
CODE:
<?php

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schedule;

Schedule::call(function () {
    DB::table('recent_users')->delete();
})->daily();

----------------------------------------

TITLE: Converting Eloquent Model to Array
DESCRIPTION: Demonstrates how to convert an Eloquent model and its relationships to an array using the toArray() method.

LANGUAGE: php
CODE:
use App\Models\User;

$user = User::with('roles')->first();

return $user->toArray();

----------------------------------------

TITLE: Helper Functions vs Facades Example
DESCRIPTION: Compares facade usage with equivalent helper functions for JSON response generation.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Response;

Route::get('/users', function () {
    return Response::json([
        // ...
    ]);
});

Route::get('/users', function () {
    return response()->json([
        // ...
    ]);
});

----------------------------------------

TITLE: Scheduling Queued Jobs in Laravel
DESCRIPTION: Demonstrates how to schedule a queued job to run every five minutes, optionally specifying the queue name and connection.

LANGUAGE: php
CODE:
use App\Jobs\Heartbeat;
use Illuminate\Support\Facades\Schedule;

Schedule::job(new Heartbeat)->everyFiveMinutes();

// Dispatch the job to the "heartbeats" queue on the "sqs" connection...
Schedule::job(new Heartbeat, 'heartbeats', 'sqs')->everyFiveMinutes();

----------------------------------------

TITLE: Creating Collections
DESCRIPTION: Examples of creating collection instances using the collect() helper and Eloquent query results.

LANGUAGE: php
CODE:
$collection = collect([1, 2, 3]);

----------------------------------------

TITLE: Sending POST Request with Form Data
DESCRIPTION: Shows how to send a POST request with form data using Laravel's HTTP client.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Http;

$response = Http::asForm()->post('http://example.com/users', [
    'name' => 'Sara',
    'role' => 'Privacy Consultant',
]);

----------------------------------------

TITLE: Converting Model to JSON
DESCRIPTION: Shows different methods of converting an Eloquent model to JSON, including pretty printing options.

LANGUAGE: php
CODE:
use App\Models\User;

$user = User::find(1);

return $user->toJson();

return $user->toJson(JSON_PRETTY_PRINT);

----------------------------------------

TITLE: Setting Locale Dynamically in Laravel
DESCRIPTION: Example of dynamically setting the application locale in a route using the App facade's setLocale method.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\App;

Route::get('/greeting/{locale}', function (string $locale) {
    if (! in_array($locale, ['en', 'es', 'fr'])) {
        abort(400);
    }

    App::setLocale($locale);

    // ...
});

----------------------------------------

TITLE: Defining a Broadcastable Event in PHP
DESCRIPTION: Example of defining an event class that implements the ShouldBroadcast interface to make it broadcastable.

LANGUAGE: PHP
CODE:
<?php

namespace App\Events;

use App\Models\Order;
use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Queue\SerializesModels;

class OrderShipmentStatusUpdated implements ShouldBroadcast
{
    /**
     * Create a new event instance.
     */
    public function __construct(
        public Order $order,
    ) {}

    /**
     * Get the channels the event should broadcast on.
     *
     * @return array<int, \Illuminate\Broadcasting\Channel>
     */
    public function broadcastOn(): array
    {
        return [
            new PrivateChannel('orders.'.$this->order->id),
        ];
    }
}

----------------------------------------

TITLE: Defining Routes for Validation Example
DESCRIPTION: Example of defining routes for a validation scenario in Laravel's web.php file.

LANGUAGE: php
CODE:
use App\Http\Controllers\PostController;

Route::get('/post/create', [PostController::class, 'create']);
Route::post('/post', [PostController::class, 'store']);

----------------------------------------

TITLE: Using Named Error Bags in Validation
DESCRIPTION: Example of using validateWithBag method to store error messages in a named error bag.

LANGUAGE: php
CODE:
$validatedData = $request->validateWithBag('post', [
    'title' => ['required', 'unique:posts', 'max:255'],
    'body' => ['required'],
]);

----------------------------------------

TITLE: Including CSRF Token in Blade Form
DESCRIPTION: This Blade snippet shows how to include a hidden CSRF token field in an HTML form using the @csrf Blade directive for CSRF protection.

LANGUAGE: blade
CODE:
<form method="POST" action="/profile">
    @csrf

    <!-- Equivalent to... -->
    <input type="hidden" name="_token" value="{{ csrf_token() }}" />
</form>

----------------------------------------

TITLE: S3 Environment Configuration
DESCRIPTION: Required environment variables for configuring AWS S3 storage driver

LANGUAGE: ini
CODE:
AWS_ACCESS_KEY_ID=<your-key-id>
AWS_SECRET_ACCESS_KEY=<your-secret-access-key>
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=<your-bucket-name>
AWS_USE_PATH_STYLE_ENDPOINT=false

----------------------------------------

TITLE: Defining an Accessor in Laravel Eloquent Model
DESCRIPTION: Example of defining an accessor method to transform the first_name attribute when accessed. Uses the Attribute class to define the transformation.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    /**
     * Get the user's first name.
     */
    protected function firstName(): Attribute
    {
        return Attribute::make(
            get: fn (string $value) => ucfirst($value),
        );
    }
}

----------------------------------------

TITLE: Compiling JavaScript and CSS with Laravel Mix
DESCRIPTION: This snippet demonstrates how to use Laravel Mix to compile and minify JavaScript and CSS files. It shows the fluent API for defining webpack build steps, specifically compiling a JavaScript file and processing a CSS file with PostCSS.

LANGUAGE: javascript
CODE:
mix.js('resources/js/app.js', 'public/js')
    .postCss('resources/css/app.css', 'public/css');

----------------------------------------

TITLE: Executing Redis Transactions in Laravel
DESCRIPTION: Demonstration of using Redis transactions in Laravel to perform multiple operations atomically.

LANGUAGE: php
CODE:
use Redis;
use Illuminate\Support\Facades;

Facades\Redis::transaction(function (Redis $redis) {
    $redis->incr('user_visits', 1);
    $redis->incr('total_visits', 1);
});

----------------------------------------

TITLE: Rendering a View in Laravel Route
DESCRIPTION: Shows how to return a view from a Laravel route, passing data to the view. The 'view' helper function is used to specify the view name and pass an array of data.

LANGUAGE: php
CODE:
Route::get('/', function () {
    return view('greeting', ['name' => 'James']);
});

----------------------------------------

TITLE: Listening for Model Broadcast Events with Laravel Echo in JavaScript
DESCRIPTION: Example of using Laravel Echo to listen for model broadcast events on the client-side.

LANGUAGE: JavaScript
CODE:
Echo.private(`App.Models.User.${this.user.id}`)
    .listen('.PostUpdated', (e) => {
        console.log(e.model);
    });

----------------------------------------

TITLE: Creating a Process Pipeline in Laravel
DESCRIPTION: Illustrates how to create a pipeline of processes where the output of one process becomes the input of the next.

LANGUAGE: php
CODE:
use Illuminate\Process\Pipe;
use Illuminate\Support\Facades\Process;

$result = Process::pipe(function (Pipe $pipe) {
    $pipe->command('cat example.txt');
    $pipe->command('grep -i "laravel"');
});

if ($result->successful()) {
    // ...
}

----------------------------------------

TITLE: Installing Laravel Sail Dependencies
DESCRIPTION: Commands for installing Laravel Sail into existing Laravel applications using Composer and initializing the Docker environment.

LANGUAGE: shell
CODE:
composer require laravel/sail --dev
php artisan sail:install
./vendor/bin/sail up

----------------------------------------

TITLE: Cookie Management in Laravel Response
DESCRIPTION: Shows how to attach cookies to a response and set various cookie parameters like expiration time, domain, and security options.

LANGUAGE: php
CODE:
return response('Hello World')->cookie(
    'name', 'value', $minutes, $path, $domain, $secure, $httpOnly
);

----------------------------------------

TITLE: Using View Facade in Laravel
DESCRIPTION: Demonstrates an alternative method to render views using the View facade. This approach allows for more flexibility and additional methods like 'make'.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\View;

return View::make('greeting', ['name' => 'James']);

----------------------------------------

TITLE: Basic Vite Configuration
DESCRIPTION: Configuration file for Vite showing entry points setup with Laravel plugin

LANGUAGE: js
CODE:
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel([
            'resources/css/app.css',
            'resources/js/app.js',
        ]),
    ],
});

----------------------------------------

TITLE: Inertia Controller Example
DESCRIPTION: Laravel controller demonstrating Inertia page rendering with data hydration for React/Vue components.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Models\User;
use Inertia\Inertia;
use Inertia\Response;

class UserController extends Controller
{
    /**
     * Show the profile for a given user.
     */
    public function show(string $id): Response
    {
        return Inertia::render('users/show', [
            'user' => User::findOrFail($id)
        ]);
    }
}

----------------------------------------

TITLE: Installing Laravel Scout
DESCRIPTION: Install Laravel Scout via Composer and publish the configuration file.

LANGUAGE: shell
CODE:
composer require laravel/scout

LANGUAGE: shell
CODE:
php artisan vendor:publish --provider="Laravel\Scout\ScoutServiceProvider"

----------------------------------------

TITLE: Configuring Health Check Route
DESCRIPTION: PHP code example showing how to configure the URI for Laravel's built-in health check route in the bootstrap/app file.

LANGUAGE: php
CODE:
->withRouting(
    web: __DIR__.'/../routes/web.php',
    commands: __DIR__.'/../routes/console.php',
    health: '/status',
)

----------------------------------------

TITLE: Using Database Assertions in Laravel Tests
DESCRIPTION: Demonstrates various database assertions available in Laravel for PHPUnit and Pest tests, including checking record counts, presence, and soft deletes.

LANGUAGE: php
CODE:
$this->assertDatabaseCount('users', 5);

$this->assertDatabaseEmpty('users');

$this->assertDatabaseHas('users', [
    'email' => 'sally@example.com',
]);

$this->assertDatabaseMissing('users', [
    'email' => 'sally@example.com',
]);

$this->assertSoftDeleted($user);

$this->assertNotSoftDeleted($user);

use App\Models\User;

$user = User::factory()->create();

$this->assertModelExists($user);

$user->delete();

$this->assertModelMissing($user);

$this->expectsDatabaseQueryCount(5);

----------------------------------------

TITLE: Using Database Assertions in Laravel Tests
DESCRIPTION: Demonstrates various database assertions available in Laravel for PHPUnit and Pest tests, including checking record counts, presence, and soft deletes.

LANGUAGE: php
CODE:
$this->assertDatabaseCount('users', 5);

$this->assertDatabaseEmpty('users');

$this->assertDatabaseHas('users', [
    'email' => 'sally@example.com',
]);

$this->assertDatabaseMissing('users', [
    'email' => 'sally@example.com',
]);

$this->assertSoftDeleted($user);

$this->assertNotSoftDeleted($user);

use App\Models\User;

$user = User::factory()->create();

$this->assertModelExists($user);

$user->delete();

$this->assertModelMissing($user);

$this->expectsDatabaseQueryCount(5);

----------------------------------------

TITLE: Event Listener Implementation
DESCRIPTION: Example of implementing an event listener class to handle events.

LANGUAGE: php
CODE:
<?php

namespace App\Listeners;

use App\Events\OrderShipped;

class SendShipmentNotification
{
    /**
     * Create the event listener.
     */
    public function __construct() {}

    /**
     * Handle the event.
     */
    public function handle(OrderShipped $event): void
    {
        // Access the order using $event->order...
    }
}

----------------------------------------

TITLE: Resource Collection Implementation
DESCRIPTION: Example of a resource collection class that handles transforming multiple models with additional metadata.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\ResourceCollection;

class UserCollection extends ResourceCollection
{
    public function toArray(Request $request): array
    {
        return [
            'data' => $this->collection,
            'links' => [
                'self' => 'link-value',
            ],
        ];
    }
}

----------------------------------------

TITLE: Decrypting Values with Error Handling in Laravel
DESCRIPTION: Illustrates how to decrypt an encrypted value using Laravel's Crypt facade, including proper error handling for cases where decryption fails due to invalid data or tampering.

LANGUAGE: php
CODE:
use Illuminate\Contracts\Encryption\DecryptException;
use Illuminate\Support\Facades\Crypt;

try {
    $decrypted = Crypt::decryptString($encryptedValue);
} catch (DecryptException $e) {
    // ...
}

----------------------------------------

TITLE: Configuring Encryption Keys in Laravel INI File
DESCRIPTION: Demonstrates how to set up the current and previous encryption keys in the Laravel environment file. This allows for graceful rotation of encryption keys without breaking existing encrypted data.

LANGUAGE: ini
CODE:
APP_KEY="base64:J63qRTDLub5NuZvP+kb8YIorGS6qFYHKVo6u7179stY="
APP_PREVIOUS_KEYS="base64:2nLsGFGzyoae2ax3EF2Lyq/hH6QghBGLIq5uL+Gp8/w="

----------------------------------------

TITLE: Implementing Middleware with Parameters in Laravel
DESCRIPTION: Creating a middleware that accepts additional parameters for role-based access control.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class EnsureUserHasRole
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string $role): Response
    {
        if (! $request->user()->hasRole($role)) {
            // Redirect...
        }

        return $next($request);
    }
}

----------------------------------------

TITLE: Interacting with Redis in Laravel Controller
DESCRIPTION: Example of using the Redis facade to retrieve data in a Laravel controller method.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Redis;
use Illuminate\View\View;

class UserController extends Controller
{
    /**
     * Show the profile for the given user.
     */
    public function show(string $id): View
    {
        return view('user.profile', [
            'user' => Redis::get('user:profile:'.$id)
        ]);
    }
}

----------------------------------------

TITLE: Custom Collection Implementation
DESCRIPTION: Demonstrates how to implement a custom collection class for a model using the CollectedBy attribute.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use App\Support\UserCollection;
use Illuminate\Database\Eloquent\Attributes\CollectedBy;
use Illuminate\Database\Eloquent\Model;

#[CollectedBy(UserCollection::class)]
class User extends Model
{
    // ...
}

----------------------------------------

TITLE: Signed URL Generation in Laravel
DESCRIPTION: Shows how to create signed URLs and temporary signed URLs for secure route access.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\URL;

return URL::signedRoute('unsubscribe', ['user' => 1]);

return URL::temporarySignedRoute(
    'unsubscribe', now()->addMinutes(30), ['user' => 1]
);

----------------------------------------

TITLE: Custom Authentication Guard
DESCRIPTION: Example of defining a custom authentication guard using the Auth facade's extend method.

LANGUAGE: PHP
CODE:
Auth::extend('jwt', function (Application $app, string $name, array $config) {
    return new JwtGuard(Auth::createUserProvider($config['provider']));
});

----------------------------------------

TITLE: Generating Events and Listeners using Artisan
DESCRIPTION: Commands to generate event and listener classes using Laravel's Artisan CLI tool.

LANGUAGE: shell
CODE:
php artisan make:event PodcastProcessed

php artisan make:listener SendPodcastNotification --event=PodcastProcessed

----------------------------------------

TITLE: Configuring Redis in Laravel
DESCRIPTION: Example configuration for Redis in Laravel's config/database.php file, including default connection settings and cache configuration.

LANGUAGE: php
CODE:
'redis' => [

    'client' => env('REDIS_CLIENT', 'phpredis'),

    'options' => [
        'cluster' => env('REDIS_CLUSTER', 'redis'),
        'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
    ],

    'default' => [
        'url' => env('REDIS_URL'),
        'host' => env('REDIS_HOST', '127.0.0.1'),
        'username' => env('REDIS_USERNAME'),
        'password' => env('REDIS_PASSWORD'),
        'port' => env('REDIS_PORT', '6379'),
        'database' => env('REDIS_DB', '0'),
    ],

    'cache' => [
        'url' => env('REDIS_URL'),
        'host' => env('REDIS_HOST', '127.0.0.1'),
        'username' => env('REDIS_USERNAME'),
        'password' => env('REDIS_PASSWORD'),
        'port' => env('REDIS_PORT', '6379'),
        'database' => env('REDIS_CACHE_DB', '1'),
    ],

],

----------------------------------------

TITLE: Listing Available Artisan Commands
DESCRIPTION: Demonstrates how to view a list of all available Artisan commands using the 'list' command.

LANGUAGE: shell
CODE:
php artisan list

----------------------------------------

TITLE: Customizing Engine Searches
DESCRIPTION: Pass a closure to the search method to customize the search behavior of an engine.

LANGUAGE: php
CODE:
use Algolia\AlgoliaSearch\SearchIndex;
use App\Models\Order;

Order::search(
    'Star Trek',
    function (SearchIndex $algolia, string $query, array $options) {
        $options['body']['query']['bool']['filter']['geo_distance'] = [
            'distance' => '1000km',
            'location' => ['lat' => 36, 'lon' => 111],
        ];

        return $algolia->search($query, $options);
    }
)->get();

----------------------------------------

TITLE: Mocking Laravel Facades in PHP
DESCRIPTION: This snippet demonstrates how to mock a Laravel facade (in this case, the Cache facade) in a controller test. It uses the 'shouldReceive' method to set expectations on the mock.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Cache;

test('get index', function () {
    Cache::shouldReceive('get')
        ->once()
        ->with('key')
        ->andReturn('value');

    $response = $this->get('/users');

    // ...
});

----------------------------------------

TITLE: Checking Rate Limiter Availability in Laravel
DESCRIPTION: This snippet demonstrates how to check when the rate limiter will be available again if the limit has been reached. It uses the 'availableIn' method to get the remaining seconds.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\RateLimiter;

if (RateLimiter::tooManyAttempts('send-message:'.$user->id, $perMinute = 5)) {
    $seconds = RateLimiter::availableIn('send-message:'.$user->id);

    return 'You may try again in '.$seconds.' seconds.';
}

RateLimiter::increment('send-message:'.$user->id);

// Send message...

----------------------------------------

TITLE: Basic Route View Rendering in Laravel
DESCRIPTION: Example showing how to return a view with data from a route in Laravel using the view helper

LANGUAGE: php
CODE:
Route::get('/', function () {
    return view('greeting', ['name' => 'Finn']);
});

----------------------------------------

TITLE: Nginx Reverse Proxy Configuration
DESCRIPTION: Nginx server configuration for setting up a reverse proxy to the Reverb WebSocket server

LANGUAGE: nginx
CODE:
server {
    ...

    location / {
        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header Scheme $scheme;
        proxy_set_header SERVER_PORT $server_port;
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

        proxy_pass http://0.0.0.0:8080;
    }

    ...
}

----------------------------------------

TITLE: Defining Password Reset Request Route in Laravel
DESCRIPTION: Route definition for displaying the password reset request form, using middleware to ensure only guests can access it.

LANGUAGE: php
CODE:
Route::get('/forgot-password', function () {
    return view('auth.forgot-password');
})->middleware('guest')->name('password.request');

----------------------------------------

TITLE: Checking Remaining Attempts in Laravel Rate Limiter
DESCRIPTION: This snippet demonstrates how to check the remaining attempts for a rate-limited action and increment the count if attempts are available.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\RateLimiter;

if (RateLimiter::remaining('send-message:'.$user->id, $perMinute = 5)) {
    RateLimiter::increment('send-message:'.$user->id);

    // Send message...
}

----------------------------------------

TITLE: Paginating Query Builder Results in Laravel Controller
DESCRIPTION: Example of using the paginate method in a Laravel controller to paginate database query results and pass them to a view.

LANGUAGE: PHP
CODE:
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;
use Illuminate\View\View;

class UserController extends Controller
{
    /**
     * Show all application users.
     */
    public function index(): View
    {
        return view('user.index', [
            'users' => DB::table('users')->paginate(15)
        ]);
    }
}

----------------------------------------

TITLE: Profiling Tests in Laravel
DESCRIPTION: This snippet shows how to profile tests in Laravel using the Artisan command with the --profile option, which lists the ten slowest tests for performance analysis.

LANGUAGE: shell
CODE:
php artisan test --profile

----------------------------------------

TITLE: Blade Template Authorization Directives
DESCRIPTION: Example of using Blade's @can and @cannot directives for authorization checks in templates

LANGUAGE: blade
CODE:
@can('update', $post)
    <!-- The current user can update the post... -->
@elsecan('create', App\Models\Post::class)
    <!-- The current user can create new posts... -->
@else
    <!-- ... -->
@endcan

----------------------------------------

TITLE: Formatting a Slack Notification
DESCRIPTION: Shows how to format a Slack notification using Block Kit

LANGUAGE: php
CODE:
use Illuminate\Notifications\Slack\BlockKit\Blocks\ContextBlock;
use Illuminate\Notifications\Slack\BlockKit\Blocks\SectionBlock;
use Illuminate\Notifications\Slack\SlackMessage;

public function toSlack(object $notifiable): SlackMessage
{
    return (new SlackMessage)
        ->text('One of your invoices has been paid!')
        ->headerBlock('Invoice Paid')
        ->contextBlock(function (ContextBlock $block) {
            $block->text('Customer #1234');
        })
        ->sectionBlock(function (SectionBlock $block) {
            $block->text('An invoice has been paid.');
            $block->field("*Invoice No:*\n1000")->markdown();
            $block->field("*Invoice Recipient:*\ntaylor@laravel.com")->markdown();
        });

----------------------------------------

TITLE: Extending Collections
DESCRIPTION: Example of adding a custom method to the Collection class using macros.

LANGUAGE: php
CODE:
use Illuminate\Support\Collection;
use Illuminate\Support\Str;

Collection::macro('toUpper', function () {
    return $this->map(function (string $value) {
        return Str::upper($value);
    });
});

$collection = collect(['first', 'second']);

$upper = $collection->toUpper();

// ['FIRST', 'SECOND']

----------------------------------------

TITLE: Creating and Managing Concurrent Processes in Laravel
DESCRIPTION: Shows how to create and manage a pool of concurrent, asynchronous processes using Laravel's Process facade.

LANGUAGE: php
CODE:
use Illuminate\Process\Pool;
use Illuminate\Support\Facades\Process;

$pool = Process::pool(function (Pool $pool) {
    $pool->command('bash import-1.sh');
    $pool->command('bash import-2.sh');
    $pool->command('bash import-3.sh');
})->start();

while ($pool->running()->isNotEmpty()) {
    // ...
}

$results = $pool->wait();

----------------------------------------

TITLE: Manipulating Time in Laravel Tests using PHP
DESCRIPTION: This snippet demonstrates various ways to manipulate time in Laravel tests, including traveling to the future or past, and freezing time at specific moments.

LANGUAGE: php
CODE:
test('time can be manipulated', function () {
    // Travel into the future...
    $this->travel(5)->milliseconds();
    $this->travel(5)->seconds();
    $this->travel(5)->minutes();
    $this->travel(5)->hours();
    $this->travel(5)->days();
    $this->travel(5)->weeks();
    $this->travel(5)->years();

    // Travel into the past...
    $this->travel(-5)->hours();

    // Travel to an explicit time...
    $this->travelTo(now()->subHours(6));

    // Return back to the present time...
    $this->travelBack();
});

----------------------------------------

TITLE: Eager Loading Relationships
DESCRIPTION: Example of eager loading relationships to avoid N+1 query problems.

LANGUAGE: php
CODE:
$books = Book::with('author')->get();

foreach ($books as $book) {
    echo $book->author->name;
}

----------------------------------------

TITLE: Running Concurrent Tasks with Laravel's Concurrency Facade
DESCRIPTION: This snippet demonstrates how to use the Concurrency facade's run method to execute multiple closures concurrently. It shows counting users and orders simultaneously.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Concurrency;
use Illuminate\Support\Facades\DB;

[$userCount, $orderCount] = Concurrency::run([
    fn () => DB::table('users')->count(),
    fn () => DB::table('orders')->count(),
]);

----------------------------------------

TITLE: Retrieving Session Data in Controller
DESCRIPTION: Example of accessing session data within a Laravel controller using Request injection.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\View\View;

class UserController extends Controller
{
    /**
     * Show the profile for the given user.
     */
    public function show(Request $request, string $id): View
    {
        $value = $request->session()->get('key');

        // ...

        $user = $this->users->find($id);

        return view('user.profile', ['user' => $user]);
    }
}

----------------------------------------

TITLE: Blade Component Class Example
DESCRIPTION: Example of a Blade component class with constructor property promotion and render method

LANGUAGE: php
CODE:
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class Alert extends Component
{
    public function __construct(
        public string $type,
        public string $message,
    ) {}

    public function render(): View
    {
        return view('components.alert');
    }
}

----------------------------------------

TITLE: Nginx Configuration for Octane
DESCRIPTION: Example Nginx configuration for serving a Laravel Octane application in production.

LANGUAGE: nginx
CODE:
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 80;
    listen [::]:80;
    server_name domain.com;
    server_tokens off;
    root /home/forge/domain.com/public;

    index index.php;

    charset utf-8;

    location /index.php {
        try_files /not_exists @octane;
    }

    location / {
        try_files $uri $uri/ @octane;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    access_log off;
    error_log  /var/log/nginx/domain.com-error.log error;

    error_page 404 /index.php;

    location @octane {
        set $suffix "";

        if ($uri = /index.php) {
            set $suffix ?$query_string;
        }

        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header Scheme $scheme;
        proxy_set_header SERVER_PORT $server_port;
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_pass http://127.0.0.1:8000$suffix;
    }
}

----------------------------------------

TITLE: Defining a Route to a Controller Method in Laravel
DESCRIPTION: Shows how to map a route to a specific controller method.

LANGUAGE: php
CODE:
use App\Http\Controllers\UserController;

Route::get('/user/{id}', [UserController::class, 'show']);

----------------------------------------

TITLE: Creating API Token Route
DESCRIPTION: Route definition for creating API tokens with plainTextToken response.

LANGUAGE: php
CODE:
use Illuminate\Http\Request;

Route::post('/tokens/create', function (Request $request) {
    $token = $request->user()->createToken($request->token_name);

    return ['token' => $token->plainTextToken];
});

----------------------------------------

TITLE: Simple Pagination in Laravel Query Builder
DESCRIPTION: Using the simplePaginate method for efficient pagination when only 'Next' and 'Previous' links are needed.

LANGUAGE: PHP
CODE:
$users = DB::table('users')->simplePaginate(15);

----------------------------------------

TITLE: Custom Exception Rendering in Laravel
DESCRIPTION: Shows how to register a custom rendering closure for specific exception types using the 'render' method in the application's bootstrap/app.php file.

LANGUAGE: php
CODE:
use App\Exceptions\InvalidOrderException;
use Illuminate\Http\Request;

->withExceptions(function (Exceptions $exceptions) {
    $exceptions->render(function (InvalidOrderException $e, Request $request) {
        return response()->view('errors.invalid-order', status: 500);
    });
})

----------------------------------------

TITLE: Listening for Broadcast Events with Laravel Echo in JavaScript
DESCRIPTION: Example of using Laravel Echo to listen for broadcast events on the client-side.

LANGUAGE: JavaScript
CODE:
Echo.private(`orders.${orderId}`)
    .listen('OrderShipmentStatusUpdated', (e) => {
        console.log(e.order);
    });

----------------------------------------

TITLE: Implementing Deferred Service Provider in Laravel
DESCRIPTION: Shows how to implement a deferred service provider by implementing the DeferrableProvider interface and defining a provides method. This optimizes performance by only loading the provider when its services are needed.

LANGUAGE: php
CODE:
<?php

namespace App\Providers;

use App\Services\Riak\Connection;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\Support\DeferrableProvider;
use Illuminate\Support\ServiceProvider;

class RiakServiceProvider extends ServiceProvider implements DeferrableProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        $this->app->singleton(Connection::class, function (Application $app) {
            return new Connection($app['config']['riak']);
        });
    }

    /**
     * Get the services provided by the provider.
     *
     * @return array<int, string>
     */
    public function provides(): array
    {
        return [Connection::class];
    }
}

----------------------------------------

TITLE: SPA Authentication CORS Configuration
DESCRIPTION: JavaScript configuration for handling CORS and CSRF tokens in SPA authentication.

LANGUAGE: javascript
CODE:
axios.defaults.withCredentials = true;
axios.defaults.withXSRFToken = true;

----------------------------------------

TITLE: Processing Podcast Job with Context in Laravel
DESCRIPTION: Implementation of a queued job that processes podcasts while maintaining context from the original request

LANGUAGE: php
CODE:
class ProcessPodcast implements ShouldQueue
{
    use Queueable;

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        Log::info('Processing podcast.', [
            'podcast_id' => $this->podcast->id,
        ]);
    }
}

----------------------------------------

TITLE: Determining Current Environment in Laravel
DESCRIPTION: Use the 'environment' method on the App facade to determine the current application environment.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\App;

$environment = App::environment();

if (App::environment('local')) {
    // The environment is local
}

if (App::environment(['local', 'staging'])) {
    // The environment is either local OR staging...
}

----------------------------------------

TITLE: Accessing Current URL in Laravel
DESCRIPTION: Examples of accessing current URL information using Laravel's URL helpers and facades.

LANGUAGE: php
CODE:
// Get the current URL without the query string...
echo url()->current();

// Get the current URL including the query string...
echo url()->full();

// Get the full URL for the previous request...
echo url()->previous();

// Get the path for the previous request...
echo url()->previousPath();

----------------------------------------

TITLE: Implementing Boot Method in Service Provider
DESCRIPTION: Demonstrates how to implement the boot method in a service provider. This example shows registering a view composer within the boot method.

LANGUAGE: php
CODE:
<?php

namespace App\Providers;

use Illuminate\Support\Facades\View;
use Illuminate\Support\ServiceProvider;

class ComposerServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        View::composer('view', function () {
            // ...
        });
    }
}

----------------------------------------

TITLE: Adding Global Log Context in Laravel Exception Handling
DESCRIPTION: Shows how to add global contextual data to every exception's log message using the 'context' method in the application's bootstrap/app.php file.

LANGUAGE: php
CODE:
->withExceptions(function (Exceptions $exceptions) {
    $exceptions->context(fn () => [
        'foo' => 'bar',
    ]);
})

----------------------------------------

TITLE: Installing Laravel Cashier for Stripe
DESCRIPTION: Commands to install Cashier, publish migrations, and run database migrations

LANGUAGE: shell
CODE:
composer require laravel/cashier

php artisan vendor:publish --tag="cashier-migrations"

php artisan migrate

----------------------------------------

TITLE: Stopping on First Validation Failure
DESCRIPTION: Example of using the bail rule to stop validation after the first failure.

LANGUAGE: php
CODE:
$request->validate([
    'title' => 'bail|required|unique:posts|max:255',
    'body' => 'required',
]);

----------------------------------------

TITLE: Configuring Parallel Testing Hooks in Laravel
DESCRIPTION: This snippet demonstrates how to set up hooks for parallel testing in Laravel, including process and test case setup and teardown, as well as test database seeding.

LANGUAGE: php
CODE:
<?php

namespace App\Providers;

use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\ParallelTesting;
use Illuminate\Support\ServiceProvider;
use PHPUnit\Framework\TestCase;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        ParallelTesting::setUpProcess(function (int $token) {
            // ...
        });

        ParallelTesting::setUpTestCase(function (int $token, TestCase $testCase) {
            // ...
        });

        // Executed when a test database is created...
        ParallelTesting::setUpTestDatabase(function (string $database, int $token) {
            Artisan::call('db:seed');
        });

        ParallelTesting::tearDownTestCase(function (int $token, TestCase $testCase) {
            // ...
        });

        ParallelTesting::tearDownProcess(function (int $token) {
            // ...
        });
    }
}

----------------------------------------

TITLE: Authenticating and Storing OAuth User in Laravel
DESCRIPTION: Retrieve user details from the OAuth provider, create or update the user in the database, and authenticate them in the application.

LANGUAGE: php
CODE:
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Laravel\Socialite\Facades\Socialite;

Route::get('/auth/callback', function () {
    $githubUser = Socialite::driver('github')->user();

    $user = User::updateOrCreate([
        'github_id' => $githubUser->id,
    ], [
        'name' => $githubUser->name,
        'email' => $githubUser->email,
        'github_token' => $githubUser->token,
        'github_refresh_token' => $githubUser->refreshToken,
    ]);

    Auth::login($user);

    return redirect('/dashboard');
});

----------------------------------------

TITLE: Customizing Exception Log Levels in Laravel
DESCRIPTION: Illustrates how to configure the log level for specific exception types using the 'level' method in the application's bootstrap/app.php file.

LANGUAGE: php
CODE:
use PDOException;
use Psr\Log\LogLevel;

->withExceptions(function (Exceptions $exceptions) {
    $exceptions->level(PDOException::class, LogLevel::CRITICAL);
})

----------------------------------------

TITLE: Merging Default Package Configuration in Laravel Service Provider
DESCRIPTION: Demonstrates how to merge the package's default configuration with the application's published copy using the mergeConfigFrom method in the service provider's register method.

LANGUAGE: php
CODE:
public function register(): void
{
    $this->mergeConfigFrom(
        __DIR__.'/../config/courier.php', 'courier'
    );
}

----------------------------------------

TITLE: URL Generation with Query Parameters
DESCRIPTION: Shows how to generate URLs with query string parameters using the query method, including array parameters and parameter overwriting.

LANGUAGE: php
CODE:
echo url()->query('/posts', ['search' => 'Laravel']);

// https://example.com/posts?search=Laravel

echo url()->query('/posts?sort=latest', ['search' => 'Laravel']);

// http://example.com/posts?sort=latest&search=Laravel

----------------------------------------

TITLE: Password Rehash Check
DESCRIPTION: Example demonstrating how to check if a password needs to be rehashed due to work factor changes.

LANGUAGE: php
CODE:
if (Hash::needsRehash($hashed)) {
    $hashed = Hash::make('plain-text');
}

----------------------------------------

TITLE: Faking HTTP Responses for Testing
DESCRIPTION: Shows how to fake HTTP responses for testing purposes using Laravel's HTTP client.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Http;

Http::fake([
    'github.com/*' => Http::response(['foo' => 'bar'], 200, $headers),
    'google.com/*' => Http::response('Hello World', 200, $headers),
]);

----------------------------------------

TITLE: Ignoring Specific Exception Types in Laravel
DESCRIPTION: Demonstrates how to ignore certain exception types from being reported using the 'dontReport' method in the application's bootstrap/app.php file.

LANGUAGE: php
CODE:
use App\Exceptions\InvalidOrderException;

->withExceptions(function (Exceptions $exceptions) {
    $exceptions->dontReport([
        InvalidOrderException::class,
    ]);
})

----------------------------------------

TITLE: Installing FrankenPHP with Laravel Sail
DESCRIPTION: Commands to install Octane and FrankenPHP using Laravel Sail.

LANGUAGE: shell
CODE:
./vendor/bin/sail up

./vendor/bin/sail composer require laravel/octane

----------------------------------------

TITLE: Implementing Redis Pub/Sub in Laravel Command
DESCRIPTION: Example of creating an Artisan command to subscribe to a Redis channel and handle incoming messages.

LANGUAGE: php
CODE:
<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Redis;

class RedisSubscribe extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'redis:subscribe';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Subscribe to a Redis channel';

    /**
     * Execute the console command.
     */
    public function handle(): void
    {
        Redis::subscribe(['test-channel'], function (string $message) {
            echo $message;
        });
    }
}

----------------------------------------

TITLE: Typed Configuration Retrieval in Laravel
DESCRIPTION: Use typed configuration retrieval methods on the Config facade for static analysis assistance.

LANGUAGE: php
CODE:
Config::string('config-key');
Config::integer('config-key');
Config::float('config-key');
Config::boolean('config-key');
Config::array('config-key');

----------------------------------------

TITLE: Queue Worker Command in Shell
DESCRIPTION: Command for starting a Laravel queue worker process

LANGUAGE: shell
CODE:
php artisan queue:work redis --tries=3 --sleep=3

----------------------------------------

TITLE: Basic Blade Integration
DESCRIPTION: Integrating Vite compiled assets in Blade templates using @vite directive

LANGUAGE: blade
CODE:
<!DOCTYPE html>
<head>
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>

----------------------------------------

TITLE: Displaying Paddle Checkout Button
DESCRIPTION: Use the paddle-button Blade component to display the checkout button.

LANGUAGE: html
CODE:
<x-paddle-button :checkout="$checkout" class="px-8 py-4">
    Subscribe
</x-paddle-button>

----------------------------------------

TITLE: Manually Tagging Jobs in Horizon
DESCRIPTION: Example of manually defining tags for a queueable job in Horizon.

LANGUAGE: php
CODE:
class RenderVideo implements ShouldQueue
{
    /**
     * Get the tags that should be assigned to the job.
     *
     * @return array<int, string>
     */
    public function tags(): array
    {
        return ['render', 'video:'.$this->video->id];
    }
}

----------------------------------------

TITLE: Installing Laravel Dusk
DESCRIPTION: Install Laravel Dusk via Composer and run the installation command

LANGUAGE: shell
CODE:
composer require laravel/dusk --dev

LANGUAGE: shell
CODE:
php artisan dusk:install

----------------------------------------

TITLE: Generating New Notification Class
DESCRIPTION: Creates a new notification class using Laravel's artisan command line tool

LANGUAGE: shell
CODE:
php artisan make:notification InvoicePaid

----------------------------------------

TITLE: Running Vite Commands
DESCRIPTION: NPM commands for running Vite development server and building assets

LANGUAGE: shell
CODE:
# Run the Vite development server...
npm run dev

# Build and version the assets for production...
npm run build

----------------------------------------

TITLE: Customizing Request Headers in Laravel Tests
DESCRIPTION: Example of how to add custom headers to a request in a Laravel test.

LANGUAGE: php
CODE:
<?php

test('interacting with headers', function () {
    $response = $this->withHeaders([
        'X-Header' => 'Value',
    ])->post('/user', ['name' => 'Sally']);

    $response->assertStatus(201);
});

----------------------------------------

TITLE: Handling Route Parameters in Laravel Folio
DESCRIPTION: Shows how to capture and use route parameters in Folio pages, including single and multiple segment capture. Examples demonstrate filename conventions and how to access parameters in Blade templates.

LANGUAGE: shell
CODE:
php artisan folio:page "users/[id]"

# pages/users/[id].blade.php → /users/1

LANGUAGE: html
CODE:
<div>
    User {{ $id }}
</div>

LANGUAGE: shell
CODE:
php artisan folio:page "users/[...ids]"

# pages/users/[...ids].blade.php → /users/1/2/3

LANGUAGE: html
CODE:
<ul>
    @foreach ($ids as $id)
        <li>User {{ $id }}</li>
    @endforeach
</ul>

----------------------------------------

TITLE: Local Development Installation of Telescope
DESCRIPTION: Commands for installing Telescope in local development environment only using the --dev flag.

LANGUAGE: shell
CODE:
composer require laravel/telescope --dev

php artisan telescope:install

php artisan migrate

----------------------------------------

TITLE: Basic Browser Test Example
DESCRIPTION: Example of a basic Dusk test case showing login functionality

LANGUAGE: php
CODE:
<?php

use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Laravel\Dusk\Browser;

uses(DatabaseMigrations::class);

test('basic example', function () {
    $user = User::factory()->create([
        'email' => 'taylor@laravel.com',
    ]);

    $this->browse(function (Browser $browser) use ($user) {
        $browser->visit('/login')
            ->type('email', $user->email)
            ->type('password', 'password')
            ->press('Login')
            ->assertPathIs('/home');
    });
});

----------------------------------------

TITLE: Defining a Feature Flag
DESCRIPTION: Example of defining a feature flag using the Feature facade in a service provider.

LANGUAGE: php
CODE:
Feature::define('new-api', fn (User $user) => match (true) {
    $user->isInternalTeamMember() => true,
    $user->isHighTrafficCustomer() => false,
    default => Lottery::odds(1 / 100),
});

----------------------------------------

TITLE: Configuring Meilisearch Driver
DESCRIPTION: Set up Meilisearch credentials and install the Meilisearch PHP SDK.

LANGUAGE: shell
CODE:
composer require meilisearch/meilisearch-php http-interop/http-factory-guzzle

LANGUAGE: ini
CODE:
SCOUT_DRIVER=meilisearch
MEILISEARCH_HOST=http://127.0.0.1:7700
MEILISEARCH_KEY=masterKey

----------------------------------------

TITLE: Customizing Response with Headers in Laravel
DESCRIPTION: Shows how to create a response with custom HTTP status code and headers using the response helper method.

LANGUAGE: php
CODE:
Route::get('/home', function () {
    return response('Hello World', 200)
        ->header('Content-Type', 'text/plain');
});

----------------------------------------

TITLE: Adding Searchable Trait to Model
DESCRIPTION: Add the Searchable trait to the Eloquent model you want to make searchable.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Laravel\Scout\Searchable;

class Post extends Model
{
    use Searchable;
}

----------------------------------------

TITLE: Running Database Seeders in Laravel Tests
DESCRIPTION: Demonstrates how to run database seeders during feature tests in Laravel, including running specific seeders or arrays of seeders.

LANGUAGE: php
CODE:
<?php

use Database\Seeders\OrderStatusSeeder;
use Database\Seeders\TransactionStatusSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;

uses(RefreshDatabase::class);

test('orders can be created', function () {
    // Run the DatabaseSeeder...
    $this->seed();

    // Run a specific seeder...
    $this->seed(OrderStatusSeeder::class);

    // ...

    // Run an array of specific seeders...
    $this->seed([
        OrderStatusSeeder::class,
        TransactionStatusSeeder::class,
        // ...
    ]);
});

LANGUAGE: php
CODE:
<?php

namespace Tests\Feature;

use Database\Seeders\OrderStatusSeeder;
use Database\Seeders\TransactionStatusSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    use RefreshDatabase;

    /**
     * Test creating a new order.
     */
    public function test_orders_can_be_created(): void
    {
        // Run the DatabaseSeeder...
        $this->seed();

        // Run a specific seeder...
        $this->seed(OrderStatusSeeder::class);

        // ...

        // Run an array of specific seeders...
        $this->seed([
            OrderStatusSeeder::class,
            TransactionStatusSeeder::class,
            // ...
        ]);
    }
}

----------------------------------------

TITLE: Checking if a Feature is Active
DESCRIPTION: Example of checking if a feature is active using the Feature facade.

LANGUAGE: php
CODE:
if (Feature::active('new-api')) {
    // Feature is active
}

----------------------------------------

TITLE: Throttling Reported Exceptions in Laravel
DESCRIPTION: Illustrates how to implement exception reporting throttling using the 'throttle' method with Lottery and Limit instances in the application's bootstrap/app.php file.

LANGUAGE: php
CODE:
use App\Exceptions\ApiMonitoringException;
use Illuminate\Broadcasting\BroadcastException;
use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Support\Lottery;
use Throwable;

->withExceptions(function (Exceptions $exceptions) {
    $exceptions->throttle(function (Throwable $e) {
        return match (true) {
            $e instanceof BroadcastException => Limit::perMinute(300),
            $e instanceof ApiMonitoringException => Lottery::odds(1, 1000),
            default => Limit::none(),
        };
    });
})

----------------------------------------

TITLE: Defining Scheduled Tasks in Laravel's bootstrap/app.php
DESCRIPTION: Demonstrates how to define scheduled tasks in the bootstrap/app.php file using the withSchedule method.

LANGUAGE: php
CODE:
use Illuminate\Console\Scheduling\Schedule;

->withSchedule(function (Schedule $schedule) {
    $schedule->call(new DeleteRecentUsers)->daily();
})

----------------------------------------

TITLE: Generating Basic Resource Class
DESCRIPTION: Shell command to generate a new resource class using Laravel's Artisan CLI. Resources are placed in app/Http/Resources directory.

LANGUAGE: shell
CODE:
php artisan make:resource UserResource

----------------------------------------

TITLE: Configuring Automatic Database Seeding in Laravel Tests
DESCRIPTION: Shows how to configure Laravel to automatically seed the database before each test that uses the RefreshDatabase trait.

LANGUAGE: php
CODE:
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    /**
     * Indicates whether the default seeder should run before each test.
     *
     * @var bool
     */
    protected $seed = true;
}

LANGUAGE: php
CODE:
use Database\Seeders\OrderStatusSeeder;

/**
 * Run a specific seeder before each test.
 *
 * @var string
 */
protected $seeder = OrderStatusSeeder::class;

----------------------------------------

TITLE: Retrieving Multiple Feature Values
DESCRIPTION: Example of retrieving multiple feature values using the values method.

LANGUAGE: php
CODE:
Feature::values(['billing-v2', 'purchase-button']);

----------------------------------------

TITLE: Running Horizon
DESCRIPTION: Command to start Horizon and process jobs for the current environment.

LANGUAGE: shell
CODE:
php artisan horizon

----------------------------------------

TITLE: Generating OAuth2 Keys
DESCRIPTION: Commands for generating encryption keys required by Passport for token generation.

LANGUAGE: shell
CODE:
php artisan passport:keys

----------------------------------------

TITLE: Implementing a Custom Pennant Driver
DESCRIPTION: Example skeleton of implementing a custom Pennant driver.

LANGUAGE: php
CODE:
class RedisFeatureDriver implements Driver
{
    public function define(string $feature, callable $resolver): void {}
    public function defined(): array {}
    public function getAll(array $features): array {}
    public function get(string $feature, mixed $scope): mixed {}
    public function set(string $feature, mixed $scope, mixed $value): void {}
    public function setForAllScopes(string $feature, mixed $value): void {}
    public function delete(string $feature, mixed $scope): void {}
    public function purge(array|null $features): void {}
}

----------------------------------------

TITLE: Running Database Seeders
DESCRIPTION: Various Artisan commands for running database seeders in Laravel

LANGUAGE: shell
CODE:
php artisan db:seed

php artisan db:seed --class=UserSeeder

php artisan migrate:fresh --seed

php artisan migrate:fresh --seed --seeder=UserSeeder

php artisan db:seed --force

----------------------------------------

TITLE: Registering a Custom Pennant Driver
DESCRIPTION: Example of registering a custom Pennant driver in a service provider.

LANGUAGE: php
CODE:
public function boot(): void
{
    Feature::extend('redis', function (Application $app) {
        return new RedisFeatureDriver($app->make('redis'), $app->make('events'), []);
    });
}

----------------------------------------

TITLE: Implementing a Class-Based Feature
DESCRIPTION: Example implementation of a class-based feature with resolve method.

LANGUAGE: php
CODE:
class NewApi
{
    public function resolve(User $user): mixed
    {
        return match (true) {
            $user->isInternalTeamMember() => true,
            $user->isHighTrafficCustomer() => false,
            default => Lottery::odds(1 / 100),
        };
    }
}

----------------------------------------

TITLE: Resending Verification Email Route
DESCRIPTION: This snippet defines a route for resending the verification email if a user loses or doesn't receive the original email.

LANGUAGE: php
CODE:
use Illuminate\Http\Request;

Route::post('/email/verification-notification', function (Request $request) {
    $request->user()->sendEmailVerificationNotification();

    return back()->with('message', 'Verification link sent!');
})->middleware(['auth', 'throttle:6,1'])->name('verification.send');

----------------------------------------

TITLE: Adding Context Middleware Implementation in PHP/Laravel
DESCRIPTION: Middleware class that adds request URL and trace ID to the context for incoming requests using Laravel's Context facade.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Context;
use Illuminate\Support\Str;
use Symfony\Component\HttpFoundation\Response;

class AddContext
{
    /**
     * Handle an incoming request.
     */
    public function handle(Request $request, Closure $next): Response
    {
        Context::add('url', $request->url());
        Context::add('trace_id', Str::uuid()->toString());

        return $next($request);
    }
}

----------------------------------------

TITLE: Muting Model Events in Seeders
DESCRIPTION: Example of using WithoutModelEvents trait to prevent model events during seeding

LANGUAGE: php
CODE:
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;

class DatabaseSeeder extends Seeder
{
    use WithoutModelEvents;

    /**
     * Run the database seeders.
     */
    public function run(): void
    {
        $this->call([
            UserSeeder::class,
        ]);
    }
}

----------------------------------------

TITLE: Installing MongoDB PHP Extension
DESCRIPTION: Command to install the required MongoDB PHP extension via PECL

LANGUAGE: shell
CODE:
pecl install mongodb

----------------------------------------

TITLE: Assigning Middleware to Routes in Laravel
DESCRIPTION: Applying middleware to specific routes using the middleware method.

LANGUAGE: php
CODE:
use App\Http\Middleware\EnsureTokenIsValid;

Route::get('/profile', function () {
    // ...
})->middleware(EnsureTokenIsValid::class);

----------------------------------------

TITLE: Testing Custom Artisan Command with User Input (PHPUnit)
DESCRIPTION: Shows how to test a custom Artisan command with mocked user input and expected output using PHPUnit.

LANGUAGE: php
CODE:
/**
 * Test a console command.
 */
public function test_console_command(): void
{
    $this->artisan('question')
        ->expectsQuestion('What is your name?', 'Taylor Otwell')
        ->expectsQuestion('Which language do you prefer?', 'PHP')
        ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')
        ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')
        ->assertExitCode(0);
}

----------------------------------------

TITLE: Registering Service Providers in Laravel
DESCRIPTION: Demonstrates how to register service providers in the bootstrap/providers.php configuration file of a Laravel application.

LANGUAGE: php
CODE:
<?php

return [
    App\Providers\AppServiceProvider::class,
    App\Providers\ComposerServiceProvider::class, // [tl! add]
];

----------------------------------------

TITLE: Configuring Horizon Notifications
DESCRIPTION: Example of configuring Horizon to send notifications for long queue wait times.

LANGUAGE: php
CODE:
public function boot(): void
{
    parent::boot();

    Horizon::routeSmsNotificationsTo('15556667777');
    Horizon::routeMailNotificationsTo('example@example.com');
    Horizon::routeSlackNotificationsTo('slack-webhook-url', '#channel');
}

----------------------------------------

TITLE: MongoDB Atlas Connection Configuration
DESCRIPTION: Environment variables configuration for MongoDB Atlas connection

LANGUAGE: ini
CODE:
MONGODB_URI="mongodb+srv://<username>:<password>@<cluster>.mongodb.net/<dbname>?retryWrites=true&w=majority"
MONGODB_DATABASE="laravel_app"

----------------------------------------

TITLE: Defining and Using Pluralization in Laravel Translations
DESCRIPTION: Examples of defining pluralization rules in translation strings and using the trans_choice function to retrieve pluralized translations.

LANGUAGE: php
CODE:
'apples' => 'There is one apple|There are many apples',

'apples' => '{0} There are none|[1,19] There are some|[20,*] There are many',

echo trans_choice('messages.apples', 10);

'minutes_ago' => '{1} :value minute ago|[2,*] :value minutes ago',

echo trans_choice('time.minutes_ago', 5, ['value' => 5]);

'apples' => '{0} There are none|{1} There is one|[2,*] There are :count',

----------------------------------------

TITLE: Managing Asynchronous Processes in Laravel
DESCRIPTION: Demonstrates how to start an asynchronous process, check its status, and wait for its completion.

LANGUAGE: php
CODE:
$process = Process::timeout(120)->start('bash import.sh');

while ($process->running()) {
    // ...
}

$result = $process->wait();

----------------------------------------

TITLE: Running Database Migrations
DESCRIPTION: Command to execute Laravel's database migrations after setting up the database configuration.

LANGUAGE: shell
CODE:
php artisan migrate

----------------------------------------

TITLE: Configuring Horizon Environments
DESCRIPTION: Example of configuring Horizon environments in the config/horizon.php file.

LANGUAGE: php
CODE:
'environments' => [
    'production' => [
        'supervisor-1' => [
            'maxProcesses' => 10,
            'balanceMaxShift' => 1,
            'balanceCooldown' => 3,
        ],
    ],

    'local' => [
        'supervisor-1' => [
            'maxProcesses' => 3,
        ],
    ],
],

----------------------------------------

TITLE: Configuring Sail for FrankenPHP
DESCRIPTION: YAML configuration to add FrankenPHP support to Laravel Sail's docker-compose.yml file.

LANGUAGE: yaml
CODE:
services:
  laravel.test:
    environment:
      SUPERVISOR_PHP_COMMAND: "/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=frankenphp --host=0.0.0.0 --admin-port=2019 --port='${APP_PORT:-80}'"
      XDG_CONFIG_HOME:  /var/www/html/config
      XDG_DATA_HOME:  /var/www/html/data

----------------------------------------

TITLE: Using Laravel's Built-in Mock Method in PHP
DESCRIPTION: This snippet shows how to use Laravel's built-in 'mock' method, which is a more convenient way to create mocks compared to the previous example.

LANGUAGE: php
CODE:
use App\Service;
use Mockery\MockInterface;

$mock = $this->mock(Service::class, function (MockInterface $mock) {
    $mock->shouldReceive('process')->once();
});

----------------------------------------

TITLE: Testing Custom Artisan Command with User Input (Pest)
DESCRIPTION: Demonstrates how to test a custom Artisan command with mocked user input and expected output using Pest.

LANGUAGE: php
CODE:
test('console command', function () {
    $this->artisan('question')
        ->expectsQuestion('What is your name?', 'Taylor Otwell')
        ->expectsQuestion('Which language do you prefer?', 'PHP')
        ->expectsOutput('Your name is Taylor Otwell and you prefer PHP.')
        ->doesntExpectOutput('Your name is Taylor Otwell and you prefer Ruby.')
        ->assertExitCode(0);
});

----------------------------------------

TITLE: Structuring Laravel Documentation Navigation in Markdown
DESCRIPTION: Markdown-formatted navigation structure for Laravel documentation, organized into logical sections with links to individual documentation pages. Each link uses a version variable placeholder for dynamic version referencing.

LANGUAGE: markdown
CODE:
- ## Prologue
    - [Release Notes](/docs/{{version}}/releases)
    - [Upgrade Guide](/docs/{{version}}/upgrade)
    - [Contribution Guide](/docs/{{version}}/contributions)
- ## Getting Started
    - [Installation](/docs/{{version}}/installation)
    - [Configuration](/docs/{{version}}/configuration)
    - [Directory Structure](/docs/{{version}}/structure)
    [... additional sections omitted for brevity ...]

----------------------------------------

TITLE: Publishing Horizon Assets
DESCRIPTION: Publish Horizon assets using the Artisan command after installation.

LANGUAGE: shell
CODE:
php artisan horizon:install

----------------------------------------

TITLE: FrankenPHP Dockerfile Example
DESCRIPTION: Example Dockerfile for containerizing a FrankenPHP powered Laravel application.

LANGUAGE: Dockerfile
CODE:
FROM dunglas/frankenphp

RUN install-php-extensions \
    pcntl
    # Add other PHP extensions here...

COPY . /app

ENTRYPOINT ["php", "artisan", "octane:frankenphp"]

----------------------------------------

TITLE: Using Render Hooks in Laravel Folio
DESCRIPTION: Demonstrates how to use render hooks in Folio to customize the response, add data to the view, or perform authorization checks before rendering the page.

LANGUAGE: php
CODE:
<?php

use App\Models\Post;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

use function Laravel\Folio\render;

render(function (View $view, Post $post) {
    if (! Auth::user()->can('view', $post)) {
        return response('Unauthorized', 403);
    }

    return $view->with('photos', $post->author->photos);
}); ?>

<div>
    {{ $post->content }}
</div>

<div>
    This author has also taken {{ count($photos) }} photos.
</div>

----------------------------------------

TITLE: Registering Custom Session Driver
DESCRIPTION: Service provider implementation for registering a custom session driver in Laravel.

LANGUAGE: php
CODE:
<?php

namespace App\Providers;

use App\Extensions\MongoSessionHandler;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\ServiceProvider;

class SessionServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        // ...
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Session::extend('mongo', function (Application $app) {
            // Return an implementation of SessionHandlerInterface...
            return new MongoSessionHandler;
        });
    }
}

----------------------------------------

TITLE: Local MongoDB Environment Configuration
DESCRIPTION: Environment variables configuration for local MongoDB connection

LANGUAGE: ini
CODE:
MONGODB_URI="mongodb://localhost:27017"
MONGODB_DATABASE="laravel_app"

----------------------------------------

TITLE: Concurrent Tasks with Octane
DESCRIPTION: Example of executing concurrent tasks using Octane's concurrently method.

LANGUAGE: php
CODE:
use App\Models\User;
use App\Models\Server;
use Laravel\Octane\Facades\Octane;

[$users, $servers] = Octane::concurrently([
    fn () => User::all(),
    fn () => Server::all(),
]);

----------------------------------------

TITLE: Octane Cache Usage
DESCRIPTION: Example of using the Octane cache driver for high-performance caching.

LANGUAGE: php
CODE:
Cache::store('octane')->put('framework', 'Laravel', 30);

----------------------------------------

TITLE: Updating Feature Values
DESCRIPTION: Examples of updating feature values using activate and deactivate methods.

LANGUAGE: php
CODE:
Feature::activate('new-api');

Feature::for($user->team)->deactivate('billing-v2');

Feature::activate('purchase-button', 'seafoam-green');

----------------------------------------

TITLE: Broadcasting to Presence Channels in PHP
DESCRIPTION: Example of broadcasting an event to a presence channel.

LANGUAGE: PHP
CODE:
/**
 * Get the channels the event should broadcast on.
 *
 * @return array<int, \Illuminate\Broadcasting\Channel>
 */
public function broadcastOn(): array
{
    return [
        new PresenceChannel('chat.'.$this->message->room_id),
    ];
}

----------------------------------------

TITLE: Installing Laravel Horizon via Composer
DESCRIPTION: Use Composer to install Laravel Horizon package into your project.

LANGUAGE: shell
CODE:
composer require laravel/horizon

----------------------------------------

TITLE: Starting Octane Server
DESCRIPTION: Artisan command to start the Octane server.

LANGUAGE: shell
CODE:
php artisan octane:start

----------------------------------------

TITLE: Configuring Shared Folders in Homestead.yaml
DESCRIPTION: Example of configuring shared folders between host machine and Homestead virtual environment in the Homestead.yaml configuration file.

LANGUAGE: yaml
CODE:
folders:
    - map: ~/code/project1
      to: /home/vagrant/project1

----------------------------------------

TITLE: Transliterating Non-ASCII Characters to ASCII in PHP
DESCRIPTION: Shows how to use the transliterate() method to convert non-ASCII characters to their closest ASCII equivalents.

LANGUAGE: PHP
CODE:
use Illuminate\Support\Str;

$email = Str::of('ⓣⓔⓢⓣ@ⓛⓐⓡⓐⓥⓔⓛ.ⓒⓞⓜ')->transliterate()

// 'test@laravel.com'

----------------------------------------

TITLE: Implementing Required Text Input with Validation
DESCRIPTION: Example of using the text prompt with required input and custom validation logic.

LANGUAGE: php
CODE:
$name = text(
    label: 'What is your name?',
    required: true,
    validate: fn (string $value) => match (true) {
        strlen($value) < 3 => 'The name must be at least 3 characters.',
        strlen($value) > 255 => 'The name must not exceed 255 characters.',
        default => null
    }
);

----------------------------------------

TITLE: Enabling Stateless Authentication in Laravel Socialite
DESCRIPTION: Disable session state verification for stateless API authentication using the stateless method.

LANGUAGE: php
CODE:
use Laravel\Socialite\Facades\Socialite;

return Socialite::driver('google')->stateless()->user();

----------------------------------------

TITLE: Installing Octane Configuration File
DESCRIPTION: Artisan command to install Octane's configuration file into the Laravel application.

LANGUAGE: shell
CODE:
php artisan octane:install

----------------------------------------

TITLE: Setting Environment Variables in Homestead.yaml
DESCRIPTION: Example of defining global environment variables in the Homestead.yaml configuration file.

LANGUAGE: yaml
CODE:
variables:
    - key: APP_ENV
      value: local
    - key: FOO
      value: bar

----------------------------------------

TITLE: Installing Laravel Tinker
DESCRIPTION: Shows the command to install Laravel Tinker using Composer.

LANGUAGE: shell
CODE:
composer require laravel/tinker

----------------------------------------

TITLE: Implementing Model Broadcasting in PHP
DESCRIPTION: Example of using the BroadcastsEvents trait to automatically broadcast Eloquent model events.

LANGUAGE: PHP
CODE:
<?php

namespace App\Models;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Database\Eloquent\BroadcastsEvents;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Post extends Model
{
    use BroadcastsEvents, HasFactory;

    /**
     * Get the user that the post belongs to.
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /**
     * Get the channels that model events should broadcast on.
     *
     * @return array<int, \Illuminate\Broadcasting\Channel|\Illuminate\Database\Eloquent\Model>
     */
    public function broadcastOn(string $event): array
    {
        return [$this, $this->user];
    }
}

----------------------------------------

TITLE: Argon2 Work Factor Configuration
DESCRIPTION: Example showing how to customize Argon2 hashing parameters including memory, time, and threads.

LANGUAGE: php
CODE:
$hashed = Hash::make('password', [
    'memory' => 1024,
    'time' => 2,
    'threads' => 2,
]);

----------------------------------------

TITLE: Installing Laravel Octane via Composer
DESCRIPTION: Command to install Laravel Octane using the Composer package manager.

LANGUAGE: shell
CODE:
composer require laravel/octane

----------------------------------------

TITLE: Enabling Xdebug Autostart
DESCRIPTION: Example of modifying the Xdebug configuration file to enable automatic debugging for web requests.

LANGUAGE: ini
CODE:
; If Homestead.yaml contains a different subnet for the IP address, this address may be different...
xdebug.client_host = 192.168.10.1
xdebug.mode = debug
xdebug.start_with_request = yes

----------------------------------------

TITLE: Incrementing Rate Limiter by Custom Amount in Laravel
DESCRIPTION: This snippet shows how to increment the rate limiter count by a custom amount, in this case by 5.

LANGUAGE: php
CODE:
RateLimiter::increment('send-message:'.$user->id, amount: 5);

----------------------------------------

TITLE: Implementing Reportable and Renderable Exceptions in Laravel
DESCRIPTION: Demonstrates how to create a custom exception class with 'report' and 'render' methods for specialized exception handling and rendering.

LANGUAGE: php
CODE:
<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Http\Request;
use Illuminate\Http\Response;

class InvalidOrderException extends Exception
{
    /**
     * Report the exception.
     */
    public function report(): void
    {
        // ...
    }

    /**
     * Render the exception as an HTTP response.
     */
    public function render(Request $request): Response
    {
        return response(/* ... */);
    }
}

----------------------------------------

TITLE: Login Form Template Example
DESCRIPTION: Basic HTML template for login form that works with Fortify

LANGUAGE: html
CODE:
@if (session('status'))
    <div class="mb-4 font-medium text-sm text-green-600">
        {{ session('status') }}
    </div>
@endif

----------------------------------------

TITLE: Testing Process Invocations in Laravel
DESCRIPTION: Illustrates how to use Laravel's process faking capabilities to test code that invokes processes without actually running them.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Process;

Process::fake();

$response = $this->get('/import');

Process::assertRan('bash import.sh');

Process::assertRan(function (PendingProcess $process, ProcessResult $result) {
    return $process->command === 'bash import.sh' &&
           $process->timeout === 60;
});

----------------------------------------

TITLE: Configuring Network Interfaces in Homestead.yaml
DESCRIPTION: Examples of configuring various network interface options in the Homestead.yaml configuration file.

LANGUAGE: yaml
CODE:
networks:
    - type: "private_network"
      ip: "192.168.10.20"

    - type: "public_network"
      ip: "192.168.10.20"
      bridge: "en1: Wi-Fi (AirPort)"

    - type: "public_network"
      bridge: "en1: Wi-Fi (AirPort)"

    - type: "public_network"
      ip: "192.168.10.20"
      bridge: "en1: Wi-Fi (AirPort)"
      dev: "enp2s0"

----------------------------------------

TITLE: Laravel MongoDB Database Configuration
DESCRIPTION: Database configuration setup in config/database.php for MongoDB connection

LANGUAGE: php
CODE:
'connections' => [
    'mongodb' => [
        'driver' => 'mongodb',
        'dsn' => env('MONGODB_URI', 'mongodb://localhost:27017'),
        'database' => env('MONGODB_DATABASE', 'laravel_app'),
    ],
],

----------------------------------------

TITLE: Inertia React Component
DESCRIPTION: React component example showing how to use data passed from an Inertia controller within a frontend component.

LANGUAGE: jsx
CODE:
import Layout from '@/layouts/authenticated';
import { Head } from '@inertiajs/react';

export default function Show({ user }) {
    return (
        <Layout>
            <Head title="Welcome" />
            <h1>Welcome</h1>
            <p>Hello {user.name}, welcome to Inertia.</p>
        </Layout>
    )
}

----------------------------------------

TITLE: Custom MongoDB Session Handler Implementation
DESCRIPTION: Implementation of a custom session handler for MongoDB storage following PHP's SessionHandlerInterface.

LANGUAGE: php
CODE:
<?php

namespace App\Extensions;

class MongoSessionHandler implements \SessionHandlerInterface
{
    public function open($savePath, $sessionName) {}
    public function close() {}
    public function read($sessionId) {}
    public function write($sessionId, $data) {}
    public function destroy($sessionId) {}
    public function gc($lifetime) {}
}

----------------------------------------

TITLE: Configuring Pluralizer Language in Laravel
DESCRIPTION: Example of configuring the pluralizer to use a specific language in a service provider's boot method.

LANGUAGE: php
CODE:
use Illuminate\Support\Pluralizer;

/**
 * Bootstrap any application services.
 */
public function boot(): void
{
    Pluralizer::useLanguage('spanish');

    // ...
}

----------------------------------------

TITLE: Installing Laravel Sanctum via Artisan
DESCRIPTION: Command to install Laravel Sanctum package using Artisan command line tool.

LANGUAGE: shell
CODE:
php artisan install:api

----------------------------------------

TITLE: Configuring MySQL Database Environment Variables
DESCRIPTION: Example configuration for setting up MySQL database connection parameters in Laravel's .env file.

LANGUAGE: ini
CODE:
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

----------------------------------------

TITLE: Chunk Results Processing
DESCRIPTION: Example of processing large result sets in chunks to manage memory usage efficiently.

LANGUAGE: php
CODE:
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;

DB::table('users')->orderBy('id')->chunk(100, function (Collection $users) {
    foreach ($users as $user) {
        // ...
    }
});

----------------------------------------

TITLE: Loading Package Routes in Laravel Service Provider
DESCRIPTION: Shows how to load package routes using the loadRoutesFrom method in the service provider's boot method.

LANGUAGE: php
CODE:
public function boot(): void
{
    $this->loadRoutesFrom(__DIR__.'/../routes/web.php');
}

----------------------------------------

TITLE: Publishing Language Files in Laravel
DESCRIPTION: Artisan command to publish language files in a Laravel application, creating the lang directory and default language files.

LANGUAGE: shell
CODE:
php artisan lang:publish

----------------------------------------

TITLE: Protecting Routes with Sanctum Middleware
DESCRIPTION: Adding Sanctum authentication middleware to protect API routes.

LANGUAGE: php
CODE:
use Illuminate\Http\Request;

Route::get('/user', function (Request $request) {
    return $request->user();
})->middleware('auth:sanctum');

----------------------------------------

TITLE: Setting Multiple Headers in Laravel Response
DESCRIPTION: Demonstrates how to attach multiple headers to a response using the withHeaders method.

LANGUAGE: php
CODE:
return response($content)
    ->withHeaders([
        'Content-Type' => $type,
        'X-Header-One' => 'Header Value',
        'X-Header-Two' => 'Header Value',
    ]);

----------------------------------------

TITLE: Decrypting Environment Files in Laravel
DESCRIPTION: Use the 'env:decrypt' Artisan command to decrypt encrypted environment files.

LANGUAGE: shell
CODE:
php artisan env:decrypt

LANGUAGE: shell
CODE:
php artisan env:decrypt --key=3UVsEgGVK36XN82KKeyLFMhvosbZN1aF

LANGUAGE: shell
CODE:
php artisan env:decrypt --key=qUWuNRdfuImXcKxZ --cipher=AES-128-CBC

LANGUAGE: shell
CODE:
php artisan env:decrypt --env=staging

LANGUAGE: shell
CODE:
php artisan env:decrypt --force

----------------------------------------

TITLE: Publishing Tinker Configuration
DESCRIPTION: Demonstrates how to publish Tinker's configuration file.

LANGUAGE: shell
CODE:
php artisan vendor:publish --provider="Laravel\Tinker\TinkerServiceProvider"

----------------------------------------

TITLE: Running Tests with Coverage Report in Laravel
DESCRIPTION: This snippet shows how to run tests and generate a coverage report using Laravel's Artisan command with the --coverage option.

LANGUAGE: shell
CODE:
php artisan test --coverage

----------------------------------------

TITLE: Displaying Application Configuration Overview using Artisan
DESCRIPTION: Use the 'about' Artisan command to display an overview of the application's configuration, drivers, and environment. The '--only' option can be used to filter specific sections.

LANGUAGE: shell
CODE:
php artisan about

LANGUAGE: shell
CODE:
php artisan about --only=environment

----------------------------------------

TITLE: Basic Event Class Definition
DESCRIPTION: Example of defining a basic event class with Eloquent model serialization support.

LANGUAGE: php
CODE:
<?php

namespace App\Events;

use App\Models\Order;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class OrderShipped
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    /**
     * Create a new event instance.
     */
    public function __construct(
        public Order $order,
    ) {}
}

----------------------------------------

TITLE: Multi-Schema Database Inspection Methods
DESCRIPTION: Examples of using Schema methods for inspecting tables across multiple database schemas.

LANGUAGE: php
CODE:
// All tables on all schemas...
$tables = Schema::getTables();

// All tables on the 'main' schema...
$table = Schema::getTables(schema: 'main');

// All tables on the 'main' and 'blog' schemas...
$table = Schema::getTables(schema: ['main', 'blog']);

----------------------------------------

TITLE: Implementing Subdomain Routing with Laravel Folio
DESCRIPTION: Demonstrates how to set up subdomain routing in Folio, including capturing subdomain parameters for injection into page templates.

LANGUAGE: php
CODE:
use Laravel\Folio\Folio;

Folio::domain('admin.example.com')
    ->path(resource_path('views/pages/admin'));

Folio::domain('{account}.example.com')
    ->path(resource_path('views/pages/admin'));

----------------------------------------

TITLE: Running Tests with Minimum Coverage Threshold in Laravel
DESCRIPTION: This snippet demonstrates how to run tests with a minimum coverage threshold using Laravel's Artisan command, which will fail if the threshold is not met.

LANGUAGE: shell
CODE:
php artisan test --coverage --min=80.3

----------------------------------------

TITLE: Exploring Configuration File Values with Artisan
DESCRIPTION: Use the 'config:show' Artisan command to explore a specific configuration file's values in detail.

LANGUAGE: shell
CODE:
php artisan config:show database

----------------------------------------

TITLE: Disabling Maintenance Mode in Laravel
DESCRIPTION: Use the 'up' Artisan command to disable maintenance mode.

LANGUAGE: shell
CODE:
php artisan up

----------------------------------------

TITLE: Configuring Nginx Sites in Homestead.yaml
DESCRIPTION: Example of mapping domain names to project folders for Nginx sites in the Homestead.yaml configuration file.

LANGUAGE: yaml
CODE:
sites:
    - map: homestead.test
      to: /home/vagrant/project1/public

----------------------------------------

TITLE: Programmatically Executing Artisan Commands
DESCRIPTION: Demonstrates how to execute Artisan commands programmatically using the Artisan facade.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Artisan;

Route::post('/user/{user}/mail', function (string $user) {
    $exitCode = Artisan::call('mail:send', [
        'user' => $user, '--queue' => 'default'
    ]);
});

----------------------------------------

TITLE: Loading Package Language Files in Laravel Service Provider
DESCRIPTION: Shows how to load package language files using the loadTranslationsFrom method in the service provider's boot method.

LANGUAGE: php
CODE:
public function boot(): void
{
    $this->loadTranslationsFrom(__DIR__.'/../lang', 'courier');
}

----------------------------------------

TITLE: Publishing Configuration Files in Laravel
DESCRIPTION: Use the 'config:publish' Artisan command to publish configuration files that are not published by default.

LANGUAGE: shell
CODE:
php artisan config:publish

LANGUAGE: shell
CODE:
php artisan config:publish --all

----------------------------------------

TITLE: Installing Laravel Cashier Paddle
DESCRIPTION: Install the Cashier package for Paddle using Composer and publish the migration files.

LANGUAGE: shell
CODE:
composer require laravel/cashier-paddle

LANGUAGE: shell
CODE:
php artisan vendor:publish --tag="cashier-migrations"

LANGUAGE: shell
CODE:
php artisan migrate

----------------------------------------

TITLE: Using Middleware to Check Features
DESCRIPTION: Example of using middleware to check features before a route is invoked.

LANGUAGE: php
CODE:
Route::get('/api/servers', function () {
    // ...
})->middleware(EnsureFeaturesAreActive::using('new-api', 'servers-api'));

----------------------------------------

TITLE: Livewire Counter Component Implementation
DESCRIPTION: Example of a Livewire component class implementing a simple counter with increment functionality.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Livewire;

use Livewire\Component;

class Counter extends Component
{
    public $count = 0;

    public function increment()
    {
        $this->count++;
    }

    public function render()
    {
        return view('livewire.counter');
    }
}

----------------------------------------

TITLE: Publishing Package Migrations in Laravel Service Provider
DESCRIPTION: Demonstrates how to publish package migrations using the publishesMigrations method in the service provider's boot method.

LANGUAGE: php
CODE:
public function boot(): void
{
    $this->publishesMigrations([
        __DIR__.'/../database/migrations' => database_path('migrations'),
    ]);
}

----------------------------------------

TITLE: Enabling Maintenance Mode in Laravel
DESCRIPTION: Use the 'down' Artisan command to enable maintenance mode with various options for customization.

LANGUAGE: shell
CODE:
php artisan down

LANGUAGE: shell
CODE:
php artisan down --refresh=15

LANGUAGE: shell
CODE:
php artisan down --retry=60

LANGUAGE: shell
CODE:
php artisan down --secret="1630542a-246b-4b66-afa1-dd72a4c43515"

LANGUAGE: shell
CODE:
php artisan down --with-secret

LANGUAGE: shell
CODE:
php artisan down --render="errors::503"

LANGUAGE: shell
CODE:
php artisan down --redirect=/

----------------------------------------

TITLE: Creating a Basic Folio Route in Laravel
DESCRIPTION: Demonstrates how to create a simple Folio route by creating a Blade template in the pages directory. This example shows a basic 'Hello World' page accessible at the /greeting URL.

LANGUAGE: php
CODE:
<div>
    Hello World
</div>

----------------------------------------

TITLE: Using Bindings and Singletons Properties in Service Provider
DESCRIPTION: Shows how to use the bindings and singletons properties in a service provider to automatically register multiple container bindings without manually coding each one.

LANGUAGE: php
CODE:
<?php

namespace App\Providers;

use App\Contracts\DowntimeNotifier;
use App\Contracts\ServerProvider;
use App\Services\DigitalOceanServerProvider;
use App\Services\PingdomDowntimeNotifier;
use App\Services\ServerToolsProvider;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * All of the container bindings that should be registered.
     *
     * @var array
     */
    public $bindings = [
        ServerProvider::class => DigitalOceanServerProvider::class,
    ];

    /**
     * All of the container singletons that should be registered.
     *
     * @var array
     */
    public $singletons = [
        DowntimeNotifier::class => PingdomDowntimeNotifier::class,
        ServerProvider::class => ServerToolsProvider::class,
    ];
}

----------------------------------------

TITLE: Configuring Cache-Based Maintenance Mode in Laravel
DESCRIPTION: Modify the .env file to use a cache-based method for handling maintenance mode across multiple servers.

LANGUAGE: ini
CODE:
APP_MAINTENANCE_DRIVER=cache
APP_MAINTENANCE_STORE=database

----------------------------------------

TITLE: Customizing Searchable Data
DESCRIPTION: Override the toSearchableArray method to customize the data that is synchronized to the search index.

LANGUAGE: php
CODE:
public function toSearchableArray(): array
{
    $array = $this->toArray();

    // Customize the data array...

    return $array;
}

----------------------------------------

TITLE: Installing Laravel Fortify via Composer
DESCRIPTION: Commands to install Fortify package, publish resources, and run migrations

LANGUAGE: shell
CODE:
composer require laravel/fortify
php artisan fortify:install
php artisan migrate

----------------------------------------

TITLE: Custom Collection Method Implementation
DESCRIPTION: Shows how to implement a custom newCollection method to override default collection behavior.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use App\Support\UserCollection;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    public function newCollection(array $models = []): Collection
    {
        return new UserCollection($models);
    }
}

----------------------------------------

TITLE: Real-Time Facade Implementation
DESCRIPTION: Shows how to implement and use real-time facades for dependency injection with the Publisher example.

LANGUAGE: php
CODE:
namespace App\Models;

use Facades\App\Contracts\Publisher;
use Illuminate\Database\Eloquent\Model;

class Podcast extends Model
{
    public function publish(): void
    {
        $this->update(['publishing' => now()]);
        Publisher::publish($this);
    }
}

----------------------------------------

TITLE: Setting Configuration Values at Runtime in Laravel
DESCRIPTION: Use the Config facade's 'set' method or the 'config' function to set configuration values at runtime.

LANGUAGE: php
CODE:
Config::set('app.timezone', 'America/Chicago');

config(['app.timezone' => 'America/Chicago']);

----------------------------------------

TITLE: Configuring Typesense Driver
DESCRIPTION: Set up Typesense credentials and install the Typesense PHP SDK.

LANGUAGE: shell
CODE:
composer require typesense/typesense-php

LANGUAGE: ini
CODE:
SCOUT_DRIVER=typesense
TYPESENSE_API_KEY=masterKey
TYPESENSE_HOST=localhost

----------------------------------------

TITLE: Configuring Basic Fortify Features
DESCRIPTION: Basic configuration to enable core authentication features in Fortify

LANGUAGE: php
CODE:
'features' => [
    Features::registration(),
    Features::resetPasswords(),
    Features::emailVerification(),
],

----------------------------------------

TITLE: Route Parameter Example
DESCRIPTION: Example of defining a route with required parameters

LANGUAGE: php
CODE:
Route::get('/user/{id}', function (string $id) {
    return 'User '.$id;
});

----------------------------------------

TITLE: Eager Loading Feature Values
DESCRIPTION: Example of eager loading feature values to improve performance.

LANGUAGE: php
CODE:
Feature::for($users)->load(['notifications-beta']);

foreach ($users as $user) {
    if (Feature::for($user)->active('notifications-beta')) {
        $user->notify(new RegistrationSuccess);
    }
}

----------------------------------------

TITLE: Configuring Environmental Variables
DESCRIPTION: Examples of key environment variables used to configure Pulse

LANGUAGE: ini
CODE:
PULSE_DB_CONNECTION=pulse
PULSE_INGEST_DRIVER=redis
PULSE_REDIS_CONNECTION=pulse
PULSE_SERVER_NAME=load-balancer

----------------------------------------

TITLE: Configuring Algolia Driver
DESCRIPTION: Set up Algolia credentials and install the Algolia PHP SDK.

LANGUAGE: shell
CODE:
composer require algolia/algoliasearch-client-php

----------------------------------------

TITLE: Implementing Two Factor Authentication Model
DESCRIPTION: Adding two-factor authentication capabilities to User model

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Fortify\TwoFactorAuthenticatable;

class User extends Authenticatable
{
    use Notifiable, TwoFactorAuthenticatable;
}

----------------------------------------

TITLE: Manual Rate Limiting with Increment in Laravel
DESCRIPTION: This snippet shows how to manually check and increment rate limiting attempts. It uses the 'tooManyAttempts' method to check the limit and 'increment' to increase the attempt count.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\RateLimiter;

if (RateLimiter::tooManyAttempts('send-message:'.$user->id, $perMinute = 5)) {
    return 'Too many attempts!';
}

RateLimiter::increment('send-message:'.$user->id);

// Send message...

----------------------------------------

TITLE: Eloquent Collection Chaining Methods
DESCRIPTION: Shows how to chain collection methods to filter and transform data using reject() and map() functions.

LANGUAGE: php
CODE:
$names = User::all()->reject(function (User $user) {
    return $user->active === false;
})->map(function (User $user) {
    return $user->name;
});

----------------------------------------

TITLE: Container Class Dependency Resolution Example
DESCRIPTION: Example showing the updated container behavior regarding default property values in class resolution.

LANGUAGE: php
CODE:
class Example
{
    public function __construct(public ?Carbon $date = null) {}
}

$example = resolve(Example::class);

// <= 11.x
$example->date instanceof Carbon;

// >= 12.x
$example->date === null;

----------------------------------------

TITLE: Livewire Counter Template
DESCRIPTION: Blade template for the Livewire counter component showing wire:click directive usage and state display.

LANGUAGE: blade
CODE:
<div>
    <button wire:click="increment">+</button>
    <h1>{{ $count }}</h1>
</div>

----------------------------------------

TITLE: Installing Laravel Telescope via Composer
DESCRIPTION: Commands to install Laravel Telescope using Composer package manager and set up required database migrations.

LANGUAGE: shell
CODE:
composer require laravel/telescope

php artisan telescope:install

php artisan migrate

----------------------------------------

TITLE: Installing Laravel Pennant via Composer
DESCRIPTION: Command to install Laravel Pennant using the Composer package manager.

LANGUAGE: shell
CODE:
composer require laravel/pennant

----------------------------------------

TITLE: Paginating Search Results
DESCRIPTION: Use the paginate method to paginate search results.

LANGUAGE: php
CODE:
use App\Models\Order;

$orders = Order::search('Star Trek')->paginate();

----------------------------------------

TITLE: Policy Method Implementation for Post Updates
DESCRIPTION: Example of implementing an update method in a PostPolicy class to authorize post updates

LANGUAGE: php
CODE:
public function update(User $user, Post $post): bool
{
    return $user->id === $post->user_id;
}

----------------------------------------

TITLE: Traditional PHP Template Rendering
DESCRIPTION: Example of traditional PHP template rendering using basic PHP echo statements within HTML to display user data from a database.

LANGUAGE: blade
CODE:
<div>
    <?php foreach ($users as $user): ?>
        Hello, <?php echo $user->name; ?> <br />
    <?php endforeach; ?>
</div>

----------------------------------------

TITLE: Dashboard Authorization Gate
DESCRIPTION: PHP code defining authorization gate for Telescope dashboard access in non-local environments.

LANGUAGE: php
CODE:
protected function gate(): void
{
    Gate::define('viewTelescope', function (User $user) {
        return in_array($user->email, [
            'taylor@laravel.com',
        ]);
    });
}

----------------------------------------

TITLE: Calling Multiple Seeders
DESCRIPTION: Example of calling multiple seeder classes from the DatabaseSeeder

LANGUAGE: php
CODE:
/**
 * Run the database seeders.
 */
public function run(): void
{
    $this->call([
        UserSeeder::class,
        PostSeeder::class,
        CommentSeeder::class,
    ]);
}

----------------------------------------

TITLE: Executing a Search Query
DESCRIPTION: Use the search method on a model to perform a search and retrieve results.

LANGUAGE: php
CODE:
use App\Models\Order;

$orders = Order::search('Star Trek')->get();

----------------------------------------

TITLE: Installing Node and NPM Check
DESCRIPTION: Commands to verify Node.js and NPM installation versions

LANGUAGE: shell
CODE:
node -v
npm -v

----------------------------------------

TITLE: Creating Cache Database Table
DESCRIPTION: Commands to create and migrate the cache table for database cache driver

LANGUAGE: shell
CODE:
php artisan make:cache-table

php artisan migrate

----------------------------------------

TITLE: Configuring Memcached Servers
DESCRIPTION: PHP configuration for Memcached cache servers including host, port and weight settings

LANGUAGE: php
CODE:
'memcached' => [
    // ...
    'servers' => [
        [
            'host' => env('MEMCACHED_HOST', '127.0.0.1'),
            'port' => env('MEMCACHED_PORT', 11211),
            'weight' => 100,
        ],
    ],
],

----------------------------------------

TITLE: Request Path and URL Methods
DESCRIPTION: Examples of retrieving request path and URL information using Request methods

LANGUAGE: php
CODE:
$uri = $request->path();

if ($request->is('admin/*')) {
    // ...
}

$url = $request->url();
$urlWithQueryString = $request->fullUrl();

$request->fullUrlWithQuery(['type' => 'phone']);

----------------------------------------

TITLE: Writing Command Output
DESCRIPTION: Shows various methods for writing output to the console in an Artisan command.

LANGUAGE: php
CODE:
public function handle(): void
{
    $this->info('The command was successful!');
    $this->error('Something went wrong!');
    $this->line('Display this on the screen');
}

----------------------------------------

TITLE: Creating a Foreign Key Constraint in Laravel Migration
DESCRIPTION: Add a foreign key constraint to a table using the foreignId and constrained methods.

LANGUAGE: php
CODE:
Schema::table('posts', function (Blueprint $table) {
    $table->foreignId('user_id')->constrained();
});

----------------------------------------

TITLE: Basic Context Usage with Laravel Logging
DESCRIPTION: Example showing how to write log entries with context metadata using Laravel's Log facade

LANGUAGE: php
CODE:
Log::info('User authenticated.', ['auth_id' => Auth::id()]);

----------------------------------------

TITLE: Cache Store Management
DESCRIPTION: Examples of storing and retrieving data from different cache stores

LANGUAGE: php
CODE:
$value = Cache::store('file')->get('foo');

Cache::store('redis')->put('bar', 'baz', 600); // 10 Minutes

----------------------------------------

TITLE: Retrieving Command Input
DESCRIPTION: Demonstrates how to retrieve input values (arguments and options) within an Artisan command.

LANGUAGE: php
CODE:
public function handle(): void
{
    $userId = $this->argument('user');
    $queueName = $this->option('queue');
}

----------------------------------------

TITLE: Running Pennant Database Migrations
DESCRIPTION: Artisan command to run Pennant's database migrations.

LANGUAGE: shell
CODE:
php artisan migrate

----------------------------------------

TITLE: Adding Billable Trait to User Model
DESCRIPTION: Add the Billable trait to the User model to enable billing functionality.

LANGUAGE: php
CODE:
use Laravel\Paddle\Billable;

class User extends Authenticatable
{
    use Billable;
}

----------------------------------------

TITLE: Vue Form Implementation with Precognition
DESCRIPTION: Example of implementing a form using Vue with Precognition for live validation

LANGUAGE: vue
CODE:
<script setup>
import { useForm } from 'laravel-precognition-vue';

const form = useForm('post', '/users', {
    name: '',
    email: '',
});

const submit = () => form.submit();
</script>

<template>
    <form @submit.prevent="submit">
        <label for="name">Name</label>
        <input
            id="name"
            v-model="form.name"
            @change="form.validate('name')"
        />
        <div v-if="form.invalid('name')">
            {{ form.errors.name }}
        </div>

        <button :disabled="form.processing">
            Create User
        </button>
    </form>
</template>

----------------------------------------

TITLE: Installing S3 Driver Dependencies
DESCRIPTION: Command to install AWS S3 Flysystem adapter via Composer

LANGUAGE: shell
CODE:
composer require league/flysystem-aws-s3-v3 "^3.0" --with-all-dependencies

----------------------------------------

TITLE: Basic Pint Configuration
DESCRIPTION: Minimal JSON configuration file for Laravel Pint specifying the preset to use

LANGUAGE: json
CODE:
{
    "preset": "laravel"
}

----------------------------------------

TITLE: Scheduling an Invokable Object in Laravel
DESCRIPTION: Shows how to schedule an invokable object, which is a PHP class with an __invoke method, to run daily.

LANGUAGE: php
CODE:
Schedule::call(new DeleteRecentUsers)->daily();

----------------------------------------

TITLE: Implementing OAuth Authentication Routes in Laravel
DESCRIPTION: Set up routes for redirecting to the OAuth provider and handling the callback after authentication.

LANGUAGE: php
CODE:
use Laravel\Socialite\Facades\Socialite;

Route::get('/auth/redirect', function () {
    return Socialite::driver('github')->redirect();
});

Route::get('/auth/callback', function () {
    $user = Socialite::driver('github')->user();

    // $user->token
});

----------------------------------------

TITLE: Testing Feature Flags
DESCRIPTION: Example of testing code that interacts with feature flags.

LANGUAGE: php
CODE:
test('it can control feature values', function () {
    Feature::define('purchase-button', 'seafoam-green');

    expect(Feature::value('purchase-button'))->toBe('seafoam-green');
});

----------------------------------------

TITLE: Configuring Package Discovery in composer.json
DESCRIPTION: Demonstrates how to set up automatic package discovery by defining service providers and facades in the composer.json file.

LANGUAGE: json
CODE:
"extra": {
    "laravel": {
        "providers": [
            "Barryvdh\\Debugbar\\ServiceProvider"
        ],
        "aliases": {
            "Debugbar": "Barryvdh\\Debugbar\\Facade"
        }
    }
}

----------------------------------------

TITLE: Password Update Controller Example
DESCRIPTION: Laravel controller method demonstrating how to hash a password using the Hash facade's make method when updating a user's password.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class PasswordController extends Controller
{
    /**
     * Update the password for the user.
     */
    public function update(Request $request): RedirectResponse
    {
        // Validate the new password length...

        $request->user()->fill([
            'password' => Hash::make($request->newPassword)
        ])->save();

        return redirect('/profile');
    }
}

----------------------------------------

TITLE: Configuring Allowed Origins
DESCRIPTION: PHP configuration for defining allowed origins in the Reverb config file

LANGUAGE: php
CODE:
'apps' => [
    [
        'app_id' => 'my-app-id',
        'allowed_origins' => ['laravel.com'],
        // ...
    ]
]

----------------------------------------

TITLE: Registering a Route for a Single Action Controller in Laravel
DESCRIPTION: Shows how to define a route for a single action controller.

LANGUAGE: php
CODE:
use App\Http\Controllers\ProvisionServer;

Route::post('/server', ProvisionServer::class);

----------------------------------------

TITLE: Defining a Rich Feature Value
DESCRIPTION: Example of defining a feature with a rich value instead of a boolean.

LANGUAGE: php
CODE:
Feature::define('purchase-button', fn (User $user) => Arr::random([
    'blue-sapphire',
    'seafoam-green',
    'tart-orange',
]));

----------------------------------------

TITLE: Loading Package Views in Laravel Service Provider
DESCRIPTION: Demonstrates how to load package views using the loadViewsFrom method in the service provider's boot method.

LANGUAGE: php
CODE:
public function boot(): void
{
    $this->loadViewsFrom(__DIR__.'/../resources/views', 'courier');
}

----------------------------------------

TITLE: ChromeDriver Installation Management
DESCRIPTION: Commands to manage ChromeDriver installation for Dusk tests

LANGUAGE: shell
CODE:
# Install latest ChromeDriver
php artisan dusk:chrome-driver

# Install specific version
php artisan dusk:chrome-driver 86

# Install for all supported OS
php artisan dusk:chrome-driver --all

----------------------------------------

TITLE: Handling Stripe Webhooks
DESCRIPTION: Setting up a route to handle incoming Stripe webhooks

LANGUAGE: php
CODE:
Route::post(
    '/stripe/webhook',
    '\Laravel\Cashier\Http\Controllers\WebhookController@handleWebhook'
);

----------------------------------------

TITLE: Creating a View Composer Class in Laravel
DESCRIPTION: Shows the structure of a view composer class in Laravel. The composer injects data into the view before it's rendered, allowing for separation of logic from the view itself.

LANGUAGE: php
CODE:
<?php

namespace App\View\Composers;

use App\Repositories\UserRepository;
use Illuminate\View\View;

class ProfileComposer
{
    public function __construct(
        protected UserRepository $users,
    ) {}

    public function compose(View $view): void
    {
        $view->with('count', $this->users->count());
    }
}

----------------------------------------

TITLE: Creating a Class-Based Feature
DESCRIPTION: Artisan command to create a new class-based feature.

LANGUAGE: shell
CODE:
php artisan pennant:feature NewApi

----------------------------------------

TITLE: Registering Package Artisan Commands in Laravel Service Provider
DESCRIPTION: Shows how to register package Artisan commands using the commands method in the service provider's boot method.

LANGUAGE: php
CODE:
public function boot(): void
{
    if ($this->app->runningInConsole()) {
        $this->commands([
            InstallCommand::class,
            NetworkCommand::class,
        ]);
    }
}

----------------------------------------

TITLE: Displaying Pagination Results in Laravel Blade Template
DESCRIPTION: Example of rendering paginated results and pagination links in a Laravel Blade template.

LANGUAGE: HTML
CODE:
<div class="container">
    @foreach ($users as $user)
        {{ $user->name }}
    @endforeach
</div>

{{ $users->links() }}

----------------------------------------

TITLE: HTML Entity Encoding Configuration
DESCRIPTION: Shows how to disable double encoding of HTML entities in Blade templates via service provider

LANGUAGE: php
CODE:
<?php

namespace App\Providers;

use Illuminate\Support\Facades\Blade;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        Blade::withoutDoubleEncoding();
    }
}

----------------------------------------

TITLE: Purging Features
DESCRIPTION: Examples of purging features using the purge method and Artisan command.

LANGUAGE: php
CODE:
Feature::purge('new-api');

Feature::purge(['new-api', 'purchase-button']);

Feature::purge();

----------------------------------------

TITLE: Configuring Reverb Credentials
DESCRIPTION: Environment variables required for setting up Reverb application credentials

LANGUAGE: ini
CODE:
REVERB_APP_ID=my-app-id
REVERB_APP_KEY=my-app-key
REVERB_APP_SECRET=my-app-secret

----------------------------------------

TITLE: Viewing Command Help Screen
DESCRIPTION: Shows how to display the help screen for a specific Artisan command.

LANGUAGE: shell
CODE:
php artisan help migrate

----------------------------------------

TITLE: Creating Database Session Table Migration
DESCRIPTION: Shell commands to generate and run a migration for the sessions database table.

LANGUAGE: shell
CODE:
php artisan make:session-table

php artisan migrate

----------------------------------------

TITLE: Customizing Authentication Logic
DESCRIPTION: Example of customizing how users are authenticated using Fortify

LANGUAGE: php
CODE:
use Laravel\Fortify\Fortify;

Fortify::authenticateUsing(function (Request $request) {
    $user = User::where('email', $request->email)->first();

    if ($user &&
        Hash::check($request->password, $user->password)) {
        return $user;
    }
});

----------------------------------------

TITLE: Publishing Package Configuration in Laravel Service Provider
DESCRIPTION: Shows how to publish a package's configuration file to the Laravel application's config directory using the publishes method in the service provider's boot method.

LANGUAGE: php
CODE:
public function boot(): void
{
    $this->publishes([
        __DIR__.'/../config/courier.php' => config_path('courier.php'),
    ]);
}

----------------------------------------

TITLE: Installing Laravel Reverb
DESCRIPTION: Command to install Laravel Reverb broadcasting capabilities using Artisan

LANGUAGE: shell
CODE:
php artisan install:broadcasting

----------------------------------------

TITLE: Creating Laravel Database Seeder
DESCRIPTION: Shell command to generate a new seeder class using Laravel's Artisan CLI

LANGUAGE: shell
CODE:
php artisan make:seeder UserSeeder

----------------------------------------

TITLE: Disable Hash Algorithm Verification
DESCRIPTION: Environment variable configuration to disable hash algorithm verification for supporting multiple hashing algorithms.

LANGUAGE: ini
CODE:
HASH_VERIFY=false

----------------------------------------

TITLE: Demonstrating CSRF Vulnerability with HTML Form in Blade
DESCRIPTION: This snippet shows how a malicious website could create an HTML form to exploit a CSRF vulnerability, highlighting the importance of CSRF protection.

LANGUAGE: blade
CODE:
<form action="https://your-application.com/user/email" method="POST">
    <input type="email" value="malicious-email@example.com">
</form>

<script>
    document.forms[0].submit();
</script>

----------------------------------------

TITLE: Defining a Mutator in Laravel Eloquent Model
DESCRIPTION: Example of defining a mutator method to transform the first_name attribute when set. Demonstrates both get and set transformations.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    /**
     * Interact with the user's first name.
     */
    protected function firstName(): Attribute
    {
        return Attribute::make(
            get: fn (string $value) => ucfirst($value),
            set: fn (string $value) => strtolower($value),
        );
    }
}

----------------------------------------

TITLE: Naming Routes and Applying Middleware in Laravel Folio
DESCRIPTION: Shows how to assign names to Folio routes and apply middleware to specific pages or groups of pages. Includes examples of using named routes and defining inline middleware.

LANGUAGE: php
CODE:
<?php

use function Laravel\Folio\name;

name('users.index');

LANGUAGE: php
CODE:
<a href="{{ route('users.index') }}">
    All Users
</a>

LANGUAGE: php
CODE:
<?php

use function Laravel\Folio\{middleware};

middleware(['auth', 'verified']);

?>

<div>
    Dashboard
</div>

LANGUAGE: php
CODE:
use Laravel\Folio\Folio;

Folio::path(resource_path('views/pages'))->middleware([
    'admin/*' => [
        'auth',
        'verified',

        // ...
    ],
]);

----------------------------------------

TITLE: Using Enum Rule for Validation
DESCRIPTION: Example of using the Enum rule to validate enum values.

LANGUAGE: php
CODE:
use App\Enums\ServerStatus;
use Illuminate\Validation\Rule;

$request->validate([
    'status' => [Rule::enum(ServerStatus::class)],
]);

----------------------------------------

TITLE: PHPDoc with Generic Types in Laravel
DESCRIPTION: Example of a Laravel method documentation block using @return attribute to specify generic types when native types are not sufficient.

LANGUAGE: php
CODE:
/**
 * Get the attachments for the message.
 *
 * @return array<int, \Illuminate\Mail\Mailables\Attachment>
 */
public function attachments(): array
{
    return [
        Attachment::fromStorage('/path/to/file'),
    ];
}

----------------------------------------

TITLE: Storing CSRF Token in HTML Meta Tag
DESCRIPTION: This Blade snippet shows how to store the CSRF token in an HTML meta tag, which can be used for AJAX requests requiring CSRF protection.

LANGUAGE: blade
CODE:
<meta name="csrf-token" content="{{ csrf_token() }}">

----------------------------------------

TITLE: Displaying Laravel Version Support Table in Markdown
DESCRIPTION: A markdown table showing Laravel versions, supported PHP versions, release dates, and support timelines for bug fixes and security fixes.

LANGUAGE: markdown
CODE:
| Version | PHP (*) | Release | Bug Fixes Until | Security Fixes Until |
| --- | --- | --- | --- | --- |
| 9 | 8.0 - 8.2 | February 8th, 2022 | August 8th, 2023 | February 6th, 2024 |
| 10 | 8.1 - 8.3 | February 14th, 2023 | August 6th, 2024 | February 4th, 2025 |
| 11 | 8.2 - 8.4 | March 12th, 2024 | September 3rd, 2025 | March 12th, 2026 |
| 12 | 8.2 - 8.4 | February 24th, 2025 | August 13th, 2026 | February 24th, 2027 |

----------------------------------------

TITLE: Installing Laravel Folio via Composer
DESCRIPTION: Shows the command to install Laravel Folio using Composer package manager and the subsequent Artisan command to install Folio's service provider.

LANGUAGE: shell
CODE:
composer require laravel/folio

LANGUAGE: shell
CODE:
php artisan folio:install

----------------------------------------

TITLE: Laravel Entry Point Path
DESCRIPTION: The main entry point file path for all Laravel application requests that gets processed by the web server.

LANGUAGE: text
CODE:
public/index.php

----------------------------------------

TITLE: Publishing Package Assets in Laravel Service Provider
DESCRIPTION: Demonstrates how to publish package assets (JavaScript, CSS, images) to the application's public directory using the publishes method in the service provider's boot method.

LANGUAGE: php
CODE:
public function boot(): void
{
    $this->publishes([
        __DIR__.'/../public' => public_path('vendor/courier'),
    ], 'public');
}

----------------------------------------

TITLE: Conditional String Manipulation in PHP
DESCRIPTION: Illustrates the use of the when() method to conditionally manipulate strings based on a given condition.

LANGUAGE: PHP
CODE:
use Illuminate\Support\Str;
use Illuminate\Support\Stringable;

$string = Str::of('Taylor')
    ->when(true, function (Stringable $string) {
        return $string->append(' Otwell');
    });

// 'Taylor Otwell'

----------------------------------------

TITLE: Publishing Pennant Configuration and Migration Files
DESCRIPTION: Artisan command to publish Pennant's configuration and migration files.

LANGUAGE: shell
CODE:
php artisan vendor:publish --provider="Laravel\Pennant\PennantServiceProvider"

----------------------------------------

TITLE: Adding Verified Middleware to Routes
DESCRIPTION: PHP code snippet demonstrating how to add the 'verified' middleware to routes for email verification.

LANGUAGE: php
CODE:
Route::middleware(['auth', 'verified'])->group(function () {
    Route::get('dashboard', function () {
        return Inertia::render('dashboard');
    })->name('dashboard');
});

----------------------------------------

TITLE: Setting Cookies in Laravel Tests
DESCRIPTION: Demonstrates how to set cookies for a request in a Laravel test.

LANGUAGE: php
CODE:
<?php

test('interacting with cookies', function () {
    $response = $this->withCookie('color', 'blue')->get('/');

    $response = $this->withCookies([
        'color' => 'blue',
        'name' => 'Taylor',
    ])->get('/');

    //
});

----------------------------------------

TITLE: Using Facade Spies in Laravel Testing with PHP
DESCRIPTION: This snippet shows how to use a facade spy in Laravel testing. Spies record interactions and allow for assertions after the code has been executed.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Cache;

test('values are be stored in cache', function () {
    Cache::spy();

    $response = $this->get('/');

    $response->assertStatus(200);

    Cache::shouldHaveReceived('put')->once()->with('name', 'Taylor', 10);
});

----------------------------------------

TITLE: Registering Global Middleware in Laravel
DESCRIPTION: Adding middleware to the global middleware stack in the bootstrap/app.php file.

LANGUAGE: php
CODE:
use App\Http\Middleware\EnsureTokenIsValid;

->withMiddleware(function (Middleware $middleware) {
     $middleware->append(EnsureTokenIsValid::class);
})

----------------------------------------

TITLE: Handling Paddle Webhooks
DESCRIPTION: Set up a route to handle incoming Paddle webhooks.

LANGUAGE: php
CODE:
use Laravel\Paddle\Events\WebhookReceived;

class PaddleEventListener
{
    public function handle(WebhookReceived $event): void
    {
        if ($event->payload['event_type'] === 'transaction.billed') {
            // Handle the incoming event...
        }
    }
}

----------------------------------------

TITLE: Building Inertia SSR Compatible Bundle
DESCRIPTION: Command to build an Inertia SSR compatible bundle for React and Vue starter kits.

LANGUAGE: shell
CODE:
npm run build:ssr

----------------------------------------

TITLE: GitHub Actions CI Configuration
DESCRIPTION: Example GitHub Actions workflow configuration for running Dusk tests

LANGUAGE: yaml
CODE:
name: CI
on: [push]
jobs:
  dusk-php:
    runs-on: ubuntu-latest
    env:
      APP_URL: "http://127.0.0.1:8000"
      DB_USERNAME: root
      DB_PASSWORD: root
      MAIL_MAILER: log
    steps:
      - uses: actions/checkout@v4
      - name: Prepare The Environment
        run: cp .env.example .env
      - name: Create Database
        run: |
          sudo systemctl start mysql
          mysql --user="root" --password="root" -e "CREATE DATABASE `my-database` character set UTF8mb4 collate utf8mb4_bin;"
      - name: Install Composer Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

----------------------------------------

TITLE: Handling Authentication in HTTP Requests
DESCRIPTION: Demonstrates how to add authentication to HTTP requests using Laravel's HTTP client.

LANGUAGE: php
CODE:
// Basic authentication...
$response = Http::withBasicAuth('taylor@laravel.com', 'secret')->post(/* ... */);

// Digest authentication...
$response = Http::withDigestAuth('taylor@laravel.com', 'secret')->post(/* ... */);

// Bearer token...
$response = Http::withToken('token')->post(/* ... */);

----------------------------------------

TITLE: Caching Configuration in Laravel
DESCRIPTION: Use the 'config:cache' Artisan command to cache all configuration files into a single file for improved performance.

LANGUAGE: shell
CODE:
php artisan config:cache

LANGUAGE: shell
CODE:
php artisan config:clear

----------------------------------------

TITLE: Documenting Laravel Method with PHPDoc
DESCRIPTION: Example of a valid Laravel documentation block for a method, demonstrating proper formatting for @param and @return attributes.

LANGUAGE: php
CODE:
/**
 * Register a binding with the container.
 *
 * @param  string|array  $abstract
 * @param  \Closure|string|null  $concrete
 * @param  bool  $shared
 * @return void
 *
 * @throws \Exception
 */
public function bind($abstract, $concrete = null, $shared = false)
{
    // ...
}

----------------------------------------

TITLE: Changing Layout in Livewire Starter Kit
DESCRIPTION: Example of changing the layout in the Livewire starter kit's Blade template.

LANGUAGE: blade
CODE:
<x-layouts.app.header>
    <flux:main container>
        {{ $slot }}
    </flux:main>
</x-layouts.app.header>

----------------------------------------

TITLE: Basic User Resource Implementation
DESCRIPTION: Example of a basic UserResource class that transforms a User model into a JSON-friendly array format.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class UserResource extends JsonResource
{
    public function toArray(Request $request): array
    {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'email' => $this->email,
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,
        ];
    }
}

----------------------------------------

TITLE: Running Migrations in Laravel
DESCRIPTION: Execute the migrate Artisan command to run all outstanding migrations.

LANGUAGE: shell
CODE:
php artisan migrate

----------------------------------------

TITLE: Customizing Process Behavior in Laravel
DESCRIPTION: Shows how to customize process execution by setting the working directory, input, timeout, and environment variables.

LANGUAGE: php
CODE:
$result = Process::path(__DIR__)
    ->timeout(120)
    ->env(['IMPORT_PATH' => __DIR__])
    ->input('Hello World')
    ->run('bash import.sh');

----------------------------------------

TITLE: Enabling Console Events for Testing in Laravel
DESCRIPTION: Demonstrates how to enable console events for testing by using the WithConsoleEvents trait in a test class.

LANGUAGE: php
CODE:
<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\WithConsoleEvents;
use Tests\TestCase;

class ConsoleEventTest extends TestCase
{
    use WithConsoleEvents;

    // ...
}

----------------------------------------

TITLE: Scheduling Shell Commands in Laravel
DESCRIPTION: Shows how to schedule a shell command to run daily using the exec method.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Schedule;

Schedule::exec('node /home/forge/script.js')->daily();

----------------------------------------

TITLE: Defining Horizon Dashboard Authorization
DESCRIPTION: Example of defining authorization for accessing the Horizon dashboard in non-local environments.

LANGUAGE: php
CODE:
protected function gate(): void
{
    Gate::define('viewHorizon', function (User $user) {
        return in_array($user->email, [
            'taylor@laravel.com',
        ]);
    });
}

----------------------------------------

TITLE: Using the @feature Blade Directive
DESCRIPTION: Example of using the @feature Blade directive to conditionally render content.

LANGUAGE: blade
CODE:
@feature('site-redesign')
    <!-- 'site-redesign' is active -->
@else
    <!-- 'site-redesign' is inactive -->
@endfeature

----------------------------------------

TITLE: GitHub Actions Workflow for Laravel Pint
DESCRIPTION: GitHub Actions workflow configuration for automatically running Pint on code pushes

LANGUAGE: yaml
CODE:
name: Fix Code Style

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        php: [8.4]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: json, dom, curl, libxml, mbstring
          coverage: none

      - name: Install Pint
        run: composer global require laravel/pint

      - name: Run Pint
        run: pint

      - name: Commit linted files
        uses: stefanzweifel/git-auto-commit-action@v5

----------------------------------------

TITLE: Handling Password Reset Link Request in Laravel
DESCRIPTION: Route handler for processing password reset requests, including email validation and reset link generation using Laravel's Password facade.

LANGUAGE: php
CODE:
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;

Route::post('/forgot-password', function (Request $request) {
    $request->validate(['email' => 'required|email']);

    $status = Password::sendResetLink(
        $request->only('email')
    );

    return $status === Password::ResetLinkSent
        ? back()->with(['status' => __($status)])
        : back()->withErrors(['email' => __($status)]);
})->middleware('guest')->name('password.email');

----------------------------------------

TITLE: Authorizing Broadcast Channels in PHP
DESCRIPTION: Example of defining channel authorization logic in the routes/channels.php file.

LANGUAGE: PHP
CODE:
use App\Models\Order;
use App\Models\User;

Broadcast::channel('orders.{orderId}', function (User $user, int $orderId) {
    return $user->id === Order::findOrNew($orderId)->user_id;
});

----------------------------------------

TITLE: Making Concurrent HTTP Requests
DESCRIPTION: Demonstrates how to make multiple HTTP requests concurrently using Laravel's HTTP client.

LANGUAGE: php
CODE:
use Illuminate\Http\Client\Pool;
use Illuminate\Support\Facades\Http;

$responses = Http::pool(fn (Pool $pool) => [
    $pool->get('http://localhost/first'),
    $pool->get('http://localhost/second'),
    $pool->get('http://localhost/third'),
]);

----------------------------------------

TITLE: Running Laravel Pint Basic Commands
DESCRIPTION: Various command line options for running Pint, including basic execution, targeting specific files/directories, and verbose output

LANGUAGE: shell
CODE:
./vendor/bin/pint

./vendor/bin/pint app/Models

./vendor/bin/pint app/Models/User.php

./vendor/bin/pint -v

----------------------------------------

TITLE: Publishing Email Views for Customization
DESCRIPTION: Command to publish email views for customization of the default email template.

LANGUAGE: shell
CODE:
php artisan vendor:publish --tag=laravel-mail

----------------------------------------

TITLE: Starting FrankenPHP Server
DESCRIPTION: Command to start FrankenPHP server for serving Laravel applications with the public directory as the root.

LANGUAGE: shell
CODE:
frankenphp php-server -r public/

----------------------------------------

TITLE: Streaming Response in Laravel
DESCRIPTION: Demonstrates how to create a streamed response for handling large datasets or real-time data transmission.

LANGUAGE: php
CODE:
Route::get('/stream', function () {
    return response()->stream(function (): void {
        foreach (streamedContent() as $chunk) {
            echo $chunk;
            ob_flush();
            flush();
            sleep(2);
        }
    }, 200, ['X-Accel-Buffering' => 'no']);
});

----------------------------------------

TITLE: Installing Laravel Passport
DESCRIPTION: Command to install Laravel Passport via Artisan and basic model configuration.

LANGUAGE: shell
CODE:
php artisan install:api --passport

LANGUAGE: php
CODE:
use Laravel\Passport\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;
}

----------------------------------------

TITLE: Publishing Additional shadcn-vue Components (Vue)
DESCRIPTION: Command to publish additional shadcn-vue components for Vue using npx.

LANGUAGE: shell
CODE:
npx shadcn-vue@latest add switch

----------------------------------------

TITLE: Creating a Multi-select Prompt in PHP
DESCRIPTION: Example of using the multiselect function to allow users to select multiple options from a list.

LANGUAGE: php
CODE:
use function Laravel\Prompts\multiselect;

$permissions = multiselect(
    label: 'What permissions should be assigned?',
    options: [
        'read' => 'Read',
        'create' => 'Create',
        'update' => 'Update',
        'delete' => 'Delete',
    ],
    default: ['read', 'create']
);

----------------------------------------

TITLE: Registering View Composers in Laravel Service Provider
DESCRIPTION: Illustrates how to register view composers in a Laravel service provider. Both class-based and closure-based composers are shown, along with attaching composers to multiple views.

LANGUAGE: php
CODE:
<?php

namespace App\Providers;

use App\View\Composers\ProfileComposer;
use Illuminate\Support\Facades;
use Illuminate\Support\ServiceProvider;
use Illuminate\View\View;

class AppServiceProvider extends ServiceProvider
{
    public function boot(): void
    {
        // Using class based composers...
        Facades\View::composer('profile', ProfileComposer::class);

        // Using closure based composers...
        Facades\View::composer('welcome', function (View $view) {
            // ...
        });

        Facades\View::composer('dashboard', function (View $view) {
            // ...
        });
    }
}

----------------------------------------

TITLE: Registering Telescope Service Providers
DESCRIPTION: PHP code for conditionally registering Telescope service providers in local environment.

LANGUAGE: php
CODE:
public function register(): void
{
    if ($this->app->environment('local') && class_exists(\Laravel\Telescope\TelescopeServiceProvider::class)) {
        $this->app->register(\Laravel\Telescope\TelescopeServiceProvider::class);
        $this->app->register(TelescopeServiceProvider::class);
    }
}

----------------------------------------

TITLE: Creating Basic String Response in Laravel PHP
DESCRIPTION: Demonstrates the simplest way to return a string response from a Laravel route. The framework automatically converts the string into a complete HTTP response.

LANGUAGE: php
CODE:
Route::get('/', function () {
    return 'Hello World';
});

----------------------------------------

TITLE: Using Text Prompt in PHP
DESCRIPTION: Example of using the text prompt function to ask for user input with optional placeholder, default value, and hint.

LANGUAGE: php
CODE:
use function Laravel\Prompts\text;

$name = text(
    label: 'What is your name?',
    placeholder: 'E.g. Taylor Otwell',
    default: $user?->name,
    hint: 'This will be displayed on your profile.'
);

----------------------------------------

TITLE: Handling Email Verification Link Clicks
DESCRIPTION: This code defines a route that handles requests when users click the email verification link sent to them.

LANGUAGE: php
CODE:
use Illuminate\Foundation\Auth\EmailVerificationRequest;

Route::get('/email/verify/{id}/{hash}', function (EmailVerificationRequest $request) {
    $request->fulfill();

    return redirect('/home');
})->middleware(['auth', 'signed'])->name('verification.verify');

----------------------------------------

TITLE: Customizing the Pulse Dashboard
DESCRIPTION: Examples of customizing the Pulse dashboard layout and component display

LANGUAGE: blade
CODE:
<x-pulse full-width>
    ...
</x-pulse>

LANGUAGE: blade
CODE:
<x-pulse cols="16">
    ...
</x-pulse>

LANGUAGE: blade
CODE:
<livewire:pulse.usage cols="4" rows="2" />

----------------------------------------

TITLE: Checking Subscription Status
DESCRIPTION: Methods to check a user's subscription status

LANGUAGE: php
CODE:
if ($user->subscribed('default')) {
    // ...
}

if ($user->subscription('default')->onTrial()) {
    // ...
}

if ($user->subscription('default')->canceled()) {
    // ...
}

----------------------------------------

TITLE: Package Discovery Configuration
DESCRIPTION: JSON configuration to prevent Telescope package auto-discovery in composer.json

LANGUAGE: json
CODE:
"extra": {
    "laravel": {
        "dont-discover": [
            "laravel/telescope"
        ]
    }
}

----------------------------------------

TITLE: Protecting Routes with Verified Middleware
DESCRIPTION: This example shows how to use the 'verified' middleware to protect routes, ensuring only verified users can access them.

LANGUAGE: php
CODE:
Route::get('/profile', function () {
    // Only verified users may access this route...
})->middleware(['auth', 'verified']);

----------------------------------------

TITLE: Retrieving Translation Strings in Laravel
DESCRIPTION: Examples of retrieving translation strings using the __ helper function in PHP and Blade templates.

LANGUAGE: php
CODE:
echo __('messages.welcome');

echo __('I love programming.');

LANGUAGE: php
CODE:
{{ __('messages.welcome') }}

----------------------------------------

TITLE: Creating a Custom Mail Transport in Laravel
DESCRIPTION: Example of creating a custom mail transport in Laravel by extending the AbstractTransport class and registering it with the Mail facade.

LANGUAGE: php
CODE:
use Symfony\Component\Mailer\Transport\AbstractTransport;

class MailchimpTransport extends AbstractTransport
{
    public function __construct(protected ApiClient $client)
    {
        parent::__construct();
    }

    protected function doSend(SentMessage $message): void
    {
        // Implementation
    }

    public function __toString(): string
    {
        return 'mailchimp';
    }
}

// In a service provider
use Illuminate\Support\Facades\Mail;

public function boot(): void
{
    Mail::extend('mailchimp', function (array $config = []) {
        return new MailchimpTransport(/* ... */);
    });
}

----------------------------------------

TITLE: Selenium Docker Service Configuration
DESCRIPTION: Docker Compose configuration for setting up Selenium service for Laravel Dusk browser testing.

LANGUAGE: yaml
CODE:
selenium:
    image: 'selenium/standalone-chrome'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
        - '/dev/shm:/dev/shm'
    networks:
        - sail

----------------------------------------

TITLE: Customizing Verification Email Content
DESCRIPTION: This code demonstrates how to customize the content of the verification email using the toMailUsing method in the AppServiceProvider.

LANGUAGE: php
CODE:
use Illuminate\Auth\Notifications\VerifyEmail;
use Illuminate\Notifications\Messages\MailMessage;

/**
 * Bootstrap any application services.
 */
public function boot(): void
{
    // ...

    VerifyEmail::toMailUsing(function (object $notifiable, string $url) {
        return (new MailMessage)
            ->subject('Verify Email Address')
            ->line('Click the button below to verify your email address.')
            ->action('Verify Email Address', $url);
    });
}

----------------------------------------

TITLE: Configuring Tailwind CSS for Laravel Pagination
DESCRIPTION: CSS configuration to import Tailwind and source Laravel's pagination views in the application's CSS file.

LANGUAGE: CSS
CODE:
@import 'tailwindcss';

@source '../../vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php';

----------------------------------------

TITLE: Route Closure Request Handling
DESCRIPTION: Example of accessing the Request object in a route closure using dependency injection

LANGUAGE: php
CODE:
use Illuminate\Http\Request;

Route::get('/', function (Request $request) {
    // ...
});

----------------------------------------

TITLE: MongoDB Environment Configuration
DESCRIPTION: Environment variables configuration for connecting to MongoDB with authentication.

LANGUAGE: ini
CODE:
MONGODB_USERNAME=user
MONGODB_PASSWORD=laravel
MONGODB_URI=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017

----------------------------------------

TITLE: OAuth2 Authorization Request Example
DESCRIPTION: Example of redirecting for OAuth2 authorization using authorization code grant.

LANGUAGE: php
CODE:
Route::get('/redirect', function (Request $request) {
    $request->session()->put('state', $state = Str::random(40));

    $query = http_build_query([
        'client_id' => 'client-id',
        'redirect_uri' => 'http://example.com/callback',
        'response_type' => 'code',
        'scope' => '',
        'state' => $state,
    ]);

    return redirect('http://passport-app.test/oauth/authorize?'.$query);
});

----------------------------------------

TITLE: Configuring Minio in .env File
DESCRIPTION: Example of configuring AWS S3 compatible settings in the Laravel .env file to use Minio for object storage.

LANGUAGE: ini
CODE:
AWS_USE_PATH_STYLE_ENDPOINT=true
AWS_ENDPOINT=http://localhost:9600
AWS_ACCESS_KEY_ID=homestead
AWS_SECRET_ACCESS_KEY=secretkey
AWS_DEFAULT_REGION=us-east-1

----------------------------------------

TITLE: Configuring WorkOS Environment Variables
DESCRIPTION: Example of setting WorkOS environment variables in the .env file for WorkOS AuthKit integration.

LANGUAGE: ini
CODE:
WORKOS_CLIENT_ID=your-client-id
WORKOS_API_KEY=your-api-key
WORKOS_REDIRECT_URL="${APP_URL}/authenticate"

----------------------------------------

TITLE: Configuring Mailpit in .env File
DESCRIPTION: Example of configuring mail settings in the Laravel .env file to use Mailpit for intercepting outgoing email.

LANGUAGE: ini
CODE:
MAIL_MAILER=smtp
MAIL_HOST=localhost
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null

----------------------------------------

TITLE: Defining Translation Strings in PHP File
DESCRIPTION: Example of defining translation strings in a PHP file within the lang directory. This approach uses short keys to define translations.

LANGUAGE: php
CODE:
<?php

// lang/en/messages.php

return [
    'welcome' => 'Welcome to our application!',
];

----------------------------------------

TITLE: Configuring Slack Bot Scopes in Laravel Socialite
DESCRIPTION: Set up Slack bot token authentication with specific scopes using the asBotUser method.

LANGUAGE: php
CODE:
return Socialite::driver('slack')
    ->asBotUser()
    ->setScopes(['chat:write', 'chat:write.public', 'chat:write.customize'])
    ->redirect();

LANGUAGE: php
CODE:
$user = Socialite::driver('slack')->asBotUser()->user();

----------------------------------------

TITLE: Defining Email Verification Notice Route
DESCRIPTION: This snippet shows how to define a route for displaying the email verification notice to users who haven't verified their email address.

LANGUAGE: php
CODE:
Route::get('/email/verify', function () {
    return view('auth.verify-email');
})->middleware('auth')->name('verification.notice');

----------------------------------------

TITLE: Installing Laravel Valet with PHP
DESCRIPTION: Commands for installing Homebrew, PHP, and Laravel Valet on macOS.

LANGUAGE: shell
CODE:
brew update
brew install php
composer global require laravel/valet
valet install

----------------------------------------

TITLE: Replacing Parameters in Translation Strings
DESCRIPTION: Example of defining and using placeholders in translation strings, including automatic capitalization.

LANGUAGE: php
CODE:
'welcome' => 'Welcome, :name',

echo __('messages.welcome', ['name' => 'dayle']);

'welcome' => 'Welcome, :NAME', // Welcome, DAYLE
'goodbye' => 'Goodbye, :Name', // Goodbye, Dayle

----------------------------------------

TITLE: Adding Optional Parameters to OAuth Redirect in Laravel Socialite
DESCRIPTION: Include additional optional parameters in the OAuth redirect request using the with method.

LANGUAGE: php
CODE:
use Laravel\Socialite\Facades\Socialite;

return Socialite::driver('google')
    ->with(['hd' => 'example.com'])
    ->redirect();

----------------------------------------

TITLE: Configuring Folio Paths and URIs in Laravel
DESCRIPTION: Illustrates how to customize Folio paths and URIs in the service provider's boot method. This example shows setting up separate paths for guest and admin pages with different base URIs and middleware.

LANGUAGE: php
CODE:
use Laravel\Folio\Folio;

Folio::path(resource_path('views/pages/guest'))->uri('/');

Folio::path(resource_path('views/pages/admin'))
    ->uri('/admin')
    ->middleware([
        '*' => [
            'auth',
            'verified',

            // ...
        ],
    ]);

----------------------------------------

TITLE: Password Hash Verification
DESCRIPTION: Example showing how to verify a plain-text password against a stored hash using the Hash facade's check method.

LANGUAGE: php
CODE:
if (Hash::check('plain-text', $hashedPassword)) {
    // The passwords match...
}

----------------------------------------

TITLE: Clearing Expired Password Reset Tokens in Laravel
DESCRIPTION: Artisan command for clearing expired password reset tokens from the database.

LANGUAGE: shell
CODE:
php artisan auth:clear-resets

----------------------------------------

TITLE: Installing Laravel Pulse via Composer
DESCRIPTION: Commands to install Laravel Pulse package and publish its assets

LANGUAGE: shell
CODE:
composer require laravel/pulse

LANGUAGE: shell
CODE:
php artisan vendor:publish --provider="Laravel\Pulse\PulseServiceProvider"

LANGUAGE: shell
CODE:
php artisan migrate

----------------------------------------

TITLE: Implementing a Form with Multiple Prompts
DESCRIPTION: Example of using the form function to create a grouped set of prompts for collecting user information.

LANGUAGE: php
CODE:
use function Laravel\Prompts\form;

$responses = form()
    ->text('What is your name?', required: true, name: 'name')
    ->password(
        label: 'What is your password?',
        validate: ['password' => 'min:8'],
        name: 'password'
    )
    ->confirm('Do you accept the terms?')
    ->submit();

----------------------------------------

TITLE: Publishing Laravel Hashing Configuration
DESCRIPTION: Command to publish Laravel's hashing configuration file for customizing hashing driver options.

LANGUAGE: shell
CODE:
php artisan config:publish hashing

----------------------------------------

TITLE: Creating a Subscription Checkout Session
DESCRIPTION: Generate a checkout session to subscribe a user to a plan.

LANGUAGE: php
CODE:
Route::get('/user/subscribe', function (Request $request) {
    $checkout = $request->user()
        ->subscribe('pri_monthly')
        ->returnTo(route('home'));

    return view('billing', ['checkout' => $checkout]);
});

----------------------------------------

TITLE: Enabling Email Verification in User Model
DESCRIPTION: PHP code snippet showing how to enable email verification in the User model.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
// ...

class User extends Authenticatable implements MustVerifyEmail
{
    // ...
}

----------------------------------------

TITLE: Creating a New Laravel Application
DESCRIPTION: Command to create a new Laravel application using the Laravel installer CLI tool.

LANGUAGE: shell
CODE:
laravel new my-app

----------------------------------------

TITLE: Testing Console Command Exit Code in Laravel (PHPUnit)
DESCRIPTION: Shows how to test an Artisan command's exit code using PHPUnit in Laravel.

LANGUAGE: php
CODE:
/**
 * Test a console command.
 */
public function test_console_command(): void
{
    $this->artisan('inspire')->assertExitCode(0);
}

----------------------------------------

TITLE: Configuring Stripe API Keys
DESCRIPTION: Setting Stripe API keys in the .env file

LANGUAGE: ini
CODE:
STRIPE_KEY=your-stripe-key
STRIPE_SECRET=your-stripe-secret
STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret

----------------------------------------

TITLE: Laravel Bootstrap Provider Configuration
DESCRIPTION: The file path where user-defined or third-party service providers are configured for the application bootstrap process.

LANGUAGE: text
CODE:
bootstrap/providers.php

----------------------------------------

TITLE: Installing Frontend Dependencies and Starting Development Server
DESCRIPTION: Commands to install frontend dependencies, build assets, and start the Laravel development server.

LANGUAGE: shell
CODE:
cd my-app
npm install && npm run build
composer run dev

----------------------------------------

TITLE: Simplified PHPDoc with Native Types in Laravel
DESCRIPTION: Example of a Laravel method documentation block where @param and @return attributes are omitted due to the use of native types.

LANGUAGE: php
CODE:
/**
 * Execute the job.
 */
public function handle(AudioProcessor $processor): void
{
    //
}

----------------------------------------

TITLE: Configuring OAuth Provider Credentials in Laravel
DESCRIPTION: Add OAuth provider credentials to the config/services.php file in your Laravel application.

LANGUAGE: php
CODE:
'github' => [
    'client_id' => env('GITHUB_CLIENT_ID'),
    'client_secret' => env('GITHUB_CLIENT_SECRET'),
    'redirect' => 'http://example.com/callback-url',
],

----------------------------------------

TITLE: Using Published shadcn-vue Component in Vue
DESCRIPTION: Example of using a published shadcn-vue component (Switch) in a Vue component.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { Switch } from '@/Components/ui/switch'
</script>

<template>
    <div>
        <Switch />
    </div>
</template>

----------------------------------------

TITLE: Publishing Additional shadcn Components (React)
DESCRIPTION: Command to publish additional shadcn components for React using npx.

LANGUAGE: shell
CODE:
npx shadcn@latest add switch

----------------------------------------

TITLE: Creating OAuth2 Clients
DESCRIPTION: Artisan commands for creating different types of OAuth2 clients.

LANGUAGE: shell
CODE:
php artisan passport:client
php artisan passport:client --password
php artisan passport:client --personal
php artisan passport:client --client

----------------------------------------

TITLE: Configuring Shell Alias for Laravel Sail
DESCRIPTION: Shell configuration to create an alias for easier execution of Sail commands.

LANGUAGE: shell
CODE:
alias sail='sh $([ -f sail ] && echo sail || echo vendor/bin/sail)'

----------------------------------------

TITLE: Starting Reverb Server
DESCRIPTION: Command to start the Reverb server with custom host and port options

LANGUAGE: shell
CODE:
php artisan reverb:start --host=127.0.0.1 --port=9000

----------------------------------------

TITLE: Using Published shadcn Component in React
DESCRIPTION: Example of using a published shadcn component (Switch) in a React component.

LANGUAGE: jsx
CODE:
import { Switch } from "@/components/ui/switch"

const MyPage = () => {
  return (
    <div>
      <Switch />
    </div>
  );
};

export default MyPage;

----------------------------------------

TITLE: Retrieving User Details from Token in Laravel Socialite
DESCRIPTION: Fetch user details using an existing valid access token with the userFromToken method.

LANGUAGE: php
CODE:
use Laravel\Socialite\Facades\Socialite;

$user = Socialite::driver('github')->userFromToken($token);

----------------------------------------

TITLE: Laravel Testing Database Configuration
DESCRIPTION: PHPUnit XML configuration for using a dedicated testing database.

LANGUAGE: xml
CODE:
<env name="DB_DATABASE" value="testing"/>

----------------------------------------

TITLE: Clearing Rate Limiter Attempts in Laravel
DESCRIPTION: This snippet shows how to clear the rate limiter attempts for a specific key. It's demonstrated in the context of marking a message as read and resetting the send message limit for the user.

LANGUAGE: php
CODE:
use App\Models\Message;
use Illuminate\Support\Facades\RateLimiter;

/**
 * Mark the message as read.
 */
public function read(Message $message): Message
{
    $message->markAsRead();

    RateLimiter::clear('send-message:'.$message->user_id);

    return $message;
}

----------------------------------------

TITLE: Converting Model Attributes to Array
DESCRIPTION: Shows how to convert only the model's attributes to an array without including relationships.

LANGUAGE: php
CODE:
$user = User::first();

return $user->attributesToArray();

----------------------------------------

TITLE: Setting OAuth Scopes in Laravel Socialite
DESCRIPTION: Specify the scopes to be included in the OAuth authentication request using the scopes or setScopes methods.

LANGUAGE: php
CODE:
use Laravel\Socialite\Facades\Socialite;

return Socialite::driver('github')
    ->scopes(['read:user', 'public_repo'])
    ->redirect();

LANGUAGE: php
CODE:
return Socialite::driver('github')
    ->setScopes(['read:user', 'public_repo'])
    ->redirect();

----------------------------------------

TITLE: Defining Basic Envoy Tasks
DESCRIPTION: Example of defining servers and tasks in Envoy using Blade syntax. Shows how to specify servers and create a task for restarting queues.

LANGUAGE: blade
CODE:
@servers(['web' => ['user@192.168.1.1'], 'workers' => ['user@192.168.1.2']])

@task('restart-queues', ['on' => 'workers'])
    cd /home/user/example.com
    php artisan queue:restart
@endtask

----------------------------------------

TITLE: Creating a New Subscription
DESCRIPTION: Example of creating a new subscription for a user

LANGUAGE: php
CODE:
use Illuminate\Http\Request;

Route::post('/user/subscribe', function (Request $request) {
    $request->user()->newSubscription(
        'default', 'price_monthly'
    )->create($request->paymentMethodId);

    // ...
});

----------------------------------------

TITLE: Configuring Paddle API Keys
DESCRIPTION: Set up Paddle API keys in the .env file.

LANGUAGE: ini
CODE:
PADDLE_CLIENT_SIDE_TOKEN=your-paddle-client-side-token
PADDLE_API_KEY=your-paddle-api-key
PADDLE_RETAIN_KEY=your-paddle-retain-key
PADDLE_WEBHOOK_SECRET="your-paddle-webhook-secret"
PADDLE_SANDBOX=true

----------------------------------------

TITLE: Installing Laravel Socialite via Composer
DESCRIPTION: Use Composer to add Laravel Socialite to your project's dependencies.

LANGUAGE: shell
CODE:
composer require laravel/socialite

----------------------------------------

TITLE: Configuring Multiple Server Deployment
DESCRIPTION: Example showing how to deploy to multiple servers with parallel execution option.

LANGUAGE: blade
CODE:
@servers(['web-1' => '192.168.1.1', 'web-2' => '192.168.1.2'])

@task('deploy', ['on' => ['web-1', 'web-2'], 'parallel' => true])
    cd /home/user/example.com
    git pull origin {{ $branch }}
    php artisan migrate --force
@endtask

----------------------------------------

TITLE: Installing Laravel Installer Using Composer
DESCRIPTION: Command to update the Laravel installer globally using Composer package manager.

LANGUAGE: shell
CODE:
composer global update laravel/installer

----------------------------------------

TITLE: Converting Collection to Array
DESCRIPTION: Demonstrates converting an entire collection of Eloquent models to an array format.

LANGUAGE: php
CODE:
$users = User::all();

return $users->toArray();

----------------------------------------

TITLE: Attribute Casting Configuration in Laravel Model
DESCRIPTION: Example showing how to configure attribute casting to automatically convert database values to specific PHP types.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'is_admin' => 'boolean',
        ];
    }
}

----------------------------------------

TITLE: Using Str::of() for Fluent String Operations in PHP
DESCRIPTION: Demonstrates how to use the Str::of() method to create a fluent string instance and perform chained operations.

LANGUAGE: PHP
CODE:
use Illuminate\Support\Str;

$string = Str::of('Hello World')
    ->upper()
    ->replace('WORLD', 'LARAVEL')
    ->append('!');

// HELLO LARAVEL!

----------------------------------------

TITLE: Dispatching Registered Event for Manual User Registration
DESCRIPTION: This code demonstrates how to dispatch the Registered event after successful user registration when implementing registration manually.

LANGUAGE: php
CODE:
use Illuminate\Auth\Events\Registered;

event(new Registered($user));

----------------------------------------

TITLE: Installing Laravel Installer CLI Tool
DESCRIPTION: Command to install the Laravel installer CLI tool globally using Composer.

LANGUAGE: shell
CODE:
composer global require laravel/installer

----------------------------------------

TITLE: Displaying Password Reset Form in Laravel
DESCRIPTION: Route definition for showing the password reset form with a token parameter for verification.

LANGUAGE: php
CODE:
Route::get('/reset-password/{token}', function (string $token) {
    return view('auth.reset-password', ['token' => $token]);
})->middleware('guest')->name('password.reset');

----------------------------------------

TITLE: Bcrypt Work Factor Configuration
DESCRIPTION: Example showing how to adjust the Bcrypt work factor when hashing passwords using the rounds option.

LANGUAGE: php
CODE:
$hashed = Hash::make('password', [
    'rounds' => 12,
]);

----------------------------------------

TITLE: Custom Decay Rate for Rate Limiting in Laravel
DESCRIPTION: This snippet demonstrates setting a custom decay rate for rate limiting. It allows 5 attempts every two minutes by specifying a decay rate of 120 seconds.

LANGUAGE: php
CODE:
$executed = RateLimiter::attempt(
    'send-message:'.$user->id,
    $perTwoMinutes = 5,
    function() {
        // Send message...
    },
    $decayRate = 120,
);

----------------------------------------

TITLE: Installing Laravel Prompts via Composer
DESCRIPTION: Command to install Laravel Prompts using Composer package manager in PHP projects.

LANGUAGE: shell
CODE:
composer require laravel/prompts

----------------------------------------

TITLE: Generating Service Provider with Artisan CLI
DESCRIPTION: Uses the Artisan CLI to generate a new service provider in Laravel. This command automatically registers the new provider in the application's bootstrap/providers.php file.

LANGUAGE: shell
CODE:
php artisan make:provider RiakServiceProvider

----------------------------------------

TITLE: Configuring Laravel Route with Precognition Middleware
DESCRIPTION: Example of adding HandlePrecognitiveRequests middleware to a Laravel route to enable precognition features

LANGUAGE: php
CODE:
use App\Http\Requests\StoreUserRequest;
use Illuminate\Foundation\Http\Middleware\HandlePrecognitiveRequests;

Route::post('/users', function (StoreUserRequest $request) {
    // ...
})->middleware([HandlePrecognitiveRequests::class]);

----------------------------------------

TITLE: Session and Authentication in Laravel Tests
DESCRIPTION: Shows how to interact with the session and authenticate a user in a Laravel test.

LANGUAGE: php
CODE:
<?php

use App\Models\User;

test('an action that requires authentication', function () {
    $user = User::factory()->create();

    $response = $this->actingAs($user)
        ->withSession(['banned' => false])
        ->get('/');

    //
});

----------------------------------------

TITLE: Running Tests with PHPUnit in Laravel
DESCRIPTION: This snippet shows how to run tests using PHPUnit in Laravel via the command line.

LANGUAGE: shell
CODE:
./vendor/bin/phpunit

----------------------------------------

TITLE: Configuring jQuery for Automatic CSRF Token Inclusion
DESCRIPTION: This JavaScript snippet demonstrates how to configure jQuery to automatically include the CSRF token in all request headers for AJAX-based applications.

LANGUAGE: javascript
CODE:
$.ajaxSetup({
    headers: {
        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    }
});

----------------------------------------

TITLE: Installing Precognition NPM Packages
DESCRIPTION: Commands for installing various Precognition frontend packages via NPM

LANGUAGE: shell
CODE:
npm install laravel-precognition-vue
npm install laravel-precognition-vue-inertia
npm install laravel-precognition-react
npm install laravel-precognition-react-inertia
npm install laravel-precognition-alpine

----------------------------------------

TITLE: Custom Date Serialization Format
DESCRIPTION: Shows how to customize the date serialization format for Eloquent models.

LANGUAGE: php
CODE:
/**
 * Prepare a date for array / JSON serialization.
 */
protected function serializeDate(DateTimeInterface $date): string
{
    return $date->format('Y-m-d');
}

----------------------------------------

TITLE: Installing Laravel Envoy via Composer
DESCRIPTION: Commands to install Laravel Envoy using Composer package manager and access the binary.

LANGUAGE: shell
CODE:
composer require laravel/envoy --dev
php vendor/bin/envoy

----------------------------------------

TITLE: Excluding URIs from CSRF Protection in Laravel
DESCRIPTION: This PHP snippet demonstrates how to exclude specific URIs from CSRF protection in Laravel by configuring the validateCsrfTokens method in the bootstrap/app.php file.

LANGUAGE: php
CODE:
->withMiddleware(function (Middleware $middleware) {
    $middleware->validateCsrfTokens(except: [
        'stripe/*',
        'http://example.com/foo/bar',
        'http://example.com/foo/*',
    ]);
})

----------------------------------------

TITLE: Accessing Query Results
DESCRIPTION: Example showing how to iterate over query results and access column values as object properties.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\DB;

$users = DB::table('users')->get();

foreach ($users as $user) {
    echo $user->name;
}

----------------------------------------

TITLE: Defining Translation Strings in JSON File
DESCRIPTION: Example of defining translation strings in a JSON file within the lang directory. This approach uses the default translation as the key.

LANGUAGE: json
CODE:
{
    "I love programming.": "Me encanta programar."
}

----------------------------------------

TITLE: Defining Envoy Stories
DESCRIPTION: Example of creating stories to group multiple tasks together under a single command.

LANGUAGE: blade
CODE:
@servers(['web' => ['user@192.168.1.1']])

@story('deploy')
    update-code
    install-dependencies
@endstory

@task('update-code')
    cd /home/user/example.com
    git pull origin master
@endtask

@task('install-dependencies')
    cd /home/user/example.com
    composer install
@endtask

----------------------------------------

TITLE: Accessing CSRF Token in Laravel Route
DESCRIPTION: This PHP snippet demonstrates how to access the current session's CSRF token using either the request's session or the csrf_token helper function in a Laravel route.

LANGUAGE: php
CODE:
use Illuminate\Http\Request;

Route::get('/token', function (Request $request) {
    $token = $request->session()->token();

    $token = csrf_token();

    // ...
});

----------------------------------------

TITLE: Configuring Pulse Authorization
DESCRIPTION: Example of configuring access control for the Pulse dashboard using Gate definitions

LANGUAGE: php
CODE:
use App\Models\User;
use Illuminate\Support\Facades\Gate;

/**
 * Bootstrap any application services.
 */
public function boot(): void
{
    Gate::define('viewPulse', function (User $user) {
        return $user->isAdmin();
    });

    // ...
}

----------------------------------------

TITLE: Processing Password Reset Form in Laravel
DESCRIPTION: Route handler for processing the password reset form submission, including validation and password update logic.

LANGUAGE: php
CODE:
Route::post('/reset-password', function (Request $request) {
    $request->validate([
        'token' => 'required',
        'email' => 'required|email',
        'password' => 'required|min:8|confirmed',
    ]);

    $status = Password::reset(
        $request->only('email', 'password', 'password_confirmation', 'token'),
        function (User $user, string $password) {
            $user->forceFill([
                'password' => Hash::make($password)
            ])->setRememberToken(Str::random(60));

            $user->save();

            event(new PasswordReset($user));
        }
    );

    return $status === Password::PasswordReset
        ? redirect()->route('login')->with('status', __($status))
        : back()->withErrors(['email' => [__($status)]]);
})->middleware('guest')->name('password.update');

----------------------------------------

TITLE: Customizing Pagination View in Laravel Service Provider
DESCRIPTION: Setting default pagination views in the AppServiceProvider boot method.

LANGUAGE: PHP
CODE:
<?php

namespace App\Providers;

use Illuminate\Pagination\Paginator;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Paginator::defaultView('view-name');

        Paginator::defaultSimpleView('view-name');
    }
}

----------------------------------------

TITLE: Sample Valet Custom Driver Implementation
DESCRIPTION: Example implementation of a custom WordPress Valet driver showing the required serves, isStaticFile and frontControllerPath methods.

LANGUAGE: php
CODE:
/**
 * Determine if the driver serves the request.
 */
public function serves(string $sitePath, string $siteName, string $uri): bool
{
    return is_dir($sitePath.'/wp-admin');
}

/**
 * Determine if the incoming request is for a static file.
 *
 * @return string|false
 */
public function isStaticFile(string $sitePath, string $siteName, string $uri)
{
    if (file_exists($staticFilePath = $sitePath.'/public/'.$uri)) {
        return $staticFilePath;
    }

    return false;
}

/**
 * Get the fully resolved path to the application's front controller.
 */
public function frontControllerPath(string $sitePath, string $siteName, string $uri): string
{
    return $sitePath.'/public/index.php';
}

----------------------------------------

TITLE: Customizing Monolog for Laravel Channels
DESCRIPTION: Example of customizing Monolog formatter for a Laravel log channel using the tap configuration option.

LANGUAGE: php
CODE:
'single' => [
    'driver' => 'single',
    'tap' => [App\Logging\CustomizeFormatter::class],
    'path' => storage_path('logs/laravel.log'),
    'level' => env('LOG_LEVEL', 'debug'),
    'replace_placeholders' => true,
],

LANGUAGE: php
CODE:
<?php

namespace App\Logging;

use Illuminate\Log\Logger;
use Monolog\Formatter\LineFormatter;

class CustomizeFormatter
{
    /**
     * Customize the given logger instance.
     */
    public function __invoke(Logger $logger): void
    {
        foreach ($logger->getHandlers() as $handler) {
            $handler->setFormatter(new LineFormatter(
                '[%datetime%] %channel%.%level_name%: %message% %context% %extra%'
            ));
        }
    }
}

----------------------------------------

TITLE: Paginating Eloquent Results in Laravel
DESCRIPTION: Examples of paginating Eloquent query results using paginate, simplePaginate, and cursorPaginate methods.

LANGUAGE: PHP
CODE:
use App\Models\User;

$users = User::paginate(15);

$users = User::where('votes', '>', 100)->paginate(15);

$users = User::where('votes', '>', 100)->simplePaginate(15);

$users = User::where('votes', '>', 100)->cursorPaginate(15);

----------------------------------------

TITLE: Adding ConcurrencyServiceProvider in Laravel 11.x
DESCRIPTION: This snippet shows how to add the ConcurrencyServiceProvider to the providers array in the config/app.php file when upgrading from Laravel 10.x to 11.x.

LANGUAGE: php
CODE:
'providers' => ServiceProvider::defaultProviders()->merge([
    /*
     * Package Service Providers...
     */
    Illuminate\Concurrency\ConcurrencyServiceProvider::class, // [tl! add]

    /*
     * Application Service Providers...
     */
    App\Providers\AppServiceProvider::class,
    App\Providers\AuthServiceProvider::class,
    // App\Providers\BroadcastServiceProvider::class,
    App\Providers\EventServiceProvider::class,
    App\Providers\RouteServiceProvider::class,
])->toArray(),

----------------------------------------

TITLE: Testing Console Command Exit Code in Laravel (Pest)
DESCRIPTION: Demonstrates how to test an Artisan command's exit code using Pest testing framework in Laravel.

LANGUAGE: php
CODE:
test('console command', function () {
    $this->artisan('inspire')->assertExitCode(0);
});

----------------------------------------

TITLE: Installing Predis Package for Laravel Redis
DESCRIPTION: Command to install the Predis package via Composer if the PhpRedis extension is not available.

LANGUAGE: shell
CODE:
composer require predis/predis:^2.0

----------------------------------------

TITLE: Displaying Laravel Documentation URL in Markdown
DESCRIPTION: This snippet shows how to create a hyperlink to the Laravel documentation using Markdown syntax.

LANGUAGE: markdown
CODE:
[https://laravel.com/docs](https://laravel.com/docs)

----------------------------------------

TITLE: Laravel Service Provider Default Location
DESCRIPTION: The default directory path where application-specific service providers are stored in Laravel.

LANGUAGE: text
CODE:
app/Providers

----------------------------------------

TITLE: Configuring Cache for Rate Limiting in Laravel
DESCRIPTION: This snippet demonstrates how to configure the cache driver for rate limiting in Laravel. It shows setting the default cache and specifying a separate cache for the rate limiter.

LANGUAGE: php
CODE:
'default' => env('CACHE_STORE', 'database'),

'limiter' => 'redis',

----------------------------------------

TITLE: Basic Eloquent Collection Iteration
DESCRIPTION: Demonstrates how to iterate over an Eloquent collection using a foreach loop to access model properties.

LANGUAGE: php
CODE:
use App\Models\User;

$users = User::where('active', 1)->get();

foreach ($users as $user) {
    echo $user->name;
}

----------------------------------------

TITLE: Concurrency Result Index Mapping Example
DESCRIPTION: Demonstration of the new behavior in Concurrency::run method where results maintain their associated keys in the returned array.

LANGUAGE: php
CODE:
$result = Concurrency::run([
    'task-1' => fn () => 1 + 1,
    'task-2' => fn () => 2 + 2,
]);

// ['task-1' => 2, 'task-2' => 4]